{
    "title": "Life after the Lottery Ch. 66",
    "pages": [
        "Copyright LATL, 2019. No part of this shall be reproduced or re-posted on any other website. It is for the exclusive use of Literotica.com.\n\nLife after the Lottery, CH 66\n\nUpcoming business meeting\n\nWe all slept in on Sunday. We had been up late, having sex. The girls were all teasing me about the fake porn video they set up. Samantha and Amy kept at it until I ran them out of the bed to go start breakfast.\n\n\"You made it through your birthday,\" Dawn said as she lay in the bed.\n\n\"You three made it very enjoyable.\"\n\n\"Well, you better have all the sex you want this week, and this weekend, John is coming next Monday to do our piercings.\"\n\n\"Are all of you sure you want to do that?\"\n\n\"We're sure. You better appreciate it.\"\n\n\"How long do I have to go without sex?\" I asked.\n\n\"John said everything has to heal. Probably four to six weeks.\"\n\n\"That is going to be a long time.\"\n\n\"I think I have some traditional medicine that will speed things up. Should be ready to go by Thanksgiving.\"\n\n\"What is this going to cost me?\" I asked.\n\n\"I think some very nice jewelry to fit our piercings will cover it.\"\n\n\"I can do that. What are we doing for Thanksgiving this year,\" I asked.\n\n\"I told my mom we were expecting them. You need to call your family and see what they want to do.\"\n\n\"I'll work on it.\"\n\n\"You need to make sure of who all is coming this weekend,\" Dawn said.\n\n\"Rachel is trying to make sure Linda doesn't back out. I'll double-check with Mr. Dain and call Olivia and Sam.\"\n\n\"What about Sherri, Brenda, and Lori?\"\n\n\"I will ask them.\"\n\nDawn kissed me and got up and went to the shower. When she came back out drying off, the smell of breakfast cooking filling the bedroom.\n\n\"Get up and shower,\" Dawn said.\n\nI left her in the bedroom and went and showered.\n\n*****\n\nI sat at the table with Dawn as the girls put the food on the table.\n\n\"Are you going to show your porn movie to everyone?\" Amy asked when she sat down.\n\n\"Hell, yes! Can I show the one you three made for me?\"\n\n\"No, that is just for you,\" Dawn said.\n\n\"I can live with that,\" I replied.\n\nAbout 3:00 in the afternoon, we were all sitting in the hot tub. The weather had cooled off just enough to make the hot tub more enjoyable.\n\n\"Did either of you talk to Sherri and Brenda about this weekend?\" I asked the girls.\n\n\"Not yet...we were busy last week, remember,\" Samantha said.\n\n\"I'm sure they will come,\" Amy added.\n\n\"Call and make sure. I am going to see if Lori wants to come,\" I told them.\n\n\"I don't know if three men will be enough,\" Dawn said, giggling.\n\n\"I think for a laid back weekend...I can work Ian and Sam in,\" I told them.\n\n\"You two, we will be calling our family to see what they want to do for Thanksgiving,\" Dawn said. \"Is there anyone you want to invite?\"\n\n\"I wish my mom could come...\" Samantha mumbled.\n\n\"Would she come?\" Dawn asked.\n\n\"No...she can't...we never had any good Thanksgivings.\"\n\n\"Samantha, why don't you and your sister make arrangments for a complete Thanksgiving dinner to be delivered to your mom and dad,\" I said.\n\n\"That sounds like a good idea!\" Samantha exclaimed.\n\n\"I'm sure there are plenty of places where your parents live that will do that,\" Dawn added.\n\n\"Mom would like that,\" Amy said.\n\n\"You two do that, but don't wait too long to get an order in,\" Dawn told them.\n\nAfter we got out of the hot tub, Samantha and Amy were busy looking on the internet for someone to deliver a Thanksgiving dinner to their parents. That kept them occupied while Dawn and I talked.\n\n\"James, is there anything we can do for their parents?\" Dawn asked.\n\n\"I have talked to Samantha about it, and she says that any money her dad finds out about will get spent on boozes or blown. Amy is sending their mom enough to help her out.\"\n\n\"That is a bad situation.\"\n\n\"For their dad to be in his late forties and drinking as much as they say, it won't be long before his liver goes.\"\n\n\"I hate it for them.\"\n\nDawn and I talked for a while. Amy and Samantha let us know they found a place that would make the delivery; a turkey and all the trimmings.\n\n\"You two, is there anything we can do for your parents?\" Dawn asked.\n\n\"The money we are sending mom is helping her out. I think that is all we can do for now,\" Amy replied.\n\n\"Well, let us know if there is.\"\n\n\"Mom said to tell you two thanks,\" Samantha said.\n\n\"You tell your mom if there is anything she needs all she has to do is call,\" I told them.\n\n\"Thanks.\"\n\n\"Have you talked to her lately?\" Dawn asked.\n\n\"I talked to her and told her I was going to be able to go to medical school. She was very happy,\" Samantha said.\n\n\"Good. I'm sure she is very proud of you. Call her and tell her about Thanksgiving.\"\n\n\"I am going upstairs to do some reading,\" Samantha said and left us.\n\n\"Amy, is she okay?\" I asked.\n\n\"Yes, she just doesn't like talking about the situation with mom and dad.\"\n\nI left Dawn and Amy talking and went to check on something in my study. I opened up my email and sent one to Lori to ask if she wanted to come. I was scrolling through some other email when my phone rang.\n\n\"Hello?\"\n\n\"Dr. Smith, this is Dr. Gordon.\"\n\n\"Hi, Dr. Gordon.\"\n\n\"I just wanted to touch base with you about the genealogy research.\"\n\n\"How is it going?\"\n\n\"Interesting. I wanted to let you know that I am only waiting for some information to come in from Ireland. Once I get it, I will be finished.\"\n\n\"Is the information from Ireland about Samanth and Amy?\"\n\n\"Yes. I wanted to double-check on something I uncovered here. Dr. Smith, I think you are going to find out some very interesting things about your family.\"\n\n\"I won't be surprised.\"\n\n\"I will probably have it all wrapped up soon.\"\n\n\"That will be good. I will be able to show it to our parents when they come for Thanksgiving.\"\n\n\"I will let you know.\"\n\n\"Thanks, Dr. Gordon.\"\n\nWith everything that had been going on, I had almost forgotten about him. I finished up some emails and went back to the den. Dawn was sitting with Amy.\n\n\"Dr. Gordon just called. He thinks he will have all the research finished soon.\"\n\n\"That will be good,\" Dawn said.\n\n\"He is waiting on something from Ireland.\"\n\n\"For the girls?\" Dawn asked.\n\n\"Yes. He said he was double-checking on something.\"\n\n\"I hope it all explains things,\" Amy said.\n\n\"He said it would be interesting.\"\n\nSamantha only came back down to eat dinner then went back upstairs. Amy went to check on her about 8:00 and didn't come back down. When Dawn and I went to bed at 10:00, I checked and found Amy and Samantha in her bed asleep.\n\n*****\n\nMonday morning, we were back to our regular schedules. After breakfast, Samantha was heading out for school early when I stopped her.\n\n\"Hey, are you okay?\"\n\n\"Yes.\"\n\n\"You disappeared last night. I was worried about you.\"\n\n\"I just needed to be alone.\"\n\n\"Anything you want to talk about?\"\n\n\"I was just wishing my mom could be in my life more.\"\n\n\"Honey, you know you can go and visit anytime you want. You can drive or fly and get a car.\"\n\n\"I couldn't go back to the house.\"\n\n\"Then, you can pick up your mom, and you can spend time somewhere else.\"\n\n\"I guess.\"\n\n\"You let us know if you need to talk, please.\"\n\n\"I will.\"\n\nAfter Samantha left, Amy left about 9:30.\n\n\"Samantha is unhappy,\" I said to Dawn as we went upstairs to get dressed.\n\n\"Amy said she was. She is missing being able to talk to her mom.\"\n\n\"I think it is more than that.\"\n\nWe got dressed, and Dawn left for the school. She had meetings for the rest of the day. Sherri called later and told me about some of the ladies they had recruited to be in our marketing. I told her to make sure that she and Brenda got lingerie and swimwear for them to wear. We talked about them leaving soon for their trip, and I asked if they were coming this weekend. They said they were. After that, I called Mr. Dain at the bank.\n\n\"Ian Dain.\" He said.\n\n\"Ian, this is Dr. Smith.\"\n\n\"Hello, Dr. Smith.\"\n\n\"I just wanted to make sure you and your wife were coming this weekend.\"\n\n\"We can't wait. When should we be there?\"\n\n\"Dinner will be ready at 7:00 Friday. Plan on staying until Sunday if that is what you two want to do.\"\n\n\"I'm sure Sondra will want to do that.\"\n\n\"Good. A couple that is working with me on the limo business will be here, maybe the three ladies from the two businesses.\"\n\n\"Sounds great.\"\n\n\"There may be one other couple that will show up, but I will have to wait and see.\"\n\n\"Sounds great. Can we bring anything?\"\n\n\"Maybe some wine.\"\n\n\"We can do that. We will see you then.\"\n\n\"Great. I will talk to you later, Ian.\"\n\nAbout 11:00, Lori called me.\n\n\"Hi, Lori.\"\n\n\"Hi, James. I got your email about this weekend.\"\n\n\"Can you come?\"\n\n\"I guess I can. I may not be able to stay until Sunday.\"\n\n\"Come for dinner Friday and stay as long as you like.\"\n\n\"Okay. I am finishing the work on my marketing plan for my MBA. I will need to go home Saturday night so that I can go over it again Sunday. I have to turn it in next week.\"\n\n\"Bring it and your computer. We can look it over. There will be several people here that can help with it.\"\n\n\"Oh, that will be good.\"\n\n\"Okay, see you Friday at 7:00.\"\n\n\"Okay.\"\n\nI headed out to Sam's store and to grab something for lunch.\n\n*****\n\nI walked into Sam's store and went to his office.\n\n\"Hi, James. Happy birthday,\" he said.\n\n\"I understand you have some lights for me.\"\n\n\"Oh...yes, Dawn had me order you some lights for making videos.\"\n\n\"Can I get all of them in the Escalade?\"\n\n\"You should be able to.\"\n\n\"Dawn said you made the recommendation to her about the camera for my birthday.\"\n\n\"I told her you had been looking at it.\"\n\n\"Did you tell her you planned on borrowing it!\" I said and laughed.\n\n\"Well!\"\n\n\"Did you get to see the final DVD they had made for me?\"\n\n\"No, but they were very hot making it,\" Sam said.\n\n\"I hope you kept everything on the up and up.\"\n\n\"Oh, don't worry about Frank.\"\n\n\"Did you know about the other video?\"\n\n\"What other video?\"\n\n\"Dawn told me Friday night she had made arrangments for me to be on the set Saturday when Frank shot a video.\"\n\n\"I didn't know about that.\"\n\n\"You will not believe what they did. We show up Saturday to help with a shoot, and Traci Livermore shows up.\"\n\n\"Brandi Love?\"\n\n\"The same. I couldn't believe it. Before they started shooting, Frank tells her that the male talent has called in sick. Before I knew it, Dawn had me filling in for the male actor.\"\n\n\"What! Bull shit!!\"\n\n\"Yep. I spent all day Saturday fucking Brandi Love.\"\n\n\"No fucking way! You are full of shit, James!\"\n\n\"I will have the video to prove it. Dawn set it all up. Everyone but Brandi Love knew the male talent wasn't coming.\"\n\n\"No way!!\"\n\n\"It was quite an experience.\"\n\n\"I don't believe you!\"\n\n\"You will just have to wait to see the video.\"\n\n\"I still don't believe you.\"\n\n\"You can ask Dawn and the girls.\"\n\n\"Damn, wish my wife would do that for my birthday.\"\n\n\"You remember Ashley from the strip club?\"\n\n\"The hot blonde that likes you?\"\n\n\"Yes. She and her girlfriend showed up Thursday and spent the day and night with us?\"\n\n\"Doing what?\"\n\n\"Having incredible sex. Amy and Samantha set that up.\"\n\n\"Damn! That must have cost them a fortune.\"\n\n\"They came for free.\"\n\n\"Damn, James! I want to see the recordings!\"\n\n\"I turned off the cameras.\"\n\n\"No, you didn't!! There is no way you would have done that!\"\n\nI laughed at Sam.\n\nWe got some help and loaded the new lights into the Escalade.\n\n\"You two be at the house Friday at 7:00. Rachel and Linda are coming.\"\n\n\"We will be there.\"\n\nI drove back to the house and unloaded the lights and spent the afternoon setting them up until Samantha came in about 3:30.\n\n\"Are these the lights?\" She asked.\n\n\"I went and picked them up. I figured you two told Sam about Saturday.\"\n\n\"Hell, no! He would have wanted to be there,\" Samantha said and giggled.\n\n\"He almost had a stroke when I told him.\"\n\nWe laughed for a minute.\n\n\"Are you better?\" I asked.\n\n\"Yes, I was just feeling sorry for myself.\"\n\n\"No, you weren't. I'm sure you wish your mom were around.\"\n\n\"She was very happy. I am going to get to be a doctor. She knew that was what I wanted.\"\n\n\"You keep her up to date then.\"\n\n\"I will.\"\n\n\"Honey, how old is your dad?\"\n\n\"He is 49. He is two years older than my mom.\"\n\n\"Your mom will be proud of you,\" I said and hugged her.\n\nWe played with my new lights until Amy came in a little after 4:30.\n\n\"Dawn said it would be 6:00 before she got home,\" Amy told us.\n\n\"We can fix dinner then,\" Samantha said.\n\nAmy wanted to check out my new camera and lights as we set everything up.\n\nAbout 5:30, they started working on dinner while I was sitting at the bar talking to them.\n\n\"Do you two have tests before Thanksgiving?\"\n\n\"I have two papers due,\" Amy said.\n\n\"I have a chemistry test and a biology test. I'll be studying hard after Thanksgiving for finals.\"\n\n\"You should have your MCAT results by Christmas. Dawn is going to take you to see the med school advisor and get your schedule changed if needed,\" I said. \"\u00cd don't think there will much to change this year.\"\n\n\"I may have to take an extra class next year.\"\n\n\"You can handle it.\"\n\n\"I can see what is available this summer.\"\n\n\"Not this summer. You two are going to the NLP school.\"\n\n\"In California?\" Samantha asked.\n\n\"I think Canada. There would be fewer distractions.\"\n\n\"When will that be?\"\n\n\"The month of August.\"\n\n\"The whole month?\"\n\n\"Yes. Two weeks per course.\"\n\n\"That will be a long time away.\"\n\n\"It will. I expect you two to stay out of trouble.\"\n\nI talked to the two of them while they cooked. Dawn came in about 6:15 and joined me at the bar.\n\n\"Long meeting?\" I asked.\n\n\"Yes. Diane and I were meeting with the President. She is going to make it hard on him.\"\n\n\"Why?\"\n\n\"He got off on the wrong foot with her. He thought that since she was a lesbian, he could tell her what to do, but that is not going to happen, and she let him know it,\" Dawn said and laughed.\n\n\"He'll hate that.\"\n\n\"He's a prick,\" Dawn said.\n\n\"Is Diane settling in?\"\n\n\"Yes. She will take a lot of the building planning off my plate.\"\n\n\"Good.\"\n\n\"It is. I have some work I have to get done for my research. I'm going to change clothes.\"\n\nDawn headed up the stairs.\n\n\"Are you two going to need to study this weekend?\" I asked.\n\n\"I'll be caught up,\" Samantha said.\n\n\"I turn in my papers Thursday,\" Amy replied.\n\n\"What about your test on all the surgical instruments?\"\n\n\"That is before the Christmas break.\"\n\n\"Get ready to study for it.\"\n\nI left them in the kitchen and went to check my email. I was sitting in the den with my computer when Dawn sat next to me.\n\n\"I'm tired,\" she said.\n\n\"Get some sleep tonight, then.\"\n\nDawn leaned into my shoulder.\n\n\"I need to call my grandmother tonight,\" Dawn said.\n\n\"Any reason?\"\n\n\"To see if she knows why I need to go back to the reservation.\"\n\n\"Will she tell you?\"\n\n\"No, but I can dig.\"\n\n\"With Lieke coming, how many days do you think you will be there?\"\n\n\"That is what I need to find out.\"\n\n\"What are your plans?\" I asked.\n\n\"I'll drive there after the girls leave for Hawaii.\"\n\n\"I was planning on going with you.\"\n\n\"But Lieke will be here.\"\n\n\"I think she would get a kick out of visiting the reservation for a few days.\"\n\n\"Okay. I'll let my grandmother know when we will be there. I may see if I can leave early.\"\n\n\"Lieke will be her the twelfth.\"\n\n*****\n\nAfter we ate dinner, Dawn went upstairs to her study to call her grandmother. We didn't see her again for a few hours.\n\n\"Did you learn anything?\" I asked when she came back downstairs.\n\nShe walked to the sofa and sat next to me.\n\n\"Not really,\" Dawn mumbled.\n\n\"Did she say how long you would need to be there?\"\n\n\"She said I would there as long as it took.\"\n\n\"What does that mean?\"\n\n\"I don't know.\"\n\nDawn was quiet for the rest of the evening as the girls and I worked on our computers.\n\nDawn and I headed up to bed about 10:00 and left the girls working.\n\n\"Okay...what's up?\" I asked once we were in the bedroom.\n\n\"I'm not sure. My grandmother was rather cryptic.\"\n\n\"Did she say anything?\"\n\n\"She just said great-grandfather needed me there.\"\n\nDawn went into the bathroom as I got undressed. She was not telling me something, but I wasn't going to press here about it. We got ready for bed and went right to sleep.\n\n*****\n\nTuesday morning, when I woke up, I knew I had slept late. I looked at the clock, and it was a little after 7:00. Dawn wasn't in bed, but I saw the door to her hidden room open. I got up and walked in to find her. She was sitting in a chair looking through one of her old books.\n\n\"How long have you been up?\" I asked.\n\n\"A while.\"\n\n\"I smell breakfast cooking.\"\n\n\"The girls have been up an hour or so,\" she said without looking up from her book.\n\n\"Are you going to eat?\"\n\n\"Not right now.\"\n\nDawn was absorbed in whatever she was reading, so I left her and went down to the kitchen.\n\n\"Is she still reading?\" Samantha asked.\n\n\"Yes. Did you check on her?\"\n\n\"I was up at 5:30. I came into the bedroom and saw her door open. I asked her what she was doing. All she said was reading.\"\n\n\"Honey, what are you feeling form her?\" I asked.\n\n\"I'm not sure,\" Samantha said. \"I don't feel much of anything from her right now. It is sort of like she is not there.\"\n\n\"Oh.\"\n\nI ate with the girls then headed back up to the bedroom to shower. Dawn was still reading, so I went ahead and showered and shaved. After I dried off, I went back into her room.\n\n\"Can I interrupt for a minute?\" I asked.\n\n\"Sure,\" Dawn said, looking up.\n\n\"Is there a reason you are blocking Samantha?\"\n\nDawn could block all of her energy from reaching me when she wanted to. I hadn't noticed earlier, but now knew she was doing it.\n\n\"What did she say?\"\n\n\"She said you felt...blank. I didn't notice earlier, but I do now.\"\n\n\"I'm reading some very old writings...it takes all my concentration.\"\n\nI let it go at that, but knew it was something else.\n\n\"Okay,\" I said and left her to read.\n\nI put some clothes on and walked down to Samantha's room.\n\n\"Is she still in her room?\" Samantha asked.\n\n\"Yes. She is concentrating on some very old writings...that is why you can't read her.\"\n\n\"Okay. James? Does this have something to do with her going back to the reservation in December?\"\n\n\"Probably.\"\n\nI left Samantha as she got ready for school. I went to Amy's room to check on her.\n\n\"Will you be gone all day?\" I asked as she got dressed.\n\n\"Most of it. I am finishing up some research.\"\n\n\"Okay.\"\n\n\"What is Dawn doing?\"\n\n\"She said she was reading some old writings.\"\n\n\"She has been quiet since she talked to her grandmother yesterday.\"\n\n\"Her grandmother didn't tell her much.\"\n\n\"Now, I wish we were not going to be gone while she is at the reservation.\"\n\n\"Don't worry about her. I have been with her before when her great-grandfather needed her.\"\n\n\"Are you going with her?\"\n\n\"Yes. I think Lieke will get a kick out of seeing the reservation for a few days.\"\n\n\"I'm glad you will be with her.\"\n\nI was cleaning up after breakfast when Amy and Samantha left for school. About 9:30, I went back up to the bedroom. Dawn was in her room, gathering up some things. I stood and watched her for a few minutes.\n\n\"I'm going down to meditate,\" Dawn said as she picked up a leather bag.\n\n\"Okay.\"\n\nDawn took her bag and headed downstairs. I checked the old book she had been reading, and it was one of the ones her great-grandfather had given her on our last visit. It appeared to be very old.\n\nI didn't see Dawn again until about 3:00. I came in from the patio, and she was in the kitchen getting something to eat.\n\n\"Do you want me to fix you something?\" I asked.\n\n\"I got it,\" Dawn said.\n\nI sat at the bar. She made her sandwich and sat with me.",
        "\"Everything okay?\" I asked.\n\n\"Everything is fine. I'm good now.\"\n\nDawn talked to me about school while she ate. Her mood had changed, and she was acting normal, but I knew she was still concerned about something. After she finished eating, she went upstairs to put on some clothes.\n\nSamantha came in while Dawn was still upstairs. She came and sat next to me on the sofa\n\n\"Where is she?\"\n\n\"Upstairs, changing clothes.\"\n\n\"Has she said anything?\"\n\n\"Not really.\"\n\nSamantha headed up to her room to change clothes.\n\nAmy came in just after 5:00. She looked around the den.\n\n\"They're upstairs,\" I said.\n\nShe sat her computer bag down and headed up the stairs. I decided I better start dinner. The three of them came down about 6:00 and sat in the den while I cooked. I heard them walking up behind me about 6:30, giggling.\n\n\"Is dinner ready?\" Amy asked.\n\n\"It will be in a bit.\"\n\nThey talked and giggled until I had everything ready. We all sat at the table and ate. Dawn was being more like herself. \n\n\"Did you learn anything from your old book?\" I asked.\n\n\"Maybe. I have a feeling I will need to be at the reservation for three or four days.\"\n\n\"Once you get settled in, I'll take Lieke over to Sugar Mountain for some skiing,\" I said.\n\n\"When are you going to take us?\" Amy asked.\n\n\"We can go one weekend after the first of the year. When are you two leaving for Hawaii?\"\n\n\"We got an email, and they have us flying out on the 17th. Looks like we will be coming back on the 23rd,\" Amy said.\n\n\"When is school out?\" I asked.\n\n\"The 17th, but we will be finished the Monday before,\" Samantha said.\n\n\"I am going to see if I can wrap everything up before that week so that I can get to the reservation early,\" Dawn said.\n\nWe talked until we finished dinner. Dawn and I cleaned up so the girls could go study.\n\n\"Does your mother have any ideas about why your great-grandfather wants you to come?\"\n\n\"You know my mom is not involved in the traditional ways.\"\n\nAfter we finished cleaning up, Dawn headed upstairs. I went to my study and sent Lieke a text and told her I would have a surprise for her. I worked on some emails from Walt until about 9:00 then went up to the bedroom. Dawn was back in her room reading again.\n\n\"Don't stay up all night reading,\" I said to her.\n\n\"I'm not.\"\n\nI went to check on Samantha and Amy. Amy was at her desk, working on her computer.\n\n\"Don't stay up late,\" I said.\n\n\"I'm just finishing up one of my papers.\"\n\nI went to check on Samantha, and she had fallen asleep reading. I sat on the bed next to her.\n\n\"Hey.\"\n\n\"Emmm, I fell asleep.\"\n\n\"Get ready for bed and get some sleep tonight.\"\n\n\"I think I will.\"\n\nI went back to my bedroom and got undressed and got in the bed and read a journal until Dawn came to bed about 10:30.\n\n\"What are you doing tomorrow?\" I asked.\n\n\"I'll be working on enrollment for next semester. I must get that done soon. We are finishing up the notifications for the students starting the winter semester.\"\n\nDawn got undressed and got in bed with me.\n\n*****\n\nWednesday, we were all eating breakfast early.\n\n\"We should have had a Halloween party,\" Samantha said.\n\n\"I'll let you plan one next year,\" Dawn told her.\n\n\"What are you two doing today?\" I asked.\n\n\"I am going to the library to work on my papers,\" Amy said.\n\n\"Rick and I are meeting at the school to study,\" Samantha said.\n\n\"When will you be home?\" I asked Dawn.\n\n\"Not sure. I need to get some things finished.\"\n\n\"Let me know if it will be past dinner.\"\n\nBy 8:30, I was by myself. I went outside and cleaned the pool until lunchtime. While I was eating a sandwich, my cell phone rang. It was Mr. Dain.\n\n\"Hey, Dr. Smith, I wanted to ask you a question.\"\n\n\"Sure.\"\n\n\"Would it be okay if my secretary Beth joins us this weekend?\" He asked.\n\n\"That depends. Has your wife done her husband yet?\"\n\n\"We are going to Beth's house tonight to see if we can.\"\n\n\"Ian, until her husband is cool with you and other guys doing his wife, it may not be a good idea.\"\n\n\"We were just going to bring her to dinner...and maybe a little after-dinner activities.\"\n\n\"There will already be more women here than men. See what happens tonight. If it goes well, ask the two of them about coming,\" I said.\n\n\"Okay. I'm sure Sondra can convince him to do her.\"\n\n\"You never know. Call me tomorrow.\"\n\n\"Will do.\"\n\nA few minutes after he hung up, I got a call from Lieke.\"\n\n\"Hey, Lieke!\"\n\n\"Hey! What is the surprise?\"\n\n\"Dawn has to go see her great-grandfather on the reservation in North Carolina. How would you like to visit the reservation?\"\n\n\"That sounds cool!\"\n\n\"She will be there for a few days. After she gets settled in, we will go over to Sugar Mountain and ski for a few days. How does that sound?\"\n\n\"Wonderful!\"\n\n\"Lieke? How has your sex life been going?\"\n\n\"Much better. I plan on it going well when I get there!\" She said, laughing.\n\n\"I think it will. If you get tired of fucking me, I know a few guys that I can call.\"\n\n\"Oh? I don't know about that, James.\"\n\n\"We will just have to see. I have a friend I would like to watch fuck you.\"\n\n\"James!\" She exclaimed and laughed.\n\n\"There are a few people I want you to meet.\"\n\n\"For sex?\"\n\n\"That, and just some friends that want to meet you.\"\n\n\"Okay...I guess.\"\n\n\"I got your flight set up. I'll send you an email with the details.\"\n\n\"Okay.\"\n\nShe gave me her email address, and we talked a bit longer. I emailed her the flight information. I talked to Sherri later about their upcoming trip next week. After that, I found myself with some free time, something I hadn't had in a while. I did some research on the internet and ordered some books on using my new cameras.\n\n*****\n\n\"I'm home!\" I heard Samantha announce from the den.\n\n\"In here!\"\n\nShe came into the study and sat down.\n\n\"Did you finish studying?\" I asked.\n\n\"Yes, we are ready for the test tomorrow.\"\n\n\"Do you have a lab test too?\"\n\n\"Yes. It will be a long day.\"\n\n\"Get some sleep tonight.\"\n\n\"I will if I am not up late, fucking you,\" Samantha said.\n\n\"You won't be,\" I teased her.\n\n\"Then you better do me now!\" Samantha stated and stood up and started taking off her clothes.\n\nOnce she was naked, I joined her on the sofa.\n\n\"Are you excited about going to med school?\"\n\n\"It's starting to sink in. I hope I am ready.\"\n\n\"You are.\"\n\nI pushed Samantha back on the sofa and kissed her for a long time as I felt her body and looked at her. She pulled my shirt off and pushed me up so she could take my pants off.\n\n\"Rick said he had a good time last weekend.\"\n\n\"I'm sure he did.\"\n\n\"Do you get...jealous, when I am with another guy?\"\n\n\"Not as long as I know you are just having some fun.\"\n\n\"Not even a little?\"\n\n\"Well, I do think about a guy looking at your hot sexy body,\" I said as I rubbed her tits. \"Honey, I know how much a man enjoys being with you.\"\n\n\"And you are okay with that?\"\n\n\"You know I like it when other men want you or Dawn or Amy.\"\n\n\"Why?\"\n\n\"You may not understand if I tell you why,\" I said.\n\n\"I'll understand...I guess. As long as it is not too kinky!\"\n\nI rubbed Samantha's skin for a minute.\n\n\"You and your sister are so beautiful. I have to remind myself how lucky I am to have you.\"\n\n\"We are the lucky ones.\"\n\n\"When I see another man look at you or touch you...it makes me very happy to know that you still want me.\"\n\n\"James, I will always want you.\"\n\n\"That is what makes it so exciting. I tell myself that even though you are with another man, you will still want me.\"\n\n\"You sound a little insecure?\"\n\n\"It's not that...I guess it just makes me feel good that you three want me, and only me.\"\n\n\"I think you are insecure, honey.\"\n\n\"I'm not explaining it right. I'm just happy you two love Dawn and me and hope you always will.\"\n\n\"We will.\"\n\nSamantha sat in my lap and kissed me for a while, and then she stroked my cock until it was nice and hard. She straddled my lap and worked my cock into her, and settled in my lap.\n\n\"Did you enjoy fucking Brandi Love?\"\n\n\"Oh, yes. I owe you for that.\"\n\n\"You owe Dawn too.\"\n\n\"The three of you were very sexy in the video.\"\n\n\"We had a lot of fun making it.\"\n\n\"It was very sexy. I am curious how you talked Ashley and Raven into coming?\"\n\n\"It didn't take much. They were a lot of fun.\"\n\nI wrapped my arms around Samantha and held her close to me and she hugged me and held me for a while. She kissed me and started working her pussy on my cock. I rubbed her tits as I watched her. We had a nice long slow fuck for a while until we both came together.\n\n\"Emmmm, that is so good,\" Samantha moaned.\n\n\"It is. You are so sexy, honey.\"\n\nSamantha kissed me for a minute as she sat in my lap.\n\n\"When do the classes start for karate?\" She asked.\n\n\"Any time you are ready to start. I'll give you Dan's number.\"\n\n\"He and his wife were fun. Is everyone coming this weekend?\"\n\n\"Lori is coming.\"\n\n\"Brenda and Sherri are coming,\" Samantha said.\n\n\"Just make sure you have all of your studying done.\"\n\n\"My biology test is Wednesday. I will be ready. I have just got to get through the chemistry test tomorrow.\"\n\n\"You will do well.\"\n\n\"Rick and I are going out to celebrate if we do well on the lab test.\"\n\n\"I don't want you out drinking and then driving.\"\n\n\"We will just have a few,\" Samantha said.\n\n\"Why don't you two come here and celebrate?\"\n\n\"We were going to go to his apartment after.\"\n\n\"You two can have sex here. He shouldn't have a problem with that now.\"\n\n\"I'll ask him.\"\n\n\"If you two party too much, he can stay here tomorrow night.\"\n\n\"Anybody home!\" We heard Amy yell.\n\n\"In here!\" I yelled.\n\nAmy came into the study.\n\n\"What did I miss?\" Amy asked.\n\n\"Not much,\" Samantha said and slid off my cock and sat next to me.\n\nAmy came to me and bent over and kissed me, then she got on the floor in front of her sister and spread her legs. I watched Amy eat cum from her sister for a long time. After her sister had a huge orgasm, Amy moved to me and started sucking my cock. We watched her until I filled her mouth full of cum.\n\n\"Did either of you see Dawn?\" I asked.\n\n\"I stopped by her office. She said she would be home about 6:00,\" Amy told us.\n\nAmy took her clothes off, and we went to the den.\n\n\"How are your papers coming?\" I asked.\n\n\"I will have them finished tonight.\"\n\n\"You better get to work, you too, Sam.\"\n\nThey headed upstairs, and I went to the kitchen.\n\n*****\n\nI had dinner ready when Dawn came in a little after 6:00. She brought the girls down after she changed clothes. Samantha and Amy ate quickly and went back upstairs to work.\n\n\"I need to take Sam to see an advisor,\" Dawn said as we sat at the table.\n\n\"Not tomorrow, she has tests.\"\n\n\"I'll make an appointment for Friday.\"\n\n\"I talked to Lieke today and have her flight set up. I asked her if she would like to go to the reservation for a few days.\"\n\n\"I'm not sure how long I will be there.\"\n\n\"I told her we would hang around a few days, then go over to Sugar Mountain and go skiing.\"\n\n\"She will enjoy that.\"\n\nThe phone rang, and Dawn answered it.\n\n\"Hi, Mr. Dain...\"\n\n\"Around 7:00...but as soon as you want to get here.\"\n\n\"I'm sure...oh, yes...I want to watch your wife fuck my husband. I think she will enjoy watching me fuck you.\"\n\n\"That's up to you. How did that go? That sounds great...sure they can come.\"\n\n\"Is he going to be okay with several other guys fucking his wife?\"\n\n\"Okay...we will make plans for the two of them then...see you Friday.\"\n\nDawn hung up.\n\n\"They are bringing his assistant and her husband,\" Dawn said.\n\n\"Good. One day next week I want to take some pictures of you with my new camera.\"\n\n\"Lingerie?\"\n\n\"No, just some portraits. I need to do some tests and some printing.\"\n\n\"Okay. Are you going to be ready to start doing lingerie shots soon?\"\n\n\"Let me get these test shots done,\" I said.\n\n\"Let me know when you are ready. I have your first two customers.\"\n\n\"Who?\"\n\n\"I'll let you know.\"\n\nDawn got up from the sofa and went to the kitchen and got a glass of wine, and came back.\n\n\"Have you talked to John?\" I asked.\n\n\"Yes. He said it wouldn't take but an hour or so Monday night to do the piercings.\"\n\n\"Has he done this before?\"\n\n\"He said he has done a few of the nurses.\"\n\n\"Oh, really?\"\n\n\"He said Susan had him do her pussy, and she told some of the others, and he has done them.\"\n\n\"He needs to talk Carol into it.\"\n\nDawn pulled her shirt off and looked at her stomach.\"\n\n\"I hope I have enough skin he can do my belly button,\" she said.\n\n\"You do,\" I said as I looked at Dawn's tight stomach. Her dark skin always looked so nice.\n\nShe stood and pulled off her pants and underwear and sat next to me, and pulled her legs up and spread them. She took her fingers and pulled at the skin over her clit.\n\n\"This better not hurt,\" she said.\n\nI smiled at Dawn, and she leaned back on the sofa. I spread her legs apart and leaned over and started licking her pussy.\n\n\"You better get all you want for a while,\" Dawn said.\n\nI took my time and spent the next half hour licking and tonguing Dawn's pussy until she had a nice orgasm. I sat up and rubbed her stomach and legs as I looked her over.\n\n\"What are you looking at?\" She asked.\n\n\"You. Sam asked me today if I got jealous when other guys fucked her.\"\n\n\"What did you tell her?\"\n\n\"I told her got a little jealous when other guys fucked one of you, but how much I enjoyed men looking at you and wanting you made up for it.\"\n\n\"Are you sure?\"\n\n\"You three are so beautiful...I know it drives men crazy looking at you and thinking about touching you...then when they get to see you naked and have sex with you, it is satisfying their fantasies.\"\n\n\"And you like that?\"\n\n\"Honey, I understand how a man feels looking at a beautiful woman he thinks he can't have. You three drive men crazy. Knowing what they are thinking once they have the opportunity makes me feel good.\"\n\n\"Why?\"\n\n\"Because I know you three could have any man you wanted.\"\n\n\"We want you.\"\n\n\"That is why it makes me happy.\"\n\nDawn leaned over and kissed me for a minute.\n\n\"I will always want you,\" she said.\n\nDawn laid on me, and we kissed for a while.\n\n\"Let's go to bed,\" Dawn said as she sat up.\n\nWe went upstairs to our bedroom. Dawn and I laid on the bed, and we touched each and kissed for a while.\n\n\"I can't study when you two are doing that,\" we heard Samantha say from the door.\n\n\"Come here,\" Dawn said. \n\nSamantha walked to the bed and sat on the edge.\n\n\"I am going to have to teach you how to tune things out,\" Dawn said.\n\n\"I don't want to tune it out,\" Samantha said.\n\n\"Well, you don't really tune it out, you just learn to focus your attention on other things,\" Dawn said.\n\n\"It will be hard.\"\n\n\"You need to try.\"\n\n\"Okay.\" Samantha kissed each of us, then left the bedroom.\n\nDawn climbed on top of me and worked my cock into her pussy, then leaned over and started kissing me again. She worked her pussy slowly as we kissed. Dawn was taking her time and making love to me.\n\nShe set up and worked her pussy as she rubbed my chest. I could feel her pushing her love into me hard, so I did the same with her.\n\n\"Emmmm...that's it,\" Dawn moaned.\n\nThe two of us made love to each other for about an hour. Dawn would have a gentle orgasm and keep going. She repeated this three more times.\n\n\"Ahhhh...come in me this time,\" she moaned.\n\nI was overcome by Dawn's energy suddenly.\n\n\"Wow...\" I moaned.\n\n\"Ahhhh...I'm coming,\" Dawn let me know.\n\nShe tensed up, and so did I. We both started coming together.\n\n\"Oh, my...yes...\" Dawn moaned.\n\nI erupted inside of her.\n\n\"Ahhhhhhh...\" Dawn let out in a long moan. \"Perfect...\"\n\nDawn laid on me and kissed me for a while longer, then turned her head and lay. I wrapped my arms around her and held her tight.\n\n******\n\nI woke up when I felt a pussy sliding down on my morning hard-on. I looked, and it was Samantha.\n\n\"You need to relax me, so I do well on my test,\" she said. Dawn laughed.\n\nSamantha sat on my cock and worked her pussy.\n\n\"I think you will do well on your test regardless,\" Dawn said.\n\n\"After last night...I need relaxing.\"\n\n\"Sorry about that,\" Dawn said.\n\nSamantha rode my cock while she and Dawn talked about her chemistry test. I thought it was funny. After about 30 minutes, Samantha turned her attention to my cock.\n\n\"I'm going to shower,\" Dawn said and got out of bed.\n\nI reached up and played with Samanta's huge nipples while she worked.\n\n\"I'm glad you enjoy men looking at me,\" she said.\n\n\"I do.\"\n\n\"Good.\"\n\n\"I want to watch you and Rick fuck tonight.\"\n\n\"Okay.\"\n\nSamantha sped up and worked until she had a huge orgasm.\n\n\"Ohhh...I needed that,\" she said.\n\nI pulled her down to me and kissed her, then rolled her over onto her back and started working my cock in her pussy. She wrapped her legs around my back and pulled me into her hard.\n\n\"I love you,\" I told her.\n\n\"I love you too.\"\n\nI worked my cock in her for a long time until we both came together. Dawn was sitting on the edge of the bed, drying her hair while she watched.\n\n\"I better go get ready,\" Samantha said. \"Rick and I are leading a study group this morning.\"\n\n\"You go help everyone,\" I told her.\n\nShe got up and headed to her room.\n\n\"What are you doing today?\" Dawn asked.\n\n\"I have got to run by the bank and get some money for Sherri and Brenda.\"\n\n\"Why don't you run by my office after that.\"\n\n\"Okay. It will be about 1:00.\"\n\n\"Okay.\"\n\nDawn got ready while I went down to make breakfast. Amy came down to get coffee.\n\n\"I finished my papers,\" she said.\n\n\"Good.\"\n\n\"I'll turn then in this morning, and I am finished until next week.\"\n\n\"I'll be back this afternoon. We can go to the store and get everything for this weekend,\" I said.\n\n\"Okay. I need a break.\"\n\nI fed the girls, and they all headed off to school. I cleaned up and then showered and got dressed. I need some supplies for my camera and darkroom, so I headed to the camera store.\n\n*****\n\n\"Hey, Dr. Smith,\" the owner said when I walked in.\n\n\"Hey. I need some 4 X 5 film and some more color paper.\"\n\nHe helped me find everything.\n\n\"Are you going to be bringing me some photos to put up soon?\" He asked.\n\n\"In a week or two, I hope.\"\n\n\"Make me some big ones, and I will put them in the window.\"\n\n\"Remember, I told you my work will be expensive,\" I reminded him.\n\n\"That's okay. I think I know the people that will be interested.\"\n\n\"Well, I am going to charge $10,000 for the photo-shoot, plus the prints. I'll give you a $1,000 for each customer you send me.\"\n\n\"Damn! I'll have to send you a lot!\"\n\n\"As long as they can pay!\" I said, laughing.\n\n\"Who are you going to get to be your models?\"\n\n\"My wives are going to help, and I know a few ladies.\"\n\n\"Dr. Smith, you are going to have to tell me how you keep three women happy.\"\n\n\"I just give them what they want.\"\n\nI hung out with the owner, and we talked photography for a few hours. I loaded up everything I had bought and headed off. I stopped by Sam's store before I stopped for lunch. I saw him talking to a lady when I walked in.\n\n\"Hey, James,\" he said when I walked by.\n\n\"I'll be in your office,\" I said.\n\nI went to his office and went in. Olivia was there.\n\n\"Hi,\" I said.\n\n\"Hey.\"\n\n\"You waiting on Sam?\"\n\n\"He is supposed to be taking me to lunch.\"\n\n\"I just left the camera store.\"\n\n\"Are you getting ready to start your new photo business?\"\n\n\"Just about. Are you going to model for me?\"\n\n\"If you want me too.\"\n\n\"Can I use the photos in my marketing?\"\n\n\"As long as I have clothes on, you can.\"\n\n\"Deal. Are you ready for this weekend?\"\n\n\"Sure. Who all is coming?\"\n\n\"Linda and Rachel are supposed to come. Sherri, Brenda, and Lori will be there.\"\n\n\"You need some more men!\"\n\n\"A couple from the bank and he said his assistant and her husband were coming.\"",
        "\"Good. New guys!\" Olivia said, laughed.\n\n\"You will like the guy from the bank.\"\n\n\"We'll be there early if I can get him out of here Friday.\"\n\n\"Dinner will be at 7:00.\"\n\nOlivia and I talk for a while until Sam finally came in.\n\n\"Sorry, honey. She was asking about a security system,\" Sam said. \"What did you need, James?\"\n\n\"I wanted to make sure you call the limo company in St. Louis soon and find out what they are going to need.\"\n\n\"I talked to them Tuesday. I'm going there the first week in December to teach them how to install the equipment.\"\n\n\"Good.\"\n\n\"Olivia is going with me. We are going to see St. Louis.\"\n\n\"Did it sound like they had someone that can handle it?\" I asked.\n\n\"Yes, I talked to their AV guy. He knows what he is doing.\"\n\n\"Great. That will be on less thing Lori, and I have to worry about.\"\n\n\"They are sending me measurements and blueprints so I can order the equipment and have it shipped to them.\"\n\n\"Very good. I'll let you two go to lunch.\"\n\n\"See you Friday.\"\n\nI left and drove to a burger place and had lunch, then drove to the university. I parked and walked to Dawn's office.\"\n\n\"Hi, honey,\" she said when I walked in. I sat down in one of her chairs.\n\n\"Did you need me for something?\"\n\n\"Diane is coming by at 1:00. I want you to meet her.\"\n\n\"Okay.\"\n\nDawn and I talked until there was a knock on the door. I opened it, and a nice looking lady walked in.\n\n\"Hi, Diane. This is my husband, James.\"\n\nI stood and shook her hand.\n\n\"Nice to finally meet you, James.\"\n\n\"Good to meet you.\"\n\nDiane sat in the other chair. I looked at her. She appeared to be about 40, very nice looking with long brown hair.\n\n\"Diane, I am glad you will be taking this project off Dawn's plate.\"\n\n\"I think Dawn is happy too.\"\n\n\"She needs the help.\"\n\n\"I think I can make everything happen like she wants,\" Diane said.\n\n\"Good. She has plenty of other things to deal with.\"\n\n\"It sounds like it.\"\n\n\"How long do you think it will take to get the building up and running?\" I asked.\n\n\"Probably two years.\"\n\n\"Are you going to be here all that time?\" I asked.\n\n\"I'll be here until it is all done.\"\n\n\"Great. Linda said, you were the right person for the job.\"\n\n\"We have worked together on several projects. She knows I'll get things done correctly. You will have the best facilities in the country.\"\n\n\"I'm sure Linda will like that,\" I said.\n\n\"Since the building will have her parent's name on it, you know it will be the best.\"\n\n\"Honey, I told Diane we were having a cookout this weekend,\" Dawn said.\n\nI looked over at Dawn, and she smiled at me.\n\n\"We are going to have a little get together,\" I replied.\n\n\"I asked her if she would like to come,\" Dawn added.\n\n\"Oh?\"\n\n\"James, Dawn told me about your parties. I may only eat pussy, but I think the ladies would enjoy it,\" Diane said.\n\n\"I'm sure they would!\" I said, laughing. They laughed. \"But, I think the guys will be wanting to fuck you.\"\n\n\"Too bad!\" We laughed.\n\nWe talked for a while.\n\n\"Dawn, I need to go. I have a meeting with the architects and the President,\" Diane said.\n\n\"Okay.\"\n\n\"James, I will see you Friday,\" Diane said as she stood.\n\nShe walked to the door and opened it and stopped.\n\n\"Oh, and I am a professional, James,\" she said, then closed the door behind her.\n\n\"Did you tell her I said that?\"\n\n\"Yes! She thought it was funny.\"\n\n\"Do you think she will be comfortable at the party?\" I asked.\n\n\"Sure. I told you she likes to watch.\"\n\n\"This should be interesting.\"\n\nI kissed Dawn and headed home. When I got there, Amy was cleaning out her car.\n\n\"Let me take this stuff into the house, and we will go shopping,\" I told her.\n\nI took all the things from the camera store in, then Amy and I got in the Escalade and headed off. We stopped at the liquor store first.\n\n\"Hi, Dr. Smith,\" the owner said.\n\n\"Hi. We need to load up for a party.\"\n\nThe owner went and got some boxes while Amy and I grabbed bottles of wine.\n\n\"You're Amy, right?\" The owner said.\n\n\"That's me.\"\n\n\"Are you having a big party?\"\n\n\"Not real big,\" Amy said as she organized the wine.\n\nWe got all the wine we needed and then loaded up the beer. I walked back into the store with the owner to pay.\n\n\"Dr. Smith, she is one of you other wives?\"\n\n\"Yes.\"\n\n\"Wow.\" \n\nI gave him my credit card, and he rang everything up.\n\n\"Thanks, Dr. Smith. You have a good party.\"\n\n\"We will.\"\n\n\"Hey, maybe you can get Amy to show up one day like Dawn did,\" he said, smiling.\n\n\"I'll see what I can do.\"\n\nI left laughing and got in the SUV.\n\n\"What are you laughing at?\" Amy asked.\n\n\"He asked if I could get you to show up naked like Dawn did that day.\"\n\n\"Dirty old man.\"\n\n\"He's okay.\"\n\n\"Next time you bring me, I'll blow him!\" Amy said, laughing.\n\nWe drove to the grocery store and spent a couple of hours getting everything for the weekend. The Escalade was loaded down when we left.\n\n\"You need to get a truck,\" Amy said.\n\n\"Maybe a big Suburban.\"\n\nWe got to the house and spent some time unloading everything. We were still putting things away when Dawn came in about 4:30.\n\n\"Did you get everything?\" She asked.\n\n\"I hope so.\"\n\n\"Thanks, Amy,\" Dawn said and kissed her.\n\n\"The owner of the liquor store is a dirty old man,\" Amy said.\n\n\"What happened?\"\n\n\"He asked me to get Amy to come by naked like you did,\" I said. Dawn laughed.\n\n\"Maybe we need to get him to make a delivery!\" Dawn said.\n\nWe finished putting everything away. Dawn and Amy started dinner at about 5:30.\n\n\"What time will your sister be home?\" Dawn asked.\n\n\"She said around 8:30.\"\n\n\"I hope she does well on the test,\" Dawn said.\n\n\"Oh, she and Rick are fucking up the curve really bad. That is why they are helping everyone else study.\"\n\n*****\n\nWe finished dinner at about 7:00 and saved some leftovers for Samantha and Rick. We heard them pull up about 8:45, and come into the house laughing.\n\n\"Did you pass?\" I asked.\n\n\"Oh, yes!\"\n\n\"Hi, Rick,\" Dawn said.\n\n\"Hi, Mrs. Smith.\"\n\n\"We saved you two some leftovers if you are hungry.\"\n\nSamantha took Rick to the kitchen, and they got out the leftovers and heated them up. \n\n\"Rick, are you finished for the week?\" I asked.\n\n\"Yes.\"\n\n\"Good. You won't need to leave early in the morning then.\"\n\nRick just looked at me.\n\nAfter Samantha and Rick finished eating, Samantha poured herself some wine and got Rick a beer. They came to the den and sat with us.\n\n\"How bad did you two screw up the curve?\" Amy asked.\n\n\"I think everyone did okay. We helped them all study,\" Samantha said.\n\n\"That was nice of you,\" Amy teased her. \"I'm glad I'm finished for the week. I'm going to soak in the hot tub.\"\n\nAmy got up and went upstairs.\n\n\"Sam, you have an appointment tomorrow at 1:00 to talk to an advisor about med school,\" Dawn said.\n\n\"I don't know what to ask.\"\n\n\"I'm going with you.\"\n\n\"I don't have my MCAT scores yet.\"\n\n\"I'm sure you did fine. You don't need them yet.\"\n\n\"Okay...if you are going with me.\"\n\nI looked up, and Amy was coming down the stairs naked. She walked through the den and out the backdoor as Rick looked.\n\n\"Rick, you want to sit in the hot tub?\" Samantha asked.\n\n\"Sure.\"\n\n\"Come on.\"\n\nShe stood and took his hand and led him out the backdoor.\n\n\"Remind me to tell them they can't get in the hot tub until the piercings heal,\" Dawn said.\n\nDawn and I talked for a while. Amy came in and poured herself some wine.\n\n\"Are you two coming outside with us?\" Amy asked.\n\n\"We're talking,\" Dawn said.\n\n\"Well, you can come outside and talk.\"\n\nAmy turned and walked back out the door.\n\n\"Come on,\" I told Dawn.\n\nWe got up and grabbed some wine and went out the door. Samantha was settling her pussy on Rick's cock as Amy sat next to them and watched. I walked to the chair next to Samantha and sat. Rick looked up at me, not sure what to do. Dawn sat next to me.\n\nI sat and watched Samantha fuck Rick for a long time. She kept looking at me and smiling. Samantha finally came in a huge orgasm, and Rick filled her full of cum.\n\n\"Oh, I needed that. Thanks, Rick.\"\n\n\"No problem.\"\n\nSamantha stood and slid his cock out of her. She went into the house and came back with a fresh glass of wine. She sat on the end of the recliner Rick was in. Rick was quiet.\n\n\"What will you be doing in your chemistry class until Thanksgiving?\" I asked Samantha.\n\n\"We will be doing a project. We find out what next week.\"\n\n\"Have you talked to the people in Hawaii?\"\n\n\"I got an email Monday. They asked when we could be there.\"\n\n\"When is school out?\"\n\n\"I am finished the 16th.\"\n\n\"Amy, when will you be finished in December?\" I asked.\n\n\"I'm am finished on the 15th.\"\n\n\"Lieke will be here on the 12th you will get to see her for a few days,\" I told them.\n\n\"Maybe if we can leave on the 17th, we can get back sooner,\" Samantha said.\n\n\"Are you going to Hawaii?\" Rick asked.\n\n\"Yes, we are going back to do some modeling.\"\n\n\"Cool.\"\n\n\"I hope we are back by Christmas.\"\n\n\"If we leave the two of you here by yourselves the week of the 15th, will you be okay?\" Dawn asked.\n\n\"Of course.\"\n\n\"I am going to try and finish up the week before so I can go on to the reservation the Sunday before.\"\n\n\"How long will you be gone?\" Amy asked.\n\n\"I don't know. I should be back by the time you two are back,\" Dawn said.\n\n\"Lieke is going with us. Once Dawn gets settled in, I am going to take her to Sugar Mountain to ski,\" I said.\n\n\"You better take us some time,\" Samantha said.\n\n\"If that is when you two want to leave, let the people in Hawaii know,\" I told them.\n\n\"Okay.\"\n\n\"How long are you going to be in Hawaii?\" Rick asked.\n\n\"A week or so.\"\n\n\"Nice. I have never been to Hawaii.\"\n\n\"You want to go?\" I asked Rick.\n\n\"What?\"\n\n\"Would you like to go with them?\"\n\n\"Oh, I couldn't afford it.\"\n\n\"Amy, would you like Rick to keep you and your sister company in Hawaii?\" I asked.\n\n\"Oh, that would be nice,\" Amy said.\n\n\"Rick, if you want to go, I'll pay for it. But, I will expect you to keep them out of trouble,\" I told him.\n\n\"Really?\"\n\n\"Yes, unless you were going home for the holiday.\"\n\n\"No, I live in town. You mean it?\"\n\n\"If Samantha and Amy don't mind you tagging along.\"\n\n\"I don't think we would mind,\" Amy said.\n\n\"Okay. You two make reservations for Rick,\" I told them.\n\n\"Wow, thanks, Dr. Smith!\"\n\nSamantha smiled at me, then set her glass down and leaned over and started sucking on Rick's cock to get him hard again.\n\n\"I'm ready for bed,\" Dawn said.\n\nDawn and I got up and went into the house and up to bed.\n\n\"I don't know if Samantha should be getting that close to Rick,\" Dawn said.\n\n\"They are just friends,\" I said.\n\n\"...with benefits.\"\n\nI was face down in Dawn's pussy when I hear...\n\n\"Good night!\" From Samantha, and the three of them laughing as they went down the hall.\n\nLater, while Dawn was riding me, she was turned so we could watch the three of them on TV.\n\n*****\n\nDawn and I were eating breakfast about 7:00 when Samantha and Rick came down to join us.\n\n\"Good morning,\" Dawn said.\n\n\"Good morning,\" Mrs. Smith.\n\nThey got food and sat down.\n\n\"Thanks for letting me go to Hawaii,\" Rick said.\n\n\"Just stay out of trouble,\" I told him.\n\n\"I will.\"\n\nAfter breakfast, Dawn and I heard the three of them upstairs having sex again. Rick left about 10:00.\n\n\"You made Rick happy,\" Samantha said.\n\n\"I thought you could use the company. You and your sister share,\" I said.\n\n\"Oh, we will.\"\n\n\"I need you and your sister to help me get the house cleaned up and ready,\" Dawn told her.\n\n\"Okay.\" Samantha headed upstairs.\n\n\"I need you to clean up outside and get the pool ready,\" Dawn told me.\n\nWe all worked until about 4:00, then showered and got ready for the evening. Dawn and I started working on food about 5:00. I already had the steaks marinating.\n\n******\n\nAbout 6:00, the gate buzzed. I went to the intercom, and it was Ian and Sondra. I let them in and went out the front door and waited. Two cars drove up.\n\n\"Are we too early?\" He asked when he got out of the car.\n\n\"No. Come on in.\"\n\nHe waited until Beth and her husband got out of their car. I escorted all of them into the house. Everyone said hi, and Dawn showed them around the house. Sherri and Brenda came in a few minutes later. By the time Dawn came back with them, it was almost 7:00.\n\n\"James, you have a beautiful house,\" Sondra said.\n\n\"Thank you.\"\n\nSherri and Brenda introduced themselves. While they were doing that, I heard someone pull up. I went to the front door, and Sam and Olivia were getting out of their car, and so was Lori. They all came inside and got drinks while everyone introduced themselves. I was at the bar pouring wine when Ian came over.\n\n\"Dr. Smith...are all these ladies...into this?\"\n\n\"I guess we will find out.\"\n\n\"Wow.\"\n\nI heard the throated exhaust of Linda's Diablo out front. A minute later she and Rachel came through the front door.\n\n\"Oh, my, god!\" Ian exclaimed when he saw Linda. \"Dr. Smith...is Ms. Williams going to be here?\"\n\n\"Yes, she is.\"\n\n\"I don't believe this...\"\n\nI walked to Linda and kissed her and Rachel.\n\n\"Glad you made it,\" I said.\n\n\"Diane is right behind us.\"\n\n\"Good. Can I get you two some wine?\"\n\n\"Please.'\n\nI went back to the bar and poured Linda and Rachel a glass of wine and took it to them. Everyone was introducing themselves when I heard the intercom buzz. I went to it, and it was Diane. I went out front and waited. She pulled up and got out of her car.\n\n\"I wasn't sure this was it, but it looked like Linda's description,\" she said, walking up.\n\n\"This is the place. I'm glad you found it.\"\n\n\"Beautiful house.\"\n\n\"Come in and introduce yourself, and I will show you around.\"\n\nI escorted Diane into the house. After all the introductions, I took her around the house.\n\n\"Dr. Smith, this is a lovely house.\"\n\n\"Dawn did a lot of the work with the architects.\"\n\n\"She did a great job.\"\n\n\"Diane, while you are working here, you are welcome to come by anytime. You can come and spend the night or the weekend and hang out with us and swim in the pool...anytime you want.\"\n\n\"Thanks.\"\n\n\"We have plenty of rooms and even the pool house.\"\n\n\"I'll have to take you up on your offer...if you are okay with that.\"\n\n\"Diane, I have no reason not to be okay with it.\"\n\nAfter we made it back to the den, everyone was standing around talking. About 7:30 I grabbed Sam and had him help me carry steaks out to the grill.\n\n\"James, who is the hot blonde that came in last?\"\n\n\"That is Diane. She is the project manager Linda hired to run the new building at the university.\"\n\n\"She's hot.\"\n\n\"I'm afraid you won't be hitting that.\"\n\n\"Why?\"\n\n\"She is very much only into women.\"\n\n\"Ahh, shit!\"\n\n\"Sorry.\"\n\n\"Well, the banker's wife is hot.\"\n\n\"Very.\"\n\nSam and I worked at getting all the steaks on the grill. While we were doing that, everyone came outside to talk. Ian came over to the grill.\n\n\"Ian, how did it go with Beth and her husband?\" I asked.\n\n\"We had a good time. He took some convincing, but now seems to be very agreeable to sharing.\"\n\n\"Good. Beth is a lot of fun.\"\n\n\"James...I have to ask...are you and Ms. Williams a regular thing?\"\n\n\"Ian, Linda, and I are very close. She is very close with all of my family. We have a very special relationship.\"\n\n\"Wow. I would never have thought she would be into something like this.\"\n\n\"She is very selective. And I trust your discretion.\"\n\n\"Absolutely.\"\n\n\"I'm not sure if she and Rachel will stay the weekend...we will have to see.\"\n\n\"I hope she stays,\" Ian said. \"Anything I should know?\"\n\n\"You will have to figure that out yourself.\"\n\nSam and I were cooking when Dawn and some of the other ladies went in to work on the rest of the food. Amy came out a little later with a list of how the steaks needed to be cooked.\n\n*****\n\nBy 9:30, we had all been fed and were sitting and standing around the house sipping wine. I walked over to Linda as she talked to Sondra and Beth. I wrapped an arm around her waist.\n\n\"Are you two staying?\" I asked.\n\n\"I guess.\"\n\nI kissed her and walked over to Dawn. She was talking to Lori, Brenda, and Samantha.\n\n\"Are you two staying for the weekend?\" I asked.\n\n\"Yes, Ms. Williams is going to look over my project,\" Lori said.\n\n\"Get Mr. Dain to look it over also. You have all weekend.\"\n\n\"So, what happens now?\" Dawn asked.\n\n\"I guess everyone will figure it out,\" I replied. \"Do you know if Linda and Diane have had a chance to get together?\"\n\n\"They haven't yet. I don't know if she will,\" Dawn said.\n\nBeth and her husband walked over to us.\n\n\"Beth, I'm happy to see you and Allen here,\" I said.\n\n\"I had to talk Allen into it, but he will be okay...won't you?\" She said to her husband.\n\n\"Sure...I'm looking forward to the evening,\" he said as he looked over Lori.\n\nWe talked for a bit as I watched every one. I noticed that Ian and Sondra were having a long conversation with Linda and Rachel. After a while longer, the four of them headed up the stairs. I saw Sam and Olivia talking to Sherri and Amy then they headed into the big bedroom downstairs.\n\nDiane walked up to our little group.\n\n\"James, are you ready to watch a pro?\" She said and laughed.\n\n\"I am always ready to learn!\" We laughed.\n\n\"Beth, you and your husband are welcome to anything in the house,\" Dawn told them. \"Lori and Brenda know their way around.\"\n\n\"I think we can show them around,\" Brenda said.\n\n\"Diane, you want to come with us?\" Dawn asked.\n\nI followed Diane and Dawn up to our bedroom.\n\n\"Looks like you have a fun group,\" Diane said.\n\n\"Oh, they are,\" I told her.\n\nDiane and Dawn pulled off their clothes. Then Dawn pulled mine off. They got on the bed, and I sat in a chair and watched as they kissed for a while. Dawn worked her way down between Diane's legs and went to work. I watched for a long time as Dawn got her off several times. They traded places, and Diane drove Dawn to several huge orgasms.\n\n\"Damn, you're good,\" Dawn said.\n\n\"I try to please.\"\n\nI had been looking over Diane's body, and she was hot.\n\n\"What can we do for you?\" Dawn asked her.\n\n\"I told you I like to watch,\" Diane replied.\n\n\"I know...why?\" Dawn asked.\n\n\"I like watching a woman get off, no matter how she does it,\" Diane said.\n\n\"You sound like my husband. Come here, honey.\"\n\nI crawled onto the bed between them. Dawn pushed me onto my back and straddled me and worked my cock into her pussy. Diane was lying on her side, watching. Dawn took her time until she got off, then sped up and drove both of us to a huge orgasm as Diane fingered her pussy.\n\nDawn was sitting and panting after the last orgasm she had. Diane had come again while she watched.\n\n\"Dawn, you two seem to enjoy fucking each other,\" Diane said.\n\n\"Oh, we do.\"\n\nDawn lifted herself up and slid my cock out and laid next to me.\n\n\"I need to rest for a minute,\" Dawn said as she laid on her back.\n\n\"Dawn, do you mind?\" Diane asked.\n\n\"Uhhh? No?\"\n\nDiane sat up, and we watched to see what she was going to do. She leaned over my cock and began to lick all of Dawn's juices off of my crotch and stomach from where she had squirted. She took her time as Dawn and I both watched. Once she finished that, she began to lick Dawn's juices off my cock. She stopped and looked at us.\n\n\"Sometimes, I like to taste a woman on a nice cock,\" she said.\n\nDiane took her time slowly licking up and down my cock. I watched as she ran her tongue around the head of my cock for a few minutes. I was surprised when she slid her mouth down on it. Dawn and I watched as she worked her mouth up and down for a while then she slid her mouth off my cock and sat up.\n\n\"You taste very nice, Dawn.\"\n\n\"Maybe I can taste you that way,\" Dawn said. Diane smiled at her.\n\n\"Oh, I suck a little cock sometimes, but that is it.\"\n\n\"Anytime you want to try,\" Dawn said.",
        "\"I also enjoy eating cum out of a woman's pussy,\" Diane said and smiled.\n\n\"I think we can arrange that,\" I said.\n\nI rolled over to Dawn, and she pulled her legs up and spread them. I got between them and slid my cock into her again. I leaned down and kissed Dawn then began to work my cock in her. I fucked Dawn hard for a long time until we both came and I filled her full of cum.\n\n\"Very nice,\" Diane said.\n\nI laid on Dawn's other side. Diane laid next to Dawn on her back. Dawn looked and sat up and straddled Diane's head. I watched as Diane slowly licked the dripping cum from her pussy. She took Dawn's hips in her hands and pulled her down to her mouth. Dawn screamed through two wild orgasms as Diane worked on her pussy then finally collapsed back onto the bed.\n\n\"I was wondering what all the screaming was,\" we heard Linda say.\n\nDiane and I looked up, and Linda was standing in the doorway, watching.\n\n\"Linda, are you finally going to let me show you what all the screaming is about?\" Diane asked.\n\n\"I would, but I am full of cum,\" Linda replied.\n\n\"That's okay.\"\n\nLinda smiled, then walked to the bed. She got on the bed and straddled Diane's head. Dawn and I watched as Diane started licking Linda's pussy. After a few minutes, Linda leaned over and went to work on Diane's pussy. We watched them in a nice 69 for a few minutes. Linda looked hot as she went down on her. Dawn got up and took my hand and led me from the bedroom.\n\n\"Come.\"\n\nWe walked down to Linda's room and saw Ian behind Rachel working his cock in her while she went down in Sondra.\n\n\"I need some wine,\" Dawn said.\n\nWe went down to the kitchen, and I poured Dawn a glass of wine. We listened to moans and groans coming from the downstairs bedrooms. We walked to the big bedroom, and Sam was watching Olivia and Sherri in a 69 as they had a little fun. Dawn walked in and crawled on the bed and started sucking Sam's cock. \n\nI walked down to the other bedroom and looked. Brenda was riding Allen while they watched his wife. Beth was up on her hands and knees between Lori's legs. I walked into the bedroom and rubbed Beth's ass as she went down on Lori. Her husband was watching me closely. I slid my fingers into Beth's pussy and found her dripping wet as she moaned. I got on my knees behind her.\n\nI grabbed my hard cock and used the end to find Beth's dripping pussy as her husband looked on. I worked the end between her lips and slid in a little.\n\n\"Ahhh...oh my...\" she let out.\n\nHer husband looked at her as she looked at him. I grabbed her hips and slowly started sliding into her pussy.\n\n\"Ahhhh! Oh, my, god!\" Beth cried out.\n\nShe turned her head and looked at me as I kept easing into her pussy.\n\n\"Ahhhhhh!! Dawn, you are big!!\"\n\nI winked at Lori, and she placed her hands on Beth's head and pushed her back down on her pussy. I held her hips and began working in and out of her as she moaned into Lori's pussy.\n\n\"Allen, are you enjoying watching your wife being fucked?\" I asked as I worked my cock.\n\n\"She is enjoying it.\"\n\n\"I know she is enjoying, but are you?\" Allen looked at his wife.\n\n\"I think it is hot,\" he said.\n\nBrenda sped up and worked her pussy on Allen's cock for a long time until the two of them came together. I was taking my time with Beth. Lori got off as she watched Beth eating her. Beth pushed herself up, and I held my cock deep inside her.\n\n\"Oh, my...\" Beth moaned.\n\nI held her hips and worked my cock in and out in long strokes.\n\n\"Oh...yes!\"\n\n\"Beth, do you want me to fuck you harder?\" I asked.\n\n\"Yes!\"\n\nBrenda was now lying next Allen as he watched me fuck his cute wife. I held her hips tight and started jamming my cock into her.\n\n\"Oh god!! Fuck me with that big cock!!\"\n\nBeth groaned and screamed as I kept thrusting into her for about 20 minutes as they all watched.\n\n\"Oh, fuck!! I;m coming!!\" Beth screamed. I jammed into her faster. \"Ahhhh!!\"\n\nWe all heard her pussy gush several times.\n\n\"Fuck...\"\n\nI hled her hips for a few minutes as she caught her breath then she began to jam her pussy back onto my cock over and over.\n\n\"Ahhhh!! Fuck!! Yes!!\"\n\nShe kept going and started jamming her pussy back onto my cock harder.\n\n\"Ohhh!! Fuck!! I'm coming again!!\" Beth screamed.\n\nHer back arched up and down, and her pussy squeezed my cock, and she came in another huge jerking orgasm.\n\n\"Ahhhhhhhhh!! Fuck!! Yes!!\"\n\nBeth kept jerking until she began to collapse on top of Lori. I rode her down until she was lying between Lori's legs with her head on her stomach. Lori smiled at me as I held myself up and started driving my cock into Beth. She kept screaming until she started coming again.\n\n\"Fuck!! I'm coming again!!\"\n\nI drove my cock in deep and started pumping cum into her as she screamed. I held my cock in her as she gasped for air then I finally slid my cock out and stood on my knees. Beth slowly rolled off of Lori onto her back. I got off the bed, and Brenda moved off of Allen and got between Beth's legs.\n\n\"Oh, no!!\" Beth screamed when Brenda placed her mouth over her pussy.\n\nI stood and watched for a few minutes. Allen was watching Brenda work on his wife.\n\nI left and went to the kitchen and got a beer then went back upstairs. I stopped at my bedroom. Samantha had joined them, and Diane was going down on her as Ian watched. I walked down to see what Sondra was doing. I found her lying in bed by herself.\n\n\"Did they leave you by yourself?\" I asked.\n\n\"I'm resting.\"\n\nI sat on the edge of the bed, and she took my beer and drank some of it.\n\n\"So far, so good?\" I asked.\n\n\"After Ian fucked Ms. Williams, she went somewhere. He was so horny he fucked me senseless.\"\n\n\"I hope you have something left.\"\n\n\"I always do! Samantha is wild.\"\n\n\"She can be.\"\n\nSondra rolled onto her side, so we talked. Soon, she had me on my back and was sucking my cock nicely. Samantha walked into the room and got on the bed with us.\n\n\"Are you having a good time, honey?\" I asked.\n\n\"Oh, my god. Diane can really eat pussy.\"\n\n\"Better than me?\"\n\n\"She is good.\"\n\n\"You want to help?\" Sondra asked her.\n\nI watched the two of them suck my cock for a long time. Sondra eventually straddled me and worked my cock into her as she slowly slid down. While she worked her pussy on my cock, Samantha went to take a shower.\n\n\"I love your cock.\"\n\n\"I like your pussy.\"\n\nWe laughed, and Sondra kept riding me. I grabbed her tits and played with them while she kept going. When she started moaning and working faster, I started pinching her nipples.\n\n\"Ohhh!! Fuck yes!!\"\n\nShe sped up and was driving her pussy onto my cock hard.\n\n\"Ohhhhh!! I'm coming!!\"\n\nSondra jerked and screamed as her pussy gushed.\n\n\"Ahhhhhhh!!\"\n\nSondra sat as she gasped for air.\n\n\"Oh, wow...\"\n\n\"Let him be on top,\" I heard Samantha say.\n\nI looked, and she was drying herself off.\n\n\"Samantha, you have a hot body,\" Sondra said as she looked.\n\nSondra lifted herself off my cock and laid on her back. I sat up and pulled her legs apart and lifted them and spread them. I got between them and slid my cock back into her.\n\n\"Ahhhhhh...\"\n\nI held myself up and slowly worked my cock into her pussy, shoving it in deeper each time so her tits would bounce. Samantha was lying next to us watching. I kept working my cock into her in long deep strokes until Sondra screamed she was coming again.\n\n\"Fuck!!\" She screamed as she thrust her hips up.\n\nI had my cock buried in her as she lay there.\n\n\"Oh...my...\"\n\nI slid my cock out and sat on my legs and rubbed her thighs as she lay there. She finally caught her breath, and Samantha sat up and straddled her head and lowered her pussy down to her mouth. Samantha smiled at me as she watched for a few minutes.\n\nSondra was eagerly eating Samantha when I grabbed her around the waist and lifted her hips up into the air. She moaned, and I held her up as I moved forward and slid my cock into her pussy again.\n\n\"Emmmmmm!!\"\n\nI had my hands behind her back, holding her up as I slid all the way into her.\n\n\"Emmmmmmm!!\"\n\nI leaned forward and kissed Samantha for a minute.\n\nI held Sondra up off the bed as I started working my cock in her once more. She was moaning loudly. Each time I would push all the way in and bottom her out hard, her stomach would arch up.\n\nI kept going for a long time. She came again, and Samantha came and filled her mouth full. I sped up and started thrusting into her harder.\n\n\"Emmm!! Emm!! EMMMMM!!\"\n\nSondra moaned loudly for a long time until she started jerking and coming again. I jammed in hard and held it, and pumped cum into her as she screamed into Samantha's pussy. I slid my cock out and lowered her to the bed. Samantha leaned all the way over and placed her mouth over her pussy.\n\n\"Oh, my, god!!\" Sondra screamed.\n\nI sat back on the bed and watched the two of them. After they had come several more times, they were both spent. Samantha had rolled off of Sondra, and they were both just lying there.\n\n\"You two get in bed,\" I said.\n\nThey managed to get under the sheets. I got in bed between them and grabbed the remote and turned off the lights.\n\n*****\n\nWhen I woke up, Sondra was sucking my cock.\n\n\"Good, you are awake,\" she said and straddled me and worked my cock into her pussy.\n\nSamantha was lying next to me asleep.\n\n\"This has been a crazy weekend,\" Sondra said as she settled on my cock.\n\n\"I hope you are having a good time.\"\n\n\"Oh, I am.\"\n\nShe worked her pussy on my cock for a long time. Samantha had woken and was watching.\n\n\"I have got to try this,\" Sondra said.\n\nShe lifted her pussy off my cock and turned around and straddled me facing my feet. I watched her as she grabbed my cock and held it then lowered her ass down until the end was pressing into her asshole. She pushed and wiggled, and the end of my cock slipped into her ass.\n\n\"Ahhh!\"\n\nShe took her time and slowly worked my cock deep into her ass as she sat.\n\n\"Oh, my god. This feels so good!\"\n\nSondra settled into a reverse cowgirl and slowly worked her ass on my cock as she moaned. She took her time and kept working and was getting into it hard. She paused for a minute and reached behind her and laid back on me. She pulled her legs up and as I held her and I started working my cock in her ass. Samantha got up and left the bedroom.\n\n\"Ohh, fuck!! This is perfect!!\"\n\nI kept working my cock in her ass until she came.\n\n\"Ahhhh!! Fuck, yes!!\" She screamed. \"Damn, that feels so good.\"\n\nI was holding her and squeezing her tits when Sam walked into the room. He looked and got on the bed between our legs.\n\n\"What?\" Sondra said as she looked up.\n\nI knew were Samantha had gone.\n\nI felt Sam moving.\n\n\"Ohh, wait. I don't know about this!\" Sondra exclaimed.\n\n\"Ahhhh!!\" Sondra screamed as Sam worked his cock into her pussy. \"Oh, my, god!! No!!\"\n\nSam worked his big cock all the way into Sondra.\n\n\"Oh, no!! Oh, no!! I don't know!!\"\n\nI worked my cock in her ass while Sam worked his cock in her pussy. She moaned and screamed until she came in a huge orgasm.\n\n\"Ahhhhhh!! Fuck, yes!! Yes!! Yes!!\"\n\nI saw Ian appear at the doorway. He stood and watched as we worked his wife over.\n\n\"Honey, are you enjoying yourself?\" Ian asked.\n\n\"Oh, my god! Yes!\"\n\nSam and I fucked her hard for some time.\n\n\"Oh fuck!! This is crazy!!\"\n\nSam started jamming onto hard.\n\n\"Ahhhhhh!! Yes!! Yes!! Yeeesssss!!\"\n\nShe came in a huge screaming orgasm, and we both filled her full of cum.\n\nSam got off of her and sat on the bed. I held Sondra, wondering if she had passed out.\n\n\"Oh...fuck...\" she moaned.\n\nI held her for a few more minutes as Ian looked at her. \n\n\"Help me up,\" she said.\n\nI pushed her until she was sitting. She finally lifted her ass off my cock and collapsed back onto the bed.\n\n\"Honey, you look spent,\" Ian said.\n\n\"Oh...that was incredible.\"\n\nIan climbed onto the end of the bed, and Sam and I watched as he spread his wife's legs apart and lifted then up. He moved up and slid his cock into his wife's dripping pussy.\n\n\"Oh...no...\" came from Sondra.\n\nIan pushed her legs up to her breasts and began to thrust into her hard and fast. Sondra lay there with her mouth open as Ian pounded her pussy.\n\nSam left, and I sat up and watched for a long time.\n\n\"Sondra, are you okay?\" I asked.\n\n\"Perfect!\" She exclaimed as Ian drove his cock into her.\n\nI watched until they both got off.\n\n\"We will start breakfast soon,\" I said and got up.\n\nI went down to my bedroom to get cleaned up. Dawn and Linda were lying on the bed, talking. I went on to the shower.\n\nI was washing my hair when Dawn and Linda got in the shower with me. We soaped each other up and played.\n\n\"Did you ask her if she wanted to do that?\" Dawn said.\n\n\"She enjoyed it.\"\n\nWe played for a while longer then rinsed each other off. Linda wrapped her arms around me and kissed me.\n\n\"I want to do that,\" she said.\n\n\"What?\"\n\n\"I want you and Sam to do me at the same time,\" she said.\n\n\"Are you sure?\"\n\n\"Oh, yes. Dawn told me how great it will be.\"\n\nWe got out and dried off, then went down and started breakfast. Samantha was already in the kitchen with the coffee going.\n\n\"Did you go and get Sam?\" I asked.\n\n\"Yep,\" she said as she sipped her coffee.\n\nBy the time we had everything going, everyone was downstairs. There was a lot of laughter and talking. Sondra and Ian had been the last to come down. I admired Sondra's hot body with her long wet hair.\n\n*****\n\nAfter everyone had eaten breakfast, most of them made their way out to the pool or hot tubs as Dawn and Rachel helped me clean the kitchen.\n\n\"Rachel, where did you sleep last night?\" Dawn asked.\n\n\"I slept with Sam and Amy. Dawn, I saw that you and Linda slept with Diane. How did that go?\"\n\n\"We played and talked mostly.\"\n\nAfter we finished, we went outside. Rachel got in the hot tub with Linda and Diane, Dawn and I sat with Sondra.\n\n\"Sondra, are you having a good time?\" Dawn asked.\n\n\"Oh, my. Yes, I am. Thanks for having us.\"\n\n\"Any time.\"\n\nIan was in the pool with Samantha and Amy, and Beth and her husband. Sherri walked up and sat next to me.\n\n\"We are ready to leave Wednesday,\" Sherri said.\n\n\"Have you got everything?\"\n\n\"I think so. We need to come and pick up some purchase orders and things.\"\n\n\"Ok. I have cash for you three. Why don't you come by the house Tuesday and we will go over everything,\" I said.\n\n\"Okay. I'll call Katrina and see if she can come.\"\n\n\"Have you got sizes for everyone you want me to photograph?\"\n\n\"Yes. We need to start getting the photos done as soon as we get back.\"\n\n\"When do you think that will be?\" I asked.\n\n\"Probably the Monday after Thanksgiving.\"\n\n\"Then, we need to get as many of the photoshoots done as soon as possible if you want to use them for advertising.\"\n\n\"We have a tentative schedule.\"\n\n\"James, what photos?\" Sondra asked.\n\n\"I am doing some shoots for the new store. We have some of the business ladies around town that are going to model lingerie and swimsuits.\"\n\n\"Oh, that sounds like fun.\"\n\n\"Some are going to model in the offices,\" Sherri said.\n\n\"That should look good.\"\n\n\"Do you want to be in some?\" I asked.\n\n\"Sure.\"\n\n\"We will use them in our advertising.\"\n\n\"That's okay.\"\n\n\"Talk to Sherri and Brenda then.\"\n\nTo be late October, the morning weather was not too cool. After a while, everyone had moved back inside the house. Lori was sitting with Linda and Ian with her computer, and they were discussing her project. A bit later, I saw Samantha and Amy go into a bedroom with Ian and Allen. I was in the kitchen getting some things ready for lunch when Beth sat at the bar.\n\n\"Beth, are you and Allen having a good time?\"\n\n\"Allen was a little unsure at first, but after he watched you fucking me, he seems to be getting into it now.\"\n\n\"Just make sure you both are good with things.\"\n\n\"We are now. He is doing one of the redheads. James, tell me about you and Ms. Williams?\"\n\n\"Linda and I have a special relationship. There is some history to it.\"\n\n\"I have figured out that she and her bodyguard are an item.\"\n\n\"Linda and Rachel are very close. She spends most of her time with Rachel anyway.\"\n\n\"I would think someone like her would be chased by every guy in town.\"\n\n\"Linda had a very bad first marriage. She has had her fill of husbands. She works very hard, and Rachel is good for her.\"\n\n\"I know Ian never would have thought he would be having sex with her.\"\n\n\"Beth, make sure you and Allen are very discreet about this.\"\n\n\"Oh, we will be. I know Sondra is very happy now.\"\n\n\"She seems to be. Sondra is a little wild,\" I said.\n\n\"She is. She is always coming by the office and having Ian fuck her in his office. Last weekend she got Ian and Allen to come all over her.\"\n\n\"Does she like that?\"\n\n\"She does. She sucked Allen's cock while she jerked off Ian and then had the two of them come all over her. Later, she told me she had a fantasy about a bunch of guys fucking her at the same time.\"\n\n\"I'll have to remember that,\" I said. \"Beth, what did your husband say when you told him you were fucking Ian?\" She hesitated.\n\n\"I didn't tell him that part until he had fucked Sondra a few times. I told him, and he seemed unhappy, but then I think he decided as long as he got to do Sondra, he was okay with it.\"\n\n\"Make sure.\"\n\nI finished my preparations for lunch as Beth and I talked. I got her a glass of wine, and we went to check on her husband. We found Samantha riding him while her sister was on top of Ian. Beth sat on the edge of the bed and watched as she sipped her wine. I left her and went back to the den. Dawn was sitting with Sherri and Brenda, talking about the upcoming trip.\n\n\"Can I get you three some wine?\" They said yes.\n\nI went and got glasses and a bottle of wine and went back and poured each a glass.\n\n\"I was just talking to them about the lingerie shop in Paris,\" Dawn said. \"They are going there first.\"\n\n\"We have already talked to them about supplying us a lot,\" Brenda said.\n\n\"They had some nice things,\" I replied.\n\nThe four of us talked until we heard Samantha screaming she was coming.\n\n\"She is having fun,\" Sherri said.\n\n\"She always does,\" I replied.\n\nLori then told Sherri and Brenda about our trips to look at limos. They laughed about that for a while.\n\n\"Dawn, did you see the diamonds Ms. Williams has in her piercings?\" Sherri asked.\n\n\"Oh, yes. I have seen them many times. The girls and I are getting pierced Monday so we can wear diamonds,\" Dawn said.\n\n\"Ouch!\" Brenda said and laughed.\n\n\"I think they are sexy,\" Sherri said.\n\n\"You would look good with some jewelry,\" Dawn told her.\n\n\"I don't know if I am that brave,\" Sherri replied.\n\n\"I'll let you know how it goes. The doctor I work with is going to do ours.\"\n\n\"Sherri, if you get pierced, I will get you something nice to wear,\" I said.\n\nWe all talked until Amy came out of the bedroom. She went to the kitchen and got a glass, and came over and poured herself a glass of wine.\n\n\"Amy, make sure I get you and your sister's sizes for lingerie before we leave,\" Brenda said.\n\n\"I wish I could go with you.\"\n\n\"You have school,\" Dawn said.\n\n\"Amy, I talked to the people in Hawaii about their swimwear,\" Sherri said. \"If I am caught up when you two leave, I may go with you.\"\n\n\"Good, we can have some fun.\"\n\n\"Where are Sam and Olivia?\" Dawn asked.\n\n\"They are in the studio playing with the video camera,\" I said. \"You know that is why Sam got you to buy it so he could use it.\" Dawn laughed.\n\n\"I'll go check on them,\" Amy said.\n\nLater, I got Ian to help me start grilling some hamburgers for lunch.\n\n\"James, we are having a great time.\"\n\n\"Good. I think Sondra is enjoying herself.\"\n\n\"She is. Do you have parties like this often?\"\n\n\"This is just everyone from my work projects. It is the first time we have all gotten together.\"\n\n\"I was surprised about Ms. Williams...\"",
        "\"But, you enjoyed fucking her...\"\n\n\"Oh, hell, yes! Ms. Williams is so fucking hot.\"\n\n\"Yes, she is.\"\n\n\"You seem to have something going with her?\"\n\n\"We are just very close. She is more like family. Sherri and Brenda are heading to Europe next week on a buying trip, so you may get some calls about the letters of credit.\"\n\n\"No problem.\"\n\nIan and I talked while we cooked.\n\n\"Lori's business project looks great,\" Ian said. \"I may want to buy into the limo business.\"\n\n\"Sorry, all the stock is reserved for the owners and drivers.\"\n\n\"If her franchising idea works, she may have a goldmine.\"\n\n\"I think she has a good plan. We will now in about a year,\" I said.\n\n*****\n\nAfter lunch, everyone was sitting around the den sipping wine or beer. After some time, some of them went out to swim. I was sitting on the sofa with Dawn when Linda walked up. She moved in front of me and placed a knee on each side of my legs and sat in my lap.\n\n\"What are you four doing for New Year's?\" Linda asked.\n\n\"I haven't thought about it,\" Dawn replied.\n\n\"How about a trip someplace for a few days. We can celebrate New Year's out of the country.\"\n\n\"We will have a house guest,\" I said.\n\n\"She can come.\"\n\n\"Where are you planning to go?\" Dawn asked.\n\n\"I thought we could fly someone where on the 30th and come back on the 2nd. Do the girls have passports?\"\n\n\"They just got them. I guess we could do that,\" I said.\n\n\"Make plans then,\" Linda said and reached between us and started stroking my cock. \"My new pilots should be ready to go by then. I'll make the arrangements.\"\n\n\"I forgot about them,\" I said.\n\n\"They are supposed to be ready. It will be a good checkout flight for them.\"\n\n\"What about your helicopter and new jet?\"\n\n\"Helicopter should be here in a week. They said my jet could be ready in time for the New Year's trip. If it isn't, I'll take the other jet.\"\n\n\"We will have to break-in your new helicopter. You need to be in the mile-high club,\" I said.\n\n\"Sounds like a good idea.\"\n\n\"What about your new pilots?\" Dawn asked.\n\n\"They better get used to it!\"\n\nLinda had my cock good and hard now and moved and worked it into her pussy and settled.\n\n\"The genealogist is supposed to be finished soon,\" Dawn told her.\n\n\"I can't wait, but I guess we already know a lot,\" Linda said. \"Oh...what about your trip to the reservation?\"\n\n\"I'm leaving about the 12th.\"\n\n\"You want my helicopter to take you?\"\n\n\"We are driving. Our friend from Hawaii is going, and after Dawn is settled in, we are going to go over to Sugar Mountain to ski for a few days,\" I said.\n\n\"I haven't been skiing in a long time,\" Linda said. \"Let me know when you will be there I may join you.\"\n\n\"I'll call you when we figure that out,\" I said.\n\nLinda slowly worked her pussy on my cock as she wrapped her arms around my neck. Dawn reached over and rubbed Linda's breasts while she worked her pussy slowly.\n\nWhile Linda was taking her time fucking my cock, Ian and Sondra came in from the pool.\n\n\"Oh...can we get a bottle of wine?\" Ian asked.\n\n\"Sure, I'll show you where it is,\" Dawn said and got up.\n\nLinda leaned over and kissed me while Dawn was in the kitchen.\n\n\"How have things been going since you and Rachel were outed at the party?\" I asked.\n\n\"Fine. I'm not worrying about things like that anymore.\"\n\n\"Good for you.\"\n\n\"She sleeps with me at the house now. The staff just ignores it.\"\n\n\"You have a lot of staff. Will they talk?\"\n\n\"I don't care. I wish there weren't so many people in that giant house. Most of them are there just to keep it clean.\"\n\n\"You two must be lonely in that big place.\"\n\n\"A little. My new pilots are going to move in soon while they look for a place to live.\"\n\n\"That will give you some company.\"\n\n\"It will. I'll have to see how things go with the two of them. He was cute.\"\n\n\"Be careful,\" I said.\n\nDawn sat back down as Ian and Sondra went back outside.\n\nLinda took her time working her pussy on my cock as Dawn played with her nipples. After some time, Linda was building toward an orgasm.\n\n\"Oh...god...yes...\"\n\nShe sped up and worked her pussy harder.\n\n\"Emmmmmm...oh my! Ohhhh...yes!\"\n\nDawn started pinching Linda's nipple.\n\n\"Ahhhhhh! Yes! Oh, yes! That's it!\"\n\nI had my arms around Linda's waist and was holding her tight as she worked her pussy.\n\n\"Ahhhhhhhhh!! Yes!!\" Linda screamed and started coming.\n\nShe thrust her pussy onto my cock hard over and over.\n\n\"Ahhhhhhhh!! Fuck!!\"\n\nI heard Linda's pussy gush. She sat, then leaned forward and placed her head against mine.\n\n\"Dawn...thank you...\" Linda moaned.\n\n\"You're welcome.\"\n\nLinda sat as she breathed hard.\n\n\"Are you ready?\" Dawn asked.\n\n\"Ready for what?\" Linda replied.\n\n\"Ready for Sam and James to do you at the same time.\"\n\n\"Oh...I don't know...\"\n\n\"You two go upstairs. I'll go and get Sam,\" Dawn said.\n\nI kissed Linda, and she moved and stood as Dawn got up.\n\n\"Come with me,\" I said as I took her hand.\n\nI led Linda up to my bedroom.\n\nI got on the bed and laid on my back. Linda was smiling as she got on the bed and straddled my cock. She slipped it back into her pussy and was working it when Sam came in with Dawn.\n\n\"How do you want to do this?\" Dawn asked.\n\n\"I'm not sure,\" Linda replied.\n\n\"Do you want Sam in your pussy or your ass?\"\n\nLinda smiled at me.\n\n\"Sam? Would you like to do my ass?\" Linda said, smiling.\n\n\"Hell, yes!\" Linda giggled.\n\nLinda got her legs under her and worked her pussy down on my cock as she sat.\n\n\"Dawn, you better be right,\" Linda said.\n\n\"Oh, you will enjoy this,\" Dawn replied.\n\nDawn walked around the bed and opened the drawer and got out a bottle of lube.\n\n\"Now what?\" Linda asked.\n\nI reached up and pulled her down on top of me. Dawn handed Sam the bottle, and he got on the bed behind Linda. \n\n\"Oh, that's cold!\" Linda exclaimed as Sam rubbed lube on her ass.\n\nLinda was smiling at me when I pulled her head down to kiss her. While we were kissing, Sam started his cock into her ass.\n\n\"Emmmm!\" Came from Linda. We kept kissing as Sam slowly slid his cock into her.\n\nLinda pushed herself up some.\n\n\"Oh my god! Dawn, you are right! This feels wonderful!\"\n\nAs Sam began working his cock in her ass, Linda began to work her pussy on my cock.\n\n\"Ahhhhhhh! Yes!! This is great!!\"\n\nI placed both of my hands on her large breasts and began to squeeze them. Linda's face looked like she was in heaven as she worked.\n\n\"Ohhhh...yeeeesss...\"\n\nSam was slowly working his cock in her ass as she worked her pussy on my cock slowly, just taking her time and getting into it.\n\n\"Oh, yes!\"\n\nJust take your time and enjoy it,\" Dawn told her.\n\nSam and I worked our cocks in her for a while.\n\n\"Fuck, me!! Fuck, me hard!!\"\n\nLinda worked her pussy harder on my cock as Sam thrust into her. She cried and moaned and screamed for a long time.\n\n\"Ahhhhhhh!! I'm coming!!\" Linda screamed.\n\nShe was losing control as a huge orgasm hit her.\n\n\"Ahhhhhhhh!!\"\n\nLinda came hard and collapsed on top of me. I sucked one of her nipples into my mouth and bit down on it gently.\n\n\"Fuck!! Yes!!\"\n\nSam kept driving his cock into her ass as she lay on me. I reached down and grabbed her ass and started working her pussy on my cock again.\n\n\"Ohhhhhh...fuck...yes...yes...yes...fuck...me...\"\n\nSam and I kept fucking her as she moaned. Linda lay on me for a long time as we worked our cocks in her.\n\n\"Oh! I'm coming again!!\"\n\nLinda started jerking as I worked her ass.\n\n\"Ahhhhh!!\" I heard come from Sam.\n\n\"Come in me!!\" Linda screamed.\n\nSam let out a groan and started pumping cum into Linda's ass.\n\n\"Yes!! Come in my ass!!\"Sam kept groaning as he filled Linda with cum.\n\n\"Fuck!!\" Linda screamed and collapsed.\n\nA few minutes later, I felt Sam slide his cock out of Linda.\n\n\"Oh...my...\" she moaned.\n\nLinda was lying on me, panting hard.\n\n\"How was that?\" I heard Dawn ask.\n\n\"...fantastic...\" Linda moaned.\n\nLinda laid on me a long time with my hard cock still in her. I heard Sam get up and leave. Linda slowly pushed herself up and sat on my cock.\n\n\"You are becoming a real tramp, Linda,\" I said. She smiled at me and giggled.\n\nDawn giggled and leaned over and kissed Linda then me.\n\n\"Get up, tramp,\" I told Linda.\n\nShe smiled and lifted her pussy off my cock. I rolled off the other side of the bed and walked around to her side and took her hand.\n\n\"On your knees, tramp,\" I said.\n\nLinda laughed and moved off the bed onto her knees. She opened her mouth, and I slid my cock into it. Linda worked her mouth on my cock for a minute.\n\n\"No, like this, tramp,\" I said.\n\nI placed my hands on both sides of her head and started working her mouth on my cock hard. I felt her laugh. Dawn was lying on the bed, watching and playing with her pussy. I pulled Linda all the way down and slid my cock down her throat and held her there.\n\nI worked Linda's mouth on my cock hard as she moaned. I kept going until I was ready to come. I grabbed a handful of Linda's short hair and pulled her off my cock, then grabbed my cock and aimed it at her face. She watched as I started coming.\n\nI held her head and my cock and shot cum all over her face. I covered her in cum as she laughed. She was still laughing when I heard Dawn come. I released Linda's head as she stood on her knees, still laughing. She had a ton of cum running off her face. Dawn started laughing as she looked at Linda.\n\n\"Now, you are a real tramp!\" Dawn exclaimed as she turned and sat on the edge of the bed.\n\nLinda turned to her and spread her legs apart then placed her mouth over Dawn's pussy. Dawn leaned back and held herself up with her arms and watched Linda eat her until she came again.\n\nI pulled Linda and Dawn up, and we went to the shower.\n\n\"You have never done that to me,\" Linda said. \"I liked it.\"\n\n\"I'm happy you did. You look good covered in my cum.\"\n\n\"Yes, she does,\" Dawn said as she rubbed Linda's tits.\n\nI watched Dawn and Linda soap each other up and run their hands over each other's body. Once they finished, they kissed for a minute before we all stepped out of the shower. They dried each other off as I dried myself. I moved and kissed them both, and we walked back to the bed.\n\n\"The next time Rachel and I are here for one of your big parties. I want all the guys to cover Rachel in cum.\"\n\n\"Is that something she wants to do?\" Dawn asked.\n\n\"She mentioned thinking about several guys coming on her.\"\n\n\"I can probably arrange that,\" Dawn said.\n\n\"Does that mean you two are planning on coming to more of the parties?\" I asked.\n\n\"Sure.\"\n\nWhile the three of us laid on the bed talking, Rachel came in. She went to the shower and came back a bit later and joined us on the bed.\n\n\"Are you having a good time, honey?\" Linda asked.\n\n\"Yes, I am. Are you?\"\n\n\"So far, so good.\"\n\nWe all lay on the bed and talked for a while. Rachel wrapped a hand around my cock and stroked it until it was hard. She then straddled me and Linda and Dawn watched her fuck me until we both came.\n\n*****\n\nThe four of us went down the stairs. We saw that Beth was lying over the end of the Tantra chair as Ian fucked her hard. Sam was sitting on the sofa with Sondra on his lap riding him. They were the only people we saw. Once we were in the den, we heard laughter coming from the sunroom. I walked down there, and all the women were in the hot tub giggling.\n\n\"Are you all having a good time?\" I asked.\n\n\"Yes, we are!\" Came from Amy.\n\nI left all of them and went to the kitchen. Dawn and Linda were getting some wine. Linda leaned into me and kissed me.\n\n\"That was nice,\" she said.\n\n*****\n\nAbout 5:30, Olivia started on a Mexican dinner with some help. There was a lot of laughter in the kitchen as they worked. I was sitting in the den with Sam and Lori.\n\n\"Sam, when can you go to St. Loius?\" Lori asked.\n\n\"Whenever they are ready.\"\n\n\"I think they are ready. They called and asked about it.\"\n\n\"Then sat up a few days. Olivia is going with us. We want to see St. Loius.\"\n\n\"Okay. I am tied up next week finishing my project. How about the week after that?\"\n\n\"Sounds good.\"\n\n\"Good. I'll make us some reservations,\" Lori said.\n\n\"One room would be enough,\" Sam said, smiling at Lori.\n\nThings slowed down until after we all had a very nice dinner.\n\n*****\n\nAbout 8:30, everyone went outside to the pool. The night air was a little cool, the way Dawn and I like it. We were sitting on the edge of the pool watching everyone. Beth and Ian were in the pool and walked over to us.\n\n\"We just wanted to thank you two for this weekend,\" Ian said.\n\n\"We are glad you are having a good time,\" I replied.\n\n\"I think this is just what Sondra and I were looking for,\" Ian said.\n\n\"We will keep that in mind when we have one of our big parties,\" Dawn said.\n\n\"Big parties?\" Ian asked.\n\n\"Several times a year, we have all of our friends over for a weekend...about 12 couples.\"\n\n\"Wow, that is a big party.\"\n\nWhile Dawn and Ian were talking, Beth reached for my cock and began playing with it until she had it hard. She pushed my legs apart and got between them and began sucking my cock. I saw Ian watching as she worked her mouth up and down.\n\n\"Dawn...you are okay with all of this?\" Ian asked.\n\n\"Sure. Doesn't your wife enjoy watching another woman suck your cock?\"\n\n\"I guess.\"\n\n\"You guess? Ian, you better make sure she enjoys watching, that is the only reason she should be letting another woman do it.\"\n\n\"You enjoy watching?\"\n\n\"I enjoy, and I get off watching. You better make sure your wife gets off on it and is not just letting it happen because she gets to fuck other guys,\" Dawn told him.\n\n\"I'm sure she enjoys it...I mean she likes to tell me all about another guy doing her,\" Ian said.\n\n\"Does she like you telling her about you eating another woman?\" Dawn asked.\n\n\"She likes for me to tell her about fucking another woman, but I think she enjoys it more when she tells me.\"\n\n\"That's not good, Ian. You both need to get into listening to each other talk about your experiences.\"\n\n\"Is that what you two do?\"\n\n\"Oh, yes. I remember in great detail, James telling me about your wife sucking his cock in your office. We will have great sex telling each other about everything that happened this weekend. James said you jumped right on Sondra after she had sex. Did you like that?\"\n\n\"I get pretty horny watching her being fucked.\"\n\n\"Ian, you need to enjoy watching her being fucked...there is a big difference.\"\n\n\"What's the difference?\"\n\n\"A lot. I'm getting horny right now watching Beth suck my husbands cock. But, I am also enjoying it.\"\n\n\"What do you mean?\"\n\n\"Ian, you can get horny watching your wife suck a cock or being fucked. That is easy. James and I enjoy it. By enjoying it, I get to know how much fun Beth is having right now. I feel the excitement she feels doing it...you should feel excited and happy that your wife is enjoying being pleased, not just fucked, Ian.\"\n\n\"I know she is having a good time...\"\n\n\"But, are you excited for her?\" Dawn asked.\n\n\"I'll have to think about that.\" Ian smiled at Dawn, then he placed his hand on her leg and rubbed.\n\nDawn smiled at him and spread her legs. Ian slid his hand between them and began to slowly play with her pussy.\n\n\"Ian, do you want to eat me?\" Dawn asked.\n\n\"I haven't had the pleasure yet.\"\n\n\"Then eat me.\"\n\nIan kissed up the inside of Dawn's legs until he was licking her pussy. Soon, he had his mouth over her pussy and was working on it slowly.\n\nDawn watched Beth suck my cock while I watch Ian go down on her. I leaned over and kissed Dawn.\n\n\"I can't get all of this down my throat,\" Beth said, looking up.\n\n\"You are doing fine,\" I said.\n\nShe smiled and slid her mouth back onto my cock.\n\nDawn had lain back on the patio, and Ian was working on her pussy hard. While I was watching him, Sondra walked up. She rubbed Ian on the shoulders as he kept going.\n\n\"He has been waiting to do that,\" she said.\n\nSondra stood and watched her husband until Dawn got off several times.\n\n\"Beth, I am going to fill your mouth full of cum!\"\n\nShe sped up for a minute, then I let go and pumped cum into her mouth. She sucked and pumped my cock until she had it all.\n\n\"Emmm, that was good.\" She said as she looked at my cock while she slowly pumped it.\n\nSondra pushed herself up to sit on the edge of the pool next Dawn so she could watch her husband. Beth smiled at me and turned and swam off. I slid into the water and moved in front of Sondra and spread her legs apart. I took a few minutes to kiss up her legs and finger her pussy, then placed my mouth on it and began licking.\n\nI had my tongue deep in her when I heard Dawn screaming she was coming. I was licking and sucking on Sondra's clit when I knew Dawn had slid off the edge of the pool and down onto Ian's cock. I kept working on Sondra's pussy as I felt Dawn getting off with Ian's cock in her.\n\nSondra came hard a few times and finally asked me to stop. I turned and watched Dawn as she worked her pussy on Ian's cock while she had her arms and legs wrapped around him as they stood in the pool. Looking at Ian's face, I could tell Dawn was keeping him from coming as she worked to get off.\n\n\"Ohhh, fuck, yes!!\" Dawn screamed.\n\n\"Ahhhhh!!\" Came from Ian once Dawn let him come.\n\nDawn stayed wrapped around Ian for a minute then slid off into the water. Ian looked spent as I walked over to Dawn.\n\n\"I need some wine,\" she said.\n\nI took her hand and led her to the patio and went in and got her a glass of wine then went back and sat next to her and handed her the wine. Dawn took the wine and sipped it, then straddled my lap and pushed me back. She held her glass with one hand and worked my cock in her with the other, then slid down and settled.\n\n\"Ian and Sondra are okay,\" Dawn said.\n\n\"I'll invite them to our next big party.\"\n\n\"I don't know if we will get to have one at Christmas,\" Dawn said. \"Too much going on.\"\n\n\"Maybe we can have a short one Sunday or Monday night after Christmas.\"\n\nDawn started working her pussy slowly as she sat and sipped her wine. She was just taking her time and enjoying. Sam and Olivia walked up to us.\n\n\"What have you two been doing?\" Dawn asked.\n\n\"We were eating your girls while they sat on the side of the pool,\" Olivia said.\n\nDawn reached out and wrapped her hand around Sam's cock and began stroking it. Once he was hard, she sat her glass down and pulled Sam next to her and leaned over and sucked his cock into her mouth.\n\n\"Olivia, you think Ian and Sondra would fit in with the big group?\" I asked.\n\n\"I think they would. We are short a couple with Elizabeth pregnant.\"\n\n\"We may try and have a one night party after Christmas.\"\n\n\"Good. Will everyone be back by then?\"\n\n\"They should be.\"\n\nOlivia watched Dawn suck Sam's cock for a few minutes, then she moved to the top of the recliner and straddled my head and lowered her pussy down to my mouth.\n\n*****\n\nIt was 10:30 by the time Dawn and I finished with Sam and Olivia. Everyone was going in the house because it was cooling off. People were getting one last glass of wine and some were heading off together. I was getting Dawn another glass of wine in the kitchen and stopped to talk to Linda and Diane.\n\n\"Diane, are you having a good time?\" I asked.\n\n\"Oh, yes. Thank you for asking me to come.\"\n\n\"James, what is Dawn doing tonight?\" Linda asked.\n\n\"I haven't asked.\"\n\n\"I'll go find out.\"\n\nLinda took the glass of wine I had for Dawn and headed toward her in the den.\n\n\"James, you are going to have to tell me about you and Linda,\" Diane said.\n\n\"We are very close friends.\"\n\n\"It sounds like it, but there seems to be more to it than that.\"\n\n\"There is, but I'llI leave the details for Linda to explain to you.\"\n\n\"Your two redheads are a lot of fun. I have been talking to them about your situation.\"\n\n\"We are one big happy family,\" I said.",
        "\"It sounds like it. Do you have many parties like this?\"\n\n\"A few. Would you like to come to the next one? It may be more people.\"\n\n\"Would your friends mind?\"\n\n\"Oh, I think the guys would be disappointed they wouldn't get to fuck you, but the ladies would be happy. You can come with Linda and Rachel.\"\n\n\"So, the two of them come to your parties?\"\n\n\"Sometimes. It has taken a little work to get Linda to loosen up.\"\n\n\"She told me you were the one that helped her get past that prick she was married to.\"\n\n\"You know him?\"\n\n\"Met him once, that was all I needed to know.\"\n\n\"It took some work, but I think she is enjoying herself now,\" I told her.\n\n\"She seems to be. She and Rachel are good for each other.\"\n\nLinda walked up to us.\n\n\"Come with us,\" Linda said and took my hand.\n\nLinda led Diane and me up to her bedroom.\n\n\"Did you find out what Dawn is doing?\" I asked.\n\n\"She and Olivia are going to sleep with Allen. He may not make it to morning.\"\n\nLinda laid on the bed, and I watched Diane get in next to her. I laid on her other side and watched as they kissed for a while. They were having fun and playing with each other's breasts. Diane slowly kissed her way down to Linda's pussy and got between her legs. I watched for a while until Linda came in a huge orgasm.\n\n\"Oh...Diane...you eat pussy well...but I have to say James does too. You should let him eat you.\"\n\n\"Oh, I don't have a problem with that.\"\n\n\"It would be my pleasure,\" I said.\n\nDiane got up and moved and straddled my head. I pulled her smooth pussy down to my mouth.\n\nI had been working on Diane's pussy for a little while when I felt Linda straddle my cock. She was slowly sliding her pussy down as I worked my tongue in Diane.\n\n\"Diane, do you get off with a guy eating you?\" I heard Linda ask.\n\n\"I do if they do a good job.\"\n\n\"Oh, he will!\"\n\nWhile I took my time getting Diane off, Linda slowly worked her pussy on my cock. I knew the two of them were kissing as they worked.\n\n\"Ohhh...Linda, you are right!\" Diane exclaimed.\n\nShe ground her pussy down on my mouth. I kept going until she started coming.\n\n\"Oh, fuck! He is good!\" Diane exclaimed and started coming in my mouth.\n\nShe ground her pussy down harder as she came.\n\n\"Ahhhhh!! Yes, eat me honey!!\"\n\n\"Oh, god!!\" I heard Linda screamed and I felt her jamming her pussy down.\n\nThe two of them came at the same time. Diane lifted her pussy up.\n\n\"You good down there, James?\" She asked and laughed.\n\n\"I'm good!\"\n\nShe lowered her pussy back down.\n\n\"Linda, are you getting enough cock?\" I heard Diane ask.\n\n\"I get all I need from James, and a few of his friends.\"\n\n\"You seem to like his.\"\n\n\"Oh, I do.\"\n\n\"His wife is very understanding,\" Diane said.\n\n\"Dawn is a very unusual person. She is fine with James fucking other women, but she is very understanding about James and me.\"\n\n\"Why is that?\"\n\n\"James and I love each other.\"\n\n\"That could create a problem.\"\n\n\"Diane...let me see if I can explain this. James and I were married before.\"\n\n\"What?\"\n\n\"It was a very long time ago.\"\n\nI worked my tongue in Diane's tasty pussy while Linda explained things to her.\n\n\"Linda, that sounds just a little crazy,\" Diane said.\n\n\"I thought so too until I saw it.\"\n\n\"Wow.\"\n\n\"We will find out more soon. There is a genealogist researching all of it.\"\n\n\"Let me know what they find. I am still surprised his wife is okay with something like that.\"\n\n\"I'll explain it more sometime.\"\n\nLinda started working her pussy harder as Diane settled and let me lick her clit. A few minutes later, they both came again.\n\n\"Linda, lean back,\" Diane said.\n\nI felt Linda leaning back, then Diane leaned over.\n\n\"Oh, I always like this,\" Linda said.\n\nI had Diane's clit in my mouth now that she was leaning over and working on Linda's clit. I listened to Linda moaning for a long time.\n\n\"Oh, fuck!! I'm coming!!\" Linda screamed.\n\nI wrapped my arms around Diane's ass and pulled her down into my mouth and started sucking on her clit hard.\n\n\"Emmmmm!!\"\n\n\"Oh, fuck, yes!!\" Linda screamed. I felt her pussy squeezing my cock as she came.\n\n\"Emmmmmm!!\" Came from Diane as she came while Linda was coming.\n\nThey both shook and jerked.\n\n\"Oh...wow...\" came from Linda.\n\nI felt Linda slide her pussy off my cock. I waited, then felt Diane slid her mouth down onto my cock. I had Diane in a nice 69, and she started working her mouth on my cock.\n\n\"You like that, Diane?\" Linda asked. She slid her mouth off my cock.\n\n\"Occasionally,\" she said and laughed.\n\nDiane slid her mouth back on my cock and went to work. I was tonguing her clit as she worked her mouth up and down. It surprised me a few minutes later when I felt the end of my cock sliding down her throat.\n\n\"Suck it, Diane!\" Linda exclaimed.\n\nDiane was doing an excellent job of deep throating me with Linda's encouragement. She moaned on my cock as I worked on her pussy.\n\n\"I think you like cock!\" I heard Linda say. Then I heard her moan.\n\nDiane and I kept going on each other. I would hear Linda moaning occasionally. Diane tensed up and jerk.\n\n\"Ahhhh!! Fuck, yes!!\" She screamed, and I got a huge mouthful of her juices.\n\nI placed my mouth over her pussy and sucked it all up.\n\n\"Oh, yes!! Perfect!!\" Diane screamed.\n\nShe slid her mouth all the way down on my cock and went to work hard.\n\n\"Ahhhhhh!!\" I heard come from Linda.\n\nDiane was working her mouth up and down on my cock fast. I thrust up and started filling her mouth full of cum.\n\n\"Emmmmmm!!\"\n\nI pumped cum into her mouth for a long time. She slid her mouth off my cock and pushed herself up. I looked down, and Linda was lying back, fingering her pussy. Diane crawled over to her and placed her mouth over Linda's.\n\n\"Emmmmmm,\" came from Linda and Diane let her have a mouthful of cum.\n\nLinda was still fingering her pussy as she took the cum from Diane. Diane pulled her mouth away and moved down and placed it over Linda's pussy.\n\n\"Ahhhhhhhhh...\" came from Linda.\n\nLinda came in a huge orgasm after about five minutes. Diane sat up and lay back next to me as Linda lay on her back.\n\n\"That was fun,\" Diane said.\n\nThe three of us lay there for a while. Linda sat up and lay next to Diane.\n\n\"Did you enjoy that?\" Linda asked Diane.\n\n\"It was fun.\"\n\n\"Diane, when was the last time you had a cock in you?\" Linda asked.\n\n\"Junior year of college.\"\n\n\"What happened?\"\n\n\"I was seeing a guy on and off through college. My junior year, he talked me into a threesome with another girl. I discovered I enjoyed the other woman more than I did him. I left him and moved in with her until I graduated.\"\n\n\"You prefer women now?\"\n\n\"They are less hassle than men. Men have too many ego problems,\" Diane said. \"I find I enjoy the way a woman makes love.\"\n\n\"I know a guy that doesn't have ego problems,\" Linda said.\n\n\"It appears you do.\"\n\n\"Are you two ready for bed?\" I asked.\n\nThey were. We all got in the bed, and I turned the light off.\n\n******\n\nSunday morning, I woke up when I heard moaning. I found Diane sitting on Linda's mouth. I turned and watched until Diane got off.\n\n\"Emmmmm...that is so good in the morning,\" Diane said as she moved off Linda's mouth and lay on her other side.\n\n\"Rachel and I are finding we like starting our mornings like this,\" Linda said. \"But, a nice fuck in the morning is good too.\"\n\nLinda sat up and moved down and started sucking my hard cock. Diane lay there and watched her for a while.\n\n\"Diane, maybe you should try starting your day with a nice fuck,\" Linda said as she stroked my cock and looked at Diane.\n\n\"Maybe I should.\"\n\nLinda smiled at her then at me and moved. Diane moved on the bed and straddled my hips.\n\n\"Linda, you are going to ruin my reputation!\" Diane said as she laughed.\n\n\"I won't tell!\"\n\nDiane stroked my cock for a minute, then got on her knees and moved over it. She moved the end between her pussy lips.\n\n\"It's not like I don't enjoy a big vibrator too!\"\n\nDiane began to push down as I watched the end of my cock slide into her. She worked up and down for a few minutes until she had all of my cock in her as she sat.\n\n\"The problem with guys is that they think they know what a woman wants,\" Diane said.\n\n\"Oh, Diane, he does know what you want.\"\n\n\"I wish a guy would just let me fuck his cock,\" Diane said.\n\n\"Go ahead,\" Linda said. \"If that is what you want, that is what you can do.\"\n\nDiane smiled at me then slowly started working her pussy. Linda sat back next to me and watched.\n\nDiane was having fun just working her pussy on my cock.\n\n\"Sometimes, all I want to do is fuck his big cock...and he is fine with that,\" Linda told her.\n\nDiane smiled and sped up. Linda and I watched her fuck my cock.\n\n\"Oh, you are nice and big! But you don't vibrate!\" Diane said and laughed.\n\n\"Maybe not,\" I said as I placed my hands on her thighs.\n\nShe kept working her pussy as I felt for it. It took me a few minutes, but I found her energy. It was reserved, but it was there.\n\n\"I may not vibrate, but I think you will find my cock very enjoyable.\"\n\nI slowly connected with her and began to push. I took my time and let it build slowly until Diane started moaning.\n\n\"Emmmmm, you do feel good.\"\n\nLinda had pulled her legs up and spread them and was working her fingers in her pussy as she watched. I decided I would experiment like Dawn does. I took one hand off Diane's thigh and placed it on Linda's It was easy for me to connect with Linda.\n\n\"Emmmmmm...\" came from Diane as she worked her pussy harder.\n\n\"Fuck his big cock!\" Linda exclaimed as she worked her fingers in her pussy faster.\n\nI pushed into both of them as they worked. Diane moaned and groaned for a long time, and so did Linda.\n\n\"Ahhhhh! This is so hot!\" Linda let out.\n\n\"Oh, fuck!\" Came from Diane.\n\nI pushed more into both of them for a few minutes.\n\n\"Oh, fuck!!\" Diane screamed. She started jamming her pussy onto my cock hard.\n\nLinda was working her fingers in her pussy faster.\n\n\"Oh, fuck!! I'm coming!!\" Diane screamed.\n\nI pushed harder.\n\n\"Ahhhhhh!! I'm coming!!\" Diane jerked on my cock as she shook with a huge orgasm. She kept screaming and coming hard.\n\n\"Ohhhhhhhh...fuck!!\" Linda screamed and started humping her hips up.\n\nl lay there and enjoyed the two of them coming hard.\n\n\"Ahhhhh!! I'm coming again!!\" Diane screamed.\n\nShe was thrusting her pussy onto my cock hard and fast now. She screamed several more times as she was rocked by another huge orgasm. She finally stopping working her pussy and sat.\n\n\"Oh...fuck...\" Diane moaned. \"I enjoyed that more than I thought I would.\"\n\nI looked past Diane and Dawn was leaning against the doorframe watching and smiling. Linda was leaning against the headboard next to me, panting.\n\n\"He does have that effect on women,\" Dawn said as she walked to the bed.\n\n\"Dawn...you have one special guy here,\" Diane said.\n\n\"Yes, I do. Diane, my husband always knows what a woman wants. Don't ever doubt him.\"\n\n\"I have never met a guy that would just let me fuck his cock...I mean without trying to jam it into me.\"\n\n\"You have never fucked my husband,\" Dawn said. \"I would suggest that the next time you let him fuck you.\"\n\n\"I may have too. James, that was so nice.\"\n\n\"You are welcome,\" I said.\n\nDiane lifted her pussy off my cock and sat on the bed.\n\n\"They are starting breakfast,\" Dawn said.\n\n\"I'm starved!\" Diane said.\n\nDiane got off the bed and went to the bathroom.\n\n\"Did you talk her into that?\" Dawn asked me.\n\n\"Linda did.\" Dawn smiled at me.\n\n\"Linda, you are not finished,\" Dawn said. \"Get up there.\"\n\nLinda slowly moved and straddled my cock.\n\n\"Did you and Olivia kill Allen?\" I asked.\n\n\"He is still asleep.\"\n\nLinda slid her pussy down onto my cock and wiggled her hips. Dawn got on the bed and straddled my legs behind Linda. She reached around her and began rubbing her tits.\n\n\"I'm going down for breakfast,\" Diane said and left the bedroom.\n\nLinda worked her pussy on my cock for a while. I was watching Dawn kissing her neck and shoulders while she rubbed her tits. Linda began to wiggle her hips and work her pussy faster.\n\n\"Emmmmmm, this feels so good,\" Linda moaned.\n\n\"I know it does,\" Dawn said.\n\nDawn slid her hands down and placed one on top of each of Linda's thighs...then I felt Dawn push hard.\n\n\"Ahhhhhhh! Fuck! What are you doing!\" Linda moaned.\n\n\"Just keep fucking him,\" Dawn told her.\n\nLinda continued to moan as she worked her hips harder.\n\n\"Ahhhhhhhh! Yes! Oh, yes!\"\n\nI could feel Dawn flooding Linda with her love and pushing arousal into her. Linda's nipples were filling with blood as she worked.\n\n\"Oh, Dawn, I love you...\"\n\n\"I love you too, Linda.\"\n\nLinda was working her hips faster and faster. I could feel her energy building and building to a huge orgasm. I placed both of my hands on top of Dawn's and pushed.\n\n\"Oh...my...god!!\" Linda screamed.\n\nLinda was on the edge of a huge orgasm and was fucking my cock hard.\n\n\"Ohhhh!! Ohhhh!! Ohhhhh!! I'm going to come!!\"\n\nI felt Linda's energy rise to a peak...then I felt Dawn hold her there.\n\n\"Ahhhhhhh!!\" Linda was screaming.\n\nI added my energy to Dawn's and held Linda and the top of her orgasm. Linda started shaking and jerking as we held her.\n\n\"Ahhhhhhhhh!! Fuuuuuuuuuck!!\"\n\nI was watching Linda. Her face was grimacing as she screamed.\n\n\"Ahhhhhhhhhhhhhhhhhhhhh...\" came out in one long moan.\n\nDawn held Linda for a long time as she shook. I was afraid Linda would pass out. I saw Dawn smile at me...then she hit me with a huge burst of energy.\n\n\"Ahhhhhhhh!!\" I screamed and thought I heard Linda scream too.\n\nMy body erupted in a huge orgasm. My muscles were contracting over and over as my cock exploded in Linda. I felt my cum gushing into Linda's pussy.\n\n\"Ahhhhhhh!!\" I screamed...we screamed again.\n\nLinda kept coming, and I kept coming.\n\nI could feel myself on the verge of passing out after several minutes.\n\n\"No, you don't,\" Dawn said, then I felt a burst of energy from her.\n\nI knew Dawn had pushed Linda and me to keep us from passing out.\n\nI was struggling to breathe, and so was Linda as she sat slumped on my cock. Dawn was rubbing Linda's thighs now. The three of us sat for a long time.\n\n\"Ohhhhh...\" Linda moaned. I was just lying there, completely spent.\n\n\"You two come eat when you are ready,\" Dawn said as she climbed off the bed and left the bedroom.\n\n\"James...\"\n\nLinda sort of fell onto her side and lay.\n\n\"James...what happened...\"\n\n\"I think it is time Dawn explained some more things to you...\"\n\n\"I...I felt that orgasm...in my brain...\"\n\n\"Dawn calls it a mind fuck.\"\n\n\"It was. What did she do?\"\n\n\"We will need to explain it to you.\"\n\nLinda managed to roll on her side and look at me.\n\n\"Do you two fuck like that?\"\n\n\"Yes.\"\n\n\"Oh, my, god. Incredible doesn't describe what happened.\"\n\n\"No, it doesn't.\"\n\n\"She did that to me?\"\n\n\"Well, we did that to you.\"\n\nLinda moved up next to me and wrapped her arm around me and laid her head on my chest.\n\n\"How?\"\n\n\"We don't really know,\" I replied.\n\n\"I should be exhausted...but I'm not. My body is still tingling...but...I feel incredible.\"\n\n\"Linda, that is something that only happens between Dawn and me, and now with the girls.\"\n\n\"Why just them?\"\n\n\"Because we love each other...and because we are a part of each other.\"\n\n\"You are going to have to explain.\"\n\n\"Later. Let's eat.\"\n\n\"I need to shower. I have a lot fo cum running out of me.\"\n\nLinda and I got up and went and showered.\n\n*****\n\nLinda and I were walking down the stairs. Everyone was eating breakfast. Before we got to the bottom of the stairs, Amy and Samantha ran to Linda and wrapped their arms around her and held her.\n\n\"We love you,\" they said.\n\n\"I love you too,\" Linda replied.\n\nThey held her for a minute then walked her to the kitchen. Linda and I got some food and sat next to Rachel.\n\n\"I don't know what happened, but we all heard you screaming,\" Rachel said to Linda. Linda giggled.\n\n\"Later,\" she said.\n\nAfter we had all finished eating, everyone was in the den talking.\n\n\"I guess I need to ask Ian and Sondra, and Beth and Allen, how their weekend is going?\" I said.\n\n\"Oh, it is going fine,\" Sondra said. \"You know we are good.\"\n\n\"Beth?\"\n\n\"Well, it's new for us, but so far, so good.\"\n\n\"Beth, were you okay with Allen spending the night with two other women and without you?\" Dawn asked.\n\n\"I'm sure he had a good time. I did!\"\n\n\"But you are okay with it?\"\n\n\"We are good. We had a threesome once and had always wanted to do it again. When Ian and Sondra asked us to join them, we were very happy. This has been a blast!\"\n\n\"Allen, are you good with the guys fucking your wife?\" Dawn asked.\n\n\"I am. She is enjoying it.\"\n\n\"Good. Brenda, Sherri, and Lori, are you three having a good time?\"\n\n\"Oh, yes!\" Brenda said. Sherri and Lori added a yes.\n\nWe all sat and talked and laughed until about noon. Everyone had gotten up late. It seemed everyone had had all the sex they needed for now.\n\n\"I need to head out. I have to finish my project for next week,\" Lori said.\n\n\"Lori, I think you need to run by my office next week. I have something for you,\" Ian said.\n\n\"I'm sure you do!\"\n\n\"We are off to France Wednesday,\" Sherri said.\n\nBy 2:00, everyone had left but Linda and Rachel. We had a long talk with the two of them. After we had some sandwiches, Linda and Rachel left.\n\nWe all went to bed about 8:00 and made love to each other.\n\n*****\n\nMonday morning, Dawn was up early and off to the school. I found Amy and Samantha in the kitchen later eating.\n\n\"You better buy us something really nice,\" Samantha said.\n\n\"For what?\"\n\n\"To go in these piercings!\"\n\n\"Oh...that.:\n\n\"Yes, that!\"\n\n\"You don't have to do it.\"\n\n\"She is going to do it,\" Amy said.\n\nI talked to them until they went upstairs to get dressed to leave for school.\n\nI was cleaning up the house after the long weekend while they were all out of the house. Dawn came back in about 1:00.\n\n\"Don't let me disturb you...keep cleaning!\" Dawn said.\n\n\"Very funny.\"\n\n\"I have to run to the drug store. John called in some antibiotics he wants us to take. I'll be back.\"\n\nShe left again.\n\nAbout 2:00, Amy and Samantha came in. They were helping me when Dawn came back about 3:00.\n\n\"Here, follow the directions,\" Dawn said handing each of them a bag,\n\n\"What is it?\" Amy asked.\n\n\"John wants us to take some antibiotics. Starting now.\"\n\nThey went to the kitchen and took the pills.\n\nWe ate early because John and Carol were supposed to be there about 7:00. They arrived about 7:15.\n\n\"John, do you know what you are doing?\" Dawn asked.\n\n\"I looked it up on the internet.\"\n\n\"John!\"\n\n\"Yes, I know what I am doing. Here, go shower,\" John said, handing Dawn some disinfecting soap.\n\nThe three of them ran up the stairs.\n\n\"Carol, are you going to get pierced?\" I asked.\n\n\"Hell, no!\"\n\nWe talked until they all came down in robes.\n\n\"Where do you want us?\" Dawn asked.\n\n\"I guess on the edge of the bed in there.\"\n\nWe all went into the bedroom.\n\n\"Who's first?\" John asked.\n\n\"Dawn!\" Samantha blurted out. \"It was her idea.\"\n\nJohn put some sterile pads on the edge of the bed and told Dawn to sit.\n\n\"Did you take the antibiotics?\" He asked.\n\n\"Yes.\"\n\n\"I'll do your belly button first.\"\n\nWe watched as John cleaned Dawn's stomach, then took a big needle and pierced her belly button, and then put a stud in it.\n\n\"See, that didn't hurt,\" John said.\n\n\"What didn't hurt?\" Dawn asked.\n\n\"The piercing.\"\n\n\"Oh, I hypnotized myself. I didn't feel it,\" Dawn said. smiling.\n\n\"Wait a minute! I can't do that!\" Samantha exclaimed. \"James, hypnotize me!\"\n\n\"Just fucking with you, Sam,\" Dawn said. \"It didn't hurt...much.\"\n\n\"Ready?\" John asked.\n\n\"I guess.\"\n\nDawn spread her legs, and John cleaned.\n\n\"That's cold!\" Dawn said.\n\n\"Benzocaine. Give it a few minutes.\"",
        "\"Carol, I think you should join them,\" I teased.\n\n\"My stomach...maybe.\"\n\nSamantha and Amy were looking at Dawn's stomach for a few minutes.\n\n\"Ready?\"\n\n\"Sure. Do it.\"\n\nSamantha and Amy turned their heads. John pulled on the skin above Dawn's clit for a minute.\n\n\"Oh, fuck!! That hurts!!\" Dawn screamed.\n\nAmy and Samantha cringed.\n\n\"Just fucking with you two!\"\n\n\"Dawn! Stop!\" They exclaimed.\n\nJohn pulled and looked. Then he ran the needle through the skin. Even I cringed. He put the stud in and cleaned her off.\n\n\"Keep that clean. No sex for six weeks.\"\n\n\"You better send Carol over often then,\" Dawn said.\n\nAmy and Samantha argued about who was next. Amy had to go next.\n\nBy 9:00, everything was over. Samantha was moaning about it burning.\n\n\"Make sure and take the antibiotics,\" John said.\n\n\"We will.\"\n\n\"If anything hurts or gets red, come and see me.\"\n\n\"I am a nurse, John,\" Dawn said.\n\n\"Just keep an eye on everything.\"\n\n\"Thanks, John.\"\n\n\"No problem.\"\n\n\"John, you just wanted to play with their pussies,\" I said, and they all laughed.\n\nI got everyone a glass of wine, and we sat in the den and talked.\n\n\"James, can you go six weeks without sex?\" Carol asked.\n\n\"I guess I will have too.\"\n\n\"Call me, and I will come over!\"Carol said and laughed.\n\n\"Hey, Carol! Can you come over!\" I exclaimed.\n\nCarol smiled at me.\n\n\"I guess I can!\"\n\nCarol stood and moved to the floor in front of me. She grabbed the top of my sweats and pulled them down and off. My cock was hard from watching John play with the girls. Carol leaned over and started sucking my cock. We all watched her for a few minutes. She stood and pushed her pants and underwear down then straddled my lap.\n\n\"I'm here,\" she said.\n\nI grabbed my cock and moved the end between her dripping lips. Carol eased down. Once she was sitting on my cock, I helped her take off her top and bra. I grabbed her tits and squeezed them while she started working her pussy.\n\n\"You will need to come over every two days,\" I told her. She laughed and worked her pussy.\n\nThe rest of them talked while Carol and I fucked. I sucked on her nipples for a long time until she came.\n\n\"Oh, yes!\"\n\nCarol kept working her pussy. I grabbed her ass and helped her work it. We kept going until she came again in a huge orgasm and I filled her pussy full of cum.\n\n\"Emmm, I'll be back Wednesday!\" Carol said and laughed.\n\nCarol climbed off my cock and went and cleaned up.\n\nThey left about 11:00. Dawn checked the girls and sent them to bed.\n\n*****\n\n\"Tuesday morning, I was cooking breakfast for everyone. Amy and Samantha came down wearing skirts.\n\n\"Any underwear?\" I asked.\n\n\"Fuck, no,\" Amy said.\n\nDawn came down naked a few minutes later. After they were all fed, the girls headed off to school.\n\n\"I'll be upstairs,\" Dawn said and left me to clean up.\n\nI went upstairs later and found Dawn in her lab.\n\n\"What are you cooking up?\"\n\n\"Something that will speed the healing.\"\n\n\"Are you sure it will be okay to use?\" I asked. \n\nDawn looked at me with an eat shit look. I left her alone to work.\n\nAfter I had showered and shaved, she was still working.\n\nI decided I better leave Dawn to her work.\n\nShe came down about 10:30 while I was cleaning up.\n\n\"Did you finish?\" I asked.\n\n\"Yes,\" she said, holding up three bottles. \"I'll make to make more in a week, it only last that long.\"\n\n\"Let the girls watch you make it next time.\"\n\n\"I will.\"\n\n\"Sherri, Brenda, and Katrina are supposed to be here about 3:00. They have to pick up everything for their trip.\"\n\n\"The girls will be home by then.\"\n\nDawn and I were finishing a sandwich about 11:30 when I heard something come through the gate. I went to the front door, and it was Katrina pulling up.\n\n\"You're early,\" I said as she got out of the car.\n\n\"It's 11:30. I'm sure we will be finished fucking by 3:00,\" she said and walked to me.\n\nI kissed Katrina, and we went in the house.\n\n\"Is Joe okay with you being gone for three weeks or so?\" I asked.\n\n\"Well...he did ask me to ask if it was okay if he came over and fucked Dawn while I was gone.\"\n\n\"Afraid not.\"\n\n\"Why?\"\n\n\"Ask Dawn.\"\n\n\"Hey, Dawn. Joe wanted to know if he could come and fuck you while I am gone. James said no?\"\n\n\"Afraid not.\" Katrina walked up to Dawn as she sat at the bar naked.\n\n\"Why?\"\n\n\"Look.\" Dawn spread her legs and let Katrina look.\n\n\"Ouch!\"\n\n\"I got pierced.\"\n\n\"Why?\"\n\n\"You have seen Linda's. I like it. No sex for a while.\"\n\n\"I'll tell Joe to call your girls.\"\n\n\"They got pierced too.\"\n\n\"Ouch! But, Linda does look sexy.\"\n\n\"John did it.\"\n\n\"Is he in the piercing business?\"\n\n\"No, but he knows what to do.\"\n\n\"Damn, if Joe sees that, he will want me to do it.\"\n\n\"You could at least get your belly button done.\"\n\n\"Maybe. You let me know how much it hurts first. Where are the girls?\"\n\n\"They are at school.\"\n\n\"Well, your husband owes me for this little trip.\"\n\nKatrina started taking her clothes off and walking toward the bedroom downstairs. I followed her.\n\n\"Are you going to be sampling the locals while you are there?\" I asked.\n\n\"I may. The three of us could treat some guy to a nice time. I think Sherri and Brenda are planning on fucking those two brothers.\"\n\n\"Keep an eye on them for me.\"\n\n\"I will.\"\n\nKatrina laid on the bed naked and pulled her legs up and spread them. I got between them and kissed my way up to her pussy.\n\n*****\n\nWhen Sherri and Brenda came in just before 3:00. Katrina and I were sitting in the den with Dawn naked.\n\n\"James, don't you ever get enough?\" Brenda asked.\n\n\"Never.\"\n\n\"Did you do it?\" Sherri asked Dawn.\n\n\"Oh, yes.\"\n\nThey looked and talked about the new piercings. Sherri wanted to get her belly button done. I took Sherri and Brenda to the study I was finishing up with them about 4:00. Dawn was in the den, talking to Katrina.\n\n\"You two stay out of trouble,\" I told them.\n\n\"We'll try!\" Sherri exclaimed.\n\n\"We have a long list of things to buy and places to go,\" Brenda said.\n\n\"Take your computers so I can keep up with you. Call if you need anything. What time is your flight?\"\n\n\"6:00 in the morning.\"\n\n\"Okay. You two are ready to get things going. I expect you to do whatever you need to do.\"\n\n\"We will,\" Sherri said.\n\nThey gathered up everything, and I followed them out of my study. Katrina was still talking to Dawn. I followed Sherri and Brenda to their cars, and they left.\n\n\"Katrina, thanks for helping them,\" I said as I walked back into the house.\n\n\"No problem. I think they are going to work out great for you.\"\n\n\"Make sure you get enough lingerie for me to take pictures of you since we are putting that off.\"\n\n\"I will. It looks like we should be back right after Thanksgiving,\" Katrina said.\n\n\"I hope it is still a little warm. You let me know if you need anything,\" I told her.\n\n\"I will. I have to go and finish packing.\" Katrina said. \"Joe will be disappointed you can't have sex.\"\n\n\"Tell him I'll make it up to him.\"\n\n\"Just don't talk him into asking me to do that.\"\n\nKatrina left, and I got Dawn a glass of wine.\n\n\"I talked to my mom today about Thanksgiving,\" Dawn said.\n\n\"And...\"\n\n\"She told me that they are taking a long cruise around Europe after Thanksgiving.\"\n\n\"Great.\"\n\n\"Well...\"\n\n\"Well, what?\" I asked.\n\n\"They want to come Monday and stay since they are flying out from here the Monday after.\"\n\n\"That's okay.\" Dawn was quiet. \"But?\"\n\n\"Mom sprung something on me...you remember them mentioning a lady named Amelia last year?\"\n\n\"Oh, yes. You blew a fuse.\"\n\n\"Mom told me about her.\"\n\n\"Good.\"\n\n\"She is going with them on the cruise.\"\n\n\"Good for them.\"\n\n\"She is coming with them...to stay with us.\"\n\n\"So?\"\n\n\"Mom seems to think that since we have the girls now...it is okay for her and dad to have Amelia.\"\n\n\"It is. What's your point?\"\n\nDawn didn't say anything.\n\n\"Dawn...I hope you are not going where I think you are going.\"\n\n\"I'm not.\"\n\n\"Yes, you are.\"\n\n\"I don't guess I am ready for this,\" Dawn said.\n\n\"You better be!\"\n\n\"I know!\"\n\n\"What did you tell your mom?\"\n\n\"I told her it was fine.\"\n\n\"I guess the apple didn't fall far from the tree!\"\n\n\"James!\"\n\n\"Honey, you better be fine with this. And you better not be defensive about it, especially around the girls.\"\n\n\"I guess.\"\n\nDawn was quiet as she worked around the house until 5:00 when Amy came in. She asked Amy about school until Samantha came in about 5:30. The three of them were in the kitchen talking, so I went there.\n\n\"Did Dawn tell you?\" I asked.\n\n\"Tell us what?\" Samantha replied.\n\n\"About her parents coming for Thanksgiving.\"\n\n\"That's great!\"\n\nI left them and went back to the study.\n\nDawn came in later.\n\n\"They thought it was funny,\" Dawn said as she sat on my sofa.\n\n\"It is.\"\n\n\"No, it's not!\"\n\nI looked up at Dawn.\n\n\"Do I need to tell you how wrong you are?\" I asked.\n\n\"No...\"\n\n\"Then what is the problem?\"\n\n\"It's my parents!\"\n\n\"So!\"\n\n\"What if it was your parents!\"\n\n\"I would be okay with it,\" I said.\n\n\"What if it was the other way around, and some other guy was fucking your mom!\"\n\n\"As long as dad was okay with it, and she was having a good time...cool.\"\n\n\"Maybe I will invite someone over to fuck your mom!\"\n\n\"Maybe you can get your dad to do it.\"\n\n\"James!\" Dawn exclaimed at me. Then she smiled and laughed. \"That would be interesting.\"\n\n\"Honey, you can't get crazy about this. And, I expect you to let the three of them sleep together here.\"\n\n\"I guess.\"\n\n\"Are you going to be okay?\"\n\n\"Yes. I have to be.\"\n\n\"Yes, you do.\"\n\n\"I still may invite someone over to fuck your mom,\" Dawn said as she left the study.\n\n\"Get someone for dad!\" I yelled at her as she went out the door. I laughed at her.\n\n*****\n\nWe were all eating, and the girls were naked now.\n\n\"How are your piercings?\" I asked.\n\n\"A little sore,\" Amy said.\n\n\"I have something to put on it to speed the healing,\" Dawn said.\n\n\"What?\" Samatha asked.\n\n\"Something I made.\"\n\n\"Is it okay to use?\"\n\n\"Sam!\" Dawn exclaimed. \"Yes! It has worked for over a thousand years!\"\n\n\"Great.\"\n\n\"Dawn, are you okay with your mom and dad and this lady?\" Amy asked.\n\n\"Sure. I'm just a little surprised.\"\n\n\"From what James has told us, I would have thought it would be his parents,\" Samantha said.\n\n\"I wouldn't be surprised,\" I said.\n\n\"Would you be cool with your mom fucking some other guy?\" Samantha asked,\n\n\"You know I would.\"\n\n\"Maybe I'll ask her if she has,\" Samantha said, teasing me.\n\n\"Go ahead.\"\n\nAfter dinner, Dawn was showing them how to put on the cream she made.\n\n\"What's in it?\" Amy asked.\n\n\"Eye of Newt,\" Dawn replied. \"Use this for six days, then I will have to make more.\"\n\n\"I want to watch,\" Samantha said.\n\n\"Me too,\" Amy added.\n\n\"Will we be ready to have sex at Thanksgiving?\" Samantha asked.\n\n\"I hope so. Why?\" Dawn asked.\n\n\"I was wanting to fuck Brian again!\" Samantha said and started laughing. Dawn shook her head.\n\n\"Don't forget the antibiotics,\" Dawn reminded them.\n\nThe girls went upstairs to finish some work for school while Dawn and I cleaned up.\n\n\"James...I know both of your parents are pretty open sexually. Do you think they may be swinging?\"\n\n\"I wouldn't be surprised, but I don't think they would be swinging.\"\n\n\"You think they have some close friends?\"\n\n\"It wouldn't surprise me.\"\n\n\"Will you ask them?\"\n\n\"If it comes up.\"\n\nThe rest of the week went by slowly since I wasn't having sex. Thursday night, the genealogist called and asked if he could come by Friday evening. We invited him for dinner.\n\n*****\n\nEveryone was home Friday until Samantha and Dawn left to see the advisor. Amy and I ate lunch together and sat and talked until Dawn and Samantha came back.\n\n\"What did they say?\" Amy asked her sister.\n\n\"I won't have too many changes.\"\n\n\"He said with her grades, she will be ready next year,\" Dawn added.\n\n\"Good for you Samantha,\" I said.\n\n\"Tell him what else he said,\" Dawn replied.\n\n\"He said that I would be perfect for med school.\"\n\n\"Told you,\" Amy added.\n\n\"I hope so.\"\n\n\"Honey, you are going to make a very good doctor. We all know you can do it, and you need to believe you can do it,\" I said.\n\n\"I asked if she could attend the cadaver lab this summer, and he said yes,\" Dawn said.\n\n\"Don't forget you are going to Canada in August.\"\n\n\"It is an accelerated class in late June and all of July. It's three days a week.\" Samantha said.\n\nThat afternoon the girls were all preparing a dinner for Dr. Gordon. We had invited Linda and Rachel to join us for dinner. They were all curious about what he had found.\n\nBy 5:30, they were wrapping up the dinner preparations because Dr. Gordon was supposed to be there at 6:00. We all went upstairs to get ready.\n\n\"This should be interesting,\" Dawn said as she got dressed.\n\n\"I hope he found out what is with the girls.\"\n\nWe were all back downstairs by 6:00, and Linda and Rachel had just pulled up. I let them in, and Dr. Gordon buzzed me from the gate, and I let him in. Everyone went out the front door and waited on him.\n\n\"Good evening,\" he said as he got out of his car.\n\n\"Hello, Dr. Gordon,\" I said.\n\nHe went to the trunk of the car and opened it and started taking out some tubes. We went and helped him. Once we had the paperwork gathered up, we all went inside.\n\n\"Let's take everything to the big table in the dining room,\" Dawn said.\n\nOnce we deposited everything, I got Dr. Gordon a drink, and we went to the den.\n\n\"You all are going to be very surprised,\" he said.\n\n\"What did you find out?\" Amy asked.\n\n\"After we eat,\" Dawn said.\n\n\"Mrs. Smith, I would sure like to look at your ancestors book again. Do you know how old it is?\"\n\n\"Very old. It dates back to when the Cherokee developed a written language around 1800. My ancestors recorded everything they had committed to memory as children.\"\n\n\"How many generations does it go back?\"\n\n\"I think about fifty or so.\"\n\n\"Wow, that would date back to around 500 A.D.\"\n\n\"I have memorized back 15 generations.\"\n\n\"That would be back to about the mid-1400s.\"\n\n\"I only recently learned about the ones prior to that,\" Dawn said.\n\n\"Those are the ones you think makes you related to Ms. Williams.\"\n\n\"That should be it.\"\n\n\"Dr. Gordon, are we related?\" Linda asked.\n\n\"Yes, you are.\"\n\n\"Let's eat,\" Dawn said.\n\nIt took us about an hour to eat. Everyone was asking Dr. Gordon questions, but he told them it would make more sense once they saw the ancestor tree. \n\nAfter we finished, we all went to the dining room. Dr. Gordon pulled a large roll of paper out of one of the tubes. He rolled it out, and it was covered in writing and lines.\n\n\"Ms. Williams, since Mrs. Smith knows her ancestors, let's start with yours. I was told of the story of a James and Linda Smith dying in a frozen river. Through a lot of research and many old church records, I found out that was true and a lot more.\n\n\"If you look all the way up here, this is the James Isaiah Smith, Jr., that left the tribe. He later married a lady named Isabelle Watson. They had two children. One boy, they named James Thomas, and a girl named Annette Caroline. This is where it gets interesting.\n\nJames Thomas later married Linda Charolette Willaims. They are the ones that fell through the ice. But they had one child, James Rutherford Smith. From the records, it appears he was about 18 months old when they fell through the ice.\"\n\n\"What happened to him?\" I asked.\n\n\"He was adopted but kept his name. Since he was one-fourth Cherokee, the records are harder to come by, but the family that adopted him had him baptized, so there are church records. James, this is your 14th great-grandfather.\"\n\n\"How are we related by blood?\" Linda asked.\n\n\"You are. Let's go back to the girl, Annette Caroline Smith. This was the 1400's, and there were a limited number of settlers. Ms. Williams, your family, is an old family. All the way back to the original settlers. Annette Caroline Smith married a man named Earl Mathew Williams. He was the uncle of Linda Charolette Williams. Earl and Linda had six children. The oldest son was named Mathew Charles Williams Mathew Charles Williams is your 12th great-grandfather.\"\n\n\"What?\"\n\n\"It was a small world then. Eleven generations later and many children and marriages, you are descended directly from Mathew Charles Williams, and his mother, Annette Caroline Smith.\"\n\n\"So, James and I have the same great grandmother as Dawn?\"\n\n\"Yes.\"\n\n\"That is what my great-grandparents meant when they said our blood runs together,\" Dawn said.\n\n\"So, way back, I am part Cherokee?\" Linda asked.\n\n\"A little,\" Dr. Gordon replied.\n\n\"This is wild,\" Linda said. \"But what about James?\"\n\n\"Let's go back up to James Rutherford Smith. If we trace this line here, we come to his father.\"\n\nWe all were a little speechless.\n\n\"That is amazing,\" Linda said.\n\n\"It explains a lot,\" Dawn said.\n\n\"Dawn, is that why you and Linda have such a connection?\" Samantha asked.\n\n\"What do you mean?\" Dr. Gordon asked.\n\n\"Oh...we have always felt very close to each other,\" Dawn said.\n\n\"What about us?\" Amy asked.\n\n\"Oh, you two are very interesting. Let's go back ten generations on James' line. If you look here, these great-grandparents had five children. Remember this child here, Thomas Byron Smith.\"\n\nDr. Gordon grabbed another roll of paper and unrolled it. It was covered in names and lines.\n\n\"This starts with Thomas Byron Smith. As you can see, there are many children, aunts, uncles, and cousins. Here, in 1855, a 6th great-niece of Thomas Byron Smith named Deborah Lauren Smith married John Connor Early. Now what makes this interesting is that he is your 6th great-grandfather. Early is a very old Irish name. But John Connor is the great-grandson of Paddy Early, from early Ireland. This is the information I had to get from Ireland.\"\n\n\"So, we are related to James?\" Amy asked.\n\n\"In a distant way. But Paddy Early is the son of Biddy Early. Biddy Early was Bridget Ellen Connors. She changed her name to Early, which is from Connor. If you two don't know who Biddy Early was, you can research her. But Biddy Early was considered a witch by the Catholic Church in Ireland.\"\n\n\"What?\" Amy and Samantha said together.\n\n\"I have another document that tells you all about Biddy Early. She was an intuitive, and the church wanted to try her as a witch. But she had ways of helping the people that knew her, and no one would testify against her. Her only child was a son, Paddy Early. You two have a very old and interesting name.\"\n\n\"That explains a lot!\" Dawn said, laughing. \"You two are descended from a witch!\" Dawn kept laughing.\n\nDr. Gordon told Samantha and Amy more about their ancestor and pulled out another roll of paper that had Biddy Early on it.\n\n\"Dawn, how did your great-grandfather know all this?\" Rachel asked.\n\n\"He knows a lot of things.\"\n\n\"He knew all of you were related?\" Dr. Gordon asked.\n\n\"He told us all our blood ran together.\"\n\nDr. Gordon stayed until almost 11:00, going over a lot of details. It was hard to believe that Linda was related to all of us, and Samantha and Amy were related to all of us. Somewhat distance, but our blood did run together."
    ],
    "authorname": "drmac100",
    "tags": [
        "novel",
        "novella"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/life-after-the-lottery-ch-66"
}
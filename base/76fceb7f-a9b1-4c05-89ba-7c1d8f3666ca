{
    "title": "It Started with a Unicorn",
    "pages": [
        "<center>This is my entry for the . It could, I suppose, have been posted under Lesbian, for such a tale it is. It could make a claim to Romance. But let's leave it here, where it was first conceived. Please enjoy. </center>\n\n<center>+</center>\n\n<center>I love all delicate things - Sappho</center>\n\nThe old-fashioned brass shop bell swung and rang over the opening door. I looked up from my phone as the cool air entered. Small costumed figures could be seen running around outside, shrieking happily in the gathering dusk.\n\nTwo figures entered the shop, an excited little girl clinging to the arm of a tall woman.\n\n\"Please, Mommy!  Please!&hairsp; It's so pretty!\"\n\nI sensed that the frustration and anger on the woman's face were not the girl's fault.\n\n\"The costume in the window. How much is it?\"\n\nI knew the one she meant; it had been on display for a month. It was very simple in one sense, but utterly adorable in another. A poofy iridescent skirt was matched with a headband carrying a unicorn horn and a pair of ears. All she would need were a white t-shirt and white leggings like those on the dummy to turn her into a pretty good unicorn -- and what little girl doesn't love unicorns?\n\n\"Pleeease!\"\n\nThe woman shrugged, gave in. \n\n\"OK, Gracie. We'll get it.\"\n\nThe little girl turned into about four feet of bouncing excitement. Her blonde hair whirled and danced as she jumped up and down.\n\n\"Just give me a minute, hon.\"\n\nThe child nodded, skipped off to look at a display of particularly ghoulish rubber masks at the other end of the store.\n\nAs if answering my unasked question, the woman spoke, her face white with anger.\n\n\"It's my turn to have Grace for the weekend. Her father was late dropping her off and &mdash; knowing it was Hallowe'en &mdash; hadn't even thought of getting her a costume. I could just kill&hairsp; the son of a...\"\n\nI smiled in sympathy. \"Get three other women on the jury and they'd never convict.\"\n\nShe smiled wryly. \"Yeah. So, how much?\"\n\n\"Well, I've got good news and bad news for you.\"\n\nShe flinched a little. Her eyebrows went up.\n\n\"The bad news is that it's completely out of stock.\" Her face fell.\n\n'The good news,\" and here I grinned, \"is that the store's closing in two minutes and I can give you a 10% discount if you're willing to take the one in the window. It looks like it would fit her.\" Indeed, the small mannequin was much the same size as the little girl.\n\nI saw her relax slightly.\n\n\"Aaaand,\"&hairsp; I said, my grin growing, \"I can throw in a 10% Single Mom discount on top of that.\"\n\nHer look of anger had been replaced with a slight smile.\n\n\"Really?\"\n\n\"Really. And I can offer you a special, one-time-only 10% 'most kick-ass purse I've seen in the store all night' discount.\" \n\nIt was, too. If it wasn't a knock-off, the woman was carrying about $2,000 worth of Gucci dreamware. A honey brown clutch, the leather looked soft enough to spread on a muffin.\n\nI was stretching it a little, but the store was&hairsp; about to shut for the night and Mr. Hanan had left to take his own kids out trick-or-treating. \n\n\"Don't stay late,\" he'd told me. \"And make sure you put the take in the safe for pickup next week.\"\n\nI'd nodded. I'd been working at Your Neighbourhood Costumes for three years. Mr. Hanan and I understood each other pretty well. I liked working for him; he was a good guy. Some people would have boosted prices on Hallowe'en to tighten the screws on people like this woman; Hanan wouldn't dream of it. \n\n\"It'd be nice to clear away some Hallowe'en inventory, too,\" he'd added, \"so feel free to give a bit of a discount if you need to.\" He was a really&hairsp; nice person.\n\nThe look of gratitude on the woman's face was pretty amazing.\n\n\"So,\" I finished, \"that'll be, um, $47.50.\"\n\nI could see her shoulders drop as relief set in. She pulled a platinum card out of the purse and handed it to me. Her smile of gratitude was pretty special.\n\n\"Hey, thanks! I didn't want to hit a big box store and had no idea where to go until Gracie saw this in the window as we drove by.\"\n\n\"Tell you what,\" I offered. \"The t-shirt and leggings on the dummy in the window? Nobody's ever worn them. If you promise to wash them and bring them back in the next couple of days, you won't even have to go home to get her dressed.\"\n\nHer expression shifted to one of astonishment. \"You'd do that?\"\n\n\"Hey,\" I smiled, \"we're your Neighborhood&hairsp; Costume Store -- and neighbors help each other out, right?\"\n\nI pointed at the dressing room door. \"I'll get the whites.\"\n\nI had a chance for a better look at the woman while the girl was changing. I guessed she was in her late 20s, maybe early 30s. She was taller than me by about five inches, with broad shoulders, a really nice figure and long, straight, glossy black hair. Dark eyes framed a happy nose above full and promising lips. \n\nPut it all together and she was just drop-dead gorgeous. I could see where the child had got her good looks.\n\nThe little unicorn was about six inches off the floor when she and her mother left. She turned and waved happily and I waved back before locking the door behind them and hitting the switch to kill the Open sign. This was a day I could feel good about.\n\n+\n\n\"You have a visitor,\" Mr. Hanan told me. I looked up from what I was doing to see his head sticking around the corner into the back room. He was smiling. \n\nMom from three days ago was standing on the other side of the counter, a bright smile on her face. Her makeup was perfect and her dark hair shone in the morning light. Her light wool suit was probably worth my monthly take-home and I was pretty sure today's purse today was a Dior.\n\nSomeday, Sydney. Someday...\n\n\"Hey! How'd the trick-or-treating go?\" I asked.\n\nShe held out a paper bag which turned out to hold the clothing I'd loaned her.\n\n\"It went really well, thanks to you. I wanted to return these and say thank you again in person.\"\n\nLooking at Mr. Hanan, she continued. \"This young lady kept Hallowe'en from turning into a complete disaster for my daughter. If you're the owner, you need to be paying her more!\"\n\nMr. Hanan looked at me, a little surprised. I'd told him that I'd sold the costume, but he'd told me to use my judgement, so I hadn't bothered him with details. He hadn't noticed the missing clothing, but it had worked out. He turned back to the woman.\n\n\"Thank you,\" he smiled. \"It's always nice to get good feedback.\"\n\n\"There'll be more on Facebook when I get a minute.\" She looked back to me.\n\n\"What's your name? Are you married? Do you have kids?\"\n\nHer manner was friendly, but direct, almost compelling.\n\n\"Um, Sydney and no and no. Why?\"\n\n\"I'm holding a Parents' Hallowe'en Hangover party this Saturday, Sydney. Would you like to come?\"\n\n\"A 'parents'...?\"\n\n\"Everybody likes a Hallowe'en party, but parents are pretty much chained to their kids on the night, so we -- I mean my friends and I -- take turns each year running a delayed Hallowe'en party for parents a week later.\n\n\"Mostly it's parents, but you wouldn't be the only single. Please say you'll come.\"\n\nIt was a sweet, gracious smile, but it set up a low tingling deep inside me. \n\nI thought a moment, mentally checking my schedule. \"Thank you. I'd be delighted. Is it a costume party?\"\n\n\"How else? But,\" she said, looking around, \"I doubt you'll have much of a problem with that.\" \n\n\"No. Um, what can I bring?\"\n\n\"Just yourself.\" She produced a thin gold fountain pen and a business card from her purse, wrote an address on the back. \"Seven o'clock. No husband, you said? Well, your boyfriend's invited.\"\n\n\"Not one of them, either,\" I said. \n\nShe shrugged lightly. \"Well, just so long as you come.\"\n\nShe reached over the counter, pulled me in for a quick, strong hug. \n\n\"Must run,\" she smiled. \"Thanks again.\"\n\nLooking at Mr. Hanan, she pointed at me. \"This one is special. Don't lose her.\" \n\nMr. Hanan watched her as she left. I could see his eyes follow her bottom as it swayed from side to side. His interest didn't offend me; I was watching, too. \n\nIt was a pretty impressive bottom.\n\nThe door had closed behind her before he actually looked at the card. He seemed a little stunned. He blinked, gazed owlishly at me. \n\n\"Sydney,\" he said softly, \"do you know who that was?\"\n\n\"Um, no? A nice customer?\"\n\nHe handed me the card and I could suddenly understand the look on his face. Shannon McFee was apparently Executive Vice-President for one of the larger brokerage firms in the country. Even I recognized the company name. \n\n\"I know her now that I've seen the name,\" he said softly, almost in awe. \"She's on more corporation boards of directors than you can shake a rolled-up Financial Times at,\" he told me. \"I saw her quoted on Bloomberg a few weeks ago.\"\n\n\"She seems so young for that,\" I said.\n\n\"She's earned it all, or so my broker says. She's brilliant, like a walking computer when it comes to trading and market shifts. You couldn't have picked a better person to impress.\"\n\nHe was silent for a moment, then murmured, \"Good job, Sid.\"\n\nI grinned. \"So, do I get that pay raise?\" \n\n\"We'll talk.\"\n\n+\n\nYeah, so, with a whole store to choose from, do you think I could find something to suit me? There was a pretty good clown suit, funny and spunky, but it really needed face paint and I didn't think that would do my skin much good. There was a super-fancy ball gown with a tiara and everything, but the skirt was extra-full and I wasn't sure I could get into a car wearing it. It was tempting, but I put it back on the rack with a sigh.\n\nEventually, I went for the obvious - pirate. Who doesn't like a lady pirate, right? Essentially, it was just a mid-thigh scarlet coat with big brass buttons and broad black cuffs and collar. A wide black leather belt pulled it in at the waist and a three-cornered hat with plume completed the outfit. There was even a fake flintlock pistol to tuck into the belt. I thought the knee-length high-heeled boots waiting in my closet would make it perfect.\n\nMr. Hanan gave a whistle when I emerged from the change room. \n\n\"Knock 'em dead, Sid! That's just outstanding.\" \n\nI ran into an issue the night of the party, though. The costume fit me well and the boots were just right, but it became apparent that the best way to wear it was to go long on the d\u00e9colletage.\n\nLook, I've got a good figure, in all fairness a very good figure. The costume looked super hot -- the designer understood cleavage. I wouldn't have thought twice about wearing it to a party given my one of my friends, but I didn't know who would be at Shannon's. I didn't really know Shannon either, come to think of it. She and her friends might all be quite conservative, maybe easily offended.\n\nI shrugged, found a lacy black bra and put that on under the costume, but it just looked silly. A pirate with a brassiere - really?&hairsp; I thought for a moment, took off the bra again and found a pair of long fake pearl necklaces. Looped around my neck about three times each, they filled the gap, so to speak, and still looked, um, 'piratie'? It worked, anyway &mdash; sexy without going overboard &mdash; and I was relieved that my nipples didn't show through the thick red fabric. I went bold on the makeup.\n\nI tucked the pistol into my belt, tilted the fancy hat to one side and struck a pose in the mirror. It looked pretty good - darned good. I had a nice feeling about the party.\n\n+\n\nI could hear music from the moment the elevator doors opened. I followed it down the hall and, sure enough, it was coming from Shannon's condo. She opened the door, a smile on her face, then both of us started laughing.\n\nThe tall figure in front of me wore a sword instead of a pistol, but pirate she was. Her dark hair was worn long and curly, her three-corner hat was black, and her boots were high enough to actually hide her knees. A lace-up bodice of heavy embroidered black velvet set off a very fancy white thigh-length dress. She must have had a serious push-up bra underneath, for the word 'cleavage' was suddenly utterly inadequate.\n\nShe was totally drool-worthy and I no longer had any worries about my own costume offending.\n\n\"Sydney!\" she cried over the sound of the music, reaching out with her arms and drawing me into a hug.\n\nShe kissed me on the cheek, pulled me inside and called out, \"Everybody, this is Sydney. She's a new friend and loves to dance.\"\n\nI don't think I'd told her that, but she wasn't wrong.\n\nEyes around the room examined my costume -- and me inside it &mdash; but no girl in her right mind wears a costume like that if she isn't ready to be the center of attention. I saw smiles, a few waves and then Shannon started leading me around, introducing me to people. As I had figured, they were mainly her age, a bit older than me. \n\nThe costumes were excellent, too -- no big box monstrosities here, no frat-house sheet togas. Some of them were actually modest, but some... \n\nBatman was dressed as might be expected and I didn't think he needed the padded tunic, but it was pretty clear that there was nothing but pussycat under Catwoman's black latex outfit. It didn't show anything you couldn't see on a public beach, but damn!&hairsp; The catsuit looked like it had been sprayed onto her.\n\nAnother couple were dressed like ancient Egyptians. He had the striped headcloth, tunic and kilt of a pharoh: she had a long black wig, with a tiny black-and-gold striped bikini and a long, translucent skirt to cover the outstanding legs the bikini merely emphasized. \n\nThere was a man dressed in black leather, buff as all heck. His partner was dressed mainly in chains -- lots and lots and lots of very fine gold-coloured chains forming cascades of links over the important bits. I thought&hairsp; she had some sort of pasties and a gold G-string on underneath, but I couldn't be sure. I noticed other people checking her out, too, so it wasn't just me.\n\nNone of them would have brought out a cop's ticket pad on the street, but they were all super-cute and suggestive as could be while still covering the essentials.\n\nShannon led me through the kitchen. \"What would you like?\" she asked, waving her hand at a row of bottles. \"There's wine and coolers and beer in the fridge, too.\"\n\nI thought for a moment. \"Thanks, but have you a Coke or something?\"\n\n\"Sure.\" She held open the refrigerator door and waved at an array of cans and bottles. \n\nI flipped through the selection. \"Where's Grace?\"\n\n\"Gracie's with her dad this week.\"\n\n\"Oh.\" \n\nI decided not to go any further down that track. I picked out a can of San Pellegrino soda, popped it and, finding a glass, poured.\n\n\"This is nice,\" I said, looking around. \"Thank you for the invitation.\"\n\n\"I'm glad you came, Sydney. Make yourself at home; I have to play hostess for a while.\"\n\nIt was a good evening. The people were friendly and I found myself mixing well. The conversation was interesting, the men were gentlemen and their ladies were eye-catching. There were some very special derri\u00e8res on display and, well, why not enjoy myself?\n\nThere were also a couple of unattached guys who seemed to be paying me a fair bit of attention. Single dads, maybe? In some circumstances, that might have been fun, but not here, not Sydney, not tonight. \n\nI drifted into helping Shannon with drinks and food and collecting used plates and such. No, not in self-defence, thank you so much. I could handle the boys, but tonight I just wanted to party softly.\n\nThe event ended sooner than I'd expected, 'cause babysitters. Of course - 'Parents' Hallowe'en'.\n\nI didn't have a sitter worry to about, so I stuck around to help with cleanup.\n\n\"You don't have to do this, Sydney,\" she said as we passed one another at the kitchen door.\n\n\"My pleasure. I had a really good time.\"\n\nAs I was coming back a minute later with a tray of empty glasses, I leaned in to gave her a kiss in passing, a friendly peck. I'd aimed for a cheek, but a glass started sliding and trying to correct for it put my lips in perfect alignment with hers. My eyes closed at their soft touch. It was so nice, so very gentle, so very certain, so unlike the bristly, inept kisses of those boys who had managed to get that far in my life.\n\nIt didn't last long. She broke first, looking at me. I pulled back, blushing furiously. At least I hadn't dropped the tray...\n\nThe smile changed to a wicked grin.\n\n\"I like the way you say 'thank you', Sydney.\"\n\nHer eyes locked onto mine, confident as a cat. My blush deepened.\n\nSure, I'd kissed other women. Just about every girl has tried it, maybe at a party or something, just to see how it feels. Then it had been fun, had set my mind wandering. Now, more than just my mind was racing. \n\nAnd this wasn't a teen party in a friend's parent's basement, with a dozen other people my age laughing and applauding, knowing that the kiss wouldn't go anywhere. Shannon was a mature woman, strong and powerful in her own right. \n\nAnd, for some reason, that we were alone seemed to be very, very important. Not that I needed anybody else, mind you; I seemed to be doing a pretty good job of embarrassing myself.\n\nI looked away, shivered a little. Aside from being afraid Shannon would laugh at how hard my heart was beating, I was totally confused. I had liked it, that much I knew. But I'd never thought...\n\nI heard Shannon put the tray down, felt her take my hands.\n\n\"Hey, I'm sorry. I didn't mean to embarrass you,\" she said.\n\nI looked back at her, saw her grin had changed to a really soft smile. My heart jumped a little. I had absolutely no idea how to respond.\n\nShe must have sensed it, for she stretched out her arms in invitation for a hug. When I stepped into them, those two strong arms came around me in a warm, gentle, comforting embrace. Relaxing, I put my head on her shoulder and let her hands flow up and down my back. It felt good, peaceful, soothing. I let myself settle into it, felt my body mould itself against hers a little. I don't know how long it lasted; I wasn't counting and it didn't matter. Right then, it just felt right.\n\nHer arms tightened, squeezed lightly.\n\n\"How're you doing?\" she whispered.\n\n\"Good.\" I thought for a moment. \"But I should go.\"\n\n\"OK. I'm glad you came.\"\n\nI waited for a slow ten-count, lifted my head to look at her.\n\n\"Shannon?\"\n\n\"Mmm?\"\n\n\"It'll be easier for me to go if you let go of my ass.\"\n\nShe giggled, gave my bum a squeeze and stepped back. \n\n\"Sorry.\"\n\nI thought about it for a split-second. \"Don't be.\"\n\nI thought another second, added. \"I enjoyed it. But I still have to go. I have an early class tomorrow morning.\"\n\nShe looked surprised. \"I didn't know you were in school!\"\n\n\"Part time. Gotta run. Thank you again.\" I was becoming flustered, oh yes, and the words were beginning to fly out of my mouth. I suddenly knew that if she asked, I would stay. And I knew that I wasn't ready for whatever staying would entail.\n\n\"See you soon, I hope.\"\n\n\"I'll look forward to it, Shannon. Thanks again for the invitation.\"\n\nThis time, she let me kiss her cheek.\n\n+\n\n\"Phone call for you, Sid.\" Mr. Hanan's voice woke me from a bit of mindless back-room serfery. He had a funny smile on his face. \"I think it's you-know-who.\"\n\nI picked up the phone, tried to sound professional. \"Sydney speaking.\" \n\n\"Sydney, it's Shannon. I'm sorry to call you at work, but I didn't have your number.\"\n\n\"No problemo. How's Grace? How's Grace's mom? How may I help you?\"\n\n\"She's good, her mom is good and would you like to hang out at my place tomorrow night? I've got some seriously classic movies we could watch.\"",
        "My heart did a double-flip. I'd been carrying her business card in my purse, taking it out and looking at it about every five minutes since the party.\n\nYeah.\n\n\"How classic? 'Casablanca' classic?\"\n\n\"Could be. Are you up for takeout of some kind?\"\n\n\"Sure. What time and what can I bring?\"\n\n\"How about six o'clock? And no, don't bother bringing anything.\"\n\n\"Six works for me. Will there be...?\"\n\n\"No, just us. I...\" She paused, surprising me. \n\n\"Is... is that OK?\" Her voice sounded uncertain.\n\n\"Oh. Oh, yes. It's totally OK. Casual?\"\n\n\"Very.\"\n\nI heard the door chime ring out in the shop. \"I have to go, Shannon. Thank you.\"\n\n\"Six o'clock tomorrow?\"\n\n\"See you.\" I hung up.\n\nA woman was inspecting a Happy Birthday banner on display. No need to get involved for a few more seconds.\n\n\"So?\" Mr. Hanan could ask more with fewer words than anybody I knew.\n\n\"Going to her place to hang out and watch old movies.\"\n\nHis eyebrows rose.\n\n\"Good for you! All work and no play makes Jane...\"\n\nI didn't need his approval, but it felt good. He was a nice boss.\n\nThe woman turned, a question on her face.\n\n+\n\nShannon had said 'casual', which of course has about half a dozen meanings. I tried on this outfit, then that one. I held up a couple of cute dresses to explore the fancier end of casual. I eventually settled on a really good pair of jeans and a wide-striped top, long-sleeved with just a bit of a scoop at the neck. I pulled on a jeans jacket and smiled at the girl in the mirror. She -- I -- looked good.\n\nThe obvious question was 'good for what, precisely?' To that, I wasn't quite sure. I looked at the mirror again and decided to leave the question unanswered. I'm just going to hang out with a new friend.\n\nShannon had also said not to bring anything, but there was a florist on the way. I settled on a nice bouquet, something bright and colourful to match the fall leaves.\n\n\"You shouldn't have!\" she exclaimed when she opened the apartment door and saw the bundle in my hands.\n\nWell, yeah, this is about the only time when No really means Yes, but it was still nice to see that I'd made a good choice. She bustled about with a vase and a sharp knife and the flowers were soon settled in their new home.\n\n\"They're lovely, Sydney. Thank you.\" It was a really sweet smile. I tried to match it.\n\nShe set the vase on a table, eyed me.\n\n\"I was thinking of a pizza,\" she said. \"What do you like?\"\n\n\"Anything but pineapple or anchovies. Unless you insist.\"\n\nShe dug out her phone, thumbed at the screen. \"How about this one?\" She pointed at it. \"Margherita pizza - basil, fresh mozzarella, and tomatoes. I've used this place before; they're pretty good.\"\n\n\"Could we add mushrooms to that?\"\n\nShe grinned. \"I like your style. Give me a minute.\" She thumbed at her phone. \"There. Half an hour before it arrives. What would you like to drink?\"\n\n\"Um, is there any more of that San Pellegrino left? Please.\"\n\nOne eyebrow went up a little. \n\n\"Sure. If that's what you'd really like.\" She turned to the refrigerator. \"You don't have to explain, but don't you drink at all or what?\"\n\nI blushed. \"Um. Shannon, I don't want to get you in trouble. I'm still underage.\"\n\nShe turned, both eyebrows up and mouth open in a slight O.\n\n\"I'm sorry, Sydney. I didn't mean to embarrass you.\"\n\n\"S'ok, I guess, but the cops have been taking it very seriously around here lately.\"\n\n\"How old are&hairsp; you?\"\n\n\"Um, 20?\" My voice sounded squeaky. My blush deepened.\n\nShe put out her arms again and I again stepped into her embrace.\n\n\"Hon,\" she whispered, \"I think it's me who had embarrassed you. I'm sorry.\"\n\nShe chuckled. \n\n\"What?\"\n\n\"When you said 'underage' a minute ago, I figured you meant you were like 13 or 14 years old.\"\n\nI giggled myself. \"Do I look 13?\"\n\n\"Hardly, but you never know. Now be honest, Sydney. There's nobody here but us girls, I don't judge and I ain't a cop. Would you like a drink or would you prefer soda? It's cool either way.\"\n\nI bit my lip gently. \"I wouldn't mind a glass of red wine, then. Please?\"\n\nHer arms tightened in a brief bearhug.\n\n\"That's my girl! One Argentinian Malbec, coming up! But just one, I promise.\"\n\nTurning me loose, Shannon produced a pair of enormous wine glasses, thin as my senator's ethical standards. She poured a generous splash into each.\n\nWe tapped glasses slightly. I sniffed, closed my eyes and smiled. \"This smells very good. Thank you.\" I took a sip and my smile grew. It was far better than the thin stuff I'd had before.\n\n\"C'mon,\" she said. \"Let's pick out a movie before the pizza arrives. No point in wasting hot pizza thumbing over DVDs.\"\n\n\"DVDs? Really?\"\n\n\"Call me atavistic. I inherited a bunch and then started collecting. And if I like one, I'll always have it.\n\n\"Here,\" she said, pointing at a pile the size of a small loaf of bread on a coffee table. \"I picked out some good ones. Your choice or you can find another if you want.\" Her thumb pointed at a large unit with dozens of shelves holding rows of little plastic boxes.\n\nI put down my glass and sorted through the small stack. Titanic, You've Got Mail, Breakfast at Tiffany's... \n\nMy eyebrows high, I held one up. \"Fifty Shades of Grey,  Shannon?\"\n\n\"Oops. Wrong pile.\" Her grin was a bit ragged. \"Put that aside, sorry.\"\n\nI looked at her, licked my lips, put it back on the table. By itself. \n\nThe others included Out of Africa, Gone with the Wind and a selection of Sex and the City episodes. She had a formidable collection indeed.\n\nHer tastes and mine meshed pretty well, I thought. I picked out two &mdash; Breakfast at Tiffany's and Titanic &mdash; both seriously 'chick' and seriously 'flick'. On impulse, I giggled, added Fifty Shades and passed the three to back to her.\n\n\"Your choice,\" I grinned.\n\nShe looked at the three, then at me. Her eyes held mine for a long time before she shrugged. \"Shouldn't tempt me, kid. But Hepburn and Peppard -- I can never decide which is cuter, grrrr!\"  She made a ferocious face and I laughed.\n\nThe buzzer rang. \n\n\"That'll be the pizza. Plates are over the microwave.\"\n\nFive minutes later, we were watching Holly Golightly strolling down Fifth Avenue. My first sniffle wasn't until Paul heard her singing on the fire escape. I looked at Shannon and she was a little teary, too. It worked out. We didn't get a good happy cry though until the final scene -- who can resist the two of them kissing in the rain?\n\nShannon took away the plates, brought a box of tissues and the wine bottle.\n\nWe blew our noses and she sat down again, closer this time, holding out the wine bottle in invitation.\n\n\"I shouldn't,\" I said, \"but OK. That was fun. Thank you.\"\n\n\"No problem, hon.\" She poured -- a small one.\n\nI looked around. \"This is an amazing apartment, Shannon.\"\n\n\"Thank you. Would you care to see the rest of it?\"\n\nI nodded. So far, I'd only seen the living room and the kitchen.\n\nThe place was huge. The ceilings were maybe ten feet high and made of what I think was knotty pine. The main bathroom was about the size of my entire apartment. There were two bedrooms, one obviously hers and another a spare, converted into a combination office and gym, with some impressive exercise machines scattered around. Shannon's desk had, no kidding, three big computer monitors on it, with another really big one on the wall. And then, a third room...\n\n\"Wow!\" My eyes kind of bugged out. A very large free-standing oval-shaped bathtub sat in the very corner, almost surrounded by ceiling-high windows. \n\nNo, I take it back. It wasn't a tub -- more of a hot tub, I guess, one easily big enough for three or four people. The broad single-paned windows had a sweeping view of the city beyond and the water in in the tub was still enough that I could see the reflection of the stars outside.\n\n\"This is so cool, Shannon!\" \n\n\"Hey! You think that's something? Watch this!\"\n\nShe flipped what looked like an ordinary light switch. There was a soft hissing and the windows -- four massive panes -- began to move, sliding away back into the walls, leaving the hot tub open to the outside. I shivered as an early November breeze blew in. Steam began to rise from the warm water.\n\n\"How could you sit in here with the windows open? I can see it in the summer, but it's November!\"\n\nChucking, she flipped a second switch. A bank of ceiling-mounted infrared heat lamps began to glow and I felt much warmer. \n\n\"That's better!\" \n\n\"You don't really need those once you're in the water,\" she explained. \"Even in January.\" She turned them off.\n\nHer finger flipped a third switch. I heard a low hum and the surface of the water began to swirl.\n\nI was most impressed. \"It's really nice, Shannon.\"\n\n\"It is, isn't it?\" Her arm moved from the switches, came to rest on my shoulder. She pulled me into a gentle, friendly hug. It felt good and I leaned into it.\n\n\"Want to try it out?\" Her voice was careful, soft, anything but pressing.\n\nMaybe it's time to explain... \n\nLook, I can deal with men. Well, most of the time. I do love my dad. And I get along with my brothers, usually, to some degree. And I understand that most women find men attractive, even appealing. But, putting it on the table, in my world boys basically exist to lift heavy objects and deal with automobile mechanics. They're bristly, uncoordinated, socially inept and, OK, even right out of the shower, they just don't smell&hairsp; right to me.\n\nI'd tried, Heaven knows. I started drawing looks of masculine approval from the moment I hit womanhood, but it felt weird, not something to be remotely happy or proud about. I dated a bit in high school but it was an embarrassing dead end. Kissing was awkward and anything more than holding hands was simply creepy. There was just no joy there, not for Sydney.\n\nFortunately, it was easy to cultivate a reputation as a hardworking scholastic overachiever and I eased myself out of the dating pool. Living at home, surrounded by protective big brothers and loving but very traditional parental attention, any thoughts I had about alternatives were pretty well buried. It was a frustrating and confusing time and moving out into my own place a few months ago hadn't made the world any easier or less confusing.\n\nAnd now Shannon was asking me to join her in her hot tub. Uncertainty squared.\n\nMy voice was even softer than hers. \"I didn't bring a suit.\"\n\nRight. Go, Team Sydney! &hairsp; Virgin on about six different levels. And nervous. And hesitant. And a whole raftload of other things. Just for starters, not counting my mom and my doctor, I'd never been even topless with another woman. Even the high school gym had had separate showers and while I'd dreamed and not-quite-dared, no, I hadn't. Not at all. \n\nShannon must have caught my timidity, for she pulled her arm off my shoulder and turned towards me.\n\n\"Hey, I'm sorry. I didn't mean to embarrass you. If it's something you're not used to, I understand. Truly.\"\n\nHer eyes were soft, reassuring. \n\nMy mind was whirling. It's just skinny-dipping, silly! And the place is gorgeous. And she's not really...\n\n\"No,\" I said. \"No, it's something I'm not used to, Shannon. But everything has to start somewhere.\"\n\nI took a deep breath. \"So, yes. Yes, thank you. I would love to try it out, please.\"\n\nPerhaps trying to make it easier on me, she led me into her office, opened the closet and pulled out a cotton dressing gown, simple but quite pretty. Her voice was gentle.\n\n\"You can change in here and get into the tub if you want. I'll join you in a minute or two.\" She kissed my cheek gently and stepped out, closing the door after her. I stood there for a few seconds, unsure of myself, trying to work up my courage.\n\nIt's OK, Sydney. This will be fine.\n\nI shrugged, undressed, hung my clothes in the closet before wrapping the robe around myself and quietly opening the door.\n\nI could hear Shannon in the kitchen. \n\n\"You OK, Sydney?\" She wasn't in view, but her voice was clear.\n\n\"Yes. Thanks.\"\n\n\"Get in if you wish. Or not. I'll be along in a minute or two. Would you like another drink? Something to nibble on?\"\n\n\"A tea, maybe?\" I said, then, \"No, Shannon, surprise me. And, thank you, but I'm still stuffed from that pizza.\"\n\n\"OK. I'll be along in a minute.\"\n\nI went into the corner room. It was quite cool with the windows open, but hardly unbearable. I stuck my fingers in the rippling water, shook them off. I looked around, took off the housecoat and hung it on a hook on the wall.\n\nThe wind outside came up and I shivered suddenly. I put my toes into the water, found it wonderful, slid one leg in, then stepped over the tub wall and stood thigh-deep. The breeze on my torso was still cold, but I felt better. I looked out at the buildings and streetlights below. It occurred to me that somebody might be watching me, decided that I was far enough away from everything else that it didn't matter. \n\n\"You decent? Shannon's voice startled me from the hallway. \"May I come in?\"\n\nEmbarrassed, I dropped down neck-deep into the water, found a seat on a ledge facing the doorway.\n\n\"I'm fine.\"\n\nShannon entered wearing a lovely robe, pink with embroidered flowers. In one hand was a bottle and in the other two champagne flutes. She smiled at me, kept her eyes above the waterline and I was suddenly embarrassed at her not&hairsp; staring.\n\n\"Champagne is my favorite drink for here. Is that OK by you?\"\n\nI nodded. She poured a glass, held it out to me, poured another and set it and the bottle on a stool beside the hot tub.\n\nShe moved to the wall, seemingly totally at ease, her robe sliding off her arms and shoulders as she walked. I'd thought her bum impressive before. Nude, it was stunning and I felt a little pang of jealousy.\n\nHanging the garment on a hook, she turned. My breath caught as she stepped very casually to the tub, her hands tying up her long hair as she moved. Her sex was bare but for a carefully-trimmed landing strip and her boobs high, firm and full. I thought she was the most beautiful thing I had ever seen.\n\nHer hair up, she smiled, picked up her flute and sipped from it very casually, seemingly completely at ease. Still holding the glass, she lifted one leg up into the tub, then the other. She eased herself down into the water, shifted until she found a seat, leaned back against the wall an arm-length from me. Not until her body was hidden under the water did she turn to look at me and I realized that nudity ignored was essentially the same thing as nudity covered.\n\nShe held up her flute towards me. \"Cheers!\"\n\nI touched my glass against hers with a tiny tink&hairsp;. \"Thank you, Shannon. This is lovely.\"\n\nHer smile was what I needed, I thought, open and warm.\n\n\"It is a nice view, isn't it? You can see the airport over there.\" She pointed. \"The airplanes taking off are maybe the funnest thing here.\"\n\n\"Funnest?\"\n\n\"You know what I mean. Look, there goes one now.\"\n\nThe high-rise condo itself being on a hillside, it was indeed a special view. Not many people get to watch airplanes take off from above. And she'd been right about the warm water; yes, the room was cold, but I was quite comfortable. And the water swirling around and over my bare body was delightful - relaxing and exciting at the same time.\n\nThe wonder of being there grew on me. It was a peaceful, privileged place, one high above all the troubles of the world. \n\nWe talked of this and that. Grace was in Mexico with her father for the next 10 days. No, she hadn't called, but she was still only six. No, no boyfriend; it was too close to her divorce for her to want to be dating. Yes, I'd like another glass, please. She was an only child; I had two brothers, one working on a law degree and the other an apprentice electrician. I liked indie music; her tastes ran more to folk. No, I'd never been to Europe. She felt that the secret to her success in the market was meticulous attention to details.\n\nWith that last, she turned from looking out at the city, looked at me \"So, Sydney. Classes.\"\n\n\"Classes?\"\n\n\"Classes. The last time you were here, you said you had an early class. You're not making costumes a career?\"\n\n\"Oh. No. I mean yes. I'm doing a Business degree part-time.\"\n\n\"Really?\" I saw sudden interest in her eyes. \"How far along are you?\"\n\n\"I've got about 75 credits. There's no hurry, I figure. I won't have much student debt when I graduate and will be able to look for a job I like instead of rushing to find something before the loans start coming due.\"\n\nHer head tilted a bit and her eyes locked on mine.\n\n\"That's a very mature way of thinking.\"\n\n\"I like to think so.\"\n\nShe looked deep in thought for a moment. I was surprised to see her blush a little.\n\n\"What?\"\n\n\"Nothing. Just a silly thought.\"\n\nThe blush faded and her eyes changed somehow, seemed to be more, I don't know, appraising?&hairsp; I felt I was being assessed somehow.\n\nShe shifted, turned a little towards me. I could see the shape of her breasts just under the water, turned my head away to look at the city below.\n\nI had been feeling less confused, less timorous, more comfortable about being like this. Suddenly, I was very, very aware of my nakedness, of being in a tub with an elegant, powerful, successful woman, somebody outclassing me in just about every way. \n\nAnd, I realized, a woman I was finding seriously attractive. Sexually attractive. That insight just crystalized. I felt myself go red, more so that the hot water had managed.\n\nI had absolutely no idea what to do or say next. I guess I it was pretty obvious.\n\nI felt a gentle touch on my shoulder.\n\n\"Sydney. Are you OK? You look like you could do with a hug.\"\n\nRight at that moment, I needed a friendly hug more than just about anything in the world and at the same time no, no and hell, no!&hairsp; I was so uncertain, so conflicted. I reminded myself that courage wasn't just found in battles. Being friends, making new friends, those take courage, too.\n\nI nodded gently, felt her arms come around my neck, pull me around to face her partway, pull us together, one around my neck, the other on my back, well clear of my bum.\n\nHer bare boobs against mine felt strange, yet at the same time also very good. Her comforting arms felt even better. I had&hairsp; needed this. I let myself relax, put my head on her shoulder. I was unsure what to do with my hands, so I let one come down to rest on her thigh; that much felt good.\n\nWe sat there for a couple of minutes, not moving, the water seething and bubbling around us. Suddenly, Shannon's body became stiff, as if she had just thought of something.\n\n\"What?\" I asked.\n\nHer voice when she spoke was very soft, but I could sense unease in it. \n\n\"Sydney? When I invited you...? I mean, when I offered...\"\n\nI felt her finger touch my chin, gently but irresistibly turn my face to hers. I couldn't read her expression.\n\n\"Have I offended you?\"\n\n\"No,\" I murmured. \"No. I'm just... confused.\"\n\nI felt my skin go absolutely scarlet. I turned my eyes away.\n\n\"Confused?\" Her word was so soft, yet it seemed to echo in front of me. \n\n\"Oh my God,\" she whispered to herself. \n\nHer hands pulled away suddenly.\n\nHer voice was hesitant. \"Sydney, may I ask you something?\"\n\nHere it comes,&hairsp; I thought. I was pretty sure I knew what she was going to ask, but how could I not be honest?\n\n\"Hon, is this... the first... the first time you've been... alone with another woman? Like this, I mean?\"\n\nNailed it!\n\n\"Yes.\" I could barely hear my reply above the jetted water.\n\nWith that, she moved well away from me. Her face was filled with remorse now, realization filling her eyes.\n\nHer hand came up, almost touched my cheek, fell.",
        "\"I'm so, so sorry, Sydney. I totally misunderstood. I thought...\"\n\nI took a deep breath. Might as well go with full disclosure. \n\n\"Or a man.\" \n\nHer eyes were wide now. \"Oh, God, honey! I was so off-track, Sydney. I thought...\"\n\n\"S'ok. I guess. Look, Shannon...\"\n\n\"I'm so sorry, Sydney.\"\n\n\"No. Don't be. I mean, I was enjoying this. I really was. Well, most of it. I'm having fun.\"\n\n\"Most of it?\"\n\n\"Well, some I wasn't sure of, but I think&hairsp; I liked it. Does that make any sense?\"\n\nSo much for my sophisticated self-image. I felt about 11 years old, utterly clueless. She'd been treating me like an equal and I'd just blown it. I could have been cool about all this, but no, not Sydney. Without warning, I suddenly found myself in tears.\n\nShannon paused for a moment, thinking, then flowed forward against me again, enfolded me again in those gentle arms. I leaned in; this was clearly about friendship, not sex.\n\n\"It's OK, baby,\" she whispered. \"It's OK. There's nothing to cry over.\"\n\nI looked up at her, sniffed. \"I just feel so foolish.\" I turned my head, leaned against her bare shoulder again. It felt solid, reassuring. Her hands on my back and shoulders were as gentle as if soothing a newborn kitten.\n\nWe sat there for what seemed like forever, silent. For some reason, it no longer felt weird being held by a naked woman, not like this. My tears gradually subsided and I found myself wishing I could stay like this forever, never have to move, never have to face the real world again and never, never, never feel like a little child again.\n\nShannon shifted beside me. To my surprise, she was holding a box of tissues. \n\n\"Here. Blow.\"\n\nI moved away from her, blew my nose, wiped my eyes.\n\nI looked down. \"I must look a mess. I feel so foolish, Shannon.\"\n\n\"Don't be. It's my fault; I misjudged everything, Sydney.\"\n\nI slipped into her arms again, put my arms around her waist, felt comforted by her arms on my shoulders.\n\n\"Better now?\"\n\nI thought about that. \"Mm-hm.\"\n\nShe hugged me gently. \"So, what now, Sydney? Do you want to go home? It's OK.\"\n\n\"No. No, I like this. I really do. It's nice.\" \n\nI giggled. \"I don't think I can go anyway. I've had three glasses of wine and they'd throw the book at me if I got caught trying to drive. Um, could I crash on your couch?\"\n\nShe pushed me back, locked eyes.\n\n\"No. No, you may not use the couch! That's not how guests are treated here. You take the bed, Sydney. I'm used to the couch in any case; it's where I sleep when Gracie comes to stay with me.\"\n\n\"I'm not your daughter, Shannon, and I am not going to kick you out of your own bed.\" I tried to be as forceful as she had been.\n\n\"Then I'd better call you an Uber, Sydney.\"\n\nI thought about that for a second. I had to open in the morning, meaning I had to be at the store by not much after 8:00. I'd have to be out of bed very early to pick my car here. \n\nI looked down, hesitated, summoned up what was left of my courage.\n\n\"Shannon, would you mind... I mean, could we...\"\n\nShe gave me a brief, reassuring hug. \"Share? Sure. I'd like that.\"\n\n\"But, Shannon...?\"\n\nGod,&hairsp; was I ever feeling insecure! All I needed now were Victorian maidenly vapours or something.\n\n\"But nothing else, is that it?\" Her reply was gentle. She'd read my question before I could figure out how to express it.\n\nMy voice was a whisper. \"Please? I'm just not ready.\" \n\nI was saying no, but deep inside knew that... well, maybe not now, but I wanted to touch her, to run my hands over her silken skin, to...\n\nBut not tonight. Tonight had been tough enough.\n\nHer hug was stronger now. \"No problems.\"\n\nThere was an auxiliary row of switches by the pool and I found myself watching the windows slide shut. The room was suddenly quiet, breezeless. It felt dark, gently protective. I heard another switch, felt the jets stop, tried to focus on the warmth of the water.\n\nShannon dimmed the ceiling lights almost to nothing. Was this normal for her or was she trying to respect my suddenly-revealed modesty?\n\nShe rose out of the tub, stepped to a pile of bath towels. I watched her move, wondered at her grace. Despite my timidity, I found I could still admire her long legs, the sway of her hips, the dimples on her lower back.\n\nI looked away, hoping she hadn't seen me staring at her.\n\nShe handed me a towel, turned away when she felt my hand on it, stepped back to get herself one. I gingerly rose to my feet, felt the water draining over my skin, heard drops falling into the water around my legs. I began to dry myself; Shannon stayed where she was, facing half-away, giving me space, I guess.\n\nI watched her silhouette against the lights of the city outside. She bent to dry her legs and I caught my breath at the heavy sway of her breasts, found myself amazed at the inner conflict between shyness and desire. There was a weight deep in my belly, a tightness in my chest, a feeling of being pushed and pulled at the same time. Was this normal?\n\nI finished drying myself, stepped out of the tub. I put on my robe, let myself be led back into the kitchen, away from the tub.\n\n\"I often have a cup of cocoa before I go to bed. Would you like one? Something else? Another glass of champagne?\"\n\n\"Cocoa sounds wonderful. Thank you.\"\n\nShannon turned on the fireplace in front of the sofa and sat at one end, allowing me to choose how close to her I sat.\n\nI was out of the hot tub now and fully clothed, but for some reason, that was making me even more nervous. I fumbled for the right words. \"Thank you for your patience, Shannon.\"\n\n\"Honey, thank you&hairsp; for not freaking out on me. I totally misread...\"\n\nI waved my hand, cut her off. \"No. I can see why you got confused. I sometimes think people need diagnostic screens or something on their foreheads.\"\n\nWe watched the fire for a while. I let my mind drift, think of nothing but the flames. Eventually, Shannon broke the silence.\n\n\"Do you want to talk about it?\" Her voice was low, kind. \n\n\"What's to talk about?\" It was a silly response, I knew. I took a deep breath, let it out. \n\n\"I don't know, Shannon. I've never found men attractive, not ever. Just thinking about having sex with a man is just... ick.\"\n\nThere was a long silence.\n\n\"How about women?\" Her voice was very gentle, very open.\n\n\"I... I don't know, Shannon. I think so. I mean, I look at men and the thought of being in bed with them makes me queasy. I look at women and it makes me happy. Excited, maybe? But, outside of that, I just don't know.\"\n\nOK, yes, I wasn't being entirely honest. I'd been looking at Shannon with more than mere casual interest. Around and around, backwards and forwards, the Sydney Dance. Dammit! Why couldn't I make up my mind, just do what I so obviously wanted to do? Why couldn't I just tell her?\n\nTell her what?  That I wanted her? That I was frightened? That I didn't know what to do next?\n\nHer face seemed very open, very accepting.\n\n\"Is it like that for you?\" I asked, then blushed suddenly. Who was I to assume anything? There was Gracie, after all. Presumably, she'd... Oh crap!\n\n\"I'm sorry!\" I stammered. \"It's none of my business, really.\"\n\nShe smiled, cut me off.\n\n\"Actually, Sydney, my door swings both ways. I like men, too.\"\n\n\"Oh.\" I thought about that. Was that another creeping tendril of jealousy I was feeling?\n\nI yawned slightly, apologized. \"Sorry. It's been a long day.\"\n\n\"It's been a fun day!\" she smiled. \"I've had fun, Sydney.\"\n\n\"I did too, but...\" I couldn't stifle another yawn.\n\nShe looked at a wall clock, stretched. I caught a glimpse of pretty nice sideboob when her robe opened. I turned my head again, blushing.\n\n\"Bedtime!\" she announced.\n\nShe led me into the main bathroom, searched through a drawer and found a new toothbrush, handed it to me with a wry grin.\n\n\"Um, I might be able to find you a set of pyjamas, Sydney. If you want. But I haven't had a real nightie in years.\"\n\n\"No problem,\" I replied, my mouth full of toothpaste foam. Actually, maybe it was a problem. I normally slept bare, but tonight? In the same bed with Shannon? I decided it was too late; I'd stick with what I'd said. Panties would at least be symbolic.\n\nA couple of minutes later, I came to her bedroom door. Shannon emerged from the ensuite.\n\n\"I normally sleep on the left side,\" she smiled, \"but it's your choice.\"\n\n\"Right side's fine for me.\"\n\n\"Anything you need? Glass of water by your side?\"\n\nI shook my head. \"No. Thanks.\"\n\nShe turned off the overhead light, stepped around me and, without further ado, took off her housecoat, folded it and placed it on a chair. I watched her, fascinated by her sleek perfection. Getting into bed, she kept her eyes averted and I realized she was trying to make me feel at ease. I slid into bed, too, keeping as far to the right as I could.\n\n\"You good, Sydney?\"\n\n\"Yes.\"\n\n\"Do you need an alarm?\"\n\n\"I've already set my phone, thanks.\"\n\nWithout further ado, she turned off the side lamp and the room was plunged into the softest, deepest black imaginable.\n\nHer voice was soft in the darkness.\n\n\"Sydney? I sometimes leave the blinds open. It's a clear night and the stars should be pretty. Would you mind?\"\n\n\"I'd like that.\"\n\nThere was a soft sound as she got up and the floor-to-ceiling curtains parted. Shannon was again silhouetted against the stars outside and I felt my breath catch at the sight. The tightness in my tummy got heavier; I felt my nips become hard. \n\nThen she was in bed again and I lay there in the darkness beside her. It occurred to me that the word 'conflicted' was completely inadequate. \n\nAnd what of Shannon? I was pretty sure that she'd be very happy if I slid a few feet into her arms. Or would she? Maybe not after my timorous meltdown. \n\n\"G'night, Sydney.\" Her voice was very low and I knew I lacked the spine right now to even try. Dammit! \n\n\"G'night, Shannon. Thank you.\"\n\nI sensed her arm moving under the duvet, reached towards her, found it, meshed fingers in the dark. We fell asleep like that; Shannon quite quickly. \n\nIt took me a lot longer. \n\n+\n\nI woke the next morning before my phone went off. It was early, still dark. Sometime in the night, Shannon had closed the curtains.\n\nSometime in the night, I'd moved over to her side of the bed.\n\nSometime in the night, she'd rolled over to face me, spooned and, still asleep, now lay with one soft hand cupping my right breast.\n\nIt felt good, surprisingly good. \n\nI lay quietly, feeling her breath behind me. Did it still count if she didn't know she were doing it? \n\nI hugged her hand to me very gently, treasuring how satisfying her human touch felt. After a few minutes, I reluctantly decided it was time to go. \n\nI slid out from under her arm, pulled the duvet over her shoulders. On impulse, I leaned down, kissed her temple. That felt surprisingly good, too.\n\nI closed the bedroom door behind me, found my clothes and eased out of the apartment. \n\nSitting in my car, I texted her: thanks so much! had total fun, didn't want to wake u\n\nI thought for a second. I wasn't sure where this was going, but I know I wanted to continue. That much I was sure about. \n\nIf, of course, Shannon was still interested. I added another sentence: would like to see you again, added a smiling-but-uncertain emoji and hit Send before I lost my nerve.\n\n+\n\nMr. Hanan came in around noon and took over at the counter. He wanted me to repack some excess stock to be shipped back to the wholesalers. It was an easy, essentially mindless task. I'd checked my phone a dozen times and found nothing from Shannon. Maybe she was annoyed at me? Maybe she'd written me off as too juvenile to bother with in future?\n\nIt was after 1:00 when Mr. Hanan stuck his head into the stockroom. He had an amused expression on his face.\n\n\"Parcel for you, Sid.\"\n\nIt wasn't a parcel. Not really. \n\nIt was six long-stemmed roses, four red and two white. I opened the card. Unsigned, it bore only the word: Yes!\n\nI looked up at him, my eyes wide.\n\n\"Who's it from, Sid?\"\n\n\"I'm not sure,\" I lied. \n\nHis eyebrows rose in subtle disbelief. He knows,&hairsp; I thought.\n\n\"Well, it looks like you have a fan, one way or the other.\"\n\n\"I guess.\"\n\nI gave it a few minutes, texted her. they're beautiful! thank you! thank you! thank you! when?\n\nThe reply took maybe two minutes to arrive.\n\nFriday at 6?\n\nNo doubt in my mind now, I replied, hugs. will grace be there?\n\nThis reply took even less time. Still in Mexico\n\nThat answered some questions I'd been too chicken to ask myself.\n\nI'd spent a lot of time thinking this through. I knew what I wanted. What I needed was commitment and courage. And belief. Belief in myself and belief in Shannon. There was only one answer I could send.\n\nYes!\n\n\u2003\n\n+\n\nI decided to go dressy casual, as sexy as possible without crossing the border into skanky. A very short navy-blue skirt showed off my legs, my best assets. Above it, I tossed caution to the wind and went for an almost sheer blue long-sleeved blouse I'd bought once on impulse.\n\nI turned back and forth in the mirror. The skirt looked good, but my bra just looked silly under the refined seductiveness of the blouse.\n\nI sighed. Who was I trying to kid? 'Seductive' -- really? I knew nothing about seduction.\n\nStaring at the mirror, I thought about the look I'd seen in Shannon's eyes. I was pretty sure I didn't have to tart myself up to get her attention. On the other hand, I was almost as certain that she would appreciate a certain, erm, presentation.\n\nI examined myself in the mirror, stood up straight, squared my shoulders. This was nothing I couldn't do, at least nothing I shouldn't be able to do. I was an adult now, right?\n\nTaking a deep breath and flashing a steely grin at the girl in the mirror, I pulled everything off, tossed the bra, put on a weightless blue thong, the skirt and the blouse. I leaned way forward, allowing my hair to flow over my shoulders and hang down towards the floor. I straightened up suddenly, throwing my hair over my head, reexamined my reflection.\n\nI had to admit that I looked pretty darned good - darned hot, to be honest. Hot, but still classy. I hoped Shannon would see it that way.\n\nThe soft fabric shifting over my nipples felt strange. I smiled to myself as they stiffened, poked against the material. I ran my thumbs over them, felt them harden still more. I turned back and forth, looked at them move under the misty blue blouse, felt my confidence grow.\n\nI can do this!&hairsp; I decided. Even I could be 'seductive'.\n\nI pulled a lightweight white jacket over the blouse. It matched well and I could wear the outfit to the store, so long as I kept the jacket on.\n\nOne my way to Shannon's after work, I stopped at a liquor mart reputed to be less fussy about IDs and ages. They were and even had the same brand of champagne she had served on sale. Ideal.\n\n+\n\nShannon had a bright smile on her face when she opened the door. It broadened considerably when she saw my outfit. Her approval was clear and I felt warm inside. \n\nI handed her the bottle. \"I think this is yours.\"\n\n\"How did you manage to get this? No, never mind. Don't tell me.\" She was wearing a blue-grey skirt and a long-sleeved white blouse, quite casual but really pretty. I was suddenly disappointed to be able to see the outline of her bra through the blouse.\n\n\"Up for Chinese?\" she asked. Her eyes ran over me and I quivered a little.\n\n\"Works for me. But I get to pay.\"\n\n\"Sydney...\"\n\n\"Give me a break, Shannon. Yes, you're doing well, 'way better than me, but leave me some pride, OK?\"\n\nShe stared at me a moment, gave a wry smile, nodded silently.\n\nThe same stack of DVDs was where I'd last seen them. I grinned inside when I noticed Fifty Shades of Grey wasn't among them, though. We settled on Titanic and were well into it when the door buzzer sounded.\n\nWe took a break to serve ourselves, then a sniffle break at the iconic scene of Rose and Jack on the bow railing. I blew my nose, turned to her.\n\n\"Thank you for this, Shannon. I really appreciate it.\"\n\n\"No worries. I'm enjoying myself, hon. Thanks for the bubbly.\"\n\n\"Well, you've been very patient with me. It's the least I could do.\"\n\nShe said nothing to that, restarted the film. Soon enough, the famous nude scene, Rose asking Jack to draw her nude.\n\nIt was time, I thought. I took a deep breath, shrugged out of the jacket, laid it aside. Shannon's eyes were on the exposed Rose; she paid me no attention.\n\nNot immediately.\n\nAbout three minutes later, she dropped her wine glass.\n\nThe next couple of minutes were a bit chaotic. Shannon's attention was divided between my boobs and the pressing need to sponge wine out of her carpet. I was on my knees, trying to help. I found the unfamiliar feeling of unsupported, swaying breasts amusing. Both of us wound up laughing our heads off.\n\nEventually, kneeling across from me on opposite sides of the cleaned-up spill, Shannon tossed her towel aside and, smiling broadly, openly ogled the girls.\n\n\"I thought I'd invited a shy friend over,\" she smirked. \"Who are you and what have you done with Sydney?\" \n\nI shrugged, gave her a small smile. \"You caught me off guard last time, Shannon. I've had time to think about me and you and what I really want.\"\n\nI couldn't read her expression. I lowered my eyes, caught myself, raised them again to face her. \n\n\"Shannon, I think you were making a very polite pass at me last time I was here.\" I was proud that I managed to get that out without squeaking.\n\nThere was a long silence. As I watched, a slight flush rose on her face.\n\n\"Yes.\" A whisper.\n\n\"Well, I'm sorry that I dodged.\"\n\nHer eyes were soft now, looking at my face, not my boobs.\n\n\"I am,\" I insisted. \"Now.\"\n\nShe stared at me.\n\n\"I was from the moment I got home, Shannon.\"\n\nI plucked at the collar of my blouse. \n\n\"Tonight, I didn't want either of us to misunderstand.\"\n\n\"Sydney...\"\n\n\"Damn it, Shannon! I'm 20 years old. I'm not a child.\"\n\n\"No.\" Her eyes dropped to my chest again and she grinned. \"No, you certainly aren't.\"\n\nI stood up, shaking just a little.\n\n\"So? Don't let me lose my nerve, Shannon.\"\n\nI closed my eyes for a second, felt her step towards me, allowed myself to flow into her arms. Her body was warm, strong, her shoulder at precisely the right height for my head to rest on. I felt her breathing, felt her breasts shift against mine. One hand pulled my head in and held me firm against her while the other began to trace its way down my back from shoulder to...\n\nTo my bum. It wasn't the first time she'd done that, but, still, it was in every sense very much the first time. There wasn't an off-ramp this time, if you get my drift. This was natural, pleasant, welcomed, not something catching me by surprise.\n\nI could smell her shampoo and some sort of cream, overlaying the scent of healthy woman. It was what I'd always wanted, without knowing. I inhaled deeper, let my hands run down her waist to her hips.\n\nShe pulled back a little, her eyes wide as her head came down to mine and I drifted into my first kiss, my first serious, intentional, I'm-happy-about-where-this-is-going&hairsp; kiss. \n\nThe tip of her tongue traced lightly along my lips, I opened my lips, my tongue met hers, danced a second. I could feel my heart pounding as she explored between my lips and teeth, then deeper, over the roof of my mouth, teasing, playing. I wasn't entirely sure how to respond, but I tried to follow her lead.\n\nI felt my tummy grow hard, my legs grow weak. \n\n\"Shannon?\" I whispered, pulling back just a little.\n\nHer eyes showed the greatest softness I had ever seen. Her fingertip traced lightly along my jawline.",
        "\"It's OK, Sydney. Whatever you want, whatever you do, will be OK.\" She smiled, very gently. \"I promise.\"\n\n\"Shannon,\" I whispered again. \"Tell me...\"\n\n\"I won't have to, dear. You'll know. Listen to your body.\"\n\nTaking my hand, she led me into the bedroom, stopped and turned to face me.\n\n\"You're very, very pretty, Sydney. I want you.\" I felt cherished, excited at hearing that. \"But you can say 'stop' anytime, hon.\"\n\nI nodded. Her eyes seemed enormous to me, filling the whole room.\n\nShe smiled a little. \"You sure you're OK?\"\n\nI nodded again, solemnly.\n\n\"Would you like to get yourself ready, or...?\" A slim hand reached for the top button of my blouse, stopped just short.\n\nI thought I knew the answer to this one. I reached up, mirrored her move, stopped with my hand just short of her own top button.\n\nHer smile grew broader; there was no longer any need for words. Her lips came down on mine again and I tried my best to keep up.\n\nMy efforts to unfasten her blouse came to a sudden stop when her hands slid over my shoulders, drifted down to my breasts. It was welcome, but still a shock. I froze, gasped softly as her thumbs began to circle my nipples, sending ripples of unfamiliar pleasure running through my body. Her hands felt so much better than my own ever had.\n\nI pressed my lips harder against hers, my fingers fumbled again with her buttons.\n\nHer hands continued to squeeze and heft my breasts and my excitement soared with each touch.\n\nI pulled the blouse off her shoulders, down her arms, let it fall before reaching behind for her bra clasp.\n\nI learned something. Boys' ineptitude with bras had been a standing joke in high school girls' washrooms. To my embarrassment, despite years of dealing with my own, I found myself as clumsy as the worst of the tales. I blushed scarlet as Shannon's hands gently swept mine aside, freed the catch in a second.\n\nShe giggled. \"It's always harder with somebody else's.\" \n\nHumiliated yet still eager, I busied myself with pulling her bra off her shoulders and arms. For the first time, I felt the soft, heavy joy of another woman's breasts. They were entrancing, arousing - and surprisingly fun. That word kept rattling through my mind as I shifted, squeezed and fondled Shannon's soft orbs.\n\nThey were larger than mine, with areolae the colour of milk chocolate. Her nipples were taut, as large as the first joint of my little finger. To me, they were perfect, perfect as the feel of her own hands now inside my blouse, stroking me, squeezing before brushing the near-weightless blouse off my shoulders and freeing my breasts entirely.\n\nShannon bent forward. The feel of her tongue tip on first one, then the other, nipple was amazingly arousing. I felt a wetness between my legs, a difficulty catching my breath. \n\nTongue swirling, her lips stayed on my buds as her hands felt for, found and pulled on the zipper tab for my skirt. A shift of her fingers and it fell to the floor, leaving me in my open, transparent blouse and thong. \n\nShannon stepped back, her eyes examining me, a happy, eager smile on her face.\n\n\"You're amazing, Sydney!\" With that, she felt for her own skirt fastenings, tossed the garment to a nearby chair. \n\nHer G-string was smaller than my thong. In seconds, her hands had pushed both down around our ankles. \n\n\"Oh!\" I complained. \"I wanted to look!\"\n\n\"Too bad,\" she teased softly, pulling me towards the bed. I shifted my shoulders and the blouse flowed off my arms to the floor as we walked.\n\nShe stopped suddenly.\n\n\"If... if you are still...\"\n\nI couldn't have imagined her stammering before and I giggled aloud at the hesitation in her voice. They say, a nod is as good as a wink. Instead of responding, I slipped by her and began to pull down the duvet towards the foot of the huge bed.\n\nShannon's delighted laughter filled the room as she came forward to help. A moment later, I was lying on my back in the middle of the bed, watching as she moved around the room, turning off the overhead fixture, lighting candles on tables and bureaux . Flickering light rebounded off mirrors, walls and ceiling, giving the room a soft warmth. Seconds later, lighter discarded, she made the bed bounce as she landed on it. Arms open in welcome, I joined her in happy laughter.\n\nMy breasts flattened against the gentle pressure of hers as she lowered herself onto me. Most of her weight was on her knees and I found myself wishing that I could feel more of it. Her lips again met mine and I felt my head pushed down into the pillow, felt myself swirling away in daydreams at last fulfilled. \n\nI ran my hands over her head, along her arms and back and shoulders. I couldn't get enough of her. Shannon's lips moved from mine, her tongue tracing its way along my neck, my collarbone, up my neck again. Sharp teeth nipped gently at my earlobe and I wiggled happily.\n\nShe shifted, her head moving to drag a broad tongue down my throat, over first one breast, then the other. It felt the best, the most exciting thing I'd ever experienced. She began with lips and tongue and teeth to tease just one nipple. I found it hard to breath, harder still to accept that this was finally happening. I raised my head, watched her mouth move over and around my boob, saw her other hand squeeze gently, pull my other nipple away, stretching, rolling gently. \n\nWatching it was almost as nice as feeling it. I reached above me, found a pillow, tucked it under my head. At the same time, I slid my other hand down between us, found one of her breasts, found the nipple, began to play and toy with it.\n\nShannon lifted her head, smiled at me, bent to my other nipple. Her movement allowed me to get a firmer, broader grip on her boob. I squeezed it appreciatively, heard her growl deep in her chest, felt her tongue strokes grow faster, stronger.\n\nThen her tongue was sweeping down my chest, over my tummy, over my bare mound. I waited, uncertain but hopeful &mdash; if that makes any sense &mdash; but groaned in disappointment when she bypassed my sex, her tongue instead licking my inner thighs lightly, gently.\n\n'Shannon!\"\n\nShe turned her body, lay between my legs now. I'm a small girl; her long arms allowed her hands to remain on my girls, fingers clutching, thumbs teasing, while her tongue teased and toyed near my pussy.\n\n\"Shannon,\" I moaned, louder this time.\n\nThe moan turned to a small shriek as her tongue finally found its way to where I needed it. I shivered, shook a little as its delicate tip swept along the outside of my ladylips, then, slowly, infinitely softly, between them. \n\nI pulled her head in, felt the pressure on my mound increase, felt her hands squeeze harder as her careful, gentle, teasing tongue continued to stroke my sex.\n\nI felt my nipples almost catch fire. I was so close, so very close...\n\nThen she lifted her head, smiled at me through lips covered in my dew.\n\n\"How's Sydney?\" she asked.\n\n\"Shannon,\" I panted. \"I can't take much more. Please...\"\n\nShe lowered her head, gave my lower lips a broad stroke with her tongue from bottom to top, lifted her head again, her smile happy, bright, laughing.\n\n\"You have no idea, girl, what you can or cannot take.\"\n\nHer face went solemn. \"Unless you want me to stop?\" The grin reappeared.\n\n\"No! No, Shannon! Please don't stop!\"\n\nI could see tenderness in her twinkling eyes. She kissed my mound, bent back to my pussy. Her hands left my boobs. I gasped as her tongue began to circle my pearl, round and round and round at the same time as a slim finger traced and teased my entrance, then slowly slid home.\n\nMy breathing was ragged. I could feel the blood pounding in my ears. My stomach was rigid and my abandoned nips felt like they were made of iron.\n\nHer finger swirled, stroked, explored my ribbed, slipperiness. Then her finger turned in a soft 'come-hither' gesture inside me, dragging its tip across my inner walls. And again. And, as her tongue-strokes became suddenly harder, lashing my clit, her finger found and rolled over my G-spot and the world exploded in in fire and light and skyrockets and earthquakes and angels... It flowed from head to toes, up and down, over and over and over in a pleasure I'd never dreamed possible. \n\nI heard my voice calling her name, fading, leaving me alone in a silent world of my own personal ecstasy. \n\n+\n\nI don't know how long it was before I woke to find myself still in bed, my head on Shannon's shoulder, her arm around my waist. The duvet was pulled up as far as our hips. \n\nFrom where I lay, I could see her boobs, rising and falling slowly with her breathing. Entranced, I reached out sleepily with one finger, touched one nipple, swirled lightly around it.\n\nBeside me, I sense Shannon come awake. Her hand came up, cupped mine on her breast.\n\n\"Tease,\" she said softly, then, \"How's Sydney doing?\"\n\n\"Good. Really, really good, Shannon. Thank you! That was amazing.\" \n\nShe hugged me.\n\n\"It's not every night that I am so blessed, Sydney. You're a lot of fun.\"\n\nI glowed inside at hearing that, raised my head suddenly.\n\n\"But, Shannon, what about you?\" \n\nHer hand petted me gently.\n\n\"It's OK. I had fun. Later, maybe. Meanwhile, can I get you something to eat? A drink?\"\n\n\"I am thirsty.\" I giggled. \"Can't think why.\"\n\nHer giggles joined mine.\n\n\"That bottle you brought -- it's in the fridge.\"\n\nI smiled, pulled myself off her shoulder, rolled over for a kiss. This time, I was driving. Shannon's lips were as soft as they'd been earlier and there was no urgency now, no force behind our kisses. It was happy, light and, if not loving, then 'deeply friendly'.\n\nI lifted away in due course, smiled, leaned down and lightly licked one nipple with the very tip of my tongue, then the other. I rolled away and sat up, looked at her beside me. Her messed hair looked lovely to me. I ran my hand through my own, guessed I was about the same. \n\nHand in hand, we padded barefoot through her apartment into her kitchen. There were mirrors here and there and I was amazed at how good we looked together, how natural it seemed for me to be naked beside this tall, commandingly beautiful, wonderful woman. I couldn't remember any reason I might have once felt for embarrassment or shyness. Not with Shannon. Not now. \n\nOpening the door to the refrigerator, she bent over to pull out the bottle and I was struck by the beautiful feminine symmetry of smooth labia just visible between perfect cheeks.\n\n\"Here we go. Bring a couple of glasses, will you?\" She pointed to a rack of them hanging over the central island. She waited, her hand out for mine, led us to the hot tub in its corner room.\n\nThere was no shyness about getting into the tub this time. It was as natural as walking down a street to meet a friend for a latte.\n\nWe sat, our hips under the foaming water together this time, our arms around each other. There was no cold wind today; the air was still and the lights of the traffic and buildings below were clear. \n\nShannon pulled away a little, found the wine. There was a loud pop!&hairsp; as she thumbed the cork out of the bottle, sending it plunging out into the darkness. She giggled and I joined her as a fountain of champagne erupted from the bottle.\n\n\"You're not supposed to do that,\" she remarked. \"They say it bruises the champagne or something. But it's fun once in a while and it's a roof down below, so it won't hit anybody.\"\n\nI held up the flutes, watched her fill them and set the bottle down. I moved over to rest against her again. He body felt real, welcoming in the warmth of the tub. Her smile was happy, generous and I leaned in for a slow, relaxed kiss.\n\n\"Mmm,\" she said as I broke away for a sip of champagne. \"You learn fast, Sydney. Or is it natural talent?\" \n\n\"A good teacher?\" I suggested. Her smile was brilliant as she pulled me in for another kiss.\n\nWe sat back, the warm water swirling across, comforting my skin as I admired the view. I felt Shannon's hand stroke my thigh and returned the favor. So wonderful to be so pleased by touch -- the touch of another and the touching of another.\n\nWe talked as we watched the airport, enjoying the bubbly and each other. Grace would be returning in two days; she wanted to be 'a astrobot' when she grew up. I had a major project due next week. No, I didn't expect any problems with it, had already got a good start. She'd bought the condo from its original owner, who happened to have been the developer, too. I didn't ski, but thought I might want to learn someday. She'd bought her skirt at Nordstrom; yes, I'd been in there, but no, I hadn't ever bought there, too expensive for right now. \n\n\"May I show you something?\" she asked.\n\n\"Sure.\"\n\nShe pushed off the ledge beside me, knelt on the ledge on the far side of the tub so as to be able to look down at nearby streets. Mostly out of the water, she shivered, then hit a button. I felt the heat lamps begin to glow.\n\n\"Down there,\" she said, pointing. \"I worked down there to put myself through school.\"\n\nI moved over, knelt beside her, followed where her hand was pointing.\n\n\"What? The little auto dealership?\"\n\n\"Uh-huh. The sales manager's wife had apparently been asking why all the sales staff were men and he needed a token woman to get her off his back. But I fooled 'em!\"\n\nI looked at her, my eyebrows raised.\n\nShe grinned. \"I spent a weekend online memorizing numbers and statistics -- mileages, legroom, options, engines, the works. I cross-referenced to Consumer Reports' reliability ratings for various brands, models and years.\n\n\"Monday morning, I knew more stats and more details about what they were selling than any of the men.\" \n\nThe giggle turned into a broad grin. \"A woman in car sales was unusual and I started to get other women coming in in hopes of getting a square deal from another girl. That and the numbers in my head wound up making me their top sales agent for that quarter.\" The grin grew positively wicked. \"OK, some short skirts and tight blouses for the male customers helped, too.\"\n\nI laughed.\n\n\"That some 'little girl' knew more about their stock than the good ol' boys they'd always hired was humiliating to some of them, but Mrs. Sales Manager was on-side when the sales bonuses were announced. That summer paid for my second year and there was no way they could turn me down when I came back the year after that.\"\n\n\"Meticulous attention to detail,\" I said, remembering.\n\n\"Yup. And now I'm up here and they're still down there.\" \n\nShe leaned on her elbows, sighed with contentment. And, perhaps, a little bit of justified, triumphal schadenfreude. \n\nI moved back to fetch my glass on the other side of the tub. Flute in hand, I turned, stopped. My breath caught in my chest.\n\nI had a perfect view of Shannon's perfect bum above the water, glistening sex again visible between firm buttocks. \n\nI quietly set the flute down again and moved behind her, slowly so as not to disturb her thoughts, until my tummy came to rest against her bum. I was again surprised at how good skin-to-skin felt. I put my hands around her waist and leaned my body forward to rest on her back.\n\n\"Well, hi!\" She sounded happy, pleased. Her arms came back and clasped my thighs.\n\nWe stood like that for a bit. I felt &mdash; I don't know &mdash; content? 'Content' seems kind of mild, now that I think on it. All I know is that I liked it. I felt as if I belonged&hairsp; for the first time in my life.\n\nStanding back up, I seized Shannon's hips, pulled, lifting her to her feet. My hands turned her to face me. I felt my heart beat faster, I could feel my ladylips swell, my nips become harder again.\n\nHer hands reached out to clasp my head; the kiss was endless, timeless, without boundaries, an expression of happiness and love.\n\nI surfaced eventually, almost gasping for breath. My hand between her breasts pushed a little.\n\n\"My turn,\" I said.\n\nHer eyes opened a bit, as if wondering. I pushed again; Shannon backed up against the slanting wall of the tub.\n\n\"Up,\" I directed. Her smile changed as she caught on. She rested her hands on the top of the tub, lifted herself up to sit on its broad edge.\n\n\"Don't move.\" I refilled her flute and made sure it was within her reach, then knelt in front of her, looping my forearms under those long, firm thighs, looked up &mdash; way up, it seemed &mdash; then down to something I'd never seen anywhere but in a mirror.\n\nHer sex was flawless, beaded with water from the hot tub, bare but for her landing strip, its outer lips plump, almost hiding the delicate inner ones. I found it beautiful, desirable, entrancing. \n\nI looked back up to her. \n\n\"I want this, Shannon. Tell me...\"\n\nShe smiled, stroked one side of my head with her hand.\n\n\"Whatever you want, Sydney. It will be fine. I'm going to enjoy whatever you try.\"\n\nThere was such calm patience in her voice, such acceptance. I leaned forward and kissed her mound before looking up at her again.\n\n\"But you'll tell me...?\"\n\nShe nodded, leaned forward and kissed the top of my head.\n\n\"I promise. If you need help, or if something is really good. I promise, Sydney.\"\n\nSatisfied with that, I leaned in again for my first time.\n\nThat too felt right, proper, what I had wanted and waited for and needed.\n\nI lowered myself a little in the water, spread her legs a bit more. I could see more now. I reached out with a forefinger, traced around her outer labia, then her frail inner lips, her opening, her clit. As I touched the latter, I heard Sydney inhale slightly. Looking back, I saw her parts swell a little, become a little darker.\n\nI ran my finger over her again, softly, slowly. I felt a slickness that had not been there seconds before. I smiled, looked up at her; her chest was rising and falling, her nipples hard now, protruding further.\n\n\"I think you like that,\" I whispered.\n\n\"I think I do,\" came the soft reply.\n\nWell, I thought, if it's working, keep doing it - at least for a while. I continued stroking her pussy, letting my other hand roam over her sleek skin, thighs, mound, tummy. I lifted one of my arms out from under her; by stretching just a little, I found I could reach those lovely, entrancing orbs. My hand squeezed one gently, swept my thumb over a hard nipple and I heard Shannon sigh.\n\n\"You sure you've never done this befo...?\"\n\nHer question cut off as I slid a finger inside her slippery entrance. I wiggled it slowly, tracing her clit with my thumb as I did. My hand was coated with her juices now.\n\nShe seized my head, turned it up to face her. Her face was flushed, eyes very wide.\n\n\"Sydney,\" she whispered, \"I've been dreaming of this. I couldn't believe how...\" She gulped, took a deep breath. \"..when I bought those clothes back to the store...\" \n\nHalf-lost in thought now, she hissed in pleasure.\n\n\"I've wanted you since you showed up at my party dressed as a braless pirate.\"\n\nShe'd noticed my lack of bra! \n\nI grinned inwardly.\n\n\"I...\"\" She gasped a little as my thumb rolled her bud under it. \"As soon as I saw you in the door, I wanted to send everybody home, to have you all to myself.\"\n\nI gently pinched her nipple between thumb and finger, pulled it slightly away, released it, swept over to find the other.\n\nI whispered. \"Kiss me, please.\" \n\nShe bent forward, down. I raised myself up without stopping what I was doing. Our lips met softly, but there was a fire in hers, a need, a hunger. Her tongue moved inside my mouth, seeking, demanding. \n\nI smiled, lowered myself to her sex again. I could smell her now, that strange-familiar female perfume. It resonated deep, deep inside me and I shivered.\n\nI bent and, for the first time, tasted another woman. Shannon shivered herself as my tongue tip circled her outer labia, shuddered as it traced its way between them, skirting my thumb and fingers still at work. She groaned when I leaned my head in further with broad tongue-strokes.",
        "\"That's good,\" she hissed. \"Real good, Sydney. Please...\"\n\nHer aroma filled my nose and mouth as I gave two more long, broad licks, then, keeping my fingers inside her exploring and teasing, I shifted my thumb. My tongue began to circle her bud, now taut and exposed. \n\nMy lips drew it in, began to suck gently on it, pulling it away from her body, flicking it with rapid tongue movements. Her strong hands pulled my head hard against her. I could her begin to cry out, over and over.\n\nI continued licking and sucking, but turned my hand so that my two fingers could reach her G-spot. I felt its solid mass under my fingertips, massaged it, stroked it. At the same time, I squeezed her boob and she exploded, shuddering, roaring. Her hands pulled my head away.\n\n\"Stop! Enough! Oh, stop! Sydneeeey!\"&hairsp; Her voice had risen to a high squeal.\n\nI pulled back, pushed her legs closer together, rested my head on her knees. The feeling of her hand petting my hair was delightful in so many ways. I felt proud, pleased, excited at having so obviously pleased the tall, beautiful woman who'd been so kind, so good to me when it had been her turn.\n\nI raised my head a minute later, found and handed her the champagne. She sipped it, handed back shakily as her orgasm slowly faded.\n\nI thought for a moment, splashed a little water on my face, stood up.\n\n\"C'mon, Shannon. Let's get you to bed.\"\n\nA deep smile on her face, she stepped out of the tub and allowed me to dry her with a towel. Two minutes later, we were in her bed, cuddling, hands gently touching.\n\n\"You're a wonderful lover, Sydney. Thank you.\"\n\n\"Thank you,&hairsp; Shannon. Um...\"\n\n\"Um?\"\n\n\"You're on the left side now. Do you want to move?\"\n\n\"Too sleepy,\" she chuckled. \"Move me in an hour or two.\"\n\nI could do that, I thought.\n\nI snuggled in against her, felt her breast under my hand, gave a sleepy smile.\n\nYes, I could definitely do that.\n\n<center>+</center>\n\n<center> Thanks for reading! Please remember to vote, if not for this story, then for one you think is better.</center>"
    ],
    "authorname": "TarnishedPenny",
    "tags": [
        "halloween",
        "costume",
        "costume party",
        "hot tub",
        "lesbian",
        "first time"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/it-started-with-a-unicorn"
}
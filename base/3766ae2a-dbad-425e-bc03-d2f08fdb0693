{
    "title": "Succubus Summoning 210",
    "pages": [
        "\"Do you know why I'm the one accompanying you on this search?\" N\u00ffte asked Phil.\n\nPhil shook his head.\n\nThey were down in the tunnels below the castle. Their only illumination was provided by a small globe of yellow light that orbited Phil like a planetary body. A basic light spell. One most first year warlocks knew. He'd summoned it as N\u00ffte had led him down some stairs and into the pitch-black cellar system. It was a weak light source. The walls were mostly hidden in thick clotted shadows. To Phil's imagination the darkness seemed to have a tangible presence, as if it was composed of substance rather than the absence of light. He was even a little afraid the darkness might reach out and take his fragile ball of light like wolves taking down a lamb.\n\n\"The others want to have fun with our intruders without upsetting you,\" N\u00ffte said.\n\n\"By fun, you mean kill them?\" Phil asked.\n\n\"It is the customary way of dealing with invading warlocks,\" N\u00ffte said.\n\n\"Even after I asked them to help them,\" Phil said, dejected.\n\nN\u00ffte smiled. Her porcelain-pale face was luminous in the gloom of the tunnel.\n\n\"Succubi are manipulative creatures,\" she said. \"We're good at finding ways of disregarding our master's wishes and doing what we want.\"\n\n\"And you want to kill the invaders, even though they're my friends from college,\" Phil said.\n\nThis whole master thing seemed poorly named.\n\n\"They do. It doesn't appeal to me,\" N\u00ffte said. \"Novices, out of their element\u2014it isn't very sporting.\"\n\n\"So that's why they paired you with me,\" Phil said.\n\nN\u00ffte smiled.\n\nThe darkness pressed all around them. He thought he glimpsed figures in the corner of his eye and his imagination painted pin-ups of sultry naked beauties with full, sensual lips and voluptuous exposed breasts. When he turned to look at them directly they vanished to be replaced by formless, abyss-black darkness. It wasn't just his eyes playing tricks on him. He heard things as well. Whispers. Or maybe it was the susurration of water flowing on the other side of the wall.\n\nNo. Whispers. He thought he could pick out words, but not clearly enough to understand their meaning. Even though he didn't understand them, there was a suggestion of seduction and lewdness that tickled his loins.\n\n\"This is one of the more dangerous areas of the castle,\" N\u00ffte said as they continued down the tunnel.\n\nPhil was only partially paying attention. The whispers distracted him. He concentrated on trying to decipher their meaning. It was important, he sensed. Profound. Understanding would bring him true bliss.\n\n\"The other reason they sent you down here with me is because we didn't think we'd be able to reach the novice in time,\" N\u00ffte continued. \"I'm surprised they haven't already been overwhelmed.\"\n\nThere was a commotion up ahead. Light flickered amongst the clotted shadows.\n\n\"Sparqblaast!\" a youthful voice cried out in triumph.\n\nLight flashed and a percussive blast ricocheted off the stonework.\n\n\"Ha ha. Take that you skanky hos.\"\n\n\"Ah,\" N\u00ffte said. \"That would explain it.\" Her finely chiselled features twisted up in disgust. \"Too immature and most obnoxious.\"\n\nPhil wasn't paying attention. The whispers had increased in volume. They sounded so close too, like soft sultry lips were whispering them right into his ears. He strained to dissect their meaning. The sounds triggered a warm flow of blood to his sex and filled his thoughts with carnal images. He stopped walking and focused on the seductive voices. If only he could understand their true meaning. He felt sure it would increase his pleasure still further.\n\nHe felt the soft pressure of what felt like large boobs against his back. That gentle pressure expanded until it felt as though the whole of his back was enveloped in a warm layer of silky darkness. He felt warm hands knead his neck and shoulders, melting the tension within them.\n\n\"Lie back,\" sultry voices whispered in his ear. \"Lie back and relax. Let us take care of you. Pamper you.\"\n\nPhil rocked on his feet. He felt the strong urge to let go and fall back into the soft darkness. The shadows, as solid and sticky as tar, flowed around his sides and began to engulf him.\n\nN\u00ffte grabbed the front of Phil's robe and pulled him out of the sticky darkness. She directed a stern glance over Phil's shoulder and the shadows melted back into the wall with disappointed sighs.\n\n\"Whereas you are on the right side of maturity and naive enough to be suggestible,\" N\u00ffte said.\n\nPhil blinked in confusion and then felt a warm blush of embarrassment on his cheeks as he realised what had happened. He glanced over his shoulder. There was nothing there but impenetrable darkness, and yet...\n\nWas that his imagination or could he see the vague contours of sultry faces? They pouted sensual lips and blew kisses at him.\n\n\"It's no disgrace at your level,\" N\u00ffte said. \"The tellani'nsara are one of the stronger lust elementals. Few can resist their charms for long.\"\n\nA dirty smile blemished her otherwise regal features.\n\n\"We'll summon up a pair later and I'll let them play with you under more controlled circumstances.\"\n\nAnother loud bang reverberated down the tunnel. Azure energy crackled along the walls.\n\nN\u00ffte gave a distasteful frown. \"First we should help your friend before his activities attracts the attention of things for which his youthfulness provides no immunity.\"\n\nThe carried on towards the commotion. Phil saw it was Joey Chalk. Standing next to him was his daemon\u2014a squat long-limbed thing with large, upward-pointing tusks. Both were being orbited by a pair of yellow globs. The weak light leant Chalk a grotesque visage as his piggy face twisted up in eager snarls as he blasted coloured light out of his knuckles.\n\n\"Hey Joey,\" Phil said.\n\nChalk turned, pointed a fist at Phil and said, \"Sparqblaast.\" His hand jerked back as if recoiling from firing a bullet. A blue blast roared towards Phil. He was barely able to get a defensive shield up in time.\n\n\"What the fuck!\" Phil said as the blast impacted against his shield and dissipated in dancing blue sparks.\n\n\"I saw what your hos did to John Brennan,\" Chalk said. \"They're not going to get me.\"\n\nHe fired another bolt of blue energy at Phil. The shield took the blast, but his skull still felt like a bell struck by a hammer.\n\n\"We came down here to help you!\" Phil called out.\n\nChalk paused. His close-set eyes squinted at Phil.\n\n\"This place is really dangerous,\" Phil said. \"What are you doing here?\"\n\n\"We came here for Gary,\" Chalk said. \"Your other ho, the one with green hair that dresses like a slutty nurse, has him. We're going to get him back before she has a chance to suck out his soul.\"\n\nGary Dever? Here? Phil looked over at N\u00ffte.\n\nThe succubus looked thoughtful. \"They must have used a soul divination spell,\" she mused.\n\n\"Yeah, we did. So there's no point trying to lie.\" Chalk's fist crackled with blue energy. \"We know he's here and we're not going to leave until you hand him over.\"\n\nN\u00ffte sniffed the air and glanced down the tunnel ahead of them. \"We should leave now. So far your young age and lack of interest in sex has protected you from the tellani'nsara. But the tuell'daqhabbala are rising up out of the Cloaqal depths and they like nothing better than violating tender young boyflesh. They are dangerous to you.\"\n\nChalk sneered. \"There's nothing dangerous here. This is the Circle of Lust. Everyone knows it's the weakest circle of hell.\"\n\n\"We should do as she says,\" Phil said. He wasn't sure if he qualified as 'tender young boyflesh' and didn't want to hang around long enough to find out.\n\nChalk wasn't in any mood to move. He walked up to N\u00ffte and looked her up and down.\n\n\"Why did you pick a succubus for your daemon anyway?\" he asked Phil. \"Aside from a few cheap glamours they're useless in a fight. Why would anyone bother with such a weak daemon?\"\n\n\"You'll find out when you're older,\" N\u00ffte said with a smug smile.\n\nChalk snorted. \"Why I reckon Spleenfucka here,\" he motioned to his tusked daemon behind him, \"could splat her without any effort at all.\"\n\nThe tusked daemon's eyes widened. It glanced at N\u00ffte in alarm.\n\n\"We should make them fight,\" Chalk said. \"Then you'd see how useless succubi are.\"\n\nThe tusked daemon shook its head. N\u00ffte smiled at it. The daemon blanched.\n\nChalk didn't notice. He continued to look scornfully at N\u00ffte. \"Nah, it wouldn't be worth it. It would be a waste of Spleenfucka's abilities. Why I bet I could beat her on my own,\" Chalk said. \n\nN\u00ffte arched an eyebrow.\n\n\"She might have got John, but I'm a disciple of Wrath. No one fucks with us.\"\n\nHe got up in N\u00ffte's face like a boxer trying to intimidate their opponent at a pre-fight press conference. Given that he was a good few inches shorter than her and she was completely unfazed by his antics, it came off as more comical than threatening.\n\n\"That's very nice,\" N\u00ffte said. \"But I think it's time we got out of these tunnels.\"\n\nChalk looked at Phil in disgust. \"Do you always let your daemon speak for you? That's real pussy behaviour. You should keep her in line. Give her the pimp hand. Like this.\"\n\nChalk slapped N\u00ffte, hard, on the side of her face.\n\nThere was a sudden pause as if the world had taken a harsh intake of breath. The echo of palm striking cheek reverberated down the darkened corridor. N\u00ffte turned her face back and... \n\n... and Phil was running back down the darkened corridor as fast as his legs would carry him. He was not alone. The long-limbed goblin daemon was alongside him. They both pulled up at what felt like minimum safe distance.\n\n\"Most,\" the daemon said. \"Most succubi. Not all. And not that one. Definitely not that one.\" It shuddered.\n\nFar away down the dark tunnel a little ball of yellow light winked out. The passageway slipped into impenetrable shadow. Phil stood in a small circle of yellow light with the tusked daemon. Out in the darkness they heard Joey Chalk cry out. The cry was abruptly cut off and replaced with unsettling liquid sounds.\n\n\"Most is not the same as all,\" the daemon said, shaking his head. \"You humans always struggle with that one.\"\n\nThe daemon no longer looked quite so daemonic. It had morphed into the form of a young man in jeans and a T-shirt.\n\n\"Hey, you're a Kullockian rage daemon,\" Phil said. The daemon looked just like Carnivrillarofax, except maybe a couple of years younger.\n\nThe daemon nodded. It offered his hand. \"Sepulcarafax,\" he said.\n\n\"Phil.\" He shook hands and then wondered if that was a good idea. He'd seen Carnivrillarofax tear arms out of sockets as if they were noting more than paper decorations. \"Um, you're not going to kill me, are you?\"\n\nSepulcarafax laughed incredulously. \"N\u00ffte's already pissed. Can you imagine what she'd do to me if I killed one of her pets? No way. We rage daemons might like getting angry and rowdy, but we're not crazy.\"\n\nPhil was relieved he wasn't the only one that found N\u00ffte utterly terrifying.\n\nSepulcarafax peered down the tunnel.\n\n\"You humans don't have good vision in the dark do you?\"\n\n\"No.\" Phil saw an impenetrable wall of darkness. Anything could have been on the other side of it.\n\nSepulcarafax winced. \"Probably for the best.\"\n\nPhil couldn't see what N\u00ffte was doing, but the sounds he heard made his teeth shiver.\n\n\"Poor bastard,\" Sepulcarafax said.\n\n\"We were supposed to help him find his way back to Earth,\" Phil said.\n\nHis conscience was telling him he should go back and order N\u00ffte to stop. Then he remembered her face\u2014a brief glimpse of eyes that burned like cold dead stars and a white face like countless death masks compacted into the purest representation of icy rage.\n\nAnd that smile...\n\nPhil remained where he was.\n\n\"I don't think it's worked out too well,\" he said.\n\n\"Not your fault,\" Sepulcarafax said. \"That's always been his problem\u2014lashes out at the people who try to help him.\"\n\nSepulcarafax flinched again. Phil heard sounds like hooks going through wet meat.\n\n\"It would have happened sooner or later,\" Sepulcarafax said. \"Dude had severe issues. I mean I think he thought we were Pok\u00e9mon or something. Whenever we encountered a new warlock he'd always look at their daemon and ask the same thing: 'Reckon you could take them?'\"\n\n\"I thought Wrath daemons liked fighting.\"\n\n\"We like beating up the things we know we can beat up. Some of the Pride daemons might go in for the honour of a close-fought fight. Everyone else thinks they're weird.\"\n\nPhil heard more unsettling sounds. He couldn't describe them exactly\u2014Blade on meat? Bone scraping against bone\u2014only the visceral shivers they triggered in his brain. His bowels felt watery. He talked to Sepulcarafax to take his mind off them.\n\n\"Hey, as you're a Kullockian rage daemon, do you know Carnivrillarofax?\"\n\nSepulcarafax gave him a very strange look.\n\nYeah, it was a stupid question really. Like an American asking a random Englishmen if he happened to know another random Englishmen because they both happened to live in London.\n\nEventually the noises stopped and were replaced by the familiar clicking of N\u00ffte's high heels on stone flagstones as she walked to them. She entered the small circle of light and Phil saw she was plastered in blood and gore from head to toe. She looked as though she'd spent the last half hour rolling around in freshly eviscerated animal carcasses. Despite this\u2014or maybe even because of it\u2014she exuded a powerful and feral sex appeal that tugged at Phil.\n\n\"You're giving off that fear scent again,\" N\u00ffte said to him. There was an unhealthy gleam in her black eyes. \"I find it so arousing.\" Wan blue sparks flickered from the black collar around her throat.\n\nOf course Phil was giving off that fear smell. Near as he could tell, N\u00ffte had torn Chalk to pieces and wiped those pieces all over her body like they were tissues. He sidled away along the wall as N\u00ffte took a step towards him.\n\n\"You've got something on your...\" Phil touched his cheek.\n\nN\u00ffte wiped a hand across the cheek Phil indicated and a fragment of bloody skull with part of the scalp still attached fell onto the floor.\n\n\"I thought killing him didn't appeal to you,\" Phil said.\n\n\"He challenged me,\" N\u00ffte said. \"I was duty-bound to accept.\"\n\nShe beckoned Sepulcarafax over and dropped what looked like a blood-stained orb into his hands. Pale white light shone out between his fingers.\n\n\"This might sound weird,\" Sepulcarafax said as he looked down at the orb, \"but I was hoping he'd figure it out before it came to this.\"\n\n\"It was always going to be his future,\" N\u00ffte said. \"If not me, something else. A weak master is no use to a daemon.\"\n\n\"True, true,\" Sepulcarafax agreed. \"Still, I dunno, it doesn't feel very satisfying when they're this young. Too easy.\"\n\n\"Stupidity was his problem, not age,\" N\u00ffte said.\n\nShe turned to Phil.\n\n\"And you shouldn't feel sorry for him at all,\" N\u00ffte said. \"I sensed his fantasies. He wanted to drill a hole in the back of your skull and ram his cock into it.\"\n\n\"Ugh, that's sort of gross,\" Phil said. He inched away along the wall.\n\n\"I think he saw it in a film,\" N\u00ffte said. \"He also fantasised about getting Sepulcarafax to rape me and Verd\u00e9 while he watched.\"\n\n\"That would have been difficult,\" Sepulcarafax said.\n\n\"Rage daemons don't do sex,\" N\u00ffte said.\n\n\"No bits,\" Sepulcarafax explained. He still kept a wary eye on N\u00ffte.\n\n\"That's not an insurmountable obstacle to one with mastery of the arts of pleasure.\" N\u00ffte smiled. She made a circle out of her thumb and forefinger. Her tail arced up and thrust in and out of the makeshift hoop. The bulbous tip of her tail was bloody and strands of tissue clung to the point as though it had been driven into and then ripped out of something soft and fleshy.\n\nPhil hadn't seen a daemon turn white with fear before. It was usually the humans that were supposed to do that.\n\nN\u00ffte turned her attention to Phil. There was an unhealthy gleam in her black eyes.\n\n\"That was most exhilarating,\" she said. She closed her eyes and stretched her arms and back. \"Mmm. The smell of blood when shed. The feel of it against my skin. To lose oneself in the frenzy of primal emotions is so intoxicating.\"\n\nHer eyes flicked open. She stared directly at Phil. She rubbed a bloody hand against her latex-covered crotch. Her pale cheeks might have reddened. It was hard to tell amongst all the blood.\n\n\"I feel so incredibly turned on right now,\" she said. She reached down and unzipped her crotch.\n\n\"Um, I'll be off then,\" Sepulcarafax said. While N\u00ffte's attention was on Phil he snuck away down the tunnel as fast as he could manage without actually breaking out into a run.\n\nThe zip in N\u00ffte's crotch was fully open. The smell of her arousal cut through even the stench of torn apart vitals and wrapped around Phil like a hot fist. It was as if N\u00ffte's aura had expanded like a summer thunderstorm to envelop him.\n\n\"Yes, we need to fuck right now,\" N\u00ffte said, her voice tailing off in an erotic sigh.\n\n* * * *\n\nHerbie Higgins had also cast his own form of the soul divination spell. Unlike Darvill he was heading straight for the exit.\n\nHe liked Gary Dever. He could be annoying sometimes, but most of the time he was a decent guy. And as a member of one of the Favoured Families Dever had access to knowledge and privileges that was useful to a lowly Outreach like Higgins.\n\nWas Dever a bloke you'd risk going to hell to rescue? Herbie guessed so. You had to stand up for your mates. But that had been before they were all separated and scattered across the Second Circle of Lust. With the other three, and especially with Darvill\u2014who was probably the strongest warlock in their class except for maybe Rowling\u2014Herbie would have given it a go.\n\nNot now.\n\nNow he was taking the sensible option and heading straight for the exit. He felt shitty about it, but they couldn't help Dever if they were dead. The best he could do was maybe find one of Wargsnouts' security patrols and see if they could help with yanking the others out.\n\nHe had to find the exit first.\n\nThis area of the castle or mansion was a little weird. He thought they'd entered the Circle of Lust. This was where the succubi, incubi and other assorted sex daemons hung out. He'd been expecting the sensual depravities of a high-class brothel or a luxurious harem from ages past. Instead he'd ended up in some kind of creepy nursery. He walked through playrooms where boxes of toys and old wooden rocking horses were covered in cobwebs and hadn't been used in some time.\n\nAt least no one was home. It seemed like he'd been fortunate enough to be teleported to an abandoned area of the building. He was even starting to think he might be super lucky enough to make it to the exit without encountering any Lust daemons when\u2014frustratingly\u2014he got lost.\n\nSomething was fucking with his perception. Or maybe even with the rooms and corridors. When he tried to retrace his steps he found himself in rooms and hallways he hadn't seen before.\n\n\"Someone's playing games with us, buddy,\" Herbie said to the minor nebrit sitting on his shoulder.\n\nThe minor nebrit, not being much of a speaker, gnashed its teeth together and sprayed spittle.\n\nHerbie heard someone or something approach. He ducked away into an alcove, which opened out into a storeroom or maybe some kind of playroom. Brightly painted murals of cartoon figures covered the walls. He placed his back to one of the walls and hid as the unseen entity approached. They were singing, he realised, some kind of childish nursery rhyme.\n\nIt was a child, or at least superficially resembled one. A girl skipped through the archway. She was wearing a blue dress and her cornflower-blue hair stuck up in spikes. If it wasn't for her horns, tail and little blue bat wings Herbie would have thought that somehow a child had ended up getting lost in hell with him.\n\nMust be some kind of low-ranking lust imp, he thought. Or possibly a fully-fledged succubus that specialised in tempting paedophiles. She didn't look too scary.",
        "She didn't see him either.\n\nHe waited until she entered the room and then stepped out of the shadows behind her, blocking the exit with his considerable bulk in the process.\n\nHerbie hated children. They were always making fun of his weight.\n\nUntil he caught them. Then the teasing changed to tears and begging when they found out that extra weight made it very easy to crush or snap child-sized limbs.\n\nThe girl turned around and gave a startled jump when she noticed Herbie was there.\n\n\"Oh there you are,\" she said. \"We've been looking for you.\"\n\n\"We? There are others?\" Herbie asked.\n\n\"Oh yes,\" the little blue-haired girl said. \"They're out looking for your friends.\"\n\nHerbie pondered her words.\n\n\"So they're not with you right now?\" he asked.\n\nThe imp shook her head. \"Nope,\" she said with pride. \"I found you all by myself.\"\n\nThat childish excitement wavered when she saw the expression on Herbie's face. He took a step forwards. She took a step backwards. He took a step forwards. She took a step backwards. He took a step forwards. She backed up against the wall. There was nowhere else to go.\n\nHerbie loomed over her. The minor nebrit on his shoulder chomped its teeth and chattered excitedly. Herbie reached up to pet it. He looked down at the little blue-haired girl and smiled wide enough to reveal his teeth.\n\n\"I think we might just eat you,\" he said.\n\nThe little imp with blue hair meeped in fear.\n\n* * * *\n\n\"This doesn't seem the right time or place,\" Phil said.\n\nN\u00ffte undid her corset and her voluptuous white boobs bounced free. Phil had seen them before, but they still drew his gaze like a moth to a flame every time.\n\n\"What about the tuell'daqhabbala?\"Phil said, still sidling backwards.\n\n\"Gone back to the Cloaqal depths,\" N\u00ffte said. \"There's nothing here to interest them now.\"\n\nShe nibbled on her lower lip. The force of her arousal gripped Phil tighter. He felt phantom fingers tickle the underside of his scrotal sac and dance up his shaft.\n\n\"Shouldn't we go and look for the others?\" Phil asked.\n\n\"The other succubi will find them.\"\n\nPhil knew that. It's what he was afraid of.\n\nN\u00ffte walked towards him, all elegance and impossibly voluptuous curves.\n\n\"Shouldn't we clean up first,\" Phil said.\n\nBy we he meant N\u00ffte. She looked like she'd taken a shower of gore in an abattoir.\n\n\"And waste all this glorious blood,\" N\u00ffte said. She ran a finger across her blood-soaked breasts, put it between her full lips and sucked. Her eyelids fluttered as she savoured the taste.\n\nPhil whitened and felt a little queasy. Not long ago that had been inside Joey Chalk.\n\nN\u00ffte put a finger to her lips.\n\n\"Hmm, I can see you'll need a little extra help,\" she said.\n\nShe formed a steeple with her hands as if praying.\n\n\"Enhalarat mod tellani'nsara.\"\n\nLiving shadows detached from the walls and enfolded Phil's arms. He felt like he'd been sandwiched between two soft nubile forms. Sensuous red lips coalesced out of the darkness and whispered lewd suggestions into his ears. Again he couldn't make out the words, but they flipped a primal switch in his brain. Pornographic imagery\u2014plump lips wrapped around erect cocks\u2014crept unbidden into his thoughts. Once again he felt the pressure of soft sticky cushions against his back. Tension fled his muscles and he sank back into the warm shadow. Sticky black tendrils pulled aside his robes. His penis, stoked by the lascivious whispers permeating his ears, rose to full erection. A thicker tendril, more a pipe-like extrusion, emerged from the pool of shadow between his legs. A vivid red orifice\u2014a cross between a woman's sensual mouth and neatly tended vagina\u2014opened at the tip. The tube curled back as if it intended to engulf Phil's erection.\n\nN\u00ffte wagged a finger. The mouths blowing warm air and lewd suggestions into Phil's ears sighed their disappointment as the tube sank back into the black morass.\n\nN\u00ffte stepped up close to him. He felt the heat pouring from her body. She leant close and sniffed his neck and behind his ears.\n\n\"As much as I enjoy the fear scent you give off, the spilled blood of others should not be something to be afraid of.\" She caressed Phil's side, leaving behind a wet smear of blood.\n\nIt wasn't the blood that terrified Phil but how it had got there. Not that he had a chance to say that as N\u00ffte put her hands behind his head and pulled him down into her substantial cleavage. She jiggled her chest and the sensation of her heavy boobs pressing and rubbing against his face was a good one. While she shook her breasts in his face, she reached down and wrapped a slick hand around his erection and pumped up and down. Also a good sensation.\n\nThe sticky feel of coagulated blood against his cheeks, the coppery tang of the blood that had pooled between her breasts, the knowledge the lubricant making her hand feel so slick and silky against his cock was even more blood\u2014not so good sensations.\n\nIt didn't matter. N\u00ffte was a succubus. Her touch, her breath, her smell, her heat, her very presence was enough to overwhelm mere revulsion. As her hand pumped his erection and his arousal grew, he started to turn into rather than away from her blood-covered boobs. A primal instinct took over him and he found himself licking and sucking on her erect nipple without caring what covered it, or what triggered that salty taste on his tongue.\n\n\"Good, good,\" N\u00ffte purred. Her hand caressed the back of his head. \"A wielder of daemons should not be squeamish.\"\n\nShe stepped back, placed a hand on his chest and pushed. Phil fell backwards. It should have been against the wall, but that wasn't there anymore and he tumbled into darkness as black as pitch. His fall was broken by what felt like large sticky cushions. Female figures rose up out of the dark pool surrounding him. His arms were taken and his hands clamped between warm female bosoms. Heads surfaced in the impenetrable mire and whispered obscene suggestions to him. A hand and arm, as black as though it had been dipped in crude oil, reached over and playfully tweaked his nipple.\n\nN\u00ffte removed her remaining clothes and joined him on top of the malleable surface. As she straddled him he looked up into her black eyes and saw a perfect avatar of feral lust. The blood liberally splattered all over her pale flesh only added to her barbaric beauty. She reached behind her head and undid her austere ponytail. Her long black hair fell free and hung over Phil like a curtain.\n\nThe effect was rather spoilt when a bloodied eyeball slid off her hair and bounced off Phil's chest.\n\nThat was Joey Chalk's eyeball, Phil realised. Not so long ago it had been safely housed within the other student's skull. Queasiness clawed at his stomach.\n\nN\u00ffte rolled her eyes in disapproval. \"This is supposed to be a celebration of triumph,\" she said.\n\nShe got his attention back by wrapping a hand around his cock and squeezing. She lowered her body until her breasts were pressed against his crotch. She moved up his body, sliding his erection through the soft groove of her cleavage while using her soft breasts to smear blood and gore up Phil's naked torso. She was boiling hot and he felt her heat as she pressed her flesh against his. He shivered with arousal as his cock slid back and forth between the twin pillows of her breasts. It didn't take long for her body-to-body massage to leave him just as plastered in spilt blood as her. This should have revolted him, but her heat, her aura and the lewd whispers of the shadow women overrode everything.\n\nN\u00ffte slid up until her face was level with his. Her bright black eyes stared right into his as she lowered her head and crushed her soft lips against his. The kiss was like breathing in a hot desert wind laden with exotic scents.\n\nShe ended it and stared into his eyes. \"This is the old way,\" she said. \"A succubus and her warlock, fucking while covered in the blood of their freshly slain enemies.\"\n\nChalk hadn't been an enemy, a small voice whined at the back of Phil's skull. He'd been a friend. Okay, maybe not a friend, but he'd still been a fellow student at Wargsnouts.\n\nNot anymore. Phil and Rosa were covered in his remains.\n\nN\u00ffte sat up in his lap and that whining voice at the back of his skull receded further into the distance. The succubus placed his erection flat against her mons and moved up and down until Phil was shivering with the need to enter her. She didn't tease him for long. She rose higher, pushed his cock down between the naked folds of her sex and sat down. Her labia fluffed out as she sank down on Phil's erection and drew him all the way up inside her.\n\nPhil knew from experience N\u00ffte had much more control over her vagina than a human woman. Sometimes it was a place of pain and torture as N\u00ffte used the muscular walls of her sex to crush and wrench any penis unfortunate to be inside her. Other times it was a place of pleasure and bliss as she let the walls of her sex melt and enfold a penis in waves of soft smothering flesh. This time it was a place of extravagant pleasure.\n\nN\u00ffte spread her inky black wings and rose up and down on Phil. Her black eyes shone and she pouted full black lips as she rode him. The round globes of her breasts swayed back and forth with the motions of her body. She varied both the speed and direction of her thrusts. Sometimes she bounced up and down, with the round cushions of her ass slapping against his crotch with every down stroke. After a few minutes of that she switched to lateral movements and rolled her pelvis against him. Inside, in contrast to the violence of her movements, the soft walls of her pussy tenderly stroked up and down his erection.\n\nMore female heads, sighing in pleasure, rose up out of the black morass of shadow beneath him. Deft tongues tickled his nipples, soft lips whispered taboo and lascivious secrets into his ears, and hot mouths wrapped around his toes and sucked. The soft mass of darkness moved beneath him, moved with him. An unseen tongue tickled up and down his perineum and lapped at the underside of his balls.\n\n\"Mmm good, novice, good,\" N\u00ffte murmured. \"Hold it in.\"\n\nShe clutched her blood-soaked breasts and found an easy rhythm. Her soft pussy squeezed and sucked on his swollen cock. Phil no longer registered the sight or smell of the blood that covered them.\n\n\"Good good,\" N\u00ffte said.\n\nShe gradually built up to a climax while Phil struggled to keep his at bay.\n\n\"And come,\" she said.\n\nShe folded her body over Phil. Her hands rubbed up his sides and along his arms. Her large breasts pressed against his chest. His cock was drawn all the way inside her and wrapped in layer after layer of luxuriously soft flesh. Her vagina contracted against him and sucked him over the edge with gentle rhythmic squeezes.\n\nPhil did as he was told. N\u00ffte's luscious pussy left little choice in the matter. A euphoric feeling of release overcame him as his cock swelled and expelled a thick wad of semen into her.\n\nN\u00ffte relaxed on top of him.\n\n\"It is good to taste the primal delights of triu\u2014\"\n\nShe paused. Puzzlement crossed her face as she looked down at Phil. She shifted position on top of him. The soft folds within her vagina enveloped his cock as if giving him a thorough tasting. When that failed to give her the answers she required, she sat back up and clasped his sides tightly with her thighs. His penis was still inside her and she showed no inclination of releasing it.\n\nPhil's blissful euphoria gave away to unease. Her poise had changed, become colder.\n\nN\u00ffte extended her black wings. Her soft vagina contracted around his cock and took him back to full hardness within a few short gasps. Her black eyes glowed and a faint purple nimbus outlined her form.\n\n... and him.\n\nThe black collar around her throat started emitting blue sparks. Phil's unease grew.\n\nHe was enveloped by a sensation of tingly heat that made his balls itch. N\u00ffte lightly ran her nails down his sides, a tickling sensation that made him think she was gathering his energy and dragging it down to his balls. He felt a weird\u2014but not unpleasant\u2014trickling sensation wherever the intimate skin of his cock came into contact with the intimate skin of her vagina.\n\nWas she draining him?\n\nN\u00ffte saw his disquiet and motioned to the shadow-girls that had emerged from the black morass he was lying on. Lying on became lying in as the sticky pool of darkness drew him deeper into its cloying grip. His hands and feet were bound with elastic bands of shadows. The shadow-girls giggled as they gagged him with the same.\n\nN\u00ffte puffed her black lips out in a sexy pout. She wiggled her hips and sank all the way down on Phil. His fully erect cock was drawn up inside her until the swollen head came up against a soft nub of tissue. It gave and then Phil's glans was enveloped in moist and sinfully pliant flesh.\n\nNo, Phil thought. The blood. His fear. She'd lost control. And he could do nothing about it. His limbs were bound, his mouth gagged.\n\nThe pale curves of N\u00ffte's boobs, still stained with blood, swelled as she inhaled. It wasn't just air she inhaled. The sinful orifice buried deep within her took hold of Phil and sucked.\n\nAnd he no longer cared.\n\nAbout anything.\n\nHis body bucked as he orgasmed. The ecstatic eruption of release felt so good it washed all his fear away. He squirmed beneath her, lost helplessly to pleasure as that weird trickling sensation intensified to a flood.\n\nFor a moment Phil felt as though he was emptying his totality into her, then N\u00ffte relaxed her vagina and the flow stopped. He fell back onto the soft mass of living shadow. Dear fuck, that had been intense, he thought as he struggled to pick up the scrambled remnants of his thoughts.\n\nIn contrast N\u00ffte was perfectly composed and thoughtful.\n\n\"As I thought, the Qi\u0161tu,\" she mused. \"That silly girl.\"\n\nShe frowned. She brought the fingers of her left hand together and held them straight like a dagger. For one terrifying moment Phil thought she was about to drive her sharp claws into his unprotected throat. Or even into his heart. Then she changed her mind and brought her left arm back to her side.\n\n\"No,\" she said. \"An injustice was corrected. It was her decision. It's not my place to judge.\"\n\nN\u00ffte changed her poise again, shedding the coldness. She smiled at him and tenderly stroked his cheek. She motioned to the shadow-girls and they released him. Once again he felt like he was lying on a pile of soft cushions rather than lying in a tar pit.\n\n\"My apologies,\" she said. \"I hadn't intended for it to get that intense. Blood and slaying has always brought out the wildness in my heart.\"\n\nN\u00ffte was lying. Phil could see it clearly. In fact he was surprised at how terrible N\u00ffte was at lying, given that succubi were supposed to be masters of deceitful flattery. Despite knowing she was clearly lying, he thought it best not to push the matter further. The last person to do that was currently splattered all over the both of them.\n\n\"I thought you'd lost control and were going to suck out my soul,\" Phil said, choosing to go along with N\u00ffte's story. \"These primal celebrations of bloody victory seem a little hazardous to the warlock.\"\n\nN\u00ffte smiled. \"A little danger enhances the eroticism.\" \n\nShe stood up, took his hand and helped him stand up out of the darkness.\n\n\"I imagine you'll want to go and search for the other students,\" N\u00ffte said.\n\n\"Should we go and get cleaned up fir...\" Phil tailed off. The lurid splatters of blood and gore covering N\u00ffte's body were fading away. The fluids were being absorbed into her skin. By the time she'd tied her long black hair up in a ponytail the stains had all faded away. \"Uh, nothing,\" Phil said.\n\nHe still looked and smelt like he'd been rolling around in an abattoir.\n\n\"I wanted to confirm something,\" N\u00ffte said as they were walking back up the steps that led out of the tunnels. \"That's the answer to the question you wanted to ask but were too afraid to,\" she added.\n\nShe still hadn't answered it fully, but Phil thought it safer not to push the matter.\n\n\"I would avoid having sex with Rosa for a while,\" N\u00ffte said. \"If she learns the same thing as I have she'll likely incinerate you.\"\n\n* * * *\n\nDarvill encountered Rosa in a large bedchamber.\n\nHe'd been following the signal he hoped led to Gary Dever. This had led him to a large room upholstered in what appeared to be crimson latex. The room was a strange hybrid of dungeon and boudoir. There were chains hanging from the walls. Gothic torch brackets wrought from black metal studded the walls at regular intervals. In one corner was an X-shaped wooden cross. In the other corner\u2014a dog cage. On the other side of the room was a big round bed. The sheets were red and shiny like the walls.\n\nRosa lounged by the exit on a plush couch. She wore a latex bra that was the same shade of red as the walls and emphasised her large breasts. At her waist she wore a skirt of the same material that was so short it might have been better classified as a belt. Her elbow-length gloves and thigh-high boots covered more flesh than the rest of her outfit. She looked incredibly sexy, but that was hardly surprising given she was a succubus.\n\nDarvill remembered Rosa. In her other form of a black-haired dominatrix she'd drained John Brennan to death right in front of the whole class.\n\nNo, Darvill didn't think that had been her.\n\nHe didn't think the succubus with the green hair and the one that wore the fetish nurse outfit were the same daemon either.\n\nThis was a problem. If true it meant they had four, maybe more, succubi to worry about rather than two.\n\nHe watched Rosa warily. He remembered when Rowling had surprised them by introducing her and Verd\u00e9 as though they were his friends. She hadn't looked that powerful of a daemon.\n\n\"Wouldn't you like to come over her and lie next to me?\" Rosa asked, her voice all sweetness and enticing nectar.\n\nHe felt the force of her allure envelop him and press up against his wards. This wasn't even a proper charm; it was just the pull of her natural erotic appeal.\n\nDarvill revised his estimate of her power.\n\nHe was in real trouble here, or should be. He'd got a sense of her raw power and realised he'd grossly underestimated it. If Rosa wanted to focus all of her supernaturally-enhanced seduction on him there was little chance he'd leave this room with his soul. She hadn't. For now she was content to lounge on her couch like a glamour-puss porn starlet.\n\nDarvill looked around the room. He glanced at the massive red bed that took up most of the far corner. His being here was no accident. The room\u2014and Rosa\u2014had been deliberately placed in his path. Scripted.\n\n\"You're here to tempt me,\" he said.\n\nRosa tilted her head seductively. \"Of course,\" she said.\n\n\"Sex doesn't interest me all that much,\" Darvill said. \"It's enjoyable and I'm sure your talents are considerable, but it's never been more than a pleasant distraction for me. My desires lie elsewhere.\"\n\nRosa's smile grew wider. She got up out of the couch.\n\n\"Who said I was going to tempt you with sex.\"\n\nShe held her hands out at her side. Flames flickered and grew out of her upturned palms. The fire danced up her arms until she was surrounded in a crackling nimbus of spectral flame. She gave a flick of each wrist and the flames jumped to the torch brackets on the walls. The sparks hopped from bracket to bracket, lighting each as though it had been doused in petrol, until Darvill was surrounded by burning torches.\n\n\"Power is your desire,\" Rosa said. \"Your ambition is to seek, learn and harness the power available to only the most skilled and experienced of warlocks. I can aid you. I can give you the power you've always dreamed of. We're already teaching your fellow student. I see greater hunger in your eyes. Maybe you'll become even stronger.\"\n\nThat did interest Darvill.\n",
        "His mouth went dry while he contemplated Rosa's offer.\n\nto be continued..."
    ],
    "authorname": "manyeyedhydra",
    "tags": [
        "succubus",
        "warlock",
        "magic",
        "demon",
        "shadows",
        "slime girl",
        "goo girl",
        "gore",
        "blood"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/succubus-summoning-210"
}
{
    "title": "Klaatu Barata Nikto Ch. 04",
    "pages": [
        "Klaatu drove immediately to the motel and checked out. He then tanked up at the filling station. They were soon on the interstate heading out of New Mexico. Even though he moved as quickly as possible Klaatu worried about the time. He was unsure how long it would take Maya's minder to wake up from her nap and discover them gone. Then all hell would break loose. He wanted to be as far away as possible when that happened.\n\nThe young man left Maya alone with her thoughts. She hadn't spoken a word since leaving the house.\n\n\"I never did get your name,\" said Maya breaking her silence.\n\n\"Klaatu Smith.\"\n\n\"Where are we going, Klaatu Smith?\"\n\n\"I'm going to take you home with me,\" he replied. \"After that, I don't know...someplace safe I hope.\"\n\n\"Is home on Mars? I wouldn't mind visiting Mars but I'm not sure I'd want to live there permanently. Of course I'd want to finally meet my father's side of the family.\"\n\n\"No, it's right here on Earth. It's in--\"\n\n\"Don't tell me. I want to be surprised. Just so long as it's somewhere out side of New Mexico I'll be happy. You know, I don't think I've traveled more than 40 miles from my birthplace.\"\n\n\"We've already driven more than 40 miles so all this is new territory to you.\" \n\n\"So far, it looks a lot like the old territory,\" Maya replied. \"I'd be surprise if they're not already after us.\" Klaatu didn't reply but he was already speeding up. It was far faster than he'd ever driven before. Yet, other cars were still sailing past him as if he were standing still.\n\n\"What's this about a spaghetti strainer? Of all the things I think I'd need a spaghetti strainer wouldn't be anywhere near the top of my list.\"\n\n\"It's actually a device that allows me to talk with my dad. It's also giving me powers like the one you saw.\"\n\n\"Maybe I can borrow yours.\"\n\n\"I left mine at home but we can try it when we get there.\"\n\n\"So your father is still alive?\"\n\n\"Yeah, but I didn't know even that much until just recently.\" Klaatu started giving Maya an account of what had happened since he turned 18. Naturally he omitted telling her about the incidents with Wanda and Betsy. Maya talked about growing up and Klaatu responded with his own stories. Klaatu soon realized he had things easy compared to the mental abuse Maya suffered under the dominance of Rev. Bryce. The time went quicker and they made good time but Klaatu was feeling tired.\n\n\"Would you like to take a turn at driving?\"\n\n\"I don't know how to drive,\" said Maya. \"I guess they figured I'd leave and never come back if I had the means and opportunity.\"\n\n\"I need to rest a bit so let's stop and eat. We should also get you some clothes and other things.\"\n\nMaya didn't have much of an appetite but she did have some French fries and a Coke at a roadside McDonald's. Klaatu drove the rest of the way into a nearby town and let Maya shop for clothes, toiletries and an overnight bag to carry them in. Klaatu hated shopping so he just waited outside. When Maya was finished shopping, he went inside and paid for the purchases with his credit card.\n\n\"I'll get us a couple of rooms,\" said Klaatu after more hours of driving. He had just pulled into a motel parking lot. It was fairly early. The young man knew he could never make it as a long haul truck driver.\n\n\"Rooms, Klaatu?\" Maya looked terrified. \"You're not going to leave me alone tonight.\"\n\n\"But--\"\n\n\"I know what you're going to say. Well, we can register as husband and wife or brother and sister. I trust you and they won't know the difference anyway.\"\n\n\"That wasn't what I was thinking.\"\n\n\"I don't care, Klaatu. You're not going to leave me alone.\"\n\nKlaatu shrugged his shoulders. \"I'll get a room with two beds.\" The young man was in truth worried about his subconscious mind seducing Maya like what happened with his mother. His father told him he'd be able to control his subconscious by now but he hadn't really been tested. Still, his mother didn't wind up in his bed again since that first incident so maybe Klaatu was being overly cautious. Even so, it would perhaps be best if he warned Maya and then she could decide whether or not she still wanted to share a room.\n\n\"I think I should warn you that my system is still adjusting to physical and mental changes that I'm told comes from wearing that helmet.\" They were sitting in their motel room, one with two queen beds.\n\n\"You mean it can make your body turn green? I already know about that,\" Maya said.\n\n\"Well, no but there are other things.\"\n\n\"Like what? Do you turn into a werewolf at the full moon? Don't worry. The full moon doesn't come for another couple of weeks.\"\n\n\"Well, no but--\"\n\n\"Give me an example.\"\n\n\"For example, I could uh...make you do...things...even in my sleep and I wouldn't even be aware I was making you do them because I was asleep.\" Klaatu knew he was blushing green trying to explain it.\n\n\"You mean like sex?\"\n\n\"Yeah...like that.\"\n\n\"Has it happened before?\"\n\n\"Once.\" Twice if you counted Wanda but that didn't count since he did it with her on purpose. There was no way Klaatu was going to give her a detailed explanation. He'd die of shame if she figured out it was his mom he had sex with. \"You wouldn't even be aware that you were doing something against your will.\"\n\n\"I'm not going to worry about it,\" Maya replied. \"I doubt if you're interested in me that way conscious or unconscious. I know I'm ugly.\"\n\n\"What gave you that idea? You're very pretty!\" Maya wasn't anything like Wanda but certainly attractive in her own way. She was at least six inches taller than Wanda, almost as tall as his mom. Maya had a slim build with a small bust. Her shoulder length brown hair hung down straight. She could pass for a much younger teenager than...my gosh Klaatu thought. She's going to have a birthday tomorrow. It won't be much of a birthday for her.\n\n\"You're just saying that. Really?\" Maya had a smooth complexion and pleasant face which at the time was blushing green too.\n\n\"Really,\" Klaatu confirmed.\n\n\"No one's ever told me I'm pretty. Thank you, Klaatu.\"\n\n\"Those people were just being mean.\"\n\n\"I realize that now,\" Maya replied. \"I'm going to take a shower,\" she added. The young woman got up and walked into the bathroom. Klaatu closed his eyes for a moment. He was asleep in an instant. When he woke it was dark and Klaatu felt a body beside him.\n\n\"It's happened again,\" Klaatu muttered. \"Wake up, Maya.\"\n\n\"I'm awake.\"\n\n\"Oh...but...I was wondering if you realize you're in my bed.\"\n\n\"Of course I realize it. I've been lying here awake waiting for you to have your way with me.\"\n\n\"Huh?\" \n\n\"I guess your little trick doesn't work with fellow Martians. I guess it's me who's going to have her way with you.\" Maya leaned over and kissed Klaatu on the lips. The kiss took Klaatu by surprise since it was apparently Maya's own idea.\n\n\"What are you waiting for, Klaatu Smith; an engraved invitation? Make love to me. I'm legal now if that's what you're worried about. It's after midnight.\" Klaatu wasn't even thinking of declining the invitation. Here was a woman who wanted him. Maya wasn't under any kind of hypnotic spell and she still wanted him. He would put the lessons he learned under Wanda's tutelage to good use. His prick rose to the occasion. Klaatu had a brief twinge of guilt for cheating on Wanda but then he realized it was ridiculous to think that way. Wanda had never been his to cheat on. Still, there was something he was forgetting. It could probably be blamed on fatigue or horniness but he was sure he'd remember it in the morning. Also, there was a nagging feeling that they were being watched. It was probably Klaatu just being paranoid.\n\nKlaatu woke up with his arm being caressed. It tickled him some. He opened his eyes and saw Maya looking at him.\n\n\"Good morning,\" she said and continued to caress him.\n\n\"What time is it?\"\n\n\"It's about six.\" Jeez! She was another early riser just like his mom.\n\n\"Don't you want to sleep some more?\"\n\n\"I'm wide awake. I guess it comes from all my clean country living. At least a part of you is wide awake too.\" His prick was standing at attention.\n\n\"That's just my morning wood. It means I gotta take a piss.\" Klaatu got up to take care of business and then decided to take a shower. It was the only way he'd be able to wake up. He felt better after that and could smell coffee brewing. \n\n\"Is something the matter?\" Maya looked kind of nervous.\n\n\"You wouldn't think less of me if I asked you something that might totally disgust you. I mean you could just say no. Okay?\"\n\n\"Okay,\" said Klaatu. It must be really something he thought. She's bright green.\n\n\"Um...may I suck your prick please?\" Klaatu smiled as his loins twitched.\n\n\"I'd love it if you did that.\" Maya looked relieved.\n\n\"Just lie back and relax.\" Klaatu did as requested and sighed with pleasure as he felt Maya's warm wet mouth envelope his hardened prick. He could get used to this. Maya was a talented cocksucker and it wasn't too long before Klaatu was shooting his sperm down the young woman's throat. She swallowed like a good girl. Gosh! No wonder the guys at school talked about fellatio so highly. On top of the pleasure experienced, there was no way the girl could\u2014\n\n\"Shit!\"\n\n\"What? Did I do something wrong? I'm sorry. This is my first time and I'm bound to make mistakes. I'll try harder next time.\"\n\n\"You didn't do anything wrong,\" Klaatu replied. \"It was me. I came inside you.\"\n\n\"Should I not have swallowed? I've never heard of it being poisonous.\"\n\n\"I'm not talking about right now. I'm talking about last night. I've given you a baby.\"\n\n\"That's possible I suppose,\" Maya replied. \"But it's not a sure thing.\"\n\n\"Oh, it's a sure thing all right from what I've been told.\" He related what his father told him about Martian sperm.\n\n\"So I'm going to be a mommy?\"\n\n\"It looks that way,\" said Klaatu. \"I feel really bad about this.\"\n\n\"Don't feel bad. Actually I think this is kind of cool.\" She caressed her tummy.\n\n\"You think it's cool?\"\n\n\"Well yeah. I've always been told I'd wind up an unwed mother like my mom if I didn't listen to Reverend Bryce. Well, I didn't listen to him and now I'm going to be an unwed mother just like my mom. I guess they were right. It's the best birthday gift you could have given me. I couldn't be more pleased.\" She kissed Klaatu on the cheek.\n\n\"Oh, yeah,\" the young man replied. \"Happy birthday.\" Klaatu supposed he should marry Maya and try to be a good husband and father. But then he couldn't marry Wanda. Multiple marriages weren't allowed as far as he knew. Didn't Wanda have priority? She was the first one he knocked up. Klaatu just knew it was something he was going to lose sleep over. Having these new powers weren't all they were cracked up to be when you were brought up to have a conscience.\n\nMaya took a shower and got dressed. The pair packed up, loaded the car and then ate the free continental breakfast the motel provided. Thirty minutes later they were on the road again. Klaatu guessed it was good they were getting an early start. They could be home in the early evening at this rate if everything went right.\n\n\"I've got to warn you about my mom,\" said Klaatu. He'd just pulled into the driveway outside his home. \"She might seem a little...strange when you first meet her. But when you get to know her she'll seem very strange.\"\n\n\"She can't be any stranger than my mom. I heard my mom saying she remembered her as being ditzy?\"\n\n\"That describes her pretty well.\"\n\n\"So she's still ditzy? She's not violent, is she?\"\n\n\"Yes to the first question, no to the second question. It's just that she can be--\"\n\n\"Just let me meet her. For goodness sake, Klaatu! I'm more nervous now than when you started talking.\"\n\n\"I know,\" said Klaatu. \"I should quit trying to explain, warn or apologize to people when it comes to my mom. She's really a neat lady. You'll like her but if you don't understand something she says, just ask me and I'll try to translate it for you.\"\n\n\"I'm sure I'll get along fine with her,\" said Maya. \n\n\"Hi, Mom,\" said Klaatu when he saw his mother sitting at the kitchen table. She got up and embraced her son. \n\n\"I was wondering if that was you, Klaatu. I didn't expect you back so soon. Did you miss me too much?\"\n\n\"I sure did, Mom. Uh, Mom? I brought someone to stay with us for a while if that's okay with you. Her name is Maya Gilbert and she's--\"\n\n\"A Martian,\" Betsy exclaimed and rushed to embrace the girl.\n\n\"I'm just half Martian,\" Maya said after she accepted Betsy's hug. \"My mother is from Earth.\"\n\n\"Well, that's just like me. I'm from Earth too, you know. I wonder if Klaatu's father and your father know each other.\"\n\n\"They apparently did. They were from the same rock band, Nicky and the Neptunes.\"\n\n\"Really?\" Betsy gasped. \"What instrument did he play?\"\n\n\"I believe she said it was the bass guitar.\"\n\n\"That was Elvis.\"\n\n\"Elvis?\"\n\n\"I could never pronounce their Martian names so I just nicknamed them. Oh, I'm so excited. I can hardly wait to tell Klaatu's father.\"\n\n\"I'd like to tell him first, Mom,\" said Klaatu. He didn't want his dad to get the confused version first.\n\n\"Well, then you'd better get to it. Your helmet is right where you left it. Of course you're welcome to stay here as long as you wish, Maya.\"\n\n\"Thank you, Mrs. Smith.\"\n\n\"Call me Betsy. Smith is my maiden name. I never did get around to getting hitched to Klaatu's father. He had an important mission on the other side of the galaxy and had to leave pretty quickly. Perhaps your father is with him.\"\n\n\"He didn't marry my mother either. Also, I understand my father died before I was born.\"\n\n\"I'm so sorry to hear that. Perhaps your mother can join us. We have plenty of room.\"\n\n\"My mother has been sick lately so that won't be possible, Betsy. Maybe after she gets better?\"\n\n\"That's good enough for me. I hope she's feeling better soon.\"\n\n\"I hope so too.\"\n\n\"I'm so happy Klaatu found you. I've been looking for other Martians and the people who love them for years. Sometimes I feel like I have more in common with beings from outer space than I do with Earthlings, except for those guys from Uranus. I don't care for them much at all.\" \n\n\"I'm glad that your son found me too, Betsy. Already, I know he's saved me from a fate worse than death.\"\n\n\"That's good. Say, when do you turn 18? Your mom has quite a surprise for you.\"\n\n\"I turned 18 today but--\"\n\n\"Happy birthday to you,\" Betsy sang. \"C'mon, Klaatu. Sing it with me. Happy birthday to you. Happy birthday dear Maya. Happy birthday to you.\" Klaatu joined in but half heartedly. He felt sorry for Maya. He joined his mom in giving Maya a hug and a kiss on the cheek.\n\n\"Maya's spaghetti strainer was...misplaced, Mom. She might have to wait until we can locate it.\"\n\n\"Well, maybe she can borrow yours.\"\n\n\"That's what we were thinking. I'll ask Dad about it.\"\n\n\"There's been a lot of excitement since Klaatu started using his. Within hours of using it he had the little girl who lives on the next street knocked up.\"\n\n\"Mom!\"\n\n\"Oh be quiet, Klaatu. I can tell Maya. She's family now. Now he wants to follow her to Europe to tell her she's pregnant. Hehehe! As if she won't realize it sooner or later whether he tells her or not.\"\n\n\"That's very interesting,\" said Maya. \"He mentioned something about his new powers; that he can even cause unsuspecting young ladies to join him in his bed even in his sleep.\" Maya was grinning at a very uncomfortable looking young man.\n\n\"That was me the very next morning,\" said Betsy.\n\n\"Mom! Gosh darn it!\"\n\n\"More and more interesting. Are you pregnant?\"\n\n\"I don't think so. Either I'm on the pill or Klaatu is. I forget which it is.\"\n\n\"I guess now is a good time to tell you that I'm expecting your son's child.\"\n\n\"Maya!\" Klaatu specifically asked Maya to let him be the one to tell his mother about her possible pregnancy and she agreed.\n\n\"Go talk to your father,\" his mother said. \"This is girl talk. That's wonderful news. I've always wanted grandchildren. I have a feeling I'm going to have lots of them.\" Not if I cut my own throat first thought Klaatu.\n\n\"You mentioned guys from Uranus?\"\n\n\"Well, yes but like I said before, I don't care for them at all. I love talking about Klaatu's father and about how he's from Mars? Well, more than a few men I've met have announced they're from Uranus. Then the next thing out their mouths is a complaint of how bad it smells there. Then they start laughing. Well, I find it pretty difficult to understand how anyone could find that funny. It's kind of sad, don't you think, that they'd rather leave their own planet rather than help to clean it up? But I always try to be friendly and say something about how sorry I am about their planet being so smelly and then I welcome them to Earth.\"\n\n\"What do they say to that?\"\n\n\"Absolutely nothing,\" Betsy replied. \"They just kind of shake their heads and walk away. It's like they're not used to be spoken to in a polite manner.\"\n\n\"That's amazing,\" Maya said. Klaatu decided that exchange had given Maya a nice introduction to life with Betsy Smith. It was time to go talk to his dad. \n\n\"Hi, Dad,\" said Klaatu. The transitions were almost seamless now.\n\n\"You're back from your road trip already?\"\n\n\"I went looking for something and I found it pretty quick.\"\n\n\"What was that?\"\n\n\"I was looking for someone just like me, a half Martian.\"\n\n\"Are you serious?\"\n\n\"I'm completely serious.\" Klaatu told him how he heard about the girl who turned green and how he decided to try and find her along with the quick departure soon after meeting Maya.\n\n\"I still can't believe it,\" said Klaatu's father. \"Elvis was the straight arrow in our group, always stressing the rules. It's pretty rotten what they did to Maya and her mother.\"\n\n\"I want to let her use my helmet.\"\n\n\"Your helmet is programmed uniquely for you so it won't work for Maya. You'd have to locate Maya's original helmet or another one would have to be programmed for her.\"\n\n\"Can we get her a new one?\"\n\n\"I'm not in a position to get another one or have one programmed and sent.\"\n\n\"If you just explain what happened they'd be sure to get one for Maya.\"\n\n\"Just so you know, I'm not supposed to have the equipment I'm using to communicate with you and your mother. I was able to smuggle it in with me when I was sent here. If I make my superiors suspicious, I'll be searched and they'll be sure to find and confiscate it.\" That sucked big time.\n\n\"I guess I'll have to figure out something else. Sarah warned her daughter to go into hiding; that they were going to try to bring her back and force her to marry the reverend's son and get her money. Actually, I'm kind of surprised I made it home without running into them.\"\n\n\"One of the powers you're developing is an enhanced sixth sense. With it you'll be able to trust your instincts more.\"\n\n\"I have been feeling a little paranoid lately. I feel like I'm being watched.\"\n\n\"Then you probably are being watched, son.\"\n\n\"That doesn't make me feel any better,\" said Klaatu. \"I hope my feelings are wrong.\" \n\n\"The targets are in position, Reverend,\" said a man talking on a cell phone outside of the Smith residence. \"We'll expect you here tomorrow night.\""
    ],
    "authorname": "sourdough999",
    "tags": [
        "martian",
        "klaatu smith"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/klaatu-barata-nikto-ch-04"
}
{
    "title": "Rise of Roxy Ch. 05",
    "pages": [
        "Roxy left on a dirty weekend with Mal the next Saturday morning, her gratitude for Mal over-ruling her earlier decision not to do it because she'd found she'd liked his wife. She recanted because she felt beholden to him and Roxy said if he wanted her he better make it soon before she changed her mind.\n\n\"I'll take you somewhere this Saturday,\" he said hastily.\n\nThey entered the luxuriously appointed cabin at a mountain resort.\n\nMal put down their bags inside the door and stood in the middle of the room, hands on hips and looking awkward\n\nRoxy thought Omigod, he's no more relaxed about this than she was.\n\n\"Get them off and let's do it Mal,\" she said, attempting to haul off her thick sweater and then calling to him to help her.\n\nHe trotted over, grinning like an ancient-looking schoolboy.\n\n\"God I can't wait to get my hands on your boobies.\"\n\n\"Please call them tits.\"\n\n\"Eh?\"\n\nBlood flowed into Mal's nether region and now his face was lit like a happy schoolboy being handed a very desirable cookie.\n\n\"I like you Roxy,\" he assured her.\n\nEh? What nonsense was this?\n\n\"Don't chat Mal, just do it.\"\n\nMal had Roxy stripped as fast as she could have removed her clothing but not unexpectedly he didn't fold the discarded garments and stack them neatly.\n\n\"God what a body,\" he gloated.\n\n\"Aw come on Mal, give me something to hang on to.\"\n\nRoxy almost took a step backwards when she saw it. His cock was long but it was the bend, or hook, in it that almost alarmed her. Perhaps that was designed to go around corners?\n\n\"Standing up, bending over, on the floor or on the bed... oh or against the door?\"\n\n\"Standing up,\" she said, unable to remember the other things he said because she'd been focused on 'the hook'. Anyway standing might neutralize him a bit in coping with her weight.\n\nAl dropped his pants and lifted her almost effortlessly and already red-faced and beginning to sweat, he gloated just as she realized he was almost up to her cervix already.\n\nJesus.\n\nShe grunted and thought the sight of 'the hook' must have made her lube in panic.\n\n\"Great you groan. Make plenty of noise,\" he enthused. \"That keeps me up hard.\"\n\n\"And right up,\" she gasped.\n\n\"Oh good, then you can feel it? Most women I fuck claim they don't feel much beyond the rim.\"\n\nOther women? Mal you dirty old man.\n\nAs if reading Roxy's thoughts he puffed, \"These days my wife finds I'm a bit big for her so I bought her a box of assorted toys.\"\n\n\"Oh you considerate man,\" Roxy said sarcastically.\n\nAl beamed.\n\nRoxy sighed and he asked was she coming already.\n\n\"No I'm not,\" she said feeling offended.\n\n\"Really bash in against me if you wish\" he said. \"I'm rather strong.\"\n\nOh yes, and the pole reaming her was strong.\n\nWhen Al finally 'blew' he sounded like a whale coming up after a 30-minute dive. Roxy took him by the hand and led him to the bed where she worked on him. Twenty-minutes later he climaxed again and when regaining his breath announced, \"I'll need food before I can go again.\"\n\nTo her surprise, Roxy had a fucking great weekend and her respect for Mal rocketed but she still had to tell him she had no intention of making this a regular thing.\n\n\"That's okay. Now that I've had you my interest will wane.\"\n\nFucking heartless men, Roxy muttered.\n\n\"But Roxy I really like you,\" smiled her department boss and that gave Roxy the warm feeling of being wanted. She liked that.\n\nWhile they were away and Mal was asleep or out walking, Roxy completed for the second time the late Arlene Wright's big-selling novel 'Top Grade Teacher' on which the TV series, 'The Amazing Miss Young' would be based.\n\nShe remembered what Mrs Smith had said, \"Make the part yours Roxy.\"\n\nRoxy began reading the script for the third time but this time made notes of changes she required where she thought the characterization of Alicia Young was not as emphatic as in the novel that had been based on fact.\n\nWhen they were driving back to the city after lunch on Sunday, Roxy said, \"Mal I want you to send Mrs Smith and me to Silver Oaks.\"\n\n\"Isn't that where Mabel Wright lived and taught all her life?\"\n\n\"Yes.\"\n\n\"Ah so you want to absorb atmosphere. It will be all changed now but yes you can go, without Mrs Smith.\"\n\n\"Then I'll pay for her air tickets and overnight accommodation.\"\n\n\"So you need her to hold your hand?\"\n\n\"Yes in a manner of speaking. She'll know what I'm meant to be looking for.\"\n\n\"Oh I see,\" he grinned.\n\n\"Mal you heard Mrs Smith say to me, 'Make this part yours Roxy'. Well...\"\n\n\"I understand now. Yes we'll send you and Mrs Smith to Silver Oaks. Don't forget to take protection.\"\n\n\"God you are disgusting.\"\n\nMal looked guilty and she giggled, sending him into a belly laugh.\n\n\"It was funny Mal but still disgusting. God Mal she'd older than you.\"\n\nMal drove along silently.\n\n\"Well you asked for that. You are aware I shoot from the hip.\"\n\n\"Well I found your comment offensive.\"\n\n\"Oh Mal, I'm sorry. Here allow me to pull out your dick...\"\n\n\"Get away from me you nympho. God it feels like its falling off.\"\n\nThey laughed and the drive home continued peacefully. \n\n* * *\n\nRoxy called into Mal's office to say hi next morning on her way to the last day of rehearsals.\n\n\"Thanks for letting me at you,\" he smiled. \"You are the best fuck I've ever had, especially that lusty first session.\"\n\nRoxy's faced burned and he grinned.\n\n\"God I caught you napping at last with that surprise comment and it shows you are human.\"\n\nShe scowled, \"I bet you say that to most of your women.\"\n\n\"Well I never have but you believe what you wish.\"\n\nRoxy smiled softly and said, \"I always give it my best boss. Have a good recovery day.\"\n\nHe laughed and said Roxy and Mrs Smith would fly out Friday morning and return Sunday morning. \n\n\"I thought you guys should not rush it, get some feeling for the place and meet some of people who had dealings with Mabel Wright. The dates suit Mrs Smith and she thinks this is a great idea.\"\n\n\"I thought she would, knowing it would be a great location to soak up atmosphere.\"\n\nMal said dryly, \"Oh she was pleased about it being the first time the company had ever sent her anywhere.\"\n\n\"Oh.\"\n\nMal smiled and said Mrs Smith didn't feel the need to tell him what he already knew about the reason for the visit.\n\n\"You can also return with the director when he goes with a camera crew for a week to film local material.\"\n\n\"Omigod I bet Mabel Wright is buried there. We could run the opening credits over a shot of the grave. Oh Mal please.\"\n\n\"It could be considered but that's something for you to talk over with your director who'll then consult with the producer.\"\n\n\"Oh, I haven't told who the producer is.\"\n\n\"I'm it,\" he grinned. \"This is our annual blockbuster.\"     \n\nRoxy still worked at remaining off-hand with the director Billy Jones, a gaunt and hugely creative guy with a mustache. Roxy hated mustaches and so that helped her to remain off-hand instead of pushing to establish her place as the dominant female in the production. She assumed some other female in the cast was already fucking Billy, that is if he were a female-only guy. One never knew with directors.\n\nAs was becoming her habit, Roxy arrived early.\n\nBilly waved and came over.\n\n\"I like my cast to show the keenness you display.\"\n\nGod was this a come-on? Careful he might be gay.\n\n\"It pays to be enthusiastic about one's job.\"\n\n\"That's true.\"\n\n\"Billy when we spoke at length initially, not mention was made of my very recent failure.\"\n\n\"And I want you to put that behind you. You were a stupid bitch taking that stupid role.\"\n\n\"Now you look here Mr Hairy fucking lip...\"\n\n\"Whoa, whoa Roxy. I was warned you shoot from the hip. Please explain what I said was so wrong that it upset you?\"\n\n\"I-I...Well Billy, nothing really. I was a stupid bitch and I'm sorry for that verbal beat-up.\"\n\n\"Just respect me and obey my direction although you are free to challenge it.\"\n\n\"What challenge my need to respect you?\"\n\nHe just grinned and rubbed his fucking mustache.\n\n\"Have you done any extra reading to catch up?\"\n\nShe said she'd completed reading the novel for the fourth time and their script for the third time.\n\n\"I've memorized most the script.\"\n\n\"Good one Roxy. I like people with humor.\"\n\n\"Yeah well test me,\" Roxy said, pulling her copy of the script from her handbag. \"I'm not word perfect yet but pick out anyone saying something but you'd have to identify the scene.\"\n\n\"Anyone, are you dreaming?\"\n\nRoxy waited patiently.\n\n\"Okay, quote the Mayor at City Hall when he replies to Alicia when she confronts him over the tragic death of May-Ellen's 4-year old brother when the kid wandered into the council's vehicle depot along from their home and fell head-first into an inspection pit.\"\n\nHe noticed the change in Roxy's face and her body tensed.\n\n\"Miss Young, you are wearing my patience to breaking point. There is no need for the council to spend recklessly to fence its vehicle depot as all vehicles are left locked and we employ a night watchman. If parents cannot look after their small children responsibly you cannot shift the blame for the consequences of that on to the council. Now please, are we finished here because I've finished with you?\"\n\nBilly said, \"Jesus that's word for word and it's not your part.\"\n\n\"Well I'm in at least 85% of scenes and if I know everything that's going on I don't have to worry about my own timing and wish to avoid wasting time on reshoots because of my mistiming. It's like what you do before you bite into an apple; you examine and consider the whole apple.\"\n\n\"Yes I know that's the theory but no one expects you to memorize the entire script.\"\n\n\"Well it's a standard I set myself.\"\n\nBilly rubbed his fucking mustache and Roxy gritted.\n\n\"Okay, give me your own part when Miss Young replies to the mayor.\"\n\n\"Sir I'll take no more of your time. The life of a small child was lost directly because of the laxness of vehicle depot staff and practices over which you have the ultimate responsibility. Either you get that depot yard fenced immediately or I shall organize a parent's revolt against your lax administration and with council elections coming up in seven months I imagine you know what civil discord means to you and your cahoots in line for re-election. Mr Mayor, you have three young adult children and I taught each one of them and was responsible for their safely while they were in my care. Have you no heart? Good day to you sir or do you have something important to say to me?\"\n\nMembers of the cast, who'd come in behind Roxy and were standing silently, clapped. Billy smiled at her and said well done. The depth of the director's smile delighted Roxy. The clapping also really pleased her because it suggested a break-through because since her arrival at rehearsals people had almost shunned her.\n\nShe turned and smiled and said good morning.\n\nMost of the ten or so people smiled and Dick Shore, who'd play the long-serving chairman of the school board who'd be periodically hounded by Miss Young for the board to supply improved services and to not automatically take the side of complaining parents or students, called, \"That was great Roxy. For a moment I thought I was listening to Mabel Wright herself.\"\n\nThree weeks later Mal took some roughly edited shoots to the senior management meeting and the eleven people there viewed them and soon murmurs of approval flowed.\n\nBette said it for everyone. \"If your people keep up with this standard Mal well have a winner on our hands, not only with viewers and advertisers but also in the regional annual media awards. Roxy is brilliant in the role, the standout performer as she's meant to be and we have you to thank for that by resolutely standing by Roxy because you saw what she possessed and believed in her.\" \n\n* * *\n\nThe day after Channel 8 put out a big media release about its upcoming blockbuster due to begin screening four days away, the morning newspaper's TV writer Di Roach called Roxy.\n\n\"Hi Roxy, I'm calling you and that should tell you I want something.\"\n\n\"That's fine Mrs Roach.\"\n\n\"Look I'm sorry I haven't been in contact...\"\n\n\"There's no need for feel sorry for me. I'm the type of person who bounces back.\"\n\n\"Am I free to quote you on that?\"\n\n\"Yes and I'd like you to view our new production positively until at least you have viewed it.\"\n\n\"Oh but I will. Lunch tomorrow so I can interview you?\"\n\n\"Very well.\"\n\n\"Please call me Di.\"\n\n\"Very well Di.\"\n\n\"It will be just you and me but a photographer will drop in to take your photo with me.\"\n\n\"You'd be taking a career risk.\"\n\n\"Roxy don't be like that. I've heard on the grapevine that your top people are in raptures.\"\n\nRoxy made no reply and coolly asked for the place and time for lunch.\n\nDi arrived looking lovely in frilly yellow and beautifully made up and found Roxy at the bar.\n\n\"Excuse me for looking dressed up but I'll be in the photo too,\" she said, kissing Roxy who laughed and said, \"You vain bitch.\"\n\n\"Omigod, you are your old self. You scared the crap out of me yesterday sounding so sour. I guess you were projecting your displeasure with me?\"\n\n\"Yes and I made my point and I'm over that now and I realize we weren't meant to be friends.\"\n\n\"Oh dear, I dropped you right at the time you needed someone like me, right?\"\n\n\"Yes but that need is gone. Just let's be fair-weather friends.\"\n\n\"Roxy we have a holiday weekend coming up and I'm taking a couple of extra days and will be visiting my sister in LA. Please come with me, at my expense.\"\n\n\"Thanks for the offer, it is so kind. But I won't be available.\"\n\n\"Roxy, I'm extending a real hand of friendship.\"\n\nRoxy hesitated and then smiled and said, \"Okay and thanks and I can pay my way.\"\n\n\"It's my choice for you to be my guest. Jolene is my older sister but she's real fun.\"\n\nRoxy said, \"Let's move down to that darker end of the bar. I've something to show you and in doing that I'm seriously breaching company rules.\"\n\n\"Omigod you'll give me an unauthorized preview.\"\n\n\"Yes and not a word about this. I just would like you to have confidence in me as an actress.\"\n\n\"But darling I do, you were terribly miscast in your last venture.\"\n\n\"This runs for almost five minutes,\" Roxy said, booting her laptop. \"It's my favorite scene, the time when breathing brimstone Miss Young takes on the school board and a group of parents who were attempting to push out the ageing school head teacher for a much younger person, the daughter of the town's deputy-mayor. In my opinion we all captured the drama and wrung everything out of the occasion but without over-acting, or rather not completely over-acting. Mal Johns reckons it's the grade school showdown version of 'High Noon'. I'll never forget when our director Billy Jones called that's it at the end of the fourth reshoot of the finale. Most of us stumbled around, perspiring and close to physical and emotional exhaustion.\"\n\n\"Oooh, this sounds good.\"\n\n\"Here we go.\"\n\nAt the conclusion of the movie clip, Di disappointed Roxy by smiling and said, \"Oh well done.\"\n\nBut she added, \"Mabel Wright will be proud of your effort, and I know from my little research she was a formidable fighter. I received Channel 8's promo on the upcoming show yesterday morning and then called your PR department and they informed me the series was based on the life of a real person created as a novel and that the teacher was Mabel Wright of Silver Oaks. So I spent almost four hours searching links to the school and to Mabel Wright and feel I've come to know her a little. Darling I suggest most strongly that you get Mal to enter that excerpt into our regional medal awards competition. I really think it will win a gong and basing this on previous awards I've seen at the regional awards, I confident you'll waltz away with the best drama actress title.\"\n\nDi looked at Roxy and said, \"What? You'll swallow a fly leaving your mouth dropped open like that. Are you embarrassed at being complimented so grandly?\"\n\nRoxy clamped her mouth tight and made no reply. Di giggled and said oh god, Roxy was blushing like a schoolgirl.\n\n\"Right to lunch and to work,\" Di said. \"I've been given the space to write a two-page spread on your 'The Amazing Miss Young' series for tomorrow's Saturday Magazine section in the Herald. Your PR department has supplied some shots from filming as well as shots of you guys sitting about and scratching their butts, that sort of thing. Glenda will be here soon to get the P1 pointer of you being interviewed by me and a glam shot of just you. I'll interview you to get color and immediacy, asking what you know about Mabel Wright and if you know nothing beyond what's in your script then that's fine.\"\n\nAt the end of the interview and after the photographer had left satisfied, Di said, \"My god darling, I've never known an actress to so over-prepare for her part. I couldn't believe hearing that you and Mrs Smith tracked down and interviewed fourteen of Miss Wright's former students and two younger fellow teachers who remember her well and you even went to Paris, Texas, to talk to the woman whose young brother died when falling into that uncovered vehicle inspection pit. The groundwork you put in to get realism shows baby, my god it shows, crowned by your own ability of course.\"\n\nTen days after publication of the extremely riveting backgrounder to Channel 8's new blockbuster was published in the Herald, Di and Roxy went to LA. \n\n* * *\n\nAt LA airport, the glamorous Mrs Jolene Featherstone came towards Di and Roxy carefully on very high heels and dressed as if she was a fashion model for slim elderly women. \n\n\"Di!\" she waved and screeched.\n\n\"Jolene!\" yelled Di, hitching her skirt up a little to run to her sister.\n\nThey hugged but didn't actually touch when they went through the motions of kissing. Well combined, they were probably wearing a couple of hundred bucks of professionally applied make-up.\n\nDi introduced Mrs Fading Glamorous to Roxy.\n\n\"Omigod Di, you told me she was a TV actress but you didn't say Roxy was also beautiful.\"\n\nRoxy smiled, \"I think it's in Guinea the most beautiful women have the thickest lips and wear the biggest nose rings.\"\n\n\"Oh darling what are you saying to me, that beauty is a matter of perspective?\" asked the older sister.\n\n\"Yes and obviously you are big into your perspective of beauty and I say well done. If you are indeed younger than Di, I say you look amazing.\"\n\n\"Roxy already you are my favorite house guest ever.\"\n\nThe women laughed and looked at one another happily.\n\n\"I hope you don't mind but I've invited a few friends over to meet you guys,\" Jolene said, as they settled into the chauffeured white limo. \"Most of them were surprised I had kin, believing I'm such a brat I just had to be an only child. And you Roxy are suspected of being Di younger girlfriend.\"\n\n\"Oh but I am, Di and I get along well.\"\n\nThe sisters burst out laughing and Roxy turned red, realizing the innuendo of the girlfriend relationship. \n\n\"Oh no, we've never...\"\n\nThe sisters screamed with laughter at Roxy's feeble denial and her embarrassment. \n\n\"Are your boobs one hundred percent natural darling?\"\n\n\"Yes of course Mrs Featherstone.\"\n\n\"Well that was just a friendly enquiry, there's no need to be so defensive. Most of us in LA have had them enlarged with a tiny percentage having had them reduced. Where you live, you women might perhaps be judged on your intelligence whereas here the main appraisal is breast size.\"\n\n\"It's true Roxy,\" Di said. \"Don't be surprised if you are asked your breast size tonight and whether you've had a breast job.\"\n\n\"But what about intellect?\"\n\n\"It's considered more important by males in LA, and many women as well, to leave intellect to the academics and rather to talk about your breast size and ability to produce multiple orgasms.\"",
        "They had a lovely time in LA and visited some of the 'must see' attractions.\n\nOn the third morning a Robert Ludd, one of the unattached guys who'd attended the welcoming cocktail party for the two visitors on their first evening in LA, called and after chatting to Jolene, asked to speak to Roxy.\n\n\"Why me?\" she whispered when Jolene handed her the phone and Jolene smiled and winked.\n\n\"Yes?\"\n\n\"Hi I'm Robert Ludd, a blond guy with a thick mustache. We met two nights ago when my wife and I were invited for drinks. But Bev had accepted an earlier invitation so I came without her. I'd like to take you to lunch in an hour's time.\"\n\n\"What just me?\"\n\n\"Yes.\"\n\n\"Why.\"\n\n\"I didn't have much time talking to you the other evening.\"\n\n\"Apart from exchanging greetings I don't believe we talked.\"\n\n\"Exactly, that's what I mean. I'll be there in fifty-eight minutes. Wait at the gates. I drive a red car.\"\n\nThe phone clinked.\n\nRude guy and he had a mustache, Roxy seethed.\n\n\"That guy wants to take me to lunch to talk.\"\n\nJolene teased, \"It would be considered rude, even in LA, to invite someone to lunch and then not talk to them.\"\n\n\"What?\"\n\n\"It doesn't matter dear. He's interested in you technically.\"\n\n\"What?\"\n\n\"Just go looking your best dear.\"\n\n\"God it's difficult having a meaningful conversation around here. He said he'd call at the gate and will be in a red car. One-tenth of LA people will drive a red car. How will I know if it's him?\"\n\nJolene said dryly, \"I'm not sure about the validity of your statistic dear but you'll notice the car; Robert drives the latest Ferrari California.\"\n\n\"Oh yummy. What does Robert do?\"\n\n\"He'll tell you I guess.\"\n\nRoxy sighed, aware now that her hostess was playing games.\n\nThe restaurant was lovely, the food was great and the conversation was strange and the mean dude didn't invite her to drive his car so perhaps he really was a sensible guy.\n\nJolene and Di arrived home from obviously their very wet lunch half an hour after Roxy had arrived home.\n\nJolene slurred, \"Oh my you're home early. Did you get him off too quickly?\"\n\nRoxy frowned. \"He took me to lunch, we talked, half the women in the room kept glancing at him, he paid and brought me straight home and left me at the gates, politely allowing me to open my own door and scramble out.\n\n\"Hmnm.\"\n\n\"What?\"\n\n\"I have no idea.\"\n\nRoxy scowled, \"He also said he'll be in touch if he needs me. What damn cheek. Why do guys keep regarding me like a slut when I do my best to act like a lady?\"\n\n\"It's called testosterone drive darling and only bubbles to the surface when the babe is really hot. Didn't you ask Robert what he did for a job?\"\n\n\"No I forgot.\"\n\n\"Well I've news for you. He's a very successful independent filmmaker who works under contract for major movie studios.\"\n\nRoxy looked stunned and the sisters, looking at her face, clung to each other and laughed helplessly.\n\nWhen the babble ceased, Roxy said, \"I blew it, didn't I?\"\n\n\"I wouldn't think so. His wife once told me he's not particularly interested in sex, that he prefers cars and watching technically intriguing movies. He'll be in touch via me if he wants you darling. Studios expect him to front with a ready-to-rip proposal when he approaches them.\"\n\nA courier guy arrived with flowers and a card for Roxy just on dusk.\n\nThe message read, 'I enjoyed our lunch, having all those women gazing at you and wondering who you were. I'll remember that and in doing so will remember you. Something might come up. Respectfully yours, Robert.'\n\n\"Well?\"\n\nHand shaking, Roxy gave the card to Jolene who squinted to read the small writing.\n\nShe smiled and passed it to her husband Hank and Di to read.\n\nWhen Di gasped, Jolene sipped her cocktail and then said, \"Well darling your bid to bring Roxy to LA to become noticed has hit a possible jackpot.\"\n\nRoxy, jaw dropped, stared at Di, who winked and then mouthed a kiss.\n\n\"It's only my way of saying sorry darling,\" Di said minutes later when they all were heading off to get ready to go out to dinner.\n\n* * *\n\nThe marketing effort by Studio 8 also paid off. On the eve of the Saturday night launch of 'The Amazing Miss Young'. Di Roach's story on page 3 under an eye-catching photo of Roxy Reeves, dressed as a prim school teacher of the early 1960s announced the blockbuster had already sold to 72 independent TV stations or small networks, one of the major networks had taken up a three-month option to purchase and the series had sold to TV broadcasters in seven other countries. \n\nDi reported:\n\nEpisode One screened at a media preview yesterday. I have to say everyone left the theatre appearing to have well entertained. I admit to be friendly with Roxy Reeves but I am a tough critic. I believe after unwisely attempting comedy, that Roxy has risen from the ashes to thoroughly establish herself as a top-notch drama actor who in Episode One of 'The Amazing Miss Young' has produced a quite amazing performance herself, injecting an air of sophisticated performance that is rarely seen away from the big screen. \n\nI unhesitatingly give my mark of four out of five and wish our system had half-marks so I could add a little more. Producer Mal Johns, in announcing sales to date when we gathered at the bar for post-viewing questions, said the cast was excellent and Roxy was outstanding and he asked us to believe him when he said Roxy becomes even more compelling as the story unfolds. Miss Young gets into her stride in her uncompromising verbal confrontations with over-demanding parents, the badly-led school board and the district school authority combine to plunge her into high drama on behalf of the school's weak head teacher. \n\nI'm picking Channel 8 will have a runaway success with this absorbing tale about a grade school heroine, based on real life school teacher Mabel Wright whose exploits and life were loosely portrayed in the late Arlene Wright's big-selling novel 'Top Grade Teacher' published five years ago by Arthur & Mallet Books. Arlene, who was Mabel Wright's niece, died eighteen months ago. \n\nAfter reading that preview, body shaking, Roxy sat quietly and remembered her unfortunate childhood and of course the shining angel, her gracious aunt, who breathed a great awareness of the drama of life into Roxy during those Italian sojourns.\n\nFamily and friends joined the cast and production team along with senior executives of the series sponsors, K9 Dog Foods to view the premiere launch of 'The Amazing Miss Young' relayed on to the big screen of Channel 8's theatre.\n\nAt supper in Studio B after the screening, the chairman of Channel 8's board, Nick Robbins, congratulated the big team for bringing such an outstanding production to television and said it cumulated the end to a hugely successful career for the company's CEO Mrs Bette Hill who would be leaving at the end of the month to take up an as yet not announced senior position in the movie industry in Canada. \n\n\"We at Channel 8 are proud of your achievements for this company Bette (applause).\"\n\n\"It is now my pleasure to announce, on behalf of our board, Mrs Hill's successor here at Channel 8. It will be the producer of 'The Amazing Miss Young' and our head of drama, Mal Johns (huge applause). And finally before we pop the champagne, I invite Roxy Reeves to conclude formalities with a few words.\"\n\n\"Thanks Mr Chairman. I stand before you tonight because of Mal Johns' belief in me who told me shortly after we first met that he saw a big acting future in me and here was I busily attempting to be a Weathergirl (laughter). Mal didn't ignore the fact that I was green to the gills and untrained. He simply threw me at the incredible Mrs Smith and said, 'Mary you coach her and I'll see she is pushed to achieve her potential'. Most of you Channel 8 people didn't know Mrs Smith had a first name, did you? (laughter).\"\n\n\"It's true I lead the cast but what a cast, not a question mark over even one of them as you saw for yourselves watching Episode one. And we had huge support from the big team of production professionals. Thanks team and by that I mean a big thank you. Throughout Mrs Smith has been my in-house mentor while away from here the person pushing a rod into my back and urging me not to look back at the blips in my life has been the Herald's TV writer, Mrs Di Roach. Both women have mothered me unstintingly and I ask you to applaud them.\"\n\nPeople clapped and cheered.\n\n\"Finally would the hero of the hour please raise his hand, Billy Jones.\"\n\n\"There he is folk standing attentively by his pretty wife Eva.\"\n\n\"Billy became convinced Mal Johns was right about me and when the lead hired for 'The Amazing Miss Young' was heavily hit by personal problems. Billy demanded that I must be the replacement. God what a fright that must have been for the cast, knowing I'd just bit the dust in my misguided entry into comedy. Well I suppose I shouldn't say this but I'm rarely shy. Well I was so frightened at being told about Billy's request I wet my panties. For a while I thought Billy must be smoking something and then he set about casting his spell, encouraging me to rise and shine.\"\n\n\"At that time of my entry I could feel hostility within the cast and I decided I must ignore that, to let results speak for themselves once filming was underway. Well we didn't have to wait long. Within a few days I'd memorized almost the entire scrip and I was alone with Billy and he tested me by nominating two very intense parts and while doing that some of the cast had arrived behind me and I didn't know they were there. I just gave it my best to prove myself to our director.\"\n\n\"The surprised director said well done and those members of the cast who'd arrived and hearing me in action for the first time, clapped. Then our leading man Dick Shore congratulated me warmly and all this left me with the feeling that perhaps this was the breakthrough we needed. Well it was and thank god it came early and although it was a grind working hard to meet Billy's high standards, we all feel we got there and the feedback from professional critics and viewers tomorrow after tonight's screening will test our self-belief. Well that's supposed to be a few words. On behalf of the cast and production team thank you everyone for being here tonight and especially to those of you who supported us from the beginning. Oh and thanks to our principal sponsors K9 Dog Foods. They won't be aware of this but Mrs Smith and I researched Mabel Wright in the town where she spent all her life. We were told the never-married Miss Wright had three pets successively during her adult life and all were dogs, Bruno, Madge and Mick. Thank you.\"\n\nThe champagne corks popped and Roxy was practically mobbed. The CEO of K9 Dog Foods later got Roxy alone and said, \"Was that true about Miss Wright's three dogs?\"\n\n\"Yes absolutely. When I became aware you had signed up as principal sponsor, I decided not to rush forward with that information in case that information was \\exploited by your marketing department in an unseemly manner. You see Mick was buried at the foot of Miss Wright's grave in Silver Oaks almost two years after her death, according to instructions in her will.\"\n\n\"Omigod. You know Roxy, I'll keep that information to myself. I don't believe it would be right to exploit it.\"\n\n\"Well not the burial bit. But dogs appear in four scenes with me, including a look-alike 'Mick' in Episode 16, the final episode, when Miss Young or in reality Miss Wright visits the school with Mick to open the new gymnasium named in her honor. I can give you a copy of the newspaper report of the event. The report noted that dogs were banned from the school grounds but who'd even contemplate telling Miss Wright her dog was not wanted at the school where she'd become an institution. Perhaps your PR people could come up with something about that? My suggestion is a special run of dog food in this region called Mick and a picture of Miss Wright on the pack stating who she was. I know Miss Wright/Miss Young is a bit of a twister but isn't it why you have PR people in a big company like yours to sort out the problem?\"\n\nThe CEO eyed Roxy and grinned and said that was something to think about. \n\nAt the end of the function, company chairman Nick Robbins and his now fairly regular girlfriend Professor Sally Brooks, entertained selected guests at supper in the boardroom. Guests included the company's deputy chairman and wife, CEO Bette Hill and husband, Mal Johns and wife, Di Roach (her husband was out of town) and Roxy, Robert and Sophie Scott, Mr and Mrs Smith, Billy Jones and wife and the CEO of K9 Foods and wife. \n\nBilly offered to drive Roxy home and dropped off his sleepy wife on the way.\n\n\"I'd like to thank you Billy,\" Roxy slurred.\n\n\"Um my wife would know what we've done if I arrive home late; she's a light sleeper.\"\n\n\"Well let's settle for this,\" she said, unzipping Billy.\n\nHe grinned and rested his far side against his car door and lifted his right leg over Roxy's knees and she went down and slobbered over his erecting dick and blew on it before really going to work.\n\nBilly sighed hugely and said he knew Roxy would be good for something besides acting.\n\nTo prove his point, Roxy gave it her best and at the last second pulled away and he fired over the car's entertainment system and to the top of the dashboard.\n\n\"Oh fuck, I thought you'd swallow,\" he complained, panting.\n\nWhen filming ended, Billy, Roxy and the leading man Dick Shore were the only ones from the production who'd continued on salary. All other actors were contract actors. Dick and Roxy had their income reduced to a retainer calculated to be sufficient to scratch out a living until they were given a role in a new production. Billy worked on advertising filming between other assignments while Dick supplemented his income acting in advertisements. Roxy had decided appearing in ads was not for her although the money could be very good.\n\nRoxy had received a role in a daily afternoon soap that spanned four weeks until the enraged wife killed Roxy with and up close and personal shotgun blast to the belly. More slack time followed and she worked as narrator on a behind-the-news investigation about bullying in schools that was five weeks in the making.\n\nFinally Roxy began musing it might be a good time to move on. Billy had declined her suggestion to begin an affair with her and she and Di had come to the brink of starting something, so far just the one session of hot kissing when saying good night after attending a touring ballet production together. Di continued to look at her intently and Roxy felt uncomfortable when thinking about it. God she hadn't been involved with another female like that since she was on the other side of twenty. She'd not heard from that filmmaker in LA and expected she never would.\n\nSo after a bit more procrastination, Roxy resigned and insisted she didn't want a party. Instead she made do by taking Mal and Mary Smith to dinner and they had a really great time.\n\nThe day after handing in her resignation she took her aunt, Anne Baxley, and friend and former mentor Sophie Scott whom she no longer met so often, to lunch and told them of her move.\n\n\"But what will you do?\" Sophie asked in surprise.\n\n\"I have no idea. I've been drifting and had no thoughts about what to do so I thought the best was to shake myself out of lethargy was to resign.\"\n\n\"Oh bad move Roxy,\" said her aunt. \"You should have found new work before resigning.\"\n\n\"Well anyone other than Roxy I would have agreed with you Anne, but Roxy has a habit of bouncing back and improving her position when that happens.\"\n\n\"Thanks Sophie, that's what I like hearing.\"\n\nRoxy called Mal who was on a tour of Europe with his wife, taking leave before starting his new job.\n\n\"We'll be sorry to lose you after putting so much effort in you.\"\n\nShe snorted and said the blockbuster was creaming in the money with foreign sales in particular.\n\n\"Yeah well the truth is I like having you around. I regard you as the top professional reward I've ever had.\"\n\n\"Oh Mal,\" Roxy said and burst into tears.\n\nHis reaction was vintage Mal.\n\n\"Jesus Roxy, are you unwell?\"\n\nMore to Come"
    ],
    "authorname": "EgmontGrigor2011",
    "tags": [],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/rise-of-roxy-ch-05"
}
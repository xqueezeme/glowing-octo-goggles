{
    "title": "Gaming: D&D Pt. 10",
    "pages": [
        "It was the most intense, most emotionally powerful kiss of my life. We might not have gotten many points for technique, and it wasn't especially passionate. We were both a little too tentative. But my knees were shaking, and I could feel Simran trembling, as well.\n\nI held her in my arms, afterwards, almost unable to believe that she was there. Finally. This was no accident. I hadn't pursued Simran simply because she was attractive, or available. I had been in love since the day I met her. Now, at last, it was real.\n\nWe were together.\n\nMy letters from England and Wales (the 2nd and 3rd) arrived over the next few weeks. They were proof positive that I had been thinking of her the whole time. Simran was touched - and flattered.\n\nCoop and I moved into our apartment, with second-hand furniture, for the most part. Dad helped me out, and I splurged on a bigger bed. The place wasn't much to look at, from outside, but inside it had lots of wood trim, French doors and built-in bookshelves, which we promptly filled.\n\nI soon discovered that my roommate - great guy though he was - was not quite a neat freak. He was apparently unaware that dirty socks don't belong on the kitchen counter. It quickly became obvious that the task of keeping the apartment tidy and reasonably clean was going to fall to me.\n\nOtherwise, he was an ideal roomie: he kept beer in the fridge, and didn't drink all of mine. Nor did he pilfer my food. Coop was also quite busy at school, so he wasn't always at home. This was something I came to appreciate more later on.\n\nWe started hosting D&amp;D games. Nate could borrow a car, and bring Parvani and Cherie over. Or, Parvani could borrow her sister's car. We were deep into the Symenon saga, as we called our campaign, after Nate's duellist-mage. Nate had completed a whole series of sketches of our characters, individually, and in a group.\n\nI passed him a book on Welsh castles, and let him in on a portion of my plans.\n\nI also invited Simran to join us. It would be easy to bring in a High elf character, if she wanted to play one. But she politely declined.\n\n- \"Are you sure? You know you'd be more than welcome.\"\n\n- \"I know.\" she said. \"But the reason is the same. I don't want to intrude in Parvani's social group any more than I already have. She needs something important in her life that doesn't include me.\"\n\nI tried, but I couldn't budge her on the issue.\n\n\"Besides - what if ... what if something happened, and we split up?\" she said. \"That could be really awkward.\"\n\n- \"What would that 'something' be?\" I asked. \"I can't imagine it.\"\n\n- \"Hypothetically.\"\n\n- \"I can't imagine it hypothetically, either.\"\n\nWe were just dating, at this point. We hadn't slept together yet. I was hoping to change that fact soon. Now that I had an apartment, we could have some privacy. I just couldn't figure out how to invite her over to my place - alone - without it seeming like a blatant prelude to sex (which it would be).\n\nWe had kissed, again - and the kisses were growing more passionate, more urgent. We had also had a pretty heavy necking session in my Dad's car. It started out innocently, as a goodnight kiss, and then got serious. I started caressing her breast, through her clothes, and she had her hand on my thigh. Then we came to our senses.\n\nNeither of us wanted our first time together to be in the back of my father's car, on the street in front of her parents' house. I wanted it to be special. Memorable. I wanted it to last all night, if possible.\n\nIn late September, we had our first disagreement. There was an old pub just a few blocks from the apartment. One side was noisier, with a busy bar, the dartboard and the pool table. The other side was quieter, with comfy armchairs and a big fireplace. People came to this room, alone, to read a book and enjoy a pint. Simran and I both liked it.\n\nBut I could sense her mood that night - and it wasn't good.\n\n- \"You alright, Sim? Or is something bothering you?\"\n\n- \"Something's bothering me, Ian.\" she said.\n\n- \"What can I do?\"\n\n- \"I'm not sure. Do you think that I'm assertive?\"\n\n- \"You most certainly are.\"\n\n- \"And confident?\"\n\n- \"Of course. It's one of the things I respect and admire about you.\" I said.\n\nShe made a face - it was halfway between a grimace and nausea.\n\n\"What is it? What's wrong?\" I asked.\n\n- \"You think that I have everything under control, don't you?\" she said. \"Ian - I don't. I'm as insecure as anyone else. Well ... maybe not as much as some people - but I do have my moments.\"\n\n- \"Really?\" I was surprised. Simran had always struck me as one of the most confident, capable, 'has-her-shit-together' people I had ever met.\n\n- \"What would you do, Ian, if you saw my sister make a face like this?\" Simran's lips tightened, and quivered, and she blinked rapidly. It looked as if she was about to cry.\n\nI had seen Parvani make exactly the same face - after her disastrous party, and when she tried to tell me that she wanted to go out with Nate.\n\n- \"I'd hug her. I'd offer her a shoulder to cry on.\" I said. Because that was exactly what I had done.\n\n- \"Did it ever occur to you that I might need - or want - the same?\" asked Simran.\n\nShe was right. I just hadn't seen her that way. Simran was always so cool, so collected - it hadn't occurred to me that she could prey to doubt, or fear - like everyone else.\n\n\"Do you remember, Ian, when I broke my engagement? You were one of two people who offered me uncomplicated, unconditional support. And I loved you for it.\"\n\n- \"I'm so sorry, Sim. Do you need a hug, right now?\"\n\n- \"I don't need one.\" she said. \"But that doesn't mean that I don't want one.\"\n\nThat was no hardship. I gave her a hug, and stroked her hair. After a few moments, she sat back.\n\nI recognized her expression. \"There's more?\" I said.\n\nShe nodded. \"I'm happy, Ian, that you treat me like an equal. You value my opinion, and you listen to me as if what I have to say matters. I love that about you.\"\n\n- \"But ...\"\n\nShe smiled. \"Sometimes, you show me too much respect. This relationship can't be a restaurant, where I'm the customer and you're the waiter.\"\n\nIs it any wonder that I loved her? She managed to express the crux of the matter in a simple analogy, without hurting my feelings.\n\n- \"You want me to ... take charge a little more?\" I asked.\n\nSimran sighed. \"Yes, dear one. Sometimes, I would like it if you just told me what we're going to do. Or what you want. It gets a little uncomfortable up here, on the pedestal.\"\n\nSo I was being too considerate. I was deferring to her wishes a little too much. Simran wanted me to be more assertive. More demanding?\n\n- \"Would you like to know what I want, Simran?\" I asked.\n\n- \"Yes Ian - I would.\" she said, with a big smile.\n\nOkay then. Here goes.\n\n- \"I want to take you home - to my apartment.\" I said. \"I want to slowly take off all of your clothes, and I want to make love with you. All night long. That's what I want.\"\n\nSimran's smile didn't disappear. If anything, it grew broader.\n\n- \"That sounds wonderful.\" she said.\n\nI was about to say 'Really?' - but I bit my tongue.\n\n\"Finish your drink.\" I said. I found our waitress, and quickly settled our bill.\n\nWe walked back to my place, hand in hand. Coop - bless his heart - wasn't home. In hindsight, I ran around a little too much - I wanted a couple of candles for my room, to set the atmosphere. Also, I wanted my Shadowfax tape playing. It was music to make love by, if I'd ever heard it. But I shouldn't have left Simran alone while I did those things.\n\nI led her to my bedroom, and pulled her into my arms. She was so damned beautiful. I trailed kisses down her neck, and across her collarbone. Then I made a big production out of unbuttoning her shirt.\n\nHer bra was nothing short of spectacular. But then, so were the breasts that it supported. I had to remind myself to breathe. Simran's breasts were large, heavy and pendulous - more than a handful.\n\nI kissed every exposed inch of her bust, and then let my lips roam across her stomach. I unfastened her pants, and pulled them down over her generous hips.\n\nPerhaps I should rephrase that. By 'generous', I mean full, pleasing, exciting. Simran wasn't skinny - but there was very little fat on her body. I was somewhat in awe, in fact, of the beauty I was unveiling.\n\nI slid her panties down her legs, and then manoeuvred her to my bed, so that she had to sit down on it. My lips and hands traveled back up to her breasts - I couldn't help myself. But I exercised some self control, and licked a wet path across her ribs, down to her upper thighs.\n\nSimran trimmed her bush, very neatly. Below that, her lower lips were shaved clean. And that was a good thing, because she had prominent, puffy labia, and a pronounced clitoral hood. She didn't protest when I lowered my head to kiss and lick her.\n\nI worshipped her. I treated her body like a pagan temple, where I could perform my devotions. I licked, and sucked, and tongued her. Unlike Diane, Simran was no firecracker. I had to work for quite a while before she reached a climax. But I loved every moment.\n\nShe had already pulled my shirt over my head. I stood, kicked off my shoes, and rapidly shucked my pants and underwear. I quick-stepped over to my dresser, and pulled out a box of condoms.\n\n- \"I'm on the pill, Ian.\" she said. \"You don't need that.\" Simran lay back on my bed.\n\nI was in a state of mild disbelief. With the exception of my unfortunate accident with Tanya, I had never had sex without a condom.\n\nSimran was wet, and eager - but I didn't want to hurt her. I penetrated her slowly - carefully. It took me six or seven strokes to get fully lodged inside her. Then I realized that I was making love with Simran D. - the unattainable, too old for me, sister of my best friend, engaged to somebody else, woman of my dreams - my Cinnamon Girl.\n\nI probably should have put on different music - stupid thought. And then I flooded her insides, pouring a stream of cum into her. The feeling was so intense, I lost track of time, and forgot where I was. Except that I was with the girl of my dreams.\n\nShe loved me. Simran loved me enough to sleep with me. I felt like a giant, a champion. She clung to me, holding me tight. I kissed her cheek, her hairline. And then we fell asleep together.\n\n***\n\nI turned 23 in December. It was something of a milestone for me. I was in love, with the most amazing woman. We made love frequently - two or three times a week. I was doing well in the Masters Program, and Dr. Welsh seemed pleased with my progress on my thesis.\n\nI had the freedom of my own apartment. My friends all seemed to be happy, and everyone was in good health. Our D&amp;D games were as good as ever- and in some ways, even better. The storyline I had concocted let me be creative, while my thesis research was methodical, and analytical.\n\nJust before the Christmas break, I went to Dr. Welsh's office, and asked him to recommend one of Dr. Bennett-Smythe's publications. I was just curious to see how she wrote.\n\nWelsh didn't even have to get up. He turned his chair, and reached into his bookshelf. He grabbed a volume, and passed it to me.\n\n- \"Return it when you're done.\" he said. \"And Merry Christmas.\"\n\nBennett-Smythe didn't use her first name - Yvonne. Instead, the book used her initials - Y.A.C.. Interesting - there was no picture of her on the flyleaf, no short biography at the back. If I hadn't met her, and just stumbled across the book, there was no way I would have known that the author was a woman.\n\nClever. This way, people would judge her work on its own merits. It was a history of the Suffragist movement in Britain during the First World War. I read the whole thing over the holidays. I was impressed.\n\n***\n\nI was a little nervous about Christmas dinner with Simran's family. Her parents knew that we were dating, but we hadn't had any formal gatherings with them as a couple - Thanksgiving, for example, had been with my family.\n\nCherie loved Simran. Jill was plainly impressed, too. As for Dad, I thought that his eyes were going to pop out of his head. Simran was polite, and classy, and beautiful - and she got everyone else talking about themselves. She had them in the palm of her hand after the first half hour.\n\nBut Mr. D. might be a tougher nut to crack. He already knew me, of course, but that just killed the novelty factor. I thought he liked me, but maybe not as a match for his elder daughter.\n\nI needn't have worried. Parvani and Nate were also there, and Mrs. D. plainly approved of Simran and me. Who knows? Maybe she hadn't cared all that much for Arjun, either.\n\n- \"Well, Ian,\" said Mr. D., \"I thought that you might be joining us for a family occasion, one of these days. This wasn't quite the way I had anticipated ...\" he glanced at Parvani - \"but I am pleased to have the company of two fine young men. Very pleased. Whatever the age difference.\"\n\n- \"He's not the only younger man in a relationship at this table.\" said Simran.\n\n- \"How did you meet?\" I asked her mother. Mrs. D. was happy to tell the story, while her husband beamed as she described him as 'handsome', and 'charismatic'.\n\nLater that evening, when Nate and I were saying goodbye, Simran saw me to the door. She kissed me, in full view of her Dad. \"You did well.\" she said. \"I knew you would.\"\n\nFor New Year's Eve, we went out for a late dinner with Nate and Parvani. It was quiet, and comfortable, and intimate. After midnight, we went our separate ways. Simran and I bundled up, and walked back to my apartment. We would have the place to ourselves, since Coop would be passed out, drunk, at a friend's party across town.\n\nI took my beautiful girlfriend to bed, and worshipped every inch of her wonderful body. I took my time, letting her build slowly to orgasm. Then I spooned with her, and entered her from behind. I tried to last as long as possible, hoping that I could bring her to a second climax. I couldn't hold out that long, though, and gasped as my own orgasm swept over me.\n\nWe fell asleep, with my arms wrapped around her.\n\nI awoke before her in the morning - my arm was asleep. I managed to slide it out from beneath her without waking her up. Then I could gaze at her beautiful face as she slept. Somehow, I thought that I caught a glimpse of what Simran would look like when she was in her forties - or even older.\n\nI wanted to be around for that.\n\nWithout disturbing her, I slipped out of bed, and started a pot of coffee. Then I headed to the bathroom for a quick shower. When I came out, wrapped in a towel, Simran was at the door, dancing a little two-step jig. She obviously needed to use the toilet, but was too shy to do it while I was there.\n\nI dried off, pulled on a t-shirt and a pair of shorts, and poured myself a coffee. I heard the shower running, and double-checked that I had all the ingredients for a decent breakfast, whatever she might like.\n\nWhen the shower stopped, I gave her another ten minutes, but she was still in the bathroom. I knocked on the bathroom door, and - on impulse - entered. What the heck - we had seen each other naked plenty of times. There was nothing to be shy about.\n\nSimran was seated on the edge of the tub, naked. She was drying her long, black hair - which was obviously a lot of work.\n\n- \"Happy New Year.\" she said, with a smile.\n\n- \"And the same to you.\" I answered. \"I came to see what you'd like for breakfast.\"\n\n- \"I can smell the coffee. That's a good start.\" she said.\n\nI'm not sure what came over me. I intended to offer her eggs, bacon, cereal and toast - whatever she wanted. Instead, I stood there, gawking at her awesome nakedness. Simran saw what I was doing. She just smiled, and continued to dry her hair, making no move to cover up.\n\nFor some reason, utterly unknown to me, I walked over. I lifted her chin, and tilted her head back. I bent over, and kissed her lips. My hand travelled down, brushing across her nipple - Simran shuddered - and I cupped her full breast.\n\nSimran's hand came up, to brush against the front of my shorts. On impulse, I pulled them down, so quickly that my growing erection snapped up to slap against her hand. She immediately wrapped her fingers around it.\n\nBoth of my hands were occupied with her breasts, fondling one, while teasing the nipple of the other. Then I acted completely out of character. I lifted my leg, and put my foot on the edge of the bathtub. That immediately raised my cock several inches - closer to her face.\n\nIt was a bold, brazen invitation - and something I had never done. Simran had performed oral sex on me before - but I have to admit, I was much more comfortable going down on her. And it would have struck me as disrespectful, to stick my cock in her face, expecting her to suck it.\n\nAnd yet here I was, doing just that.\n\nSimran moaned, and took the tip of my erection between her lips. She swirled her tongue over the head, and then took me in her mouth. I continued to manipulate her breasts, and licked my fingers, so that I could lubricate her nipples.\n\nShe surprised me, then, by trying to swallow me whole. Simran began sliding her mouth up and down my shaft, bobbing her head. One hand was around the base of my cock; the other came forward to cup my balls, and roll them between her fingers.\n\nIt was all tremendously exciting, and I felt the tightness that told me I was about to come. I have no idea what possessed me: I pulled back, popping my erection out of her mouth. Then I shot a massive stream of semen onto her chest.\n\nMy aim wasn't very good. My knees buckled a bit, and the second jet struck her shoulder. The third and fourth spurts hit her breast. Simran's eyes went wide, as she watched me come all over her.\n\n I had to grab for the edge of the shower, and hold onto her shoulder, to avoid falling over - that's how powerful the sensations were.\n\n- \"Wow.\" said Simran.\n\nMy come was all over her chest, and even in her hair. I was about to say 'Sorry' - but I didn't. Instead, I said: \"You'll need another shower.\"\n\nI lifted her to her feet, and helped her step into the tub. Again, I have no idea what demon was possessing me - I climbed in after her.\n\n- \"What?\" she said.\n\n- \"I made the mess.\" I said. \"I have to help you clean it up.\"\n\nI shampooed the bottom half of her hair, and then squirted shampoo too high. I ended up washing her hair all over again. Simran moaned, and leaned back against me as I massaged her scalp. Who knew that a scalp massage could be so sensuous?\n\nThen I soaped her back, and reached around to lather up her breasts. Simran was grinding her butt cheeks back into my groin - with predictable results. Soon my erection was pressing against the crack of her ass.\n\nSimran could definitely feel it. She reached back with a soapy hand, and took hold of my cock. She slid her wet fingers up and down my shaft.\n\nThen she leaned forward. And she began rubbing the head of my cock against her pussy lips. I was amazed.\n\nIt wasn't that Simran was Little Miss Prim and Proper. And I wasn't shy, either - at least, I didn't think that I was. Yet I had never anticipated - not in a million years - that she and I would be fucking in my shower.\n\nIt wasn't 'making love' - I didn't kid myself. It was primal, animal - and completely out of control. Once she had me in position, I thrust forward with my hips, and penetrated her deeply.\n\n- \"Aaah ...\" she groaned, from deep in her throat.\n\nI grabbed hold of her hip with one hand, while continuing to maul one breast with the other, and I began to thrust into her - fucking her hard and fast. I had no idea what I was thinking - most of me was blind to anything other than the mad rush to orgasm.",
        "My wet hips slapped into her wet buttocks, as I drove my distended length into her depths. Simran had to lean forward, and brace herself with her hands, to prevent me from driving her into the next room.\n\nI don't know how long we lasted. But my balls seemed to burst as I exploded inside her, and I cried out her name.\n\nI clung to her, breathing deeply. Simran turned, and wrapped her arms around me.\n\n- \"Wow.\" she breathed.\n\n***\n\nThat incredible shower fuck cause me no end of grief. I couldn't figure out what had happened. It was as if I had lost control, and treated her ... well, I wasn't sure how I had treated her.\n\nI felt a bit guilty, to tell the truth. I had enjoyed two powerful orgasms - and I was pretty sure that she had not.\n\nI tried to make it up to her, the next time we were alone. I went down on her with infinite patience, teasing and caressing and trying to give her the mother of all orgasms. The result was satisfying ... but no more than that.\n\nSomehow, there was something wrong - or missing - with our sexual relationship. It was good - but not great.\n\nI loved her. Absolutely. Completely. I worshipped her. I was an attentive, conscientious lover, who put her pleasure before my own. I would go down on her at the drop of a hat. I always made sure that she had an orgasm - before my own.\n\nBut there was something ... not quite right. What was it?\n\nI wasn't going to ask her about her sex life with Arjun. I didn't even want to think about that - just as I was sure that Simran didn't want to hear about Jen, and especially not Diane.\n\nIt all came to a head - literally - in February. Simran was staying over with me, after a Valentine's Day date which we had both enjoyed. I was going down her, my head between her legs, taking my time, trying to maximize her pleasure.\n\nShe came - quietly. I could feel it. A slight tremble. No fireworks, no ringing bells, no explosions. I felt defeated.\n\nSimran could tell, immediately, that something was wrong.\n\n- \"Ian? What is it?\" she asked.\n\n- \"I don't know, Sim.\" I said. \"I don't ...\" I had no idea where to begin, or how to start. Thinking about sex is one thing - talking about it with your girlfriend quite another.\n\n- \"You can tell me, Ian.\" She sat up in bed, looking quite concerned. \"You can tell me anything - you know that, right?\"\n\nGreat - now I had her worried that something was seriously wrong. And the longer I sat there, without saying anything, the worse she was going to think it was. So I took the plunge.\n\n- \"I don't quite know how to say this, Sim. Forgive me, if it comes out ... wrong. But - am I satisfying you? Sexually?\"\n\nShe blushed, a little, But she didn't laugh, and she didn't shy away. Instead, my beautiful girlfriend took my hand, and then she kissed me on the cheek.\n\n- \"You are a gentle, generous lover, Ian.\" she said. \"You always make sure that I ... reach a - a climax.\"\n\nI had to smile. She was nervous, too, and certainly no more accustomed to talking about this subject than I was.\n\n\"You really do put me first.\" she continued. \"If I so much as shift my hip, you're ready to change position. You're patient, and attentive ...\"\n\n- \"But?\"\n\n- \"There's no 'but', Ian.\"\n\n- \"Okay - how would you describe our sex life?\"\n\n- \"It's good.\" she said. Then she blushed again.\n\n- \"Good.\" I repeated. \"But not great.\"\n\nSimran gave me a long look.\n\n- \"Is that what's worrying you?\" she asked.\n\n- \"The fact that our sex life is just 'good'? Yes - that worries me.\" I admitted. \"You haven't thought about it?\"\n\nShe didn't answer immediately.\n\n\"You have thought about it.\" I said.\n\nSimran squeezed my hand tighter. \"Ian - if I tell you this - you have to promise me that you won't forget two very important facts.\"\n\n- \"And they are?\"\n\nShe kissed my cheek again. \"First and foremost, Mister - I'm very much in love in with you. That's not going to change. And second ... I enjoy being intimate with you. That's not going to change, either.\"\n\nIt was my turn to kiss her cheek. \"I won't forget. I promise.\" I was never going to forget what she had just said.\n\nShe sat up a little straighter in the bed. \"Alright. In that case, let's treat this as a workshop: how do we improve our ... -\"\n\n- \"Intimate moments.\" I suggested.\n\n- \"Right - those.\" Simran smiled. \"Sometimes, Ian ... you treat me like ... like I was fragile. I won't break, you know, if you squeeze me too hard. Trust me - I'll let you know if you're hurting me.\"\n\nI nodded. That was certainly true. I was a bit too ... careful.\n\n\"And ... you're still putting me on a pedestal, Ian. Not so much when we're out. But ... when we're in bed. I don't know how to describe it. You're almost ... reverential, when we make love.\"\n\n- \"Good word.\" I said. It was true. I adored Simran. I worshipped her. And I guess I was somewhat in awe of her. She had picked up on it.\n\n- \"One last thing - and please remember what you promised, before I say this - sometimes, my orgasms ... (she blushed again) ... are a bit ... predictable\"\n\n\"I hate to say it. It sounds horrible - to complain about the ... quality of my orgasms.\"\n\n- \"They're good, but not great.\" I said. And then I mustered all of my courage. \"What could I do, Sim, to give you more powerful orgasms? You must have had some ... before?\"\n\nSimran's face clouded over. She knew exactly what I was thinking.\n\n- \"No.\" she said. \"No, Ian. Don't ever think that. Don't ever compare yourself to Arjun. He was selfish in every way - all the time.\"\n\n- \"But -\"\n\n- \"There are no buts.\" she said. \"You are superior to him in every way. Every way, Ian - do you understand me?\"\n\nI nodded.\n\n\"I'm not asking you to be selfish. Well ... maybe I am. A little more selfish. Some of the time.\" she said. \"How I can tell what turns you on, if you're so dedicated to pleasing me?\"\n\nI must have looked perplexed, or uncertain. She squeezed my hand again.\n\n\"Ian - please believe me. You are more of a man than Arjun was - by any standard. There's no comparison. If I had experienced you first, there is no way I could have stayed with him.\"\n\n\"I'm not asking you to be like him. I'm just suggesting ... that you let me down from the pedestal, from time to time. You've stopped deferring to me, in public - mostly. Now you should stop deferring to me in private. Don't always put my pleasure first.\"\n\n\"Remember New Year's Day - in your bathroom? Ian - that was the best sex I've ever had. Intense, passionate - and completely unexpected.\"\n\n\"Surprise me. Take your pleasure, Ian. Take me.\"\n\nThat was an invitation, if I'd ever heard one. I flipped Simran onto her stomach, and took her from behind - hard, and fast.\n\nShe was right: she wasn't fragile. I pounded her, slammed my erection into her, grasping her by the hips to pull her towards me.\n\nMy orgasm was incredible.\n\nAfterwards, she clung to me, breathing heavily into my ear.\n\n***\n\n- \"You've been really busy.\" said Nate. Parvani was making tea.\n\n- \"I guess so.\" I admitted. It was true,. I was pouring my heart and soul into my thesis, while simultaneously trying to resolve my issues with Simran. That meant that I had been neglecting my responsibilities to my D&amp;D group.\n\nOver the past month, I had cancelled once, and delivered two sub-par performances. It was still enjoyable, to get together with my friends on Thursday evenings - but I was letting them down, and I knew it.\n\n- \"Roll up a character.\" said Nate.\n\n- \"What?\"\n\n- \"Just roll the dice.\"\n\nI did as I was told. I thought that it was just an experiment. He gave me five dice, and told me to take the best three. My first roll was 6-2-3-6-6.\n\n- \"Eighteen! Holy shit!\" said Nate. Parvani came out to see what I was doing. \"Looks like a fighter.\" he told her.\n\nMy rolls were average thereafter - though my constitution and charisma were fairly good.\n\n- \"Roll four dice.\" said Nate.\n\nI did. 6-4-3-1.\n\n- \"You're a fighter.\" he said. \"A Captain of mercenaries. You have 14 men. It's up to you to decide who they are. Next Thursday, we'll begin.\"\n\n- \"Begin what?\" I said.\n\n- \"Your story.\" said Parvani.\n\n***\n\nSimran was especially attentive, after our valentine's Day conversation. We made love several times - and on each occasion, I tried to ... change my game.\n\nShe stayed over in my apartment, one night. When I awoke, she was already out of bed. She had started a pot of coffee - bless her heart - and was curled up on our second-hand couch, reading, when I came out into the living-room.\n\nHer hair was messy, and she had no makeup on. She was wearing track pants and a long-sleeved shirt. I poured two cups of coffee, and brought her one.\n\n- \"Thanks, sweetie.\" she said.\n\nI sat down opposite her, and began to read some schoolwork. There was no way that this dry reading could compete with my beautiful girlfriend. I could tell, from the shimmying and shaking under her shirt, that she wasn't wearing a bra.\n\n- \"Simran?\" I said.\n\n- \"Hmmm?\"\n\nI didn't give her a chance. I pounced on her, and trapped her on the couch. It took me only a few moments to undo her buttons, and confirm that she was braless. I pulled her pants down, to discover that she wasn't wearing panties either.\n\nMoments later, I had her half-naked on my couch. Simran didn't complain.\n\nWe fucked on the couch - like maniacs. I tried to drive her into the cushions, while Simran tried to pummel and hammer me into submission. I groaned, and spewed semen into her.\n\n***\n\nI tried tying her up. Wrong idea.\n\n***\n\nThen I let Simran tie me up.\n\nShe loved it. She went down on me, as if she was desperate to learn what state secrets I might divulge. Then she got ... mean - she teased, and tortured me.\n\nFinally, she mounted me, and rode me like a thoroughbred. Her full breasts swung above my face, and I could watch her pursed lips as she thrashed and plunged atop me.\n\nIt was the most incredible sex of our relationship - thus far.\n\nAfterwards, she lay beside me, with her head cradled on my arm.\n\n- \"You know, Ian, when I made that suggestion about our ... intimate moments?\"\n\n- \"I distinctly remember something like that.\"\n\n- \"I'm being serious.\" she said. \"I only meant to suggest that you didn't have to put me first, every single time. That you should feel entitled to seek your own pleasure, too.\"\n\n- \"I understood.\"\n\nShe turned her head, to look into my eyes. \"Did you? Because I don't remember saying anything about bondage.\"\n\nWe both laughed. But then she reached out to place her finger against my lips.\n\n\"Seriously, though: you don't have to come up with something original every time we make love. I'm afraid that one night you'll drag out a suitcase full of toys, or that you'll have set up a trampoline, or something ...\"\n\n- \"Those are both good ideas.\" I said.\n\nShe pinched my lower lip.\n\n- \"I've discovered that I like being pampered, and adored a little ... just not all the time. I love it when you ... when you go down on me - it's just that we don't have to begin that way every time.\" she said.\n\n\"And once you have brought me ... to orgasm - you don't have to try for a second. You should please yourself, too.\"\n\nI kissed her fingertip.\n\n- \"Thank you, Simran. This is priceless information for me to have. Thank you for telling me.\" I meant it, sincerely. How many women tell their significant others what they like?\n\n- \"I just want you to be happy.\" she said \"As happy as you make me\".\n\n***\n\nNate had really done his homework. He had created beautiful, hand-drawn maps, and sketches of the most important NPCs (non-player characters). He helped me flesh out the 14 men under my command.\n\n- \"Roll fourteen dice.\" he suggested. \"If you roll a six, that guy gets a significant stat, or characteristic.\"\n\nNate had also picked out the music for my adventure. Brothers in Arms by Dire Straits, Enya, Clannad (Enya's sister's band - they did the awesome soundtrack to the TV series The Hooded Man), the Stones 'Paint it Black', and 'Achilles' Last Stand' from Led Zeppelin's Presence album. He had also included some Genesis standards, like 'Watcher of the Skies', and 'The Knife'.\n\nHe led me straight into an ethical dilemma. My little band was part of a mercenary company, employed by a Baron who was rebelling against a Prince, his liege lord, with the help of the neighbouring Kingdom.\n\nWhen the walls of the capital were breached, I followed my special instructions, and drove for a temple in the eastern end of the city. After a hard fight (two of my men were killed), we captured the temple - and the Prince.\n\nNew orders came down from on high. The Prince was to 'disappear' - and we were to bury him in an unmarked grave.\n\nMy character, Bohemond (Yeah, I like Norman knights), couldn't do it. I called my remaining soldiers together, and put the question to them. Most of them didn't like it, either. We were warriors - not murderers.\n\nWe smuggled the Prince out of the city, with his elderly servant, and made a run for it.\n\nJust like that, we were hunted fugitives, with an army chasing us, and virtually no one on our side. That was where we ended our first game.\n\nIt was my first experience as a player since Burnsie's introductory sessions. I was discovering, firsthand, the joy of playing the game - of not knowing what was going to happen next. I had been a GM for so long, I didn't know how it felt to be a player.\n\n- \"Holy shit, Nate.\" I said. \"That was awesome.\"\n\n- \"Glad you enjoyed it.\" he said. \"There's more to come.\"\n\n***\n\nSimran was being unusually cagey, as we had a pint at the local.\n\n- \"So.\" she said. \"Tell me about the suffragist movement in Britain.\"\n\n- \"Come again?\"\n\n- \"Women demanding the vote. Britain.\" she said. \"Tell me about it.\"\n\nI knew the basics, of course - it's a fascinating story ... Emmeline Pankhurst and her daughters, and the split in their ranks caused by the First World War. They were also divided on the issue of tactics; Emily Davison threw herself in front of the King's horse at the Derby in 1913 - and was killed. I knew a bit from previous reading, and even more from Yvonne Bennett-Smythe's book.\n\n- \"Why are you asking?\" I wondered.\n\n- Indulge me.\" said Simran.\n\nSo I told her what I knew.\n\n\"How could I learn more about this?\" she asked.\n\n- \"Well, I recently read a great book about suffragists and the war - I told you about the author - Yvonne Bennett-Smythe. She's a friend of Dr. Welsh. I met her in London.\"\n\nSimran reached into her briefcase (she had come straight from work). She pulled out a legal file folder, and extracted a thick sheaf of papers. She passed them to me.\n\nI read the title. \"Suffragists after the Vote\". And then I saw the author's name: Y.A.C. Bennett-Smythe.\n\n- \"Holy shit.\" I breathed. \"How did you get this?\"\n\n- \"I've been asked to edit it.\" said Simran. \"There's a new edition of her book coming out in North America, and she's added two chapters.\"\n\n- \"And you're editing it?\" I said.\n\n- \"I know. Isn't that amazing?\"\n\nIt was. You can believe in a 'Small World'. Or you can subscribe to the theory that things happen for a reason. But it was pretty cool. Dr. Welsh thought so, too.\n\n- \"I'd like to meet your girlfriend, Ian.\" he said.\n\nWe did lunch at the Mexican restaurant. Welsh and Simran were like old friends right off the bat. They skipped the 'make fun of Ian' routine entirely, and moved straight on to the subject of Yvonne's book.\n\nI was very mindful of what Simran had told me about Arjun. There was no way I was going to repeat his gaffe. I let her talk.\n\nShe came home with me afterwards, going on and on about how wonderful Dr. Welsh was, how lucky I was, and how interesting it all was.\n\nOnce back at my apartment, I phoned in an order for pizza. I was very surprised to find Simran in the doorway of my kitchen, clad only in panties and a chemise. She smiled, and crooked a finger at me.\n\n- \"Come here.\" she said.\n\n- \"The pizza will be coming in 40 minutes.\" I pointed out.\n\n- \"You'll be coming much sooner than that.\" she said.\n\n***\n\nSimran and I had reached a new level. I continued to open doors for her, and treat her with respect in public. But she never complained that I was putting her on a pedestal again. Somehow, I had found a good balance - and it didn't take a conscious effort to maintain it. It became natural.\n\nOur ... intimate relations were also excellent. I stopped trying to come up with something new and exciting every single time (though I still thought about the trampoline, occasionally).\n\nI discovered some essential truths. I didn't have to rock her world each and every time we went to bed. It was okay to let Simran take the lead, too, and let her give me pleasure. I also found out that talking more - and more openly - about sex could lead to ... great sex.\n\nThere were many, many ways for us to come together. There was comfort sex, and unhurried moments when just lying beside this beautiful woman made me feel secure and wanted. There was impromptu sex, that seemed to spring out of nowhere, unexpected and un-choreographed.\n\nAnd there were intense, passionate couplings, when I lost track of time, and place - of everything except the irresistible need to be even closer, even deeper inside her.\n\n- \"I love it when you're on the verge of losing control.\" she said. \"Normally you're the opposite: calm, cool, and collected.\"\n\n- \"Aren't you afraid, at all?\" I asked. \"It scares me, a bit.\"\n\n- \"That's part of it. But you'd never hurt me, Ian. We both know that.\"\n\nSometimes, I learned, just fucking was okay. It was casual, recreational sex - with the person I loved. I was shedding a lot of inhibitions and hang-ups, and so was she.\n\n- \"When we first started making love,\" she said, \"I had to overcome my urge to ... resist, when you went down on me. For some reason, I felt like you shouldn't be doing that ... that I didn't deserve it.\"\n\n- \"I'm glad you got over that.\"\n\n- \"Me, too.\"\n\n***\n\nI only had three exams in April. One of them, though, was an oral comprehensive. Four professors - including Dr. Welsh - sat around a table and fired questions at me. I wasn't just ready - I was pumped.\n\nThe night before, I didn't sleep at all. I drank coffee, and listened to The Jam (thank you, Derek) while bouncing up and down. My answers must have been good - the profs kept interrupting me, so that they could ask a new one.\n\nI didn't just pass - they awarded me a PWD - Pass With Distinction.\n\nThen Welsh offered me the research job in London again. \"July - Three weeks' work, this time.\" he said. The pay was just as generous. I had a few questions of my own.\n\nSimran agreed to meet me at Falafel Hut for lunch - it was only two blocks from her office. She knew that something was up. I didn't keep her in suspense.\n\n- \"Simran - would you like to go to Britain with me in July?\" I asked.\n\n*****"
    ],
    "authorname": "AspernEssling",
    "tags": [
        "friends",
        "girlfriend",
        "dungeons and dragons",
        "travel",
        "true love",
        "europe",
        "age difference",
        "communication",
        "romance",
        "university"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/gaming-dandd-pt-10"
}
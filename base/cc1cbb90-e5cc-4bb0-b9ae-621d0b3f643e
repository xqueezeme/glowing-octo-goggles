{
    "title": "Occupational Hazards Ch. 03",
    "pages": [
        "I groaned, noticing that Nikki's lips remained slightly parted. Her cheeks flush from her emotional release. Her eyes distant, yet she kept her gaze trained on my face.\n\nWaiting. Just like...\n\nNo! Stop it!\n\nTwo words do not infer consent. Not without a full understanding of what she is getting into. She may not even be into that. We have to\u2014\n\n\"Ben?\"\n\nI blinked. \"Sorry.\"\n\n\"Hunter...he's not home right now. But I can't stay there. I\u2014\"\n\n\"Shh. I'll take care of it.\" I cupped her face, brushing my thumb over the rise of her cheekbone. Her skin was warm against mine. So soft. \"If that's okay with you?\"\n\nShe nodded slowly, rolling a corner of her lower lip into her mouth.\n\nI shut my eyes. So many thoughts were running through my head. Most of them inappropriate, given the current situation.\n\nFocus, pal. Get your mind out of the gutter. Her safety comes first.\n\nWhen I looked at her again, Nikki was still worrying her lip. The words in my head suddenly spilled out. \"Please don't do that. You're distracting me.\"\n\nHer teeth released their hold, leaving a slight indentation behind. \"Oh, sorry.\"\n\nGod, if she only knew the effect she had on me. It was actually painful to swallow now. \"You said he was gone. For how long?\"\n\n\"A couple of days. He had to go to Florida for business.\"\n\nI hoped I masked the surprise and excitement from my face. Was he going for a drug run? I had to get word to Davenport. But first... \"I'm going to take you to get your things.\"\n\nShe whimpered then, her shoulders hunching.\n\n\"Don't worry. I'll be with you. Take whatever you need now. You won't be back. If you leave something behind, I'll buy you another one.\"\n\n\"Where am I going to\u2014\"\n\n\"My place. Until I can set something else up.\"\n\nHer whole face brightened for a moment before she dipped her head again. She must have remembered what I'd just said not a minute ago because she raised it, though she stared somewhere over my shoulder. Making me wonder if she was afraid I'd be able to read something in her eyes.\n\nI was determined to unravel her mystery. I liked a challenge. It would just take more time alone with her. Which ironically, I would now have.\n\nShe scooted away, gathering her purse from the other end of the couch. \"Let's get this over with.\"\n\nAs we made our way back to the stairway, she slipped her left hand into my right. I held my breath. Hesitating before closing my fingers around hers.\n\nThey were slender. Soft. Delicate. Just like the rest of her. And they fit so well within mine.\n\nBruce was standing at the top of the stairs, keeping watch over the lower level. He turned when we approached. Raised an eyebrow.\n\nI gave him an upward tip of my chin. \"Thanks, man.\"\n\n\"All good?\"\n\n\"It will be.\"\n\nHis gaze darted down, probably noticing our linked hands. But like a professional, he only said, \"Glad I could help.\"\n\nWhile we maneuvered through the customers downstairs, Nikki's grip tightened. Maybe she was afraid I'd let go. If so, she had nothing to worry about. And once again, for the life of me, I struggled to understand why I had this inexplicable drive to protect her.\n\nHer arm started shaking the moment we stepped outside. She let out a squeal when I tried to put my coat around her using one hand and bumped her injured arm. Reminding me of her fragile state. I didn't want to, but I had to release our hold. Which made her whimper.\n\nI quickly adjusted the material over her shoulders. My hands stilled as I pulled the lapels tighter under her chin. It hit me that we were standing in the same spot we had last Friday. Minus the biting rain.\n\nOur faces were only inches apart. And despite what she had been through, I saw something new in her eyes that hadn't even been there a few minutes ago. Trust. That moved me deeply. She knew nothing about me, yet she was willing to put her life in my hands? It was profound.\n\nI groaned softly, and her head tilted back. Maybe in invitation. Maybe out of surprise for why I'd made the sound. Either way, the temptation called to me. But I pushed it away with the release of the jacket and took her hand again before continuing down the sidewalk to the opening in the wrought-iron fence.\n\nShe kept pace with my longer strides. I glanced at her as we went under the lights over the arched entrance. Noticed she was worrying her lower lip again. The urge returned. Rising up stronger than before. It was harder now, but somehow, I harnessed restraint.\n\nMy car was right where I'd left it twenty-four hours ago. I held the door open for Nikki. Helped her get the belt on without hurting her arm. And walked around to get behind the wheel. All the while, missing the feeling of that small, warm section of her skin touching mine.\n\n###\n\nNeither of us spoke on the drive. Instead of wondering what must be swirling through her brain, I used the time to consider the next step of my impromptu plan. After we picked up her things, we had to find an open restaurant. My stomach was uneasy. I knew at least part of it was due to a hunger for food\u2014that sandwich had definitely not been filling. The rest? Hmm...\n\nNikki let out a muffled cry as I pulled into the spot the Charger had vacated.\n\nReaching out, I squeezed her hand. \"Remember, you're not alone. And he's not here.\"\n\nHer hand shook so much when she tried to unlock the front door that the keychain made a dull ringing sound. I placed my hand over hers. Steadying it so she could get the key into the keyhole.\n\nThe door swung open. But she remained outside. Breathing heavily.\n\nI rested my hand on her good shoulder.\n\nShe whispered, \"Thank you. For everything.\"\n\n\"I haven't done anything yet.\"\n\n\"You've done more than you know.\"\n\n\"Well then, you're very welcome.\" When she still didn't move, I gestured to the doorway. \"I know he's gone, but the quicker you do this, the sooner we get out of here. After you.\"\n\nShe nodded then led the way into her miserable abode with a big sigh.\n\nThe inside pretty much matched the exterior. There wasn't much to see in the living room except a threadbare couch, a faded leather recliner, and a dated fireplace with a flatscreen TV mounted overhead. So far, the latter and the Charger were Hunter's only visible signs of his success in his side business. Which made me wonder if we had been given reliable intel.\n\nAlthough minimal in furniture and decoration, the room looked clean. In order. Someone\u2014Nikki, presumably\u2014had taken care to place blankets and small pillows on the available seating. Tried to make it at least appear to be cozy.\n\nThere was a wall directly behind the front door, just as I had dreamt it. Now, instead of me pressing her up against it, I imagined Hunter. On how many occasions had he held her there? Threatened her? Abused her?\n\nI noticed that Nikki had stopped in between two doorways, staring at the corner where they met. I could see a stove at the back of the house through the one straight ahead. The other led into a room off the wall behind the front door.\n\n\"Get only what you need.\"\n\nShe nodded and disappeared through the doorway straight ahead.\n\nOnly a few steps after her found me standing in the tiniest kitchen, located exactly where I had surmised it would be during my stakeout. While the appliances, fixtures, and wall and floor coverings looked dated, everything was clean, like the previous room. Not a dirty dish in the rack next to the kitchen sink. Not a towel out of place.\n\nWas it all just Nikki's way of keeping some semblance of order in her chaotic world? Or part of Hunter's control over her? A way to keep her domesticated?\n\nI heard a drawer slam shut and tried to enter the room to the right of the kitchen. With a combination tub and shower that took up most of the space, the bathroom looked too small for even one person. I remained in the doorway, opening my mouth to ask if she wanted help, but nothing came out.\n\nWhen she turned to me, her hands were full with a hairdryer, a flat-looking curling iron, a brush, and a makeup case. The latter surprised me. I could have sworn she didn't use cosmetics. But then again, maybe it wasn't for her face.\n\n\"Let me take those.\" I put my hands out, gathering the items like an offering.\n\nShe opened the cabinet below the sink, stared at the contents, and then closed the door without removing anything. However, two narrow bottles from the tub enclosure were added to the pile. The labels were mostly worn away, but I could read the words \"jasmine\" and \"shampoo\" on one of them. I raised an eyebrow. Not perfume as I'd presumed.\n\nThen I followed her back through the living room to the only other space in the house: the bedroom. She yanked drawers open on a dresser, randomly tossing things onto the bed before slamming the drawer and starting on another one. Panties and bras. Socks. Some stockings. A few T-shirts. Another pair of jeans. From a small box on top of the dresser, she removed a handful of jewelry that she stuffed in her purse.\n\nHer shoulders were visibly shaking as she reached into the closet. I added the items in my arms to her bed and stepped up behind her. That's when I saw her wet cheeks.\n\nAll of the desire that had built up since holding her in the club immediately faded into guilt. Disgust in myself. How horribly insensitive of me to even think about pursuing her in any way right now after learning of her trauma? I made a resolution to keep my thoughts more in check going forward. Neither my feelings nor her situation were going to be rectified overnight.\n\n\"Let me do that.\" I gently took her hand off a hanger. \"Just point out what you want.\"\n\nNikki sniffled. Nodded.\n\nWe made quick work of sorting her clothes from Hunter's as she only had a handful of tops and slacks. No dresses. No skirts. Nothing outrightly...feminine. There were three pairs of shoes and two jackets. Was her minimalistic approach to fashion her own decision?\n\n\"You'll need your suitcase.\"\n\nShe shook her head, her arms crossing across her chest.\n\n\"Let me guess, Hunter took the only one.\"\n\nAnother louder sniffle met my ears as I studied the decent pile we had formed on the bedspread. I feared if we didn't get out of here soon, she was going to lose it. I expected it to happen again tonight, but I'd hoped we'd be somewhere she felt safe first.\n\nThere were no other types of bags in the closet. I ran to the kitchen and searched through the cabinets until I found a box of trash liners and several cleaning supplies in a medium-sized box. I grabbed one of the liners and dumped the contents of the box out. Back in the bedroom, I found her still standing in the same spot.\n\nShe was really shaking now. Biting her lip.\n\nI started scooping her clothes from the bed into the white, plastic bag. She gasped, though she didn't try to stop me. The bathroom articles and shoes went into the box. I was pulling the handles taught on her makeshift suitcase when it occurred to me she had not taken anything personal. No pictures. Mementoes. I didn't blame her...who would want something to remind you of the place that had become your prison? The person who had imprisoned you?\n\nFor a long moment, we both stared silently at the empty bed. I couldn't imagine what she was thinking. Imagining.\n\nMe? I was picturing her lying there helpless while that vile man violated her and then went about his business as if it was an everyday occurrence. Hell, it might have been. My anger returned tenfold, and I knew I would be the one to lose it if we didn't leave. Now.\n\nNikki suddenly whimpered and ran out of the room. I hefted the bag of clothes over my shoulder and cradled the box in my other arm then followed her. She was already through the front door when I stepped into the living room. Damn, this house was tiny.\n\n\"Wait, Nikki!\"\n\nShe stopped on the cement slab that served as a front porch. Panting. Crying. Then she said the first words since we'd gone inside. \"There is nothing left for me here.\"\n\n\"Okay. Let me lock up. Where are the keys?\"\n\nShe pointed to the door and headed to my car. Yep, in the lock, right where we'd left them. I made sure the lights were off and secured the deadbolt again. I wondered how long it would take Hunter to realize she was gone. Really gone. Would he even care?\n\nNikki was sitting in my car with the passenger door open when I returned. Hugging my jacket around her arms. Her eyes were wet with fresh tears as they looked up at me.\n\nI handed her the keychain. \"Take off any house keys. You won't need them anymore.\"\n\nShe fumbled with the ring for a moment then handed over two keys, presumably for the front and back doors.\n\nI deposited the box and garbage bag in the trunk, glancing around the mostly dark neighborhood. There, the neighbor's overgrown bushes looked good. I drew back my arm, but something stopped me from letting go of my pitch.\n\nMy hand shook as I lowered it. I stuffed it in my pocket instead and released the contents. Then I jerked the driver's side door open.\n\nMaybe Director Davenport would find the keys useful for the mission since I obviously wasn't.\n\n###\n\nNikki had insisted she wasn't hungry. But the moment the waitress set a plate before her\u2014at the same diner I had taken her to last Friday\u2014she took a huge bite of the burger and stuffed three fries into her mouth before she even started chewing.\n\nI'd seen this happen before with other victims. To suddenly engorge themselves after being removed from a place of trauma. Anxiety had overpowered all of their other senses and feelings. Including the need for nourishment. Once transplanted to a safe location, something in their brain said it was okay to eat again.\n\nShe glanced out the window several times as we both cleared our plates. At least she appeared to stop shaking. Though a stray tear occasionally escaped when she blinked.\n\nI started to reach my hand out to hers, but I laid my palm flat on the table again. \"He's not out there, honey.\"\n\n\"He's got eyes everywhere. Just because he's not physically\u2014\" She put her fist to her mouth and choked back a sob.\n\nI pulled out a few bills and threw them on the table. Nikki flinched as I stood. But when I held out my hand and gestured toward the door with my head, she was out of the booth hugging me so hard I gasped for breath.\n\nHer voice was a dry whisper. Ghostly. \"Get me out of here.\"\n\nI held her for a moment then ushered her to the door with my hand on her back. She ran ahead of me to my car the second we stepped outside. I used the keyfob to unlock the door so she could get in. And found myself looking around as I closed the gap.\n\nDamn it, she had made me paranoid now, too.\n\nComing from the direction of her now ex-house, we had to cross two sets of tracks to get to my part of the city. And as our luck would have it, we got caught by a train. A really long one carrying a seemingly endless number of shipping containers.\n\nI shifted into park, made sure the doors were locked, and settled in for the duration. The streetlights on the other side of the train were hypnotizing as they flickered between the passing cars. The only sound was the repetitive scraping of metal wheels on metal rails and a loud clanging as the cars went over a rough patch at some point in the track.\n\nMy mind wandered back to my plan as we sat. Waffling between hitting the grocery store to stock up, or skipping it if we would be heading out sometime in the morning or even later tonight. I guess it depended on what the Council decided to do...when they could get us out of the city.\n\nA soft sound met my ears. Like muffled crying.\n\nI turned to see Nikki looking out the passenger window. Thought I heard a sniffle this time. \"We'll be to my place soon. I'm sorry. I wasn't planning on the train\u2014\"\n\nThere was another sound. It wasn't crying this time. More of a...scoff.\n\n\"It's not that.\"\n\n\"Then what?\"\n\nShe remained silent, but I saw her shoulders move up and down in a shrug.\n\n\"Hunter? I won't let him\u2014\"\n\n\"It's not just him.\" She let out a deep sigh. Then... \"You wouldn't understand.\"\n\n\"Try me.\"\n\n\"I shouldn't have come to you.\"\n\nIt was my turn to scoff at her. \"Because?\"\n\nI heard the soft squeak of my leather jacket rubbing against the leather of the seat. Another sigh. Then she turned her head toward mine.\n\n\"Because I don't want you to get hurt, too.\"\n\nThe corner of my mouth turned up. Awe, she cared about me. \"Hurt? By him? What was it you said? I can take care of myself...I'm a big boy.\"\n\n\"I don't... I meant... Before... Well now, it's different... Oh, nevermind.\"\n\nI pressed my lips together. She was adorable when she stammered.\n\nAhead, the last flatbed car with containers passed through the intersection. The red lights on the train signal continued flashing for a few seconds as the gates rose. Then we were moving forward again. I was through the first set of tracks when I heard another sigh. Almost as if I'd insisted she elaborate. I admit, I was curious, but I wasn't going to press.\n\n\"I've put you in jeopardy. Not just with Hunter if\u2014no when\u2014he finds out I'm gone. It's...me. I know that sounds lame. But it's more than that. I just\u2014\"\n\n\"Spit it out, Nikki.\"\n\n\"I'm not worth your time.\" Her voice was so soft, but I swear I heard her add, \"I never was.\"\n\nMy jaw clenched. Another block up, I yanked the wheel, turning us off the main drag.\n\n\"What are you doing?\" Nikki's voice was strained, and I heard her grunts when I swerved around a parked car as its door opened and the driver got out.\n\nI ignored her, turning down another street. Looking for a spot I could just pull into. Someplace where there were no other people around. Unfortunately, it took longer than I expected. I heard her calling my name. Each time, the pitch of her voice grew higher.\n\nFinally, I found an alley away from the residential section. I pulled in and jerked the car into park. A light on the side of the building shone down through the moon-roof. Casting us in a yellowish glow.\n\n\"Ben! You're scaring me!\"\n\nI tossed my belt off so hard I heard the buckle hit the driver's side window, thankfully not breaking it. As I turned to her, Nikki shrunk back against the door. Her eyes widening, her mouth dropping open with a loud cry.\n\n\"Not worth my time? Do you think I go through this much trouble to help every girl I meet?\"\n\nShe closed her mouth and swallowed. Shook her head slightly. Her voice was squeaky when she spoke again. \"I'm not saying I'm ungrateful.\"\n\n\"Well, you sure sound like it!\" I ran my hand back through my hair. \"You are a conundrum, you know that? You say you can take care of yourself. Then you come crying to me for help only to push me away again. What do you want, Nikki? Hmm? Can you just tell me that?\"\n\nTears choked her voice now. \"You! I want you. Okay? I've always wanted you, but you didn't even know I existed!\"\n\nI flinched. \"What are you talking about?\"\n\n\"High school, Ben. Every single day for four years.\" She was crying full-force now, her hands covering her face. \"Wishing you would notice me. In class. On campus. In the halls. At lunch.\"\n\nMy chest was heaving now. Was that the secret behind the occasional gleam in her eyes? I opened my mouth, but she was faster.\n\n\"Just once...I wished I was the girl you were flirting with. You were laughing with. Hell! I would have been happy to have you ask me what answer I put down on the biology test, or if I understood the algebra homework. But you never saw me. Just like everyone else. Still, I couldn't shake my crush. Every time I thought I could, I'd see you somewhere. So I held onto my dream that maybe...\"\n\n\"Nikki, I\u2014\"\n\n\"The best thing that ever happened to me was graduation. That meant I wouldn't have to see you again. Sure, I wondered where you were, what you were doing. But the more time that passed, the easier it was to finally move on. I met Hunter. He distracted me...gave me a new dream, or so I thought.\"",
        "I scowled. At least she understood what she had with him wasn't good.\n\nShe leaned her head back and laughed, shaking her head. \"And then last week happened. I couldn't believe you were standing right there. In the bathroom hallway of all places! I'd had such a crappy day. A crappy night. I thought at first I had imagined you. But then I saw the way you were looking at me. It was just as I'd always dreamed it would be. And a shred of hope was rekindled. My heart was beating so fast. I thought, 'Finally! It only took twenty-four years for Ben Hoskins to pay attention, but I'll take it.' I was wrong, though.\" She frowned. \"I was back there in high school...and you didn't know who I was. Because you never knew.\"\n\nI found myself at a loss for words. Her admission weighed down on me, filling me with guilt. Then I felt angry. How was I to know how she had felt all those years ago? Not to be egotistical, but I'm sure she wasn't the only girl I'd overlooked that had eyes for me. Besides, lots of guys didn't know about their secret crushes. I assumed the same was for the girls... Were we all to be blamed for our youthful ignorance?\n\nYet, her words also left me in awe that someone could or would carry a crush for four years. To hold out hope that long. Here I had thought my obsession for the past six days was slightly irrational. Now, I was both flattered...and a tad bit concerned.\n\n\"When I realized that time had not changed anything,\" she continued, \"I squashed that dream again. I hadn't counted on you not giving up. To find myself sitting in your car. The irony...\"\n\nMy voice finally decided to work, and it revealed my frustration. \"Damn it, woman! I didn't know! But ever since Friday... Do you have any idea... Well, shit!\"\n\nI grabbed her behind her neck and pulled her forward before she could respond, smashing my mouth against hers. Swallowing her cry. Her whole body stiffened. But as I softened the kiss\u2014teased her mouth with my tongue\u2014I heard her moan, and she started to relax in my grip.\n\nI released her just as quickly, hearing her whimper of surprise as I said, \"I'm sorry.\"\n\nWe both retreated to our sides of the car. Breathing hard.\n\nAfter a moment, she whispered, \"Why did you stop?\"\n\nI blinked at her. Incredulous. After all she'd been through today? \"I'm trying to show restraint.\"\n\n\"Please, don't.\"\n\n\"But you...after he... I can't.\"\n\nShe dipped her chin, but her eyes stayed on mine. \"I told him, 'No.' Not you.\"\n\nI tried to speak but found it difficult. So I lifted my hands to reach for her again. She sat up, her lower lip rolled into her mouth with just the hint of white teeth holding it in place. My pants grew tighter.\n\n\"No, not here. Not like this.\" I wasn't sure if I was saying it more to her or myself. Because the memories\u2014the training\u2014from that time undercover before? They were returning en masse. And it made the adrenaline flow. If I wasn't careful, it would consume me like it had once before. And that's the last thing either of us needed right now. I would not be another Hunter to her. She deserved so much more than that.\n\nIgnoring my belt, I shifted into reverse and zipped backwards out of the alley. Slammed on the brakes and shifted again, lurching us forward in the same direction we had come from. I barely stopped at the sign on the main drag before getting back on track to my place.\n\nShe didn't say anything. But when I risked a sideways glance, I saw her turn away. Raise a hand to press it to her face.\n\nI wound through the streets, trying not to think of how soft her lips were. Their warmth. That she tasted like the cola she'd been drinking at the diner. How despite saying all she had, that maybe I had screwed up and she was having second thoughts. I know I was.\n\n###\n\nWhen we eventually pulled into the parking garage of my building, I was out of the car and around to her side, yanking the door open before I realized it.\n\nNikki started up at me, wide-eyed and gaping mouth. It was a familiar look on her lately.\n\nI suddenly couldn't focus. My heart was beating so hard in my chest. My thoughts were a jumble. I had to calm down. Get control of myself. I took a deep breath and stepped back.\n\nShe closed her mouth and looked around the garage behind me. But she didn't get out.\n\n\"Nikki?\"\n\nHer head jerked back to face mine. \"What?\"\n\n\"Do you want to stay in there all night?\" It was a struggle to not get exasperated.\n\nShe unbuckled and slid out, absently closing the door behind her. \"You really live here?\"\n\nI scrunched up my eyebrows. \"Well, no, not down here. My loft is upstairs.\"\n\n\"Are you rich?\"\n\nI looked around this time. Wondered why a private, secured parking garage made her think that. My building wasn't the only like this in the city.\n\nThen I considered she was taking in all of the high-end vehicles. Analyzing that the people who could afford those cars lived here. Therefore, since I lived here...\n\nThere was no way of telling her the truth: my secret-agent employer paid for it. Not that I couldn't afford a nice place. But these lofts? My annual salary could maybe rent my apartment for six months tops.\n\nI hoped she didn't think I was trying to brag or rub my living situation in her face by bringing her here. It hadn't occurred to me that I was taking her from simplicity to opulence. My intention was purely to get her from danger to safety. I suddenly wondered what she would think or say when I told her that we were going on a trip...probably somewhere expensive. Maybe exotic.\n\nAll I ended up saying was, \"No, but I have a good job.\" It was true.\n\n\"Oh.\"\n\nDid I catch a sense of disappointment in her voice? I watched her for a moment. She was still looking around. Her legs appeared to be shaking as she stood beside the car. Was she imagining herself living in a place like this? Owning a car like these? Or was she thinking about what had transpired in the car...like I was?\n\nShe jumped at the loud honk when I locked the doors with the keyfob.\n\nI popped the trunk and headed down the lane toward the other side of the garage, all of her worldly possessions in my two hands.\n\nThere were rapid footsteps behind me. I felt her hand at my arm, but she must have changed her mind because she didn't hold on. Which was probably a good thing. I would have given into the temptation to push her up against a brick pylon and kissed her senseless, not giving a damn about who saw us on the security cameras.\n\nShe took the bag from me at the elevator bay. Maybe she needed to feel useful. Or keep her mind\u2014her arms\u2014occupied on something else.\n\nWhatever her reason, it left me with a free hand. I shifted the box to the arm closest to her as we rode upstairs, trying to breath evenly without much success. Out of the corner of my eye, I saw her move. I turned my head by instinct.\n\nShe had leaned against the wall, eyes closed. The bag sat at her feet. The plastic straps loosely held in her hands. She looked...exhausted.\n\nIn that moment, I knew I couldn't continue what I'd started in the car. Even with her consent. Not tonight. The only thing I would do was make her feel safe. Comfortable. And then I needed to call Davenport.\n\nAt my door, I had to shift the weight again to retrieve my keys from my other pocket. My hand shook as I unlocked the deadbolt. As I turned the knob and stepped inside.\n\nFocus, man. Focus.\n\nI deposited the box on the kitchen island and turned to take the bag from her, only to find she'd stopped in the doorway.\n\n\"Nikki?\"\n\nShe just stared at the floor.\n\nI quietly approached and pressed my hand to her cheek. What had happened to the girl in the car who had declared her infatuation with me? Who didn't want me to stop kissing her? Did she think because she'd given me her blessing that I was going to tackle her once she stepped across my threshold?\n\nHonestly, I thought her eagerness to make out was premature. She had to still be in shock from her trauma. I should have been stronger...not given into the compulsion despite her revelation.\n\nWhen she didn't look at me, I whispered, \"Hey, are you okay?\"\n\nShe still didn't respond.\n\n\"I don't bite. I promise.\" That got me a partial frown. \"Um, okay, I will if you want me to.\"\n\nThe corner of her mouth twitched. But her look otherwise remained neutral.\n\n\"Come in.\" I held my hand out to her, and she took it, following me as I backed into the loft. But she stopped as soon as I released her. It was as if a switch had been flipped once we'd arrived at my door, turning her into someone else.\n\nShe had done this at her house. I had chalked it up to nerves. Being forced to revisit the scene of the crime. Multiple crimes, if I had to guess. But now?\n\nI watched her for a moment longer, my trained instincts kicking in. An experiment would tell me if I was right. \"Do you want to take off my jacket?\"\n\nShe just stood still.\n\n\"Are you cold?\"\n\nNothing.\n\n\"Do you want to leave?\"\n\nAgain, no movement. No sound.\n\n\"Nikki, drop the bag.\"\n\nAnd just like that, she let go of the handles, letting the bag of clothes fall to the floor with a loud smack. Then all was silent again.\n\n\"Take off my jacket. Hand it to me.\" She shrugged the leather sleeves from her shoulders. Held it out to me. Stood stoic again, her head slightly downcast, once I took it from her.\n\nMy worst fears were being proven right before my eyes. She had been trained, just like I had been six years ago. But as a submissive. By Hunter. And though she'd been more relaxed at the club and the diner\u2014in my car\u2014walking into a residence seemed to trigger whatever rules he'd set in place in her mind. At least when she was alone with a male.\n\nDuring the eighteen weeks I had been undercover, I had been in many new situations. Seen things I'd never imagined. Not to this degree, though. I'd been told rumors of partners who were so dominating that their sub morphed into robot-mode with a certain word or gesture. I'd not believed it. Yet, here we were.\n\nI didn't necessarily want to go down that road again. I won't deny I had enjoyed parts of it. Having the authority to tell someone else to do something and they obeyed without question? Or they got a thrill from punishment if they didn't follow directions? It was mindboggling...and a hell of a rush.\n\nBut BDSM wasn't my life. It wasn't who I really was. It had been a job, nothing more.\n\nI hadn't asked to take on the role that I had. Just as I imagined Nikki didn't want to be in the position she was in. At least not to the extent that Hunter had taken it. I would gladly revisit the lifestyle, though, if it would help her. Because I knew one couldn't just walk away cold turkey. Not without serious repercussions.\n\nMy fear was if I took on retraining her\u2014and she accepted\u2014would it end up in a catastrophe for either or both of us?\n\nSomething someone had told me while I had been training crept into the forefront of my brain. I didn't know if it would work, but I was willing to try anything. If only for the sake of both of our sanities. Because I couldn't imagine either of us would last long with me giving her constant commands in order to make her basically exist around me when we weren't outside a residence of some sort.\n\n\"Nikki?\" I tipped her chin up. \"In this house, there are no rules.\"\n\nHer mouth opened, I'm assuming to provide acknowledgement of my directive.\n\nI pressed a finger to her lips. \"I want you to relax. To feel comfortable here. You can do whatever you like, whenever you like. You do not need to wait for permission. You can speak or not speak. It is completely up to you. But most importantly, you need to understand that I am not Hunter. Anything he has directed you to do or not do no longer matters. You don't have to be afraid anymore.\"\n\nBefore I'd finished speaking, the tears were rolling down her face. Her eyes slowly closed as her shoulders sagged. I could practically see the energy draining out of her. Relief that a long-kept secret had finally been found out?\n\nAs explained to me, while a submissive relinquishes control to her Dominant partner, she still\u2014to some extent\u2014has to focus on not reverting to her own will. Over time with practice, it becomes easier to yield to him without thinking. He leads, she follows. But she still makes a conscious effort to obey him.\n\nYet in extreme cases where a desired response has been repeatedly ingrained in the sub\u2014usually with threat of not just punishment but violence for disobedience, or merely withholding something the sub does want in the relationship\u2014she feels she no longer has a will. She automatically reacts the same way when in a similar environment, whether out of fear or a stronger desire for that carrot being dangled before her. Even if the other person beside her isn't her Dom.\n\nThat had to be utterly exhausting if the sub knows what she's doing and doesn't know how to stop it. Which appeared to be Nikki's case. For so long, she had been trapped in her own mind and body by Hunter's instructions with no way out. But now, someone was handing her the key.\n\nI closed the distance between us, gingerly wrapping my arms around her back and head. Holding her to me. \"Shh. I know. I know, honey. It's going to be okay.\"\n\nNikki's fingers clutched at my arms. Her sobs intensified. When her legs gave out, I picked her up and carried her to the couch.\n\nI held her in my lap, rocking her. Trying to soothe her. After a long while, she stopped shaking. Crying. Moving entirely. I thought maybe she'd fallen asleep. But she looked up at me as I brushed her hair back from her damp cheek.\n\nWe both stilled then. My heart beat faster when her hand slid behind my neck. Her lips moved ever so slightly. Her head lifting toward mine.\n\nI pulled back. \"No. It's too soon. I shouldn't have\u2014\"\n\n\"You said whatever I want.\" That lower lip rolled out this time, making her even harder to resist.\n\nA groan escaped despite my best effort to suppress it. \"You're right. I did. But you've been through a lot today. You're in shock. You should get some rest.\"\n\n\"I don't think I can sleep.\"\n\n\"You need to try. Um, how about a shower or a bath to relax? I have one of those spa tubs.\"\n\nHer eyes lit up at that, and she nodded with a slight smile. Then she worried her lower lip again. By now, it was puffy and so, so tempting.\n\nMy cock strained in my pants. I scooted out from under her before she could feel it. I heard her footfalls behind me as I headed to the bedroom. Felt her eyes on my back as I got a towel and washcloth from the closet.\n\nIt took every ounce of strength in me not to turn to her and take her in my arms again.\n\n###\n\nI pressed my forehead against the bathroom doorframe, listening to the running water. Imagining Nikki stripping. Stepping into the tub and sinking below the jets. Her breasts bobbing just above the surface.\n\nMy chest hurt as I turned back to my room. Had I made a mistake bringing her here? Was it too much temptation for the both of us now that we knew how the other felt?\n\nShe was still in the bathroom when I'd finished putting clean sheets on the bed. And making up the couch as a bed for myself. Every little effort to lower the temptation helped.\n\nI gathered the stripped sheets and my day-old clothes I'd shed this afternoon. They joined the pile from my suitcase by the washer. Groceries. Laundry. The to-do list was growing longer. But I could check something off the list.\n\nPhone in hand, I stepped out onto the balcony, closing the glass door behind me. There were still a few clouds, but more stars dotted the black blanket above the skyline. My hand shook as I pulled up Director Davenport's private line. It was for emergencies only. I'd only used it once before. Six years ago.\n\nThe director skipped any pleasantries when he picked up, his voice a deep rumble, not hiding his annoyance. \"Ben, I told you we would call you\u2014\"\n\n\"Forget that. Just listen to me. Please. It's important.\"\n\n\"Fine, you have two minutes.\"\n\n\"I only need one. Nikki Talmadge came to me for help tonight. Said Michaels raped her this afternoon. She's at my place for now.\"\n\nThere was a long pause from the other end. \"My God, Ben. I'm sorry.\"\n\n\"Yeah, well...\" I wanted to tell him 'I told you so,' but I still needed his help. \"I have some intel for you. And I need Julie to get me two tickets somewhere out of the country, the sooner the better. Preferably someplace remote with an indefinite stay.\"\n\nWe spent quite a long time exchanging information, discussing a plan. When he put me on hold, I paced the length of the balcony. Running my hand over my face and through my hair. Relishing the slight breeze that chilled my skin. My whole body was on fire. Maybe I was coming down with something.\n\nDavenport's voice came back on the line. \"Julie is finalizing your tickets. You can pick them up at the airport at oh-eight-hundred tomorrow.\"\n\n\"What about Nikki's passport?\"\n\n\"You've both got clearance. Show your ID at the ticket counter. Just don't let her know about\u2014\"\n\n\"What mission?\"\n\nThe director let out a soft chuckle. \"You've been doing this long enough to not screw up. It's in your blood.\"\n\n\"How right you are. Though, some days, I can't help but wonder if it's been too long.\"\n\n\"I'll have none of that from you. You're in your prime.\" He was quiet for a moment, as if he was thinking the same thing that was going through my head. Retirement. Neither of us said the word aloud. When he spoke again, his voice was back to being serious. \"Good luck, Ben. Patrick will pick up those keys tomorrow if you leave them in the lobby. We'll get in touch with you when it's safe to return. I know it doesn't mean much now, but I'm sorry about your friend. I'm glad she had someone like you to turn to.\"\n\n\"Thank you, Sir. Me, too.\" I ended the call and pocketed my phone. Took deep breaths as I leaned on the railing. And tried without success to clear my head.\n\nWhen I finally gave up and went inside, I staggered back against the wall of windows. Nikki was curled up on the couch, the blanket intended for me pulled up to her chin. Her hair looked silky as it lay across the pillow. I wondered if she'd washed and dried it or just combed it out.\n\nI moved closer and stood over her, noticing how relaxed she looked. I really didn't want to disturb her. But she would be much more comfortable on my bed. Plus, I could close the door. Though it wouldn't stop the temptation regardless of where I slept, it may make her feel safer if she woke during the night and was enclosed in the smaller room.\n\nBefore I moved her, though, I set to packing our suitcases. A real one for her. My own items were not hard to pick out. And hers weren't either with her limited selection. Everything would go. However, I thought it appropriate to fold her clothes first. Which was a little difficult as I couldn't stop thinking about her wearing each piece. Especially the lingerie.\n\nI left out something for her to travel in\u2014we definitely would have to go shopping for a bigger wardrobe once we reached our destination\u2014and set both suitcases by the bedroom door. We would only need to freshen up in the morning, pack our toiletries, then we'd get a cab to the airport. Hopefully, that would allow us time to sleep a little later. Or her, at least. I doubted I would get any rest at all tonight.\n\nNikki was lighter than I expected when I finally gathered her in my arms\u2014blanket and all\u2014and carried her to the other side of the loft. She moaned softly in her sleep and rolled into my body, which made it more difficult to lay her down on my mattress.\n\nEventually, I let her go. But I sat beside her for a bit. Found myself brushing her hair off her forehead. She looked at peace. Which she desperately needed right now.\n\nAfter several more minutes, I got up to go lay down in the other room. The bed creaked as I reached the door. The lamp on the nightstand snapped on.\n\n\"Ben?\"\n\nDeep breath in. Out. I turned and smiled.",
        "Nikki was sitting up, one bare leg sticking out from under the blanket. She held her hair back with one hand, messing it up. Her T-shirt was on the smaller side, emphasizing more of her breasts than she probably realized.\n\nI gulped. \"Hey. How was your bath?\"\n\nShe gave me a sleepy smile. \"Wonderful. Thank you.\"\n\n\"Of course.\"\n\n\"Did you bring me in here? I thought I\u2014\"\n\n\"Yes. I thought you'd be more comfortable. I'll sleep on the couch.\"\n\n\"Oh.\" Her gaze dropped.\n\n\"If you need anything, feel free to get it.\" I pointed behind me. \"Though my fridge is pretty empty. I've been out of town and haven't gotten to the store.\"\n\n\"Okay.\" She seemed to follow the direction of my finger to the wall that separated my bedroom from the kitchen area on the other side. Then she looked back at me. Pointed at my feet...where the suitcases were. \"Did I interrupt your plans?\"\n\n\"No.\" I was being honest. Should I tell her now or in the morning about our impromptu trip? When would she be less prone to object? I chose to wait.\n\n\"Oh.\" She sat there for a minute, and when I didn't move, she turned to lay down on her left side. One of the pillows fell off the bed. And she'd left the lamp on.\n\nI crossed the room again, intending to get both for her. But as I bent down to get the pillow, I froze. Her backside was exposed. Specifically, the backs of her legs.\n\n\"Oh, my God.\" I fell to my knees, gripping the edge of the mattress. Struggling to catch my breath. \"Nikki? Did he do that to you?\"\n\n\"It's not as bad as it looks.\" She tried to pull the blanket up, but it was tangled up in her feet. \"It doesn't hurt. Not anymore.\"\n\nI reached my fingers out toward one of the white welts that striped the backs of her thighs. Her calves. Not the crisscross marks I'd dreamt about. But just as bad.\n\nShe flinched as I touched her then lay still.\n\n\"I'm so sorry, honey.\"\n\nThere was a big sigh. Her body shook a little.\n\n\"What else has\u2014\"\n\n\"I don't want to talk about it.\"\n\n\"Okay, I'm sorry.\" I sat beside her on the bed again, my right leg close to hers. When I reached to straighten out the blanket, she rolled back to stare up at me. Then she just lay there with the T-shirt creeping up her thigh. Outlining the curves of her breasts. Enticing me. I gulped, forcing my eyes back to hers. \"I'll let you get some sleep.\"\n\nHer hand reached out and grabbed my wrist. \"Don't go.\"\n\n\"I think it's best.\"\n\n\"Whatever I want.\" She sat up, cringing as she used her right arm to support herself for a moment. \"I took a bath like you suggested. You were right, it was great. But what I really want is for you\u2014\"\n\n\"Nikki, you're not being rational.\"\n\nHer lower lip went out in a pout.\n\n\"You've had a long day. We'll talk more in the morning.\"\n\n\"But, Ben\u2014\"\n\n\"Goodnight, Nikki.\" My breathing was erratic as I walked out of the bedroom, closing the door behind me.\n\nI made a bee line to the wet bar, poured a glass of bourbon, and went back out onto the balcony.\n\n###\n\nMaybe I should have told her the truth last night. I could have avoided the twenty-questions as I urged her to get ready so we could meet our cab downstairs.\n\nNikki slammed her brush down on the bathroom counter. \"How am I supposed to get out of the country? I don't have a passport.\"\n\n\"I told you not to worry. So please\u2014\"\n\n\"Ben, you're not making any sense.\"\n\nI put my hands on her shoulders. \"Can you just trust me?\"\n\n\"I do. I just don't understand. When did you\u2014\"\n\nI cupped her face, telling myself not to get angry with her. She had every right to question why we were suddenly flying to Maldives. \"You need a break from Hu\u2014all this stress. I have a ton of vacation that's going to expire. I'm sorry, I thought it was perfect timing. The tickets are non-refundable. Will you please let me indulge you?\"\n\n\"What about my job?\"\n\n\"Taken care of.\" It wasn't a lie. Director Davenport was supposed to handle her absence. A dead relative or something, I guessed. \"But we do have a flight to catch, so if you could please hurry it along? We can argue about the hows and whys once we're in the air.\"\n\n\"Fine.\" She narrowed her eyes and mouth at me but finished putting the rest of her things in the suitcase I'd provided.\n\nWe made it to the airport with twenty minutes to spare. She kept apologizing, to which I repeatedly told her it was okay, we would be fine. I was slightly worried, though, as we approached the ticket counter. We didn't have time to delay if they insisted on her identification. But as my boss had assured me, all I had to do was show my ID and my passport.\n\nThe agent picked up a phone, and a moment later, an officer appeared, which made Nikki cower against me. He led us around the corner toward security. But he bypassed the line, walking us directly through the restricted area for personnel. Our bags went through a separate X-ray machine, and then we were ushered to a waiting motorized cart.\n\nNo words were exchanged as he drove us straight to our gate with our two carry-on bags. Not even from Nikki. She just gripped my hand and pressed herself against my side. I did thank the officer as we disembarked. He tipped his hat, then he was off, back into the morning rush.\n\nHowever, once we had settled into our business-class seats and were taxing to the runway, Nikki let out a deep breath, her whole body shaking for a moment.\n\nI patted my other hand over our joined ones on the arm rests between us. \"Are you okay?\"\n\n\"There are a million questions in my head\u2014least of which is what the hell do you do for a living?\u2014but the only thing I can say right now is, I'm so glad you convinced me to go on this trip. So if I forget later, thank you!\"\n\n\"You're welcome.\" I chuckled. \"And to answer your question\u2014\"\n\nHer hand covered my mouth. \"No. I don't think I want to know. Not right now. I'm afraid you'll ruin the mood. You can tell me later. On our way home, maybe. We are coming back, right? You're not jetting me away to kill me or something, are you?\"\n\nI had started to nod in response to her first question but shook my head quickly. I wasn't going to tell her the truth, but this was better. I didn't have to lie. Yet.\n\nShe dropped her hand. \"How long is the flight again?\"\n\n\"Just over twenty-six hours, according to our tickets. We have to connect in London and Qatar. So I hope what I picked out for you to wear is comfy.\"\n\n\"It's fine.\"\n\n\"You can watch an in-flight movie. Or take a long nap. Are you still tired?\"\n\nShe said, \"No,\" but she yawned.\n\nI put one of the travel pillows on my shoulder and patted it.\n\nHer head nodded a few times as she fought sleep and tried to read one of the magazines in the seat-back pockets. But she finally gave in and leaned against me, pulling the blanket they'd given her up over her shoulders.\n\nI closed my own eyes and leaned back, desperately needing to rest as well. Which seemed much easier now that we were somewhere Hunter Michaels couldn't get us. I just prayed the team could make some headway.\n\n###\n\nTraveling had not been one of the available indulgences I'd used these past two decades. Maybe the Council had considered that when our reservations were booked. Because I had done some research while on the flight. The cost of our airfare alone could have purchased a small car. And that was just one-way.\n\nSurely, they could have sent us somewhere else for a tenth of the price. But I wasn't going to complain. I'd asked to be sent out of the country. That's exactly what they had done. They had picked the location, not me.\n\n\"Ben! Oh, my\u2014 What the\u2014 How in the world\u2014\" Nikki voice resonated through the rooms.\n\nMy head was shaking as well. I had not known what to expect when we arrived at the tiny string of islands in the Indian Ocean. According to the private butler\u2014who gets a butler, much less a private one, on vacation?\u2014we were in what was called Barros Residence, the only one of its kind at the resort. We had a bedroom, bathroom, and living room in addition to our own pool, a tropical garden, and direct access to the beach shared by the other guests.\n\n\"I take it back...\" Nikki called from one of the private decks. \"We don't have to go back. Ever.\"\n\n\"Yeah, I'm game.\" I had to admit that I was in no rush to return to the states. Not only because I knew when I did, Davenport would probably hold this trip over me for the rest of my life. I prayed that it would be worth it.\n\nNormally, I would have unpacked the luggage at this point. But our butler had already seen to it. Including all of the clothes Nikki had bought while we were in London.\n\nThe layover had been good for both of us. I'd found a barber shop and gotten that long-thought-out trim, keeping some length on top but losing the side drapes. Time for biker-boy to move on. And I think Nikki had liked the change. When I'd joined her at a corner caf\u00e9, she had stumbled into an empty chair, licking her lips and blinking rapidly.\n\nI stood in the wide, open doorway between the bedroom and the living room of our villa, noting the one big bed and the smaller couch. The latter was too narrow for me, yet I hated to have Nikki sleep there. It didn't look all too comfortable for anyone as a bed.\n\nWhat had Julie been thinking? We needed at least two beds. Not to mention a door between them. Especially since we had an unknown time period for our stay. I hoped it wouldn't be too much trouble to trade down for a different villa. Until then, we would make do.\n\n\"This place is amazing!\" Nikki said when she entered through the door to the pool area and joined me on the bedroom side. \"I'm so glad you convinced me to buy a swimming suit. At least no one here will be able to see my scars.\"\n\nThat had been an oversight when I'd made the suggestion at Heathrow Airport. I hadn't even considered my words until they were out of my mouth. But I knew we would be surrounded by water, and she would want to get in if possible. So she would need something to wear, even if she used a T-shirt or towel to cover up her thighs to get there.\n\nI checked my watch. It was almost twelve, although that was three in the morning back home...yesterday. \"Are you hungry? Or do you want to rest?\"\n\n\"Neither.\"\n\nI turned to face her and gulped.\n\nShe dragged one hand across the end of the bed, kicking off her shoes as she approached me, her hips swaying. \"I want to continue what you started in your car.\"\n\n\"Nikki...\" It wasn't that I didn't feel the temptation myself, but I was still concerned about her.\n\nShe'd hesitated at the entrance to our villa and had only moved once I'd squeezed her hand and repeated what I'd told her on Wednesday night. She was fine after that, relaxing as she went on her self-guided tour. Yet we needed to discuss this habit and how to rectify it. Now that we had the time, I was hoping to talk to her openly about her situation. How I could help her if she would let me.\n\n\"No rules.\" Her head tilted ever so slightly. \"Isn't that what you said?\"\n\nI groaned, shaking my head. \"Yes, but\u2014\"\n\n\"Let me think for myself.\" Her teeth took hold of the corner of her mouth. \"Please.\"\n\nHer soft whisper. The desire in her eyes. That lip. Everything about her undid me.\n\nI reached behind her neck with my left hand and drew her closer. Brought my head down, barely brushing my lips against hers. Heard and felt her moan. Another light brush, a deeper sigh. I ran the tip of my tongue against the line separating hers. Pulled back and started again.\n\nMaybe I was hoping she would be mollified with a couple of gentle kisses for now. I'd comply for a few minutes, then I'd insist we get something to eat. Talk. Sleep to get rid of the jet lag.\n\nShe was insistent, though, to get her way. Her tongue licked my lips on my next pass. Her fingers flexed at the base of my skull.\n\nOh, fuck it. If she wanted this, I would give it to her. Wherever she led, I would follow. Maybe she would regret it later, but right now...\n\nI tightened my grip on her. Increased the pressure of the kiss. Opened my mouth and met her tongue with mine. All as I walked her backwards. Lifted her up on the bed. Sat down beside her, just as we had sat on my bed back home on the East Coast.\n\nOur moans combined. Then there were fingers in hair. Caressing. Lightly tugging as we tilted our heads. Hot gasps of air on cheeks each time we broke to catch our breath.\n\nWhile we kissed, I slid my right hand up and down her left arm. Feeling how soft her skin was. How warm.\n\nShe turned more toward me, pressing her breasts against my chest. At first, I thought it was just because she had adjusted how she was sitting. But when she did it again, I got the picture.\n\nAs I moved my hand down to her elbow, I stroked the side of her breast through the material of her T-Shirt with my thumb. She gasped, arching against me. I did it again, and she cooed as her body shivered.\n\nOver and over, I caressed her with one then two fingers, slowly. Reverently. Then teasingly just to hear her quickening breaths between kisses.\n\nI shifted myself so I could cup her breast easier. To slowly stroke my thumb over her nipple. But one minute we were making out like school kids, and the next, she had pulled away. Was standing beside the bed.\n\n\"I'm sorry.\" I closed my eyes, willing my heartbeat to return to normal. Cursing myself. \"I'm moving too fast.\"\n\nNikki was panting. \"No, you're moving too slow.\"\n\nI opened my eyes to see her pulling her top over her head. Unhooking her bra. Her breasts bounced a little as the fabric released its hold on them. I just stared in abject horror as she continued to reveal her naked body, wiggling down her pants but leaving her white panties.\n\nWhile she was beautiful, my mind could not unsee the fading, yellow-and-purple discoloration covering her right shoulder. The healed scars on her upper arms. Her chest. The tops of her thighs. All places she was able to hide with clothing.\n\nBefore I could say anything, she pulled me back in for a kiss. I closed my eyes, embracing her but avoiding her right side as much as possible. She didn't protest when I laid her back on the pillows and fondled her breast. Caressed her side. Her hip. And I didn't complain when she fisted her hand in my shorter locks and tugged me close each time I tried to lighten up on my kisses.\n\nI kissed her with reckless abandon. Not only because I wanted to show her that I didn't care about her scars. They didn't define her. But also because I wanted her to know that I really did see her now...that I wanted her.\n\nWe kept it up for quite awhile until I rotated my body to lie down on top of her, my waist developing a twinge from sitting sideways. Her hands pushed at my shoulders, and she struggled under me, pulling away from where our lips were locked together.\n\nShe was shaking her head when I sat up. \"I'm sorry.\"\n\n\"Don't you dare apologize, Nikki.\" I was panting as I watched her heaving breasts, her puckered nipples. I gritted my teeth, dragging my gaze back to her face. She was seeing reason now? Yet I was satisfied if this was all the time I had with her intimately. \"You have the right to stop whenever you want.\"\n\n\"But I don't want to.\" Her chin trembled, her gaze glassy. \"I just...\"\n\n\"Shh. Don't cry.\" I brushed my thumb across her cheek, wiping away a stray tear.\n\nHer eyes darted down then back up to mine. \"I want to...I want you to...\"\n\n\"Tell me, honey. It's okay.\" I watched her tongue as it licked her lips, wanting to do it myself again. She tasted divine. Sweet, like the strawberry she had plucked from the bowl of fruit on the table in the next room when we first arrived. And I enjoyed sucking on that bottom lip she so enjoyed biting.\n\nShe closed her eyes for a moment. Didn't open them as she took a deep breath and said, \"I want you to make love to me. But I want to be on top.\"\n\nI blinked at her, my cock twitching with delight. \"Okay.\"\n\nIt was a bit of a blur as I stood and stripped this time. As she finished. Then I was on my back. And she was crawling up to straddle my thighs as if this wasn't our first time seeing each other completely naked and were about to have sex.\n\nThe moment I saw her clean-shaven womanhood, my cock quickly hardened. It swayed between us now while I watched her lick two fingers and slide them between her legs. Then she moved up and forward.\n\nI groaned, telling myself I had better not fuck this up. I wish I still had my cock ring. Anything to delay release as long as possible. Would Jeeves be able to get me something like\u2014\n\nAll thoughts were instantly erased as she eased herself down. I almost cried myself. I willed my body to lay still. It betrayed me.\n\nHer breath hitched when my hips rose, involuntarily. It was slight, but it moved us closer together faster than she'd probably intended. The tip of my cock was left pressing at but not quite breaching her barrier.\n\nThe glorious feeling of her womanhood wrapped around my crown in a soft cocoon of wet heat overwhelmed me. Made me feel like I was in a trance. That this wasn't really happening to me.\n\nThe creamy swells of her breasts rose gently then settled again with each measured inhale and exhale. The darker tips reached toward me. Beckoned me to draw closer.\n\nMy tongue slid out in response, wetting my lips. Longing to taste them. Soon, but not yet.\n\nI kept my hands barely resting on her hips to stave the desire roaring within me. If I held her any tighter, I would be tempted to bring her down on me at my own pace. This needed to be on her terms. So I conceded to just feel her skin against mine.\n\nI focused instead on tracing the silhouette of her body with my eyes. Noticed how her sides gradually narrowed as they led from her breasts to her waist just above my palms. How they curved out then dipped in again, defining her hips. Even with her knees spread wide as she straddled me, I could still picture the graceful lines of her legs when she had smoothed her hands down them, removing her slacks and panties just minutes and seconds earlier.\n\nThe feeling of fingertips flexing against my chest brought my eyes up to her face. My jaw clenched. My breath hissed in and out through my teeth now as I tried to maintain even a sliver of self-control.\n\nHer eyelids had dropped to half-mast, her neck elongated with her head tilted back. The tip of her tongue glided back and forth over her upper lip for a moment. Then her lower lip rolled inward in that unconscious way of hers.\n\nI slid my hands lower to the roundness of her ass. She moaned, her hips lifting just the tiniest bit. But it was enough to make my cock shift forward through her swollen lips.\n\nHer jaw dropped open, her eyes clenching. She remained still for a long moment, not even breathing. Then, the delicate opening between her bow-shaped lips narrowed\u2014the creases around her eyes and on her forehead flattened\u2014as she nudged her hips back, apparently trying to move my cock to its previous position. When that didn't work, she nudged in a different direction. Her mouth widened again, and the creases reappeared.\n\nSomething in my brain said I should try to help her. I just couldn't think clearly enough to follow through. Even a hair's movement in any direction shifted her across the tip of my throbbing erection. Which made it twitch. Her gasp. And me groan.\n\nI watched with pure fascination while her face contorted in a silent, erotic display, even though I hadn't entered her yet. It was as if she was experiencing all these wonderful, new sensations. Like she'd never been touched before. At least not with gentleness. Consideration. Adoration.\n\nAnother excruciating minute passed before she pushed back harder. Opening for me. We both moaned in tandem as I broke through and slowly slid inside her.\n\nShe guided her own way down, inch-by-inch. Cooing. Sometimes rising with a sharp gasp that made her breasts jiggle before continuing.\n\nIt felt like a decent into madness for me. But if this is what she needed, I would do it over and over again until she was comfortable. Gladly.",
        "Nikki let out a shaky breath, her body shuddering as our most intimate places fused for the first time. Her heat combined with mine. A string of whimpers met my ears as my cock nestled within her feminine folds.\n\nMy fingers slid back further. Flexing against the softness of her skin. Pulling her cheeks apart. Feeling the slickness of her arousal as the tips dipped downward.\n\nI had thought the hardest part was over. Silly me. The torture had just begun.\n\nShe adjusted her knees, which dropped her a little bit more, pressing my cock deeper into her. Whatever feeling the movement had caused within her, she must have liked it, because she cooed and wiggled her hips. Dug her fingernails into my chest.\n\nThen she began to rock. Slow and steady. As if she were keeping beat to a song only she could hear. Her eyes were closed, her lips pressed together. I imagined she was humming along to that song. And with each slight adjustment of her hips, her breasts moved like curtains touched by the lightest breeze.\n\nMy lungs struggled to draw in air. My cock throbbed inside her, as if starved for oxygen as well. I didn't care if I died right here and now. It would be the most wonderful way to go.\n\nThe longer she continued in her own little world, the harder it was to resist the urge to jerk my hips again. To thrust up into her. Flip her over and drive my cock into her until we were both thrashing on the bed.\n\nI tried to compensate by squeezing and releasing the soft skin cupped in my hands. Though that made her moan and rock even slower. Deeper. I groaned, silently willing her to give up control, yet enjoying the sweet torment her movements affected me. Did she even have a clue?\n\nA mistake on her part changed everything. I'm sure she was just trying to increase whatever feeling was building up inside her. But as she leaned forward\u2014her breasts lowering closer toward my mouth where I was licking my lips\u2014her hands slipped.\n\nNikki collapsed against me with a cry, her breasts smashed against my chest. My arms instantly wrapped around her back to steady her, but she had tilted too far to her left. I rolled over with her as she fell. Our combined sudden motion causing my cock to slide out a little. As we settled\u2014her under me now\u2014so did my hips.\n\nHer eyes popped open. \"Oh, my God!\"\n\nI flinched. Distracted for a moment by the fact that I was holding her\u2014naked\u2014fully against me. Her soft, delicate body pinned under my hard, toned one. It felt amazing!\n\n\"Ben!\" Her voice sounded strangled. Her right hand gripped the sheets as it lay on the bed.\n\n\"Your shoulder! I'm so sorry!\" I tried to roll off her, intent on getting us flipped over so she was on top again. But her arms moved faster. Both of them. Her fingers clutched at my shoulders, tugging me down on her. Which made my hips jerk a little.\n\nShe arched under me as she hissed. \"Yes!\"\n\n\"Oh!\" I drew back then repeated, earning another cry of delight.\n\n\"Please...\" She licked her lips, her mouth dropping open again as her eyelids fluttered. \"Please, don't stop.\"\n\nI didn't trust myself to respond verbally. Her words flipped the switch in my head that I'd been forcefully holding down for so long. It released an electric current straight to my nether regions. Keeping my weight on my forearms so not to put too much pressure on her injured shoulder, I settled between her legs and gave a short thrust.\n\nShe gasped. Brought her knees up, opening herself wider. Moaned as that let me slide into her at a deeper angle. Shuddered as our hips touched.\n\nI had thought I wouldn't be able to control myself. That once I was in charge, I'd automatically take her hard and fast. But I had been wrong. So, so wrong.\n\nMy pace remained unhurried, sometimes halting. Her sounds\u2014and the volume\u2014varied depending on how much I withdrew and reentered. They were intoxicating. Mesmerizing. As was the glow on her cheeks and forehead under the light sheen of sweat. The way she turned her face to the side sometimes, her eyes and mouth doing that silent dance again.\n\nI adjusted my weight to my left and cupped her breast with my right hand, stroking my thumb over her nipple. She cried out, arching against me. But I heard a coo when she settled and I did not release her. Felt another shudder when my fingers caressed the baby-soft skin underneath. Around the sides.\n\nHer throat lay exposed to me. Her jugular pulled taught against her skin. Each time she swallowed, it pulsed like a strummed guitar string.\n\nI couldn't resist and lowered my head. My tongue snaking out, eager to taste her flesh. But her head rolled back to face mine, bumping our noses together. I pulled back to see her staring up at me. My hand stilled mid-squeeze on her breast, her heart beating rapidly against my palm.\n\nAs I looked down into her chocolate pools, she parted her lips with a soft gasp. Any remaining hunger to ravage her suddenly abated. Her continual willingness to give herself to me without question captured me.\n\nShe trusted me. I was not about to make her regret that decision.\n\nNikki blinked several times, but it was erratic. Apparently indecisive if she wanted to keep her eyes open or closed. She tipped her chin, moaning when I accepted her invitation.\n\nI echoed her as I tasted her lips again. My other hand reached up to hold her head, my fingers threading in her hair. Her moans and sighs continued while I moved my mouth over hers. My tongue dipping in to play with hers once more as my cock glided in and out of her, her body contracting and releasing around it like a gloved hand.\n\nMy hips moved a little faster as our kiss intensified. Delicious shivers raced up my back when her fingers alternately kneaded and stroked my skin. As they moved up to tangle in my hair.\n\nI caressed her breast a little longer. Almost reluctantly, I slid my hand down the expanse of her side, finally tracing it with more than just my eyes. When I stroked her waist, she gasped. With our mouths still molded together, it felt as if she was sucking me in. I groaned and shifted my hips harder against her.\n\nHer fingernails dug into my skin. She let out a muted whimper. Lifted her hips while her left foot scuffed at the mattress, trying to find purchase.\n\nMy teeth caught her lower lip as I pulled back. I sucked for a moment, smiling at her feeble cries. At her attempt to get me deeper inside her. Then I released her, sliding my hand down her thigh\u2014squeezing the soft flesh over hard muscle. I brought her knee up, holding it to my hip.\n\n\"Do you want me to stop?\"\n\nShe rolled her head back and forth, pressing her eyes and lips tight. Until I stilled. Her eyes flew open at that, her jaw dropping as a choked cry escaped.\n\n\"Tell me what you want, Nikki.\"\n\nA whimper. A shudder. My body trembled as well.\n\nI pushed forward just a tiny bit and stopped again. Watching her neck extend as she pressed her head further back into the pillow. Feeling her hands grip the back of my arms. Her leg squeezing at my side, her foot flexing against me.\n\n\"Tell me what you need.\" I whispered the words through gritted teeth. Trying to hold back as the urge to completely claim her returned.\n\nHer eyes closed. She darted her tongue out, licking at her lips. Her throat undulating as she swallowed. Breasts throbbing with her rapid heartbeat against my chest.\n\nI leaned down and kissed the hollow dip at the center of her neck. Nuzzled around to her left shoulder. Against her hair. And made the mistake of inhaling too deeply.\n\nThe smell of jasmine filled my nose. My head. It made me dizzy. I squeezed my eyes shut.\n\nAnd without thinking, I started thrusting again. Faster. Harder.\n\nAt first, Nikki cried out, her hands straining against me. But her attempts to push me away weakened. Her sharp gasps morphed into moans. Long and loud. Matching my own as I panted.\n\nMy hips slowed down a little after I realized what I'd done. I didn't want to hurt her. Scare her. But damn her scent. I prayed it wouldn't drive a wedge between us.\n\nIt was only a few more minutes until I felt her walls clamping down around my aching cock. Heard her unintelligible cries. Then her fingers slipped from my back.\n\nHer body shook beneath me. I wanted to prolong her orgasm\u2014give her multiple ones\u2014although I felt my balls tighten. She felt amazing. She was amazing. I didn't want it to end.\n\nBut her whimpers\u2014her hands gripping at my arms again as she recovered\u2014told me I shouldn't push it. Not this time.\n\nI gave a few more strokes, willing to fall over my own edge.\n\n\"Oh...Ben,\" Nikki murmured sleepily. Sexily.\n\nThat did it. My hips thrust one last time, pressing hard against her as I found release.\n\n\"Nikki!\" Shaking hard, I smashed my mouth against hers, still moving slightly within her.\n\nThoroughly spent, I had enough sense not to collapse on top of her. I rolled off to the side, wheezing. Pressing the back of my hand against my forehead.\n\nHoly fuck!\n\nHer arm moved back and forth against the comforter. I caught it, lacing my fingers through hers. She sighed, her hand closing briefly then opening flat again.\n\nI was afraid to speak. To break the mood. But I had to know. \"Nikki, honey, are you okay?\"\n\n\"Mmm.\"\n\n\"I'm sorry if I\u2014\"\n\n\"Shh.\" I heard the sound of heavy breathing. A pause\u2014probably to swallow\u2014then she resumed with a deep sigh. \"Shut the fuck up, or you will never have this body again.\"\n\nI closed my eyes, smiling. And I thought this woman couldn't stand up for herself.\n\n~H "
    ],
    "authorname": "secretsxywriter",
    "tags": [
        "bdsm",
        "dominance",
        "submission"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/occupational-hazards-ch-03"
}
{
    "title": "Necromancer Chronicles Pt. 03",
    "pages": [
        "Chapter 8 - Anise\n\nWhen we got back to the house, Lisa almost had the BBQ ribs done and the smell of the food was divine.\n\nLeanne said, \"Damn, necromancers are supposed to be creepy. Even his voice was yummy, can we keep him?\"\n\nI looked over with an amused look on my face and raised an eyebrow.\n\nShe stuck her tongue out and said, \"Don't give me that look, don't think I didn't notice you staring at him with a stupid grin on your face, totally mesmerized as he talked. Do you even know what he said to you?\"\n\nI blushed scarlet not sure what to say, I had a small idea of course, something about how he dealt with his powers and his people. I kind of had gotten a little lost in his eyes and the tone of his voice, not that I'd admit it.\n\nI finally replied with a scoffing noise then said haughtily, \"Like I'd pay attention to an evil necromancer.\"\n\nLeanne snickered and Willa looked amused.\n\nLisa looked up from the BBQ and said, \"What'd I miss?\"\n\nLeanne threw me under the bus while her eyes sparkled, \"Our Anise here falling all over the hot necromancer.\"\n\nI really wanted to protest, after all she herself had said she wanted to keep him, but I knew I wouldn't win this one, it would just make the teasing worse. So I picked another direction.\n\n\"Don't worry Leanne, I'll share,\" I said before laughing.\n\nI shook my head, he was hot, but also very clearly taken. I could see he thought I was attractive when he looked at me, and talked to me. Even interested. But it was a pale shadow in his eyes compared to how he looked at Amy. I am not quite so bad as to come between my granddaughter and her mate.\n\nThen again, Leanne and I like to share, maybe it runs in the family... I sighed and tried to change tracks. My ploy worked and after a few more rounds of teasing, this time Leanne, we ate dinner together by the grove. I was still not sure I was doing the right thing by challenging James, but it seemed the only way to help my family, my new friends and lovers, and the necromancer. I wasn't exactly sure what category he would end up in yet.\n\nAfter we ate we just relaxed, I could feel the calm energy slowly swirling among the groves and witches. I did feel welcomed by it, but I couldn't effect it any. Willa had a far away troubled look on her face and I wondered what happened. She had left us for a few minutes to call Krista, the other coven's head witch, and find out what was going on.\n\nI moved and sat behind her, caressing her arms and neck. She leaned back into me and relaxed a little.\n\nI asked, \"What happened?\"\n\nShe tensed, but relaxed again after a few seconds, \"Krista was very smug. She didn't come right out and say it, but it seems she thinks to take my place soon. She foolishly betrayed her own and worked with Silas to gain power. I don't know what the plan is, maybe there isn't one, maybe Silas is just stringing her along, but I doubt it.\"\n\n\"I'm sorry sweetie, what's to be done about it?\"\n\nShe shook her head, \"Nothing for now. Silas is the real danger, once he is dealt with one way or another I can take care of Krista, hopefully she will run for it when her support is gone.\"\n\nShe added reluctantly, \"I did find out one more thing, she knew you are staying here, and that we have grown close in the short time you've been here.\"\n\nI asked gently, \"What is it?\"\n\nShe said, \"I'm so sorry, maybe you should have avoided me. Silas is determined now to make you move on, to cut any support I have. All the fake glowing references he was supposed to be supplying for your hospital job search... well, let's just say you'll never get any call backs in this town.\"\n\n\"Huh, I was wondering about that.\" It hurt, healing was something I loved. Ironically it was also something I would have given up soon anyway, I was determined to make a lifetime here. I can still do it, I'll just have to be very sneaky about it.\n\nBut it sure as hell wasn't Willa's fault. Something I have learned over the years though, is she would never believe it, even if I said it. So I took another tack hoping to cheer her up.\n\nI kissed the side of her neck and whispered, \"You'll have to make it up to me.\"\n\nShe said, \"How can I do that.\"\n\nI whispered in her ear, \"It's a game, I'm going to torture you right here in front of Lisa and Leanne, and you have to stay quiet and not give it away.\"\n\nShe said nervously, \"What are you going to do?\"\n\nI said sultrily in here ear while releasing my magic, \"This,\" and she locked up in my arms. \n\nI used air and spirit, guided it down her body from her neck. Everywhere it touched would cause sensuous sensations on her skin. I sucked her earlobe in my mouth and bit down as my magic reached her nipples. Her breath was fast, and shallow, and I could tell she was fighting down a gasp.\n\nMy magic continued down her torso, stimulating and pleasuring her nerve endings, when it reached over her abdomen then down between her legs she bit her lip and made a very light but intense whimpering sound that made me wet. She was completely mine in this moment, mine to pleasure, tease and yes, it really must have been torture to hold back her voice. Her body trembled against mine as I continued to innocently massage her shoulders with my hands, and pleasure her beyond reason with my magic.\n\nEven her subdued reactions would have been obvious if Lisa and Leanne hadn't been talking to each other nonstop during all this. I slid the magic inside her now, leaving a swirl of energy to circle and tease her clit. My mouth started watering and I wondered exactly who I was torturing as I felt her body wrack with pleasure as my magic took her to bliss for the first time. I kissed her neck again and looked up, she had tears in the corners of her eyes at the intensity of what I was doing to her.\n\nThis was so erotic for me too, with the spirit mixed in the air I could feel it all, like I had a million tiny little hands brushing against her silky smooth skin, manipulating her warm wet sex, her hardened nipples, her clit, all over her body really, all at the same time. \n\nI grinned against her neck as I let the energy split and teased her puckered star open, she gasped at the feeling of stimulation in both places. I think the jig was up, because the two girls looked at us when I sent her into a second overwhelming orgasm. I held her and continued caressing her neck and shoulders with my fingertips, and her inner thigh with my magic as I brought her down gently from her height.\n\nShe looked at me with tears in her eyes then whispered. \"I guess that means you forgive me?\"\n\nI kissed her in answer, it was such a silly question, it wasn't her fault.\n\nLeanne asked, eyes narrowed, \"What did you do to her?\"\n\nLisa added with a smile, \"And can you do it to us too?\"\n\nI laughed faux wickedly and sent my magic at both of them while Willa pushed me onto my back, looking determined to torture me right back, I heard both of them gasp loudly as Willa started to have her way with my quite ready and willing body...\n\nA few hours later I was lying in bed amidst three other warm bodies. I was sore, in a good way, and I felt like a total two faced bitch. I was growing to really care about these ladies, and they did not know the truth about me. Even worse, I had not even told Amy the half truth I had told Leanne, about us being related.\n\nIt was so much easier keeping my secret from casual friends, but family and lovers were different and the guilt dug in. I felt like telling them the whole truth would be a mistake, but I wondered how much of that was cowardice. \n\nFear that Willa, Lisa and Leanne would reject me.\n\nFear that Amy would hate me, the grandmother that didn't even know she was brutally enslaved for almost two hundred years.\n\nI felt sick, my stomach was roiling more and more as I thought about it, and I could feel the silent tears running down my cheeks, I knew I had to tell them. Besides knowing I would get caught in my half truths, especially when Amy and Vince showed up tomorrow, I felt guilty about the angel thing. It was bound to come out that Amy and I were related, Leanne had no reason not to say anything, had no idea I had kept it to myself in fear Amy would recognize me.\n\nI had to tell them, and now would be best. Tomorrow would be dangerous enough with our enemies running around, if it came out then, from someone else, there would be a blow up.\n\nI tried to say it strongly, but it came out like a squeak, \"There is something I need to tell you all, something I've been... hiding about myself. People... don't always react well, so I've grown accustomed to keeping it to myself, but I care about you all too much to continue hiding it. And after I tell you I need to go tell Amy.\"\n\nLisa faux gasped, \"You used to be a man?!\"\n\nI snorted with laughter. Here I was coming clean, and she was trying to make me feel better.\n\n\"No, I'm older than I look, much, much older.\"\n\nLeanne kissed my cheek and said, \"Stop procrastinating, it can't be that bad.\"\n\n\"I'm Nephilim. I am ancient, immortal. Leanne, I let you come to the conclusion and believe that I had come from a branch family, the truth is I am your great times ten grandmother, Amy is my granddaughter.\"\n\nWilla whispered, \"How old?\"\n\nI sighed, \"Before Christ, before Rome, before the great flood. So old I keep track by millennia, not century.\"\n\nI finally looked away from the ceiling, they were all staring at me as if unsure they should believe me, or think that I was pulling their chain. I got out of bed, stood and revealed my power. White glowing wings, my powerful ancient aura filled the room and I saw fear on their faces. I expected it, but their fear still felt like a betrayal. They knew me, I was their friend, I loved them already.\n\nI whispered, my voice broken, \"I'm sorry,\" before I called on my power and transported to my apartment.\n\nI couldn't blame them, I still had hope they would accept me, be okay with it. My aura for the most part scared the crap out of everyone when I let it all out. I took a quick shower and dressed quickly in a pair of jeans and a doctor who t-shirt and let my power bear me away. I appeared in front of Vince's door and knocked.\n\nWhen Hardin answered the door I asked for Amy, she came out a few moments later, a look of confusion on her face.\n\nHere we go again.\n\n\"I have something to tell you, something I should have said sooner, but I was too afraid, and too ashamed.\"\n\nShe asked, \"Ashamed?\"\n\nI nodded and looked down, \"I should have been there for you, should have saved you, and I am sorry. I was off living another life, I had no idea what happened to you and your mother all those years ago.\"\n\nShe asked, \"Who are you, I thought you seemed familiar but...\"\n\nI glowed briefly, undoing the minute changes that were enough to fool the human mind, I also changed my appearance to reflect an aged body. Whenever I live out a full life I usually age with my family, it prevents some issues. Some would think a man would love to have a young wife with a perfect body even as they age, the truth is it simply doesn't work that way.\n\nBut twenty five is my body's natural state, so I always revert when a husband passes and it is time for me to move on.\n\nI looked up tears in my eyes and begged, \"Please little one, forgive me.\"\n\nI could see her emotions in her eyes, disbelief, anger, regret, longing, contempt. I wondered which one it would settle on.\n\nShe shook her head in denial, \"Grams... how?\"\n\nI said patiently, \"You know how, I am Nephilim. Even worse than not knowing and saving you, I was a likely cause. My children and children's children never show angelic power, but they are uncommonly strong in other gifts for the first two or three generations. Your mother was a very powerful sorceress, and you were an uncommonly powerful witch. It may have brought the trouble to your door. It might be why they made you a vampire.\"\n\nShe whispered accusingly, \"Where were you?\"\n\nI sighed, \"Where I always go when I lose a husband to time. I grieved. I travelled as a healer for sixty years until my heart recovered and I remarried. It's what I do, it's how I live. I'm sorry, I didn't know what happened until a few days ago when I found the information in Leanne's genealogy book.\"\n\nShe frowned and her voice sounded dazed, lifeless, \"I need to think. I know it's not your fault, but I really want to hurt you for not being there. Leave, I will see you tomorrow night.\"\n\nI wrapped myself in my power, restoring my age and disguise, and then teleported to my apartment. I doubt the secret would keep now that so many knew, but I hoped it would. If they could accept me maybe the rest of the community didn't need to know. \n\nIt was so quiet. No one else breathing, no life but my own, I felt alone, alienated. I snorted, I had lived my last century alone, and after a few nights with the witches it felt so much different.\n\nI stripped and crawled into bed, rolling up into a ball I beckoned sleep with a wisp of spirit, I didn't want to be conscious anymore, full of regret. I was such a fool. Was telling really the right thing, or was I selfish to share my burden? All I did tonight was hurt them all with my truth, I just had to hope it would lead somewhere better.\n\nI sighed in relief as the sleep spell took hold.\n\nI woke up to giggling. That was confusing and it was taking my brain a moment to catch up. I gasped as I felt warm wet heat on both my labia and puckered star. I was on my back, but my waist was partially twisted and someone was holding my leg up.\n\nMore giggles. Then I felt a tongue digging into my backside while someone else held my labia apart and sucked in my clit.\n\nI opened my eyes and wanted to cry as they drew a pleasurable gasp from my lips. My body was so confused at the conflicting information.\n\nI looked around, Willa and Leanne were between my legs doing amazing things to me, Lisa was smiling down at me, then she kissed me fiercely.\n\nShe whispered, \"I'm sorry we freaked out, that's not something you see every day. Know what else is something you don't see every day?\"\n\nI giggled at my relief then arched my back and gasped, someone had curled their fingers inside me and hit my g-spot just right.\n\nI managed to gasp out, \"What's that?\"\n\nShe winked and looked me up and down, \"Getting off on an Angel's face.\"\n\nShe started giggling as I laughed. She cut off my laugh by straddling my head and grinding her core on my lips. I gasped when she grabbed my nipples and twisted, pulling on them hard.\n\nI fought for the ability to act through the pleasure I was receiving down below and slid my tongue between her labia and flicked her clit before licking all the down her slit, over her taint to briefly tease her puckered star.\n\nLisa said breathily, \"Oh god, an angel just licked my ass. And I really liked it.\"\n\nAll four of us broke down laughing, it took a minute for us to get back to it. I would have time for my cathartic cry later, right now I was too busy being with and enjoying the women I loved. My bed wasn't as big as Willa's, just a queen, but we managed just fine...\n\nAfter a shower and breakfast we went to the council chamber. I was so happy, yet still guarded. That they had accepted me was more than I could hope, yet, I still hoped for more. I had butterflies in my stomach wondering about Amy. I knew I had to focus though, I was old and powerful, that didn't mean I could be sloppy during a challenge. \n\nJames was old enough to be plenty powerful, and I had no idea what his skills were, but Chicago was a pretty big city, he had to be a pretty damn good sorcerer at the very least. Not to mention I couldn't use my angelic powers during a challenge, this would be purely sorcerer verse sorceress.\n\nI used mediation techniques to focus my mind, I had been around a long time. Sorcery requires focus of mind. It doesn't depend on words, or semantic gestures like a witch. So over time I had sought out ways and philosophies to improve my mind and sorcery. Stronger mind, stronger sorcery. Walking around in an emotionless state wasn't one of my favorite things, but it had its uses. No distractions.\n\nWhen we walked in there weren't all that many people there, I guess that means word didn't spread on what we planned. That was a good thing, no spies in our camp. I took a seat near the front and waited for the council meeting to start. I sat through a couple of issues that Silas went through, and immediately stood up when he asked if there was any other business.\n\nSilas recognized me warily, he was right to be wary.\n\nI said in a clear voice, \"I challenge James for the right to represent sorcerers on the council.\"\n\nJames looked pissed, Silas just narrowed his eyes.\n\nJames said arrogantly, \"Aren't you a bit young? I won't go easy on you if you persist in this foolishness. Do you even know any other sorcerers in this city?\"\n\nI suppressed an eye roll and just stared at him waiting. His replies were beside the point, I challenged him, he either needed to answer or step down. I could see Silas wanted to say something, but challenges were an internal race matter, they were only made at council so there would be witnesses that it was all above board.\n\nSilas may interfere in the other groups, but he has done so on the sly through backroom politics, he dare not try and stop this. Finally James stood and walked out on the floor. He showed his sigil, his power. He had all the elements, but earth and spirit were rather weak. Still, it was impressive.\n\nHe smirked, at least, until he saw my sigil glowing brightly in all five elements. He didn't look panicked though, in a fight between sorcerers, power counted, but more often than not experience and cunning mattered more, and he thought he was facing a young woman.\n\nI asked, \"Do you yield your place?\"\n\nIt was traditional for the more powerful one to ask that question.\n\nHe shook his head no, and attacked. This was not a blood challenge, not to the death. The system was designed to make sure the most able was in charge, not to weed out the stupid or weak. The floor buckled under me and I supported my feet on a column of air before summoning a ball of water around his head. He tried to dispel it, remembered I was stronger and managed to create a reed out of stone to breathe while collapsing the ceiling around me, trying to enclose me.\n\nI enlarged my ball of water and he once again held his breath as I reached out and took hold of the stone in the building, locking it all in place. It was quite an effort, but he could no longer breathe or make his breathing straw bigger. I held it together, deflecting his fire attack with the very walls he tried to enclose me with. Over the next two minutes his efforts grew weaker.\n\nIf he passed out, he lost, so he conceded at that point. I put the broken parts of the building back together and allowed him to banish the water. He looked at me with a question in his eyes.\n\nI simply said, \"Because you forgot why you were there in the first place, and got two of our people killed yesterday.\"\n\nHe nodded, collected what remained of his dignity and walked out. I didn't think he was an evil man like Silas, I believe he let his desire for personal power to make him greedy enough to get under Silas's thumb and didn't know how to dig himself back out.\n\nI released the hold I had on my emotions, but still kept them contained inside myself. With a stony face I took my place as a councilor. It felt very strange, I had lived thousands of years and never found a reason to take this step before. I hoped I was right, but all I could do is follow my heart and hope I was making the right decisions.\n\nOnly time would tell...\n\n\u2003\n\nChapter 9 - Vincent\n\nSix hours ago...\n\nI held Amy in my arms, she seemed closed off, distant. I asked her a couple of times what happened with Anise, but she wouldn't tell me, said she needed to think through some things. I was curious, and I wanted to fix it, but I knew I couldn't, so I gave her what she wanted, time.",
        "I ran my fingers up and down the soft skin of her arm and held her, hoping that was enough, and the right thing to do. She turned and smiled at me, no doubt feeling everything I felt, as I did her, through our bonded souls. I should have been uncomfortable by that, but I wasn't, if anything it was a gift.\n\nI wondered if I was turning into a sap and Amy started laughing.\n\n\"Don't worry sweetie, your still an asshole,\" she smiled impishly.\n\nI laughed, \"Thanks, I was worried there for a second.\"\n\nIt had been about four hours since Anise had stopped by and it seemed she might be ready to tell me what happened, of course, she asked me a question instead.\n\n\"What do you think of Anise?\"\n\nI thought about her and squirmed uncomfortably, Amy frowned.\n\n\"Look at me love,\" she whispered.\n\nI looked into her eyes and saw absolute conviction and certainty, \"We are soul bonded, I have no doubt we will be together for a long time. I have my suspicions it will be longer than either of us thinks it will be. I will never doubt your love for me, that I come first in your life. Our souls are joined and I will never doubt it.\n\n\"I will also never doubt that you need to feed, and that you will have affections for, and maybe even love some of them. So tell me love, what do you think of her?\"\n\nI sighed, \"I'm attracted to her, not just her beauty, but her power calls to me, her purity of purpose is inspiring. I like her and I hardly even know her. It wouldn't be hard to... you know... what you just said.\"\n\nI know what she said, and I know she meant it, but still, it felt really weird to tell her how much I admired, was attracted to, and could fall in love with, someone else.\n\nShe yelled, \"You asshole, aren't I enough!?\"\n\nWhen I jumped in confusion she started giggling, \"Got ya!\"\n\nWhen my heart slowed down I glared at her.\n\n\"Why do you ask anyway?\"\n\nShe took a deep breath and blew it out before answering in a wistful voice.\n\n\"She's my grandmother.\"\n\nMy mouth opened, then closed.\n\nShe said, \"Think about it, she is part angel, immortal. She took so long to tell me because she was scared I'd lose it on her for not saving me, I almost did.\"\n\nI just kept my mouth shut, letting her go at her pace, eventually she talked more about it.\n\n\"She was a sorcerer of course, and so was my mother. I was born a witch. My mother didn't know anything about witchcraft. At the time I had no idea what grandma was, but I knew she was the smartest and wisest person in the world, and I knew she loved me. So sense or not, how could she not know they killed mom, how could she not know I was... enslaved.\n\n\"You know, she taught me a lot of the witchcraft I know. By the time I was old enough to join a coven, I had as much to teach them as they did to teach me. I can't even imagine how much she knows. Not even a witch, but taught me to be one, a good one.\" \n\nI brushed the tears from her cheeks and kissed her hair. We laid there for a while, before she continued. I had no idea why she had asked me what I thought about Anise, or why it would even matter, but even a man like me was smart enough to hold that question for now, perhaps even a couple of days.\n\nShe sighed. \"I saw you know, how much pain she was in when grandpa died. I was mad at her when she left, never mind that I was already in my twenties and grown. But perspective is everything. How does she do it? How many husbands did she bury, how many more will she? Her strength of will must be staggering. I'll let her know I forgive her later, at the coven house.\"\n\nShe looked at me suspiciously and said, \"You need to go get laid.\"\n\nI pulled her in for a kiss and she pushed me away laughing, \"No you dumbass, souls remember, I can feel your hunger, your also tired. Go find some slutty human, or track down that werewolf bitch, bet her soul is healed by now.\"\n\nI looked at her in amazement, she really loved me, despite what I was, and seemed determined to take care of me, accept every part of me. I kissed her deeply despite her protestations, then got up.\n\n\"I wouldn't even know where to look.\"\n\nShe rolled her eyes at me as if I were stupid and closed her eyes, May appeared before us. I couldn't believe it, she wanted me to use the girl's mother so I could track her down for an early am booty call? That was wrong, wasn't it?\n\nMay said, \"I don't mind. I love my daughter and I know she enjoyed you. She is old enough to take care of herself. So either way I win.\"\n\nI asked in confusion, \"Either way?\" I think I was being overwhelmed by estrogen, too many surprises. \n\nMay shrugged, \"Yeah, either I see her happy with a man worthy of a fling, or I see her knock you on your ass, which will be at least a little entertaining. Don't worry so much, wolves are a randy lot until they meet their mate. They are also unable to conceive until they meet their mate. I see no problem with her playing with you until that happens. Really, stop worrying, it's also nice to know you will have her back if she needs help, as a friend. I'm sorry I was so standoffish and afraid of you early on, you're a good man,\" she looked me up and down slowly, \"I'm also sorry I didn't meet you when I was still alive.\"\n\nI opened my mouth, then closed it giving up. The women seemed to be in charge, and as they seemed determined to get me laid by a beautiful woman who was wild in bed, it would be stupid to object.\n\nI followed May's directions back out into the lowly settled area and forest. Something felt different and I felt off, mostly because I couldn't figure out what it was. That was kind of annoying and I felt a surge of anger which set off the light bulb so to speak. Being with Amy, gaining, or at least starting friendships with others, had dissipated the anger that usually sat in my mind all the time.\n\nOh I wasn't all sunshine and daisies, things could still piss me off, like Silas, thinking of my parents etc... But the simmering anger that was always present, wasn't there anymore. It was strange really, I felt lighter. May directed me to a dirt road, and after a while off to the side of the road and I parked as far over as I could get next to the trees.\n\nI said, \"I don't see anything.\"\n\nShe smiled and pointed, \"You'll see when you get in the forest.\"\n\nThere was something almost disturbing about her smile, but I shrugged and got out. I walked about twenty feet in when I heard a low growl and an alarmingly large dark shape jumped at me. There were yellow eyes, and silver fur, and flashing claw. I jumped backwards and fell, rolling into a handspring after the wolf passed over.\n\nThat's when I remembered wolves fight challenges to determine if the man is worthy enough to open their legs for. I swear I heard May laughing her ass off back in the car. I surrounded myself with shields of my necromancer power just to shield me physically, the last thing I wanted to do was decay Kim's body. I didn't want to use my demon magic, if I told anyone else it would be my small circle of friends, of course, limiting myself this much would make the fight a lot harder.\n\nShe growled and pounced again, this time I was ready and dodged to the side and kicked out. I couldn't use my shadows, but I still had a fairly impressive strength, and she went flying about ten feet and hit a tree. I went over to subdue her, but she hit me with a claw and it was my turn to go flying. I landed just right and rolled to dissipate the energy before planting my feet and popping up by momentum alone.\n\nUnfortunately she seemed to guess exactly where I would stop, and I was bowled over onto my ass, with a huge wolf snarling in my face. I grabbed her jaw and tried to push her over and put her in a headlock. It didn't work, I went flying again. This went on for quite a while until quite by accident I got a hold of her tail and a back leg. I started dragging her backwards desperately, bringing her up short, barely, every time she twisted her body to bite.\n\nI snarled, \"Change back, submit, or I'll break your fucking leg!\"\n\nThe wolf froze and continued to stare at me for a moment, then her body started to break and reform. Who knew, the way to a werewolf woman's heart was to threaten bodily harm.\n\nShe stood up and glared at me, \"Who the fuck do you...\"\n\nI cut her off by stepping forward, grabbing her by her long beautiful hair and pulling her into a rough kiss. She resisted at first, trying to talk and making offended noises against my lips. But eventually she stopped fighting, then she stepped forward and melded her body against mine deepening the kiss.\n\nI had a moment of paranoia that she was faking it just to get a shot at my balls, but no, the kissing just got hotter until she pushed me away and said firmly, \"Get out of those clothes already.\"\n\nI stripped in record time and she tried to tackle me like last time, but I was ready for this too and twisted our bodies. I cradled her in my arm and caught us with the other so she wouldn't hit the ground hard then kissed her roughly, moving myself between her legs. Some people would believe it was too soon and more foreplay was in order. But trust me, that fight was the foreplay.\n\nShe gasped, arching her back and pushing up against me as I pushed into her. Her slick passage tightened around me and massaged my length in a way no non-werewolf could manage.\n\n\"Oh god, I'd almost forgotten you could do that.\"\n\nI did a half kneel and reached back for her legs, pulling them up and putting them on my shoulders. I started to drive in and out of her, so hard and deep. I couldn't figure out where to focus my eyes. On the mesmerizing yellow eyes that were so captivating and twinkled with lust and pleasure, or her silky smooth breasts with those perfect pink nipples and swollen areolas, swaying enticingly with each pump of my hips.\n\nShe gasped and her silken core felt like a squeezing fist on my manhood as her juice flooded me. She reached up with her hands and dug her nails into my chest, her mouth open in a silent scream of pleasure. When the peak of her bliss passed she gasped in pleasure and I sped up again.\n\nShe bent her knees, bringing her legs off my shoulder. I didn't figure out what she was doing until it was too late, she kicked me with both feet right in the chest and I went flying backwards and landed on my ass ten feet away.\n\nShe pounced and impaled herself on my cock, pushing me down all the way on my back. Then the crazy bitch winked at me before she started grinding forward and back, her back arched, breasts sticking out straight, her long silken hair flowing around her body in the light breeze. It was so erotic and sexy.\n\nShe must have sensed I was going to thrust up because she said in a blissful but breathless voice, \"Don't move, not yet.\"\n\nShe worked my manhood where she wanted it slowly and sensuously. I felt like I had to do something besides just lie there, but I kept my body still and reached out to fondle her breasts. I teased her nipples with my thumb and forefinger while kneading the firm but giving flesh with my other fingers. She moaned in pleasure and her eyes seemed to roll back in her head as she reached bliss. I felt her soul feed me, but it was a small thing, minor.\n\nShe was so sexy, beautiful, and dangerous. I also instinctively knew I needed to take back control. I had let her have it for a while because she was beautiful. A decadent joining, I really liked watching her bring herself to orgasm using me as a simple pole. But if I wanted her again, it was important, especially for her wolf, that I dominate her. Otherwise I had a feeling this would be the last time.\n\nShe hadn't submitted to me and I was coming to realize the fight wasn't quite over yet. She just shifted it to pleasure, to see if she could dominate me in that way.\n\nI grabbed her by the hair and pulled her down to me for a kiss while bending my knees. I reached down with my other hand, grabbing her ass to keep her still and in place, then I started to thrust up into her quickly from below. She could barely breathe and I could feel her breasts bouncing across my chest, her nipples leaving strings of fire across my skin as I took her hard and fast.\n\nI could feel her tightening around me again and she started to whimper in pleasure, she wasn't even trying to move anymore, her body was completely supported by me and in my control as I went even harder and faster. I felt my balls tighten, it was a miracle I had lasted this long and probably only because I'd been having a lot of sex the last twenty four hours with Amy.\n\nI was about to blow and desperate to make her cum first, so I took a chance and barked an order while looking directly into her eyes in challenge.\n\n\"Cum now!\"\n\nI felt her sheath tighten around me and flood my pole, that was it for me. Her eyes widened when my shaft expanded in her core, my seed spilling into her as I fed on the rush of energy from her soul...\n\nWhen we came down she kissed me deeply before saying, \"God, you'll do.\"\n\nShe nipped my neck and kissed me again before she rolled off and turned into her wolf. The wolf licked my face and chuffed at me before taking off into the woods. I wondered why she hadn't passed out and sent my power out looking. I found her thirty yards away, asleep by a tree. Maybe falling asleep by me would be a weakness? And she only did it that first time because of the attack?\n\nI wasn't going to worry about it, I grabbed my clothes and walked back to the car, using a towel in the trunk to at least wipe off before getting dressed. I headed home full of energy. I wondered if I would ever sleep again, with Amy keeping an eye on me I sincerely doubted I'd ever starve myself again. Strangely enough, I didn't really feel that guilty about it.\n\nWhen I got home Amy was waiting for me and dragged me into the shower. We started washing each other and she kissed me hard. I gave her a questioning look, but didn't really want to argue, I was just confused why she was so horny.\n\nAmy smiled and said, \"That was so damn hot,\" and then she blushed.\n\nIt took me a minute to figure out what she meant, \"You watched?\"\n\nShe nodded as she dropped to her knees with a mischievous look on her face, \"I watched through May.\"\n\nAt first I felt a little violated, but that was quickly replaced as I realized the idea of her watching me turned me on quite a bit. Okay, a lot actually. We stopped speaking for quite a while after that...\n\nWe had a quick lunch and Hardin went over some stuff with me that I'd been putting off before we got ready for the council meeting. According to what Leanne told Amy on the phone, everything had gone according to plan this morning. I felt a little conflicted, but if I didn't do this to protect my family and friends, what kind of man would I be?\n\nWhen we arrived the room was stuffed with people, I had a hard time pushing my way through to get to the seating where petitioners went up in the front. Although when people looked back to see who was trying to get by they usually turned white and jumped to get out of my way. I had forgotten the list of people that actually trust me is still very short. That made me realize something, the plan as we discussed wouldn't work, or at least, not the whole thing.\n\nI would still join the council today.\n\nI sat down and waited, it didn't take long, there wasn't much business today despite the large crowd here no doubt because of a new sitting sorcerer. Well they were in for another shock.\n\nI stood and waited. At first Silas ignored me, but when it was clear no one else would speak up until I had gone he reluctantly called on me.\n\nI said in an even voice, \"I would like this council to recognize a seat for the necromancers, so I can join this community, as well as the others I would bring under my umbrella, including ghosts, zombies, Liches and revenants.\"\n\nSilas looked like he could spit nails, for some reason that calmed me down and made me feel better about all of it. The audience however was thunderous with comments and exclamatory declarations such as, holy shit, etc...\n\nWilla called out before Silas could say anything, \"I'll support that.\"\n\nBy seconding it, she had guaranteed a vote, Silas couldn't shut me out without one.\n\nSilas banged on the gavel a few times, trying to restore order. Eventually they settled down and were silent.\n\nSilas said, \"Very well, we will vote.\"\n\nSilas voted no of course, but Willa, Anise and Brandt all voted yes. I had no idea why the alpha liked me, but I wasn't going to complain.\n\nSilas closed out the session at that point, stating the clerk, Tim, would build a new place for the expanded council, and we would be in session at nine AM tomorrow. It seemed way too easy to me, and I wondered what Silas would do now...\n\nThe people started clearing the room and Silas glared at me briefly before leaving out the back door. Once the place was mostly clear, we all left together. I was a little leery at first, but transport by oak isn't so bad...\n\n\u2003\n\nChapter 10 - Anise\n\nWe were sitting outside the grove and we had a drink cart with a bar. We were celebrating the success of the day's plans. It was Willa, Lisa, Leanne, Amy, Vince, and myself. We weren't sure what we would do next, not until Silas responded, although none of us really believed he would back off and behave.\n\nVince said, \"Look, if it comes down to challenging Silas, it has to be you Anise.\"\n\nI didn't like the sound of that, \"But you agreed.\"\n\nHe nodded, \"If forced I will do it, but I realized it would be a huge mistake this afternoon in the council chamber. Everyone here knows I am not a typical necromancer, you accept me and that is a more priceless gift than you'll ever know. But I am telling you, the community will already be paranoid about me having a voice on the council, they don't know me. It will take years to gain the confidence of the community. If I turn around and take head of the council it will turn into a panic, some will flee the state, others will decide to fight the evil necromancer.\n\n\"I'm sorry, I know you don't want it either. Maybe we should just off the guy and nominate Willa.\"\n\nWilla spit her drink, some of it came out her nose. I caressed her sympathetically.\n\n\"Me?\" she sputtered.\n\nVince looked amused, \"Of course, you're the best leader here, if you had enough power we'd all make you challenge him.\"\n\nWilla looked far from convinced but didn't argue the point.\n\nAmy said, \"I'm not sure what else we can plan for, we are going in circles and there is no point talking more until Silas makes his next move. So why don't we give this up and drink a lot more and try and relax. We did kick ass today and get it done.\"\n\nI grinned, \"Now that's true wisdom,\" and stood up to refill my drink.\n\nAmy said, \"Grams, need to talk to you,\" as she stood too.\n\nMy throat closed on me and I nodded. We walked about twenty feet away and I raised an air shield, just in case she wanted to yell at me some.\n\nAmy said wistfully, \"Oh Grams, I love you so much. Of course I forgive you, it wasn't really your fault you know.\"\n\nWhen her arms went around me I started crying.\n\nShe said softly, \"You know Grams; it's not nice to drool after your granddaughter's man...\"\n\nI flushed in shame and pulled back, and saw the teasing look on her face. I froze for a second not sure what to do.\n\nFinally I said, \"I'll leave him be of course, but I can't help looking.\"\n\nAmy shook her head, \"What if I told you I didn't want that, what if I told you to go for it. Have some fun seducing him.\"\n\nI gaped at her not really believing what I heard, \"You can't be serious.\"\n\nShe said, \"I am, although I probably wouldn't have thought of it if he wasn't already half in love with you. I can tell he draws you to him as well.\"\n\nI shook my head angry now on her behalf, as absurd as that sounds, \"But... no! Why?\"\n\nShe took my hand, \"For love of course. I know it sounds shocking and kind of weird. But I've been thinking about this nonstop since your visit last night. I need you to keep an open mind for a minute. I have a soul bond with Vince, I will be with him... until we are killed. He is half demon, as you are half angel. Do you understand, he has stopped aging, and I don't know if he has realized it or not.",
        "\"I can be everything to him... But I am a lich, I can't give him a child.\"\n\nMy mouth dropped open, she wanted me to have a kid with her Vince?\n\n\"I saw you Grams, I saw you torn apart when gramps died. You grieved for how long? Sixty years? I cannot fathom how you have lived through that over and over in your life.\"\n\nHer expression grew fierce as she said, \"Do you think for one second I will allow that pain to ever touch him. He is the same, do you understand now? I can be with him forever, you can be with him forever, giving him another love, and something I can never give him, children.\"\n\nShe let me absorb that for a second and for some reason it was starting to make sense. She had thought it through, and I am sure I was still missing a lot she had already thought of.\n\nAfter a moment she continued her argument.\n\n\"You would never bury another husband, he would never feel the pain of burying a wife. I would get to raise kids with you both, a bunch of little Aunts and Uncles. I could never have a child with him, but at least through you they would still be my blood, my family. I love you both. I can't think of two people I love more, or would want to spend an eternity with.\"\n\nI opened my mouth and closed it. We both had tears in our eyes. She was offering me a gift beyond my ability to measure, the breaking of my life cycle. No more cycles of pain. Oh, life would bring pain no doubt, but it wouldn't be the debilitating grief of losing a spouse over and over. Three people that could weather the ages together.\n\n\"There is one more thing as well Grams, half angels and demons are immortal, do you suppose your kids might be too? One quarter from each of you, they would still be half, wouldn't they? I know you need to process all this, plus I know you love those three crazy witches out there. Still, I don't think they would mind sharing. Remember we will have to share Vince too, he has that unique diet and all. By the way Lisa and Leanne stare I bet they wouldn't mind being tasty weekly snacks.\"\n\nI shook my head, she was going a little too fast for me.\n\nShe giggled, \"Sorry Grams, too much? When Vince feeds off a supernatural it lasts much longer, so he would have to sleep with a lot less people than if he did humans. Also why not keep it in the family. Is it wrong to want to turn my new coven into snacks?\"\n\nI couldn't help the giggle that escaped my mouth.\n\nI said slowly, \"It sounds like a good plan on the surface of it, as far as I understood it. My mind is still a little stuck back at the idea that my granddaughter forgives me and doesn't hate me. Let me think about it, and discuss it with the others. You realize if we do that, we need to risk telling them Vince is a demon. Volunteer snacks only.\"\n\nI shook my head, now she had me calling them snacks.\n\nI hugged her close, \"One thing I am sure of, my granddaughter turned into an amazingly wise and beautiful woman. Vince is lucky to have you, and so is your ancient Grams.\"\n\nShe kissed my cheek and said fondly, \"If I am, I learned it from you. If you decide to go for it, don't bother telling me, just seduce him, it will be fun to see what he does.\"\n\nWe both laughed at that, poor Vince. Or very lucky, depending on how you look at it.\n\nWe drank quite a bit over the afternoon, and about half the coven showed up around dinner. They seemed a little standoffish at first with Vince, but it didn't take long to win them over when they saw their coven leader so relaxed and trusting of him.\n\nI thought about talking over with the ladies about the possibilities with Vince, but the story would ring false, and not make a whole lot of sense, they wouldn't understand while not knowing he was a half demon immortal. So I kept my peace, apparently I couldn't just seduce him, I'd have to convince him to tell the three ladies first, then seduce him.\n\nI'd work something out, or see if my very determined granddaughter had an idea. Really though, the best idea was to just have him come out and tell the truth, even apart from the seduction, it would be the right thing to do. They were supportive of him and deserved the chance to prove it.\n\nThe evening went well though, and after everyone went home we retired for the night, although it was much later before they slept...\n\nThe next morning came too soon. I was dreading the council meeting. It just wasn't me, of course, but neither was letting people like Silas lord over and spend the lives of the people he should be protecting.\n\nI could smell the bacon as I made my way down the stairs. I thought I could get used this and wondered how often I would be using that little apartment I rented. That thought brought me up a bit short. It had only been four or five days since I moved here? I had moved in with three lovely witches after one day, fallen in love with them over the last three, and now my granddaughter was making plans for us, an eternity with a man I may have been attracted to, but had hardly spent any time with.\n\nIt was all too fast. I was wondering how much of this was just me ready to move on and wanting to love again. Were the witches truly enamored of me, of who I was, or was it the angelic aura they could not see but most certainly sensed? I thought maybe I should spend a night at home tonight, but I really didn't want to. If it wasn't for all the other crap like Silas I'd have thought I was dreaming. I had the urge to run just to get some space, but I was too old for that nonsense, I just needed to be careful.\n\nMy heart was telling me I was home, but my mind was urging caution, at the least.\n\nAs I walked into the kitchen Willa said, \"Morning,\" with a smile on her face.\n\nUgh, a morning person.\n\nI grabbed a cup of coffee and took a sip, \"Need help making breakfast?\"\n\nShe shook her head, \"It's all done except for these eggs.\"\n\nWe ate breakfast and took the oak into the city. Lisa and Leanne decided to join us. We weren't sure what was going to happen, at least we knew two people would be there to support us.\n\nIt didn't take long to figure out Silas's next move. Fear and prejudice. It seemed obvious in hindsight. When we arrived, there were a large number of vampires present. Krista was here with her coven and they all looked angry. James was also here, with a small number of sorcerers. \n\nThat was a disadvantage, I was supposed to be representing them, but I had no idea of even their names, much less their lives. James smirked in my direction as we walked through the extremely hostile atmosphere. There was anger there, someone had stirred them up, most likely Silas set it in motion, a community outcry against having a necromancer on the council, despite the legalities. Heaven only knew what they were saying against me.\n\nSo much for old and wise, I was an idiot not to see this coming. I had been thinking of Vince as Vince, not a necromancer. Necromancers were feared by the supernatural community, and for good reason. Human souls being bound provided power conduits for the necromancer, but most of them went after supernaturals. A witch's power, or a sorcerer's, came from their soul. If a necromancer bound one after death, they had a ghost who could perform magic independently once bound to flesh.\n\nI was pretty sure Vince didn't even know that, but that wouldn't matter. All these people feared it. That's why they were kept out of most communities. If a necromancer didn't know the people, it made it much harder if not impossible to track down the ghost of someone you didn't know. The facts all pointed to Silas being the one throwing lives away, and enslaving them in their life, but I doubted that would matter.\n\nI hoped this wouldn't be an insurmountable road block, but with Silas stirring them up it would make it much harder. Willa and I eventually made it to our seats. We exchanged looks and I could see she was on the same page, she knew exactly what we were up against. Silas looked... very comfortable.\n\nUntil all the werewolves started coming in that is. I thought I saw him twitch.\n\nI glanced over at Brandt, and he was stone faced, I got nothing from him at all. Just one more complication for us to worry about.\n\nAll the supplicants seemed nervous as the morning passed, as if they'd rather be somewhere else. No challenges were brought up and the crowd merely stood there in a swirl of negative emotions. It seemed an intimidation tactic, a way to try and force Vince, and maybe myself, to move on completely. Silas seemed very risk averse in the public view. I worried what would happen outside the official venue though, visions of torches and pitchforks filled my mind and I had to suppress a laugh.\n\nOne thing was clear to me though looking out, Vince was right, if he challenged Silas and took the high seat it would tear the community apart. Did I really want that responsibility? Wrong question, did I need to take on that responsibility? I didn't want to, but clearly Silas had not backed down, quite the opposite actually. Did I have a choice? What was the point in waiting?\n\nI saw no reason to wait, but figured it was better to discuss it during lunch and make my move after. Of course, that's when I was surprised again. When Silas asked if there was any other business before lunch he looked over at Vince pointedly. Almost as if he expected him to renounce his seat and run for the hills.\n\nBut it wasn't Vince who responded.\n\nBrandt said in a deep voice filled with contempt and disgust, \"Yes, there is. I challenge you Silas, for head of the council. Moreover I charge you with manipulating races outside of your own, unjustified attacks made against one in our community, and abuse of your position. You have lost sight of your purpose and do nothing but scrabble for more power. It ends today. I suggest you step down and make your way from Chicago, this fight is one of blood and honor because of your crimes.\"\n\nHoly crap. I didn't see that coming.\n\nThere was a brittle silence among all the people there, the swirl of negative emotions turned to confusion. Perhaps it was selfishness on my part, but I only felt relief. Sitting in my current chair was more than enough, I really hadn't wanted to challenge Silas. I waited patiently as the crowd shifted their regard from Brandt as the shock of the statements wore off, and everyone stared at Silas waiting for his response.\n\nI wasn't surprised, only disappointed, when Silas backed down. He moved toward the back to make his way out, the vampires looked confused, not sure if they should be following or not. Before Silas made his way out Brandt spoke again.\n\n\"I expect you out of the city by sundown. You are banished from Chicago, come back and your life is forfeit. Vampires, you have two days to choose a new council member before our next session. This council will no longer judge over the minutia, pass the word, all problems will go to your representative first unless it involves cross race issues. As a result, there will only be two meetings a week, we will announce the schedule when we meet again in two days.\"\n\nHe took a deep breath as if considering his next words carefully, \"There will be no foolishness regarding the necromancer, he is a councilor of this community and if you act against him it will not be him you need to fear. The werewolves find him to be a being of honor, who performed a service for us, do not be fooled by Silas's fear mongering, or James' insipidness. They were the manipulators, throwing your lives away in a desperate attempt to hold onto power. Vince is not your enemy. Go, this council is closed for two days.\"\n\nHe banged the gavel, and that was it. Silas was gone, for now. I could not help but notice a lot of the vampires followed. It wasn't surprising, they were probably under compulsion.\n\nSilas motioned us to join him in the small conference room on the side. We all went in and sat around the table.\n\nHe sighed, \"Much like you I was content to be alpha of my people, represent them and them alone and go my way. Silas had always been a schemer, but until recently it hadn't been so... blatant. However it was my debt to Vince that truly spurned me to take this action. I want to assure you I have no interest in messing about in your domains, the idea of it is repugnant to me.\n\n\"This shouldn't take long, we need to decide when to meet for meetings. I would suggest Tuesday and Friday mornings, if there are enough things to address we can extend to the afternoon if necessary. Does anyone have an objection to this?\"\n\nWe all shook our heads. I was feeling pretty good about this outcome, he seemed to be completely no nonsense, exactly what the city needs after Silas.\n\nHe nodded, \"Good. The second thing we will not resolve in this meeting, but I want you to think about it and we can get together an hour early in two days to discuss ideas. Silas left, like a coward, and only the laws and my respect for them stopped me from tearing his head off. He may even leave the city, for now, but he rules his vampires with compulsion. No doubt anyone he puts on the council will have orders to be disruptive, and actually be working for him.\n\n\"Unfortunately this means that for now, until Silas makes his final move and we can kill him, the vampires in this town should be dealt with warily and as our enemies. So take the next two days and think about what we can do to counter it. Or tell me if your group has no desire to commit to this, I will not attempt to force you in this matter, though technically it is a threat to our city and I have the legal right.\"\n\nHe paused then asked, \"Anyone have a question, or another issue to bring up right now?\"\n\nVince asked, \"I have to admit I am a little surprised, what exactly did I do to put you in my debt?\"\n\nBrant laughed. \"Wonderful, you do not even know? I had pondered long on if it was a ploy of some kind on your part, I am glad to see my initial thought was correct. You are an honorable and good being.\"\n\nHe collected his thoughts and said, \"It is my job, my responsibility to protect my pack, I failed in that. You took out a cancer in my pack that was sitting under my nose, and did so by enabling a victim to take revenge on their murderer. That is what put me in your debt.\"\n\nVince shook his head, \"How did you even know?\"\n\nBrandt looked at Vince surprised at the question, \"Why do you think May disappeared so quickly after dispatching that animal? She was full of energy and the ability to communicate, so she reported all that happened to me. Kim also told me her side of it the next day, did you believe they would keep it a secret?\"\n\nVince said, \"I guess I didn't understand how big a deal it would for you and your pack. It was just the right thing to do, and I am being compensated for it after all, by May. It never occurred to me that you would be in my debt as well.\"\n\nBrant asked with a grin, \"Anything else? I told my mate I'd be home early today.\"\n\nI couldn't really think of anything. Well, except one, but I would have to give up my secret, or would I?\n\nI said, \"Just to throw the idea out there, so you can incorporate or discard it from planning. I do have the power to remove a compulsion, if we pulled the vamp puppet in here, I could undo it, and as long as Silas is kept from the city he wouldn't be able to place a new one. Of course, there is no guarantee he or she would be on our side at that point.\"\n\nThere was silence around the table for a few moments, then Brandt said, \"Good, I will see you all in two days,\" and we filed out for lunch.\n\nVince said goodbye, indicating he might stop over this evening. We met back up with Leanne and Lisa to go out for lunch. We avoided talking about the situation, though I imagine it was in the forefront of all our thoughts. \n\nLisa was far from shy now that we knew each other, it was her that brought it up.\n\n\"So when are you going to stop exchanging longing looks with Vince and seduce him into bed?\"\n\nI replied without thinking, \"I do not do that,\" do I?\n\nWilla snorted and nodded at my confused look, \"You do...\"\n\nI said, \"It's all moving a bit fast, I feel like I would need to get permission from you all about it, and talk about it, yet I've known you all for less than a week.\"\n\nLeanne grinned, \"You have our permission... if you'll share of course.\"\n\nWilla said, \"As far as the speed, I think magic has a hand in it. Destiny maybe? We are all drawn to you as much as you are to us. You're a good woman. I think it has been kind of fast too, but in my heart I know we just clicked. You were meant for us, and we for you. I think we all just need to go with it until our minds catch up to our hearts.\"\n\nLisa grinned naughtily and said, \"Also, you're very talented.\"\n\nI blushed, I was at a loss of what to say, there were things they needed to know first, and I had no right to reveal it. Still, Willa's advice was good. I would follow my heart, and either it would work out, or it wouldn't.\n\nI said, \"I think I am going to spend the afternoon healing. I really miss it, it's a big part of my life. Then I'll join you at the house?\"\n\nWilla asked, \"How will you do that? I imagine Silas did a good job blacklisting you.\"\n\nI smiled, \"I can be sneaky, they'll never know I was there. It's better when I get to spend time with the patients and talk to them, that's why I usually get the job of a nurse, but it's not necessary.\"\n\nLeanne grinned, \"Sneaky? Like a ninja healer?\"\n\nI wrapped my hand in power, causing it to fade out. It looked like my fork was floating a few inches away from my now stubby arm.\n\n\"More like the invisible healer.\"\n\nI started in the children's ward. I set up a weak healing, blocking the problems out but letting their bodies recover as the cancers or diseases would be slowly destroyed over a month or so. I wished so much that I could just heal them overtly, and I had to keep the danger of humans finding out about us firmly in the front of my mind. \n\nEven if the enchantment that hides our magic held for something so blatant, there would be an uproar about all the miraculous events. Still, it was hard to convince myself that letting them suffer for another month was a good idea.\n\nI moved around the hospital then, giving the borderline cases some help, ignoring the ones that would recover on their own. My healing was precious to me, cathartic. A reason to live during the times when things were really bad personally, and although this wasn't one of those times, it was still fulfilling to do it.\n\nI just wished I could talk to them. It was always a pleasure to see them a little better each day. To see them opening up again to the world and the possibilities of life. It may have been a giving thing, but it always uplifted me as well.\n\nI had always enjoyed healing, and had never regretted it before. But today that would change. How could I be so stupid as to leave them all on their own? I had forgotten in our good fortune that Silas would be more dangerous than ever with his power stripped away. I had forgotten that he had no reason at all anymore to even pretend to follow the rules.\n\nI appeared by the grove, wrapped in my power and invisible after finishing up what I could safely get away with. It was so surreal what I saw, at first I thought it must be a joke. It was mayhem, the house was burning. Willa and about half her coven had retreated to the grove, the heart of their power, and was holding off a large number of vampires. At least twenty, maybe more.\n\nThey kept charging the coven, diving for the witches who looked tired, exhausted. The witches had called up a storm. They were using the wind defensively and the lightning offensively. There were a few vampires charred to a crisp lying close by and visibly decaying. As the vampires jumped for the witches they were pushed back by intense bursts of wind. It was a nightmare.\n\nIn the next second, I was broken out of my stupor when a witch screamed, I watched in horror as a vampire tore a witch apart as the wind pushed him back. He had gotten too close and had a hold of her.",
        "No more would die like that. I released my power and the grove and surrounding land was lit with white light. All eyes turned to me in shock, the fight stopping in its tracks. I guided my magic through my mind and the twenty plus vampires attacking were overcome. My angelic power destroyed their undead bodies and they fell to dust.\n\nI let my power recede and looked around, the area darkened under the clouds and rain as my light faded. Willa's coven of twenty three, was now fifteen. I was missing something important as I looked at all the faces staring at me. Leanne was there, next to Willa, but where was Lisa?\n\nAbsurdly my mind corrected itself, with Amy it had gone from twenty four to sixteen, she just wasn't here.\n\n\"Lisa?\" I gasped out the question, my voice cracking.\n\nNo one answered me, but Willa glanced at the house and shook her head. I ran toward it but Willa's pained voice cut through me like a knife.\n\n\"It's too late, she and the others are gone.\"\n\nI fell to my knees in the mud. It felt like my life was draining out into the cold ground. Lisa, the youngest. She was barely twenty years old, so beautiful, so full of life, love, and promise. I tried to remember why it was so important for me to go healing today. How I was worried about how fast things were moving, to give me peace and allow my mind to catch up to my heart.\n\nHow worthless now, how stupid. Silas would die for this. The pain in my heart made things so clear. Less than a week had no meaning, I loved them. It was simply how it was. Trying to justify that fact, make sense of it, was a waste of time and effort. I stayed there, down in the mud, wanting to race off and find Silas, kill him, but I was also terrified to leave those I loved again. Not until the danger was passed.\n\n\"I'm so sorry,\" I whispered, my voice swallowed by the wind and rain.\n\nI shook my head, I didn't have time for this, the house was still on fire. I pulled on my power, this time as a sorceress. The fire in the mansion sputtered briefly and went out, smothered by my will and power. It looked bad, I wasn't sure if it could be fixed or if it would need to be condemned and rebuilt, but I had done what I could. The worst of it was on the second and third floor, when I put out the fire I had known all the places it had been and was.\n\nIf only I had been here. I didn't blame myself for Silas's crime, but I did blame myself for not seeing it coming. I should have...\n\nI stood up and turned back to the coven, walking through them until I reached Willa and Leanne, who pulled me into a hug.\n\nI barely noticed the stares from the coven as we shared our grief. I didn't care about my secret anymore, it just didn't seem important. Hiding it hadn't helped, people were dying anyway. Silas would pay, and I would no longer hide myself. This was my home, my family and those that I loved. I would defend it...\n\n\u2003\n\nChapter 11 - Vincent\n\nA few hours ago...\n\nWhen we got home Amy and I shared lunch together, then I got to work. I had always kept to myself, but that wasn't possible anymore. I couldn't deny the fact that a necromancer would make a perfect spy master. So I briefed my ghosts to go out and spy on the vampires, try and locate Silas, and keep an eye on Krista's coven as well as that idiot James. There were no grumbles and they seemed genuinely happy for something to do. Up until now I used them as conduits of power, but with a few exceptions, most notably Hardin, I left them to do whatever they had wanted.\n\nI told them only to report on things that could harm the community, and I really didn't want to know who was fucking whom, or try and get any blackmail on people. I felt weird enough about invading their privacy, even though they were the enemy.\n\nI didn't send any ghosts to spy on my allies, I didn't see a valid reason to. Something that I would regret shortly. Amy was giving me a pondering look and I wondered what she was thinking. Finally I looked over and raised an eyebrow.\n\nAmy blushed and said, \"I've just been thinking about things and wondering how to bring it up with you...\"\n\nI grinned, \"Must be big then. You never seemed to have a problem expressing yourself before. I won't get mad if it comes out wrong, just spit it out.\"\n\nShe got up and swayed over to me and sat in my lap, giving me a kiss.\n\nShe said, \"Been thinking about our future and the people we should have in it. I think... you need to tell our allies, especially our new friends in my coven, what you really are.\"\n\nI had been thinking the same thing myself, hiding it from a separate community was one thing, but hiding it from my friends was another. How could I ask for their trust without giving mine? Still, I was curious at her motivations. I felt like I was being maneuvered somehow, and while I expected the woman in the center of my life to do things like that on occasion, I felt it was important to put up at least a token resistance.\n\n\"I see, and why is that?\"\n\n\"Well, part of it is your situation,\" she hedged, \"I was hoping they would be understanding. I have no problem at all with the fact you have to feed, but I thought it would be good for maybe my coven and of course, Kim, to take care of that. You seem to need... less with the supernatural. Plus I thought it would be good for you to care about those you sleep with, maybe even love them, instead of seducing humans and sneaking away after like you did something wrong.\"\n\nShe whispered, \"I love you, I'm sorry if that all seems a little, heavy handed.\"\n\nI was speechless. Not in a bad way. I did feel guilty picking up human women, who really had no chance in resisting me, and sneaking away after munching down on their souls, despite the fact I tried to focus on women who wanted one night stands.\n\nNo, what had me speechless was she was implying she wanted me to make connections and even have deep feelings for other women. Our soul bond did give her a large measure of confidence that nothing would come between us, but it still took me by surprise.\n\nMy voice sounded dubious, \"That sounds okay to me love, but do you really think they would go for it?\"\n\nShe just looked at me like I was dropped on my head as a baby, \"If you hadn't noticed, they are into polyamory, and they all look at you as if at a tasty treat they'd like to pick up.\"\n\nI shook my head, \"Yeah sure, the physical attraction is there, there is also more perhaps, but feeding a soul to a demon is a game changer isn't it? Kind of like an attractive guy with VD, attractive or not any woman with sense would bail.\"\n\nShe shrugged, \"Don't over think it. It would be worth it because it's more than empty sex with a hot guy. That was the old way. I am talking about real connections. You are a good man, and even more than that, you would be a fantastically strong ally. They would be getting more out of it than just a rutting, they would have your friendship, and someone to call on when in need. I am the link between you and them. I belong to you, with you, but I am also coven.\"\n\nI just couldn't see it. I also didn't see the point of arguing about it. Even if that second part didn't work like she thought it would, it was still a good idea to give my friends the truth of who I was. This past week had turned everything upside down, and the most amazing part of that was sitting in my lap.\n\nI pulled her tightly against me and stole a kiss before explaining my thoughts on it. It seemed almost a moot point since I decided I would tell them tonight, but I was curious.\n\n\"Umm, you said partially? What's the rest of it?\"\n\nShe pursed her lips, \"Do you trust me? I don't want to tell you, influence you. It is something that would be good for all involved, but I don't want to put the idea in your head. All I'll say is don't doubt me, and don't be afraid to follow your heart.\"\n\nI nodded, I did trust her. Our souls were connected and I could feel her honest and loving intent, how much she cared for me. I also wondered how it could be bigger than telling me to use her coven as a feeding ground and that I should love them if I could.\n\nWhatever it was, I felt a wistful sadness as well as hope behind it.\n\nShe started wiggling on my lap, and I couldn't help but respond and harden under her ass. She kissed me softly and turned, moving so she was straddling me before reaching down to undo my pants and fish out my member.\n\nShe bit my lip and I gasped as she stroked me up and down. She kneeled around my legs and pulled my face down into her cleavage and lowered herself down. We both moaned as I made the discovery she wasn't wearing panties under her skirt. Her ready and wet molten core opened to me and she slowly lowered herself taking me in.\n\nI ran my hands down her sides while kissing the top of her breasts, and took her shirt up with me when I moved them back up, slipping underneath I cupped her generous breasts and rubbed her nipples in a circle with my thumbs. She looked so beautiful when I looked up. She was barely moving and we were staring into one another's eyes as she ground in painfully slow little circles.\n\nI kissed her softly, lost in the languorous movement of her body on mine. We weren't in a rush and I felt a fierce tenderness toward this woman in my arms. I pulled the shirt over her head and dropped it onto the kitchen floor. She moaned softly when I dipped my head and started softly suckling on her hardened nipple. \n\nWithout conscious thought my hips started to push up slowly in time with her swaying circles. I took her other nipple in my mouth as I rubbed the now wet and swollen one with the pad of my thumb. I ran my other hand up her back, teasing her smooth skin with my fingertips. I gathered her hair between my fingers and caressed the back of her neck.\n\nHer hands sent shivers down me, playing with my hair and neck, lightly pulling me forward as she pushed her breast against my face and arched her back. It was a slow decadent fuck, and we were lost both in the sensations we were engendering in each other, and in the intense connection between our souls.\n\nWhen I had joined our souls I wondered if it was the biggest mistake I would ever make, it turned out to be the most wonderful thing I'd ever done.\n\nHer body shook over mind and she whispered, \"Oh Vince,\" right before her body reached bliss.\n\nI kissed up from her breast to her neck, teased her jaw then claimed her lips, letting her come down before we started moving again. We made love that way for at least an hour and her orgasms grew in strength each time. Finally her waiting body accepted my seed, greedily milking my length with her silken bliss.\n\nWe got up and I took her hand, wordlessly we went up and took a shower washing the sweat and sex off our bodies. We were getting dressed and lost in thought when I heard the crying. I turned in alarm and saw the last thing I had expected, or wanted to see. Lisa was there sobbing. I didn't have to ask what was wrong, it was obvious. Lisa was a ghost.\n\n\"What happened,\" I growled.\n\nShe shook her head, tears pooling in her eyes, \"Vampires are attacking the coven... I... was completely worthless, didn't even hear them coming. I was dead before I knew they were there.\"\n\nAmy said, \"We need to go, it will take us at least twenty minutes to get there.\"\n\nLisa shook her head, \"No, bind me and put me in a body, I can get you there through the oak.\"\n\nI froze, \"What?\"\n\nLisa said, \"Don't you know why the community fears necromancers? If you bind us at our death and put us in a body you'd have magical slaves. Humans are good for nothing but power conduits. But I trust you, you won't make me do something bad, and I'm not ready to move on... Please, we have no time.\"\n\nShe shook her head, \"I hope it's not too great a temptation, I thought you already knew, imagine a legion of vampires, witches and sorcerers at your back, all bound to your will. I truly hope you are worthy of the trust I am showing.\"\n\nI was shocked, I had no idea. But I didn't have time to even consider it right now if her coven was being attacked, possibly slaughtered right now. I didn't think I had any female zombies left, but then I remembered two of the vampires that attacked yesterday were females. I called them both and in a few moments they were in the room.\n\nI said, \"I can find you something else, but right now choose one of these.\"\n\nThey were both attractive, vampires didn't turn ugly humans after all. One had blonde hair and blue eyes, the other long black hair and green eyes. Their bodies were incredibly similar, both had C cup breasts, were about five foot four, and easy on the eyes. I wondered if the same male vamp had turned both.\n\nLisa said, \"Thanks for giving me a choice, but that one will do, I always wanted green eyes.\"\n\nI could tell by her voice she was on the edge of hysteria. I wasn't sure if she would serve me for ten years for me doing this for her, or not. It didn't feel right, she was a friend and I should help anyway. But a shiver ran down my spine, I can't hand out bodies to all my friends so they never die, can I? I would have to work through it later, but for now it would be a mind to soul bond, just in case she lost it at some point, I could always make her an independent revenant later.\n\nI pulled some power to me, then prepared the body, formed the links and inserted her soul. It was obvious now, and a bit scary. I had the power of a witch at my fingertips now, and I wasn't sure I could be trusted with it. I had no inclination to gather hundreds of magic users and form an invading army, no, my issue was much more subtle. It would be easy to keep making them as supernaturals died and souls became available, keep them around to protect the city and those that I loved. Good intentions could lead me down a dark path with this power.\n\nI said, \"If it makes a difference,\" as we jogged through my house, toward the back yard and the oak tree, \"I really thought your brown eyes were beautiful.\"\n\nShe giggled which turned into a choking sob. I berated myself, so not the time.\n\nShe chanted at the oak, then stared at it in disbelief.\n\n\"What's wrong?\" Amy asked in a gentle voice.\n\nHer voice was filled with loss, \"The oak grove, it no longer recognizes me as coven.\"\n\nAmy said thoughtfully, \"Maybe you just need to be added back to the coven in your new state. After all, I am undead and was able to join the coven, I just wish I had been taught the spell. I haven't had a chance to look at the coven's spells.\"\n\nShe brightened slightly at the sliver of hope that Amy extended and said, \"I think I have an idea.\"\n\nLisa grabbed Amy's hand and placed it on the oak, with her hand over top.\n\n\"Maybe it will recognize your signature even though I am casting. I can send the energy through you.\"\n\nShe chanted again, and apparently that worked. She grabbed my hand and gestured for Amy to lead us through since the spell was tied to her. Amy stepped through the trunk and dragged us through. We came out into the middle of a thunderstorm.\n\nThere were corpses on the ground, but no people. Not sure what to do I headed for the house. It looked like it had been on fire at some point, but not now. I sent my power questing out and into the house, but I couldn't find anyone, where were they?\n\n\"I don't sense anyone.\"\n\nI sent out a general call asking if any of my ghosts had seen them. May answered the call.\n\n\"I was hanging around Brandt when he got a call from Anise, her and the survivors of the coven are at the council chambers.\"\n\nI was angry for a moment she hadn't contacted me, but it was my fault, specifically telling them not to spy on allies.\n\nMy cell phone went off with a text telling me the same thing. Apparently there would be an emergency session on how to deal with the vampires. I told the others what was going on. Lisa, with the help of Amy opened the oak and a few seconds later we were in Chicago, making our way to the council room.\n\nIt was a little awkward when we got there. Willa, Leanne, and Anise were in a group hug as soon as they figured out who Lisa was. They shot me grateful looks. The rest of Willa's coven was a different story, they looked... distrustful and suspicious.\n\nOnce Lisa explained that she had begged me to do it, and asked for our help with the attackers, the suspicion lessened quite a bit, but it was still there. Honestly I couldn't blame them, the idea of your soul being enslaved after death is not a pleasant one.\n\nI cleared my throat and said tentatively, \"There is something else you all need to know about me. I don't like keeping this secret now that we are friends. It seemed prudent to before now, but... Well I think it's time. I think it will probably come out soon anyway with all that's going on, and better from me than someone else.\"\n\n\"And what secret is that Mr. Jones?\" someone with a deep voice asked behind me.\n\nI turned to see Brandt with an amused look on his face, a number of werewolves came in with him. Including Kim.\n\nI waited for everyone to find a seat, that would gain me a second or so before the lynching started.\n\n\"Well, my mother was not human. She is in fact a demon.\"\n\nSaying that felt a lot like ripping off a band aid.\n\nI scanned the room, there were various reactions. Anise and Amy of course already knew. Lisa looked like she was having second thoughts about what she had just done. Willa looked thoughtful, Leanne was blank, as if processing it.\n\nBrandt chuckled, \"I thought you were going to tell us something new Vince.\"\n\nHe slapped me on the back good naturedly and we all stared at him. It was my turn to show a blank face. How the fuck... oh. I looked over at Kim guiltily.\n\nHe grinned, \"Did you think Kim didn't know after the first time? When I asked if she thought it was worth it she said fuck yes.\"\n\nThis strange acceptance from Brandt, whose honor everyone trusted, seemed to calm everyone down. They weren't exactly jumping for joy but I was almost sure I wasn't getting lynched. It had also raised my estimation of his intelligence and abilities. I couldn't have asked for a more perfect way to disarm the situation.\n\nBrandt took control at that point, and questioned everyone on what happened. We learned another coven had been attacked as well, only Krista's was left alone. They had also left the sorcerers alone. Brandt theorized that Silas thought of them as possible allies through James. Since Anise was so new she really didn't know anyone in that community.\n\nBrandt said, \"Obviously putting this off was a huge error, you have my apologies. Any ideas on what we should do now?\"\n\nI said, \"I sent my ghosts out looking for vampires earlier to keep track of them. Unfortunately they didn't get information on the attacks before it would matter, there are only a hundred or so and Chicago and the suburbs is a huge area to search. I would suggest we take Anise up on her offer, I can find them, eventually, and Anise can remove their compulsion. Then we question them or kill them based on how their own conscious falls.\"\n\nBrandt nodded. \"That sounds better than a general slaughter of vampires, and quite merciful. We must also include questions on where Silas is and what he is planning. His life is forfeit as he started a war with us. You should also ask about numbers, hangouts and locations of homes. It should speed the process greatly. I would like to suggest along with you and Anise, that you bring members from the other communities, some of those present here now. The witches most of all deserve justice.\"\n\nHe let that sink in and said, \"I will stay here, those that don't volunteer will stay with me and get the word out on what Silas is doing via spell, phone, or any other way you have to contact others. Instruct anyone they are welcome here to ride out the storm.\"\n\nHe turned to me, \"Don't take any chances, enslave them if you have to until they get sorted out, you can always let the good ones go. If you find any, send them here.\"",
        "After a short discussion, Anise and I had our group. Amy, Lisa, Leanne, Willa, Kim, Jason, Julie, and Sara who had run in during our discussions would all be joining us.\n\nJason was a mountain of a man, one of Brant's seconds. He seemed friendly enough. Julie was one of the survivors from the other witches coven.\n\nAnise said, \"Just give me a moment, I'm going to ward this place. If any vampires show up here their compulsions will be stripped, but you'll still have to be alert for anyone voluntarily working with Silas.\"\n\nI watched in awe as her ever present white aura became visible to everyone else and brightened. Sigils of power appeared in the air and shot off to dissolve into walls, doors, and even the glass windows at the front. She did it so effortlessly.\n\nAmy whispered in my ear, \"Close your mouth.\"\n\nI glared at her, \"It wasn't open.\"\n\nShe muttered, \"It might as well have been,\" then she winked at me, as if she approved of me ogling her grandmother.\n\nI'll never understand women.\n\nI suggested we leave, and Anise shook her head.\n\nAnise said, \"If we have to drive, run, or even find the closest oaks it will take forever to do this. Do you have any locations right now.\"\n\n\"Yes, a few.\"\n\nAnise said, \"Everyone hold hands, this should be interesting.\"\n\nEveryone seemed to go along with her order, I had Amy on my right, and Anise was holding my left hand. She squeezed it and looked at me intently. I had hoped Anise would help me with my powers, teach me what she knew of them. Still, this was a nervous time to do so. \n\n\"Close your eyes.\"\n\nI did that, feeling a little self conscious about it.\n\n\"Surround yourself with your power, cloak yourself in shadow and extend it to cover the group.\"\n\nI heard a few people shuffle nervously at that, but they didn't say anything.\n\nAnise whispered, \"Good, now see where your ghost is watching the vamps, look through their eyes. Take in the scent of the place, the way it feels to actually be there.\"\n\nHer hand felt really good in mine, her aura was bumping up against mine and it felt good, tingly, like they belonged together. I couldn't help but wonder what it would feel like if we were naked, her skin against mine. Her voice was like a siren's call to my libido.\n\nI had an irrational urge to kiss her.\n\nI pushed all that down, this so wasn't the time for that.\n\nI nodded when I had it right, the feeling she had ordered me to call up.\n\nAnise said, \"Now take us there, decide to be there, will it and let your power go.\"\n\nI willed us to move to my ghost, to be there and the shadows tightened against us and I felt like my stomach was turned inside out. I took in a breath and I could tell just by the scents we were where I wished to go.\n\nI opened my eyes and we were in a backyard. I sent the ghost away to find more vampires, then sent tendrils of my necromancer power into the house, capturing vampire after vampire, ordering them out to the yard where we stood. For better or worse, our retaliation was finally under way...\n\nChapter 12 - Anise\n\nI reluctantly released his hand. I was surprised my voice had been so steady while instructing him, my aura kept getting inside his and my whole body was tingling with desire. Right before he teleported us I wished we were alone so I could take him. I'd been paying attention and it was obvious to me now that we were both extremely attracted to each other.\n\nGranted at this point it was mostly magic, chemistry, and lust. But I knew he was a good man as well, it would be so easy for it to grow into much more.\n\nThe very beautiful diminutive and scary werewolf looked at me knowingly and I was struck with an irrational surge of jealousy. I took a moment and purged that ridiculous emotion using mind techniques. I knew from my granddaughter's ideas I'd only get him if I was willing to share. And really, I was willing. It would be hypocritical of me otherwise. After all, he would have to share me too.\n\nThe vampires lined up in front of us, leaving the house calmly and orderly. It was a bit creepy to be honest, and I was glad Vince was on our side and not a megalomaniac. There were six vampires here in all, and I let my power out, just a touch, and burned away the magic of the compulsions placed on them.\n\nWe questioned them and found out a few things.\n\nSilas was laying low and actually still somewhere in the city, but they didn't know where. They also didn't know Silas' plan, but they expected to receive backup from outside the city, that was grim news. The vampire community had sixty three members, which sounded low, but was actually kind of high. That did not include the ones Vince and I had killed over the last few days so originally it was more than a hundred.\n\nTwo of the vampires here were sadistic bastards and we killed them. Vince and I could have killed them with a thought, but we acceded to the witches and allowed them to carry out the sentence. \n\nThe other four had only done what they did under duress, with compulsion they hadn't been given a choice. We sent them to the council building and stood by a moment while Vince was organizing the search based on the new intelligence we had.\n\nI watched him as he closed his eyes and sent out the orders. I had an irrational urge to step into him and kiss him. What was wrong with me? We were in the middle of a damn war. I saw the smug look on Amy's face as she watched me, I couldn't help but smile sheepishly back.\n\nIt took us over eight hours to do what we could. We found thirty five vampires all together, a little over half. Out of those in total we had to kill eight, so we now had twenty seven vampires on our side. They were currently trying to decide on a new leader.\n\nWe stopped not only because we were tired, but the last group had orders to abandon the city and regroup. Silas had gotten the word out we were taking them all down, and his plans weren't ready for a counter attack.\n\nI worried what those twenty eight vampires would do, plus we had to worry about what outside contacts Silas had and deal with that. So far they had managed to elude Vince's ghosts. He stationed them around the city at probably entry points, hopefully we would get lucky and sight them when they came back. The wards I created should last for months, so we had a slightly better margin of safety for the community there.\n\nI worried, it was impossible to maintain readiness indefinitely, I was sure Silas would wait until things calmed down a little before attacking again. There was also no reason he couldn't recruit and turn a bunch of humans.\n\nWe broke up, each promising to do what they could to keep watch and search, but other than that there wasn't much. It was with a little frustration I watched Kim kiss Vince goodbye. Not really jealousy, just wanting it to be me as well.\n\nI wasn't sure where we would end up, I doubted the house was safe, but apparently Vince had thought of that as well.\n\n\"Willa, would you and the others like to join me at my home until yours is repaired? Mine isn't nearly as big, but more than big enough for four more people.\"\n\nI licked my lips at the thought of being under his roof, then hid a blush as I realized what I did. Luckily no one saw, not even my sneaky granddaughter.\n\nWilla smiled and said, \"Thank you Vince, we'd love to.\"\n\nI volunteered, \"I'll take us,\" as we all held hands.\n\nIt was probably silly of me, but I wanted Vince to feel my magic surround and enfold him the way his had been doing to me all day. I released my angel magic around us, surrounding and cradling our bodies, and transported to the front of his house. He gave the four of us a tour of the house, which made me wonder if Lisa would be staying here from now on, two of Willa's coven members in this house.\n\nIt wasn't as big as Willa's, but it was still huge, there were enough bedrooms for all of us separately, and we surely didn't need that many. It was late and we were all tired. We had a quick snack in the kitchen then turned in. I watched wistfully as Vince and Amy walked away. I joined Willa, Leanne, and Lisa in a guest bedroom that had a king size bed in it.\n\nIt was a beautiful room, but you could tell it was a guest room. The colors were gender neutral, and although there were knick knacks and stuff, the room didn't feel lived in at all. \n\nI think we were all too tired for sex, so stripped out of our clothes and crawled into bed together, cuddling up was comforting. I didn't need sleep of course, but after all the running around and magic use I did need to relax and meditate.\n\nWilla said, \"So what do you think, should we put Anise out of her misery?\"\n\nLeanne laughed wickedly, \"Yes, we should, the poor girl is going to explode at any moment.\"\n\nI must have had a confused look on my face because Lisa started laughing when she saw my face.\n\nLisa said teasingly, \"We should, but I think we'll have to explain it, she looks confused. Poor thing,\" she shook her head mock sadly at me.\n\nWilla rolled her eyes at me, \"Oh sweetie, Vince has the full stamp of our approval, and if you don't act fast one of us may get him.\"\n\nI said with a chuckle, \"Don't you know? That's the plan.\"\n\nI was very satisfied at the confused looks all around. Feeling vindicated I snuggled into Lisa, kissed the back of her neck and whispered, \"Night ladies.\"\n\nLeanne gasped, \"No way, you can't say something like that and then not explain.\"\n\nI chuckled, enjoying my revenge, \"You don't know? Your newest coven member hatched herself a plan out of love for him... She is determined to give him all his needs and wants.\"\n\nI explained it all, the needs of his demon side, how they could fill that need with love and support so it wasn't such a dark thing. The hope that I could be another lover and maybe mother of his children that would be around indefinitely with Amy and Vince. I really hoped they wouldn't get jealous or upset at that point, knowing that at some point they would have to leave the three of us, even if only at the end of their lives. Actually... Lisa would never have to leave either now come to think of it, though I didn't bring that up.\n\nWe stayed up longer talking about it then I would have thought it would take, and we left it at a let's see what happens. I was happy enough they didn't feel revulsion at the idea and were open to the possibility. I turned over and snuggled into Leanne, just soaking up the love and acceptance they offered me as they slipped into slumber. I stayed there for quite a while after they fell asleep, but feeling recharged from meditation I got out of the bed and headed for the kitchen.\n\nI grabbed a juice from the fridge, then thought of what my tired mind had not. I brought up my power and started warding the place. I could feel Vince's wards protecting us, but figured a layer of mine couldn't hurt. I wish I had thought of that for the coven house. Hindsight is a bitch.\n\nI was more thorough than at the council building, I used angelic magic to strip compulsions for vampires, but I also added wards that checked for intent to harm those that lived here type stuff. Those people would be contained in one way or another, and if they broke out deadly force would kick in if they dared to continue into the house.\n\nI was very careful placing them to use minimal harm at first, more a warning, just in case it was an ally that was especially pissed at Vince at the moment, but wouldn't really attack. Wards were tricky that way, and if they incinerated someone it wasn't so easy to shrug your shoulders and say you set them wrong.\n\nI was concentrating so hard on the magic, not wanting to make a mistake in its complexity that I didn't notice anyone approaching until I heard Vince's voice.\n\n\"Your magic is beautiful.\"\n\nI felt my breath catch when I looked up into his eyes. I wondered for a moment just how long he had stood there, staring at me.\n\n\"Can't sleep?\"\n\nHe shook his head, \"I don't sleep at all anymore. I used to, when I starved my demon side, fed as little as I could,\" He smiled ruefully, \"Amy won't let me do that anymore.\"\n\nAfter a few moments I realized we had our eyes locked and neither of us could look away. I wondered what the hell I was waiting for and stood.\n\n\"Your magic is beautiful too, did you feel it today?\" I asked\n\nI took a step forward as he asked, \"Our magic, mixing?\"\n\nI nodded as I stepped close to him, \"It made my whole body tingle, kind of the way it is right now.\"\n\nI reached out and put a hand against his chest. It was solid, warm. Our magic mixed. It was so strange, I wouldn't have thought the magic of an angel and demon would merge so well. Maybe our human magic was a factor as well.\n\nI stepped in closer, my nipples brushing against his chest through our clothes. Both my hands on his chest as I looked up at him.\n\nI said, \"I knew it would feel even better like this.\"\n\nHe looked as hungry as I did, but he had a torn look on his face that confused me, until he explained it.\n\n\"But... your Amy's grandmother, how could we...\" he trailed off, sounding hungry, frustrated and a little lost.\n\nI whispered, \"You know she approves, she has pushed you to me hasn't she? All but told you to take me? It wasn't your imagination, she wants this as much, if not more, than we do. And no, I'm not going to explain why right now.\"\n\nHe looked like he would argue, but thank god he changed his mind and pulled me against his body into a deep kiss. My whole body just melted into his, submitting, seducing, and feeling safe all at the same time. His hands blazed fiery trails all over my body and I rubbed my body against him like a cat in heat. I had never felt anything quite so overwhelming, it wasn't just the physical feeling it was our magic. The feeling seemed to intensify as the magic eagerly followed our wishes to intermingle.\n\nHe picked me up and carried me down the hall to an empty bedroom. I was lost in sensation and don't remember getting undressed at all, suddenly we were on the bed and he was maneuvering for entry. I gasped and ran my nails down his back as he kissed my neck and I felt his manhood split my labia. My hot core was slick and ready, had been ready for quite a while, that first kiss had me moist and ready.\n\nI swiveled my hip and pushed up, eagerly taking him in. I felt so full. He started to pump into me harder and harder.\n\n\"Oh god yes, fuck me Vince, fuck me hard and fast.\"\n\nI was lost in the pleasure. I knew we would make love one day, probably very soon, but the sexual tension between us had built up so much that a hard rutting was what we both needed.\n\nI moved my body in rhythm with his, meeting him thrust for thrust as our bodies slapped together. He was so big, not enough to be painful, but perfect. I was full and he was hitting all my spots and I knew it wouldn't take long for him to get me there.\n\n\"Don't stop, just fuck me harder, faster,\" and after that I couldn't speak, I couldn't breathe, my whole body was filled with bliss as my core exploded in pleasure. He didn't stop, just like I asked and I could feel him growing larger in me, stretching me out more and I knew he was going to cum.\n\nI don't know why I did it at the time, I didn't really think about it, I simple commanded my magic to open to him. I rolled into a second orgasm and I felt his energy reach out and feed. The ecstasy of my bliss tripled while I felt him emptying into me. My whole body was trembling and the amount of pleasure was on the edge of the pain threshold. I didn't think I could take any more when it stopped and I slowly fell from my height.\n\n\"Oh god, why did I wait so long,\" I whispered. Then blushed realizing he had heard me...\n\nWe came together in another kiss, this one soft, gentle. I felt a strange emptiness as he slipped out and a lethargy, but I wouldn't fall asleep, I was sure I'd recover quickly. For a while we just laid there caressing each other, occasionally stealing kisses. Then strangely enough we started talking about Amy. He was starved for information about her childhood and what she was like. And of course, I wanted to know all about the adult vixen upstairs that had so generously shared this man, for his sake.\n\nHe also asked me about Lisa, if she was stable enough in my opinion for him to switch her to a revenant status.\n\nI smiled and kissed his chest and up to his neck whispering, \"I think so, besides, the quicker she has her freedom the quicker you can get her in bed...\"\n\nHe looked down at me and muttered something about crazy females, causing me to laugh and wink.\n\n\"What,\" I asked defensively, \"It's only fair, she is sharing me with you after all, I should return the favor. As long as I hold a place in your heart the rest of it is good.\"\n\nI was feeling very much recovered, so I started to kiss my way down his stomach. Before I could get him in my mouth he stopped me looking regretful.\n\n\"We can't, not for a few days, until your soul recovers.\"\n\nI blushed up at him, my face scarlet, \"That won't be a problem. I'm immune to that, I actually had to purposefully open myself up.\"\n\nHe blinked at me and asked in confusion, \"Why, I have others for that, if your immune why would you want to.\"\n\nI thought mournfully that I'd never get his cock in my mouth and crawled back up his body. It had been an impulse decision I hadn't understood during it, but I did now.\n\n\"For two reasons really. One, it is a part of you, and I am undoubtedly falling for you, and I wanted to experience it, to understand it, to better understand you. Second, I wanted to know why Kim thought it was so worth it, and would be back for more.\" \n\nHe grinned and asked, \"Did you find out why?\"\n\nI nodded, \"The most intense orgasm of my life. Obviously I won't be doing it all the time, but don't be surprised if I open up to you again in the future.\"\n\nHe nodded wisely and said in a faux lecturing tone, \"Demons are a corruptive influence you know.\"\n\nI snorted and glared at him, but I was secretly pleased he would joke about that. So much so my heart swelled for him. His powers weren't inherently evil, it was how they were used that counted. I started working back down his body with kisses, determined this time that if he interrupted my mission I'd gag him...\n\nChapter 13 - Vincent\n\nHer kisses down my body felt like trailing fire. It killed me earlier to have to stop her, but I was worried about her soul. I was keeping myself quiet this time, glad she hadn't abandoned the idea altogether.\n\nThe sex had been amazing, our magic amplifying it, and I was definitely falling for this woman. I felt a stab of guilt, feeling that I was somehow betraying Amy, but I could feel her soul. She was content this was happening, no, happy it was. I wish I knew why but I also trusted these women had no nefarious agenda that I would disagree with.\n\nI moaned out loud when she took me in her mouth. Her tongue felt magical against the sensitive underside of my tip. To my shock she slowly took me all the way in, I felt my tip pop into her throat and she kept going until I felt her nose hit my skin. Her gorgeous breasts were teasing my inner thighs and her golden hair laid in a wave across my chest, stomach and legs, teasing my skin as she pleasured me.\n\nI had never felt anything so good in my life, and wondered if this was one more thing she had perfected over the millennia. What an absurd thought, but there was a lot of truth there. She rose off me and started crawling back up my body.\n\nShe whispered \"Sorry, I'll finish you that way another time, I need you in me. The magic is driving me nuts, and your taste.\"\n\nI smiled at her and said, \"Don't you dare apologize, from what I understand we have a long time to get that done.\"\n\nI pulled her down for a kiss by her hair, she really was beautiful. Her hair was dark golden blonde, long, curly and felt like silk in my hands and on my body. Her breasts were perky and a perfect size for her body. But that was just the package. Her bearing, her magic, her outlook on life, her competence, her generous pure spirit, it just all blew me away. I gasped as I felt her labia run up to the tip of my manhood, then she swiveled her hips and impaled herself on it.",
        "She put her hands on my chest and squeezed as she started to both bounce and grind on the down stroke. Her back was arched and I could see her beautiful face and full lips. The curve of her neck, her breasts swaying gently with her motions and my body responded, pushing up as she came down. I reached up and kneaded her breasts and teased her nipples.\n\nI thought I would last a long time, I'd had a lot of sex lately including with Anise herself a few minutes ago, but she was doing amazing things to my manhood with her slick silky tight sheath. She was more than just tight, she had precise control. She was a great lay when I was on top, but with her on top and in control she was a goddess. She locked up above me and impaled herself straight down with a gasp. Her walls undulated, squeezed, and milked me and I couldn't stop it. With a grunt and a harsh push up, despite being buried already, I exploded into her, filling her with my love juice as I felt her flood the outside of my manhood with hers.\n\nShe collapsed on my chest a few moments later. I caressed her face and kissed her soft lips.\n\nI was curious but wondered if I should hold my tongue. Curiosity, my need to know won.\n\n\"When will you two tell me the why you, I understand the others, but why you? This is not a complaint by the way, I wouldn't care if there wasn't a reason, I am just curious.\"\n\nShe slid off to the side and cuddled into me, kissing my chest before laying her head down.\n\nHer voice came out soft, loving, \"She wants me to give you the one thing that she can't, besides feeding. And right now I am inclined to give it I think, though it is still a bit early for that decision. Okay, a lot too early. The reason she wants it to be me, is I'm the only one that can both give that, and prevent the pain of loss she saw me endure in the past.\"\n\nI couldn't think of a thing, besides feeding, that Amy couldn't give me. At least, not until I factored in the rather large clue that sex was part of the equation. Of course, Amy might be warm, alive in many ways, but she still couldn't bear me a child. Her body was incorruptible, frozen in time. The pain part I guessed would be losing the mother of my children, which would happen to any other woman I got pregnant. It also lines up to the loss she was talking about, Amy's grandpa dying.\n\nI wasn't sure how to take that. Yes, she schemed to make me happy, but she was still trying to arrange my life without my input. It was both a dream come true, and felt restrictive. Now I understood why they didn't want to tell me, to just let it happen if it would.\n\nBut then, how could I possibly say no to this woman in my arms. I gently pulled in, squeezing her body against mine while I kissed her hair. I wasn't really sure what to say. She was right, it was too early to be talking about commitments for eternity, and raising children together with Amy. The three of us together, for as long as we lived, until we lost our lives to violence or accident.\n\nBut my heart rejected the idea of her ever leaving me, which was ridiculous. I met the woman less than a week ago and barely talked to her at all until a day or two ago. Was it all lust and magic? Or was there more, or maybe the potential for more.\n\n\"Do you want something to drink?\"\n\nShe giggled, \"That wasn't the response I was expecting.\"\n\nI struggled with what to say, \"I don't know, I'm just going to go with the flow for now, see where we end up in a month, maybe a year, maybe a millennium. I don't know. It seems too early and fast for feelings this intense.\"\n\nI felt her nod against my body, \"I was having problems with that too, and made the same decision when I thought I lost Lisa. Doesn't matter how short it is, I feel love for those three women, and I also feel it for you. If it's not real, if it's all chemistry and magic, we will find out. So, go with the flow... Running from it because it seems too good to be true would just be a bad idea.\"\n\nFor some reason I felt a surge of relief and relaxed. As long as she was feeling this same intenseness, it would make it easier to take it day by day.\n\nShe whispered, \"I'd love one of those apple juice bottles.\"\n\nI moved to get up and she hugged me tighter.\n\nShe asked, \"Want another lesson?\"\n\nI grinned and agreed, three minutes later I summoned two bottles of apple juice from the fridge with my power...\n\nAfter we drank the juice she asked, \"Did you notice all those symbols I used for wards and stuff?\"\n\nI nodded and she said, \"For sorcery, and I imagine necromancy, it requires extreme concentration and clarity of thought. Our other powers are much the same, like when you transport you need to keep in mind where you're going, what it feels like, who you're bringing with you etc...\"\n\nI asked, \"So the symbols?\"\n\nShe sighed and gathered her thoughts, \"You create the symbols in your mind to encompass a very complex idea. You'll need to study memory and meditation techniques, which will help your necromancy too. Once your mind has the idea impressed enough to the symbol, you merely have to focus on a symbol. So instead of trying to hold five or ten ideas, you pull up a symbol that will invoke those five thoughts when you cast it with your magic.\"\n\nShe shrugged, \"It's a lot of work, but you'll find as you grow older the nights when everyone else sleeps get longer, it's a way to pass the time and something to do.\"\n\nShe giggled, \"Of course, if I'm around all the time you can do me instead, but you get the idea.\"\n\nI tried to absorb what she was saying, it kind of made sense. Like driving became a subconscious activity once it was learned to a sufficient degree. If you could practice very complex thoughts and directions for your magic, and assign it a symbol, it would be very much the same thing. When I think of the symbol, my subconscious would dig up the intent and directions.\n\nKind of like when I decide to change lanes, and my body automatically turns on the blinker, checks the mirror and then moves to the side, even automatically adjusting speed if necessary. I don't consciously do three or four things, I just consciously decide to change lanes. I explained my line of reasoning but she shook her head.\n\n\"Yes and no. What you're saying is how the techniques will help your necromancer magic. It's not the same for Angelic or Demonic magic. The magic is different, an immortal magic. The symbols don't tie to my unconscious mind, they tie directly to my magic. Our magic is almost sentient, it will learn, like teaching a dog tricks.\n\n\"So if I want to ward a room I just think of the symbol. That symbol doesn't trigger an automated response in my mind, or anything in my subconscious, my magic has that knowledge and it literally just does it for me, with no other direction from me outside of a target, or the desire to stop it, or change it to something else. It may sound like a free ride but it's not. It takes years and years to understand it. It took me literally centuries to build up my magical symbol vocabulary to the point it was useful. But now, in a fight, no one is faster than me, unless they can do the same thing.\"\n\nI said, \"I think I get it, but I'd have to learn to train the ability like you said. Would you teach me? With you guiding me maybe I could learn it faster?\"\n\nShe looked up at me with false suspicion, \"So you can have both, learn the magic and have me right there to fuck when the mood hits.\"\n\nI grinned unrepentantly, \"Both smart and beautiful, no wonder I'm falling in love with you.\"\n\nWe both stilled when that slipped out of my mouth, then I pulled her up for a hungry kiss. I reached down stroking her skin on the way and checked her, she was as ready as I was, despite the sudden onset. This time I put her on her hands and knees and got behind her. She eagerly pushed back impaling herself as soon as I was lined up.\n\n\"Oh gods yes, fuck me Vince.\"\n\nI obliged, running my fingers up her spine before grabbing her hair and pulling back. I spanked her playfully to see if she'd like that, and it was obvious she did...\n\nWe were insatiable that night, by the fifth position I was sore and mentioned we may need a break. She just grinned cheekily at me and gave me that promised blowjob, and healed me with her angelic magic while she was doing it. It was odd to me that her spirit was so pure, but she was very... earthy and forward sexually. She explained to me that when she grew up sex was not a taboo subject, and a lot of the silly crap they brainwash people with now doesn't affect her outlook on it.\n\nShe was still pure of spirit because she truly believed there was nothing at all dirty about sharing her body, about giving and taking pleasure. I sure as hell wasn't going to argue with her about it.\n\nWe took a shower around six and cooked breakfast for everyone together. Shortly after we started they joined us. I expected teasing, especially from a roomful of women, but they all acted like it had been expected and it was about damn time.\n\nI took a moment to check with my ghosts and they hadn't had any contact with the enemy. I let my mind wander over the last day or so for a while, before I blurted out a name.\n\n\"Krista.\"\n\nThey all looked at me like I was nuts.\n\n\"I know you were going to wait to deal with her but we should do it today. She may know where he is, for all we know that last group of vamps was a fake tip and Krista has them all shielded in her basement. I'll grant you probably not, but it's a point, can we afford to have a spy and saboteur in the city while we wait for him to attack? Plus we don't have a whole lot else to do except spin our wheels and worry.\"\n\nAnise added thoughtfully, \"Maybe we should add James to our list, at best he is sitting tight waiting for orders, at worst he is still stirring up and lying to the sorcerer community. I really should wrest that away from him, it's the responsibility I took when I became a councilor. If we can manage it we should have a united community presence when he comes back. The more I think about it the more I think Vince is right.\"\n\nWilla sighed, \"Your both right, I put Krista aside at first to deal with the greatest threat, but now that he is off scheming... it would be just plain not wanting to deal with her if I put it off any longer.\"\n\nLisa asked, \"Should we stick together, or split up?\"\n\n\"Why would we split up? Were stronger together,\" Leanne said.\n\n\"Well,\" Lisa explained, \"What if those two are in touch, it would make sense if they are both working for Silas. We would lose the second person in that case, they would go underground, or leave the city.\"\n\nI couldn't help but be impressed with Lisa, which reminded me, I modified her bond from her soul to her mind, giving her the freedom to choose where to live and who to be with.\n\n\"Good point, I agree we should split up, and Amy should go with the opposite group of me, that way we will stay in pretty much constant contact and we can move in at the same time.\"\n\nAmy said, \"You and Grandmother are strongest, so I'm taking Grams with me.\"\n\nWe finished dividing everyone up as we ate. The groups would be me, Lisa, Leanne and Willa going after Krista and her coven. Amy would go with Anise and Sara to confront James. I didn't like that Amy and Anise had less people on their team because I loved them and would worry, but I wasn't stupid enough to object. Anise was more powerful than me because of experience, and Amy was the third most powerful in the room, so it would all work out.\n\nI kissed both Amy and Anise goodbye, finally drawing some of that teasing I expected from the witches. Since Willa knew where Krista lived, we walked out back to the Oak tree and she led us through. We arrived a couple of blocks from the witches house and waited for the green light to go ahead. I used enough of my magic though, just to verify they were there.\n\nIt took a few minutes, Anise had to go to the council records room first to find James' address. About ten minutes later we got the go ahead and moved toward the house. It was still early, maybe eight thirty, and there seemed to be a lot of activity inside the house. I let Willa take the lead, this was her deal, but I wouldn't balk at protecting her either.\n\nShe sent Lisa and Leanne around back to make sure no one tried to get out, they had orders to spell the back door in thirty seconds to keep it shut. We watched the time count down and Willa banged on the front door.\n\nKrista opened the door and looked me up and down before smirking at Willa.\n\nKrista said, \"What brings you by in your moment of grief? I heard you had a... rather distressing event yesterday.\"\n\nHer voice was smarmy, I had to remind myself I was here to support Willa and not strangle the bitch.\n\nWilla's voice was cold and stark, promising pain, \"Krista, answer me this, are you plotting or working with Silas in any way, or did you follow my orders?\"\n\nKrista snickered, \"What were you thinking coming here to my home, my seat of power, and with one lone companion. Of course I am working with him, and he will reward me well for your death. Surprise!\"\n\nAt the final word, wards that I hadn't sensed around the entryway lit up with power. I was completely paralyzed and couldn't move. If Krista had moved quickly we would most likely be dead, but instead she smirked and pulled a knife, rubbing it in. Bitch was crazy.\n\nIt was a perfect spell, against another witch anyway, whose power depended on the ability to speak, if not gesture. But I wasn't a witch. I pulled up my power and smashed the wards with a thought. Freed I moved to smash Krista next, but Willa was faster. She raised a hand and barked out a single word in a language I had never heard.\n\nI heard some of Krista's bones snap as she flew back into the back wall. Her eyes were open as she slid down to the ground. Open and empty.\n\nWilla said in a dark cold voice, \"Grab her soul, at least long enough to question her.\"\n\nI bound her soul as her bonds to her body broke down. Then I heard a chanting from the other room. Apparently the rest of her coven would not come quietly. I raised shields of shadow in front of Willa and myself right before a bolt of lightning struck. My shields drained the power, ate it, and we both ran in toward the back of the house when we heard a loud explosion.\n\nWhen we reached the kitchen, we saw Lisa and Leanne looking cautiously into the house, the back door itself was kindling, spread around the room. There were also eight bodies lying on the ground. Some unconscious, some merely stunned, groans of pain filled the room.\n\nLisa said, \"We did block their escape, but we heard them attack you and decided to help instead.\"\n\nWilla nodded in approval and looked down at the witches. I could see the fight in her eyes as she decided their fate. I could tell she wanted to kill them, but she let out a long breath.\n\n\"Bind them, we'll question each of them before I determine their fate.\"\n\nLisa and Leanne started casting, starting with the ones still semiconscious they bound the eight women one at a time. I shrugged, and checked the house visually, I trusted my magic for the most part, but I was worried if they could hide wards, they could hide people. I searched from the basement to the second floor but didn't find anyone else. Truthfully I was disappointed. I knew it was a long shot, but I hoped there were more vamps to catch here.\n\nWhen I thought it was secure I closed my eyes and forced Krista to appear. I ordered her not to move, be still and answer all of our questions. Once that was done I fed her enough energy to become visible, so Willa could question her directly.\n\n\"All yours Willa...\"\n\nChapter 14 - Anise\n\nFifteen minutes ago...\n\nI didn't bother knocking. After surrounding the three of us with shields comprising all five elements I let out a whisper of air and James' door unlocked. Amy and Sara followed closely behind. I wondered about the wisdom of sending a ten your old girl in a fifteen year old body to accompany a raid, but her form was ridiculously powerful, at least physically. And really, outside of her physical form getting destroyed there wasn't anything a sorcerer could really do to affect a ghost.\n\nI could feel five sorcerers down the hallway, but none of them were holding a whole lot of power at the moment, so I walked back followed by my two shadows. I walked into an office and private library. \n\nJames said, \"I wondered how long it would take you to come after me.\"\n\nJames was looking at me with a considering look on his face. There were four other sorcerers in armchairs, as if gathered for a meeting. They were all in their middle years, and all but James looked scared.\n\nJames said, \"You know, you can't win. Silas will be back with an army to take back his proper place. I'll admit you have some power, but he has numbers.\"\n\nThis seemed really... strange to me. I asked cautiously, \"And what of you?\"\n\nHe shrugged, \"Well, either you kill me and Silas needs a new ally, or you leave. You beat me once and I know you were hiding more powerful abilities. I won't fight you, so will you strike me dead, a man that stands defenseless against you? My associates won't either, their power is a candle next to mine. I've assured them they will die a nasty death if they try.\"\n\nHe sounded blas\u00e9 about it, but I could see he was sweating. I could also tell he meant what he said, but there was deception behind it.\n\nHe just stood there, waiting for my response, and it enraged me. Was I supposed to leave him here, to rejoin and fight against me later, because he won't fight now? Who does that?\n\nAmy said, \"Holy shit! I got this one Grams.\"\n\nI asked, \"What is it?\"\n\nAmy muttered, \"Give me a minute.\"\n\nAfter a couple of minutes she said, \"Check his head, he's got a small compulsion in his brain. Tiny.\"\n\nI looked with my magic, going over him carefully and saw it, \"Should I remove it?\"\n\nShe shrugged, so I did.\n\nI asked, \"What was it doing.\"\n\nShe shook her head, \"Silas placed it there four years ago, I'm combing his memories now. It's very clever actually, the compulsion didn't make him believe or do anything. That would be too obvious to the others. All it did was lower his... ability for discretion, from that point on he basically believed whatever load of crap Silas shoveled his way.\n\n\"Removing the compulsion didn't take away the changes, the changes all happened naturally because of the compulsion. To fix him I'd have to erase about four years of memories.\"\n\nMy eyebrow went up, \"I didn't know you could do that... But I wonder if Silas did?\"\n\nAmy asked, \"What do you mean?\"\n\nI said, \"All this started and escalated because he wanted to either control or kill you. What if he knew you'd detect that compulsion with your enhanced mind abilities. I'm not saying that was the only reason, I believe he was afraid of your power for other reasons as well, such as direct confrontation.\"\n\nIt really amazed me that he threw away all his power being stupid because he was afraid of losing his power. Still, I felt like I was missing something.\n\nAmy gasped and I turned to her as she said, \"I don't think you need to worry about locating the sorcerer community, this is the sorcerer community. Apparently it took two years of Silas changing him before most of the sorcerers in Chicago rebelled. Two tried to replace him, but failed. Most of the sorcerers left at that point, not willing to be led by him anymore. These four are the only ones that stayed.\"\n\nI snorted. So much for worrying about the responsibility, apparently I was leading myself. I also couldn't believe they just sat there waiting while Amy rifled through James' thoughts. While she continued to check his thoughts I turned to the other four.\n\n\"Why did you stay with an erratic leader who followed a vampire's orders?\"\n\nOne of the men blushed, \"We all have history here. Old family businesses we felt we couldn't abandon. We just stayed out of his way, and cut ourselves off from the community and council. It was only this last week that James even bothered to track us down and ask us to do stuff. We aren't that powerful anyway, mainly used our powers for little household stuff, maintenance.",
        "\"I myself only have power over fire and maybe a touch of air. These others are the same.\"\n\nI let out a deep sigh, \"Very well, I am the sorcerer council now, go home, manage your business and try to stay out of the way of things. If anyone contacts you, or tries to threaten you, call me and I will be there quickly. That includes James, although that scenario is not quite likely. I have a feeling next time you see him, he'll be a new man.\"\n\nI looked at them, \"But before you go, do any of you know where Silas is? Or what he's planning?\"\n\nThey all said no, in truth, which didn't surprise me.\n\nAmy shook her head after they left, \"He doesn't know anything. Silas has called him but only to give him orders. James is nothing but a lackey and doesn't even have insight into the big picture. Should I take his memories? He wasn't all that great a guy before this. Silas was able to get him under his thumb because of his greed and lust for power. Restored he'd just be a second rival, instead of an underling for the first.\"\n\nI didn't want to kill a man in cold blood, although leaving him alive risked good people getting killed later, it wouldn't so much be in cold blood, but a judgment of his past crimes, that was my job as councilor, to take care of these issues. The problem was, those past crimes were done under the control of another.\n\nNow I remembered why I avoided this kind of position for so long. Decisions like these. I had done it only to protect the people I loved and my granddaughter. I knew he was dangerous, he was probably one of the most powerful sorcerers alive, it had only been my long experience that had won the day.\n\nHe was right though, in a fight to the death I wouldn't hesitate to use my angelic magic to crush him.\n\nI sighed, \"I just can't. I can't kill him for what he has done in the past because of the brainwash, and I can't kill him for what he might do in the future if he is restored to his own personality. Go ahead and erase the four years of corruption. Oh, and can you add a temporary compulsion that he can't use his power, he's going to wake up confused and most likely attack us. Might as well just kill him now in that case.\"\n\nShe nodded grimly. It took a while, maybe ten minutes.\n\nJames looked startled as he came out of it, \"Who are you, what are you doing in my home.\"\n\nHis eyes grew alarmed as he realized he had no power. \n\nI explained what happened to him the last four years, and what we had done. He didn't believe me. I guess I wasn't all that surprised and I was starting to lose my temper.\n\n\"I don't want to burden your conscious granddaughter, but could you compel him not to come back to Chicago, or use his power, or contact anyone, for two weeks? We can sort him out when he gets back, if he decides to come back. I'm sure he'll realize the truth of his situation by then.\"\n\nJames got red in the face but then his visage slackened for a few moments.\n\nAmy said, \"Done, and it doesn't hurt my sensibilities at all.\"\n\nI reached out and tapped his forehead, releasing my energy. I didn't really have to touch him, but I had the urge to hit him and it was very cathartic. He disappeared in a flash of white light.\n\nAmy grinned, \"Where'd you send him?\"\n\nI said mock innocently, \"Hawaiian Islands, he'll have a great time.\"\n\nAmy asked, \"Which one?\" her eyebrow raised.\n\nI grinned, \"A very private one. Rather small, but it has fresh water, and food to scavenge. He'll be fine for two weeks and get back to civilization when his power comes back. He is more than powerful enough to fly, or even shape a boat.\"\n\nAmy sighed, \"Vince let me know they didn't have any better luck than we did on locating Silas or more vamps. They did kill a coven leader, banish six others and welcomed two new faces to our coven though. At least there are no more enemies local, that we know of.\"\n\nI nodded soberly, hoping he hadn't been holding anything in reserve, although I couldn't imagine what, we had accounted for all the races. Angels and demons were rare to the point of being non-existent, and the fae really hated the cities.\n\nSara said in a tone of disappointment, \"I thought this would have been more exciting. Should have went with Vince, they got to blow shit up.\"\n\nI said, \"Stuff. Don't curse.\"\n\nSara looked at me sheepishly and I teleported us to the council chambers, sure that Brandt would want to know about our morning adventures. He didn't look happy, but he understood it was an internal witch and sorcerer deal, and that Willa and I had the authority to make the call.\n\nIt was good to see Vince, Willa, Lisa and Leanne unhurt, it was all I could do not to make my rounds and collect kisses and hugs from all of them. Damn public. Brandt didn't have anything new to report either, so we were all stuck waiting for the hammer to fall. I decided we needed some stress relief and suggested a trip to the beach, inspired by where I sent James.\n\nThe others got wind of it, and besides the four of us staying at Vince and Amy's place, Kim, Tara, Stacy, and Jason decided to tag along. Tara and Stacy were the two new witches, they seemed subdued and a little lost. I figured they needed the reassurance of sticking to Willa for now. Tara was a tall willowy blonde with blue eyes, Stacy had long curly brown hair and hazel eyes.\n\nWe gathered some bottles of water, soda, alcohol, blankets, and food. I transported the eleven of us to a private island in the Caribbean. When asked how I knew about it I just said I'd travelled the world a lot, there were no buildings or manmade structures to indicate it wasn't just a deserted island and I didn't really want to admit I owned it.\n\nI wasn't trying to hide it exactly, it just felt too much like bragging. I had a lot of money.\n\nIt didn't take long, as we started drinking, for the not body shy werewolves to just strip naked and dive in the ocean. There was a small cove on the beach, and the water was quite still. I couldn't help but admire both of their forms. \n\nI wasn't body shy either, but I saw a few nervous looks as Amy and I followed suit. Pure silliness. The ocean was warm when I dove in, and I enjoyed swimming around for a while. Willa caught up to me as I swam leisurely inside the cove. I loved how the sun lit up her hair and she had a twinkle in her eye when she pulled me toward her and gave me a kiss.\n\nShe broke the kiss and our eyes locked. I smiled impishly and wrapped us in power. We appeared inland about a quarter mile right next to some hot springs. My heart constricted for a minute, remembering the last time I was here. But it was time for new memories, part of my new life. I led her down the steps I carved into stone and into hot water.\n\nWilla said, \"This is a great spot, I'm glad I am here with you.\"\n\nI smiled and stole a kiss, \"Me too love.\"\n\nWe took a moment to look around. We were in the middle of a small rocky hill that was surrounded by trees and nature on three sides. Behind us was a sheer rock wall and in front after the pools lip there was a twenty foot drop. We could see over the treetops and far out into the ocean, it was a gorgeous view. The air was fresh and the feeling of Willa's flesh against mine was making me tingle. Full of anticipation of the pleasure to come I pulled her in for another kiss and the world around me disappeared.\n\nWilla kissed along my jaw line and onto my neck, I licked my lips in anticipation as her fingertips traveled down my stomach, my core tightened as I lost myself in the sensations she was causing while I returned the favor, exploring her supple silky skin. \n\nOur breasts kept rubbing against the other's as we kissed and necked. Our fingers explored the depths of our molten cores as we raised each other toward blissful ecstasy. Our moans and little gasps mixed as we kissed desperately while taking quick shallow breaths. The intensity drove me wild as Willa's fingers pleasured me until I reached my height and fell into explosive bliss.\n\nI did my best to continue my ministrations to her body and she followed me over a few seconds later. My warm silky channel gripped her fingers desperately as I rode the pleasure. I gasped as the pleasure released control of my body back to me and held her close, kissing her neck as I did my best to extend and intensify her bliss.\n\nWe kissed softly and just held each other, once again acknowledging the beauty surrounding us.\n\n\"Room for a few more?\"\n\nWe looked to the side and saw we had a little audience, I wondered how long they'd been there. Willa blushed, but I just wondered why they waited.\n\nI said, \"Of course.\"\n\nVince got in, his cock sticking straight out, followed by Amy, Lisa, Leanne, Kim and Stacy. I didn't see Tara, and that kind of surprised me. Although, I didn't see Jason either, I though speculatively. Stacy sat on one side of me, and Leanne plopped down between me and Willa.\n\n\"So did you enjoy the show?\" I asked with an impudent grin.\n\nVince grinned and said, \"Hottest thing I've seen in a long time.\"\n\nI shook my head in faux sadness, \"Poor Vince, all hot and bothered, and surrounded by seven beautiful naked women. What do you say ladies, someone want to help him out?\" I asked teasingly.\n\nKim actually looked regretful when she said, \"I would, but it's too soon.\"\n\nI was pretty open sexually, more so than ever before with this polyamory thing we all had going on, but I didn't think I could do it in front of Amy, and I was hoping the same was true for her. I had raised her, it would just be too... weird. I was hoping someone would step up, because I was feeling naughty and wanted to watch it. After all, turnabout is fair play, and I liked watching as much as I did being watched.\n\nLisa stood up and walked over to him sassily and straddled his legs facing him.\n\nVince opened his mouth, an unsure look on his face. He was probably going to ask something dumb, like if she was sure, but she pushed a finger against his lips before leaning in and kissing him. She arched her back, her long black hair flowing down the curves of her body as she swiveled her hips and ground her heat against him.\n\nThey looked so damn hot together. I closed my mouth and moistened my lips, enjoying the show when I felt Leanne's hand caressing my inner thigh, teasingly brushing my labia softly as she traced circles. I moaned softly at her touch, but kept my eyes on Vince and Lisa as she rose slightly, a gasp escaping her lips as she lowered herself on his hardened member. I moved my hand onto Leanne's leg and traced figure eights across her silky smooth skin, slowly working my way down to her inner thigh. \n\nHer fingertips found and separated my labia and she gently flicked my clit before running her fingertips up and down my swollen slit. I watched Lisa grind herself on Vince, her body looked so sexy as she rode him, the end of her hair, floating on the steaming water. Leanne's fingertips found their way into my tunnel, her palm pushed into my clit as she curled her fingers to rub my g-spot.\n\nI almost jumped when I felt a hand on my other leg. I looked over at Stacy, the new witch I hadn't even spoken to yet. She had a question in her warm hazel eyes. I didn't even know her, but I was caught up in all the sensations, and lust seemed to permeate the area. I smiled shyly, as absurd as that sounds, and put my free hand on her leg before returning my gaze to Lisa and Vince.\n\nIt was almost a surreal experience as I watched two people I love make love, while I pleasured two other women, one a stranger, as they both pleasured me. I didn't know it then, but Stacy would join us one day in love, but that first day we were just caught in the tide of lust as we shared intimacies.\n\nI'd never forget that first trip we all took to the beach together, adding others to our circle and where Vince first got to make love with Lisa and Leanne. It had seemed impossible to me that this could possibly last, that none of us would go down in a destructive fit of jealousy at some point. But it never happened. I don't know if it was the witch rituals and other magic we shared, or the need for Vince to have multiple partners that we all supported, maybe both, or a mix of the two and some quality we couldn't quantify or even identify.\n\nI just knew it was a wonder and a blessing that I'd never take for granted...\n\nChapter 15 - Vincent and Anise\n\n*** - Vincent\n\nWhen we all got back from the beach everyone was exhausted, except me. I was bursting with energy and just about bouncing off the walls. I had gone from famine to feast, but I wasn't about to complain. Tara must have made a connection to Jason, because they left together. We were going to head back to my house as a group, with just Stacy as an addition, but Kim had a strangely reluctant look on her face. I asked her what was up.\n\nShe said, \"I would have liked to help this morning, although I guess it wasn't shifter business... Still, you helped the witches and sorcerers. I'm reluctant to allow you out of my sight, you seem to be at the center of everything going on.\"\n\nI shook my head, \"And here I thought you were going to miss me.\"\n\nShe stepped up so we were almost nose to nose, her voice seductive, \"Who said I wouldn't? You know the rules though, you want me to come home with you... make me,\" she growled out the last two words and somehow made it sound sultry.\n\nI swear these females would be the death of me.\n\nI sent a message to Amy, to have Anise take the rest of them back to the house, that I would meet them there. At the same time I glared at Kim while surrounding us both with shadow, moved us to my bedroom and held her with my power, pinned helplessly against the wall. \n\nShe was glaring right back, her eyes golden. She looked so incredibly sexy mad, but I wasn't stupid enough to tell her that.\n\nI said with just a bit of steel in my voice, \"As fun as this fight will be, it won't be nearly as fun since it's too soon for us to share a bed again. If I release you will you behave?\" \n\nShe looked like she wanted to rip my head off, but she nodded curtly.\n\nBut when I let her down, she backhanded me, hard. She may have been a beautiful petite oriental woman, but she was a werewolf. I went flying across the room and slammed into my dresser. Since I had sensed truth, it was clear her version of behaving wasn't nearly the same as mine.\n\nI said angrily, \"What the fuck was that for!\"\n\n\"Idiot,\" she said scathingly, \"Why did you not call me this morning and ask for my help. I had your back the other day did I not? You have proved your strength to me, you are worthy in that way, but I will not be a simple fuck, a weekly visit to bury your cock in my warm flesh and feed on my soul. So which is it, are you simply thoughtless, or do you truly think that little of me?\"\n\nI was speechless and the anger drained out of me, I recognized the hurt pride beneath her anger and wasn't sure what to say. I did care for her, I wouldn't have gone back to her a second time if she didn't mean anything to me. Finding warm flesh was never one of my problems.\n\nFinally I got out, \"I'm sorry, I didn't think. But it wasn't out of disregard for you, I didn't recognize the significance of your presence yesterday, I thought you were there to support your alpha.\"\n\nI hoped I wasn't digging myself deeper and smiled tentatively at her.\n\nI softened my voice, \"Kim, you will always be welcome in my home, and I promise to let you know the next time I need to knock heads together, if at all possible.\"\n\nShe walked across the room, \"If possible? Make it possible,\" she demanded.\n\nI replied trying for a reasonable tone, \"I meant if I am attacked at my home, and you are not here, it isn't as if I can wait.\"\n\nHer eyes softened and she rubbed my cheek where she had struck me, then she leaned in and kissed me softly on the lips. Werewolf chicks were nuts, but so, so, worth it I thought, as I kissed her back.\n\nMaybe I was a little twisted, between Kim and Amy it was apparent I liked the abuse, or perhaps I just liked a challenge. I decided on the latter, since that sounded better. She broke off the kiss and stepped back.\n\nShe said, \"Good, I will stay here when I am able, some nights I must roam my territory and hunt with the pack. If there is too much time in between runs... I get cranky and unreasonable.\"\n\nShe smiled at me mischievously, as if knowing exactly how ironic that last statement was, and we headed downstairs where we found everyone else had arrived. They all had amused looks on their faces and I looked suspiciously at Amy, wondering if she had seen through the link and reported everything.\n\nMy suspicions were confirmed when Lisa and Willa each took one of Kim's arms, and took her on a tour to claim one of the empty bedrooms. It was getting late and over a half hour or so, they all trickled off to bed with the exception of Anise and myself. \n\nAnise said, \"Want to learn some more? I know a few useful tricks that you could learn quickly enough I think, to make a difference. We can always work on the long term stuff after the danger passes.\"\n\nI smiled, \"That sounds great.\"\n\nWe worked on some techniques together, but it didn't take long for us to call a break and race for one of the bedrooms. The rest of the night was a cycle of teaching, and sex. It was our magic, the way it intermingled, seeming to have a desire to join apart from us. No matter how sated we were after sex, it didn't take long for our libidos to be reignited and we answered the need.\n\nIt made learning magic from Anise even better.\n\nBut then the moment we had both dreaded and anticipated came to pass. One of my ghosts interrupted us and we moved quickly. Anise woke the rest of the house while I was briefed. Shortly, we were all wide awake and assembled in the living room. I took a moment to fill May with enough energy so she could inform the alpha, and a few other ghosts to inform the rest of Willa's coven, the second coven, and the vampire allies we had freed, of what was coming.\n\nI took a deep breath and told them what I knew, \"Silas is coming down from the North, he has over sixty vampires with him, and they all have protections. I don't know if they are strong enough to stop me or not. Either way it will greatly slow my efforts, and I would be overwhelmed without help. I could use my demonic powers instead, but there is something to recommend about turning the vampires and having them on our side. Eventually the advantage would shift to us. Plus, about half are new vampires, and probably not in control of their thoughts, much less their actions.\n\n\"Unless we want to slaughter them, we need delaying tactics to give me time to take them. It may come to that anyway, if a strong enough coven is behind it.\"\n\nWilla snorted, \"They'd have to be.\"\n\nI grinned at her and said, \"There is more. I don't know where he found one, or if he is paying him but there is a warlock accompanying the vampires. He has two demons with him already, we don't know if he is powerful enough to control more than that or not.\"\n\nAnise interjected, \"He is mine. I doubt he could control you, since you are only half, but I bet he could cause you major problems, and he will be warded from demon magic.\"\n\nKim said, \"We should go to the council chamber before deciding on rolls, otherwise we'll have all different plans and it will be a mess. Brandt will want in on this, and unless I miss my guess whoever the vampires decided on will too.\"\n\nI said, \"Good point, I just don't know how much time we have, or how fast Silas is moving. If at all possible we should try to intercept out of the city.\"\n\nI nodded to Anise, and she took all of us to the council chamber.\n\nIt didn't take long, maybe ten minutes to make a plan. My turning of his troops became the center of the plan, so Amy and Kim, along with most of the witches, vampires, and werewolves would cover me, doing as little damage as possible while I took over the enemy one by one. I was glad to see no one wanted to slaughter sixty beings just to stop one psychopath.",
        "Anise was taking Willa, Lisa, Leanne, Stacy, along with five other witches and a few vampires and werewolves.\n\nHer team would try and contain the warlock and demons to a limited area, while she took them out. I didn't like that plan all that much as it had her fighting pretty much on her own, but Amy elbowed me hard when I tried to question it.\n\nShe said in my mind, \"Trust my grandmother, she knows her limits, and would not throw away her life with all this help surrounding her. She only requests the witches help so the enemy can't run away.\"\n\nI had no choice but to acquiesce. I could feel Amy's absolute confidence and that did make me feel a bit better.\n\nAfter checking on Silas's location, we determined we had barely enough time to meet them right outside the city. We didn't have enough power to transport all of them, so the vampires and the faster werewolves started running. Anise and I took all the witches, and what werewolves we could, and transported to right outside the city.\n\nI felt nervous waiting, but we had left enough of a buffer that our vampires and werewolves arrived a few minutes before Silas and his army. It was still dark out, but the witches were ready to handle that at the right moment.\n\nI felt a strange calm descend on me as I sensed the first vampires come into range of my magic. I was glad the spell worked just as good in a stressful situation as it had in bed with Anise. She had told me I'd eventually learn to do this on my own, with just my will, but how important it was to keep a calm mind while in battle. It would be deadly to worry about my companions at this time, I could deal with it after, right now all that mattered was neutralizing the enemy.\n\nI sent out a shaft of power at the first vampire I saw, it didn't penetrate and I ramped up my power until it broke through. After a moment, he had new orders and jumped the vampire next to him, holding him still until I could get to him. I was surrounded and protected by vampires, werewolves and witches alike so I could concentrate on my task.\n\nThe irony that this community was now relying on and supporting a necromancer was not lost on me. For the first time in my life I felt truly welcomed, it was not just me standing alone, or even in a small exclusive group. I was resolved not to let them down and started transforming as quickly as I could, but some were getting close enough now and I heard the fighting surround me...\n\n*** - Anise\n\nI watched, trusting in others to protect Vince as I extended my powers, scanning. I could feel them in the distance, the magic from the demons was similar in type, but the flavor was different, full of bitter rage, hatred, it felt so discordant against my aura.\n\nI took a deep breath and hoped this would work. I had thrown the plan together on the spot after hearing about the warlock, and the witches had been dubious, but supported me. It would take perfect timing, the witches couldn't hold the demons without a circle, and that meant a circle needed to be inscribed into the ground.\n\nHaving found them, I didn't waste any time, we needed to attack first, if we waited and they split up we would have no chance at containment. I wrapped the witches up with power and we teleported. Even for me it was difficult, I landed almost amidst the enemy, scant yards away, and I placed the nine witches in a circle around them at the same time.\n\nI quickly used earth magic before anyone could react, immediately a circle of containment rose up out of the ground surrounding us. The symbols and the unbroken line of the circle were perfect. Of course, I could only do the preparations. I heard the witches chant a single word in unison and the power of the circle coming up around us washed across my senses.\n\nI grinned, it had worked. Demons were very fast, but the shock of us appearing out of nowhere had momentarily frozen them. There were three demons now, and the warlock. One of the demons growled and jumped at the closest witch, but rebounded off the ward.\n\nI raised my power, making it manifest, and surrounded myself with solid armor, and a gleaming white sword in each hand. I had no doubt the demons could resist the light of my power, it would take the concentrated manifested form of swords to cut them down. Especially when it was three against one. Still, I chose to speak once their predicament sunk in.\n\n\"Warlock, you have violated the ancient laws. Explain yourself and withdraw, or pay the penalty.\"\n\nWarlocks are few and far between, because most of them were eradicated, their blood lines few and scattered. There was a time in the distant past when warlocks had conquered their neighbors and practiced human sacrifice with their almost unstoppable demon slaves. \n\nWhen they were thinned enough, they had enough sense to back down and accept limitations and codes of behavior. One of those was to not conquer other cities. Really, what it came down to, is they were to use their power to guard the world from demons, not to use them to conquer.\n\nHe snorted, \"You seem to be all alone, against three demons and me?\"\n\nHis voice became commanding, \"I will deal with the circle, kill the angel.\"\n\n*** - Vincent\n\nI had about twenty done, but despite my feelings still being suppressed, the sight of the torn up bodies around my protection detail concerned me. I also hadn't seen Silas, although through the vamps I'd taken I knew that he was here, somewhere behind his lines. I sent my ghosts to find him, all of them. I swore to myself he would not escape to try again.\n\nI needed a way to be faster, it was taking too long. That's when I remembered Krista's paralyzing spell. It hadn't stood up to my demon magic at all. The amulets blocked my necromancer magic forcing me to use raw power to overwhelm them, but what if I used both in concert?\n\nI sent a pulse of shadow at the next vampire, followed by my necromantic power. Less than a second later, the vampire was mine. My pulse had worked, my demonic magic shattering the ward on the amulets using minimal power. I started to take them three times faster, and even started to have lulls in the attacks. This wouldn't take much longer...\n\n*** - Anise\n\nI moved forward before he finished speaking his last word. Slashing into the closest demon. My sword was deflected by the demon's claw surrounded in hardened shadow and I had to parry his return attack, spinning away to deflect his greater strength. The three demons jumped for me at the same time, but luckily mostly did nothing but get in each other's way. Demons didn't really fight as a team, they'd much rather kill each other. Usually they were split up and sent out by the warlock, and that's probably why I was still alive.\n\nI had been counting on this, as I weaved in and out of them, keeping them bunched up as I weaved my swords together, striking when the opportunity presented itself. The first two were down, killed, within twenty seconds. Ironically I was in more danger now than at the beginning, this last demon had a clear field and no more comrades to trip over.\n\nHe approached me cautiously and we exchanged a quick flurry of strikes that moved so quickly they would be outside human perceptions. He was good, but he had never faced anyone like me before. He was used to the quick and easy slaughter of humans. Still, I wasn't overconfident, I fought him patiently, as if I had all the time in the world, and studied his style.\n\nHe was getting angrier, and angry fighting led to mistakes. I led him into a new exchange and he repeated his last attack. Instead of a parry I dodged the overhand slash I knew was coming and spun my other sword, taking his arm off at the elbow. His head followed quickly after.\n\nThe warlock looked up as the silence alerted him the fight was over. His haughty visage changed to disbelief as he saw me standing there alone. There was no reason to talk, his life was forfeit by law. He had powerful wards, maybe even powerful enough to block my sorcery. I didn't bother to find out, moving at him with speed I took his head before he could blink...\n\n*** - Vincent\n\nThe fight was pretty much over. I had taken over at least forty vampires, plus the thirty we started with, so we outnumbered the remaining by a great amount, they were all subdued on the ground, safely contained until I could get to them. It would take some time to sort out the bad apples, but once the compulsions were removed I imagined Chicago would have a fairly large vampire population.\n\nSilas was moving rather quickly north, trying to escape again. What he didn't know is he was bracketed by just over a hundred ghosts. I considered chasing him for a moment, but then I realized something. Without my emotions, a need for revenge, he just wasn't important enough to make the effort. Instead, I drew power from all of my ghosts, except three, to which I fed all that power.\n\nIn the end, Silas was torn apart by three empowered ghosts he couldn't even touch. A fitting end for the self important psychopath. I blew out a breath and released my spell. There were a number of werewolves dying, and some torn up vampires. I could sense Anise approaching and I smiled, knowing she was successful in her battle, and would shortly be healing our injured.\n\nI needed to get to work too, I had vampires to fix up, and some to question, either to release or kill.\n\nI felt a hard nudge at my leg, and smiled down at Kim. This is the first I had seen her as a wolf not attacking me for more than a moment, and I found her wolf form exquisitely beautiful. My life had changed so much in so short a time, but I felt really good about the future and thankful I had many good people to spend it with...\n\nEpilogue - Anise\n\n\"Purpose for your visit miss Clark?\" Brandt asked.\n\n\"Call me Violet please. I'm a sorceress and want to relocate here, I missed this place while I was gone, but... you know,\" she trailed off, obviously not wanting to bring up Silas or James.\n\nHe nodded, \"In that case welcome back to Chicago Violet, I urge you to contact councilor Anise if you need any help settling down.\"\n\nThe last year had been interesting, after that battle north of Chicago, things seemed to settle down. Violet would be the sixth returning sorceress since then, and there were five new sorcerers as well. Sixteen was still a small number, but my community was slowly growing to a respectable amount.\n\nI frowned at the next person, who was in town for a week. Apparently word was out and there had been an unfortunate influx of supernatural gawkers. I had silly visions of supernatural travel agents saying in an announcer's voice to visit Chicago, meet the council that hosts both a Nephilim and half demon. Ugh.\n\nI felt a kick and reached down and rubbed my stomach, whispering soothingly. I heard a chuff of laughter and looked over at Brandt apologetically but he was smiling indulgently. Vince and I were having twins, fraternal boy and girl. Although the council sessions were only a few hours, twice a week, they always got impatient when I sat in one place for too long.\n\nI looked back to the seating area and saw Kim looking at me knowingly, rubbing her own belly. All of us had been shocked when it happened. Even the alpha was at a loss, only a true werewolf mate should have been able to impregnate Kim. Somehow, Vince fit that bill. It was an amazing blessing, but I couldn't help think it was also a harbinger of grief.\n\nVince loved her to distraction. I guess some pains in life can't be avoided. At least he would have Amy, Lisa and I to help him when the time came. He would never have to wander alone in pain like I had, like I would never have to again. I put it out of my mind, it was at least a century and a half away, if not more, and I wouldn't let the future poison my present. Werewolves lived for a long time.\n\nWilla, Leanne, and Stacy still lived with us, but I wondered for how long. They loved Vince, Amy, Kim, Lisa and I, and I was pretty sure they always will. I would remember our time together and cherish every moment, but I was sure at some point they would want to start families of their own.\n\nThe three of them loved Vince of course, and he them, but it was more as intimate friends and lovers than a love of their lives thing. Lately they had come to look at my baby bump wistfully, and I knew they were feeling the turn of time.\n\nI felt another kick and smiled despite myself. Despite any reservations, I was sure this would be the most amazing lifetime I had ever lived, and for the first time over the millennia of my life, I couldn't see the end of it...\n\n*****\n\nAuthor note: Hope you all enjoyed it, there will be a sequel to this, same name next part on Literotica, but new characters. Not sure if you expected differently, but my plan for the chronicles were complete books on their own, with new characters in each book with their own separate and complete, but still connected story. You haven't seen the last of Vince or Anise, but they won't be driving anymore. Although, I don't have any ideas for book three yet and there is something else on my burners that I want to write."
    ],
    "authorname": "Magicwrtr",
    "tags": [
        "necromancer",
        "demon",
        "angel",
        "sorcerer",
        "sorceress",
        "witch",
        "vampire",
        "warlock",
        "fae",
        "werewolf"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/necromancer-chronicles-pt-03"
}
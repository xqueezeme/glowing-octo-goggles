{
    "title": "A Descent Ch. 01.5",
    "pages": [
        "Editor's note: this story contains scenes of incest or incest content.\n\n*****\n\nI had no trouble falling to sleep when I got home but staying asleep was a different matter. I kept dreaming of that lust filled face of Anna as she rode her husband staring at me. After the third time or so I had to jack off to relieve this itch. It didn't take long to reach my goal but when I did, I looked at the clock and saw it was nearly 6 o clock. I figured I'd just wait for Katya's wake up call, get round 2 in and then hit the hay; and so I waited. \n\nAnd waited. \n\nAnd waited. \n\nI texted her at 6:30 just to make sure everything was okay. Eventually I went back to bed to be greeted with more sensual dreams. I woke up at 9 or so and saw I got a text from Katya. She said, \"OMG you were so bad last night I slept right through all my alarms. I'm sorry I didn't get you up today. I promise I'll make it up to you.\" She followed it up by sending a selfie of her blowing a kiss in the mirror, naked. \n\nI spent a couple of hours dealing with business related errands. Despite the ease of work, it still had to be done or I couldn't go about as freely as I have been. There also was not a whole lot of money involved but certainly enough for a high school kid under his parents' roof. I finished around noon and I contemplated what I should do. I was very curious on how Katya was going to \"make it up to me\" for this morning but I remembered something that out trumped that. I had promised Anna to fuck her if she obeyed me, and obeyed she had. I texted her asking if she was alone. She responded quite quickly that she was, Katya had gone with her friend to aerobics class and then to hang out with her friend and Petyr was out golfing at least until dinner time. \n\nI texted her, \"I'll be over in 5.\" \n\nWhen I arrived, I was about to ring the bell when the door opened without prompting. Anna was there, wearing a thin silk robe I had not seen before. I stormed the door slamming it shut as I passed and embracing with Anna and thrusting my tongue into her mouth. She had given up any pretense of guilt and restraint at this point and opened her robe, letting her naked body be exposed as it fell to the floor. I mauled her breast as I pulled her in. She threw herself into me, grinding her pelvis against my leg. A slap could be heard as I quickly brought a firm hand onto her ass. It was followed by her leaning into me and calling out. \n\nI pulled my face away for her and whispered, \"Bitch, get on your knees.\" \n\nShe fell to her knees and glared upwards. Her eyes almost looked dilated and pleading. I unzipped my pants and pulled my cock out. As I did this, she arched her back as she sat up on her knees and took a deep breath of what surely must have been Katya's and mine combined scent. My cock was already hard and her eyes fixated on it immediately. \n\n\"Suck,\" I commanded. \n\nWith that it looked like a magic trick, instantly my cock disappeared and was replaced with blond hair before it reappeared again. She was doing her best to deep throat me but still not quite getting it. I took hold of her head and enjoyed the blowjob. I closed my eyes and focused on the sensation. As I did, a familiar sensation came to my attention, the music was still playing from last night. I loved this music and found myself thrusting into Anna's mouth to what very well may have been the beat. I had a wonderful idea at this moment that just had to be done. \n\nI pulled Anna's head off of me, she tried to reach in vain with her tongue before looking up. \n\n\"Follow me,\" I said as I walked up the stairway. She looked like she was about to stand before I tersely said, \"Crawl.\" \n\nI strolled up the stairs at a casual pace but still beat Anna up by quite a bit. She struggled up to climb on her hands and knees but looked enthusiastic like she knew what she was going to happen. I waited for her until she reached me at the top. She crawled a bit ahead of me towards her room but I said, \"No, this way,\" as I turned and walked into Katya's room. I sat down on Katya's bed, apparently, she makes it in the morning, and faced the door. Anna crawled in a few seconds later, still looking eager but also now with a sense of dread. She crawled up to me and I offered my cock again. She began to suck me off with zeal. \n\nI pulled her off of me again and said, \"You know, I think we should play a game. Until I leave this house you are to agree to everything I say. You are free to say no for any reason you like but that will stop everything we are doing today, and I promise you won't be satisfied. There is only one way for you to have your next orgasm by me, and for my approval, you'll need to do everything I say. Do you understand?\" \n\nLooking up at me she gulped and said, \"Yes.\" \n\n\"Very good,\" I said, \"Now I know you are fine with Katya and I correct?\" \n\n\"Yes,\" she said in a somewhat monotone manner. \n\nI smiled and said, \"Good, I'm glad. But I don't think she knows about us.\" I started stroking my cock before continuing, \"And it is kind of weighing me down. I don't want to hurt Katya, right?\" \n\n\"Yes,\" she said in the same monotonous way her previous 'yes' was. \n\n\"Then I think I need to come up with a way of telling her. Would you like to help me?\" I said. \n\n\"Yes.\" \n\nI smiled again and said, \"Good. I think what I need to figure this out is a little roleplaying.\" I stood up and walked to Katya's closet, opening it wide open. I saw quite a bit of familiar clothes and turned towards Anna. \"I think you will need to pretend to be Katya, but I don't think I actually ever had a serious conversation with her naked. Pick out something to wear. Make it sexy, that'll help me get in the right mood.\" \n\n\"Yes.\" \n\nShe looked like she was about to get up and stand out of reflex but crawled to the closet. I patted her head, rubbing it a bit before turning towards the bed and laying down on it on my back. I crossed my hands behind my head and turned to look at Anna. She seemed stunned, looking up at the closet, not quite sure what to do.\" \n\n\"I don't think I've ever seen Katya crawl on her hands and knees like a bitch in heat. Get up and hurry up with it,\" I said. \n\n\"Yes.\" \n\nShe got up and started sifting through the closet. She started with the underwear and socks, nothing approaching lingerie, (I'm assuming the red thong was hidden away somewhere), but it did look quite cute on Anna. She then picked out the purple sundress from two weeks ago. When Anna turned around her face was bright red. \"Do a slow twirl around,\" I said. The sun dress was a tight fit for Katya and with Anna it was certainly curvier then with Katya. Her breast seemed to barely be contained and the skirt portion tightly hugged her ass. \n\n\"Would you like to come here and suck my cock?\" I said. \n\nShe stared at my crotch and licked her lips before saying, \"Yes.\" \n\n\"Come, and suck.\" I said \n\nHer bashfulness gave way to lust as she forgot what she was supposed to be doing. She hopped on the bed and started alternating between licking and sucking. I relaxed and just listened to the music for a bit, trying to imagine if Katya actually would suck like this or if this was her mother's imagination. Eventually I decided the point was moot. \n\n\"Baby you are getting me so worked up, I just have to have you,\" I said as I pulled Anna off of me and repositioned to be on top of her. I asked, \"Do you want me Katya?\" \n\nAnna had a look of guilt in her eyes at the question, blushed, turned away from me as she said, \"Yes.\" \n\n\"Katya,\" I said, \"Look at me when you face me\" She did and I repeated my question. \n\nShe trembled for a moment, looked up, and uttered, \"Yes.\" \n\n\"Babe, last night was so hot. We gotta have sex like we did then. Do you want that?\" \n\n\"Yes\", she said a little relieved. \n\n\"Good, turn around on your hands and knees,\" I said as Anna presented me with her ass. The sun dress looked a little more like a cocktail dress with Anna but still incredible. I pulled up her skirt and basked at her ass. I leaned down to give her cheek a kiss. As I pulled myself up, I grabbed Katya's panties and ripped them off of Anna, utterly destroying them in the process. \n\nI then aligned my cock and thrusted into Anna's pussy as she gasped a little surprised about the pace of this role playing. \"I'm sorry babe,\" said as I set a steady pace of fucking her, \"I couldn't wait, you don't mind, do you?\" \n\n\"Yes,\" she cried out as she started heaving heavier and softly moaning. \n\nI got lost in the moment for a minute or two before I remembered my wicked idea. I slapped her ass hard and Anna shrieked out of the unexpected impact. I asked, \"You like that, don't you?\" \n\n\"Yes!\" Anna cried out. \n\nI slapped her ass again, I then asked, \"You like it rough, don't you?\" \n\n\"Yes!\" \n\nI was loving this, seemingly nearly as much as Anna, but I had to focus a little bit before continuing, \"I want to tell you a secret. Do you want to hear it?\" \n\n\"Yes!\" \n\nI slowed my pace, leaned forward and whispered in her ear, \"Do you promise you won't get mad and accept what I'll tell you?\" \n\nAnna moaned in frustration at the pace but said, \"Yes.\" \n\nI stopped my thrust leaned back upright and said matter of factly, \"I fucked your mom,\" before resuming my previous pace. Anna cried out as I could feel her cumming. \n\nI smiled and let her climax die down and her to get worked up a bit before adding, \"God, you came with me telling you that I fucked your mother. That must have worked you up, right?\" \n\n\"Yes,\" she gasped out, trying to reach her breath. \n\n\"You saw how she fucks, she's an animal. Guess the fruit falls far from the tree, doesn't it?\" I asked. \n\n\"Yes,\" she said, regaining a bit of composure. \n\nI was really worked up at this point and wouldn't last long so went straight to more questions, \"You know, after watching your mom last night and fucking her myself, that would make her a bit of a slut right?\" \n\n\"Yes!\" She moaned. \n\n\"And if the fruit falls close to the tree, that would make you a bit of a slut, right? \n\n\"Yes!\" she repeated \n\nI pressed down on her shoulder with my hand, causing her to collapse forward. Her ass still stayed in the air and gave me an ideal angle to pummel her. I started fucking Anna hard at this point and said, \"And slut's like nothing more than to service a man's cock, right?\" \n\n\"YESS!\" she cried out. \n\n\"And sometimes sluts need to be punished for their behaviors. Right?\" I grunted as I stayed focus on not cumming. \n\n\"Oh God YEEss!\" Anna screamed climaxing a second time. The heat from Anna was so intense I melted away as I felt my cock almost painfully stiffen as I pumped into her. We were both lost in the moment and were moaning and breathing heavily. I leaned up and laid on my back, against the headboard. As I did this, I unceremoniously pulled out of Anna and a small pop could be heard. Anna stayed still with her face pressed against the bed and her ass hanging in the air. It was actually a wonder in how she didn't topple over. \n\nAs I admire Anna's ass, I noticed my cum starting to drip onto Katya's bed but didn't say anything. Anna eventually stirred and looked back towards me. Still roleplaying, I said, \"Come on Katya, clean my cock off, would you?\" \n\nAnna just whispered, \"Yes.\" She turned around and I saw one of her tits had been dislodged from the restraining bra and dress, hanging out of the dress. She shoved her head into my crotch and started lapping up my dick. Before it had softened up too much, I pulled my cock from her mouth a couple of times to smear spit and cum on her face a bit. This is something I had yet to do with Katya and I think Anna caught on and looked up. \n\nI held her hair up and said, \"Anna you slut, that did help me a great deal. This felt incredible and I can't wait to do it again.\" I looked down at the ripped panties and said, \"You know, in the last two days Katya lost two pairs of panties. I think she may need to get some more, don't you agree?\" \n\nAnna pulled herself from my cock and said, \"Yes.\" \n\nI continued, \"She may ask you to take her. If she does, will you?\" \n\n\"Yes,\" she said without moving her head off of me. \n\nI then added, \"You know she has good taste, doesn't she?\" \n\n\"Yes,\" she repeated. \n\n\"I think then that you should get a pair of whatever she gets for yourself. Right?\" I asked \n\n\"Yes,\" she said still lapping away. \n\n\"Good, now about your husband. I think you may have worn Petyr out last night. I want you to offer him a body massage, ending with his dick. When you get to his dick you are to assume the position you were in when you jack him off. I think you should continue whispering in his ear as you jerk him. Occasionally you will pause to ask him a yes/no question. The question should always be along the lines of, 'isn't this hot, don't you agree, do you want to hear more?' If he says. 'yes,' you can pick up the pace and when he is begging to come you will let him if he agrees to do some favor for you. You get to pick whatever that may be. He could go down on you or do the dishes, whatever. Do you understand?\" I ended. \n\nAnna paused for a moment staring into my eyes and said, \"Yes.\" \n\nI patted her head before pulling off of her, zipping up and getting up to leave. Before I got to the door, I became aware of the music once again, stopped and turned to her and said, \"This CD is amazing isn't it, you could just listen to it all the time?\" \n\nWithout stopping for an answer, I could hear Anna say, \"yes.\" \n\nI hadn't even gotten into my car when my phone went off. Katya had texted me a message. It said, \n\n\"Hey Lovverrboy, I told you I would make up this morning to you and I finally figured out a way to do it. Come to 4445 Laurel Pl at 7 o clock ;-^\" \n\nI vaguely remember that Anna had said Katya would be at a friend's house tonight but that was all I remembered. I was excited at the prospect of hooking up with Katya again but wasn't sure how it would be. Katya hung out with the crowd that liked to go out to parties but never seriously indulge. They seemed to look down a bit on the hedonism on display. Now Katya had always been a bit like that but her friends seemed doubly so, at the very least. \n\nRegardless, I was exhausted from Anna and took a nap before anything else ensued. I was still quite worked up over Anna and with Katya last night but sleep took me quickly. I was very relaxed and kind of floating in a vaguely defined patch of gray. I would occasionally here voices of people I knew but like what I am sure most dreams are like, they were mostly mundane things happening in my life, rather than life changing significance. A tune came into ear shot in this vagueness. It was just as hard to pick out details as the gray area I was in. I kept trying to remember more of the song, at least its title, but it was just on the tip of my tongue, like a sneeze that wouldn't come out. A ringing could be heard that came and went and came again. This tone was building and fading with increasing frequency and caused a building sense of anxiety. Eventually I felt myself plummeting towards the ground. I awoke, lunging up, as my alarm beeped relentlessly. I looked at the time and it was 6:50. \n\nI arrived at the address Katya texted me just a little after 7:10. It was a fairly unremarkable house compared to the others in the neighborhood. The only thing that seemed wholly different from this house was that it was devoid of cars in its driveway, except for Katya's. I approached the main door and knocked. Before my hand reached the door for the third knock the door opened. \n\nKatya was standing there in what looked like some borrowed clothes. She was wearing a black tank top that gave plenty of cleavage to anyone with sight. It exposed her mid-drift and highlighted her perfect waist. She also had a pair of black and white striped booty shorts that clung to her ass tightly. Her face lit up immediately and she looked like she was sweating a bit. The tank top was tighter than what I had usually seen on Katya and it made her breast bulge out a bit. \n\n\"Mallllll!\" she said and then, \"Come here quick,\" she said as she grabbed my hand and led me into what appeared to be the living room. She led me to the couch where she turned to face me, kissed me deeply, and pushed me onto the couch. I had landed on the end of the couch and Katya jumped on the remaining space on her handd and knees. She had managed to reposition herself and pull my dick out in no more than 3 seconds flat. My dick took very little time to harden and as Katya started sucking, it became hard like steel. \n\nWhile her enthusiasm was the same as always, Katya was not sucking as well as she had been in the last couple of weeks. It still felt great though and I placed one hand on the back of her head and the other started caressing her back and butt. I gave her ass a squeeze and then gave it a slap. Katya froze everything she was doing as she cried out. She never once took her mouth off my cock. After a few moments had passed I slapped her ass again. This time Katya didn't stop but moaned out as she wiggled her ass back a bit. \n\nKatya was clearly on a mission, to get me to cum. This blowjob had none of the considerations her previous ones did, she was just using her mouth to jerk me off. I noticed that she also wasn't masturbating as one hand had snaked around my back, grabbing me, as her other hand gently massaged my balls. None of this bothered me too much and I soon found myself transfixed on the blond hair bobbing up and down off my crotch and the black and white clad ass wiggling left to right. When I came, I had one hand gripping Katya's hair and the other one firmly on the back of her neck. As I started pumping cum down her throat, I held her in place until my orgasm had sufficiently die down. \n\nWhen I released my grip, Katya pulled up taking a deep breath, followed by a little coughing. She soon recovered, looked up at me and gave me a wicked smile. One of her tits had bounced out of her tank top but she quickly readjusted herself. \n\n\"I'll be right back,\" she said as she hopped off the couch and sauntered into the next room. It was at this moment where I noticed Katya had knee length socks on. She was gone for a moment but she returned with two glass cups in hand. She sat down next to me on the couch. \n\n\"White Russian?\" she asked. \n\n\"Sure,\" I responded. She handed me one and I raised it to clink with hers. \"Cheers,\" I said \n\nShe smiled and said, \"vashee zda-r\u00f3-vye.\" Her accent was spot on and I was pretty sure she had just spoken Russian. \n\nI had forgotten that she had been listening to the second language CDs. I remember seeing that those recordings definitely had a lot of Non-English in it. \n\n\"Did you just hex me?\" I asked as I winked at her. \n\n\"You wish,\" Katya said as she blew me a kiss, \"It just means 'to your health.'\" \n\nWe drank upon a second clink of the glasses. Now, I've never had a White Russian but it was delicious. It was basically an alcoholic chocolate milk drink. I could barely taste the alcohol but everything else was just perfect. Katya leaned into me and kissed my cheek and said, \"You have some catching up to do, this is my third.\" \n\nI took a deep drink, then turned my head and kissed her. We were going at each other at a much more casual pace but I am still surprised that neither of our drinks had spilled over. \n\n\"Ew,\" a voice from the edge of the room squawked out, \"Like, get a room.\" \n\nKatya pulled back and squeeled, \"Ass'hley! I just made the drinks, you got to try it. It's the best, don't you think so Malcolm?\" \n\nI looked up to see a girl at on the stairway and nodded. She was wearing a towel around her body and had another wrapped around her hair. I had remembered meeting Ashley a few times in the past but had no significant interaction with her. At first, I thought she looked annoyed but I came to the conclusion she looked a little distracted but I couldn't exactly pinpoint why. ",
        "\"You guys have met before right?\" Katya asked turning her head back and forth between Ashley and I. I nodded and Katya turned to me. She said, \"Ashley and I are gonna be roommates in the dorms. Here, let me go get you a drink,\" Katya said as she sprang up while handing me her glass before going off to the next room. \n\nAshley sighed, rolled her eyes and said, \"I'm gonna get dressed. Tell Kat we can hang out upstairs in a minute.\" \n\nI took another drink from mine and when that was empty, out of Katya's. I tried to get up but I didn't quite manage it and fell back down into the couch. The alcohol had certainly begun to affect my senses but not nearly enough to have me falling over. No, but when I landed back on the couch, I realized my problem, my pants were unzipped, with them sagging off of me and my dick was out. I placed the empty glasses down before adjusting myself and followed Katya where ever she had gone to. The next room appeared to be the kitchen. \n\nKatya was in the middle of making a pitcher portion of White Russians. She was facing away from me while she worked at the counter. I reached around her waist and grabbed her as I started kissing her neck. Her ass jutted out and started grinding against me. I whispered into her ear, \"This has been a wonderful surprise.\" \n\nKatya stopped dead in her tracks. She turned to face me with a yearning look and kissed me deeply. When we pulled back for air, she gave her wicked smile and said, \"You haven't even gotten your surprise yet.\" She turned around and continue with her mixing. \n\nWhen the drink was finished, we took three glasses and a full pitcher up the stairs. It was getting dark and none of the lights were on but it was still enough to see the lit-up rectangle of light peering through one of the cracks of the doors. I could hear music playing and it became more clear when Katya opened the door. \n\nInside was a room that gave off clear signs a teenager lived there, there were posters all over the walls, the bed was unmade, and there were probably more clothes on the floor then in the dresser. The color choices of this room were quite interesting. It was like two different bedrooms ran into each other to make a new one. The bed and dresser gave off a lot of white and pink. The computer desk, and the make-up stand were jet black. I kind of felt like I was seeing an archeological site showing the layers of Ashley's different ages. \n\nAshley herself came from the walk-in closet. She was wearing a nearly identical outfit Katya was wearing, though the colors were a little different, her shorts were navy blue and her tank top was white. I wasn't able to notice from before but now I could take in the sight. Her breasts were nowhere near the size and shape of Katya's but shapely for what she had. Overall, she was a lot skinnier than Katya but by all means very hot. Her hair was jet black, straight down to her shoulders with a set of bangs to give off an imitation of Betty Page. Her skin was pale and must have made her look like a goth if she wore all black, \n\nAt this point the song playing stopped and the next one that came on caught my attention. The last song and this one were both on my mix tape CD to Katya, and in this exact order. I didn't have much time to think about this as Katya had placed the pitcher and the glasses on the night stand. She then grabbed my hand and led me to the bed where we sat. \"White Russian?\" she asked. \n\n\"Of course,\" I said with much enthusiasm. Katya looked over at Ashley, who nodded, and she began pouring three glasses of the concoction. I took my glass when she handed it to me one and then reached across me to offer Ashley a glass. Ashley walked across the room, took the drink and sat next to me, toward the end of the bed. \n\n\"vashee zda-r\u00f3-vye,\" Katya said again, raising her glass. Ashley and I clinked glasses with Katya's, tried to say \"vashee zda-r\u00f3-vye\", settling on \"cheers\", and began to drink. I didn't realize it at first but I had drunk the entire drink in one go. I was feeling fairly drunk at this point and decided to lean back on the bed. As I did the next song came on, it was the next track on my playlist. \n\nKatya leaned back and rested on her side while she cozied up to me. She started kissing my neck and ear. I saw Ashley finish her drink, get up and get another drink before returning to her seat next to me. She looked a little tense, like she was trying not to look back at Katya and I, but clearly looking. \n\n\"Is this the C.D. I made for you?\" I asked Katya. \n\n\"Yes,\" Katya said, \"I was listening to it earlier this week when Ashley came over. She didn't seem to mind it so I left it on. Before she left, she asked if I could burn her a copy and I did. I think she was really moved by it because there is something she has been wanting to say to you.\" \n\nKatya pulled herself up, patted Ashley's shoulder and said, \"Don't you?\" \n\nAshley took a drink from her cup, finishing it in the process before she turned to look at Katya. She hesitated for a moment before sighing and saying, \"This C.D. is just so romantic, I can't get it out of my head. Kat told me how you've been hooking up but I didn't think much about it until I heard this. I wish I could have what you have, it's just, so, hot.\" \n\nAshley quickly got up and went to the night stand to refill her glass. As she reached for the pitcher, Katya leaned up and stopped her. Katya put her glass down and grabbed Ashley's hips. She turned Ashley so that she was firmly facing me and said, \"And what else?\" \n\nI am not sure if it was the White Russians or embarrassment but Ashley's face was bright red. She looked at me and said, \"I can't get the idea of you fucking out of my head. It is driving me up the walls thinking about you and Katya.\" She then turned her head away, towards the pitcher. \n\nKatya smiled at me and looked up at Ashley. She grabbed her chin and said, \"You know, if you ask nicely I think Mal might be willing to share. After all, we are not exclusive and he has some side skank.\" \n\nAshley gasp as she tried to turn her head until she found resistance from Katya and settled on darting her eyes away from us. I propped myself up and wrapped an arm around Katya and kissed her neck. I whispered in her ear, \"Was this how you planned on making up for this morning?\" Katya gave a sly smile and a nod. \n\nThe next track came on and it was one of my favorite songs. I looked up to Ashley with a skeptical look and said, \"Perhaps babe, but what's in it for me? After all, if I only fuck you tonight I will cum the same amount of times as if I fuck you and Ashley. That just sounds like more work to me.\" \n\nKatya grinned a Cheshire Cat grin and said, \"We'll make sure it is worth your wild.\" \n\n\"Perhaps,\" I said, \"but I think Ashley here has yet to earn this.\" I pulled out my cock and both their eyes fixated on it. It was only semi stiff when I took it in hand and gave it some long and slow strokes. \"Katya, can you think of any way she can earn my cock?\" They both were like deer in headlights, slightly and motionlessly starring at my cock. \"Why don't you start with a blowjob?\" \n\nKatya was shaken out of her daze. She reached up to Ashley shoulder, grabbing it and pulling her down to her knees. Ashley kept staring at my cock as it was eye level and inches away from her face. \n\n\"Well, this cock isn't going to suck itself.\" I said. \n\nKatya reached around Ashley's head and pulled her into me. As she did this, Ashley was finally broken out of her daze and started moving towards me on her own. She started licking my shaft up and down and I let go of my cock and leaned back a bit on the bed. Ashley's hand replaced mine and started stroking but I looked down and said, \"blowjob, not handjob.\" \n\nAshley adjusted herself to take my head into her mouth. She still held the base of my cock but wasn't jerking me off. I think I may have gotten spoiled dealing with Katya and Anna constantly practicing giving head because Ashley had set a new low standard. Her tongue stayed still and she hardly took more of my cock in her mouth, much less deep throat me. This with the obnoxious gagging sounds she made really dampened any enjoyment I may have gotten from the act. \n\nI grabbed a fist full of that jet-black hair and pulled her off of me. Without letting go I held her there, looked her right in the eye and said, \"You call that giving head? I bet you've given tootsie pops a better sucking than my cock.\" \n\nTears started to well up in Ashley's eyes. She tried to look away but her hair held her in place. She cried out, \"I'm Sorrryy! I've never done this before and I don't want to let you down! Please don't be mad, I'll do better, I promise!\" She then started whimpering a bit. \n\nI moved her head so she had to look up and said, \"Shhh, it'll be alright. Katya here can show you how it's done.\" I nudged my head towards Katya so she would slink down to the ground and turn around. She reached for my cock and started sucking with earnest. I leaned back and enjoyed myself for a moment or two. When I had collected myself a bit more I looked down. I saw Katya doing her usual stellar job. She was sparing no expense. Ashley seemed fixated on the scene in front of her and nearly still. She was shifting around a bit and when I leaned forward a bit more I could see why, she was frigging herself as she watched. \n\n\"Oh god, that feels good babe, but I think you may need to help Ashley learn. Tell her how to suck a cock properly,\" I said. \n\nWhat followed was Katya giving Ashley instructions on how to give a blowjob. She went into detail about moving her tongue around, how to relax her throat, and the importance of eye contact. This of course was interspersed with a lot of deep throating. After she explained that she went back to focusing her attention to the art of the blowjob. \n\n\"Katya, why don't we give Ashley a try, after all she has to prove she's worth being included in tonight's affair,\" I said. Katya pulled back and pulled Ashley towards my cock. This time around it was significantly better but still a distant third to Katya and Anna. As I watched Ashley struggle, a wicked idea crept into my head. \n\n\"You know Ashley,\" I said, \"You were clearly listening but there is still some things you could work on.\" I grabbed a fistful of Ashley's hair and pulled her off. I then said, \"Katya, show her how you swirl your tongue around.\" Katya leaned towards me and started sucking me off. This felt good but wasn't what I was aiming for. I grabbed a fistful of Katya's hair with my other hand and pulled her back off of me. \n\n\"No, I think she needs to feel what it feels like, do that tongue swirl, on Ashley's tongue,\" I said as I brought Katya's and Ashley's head towards each other. This was the first time I had seen hesitation from Katya unrelated towards her parents. \"Go on, show her. It will help her,\" I said to Katya. \n\nKatya pressed her lips against Ashley's and started to push her tongue passed Ashley's lips. The almost detached look on both their faces looked almost clinical as they were processing what was occurring. \n\n\"Come on Katya, you have to use some enthusiasm, just like you would with my cock. And Ashley, don't just sit there, practice that tongue swirl back,\" I said. They began to get into the exercise a bit more and started deeply kissing each other. \n\n\"You know, I was telling Katya that college is THE time to explore reality and find out who you really are. A lot of people experiment with new ideas, concepts,...women, I would really hate if either of you missed out. I think it would be a great idea if you two agree to do this exploration with each other in a safe environment,\" I said as I pulled both of their heads apart before asking, \"Don't you agree?\" \n\nBoth of the girls were darting their eyes between themselves and me. I didn't say a word or move but just starred at them, trying not to blink or move. They both looked up at me and rather surprisingly in unison said, \"Yes.\" I then brought Ashley's head towards my cock and she eagerly started sucking. Her technique has shown remarkable improvement since she first started but I wasn't paying too much attention. \n\n\"I think,\" I said, \"That when you two start this experimenting that one of you takes the lead and directs the other. This way there won't be any confusion about what you're doing. Katya, why don't you be the leader when you two experiment, and Ashley, you can follow Katya's plan.\" I pulled Ashley off of me again and brought it to Katya. They resumed what essentially was making out but not moving beyond that. \"Katya,\" I said, \"Show me how you will lead Ashley in experimenting.\" \n\nI let go of both of their hair and Katya took charge. She grabbed Ashley, pulling her tight into her. She leaned forward as Ashley reclined onto her back. I was presented a glorious view of Katya's ass. I was a bull who saw red as she slightly wiggled her ass back and forth as she kissed Ashley. I got off the bed and behind Katya. I was caressing her ass as she continued on. Eventually I couldn't wait any longer. I yanked down Katya's boot shorts and lined my cock up to Katya's pussy. \"God, I have to fuck you,\" I said as I sank my cock into her. Katya moaned out into Ashley's mouth. Katya broke her kiss with Ashley and arched her head back and cried out. I fucked Katya at an increasing speed until I was full throttle. I could hear both of the girls moaning now but couldn't quite see why Ashley was. Katya was getting very close to cumming and I just kept on advancing her towards climax. \n\nRight when she was about to enter it, I stalled and said, \"Naughty Katya, you can't leave Ashley Hanging. I think she earned an orgasm and I think she should cum before you do. I would do it myself but I would have to pull my cock out.\" \n\nI slowly inched my cock out of Katya and she cried out, \"Noooooo! Please let me cum.\" \n\nI leaned forward and whispered to her, \"How about this, why don't you two keep practicing your tongue swirl but only on a different part of the body. Now if only we can find the right part, what part of the female body most resembles a cock?\" \n\nKatya struggled with the edging and desperate to give an answer despite not being able to properly think. \n\nShe said, \"A nipple?\" \n\n\"Close,\" I whispered in her ear, \"But men have nipples and they have cocks as well.\" I snaked my arm around Katya's waist and to her pussy. I said, \"I think the clit is the most cock-like thing you two have,\" as I slowly rubbed her clit. I started slowly fucking her but just enough to get her moaning for more. \"You could take turns but I think Ashley should really go first before you cum or you could do something a little more efficient...\" \n\n\"Anything, PLEASE!\" Katya begged. \n\n\"Well,\" I said, \"You could lick her clit while she licks yours. That way you could cum faster.\" I pulled out of Katya completely and sat back up on the bed. Katya looked up at me and then back down to Ashley, who was still masturbating. \"Why don't you two come up here on the bed,\" I suggested. \n\nKatya was very quick to rise, in a desperate kind of way, but Ashley was sloth-like. I help her up where she kneeled only enough to slide onto the bed and turn on her back. Katya pounced on top of her and they locked into a 69. \n\nI got behind Katya and said, \"Now Katya, I will start fucking you again if you promise to make Ashley cum first.\" \n\n\"Yes, anything!\" Katya replied quickly. \n\nAnd starting fucking Katya I did. The first thing I noticed was that my balls rested on something that hadn't been there before. I wasn't sure what it was at first but I looked down and around to see my balls dragging back and forth across Ashley's forehead and nose. Everything was a bit of blur but beneath Katya and I, I heard Ashley moaning like Katya's tongue was the greatest thing in the world. It didn't take long for Ashley to cum and then I started fucking Katya in earnest. \n\n\"Keep practicing your tongue swirl, we have all night to practice,\" I said and they quickly returned to each other's clits. Perhaps it was the alcohol or Anna from earlier today but I had a surprising amount of stamina for what was turning out to be my first threesome. When Katya came for the first time, I didn't even bother to slow down, I was completely focused on my own pleasure. I loved the added sensation of my balls being slightly stimulated as they dragged over Ashley's face. When Katya came again, I lost my load and came as well, pumping stream after stream into Katya. Whatever was keeping my climax back broke like a dam and I felt like I was going to cum forever. \n\nWhen my orgasm subsided, I leaned forward to kiss Katya's neck. I tickled her neck but she never veered away. Eventually my cock softened and slipped out of Katya. I leaned back against the headboard and as I did so, my cock dragged across Ashley's face. I hadn't seen Ashley's face up to this point but she was an utter mess. Each time Katya came she sprayed directly on Ashley's face. Katya's juices were smeared across Ashley and it mixed with my cum that was leaking out of Katya over her. \n\n\"Ashley,\" I said, \"I think we found the most vital way you could earn your right to be here. Clean Katya.\" Ashley looked around for a moment, despite being underneath Katya, for some sort of cloth or towel. \"With your tongue,\" I said. Ashley somewhat shifted and then started lapping up any liquid on Katya. \"Katya, I said, \"Why don't you position your pussy so Ashley can have better access?\" Katya nodded and sat up, placing her pussy square above Ashley. \n\nKatya started moaning and squirming and I leaned forward to whisper into Katya's ear, \"It's ok to move a little to help her tongue, don't be afraid to grind against her even. I reach around Katya and gave Ashley's nipple a pinch. She screamed but that was soon overshadowed by what appeared to be Katya's quickly approaching orgasm. \n\nWhen Katya did cum, I could see more liquid pour down Ashley's chin. I pulled Katya up to the head of the bed with me. We both looked down to see Ashley just panting. I said, \"You did a great job on Katya.\" I pretty sure Katya was even more of a mess than before continuing, \"but I am still a mess, clean me up with your tongue now and make it fast.\" \n\nAshley managed to bring herself to my cock and started licking up the soft shaft and down to my balls. I turned to Katya and asked, \"Babe, you mind pouring me another drink?\" Within 10 seconds a full cup was brought within my reach and I took it from Katya. Ashley was actually doing a halfway decent job of licking my cock, with some practice she could actually develop some talent. \n\nAshley's cleaning session was stimulating me into round two and I was getting hard again. I took a deep drink before placing the glass to the side. I turned to Katya to see her starring at Ashley sucking my cock as she slowly masturbated. \n\n\"Do you think she's earned it babe?\" I asked Katya. Katya just stared at Ashley as she wetted her lips. \"I think she did,\" I said. \"Why don't we work out a way for you to keep practicing while I give you what you deserve,\" I said towards Ashley, \"Get on your back.\" \n\nAshley immediately disengaged from my cock and flipped onto her back, giving me great view of her smooth pussy. It glistened in the light and called to me. I moved in between her legs and pushed myself into her. She cried out as her eyes rolled back into her head. \n\n\"Katya, let her practice with her tongue on you,\" I said. \n\nKatya quickly got up and was kneeling on the bed. She mounted Ashley's head in a way you'd mount a horse. I started fucking Ashley harder as I looked up at Katya. She caressed one of her tits with on hand and grabbed a fist full of hair with the other. Our eyes met and I leaned forward to kiss her. Our arms locked onto each other's bodies as we enjoyed Ashley's action and body. \n\n\"Oh, Mal!\" Katya screamed as she came. ",
        "\"Katya!\" I called back as I thrust with even more effort. \n\nBeneath us you could hear muffled screams from the body below us. Katya's and my hands explored, caressed, and grabbed at each other bodies. We were entirely focused on each other, nearly forgetting Ashley. She was a source of our common pleasure, much in a similar way that two people may enjoy an amusement park simultaneously. I never let go of Katya as I moaned, \"I'm cumming!\" \n\nI pulled out at the last second and Katya's hand darted towards my cock, stroking it with vigor. Though I recently came you couldn't tell and it felt even better then when I was fucking Katya. I just kept cumming and cumming. Katya didn't ease up until she didn't feel any more pulses. When she let go, I leaned back against the headboard. Katya dismounted and laid on her side at the foot of the bed. \n\nIn between us laid a fleshy mess. Ashley panted out loud, staring off into space, oblivious to everything around her. Her face was covered in the mix of Katya's and my cum. Her body had streaks of cum running from above her tits to her cunt and her body had a sheen of sweat about it. \n\nKatya had a well satisfied look about her but I am not sure if was because of my satisfaction or hers. She coyly smiled as she slowly and absentmindedly played with her clit. \n\nI reached to the nightstand and picked up my drink. I looked to Katya, raised my glass, and said, \"vashee zda-r\u00f3-vye!\" We both laughed. \n\nThe rest of the night got a bit fuzzy. I am pretty sure I had too much to drink and definitely sure there were further rounds of both the drink and sex. When I woke up, I wasn't sure what was more worn out, my head or my cock. Katya was up before either Ashley or I and had thoughtfully made breakfast for the three of us. \n\nI don't think any of us were ready to go at it again but I did remind the two of them that Ashley should practice her tongue exercises as often as possible and that Katya would be the perfect coach. As they were making out Katya broke away and looked at me. She had a smile on her that I was beginning to learn to trust. She grabbed my phone and said, \"Mal, could you be a dear and take a pic or two?\" \n\nShe then went back to kissing Ashley as I took a few not so tasteful pictures. This did not evolve into more fun from the previous night as both Katya and Ashley had some things they needed to do but when they escorted me to the door, we agreed that we would need to do this again soon. I kissed Ashley and whispered. \"Thank you for being a giving host.\" I then turned to Katya and kissed her. As I pulled back, I whispered into her ear, \"Do not think I forgot, you broke your promise and showed someone else my C.D. that was made just for you. I'm gonna have to think of a way for you to make it up to me.\" \n\nKatya smiled and looked like she was more than up for the challenge. \n\nThe rest of the day was mundane and uneventful. I was unsurprisingly worn out and went to sleep fairly early. \n\nThe following week went by pretty much as I had come to expect. Katya came promptly to my house each morning to wake me up. On Monday morning while she was sucking me off, I was thinking about how Katya could make up for my violated trust and a plan began to formulate. She tried to pull off of me so she could try to fuck but I just shooed her with, \"Please babe, keep sucking. It feels amazing.\" \n\nThe plan finally came when I came into Katya's mouth. \n\nI told her, \"As part of your penance for breaking my trust you are not to cum until I give you permission, do you understand?\" \n\nKatya looked up and gulped, I wasn't sure if it was because she was eager to cum then and there, or if it was just what was left of my cum in her mouth. \n\nI said, \"You know, your mom has been really accepting of the some of things you have been hiding about, why don't you ask her to go shopping with you? You can get some clothes for school and replace those poor panties I couldn't wait to get off of you. I bet she'd even get a thong if you suggested she get one.\" Katya seemed to think about it for a second before agreeing I was right and said she would. \n\nLater that day, when I was sure Anna would be alone, I gave her a call. I had Anna divulge the details of her storytelling exploits and how husband had agreed to do a plethora of task. He agreed to do a few house cleaning chores and to organize the garage. Finally, she mentioned he agreed to cook once a week and I saw a way for my plan to come together. \n\nI said, \"Before your husband can come next, he has to agree to cook this Friday. A cookout sounds great. You'll tell him that Katya will invite me over to enjoy it and it'll be a fairly cool day so we can make use of your deck out back.\" I half expected her to hesitate but she eagerly agreed to. \n\nThe next morning Katya promptly woke me up. She invited me to the cook out on Friday before she began pleading with me to fuck her. \"PPPLLEEAASsse...\" she whined. I denied her but told her that if she behaved, she could cum Friday. Her eyes teared up a little but she nodded, she shifted her focus to sucking me off. Afterwards, realizing she wasn't going to get what she wanted, she kicked me out of her car and drove away. \n\nWednesday and Thursday played out in a similar fashion but I have to admit the quality of Katya's risqu\u00e9 pictures definitely improved. Gone were the selfies in the Bathroom, these pictures were well focused and in frame. The sexy goddess gloriously presented aside, these were well taken pictures. The rest of the day I spent working out details of how to enact my plan and got a few things that I thought I could use. \n\nWhen Friday came, I felt like I had fixed a race and was simply going to the racetrack to collect my winnings. I walked up to the door of the Petrov's house and stood outside for about a minute. This was partly to prepare myself and partly because I had become somewhat accustomed to Anna preemptively opening the door on my arrival. I rang the bell. \n\nAs the door cracked, the first thing that came to my attention was the music, it was the ambient music. For some reason it seemed to become a fixture of the house in my mind, kind of like the shade of paint or a ceiling fan. At this point it would have seemed empty or missing without it. \n\nThis philosophical musing abruptly ended with the sight in front of me. Katya first came into view wearing the purple sundress I had lasted fucked Anna in. She looked beautiful as always but her look that screamed hunger. She looked like she wanted to leap onto me but was restrained. As the door continued to open, I got an inkling why. \n\nAnna was opening the door and while Katya looked hungry, Anna looked starving. She was wearing clothing similar to Katya's, a white sundress that showed a great deal of her legs and a fair amount of cleavage. I almost imagined she was drooling at first but kept my cool. I stepped forward, hugging Katya as I gave her subdued peck on the lips. I then offered Anna a hug as well and she tried to not so eagerly accept it. As I moved in, I kissed her cheek before pulling back. \n\n\"Where's Pet-, Mr. Petrov? I asked. \n\n\"Daddy is getting the grill started right now,\" Katya said. \n\nWe went out back where Petyr was chopping some vegetables and preparing the grill. As he greeted me, I reached out to shake his hand. Something in his grip had definitely changed. I looked him in the eye and as I slightly squeezed his grip loosened. \n\nI asked, \"Man, I'm famished, when will dinner be ready?\" \n\nPetyr said, \"About 30 to 40 minutes, give or take.\" \n\n\"Perfect,\" I thought. \"Great,\" I said, \"you know it really is a lovely day, a bit chilly though. You know, I bet that hot tub would feel perfect right now. Who's in?\" \n\nKatya was quick to agree, \"OOH, that sounds super relaxing before dinner. Let me go change.\" \n\n\"Alright,\" I said before gearing my attention towards Anna. \"Why don't you join us, it'll feel relaxing?\" \n\n\"Alright,\" Anna said as if on auto-pilot. \n\n\"Oh, by the way, I really am digging the music you are playing, would you mind bringing out a boombox with it?\" \n\n\"Sure thing, let me change real quick!\" Katya eagerly agreed before she went into the house, quickly followed by Anna. \n\n\"I hope you don't mind, I didn't really think about this before coming over. I didn't bring a swimsuit,\" I said turning my attention to Petyr. \n\nHe avoided eye contact but said as he continued to prepare dinner, \"Well, you could use a pair of mine, I could ask Anna to-...\" \n\n\"Oh, you don't have to do all that for me,\" I said, \"I'm a boxers man. They're just like swim trunks.\" I smiled and looked at him. He didn't make eye contact but tried to none the less. I walked over to the hot tub as I peeled off my shirt, followed by my shoes, socks and finally my pants. As I was submerging myself into the tub and turning on the program for the hot tub, Katya and Anna emerged from the house. \n\nThey were both wearing the bikinis I saw them in when I came over a couple week back. Katya plugged in the boombox and then made a b-line for the hot tub while Anna walked over to Petyr. She kissed his ear while she whispered into his ear. As she did this her arm drifted down until she gave Petyr's ass a squeeze. I leaned back into the hot tub and sat in the middle of the side giving a great view of the deck and Petyr at work. \n\nKatya cozied up to me on my right side and I gave her a hug as I extended my arms back and out on the lip of the hot tub. Anna joined us quickly enough but sat opposite of us. I made a \"come here\" gesture with my left hand before saying, \"Your husband looks like he's doing an amazing job, I can't wait to eat. You should see him in action.\" I then patted down the empty space to my left. \n\nAs Anna came into position, I moved my hands down and into the tub. I found Katya's and Anna's thighs soon enough. There would have been no way for me to leave this tub without a highly visible erection but I was ready for this. I found Anna's hand and after what could only be called \"footsie with my hands\" for a few moments directed it to my cock, which had freed itself from the slit in my boxers. \n\nAnna didn't even hesitate and immediately started stroking me. \n\nThe moment to finally enact my plan had come, or was very nearly about to. I then directed my attention to Katya and whispered into her ear, \"You know, I think I've been rather hard on you. I think I have a perfect solution for me to forgive you. You seemed to really enjoy our little adventure with Ashley, I think we should have another but with my side skank.\" \n\nKatya licked her lips in a way that screamed desire as she nodded. \n\n\"Would you like to meet Anna?\" I asked. \n\nKatya eagerly nodded. I drifted my hand off Katya's thigh until I found her hand. I held her hand and squeezed it while my other hand went on top of Anna's stroking hand, covering it and directing its motion. I then brought Katya's hand on top of my hand that was directing Anna's. I looked back and forth between mother and daughter as they both tried to look nonchalant. My left hand snaked out in between theirs and went on top of my other one as mother and daughter came into contact with each other's hand while they stroked my hard cock. Both of their eyes bulged as they stared into each other's eyes. They never slowed down."
    ],
    "authorname": "Zaq123edcxsw",
    "tags": [
        "mind control",
        "hypnosis",
        "mother",
        "daughter",
        "threesome",
        "girl next door",
        "domination",
        "submission",
        "first time",
        "incest"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/a-descent-ch-01-5"
}
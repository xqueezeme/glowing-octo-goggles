{
    "title": "Life after the Lottery Ch. 64",
    "pages": [
        "Copyright LATL, 2019. No part shall be reproduced or re-posted on any other website.\n\nLife after the Lottery, CH. 64\n\nA few things come together\n\nTuesday morning Dawn and I were up at 4:00 getting ready to go to the airport. When we got out of the shower about 4:30, Samantha came into the bedroom ready to leave for the morning surgery with Dr. John.\n\n\"Be careful,\" she said as she kissed Dawn, then left.\n\nAfter some coffee, Dawn and I headed to the airport.\n\n\"I can't wait to meet Diane,\" Dawn said as I drove.\n\n\"I hope she gives President Wells a hard time.\"\n\n\"I think Linda has put her up to it.\"\n\nWe pulled into the airport and sat in morning traffic.\n\n\"Let me park, and I will go in with you,\" I said.\n\n\"Don't do that, just drop me off at the terminal.\"\n\nWe finally got to the terminal, and Dawn jumped out and grabbed her bag.\n\n\"I'll let you know when we will get back on Friday. Bye.\"\n\nDawn headed into the terminal, and I headed back home.\n\n*****\n\nWhen I walked back into the house about 8:00, Amy was in the kitchen eating breakfast. I grabbed another cup of coffee and sat with her.\n\n\"Did sis get up on time?\"\n\n\"Yes, she was heading out at 4:30 while we were getting dressed,\" I told her.\n\n\"She was up late reading up on anatomy.\"\n\n\"I think she wants to go to that lab this summer.\"\n\n\"She does. She is studying so Dawn will let her go,\" Amy said.\n\n\"Is your class going to be catching up in the cadaver lab?\"\n\n\"Yes, we are meeting some afternoons this week.\"\n\n\"Good. I think Dawn took care of the problem.\"\n\n\"James, did you say anything to Sam about going to medical school since we talked?\"\n\n\"No.\"\n\n\"I saw her studying the MCAT book this weekend.\"\n\n\"She needs to take that for the PA program.\"\n\n\"I'm sure she will ace that too,\" Amy said.\n\n\"You said Samantha didn't ask us about med school because she doesn't want us spending the money. If she could pay her own way, do you think she would go?\"\n\n\"Probably, but she can't do that.\"\n\n\"If something came up where she could, would you help her figure that out?\" I asked.\n\n\"Of course, but I don't see how. She won't let you give her money.\"\n\n\"Just keep an open mind, please. Do you know when she is taking the MCAT?\"\n\n\"Wednesday. James, how could she pay for school herself?\"\n\n\"Oh, I think there is something she doesn't realize that may present itself to her.\"\n\n\"What?\"\n\n\"You will see soon.\"\n\n\"Okay, I guess. I need to head to school,\" Amy said.\n\nAmy kissed me and left for school a few minutes later.\n\n*****\n\nI had been on the phone for a while talking to our attorney about the incorporation documents for the limo company. He told me to come and pick them up tomorrow morning. After I finished with him, I called Mr. Dain at the bank.\n\n\"Hey, Dr. Smith.\"\n\n\"Hi, Ian. I am picking up the incorporation papers for the limo company in the morning. What do you need?\"\n\n\"I need a copy of the Articles of Incorporation. Are you ready to start?\"\n\n\"Yes. Lori and I visited the limo manufacturers and have decided on one in St. Loius. We will be notifying them soon, so I need to finish all the bank paperwork.\"\n\n\"No problem. Everything is already set up, I just need those final papers. How much are the cars going to be?\"\n\n\"2.2 Million. I'll drop them by as soon as I can. I have told Lori if she needs business help to get with you. I'm sure you can help, or hook her up with someone that can. This is her show.\"\n\n\"Sure, no problem. How is the new store coming?\"\n\n\"It's moving fast. We are going to add an upscale men's store also.\"\n\n\"That will be nice. I will have an excuse to buy myself some nice clothes since the wife will be spending money for hers!\"\n\n\"We are shooting to have the men's store open March 1st.\"\n\n\"Linda mentioned a fashion show, can the wife and I get an invite?\"\n\n\"Sure, consider yourselves invited. It is two nights the week of Valentine's Day.\"\n\n\"I'll be looking forward to it!\"\n\n\"I am picking up the paperwork from the lawyer in the morning, I'll run them by after I pick them up.\"\n\n\"What time?\"\n\n\"Around 8:00.\"\n\n\"That sounds good. I'll see you then.\"\n\n\"Bye.\"\n\nI walked to the mailbox about 1:00, but what I was looking for wasn't there yet.\n\nI had gotten a text from Amy telling me she was eating at school and would be home about 5:30. Samantha came in about 3:30.\n\n\"How, did the surgery go?\"\n\n\"It was great! John and Keith were rebuilding a lady's jaw that had been in a car wreck.\"\n\n\"Did you get to help?\"\n\n\"Some. John was busting his residents' balls because they weren't interested. He made one step out, and he had me help him.\"\n\n\"I bet that went over well.\"\n\n\"John was mad.\"\n\n\"You learn all you can. He will need some good help.\"\n\n\"I have got to convince Dawn to let me go to that lab in the summer.\"\n\n\"If I remember right, it starts right after school is out.\"\n\n\"I'll be ready!\"\n\n\"Amy said you were studying for the MCAT. When are you taking it?\"\n\n\"Next Wednesday.\"\n\n\"How are you doing on the practice tests?\"\n\n\"No problem.\"\n\n\"Good. You know you can wait and take it later.\"\n\n\"I know. I thought I would take it now, and if I need to, I can take it again in a year.\"\n\n\"Amy sent me a text and said she would be home about 5:30.\"\n\n\"Okay. We are making you a nice dinner tonight,\" Samantha said.\n\n\"Linda and Rachel are staying Wednesday night.\"\n\n\"Great!\"\n\nI worked on my computer until Amy came home. She and Samantha went to work in the kitchen while I sat in the den working. I finished looking over the percentages of ownership Lori had sent me. I was plugging in the percentages and dollar amounts into a spreadsheet for stock shares.\n\n\"What are you two cooking?\" I asked, walking into the kitchen.\n\n\"Steaks...go away,\" Samantha said.\n\nI grabbed a beer and went back to the den while they cooked. I read until they came and got me at 7:00.\n\n\"Time to eat,\" Amy said.\n\nI went to the table with them and saw that they had made a nice looking steak dinner.\n\n\"This looks good,\" I said.\n\nWe ate and talked for about an hour. The two of them were enjoying being alone with me.\n\nAfter we finished, they insisted on cleaning without my help. The two of them came to the den about 8:30 and sat with me.\n\n\"That was a nice dinner,\" I said.\n\n\"Thank you. Do you want some wine?\" Samantha asked.\n\n\"I'm good.\"\n\nEach of them leaned into a shoulder.\n\n\"What are you reading?\" Amy asked.\n\n\"Abnormal Psych Journal.\"\n\n\"I have to take that next semester.\"\n\n\"You'll enjoy it.\"\n\nThe two of them stayed that way until about 9:30.\n\n\"You two ready for bed?\" I asked. I got smiles from both of them.\n\nI put away all that I was working on and followed the two of them up to my bedroom. We all took turns in the bathroom, getting ready for bed. Amy and I were in the bed waiting on Samantha. She came out and slipped under the sheets with us.\n\n\"Can I ask you two something?\"\n\n\"Of course,\" Amy replied.\n\n\"I'm not implying anything, but are you two enjoying Dawn not being here?\"\n\n\"I miss my wife, but I am having a good time...not implying anything,\" Samantha said, smiling.\n\n\"James, you know we enjoy being with the both of you, but it is nice to have you to ourselves,\" Amy said.\n\n\"I understand,\" I told them. \"What is your pleasure for the evening?\"\n\nThey both rolled to me and laid their head on my chest and held me.\n\n\"Just doing this,\" Amy said.\n\nI turned off the light.\n\n*****\n\nAmy and Samantha were up with me at 6:00, cooking breakfast.\n\n\"You two didn't have to get up early. I have to run by the attorney's office first thing this morning.\"\n\n\"We need to make you breakfast,\" Amy said.\n\n\"I can make my own breakfast.\"\n\n\"Do you know when Linda and Rachel will be here?\"\n\n\"I guess after work. We are meeting with the guy from New York about the men's store today.\"\n\nI sat while they cooked, then we were sitting and enjoying breakfast.\n\n\"Tonight, we are going to get Rachel to sleep with us so that you can sleep with Linda,\" Amy said.\n\n\"Are you two sure you are okay with that?\"\n\n\"Yes, you two need some alone time,\" Samantha added.\n\n\"Okay. What are your schedules today?\"\n\n\"I am leaving soon and will be home about 2:00,\" Samantha said.\n\n\"I have a class this morning, but I will be home after lunch. I need to work on a paper,\" Amy added.\n\n\"Okay, I'm not sure what time I will be home. I will text you,\" I told them.\n\n*****\n\nLater, I left and headed to the attorney's office and went in and picked up the paperwork.\n\n\"Oh, Dr. Smith, Mark needs to see you,\" his secretary said.\n\nShe went into his office, and he came out.\n\n\"Hey, James. Give this to your girls,\" he said, handing me an envelope.\n\n\"What is it?\"\n\n\"The rest of the paperwork for them to get their name changed and the court date.\"\n\n\"Okay, thanks.\"\n\nI left and headed to the bank. I got there a little after 8:00 and went up to Mr. Dain's office and went in.\n\n\"Hey, Dr. Smith.\"\n\n\"Hi, Ian. I have the paperwork.\"\n\n\"Good, I can finish everything for the taxes now.\"\n\n\"Hi, Dr, Smith,\" I heard his wife say from behind me.\n\nI turned, and she was sitting in one of the big tall chairs.\n\n\"Hi, Sondra.\"\n\n\"Ian said you were coming in this morning. I thought I would stop by and see if you had forgotten about us,\" she said.\n\n\"Oh, I haven't forgotten, just been busy.\"\n\n\"We have been waiting for you to have us over.\"\n\n\"Sorry, I have been all wrapped up in a few things.\"\n\n\"Are you still planning on going to the Bahamas with us?\" She asked.\n\n\"As far as I know.\"\n\n\"Well, we have good news,\" Ian said. \"We finally got my secretary and her husband to join us.\"\n\n\"That sounds promising.\"\n\n\"Dr. Smith, would you and your wives be okay with the two of them joining us in the Bahamas?\" Sondra asked.\n\n\"Is your secretary and her husband up for that?\"\n\n\"They will be by then.\"\n\n\"I am planning on having a business meeting one weekend soon with all of the people that are part of the store and limo business. I thought we could make a weekend out of it. Since you are a small part of our business ventures, would you two like to join us?\"\n\n\"Is this going to be a friendly business meeting?\" Sondra asked.\n\n\"Very friendly. We will probably have a cookout on Friday night, and anyone that wants to stay the weekend is welcome.\"\n\n\"I see,\" Ian said.\n\n\"How many people will be there?\" Sondra asked.\n\n\"My family, another couple, maybe the two ladies that are working on the store, and maybe some others.\"\n\n\"That sounds like fun,\" she replied.\n\n\"I think it will be. We were thinking that we should have a business meeting like it occasionally.\"\n\n\"Sounds like a good idea,\" Ian said.\n\n\"Dr. Smith, I thought I might make sure you want to have us over soon,\" Sondra said as she stood.\n\nI watched as she began unbuttoning her white lab coat. By the time she was standing in front of me, she was naked.\n\n\"Sondra, I have a pretty good memory. I remember the last time you were here.\"\n\n\"That's good. When Beth and her husband came to the house last weekend, we had a good time. All this week I have been asking Ian about you when we were fucking. When he said you were stopping by this morning, I ask him if I could come.\"\n\nShe grabbed my cock through my pants.\n\n\"He said I should come just to make sure you hadn't forgotten about us.\"\n\n\"Sondra, you would be a hard lady to forget.\"\n\nShe rubbed my cock as she looked up at me, smiling.\n\n\"I have been told that,\" she said as she began unbuckling my pants.\n\nI looked over her tanned body as she pulled my pants open and pushed them down. I had been fascinated by her long jet black hair when I saw her the first time.\n\n\"Sondra, you have hair like my wife.\"\n\n\"Ian likes it long.\"\n\n\"I do too. Dawn's is down to her ass.\"\n\n\"Does she ever cut it?\" She asked as she stroked my cock.\n\n\"Rarely. She is not supposed to cut it.\"\n\n\"Why not?\"\n\n\"Dawn is half Cherokee. The clan she is from is the long-hair clan, and they don't cut their hair.\"\n\n\"Sounds fascinating.\"\n\n\"She also has a very nice tan like you do.\"\n\n\"Our house allows me to lay out naked and sun.\"\n\n\"Ours does too.\"\n\nShe slipped to the floor onto her knees and slid her lips over the end of my cock as we watched. Ian and I watched her sucked on my cock for a while.\n\n\"Dr. Smith, Sondra asked me this morning if it was okay if you fucked her in my office.\"\n\n\"What did you tell her?\"\n\n\"I told her as long as I got to watch, it was fine.\"\n\n\"Good,\" I told him.\n\nHis wife stood and grabbed my cock.\n\n\"Perfect,\" she said.\n\nI watched her as she walked to one of the big chairs and put her knees on the edge and leaned into it as she looked over her shoulder at me. I admired her tanned tits as the hing down. I stepped out of my pants and walked to her. Her dark skin with all that black hair looked familiar.\n\nI took all of her hair in my hands and ran them down it and laid it all to her side as she smiled at me. Then I ran my fingers over her pussy lips and found them very wet.\n\n\"Oh, I'm good and ready. I have been all morning,\" she said.\n\nI grabbed my cock and leaned into her and placed the end against her wet lips. She smiled at me and winked, and I worked it between them and eased in slowly.\n\n\"Emmm, that feels good.\"\n\nI grabbed her tanned ass in my hands and held it as I pushed. She moaned softly as I slowly slid into her.\n\n\"Ahhhhh...yes...nice and slow.\"\n\nI kept sliding into her as she moaned. I finally hit bottom, and she moaned again.\n\n\"All of it, please.\"\n\nI held her ass tight and pushed.\n\n\"Ohhhh, fuck...yes!\"\n\nI pushed in hard until I had my cock buried all the way in her pussy.\n\n\"Emmmmmmm...yes...that's it...\"\n\nIan walked up next to us with his cell phone and started taking pictures. I slowly withdrew my cock as he took more pictures, then slid it all back into his wife.\n\n\"Ahhhhhh...fuck...yes!\"\n\nI looked at his hot wife as I slowly slid my cock in and out of her as he took close-ups.\n\n\"Mr. Dain...\" we heard as his door opened. \"oh...sorry,\" his secretary said.\n\n\"Come on in Beth,\" Sondra said. She smiled and closed the door and locked it.\n\nShe stood and watched as I slid my cock in and out of Sondra.\n\n\"Sondra, it looks like you are having a good time,\" Beth said.\n\n\"Oh, I am...why don't you let Ian do you while you watch,\" Sondra replied.\n\n\"Oh...okay!\"\n\nI watched Beth as she unzipped her skirt and let it fall to the floor. She pushed her panties down and stepped out of them, then got on the other chair like Sondra. Ian walked behind her and started fingering her pussy.\n\n\"Beth, we told Dr. Smith that you and your husband may join us in the Bahamas,\" Sondra said.\n\n\"Oh, that sounds like fun, but I will need to talk Allen into that. He's still getting used to what happened last weekend.\"\n\n\"Have you told him yet that Ian has been doing you in the office?\"\n\n\"Oh, no...not yet!\"\n\n\"Maybe I should stop by the house then and explain it to him,\" Sondra said.\n\n\"He would like that.\"\n\n\"Have you two talked about last weekend much?\" Ian asked as he worked his fingers in her.\n\n\"All week! That is all we have talked about while we have sex!\"\n\n\"Good,\" Sondra said. \"I'll give him something else to talk about after I come by.\"\n\nBeth was looking over and watching my cock slide in and out of Sondra.\n\n\"Beth, if you go to the Bahamas with us, you will enjoy Dr. Smith's huge cock. It is much bigger than Ian's.\"\n\n\"I can see that.\"\n\n\"Make sure you tell Allen he has three wives.\"\n\nI kept working my cock in her as she watched her husband. Ian finally got behind Beth and grabbed his cock and worked it into his secretary.\n\n\"Dr. Smith, do you have your cell phone?\" Sondra asked.\n\n\"In my shirt pocket.\"\n\n\"Would you take some pictures, please.\"\n\nI took my phone out and turned the camera on.\n\n\"Oh...I don't know about that,\" Beth said.\n\n\"Loosen up, Beth,\" Sondra replied.\n\nI held my cock inside of her while I took some pictures of her husband fucking his secretary. Beth finally started laughing about it. I also took a few pictures of Sondra before I went back to fucking her.\n\n\"I'm happy to know you don't mind some pictures,\" I said.\n\nIan was watching his wife being fucked as he worked his cock in Beth. I grabbed her ass and started working my cock in her harder.\n\n\"Ahhhh! Yes, fuck me!\"\n\n\"Keep it down, honey.\"\n\nSoon I was thrusting into her in long hard strokes. She was struggling to keep from moaning too loud. I kept going for a long time as I looked over her hot body.\n\n\"Ohhh, fuck! I'm coming!\" Sondra exclaimed.\n\nHer back started arching up and down as I felt her pussy squeeze my cock.\n\n\"Ahhhhhhh!\"\n\nI held her tight as I drove into her as she jerked.\n\n\"Fuck!\"\n\nShe kept moaning as I kept thrusting into her.\n\n\"Oh, I'm coming!\" Beth exclaimed.\n\nI watched Beth as she jerked while Ian drove his cock into her.\n\nIan and I kept jamming our cocks into the ladies as they moaned. We took our time as they moaned and groaned for a while.\n\n\"Oh, I'm coming again!\" Beth exclaimed.\n\nIan sped up, and the two of them came together as Sondra, and I watched.\n\n\"Harder!\" Came from Sondra.\n\nI gave her what she wanted for several minutes.\n\n\"Oh, fuck! I'm coming! Come in me!\" She exclaimed.\n\nShe started coming hard, and I jammed my cock in as far as it would go.\n\n\"Ahhhhh!!\"\n\nWe heard her pussy gushing as I started filling her full of cum.\n\n\"Oh, fuck, yes! That felt good!\"\n\nHer head was hanging down as I slid my cock in and out slowly.\n\n\"Oh...wow...\" she moaned.\n\nIan was still standing behind Beth rubbing her ass as he watched.\n\n\"Emmmm...\" Sondra moaned.\n\nI slid my cock out of her, and she slowly stood.\n\n\"That was wonderful,\" she said.\n\nIan slid his cock out of Beth, and she stood.\n\n\"Oh, Beth, you have cum running down your legs,\" Sondra told her.\n\n\"You do too!\"\n\n\"Take the rest of your clothes off,\" Sondra said as she helped her unbutton her top.\n\nOnce the two of them were naked, Sondra led Beth over to the sofa and soon the two of them were in a 69 finishing each other off. I had slipped my pants back on and was putting everything back.\n\n\"Ian, you enjoy, I have got to run,\" I said.\n\n\"When do you think the get together will be?\"\n\n\"It will probably be the last weekend of the month,\" I told him.\n\n\"Okay.\"\n\nIan was taking pictures as I left to go to Linda's office to meet with our guy from New York. When I got there, she was already talking to him in her office.\n\n\"Hello, Dr. Smith,\" Walt said, and stood and shook hands.\n\n\"Hi, Walt. Are you ready to move forward on this?\"\n\n\"Oh, yes! I was surprised when Ms. Williams called last week.\"\n\n\"I'm sure she has told you about the store.\"\n\n\"Yes, it sounds like a great idea. I think you will do well.\"\n\nThe three of us sat in her office and talked until noon.\n\n\"I need to be on a conference call for the next hour. Why don't you two go to lunch, and you can take Walt and show him the store,\" Linda said.\n\n\"We can do that. How about meeting again about 2:30?\" I asked.\n\n\"Sounds good.\"\n\nWalt and I headed to my car.\n\n\"Dr. Smith, I didn't realize Ms. Williams was part of your project. I was surprised when she called.\"\n\n\"I was tied up with another project, and she asked me if she could call you. She wants to move quickly on opening the men's store.\"\n\n\"It sounds like it.\"\n\n\"Is it too soon for you?\" I asked.\n\n\"Oh, no.\"\n\n\"You heard her plan. The store building will be ready about the end of December. She wants to have all the fixtures and inventory in so it can be moved into place between Valentine's Day and the 1st of March. You think it can be done?\"\n\n\"Let me see the store.\"\n\nWe stopped and ate lunch and talked some more, then drove to the store. They were busy finishing the walls and ceilings.\n\n\"Looks like they are almost finished,\" Walt said.\n\n\"Not yet. Linda is finishing out the store in very nice woodwork that is going to take time. We can look at the drawings and designs this afternoon.\"",
        "\"Sounds like the store will have a nice look.\"\n\nWe went up to the third floor.\n\n\"This is big,\" Walt said.\n\n\"We will use half of this. The rest will be for the designers and the tailors. That will give us 5,000 square feet.\"\n\n\"That is plenty, Dr. Smith.\"\n\n\"Walt, you may as well call me James.\"\n\n\"Ms. Williams asked me if I knew a tailor that could work for us. I told her I knew two that were ready to retire that would like to sell their houses and move someplace cheaper and warmer than New York.\"\n\n\"If they are interested, we will talk to them. I think you will find that you can buy a lot of house for much less than you will get for yours.\"\n\n\"That would be nice.\"\n\n\"The two ladies that will be running the lingerie and swimsuit part of the store know a good realtor they can hook you up with.\"\n\n\"Where do you live?\" He asked.\n\n\"On the south side of town on 300 hundred acres.\"\n\n\"Wow. Wish I could afford something like that.\"\n\n\"Land out that way only runs about $10,000 an acre if you want to look and build.\"\n\n\"Maybe later.\"\n\n\"Walt, I can finance this project because the wife and I hit the lottery big several years ago.\"\n\n\"Great.\"\n\n\"But, I have no interest in being involved in the day to day operations of the store. That will be your job. I feel like having someone with your experience owning half will make a big difference in how it is run. This is going to be your show as long as it is profitable.\"\n\n\"Well, James, I have always wanted to have my own store. Doing that in New York would have been impossible. I think that with high quality clothes and a lower cost of living, we will be very profitable.\"\n\n\"I think it will do well here. Ms. Williams has some marketing people that have researched the ideas and think it is good. Linda plans on making this a regional attraction.\"\n\n\"That is what she said. I think it will be just that. You are centrally located in this part of the country.\"\n\nWe walked around and looked over the space for the store and discussed some ideas.\n\n\"Walt, Linda has everything for us to look at for fixtures and the interior design. The decision is yours on what you want. Considering the market, how much do you think it will cost for the initial inventory?\"\n\n\"If we are going to go high-end...$500,000, or so. Ordering all of it at once will get us some nice discounts.\"\n\n\"Are you still planning on putting in $500,000?\"\n\n\"I have that, maybe a little more if we need it.\"\n\n\"I have a friend that is going to split my half with me so that we will have another $500,000. We will get a huge break on rent, and Linda is covering the fixtures. One million won't be enough to get us started, so I need you to come up with how big of a line of credit we will need to begin operations.\"\n\n\"I'm thinking about two million, but I need to factor in the cost of living here and payroll.\"\n\n\"I think Linda's people can help you with that. We will hold the capitalization to a million, and use a credit line for everything else. How does that sound?\"\n\n\"That sounds great.\"\n\n\"Walt, will half of the operation give you what you want?\"\n\n\"Oh, yes. I think we will do very well.\"\n\n\"How long will it take to get the inventory?\" I asked.\n\n\"We will have everything by mid-January at the latest.\"\n\n\"We have warehouse space. I have some guys that will need some nice dark suits. Can you add them to the order? I need nice but not real expensive suits for limo drivers.\"\n\n\"No problem.\"\n\nWe looked around some more and talked then headed back to Linda's office.\n\n*****\n\n\"What did you think of the store?\" Linda asked.\n\n\"Looks great,\" Walt replied. \"It will work fine.\"\n\n\"My marketing people will be here shortly, and we will go over fixtures and the finish in the store. My plans are to have a nice and elegant looking building finished in nice wood and gold and glass fixtures.\"\n\n\"That sounds upscale.\"\n\n\"I want it upscale and elegant. I want people to realize we are high-end, and I want it to look that way. You work with the designers to finalize the layout. We will store everything then move it in after the fashion show,\" Linda said.\n\n\"Walt, how soon can you be in place to oversee everything?\" I asked.\n\n\"The sooner, the better. I need to sell my house so I can buy a house here.\"\n\n\"Why don't you go ahead and look around at houses. You know what you will get for your house in New York. I'll float you the money to buy a house until you sell yours,\" Linda said.\n\n\"Great! Thanks! I know the wife is ready to get out of the cold winters. I'll send her to look around.\"\n\n\"If I do that, what will that do to your schedule?\" Linda asked.\n\n\"Since it is the first week of October...I think I could be moved in by the end of the month or so.\"\n\n\"If you can do that, you can oversee the final build-out of the store and order inventory. Can we have all the inventory by the middle of February?\"\n\n\"With the people I know, no problem.\"\n\n\"We want nice fashionable men's clothes as I saw in the store in New York,\" I said. \"No, knock-offs.\"\n\n\"We will be first class all the way. Ms. Williams, what about custom tailoring? I know two excellent tailors that are ready to retire and get out of New York.\"\n\n\"Walt, if you want to do high-end custom tailoring, that is up to you. You have to make sure it sells,\" Linda said.\n\n\"Nice custom suits always sell. I think we could be set up for that by Summer.\"\n\n\"Okay, you work on that and keep us informed. James, does that sound good?\"\n\n\"It does. I don't have much to choose from in this town for custom suits.\"\n\nLinda's secretary came in and told us the marketing people and designers were here. We spent the rest of the afternoon going over floor plans and fixtures. Linda had Walt take the designs with him back to his hotel.\n\n\"Do you think he will work out?\" Linda asked.\n\n\"I think so.\"\n\n\"I'll see you in a bit,\" Linda said as I left.\n\n*****\n\nI stopped at the mailbox when I pulled into the drive about 5:00. I saw what I was waiting on; it was our quarterly statement from our stockbroker. I walked into the house and went to get a glass of wine. Amy was in the kitchen.\n\n\"You have some mail,\" I said, handing Amy and envelop. \n\nShe laid it on the bar.\n\n\"You may want to open that,\" I told her.\n\nShe picked up the envelope and looked at it.\n\n\"It's from your stockbroker,\" Amy said.\n\n\"Open it.\"\n\nAmy opened the envelope and pulled out some papers and unfolded them and read.\n\n\"James, what is this?\"\n\n\"What does it say?\"\n\n\"It's from your stockbroker, but it says $48,964 has been deposited into my account. What account?\"\n\n\"Your checking account.\"\n\n\"What!\"\n\n\"You do remember the trusts we set up for you and your sister?\"\n\n\"Yes, but...\"\n\n\"That is the interest for August and September. You will get a deposit at the end of every quarter.\"\n\n\"But...but...\"\n\n\"We told you it would $300,000 or so a year.\"\n\n\"But...\"\n\n\"That will be 70 or 80 thousand a quarter. Can you live on that?\"\n\n\"Uhhh...sure...\"\n\n\"Can Samantha live on that?\"\n\n\"Of course...\"\n\n\"Remember, we are going to help both of you with your money until you understand all of it.\"\n\n\"Okay...\"\n\nAmy sat and looked over the statement for a minute.\n\n\"Amy...med school tuition is about $50,000 a year...do you think your sister can figure out she can pay her own way now?\"\n\nAmy looked at me a moment, then smiled.\n\n\"You knew this was coming!\"\n\n\"Yes, I did.\"\n\n\"This is what you were talking about! You want me to tell sis she can pay her own way to med school!\"\n\n\"Do you think that will make her feel better?\"\n\n\"I guess, but it is still your money.\"\n\n\"No, it's not. The money in the trusts is yours and your sister's. You do with it what you want.\"\n\nAmy was still smiling.\n\n\"Wow!\"\n\n\"I have Samantha's statement right here. What should I do with it?\"\n\n\"Give it to me!\"\n\nAmy took the envelope, then grabbed her phone and was working on it.\n\n\"Fuck! All that money is in my checking account!\" She exclaimed and laughed.\n\n\"Where is your sister?\"\n\n\"She will be here soon.\"\n\nWe went to the den. Amy was happy and couldn't stop talking.\n\n\"You're supposed to be working on a paper,\" I reminded her.\n\n\"Oh...I am...\n\nAmy grabbed her sister's mail and ran up the stairs with her computer.\n\nSamantha came in a just after 5:30.\n\n\"How was your day?\" I asked.\n\n\"Long. I have a study group on Friday. We are going to go over the MCAT book. Is that okay?\"\n\n\"Of course.\"\n\n\"Dawn will be home, and I don't want to be gone.\"\n\n\"She won't be home until after 10:00.\"\n\n\"Oh, I thought she was coming in earlier.\"\n\n\"No, she said she would be back about 10:00.\"\n\n\"Okay, I will be home by then.\"\n\n\"You take your time and study. We want you to get a good score.\"\n\n\"I'll do okay.\"\n\n\"Good. Scoring well on the MCAT will help you out.\"\n\n\"I won't have a problem getting into the PA program.\"\n\n\"I know. Your sister is upstairs working on a paper.\"\n\n\"I'm going to change then.\"\n\nSamantha went upstairs. I sat and read for about 15 minutes.\n\n\"James!!\" I heard Samantha scream from upstairs, then footsteps running down them. \"What is this!!\"\n\n\"What?\"\n\n\"This...this statement?\" Samantha asked as Amy walked up behind her.\n\nShe sat next to me.\n\n\"That is your money from the trust.\"\n\n\"But it is almost $50,000!\"\n\n\"Sounds about right.\"\n\n\"I don't need all this money.\"\n\n\"No, you don't, but you will figure out what to do with it.\"\n\n\"You didn't say it would be this much.\"\n\n\"We said it would be around $300,000 a year.\"\n\n\"I know...but...but...\"\n\n\"Sam, that is your money. You and Amy can do what you want with it. We told you that.\"\n\n\"I know...but...\"\n\n\"But, you didn't think about it, did you?\"\n\n\"No...\"\n\n\"Well, now you have to think about it. Figure out what you want to do with your money.\"\n\n\"But it's really your money.\"\n\n\"No, it isn't. That money is in what is called an irrevocable trust. When we put the money in the trust, we can't take it back. It is yours and your sister's, now and forever.\"\n\nSamantha leaned over and wrapped her arms around me, and I heard her start crying. She held me for a few minutes. Amy sat next to her and held both of us.\n\n\"Thank you.\"\n\n\"Dawn and I are going to help you and your sister learn how to handle your money. But, I want you to sit down and figure out what you can do with $300,000 a year. I am sure you can do some good with it.\"\n\n\"We will.\"\n\n\"Put some ideas down on paper, and we will look at them.\"\n\n\"Okay.\"\n\n\"I have something else for you,\" I said.\n\n\"Not more money?\" Samantha said.\n\n\"No. This is the last of the paperwork you two need to change your name. You need to fill it out, and there is a court date. You two have to go to court to finish the process.\"\n\nSamantha got up looking at the paperwork, and she and Amy went back up the stairs.\n\n*****\n\nJust before 6:00, the gate buzzed. I listened and then heard Linda's Diablo pull up in front of the house. I got up and went to the door and waited as they got out.\n\n\"You made it.\"\n\n\"We finally got out.\"\n\nLinda walked up and kissed me.\n\n\"James, are you sure this is okay with the girls?\"\n\n\"You are the one that talked to them.\"\n\n\"I know, but I am sure they are enjoying having you to themselves.\"\n\n\"Linda, you are part of this family.\"\n\n\"Okay.\"\n\n\"Hi, Rachel.\" She gave me a kiss.\n\nLinda and Rachel followed me in with their bags.\n\n\"Where are the girls?\" Rachel asked.\n\n\"Upstairs.\"\n\n\"I'll take our things up to our room,\" Rachel said.\n\n\"You want some wine?\" I asked.\n\n\"Please.\"\n\nI poured three glasses of wine and took them to the den.\n\n\"What did you think about Walt? I told him we would pick him up in the morning and go over the final plans,\" Linda said.\n\n\"How are you going to pick him up in your car?\"\n\n\"Rachel is taking my car, you and I will pick him up about 8:00.\"\n\n\"Rachel is going to trust you to me?\"\n\n\"She will be waiting at the store.\"\n\nWe talked about Walt and his plans for a while. Rachel came down and sat with us and picked up her wine.\n\n\"What is Sam so excited about?\" Rachel asked.\n\nI explained the trust to them.\n\n\"Dawn and I are trying to get Samantha to go to med school. She told Amy she didn't want us spending all that money on her. Now, we hope she decides she can now pay for it herself.\"\n\n\"Has she?\" Linda asked.\n\n\"We are waiting. She just realized how much money she is getting a year. She got her first statement today. I told her to make out a wish list. I'm hoping that it is on the list. Don't mention it to her.\"\n\nThe three of us talked until about 7:00.\n\n\"I think the two of them have forgotten about dinner,\" I said.\n\n\"Oh, let them have some fun. We can go get something,\" Linda said.\n\n\"Amy!!\" I yelled.\n\n\"What!!\"\n\n\"Come here!!\"\n\n\"What?\" She said from the balcony.\n\n\"We are going to get something for dinner, what do you two want?\"\n\n\"Oh, shit! Sorry, we forgot.\"\n\n\"That's okay. What do you two want?\"\n\n\"How about Chinese?\"\n\n\"Is that okay with you two?\" I asked.\n\n\"Sure.\"\n\n\"James...\" Amy said quietly, and I looked up at her. \"She is making a list.\"\n\n\"Has she thought of it yet?\"\n\n\"Not yet.\"\n\n\"If she doesn't, you bring it up.\"\n\n\"I will.\"\n\nAmy went back down the hall.\n\n\"Come on, I'll drive,\" Linda said.\n\n\"How about I drive,\" I said.\n\n\"I'll call it in,\" Rachel told us.\n\nLinda and I went and got in her Diablo. I fired it up, and we headed to the restaurant.\n\n\"That is a lot of money for the two of them,\" Linda said.\n\n\"We told them that we would be helping them with their money.\"\n\n\"James, what happens if something happens to you and Dawn?\"\n\n\"They get the house and plenty of money to take care of it.\"\n\n\"Do you need some people that can help you set that up?\"\n\n\"We have it covered. Our stockbroker has helped us set it all up, and our attorneys have worked it all out.\"\n\n\"Good. I have had to rework some things recently.\"\n\n\"Does Rachel know?\"\n\n\"Not yet.\"\n\nI hit the interstate and floored it; we were only going up to the next exit. Just before I got off the interstate, I blew by a Sheriff's car on the shoulder.\n\nLinda and I were getting out at the restaurant when the Sherrif's car pulled up.\n\n\"Hey, James. I thought it was Ms. Williams,\" he said from the car.\n\n\"Hey, Gregg. Are you going to be at the meeting on Saturday?\" I asked.\n\n\"Yes. That is some list of cars.\"\n\n\"We added a few. I expect all of you to make sure they are rented.\"\n\n\"They will be. Take it easy.\"\n\nGregg drove off, and we went in and picked up the order. Linda had to set it all between her feet as I drove back.\n\n\"How many more cars did you add?\" Linda asked.\n\n\"I added two executive Escalades and some plain 20 passenger buses.\"\n\n\"The Escalades will be nice. I have seen those.\"\n\n\"Lori will be happy to rent you one when you travel.\"\n\n\"Did you get an armored SUV?\"\n\n\"Not yet. They are over 200 thousand, and I am not sure the demand will be enough.\"\n\n\"Don't write it off yet.\"\n\n\"Lori is going to make sure we have enough drivers and cars for the grand opening.\"\n\n\"Good. Since Valentine's Day is Sunday, the fashion show will be Friday and Saturday night. Then we will have a private store sale Sunday.\"\n\n\"What else do you have planned for that week?\" I asked.\n\n\"We are going to have an open house for the press and invited guests Wednesday and Thursday. I'll be having a press conference and grand opening for the hotel the weekend before. We will work in a press conference for your limo company too.\"\n\n\"We will also have three big party buses we can use.\"\n\n\"Good, we can have some mobile cocktail parties.\"\n\n\"We can use them and the stretch Hummer and Escalade for tours around the city.\"\n\n\"I'll plan some events like that for some of the guests. Some of my parent's old friends are coming into town. They would get a kick out of that,\" Linda said.\n\n\"Any international guests?\"\n\n\"Oh, yes. I plan on them spending a lot of money at the store.\"\n\n\"Linda, am I putting too much on you with the men's store?\"\n\n\"No. I think Walt is going to work out well. We will get him moved as soon as we can and let him run with things. I have people that will take care of getting everything ready to go as soon as we can.\"\n\n\"Okay, we have warehouse space.\"\n\n\"Great.\"\n\nI pulled up at the house, and we got out and took the food inside. The girls were setting up the table in the kitchen. We took all the food and set it out.\n\n\"Hi, Linda,\" Samantha said.\n\n\"Hi. How is school going?\"\n\n\"Hard work.\"\n\n\"How about you, Amy?\"\n\n\"I'm staying busy.\"\n\n\"Dr. John is letting me help during some of his surgeries,\" Samantha bragged.\n\n\"Be careful, or he may talk you into being a doctor,\" Linda replied.\n\nWe sat and spread out the food and ate while we talked. Linda wanted to hear the girls talk about school.\n\n\"Are you going to be at the self-defense class on Saturday?\" Samantha asked Linda.\n\n\"Yes. Rachel and I will be there. I think your husband will come and get us if we don't show up.\"\n\n\"That's right,\" I said.\n\n\"James, how long have you been studying martial arts?\" Rachel asked.\n\n\"Since I was about six-years-old.\"\n\n\"What about Dawn?\"\n\n\"She started after we met in grad school.\"\n\n\"I'm going to start doing it,\" Samantha said.\n\n\"If you have time,\" I told her.\n\n\"I will.\"\n\nWe all talked until we had finished eating and were sitting and sipping wine. About 9:00, Rachel and the girls decided they wanted to go out and sit around the pool.\n\n\"What do you want for your birthday?\" Linda asked as we sat in the den.\n\n\"Nothing! What have you heard?\"\n\n\"Nothing, I just wanted to know.\"\n\n\"Dawn and the girls are planning something. I told them no party.\"\n\n\"They haven't said anything to me about a party.\"\n\nI looked at Linda, not believing her.\n\n\"I swear!\" She said, and laughed.\n\n\"If they do, will you please tell me.\"\n\n\"No!\" Linda replied. \"I'm not getting into trouble.\"\n\n\"Thanks a lot.\" Linda giggled. \"Let's go to bed.\"\n\nI took Linda's hand and walked her up to my bedroom.\n\n\"I feel weird about this with Dawn not here,\" Linda said as I walked her into my bedroom.\n\n\"Don't. Come with me, let's shower.\"\n\nWe got in the shower and slowly washed each other. Linda seemed to be happier when we were together like this now.\n\n\"This still feels weird with Dawn not here,\" Linda said.\n\n\"Linda, Dawn understands that you and I have more between us than just being close friends.\"\n\n\"I know, but I am still having a hard time wrapping my head around what I found out.\"\n\n\"Ever since Dawn showed me what she showed you...and then the dream...or ghosts...or whatever it was...everything has changed,\" I said.\n\n\"It's just hard for me to think that our ancestors were married at one time.\"\n\n\"Since the first time I saw you, I knew there something between us,\" I said.\n\n\"How would you know that?\" Linda asked as she rinsed me off.\n\n\"It was sort of like the first time I saw Dawn in grad school. I guess I understand it more now, but the first time I saw her, I felt something deep inside of me stir.\"\n\n\"I don't know if I would be as understanding as Dawn has been.\"\n\nWe finished rinsing each other off and got out and dried off.\n\nWe got in bed, and Linda rolled to me and kissed me for a minute.\n\n\"James, is it okay that I...I want to kiss you?\"\n\n\"Sure, it is.\"\n\nWe kissed for a while, then Linda climbed on top of me. She settled on my cock and was sitting there smiling as I looked at her long gorgeous body. I looked her over and smiled.\n\n\"What are you smiling at!\" She asked.\n\n\"I like looking at you.\"\n\n\"I know you do! Have you talked to Dawn?\"\n\n\"Not today.\"\n\n\"I was wondering if she and Diane had talked.\"\n\n\"Oh, I imagine her and Diane will do more than talk if Diane is okay with that.\"\n\n\"I'm sure she will be. What have you been doing while she is gone?\"\n\n\"The girls have been taking care of me, and I fucked Mr. Dain's wife this morning.\"\n\n\"What? You didn't!\"",
        "\"She was in his office this morning when I dropped off some papers, and she wanted me to fuck her.\"\n\n\"James! Was he there?\"\n\n\"He watched and took pictures.\"\n\n\"I don't believe you!\"\n\nI reached over and picked up my cell phone and found the pictures.\n\n\"Look,\" I said, handing it to Linda.\n\n\"James! You didn't!\"\n\n\"If you don't believe me, then you and Rachel need to plan on being here for the last weekend of the month.\"\n\n\"Why?\"\n\n\"I think it was time we had a business meeting with everyone involved in our projects.\"\n\n\"James? Are you planning on having one of your orgies!\" Linda said, laughing.\n\n\"Sounds like it. I may even be able to get Sherri and Brenda to come.\"\n\n\"You are terrible!\"\n\n\"I was hoping you and Rachel would come.\"\n\n\"You know I can't do that.\"\n\n\"Why not? It will be all of us, Sherri and Brenda, Sam and Olivia, and Ian and his wife.\"\n\n\"James, you know better.\"\n\n\"I know you would have a good time, and you are part of all the businesses.\"\n\nLinda smiled at me as she wiggled to settle more.\n\n\"Mr. Dain is nice looking,\" Linda said.\n\n\"His wife isn't bad either.\"\n\n\"I...I...couldn't.\"\n\n\"Do you think he is going to talk? I don't think you need to worry about that, Linda.\"\n\n\"I still couldn't.\"\n\n\"Yes, you can.\" \n\nLinda gave my phone back and began to wiggle on my cock. She had been going for about ten minutes when my phone rang.\n\n\"That will be Dawn,\" I said.\n\nI picked up my phone.\n\n\"Hi, honey!\"\n\n\"What are you doing?\" Dawn asked.\n\n\"Fucking Linda.\"\n\n\"Put me on speaker...Hi, Linda!\"\n\n\"Hi, Dawn.\"\n\n\"Are you and Rachel going to stay all week?\" Dawn asked.\n\n\"Just tonight. Your wives are having too much fun with James.\"\n\n\"They wouldn't mind.\"\n\n\"Just tonight.\"\n\n\"Honey, will you tell Linda she has to come to our business meeting,\" I said.\n\n\"Linda, I expect you to be there,\" Dawn said.\n\n\"I don't know, Dawn. He has invited Mr. Dain from the bank.\"\n\n\"So?\"\n\n\"We better not,\" Linda said.\n\n\"Linda, please come,\" Dawn pleaded.\n\n\"I'll think about it.\"\n\n\"Honey, are you and Diane hitting it off?\" I asked.\n\n\"We will be tonight!\"\n\n\"Okay, enjoy yourself.\"\n\n\"I plan on it. We are looking over some more things here tomorrow, then flying to California tomorrow evening.\"\n\n\"Is it helping?\" I asked.\n\n\"Yes. We are getting some good ideas. Linda, Diane will be a lot of help.\"\n\n\"She will. She oversaw a huge renovation at one of the hospitals I own most of.\"\n\n\"That is what she said. I'm in the bar and Diane is coming.\"\n\n\"Okay. You two have fun,\" I said.\n\n\"We will. Love you two,\" Dawn said.\n\n\"Bye.\"\n\nI held my phone up and took a picture of Linda.\n\n\"James...\"\n\n\"We are heading to bed,\" Amy said as they walked by the door.\n\n\"Good night.\"\n\nI pushed myself up and wrapped my arms around Linda and held her as she sat on my cock. We looked at each other and kissed some more. After all that I had learned, it explained why it felt so natural being with Linda.\n\n\"Does this feel right to you now?\" I asked.\n\n\"It always seemed right, James. Now it just makes sense.\"\n\nI held Linda as she wrapped her long legs around me and began working her pussy on my cock.\n\n\"Don't do anything to me,\" she said.\n\nI didn't. I held Linda a long time as she made love to me. She smiled at me and would kiss me as she worked slowly. I leaned her back some and kissed her neck and chest. I could feel her deep feelings of trust and love as she held my head.\n\n\"Ohhhhhh...this feels so good,\" Linda purred.\n\nI wrapped my arms around the small of her back and helped her work her pussy on my cock. Linda looked so hot as I held her.\n\n\"Emmmmm...oh yes...oh yes...\"\n\nLinda closed her eyes and let her head fall back as she worked her pussy.\n\n\"Ahhhhhh...\"\n\nAfter a bit, she tensed up and came in a nice gentle orgasm.\n\n\"Ohh...my...\"\n\nI pulled her up and placed my mouth over hers. As we kissed, she began to work her pussy harder on my cock.\n\n\"Emmmmm...emmmmm...emmm.\"\n\nLinda looked at me as she jammed her pussy onto my cock over and over. I held her close and let her go as long as she wanted.\n\n\"Oh, fuck! Oh, fuck! I'm coming!!\"\n\nLinda started thrusting into me as hard as she could.\n\n\"Ohhhhh...fuuuuck!!\"\n\nLinda came hard as she jerked repeatedly. She wrapped her arms around me and pulled me in tight and held me.\n\n\"Ohhhhhh...that was nice...\"\n\nWe held each other for a long time. I could feel her pussy clenching on my cock as she sat in my lap.\n\nLinda kissed me, then climbed off my cock and got on her hands and knees next to me. I got up behind her and grabbed my cock.\n\n\"James...do my ass.\"\n\n\"Are you sure?\"\n\n\"Yes...your birthday is coming up.\" We both laughed.\n\nI placed the end of my cock against her asshole.\n\n\"You're sure?\"\n\n\"Yes, we have been practicing.\"\n\nI began to push slowly as I watched. Linda was slick with her own juices.\n\n\"Ahhhhhhh...\" came from Linda as the end slid into her ass.\n\n\"Okay?\"\n\n\"Yes.\"\n\n\"I'll let you push back,\" I said.\n\n\"No, work it into me.\"\n\nI grabbed her ass and held it tight then began to push slowly. I watched as my cock slowly slid into her tight ass.\n\n\"Ahhhhhhh...\"\n\n\"Let me know if I need to stop.\"\n\n\"Keep going!\"\n\nI pushed slowly. Linda moaned as my cock slowly slipped further into her ass.\n\n\"Ohhh, wait,\" she said once I had about half of my cock inside of her.\n\nLinda paused a minute, then I felt her pushing back.\n\nShe moaned as more of my cock disappeared into her.\n\n\"Emmmmm.\"\n\n\"Are you okay?\"\n\n\"Oh, yes. I am enjoying this,\" she said. \"Give me the rest of it.\"\n\nI held her and began to push.\n\n\"Ahhhhh! Fuck, yes! More!\"\n\nI kept pushing as she moaned.\n\n\"Oh, my, god! Yes!\"\n\nI looked down as the last inch slid into her.\n\n\"Ohhhhh, my...that does feel good,\" she moaned.\n\n\"Good.\"\n\nLinda wiggled her ass a little as she pulled her head up. She began to pull forward, so some of my cock slid out. She pulled it about half way out then started pushing back against me again. Linda moaned as I slid back in, then she repeated the process.\n\nAfter she had done this about a dozen times, she sped up. I held her ass tight and began to help her as I slid my cock in and out of her ass.\n\n\"Ohhhhh...my!\"\n\nI was working my cock in and out of her now as she moaned. Linda had found out she liked this and was getting into it.\n\n\"Ahhh, yes! Fuck my ass, James! Fuck my ass!!\"\n\nAfter a few more minutes, I was thrusting into her ass as she yelled.\n\n\"More!! Fuck my ass!!\"\n\nI kept going. I was reaching into Linda so I could feel her energy. I wanted to make sure she was enjoying this and not just doing it. She was enjoying it.\n\n\"Ahh...ahhh...ahhh...ahhh,\" came from her each time I jammed my cock into her.\n\nI reached around her and grabbed her nipples as her tits bounced. I pinched them hard between my fingers for a few minutes as I worked my cock.\n\n\"Oh, fuck, yes!! Yes!! Yes!!\"\n\nLinda began to jerk as I pulled hard on her nipples.\n\n\"Ohhhh!! I'm coming!!\"\n\nLinda jerked under me as I felt her ass crush my cock. She moaned and jerked hard several times.\n\n\"Ahhhhhhh!!\"\n\nLinda trembled as she came in a huge orgasm.\n\n\"Ahhhhhhh! Fuck!\"\n\nI could feel Linda's arms and legs shaking as she tried to hold herself up.\n\n\"Slide down onto your stomach,\" I told her.\n\nShe slowly slid down onto her stomach as I rode her down. I held myself up on my arms as I pushed my cock in deeper.\n\n\"Ahhhhhhh! That feels so good!\"\n\n\"Are you okay?\" I asked.\n\n\"Ohhhh, yes...I like this!\"\n\nI went back to working my cock in her ass. Linda laid on her stomach and moaned as I thrust into her.\n\n\"Ohhhh, I know why Dawn likes this!\"\n\n\"I'm glad you are enjoying it.\"\n\n\"I am! Now fuck me!!\"\n\nI thrust my cock into her ass for a long time. I was surprised she was taking it as well as she was.\n\n\"Oh, fuck!! I'm going to come again!! Come in my ass, James!!\"\n\nI drove into her hard. She started screaming she was coming. I jammed my cock in harder and started pumping cum into her hot ass.\n\n\"Ahhhhhhhhhhhh!!\"\n\nI collapsed on top of her and lay for a minute.\n\n\"Oh my...that was great,\" Linda moaned.\n\n\"Yes, it was.\"\n\nI slowly slid my cock out of her ass.\n\n\"Ouch!\"\n\nI laid on my back next to her. Linda pushed herself up and laid her head on my chest.\n\n\"I enjoyed that,\" she said.\n\n\"I know you did.\"\n\n\"You didn't do anything to me, did you?\"\n\n\"No, I just felt your energy so I would know you were enjoying it.\"\n\n\"I did!\"\n\nWe held each other for a long time.\n\n\"How are you and Rachel doing at your house?\" I asked.\n\n\"She sleeps with me now. I stopped worrying about it.\"\n\n\"Good. Are you ready for some sleep?\" I asked.\n\n\"Yes.\"\n\nI turned off the lights.\n\n*****\n\nLinda woke me up about 4:30 the next morning.\n\n\"You get up earlier than Dawn does.\"\n\n\"Let's shower. We have to get to the office,\" she said.\n\nWe went to the shower and got in. We soaped each other up and rinsed off, then Linda kissed me.\n\n\"Thanks for last night,\" she said.\n\n\"My pleasure.\"\n\nLinda slid to the floor and got on her knees and sucked my cock into her mouth. I watched her for a long time as she took her time. After about 20 minutes, I filled her mouth full of cum. She stood, and I kissed her. We got out and were drying off.\n\n\"What about the end of the month?\" I asked.\n\n\"James, you know I can't do that.\"\n\n\"Why not?\"\n\n\"I don't know him that well.\"\n\n\"You didn't know our friends that well, but you fucked most of them.\" Linda swatted me, then laughed.\n\n\"I just couldn't.\"\n\n\"I think you could if you wanted to. I know it would be a nice surprise for him,\" I said as I took her in my arms.\n\n\"I'm sure it would be!\" She said, and laughed.\n\n\"I was hoping you would become a little more adventurous,\" I said as I looked into her eyes.\n\n\"Like you said! I have already fucked most of your friends! That is pretty adventurous!\"\n\n\"Will you think about it? You and Rachel need to have some fun.\"\n\n\"We are having fun this week.\"\n\n\"You know what I mean.\"\n\nLinda smiled then kissed me. I released her.\n\n\"Help me start breakfast,\" I said.\n\n*****\n\nAll of us were naked and sitting and eating breakfast. Rachel and the girls were giggling.\n\n\"What are you three laughing about?\" Linda asked.\n\n\"We watched you two last night on TV!\" Rachel exclaimed.\n\nLinda shook her head and picked up her coffee.\n\n\"Linda, I think his party sounds like fun,\" Rachel said.\n\n\"What?\"\n\n\"We listened too! I think his business party sounds like fun.\"\n\n\"Rachel...we can't do that.\"\n\n\"Why not?\"\n\n\"We just can't.\"\n\n\"I don't know Linda, I have been with you when you teased Mr. Dain!\" Rachel said, and the girls laughed.\n\n\"That's different!\"\n\n\"No, it's not! Tell me you haven't thought about fucking him!\" Rachel exclaimed, and Linda laughed.\n\nLinda returned to eating her breakfast.\n\n\"James, I think I need to run by the bank this morning before school,\" Samantha said.\n\n\"What for?\"\n\n\"I need to get Mr. Dain's opinion on something.\"\n\n\"And what would that be?\" I asked.\n\n\"I thought I would ask him if I am a better fuck than his wife!\" Samantha exclaimed, and they all laughed.\n\n\"Just make sure you get to your class on time,\" I said and sipped my coffee.\n\n\"James!\" Linda exclaimed.\n\nThere was more talk and laughter. Linda and Rachel went to get dressed about 7:00. I went up also and was putting on some business clothes when Samantha came into the bedroom.\n\n\"Will this do?\" She asked.\n\nShe had on a white silk top, obviously with no bra, and a short blue skirt.\n\n\"That should do it,\" I said. \"Just get to school on time.\"\n\n\"I'll make my 11:00 class, then I have to study in the library this afternoon.\"\n\n\"Bring me some pictures.\"\n\n\"Are you ready?\" Linda asked from the door.\n\nLinda and I went to the Escalade and headed to Walt's hotel. Linda called him to let him know we were on the way.\n\nHe was waiting for us when we pulled up.\n\n\"Good morning!\" He said as he got into the back.\n\n\"Good morning,\" Linda said.\n\n\"I looked over all the plans and photos of the fixtures last night, Ms. Williams. I like the ones you have picked out for the rest of the store. They should work fine.\"\n\n\"Great. That will keep everything looking the same.\"\n\nThe three of us talked as we drove across town to the store. I saw Rachel standing next to the Diablo when we pulled up. We got out and went inside and went over the floorplans and the layouts the designers had decided on for the men's store. Walt made a few changes then we all went to eat lunch.\n\n\"Walt, do you feel like you have things the way you want?\" Linda asked.\n\n\"Yes. The designers know what they are doing.\"\n\n\"Spend the afternoon with them making the changes you want. Once that is done, we need you to put everything into motion as soon as you can,\" Linda told him.\n\n\"I will. As soon as I get back, I will get a realtor going on my house, so I will know what it is worth. The wife and I will fly back about the middle of next week and start looking for houses.\"\n\n\"I'll get the realtor we know to call you,\" I said.\n\n\"Great. Thanks.\"\n\n\"Walt, if you want to take more time to find a house, you can find an apartment and store everything,\" Linda said.\n\n\"I think we can find something we like. I picked up a couple of local real estate listings and looked them over last night.\"\n\n\"Okay. Make sure you find what you want. Let me know when you have some comps on your house,\" Linda told him.\n\n\"I will.\"\n\nAfter we finished lunch, I took Walt to Linda's office. We spent the afternoon finalizing all the plans. Walt and I spent some time discussing inventory and coming up with some preliminary amounts. \n\nI took him back to his hotel about 4:00. He was going to spend some time looking around town tomorrow then fly back.\n\n*****\n\nRight as I parked in front of the house, my phone rang. It was Dawn.\n\n\"Hey, where are you?\" I asked.\n\n\"Sitting in the airport. We fly to California in an hour.\"\n\n\"Have some fun in California, I did.\"\n\n\"I plan on it. Diane and I had fun last night.\"\n\n\"How did that go?\"\n\n\"Interesting.\"\n\n\"What does that mean?\"\n\n\"She is an interesting lady. She is very much a lesbian, but we had a great time.\"\n\n\"Have some fun.\"\n\n\"Oh, I am. She told me she really enjoys watching women together.\"\n\n\"I know where she can come and watch a few.\"\n\n\"She said something curious after she had a few drinks in her.\"\n\n\"What was that?\"\n\n\"She has no desire to be with a man, but she said she likes watching porn threesomes with two women and a guy.\"\n\n\"Did you ask her what she likes about it?\"\n\n\"She just said she likes to watch the women having a good time. She said she found it erotic.\"\n\n\"Interesting,\" I said.\n\n\"I know. I will have to talk to her more about it tonight. What have you done this week?\"\n\n\"Working on the businesses. I have to work on Linda coming to the meeting.\"\n\n\"Good luck with that. I did find out that Diane hit on Linda. She thought she was just into women.\"\n\n\"What did Linda tell her?\"\n\n\"She did tell her about the party at the university.\"\n\n\"Have you told her about President Wells?\"\n\n\"Oh, yes! She is planning on having some fun with him!\"\n\n\"Good for her.\"\n\n\"I did Mr. Dain's wife in his office.\"\n\n\"How was she?\"\n\n\"Very nice. They hooked up with his secretary and her husband. They are thinking about asking them to join us in the Bahamas.\"\n\n\"Oh, shit. I forgot about that. Will you put that on my calendar?\"\n\n\"Sure. Anything else?\"\n\n\"Send me some pictures. I know you took some.\"\n\n\"Maybe you can show them to Diane.\"\n\n\"Maybe. How are the girls doing?\"\n\n\"Having a good time.\"\n\n\"Good. Make sure they do. I need to grab something to eat.\"\n\n\"Okay. I'll talk to you later.\"\n\n\"Bye, I love you.\"\n\n\"I love you too.\"\n\nAfter I hung up, I sent Dawn some pictures of Sondra.\n\n*****\n\nI was sitting in the study when Samantha came in about 5:30. She walked straight to me and took my hand.\n\n\"Come with me,\" she said.\n\n\"Where?\"\n\n\"I need you to fuck me, now.\"\n\nWe got to her bedroom, and she pulled off her clothes as I took mine off.\n\n\"What did you and Mr. Dain do?\"\n\n\"Fucked. Get on the bed.\"\n\nI got on the bed, and Samantha pushed me over onto my back. She started sucking on my cock as I watched her. She was horny. Once she had my cock hard, she straddled me and worked my cock into her wet pussy.\n\n\"Are you horny from this morning?\" I asked.\n\n\"Yes.\"\n\nSamantha wiggled and settled on my cock then began to work her pussy.\n\n\"Have you been horny all day?\"\n\n\"Yes!\"\n\nShe kept working her pussy on my cock. I laughed at her.\n\n\"Hey! You want to fuck me after I have been fucked!\" Samantha exclaimed.\n\n\"I know, honey!\"\n\nSamantha smiled and worked her pussy harder. I grabbed her thighs and held on as she thrust harder.\n\n\"Ahhhhhhh!!\"\n\nSamantha was driving her pussy onto me as hard as she could. I watched her as she worked hard for about 15 minutes.\n\n\"Oh, fuck!!\"\n\nSamantha started coming as she cried out. She came hard as she screamed, then just sat.\n\n\"Was that what you needed?\" I asked.\n\n\"No!\"\n\nSamantha pulled her legs up and put her feet next to me and spread her legs. I watched her as she began fingering her clit hard. Samantha was very horny and was not pleased yet.\n\n\"Samantha, what has gotten into you?\"\n\n\"Oh, I got so hot and horny while he had me lying on his desk fucking me!\"\n\n\"Why?\"\n\n\"I just did!\"\n\n\"I don't think that's it, honey.\"\n\nSamantha was fingering her clit faster as I watched her. She was moaning now as I saw her close her eyes.\n\n\"Ahhhhhhhh!!\" Samantha cried out and jerked on my cock hard as she came again. \"Oh, fuck!!\"\n\nShe sat panting.\n\n\"Hey?\" I said.\n\n\"I need to talk to Dawn,\" she said.\n\n\"You can talk to me. What's going on?\"\n\n\"James...when I went into his office...I could feel him wanting me.\"\n\n\"I'm sure he did, honey.\"\n\n\"Not like that. For some reason, I could feel him very strongly, and his feelings for me made me so hot an horny.\"\n\n\"Was there something different about him?\"\n\n\"No. I don't know why, but I just felt everything more than usual. Even while he was driving his cock into me, I couldn't get past how bad he wanted me.\"\n\n\"Maybe you had some type of connection with him?\"\n\n\"That wasn't it. As soon as I went in his office...I mean I teased him...but...but as his desire grew I got hornier and hornier. I had to have him fuck me, but that didn't even relieve me.\"\n\n\"How did you feel?\" I asked.\n\n\"The more I felt his...craving...for me...the wetter I got.\"\n\n\"Are you sure you just weren't connecting with him somehow?\"\n\n\"No, I would have known that. I'm not sure what was happening.\"\n\n\"Did you have a nice fuck anyway?\"\n\n\"Oh, yes! He fucked me very nicely.\"\n\n\"What did you feel from him afterward?\"\n\n\"I could tell he was thinking about fucking sis next. I need to talk to Dawn.\"\n\n\"You can when she calls tonight. Are you satisfied now?\"\n\n\"No!\"\n\nSamantha went back to fucking my cock hard. She came several more times until we came together; she was spent. I pulled her down on top of me and held her. I had been feeling an odd rush of energy coming from her during all of this.\n\n\"There you two are,\" Amy said as she came into Sam's bedroom about 7:00.\n\nAmy sat on the edge of the bed.\n\n\"Let me guess, you came home horny,\" Amy said to her sister.\n\n\"Oh, yes...\" Samantha moaned.\n\nAmy took her clothes off and got between her sister's legs. I left them on the bed and went down to the den and found my phone. I sent Dawn a text.\n\n'Sam needs to talk to you tonight. Something odd happened to her today.\n\nLove you'\n\nSamantha and Amy didn't come down until after 8:30. I had a feeling they had been talking for a while.\n\n\"What do you want for dinner?\" Amy asked.\n\n\"Surprise me.\"\n\nShe and Samantha had showered and were now naked with their long red hair wet and hanging down their back as I watched them walk to the kitchen. I picked up my journal to read, and my phone rang. It was Dawn.",
        "\"Hey, honey.\"\n\n\"You three still up?\"\n\n\"We are having a late dinner.\"\n\n\"What did Sam want?\"\n\n\"Is that Dawn?\" Samantha asked from the kitchen.\n\n\"Yes. Let me talk to her first.\"\n\nI told Dawn about what had happened with Samantha.\n\n\"Let me talk to her,\" Dawn said.\n\n\"Sam.\"\n\nShe came to the den and took my phone.\n\n\"Hi...\"\n\n\"Okay...okay...\"\n\nSamantha listened for a minute.\n\n\"Okay. I'll see you tomorrow.\" She handed me my phone back and went back to the kitchen.\n\n\"I told her I would talk to her tomorrow. I can't right now,\" Dawn said.\n\n\"Are you with someone?\"\n\n\"Yes.\"\n\n\"Do you understand what happened to her?\"\n\n\"Yes. She has stopped surprising me. I told her I would talk to her tomorrow.\"\n\n\"Anything to worry about?\" I asked.\n\n\"No.\"\n\n\"How was your flight?\"\n\n\"Very long,\" Dawn said. \"We are finishing up dinner and heading back to our rooms.\"\n\n\"I understand.\"\n\n\"I'll call you before we take off so you will know when to pick me up.\"\n\n\"Okay.\"\n\n\"Have a good night. Love you.\"\n\n\"Love you too.\"\n\nI hung up and started reading my journal.\n\nAfter dinner, we all went to bed. The two of them wanted to do more than lay on me tonight. The girls took their time making love to me for a few hours. They both took their time and enjoyed being with me.\n\n*****\n\nWhen I woke up early Friday morning, the two of them were lying with their heads on my chest. I lay there and held them for a little while.\n\nSamantha was the first to wake up.\n\n\"Emmm, good morning,\" she said as she kissed me.\n\n\"Good morning.\"\n\n\"Last night was nice.\"\n\n\"Honey, every night is nice.\"\n\n\"I know. Sis, wake up.\"\n\nSamantha shook Amy until she woke up.\n\n\"Emmmm, I slept well,\" Amy said as she stretched.\n\nIt didn't take the two of them long to get together and start sucking my cock. After they played for a while, Amy straddled me and worked my cock into her pussy. Samantha sat and watched her sister for a while.\n\n\"Up here, Samantha,\" I said.\n\nShe smiled and moved over my mouth. I pulled her down and slid my tongue into her wet pussy. I knew they were playing with each other's tits as they giggled. After about half an hour, the giggling stopped. Amy was working her pussy hard on my cock, and Samantha was grinding her pussy into my mouth.\n\n\"Ahhhhhhhhh!\" I heard.\n\nThey kept going for a few minutes.\n\nI heard another moan, then realized they both were moaning at the same time.\n\nAmy started coming hard, and so did Samantha.\n\n\"Ahhhhhhh!!\" Came from both of them.\n\nAmy jammed her pussy onto my cock hard as Samantha pushed down hard to get more of my tongue into her.\n\n\"Ahhhh! Fuck!\" They exclaimed as they both came hard.\n\nSamantha moved off my mouth and lay down. Amy was sitting on my cock.\n\n\"Okay, what is going on with you two? You both came at the same time?\"\n\n\"I...don't know,\" Amy moaned.\n\n\"Me either,\" Samantha said.\n\nThe two of them looked at each other.\n\n\"Let's see if it happens again,\" I said.\n\nThey smiled, then traded places.\n\nSamantha settled on my cock, and Amy lowered her dripping pussy down to my mouth.\n\nThey slowed down and took their time this time. Samantha rode my cock nice and slow for a long time, while her sister worked her pussy on my mouth. I heard both of them start moaning. They sped up and worked harder.\n\n\"Ahhhhhh! I'm coming,\" I heard one of them say.\n\n\"Me too!\"\n\nThey both moaned for a few minutes then they started coming at the same time again.\n\n\"Ahhhhhh!\" Came from both of them as the came.\n\nAmy filled my mouth full of her juices before she collapsed next to me. Samantha was sitting there panting hard. She finally collapsed next to her sister.\n\n\"You two are starting to worry me,\" I said as I sat up and looked at them.\n\n\"I don't know why...we came together,\" Amy said.\n\n\"I enjoyed it,\" I told them.\n\nI got on my knees between them as they looked up. I grabbed my cock and started pumping it hard as they smiled at me. After a few minutes, I started coming hard. I sprayed cum all over both of them as they laughed.\n\n\"Come on, you two, let's shower,\" I told them as I got off the bed and pulled them up.\n\nWe got in the shower, and the two of them had me wash their hair, knowing what it would do to me.\n\nWhile I was rinsing their hair, they were giggling as they played with my hard cock.\n\n\"You rinsed it enough,\" Samantha said.\n\nShe and her sister turned and put their hands on the wall and leaned over a little. They both looked over their shoulders and smiled at me.\n\nI spent about 30 minutes fucking both of them from behind as they held themselves up.\n\n\"We knew we could count on you!\" Amy said and laughed.\n\nThey ran out of the shower together. I caught up with them as they dried off.\n\n\"What do you two want to do today?\" I asked.\n\n\"Keep fucking!\" Samantha said and laughed.\n\n\"If you two want me to fuck you all day you have to tell me what you have planned for my birthday!\"\n\n\"James!\" Samantha exclaimed.\n\n\"Good luck with that,\" Amy said and threw her towel at me and walked off.\n\n\"James, please. I promise, no party,\" Samantha said.\n\n\"Then what?\"\n\n\"Don't worry about it. It is nothing special.\"\n\n\"Then why are you three sneaking around?\"\n\n\"James! Damn it!\"\n\nSamantha turned and looked at me with a frown.\n\n\"Okay...\" I said.\n\n\"Cool it! I mean it!\"\n\nI grabbed Samantha and held her.\n\n\"If you don't knock it off, we will throw you a party! A big surprise party!\"\n\n\"Okay, I'll stop bugging you.\"\n\n\"You better. Your birthday is the Wednesday after next. You better be careful, or you won't get shit!\"\n\nSamantha left the bathroom, and I dried off. When I went to the bedroom, they were gone. I went downstairs, and they were in the kitchen naked making breakfast. I sat at the bar.\n\n\"You two, did anything special happen between you two this morning?\" I asked.\n\n\"James, we don't know why it happened. It has happened before,\" Amy said.\n\n\"Not twice. Did you two feel each other about to come?\"\n\n\"Yes,\" Samantha said as she opened the fridge.\n\n\"Is that new?\"\n\n\"Maybe.\"\n\nI sat and watched as they cooked. Samantha jumped and cussed when the bacon popped and hit her. Amy laughed at her.\n\n*****\n\nAfter we finished breakfast and cleaned up the kitchen, we went and sat in the den.\n\n\"What do you want to do now?\" I asked.\n\n\"Let's go for a drive! We can go visit our property!\" Samantha said.\n\nWe got dressed and grabbed some water and threw it in a cooler. It was warm when we went out about 10:00. Amy wanted to drive her car, so she put the top down, and Samantha jumped in the back. Amy drove for about 15 minutes until we came to the turnoff on the land we bought. She turned in and drove down the grassy lane.\n\nOnce we stopped, they jumped out of the car and immediately took off their shorts and shirts and walked around naked. They had me join them as we walked.\n\nWe were about 50 yards from the car when we heard, and saw, Earl's old pickup truck driving through the grass.\n\n\"This should be interesting,\" I said.\n\nEarl stopped at the car and got out. Samantha and Amy walked back to the car.\n\n\"Hi, Earl!\" Samantha yelled.\n\n\"Oh...my...hi, Dr. Smith,\" he said as I walked up.\n\n\"Hi, Earl.\"\n\n\"I saw the car turn in and I wanted to make sure it wasn't some kids on your property,\" he said as he looked over Amy and Samantha's naked bodies. \"Didn't mean to intrude.\"\n\n\"That's okay,\" Amy said.\n\n\"What are you folks doing?\"\n\n\"Just out for a walk,\" Samantha said. \"How are you doing?\"\n\n\"Oh, I'm fine.\"\n\n\"We just came for a morning walk,\" Amy said.\n\nSamantha and Amy kept talking to Earl so he would stay...and look.\n\nPoor Earl couldn't help but look at them since he was only about five feet from them.\n\n\"Okay. I just wanted to check,\" he said and turned and walked back to his truck.\n\nAmy and Samantha stood and waved as he turned around and drove off.\n\n\"He may have a heart attack,\" I said.\n\n\"He's cool,\" Amy said.\n\nBefore we left, the two of them got in the back of the car and leaned over the trunk and had me fuck both of them from behind. They waited for me to put my clothes on and made me get in the back seat. They jumped in the front seat naked and took off.\n\n*****\n\nWhen they parked in front of the house, they jumped out laughing and ran into the house. I grabbed their clothes and followed. They had already gone out to the pool.\n\nMy cell phone rang as I walked toward the back of the house. It was Dawn.\n\n\"Hey, where are you?\" I asked.\n\n\"Taking a break. I checked, and my flight is supposed to land at 10:05,\" Dawn said. \"What are you doing?\"\n\n\"Dealing with two crazy children.\"\n\n\"What are they doing?\"\n\n\"Teasing me mostly.\" Dawn laughed.\n\n\"Let them have a good time.\"\n\n\"They are. Something interesting happened this morning.\"\n\n\"What?\"\n\n\"After we woke up, I was doing both of them, and they came at the same time.\"\n\n\"So?\"\n\n\"It happened again about an hour later. They said they didn't know why they came at the same time.\"\n\n\"Were they trying to?\"\n\n\"I don't think so.\"\n\n\"Hmmm. I'll have to talk to them later.\"\n\n\"Did you and Diane hook up?\"\n\n\"Oh, we had a great time.\"\n\n\"You think she would like to come to the house?\"\n\n\"Not sure yet.\"\n\n\"I would like to watch a pro.\"\n\n\"James!\" Dawn scolded me and laughed.\n\n\"Did you impress her?\" I asked.\n\n\"I did!\"\n\n\"I'll be at the airport about 10:00.\"\n\n\"Okay, I'll see you later.\"\n\nI hung up and went outside.\n\n\"Dawn will be landing at 10:00,\" I told them.\n\n\"Good!\"\n\nI left them playing in the pool and went back in the house.\n\n*****\n\nI was in the study sending Sheri and email, and telling her to have her realtor friend call Walt.\n\n\"We are fixing some sandwiches, what would you like?\" Amy asked from the doorway.\n\n\"Whatever you two are eating. What are your schedules today?\"\n\n\"I have some studying to do. Sis is going to her study group after we eat.\"\n\n\"Has she said anything yet?\"\n\n\"I brought it up, she is thinking about it.\"\n\n\"Okay, make her keep thinking about it,\" I said.\n\nI went to the kitchen and ate lunch with them a bit later. Samantha headed for her study group after she had lunch.\n\n\"I need to do some work,\" I told Amy.\n\n\"You are not supposed to be working,\" Amy said.\n\n\"You two were playing in the pool. I am sending Sam some email about the men's store and the limo website.\"\n\n\"When are you going to have Lori here again?\"\n\n\"You think she would come to our business meeting?\"\n\n\"Probably. You are going to have a lot of women here and only three guys.\"\n\n\"Sounds about right,\" I said. \"We will get to watch all of you.\"\n\n\"Are Linda and Rachel coming?\"\n\n\"If you and your sister can talk her into it, she may.\"\n\n\"Come with me, no more work.\"\n\nWe grabbed some sodas then went outside. Amy laid back in a recliner in the shade, and I joined her.\n\n*****\n\nWe sat outside and talked until about 2:30. \n\n\"Do you have to study all weekend?\" I asked as we went back in the house.\n\n\"No, just some reading. How much flexibility do we have with spending the money?\"\n\n\"It is yours, you can spend it on what you want, within reason. Is there something you are thinking about?\"\n\n\"Well, sis and I were talking...and...we...I don't know.\"\n\n\"Amy, are you two wanting to send your mom more money?\"\n\n\"Can we?\"\n\n\"If that is what you want to do, of course.\"\n\n\"We have to figure out how to get it to her so our dad won't get it and spend it.\"\n\n\"How do you send her money now? Does she have a bank account?\"\n\n\"She has a bank account, but it is just for the automated deposit of the disability checks.\"\n\n\"Can your father access it?\"\n\n\"He can, but mom usually picks up the money. They don't have a checking account or anything like that.\"\n\n\"If your father is only expecting the disability checks. You can have money deposited directly into that account. Does your father ever check the statements?\"\n\n\"No, he wouldn't know how...and he stays drunk.\"\n\n\"Let me make a suggestion. Go to the bank and set up a wire transfer to her account. Then call her and tell her how much you added and she can withdraw all of it at one time.\"\n\n\"She doesn't need much more, we just thought we could help her some more. If we give her too much, dad will figure out something is up.\"\n\n\"That's fine, honey.\"\n\n\"I hate it that she still has to live like that. Mom is really smart, she is just stuck with our dad.\"\n\n\"Then you talk to her and see how you can work it out.\"\n\n\"But it is okay if we send her more money?\"\n\n\"Yes. You help your mom as much as you can.\"\n\n\"Okay, thanks. I'm going to get my computer and study.\"\n\nAmy sat in the den to read and work on her computer, so I took my computer there and sat with her. There were a lot of emails going back and forth between the limo investors. They were asking questions, and Lori was answering them. She had also worked out a schedule for everyone to pitch in and help get the offices set up. She had sent me an email asking if she needed to go ahead and get phones for the office. I told her yes and told her to go get another cell phone for herself for business. Amy was looking over at my computer.\n\n\"Is Lori going to be able to handle the business by herself?\" Amy asked.\n\n\"I'm sure she can. I need to make sure she doesn't get overloaded because she is finishing up her degree this semester.\"\n\n\"I don't think sis will be back before you leave for the airport. I'll go with you,\" Amy said.\n\n\"Her plane is supposed to land at 10:05.\"\n\n\"Did she say what happened with Sam?\" Amy asked.\n\n\"She said she would talk to her tonight. I think she was with someone.\"\n\n\"James, why do you think sis is so much stronger with this than I am?\"\n\n\"Honey, if I was going to guess...I think it is because you are older and you have had more time to suppress these feelings when you had them. You probably were experiencing them and didn't understand them and have pushed them down deep. I think in time, you will be like your sister.\"\n\n\"I don't know. Sis has always been a lot different than I am. She is so much smarter and has always been more in touch with her feelings.\"\n\n\"I think some of that is because you were always there to protect her.\"\n\n\"Maybe.\"\n\nWe worked and talked until about 5:30.\n\n\"What do you want for dinner?\" Amy asked.\n\n\"Just order a pizza, no need to cook.\"\n\n\"Are you sure?\" Amy asked.\n\n\"Yes.\"\n\nAmy called in the order for the pizza.\n\n\"You may want to put some clothes on,\" I told her.\n\n\"I'll grab a robe when it comes.\"\n\nAbout 6:30, we let the pizza delivery guy through the gate. Amy grabbed some money and a robe and went to the door and got the pizza.\n\n\"Come to the kitchen,\" she said.\n\nI poured us some wine while she got some plates. We ate and talked for about an hour.\n\n\"You think sis can get into med school here?\"\n\n\"I think she can if that is what she decides to do.\"\n\n\"She should.\"\n\n\"Help her make the decision.\"\n\n\"I will.\"\n\nAbout 9:00, Amy went upstairs and put on some clothes. We left for the airport about 9:30.\n\n*****\n\nAbout the time we pulled into the airport, my phone rang. I handed it to Amy, and she answered it.\n\n\"Hi! Okay, we are just pulling in. Okay,\" Amy said.\n\n\"She is walking through the airport to get her bag,\" Amy told me.\n\n\"Tell her we will drive around the airport.\"\n\n\"Okay. About 15 minutes or so,\" Amy said to Dawn.\n\nI took the long way through the airport and circled a few times. My phone rang, and it was Dawn. She was waiting in front of the terminal.\n\nWe made it through traffic and saw her standing. We pulled up and stopped. Amy jumped out and hugged Dawn and kissed her. I got out and kissed her, then tossed her bag in the back. Dawn got in the front, and Amy got in the back.\n\n\"This is has been a long week,\" Dawn said.\n\nWe drove back to the house. Samantha came out to hug Dawn and kiss her. We went in, and Dawn sat on the sofa like she was tired.\n\n\"Tired?\" I asked.\n\n\"It was a busy week,\" Dawn said. \"How was your week?\"\n\n\"Good. Linda and I met with Walt, the guy from the men's store in New York. He is ready to go, and Linda's people are taking the lead. He says he can be relocated and ready to go by the end of the month.\"\n\n\"Good, let them do all the work,\" Dawn said.\n\n\"He already has a business plan and all the contacts for buying inventory. He even has a tailor that wants to retire here and work for him.\"\n\n\"Sounds good.\"\n\n\"What did you learn?\" I asked.\n\n\"A lot. The architects made some good contacts. This is going to help with the planning of the building. They made contacts with the architects that built the other buildings. They are going to improve on the designs now.\"\n\n\"We are heading to bed,\" Amy said.\n\n\"Sam, we will talk in the morning,\" Dawn said.\n\nAmy and Samantha went upstairs.\n\n\"Has Sam said anything yet?\" Dawn asked.\n\n\"Not yet, but Amy said she saw med school on her wish list. I think she got sidetracked with what happened with Mr. Dain.\"\n\n\"Great. How did it go with Linda and Rachel staying here?\"\n\n\"Samantha and Amy took Rachel to bed with them so Linda and I could have some time together.\"\n\n\"Good. I hope that went well.\"\n\n\"It did. Linda finally let me do her ass.\"\n\n\"Really? Did she enjoy it?\"\n\n\"Very much.\"\n\n\"Good.\"\n\n\"So, what is going on with Samantha?\" I asked.\n\n\"I'll explain it to you before I talk to her. Sam is really starting to show a lot of what I have been going through the last few years. I really do think the two of us are feeding off each other.\"\n\n\"What does that mean?\"\n\n\"What happened with her when she went to the bank happens to me. I have told you that I feel you when you are with me when I am with a guy the first time. There is more to it than just that. If I am around a guy that hasn't had sex with me before and he thinks he is going to get to do that, I get the feelings Sam gets. I have just been keeping them pushed down.\"\n\n\"You feel what she was talking about? You never said anything.\"\n\n\"Honey, I am still working through some of the things I need to tell you about. I wasn't sure how you would feel...knowing how much I was getting off on how bad a guy wanted to fuck me.\"\n\n\"I would enjoy knowing you were getting off on that.\"\n\n\"James, the feelings are incredible. What Sam was describing is something I really have to work hard to control. I get so in tune with a new guy's feelings...his excitement...his arousal...his lust. What Sam was feeling is an incredible consumption with the guy's lustful desires.\"\n\n\"Honey, I'm sure all guys that think they are going to have sex with you are full of lust for you.\"\n\n\"It is more than just that. I'm like Sam, I can't explain it. It's like my body...gets a hard-on.\"\n\nI giggled.\n\n\"I don't know how else to explain it. I can feel the guy's arousal and how his cock is swelling and wanting me.\"\n\n\"Sam said she couldn't get satisfied. Do you?\"\n\n\"Why do you think I keep them from coming for so long. I have to get off numerous times...then I need you inside of me...bad.\"\n\n\"That is what happened when she came home.\"\n\n\"I don't know how she got through the day,\" Dawn said. \"I guess I am going to have to spend some time with her so we can discuss all of this.\"\n\nDawn leaned into my shoulder and held my arm.\n\n\"James!\" She exclaimed.\n\n\"Sorry. I was just thinking about the next time you do someone new.\"\n\n\"You want me to feel that way?\"\n\n\"Sure. It sounds incredibly erotic.\"\n\n\"It is...\"\n\nShe leaned back into my shoulder. A while later, we went to bed.\n\n*****\n\n\"What do I wear to the class?\" Samantha asked when I checked on her about 6:30.\n\n\"Street clothes,\" I told her.\n\n\"What are street clothes?\"\n\n\"Jeans and a shirt.\"\n\n\"What are you wearing?\"\n\n\"My Gi. I have to get ready, tell your sister to get ready, we need to be there early.\"\n\n\"Why can't I have a Gi?\"\n\n\"This is an intro self-defense class. You decide to take lessons, and you will get one.\"\n\nI went back to the bedroom; Dawn was drying her hair.",
        "\"Will one of your old Gi's fit Samantha?\" I asked.\n\n\"Yes, but she will need her own.\"\n\nI went to the closet and got my black Gi and put it on. After that, I grabbed one of my black belts and put it on. Dawn was in the bedroom in a pair of sweatpants and a sweatshirt.\n\n\"I hope you are wearing a sports bra this time,\" I said.\n\n\"I am.\"\n\nWe grabbed a bag and some extra towels and headed down the stairs. Samantha was in the kitchen, making coffee and packing a lunch.\n\n\"Dawn, don't you wear a Gi and a belt?\" Samantha asked.\n\n\"I'm going to play a civilian today.\"\n\n\"What?\"\n\n\"Dan likes for me to play like I don't have any training and use me for demonstrations.\"\n\n\"Oh, so you are not supposed to fight.\"\n\n\"You'll see.\"\n\nAmy came down wearing some sweats while I got some coffee.\n\n\"You look...mean,\" she said, looking at me in my Gi.\n\n\"I don't wear this much anymore.\"\n\nAfter we grabbed a little bit to eat and some coffee, we headed out about 7:00.\n\n*****\n\n\"Okay you two, I am playing a part, so don't give me away,\" Dawn said.\n\nWe got out and walked into the police gymnasium. Dan was there with some of his students putting down some mats.\n\n\"Hey, you two!\" He said as he walked to us.\n\n\"Hey, Dan,\" Dawn said and hugged him and kissed him.\n\n\"Dan, you met Samantha, this is her sister Amy,\" I told him.\n\n\"Hi, you two.\"\n\n\"Hi. Hi.\"\n\n\"Everyone will be showing up soon,\" he said.\n\nDawn took the girls and walked over to the bleachers and sat.\n\n\"Those two definitely need to learn self-defense,\" Dan said.\n\n\"Samantha thinks she wants to go all the way. Her sister is not that interested.\"\n\n\"Is Sam tough?\"\n\n\"We'll see.\"\n\nI helped Dan, and his students get everything set up. We tested the huge screen that he was going to show videos on. Women were showing up now.\n\n\"How many are you expecting?\" I asked.\n\n\"Forty have signed up, but they may have brought others.\"\n\nAbout 7:45, Linda and Rachel came in, and Samantha ran to them to say hi. She escorted them to the bleachers so it wouldn't look like I knew them.\n\nBy 8:00, there were a lot of women in the gym mingling and talking.\n\n\"Ladies!! It is time to start! If you could form a couple of lines here, we will get started,\" Dan announced.\n\nAbout forty women made two lines across the gym. Dan and I were standing in front, and his students were lined up behind us.\n\n\"I want to thank all of you for coming today. We have a good crowd, and I have plenty of my students here so there will be plenty of one on one instructions. My name is Dan Darden, I am a Lieutenant with the Police Force, and I am also the hand to hand combat instructor. I have been studying martial arts since I was about fifteen. I have learned several different forms of martial arts and have combined parts from all into this self-defense class.\"\n\n\"To my right is Dr. James Smith. He and I met in college at a tournament, where I kicked his ass.\"\n\nThere was some laughter.\n\n\"But, I had the advantage of surprise on him. He was not familiar with the form of martial arts I was using at the time. Don't underestimate him. He held several black belts in other martial arts before we started studying my style. He now holds a black belt and the rank of Expert in Krav Maga. Krav Maga is an Israeli form of self-defense that was developed during the twentieth-century and is still taught to all their military.\"\n\n\"Krav Maga has taken the best parts of many styles of martial arts and rolled them into a style that is often called street survival. We are not going to teach you any particular style of martial arts today. What we are going to do is teach some basic self-defense moves that could save your life.\"\n\nDan talked for another 15 minutes about the basics of self-defense.\n\n\"If you are being attacked by someone, there are some basics of self-defense you need to understand to survive. Number one, if your attacker can't see, he can't attack you. Number two, if he can't breathe, he can't attack you. Number three, if it is broken, he can't grab you with it. Number four, if it is dislocated or broken, he can't chase you. And lastly...if your attacker is dead...he can't attack you.\"\n\n\"Self-defense using your hands and body can be as lethal as if you were using a gun. Yes, if you can escape your attacker, that is the first thing to do. But...if you can disable your attacker it is even better. Today we will be teaching you how to escape from your attacker, and we will also be teaching you how to disable an attacker. You need to know and understand that some of the moves we are going to be teaching could kill someone. That is something you must understand and be ready to accept.\"\n\n\"How many of you have a carry permit and sometimes car a weapon?\" He asked.\n\nA handful of women raised their hands, including Linda and Rachel. Dawn didn't.\n\n\"I know in this state you had to go through a training class before you could get your carry permit. I hope the instructor made you very aware that there can be consequences to using deadly force. I hope before you decided to carry a handgun, you thought through what you were doing and were prepared to take someone's life if that is what it took.\"\n\n\"I want you to understand that people like myself, my students, and Dr. Smith, can easily take someone's life using our hands. As a police officer, I carry a weapon all the time. But if something happens and I am too close to get my weapon out during an attack, I have the ability to use what I know to disable or kill an attacker. We are not here today to teach you how to kill someone, but, some of the defensive techniques we are going to teach you can cause permanent injury and even death. Once you see them, you will understand.\"\n\n\"What our goals today are is to first to teach you how to escape an attacker. Then teach you how to disable an attacker if you can't escape. But the most important thing we are going to start teaching you is how to avoid an attack in the first place. The one thing that is the most important of all is to be alive after an attack. If that means you have to kill your attacker, then that is what you will have to do.\"\n\n\"Any questions?\"\n\nOne lady raised her hand.\n\n\"Yes.\"\n\n\"Are there classes we can take after this?\"\n\n\"Of course. You can take classes in self-defense from most martial arts schools. I do have a school that teaches more advanced methods you are welcome to check out.\"\n\nAnother hand went up.\n\n\"Yes.\"\n\n\"Why is he wearing a Karate uniform, and you are only wearing sweats?\"\n\n\"I asked Dr. Smith to wear his uniform so you could see it. I don't usually wear my uniform and belt during instruction, but that is a Krav Maga style. Other styles of martial arts do wear their uniforms and belts during training. Since I don't wear my Karate uniform when I am on the streets from day to day, and neither do you, you need to learn to fight in the clothes you normally wear. You will discover today that some of the clothes you wear can cause limitations in a street fight. That is something you have to understand and even train for.\"\n\nSamantha raised her hand.\n\n\"Yes.\"\n\n\"How long does it take to become a black belt?\"\n\n\"Good question. In most forms of martial arts, with regular and intense training, it probably will take you at least three or more years to reach the first level of a black belt. Now, to reach the level of ability that I have or Dr. Smith has, at least ten years or more of intense training. Martial arts can become something you study and get better at for the rest of your life. You can never practice too much or be too good.\"\n\n\"Any more questions? If you have questions at any time today, don't be afraid to ask. I need to get ready, so I would like all of you to introduce yourselves to my students and Dr. Smith. You all will be getting very close today.\"\n\nWhile Dan went and put on all his padding, the women came up and introduced themselves. After about 15 minutes, Dan had on all his safety padding.\n\n\"Okay, let's get started,\" I said. The women all got back in line.\n\n\"I am wearing all this padding for several reasons,\" Dan said.\n\n\"Mostly, to keep you ladies from hurting me, I hope! The techniques we are going to teach you will be demonstrated first by my students. They will not be holding back, and I don't want to get hurt. Then I will let you ladies try them on me, so don't be afraid to hit me. You won't hurt me, I hope.\"\n\nThere was some laughter. While he talked, several of his students put on safety pads.\n\n\"The first things we are going to teach you is how to get away from someone that has grabbed you either from the front or from behind. It is easier to get away from someone that has wrapped his arms around you than you may think. Remember, the first thing is to escape and then run like hell! The next thing to learn is how to disable your attacker if you can't outrun them.\"\n\n\"Something you will practice today is screaming and making as much noise as you can if you are being attacked. Your attacker doesn't want to attract attention. So if we tell you to scream, you scream as loud as you can, just as if you were being attacked.\"\n\n\"Okay, are you ready to start!\"\n\n\"Yes!\"\n\n\"The first thing to learn is how to get away from someone that has grabbed you from behind. I need a volunteer.\"\n\nNo one volunteered.\n\n\"How about you?\" He said, pointing at Dawn.\n\n\"Me?\"\n\n\"Sure, you look vulnerable. Come up here.\"\n\nDawn looked around and walked up on the mats.\n\n\"What's your name?\"\n\n\"Dawn.\"\n\n\"Okay, Dawn. The first thing I want to demonstrate is how to escape if you have been grabbed from behind. Is it okay if I wrap my arms around you and hold you like I don't want you to get away?\"\n\n\"Sure...I guess.\"\n\nDan turned them sideways to the ladies and stood behind Dawn.\n\n\"Now don't hurt me,\" he said, and the ladies laughed.\n\nI'm sure Dan meant it.\n\n\"Okay, I am going to wrap my arms around you.\"\n\nHe wrapped his arms around Dawn just below her head and held her.\n\n\"Now, try and get away.\"\n\nDawn started struggling, trying to get away from Dan.\n\n\"Okay, stop a minute. As you can see, when someone grabs you from behind, it could be very hard to get away from them. They are in a good position to control you. At this point, you have to know what to do to get away. The element of surprise is on your side because an attacker may not be prepared for you to become a fighter. Are you okay, Dawn?\"\n\n\"Sure.\"\n\n\"Okay, now I am going to wrap her up again...\" Dan held Dawn tight,\"...and this time...\"\n\n\"Yiiiiiii!!\" Dawn screamed as she reached up and grabbed his arms tightly.\n\nDawn started pushing Dan backward hard because she had surprised him. As he stumbled back, about two steps later, Dawn wrapped one leg behind his and pulled it out from under him as she shoved herself back.\n\n\"Yiiiiiii!!\"\n\nDawn pulled her knees and feet up, so she was in a ball, making sure all of her weight landed on Dan when he hit the mat.\n\n\"Offff!!\" Came from Dan as he landed on his back.\n\nWe watched as Dawn used her momentum to keep rolling backward until she rolled over his head in a flip and was on her knees behind him.\n\n\"Kiaaa!!\" She screamed and punched him twice.\n\nThe first punch hit Dan in the chest. Dawn's second punch stopped about half an inch from his throat. Dawn jumped up and made a kick to the side of Dan's head.\n\n\"Help, Police!!\" Dawn screamed as she ran away.\n\nThe room was quiet for a minute.\n\n\"...ohhhh...I hate it when she does that...\" Dan moaned as he lay flat on his back, trying to catch his breath.\n\nDawn walked back and stood at Dawn's head, looking down at him. I bent over and took his hand and helped him up.\n\n\"Ladies...I would like for you to meet Dawn Smith, Dr. Smith's deadly wife.\"\n\nThe all clapped.\n\n\"We won't be teaching you that move today...that is one Dawn came up with after many years of training. Dawn also holds several black belts and studied with me for over ten years.\"\n\nDan hugged Dawn.\n\n\"The point I wanted to show was that if you surprise your attacker, your chances of getting away are much better. And...Dawn surprised me. I wasn't ready for that...I never am with her. Just looking at her, would you ever suspect that she was capable of a move like that?\"\n\nThey mumbled and said no.\n\n\"The first time I saw her use that move was at a tournament. The lady she was fighting kept coming in on her. She turned and let her grab her from behind. The next thing her opponent knew she was lying on her back, struggling to breathe.\"\n\nDan used Dawn to demonstrate some escape moves for about 15 minutes.\n\n\"Ladies, the most important thing you must remember is to do whatever you must do to get away. Let me show you what happens if a guy is intent on raping you.\"\n\nHe had Dawn face him, and he wrapped his arms around her.\n\n\"If you are in this position and a guy has you wrapped up and is trying to pull your clothes off, there are several things you can do. I want Dawn to show you the simplest.\"\n\nDan grabbed the bottom of her sweatshirt and started trying to pull it over Dawn's head.\n\n\"Stop!! Help Police!!\" Dawn screamed as they struggled.\n\nDan had her shirt and was pulling on it.\n\n\"No!! Let go of me!!\" Dawn screamed as they struggled.\n\nThen suddenly Dawn reached down and grabbed the bottom of her shirt and pulled it up and off as Dan pulled on it. In a split second, she bent over and backed up and let Dan have her shirt.\n\n\"Help!! Police!!\" She screamed as she ran away from Dan in her sports bra.\n\nThere were some gasp and some laughter as Dawn walked back up and retrieved her shirt from Dan.\n\n\"Ladies, if a guy wants your shirt off, give it to him like that then run like hell!\"\n\nEveryone laughed.\n\n\"The first time I demonstrated this on Dawn, she wasn't wearing a bra! She didn't know I was going to demonstrate this, and her instincts took over!\"\n\nMore laughter as Dawn put her shirt back on.\n\n\"Ladies, if it gets to the point you are on the ground on your back, and some guy is trying to pull your pants or your skirt off, give it to him and get up and run. The hell with it if you are naked!\" Dawn said. \"Do whatever you must do to get away. If it means giving him your clothes, give them to him!\"\n\n\"Okay, time for a short break and a video. Everyone have a seat,\" Dan said.\n\nOne of his students turned off the lights.\n\n\"What I want you to watch is a recording of an actual attack as it took place. The Smith's were in France at a club and Dawn was attacked. Watch closely at how everyone reacts and what happens. It will be fast.\"\n\nDan pushed the remote, and the video started.\n\nWe all watched as Dawn danced, then the guy grabbed her. There were gasps as Dawn broke the first guy's elbow then punched him in the throat and ribs and dropped him. More gasp when the second guy slapped Dawn hard. Then a loud groan as Dawn pulled his arm out of his shoulder joint then broke his shoulder blade.\n\nI heard \"Damn\" in the crowd.\n\nDan stopped the video.\n\n\"As you saw, it was over in less than 30 seconds. Dawn took down two large men that attacked her before her husband or any of the security got to her. I am going to play it again in slow motion. Watch again and see what happens.\"\n\nMore groans and gasp as we watched in slow motion. Dan turned off the recording, and the lights came back up.\n\n\"Again, you won't be learning those moves today. Dawn has studied street survival fighting for well over ten years. What she did was on instinct and came from many years of practice. Now I know many of you may be thinking that she was dressed pretty provocatively and may have brought on the trouble. Is that fair? Should a woman not be able to dress how she pleases and go out to a club without being held responsible if she gets attacked or raped!\"\n\n\"No...no...no...\"\n\n\"I hear too many women being accused of leading a guy on that rapes her, or a woman blaming herself if she was attacked because of the way she was dressed. Ladies, that is bull shit!!\"\n\nSome of the women clapped.\n\n\"Dawn, what were the results of you defending yourself?\" Dan asked.\n\n\"I broke the first guy's elbow, crushed his throat so he couldn't breathe, and broke several of his ribs. His buddy got his arm dislocated, and his shoulder blade broken for his efforts.\"\n\n\"Dawn, did you think you may kill the guy when you hit him in the throat?\"\n\n\"Sure, but the only thing on my mind was stopping him, and that meant incapacitating him. The fastest way to stop an attack is striking in the throat. If he can't breathe, he can't attack.\"\n\n\"Ladies, get ready because we will be teaching you how to strike someone in the throat,\" Dan told them.\n\nDan went over some basics for a few minutes. Then they all practice for 30 minutes.\n\n\"Let me demonstrate the next thing you need to learn,\" Dan said. \"Dawn, can I use you...and don't hurt me this time, please.\"\n\nDawn stood facing him, and he reached out and grabbed her by her throat.\n\n\"Okay, now, things have gone too far, and he now has his hands around your throat and is going to choke you to death. What do you do? We are going to slow this down so you can see the easiest way to stop this attack. Go ahead, Dawn.\"\n\nDawn reached up and grabbed the side of his head and placed her thumbs over each eye.\n\n\"The easiest thing you could do in this situation ladies is to gouge both his eyes out,\" Dawn said. \"Once I grab him like this, I can quickly jam my thumbs into his eyes. I can guarantee he will let go of you when your thumbs crush his eyeballs.\"\n\n\"Ewwww,\" came from the ladies.\n\nDawn and Dan separated.\n\n\"I heard some groans,\" Dan said. \"If your life depends on it, you can poke out someone's eyes! You do what you have to do to get away! Remember that!\"\n\n\"In some self-defense classes they may teach to jam your fingers into someone's eyes like the Three Stoggies did, that will work, but if you miss you may break a finger and you may not get but one chance. When you grab someone like I did quickly, they may only think you are grabbing them. They will not be expecting you to jam your thumbs into their eyes.\" Dawn told them.\n\n\"There are release moves that you can perform to break a hold like this and we will show them to you later. But, those moves require a lot of practice. You all saw what Dawn did when the guy grabbed her. She grabbed his hand and held it, then hit him as hard as she could on the back of his elbow and broke it. That one is easy to learn.\"\n\nEveryone grouped up and were instructed on what we had been showing them until lunchtime. By then, many of the women were doing a good job. I was watching Linda as she worked with one of the students.\n\nWe broke for lunch, and all of us were sitting on the bleachers with Linda and Rachel.\n\n\"Dawn, how long have you been studying this?\" Linda asked.\n\n\"I started after I met James in Grad school...I would have been 22 then.\"\n\n\"You are pretty good.\"\n\n\"I had a good teacher.\"\n\nDan came over and sat with us.\n\n\"Dawn, I am going to start having you tell me what you are going to do...that hurt,\" he said, and the girls laughed.\n\n\"You are just getting slow in your old age,\" Dawn said.\n\n\"Hey, I'm only a year older than you!\"\n\n\"How are Katie and the girls? She didn't come?\" Dawn asked.\n\n\"She is taking the kids to her parents for the weekend.\"\n\n\"I haven't seen her in a while.\"\n\n\"She has been busy with the girls. James keeps telling me to bring her and see your new house.\"\n\n\"You haven't seen it have you?\"\n\n\"Not yet.\"\n\n\"What are you two doing tomorrow? We are going to grill out for lunch, why don't you and Katie come?\" Dawn said.\n\n\"That sounds like fun.\"\n\n\"You two come, Dan, I'll show you around,\" I said.\n\n\"Let me call her, and I'll let you know.\"\n\n\"Tell her to come. With the kids gone, you two can have some adult fun,\" Dawn said.\n\n\"Okay, I'll call her.\"\n\nDan got up and went and talked to a couple of his students then walked off.",
        "\"I would like to have some adult fun with him,\" Rachel said, and Samantha and Amy laughed.\n\n\"Are you learning anything?\" I asked Linda.\n\n\"Sure. I have never thought about some of the things you two have taught,\" Linda said.\n\n\"We brought a light lunch with us, you want to join us?\" Dawn asked.\n\nThe six of us sat in the bleachers as we ate some sandwiches. Dan came back a few minutes later.\n\n\"Katie said good since she hasn't seen you in a long time.\"\n\n\"Good. Make sure I give you instructions to the house,\" Dawn said.\n\n\"Dan, what do you want to do after lunch?\" I asked.\n\n\"I want to show some full speed one on one fighting between Dawn and me. If she doesn't kill me, I want the two of us to demonstrate some full contact fighting.\"\n\n\"Samantha, are you learning anything?\" I asked.\n\n\"Yes! This is fun!\"\n\n\"How about you, Amy?\"\n\n\"I'm not sure I could poke someone's eyes out.\"\n\n\"You could if you were going to be killed or raped,\" Dawn said.\n\n\"Dawn, how do you practice that with your thumbs?\" Linda asked.\n\n\"Holding a melon and driving your thumbs into it. If you can do that, you can crush someone's eyeballs.\"\n\n\"Yuk,\" came from Amy.\n\n*****\n\nWhen we started back, Dan reviewed some things. He also told the ladies he wanted to hear them screaming when they were breaking holds and running away.\n\nHe had Dawn attack at full speed and full contact. With his padding and moves, he could take the punches and deflect the blows. While he was taking off his padding, Dawn talked to the women some more.\n\n\"Okay, the padding is off now. Dr. Smith and I are going to demonstrate some actual fighting so you can see how training allows you to defend yourself in different ways. We haven't rehearsed this, we will have to depend on what we know to defend ourselves.\"\n\nDan and I faced off. He came in for a grab, and I threw him behind me. The ladies gasped. We went through several attempts at grabbing each other, ending up on the mats.\n\n\"With training, you have other choices for defending yourself if someone lunges for you,\" Dan said.\n\nHe turned to one of his students.\n\n\"Mat, come up here with the knife,\" he told him.\n\nHe came up with a rubber knife. Dan demonstrated knife defense for a few minutes.\n\n\"The one thing you need to learn about defending against a knife is that unless you have a lot of training, you are going to get cut. If you get cut, you keep fighting. What we are going to show you is how to grab the arm and disable the attacker quickly.\"\n\nFor another hour, we instructed the women on basic knife defense. Dan made sure they were all screaming as they fought. After a break, we came back to talk about defense against a gun.\n\n\"Now ladies, we do have to discuss what to do if your attacker has a gun. There are two things to consider. First, he is going to kill you. Second, if he doesn't kill you, he is probably going to rape you. You have to make the decision as to how to survive. One way may be just to let him do what he wants and live another day. Or, if you make the decision, he is going to kill you anyway, what can you do to survive?\"\n\n\"Against someone with a gun, you may have to let him get in close and even be on top of you so you can make a fatal or disabling strike. That is just the facts. It takes a lot of practice to take a gun away from an attacker, and we will not be showing you how to attempt that. What we are going to show you is how to use some of the things you have already learned. One of the basic defenses goes back to the eyes. You may have to let him get close enough he drops his guard, and you take out his eyes.\"\n\nDan used Dawn to demonstrate some defenses against a rapist with a gun, even getting on top of her on the mat while she demonstrated gouging his eyes and striking his throat. After that, we spent a few hours using what they had learned in the morning as a defense if being raped.\n\nBy 4:00, all the ladies were hot and sweaty and tired.\n\n\"What you have learned today is the basics, remember that,\" Dan said. \"Keep your defense simple until you learn more. We hope you have learned something today that will be useful. If you want to learn more, I invite you to call and make an appointment to come by my studio one night to watch a class. I teach three nights a week and have an all-day class on Saturday. Please look into further studies someplace. Thank you for coming.\"\n\nThere was applause and people came up and talked to us. Some of the women had gathered around Dawn and were asking her questions. Dan came over and asked what time to be at the house, we told him whenever they could get there. By 4:30, we were heading back home.\n\n\"I hope you two learned something,\" Dawn said.\n\n\"I did!\" Samantha exclaimed. \"When can I start more training!\"\n\n\"What about you, Amy?\"\n\n\"That was hard work.\"\n\n\"Both of you need to learn more of the basics,\" Dawn told them. \"We can teach you, or you can take classes.\"\n\n\"We want to make sure both of you can defend yourself if needed,\" I said.\n\n\"Cool!\" came from Samantha.\n\n\"Talk to Dan tomorrow,\" I told them.\n\n\"I never told you, honey, that Dan had the hots for me back in school,\" Dawn said.\n\n\"I know he did.\"\n\n\"Did you know he used to come into the locker room when I was changing and sneak looks.\"\n\n\"Uh, oh!\" Came from Amy in the backseat.\n\n\"I'm sure you let him look!\"\n\n\"I did, on more than a few occasions.\"\n\n\"Did he do more than look?\" Came from Samantha.\n\n\"He wanted to. Once I was in the showers, and he came in naked and wanted to fool around. That was long before he was afraid of James!\" Dawn said, and the girls laughed.\n\n\"Did you two fool around?\" I asked.\n\n\"Well...I wasn't quite as wild as I am now.\"\n\n\"Is that a no?\"\n\n\"Sort of!\"\n\n\"What does sort of mean?\" I asked.\n\n\"We felt each other up in the shower for a while, then I gave him a blowjob.\"\n\n\"Tramp!\" I exclaimed, and they all laughed.\n\n\"He tried a few more times, but I said no, honey.\"\n\n\"I bet you did.\"\n\n\"Oh, it was tempting, he is a bit larger than average, but I said no because of you, honey.\"\n\nThe girls were laughing in the backseat as we drove. Samantha started bugging Dawn, asking who else she had done in college. Dawn and I had told each other about all our past lovers, but she had never mentioned Dan.\n\n\"I wonder if I could talk Katie into letting Dan fuck me,\" Dawn said.\n\n\"Here it comes!\" Came from Samantha.\n\n\"I doubt it,\" I said.\n\n\"I don't know, she always hung around you at class. Did you ever get to take any peaks, honey?\"\n\n\"Just once.\"\n\n\"Oh, really! What happened?\"\n\n\"I was in the locker room, and your bra was in my bag. I walked over to the women's locker room and knocked, and no one answered. I was going to take your bra in and put it in your bag. When I walked in, Katie was coming from the shower.\"\n\n\"And you two didn't fool around?\"\n\n\"I took a quick look, you were in the other showers.\"\n\n\"And that was it?\" Dawn asked.\n\n\"Yes.\"\n\n\"Liar!\"\n\n\"What?\"\n\n\"I stood and watched her give you a blowjob you lying ass!\"\n\nI started laughing, and we all laughed.\n\n\"Sorry, about that,\" I said.\n\n\"I guess it was fair.\"\n\n\"Dawn, you think you could talk her into it?\" Amy asked.\n\n\"I don't know. After having two girls, she may be fairly conservative.\"\n\n\"Or, not,\" Samantha said. \"She may be getting bored being a mom.\"\n\n\"Good point, Sam. She was pretty wild in college. She and Dan didn't hook up until he was on the police force.\"\n\n\"I guess we can find out,\" Samantha said.\n\n\"I guess we won't,\" I replied.\n\nI looked over at Dawn, and she smiled at me.\n\n*****\n\nWhen we got to the house, I ran up to the bedroom to shower and clean up so I could go to the limo meeting at 7:00. \n\nDawn had a sandwich ready for me when I came back down.\n\n\"How long will you be?\" She asked.\n\n\"I'm not sure. We have a lot to go over.\"\n\nI finished my sandwich and grabbed my computer bag and headed out the door at about 6:15. I pulled into the old car lot right at 7:00. I saw everyone inside checking out the building.\n\n\"Hey, Dr. Smith,\" one of the guys said as I walked in.\n\nI found Lori, and we got everyone organized .\n\n\"As you know, Dr. Smith and I went to look at vehicles for the last few weeks. We have decided that the place in St.Louis is the best fit for us. They had the best prices, quality, and the delivery date of the two. We also think that with them being closer, we will get better services. I emailed everyone the final list of vehicles we are going to purchase and the final price. Does anyone have any questions?\" Lori said.\n\n\"The list looks good. Why did you add the buses?\" Gregg asked.\n\n\"After looking at them we decided that the 20 passenger plain buses would be another market we could get into,\" Lori added.\n\nThere was about 20 minutes of discussion about all the vehicles.\n\n\"The total for all the vehicles was a little over 2.2 million. I am going to keep the capitalization at 2 million. Anything over that will be covered as a loan from either me or the bank. I emailed everyone the number of shares you will receive and what percentage you will own. There will be 40,000 shares of stock available at $100 a share,\" I told them.\n\n\"The total everyone but Lori and I invested in the business is $900,000. Lori has purchased a 10% share by investing $200,000. I have added another million to the pot, which brings the total to 2.1 million. However, this is your business, and you have to make it work. I am only going to take a 25% share. The total purchased will take 16,000 shares of stock. That leaves 4,000 shares of stock in reserve for others to invest in the business as they can. Everyone working for us can buy new shares or additional shares as they can.\"\n\n\"Dr. Smith, you should own half?\"\n\n\"I am only going to take 25% for my 1 million. The other $500,000 I hope to get back later. As Lori has explained to everyone, her plans and goals are to franchise this plan once we all prove it works. At that point, Lori and I will create another company to run the franchise. I will get the rest of my money out that way.\"\n\n\"Can we buy into the franchise company?\" Someone asked.\n\n\"That will be up to Lori. We have to make this work first. Since this entire business was Lori's idea, she has invested heavily. She will be the operations manager, but it will be up to all of you to make this work. I have no plans to be involved in the daily operations.\"\n\n\"Lori, what is the building going to cost us?\"\n\n\"We have a silent partner that owns this building and is going to let us use it for free until we can afford it. I hope that we are going to be successful enough we can one day buy the building and property. However, a day may come, we have to find another location. Ms. Williams bought the property to hold in anticipation it will be worth more than she paid for it one day,\" Lori said.\n\n\"Right now, all the vehicles should arrive at the end of January. Our first big event will be the week of Valintine's Day. There is a new hotel and a new store opening that week, and we will be providing transportation around town and to and from the airport all week. So, work with Lori to plan around that week because we will need plenty of drivers to be on call all days and hours that week,\" I told them.\n\n\"What is the store?\"\n\n\"That is a secret right now, but it is going to be a big event,\" I said.\n\n\"The first of November the business will officially begin operation. Some additional things that must happen before we open for business the 1st of February will be to clean up here, do some painting, get some signs up, and hire part-time help for operations and keeping the vehicles clean. We want to hold the cost down as much as we can, so everyone that is a part owner can pitch in to help. I am working on a list of things that need to be done. I will email it out and hope some of you will sign up to work, so we don't have to hire people to do the work,\" Lori told them.\n\n\"We can do that!\" They said.\n\n\"Over the next month, I will be releasing the marketing plans. Everyone will be involved in marketing and advertising. We already have some logo designs that we are going to use for the name of Allure Limousines. We know what other companies are charging for their services, we will start at that rate. Additionally, what the drivers make will be slightly more, but, and this is what will make us different, the services and quality we are going to guarantee should get all of you bigger tips,\" Lori told them.\n\n\"And don't forget that if you are a part owner, you will share in the profits,\" I told them. \"When we become profitable will be up to all of you. Lori and I have discussed one other thing. Beyond what the owners will receive once we are profitable, we have decided that everyone that works for us will participate in a profit sharing plan.\"\n\n\"Yeah!!\" They cheered.\n\n\"Lori is preparing a spreadsheet she will share with everyone that will project when we will become profitable based on the total hours of rental. We want everyone to have a full understanding of the business.\"\n\n\"Dr. Smith, we have heard that you are installing video recording equipment in the cars?\" John asked. \"Why?\"\n\n\"Well...I think all of you know that things go one in the back of the limos when you are driving. I thought that some of the people might like a recording of...all the fun they have.\"\n\nThere was some laughter.\n\n\"Not everyone will want a recording. But, we want all of our passengers to have a good time and a memorable time.\"\n\n\"Are we going to sell them the recording?\"\n\n\"No. What you as drivers are going to do is give them the recording for free.\"\n\n\"What? Why?\"\n\n\"I know I have had some good times in the back of limos...haven't I Bryan?\"\n\n\"Oh, yes!\" Bryan said.\n\n\"If the driver had offered me a DVD of all the fun I had, I would have been inclined to offer them a large additional tip. This is where your salesmanship and marketing comes in. It will be up to you to entice as large of a tip for the recording as you can get. And every driver gets to keep all the tips!\"\n\n\"Yeah!\"\n\n\"Does that make sense?\"\n\n\"Sure does!\"\n\n\"No blackmail, though!\" I exclaimed.\n\n\"Something I need input from everyone on is if we will provide the passengers with the option to turn off the recording at the beginning of the ride. Lori and I are still thinking through this, so email us with your ideas.\"\n\n\"Everyone...my goal...or our goal, is to offer a product far superior to anything any other local limo company can provide. All of us know that the large part of the limo business is from repeat customers. We not only want all of our customers to come back, but we want them to tell their friends about us, so they stop using the other companies. I fully intend to put all the other local companies out of business! Our company will be the best! That means the cleanest cars! The best-dressed drivers! And the most professional and courteous staff! If we do this, we will be the best!!\" Lori shouted, and everyone cheered.\n\nAfter the talk died down, I got everyone's attention.\n\n\"For all the drivers, Lori has already talked to you about being professionally dressed. For the men, that means dark suits, white shirts, a tie, and shined shoes. For the ladies, you decide on dark suits or a coat and skirt. Decide what works best for you and is the most comfortable,\" I said.\n\n\"I know some of you have some concerns about spending money for nice clothes. I know the guys from the sheriff's department, and the police department may not have a wardrobe of nice suits. Neither Lori or I want any of you to go out and spend a lot of money on clothes, but we do insist that you look nice. You have three months to work on your wardrobe, but...if any of you have questions as to how to dress or may not have the money between now and the 1st of February to invest in clothes, let me know as soon as you can. I can help the ladies, and the guys acquire some nice clothes at a lower cost than you may think.\"\n\n\"That is about all we have to announce,\" Lori said. \"We will be here as long as we need to be to go over anything any of you want to discuss. There is one last thing, though. Dr. Smith and I are very serious about Allure Limousines, providing the best service available. That means everyone from the part-time staff to the full-time staff will be professional and courteous at all times, no exceptions. All employees and owners will sign a contract attesting to the level of professionalism that is expected. Under no circumstances will any unprofessional conduct be tolerated. I hope all of you understand how important this is.\"\n\n\"And because we will all be holding each other accountable, the following clause will be included in both the employment contract for non-owners and in the contract for part-owners. For non-owners, any complaints from customers will not be tolerated. If there is a complaint, Dr. Smith and I will investigate it and discuss it with the person involved. If there is a second complaint, it will result in immediate termination of employment. For part-owners, if we receive a second complaint the corporation reserves the right to purchase your share of ownership for what you paid, plus 5%, then you will be terminated and no longer an owner. We are that serious about the level of services we will offer,\" Lori added.\n\n\"I don't think this is too much to ask. Lori and I have been in discussion about hiring drivers from other companies, and even hiring some of the independent drivers to work for us full-time. Lori has already informed me there are people out there she will not hire. She says most of you already know who these people are and have worked with them.\"\n\n\"We will be catering to people in this area from all levels of income. Every customer will be treated the same even if they are a high school student hiring us for a prom, or a billionaire hiring us for transportation. Please keep this in mind constantly. If anyone has a problem with the policy, let us know now,\" I said.\n\n\"Any questions?\" Lori asked.\n\n\"If we want to purchase stock, how will that be done?\"\n\n\"I think that purchases need to be made in blocks of ten shares, or $1,000. There is $400,000 available right now. If you want to finance purchases by applying earnings to it, we can work out a plan. There may be some of you that will purchase a larger chunk right away. Talk to Lori or me about it, and we'll work with you. If you own 1% of the company or 200 shares, when we have the first million to distribute, you will receive $10,000 for every 1% you own.\"\n\nThere was some talk.\n\n\"Ladies and gentlemen, we will have the best and the most profitable limo company there is!\" Lori yelled.\n\nThey all cheered.\n\nLori and I stayed and discussed a lot of things with everyone until about 9:30. They all seemed to be excited. Some of them were asking questions about recruiting other drivers from the other companies. Lori and I told them we would be paying a recruitment bonus.\n\nBy 10:00, Lori and I had collected all the money and handed out the contracts to be signed and returned. Everyone left happy. We were sitting in one of the large offices.\n\n\"I think this should be your office,\" I told her.\n\n\"I have a lot more work to do before February than I thought I did.\"\n\n\"Just concentrate on graduating first. We can get everything else done,\" I told her.\n\n\"I will be happy to be out of school in December.\"\n\n\"I hope you are planning on being the marketing department after your graduate and before we open. Get the final plans for the marketing brochures drawn up as soon as you can and any ideas. I can get some great help from Linda's people. I want brochures and all the other material printed and ready to go by Christmas.\"\n\n\"How are we paying for that?\" Lori asked.\n\n\"I will cover some before we have to hit the line of credit from the bank. Email everyone and ask how they want their name to appear on their business cards. Once we have that and the artwork ready print 1,000 for each person. They will have the company phone number and email on them, so get the phones setup. I will have the server for email up soon.\"",
        "\"James, can I hire someone to help with the marketing?\"\n\n\"Get your ideas together, and I will see if Linda will let us use her marketing people. They are already working on everything for the store. Maybe we can work it in with that.\"\n\nLori was looking at all the checks as she sat at a desk.\n\n\"James...I'm nervous. What if this doesn't work?\"\n\n\"It will work. What are you doing Monday morning?\"\n\n\"Working on this?\"\n\n\"Meet me at the bank at 9:00. We have some deposits to make. Then we will call the place in St. Louis.\"\n\n\"What else do we need to do Monday?\" Lori asked.\n\n\"We need to get you a business cell phone and work on getting phones for the office. Once we have a hardline phone number, we will get a vanity number. I am hoping we can get 4Allure, or 800-425-5873, or something similar.\"\n\n\"That would be cool. I need to make sure everyone has a cell phone.\"\n\n\"I'm sure they do, but make it a requirement. I will have our website started as soon as I can. Allurelimos.com is the web name. Everyone will also have a business email address that they will need to set up on their phones...Lori, you have a lot to do,\" I told her.\n\nShe smiled at me.\n\n\"Lori, you need to account for all the time you spend setting things up and what all you have to do. All these small pieces need to become part of your business plan. I'm sure you haven't thought of everything.\"\n\n\"You're right!\"\n\nLori and talked until about 11:00, then we headed out. I got to the house about 11:30, everyone was still up.\n\n\"Did you get everything worked out?\" Dawn asked.\n\n\"We are getting there. Lori gave everyone a pep talk and told them what she expected of them. They all seemed excited. But she has a lot to do before the 1st of February.\"\n\n\"Get her some help if she needs it.\"\n\n\"I will. We are going to see if Linda's marketing people that are working on the store will design the materials for the limo company. I have got to call Sam and get him and his website designers working with Lori.\"\n\nI sat with them and had a glass of wine then we all went to our bed.\n\n*****\n\nSunday, I was outside about 11:00 cleaning the grill when Amy and Dawn brought out some beers. Samantha came out with some chips to snack on.\n\n\"I had fun yesterday,\" Samantha said. \"I want to take classes.\"\n\n\"You think you are in good enough shape to take a class all day on Saturday?\" I asked.\n\n\"Sure!\"\n\n\"I think trying to go to class during the week would interfere with your studying. You are going to get busy,\" I said.\n\n\"Amy, what about you?\" Dawn asked.\n\n\"I have too much studying to do.\"\n\n\"Okay, I can teach you some things here. Both of you listen to me. When James and I were in grad school, we also made some time for us. School can get busy, just like work. Sam, you have a lot ahead of you, but I want you to always take some time to have a break, you too, Amy. Make it a priority, please.\"\n\nI had the grill on warming up so I could clean it. A paper towel blew away and was heading toward the pool. I went to pick up.\n\n\"I got you!\" Samantha exclaimed as she jumped on my back and grabbed me.\n\n\"Lesson number one!\" I yelled.\n\nI grabbed Samantha's arms so she couldn't get free and turned and fell into the pool with her on my back.\n\n\"What the hell!!\" Samantha exclaimed, coming up sputtering.\n\n\"Lesson number one. Make sure you know what the other person is going to do,\" I said.\n\n\"I was just playing!\"\n\n\"So, was I!\" I grabbed Samantha and kissed her, then got out of the pool.\n\nI shook off the water and went back to the grill as Samantha walked up.\n\n\"Sam, one of the most important things to learn is what are the possibilities of your actions,\" Dawn said. \"When attacking or defending, you have to think several moves ahead. You have to think if I do this, what can they do. You have to plan ahead.\"\n\n\"I was just playing.\"\n\n\"That's okay, but what if you were at a pool someplace in one of your skimpy bikinis and some guy grabbed you? Would your first thought be to take him into the pool and drowned him? You are a good swimmer that would be a good defense,\" Dawn said. \"Use what you know best.\"\n\n\"I wouldn't have thought of that.\"\n\n\"It is called situational awareness. Always be aware of where you are and what is going on,\" Dawn said. \"You have to learn to use what is around you for both defensive and offensive attacks.\"\n\nDawn got up and walked over by the pool.\n\n\"Sam, come here.\"\n\nShe walked over to Dawn.\n\n\"Now, attack me.\"\n\n\"What?\"\n\n\"Attack me. Come in and grab me,\" Dawn told her.\n\nSamantha made a quick move to grab Dawn. Dawn waited until the last moment then stepped aside, and Samantha went head first into the pool. Amy was laughing at her sister. Dawn helped Samantha out of the pool.\n\n\"You can do better than that,\" Dawn told her. \"Try again.\"\n\nSamantha looked for a moment then went in for a grab. Dawn grabbed her by her shirt and turned and tossed her in the pool. Amy was laughing. Dawn helped her out the pool again.\n\n\"Come on, Sam, you can do it. Attack me,\" Dawn said.\n\n\"No, you'll throw me in the pool if I attack you.\"\n\n\"See, you learned something,\" Dawn said and walked back and sat at the table.\n\n\"What did I learn?\" Samantha asked.\n\n\"What did you learn?\"\n\n\"If I try and grab you, you will throw me in the pool.\"\n\n\"Then don't grab me,\" Dawn said.\n\nSamantha stood and looked at Dawn.\n\n\"You told me to!\"\n\n\"Actually, you attacked me because you thought it was a good move,\" Dawn said. \"Was it?\"\n\n\"No.\"\n\n\"Lesson number two,\" I said. \"Sometimes being on defense is better than being on offense. You may be better off to let someone attack you.\"\n\n\"Oh.\"\n\n\"See, you learned something,\" Dawn said.\n\n\"Sure. Now I am all wet,\" Samantha said and went into the house.\n\nOnce I had the grill cleaned off, I went in to make the burgers.\n\n\"You're mean,\" I heard Samantha say.\n\nI looked, and she was running a comb through her wet hair.\n\n\"I think you need to put some clothes on, remember, Dan and his wife are coming.\"\n\n\"I will. I'm going to swim while you cook.\"\n\n\"Need any help?\" I heard Amy ask.\n\n\"Grab two more steaks and put them in the marinade, please.\"\n\nAmy grabbed two more steaks from the fridge and opened them up and put them in the marinade with the others.\n\n\"Anything else?\"\n\n\"That should do it.\"\n\n\"I'm am going to swim while he cooks, you want to join me,\" Samantha said.\n\n\"I don't know, I'm pretty tired from yesterday,\" Amy said.\n\n\"Oh, come on. We can sit in the hot tub after.\"\n\n\"Okay.\"\n\nI was patting out a burger when I heard the two of them giggle as they went up the stairs.\n\n\"What can I do?\" Dawn asked.\n\n\"I'll wait until they get here to start cooking.\"\n\n\"Okay. I can't believe it has been over two years since I have seen Katie.\"\n\n\"Is she still teaching?\"\n\n\"I don't know. She was teaching grade school last time I talked to her.\"\n\n\"That's good, she would be a distraction if she was teaching older boys,\" I said.\n\n\"She would.\"\n\n\"Samantha talked her sister into going swimming with her while I cook.\"\n\n\"Okay.\"\n\n\"You may want to check on them, they were giggling as they went up the stairs.\"\n\n\"Don't worry about them...actually, a swim sounds like a good idea.\"\n\n\"Just remember, Dan and Katie are coming...okay?\"\n\n\"I know.\"\n\nDawn left the kitchen and went upstairs. I had a bad feeling about the three of them.\n\n*****\n\nI had finished making the burgers and was turning the steaks over when the three of them came down the stairs. I knew they were going to do it. They came to the kitchen to get some bottles of water.\n\n\"You three just can't help it, can you?\" They laughed.\n\nDawn was wearing, what there was of it, her black string bikini. Samantha and Amy were wearing the metallic string bikinis they had that barely covered their huge nipples, and pussies.\n\n\"Maybe you should have told Dan to have him, and Katie, bring swimsuits,\" I suggested.\n\n\"Oh crap, I guess I should have,\" Dawn said and walked away.\n\n\"You could call them,\" I said as they walked.\n\nI turned and looked at the three of them walking away. The tiny strings running up the crack of their ass didn't cover anything.\n\nI was putting two more bottles of white wine in the fridge when the gate buzzed. I pushed the intercom.\n\n\"Yes?\"\n\n\"James, is that you?\" I heard Dan say.\n\n\"Yes, I'll open the gate.\"\n\nI walked to the front door and waited until they parked. Dan and Katie got out of the car.\n\n\"Damn, this is a big place!\" Dan said.\n\n\"Hey, you two. Come on in the house.\"\n\nI looked at Katie as she walked up. She had on shorts and a halter top and looked very nice.\n\n\"Come on in,\" I said as they came through the door.\n\n\"I heard you built a big place,\" Katie said.\n\n\"We did, it gives us plenty of room when the family wants to visit.\"\n\n\"How much land do you have?\" Dan asked.\n\n\"Three hundred acres.\"\n\n\"Damn. I don't see any other houses out this way?\"\n\n\"Not yet. I have a firing range on the back of the property.\"\n\nThey walked in, looking around.\n\n\"Feel free to explore. Would you like something to drink?\"\n\n\"Beer.\"\n\n\"Wine.\"\n\nThey followed me to the kitchen, and I got them drinks.\n\n\"Dawn and the girls are out back in the pool,\" I said.\n\n\"A pool too?\" Katie said.\n\n\"Why not!\" I replied, and we laughed.\n\nI walked them around the house for a few minutes, then took them out to the pool.\n\n\"Hey, you two!\" Dawn yelled from the pool. \"Katie, I haven't seen you in a while!\"\n\n\"At least one house ago!\" Katie said, laughing.\n\nDawn pushed herself up and out of the pool. I watched Dan as he looked her up and down.\n\n\"How have you been,\" Dawn asked Katie as she stood in front of her.\n\n\"Dealing with two girls. Are you still working at the hospital?\"\n\n\"Not a lot anymore. The university started a school of advanced nursing, and I am the acting Dean.\"\n\n\"That sounds interesting.\"\n\n\"It is, and I am also working on my Ph.D. so that I can be the real Dean.\"\n\n\"Great,\" Katie said.\n\nDan was staring at Dawn's tits and the tiny triangles of black fabric trying to cover her nipples.\n\n\"Are you still teaching?\" Dawn asked.\n\n\"Yes, 4th grade,\" Katie said.\n\n\"Have a seat, I'll grab a towel,\" Dawn told her.\n\nDawn walked away, and Katie and Dan both checked out her ass. Dawn picked up her towel and was drying off as she walked back.\n\n\"Sit, we need to catch up,\" Dawn said, and she and Katie sat in two recliners.\n\n\"I'll start the steaks and burgers,\" I said and headed into the house, Dan followed me.\n\nI was putting all the meat on a big platter in the kitchen.\n\n\"James, is that the two redheads in the pool?\"\n\n\"Yes.\"\n\n\"Do they live here?\"\n\n\"I guess I need to explain.\"\n\nDan and I talked in the kitchen as I explained everything to him.\n\n\"And Dawn is cool with all this?\"\n\n\"Yes, she is. Amy and Samantha are her wives, also.\"\n\n\"I have a question?\"\n\n\"Yes, Dan, they have sex with each other.\"\n\n\"That wasn't my question, but...damn.\"\n\n\"What was your question?\"\n\n\"How long has this been going on?\"\n\n\"A little over a year.\"\n\nI explained more to him as I walked out to the grill. Amy and Samantha were now sitting with Dawn and Katie talking. I listened, and Dawn was explaining everything to Katie.\n\n\"And she is 18?\" Dan asked.\n\n\"Just turned 19...going on thirty.\"\n\nDan asked me a few more questions while we stood at the grill and got the meat started.\n\n\"Let's sit,\" I said, and we walked over and grabbed two chairs with the girls.\n\nWe all talked while the food cooked. Dan was struggling not to look at Samantha and Amy. I kept looking at Katie as she watched him and smiled. I got up a few times to turn the meat and went inside and got a pan of beans to put on the grill. I grabbed Dan another beer from the fridge and took the bottle of wine out to Katie. I passed Amy and Samantha going into the house.\n\n\"Dawn, may I ask a personal question?\" Katie said.\n\n\"Sure.\"\n\n\"Is James the only one that has sex with Samantha and Amy?\"\n\n\"Are you asking if I have sex with them?\"\n\n\"Well, sure?\"\n\n\"Of course.\"\n\nKatie sipped her wine and smiled.\n\nWe all talked until the food was ready. Dawn went in with the girls to get the plates and salads. I followed to get the glasses and drinks.\n\n\"You three are terrible,\" I said.\n\n\"Too, bad,\" Dawn said as she picked up the big bowl of salad.\n\nSamantha grabbed a bowl full of bread and winked at me.\n\nAs we walked to the backdoor, we saw Katie and Dan talking. They stopped when we went out.\n\n\"Let's eat!\" Dawn said.\n\nWe all sat around our big glass table and fixed our plates. Samantha had sat next to Dan and was talking about learning to shoot. He was enjoying talking to her and checking out her tits.\n\n\"Amy, are you going to learn to shoot?\" Dan asked her.\n\n\"Just enough to know what I am doing.\"\n\n\"I'm going to get really good, better than Dawn,\" Samantha said.\n\n\"That will be hard,\" Dan said.\n\nI was watching Dan, and he was looking through the glass table at Samantha's legs. I looked, and she had her legs spread wide for him to look. Everyone kept talking while we ate. By about 3:30, everyone was laughing and having a good time. We had finished eating, and Amy and Samantha were carrying leftovers into the house.\n\n\"I love the pool and the waterfall and all the rock landscaping,\" Katie said.\n\n\"Dawn did all the design work,\" I replied.\n\n\"The waterfall looks inviting,\" Katie said.\n\n\"Come on, get in the pool with me,\" Dawn said as she stood.\n\n\"I didn't bring a suit, and I doubt one of yours will fit me, Dawn!\" Katie said giggling.\n\n\"Oh, hell, Katie, just take your clothes off. We are all adults here,\" Dawn said. \"Here, I'll take mine off.\"\n\nDan watched as Dawn untied her top and took it off, then untied the thong and took it off. She walked over and jumped in the pool.\n\n\"Come on, Katie!\" Dawn yelled.\n\nKatie looked at Dan as he looked at her, then she stood and untied her halter and took it off. I watched as she pushed her shorts and underwear down, then laughed as she ran to the pool and jumped in. To have had two kids, Katie had a hot body. She and Dawn were laughing as they swam to the waterfall.\n\n\"Well...\" Dan mumbled.\n\n\"Dan, you will have to forgive Dawn. She is used to running around here with the girls naked all the time,\" I said.\n\n\"Did she get in the pool?\" I heard Samantha ask.\n\n\"Yes, Dawn talked her into skinny dipping with her,\" I said.\n\n\"Great!\" Samantha shed her bikini and walked to the pool and got in as Dan watched.\n\n\"Damn...\" Dan mumbled again as he watched Samantha.\n\n\"Is she naked?\" Amy asked, walking out the door.\n\n\"Of course she is,\" I said.\n\nAmy picked up the last of the leftovers and went back into the house.\n\n\"Dan, you want another beer?\"\n\n\"Sure.\"\n\nI got him another beer from the fridge outside. Dan was watching his wife when Amy came out naked. She walked to the table and sat down between Dan and me. Dan was just staring at Amy.\n\n\"Dawn didn't need to give sis an excuse to get naked,\" Amy said and sipped her wine.\n\nDan kept looking at her. He was staring at Amy's huge tits.\n\n\"Look who's talking,\" I said.\n\n\"Dan...you're staring,\" Amy said.\n\n\"I know.\"\n\nAmy sat and sipped her wine as Dan returned his attention to the pool.\n\n\"Dan, did you teach Dawn to shoot?\" Amy asked to get his attention again. He looked back at her.\n\n\"A little, James taught her the rest.\"\n\nAmy found things to talk to Dan about so he would keep looking at her. He kept looking at Amy's tits. I was watching the pool as Katie swam to the edge. She pushed herself up and stood, then walked to the table. I admired her nice tits and bare mound that went nicely with her shapely ass and legs.\n\n\"Come on, join us,\" Katie said as she stood there.\n\nDan looked at her.\n\n\"Come on, join us,\" she said again.\n\nHe looked over at me.\n\n\"Is it okay?\" He asked.\n\n\"Sure, go ahead.\"\n\nDan stood and pulled his shirt off, then hesitated as he unbuckled his pants.\n\n\"Come on,\" Katie said.\n\nDan pushed his pants and underwear down and stood. Katie looked at his hard cock sticking out. After he stepped out of his pants, she took his hand, and they jumped in the pool.\n\n\"He is bigger than average,\" Amy said.\n\n\"Dawn will be fucking him before the night is over,\" I said.\n\n\"I hope so.\"\n\nI was scraping the grill off when Dawn walked up.\n\n\"Are you going to join us?\"\n\n\"Are you going to try and fuck him?\"\n\n\"Of course!\" I laughed at Dawn.\n\nShe stood until I took all my clothes off and got in the pool with her. Everyone else was playing under the waterfall, so we swam to them.\n\n\"I haven't been skinny dipping since high school!\" Katie exclaimed and laughed.\n\n\"We swim this way all the time,\" Amy said.\n\n\"Must be nice,\" Katie replied.\n\n\"You two are welcome to come over anytime,\" Dawn told them. \"Just leave the swimsuits at home!\"\n\nAll of us played in the pool until about 5:30.\n\n\"I'm waterlogged,\" Samantha said and swam to the stairs and got out.\n\nShe picked up her towel and dried off, then sat in a recliner.\n\n\"Me too,\" Amy said.\n\nKatie was watching her husband as he watched Amy get out of the pool and dry off.\n\n\"Dawn, how did you know that you wanted to be so close to the two of them?\" Katie asked.\n\n\"It is hard to explain, but James and I both have a strong connection to them. After we asked them to move in so they could both go to school, we just grew very close.\"\n\n\"Sounds very special.\"\n\n\"it is. Labor Day we had a big picnic with all our friends here, and we surprised the two of them by marrying them,\" Dawn said.\n\nDawn and Katie kept talking.\n\n\"Dan, I'm going to get a beer,\" I said.\n\n\"I'll join you.\"\n\nWe swam to the steps and got out. Dan checked out Amy and Samantha as he followed me into the house.\n\n\"James, I have got to ask you something?\"\n\n\"What's that?\"\n\n\"Do you get to...watch the girls?\"\n\n\"Do I get to watch them doing each other?\"\n\n\"Uh...yes.\"\n\n\"Of course. I'm sure you have watched Katie with another woman...\" I said as I opened the fridge and grabbed two beers.\n\nI had to say it.\n\n\"I wish!\"\n\n\"Oh, you haven't. Sometimes I forget, not all women do that,\" I said as I opened my beer.\n\n\"James, how did you ever get Dawn to do it...I mean the first time...you got to watch her?\"\n\n\"Dawn asked if she could try it. The first time I got to watch her was with Amy. She was here for a party, and Dawn asked her to stay the night. It sort of happened, and Dawn asked me if it was okay if she did it. I didn't have an issue with it.\"\n\n\"Damn...and they do it all the time now?'\n\n\"Sure.\"\n\nDan opened his beer and took a sip.\n\n\"I asked Katie once if she had ever done it.\"\n\n\"Sometimes, I think all women have tried it at least once. Most of the women I know have,\" I said to tease Dan.\n\n\"Damn, James, how many women do you know that do that?\"\n\n\"All of them.\"\n\nDan looked at me as I sipped my beer.\n\n\"Are you saying you know a bunch of other women that do that all the time?\"\n\n\"I don't know about all the time, but they usually do it when they are here. Let's go sit with the girls.\"\n\nI started to walk off.\n\n\"Wait! Wait! Wait!\"\n\nI stopped and turned back to Dan.\n\n\"You know a bunch of women that come over here...and do that with Dawn...and the girls?\"\n\n\"We have get-togethers occasionally, and some couples we know come over and stay for the weekend. It usually happens then,\" I said as straight-faced as I could.\n\n\"What?\"\n\n\"I guess it is something I shouldn't talk about, everyone keeps it pretty hush-hush.\"\n\n\"James, you mean you have other couples that come here...and all the women get together and do each other while the guys watch?\"\n\n\"Not like that, but when I am with two or three of them, they like doing each other.\"\n\nDan stood blinking at me.\n\n\"Okay...you and Dawn are swingers?\"\n\n\"No.\"\n\n\"Then, what?\"\n\n\"I shouldn't say anything else, Dan. It's a pretty close group that don't tell other people.\"\n\n\"Come on, James...you have to tell me now!\"",
        "\"Okay, but you can't mention it to anyone, Dan. These people wouldn't like it if other people found out.\"\n\n\"Who are they, the Mafia?\"\n\n\"No! But they are the wrong people to piss off.\"\n\n\"I won't tell anyone! I swear!\"\n\n\"You better not.\"\n\n\"I won't!\"\n\n\"Okay. We know about a dozen couples that like to have a lot of fun. We will have parties at each other's houses on the weekends, but most of the parties are here now. They come on Fridays and may stay until Sunday having fun.\"\n\n\"By having fun...you mean having sex with each other?\"\n\n\"Sure.\"\n\n\"And...what all happens?\"\n\n\"Oh, I may have sex with 5 or 6 women that weekend, and Dawn will have sex with a bunch of guys, that sort of thing.\"\n\n\"You're shitting me!! You let Dawn have sex with other guys!\"\n\n\"Well, Dan, it wouldn't be right if I was having sex with her friends, and she didn't get to have sex with the guys...would it?\"\n\n\"Fuck! I don't believe this! How often does this happen?\"\n\n\"We usually have three or four parties a year where we all get together, but that doesn't count the other times.\"\n\n\"What other times? What else goes on?\"\n\n\"Everyone in the group agreed a while back that if we were going to have sex with each other at the parties, that is was okay to have sex at other times.\"\n\n\"What do you mean?\"\n\n\"Well, if one of the lady's husband goes out of town, she may come to stay here, or I may stop at her house for a visit.\"\n\n\"And...and...Dawn is okay with all of this?\"\n\n\"Of course.\"\n\n\"Does she visit guys?\"\n\n\"Sometimes, but she usually goes and has sex with the couple.\"\n\n\"What do you do while she is doing that?\"\n\n\"I wait for her to come home...then fuck her brains out! She always comes home horny as hell.\" I said, and laughed. Dan wasn't laughing.\n\n\"Geez...\"\n\n\"Hey, maybe you and Katie could come to one of our parties one weekend?\"\n\n\"What? Fuck, I wish!\"\n\n\"Sorry, Dan, I forget not all married couples are into this. Well, it was a thought.\"\n\n\"Okay...how did you end up letting Dawn have sex with another guy?\"\n\n\"After I watched her have sex with some other women, it just happened one time when another couple we know was here for a cookout,\" I said and sipped my beer.\n\nI could almost see smoke coming from Dan's brain.\n\n\"And you were okay with that?\"\n\n\"Well, sure. I did the guy's wife...several times that night.\"\n\n\"Damn.\"\n\nDan was quiet a minute.\n\n\"I wouldn't even know how to ask Katie if she wanted to do something like that. I mean...we have kids...and...\"\n\n\"Some of our friends have children. They usually leave them with one of their parents for the weekend. Come on, let's go sit with the girls.\"\n\nI walked to the backdoor with Dan behind me. All the women were sitting at the table, naked, talking, and laughing.\n\n\"Does anyone need more wine?\" I asked.\n\n\"We're good,\" Dawn said.\n\nI stood behind Dawn as she talked to Katie sitting across from her. Dan was standing there, but his mind was someplace else.\n\n\"Honey, sit,\" Dawn said.\n\nI sat between her and Amy. Katie got Dan to sit between her and Samantha.\n\n\"James, how do you live with three women?\" Katie asked.\n\n\"Very well,\" I said, and she laughed.\n\n\"Dan has a hard time living with three women,\" Katie said.\n\n\"Probably, but he doesn't have to keep all of them satisfied,\" I replied.\n\n\"He keeps this one satisfied,\" Katie said and rubbed Dan's leg.\n\n\"If James doesn't keep us satisfied, we have each other,\" Dawn said.\n\nI watched Katie, and she winked at Dawn. Dawn looked up at me and smiled, then rubbed my leg.\n\n\"Dawn, when was the first time you experimented?\" Katie asked to my surprise.\n\n\"Here, with Amy,\" Dawn said. \"Did you ever try it?\"\n\n\"A few times, with my roommate in college,\" she replied.\n\n\"What? You never told me that?\" Dan said, looking at his wife.\n\n\"Sure, I did. That time we were on vacation in Florida, and you asked me.\"\n\n\"When we were in Miami?\"\n\n\"Yes.\"\n\n\"Hell, I was so drunk that weekend, I don't remember it, and I sure don't remember that!\"\n\n\"Dan, we were in the hotel room watching porn, and you asked me if I had tried while you were watching three women on the TV!\"\n\n\"Fuck, I don't remember that!\"\n\n\"I guess you were drunk!\" Katie said and laughed.\n\n\"Did you like it?\" Dan asked.\n\n\"If you don't remember, I'm not going to tell you again!\"\n\nWe all laughed as Dan looked at his wife.\n\n\"Now you have me curious,\" Dan said.\n\n\"It was okay. We tried a few times my senior year,\" Katie said.\n\nDawn squeezed my leg.\n\n\"Honey, would you get another bottle of wine,\" Dawn said.\n\n\"Sure.\"\n\n\"I'll go with you,\" Amy said and got up.\n\nWe walked to the kitchen, and I got a fresh bottle of white wine from the fridge and grabbed the corkscrew.\n\n\"Katie is setting her husband up,\" Amy said.\n\n\"For what?\"\n\n\"We have been out there talking about doing women while you two were in here. She did more than her roommate in college, but she never told Dan.\"\n\n\"I see. Anything else?\"\n\n\"Dawn mentioned that we all had some fun with other couples.\"\n\n\"Great minds think alike,\" I said as I pulled the cork out of the bottle.\n\n\"What do you mean?\"\n\n\"I told Dan all about us having sex with other couples. He is about to go crazy thinking about it.\"\n\nAmy laughed.\n\n\"Maybe we can get them interested,\" Amy said.\n\n\"Honey, if Katie is even the slightest bit interested, he will go along with it after looking at you three all evening.\"\n\n\"She is interested.\"\n\nAmy and I went back outside, and I filled the girl's glasses.\n\n\"Katie, did Dan tell you about the time he came into the shower with me at the gym?\" Dawn asked.\n\n\"No! What did he do!\"\n\n\"Oh, it was an accident...\" Dan mumbled.\n\n\"Accident, my ass!\" Dawn said. \"You had been peaking at me changing clothes for months!\"\n\n\"That sounds like him.\"\n\n\"He finally got brave and walked into the shower with me!\" Dawn said, laughing.\n\n\"Oh, and when was this?\" Katie asked.\n\n\"My last year of grad school, just before James and I got married.\"\n\n\"Really? Let me see...I think we were engaged then, weren't we?\" She asked Dan.\n\n\"Oh...I'm not sure...\" Dan said.\n\n\"Yes, you are! What did he do?\"\n\n\"Oh, we felt each other up for a while.\"\n\n\"I'm sure you enjoyed that, didn't you?\"\n\n\"Oh...well...\"\n\n\"He enjoyed the blowjob,\" Dawn said.\n\n\"Dan! You ass!\" Katie said and smacked him on the leg. \n\nSamantha and Amy were laughing.\n\n\"He never told you about it?\" Dawn asked.\n\n\"Hell, no!\"\n\n\"Did you ever tell him?\" Dawn asked.\n\n\"Tell him what?\" Katie asked.\n\n\"You know what!\"\n\n\"I never told him...\"\n\n\"Told me what?\"\n\n\"I knew she gave you a blowjob because Jane saw you two and told me.\"\n\n\"Oh...\"\n\n\"And...\" Dawn said.\n\n\"And...I returned the favor about a week later and gave James one!\" All the girls broke into laughter.\n\n\"You what!\"\n\n\"Hey, you got one from her, so I gave him one! Don't give me that shit!\"\n\nDan finally started laughing.\n\n\"I guess it was fair,\" Dawn said.\n\n\"Dan, be glad Dawn didn't let you fuck her!\" Katie said.\n\n\"Would you have fucked him?\" Dan asked.\n\n\"Hell, yes!\" More laughter.\n\n\"Those were some good times,\" Katie said. \"The things we did when we didn't know better,\" she said and sipped her wine.\n\n\"Oh, I know better, and still do things like that,\" Dawn said.\n\n\"Dawn!!\" Katie screamed and laughed. \"You do not!!\"\n\n\"You might be surprised.\"\n\n\"Dawn, James would kill you if he caught you doing something like that?\"\n\n\"Kill me? He loves to watch!\"\n\nI was looking at Samantha, and she winked at me.\n\n\"What are you saying?\" Katie asked.\n\n\"James likes to watch.\"\n\n\"Watch what, Dawn?\"\n\n\"Me being fucked.\"\n\n\"What!\" Katie exclaimed. \"You don't mean it?\"\n\n\"We have some fun occasionally with some friends, and he likes to watch me give blowjobs and being fucked.\"\n\n\"Are you serious?!\"\n\n\"He does, and I like watching him doing my friends.\"\n\n\"Dawn!!\"\n\n\"Oh, hell, Katie, it's just sex for fun,\" Dawn said.\n\n\"Still...how did you two get into that?\" Katie asked.\n\n\"Oh, it just happened, like me doing other women started.\"\n\n\"Damn, Dawn!\"\n\n\"It's just good clean fun, Katie.\"\n\n\"Still...did James ask you to do it?\" Katie asked.\n\n\"Not really. We talked about it, then we just did it one weekend with a couple we know.\"\n\n\"Wow...that is hard to believe,\" Katie said.\n\n\"It's more than one couple,\" Dan said.\n\n\"Dan!\" I exclaimed.\n\n\"What?\" Katie replied.\n\n\"James said they do it with a bunch of other couples.\"\n\n\"Dan, you weren't supposed to mention that,\" I said.\n\n\"I guess your wife knows about it, James!\" Dan exclaimed.\n\nWe all laughed.\n\n\"Okay, you have to spill the beans now?\" Katie said.\n\nWe told Katie, but I had a feeling she already knew about some of the parties.\n\n\"So, you two are swingers?\" Katie said.\n\n\"Not really, it's just a bunch of close friends,\" I said.\n\n\"I thought we were your friends!\" Katie exclaimed and laughed with Dawn and the girls.\n\nAfter the laughter settled down, Katie looked at Dan.\n\n\"Dan would have a stroke if I asked him if I could fuck some other guy,\" Katie said, looking at him.\n\n\"Katie, it works both ways,\" Dawn said. \"James gets to fuck other women too.\"\n\n\"You would like that wouldn't you,\" Katie said to her husband.\n\n\"Sure!\"\n\n\"You ass!\" Katie exclaimed and smacked him on the leg.\n\n\"Ouch!\"\n\n\"I bet you would agree to that, wouldn't you, asshole!\"\n\n\"Agree to what?\"\n\n\"Agree to let James fuck me...as long as you got to watch and fuck Dawn!\"\n\nSamantha winked at me again.\n\n\"You already gave him a blowjob!\" Dan exclaimed and laughed.\n\n\"You ass!\"\n\n\"Don't smack me again!\" Everyone laughed.\n\nIt got quiet.\n\n\"Would you really agree to that?\" Katie asked her husband.\n\n\"Why? You wouldn't,\" Dan replied. Katie sat there. \"Would you?\"\n\n\"I don't know,\" Katie said and sat up straight and ignored Dan and sipped her wine.\n\nSamantha and Amy snickered.\n\n\"You wouldn't do it. You would never let me watch you with another woman,\" Dan said, looking at his naked wife.\n\n\"Dan, sometimes...if you don't ask, you won't find out,\" Dawn said.\n\n\"Okay! Will you let me watch you with Dawn! There! I asked!\"\n\n\"Sure,\" Katie said and sipped her wine.\n\n\"What?\"\n\n\"If that is what you want to see, sure, if Dawn is okay with it.\"\n\n\"You mean it?\"\n\n\"Sure. But, you have to ask Dawn?\"\n\n\"Oh...uh...would that be okay?\" Dan asked, looking at Dawn.\n\n\"Would what be okay, Dan?\" Dawn said.\n\n\"Would you...let me watch...you and her?\"\n\n\"If that is what Katie wants to do, sure.\"\n\n\"Really?\"\n\n\"Katie, you want to do this?\" Dawn asked.\n\n\"Why not!\"\n\n\"Come with me then,\" Dawn said as she stood.\n\nKatie smiled and stood; Dawn took her hand and led her into the house.\n\n\"Alright!\" Samantha said and jumped up.\n\nDan was just sitting there.\n\n\"Come on, Dan,\" I said as Amy and I got up.\n\nWhen we got to the den, Dawn was sitting on the sofa with Katie whispering to her, and she was laughing.\n\n\"Have a seat,\" I said as I sat in one of the loveseats with Samantha.\n\nDan sat in the other, and Amy sat next to him.\n\nDawn leaned over Katie and planted her mouth over hers, and they kissed for a few minutes. Dan was mesmerized as he watched. The two of them kept kissing for a while then Dawn kissed her way down and started sucking on Katie's nipples. Katie leaned back into the sofa and enjoyed for a while.\n\n\"Ohhhhh...my...\" Came from Katie as she rubbed the back of Dawn's head.\n\nDawn started slowly kissing her way down Katie's body. When she got to her mound, we watched as Dawn slowly ran her tongue across Katie's smooth mound for a few minutes. Katie was moaning as she had her head back with her eyes closed.\n\nDawn sat up and grabbed Katie's legs and pulled one up onto the sofa and spread them. She leaned over and continued to lick and kiss Katie's mound. Dawn slowly kissed her way down one thigh then back up the other one. I was watching Katie because she was now watching Dawn.\n\nDawn kissed all the way up her thigh then ran her tongue over the top of her pussy.\n\n\"Ohhh...Dawn...\"\n\nI looked over at Dan as he watched Dawn run her tongue up the length of his wife's pussy for several minutes. Katie was moaning softly as she watched Dawn.\n\n\"Oh, Dawn...yes.\"\n\nDawn moved her hand up and worked several fingers into Katie as she slowly tongued her clit.\n\n\"Oh...god...Dawn!\"\n\nWe all watched as Dawn explored Katie's pussy with her fingers, searching for her spots as she licked.\n\n\"Ahhhhhhh!\" Came from her as Dawn found one. \"Yes! That's it!\"\n\nDawn pulled Katie's legs up and spread them apart, then slid her fingers back into her and lay down with her mouth over Katie's pussy.\n\n\"Oh, my god...Dawn! Yes! That's it!\"\n\nDawn was working her fingers on Katie's spots as she tongued her and rubbed for a long time.\n\n\"Oh, fuck, Dawn...\"\n\nKatie absentmindedly slid her hands up to her tits and began rubbing them. Dan was watching closely when Samantha got up and disappeared for a few minutes. When she came back, she had the digital camera. Dan didn't notice her taking pictures.\n\nKatie moaned for a long time as Dawn played with her orgasm. I was watching when Dawn slipped several more fingers into Katie's pussy and began working them.\n\n\"Ohhh! Ohhh, Fuck!! Oh, fuck!!\"\n\nKatie drove her hips up into the air.\n\n\"Ahhhhhh!! Fuck!!\" She screamed and started jerking.\n\nWe could hear Dawn slurping up her juices as Katie cried out.\n\n\"Fuck!!\" Katie screamed again, and we heard her gushing.\n\nDawn pulled her fingers out and drove her tongue in deeper.\n\n\"Ahhhhhhhhhh!! Ohh, Dawn!! Oh, yes!!\"\n\nKatie had grabbed the sofa and was still jerking hard.\n\n\"Oh my god!! Fuck!!\"\n\nShe jerked hard a few times and came hard.\n\n\"Oh...stop!!\"\n\nDawn kissed her pussy and sat up. Katie was lying back panting hard.\n\n\"Ohhh...wow...\"\n\nDawn moved over Katie and planted her mouth over hers. Dan watched closely as they tongued each other's mouth for a few minutes.\n\n\"Damn, that was fantastic!\" Katie said, then she laughed. \"Dan, I wish you ate pussy like that!\"\n\nThe girls laughed.\n\n\"My turn!\" Katie exclaimed.\n\nKatie pushed Dawn back onto the other side of the sofa and got over her and kissed her for a few minutes. She slowly kissed and sucked on Dawn's tits for a long time, then kissed her way down to Dawn's pussy. She lifted Dawn's legs and spread them, then got face down in her pussy.\n\nDan finally looked at Samantha as she took pictures.\n\n\"Make sure you send me copies of those,\" Dan said.\n\n\"Oh, I think you will be seeing more of this,\" I said.\n\nDawn let Katie take her time for a long time. Katie seemed to settle in now. Dawn would rub the back of her head and push her down into her pussy as she moaned. We could hear Katie getting into it as she worked. We all watched for a long time as Katie worked her fingers in Dawn, then worked her tongue in her. I was enjoying watching Dan. Katie finally sucked Dawn's clit between her lips.\n\n\"Oh yes, just like that,\" Dawn encouraged her.\n\nDawn held Katie's head down as she sucked and tongued her clit for a long time. Dawn was making her work.\n\n\"Oh, yes, Katie!! Just like that!! Ahhhh!! I'm going to come!!\"\n\nDawn held her head down as she started jerking. I knew she was squirting into Katie's mouth.\n\n\"Emmmmmm!\" Came from Katie as she sucked it up.\n\n\"Ahhhhh!! Yes!!\" Dawn screamed and thrust into her mouth several times.\n\nDawn took her hands off Katie's head, and she sat up and moved over Dawn and placed her mouth over hers as they kissed for several minutes.\n\n\"Emmmmm, that was fun,\" Katie said as she sat up.\n\n\"It is, isn't it,\" Amy said.\n\nKatie smiled, then winked at Dan.\n\n\"Was that what you wanted to see, honey?\" She asked.\n\n\"Hell, yes!\" We all laughed.\n\n\"Sam! Were you taking pictures!\" She exclaimed, looking at her with the camera.\n\n\"Sure. We always take pictures.\" That got more laughter.\n\n\"Honey, did you enjoy that?\" Dan asked.\n\n\"Immensely! I see you enjoyed it!\"\n\nDan looked down at his hard cock. Amy wrapped her hand around it, and he jumped.\n\n\"I would say he did,\" Amy said as she stroked.\n\n\"Okay, I did my part, now James gets to fuck me,\" Katie said.\n\n\"What!\" Came from Dan.\n\n\"That's what you agreed to, honey.\"\n\n\"No, I didn't!\"\n\n\"Yes, you did!\"\n\n\"I did not!\"\n\n\"You said if you got to watch, I got to fuck James!\"\n\n\"I did not!\"\n\n\"Well, that's not fair,\" Katie said.\n\n\"Katie, maybe Dan wants you to watch him first,\" Dawn said.\n\n\"I don't know, he would probably change his mind afterward,\" Katie said.\n\n\"What?\" Came from Dan.\n\n\"Dan, if you get to fuck me, you won't change your mind, will you?\" Dawn asked.\n\n\"Uh...what...\"\n\n\"I thought we were all going to watch each other,\" Dawn said.\n\n\"Oh...uh...what?\"\n\n\"Come on, honey, it will be fun. I want to watch you go down on, Dawn,\" Katie said.\n\n\"Oh...I...what?\"\n\n\"Come on, Dan, you can eat me and get me good and wet then fuck me,\" Dawn said as she stood. \"Then Katie gets to fuck James.\"\n\n\"Uhhh...\" Came from Dan.\n\n\"Come on,\" Dawn said as she held her hand out.\n\nDan took her hand, and Dawn led him to the big bedroom downstairs. We all followed.\n\nAs we followed Dawn, I suddenly felt a huge rush of her energy. Dawn was feeling all that lust energy from Dan.\n\nDawn got on the bed and slid back and leaned against the headboard then pulled her legs up and spread them. When Dan got between them and started licking her pussy, I saw Dawn close her eyes and inhale deeply. I wasn't sure if she was sending it to me or what, but I could feel how aroused Dawn was growing. She wasn't pushing her feelings down this time.\n\nI sat in one of the chairs in the bedroom and watched. Dawn had her head back and was really enjoying Dan's mouth on her pussy.\n\nSamantha came to me and sat on my lap.\n\n\"James...what's happening?\" She whispered to me.\n\n\"Do you feel it?\"\n\n\"Of fuck...I feel like I did at the bank. Is this Dawn?\" Samantha asked.\n\n\"Yes. I feel it too.\"\n\nKatie was sitting on the end of the bed, watching her husband. I looked over at Amy sitting in the other chair, and she had her eyes closed and was slowly playing with her pussy. Both the girls were feeling it.\n\nDawn was moaning as Dan worked on her pussy. I realized that Samantha was now fingering her pussy as she watched.\n\nDawn made Dan work for everything he got. She laid back and let him do as he pleased for a very long time. Dawn came several times in huge orgasms. We all heard her pussy gushing and Dan slurping up her juices. Dawn laid there as he licked up all of her juices.\n\n\"Oh, that was great, Dan! I want on top!\" Dawn told him.\n\nDan sat up, and hesitate then laid on his back. Dawn straddled his cock and grabbed it and worked it into her pussy. I knew she was very horny.\n\n\"Oh, Katie, he has a nice cock,\" Dawn said as she settled.\n\n\"Not as nice as you have,\" Katie said, looking at my hard cock.\n\nI could feel Dawn's lust, or Dan's lust from her as she started working her pussy on his cock.\n\n\"James...\" Samantha moaned softly as she squeezed her tits.\n\nDawn was thrusting her pussy on Dan's cock as he held one of her tits in each hand. Kattie was watching Dawn fuck her husband hard. Dawn kept riding him hard as Dan squeezed and watched for a long time.\n\n\"Ahhhh! Fuck, yes!!\" Came from Dawn as she kept going.\n\nShe rode him like this until she came in a screaming orgasm.\n\n\"Ohhh!! Fuck!!\" Dawn screamed as she came.\n\nDan's mouth was hanging open now as he watched Dawn.\n\nDawn pulled her legs out from under her and put them up by Dan's shoulders. She leaned back on her hands and began working her pussy up and down on his cock.\n\n\"James...help me...\" Samantha moaned in my ear as she laid her head on my shoulder.\n\nNow I could feel Dawn and Samantha's arousal as it grew.\n\nSamantha held me tight as I watched Dawn working her pussy up and down on Dan's cock. We all watched as Dawn worked her pussy harder and harder. He was just staring at his cock, sliding in and out of Dawn's pussy. I knew Dawn was keeping him from coming and hoped she didn't hurt him.",
        "\"Ahhhhhhh!!\" Dawn screamed as she started coming.\n\n\"Oh, god!!\" Dan yelled.\n\nHe started thrusting up into her as he came over and over. Dawn kept screaming as she squirted all over Dan.\n\n\"Ahhhhhh!!\" Came from both of them and Dawn fell back.\n\nThe two of them lay there gasping for air.\n\n\"Oh, fuck. I have never come like that,\" Dan moaned.\n\n\"Hey!\" Came from Katie, and we all laughed.\n\nDawn got off of Dan and lay next to him.\n\n\"Your turn, honey!\" Dan said and slowly rolled off the bed.\n\n\"Yes, it is!\"\n\nKatie crawled on the bed next to Dawn and leaned against the headboard. Samantha got up, and I moved to the end of the bed. I took my time kissing my way up Katie's legs as she watched.\n\nI went to work on her pussy for a long time, then Katie screamed through two huge orgasms as I kept going.\n\n\"Oh, my god,\" Katie said as she panted.\n\nI grabbed her legs and pulled her down onto the bed quickly.\n\n\"Ohh!\"\n\nI got between her legs and put my hands under knees and lifted them up and let her legs fall to the side. Katie was looking up at me as I found her pussy with the end of my cock. I worked the end between her wet lips then began to push in.\n\n\"Ahhhhhh...fuck!\" She exclaimed as she arched up to meet my cock.\n\nI held myself up and slowly slid into her pussy as she moaned.\n\n\"Oh, my god...yes! Oh, yes!\"\n\nI hit bottom and kept pushing.\n\n\"Ahhhhhhh! Fuck! All of it!!\"\n\nI pushed harder until I was all the way inside of her.\n\n\"Oh...fuck...me!! Yes!!\"\n\n\"James, don't stretch her out!\" Dan exclaimed.\n\n\"I'm going to try!\"\n\n\"Please do!\" Katie moaned.\n\nKatie was looking up at me as I began to slide my cock in and out of her pussy.\n\n\"Oh, fuck! You feel so good inside of me! More!\"\n\nI worked my cock in her with long deep strokes as she kept moaning. I looked over at Dawn, and she had her eyes closed.\n\nI worked my cock in Katie for a long time until she came in a huge orgasm.\n\n\"Oh...fuck...me!!\" Katie screamed as she thrust her pussy up to meet my cock as it went into her.\n\nI jammed my cock in hard and held it in her as she came in jerks.\n\n\"Ahhhhhh!! Yes!!\"\n\nOnce Katie caught her breath, I grabbed her legs and pushed them against her breasts. I placed my hands on her legs, and leaned into her with my weight, pinning her legs against her. I slid my cock almost out slowly then jammed it into her hard and deep.\n\n\"Ahhhhh!! Fuck, yes!!\" Katie screamed.\n\nI started driving my cock into her in long deep strokes as she screamed. I sped up until I was thrusting into her hard and fast.\n\nDawn had some fun with Dan, so I was going to have some fun with Katie. I thrust into her for a long time, holding her energy back so that her orgasm built slowly.\n\n\"Ohhhhhh...ohhhhhh...fuck me...fuck me harder!!\"\n\nKatie was needing to get off as I held her back.\n\nOur skin was slapping together as I slammed into her.\n\nHer orgasm built to its peak as she started to jerk.\n\n\"Fuuuuuuuuuck!!\"\n\nKatie was jerking hard over and over beneath me. She was bouncing her head off the bed as I kept going.\n\n\"Ahhhhhhhhhhhh!!\"\n\n\"James!\" Dawn exclaimed.\n\nI let Katie go and jammed my cock in deep and held it.\n\n\"Ahhhhhh!! Fuck!! Fuck!! Fuuuuuuuuck!!\" Katie screamed as contractions ran through her body.\n\nI started pumping cum into her as she kept jerking.\n\n\"Ahhh!! Ahhh!! Ahhhhhhhhh!!\" Katie let out.\n\nI spread her legs apart and held myself up so she could breathe.\n\nKatie's body was beet red as she gasped for air. She was covered in sweat as she lay there.\n\n\"Damn, your cum is hot.\"\n\nDawn got off the bed and went into the kitchen. When she came, back she had a bottle of cold water.\n\n\"Here, Katie,\" Dawn said.\n\n\"I need to rest a minute...\" Katie moaned then sipped the water.\n\n\"Dan, are you enjoying watching your wife being fucked?\" I heard Amy ask. \"It looks like it.\"\n\n\"I am surprised, but I am enjoying it.\"\n\n\"Why don't you show me how much you are enjoying it,\" Amy said.\n\nAmy got up on the bed next to us on her hands and knees.\n\n\"Seriously?\" Dan asked.\n\n\"I'm not going to ask again,\" Amy said.\n\nKatie had turned and was looking at her husband. He got up on the bed behind Amy. I watched as he rubbed her ass for a minute.\n\n\"Emmmm, that's it,\" Amy said as Dan slid into her.\n\n\"I don't believe this,\" Dan said. \"I may never get this chance again.\"\n\n\"Katie, do you want to do this again?\" Dawn asked as she sat next to us.\n\n\"Oh, yes. Anytime I can.\"\n\n\"Hey, don't forget me,\" Dan said.\n\n\"Him too!\" We all laughed.\n\nDan was working his cock in Amy as he rubbed her back. Katie was watching him closely.\n\n\"Do you two think you would like to meet some of our friends?\" I asked.\n\n\"You mean at one of your orgies?\" Dan said, and laughed.\n\n\"They are not orgies,\" I heard Samantha say.\n\n\"I don't know. If anyone found out, I would lose my job,\" Katie said.\n\n\"The only way anyone would find out would be if you told them,\" Dawn said.\n\n\"What about you, Dan?\" I asked.\n\n\"It would be up to Katie.\"\n\n\"How many people are we talking about?\" Katie asked.\n\n\"About a dozen couples,\" I said.\n\n\"At one time?\" Katie asked.\n\n\"Usually, but not always. Dan, would you be okay with Katie being fucked 5 or 10 times one night. The guys like new ladies,\" Dawn said.\n\n\"You're kidding!\" Katie replied.\n\nDawn laughed.\n\n\"I guess that goes both ways!\" Dan exclaimed.\n\n\"Hell, honey, you can't fuck me but twice in one day anymore!\" We all laughed.\n\n\"I guess, maybe,\" Dan said.\n\n\"Okay, I'll see about getting you invited to our next party,\" I said.\n\n\"When is it?\" Katie asked.\n\n\"We were thinking of having a Christmas party, but Dawn may be gone. I guess New Year's Eve,\" I said.\n\n\"Sounds good, if that is the soonest!\" Dan exclaimed and laughed.\n\n\"I have to talk to some folks about new people joining our group. I'll let you know.\"\n\n\"Okay.\"\n\n\"They may want to meet you two first,\" Dawn said. \"If they do, I'll give you a call and see if you two can come for dinner one night.\"\n\n\"Just dinner?\" Katie asked.\n\n\"Well, we would have to see if they like you,\" Dawn said. \"That may involve a test drive!\"\n\nWe all laughed.\n\nDan was driving his cock into Amy as we all watched.\n\n\"Oh, fuck, I'm spent,\" Katie said as she lay next to me.\n\nAmy was on the end of the bed, so she spread Katie's legs and moved between them as Dan kept going.\n\n\"Oh no...nonono...\" Came from Katie.\n\nAmy placed her mouth over Katie's pussy.\n\n\"Ohhhhhh...nooo!\"\n\nDan sped up as he watched Amy eating his wife. They kept this up for a while until Katie was coming again.\n\n\"Oh, fuckm Dan! I'm coming!!\" Amy yelled.\n\n\"Ahhhhhhh!!\" Came from Dan as he pumped Amy's pussy full of cum.\n\nAmy sat up and rubbed her tits as Dan watched. She moved on the bed until she straddled Katie's head. We all watched as they got into a 69 and ate cum out of each other for a while.\n\n*****\n\nAmy rolled off of Katie after she had come the last time.\n\n\"That's it...I'm wasted,\" Katie moaned.\n\n\"You two take the shower in here, we are going to the other bedroom,\" Dawn said as she got up.\n\nThe four of us stood and walked down the hall to the other bedroom and showered. We were in the den when they came out and sat.\n\n\"Did you have a good time?\" Dawn asked them.\n\n\"Oh, yes,\" Katie said.\n\n\"Any regrets?\"\n\n\"I don't have any. Do you, honey?\" She asked Dan.\n\n\"As long as you had a good time, honey.\"\n\n\"I did.\"\n\n\"Dan, would you be okay with Katie coming over to the house when you work nights?\" I asked.\n\n\"I don't know, I like to watch!\"\n\n\"I would have to find a sitter,\" she said. \"I leave the school at 3:00 and the sitter stays until 5:30 so I can get work done at the house.\"\n\n\"You could come by here occasionally after school,\" Dawn said. \"Just give us a heads up.\"\n\n\"I'll have to see.\"\n\n\"Hey, can I come by?\" Dan asked.\n\n\"Sure. Give us a call to check we are here and are not at school,\" Dawn said.\n\nDan grinned.\n\n\"It's 6:30, I guess we better get going,\" Dan said. \"We have to pick up the girls.\"\n\nKate and Dan found their clothes and put them on. Once Katie had her clothes on, she walked to Dawn and whispered to her, and Dawn giggled.\n\n\"We had a wonderful time, thanks,\" Katie said.\n\nWe walked them out to their car, and they left.\n\n\"Dawn, why did I feel all the lust from you this time?\" Samantha asked.\n\n\"I'm not sure. I didn't try and hold it back this time, that may be why?\"\n\n\"Even I felt it,\" Amy said.\n\n\"We forgot one thing,\" Samantha said.\n\n\"What? I asked.\n\n\"Me!!\"\n\nI walked Samantha over to the sofa, and she got on the edge on her knees and leaned over. I got behind her and slowly slid my hard cock into her.\n\n\"Oh, finally...\" Samantha moaned.\n\nI worked my cock in Samantha slowly as she got into it. She was concentrating on feeling me as I held her ass and slid in and out.\n\n\"What did Katie whisper to you about?\" I asked.\n\n\"She told me she had always fantasized about a bunch of guys fucking her one after the other.\"\n\n\"Maybe we can make that happen.\"\n\n\"Amy, help me start dinner,\" Dawn said.\n\nThe two of them went to the kitchen. Samantha and I enjoyed a nice long fuck until she came several times.\n\n\"Oh, that helped,\" Samantha said as she sat.\n\n\"Are you satisfied now?\" I asked.\n\n\"I'm never satisfied, you know that!\"\n\n\"What did you feel coming from Dawn?\"\n\n\"Pure lust, is the only way I can describe it. It was the same way I felt.\"\n\n\"I wonder why it has started happening,\" I said out loud.\n\n\"Does Dawn know why?\"\n\n\"I'm not sure.\"\n\nSamantha and I sat and talked until Dawn and Amy had dinner made. We all ate then watched some TV until about 10:00.\n\n\"Is everyone ready for bed,\" I asked.\n\n\"In a minute,\" Samantha said, looking down at her lap.\n\n\"Something you want to talk about, Sam?\" Dawn asked. She was quiet.\n\n\"Sam just tell them,\" Amy said.\n\n\"Tell us what?\" I asked.\n\n\"Well, ...you told me to make a wish list...I did.\"\n\n\"That's good.\"\n\n\"I was thinking about something I might want to do with the money...but...I am not sure you two will approve.\"\n\n\"Sam, that is your money, you can do whatever you want with it, within reason,\" Dawn said.\n\n\"I thought of something I have wanted to do, but never thought I could. I might be able to do it now.\"\n\n\"What is it, Sam?\" Dawn asked.\n\n\"Well, you two have been bugging me about going to medical school...that was something I wanted to do when I was in high school but knew I would never be able to afford it.\"\n\n\"We told you we would pay for it if that was what you want to do,\" I said.\n\n\"I don't want you to pay for it...I wanted to do it myself...but there was no way I could. Now...I have enough money I could...maybe.\"\n\n\"Samantha, if you want to use your money to go to med school, you can do that,\" I said. \"You would have enough.\"\n\n\"Maybe...but I have already started, and med school is hard to get into...it may be too late.\"\n\n\"Sam, it is never too late,\" Dawn said. \"I'm sure your grades are good enough to get you in if that is what you want to do.\"\n\n\"I guess...but that is a long time in school.\"\n\n\"It is. You have to finish your undergrad degree, then med school is four years, then a residency that can be 5 or more years,\" Dawn said.\n\n\"Twelve years. I would be thirty-one!\"\n\n\"Sam, you know what? In twelve years, you will still be thirty-one,\" I said.\n\n\"I don't know if I could get into med school here, I wouldn't want to go anyplace else.\"\n\n\"You can get in here,\" Dawn said.\n\n\"You don't know for sure.\"\n\n\"Yes, I do.\"\n\n\"How?\"\n\n\"I asked. I had the Dean of the medical school look over your records. If you do well on the MCAT, you will be fine.\"\n\n\"Were you planning on this?\"\n\n\"No, I just asked. Would you want to do what John and Keith do?\"\n\n\"Yes. They do some great things for people that need it.\"\n\n\"Then you wouldn't have any trouble getting into a residency with him,\" Dawn said.\n\n\"Did you know I wanted to do this?\"\n\n\"Sam, you are very smart, and I just want you to do whatever you want to do,\" Dawn said.\n\n\"Sis, do you want to go to medical school?\" Samantha asked.\n\n\"No way! You are the one that should be in med school, not me. I'm happy in grad school now.\"\n\n\"Are you sure?\" Samantha asked.\n\n\"Oh, yes. I want you to go to med school. Now you can pay your own way...stubborn.\"\n\n\"Sam, we would have paid your way, but if you are more comfortable doing that with your money, that is fine,\" Dawn said.\n\n\"I don't even know where to start,\" Samantha said and sighed.\n\n\"Are you ready for the MCAT next week?\" Dawn asked. \"You can wait.\"\n\n\"Sure, I'm not worried about it. I have had at least one semester in each area, accept physics, but I took AP physics in high school.\"\n\n\"That is your next step then. Once you get your score back, you and I will go see the Dean.\"\n\n\"Then, what?\"\n\n\"Med school starts in the Fall, but you will have two years of credits already by then.\"\n\n\"They are not the right ones, though.\"\n\n\"Sam, you can start med school with any degree, but pre-med is better. Your nursing credits are close to pre-med credits. Don't worry about that. The advisors will go over everything and decide where you would need to start. I would guess third-year pre-med,\" Dawn told her.\n\n\"I still don't know. That is a lot of school.\"\n\n\"You were going to be in school for at least six more years anyway. All you will be adding is a residency. Sam, you are more than capable of doing this,\" Dawn told her.\n\n\"I don't know...\"\n\n\"Why don't you talk to John and Keith, then make up your mind. You can still take the MCAT Wednesday for the PA program,\" I told her.\n\n\"Okay. I'll think about it.\"\n\n\"Do that. Now, are you ready for bed?\" I said.\n\n\"Yes!\"\n\n*****\n\nMonday morning, we were eating breakfast with Amy.\n\n\"Is your sister still in bed?\" I asked.\n\n\"No. I checked on her at 6:00, and she has her head in the MCAT book,\" Amy said.\n\n\"I'll be right back.\"\n\nI went up to Samantha's room.\n\n\"Hey, you need to eat breakfast,\" I said.\n\n\"I'll get something.\"\n\n\"What are you doing?\" I asked as I sat on the edge of her bed.\n\n\"I'm looking up the questions on the internet, so I have a full explanation of them.\"\n\n\"I thought you had the MCAT aced?\"\n\n\"I just want to study more.\"\n\n\"Come eat right now.\"\n\nI got her up and down to the kitchen and fixed her some breakfast. After she finished, she went back upstairs. Amy went out to the pool.\n\n\"I think I will call John and Keith and see if they can come by tonight for dinner,\" Dawn said.\n\n*****\n\nI hadn't seen Samantha all morning, so I took her a sandwich and a soda about 1:00. She had her books spread out on the bed with her computer.\n\n\"Take a break and eat,\" I said.\n\nShe took the sandwich and ate.\n\n\"How is it going?\"\n\n\"I know most of this.\"\n\n\"You can't know all of what will be on the test. It is open-ended to see how much you know and how good your reasoning is.\"\n\n\"I want to know it all.\"\n\n\"Hey, you can't put this kind of pressure on yourself. You can study, but there will be things on the test you don't know, but I think you will know more than others.\"\n\n\"The more I know, the better I will do.\"\n\n\"Okay. Plan on taking a break about 6:00, John and Keith are coming for dinner so you can talk to them.\"\n\n\"Great!\"\n\n\"Eat, and take some breaks,\" I told her and left.\n\n\"What is she doing?\" Dawn asked when I got back downstairs.\n\n\"Studying.\"\n\n\"I didn't want to put pressure on her.\"\n\n\"I think she is doing this for herself. I told her John and Keith were coming for dinner, and she seemed happy.\"\n\n\"Good.\"\n\n*****\n\nJohn, Carol, Keith, and Elizabeth arrived at about 5:30. Samantha was excited to talk to John and Keith, while Dawn, and I finished making dinner. After dinner, Samanta was talking to John and Keith while Dawn and Amy talked to Carol. Elizabeth was sitting with Carol.\n\n\"Elizabeth, come with me,\" I told her.\n\nShe stood, and I took her downstairs to my studio.\n\n\"What are you, about three months now?\"\n\n\"Just about.\"\n\n\"I want to take some pictures of you. Take your clothes off.\"\n\n\"James!\" Elizabeth said and laughed.\n\n\"I mean it.\"\n\nElizabeth smiled, then starting taking her clothes off. Once she was naked, I had her sit on a black drape while I put a roll of film in my camera. I wanted some nice black and white photos of her.\n\nI got the camera loaded and turned on the flash units as I got down on the floor with her.\n\n\"Your tits look nice,\" I said, admiring her growing tits.\n\n\"Keith likes them.\"\n\n\"I want you to come back in three months and let me take some more photos. Then when you are nine months, come back.\"\n\nI spent about an hour taking pictures of Elizabeth. She was having fun as I had her move around.\n\n\"These will be nice,\" I told her as I got up from the floor.\n\nI walked to her to help her up, but she reached up and rubbed my hard cock through my pants.\n\nElizabeth got up on her knees and unbuckled my pants and pulled them down and started sucking my cock. She looked up at me as she worked her mouth on my cock for a long time, taking her time working at deep throating me until I filled her mouth full of cum.\n\n\"Emmm, that was good,\" she said. \"I stay so horny now.\"\n\n\"Keith is not afraid to fuck you, is he?\"\n\n\"No, I just can't get enough.\"\n\n\"Hormones.\"\n\n\"I wish I could bottle it!\"\n\nI helped her up, and she got dressed.\n\n\"If you don't tell Keith about the pictures, you can come back and then surprise him with them.\"\n\n\"As long as you will fuck me next time.\"\n\n\"Deal.\"\n\nWe went back upstairs and joined the conversation. Elizabeth sat next to Keith and hugged him."
    ],
    "authorname": "drmac100",
    "tags": [
        "dawn",
        "james",
        "lottery",
        "redheads",
        "samantha"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/life-after-the-lottery-ch-64"
}
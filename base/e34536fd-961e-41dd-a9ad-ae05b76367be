{
    "title": "No Tan Lines",
    "pages": [
        "<center>No Tan Lines</center>\n\n<center>Winter in Florida, a Girl, a Guy, and a Boat</center>\n\n<center>By Chloe Tzang</center>\n\n\u00a9 2019 Chloe Tzang. All rights reserved. The author asserts the right to be identified as the author of this story. This story or any portion thereof may not be reproduced or used in any manner whatsoever without the express written permission of the author, except for the use of brief quotations in a review. If you see this story on any website other than Literotica.com, it's been copied without the author's permission.\n\nAnd that obligatory (but short) little intro from Chloe: I started this story out for the Literotica Summer Lovin' 2019 competition and ended up finishing it in haste, just, and with a few minutes to spare, for the 2019 Literotica Winter Holidays Competition (but okay, I had to change the seasons).\n\n\"No Tan Lines\" didn't quite come to me out of nowhere. My guy and I looked over a big old boat back in Spring of 2019 (an old wooden 45 foot Chris Craft Constellation from the early 1960's with a couple of huge old original Chrysler V8's and a lovely aft deck, huge swim platform and a flybridge). It was built from mahogany covered in fiberglass sheathing (I know, I know, now I do, anyhow. Fiberglass sheathing over wood is a big no-no. Much better to strip, replace any rotten wood, epoxy, and then layer with marine ply and more epoxy), which we didn't think about buying because somebody else had already put an offer in, but the old guy in his 80's who owned it said come and look at it anyway, and he spent an entire afternoon showing us over her, and answering lots of questions, and believe me, I had a lot. \n\nMy first experience looking at a boat like that and it was fascinating, and the woodwork inside was gorgeous. It sold really cheaply, he wanted to move it fast, it was quite a few hours' drive from where we live, and it would have been waaaaaay too much work for us to restore anyway, not that I have any skill whatsoever in that field, and neither does my husband, altho he could probably turn his hand to it, and I'd happily give it a try, and I'd love to learn -- but it needed a heck of a lot of work done to bring it back from that slow decay that old boats experience over the decades (as I found out when I started reading up on building wooden boats -- George Beuhler's book -- and on restoring old boats, which makes sense), and I guess I was daydreaming about what it would be like to live on a boat like that, so when this story more or less popped into my head, I just had to write it.\n\nIt's a sweet little first-time romance, 17-18 Literotica pages, 60k words, more or less, so it's not so short, but with a happy ending, and with lots of sex but absolutely no blood and gore, and I've written far too many long introductions lately, so I'll just leave it at that. I do hope you enjoy... and now I'm going back to work on the stories that I was working on before... Anyhow, enjoy, and if you like boats, fishing and romance, well, this one's for you, and I hope I got the boat and fishing stuff right, coz I've never done either. Anyhow, enjoy, and Happy Christmas everyone... Chloe\n\n<center>* * * \"No Tan Lines\" * * *</center>\n\n<center>People on the mainland wouldn't understand\n\nWhat it's like dipping toes in the white sand\n\nWhat it's like every night going caveman\n\nNo tan lines, just you and I</center>\n\nI Wish, Emblem3\n\n<center> * * * </center>\n\n\"They look pretty good from here, don't they?\"\n\nI glanced sideways at him. He'd been standing there looking through the wire mesh security fence at the boats docked in the marina when I wandered up, kind of bored and wishing there was more to this place than the shops and restaurants and fishing shops. No beach within walking distance, and you couldn't get near the river for the two big marinas and the boatyards though, and that was all there was. That, and seniors. Lots of seniors, with their walkers and their walking sticks and their little pet dogs that mostly looked as old and geriatric as the seniors, with their hearing aids and thick glasses, out enjoying the winter sun, and I don't know about the rest of Florida, but so far, winter here wasn't what I would have called cold.\n\nFelt more like summer to me.\n\n\"Send Jenny down to stay with us over the winter,\" my Aunt Suzy had said to my Mom and Dad a couple of weeks ago, when she'd called to see how I was doing. \"She can stay come down before Christmas and stay on right through to summer, until High School starts in September if she likes. It's beautiful down here, she can take it easy, maybe study when she's up to it, and the sunshine'll help her recover, I'm sure.\"\n\nOkay, I could see why my Mom and Dad would think that'd been a good idea, because all I'd been doing the last few weeks, since they sent me home from the hospital, was lying curled up in bed staring at my bedroom ceiling, or lying on the couch staring blankly at the family room walls, and Mom and Dad both had to work. That, and they'd exhausted themselves over the last five months, coz one or the other of them had come in to see me every evening for five months, and they'd both come in on the weekends. They deserved a break.\n\nI could kind of rationalize that, and besides, who wouldn't want to get away from winter in Minneapolis, because it wasn't like I was allowed outside, not with the cold, and I hated lying around at home by myself but I just didn't feel up to anything else. It wasn't like Mom or Dad could take time off work, and all my old friends were at school, and when they did come around to visit, it was like we didn't have anything in common anymore.\n\nOkay, maybe my Aunt and Uncle had thought me coming to stay with them was a good idea too, but now that I was here, with them, I knew they hadn't realized just how ill I'd been. I guess my Mom hadn't been completely honest with them about that either. Mom always looked at the rosy side of everything, and I guess she'd thought I was a lot better than I was. Or maybe she'd hoped that I was. I dunno, and I wasn't going to ask, because at least it was better than staring at walls in Minneapolis.\n\nI'd sort of thought yeah, okay, why not, myself, when Mom asked me if I'd like to go down to Florida for the winter, stay for Christmas, and maybe even over spring and summer, but after a week down here, I wasn't so hot on it anymore. More like exhausted, and I was feeling worse after a week here than I had when I'd arrived, and my brain was fried, and it hadn't been in good shape when I arrived here.\n\nHere? \n\nSmall Florida town, on the Atlantic coast, south of Miami. Not quite the Florida Keys, but real close to the Everglades, and Key Largo was straight out there somewhere. Lots of sunshine for sure, but no real beaches, not here. Southern Florida winter, so it was actually kind of warm without being too hot, but there wasn't much to do. This was small town Florida. Quiet, boring, not one of the big resort towns, or Fort Lauderdale, nothing like Miami, and I'd flown in to Miami, and sat in the car looking out the window while Aunt Suzy drove south, and it hadn't looked like anywhere I wanted to be. \n\nAt least this town was quiet. Everything here revolved around a couple of big marinas on the river, a few boatyards and workshops with rows of boats being worked on, and a whole lot of seniors who must've retired here coz it was cheap or something. Nice enough if you liked boats and fishing and sitting around playing bingo, and dying of old age and everything, but I didn't play bingo, and I didn't plan on dying either, although I'd come close, and my Uncle and Aunt didn't have a boat. \n\nThey had a Chinese restaurant.\n\nIt opened seven days a week. Breakfast, lunch and dinner buffets. \n\nIt was busy, every day, and they lived in the apartment upstairs from the restaurant. The apartment wasn't air-conditioned, and it wasn't heated either, and it was noisy. Street noise. Parking lot noise. Customer noise. Clatter of dishes from the kitchen noise. It was a concrete shell and when it was sunny, it soaked up that heat. It hadn't been chilly since I arrived, and at night, even in winter, it was too hot for me to sleep until the early morning. On a sunny winters day, it baked all day, even with the windows wide open, and every fan they had pointed at me. Seriously, I thought about going next door to the gas station and buying up half the freezer of party ice and filling the bathtub and just climbing in.\n\nYeah, it was that hot, and this was winter.\n\nI hated to think what it'd be like in summer. Unbearable?\n\nAuntie Suzy and Uncle Wayne liked the sun and the heat, and they didn't mind the odd chilly night, said it was refreshing. They would, they'd moved down here years ago, been here almost all their lives. They were used to it. Me, I'd grown up in Minnesota, where it was nice and cool in fall, cold in winter and cool again come spring. Summer lasted about two months and we had aircon then.\n\nA week with Auntie Suzy and Uncle Wayne and I was bored, and there's not much worse than being bored, not when you combine it with being too tired and weak to do anything. That and not actually being interested in doing anything anyhow, because my brain was just a cloudy grey fuzz. I wasn't even interested in the books I used to love, and I was going to be here for another eight months, because whenever I thought about going home, I wanted to throw up. Seriously.\n\nMaybe it was better being here. Maybe.\n\nMaybe I was recovering, because I'd been really ill, and the Doctor said I was better but I wasn't supposed to go back to School until spring, and by then I'd have missed just about the entire twelfth grade, so what was the point. Might as well start Twelfth Grade again in September, after summer, along with everyone else. I was gonna have to do it anyhow, because three months wasn't going to get me caught up. I had some text books and stuff to study, but every time I opened them I just zoned out, staring blankly at them, so I gave up.\n\nI'd tried helping out in the restaurant. Thought it'd give me something to do, but the first day I tried, I was so tired after a couple of hours that I ended up dropping off to sleep in the booth right at the back.\n\n\"You're here to recover, Jenny, not work. Go out, relax and have fun. Walk around, explore, go back upstairs, take a nap, watch a movie, read a book.\" \n\nMy aunt tossed me out, and out was hot. Even in winter that heat was just exhausting, coz I still wasn't feeling that great. Felt like crap, really, and I hadn't seen a single person my age. Not one. Wasn't sure I wanted to, anyhow. What was I gonna say? \"Hi, I'm Jenny and I'm too tired to do anything.\" I don't think so.\n\nAnyhow, yeah, well, it was hard to have fun when you didn't know anyone, not that I thought I'd have any fun, coz really, I couldn't think of anything that seemed like fun anymore. Not even the movies I used to like, or the books I'd enjoyed reading, back before. Maybe if you had a boat here, you could enjoy yourself a bit more, but I didn't have a boat. \n\nNot that I'd know what to do with a boat anyhow.\n\nSit there and look at the water?\n\nYeah, right.\n\nThis morning I was out again, while it was still whatever passed for cool in Florida in winter, before that winter sun started baking me, and I was on the wrong side of the marina security fence. All I could do was look through the mesh, and I'd been wandering around looking for the last couple of days. I even recognized some of the boats. I'd seen them that often.\n\n\"I like coming 'round this side and looking at them from here too.\"\n\nI'd almost forgotten about him. Didn't sound like he was trying to hit on me. I was getting used to older guys here talking to me without trying to hit on me. Guess when you got to your seventies or eighties, and I figured some of them were maybe in their nineties, you kinda realized there wasn't much point in hitting on some girl my age, but I wasn't much interested in talking to anyone anyhow.\n\nThis guy was a lot younger than those seniors. Was he trying to hit on me? Honestly, I didn't really care that much. I'd just ignore him. Don't look at them, don't respond, and these days that was real easy. Ignore them and they go away.\n\n\"Not from 'round here are you?\"\n\nNot from round here? Guess that was obvious. I hadn't seen any other Chinese girls around here either, except in the mirror. Guess I stood out, coz I'd been getting a few looks. I'd ignored them, or I'd brushed them off. Another quick glance, and okay, he seemed harmless enough. Actually, he really didn't seem that old at all when I looked again. Late twenties maybe? He had a nice smile, along with a lot of wrinkles around his eyes.\n\n\"No, just visiting, and yeah, I like looking at them.\" It was kinda strange talking to someone again. I hadn't really talked to anyone I didn't know for months, and it almost felt like my mouth was someone else's, and the words felt strange.\n\n\"I saw you here yesterday and the day before.\"\n\nI glanced at him again, checking him out and he didn't look sketchy. He wasn't looking at me at all. He was looking at the boats and yeah, no bad vibes or anything. Just a guy looking at boats. Short-sleeved shirt and muscles. Looked like he worked out a bit. No tattoos, not that I could see, but he did have all these scars on his arms. Baggy shorts, hiking sandals, weird collection of scars on his legs as well as his arms, tanned, fit looking, not that old at all. It was just his face, lined, with wrinkles around his eyes. Made him look older.\n\nHe sounded a bit tired. Like me.\n\nI shrugged. \"I like looking at them.\"\n\n\"Your folks got one?\"\n\n\"No, I'm staying with my Uncle and Aunt in town. They live here.\"\n\n\"Sorry, thought you were one of the marina kids. Folks bring 'em down and sit on the boat in the marina all day, and the kids get bored silly.\"\n\nI nodded. I'd already noticed that from out here on the wrong side of the fence. In there, on the other side of the fence, the right side I guess, were the boats. Expensive looking boats, most of them. In there, one the other side of the fence, were the families on the boats. Dad, Mom, and two point five kids who either sat around listlessly or ran around on sugar highs from all the pop or juice they were drinking, and the junk food and ice cream they were eating. \n\nThose boats, they'd go out. I'd watched them, and sometimes they'd come back. Other times I guessed they headed up or down the coast to another Marina, or maybe straight out to Key Largo or Bermuda or the Bahamas or down to the Caribbean islands. Guess they were down here for Christmas. Nice life for some, and I wouldn't have minded. Better than walking aimlessly around this town. Maybe one day that'd be me over there, sitting on a boat, soaking up the winter sun, looking casual and elegant or something. \n\nNot this year, though.\n\n\"Not staying on one of those then?\" Now he glanced my way and smiled.\n\n\"No, wish I was. My Uncle and Aunt run the Chinese restaurant back there.\" I pointed. You could see the sign from here. \"Golden Phoenix Chinese Buffet.\"\n\n\"Hey, I've been there. Eat there all the time. Great food. Suzy and Wayne, they're you're Uncle and Aunt?\"\n\n\"Yeah, and the food's not bad.\" Even if you were Chinese. And the spring rolls were the best.\n\n\"Hey, my name's Dave. Dave Prentice.\"\n\n\"Jenny,\" I said, after a second. No, he didn't look sketchy, and he knew who Aunt Suzy and Uncle Wayne were. \"Jenny Dao.\"\n\n\"You want to come take a close up look at some of the boats?\" he said. \"Take a walk around, inside the marina.\" He grinned. \"I live on one, over the far side.\"\n\n\"You do?\" I said, perking up. I'd like to look at them from a bit closer. \"Yeah, okay, sure.\" \n\nI mean, marina, security, broad daylight. I could actually get into the marina. Get to see some of these boats up near them. Why not? Better than standing here, looking at them from the outside, and it wasn't like I had anything better to do, was it? \n\nThen, suspiciously, having second thoughts. \"Are you trying to hit on me?\" It just came out.\n\n\"Nope, but call your Uncle and Aunt, tell them where you're going,\" he said. \"Hey, they know me, more or less. I bring in fish for Wayne every now and then. Here's my Driver's License, take a photo and send it to them, they'll recognize me. Shouldn't go off with some guy you just met without telling anyone.\"\n\n\"Yeah, okay,\" I said, pulling my mobile out, feeling more comfortable by the second. Quick photo, and yeah, it sure looked like him. Send a message to my Aunt's phone. \"What's the name of your boat?\" I asked, ready to key it in.\n\n\"No Tan Lines,\" he said.\n\n\"Sent,\" I said, tucking my mobile away. He better not be hitting on me. I couldn't deal with that. Didn't want to deal with anything like that.\n\n\"Let's go,\" he said, and we did. Turned out it was a long walk around to the Marina entrance. \n\n\"Mind if we stop for a minute,\" I said, halfway there, sort of not exhausted but I was feeling it, sweating and breathing too fast, feeling a bit faint. The doctor at the clinic back home, he'd said take it easy, don't push yourself. Walking two blocks was pushing myself? Jesus! But then, guess I'd been on my back in a hospital bed for five out of the last six months and they'd only let me out in the end coz the health insurance company was getting really shirty about paying, and they kept questioning the hospital, and the doctors, and my Dad. That, and I really wanted to get out of hospital myself, and the doctor on my case, he'd been a bit reluctant, but in the end he'd signed me out.\n\n\"Take your medication every day,\" he'd said. \"Get your weekly checkups. And rest. You need a lot of recovery time, and it's going to take a while to get your strength back.\"\n\nGod, my legs were quivering.\n\n\"Something wrong?\" he asked, like he was all concerned.\n\n\"No,\" I said, bending forward, hands on my knees. \"Just wait a second.\"\n\nBreathe in, breathe out, get my breathing under control, rest, and in a couple of minutes I was okay, but Jesus, I was so tired and it wasn't even nine am. Hadn't slept to well last night either. Hadn't slept to well for months now, except when they'd put me out, and that wasn't exactly relaxing, was it.\n\n\"Sorry,\" I said, when I could talk without panting for breath. \"Didn't mean to scare you. I went into hospital to have my appendix out back in summer, caught multi-drug resistant pneumonia real bad in the hospital and then there were all sorts of complications and I was there for months, got to know intensive care really well. Mom and Dad sent me down here to help get over it, but I still feel like crap.\"\n\nComplications? I'd almost died about six times, that's what I found out after I got out, and I'd only found that out coz I read through my file while I was waiting to see the doctor at the walk-in clinic my parents took me to for my follow-ups, and god, I'd told him far too much about me. Maybe because he was the first person I hadn't already known that I'd talked to in months. Besides doctors and nurses, anyhow. I better stop. \n\n\"Jeez, that's not so good,\" he said.\n\n\"It wasn't,\" I said. \"And I'm sure not as fit as I used to be.\" I stood up, slowly, breathed in, breathed out, and I wasn't shaking. \"I'm sorry. If I'm too much trouble for you, you go on. I can go back to my Uncle and Aunt's.\" \n\nI didn't want to though. That apartment was like a concrete cave. Maybe there was a library here somewhere. An air-conditioned library. I could ask. Or I could just hide out in that booth at the back of the restaurant that was usually empty. Or maybe go to that cinema and hide out and sleep at the back or in a corner or something, but I'd seen some weird people walking in when I wandered by yesterday, so maybe not.\n",
        "\"Don't you worry about it.\" He smiled. \"Not like I'm in a rush. There's not much to do around here except work on my boat and fish. Got all the time in the world.\"\n\nI almost smiled. \"If you're sure.\"\n\n\"I'm sure, Jenny. You get your breath back, and tell me when you need a rest. Don't push yourself.\"\n\n\"I'm okay, let's go now, I got my breath back.\"\n\n\"You here for Christmas?\" he asked as we walked. \n\nSlower this time, much slower, and he was watching me. No reason for him to care. Guess he was just a nice guy or something. I did hope he wasn't gonna hit on me. It'd be nice to talk to someone, as long as he didn't hit on me. Didn't think I could deal with that. No think about it, really. I couldn't deal with that. Couldn't deal with anything much, really.\n\n\"Staying from now right through to summer,\" I said, although I wasn't sure, but it was easier just to say it. \"Mom and Dad sent me down to recover, and I thought it was gonna be more fun that it has been. Haven't met anyone my age since I arrived. My Aunt didn't tell me this was one of those towns seniors come to die or something.\"\n\n\"There's a few of us who aren't seniors here,\" he said. \"I sure didn't come here to die.\"\n\n\"Yeah, but it's mostly people that live here or retired here, and there must be someone my own age around, but it's not like I've met any of them. They're all working in the marinas or on boats I guess.\" \n\nHe chuckled, but I didn't think it was that funny.\n\n\"What do you do, anyhow?\" he asked. \"College?\"\n\nNow that was funny. \"Yeah, right,\" I said. \"High School, or I was anyhow. Finished eleventh grade, and I missed all summer and the start of twelfth grade coz I was in hospital, and I'm not supposed to do anything for another two or three months, so I got to repeat twelfth before I get to go to College.\" \n\n\"Right,\" Dave said, eyeing me. \"Could 've sworn you looked older than that.\"\n\n\"My birthday's January first,\" I said. \"I missed the cutoff by four hours. Oldest in the class, every time, and I'll be nineteen in a few weeks.\" Okay, having a birthday in January sucked. The boys in my class when I started twelfth grade were all juvenile retards, and younger than me, and redoing twelfth with everyone another year younger, and no friends, that was gonna suck. I was going to have to do it, but just the thought depressed me.\n\nLots of things depressed me these days, and it was better to not think about them, because when I did, I just lay there and looked at the ceiling blankly, replaying that crap again and again in my mind.\n\n\"That sucks,\" he said. \"Here's the entrance.\" \n\nEmerald River Marina, the sign said, and I hadn't known that. This wasn't main street, it was down a couple, a lot closer to the river. Never been down this far before. There were two other marinas were further up the road, up the river. I'd never walked that far, but I knew they were there. Saw them when we drove in from Miami. Aunt Suzy'd pointed them out.\n\nDave swiped us through the gate, waved to the security guard in his gatehouse. \"Hey Zed, bringing in a guest.\"\n\nZed looked, grinned, nodded, waved me through, and I followed Dave. Inside, yeah, the marina was way bigger than I'd thought from looking through the fence from the far end. Couple of huge workshop buildings with boats inside and guys working on them. Lines of boats on stands and blocks outside, some covered in tarps, but they all looked like they were being worked on too, and there were trucks or cars alongside them. Couple of big boat ramps and some boat trailers. A big showroom with expensive looking boats, and more outside, jacked up on stands, sitting on trailers, looking shiny and expensive.\n\nFurther down, and there was a restaurant and bar, big washrooms, a self-serve laundry, a marine parts shop and another shop that looked like it was all about fishing. Wide causeways built out into the water, or maybe it was sort of canals dug into the land? Cars and trucks parked by the docks. Rows and rows of docks, most with boats tied up. Ones with masts and ones without. Some boats with people on them. Some empty spaces here and there, sort of brown-green water, muddy looking. Not the sort of water you swam in, and that wasn't even mentioning alligators and things.\n\n\"That one's really big,\" I said as we walked past it, and I was eyeing this huge thing that looked like a floating shoebox sitting on a boat hull. All tinted glass and glossy white paint, towering above the dock.\n\n\"That?\" Dave said. \"That's an old Viking 65, thing only goes out when it's dead calm. Owned by some banker from New York, he flies down with his wife and kids and uses it half a dozen weekends a year, never takes it out. It's a floating condo. Rest of the time it just sits there empty. Marina does all the maintenance on it and cleans it for him. Take that out in a three foot swell and it rolls like a drunk at midnight, and that's with those fancy Naiad stabilizers. I'd be shit-scared it was gonna roll over and take me with it to be honest.\"\n\n\"Really?\" I said, looking at it. It did seem a bit high in the water.\n\n\"Yeah,\" Dave said, and he paused with me. \"It's only got a draft of about six feet, hull semi-planes, in flat water, it can move, but it'll suck up the gas like you wouldn't believe, but see how high the sides are? You got the hull there, then this superstructure, and then that flybridge up there.\"\n\n\"Yeah,\" I said, looking up. And up.\n\n\"See,\" Dave said. \"It's fifteen, maybe eighteen feet up to the top of the flybridge there, and all that superstructure acts like a big sail. Catches the wind, and when you get anything over three foot waves, she just rolls. Boats like this can capsize or sink real easily when the weather cuts up rough and they're outside. Okay here in the Marina, or in a dead calm along the inside, but that's about it.\"\n\n\"What about these ones?\" I asked, pointing, and we walked down towards them.\n\n\"Those ones over there in a row that all look the same, those are Carvers, Bayliners, Searays, those three there are Silvertons, that's a Cruiser, that bright pink one's a Tiara, and that there's a Kady Krogen and an old deFever next to it, those two, they're what they call Trawler Yachts, slower, mostly run on diesel, not gas, and that one's an Albin. Going to sink one day, never seen anyone on it as long as I've been here and you can see how rundown it is. There's hundreds like these up and down the coast. Floating condos, that's all a lot of them are.\"\n\nHe laughed. \"People buy 'em because boating appeals to them, and then they find it's a lot of work, and their wives don't like the boat because it's a bit cramped for space, and when the weathers rough it's no fun. They buy based on the glossy brochures and the online advertisements, and then when they want to sell, well, boats are a buyers' market.\"\n\n\"What about this one?\" I had to stop and look at it. Glossy white, open deck at the back with big glass sliding doors into the cabin, a ladder up to the top of the cabin and then this tower thing that seemed to go waaaay up and jeez, looked like it was built to move and there was this rack of fishing rods along the back.\n\n\"That?\" Dave grinned. \"That's a 50 foot Egg Harbor Sports Fisherman, that seat at the back there's for fishing from. Not a Bertram, but not bad. The one next to it's an old Lancer, and that next one there's a Hatteras sports-fisher. Good boats, those Hatterai.\" He went on to tell me about the boats we were walking past, and he knew them all.\n\nFountain. Lagoon. Beneteau. Azimut. Silverton. Cruiser. Regal. Jeanneau. Grand Banks. Powercat. Sea Ray. Rampage. More. More name than I could possibly remember. He rattled off the names as we walked by, and he knew them all.\n\n\"These ones, they're sailing yachts,\" he said, pointing. \"Some of them even sail, but a lot of them just sit there. People think they want to sail, buy one, and then they find out it's a lot of work, and the boats just sit there. There's a lot at the back of the marina down the far end where you can't see them that's full of old boats people have just walked away from. Boneyard boats. Pick 'em up for a song but then you spend a fortune bringing them back to life, even if you can do a lot of the work yourself. It's sad, it's really sad.\" \n\nHe shook his head. \n\n\"What about this one?\" I said, looking at this old boat five minutes' walk further on. Not as glossy as the others, and it really did look older somehow, and there was a guy up on the roof of the cabin, working on something. It wasn't a sailing yacht, that was for sure, and it wasn't like the glossy new ones we'd walked by. Bigger. A lot bigger, but it looked good to me.\n\n\"That? That's an old late 1960's Hatteras motor yacht,\" he said. \"Sixty five feet. Lots of space inside. Real comfortable to liveaboard. Guy that lives on this one bought it cheap, it was a project boat that the guy that owned it before him stripped down and then bailed on. Lot easier to strip it down than to rebuild it, and he found that out the hard way. Ant bought it for a song and he's been doing it up for a couple of years now, real hands-on sorta guy. He's been working on her longer than I've been here, and he's nowhere near finished. Probably still be working on it when he dies, but Ant won't mind that. He loves fixing it up. It's his life.\" He grinned, waved. \n\n\"Hey, Ant, how's it going, man? Got that engine working yet?\"\n\n\"Still working on it, Dave,\" the old guy called back. \"Seized solid, might have to get it hauled and rebuilt. God forbid I have to replace it. Christ knows what the bozo did to it, but he sure didn't maintain them. Half way through stripping it down but I needed a break, so I decided to work on the flybridge wiring instead.\" He glanced at me. \"You and your friend want to come up and have a beer? I need a break, and I could sure do with a cold one.\"\n\nDave looked at me. \"You want to come up?\" he said. \"Ant's a nice old guy, swears a bit, that's all, but he's got a heart of gold. He's got soft drinks too.\"\n\nI shrugged. Before, I would've smiled. Now? I wasn't quite sure I knew how to smile anymore. \"Why not, not like I've got anything else to do, is it?\" My lips twitched like they were trying to smile but they'd really forgotten how. \"And hey, I get to look at two boats for the price of one.\"\n\nNot that there was a price, and I was enjoying looking, close up. This was actually interesting, and I wanted to look.\n\nDave laughed. \"Guess you do,\" he said. \"Come on, over here.\" He led the way, up some steps, and across onto the deck of the boat. \"Mind the gap,\" he added, reaching out with one hand.\n\nYeah, well, I don't mind saying I took it. The water was a long way down, it wasn't that clean, and there was a gap. Not a big one, but big enough to swallow me and it didn't look shallow down there either, and I didn't feel like swimming.\n\n\"Hey Ant,\" he said, leading me up this ladder thing to the top of the cabin and jeez, big comfortable looking cushioned seats on both sides, and three single seats on these chromed stands across the front, and some beautiful wooden decking.\n\nLooked immaculate except for what I guess was whatever you called the dash n a boat. It was opened up. Couple of tool boxes and wires and gauges and things all over, hanging out and an awning thing that kept the sun off. Florida! Jesus! Even in winter you needed to keep the sun off. I'd read it snowed in Florida in winter sometimes but so far, nope. Not even cold enough for a jacket. Cold? I was sweating.\n\n\"Yo, Dave,\" Ant said, opening a small fridge. \"I got the fridge working anyhow. Have one.\" He tossed Dave a can of Bud. \"What would you like, Miss? Got Bud, got Coke, got Sprite, got Iced Tea, got Red Bull, got...\"\n\n\"Iced Tea please,\" I said. \"I'm Jenny.\"\n\n\"Pleasetameetya, Jenny,\" he said, fishing me out an Iced Tea, and it was really cold. Beautifully cold, and it was already hot. Another sunny winter's morning in Florida and not a cloud in the sky. Under the shade that covered the cabin top or whatever it was, there was a soft breeze and it was really nice.\n\nI sat down pretty quick, popped the top on that iced tea and drank, and god it was good. Dave eyed me, and I guess he took in how beat up I was from that walk, 'n him and Ant started talking about the boat, and whatever it was that Ant was doing to it. Me, I listened and yeah, it was interesting. Didn't have much idea what they were talking about though.\n\n\"Here, Jenny.\" Dave passed me a bottle of ice-cold water, and god, that was even better. Hadn't realized I was that thirsty. It was half gone before I put it down.\n\n\"You okay now?\" he asked.\n\n\"Yeah,\" I said, kind of grateful. \n\n\"You want to look her over inside, Jenny?\" Ant asked.\n\n\"Sure,\" I said, actually interested, which was a change coz I hadn't been interested in much for a while now, but I wanted to see what it was like. I followed him down the ladder to that back deck, and the whole dashboard control and wheel thing was replicated down here.\n\n\"You can control her from down here inside, or up there on the flybridge,\" he said, pointing up. \"I haven't actually ever taken her out though.\"\n\n\"How long have you had her?\" I asked, looking around. The woodwork was beautiful. Gleaming polished wood, and chromed instruments and levers and dials and things, and I had no idea what any of it was for.\n\n\"Three years now,\" he said. \"She was really rundown so I got her for a song. Old guy that owned her died, his wife just wanted to get rid of her, she just about gave her to me so she could stop paying the marina fees. Got her hauled and fixed up the hull and deck first, fiberglass had a few blisters and a couple of soft spots but that wasn't any big deal. Had her stripped and patched, and the gelcoat redone, then painted, put her back and started on everything else. Electricals were mostly okay, one engine's great after I overhauled it, but the other was seized up.\"\n\nHe grinned. \"That was what I was working on this morning. Anyhow, come on down and have a look around. Just be careful where you put your feet.\"\n\n\"He led me in and through this door thing, and down some more steps and inside, where it was cool and dark until he flicked the lights on.\n\n\"Mind your step,\" he said. \"There's crap everywhere and I've got some of the floor panels up. That's the seized-up engine down there.\"\n\n\"That's huge,\" I said, looking down, and there was all sorts of machinery looking stuff, and pipes, and wiring and tanks, all down there, crowded together, and I had no idea what any of it was except maybe the engines, coz that was obvious. Looking around up here, there was a beat up old couch off to one side, these brown wooden walls, big LCD, sound system, a bar. Some kinda wood that you knew would have looked really nice when it was new, but now it wasn't. Paneling and everything.\n\n\"This is the, guess you call it the salon or something fancy,\" Ant said. \"Not to fancy now, but after it's fixed up, it'll look great. Down here and watch the steps. Here's the kitchen and that side's the dinette.\"\n\n\"The kitchen's big,\" I said. U-shaped, with a full-size fridge and big stove, coffee machine, counter top oven, tiled floor, polished wood countertop, lots of cupboards, all glossy wood and everything. Other side of the aisle, or whatever you called it, there was a big U-shaped dinette, like I'd seen on that RV we'd taken on holiday once except way bigger. Looked really nice.\n\n\"Galley and dinette. First things I fixed up after I repaired and painted the hull,\" Ant said. \"Man's gotta eat.\"\n\n\"What's up front?\" I asked, curious.\n\n\"Washroom in here,\" he said. \"And a cabin this side, bunks, and I got a V-berth up in the bow.\" He showed me. \"Teak planking on the walls there,\" he said. \"Two bunks this side, one that side, hanging lockers, put some bookshelves in here, coz I gotta lotta books.\"\n\n\"Nice,\" I said, and it did look lovely. Old-fashioned lovely, all old polished wood, like something from fifty years ago, which I guess was about right. \"Actually, no, it's beautiful.\"\n\n\"Won't show you my stateroom at the back,\" he said, grinning. \"I'm still working on that. Get that done this year, along with that engine, and there's a guest cabin back there that's next. Gonna turn that into a home office setup.\"\n\n\"Hey, we better wander off, Ant,\" Dave called down. \"Gonna show Jenny a real boat that works next.\" He chuckled. \"Mine.\"\n\nMe, I kind of smiled, and that surprised me. Couldn't remember when the last time I smiled was. I didn't remember what it felt like either, and it was strange.\n\n\"That was awesome, Mr. Ant,\" I said, following him back up and outside, onto the big deck at the back. \"I really enjoyed that.\" I meant it, too. This morning was full of surprises. I really had kinda liked it, and I hadn't liked much for quite a while.\n\n\"Forget the Mister, Jenny. Just call me Ant, and come back anytime,\" he said.\n\n\"Would if they'd let me in,\" I said. \"I'm gonna be here until summer.\"\n\n\"Jeez, you poor kid,\" he said. \"This is an old folks town. You gotta go where there's beaches and stuff to find kids your age.\"\n\n\"Guess I'm shit outta luck,\" I said, almost smiling again. \"Staying here with my Aunt and Uncle.\"\n\n\"Wayne and Suzy. You know, Golden Phoenix Chinese Buffet,\" Dave said, real helpfully.\n\n\"Oh man, that's your Uncle and Aunt? Love that buffet. Go there every Friday for lunch, don't we Dave?\" He eyed Dave. \"Why don't you talk to the office, get the kid a pass, Dave? Be more fun here than in town at least. You can always chill out up on the flybridge here. Heck, give me a hand if you're bored. Welcome the company.\"\n\n\"Thanks,\" I said, wondering if I was really gonna get that bored. Been here four days now and I figured maybe I would, and I did like his boat.\n\n\"Might just do that,\" Dave said. \"See ya later, Ant. Let's go, Jenny.\"\n\nTook us another ten minutes to walk along, real slowly, all the way to the far side of the marina, and then out on one of the docks. Out and out, and we must have passed about fifty boats, half way out to the end, and he turned down one of the little jetty's between the tied up boats, and there were some steps...\n\n\"Wow, is this yours?\" I said, pausing and looking, coz there was only one boat it could be. Just looking. She was beautiful, Gleaming glossy white, dark tinted windows, streamlined and she looked like she was flying just sitting there in the water, tied to the dock.\n\nDave grinned. \"Yeah, whaddaya think?\"\n\n\"Wow.\" That was all I could say, looking at it. \"Wow, what is it?\"\n\n\"She. Always call a boat 'she',\" he said.\n\n\"What is she?\" I gasped.\n\n\"Bertram 61,\" he said. \"Her name's 'No Tan Lines.' Want to look her over?\"\n\n\"Of course, I do,\" I said, not even blushing. \"Try and keep me off her, now that you've talked me into walking this far. She's beautiful.\"\n\nHe chuckled, taking my hand and helping me up, and I didn't take my hand away even when we were standing in the back. She was just, wow! Wow! Beautiful polished teak deck planking, a beautiful seat I figured must be for fishing, glossy white walls, a big padded couch up against the back wall of, I guess you called it the cabin or something. A frigging aquarium with a lid?\n\n\"That's the live bait tank,\" Dave said, grinning, and I guess he could see where I was looking. Then, looking at me. \"Come inside, have a rest and I'll get you another cold drink. You look like you could use one before I show you over her.\"\n\n\"I'm beat,\" I said. \"I'm sorry, I didn't mean to go all exhausted on you. I really want to see her.\"\n\n\"Don't you worry about it,\" he said, leading me inside. \"We're here now, you just put your feet up, have a cold drink and have a rest. I'll make lunch for us both.\"\n\n\"Lie down on the couch.\" He pointed, and I was so tired, I didn't even look around, although there was so much to look at, all this blue-covered furniture and tinted glass and gleaming wood and what looked like a kitchen to die for. I looked, but my eyes were just about closing as I sat down, put my feet up, and leaned back. That couch was amazingly comfortable in all the right places, and I leaned back and I closed my eyes...",
        "<center> * * * </center>\n\n\"Oh God,\" I said, my head spinning, and it was a good thirty seconds before I figured out where I was. Lying on that couch in his boat, except now there was a pillow under my head and a thick blanket over me, and I'd been dribbling in my sleep. Gross! \"Did I go to sleep.\"\n\n\"Did you ever,\" he said. \"I was gonna wake you at three but you just did it yourself. You really looked like you needed it.\"\n\n\"Jesus,\" I said. \"I didn't realize I was that tired. I'm so sorry.\" \n\nI'd come here to look, and instead I'd been asleep for almost four hours, and on his boat. Some guest. All I'd seen was this part of the boat, for about two minutes before I closed my eyes, and yeah, it was seriously gorgeous. That blue leather L-shaped couch I was lying on, the dinette up front, and that kitchen with the teak bar seats along the counter, those huge tinted wraparound windows up front. \n\nBest of all, the air conditioning, and that lovely cool dry air that made me feel alive. More alive than I'd been since I got here, and I could breathe.\n\n\"Hey, you don't need to apologize,\" he said as I sat up, and I really did feel a lot better after that nap. \"Come up front and have some jasmine tea. I made you a sandwich five minutes ago.\"\n\n\"You're spoiling me,\" I said, struggling to my feet, walking to that dinette, and it was just as comfortable as it looked. The sandwich he'd made was even better. Ham, cheese, lettuce and slices of tomato with a thin spreading of mayo on some kind of fresh artisan bread, really fresh, and I didn't quite wolf it down, but it was close, and it was the hungriest I'd been in months, and I actually enjoyed it. I was licking my fingers when it was done, it was that good.\n\n\"When 're your Aunt and Uncle expecting you back?\" he asked as I sipped on the jasmine tea, and he was still eating. He'd made two for himself.\n\n\"Jesus,\" I said. \"I usually go back for lunch, and then I take a nap. She'll be worried.\" When I checked, I had half a dozen text messages and two voicemails. \"I better call her.\"\n\n\"Want to come for a ride after you talk to her?\" he asked. \"I was going to take her for a short run, just changed the oil and tuned the engines, and I want to make sure they're running okay.\" He glanced at his watch. \"It's just after three, we can go out, come back around five and I'll give you a ride back to your Aunt and Uncle's. Only if you'd like to?\"\n\n\"I'd love to,\" I said. \"I've never been on a boat in my life.\"\n\n\"Cool,\" he said. \"You call your Aunt and let her know where you are and what you're doing while I get her ready to go.\"\n\nHe'd untied her, gotten all the lines in, and he was back up on the flybridge by the time I'd got off the phone with Aunt Suzy and climbed up to join him.\n\n\"Good to go?\" he asked.\n\n\"Yeah, but I have to call her in a couple of hours,\" I said. \"She was really worried I didn't call her back before, and she's worried about me going off on a boat with some guy I just met. I told her you'd lived here for a couple of years and you'd been to her restaurant and you knew her and Uncle Wayne but she was still worried.\"\n\n\"I can take you back now, if you like,\" he said.\n\n\"It's okay,\" I said. \"She saw your driver's license when I told her to look at her emails, and she remembers you from the restaurant, and Uncle Wayne laughed at her. Told her you were the guy who brought fish in for him now and then, and she remembered you after that. 'Oh, the Fish Guy,' that's what she calls you. She told me to bring you back for dinner. You go there a lot?\"\n\n\"Pretty much every Friday with Ant, and a couple of the other guys that live on boats here,\" he said, grinning. \"...and Wayne likes fresh fish. I bring in fresh fish, he feeds me for free.\"\n\n\"Text her and tell her I'll bring you back after we get back,\" he added. He grinned again. \"And if you enjoy it, I can ask her if it's okay to take you out on her tomorrow for the day. Maybe do some fishing with me.\"\n\n\"Really?\" Okay, I squealed.\n\n\"Really.\" He grinned. \"Do you always get that excited?\"\n\nI giggled, I really did, and I hadn't done that since before, either. \n\n\"Sometimes.\" This was the first time I'd felt like this since I'd gone into hospital back in late June. Jesus, five, six months of my life, just gone, lying in a hospital bed for most of it, and my mood changed, instantly, the way it did all the time now.\n\n\"What's wrong, Jenny?\"\n\n\"Nothing,\" I said, a bit too flatly.\n\n\"Tell me,\" he said, very gently, one finger under my chin, tilting my face up to look at his.\n\nSomething inside me responded to his touch, to his words, but there were no words for how I felt. Depressed? Sad? Angry? Exhausted? Helpless? All of those and more, and the tears trickled down my cheeks and I couldn't stop them. I'd cried like this before, since I'd gotten out of hospital, and I had no idea why, and I never talked to anyone about it. No-one knew, and I didn't tell anyone, because really, who cared?\n\nThe sadness came, the depression, the helplessness. All those months of my life, lying in that bed, hooked up to tubes, feeling like crap, aching and hurting and half the time I'd been either delirious or sedated, or both, and I'd been so alone. My boyfriend had stopped coming to visit me after a few weeks, and in the end, I'd heard he'd started dating someone else. My friends' visits trailed away, and when I got out, hardly any of them had come to see me at home, and when they did, they didn't stay for long. Alone, I'd been so alone, and I couldn't even go back to school until March maybe, and what would be the point then?\n\n\"Not well enough,\" the Doctor had said to me and Mom. \"She needs to take it easy. Take a few months off to recover fully. She can go back for the next school year.\" An entire year of my life, vanished.\n\n\"Jenny,\" Dave said, and his arms folded me into his embrace, held me close, offering me security and protection and comfort and I clung to him, crying into his shoulder as one of his hands held my head, stroked my hair, and he didn't ask what was wrong, he didn't ask useless questions like my Dad or my Mom or my brothers had. All he did was hold me. Hold me, and say my name like he cared, and that was enough.\n\n\"It's okay,\" I said, a couple of minutes later, not letting him go, and he didn't let me go either. He continued to hold me, and somehow I knew that was what I needed from him. \"I'm okay now.\"\n\n\"You're not really,\" he said, stroking my hair, and I breathed in his scent. Sweat, him, salt from the sea, oil from working on No Tan Lines engines, and that scent comforted me. His strength and gentle confidence comforted me even more, gave me security. Gave me strength, and that was what I needed. Security and comfort and strength and someone who understood. \n\n\"You were in hospital for months, you were really ill, if you were in intensive care it was pretty bad, and there's a lot of stress, a lot of anxiety, right?\"\n\n\"Yeah,\" I said, resting my head against him, not at all sure why I was so trusting with someone I'd just met. Some guy way older than me, and I didn't know anything much about him. Just that he smelt right, and he felt right, and I felt safe in his arms.\n\n\"I know,\" he said. \"It's hard to fall asleep at night, you get irritable, you're scared, you're not interested in some of the things you used to love, it's hard to feel positive about things, you have flashbacks to being in hospital, stuff like that.\"\n\n\"Yeah,\" I said, thinking about it. \"Pretty much all of that. Especially the hospital, I can't stop thinking about that, about how close I was to dying. I remember them looking down at me and talking, like I was some kind of experiment or something.\" I was crying again without realizing it. \"How come you know?\"\n\nHe shrugged. \"I was in the military for a few years,\" he said. \"I know all about post-traumatic stress, believe me. Been there, done that and I know, I really do, Jenny.\"\n\nHis arms held me close. \n\n\"What do you do now?\" I asked at last, not crying anymore, trembling in his arms, welcoming his arms holding me, and I felt safe there, and I didn't feel alone, but I did want to change the subject. I wanted to know more about him, too.\n\nHe chuckled. \"It's a clich\u00e9, I know, but I got out of the Navy, got a job down here, and six months in, my Dad had a heart attack and passed away, turned out he had a load of life insurance, guess it was for my Mom but she passed away a couple of years ago, and I got it instead. Only me, no other kids in our family, and after I sold the house, and Dad's business and everything else, he had some investments and things as well, it was a crapload of money, so I invested it all, kept working for a while, then I bought 'No Tan Lines' last year from some dentist who'd bought her new and never taken her out once, moved onto her and decided to take a break while I figured out what I really wanted to do. Right now I do a bit of work on peoples' boats for them, work on mine, help out Ant and a couple of the other guys with theirs, go fishing whenever I feel like it, fill in at the Marina now and then when they need someone. Biggest expense is the docking fees the Marina charges, and diesel for the engines.\"\n\nHe grinned. \"That's why I'm here. The Marina fees here are way cheaper than up around Miami and Fort Lauderdale, or down around Islamorada or Marathon, and I like the climate. That, and its quiet here.\"\n\n\"Sounds really relaxing,\" I said, drying my eyes with the tissues he gave me.\n\n\"It is,\" he said. \"And right now, you're gonna relax with me, okay?\"\n\n\"Okay,\" I said.\n\n\"Good,\" he said. \"You sit in that one, and I'll start us up and take her out.\"\n\n\"I'm sorry,\" I said, feeling No Tan Lines bump into something. The dock? \"You untied her before I started going all drama queen on you.\"\n\n\"She can take it,\" he said, turning a key, pressing buttons on the panel and I felt one engine rumble into life, then, after a long pause, the other. \"That's what rub rails are for, and she already had a scratch or two when I bought her.\" He grinned. \"That way I figured I wouldn't feel so bad when I scratched her myself. And it's a dead calm, a little bump or two's not going to harm her.\"\n\nI sat there looking at all the instruments and levers and things. \"How do you read all this stuff?\"\n\n\"It takes practice,\" Dave said. \"There's radar, that's a GPS with charts, weather system, depth-finder here, anchor, winch, radios, bow and stern thrusters, stuff about the boat and the engines,\" and he was pointing to each of the screens and buttons. \"There's no closed bridge below like you get on some boats, so if you're out in bad weather, it's not too much fun. I kinda like it anyways, myself, had a lot of experience in the Navy, small boats, I got used to it, but on days like today....\"\n\n\"It's beautiful,\" I said, sitting back in that seat, and I loved the view forward and all around. We were so high up here.\n\n\"Where are we going?\" I added, as he eased the engine levers forward and used the bow thruster knob thing to turn us hard right out of the slip, pulling away from the dock, easing us down the lane of water separating the rows of docked boats.\n\n\"We're only going for a short run,\" he said. \"I'll take you out into the Atlantic and down the coast a bit, out to sea and then back in. It's pretty sheltered here, Key Largo's out there and that protects us from the worst weather. Would you like to learn a bit about how to handle her?\"\n\n\"Oh yeah,\" I said. \"But all those controls are beyond me.\"\n\n\"Just like anything else,\" he said. \"You learn bit by bit. You got your driver's license?\"\n\n\"Yeah,\" I said. I'd gotten it just before...\n\n\"Don't you start crying now, Jenny,\" he said. \"Come here and stand in front of me.\"\n\n\"Okay,\" said, not crying, standing in front of him. Between him and the wheel, and he was so close his breath was hot against the back of my head, and his arms were reaching around me.\n\n\"Hands on the wheel,\" he said. \"Under mine.\" His hands lifted and then covered mine and his arms were right around me, like he was almost holding me, his chest brushing my back as I held the cool chromed metal of the wheel.\n\n\"Keep her straight,\" he said, his hands moving mine, and I could feel the low thrumming vibration of the engines through the wheel.\n\n\"She steers really easily,\" he said. \"Twin rudders. Big, lots of control and the faster you go, the better it gets. Now, she's all yours, just keep her straight and I'll look after everything else.\"\n\n\"Wha...\" I squeaked, watching the bow turn, slowly.\n\n\"Turn the wheel right, gently,\" he said. Then, \"left a little and keep her straight,\" and I did, straightening her and wow, she did turn easy, and we were almost out of that lane of boats, swishing softly through the water, and I felt rather than the heard the quiet thrum of the engines.\n\n\"We're going to turn right into the main channel in a second,\" he said. \"You're going to turn the wheel hard right when I tell you too, and I'm going to use the bow-thruster at the same time.\"\n\n\"Okay,\" I said, conscious of how close he was, and somehow liking that closeness, remembering how he'd held me.\n\n\"Turn right now,\" he said, and as I turned the wheel he pressed the bow thruster knob and held it. No Tan Lines bow swung slowly right as we moved into the channel.\n\n\"Straighten her now,\" he said, releasing the knob, and his hands rested on mine as I turned, and now I could see we were heading for the entrance to the Marina, and the river was out there, broad and muddy greenish-brown.\n\n\"That's it,\" he said. \"You're doing great. Now keep her pointed at the marina entrance straight ahead there. When we get there, we'll head out to the center of the river and then turn right again and head out to sea through the cut.\"\n\nHis hands released mine, resting on my waist as I steered her out, and I liked his touch, liked his hands on me, enjoyed his closeness, knowing he was there, right behind me, almost but not quite touching. \"I'll take over when we get near the cut, it's not slack water, there'll be some waves and current, and maybe some other boats.\"\n\n\"We're in the river,\" I said nervously, feeling the current move us. \"What should I do.\"\n\n\"See those posts with signs on them,\" he said, pointing to these posts sticking out of the water. A line of them upriver and downriver, both. \"See the colors.\"\n\n\"Yeah,\" I said. \"Red. They've got numbers on them too.\"\n\n\"Remember the color. Those channel markers tell us where it's safe to take the boat. Where you see them, it's because we need to follow the channel to stay away from shallow water or rocks and shoals. This boat draws just on five feet, and we want a few more feet than that to be safe, so if we drift out of the channel, we'll run aground and likely damage the props and the rudders. Not good.\"\n\n\"Where am I going?\" I asked, steering her straight.\n\n\"Look at the marker,\" Dave said. \"It's red, right.\"\n\n\"Yeah,\" I said. Bright red.\n\n\"Red, Right, Returning, that's the rule. The red markers should be on your right when you're coming back into port from out at sea.\"\n\n\"So we go past it and then keep the markers on our left?\" I said. \"Coz we're going out. And we keep them on our right coming in?\"\n\n\"Yeah, you got it,\" he said. \"You do it. I'll step in if you make a big mistake, but otherwise she's all yours.\" He chuckled.\n\nI didn't think it was that funny, but I was enjoying steering her. \n\n\"Here, show you why on the chart.\" He leaned forward, adjusted one of the screens to max. \"See the contour lines there. This is us, and those lines tells us the depth to either side. 'No Tan Lines' draws nearly five feet, and we need more than that to be safe. See that line, that's two. That's how shallow it can get to either side of the channel. If we drift out of the channel we're in, we're going aground. That's why you have to know which side of the channel marker to follow.\"\n\n\"Okay,\" I said. \"Got it.\" I was looking up now, trying to match what I was seeing to the display. \"So I gotta follow the bend around here, right.\"\n\n\"Yep,\" he said. \"You do it, don't turn too hard, and you can increase the power now, take her up to ten knots.\"\n\nI pushed the levers for both engines forward a notch, very carefully, slightly increasing the power, watching the needles on the dials flicker upwards. Feeling 'No Tan Lines' pick up speed, and we were moving faster, swishing through the water. A slow turn, following the channel markers around, and then the narrow cut that led out to the Atlantic was straight ahead.\n\n\"I'll take her from here,\" Dave said. \"You stay where you are, keep your hands on the wheel, under mine, so you can feel how she handles, and how I'm steering her, okay?\" His arms around me, his chest against my back as I leaned back against him, his hands over mine, his voice in my ear, and I was enjoying this, and the smell of the sea on the breeze.\n\n\"Okay,\" I smiled.\n\n\"Good,\" he said, increasing the power. The engines thrummed, the rpms jumped. One thousand. Twelve hundred. Fourteen hundred, and we were doing fifteen knots on the display, and 'No Tan Lines' was surging through the water, leaving a long straight wake behind us when I glanced around Dave and looked back.\n\n\"Hold on and brace yourself, keep your knees bent,\" Dave said in my ear. \"When we go through the cut, it'll be a little rough. Three, maybe four-foot waves, bit choppy, nothing dangerous for us this afternoon though, but hold on tight and keep your knees bent, okay.\"\n\n\"Whoooo-hoooooo,\" I yelled as we bounced, hanging on to the wheel, bracing myself against Dave. Bounced again, and a wave of white sprayed up around the front, blowing back in the wind of our passage and in an instant, I could've been competing in a wet t-shirt competition. We bounced again and again, crashing over the waves, and Dave wasn't easing up at all. His hands controlled the wheel, minute movements, adjusting her direction as we headed out and then we were through, the water almost flat now that we were outside, mere ripples as we headed out to sea.\n\n\"I'll take her along the coast,\" Dave said, turning the wheel as my hair blew out in the breeze, and my tee-shirt was already starting to dry in the warm breeze. 'No Tan Lines' turned, and now we were paralleling the coast that I could barely make out, because we were already that far out. I could see it better on the display though. There was another display too. One showing three red dots and a blue dot that was moving visibly.\n\n\"What 're those?\" I asked, sliding one hand out from under his and pointing at one of the screens. Raytheon, whatever that was.\n\n\"Radar,\" Dave said. \"See those three red dots? One's ahead of us, two off left.\"\n\n\"Yes.\"\n\nHe pointed ahead. \"Can you see the boat there, that's the red dot ahead of us. The two to the left, they're further out, out of sight.\" He pointed to the moving blue dot. \"That's an aircraft,\" he continued. \"Could be sight-seers, could be a Coast Guard helicopter.\"\n\n\"Do you use it much?\" I asked, looking around. \"I mean, you can see . . .\"\n\n\"Use it more at night or in storms,\" Dave said. \"Boats are supposed to have running lights for use at night, and most do, but I can set this radar to sound an alert if there's something coming up that looks like it might be on a collision course. I'm out here fishing on my own a lot, so if I'm out here and down there with a line out, or grabbing some food or taking a nap, I set the alert for anything close, like a couple of miles or something. That gives me time to get up here and take a look and get out of the way or change course if I need too.\"\n\n\"That's useful.\"\n\n\"Yeah, it is, and if I'm out in a storm, which I have been, I can see what's around even through the storm. See how it shows the landforms?\" He pointed to the land visible on the screen. \"I mostly use the GPS to navigate, but this gives me a better feel for where I am than the GPS when I'm close to land.\"",
        "\"What's that one with the fish symbols?\" I asked, and then, yeah, well, he said he went fishing. \"Is that for finding fish? You mean they've got stuff that helps you spot fish? That just doesn't seem fair.\"\n\n\"Not for the fish it's not,\" and he laughed. \"Here, I'll slow her down a little, you take over steering her, and as you get used to it, we'll pick up speed. You good?\"\n\n\"Sure,\" I said, my hands back on the wheel as he eased the engine levers back and we slowed, eleven knots, then ten. \n\n\"She's yours,\" he said, taking his hands away from mine. \"Turn her, play with her, speed her up, slow her down. Get a feel for how she handles. There's nothing out here you can hit so have at it. Sit up in the helm seat where I am and take her. I'll be right beside you.\"\n\nHe slid down, his body pressed against me for a couple of seconds as he eased out, and I enjoyed that pressure, his body against mine. I wriggled into the helm seat, hands on the wheel. 'No Tan Lines' seemed to be steering herself, but when I eased the wheel around, she turned gently. Turned gently back again as I turned the wheel the other way, taking her in a circle, carving a figure 8 on the water, enjoying how she responded.\n\n\"Can I go faster?\" I asked.\n\n\"Sure,\" he said. \"Just ease more power on, both levers at once, don't do anything too fast.\"\n\nI eased the twin levers forward, feeling the surge of power as 'No Tan Lines' picked up speed. Twelve, fifteen knots, and we were leaving a wake as I turned her, circled, weaved, pointed her out to sea, glancing at him and he knew what I was thinking.\n\n\"Sure,\" he grinned, and he was smiling as he watched me, one hand on the wheel, one on the two levers for the engine and I eased them further forward, still slowly, and now 'No Tan Lines' was moving. Fifteen, sixteen, eighteen, twenty knots and she was leaping through the water now, and I could feel the ripples as we raced across them, and when I glanced back, there was a long white wake curling out behind us.\n\n\"She's going to come up onto the plane any second now,\" Dave said. \"You'll feel her get lighter. Before you do that, try a few gentle turns.\"\n\n\"Okay,\" I said, easing the wheel around, and 'No Tan Lines' curved smoothly, 'n I took her tighter, feeling her respond effortlessly. Straighten her out, slowly curve the other way, weaving through the water.\n\n\"Keep her straight, there's someone coming up behind,\" Dave said, and I straightened her out, glancing back, and yeah, coming up fast, white spray either side and the dude crashed past us. Couple of younger guys, shorts, shades, cans of beer, whooping it up.\n\n\"Jeeze,\" Dave shook his head. \"Good boat, Scarab, but they know not what the heck they're messing with.\" He grinned at me. \"Power her up, Jenny, slowly. Keep her in a straight line behind them, don't try and turn her or anything, and I've got it if you make a mistake.\"\n\n\"Okay,\" and I eased those engine levers forward. Slowly, and Dave was watching me. \n\n'No Tan Lines' seemed to leap ahead. Twenty five, six, seven, eight, nine, thirty knots and we were holding steady behind that Scarab, and I could hear our engines now, a throaty rumble and the water was calm, almost flat, barely a ripple, and I held her straight without any effort at all.\n\nA quick glance at Dave. He grinned, and I grinned back, hand sliding over to the engine levers, wondering how fast 'No Tan Lines' could go as I eased them further forward. Thirty one, two, three, four, thirty five and we were creeping up behind them. I eased her over, gently, straightened her before we hit their wake and she crashed through those waves easily. We were paralleling them now, and they had no idea what was coming up behind them.\n\nCatching up slowly, and then we were parallel with them, a hundred feet out, and I eased off a little, matching their speed, and Dave was laughing. One of them glanced over, dropped his beer, whacked his buddy and pointed as I waved, and Dave was just about doubled up. The guy driving her reached for the dash, that Scarab leapt ahead.\n\n\"Twin Yamaha F350 outboards,\" Dave said, and he laughed. \"Let's see how they do against twin 1900 Cats. Pour it on, Jenny, I'm right here.\"\n\nI could hear those Yamaha outboards screaming, but I'd been waiting, one hand on the engine levers and as they leapt forward, I eased the levers forward, and 'No Tan Lines' responded.\n\n\"You go, girl,\" Dave yelled over the rush of the wind. The Caterpillars throaty rumble became a low growl, 'n we were up at forty knots now, pacing them effortlessly and looked like they'd hit their limit, and I was just totally buzzed.\n\n\"Drop the hammer,\" Dave called out, laughing, 'n I did, notching the engines up and we surged forward, up to forty-four knots, and they were dropping away behind us. I waved, grinning as we blew them away, 'n I kept it there for another ten minutes, just riding the speed and the adrenaline, the rush of wind, the wheel in my hand, alive, feeling the surging power of 'No Tan Lines' under my hands as we raced in a dead straight line outwards, our wake laid out like a ruler behind us. The color of the sea morphed from green to blue, a deep blue like I'd never seen before, and I eased the power of now, slowing, suddenly wilting from exhaustion and adrenaline overload, but not wanting this to end.\n\n\"Can you take her?\" I asked, easing the levers forward, slowing her gradually until she came off the plane, the water hissing under the hull, and I was sagging a little, and he was right there, taking over the wheel as we changed seats and I relaxed, letting the breeze wash the excitement and the adrenaline away, breathing in the fresh sea air, salt and cool now.\n\n\"This is pelagic water out here,\" he said. \"This is the real blue, the ocean blue, not the coastal waters. Beautiful isn't it? You have to see it to believe it can look like this.\"\n\nI looked, and yeah, he was right. A blue so intense it invaded your mind, swept you up in its beauty and left you speechless.\n\n\"It's lovely,\" I said, at last.\n\n\"It's as close to heaven out here as I've ever been,\" he said. \"Beautiful water, beautiful boat...\" He turned his head towards me and smiled, but his look was serious. \"Beautiful girl.\"\n\n\"Hey, I'm not a boat bunny,\" I said, not quite alarmed. First thing Aunt Suzy had warned me about when I arrived. Guys thinking a girl was a boat bunny, coz there were girls like that. Quite a few, Aunt Suzy said, but mostly places like Miami and Fort Lauderdale and Islamobad. Not small town southern Florida.\n\nHe grinned. \"Hey, I know you're not a boat bunny, Jenny, so relax, okay. This isn't Miami or Fort Lauderdale or anything.\"\n\nI couldn't help grinning back, and it felt really good to smile and mean it, and hey, I was smiling.\n\n\"We're going to head back in now,\" he said, easing her around, and I sat there as he got us back up onto the plane, steered us back towards where we'd come from, and I was tired now, exhausted, but enjoying myself as we headed back.\n\n\"Why don't you lie down on the pad up front there,\" he said, glancing at me as I yawned again.\n\n\"Huh?\" I said, then, standing, hanging on to the grab bar, and looking. \"Oh.\" Coz there was a big bed sized pad in front of the helm console that I hadn't even noticed. Turned out it was really comfortable too, and I closed my eyes and....\n\n\"...Wake up sleepyhead.\"\n\nI did, slowly, and we were tied up in the Marina and I sat up, slowly, really dopey. \n\n\"I'll drive you back to your Aunt and Uncle's,\" he said, helping me up. Helping me down the ladder and then off 'No Tan Lines' and down the dock to what turned out to be an old F150. \n\n\"Would you really like to come out tomorrow,\" he said, as we pulled up outside the restaurant. \"For the day? Really? I'll take you fishing if you like.\"\n\n\"Yes please,\" I said. Then, eyeing him. \"If it's not any bother for you.\"\n\n\"None at all. I go fishing all the time, be nice to have some company, so it's tomorrow for sure then,\" Dave said. \"I'll come here and pick you up, okay? Don't want you to tire yourself out just walking down to the boat early in the morning, and it'll be a long day.\"\n\n\"It's...\" I started to say.\n\n\"It's not a problem, Jenny,\" he said. \"You're a lovely girl and I've really enjoyed your company today. I'll be here to pick you up at seven, okay?\"\n\n\"Okay,\" I said meekly.\n\n\"Bring a swimsuit as well,\" he said. \"Maybe we can do some snorkeling if you like to swim.\"\n\n\"I've only ever swum in a swimming pool,\" I said.\n\n\"Then you're in for a treat.\" He grinned.\n\n\"Okay.\" I smiled back.\n\n\"Good,\" he said, smiling, releasing my hands, walking me in through the door. \"Hi Suzy.\" He waved, then looked down at me. \"You get an early night, Jenny. See you in the morning.\"\n\nI watched him leave. So did Aunt Suzy, and she waited until I was behind the counter.\n\n\"He's taking me fishing tomorrow,\" I said, before she said a word. \"He's got a beautiful boat down at the Marina.\"\n\n\"Be careful, Jenny,\" Aunt Suzy said. \"Told you before. You see guys like him with young girls all the time. It's a thing around some of the marinas here, boat bunnies. They hook up with these wealthy guys down here on the boats, and live off them, and there's a reason they call the girls bunnies. You don't want him thinking you're one.\"\n\n\"Okay, okay, I got it,\" I said. \"You told me when I arrived, and he told me that already. He knows I'm not one of those.\"\n\n\"Good,\" Aunt Suzy said, and someone was there, wanting to pay.\n\n\"I better get an early night,\" I said. \"He's picking me up at seven tomorrow morning. He said he'd bring some fish back for Uncle Wayne.\"\n\n\"Okay,\" Aunt Suzy said. \"Text me and let me know when he's bringing you back. Don't be too late, okay.\"\n\n\"Okay.\" \n\nIt was only after I went to bed that I realized I didn't have a swimsuit. I hadn't bothered packing one. Went to sleep anyhow, exhausted, sweating in the heat of my small bedroom and it hadn't been that warm after the dun went down. I woke up in the middle of the night, sweating, coughing. Coughing on and on and water didn't help and I was dripping sweat and sleep didn't come. I lay there, tossing and turning until six, crawling into the shower and at least the water was cool.\n\n<center> * * * </center>\n\n\"Dave,\" I said, and it was seven on the dot when he pulled up outside. \"I don't think I can go. I'm not feeling that great.\"\n\n\"You look like shit,\" he said.\n\n\"Gee, thanks,\" I said, but I was feeling worse by the minute, and I had to put my hand out and lean against the truck, and I knew what it was, because I'd felt like this before.\n\nHe looked at me. \"Let's get you in the truck, and sitting down.\"\n\nHe did, and he just about lifted me in, and I sagged into the passenger seat. He walked around, climbed in, started the truck up and looked at me again, put his hand on my forehead for a few seconds.\n\n\"Did you tell your Aunt or Uncle you weren't feeling well?\" he asked.\n\n\"No,\" I said, weakly. \"They need to get everything ready. They're up at five every morning, and it's getting busy. I can't ask them. If I lie down, I'll feel better.\"\n\nHis hand rested on my forehead again, cool. \"You've got a bad fever. I'm taking you to my Medical Center,\" he said, flatly, and I didn't have the strength to protest. I was working overtime just to breathe now, and god, I could hear myself wheezing. Dave was on his phone, talking as he drove, but it was just noise, and I closed my eyes.\n\nGod, no. My parents couldn't afford that again. Not for a fever. \"I'm on my Dad's medical plan but there's a huge deductible. I'll take some Tylenol, I'll feel better tomorrow. I just need to rest.\"\n\nExcept I hadn't had any rest last night, and the heat, it was already way too hot, and I was pouring sweat, and Dave was wearing a jacket.\n\n\"You close your eyes and don't worry about that,\" he said. \"I've got it covered.\"\n\nNo idea what he meant, but I closed my eyes. No idea how long it took, but next thing I knew he was opening my door, lifting me out, carrying me through some automatic doors, and then I was on one of those stretcher things on wheels that hospitals and emergency rooms use, and I knew what those were. Been on them way too often, and there was a mask over my face and I could breathe again, and they were wheeling me in. I didn't want to be there. I remembered doing this in that hospital I'd been in back home far too well. \n\nFar too many times.\n\n\"One hundred and four point three,\" the nurse said, looking at the thermometer, and god, I had that sinking feeling I'd had far too many times over the last year when they looked at my test results and took my temperature and everything, and I was supposed to be getting better, not ill all over again, and I just zoned out, feeling like shit, and I'd had a lot of experience feeling like that. \n\n\"Can you swallow these?\" someone asked, and I opened my mouth, swallowed them without asking, and closed my eyes as they hooked me up to an IV drip, and I'd been there before too.\n\nAt least Dave was there this time, beside me, holding my hand and asking questions, lots of questions, talking to the Doctor and the nurses. All the usual hospital stuff, poking and prodding, sticking needles in and doing the vampire thing with needles and my arm, x-rays, CT scan. Time passed, a couple of hours and I knew that from the clock on the wall, and Dave was there the whole time, and I heard him, on the phone to Aunt Suzy.\n\n\"It's okay, Suzy,\" he said. \"They know what it is now, you don't need to worry. I'll take care of her today. Why don't you come over to the boat tonight after you close? I'll keep an eye on her until then... no, no, I've got it all covered, don't worry about that.\"\n\n\"No, no, it's no problem at all, I've got a very flexible medical plan...\"\n\n\"Yes, yes, I'm sure. I'll see you then. Call me when you get to the Marina and I'll ask the guy on the gate, Zed, he'll show you where I am. He'll call me and I'll come and meet you...\"\n\nI closed my eyes, and it seemed like forever before I opened them again, and Dave and the Doctor were talking now, their voices low.\n\n\"Pneumonia,\" I heard the doctor say to Dave. \"And we just got her records in from the hospital she was in back in Minneapolis. Looks to me like she might be at risk for chronic obstructive pulmonary disease, and how they didn't figure that one out I have no idea. Public hospitals, they're under way too much pressure, but we'll sort out the pneumonia for now and once we've got that fixed, you can bring her back and we'll run some more tests.\"\n\nDave said something I didn't catch, and then it was the doctor again. \"Yeah, prescribing her doxycycline, along with a cough suppressant and advil for the fever. That should bring it under control quickly. If she doesn't improve by tomorrow morning, or she gets worse this afternoon or tonight, you call me. You've got my cell, call me and bring her straight back in, Dave. Doesn't matter what time, I'll be right there, buddy.\" He took the thermometer out of my mouth. \"Yeah, down to one hundred and two, it's all kicking in.\"\n\nSo okay, I swallowed all the pills and stuff the nurse gave me all over again, and just kind of lay there still feeling like shit while Dave and that Doctor who seemed to know him, coz they were on first name terms, yapped away, and I really didn't want to be there.\n\n\"Hundred point five,\" the nurse said a while later, and that Doctor was back.\n\n\"Yeah, you can take her back now.\" I heard him. \"Check her temperature every hour, if it starts to climb again, you call me and I'll come over.\" He laughed. \"Not like I don't know where to find you, buddy.\"\n\nI closed my eyes and kind of drifted of, until Dave squeezed my hand.\n\n\"Let's get you out of here,\" he said. \"They said you can go,\" and by then I guess the Advil and the drugs really were kicking in, because I was feeling better. Just a bit, but that bit was enough that I figured I was going to live. I mean, I'd been through this before. If you felt better, you were going to live. There were times I hadn't thought that though, and yeah, I knew the difference. Really well.\n\n\"Where are we going?\" I asked, back in the F150, sitting there while he drove, and the winter sun was beating down, but I was cold until he wrapped me in his jacket.\n\n\"I'm taking you back to 'No Tan Lines', Jenny,\" he said. \"I talked to your Aunt Suzy, you'll be more comfortable on her. Your Aunt'll come over this evening.\" His hand reached out to hold mine, and I didn't take my hand away. I didn't want to. I wanted him to keep holding my hand, coz when he was holding my hand I felt safe, and he did, all the way to the dock.\n\n\"Think you can walk to the boat?\" he asked, helping me down.\n\n\"Yeah,\" I said, sweating now, but I didn't feel anything like so bad, and I walked all the way out. With his arm around me, and I liked his arm around me. \n\n\"You need to sleep,\" he said, once we were inside the salon, and it was beautiful inside. \"We're not going anywhere today. You're just going to rest. You can sleep in the guest cabin downstairs. This way.\"\n\n\"Okay,\" I said, following him down the stairs, not even thinking that really, I shouldn't be so accepting and trusting. I mean, I'd known him how long? A couple of days, and I was going to sleep on his boat. \"It's nice down here,\" I added, rather fuzzily.\n\n\"Bed,\" he pointed, and I sat down rather too quickly on the bottom bunk in the small cabin. He knelt down, eased my runners off. \"Lie down,\" he said, pulling a light duvet over me as I did. He checked his watch, and yeah, he wore one. \"I'll check on you in a couple of hours,\" he said. \"Close your eyes and sleep, okay. You'll feel better when you wake up.\"\n\nI woke up once, and kicked my jeans and socks off, unhooked my bra and pulled it out from under my tee-shirt and put it on the beside cabinet, sort of thinking thank god I'd worn a pretty lace one, and not one of my plain old boring white ones, and I went straight back to sleep.\n\n<center> * * * </center>\n\n\"Wake up, Jenny,\" his voice said, cutting through the daze, and it was dark but the hallway light was on, and I wondered if you called it a hallway on a boat. \"Time to take your medicine.\"\n\nI took the pills, took the water, swallowed, and crashed back out, wanting to cry. No going out on his boat, no swimming, no fishing. Sick again, and Aunt Suzy would come tonight, and she'd take me away, and he wouldn't bother taking me out on his boat again. Who wanted to bother with a girl who was so sick she was no fun at all, and my cheeks were wet with tears as well as sweat as I dropped off into a feverish sleep.\n\n<center> * * * </center>\n\n\"She's asleep, Suzy,\" his voice said, real quiet and hushed, but I woke to a dimly lit cabin, light shining in through the open door from the passage. \"She's been asleep all day and this evening. I took her temperature an hour ago, it's down to ninety nine point three now.\"\n\n\"Thank you so much for looking after her, Dave. We had no idea she was so sick, she didn't say a word to us. I called her Mom after you called me, let her know and she says to thank you. She's planning to fly down this weekend and take her back home...\"\n\n\"Why don't you leave her here tonight,\" Dave said, his voice so quiet and soft I barely heard him. \"She's sleeping now, I'll make sure she takes her medication and I'll call you in the morning. You and Wayne 've got the restaurant to run and she's fine here, and I'll keep an eye on her.\"\n\n\"If you don't mind?\" Aunt Suzy hesitated. \"It's not your responsibility, she's staying with us...\"\n\n\"I don't want to go home, tell Mom not to come. I'll be okay now. I'd like to stay here, Aunt Suzy,\" I said sleepily. \"Can I stay here tonight? If Dave doesn't mind?\"\n\n\"Of course, I don't mind, Jenny,\" Dave said, his hand taking mine, squeezing gently. \"I'll look after you, you close your eyes and go back to sleep.\"",
        "Smiling now, holding his hand as he sat down beside me, I was asleep instantly. When I woke up in the middle of the night, he was there, asleep in the chair next to the bottom bunk-bed, still holding my hand. I lay there, looking at him in the darkness, leaving my hand in his, wondering. What did I mean to him that he'd do this for me? Look after me like this? What did he mean to me that I'd let him look after me? That I wanted to stay here, on his boat. With him.\n\nI had no idea, but I trusted him and I felt safe with him, and he was holding my hand as he slept. My eyes closed, I sank down into the welcoming darkness, and I knew I was smiling.\n\n<center> * * * </center>\n\n\"How 're you feeling this morning?\" he asked, and he was still sitting there beside me, except he'd shaved and showered and changed his clothes. He must've done that while I slept, coz I hadn't heard a thing, and my hand wasn't in his. It was under the duvet with me.\n\n\"Much better,\" I said, sitting up, careful not to bang my head, pushing the light duvet aside and swinging my legs around and down before I remembered all I was wearing were my t-shirt and panties, and I was giving him a really good look at them, except he wasn't looking, which was lucky, because they were boring white cotton bikini briefs.\n\n\"Good,\" he said. \"Now take these,\" and he handed me a small dish of pills and capsules and a glass of water that I drank, thirstily. \n\n\"I need to take your temperature,\" he said. \"Going to put this in your ear.\"\n\n\"Back to normal,\" he said, looking at the thermometer a minute later, after I'd sat there with it in my ear. \"Go take a shower, the bathroom's through that door. Your Aunt brought a bag over for you early this morning with all your clothes and everything she thought you'd need. It's up on the top bunk there. I'll go make breakfast, call if you need anything, otherwise come up when you're ready.\"\n\n\"Aunt Suzy did?\" Now that did surprise me. She must trust him too, to let me stay here overnight and then do something like that. Clothes? Everything? Like she expected me to stay here longer or something.\n\n\"Yeah, she called me early, we had a long chat. I told her you were welcome to stay as long as you liked, and I think you'd be more comfortable here on the boat than in their apartment, until you recover completely, anyhow. In the end she said it was your decision.\" He looked at me. \"If you want to go back, I'll take you, but you really should get a portable aircon, and maybe a heater for when it gets chilly, for your room. I'll help you get one with the truck if you want one.\"\n\n\"Really, you don't mind if I stay here?\" I looked around the small cabin. Bunks up against the outside wall, a side stand, small dresser, closet, chair, that teak flooring. All paneled wood, glossy and smooth, and it had its own bathroom as well. I'd never had my own bathroom, and it was small, but it was more beautiful than any bedroom I'd ever had in my life. Aircon, too, and I looked at him. \"How come?\"\n\nI thought about that for a moment longer, and yeah, well, I better be real clear on that one. \"I'm not, you know, a boat bunny or anything.\"\n\nHe chuckled, and I liked that chuckle. \"I know that, Jenny,\" he said, still smiling. \"I know Suzy and Wayne too, not like they're friends, but I know them.\"\n\nI smiled back, feeling a bit silly.\n\n\"I like you, that's all,\" he said. \"And I'm taking some time off, so I can do whatever I like. I'll probably do something eventually, but right now all I want to do is relax and work on the boat, and fish for the next year or so.\" He smiled at me. \"And now that you've walked into my life, maybe look after you for a while.\"\n\n\"And take me fishing.\" I smiled back.\n\n\"And take you fishing.\" He chuckled again, and that chuckle and the look on his face did things to me. Nice things. \"When you're well enough. In a day or two, after Carl gives you the okay.\"\n\n\"Who's Carl?\" I asked.\n\n\"My doctor, the one who saw you yesterday. He's a buddy of mine, we go out fishing together off and on. He's going to come over tomorrow evening on his way home from the clinic if I think you need a check. He'll take a quick look at you if I think you need it.\"\n\nTomorrow evening? Checkup? Dave expected me to be staying tonight and tomorrow night for sure?\n\n\"Told your Aunt Suzy I'd bring you back for dinner tonight, so her and your Uncle can check up on you.\"\n\n\"But I can stay here tonight?\" I asked. \"And tomorrow night?\"\n\n\"As many nights as you want, Jenny,\" he said, not smiling. \"Until the end of summer if you want too.\"\n\n\"Okay,\" I said, not smiling either. Until the end of summer? Really? That was seven months away. Was he serious? All that time on a boat like this? With him? I felt so comfortable with him, and really, how long had I known him? A couple of days, and I wasn't sure that yesterday counted at all.\n\nBut I wanted to stay. With him.\n\nDid I even know what I was doing? Aunt Suzy trusted him. I guess she did. She was okay with me staying here with him. On his boat. I trusted him, but what did I know. What if I was wrong. I'd always been a bit too trusting. It hadn't exactly got me into trouble, but I better be careful. He was older to start with, but his vibes were good, and really, he wasn't sketchy at all. And he'd looked after me yesterday.\n\n\"Is it really okay for me to stay tonight?\" I said, hesitantly.\n\n\"Of course it is,\" he said. He grinned. \"I wouldn't have offered if it wasn't okay.\"\n\n\"Aunt Suzy said it was okay? Really?\" I asked. \n\n\"Yeah, really, she did,\" he said. \"I'm taking you back for dinner, though. You can talk to her yourself.\" He smiled. \"I'm not going to be offended if you change your mind, Jenny. I mean, you don't know me that well.\"\n\n\"I trust you,\" I said, without even thinking about what I was saying, and my hand found his.\n\n\"Thank you.\" He smiled, but it was a serious smile. His hand held mine, squeezed lightly. \"Take a shower, get dressed and come up for breakfast. Take your time. Not like we're going to go anywhere. Not today, anyhow.\"\n\n\"Okay,\" I said, waiting until he'd left and closed the cabin door behind him, and wow, my own bathroom. It was nice, too. A little small, but hey, it was a boat, not a house and it was so well organized. I kind of luxuriated in the shower, washing my hair, and Aunt Suzy had even packed my shampoo and conditioner and everything.\n\nAfter that shower, I sat on the chair, and I was thinking of it as my room, and I smiled as I carefully painted my toenails pink before I dressed. I hadn't painted my toenails since before. \n\n\"Breakfast's ready,\" his voice floated down.\n\n\"Coming,\" I called back, slipping on a halter top and stepping into some panties and shorts.\n\nHe grinned as I emerged on the main deck, climbing the stairs to get there. \"Help yourself from the buffet,\" he said, and wow, he'd been busy, and I was hungry. Hadn't eaten a thing yesterday, and I demolished fruit salad and yogurt, followed by eggs on toast and a glass of chocolate milk.\n\n\"I called Suzy just now,\" he said. \"Told her you'd woken up and you were much better.\"\n\n\"Okay,\" I said. Then, \"Really, are you sure I can stay? It's not too much trouble for you, is it? I don't want to be a nuisance.\"\n\n\"You, Jenny Dao, are not a nuisance,\" he said, smiling, drinking his coffee. \"I'm enjoying having you as a guest, and your Aunt said it was fine for you to stay, and you need some recovery time. She told me a bit about what'd happened. Only a bit, though, and you're far better off here than in your Aunt and Uncle's apartment by yourself.\" He grinned. \"So today, Jenny, you are going to sit around and decorate 'No Tan Lines.' Lie in the sun, lie in the shade, drink water, eat, take your medication, relax, take it easy.\"\n\n\"Doctor's orders?\" I smiled.\n\nHe grinned. \"My orders. But yeah, Carl said that too. He called me this morning to check up on you. He's going to call tomorrow. Now go get your swimsuit on, get your sunscreen and go outside up top, and get some fresh air and some sun.\"\n\n\"Uh, Dave, I don't have a swimsuit,\" I said, after a moment. \"I didn't bring one.\" \n\nAfter six months in that hospital, and a couple more moping around at home, I'd outgrown my old one piece. I hadn't bothered buying a replacement before I left. I'd figured I'd buy one down here if I wanted one. \"I don't really feel up to going shopping either. I can just wear these.\"\n\n\"Feel up to walking down the dock to the truck?\"\n\n\"Yeah, I could do that.\"\n\n\"The Marina shop sells swimsuits. We'll drive there.\"\n\nFifteen minutes later, the truck was parked outside the Marina shop, and I was inside with Dave, and wow, did they ever sell swimsuits. Except my purse was back in the apartment. Aunt Suzy must've missed it.\n\n\"Pick whatever you like, Jenny,\" Dave said. \"We can sort it out later.\"\n\nI wasn't letting him buy me a swimsuit. Except, the way he was smiling, I sort of felt bad not accepting.\n\n\"Thanks,\" I said, and I already had a one piece I liked in my hand.\n\n\"It's Florida,\" he said. \"Buy a bikini as well.\" He grinned. \"Heck, buy a couple.\"\n\nI'd never worn a bikini, but it was Florida, and I kind of liked the thought of wearing a bikini.\n\n\"Okay,\" I said, putting the pone piece back, and I picked three bikinis, and I let him pay for them for me. I never did get back to that one piece.\n\n<center> * * * </center>\n\n\"You never did get to look her over,\" he said, holding my hand as I stepped back down into the cockpit, and god, I was tired again, but not tired enough to not look, and I didn't mind him holding my hand at all. I kind of liked it.\n\n\"You're right,\" I said, then, curious. \"Have you had a lot of girls on your boat?\"\n\n\"You're the first,\" Dave said. \"You get girls around here that move from boat to boat, live off the guys that live on them...\"\n\n\"Boat bunnies?\" I asked.\n\n\"Yeah, boat bunnies.\" He grinned. \"Your aunt really covered the basics, huh?\"\n\n\"Yeah,\" I said. \"I'm not a boat bunny.\" Already said that, but it didn't hurt to say it again.\n\n\"You keep saying that. Didn't think you were,\" Dave said as I followed him inside. \"Let me show you over her down below so you know where everything is, and I don't have to tell you.\"\n\n\"Okay,\" I said, following him down the stairs.\n\n\"Okay, right across from your cabin, we've got my bathroom and back here's my cabin where I bunk down.\"\n\n\"It's beautiful,\" I said, looking around. Lovely wood paneling and timber ceilings, wooden beams, although I guessed maybe they were decorative, cabinets, a huge closet, and it went from one side of the boat to the other and the bed was king-size. \"The bed's really comfortable too,\" I added, sitting on it and bouncing. \"Just right. What's behind the wall, back there?\"\n\n\"The engine room,\" he said. \"I'll show you that later. You get to it through a hatch in the mezzanine.\"\n\n\"Cool,\" I said.\n\nHe grinned. \"Okay, follow me up front. This is the other guest cabin, up in the bow.\" V-shaped cabin and yeah, I could tell it was the bow, with a nice big double bed. \"Bathroom's through here,\" he said. \"I store stuff in here mostly, which is why I didn't put you in here last night.\" He hesitated, not looking at me. \"You can sleep in here tonight, if you like.\"\n\nTonight? Wow. I'd much rather stay here than in the pokey little bedroom at the back of Aunt Suzy and Uncle Wayne's oven, but I kind of liked the cabin I was in. It was right next to his.\n\n\"Okay,\" I said, sort of non-committal, not looking at him either, because how long had I known him? A couple of days? But I really wanted to stay. With him. Weird.\n\n\"Tired?\" he asked.\n\n\"Yeah,\" I said, just about sagging now.\n\n\"Go change into your swimsuit and come up on the flybridge. Relax up there in the shade. I'll get some juice and water, and it's just about time to take your pills.\"\n\n\"Yes, Doc Dave,\" I grinned, and he grinned back as her headed back up the stairs while I headed into my cabin, and yeah, I did think of it as \"my\" cabin, and pulled my new bikinis out of the shopping bag.\n\nI'd never worn a bikini before. Which one?\n\nIn the end, I wore the smallest one. Believe me, it's easy to slip that bikini on when you're in your cabin, by yourself. It's a lot harder to walk out the door, knowing someone else is going to be looking at you. All of you, because bikinis really don't cover very much, and I'd never been one of those girls that enjoys putting herself out there, on display. Miss Conservative, that was me when it came to clothes.\n\nAnd swimsuits.\n\nExcept, Dave. I wouldn't even have bought a bikini, except, Dave. I wanted him to see me. I wanted him interested in me. I wanted him to like me, and he'd looked at my boobs. I'd seen him looking, and they weren't that big or anything. Actually, honestly, they were small, but at least I had them, and in that little black bikini, you could see them. Exposed. \n\nThe side ties on the bikini bottoms left me even more exposed. There wasn't much of me you couldn't see, and butterflies were dancing inside me as I opened my cabin door and climbed up the stairs, onto the main deck. Up on the flybridge, he'd said. I stepped out into the cockpit, climbed the ladder, and there he was, in shorts and nothing else, his back to me, and his back, and the backs of his legs, they were covered in scars, lots of small ones, and a couple of big puckered ones.\n\n\"What happened?\" I asked, looking at his back, my voice quavering.\n\n\"IED,\" he said, sort of matter of fact. \"We were ambushed and I took a few.\"\n\n\"More than a few,\" I said, and I felt really small and inconsequential, so wrapped up in myself and feeling sorry for myself, and when I looked at him, there were far worse things than I'd gone through. I'd just been sick. His back looked like it'd been shredded. \"What hit you?\"\n\n\"Yeah, well, a few things,\" he said. \"Shrapnel from the IED and I got winged by a couple of AK47 rounds and some mortar shrapnel, but that was later.\" He turned. \"But hey, I walked away every time, and they didn't, so it was all good. How are you feeling now?\" He was smiling now, turning, looking at me, and there were scars on his chest too. \"I like the bikini. Better put some sunscreen on though, I've got some here somewhere.\"\n\n\"There,\" I said, seeing a bottle, stepping towards it, brushing against him, and that touch send hot little ripples rushing through me.\n\n\"Come and sit down here,\" he said, pointing me at one of the seats at the side. \"It reclines, like this... lie back and put your feet up. Iced water?\"\n\n\"Please.\" I said, squirting sunscreen on and rubbing it on, and it was really nice in the winter sun. Then, \"thanks.\"\n\nHe sat in the seat next to the helm seat, put his feet up on the dash, popped the top of a Bud and sipped while I drank that iced water, thirstily.\n\n\"So tell me about Jenny,\" he said, and in the end, he coaxed me into talking about me, I did. Growing up in Minneapolis, my family, school, my brothers, Mom and Dad, my friends, everything except going into hospital, but in the end he coaxed that out of me as well, but when I looked at those scars, and he had them all over his shoulders and arms as well as his legs, well, my stay in hospital didn't seem quite so bad, not really.\n\n\"What about you?\" I asked, and he started talking, and I listened, and before I knew it, it was midday and I was taking my medication and eating lunch down in the main cabin, and then I was back on the couch, still inside that main cabin, lying there looking at him sleepily as he covered me with a big fluffy duvet, and tucked a pillow under my head, and then I was asleep again.\n\n<center> * * * </center>\n\n\"I'm staying on his boat tonight, Auntie Suzy,\" I said that evening, back behind the counter, and I'd finished eating. Dave was working his way through another plate that I'd gone and got for him, coz he was a bit hesitant about helping himself a second time.\n\n\"Don't want to look greedy,\" he'd said, eyeing the buffet. \"Not when I'm not paying, anyhow.\"\n\n\"Now you're being silly,\" I'd said. \"Here,\" and I'd taken his plate and filled it before I slipped back behind the counter to talk to Auntie Suzy.\n\n\"I wish we could look after you better, Jenny,\" she said, not looking at me. \"I feel really bad leaving someone we barely know taking care of you.\" She hesitated. \"It's just, you know, with the restaurant, and the hours we're open, and only Wayne and I.\" She looked at me. \"There's just so much to do, Jenny, and there's just the two of us, and Wayne can't do it all himself, and I don't want to sound like I'm making excuses....\"\n\n\"I know Mom didn't tell you how sick I'd been, Auntie. She thought I was over it, and so did I,\" I said, my hand on her arm. \"It's okay, Dave and I, we had a really long talk today. He doesn't mind me staying, he's taking a year or two off before he decides what he's going to do. He says he likes the company.\" I knew he liked me, and yeah, I liked him, a lot, but I wasn't saying that to Auntie Suzy. She'd say he was too old for me, and say something about boat bunnies again, or something.\n\nI giggled. \"He knows I'm not a boat bunny, okay.\"\n\n\"He's a guy, Jenny,\" Auntie Suzy said, but now she was smiling. \"And you're an attractive looking girl. Just keep that in mind, and I can see you like him, but don't let him talk you into anything.\"\n\n\"I won't,\" I said. \"I'm really tired, Auntie. He said he'd bring me over tomorrow morning for breakfast. Is that okay?\"\n\n\"Of course it's okay, Jenny. You're family and you're supposed to be staying with us. I feel really bad about this, that we can't look after you like you need, and if it wasn't for him keeping an eye on you, I'd be really worried. Of course you can bring him here with you, anytime. As long as he's with you, he's family, and he eats free, and you can tell him that. It's the least we can do after everything he's done for you.\"\n\nShe turned and took both my hands in hers. \"I'm sorry about yesterday, Jenny. Your Mom didn't tell us how sick you'd been. If I'd known...\" Her voice trailed away. \n\n\"That's okay, Auntie,\" I said, hugging her. \"Mom thought I was over it completely. Otherwise she wouldn't have let me come, and I thought I was over it too, and I wasn't thinking when I went off to meet him yesterday. It's not your fault.\"\n\n\"He wouldn't give me the bill from the clinic,\" she said.\n\n\"He said he had a really flexible medical plan,\" I said, kind of doubtfully, coz he had said that. I'd asked him again, but I sort of didn't think even a really flexible plan would cover some girl who walked into your life the day before. \"And I know Dad's deductible, it's really high. His plan wouldn't cover yesterday at all, or not enough to make it worth claiming.\"\n\n\"I don't like him paying for you,\" she said.\n\n\"Neither do I,\" I said. \"But he won't tell me what it cost. He said not to worry about it, he said he had my back.\" I squeezed Auntie Suzy. \"Don't you worry about it, Auntie, it's not your problem, okay. I'll talk to him again.\"\n\n\"Okay,\" she said, hesitantly. \"Okay, Jenny, you go if you're tired. Get a good night's sleep. You're looking so much better now.\" She smiled. \"Better than when you arrived if you want to know. Whatever else he is, he's been good for you.\"\n\n\"He has been good for me,\" I said, smiling at him, coz he was looking at us. I was still smiling when we left the restaurant together, waving to Auntie Suzy and Uncle Wayne with one hand.\n\nMy other hand was in Dave's.\n\n<center> * * * </center>\n\n\"Tired?\" he asked, walking slowly up the dock with me, back towards 'No Tan Lines', and my hand had found his as soon as we were out of the truck, and we'd started walking.\n\n\"Yes,\" I said. \"But I don't want to sleep, not yet. It's so beautiful tonight.\"\n\nOne of those clear warm nights, a gentle breeze, the night bright with stars, and it didn't feel like winter at all.",
        "\"Come into the cabin, take your pills and we then we'll go up on the flybridge and just lie back and look at the stars,\" he said, and ten minutes later, that was where we were. On the big sunpad in front of the helmstation, leaning back, side by side, a couple of big cushions behind us, and his arm was around me and I was tucked in against him, and it felt as if that was where I'd always belonged.\n\n\"It's beautiful,\" I sighed, looking up at the stars, my head on his shoulder.\n\n\"Isn't it,\" he said. \"Sometimes I lie here for hours and just look up at them.\"\n\n\"I could do that,\" I said, my hand resting on his leg, and I could lie there for hours with his arm around me too, and my head rested on his shoulder, and I closed my eyes.\n\n\"I used to do this in the 'stan sometimes,\" he said, almost dreamily, and I was half-listening, half-asleep. \"When I wasn't on, I'd lie there and look up at the sky and over there, everything was so clear when you were up in the mountains. No clouds, no pollution, just the night sky, and the stars were amazing. Never seen anything like it, and I'd just lie there and look at them and all the stress, everything, it'd just fade away.\"\n\n<center> * * * </center>\n\nHe was asleep when I opened my eyes, his arm still around me, and I was half-lying on him, using his shoulder as my pillow. There was a big blanket over us both, and it was that grey light that precedes the dawn, dim and pearly, and we were both still up on the flybridge and the night air was cooler, but the blanket kept us warm, and he was warm against me.\n\nHe stirred in his sleep, turned towards me, and I turned with him, my head on his arm as his other arm encircled my waist, my back to him, his body spooning me. I was secure in his arms, held, safe, his breath hot against the back of my head, his body warm against me, and I closed my eyes and slept again, smiling.\n\n<center> * * * </center>\n\nHe was awake when my eyes opened next, and the sun was shining brightly. I knew he was awake. His breathing was different and he was still pressed against me, but tense, not relaxed, and my hand still held his.\n\nI squeezed his hand, lightly. \"Good morning,\" I said, yawning.\n\n\"Sleepy head,\" he said, and I felt him relax against me, and I knew this was where I belonged, and I wondered sleepily if he felt the same way, and his hand squeezed mine back, lightly, and he kissed the back of my head, a quick brush of his lips that I might have imagined.\n\n\"That was the best night's sleep I've had in months,\" I said, rolling over to face him, and it had been, and I felt so alive.\n\nReally alive. Invigorated. Exhilarated, and my arms went around his neck and, without any thought, I kissed him. My lips brushed his, sealed to his, and there was that moment of surprise because I'd been kissed, but I'd never kissed a guy myself, and I'd just done it without thinking, and then he was kissing me back. Really kissing me, and my hands were running over his shoulders, his arms and his mouth was on mine, sealed to mine, his tongue sliding into my mouth, finding mine, teasing me, his body hard against me.\n\nHard?\n\nSomething was hard, and it was pressed against me, and I moaned softly into his kiss, and my old boyfriend had never kissed me like this, possessing my mouth, his tongue teasing mine into his mouth and now it was my tongue that explored, tasted, flirted, and I was moaning into that kiss, clinging to him, pressed against him, wanting more.\n\nWanting so much more, instantly, and I'd never felt like that, either.\n\n\"Jenny,\" his almost groaned, his lips separating from mine for a moment, and then, as if he was drawn to me, his lips found mine again, one of his hands held the back of my head, his fingers brushed my cheeks, my neck, and I kissed him as a parched hiker drinks water, needing him, wanting him, craving him, unable to stop.\n\n\"Ohhhh... ohhhhh...\" I sobbed for breath when his lips lifted from mine once more, and I couldn't get close enough to him.\n\n\"Jenny,\" he breathed, moving, easing me onto my back and he was looking down at me, fingers brushing my cheek, brushing my hair back from my face. \n\n\"Jenny,\" he breathed my name and it was like a ripple of calm running through me, relaxing me, soothing me. \"Jenny...\"\n\n\"Dave,\" I breathed, my lips parting, seeking his again, finding his, and I relaxed as he kissed me, because he was kissing me, long and gently. Teasing kisses now, brushing my lips, tasting me, sucking at my lips, trailing across my cheeks, my nose, my eyes and always, always, my mouth waited for his to return, to repossess mine, and he did, time and time again.\n\n\"Jenny, I didn't mean...\" he gasped.\n\n\"Dave,\" I whispered, my hands pushing him onto his back and he allowed me to push him back. All the way over and onto his back, and he was looking up at me as I slid over, on top of him. Lying on him, my legs either side of his and now it was me looking down at him, my hands cupping his face, my nose brushing his.\n\n\"Dave,\" I whispered, his hardness pressing up against me so that I shivered with excitement, hot and flowering inside me, and now it was my turn to kiss him, and I did. I kissed him, very very gently, very very tenderly, brushing my lips across his, brushing his lips apart and now my tongue sought his, delicately. My nose brushed his. My eyes looked down into his, and something was happening, and I didn't know what it was, but I couldn't let go of him, or of whatever was happening between us, because whatever it was, it was something special. Something that I needed, and wanted, and I wondered if he felt like this.\n\nI hoped he did.\n\n\"Jenny,\" he whispered between kisses. \"Jenny,\" as if my name was an incantation, a spell, a charm, and I smiled as my nose brushed his, as my eyes looked down into his, because the way he said my name, now I knew, and suddenly I was a feather, drifting in the wind, weightless, and every moment now was magical, and there was nothing but him.\n\n\"It's alright,\" I murmured, burying my face against his neck, kissing one of those scars. \"It's alright, Dave. Everything's alright, now.\"\n\nIt was, it was perfect, and in his arms, everything was exactly as it should be, and somehow I knew that, and I smiled as I rested my head against him, lying on him, his body large and muscular beneath mine, and his hands were on my back.\n\n\"Jenny, I didn't mean to...\" he whispered again, and my finger on his lips cut him off.\n\n\"Maybe you didn't,\" I whispered back. \"But you did, and I did, and I wanted you too, and I want to too.\"\n\n\"I feel like I'm taking advantage of you,\" he said, one hand stroking my back, the other cupping the back of my head, and I breathed him in, lying on him. Him and me, and I was in his arms, and it was perfect.\n\nI smiled, a smile he couldn't see. \"You're not taking advantage of me,\" I said. \"You're you, and I'm me, and I like you. A lot. And I know you like me, or you wouldn't have kissed me like you did.\"\n\n\"You're just a kid, Jenny, and I shouldn't...\"\n\n\"I'm eighteen, Dave.\" I lifted my head, nose brushing his, eyes looking down into his. \"I'm nearly nineteen and I know how old you are, and you're not taking advantage of me, and you're going to kiss me again, Dave. Right now.\"\n\nMy lips brushed his, and I smiled as he did. He kissed me, rolling me onto my back and kissing me thoroughly now, taking control, his mouth dominating mine, and I submitted willingly, eagerly, holding him tight, moaning now with rising excitement as those kisses went on and on and on.\n\nHis hand cupped my boob, squeezed gently, and I arched my back into that touch, pushing myself at him, body tingling, alive, wanting more, and he was older, he knew, and I knew he knew, and I wanted him to do whatever he wanted, because I knew I'd want it too, when he did it. Whatever he did.\n\n\"Ohhhhhh.\" He found my nipple through my top, swollen, aching, responding to that light touch with a sudden surge of pleasure that pooled at my center and I was so hot, so wet, wanting his hand. Wanting him, and in that moment, I knew there would never be a no, not for Dave, not from me.\n\n\"Yes,\" I breathed, arching, pushing my boob at his hand, wanting his hand there.\n\n\"Jenny,\" he groaned, his mouth lifting from mine, and my hand moved to rest on his where he cupped me, holding his hand there. Pressing his hand against me. \"Jenny, we need to stop, I don't want to get carried away, you do things to me....\"\n\n\"I know,\" I giggled, moving against him where he was hard, and that movement sent hot little flushes washing through me in gentle ripples and his hands were on my butt, holding me, and we were kissing again. Long slow gentle kisses, his hands on my butt gentle, stroking, holding, exploring, and that hot wet excitement inside me grew and grew and grew.\n\nUntil my tummy gurgled, and he laughed.\n\n\"You need breakfast,\" he said. \"And your medication.\"\n\nAnd just like that, I relaxed, calm again, and I knew that whatever would happen would happen when it was right, for him and for me. Right for both of us, and it wasn't like I was going anywhere, and neither was he.\n\n\"Let's take a shower and change and go back to the restaurant for breakfast,\" I said. My nose brushed his. \"I'm feeling a lot better now, maybe we can do something today?\"\n\n\"Have you ever been snorkeling?\" he asked. \"I can take you out, there's a shallow bank a few miles off the coast, be a good start.\"\n\n\"Sure, I'd love that,\" I said. \"I can't swim for long though.\"\n\n\"You can lie up here and sunbathe in your bikini,\" he said.\n\n\"Only if you rub sunscreen on me,\" I said, and all of a sudden he was over me, his weight pressing on me, and I was beneath him, helpless. \n\n\"Don't tease me, Jenny,\" and his lips were brushing my neck so that I shivered. \"Not unless you mean it.\"\n\n\"I won't tease you,\" I said, my hips moving, pushing myself up at him and that was so good. My arms vined around his neck. \"Not ever, Dave. But maybe I won't wear a bikini at all.\"\n\n\"Little devil,\" he said, and I giggled, but I knew I half meant it too.\n\n\"Breakfast,\" he added, rolling off me and helping me to my feet. He went down the ladder first, and I knew he was looking at my butt as I climbed down after him, and I climbed down slowly, because I wanted him to look.\n\n<center> * * * </center>\n\n\"He's taking me snorkeling today,\" I said to Aunt Suzy as he finished breakfast.\n\n\"Don't exhaust yourself, Jenny,\" she said.\n\n\"I won't,\" I said. \"I'll stop as soon as I feel a bit tired. Is it okay if I bring him back for dinner?\"\n\n\"Of course it is. You go and have fun,\" she said, but she had a strange look on her face as I left with Dave, hand in hand.\n\n<center> * * * </center>\n\n\"It's a lovely view from up here,\" I said, and I'd gone below, to my cabin, and changed into my new bikini while Dave started the engines up and unmoored us, and I'd made it to the flying bridge just before him. I'd waited, so that I could climb the ladder just ahead of him, and I knew he'd looked, and I was smiling.\n\nIt really was a small bikini. Tiny, and back home, or with anyone else around, I'd have been embarrassed. With Dave, I was eager. I wanted him to look at me.\n\n\"It is a lovely view,\" Dave said, spinning the wheel, using the bow thruster to turn us into the channel, and he looked so relaxed and happy. He looked... at me, and he was smiling. \"A very lovely view.\"\n\nIf I was a cat, I would have purred, but cats were curious too.\n\n\"Where are we going?\" I asked.\n\n\"Out here,\" he said, pointing at the chart on the screen. \"There's a reef out here. Great for snorkeling, shallow, only six or seven feet below the surface. Take us about an hour to get out there, we'll tie up to the buoy, snorkel, take a shower, have lunch and head back in.\"\n\n\"That sounds wonderful,\" I said, and then, reaching out to take his hand. \"Thank you, Dave. For everything.\"\n\nHe smiled, then faced forward. \"Breaking waves in the cut. Hold on.\"\n\n\"Why's it breaking now? The weather's better than when you took me out before.\"\n\n\"It's a bar, and the tides out. Not as much water over it so the waves are breaking. Plenty deep enough for us to get across, but the bar's a bit choppy. It's pretty calm today, inshore, which is where we're going to be. Waves are only a foot. Offshore it's two feet and glassy. That's good. Very good, but that's a lot further out than we're going.\"\n\n\"Woo hooo,\" I yelled, as we crashed through the small breakers, but 'No Tan Lines' took them in her stride, powering through them easily and then, outside, Dave powered her up. Her bow rose as we began to plane, riding easily across the small swells, turning to head south east, and I figured that out from the compass without asking.\n\n\"Take a look over there,\" Dave said, pointing. \"Dolphins, a pod of them.\"\n\n\"Where?\" I asked, standing up, holding on to the grab bar with both hands.\n\n\"Look for fins that way,\" Dave said, pointing again. \"Over there, see them now?\"\n\n\"Oh, wow,\" I said, seeing the fins now, the streamlined bodies leaping out of the water, curving back down. \"There's a lot of them.\"\n\n\"About a dozen,\" Dave said.\n\n\"Can we swim with them?\" I asked. \"I've always wanted to swim with dolphins.\" I'd seen a couple at the Marine Park years ago, when I was about ten, and their beauty had stayed with me ever since.\n\n\"Most dolphins don't enjoy swimming with people,\" Dave said. \"Get in the water with them and they'll disappear. Sometimes you can slide in and get them to look you over though. That's about as close as I've ever got to them.\" He grinned. \"They might make an exception for you, though. You're better looking.\"\n\n\"Says you,\" I said, smiling, coz I was enjoying him looking at me, and I stayed standing, holding on to the grab handle, acutely conscious of his eyes, knowing they weren't on the dolphins anymore. Knowing I'd worn the tiniest bikini of the three I'd picked. Again.\n\n\"Says me,\" he chuckled, not even pretending not to look. \"And I says you better put some sunscreen on too, or you're going to burn. Here.\" He passed me a bottle of SPF25.\n\n\"I come with a natural tan,\" I said. \"I never burn.\"\n\n\"Trust me,\" Dave replied. \"Out here, in the sun, even if it's winter, you'll burn. Put it on.\"\n\n\"Somebody will have to do my back,\" I said, taking it from him with one hand and sitting back down, squirting some onto one arm and beginning to spread it over my shoulder and down to my wrist.\n\n\"Sure,\" he said, smiling, watching me as I did my other arm and started on my stomach and everywhere else that bikini top didn't cover.\n\n\"I'm putting her on autopilot,\" he said, fingers flying on the controls. \"That's it. She's going to steer herself for the next half hour.\" He leaned back and propped up his feet on the dash, watching me as I spread sunscreen over my legs.\n\n\"Do you need to put some on?\" I asked, offering him the bottle.\n\n\"First thing I did, while you were changing,\" he said, taking the bottle anyway. \"Stand up and slide over here, I'll do your back.\"\n\nI stood, I slid, I shivered with excitement as he squirted sunscreen on my shoulder blades, his hands wiping it across my back, spreading it, rubbing it in. My shoulders, my upper back. More sunscreen and my lower back. He hesitated.\n\n\"Everywhere,\" I said, those butterflies multiplying into a cloud, and still he hesitated.\n\nSo did I, in my mind anyhow, because earlier, early this morning, I knew he could have gone much further with me than we had. Much much further. As far as he wanted to go, and he was so much older than me. He knew exactly where to go if he wanted to go there, and that was the moment when I knew I'd go there with him, if that was what he wanted.\n\n\"Please,\" I added, turning around, and now my hands held his shoulders rather than the grab rails and he'd taken his shirt off, so that my hands rested on his skin, feeling those firm muscles, feeling that tracework of scars under my fingers as well as seeing then. I took the sunscreen from him, squirted it into one of his shoulders, then the other, placed the bottle in the cupholder in the arm of his seat, and began spreading the sunscreen over his shoulders and his chest, and yeah, wow. He had muscles that I'd only ever fantasized about seeing on a guy, let alone rubbing sunscreen over them.\n\nSome of the guys at High School, the ones who worked out or were on the swim team or who played football and did weights, they were toned and built like Dave, but they'd been jocks. They didn't have his calm maturity, they didn't have his patience or his caring. They hadn't been interested in me either, the nerdy Chinese girl, but Dave was, and I smiled, my cheeks burning pink as I caught a glimpse of his physical reaction, and I looked up again, right away.\n\n\"You do like me, don't you?\" I asked, my nose brushing his, and standing, I was the same height as he was sitting in the helm seat. \n\n\"Yes,\" he said, his eyes looking back into mine, unflinchingly. \"Very much.\" He hesitated. \"Maybe more than I should, Jenny. You're...\"\n\n\"Only eighteen,\" I said, smiling, my lips brushing against his. Lifting, brushing again. \"Guess what, Dave.\" Now it was me that hesitated. \"I'm eighteen, I'm almost nineteen, Dave. I'm not a little kid.\"\n\n\"You're going to be in Grade Twelve in September,\" he said, but his hands were on my hips, and I smiled.\n\n\"If I hadn't been in hospital, I'd be half way through Grade Twelve now, I'd be a freshman at College in September, and I'd be leaving home then,\" I said. Although maybe I'd have gone to the local University, because it wasn't bad, and they had the program I wanted to do.\n\n\"I'm eighteen, Dave, and I like you a lot.\" My lips teased his, my eyes half closed, the tip of my tongue traced across his mouth, and his lips parted, his head moved.\n\n\"You're far too young for me,\" he groaned, but his lips brushed mine.\n\n\"You're not too old for me,\" I whispered. \"And I know how old you are.\" Twelve years older than me, and it didn't matter at all. It was perfect. He was perfect.\n\nThere was an instant where neither of us moved, and then his mouth took possession of mine, and he was kissing me. There was no question now about who was kissing who, and these weren't those delicate, gentle kisses of the early morning, and now I was getting what I'd wanted. He was kissing me, and he was in control, his lips locked to mine, his tongue deep in my mouth, exploring, tasting, taking, and I surrendered my mouth to him completely, in an instant.\n\nNot just my mouth.\n\nIn that moment where his mouth possessed mine, I melted against him, my arms around his neck, body against his, and his hands moved on me. One hand sliding up my back, the other splayed across my butt, large, firm, strong, knowing what he wanted. Firm masculine strength, and he crushed me to him. Against him, my boobs pressed against his chest, and where he was hard, he pressed against my stomach, so that I shuddered with excitement and with rising flood of desire.\n\nHis desire was hard, rigidly hard where he pressed against me, and where he pressed against me, my bikini left me exposed, and there was only the thin nylon of his swim shorts between us. My boobs were separated from him by the equally thin material of my bikini top and my nipples were swollen, aching, asking for nothing more than to be crushed against his chest.\n\n\"Mmmmmm.\" I moaned softly, into his mouth as his hands held me close, held me tight, crushed me to him, and for the first time in my life I experienced that rampant male desire, a desire that left me limp and hot. A desire that filled me with my own hot slippery need, so that my hips twitched, moving me a little against him, and that little was enough to make me aware of my own slippery excitement, my own swollen sensitivity.\n\n\"Jenny,\" he gasped, his mouth lifting from mine, and mine searched blindly for his, wanting nothing so much as for his mouth to seize mine again as he held me crushed to him.",
        "\"Ohhhhh, Jenny,\" and he did, and parting my lips wide, my mouth sealed to his, I gave him everything he wanted in that moment.\n\n\"I'm not a boy, Jenny,\" he gasped, long minutes of endless surrender later, and we were both breathing hard. Both panting for breath and he was steely hard against me, both his hands on my butt now, hard and demanding, every wave that 'No Tan Line's hull bounced slightly on moving me against him.\n\n\"I know,\" I moaned, clinging to him. \"I know you're not, Dave, and I'm not teasing you. I'm not.\"\n\n\"I know you're not, Jenny,\" he groaned, his hands gently kneading my butt, fingers digging into me, pulling me hard against him, and I was so wet I was sure my bikini must be soaked through. \"I know you're not teasing me, but do you know what you're doing to me.\"\n\n\"I don't want to tease you,\" I gasped, between increasingly frantic kisses, and I was squirming against him now as his fingers alternately caressed me and dug into me, and I was wet. So wet and hot and I knew what he'd want.\n\n\"I'm not teasing you.\" I knew what I wanted too, now, and I reached behind my back with one hand and unfastened by bikini top, jerked it off and dropped it on the deck, my now uncovered boobs pressed against his chest, delicious skin, hard muscles, exquisite friction where my aching nipples pressed against him and I'd never felt anything so good, and I wanted to meld myself to him.\n\n\"Oh God, Jenny,\" he groaned. \"Don't... don't,\" but one hand was sliding up to my back and where my boobs had pressed against him, now they were crushed, and it was so good. So good, and when I moved against him and my nipples dragged across his skin, it was exquisite, buckling my knees so that I clung helplessly to him, and his kisses were hungry, a hunger I wanted to feed until it consumed me.\n\n\"Yes,\" I gasped, as he held me close, as he kissed me, and I opened my mouth wide to him, my tongue dancing with his as he tasted me, and I'd never felt this close to anyone in my life, and why him? I'd just met him, and he wasn't anything like my old boyfriend. He wasn't my own age, he wasn't anything like anyone I'd ever imagined being with, but I wanted him. I wanted him to hold me, I wanted him to love me. I wanted his hands on me. I wanted him to... I wasn't sure what I wanted, but in a way I was, and my arms vined around his neck, and I pressed myself against him and moaned, softly, wordlessly, and I wanted to be everything to him, and I wanted him to be everything to me.\n\nHis lips lifted from mine, his eyes looked into mine, drilled into mine, and his voice was hoarse. \"What do you want, Jenny? I'm too old to be a quick fling for a High School student. You're attractive, you really are, but I'm not going to use you for a quick thrill, and then say goodbye. I didn't ask you here for that.\"\n\nI looked back at him, and I thought about that. What did I want? Did I want him for a quick fling, but I knew the answer to that already, and I didn't want to be a quick thrill for him either. I just wasn't that kind of girl, and I knew that too, and my old boyfriend, he'd found that out, and I sort of half-thought he'd been going to dump me anyhow, but then I'd gone into hospital, and it hadn't taken him that long to find a replacement. He hadn't dumped me, either. He'd just tailed away on the visits, and in the end I hadn't missed him, so it wasn't like he'd broken my heart. I just hadn't cared, in the end.\n\nBur Dave? He wasn't like that. Not to me. Not now, and I had no idea why he meant so much to me when I'd only known him a few days, but I knew what he wasn't.\n\n\"You're not a quick fling for me, Dave,\" I said, serious now, and I wasn't even embarrassed that my boobs were pressed against his chest, and that all I was wearing was that tiny little bikini bottom. \"You're not a fling at all. You're much more than that.\"\n\nI knew it was true as soon as the words left my mouth.\n\nHe was. He was much more than a fling.\n\n\"I think we should talk more,\" he said, his nose brushing mine. \"Seriously, before we do anything else. Things just got really out of control, and I didn't offer to look after you to take advantage of you....\"\n\nBut he didn't let go of me either, and I liked his hands on me, and my boobs pressed to his chest.\n\n\"I know you didn't, and you're not,\" I said, my nose brushing his, and I wanted to taste his lips on mine. I wanted his tongue in my mouth, I wanted him kissing me again the way he just had. I knew what I wanted, and it was him.\n\n\"We need to talk, Jenny.\" He just about groaned, and he still hadn't let me go. My boobs pressed against his chest and he shuddered, and I kissed him again, and he kissed me back, and this time our kiss was long and slow, and his hands moved on my back, stroking across my skin, again and again.\n\n\"You're just a girl,\" he said at last, breaking off that kiss, his voice hoarse. \"You have no idea what you're doing to me, Jenny.\"\n\n\"I do,\" I said, and he was so hard where he pressed against me, and I closed my eyes for a second, just absorbing that sensation of my boobs against his chest, my body against his, skin against skin, his hardness pressing against my stomach, and he was big. My boyfriend, I'd felt him when he was excited, and Dave was bigger, and those little ripples inside me grew.\n\n\"We should talk,\" he said again, and I realized neither of us had moved for a while, and I had no idea how long we'd been like this, except that it wasn't long enough.\n\n\"Yes,\" I said, except it was more of a gasp. \"Let's talk. Why don't you put her on cruise control or whatever it is, and we can sit up front.\"\n\nHe looked at me, and without a word he reached past me, keying in stuff on the autopilot thingie, slowing 'No Tan Lines' down so she came down of her plane, and we weren't idling through the water, but we weren't going that fast either.\n\n\"Come,\" I said, tugging at his hand, leading him around to the sunpad where we'd slept the night. Standing there, looking at him for a long moment, tall and scarred, his skin tanned by the sun, and I knew what had given him all those scars now, and I wanted to hold him the way he'd held me when I cried.\n\nI turned, sat down on the sunpad, looking up at him and yeah, he was still big and hard and I knew what I wanted to do for him, but he needed to talk, to think this through, and I did to, because he was way older than me. Twelve years older, and he was so much more mature than me, and that age gap made no difference to me, except that he was worried about it, and I wasn't., because I knew.\n\n\"Here,\" I said, patting the sunpad beside me as I moved to the far side, and I slid down to lie there, and I smiled as he slid down to lie on his side, and we were facing each other, and I was thinking. Thinking hard. What did I want? What did I see in him? How come I found him so attractive, when he wasn't anything like close to my age? Twelve years older than me. I knew that, but I liked that in him. I liked everything about him.\n\nLiked?\n\n\"Dave.\" I hesitated, and I wanted him to hold me, and when he slid an arm under my shoulders, I smiled and nestled in against him, and I liked looking up at him. I liked feeling how hard he was against my thigh. I liked it when I reached out with my hand and took his and placed it on my stomach, my hand on top of his, and his hand stayed where I placed it, and inside, I danced with happiness.\n\n\"Dave, I really... I like you, Dave... it's... it's more than like you. When I woke up this morning, and you were there, holding me, I was so happy... I knew, I just knew...\" I didn't really know what I was saying. The emotions, the feelings, they were just coming out any which way, without any thought, because my thoughts were so confused. \"That was where I was meant to be,\" I blurted out. \"That's what it felt like.\" I looked at him, one hand stroking down his arm. \"That's what it feels like.\"\n\nI took a breath, and my eyes didn't leave his. \"That's what it is.\"\n\n\"You're so beautiful, Jenny,\" he breathed, his hand sliding out from under mine and my heart pounded as I waited for his hand on my boobs, but it didn't arrive. Instead, his fingers reached for my face, tracing down my jawline, brushing my cheek, again, gently. So gently. \"I could fall in love with you so easily, Jenny...\"\n\n\"I'm going to be here until August,\" I said, and that was an eternity. Seven, no, eight months, and the Doctor had said relax, recover, take it easy, go back to High School in September.\n\nI'd only meant to come down here for winter, maybe even just for Christmas, and then I'd planned to go home in Spring, despite what Mom and Auntie Suzy had talked about, but now? I was really enjoying this time with him, and had it only been four days since I met him outside the Marina fence? That was all? It seemed as if I'd known him half my life, and I knew I could happily stay here all winter. Stay here through Spring and Summer. Stay here until summer ended, if it was with him, and it was almost Christmas now. Eight months. I knew that was my decision, how long to stay here for, and I knew I'd already made that decision.\n\nIf he wanted me, and I hoped so much that he did. That he would. I'd stay, and I wondered if he'd meant what he'd said, about staying on his boat. Somehow, I didn't think he'd meant stay for eight months.\n\n\"When we kissed,\" he said. \"It was like I'd never kissed a girl before, and you were the first, and it was magical, it was.... I don't know, I just don't have the words, but I'm already falling for you, Jenny, and I'm scared.\" He hesitated, and I waited, head nestled against his shoulder, his arm around me, reaching out with one hand to stroke his arm, stroke those muscles, and he was so tense. \n\n\"I'm scared that you're only eighteen, and I'm thirty, and I'll fall for you and you'll go, and I'll never see you again. I'm scared that I'll take advantage of your innocence, and in years to come, you'll think I was using you, and I don't want that either, Jenny.\" His fingers brushed my cheek. \"There was something about you, when we met. I looked at you, and I saw someone I wanted to care for. It was your face, you looked so sad, so alone, and I wanted to hold you and take that sadness away...\"\n\n\"Shhhh.\" My finger rested on his lips. \"I know you care for me, Dave. You wouldn't have looked after me the way you did if you didn't. I know you care, and I know you don't want to take advantage of me, and I know that compared to you, I don't know anything much.\"\n\nI smiled. \"But I know I like you a lot, Dave, and I know we've just met, and I know I'm eighteen, but I'm not a kid. I'm scared too, Dave. I've never felt like I do about you with anyone else, and it's really strange for me. I know you're older, a lot older, and I know we've just met, and this is crazy to feel like this about someone I've only known for a few days, but honestly, that doesn't matter, that's just who you are and that's one of the things I like about you, your age, and your experience, and you've been places and done things, and more than anything, you really care for me, and I know I already care for you.\" My fingers traced down a long scar on his arm.\n\nHis mouth opened, and \"Shhhh,\" I smiled, my finger caressing his lips. \"Let me finish, Dave,\" I said. \"I'm thinking out loud here, and I don't know what I'm trying to say. I'm trying to figure this out.\" \n\nMy nose brushed his. \"Maybe it is just a summer romance. I have to go home and finish High School, I have to finish twelfth grade before I do anything else, but here and now, you and me, it feels so right for me, Dave. I don't want to hurt you, but I want this. I want you and me, now, and I'm here for eight months, Dave, until the end of summer, and maybe it will turn into something else, and maybe it won't, but if we don't try it, how will either of us know?\"\n\nHe watched me as I thought about what I'd just said. \"Holy crap, did I just say all that?\"\n\n\"Yeah, you did,\" and he looked so serious. \"So let me make sure I've got this straight. You like me, and I like you a lot, Jenny. I could fall in love with you in a second if I let myself.\"\n\n\"So could I, with you,\" I said, and my heart pounded, because as I said those words, I knew it was true. \"I could fall in love with you so easily.\" But no, that wasn't the entire truth. \"I know it sounds silly, Dave, but I think I've already fallen in love with you.\"\n\nIt was true, I knew that as soon as the words left my mouth. I didn't think I had. I had, I knew, and my fingers slid upwards to cup one side of his face. \"I love you, Dave. I'm not too young to know I'm in love with you,\" I added. \"And maybe it will hurt. Maybe it'll hurt when I have to go home, but if you love me too, maybe, just maybe, something will come of it, and isn't that a risk worth taking, Dave?\" \n\nI smiled. \"What's that thing they tell you in the Army?\"\n\n\"Navy,\" he said.\n\n\"No pain, no gain,\" I said, not smiling. \"Am I worth that risk, Dave? You're worth that to me, and I know what pain is, Dave. I really do.\"\n\n\"I know you do, Jenny,\" he said, very gently, and there was a long moment where he looked at me.\n\n\"Yes,\" he said, very simply. \"Yes, you are worth that risk, Jenny,\" and we simply looked at each other.\n\nI drank in his face, his expression, his short, dark brown, hair, the shadowy fuzz across his face, the wrinkles at the corners of his eyes, the way his lips quirked into a half-smile.\n\n\"Are you sure this is what you want, Jenny?\" he asked, his fingers continuing to caress my face.\n\n\"Yes,\" I said, knowing that I did want this. Knowing I was sure, and my hand found his fingers, and held them, and raised them to my lips, and I kissed them, each one of them. \"Am I what you want?\"\n\n\"Yes,\" he said. \"I want you, Jenny Dao,\" and now he was smiling, and there was a second sun in my sky. A sun called Dave, and his love shone down on me and warmed me, and I embraced and welcomed that love as a flower welcomes the sun.\n\n\"There's something else I want,\" I breathed, smiling now, because there was, and now that I knew how he felt about me, and I'd been honest with myself over how I felt about him, this was something I really wanted to do. \"Right now,\" I added.\n\n\"What's that?\" he asked, and now his hand was stroking my arm, gently, up and down, and his caresses were covering me in little goose pimples.\n\n\"I want to hold you,\" I breathed, heart pounding again, one hand sliding down between us and grasping him through his shorts, and I'd held my old boyfriend like this, back before. I'd jerked him off. Half a dozen times, and there'd been that one blowjob I gave him, the weekend before I went into hospital. \n\nI wanted to hold Dave. I wanted him in my hand, big and hard and male. I wanted to explore him and stroke him, and my mouth filled with saliva at the thought of what he'd be like, in my mouth. There was that hot excitement butterflying inside me at that thought, and about what else might happen after that, because Dave wasn't a guy my own age. He wasn't a boy. He wasn't a boyfriend. He was a man.\n\n\"I don't want to tease you,\" I gasped, kissing his neck, nibbling on his ear, moving my hand on him through that thin nylon, excited beyond any words at his sudden shuddering tenseness as my hand moved on him. \"But I don't know very much, you're going to have to teach me.\"\n\n\"You're adorable, Jenny,\" he said, and I smiled as he looked down at my boobs, and my nipples ached, and then they didn't as his hand cupped one boob, his touch hot against my skin.\n\n\"Ohhhhh,\" I half-moaned, arching my back, pushing my boob at his hand and then I wasn't moaning anymore as his mouth sought and found mine, and we were kissing, on and on, and my hand held him through that thin nylon, rigid, steely hard under my fingers.\n\nHis tongue danced with mine, his lips sealed themselves to mine, his hand cupped my boob, his thumb brushed backwards and forwards across one swollen rubbery-hard nipple, every touch sending an exquisite ripple shuddering through me to pool at my center, hot liquid excitement that sucked all the strength from me as I lay before him.\n\n\"I want to hold you,\" I moaned. \"Really hold you,\" when at last his mouth lifted from mine and we were both breathing hard, my hand fumbling at the string tie, struggling to reach inside his shorts and clasp him.\n\nHe said nothing, but his hand joined mine, unfastening his shorts, pushing them down, kicking them off, and he was naked, and I held him at last. My fingers clasped him, rigid steel covered with soft velvet, hot silky skin, ridged veins, and I stroked him, very slowly, savoring the feel of him in my hand. He was big, bigger than my old boyfriend. Long, hard, thick, filling my clasp and I tried to encircle him with my thumb and fingers, but his girth was too much, and inside, my sex danced with scared anticipation and excitement, because I knew I'd give him everything he desired, and he was a man. I knew what he'd desire.\n\n\"I want to look at you,\" I gasped, half rolling towards him, and he smiled, easing over onto his back, his cock held in my hand as I propped myself up on one elbow beside him, and I looked. I'd never actually seen a guy's cock before. That old boyfriend, I'd jerked him off in his car, at his house with the lights out. I'd given him a blowjob, once, in the darkness of the night, and I'd seen it, but only dimly.\n\nThis was daylight. Bright sunlit day, and now I was face to face with his cock, and he was lying back, smiling, watching me, and I moved my head back so I could see him clearly. The sheer physical dimensions of his cock stunned me. And okay, my experience was limited to one, I knew. This, right in front of my face, inches from my eyes, this was different. A lot different. It was so big and so hard looking. The swollen head and glans startled me for a moment, until I compared what I was seeing with those diagrams in that book my Mom had embarrassed me with when I was younger, and let's not even talk about the sheer embarrassment of those High School classes.\n\nIf his cock had surprised me, his testicles startled me. Well, okay, balls. I knew they existed, but the diagrams and line drawings didn't do justice to the sheer functional beauty and size of them as they lay there before my fascinated eyes. Large and round and hairy, and all that body hair was fascinating. I didn't have any. Well, I did have a very little, but I'd always, you know, shaved myself everywhere, ever since it first started growing, and I never did have very much. \n\nMy Dad didn't either, and I'd seen my Dad naked when I was younger, but Dave, it wasn't just a thick bush of hair around his cock. His legs, his arms, his stomach, chest, back, shoulders, everywhere. He was so hairy everywhere. Almost furry. Furry and so strong and muscular. Gloriously muscular, and I loved that, and I wanted to touch him, so I did, running my hands ran up the outsides of his thighs, feeling that soft body hair under my fingers, feeling the muscles of his thighs. His cock jerked, right in front of my face, all by itself, and startled, I glanced up at him.\n\nHe smiled, reaching down with one hand to brush my hair back from my face, and I smiled back, running my fingernails up the inside of one of his thighs, smiling, pleased with myself as his cock twitched again, and I wanted to taste him so much. Not just taste him. I wanted his cock in my mouth. I wanted to do that for him, and I wanted to do that for me, and when I glanced back up, he was breathing hard, and I smiled.\n\nI smiled, and then I lowered my head and I kissed the tip of his cock, and then, very tentatively, my eyes watching his face, I licked him, slowly, all over, and my hand held him upright while my tongue explored, and my lips brushed, and I tasted him.\n\n\"Jenny.\" He groaned, his hand clutched at my hair. His cock jerked upwards, pushing up against my lips and without thought my free hand moved up from his balls and clasped him, my fingers wrapped themselves partially around him, and I parted my lips, wide, and slid them down over his cockhead, then down his shaft until he filled my mouth."
    ],
    "authorname": "ChloeTzang",
    "tags": [
        "asian",
        "bertram",
        "chinese",
        "her first time",
        "virgin",
        "first love",
        "florida",
        "romance",
        "female virgin"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/no-tan-lines-1"
}
{
    "title": "Ashley's Revenge Ch. 09",
    "pages": [
        "I was awoken by the sound of our doorbell ringing followed shortly after that by the unmistakable sounds of a UPS truck driving away down the street, no doubt meaning that my Amazon package with the GPS tracker had arrived on my doorstep. Ashley was lying next to me on the bed, her head was on my chest and she was sound asleep in her French maid uniform and heels. I loved the way her soft blonde hair felt on my skin as I lay there watching her breathe, her angelic face snuggled up against my body.\n\nI know I told myself at the start of the affair that I was only in it for the short term because I could not resist the temptation of having sex with Ashley. After all, what man could resist this hot, young 18 year old blonde goddess who could easily be on the cover of a magazine? I told myself that there was no way there could ever be any more to the relationship than just sex. I made it clear to Ashley that there was no way I would leave my wife for her, our age difference was just way too extreme for a long term relationship and she was too young to know what she wanted. The problem was the more I got to know Ashley the more it seemed like she might know exactly what she wanted and I might be the one without a clue.\n\nI realized the GPS idea was just me grasping at straws, hoping to find a reason to allow myself to continue fucking Ashley without feeling bad about it. The only evidence so far that my wife might be cheating was a single ticket stub which may or may not have been planted by the sexy, young blonde that was sleeping in my arms. I rationalized it to myself by thinking that even if Ashley did plant the ticket stub, that only meant that she really did want me badly enough to do anything to get me.\n\nI know it all sounds a bit crazy, but these are the thought patterns of a man being seduced by a beautiful woman half his age. My marriage had gotten stale and boring over the years and having a new adventure with a sexy, young woman like Ashley was quite a temptation. I guess I always knew I was lying to myself when I thought that this affair could somehow be simple and easy, but now I just did not care.\n\nI was now focused on proving my wife was cheating on me, because that would mean I wasn't the only bad guy in this story. If my wife was cheating on me, then there was no reason I couldn't have a real relationship with Ashley, if that's what Ashley truly wanted. If I could prove that Ashley was right and that my wife didn't deserve me, then maybe everything would be clear.\n\nThere was one thing that was certain, and that was that the sex with Ashley had been out of this world amazing. Being with her made me feel so young and alive and I wanted that feeling to last as long as it could. I loved the fact that she would dress up in sexy costumes or lingerie for me and do things like let me handcuff her. She was obviously trying hard to be my fantasy girl and she was succeeding.\n\nI was looking forward to spending the next weekend with her and being able to spend the whole night with her by my side for two nights in a row. I knew what I had to do in order to make it the perfect weekend, Ashley wanted to wear my wife's rings and I figured that I would have to make that happen.\n\nAshley's body moved as she stretched and opened her bright blue eyes and looked up at me with a smile.\n\n\"Hello, beautiful,\" I said grinning.\n\n\"Hi,\" Ashley yawned, \"what time is it?\"\n\n\"It's a little before noon.\"\n\n\"Mmm, good, plenty of time,\" Ashley groaned as she moved her long, slim body higher up the bed and softly kissed my neck. I wrapped my arms around her and breathed in her sweet scent.\n\n\"Yeah, plenty of time for us to test the new GPS unit that's sitting on the doorstep.\" I let out a soft moan as Ashley playfully nibbled on my neck.\n\n\"Mmm, I can't wait until we catch the bitch red handed,\" Ashley giggled as she sat up in the bed and looked into my eyes as her fingertips traced random patterns on my chest. The French maid uniform falling off her body, revealing her perfect firm breasts with the soft, puffy pink nipples.\n\n\"Or it might yield nothing at all.\"\n\n\"Possibly, but if it proves the bitch is cheating, then what?\" Ashley asked with a grin.\n\n\"Then we make her pay.\"\n\n\"We make who pay?\" Ashley giggled as her hand slid down my torso and grabbed my a hold of my cock.\n\n\"We make the bitch pay,\" I groaned as Ashley used her well manicured hand to start stroking my cock slowly.\n\n\"Very good, husband. And how will we make the bitch pay?\" Ashley asked as her blue eyes probed mine and her hand stroked my now rock hard cock with a slow up and down motion.\n\n\"Mmm, I don't know yet. I'm sure we will figure it out,\" I moaned as Ashley smiled and removed her hand from my hard, throbbing cock.\n\n\"So, time to go test the new GPS?\" Ashley smiled wickedly as she ignored my raging hard-on that she had just brought to life.\n\n\"Do you really want me to spank you again?\" I grinned.\n\n\"Nope,\" Ashley shook her head and giggled, making a popping sound with her lips at the end of the word.\n\n\"Are you just going to leave that big, hard cock hanging the way that it is?\"\n\n\"Yep,\" she said, making the popping sound again and giggling.\n\n\"Do I need to get my belt,\" I asked with an annoyed smile.\n\n\"If you must,\" Ashley giggled as she sat there on the bed watching me.\n\n\"So, you want me to force you?\" I asked as I looked into her mischievous blue eyes.\n\n\"I didn't say that,\" Ashley giggled.\n\n\"You didn't not say that either,\" I moaned as I reached down to the floor trying to find my belt.\n\n\"True,\" Ashley smiled and she jumped off the bed just as I found my belt and grabbed it with my right hand.\n\n\"Where are you going?\" I yelled as Ashley ran from the room giggling. I grabbed the handcuffs and headed out into the hall after her. She was already at the bottom of the staircase when I hit the hallway and she was making her way into the kitchen as I pursued her. I ran down the hall and then jumped down the staircase naked, carrying my belt and the handcuffs and ran into the kitchen where Ashley was smiling on the other side of the big island.\n\n\"What are you planning on doing to me?\" she smiled as she saw what I was carrying in my hands.\n\n\"Why don't you come over here and find out,\" I groaned, my cock hard as a rock.\n\n\"No, you come here,\" she giggled and watched me as I moved left then right, then left again as I bolted around the kitchen island. Ashley's heels hit the floor as she ran from me, she ran out of the kitchen and down the stairs into the den.\n\n\"You know I'm going to catch you,\" I yelled as I followed her down the stairs and heard the door to the basement fly open. When I got into the den I flew through the basement door and saw Ashley pulling her uniform back on as she stood on the other side of my pool table.\n\n\"What makes you think you can catch me?\" Ashley giggled, breathing hard and watching me as I made my way closer to the table.\n\n\"What makes me think I can catch you?\" I groaned. \"The fact that I know you want to be caught,\" I smiled.\n\n\"I do?\" Ashley grinned as she leaned forward and put her hands down on the rails of the pool table and watched me closely.\n\n\"You do,\" I grinned as I put the handcuffs down on the table and snapped the belt onto itself to make the desired thwacking noise.\n\n\"Why is that?\" Ashley giggled.\n\n\"Because you want to be punished,\" I said, holding onto the belt with my right hand and grabbing a pool cue with my left.\n\n\"Oh, I do?\" Ashley smiled as she moved to her left so I mirrored her by moving to my right. She went right so I again mirrored her by going to my left. As she tried to make the dash from the pool table to get behind the bar I tossed the pool cue in her direction and it wound up under her black, leather pump causing her to fall down onto the carpeted floor where I was on her in an instant.\n\n\"Yes, you do,\" I said as I held her down on the floor as she tried to get away.\n\n\"Don't spank me with your belt,\" she giggled as she kicked her feet for effect.\n\n\"Oh, I won't,\" I moaned as I pulled her to her feet and bent her over the pool table as I kicked her legs apart and I threaded the belt through the buckle and made a big loop.\n\n\"What are you going to do?\" Ashley asked as she looked back at me and smiled. I reached up with my left hand and grabbed a handful of Ashley's long, blonde hair and pulled her back to me.\n\n\"If you're going to run, you're going to get a leash,\" I moaned as I brought the looped leather belt over her head and pulled the slack out of it once it was around her neck making a makeshift collar and leash as she moaned.\n\n\"Mmm, fuck, Mr. Jones,\" Ashley groaned as she felt my hard cock moving up and down her dripping wet pussy lips.\n\n\"Are you going to behave?\" I growled as I pulled back on the belt.\n\n\"No, sir,\" she moaned. \"Fuck me.\"\n\nI pressed her young body up against the pool table as my raging hard cock slid inside her waiting pussy. I held onto the belt and watched as she lay on green felt and slid her hands into two of the table's holes and grabbed on for dear life as I started fucking her harder and harder. Each deep thrust I pounded her pussy with made her scream and I could feel her body slamming itself back down onto me for more.\n\nSeeing young Ashley bent over my pool table, wearing that sexy French maid outfit and with my black leather belt around her neck got me harder than I even knew was possible. I wondered for a moment just how it was even possible that I had made the sexy Catholic high school girl from next door my own little fuck toy to do with whatever I wanted. I didn't dwell on the question long as my cock was on fire and my brain was flooded with lust for this horny little slut so I thrust myself deep inside her over and over again as I pulled back harder on the belt.\n\n\"Yes!\" Ashley screamed as her pussy gripped down hard on my cock and sent me into full frenzy. My cock exploded and filled Ashley's tight, dripping pussy with every last drop of my white hot cum.\n\n\"Holy fuck,\" I moaned as I let go of the belt and felt Ashley's tight pussy contracting over and over again on my throbbing cock, milking it for what seemed like forever.\n\n\"That was fucking hot,\" Ashley moaned out of breath as she let go of the pool table.\n\n\"Yeah, not sure what that came from,\" I smiled as I slid my cock from her tight, young pussy and stepped back.\n\n\"I loved it, I won't even ask when the last time you bent the bitch over this pool table was,\" Ashley smiled as she stood up and turned to face me.\n\n\"Aren't you going to ask if I've ever put a belt around her neck?\" I grinned as I reached out and loosened the leather strap and removed it from around her neck.\n\n\"Hell, no,\" Ashley laughed, \"I know you never have done that to anyone before.\"\n\n\"Really, how do you know?\" I grinned, a little scared at just how good this girl could read me.\n\n\"I could see it in your eyes,\" Ashley smiled. \"But it's good, I'm glad you can do things with me that you have never done before.\" Ashley put her arms up around my neck and pulled me down to kiss my lips. I wrapped my arms around her and gave her a deep, probing kiss as I sat her body up on the pool table and felt her long legs wrap around me tightly.\n\n\"I am too, who says you can't teach an old dog new tricks, huh?\" I smiled.\n\n\"You're not old, baby,\" she moaned as she looked up into my eyes.\n\n\"I certainly don't feel old when I'm around you,\" I grinned.\n\n\"Good, age is just a number. When two people are meant to be together, nothing else matters.\" Ashley looked at me with her sparking blue eyes and used her legs to pull me closer.\n\n\"I agree,\" I moaned as I kissed her soft, red lips. \"Now should we go see about that GPS?\"\n\n\"Sure,\" Ashley giggled, \"after a nice, hot shower.\"\n\n\"Sounds perfect,\" I said as her legs released me and I pulled her down from the pool table before picking her up in my arms and carrying her up the stairs to the master bathroom. I undressed her and marveled at her firm, young body. We took a nice, hot shower that lasted a good twenty minutes where I made sure every inch of her long, slender body was squeaky clean. Every now and then Ashley would pull me down for a kiss, feeling her soft lips on mine under the spray of the hot water was heavenly.\n\nWhen we were done in the shower I dried Ashley's soft, warm body off completely before she bounced through my bedroom and back downstairs where she had left her clothes to get dressed. I picked up her French maid uniform from the tiled floor and carried it into my bedroom, wondering how I got so lucky as to have a young girl like Ashley in my life.\n\nAfter I got put my jeans and polo shirt back on, I went downstairs where Ashley had already retrieved the Amazon box from the front step and she was in the kitchen at the table reading the booklet that came with the GPS tracker.\n\n\"This thing is pretty cool, a stalkers dream gadget,\" Ashley smiled up at me, now back in her short jean skirt and white, high-neck tank top. Her gold cross and chain hung over her shirt.\n\n\"Yeah, isn't technology great?\" I grinned as I sat down across from Ashley at the table.\n\n\"No real-time tracking?\" she asked as she flipped through the manual.\n\n\"No, those devices need to be on the cell network and cost quite a bit more. This will let us know where she's been, so it should do what we need it to do.\"\n\n\"Yeah, you're right,\" Ashley smiled as she put the booklet down on the table. \"I really am excited about next weekend, having you all to myself for two whole days.\"\n\n\"I am too,\" I smiled. \"We should do something special; go out for a nice dinner or something.\"\n\n\"Ooh, you're not afraid of someone seeing us?\" Ashley grinned as she stared at me with her beautiful blue eyes.\n\n\"So what if they do? Can't I take my favorite intern out for a nice dinner to say 'thank you' for a job well done?\" I smiled and returned her gaze.\n\n\"I suppose so,\" Ashley giggled, \"I've always wanted to go to Alinea!\"\n\n\"You are not a cheap date, are you?\" I smiled wide.\n\n\"No, but I'm worth it! Besides, guys usually have to wine and dine a girl to get her to do the things that I've already done for you,\" Ashley said as she gave me her sweetest smile.\n\n\"Very, very true.\"\n\n\"Are you sure you can get a table? I've heard it can take months to get a reservation.\"\n\n\"Yes, don't worry, Grant and I go way back and he owes me a favor or two for tracking down which of his competitors was giving him bad reviews online.\"\n\n\"You know Grant Achatz? Very impressive,\" Ashley grinned, \"I already know what dress I'm going to wear!\"\n\n\"I'm sure you'll look amazing,\" I said with a smile.\n\n\"Thank you, baby,\" Ashley bit her lower lip and smiled. I couldn't help but just stare at her for a moment; she was one of the most beautiful girls I had ever seen. So young, so vibrant and knowing just how naughty that she was made her even that much hotter.\n\n\"Do you have any idea what kind of effect you have on me when you bite down like that on your lip?\" I asked, almost to myself.\n\n\"I do now,\" Ashley giggled and jumped up to her feet. \"Anything we need to do before the bitch gets home?\"\n\n\"I guess we can straighten up a few things, make it look like you were hard at work all day,\" I said as I looked up at her.\n\n\"But I was hard at work,\" Ashley smiled and bit down on her lower lip more seductively than usual.\n\n\"I'm going to regret telling you about that, aren't I?\" I grinned.\n\n\"Yeah, probably,\" Ashley smiled as she walked over to my chair and sat down on my lap and put her long, slim arms around my neck. \"But, you love me anyway.\"\n\n\"I do,\" I said as my hands moved to her hips and I leaned in and kissed her sweet, red lips with a long, lingering kiss.\n\n\"Just think,\" Ashley moaned as I moved down to kiss her neck, \"next weekend we get two full, uninterrupted days to do anything we want.\"\n\n\"Mmhmm,\" I groaned, \"I already have a few things planned.\"\n\n\"I do too, husband,\" Ashley whispered softly in my ear before she let her soft, wet tongue gently trace my earlobe. My left hand slid up her back and grabbed her soft blonde hair and I tugged it back as I nibbled on her sweet neck.\n\n\"You would make a perfect wife, wouldn't you?\" I groaned as I tugged Ashley's hair back harder.\n\n\"Yes, I would,\" Ashley cooed as I kissed her one last time before releasing her hair.\n\n\"Ok, time for some work before I end up just fucking you again,\" I said with a sigh.\n\n\"Would that be so bad?\" Ashley pouted.\n\n\"No, but I guess we want to keep the wife happy with your internship.\"\n\n\"For now, anyway,\" Ashley smiled.\n\n\"Exactly,\" I said as I wondered just how much longer everything could stay in motion before something finally crashed. Whether it would be my wife, or anyone, finding out about Ashley and my affair or me finding out that my wife was actually cheating, I just wasn't sure.\n\nAshley went downstairs to take care of some of the laundry and I disposed of the packaging that the GPS tracker had arrived in and gave the bathrooms a quick cleaning. We both met in the master bedroom when Ashley brought up some clothes as well as my belt and the handcuffs from the basement. Ashley gathered up her things and I made sure there was no other evidence left from our morning of fun.\n\n\"Don't let the bitch find these,\" Ashley smiled as she sat down on the bed and held up the handcuffs.\n\n\"I won't,\" I grinned, \"She hasn't found your sexy black thong with the little pink bow on it yet, has she?\"\n\n\"Where do you keep it?\" Ashley asked with a wicked little grin as she looked around the room as if she'd be able to figure out my hiding place easily.\n\n\"Now, I can't tell you all of my secrets, can I?\" I watched Ashley's eyes as they continued to dart around the room. \"They're not in here, anyway,\" I smiled.\n\n\"Your office,\" Ashley smiled as she stood up. Maybe I was too easy to read after all. I followed her as she made her way out of the master bedroom and into my office as she twirled the handcuffs around her fingers. She walked to the front of my desk and looked around the room slowly.\n\n\"I didn't say they were in here,\" I smiled as I walked over and sat behind my desk and watched Ashley.\n\n\"Oh, they're in here,\" Ashley smiled as she walked around my desk. \"Not in the desk though, that would be too obvious. Would have to be somewhere your wife would never think to look.\"\n\n\"And just where would that be?\" I grinned as Ashley looked at the items on my desk, picking up my humidor and scowling a bit when she found nothing but cigars inside it. \"Want to play Bill and Monica?\" I smiled.\n\n\"Ew, no,\" Ashley looked at me and scowled. \"That girl was one ugly, fashion-challenged, beret wearing cow.\"\n\n\"Why don't you tell me how you really feel?\" I chuckled, amused at her reaction. Ashley put the humidor down and walked behind me and over to my bookcase where she scanned the titles for a moment before she turned to me.\n\n\"Alright, I know where they are,\" Ashley smiled as she jumped up and sat on the front of my desk and looked into my eyes.\n\n\"You do?\" I asked, the tone of my voice letting Ashley know I was a bit skeptical of her claim.\n\n\"I do,\" Ashley smiled, \"No doubt about it.\"\n\n\"Then tell me where they are,\" I watched her beautiful blue eyes as they gazed into mine.\n\n\"How about we have a wager instead?\" Ashley bit down on her lower lip and smiled.\n\n\"Alright, what are we betting?\"\n\n\"The winner gets a 'Whatever The Fuck I Want' card,\" Ashley said confidently.\n\n\"And what is that exactly?\" I grinned as I sat back in my chair.\n\n\"Well, it's not a real card, obviously,\" Ashley smiled as she leaned closer to me. \"It just means that the winner, at any point he or she pleases, can tell the other person to do something and they have to do it, no matter what it is.\"\n\n\"Alright, sounds fun, I'm in.\"",
        "\"Are you sure,\" Ashley grinned as she hopped up off the desk and stood in front of me.\n\n\"Yes, I'm sure,\" I nodded.\n\n\"The Hitchhikers Guide to the Galaxy,\" Ashley grinned as she looked deep into my eyes.\n\n\"You'll have to be more specific,\" I smiled as I reached out and grabbed Ashley's hips and pulled her down on my lap.\n\n\"You have two copies; the one that is down on the lower shelf is a nice leather-bound edition but the one on the high shelf is a cheap bargain bookstore find and my theory is that you hollowed it out to have a place to store you naughty little mementos,\" Ashley smiled as she leaned in and kissed me softly. \"Do I win?\"\n\n\"Yes, you win,\" I sighed as Ashley giggled and kissed me deeply before she hopped up out of the chair and brought the book down to the desk where she opened it up and revealed the hidden compartment that housed her black lace panties, some cash and my Sig Sauer P226 9mm handgun.\n\n\"Interesting combination,\" Ashley said as she picked up the Sig and took a closer look at it.\n\n\"Yeah, be careful with that.\" I sat back in my chair and watched Ashley as she handled the gun. I was happy that I'd cleaned it the night before and knew it was empty so I could give her a little leeway as she pointed the gun out the window doing her best bad-ass impression. \"How'd you know my wife would never look at that book?\"\n\n\"Are you serious?\" Ashley looked at me like I was a total idiot. \"It's The Hitchhikers Guide to the Galaxy, not exactly chick-lit.\"\n\n\"I don't know, I think it's a pretty good book,\" I smiled as Ashley put the gun back in the book's hidden compartment and then added the handcuffs to it.\n\n\"You, sir, are not a chick,\" Ashley giggled as she put the book back up on the shelf. She spun around then walked back over to me and sat back down in my lap. \"Don't forget what I've won,\" she smiled and leaned in and kissed me softly.\n\n\"I won't, I'm a man of my word,\" I said as I wrapped my arms around her and pulled her young body closer as I kissed her passionately.\n\n\"Good, now I've got to run. Don't let the bitch catch you putting the GPS on her car,\" Ashley said with a smile.\n\n\"I won't, I'm damn good,\" I grinned looking into her eyes.\n\n\"Yes, you are,\" Ashley giggled and leaned in to kiss me one last time before she whispered, \"Bye, baby,\" in my ear before she got up and headed out the door.\n\nIt wasn't long before I heard the back door as Ashley left then shortly thereafter I heard my wife coming in from the garage. I went downstairs to greet her after taking one last look into our bedroom to make sure there was no visible sign of the fun Ashley and I had earlier.\n\n\"Hey hun,\" my wife said as I walked into the kitchen.\n\n\"Hey, how was your day?\"\n\n\"The usual stuff, nothing too horrible,\" she said as she stood at the island and sorted the mail that she had just brought in.\n\n\"You've been working a lot of hours lately, don't you think you deserve a bit of a break?\" I smiled as I walked over to the island across from her.\n\n\"Yeah, I really do.\"\n\n\"Well, I've got a surprise for you,\" I grinned. \"I know Caroline's birthday is coming up and that you two love your sister bonding time so I booked the two of you for the full Spa package at the Osthoff Resort for next weekend.\"\n\n\"Really?\" Katherine looked up from the mail smiling, \"That's awesome! What made you think of doing that?\"\n\n\"I got an email from TripAdvisor, they had some great last-minute specials and I remembered that the two of you absolutely loved the place when we went there a few years ago.\"\n\n\"Yeah, we did,\" Katherine smiled as she walked around the island and gave me a big hug. \"Aren't you going to come along?\" she asked as I wrapped my arms around her waist and pulled her body closer.\n\n\"Nah, I'd just be a third-wheel. You two will have a lot more fun without me,\" I grinned.\n\n\"Well, thank you,\" she smiled as she put her arms up around my neck and pulled me down and kissed me. \"I've got to go call Caroline; she's going to be excited.\"\n\n\"Yeah, tell her since it's her birthday I'll even cover her mini-bar charges,\" I chuckled.\n\n\"I don't know if we have that kind of cash,\" Katherine said smiling as she pulled her phone from her purse and dialed her sister's number. She headed up to the bedroom to talk so I slipped downstairs and out into the garage and placed the tracking device in the wheel well of my wife's black Cadillac CTS-V.\n\nI figured that I would give it at least a week until I checked on the device. If I could get a chance next Friday before my wife and her sister left on their spa weekend I'd pull it then. I wasn't quite sure which of the results I was hoping for. Finding out she was cheating would give me a free pass on the affair I was having with Ashley and finding out she wasn't would make me feel like a total dick for suspecting she was in the first place.\n\nIf she wasn't cheating, that was the more complicated situation at this point. If she wasn't cheating, then I didn't have a 'get out of jail free' card in the ticket stub and I was pretty certain that my marriage would be over if my wife found out I was fucking the high school girl next door.\n\nI went back inside and kicked off my shoes and turned the television on, flipping through the channels as I played the events of the day back in my head. I knew I was playing with fire by telling Ashley that I loved her, but in the heat of the moment I just couldn't resist. When my cock is buried deep inside her she could get me to do anything she wanted me to do.\n\nI wondered just what would happen if I found my wife wasn't cheating and I tried to break it off with Ashley. I couldn't see it going well at all. For now, as long as I kept Ashley happy she was content being the other woman but the minute I made her mad I was pretty sure that she'd make sure my wife found out all about our little adventures. I was an idiot to get this involved without thinking of some kind of exit strategy and now I realized there might not be one.\n\nI then wondered if Ashley could ever be the long-term solution. I couldn't believe that I was even thinking about the possibility. Maybe it was just because I was starting to feel backed into a corner and wanted to justify my actions to myself, but I wondered if Ashley and I could somehow work. Yes, there was the age difference, but crazier things have happened. She was still in high school, but that was only for another year. There was no steadfast rule that it couldn't work.\n\nAshley was making it pretty damn clear that she wanted me. If she just wanted to get her revenge on my wife, she could have had it long ago. I was starting to believe that what was keeping Ashley around was that she really and truly wanted me. Never before had I had a girl like Ashley at my beck and call, willing to do anything and everything just to make me happy. The fact that she was tall, blonde and extremely gorgeous made her my absolute dream girl. The fact that she was also extremely naughty and a downright dirty little slut was just was icing on the cake and made me feel like I was living out every man's fantasy.\n\n\"What are you watching?\" my wife Katherine's voice snapped me back to reality and I looked up to see her smiling in front of me wearing a light pink, see-through lace and mesh babydoll and thong panties both with a darker pink accent bow. There was no doubt her workouts were paying off as her body was firm and lean. I took the sexy outfit in, unable to speak for a moment.\n\n\"I have no idea, actually,\" I smiled. \"I was just kind of flipping channels.\"\n\n\"You looked deep in thought,\" Katherine grinned as she walked closer to me, standing between me and the television.\n\n\"Yeah, contemplating my next novel,\" I said as I looked up into her blue eyes.\n\n\"Caroline said that I should thank you for our spa weekend,\" my wife grinned.\n\n\"Well, tell her she's very welcome.\"\n\n\"No,\" Katherine smiled as she moved between my legs and kneeled down in front of me, \"She said that I should thank you for being such a thoughtful husband.\"\n\n\"Oh, really?\" I grinned wide, \"Did she now?\"\n\n\"Mmhmm,\" my wife nodded her head, \"She did.\" Her hands moved up to my black leather belt and unfastened it as her eyes looked up into mine. She unbuttoned my jeans and then slid the zipper down to reveal my bulging black boxer-briefs.\n\n\"I like your outfit,\" I smiled and let out a moan as her hand pulled my cock free and gave the throbbing head a kiss.\n\n\"You should, you bought it for me,\" she smiled as she pulled my boxer-briefs and jeans down to the floor. \"I'm sorry it's taken me this long to wear it for you, I just wanted to make sure I looked good in it.\"\n\n\"You look amazing,\" I moaned as she leaned in and took my throbbing cock in her hot, wet mouth. She used her soft, red lips to grip my hard cock tightly as she slid slowly up and down my shaft.\n\n\"Thank you,\" she smiled as her hand slowly stroked my throbbing cock as I sat back on the big leather couch. \"I see you had Ashley do more cleaning today, I have to admit I didn't think you would make her work as hard as you have.\"\n\n\"You underestimate me,\" I smiled as I took my polo shirt off and threw it onto the floor.\n\n\"Uh huh, you probably imagine her in a little maid's uniform when she's cleaning, don't you?\" my wife smiled as she looked up into my eyes as she slowly stroked my throbbing cock.\n\n\"Maybe,\" I grinned, \"Can you really blame me?\"\n\n\"No, I get it,\" my wife said as she leaned in and rolled her tongue around my cockhead playfully as she stroked the shaft. \"She is hot, isn't she?\"\n\n\"I...\" There were so many ways I could answer that question, but none of them were good.\n\n\"Oh come on, you're really not going to pretend she's not every guy's wet dream are you?\" she smiled, looking up into my eyes as she began stroking me faster.\n\n\"No, I'm just avoiding a verbal mine field. There are some questions that have absolutely no right answer,\" I moaned as my wife gripped my cock tighter as she slowly stroked me.\n\n\"It's ok, you can tell me,\" Katherine smiled as she looked up at me. \"Have you fantasized about young Ashley sucking on your big, hard cock?\"\n\n\"Umm,\" I let out a loud moan as Katherine's lips made their way back down on to my cock, taking each and every inch into her warm mouth and throat. Her soft tongue corkscrewing my shaft as she went up and down.\n\n\"You have, haven't you?\" she groaned as her mouth enveloped my raging hard cock once again, bobbing her head up and down as she sucked me off.\n\n\"Yes,\" I moaned as I reached down and grabbed a handful of my wife's blonde hair and tugged it back.\n\n\"Yes?\" she smiled and looked up at me with amazement in her eyes. \"And you admit it? You dirty old man,\" she giggled and started sucking my cock with abandon. Her soft lips slid up and down my cock and her tongue twirled around the head like it was a lollypop.\n\n\"You asked,\" I moaned, closing my eyes, feeling her lips and tongue working my cock like an absolute pro. I tugged back hard on her hair and heard her groan.\n\n\"I guess I did ask,\" Katherine smiled up at me as she slowly stroked my cock with her hand. \"So, do you want to fuck her?\"\n\n\"No,\" I let out a low moan and shook my head.\n\n\"You answered that way too fast,\" she scolded me. \"Think before you answer. Do you want to fuck her?\" my wife's hand stopped at the top of my shaft and she used her thumb to slowly tease the throbbing head of my cock.\n\n\"What do you want me to say?\" I groaned and took a deep breath as she gripped me tighter.\n\n\"The truth,\" she smiled.\n\n\"The truth?\" I moaned.\n\n\"Yes, the truth. Do you want to fuck the little blonde high school girl from next door?\"\n\n\"Fuck, yes,\" I growled as my wife used her hand to start stroking my cock harder and faster.\n\n\"Mmmmm, baby, you are hard as a rock,\" Katherine moaned as she climbed up on the couch and straddled me. She reached down and slid her panties to the side and in a quick motion she guided her hot, wet pussy down on my raging shaft.\n\n\"Fuck,\" I moaned as I felt her pussy gripping down on my cock as she slowly rode me. \"Holy shit,\" I smiled as my wife looked into my eyes.\n\n\"What?\" she groaned as my hands moved to her hips and I guided her body up and down on my cock.\n\n\"You're soaked,\" I grinned.\n\n\"I know, baby,\" she moaned as I let my right hand slide up her back, past the sexy lace babydoll, and I grabbed a handful of her hair. \"Fuck me.\"\n\n\"You were imagining me fucking Ashley,\" I smiled as I tugged Katherine's hair back hard and she let out another loud moan.\n\n\"I was not,\" she whimpered as I pulled her down hard on my cock and forced her to stay there.\n\n\"I think you were,\" I grinned as I looked into Katherine's eyes, \"You were picturing her riding my rock hard cock, weren't you?\" I moaned as I felt her pussy grip down on me, all but answering my question.\n\n\"No,\" my wife smiled, biting down on her lower lip.\n\n\"So, were you imagining fucking sweet, young Ashley yourself?\" I growled low. Katherine bit down harder on her lip and I could feel her pussy contracting around my cock.\n\n\"Like you said,\" my wife smiled, \"She's hot.\" Katherine leaned in and kissed me hard. I tugged her soft blonde hair back as her tongue slipped into my mouth and my hands started guiding her body up and down on my rock hard cock.\n\nI could feel the wetness of Katherine's pussy dripping down as she rode me. I pulled her hair back harder and it just got her that much more worked up as she rode me harder. I thrust my hard, throbbing cock up into her harder and harder as she bit down on my lower lip as we kissed.\n\n\"Fuck,\" I moaned, \"That feels so good.\"\n\nKatherine's hands were on my shoulders and she was bouncing up and down on my cock. I slid the straps of her babydoll down and let her 38C's bounce freely just an inch from my face. I tugged her hair back hard with my right hand as my left moved up and grabbed her right breast so I could roll my tongue around her hard nipple.\n\n\"Fuck me,\" she moaned as I bit down playfully on her hard nipple. Her body was relentless in its rhythm as she rode me up and down and up and down. I tugged her hair back and kissed her neck as she moaned louder and her pussy soaked every inch of my cock as she rode it.\n\n\"You like that?\" I groaned as I tugged her blonde hair back and buried my throbbing hard 8 inches deep inside of her.\n\n\"Yes, fuck yes,\" she screamed as I stood up with her still on my cock and carried her over to the side of the couch. Her pussy was gripping me tightly as I spun her around and bent her body over the big arm of the black leather couch, right where I'd fucked Ashley the night that she snuck over when Katherine was asleep upstairs. Looking at my wife from behind, her long blonde hair all messed up and her wearing that sexy little babydoll I had a real sense of d\u00e9j\u00e0 vu.\n\n\"You're a very bad girl,\" I moaned as I brought my right hand up and let it come down hard on my wife's ass causing her to let out a scream.\n\n\"I am, punish me,\" she moaned. I raised my hand and brought it down on her ass again, spanking her harder. She pushed her pussy back down hard on my cock and let out a loud scream as I fucked her slowly but deeply over the side of the couch.\n\n\"You think you need to be punished?\" I groaned.\n\n\"Yes, Mr. Jones, I do,\" Katherine whimpered.\n\n\"That's a little formal, baby,\" I chuckled as I gathered a handful of Katherine's long, blonde hair in my hand and tugged it back as I thrust my throbbing cock inside her, grinding her body up against the couch.\n\n\"Call me Ashley,\" my wife moaned in a pleading voice.\n\n\"What?\" I groaned as I thrust myself deep inside of her.\n\n\"I'm your slutty little intern, Mr. Jones. Fuck me harder,\" Katherine moaned as I felt my head spinning. My legs were getting weak under me and I could feel a huge orgasm beginning to well up deep in my balls.\n\n\"Fuck,\" I moaned as I pounded my wife with every ounce of energy that I could muster. Her pussy was gripping my cock harder than it had in years as I fucked her and her juices were rolling like a waterfall down the side of the leather couch.\n\n\"Say my name,\" Katherine moaned loudly.\n\n\"You are such a little slut, Ashley,\" I groaned and I tugged my wife's long blonde hair back hard and I could feel her pussy gripping down on me even tighter, wanting to milk me of every drop of cum that I had.\n\n\"Yes,\" she squealed.\n\n\"You like that, Ashley? You like my big, fucking cock inside you?\" I moaned, drilling my wife harder and harder.\n\n\"Yes, Mr. Jones! Yes!\" she screamed and I tugged her hair back as hard as I could, jerking her head back towards me and making her moan. \"Fill my little teenage pussy, Mr. Jones,\" she moaned.\n\n\"Fuck, Ashley,\" I moaned loudly as I felt myself explode. My thrusts jackhammering my wife's pussy up against the side of the couch and filling her up with what felt like liters of my hot jizz. She let out a multitude of yelps and moans as I pulled her hair back and pounded her until I was absolutely and completely spent.\n\nI let go of her hair and Katherine looked back at me with wild lust in her eyes as she tried to catch her breath. I slid my cock from her drenched, dripping pussy and I pulled her to her feet. I walked over and collapsed on the couch and Katherine fell down next to me.\n\n\"What was that, exactly?\" I asked, out of breath.\n\n\"You seemed to like it,\" Katherine answered with a giggle.\n\n\"I didn't say I didn't like it,\" I said as I put my arm around my wife as her body cuddled up next to mine.\n\n\"It was Caroline's idea; she said I should thank you properly for sending us on the spa weekend.\"\n\n\"I meant that bit at the end,\" I groaned as Katherine let her hand come to rest on my semi-hard cock.\n\n\"You mean the Ashley stuff?\" Katherine giggled.\n\n\"Yes, I definitely mean the Ashley stuff,\" I groaned.\n\n\"I figured you must have at least a little frustration pent up from having a hot little piece of ass like that around here all the time,\" Katherine looked up at me and smiled. \"I figured you deserved a little bit of the fantasy.\"\n\n\"You do know that the proper answer to one's wife is never that you want to fuck the Catholic high school girl next door, or for that matter anyone else on the planet Earth.\"\n\n\"Well, I'm glad you were honest,\" Katherine grinned, \"Besides, I'd totally do her and I don't say that about many chicks.\"\n\n\"What now?\" I asked opening my eyes wide.\n\n\"That's the same look you gave when I asked if you wanted to fuck Ashley,\" Katherine laughed and moved up and gave me a soft kiss on my cheek. \"Don't be getting your hopes up for a threesome or anything though; I think Ashley is way out of our league.\"\n\n\"Speak for yourself,\" I smiled and my wife reached up and smacked me on the side of the head before she curled up on the couch and put her head on my chest and closed her eyes.\n\nWhat the fuck was going on? "
    ],
    "authorname": "TallMarriedMan",
    "tags": [
        "ashley",
        "revenge",
        "blonde",
        "schoolgirl",
        "cheating",
        "pool table",
        "couch",
        "belt",
        "hair pulling",
        "wife"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/ashleys-revenge-ch-09"
}
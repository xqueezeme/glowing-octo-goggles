{
    "title": "Voyeur Ch. 05",
    "pages": [
        "Thanks for reading and for the kind feedback sent so far! Hope you enjoy this one :) \n\n*********** \n\n\"Hm.\" \n\nRay was slightly disappointed when Rachel emerged from her workplace. He'd anticipated a strutting, hot model type. The kind to have her tits out in a pricey scrap of shirt that left nothing to imagination, and a skirt so short he could see what she had for breakfast if she bent over. \n\nDespite carefully watching since the young man opened shop, Ray never saw Rachel enter. So there was a back way in. After doing some light product research, he'd called the store to inquire about a fake account and Rachel was summoned as a matter of urgency. \n\nScrutinizing her, Ray tilted his head. At second glance, she was rather cute. But certainly not the kind of girl to break the heart of an immature socialite. Her features were elegant, and her long, reddish hair could be strawberry blonde but it was difficult to tell. Considering her, Ray finally concluded she was fuckable. In a boring, suburban way. \n\nRachel walked a couple of doors down to the open window of a coffee shop. After ordering self-consciously, she stepped aside to wait. When her order was ready, the barista obviously made a joke as he handed over two coffees. Even from a distance Ray could see Rachel's face burning. \n\n\"Blusher,\" he calmly observed. \n\nStammering her thanks, Rachel clumsily backed into two people waiting behind her. Spinning to profusely apologise, she stumbled and tripped over own feet. Literally staggering before losing balance, she went down in a shower of coffee to the horror of all onlookers. \n\nBefore Ray felt it coming, a laugh ripped out of him. It took him by surprise, and lasted quite a while. He couldn't remember the last time he'd laughed like that. Still chuckling, he watched the public quickly come to Rachel's aid. \n\nA kind elderly lady helped Rachel to her feet, while others offered napkins. The barista, for flirtation or pity, indicated he would replace the coffees now painted down the front of Rachel's pale-green shirt. It certainly was a rarely undignified moment. Ray wished he'd caught it on camera. \n\nFanning her chest to cope with the dose of hot liquid, Rachel declined. Ray noticed her wet, sensible shirt revealed she had rather delectable breasts, a fact several other men were also appreciating. Ray suspected she concealed a hot body beneath conservative clothes. \n\nHis wide grin faded to something more wary as a silver car pulled to the curb. A tall, good-looking man with dark hair quickly got out, clearly laughing at Rachel as she gestured miserably to the scene she'd caused. Fortunately for her, the blushing flattered her complexion. Rachel's face glowed so red, Ray found himself imagining the heat it would emit against his palm if he cupped her cheek. \n\nThe newcomer consolingly gathered Rachel into his arms, not caring about her saturated shirt. The barista eyed them disapprovingly, before stiffly returning to serve customers. \n\nThe boyfriend laughingly kissed all over Rachel's flustered face, which was epically mortified as witnesses cheered them on. Then he smilingly guided her to his car as though she were handicapped. Opening the door, his face beamed adoration as she gratefully disappeared from public view. \n\nAs the car took off, and Ray waited a short moment before starting his engine to follow. Despite the light-hearted moment, Ray knew Rachel's new boyfriend was not a soft guy. He moved with a unique agility that spoke more than fitness - he was a fighter. Ray wondered what kind of sport he engaged in. It triggered his curiosity. But not half as much as Rachel did. \n\n******* \n\n\"I hate lukewarm coffee, but that was fucking lucky. You could have been seriously burned,\" Ben frowned over the wheel. \"Are you sure you're ok?\" \n\nRachel nodded, sitting stiff as a statue. \n\nNoticing her discomfit from the corner of his eye, Ben smiled. \"Relax, Rae.\" \n\n\"I'm covered in coffee!\" she shrilly replied. \"Your car-!\" \n\n\"I don't care. I only need this thing to get me from point A to B,\" he said offhandedly. \n\nLooking around the glossy interior, Rachel didn't believe him. Before she could push the point, she fell silent as Ben parked. \n\n\"What?\" he answered her questioning stare, clicking his belt undone. \"They do good coffee here.\" \n\n\"Oh.\" Rachel cringed, remembering why they had none. \"Can...can I wait here?\" \n\n\"Nope,\" Ben grinned. \n\nWhen they reached the shop entrance, Ben reached around her to open the door and usher her in before she could retreat. Rachel kept her head down as Ben led her to a free table. He laughed at her dejected expression, and bent to kiss her cheek. \n\n\"Cheer up, baby bunny.\" \n\n\"Everyone's looking at me,\" she complained wretchedly. \n\n\"Because you're acting weird. Come on, Rae, don't make me look like a bad guy.\" \n\n\"Huh?\" she peeked up at his exasperated face. \n\n\"Give me a smile!\" he insisted, sighing with exaggerated relief when she tremulously complied. \"That's better. I'm going to order. If you run, I'll be forced to embarrass us both.\" \n\nGiven Rachel tried to evade him twice, and once succeeded, Ben felt compelled to add a warning statement whenever they separated. \n\nRachel kept her head down, discreetly fixing her eyes on the table surface as Ben walked off. A few minutes later, she lifted her gaze to clash with the direct stare of a man standing outside the store. Of course her paranoia was playing up again, because after blinking once, he was clearly reading a poster pinned across one of the windows. \n\nTall and broad-shouldered like Ben, he reminded Rachel of those friendly neighbourhood men always halting traffic for unruly children chasing soccer balls, or rushing to help old ladies with shopping. His hair was a light ash-brown, his features mildly attractive. Ben was much better looking, she decided. \n\n\"And I hoped you only had eyes for me,\" Ben wryly interrupted her musing, taking the seat beside her. \n\n\"Oh! I didn't..!\" Rachel exclaimed, blushing guiltily. \"I mean, it wasn't...\" When her eyes nervously returned to the window, the man was gone. Ben sighed theatrically. \n\n\"I suppose I can tolerate you perving on other men, so long as you don't touch,\" he said lightly, though his dark eyes narrowed ominously at her. \n\n\"T-Thank you,\" Rachel said, looking appalled as Ben's eyebrows indignantly lifted. \"I meant for the coffee!\" \n\n\"Well, that's a relief,\" he replied, his fingers extending around his cup to brush hers. \"So what happened at work?\" \n\n\"Oh, I don't know.\" Remembering Steve and Meredith's confusion, Rachel's brow contracted at the unsolved mystery. \"Steve said they got a call-\" \n\n\"Ben? What a small world!\" \n\nBen and Rachel looked up to the blonde woman paused by their table. Confronted by a conquest he couldn't recollect, Ben wished the world was bigger. \n\nThe girl was exceptionally girlish, with glittering gold chains bunched about her neck, and too many silver bracelets to be practical. It was almost unbelievable they didn't hear her jangling approach. \n\n\"Hi...?\" Ben smiled politely, and questioningly raised his eyebrows. \n\n\"Monica,\" the girl laughed convincingly, and few would be able to tell it was forced. \"It's been a while. I lost your number.\" She looked Rachel up and down, and her smile became fixed. \"Is this your sister?\" \n\nWhat a bitch. Ben's arm tightened around Rachel. She was squirming, and Ben knew she'd excuse herself first chance she got. But she wasn't getting that chance. Ben also knew there was no way in hell he would have given a girl like Monica his number. \n\n\"This is Rachel, my girlfriend.\" \n\n\"Oh, how embarrassing. I'm so sorry,\" Monica gushed without remorse. Her eyes mockingly lingered on the unpalatable brown stains coating Rachel's shirt. \"I didn't realise. Anyway, Ben, I recall you're in the editing sphere? I might have-\" \n\n\"I have to stop you there, Monica.\" Ben was still smiling, but Rachel was slightly unnerved by the cold edge to his voice. \"I'm not taking work at the moment.\" \n\nMonica's face fell but she took the rejection with good grace, and searched her handbag. \"Can't blame a girl for trying, after the time we had. If you change your mind...\" \n\nMonica carelessly dropped a business card to the table with a winning smile, which soured as she looked to Rachel, her eyes again settled on her ruined shirt. \"Nice to meet you, Rochelle.\" \n\n\"Christ, I dodged a bullet there,\" Ben muttered, encircling Rachel in his arms and burying his face in her neck. Not caring they were in public, he sensually kissed up her jaw and tried to capture her mouth, but Rachel quickly dodged him. \n\n\"People are looking!\" she protested in a scandalized whisper, hoping this wasn't going to become one of many occurrences whilst dating Ben. Her day seemed to be descending into one nightmare social incident after another. \n\n\"You rescued me from an unwanted come-on. That's always worth celebrating,\" Ben joked. He idly picked up the little gold-bordered card to see if it triggered his memory. \n\nGlancing over the business name, he remembered meeting Monica roughly two years ago at an event Blake practically blackmailed him into attending. At the time, he figured he might as well make something of the night. They'd drunkenly fucked in the cloakroom during the awards hour, and he'd wisely deflected all attempts to initiate a relationship immediately after. \n\nNoticing Rachel's traumatized expression, he took pity, figuring she'd endured enough for the morning. \"Ok, let's go. I can't exactly strip you naked here anyway.\" \n\n******** \n\nBack behind the safety of tinted windows, Ray frowned at the wheel as his mind pondered what just happened. Of all the moments Rachel looked up from the table, it was when he arrived at the window to pick their location. For one second she stared right at him. \n\nRay sighed irritably. He should have stayed in the car. It was out of character to draw that close, and completely unnecessary. He was particularly unprepared for the feelings that surfaced when Rachel returned his stare. That brief moment of her attention made his heart skip a beat. \n\nThe last time he'd done surveillance on a woman was about three years ago; a gang member's wife. Ray's upper lip was perpetually curled with disdain as he'd tailed her from clothing stores, to beauty parlours, to fancy restaurants and other places that reeked of money and bored him to tears. After less than two days, he was itching to murder her. \n\nBut Rachel was a civilian. Though quite dull at first appearance, she was becoming increasingly interesting the more Ray watched her. Maybe it was her down-to-Earth, awkward nature that was somehow both entertaining and endearing. Maybe it was the fact she didn't shamelessly flaunt her bodily assets and kept them mysteriously hidden. \n\nMaybe it was the way she looked at him; her wide-eyed stare without any snooty ego or expectation of being worshipped. With an attractive complexion, she had nothing to hide beneath layers of powder and tinted creams. Her pale pink mouth was classically shaped, and Ray wondered how it would feel to kiss those full lips, and whether she would taste sweet... \n\n\"Whoa. What the fuck?\" he muttered, shaking his head at the unusual line of thought that made him slightly giddy. \n\nRay was not romantically inclined, and quite startled to be thinking these things about a girl hardly worth his attention. In that moment Ray decided he was done with the stalking experiment. He was going to piss off and get laid. \n\nHours later, he sauntered into a nice restaurant and sat at the bar. His outfit was sharp and flattering; a soft, white shirt beneath a light-brown blazer. But only the women who chanced to meet his eyes gave him a second glance. He quite enjoyed the challenge of seducing a woman randomly picked out from the public, and his success rate was quite impressive. Upon entry, he'd already picked out two targets, and both happened to be brunette. \n\nOrdering a cider, he discreetly observed his choices. One had a date which he discerned was nothing serious. The other was with girlfriends, and Ray decided she would do. Though he adored the chase and subsequent victory, on this occasion he was rather worked up. Not in the mood for too much of a challenge. \n\nThe chosen girl wore a beautiful, full-length blue dress, and oozed sophistication. Her face was very striking, with perfect cheekbones enhanced with blush and bronzer. She had large, sparkling black eyes and her long, dark hair was carefully arranged into an impressive French plait. Her bright red lip-sticked mouth was full and wide, with the kind of glorious big smile you'd see in a toothpaste commercial. Ray found himself comparing it to Rachel's pink pout, and wishing the woman's mouth wasn't so wide. \n\nThe brunette had an air of confidence that told him she was very successful, or at least very satisfied with her life. Highly sexed, independent and ready to tussle. She was Ray's kind of girl. Vastly different to the bashfully uncertain one he'd surveyed earlier... \n\nShaking his head angrily, Ray downed his cider and ordered another. Half an hour later, the woman excused herself to go to the bathroom. Ray immediately followed. He patiently waited in the hallway, holding his phone to his ear, frowning intently as though listening to an important voicemail. \n\nWhen she emerged, Ray didn't look at her, but strode forward to the men's bathroom and expertly stepped on the back hem of her dress. Not enough to tear the skirt free, but enough to stop her. \n\n\"Oh no! Oh, my God, no!\" she gasped with dismay, feeling sections of the fine garment rend across her hip. \n\n\"Shit! I'm so sorry!\" Ray exclaimed, bending to inspect the damage. \n\n\"It...It's fine,\" she said wretchedly, quite distracted as her fingers worriedly felt along the seams. \n\nRay shook his head, lightly touching the fabric. \"This is a beautiful dress. My sister has the same one. I'll replace it.\" \n\n\"No, don't be silly,\" the girl smiled weakly, still looking heartbroken. \n\nRay straightened and grinned down at her. Though she was very tall for a woman, Ray was still a head taller when he stood to full height. \n\n\"Um...\" The girl was lost for words, wondering why she hadn't noticed this hunk in the main area. \n\nHis features were classically symmetrical, but his hazel eyes were fascinating as they intently watched her. His smile was remarkably sexy. Waiting expectantly for him to hit on her, or at least use the dress as an excuse to get her number, she was stunned speechless when Ray pulled out his wallet. \n\n\"Here,\" he said, pushing cash into her hand. \"I know the cost of these things. I hope I haven't ruined your evening.\" \n\n\"Uh-\" the girl gaped at the wad of money, then back to his face. Ray again favoured her with the charming smile and disappeared into the men's room without a backward glance. \n\nMinutes later, Ray sauntered into the main area, knowing the group of girls would be waiting to observe him. This was the moment he'd know if she was hooked. Going by history, 80% of them took the bait. It wasn't a preconceived tactic - he acted on instinct according to how his target reacted to him. \n\nSome responded to flattery, others rude disregard. He gauged this one required a mix that would keep her guessing. Ray enjoyed these secret wagers; he didn't care about the cash. His money was better spent gambling on a sexual encounter, than a sure-thing prostitute. \n\nRay immediately noted his target was flushed and talking quite rapidly, casting interested looks his way. Appearing oblivious to the attention, he returned to the bar. \n\nAn hour later, she tapped his shoulder. Ray turned, with a perfect expression of surprised inquiry. \n\n\"Um,\" she blushed, putting the cash on the counter. \"Thanks, but I don't need this.\" \n\n\"Why? Is the dress insured?\" Ray smiled, and the girl laughed. \n\n\"What's your name?\" she asked. \n\n\"Paul,\" he answered, and casually sipped his cider with no inclination of returning the question. \n\n\"Well, I-I'm Tasha,\" she introduced herself uncertainly, confused about his interest in her. \n\n\"Lovely to meet you, Tasha,\" Ray grinned engagingly, and knew her heart fluttered. It was time to reel her in. \n\n\"I was going to send you an apology cocktail,\" he said, slightly twisting in his chair. The innocent move allowed his blazer to casually drift open and display his solid build. \"But I didn't want to look like a creep.\" \n\nSpeechlessly admiring his wide chest, Tasha pulled herself together and threw back her head to laugh. Watching the flirtatious gesture, a vision of kissing Rachel intruded in Ray's mind. \n\n\"I'm glad you didn't. I would prefer to drink it with you.\" \n\n\"Very well.\" Ray signalled the bartender. \n\n\"So, tell me, Paul,\" Tasha batted her lashes. \"How did you know the dress cost $800?\" \n\n\"I didn't. I just knew anything less would offend that body,\" Ray answered, his eyes flickering to the hem of her gown and back to her face. \n\nTasha sniffed with mild contempt, but Ray knew she liked his answer. The truth was, he did know the exact cost of her dress. He'd had to buy a very similar one to dress a body before sending it over a cliff in a car. \n\nLess than an hour later, they were in Ray's hotel room, fucking like animals on heat. \n\nLip-stick smeared mouth wide open, Tasha was naked on all fours, trying to keep her balance as Ray slammed into her from behind. One of his hands gripped her waist, the other tangled in her hair. \n\n\"Oh!\" Tasha gasped, as Ray tugged her up against him without pausing tempo. Keeping a fist in her hair, his other arm circled her waist so they were body to body, her back flush against his bare chest. Occasionally his hand pinched and pulled her nipples. \n\n\"Uh, Paul!\" she panted, wincing slightly and very surprised by his forceful nature in bed. \n\nTasha couldn't know this wasn't his usual style, that he was fiercely working to drive another girl from his mind. Ray was normally a paced lover, and liked to create a chemistry that would stroke his ego later. A build-up of passion that would lead to his conquest loudly orgasming on his cock and purring in his arms in the aftermath. \n\nBut tonight, he was on a mission. He wouldn't have needed to get laid at all, if it weren't for that damn suburban girl. He could have relaxed in his hotel with a book, or enjoyed a quiet dinner on the balcony. But he was driven to hunt, and he was going to make the necessity worth his while. \n\nBreathing heavily, Ray released his hold in Tasha's hair and briskly pushed her, pressing forward so she was forced down. Stepping up to rest his thigh against her waist, his grinned wickedly at her submissive position, and immediately resumed thrusting at a deeper angle. He reached under to trace her pussy lips, to feel them open wide to accommodate his girth as he pounded her. \n\nFace and chest squashed into the soft mattress, Tasha gasped as Ray's thick length ploughed into her mercilessly. The moment the door closed behind them, he was all business - stripping her naked and hungrily kissing her. At the time, she'd been flattered and excited he was so desperate to fuck. Being manhandled by the stranger was incredibly hot; he was hung and had a body to die for. But she wasn't used to being fucked relentlessly though the night like a porn star. \n\nTasha's enjoyment hardly mattered to Ray. From night through to morning, he managed to come four times, with minor rests in-between to swap for a new condom, or when Tasha begged for water or lubricant. \n\nAs light spread throughout the suite, Tasha tiredly stirred. With his arm around her, Ray was still wide awake, watching the ceiling. \n\n\"Wow, Paul,\" she sighed, wearily crawling to the bed's edge and gingerly sitting up. \"That was really intense!\" \n\nOne edge of Ray's mouth turned up slightly, but he otherwise ignored her. After a slight pause, Tasha shrugged and went to shower. ",
        "Laying naked in bed, Ray's eyes traced the light ceiling patterns, wondering why he was still plagued with thoughts of Rachel. \n\n******** \n\nThe next day, Ben had to spend a few hours with Blake to discuss work matters. On Ben's suggestion, Rachel ventured out to a local caf\u00e9 he recommended. \n\nAfter ordering a fresh juice and sandwich, Rachel idly played on her phone, completely unaware she was being carefully watched by two sets of eyes. \n\nAcross the road in his car, Ray leaned back with a smile of anticipation. He would be quite angry with himself if he could see the warmth in his eyes. After thinking about Rachel too much, he decided one more day of surveillance might verify his interest was exaggerated. It made no sense for him to be enamoured with any woman, especially one like Rachel. \n\nObserving her, Ray wondered if she'd find a way to get tangled in an umbrella stand, or perhaps she'd leave a foot out for a waitress to trip over. That would make him laugh as hard as the first debacle she created at the coffee shop, though that would be difficult to top. \n\nBut her order arrived without incident, and Ray sighed and sipped his own coffee. The cup almost slipped from his hand and he jerked up in his seat as Marcus emerged from a ridiculous sportscar. \n\n\"What are you doing, you idiot!\" Ray breathed, shaking his head with a big grin as he prepared to witness a new spectacle. \n\nRachel was busy blushing at the abundance of heart icons and explicit messages popping up on her phone from Ben, despite him being locked down in an important meeting. She was far too busy to realise Marcus' presence, until his shadow fell across her table. \n\nMarcus felt some satisfaction from her speechless horror as she recognised him. But he didn't exactly have a plan. To start, he supposed he would try to be civil. \n\n\"How have you been, Rachy?\" he sneered, hands on hips. \n\n\"G-Good,\" she stammered, hiding her hands beneath the table so she wouldn't be publicly wringing them with angst. \n\nMarcus reeked of alcohol. Remembering he tried to work with Ben, Rachel was very alert to his intentions and the fact his presence was probably not a coincidence. \n\nRunning his eyes over her, Marcus felt his anger spiral out of control. She was the same, adorably sweet girl who'd ripped his heart out when she walked away. This was his woman. She should be his woman. He could give her the world, but she moved on. Now they were strangers. It was all so fucked up. \n\nRay's eyebrows shot upward as Marcus thumped his fist to the table. Rachel's face was bright red, and Ray felt an inkling of sympathy for her. Not that it mattered. He'd seen a lot of things and he never interfered. He'd once casually watched a restaurant owner murder his wife in an alcohol-fuelled rage in their upscale mansion. Out of curiosity Ray waited long enough to see what the doomed chef would do with the body, before killing him for an unpaid debt. \n\nThoughtfully pursing his lips at the memory, his attention was brought to the present as Marcus began shouting. The humour left Ray's eyes and he stiffened, his face grim as Marcus overturned the table. Rachel was left frozen in her chair with nowhere to hide, her eyes huge as they stared up at Marcus, filled with dread. Navy-blue eyes? No. Possibly dark green... \n\nRachel didn't speak, though she was screaming inside, her heart beating a frantic staccato through her chest. This time, for certain, everyone was staring. They were probably wondering what horrible thing she had done to rouse such a wrath in a man. The staff had come out to confront Marcus, and the scene was just getting uglier. She didn't catch much of what Marcus was yelling. Her mind switched off the moment he called her a 'slut'. \n\n\"Do you have any idea who I am?\" Marcus bellowed at the manager, waving a fork. \"Do you have any-?\" Then his attention was back on Rachel, and he seized a coffee from the next table to throw in her face. \n\nSqueezing her eyes shut in anticipation, nothing happened. Rachel dared open one eye, and saw Marcus on the ground, stiff with pain. A man she didn't know was standing on him, holding Marcus' arm twisted at a strange angle. \n\n\"Please...\" the manager pleaded, gesturing to Marcus. \"The violence isn't necessary...\" \n\n\"I believe it is,\" the man coolly replied, jerking Marcus' wrist and making him yelp. \"He was about to pour coffee on this young lady. And he's armed, with a dangerous utensil.\" Then he grinned at Rachel, and winked. \n\nStunned, Rachel stared back in a daze and wondered if they'd met before. It didn't seem likely, though he was vaguely familiar. She would certainly remember that smile. \n\nThe man briskly released Marcus, who rolled about, grunting in pain before unsteadily getting to his feet, covered in coffee. \n\n\"Ugh.\" He shook his head and his gaze drunkenly wandered about until he registered Ray. His eyes narrowed accusingly. \n\n\"You!\" he spat, and Ray tilted his head warningly, his hazel eyes fierce. \"You fucking dared, after I-!!\" \n\nRay's hand jabbed out at lightning speed, and again Marcus went down, choking. \n\n\"He has a fork in his hand. I feared for my life,\" Ray explained unconvincingly to the horrified staff. \n\nBending to collect Rachel's scattered belongings, Ray kept them gathered in one arm and used his other to guide Rachel to her feet. Beginning to lead her off, he paused and wrangled a hand down his pocket for his wallet. \"Is her bill paid?\" \n\n\"D-Don't worry about it,\" the manager croaked, waving them off. \n\n\"Thanks,\" Ray replied, striding off with Rachel in tow. \n\nMind in a blur, Rachel barely understood what was happening, but she was hugely relieved to be away from the scene. Away from Marcus. \n\nUnbeknownst to Rachel, Ray was quietly panicking. He didn't know what the fuck he was doing. A rational voice screamed in his mind to fall back since he'd stepped from his car. Though if he was honest with himself, he'd admit that taking down Marcus was fun. But his favourite part was winking at Rachel as she stared back, bewildered. \n\nIt was the second time their gazes met. And just like the first instance, Ray's heart pleasantly flipped. The realisation that came with it was very unsettling - he was having a serious reaction to Rachel, of all girls. Ray's bored amusement had evolved to a level of care that could only be a huge problem. Mulling over what just happened, he felt substantial anger toward the caf\u00e9 staff and surrounding guests. If someone half-decent had properly dealt with Marcus, he wouldn't have needed to intervene. \n\nThe night before, he'd picked up a stunner and fucked her brains out till morning. The girl he charmed into bed was definitely sexier than Rachel, and yet Ray felt unsated. With Rachel standing close to him, he keenly felt the difference. It was raw chemistry, and revoltingly unfair. \n\n\"Are you alright?\" Ray asked coldly. He felt resentful, as though she'd purposely encouraged an interest in her and begged for his help. \n\n\"Yes, t-thank you,\" Rachel muttered, not meeting his eyes as he handed her belongings over. \n\n\"Good. I have a plane to catch. Bye.\" \n\nBlinking rapidly, Rachel watched him stride off without a backward glance. It was weird. When he was manhandling Marcus, he was completely at ease. It was almost like he was flirting with her, which was impossible in such a moment. But now, the transformation between his friendly intervention and icy farewell was very noticeable. \n\nPerhaps she'd offended him somehow. It didn't matter. She was hugely grateful to be extracted from that situation. Nervously glancing around, Rachel forgot about the Good Samaritan as she wished Ben was at her side. He'd know how to comfort her. Feeling traumatised, afraid and alone, she couldn't wait to have a good cry in his bed. \n\nFeeling as though his car was ten miles away, Ray was already plotting his escape. He couldn't exactly fly to the other side of the world without confirmation he wouldn't have to return. But he could take a very long drive to a house he kept in the sticks. \n\nA large, family-friendly house with a steel-locked basement that had come in handy more than once. Reflecting on his evolving feelings, Ray considered making the drive. Then he thought back to Rachel. It seemed a bit excessive to make that trip over a girl, of all things. A mediocre girl, like Rachel. When she looked up at him, her eyes seemed hazel, like his. But with blue tones... \n\n\"Fucking hell!\" He snarled, savagely slamming his car door closed. \n\nBlowing out a deep breath, Ray decided he would make the journey. And he would not let his thoughts dwell on an ordinary girl who was somehow bewitching him with her bashful demeanour. With pretty eyes of a colour he couldn't be sure of, and mildly intoxicating perfume warmly caressing her soft skin. And that perfectly shaped, pink mouth he could probably kiss for hours... \n\nNo, he wasn't going to think of her at all. \n\n****** \n\nWith his arms full of groceries, Ben balanced his phone against his ear as he unlocked the front door and carefully edged inside. \n\n\"Hello?\" he answered, and sighed impatiently at the caller. \"Yeah, yeah. I have a girlfriend. Tell everyone to get over it, or there'll be trouble.\" \n\nChuckling at the caller's retort, Ben lowered the shopping to the floor as the call ended. Pocketing his phone, he stretched his aching limbs and glanced around. \n\n\"Baby raaabbit?\" he called in a sing-song voice. \"Where are you?\" \n\nForgetting the food, he wandered through the living area and up the stairs. Reaching the bedroom, he spotted the small lump of Rachel curled up under the blanket, and grinned. \n\n\"Oho!\" he said softly, fumbling with his pants. But he paused when Rachel sniffed, and he crawled onto the bed to tightly spoon her. \n\n\"Hey. What is it?\" he asked, pulling the blanket back and lightly brushing hair from her face. His fingertips felt the wet on her cheek. \"What the-?\" \n\nRachel tried to burrow deeper into the bed, but Ben briskly turned her over in a no-nonsense manner. \"Rae, what happened?\" \n\n\"Nothing,\" she mumbled, plucking at the front of his shirt as his eyes narrowed suspiciously. \n\n\"Tell me,\" he demanded. \"You know I won't stop until I get an answer.\" \n\n\"Marcus confronted me,\" she sniffled, wiping away fresh tears. \"In public!\" \n\n\"I'd be angrier if it was in private,\" Ben darkly answered, though he wasn't sure he could possibly be any angrier. \"Tell me what happened.\" \n\n\"H-He was shouting, and some guy stepped in before he could do anything...\" \n\nBen drew a deep breath and edged off the bed. Rachel looked up and saw his frightening expression. \n\n\"Wait! Ben, don't go!\" Rachel implored, reaching for him. \"I didn't want to tell you because I know you'll do something silly.\" \n\n\"Silly?\" he said grimly, his fingers itching to commit violence. \n\n\"Ben, please?\" Rachel begged, her eyes beseeching. \n\nShe gazed up at him with tearful puppy eyes, her long hair cutely tousled about her face. Ben loved sexy bed hair. She was wearing his shirt and it caught on her hip so he could see she had nothing else on. Just the way he liked. Ben smiled thinly, deciding there was one thing to be gained from her pleading. \n\n\"Tell me the truth. Did he lay a finger on you?\" \n\nRachel quickly shook her head. \n\n\"Alright,\" Ben said gruffly, his hands still instinctively clenching and unclenching. \"I won't go after him, if you promise to stay with me tonight.\" \n\nRachel looked confused as he tentatively sat beside her and pulled her into a hug. \n\n\"Since you've rocked my world, I kinda forgot I had a boys' night scheduled,\" he murmured against her temple. \"But if you're not up to it, I'm fine with cancelling.\" He leaned back to watch her face carefully. \n\n\"Oh, no!\" Rachel protested, pulling away. \"It's fine! I'll just go home!\" \n\n\"No, you won't,\" Ben growled, seizing her ankle before she was out of reach. With an evil grin, he flicked the arch of her foot with his thumb. Rachel squeaked and tried to get free, but his hold was firm. \n\n\"But...But the whole point of a boys' night is, well, boys only,\" she argued desperately, fearfully watching his hand by her foot. Ben smiled sneakily, and he threateningly wriggled his fingers. \n\n\"That's not a set-in-stone rule,\" he said serenely, though his eyes gleamed with wicked intent. \"The lady of the house is allowed to be present. Come on, Rae. Keep me company tonight, and keep me out of jail. Don't make me go after Marcus. I have cooking to do.\" \n\n\"That's blackmail!\" she protested, alternating between staring at him indignantly, and casting terrified glances to his thumb a hairsbreadth from her foot. \n\n\"Yes, for a good cause,\" Ben agreed, pulling her back into his arms. He kissed her temple, and spoke lowly against her ear. \"And later, you're going to give me every detail about what happened today.\" \n\n\"That's not fair!\" \n\n\"If you don't, it'll make me think it's a lot worse than it probably is,\" he said gruffly. \"And I have a vivid imagination.\" \n\nPouting, Rachel conceded he was right. \"Fine,\" she sighed. \"Can I hide up here tonight?\" \n\n\"No,\" he chuckled. \"I want them to meet you. And I want you by my side. Or on my knee,\" he teased. \n\nRachel blushed a fiery red at the ridiculous image of straddling Ben in front of a group of men. Ben kissed all over her face, collecting her tears. \n\n\"Come on. Please?\" he smiled against her smooth cheek. \"I've known these guys for years. This is important to me.\" \n\n\"B-But...\" \n\n\"Don't worry, I won't leave you alone with any of them. I'd trust them with my life, but not with you.\" \n\n\"Oh.\" \n\n\"Uh huh,\" he grinned. Rachel giggled, pushing against his wide chest. \n\n\"What if they don't like me?\" she sighed, feeling weak as Ben's hand sneaked up the shirt to cup her breast. \n\n\"Then they're no longer friends. I'm more scared they'll like you too much,\" he murmured, his thumb drawing slow, tantalising circles around her nipple. \n\n\"Huh?\" Rachel dizzily replied, feeling her pussy begin to ache in response to his attention on her breast. \n\n\"I fucking love you dressing skimpy in my clothes,\" Ben breathed, his other hand slipping beneath the shirt hanging loosely about her delicious body. \n\n\"I like wearing this,\" she said shyly, and he kissed her cheek while his hands toyed with her breasts. \n\n\"Just don't go overboard with my suits, that could get weird. It'd still fuck you, though,\" he chuckled and she playfully slapped his shoulder. \n\nRachel's eyes were alight with happy excitement. After such a horrible morning, Ben was already making everything better. In her opinion, it takes time to fall in love. Her heart told her she was falling for Ben, but her mind overrode the emotions with a rational awareness that it wasn't possible. That her new love affair could end in a sudden, crushing heartbreak she would never recover from. \n\nBen eased her back and followed, staring into her eyes as he supported himself above her on his forearms. \n\n\"Seriously, I'm not going to forget the Marcus thing. Do you want to tell me now, or later?\" \n\n\"Later!\" Rachel implored, and Ben eyed her for a suspicious moment before backing off the bed. \n\n\"I won't forget,\" he warned, and he meant it. Though he didn't want to immediately pressure her, there was no way he would sleep that night without knowing what happened. \n\nRachel submissively nodded, and Ben's expression softened before he left the bed to undress. \n\n\"Look at me, little perv,\" he teased, noticing her gaze quickly shift when he dropped his pants. \"I fucking love it.\" \n\n\"I-It's different when you're looking back,\" she objected, her cheeks glowing. \n\nThe bashful colour on her face made Ben forget what he was talking about. Tugging his shirt off, he climbed into bed and pulled his bed shirt up and over Rachel's head. \n\n\"Naked, the way you should be,\" he said thickly, diverted by her firm, round breasts begging for attention. \n\nYou belong to me. \n\n\"Huh?\" Rachel said dimly. Distracted, she idly ran a hand through his dark hair as he cupped one breast and began to suck the other. \n\nBen froze with her flesh in his mouth, realising he'd spoken aloud. It sounded quite arbitrary, but he meant it. Not that it mattered - he wasn't ashamed of his feelings. \n\n\"Rachel, you're mine.\" \n\n\"W-Well...\" she said hesitantly, as he lifted his head to hold her stare. \n\n\"Say it,\" he demanded, watching her response. \n\n\"I don't know,\" she breathed, overwhelmed by his intensity. How much would it hurt if she accepted, and he took it back later? \n\n\"Rachel, say you belong to me. That you'll be mine. I need to hear it from you, I don't know why,\" he said seriously. \n\nThough Rachel gaped at him, Ben didn't see rejection in her eyes. But there was an abundance of doubt. The edges of his mouth curled up in a smile as he moved over her. One hand guided her chin to meet his kiss. When she did, he seized her hips and rolled onto his back so she straddled him. \n\n\"Don't stop kissing me,\" he ordered, and she eagerly nodded against his lips. One hand stroked up her waist, over her breasts to cup her cheek. The other moved to the apex of her spread thighs. \n\nRachel gasped into his mouth as he teased her pussy with his thumb and pressed it inside her. Ben spoke between kisses, an agenda clear in his mind. \n\n\"You like that?\" he said thickly, working his thumb in and out, ensuring he stroked her clit every time. Being intimate with her felt so natural. Ben felt like he knew the intricacies of Rachel's mind and body so well. \n\n\"Oh, yes!\" Rachel panted, moving against his hand whilst kissing him. \n\n\"You belong to me, say it.\" \n\n\"I...I...\" \n\n\"Do you want me to stop?\" \n\n\"No!\" \n\n\"Then say it. Come on, gorgeous.\" Ben's mouth teased her lips, their tongues entwined with passionate urgency. \n\n\"I-I'm...I belong to you!\" she gasped in a rush, moving faster on his thumb. \n\n\"Good girl. Grab a condom from the bedside.\" \n\nRachel desperately found one. \n\n\"Do you know how to put it on?\" he asked, smiling affectionately as she uncertainly sat back and shook her head. \"I'll help you out, just this once.\" \n\nRachel's cheeks were red as Ben neatly tore the packet open with his teeth and applied it to his straining erection. \n\n\"Now, ride me. And talk.\" \n\n\"Wha-? Talk?\" Rachel's eyes were impossibly wide, and Ben ached to fuck her. \n\n\"Come on.\" Ben stoked his cock encouragingly. \n\nLooking both aroused and nervous, she lowered onto him. Closing her eyes, Rachel's luscious mouth fell ajar as he stretched her to perfect fullness. \n\n\"You like that?\" Ben panted, feeling his control slipping as she dizzily nodded. \"Now, fuck me.\" \n\n\"Oh,\" she breathed, preoccupied with him tightly embedded inside her. \n\n\"Rae?\" \n\n\"Yeah...?\" she dreamily answered. It felt so good. Ben's hands stroked up her waist and circled her breasts. He tweaked her nipples and she trembled. \n\n\"Say you're mine.\" \n\n\"I'm yours...\" \n\n\"Yes!\" Ben grunted, seizing her hip to thrust at a faster pace, one hand moving between her breasts. \"You're my girl, right?\" \n\n\"Yes, I'm your girl.\" Rachel's eyes were still closed with rapture. \n\nBen was struggling to think beyond what they were doing. Hearing those words from her mouth just drove him crazy, created a swelling happiness inside him that was overwhelming. It was like the entire sexual encounter was a long, drawn out orgasm.  \n\n\"Oh, God. Say it!\" he groaned. \"Tell me.\" \n\n\"I'm your girl,\" Rachel moaned, forgetting her insecurities in the act of sex. \"I belong to you, Ben. I'm yours...I'm...\" Her pretty face strained as a rush of pleasure unexpectedly channelled through her body. \n\n\"I'm going to...I-I'm coming!\" she whimpered, fucking harder, her breasts firmly jiggling as she leaned over Ben to grip the headboard. \n\n\"Fuck. Oh, fuck!\" Ben gasped, his eyes wide at the delectable flesh in his face. ",
        "\"Ben!\" Rachel cried out, arching against him, feeling his thick length exquisitely stiffen inside her. \n\nAs they moved together in unison, Ben's wet mouth caressed her sensitive breasts, his teeth gently pulling the delicate flesh of her nipples. Finally, Rachel released the headboard and collapsed to his chest. Taking a moment to catch her breath, she detached herself and curled against Ben's side. They were both panting heavily, and Ben's hand moved through her hair to turn her face up so he could kiss her. \n\n\"That was fucking...\" Ben's head dropped back to the pillow, Rachel's long hair pleasantly tickled his chest. \"I have no words.\" \n\nRachel sighed deeply. \"What time are your friends coming?\" \n\n\"I can't remember.\" Ben shook his head, remembering the shopping he'd left in the hall. \"But I think we'll have to order pizza.\" \n\n******* \n\nRay's eyes fixed determinedly on the dusty, green car in front of him. The drive was terrible. No matter how he concentrated, little thoughts of Rachel still sneaked into his brain. After a while he stopped fighting it and began to toy with ideas, stupidly bargaining with himself. Like an ex-smoker who just wanted to inhale another smoker's fumes without touching a cigarette. Or an alcoholic who insisted a light beer at the pub would be fine; they'd resist the hard liquor. \n\nRay pondered going back to watch Rachel some more. He had to be overreacting. Ray reasoned he must just be really bored. Extremely bored. Suffering a boredom so strong that seducing a beautiful woman and fucking her stupid didn't appease it. \n\nOr maybe... \n\nMaybe if he just fucked Rachel once, then he could forget about her. Or maybe if he stole her for a few hours... or a night. Then he could really get her out of his system, and walk away like it never happened. He could be masked, and she would probably be too embarrassed to report it. \n\nRay frowned at the car in front, feeling quite irritable about his situation. He'd never abducted a woman for sex, he'd never had to. And he'd never been remotely tempted to rape a captive. Business and pleasure were strictly separate. So, what was this? \n\nRachel would probably be pathetic between the sheets. Except for the way she looked at him. And her great tits, they would definitely feel good against his bare chest. And her mouth was quite beautiful, if her pussy was the same... \n\n\"Stop!\" Ray snarled, wanting to punch something. He angrily pulled to the side of the freeway, knowing what he had to do. \n\n\"Ok, libido. You win,\" he muttered, reaching into his pants. \n\nThe passing traffic was a shooting blur of colour. Cars passed so quickly that none would know what he was doing. Ray sighed as his hand filled with his swelling cock. He relented to his mind, and let himself imagine Rachel. \n\nHe thought about her features, her 'girl-next-door' prettiness. She had long legs that would look spectacular in white lace stockings. Her skin would be smooth and creamy under his hands. He would chip away at her nervousness, kiss her until she felt giddy. Her sweet face would be alluringly framed by long waves of glossy auburn, slightly tousled by his hand continuously running through it. \n\nHe would ease her onto her belly and nudge her thighs apart to admire her pussy. When he was satisfied, he would ask if she was ready for him. She would whisper 'yes', and he would squeeze a taut buttock at the same moment he'd slowly penetrate her. She would gasp, moan and arch back for more. He would watch his thick shaft sink into her soft, tasty wet folds. \n\nRay groaned, making a big mess in his pants in a climax that felt better than any of the times he came with Tasha. Finally ready to resume his journey, Ray started the engine, wondering what Rachel was like after sex, and if she would let him spoon her. \n\n\"THIS IS BULLSHIT!\" he shouted, slamming his hand to the steering wheel. He had just powerfully orgasmed, and he was still thinking about her. \n\nRay was grateful for the distraction when his phone chimed. It was the message he wanted. \n\n'All good. Check your account.' \n\nRay logged into his banking and wryly smiled at the boost in his balance. It was official - he was no longer stranded. He was free to leave; to secure a new gig or take some time out. \n\nRay flicked the front mirror down to see his reflection. He thought long and hard, staring into his own troubled eyes. Then he resolutely flicked the mirror back, his jaw tight with determination. He wasn't going anywhere."
    ],
    "authorname": "Bellie444",
    "tags": [
        "dominant",
        "redhead",
        "romance",
        "shy girl",
        "stalked",
        "stalker",
        "non-con",
        "noncon"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/voyeur-ch-05"
}
{
    "title": "Smitten Ch. 05",
    "pages": [
        "Snak heard it first. I was still three quarters asleep when she leaned over me and put her little hand over my mouth. With her other hand, she raised a finger to her lips.\n\nI couldn't hear a thing. I groggily became aware that it was past dawn, even though the morning sun had yet to penetrate under the trees.\n\nI gently lifted Snak's hand off my face. 'What?' I mouthed, without making a sound. She responded by moving her fingers in a walking motion, then raising a single digit. Finally, she pointed in the direction of the beach.\n\nVery, very carefully, I rolled over and rose into a crouch. I couldn't see anyone; there were too many trees in the way. Snak signalled for me to wait, and silently moved forward.\n\nShe was only ten yards or so away when I saw her drop into her own crouch. A moment later, though, she stood up, and moved closer to the edge of the tree line. Then she turned, with a buck-toothed grin, and waved me forward.\n\nShe waited for me. There was a single person on the beach, with their back to us. They were standing close by the bodies of Ushug and Slagip. It was a female - and then the morning sunlight illuminated her. There was no mistaking that rhubarb colour.\n\nBefore I could call out to her, Shaghar shouted out my name.\n\n- \"SMIT!\" She had her hands cupped around her mouth, shouting in the direction of the wreck. \"SNAK!\"\n\n- \"Back here.\"\n\nShaghar whirled about at the sound of my voice. I will never forget the look on her face: shock, followed by amazement - which gave way to sheer relief. She stumbled a couple of steps towards us. Snak and I moved out of the cover of the trees to meet her.\n\nSnak wasn't just clever; she was also wise beyond her years - she slowed her pace just enough to let me reach Shaghar first.\n\nI wrapped my arms around her, and lifted her off her feet. She immediately sought my lips with hers.\n\n- \"You're safe.\" I got out, when she finally let me breathe.\n\n- \"I was so afraid.\" she said. \"Afraid you were dead - and Snak, too!\" Shaghar made me put her down so that she could embrace Snak.\n\n- \"We hid on the ship.\" said Snak. \"Kurbag could not reach us.\"\n\n- \"Oh, I am so glad!\" said Shaghar, and she hugged my little assistant even more tightly. Then she released her and stood.\n\n- \"Ghorza found you? Is Ditgurat alright?\" I asked.\n\n- \"Perhaps we should get off the beach.\" she suggested.\n\nUnder cover of the trees, we moved to the spot where Snak and I had lain concealed. Shaghar saw the rope - and the knife. She looked at me.\n\n- \"I ... um -\"\n\n- \"Give it to Snak.\" she said. \"Here - this will be better for you.\" Shaghar pulled a long knife from her belt, and handed it to me, hilt first. It was a fighting knife, a foot long, a straight blade with a guard - so that I wouldn't shear my own fingers off if I tried to stab someone.\n\nShaghar had another weapon, a dagger, but I was still surprised that she made no fuss about arming me.\n\n\"Ghorza reached us, so we knew what had happened to Ushug and Slagip. She said that she had told you to swim, so we hoped that you would be safe.\"\n\n- \"Smit swimmed.\" said Snak. \"I only float.\"\n\n- \"Thank the Goddesses you did.\" said Shaghar.\n\nWe all heard it at the same time: the sharp snap of a dry twig.\n\nSomeone was nearby.\n\n- \"IDIOT!\" roared a voice. \"They ARE here! Find them! Find the Shara!\"\n\nThe voice was Kurbag's. All of a sudden, we heard half a dozen big bodies moving through the underbrush. They were close, and they seemed to be on three sides of us. Our only escape route was towards the beach.\n\nMy heart sank. Could we make to the water before they caught us? Should I carry Snak, or trust her short legs? And did I have the strength to swim back to the wreck, towing both Snak and Shaghar?\n\nI was about to rise to my feet when Shaghar took hold of my hand. Her grip was firm, and she was clearly holding me in place. I looked at her, and saw that she was simultaneously holding Snak by the hand as well.\n\nShaghar squeezed my hand - twice - before releasing it, and raising her finger to her lips.\n\n- \"Sshhh ...\"\n\nThis was madness. We were barely concealed here. They were sure to find us.\n\nYet I stayed. I'm still not sure why I did. Snak was kneeling beside Shaghar, trusting her completely. Did I trust her? Or was it that I simply didn't believe that I could carry both of them down to the sea before we were slaughtered?\n\nShaghar whispered again, so softly that I couldn't catch most of what she was saying. What I did hear didn't sound like words - not in orcish, nor in the common tongue.\n\nThen she slowly released my hand, and began to move her fingers. She was slowly counting her fingers, or perhaps waving them, without moving her hands. Her digits were rippling, like tall grass in a strong wind.\n\nI wish I could tell you what she was doing. I had no idea.\n\nA large male orc ran by us, not three feet away. I was so startled that I nearly leapt up to run - but Shaghar calmly reached out and took hold of my hand again. Her eyes were closed, and her lips were still moving. She seemed so ... so unnaturally calm, even serene.\n\nMy panic subsided, and I remained kneeling beside her. After a short time, she released my hand, and again began to ripple her fingers.\n\nI won't lie; my heart was beating madly. I could hear Kurbag's crew running about, and another large male - or perhaps the same one - thundered by some six feet from us. It was almost impossible to believe that they hadn't seen us.\n\nAs difficult as it may be to credit, it seemed to me that they hadn't spotted us because Shaghar was protecting us.\n\nIt made no sense. But I couldn't come up with any other explanation. The orcs searching for us had been struck with a universal case of blindness, or stupidity - or both. Three of them gathered, a bare 10 yards away. I swear that one of them was looking directly at me.\n\n- \"They are gone.\" said one.\n\n- \"No. We would have heard them.\"\n\n- \"They must be here! We heard her calling out their names.\"\n\nThe only possible explanation was ... magic.\n\nI'm from Portoa. The Topaz Order have their headquarters there. We had prophets and elementalists, spiritualists and alchemists (well, proper mages tended to look down their noses at alchemists). Magic could enhance your body, your mind, or even extend your life (though that type of magic was illegal, as was death magic - necromancy).\n\nThere were schools of magic, established Mages and apprentices, and the wealthy could afford to pay for their services. Obviously, those services were well outside my family's price range. The ones we could afford were mostly charlatans, selling charms, or love philters, or curses upon your enemies - and there were scads of them all over Portoa.\n\nAll I knew about magic was that people with talent could manipulate the aether, which either floated in the air, or was contained in every living thing. No, I didn't understand it. But I do remember hearing that one could learn to cast spells, or, alternatively, they could be born with the ability.\n\nWas that what I was witnessing? All I know for certain is that three of Kurbag's confederates stood a short distance away, without seeing or smelling us. Shaghar wiggled her fingers and muttered to herself, while Snak trusted her completely and I broke out into a cold sweat.\n\nWe crouched there for so long that my foot fell asleep. Shaghar kept whispering, but she motioned to Snak and to me that we should lie down.\n\nIt was the strangest experience of my short life. I lay on the ground, next to my lover and my little friend, in plain sight of a group of orcs who were searching for us. To this day, I can't explain it.\n\nI dozed for a bit. It's a remarkable thing, but you cannot remain terrified for a long period of time. After a while, a certain fatalism creeps in: fine, you would say - kill me now, because I just can't run any more. Instead, though, I simply slept.\n\nIt was darker - just past dusk - when I awoke.\n\nShaghar was still mumbling, and twitching her fingers, but she appeared to be near the end of her strength. I glanced about us, and neither saw nor heard anything.\n\nI still didn't understand what she'd done, but I knew that she couldn't keep doing it much longer. We had to move.\n\nWhen I took her hand, and stilled her rippling fingers, Shaghar jerked as if I'd stabbed her with a needle.\n\n- \"Sshhh ...\" I whispered.\n\nShe was disoriented, for a moment.\n\n\"We have to move.\" I said. Snak was also awake, watching me with wide eyes.\n\nShaghar wasn't merely confused; she was exhausted. But I knew that we could not remain where we were. If Kurbag and company were still in the vicinity, we would be found in the morning. Darkness was our only friend, for the moment.\n\nI lifted Shaghar in my arms, and stood up.\n\nSnak led the way, and we moved off through the woods, as quietly as we could.\n\n***\n\nI'm not sure how far we went. Moving through the trees, in the dark, you quickly lose track of how much ground you've covered. I just wanted to get well away from the beach - and not directly towards the Blasted Tree.\n\nAfter a bit, Snak took the lead, blazing a trail for us, while I followed with Shaghar in my arms. She was shivering too often, whether it was from the cool of the night, or from exhaustion. Casting her magic for so long must have taken a great deal of energy.\n\nThere came a point when I had to put her down, to rest a while. Snak found a sheltered spot, and I lay Shaghar down. She was asleep in an instant. I lay down behind her, and had Snak lie directly in front of her. We both wrapped our arms around her, to share the heat of our bodies.\n\n***\n\nSnak woke first, but she didn't move. When I finally opened my eyes, I found her looking straight at me. Shaghar was no longer shivering. The sun was up. I decided to wake her - she would know better whether we should move again, or stay put and hide.\n\nShaghar was a bit groggy. \"Where - where are we?\"\n\n- \"Smit carried you.\" said Snak.\n\n- \"Away from the beach. South, and little to the east.\" I said.\n\n- \"You saved me.\" she said, very softly.\n\n- \"You saved us, yesterday. What ... what was that? Magic?\"\n\nShaghar turned her head, to look back at me. \"Of a sort. Can ... can we discuss it another time? But ... please do not speak of it to others. I promise that I will explain. The same holds for you, Snak.\"\n\n- \"I can keep a secret.\"\n\nI was immensely curious, but I could keep a secret, too.\n\n- \"What do we do now?\" I asked.\n\n- \"Find Ditgurat and the others.\"\n\n- \"She's safe?\" I asked. \"Who's with her?\"\n\n- \"Ghorza. Bula.\" Bula was Coopah's apprentice, who could handle an axe. \"Urzoth.\" A young male half-orc. \"Umog, of course.\"\n\n- \"Umog?\" I was slightly surprised. I hadn't seen her on the beach, but I would have thought that she'd be aligned with our enemies. \"She's not on their side?\"\n\n- \"No - why would you think that?\" said Shaghar. \"She is strong-willed, and too proud for her own good. But she would never serve Kurbag. And she wants you.\"\n\n- \"Oh.\"\n\n- \"She likes you, Smit.\" said Snak, like a tutor admonishing her slowest pupil. \"Umog likes no one except you.\"\n\nShe likes me? May the Gods protect anyone she doesn't like.\n\n- \"I will take us to Ditgurat.\" said Shaghar. \"But we must be careful.\"\n\nShaghar led the way. She move slowly, stopping frequently to look, to listen, and sometimes even to sniff the air. Snak followed, and I brought up the rear, my thoughts drifting of their own volition into strange channels.\n\nMy lover was a witch? Yet it had to be a secret? I had no idea if the orcs had prejudices against the use of magic. It was well-known that they scorned the high technology of Galtin's Port - did they feel the same about mages and magic?\n\nAnd Umog was on our side? That was almost as astonishing to me as the discovery that Shaghar could use magic.\n\nShaghar warned us to be even more careful - and to remain as quiet as possible - the nearer we came to the Blasted Tree. That was not our destination, but we had to stick to cover, and that meant getting close to the band's camp before we could go around it.\n\nShe avoided well-used paths, which meant that the going was slow. Just past midday, she called a halt so that we could rest.\n\n- \"Is it safe to talk?\" I whispered.\n\n- \"If you keep your voice down.\"\n\n- \"Can you tell me what's going on?\"\n\nShaghar did her best to explain.\n\n- \"Kurbag dare not face Lagakh; she would kill him. But while she is off with the scouting party, many of Ditgurat's best - and most loyal fighters - are away. Still, Kurbag was cautious: he struck at Slagip, Ushug, Ghorza, and you, first. That move partially failed. Ghorza escaped, and so did you.\"\n\n- \"Why would they care about me? I'm no fighter. If Kurbag was to win, wouldn't he just keep me as a slave? Make me work for him?\"\n\n- \"They fear you because they do not understand what you might mean for the Red Knees. And the males hate you because so many females prefer you. Coopah is too old. But you have already shown your potency. That makes them angry.\"\n\nWell, that was food for thought. There were far more females than males in the band, but I suppose for some males, that's never enough. You could have a hundred women for three men, and two of the males would be scheming to eliminate the third.\n\nI was having sex with females that they coveted - though, oddly enough, the males hadn't particularly coveted them before I arrived.\n\n- \"How much support does he have?\" I asked.\n\n- \"A dozen? Perhaps fifteen. No one is certain.\"\n\n- \"That's it? If the rest of the band support Ditgurat, why couldn't she simply put them down?\"\n\n- \"There are fighters, and there are warriors, Smit. Ghorza and I are fighters - but we could not stand against Kurbag, or Oag. With Lagakh and her party gone, and without Slagip and Ushug, Ditgurat can count on very few warriors.\"\n\nI knew what she meant. The vast majority of the Red Knees were fighters, in the sense that they were tough, and could handle a weapon. But the difference between a warrior and a fighter was enormous. I myself might have been able to hold my own against Shaghar or Ghorza. But Umog or Kurbag could have taken my head without breaking a sweat.\n\nThere was something else at work here. The Red Knees would not rush to fight for Ditgurat - not against a challenger from inside the band.\n\nThe orcs had the tradition of the Mak-gora - a challenge for the leadership. They would stand aside, and watch two claimants fight it out. In this case, they would remain neutral as two groups fought for dominance.\n\nIf Ditgurat won, they would have no claim on her gratitude or her generosity. The same held true if Kurbag emerged victorious - but in either case, at least they would remain alive. They would simply keep their heads down, and go back to work for the eventual winner.\n\nShaghar still wasn't ready to tell me anything about her magic. Perhaps it was because Snak was there. In any case, she got us moving again.\n\nI was completely lost. I'd never been anywhere but the Blasted Tree, other than the beach or the stream. But Shaghar knew her way; she led us unerringly through the trees, and across rough ground.\n\nIt was a bit uncomfortable, being in the open. But that, it turned out, was the genius of Ditgurat's hiding place. She'd used it before, when her sister Yotul (Shaghar's mother) had been killed.\n\nWe were seen, and challenged by a low growl. Shaghar made a hand gesture - a signal of some kind (perhaps to indicate that we hadn't been followed). I couldn't see anyone, or anything - where could they possibly conceal themselves, on this open stretch of rock-strewn plain?\n\nIt was only when Shaghar advanced again that I saw the hiding-place. It was a fold in the ground, a crevice some three meters deep, and perhaps two meters wide. It was much longer than I would have expected - almost twenty meters. The crevice was completely hidden from sight until you were standing almost directly over it.\n\nBut anyone watching from inside could see people approaching; if necessary, they could escape out the other end.\n\nDitgurat was there. She embraced each of us in turn.\n\nI got to Coopah, next, and embraced him as well. Then I felt a hand like a steel claw on my shoulder.\n\nUmog.\n\n- \"I am glad you are safe.\" she said. It was the nicest thing she'd ever said to me. Maybe Snak was right.\n\n- \"I'm glad you're safe.\" I said. What the heck: I opened my arms, and reached out to hug her. She let me - and then curled one arm around me, and gave me a squeeze.\n\nIt was crowded in the crevice. Coopah's apprentice, Bula was there. I saw Urzoth, the young male, and another male, not much older than Snak. There were two adolescent females as well. All were half-orcs.\n\n\"Where's Ghorza?\" I asked.\n\n- \"Gone to find Lagakh and the others.\" said Ditgurat. \"Come - sit here and tell me what happened on the beach.\"\n\nI told them of Oag's treachery, of Slagip's death and Ushug's revenge. Snak took over the narrative, describing how she'd floated while I towed her out to the wreck. Only Ditgurat and Coopah, of those present, had seen the wreck. Snak told them about Kurbag's attempts to lure us back to dry land.\n\n- \"We only came ashore well after they'd gone. We had to - it was too cold in the water. That's where Shaghar found us. She saved our lives.\"\n\n- \"Oh?\" said Ditgurat. She glanced at my rhubarb-haired lover. Shaghar shook her head, but I saw her surreptitiously waggle her fingers - and so did Ditgurat.\n\n\"Ah.\" said the chieftain. Evidently, she knew what her niece was capable of.\n\nThey had food to share with us, blankets and a few furs as well. Ditgurat had had to run before; this time she'd been better prepared.\n\nThere was no space to lie down in the crevice, but we could sit, and lean against one another. Shaghar stayed close to Ditgurat; obviously, they had things to discuss. I didn't need the chieftain's warning glance to tell me to go elsewhere.\n\nI went and sat down between Umog and Coopah. Snak then squeezed in between Coopah and me.\n\n- \"She'll get us out of this.\" said the older man, over Snak's head. \"Ditgurat has done it before. And if anyone can find Lagakh quickly, it's Ghorza.\"\n\n- \"There'll be a fight, though.\"\n\n- \"Oh, there will be blood. Mostly theirs.\" I couldn't tell if he was really that confident, or if he was just trying to raise my spirits.\n\nThe prospect of violence terrified me. I was a blacksmith, not a fighter. But I was more worried about those who were already near and dear to me. Ushug was gone - and our child with her. I didn't want any harm to come to Shaghar, or Ditgurat, or Ghorza. Lagakh, too, however much I believed that she could look after herself. And now Umog.\n\nI hadn't had many conversations with Umog. I didn't really know how to talk to her at all. But Snak's revelation, and Umog's reaction to my safe return seemed to suggest that she did care for me - to some extent, and in her own way, of course.\n\nI turned to her. Umog's pupils were narrow slits, in the gathering darkness.\n\n- \"You don't hate me, then?\" I said - a classic opening line.\n\n- \"I never did.\" she replied. \"You make me very angry, sometimes ... that is not the same.\"\n\n- \"I hated you.\" I said, all in the interest of honesty and openness.\n\n- \"I know.\"\n\nShe didn't seem particularly angry or upset now.\n\n- \"I don't hate you now.\" I said.\n\n- \"No?\" There it was - that challenge.\n\n- \"You stood by Ditgurat. That shows loyalty, and honour. You're carrying our child. And ... you seemed genuinely glad to see me alive.\"\n\n- \"I am.\" said Umog. Then she lowered her head. \"I wanted you for myself. Me alone. I knew it was not-honour ... but I wanted it.\"",
        "That took a great deal of courage to admit - especially to someone she'd tried to dominate the way she had me. Umog was considerably more complicated than I'd ever thought. And this sort of honesty had to be encouraged.\n\nI leaned over and kissed her on the cheek. I did it very carefully - if she suddenly raised her head, I didn't want to be spitted on her sharp tusk.\n\nUmog slowly turned her head, to look me in the eye. I couldn't read her expression entirely, but there was surprise, confusion, sorrow ... and several other things. Her lips parted, and a single sound slipped out.\n\n- \"Eh ...?\"\n\n- \"I don't hate you anymore, Umog. In fact, I think that I like you. Quite a bit.\"\n\nShe had no idea what to make of that. But she eventually leaned over some more, so that she could rest her head on my shoulder. We both fell asleep that way.\n\n***\n\nShaghar didn't avoid me. When I woke in the morning with a sore shoulder (because Umog had been leaning on it all night - I had the imprint of her tusk on my upper arm), I saw Shaghar's eyes already fixed on me.\n\nShe led me to the very end of the crevice. She sat down there, and I sat down beside her.\n\n- \"Only Ditgurat and Lagakh know.\" she said. \"And now you. And Snak.\"\n\n- \"That you can do magic? Cast spells?\"\n\n- \"This is serious, Smit.\" She placed her hand on my arm for emphasis. \"It must remain a secret.\"\n\n- \"I understand. I would never betray you, Shaghar.\"\n\n- \"You must never speak of it.\"\n\n- \"I won't. Is ... is there some stigma? Some prejudice against magic, among your people?\"\n\n- \"Quite the opposite.\" said Shaghar. \"They would make me a shaman, and look to me for advice, and judgment. Do I look like a shaman to you?\"\n\nI didn't know what to say.\n\n- \"You look like Shaghar. Beautiful, strong, clever ...\"\n\nShe shook her head. \"If the band thought that I was a shaman, they would bring me their problems, their questions. I cannot provide answers! I barely know what to do with my own life - how can I give others direction? And what if I gave bad advice?\"\n\n- \"I understand.\" I hugged her to me, which was probably much better than trying to think of the correct thing to say.\n\n- \"My mother taught me.\" she said, softly.\n\nDitgurat's sister, Yotul, was what the Topaz Order in Portoa called 'a natural talent'. She could sense - or even see - the aether. She somehow instinctively understood how to use it to manipulate her own body. Yotul increased her strength and stamina. She also learned to replenish her own power. Rest was one way - but sex also helped.\n\nDitgurat was amazed when her sister began to surpass her in speed, strength and stamina. Yotul confessed her secret. Ditgurat insisted that Yotul teach anyone with the natural ability to sense the aether.\n\nIn the end, there were only two children in the whole band with any aptitude: Shaghar, and Lagakh.\n\n- \"Lagakh?\" I was shocked.\n\n- \"Sshh!\" Shaghar gave me the evil eye.\n\n- \"I'm sorry.\"\n\n- \"My mother taught us to see the aether. To feel it. And then how to ... move it. That is the best way to describe it, but even that doesn't quite fit.\"\n\n- \"What did you do, to hide us? Can you tell me that?\"\n\n- \"I ... I can make you see things. Sometimes, things that are not there.\"\n\n- \"Illusions?\"\n\n- \"Yes. I can also see when Lagakh has manipulated the aether. I can see what she has done.\"\n\n- \"That's amazing.\" I said. \"I can hardly imagine what it's like. And I'm not sure that I'd believe it at all, if I hadn't been there.\"\n\n***\n\nWe stayed in that crevice for two days.\n\nShaghar and Urzoth, the male, went out the far end, to forage for food. They were gone for hours. There was nothing for me to do but worry.\n\n- \"She'll be fine.\" said Coopah. \"She knows her way around. And she's certainly safer than you or I would be.\"\n\nI knew that, but it didn't make the waiting any easier.\n\nThey came back in the dark, just before dawn. They brought apples, and wild carrots - not the most popular fare, for a band of half-orcs, but it was enough to sustain us for a day.\n\n- \"You look exhausted.\" said Shaghar.\n\n- \"I couldn't sleep.\" I didn't want to tell her that I'd been imagining all of the worst possible things that might have happened to her. She could have stepped in a hole, and broken her ankle. Gored by an animal. Captured by Kurbag ...\n\n\"I was worried.\" I admitted.\n\n- \"Then come sleep beside me. I am very tired as well.\"\n\nI woke less refreshed than I might have, because Shaghar had also persisted in using me as a pillow. I'd completely lost the feeling in my arm, and it was quite painful to get it back.\n\nWhile we slept, Umog and Bula had gone out on another foraging expedition. Now I found myself worrying again - and then I was surprised that I was worrying at all.\n\nI'd hated Umog. From the very first day after the shipwreck, she was the one member of the band I would have preferred to avoid. She'd hurt me, physically, and tried to intimidate and dominate me.\n\nI can't say that I didn't enjoy sex with her at all - but I certainly enjoyed it far less than I did with any of the other females who lay with me.\n\nBut then she accepted my conditions for bathing. Umog changed, just a little - for the better. And then she became pregnant.\n\nI was surprised to discover that she was more loyal to Ditgurat than I'd expected. Umog would spit, complain, and challenge, but in a crisis, she could be counted on. I also have to admit that Snak's comment had quite an impact on me.\n\nIf Umog truly did like me, she had a unique way of showing it. Yet, when we finally reached the crevice, she'd reached out to touch me. She had missed me. She'd been worried about me.\n\nNow I was worried about her.\n\nI was fairly certain that she could handle herself against any member of the band - even Kurbag himself. But what if she and Bula ran into all 12 of them?\n\nI sat down in the far end of the crevice, so that I would be the first to see them when they returned. Shaghar only smiled indulgently, well aware of what I was doing - and why. Snak brought me another apple, and watched with me for a while.\n\n- \"Do you like her, too, Smit?\" said my buck-toothed companion.\n\nOut of the mouths of orclets.\n\n- \"I don't know, Snak. It's ... complicated.\"\n\n- \"Mmm ... is it because she cares about you?\"\n\n- \"You're very wise for your age.\" I said.\n\n- \"Does that mean you would worry about me, if I was gone?\"\n\n- \"I worry about you all the time. When we were hiding on the wreck? I was terrified. I don't want anything bad to happen to you.\"\n\nSnak grinned. \"You like me, then.\"\n\n- \"Of course I do. Why wouldn't I? You're strong, and brave, and clever ...\"\n\n- \"I like you too, Smit.\" she said. My little friend leaned back against the wall of the crevice, and smiled.\n\nShe sat with me in companionable silence for a time. Coopah came down to keep us company. Later in the day, both of them went to rejoin Ditgurat and the others.\n\nShaghar came to check on me.\n\n- \"Waiting for Umog?\"\n\n- \"Yes.\" I admitted. \"I'm not sure why, but I suppose that's what I'm doing.\"\n\nShaghar didn't say anything. She patted me on the shoulder, and left me to my vigil.\n\nThey returned just before dusk, Bula leading the way. She stopped some twenty meters away, so that I could recognize them, and let the others know that they were back.\n\nUmog saw me.\n\nShe and Bula entered the crevice, carrying more apples and quite a few gooseberries. They passed their finds to other members of the group - except for one fine apple, which Umog saved for me.\n\n- \"Thank you.\" I said.\n\n- \"You waited ... for us?\" she asked.\n\n- \"For you. I was ... worried.\"\n\nUmog just stared at me for a moment. But there was a look in her eyes that I'd never seen there before. Was it ... uncertainty?\n\nShe didn't know what to do - or what to say. I took the initiative, and slowly leaned forwards. We were just about the same height. I leaned just a little more, until our faces were only inches apart.\n\nNo, I didn't intend to kiss her. I never had. For one thing, Umog's tusks were sharp. For another, her breath was usually foul enough to make my eyes water. Tonight, though, she smelled of apples - she and Bula had obviously been gorging themselves as they gathered for the rest of us.\n\n- \"Lean forward, Umog - just a bit.\"\n\nShe hesitated for a moment, but then she did it. Our foreheads made contact. Our eyes were very close together. It was a surprisingly intimate moment - and I don't believe that there had been many of those in Umog's life to date.\n\n- \"Why?\" she whispered. \"Why you do this?\"\n\n- \"Do you like it?\"\n\nShe didn't answer. I wasn't surprised. Any such admission would make Umog feel vulnerable - weak. But she hadn't said no, either - because she did like it.\n\n\"You've changed how you treat me.\" I said. \"So I will, too. Is it alright if I show you some affection?\"\n\nThese were uncharted waters for Umog. In fact, she didn't understand everything I'd said. I only learned later that there is no orcish word for 'affection'. Nor do they have a word for 'love' - instead, they use the human or elvish words.\n\nStill, she caught the gist of what I meant - and she didn't know how to respond.\n\nSo I put my arms around her. Not in a sexual manner, exactly - it was intended as a gesture of comfort, of closeness.\n\nEven half-orcs like hugs.\n\nUmog understood what I was trying to tell her: I care about you, and I want to show you that I do. She responded by wrapping her powerful arms around me. Yes, she squeezed me a lot tighter than I would've liked, but having been pummelled and nearly strangled by her before, I could tell that she was making an effort to be gentle. Relatively gentle.\n\nAfter a time, by some unspoken agreement, we sat down side by side, resting our backs against the wall of the crevice.\n\nI had my arm around Umog, and hers was around me. She'd leaned closer, so that our heads were touching. There was no need to say anything. We'd had sex together - often very intense sex - but his was absolutely the most intimate we had ever been with each other.\n\nWe didn't talk; Umog was no conversationalist. It was nice, though, to sit together in silence as I thought about how our relationship was changing. I was actually thinking warm thoughts about her - which I would never have believed possible.\n\nI was idly stroking her flank, letting my hand run gently from her hip to her ribs. My arm was round her, so that was about all I could reach. I only meant it in a comforting, friendly way. But then I stroked a little higher, and my thumb made contact with the underside of her breast.\n\nUmog didn't flinch, or stir - but she definitely noticed. I stroked her again, careful not to reach so high again. Umog shifted slightly, to sit a little lower down. She also turned away from me just a little more.\n\nThat left the back of head and her coal-black hair resting against my shoulder. It also put her breast directly in the path of my stroking hand. The invitation couldn't have been clearer.\n\nUmog's breasts were extremely firm. I knew that already because I'd had my hands on them before, usually as I tried to keep her at arm's length while she rode me, trying to keep her from punching me in the ribs.\n\nBut now I caressed her, letting my fingertips run lightly across the surface of her breast. Any orc can grab a tit, or pinch a nipple. But I was willing to wager that Umog had never been fondled, or caressed by someone who cared about her. It's the intimacy, the closeness that makes the act pleasurable, I believe.\n\nEventually, though, I used the palm of my hand over her nipple, which was already partially engorged. It grew even stiffer as I toyed with it. Umog began breathing a little louder, and a little more rapidly.\n\nUmog moved her hand, so that it came to rest on my thigh. I knew the power of her fingers - none better. But she did not grab, or squeeze (or puncture my skin with her nails). She was making a tremendous effort to be gentle, to stroke my leg without causing me pain.\n\nThat deserved a reward. I raised my free hand to her nearer breast, and began caressing it, too. Umog made a sound I'd never heard from her before: she sighed.\n\nShe moved her hand, resting it over the growing stiffness in my loincloth. Again, she was extremely gentle with my tenderest parts. We were becoming much more aroused.\n\nI wasn't sure how far we could we go, in the cramped confines of the crevice, and with others so close by. But Umog had her own ideas on that subject.\n\nShe reached inside my loincloth, and pulled out my throbbing erection. Then she sat up, and turned, pivoting until she sat astride me, her knees on either side of my legs. Umog lifted her own clothing, and rubbed the head of my cock against her nether lips. Then she sat down, slowly, gradually impaling herself on me.\n\nTwice, she had to reverse direction, but eventually she sank down all the way, taking me to the root. She was incredibly hot, inside. And then Umog surprised me again.\n\nShe sat still. She let me savour the feel of us joined together; perhaps that was what she was doing, as well. She put her arms around me, and held me close, which ended up pulling my face into her breasts.\n\nUmog didn't ride me; she squeezed me. Instead of a mad gallop to orgasm, she did her best to let us both enjoy the sensations. When she did begin to move, it was a slow, sensual movement of her hips. I knew what she was trying to do: Umog wasn't fucking me - she was making love to me.\n\nIt was astonishing.\n\nIt was also having an unforeseen effect on both of us. My mind might have had trouble grappling with what was happening, but Umog herself was experiencing new sensations, both physical and emotional.\n\nShe peaked atop me, suddenly and unexpectedly. Now she lost control, and squeezed me hard, with arms, legs, and vagina. I couldn't control myself, and erupted inside her.\n\n***\n\nWe weren't the first to wake in the morning. Others were up and about first, which meant that they saw us asleep, side by side, with our hands on each other. Half-orcs don't lack a sense of smell, either.\n\nDitgurat grinned at me, when I was awake enough to take in my surroundings. Shaghar had a smile for me as well, and a kiss on the cheek. As far as I could tell, in my groggy state, they seemed to approve.\n\nUmog was mildly embarrassed. She'd spent years building an image - the tough, cold-hearted warrior, brutal and violent. But what had happened had happened, and she didn't try to deny it. She just wasn't prepared to talk about it.\n\nWe spent another day in the crevice, trying to stay warm, and eating more apples.\n\nThat night, though, our fortunes changed.\n\nGhorza returned - with Lagakh and her scouting party. Just the sight of Lagakh filled me with confidence. There was something supremely indomitable about her.\n\nOgash was there, looking petulant as ever. Gurukk and Durz were males, both lean and lanky. They were nowhere as big as Oag, or even Ushug. But I came to see that they were quick, blessed with impressive foot and hand speed, as well as stamina. Both were warriors.\n\nLambug and Shelur were females. I'd only seen Lambug once before, and - amazingly - in all my time with the Red Knees, I'd never seen Shelur. Both spent the bulk of their time on the periphery of the band's territory, scouting and hunting.\n\nLambug was a female version of Gurukk and Durz, but Shelur surprised me. She had ash grey hair, the colour of my sleeping blanket at my family home in Portoa. Her ears were long and narrow, and stuck out almost horizontally from the sides of her head. She had a tiny nose, but extremely long (and sharp) tusks. She saw me looking, and smiled. There was considerable intelligence in her yellow eyes, unless I was mistaken.\n\nLagakh hugged me, obviously relieved to see me still alive. Then she picked up Snak and spun her about.\n\nOgash took the liberty of hugging me, too, though she spoiled the effect somewhat by licking my earlobe.\n\nShelur approached me next. Shy she was not.\n\n- \"This is the Osh-Smit?\" She had an intriguing, gravelly voice.\n\n- \"Aka'Magosh, Shelur.\" I said. A blessing on you and yours.\n\n- \"Aka'Magosh, Smit.\" she replied. \"You speak well.\"\n\n- \"Thank you. I try.\"\n\n- \"So I hear.\" she said.\n\nUh oh. Future trouble, unless I was mistaken. Well, trouble in the sense that she was indicating, with her eyes and her voice, that she was considering sex with me. It struck me as odd, even then, given that we were involved in a murderous fight for our very survival.\n\nThat said, I'd had fairly passionate sex with Umog only last night. Maybe half-orcs don't separate war and sex. Actually ... maybe humans don't, either.\n\nGhorza hung back a little. I was glad she did, because it gave us a semi-private moment while the others were still renewing acquaintances.\n\nShe was looking a little hesitant, a little shy. I ignored that, and took her in my arms, squeezing her tight.\n\n- \"You're safe.\" I breathed into her ear.\n\n- \"I am sorry.\" she said. \"I had to run - to leave you on the beach.\"\n\n- \"Of course you did! Ghorza: I would have done exactly the same, if the roles had been reversed. You saved Ditgurat. And Shaghar - not to mention Coopah and the others.\"\n\n- \"You are not ... angry?\"\n\n- \"No! They'd be dead if you hadn't been so quick. You spoiled Kurbag's plans - we wouldn't all be here if not for you.\"\n\nI hugged her again, holding her close. That seemed to help get the message across. She'd been feeling guilty for leaving me (and Snak) on the beach. She knew that it had been the right thing to do - she'd known that instantly - but now she finally seemed to accept that I understood it, too.\n\nThat night, I stayed close to Ghorza.\n\nIn the morning, I woke slowly. I was stiff, and sore, and slightly groggy again. Shelur the scout was on guard. She winked at me.\n\nFor a moment, I was somewhat disoriented. Then I remembered where I was: sleeping in a hole in the ground, along with an old man and a group of savage half-orcs.\n\nExcept that they weren't 'savage'. Five of them were my lovers. Even if it felt odd to consider Umog my lover, she was now much more of a friend than before. The biggest wonder, for me, wasn't that I could consider half-orcs my lover - it was how I could be so sure that I loved Shaghar, while at the same time I adored Ghorza (and it wasn't simply that I lusted after her trim little body).\n\nI missed Ushug. That, as much as anything else, spoke volumes. They were my folk now. My band. I would do whatever I could for Ditgurat and her people.\n\nThat opportunity came sooner than I'd expected.\n\nThat morning, after we'd finished the last of the apples and gooseberries, the chieftain called a council of war.\n\n- \"We are 18.\" said Ditgurat. \"Can we fight?\"\n\nI had to look around, and double-check her count. She'd been very generous: she was including Coopah, two young females and a young male, Snak ... and me. I was no fighter. I'm strong - especially in the upper body - but that's not at all the same thing.\n\nWe had Ditgurat and Lagakh. Umog. The three males: Urzoth, Gurukk, and Durz. Lambug and Shelur looked dangerous. I'd seen Bula chop down trees with Ushug, but was she a warrior? Then there was Shaghar, Ghorza, and ... Ogash.\n\nI didn't really know the quality or the fighting skill of Kurbag's adherents. But if they were all like Oag, then we couldn't possibly stand against them.\n\n- \"I will kill Kurbag.\" said Lagakh.\n\nI believed her. So did everyone else there.\n\n- \"Where do we meet them?\" asked Ditgurat.\n\nThere were several suggestions. Under the Blasted Tree. By the Bloody Rock (whatever and wherever that was). At the source of the stream. If the second two ideas were as foolish as the first, then we were probably doomed.",
        "Honour. A demonstration of their courage. A noble sacrifice.\n\nConsidering that mine was one of the lives they would be sacrificing, I wasn't so keen on any of these suggestions. For some reason, though, I kept my mouth shut for a time. Maybe the Goddesses had punished me enough; maybe Kelthala was finally lending me a little wisdom. I had just enough patience to let most of the others have their say.\n\n- \"May I speak?\" I asked.\n\nDitgurat gave me a look, but she didn't immediately dismiss me. \"You are one of us, Smit. You may speak.\"\n\nIs it any wonder that I wanted to fight for her?\n\n- \"Is it necessary to fight them in the open? In full view of the whole band?\" I asked.\n\n- \"It is more honourable.\" said the chieftain. \"The band would see us triumph.\"\n\n- \"Or die.\" I said. \"I'm sorry if that sounds pessimistic. Perhaps it's my human upbringing, but I would prefer if none of us died.\"\n\nLagakh smiled slightly at that. \"Surrender is not an option.\"\n\n- \"I know. I was there when they killed Slagip and Ushug.\"\n\nI let those words hang for a few moments. No one said anything.\n\n\"My point is this: why should we be concerned with honourable combat, when our opponents are treacherous murderers, who struck by surprise?\"\n\nI didn't expect an answer. But I was enormously relieved when my eyes met Shaghar's - she was nodding her head, encouraging me to go on.\n\n\"Our enemies are Ur'gora. Without honour. They deserve only to be eliminated. And if there is a way to do that without losing too many of the people I care about ... then that is what I suggest.\"\n\n- \"You have a plan?\" asked Lagakh.\n\n- \"Uhm ... no.\"\n\n***\n\nAs I've said, I'm no fighter. I've been in a few drunken brawls, though. Hit the other asshole hard, and if he doesn't fall down, run like hell. If he does fall down, kick him in the jewels, and then run like hell. Anyone who sticks around for seconds in a tavern brawl is asking to have a bottle broken over his head (or a cudgel, a stool, or a table ...).\n\nThe point is, I knew nothing of Shall'a Cloudbringer, the Goddess of War. Did she expect honour in war? The little I know of history suggests otherwise. Ditgurat and the others seemed bent on treating this fight like some kind of group duel, a multi-person challenge for the leadership. A team-Mak'gora.\n\nBut Kurbag and his gang had stooped to murder to gain an advantage. And I didn't want any more of my friends to die.\n\n- \"A stratagem.\" said Shaghar.\n\n- \"A trap?\" said Shelur. She had caught on quickly. You don't become the band's chief scout because you're stupid.\n\n- \"Ghorza saved us all,\" I said, \"by her quick reactions. She used her foot speed to reach you first, so that Kurbag couldn't murder you as well.\"\n\n- \"We are not all fast.\" said Umog.\n\n- \"No.\" I agreed. \"But we have intelligence, as well as speed. There is power here, and courage - but we can do better than meet them face to face, toe to toe.\"\n\nThe orcs had no expression for 'toe to toe'. It struck them as tremendously funny. I mean, picture a fight where the combatants have to touch toes. They all thought that I was lightening the mood by making a joke. Little Snak laughed hardest.\n\n- \"A trap.\" said Shelur. The wheels were definitely turning there.\n\nDitgurat wasn't about to ignore the advice of her best scout.\n\n- \"Explain.\" she said.\n\n- \"You don't chase a deer.\" said Shelur (I am paraphrasing, here. Shelur didn't speak the common tongue very well, so she spoke in orcish. I am translating and paraphrasing at the same time).\n\n\"You don't face a bear - and certainly not 'toe to toe'.\" she said, with a glance at me, and a quick smile. Most of her listeners grunted and even chuckled at that, appreciating her wit.\n\n\"We can put Kurbag at a disadvantage. That is what Smit is saying, I think.\" Shelur smiled again. \"We lead them into a trap. And then we take their heads.\"\n\nThat led to a discussion of possible locations.\n\n- \"Smit brought a rope.\" said Coopah.\n\nIt was enough to change the whole conversation. Prior to that, Shelur and Lambug, the scouts, had been arguing that the best sites for an ambush were to be found in the deep forest, south and east of us. Umog and the two bigger males, Gurukk and Durz, wanted more room to swing their weapons; they preferred more open ground, closer to the Blasted Tree.\n\nDitgurat let everyone have their say. Lagakh was reserving her opinion - until Coopah mentioned the rope. Then her eyes lit up. We all saw it; it was like witnessing the birth of a plan.\n\nIt wasn't fully formed - not yet. There were details that had to be worked out, roles to be assigned. Lagakh began to explain to us how we would go about it.\n\n***\n\nGhorza drew the first dangerous job. Like an idiot, I talked myself into joining her. To tell the truth, I was trying to talk her out of it, but I ended up committing myself instead.\n\nWe approached the band's home ground from the west, coming along the stream. Then we hid in the trees, not very far from the first spot where we'd made love.\n\n- \"I have fond memories of this place.\" I said.\n\nGhorza shushed me. We stayed in hiding, and watched band members come down to the stream to get water. Six times, Ghorza tapped me on the arm - a warning to stay down - because it was the wrong person who turned up.\n\nBut for the seventh visitor, Ghorza rose to her feet.\n\n- \"Surak!\" she said. \"It's me! Ghorza. We need your help!\"\n\nSurak was an older female, with a bucket in her hand. Ghorza had waited for her, because she knew that Surak favored Kurbag - she would never take the risk of aiding us.\n\n\"We need food, Surak. Can you bring us some?\" As she said those words, Ghorza tapped me with her foot. That was my signal to stand up.\n\nThe moment she saw me, Surak shrieked and dropped her empty bucket. She turned and ran back towards the Blasted Tree.\n\n- \"It worked.\" I said.\n\n- \"Of course it worked.\" said Ghorza. \"Start running.\"\n\n- \"What about you?\"\n\n- \"Go. Run.\" Ghorza gave me a push.\n\n- \"I thought they were supposed to see me.\"\n\n- \"They will. Go!\"\n\nI ran.\n\nAs you may have guessed, running is not one of my better skills. Even with a head start, Ghorza caught up to me sooner than I'd expected. She'd lingered by the stream just long enough to let herself be seen.\n\nThat was the plan. Shelur and Lambug knew that Kurbag's group had failed to find us, and had returned to the Blasted Tree to re-supply. Lagakh had chosen her spot; Ghorza and I were the bait, to lure them there.\n\n- \"If they see me,\" I'd suggested, \"they won't stop to think: they'll come right after me.\"\n\n- \"He is right.\" said Shaghar.\n\n- \"They know that Ghorza can outrun them.\" said Ogash. \"But Smit they could catch.\"\n\nDitgurat agreed as well. That led to me accompanying Ghorza on her mission.\n\nI ran as fast as I could, pumping my arms like a madman, and praying that I wouldn't stumble. We could hear the shouts of our pursuers.\n\nWe reached the forest path at full speed. Ghorza insisted on staying behind me, but I didn't see how that could help. What was she going to do - prod me with her spear?\n\nI could hear the orcs chasing us - it might have been just my imagination, but I thought that I could even hear their footsteps. They were barely ten meters behind us. Then I caught sight of the twin oaks. I didn't breathe a sigh of relief - I couldn't afford to - but I did draw on my last energy reserves to make a final sprint.\n\nAt the last second, I remembered to jump.\n\nI landed awkwardly, stumbled and fell, just past the two trees that Lagakh had chosen. Ghorza made the jump easily. She managed to avoid my flailing arms and legs as I sprawled in front of her. Then she slid to a halt, and turned about, to come to my defence.\n\nThree of Kurbag's crew were on our heels. They were too focused on me, too close to bringing me down, to see the rope lying on the ground between the twin oaks. Even had they been looking closely, I doubt that they would have spotted it, because Shaghar was using her aether skills to hide it in plain sight. She was sitting in the underbrush, muttering and wiggling her fingers.\n\nA moment before our pursuers passed between the trees, Shelur and Lambug pulled on the ends of the rope.\n\nIt rose to the height of half a meter. Kurbag's chasers never had a chance to react. The two leading runners tripped over the rope, and measured their length on the forest path. One of them landed badly, and probably injured himself in the process.\n\nIt didn't really matter: the moment they fell, Bula was already stepping forward, with a massive rock in her arms, which she proceeded to drop on the prostrate orc. Urzoth was there to deliver the coup de grace.\n\nThe second chaser, a half-orc, fared no better. Umog pounced before he could rise, and crushed his skull with her axe.\n\nThere was a third pursuer, just slightly less fleet of foot than his unfortunate comrades. He skidded to a stop, and reversed course.\n\nIt wasn't part of the plan to risk chasing him.\n\nKurbag had lost his two swiftest adherents. The one who escaped had seen Ghorza and me, Bula and Urzoth, and Umog - but neither Lagakh nor any of her scouting party.\n\nLagakh and the others had been waiting, concealed, in case anything went wrong, or if Kurbag's entire cabal had caught up to us. In a worst-case scenario, we had been prepared to fight here.\n\nInstead, we'd eliminated two of his supporters without revealing Lagakh's presence.\n\n- \"He will chase us.\" she had promised, two days before.\n\n- \"How can you be so sure?\"\n\n- \"He killed Slagip and Ushug, but lost Oag, and let Smit escape. Then he let Smit and Shaghar get away. And Snak.\" she said. \"And now, if we successfully ambush him? He cannot go back to the band with three failures.\"\n\n- \"S'pecially if he thinks that Ditgurat is alone, without Lagakh. Without the scouts.\" said Shelur.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n- \"Exactly.\"\n\nWe ran. Shelur calmly coiled up the rope, and followed.\n\nIt was part of the plan to leave plenty of signs of our passage, so that Kurbag couldn't possibly fail to find us. Yet we pushed hard for the rest of that day, putting as much distance between us and them as we could. We did not want to have them catch up to us in the dark.\n\nI rested next to Ghorza that night, holding her close. It was neither sexual nor sensual. I was simply terrified of losing her. I didn't want to lose any of our group. I knew that we expected to have to fight on the morrow, and that prospect filled me with trepidation.\n\nI missed Ushug. But I could admit to myself that it would have been so much worse if Shaghar or Ghorza had died. Losing Ditgurat or Lagakh would be a tragedy for the Red Knees; but I couldn't even imagine mourning Shaghar or Ghorza. And Goddesses forbid that anything should happen to Snak. Or Umog.\n\nOf course I didn't sleep very well. I kept Ghorza awake, too.\n\n***\n\nWe lured Kurbag all the way to the rocky ground, to Ditgurat's hiding place: the crevice. If we lost this fight, she wasn't ever going to need it again. None of us would.\n\nThere was a heavy mist clinging to the earth. The sky was grey, and the clouds were heavy, hanging low. It would rain, at some point.\n\nKurbag arrived at midday, with nine companions. Six of them were warriors; the other three would hang on the flanks, and try to assist their comrades, or to turn our line. One of them would be hampered; Ushug had broken his arm on the beach.\n\nDitgurat was out in the open, waiting for them. Urzoth was on her right, Umog on her left - the vulnerable side. Bula was beside Urzoth. Shaghar and Ghorza were on our left. I stood behind them. With only a long knife, I couldn't possibly stand in the front line.\n\nThe youngsters were in the second line, too, with Coopah. There were no non-combatants. Even Snak held the little knife I'd salvaged from the wreck. I couldn't even begin to imagine a scenario where she might be able to use it to any effect.\n\nIt was madness for us to make a stand there. Kurbag had to see it. Only he didn't. Hatred of Ditgurat? Loathing for me? Whatever it was, he wasted little time. With a collective roar, they charged at us.\n\nThe moment they did, Lagakh and the others emerged from the crevice, where they'd been completely hidden from view. Lagakh herself, with the two males, came out on our right, while Ogash and the two scouts exited the crevice on our left.\n\nKurbag was outnumbered, and outflanked on both sides. It was a race, then: once Lagakh and the scouts entered the fight, our numbers would tell. But for a few dangerous moments, Kurbag had the advantage in the very centre. If he could reach and kill Ditgurat, Umog and Urzoth, he could tip the balance back into his favour.\n\nI didn't see it. There were three big orcs (a male, a female, and another half-orc male) on our side of the line - headed directly for Ghorza and Shaghar. One of them faltered and stopped, catching sight of Shelur, followed by Ogash and Lambug, as they came out of the crevice.\n\nThe other two came straight on.\n\nOut of the corner of my eye, I saw Umog shift to her right, to support Ditgurat. She couldn't help us. That left Shaghar and Ghorza facing opponents twice their size.\n\nWithout thinking, I moved forward.\n\nThe big female had a two-handed axe, which she swung at Ghorza - who ducked under it by going down on one knee. Ghorza stabbed at the belly of the female - who roared, more annoyed than injured.\n\nI leapt, and sailed over the top of Ghorza, crashing into the female warrior. I had a long knife, but it was more of a flying tackle than anything else. It was like diving into a brick wall.\n\nFortunately for me, the orc hadn't recovered from her missed swing at Ghorza; the head of her axe was still off to the side. I got both of my arms around her neck, grabbed a handful of her hair, and even tried to grapple her with my legs.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\nAlready off-balance, she stumbled and toppled backwards, with me clinging to her like a madman, trying to wrench her head off her shoulders. We both fell heavily, with me on top. The impact drove the breath from my lungs.\n\nI didn't see what happened next. Apparently the big male orc, who'd been headed for Shaghar, was distracted by my mad leap. He decided that the little female could wait - here was a chance to eliminate the one person he hated above all others: me.\n\nHe raised his weapon, prepared to cut me in half.\n\nI didn't see him. But I heard Shaghar's unearthly, ear-piercing shriek - and I did see the sudden flash of light, brighter than staring into the sun, sharper and more sudden than the crack of lightning.\n\nThe blow never came.\n\nI have no idea if he was blinded, or stunned - or both. For whatever reason, he failed to act. Shelur ran him through the back. She arrived so quickly because the half-orc male on the end of their line saw the odds against him, and backed away. It turned out that he was the one with the broken arm. Ogash and Lambug drove him further back.\n\nMeanwhile, the female orc violently head-butted me. I couldn't even see, for a moment; I thought she'd cracked my forehead. Then she squirmed and flipped us over, so that I was thrown to the ground beneath her. One of my arms was still around her neck, but I couldn't prevent her from raising her axe.\n\nGhorza stabbed her in the back with her spear. Shelur grabbed the female's hair, pulled her head back, and slashed her throat open with a long knife. Hot blood splashed all over my face.\n\nI was gasping for breath, probably concussed, and covered in blood - but still alive.\n\nThe fight was reaching its most critical moments.\n\nKurbag had gone straight for Ditgurat. He was bigger, stronger, younger, and faster. She had courage, and experience. She didn't have to kill him in those first few moments; she had to stay alive.\n\nShe chose to deflect his first savage blow, rather than trying to block it. Even so, she almost underestimated his speed and strength. She reeled a bit from the power of his swing.\n\nUmog saw that, and moved to intervene. She'd easily parried her opponent's first attack, and forced him to leap backwards to avoid her counterattack. Now she swung at Kurbag, who had to swiftly give ground to avoid a serious injury. Umog pressed her advantage, driving him back another two steps.\n\nThat probably saved Ditgurat, but it left Umog vulnerable. She was still taking the fight to Kurbag, stepping forward. Her first opponent came up behind her. He swung his axe, aiming for the back of her head.\n\nBlood spurted. Umog bellowed, and fell forward on her face.\n\nI saw none of this. Nor did I see Coopah come running forward, to put himself between Ditgurat and her assailants. Kurbag contemptuously smashed him to the ground with a backhanded sweep of his arm.\n\nBy then, it was too late - for him.\n\nLagakh rushed at Kurbag from the side. He was younger and stronger than Ditgurat, but her daughter was something else again. Swifter. More powerful. And incredibly angry. She severed his left arm at the elbow, delivered a mighty kick to his groin, and then buried her sword in his forehead.\n\nThe male who had struck Umog from behind was simply stunned - or perhaps he was in shock. Lagakh cut him down a moment later.\n\nOnly one of Kurbag's followers tried to escape - the one with the broken arm. Lambug and Ogash ran him down.\n\nGhorza helped me get out from under the dead female. Seeing all the blood, she began looking for a serious wound on my body. There was none.\n\nI saw Shaghar, lying stretched out on the ground. There wasn't a mark on her, but she looked dead. Little Snak was kneeling beside her.\n\n- \"She's breathing.\" said Snak.\n\nUnconscious, then. I turned about, and saw Umog. She was lying on her stomach, face down, the fingers of both hands clawing at the earth between two stones. There was a piece of flesh from the back of her head hanging off to one side, and her blood was still spurting.\n\nWithout thinking, I rushed to her side.\n\n- \"I'm here.\" I panted. \"It's me, Umog. Hold still - I have to stop the bleeding.\"\n\nWhether she heard me or not, she didn't make a sound as I took off my shirt. The enemy's blow had carved a great hank of hair, and some flesh, from the back of her head. I could see bare bone, but the axe didn't seem to have cracked her skull. I tried to put her skin and hair back in place, and then keep it there by tying my shirt around her head.\n\nCoopah was still alive, though his arm was broken. Urzoth had a nasty gash on his thigh. Shelur was limping: she'd stepped in a hole and twisted her ankle badly. Other than that, no one else of Ditgurat's partisans had been badly hurt. None had been killed.\n\nKurbag was dead - and every single one of his adherents with him. It was well-nigh miraculous.\n\nLuck, of course. Sheer luck. And magic.\n\nVirtually everyone had seen Shaghar's incredible bolt of light and power. She'd used the aether to stun and blind an enemy - and to save my life. But now everyone knew her secret. I wondered if any of the others suspected that she hadn't been alone in using magic.\n\nWe stripped the enemy dead of their weapons, and any useful gear. Lagakh took Kurbag's head. Other than that, Ditgurat left the bodies where they lay.\n\n- \"Let them rot.\" she said. \"It is all they deserve.\"\n\n*****"
    ],
    "authorname": "AspernEssling",
    "tags": [
        "leinyere",
        "shipwrecked",
        "half-orcs",
        "multiple partners",
        "combat",
        "swords",
        "tales of leinyere"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/smitten-ch-05"
}
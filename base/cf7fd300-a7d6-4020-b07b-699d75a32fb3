{
    "title": "Alex & Alexa Ch. 17",
    "pages": [
        "Disclaimer: Read... the... Author's... Notes. For the love of Sanguinius, PLEASE, before you comment or send hate mail. You have opposable thumbs, live up to that evolutionary gift. If characters are having sexy time, they're 18 or older. Deal with it. \n\nEpilogue- Never Another Day Without You \n\nI was already liking Paris. No. Loving it. People were clapping quietly in the caf\u00e9 as I led Alexa out of it, her arm threaded through mine, my hand clasping hers. Alexa was looking at the ground and blushing, trying to control her smile. She'd said almost nothing since I'd found her. \n\n\"Jamais un autre jour sans toi...\" she had whispered in my ear, with tears on her cheeks as I hugged her while the caf\u00e9 looked on. \n\n*** \n\nWe walked slowly through the neighbourhood, saying nothing yet. We just wanted to feel one another's presence. I never once let go of her hand, keeping it clasped in both of mine. Every now and then, she would turn to look at me and I was stunned all over again by her angelic beauty- the limitless depths of her sapphire eyes, the radiance of her golden hair, the purity and joy of her smile... \n\nI'd never been more in love with her. It felt like a dream, walking with her now. \n\nWe walked through the Square des Epinettes quietly, letting the warm summer air embrace us. Any ambient noise of the bustling city all around us was lost, because we were focused only on one another. We stopped and just stared at the statue in the center of the park for some time, although I was admittedly only faintly aware of it. There was only us. \n\nWe began walking again and I allowed her to lead me wherever it was we were heading. \n\n\"We off to an atelier?\" I asked, grinning. \n\nAlexa smiled and shook her head. She was so unusually quiet. I think she was still overwhelmed by my presence. \"Afraid not. Just a little apartment off Roberval, sort of tucked away beyond notice.\" \n\n\"That sounds nothing like you.\" I mused. \n\n\"I couldn't agree more,\" she said quietly. \"Let me take you there.\" \n\nWe walked casually through the streets, eventually reaching Rue Roberval, and she brought us around behind a large, old building, the foundations of which dated back to the 1700's at least. We entered through a small, walled-off garden and she used a small, antique key to access a stairwell. Two flights up and she brought us to a door. \n\n\"Promise not to laugh?\" she asked as she put the key in the ancient lock. \n\n\"No.\" I replied simply, making her shake her head. She opened the door and led me inside. The apartment was tiny, basically one medium-sized room with several half-partitions meant to give it a multi-room feel. The living room was also the bed room. A tiny kitchenette terminated in a small round table perhaps big enough for two. The bathroom was a closet large enough to hold a toilet, a sink and a skinny shower stall. If I used the toilet, my lower legs would be visible in the hallway, it was that small. The walls were a light grey with floral wallpaper trim. Some plants hung form the ceiling and a radio that might have been older than Paris itself sad next to her bed. \n\n\"I like what you've done with the place.\" I mentioned, making her blush. \n\n\"I've only been here three days,\" she murmured. \"Nothing here is mine. I... I didn't-\" \n\nShe stopped talking as I hugged her to me. She didn't move at first, but then she put her arms around my waist and sighed in what I could only describe as deep relief. I could readily share the sentiment. \n\n\"I'll never let go of you again.\" I whispered to her, making her tremble slightly. She looked up at me and tears shone in her eyes. \n\n\"And what now, mon coeur?\" she asked. \n\nI shrugged and pulled out my phone. \"Guess it's time to check in...\" \n\nShe watched nervously as I dialed and then her eyes went wide as I pushed the phone into her hand, with the speaker function on. Before she could say anything or hand it back to me, someone picked up on the other end. \n\n\"Alex?\" resonated my mother's voice across the line. Her tone betrayed her concern. \"Alex?\" \n\nWith a trembling hand, Alexa replied, her eyes squeezed shut. \"Karen?\" \n\n\"Alli?\" mom exclaimed in barely contained shock. \"It's Alli!\" I heard her almost yell, the response to which my dad laughing jovially and Freja and Jeanie both crying out in delight. \"Are you alright?\" \n\n\"I'm fine,\" she said quietly, not quite sure what to make of all this just yet. We hadn't really discussed anything since the caf\u00e9, just basking in one another's presence and never wanting to be apart again. It was entirely possible that she had never expected to speak to her family again, even if I was here. \"I... Karen, I-\" \n\n\"I'm so glad your safe,\" mom breathed. \"So Alex is there with you?\" \n\n\"She's on my phone, mom, so yeah, I'm here with her.\" I said, laughing. \"I haven't been sacrificed to the lesbian death cult she, Jeanie and Freja started up just yet.\" \n\n\"There would be worse ways for you to go, young man,\" mom said dryly. \"Now zip your yip and let me talk to my baby sister.\" \n\nAlexa sat down on the corner of the bed, still looking both numb and nervous, her eyes distant with trepidation. Not surprisingly, mom spoke first. \n\n\"Alli, I'm not going to say much right this second, it's going to be a quick call,\" she began. \"There's a lot for you and Alex to discuss. But I wanted you to know we're all relieved that you're fine. I love you and I miss you, we all do.\" \n\n\"I miss you too...\" Alexa said in a voice that was barely more than a whisper, and even then, it nearly cracked with her emotion. Mom ended the call and Alexa stared at the screen for several seconds before looking up at me. \n\n\"They were worried...\" she murmured. \n\n\"Terrified is a better descriptor,\" I answered, sitting down next to her on the flimsy fold-out bed, which creaked under my weight. It would have completely broken under dad, but he probably couldn't even fit in this postage stamp of an apartment. \"When we saw you were gone, it-\" \n\nAlexa threw herself against me and burst into tears, sobbing. I held her tight, choking back my own anxiety and pain. Her being my aunt was the furthest thing from my mind. All that mattered was that Alexa was the woman I was completely in love with. \n\n\"How can you forgive me?\" she rasped, trying to control her crying now. \n\n\"We're not worrying about that, Alexa,\" I said soothingly, stroking her hair. \"There's so much to talk about.\" \n\nI then took her cheeks in my hands and gazed into her beautiful face. \"And a lifetime of joy to live.\" \n\nShe said nothing, just staring into my eyes. \n\n\"I'm not gonna say anything blithe like we were right all along,\" I said, using my thumbs to wipe the tears away from her eyes. \"But I can say that mom and dad sent me to get you and bring you home. As my wife.\" \n\nEven through the tears, her eyes were alight with endless wonder. \"They... know I'm your wife?\" \n\n\"A lot has happened since you left,\" I answered, nodding. \"We talked. A lot. It wasn't easy on anyone. But in the end, they understood how in love we are. And they know you're my wife and approve. At least, they're working on it.\" \n\nShe just stared into my eyes. \"Your wife...\" \n\nThen she blinked, almost snapping out of her secret reverie. \"Alex, tell me everything, please.\" \n\nI smiled and nodded before taking her hands in mine and recounting the entire ordeal from beginning to end, including the role Jeanie and Freja played in its resolution. Alexa listened breathlessly, almost like she was fit to burst. Tears shone in her eyes again. \n\n\"I can't believe after all this they want me back...\" she murmured. \"I thought they hated me for what I'd done.\" \n\nI shook my head. \"Alexa, I don't think anyone could ever hate you. You are, hands down, the most incredible person I know, and I've known my parents my whole life.\" \n\nShe sniffled and booped my nose. \"Sweet-talker. I was just thinking the same thing about you, and I know your parents too.\" \n\nI drew a deep breath as I composed my thoughts. \"I... I won't say that all of this pain was unnecessary, Alexa, because it might have needed to happen to get us all where we're supposed to be on this issue. You going missing broke mom's heart, but she can't imagine life without you. It was dad who finally came down on our side, and that helped mom do what she so desperately wanted to and approve of us.\" \n\n\"How can they not hold all this against me?\" she asked. \"They knew I was in love with you and tried to ease me out of it.\" \n\nI chuckled. \"Which makes perfect sense at the time and from their perspective. If you weren't in love with me, and I developed some idiotic teen boy crush on you, dad would have thwapped me on the back of the head and told me to snap out of it.\" \n\nShe giggled now. \"Yeah, I can see that. You would've been really annoying if you'd been crushing on me. Always trying to sneak peeks at me, setting up that remote camera in my room...\" \n\nI raised an eyebrow. \"You knew about that?\" \n\n\"You're not that slick, husband-mine,\" she said, smirking at me. \"I knew about it and decided to indulge you, since I was struggling with my own onslaught of weird feelings for you.\" \n\n\"Wow, I feel like such a creeper,\" I sighed. \"In any event, I... don't know if we'd be here right now, with the rest of our lives together in front of us, if it hadn't played out this way. I guess love isn't always easy.\" \n\n\"I'm just glad they tried to talk to me and didn't rely on Michael thwapping me on the back of the head,\" she mused. \"Forget falling out of love with you, I probably still wouldn't remember my own name. Do you... do you think they're truly okay with this, Alex?\" \n\n\"They will be.\" I said in an assuring tone. \"It's going to be complicated as fuck, for sure. But they want this now. It'll just take time to get used to it, so we'll be patient with them. I mean, we're breaking the law, after all.\" \n\nShe sighed and nodded. \n\n\"Speaking of which, mom wanted to know where we should hold the wedding.\" I mentioned. \"Denmark? Here in Paris? Wanna go to Australia?\" \n\nHer eyes widened. \"They want a real wedding for us?\" \n\nI smiled and nodded. \"I showed them the wedding video and mom was really sorry she missed out on giving you away.\" \n\n\"They saw the video?\" she asked somewhat uncertainly. \n\n\"Not all of it, just the first part,\" I clarified, laughing. \"But I left my laptop with them as a gesture of trust, so God only knows what they've seen by now.\" \n\nShe sighed at the thought. \"Well, they've already seen the videos of me fucking Jeanie, not to mention my nonsense in Slovenia with Freja when we were younger. Those didn't bother me. I guess it's just weird to think of them seeing me making love to you.\" \n\n\"That's because it is weird.\" I agreed. \"But if anyone can handle it, it's mom and dad. \"They're pretty adaptable in the end, always have been.\" \n\n\"This is going to cause a lot of problems for them,\" she said quietly, looking down our hands, which were clasped. \"And we tried so hard to avoid those complications.\" \n\n\"I know, but they're willing to take that problem on,\" I told her. \"We're going home, Alexa. And our relationship is still illegal there, so we'll have to keep it on the downlow for now. But our family will do everything they can to make us complete.\" \n\nShe wiped a tear from her eye. \"I can't believe we're going home. As husband and wife. But can I...\" \n\n\"Hmmm?\" \n\nHer smile was now almost serene. \"We'll go home, and things will be their own beautiful fun and crazy again. You and your mom driving one another insane, your dad weirding everyone out, depraved sex with Jeanie and Freja... I'm looking forward to home. But do you... do you think they'd let us stay here for a few days or so? I just want you all to myself for a while, Alex.\" \n\nI nodded. \"I somehow doubt that's a problem. They'll understand and approve.\" \n\n\"Good,\" she said finally. \"I paid rent on this postage stamp a year in advance, I wanna get my money back...\" \n\n*** \n\nI was lying on my back, breathing hard as I reached up and squeezed Alexa's breasts while she churned and writhed on me, my cock deep inside her tight, wet pussy. Her fingernails were almost digging into my pecs as she groaned loudly and with unashamed pleasure. \n\n\"Gnnnnnnn, Alex...\" she panted. \"Oh, God, I missed and needed this...\" \n\n\"Me too,\" I agreed, fondling her as I pushed my hips up and down in time with hers, spearing myself into her body. The old bed creaked like crazy, as did the floor, but we were both beyond caring at this point. What were they going to do, evict us? \"I don't care if it's only been three days, I've missed you.\" \n\n\"Ah, before this, we -gnnnnnnnn- we hadn't gone without fucking for weeks...\" she gasped. \"Oh, God, right there...\" \n\nI looked down her body and watched as my glistening shaft slid in and out of her while she moved on top of me, her pussy swallowing my cock greedily. She groaned loudly, and I smirked as I remembered that we'd left the window open. Pretty sure every apartment around us and anyone in the courtyard garden below would know exactly what was going on here. \n\nAlexa sat up and arched her back, pressing down on me and squeezing me tight, her teeth clenched as she fought back a scream of pure ecstasy. I felt her womanhood fluttering around me as she came, her sticky essence bathe both our genitals. She bucked her hips in a frenzy, her hair flailing around her body, a golden corona of delight. \n\n\"Cum in me,\" she whimpered. \"Oh my God, Alex, cum in me, please...\" \n\nI gripped her hips tight and rocked against her, moaning as the unreal pleasure washed over me. My cock throbbed as I began pumping my cum deep inside her. The heated, tingling flush blossomed through my whole body, my mind whirling with colours I couldn't describe, and a deep bliss from being reunited with my wife. \n\nAlexa collapsed on top of me, trembling as she tried to control her breath. She pressed her face into my shoulder and I could feel the tears leaking from her eyes, but I said nothing. I merely held her close and stroked her hair. Words were not required at this moment. I could feel myself pulsing inside her, and her pussy still gripped me wetly, massaging me. My goddess was in my arms again. \n\nShe finally let out a deep sigh of contentment and looked up at me to smile, her eyes heavy-lidded and gleaming with pleasure. She pressed her lips to mine, kissing me lovingly as she eased herself off my cock before making her way down my body, nipping gently and kissing at my skin. It was with a sly smile that she finally arrived at my manhood, taking hold of it and then swirling her devilish tongue around the shaft and head, licking our mingled cum from my skin. \n\nI shuddered and sighed as she slid her mouth over my twitching cockhead and the slid all the way down my length. She hummed in pleasure before beginning to bob up and down, her tongue swirling snaking around. She took her time in cleaning me off, her mouth finally pulling back with a wet 'pop!'. She smiled up at me while resting her chin on her forearms, which were settled on my thighs. \n\n\"Mmmmmmm, been days since I've had any real protein,\" she purred, using a finger to wipe at the corner of her mouth while she winked at me. \"Not planning to go without again.\" \n\n\"I thought you looked a little sallow.\" I quipped, reaching down and stroking her hair. She giggled and kissed my cock again before snaking herself back up my body and snuggling into me. She nuzzled her cheek on my shoulder, her eyes closed. \"I missed you.\" \n\n\"I got that impression,\" she mumbled, kissing my skin. \"Feeling's mutual, I assure you. I can hardly believe it, Alex. After weeks of being in love and hiding it, living in fear of being discovered, we're going to be open about it. It seems unreal to me.\" \n\n\"Me too.\" I agreed. \"And there's a lot of hurdles, still. Forget the whole illegal aspect of this, mom and dad have to broach this with the families.\" \n\n\"Ugh,\" she muttered, making a face. \"Your dad's family, I don't know how they'll react, but I'm pretty sure the Gordons and Blackwells will cast a kitten about it.\" \n\n\"Maybe, but I don't fancy their chances against mom and dad.\" \n\n\"True,\" she allowed. \"Same with my mom. She may've been the eccentric one, but nobody messed with her in the Gordon clan.\" \n\n\"That's what mom kept telling me.\" I mused, reaching down and casually caressing and squeezing her ass cheeks. Her dad was, before his illness, a dominant man, except where Miranda was concerned. \n\n\"Apparently, the only person she'd ever proven remotely deferential to was Michael.\" \n\n\"Why doesn't that surprise me?\" I said dryly. \n\n\"Not in the same kittenish way my sister gets when he whips out the testosterone,\" she assured me. \"She just admired him and knew that he was pretty much never wrong.\" \n\n\"Lucky for us,\" I agreed. \"Mom was so emotional about this whole thing that she deferred to him. He's the head of the household when the chips are down. And he's convinced he ultimately made the right decision.\" \n\n\"Thank God,\" she sighed. \"Although my sister's right, it's gonna be a bitch trying to find a church anywhere in town.\" \n\n\"Well, one problem at a time. The immediate biggies are the families and the university. And whether we like it or not, we're completely reliant on mom and dad to work those situations out. They really put me through the wringer.\" \n\n\"Does that bother you?\" Alexa asked. \n\n\"I think it was completely necessary,\" I admitted. \"This is, after all, the most important decision we'll both ever make. I mean, wanting to marry someone you're unrelated to is a big enough issue, so for the two of us to defy the law, we'd better be pretty damned sure, right?\" \n\nShe nodded pensively. \n\n\"I mean, they challenged me to consider every single aspect of what we were getting into and who it would potentially affect,\" I continued. \"Not just us, but them, possibly the families in ways we haven't considered.\" \n\nAlexa sighed. \"Stuff we've been angsting about for weeks already. If they'd only known we were already torturing ourselves.\" \n\n\"They did eventually. But once it was obvious to them that there was no life for me without you, they were convinced that this was the way to go. They just wanted to make sure I didn't have some sociopathic disregard for everyone around us.\" \n\nShe smiled and kissed my cheek. \"I'm glad you're here. I need you to myself. But I'm a little surprised that they didn't come with you.\" \n\n\"I think mom would've come in a heartbeat,\" I mused. \"But dad made it clear that you were my wife, and this was my show. Not to mention they probably understood we'd want some time alone, you know?\" \n\n\"Smart cookie, your dad,\" she said happily. \"I know I asked already, but are they really going to be okay with this?\" \n\n\"They will be. It may take some time, so we'd better go easy on them for a bit. I mean, yeah, they'll let you stay in my cave in the basement now.\" \n\n\"What you don't want to stay in my room?\" she asked, smirking. \n\n\"I'd feel kinda weird having wild, jungle-monkey sex with you while my parents were just down the hall.\" I replied, making a wry face. \n\n\"You should try being in the room just down from them,\" she added, giggling. \"Their wild, jungle-monkey sex is easily as crazy as ours.\" \n\n\"Jeeeez,\" I muttered, squeezing my eyes shut and putting my hands over my ears. \"Thanks for the libidoectomy.\" \n\n\"I spied on them once,\" Alexa admitted with a conspiratorial smirk. \"It was actually really hot.\" \n\n\"You spied on my parents having sex?\" I exclaimed. \n\n\"I spied on my big sister and her husband having sex is how I prefer to look at it.\" Alexa replied. \"And I'll say it again, it was actually really damn hot. I watched them in the jacuzzi and on the pool deck, they didn't know I was home.\" ",
        "I just shook my head. \n\n\"Karen sounded like he was tearing her apart,\" she continued, enjoying my discomfiture. \"No idea where Jeanie fits it all when Mike is inside her.\" \n\n\"I thought you liked having sex with me,\" I groused. \"At this rate, he's never gonna want to come out again.\" \n\n\"Oh, I'm pretty sure I can make Mister Happy come out to play...\" she cooed as she made her way back down my body, taking hold of my cock. \n\n*** \n\nOne thing I learned to appreciate very quickly about Paris was that the government had set up many free WiFi hotspots throughout the city- in the parks, public squares, and so on. We were now sitting on a bench in a beautiful little secluded park, under the shade of some trees. Alexa was nuzzling my neck and almost purring as I set up my laptop. \n\nI'll admit, my next thought was absolutely evil and a wicked smirk crossed my face. I could see her eyes were closed as I connected to the WiFi network, making sure my firewall was active. I started a program and kept my volume off until a screen came up. \n\n\"Well, don't you two look comfy...\" \n\nAlexa, who had been kissing my neck, yelped in shock, and bolted upright, like her grade school teacher had caught her passing notes. She was fairly rigid as she sat next to me on the bench, her eyes wide, staring off into the distance. I could almost see her heart pounding through her chest. \n\n\"Hi, mom,\" I said cheerfully, waving to my maternal unit on the Skype screen. \"I-\" \n\n\"Oh, don't you hi mom me, young man,\" she said sternly. \"You started a Skype call without telling my baby sister, just so you could scare the bejeezus out of her. You're a horrible husband, it must run in the family.\" \n\n\"Hi, Alex!\" I heard dad call from somewhere in the background. \"Don't grow up to be me!\" \n\n\"You okay, Alli?\" mom asked as I tilted my laptop to center the screen on Alexa, who was still breathing heavily and staring off into nowhere, her hand over her heart. \n\n\"Can we trade him in, Kar?\" my aunt asked. \"I don't love him anymore.\" \n\n\"Sorry, chick, you said your vows, now do your time,\" mom replied unconcernedly. \"Still think this is a good idea?\" \n\n\"Never said it was a good idea, I just couldn't help myself...\" Alexa said breathlessly. \n\n\"I know that feeling,\" mom muttered. \"Well, now that Alex has aged you about ten years, how's everything there?\" \n\n\"We're just out for a walk,\" I said cheerfully. \"Alexa is showing me some of Paris around the little flat she rented.\" \n\n\"I'm amazed you two have even left the place,\" mom commented. \"You can't have violated every surface in it yet.\" \n\n\"You underestimate my powers, mother,\" I replied, while Alexa was sitting next to me, saying nothing and blushing furiously. \"And there's plenty of secluded spaces in Paris for us to-\" \n\n\"Alex, don't defile Paris!\" mom hissed. \n\n\"Oh, you're just jealous I'm gonna do it before you and dad do,\" I said casually, leaning back and putting an arm around my aunt-wife. Alexa was pinching her eyes. \"Besides, we're only gonna be here a few days, not like we can make it around the entire city in that time.\" \n\n\"Okay, that's enough out of you,\" mom sighed. \"Alli, I'm almost afraid to ask how you're doing now.\" \n\n\"I'll be alright, eventually,\" my aunt breathed, recovering her equilibrium somewhat. \"It's been an emotional roller-coaster kind of day, you know?\" \n\n\"I know, Alli,\" mom said with genuine sympathy. \"We all miss you back here so much.\" \n\nAlexa teared up a little. \"I'm sorry, Kar.\" \n\n\"No need to be,\" mom said, holding up a hand. \"You're back together with Alex, which is as it should be.\" \n\n\"You really mean that?\" my aunt asked, her fingers coming up to her mouth. \n\nMom nodded. \"It'll take some getting used to, but we're all on the same page, I promise you.\" \n\n\"But what about-\" \n\nMom held up her hand again. \"Alli, we will work it all out, I promise you. Michael and I will make the university thing work. Who knows, maybe we can find someone in the Law faculty who will agree to take you guys on as a test case for legalizing avunculate marriage. As for the families, they can be dealt with too.\" \n\n\"More than anything, I just want you and Michael to be okay.\" Alexa murmured. \n\nMom smiled. \"Alli, you and Alex being in love and married is not some price we have to pay for having you in our lives. Alex made it very clear that this was not some silly little fling or crush, and it was abundantly clear from watching you those last few weeks that you were very in love with him.\" \n\nAlexa blushed. \"I can't believe I was the one who gave it away,\" she murmured. \"I thought for sure it would be my doe-eyed nephew who outed us.\" \n\n\"Not even close,\" mom said, shaking her head. \"Alex played it straight when anyone else was around, the awkward, gamer-dork nephew. No one suspected a thing.\" \n\n\"Gee, thanks.\" I muttered, making Alexa giggle and snuggle back into my arm. \"You have seen my gorgeous wife, haven't you, mom?\" \n\n\"All of her, repeatedly,\" mom said. \"At least you falling in love with her makes sense.\" \n\n\"Not the other way around?\" I asked. \n\nMom shrugged. \n\n\"Oh, be nice, Kar,\" Alexa said sweetly, laying her head on my shoulder. \"He's a very loving and considerate husband, I will have you know.\" \n\n\"Runs in the family...\" dad said as he walked by in the background, smacking my mom's butt and making mom jump a little, her eyes widening. \n\n\"Moving on,\" mom said dryly, ignoring my father. \"When you get home in a few days, what are your plans?\" \n\nAlexa and I considered. \"Probably just settle back in and get back to work at the university,\" she answered, putting her hand on top of mine. \"After all this, I kinda want to return to our relative normalcy as quickly as possible.\" \n\n\"Makes sense,\" mom agreed. \"To be honest, normalcy will make things a little easier when we unofficially approach the university about this whole matter. If it's not a drama, they'll probably happily overlook it.\" \n\nAlexa let out a deep sigh. \"Alex says he told you everything?\" \n\nMom nodded. \"His total honesty made this a lot easier, strange as that may sound. It allowed Michael and I to understand exactly how much you meant to one another and what splitting you up would do.\" \n\nAlexa squirmed. \"And he... left his laptop with you?\" \n\n\"With access to all the files,\" mom confirmed, nodding solemnly. \"Pictures and videos.\" \n\n\"Yup, she's seen it all,\" Jeanie said, appearing beside mom and waving. \"The four of us watched a few of them together. Fre and I were like your cheering section.\" \n\n\"Indeed you were...\" mom said dryly, not looking at Jeanie. \n\n\"Don't let the prof fool you, Lexi, she enjoyed them!\" Jeanie said before moving behind my mom and then snaking her arms around to hold her boobs and honk them. Mom did nothing but roll her eyes in exasperation while Jeanie sauntered off. \n\n\"As I was saying, Alex was remarkably helpful, and that made all this much easier and more real for us,\" mom continued, seemingly unruffled by Jeanie's molestation of her bosom. \"We've had plenty of time to talk now, and your co-conspirators here were an asset for perspective as well.\" \n\nAlexa wiped at a tear. \"It almost seems like a dream and a lifetime away, even though I've only been gone three days. I'd convinced myself I would never see any of you again.\" \n\n\"We're not a complete family without you, Alli, there's no other way for this to work,\" mom continued. \"Granted, you're always going to be my sister, rather than my daughter-in-law, and you'll always be a sister-in-law to Michael...\" \n\n\"True dat!\" dad called out. \n\n\"But I can promise you that we will always operate on the principle that you're Alex's wife as well,\" she assured us. \"No one will ever dismiss or trivialize that. Except maybe for comedic effect...\" \n\nShe looked at something or someone off-screen and squinted in suspicion for a moment before turning back at us. \"In any event, I'll let you two go for now, you can call back tonight. We'll be staying in, so we can hear from you.\" \n\n\"And Fre and I will be at a hotel, in case you wanna call us in a more explicit way!\" Jeanie called out from off-screen, making mom pinch her eyes and shake her head. \n\n\"Just... make sure you call us here before you make that call, okay?\" mom asked in an almost pleading voice. \"Accepting you two I can do, having a Skype call while you're wrapped in a sheet and covered in sweat might be a little much still.\" \n\n\"No promises, but we'll try,\" Alexa lilted, smiling. \"I love you, Kar.\" \n\n\"Love you too, Alli,\" mom said, smiling. \"Alex, don't misplace her, okay? And don't you dare come back without her.\" \n\n\"I promise, mom.\" I chuckled. \"We'll call you later.\" \n\nI ended the call and Alexa sighed happily and hugged my arm. \"My family...\" \n\n\"Yeah, your wacky little troupe has missed you,\" I said easily as I shut the laptop. \"Three days seemed like three years.\" \n\n\"Three thousand years for me,\" she sighed. \"God, does everyone think I'm a drama queen now?\" \n\nI shook my head. \"There's no right way to handle this situation, Alexa. I think everyone was fumbling around for an answer. My parents thought they were doing the right thing when they thought you were in love with me.\" \n\nShe sighed. \"They probably would have been, if their perceptions had been true. I mean, I'm glad they agreed with you, ultimately, but... wow, this was all so confusing these past few weeks.\" \n\n\"You must've been really heartbroken,\" I said gently, caressing her face. \"You left absolutely everything behind, except your phone and your laptop- even that ratty old teddy bear is sitting on your bed, still.\" \n\nShe blushed. \"I... might have left that stuff there, not only as a memento for you to remember me, but also because I was trying to escape my past. Silly, I know, but... Alex, I was so lost.\" \n\nI turned her face to mine and kissed her lovingly. She almost whimpered and melted into the kiss, losing herself in it, as I did. I loved her so much... \n\nThank God, I wouldn't have to choose between her and my family, because my parents would have been devastated. \n\n*** \n\nThe landlord of the building she'd rented the apartment in was initially reticent about giving back the money, but eventually we compromised, and they kept two month's rent, and gave Alexa back ten. It's not like a whole lot of work had to be done inside the apartment, right? She hadn't even been there four days, after all. \n\nAlexa wanted to stay in a hotel until we headed home. I told her it wasn't necessary, that we could stay in her flat, but she was adamant. I guess I could understand how she felt- that little apartment was nothing but empty misery to her, a painful symbol of everything she thought she'd lost, and her penance. \n\nSo it was with great excitement that she had lead me to a hotel, one she promised me we would enjoy as husband and wife for the next few days. It was evening now, the sun having westered and Paris' famous lights were starting to shine. As the purples, oranges of a romantic sunset gave way to twilight grey, we found ourselves standing on the balcony of the hotel room, with me standing behind her, my arms wrapped around her waist. \n\n\"God, I love Paris,\" she sighed gently, leaning back into me as we wore the complimentary robes that came with the room, silken numbers that let us feel the warm Parisian night. Down below, romantic music played somewhere on the street. \"Promise me we can come back here on vacations?\" \n\n\"As often as you like,\" I replied, smiling and kissing her neck. She moaned quietly and tilted her head to one side, giving me access to her sensitive skin. \"After all, my first and best memories will always be of finding you here.\" \n\n\"You're so romantic,\" she whispered, her voice betraying how in love she was. \"I saw you in the caf\u00e9 and fell in love all over again, Alex. I wish words could describe what I felt about... my husband coming to rescue me, to take me in his arms again...\" \n\nShe shuddered and leaned against the wrought-iron frame that lined our balcony while I kissed along her neck and delicate jaw. Aside from her heartbeat, all I could hear was the dulcet tones of the Parigot music below. \n\n\"Peut-\u00eatre bien qu'ailleurs \n\nUne femme a le c\u0153ur \n\n\u00c9perdu de bonheur \n\nComme moi \n\nEt que d'un geste heureux \n\nElle soul\u00e8ve un peu \n\nLe rideau de soie bleue \n\nComme moi \n\nPour regarder en bas \n\nSon amour qui viendra \n\nLa prendre dans ses bras \n\nComme moi! \n\nElle attend son amour \n\nLes yeux de son amour \n\nLes bras de son amour \n\nComme moi! \n\nPeut-\u00eatre bien aussi \n\nQu'\u00e0 l'instant, elle vit \n\nLe meilleur de sa vie \n\nComme moi \n\nEt qu'en fermant les yeux \n\nElle abandonne un peu \n\nSa main dans ses cheveux \n\nComme moi! \n\nPeut-\u00eatre qu'\u00e0 son c\u0153ur \n\nElle \u00e9pingle une fleur \n\nEt puis regarde l'heure \n\nComme moi \n\nEt pense \u00e0 son amour \n\nAux yeux de son amour \n\nAux bras de son amour \n\n \n\nComme moi \n\nPeut-\u00eatre bien encore \n\nQu'elle entendra plus fort \n\nSon c\u0153ur battre et qu'alors \n\nComme moi \n\nElle voudra crier \n\nEn entendant monter \n\nUn pas dans l'escalier \n\nComme moi \n\nComme moi dans l'instant \n\nO\u00f9 mon c\u0153ur en suspens \n\nSe retient un moment \n\nContre toi \n\nEt puis meurt, mon amour \n\nDans tes yeux, mon amour \n\nDans tes bras mon amour \n\nMon amour!\" \n\nShe sighed and then made a quiet sound of amusement. I moved her lustrous golden hair aside and caressed her cheek. \"What's going on in that beautiful mind of yours?\" \n\nShe nuzzled back against me. \"I remember my time here so well,\" she murmured. \"Endless numbers of times I had sex, but... I don't know if I'd say I ever made love in Paris. Do you know what I mean?\" \n\n\"You weren't in love with any of your partners, is what you're saying?\" I asked. \"Not even Freja?\" \n\nShe smiled. \"You know how much I love Fre and what she means to me. But by the time we were here together, I already knew that I wasn't in love with her, not like I am with you. Yes, I love her deeply, of course, she is my soul-mate... but even that feels now like it was sex, two healthy young women exercising their bodies and passions on one another.\" \n\n\"And have we made love in Paris yet?\" I asked, smiling slyly. Alexa giggled and turned around to face into me, her breasts now pressed to me and her hips snug against mine. Her sapphire eyes gazed up and held me rapt, lost in their unreal depths.  \n\n\"Perhaps earlier back in the apartment was lovemaking,\" she said quietly, trailing her fingers through my hair. \"But there was also so much relief and desperation on my part to feel you again, Alex. It was absolute bliss. But now that I know this is all real, that we're together forever and our lives are intact, I...\" \n\nShe paused as she tried to think of how to say what she was feeling. Twilight was giving way to darkness now, the lights below only barely reaching us. \n\n\"Do you think making love on a balcony here in a Parisian hotel is romantic or just cheesy?\" she asked, her tone letting me understand what she hoped my answer would be. Fortunately, I wouldn't have to lie to my wife to give her the response she wanted. \n\nI smiled at her while I undid the knot of her robe, letting it fall open to reveal her glorious body, which gleamed in the moonlight, enchanting beyond mere words. She smiled almost bashfully as she was exposed, her cheeks slightly rosy. She daintily undid my robe, revealing me. Her hand reached down and stroked my already hardening shaft. I could feel her warmth and sense her desire. \n\n\"Romantic, no question,\" I replied, caressing her hips. \"Nowhere I'd rather be...\" \n\nShe silently moved her legs apart, allowing me to move between them, her eyes never leaving mine. Her hand teased the head of my now hard cock up and down between her slick netherlips. She bit her lip and shivered as my throbbing head brushed her clit. Her free hand reached up and rested around my neck. The night lights of Paris glowed behind her. I was enchanted by my goddess. \n\nA tiny sigh escaped her lips as I held her in place and pushed myself inside her. \n\n\"I love you so much, Alex...\" she breathed as our bodies joined. \n\n*** \n\nFreja moaned and rode up and down, taking her end of the large black dildo inside herself, her body glistening with sweat. Beneath her, Jeanie was lying on her back on the bed in the hotel room they'd rented, her legs apart and on either side of her wife. Freja was kneeling over her while the dildo slurped loudly in between their pussies. \n\nI was lying back against the headrest of our bed while Alexa was kneeling in front of me, squirming up and down on my cock. She panted and flexed her hands on my thighs, her pussy gripping me tightly. We watched the screen as our friends fucked, while they looked on lustily at us. \n\n\"Cannot wait... for you two to get back...\" Freja panted as she ground down on Jeanie, who was gripping her hips with one hand and smacking her wife's ass cheeks with the other; all the while, the dildo plunged obscenely between them. \"We have so much... to celebrate...\" \n\n\"We'll be back soon,\" Alexa rasped, her back making a rhythmic, almost accordion-like motion as she fucked me. \"I just need... some time alone with my husband...\" \n\nFreja nodded, even as she shivered on top of Jeanie. \"We had our honeymoon, it is gnnnnnnnnnnnn... only fair... that you have one, ja?\" \n\n\"We'll have a real one after... our formal wedding...\" my wife struggled to say, her body flushing pink as she approached her third orgasm. \"This is just... badly needed alone-time...\" \n\n\"Auuuugh...\" Freja moaned loudly as Jeanie reached up and pulled back on her shoulders, leaning her backward and fondling her tits. This exposed her long, slender torso and waist. We could now see the black dildo glistening with her wetness as it churned between the pussies that gripped it eagerly. \"Din kaelling! You will kill me!\" \n\n\"Fuck me, Alex!\" Alexa gasped, shuddering as she looked back at me, her heavy-lidded eyes glazed with lust. \"Oh, God, cum in me...\" \n\nI gripped her hips tight and pushed up inside her, straining as the unbridled pleasure of orgasm coursed through me. Alexa gritted her teeth as she forced herself to keep watching the screen and keened loudly as she came. On the screen, Freja was almost convulsing as Jeanie writhed beneath her and they both wailed in unrestrained ecstasy while they climaxed. Whatever hotel they were in, chances are everyone on their floor heard them. Fortunately, we'd turned the volume lower on our end, before everyone in our hotel heard them as well. \n\nAlexa wheezed and ground on top of me lustily as my throbbing cock pumped my cum deep inside her, her fingernails digging into my shins as she fought to hold herself upright, staring at the screen. She leaned further forward, arching her back down until her breasts were pressed to my shins. I could see her pussy greedily swallowing my cock as I came in her, feeling her muscles fluttering around me. \n\nI sagged back into the mattress, feeling very spent, my body covered in sweat. Alexa was breathing heavily on top of me. Onscreen, Freja had laid back on top of Jeanie, the dildo bent over double between their glistening pussies. They murmured to one another and kissed while Jeanie fondled her wife's breasts. Alexa purred as she kissed and nipped at my shins. \n\nWe all lay quietly for some time, too tired to say anything, merely existing in our perfect couples' bliss. Jeanie and Freja both eventually sat up, shuddering and moaning as Freja pulled the dildo out from inside them. I sat up tiredly, with Alexa sitting on me and my cock still deep inside her. We watched as they both put the dildo in their mouths, sucking their cum off it. Alexa giggled as the phallus completely disappeared between their wanton mouths. ",
        "\"You two are such sluts,\" she sighed. \"Each of you must have nearly a foot of dildo down your throats.\" \n\n\"Mmmmmm, damn skippy,\" Jeanie replied, pulling her mouth off the fake cock, which almost looked like a special effects trick, given the length of it. \"Think you can do any better?\" \n\n\"I'll take that challenge, whore, but another time,\" my wife said, nodding. Alexa wasn't one to back down from a challenge. \"Need to give my man a breather, you know.\" \n\n\"That's the thing about rubber and polymer,\" Freja chimed in, winking. \"It doesn't get tired or need a recovery period.\" \n\n\"And which of us three girls just took a glorious load of cum inside herself?\" Alexa asked, smirking evilly. This question gave both Jeanine and Freja pause. They looked at their dildo for a moment before sighing despondently, while the brunette tossed is aside. \n\n\"Fine you win that round, tos,\" Freja muttered. \"Maybe one of us will get a sex change so we can cum inside the other.\" \n\n\"Oh no,\" Jeanie said, shaking her head. \"I ain't becoming a guy. I love my cunt way too much. And I love your cunt way too much to lose access to it. Can't we just, like... get dicks grafted onto us, so we have the best of both worlds?\" \n\n\"I... do not think it works like that,\" Freja said somewhat uncertainly. \"I do not think medical science can create hermaphrodites as yet.\" \n\n\"God, you two are such retards,\" Alexa sighed, making her friends giggle. \"It takes real work to be worse-behaved than me.\" \n\n\"Always happy to accommodate, my love.\" Freja said sweetly, snuggling back against Jeanie now. \"I remember well how good you are at misbehaving.\" \n\nAlexa had snuggled back against me now as well, my cock still buried inside her. No one said anything, just resting after our exertions. Alexa laid her head back against me, her eyes closed. I buried my face against her neck and kissed her tenderly for some time. \n\n\"Oh, Jesus!\" my mother complained loudly. \n\nMy eyes snapped open and I looked at the screen in shock. Alexa did the same and we both gawked at the image of my mother, giving us a very unimpressed look. Freja and Jeanie were nowhere to be seen. \n\n\"Uh... hi, Kar...\" Alexa said, slowly drawing a sheet over our waists, since my mother could clearly see she was impaled on my cock. She made no attempt to cover her breasts with the tangle of bedsheets. \"What a surprise, seeing you...\" \n\n\"Yes, I gathered,\" my mother agreed, her expression not changing. \"Jeanie and Freja Skype-called us moments ago, but imagine my surprise when I log on I see you two horizontal and superimposed, while they're nowhere to be found.\" \n\n\"I am going to kill those two...\" Alexa sighed. \"They called you and then bailed as you logged on.\" \n\n\"I half-expected to see them in a naked pretzel, at least I was prepared for that sight,\" mom muttered. \"My sister and son, on the other hand...\" \n\n\"Well, no worries, your son is officially shrinking inside me faster than a ramen noodle in boiling water.\" Alexa announced. \n\n\"D'you blame me?!\" I exclaimed. \"Mom just caught me with my dick inside you!\" \n\n\"There there,\" my aunt said soothing, reaching back to pat me. \"She birthed you, remember? Technically, your dick's been in her vagina too.\" \n\nI clapped my hands over my ears while mom rolled her eyes. In the background, I could hear dad laughing. \"Well played, Alli!\" \n\n\"Silence, traitor,\" mom grumbled. \"Okay, so we agree revenge on Flopsy and Mopsy is imminent. How's everything going aside from that?\" \n\n\"Perfect,\" Alexa said happily, still making no attempt to cover herself. After all, it was just her sister, even if I was pinned beneath her. \"We're staying in a hotel for the next few days and your son has been incredibly romantic.\" \n\n\"I'm glad to hear it,\" mom said, nodding. \"My little sister deserves no less.\" \n\n\"Wait, what?\" I asked, peeking around from behind Alexa, who I had mostly been hiding behind, avoiding my mother's scrutiny. \"No witticisms about how you expected me to be playing video games or getting my nerd all over her?\" \n\n\"I've no doubt you'll provide me with plenty of said ammo upon your return, Alex, but from the sounds of it, you're demonstrating how much you love Alli, and that's not something I'd mock. You take very good care of her.\" \n\n\"He most certainly is.\" Alexa said easily, settling back into me, taking my hands and settling them on her opulent breasts. I gulped a little. My mom didn't react at all. I guess if I was looking after her baby sister properly, that included boob support. \n\n\"It's safe to come and look,\" mom called to dad offscreen. \"Mostly, anyway.\" \n\n\"Good to hear,\" dad said, appearing onscreen and smiling. \"You two having a good time in Gay Paree?\" \n\n\"Best time I've ever had,\" Alexa said happily, turning her head to smile at me and kissing my cheek. \"So, which of you did he get this hidden romantic side from?\" \n\nMom pointed at dad, while dad pointed at himself. \"He got it from Sappy McSapperson over here,\" mom said. \"Not that I'm not a romantic, but I can't compete with this lug.\" \n\n\"I've always wondered how you two met and got on together,\" Alexa mused, smiling. \"Slightly off topic, I was hoping I could ask a possibly awkward question.\" \n\nMom shrugged. \"You're naked in a Parisian hotel with my son inside you, so sure, fire away.\" \n\nAlexa cleared her throat, not as immune to mom's dry humour as she might want to believe. \"I... you're really okay with Alex and I getting married again?\" \n\n\"Your marriage in the glade was beautiful, Alli, the most beautiful thing we've ever seen,\" mom said gently, smiling. \"But there was nothing legal about it. So, if you two are going to be husband and wife, we'd better find a way to legitimize it, right? Ergo, we'll need to get you officially married somewhere that allows avunculate marriage to have a chance.\" \n\nAlexa nodded. \"I was hoping we could do it here, in Paris. I'd love to get married in Paris.\" \n\nMom nodded. \"We thought of that too, once Alex reminded us how much the city meant to you. So maybe next year, we'll all take a trip there and get you two married. You're a citizen of the EU and the Commonwealth, we're all Commonwealth citizens, so it should be relatively simple.\" \n\n\"As long as Brexit doesn't bugger everything up,\" added my father, earning him a withering look from my mother and an elbow in the ribs. \"Oof, in any event, that sounds perfect. We'll start planning it once you're back.\" \n\nAlexa was getting so excited I could feel her pussy squeezing my cock inside her. She trembled on my lap. After the past few days, clearly her emotions were right on the surface. \n\n\"I can't believe I'm getting my life back,\" she murmured, trying not to cry. \"I thought... I thought I'd lost everything and everyone. But here we are, talking about planning our wedding.\" \n\n\"Just try not to lose Alex's wedding ring between your tits, promise?\" mom suggested, smirking. \n\n\"You're gonna make us get new wedding rings, aren't you?\" Alexa asked, making a show of pouting. We both held up our hands, showing off the ridiculous plastic yellow bands from the Ring Pops we'd married one another with. \n\n\"I'm not even sure what year plastic represents,\" mom said, making a wry face. \"What if we custom make some rings and have those abominations encased inside them? At least that's meaningful.\" \n\n\"I love that idea!\" Alexa exclaimed, sitting up suddenly in excitement, pushing my cock deeper inside and eliciting a grunt of discomfort from me and exposing her breasts again. \"Kar, you're a genius!\" \n\n\"Thanks, I like to think so,\" mom said casually, examining her nails. \"It'll be everything you ever wanted, Alli, I promise.\" \n\n\"Oh, I could throw myself through the screen and kiss you!\" Alexa said in delight, her breasts jiggling around freely, now that I'd let go of them. \n\n\"I don't doubt that, just put some clothes on first,\" mom remarked. \"In any event, we're going to sign off for now, I think I've been traumatized enough for one night.\" \n\nAlexa giggled. \"Probably. Love you, sissy!\" \n\n\"Love you too, squirt. Make her scream, Alex, my baby sister deserves no less!\" \n\n\"Mom!\" I hissed, my hands over my ears again. Mom sauntered off while dad laughed and shut off the Skype call. Alexa sighed in contentment and settled back onto me, a dreamy look in her eyes. \n\n\"Can you believe it?\" she mused, gazing at the plaster reliefs on our ceiling. \"They've really accepted it.\" \n\nI nodded, returning my hands to her breasts and holding her gently. \"I've known for a few days now, and it's only just sinking in for me, especially now that I'm here with you, y'know?\" \n\nAlexa smiled. \"Were you worried you wouldn't be able to find me? Paris is a big place, after all.\" \n\n\"Not really,\" I answered honestly. \"I just assumed you'd come back here to the Seventeenth, because even though you were miserable, you'd want some modicum of familiarity to anchor you, even though you were running from your life.\" \n\nShe turned her head to look at me. \"That confident, were you?\" \n\n\"Probably more than I should have been,\" I admitted. \"But I started inquiring after you once I was here, asking around about a beautiful blonde girl who probably looked heartbroken. Sure enough, people had seen you and I knew I'd been right. I was hoping you might have heard someone was looking for you as well.\" \n\n\"Mmmmm, my clever, clever nephew,\" she purred, settling back even more against me, reaching up and stroking my cheek. \"No wonder I fell in love, you know my heart.\" \n\nShe looked at me, her eyes shining. \"And it's yours until the end of time, Alex...\" \n\nWe kissed slowly and lovingly, lost in one another. I was in no hurry for these next few days to end. \n\n*** \n\nWe'd slept in some, so we ordered up breakfast, then showered and called mom and dad. Mom noted we were actually wearing clothes for this call. Alexa giggled and promised to correct that little detail next time. \n\n\"I can hardly wait...\" mom said dryly. \n\nNow I was letting Alexa show me around Paris, taking me to various famous landmarks- Notre Dame, the tombs of Napoleon and Jim Morrison, the Palace of Versailles... her enthusiasm was infectious, not that I needed much encouragement, since I'm something of a history nerk as is. The city absolutely came alive for me while she acted as my tour guide. \n\nWe were walking across the white stone bridge in Parc Monceau, holding hands and discussing what she loved about Paris. She blushed finally, somewhat embarrassed about her gushing concerning the city. \n\n\"You probably think I'm stuck on this place and want to just keep you here forever,\" she murmured. \"A part of me really does love this city.\" \n\nI squeezed her hand. \"So we'll work hard, make a skillion dollars and buy ourselves a house or apartment here. That way we can come and stay in Paris whenever we feel like it. Be a great escape in the summer for the kids, wouldn't it?\" \n\nShe stopped and looked up into my eyes, holding my hands in hers. \"You really mean that, don't you? About having a home here... and kids.\" \n\nI nodded. \"Kids've always been an ambition of mine. Y'gotta admit, it would be a real tragedy if my mom and dad didn't become grandparents.\" \n\nShe giggled at the thought. \"Oh, God, Michael as a grandfather. The mind doth boggle.\" \n\n\"We pretty much have to accept the fact that our children will think tartan pants are cool and be addicted to the Bay City Rollers.\" I said cheerfully. \"Sounds pretty damn cool, doesn't it?\" \n\n\"They'll have the most amazing grandparents,\" she said dreamily. \"And their crazy Aunts Jeanie and Freja...\" \n\n\"They're wonderful friends,\" I agreed. \"They offered to act as my wives if I never found you, devote themselves to me, or some such thing.\" \n\nAlexa giggled. \"Sounds like Freja. She can't stand to see people unhappy. She once saw a young guy crying on a bench in the park on her university campus because he'd flunked out and she took him to her dorm and had sex with him, just to cheer him up.\" \n\n\"Of course,\" I laughed cheerfully. \"Seems to be her answer to everything.\" \n\n\"Not that I blame her, mind,\" Alexa allowed, tracing her fingernail over the back of my hand in tiny patterns. \"It's a pretty amazing solution to a little of problems, not to mention instant attitude adjustment. I might've done that a few times over the course of my life. Maybe a few dozen. Thousand...\" \n\n\"Your devotion to hedonism is well-documented and lauded,\" I said, smiling. \"And I wouldn't change a thing.\" \n\nShe looked a little sheepish. \"You don't think I was... too promiscuous or liberated in my sexual activity?\" \n\nI shook my head. \"No. If I got laid as much as you did, I'd need surgery on my hands, arms and shoulders from all the high-fives I'd be getting. To Hell with little people and their double standards. There aren't enough hours in the day to tell you how much I love you or how perfect you are.\" \n\nAlexa blushed now. \"You sure know how to make a girl feel wanted.\" \n\n\"I couldn't feel about anyone else the way I feel about you,\" I said honestly. \"Doesn't matter who, it wouldn't be anywhere close.\" \n\nShe sighed and shook her head. \"What're we gonna do about that Heather chick back home? I somehow doubt she'll be too impressed when she finds out that you chose your aunt over her. According to Karen, she was getting pretty into you.\" \n\nI made a wry face. \"I'm not thinking about her right now. There's only you. Never worry about that.\" \n\n\"I don't,\" she said softly. \"In all my recent life, the one thing I never doubted was how much you loved me, Alex. I've never felt anything like it, how deeply you care for me. I never stood a chance, once I knew our feelings were mutual.\" \n\nOur walk took us back to the Square des Epinettes, where we sat down on a bench, holding hands and enjoying one another's company. We hadn't been there long when a woman and her little girl walked by. The girl paused upon seeing us, let go of her mother's hand and trotted over to us. Alexa noticed her and smiled. \n\n\"Well, hello again.\" Alexa said in her impeccable Parisian French. \n\nThe young girl looked at me. \"Is that him?\" \n\nAlexa nodded. \n\n\"I told you he'd come for you...\" the girl said, smiling before giving Alexa a big hug. Alexa wrestled back her tears as she hugged the girl and then waved as she ran back to her mom and wandered into the park. Alexa wiped away a tear and smiled at me. \n\n\"She saw me in the caf\u00e9 the day before you found me,\" she explained. \"She asked why my heart was so sad and I told her I'd had to leave the man I loved more than anything behind. She patted my hand and told me that if you really loved me, you'd come for me. Guess she was right, hm?\" \n\n\"Out of the mouths of babes...\" I chuckled, putting my arm around her. \n\n*** \n\nWe were sitting in the caf\u00e9 I'd found her in, greeted by the proprietors were warm smiles and led to a secluded table. Once we had our drinks, I opened the laptop and initiated a Skype call to mom and dad. Mom answered, apparently squinting at her cellphone screen. The background was dark and chaotic, very loud. \n\n\"I'm glad you called, but we're at karaoke,\" she yelled over the cacophony. \"As you probably deduced.\" \n\n\"No kidding,\" I said, trying to keep my own voice down. \"Where's dad?\" \n\nMom turned the phone up toward the stage, where dad was dominating, singing The Immigrant Song by Zeppelin. The crowd was responding very enthusiastically, and I was obliged to turn the sound down on my laptop even further. Soon enough, I just plugged in the earphones, Alexa and I each using one in order to hear mom talk. \n\n\"So you guys are doing the karaoke thing, even if Alexa and I or the girls aren't around?\" I asked. \n\nMom shrugged. \"Your father's right, it was our thing before you or Alli came along. It's how I met him, after all. It's good to reconnect with your past sometimes.\" \n\nAlexa looked at me. \"We don't have anything like that, do we?\" \n\n\"Not unless you get off standing around awkwardly in airport terminals,\" I sighed. \"I have to admit, even Jeanie and Freja have us beat there.\" \n\n\"Boy, do they ever,\" my aunt giggled. \"I've never seen anything like that in my life. Feels weird, being the average couple.\" \n\n\"Don't get too stuck on the 'normal' thing there, Cersei,\" mom commented. \"You and Jamie definitely don't qualify. Your brother-in-law and I are the only ones who register as a heteronormative couple in this society.\" \n\n\"Not even Jeanie and Freja?\" I asked, surprised to hear mom talk about a gay marriage as outside of normal. \n\n\"There's nothing normal about those two,\" mom replied simply. \"They're the world's most absurd lesbian couple, and that's how they're happy. Let them have it.\" \n\n\"Pretty sure no force on Earth could stop them,\" Alexa noted as she sipped on her latte. \"God knows, I ain't trying.\" \n\n\"Probably because you're the third tine on that trident of unholy urges,\" mom said, putting a hand over one ear to help herself hear us. \n\n\"What does that make me on the trident?\" I asked. \n\n\"Oh, you're the solid shaft...\" Alexa answered readily. My mother coughed and muttered something I couldn't quite hear before shaking her head. It was funny, but it reminded me of exactly what we were asking my parents to get used to on our behalf. Due to the noise in the background, she excused herself and ended the call, insisting we call back tomorrow. \n\n\"Think we should call the Bobbsey Twins?\" I asked, taking my earbud out. Alexa shook her head. \"They're fine without us for now. And there's only so many times I can watch one of them get their fist stuck in the other's ass before it feels like a re-run I didn't need to see.\" \n\n\"How late is this caf\u00e9 open, anyway?\" I asked, looking around. \"It's freaking midnight.\" \n\n\"Some cafes stay open very late, so that people who stayed out and had a few too many can sober up before heading home,\" my wife replied, sipping at her drink. \"However, not much fun to be had, per se...\" \n\nShe smiled at me and traced a fingernail over the back of my hand and up to my wrist while smiling at me seductively. \"It's late and most of the crowds will be gone. We could go and have some fun in the Jardin du Luxembourg...\" \n\nI grinned and nodded. \"Lead on, my lovely bride...\" \n\n*** \n\nThe most famous garden in Paris, and therefore one of the most famous in the world, the Jardin du Luxembourg was dark except for its primary paths. Far away from any illumination sources, Alexa and I were squirming and panting while I fucked her. Her back was up against a tree and her thighs sat on mine, her ankles crossed behind my waist. She gazed into my eyes as she squeezed her tight pussy around my cock, which slid in and out of her rhythmically. Not only the tree, but many clusters of bushes concealed us from view. \n\nHer eyes glinted in excitement as we fucked, clearly thrilled to be here with me. The smile of delight on her angelic features sent shivers through me. Was there a luckier husband or man alive than me? \n\n\"Our life together, Alex...\" she whispered huskily, grinding on my cock. \"It's going to be so wonderful. My devotion to you... is total...\" \n\nI kissed her feverishly, not at all worried about anyone seeing us. She'd explained that even the Paris gendarmes didn't really care if you fucked in this park late at night, so long as you were discrete and not making obscene amounts of noise. People might walk by on some of the paths, they would ignore us. Our tongues tangled between our mouths while I plunged in and out of her, squeezing her magnificent ass cheeks with my hands. I could feel her opulent breasts pressed to my chest, her shirt pulled up to her collarbone. \n\n\"Everything we ever dreamed about, talked about so wistfully,\" she rasped. \"We're really going to have it, Alex. Can you believe it?\" \n\n\"I know,\" I breathed, enthralled by the feeling of her wet, velvety pussy squeezing and caressing my cock. \"It's almost unreal. If I weren't here with you now, I'd think I was having a fevered dream.\" ",
        "Her fingernails grazed firmly over my chest, her eyes flashing with unrestrained lust. Few things turned us both on more than public sex, and here we were, in Paris, fucking in a world-famous park. Her heavy breathing and the sounds of her wetness were all I could hear. Everything else around me had fallen away. There were no worries or concerns about what came tomorrow, there was only her. \n\nWe rocked and churned with increasing urgency. She shuddered and moaned as I leaned in and slid my tongue around one of her nipples before sucking it into my mouth. Her fingernails were now digging into my back as I bit on the nipple and tugged with my teeth, the delicious sting sending her into ecstasy. I could feel her clenching and squeezing around me harder and harder. She was almost hissing now, writhing on my lap. \n\n\"Fuck...\" she gasped, pulling herself as close to me as she could. Her whole body was trembling. I gripped her tight, my fingers leaving red welts on her ass cheeks. I sucked hungrily on her nipple, then moved to the other one. Alexa groaned shamelessly. If anyone was walking by, they'd definitely have heard her and noticed us. \n\n\"I love you so much...\" I murmured around her nipple, feeling the tingling heat rising in my loins again. She whimpered and crushed herself to me, shaking almost uncontrollably. \n\n\"Alex!\" she gasped loudly. \n\nI pulled away from her nipple and brought my face up to hers- we stared deep into one another's eyes as we strained, sharing that peak moment of desire before bliss consumed us. Locked in her gaze, I began cumming deep inside her, feeling her womanhood clenching me desperately as she climaxed. I jammed my mouth against hers and we kissed feverishly, needing to feel each other's rapture. \n\nPanting heavily, we rested our foreheads against one another, my cock still throbbing inside her slick pussy. Her eyes fluttered open, glazed with pleasure as she caressed my cheek. Her mouth was moving as she whispered something so quietly it was almost imperceptible to me, even though her lips were scantly an inch from mine. This moment never needed to end, as far as I was concerned. \n\n\"Love me?\" she asked quietly. \n\n\"Forever and then again.\" I replied, meaning it. \n\n\"Thank you for coming for me, Alex,\" she said, her voice like crystal bells in my ears. \"There's never been a man more perfect than you.\" \n\nI smiled. \"High praise from the woman who is closer to Galadriel than anyone else in history.\" \n\nWe kissed again, deeply, serenely and lovingly. I held her warm, lush body to mine, reveling in the feel of her. I shivered again, lost in wonder at the sheer joy of this moment- making love to my goddess here in Paris. What had I ever done to deserve this? \n\nShe smiled and slowly clambered off my thighs, sinking down to her knees and taking my cock in her hands. She kissed it almost reverently before taking it inside her mouth and slowly bobbing back and forth, cleaning our mingled cum from my length. She moaned quietly, her eyes closed while my fingers tangled in her golden hair. \n\nShe looked up at me and smiled again, squeezing her breasts together, enveloping my cock between them. She massaged it with her softness, all the while her eyes locked with mine. Finally, she leaned back and began pulling up my boxers and pants, harnessing me into respectability, but not before giving my manhood one last kiss. She then stood, sliding her thong up her legs and lowering her skirt. Hand in hand, we walked slowly through the park, simply enjoying one another's company on this warm Paris night. \n\n\"If we became stupidly wealthy, where would we live?\" she asked as we strolled. \"Wherever we like.\" \n\nI pondered. \"Well, back home would be primary,\" I stated. \"But I'd love to have a house or apartment here in Paris with you. And then a place in Maui.\" \n\n\"Ooh, Maui,\" she said, smiling. \"I've never been.\" \n\nI nodded. \"We went for a few weeks a few summers ago. Most amazing place I've ever visited. Dad and I both really found our creative writing grooves there. We were enchanted with the endless bamboo forests, the waterfalls, the kukui trees, the little towns, the wild flowers...\" \n\n\"Then we'll have a place there, too.\" Alexa said readily. \"I'd love a little house in the highlands of Scotland.\" \n\n\"That sounds pleasant.\" \n\nShe nodded. \"And it'd be close to Cardiff, which is where mom is buried, that's important to me.\" \n\n\"I'm sure mom'd love that too,\" I agreed. \"Not any place like Berlin or Copenhagen?\" \n\nShe smiled. \"If we're in Paris, they're hardly far away, so no need, my love. I want us to have places far apart and different from one another. Can you think of anywhere else?\" \n\n\"Sure,\" I chuckled. \"I'd love to have a little apartment in Harajuku in Tokyo or a house in Kagoshima.\" \n\n\"That's the anime nerk in you talking.\" Alexa giggled. \n\n\"First of all, the term is otaku, thank you very much,\" I said airily. \"Secondly, it's dad's fault, he got me into all his Seventies anime, like Star Blazers, Battle of the Planets and Captain Harlock. He's at least as big an anime nerk as I am.\" \n\n\"Bigger, technically,\" she pointed out. \"I was snooping on your laptop one night and saw you were writing erotic fiction about that Star Blazers show.\" \n\n\"Busted,\" I sighed. \"Yeah, maybe I'll publish it online one day. But yeah, a house in Japan would be awesome. Dad and I could visit the Toho studios and get them to let us wear Godzilla suits. Something to tick off the bucket list, y'know?\" \n\n\"Boys and their toys...\" she sighed contentedly as she rested her head on my arm while we walked through the night, ambling back to our hotel. \n\n*** \n\n\"You sure you don't want to stay longer?\" mom asked as she talked to us over Skype. Things seemed to strangely quiet there. The gravelly tones of Leonard Cohen's voice could be heard in the background. \"You two are most certainly entitled to your private time, you know.\" \n\n\"We talked about it, Kar, we agreed it was time to come home.\" Alexa said, smiling warmly. \"Yeah, I love Paris, but I love my family more. There's so much to do and so much to deal with, to face up to.\" \n\nMom smiled. \"Don't worry yourself, Alli. We'll get it worked out. Like we told you, we'll look at getting the avunculate laws changed, but we're not going to make some crazy public challenge out of it, because you two will never get a moment's peace if that happens. Only thing I'd recommend is for you to keep your surname, or at hyphenate.\" \n\n\"Blackwell-De Bourne?\" \n\nMom nodded. \"My surname is technically Gordon-De Bourne, I'm happiest just using De Bourne. As for you and I being sisters, aside from anyone who already knows us, people are not likely to clue in, since our maiden names are different. That should be the questions down.\" \n\n\"Does anyone know?\" my aunt asked. \n\nMom shrugged. \"Just the Stevensons, and they're thrilled for you. They were talking with one another the night after the hookah party we held and thought it was too bad you were related, because you'd make a perfect couple. Aside from that, just Jeanie, Freja and the Kjaer family.\" \n\n\"Best to keep the circle tight initially, I guess,\" Alexa agreed. \"We'll be back tomorrow.\" \n\nMom wiped at a tear in the corner of her eye. \"It'll be so nice to have you back, little sister, where you belong.\" \n\nAlexa choked back a small sab and smiled, her own eyes glistening. \"It'll be wonderful to be back with my crazy little family, there's nothing I want more. But, speaking of... where is everyone? It's suspiciously quiet there. Just you and Leonard Cohen?\" \n\nMom smirked. \"Well, Freja and Jeanie joined us at karaoke and started drinking Helen Kellers with Michael.\" \n\n\"Oh, shit!\" I laughed. \n\n\"What're Helen Kellers?\" Alexa asked. \n\n\"Shots from Hell,\" mom explained. \"One half absinthe and one half Bacardi One-Fifty-One. A couple of those and you're blind, deaf and you can't speak coherently.\" \n\n\"Jeebus,\" my aunt muttered. \"Jeanie would be flat on her back after one of those.\" \n\n\"She had three,\" mom said dryly. \"And Freja had four before she fell over. They're probably out of commission for the day.\" \n\n\"And Michael?\" \n\n\"He must've had twenty of them,\" mom sighed. \"People kept buying them for him, fascinated by watching him drink and keep singing. He's upstairs nursing a hangover that would make JFK wince.\" \n\nI was shaking my head while Alexa was snickering mightily. \"Oh dear. Is he gonna be alright?\" \n\n\"Well, he probably wishes he was dead, but it takes a lot more than Helen Kellers to kill that mastodon,\" pointed out my mother. \"He'll eventually get up, eat everything in the damn house because he's ravenous...\" \n\n\"Including you?\" Alexa teased. \n\n\"Wouldn't you like to know,\" mom said blithely, waving the question off. \"In any event, I'll go shopping and restock before you get back. Where should we meet you? At the airport, or should we wait here at the house?\" \n\n\"Meet us at the house,\" I chimed in. \"If we've learned anything from visit, it's that Alexa's meetings at airports involve impact trauma.\" \n\n\"The husband has spoken,\" Alexa said cheerfully. \"We'll see you at the house.\" \n\nMom nodded. \"Bien. We'll send a limo to pick you up. Just message me your ETA once you know it.\" \n\nA few more pleasantries and tears and then Alexa ended the call. She turned to me and smiled, wiping at her eye. \"So? What's our final night in Paris gonna be like? We haven't even scratched the surface, really.\" \n\nI grinned. \"Let's get you an elegant dress, I'll get a suit, and we'll go to a really good restaurant. After that, I saw something about an orchestra holding a nighttime concert playing Berlioz.\" \n\nI love Berlioz...\" Alexa breathed, enchanted with the notion. \"And then, you'll bring me back here and make passionate love to me?\" \n\nI nodded. \"The most beautiful and wonderful woman on earth deserves no less.\" \n\nAlexa threw herself against me, tackling me to the bed. It occurred to me as she tore my clothes off that the plans we'd laid out might in jeopardy suddenly. \n\n*** \n\nThe evening had been perfection. Alexa's dress had been a stunning royal blue, accented with silver. She'd looked divine. After dinner at an elegant restaurant, we gone to the park and listened to Berlioz. I'd spent most of the time subtly watching her, falling more and more in love with each passing moment. \n\nWe lay now in a tangle of sheets, breathing heavily after our lovemaking. We both stared at the baroque ceiling, clasping hands. We were utterly spent. \n\n\"What do you think our children'll be like?\" she asked quietly. \n\nIt was kind of a loaded question, given how we were blood-related, but I didn't quip. I smiled and squeezed her hand. \"Beautiful like you. Probably my goofy sense of humour.\" \n\n\"You think they'll be alright?\" \n\n\"The rate of passing on congenital defects in avunculate childbirth is comparatively low,\" I mused. \"And none of our families have any real horrible genetic defects, excepting occasional tinge of alcoholism in the Gordons and Blackwells, right? Besides, now that mom and dad are on board, they'll be all over it when you did get pregnant. Dad'll somehow borrow a CRISPR contraption and edit out any difficulties.\" \n\nShe giggled. \"I can actually see that. I can't wait to have your children, Alex. Until I fell in love with you, I wasn't terribly committed to the idea of kids. Now I can't imagine life without them.\" \n\n\"Makes two of us,\" I agreed. \"Just don't have 'em too quickly, I'm looking forward to trying endless times to knock you up.\" \n\n\"Then get to work, buster...\" she said as she rolled on top of me. \n\n*** \n\nWe were sitting in the limo as it took us home. Alexa was holding my hand, but I could tell she was fit to burst with anticipation. Her knee was bouncing subtly, and she was staring out the window, saying nothing. I smiled to myself and just let her muse. She had a lot to adjust to. As for me, I felt like my life was just beginning. \n\nWe pulled up to the house and my family was waiting outside- mom, dad, Freja, Jeanie, even the Stevensons. Alexa was trembling as we headed up the walkway. I could tell she wanted to run, but she held my hand and took her time. Then she was hugging mom, the two of them crying while dad embraced them both. Freja and Jeanie were next, welcoming her home between sobs. \n\nWe all walked inside, babbling excitedly about plans- marriage, university, children... \n\nThere was still so much to do. But life was complete. \n\n*** \n\nAuthor's Notes: A little hiatus for Alex and Alexa now. I'll pick it up again in the new year. The next story is already planned pretty much, at least from a framework point of view. Now it just needs a good fleshing out. It's entirely possible the story after that is planned too. We'll see. \n\nThe end is rather short and sweet. I did it that way on purpose. I could've kept going and going, but that'd just eat into the next storyline, which I have no intention of doing. Don't bother with tantrum reviews or comments about it being short, it was intentional, and you're not a literature scholar. \n\nThis was a feel-good chapter. Some sex and some comedy, but mostly it was just about giving our protagonists the opportunity to be in love with no worries whatsoever. I think we can all agree they deserve it after everything they've been through. As promised, this is the 'Christmas' chapter, even though it's summer. \n\nYou probably guessed already, but a lot of the dialogue was meant to just set up or hint at events in upcoming chapters in the next arcs. If dialogue makes you cry, I'm sure I've got some butthurt forms here for you somewhere. Fill 'em out and then I'll put them in the KMA file folder. Sound like a plan? \n\nSorry to regular and sane readers if I seem a little salty or snide in these Author's Notes on occasion, but morons are leaving PMs and reviews constantly that make a brain with two functioning lobes hurt. Just know said jibes are not directed at you, just the knuckle-draggers. \n\nAlex writing erotic fiction about Space Battleship Yamato is not foreshadowing any projects I have in the works. Nope. None whatsoever. \n\n*gets hit in the back of the head with the Dildo of Truth* \n\nShit. Okay, maybe I'm working on that. \n\nI've really gotta get to My Naughty Neighbour next, I'm getting an average of seven PM's a day asking me when the next chapter will be ready. And the answer is... shortly. With any luck, before the end of the year. If not, just shortly after. Getting Alex and Alexa squared away became necessary, interfering with my regular publishing schedule. \n\nI'm submitting this for publication on the 20<sup>th</sup>, thinking some extra time might be necessary because of the holidays, but if it shows up a day or two early, my apologies for not nailing the Christmas date right on the head. \n\n2018 will see a few new projects take form as I wrap up some current ones. No, you may not ask which ones they are. It's tough being an idea hamster, ya know. \n\nIn any event, Merry Christmas/Happy Festivus/whatever speaks to you. Time for me to go and putter around on the bridge of a starship. \n\nKeep your stick on the ice! \n\nManagement"
    ],
    "authorname": "BiscuitHammer",
    "tags": [
        "aunt nephew incest",
        "incest romance",
        "reunited",
        "resolution",
        "humour",
        "lesbian",
        "awkwardness"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/alex-and-alexa-ch-17"
}
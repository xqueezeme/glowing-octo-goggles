{
    "title": "What The Cat Dragged In Ch. 27",
    "pages": [
        "Hi everyone,\n\nHere we are again, another chapter. A bit longer than some of the others. I hope you enjoy and as always, let me know what you think! :)\n\npsyche b\n\n27. The Commitments\n\nCreed watched the frail. She was just sitting there, staring at a spot on the floor in front of her. She wasn't gone, not like she was just before they left Chicago, but seeing her that way still made him fucking jumpy.\n\nIt wasn't like he'd never delivered bad news before. Usually he didn't give a shit how the person took it. He'd thought about softening it, but he didn't have the words to do that. He figured she would have suspected something worse if he'd tried. \n\nFinally, he couldn't stand the silence any longer. \"Say something.\" It came out sharper than he intended.\n\nA little shrug with one shoulder, her eyes were still on the floor. \"I don't know what to say. My mother never was terribly stable. Cody's hurt; she thinks I'm dead...\" She took a deep breath. \"I suppose it was all too much.\" Her voice was flat, cold.\n\n\"Frail-\"\n\n\"I'm going to take a bath.\" She was up and gone out of the small room before he had a chance to finish.\n\nHe didn't know what the fuck he was going to say anyway. 'The bitch never did shit to protect you when you needed it.' 'I'd say good riddance, but she fucked it up.' 'It ain't worth ruining your day over.' She probably wouldn't think of any of that as comforting, but he wasn't the comforting type. \n\nHe heard the water running. That only added to itch of nervousness. She sat in the tub when he was with her, and when she was upset. Not just the ordinary kind of upset either. The kind that made his teeth hurt just to think about it. The kind that he couldn't do a fucking thing about. \n\nCreed stared at the narrow hall and wondered what the fuck he was doing there in the first place. He couldn't fix it, he couldn't comfort her. Hell it was probably his goddamn fault to begin with. He glanced at the phone. It would only take one call. He could tell the old man that he was leaving, but she was staying behind. He'd be out the door before she even got out of the bathroom. Give her chance at something normal. That's what everybody wanted, right? Everybody except her.\n\nCreed shook his head. He'd spent so damn much time with Jimmy in the past few weeks; he was starting to think like him. Another idea was starting to take shape, but if he was going to move forward with it, he needed some information. He grabbed his phone and dialed Conlon. \n\n\"Well?\" He didn't bother with small talk.\n\nConlon didn't bother with small talk either. \"She's still in the hospital, but she's going to be transferred to a private facility later this afternoon. From what I've been told, she's paranoid and hearing voices.\"\n\n\"Fucking great.\" He took a deep breath. \"What about your other project?\"\n\n\"All are located. Weird thing though, half of them have had fatal accidents.\"\n\nCreed's eyebrows twitched in surprise, but he didn't let any of that creep into his voice. \"Clumsy fuckers. Suppose they've been replaced already too.\"\n\n\"Frankly I don't think Cavallo could get anybody to sit next to him at the movies at the moment, let alone hire anyone in that particular capacity.\"\n\nThat had Creed's attention. \"Why's that?\"\n\n\"Among other things, he watched you smash his favorite interrogator's head like a ripe melon on live video feed. That was enough to scare him shitless. I don't know if anybody was with him or not, but word got out.\" There was a little smirk in Conlon's voice. \"Nobody with half a brain wants to cross you when you're in a good mood, let alone when you're back from the dead and beyond pissed off.\"\n\n\"Can't fault that logic. He looking for Stan?\"\n\n\"Most of his goons are in hiding. The ones who aren't couldn't find their own asses with both hands and a map. Besides, Stan's keeping himself in the public eye. All the anti-mutant crap he's stirring and the 'attacks' on his family has the CoH convinced he needs round the clock security. They're halfway decent too, pro could get to him though.\" \n\n\"Least we know where he is. Cavallo's in hiding I suppose?\"\n\n\"Oh yeah, but as far as I can tell he's only got one hiding place. Shouldn't be too difficult to get hold of as long as he stays put.\"\n\nCreed gave a self-satisfied smirk. At the end of the day, they were all fucking cowards. Nice to know the world hadn't changed much.\n\n*~*~*~*~*~*\n\nKelly sat in the narrow tub, her knees drawn up. Her eyes were fixed on the cracked tile just above the faucet, her body rocked slowly. The water had gone tepid around her, but she barely noticed. She knew she should have felt something. Should have been angry or sad or something other than the flat resigned feeling that crowded in and filled the space in her head and her heart.\n\nIt should have been more.\n\nThis was her mother. The woman who'd done her best to fix all the little hurts of childhood, who'd read her books and kissed her goodnight and comforted her when she had a nightmare or when a storm woke her. All those things that are irreplaceable in the heart, all those experiences that can only sneak in narrow windows or be shut out forever. \n\nShe should have felt something for that. She would have, if that had been the whole story.\n\nThe withdrawal hadn't happened overnight. Logically, Kelly knew that if part of her mother hadn't been broken to begin with, that it wouldn't have happened at all. Logic didn't enter into affairs of the heart or the needs of a child. Each time her mother couldn't cope, each time she left Kelly to be the adult for Cody before she knew how to be an adult for herself, something changed. The bruises on her heart deepened, the trust that had been there began to erode.\n\nIt was nothing less than a series of abandonments, each following the other in a parade that Kelly had done her best to ignore. Had to ignore, for her own sanity and for Cody. That didn't mean it hadn't hurt, she'd just gotten good at ignoring the pain. \n\nNow it was all there again, all at the surface, all clamoring for attention, refusing to be pushed aside or buried any longer.\n\nKelly's rocking slowed and a tear trickled down her cheek. She took a deep, wrenching breath and stopped holding it back.\n\n*~*~*~*~*~*\n\nCreed heard the deep sob. Even from that distance, through the fucking walls, he could hear the agony that laced that sound. He dialed again. \"Jimmy, I need your bike.\"\n\n\"Fuck you!\"\n\n\"I won't fucking ask the next time.\"\n\nJimmy sighed. \"Why do you want it?\"\n\nCreed rolled his eyes. \"C'mon Jimmy-\"\n\n\"You expect me to say yes when you won't even answer the goddamn question?\"\n\nA low growl. \"What? You think I'm gonna take her on a job and be back before dinner?\"\n\n\"Never know with you.\"\n\nCreed heard another painful sob. He took a deep breath. \"The frail's bitch of a mother tried to off herself last night.\"\n\nSilence. \"Shit.\"\n\n\"Shit is right.\"\n\n\"And you wanna get away from her.\" There was a sneer in his voice.\n\n\"You fucking idiot. That's what you would do. I want to get her out of here for a little while, shake her up a little. Pull her mind out of the shithole those fucking bastards keep shoving it into.\" He took a deep breath. \"Well?\" He glanced toward the hallway and focused on the small sounds leaking out. He could still hear sobbing, but the sobs were weaker, more normal sounding.\n\nJimmy gave a deep sigh. \"When?\"\n\n\"Dunno, 'round noon probably. Give her time to get herself together.\"\n\nJimmy sighed. \"I'll bring the keys by in an hour or so. If you make me regret this-\"\n\n\"Yeah, yeah. You'll kill me.\" Creed rolled his eyes. \"Honest to fucking God Jimmy, take ten minutes and think up a new threat.\" He ended the call and listened to the sounds filtering through from the bathroom.\n\nEven to his hypersensitive ears there was nothing but silence. He moved closer. Still there was silence. He stood in front of the door. From what he could hear, she wasn't even moving in the tub. She wouldn't...no, that was ridiculous. The frail had been through a lot, but she wasn't that close to falling apart. At least, he didn't think she was. \n\nHe opened the door slowly, wanting to see and not wanting to see at the same time, even if he would never admit that to anyone. She was curled up, her head resting against the wall. Just the sight of her made his chest hurt. He grabbed a towel and held it out for her.\n\n\"C'mon frail.\" His voice was soft.\n\nShe looked up at him. For a moment he thought she was going to protest, but she started to slowly unwrap her arms from her legs. He could see her starting to shiver. He grasped her hand, giving her something to lean on as she stood. \n\n\"Jesus Christ, you're freezing.\" He wrapped the towel around her. She moved closer to him and waited. He pulled her close against his chest. \"What'd you do? Sit in cold water?\"\n\n\"Not at first.\" \n\nHe felt her knees tremble. That tiny sign of weakness reached the feral protector in him, a growl rose in his chest, his claws lengthened. She looked up at him.\n\nHe retracted his claws again. \"Bed.\"\n\nShe shook her head. \"I just got up-\"\n\n\"So? You expecting the Queen for high tea?\" He gripped her upper arm and pulled her toward the bedroom.\n\n*~*~*~*~*~*\n\nKelly curled up with her back against his chest. He'd taken the towel away from her as soon as she'd dried off. She wasn't at all surprised when he undressed too. The warmth of his skin was probably the best thing in the world for her anyway. His hand wandered over her stomach, down over her leg and then back up to her breasts. Her mind hadn't really stopped, but at least the sharpest pain of shock had subsided to a dull throbbing.\n\n\"She's going to be in the hospital for awhile?\"\n\n\"Yeah. They're moving her to a private facility later today.\"\n\n\"That fast? It only happened a few hours ago.\"\n\nHis hand paused, then continued again. \"No, it didn't.\"\n\nShe looked over her shoulder, a nervous kind of upset rising. \"What do you mean?\"\n\nHe pulled her closer. \"Conlon called last night.\"\n\nShe turned over and pulled the towel over herself. \"You didn't tell me?\"\n\n\"Frail-\"\n\n\"She's my mother! She's a pretty poor example of one, but she's the only one I've got.\"\n\nHe gripped her upper arms and pinned her to the bed, his face inches from hers. She could see the anger in his eyes. \"So if I woke you up in the middle of the fucking night, what could you have done?\" His voice came out in a dangerous growl.\n\n\"I-\"\n\n\"You? You what? You're gonna go see her? Wave a magic wand and make it all better?\"\n\n\"No, but...but I just slept through it.\" Tears were stinging her eyes again.\n\n\"What were you dreaming about last night?\" Some of the anger had faded, but he still held her in place, his face inches from hers.\n\nKelly's mind raced to catch a tendril of ether. She squirmed in his tight grip. \"I-I don't know.\"\n\n\"Wasn't a nightmare, was it?\" His intense eyes held nothing but certainty.\n\nShe stopped struggling as the realization hit her. \"No.\"\n\n\"You've had nightmares just about every night since you woke up and if you haven't been screaming or crying or shaking you've been unconscious because you were healing. Last night you were relaxed. Just relaxed, sound asleep. I would've been fucking nuts to wake you up outta that to tell you something you couldn't do a goddamn thing about.\"\n\nHer body went limp. He let her go. Kelly put her back to him again and he settled around her. \"It's just a mess. Everything is a mess and I don't know where to start to clean it up.\"\n\nHe went back to stroking her stomach. \"You can't. Fucking sucks, but it's the truth.\"\n\nShe laced her fingers with his. \"I'm in the middle of it.\"\n\nHe gripped her hand. \"Don't mean you caused it.\" \n\nKelly relaxed into him, her racing mind starting to finally slow down. She started to notice the tension in his body though. She waited. She knew that whatever it was would come out when he was ready.\n\n\"You think your mother took Panacea?\"\n\nKelly had never considered the question before. \"I doubt it, not on her own.\"\n\n\"If Stan gave it to her?\"\n\nShe thought about that. \"If he gave her something and told her it was a vitamin or even a tranquilizer she probably wouldn't have asked any questions. She always took handfuls of vitamins every morning and she had a whole collection of sleeping pills and anti-anxiety pills and God knows what else. Sometimes when I was locked up she'd offer me something to make me sleep or calm me down or whatever she thought I needed.\"\n\nHe lifted his head to look down at her. \"You ever take it?\"\n\n\"Once.\" She closed her eyes. \"It was the second time I was locked up. It was so awful and when she asked me if I wanted something to help me sleep I said yes. I slept but when I woke up I didn't know where I was or why I was there. I couldn't think, I couldn't focus.\" She shivered at the memory. He pulled her closer. She let him shelter her while the fearful memory pulled at her and then faded. She took a deep breath. \"Do you think Stan overdosed her?\"\n\n\"What I know about Panacea is sketchy at best. Conlon said she was paranoid and hearing voices, from what I know, that sounds like she was on it and then didn't have it.\"\n\nShe sighed. \"Or she snapped.\"\n\nHe kissed the top of her head, his hands drifting over her body in silence again. Kelly was starting to nod off, escaping into that quiet comfortable moment. Victor was right; there was nothing she could do. Even if she went to the hospital now it would probably do more harm than good. Her mother believed her to be dead. The last thing an unsettled mind needed was a forcible rearrangement of the most basic beliefs. \n\nShe told herself that her mother would be cared for. It would be a PR nightmare for Stan if it got out that his beloved, fragile wife, who had recently lost both of her children, was being warehoused at some substandard state-run asylum. Of course, that left-\n\n\"Cody!\" She sat up. \"Even if someone's watching him, Stan's still the one who makes medical decisions-\"\n\n\"I called Joe last night, told him to get a lawyer.\" Victor pulled her back down again. \"Conlon'll keep Joe up to date, Joe will decide if he wants to take it to the courts.\"\n\nPanic ebbed again. She turned to face him and snuggled close. \n\n*~*~*~*~*~*\n\nCreed lay still, listening to the frail's breathing. She'd started dozing a few minutes after he told her about the kid. She wasn't quite asleep, not really. Her breathing was different and every so often her eyes would flutter open for a split second. Probably a good thing. If she was fully asleep, she would dream and if he knew her, she'd twist all this shit around until she found a way to blame herself. \n\nSomewhere in that half-waking state, she found his hand again. He gripped her fingers lightly and drew her closer. She mumbled something and then went silent again. A year ago he would have called her weak, been disgusted, would have pushed her away. That was before he understood that steel could be wrapped in soft skin and disguised by delicate touches. A soft purr rumbled through his chest.\n\nShe turned to face him, her lips finding his in a hesitant kiss. His mouth was every bit as careful, his hands as tender when they stroked her skin. This was more than need, more than arousal or lust. He didn't have a word for what it was, didn't have an experience to connect it to. He just knew that it took his breath away. \n\nFor a long, sensuous moment he let her mouth guide his while he took in the taste of her, the way her scent mingled with his. The heady combination of the two drew him closer to intoxication than any alcohol ever had. His fingertips floated over her skin, his tongue caressing hers. Despite his soft touch, he could feel her yield to him in a thousand little ways. She shifted her arm so that his hand could move freely. She turned her head, parted her lips, all at his tender insistence. It was too much and not enough all at the same time.\n\nThe sound of someone walking on the cold path that led to the guest house pulled him reluctantly out of the moment.\n\nHe stroked her cheek. \"Someone's coming, probably Jimmy.\" His voice was a soft rumble.\n\n\"I'll get dressed.\" She started to get up, but he kept her in place with a hand on her waist.\n\n\"Nah, sleep a little more if you want. I'll see what he wants.\" He got up and pulled on a pair of sweats. She pulled the blankets up around her shoulders.\n\n\"Should call Granna and Grandpa.\" The barest hint of her arousal teased the air around him. Suddenly he wished he hadn't called Jimmy.\n\nHe stroked her hair, picked up a sweatshirt and left. He pulled on a pair of boots and walked out into the chilly morning. The bright sunlight brought the sparkle of diamonds to the crust of the snow. \n\nJimmy came toward him. He could see the other man sniff the air. \n\nHe tried to hide a smirk. \"I interrupt something?\" \n\nCreed gave a toothy grin. \"That any of your fucking business, Runt?\"\n\n\"I can smell it all around ya.\"\n\nCreed shrugged. \"So? I was alone with my mate. Most natural thing in the world.\"\n\n\"She's upset and you're fucking her?\"\n\nCreed shook his head. \"You can be such a fucking idiot sometimes. Just give me the keys and don't tell the old man.\"\n\nJimmy handed over a set of keys. \"Had to tell him.\"\n\nCreed growled. \"Jimmy-\"\n\nThe smaller feral ignored the growl. \"You try and keep something from him. Besides, it's gonna be pretty fucking obvious when you leave and want back in. You goin' anywhere in particular?\"\n\n\"Just full of questions today, aren't you?\"\n\nJimmy shrugged. \"There's a place about thirty miles east called the Cavinder Inn. It's run by a man and his wife, both mutants. It's quiet and they put on a hell of meal. It's off season, so the place should be fairly quiet.\"\n\nCreed studied his brother. \"You been there recently?\"\n\nA little smirk. \"Took Marie there for dinner last night.\"\n\nCreed grinned. \"About damn time.\"\n\nJimmy gave a short laugh. \"That's what she said.\" He held out a leather jacket. \"It's Marie's. She thought Kelly might need it.\"\n\nCreed gave a nod and took the jacket.\n\n\"How's she doing? Kelly I mean.\"\n\n\"She's stronger than she looks.\" Creed knew it wasn't the answer that Jimmy was looking for, but it was all he was willing to give.\n\nJimmy nodded. He probably recognized the deflection, but he didn't push for more.\n\n*~*~*~*~*~*\n\n\"C'mon frail.\" There was annoyance and something she could only call nervousness in his gruff voice.\n\nShe came out of the bedroom, pulling a sweater on over her turtleneck. Why he was so intent on taking a walk with her at that moment was beyond her. He had been cooped up more than usual though and she knew that Victor seemed to function better in the outdoors. That was probably it.\n\n\"Ready.\" She smiled at him.\n\n\"Put this on.\" He handed her a leather jacket. \n\nShe took it and pulled it on. The light scent of perfume struck her. \"Whose is this?\" \n\n\"Marie's.\"\n\n\"But I already have a coat.\"\n\n\"Just trust me frail.\" The nervous annoyance was back.\n\nShe zipped the jacket and followed him out the door. \n\nThey started down the path slowly. Most of the shock of the morning had worn off, only to be replaced by something that could only be described as a chilly emptiness. She figured in time, that would pass too.\n\n\"You know how a boss like Cavallo gets to be a boss?\" Victor's eyes were straight ahead. \n\nJust hearing the name tied her stomach in knots. Kelly knew it wasn't a casual question, but she had no idea where he was going with it. \"I guess I never thought about it before.\" She crossed her arms over her stomach.\n\nHe stroked the back of her neck. \"Two ways. The dangerous ones get ahead by being eager to get their hands bloody and they tend to enjoy it. The other ones get to the top by getting other people to do the messy part for 'em. They pay for it, they blackmail for it, whatever as long as they don't get their own hands dirty, because deep down they ain't got the balls to do it themselves. Take away that support system and they fall apart. Cavallo's that kind of boss.\"",
        "Kelly flinched again. This time she covered it better. Something else occurred to her though. She stopped and took his arm. \"He's afraid of you, isn't he?\"\n\nCreed smirked, revealing one keen fang. \"'Tween my reputation and the fact that a few of his key people have started having accidents, he's fucking terrified.\"\n\nKelly's eyes widened. \"You mean the ones who took me-\"\n\nHe gripped her hand, smiled a little wider and started walking again. \"Funny thing, you'd think a bunch of accident-prone motherfuckers wouldn't have been able to pull off what they did. Must've been dumb luck.\"\n\n\"Does that mean...\" she hesitated to say the words, \"that I'm safe?\"\n\n\"Don't think I can go that far. We do have a window of opportunity though, as long as we're careful.\"\n\nThey came out of the trees and into the circular driveway. A large black motorcycle was parked in the wide circle in front of them. Victor grinned down at her. \n\n\"Window...you mean on that?\" Kelly's heart started to pound.\n\n\"Yeah. 'S Jimmy's but it looks like he keeps it in decent shape.\"\n\nShe pulled her hand away and took a step back. She shook her head. \"No.\"\n\nHe turned and advanced on her. \"What do you mean 'no'?\"\n\n\"I mean no!\" Kelly's head was spinning. She could hear her heartbeat pounding in her ears. \n\nHe growled. \"Frail-\"\n\nTears were in her eyes, she was backing away from him. \"I'm dead! To all of them I'm dead and if I show up somewhere and somebody recognizes me it'll get back to Stan and that will just make a bigger mess!\" She was shaking. Terrifying images filled her mind's eyes, the scents of her own blood and sweat crowding out the clean scents of snow and pines.\n\nVictor gripped her arms tightly. \"Frail!\" The past faded away again in degrees. She held onto his arms to steady herself. When her legs felt stronger, she looked up at him.\n\n\"I'm sorry, I can't-\"\n\n\"Yeah, you can.\"\n\nShe shook her head. He dug a hand into her hair and held her head still. \"Ninety-five percent of people don't notice what the fuck is going on around them because they don't really give a shit. The ones who do notice have no goddamn idea what you look like now.\"\n\nKelly felt some of the tension leave her muscles.\n\n\"You ever watch Stan when he's on TV?\" His grip on the back of her hair eased.\n\n\"No.\" Her voice was small. Victor had kept her away from most of the reports in the beginning. The few times she had been on her own Kelly hadn't been able to bring herself to watch for more than a few seconds.\n\n\"Don't waste your time, it's all bullshit. He shows pictures of you and your brother, but in those pictures you look like you're about thirteen and bony as all hell. On the road you're going to wear a helmet. Where we're goin' is a place run by mutants.\" He shrugged. \"Jimmy says they got good food, but he's never had much taste in that kinda shit.\"\n\nShe moved a little closer to him. \"You said that before.\" The words were painful to say, and she fully expected his anger.\n\nHe pulled her head against his chest instead. \"Game's changed, frail. 'F I had to guess, I'd say that it's gonna be another couple of weeks before Cavallo can convince himself that it ain't as bad as he thinks it is. Probably take more time to get his people back around him and then it'll be the ones who want to move up, meaning they'll be third rate talent at best. He might have it in him to make a move on Stan, but it's going to take him awhile to be able to come after us again. If there's anybody out there now, they're unorganized.\"\n\nShe relaxed into him. \"You're sure he will come after me?\"\n\n\"I'd bet on it. Be a matter of pride with him by then. Not like he's gonna have a chance.\" He kissed the top of her head. \"Gonna break you of that habit of saying no to me.\"\n\nShe looked away. \"I'm always going to be like this aren't I? Crazy I mean.\"\n\n\"You ain't crazy now, frail.\" He dug his hand into her hair again, forcing her to look up at him. He smirked a little. \"Pain in my ass sometimes, but not crazy.\"\n\nShe smiled a little.\n\nHe took her arm and led her down the path toward the motorcycle again. Kelly followed without fight this time. He handed her a black helmet. Kelly looked at it and then at the bike. Her heart started to pound again.\n\n\"This is why you told me to wear layers, isn't it?\" She shifted uncertainly.\n\n\"Yeah.\" The corner of Victor's mouth quirked into a little grin. \"Never been on one, have you?\"\n\nShe shook her head and felt a blush rise to her cheeks. \"No.\"\n\nHe smiled wider. \"I have.\"\n\nShe thought about protesting but found she didn't have any real argument, except for fear.\n\n\"Put the helmet on, and get on behind me.\"\n\nKelly put the helmet on and buckled the strap under her chin. She got on hesitantly and the machine rumbled to life. He pointed to a place where she could rest her feet. Kelly shifted uncertainly. When her feet were off the ground, he grabbed her hands and wrapped her arms around his waist. She bit back a surprised squeak as they started moving forward.\n\n*~*~*~*~*~*\n\nThe roads were perfect, but Creed was careful at first. The frail's arms were tense and he could feel the tremors in her body over the vibrations of the bike. He concentrated on how she felt against him. She was breathing faster, though sometime after the first ten miles some of that fear evaporated. He felt her body start to relax and the tremor faded. \n\nFifteen miles in, he felt the tension fade completely. Creed smiled and sped up.\n\n*~*~*~*~*~*\n\nKelly relaxed into an armchair in front of a wide stone fireplace at the Cavinder Inn. As far as she could tell, they were the only guests there. They ate far too much in front of the warm fire and Kelly found herself halfway believing that things were normal and this was just a little outing with Victor.\n\n\"Frail.\" His voice was a soft rumble.\n\nShe looked over at him, a little smile on her lips. \"Sorry, was I drifting off?\"\n\nHe smiled. \"Yeah. Wanna stay?\"\n\nKelly laughed softly. \"Yes. I told Cassie I'd go over to see her after she's out of class though.\"\n\nHe chuckled. \"Jimmy'd probably shit fucking bricks if we don't come back. Makes me wanna do it, just to see the look on his face.\"\n\nKelly couldn't resist a giggle. \"For people on the fringes, we certainly seem to have a lot of commitments.\"\n\n\"Yeah.\" He sighed. \"Not sure I like it.\"\n\nShe leaned her head against the side of the chair. \"It's different. Maybe once in awhile it's okay, but not all the time.\"\n\nAn older woman with reddish scaly skin walked over. She smiled. \"How was everything?\"\n\n\"Delicious, thank you.\" Kelly said. Victor just nodded.\n\n\"Would you like anything else?\"\n\n\"Just the check,\" Victor said.\n\nShe nodded and walked away. Kelly closed her eyes for a few minutes again. Victor would take care of the rest and the heat of the fire felt so good. Less than fifteen minutes later they were out in the parking lot again. She shivered as the cold wind hit her. He handed her the helmet. This time, she didn't hesitate.\n\nThe ride back seemed to be over much more quickly than the ride there. She was almost sorry to see the gates of the mansion, even though she was shivering. He reached for the helmet, but she took his hand instead. \n\n\"We're leaving soon, aren't we?\"\n\nHe gave a short nod. \"Sunday.\"\n\nShe smiled up at him. \"Thank you, for all this.\" \n\nHe looked at her as if she had said it in a foreign language. She moved closer and stood on her toes. He leaned down and kissed her. His mouth was more commanding than it had been earlier, but it made her knees pleasantly weak. She let herself get lost in it.\n\nA cough startled her. \"This is a school ya know.\" She recognized Logan's gruff voice. A deep blush rose to her cheeks and she reluctantly backed away from Victor. She couldn't take her eyes from his though.\n\n\"Part of their education, Runt.\" Victor looked at the smaller man and tossed the keys at him. He put his arm around her waist and led her toward the path. \"C'mon frail, wouldn't want to corrupt anybody.\" Kelly leaned into him as they walked.\n\n*~*~*~*~*~*\n\nKelly spent part of the afternoon napping next to Victor. She wasn't sure that he slept much, but it did feel good to curl up next to him. A little before four, he walked her to the end of the path, Logan met her there. She could feel Victor's anxiety rising, even though she wasn't sure why.\n\n\"Are you coming?\" She asked.\n\n\"Nah, got nothing to go over there for.\" His eyes were on his brother when he leaned in to kiss her. \"That's if I'm trusted to walk back without an escort.\"\n\nLogan rolled his eyes. \"Suppose if shit happens I'll know where to look.\"\n\nKelly gripped Victor's hand a moment longer and then turned away. She could feel Victor's eyes on her as they walked toward the mansion. They were halfway there before she remembered the jacket in her hand. She handed it back to him.\n\n\"Thanks.\"\n\nHe took it from her. \"You're welcome. You enjoyed it?\"\n\nShe smiled a little. \"It got my mind off of everything for a little while. He told you about my mother?\"\n\nA short nod. \"I'm sorry.\"\n\n\"Thanks.\" She sighed. \"I guess I'm starting to get used to the idea. Either that, or I'm still numb.\"\n\n\"You able to find out anything about how she is?\"\n\n\"Yes. Conlon's been keeping Victor as up to date as he can. I don't think there's a whole lot to say though. They're keeping her safe from herself for the moment. I'm not sure what else can be done in such a short time.\"\n\n\"You're not allowed to talk to this Conlon guy?\"\n\nKelly could hear the 'leading up to something' tone in his voice. She took a deep breath and worked to keep the annoyance out of her voice. \"I don't usually have any need to talk to him when Victor's around.\"\n\n\"But Victor keeps him busy.\" The sarcasm was clear.\n\nShe shrugged. \"I wouldn't know anything about that. Conlon takes me grocery shopping, talks to me and keeps me safe while Victor's away.\"\n\n\"And he's got you trained not to ask questions.\"\n\nShe looked at him and smiled. \"Your turn to have a go at me?\"\n\nHe turned his head quickly. \"What makes you say that?\"\n\nKelly smiled a little. \"Well, classes don't let out for half an hour yet so you have the time.\"\n\nHis eyebrows drew together and Kelly was reminded of the look of exasperation Victor got sometimes. She suppressed a giggle.\n\n\"Maybe I had something else to do. I do work here you know.\"\n\n\"Cassie said you teach fighting or something to some of the students, but that's over in the mornings.\"\n\n\"You been conducting interviews?\"\n\n\"No, I just listen to what people tell me.\" She couldn't resist a little smile. \"Besides, you're the only one who hasn't lectured me yet so I figured it was about time.\"\n\nHe stopped and stared at her. \n\nShe looked up at him. \"What?\" \n\nHe smiled a little. \"Inside. It's cold out here.\"\n\nKelly followed him into the mansion and through to a comfortable, large sitting room. They ignored the open space and television and sat on a large, comfortable sofa. He let her sit, and sat with one wide cushion between them.\n\n\"Go ahead, lecture away.\" She smiled.\n\n\"And you won't listen to a word of it.\"\n\n\"Well, I have heard it several times before. Gets a bit harder to listen after that.\"\n\n\"You're not gonna hear it from me.\"\n\nKelly looked at him, unsure where he was going. \"Is this some kind of reverse psychology thing?\"\n\n\"Nope. This is an 'I know my brother' thing. It's been a goddamn long time since I saw anything but hate and bloodlust in his eyes. Figured that's all he had left. Then he showed up on the lawn with you wrapped up in that fucking coat and the way he looked at you...\" He looked away, like whatever was coming next was hard for him to say. \"It was like, just for a split second, he was human.\" He looked at her again. \"You're different when you're around him too.\"\n\nKelly was surprised, this time she didn't try and keep it off of her face. \"I am? How?\" \n\nA little smile. \"Not ways most people would notice. When you sit or stand you lean closer to him. When he touches you, your whole body reaches back and your scent changes, sweetens. Chuck'd call that Stockholm Syndrome, but I know you can't terrify someone into all that little unconscious shit. You're his because you want to be.\"\n\nKelly nodded. \"That's what I've been trying to say.\"\n\n\"Don't mean I think you're safe with him.\" He dug into his pocket and pulled out a piece of paper. He held it out to her. \"This is my number. Not the school, me. You decide you need out you call me. I'll make it happen.\"\n\nShe took it and clasped his hand for a second. \"Thank you.\"\n\nHe nodded. \"And I know you're gonna tell him I gave it to you.\"\n\nShe laughed. \"He probably won't be surprised.\" Kelly pulled out her phone and programmed it in. She started to hear voices in the hallway. \n\nHe glanced up at the clock. \"C'mon, in a few minutes this room is going to be full of kids.\"\n\nShe got up. \"Am I still a secret?\"\n\nHe laughed. \"Secrets around here last for about two days tops. Just don't want you to have to answer a million questions at once.\"\n\n*~*~*~*~*~*\n\nCreed leaned against a tree at the edge of the wood and watched the quiet mansion as the evening gathered. Jimmy handed him a beer and leaned against the other side of the same tree.\n\n\"Worried about her?\" The runt asked.\n\n\"Fucking hate it when she's over there. All those horny little bastards sniffing around her and me nowhere in sight to keep 'em away. Makes me sick.\" He took a long swallow of the beer.\n\n\"Doubt she even sees 'em.\" He was sure he heard a little smirk in Jimmy's voice. \"Soon as she gets there, she's off with Cassie and those other two. 'Sides, for some crazy reason she's only interested in your ugly ass.\"\n\nCreed looked around the tree at his brother. \"How long did it take you to get your hair fluffed up 'fore you came out here? An hour? Two?\"\n\n\"Least you finally evened yours out. Was starting to wonder if she kept you too tired to notice.\"\n\nCreed grinned. \"You're just jealous because you ain't gettin' any.\"\n\n\"Keep tellin' yourself that.\" \n\nThey were silent for a few minutes as Creed watched shadows pass by curtained windows. He knew the frail was in one of the rooms on that side of the building, but he didn't know which one and there were lights on in just about all of them.\n\n\"You're leaving tomorrow?\"\n\n\"Yeah. Still trying to get your boss to tell me what I owe him.\"\n\n\"You may as well give up on that. He ain't gonna take any more money than what you already gave him.\"\n\n\"Means he wants somethin' else.\" Creed took another long swallow.\n\nA short, sarcastic laugh. \"He usually does.\"\n\n\"He gonna keep me from taking her out of here tomorrow?\"\n\n\"Doubtful. She wants to leave and she's legally an adult. S'pose he could turn you in to some authority, but I figure he's got bigger plans.\"\n\nCreed rolled his eyes. \"Why the fuck do you stay here?\"\n\n\"You think I should get my ass back in the cage where I belong?\"\n\n\"That was your dumbass idea.\" Creed took a long swallow. \"Plenty of work for an independent contractor with your skills.\"\n\nJimmy looked around the tree. \"You lost your goddamn mind? I got out of all that shit.\"\n\n\"I don't mean you should do what I do. There's plenty of factions out there nobody's even heard of. Pick a few that fit with all that moralistic bullshit you spout, get your girl and get the fuck out.\"\n\nJimmy moved out of his sight again. \"Ain't that easy.\"\n\nCreed didn't ask for an explanation. He was silent for a moment. \"You change your mind; you know how to find me.\"\n\n*~*~*~*~*~*\n\nKelly sat on the floor with Cassie, and Cassie's roommates Sophie and Lucy. They were in the same small sunroom where she and Cassie had spent their first afternoon. A pizza box, soda cans and a bowl of popcorn was laid out around them. She got the impression that the little send-off had taken some convincing on Cassie's part, but it had been a fun evening of laughing and eating and getting to know the other two girls.\n\n\"What should we watch now?\" Cassie asked, sorting through the stack of DVD's in her hand.\n\nKelly stretched. \"What time is it?\"\n\n\"It's not that late.\" Sophie said. Of the three, Sophie was the only one with an obvious mutation. Patterns and colors shifted under her skin according to her emotions. Now her pinkish hue shifted to a darker red with bands of purple dots, betraying a disappointed kind of excitement. \"C'mon we have three movies left to watch.\"\n\n\"I know, but I told Victor I'd be back before midnight.\"\n\n\"Do you get in trouble if you're late?\" Lucy smirked. Kelly learned quickly that the tall brunette could make just about anything sound slightly naughty.\n\nKelly laughed. \"No.\"\n\n\"Then we'll watch another movie.\" Cassie said.\n\nKelly shook her head. \"I can't.\"\n\n\"What's it like?\" Sophie asked. A shot of curious orange passing over her features.\n\n\"Sophie!\" Cassie sounded shocked.\n\n\"What? We all wanted to ask.\" Sophie said.\n\n\"And she can tell us or not.\" Lucy said.\n\nKelly's mind raced. She knew exactly what they were talking about, and she knew it was a subject she didn't really want to get into. \n\n\"She's blushing!\" Sophie pointed a webbed finger at Kelly and started to giggle.\n\n\"I am not!\" Kelly covered her burning cheeks with her hands.\n\n\"Just give us some little detail.\" Lucy said.\n\nKelly looked from one to the other. \"He's a cover-hog.\"\n\nThe three girls groaned and leaned back. \"Come on!\" Sophie said.\n\n\"What? I would guess it's not that different than being with any other guy.\" Kelly was fairly certain that wasn't true, but it might serve to make someone else the focus of the conversation.\n\n\"Sophie wouldn't know,\" Lucy smirked. \"She never has.\"\n\n\"I have so!\" Fireworks of bright red embarrassment covered her cheeks. \"Well, mostly anyway.\"\n\n\"Besides, living here is like living in a convent.\" Cassie said. \n\n\"And forget sneaking out,\" Lucy added. \"Half the teachers are psychic.\"\n\nSophie looked at the brunette. \"Doesn't seem to stop you.\"\n\nLucy shrugged. \"It's kind of like a challenge now. I'm starting to think that if I ever didn't have to plot and plan and sneak around it won't be half as much fun.\"\n\nKelly laughed, so did the others. \n\n\"You still haven't given us any details,\" Cassie said.\n\n\"What can I say really?\" Kelly blushed deeply. \"It was weird at first, but now...now it's...I don't really know how to say it.\"\n\nThe girls were silent for a long moment. Cassie spoke first, her voice subdued. \"You really love him.\" \n\nKelly smiled a little. \"That's one way of putting it.\"\n\n*~*~*~*~*~*\n\nAt five minutes to midnight, Kelly walked into the small guest house. The main room was dark, but she could see light coming from the bedroom. She took a quick shower and pulled on the t-shirt she'd left out. She was only halfway surprised that he was still awake when she got into the bedroom. He glanced up from the book he was reading. She cocked her head to get a better look at the title.\n\n\"Crime and Punishment?\" She pulled the shirt off and got into bed with him.\n\nHe put the book on the nightstand and pulled her close.\n\n\"Yeah. Don't know what the fuck Jimmy was thinking. He knows I hate Russian literature. Finished everything else he brought over though. You ever read it?\" One hand moved over her hip and thigh. His mouth found hers in a soft kiss.\n\n\"No.\" Her fingers stroked over his chest. \"Why do you hate Russian literature?\"\n\n\"'Cause it's usually long and depressing. Course Russia was cold and depressing when I was there so I suppose you can't expect anything different.\" His hand started to stroke more freely over her body, as if he was refamiliarizing himself with her contours. \n\nShe sighed and leaned into his chest. \"You've been to Russia?\"\n\nShe felt his short laugh more than she heard it. \"I been damn near everywhere, frail.\" He stroked her cheek, she looked up at him. \"You got somewhere you wanna go?\"",
        "Kelly met his eyes. \"To see Cody.\"\n\nHe smiled. \"Figured that. I mean after.\"\n\nShe lowered her eyes again. \"I don't know. I guess I never really thought about it.\"\n\nHe kissed her again, this time his tongue caressed hers. When he pulled away, Kelly was trembling with the tenderness of it. \n\n\"Think about it.\" His voice was a soft rumble. His mouth found hers again, his tongue playing with hers while the tips of his fingers drew curling patterns as they moved along her side and up to her breast. \n\nShe sighed against his mouth and let her fingers drift downward to stroke his hardening length. "
    ],
    "authorname": "psyche_b_mused",
    "tags": [
        "victor creed",
        "kissing",
        "nakedness"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/what-the-cat-dragged-in-ch-27"
}
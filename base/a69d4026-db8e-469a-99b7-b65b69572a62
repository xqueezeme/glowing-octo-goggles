{
    "title": "Scrubs",
    "pages": [
        "<center>This is my entry for the National Nude Day contest. \n\nIt could have come in as a Romance, for such it is, \n\nbut on the whole, I think it belongs here in Mature.\n\nPlease enjoy.\n\n+</center>&hairsp;\n\nDamon sank to his knees before flopping back on the grass, his arms extended. The warm spring sun flowed over him like the hands of a sublime masseur, gentling and calming nerves worn shadow-thin by months of stress.\n\nHe turned his head away from the sun, opened his eyes. Far above, a bird circled without moving its outstretched wings. He sat up, settled into a comfortable position, took a deep breath, closed his eyes again, slowly let out the breath and emptied his mind.\n\n+\n\nSomewhere, far away, a phone timer was chirping. Not a loud sound, it took a couple of repetitions to penetrate, get his attention.\n\nHis eyes still closed, he rolled his shoulders, took a deep breath and smiled at the sound of leaves in the breeze. He felt better, more relaxed.\n\nOpening his eyes, he gave a slight gasp of surprise. Seated in front of him now, almost within reach, was a woman, also sitting in lotus. Older than he by some years, the woman was also dressed in hospital scrubs. She'd taken off her shoes and Damon was struck by the simplicity, almost the innocence, of the image she presented. As he watched, a bird flying overhead cast a momentary shadow on the sunlit sole of one foot.\n\n+\n\nThe hospital grounds around them were quiet, disturbed only by the sounds of birds.\n\nThe estate had originally been a wedding present to his young bride from Peter Addison, an industrial baron in the late 1800s. It became their full-time home, for the woman was soon expecting and her doctors recommended peaceful surroundings.\n\nEmiline Addison had died in childbirth, along with the son she had been carrying. In mourning for the rest of his years, Addison never remarried, instead devoting his spare time to the house and grounds.\n\nOver the years, he spent a small fortune importing and arranging plants from around the world, creating and lovingly tending acres of flowers, trees, fountains and even a small waterfall. It was his legacy to a wife who had died before it was properly begun.\n\nAddison's will directed the bulk of his estate be used for the foundation of a medical college specializing in obstetrics; the rambling, three-story Gothic Revival house he'd built for his bride became its first campus. The once-small college had since grown into a major teaching hospital and, while it had expanded far beyond obstetrics, the head of that department was still, by custom and common understanding, first among equals. \n\nThe main facility was now housed in a very modern eight-story tower. The original house still existed 125 years later, but was now used for primarily for administration, with some of its original facilities - the grand and high-ceilinged main hall in particular - sometimes rented out for weddings and other special occasions.\n\nPeter Addison lived on however in more than just the hospital. Despite the occasional legal challenge, that part of his will requiring the preservation and maintenance of his beloved greenery was still in force. Indeed, Addison College now derived a not-inconsequential portion of its income from charging admission to the gardens. They were a popular site for tourists and local residents alike and in good weather were generally filled with appreciative crowds.\n\nOne corner of the garden featured a rambling web of high hedges. Less than a formal maze, more than mere lines of shrubbery, the rambling bushes occasionally enclosed small glades of soft grass. These too were available to the public for small family gatherings and romantic picnics. Local yoga and tai chi schools often held classes there in the summer and fall.\n\nThe gardens had been closed to the public when the pandemic struck and still remained so. Hospital staff had however been permitted to continue using them, provided that proper care was taken -- social distancing and such.\n\nThe decision had been a wise one, the gardens proving an invaluable mental health resource for hospital staff stretched to their limits. The ability to take a short break and wander the quiet grounds was a balm to stressed nerves. The maze area had proved popular as well for those simply wanting a little privacy in the midst of crisis, some solitary peace and quiet.\n\nPerhaps borrowed from Chinese custom, a pair of shoes left across the entrance to one of the glades became an indication that the space was occupied, a request for privacy. \n\nDamon had forgotten that when he'd taken his lunch break in the maze.\n\n+\n\nThe woman took a deep breath, opened her eyes and lifted her head. Seeing Damon awake, she smiled. That smile,&hairsp; he thought, I've needed that smile all morning.\n\n\"Hi,\" she said. \"I hope you don't mind my joining you. It seemed a perfect spot.\"\n\n\"You're very welcome here,\" he replied, trying to smile himself. \"It's not every day I come back to such a lovely sight.\"\n\nTo his amazement, the woman blushed slightly, averted her eyes in apparent embarrassment. \n\nThat's a really nice smile,&hairsp; he thought to himself. Why haven't I seen her before? \n\nThen, Don't be stupid. You haven't seen an unmasked face inside the building for months. \n\n\"Sorry if I embarrassed you,\" he said. \"I'm Damon Ozarowski. 'Oz' works, but not...\"\n\n\"Not 'Doctor Oz'. Gotcha.\" She smiled again.\n\nEasing herself out of lotus but still sitting, the woman stretched her arms up and back. The movement pulled the scrubs fabric tight over her bosom. Damon managed to avert his eyes before she caught him staring.\n\nShe reached for her shoes and socks. \"I'm Piper Coonage,\" she said, fighting a sock which was refusing to go on straight. \"Psychology.\" \n\nThat would explain it, &hairsp; Damon thought. I'm never up there. \n\nHaving got her footwear on, the woman looked at her watch, rose to her feet. \"What do you do in this fine facility?\" she asked.\n\n\"I'm a resident... Well, I was about to start my residency in cardiology,\" he said, \"when this all started. I've been mainly in ER and ICU and covering the third floor since then.\"\n\nThe third floor of the hospital had been hastily converted to provide emergency intensive care facilities for an anticipated flood of seriously ill patients.\n\n\"Ouch,\" she grimaced. \"I hear they're keeping the third floor ready in case of a second wave.\" \n\n\"Yeah. It's been empty for weeks, thank God.\"\n\nPiper examined the man before her. She guessed he was his mid-to-late 20s, but the clues were mixed. Lean and of medium height, his curly brown hair had a much-too-early scattering of grey at his temples. Fatigue lines etched the corners of his eyes.\n\nHe looks tired,&hairsp; she thought to herself. I've seen photos of aged young men with eyes like that, ones coming off Omaha Beach and Hamburger Hill. He looks older than he has any right to be.  \n\nThen, remembering how she had looked in her mirror this morning, Well, so do I. \n\nAs the two started to leave the glade, Damon paused, motioning her through first. Nodding at the gesture, she passed him. He smiled privately at being able to watch her as she led the way.\n\nOf average height, the woman was slender and Damon guessed she was maybe 40 years old. Accustomed to scrutinizing women his own age or younger, he was surprised to find himself realizing that she was more than a little attractive. He had trouble keeping his eyes off her scrubs-clad bottom as it shifted gracefully from side to side with each step.\n\nAs if reading his mind, the woman stopped, turned to him. \n\n\"You can walk with&hairsp; me, you know, Doctor,\" she smiled. \"No need to just follow.\"\n\nDamon noticed a small dimple on her chin and found it intriguingly attractive. Uncertain what to say, he merely nodded in reply.\n\nAs he caught up with her, Piper shook her head, shifting a long blonde braid from one shoulder to lie along her back.\n\n\"When does your residency kick in?\" she asked, \"Or are they still waiting on the possibility of a second wave?\"\n\n\"The latter, I suppose. They don't seem in any hurry to give us a date. It's not an unmixed blessing; I've been getting a lot of experience in others areas, especially as the hospital is coming out of emergency status and patients with normal problems are coming back. It's been like an extended transitional internship.\"\n\nHe looked sideways at her profile as they walked. \"What's it been like in Psychology?\" he asked. \n\nHer lips were full, shapely and Damon was startled to find himself wondering what it would be like to kiss them. He turned his head away.\n\n\"Busy,\" she replied, \"But most of it has been supporting the staff here.\"\n\nHe gave a wry smile. \"Nobody gets sick like doctors and nurses.\"\n\nThe admission caught her by surprise and she laughed delightedly. \"So true. But the psychological impact has been very real. It's been a PTSD fugue for many of them -- and not just doctors and nurses. Everybody coming to work here has had to manage the same fear, carry their own part of that burden - all the way down to the almost invisible people like cleaners.\"\n\nHis smile grew less thin. \"'Invisible people',\" he said. \"It's a good term. Who ever pays any attention to somebody with a mop?\"\n\n\"And&hairsp; the orderlies and&hairsp; the clerks and&hairsp; the cooks and&hairsp; the techs,\" Piper continued. \"They've all been coming in and keeping this place going, saving lives. You get a different perspective on who makes a difference in real life -- and it hasn't been steroid athletes or silicone actresses.\"\n\n\"Not around here,\" he agreed, trying not to snicker at the terms.\n\n\"How long have you been meditating?\" he asked.\n\n\"Years. My parents were hippies and it splashed. You?\"\n\n\"I took it up in med school. It seemed a good way to deal with the stress.\"\n\n\"That it is,\" she agreed.\n\nApproaching the hospital entrance, both of them shrugged inwardly. The laminated passes on the lanyards around their necks got them past the masked security guard before they began an entirely humourless medical screening. Even though they had been through the process just hours earlier and even though they're been nowhere but the hospital's private gardens, the entire procedure was repeated. One part of them resented the necessity -- and the people involved in it. Another part took comfort in it, for the hospital was justifiably proud of its successful efforts at limiting community transmission. Not without basis were the whistling-through-a-graveyard wall posters on every floor: Keep this the safest place in the city!\n\nOnce through, masked again, the two went their own ways.\n\n+\n\nDamon had just settled into lotus the next day when he heard soft footsteps on the path. Piper stuck her head around the corner of the hedge a moment later.\n\n\"We meet again!\" he said in welcome.\n\nHe has a wonderful smile,&hairsp; she thought to herself. \n\n\"I recognized your shoes,\" Piper said. \"I hope you don't mind.\"\n\n\"No, not at all,\" he said, waving his hand at her former spot.\n\n\"Don't mind me,\" she said, pulling off shoes and socks. \"I'll just need a minute.\" \n\n\"Take your time,\" he said. \n\nFrom behind her, the sun suddenly silhouetted her form through her scrubs. Damon closed his eyes and tried think of her as just a colleague.\n\nHe failed. His eyes opened to see Piper sitting in lotus in front of him, hands on her knees. Her eyes were closed and she was rotating her shoulders to settle in. Entranced, Damon watched her breasts move under her thin scrubs. She took a deep breath, slowly let it flow out. Her eyes opened suddenly. Damon was able -- barely - to shift his glance before she caught him staring.\n\nHe thought so, anyway.\n\nPiper smiled. \"You didn't have to wait.\"\n\nDamon found himself uncertain how to reply, turned his head. When had he last been this awkward?\n\n\"You're worth waiting for, I think,\" he said. That's better.\n\nWhen he turned back, it was to see her calmly looking at him, a small mischievous grin on her face.\n\n\"Girls get to look, too,\" she smiled.\n\nDammit!\n\n\"Piper,\" he started to stammer, \"I'm...\"\n\n\"You're cutting into our lunchtime, Damon,\" she cut him off, her smile now confident and forgiving. Ignoring his obvious embarrassment, the woman closed her eyes and took another deep breath.\n\n+\n\n\"So,\" she asked, walking back to the building. \"That's two times in a row - am I going to have to beat off a jealous girlfriend?\"\n\n\"Not now,\" he said. \"We broke up late last year and nobody since then -- COVID, right?\"\n\nDamon noticed the rings on her left hand. \"You're married, I think.\" \n\n\"No husband now,\" she said softly. \"Jamie died last fall, before all this started.\"\n\n\"Oh,\" he said. \"I'm so sorry. What happened?\"\n\n\"Small-cell carcinoma,\" she said. \"And he didn't even smoke. How strange is that?\"\n\n\"Rare,\" he said, \"but hardly unknown.\"\n\n\"Well, they didn't catch it until it had metastasized. The hospital here tried everything, but it was like throwing nerf balls at a rhino.\" She stopped, swallowed deeply and began walking again. \"And four months to the day after his GP caught it, he was gone.\"\n\n\"Oh, crap,\" breathed Damon. \"That's horrible. How old was he?\"\n\n\"Just 44.\"\n\n\"I'm sorry,\" he said again. \"That's way too young.\"\n\nShe shrugged a little. \"I guess being so frantic over the past few months has been the silver lining in all this. I've been too busy to let it tear me apart.\"\n\n\"How long had you been married?\"\n\n\"It would have been 15 years this September.\"\n\nThe woman sighed. \"It doesn't seem that long.\" \n\n\"Any kids?\" he asked.\n\n\"No,\" she said softly. \"We had a daughter, but she was stillborn.\"\n\n\"Oh. I'm so sorry. That must have been very hard.\"\n\n\"It was a long time ago. Maybe being young made it easier. But yes, it hurt. It still does.\"\n\nDamon saw a tear running down the side of her nose. Instinctively, he stopped, took her by one arm and took her in his arms. She tensed for a brief moment, then, accepting the intended comfort, relaxed into his arms.\n\nThe hug lasted a long time. I've missed this,&hairsp; she thought to herself.\n\n+\n\nAnd May became June.\n\nPiper had said on the way out of the gardens that she was going to take a day off, do some much-delayed shopping and cleaning. To his amazement, as they were entering the screening process, masks in hand, she'd kissed his cheek, a quick peck, \n\n\"I'll see you Monday, Oz,\" she'd said. \"Have a good weekend.\" \n\nWithout meeting his eyes thereafter, she'd emerged from the screening line, stepped into the elevator and was gone, leaving the young man still standing with his hand on his cheek.\n\nTwo trainee nurses had giggled as they walked by.\n\n.\n\nThat had been Thursday and today was Friday. Without Piper...\n\nIt seemed odd to him. Strolling down the path leading to the maze, his thoughts kept returning to her. He'd never felt this way about, well, an older&hairsp; woman. And she was&hairsp; older, right? Like least 10, maybe 15 years older?\n\nHe stopped in the middle of the path as a thought struck him.\n\nExcept that she wasn't.\n\nFor some reason, she didn't seem&hairsp; old. Her smile was as youthful as anything he could imagine and as for...\n\nShe's out of your league, Oz.\n\nShe's beautiful, she's got a solid career, no doubt a bunch of impressive friends her own age. \n\nEven if those sweater puppies seem pretty impressive under those scrubs... \n\nAnd why would she be interested in you, anyway? \n\n.\n\nDamon was happy to find 'their' spot unoccupied. He left his shoes across the path as he entered. \n\nHe sat down in his usual place, stretched a bit, tried to settle in. The tranquility he sought escaped him however. It hadn't rained today, but grass seemed damp. He shifted, frowned as the ground now felt lumpy. The sun was too hot, but having moved into the shade, it was still too warm. And visions of Piper kept intruding.\n\nWhy would she be interested in you, anyway? \n\nEventually, he got to his feet, started to leave. Bending over to pick up his shoes, he had another thought. \n\nMaking sure that the shoes were centred on the path, he went back inside. Looking around, he confirmed that he would be invisible from the path, and, checking over his shoulder, from the hospital tower, too. Hesitatingly, he stripped off his shirt. \n\nFolding it neatly, Damon placed it on the grass. Stepping out into the warm sunshine, he did a slow Sound-of-Music spin with his arms extended, feeling the warmth on his skin. It felt better. He&hairsp; felt better. Damon realized that he was sick of being enclosed, enclosed in sterile hospital wards, enclosed in masks, enclosed in - come to think of it - clothing. \n\nHe shrugged, looked around again. His pants and boxers followed his shirt and he stood naked in the noon brightness. It felt odd. Damon was accustomed to being nude indoors -- bedroom, showers, that sort of thing and, yes, he'd been skinny-dipping on occasion, but then nudity had been an almost unseen substitute for a bathing suit. This felt different somehow, welcome - and welcoming.\n\nHe walked around the glade, feeling the sun on his body, warm air on his skin, soft grass beneath his feet. Feeling a breeze on his sex was odd but hardly uncomfortable. \n\nIt all felt good. It felt more natural, closer to what it should be. \n\nTo his surprise, he found himself becoming partially erect. He wondered for a moment if he should do something about that, discarded the idea. \n\nInstead, he picked a spot and, being careful not to sit on anything important, lowered himself into lotus. Setting the timer on his phone, he took a slow, deep breath, held it, began to let it out.\n\n+\n\nDamon became aware of his phone chirping, He took another deep breath and began to breathe out slowly, opening his eyes as he did so. And almost jumped a foot off the ground. \n\nSitting in lotus just in front of him was Piper, dressed in what he was wearing, which is to say nothing. A small pile of clothes -- normal clothes, not scrubs - rested on the grass beside her.\n\nHer eyes were closed, her breathing slow and rhythmic. Her hair was out of its usual braid today; a cataract of honey flowed down over her neck, shoulders and breasts. Her broad shoulders were back and a very faint, very sweet smile was on her lips.\n\nDamon's jaw dropped a little in surprise -- and, yes, in admiration. Piper's figure, for so long only suggested under the sexless, ill-tailored scrubs, was remarkable, her full breasts high and firm, her stomach flat, her legs sleek. To his male eyes, her soft brown areolae and nipples were perfect. Her upturned feet hid her sex, but Damon could see some soft curls of blonde hair just above one ankle.\n\nShe can't be in her 40s,&hairsp; he thought to himself. \n\nHis medical training kicked in, started pointing out clues and his mind brushed his protest away.\n\nYes, she's in her 40s.&hairsp; he thought,  and, yeah, so what? She's gorgeous!\n\nHe found his heart beating just a little faster at that realization.\n\nSo why haven't you noticed that before, champ?&hairsp; he asked himself pointedly.\n\nPiper obviously spent some time outdoors in a bikini; there were distinct tan lines on her bosom and hips. Damon found those intensely, unexpectedly erotic. \n\nMoving over her bare body, his eyes noted the faint stretchmarks left by a dead daughter.\n\nWhat do I do when she wakes up? &hairsp; he thought. Looking down into his lap, Damon found himself stiffening again, just a little. He raised his eyes to see Piper looking at him, blue eyes open and calm.\n\nStill in lotus, Damon had no idea what to do next. Yes, he'd been with girls. Yes, he'd... but, no, he'd never been in this situation.",
        "\"Hi,\" Piper said to him and her sudden smile almost dimmed the sunlight. \n\n\"Erm, hi?\" he managed to say. \"I didn't think...\" He tried to keep his gaze on her eyes.\n\n\"I forgot my phone when I went home last night, so I came in to pick it up,\" she explained. \"And then it was lunchtime and I thought...\"\n\nShe let her eyes sweep down his bare torso, giggled. Her breasts jiggled slightly in the light and Damon lost his struggle for an instant.\n\n\"And I recognized your shoes at the entrance. I hope you don't mind?\"\n\n\"Mind?\" he stammered. \"Why would I mind? But...\" Damon ran out of coherent words.\n\nNow the woman laughed openly. Not moving to cover herself, she explained, \"I'd expected to just join you, but imagine my surprise to find you...\" she waved her hand at his naked form. \"I didn't want to just walk away and it wouldn't have been good manners to have you wake up with me still dressed, so I, um, took the plunge.\"\n\nTo Damon's surprise, Piper blushed, as if expecting a challenge or reprimand.\n\n\"I'm good,\" he replied. What else could he say?\n\n\"Thank you, she said, reassured. She had been nervous,&hairsp; she realized.\n\nA faint smile still on her face, Piper reached over to the pile of clothes and picked up a very ordinary, very everyday brassiere. Damon felt a sudden pang of disappointment when she leaned forward and fitted her breasts into the cups. Sitting up, she reached behind her for the clasp, adjusted the straps.\n\nShe looked up, saw him watching and, blushing slightly, smiled a bit more.\n\n\"Sorry,\" he said, not particularly meaning it.\n\n\"Don't be,\" she said, laughing now. \"You could hardly ignore them, could you?\"\n\nHe joined her in laughing.\n\nStill dressed in only her bra, she started to rise. Slightly embarrassed by his own reaction, not wanting his interest to be obvious, Damon rose, went to his own clothes and dressed hurriedly with his back to her. Finished, he turned to see Piper also dressed, but this time in a very feminine pink blouse and a calf-length grey skirt.\n\nThere was a relaxed smile on her face, but otherwise Damon couldn't make out her emotions.\n\nShe looked at him. A head taller than she, his eyes were fixed on her. His arms were crossed lightly, almost defensively.\n\nWhoa!&hairsp; she thought to herself.  Have I upset him? \n\nShe stepped forward, put a hand on his forearm. \n\n\"I'm sorry, Damon,\" she said gently, \"Have I offended you? I didn't mean to embarrass you, but when I saw you sitting there like that, it just felt like the most natural thing to do. Please forgive me.\" To him, her blue eyes seemed to be growing in size, larger and larger. He felt himself drifting downwards into them. \n\nTo her astonishment, the man shook his head for a long moment, like a dog coming in out of the rain. He lifted his head and looked at her.\n\n\"No, no,\" he said, slowly. \"You didn't embarrass me. I was surprised, that's all. But it was,\" he smiled, \"a very nice&hairsp; surprise.\"\n\n\"OK, then,\" she said, as if nothing out of the ordinary had happened, \"I'll see you Monday.\" \n\nLooking at her watch, she again touched his arm. \n\n\"Come on, doctor,\" she smiled, \"I'm on days-off, but you're going to be late.\"\n\nToday was not yet done with surprises, for, as they walked together up the path towards the hospital, Damon felt a slim hand slip into his. After a moment, he gave a gentle squeeze and the two of them walked hand-in-hand to the doors. Today, he was disappointed to not get a kiss. He did catch a knowing glance from one of the nursing students in the screening line.\n\n+\n\nThe weekend passed, with both of them doing a lot of thinking.\n\nThat was... weird?  &hairsp;Damon thought, lying on his sofa, well into a six-beer introspective.  OK, Oz, you're 28 years old, a doctor. You've been around the block a couple of times. What happened back there? On one hand it was just meditation. Nude meditation is legit, yes? It doesn't have to be about sex. On the other hand... \n\nHe took another deep gulp.\n\nI wonder what she thought when she first walked in - and what she expected me to think when I first saw her like that?\n\nPuzzled, his mind veered in another direction. Again.\n\nHot,&hairsp; his malebrain told him.  Who says older women can't be hot? &hairsp; His mind lingered on how her proud breasts had looked in the sun, the way they'd hung as she put on her bra. Damon admired all aspects of female beauty, but, yeah, it was a very, very fine rack. \n\nHe smiled at the image, thought for a while, then grinned. Beats the hell out of those egocentric brats you dated in college. \n\n.\n\nPiper had not slept very much.\n\nWhat were you thinking? &hairsp; she demanded of herself.  Yes, it was 'spur of the moment' and yes, it felt good. And no, it wasn't about flirting or sex - except that everything is about flirting and sex when you get right down to it. And 'au naturel'&hairsp; in front of a man half your age? OK, not quite half, but...\n\nHer thoughts grew tired of chasing their own tails. She got up, went to the full-length mirror, turned back and forth. Not bad for 41,&hairsp; she thought, but, still... \n\nWhat had he been thinking when he first saw her? \n\nOn impulse, she shed her nightgown, hefted her breasts, turned back and forth to inspect them. He did seem to like these. &hairsp; She smiled at the memory of his bewilderment, smiled more brightly at the clear approval she'd seen in his eyes.\n\nThen the hard question hit her. What do I do Monday morning? \n\nSleep came late.\n\n+\n\nMonday morning passed very slowly for Damon. The sorrows, fears and 18-hour-days of the plague months had mercifully passed and business was slowly returning to a wary normal. He'd been kept busy with quite routine cases in the ER, nothing any rookie couldn't handle with ease. They'd left him a lot of time to think.\n\nShould I go down there at lunch?&hairsp; he wondered. Actually, that question was easy enough to answer, even if it kept recurring.\n\nLarger questions loomed however. What in hell do I say to her? Do I apologize? For what? What do I say if she apologizes? And, again, for what?\n\n\"Are you OK, doctor?\" the nurse at the nursing station asked.\n\n\"Mmm? Oh, yes, I'm fine. Daydreaming, I guess.\" He pushed himself up from where he'd been leaning on the counter.\n\n\"OK, you just looked a little distracted.\" Damon liked her voice and her eyes. It occurred to him that he'd never seen her without a mask.\n\n\"I'm fine, really. But thanks for asking.\" Looking at his wrist, Damon shrugged, took the time on his watch face for a decision. \"We're not busy. I think I'll take an early lunch.\"\n\nThe nurse watched him as he left. \"I wish he'd get distracted about me, someday,\" she said to the woman beside her.\n\nYoung Doctor Ozarowski was a not-uncommon topic of discussion among about half the hospital staff.\n\nHer friend nodded, turned back to her computer screen.\n\n.\n\nDamon arrived at the maze, meandered down the path. He wouldn't have been surprised if she hadn't have come, but a pair of small shoes he thought he recognized was barring the entry. Putting his shoulders back and taking a deep breath, he stepped over them.\n\nPiper was there, in a half-lotus position. \n\nNude.\n\n\"Hi,\" she said, almost shyly.\n\n\"Um, hi,\" he replied. For this he found himself unprepared; he had a hard time deciding where he should be looking.\n\nHe shrugged and gave into the inevitable. Taking off his scrubs took but a few seconds and he lowered himself to the grass directly opposite her before turning his face to hers.\n\n\"How was your weekend?\" he asked, trying to look at her face.\n\n\"Confused, Damon, confused. Yours?\"\n\nHe thought for a moment. \"'Confused' is a pretty good way to put it.\"\n\nThe woman smiled and he felt his heart leap just a little.\n\n\"Um, Piper...\" he began before she cut him off by raising one hand.\n\n\"Stop, Damon.\" Her voice was firm, but soft. \"Nothing happened, Damon. We did nothing to be ashamed of and neither of us have anything to apologize for.\"\n\nThose two lines had taken her about two hours of pondering and rewording before they didn't seem too stilted and another hour of practising to be able to get them out without stammering or blushing. \n\nSeeing some of the tension lift from him, she grew more confident.\n\n\"So?\"\n\nFaced with the choice of looking at her eyes or at her breasts, Damon chickened out and closed his eyes. A deep breath...\n\nPiper smiled to herself and began her own meditation.\n\n+\n\nIt became a routine over the days that followed. Nudity was the new norm. Neither had made any moves to move past that, not so much as an invitation to meet for a coffee sometime, although both took the odd surreptitious - and admiring - glance. Knowing that a younger man still found her desirable, Piper had become more confident in her own appearance. Damon in his turn had begun to fully appreciate that beauty never really fades. Both had become accustomed to seeing and being seen without embarrassment.\n\nIt was normal. \n\nAs was Piper's reaching out to take his hand on their way back to the hospital each day. It was a symbol of friendship, nothing more.\n\nNormal.\n\nThen one afternoon, Damon arrived to find the expected shoes. Stepping across them and entering the glade, he was surprised to find a bare Piper sitting beside a checkered tablecloth spread across the grass. The cloth was covered with food -- fruit, rolls, cold cuts, pickles, chocolates and a bottle of designer fizzy water.\n\n\"Um, wow!\" he said in astonishment. \n\nThe woman gestured at the water. \"Sorry it's not real bubbly,\" she said, \"but we both have to go back to work later.\"\n\nDamon sat down on the grass, opposite Piper. Smiling she shook her finger at him. \n\n\"Wrong, Damon.\"\n\nHis eyebrows went up.\n\n\"By now, doctor, you should know the dress code here.\" Her own eyebrows went up in amusement.\n\n\"It's a fair cop,\" he smiled. He rose, slipped out of his scrubs and tossed them to one side.\n\n\"Better?\" he smiled. \"Or should I go looking for a tie?\"\n\n\"Much better, thank you.\" \n\nHe went to sit across from her, but she patted the grass beside her, half invitation, half command. Sitting where she indicated, he felt his hip brush hers. He felt his member stiffen slightly and slid an inch away, hoping that she hadn't noticed.\n\n\"So,\" he said, reaching for a napkin, \"what's the occasion? Not that I mind.\" \n\n\"National Nude Day,\" she said softly. Her words were distinct, but her eyes wouldn't meet his.\n\n\"Seriously?\"\n\nTo his amazement, she blushed. There was a lot of skin to be seen and a lot of blush.\n\nPiper hadn't had a lot of recent experience in 'daring' and these past couple of months had been a revelation to her. After the stresses of the pandemic and her husband's death, she had found the nudity of the past few weeks both constraining and liberating. She had to work at it, overcome her shyness and life-long inhibitions -- work at being casual, she thought amusedly. But priorities were clearer, if nothing else. Pretense had become both less necessary and less possible, with modesty exposed for the sham it had always been. \n\nOr so she had thought. Now, face and torso scarlet, she'd lost confidence in that notion.\n\nShe summoned her courage, turned back to him.\n\n\"It's a thing!\" she declared. \"You can look it up. \n\n\"Besides,\" she continued, a bit more confident now, \"like I said the first time, there's been nothing here for us to be ashamed of.\" \n\nAt those words, to her amazement, she felt a small tear start to form in the corner of one eye. For the life of her, she couldn't think of why. She tossed her head back, continued.\n\n\"I've been thinking about this a lot, Damon. I've been thinking about being ashamed and why I should even be embarrassed by nudity.\"\n\n\"And?\" he asked.\n\n\"I'm not entirely there yet. I do know that I would never have dreamed of this 20 years ago. Imagine, spending my lunch hours outdoors with a naked stranger half my age!\"\n\nHe interrupted softly. \"Not quite a stranger, Piper. And not 'half your age'.\"\n\n\"Don't quibble, Damon. You know what I meant. My point is that it's been good for me, being in here like this. Fewer expectations, maybe?\"\n\nNot quite sure how to respond, Damon turned away, helping himself instead to the food in front of him. \n\nHe found himself thinking the entire situation was surreal. Here he was, again, naked, with an attractive woman - not his lover - in an almost-public park, a picnic spread in front of them. On 'National Nude Day', whatever that was. \n\nMost importantly, he realized, he hadn't a clue of where this was going. \n\nA hand touched his arm, slid down to hold his hand. He turned to see Piper looking up at him.\n\n\"Thanks for helping, Damon,\" she said gently. She squeezed his hand, but all he noticed was her eyes. Again, he seemed to be caught in them, out of his depth.\n\nDamon blinked; suddenly he knew. He leaned in towards her, just a little. And watched those blue eyes close as soft lips moved in to touch his. Her lips have no age, &hairsp;he thought to himself, No more than Eve's.&hairsp; He leaned in further, swept her lips with his tongue and felt his heart leap when they opened for him.\n\n.\n\nIn her turn, all Piper had intended was a reassuring gesture, but as she felt her body responding to Damon, she knew, deep inside, that this was right. His hand cupped her chin and she let her face be guided. That too was right, as was the sudden tautness in her nipples. And his long fingers leaving her face, softly sweeping over her shoulder to enfold her breast - that was right, too, as it should be. And so was Damon's emphatic manhood, now thrusting upwards; that too was appropriate, perfect.\n\nDamon's breath caught at the feeling of soft fingers on his knee, tracing their way up his thigh. His hand swept over to Piper's other breast, squeezed tenderly. His uncertainty vanished when Piper reopened her eyes. The look in them was ageless, assured. He could see yearning in them, too, a need not just for him, but for his approval, his acceptance of her as she was. His breath caught again as her hand moved further, as if in confirmation, grasped his sac. Her tongue met his, teased and played as her fingers rolled his balls between them. \n\nDamon began to turn towards her, but the woman was faster and he found himself pushed onto his back on the grass with Piper lying half on top of him. Her lips crushed his, her tongue probing deeper into his mouth. His hesitancy gone, he kissed back, his own hunger now open and clear.\n\nPiper's fingers trailed lightly up and down the length of his manhood before returning to his sac, pulling it gently away from his body. She held it there for a moment, released it, began to roll his balls again. Damon had never been so hard, so aroused. His eyes closed as he focused on her light, deft touch.\n\nPiper smiled to herself, happy at Damon's obvious pleasure. Experience tells, she laughed inwardly.\n\nPiper in her turn gasped softly as Damon's hand squeezed first one breast, then the other, lifting, weighing them, mounding them. His hands drifted, began to roll and pull her long nipples; she sighed at the sweet sensation flooding through her body. It was clear that Damon, too, knew what pleased a partner. His patient, loving working of her nipples continued even as she shifted, moving to lie on her side, facing him. Piper shuddered, gave a slight cry as he lightly pinched a swollen nub, leaned down and began to tease it with the tip of his tongue. She felt her labia swell, sensed her dew on them, felt her clitoris ease out from under its hood, hard now, expectant.\n\nHer hand moved from his balls to his cock. She slid her hand over it, up and down, thumbing its swollen head at the top of each stroke, laughed as it twitched in her hand. Squeezing harder, she began to drag the velvety skin back and forth over its iron core, slowly at first, then faster and still faster. \n\nPiper gave a low moan as his hand moved down her body, caught her pubic hair, pulled it gently. She could feel the air on her wet sex, moaned again as a long finger traced the length of her pussy.\n\nSo good!&hairsp; she thought, delightedly. \n\nShe moaned again as the finger probed her opening up to the first knuckle, began to turn and twist within her. She could feel an orgasm building within her as the young man's foreplay fanned a fire unfed for far too long. \n\nShe sensed that he too was very close.\n\nPiper gave a strong push, rolling the young man onto his back, his engorged organ swaying for a moment in the sun. With a soft chuckle, she straddled him, reached down and slowly guided herself down onto his length. She paused for a moment, sitting upright, her eyes closed, allowing herself to enjoy the feeling of being filled, happily stretched by Damon's manhood. \n\nDamon lay still, his eyes sweeping back and forth between Piper's eyes and her breasts. His hands rose up over her waist, fell to seize the tops of her hips. He smiled at the sight of Piper's figure beginning to sway and rock on his cock. \n\nPiper's eyes were closed and there was a happy smile on her face, one of pleasant concentration perhaps. The sun shone through her blonde hair. Damon thought that he had never seen so lovely a sight, so desirable a woman. With each roll of her hips, her soft breasts swayed, the ends of her hair drifting across his face and chest. \n\nDamon slid his hands lightly over her thighs, came to rest on her bum. Piper's weight was on him and he couldn't move his hips. \n\nHe found himself longing to pull her down, to crush her lips on his. His hands rose, hesitated.\n\nInstead, he settled them on her waist, squeezed, pulling her body against his. Her skin was warm, soft, with toned, firm flesh underneath. His hands swept up to recapture her breasts, took her swollen nipples between thumb and forefinger, pulled gently, twisted.\n\nPiper drifted in a wave of sensation as she rolled up and down on the young man's cock. The taut rim of its crown pushing back and forth across her velvet lining fanned her arousal, each millimeter of motion like gasoline on a fire. \n\nFor the first time in months, the woman was allowing herself to be happy, to enjoy herself without guilt. She began to give short cries as Damon's fingers gripped her nipples more firmly, pulled them and turned them. \n\nShe shifted, grabbed Damon's wrists and leaned forward, pinning them to the grass over his head. She could feel her nipples brush across his chest hair every time her hips drove her torso down. \n\nDamon, for the first time in his experience, was not controlling the lovemaking. It was a strange thing for him -- exciting, but very different. Looking up at Piper, he could see that she'd caught her lower lip between her teeth. Her eyes were closed as she focused on the happy lust blooming within her.\n\nHis hands held against the grass, Damon could do little but enjoy the sensation of her working herself over and along his cock. After a moment, he bent his legs, pushing Piper further up his body. She opened her eyes, smiled at him briefly before changing her rolling to more of a plunging motion.\n\nHer heavy boobs swayed and swung as she bounced up and down; her soft buttocks slid up and down along his thighs. \n\nDamon found that he could lean his head forward and almost reach... He pulled his feet in closer, raising his knees, pulling her closer still... and found his mouth could now reach her nipples when she came close enough. She gasped in surprise the first time and, still biting her lip, moaned in appreciation.\n\nDamon's cock felt enormous to him. He could feel a fiery pressure building behind his balls.\n\nPiper dropped all of her weight onto her pussy, ground her pelvis against his. She went rigid for a moment, crying out at the explosion of joy, her orgasm possessing her, controlling her.",
        "\"Jamie!\" she cried out. \"Oh, God, Jamie! I love you!\"\n\nDamon lay still under her, thinking on that. He felt her hands release his wrists and he pulled his arms down, brought them around her waist, gave a gentle hug.\n\nPanting, Piper lay on top of him, her head on his shoulder. Despite his unsatisfied hardness, it still seemed to the boy to be as peaceful, as pleasant a moment as he could remember. He could afford to wait.\n\nPiper suddenly gasped, stiffened.\n\n\"What is it?\" he said, turning, trying to see her face. She clung to him, wouldn't let him see her.\n\n\"Oh, shit!\" she said softly. \"I'm so, so sorry, Damon.\"\n\n\"What's wrong?\" he asked.\n\nThe woman started to weep, initial sniffles growing to deep sobs. Instinctively, Damon began to stroke her head and shoulders with his free hand.\n\n\"What is it? Did I hurt you?\"\n\nHer head shook on his shoulder, but he felt a shudder run through the bare body under his hand and lifted it away.\n\n\"I'm sorry,\" she whispered. \"I called... Just now, I called you 'Jamie'.\" Her crying restarted, her body shook with her grief.\n\nDamon thought for a moment. His arm tensed, pulled her in to cradle more tightly against him.\n\n\"It's OK,\" he whispered tenderly. \"Piper, it's OK.\"\n\nHer head shook again against his shoulder.\n\nSometimes tears are a good thing,&hairsp; he thought to himself. Sometimes you just need to let people cry themselves out. It's part of healing.\n\nHer sex still full of his hardness, Piper wept months of fear, of loss, of sorrow. Damon could feel the tears flowing down his bare shoulder and chest, felt her arms pull him in tighter and tighter against her in her grief. He kept stroking her as one would comfort a small child.\n\n\"It's OK,\" he repeated, again and again.\n\nThe tears slowly subsided; her grip on his waist loosened. A tear-smeared face rolled up to look at him.\n\n\"I'm sorry,\" she whispered again, then hiccupped. \n\nDamon ran a fingertip along her cheek.\n\n\"You loved him,\" he said.\n\nRed eyes stared at his, as if puzzled at the statement,\n\n\"Yes,\" she said, \"Yes, I did. He was my life.\"\n\nDamon stretched, kissed her forehead gently, lay back and, still looking at her eyes, asked, very softly, \"And you were enjoying yourself when...\"\n\nHer reply was so soft as to be barely audible, even in the garden's stillness. \"Yes. Oh, yes!\"\n\n\"Piper,\" he said, hugging her gently, \"You were in love and you were happy. Why was that wrong?\"\n\nHer head turned to look at him.\n\n\"Because I...\"\n\nHis finger came to her lips, silenced her.\n\n\"Because nothing, sweet things. You've been hurting and deeply missing somebody who'd been part of your life for a long time. And you were enjoying yourself and thinking of him. It's OK. I'm not angry.\"\n\n\"But...\"\n\n\"It's OK, Piper. I'm happy to have made you happy.\" He leaned over and lightly kissed her lips.\n\nHer eyes grew wide.\n\n\"Really?\" she whispered. \"You're not upset?\"\n\nDamon let himself lie back, felt her body relax on his, her weight a pleasant burden.\n\n\"Piper,\" he said, \"for just a moment, put on your professional hat and think like a psychologist, not as an individual, not as a woman.\n\n\"Not,\" he said, smiling as he stroked a hand over her bare buttocks, \"Not that I have any complaints about that latter.\"\n\nShe hugged him, gave an almost silent giggle.\n\n\"Dr Coonage, if you were in your office and one of your patients was worried about something like this, what would you say?\"\n\nThere was no reply, but he knew she was listening. \n\n\"I think that you'd tell them that it was perfectly understandable, perfectly normal and nothing to worry about. Wouldn't you?\"\n\nThe woman was silent for a long moment before she shifted her body, turned her head. Her eyes locked onto his. \n\n\"I know, Damon,\" she said, \"Yes, I would, but men can be... different.\"\n\nHs stroked her cheek gently with one hand.\n\n\"I myself am very happy about that difference, Piper. And I'm not upset. We were making each other happy -- and that's how it's supposed to be. Isn't it?\"\n\n\"Yes,\" she said, before lowering her eyes. \"Damon...\"\n\n\"Mmm?\"\n\n\"You were... I mean, Jamie was my only... There's been nobody...\"\n\n\"Sssh,\" he said softly.\n\nDamon could feel her breathing, felt her weight decrease as she took more of her weight on her knees. He found that he could shift within her and began a very slow but very deep stroke. Piper chuckled at the sensation and he continued, enjoying the moment.\n\nHer head came up. They locked eyes.\n\n\"Damon,\" she asked, hesitatingly, \"did you...?\"\n\nHe smiled at her. \"Like I said, Piper, it's OK.\"\n\n\"Like hell!\" she whispered. With surprising strength, she grasped his torso with her arms and rolled over onto her back, carrying him with her, still locked together.\n\nShe brought her hands up, pulled his head down so it was right in front of hers. \"Like hell, Damon,\" she repeated. She spread her legs wider, felt him slide in a bit deeper, shivered as an orgasmic echo shimmied within her.\n\nDamon, trying to keep most of his weight on knees and elbows, began to ease in and out of her, felt the fire in his loins grow hotter. \n\nBeneath him, Piper began to roll her hips to meet each of his thrusts, squealing once as Damon sped up. She wrapped her legs around his waist, pulled him in harder each time he moved back into her.\n\nDamon felt as if his balls were heavy as bricks. Inside Piper's slippery softness, his crown seemed twice its normal size.\n\nBeneath him, Piper began to gasp each time his stomach slapped down onto hers. The heat built within her, her sex taking charge.\n\nDamon's eyes were closed, his lips thin with concentration. She reached up. pulled his head down, locked her lips on his. She unlocked her feet from around his waist, planted them flat on the grass. Thus anchored, she began to bounce her hips against Damon as he plunged into her. A growl came from deep within her chest as another orgasm flooded in, softer, but rounder. It seemed to last forever, growing more powerful, increasing with each of Damon's thrusts into her. Her world was filled with the joy of it and she clutched his body towards her, dug her nails into his back, gasping for air, crying out in wordless bliss.\n\nWith that, Damon went rigid. She could feel his hardness pulsing and throbbing within her, feel his weight on her as he collapsed, almost boneless. She could hear his hoarse panting by her ear.\n\nAnd still her own orgasm continued. She shuddered, shivered, gave into it entirely.\n\n+\n\nDamon awoke, felt her body next to his, heard a soft snore by his ear. Something made a sound to one side. Rolling his head, he saw a red fox sitting on its haunches, examining them. Its tongue rolled out, licked its nose.\n\n\"Hi,\" he greeted it. At the sound, the fox sprang to its feet, trotted away through the bushes.\n\n\"Hi, yourself,\" Piper whispered into his ear. She wondered why she had been so nervous.\n\n\"Fox,\" he said, trying to explain.\n\nHe felt her arms close around him in a deep hug.\n\n\"You say the sweetest things,\" she whispered.\n\nSo he did.\n\n<center>+\n\nThanks for reading.\n\nPlease remember to vote, if not for this story, then for one you think is better. </center>"
    ],
    "authorname": "TarnishedPenny",
    "tags": [
        "cowgirl",
        "hospital",
        "isolation",
        "loneliness",
        "meditation",
        "nude meditation",
        "outdoor nudity",
        "widow"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/scrubs"
}
{
    "title": "Box Shaped Heart Ch. 34",
    "pages": [
        "Chapter Thirty-Four - Mints, Anyone?\n\nSo what the hell was he going to do now? Had Aron called and he missed it or something? He checked his phone. No calls. Okay, he needed to see Aron.\n\nWait, he needed to take a shower first. They were seriously going to have sex. If what the girl had said was true ...\n\nOf course it's true. Now we remember everything.\n\nI'm so amazed how quickly you take credit. You said you had nothing but blank space in that part.\n\nBut now we know.\n\nYes, he knew. The news was everywhere now. The entertainment channel clearly had a slow day, and it was just repeating it every half an hour. Although he needed to take that shower, he chose to sit on the couch and watch the news again.\n\nThe ponytail girl seemed undaunted by the cameras and microphones pushed in front of her.\n\n\"Yeah, I do have the video,\" she said. \"But the police need to take a look at it first. It's pretty dope,\" she added with conviction.\n\n\"So did you catch everything on your smartphone?\" one of the reporters asked.\n\nThe girl nodded and smiled, seemingly quite pleased with herself.\n\n\"Can you tell us everything, from the top?\" \n\nThis time, the girl looked at the police officer to her right, and the man nodded shortly.\n\n\"Well, I was, like, walking to catch the bus, and all of a sudden, I see Alex Ruskin,\" she started, her eyes all shiny now. \n\nOf course, the guy was gay, but chicks still digged him. Who was he kidding? Every gal and guy, gay or straight, digged the fucker. Ah, well, Carter shrugged and continued to watch.\n\n\"So I take out my phone, and I start recording, but, you know, so that he doesn't see me or anything,\" the girl said. \"He's looking behind him for like a couple of seconds, I don't know why, and then he just turns and stares ahead, chin up high, and looking fabulous.\"\n\n\"Did he notice you?\" another reported asked.\n\n\"No, he was just looking ahead and he started crossing the street. Frankly, I didn't notice the fire truck, either. I guess I was too taken with Alex,\" the girl half-giggled. \"He's just so cool,\" she added dreamily.\n\n\"What happened next?\" someone interrupted the girl's wide-eyed dream.\n\n\"Well, I hear someone yelling, and I think like, what the heck, and there's this guy coming from behind, and bang! He practically pushes Alex away from the front of the freaking truck!\" the girl said, now clearly excited. \"And I'm like in total shock and Alex is basically rolling on the ground, but he doesn't look that badly hurt, and bang again! The fire truck practically hits this other guy full frontal, like I can still hear that sound! It was horrible!\"\n\n\"So why didn't you help them or stay to call an ambulance, and tell the police what happened?\" \n\nThe girl stole a look to her right again, and this time some of her excitement vanished. The police officer was frowning, but again, he nodded.\n\n\"Well, I saw the fire truck driver getting down and hurrying toward the victims, and I said to myself, what the heck, he's more qualified than me, anyway, and also it was like, his fault. And I had to catch the bus, because otherwise, I wasn't going to catch the plane, and then ...\"\n\n\"But the police tweeted about the accident, didn't you see anything?\"\n\n\"What can I tell you, man? I was off-grid, I was with a group of friends, we all decided to live like Mother Nature intended, for the whole summer, you know, no electricity, no nothing. I had to, like, take half of the house with me,\" the girl said again. \"As soon as someone came looking for me, I was all down with saying everything I knew.\"\n\nThe police officer finally grabbed the microphone, and the girl took a step back.\n\n\"I want to tell all the young people who are watching this how important it is to take the right type of action when something like this happens,\" the man began.\n\nCarter tuned out the police officer's lecture that followed. It was still un-freaking-believable, but now he did remember everything. He sighed in contentment. Okay, he hadn't pushed that obnoxious scumbag in front of the fire truck. Actually, he had saved the asshole's life.\n\nAnd he knew very well why. Yeah, he needed that shower, and maybe he had to comb his hair, too. Making himself pretty and all that, ready to see Aron.\n\nHe was barely out of the shower, and his hair was practically sticking in all directions, after rubbing it with the towel, when he heard keys turning in the door lock. Ah, Aron was here already and probably didn't want to wake him up so he was using his keys. He hurried for the door and grabbed the handle, barely reigning in his excitement.\n\n\"Hey,\" he said with a smile, opening the door wide.\n\nHis smile quickly vanished, though, as Aron pushed him inside, making him take hurried steps back until he hit a wall. Aron looked damn serious. And he was looking into Carter's eyes, like he wanted to extract some truth out of them.\n\n\"Can you please tell me what the hell is this?\" Aron asked, using one hand to keep Carter glued to the wall, and the other to bring forward his phone.\n\nJust for a second, he freed his victim to press play on the video displayed on his phone. Carter watched in horrid fascination. The angle was not the best, and it was clear that the one who had taken it was more bothered with catching Alex on camera, but it was all there. So Aron had the video, unlike the scumbags at the entertainment channel. That meant that the operation private eye had been a major success.\n\n\"So the detective found the girl?\" he asked. \"Great guy, that guy. I mean, I know. I saw it on the news.\"\n\n\"Shut up,\" Aron growled, and almost pressed his phone against Carter's nose.\n\n\"Well, that's the accident,\" Carter said matter-of-factly. \"I do remember everything now. Isn't it really strange?\"\n\n\"Carter,\" Aron breathed out, \"listen.\"\n\nAron brought the volume to the maximum and replayed the video. \n\nOh, great, now he could hear himself yelling something like 'I just want Aron to be happy!' while pushing Alex away from the fire truck. Okay, that was pretty awkward if he were to think about it. \n\n\"Well,\" he frowned and started scratching his head.\n\n\"Hmm,\" Aron interjected, after tossing his phone on the couch without even looking if it landed safely. \"What do you have to say for yourself?\"\n\nOkay, so Aron was mad. Why was he mad?\n\nWhy is he mad?\n\nHow the hell should I know? It must be that you did something stupid.\n\nWell, it wasn't like I had that much of a choice. If Alex had died, Aron would have been very unhappy.\n\nAron almost shook him.\n\n\"Carter, please, stop losing yourself in your head for a second and tell me, okay? You jumped in front of a freaking car!\"\n\n\"Fire truck,\" Carter raised one finger.\n\nAron groaned and this time really shook him.\n\nSensing the distress in the small apartment, Taz got up from his place and started barking at the intruder.\n\n\"Don't worry, Taz,\" Aron spoke to the dog, easing his grip on Carter for a fraction, \"I'm not going to kick your dad's ass. Not yet at least.\"\n\nOkay, he needed to choose his next words carefully. But he was kind of blank.\n\n\"Why are you so mad?\" he eventually asked.\n\nAron looked at him, and there was a mix of wonder, affection, but also some very entitled rage in the man's eyes that Carter had no idea what to make of.\n\n\"You jumped in front of a fire truck,\" Aron spoke, this time a little appeased. \"To save my husband's life. Without caring how I would have felt if you had died.\"\n\nCarter opened his mouth, and then he closed it.\n\n\"That's quite the dilemma,\" he murmured.\n\nTaz stood on his back legs and set his front paws on Aron's leg, looking up. He wasn't barking anymore, but wagging his tail. \n\n\"What a traitor,\" he looked at his dog.\n\n\"So can you tell me what were you thinking?\" Aron asked, and now there was a small smile tugging at the corners of his mouth.\n\n\"Hmm, the fire truck was moving at a velocity of, I don't know, 60-70 miles? And I thought that I had enough time to ...\"\n\nAron sighed, interrupting him.\n\n\"Allow me to do it. Let me make this easy for you.\"\n\nThe grip on his shoulders eased, and Aron cupped his face, caressing it slowly with the thumbs.\n\n\"You love me,\" Aron said with conviction.\n\nCarter could feel his heart growing smaller with Aron's simple statement.\n\n\"I do?\" he whispered.\n\nAron nodded slowly.\n\n\"It's okay. I know how things are with you. I should have been the one to talk about it, to make it clear. I shouldn't have been the coward I was. It's okay if you won't say it,\" Aron said, as he continued to caress Carter's cheeks. \"I should know better, that words like this don't come easy to you.\"\n\nNo, it wasn't okay. Carter caught Aron's hands into his, pushing them down. And then the words started tumbling like sweets from a jar.\n\n\"No, it's not okay. I do love you. Because I do, okay? And no, I didn't think of the velocity of the fire truck, although I could. I mean, I did. But only a little. I had like a flash, a vision, or whatever, I don't know how that's called. Of you, all dressed in black, crying at a funeral. And I just couldn't stand it, okay? And maybe I can't stand Alex because he stole you from me, but I didn't want you hurt. So I just ... you know, I found myself there, in the middle of the street, pushing him away. And I understand why you couldn't say it because I know myself. And it's true that I have all these boxes that I use to compartmentalize everything. And you, you, you ...\" he struggled, trying to find his words.\n\n\"I was a box?\" Aron tried to help him.\n\n\"No,\" he protested, feeling frustration growing at no other but himself. \"You're not a box, you've never been. You were ... are everywhere ... inside me. But I have all these boxes, like you said. And this, what I feel for you, it didn't fit anywhere, you know? Although I thought it had to.\"\n\n\"So love is a box?\" Aron was smiling now, and his eyes were filled with fondness.\n\n\"No!\" Carter exclaimed again. \"I am ... no, my heart is like a box,\" he let go of Aron's hands to gesture with his arms, and try to make a solid square with them.\n\nAron was now chuckling softly.\n\n\"Okay. So I'm finally welcome into your box shaped heart?\" he asked, pulling Carter to him.\n\n\"How could you be? You've been there since forever. And never left,\" Carter said, with all the seriousness he could muster now, as he began to melt in the other's arms.\n\nThe kiss that followed wasn't like the usual, or at least, he felt like it was different. Because he felt like he was getting really swept off his feet, although he clearly knew for a fact that his feet were on the ground, and there was no way those people in those romance movies or books or whatever, could have been so accurate describing something as impalpable as this.\n\nTaz barked, but now it was his happy bark. Carter knew it. Well, the kid probably felt left out. Aron let him go, albeit reluctantly. He was the one to look at the dog and talk to him first.\n\n\"Taz, you should get ready, kiddo. Because I'm here to take you both home with me.\"\n\n\"So what are we now?\" Carter felt the need to check.\n\nAron smiled.\n\n\"Well, what do you think?\" he asked. \n\n\"We've been best friends, fuck buddies, roomies ...\" Carter counted on his fingers. \"What's next?\"\n\n\"Let's start with the obvious,\" Aron spoke. \"We are, well, you are a straight guy who got flipped by his gay best friend, and I'm the flipper!\" \n\nAron was so pulling his leg right now.\n\n\"Flipper, huh? I had no idea you had a sense of humor,\" Carter pretended to frown, but he began to grin, too.\n\n\"I don't. I'm just saying it like it is,\" Aron drawled the words, while pulling Carter close for another kiss.\n\n\"So, are we going to get married?\" Carter asked when Aron finally allowed him to breathe.\n\nAron feigned seriousness. \n\n\"I think I'm done with marriage for a while. I'm all for a trial period,\" he joked.\n\nCarter punched the guy's shoulder. This was friggin' serious.\n\n\"Asshole. I'm not at all for a trial period,\" he protested.\n\n\"Oh, so you want to get married,\" Aron teased. \"You're so gay now that you want a gay wedding?\"\n\n\"Why shouldn't I want a gay wedding? I want a gay cake, too!\"\n\n\"A gay cake? Do you really believe there's such a thing? How does a gay cake look like?\" Aron questioned him.\n\n\"I have no idea. We should google it,\" Carter shrugged.\n\nAron was really laughing now.\n\n\"I still need to go through a divorce first,\" he pointed out. \"It might get nasty. And expensive.\"\n\n\"Fine, I'll buy the rings,\" Carter rolled his eyes. \"And a gay cake.\"\n\n\"Rings, huh?\" Aron bit his lips, to stop himself from laughing. \"I had no idea you would be a stickler for tradition.\"\n\n\"I'm down with everything if it's about you,\" Carter replied, glaring a little. \"Hey, did you say you love me? Because I don't think ...\"\n\nAron pressed their bodies together once more.\n\n\"I must have been too busy kicking myself over not saying it that I forgot. I love you. Is this fine?\"\n\n\"Hmm, not very romantic,\" Carter feigned complaint.\n\n\"Well, we have all the time in the world to get it right,\" Aron smiled.\n\nCarter smiled back, feeling all giddy inside.\n\n\"Don't worry. I'm just joking. But seriously, what would you have done if I had never said it? Or if the eyewitness couldn't be found and all that?\"\n\n\"Ah, I would have bribed Alex in the end and divorced him anyway. And I would have taken you very, very slowly, not to scare you,\" Aron began explaining. \"I had an entire plan in motion. First step was, as you know it, to have you move in with me. Then I would have made everything possible for you never to want to leave me. And, at our 20th anniversary, when we were going to throw a party, and there were going to be a lot of people coming over, and you were going to ask 'what's the occasion?' I would have told you: well, we've spent the last 20 years together, and so we are going to spend the next 20, and the next 20 ...\"\n\n\"Oh, I cannot believe you!\" Carter pretended to be scandalized. \"So you were going to be really sneaky about it! I bet you would have gotten the kids to help, too, for this plan of yours!\"\n\n\"The kids, huh?\" Aron glared, but then immediately burst into laughter. \"Ah, damn, how could I be so damn stupid and blind?\"\n\n\"If it's any consolation, I'm the stupider one,\" Carter said with a sigh. \"I should have told you what I felt instead of insulting your husband at the wedding. I didn't realize that, you know. Although it would have been too late, right?\"\n\nAron made their foreheads touch.\n\n\"You could never be too late. I'm glad that we're together now, and that's all that matters. Now, hurry. Pack only the essentials. I can barely wait to show you the new house.\"\n\n\"All right,\" Carter replied gleefully. \"Should I get the plates?\"\n\n\"Forget about them. We'll come later to get them. Just grab your laptop, Taz, and yourself.\"\n\n\"You can't be serious. Do you have a dog bed? I bet you don't.\"\n\n\"I already have a dog bed. And shiny new toys. And a yard Taz will love,\" Aron replied promptly.\n\n\"Still, I need my toothbrush, and some clothes ...\" Carter tried to argue with his best friend, now soon or not so soon to be husband, depending on the divorce and all that.\n\n\"I have everything you might possibly need, trust me,\" Aron replied. \"But, okay, grab a few things that you feel you don't want to live even one day without, and let's go.\"\n\nOkay, he had enough motivation to pack quickly. A few clothes, the laptop, and his toothbrush had to do for now. He returned to the small living room, only to find Aron reading some piece of paper with a deep thoughtful frown on his face.\n\n\"What are you doing?\" he asked.\n\nAron threw him a curt look, and started reading.\n\n\"Things to learn and do to make Aron happy for the next 15 years.\"\n\n\"Oh, fuck,\" Carter mumbled and hurried to snatch the paper from Aron's hand.\n\nWithout too much effort, Aron dodged him and stopped him with one hand, keeping him at arm's length. He continued to read.\n\n\"Cooking. Anything but lasagna. There is no way I can top the kind Aron's making. Learning French. Waxing my ass?\" Aron looked at him questioningly, and now he was laughing for real. \"Why would you do that? Oh, and you even put a small dot here, and wrote 'this will hurt like a bitch'. But why 15 years? Were you planning to stop making me happy after 15 years?\"\n\n\"No, that was the time limit for asking you to marry me,\" Carter answered promptly.\n\n\"Oh, damn, why?\" Aron asked, barely keeping in a bout of laughter.\n\n\"Because you loved me for 15 years before, so I had to compensate.\"\n\n\"Of course you had,\" Aron shook his head, like he could not believe all that. \"Well, we won't need this list,\" he decided, and finally letting Carter, he made a small ball out of the piece of paper.\n\n\"Hey,\" Carter protested, trying to reach his hard work. \"It took me hours to put that together!\"\n\n\"Well, you won't wax your ass,\" Aron said promptly, throwing the crumpled paper over one shoulder and grabbing Carter to embrace him tightly. \"And I don't trust you in the kitchen alone.\"\n\n\"Ouch, that hurt,\" Carter said, placing one hand over his heart. \n\n\"Let me finish,\" Aron interrupted him. \"And you don't have to learn French for my sake. See, I'm just making things easier for you.\"\n\n\"But what if I let myself go?\" Carter complained.\n\n\"You've already asked me to marry you, and I said 'yes'. I'd say that you can let yourself go a little. Not much,\" he joked. \"But still, learning French?\"\n\n\"What if we travel to France and we don't have a guide?\" Carter started. \n\n\"France has many tourist oriented places. I doubt we really need to speak French to visit.\"\n\n\"But what if we land in some place where no one speaks English?\" Carter insisted. \"And we end up like in those movies, you know, horror movies, where you get judged for not knowing the local laws, and they throw us in jail or something?\"\n\nAron started laughing again.\n\n\"Okay, learn French, if you're so bent on this. Wait, do you want us to go there?\"\n\n\"No, not in particular,\" Carter shrugged.\n\n\"Good, because first I want to keep you close for a while, without that many people around us.\"\n\n\"Hmm, and you won't get bored? Just with me around?\" Carter wondered out loud.\n\n\"I don't think so,\" Aron hugged him and made their lips touch again. \n\nWhen Aron let him go, minutes later, Carter didn't need any additional explanations. So what was that he needed to pack? Ah, only his laptop and Taz. And Aron had already moved to the door, with Taz on the leash. \n\nSeeing his best friend at the door, smiling a million-dollar smile, seemed like something out of a fairytale. But he was certain it was real. He was damn certain it was all real.\n\n***\n\n\"Hi,\" Alex spoke curtly as he practically blocked the way as Carter was trying to reach his car.\n\nHe wasn't exactly expecting that to happen, but moved the bag of groceries from one arm to the other, while waiting for Alex to speak whatever the guy had on his mind. Aron was at work, and he was doing the necessary shopping. His hopefully soon to be husband had made a comprehensive list and he was pretty certain he had followed it to the letter. Somewhat.\n\n\"I think I should say 'thank you',\" Alex began, his voice a bit hesitant, but honest, as far as Carter could tell.\n\n\"You're welcome, I suppose,\" Carter replied. \"Although I didn't do it for you,\" he hurried to say.\n\nWell, that sounded bad.\n\n\"Sorry,\" he added.\n\nAlex smiled, but his lips remained pursed, like he had just licked at least half a lemon.\n\n\"People say you're a hero,\" Alex said.\n\n\"Yeah, they exaggerate,\" Carter replied. \"Because I'm not sure I would have ... You know.\"\n\n\"Yeah, probably no one would,\" Alex said with a sigh.\n\nCarter knew he had to be on his toes around this guy. But Alex didn't seem to be his usual diva self. If anything, he sounded genuine. Also, a tiny bit sad.\n\nAre you feeling for the guy now?",
        "A little. I mean, he could have been dead. That changes a person.\n\nI'd say you should be careful, that's all.\n\n\"I thought I was remembering everything about the accident. But, oddly enough, until that girl came up and spoke, I wasn't. Not everything,\" Alex explained. \"I had no recollection of you saying that, you know, before seeing the video. About how you wanted Aron to be happy. It must be nice,\" he said, his beautiful green eyes darting to one side.\n\n\"What?\" Carter asked.\n\n\"You know. To feel for someone like that. To have someone feel for you like that.\"\n\nAh, that. All right, this was awkward. He had no idea what to say to the guy.\n\n\"You'll find someone,\" he said, remembering some of the things he had seen in a movie where some girl was trying to console one of her friends who tended to be awfully and unexplainably unlucky in love.\n\nAlex smiled.\n\n\"You're just saying that,\" he said, but his eyes shone a little brighter.\n\n\"I suppose,\" Carter sighed. \"I don't really know what to tell you. I just thought that would make you feel a little better.\"\n\n\"I think I understand now what Aron sees in you,\" Alex measured him through his eyelashes, his head a little thrown back. \"You're a funny guy. And choked full with good intentions.\"\n\n\"Thanks, I guess,\" Carter mumbled.\n\nThe grocery bag was getting heavy in his arms. Taz was getting restless, too.\n\n\"Anyway, I'll sign the papers and I promise the divorce won't be a problem,\" Alex spoke.\n\n\"Ah, that's nice.\"\n\n\"But I'm keeping the car,\" Alex's eyes thinned.\n\n\"Keep the frigging car,\" Carter shrugged. \"Aron would never take a gift back. And driving that kind of car is overrated, anyway.\"\n\n\"How do you know?\" Alex snorted.\n\n\"I watched a documentary. A Veyron is still better,\" Carter said promptly.\n\nTo his surprise, Alex didn't get mad at hearing his precious vehicle getting insulted so directly. Instead, he laughed.\n\n\"Just like I said. You're funny. All right. So I suppose my karma gets a bit of its rightful balance back now that you and Aron have my blessing to get hitched,\" Alex spoke, but that last part seemed addressed mostly to himself.\n\nAlex didn't seem to remember the body swap. Yet, he seemed a little changed. Maybe the whole thing did change him, at least to some degree.\n\n\"Well, I suppose this is it,\" Alex put on his sunglasses and threw Carter the kind of smile that was making him a star. \"I would say to give my best to Aron, but frankly, I think he doesn't care about that.\"\n\n\"I'll tell him, anyway,\" Carter replied.\n\nAlex squared his shoulders and waved goodbye as he started walking toward his car. For a while, Carter just stood there and watched the guy climbing behind the wheel. Funny, the guy was slightly turned to one side and seemed to talk to someone next to him.\n\nSomeone who did not seem to be there. \n\nAh, probably the guy was just using his hands free and was talking on the phone.\n\n***\n\n\"Would you go a little outside and look for the moving truck?\" Aron stole a small kiss from him, as he held his hands away from his body, like a surgeon.\n\n\"Sure thing,\" Carter replied with a kiss of his own.\n\nAron was cooking, and his hands were covered in flour. He could barely wait. Aron had said it was going to be a surprise. And this time, he hadn't bought the ingredients so he had no idea what the treat was going to be. No problem. He was ready to be surprised.\n\nOnly his things had to arrive. Although Aron had had the house completely furnished, he had agreed that a few things could be transferred from Carter's place, if not for another reason than that they both decided that it would make their home a little more Carter oriented. Aron was all for equality. Carter didn't care that much. He loved Aron's taste in curtains and everything. Although he had put some effort into choosing those plates. He only hoped the moving guys were not going to turn them into more pieces than they were.\n\nHe rushed into the street. There was no sign of the van. He was about to go back into the house when he noticed someone waving at him from the other side. Could it be ...?\n\nMark was gesturing for him to cross the street and he was smiling widely.\n\n\"Hey,\" he said, and eyed his not exactly guardian angel with a bit of unease.\n\n\"Relax, Carter,\" Mark patted him on the shoulder, the moment they were on the same side of the street. \"I just came to say goodbye, this time for real. I'm glad to see that you remember the accident now.\"\n\n\"I do,\" Carter said slowly. \"Wait, now that I remember ... oh, no, are you here to take Aron away from me?\"\n\nMark laughed.\n\n\"Carter, you earned your happiness. And could anyone really take Aron away from you? Ever?\"\n\n\"Ah, cool,\" he relaxed. \"So, any funky business from pesky humans you need to take care of? Or you're ready to go ...\" Carter gestured with his hands as if he was expecting Mark to stretch a pair of wings suddenly and soar into the sky.\n\n\"I'm actually done here for the moment and that makes me really happy. Maybe I'll even take a holiday,\" Mark said with mirth. \"Although I must say you really did scare me. As I told you, you gave me quite the fright. Do you know now what your most ardent wish was? Still is?\"\n\n\"Yeah,\" Carter smiled widely. \"For Aron to be happy.\"\n\n\"That was quite an important point in the case I made for you,\" Mark said, nodding gravely.\n\n\"Up there, you mean?\" Carter pointed at the clear sky above.\n\nMark nodded again.\n\n\"Can you imagine? I was just having my tea when your name started rolling on the list of the people ready to be taken over the river,\" Mark spoke, his eyes a bit unfocused.\n\n\"Over the river? Like Styx?\" Carter asked.\n\n\"It is incredible how spot on some aspects from humankind's religions are,\" Mark said. \"Of course, it is not a river like others.\"\n\n\"I guess,\" Carter murmured, dumbfounded with the revelations Mark was so leisurely sharing with him.\n\nProbably it was no vital information, and the not exactly guardian angel could talk about it with a mere human.\n\n\"I ran downstairs right away and pleaded with the guy responsible with wiping the names to put your case up for hearing. The fact that you yelled from the top of your lungs that you wanted Aron to be happy really helped. It was just the stuff I needed to point out that there would be no ground for your name to be wiped so prematurely. Since your demise would have just made Aron unhappy, thus making your wish impossible.\"\n\n\"Wow, so you were like my lawyer?\" Carter wondered. \"Glad you won.\"\n\n\"I'm glad, too,\" Mark chuckled. \n\n\"Can I ask you something?\" Carter said. \n\nMark nodded, with the same big smile on his good natured face. \n\n\"Will, you know, Alex be okay?\"\n\nMark's eyes filled with fondness.\n\n\"Yes, I guess he will be all right. Nice of you to ask about him. Would you like a mint?\" Mark changed the subject.\n\nCarter looked at the open metal box offered and picked one.\n\n\"Does my breath stink?\" he asked, and attempted to exhale into his palm to test that.\n\nMark laughed.\n\n\"No. But I couldn't find any blue and red pills. Plus, I like mints.\"\n\n\"I like them, too,\" Carter said and popped one into his mouth.\n\nHmm, it was a really good mint. Not so minty, and a little sweet? He wondered as he savored the taste.\n\n\"Where did you get these?\" he asked and turned toward Mark.\n\nOnly to discover that the guy had simply disappeared.\n\nWell, it was a bit sudden, but probably the guy was busy with who knew what other situation. It was not like he could keep a guardian angel all to himself. \n\nPlus, he had Aron. So, all in all, it was a pretty good deal Mark had cut for him. Carefully watching for cars, he crossed the road, and walked back into the house. A pleasant smell wafted to his nostrils. Hmm, cookies?\n\n\"So, still no sign of them?\" Aron called from the kitchen.\n\n\"What?\" Carter asked, shaking his head.\n\nAron looked at him, a bit surprised.\n\n\"The moving truck. Did you make a round of the neighborhood? What do you think about it?\"\n\n\"Ah, no, not exactly,\" Carter replied, a feeling of confusion tickling his brain like the soft feathers of a flock of birds. \n\n\"You were out for more than half an hour. Ah, you went to that small store at the end of the street?\" Aron moved closer and sniffed him. \"I grabbed some mints the other day from there. They don't make them like they used to, but these guys still know their stuff.\"\n\nAh, Carter clucked his tongue. Yeah, he had been to the store. And the mints were great, too.\n\n\"Want some?\" he reached into his pocket and took out a metal mint box. \n\nAron smiled and took one.\n\n\"Yeah,\" Aron confirmed. \"They're really good. Hey, is everything okay with you? You seem a little off.\"\n\nCarter stared into Aron's eyes, and smiled. \n\n\"Worried about me?\" he laughed.\n\nAron put his hands on Carter's shoulders and squeezed them tightly.\n\n\"Well, you do have the bad habit of running into the street, right in front of moving cars,\" he joked. \"I might have to get a leash. For you, not for Taz.\"\n\n\"Ah, I'm pretty sure I'm not going to do that again,\" Carter snickered. \"Losing weeks of my life, just lying in a hospital bed, in a coma, is not exactly among my priorities. I might feel a little confused over that lost time, I think.\"\n\n\"Do you feel any dizziness? Or headaches?\" Aron asked, looking at him, like he was ready to whisk him to the hospital that very moment.\n\n\"Nah, nothing like that. Although,\" Carter said slowly, \"I just feel like I had the most amazing dream, and I cannot remember much of it. Ah, damn it, it's like on the tip of my ... brain.\"\n\n\"Your brain has a tip?\" Aron chuckled.\n\n\"You have no idea,\" Carter laughed, too. \"And he's a scumbag, too. I don't particularly like talking to him.\"\n\n\"You don't have to talk to him anymore,\" Aron brought him closer to embrace him. \"I'm here, and you can talk to me anytime.\"\n\n\"And damn I'm glad for that,\" Carter laughed. \"Although I'll still talk to him. Just when you're not around. And not because I'm lonely. Because I'm not. Not anymore.\"\n\nAron kissed him sweetly. \n\n\"Hmm,\" Carter purred in delight. \"So what did you make?\" he pulled at Aron's collar to hold his soon to be husband accountable for the delicious smells coming from the kitchen.\n\n\"Let me get you a madeleine,\" Aron said. \"It will make you feel good.\"\n\n\"A madeleine? There's nothing you can't cook, right?\" Carter commented, but he let himself dragged along, without putting up any resistance.\n\nAron didn't reply to that, and just pushed him to sit at the table on which a plate loaded with the small French cakes. He took one and groaned in pure delight the moment the taste hit his buds.\n\n\"Would you like some tea, too?\" Aron turned holding a steaming pot.\n\nCarter nodded enthusiastically. He was already feeling better. And memories of a strange dream involving something weird, like him living for a while in Aron's ex-husband's body, slipped from his mind as they had never been there. \n\nAron was his. Forever.\n\n*****\n\nAuthor's note: This was about it, good people! Next time, the epilogue will come and wrap up this story. I hope you enjoyed it until the end.\n\nI just want to address special thanks to everyone who supported me along the way, and encouraged me. For your kind words and understanding, I will always be grateful. Carter was not always easy to write, but he was as interesting and amazing as any writer would hope for in a muse. Also, for your appreciation of him, I am deeply thankful."
    ],
    "authorname": "laurasfox",
    "tags": [
        "gay novel",
        "gay romance",
        "romance",
        "romantic"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/box-shaped-heart-ch-34"
}
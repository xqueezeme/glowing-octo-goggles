{
    "title": "My Sister Moves In",
    "pages": [
        "My husband Dave and I were sitting at home when my sister Tina called. \n\n\"Well, we sold the house,\" she said. \n\n\"I'm sorry,\" I answered. \"I know that was hard for you.\" \n\nMy sister was 26 and six years younger than me. She'd just been through a rather nasty divorce. They had to sell the house as part of the settlement. She loved the house and wanted to buy her ex out, but for numerous reasons it didn't work out. Now it was sold. \n\nShe cried over the phone. Shed saved like crazy when she was younger to afford a down payment. She knew she wanted a house as soon as possible. She was determined and put a lot of effort into saving. \n\nShe'd put a lot of sweat equity into the house. She'd redone the kitchen and bathroom almost all by herself. My husband had helped with some of the heavier lifting. She had stripped the carpet and brought the hardwood floors back to life. Her husband had been absent for most of the process. He'd work late hours and weekends. \n\nShe had ninety days left in the house.\n\n\"Now what,\" I asked. \n\n\"Well, I'm not sure. I don't think I can afford a new house by myself,\" she said in a sad voice. \"I guess I better find an apartment fast.\"\n\nWe talked a while longer. I told her to call at anytime, and we hung up. \n\nMy husband knew that something was wrong from the look on my face when I came back in. \n\n\"What's up?\" he asked. \n\n\"She sold the house,\" I told him.\n\nHe already knew all the backstory. Dave and I are very close and I share everything with him. \n\nHe turned off the TV. He knew I wanted to talk. \n\n\"What now?\" he asked.\n\n\"She's not sure,\" I replied. \"Probably look for an apartment. \n\nHe sympathized. He knew how much she wanted to be in a house. We chatted about it for a while. \n\nThen he said, \"She'll never be able to afford a new house if she's paying rent.\" \n\n\"I know,\" I replied. \"She knows it too. I think that's why it's so hard.\" \n\n\"Well,\" he said. \"She could stay with us.\" \n\nI looked at him. Every reason I loved him came to mind. That happened a lot, he was very good to me. He worked very hard to give me the life I wanted. He was good to my family, he always did housework without being asked, when I had a bad day at work he was always there. Our marriage was wonderful. \n\n\"You think?\" I questioned. \n\n\"Sure, we have plenty of room. She and I get along great.\" He replied. \n\nWe did have plenty of room. 3100 sq ft, and five bedrooms. We were planning on starting a family soon and had bought a house to contain us. \n\n\"This is why you get blow jobs whenever you want,\" i quipped. It was our little joke. It was something I said whenever he did something nice. I said it a lot \n\nActually it was true. He was a great husband, plus, I found him sexy as hell. If he wanted a blow job I couldn't get to my knees fast enough. I loved having his cock in my mouth. Plus he was an amazing lover. I'd do anything he asked sexually. \n\n\"She could help me update the house, after all, she owes me,\" he quipped. \"Do you think you could live with her?\" \n\nI thought. My sister was younger than me. She was enough younger that we were never in school together or competing for friends. We always got along great. As we got older she was my best friend. We were the maids of honor at each other's weddings. We shared friends and just about everything else. \n\n\"Of course,\" I answered. \n\n\"Well, all my friends will be jealous,\" he said. \"I'd get to live with two such beautiful women.\" \n\nI thought. At 32 I kept myself in shape. I was 5' 6\" 130 with blonde hair down past my shoulder blades. My sister was just a younger version of me. We swapped clothes easily and were often mistaken for each other by people who didn't know us well. \n\n\"Well, poor you,\" I laughed. Then I kissed him. \n\n\"How about one of those blow jobs now?\" I whispered.\n\n\"Who could say no to that?\" He replied as I slipped to my knees. \n\nIt was late evening so we had both changed into our sleepwear. He was wearing a pair of workout shorts and a T shirt. I tugged his shorts down to expose his cock. It was already semi erect. \n\n\"Mmmmm,\" I said as I took it in my hands. \n\nI admired it for a moment. He had a great cock. At about 8\" he was just this side of too big. It was thick, thick as a tube from a roll of paper towels. The head was just a bit thicker. I loved his cock. I took it in my mouth. \n\nGod it felt good. I loved how it got harder as I sucked it. There was a drop of pre-cum on the tip. I licked it off. My mouth bobbed up and down on his cock. I couldn't get it all in my mouth so my hands were wrapped around it and I jerked him off as I sucked him. \n\nI stopped for a moment. I was in a tshirt and panties. I reached down and pulled my T off over my head and tossed it aside. He loved my tits. 36c and firm. I wanted him to see them. Then I lowered my mouth back to his cock. \n\nHe pushed my hair back over my shoulders. He loved to watch me. I met his eyes and pulled my mouth off his cock. \n\n\"Like the view?\" I teased, and licked the tip.\n\n\"You're beautiful,\" he replied. \n\nI went back to sucking his cock. \n\nHe reached for me. Since a blow job is often a prelude to sex I'm sure he thought that's where this was going. \n\n\"Nope,\" I said. \"This is all about you,\" and lowered my head back to his cock. \n\nMy hand continued to stroke his cock. \n\n\"Where do you want to cum,\" I said. I went back to sucking.\n\n\"In my mouth?\" I went back to sucking.\n\n\"On my face?\" I went back to sucking.\n\n\"On my tits? Anywhere you want,\" I said. \n\nI pulled my hair forward and wrapped it around his cock. I stroked it with my hair. \n\n\"In my hair?\" I smiled, and again took the tip in my mouth. \n\nI loved being dirty and talking dirty and though most times we have sex it is loving and slow, sometimes I just wanted to fuck. \n\nI could feel his cock start to swell. \n\n\"No? I'll choose,\" I said. I pulled my hair back, sat up straight, and thrust my tits out. \"Cum all over me baby.\" I continued to stroke his cock. \n\nHe started to cum. I aimed his cock at my open mouth. The first blast of cum hit me on my chin and in my mouth. The next on my face. As he continued to cum he got it all over my face neck and tits. \n\n\"Mmmm,\" I moaned as I stroked out the last drops. I again took his cock in my mouth so I could taste him. I swallowed the last drops.\n\nI sat back on on my heels. I got a glob on my fingers and licked them off. \n\n\"God I love your cum,\" I said. I started to rub his cum into my tits. \n\nHe just said, \"I love you.\"\n\nAfter the cum started to dry I said, \"Well, I better go shower.\" As I left the room I pushed my panties down, stepped out of them, and left them laying on the floor. \n\nI got into the shower and felt the hot water wash the cum off of me. I thought about Dave and how hot he was. My fingers slipped to my pussy. I was already primed and wet from giving Dave a blow job. Almost as soon as I touched my pussy I came. It felt good. \n\nThe shower door opened and Dave stepped into the shower. \n\n\"Was that good?\" He laughed. He had obviously seen me cum. \n\n\"Not as good as your cock,\" I purred. \n\nHe took me in his arms and kissed me. Hard and long. My body was feeling the heat. I could feel my tits pressed against his chest. My nipples were hard. His hand slipped to my pussy. He started to rub my clit. I moaned. \n\nHe slipped two fingers into my pussy. I came. We continued to kiss. \n\nMy hand slid down and encircled his cock. It was rock hard. \"Mmmmmm,\" I moaned. \n\nHe then turned me around. I put my hands against the shower wall and bent over sticking my ass up as high as I could. Dave was 5\" taller than me so he had to bend his knees to enter me. His cock slipped easily into my wet pussy. \n\nGod it felt good. He fucked me. Holding onto my hips I felt him bury his cock in me then pull out, then do it over and over. I came again. \n\nDave had already cum so he was not about to cum fast. We turned off the water, dried off, and headed to bed. I laid down on my back as he entered me. We fucked for at least an hour. \n\nThe next morning I called Tina. At first she was reluctant. Not because she was worried about living with us, but because she didn't want to impose. I assured her that it wasn't an imposition and that Dave had suggested it as ia way for her to save up for a new house. She finally accepted. \n\nOver the next month Dave and I helped her pack. We put what she couldn't take in storage, sold some, and moved the rest to our place. Tina couldn't have been more grateful. Between some crying and a lot of thank yous we got everything moved. \n\nTina moved in. It was rather uneventful. We quickly fell into a routine with Tina doing her share or more of the stuff around the house. \n\nI loved having Tina there. She and I talked. She was pretty down. She still needed to complain about her ex, not as much, but still some. She had caught him in their bed with another woman. \n\n\"It's not like he was undersexed. Hell, I'd fuck him whenever he wanted to,\" she'd told me. \"Hell, if he wanted another woman, I'd have done a threesome.\" \n\nMost of the time it was just normal stuff. She settled into our household routine pretty easily. \n\nAt night we'd hang out on the sectional and watch TV. I didn't think much about it then. I would wear my normal t shirt and panties. Tina started out wearing sleep gym shorts and a t shirt. I knew she slept naked as I did. \n\nUsually when on the couch I cuddled with Dave and we watched TV but sometimes when she and I talked she'd cry. When she did I'd put my arms around her and we'd cuddle on the couch and I'd comfort her. \n\nShe and Dave started the remodel/update of our house. They worked easily together and had a great relationship. \n\nOne day I happened to work late. When I got home Tina was asleep with her head on Dave's shoulder. He put his fingers to his lips and shushed me. I wasn't worried. I trusted them both absolutely. I was more concerned for Tina. It was obvious she'd been crying. \n\nLife went on. We included Tina in almost all our activities. We would often go out for dinner, to a movie, or dancing and we'd always include Tina. As time went on I would notice people checking us out. I realized people must wonder about the hot guy with two pretty blondes on his arms. \n\nWhen we'd go dancing men would approach us not sure which was single and try to get a dance. Tina told us she wasn't ready for men yet. She would hang on to Dave and say I'm with him. Then they'd turn to me and I'd do the same. They'd wander away shaking their heads or make a joke and shake Dave's hand. For us, we'd laugh and have fun. \n\nThe one thing we did do was, the more men that approached us it seemed the more we'd dirty dance with Dave. It was fun having the men watch us as we shook our asses. We'd grind on Dave and grind on each other. I'm sure on those nights we were a lot of men's fantasies. \n\nOften on these nights when I'd grind against Dave I could feel his cock get hard. I was sure that if I felt it Tina felt it too. In some ways it was weird. I realized I was proud of his cock. I wondered if she realized how nice it was from the bulge. We are close, I'd told her in the past what a great lover he was. I'd even told her he had a great cock. I wondered what she could feel. \n\nWhen we'd get home from these nights Dave would take me right to our room and fuck the hell out of me. I'd tease him. \n\n\"What? Dancing with two hot blondes make you horny?\" \n\n\"Which one of us got you all hot and bothered?\"\n\n\"Is this hard cock because of me or my hot little sister?\"\n\n\"Are you thinking about fucking me or my baby sister?\"\n\nOne night after dinner and dancing. I was on my hands and knees. Dave was furiously fucking me from behind. My head was down on the mattress. As he pounded me, I teased him.\n\n\"That's it baby fuck me. Who are you fucking? From behind like this I probably look just like Tina. Are you thinking about me or my sister's sexy little ass in the air.\" \n\n\"God baby, I love you,\" he replied. \n\n\"That's it,\" I breathed. \"Fuck me. You know what the little slut once told me?\" \n\nHe grunted something.\n\n\"She once told me she would have done a threesome with another woman if Jim (her ex) had asked,\" I told him.\n\nHe started fucking me faster. I came with a moan. \n\n\"Oh my god baby. You like that? You like thinking of my baby sister having a threesome with another girl?\" I teased.\n\n\"Fuck that's hot,\" he admitted. \n\n\"Oh, who's the other girl?\" I went on. \"Hmmmm, me maybe?\"\n\nHe moaned. \n\n\"Does my baby have a sister fantasy? I bet lots of men do,\" I teased. \n\nHe was furiously fucking me. He had his hand wrapped in my hair and lightly pulled it as he pounded my pussy. I came again.\n\n\"You pervert,\" I teased. \"Imagining fucking me and my sister. Do you imagine us together? Maybe her and I kissing? More? You want us to be little sluts for you? I'm your fuck toy, your wife, do you want her too? Are you thinking about her slutty little ass in the air next to mine? Are you baby?\" \n\n\"God yes baby. That feels so good,\" I grunted as he fucked me. I came again. \"If you promise to fuck me like this you can think about my little sister and I anytime you want. I'm yours, you can fuck me anyway you want.\" I came again. \n\nI felt him stiffen up. I knew he was about to cum. \n\n\"Come on baby. Fill me up. Cum in my pussy. You can imagine it's Tina's pussy. It's Ok. Imagine being in her tight little cunt. Come on baby, cum for me.\" \n\nI could feel him cum. Jet after hot jet filling my pussy. I came again. \n\nHe finished cumming and we fell to the bed facing each other.\n\n\"That was hot baby,\" he said. \n\n\"Yeah? You wanna fuck my little sister?\" I teased. \n\n\"It's a hot thought,\" he admitted. \n\n\"She is pretty hot,\" I admitted. \n\nWe kissed.\n\n\"I adore you,\" he said \n\n\"I love you,\" I replied. We fell asleep.\n\nI had a weird experience that night. I heard a noise in the hall. I got up and pulled a t shirt on and opened my door. There in the hall was Tina, stark naked, standing in front of the bathroom door. I mean, it made sense. She sleeps naked, the bathroom is in the hall, why get dressed if we're both asleep in our room, it's the middle of the night, and we have our own bathroom. \n\nStill it felt strange. I'd seen her naked before, but that was usually when we were dressing or changing, not just standing in a hall. Worse yet, I realized the t shirt I was wearing only came to my waist and my pussy and ass were hanging out. You top that off with what Dave and I had just been talking about and I felt awkward. \n\n\"Oops, sorry,\" I said.\n\n\"My fault,\" she said. \n\nNeither of us moved. I'm not sure either of us knew what to do. I realized her body was fantastic. \n\n\"Well,\" she said and pushed open the bathroom door.\n\n\"Oh right,\" I said and turned to enter my room. \n\nI climbed back into bed. \n\n\"Everything OK?\" asked Dave.\n\n\"Yeah, I just ran into Tina naked in the hall,\" I replied. \n\n\"What?\" he asked. \n\nI told him what happened. \n\n\"Dammit, why didn't you wake me? Your big strong husband is supposed to investigate hall noises,\" he said. \n\n\"You would have loved it,\" I replied. \"She has an amazing body.\" \n\nHe kissed me and we went back to sleep.\n\nThe next morning I ran into Tina in the kitchen. She was in her usual shorts and t. I was in my panties and t.\n\n\"I see you put on panties,\" she laughed. \n\n\"Oh sure, miss strut around naked,\" I replied. \"You should talk.\" \n\n\"Well, I could strut around in just a t shirt like you,\" she joked back. \n\n\"I bet Dave would love that,\" I responded. \n\nShe laughed, \"Can you imagine if he'd seen us?\" \n\nI thought about it. \"He would have loved it,\" I said. \n\n\"You'd kill me,\" she answered.\n\n\"No I wouldn't. I trust you both completely. Besides, he deserves a thrill every once in awhile,\" I said. \n\nShe laughed, \"I'll see what I can do.\" \n\nWe both laughed and hugged each other. I was aware of her tits pressing against me through her t shirt. \n\nOur day was the usual stuff. That night we went to undress for the night. I put on my standard t shirt and panties. Dave shorts and a t. When Tina came down the stairs we both looked. Rather than shorts and a t, she was wearing a tank top and little lacy boy shorts. She looked cute. We both stared. \n\nShe looked at us and said, \"I'll go change.\" \n\nI finally responded, \"Don't be silly. You look fine\"\n\nShe came and joined us on the couch. I kept looking at her, she looked so cute. How could that jerk have cheated on her. I watched Dave. He was doing that thing where you try not to look but can't help it. \n\nAnother stupid thought: her panties were cuter than my cotton bikinis. \n\nWhen we got to bed my husband pulled my pussy to his face and started licking me. It felt so good.\n\n\"This couldn't have anything to do with my sisters panties, could it?\" I teased. At that point I didn't care, all I cared about was his tongue against my clit. I came. \n\nHe moved moved up my body and positioned the head of his cock at the entrance of my pussy. He pushed forward. He sank right into me. It felt so good. \n\n\"Mmmmm,\" I moaned. \n\nThen I started. I don't know why, but I liked bringing up my sister when we were in bed. \n\n\"She did wear cute panties. I may have to up my game,\" I said. \"Or would you rather see them on the floor. She has a cute ass and pussy. I'm sorry I got to see it and you didn't.\"\n\nMy husband moaned and started pumping me harder. This time he responded, \"yes I'd love to see hers, and your panties on the floor.\" \n\n\"Next to each other?\" I teased\n\n\"God yes,\" he replied. \n\n\"Hmmmmm, would you want to take them off us or have us take them off each other.\" \n\n\"Yes,\"he answered. We both laughed. \n\nHe pushed my legs straight up lifting my ass off the bed. In this position he could thrust deeper and I could get his whole cock in my cunt. \n\n\"Ummmphh..,\" I grunted as he thrust into me. \n\n\"That's it baby, fuck me,\" I said as his cock pumped me. I was feeling like his slut. I loved that feeling. \"Fuck your little slut. Fuck my cunt. I'll give you anything you want.\" \n\nI meant it. I loved him so much, and he treated me so well I would do anything, and yes, anything, for him. I knew his love for me and that if he told me to do it, our love and I would be safe. \n\nI wrapped my legs around him and pulled him into me. \n\n\"Well, we can talk about her later,\" I whispered. \"Right now I want all of you on and in me.\" I thrust my hips into him and fucked back as he pumped me. \n\n\"Umppphh, ummmph. Ummphhh,\" I grunted. \"Yes, Yes, yes, god yes,\" I screamed as I came. \n\nI let him fuck me another orgasm and then I was getting tired. I pulled him to me. \"Cum in me love,\" I whispered. \"I want to sleep knowing part of you is inside of me.\" I kissed him. I grabbed his ass and pulled him into me. \n\n\"Cum for me baby. Give it all to me,\" I said. \n\nI felt him stiffen. I felt the hot cum flood my pussy with pulse after pulse. I came again. We fell asleep in each other's arms. \n\nThe next morning. I ran into Tina in the kitchen. \"Good night last night?\" she asked. \n\nI looked at her. \n\n\"That, 'Yes, god yes' was pretty loud. Normally I can only hear muffled sounds, but that was loud and clear.\"\n\nI blushed. \"I'm so sorry,\" I said. Then added, with a small conspiratorial smile, \"but yeah, it was good.\" \n\nShe laughed. \"I'm glad one of us is getting it good,\" she retorted. \n\n\"I'm sorry,\" I said. \"It must be hard for you, watching us and being alone,\" I sympathized. \n\n\"Actually, no, it's kind of nice. It reminds there is still true love in the world and feels good to be a part of it. Even as a close observer,\" she said. \n\n\"You're much more than that,\" I said and I hugged her.\n\nThat night as I changed for the evening I thought about Tina in a t shirt and boy shorts. I looked at the little cotton bikinis I wore at night. They were cute, but I owned a lot of nicer stuff I always changed out of or saved for nights out. I wondered why. Dave loved me in sexy panties, why wasn't I wearing them more often. ",
        "I pulled out a white lace string bikini pair and stepped into them. I looked in the mirror. I forgot how hot I looked in them. I pulled on a small t that left my naval exposed. Let him check her out now, I laughed to myself. \n\nWhen I headed downstairs Tina and Dave were there on the sectional. Plenty of room for me next to Dave. Tina was in a t and boyshorts again. They both looked at me. \n\n\"Whoa sis,\" Tina said. \"Lookin' hot. Someone's gonna get laid tonight.\"\n\n\"Well,\" I laughed . \"With you sitting there all sexy, I figured I needed to up my game to keep Dave's attention.\" \n\nWe all laughed. \n\nWhat we didn't realize then was that this was the start of the 'panty war' as Dave, laughingly, now likes to call it. \n\nI always said my sister and I were loving. I never said we weren't competitive. If one of us would get hurt, we would never compete, but if it was just fun.. game on.\n\nThe next night I wore a different t and string bikini panties. The t came to just about my navel. \n\nShe was wearing a t above the navel and a skimpier pair of boy shorts than the night before that showed a lot of cheek. \n\nIt just got worse, or better depending on your point of view. \n\nEvery day we were in panties and Ts. Everything was covered. I had bathing suits that covered less. One day she or I would show up in boy short, string bikini, or sexy bikini panties. Sometimes they were very low cut. Sometimes they showed a lot of cheek. Once I wore a silk pair of very low cut string bikinis that tied on the sides. \n\nThe Ts would also change. Navels were always exposed. Sometimes as short as the rib cage. Sometimes low cut and showing a lot of cleavage. \n\nWe were each trying to outdo the other. \n\nI have to admit, the panty war made me hot. I fucked Dave every night, and when I say I fucked him, I mean I fucked him. I practically attacked him every night. I wanted to be fucked hard and dirty. I wanted to suck his cock. I wanted to take it from behind. I wanted to ride his cock. I even had my ass fucked. I wanted cum all over me. The panty war made me super horny. If I'd ever acted like a slut in bed before, I outdid it during the panty wars. \n\nSometimes, well often, I'd bring up Tina while fucking. Especially when he was taking me from behind. I liked the fact that my ass probably looked just like Tina's. I liked teasing Dave with it. \n\nOften I'd be on my knees, my chest and head on the mattress. I loved that position. I could take Dave deep and feel every inch of his cock. But, the aspect of him not seeing my face, I could be anyone I want or, anyone he wanted was a super turn on. \n\nOne experience was super hot. I'd started teasing him. I got on my hands and knees. I was so wet these nights I needed no forplay. \n\n\"Get over here and fuck me,\" I begged. \"Give me that cock. Fuck me like your slut. Stuff my cunt with that big hard meat.\" \n\n\"Oh, you think just because you're running around in your underwear that that's slutty enough to get you fucked like a slut,\" he responded as he climbed on the bed behind me and positioned himself. \n\n\"Please,\" I begged. \"I need to be fucked.\" \n\nHe placed the head of his cock against my wet pussy lips. \"What do you want?\" he teased. \n\nI pressed back trying to push myself onto his cock. He kept pulling back just pressing the tip of his cock against the entrance to my pussy. \n\n\"I wanna get fucked,\" I screamed. Thinking about it now I realize there was no way Tina didn't hear me. \n\n\"Fuck me you bastard. Fuck your slutty wife's pussy. \"Here,\" I put my head down on the bed sticking my ass up higher. \"If you don't want to fuck me, pretend it's Tina's pussy. I'm sure from that view we look alike.\" \n\nHe grabbed his cock and started rubbing it up and down my wet slit from clit to asshole. I was so wet he was spreading my juices all over my clit and ass. \n\n\"Please, please,\" I begged. \"Stick it in me. Stick it in my pussy, fuck my ass. I don't care, just fuck me. \n\n\"Do you think Tina ever had her ass fucked? Maybe you could be the first to take her virgin ass.\" I said, again trying to push back onto his cock. \n\nWith a grunt he shoved his cock deep in my pussy. I came. He started to pump his cook into me slamming me into the bed with each thrust. I was wet, you could hear the sound of my juices every time he pulled back. \n\nHe pushed my shoulders to the bed and started pounding me. \n\n\"That's it baby, fuck your slut, pound that pussy. Who's pussy are you thinking about, mine or Tina's. Would you like to have Tina's sweet pussy here spread in front of you. You could see your cock spreading her lips as you pushed your cock into her.\" \n\nHe started fucking me harder. I came again.\n\n\"Unnngh, unnngh, unnghh,\" I grunted with every thrust. \n\n\"That's it baby, take that pussy, take that cunt, fuck it, fuck it hard,\" I panted. \n\n\"Come on me baby, come all over my ass, paint it with your cum. I want to feel it hot and sticky on my skin, dripping down my ass and thighs. Come for me.\" \n\nI could feel him start to tense. At the last minute he pulled out. Rope after rope landed on my ass, back, and thighs. It felt hot. It felt like it clung to my skin. I loved it. \n\nI got thirsty and asked Dave if he wanted some water. He said yes. I pulled on a t shirt that just covered my ass and headed to the kitchen. I could feel the cum drying on my skin. I started getting horny again. \n\nWhen I reached the den Tina was there watching TV. \n\n\"I couldn't sleep,\" she said. \n\n\"I'm sorry,\" I replied. \"I'm just heading to the kitchen to get some water.\" \n\nShe watched me as I headed for the kitchen.\n\n\"Is that what I think it is?\" she asked.\n\nI played dumb. I had forgotten I was dripping with drying cum. \n\n\"Ummm,\" I stammered, not knowing what to say. \n\n\"It is,\" she laughed. \"Lucky you. I can't remember the last time a man came on me.\" \n\nThere was some information. Who knew my little sister liked it when guys came on her. Maybe she was more like me than I knew. \n\n\"I love the way it feels,\" I said. \"Sometimes when he cums on my face I fantasize that we go out and everyone sees the cum drying on my face.\"\n\n\"Mmmmmm,\" she replied. \"That sounds fun.\"\n\n\"Slut,\" I teased. \n\n\"I wish,\" she replied. \"Right now I'm more like a nun.\" \n\nI laughed. \n\nThe panty war went on for at least a month. Then one day we both showed up wearing matching pink boy shorts and pink tank tops. \n\n\"Jinx,\" we both said at the same time and laughed. \n\nThe competition was over, but panties and Ts became acceptable wear around the house in front of Dave. \n\nLife went on. The plan was for her to stay for 18 months and save for a down payment. We settled into a routine. Dave and I fucked often and furiously. On mornings after I got fucked Tina would often ask me if I had a fun night. I don't know how much she heard. Didn't matter, Dave was a great fuck and I was proud of our sex life. I'd told her about it before she moved in. It was no different now. Sometimes I'd describe in detail how I got fucked the night before. It was just fun. \n\nDave and I decided to go on vacation. We were going to drive to the coast, sightseeing along the way. It would be a 3 day 2 night drive. We rented an air b&b on the coast. We were going to motel it on the way. \n\n\"What about Tina,\" I asked Dave. \n\n\"Does she want to go?\" he asked. \n\n\"If it's ok with you I'll ask her,\" I replied. \"Are you sure she won't be in the way?\"\n\n\"No, I love Tina. She's not a burden at all. If you want her to come it's ok with me,\" he said. \n\nWhen I asked Tina she said she didn't want to impose. I told her it was no imposition, and that it was ok with Dave. Then she said she really couldn't afford it. I said I had to talk to Dave. \n\nDave was open. He said we could share motel rooms with 2 queens on the way out. We rented a 2 room cabin at the ocean and we could figure out sleeping arrangements. \n\nI went back and told Tina. She was so excited. She jumped up and hugged me. Just then Dave walked in the room. He stopped, looked, and kind of didn't know where to go. I realized he had just walked in to two hot women hugging in their underwear and wasn't quite sure how to process it. \n\nWhen Tina saw him she threw her arms around him. \n\n\"Thank you so much,\" she said. \"You guys have been so good to me.\" Then she giggled. \"I promise to make myself scarce at times so you can have vacation sex.\"\n\nWe all laughed but in the back of my mind I wondered how we'd manage that. \n\nWhen the day to leave arrived we all packed and loaded the car. I was on vacation. So was Dave. I wore a cute little sundress he liked. In fact, all I brought were sundresses, bathing suit, and some of my prettiest underwear. I knew Dave liked sundresses. If he liked me in them. I was going to wear them. \n\nTina came down also wearing a short sundress. We practically looked like twins. I noticed when she stood in front of the open door you could practically see through the dress. She looked hot. Then I realized that if I stood there you could probably see through mine. I liked the idea. I knew Dave didn't mind. He liked it when people checked me out. He liked knowing I was kind of on display. \n\nWe jumped in the car and took off. Between talking, singing to the radio, sleeping, and Internet, the drive was uneventful. We arrived at the motel around 6. We quickly checked in. The motel was standard fair with two queen beds. We dropped off our bags and headed for dinner. \n\nDinner was a chain restaurant with a decent menu. It was uneventful except for the 4 teenagers at a nearby table checking out Tina and I. They were trying to be quiet but it wasn't working. \n\n\"Look how short that dress is. Dammit she's got great legs.\"\n\n\"Yeah, the tits aren't bad either.\"\n\n\"I'd like to motorboat those babies.\"\n\n\"Do you think that guy fucks both of them?\"\n\nSometimes when she caught them looking Tina would smile at them. Once when they made a fairly crude comment she waved. For my part. I let my dress slide up as I sat. From the right spot I was sure someone could see my panties. We all laughed at their behavior and joked about it. \n\nI had to use the restroom. I swiveled out of my seat with my legs spread wide flashing their whole table. At first there was complete silence. \n\nThen the talking started. \n\n\"Did you see that?\"\n\n\"Man she totally flashed us.\"\n\nAnd so on. \n\nWe finished our meal and headed back to the motel. It was about 8:30 and we decided to hit the sack and get an early start. \n\nTina went to change in the bathroom. I realized I had not brought anything to sleep in. Normally when we travel I sleep naked. I asked Dave for a t shirt. I put it on. It barely covered my ass but that was fine. I was going to be under the covers. Jim had his typical shorts and t. Tina came out of the bathroom in a t and little boy short panties. \n\nA bit of small talk, checking messages, and email and it was time to sleep. We climbed into bed and my shirt slid up. I wiggled my naked ass against Dave. He spooned me, kissed my neck, and we fell asleep. \n\nI woke up sometime in the middle of the night. I felt something hard poking into me. A quick look told me that Dave was asleep, but he was sporting a huge hard on. I started to tingle between my legs. I looked a Tina in the other bed. She was fast asleep. Feeling naughty I reached down behind me and started rubbing Dave's cock through his shorts. He was rock hard. \n\nEventually he opened his eyes. It took him a minute to orient himself but once he did he slid his hand up under my shirt and started pulling on my nipples and playing with my tits.\n\nI pushed his shorts down and released his cock. It felt good against my ass. I let go of his cock and slid my hand down to my pussy. I slid a finger inside me. I was wet. I pulled the finger out and held it behind my shoulder so he could suck it clean. He did. \n\nNow it was his turn. He moved his hands from my tits to my pussy and started playing with my clit. I gave a sharp intake of breath, and then looked over at Tina to make sure she was still sleeping. She was on her side facing us but her eyes were closed. \n\nAs I rubbed my ass against his cock, Dave fingered me to an orgasm. I tried to stifle a moan but I made a small one. \n\nDavid whispered, \"Shhhh.\"\n\nI looked over at Tina. She still seemed to be sleeping. I bent a little forward and threw one leg over Dave. In this position I reached back and guided his cock to my pussy. He had to help but in moments he was deep inside me. After a few thrusts I started to cum again. I moaned. David shushed me. I looked at Tina and my heart skipped a beat. Her eyes were open. With a playful smile she brought her fingers to her lips and silently shushed me. I moaned and came again.\n\nTina couldn't see anything. She could probably see Dave's thrusting motion under the covers but that's it. Dave continued to fuck me clueless that Tina was watching. For my part I bit my lip and Tina and I looked into each other's eyes. I saw Tina's hand slip under the covers. She closed her eyes. I knew she was playing with her pussy. She opened her eyes, brought her fingers to her mouth and then back under the covers. I came again. I realized that I like to lick my fingers when masturbating too. \n\nI came one more time wiggling my hips while Dave fucked me. I moaned again. Not as softly. Tina let out a little squeak. I could tell she came. Hearing that David stopped moving. He looked over my shoulder. Tina had closed her eyes and was pretending to sleep. \n\nDave continued to fuck me. Tina again opened her eyes and gave me an evil grin. I came again. The idea that we were practically being watched so turned me on. \n\nI felt Dave start to tense up. I pushed back. Load after load of hot cum filled my pussy. As he pulled out some cum dropped down my thigh. I left it there I pushed my ass back into Dave and fell back asleep. \n\nWe woke up early to go. Dave jumped in the shower first. \n\n\"What's that on your thigh?\" Tina asked jokingly. She knew what it was. \n\n\"Cum,\" I said and stuck my tongue out at her. \"Dave's cum.\"\n\n\"Looks delicious,\" she said. \n\nI reached down and got some of the dried cum on my fingers. I brought them to my mouth and licked them clean. \n\n\"It is,\" I said \n\nDave got out of the shower and Tina went in. Dave looked at me. \n\n\"You've got cum on your leg,\" he said. \n\n\"I know,\" I replied. \"Tina told me.\"\n\n\"TTTTina,\" he stammered. \n\n\"Yeah, while you were in the shower. \n\n\"What did she say?\" he asked. \n\n\"That I was a lucky girl,\" I said and I kissed him. \n\nDave got dressed. Tina came out of the bathroom fully dressed. She was wearing a short pink pleated skirt and a white tank top. It was obvious she wasn't wearing a bra. \n\nI headed to the bathroom stripping off my shirt as I went. The idea of them both seeing me naked at the same time appealed to me. I took a shower, dried off and then walked out of the bathroom naked. I took a green shirt dress that buttoned down the front and put it on. I left most of the buttons undone. If you were in front of me and I bent over, you would see my nipples. If the dress pulled up I'd be flashing someone. I started packing. \n\n\"Umm, that all your wearing?\" asked Dave. \n\n\"What else do I need,\" I quipped. \n\nHe really didn't have an answer. I looked at Tina. She mouthed, \"Slut,\" and smiled. \n\nWe all hopped in the car and started driving. Eventually Dave put his hand on my thigh. We often drove this way. Just touching. This time I pushed my dress aside so his hand was on my bare thigh. Dave quickly glanced at Tina then smiled at me. I shifted in my seat and unbuttoned another button. My pussy was exposed. Dave took no time and quickly started playing with my pussy. \n\n\"What's got into you?\" he asked quietly. \n\nI shrugged my shoulders, \"Why? Complaining?\" I responded. \n\nHe gave me a big grin and shook his head. He fingered me to an orgasm. \n\nAlmost at that moment a truck rolled by. The driver must have seen what was going on. He beeped his horn and kept pace with us for a moment. \n\nThe horn made Tina look up. \"What are you two doing up there?\" she asked. \n\nShe quickly looked around the seat. We weren't quick enough. She caught Dave's hand pulling out of my pussy and me with my pussy exposed legs spread.\n\n\"You pervs!\" She exclaimed teasingly. Then to me. \"What would mom say if she knew you were flashing your pussy to truckers?\" \n\nI laughed. \"Who knows, maybe she used to do it too.\"\n\n\"Well, two can play this game,\" she said and she whipped off her shirt exposing her perfect tits. The next truck that passed us she pressed her tits up against the window. The trucker beeped his horn. \n\nWe continued to flash truckers. Trucks must have been radioing about us as they would quickly pull up to us and then slow down to keep pace with us. We'd blow them kisses and flash our tits ass and pussy. Dave fingered me to another orgasm as trucks passed by. \n\n\"Yes,\" I said, pushing my pussy against his fingers and holding on to the back of my seat. \"Fuck yes.\" \n\nTina knew what had happened. \"Are you fingering the little slut up there?\" she teased laughingly. \"What would your poor baby sister think?\" she went on. \n\n\"She'd wish it was her,\" I said somewhere between a scream and a pant as another orgasm washed over me. \n\n\"Damn straight,\" she said and lay back in the seat and pulled her skirt up to her waist. She slid out of her panties and tossed them up into the front seat. \n\nAt one point Tina was laying in the back seat, top off, skirt around her waist and playing with her pussy. A truck rolled by and held up a big sign that said \"Thanks\". \n\nTina let out a, \"fuck yes.\" I could tell she'd cum by the dirty little smile she gave me. \n\nWe finally rolled into the motel laughing and trying to pull ourselves together. Dave got the room and we brought in what we needed and headed out for dinner. Nothing exceptional. None of us were tired and we decided to watch a movie. We changed for bed, me in my t shirt, Dave in his shorts and t, and Tina in a t and panties. We put on a movie. \n\nI wasn't wearing panties. And when I laid on my stomach to watch TV my shirt slid up exposing my ass. Dave's hand found its way to my ass and started rubbing it. Tina was sitting against her headboard and could see everything. I spread my legs a little as he massaged the crack of my ass. I wanted to fuck him right then and there. This whole day had made me horny and three orgasms against his fingers just made me want his cock more. \n\nEventually the movie ended. We turned out the lights and tried to sleep. Dave was out in minutes. \n\n\"Hey sis,\" Tina said \n\n\"Yes?\" I responded\n\n\"I love you,\" she replied. \n\n\"I love you too,\" I told her, and I did. All this time living together had made us closer than ever. \n\nI lay there with my eyes open horny as hell. My fingers slowly caressing my clit. My fingers were not going to cut it tonight. I needed cock. I looked over at Tina. She looked asleep. \n\nDave was lying on his back sleeping. I rolled towards him. My back to Tina. I slid my hand down his shorts and started stroking his cock. I felt it start to get hard. I saw his eyes open. He took a second to orient. \n\nThen he mouthed,\"What are you doing?\"\n\nI put my mouth right near his ear and whispered, \"I'm going to fuck you.\" \n\nHe lifted his head and looked past me at Tina. She seemed asleep. \n\n\"Be quiet,\" I whispered as I threw a leg over him and straddled his body. \n\nI reached down and aimed his cock at my pussy. Slowly I lowered myself on to his cock. God it was what I needed. When he was all the way in I used my knees and hips to fuck him. It felt so good. \n\nI looked over at Tina. She still look asleep. I laid on top of Dave's chest as we slowly fucked. I let out a soft, \"mmmmmmm.\" \n\nI again looked at Tina. Her eyes were open and she was smiling at me. I felt a heat ripple through my body. \"Oh god,\" I said. ",
        "\"Shhhh, you'll wake Tina,\" Dave said. \n\nI decided to go for it. \"She's already awake,\" I told him.\n\nDave's eyes turned towards Tina. She gave him a nice smile and waved. Dave stopped moving. I started moving again I started pumping myself up and down on his cock. I let the blankets fall off me. Using my arms to support me a raised my upper body. My tits were completely exposed. I used my knees and hips to fuck Dave. \n\nI didn't even pretend to be quiet. \"That's it baby, fuck me. Fuck me while my sister is watching. I've always told her what a good fuck you are.\"\n\nI ground my hips against his cock. It felt so good. \"Mmmmmm baby, it feels so good.\" \n\nI don't think Dave forgot that Tina was in the room but he sure got comfortable fast. He grabbed my hips and thrust his cock up into me.\n\n\"That's it baby fuck me. Oh god yes, I'm cumming.\" \n\nWith that I moaned and shivered as the orgasm washed over me. I was sure that under the covers Tina was playing with herself. I wanted her to see more. I sat up straight and let the covers fall off me completely. I tilted my head back and thrust my tits out. I rode Dave's cock. \n\n\"God yes, that feels so good, oh god, fuck me, fuck my pussy, fuck my cunt,\" I let out. Then with a giant orgasm I hung my head forward, \"God yes yes yes,\" I screamed as I came. \n\nWhen I looked at Tina she had kicked the covers off her. Her top was over her tits and she was playing with her tits with one hand. The other hand was in her panties playing with her pussy. \n\n\"Look at Tina,\" I said to Dave. \n\nHe turned to look at her. She gave him a shy smile and said, \"Don't stop.\" \n\nWatching Tina play with herself sent Dave into super fuck mode. He rolled me on my back and pushed my legs straight up against his shoulders. I could only imagine Tina's view of his cock. He lined it up with my pussy. Using my legs to tilt my pussy up he started fucking me. He also got verbal. \n\n\"Is this what you want? You want to be fucked hard in front of you sister? You want her to see how slutty you can act? Fucking in front of your sister. Flashing those truckers. And look at your baby sister. I saw her frigging herself for those truckers. I bet if I had stopped she would have let one of them fuck her.\"\n\nI heard Tina moan. \n\n\" Is this what you want,\" He went on. \"You want me to show Tina all the ways you like to fuck. Do you want to tell her you sometimes pretend you're her when we fuck?\" \n\nTina moaned again. \n\n\"Show Tina what position you like to fuck in when you pretend to be her.\" He ordered. \n\nI quickly got on my hands and knees, head down on the mattress. Ass up in the air. Dave got behind me and started thrusting his cock in and out of me. \n\n\"Tell Tina what you say when I fuck you like this,\" he went on. \n\nI looked at Tina. \n\nI grunted with each thrust. Between thrusts I told Tina what I'd said. \n\n\"I asked him if he thought we'd look alike in this position. Could he imagine that he was fucking you.\" \n\n\"Show me,\" said Tina. \n\nSo I did, just like I did at home. \"Come on baby, is my little sister turning you on? Would you like to fuck her sweet little cunt? Do you think she looks like me in this position? Do you think you could tell the difference between us?\"\n\nDave just kept pounding me from behind. \n\n\"Tina said, \"Oh my god that is so fucking hot. I wonder if our pussies do look the same.\" \n\nDave kept fucking me from behind. On her bed Tina got on all fours. She'd completely lost her panties. Her ass facing David and I. She spread her legs a bit and lowered her chest and shoulders to the mattress. As we watched she reached down between her legs and started playing with her pussy. It was fucking hot. \n\nWatching Tina with Dave's cock pumping me from behind I couldn't control myself. \n\n\"Oh fuck Tina, that is so fucking hot, God you have a sexy pussy. I hope mine is as pretty. Oh fuck yes, I'm cumming.\"\n\nI came hard. I'm a squirter. I drenched Dave's cock and had juices running down my leg and soaking the bed. \n\nAs I came Tina let out an \"Oh my god,\" and also came. She collapsed onto her belly and turned to watch us. \n\nI'd cum so much I wanted a Dave to cum, but I wanted Tina to see. I wanted Dave to cum all over me. \n\nI knew how to make him cum. \n\n\"Come on baby, fuck me. Fuck my cunt. It's yours. Please cum on my ass. Please spray your hot cum on me. I want to feel you hot and sticky on my skin. Come on baby fuck your cunt, fuck your pussy. Give it all to me.\" \n\nI watched Tina. She was on her side again still playing with her pussy. \n\nI could tell she was close again. \n\nI urged Dave again, \"come on baby, show my baby sister how much you cum. Maybe next time you can cum all over her slutty little ass. Come on baby, show her what you got.\" \n\nThat did it. He pulled out as rope after rope of hot cum squirted out of his cock and all over my back, legs, and thighs. I came with a loud \"Fuck yes,\" as the hot cum hit my body. \n\nAt the same time I heard Tina say, \"Oh my god yes,\" her body shuddered and I could tell she'd cum again. \n\nWe all rested to catch our breath for a moment. I bent my head to lick Dave's cock clean. It was covered in my juices and his. I licked it clean. \n\nAs I did Tina said, \"That looks so fucking good.\" \n\n\"It is,\" I said. \n\nI noticed Dave had fallen asleep. I got up to wash some of the cum off me. Tina followed me to the bathroom. \n\n\"God, that was hot,\" she said. \"I hope someday I find a man like Dave. He is so good to you, and so good to me. Not once have I felt like an outsider in your home. He always makes me feel I belong there.\"\n\n\"By the way, that cum dripping off your body looks delicious,\" she said. \n\nI'd gotten a washcloth and was cleaning up. I put a gob of cum on my finger and sucked it off. \"It is delicious,\" I said. \n\nShe was looking at me. I scooped another glob onto my finger and brought it to her lips. She licked my finger clean. \n\n\"Mmmmmm,\" she said. \n\nShe helped me finish washing the cum off my body. Then she hugged me. \n\n\"I love you two. You have been so good to me,\" she cried. Then she kissed me on the lips. Nothing too sexual, but a kiss. \n\n\"Mmmm, I can taste his cum and your pussy on your lips,\" she said. \n\nI'd forgot I just sucked Dave's cock clean. Of course that's how I tasted. We both went to sleep. \n\nThe next day there was no pretense of changing separately in bathrooms. We'd all seen each other naked. Who cared. We got in the car and drove. It was a quieter drive than the day before. Tina broke the ice. \n\n\"I want you to know that I love both of you. You've been so good to me. Thank you for everything,\" she said. \"I hope I haven't caused any trouble. Things got kind of wild last night. \n\nDave answered. \"Tina, we love you. We all loved the wild part, but not because it was wild, but because it was you. You mean a lot to us. The wild was fun, but that could not have happened without the trust we built since you moved in with us.\" \n\n\"Right baby?\" he said to me. \n\n\"You're my little sister. We've shared everything in life. We have no secrets. Less now.\" \n\nWe all giggled. \n\n\"I've loved having you with us, both living with us and on this trip. I kind of wish it would never end,\" I said. \n\nThe ride went on, we talked about our futures. Kids, love, home. Tina felt that after living with us it would be hard for her to find love that would measure up to what we had and what she experienced with us. \n\nI made the joke she could just stay with us. The conversation went on in a kind of a jokey fashion about how we could live together. We all were mostly joking. \n\nWe talked about:\n\nMaking another bedroom a master suite so the house would have 2. \n\nThat since Tina and Dave made more, I should quit my job and stay home.\n\nThat Dave should divorce me and pay me alimony and marry Tina. That would reduce their income for tax purposes and keep mine low enough I'd qualify for government programs for me and the kids we'd have. \n\nBoth Tina and I wanted two kids. \n\nThere was more. We went into great detail. We all laughed as we planned. It was a fun joke and something to do. \n\nWe talked about things we wanted to do in life. A lot of it was repetitious, after all, we'd been living together, but for some reason it felt good to talk about it that day. \n\nWe reached the beach house and moved in. It had a king size bed and a couch. It was right on the water. We threw our stuff down changed into bathing suits and headed down to the ocean. Neither Tina's or my bathing suit covered much skin. A lot of men and women checked us out as we walked down the beach. \n\nWe hit the water playfully with David grabbing us and throwing us while we tried to dunk him. Basically david had two sexy blondes trying to wrap themselves around him. We played till we were exhausted and decided to take a nap before dinner.\n\nWe all just stripped off our wet suits. Then we stood awkwardly for a moment. Each looking at the other naked. Without the sexual thing going on, this was different. It was just baring yourselves to each other. Open and vulnerable.\n\nI wanted to get the salt off me before a nap. So did Tina. I turned on the shower and we both stepped in. We playfully did each other's backs. It wasn't sexual, it was just helping each other. We dried off as Dave jumped in. When he was done he came out to find us hugging naked in the queen size bed. \n\n\"Well guess I get the couch,\" he quipped. \n\n\"There's plenty of room for you here,\" we said as we patted the bed between us. \n\n\"That spot looks dangerous,\" he joked as he climbed between us. He held out his arms and we both cuddled in on either side of him. We laid on our sides and rested our heads on his shoulders. and put our free arms over his chest. \n\nWe just lay there for a while. Then I kissed Dave on the cheek. \n\n\"I love you,\" I said. \"You've been so good to us. I've always loved you, but once again you've showed me why.\" Then I joked, \"And that's why you get blowjobs anytime you want.\" \n\nTina looked at me. Tina had heard the joke before, she laughed. She then kissed Dave on the cheek as well. \n\n\"I love you too,\" she said. You've always been good to me, but you've gone above and beyond in this situation. I haven't been this happy for years.\" \n\nWe fell asleep like that. \n\nWhen I woke up. We were still in that position. David had a hardon in his sleep. His cock was sticking straight up. I let my hand slide down his body and lightly stroked his cock. I loved the way it felt in my hand. I was very gentle. I didn't want to wake him. In a few minutes Tina woke up and saw what I was doing. I made a shhh motion with my lips. \n\nTina watched me stroke Dave's cock. It wasn't mad sex. It was just gently and affectionately. I thought about Dave, how good he was to me, how good he was to Tina. I just wanted to wake him up and suck his cock, but I was enjoying this languid intimate moment with Tina. \n\nI had a surreal moment. This perfect moment should last forever, lying here with the two people I loved most in the world. Just the three of us, together. I reached for Tina's hand. She gave me a puzzled look. I slowly dragged it down to Dave's cock. \n\nTina looked at me. She seemed to be asking if I were sure. I was. I knew that even if Dave wasn't thinking about this the same way I was, I was sure he wouldn't complain about touching my sexy sister. She put her head down on his chest and took my place lightly playing with.is cock. I stroked her hair as she did. \n\nWe lay like that for a good half hour. Finally Dave started to stir. He opened his eyes and kissed me. Then tilted his head back and said, \"Mmmm,\" enjoying the feeling of his cock being stroked.\n\nI brought my hand up to his face and caressed his cheek. I was laying on my side. It took him a moment to realize he knew where both my hands were, so, who was stroking his cock?. He looked at Tina. She smiled at him. He followed her arm down to his cock. Then he looked at me again. I kissed him. \n\n\"It's alright,\" I said, and kissed him again. \"Let it happen.\" \n\nHe moaned, closed his eyes and laid his head back. \n\nTina saw his acceptance and moved her head down his body. Her mouth found the tip of his cock and engulfed it. David moaned again. Like me she could only get about 2\" in her mouth. She used her hand to stroke the rest. \n\nI watched lovingly as my little sister sucked my husbands cock. It just looked right. You could see the tenderness, there was love there. I kissed Dave again.\n\n\"Does that feel good baby?\" I asked. \"Do you like having my little sister suck your cock? \n\nIt was still slow and loving. I watched her. She looked happy. \n\nI pushed Tina's hair out of the way so I could see better. \"I love you,\" I said. \n\nShe pulled her mouth off Dave's cock and said, \"I love both of you, you've been so good to me.\" Then she added, \"I love this cock.\" \n\nI laughed. \n\nI kissed Dave once again, and looking him in the eyes, said to my sister, \"Tonight, it's yours.\" \n\nShe looked at me. \"Tonight,\" I said, \"my husband, wait, I mean our man, is going to make love to you.\" \n\n\"Aren't you baby?\" I asked Dave. \n\n\"Are you sure of this?\" he asked. \n\nI kissed him. \"Yes baby, you deserve it, so does she, in fact, she needs it.\" \n\nDavid put his hands in her hair and started guiding her face up and down on his cock. \"Mmmmm, that's good,\" he said. \n\nHe pulled her face up to his and kissed her. As they kissed I caressed her back. I wanted to be a part of that moment. He pulled her on top of him. Her legs straddled his body. Her pussy rested against his cock. They were tenderly kissing. I reached down to his cock between her legs. I positioned it against the opening of her pussy. \n\n\"Mmmmmm,\" she said. \"This feels nice but, I am dying to get fucked. My sister always tells me what a great fuck you are. I need a great fuck!\" \n\nI giggled. \"You heard the slut Dave. Show her what a great fuck you are, make me proud.\" \n\nDavid rolled over pushing her on her back. He pinned her wrists down and positioned himself between her legs. He placed his cock at the opening of her pussy. He just stuck the tip of his cock in her. I could see her pussy lips open and spread around it. \n\n\"Oh my god,\" she said. \"That head pulls at my clit. Give me the rest of that cock. \n\nWith one thrust he was buried inside her. She gasped. \"God yes, that feels so good.\" \n\nDave, still holding her wrists down started pounding her pussy. I worried she might not like it as hard as I did, but I was wrong. She loved it.\n\n\"God yes, ungh, ungh, ungh, fuck me, fuck yes, that feels so good. God I love your cock. My sister wasn't lying when she bragged about it. Shove that thing in me.\" \n\nI couldn't take much. I started pulling on my tits and playing with my pussy. \n\n'That's so hot,\" I said. \"Fuck her, fuck her like the slut you want her to be, make her your slut.\" \n\n\"Tell him,\" I said to Tina. \n\n\"God Dave, I want to be your slut, I want to be part of what you guys have.\" \n\nDave looked at me. I nodded. I wanted Tina to stay with us. \n\nDave started slamming into her. \n\n\"So you little slut, you want to be my fuck toy like your sister. You know she'll drop to her knees any time I ask her to. Do you want to suck my cock anytime I ask?\" said Dave. \n\n\"Fuck yes,\" she said as her body quivered through its first orgasm.\n\nDave flipped her over on her stomach. \n\n\"Get your ass in the air,\" he practically ordered. \n\nShe got up on her knees. Her shoulders and head still on the bed. With her legs slightly spread I could see her pussy glistening with her juices. \n\nDave stuck his cock in her pussy. I came all over my fingers with a soft moan. \n\nDave looked at me. \"You like this? You like watching me fuck your sister? Forever the three of us? You as my wife, lover and slut? \n\n\"Please, yes,\" I responded. \n\n\"And Tina do you want to be my fuck toy, my lover, a partner forever?\" \n\n\"Yes, god yes,\" she screamed through another orgasm. \n\nTo me they sounded almost like wedding vows. My head was swirling. I knew where Dave was going with this. I was thrilled. \n\n\"Yes, fuck me, fuck her, cover me in cum, I'm your wife, your slut, your fuck toy, forever\" I cried. Still fingering myself I came again. \n\nDavid was still furiously fucking Tina from behind. You could tell she had another orgasm. \n\n\"What do you want?\" he asked her.\n\n\"I want you to fuck me. I want to be covered in your cum, I want to be a partner with you and my sister, a fuck partner, a life partner.\" There was a pause. \"Fuck yes,\" she screamed as another orgasm ripped through her. \n\nDave pulled out of her. \"I want a blowjob,\" he said. \n\n\"Tina started to turn around on the bed.\n\n\"No, on your knees on the floor,\" he said. \n\nShe did as she was told. \n\n\"You too,\" he looked at me. \n\nI got down on my knees next to Tina. \n\nDave stood in front of us. His hard cock just about right in front of our faces. \n\n\"Suck my cock,\" he demanded. \n\nWe both reached for it. We took turns sucking it. Something was different. Dave rarely came from a blowjob. \n\nThen I figured it out. \n\n\"Cum for us baby. Cum all over us. Make us yours. Make us your cumsluts,\" I begged. \n\nTina caught on. \"Make me yours, paint me with your cum,\" she begged. \"Use me any way you want. I love you, we love you, make us yours with your cum.\" \n\nTina and I wanted to be sister wives. We'd told Dave. Now he had to decide. \n\n\"If you want us forever, cum on us,\" I said as Tina sucked his cock. \n\nDave pushed Tina away. Uh oh, had we gone to far? Did he not want this? \n\n\"Play with your tits and pussies,\" he said. \"Make yourselves cum\"\n\nWe both started playing with ourselves. I was trying as hard as I could to make myself cum. I'm sure Tina was too. Dave was in front of us jacking off. \n\nI came, \"God yes,\" I panted. Tina took my hand. \"Yes, yes, yes,\" she said as she came. \n\nOur two orgasms set Dave off. The first spurt of cum hit me in the face. \n\nAs he came some landed on Tina's face and tits. Some on me it felt hot and sticky. I loved it. I loved watching it hit Tina. \n\n\"We're yours baby,\" I said. As it hit my skin.\n\n\"I'm yours too,\" said Tina. \"I love you both so much.\"\n\nTina and I hugged each other. The hot sticky cum squished between us. We felt stuck together. We realized that's how we belonged. Together. With Dave. \n\nEpilogue. \n\nTina and Dave finished redoing the house. Tina and I each have our own rooms but typically we all sleep together with Dave. Tina and I are both pregnant and due around the same time. \n\n================================\n\nAuthor's note: I hope you enjoyed the story. Please don't forget to vote, favorite, comment, or email me. Thank you. "
    ],
    "authorname": "Imstillfun",
    "tags": [
        "fmf",
        "wife",
        "incest",
        "threesome",
        "sisters",
        "sister in law",
        "loving wife",
        "slut wife."
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/my-sister-moves-in-1"
}
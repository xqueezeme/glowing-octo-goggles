{
    "title": "My Secret Service Ch. 07",
    "pages": [
        "I left Jim to his TV, his well-sucked cock laying limp between his legs, and went home for my second shower of the day.\n\nAs I dried, I considered what to wear. Missy liked seeing me in panties, and her text left little doubt (even to me) that we would be undressing soon.\n\nBut I didn't have many pairs, and most of the ones that belonged to me were dirty. I settled on a pair of red lace thong panties that Jen had worn and discarded one day after I ate her husband's cum from her pussy. \n\nI topped my panties with the uniform of a middle-aged man headed for a date: khakis and a dress shirt and then headed out.\n\nI stopped at a liquor store near my house and bought some craft beer and an inexpensive bottle of wine, before hitting up a Thai place a few blocks from Missy's place for dinner.\n\nShe met me at the door in a black maxi skirt that framed her wide hips and a white cotton shirt unbuttoned to show the tops of her beautiful breasts. With a quick peck on my cheek, she led me to the kitchen where I set our sustenance on the counter. \n\n\"Mmmm. I love Thai food,\" she said. \"There's a place just around the corner that I eat at all the time.\"\n\n\"I got this from Spice Alley,\" I said. \"I hope that's OK.\"\n\n\"That's the place.\"\n\nShe put the wine in the refrigerator, grabbed two beers and our food and led me to her small dining table.\n\nAs we settled in to eat, she asked, casually, \"How was your day?\"\n\n\"Busier than expected,\" I said. \"I fell asleep on the couch, but Jen woke me up banging on my back door.\"\n\n\"I'd let her bang on my backdoor,\" Missy said with a grin. \"Did she have a load of Jim's cum for you?\"\n\nMy face turned red. On one hand, I couldn't believe I was sitting across from this beautiful woman \u2014 who'd had amazing sex with me less than 24 hours before \u2014 talking about eating her bosses' cum from his wife's pussy. On the other hand, it felt like the most natural thing in the world.\n\n\"Don't be embarrassed,\" Missy said when I didn't answer right away.\n\n\"She didn't have a creampie for me,\" I said. \"But she did want to talk about you.\"\n\nIt was Missy's turn to pause.\n\n\"What did she say?\"\n\n\"She asked how our night went after we left the party. And the she asked if we had sex.\"\n\n\"What did you say?\"\n\n\"I lied. I think she believed me.\"\n\nMissy took a long pull from her beer bottle. \n\n\"Did she say anything else?\"\n\n\"She told me that if I got the chance, I should totally sleep with you.\"\n\n\"Really?\"\n\n\"Oh, yeah. She said that I would be a fool to pass on a chance to see your naked body and rub my face in your tits.\"\n\nMissy's left hand had been laying in her lap as we ate. I thought I noticed a bit of movement, even though I couldn't see under the table's edge. A brief look of excitement flashed across her face.\n\n\"Then what?\" she asked.\n\n\"Then she asked me to eat her out because all the sex talk had her horny.\"\n\n\"And?\"\n\n\"So I did. In my living room.\"\n\nMissy flashed me a grin.\n\n\"You are such a slut. You'll go down on anybody.\"\n\nI grinned back.\n\n\"I guess I should confess that she wasn't the only one I served today,\" I said. \"After Jen left, Jim called and I went over and took care of him, too.\"\n\nAs I gave her the details of my cocksucking session with her boss, I was pretty sure she was quietly touching herself under the table. I tried to look her in the eye while we talked, but I couldn't help but glance at her arm, looking for movement.\n\nWhen I finished my story, she pushed back from the table.\n\n\"Well, Jen isn't the only one that gets worked up with all this sex talk,\" she said. \"Excuse me for a moment.\"\n\nI cleared our dishes from the table, tossing the beer bottles, depositing the leftovers in the fridge before turning my attention to the dishes.\n\nThat's where Missy found me, at the sink, finishing the rinse on our plates.\n\n\"Mmmm,\" she said. \"There's nothing sexier than a man doing dishes.\" \n\nShe kissed my neck and my body instantly bristled with goosebumps. I tried to turn to her, but she had me pinned against the cabinets. She continued to kiss me as her hands reached around and unbuttoned my shirt.\n\nWhen her fingers brushed past my nipples, I moaned. Loudly.\n\nMy cock stiffened in my panties and I could already feel the precum bubbling out of my erection.\n\nMissy's fingers drifted away from my nipples and I immediately missed her ministrations. She unbuttoned my pants, pushing them down to my thighs.\n\nHer hand slipped inside my panties, pulling the sticky fabric away from my straining cock.\n\n\"You're all wet,\" she whispered in my ear. \"So am I.\"\n\nShe eased away from me, and spun me around. She was wearing a sheer white babydoll that draped off her large breasts, her erect nipples visible through the thin fabric. Underneath, she was wearing a matching white lace thong.\n\nShe kissed me, hard, her tongue pushing between my lips. I ran my hand along the inside of her thigh, past her panty-covered pussy. I could feel the heat through the lace.\n\nMissy pushed me to my knees. With my pants still bunched around them, It wasn't as easy as it sounds.\n\nShe pulled the back of my head toward her crotch and breathed in deeply, taking in the scent of her sex. \n\nI kissed and nuzzled her snatch through the tiny panties, letting my tongue trace across her uncovered outer labia. She pulled me tighter to her body, grinding her pussy in my face until I started seeing stars. \n\nShe let me go, and I quietly tried to catch my breath. She turned away from me and placed her hands on her knees.\n\nI knew what she wanted. I buried my face between her ass cheeks, my tongue tracing the thin strip of fabric that ran between them. I grabbed the globes of her round behind and spread them so I could get better access to her crack. \n\n\"Ohhhh, yeah. Eat that ass,\" she moaned.\n\nI pulled the thong to the side, holding it out of the way with my thumb as the rest of my hand kept her spread open.\n\nWhen the tip of my tongue glanced across her waiting rosebud, she let out a yelp. I kept up with my long strokes, down as close to her pussy as I could reach, up across her asshole and up to the top of her crack. \n\nEach time I slipped past her backdoor, she groaned and shivered with pleasure.\n\nBut soon, she pushed me away.\n\n\"I need to cum,\" she said. \"Now.\"\n\nI lay flat on the floor, and Missy stood over me. She lowered her soaked pussy to my waiting face, and I slipped my tongue inside her sex. She tasted amazing. Sweet and sweaty. My cock, which had gone limp, laying in a pool of precum in my panties, began to stir.\n\nMissy wasn't kidding about wanting to cum. She positioned herself so that her clit was on my tongue.\n\n\"Suck it,\" she commanded. \"Suck me and make me cum on your face.\"\n\nI willingly complied. pulling her engorged button between my lips.\n\nMissy began to rock back and forth.\n\nI flicked my tongue across her clit as I sucked harder.\n\n\"Ohhhhh. Ohhhhh. Ohhhhh, yeah,\" she said, her hips bucking harder and harder. \"Just like that. Just. Like. That.\"\n\nJust then, her hips locked and I could feel her body stiffen above me as her orgasm ripped through her. Her hand grabbed the top of my head, her fist clenching my hair as she rode the wave of pleasure.\n\nI tried to hold still, neither sucking her clit harder, nor letting go. I knew that holding as still as possible would let her stay in the moment as long as possible.\n\nWhen she started to come down, she lifted her soaked pussy from my face. I was covered in her juices, but I didn't make any move to wipe them away. \n\nShe stood, took my hand and led me to her bedroom. \n\n\"Get undressed,\" she said.\n\nI quickly dropped my clothes, leaving only the red panties.\n\n\"Lay down,\" she said.\n\nI settled into the middle of her queen-sized bed. Missy walked to the end of the bed and stood looking over me. Her panties were gone, dropped on the kitchen floor, I assumed. She pulled her negligee over her head, her pendulous breasts bouncing as she set them free.\n\nMissy crawled onto the bed, and between my legs. Her hair - and then her breasts - brushing across my legs. She brought her face near my panties and I could feel her breath through the fabric, but she never touched my crotch. \n\nShe continued up my body, planting a series of kisses on my chest and neck, but nowhere near my sensitive nipples. When she reached my face, I felt her tongue scrape across my chin and cheek, which were still sticky from cunnilingus in the kitchen.\n\nWhen she kissed my mouth, she pushed her tongue between my lips.\n\n\"My goodness, my pussy tastes good,\" she said, breaking our kiss. \"Don't you think?\"\n\nI murmured my agreement as she sat up, centering her exposed sex over my panty-covered cock.\n\nHer fingers found my nipples and she let her nails scratch across them. I moaned and arched my back, my dick straining against the lace. \n\n\"You have the most sensitive nipples of any man I've ever met,\" she said, as her fingers rubbed and tugged, making me moan and groan with pleasure.\n\nShe reached between her legs and shifted my cock, stiff and leaking copious amounts of precum, so that it lined up with her pussy. As she stroked my nipples, her wet snatch ground against my dick. \n\nIt was almost too much to take. I kept shifting, trying to get my throbbing erection away from her, even for a moment. Those brief respites were all that was keeping me from cumming in my thong.\n\nMissy let me move away, but only for a moment before she would catch my bulge with her pussy and began my inevitable trip over the edge.\n\n\"I want you to do something for me,\" she said, pressing harder against my cock.\n\n\"Anything,\" I said, panting heavily and trying not to come too soon. \n\n\"I'm glad you said that,\" she said. \"But I need you to promise.\"\n\n\"What is it?\"\n\n\"Promise me you do as I ask.\"\n\n\"What is it,\" I said again.\n\n\"Just say you'll do it.\"\n\nI hesitated. Missy upped the ante, reaching between my legs and pushing my panties to the side. She grabbed my erection and held it just millimeters away from her wet, open pussy.\n\n\"Say it. Say you'll do it.\"\n\nI couldn't hold out. \n\n\"Yes. Yes. Anything you ask.\"\n\nMissy impaled herself on my cock, and returned her fingers to my nipple. I'm not sure my cock had even completely sheathed itself when my orgasm wracked my body. I grabbed her hips and pushed against her as hard as I could, my cum shooting from my cock as I screamed her name.\n\nAs I began to come down, Missy never moved. My cock was shrinking rapidly and soon slipped from her folds. \n\n\"Are you ready for my request?\" she asked.\n\nI nodded.\n\n\"I want to watch you suck Jim's dick.\""
    ],
    "authorname": "HConway",
    "tags": [
        "bisexual male",
        "oral sex",
        "panty play",
        "nipple play",
        "fetish"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/my-secret-service-ch-07"
}
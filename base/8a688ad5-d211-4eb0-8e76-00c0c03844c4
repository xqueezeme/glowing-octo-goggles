{
    "title": "The Blind Girl in the Snow Pt. 04",
    "pages": [
        "Everything comes to an end sometime.\n\nAnd when you reach that end it's only natural to look back on what was and had been when everything was new and exciting. Looking back at those moments that changed the course of who you were into who you became. That it was love that did this only makes the remembering of it so much more special.\n\n***\n\nHeather sat on the end of the bed and eased herself back so that she was propped up on her elbows as she listened to me taking off my tux.\n\nI stared down at her as she lay there waiting for me.\n\n\"So then, husband,\" she smiled seductively, \"Are you going to make love to me in my wedding dress?\"\n\nNaked, I came to stand over her with a rock hard boner pointing due North as I reached down and lifted the first layer of her dress and folded it back. To reveal another layer. Followed by another. And another. Talk about hunting for the pot of gold.\n\n\"That's all I've been thinking about, wife,\" I grinned, \"Since the moment I saw you walking up the aisle.\"\n\nShe raised her hand and pretended to stifle a yawn. \"But it's been such a long day. I'm feeling ever so sleepy. Maybe you and that thing of yours can wait until tomorrow?\"\n\nI knelt down and tugged up the final layer of her slips to reveal her white self-supporting stockings and bare thighs. On the right was a pink garter and above that were a very French looking pair of snug fit panties.\n\nLooks like I had found the something blue.\n\nReaching under her, I grabbed the elastic and pulled them slowly off as she lay there giggling behind her clenched fists. Her familiar sex was smooth and bare as I took each thigh in hand and pushed them back so that her wet slot rotated upwards to leave it vulnerable to my intentions.\n\n\"Janet was right,\" she whispered as she closed her eyes and let her head fall back onto the pink duvet,\" You are such a bad man. A very naughty man.\"\n\nI took my cock in hand and rubbed the engorged purple head around her pussy lips. \"I'll stop if you want me to.\" I teased. The thing was so hard it was aching with anticipation.\n\nMy new wife shook her head as I leaned over her and slipped a hand into her white bodice to pull free one of her ripe succulent breasts before doing the same with the other.\n\nThe woman lifted her arms and wrapped them around me as I covered her with my mouth seeking hers. Pressing my hips forward, I fed my length into her in one smooth motion that made her arch her back and gasp as she willingly accepted the first of what would be many fucks this night.\n\nWrapping her legs around me, Heather buried her head in my neck and whispered in my ear.\n\n\"Like I said,\" she breathed, \"You're a very very naughty man.\"\n\n***\n\nIt's not what you say but the way you say it.\n\nHeather failed to keep a straight face as she sat listening as I read out the Dog and Ducks menu to her. We were in a quiet corner at the far side of the Olde English style restaurant which was a ten-minute walk from Company HQ where we had just left the Christmas party.\n\n\"How can you have a traditional English breakfast at eight o'clock in the evening?\" she whispered leaning forward as she ran her fingers around the edges of the table like she was marking out her territory.\n\n\"This is New York. They'd make you a midnight snack for your lunch if you asked them,\" I replied, \"Besides, I know the owner. We go way back. Have you never had a full English before?\"\n\nShe shook her head. \"No, I don't think so.\"\n\n\"You'll love it,\" I promised, \"Wait until you try the black pudding.\"\n\n\"Black pudding?\"\n\n\"Think big fat juicy sausage.\"\n\n\"You're kidding,\" she laughed as her nose turned pinker than usual.\n\n\"Nope,\" I teased.\n\nShe wriggled and shuddered in her seat. \"Sounds disgusting,\" she said making a face, \"But I'll try anything once.\" \n\nShe smiled as she sat back and rubbed her bare arms. She looked a picture. Her in that red dress with the daring vee that revealed the suggestive curves of her perfect breasts. Here we were together. Twenty minutes into whatever comes next. Virgin territory. The great unknown. A proper relationship. Hopefully. Maybe.\n\nA middle aged waitress came over and asked for our order. Her strawberry blonde hair was tied back and she was dressed as a Victorian barmaid with ample cleavage on view. Her American ye olde English was on point.\n\n\"Uh, two number sixes with everything,\" I said as I looked at the menu, \"Coke?\" I asked the girl sat opposite me with an amused expression on her face as she listened to me rambling on.\n\n\"Coke,\" she nodded.\n\n\"A coke and a Hair of the Dog. And that's it.\" I smiled up at the woman as she scribbled down everything on her little notepad.\n\n\"Alright, Sir,\" she nodded, \"Be back before last Tuesday,\" she said cheerily as she stuck her pencil behind her ear and off she went.\n\n\"Hair of the Dog?\"\n\n\"Brown Ale.\"\n\n\"Oh,\" she said, \"That makes perfect sense.\"\n\n***\n\n\"Black pudding, huh,\" she said as she sat there skeptically chewing away.\n\nFunny. And cute as I watched her eat her meal. She reminded me of when Stan ate that wax apple. The whole \"this should taste terrible but actually, it's kind of really good!\" thing as she put the food into her mouth expecting the worst.\n\n\"Enjoy that?\" I asked her as she finished her meal.\n\n\"Tasty!\" she agreed as she felt for a tissue at the side of her plate and dabbed her mouth. Finally, she sat back and took a long slurp of her coke through a straw as I sat there drinking the bottled dog.\n\nThere was a nervous silence that settled over us and I think we both knew that the time for forced small talk was over. That post \"Okay, I told you I love you and you told me you loved me so what happens next?\" talk where you say and admit things that usually only stay bouncing around inside your head.\n\nWhere the heck do I start?\n\nOnly this time it was her turn first.\n\n\"I meant it,\" she said. \n\nHer head was down as she fiddled around with her napkin and I could tell she was nervous and tense. But her admission fired the blood and meant everything to me right now. Okay. Good. That was more than good. Now it's your turn. Don't say anything stupid. \n\n\"I know.\"\n\nShe burst out laughing and glanced up at me with a look that was a mixture of \"Listen to this wise guy!\" and \"Oh, that is so sweet!\" Why is it so hard to say what you feel?\n\n\"And?\" she asked as she licked her lips. \n\nGo on. Say it. Use words. Like adults do when they need to.\n\n\"So did I.\"\n\nNice job, Mike. You really dragged that one out from somewhere deep dark inside that thick fucking skull of yours. Old habits really do die hard for some assholes stuck in their ways.\n\nHeather nodded as she chewed on her lower lip. Probably to stop herself laughing at the stubborn fool sitting opposite her.\n\n\"Why?\" she asked as she turned her head towards me. \n\nUh. Oh. Now there was a question. Probably the most important question I was ever going to be asked or had to answer. Why? I shuffled in my seat feeling slightly uncomfortable in my new skin. I think she understood how difficult it was for me to talk about my feelings like this and was gently guiding me through my reluctance one step at a time.\n\n\"Because.\" I said simply. Because I do. And because I want to be.\n\nThe blind girl didn't say anything for what felt like a long long time. Then I saw her draw a deep breath and clasp her hands together on the table in front of her.\n\n\"I remember,\" she began, \"When we first met. That morning when I fell. And when you asked if I was alright. I remember the sound of your voice and the way you made sure I was safe until Janet came for me. It's strange,\" she smiled, \"I always thought we'd meet again one day. And we did.\"\n\n\"Janet came for you?\" I frowned, \"When?\" This was news to me.\n\nHeather shrugged. \"Since it was my first day, the people who had arranged my placement made sure there would be someone there to meet me. That someone was Janet. She saw everything that happened between us and asked me if I was alright when she introduced herself just after you left me on the sidewalk. She never told you?\"\n\n\"No,\" I replied, \"She never told me a thing.\" Which was strange because Janet always told me everything about anything. Well, almost everything apparently. Probably just slipped her mind.\n\nI reached across the table and took Heather's hand in mine.\n\n\"Sometimes there doesn't have to be a reason,\" I said, \"Sometimes it's just the way things are meant to be. That I love you and you love me was always going to happen. All we had to do was meet. Maybe we're just fated to be together.\"\n\nShe nodded and smiled at me. \"That's nice,\" she said softly, \"Even though I can't see you, I know you inside my head. I can feel when you're near and the colors I see and the shapes they make when I hear you speak mean everything to me,\" She gave a bashful shrug, \"I've always been sort of afraid there would never be someone for me.\"\n\nI sat forward and brought her hand to my lips. There were tears in her eyes and her voice quivered with the emotions she was feeling.\n\n\"Then you don't have to be afraid anymore,\" I promised her, \"Because that someone is sat right here in front of you. This is us just starting out. First day at school stuff. Me, at thirty and you at eighteen.\"\n\nHeather looked up surprised.\n\n\"You're how old?\"\n\n\"Just gone thirty,\" I smiled, \"Didn't you know?\"\n\nShe shook her head. \"No, well, I mean, I imagined you were a little older than Jimmy. He's what? About twenty or so?\"\n\n\"Does the age difference bother you?\"\n\n\"No, not really, but,\" she frowned slightly, \"Twelve years.\"\n\nYeah. Twelve years. \n\n\"Just don't call me the old man.\"\n\nShe blushed and smiled shyly, \"For an old man, you sure knew how to handle me.\"\n\nAh. Yeah. That was quite the experience. Just you. Me. On my bed.\n\n\"So what do we do now?\" I asked her.\n\nHeather turned around feeling for her coat and bag which were hanging on the back of her chair. \"Now, I have to go home,\" she said, \"I told Melissa I would be back by nine and I'm going to Moms tomorrow for the holidays and everything. What about you?\"\n\nWhat was I going to do? Stuck at the end of a bar with a drink in hand as usual? It was Friday night and Christmas Day was Monday. So that was a whole weekend to sort out I guess. Maybe I should do the right thing for once and head upstate early and spend more time with the family.\n\n\"I'll be fine,\" I told her as we got to our feet and I helped her into her coat with her standing there in front of me. There was that red dress again showing way too much flesh for my own good as I put my hands on her shoulders. I felt her lean back so she pressed up against me as I wrapped my arms around her.\n\n\"You promise?\" she whispered.\n\n\"Promise,\" I nodded as I took out my phone to call her a taxi, \"You go and have a great holiday and we'll talk more next week when everything settles down. Didn't I tell you Christmas was a pain in the ass.\" I laughed as we walked out of the restaurant into the cold night air.\n\n***\n\nWhat is it with snow and romance?\n\nHer ride had pulled up to the sidewalk as we both stood there waiting against a backdrop of festive lights and gently falling snowflakes.\n\nHeather was wrapped up tight in her black overcoat as I reached over and opened the rear cab door. She was holding my hand so I could help her get into her seat when she stopped and turned towards me with her eyes bright and shining in the electric glow.\n\n\"Mike..\"\n\nThe kiss was simple and heartfelt. It was enough to get us through the days when we wouldn't be together. Tuesday seemed such a long way away. Thank God, everyone had an extra day off to relax and unwind.\n\n\"See you soon,\" she said as she pressed her hands against my chest, \"About eleven at the main entrance.\"\n\nI nodded and hugged her to me. \"Love you,\" I mumbled into her hair.\n\n\"I know,\" she grinned as I let her go and helped her get into the taxi. Once she was settled into her seat, I closed the cab door as she gave me a brief wave as the car pulled out from the curb.\n\nI stood watching as it disappeared into the Friday night traffic wishing my life away and that tomorrow was a completely different day and we would be together again.\n\nIf only I had a time machine.\n\n***\n\nTwenty years later...\n\nThe station wagon pulled out into the traffic from the intersection as we made our way into the city. As ever, it was bumper to bumper all the way as I glanced over at the silent figure sitting in the front passenger seat in a world of her own as Janet and Gracey chatted away in the seats behind her.\n\nI couldn't even begin to imagine what was going through her head right now as she sat there wearing her special visor to protect the bandages covering her eyes. I glanced up at the rearview mirror watching the younger woman in the back seat with her frizzy blonde hair looking out of the window on her side. She was the one who had given us hope. \n\nThat what was once impossible could actually be possible.\n\nEven when her operation was a success and she regained about eighty percent of her vision, she was still the old SQUEAK \"Ouch!\" Gracey she had always been. She was the force of nature that had set us on this path.\n\nI tried to concentrate on the road but what was going to happen in the next couple of hours was the only thing that mattered. What had started out as a conversation many months ago would, all being well, turn out to be the most important day ever.\n\nA life-changing day.\n\n***\n\nJanet got to her feet and motioned for the other two women to follow her as the Doctor walked over to the door and dimmed the lights in his office.\n\n\"Come on, ladies,\" she ordered, \"These two are going to need a little privacy,\" She put her hand on my shoulder and gave it a squeeze, \"Catch you on the other side.\"\n\nHeather looked up from where she was sat and gave her friend a faint smile. I watched the three women along with the Doctor and his Nurse leave the room to leave the two of us alone together.\n\nI was sat opposite my wife who had her head slightly down with her hands clasped in her lap. She was breathing steady but I knew inside she was a bundle of nerves as the moment finally arrived for her.\n\n\"Hey,\" I said quietly as I reached over and cupped her chin, \"Ready?\"\n\nShe nodded. \"I'm scared.\"\n\n\"It's okay,\" I reassured her, \"We're going to do this together. It's just you and me now. Like the good old days.\"\n\nHeather suddenly reached forward and I gathered her to me as I felt her shaking in my arms before she sat back and took a deep breath.\n\nBoth eye patches were taped in place with a single bandage wrapped around her head to make sure they remained secure. I stood up and undid the clip at the back of her head and slowly unwound it until it fell away in a long strip. Using my fingers, I carefully found the end of each piece of tape and peeled them off making sure both patches remained in place.\n\nOkay. Here we go.\n\n\"Keep your eyes closed, hon,\" I whispered as I carefully removed the right one first and then the left. Heather had both eyes tightly shut and her head jerked back slightly as they came away. \n\nEven in the dim light, I could see her face was slightly swollen around the upper cheeks and bridge of her nose. Her eyelids were bruised and made her look like she hadn't slept for a month.\n\n\"Oh,\" she gasped as both eyes suddenly teared up. I grabbed a box of tissues, took one out, and gently daubed around each to dry them and remove any crusted skin or flaking from the operation.\n\n\"Alright,\" I smiled at her. It had been two long weeks since she had decided to go through with the operation to restore her sight, \"Take your time.\"\n\nShe was looking down at her lap as she began to tentatively open her eyes. I sat watching her with my heart in my mouth and everything crossed for the Doctor had warned me that there was a possibility the surgery might fail. \n\nThere was a long pause then I saw her turn her hands over so that they were palms up. After a moment's hesitation, she began to wriggle her fingers before turning them back over again as she clenched and unclenched each hand.\n\n\"Uh huh,\" she murmured to herself.\n\nI couldn't say anything to her if I wanted to. It was like watching a butterfly emerge from its chrysalis after a long sleep and was adjusting to its new life.\n\nHeather took a deep breath and slowly raised her face and her new eyes were wide with wonder and surprise as they found mine and we stared at each other for what felt like an eternity.\n\n\"Hey, beautiful.\"\n\nHer face was a picture. It was like she had been born again.\n\n\"Ohhhh,\" she gasped as she blinked, \"Look at you!\"\n\nI sat forward in my chair and stared into her eyes properly for the very first time. The milky grey tinge at the center of each eye had gone to be replaced by a normal looking blackness. I reached up with a tissue for she had teared up again and was trying to blink them away.\n\n\"Look at me,\" I smiled as she looked me up and down.\n\nShe frowned as her attention returned to my face.\n\n\"But Janet said you were ugly?!\" she blurted out.\n\nWe both started to laugh. Yeah. She probably had done that. Typical Janet.\n\n\"How do you feel?\" I asked my wife, \"What can you see?\"\n\nHeather realized she could look around freely now. She slowly turned her head left and right, up and down staring around the room. She put her right hand out and touched my cheek. \"Good, I think. A little fuzzy around the edges and still sore. But I can see things. Everything looks wonderful!\"\n\nThe relief was palpable. For both of us.\n\nI felt myself choking up. \"Heather, I...\"\n\nShe slipped from her chair and I felt her fingers on my face tracing the memory of what she had imagined I looked like in the past. I grasped her right hand and kissed it as I felt my emotions overwhelming me.\n\nShe held my face between her hands with her own inches from mine as she stared at me intently with the look of love. \"Oh, you. I never thought I could love you more today than I did yesterday but I do,\" She reached up to kiss me on the forehead, \"All those times when I needed someone you were there for me. Like always. Like today of all days.\"\n\nHer eyes fell on my lips and she slowly came to me and we kissed with a love that had begun on that rainy day so long ago. Our kiss ended and we pressed our foreheads together as she grabbed another tissue and blew into it as she began to laugh and cry.\n\n\"Wait here,\" I told her and went over to light switch near the door and turned the dial so the room got slowly brighter, \"Tell me when enough is enough.\"\n\nHeather nodded and raised her hand. \"Alright. Okay. Starting to ache a little.\"\n\n\"Close your eyes,\" I smiled as I came back to her and bent down to take her hands in mine.\n\nShe laughed and did as she was told. \"Why?\" she asked as she got to her feet.\n\n\"Shhhh,\" I said, \"You'll soon find out.\"\n\nI stepped behind her with my hands on her shoulders and guided her across the room to the far wall where a long mirror was hanging. This was going to one of those special moments neither of us would ever forget.\n\nOnce we were standing in front of it, I kissed the side of her face. \"Okay, sweetheart. You can open them again.\"\n\nI stood behind her looking at her reflection as I watched her realize she was seeing herself for the first time. The first time in thirty-eight years.\n\nThere was a long pause then she let out a long \"Ohhhhhhhh!\" as she turned her head to look at me wide-eyed with surprise and wonder.\n\n\"Is that ME?!\"\n\nFunny. The woman had perfect timing.\n\nI nodded.\n\n\"Hey, Mrs. Sloane.\"\n\nShe turned back to the mirror and stared at her perfect twin in amazement. Reaching up, she carefully touched her hair then her lips and started to cry again.\n\n\"That's ME!\" she whispered as I handed her another tissue.\n\n\"Sure is.\"\n\nRunning both hands through her hair, she turned to me. \"So is that what brown looks like?!\"",
        "I propped my chin on the top of her head as she turned from side to side looking herself up and down. \"More like auburn reddish copper,\" I grinned.\n\nShe did a 180 to look over her shoulder and we both ended up looking at her ass in her blue tartan knee length skirt. \"Oh, will you look at THAT!\" she laughed.\n\n\"Already have done. A million times,\" I replied dryly, \"Probably more.\"\n\nHeather reached behind her and rubbed both hands over her butt as her eyes met mine in the mirror. \"It looks cute,\" she said, admiring its firm perfect shape, \"Now I know why you can never leave it alone when we're in bed.\"\n\nShe turned back to face front and ran her hands up over her stomach until they were on her breasts as she smiled knowingly at my doppelganger.\n\n\"Those too,\" I sighed, \"Those things are the bane of my life, lady.\"\n\nIn a flash, she spun around and wrapped her arms around my neck as her lips hungrily found mine and the passion of her kiss took my breath away.\n\n\"And I love nothing more than they are, Mr. Sloane,\" she breathed as she put her hands on my cheeks, \"That they belong to you and only you makes me feel all fuzzy inside.\"\n\nWe hugged each other for a long time not saying anything because no words were needed to express how we were both feeling. Anxiety had given way to relief which was now an overwhelming sense of euphoria. I could stand here all day enjoying her discoveries with her but I knew the others outside waiting would still be tense and worried.\n\n\"There are some people outside who would very much like to see you right now,\" I whispered to her as we both let go of each other and I smiled as Heather fiddled around with her hair and clothes, \"Including someone very special to us both.\"\n\nI turned and walked to the door.\n\n\"Ready?\"\n\nShe gave me the most beautiful smile ever and nodded.\n\n***\n\nThere is just something about a bright, cold December day with the world covered in a thick layer of freshly fallen snow.\n\nHeather stood looking out across the bay as the Staten Island ferry circled around as it came into dock. Overhead, the clear blue sky was crisscrossed with white streaks as silver bullets headed off to wherever it was they were going. The world was still turning but to my wife and me, we were in a world of our own as we walked and talked.\n\nIt had been just over an hour since Heather had regained her sight. Those initial moments were still emotionally fresh to all of us when she walked out of the room and saw our seventeen-year-old daughter Sarah and her two old friends Janet and Gracey waiting for her. So many things happened at once when Heather ran into their crying arms and the protective bond they had formed in life was made doubly so. Her parents, Ruth and Tom, along with my Mother and Brothers had decided to wait back at home so that was going to be another emotional reunion for all of us.\n\n\"Everything is so beautiful,\" she said suddenly as she glanced up at me. She was wearing a special pair of sunglasses her Doctor had given her to protect her eyes until she got used to her new circumstances.\n\nAfter the reunion, she had turned to me. \"Let's go for a walk. Just me and you.\"\n\nOld habits die hard. As we stood there on the hospital steps, I automatically reached over to take her hand like I had always done whenever we went anywhere. It was the strangest feeling when we both realized we didn't need to do that anymore. It was symbolic in a way as we looked at each other and smiled. Holding hands had been the emotional tether that had bound us together for the twenty years we had been married.\n\nI gave her a brief nod and smiled at her.\n\nShe was free. Free to go anywhere she wanted and do anything she pleased.\n\nHeather took a step forward. Then another as we walked side by side down the steps until we reached the bottom and she held out her arms slowly turning on the spot. A gust of wind swirled around her as she began to giggle and laugh at her new found freedom. She stopped and turned to me standing on tip-toe so that her happy blushing face was close to mine.\n\n\"Show me the world,\" she asked, \"Teach me all the things I need to know and even the things that I don't. I want to see everything.\"\n\n***\n\nSnow. Heather loved snow.\n\nWe walked together in the same park we had walked in all those years ago after we had spent our first night together. Lucille Le Plante and her 50's Diner were long gone and the old neighborhood looked so very different to what it had been back then. \n\nI sat on a bench watching my wife stumbling around in the snow as she grabbed some in both hands. She turned around and I waggled a finger at her.\n\n\"No, hey,\" I warned her, \"Don't you dare or else!\"\n\nShe made a face and stuck her tongue out. \"Or else what?\" she laughed and chucked a snowball at me which flew right over my head. The next caught me square on the chops as I jumped up chasing after her as she shrieked and turned tail.\n\nShe had run a short distance before she fell and she managed to roll over as I grabbed her flailing arms and sat astride her as she tried to wriggle away.\n\n\"Not fair!\" she laughed as I pushed her arms above her head so that I was close to her face as I kissed her on the tip of her frozen nose.\n\nI let her arms go and she wrapped them around my neck. Easing up slightly, I carefully removed her special glasses as she closed her eyes and winced at the increased brightness as she lay there in the snow.\n\n\"Look at me,\" I whispered.\n\nSlowly, she opened her eyes properly for the first time in the cold light of day. I reached up and brushed the hair away from her face.\n\n\"That was a day,\" she said simply.\n\nI nodded. \"That was a day.\"\n\nWe could both feel the love and desire for each other sparking within us. Heather lifted her head and kissed me gently on the lips where they lingered with the hint of a promise.\n\n\"Imagine what tonight will bring.\"\n\n***\n\nThe rest of the day and evening was spent with gatherings of friends and family back home as Heather was shown how deeply she was loved by everyone who knew her both young and old.\n\nI stood in the doorway of the dining room with a drink in hand watching her as she sat surrounded by all the women in the house as she got to know who was who and what they looked like. She was the absolute center of attention and deservedly so. Every face was a new surprise to her and there was a pile of tissue boxes next to the sofa.\n\n\"You alright?\"\n\nI turned and saw Janet standing just behind me.\n\n\"I am now,\" I said, \"Now that it's all over.\"\n\nThe older woman gave me a hug.\n\n\"Some things are meant to be, Mike,\" she smiled, \"From the moment I saw you together I knew you were made for each other.\"\n\nI turned and looked at her.\n\nJanet smiled and shrugged. \"Female intuition.\"\n\n\"More like being in the right place at just the right time,\" I told her.\n\nShe took a sip of her drink and looked at me over the rim of her glass. \"Ah,\" she smiled, \"I'm surprised it took this long for you to find out.\"\n\n\"Why didn't you tell me it was you who was waiting for her?\"\n\nJanet looked down at her glass and was silent for a moment. \"Because I saw the way you looked at her when you picked her up,\" She looked up at me, \"And knowing what you were like back then it was something you'd let slip by without knowing it.\"\n\n\"I always knew you were up to something.\"\n\nThe older woman smiled at me. \"It wasn't my place to get involved but even the mule sometimes needs to be led to water to drink. I just showed you the right path to take that's all. And all these years later, here we all are.\"\n\nYeah. Here we all were. In good old 2037. I gave Janet a hug and kissed her on the forehead. I wouldn't have changed those twenty years for anything.\n\nI turned back to where Heather was sitting and saw that Sarah had brought out our old photo albums. The first one she opened was our wedding album. Gracey grabbed another box of tissues and handed it to her as everyone around them laughed.\n\nSarah came over and grabbed me by the hand. \"C'mon, Dad,\" she urged, \"Think you need to be with Mom for this one.\"\n\nWhoa. Yeah. Okay. I squeezed in between Gracey and my wife who snuggled herself against me as she looked at the photographs from the big day.\n\n\"Oh, look at us,\" she exclaimed, \"And that dress!\"\n\nSarah was sat at her feet. \"You looked beautiful, Mom,\" said out Daughter, \"As pretty as a picture!\" And she was as we stood there arm in arm with her holding a bouquet of flowers between us as I grinned away happy as a loon.\n\nGracey gave her friend a nudge. \"For an old man,\" she winked, \"You scrubbed up pretty well, Mr. Sloane\" she laughed as I reached around my wife and pulled her friends ear playfully.\n\nHeather sat forward squinting as she stared at the photo. \"So, we got married when I was nineteen and you'd be what?\" she wondered turning to me, \"Thirty-two?\"\n\nI nodded. \"That was June. So, yeah, about that.\"\n\nI remembered that day.\n\nLike it was yesterday.\n\nAnd the moment which made it all happen.\n\n***\n\n\"I think we should get married,\" said Heather as she stood under the blossom tree.\n\nThe day was one of those long summer sunshine days with blue skies and gentle breezes that swirled this way and that not knowing where they wanted to go or caring for that matter.\n\nIt was deep into July and it was the kind of sunny day to take an idle stroll wherever the mood took us as we spent the day walking through a suburban meadow simply enjoying being together now that she had finally moved into my apartment.\n\nThat had been two days ago. And this was the first time we had seen daylight in those two days as the initial thrill and excitement had died down - just a little.\n\nReaching into the basket, I took out a ripe red apple and munched on it as she stretched her arms above her head and yawned. Don't blame me, Lady. You're the one with all the best toys to play with. And play with them I did. And when I wasn't playing with them, we were sleeping or eating instead. Then I played with them some more until the urge eased or we had worn each other out.\n\n\"Enough!\" she had gasped as she tried to sit up as I rolled off her with my spent member slipping from her full slot for the fourth - or was it fifth? - time, \"You and that ridiculous libido of yours!\" \n\nI knelt on the bed breathing hard as she sat back against the headboard. She looked frazzled with her hair a great reddish bloom around her flushed face as she rubbed her aching pussy and squeezed her thighs together. The only things she had on were a skewed black suspender belt and stockings as I watched her round breasts heaving up and down with each swollen nipple manipulated painfully erect. No truer word was ever spoken when I say I loved those puppies to hell and back.\n\nAnd don't get me started on that loveable tight little ass of hers.\n\nAs she succinctly put it; sometimes that ridiculous libido of mine just doesn't know when to call it quits. Something I had warned her about when we had our first \"proper\" date after the Christmas break.\n\nI took another bite of the apple staring at her as she laid back against the trunk of the tree in her blue chequered shirt and tight crotch hugging denim pants with white plimsols looking good enough to eat and do rude things with. No wonder she was the apple of my eye.\n\nThat Tuesday back in December had been really something now that our love was out in the open and we both realized how we felt about each other.\n\n***\n\nAs arranged, we met outside the Company HQ at eleven.\n\nWe spent an hour or two simply wandering around in the snow taking in the sights, browsing in various shops and stores, before hitting the big McDee and having fries with everything to warm us both up.\n\nWe were sat at a first-floor window table as I watched her tuck into her double cheeseburger and munched away listening to the sounds of city life rumbling down below. She seemed distracted somehow as if her mind was elsewhere and she kept glancing from the window to where she knew I was sitting.\n\n\"Are we going back to your apartment?\" she asked suddenly as she peeked at me over her burger.\n\nAh. Okay. So that's what she's thinking about.\n\n\"Only if you want to.\"\n\n\"MMmm, kay,\" she munched quietly.\n\n\"You don't have to if you don't want to, Heather.\"\n\nHer left hand rummaged around inside her tray looking for the packet of fries as she held the burger in her right. \"No, I want to,\" she began as she waved a salty chip in front of me, \"It's just uh, well, the last time, I mean, the first time,\" she frowned and turned red, \"Whatever, when we last did it I was a bit uh shocked.\"\n\nShocked?\n\n\"Shocked?\"\n\nHer cheeks were flushed and her nose looked like a pink beacon, \"What I mean is,\" She stopped and turned her head to her left, \"Is there anyone around us?\"\n\n\"No, we're pretty much on our own over in this corner,\" I told her.\n\nShe nodded, \"Okay, good. No, what I mean is when we did it. When we had sex.\"\n\nAlright. Okay. That sex. It had been awesome. Great. \n\n\"Sex?\"\n\n\"I didn't expect to do it so many times,\" she blushed, \"I thought once, maybe a couple of times, but you didn't stop,\" She glanced up at me, \"Sorry, I must sound so silly.\"\n\nI took a bite out of my burger and shoved a bunch of fries into my mouth thinking about what had happened that Saturday. Was she surprised at too much sex?\n\n\"Well, I guess I just have a really strong sex drive,\" I confessed, \"Not sure how to put it to be honest. When I get going I can really get going. Is that going to be a problem for you?\"\n\nGeez. I bloody hope not.\n\n\"No, no, no, no,\" she said as she shook her head and waved what was left of her meal under my nose, \"I loved it. I was just a bit surprised when you came back for more. I thought maybe it was because I was new. Someone different to do it with.\"\n\nWell, shit. It would never occur to me that a thing like that would bother her or any woman come to think of it. Then again, I always had been a self-absorbed dick as far as getting my be all and end all away.\n\n\"How many times?\" she asked suddenly, \"Uh, I mean, how many times is the most you've done it?\" She was blushing like a ripe tomato with curious embarrassment.\n\nHow many times was the most times? That had been Rachel, right? Or was it with Zoe from the mailroom? I sat there trying to remember those heavy duty sessions and one night stands. Be honest now, Mike. No fibs. No telling porkies on a first date.\n\n\"Five,\" I coughed, \"I think.\"\n\n\"FIVE?!\" she blurted out as her mouth dropped open in shock.\n\nAlright. Okay. Hold on here. That's not a bad thing, right? Like I said, I had a nine-plus out of ten libido and was your original walking talking horny bastard when in the mood. Which was more often than not. Better to want more than to want none at all as Brad used to say. Not that Brad was a good role model.\n\nI shrugged my shoulders. \"Yeah. Five. Five times is about right.\"\n\nHeather sat there with a bemused frown on her pretty face as she considered my confession, \"Five,\" I heard her mumble to herself as she licked her fingers clean and dried them with a tissue.\n\n\"Do you still want to come back to my apartment?\" I asked her.\n\n\"UH HUH!!\"\n\n***\n\n\"So you think we should get married, huh,\" I said as I contemplated my girlfriend of seven months standing there smiling and laughing under the blossom tree.\n\nShe simpered and bashfully chewed on her lower lip, \"Maybe.\"\n\nGet married, huh. Married to her. Sure. No problem. No problem at all.\n\n\"Alright,\" I told her as I stepped closer to where she stood.\n\nHeather looked up when she realized I was in front of her.\n\n\"What?\" she laughed as she slowly turned side to side as she leaned against the tree with the wind blowing her hair around her face.\n\n\"Married,\" I said, \"We should do it. Me and you.\"\n\nShe blinked. \"Are you serious?\"\n\n\"Totally,\" I nodded, \"Weren't you?\"\n\nI reached above her and picked pink blossom from the branches.\n\n\"No,\" she laughed, \"Not that I wouldn't want to.\"\n\n\"What's stopping us?\"\n\nShe stood straight and her gaze took on that fierce, piercing frown which always happened when she got serious, \"Nothing,\" she said calmly, \"But..\"\n\n\"Don't you want to marry me?\"\n\nHey, look at that. It's your court and there's a ball in it. It's up to you if you want to swat it back.\n\n\"I,\" she began to say, \"Of course I do.\"\n\n\"You asked me,\" I said as I got real close to her until our faces were inches apart, \"Now I'm asking you.\"\n\nAll around us, people and families were walking, playing and doing whatever it was they were doing as the two of us stood there under the blossom tree thinking about changing our lives together. Those seven months had been more than enough time for us both to realize we didn't need to wait to make the next step.\n\n\"Alright,\" she whispered, \"Let's do it.\"\n\nShe jerked her head back slightly as I reached up to touch her.\n\n\"What are you doing?\"\n\nI slipped another blossom behind her ear.\n\n\"I guess we just got engaged and I'm putting flowers in your hair.\"\n\nShe gave a little shriek and threw herself into my loving embrace as we did a little twirl of happiness which was the point of everything. The only thing that mattered is we were both happy and doing those things in our lives that felt the right thing to do.\n\n***\n\nHeather and I stood on our porch waving as the last of our guests and family headed for home. It was nearly the end of a long long day that none of us would ever forget. Overhead, the dark copper hue of the twilight sky slowly faded into a deep blue-black as the stars began to appear.\n\nMy wife walked down the steps and stared up at the heavens in wonder. Slowly, she stretched out her arms and I could hear her crying as I approached her from behind.\n\n\"Look at all this,\" she laughed as she spun around to face me with a beaming smile, \"When I was little, my Mother used to describe the night sky to me and I always imagined what it would be like. Now I know. Now I know.\"\n\nI took her hand. \"Come on. It's been a tiring day and you need some rest. You go to bed while I lock up and I'll make us both a coffee.\"\n\nArm in arm, we walked back towards our home.\n\n***\n\nHeather was sat on our double bed when I walked into the bedroom holding two cups of steaming coffee. She gave me a smile as I put them down on the bedside table and came over to sit beside her.\n\n\"That was a day.\"\n\nShe laughed and dropped her head sideways so that it rested on my shoulder.\n\n\"How are the eyes?\" I asked her as I put my hand on her knee and gave it a squeeze.\n\nSore,\" she sighed, \"But happy sore. The Doctor has given me some drops to take which should help.\"\n\nI gave her knee another pat and got up to get undressed. It had just gone eleven and after everything that had happened, the day had begun to catch up with me. I reached up and pulled my black sweater over my head before starting to undo the buttons on my blue striped shirt...\n\n\"Hey,\"\n\nI looked over my shoulder to see Heather watching me.\n\n\"Hmmmmm?\"\n\n\"Aren't you forgetting something?\" she said as she got to her feet and walked over to the dimmer switch turning the dial so that the light in the bedroom got brighter.\n\nI shook my head. \"No,\" I said, \"No, I haven't forgotten. It's been on my mind ever since we stood in front of that mirror in the Doctor's office this morning. But it's been a long ass day and I thought you'd be too tired for that stuff.\"\n\nMy wife came over to stand in front of me as I stood there with a half-unbuttoned shirt. Her eyes searched my face as she raised her right hand and caressed my cheek. Then she began to undo the remaining buttons and slowly helped me out of my shirt.\n\nFifty still saw me in pretty good shape. I'm not exactly the gym type but I did enough to keep me on the right side of healthy, fit and senile.\n\nHeather put both her hands on my hairy grey chest as she leaned forward and kissed me above each nipple. She was going exploring. Going to all those places she had imagined in her head every time we had made love.",
        "It was then I felt her undoing my belt as she looked down between us not saying a word. Once free, her hand unclipped the clasp holding my pants together and let her fingers begin to tug down the zipper.\n\nI glanced down to see her peeking up at me with an expression like she had been caught with her hand in the cookie jar. I just smiled and nodded as my hands ran through her shoulder-length hair as she slowly slipped to her knees.\n\nTugging my pants down, she knelt back so she could see my blue black boxers and the thing waking up inside them. My breath caught in my throat as I felt her tracing the outline of my growing member with her fingers before she slipped them into the elastic band and pulled them down and off along with my pants.\n\n\"Well, look at you,\" she whispered as my length hung low and gently bopped up and down in front of her flushed face, \"So that's what you look like.\"\n\nGeez, that felt good as she reached for my cock, wrapped her fingers around its thickening girth and lifted it up from where it hung so she could see my ball sack. With her other hand, she cupped and felt each testicle before letting them go as she turned to concentrate on my erect penis.\n\n\"You have no idea,\" she said, glancing up at me, \"What I imagined your thing to be like in my head. I remember touching it for the first time and feeling how hot and strange it was to my touch. Like it was a living breathing thing separate to you. Oh,\" she smiled, \"Look how much bigger it's grown with me playing with it.\"\n\n\"Stand up,\" I told her.\n\nShe got to her feet still holding on to Mr. Pecker.\n\n\"Don't you want me to suck on it for you?\" she asked with a seductive knowing look.\n\nHer impish smile returned as I fumbled with the buttons on her blouse as I stared at her chest as more of her bosom was revealed. Once tossed aside, I reached up with both hands and pushed them under her brassiere so that the ripe mounds of her breasts filled each palm with the hard nipple pressing eagerly into my skin.\n\nHeather put her hands over mine as I kneaded each firm tit eagerly. \"Oh, those are nice aren't they?\" she murmured as she swayed back and forth as I bent down and sucked each teat into my mouth. These things were more than nice. They were perfect.\n\nReaching around her, I unclipped her skirt and let it fall to the floor to leave her standing there in her brown woolen stockings which she knew I loved her to wear. Purely for scientific purposes, you understand.\n\nShe turned to look back at her semi-naked self in the long mirror and she grinned as she saw me standing beside her with my cock drooping down like a depressed turkey.\n\n\"What's so funny?\" I teased her.\n\nShe shook her head and laughed. \"It looks so sad!\"\n\n\"Well, I guess it's up to you to cheer it up,\" I replied as I slipped my hand into her panties and squeezed her left ass cheek which made her laugh and giggle even harder.\n\nShe slipped her fingers into her underwear and pushed them down over her hips to leave her sex naked for her to see for the first time. Her pussy was shaved and it had always been a thing between us for me to do it for her every now and again.\n\nI picked her up and carried her over to our bed as she sighed and stretched as I slipped between her thighs so I could enjoy the intimate taste of her wetness seeping from her.\n\n\"Mmmmmmmmmm,\" she breathed as she ran her fingers through my hair, \"Keep doing that, Mike. The way you lick my pussy always feels so nice.\"\n\nAs usual, I did as I was told. The look, feel and smell of her was intoxicating. A heady brew that never failed to push my sex drive into a higher gear. It felt like I had a thick bludgeon hanging between my legs as I drank her syrup and lifted myself up and over her as she lay there with her eyes shut tight.\n\nI moved into position and prepared to mount my wife for the ultimate ride. My long thick cock swung automatically into place with the engorged head seeking out her weeping hole as my ass tensed up for the first thrust of many.\n\nHeather put a hand on my chest. \"Wait,\" she urged, \"I want to see!\"\n\nShe reached over, grabbed a pillow and lifted her hips so she could shove it under her backside raising it up so she could see the show more clearly.\n\nOnce settled, she nodded expectantly to me. \"Alright,\" she breathed lustily, \"Now you can put that cock of yours inside my pussy.\"\n\nAnd give her my cock I did. Pushing it slowly between her expectant sex lips, Heather caught her breath as it slid into her sheath in one smooth motion before my aching ball sack bounced against her upturned butt.\n\nOnce firmly plugged, I settled on her taking most of my weight on my arms as I played with her hair and stroked her face. Our sex was as easy as a Summer's day. The slow in and out making us both shiver and smile as we took our time of it. We'd talk and kiss as we teased each other as we sailed in our own little boat of pleasure.\n\nShe came many times as we rocked to and fro together with little grunts and cries as they washed over her taut body. At thirty-eight, she still had that winsome lithe look as if she'd blow away in a slight breeze. I felt her rub her stockings against my thighs and knew from experience she was preparing herself for the big one. The one where she'd grab and hold me tight whispering love's sweet tune to me as she climaxed and I pounded hard so I could be there with her.\n\n\"Soon?\" I said, tickling her left ear as I breathed into it.\n\n\"Close,\" she nodded as she opened her eyes and reached up to hold my face in her hands, \"Now I can see as well as feel you fill me up.\"\n\nWe came together moments later both physically and emotionally as I felt the sudden rush of excitement explode from between my legs deep inside her well. Each sexual thrust and surge passed from me to the woman I loved for what seemed forever but which was never truly long enough. Heather clung to me through her spasms and I could hear her primitive grunts and groans echoing around the bedroom before fading away into soft sighs and the odd \"Holy shit.\"\n\nWe had time enough for love. Time enough for the two of us.\n\n***\n\nThe woman kissed my face all over as I lifted my weight slightly off her so that I could look down into her smiling eyes.\n\n\"Five times, right?\" she whispered with her lips against mine.\n\nFive times?\n\nOh. Yeah. Those five times. I remember those times.\n\n\"Make it four,\" I said, \"I'm not the man I used to be twenty years ago.\"\n\nHeather rolled me over until I was on my back and she was straddling my thighs as she laid her body on me and kissed my chest before heading South again to see if the monster was still awake. Her hair was spread out like an exotic red fan over us as she raised her head to look at me.\n\n\"It's not the man you used to be I'm after,\" she said quietly, \"I only want the man you are now.\"\n\n***\n\nEpilogue.\n\nFate is a most peculiar thing.\n\nThe green man was still flashing and the crossing was clear as Janet turned to us and grabbed Heather by the hand.\n\n\"Come on,\" she urged, \"Hurry up before the lights change!\"\n\nHeather took mine and dragged me into the middle of the road with people sat in their cars staring at us wondering what the hell was going on.\n\n\"Here, right here,\" said Janet as she pointed to where she wanted us to stand.\n\n\"Are you sure this is the right place?\" asked my wife as she shoved her hands in her pockets as the wind whistled around us.\n\nJanet took out her mobile phone and held it up sideways so she could take a photo of the pair of us standing there holding hands on the exact spot where we had first met all those years ago. The spot where she had fallen and I had come to her rescue.\n\n\"Say cheeseburger!\" she laughed as Heather and I stood there like we were a pair of awkward lovesick teenagers on our first date. The air was soon filled with the sound of honking horns and Janet turned around and spread her arms wide to the traffic, \"What?\" she shouted at them, \"Geez, give us a moment here,\" She turned back to us with a fixed smile on her face, \"Assholes!\" she said cheerily through gritted teeth as she took another photo for posterity.\n\nI glanced at Heather who was trying not to laugh as she pulled her bobble hat tighter over her head. She smiled as she wrapped her arms around my neck as her friend grabbed the pair of us and pulled us all back onto the sidewalk.\n\nI hugged her to me as Janet fiddled around with her mobile. \"Here we go,\" she said excitedly as she showed us the photo, \"For old times sake.\"\n\nHeather brushed away the tears as she pressed her fingers to her lips. The memory was still there. Still fresh. A memory of a precious moment that had lasted a lifetime. I took her hand and we both looked up as a soft rain began to fall.\n\nAs it had done on that fateful day long ago.\n\n***\n\n The End of the Blind Girl series.\n\nFinal notes from me: Well, that was a trip. Longer than originally intended but worth doing in the end. I very much hope you enjoyed the story of Mike and Heather. Thanks for reading."
    ],
    "authorname": "Ian56",
    "tags": [
        "romance",
        "love story",
        "explicit sex",
        "oral sex",
        "romantic"
    ],
    "category": "Romance",
    "url": "https://www.literotica.com/s/the-blind-girl-in-the-snow-pt-04"
}
{
    "title": "Surefoot 03: Field Trip Ch. 07",
    "pages": [
        "Planet Luntanu, Alpha Squad Campsite, 0810 Hours:\n\nAlpha Squad was dismantling the campsite, disposing of their trash and packing up the shelters and equipment for their storage back on the shuttle. Giles hefted one of the heating units, grunting as he quipped, \"I think we're taking back more than we brought with us.\"\n\n\"That is very true, Friend Giles,\" Kit confirmed, still looking forlornly at a world of flying insects he couldn't eat without severe gastric repercussions. \"We have many samples, and much data.\"\n\n\"No, I mean substantial bulk. Anyone bringing back any souvenirs?\"\n\n\"Yes,\" Eydiir replied, easily lifting one of the other units. \"I packed that piece of temple you broke off, for your court martial.\"\n\nSitting on a rock near the smouldering remains of their campfire, Sasha looked up from her PADD. \"Are you sure I can't help, guys?\"\n\nNeraxis and Jonas were busy folding up the last of the shelters, the Bolian shouting, \"Just focus on that! I want those replicator credits! Scrappy and I are gonna pool ours together and make us a mud bath on the secondary hull!\"\n\nJonas looked up at her. \"We are?\"\n\n\"Yeah, we agreed last night when you were asleep. We'll even get Chief Grev in on it, you know how much Tellarites love mud baths! Can you imagine the three of us naked together, wallowing about?\"\n\nJonas' expression told them that he did, all too well.\n\nSasha returned to her work, kicking herself for not finishing it off last night. Well, she corrected, technically it was already finished. Just not to her satisfaction. They had removed all the bad bits from it, anything that might put them in a negative light. Now what they had left was nice, safe. Boring.\n\nFalse.\n\nKit was right, that they had to be true to themselves.\n\nShe began making changes once again to the report.\n\nWhen she was done, she saved her work and rose, stretching her legs and feeling the need to empty her bladder; although they were leaving and no longer needed to secure their perimeter, they had packed up the portable toilet, so the bushes needed one more visit. When she was done, she dressed and rose, looking around once more- \"TaHqeq Sa'Hut!\"\n\nHer father stood there, wearing some loose-fitting civilian clothes, beside an unknown woman with thick black curly hair and a freckled face. \"And good morning to you, too. Barbara, I'm delighted for you to meet my daughter, Sasha. She's a talented girl, able to pee in the open and swear in Klingon just like her mother. Sasha, this is Professor Barbara Gianopoulis, head of the research team on Luntanu.\"\n\nRed-faced, Sasha approached, waving a hand at the stranger. \"Uh, pleasure to meet you, Professor. Sorry about, uh... everything you see and here from me.\"\n\nThe woman smiled accepted her hand. \"Pleasure to meet you, too. And there's nothing to apologise for. I've lost track of the number of fields I've peed in or ptakh administrators I've cursed out for not supplying essential equipment on time.\"\n\n\"Thank you, Ma'am.\" Sasha stepped back and looking at her father. \"Is there a problem, Sir? I wasn't expecting you.\"\n\n\"Problem? No, no, I wasn't here to check up on any of you, honest. It's just that Barbara had told me that the sunrises on Luntanu were spectacular.\" He nodded. \"She was right. Did you see it?\"\n\n\"No, Sir.\" She looked at both of them curiously: the first-name basis, the casual proximity. You'd think that they-\n\nShe saw bite marks on the woman's neck, barely hidden by her hair.\n\nOh...\n\nShe did her best to hide her reaction, but she should have known her father would have seen something there. He turned to his companion. \"Would you mind if I have a quick word with my daughter for a moment, Barbara?\"\n\n\"Not at all, Esek.\"\n\nHrelle approached Sasha, taking her by the elbow and guiding her to one side, asking her softly, \"Are you okay?\"\n\nShe nodded, flushing a little.\n\n\"You... know, don't you?\"\n\n\"It's... pretty obvious, Dad. How could you? You only just met her!\"\n\n\"How much time does one need?\" He looked concerned as he drew closer. \"This wasn't exactly planned, Sasha. It just happened.\"\n\n\"Oh really?\"\n\nHe frowned, drawing closer to her, his voice low, sympathetic. \"Yes, really. I am sorry if I've upset you, it was never my intention to do so. But I'm hoping you'll understand.\"\n\n\"Understand?\" Memories of her fight with Jared the night before returned, his taunts that her Dad was little better than an animal running on sexual instinct. She told him that her Dad loved her Mom. Now, to see him here, in the company of another woman, after- after-\n\nAfter what? she asked herself.\n\nShe knew they loved each other. But Mom died seven years ago. Did Sasha really expect him to stop loving, to stop living now? Is that what Mom would want for him? Is that how she would want Sasha to behave towards him?\n\nNo. She shook her head, feeling guilty now for her first reaction. \"You just surprised me, that's all. I'm okay.\"\n\nHe nodded, smiling. \"Thank you.\" He drew closer, pressing his muzzle against her forehead - but then sniffed and drew back. \"Seven Hells, you stink of sweat, animal dung... and what happened to your uniform?\"\n\n\"Long story.\"\n\nHe looked ready to question her further, before finally shaking his head. \"Well, I look forward to hearing all about it tonight at the party. The Professor and her party will be attending as well, you can meet up with her again and swap exotic profanity and interesting stories about where you two have peed.\"\n\n\"Looking forward to it- oh, wait!\" She drew in again and hugged him. \"Thank you! For Captain Fuzzybutt, and all the snacks!\"\n\nHe hugged her back. \"You're very welcome... now go, please, your funk could down a Klingon.\"\n\nShe showed him how many middle fingers she had on her right hand, before turning it into a wave goodbye at Gianopoulis. \"See you onboard, Professor- oh, Professor? You know that temple-like structure on the trail near the slopes? Um, hypothetically, if a very small piece of a wall was accidentally phasered off, would we be in a lot of trouble?\"\n\nHrelle's jaw dropped.\n\nGianopoulis looked back in bemusement, occasionally glancing at Hrelle as if to confirm that Sasha was being serious. \"Well... we try not to damage any sites as a general rule. Having said that, we already scanned and excavated that area, and if there had been any issues we would have asked Starfleet to put you guys elsewhere. And of course the jungle and elements have been working on the structure for thousands of years already, so... I wouldn't worry too much.\"\n\nShe smiled with relief. \"Thank you.\" Then she fled before her father could question her further.\n\nSasha returned to the campsite, where the others had witnessed the exchange, Giles asking, \"What was your Dad doing down here?\"\n\nShe picked up her PADD and Captain Fuzzybutt before replying. \"He, ah, spent the night with one of the archaeologists.\"\n\n\"Ooh, the Captain got some!\" Neraxis cooed, before dropping her smile as she looked at Sasha. \"Unless, of course, that's a terrible thing. In which case: Bad Captain! Bad!\"\n\n\"It's not terrible,\" Sasha assured them. \"She seems... nice, you know? And he seems to like her.\"\n\n\"This is not surprising, Respected Squad Leader,\" Kit informed her. \"Archaeologists, after all, are experts at dating.\"\n\nThe group looked at him, while his throat puffed and he made a wheezing sound of Qarari amusement at his own joke.\n\n\"That was-\" Giles started, but then changed his tone and admitted, \"That wasn't half bad, actually.\"\n\n\"Guys,\" Sasha announced, regaining their attention, and not believing she was saying this. \"I've made a decision. I'm turning in the full, uncensored report.\"\n\n\"Are you serious?\" Giles exclaimed. \"We'll look like idiots!\"\n\n\"We are idiots - sometimes. We make mistakes. But we also come up with good things, too. Yeah, I had us bring down all that cold weather gear, but Jonas showed off his expertise and fashioned some coolers and bug zappers. And yeah, Kit got sick eating bugs he shouldn't have, but then Eydiir identified that virus and alerted the other squads about it. And yeah, you broke a building, but then you discovered those carvings on the wall. And sure, Tusky attacked our camp and set our uniforms on fire, but we came up with an elegant low-tech means of keeping the animals away. And yes, I ate monkey crap, but- but-\"\n\nShe looked to the others for a bright side to that. None was forthcoming.\n\n\"Look,\" she continued regardless. \"I know we probably won't win, unless the others had done far worse, like maybe sacrificing one of their members to the Shriekers, but so what? It's been fun. And if you're really wanting those replicator credits, you can have all of mine, and I'll live on these rations for a while. They're really not that bad once you get used to them.\"\n\n\"They are appalling,\" Eydiir declared, setting down the crate she was holding. \"But I agree. We stand and face the Universe as we are, and woe betide any who would challenge that.\"\n\n\"Yeah, what she says,\" Giles agreed, smiling. \"Though maybe less Shakespearean. Let's give them who we are, warts and all.\"\n\n\"I have no warts, Respected Squad Leader,\" Kit confessed. \"But I will be proud to admit my faults, in what I have done and what I have failed to do, and I will support my friends in doing the same.\"\n\n\"Well, I guess my plans for a mud bath will have to wait,\" Neraxis groused, though not too convincingly.\n\nJonas grunted. \"I don't care if we don't win. I just don't want Mr Handsome Jerk to win. He doesn't deserve it for the way he treated you.\"\n\n\"Hear, hear!\" Eydiir declared. \"And remember, my offer of infecting him with an intense fungus is still there.\"\n\n\"As is my disgust at the offer... but thanks again. All of you.\" She smiled - and then snapped, \"Kit! You're gonna make yourself sick again!\"\n\nThe Qarari stood there, eyes wide with guilt, with a large four-winged insect half-hanging out of his mouth, and white goo seeping from it down his chin.\n\n\"I'm not sitting next to him on the ride home,\" Neraxis promised.\n\n*\n\nUSS Surefoot, Deck 1, Mess Hall/Lounge, 2000 Hours:\n\nIt had never been this crowded before, as far as Sasha recalled, with the scientists and support staff from the planet joining the crew and cadets for the buffet and general mingling, before the Squad Leaders presented their reports to the crowd.\n\nNow Sasha was beginning to get nerves, though she put it down at least partly to having to speak before others, rather than any specific doubts about changing the content of her report once again. It was too late, anyway; the Squad Leaders were required to hand in their PADDs to Commander T'Varik immediately upon arriving back on the Surefoot, to prevent them from using the superior facilities onboard to make improvements.\n\nThen she had spent the hours between arriving back and now obtaining a new uniform, and staying in the sonic shower for as long as it took to remove the dirt and stink from the planet. And she also spent the time thinking. She supposed she was worried about the outcome. She had no idea how T'Varik would react to the contents. What if the Vulcan decided as a result of all this that Sasha was an unfit Squad Leader, and replaced her with Giles, or even kicked her out of the AWE Program all together?\n\nNow at the party, she looked at the other Squad Leaders, to see if they were equally nervous. Of course not; Falok was as implacably Vulcan as ever, and Jared... well, when Jared wasn't flirting with some of the female cadets on Falok's squad, he was glowering in Sasha's direction, clearly still angry about the night before, though he seemed to have recovered from the punch she gave her. To the Seven Hells with him, she told herself. She was glad he hadn't been her first.\n\nFalok had given a good, dry, professional report to the crowd, as had Jared, each receiving polite applause. Then it was Sasha's turn, and she fought to control her pulse as she reached the podium and connected her PADD to the display behind her for the multimedia evidence from her report. She looked out at her Squad, who were giving her signs of support - as did her father, standing beside Professor Gianopoulis. His pride was like the light of a nova.\n\nShe hoped this didn't disappoint him. \"Good evening. I am Alpha Squad Leader Sasha Hrelle.\" Behind her, images of her crew appeared as she introduced each in turn. \"My squad consists of Pilot and Second in Command Giles Arrington, Medical Specialist Eydiir Daughter-of-Kaas, Science Specialist Kitirik Abyss Zuinthinem Emijiz, Engineering Specialist Jonas Ostrow, Security Specialist Neraxis Nemm...\" She paused, waiting for their reaction to the final image. \"And Morale Officer Captain Fuzzybutt.\"\n\nThe crowd laughed, mostly, with a few looking around to see if it was okay to laugh. And it continued in that vein for the rest of the report, as she illustrated the achievements of her team, and their faults, while also providing the requisite scientific data on the flora and fauna and the remains of the alien structures. T'Varik and Falok stayed implacably Vulcan, of course, and the only one making an active attempt to appear negative was Jared, wearing a perpetual sneer and making Sasha wonder if Eydiir had made good on her threat to infect his crotch with a fungus.\n\nShe received an enthusiastic response when she finished and returned to her friends, and T'Varik took the podium and waited for silence and attention before proceeding. \"Congratulations to all the cadets for their efforts in this exercise. You have provided informative and interesting reports, and there will be more detailed critiques sent to your individual stations.\n\nThere will also be letters of commendation on record for exceptional work for the following individuals: Engineering Specialist Yeager of Gamma Squad, for developing an integrated scanning technique to increase the range and accuracy of her squad's tricorders by 13%; Science Specialist Ingalls of Beta Squad, for his analysis of the geological formations with a focus on recent volcanic activity as the cause of the disappearance of the indigenous population; and Medical Specialist Daughter-of-Kaas of Alpha Squad, for her work identifying a potentially lethal pathogen within the local insect life, developing a treatment and alerting the other squads.\"\n\nThere was more applause, and slaps on the back for Eydiir, who tried her best to remain her usual stoic Capellan self and not look pleased... and only partly succeeded.\n\nAs the crowd settled again, T'Varik continued. \"As for the competition for best report: the replicator credits are awarded to Cadet Falok and Gamma Squad.\"\n\nSasha looked over at the young Vulcan, who bowed slightly as his squad and everyone else applauded and cheered. Sasha joined them, genuinely pleased for their success, before reaching for an offered glass of juice, her throat dry.\n\nT'Varik departed the podium, striding up to her. \"Cadet Hrelle, I trust you understand that, based on the parameters set at the start of this exercise, that your mistakes outweighed your achievements, and so I could not award your squad the prize.\"\n\n\"Having heard Falok's report, Commander, I would agree that his was the most deserving,\" Sasha assured her. \"And it doesn't matter. We didn't join Starfleet to win prizes, but to gain knowledge and experience.\"\n\n\"Indeed. I might also recommend that you omit your Morale Officer from any future reports.\"\n\n\"Understood. Captain Fuzzybutt doesn't like the attention, anyway.\"\n\nT'Varik raised an eyebrow, but then continued. \"The PADDs the Squad Leaders used also contained the draft versions of their reports, which I also perused. The other squads edited out instances of mistakes they had made during the course of the exercise, to appear less self-critical. You, however, ending up going in the opposite direction. May I ask why you chose this course?\"\n\nSasha glanced down into the contents of her drink, as if seeking the answers there. \"Honesty and integrity are meant to be Starfleet virtues; that includes those times when it puts us in a bad light. And we are meant to be learning out here. How can you teach us if you don't know where we've gone wrong? As the Terran playwright Oscar Wilde once wrote, 'Experience is the name men give to their mistakes'.\"\n\nKit nodded beside her. \"We have proven to be very experienced on this mission.\"\n\nThe Vulcan looked to each of them in turn, before focusing on Sasha once more. \"If it is any consolation to you, keep in mind that, though you may have lost the competition... you have gained my respect.\"\n\nSasha filled up at the words. \"Thank you, Commander.\"\n\nT'Varik nodded and departed. But then Sasha caught up with her. \"Commander... may I have a private word with you, please?\"\n\nThe Vulcan nodded, leading her to an unoccupied corner of the room, where she invited, \"You may proceed.\"\n\nSasha took in a breath; in for a penny... \"Commander, I wanted you to know that in the past couple of weeks, I had been in a secret relationship with Cadet Miro. Nothing has happened between us beyond kissing - more or less - but we had planned to go further when we were off the ship and on the planet. I know this was wrong of us.\"\n\n\"Agreed.\" \n\n\"But when I did meet with him, I stopped, and nothing further happened. I promise, Commander, I was only with him last night for a minute or two-\"\n\n\"2.35 minutes,\" T'Varik corrected.\n\n\"Commander?\"\n\n\"It was 2.35 minutes, including the time you spent in his shelter, and then outside afterwards when you assaulted him.\" At the girl's expression she elaborated. \"I have been monitoring all of the cadet activities on the planet.\" She folded her hands behind her back. \"Cadet, leaving aside the violation of Regulation 121, I should not have to remind you that assaulting a fellow cadet is a serious offence.\"\n\n\"No, Ma'am. And I am prepared to accept any punishment you deem appropriate.\"\n\n\"Fortunately for you, Cadet Miro had a different story to tell: he denied being in any relationship with you, that you visited his shelter uninvited, attempted to seduce him, and then struck him when he refused you.\"\n\n\"What?\" She couldn't believe he would have said that! \"That lying bastard!\" She bit her lip. \"Sorry, Ma'am.\"\n\n\"I cannot confirm or deny the legitimacy of his parentage, but the adjective is accurate, as I proved when I presented him with the transcripts of his earlier combadge conversations with you; that is why he now has a permanent note on his record for lying to a superior officer.\n\nAs for your own violation of the regulation, you are equally fortunate in that earlier, I suspended Academy Regulations 118-121 while you and the other cadets serve onboard this ship. This suspension is of course subject to the cadets' maturity to handle it, however. You may resume your relationship with Mr Miro openly now, if you desire.\"\n\n\"Thank you, Commander, but I definitely do not desire. He... said something about my father.\"\n\nThe Vulcan nodded. \"Given what I know about you, it is not surprising that such an action would be your... dealbreaker. Although I would still caution against acting in an aggressive manner, despite the provocation. As you go through life, you will no doubt encounter many people whom you will wish to pummel, for various reasons. Do not make it your default response.\"\n\n\"Yes, Ma'am.\" Sasha flushed, looking over at Jared and blushing. \"I feel like an idiot, being interested in him. We've nothing in common except being here. Don't know what was wrong with me.\"\n\nT'Varik raised an eyebrow. \"I suspect it was because, as the human expression goes, 'Your brains were in your pants'.\" At the girl's reaction, she continued. \"Sasha, I am your Academy Liaison and your instructor. But, may I be permitted to speak with you as another woman... and hopefully also a friend?\"\n\nSasha, clearly surprised by the request, nodded and replied, \"Yes, please.\"",
        "\"I recognise that those at your age are often compelled to fully experience all that adulthood has to offer, especially when the biological imperative seems overwhelming. But perhaps you might consider this: you will remain an adult for the rest of your life. You do not need to rush into such experiences, simply because you can. Especially when the experiences involve those like Mr Miro, who, frankly, is not worthy of you.\"\n\nSasha looked up at the woman, moved by her words. \"Thank you.\"\n\n\"And, should you ever need further advice in this capacity, I will always be available.\"\n\nSasha smiled. \"Thank you again, T'Varik.\"\n\n\"Sasha?\"\n\nBoth women turned to see Hrelle and Professor Gianopoulis approach, the Captain beaming as he hugged her. \"Marvellous report! Very entertaining!\"\n\n\"Thanks. But it wasn't very professional.\"\n\n\"I've sat through too many lectures that were as dry and dusty as the digs they detailed,\" Gianopoulis informed her. \"Yours I'll remember, and for all the good reasons.\"\n\nFor a moment, Sasha thought that the woman was being ingratiating in order to curry favour with her and get closer to her father - but then she kicked herself for such thoughts. She also wondered if her father and the Professor would be spending the night together onboard, and then accepted it wasn't her business. She smiled back at the older woman. \"Thank you, Professor. I appreciate that.\" To her father she asked, \"May I return to my squad, Sir? We've just learned that we can have alcohol now, and we want to get to the replicators before the other squads find out.\"\n\n\"I don't blame you. Go on.\" But as she turned to depart, he added, \"Sash?\"\n\nShe looked back at him.\n\n\"Your Mom would be very proud of you.\"\n\nSasha grinned and left.\n\nHrelle turned to T'Varik. \"Excellent work on the exercise, Commander, you have my compliments. But you've been awake for over 24 hours now. You must be exhausted. Get some sleep, you don't have to stay for this.\"\n\n\"It has in fact been 39.86 hours, to be precise, Captain, including the preparation for the exercise beforehand. But your point is well taken. Good evening, Sir, Professor.\"\n\nT'Varik left them and started for the door, when she saw Kami, standing apart, an attendant at the party without engaging in anyone unless approached. The Vulcan understood the reaction, having behaved in an identical fashion when required to attend an interminable number of official functions, but did not expect this response from the usually-gregarious Caitian, and approached. \"Is there a problem, Counselor?\"\n\nThe other woman was cradling a glass of dark purple wine, and dressed in her formal Starfleet uniform, her tail hanging limply behind her. \"No, Commander. No problem at all.\"\n\n\"I observe that this is not your usual position within a party. It is rather distant from the figurative heart of it.\"\n\nKami shrugged. \"But it's an ideal place to observe others, and anticipate what I might be talking about with them in counseling sessions later.\" She nodded to various areas. \"I see Sasha and Jared have broken up while they were on the planet; I'm sure there's a good story there. Oh, and Mr Gorman is politely listening to another one of Lt. Abed's boring Starfleet Marine stories. All around, I can see jealousies and irritations and-\"\n\n\"And presumably also the relationship between Captain Hrelle and Professor Gianopoulis?\" T'Varik prompted.\n\nKami stared at the other woman. \"Of course.\" She drank again. \"Another reason to stay back. He doesn't need my scent to distract him.\"\n\n\"Or his scent to distract you?\"\n\nA sly smile lifted the corners of her mouth. \"Who's the Counselor here?\"\n\n\"If I am intruding in your personal affairs, I apologise-\"\n\nKami shook her head. \"You may not admit it, but we're friends, so you're free to say whatever you want to me. And yes, I am attracted to him. But as tempting as it would be to make it otherwise, he needs me now more as a Counselor than as a partner. And the relationship he has now with the Professor will be good for both of them.\"\n\n\"But it must still be difficult for you to see them together.\"\n\n\"I can manage it.\" The Counselor finished her drink, staring into the remains of her glass. \"I know I don't appear it compared to yourself, but I can be quite logical in my own right.\"\n\n\"Yes, you can. And contrary to what you have said, I can admit that we are friends. I am in fact honoured to do so.\" She folded her hands behind her back. \"Would you care to have a sleepover with me?\"\n\nKami looked up at her. \"Excuse me? A sleepover?\"\n\n\"I believe that is the appropriate term. Following periods of extended wakefulness such as I have just undergone, I tend to experience certain... emotional disturbances, disturbances that solo meditation is ill-equipped to manage within an allotted time frame. You, however, are qualified in collaborative meditative techniques, and may assist me in, as the human expression goes, 'winding down'.\" She paused and added, \"I also believe Caitian females enjoy sleeping with each other, for grooming and general companionship.\"\n\n\"Yes, we do. And it's been a while since I've enjoyed something like that.\"\n\n\"I also suspect that you would appreciate an excuse to be elsewhere tonight.\"\n\nThe Caitian grunted. \"I can't argue with that. She set aside her emptied glass. \"Let's go.\"\n\nThey departed - though not before the Vulcan noticed Kami taking a final look in the Captain's direction...\n\nTHE STORIES OF THE SUREFOOT WILL CONTINUE IN... \n\nTHE NIST SANCTION"
    ],
    "authorname": "Surefoot",
    "tags": [
        "star trek",
        "science fiction",
        "space",
        "federation",
        "caitian",
        "starfleet",
        "starfleet academy",
        "starship",
        "alien11111",
        "fanfiction"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/surefoot-field-trip-ch-07"
}
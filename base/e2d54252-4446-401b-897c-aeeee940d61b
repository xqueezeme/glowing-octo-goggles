{
    "title": "My Take on Writing a Female Orgasm",
    "pages": [
        "Under no circumstances is this a \"How have an orgasm, so if that is what your looking for then STOP, walk back the way you came in, and click a story I wrote. This is just a tool you can use to help you write your version of a female orgasm. Is it the only tool out there? Good grief, NO! Just my opinion on a subject I have written a few times and experienced too. \n\nMany authors I have talked to are men. They can only imagine what a woman is feeling when she climaxes and then only if she shares it with him. A woman can only share what they are feeling if she can find the words that describe it. There are various types of orgasms. There are the ones that are quick and fast. There are short ones that last for a moment and are highly pleasurable, and then there are the mind-blowing, body-thrashing, pussy-numbing climaxes that make me feel as if I'm going to pass out. \n\nQuick and fast climaxes are great. They tend to be raw and hurried, but very nice. In writing one of these I try to see what has led up to this point. Were my characters fighting? Were they in a dangerous situation just minutes before and now the adrenaline is pumping through their veins as well as their sexes? \n\nThe orgasms I write for those scenes are usually full of raw words. Lava. Heat. Crash. Slam. Coat. I try to imagine colors also. Reds. Oranges. Golds. Yellows. Black. Silvers. They are all important and all can be used as the orgasm rips through your character. \n\n Carol screamed as Mike's cock made one last plunge into her slick sex. The cliff fell away and her body slammed against the shores as her climax tore through her. Her eyes rolled, her back arched, and her muscles clenched his shaft. Rolling waves of heat coated her pussy. It rolled down to cover her lover's cock and as the white, hot nectar flowed thick from her sex, Carol knew she was his. He owned her and with every crashing wave that followed she continued to ride the tide that spontaneously forced his come to shoot out of him. \n\nThe second wave of Carol's climax brought red sheets of silk and she bit her lower lip, bruising the tender flesh. \"Oh my God \" she cried. Her fingers curled into the blanket and she felt as if she were hitting the rocky shores of a great ocean. Her body convulsed as she came until finally her breathing held and her body stiffened. \"Fuck \" she yelled and stilled.\n\nIn that example you can see the explosion, or at least I hope you can. It is a fast paced orgasm. It seers the character. She feels so much heat that her body is almost on fire. The colors help. They relate to how the heat of the moment is all consuming and bright. Words are like paint, you the writer, has to paint the picture with the color of black ink. You have to give your work dimension. If you don't, then how does the reader see what you want them to see? \n\nAnother orgasm is the virgin orgasm. Now realistically not many virgins will experience an orgasm, but a writer wants their character to have them. They can be written. They just have to be written with class and style. I'm not saying this is the only way, but to me a virgin having an orgasm the first time she has sex should be classy, even if it may not be realistic. \n\nI've written virgin sex. I have been true to the pain of it, the nervousness, the insecurity of not knowing what is happening, but knowing something wonderful waits on the other side. Words that help here are calming and romantic ones. Silk. Lace. Satin. Caress. Velvet. Some colors that can work are white, silver, purple, pink. Textures play a big part as well. The word juice gets used a lot, even I am at fault and tend to fall back to that word when I'm at a loss. A writer can try: syrup, honey, nectar, liquid silk, liquid satin. Again it is really the writer's preference to the scene before. In the following example see if you can feel the nervousness and then the eventual promising climax. \n\n Daniel pressed into his Bride. His eyes rolled as he felt his cock slowly become one with her. He pushed gently, easing his sex deeper into her moist pussy. He felt the barrier and took a deep breath. He opened his eyes and focused on the beautiful creature beneath him. Her eyes were closed, her face a mask of both heated bliss and uneasiness. \"Ahh. . .Mary,\" Daniel whispered and slid his cock in the remaining inches. He felt the barrier break and his sigh of contentment was drowned out by the sorrow he felt in his heart as his soul-mate cried out in pain. \n\nMary's body tightened. The instinct to push him away from her was intense. The pain had been shocking to her. It ripped and burned her. She cried out as hot tears fell from her eyes. Her breathing was hard, but she knew that the pain would cease; she just had to wait. She flexed her fingers and slowly opened her eyes; the blue orbs glistened. She licked her lips. Her chest rose as she took another deep breath and shook her head yes. She hissed when her Husband of only a few hours pulled his hard cock partially out of her. It was several minutes before Mary completely relaxed and then after several more caressing strokes her body welcomed him. Her mind no longer focused on what had occurred, but was occurring.\n\nAs the tempo of Daniel's loving increased Mary's fingers moved over her warmed skin. She could feel the build up of something special and she lifted her hips to claim it. It was there, just within reach and when Daniel leaned down, his cock went deeper. He captured her nipple with his teeth. Mary reached the point of no return. \"Daniel \" she cried as her body seemed to float and fall. . .only to float again. The sheets of liquid silk cascaded down from her pussy and blanketed her lover with its warm honey. Her nails dug into his arms and Mary whimpered for more. Her come surrounded Daniel. It traveled down to her thighs, covering them like ribbons of fine lace. She begged and pleaded for more as the slivers of passion continued to pierce her thoughts and bring her to the edge and back again.\n\nAnother tricky orgasm for some folks to write is the climax brought on by masturbation. This is different for every woman, so by all means don't look at your character and think this is the kind of self-pleasured climax your character is having. Again it all boils down to what brought her to the point where she needed to seek her release without a partner. Is she single? Significant other out of town? Perhaps she is reliving a memory, or living the fantasy she's read on Literotica \n\nAlso, toys are a big thing with orgasm. You just can't write that a toy was used and she came. You need to focus on everything about that toy. The temperature, texture, flexibility, even coloring of the toy can heighten a person's writing and reading. Which would you rather use in your writing. . .long, thick, peach-colored cock, or the rubber dildo? The picture is in the words and it is your job to portray the picture. Simple words like toy, cock, dildo, vibe, are all great words and can be overused if you're not careful, but can present an erotic image if paired with the right words. \n\n Mandy's fingers ran over the glass phallus toy. The owner of the Adult Store had allowed her to handle the beautiful piece of art while he took care of a customer. Mandy looked around and saw she was alone, the owner and the customer were in the far corner discussing clit massagers. Mandy's attention was drawn back to the thick glass in her hands and she slowly unbuttoned her blouse and walked to the opposite side of the room. Her fingers moved into her blouse to tease her nipples. As she held the ruby, red toy in her hand, she lifted her skirt. Mandy wasted no time in pushing the head of the cold cock between her panties and her cunt. She began to thrust the exquisite device into her slick pussy and fuck herself hard and fast. \n\nShe leaned against the corner wall and bit her tongue to keep from crying out as she drove herself higher and higher. Her eyes remained open as the head of her pleasure toy slid in and out of her pussy. She felt her excitement grow as she heard the voices of the owner and the customer coming closer. She increased her rhythm and as the embers burning inside her reached their highest point Mandy dropped to her knees and came. Flames licked at her soul and the lava poured down her veins. She covered the smooth, hand-blown rod with her cream, soaked her fingers with her nectar and saw it drip onto the floor as her body rocked back and forth. \n\nInside she was being consumed as the walls of fire burned deep inside her. Her eyes rolled back and she tried to breath as well as stay quiet. The need to scream was overwhelming and when the rod made one last thrust into her cunt, Mandy lost the battle and shouted, \"Fuck \" Her pussy lips became numb from the fucking she continued to give herself. The color of the sunset erupted behind her now clenched lids. Oranges blended with reds, gold slammed into sliver, and black fucked white. Sheets of the fiery liquid coated her fleshy walls as Mandy became one with her toy.\n\nOrgasms are a work of art, just like a painting one wrong move and you either lose a Masterpiece of you change the tempo and you begin again. In real life, I've lost count as to how many \"almost there\" orgasms I've had. It can be anything that kills an orgasm in real life. That knock on the door and the whispered, \"Mom, are you okay?\" or the withdrawal of his cock and when he moves to slam it back into you it hits the edge of your opening and \"oops\" missed the hole. Perhaps you're interrupted by the annoying squeak of the bed, the unexpected doorbell, or the damn phone that rings just as you are about to hit that high and not look back. \"Ahhh, real life, what a pleasure.\" This is writing fantasy, so no interruptions. Your female character is about to have that mind-numbing, heart-stopping, fist-clenching orgasm I mentioned earlier. \n\nWhat goes into something like that? It is up to you. What goes into my character's multiple experience? Words. . . words. . . and more words. I've been called wordy, long-winded, descriptive, but I also don't focus on just the nipple and the pussy. The entire body is involved in an orgasm and that is what I write. Every part is alive with passion. Every part is important and should not be ignored. \n\nLook at your character and decide why this orgasm is THE ORGASM Then find those words. You can use any of the ones I've used in the past examples. You can use different ones. You can use words that many find offensive in real life. Just write what you are seeing in your mind and then find an editor if you aren't good at editing. . .I try to do that all the time \n\nSo here is my final example. I hope you feel it. \n\n I felt the concrete bite into my skin as he fucked me. He'd followed me all day. It was my fantasy. He was supposed to take me when he was ready. I was supposed to fight him off, and that thought had kept me on edge throughout the entire afternoon. My lover was out there I knew he was. Now as he drove his cock into my sweet pussy I could feel my orgasm building. We had battled. I had fought him, though I knew deep down I would lose. We had our word. It never fell from my lips as he tore the blouse off my body and lifted my skirt. \n\nMy nipples scrapped the wall of the boutique and I knew my moans were echoing down the alley way. The scrap of his cock against my cunt brought me closer to the volcanic explosion that was threatening to consume me. \"Bitch \" he growled. \"Fucking whore \" he muttered. \n\nI pushed back and my nails dug into the cold, slab of gray rock. His mouth came down and bit my shoulder. I screamed and came for him. I exploded over his cock and showered his dick with my hot fluids. My muscles clenched his shaft and I pushed deeper onto his massive tool. His balls slammed against my ass and I felt myself shake with lust. \"Ohh. . .fuck \" My hand moved to my clit and as he fucked me I pulled the strip of slippery flesh. \n\nCascading falls of melted honey flowed down the velvet sides of my pussy. Every joint in my body stiffened. I couldn't breathe, think, or speak. For a moment I couldn't see. I just was. . .I just existed in the black abyss that was void of all feeling and color. Then as if someone flicked a switch, a blinding shot slammed into me and my eyes shot open. \"OH MY GOD \" I screamed as his shot of seed filled my cunt. \"OH FUCK \" I growled as the rapid waves of come slithered down my body, soaking my lover, dripped down his shaft, enveloping his balls, and slid over my creamy white thighs.\n\nHe kept impaling me. Another river of fire shot from his cock and collided with my nectar. The juices of our sex mingled and while they did the temperature only added to my frenzied fuck. I came over and over as I reached the mountain and fell back down. He lifted me up, carried me higher, and I crashed again. Each climax was unique and when the final one was pulled out of me I cried. My tears flowed down my face, my head pounded in pain. My lungs hurt. My throat was dry. My lips were sore from the constant biting. The joints in my ankles, knees, elbows ached. Even my fingers tingled.\n\n*\n\nAm I right in what I've told you? I won't ever claim to be a professional writer. I'm not. I'm just someone that loves to write. If what I've written helps you to become better at writing something that can be difficult, then great. If it didn't help, then I do hope you find what your looking for. I'm not the only fish in the sea and there are so many wonderful \"How to\" writers out there. I'm just glad you stopped to read my suggestions. Thanks for that. ~ Red. "
    ],
    "authorname": "RedHairedandFriendly",
    "tags": [
        "orgasm",
        "masterbation",
        "writing advice",
        "author how-to"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/my-take-on-writing-a-female-orgasm"
}
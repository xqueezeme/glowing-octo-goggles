{
    "title": "Save World Get Girl",
    "pages": [
        "Author's Note:\n\nPlayer one: Ramona Roth. Nineteen, blue hair, pierced eyebrow, former president of the student council, virgin. The mission? Rekindle a friendship during a power outage by way of Mario Kart, heart-to-hearts, and extreme trash talking.\n\nDue to a somewhat nerdy author indulging herself, this offering for Geek Pride is full of video game and pop culture references, at least one virgin, rebellious university students in a small town, and car windows fogged with steamy sexual tension. I make no apologies for its length.\n\nThis story is part of the When The Lights Go Out universe. These stories do not need to be read in any particular order; they all revolve around the same event and have some connections, but are stand alone pieces. You can find a list of included stories in my bio.\n\n**\n\nWar is hell, they say, but I say they're wrong.\n\nHell is insanity, and insanity is doing the same thing over and over again and expecting different results.\n\nHell is false hopes and flagrant disappointment. \n\nHell is knowing that the squabbling of Ilyra, the princess from the far-off planet of Nianus, and Jostok, the snarky-but-pleasantly-ripped humanoid alien soldier from Quighnan, would attract the attention of Izzon's monstrous space beast. \n\nIt's knowing that the beast would destroy the vent your plucky band of misfits was crawling through.\n\nIt's knowing that you'd all tumble into the cavernous belly of the spaceship with only the last-second triggering of a force-field from your omni-cuff to prevent you from turning to gizzard soup on the space-grey floor.\n\nI watched Jostok realize that the forcefield hadn't prevented the princess from being crushed beneath the weight of the metal that tumbled from above. I watched him separate her from the tangled pile of bodies and bionic limbs, cradling her barely conscious form against one beefy, armour-clad bicep.\n\nI watched her brilliant violet eyes flutter open, and saw the little half-smile on her face as he called her by her name, and heard the weakness in her voice as she reminded him that it was Princess Ilyra to him. I heard Jostok chuckle wetly and assure her she was going to make it. \n\nAfter all, she was the princess. This was not how princesses died.\n\nWhich was true, because she didn't die like that.\n\nIzzon's beast hurled itself to the ground in front of us, its weight making the spaceship itself shudder violently. A beam of light shot forth from its gaping maw, wrenching Ilyra from Jostok's arms. He reached for her, but before his bionic arm was even fully extended, the beast had pulled her into the air, clutched her between its massive claws, and snapped her in half like she was a fucking Kit Kat bar.\n\nSo, she died like that instead.\n\nThere was a beat; a pause as horror dawned across the party. A splash of blood splattered on the floor followed by the delicate circlet Ilyra always wore.\n\n\"No,\" breathed Jostok.\n\nA metallic cackle from above filled the room.\n\n\"So much for your princess,\" Izzon said as he descended on a floating platform. \n\nHe landed just in front of the beast. Two long strides brought him to the circlet, and he plucked it from the pool of blood before making a mockery of Ilyra's memory and placing the fragile band of metal on his horned forehead.\n\n\"You killed her,\" Jostok said, his voice wavering.\n\n\"Well, duh,\" Izzon said, chuckling. \"What, you think this is your fairytale or something, Quighnan? You kill the horrible, evil, sad little man who was just trying to get back what was rightfully his? You think you save the world, you get the girl, you get the glory?\"\n\nHis smile faded, and he straightened the circlet before reaching for his omni-cuff.\n\n\"Well, Quighnan, I have news for you. You failed. The world is mine, the girl is dead, and you\u2014\"\n\n\"Shut up, you piece of Cul excrement!\" Jostok roared.\n\n\"Or what?\" Izzon taunted.\n\n\"Or this,\" I muttered.\n\nSurprise flashed across Izzon's face as Jostok smashed his omni-cuff, using the last of its power to create his trademark rocket launcher. Hefting it over his shoulder, he screamed as he fired it. Izzon's beast stepped forward, snatching its master from the ground seconds before the ball of certain death hit him, and it was time for me to take over.\n\nThe battle was hell. It was a place I'd been a million times before, and I let the world around me fade as I focused on Izzon and Izzon alone. His beast didn't like that, of course, but the beast wasn't my concern. There were others to fight the beast; only I could fight Izzon. \n\nSweat beaded on my forehead and dryness scratched at my eyes. I refused to look away, refused to be distracted for even a millisecond from my task. Izzon darted around the battlefield, firing laser after laser in my direction, but I knew how to dodge them. I knew how to use them against him; I knew how to lure the beast to just the right spot for Izzon to maim it himself.\n\nAnd I knew what would happen next.\n\nThe world shook, a rumbling that vibrated through my bones. Izzon's platform shot up, and I tracked it, ignoring the shouts and cries of the battle raging around me. High above, I saw the flash of light, and I hurled myself out of the way moments before a ball of plasma crashed down and punched a hole through the entire ship.\n\nA rush of air sucked through the floor, and I clung to the strategically placed pole for dear life, still refusing to take my eyes off Izzon's platform. I waited, watched, my heart racing as he descended, and descended, and...\n\n\"Now,\" I said through clenched teeth, and I jumped.\n\nWind and suction twirled around me as I fought against the force with everything in me. It was a Hail Mary, a last-ditch effort, a moment of pure insanity as I mashed at the omni-cuff wildly. I mashed, and mashed, and mashed, and\u2014\n\nI made it.\n\nI got to the platform.\n\n\"Oh my fuck,\" I breathed. \"Oh fuck, oh frak, oh... fruck.\"\n\nI finally did it.\n\nIzzon stood before me, his wretched face twisted in anger. I pointed my weapon at him, just as I dreamed I would a thousand times before, and without so much as a second thought, I began to fire. One shot hit and his body jostled; another and red splattered around me; one more and\u2014\n\nAnd all went dark.\n\nSudden silence replaced the sounds of battle as blackness overtook me. For half a moment, I thought I had died, like for-real died. Then, my eyes adjusted, and across from me I saw the form of a woman with pale skin, wide eyes, and bright blue hair in the depths of a black mirror.\n\n\"No,\" I whispered.\n\nThe woman mimicked me.\n\n\"No,\" I said again, a low groan as realization dawned on me.\n\nThe woman's face crumpled. A bolt of lightning flashed through the basement window, and as thunder roared, I screamed.\n\n\"You've got to be frucking kidding me!\" I shrieked, and I'm not at all ashamed to admit that I burst into tears.\n\n\"Ramona!\" my mom shouted distantly.\n\nI ignored her cry; tears were streaming down my cheeks as frantic footsteps thudded on the stairs. Despondently, I slid off the couch and crumpled to the floor, clutching my controller to my chest as I sobbed.\n\n\"Ramona!\" Mom gasped again, the faint glow of her cell phone flashlight spilling across the basement. \"Are you hurt? Ramona, talk to me, w-what happened, are you\u2014\"\n\n\"The power,\" I whimpered as she reached me and hesitantly touched my shoulder. \"The power went out, and I was so close.\"\n\n\"Close to... what?\"\n\n\"Beating Izzon,\" I sniffed.\n\nSilent tension filled the basement.\n\n\"In a game,\" she said flatly.\n\n\"Well, yeah, but\u2014\"\n\n\"You screamed bloody murder in the middle of a huge thunderstorm because the power went out during a game.\"\n\nIt was no use trying to explain to her that I'd been stuck on the boss fight in The Circlet of Nianus for days. I stared sullenly across the basement at the darkened TV as Mom launched into another one of her ranting lectures that had become routine since I'd returned home for the summer after my first year of university.\n\n\"This is not proper behaviour for a nineteen-year-old woman,\" she said, probably. I would've had to have been listening to know for sure, which I wasn't, but all her lectures were pretty much the same. \"Christ, Ramona, it's like I don't even know who you are anymore. What happened to the sweet girl who left for university last August?\"\n\nThen, if that lecture was anything like the other ones\u2014which it likely was, but I still wasn't listening\u2014she would have started tearing up.\n\n\"I don't know what I did to deserve you acting like this, Ra-Ra,\" she probably said in a watery voice. \"What happened to my goody-two-shoes straight-laced brown-noser who would never dream of putting a toe out of line and who I, as the head of the Minwack Falls Homeowners Association, could truly be proud of since she was as cookie-cutter and put-together as the yards and fences I work so hard to keep in line at all times?\"\n\nWell, she probably didn't say that last part. At least, not out loud. But the implication was there. When I tuned back in to the conversation, she was shaking her head as she looked dramatically in the other direction. \n\n\"Honestly, Ra-Ra, maybe we made a mistake,\" she was saying, for real that time. \"Sending you to that school... I worried that you weren't ready and now\u2014\"\n\n\"I was perfectly ready to go to university,\" I said dully. \"And I'm an adult, so you didn't send me anywhere. I chose to go. And my name is Ramona.\"\n\n\"Adults don't throw tantrums because of a silly game.\"\n\n\"It's not silly,\" I said through gritted teeth. \"This is what I want to do with my life.\"\n\n\"Play games.\"\n\n\"Make games.\"\n\n\"Hmmph,\" she said. \"Be that as it may, I highly doubt you'll find a summer job making games. I charged the laptop battery up earlier today, so if the power stays out, we can still work on your resume tonight.\"\n\nI sighed. \"I have a resume. I already asked if they were hiring at The Sword and Dice and they said they'd get back to me.\"\n\n\"I doubt the comic book store is hiring,\" she said, unimpressed, before she started towards the stairs. \"I'm surprised Jordan Cooper's managed to keep it open as long as he has. I'll go down to The Enchanted Florist tomorrow and speak with Owen. That girl he has working there was incredibly rude to me the other day and refused to call him so I could make a complaint about her.\"\n\n\"Okay, Karen,\" I muttered under my breath.\n\nMom turned. \"What was that?\"\n\n\"Nothing.\"\n\nShe clearly didn't believe me and shot a very Karen-esque look in my direction. \"Well, if he's willing to hire her, I bet he's one of the few people in town who would be willing to overlook your new... style and possibly offer you a job.\"\n\nAnd there it was; yet another dig at my hair, and my new eyebrow piercing, and the fact that I wasn't dressed like her President of the Student Council Princess anymore.\n\nI wish I could say it had been a gradual transformation, that I hadn't been the stereotypical example of the good-girl going wild as soon as she was on her own for the first time. However, years of living with Liz Roth, head of the Minwack Falls Homeowners Association, vice-president of the Minwack Falls High School Parent-Teacher Association, and volunteer board member for the Minwack Falls Good Neighbour Society, had instilled an almost-detrimental instinct to be honest in me. \n\nI was absolutely the model of a rebellious girl experiencing life away from an overbearing mother and semi-absent father. \n\nI'd left for university as a geeky girl with suitcases full of modest blouses and nice-but-not-too-tight jeans. At the end of the semester, I returned home with suitcases full of pop culture t-shirts, dark jeans that were ripped in all the right places, and Chuck Taylors that I'd kept on my feet day in and day out so I could get that worn-in look as fast as possible. I was still geeky and still a girl, but now that girl had bright blue hair, an eyebrow ring, and an exasperatedly cynical attitude.\n\nI loved who I had become. I loved being Ramona, the girl with wild hair and full of laughter. I loved geeking out with my friends over video games and sci-fi movies and superheroes. I loved being able to show people that girl instead of the girl I had to be under my mother's roof.\n\nBack home, though, that girl wasn't welcome. That girl was an embarrassment to the head of the HOA. Worse, I was in for another three full months of putting up with my mom's pressure to dye my hair back to a respectable colour and stop wearing studded belts and ripped jeans.\n\n\"...teach you that your choices have consequences,\" Mom was saying, and I'd been so distracted I hadn't even bothered imagining what she might have said. \"If The Enchanted Florist won't hire you, you'll need to get your hair fixed.\"\n\n\"My hair isn't broken.\"\n\n\"I'm not letting you sit down here playing video games all summer. You need to get a job.\"\n\n\"Trust me, I'd like nothing more,\" I said. \"I could use the break.\"\n\nBefore Mom could respond\u2014and trust me, her inner Karen was desperate to give me a piece of its mind\u2014we were interrupted by the sound of the door opening above us. She took a deep breath and let it out slowly.\n\n\"Your father's home,\" she said unnecessarily. \"Finish tidying up here and come set the table.\"\n\nI waited until she had started back up the basement stairs to let out the breath I'd been holding, leaning miserably against the couch as the darkness enveloped me again. \n\nIt was going to be a long frucking summer.\n\n**\n\nI was saved from having to work on my resume with my mom peering over my shoulder by her innate need to be involved in every disaster.\n\nDinner was blissfully quiet. Dad didn't say much, as per usual, and Mom's constant chatter manifested as mumbled frustrations while she scrolled through the town Facebook page on her phone, the mushy broccoli and dry chicken on her plate abandoned as she took control of the situation via social media.\n\nAs quickly as I could, I shovelled bite after bite of mediocre, overcooked blandness into my mouth. Like most of my classmates in first year, I'd gained the ubiquitous Freshman Fifteen, but I hadn't minded in the slightest. I'd been relatively thin most of my life, and putting on some weight had finally made me look less like a twelve-year-old boy and more like an actual, honest-to-God woman.\n\nUnfortunately, a full summer of my mom's cooking meant that I'd probably slim down to nothingness again unless I started stopping by the Hokey Pokey Ice Cream Parlour twice a day. Which wasn't a terrible idea, actually; their ice cream was all homemade and it was phenomenal. \n\nExcept that would take money, and while I was rich in Rupees and Bells and Caps, the owners of the Hokey Pokey only accepted boring old dollars.\n\nActually, maybe the Hokey Pokey was hiring. My blue hair would be considered whimsical and fun, though I might have to take out my eyebrow piercing or at least cover it. Still, I'd have an excuse to be out of the house and away from my mom, plus I'd be able to eat all the ice cream I wanted. \n\nI wasn't about to admit that my mom had been right about working on my resume, though, so instead of doing something productive, I stole away to my bedroom to play video games.\n\nNot The Circlet of Nianus, obviously. My PlayStation wasn't so good at working without the whole \"power\" thing. With the whole power out, my options were limited to... well, my Nintendo Switch.\n\nIt was fully charged, thankfully, and I hoped by the time the battery was drained, the power would be back. I'd started a new playthrough of Breath of the Wild on the drive back from university since my mom had insisted on coming up to campus to \"help\" me pack, then on driving my car back to Minwack Falls. I obliged, but only because I probably would have driven into oncoming traffic to get away from her incessant sniffling about my horrible hair colour and insistence that my piercing would leave a hideous scar across my face, rendering me entirely unhireable.\n\nIt ended up being a good thing, though. She had pulled over for a break and I'd opened my glove box to hide my Switch while I used the grungy gas station bathroom. Mom wasn't looking, thankfully, because I forgot there was a sample-sized bottle of lube, a bunch of pamphlets about birth control and STDs, and two handfuls of the free condoms they gave out at the university clinic. Knowing my luck, if I'd been driving, Mom would have decided to go snooping through the glove box, and then I would have for sure had to drive into oncoming traffic to avoid that uncomfortable lecture.\n\nAnd, of course, it wouldn't matter if I told her that I hadn't actually used any of the birth control or condoms or lube. She wouldn't believe for a second that I had all that stuff in my car and was still a virgin, even though it was true. Despite my desire to rebel, the internalization of my mom's lectures about abstinence and not being \"that\" kind of girl had really fucked with me.\n\nI'd done my best to get past that, but the problem with being the wild and free type of girl with colourful hair and an eyebrow piercing is that apparently, there were a lot of guys who thought I existed solely to teach them about life, the universe, and everything. Specifically, they seemed to think that the answer lay in my vagina.\n\nSince I was fairly certain that nothing in my vagina added up to forty-two and would therefore disappoint those wannabe hitchhikers, I'd shied away from men in general while at university. Aside from a couple of somewhat regrettable makeout sessions at parties and an unremarkable handjob, after which the guy had fumbled around unimpressively in my panties until I got bored and went back to my dorm to play Red Dead Redemption, I hadn't really had a chance to experience the \"sexual liberation\" side of things.\n\nI mean, I wanted to. I wasn't about to wait until marriage. Hell, I didn't even know if I wanted to get married. I just wanted my first time to be with someone who liked me as more than a concept.\n\nThat was an issue for another time, though. If I couldn't find a guy I was willing to lose my virginity to at the university, the chances of there being someone in Minwack Falls were practically non-existent.\n\nIn no time at all, I was immersed in the kingdom of Hyrule. I'd started this playthrough in Gerudo Town just for the hell of it, and had already released the Divine Beast Vah Naboris, which was too bad; given the storm, playing the lightning-themed part of the game would have been appropriate. Instead, I decided to head to Zora's Domain, which I guess was probably even more appropriate, given the rain and all. \n\nIt's not like there was any other strategy for me to follow. I mean, I started the playthrough in Gerudo Town. \n\nIn any case, it didn't matter. I found Prince Sidon at the Inogo Bridge and started my long trek towards Zora's Domain, battling Ganon's monsters along the way and picking up all the loot I could carry.\n\nFalling into the world of a video game was one of my favourite things. I loved losing myself to the story, the characters, the challenge... for a while, it didn't matter if I was quiet-and-geeky Ramona or wild-and-geeky Ramona. Ramona didn't exist in Hyrule; in Hyrule, I was Link, and instead of battling my mother's constant disappointment, I was battling Lizalfos which, despite trying to murder me with shock arrows, were slightly more compassionate than she was.\n\nThat thought made me picture my mom as a Lizalfos, which was far more hilarious than it had any right to be, and I was fighting back a smile as I threw bombs at a hoard of them when my bedroom door flew open without so much as a warning knock.\n\n\"It's going to be all night,\" Mom said.",
        "I paused the game and frowned as I looked up. \"What?\"\n\nShe looked at me incredulously. \"The power outage, Ramona. It's not going to be back until tomorrow morning.\"\n\n\"Oh.\"\n\n\"Even though the storm has stopped,\" she continued.\n\nI glanced at the window, realizing that the rain had indeed stopped falling. \"Oh.\"\n\n\"Did you even notice?\"\n\n\"Um, yeah,\" I said unconvincingly. \"Obviously.\"\n\n\"Hmm,\" she said, completely unconvinced by my unconvincing tone. \"Well, once your GameBoy battery dies\u2014\"\n\n\"It's a Switch.\"\n\nMom gave me a look. \"Fine. Once your GameBoy switch dies, you can come downstairs and we'll work on your resume so you can go out and find a job tomorrow when the power's back on.\"\n\nDamn it.\n\nShe left my room and I checked the battery, then groaned. I'd apparently been in Hyrule for longer than I'd thought, and my Switch was far closer to dead than it was to alive. Frustrated, I saved my progress, then chewed on a fingernail as I thought.\n\nNo PlayStation, no Switch... what the hell was I supposed to do for the rest of the night? Play fucking Candy Crush until my phone died, too? And the last thing I wanted was my mom \"helping\" with my resume. If she did, I might get hired at a place she'd approve of. \n\nI mean, I guess I could have read a book or something, but luckily, I chose to glance out the window melodramatically. A car was driving down the rain-slickened street, and after a long moment of staring at its tail lights reflecting off the asphalt, a lightbulb went off.\n\nWell, a metaphorical lightbulb. The other lightbulbs were already off. \n\nGrinning, I grabbed my Switch.\n\n**\n\n\"And what are you doing with all this?\" Mom asked as I raided the pantry for a bag of chips and a half-eaten package of Oreos.\n\n\"I'm going to the car so I can charge my Switch.\"\n\nShe looked annoyed. \"That's going to drain your car battery.\"\n\n\"I'll make sure I let it run for a bit.\"\n\nI flung the refrigerator door open and grabbed two cans of Coke. Before she could scold me for letting all the cold air out, I slammed it shut and bounded towards the front door.\n\nHer lack of admiration for my plan didn't stop me, but it did give me the idea to pull my car off the driveway and onto the street so I couldn't see her judging me from inside the living room. There, I cracked the front windows, turned the car to accessory mode, and plugged the charger for my Switch into the cigarette lighter before climbing into the back. I stretched along the seat, the bag of chips tucked in the wheel well beside me, and popped one can of Coke open before grinning at my cozy little setup.\n\nI was a genius.\n\nI mean, seriously. I even thought of setting a reminder on my phone for an hour later so I could run the car for a bit to make sure the battery didn't die.\n\nA frucking genius.\n\nBefore you could say \"Calamity Ganon,\" I was back in Hyrule. The backseat of my car was arguably less comfortable than my bed and the cracked windows didn't do much to help with the heaviness of the air, but I couldn't have been happier. Hyrule was a place where I had one simple job: save the world, get the girl.\n\nOr, in this case, save the world, free the princess. You know, since Link and Zelda don't... well, not usually, anyway. Like, they were a romantic couple in Skyward Sword for sure, but with how reincarnation and all that works in the games, Zelda's hardly ever the actual love interest. I mean, in Breath of the Wild, they talk about how Link and Mipha were\u2014\n\nYou know what, it doesn't really matter. The point is, in video games, my objectives were clear and simple, and saving the world was far less stressful than putting up with my mom.\n\nWhen my phone blared out a reminder to start my car an hour later, it jolted me out of Hyrule and back into reality, where the sun had set and the usually unremarkable glow of streetlights was, of course, not present.\n\nInstead of bothering to get out of the backseat and start my car properly, I made the, in my opinion, more efficient and slightly lazier decision to carefully tuck my Switch into the pocket behind the passenger's seat and get to my knees. Awkwardly, I wriggled between the driver and passenger seats, resting against the centre console as I splayed across the car so I could turn the key in the ignition.\n\nIt started, which was good, since it meant my mom wouldn't be able to yell at me for killing my car battery. Air started blowing from the vents, which was even better, since I hadn't realized how warm it had actually gotten in the car.\n\nWhat was less good was the fact that I apparently was not entirely used to the new swerves and curves that made up my body and that I also apparently needed to do some work on my spatial awareness. \n\nEach time I tried to move, something tugged on my jeans, and I wasn't about to risk ripping my stylishly ripped jeans if I didn't have to. The problem was that my hips were wedged between the seats, so I couldn't pull myself forward enough to loosen whatever it was I was stuck on. As best I could tell, I had two options. Either I could somehow contort my shoulder and twist my arm back to my left hip and hope I could unhook myself, or I could unbutton my jeans and try to crawl forward, leaving my pants behind.\n\nI twisted my mouth to the side, considered taking my pants off, and then quickly decided against it. Knowing my luck, that would be the moment my mom decided to come outside to check up on me, and she probably wouldn't even be the slightest bit impressed that I'd remembered to start the car so I didn't drain the battery.\n\nInstead, I reached forward and steadied myself against the steering wheel with one hand while I tried to work the other behind me. It was a bit of a balancing act, but I managed to get my arm between my body and the driver's seat. Carefully, I patted around my waistband, trying to figure out where I was caught.\n\n\"Ramona?\" \n\nI jumped at the sound of a deep voice floating through my window and pitched forward. Unfortunately, both my hands were otherwise occupied, and I let out a second startled yelp as my head bashed the horn and a surprising honk echoed through the quiet night. \n\n\"Oh, shit!\" said the voice. \"Are you okay?\"\n\n\"Just peachy,\" I said sarcastically, wincing as I pushed myself away from the horn. \"This is all going according to plan.\"\n\n\"What was the, uh, goal of this plan?\"\n\n\"None of your business, that's...\" \n\nI didn't finish as I twisted towards the voice. Peering in the driver's side window was Ashton Halliday, of all people. In the dim twilight, I could just make out the expression of poorly hidden amusement mixed with concern on his face.\n\nThat face was slightly different than the last time I'd seen him. It might have been somewhat dark out, but I could still make out the warmth of his eyes and the hint of that easy, melting smile. The boyish roundness of his face had faded into something more structured, more mature, more... well.\n\nSomething even more gorgeous than the last time I'd seen him.\n\nIf it wasn't for the fact that everyone knew everyone in Minwack Falls, I would have said that Ashton was the kind of guy who wouldn't have even known I existed. He was a hockey player who ran around town with the kind of kids my mom forbade me from hanging out with\u2014also known as the cool kids. While I was at home studying for science tests and working on extra-credit projects for optional extracurriculars to bolster the resume my mom insisted I needed, Ashton was skateboarding down Main Street with his friends. While I was hanging out with my friends at The Sword and Dice, Ashton was out at the end of Drum Farm Lane, making out with girls in the back of his dad's Honda. I was the nerdy girl who enjoyed role-playing games when she wasn't too busy running for student council or planning a bake sale. He went to parties where people drank alcohol stolen from their parents' liquor cabinets and got sent to detention for screwing around during class.\n\nHe did know I existed, though, and we'd even been friends of a sort, once upon a time. His family lived across the street from mine and we were the same age, so naturally there had been plenty of summer days having water fights and racing our bikes on the quiet streets of Minwack Falls. \n\nThat all changed, though. Suddenly, friendship isn't as simple as being around the same age and in close proximity to one another. One day, friendship is just drawing pictures together in chalk on the sidewalk. The next, it's getting ready for his birthday party only to have your mom gently break the news that you weren't actually invited, and while all your friends are out playing laser tag and eating cake, you're going to be staying home to work on your science fair project.\n\nI didn't hold it against him. Well, not anymore. At the time, I was devastated, of course. But we had been at that age where kids grow apart and start becoming different people, and even though it was heartbreaking back then, I was an adult now. I was over it.\n\nSort of.\n\nStill, all that didn't stop me from thinking he was... there wasn't even a word. It was a sound. Like a very soft, mumbled, desperately needy \"unghhhh\" sound. \n\nLuckily, I did not actually make that sound. Instead, I just stared at Ashton like a distracted moron as he tried not to laugh.\n\n\"D'you want a hand?\" he finally asked.\n\n\"I've got two of them, thanks,\" I muttered as I tried to unhook myself unsuccessfully. \n\nHe couldn't hold his laughter in that time and moved away from the window. \"Let me help you.\"\n\n\"What?\"\n\nThe back door of my car opened and there was a sudden rush of cool air. \"I said, let me help you.\"\n\n\"Oh, no you don't,\" I said before I could stop myself. \"I've seen enough bad pornos to know where this is going.\"\n\n\"An understandable concern,\" Ashton said, so casually that I almost didn't turn beet-red as I realized I'd just told him I watched porn. \"But I'm not your step-brother, so you've got nothing to worry about.\"\n\n\"What are you doing, step-friend,\" I said flatly.\n\n\"You don't trust me?\"\n\n\"I barely know you.\"\n\n\"That's very true.\" He thought for a moment. \"What if I talk you through what I'm doing the whole time and promise you can run me over with your car if I do anything inappropriate?\"\n\nI laughed unexpectedly. \"Um...\"\n\n\"Or, I mean, I can leave you here and like, go get your mom or something.\"\n\n\"Ew,\" I said. \"No. Just... okay. Yes, I need help. Please.\"\n\nHe climbed in the backseat and turned the dome light on. \n\n\"Okay,\" he said after a moment. \"I'm not an engineer yet, but it seems to me the problem is that you're stuck.\"\n\n\"Wow. Your powers of observation are incredible.\"\n\n\"I know. It's one of my many talents,\" he said. \"It looks like the easiest way to get you unstuck is probably to unhook this ice scraper from your belt loop.\"\n\n\"Oh, that's what that is!\" I said.\n\n\"Yes, the loops are there to hold your belt in place.\" He chuckled at his own joke as I groaned. \"Okay, in all seriousness. I'm gonna untangle it.\"\n\nDespite his warning, the feel of his hands nudging between me and the seat surprised me. It was probably a good thing, since it made me jump a bit and that little twitch hopefully covered the involuntary shiver that ran through me as Ashton's fingers moved against my hips. I bit my lip as his hand accidentally brushed against the exposed skin just above my waistband, the closeness of his body both unfamiliar and enticing.\n\n\"There,\" he said after a moment, and I felt the tension on my jeans release at the same time the tension in my body did. \"It's unhooked.\"\n\nHe steadied me as I shimmied slowly out from between the seats. The redness on my face hadn't quite faded by the time he guided me onto the backseat. I brushed my hair off my face, subtly pressing my fingers to my face in the hopes that they were cool enough to soothe my flushed cheeks, but my hands were as warm as the rest of me.\n\n\"Thanks,\" I said shakily.\n\n\"Anytime,\" he replied. \"I'm glad it was you, to be honest.\"\n\n\"What do you mean?\"\n\n\"I mean, I was fairly sure this was your car,\" he said. \"But I was a little surprised to see a blue-haired woman stuck between her seats when I expected to see the girl who grew up across the street from me.\"\n\n\"Sorry for the confusion.\"\n\n\"Don't be. You look great, Ramona.\" He grinned as he caught my eye. \"Love the piercing, too.\"\n\nAny of the redness that had faded from my cheeks came rushing back as my stomach fluttered. Mentally, I kicked myself for letting the compliment give me that weightless, fuzzy feeling.\n\n\"What were you doing creeping up on me, anyway?\" I asked to distract myself.\n\nIt was Ashton's turn to chuckle awkwardly.\n\n\"Okay, well, I promise it's not as creepy as it's going to sound,\" he started.\n\nI raised both eyebrows at him and he grimaced.\n\n\"I swear! I was just sitting in my room.\" He gestured towards his house. \"Bored out of my fucking mind. Power's out, my parents are away for the weekend, and none of my friends are back in town. Then I happened to look outside and see this weird glowing light on the street. It took me a sec but I realized it was someone sitting in their car on their phone or something.\"\n\n\"Ah,\" I said.\n\n\"So I was like, well that's super smart,\" he continued. \"But I don't have a car and my parents took theirs, of course, so I'm stranded here. So as I'm squinting out the window I thought, hey, I think that's Ramona's car, and maybe she'll possibly\u2014\"\n\n\"\u2014let you use my precious car battery to charge your phone?\" I finished.\n\n\"Ah, not quite. My phone's battery is pretty much full.\" A flash of embarrassment crossed his face and he dug into the pocket of the hoodie he was wearing. \"Don't laugh, but\u2014\"\n\nOh, but I laughed.\n\n\"I know it's geeky,\" he said, then shook his head. \"Forget it, I\u2014\"\n\n\"I'm not laughing at you,\" I said, giggling as I reached for the pocket on the back of the passenger seat. \"You just surprised me. I didn't think you played.\"\n\nHe burst out laughing as I revealed my still-plugged-in Switch, tilting his own Switch at me.\n\n\"What are you playing?\" he asked.\n\n\"Breath of the Wild. You?\"\n\nHe smiled sheepishly. \"Uh... Pokemon.\"\n\nI pressed my lips together in an attempt not to lose it and he sighed but smiled good-naturedly.\n\n\"If I let you say it, will you let me charge my Switch?\"\n\n\"Deal of the century.\" I yanked the charging cable out of my Switch and passed it to him. \"Did you catch 'em all, Ash?\" \n\nHe plugged his Switch in as I dissolved into giggles.\n\n\"I might not have caught them all, but I've definitely heard 'em all,\" he said. \"That's what happens when you're the token gamer on the hockey team.\"\n\n\"Really? You?\" I asked, shocked.\n\n\"Why's that so surprising?\"\n\nI shrugged. \"I didn't picture you being a gamer, and if you were, I figured you'd be more into like Call of Duty or Halo or something. Or like, any of the EA Sports titles.\"\n\n\"I mean, sometimes.\" He shrugged. \"I'm more into RPGs and stuff, to be honest. I've been playing The Circlet of Nianus but\u2014\"\n\n\"Seriously?!\" I blurted, completely unable to stifle my uncontrollable excitement. \"Me too!\"\n\n\"Yeah?\" he said, his eyes brightening. \"Have you gotten to the end yet or\u2014\"\n\n\"Ugh, yes,\" I groaned. \"I've played that battle probably eighty times now.\"\n\n\"It's so fucking frustrating!\" he said. \"I can't get over the hole in the floor and onto the\u2014\"\n\n\"\u2014platform, yeah,\" I finished. \"I finally did it. Mashed the fuck out of the controller and didn't get sucked through the floor. Landed and shot Izzon three times.\"\n\n\"And?\" he urged, completely entranced.\n\n\"The power went out.\"\n\nAshton's face fell. \"No.\"\n\n\"Yep.\"\n\n\"Mid-game?\"\n\n\"I cried.\"\n\n\"Shit,\" he said. \"I would've, too.\" \n\nAt no point in the history of time or space would I have thought I'd end up geeking out over The Circlet of Nianus with Ashton Halliday. I mean, at no point would I have ever thought I'd end up sitting in the backseat of my car, chatting excitedly about games we'd recently played and upcoming ones we were looking forward to. There was no reason for me to think we'd get into a heated debate about which Final Fantasy was best, or that he'd have bad enough taste to claim that Final Fantasy VII was better than Final Fantasy VI.\n\n\"Next you're going to tell me you think Wheatley is a better villain than GLaDOS,\" he groaned. \n\n\"Of course not!\" I said indignantly. \"Wheatley's hilarious, but he's a moron. GLaDOS is smart enough to be an actual villain. But the real question is, do you think Cave Johnson is funnier than both of them or are you wrong?\"\n\nAshton threw his head back as he laughed. \"We're in full agreement on that.\"\n\n\"Phew,\" I said, leaning against the door. \"It's a good thing you said that, otherwise there's no way we could be friends.\"\n\n\"Are we friends?\" he asked.\n\nMy laughter faded as I met his eyes. There was still a half-smile on his lips, but his eyes studied me seriously.\n\n\"I mean... we aren't, you know. Not friends,\" I said. \n\n\"Yeah, but we used to be, like, actual friends.\"\n\nI fidgeted nervously. \"We were kids.\"\n\n\"Doesn't mean we weren't friends,\" he replied. \"I don't really know why we stopped hanging out, Ramona.\"\n\nI swallowed hard. There was no reason for his words to sting so much; we'd stopped being friends because he hadn't invited me to his ninth birthday party. It was stupid. It was petty.\n\nAnd it bothered me that he didn't remember.\n\n\"I need to turn the car off,\" I said. \"You can keep charging, just... I don't want to waste gas.\"\n\nBefore he could respond, I opened the door. The rush of night air was a relief against my flushed skin and I took my time walking around the vehicle and turning it back to accessory mode before returning to the back seat.\n\n\"Ramona\u2014\" he started when I got in.\n\n\"Do you mind getting the dome light?\" I interrupted. \"It'll drain the battery too fast.\"\n\nHe paused, then reached up and turned the light off as I shut the door. As I adjusted to the sudden darkness that fell over us, I realized how small the inside of my car felt.\n\n\"I believe you've got some Pokemon to master,\" I said, just for something to fill the silence. \"And Zelda's not going to free herself from Calamity Ganon.\"\n\n\"True,\" Ashton said lightly. \"But I have a proposal for you.\"\n\nI closed my eyes and sighed. \"I don't want to talk about\u2014\"\n\n\"Mario Kart.\"\n\nI paused, then frowned. \"What?\"\n\nAshton's face was barely visible in the darkness, but between his tone and the glimmer in his eyes, I could tell he was smiling.\n\n\"Mario Kart,\" he repeated. \"Let's play it together.\"\n\n\"You want to play... Mario Kart?\"\n\n\"Okay, full disclosure?\" he said. \"I fucking love Mario Kart and no one ever wants to play it with me, and it's not as fun as a single-player game. Since we're hanging out anyway, let's play together.\"\n\nI was relieved that we were back to video game talk, though my confusion about his sudden dropping of the whole \"friends\" thing was slow to fade.\n\n\"Okay,\" I said slowly. \"One problem, though.\"\n\n\"I'll buy you the game if you don't have it,\" he said immediately.\n\n\"How am I supposed to download it? The power's out and I don't know what kind of fancy Honda your dad drives, but my car isn't equipped with WiFi.\"\n\n\"One step ahead of you.\" There was a rustling sound as he fiddled around for a moment, then I winced as the sudden brightness of his phone lit up the interior of the car. \"I'll hotspot my phone. And we can do local play once you download it so we won't even need to stay connected.\"\n\nI looked at his phone, then up at the excitedly twinkling eyes gazing at me in the ghostly glow of the screen light.\n\n\"You're really into Mario Kart, eh?\" I said, amused.\n\n\"Come on,\" he said, grinning. \"I'll even go easy on you. At first.\"",
        "\"Don't bother,\" I said, grabbing my Switch. \"I'll have you know I'm a fucking champ when it comes to Mario Kart and there's no way I'm going easy on you.\"\n\n**\n\nBy a glow that was ironically ghastly given the colourful nature of anything Mario-related, I destroyed Ashton.\n\n\"Have you ever even played this game before?\" I asked after the first race, where I easily came in first.\n\n\"Beginner's luck,\" he said.\n\n\"Beginner? I've been playing Mario Kart since before you were born.\"\n\nHe opened his mouth, then closed it and frowned. \"I'm three months older than you.\"\n\n\"Details, details,\" I said, then joined the next race.\n\n\"I might be a little rusty,\" he admitted after I wiped the floor with him again in the next race.\n\n\"A little?\"\n\n\"Once I find my groove, you're going to be begging for mercy.\"\n\n\"Sure, Ash. Gotta catch me first.\"\n\nHe groaned as I giggled.\n\nDuring the third race, I managed to run him off a cliff.\n\n\"Jerk,\" he muttered.\n\n\"Bitch,\" I replied, and he burst out laughing.\n\n\"Just Supernatural or are you part of the whole trifecta?\" \n\nI rolled my eyes as I drifted around a corner. \"Do I look like I'm part of SuperWhoLock?\" \n\n\"Blue hair, eyebrow piercing, complete and utter disdain for an overbearing mother? You're the fucking poster child for Tumblr.\" \n\nI missed hitting an Item Box as I glared at my screen. \"Asshole.\"\n\nHe laughed. \"What, you can dish it out but you can't take it?\"\n\nI gritted my teeth as an NPC Bowser blasted past me. \"Let me remind you whose car this is and whose charger you're currently using.\"\n\n\"Oh,\" he said, his laughter falling as flat as my tone had. \"I... sorry.\"\n\n\"Whatever.\"\n\nWe finished the rest of the race in silence. I still beat him, but I didn't come in first.\n\n\"I was joking,\" he said when he finally crossed the finish line and the characters began to whirl around the track automatically. \"I'm sorry.\"\n\n\"It's fine.\"\n\n\"Your hair looks awesome,\" he continued. \"I didn't mean to make you feel bad about it or something. You look so\u2014\"\n\n\"I don't care about that,\" I interrupted, partly because the fact he was complimenting my appearance was making me tingle in a way that was almost infuriating, since I shouldn't care at all what Ashton Halliday thought of how I looked, but mostly because it wasn't the thing that had bothered me. \"I just don't need to be reminded about my mother right now.\"\n\nHe was quiet for a moment. \"Is everything... are you okay?\"\n\n\"I'm fine,\" I said. \"I don't want to talk about it.\"\n\nOut of the corner of my eye, I saw him nod.\n\n\"Got it.\" He mashed one of the buttons on his Switch. \"Come on, start the next race. I've got a good feeling about this one.\"\n\nI snorted. \"A good feeling about losing?\"\n\n\"I'm gonna make you eat those words.\"\n\n\"Looks like I'm going to be starving.\"\n\n\"Big talker,\" he said. \"You just wait.\"\n\nHe came closer to beating me that time; neither of us came in first but he was only a couple of seconds behind me. \n\n\"Hope you're hungry,\" he teased.\n\n\"Oh, that's right!\" I said suddenly.\n\n\"What?\"\n\nI dug through the pocket on the back of the passenger seat. \"Want some Oreos?\"\n\n\"Does the Pope shit in the woods?\"\n\n\"Depends on if the bear is Catholic.\"\n\nWe both snickered, then went silent as we each popped an Oreo in our mouths. The dim light from our Switches filled the car, and I looked at him out of the corner of my eye as he grabbed another cookie.\n\n\"Can I ask you something stupid?\" I asked suddenly.\n\nHe took a bite of the Oreo. \"Yeah.\"\n\nI picked up another one but didn't eat it, choosing instead to fidget with it by twisting the chocolate discs. \"Don't laugh.\"\n\n\"I might.\"\n\n\"When we were kids, in like... third grade, I think? Maybe fourth?\" I knew it was third grade, but I was trying to pretend like it was slightly less of a big deal than I was making it. \"Sometime around then. You... you had a birthday party. Playing laser tag, I think.\"\n\n\"Yeah, sounds about right,\" he said lightly.\n\nI swallowed hard, still twisting the Oreo back and forth. \"Why didn't you invite me?\"\n\n\"I did.\"\n\nI pressed my lips together as my stomach tightened. Of course he didn't remember.\n\n\"You didn't,\" I said. \"Everyone was super excited about it and then the day came and\u2014\"\n\n\"And your mom called and said you didn't want to go,\" he finished.\n\nI looked up, my eyes wide, to see him staring back at me with a hard expression on his face.\n\n\"It was third grade, not fourth,\" he said. \"And my mom was mad because I'd insisted you were gonna come even though you didn't respond to the invitation. She'd already paid for everything for the party and your mom only called her like an hour before it started.\"\n\n\"What?\" I said. \"That can't be right.\"\n\n\"Trust me. I remember my mom being pissed about it.\"\n\nI bit my lip. \"She said I wasn't invited.\"\n\nAshton's face softened as he saw the confusion on mine. \"Your mom totally hated me, Ramona. I mean, I kinda figured but my mom confirmed it after your mom called the police on me for skateboarding after ten p.m. at the park.\"\n\n\"What?!\" \n\nHe started laughing. \"Yeah, when I was like, fifteen. I mean, I seriously wasn't doing anything besides skateboarding, but I was scared shitless when the cops came and brought me home. I was lucky, though. He hung out to tell my mom that they only had to do something because Liz Roth was the one who called it in and that technically the bylaw did say that the park was closed after ten. After he left my mom said your mom thought I was a bad influence because she and her never got along.\" He took another cookie from the package, his smile fading. \"I thought you'd just decided we weren't friends or something because you stopped wanting to hang out and you wouldn't even talk to me at school. I didn't know... she really told you I hadn't invited you?\"\n\nI couldn't bring myself to respond. Yeah, she had told me Ashton hadn't invited me to his birthday party. And that had been so hurtful that I stopped being friends with him. And for... well, for ten years, since we were nineteen now, we hadn't been friends because my mom thought a child was, what, a bad influence? A troublemaker? And she'd... \n\n\"She called the police on you?\" I asked, my voice shaking with anger.\n\n\"Yeah,\" he said.\n\n\"I'm so sorry.\"\n\n\"Don't be.\"\n\n\"But\u2014\"\n\n\"Seriously, don't be.\" He looked at me earnestly. \"I'm sorry I didn't ever ask you about it. It's not your fault she's...\"\n\n\"...such a bitch?\" I finished as he trailed off.\n\nHe chuckled. \"Your words, not mine.\"\n\nI shook my head. \"And she wonders why I don't want to be her goody-two-shoes mini-me anymore.\"\n\n\"So the hair and piercing are because you're rebelling?\" he asked.\n\n\"No,\" I said stubbornly. \"They're because I like them and now I can do the things I like.\"\n\n\"Right.\"\n\nI glanced at him, trying to hide an abashed smile. \"And maybe a little because I'm rebelling.\"\n\nHe grinned. \"You know what would be a great way to really stick it to your mom?\"\n\nI raised my eyebrows.\n\n\"Being friends with me again,\" he continued. \"Imagine how pissed she'd be if she found out we were hanging out.\"\n\n\"I've been friends with people for stupider reasons,\" I said. \"Sounds good to me.\"\n\n\"Awesome.\" He grabbed another Oreo. \"Now, you gonna keep stalling, or are you ready for me to destroy you in the next cup?\"\n\n\"Bring it on, big talker.\"\n\n**\n\n\"I have a theory,\" he said a while later.\n\n\"What's that?\"\n\n\"You didn't really go away to university.\" He wagged a finger at me. \"You've spent the past year training in a super secret location to be the world's top Mario Kart eSports player, and you just hustled me into thinking you haven't played in years so you could get a free copy for your Switch.\"\n\nI smirked at him as my Yoshi raced around the track on my screen. \"Believe whatever conspiracy you need to comfort yourself after losing again.\" \n\n\"Oh, yeah?\" He put his Switch down on his lap as his Toad did another automated lap. \"Prove it.\"\n\n\"Prove what? Mario Kart doesn't even have any official competitions.\"\n\n\"Sounds like something someone deep in the underground world of Nintendo eSports would say. You're gonna have to do better than that.\"\n\n\"What, like you want to see my student ID or something?\"\n\nHe shook his head. \"Anyone can fake one of those. Tell me something only someone who goes to university would know.\"\n\nI laughed. \"Like what?\"\n\nHe shook his head teasingly. \"I can't tell you. That would be cheating and all you're doing is proving my theory.\"\n\n\"How am I supposed to prove it?\" I giggled. \"What, you want to know how many frat parties I've been to or something?\"\n\n\"Frat parties?\" Ashton said with interest. \"Have you been to many?\"\n\nI felt my skin get warm. \"No, I... not really.\"\n\nHe shifted in his spot, turning to face me. \"What's 'not really' mean?\"\n\nI bit my lip. \"Well, I went to like... a couple. But I didn't stay very long. Not really my scene.\"\n\n\"Not a partier?\"\n\n\"I didn't say that.\"\n\nHe grinned. \"Tell me some party stories. It's not concrete proof but it'll help convince me a little.\"\n\nI rolled my eyes. \"I don't have a lot of stories. I went to some parties, I drank some beer, maybe did a little dancing.\"\n\n\"Dancing?\" he repeated. \"That's it?\"\n\n\"Pretty much.\"\n\nAshton smiled knowingly. \"With one person or just kind of whoever?\"\n\n\"Are you asking me if I slept around?\" I asked.\n\nHe raised his hands. \"No judgement from me. I'm just curious.\"\n\n\"I don't have a boyfriend, if that's what you mean.\"\n\n\"Girlfriend?\"\n\n\"Nope. Why, you applying?\"\n\n\"Do you want me to?\"\n\nI opened my mouth to respond, but nothing came out.\n\n\"I'm just messing around,\" Ashton said after a moment, his face going serious. \"I didn't mean to make you uncomfortable.\"\n\n\"It's okay,\" I said. \"Just, um, unexpected. I didn't really... you know. Do the party-hook-up thing.\" Or any hook-up thing, but I didn't add that part. \"Mostly I sat around eating chips and talking games.\"\n\n\"That's what we're doing right now.\" He folded his arms. \"Not a very convincing argument.\"\n\n\"I don't know what to tell you,\" I said. \"I've been in university for a year. You just suck at Mario Kart.\"\n\n\"I do not,\" he said. \"I just spent my year at university studying and behaving like a good, upstanding citizen instead of going to frat parties and hustling people at Mario Kart.\"\n\n\"Oh, bullshit,\" I cackled. \"How many people did you 'dance' with, Ashton?\"\n\n\"Just my girlfriend,\" he replied.\n\nMy throat felt dry. \"Oh.\"\n\n\"Until she broke up with me,\" he continued. \"Then, like, three other people. Figured why not, you know?\"\n\n\"Right,\" I said.\n\nI didn't know what to make of the twitching little emotion in my chest. If I didn't know any better, I would have called it jealousy. But it couldn't be jealousy. This was the first time Ashton and I had talked\u2014really talked\u2014in... well, forever, I suppose. I mean, nine-year-olds aren't known for their intellectual and deep conversations, and while we'd spoken in passing during high school, it wasn't like this.\n\nOn the other hand... unghhh. \n\n\"Is this too weird?\" he asked frankly. \"I'm serious, Ramona. Just tell me to shut up if this is getting too personal or something.\"\n\nI bit my lip. It wasn't too personal. Aside from the fact that we were really just getting to know each other for the first time, I trusted him, and he was... well. I didn't know if he was asking because he was trying to feel out if I would be okay with him hitting on me or something, but if he was, I knew it was because he liked me as more than just a concept. I mean, he'd known me since we were kids, and he knew about my crazy mom, and he was understanding, and kind, and funny, and... well. \n\n\"I just don't have anything, um, interesting to say,\" I finally said. \"I don't mind talking about it, I just... I didn't meet anyone worth writing home about. Not that I'd want to tell my mom about it, anyway. She'd... well.\"\n\n\"Wouldn't approve or would immediately start planning a wedding?\" he asked.\n\nI smiled down at my Switch. \"Wouldn't approve. She's pretty conservative about that kind of thing. Which sucks, because I want to be a bit more open to, you know...\" I cleared my throat. \"...trying new things or whatever. But it's hard to get past all the things she said. Like, there was this pyjama party where they started playing strip beer pong and I wanted to play but... I dunno.\"\n\nHe listened thoughtfully, nodding as I finished. \"You started overthinking it.\"\n\n\"Yeah, like I am right now,\" I muttered, which was apparently a lie because I did not think that through.\n\n\"What are you overthinking right now?\"\n\nI glanced up at him, suddenly vulnerable, suddenly alarmed. Ashton looked back at me steadily, his eyes wide but friendly, intrigued but safe. I wanted to tell him; I wanted to say I was wondering why he'd asked, and ask what he'd really meant when he said I looked good, and if he wanted to kiss me, and if he thought the fact that I wanted to kiss him and touch him and do other stuff to him would make him think I was only doing it to rebel against my mom or if he understood that I'd always liked him, and would he even be interested in me like that.\n\n\"Just stuff,\" I said instead, my voice small.\n\nAshton opened his mouth to respond, but the inside of my car suddenly exploded with light. Before the confusion faded from my mind and the temporary white blindness had faded back to dark, thunder burst above us. \n\n\"What the fruck,\" I shrieked, jumping so suddenly that I nearly tumbled off the backseat. Without thinking, I grabbed Ashton to steady myself.\n\nI don't know if he was thinking when he put an arm around me, or if it was just instinct, or if he felt the same spark that I did as his hand brushed against my breast unintentionally. I do know that my heart was racing so fast that I felt lightheaded, and that it wasn't entirely because of the sudden clap of thunder.\n\n\"Did...\" he started, then stifled a laugh. \"Did you just say what the 'fruck'?\" \n\n\"Shut up,\" I muttered. \n\nMy face was burning and something in the back of my mind was screaming that I should pull myself away, that I shouldn't be pressed against Ashton in the back of my car. But he didn't let go of me, and I didn't move away from him, and when the next flash of lightning filled the sky, he was still holding me close.\n\n\"Probably going to start raining again,\" he said after thunder finished rumbling.\n\n\"Yeah,\" I agreed.\n\n\"Probably pretty hard,\" he said.\n\n\"Yeah.\"\n\n\"So if you want to go back inside...\"\n\n\"Not really. Do you?\" I asked.\n\n\"No.\"\n\nThe word hung between us and my heart stuttered, that light-headed feeling extending from my head to my limbs, a weightless anticipation that was foreign and nerve-wracking and electrifying. I had a vague idea of where I wanted things to go, and I was fairly certain that Ashton wanted things to go in that same direction, but I didn't know what to say next.\n\n\"Why don't we keep playing?\" he asked gently a moment later.\n\nOh.\n\n\"Sure,\" I whispered, my voice deflated as I started to untangle myself from him.\n\nHis arms tightened. \"But how 'bout we up the stakes?\"\n\nI stopped and looked up. Lightning chose that moment to flash again, revealing a mischievous glimmer in his eyes.\n\nI bit my lip, hardly able to contain my excitement. \"What were you thinking?\"\n\n**\n\nDespite the added motivation, he still lost the next race.\n\n\"Damnit,\" he cursed.\n\n\"Off with the shirt,\" I said cheerfully as I leaned against the door.\n\nWe'd been smart enough to close the windows I'd cracked open before the rain started, so Ashton didn't seem to mind stripping off a layer considering how hot the inside of the car had gotten. Rain hammered against the roof of the car, a staccato soundtrack to the flashing glimpses of skin I got as lightning burst beyond the foggy windows. \n\nI watched unabashedly, equally grateful that he had lost so I didn't have to be the first one to take my shirt off and that the light was bright enough for me to appreciate the lines of his body.\n\nThe rules were negotiated before we started. Clothing had to come off in order; no removing pieces that were under something else first. Shoes and socks didn't count, nor did jewellery. In order to make the other person remove a piece of clothing, you had to come in first; placing ahead of them wasn't cause for stripping. We took turns picking the course, regardless of who won. Most importantly, either of us could stop the game at any time, no questions asked.\n\n\"And if your mom comes outside and discovers me sitting half-naked in your car?\" he had asked, the only moment he seemed to second-guess himself.\n\n\"She won't,\" I replied. \"There's no way she'll come outside in this weather.\"\n\n\"But if she does?\" he pressed.\n\n\"Once she's done yelling, I'll go down on you.\"\n\n\"Deal,\" he said without hesitation, and there was a long delay before we could start playing because I was laughing too hard. \n\nPart of the laughter was nervousness; part of it was mortification that the words had actually left my lips; part of it was to cover the absolute thrill that rushed through me as I imagined looking up at Ashton just before taking him in my mouth. \n\nMy heart felt like it was hammering against my ribcage as I faked confidence and told him to pick the first track since I was certain I'd beat him anyway. Throughout the entire race, my breath was stuck in my throat, though it didn't stop me from trash-talking him when he missed hitting me with a red shell, and I only let it out when I finally crossed the finish line.\n\n\"Your turn,\" he said after putting his shirt on the rear shelf. \"What course?\"\n\nI tore my eyes away reluctantly and studied the screen of my Switch. \n\n\"What'll it be, what'll it be,\" Ashton said as I contemplated. \"Probably gonna play it safe, eh? Dry Dry Desert? Toad Turnpike?\"\n\n\"In your fruckin' dreams,\" I said. \"No way am I going easy on you.\"\n\n\"Oh, not for my sake,\" he replied. \"I mean, you don't want to throw your winning streak now, right? So you wouldn't pick something hard that might put you in a... precarious sort of position, would you?\"\n\nI glanced up at him. \"Are you trying to goad me into picking a harder track?\"\n\nHe blinked at me innocently. \"Who, me?\"\n\nI snorted. \"This coming from the guy who picked Mario Circuit. Can you get any more basic?\"\n\n\"And yet, you weren't that far ahead of me. Starting to choke, Ramona?\"\n\n\"If you want me to choke, you'll have to give me something bigger than this, Ash.\"\n\nThe startled shock on his face was almost worth falling for his taunts and picking Wario Stadium instead of something like Toad Harbour. \n\nAlmost.\n\nI was ahead of him for most of the race. Halfway through the final lap, I heard Ashton curse as he hit one of the flame wheels.\n\n\"Hope you're wearing nice boxers,\" I teased, though I shut up fairly quickly when lightning struck in-game and shrunk me while I was mid-jump, sending me plummeting into a mud puddle.\n\nI was holding down the gas as hard as I could when the jingling sound of an Item Box rang from Ashton's Switch. Seconds later, he let out a celebratory cry.\n\n\"Hope you're wearing nice panties,\" he shot back.\n\n\"What?\" \n\nBut I didn't need to ask, and he didn't need to answer. The dreaded beeping alarm sound started and I looked at the screen in horror.\n\n\"No, no, nonono,\" I wailed as the blue shell appeared above me and hurtled down.\n\nAshton laughed so hard that I hoped it would be enough to stop him from getting to first, but it wasn't. By the time I recovered, most of the racers had passed me. I didn't give in; I still tried to catch up, hoping I'd maybe hit a box and get Bullet Bill or maybe a Blooper or a Super Star or something. ",
        "I did manage to hit an Item Box, but there was a banana peel behind it, and by the time my car recovered, Ashton had crossed the finish line in first place.\n\n\"Yes!\" he shouted, pumping a fist in the air as I slowly finished my final lap.\n\n\"Damn,\" I muttered.\n\nMy heart was racing again, though for a very different reason this time. It had been a whirlwind of a situation and my mind was still trying to catch up with how I'd ended up in my car in the middle of a thunderstorm with a shirtless Ashton. I was excited and scared, nervous and exhilarated. Part of me was dreading taking my clothes off; another part of me wanted to tell Ashton I was dropping the charade and just getting naked. \n\nA third part of me was insisting I needed to tell Ashton why I was nervous, to explain to him that I'd never been fully naked around anyone before, that I was a virgin, that I'd barely been kissed, let alone anything more. At the same time, a nagging voice in the back of my head that sounded suspiciously like the head of the homeowner's association said if I told him I was a virgin, he'd want to... well, he might like that more than I wanted him to. \n\nOr he might not. Or he might not even want to go there. He might just want to fool around, or flirt, or... or I didn't know. What I did know was that, as nervous as I was, I wanted to be there more than I wanted to be anywhere else in the world.\n\nAs the stats showed on my screen, I swallowed and put my Switch down on the seat beside me.\n\n\"Final rule is still applicable,\" Ashton said gently as I wiped my hands on my jeans. \"If you want to stop\u2014\"\n\n\"No way,\" I shot back. \"I had to let you think there was at least a chance I'd lose a piece of clothing otherwise you'd quit before I got to see the whole package.\"\n\nHe grinned and leaned back against the door. \"Whatever you say, Ramona.\"\n\nI stuck my tongue out at him, which made him laugh, then hesitated as I tried to decide between taking off my pants or my shirt. He'd made the comment about hoping I was wearing cute panties, and for some reason, it felt less revealing to sit around in my underwear than it did to sit around in my bra, so I brought my shaking hands to the waistband of my jeans and unbuttoned them.\n\nRemoving my pants was awkward. Obviously, part of it was because of all the things that were making me thrilled and nervous. But, from a more practical perspective, we were in a dark, enclosed space surrounded by a raging thunderstorm. I forgot to take my Chucks off, so had to pause with my jeans around my knees to untie them before doing my best to wriggle my pants off the rest of the way without accidentally kicking Ashton. When I finally managed to get them off and onto the rear shelf, my face was bright red, though not from the heat in the car. \n\n\"I hate to ask,\" he said. \"But the pattern on your underwear... is that\u2014\"\n\n\"Shut up,\" I said. \"Yes.\"\n\nHe stifled a laugh. \"I love it. Can I see\u2014uh.\" He stopped, and I looked up to see his face reddening as he tore his eyes away. \"That sounded super weird. Sorry.\"\n\nI hesitated for half a heartbeat, then brought my hands to the hem of my t-shirt and lifted it slightly so he could see my panties more clearly. Ashton's eyes met mine and I saw his throat flex as he swallowed before his eyes flicked downward. For a long time, he stared, and I was starting to think it wasn't just at the pattern on my underwear.\n\n\"I didn't even know they made Deadpool-themed panties,\" he finally said.\n\n\"Why not?\" I asked. \"They capitalize on anything.\"\n\n\"Yeah, but how many people are seriously buying Deadpool panties that say 'show me your chimichanga' on them?\"\n\n\"You have no idea how long it took me to find these.\"\n\nHis eyes flicked back up, meeting mine, and the next race was paused as we dissolved into laughter again.\n\nI don't know whether it was an increased motivation on his part or distraction on mine, but the removal of my pants was apparently what he needed. He picked the next track, of course, and it was only sheer luck that I crossed the finish line seconds before he did.\n\n\"I did that on purpose,\" he said as he started unbuttoning his jeans. \"I didn't want you to feel uncomfortable sitting around in your underwear by yourself.\"\n\n\"How chivalrous of you,\" I replied.\n\n\"I know, right?\" He tugged his jeans down and despite my best efforts, I couldn't help trying to catch a glimpse as he removed them. \"Now, it's only polite that you extend the same courtesy, so if you could go ahead and lose the next race...\"\n\n\"Not a chance in hell,\" I said.\n\nHe laughed and said something else, but I completely missed it. I don't know what it was about Ashton in his boxers, but he was just... unghhh. So unghhh.\n\nMy panties were as geeky as I was, but his boxers were fairly plain. I couldn't really tell what colour they were by the glow of the Switch screens; they weren't white, but maybe like a very light grey or green or blue. It didn't really matter, of course, since I wasn't looking at them for the colour. I was looking at them for the way they clung to his thighs and sat on his hips, for the gentle V line on either side of his stomach that disappeared beneath the waistband. Mostly, I was looking at the bulge in the front. He filled out those boxers nicely.\n\nI blamed the distraction of how good he looked in his boxers for my next loss, even though I had picked the track again. It wasn't quite so much of an upset that time, but it didn't matter; he came in first, and if you're not first, you're last.\n\nHe didn't say anything as I brought my hands to the hem of my shirt. I could feel his eyes on me as I lifted it, but I didn't look at him; a single moment might have been enough for me to lose my resolve. Instead, I swallowed, took a deep breath, and pulled it over my head.\n\nOnce it was off, I risked a glance at Ashton. I expected his eyes to be glued to my breasts, even though I still had my bra on. I mean, wasn't that kind of the point? He was putting on a show for me, I was putting on a show for him, and from my admittedly limited experience with men, I was fairly sure that a good percentage of them were pretty much obsessed with tits. And maybe Ashton was too, but I couldn't tell. He was looking at my face with eyes that were wide and earnest and appreciative in an almost wholesome sort of way. \n\nThat expression was everything. I couldn't quite say it banished my nerves, but it filled that spot deep in my stomach with a blooming warmth that made me very glad I still had my panties on, otherwise I would've had to find a way to clean my seats the next day. The way he looked at me... well. \n\nIt made me very glad that he was the person I was playing this game with.\n\nHe held my gaze as I put my shirt on the rear shelf, waiting until I was sure my collarbone was stained pink and my pulse was showing through my skin before finally allowing his eyes to trail down my body.\n\nHis throat flexed as he swallowed and his mouth opened just slightly. I could almost feel his gaze as his eyes moved down my neck and to my shoulders, and from my shoulders to my breasts. I let him stare, taking in the softness of my curves and gentle dip of my cleavage as it hinted at something hidden just beneath the pale blue fabric.\n\n\"There wasn't a matching bra,\" I finally said, almost apologetically.\n\nHis chuckle was almost dry. \"This one's pretty frucking hot, though.\"\n\nMy laughter must have made my breasts jiggle or something. The light from our screens might have been dim, but it was bright enough that I could see the shadow of movement in the front of his boxers. \n\nDefinitely a good choice to keep my panties on.\n\n\"Rainbow Road,\" he said suddenly.\n\n\"What?\"\n\nAshton's throat flexed again as he met my eye again. \"Next track. Rainbow Road.\"\n\n\"You really want to show me your dick, eh?\" I teased, grabbing my Switch.\n\n\"Sure, but you're gonna be showing me your tits first,\" he shot back. \n\n\"Big talker for someone who's only won two races.\"\n\n\"Yeah, well.\" His eyes twinkled as he smirked and pressed the button to start the race. \"You have no idea how badly I want to see you naked.\"\n\nThe words sent a rush through me just as a drawn-out rumble of thunder filled the air. I gaped at him a second too long; by the time I recovered, I missed the window for a Turbo Start.\n\nAshton, on the other hand, didn't.\n\nThe idea of playing another round completely topless, knowing how hard Ashton would have to struggle to keep his eyes off my breasts and on his game, was more distracting than it was motivating. There was an aching sensation in my pelvis that was familiar yet completely brand new. I'd been horny before, obviously. I'd masturbated, I'd fooled around with guys, I knew what being turned on felt like, but I couldn't say that it had ever felt like that before. It was a gnawing sort of feeling, a hunger, a need for something to be inside me. Somehow, my body just knew it wanted to be filled, even though I'd never experienced it before.\n\nIt was the worst track to be distracted on. Rainbow Road was notoriously hard, that much was true, but realistically it wasn't the hardest, at least in my opinion. It did, however, require a level of attention that I was not capable of in my current state, and that much was obvious when I fell to fifth place. I gritted my teeth, trying not to think about the wetness between my legs or wonder why the idea of sitting topless in front of Ashton was filling me with as much excitement as it was nervousness. \n\nOne of the NPC racers passed me and I bit my lip. There was almost no chance I was going to win... but I didn't have to win.\n\nI just needed Ashton not to come in first.\n\n\"Imagine if my mom came out right now,\" I said.\n\nHe chuckled but didn't say anything.\n\n\"She'd be so pissed,\" I continued, drifting around a curve. \"But I bet you wouldn't even notice because you'd be too busy thinking about how I promised to go down on you if she yelled at you.\"\n\nHis chuckle was slightly strangled that time. \"Didn't think you were one to play dirty.\"\n\n\"Who, me?\" I asked innocently, hitting an Item Box. \"What's so dirty about making you wonder what my boobs look like?\"\n\n\"Joke's on you, I was already wondering that.\"\n\n\"Pale pink and really hard right now.\"\n\nLightning flashed and I saw him shift slightly. \"What?\"\n\n\"My nipples. You know, for your mental image.\"\n\nHe made a noise that was a groaning sort of cough. \"That so?\"\n\n\"Mm-hmm. And I'd totally take my bra off while I was going down on you.\"\n\n\"You know, if you were really trying to distract me, you wouldn't be phrasing it like that,\" he said firmly.\n\nI frowned. \"What?\"\n\n\"You'd say you were gonna suck my cock or something. Like, for example, if I was going to pull this same dirty trick on you, I wouldn't just say I'd go down on you. I'd tell you that I'd bury my face in your pussy and let you pull my hair while I licked every single inch of you, making sure you were properly begging me to play with your clit before I even touched it.\"\n\nI fell off the track.\n\n\"Asshole,\" I whispered as Lakitu dropped me back on the road.\n\n\"Yeah, I'd lick that if you wanted me to.\"\n\nI was dead last and from what I could tell, he was firmly in first place. I rounded another curve, my panties as soaked as they would have been if I'd been standing outside in the storm. There was no chance, no way at all that I'd win, and save for a miracle, there was no way he wouldn't come in first. I swallowed hard, mentally preparing myself to strip in front of him, partly thrilled and partly terrified and entirely, completely, totally turned on.\n\nJust as I resigned myself to my fate, something dimmed in the corner of my eye.\n\n\"What?\" Ashton gasped. \"Wh... what?\"\n\nI looked at him. Well, sort of. I looked at the spot he was sitting, which was far darker than it had been a few moments earlier when his Switch screen was lighting up his face.\n\n\"No,\" he breathed. \"No way.\"\n\n\"Your Switch died?\" I asked.\n\n\"But it's plugged in!\"\n\nI tried not to laugh at the devastation in his voice. I was about to tell him not to be sad, I would show him my tits anyway if he asked nicely and maybe took his boxers off, when I realized what that meant.\n\n\"Oh, no,\" I whispered, abandoning the race.\n\nI completely forgot that I was just in my panties, otherwise I probably wouldn't have sandwiched myself between the seats again as I lunged for the keys. It didn't even cross my mind until I turned the ignition unsuccessfully twice and swore.\n\n\"We drained the battery,\" I groaned. \"Shit. My mom's going to be a nightmare about this.\"\n\n\"Uh-huh,\" came the somewhat-distracted response from behind me, and that's when I realized my ass was basically in Ashton's face.\n\nAt least that time I wasn't stuck on the ice scraper. I crawled as gracefully as I could out from the space between the seats, which was not gracefully at all, and looked at him. Lightning picked that moment to flash again, muted by the filter of fog that clung to the car windows. Brightness hung in the air, flickering slightly as it revealed Ashton hurriedly adjusting the front of his boxers. He looked up, alarmed, and I looked down, enthralled by the sight of something very stiff tenting the fabric.\n\nAll at once, the lightning faded, and we were left in the warm darkness all over again.\n\n\"Guess that's that,\" he said with a weak laugh. \n\n\"Guess so,\" I replied.\n\n\"Too bad. I was, uh, looking forward to winning that one.\"\n\nI licked my lips and glanced down. The screen of my Switch didn't do much to light the space, but I could still see the vague outline of his erection.\n\n\"We could keep playing,\" I whispered.\n\n\"What?\"\n\n\"I mean, it's not like the car is going to get any less dead if we stay out here.\" I picked up my Switch. \"Mine's still got some battery left. We just, um, would need to take turns. Change up the rules a bit.\"\n\nHe raised an eyebrow. \"What're the rules?\"\n\nI hadn't quite thought that far ahead. I glanced down at my screen, watching the racers circle the track.\n\n\"Distraction,\" I said.\n\n\"What?\"\n\nI held my Switch out to him. \"Distraction. I pick a track, you play the race, I do my best to... distract you while you're racing. You do your best to come in first.\"\n\nHe cleared his throat. \"What happens if I win?\"\n\n\"You get to choose what comes off.\"\n\n\"And if I lose?\"\n\nI smirked. \"I get to choose.\"\n\nHe took the Switch carefully. \"So how does distraction work? What are the, uh, rules?\"\n\nI thought for a moment. \"Well, I think touching is okay. As long as the person can still physically play the game.\"\n\nHe nodded eagerly. \"Sounds good.\"\n\n\"No removing clothes, since that's... you know. The prize. But...\" I cleared my throat, almost feeling lightheaded. \"Hands can go under things.\"\n\n\"Seems fair.\"\n\n\"And, um... that's all I can think of.\"\n\n\"One more,\" he said. \"Final rule still applies, regardless of who's driving and who's, uh, distracting.\"\n\nBy that point, I wouldn't have been surprised if my skin was just permanently stained red from all the blushing I'd been doing. \"Yeah.\"\n\nHe smiled. \"So, what track am I playing?\"\n\nHe didn't complain about my choice, which was good because I picked one at random. As the music signalling the start of the race began to play, Ashton met my eyes one last time.\n\n\"Good luck,\" he teased quietly.\n\n\"Keep your luck,\" I said. \"You're gonna need it.\"\n\nHe smirked, then looked down at the screen.\n\nI hadn't exactly thought of what I was going to do ahead of time. Frankly, the entire thing was an exercise in spontaneity. I don't know why I suggested continuing to play instead of just jumping into his lap and kissing him. Maybe because it was fun, maybe because I was stalling, maybe because if I did that, I'd have to decide if I wanted to go further, and how far that would be. And maybe, even though I was turned on and Ashton was sweet and respectful and unghhh, I was still feeling uncertain because of a certain nagging voice in the back of my head.\n\nWhatever it was, it didn't matter. What mattered was that we were there, and we were enjoying ourselves, and it was hot as fuck.\n\nI didn't move until Ashton had started racing. As soon as he did, I tucked my legs beneath me and nestled closer to him. He shivered almost imperceptibly as I leaned against his arm and our skin touched. \n\nThere was no real plan, but his neck seemed like as good a place as any to start. Carefully, so I didn't jostle him while he was racing, I curled in closer. Just before I pressed my lips to his skin, his breath quickened, and there was a smile on my face as I kissed the spot where his neck met his shoulder.\n\nAside from the change in breathing, he didn't react as I nuzzled his neck, flicking my tongue out and tracing a gentle pattern along his collarbone. I almost jumped when the chiming sound that signalled the start of lap two rang out from the Switch and I had barely even touched him.\n\nI was going to have to step up my game.\n\nHe very kindly moved his arm as I slipped my hand between us, touching his chest and trailing my fingers down his pecs. He trembled slightly as I ran my hand along his ribs, squirming just enough that it was clear it tickled, and I grinned against his neck before doing it again.\n\n\"You are evil,\" he groaned, though it was mixed with laughter as he writhed.\n\n\"You think that's evil?\" I said, nipping at his neck. \"You just wait.\"\n\n\"Oh no,\" he said, but he didn't sound that unhappy about it.\n\nI traced his ribs lightly one last time before moving my hand to his stomach and walking my fingers lower, and lower, and lower still, until they reached the waistband of his boxers. Ashton's breath hitched, but seconds later the jingle of the final lap played and the music sped up.\n\nThat meant my hand had to speed up, too.\n\nI slipped my fingers beneath the waistband of his boxers. Ashton made a small noise of anticipation as I pushed my hand further, culminating in a soft moan as my hand brushed against his shaft. Those noises made that desperately aching part of me pulse with need, but I ignored it as best I could as I wrapped my fingers around his cock.\n\nHe was smooth and delightfully warm against my palm. I relished the way he twitched in my hand, uncontrollable movements that were accompanied by tiny puffs of breath as he tried to focus on the game. I felt his throat flex again as he swallowed and I started moving my hand, slowly at first and then faster. Precum dripped from his tip, thick and sticky and wonderfully slick, and I spread it along his cock as I stroked him.\n\nJust as I started really getting into it, I heard him cross the finish line. He inhaled sharply as I took my hand out of his boxers and moved away from his neck.\n\n\"I won,\" he said, though he didn't sound entirely convinced that he had won.\n\nI tried to look dejected, but it was impossible. \"What do you choose?\"\n\n\"Do you seriously need to ask?\" he replied, grinning.\n\n\"I wanna hear you say it.\"\n\nHe licked his lips as his eyes flicked down. \"Bra off, please.\"\n\n\"Wow, and so polite.\"\n\nHe opened his mouth to respond, but nothing came out as I reached behind me and unhooked the clasp. That time, his eyes stayed glued to me as I moved the cups away from my breasts and slid the straps down my arms. I didn't mind in the slightest; the way his lips were parted and the subtle rise and fall of his chest as he watched sent a spike of desire rocketing through me. Silently, I revealed my breasts to him, entranced by the way he stared like I was made of starstuff and moonlight. It was only when I unceremoniously dropped my bra to the floor of my car that he finally spoke.\n\n\"Holy fruck,\" he said, and I couldn't hold back a giggle.\n\nThat, more than anything, made any of the nerves I had left vanish. There was no question; he wanted to see my tits. He was turned on because of me. He wanted me, and I wanted him, and I was seconds away from asking if we could just forget about the game when he thrust the Switch towards me.",
        "\"Your turn.\"\n\nI almost protested, but the hoarseness of his voice and the dark excitement in his eyes as lightning flashed outside kept me quiet. Instead, I took the Switch.\n\n\"Which track?\"\n\nHe picked one of the city tracks. For the life of me, I could never remember which one it was. There was no way around it: Ashton's distraction game was far stronger than mine.\n\nIt started innocently enough. He asked if I'd be okay to sit between his legs so I could lean back against him.\n\n\"It'll be more comfortable,\" he said, and like a complete sucker, I agreed.\n\nI should have known the second I felt his cock pressed against my lower back that I wasn't winning this round. Even through the fabric of his boxers, I could feel how hot he was, and it was a good thing I hadn't started yet when I felt his cock twitch against me. Still, I felt confident that I could win my race.\n\nSo confident, in fact, that I wiggled my hips slightly as I leaned against him, making him groan as his cock nestled closer to my ass.\n\n\"I thought you were supposed to be the one distracting me,\" I teased.\n\n\"Rules don't start till the race starts,\" he murmured, and an electrifying tingle ran up my spine. \"Gonna keep stalling?\"\n\nI hit the button immediately and he chuckled in my ear.\n\nI managed to stay in first for most of the race, despite Ashton's best efforts. And those efforts were... well.\n\nHe started much like I had. Fingers trailed along the base of my neck as he moved my hair out of the way and pressed his mouth just behind my ear. That certainly felt nice, and the feel of his breath brushing against my skin was a little distracting, but it wasn't unmanageable. \n\nThat was just the briefest of warmups, though. After a few seconds, he nibbled softly on my shoulder and then slipped his hands beneath my arms. I shifted to give him room, holding the Switch up so I could focus on the race. His hands gripped my sides lightly, lingering for a heartbeat on my waist before moving up to my ribs. His knuckles brushed the underside of my breasts and I shivered; his lips flicked up and he sucked gently on my neck before taking a breast in each of his hands.\n\nI whimpered softly. I couldn't help it. The feel of his palms pressed against my hardened nipples was heaven; the gentle kneading of his hands was bliss. I blinked hard, staring at the screen and doing everything I could to stay on the track as he fondled, caressed, and tortured me with feather-light fingertips.\n\nI was still in first place when the second lap started, though I nearly lost my spot as Ashton pinched my nipples. He ran his fingers along one hardened nub as he released the other, sliding that hand to my ribs, and then my stomach, and then to the top of my panties.\n\nHe toyed with the waistband for a few seconds but didn't stick his hand inside. Instead, he cupped my pussy through the fabric, exhaling softly as he felt the wet spot that had been soaking the front of them for some time.\n\n\"Damn, Ramona,\" he mumbled against me. \"I didn't realize you were this turned on.\"\n\n\"Shut up,\" I whispered breathlessly as I crashed into another racer.\n\n\"It's a good thing,\" he said. \"This is... wow. Wow.\"\n\nI bit my lip as he pushed the crotch of my panties aside and traced my dripping pussy, then outright moaned when he rubbed my clit. My knuckles tightened on the sides of the Switch as he moved his hand, giving me the friction I'd been so desperately craving while simultaneously making me want more, and more, and\u2014\n\n\"Oh!\" I gasped as he pushed a finger inside of me.\n\n\"You okay?\" he asked.\n\n\"God yes,\" I moaned, and he jostled me as he laughed.\n\nOn the screen, I hit another Item Box. Ashton kept doing his best to distract me, and honestly, he excelled at it. It was only sheer dumb luck that I managed to stay in first place as the third lap started, but the jingle indicating the start of the final lap only seemed to make him double down on his efforts.\n\nHe pressed his thumb against my clit as he worked his finger in and out of me. I whined softly, my thumbs shaking as I tried to steer my character on the screen. Something blew past me; I couldn't have even guessed which character it was. His thumb swept along my clit, working against it in a maddening, thrilling way.\n\n\"You play way more video games than I thought,\" I panted.\n\n\"Why do you say that?\" he asked, laughter threaded through his voice.\n\n\"Your thumb is\u2014unghhh.\" I shuddered as he pressed a bit harder, his laughter vibrating against my shoulder. \"Clearly, you work it out.\"\n\n\"Clearly,\" he agreed, then shoved a second finger inside of me.\n\nI cried out, unable to stop myself from writhing in his arms. That made him groan and I felt his cock twitch against me. As I took another corner on the track, I pressed back and Ashton groaned again, pushing his hips forward and rubbing himself against the slope of my ass.\n\nIt was too much. His lips on my neck, his hand cupping my breast, his fingers inside me as he finally gave in and used my body for his own relief... I was half a lap from finishing the race and slightly further from coming all over his hand. Biting my lip, I tried to grind against him, but his arms were holding me too tightly for me to help myself along the way. I whimpered and he shuddered, his own noises muffled as he kept rubbing his cock against the small of my back.\n\nA quarter lap away. I just needed to finish the race and then... \n\nThen what?\n\nThen I'd ask him to take his boxers off and then it would be his turn to race again and I'd... \n\nI would have to wait.\n\nWhoever thought up this dumb game clearly didn't think things through.\n\nI could see the finish line. I was in first again, somehow, not by much but by enough, but I needed... I needed just a little bit more.\n\nSlamming my eyes shut, I pressed the B button as hard as I could, moaning to drown out the sound of the brakes squealing in game.\n\nI heard the sound of the other racers crossing the finish line. If Ashton heard it too, he didn't react; instead, he plunged his fingers inside me harder as he ravished my clit. Sparks ignited inside me, a weightless feeling that radiated from my core and down my legs as I clutched the Switch with both hands. His hand tightened on my breast, not quite so hard as to cause pain, but enough to make me moan and lean heavily against his chest.\n\nJust as I did, the sound of Yoshi losing the race in twelfth place blared from the Switch.\n\n\"It's over?\" Ashton asked.\n\nI practically threw my Switch to the seat beside us and grabbed his arm. \n\n\"Don't stop,\" I gasped. \"Oh my God, please don't stop.\"\n\nHe took mercy on me and kept moving his hand, though when my orgasm hit, he was definitely laughing. Not that I cared; I was too busy trembling in his arms, my eyes squeezed shut and my fingers digging into his wrist. Waves of bliss seized my body; white light that had nothing to do with the storm outside the car flashed in my eyes. I cried out, gibberish spilling from my lips as he drew my orgasm out until my heart was racing so fast that I couldn't breathe and I had no choice but to collapse back against him.\n\n\"I think that counts as a forfeit,\" he whispered.\n\n\"Worth it,\" I mumbled, and his chest shook as he laughed.\n\n\"Does this mean I get to choose the next thing to remove?\" he asked.\n\n\"Give me a sec and I'll take my panties off.\"\n\n\"Oh, a freebie?\"\n\nI frowned, my mind still hazy. \"What?\"\n\nHis teeth grazed my neck again. \"I was gonna take my boxers off. I figure if you're gonna distract me like you did last time, it might help with, uh, access.\"\n\n\"Right,\" I said. \"It's your turn.\"\n\n\"It is,\" he said evenly. \"Though...\"\n\n\"Though what?\"\n\n\"I mean, if you forfeited, I'm the overall winner, so we could just stop here and...\"\n\nHe didn't finish the sentence, instead trailing his fingers along my thigh. My eyes opened and the afterglow of my orgasm was slowly replaced by uncontrollable butterflies.\n\n\"And what?\" I asked softly.\n\n\"And nothing, if you don't want to,\" he said. \"Otherwise...\"\n\n\"Otherwise what?\"\n\nHe kissed my neck. \"Otherwise I might ask if you have a condom hidden somewhere in your car.\"\n\nI did, in fact, have an entire glove box full of condoms in my car. Condoms I'd taken from the university clinic, condoms that hadn't seen the light of day since I'd put them in there, condoms that I was eager to use and terrified to admit I'd never had the opportunity to use.\n\n\"Ramona,\" he said when I didn't respond. \"We don't have to.\"\n\n\"It's not that,\" I whispered. \"It's just...\"\n\nHe squeezed his arms around me lightly, a comforting sort of pulse as he nuzzled my neck. \"It's okay if you don't. I promise. I'm not the guy who's gonna pressure you to do something you're not okay with, all right? I don't want that.\"\n\n\"I do want to,\" I said, hating how my voice shook. \"I just... haven't before.\"\n\nI don't know what I expected; I don't know if I thought he was going to laugh or push me away or suddenly decide that he was going to pressure me into it after all. All I know is that I was surprised when he brushed my hair back and kissed my shoulder lightly again.\n\n\"Well, if you want to, then cool,\" he said. \"And if you don't, or you change your mind, or you want to wait and do it some other time, or you want to do something else, that's also cool. Just tell me and we'll go from there.\"\n\n\"I... okay.\"\n\n\"Okay?\"\n\n\"I thought you'd make a bigger deal about it.\"\n\n\"Do you want me to make a big deal about it?\" His fingers moved comfortingly against my hip. \"I mean, it might take a couple days, but I can do the rose-petals-and-champagne thing if you want the whole luxury experience or something.\"\n\n\"No!\" I said, laughing. \"I meant like... I don't know what I meant.\"\n\n\"If I'm guessing right, you thought I was gonna suddenly turn into the kind of guy who would do anything to take your virginity like there's some kind of achievement you unlock by being someone's first,\" he said. \"But I'm not. The whole concept of 'taking' someone's virginity feels weird to me. It's not something you're giving me. It's just something you are or aren't.\"\n\nI blinked, turning my head slightly as thunder rumbled outside. \"Wow.\"\n\n\"What?\"\n\n\"You're just very... I don't know what the right word is.\"\n\n\"Hmm,\" he sighed. \"Probably like... oh, what's the word. You know, like, awake, but past tense?\"\n\nI pressed my lips together. \"Woke?\"\n\n\"That's the one.\"\n\nI lost it. Like there were actual tears dripping down my face, I was laughing so hard. \n\n\"You dork,\" I snorted. \n\nHe was grinning as he kissed my shoulder again. \"Yeah, sorry. I thought you knew.\"\n\nI shook my head, still giggling. \"Where'd you get so woke, then?\"\n\n\"As weird as this feels to say given our current, uh, situation, my mom,\" he said.\n\n\"You talk with your mom about this kind of stuff?\"\n\nHe shrugged. \"I mean, sort of. She's pretty chill about it. Like, it was never a big deal to talk about it in our house. But she definitely made sure I understood that my dick isn't capable of intrinsically changing who a woman is just because she happens to decide to have sex with me.\"\n\n\"Your mom sounds cool.\"\n\n\"I'd tell her you said that, but again, given our current situation... she's not that chill.\"\n\nIt made me giggle again, and when lightning flashed and lit up the car, he moved his hand to my chin and gently turned my head towards him. Then, as the light faded from the sky and our eyes, he pressed his lips to mine. \n\nThunder blasted above our little pocket of the world. I melted against him, the tension and indecision and nerves fading as we shared our first real kiss, and before the thunder had faded, I already knew.\n\n\"Ashton?\" I whispered against his mouth.\n\n\"Hmm?\"\n\n\"I have some condoms in my glove box.\"\n\nHe kissed me softly. \"You're sure?\"\n\n\"Yes, I put them there myself.\"\n\nHe laughed. \"You know what I mean.\"\n\n\"Yes,\" I said. \"I'm sure.\"\n\nHe loosened his arms so I could crawl forward for the third time, popping the glove box open and feeling around for one of the small foil packets. The screen of my Switch was still on, offering the bare minimum of light to the interior of my car. It was enough to see the earnest look in Ashton's eye as he took the packet from me.\n\n\"Can I take these off now?\" he asked, motioning to his boxers. \"Seeing as I won the last game and all.\"\n\nI grinned and nodded. \"I'm gonna take mine off, mostly because I want to.\"\n\n\"An excellent reason.\"\n\nI slipped my panties off quickly, leaving them on the floor of the car so I could watch as he removed his boxers. I bit my lip as he slid them down and revealed the thick cock that had been pressed against my back. He was still hard, incredibly hard, and his tip glistened with precum. I watched, shamelessly intrigued as he tore the packet open and put the condom on, then looked at me.\n\n\"It's probably gonna be easiest if you're on top,\" he said frankly. \"But we can try something else if you want.\"\n\nI shook my head and brought my legs under me so I could crawl forward. He sat back, reaching an arm out so he could help guide me onto his lap. Once there, he stopped me, bringing me forward so we could kiss again.\n\nThen, very carefully, he directed me to sit up on my knees while he moved his hand between us to grip his cock. There was another kiss, then he lined his cock up with my dripping entrance.\n\n\"Ready?\" he asked.\n\n\"Yes,\" I breathed.\n\nHis other hand moved to my hip and began to guide me down. The head of his cock split the lips of my pussy, nudging at my waiting hole. There was a slight moment of pressure, then the unfamiliar feeling of something hard and thick and warm entering me.\n\n\"Okay?\" he asked, his voice slightly choked.\n\nI nodded, and he pulled his hand out from between us and moved it to my other hip.\n\n\"Take your time,\" he murmured.\n\nI did, not because it hurt, but because I was enjoying feeling every inch of him as I took him inside me. There was no pain, just the sensation of stretching and pressure and, eventually, fullness. Once I felt his pelvis pressing mine, I stopped, sighing as that needful craving to be filled was finally satisfied.\n\n\"Still good?\" he asked, and that time his voice was definitely strangled, though he fought to keep it steady.\n\nI didn't answer. Instead, I kissed him, bringing my hand up to his jaw and caressing it as I started moving. He groaned against my mouth, his fingers digging into my hips as he squeezed so he could show me the best way to move.\n\nRegardless of Ashton's feelings about the concept of taking someone's virginity, I felt like I was giving it to him. And to me, that was good; in that moment, that was what I wanted. I wanted him to have it, I wanted him to be my first, I wanted to have the knowledge that this was the man I chose to have this experience with. I couldn't have asked for someone better; I couldn't have asked for someone who made me feel as comfortable as he did, who had made me laugh the way he could, who was so... right.\n\nHe was just so right.\n\nI kissed him as long as I could, only parting so I could gasp for air as I rode him. Ashton dipped his head to take one of my nipples in his mouth. I cried out as he did, that familiar feeling of euphoria collecting somewhere deep inside of me. It felt like his cock was hitting that spot, that he had found a place I'd never known was there, a place I couldn't get to on my own, a place I needed him to reach.\n\nAnd it was so good.\n\nI hadn't been expecting to come again, but as that ascension started, as my legs started to tremble and my muscles started to clench, I had to steady myself against Ashton's shoulders. He groaned as I clutched him, as I couldn't stop myself from digging my nails in, like I needed to hold something to keep from falling off the edges of the Earth.\n\n\"Gonna come again,\" I panted. \"Ash, I'm\u2014\"\n\n\"Oh, yes,\" he moaned, the sound muffled by my breasts.\n\nI shattered moments later. Beneath me, Ashton thrust up, making a noise that I distantly thought was probably the hottest thing I'd ever heard. I clung to him, lightning flashing and thunder roaring as my body broke and regenerated and exploded and imploded. His arms moved around my waist, holding me in place as he pushed up, my breasts bouncing against his face until he cried out.\n\nHis last few thrusts were erratic but hard, his cock buried as deep inside of me as it could go. Another flash of lightning revealed his head tilted back against the seat, his eyes closed as tension and relief swirled across his face, and then I was collapsing against him and he was hugging me to him as the world spun around us.\n\nFor an endless moment, we held each other. His fingers traced a gentle pattern against my lower back and his breath caressed my skin. When another flash of lightning lit up the car, I sat back and looked at him.\n\n\"You all right?\" he asked.\n\n\"Yes,\" I said. \"Are you?\"\n\n\"Fruck yeah.\"\n\nWe giggled immaturely, stopping only when he pulled me forward to kiss him again.\n\n\"Still raining,\" he mumbled a while later.\n\n\"Mm-hmm,\" I replied.\n\nHe tapped his fingers lightly along my skin. \"I have a proposal for you.\"\n\n\"My Switch is almost dead, we can't play Mario Kart again.\"\n\nHe laughed. \"Not that. Come over.\"\n\n\"To your house?\"\n\n\"Yeah. Stay the night.\"\n\nMy heart fluttered wildly. \"You know how pissed my mom will be?\"\n\n\"I mean, she's gonna be pissed about the car battery anyway,\" he pointed out.\n\n\"That's very true.\"\n\n\"So why not spend the night at my place and make it extra-worth pissing her off?\"\n\nIt was a good point. A very good point. And even if it wasn't a good point, I didn't care. I wanted to spend the night with Ashton. I wanted to sleep in his arms, to touch him, to hold him, to wake up beside him and give him my second time and third time and however many times I could, just like I'd given him my first time. I wanted to make up for the years we hadn't been friends and learn all the things about him that I'd missed.\n\nAnd maybe, just maybe, I wanted to see the look on my mom's face when she found out she hadn't been able to keep Ashton out of my life.\n\n\"So what do you think?\" he asked, running his fingers gently along my back as he broke me out of my thoughts.\n\nI bit back a smile. \"You know, she might've been right about you.\"\n\nHis hand stopped moving. \"What?\"\n\n\"You're a bad influence.\" I kissed him, letting him feel the grin on my lips. \"Just how I like my influences.\" \n\nHe laughed as thunder crashed above us. \"So, that's a yes?\"\n\n\"Yep.\" I slid off his lap, feeling around the rear shelf for my clothes. \"Let's go.\"\n\n\"Don't you want to get dressed first?\"\n\n\"Are you kidding? It was hard enough to get undressed in here.\" I rooted through the wheel well for my Chuck Taylors. \"Your house isn't that far. We can run.\"\n\n\"You want to run,\" he repeated.\n\n\"Mm-hmm,\" I said patiently.\n\n\"From here to my house.\"\n\n\"Yes.\"\n\n\"Naked.\"\n\n\"Yep.\"\n\n\"In a thunderstorm.\"\n\nThere was a good chance he thought I was crazy. I mean, the skeptical disbelief in his tone all but confirmed it. Rather than waste more time, I decided to entice him a little.\n\nIt might have been playing dirty, but I very much doubted that Ashton would mind.\n\nLeaning forward, I pushed myself slowly between the driver and passenger seats so I could get my keys from the ignition. With a providence that couldn't have possibly been planned, there was another burst of lightning, and I heard him inhale sharply from behind me.\n\n\"Do you really want to sit around trying to get your pants on in my backseat or do you want to take five seconds and run across the road?\" I asked as I grabbed the keys.\n\n\"Streaking is illegal, Ramona,\" he said virtuously, though his voice was strangled.\n\n\"Yeah, well, maybe I'm a bit of a rebel, Ash.\"",
        "He snickered. \"And your mom says I'm the bad influence.\"\n\n\"Come on. Run naked across the street with me, and I'll let you play with my tits again.\"\n\n\"Deal,\" he said instantly. \n\nBefore I could even react, he reached over and threw the door open. Wind blew into the car and I shrieked as rain splashed unexpectedly along my bare skin. Ashton grabbed my hand, tugging me out of the backseat as I giggled and clutched my clothes to my chest. He closed the door and stopped, pulling me in for a heated kiss as rain soaked our hair and bodies, then grabbed my hand as we rushed across the street for what I hoped was the beginning of a long frucking summer.\n\n**\n\nSpecial thanks to norafares, chasten, and OneAuthor for proofreading and feedback, as well as the amazingly awesome people who beta read. KW, AG, Paul M, Kevin Matheny, KZ, AP, ED, centralsquareguy, AS, KJ, N, and PM - thank you all for your support. And a huge extra-special thanks to my fiance for being a huge frucking nerd and helping me with some of the more detailed references. Since I didn't manage to work this line into the story, I'll share with you all one of the insults he was most proud of:\n\n\"I bet you're someone who picks Oddjob in GoldenEye and calls it ~strategy~\""
    ],
    "authorname": "MsCherylTerra",
    "tags": [
        "geek pride",
        "female virgin",
        "car sex",
        "friends",
        "video games",
        "nerd",
        "losing virginity",
        "thunderstorm",
        "games",
        "teasing"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/save-world-get-girl"
}
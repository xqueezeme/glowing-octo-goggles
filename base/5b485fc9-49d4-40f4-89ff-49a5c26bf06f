{
    "title": "Klaatu Barata Nikto Ch. 05",
    "pages": [
        "After wishing his father a good night Klaatu returned to the living room. Maya and his mom were still gabbing and that held no interest for the young man. He was tired anyway from the long drive. He turned around and went to bed. He woke up later that night with someone crawling into bed with him.\n\n\"Uh...\"\n\n\"It's only me, incest boy,\" said Maya. Klaatu sighed in response and kept silent.\n\n\"I'm sorry, Klaatu.\" Maya hugged him and caressed his arm. \"I've been teased all my life just like you. Thanks to you I escaped some horrible people and I'm already acting like a total bitch. Please forgive me. I'll try really hard to behave better.\" \n\n\"There's nothing to forgive.\"\n\n\"Thanks for saying that,\" replied the young woman and kissed him. \"You know, you have the neatest mom in the whole world.\"\n\n\"It's nice to know someone in this world appreciates her besides me. That excludes all the times I wanted to scream at her to shut up.\" Maya giggled.\n\n\"I find Betsy fascinating. She's been telling me stories about your father and the other band members. I can see why my mother fell in love with my father.\"\n\n\"I wonder why I never heard those stories.\"\n\n\"They're stories that wouldn't interest a guy.\"\n\n\"Oh. Uh, why don't we get some sleep? I'm still pretty tired. Are you going to sleep here?\"\n\n\"I will if you don't mind. Are you sure you don't want to do anything else besides sleep?\" The young woman gently caressed his prick through the fly of his pajamas.\n\n\"I'm pretty sure.\" He could feel his prick stirring to life.\n\n\"Are you super sure?\" The only thing Klaatu knew for sure right then was if he didn't screw Maya he wasn't going to get much sleep at all.\n\n\"Do you want to?\"\n\n\"I thought you'd never ask.\" Maya positioned herself so Klaatu could take her from behind. She was plenty wet so his prick slid in easily.\n\n\"Klaatu?\"\n\n\"Hmmm?\"\n\n\"All of a sudden I'm feeling famished. I'm going to get myself a snack. May I fix you anything?\"\n\n\"No thanks, Maya. Thanks for asking.\"\n\n\"Klaatu?\"\n\n\"Hmmm?\"\n\n\"Can't you take a hint?\"\n\n\"Whaddya mean?\" Maya wiggled her butt and pulled away causing Klaatu's prick to slide out of her cunt. She got up immediately and straightened her night gown.\n\n\"I'd like to think you'd have more consideration for me. I am carrying your child after all.\"\n\n\"But I thought you wanted to.\"\n\n\"That was before.\"\n\n\"Before what?\"\n\n\"Before I got hungry. Weren't you listening? Sheesh! You only think about yourself. I'll try not to wake you when I come back to bed.\" The dumbfounded young man watched Maya leave his room. He fell back on his bed and stared at the ceiling as if it would provide an explanation to what had just occurred.\n\n\"What was that all about,\" he asked aloud. His mother on her worst days made more sense than Maya did just then. No answer was forthcoming and he continued to stare at the ceiling until sleep once again claimed him. It seemed like he was asleep for just a few moments when he felt his shoulders being shaken.\n\n\"The answer's no,\" Klaatu grumbled. There was no way he was going to fuck anyone without his sleep.\n\n\"How do you know what the answer is going to be if I haven't even asked you the question yet, Klaatu? Besides, it's not a question,\" said his mother.\n\n\"Mom? What's the matter? Has something happened?\" Klaatu was wide awake now with a sudden adrenaline rush.\n\n\"I need you to go to the grocery store. Here's the list.\"\n\n\"Now? Mom, it's still dark out. What's so important about going to the grocery now?\"\n\n\"Maya is hungry. Go to the 24 hour store.\"\n\n\"There's plenty to eat.\"\n\n\"Not any more there isn't.\n\n\"What happened to it?\"\n\n\"She ate it all.\"\n\n\"That's impossible.\"\n\n\"Well, the shelves aren't completely bare yet but it's getting there. Go see for yourself. But not before you're dressed and ready to go to the store.\"\n\n\"I don't understand any of this,\" Klaatu mumbled as he hauled himself out of bed. \"She hardly ate anything on our way here.\"\n\n\"I already talked to your father.\"\n\n\"You didn't.\"\n\n\"I did and he was very surprised to hear that you knocked up Maya because he didn't hear it from you.\"\n\n\"I...uh...didn't want him to know yet.\"\n\n\"I guess not. Well, he knows now but don't worry about him lecturing you about unprotected sex. I already set him straight.\"\n\n\"You did?\"\n\n\"Yes, I told him like father like son and he shut right up.\"\n\n\"Thanks, Mom.\"\n\n\"Anyway, your father explained that Maya's metabolism is the problem but it shouldn't be a problem as long as she gets plenty to eat. That's our job. I asked him if this metabolism thing was contagious and he said not to worry.\"\n\n\"I guess Dad would know. Was there anything else?\"\n\n\"He did ask to talk to you after you returned from the grocers. Speaking of that, add cat food to the list. Gort is out.\"\n\n\"I bought a bag before I left for New Mexico. There should be plenty.\"\n\n\"Maya ate that too.\"\n\nKlaatu walked into the kitchen and surveyed the damage. It looked like every pot, pan, bowl, plate and utensil in the house had been used or was in use. The stove's four burners were going as well as the oven. Empty cans, bottles, cartons and other recyclables were stacked at one end of the counter. Maya was sitting at the table eating a huge of bowl of hot steaming rice. She looked up and saw Klaatu staring at her. He expected to see a bloated belly with all the food she was eating but she looked unchanged.\n\n\"You're scum,\" she said.\n\n\"What? What did I do?\"\n\n\"This is all your fault.\"\n\n\"Well, I'm sorry. What do you want me to do?\"\n\n\"I have a couple of suggestions,\" Maya replied. Her tone of voice told Klaatu he didn't want to hear the details. She was just being a bitch. \n\n\"Meow,\" he muttered. Klaatu wondered if he should ask her how cat food tasted.\n\n\"I heard that, mother fucker.\" Maya looked sheepish when she saw Betsy walk in at that moment and started shoveling more rice into her mouth.\n\n\"Why aren't you on your way, Klaatu?\"\n\n\"I'm going. I'm going.\" The young man put on his jacket and headed out to the car. \"How do you like that,\" he muttered as he got into the car. \"It shows you what happens when you confide in a girl. She uses it against you at the first opportunity. And what about Mom? She heard what Maya called me. A mother fucker! Yet Mom chose to ignore it. Women sure like to stick together.\"\n\nKlaatu's complaining to himself was interrupted by a strange feeling he got as drove past two SUVs parked down the block. The windows were tinted but he knew the vehicles were occupied. He also knew the occupants were Rev. Bryce's people or maybe even the reverend himself. As if to confirm his suspicion Klaatu noticed the headlights of one the vehicles illuminate. They were going to follow him. Well, they wouldn't have to follow him for long. The supermarket was only a ten minute drive.\n\nKlaatu parked his car near the market entrance and watched the SUV park about 20 yards away in the almost empty lot. He started slowly walking toward the vehicle. His idea was to put the occupants in a trance and instruct them to drive back to New Mexico. Klaatu walked only a few yards before he heard the engine start. The SUV started to move away. The young man realized they must be aware of his ability and were going to keep a safe distance from him until what? That, he didn't know. Darn it! That woman who was with Maya must have told them how it was done. He should have blocked her memory. \n\nKlaatu entered the store and got a cart. He took a quick look at the list his mother had given him. It looked like he'd need three carts at least. Most of the foods were high energy high calorie items that a runner might need if he were training for a marathon. He spotted a cake that said 'Happy Birthday' on it. The cake was discounted because it was a little smooshed on one side. He decided to get it as a peace offering to Maya. Besides, there weren't any other birthday cakes out yet.\n\nOnce he got the car loaded, Klaatu went next door to the donut shop and purchased a couple of maple bars for himself. He'd snack on them with his morning coffee. His escort trailed him back to the house. The young man imagined they were burning with curiosity about all the groceries he'd purchased. He hauled the groceries into the kitchen while Betsy put them away.\n\nMaya continued eating.\n\n\"What's in the bag,\" Maya asked.\n\n\"Donuts,\" Klaatu replied.\n\n\"I like donuts.\"\n\n\"I just got a few for my breakfast.\"\n\n\"What kind are they?\"\n\n\"They're uh...maple bars.\" \n\n\"I love maple bars. I can't believe you got maple bars for yourself and nothing for me.\" Klaatu wanted to point out that virtually all the groceries were for her but it seemed the wrong thing to say.\n\n\"Would you like a maple bar?\"\n\n\"Never mind,\" Maya exclaimed and burst into tears. She started sobbing. \"For all the consideration I get from you I might as well be back in New Mexico.\"\n\n\"Your ride is waiting for you just down the block if that's what you want to do.\"\n\n\"What?\"\n\n\"Rev. Bryce's men are sitting in two SUVs just down the block. If you want a ride back to New Mexico I'm sure they'll be glad to accommodate you.\"\n\n\"Betsy, Klaatu wants to turn me over to some bad men.\" She sobbed even harder.\n\n\"He better not,\" Betsy replied. She had just finished putting away the groceries and was now paying attention. \"Why would you want to say much less do such a hurtful thing, Klaatu?\"\n\n\"I didn't say that.\"\n\n\"You did too say that, didn't he, Betsy.\"\n\n\"I heard it too...I think.\"\n\n\"Look you two,\" said Klaatu. \"I was just trying to point out that Rev. Bryce has found us and we have to be careful.\"\n\n\"Well, why didn't you say that in the first place?\" Betsy replied. \"You'll have to excuse Klaatu, Maya. He has trouble understanding things sometimes. Why, I have to repeat something two or three times quite often before he understands me. A lot of the time he has trouble explaining things so that normal people like me can understand him.\"\n\n\"I understand you perfectly, Betsy. Maybe your son is retarded.\"\n\n\"I never thought of that. I hope not.\"\n\n\"I think I'm going insane,\" said Klaatu.\n\n\"That would explain a lot. Why don't you hypnotize them like you did Tammy Bryce?\"\n\n\"That was his wife?\"\n\n\"His second wife.\"\n\n\"Uh, I guess they figured out what I did from his wife. Right now they're keeping a safe distance from me.\"\n\n\"Don't worry, Maya,\" said Betsy. \"They'll have to go through me to get to you.\"\n\n\"I don't want either of you hurt,\" said Klaatu. \"Maybe I should go talk to Dad right now.\" He turned to go.\n\n\"Aren't you going to have your maple bars?\"\n\n\"You can have them.\"\n\n\"Thanks.\"\n\n*\n\n\"Hello again, Dad.\"\n\n\"Hello again, Klaatu.\"\n\n\"Uh, I apologize for not telling you about Maya's pregnancy. I guess I was too embarrassed to mention it after the talk we had about Wanda and the consequences of unprotected sex.\"\n\n\"That's not important now, son. Right now I have to tell you some things about Maya.\"\n\n\"I think everything's under control. I just returned from the grocery store with enough food to feed an army.\"\n\n\"That won't help for long.\"\n\n\"But you told Mom--\"\n\n\"I don't tell your mother everything. You must know how she tends to get confused about some things.\"\n\n\"I definitely know about that. So tell me what you didn't tell Mom.\"\n\n\"For a reason or reasons I don't understand, Maya is exhibiting typical pregnancy symptoms of a full blooded Martian female. It should have been a virtual impossibility with a half Martian.\"\n\n\"Is that bad? Can it be treated?\"\n\n\"It's bad. It's treated with a simple native herb...on Mars.\"\n\n\"What happens if she's not treated?\"\n\n\"Maya won't be able eat enough to sustain her calorie requirements. She'll eventually starve to death.\"\n\n\"But...that means I've killed my friend. She wouldn't be in this fix if I hadn't--\" \n\n\"Calm down, Klaatu. If we're going to save Maya I need you thinking clearly.\"\n\n\"I'll do anything to save Maya, Dad. But how?\"\n\n\"Perhaps her helmet might help protect her.\"\n\n\"But that's in New Mexico. Who knows if it still exists? On top of that I can't use my hypnotic powers on them.\" He related what happened when he tried to approach the SUV in the super market parking lot.\n\n\"I was afraid of that,\" Klaatu's father replied. \"Well, there's only one thing I can do. That's for me to contact the powers that be and explain the situation to them. Maybe they'll help and maybe they won't. As soon as they hear what I have to say they'll be sure to disable my ability to talk to you and your mother.\"\n\n\"Oh my gosh! Don't do that, Dad. Mom will be devastated if she can't talk to you. And I've just met you. This is so unfair.\"\n\n\"I don't think there's any choice when the life of someone we care about is at stake.\"\n\n\"Let me try, Dad. Give me some time to work something out.\"\n\n\"I don't know how much time we have, Klaatu. It's a gamble.\"\n\n*\n\n\"Where's Maya?\"\n\n\"She stopped feeling hungry for a while. Those donuts and the birthday cake seemed to hit the spot with her. That was nice of you to give her your maple bars. I know those are your favorites. Anyway, she went back to bed. She's been eating for hours and she's very tired. I'm going to do some cleanup and start cooking again. Would you like to help?\"\n\n\"I just want you to hold me for a while.\" Klaatu burst into tears when his mother embraced him. It was just like when he was a young boy and the teasing got too much for him. As usual, he felt like a hopeless screw-up even with these extra powers he acquired. The young man didn't know how to handle power. Klaatu began to wish he never knew about the spaghetti strainer.\n\n\"Don't cry, Klaatu,\" said Betsy. \"A woman gets all emotional when she's pregnant. I'm sure Maya didn't mean any of those mean things she told you. I remember I once called your father a poop head when I was pregnant with you and I've been feeling guilty about it ever since.\"\n\n\"I'm not crying about that, Mom. It's just that\u2014\n\n\"Another time I called your father a\u2014\n\n\"Shut up, Mother!\" The silence was deafening. Klaatu immediately knew he'd put his mother in a trance. It was another thing to feel guilty about. Well, perhaps Klaatu would put his mother's trance to use. He knew what he had to do."
    ],
    "authorname": "sourdough999",
    "tags": [
        "martian",
        "mind control"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/klaatu-barata-nikto-ch-05"
}
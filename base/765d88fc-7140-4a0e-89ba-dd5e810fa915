{
    "title": "A Girl Named Mitch Ch. 04",
    "pages": [
        "We've reached the end! Here is part four of four. If you haven't read the first three parts, you should do that first. As always, please rate comment and send feedback. All characters are over eighteen. Enjoy!\n\n*****\n\nCarl picked us up at ten the next morning, driving us back to his condo where Mitch threw her bags into her truck. Carl and Bridget went inside to give us some privacy. I'd managed to keep it together while we'd been packing up, but as soon as she pulled me into her arms I started to cry.\n\nMitch let me go for a few moments, stroking my hair as she held me. \"Sweetie, hey, it's okay.\" She pulled away slightly, smiling and looking me in the eye before brushing a tear from my cheek. \"It's not like I'm going to war. We'll be together again in just a few months.\"\n\nI could hear the emotion in her voice, how she was trying to be the strong one. \"I know.\" I forced myself to smile, and she pulled me close, rocking me gently.\n\n\"And when we do we'll have a big bed, and I'll have a kitchen to cook for you, it's going to be wonderful.\" I sniffled and let her hold me for another long moment, before she kissed my temple. \"I love you, Cindy.\"\n\n\"I love you, too. I love you so much.\" I forced a smile. \"Don't forget me.\"\n\nMitch grinned and kissed me. \"People don't forget the love of their lives.\"\n\nI let what she'd said sink in as she kissed me again, and let the truth of it surround me. It was probably somewhat na\u00efve to assume you'd be with your college sweetheart forever, but in that moment I knew I would be. And that calmed me somewhat. What was three months in the face of a lifetime?\n\nThat didn't fully stop the tears, but I was able to keep a smile as I waved goodbye, watching her drive down the street and around the corner.\n\n***\n\nDespite any epiphanies I may have had in my brother's driveway, what followed were the longest three months of my life. I worked at the diner, I saw some of my old high school friends, and I hid. My mother was seemingly terrified of me becoming an old maid, always assaulting me with the latest gossip about who was available in our small town. And apparently she'd been shopping me around, too, as I was asked on no fewer than three dates in the first two days.\n\nThe easiest thing would have been just to say I was seeing someone, but Mom would have demanded details, and I was scared to put her on that trail. Dad treated me with his normal polite disinterest. He knew Mom was doing her best to get me respectably married off, and that was good enough for him. Any talk about how well my team had done was met with a dismissive \"That's fine, Cindy.\"\n\nI talked and texted with Carrie often, but less so with Mitch, just because of my fear. I hated talking to her when my parents were home, which was most of the time, and I definitely couldn't talk freely with Charlotte around. She was eleven, and in full 'snooping little sister' mode. But I did remember how Carl had helped me, so I decided to do as much as I could for her. Which, when you're a preteen, means taking you places. I'd drive her to friend's houses, the community pool, the local ice cream parlor, etc. I let her talk about her school. She was just starting to be aware of the opposite sex, and she asked me a lot about what college boys were like. I knew she wasn't going to get any useful information from our parents, so I tried to give her some solid advice that went beyond 'just don't do it'.\n\nI thought about telling Tiwana, but she had gotten a summer job at one of the resorts on the coast, and I barely got to see her. Even that would have been scary, though. There are wonderful things about small towns, but there are some real downsides, too, the main one being that everyone knows everyone, and everyone is always aware of everyone else's business.\n\nWhat I really hated was the fear. The constant, ever present anxiety that someone was going to find out I was a lesbian, and that the information would inexorably make it's way to my parents' ears. And what really bothered me was the wrongness of it all. I'd been taught since birth that homosexuality was wrong, immoral, against God's plan, and all that.\n\nAnd it had all been bullshit. There was nothing more right than being with Michelle, loving and being loved by her. What had been wrong was trying to make relationships with guys I didn't love work, forcing myself to be intimate with men I had no desire for. God had made me exactly who I am, and He'd gifted me with a wonderful partner, who loved and supported me, who made me feel alive and vibrant in ways I hadn't known were possible.\n\nI was with someone incredible, but I would be reviled, vilified and rejected just because of her gender, with no regard at all to how amazing she was. I wanted to scream at the unfairness of it.\n\nOne of my former classmates got married in June. We hadn't been close, but our parents knew each other so we went to the wedding and the little cake and punch reception afterwards. I had tears in my eyes as I watched Abigail's father walk her down the aisle. My mother had completely misread my feelings, patting me on the arm, stating \"Don't worry, sweetheart, it'll happen. Y'know, there'll be plenty of nice young men at the reception.\"\n\nObviously that hadn't been my issue. It was that my father would never walk me down the aisle. My mother would never beam proudly as I posed in my wedding dress. They would do everything in their power to make me feel shame in my choice of partner, caring nothing about how happy I was, interested only in how my unnaturalness made them appear to our small town society.\n\nI looked around the hundred and fifty or so people in the packed church, and wondered who else was hiding. Who was in a loveless marriage that they felt they had to keep up? Who'd been silently forced to give up their great loves to fit in to our bigoted, small-minded society?\n\nLuckily there wasn't any dancing at the reception, but I still had several potential suitors chat me up. I smiled and made polite conversation, interjecting often how adverse I was to starting any summer romances before returning to campus.\n\nIt was Pride Month, and I didn't see a single rainbow flag in my town, which didn't surprise me at all. The news covered the parades in Atlanta, and Bridget sent me some pictures of a rally from downtown Savannah. My father would stoically roll his eyes when anyone would mention it, muttering under his breath about the degrading of our country's values.\n\nJuly arrived and passed in much the same manner, and I breathed a sigh of relief when the calendar finally turned to August, so I could start counting the days instead of weeks and months. I know you're probably waiting for something dramatic to happen, but it never did. I did make the change to take my dad off of my accounts. I didn't hide it from him, but he didn't complain. And as soon as I had the money transferred I felt a huge wave of relief. Other than my dad still carrying me on his insurance and the family phone plan, I was completely financially independent.\n\nThe weekend before I was headed back to campus Carl came and picked me up, and as we pulled up to his condo I saw a blue truck sitting in his driveway.\n\n\"Surprise.\" Carl was grinning ear to ear, but my eyes were locked on the tall, dark-haired woman leaning against that truck, my smile stretching my cheeks as tears rolled down my face.\n\nI unbuckled my seatbelt, almost jumping out of my brother's car before it stopped. Mitch was beaming, wearing that radiant grin of hers below her glorious blue eyes, and I threw myself into her arms, wrapping my legs around her waist as she twirled me around, whispering into my ear.\n\n\"God, I missed you, baby. Oh, I love you.\"\n\nI slid my legs down so I was standing on my own two feet, holding tight to her. \"I can't do that again. I can't be away from you like that again.\"\n\n\"I know. Next summer, we'll find a way. Promise.\" She brushed a tear from my cheek with her thumb and kissed me, and I whimpered in joy as our lips made contact for the first time in nearly three months. Suddenly I was whole again, and the world seemed to light up even as my eyes stayed closed.\n\nEventually we separated, and I giggled in response to the mischievous Mitch grin I was staring at.\n\n\"Hi.\"\n\n\"Hello. I missed you.\" I felt the knots created by the summer unwinding as she held me. \"Did you miss me?\" I looked up through my lashes at her, seeing the emotion raging in her eyes, even as she smirked at me.\n\n\"Sometimes.\" She kissed me on the forehead. \"Most of the time.\" A kiss on the cheek. \"Every second.\" She brushed the hair away from my face, and pressed her lips to mine. This kiss was less desperate, and I was able to enjoy it more, our tongues caressing each other as I savored her soft lips. When it ended I just leaned against her and let her hold me, taking in the smell of her, the feel of her breath in my hair. I was home, safe and loved, here in Mitch's arms.\n\n\"Hey, you two, we're going to order pizza. If you want any say in the toppings, come inside soon.\" Carl was smirking at us from the front patio, and I turned towards him without taking my arms from around Mitch's neck.\n\n\"Okay, go on.\"\n\nMitch gave me another kiss. \"We should go in. Don't want them ordering a bunch of rabbit pizzas.\"\n\n\"Rabbit pizzas?\" We started walking toward the front door, arms still around each other.\n\n\"Yeah, y'know, pizza with rabbit food on it. Like onions and green peppers.\"\n\n\"I love green peppers.\"\n\n\"God, I'm in love with a heathen.\"\n\nI laughed and tightened my arm around her waist and we went inside.\n\n***\n\nTwo nights later we were in our apartment, lying pressed together in our new bed, sharing soft kisses as our heart rates tried to return to normal.\n\nI nuzzled into Mitch's shoulder. \"Mmm, I missed that.\"\n\n\"You're not the only one. I've fallen asleep every night thinking about it.\"\n\n\"Really, little old me?\"\n\nShe pulled me close, nuzzling into my hair. \"Yeah, you. The way you smell, what it feels like to touch your skin.\" Her hands ran down my back and over my backside, making me sigh. \"The adorable sounds you make. But mostly just being near you, holding you. I missed it every second.\" Her long arms let her trace a finger through my sex from behind, making me gasp and move closer, which, of course, let her go deeper as she kissed my neck. I was just starting to relax into it when she stopped.\n\n\"But seriously, fall break, you're coming home with me.\"\n\n\"You brat!\" I slapped her shoulder. \"You have to tell me that now?\"\n\n\"Well, I have to tell you sometime. I've spent the last two summers talking about you. Mom and Dad will string me up without a proper introduction soon.\"\n\nI giggled. \"Mitch, I've met your parents.\" It was true. They'd been to a few of our matches, especially the ones in Florida. Her dad was, well, let's just say Mitch came by her bombastic personality honestly. Her mom was quiet, always smiling, the kind of woman you're just sure gives the best hugs.\n\nI hadn't got to experience one, as we aren't supposed to go up into the stands on the road. They'd been very friendly to me in our brief interactions, but I'll admit I was nervous about spending more significant time with them.\n\nMitch turned on her side facing me. \"They really want to spend some time spoiling you.\"\n\n\"Spoiling me?\"\n\n\"Yeah. Mom'll feed you and buy you stuff, and Dad, well, Dad will let her.\"\n\nI pouted my lips, letting my voice slip back into childhood. \"What if they don't like me? What if I'm not good enough for their little girl?\"\n\nMitch laughed. \"Cindy, have you seen you? Or met you? You are not the one marrying up here.\"\n\nI couldn't help my grin. \"Marrying?\"\n\nMitch was just wearing that confident little smirk. \"Well, maybe someday. If you're good.\"\n\nI ran a finger down her sternum. \"You're the one who wants to marry up. Shouldn't you be good?\"\n\n\"Well, shucks,\" Mitch rolled me onto my back, \"I think you might be right.\" She began to kiss down my body, and I relaxed back into my new bedding as the woman I loved took me to heaven over and over.\n\n***\n\nI was floating as Mitch held me, my whole body buzzing at the intensity of what I'd been experiencing for the last two hours. Mitch's arm was around me, holding my breast as her thumb gently tracing one of my nipples. It felt lovely.\n\n\"Cindy?\"\n\n\"Hmm?\"\n\n\"I did want to ask you something, see if you wanted to try something.\"\n\n\"Mm, I don't think I could try anything else tonight.\"\n\nShe kissed the back of my head. \"Not for tonight. Wait here.\" Mitch climbed out of bed and walked out into our living room. I propped myself up on my elbow so I could watch her impressive figure move. She came back into our bedroom carrying her laptop, climbing under the sheets but sitting up against the headboard.\n\n\"What are we looking at?\"\n\n\"This.\" She clicked on a link, which brought up a group of pictures of women wearing, well, something. \"Mitch, what is that?\"\n\nHer voice was unsure, very unlike her. \"It's a strap-on.\"\n\nI almost asked what it was for, but that was blindingly obvious. \"You want to use that on me?\"\n\nMitch answered quickly, putting her hand on mine. \"Only if you want me to.\"\n\n\"Mitch, I'm not sure.\" The pain of being with Ethan swam back up into my consciousness. Mitch could obviously see it in my face, and her face was the picture of concern. She kissed the back of my hand.\n\n\"Cindy, when you were telling me about Ethan, about, y'know, well, I had so many fantasies of taking you with one of these, showing you how it's supposed to feel.\"\n\n\"What if it hurts?\" My voice cracked a little as I spoke.\n\n\"Then we stop. But I don't think it will.\" I still wasn't sure, so she continued. \"Cindy, do you like it when I put my fingers inside of you?\"\n\nThe memory pushed away the fear, and I blushed. \"Yeah. I love it.\"\n\n\"And when Ethan did?\"\n\nI breathed out and shook my head. \"He didn't do it often. But, no.\"\n\n\"See what I'm getting at? I really think you'd like this, but it's your decision.\"\n\n\"Have you ever used one before?\"\n\nMitch shook her head. \"Nope. But I'm a quick learner. Unless it's math.\"\n\n\"Ha. Okay. I trust you.\"\n\nWe spent the next half an hour looking at the various options, comparing prices and reading reviews, until we finally settled on one that didn't look like a molded penis. It had two interchangeable sizes with a lot of texture on the phallus.\n\nMitch hit the 'order' button, and it was on its way.\n\nLuckily I had things to distract me before it got here. On Monday we went shopping for groceries and other things we needed for the apartment. It's amazing how many little doodads you need in a real place. A shower curtain, a bathmat, dish towels, toilet paper, the list goes on and on. In all we dropped over two hundred dollars on food and sundries.\n\nCarrie got in Tuesday morning, immediately heading over to check out our new digs, and we spent the afternoon watching the U.S. Open. Thanks to Mitch springing for Tennis Channel Plus we were able to stream any match we wanted to the T.V., which meant we spent over an hour watching Iryna Baraskova's first round match. Carrie wouldn't let us change the channel. She was absolutely transfixed. I guess we understand why now.\n\nAt the time I scowled at Mitch when she gave me a knowing look. I hate that she's always right about those things.\n\nBarbara, the Freshman I'd mentored some last year, Carrie, and I were all having lunch on Friday, while I kept checking the line for Mitch. Eventually I saw her, and she gave me a kiss before sitting down with her tray.\n\nBarbara set her fork down. \"So what's everyone doing tonight?\"\n\nCarrie shrugged. \"Should be some good welcome back parties. You guys in?\"\n\nMitch shook her head emphatically. \"Nope. We have plans.\"\n\nI looked at her in consternation. \"We do?\"\n\n\"Yep.\" Mitch held out her phone to me, which was showing two notifications. One from UPS that our package had been delivered, and one from our building saying they were holding a package at the front desk.\n\nAn electric thrill ran through my body, my cheeks suddenly burning crimson. \"Oh, yeah, our plans, yep.\" Oh, it was getting hard to breathe.\n\nBarbara was incredulous. \"Seriously? You two haven't broken in your apartment enough already?\"\n\nMitch just flashed that self-satisfied smile. \"Tonight's special. Or it will be.\" Her foot hooked around the back of my leg, making my blush deepen. \"But you're all welcome over tomorrow afternoon to watch the Open. I'm making a blooming onion.\"\n\nAs soon as Mitch's last class was over we headed home, and the receptionist in the office handed over a small, nondescript brown box when we asked. Mitch just smirked at me as we walked hand in hand up to our apartment.\n\nMy mind was racing. What was going to happen when we closed the door? Was she just going to take me? Most of the time I didn't mind that, but today I was really nervous. Mitch could usually tell what I needed, though, and today was no exception.\n\nI closed and locked the door behind us as she set the package down on the counter. She closed the distance between us and kissed me deeply, my nervousness flowing away like it always did when we touched, and my body began to respond.\n\n\"You hungry, baby?\"\n\nI nodded. I'd just picked at my lunch after realizing what was waiting for me back at the apartment.\n\n\"Okay, I'll make some dinner. Go relax.\" We shared another quick smooch, and Mitch headed into the kitchen and pulled out a large pot, beginning to fill it with water. My eyes found the package, still sitting benignly on the counter. I gingerly picked it up, like it might contain a bomb or a live cobra. I turned it around in my hands, but barring the spontaneous development of X-ray vision I wasn't going to be able to see anything unless I opened the silly thing.\n\nI took it over to the couch, using my keys to slit open the tape. I glanced up at Mitch, who was happily working away in the kitchen, before pulling the blue and purple package out of the box.\n\nIt was surprisingly light, just in a blister pack. The two phalluses, both a light blue, were prominently displayed. One was eight inches long and thick, while the other was two inches shorter and more slight.\n\nThe actual straps were black, with an O-ring in the front where the phalluses slipped through. It was definitely my mathematical mind trying to distract me here. If I could figure out exactly how the thing worked maybe it would scare me less.\n\n\"So what do you think?\"\n\nI jumped at Mitch's voice, before laughing at her amused expression. I ran my finger over the plastic still covering the larger phallus. \"It's big.\"\n\n\"I think you can handle it.\" She nodded towards the stove. \"I've got spaghetti on the stove and sauce simmering with the meatballs. Gotta carbo-load for tonight.\" She popped her eyebrows at me.\n\nI answered, trying to be playful, but it came out more scared. \"You'll be gentle, right?\"\n\n\"Of course. And if you say stop, we'll stop. Promise me you'll say to stop if you want to. Don't suffer through for me. Remember, my fantasy is about you loving this, so if you don't it won't be any good for me, either.\" Her brilliant blue eyes bored into mine and I nodded. She went back into the kitchen, and I split open the package plastic, pulling out our new toy. The feel of the soft but firm plastic was similar to what I remembered of the real thing, but at the same time it wasn't going to fool anyone. I took a deep breath. This was one of Mitch's fantasies, and I wanted to give it to her. And maybe she was right, maybe it would be different. Everything else was.\n\nWe had a lovely dinner. You can really improve the flavor of even frozen meatballs by simmering them in the sauce instead of just baking them, according to Mitch, anyway. She also lit candles, which hadn't been allowed in the dorms. The whole apartment smelled amazing.",
        "Scheduled sex tends not to be romantic. It's even worse when you're nervous about the whole thing to start with. But Mitch was a magician. We cleaned up after dinner without even mentioning our new toy. I stood at the sink and washed while Mitch dried and put away, and every time she passed by she'd touch me. A hand on the waist, fingers on my shoulders, and every little contact made me more and more aware of her physical presence.\n\nAfter we finished I thought sure she was going to lead me back to the bedroom, but she didn't. Instead we cuddled on the couch watching the night session from New York, talking tennis, and then not talking and just holding. And then came gentle kisses, sweet nuzzles, and soft caresses before Mitch stood and guided me to my feet.\n\nI was so lost in her that I barely noticed her scoop the strap on up as we headed to our room. We stood at the edge of the bed, slowly undressing each other, and when I was nude Mitch guided me into the center of the mattress.\n\nShe set her new accoutrement at the edge of the bed and crawled over me, finding my mouth with hers and kissing me deeply. Any anxiety I was still feeling was rapidly dribbling away as Mitch moved her lips to my ears and then down my neck. She spent some time on my breasts before moving further south, and I was fully wet and aroused by the time she took my sex into her mouth.\n\nWe'd done exactly this a hundred times before, which I knew was precisely what Mitch was going for, trying to put me totally at ease. And as my first orgasm rolled over me, I'd say she succeeded.\n\nShe took me almost all the way back to the promised land a second time before she kissed my inner thighs and turned me onto my stomach. This was different, and I gasped as Mitch began to kiss down my spine. She worked slowly, caressing my bottom as she headed further south.\n\nMitch rose up and grasped my hips. \"Get up on your knees, baby. Let me see that beautiful butt of yours.\"\n\nI obeyed, sticking my backside wantonly into the air. As soon as I did Mitch slid her hand between my legs, caressing my sex from front to back before pushing two fingers deep inside me. I moaned into the pillow. It was perfect, and in and out she went. I felt wanton and primal, offering myself to my mate.\n\n\"Don't move.\"\n\nI felt her weight leave the bed, and I could hear her working the metal clasps on the strap on. Moments later she was kneeling behind me. The length of the phallus slid between my legs and glided against the dripping wetness of my sex, followed again by Mitch's fingers. She was using my own nectar to lube it up, and my hands gripped the edge of the mattress as I prepared for what was coming.\n\nI felt the tip press against my opening. \"Ready?\"\n\n\"Uh-huh.\"\n\nMitch's hands tightened on my hips and she pushed inside me.\n\n\"Ohhh my god!\" It felt amazing, completely different from anything I'd experienced before. Mitch pulled out and drove in again, deeper this time, and I pushed my hips back to increase the penetration. My lover began a steady rhythm, and I could feel her thighs touch mine with every thrust as the texture of the phallus played over the sensitive skin of my entrance.\n\nEvery time the blue length drove in it hit a spot deep inside me that sent pleasure streaming from my pussy out into my limbs, all the way to my fingers and toes. I pushed myself up onto my elbows, bettering the angle, and we settled into a steady rhythm that set my whole body vibrating with pleasure.\n\n\"Is that good, baby?\"\n\n\"Uh-huh.\" I somehow managed to squeak the words. \"Don't stop, please.\"\n\n\"Oh, I won't. Promise.\" The confident husk in her voice sent a thrill up my spine, and I settled back into the glorious rhythm she was setting. I could hear the wet sounds of Mitch's penetration, something I'd never experienced before. And the building, thrumming pleasure, notching up with each blessed stroke, was beyond heady.\n\nI have no idea how long we'd been going when Mitch leaned forward. I was just starting to worry that I wasn't going to get there before one of us tired, remembering statistics I'd read of how few women could orgasm from penetration alone.\n\n\"Do you want to come, sweetheart?\"\n\nOh, god, yes, I needed to come. I was desperate for it. \"Oh, please.\"\n\nHer hand slipped around my leg, over my lower abdomen, through the downy blonde hair on my mons and over my clit.\n\nI groaned, wanton and lustful as my orgasm went from questionable to inevitable, and my muscles coiled in preparation for release. And suddenly, after several more exquisite moments, the dam broke and I howled into the night as I pulsed and spasmed around the still stroking length inside me.\n\nShe slowed as I began to come down, the phallus slipping out of me as I collapsed onto the bed. I rolled over, holding out my shaking arms. She covered me, kissing me deeply before pulling away.\n\n\"Good?\"\n\n\"Yes.\" I nodded, wrapping my legs around her waist. I reached down between us, grasping the length still attached to Mitch's lower torso and guiding it inside me. \"More?\"\n\n\"So much more.\" She began stroking again, filling me beautifully as she hovered above me. I rocked my hips up with every stroke, and it felt wonderful, but what was really wonderful were her eyes. She stared into mine with such incredible passion and intensity. I have no idea how simple, boring me could inspire that kind level of feeling in someone as incredible as Michelle Kirkpatrick.\n\nBut I did, and it was all in her eyes. I wasn't always the quickest to pick up on other people's feelings, but I couldn't deny what I was seeing. She wanted nothing more than to be close to me, to make me happy and give me pleasure. And my heart broke with love for her. She kissed me, and I sank into the feeling. I belonged completely to her, and I wanted just this, forever.\n\nWhen my next orgasm found me it was more soul than body, as I moaned in cadence with the pleasure. It was the most intense, whole being experience of my life, and when it passed I was just desperate to be held close by the woman I loved.\n\nShe slipped out of me, and for a horrible moment she wasn't touching me as she divested herself of our new toy. I whined pathetically as I reached for her. She had it off in a jiff, though, and moments later she was pulling me into her embrace.\n\nMy head rested on her strong bicep as her other arm circled my waist. She threw her leg over me and I was completely wrapped up in her, blissfully and deliriously happy.\n\n\"Was that good?\" Mitch asked.\n\n\"Mm-hm. So good. I love you.\"\n\n\"Oh, baby, I love you, too.\"\n\n\"We can do that again, right?\"\n\nMitch laughed. \"As much as you want. But it's time for bed, isn't it?\"\n\n\"Mm, yeah.\" We slid off the bed so we could turn down the sheets, and when I climbed in Mitch sat on the edge of the bed.\n\n\"You need anything?\"\n\nI shook my head. \"No. Just cuddles.\" I reached out to her, smiling in that innocent, girlish way that I knew made Mitch crazy. It had the desired effect, as my lover slid into bed with alacrity, kissing me deeply and pulling me close. I lay my head on her chest, falling asleep listening to the soft sound of her breathing and the steady, powerful beat of her heart.\n\n***\n\nThe cuddles lasted straight through 'til morning, and I woke up still wrapped up in Mitch's arms. She was awake already, her fingers running up and down my skin under the covers.\n\n\"Morning, sleepyhead.\"\n\nI grinned at her and stretched under the sheets. \"Mmm, so comfy.\" I pressed myself back against her. \"Tired. Some chick wore me out last night.\"\n\nShe tickled my side. \"You loved it.\"\n\nI giggled. \"Yeah. A little sore this morning though. It's been awhile. A good sore, though.\"\n\n\"You sure? Did I go too hard, or too long?\"\n\n\"Oh, no such thing. It is weird though. I remember feeling like this, y'know, before, but this is different. This makes me happy.\"\n\n\"Well, it's partially because I'm amazing.\" She was grinning that big Mitch grin, which made me laugh.\n\n\"You brat.\"\n\nShe put her arms around me and settled back into her pillow. \"Jimmy asked me one time if lesbians don't like dick why do they like strap-ons.\"\n\n\"Seriously?\"\n\n\"Well, he was cruder about it, but yeah.\"\n\n\"What'd you say?\"\n\n\"I asked him if he liked getting blow jobs. When he said he did I asked if it mattered to him if the person giving him one was a guy or a girl. I mean, it would feel good either way.\"\n\nThat made me laugh, but the implication wasn't lost on me. Last night had proven there had never been anything wrong with me. I was just gay, and when my gorgeous butch girlfriend took me, I could enjoy it every bit as much as any straight girl could enjoy their boyfriend. Probably more, seeing how long it had lasted. And trying to replicate that feeling with any guy would, for me, be completely pointless.\n\n***\n\nAs the semester really got going I just loved what was happening. Mitch and I would drive into campus every morning and head home after our evening workouts. Mitch would cook a few nights a week, and we ate dinner at our little table almost like grownups. I helped when I could, but Mitch seemed determined to win my heart through my stomach.\n\nI didn't have any desire to tell her the deed was already done. I can't tell you how many fantasies I had that this was my life, that we had graduated, and were adults working, married to each other. That I was going to have Mitch by my side, holding me every night, loving me every day, for the rest of my life. The very thought would bring a tear to my eye.\n\nI also didn't see how it was possible. I knew, without question, that my parents wouldn't allow it. It seems almost silly looking back on everything now, but walking away from my parents, from my family, had never occurred to me. Being disowned, however, that had presented itself to my imagination many times, and it terrified me. I'd been Aaron and Valerie Spencer's daughter my entire existence. It'd been the defining reality of my life since the day I was born. What was I without it? Still, those questions didn't need answers immediately, as graduation and the onset of real life still seemed an eternity away.\n\nWe had people over on a regular basis, which Mitch always made fun. I remembered company being a super stressful experience growing up, like Mom's entire self worth was being judged, mostly by my dad.\n\nBut being with Mitch, I finally understood that having people over wasn't about showing off, (well maybe just a little, but in a fun way), it was about spending time with people you cared about and having fun. The first time we had Carrie and her boyfriend du jour over I'd been frantically cleaning the bathroom while Mitch was in the kitchen, singing to herself. I was furious at her. Didn't she know how important this was?\n\nI was scrubbing the slightly discolored toilet, which had been that way when we moved in, when Mitch appeared behind me and lifted me to my feet. There were tears in my eyes, but Mitch just held me to her. \"Baby. It doesn't have to be perfect. They're not coming to see our bathroom.\"\n\n\"I don't want them to think we're pigs.\"\n\n\"We aren't. Have you seen Carrie's dorm room?\"\n\nThat made me smile. She wasn't a slob, but Carrie wasn't the most orderly person on earth, either. Mitch tightened her arms around me and rested her chin on my shoulder. \"You okay?\"\n\nI turned in her arms and let a few sobs slip free as she held me.\n\n\"Do you want me to call them and cancel?\"\n\nI shook my head. \"No, you worked so hard on dinner.\"\n\n\"Are you sure?\"\n\nI nodded, forcing a smile and giving Mitch a little kiss. I knew I wasn't fooling her, but she let it drop. I managed to have a good time, and Mitch didn't bring it up again until they were gone, and we were snuggled in bed.\n\n\"You want to tell me what that was about before?\" Mitch was holding me from behind, big-spooning me and whispering in my ear.\n\n\"It's just, um,\" I took a deep breath, feeling the warmth and safety of my lover. \"It's hard. Company coming, it was stressful.\"\n\n\"Really? Why? It's supposed to be fun, y'know.\"\n\nI smiled. \"I know.\" I steeled myself, and I think Mitch was going to let it go, but I wanted to tell her, so I opened a dark closet in my mind. \"One time, when I was nine or so, we had Pastor Greaver and his wife over, and Mom overcooked the roast, and it was a little dry. Our guests were both complimentary, and grateful, and I didn't think it was a big deal until they left.\n\n\"We kids were sent off to bed, but I came out for a glass of water to keep on my bed stand. I listened as my father scolded my mother. He said the meat was unacceptable, how disappointed he was in her, and he asked her how he was supposed to be respected in the church if he couldn't bring the pastor home for a decent meal. He just kept saying these horrible things in this cold, vicious voice. She was in tears, saying how sorry she was, begging for forgiveness.\n\n\"He just left her there, crying in the kitchen, cleaning up. I so badly wanted to go help her, but I didn't know what Dad would have done if I had, so I slunk back to my room like a coward. After that I was terrified anytime anyone came over. I'd always do everything I could to help, but I could always see how scared Mom was.\"\n\n\"Oh, Cindy.\"\n\nI let the tears come as Mitch held me close and kissed the back of my head.\n\n\"Cindy, you know I would never treat you like that, right?\" I nodded, and Mitch continued to whisper to me. \"Real love isn't like that. What your dad did, that was abuse. Making someone earn love is abusive, plain and simple. I love you to the moon and back, and you never, ever have to earn it. It's yours, just because you're you. Okay?\"\n\nI turned in her embrace, tears streaming as my heart broke with love for the woman holding me. Her love was a perfect gift, one I still felt I didn't fully deserve. Was it because I felt I hadn't earned it? I'd always had to earn my dad's love, or at least his approval. That was the only thing I knew how to do. But here it was. A gift, if I could just accept it. And Mitch was right, that's how love was supposed to be. I'd never make her earn my love. It was hers, and her love was mine, which meant I could let myself just belong in her arms.\n\n***\n\nI got an object lesson of exactly how a family was supposed to treat one another over fall break. I actually blew off my last class on Thursday so we could leave for her parent's house at lunchtime. When I'd Googled directions it said the trip would take about seven and a half hours for the drive, but Mitch's bombastic personality extended to her driving, and we got there before seven.\n\nWhen we pulled into the driveway her mom and dad were waiting on the porch. There were definitely butterflies swirling around in my stomach. Would they like me? What would I need to do to win their approval?\n\nMitch hopped out of her truck and opened her arms as her mom gave her a big hug. \"Oh, sweetheart, it's so good to see you.\"\n\n\"Hi, Mom.\"\n\nI quietly opened my door and climbed out, standing silently on the other side of the truck. As Mitch and her mom talked.\n\nHer mom stood back and looked her daughter over. \"It looks like they're feeding you okay.\"\n\n\"Yeah. Five pounds of muscle. Check it out.\" Mitch flexed her impressively toned arm, making her mom laugh and slap her shoulder playfully.\n\n\"Oh, Michelle. Go hug your father. He misses you.\"\n\nMitch jumped to obey, and her mom fixed her kind gaze on me, holding out her arms as she walked around Mitch's truck.\n\n\"Oh Cindy, it's good to see you.\"\n\n\"Hi, Mrs. Kirkpatrick. Thanks for having me.\"\n\n\"Oh, pish. It's an honor. And I'm Stacy.\"\n\nThe blush I was already wearing deepened as she wrapped me in her embrace. When she let me go Mitch and her dad were digging our bags out of the back. Mrs. Kirkpatrick linked her arm in mine. \"I hope you're hungry. I made homemade pizza. It's Michelle's favorite.\"\n\n\"I'm starving. Mit, ah, Michelle has told me so many amazing stories about your cooking.\"\n\n\"Oh, you're sweet.\"\n\nShe led me inside to an informally set table and the amazing aroma of garlic and oregano. Her dad dished up slices of the rectangular pie, all while holding a spirited debate with his daughter about the Saturday's Florida-Georgia football game.\n\nIt was a little weird hearing my girlfriend exclusively referred to as Michelle, but she fit here. And her parents were unerringly kind to me.\n\nHer father, who insisted I call him Jack, looked across the table at me, pointing towards his daughter. \"I can't believe I raised a damn traitor, Cindy. She grew up on Gator football.\"\n\n\"Hey! Cindy's a Bulldogs fan, too!\"\n\n\"She's from Georgia, Michelle. That's understandable. You though,\" he shook his head.\n\nI smiled and leaned over to Stacy. \"Are they going to be okay watching the game together Saturday?\"\n\n\"Oh, sweetie, they're always like this. They love it. He was just miserable when she went away to college.\"\n\nThey continued their spirited debate throughout dinner and into the kitchen as they cleaned up after the meal. Stacy led me into their living room, sitting down next to me on the sofa, holding my hand in both of hers.\n\n\"Now, tell me all about how you two met.\"\n\nI grinned and told the story, listening to the easy banter and laughter coming from the kitchen.\n\n\"So she's a good girlfriend? Makes you happy?\"\n\n\"She's the best. Always smiling and making me laugh. I get too intense sometimes; she reminds me life isn't all about Tennis and studying.\"\n\n\"I wished she'd studied a little more in High School, sometimes.\"\n\n\"She's working hard now. You'd be proud of her.\"\n\n\"I am, but I don't think I'm the one she wants to make proud.\"\n\n\"Her dad?\"\n\nStacy laughed. \"No, silly.\" She put her hand on my knee and shook it. \"You. When you first met, all she could talk about was how smart her new friend was. That, and how pretty she was. She wants you to be proud of her.\"\n\nI blushed, not able to think of anything to say.\n\n\"Now, we're going out for a nice dinner Saturday night. Did you bring anything nice to wear?\"\n\nI grimaced. \"Not really. Michelle didn't say anything about it.\"\n\nShe patted my leg, looking absolutely gleeful. \"That's okay, dear. We'll go shopping Saturday morning. My treat.\"\n\nI heard the sound of the dishwasher start, and Mitch and her dad made their way into their family room, turning on the Thursday night NFL game. Stacy and I joined them, and I sat next to my girlfriend, who put her arm around me as I leaned against her. Her mom worked on a knitting project in her chair, and I just took in the happiness of this family being together, and I wished, someday, that I could be a part of something like this.\n\n\"Your parents are really going to let us stay together?\" I was changing for bed in Mitch's room as she did the same.\n\n\"Yeah, sure. We share a bed every night at school. What's the difference?\"\n\n\"There'd be a difference to my parents.\"\n\n\"My parents are pretty cool. I mean, they adapted to the whole butch lesbian thing, so I think they can handle me cuddling through the night with my girlfriend.\"\n\nI laughed and we climbed between the sheets, sharing a few soft goodnight kisses before I settled in as the little spoon. \"Your parents are great though.\"\n\n\"Yeah. I got lucky.\"\n\n\"Your mom wants to take me shopping Saturday.\"\n\n\"I thought she might.\"\n\n***\n\nThe next day Mitch took me around to all of her old stomping grounds. We hit some balls on the courts where her dad had taught her to play, and had lunch at her favorite ice cream parlor. It wasn't the healthiest lunch.\n\nAt two thirty we arrived at her old High School, just before dismissal. She stopped into half a dozen rooms, always receiving the same exuberant response from the teachers inside. She proudly introduced me as her girlfriend each time, and I got to hear several great stories about a younger, less inhibited Mitch Kirkpatrick, if you can believe that.",
        "The last room we stopped by was her old coach's office. He took his glasses off as she knocked on his open door. \"Michelle! What a surprise.\" The older man stood and walked around his desk and gave Mitch a hug. \"I've been watching you, young lady. You've gotten much better.\"\n\n\"Thanks, coach. It's all her fault. Coach Brenneman, this is my doubles partner, and my girlfriend, Cindy Spencer.\"\n\nHe shook my hand and we all sat. Looking around the room I saw multiple pictures of young women on his wall, wearing various division one college uniforms. Sure enough just over his right shoulder was a picture of Mitch preparing to receive a serve, wearing her black shorts and red polo embroidered with the Georgia 'G'.\n\n\"So I made the Wall of Fame, huh?\"\n\n\"Of course, you've made me very proud. And I've seen you, too, young lady,\" he nodded toward me, \"you're quite a player, too. I didn't know you were seeing each other, though. Must be why you move so well together on the court.\"\n\nI blushed. \"Thanks.\"\n\n\"She's taught me a lot, coach.\"\n\n\"Yeah, likely the same things I tried to teach you for four years. Maybe I just wasn't pretty enough.\" He shot her a half smile, now it was Mitch's turn to blush.\n\nThere was a knock on the door, and Mitch turned around, seeing a diminutive woman in a nice suit with bobbed brown hair and big glasses.\n\n\"Principal Solomon!\" Mitch jumped and shook the small woman's hand.\n\n\"I heard a certain Wall-of-Famer was wandering about the halls. Thought I might find you here. Just wanted to be sure I got a chance to say hello. And to meet the lucky lady you've been showing around.\"\n\n***\n\nAs we drove away I was shocked. \"You really were popular.\"\n\n\"What can I say? People love me.\"\n\n\"And no one was surprised with you having a girlfriend.\"\n\n\"My sexuality hasn't been a secret since middle school. Actually, it's never been a secret. Soon as I knew, so did everybody else. And what did Principal Solomon say to you when Coach and I were talking?\"\n\nI reached out and took Mitch's hand. \"That I was a very lucky young lady.\"\n\n\"Well, that was obvious.\"\n\nMitch flashed that playfully wicked smile of hers, and I laughed, feeling the warmth of her radiating up from our handclasp.\n\n***\n\n\"So where are we going tonight?\"\n\nMrs. Kirkpatrick smiled as we walked down the street at Hyde Park Village. \"It's called 'The Black Pearl.' It's fancy, a little pretentious, but it's very good. Jack made reservations over a month ago. He wants to impress you, I think.\"\n\n\"What do you wear?\"\n\n\"Not jeans. Jack'll wear a tie, I usually wear a dress. We eat there sometimes when we go to the theater, or for our anniversary.\"\n\n\"It'll be new for me. I've never been anywhere fancy like that.\" I shook my head. \"My family's idea of fine dining was Applebee's.\"\n\n\"Michelle said they were very conservative.\"\n\n\"Ha. That's putting it mildly.\"\n\n\"I take it they don't know about you and my daughter.\"\n\nI shook my head. \"I'm not lucky like Mitch, I mean Michelle.\"\n\n\"It wasn't easy for me, I'll admit it. Not that I didn't have a clue, of course, but I didn't want it to be true, so I ignored all the signs. Eventually she'll discover makeup and dresses. I told myself, a lot of girls are tomboys when they're little.\"\n\nI giggled for a moment before covering my mouth. \"I'm sorry. Just the thought of your daughter in heels and makeup.\"\n\nShe covered her mouth, and we laughed together for a moment.\n\nEventually I regained my composure. \"Okay, I guess I need a dress, then.\" We went to a few different stores. Nice ones, at least a lot nicer than any other store at which I'd ever actually bought anything. Stacy took pictures of anything I liked, and as we left the second store I'd tried almost a dozen different dresses, with a few definite possibilities.\n\nI couldn't help the grin on my face. \"This is fun, I've never done anything like this.\"\n\n\"Didn't your mom at least take you shopping for a prom dress?\"\n\n\"My Junior prom I wore a cotton summer dress like I'd wear to church. For Senior year we went to one store and mom picked something out. Ankle length, high neckline with half sleeves.\" I indicated where it had sat, above my collarbone and down to my elbows.\n\n\"Seriously?\"\n\n\"Everything had to meet Dad's approval. If it didn't, it went back. And if you couldn't take it back, man, he'd be upset. It's hard to find women's shorts that come down past your fingertips. \"\n\n\"But he let you play tennis.\"\n\n\"My coach in high school actually ordered me extra long skirts for my uniform. Luckily they had them, or my mom would have had to make them herself.\"\n\n\"Well, if you're game, we can go a little more daring today.\" She nudged me with her shoulder, and we both giggled as we strode down the sidewalk..\n\nI liked the next store the best, and we had it narrowed down to a green high low beauty with a sweetheart neckline under a high necked lace bodice, and an elegant, but much more daring, front twist chiffon maxi. It was a muted pink, and it really popped with my blonde hair, but it would definitely be the most daring thing I'd ever worn. There was a fancy bow in the back, and a slit in the side clean up to my hip, as Reba would say.\n\nThe bra was built in, and the skirt was just barely translucent so you could just make out the shape of my legs underneath the material if the light was right.\n\n\"I really think that's the one, Cindy.\" The salesgirl nodded in agreement, and I twirled one more time in the mirror.\n\n\"Yeah. I like it. It's not too much?\"\n\nMrs. Kirkpatrick just smiled at me. \"Cindy, it's perfect. You look beautiful.\"\n\n\"Okay. Let's do it.\"\n\nIt didn't end there, we needed shoes, and I ended up with a gladiator style two inch heel, which I loved. We walked past a little store that had casual clothes on the mannequins in their window, including several pairs of cute little high-waisted short shorts that I'd never been allowed to own. Apparently I looked a little too longingly, and Stacy stopped me at the entrance.\n\n\"You like those?\"\n\n\"Yeah, but I can't. That's exactly what I'd always wanted and could never have. My mother would have a fit, and my dad would disown me.\"\n\n\"And if they find out you're dating my daughter?\"\n\n\"Same.\"\n\nShe laughed, but honestly I wasn't trying to be funny. \"You realize I'm not kidding, right?\"\n\n\"Oh, sweetie.\" She linked her arm in mine and led me over to a nearby bench. \"Are you okay?\"\n\n\"Yeah, I'm having a great time. I just, um,\" I folded my hands in my lap and looked down.\n\n\"You wish you were doing this with your mom.\"\n\n\"I wish my mom and I had this kind of relationship.\"\n\n\"Well, you're an adult now. You get to have a say in what kind of relationship you have.\" I tried to grin and nod, but she didn't buy it. \"Cindy, when Michelle came out, she rejected everything I'd ever wanted for my precious little girl. That was very hard for me, and there was some real distance between us. So, we had to find a new relationship. I suddenly had to care about sports, something I still struggle with, honestly,\" she giggled. \"And she reached out in her own way, and when she did I realized how terrified I'd been of losing her. But the most important thing was that I was able to get to know the real Michelle, my real daughter. And she's pretty amazing. I couldn't be prouder. And someday, maybe your mom will be willing to get to know the real you.\"\n\nI gave her a hug. Stacy gives great hugs.\n\nWhen she pulled away she pulled a Kleenex out of her bag and dabbed at my misty eyes. \"So, does the real you want a new pair of shorts?\"\n\nThat made me laugh, and we headed into the store.\n\nI came out with two complete outfits, feeling a little naughty, but excited to see what Mitch would think. We had to go back and pick up my dress, which they'd brought in just a smidge. It fit like a glove, and even without makeup or hair done I couldn't believe what I was seeing in the mirror.\n\nWe made it back just after the three-thirty kickoff of the Florida-Georgia game, and I cuddled up with Mitch on the couch to watch. I was still learning about the intricacies and traditions, but what I really loved was watching Mitch get all excited. She'd get mad if I ever said it, but she's really cute when that happens.\n\nOur reservations were at eight-fifteen, so as soon as the game finished shortly after seven I headed into the master bathroom to get ready. Stacy had graciously gifted me the use of her and Jack's master bath, along with her vanity and mirror. I was grateful, mostly because I wanted to see Mitch's face when I emerged, something that wouldn't be as dramatic if she was able to witness the work in progress.\n\nTo be honest, I was stunned when I finally saw myself in Stacy's full length mirror. I looked like a woman grown. My mother had given me the basics in how to put on makeup, but blush and mascara had been forbidden. It wasn't tonight, though, and Stacy helped me pick out a dusty rose pink with matching lipstick and just a touch of blush. I didn't look made up, but my face seemed to pop out of the mirror. My hair bounced out of the rollers I'd borrowed, and Stacy helped me put it up into a high ponytail, pinned back over my ears and lengthening my neck.\n\nAnd it was all worth it when I saw Mitch's eyes widen as she took me in.\n\n\"Oh, Cindy.\"\n\nI swished my dress, baring my toned leg up to my thigh. \"Do I look okay?\"\n\n\"Baby, just, wow.\"\n\nI grinned and blushed. Not that I wasn't taking her in as well. She was wearing pinstripe slacks with a matching jacket and a white shirt with the top two buttons undone. It was accentuated with a red, untied bow tie and matching handkerchief in the jacket pocket. Her hair was combed and parted with swept up bangs. She looked so handsome, and I seemed to just float into her arms. Jack insisted on pictures, like we were going to prom or something.\n\nWhen we entered the restaurant I could feel the other patrons' eyes turn towards us. My hand tightened in Mitch's and I whispered to her. \"Are they staring at us?\"\n\n\"No, they're staring at you. You're stunning.\"\n\nI started to protest, but my girlfriend cut me off.\n\n\"Cindy, you're the most beautiful woman in the room. You'd be the most beautiful woman in almost every room on earth.\"\n\nI blushed and looked down, but her touch gave me strength. \"You mean there are some I wouldn't be?\"\n\nMitch gave a little chuckle. \"Not to me.\" She leaned down and gave me a little kiss, not caring at all that the entire restaurant was looking at us. My heart swelled with love and pride, and I stood a little taller as I walked to our table.\n\nIt was by far the nicest restaurant I'd ever been in. The people were dressed elegantly, as were the staff. The waiter didn't even write down our order, just memorizing it. My eyes almost left my skull when I saw the prices. You know it's expensive when they only write down the dollar amounts.\n\nI immediately found the least expensive thing on the menu, the Risotto, but Jack insisted that I get whatever I wanted, so I opted for the rack of lamb. I figured what the heck, might as well try something new.\n\nIt was beautiful with the sauce swooshed around the plate like in cooking shows I'd seen, and the taste was otherworldly. Jack threatened to get the escargot as an appetizer, making me scrunch up my nose and shake my head. I didn't mind trying new things, but there were limits.\n\nLuckily Stacy laughed and put her hand on my arm. \"Don't worry dear, he doesn't like it either. He just likes to get a rise out of people.\"\n\nI smirked at my girlfriend. \"I guess you come by that particular personality trait honestly.\"\n\nStacy grinned. \"They're like clones. It's scary.\"\n\nI could see the twinkle in Stacy's eye, she loved that about her husband, just like I did about her daughter. But we didn't need to let them know that. \"Have I told what she did to me the first day we met? She was spotting me on the bench press, just teasing me mercilessly.\"\n\n\"I was not! I was being very friendly.\" Mitch gave me a playfully scolding look. \"I was trying to make conversation.\"\n\nStacy sat back. \"Well, I was always told boys only tease girls they like.\"\n\n\"You know, a friend said the same thing, and I've been thinking about it. It's not okay for boys to tease girls, and teaching our daughters they should be proud when a boy belittles them,\". I shook my head. \"If we ever have a son, we're going to teach him better, Michelle Kirkpatrick. Even if he's just like his grandfather.\"\n\nJack gave a loud laugh. \"That settles it, Michelle. I like her.\"\n\n\"Me too, Dad.\"\n\nWe took our time with dinner, but it was barely nine thirty when we finished. Stacy was tired, but Jack gave me a wink. \"You know, Michelle, it seems almost a waste to get Cindy all dressed up and then only go for dinner.\"\n\n\"What are you suggesting, Dad?\"\n\nHe shook his head in disappointment. \"Take her dancing, girl. Dancing is the way to a woman\"s heart.\"\n\n\"Dad, we all drove together.\"\n\n\"We'll get a cab. You should go.\"\n\n\"Yeah.\" I looked up into Mitch's lovely blue eyes, remembering the first time we'd danced. \"You should take me dancing.\"\n\nI watched the desire to hold me wash over Mitch's face, which made me shiver. \"Okay. Let's do it.\" Jack tossed his daughter the keys, and she handed me into the front seat of his SUV before crossing and climbing into the driver's side.\n\n\"Do you know where we're going?\"\n\n\"Yeah. There's at least one club I know that admits minors over near USF.\" Mitch was twenty-one, having had her birthday in September. I wouldn't join her in alcoholic legality until February.\n\n\"Is it a lesbian club?\"\n\n\"No, but it's pretty welcoming from what I understand. Besides, It'll be dark. I doubt too many people will notice I'm not a guy. They'll all be looking at you anyway.\"\n\nIt turns out that Mitch was almost completely correct. We got into the club without any trouble, other than me having to have my hand stamped. Mitch offered to buy me a drink if I wanted one, but I didn't want to mar the evening by being nervous about breaking the rules, and I really didn't want to get caught and kicked out.\n\nWe hadn't danced much since we'd gotten together, and as Mitch led me out onto the floor and wrapped me in her arms I vowed I'd have to change that. I massaged the back of her neck with my hand, gazing into her incredible blue eyes as she smiled down at me. I enjoyed the feeling of her strong body pressed against mine, the look of serene happiness on her face as she held me close. We swayed to the music as the world faded away\n\nThe only reminder was one guy who came up while Mitch and I were sitting one out and asked me to dance.\n\n\"Sorry, man. She's all mine tonight.\"\n\nThe guy positively started. He probably hadn't spared a second glance at Mitch his entire way over. \"Dude! You're a chick?\"\n\n\"Yup. You?\"\n\nI can virtually guarantee no one had ever asked him that before, especially given his bewildered expression. \"No!\"\n\nI stood up. \"Then I guess you don't have what I'm looking for. C'mon sweetie,\" I took Mitch's hand, \"let's go dance.\"\n\nWe left him there gaping, and I'll admit my heart was beating a little fast, but I refused to look back as we made our way back out onto the floor.\n\n\"Look at you, Miss Sass.\" Mitch was grinning at me.\n\n\"Well, it's true. Like you said, I'm all yours. And not just for tonight.\"\n\nEmotion swam in Mitch's eyes as she searched for an answer, which made me happy. She didn't get tongue-tied often. But eventually she found the perfect comeback.\n\n\"I love you.\"\n\nIt was my turn to tear up. \"And I love you.\" I lay my head on her shoulder as we moved in rhythm, both with the music and each other. \"Always.\"\n\nWe danced for another half an hour, me never wanting this moment to end. But I was getting tired, and Mitch could tell.\n\n\"You about ready to go?\"\n\n\"Yeah. I wish we were back in Athens.\"\n\n\"Why?\"\n\n\"So we'd be going back to our apartment, and we could, y'know, do stuff.\"\n\nMitch had that glint in her eye as she answered. \"Cindy, you honestly think I'm going to dance with you all night, while you're wearing that dress, and not make love to you when we get back?\"\n\n\"But your parents will be there!\"\n\nMitch shrugged. \"They had sex while I was in the house growing up. I reckon turnabout is fair play.\"\n\nI wasn't convinced, and Mitch could tell. \"They won't hear us, I promise. C'mon. I'll prove it to you.\" She took my hand and led me off the floor.\n\nThe house was dark when we got back, other than the porch light. We both slipped off our shoes when we got inside, although that took a little more doing for me than for Mitch, but we got the job done and made it back to our room with barely a sound.\n\nMitch closed the door behind us, the light of the street filtering in through her window made everything look blue. She took off her jacket and slid her arms around my waist. I leaned back against her, resting in her warmth for a moment. She kissed my neck, sending a shiver through me. \"Mitch?\"\n\n\"Yes, my love?\"\n\n\"Help me take my dress off.\"\n\n\"Yes, ma'am.\"\n\nHer hands went to the bow in the back and untied it, before sliding down the hidden zipper at the waist. Her hands ran over my hips and up my sides until she reached my shoulders, slipping the thin straps down my arms. I shrugged the material free, letting the dress pool around my feet.\n\nI turned back toward Mitch, pulling her to me and kissing her deeply, pressing my now almost nude body against her. Her hands ran over my bare back and up into my hair, easing my head back and to the side so Mitch could suckle my neck.\n\nI moaned and leaned back into her arms, my hands going to her waist, feeling the curve of her hips and pulling her shirt free from her slacks. Her lips went to my ear, whispering softly.\n\n\"You're going to have to unbutton it to get it off, babe.\"\n\n\"Okay.\"\n\nI slid my hand up over her firm, flat stomach and modest breasts, reaching the top fastened button and undoing it. I kissed the skin I exposed, earning a sigh. I went down the line, button by button until her top opened and I pushed it over her shoulders and onto the floor.\n\nHer arms went over her head, and I stripped off the black sports bra she was wearing, hungrily taking one of her firm nipples into my mouth.\n\n\"Oh, Cindy, that's so nice. Mmm.\" Buoyed by Mitch's sighs I kept at it, going from side to side, reveling in the softness of her breasts, overlaying the powerful muscles beneath.\n\nAfter a few wonderful minutes Mitch pulled away and took my mouth with hers, kissing me deeply and making my spirit melt inside me. God, I wanted her to take me, and she knew it.\n\n\"Get on the bed, lay back. I wanna taste you.\"\n\nMy heart was racing as I obeyed, watching wide eyed as Mitch approached, eyes hungry. She stripped off her slacks before joining me on the mattress, covering me with her body and kissing me deeply, pressing me into the softness of the bed. Slowly she worked her way down my body, taking an exquisite amount of time with every square inch of my skin she kissed. I just let myself float in the attention of my lover, the soft feel of her lips, the heat of her body.\n\nHer mouth closed over one of my nipples, making me moan and push my chest up into her mouth, my hands gripping the sheets. Mitch was definitely energized by my reaction, increasing the intensity just like I wanted. It always amazed me how well we communicated during sex, how easily she read what I wanted and how I wanted it. I felt so connected with her, from the first kiss to the lovely cuddling that came afterwards. I belonged completely to her, and I knew, deep in my soul, that her heart was mine, the most precious gift I would ever be given.\n\nI was almost surprised when Mitch's mouth began to move down over my belly. When she reached the waistband of my panties my knees closed so she could strip them off. Her lips and tongue feathered along my inner thighs as my legs opened to her, and she settled between them, my eyes closing as she took me to heaven.",
        "Mitch feasted on me for over half an hour, my orgasms flowing like streams, one into another. I tried to be quiet for the first one, remembering that Mitch's parents were just down the hall, but by the second I'd mostly forgotten. After that, I had no concept of where I was, other than under Mitch's care.\n\nFinally I pushed her away. \"Okay, stop, mmm, my turn. I want a turn.\"\n\n\"Yeah?\" Mitch moved up over my body, grinning that mischievous little Mitch smile.\n\nI stared into her blue eyes, my mouth watering at the thought of her taste. \"Yeah, please?\"\n\n\"Sweetheart, you never have to beg for that.\" She rolled onto her back and shimmied off her boxers. \"Come get it.\"\n\nI giggled at her playfulness and climbed into position, inhaling her rich aroma before I lowered my lips to her sex.\n\n\"Oh, Cindy, that feels so good, yeah, just like that, oh shit.\" I loved the little things she said while I was pleasuring her. To be honest, even after a year together I was still sometimes unsure about what I was doing, wondering if I was as good as others she'd been with. I mean, how could someone as flamboyant and vibrant as Mitch be happy with boring, simple, nerdy me? But the way she talked to me, the purr in her voice, it put me completely at ease, so that connection I mentioned never wavered.\n\nI felt her seize underneath my mouth, her powerful thighs closing around my head as she came. I sucked on her clit, pulsing it with the rhythm I knew she loved. As she came back to earth I wondered to myself, what would she really like now? I could give her another like this, but she had been complimenting me all night on how beautiful I was. I needed something that would let her see me as I pleasured her.\n\nI kissed my way up her toned body, straddling her left leg while I pulled the other up and to the right, pressing our cores together until I could feel her swollen clit between my labia. Her eyes were as wide as I'd ever seen them as she stared up at me. I smiled down at her, running my hand up through my hair, exposing my neck as I undulated my hips in slow sensual circles. After all, Mitch wasn't the only high level athlete in this bed, and I used all my core strength and muscle tone to keep working her just like I wanted.\n\nI arched my back, pushing my breasts out, and Mitch reached up to caress them. I concentrated on stimulating her, instead of chasing my own pleasure, and I was rewarded as she cried out, pushing herself against me as orgasmic pulses seized her over and over.\n\nWhen they finally subsided I was grinning ear to ear at the look of pure contentment on my lover's face. Eventually she opened her eyes and pulled me down to her, kissing me deeply.\n\n\"My god, Cindy, that was incredible.\"\n\nI nuzzled into her shoulder. \"I'm glad.\"\n\nMitch kissed my ear, temple, then forehead, moving so she was looking deep into my eyes. \"Seriously, do you have any idea how beautiful you looked tonight?\"\n\n\"Some, I could see it in your eyes.\" My voice was small and shaky with emotion, but Mitch's was firm as she continued.\n\n\"Well, I had it doubly bad. I mean, everyone could see how lovely you are here,\" she ran a finger over my cheek, \"and here,\" a hand touched my waist and hip. \"But I know how beautiful you are in here,\" she touched my temple with her forefinger, \"and here,\" placing her palm over my heart.\n\nA tear formed in my eye. \"Oh, Mitch.\"\n\n\"I can't believe how lucky I am to be with you. I love you.\"\n\nWith that I lost it, sobbing with joy as she held me to her, repeating those three beautiful words over and over. We kissed so deeply I didn't know where I stopped and she started. Eventually I broke away and touched my face.\n\n\"God I must be a mess.\"\n\n\"You've never been lovelier.\"\n\nI excused myself to go wash my face, something Mitch allowed only with reluctance. When I finished and returned the bed was turned down, and Mitch was waiting for me under the covers. I slid in next to her, letting her wrap me in her warmth.\n\n***\n\nIf her parents heard anything last night they didn't let it on that morning, and we left for the long drive back to campus after many hugs and smiles. I felt loved and accepted, and really I was. Mitch's parents, Coach Holiday, the girls on the team, Carl and Bridget, they all accepted me just like I was. There was only one hurdle left.\n\nI like to think of Junior year as our golden year. We didn't have graduation looming; decisions about real life seemed eons away. We were living in our own apartment, sleeping in a real bed. It was wonderful. Mitch had gotten all of her prerequisites out of the way, and she was doing really well academically, and I was starting to get the upper level econ courses I'd been looking forward to.\n\nCarrie and Barbara were regular guests at the apartment, sometimes with boyfriends in tow. We all still worked out most afternoons, and we practiced on the campus courts whenever we could. When the season started it was clear that Barbara had eclipsed me, and Coach put her in at number five singles, but kept me camped out at number six. That was fine; I was just happy to be on the team. Mitch and Carrie played four and three, while Mitch and my doubles team moved up to number two.\n\nThe really awesome thing was actually academic for me. With the help of my academic advisor I picked out several prestigious internships for which to apply, and shortly after Christmas I ended up with my pick of two excellent ones. I talked it over with Mitch, of course.\n\n\"This one actually comes with a little studio apartment, no roommate. And it's at a brokerage firm, which is kind of what I want to do. So I'm leaning towards it.\"\n\n\"It might be fun. Summer in Atlanta.\"\n\n\"It'd be really good experience, and Professor Sommers knows it's a good company.\" I hesitated for a second. \"I just wish you could come with me.\"\n\n\"Why can't I?\"\n\nMy brow furrowed. \"Don't you have to go home and work for your dad?\"\n\nMitch pretended to get thoughtful. \"Well, my dad is a regional manager, and he knows people all over the Southeast. I bet he could find me a job in Atlanta.\"\n\n\"Oh, Mitch!\" I jumped into her lap, hugging her tight.\n\n\"You think I could handle being away from you for another three months again? Not a chance.\"\n\nI sat back. \"I'm not sure they'll let me have a, um, partner or anything.\"\n\nShe shrugged. \"Why tell them? Better to ask forgiveness than permission, my dad always said.\"\n\nIt turned out that neither Mitch's job nor the housing situation were issues. The housing form I had to complete had a section for both pets and partners, and all I had to do was check yes and put down Mitch's name and occupation. We got a call from the housing people a few days later stating that she had to submit to a background check, but after that everything was a piece of cake.\n\nThe same ended up being true for Mitch's job. As soon as we knew where we'd be staying Jack made some calls, and within a week Mitch had a summer job lined up. What I wasn't expecting came later.\n\nMitch was out picking up some groceries on Saturday, and I'd stayed behind, deciding to bite the bullet and call my family. \"Hey, dad, just wanted to let you know that I've got an internship this summer.\" I hadn't told him I was even applying.\n\nThe disapproval was evident in the iciness of his voice. \"Your aunt and uncle will be expecting you to help at the diner, Cindy.\"\n\n\"Dad, this is a really prestigious internship. It's going to help me get a good job when I graduate. I can't turn it down.\"\n\n\"You can and you will, if I tell you to. Where is this internship?\"\n\n\"Atlanta.\"\n\n\"Absolutely not. Cindy, do you have any idea how evil that city is? No.\"\n\n\"Carl did internships when he was in school!\" God, I sounded like a petulant ten year old.\n\n\"You're brother is a young man. He needs a career to support a family. You do not. You will be home after classes end, and this summer you will be more hospitable to the young men your mother introduces you to. Do you have any idea how much damage control we had to do after last summer? The rumors about you?\"\n\n\"What rumors?\"\n\n\"I'm not going into that. We've taken care of it. But you will do better this summer, or you won't be going back to that school.\"\n\nHe didn't even bother to say goodbye. By the time Mitch walked into the apartment I was in tears. She dropped the bags onto the counter and ran to me, and I threw myself into her arms, sobbing hysterically. She didn't ask what was wrong, or try to shush me, instead just holding me in her arms until I quieted down.\n\n\"I'm sorry.\"\n\n\"It's okay. You, babe, are always allowed to cry on my shoulder.\" She ran her fingers through my hair. \"Now, you want to tell me what happened?\"\n\nI gave her a brief rundown of the conversation, and I could see anger flare in her eyes as I related what my father had said.\n\n\"Okay, Cindy, can I ask you some questions?\"\n\nI nodded, wiping a tear from my eye.\n\n\"Are you financially dependent on your father at all? I know he's not paying tuition or housing or anything here.\"\n\nI took a moment to make a mental inventory. \"He pays for my phone. And insurance, medical and auto.\"\n\nMitch nodded. \"Anything else?\"\n\n\"I don't think so.\"\n\n\"Well, you don't have a car, so you don't really need auto insurance. Health insurance is a risk, but you're young and healthy, so a small one. It's not like we need birth control. And we can figure something out for your phone. So you have to decide.\"\n\nI nodded. \"You just don't understand. I've never defied my father about anything. I mean, anything major.\" Mitch gave me a sideways grin. \"Okay, other than dating you. But he doesn't know about that.\"\n\n\"So what do you want to do?\"\n\n\"I want that internship. I've already accepted it. I mean, this would mean I could work almost anywhere when I graduate.\"\n\n\"Then call him and tell him. Not ask, tell.\"\n\n\"You don't know my dad.\"\n\n\"No, I don't, but I know you, and you're strong enough to do this.\"\n\n\"And if he cuts me off?\"\n\n\"I don't think it'll come to that, but if he does, we'll deal. Together.\"\n\nI wrapped my arms around her and let her hold me close for a few minutes before I pulled away.\n\n\"Okay, I'm ready.\"\n\nI took a deep breath and pressed my father's icon on my phone. He didn't even say hello.\n\n\"Cindy, I told you I'm done talking about this.\"\n\nI could feel Mitch bristle at his dismissive tone, and my own temper rose as well. \"Well, I'm not. I'm taking the internship. I've already accepted it.\"\n\n\"You don't speak to me that way, young lady.\"\n\n\"Sorry, but I'm not asking.\"\n\n\"Do I need to come and bring you home? Because I will.\"\n\n\"You can't, Dad. I'm an adult, whether you admit it or not.\" My heart was in my throat, but Mitch was nodding to me as I paced around our little apartment, giving me strength.\n\n\"You are my daughter, my responsibility, and under my authority until you have a husband. Something that can't happen soon enough, I think. Am I understood?\"\n\nI looked wide-eyed at Mitch, who narrowed her eyes and nodded, silently telling me I can do this.\n\n\"I understand. But you need to understand that I'm taking this internship, and if you come and try to take me home I'll call the police.\" I pressed the disconnect icon and tossed my phone on the couch, shaking.\n\nMitch gathered me into her arms. \"You were awesome.\"\n\n\"Couldn't have done it without you.\"\n\n\"Sure you could've. But I'm glad you didn't have to.\"\n\nMy phone began to buzz almost immediately, and I sent my dad's call straight to voicemail. About an hour later my brother called.\n\n\"Well, I think I have him talked out of showing up on your doorstep.\"\n\n\"That's a relief.\"\n\n\"Yeah. It took me pointing out that if we tried we'd be arrested.\"\n\nMitch laughed and spoke up. \"He wanted you to help?\"\n\n\"Of course, as his son it's my responsibility to help keep my sisters in line, apparently.\"\n\nI did have a conversation with my mother later that evening, where she implored me to just do what he said. \"He just wants what's best for you, Cindy.\"\n\n\"No, he doesn't, Mom. He wants what he thinks is best for him, just like always. This internship is what I want. It's what's best for me and my career, which I am going to have, by the way. I will not be a housewife.\"\n\n\"What's wrong with being a housewife and a mother?\"\n\n\"Nothing. If that's what I wanted, I'd do it. I don't fault any woman, or man, for that matter, who does. But it isn't what I want, Mom. And I can still be a mother and have a family.\"\n\nShe tried to change my mind for a while longer before giving up, and I waited anxiously for the next few days to see if the service to my phone would cut off. It never did, though.\n\nThe season ended in another SEC title and a deep run in the NCAA tournament. Heather, our top senior, made it all the way to the quarterfinals in the singles tournament, which was awesome. She'd decided that she was going to go pro, and was headed out onto the Challenger circuit with a coach and agent and everything. Nothing like the entourages the top pros have, but it was impressive to little old us.\n\nCarl and Bridget made it to a few matches, and I got updates from my brother about Dad and Mom. There had been complete radio silence from the homestead itself. My texting conversation with my little sister Charlotte stopped though, and I'm pretty sure Dad made her block me. Probably what scared me most was that my defiance might cost her the opportunity to go to college or to pursue the activities she wanted.\n\nI relayed those fears multiple times to Mitch, and she would just tell me that I am not responsible for my parent's actions, or their overreactions, for that matter. I tried to believe her.\n\nBefore we left for the summer we re-upped our lease, with no increase in rent, thank goodness. It felt nice knowing we had our little love nest to return to after our grand adventure in the city.\n\nThe neatest thing was that just as we got settled, the calendar turned to June. I'd spent last Pride Month in my tiny Georgia town pretending that firstly, it wasn't happening and secondly, that I wasn't gay. I'd also had to smile at redneck assholes who made petty to disparaging to downright vicious comments about gay people while I served them bacon cheeseburgers and French fries or biscuits and gravy, all while silently hoping the food would clog their arteries sooner rather than later. I guess that was a little petty too, but I'm only human.\n\nBut Atlanta was completely different. Probably not everywhere, but so many businesses had pride flags in their windows that I felt like I was living in a wonderland.\n\n\"You want to do the parade?\"\n\nI looked at Mitch, who was grinning ear to ear. \"You mean like, go see it?\"\n\n\"No, that's not what I mean at all.\"\n\nI put an innocent lilt into my voice. \"But I don't have anything to wear.\"\n\nMitch shot me a wolfish grin. \"We can fix that.\"\n\nWe spent the next hour scouring the internet trying to find the perfect rainbow colored dress for me. I couldn't stop smiling the whole time, and we ended up ordering a knee length sleeveless summer dress with a faux-wrap bodice. Mitch ordered a T-shirt that said \"I'm her butch\" with a rainbow arrow in the pointing to one side. She also ordered us matching \"I'm hers,\" \"She's mine,\" T-shirts in rainbow prints.\n\nSo it was that on a sweltering Saturday in June I found myself milling about with hundreds, if not thousands, of other people in a riot of colors. Walking out of our little studio apartment I wondered if my dress was too garish, but compared to many of the other outfits in the crowd it was downright tame. Mitch was wearing her new T-shirt and loose jeans with one of those looping chains, her short, dark hair parted and combed to the side with the bangs swept up, looking every inch the beautiful butch that she was, with her gorgeous blue eyes sparkling in excitement.\n\nThere were several people there doing face painting, so I sat down and had a small rainbow flag painted on one cheek, with interlocking rainbow feminine symbols on the other. And so we marched. People on the streets waved and cheered, there was music and dancing everywhere. I'll admit my heart was beating a little fast, but I was happy, accepted, surrounded by family I'd never met. There was the slightest chance I might end up on film that my dad would see, but I figured the risk was minimal.\n\nMitch was in full 'never met a stranger' mode, hugging and shaking hands with everyone, always introducing me as her girlfriend. And whenever she did there was a note of such pride in her voice that made me feel so loved. And it wasn't just her. To be honest it was similar to the feeling I got at Georgia Football games. Even if you didn't know everyone, or even anyone, we were all together, one family.\n\nWe ended up going out to dinner with a few couples we met at the parade, telling stories about how we all met, how we realized we weren't straight, and sharing coming out stories. I was mostly quiet for the latter, and our new friends took little time to figure out the reason for that.\n\nThey ran the gamut, from accepting families like Mitch's to initially rejecting families that came around, to families that had completely disowned their daughter. The woman who came from that family, Petra, was older than us, early thirties, I'd guess. There was a pained look in her eyes as she talked about it.\n\n\"I went through a lot of depression, even had thoughts of suicide when I was younger. But when I owned it, accepted it, and stood up for myself it got better, even if my family wouldn't acknowledge me. It took a toll on my relationships, too, but when I met Deb it got better. She encouraged me to see a counselor, helped me see I was worth something.\"\n\nPetra's wife reached out and took her hand. Even though same sex marriage was still illegal in Florida, they'd traveled up to Massachusetts and tied the knot. They'd been together almost ten years, and the affection between them was obvious. As they smiled at each other Mitch's palm slipped up against mine, and I squeezed it back. That was us someday, and I wanted it. I wanted to spend my life with Michelle Kirkpatrick, to be her wife, to share children with her. Deb and Petra's two children were spending the day with their grandparents, and they couldn't stop showing us pictures, which was adorable.\n\nAfter dinner we all went out for drinks and dancing, and it was so cool, seeing couples of every possible configuration around us. The only requirement was to be yourself, and be with someone you wanted. I wanted to be with Mitch. Whether she was showing off her crazy moves or holding me close during a slow song, I couldn't stop smiling.\n\nEventually she brought me back to our apartment, slipping on the strap on and taking me gently to heaven. I adored feeling her inside me, the gentle friction, the deep pleasure. There was no more worry about pain or disappointment, and I could just relax into the bliss of being loved. I felt like a woman, instead of a kid. I wasn't just fooling around, I was making love to my partner. And with all that, I had no trouble accepting the orgasms that wracked my body as Mitch sent me soaring higher and higher.\n\nIt was a wonderful summer. My internship was really interesting. I was reviewing small accounts, $100K to a Quarter Million, making sure they all met the standards set and seeing if they qualified for additional or new services. I was even encouraged to make suggestions regarding the distributions. Granted, those weren't really taken seriously most of the time, but my supervisor gave me honest feedback, and I got to learn about how private assets were managed in the real world, instead of the theoretical bubble presented to us in college.\n\nMitch and I took every opportunity to explore the city. We went to festivals, including a food &amp; wine festival, an ice cream festival, and a film festival. We also spent a few fun Saturdays exploring Five Little Points. I got to have Ethiopian food for the first time and we saw a few local bands perform at the playhouse.",
        "It seemed like it was over in no time, and we were back in Athens for our Senior year. I still hadn't spoken to my father, but I was in contact with Mom and Charlotte again, which made me feel better. We had Carrie over for dinner the first night she got back into town, and we compared notes on our internships. She had loved her summer in Orlando, and was already talking about moving there after graduation.\n\n\"If they offer me a job I'll probably take it. You know the National Tennis Center is there, and there are several other smaller clubs. How about you? You gonna be moving up to Atlanta after graduation?\"\n\n\"Maybe, I'm not sure.\"\n\n\"Didn't you like it?\"\n\n\"Yeah, but I just want to keep my options open.\"\n\nThe truth is I wasn't sure where Mitch would end up, and I didn't want to say anything that would worry or influence her.\n\nMitch shook head as she sat next to me, putting her arm around my shoulder. \"At least you two are actually going to be graduating in the spring.\"\n\nCarrie gave Mitch a bemused look. \"You aren't graduating?\"\n\n\"I'll have enough credits to walk, but I still have to do my student teaching somewhere before I get my license, and I won't be able to do that until next fall.\"\n\n\"Do you know where you'll be doing it?\"\n\nMitch shook her head. \"They won't be giving out the assignments until the end of fall semester. Assuming they have enough. My GPA isn't nearly as high as a lot of the others, so I'm not going to get my pick. And I'll still be a student here, even if I'm not on campus, so I have to figure out a way to pay for it.\"\n\nI'll admit I worried about it a lot. What would we do after graduation? How do we go forward? These hard decisions seemed so much closer this side of summer, and I could begin to see the Sword of Damocles hanging over our future.\n\nI wasn't sure if I was projecting, but it seemed like Mitch was getting more and more nervous about things in general. I probably would have distanced, but Mitch had the opposite reaction, holding me a little tighter, being more giving when we made love, overall just showing an odd amount of deference.\n\nI finally worked up the courage to ask her about it one Sunday morning as we lay in bed.\n\n\"Sweetheart, what's bothering you?\"\n\n\"What? Nothing.\"\n\nI turned in her arms, running my fingers through her short, dark hair. God, she had the most beautiful eyes. \"I may not be as good at reading people as you are, but I know something's up. You don't have to hide from me. You know that right?\"\n\nMitch took a deep breath. \"I just, I don't know.\"\n\n\"C'mon, tell me. Is it about school?\"\n\nShe shook her head. \"Not exactly. The end of school.\"\n\n\"Yeah, I've been thinking about it too. What are we going to do?\"\n\n\"I won't be able to get a job until after I get my license. Maybe not until the next fall. And who knows where that'll be. I'll probably have to move home, at least over the summer. It's gonna be so hard to afford anything else.\"\n\n\"And you don't think they'd let you bring me with you?\"\n\nA spark of hope flashed in her blue eyes. \"Would you even consider that?\"\n\nI propped myself up on my elbow. \"Of course I would. Why wouldn't I?\"\n\n\"But it would only be for the summer, and then I'd have to go wherever my student teaching is. And you have to start your career. I don't want to hold you back.\"\n\n\"Sweetheart, you won't, I promise. I don't have to make any decisions about where I'm going until next semester. I'll probably do some interviews, but nothing more. We will figure it out. As long as we're together.\"\n\n\"So we're going to last? Past school?\"\n\nI was hurt. \"Well, yeah. What'd you think, that I was just going to go home? Lesbian until graduation?\"\n\n\"I'm sorry. I just know how hard it was for you this summer, defying your parents.\"\n\nI closed my eyes and collected my thoughts. \"Michelle, I know I'm not the most expressive person in the world, and if I've ever left you in doubt about how I feel I'm sorry.\" I looked deep into her eyes, which were shining with emotion. My whole body felt shaky, but I forced my voice to stay as calm as possible. \"Let me clear this up right now. I love you. I am so in love with you that the concept of not being with you over this summer, or in ten years, or fifty years from now, hurts too much to even think about.\" I took her hand. \"I want this, you and me, forever. And if I have to choose between you and my family, I will choose you. Everyday, always. I want a life, a family, with you.\" I cupped her cheek with my palm. \"Do you understand?\"\n\nMitch nodded, her eyes swimming with tears.\n\n\"Michelle, is that what you want?\"\n\n\"God, Cindy, yes. Please, yes.\"\n\n\"Okay then. We are going to figure this out. And we'll get through it, whatever it takes, together.\"\n\nShe was still nervous as the end of the semester approached, but it didn't have anything to do with me. A few weeks before finals I had a group project meeting for my Poli-Sci class on a Saturday afternoon. Firstly, who does that? Even I'm not that big of a nerd. But anyway, when I got back to the apartment there was a candle burning on our little table, which was covered by a white tablecloth with two places set. I hung up my backpack, grinning at the set up.\n\n\"What's the occasion?\"\n\nMitch was wearing an apron, but underneath was one of her nicer button downs and jeans. \"I have some news.\" She came up and kissed me, and when we broke apart I was able to fully appreciate both her dancing eyes and the fact the whole apartment smelled like garlic and oregano.\n\n\"I take it it's good news?\"\n\n\"You could say that.\"\n\n\"So are you gonna tell me, or do you want to feed me first?\"\n\n\"You hungry?\"\n\nI heaved a sigh. \"Starving.\"\n\n\"Well then, have a seat, and I'll do both.\"\n\nI sat down and Mitch carried over a pan which was filled with Pasta Bolognese, one of my favorite things Mitch made. \"Ooh, yummy!\"\n\n\"I thought you'd approve.\"\n\nI scooped some onto my plate and took a bite, excellent as always. \"Mmm, that's delicious, sweetheart. Now what's going on?\"\n\nMitch served herself a generous portion and sat down. \"Well, yesterday I got a call from Principal Solomon.\"\n\n\"From your old high school?\"\n\n\"Yep. Anyway, she wanted to know if I'd be graduating, and I told her the situation. It turns out Mrs. Simmons, one of our PE teachers, her husband got a promotion, and she's moving to Miami with him. Principal Solomon asked me if I wanted to do my student teaching there, and then take over the position the next semester.\"\n\nMy mouth was hanging open. \"Seriously?\"\n\nMitch shrugged and nodded, fighting back a smile by biting her lower lip with her front teeth. \"I told you they loved me there\".\n\nI jumped to my feet, holding out my arms. \"Honey, that's wonderful! I'm so excited for you!\"\n\n\"For us.\" We embraced, and she rocked me in place. \"You know what this means, right? I've already talked to my dad. We can just move to my parent's until you find a job, and when you know where you'll be working we can find a place in between.\"\n\nA tear leaked free from my eye. \"This is really happening, isn't it?\"\n\n\"Yeah, it is. You and me. But you know what's happening first?\"\n\nI grinned up at her. \"What?\"\n\n\"Dinner. This sauce is killer.\"\n\nI laughed the way only Mitch could make me laugh, and we sat back down.\n\nI lay in bed that night, listening to Mitch's gentle breathing as she held me. She'd been in a fantastic mood, and my body was still humming from the very thorough pleasuring it had just received. I'm pretty sure I'd given as good as I gotten, which made me happy, since it was Mitch's big day, after all.\n\nBut, of course, there was still one massive thing hanging over me. I'd have to let my parents know what was happening. It was one thing to sneak off for a summer, but if I was going to move to Florida permanently to live with Mitch I was going to have to tell my parents something.\n\n***\n\nI didn't sleep much that night, or for several nights following. Eventually Mitch worked it out of me what I was worried about.\n\n\"So what do you want to do, sweetheart?\"\n\n\"I don't know!\" I buried my head in Mitch's shoulder. \"What should I do?\"\n\n\"I wish I knew, baby.\" She rubbed my arms. \"Are you going to go home for Thanksgiving?\"\n\n\"Yeah, I think so, just to see what's really going on.\"\n\n\"You talk to your dad yet?\"\n\nI shook my head. \"I've talked to Mom, and I know Dad won't kick me out if I show up. But I'll get a lecture for sure.\"\n\nMitch chuckled.\n\n\"Don't laugh at me.\"\n\n\"I'm sorry.\"\n\nShe didn't stop, and her infectious laugh soon had me giggling along, making me feel better. Mitch pulled me in for another hug, rocking me in her strong arms. \"No matter what, I come back to this, right?\"\n\n\"Of course. All yours.\"\n\nSo I went home for Thanksgiving. I did my very best to be deferential and accommodating and to not cause waves, but it was hard. The entire weekend was a parade of extended family, and I couldn't help but be struck by how backward and bigoted they were. How had I never really noticed before?\n\nMy mother intimated to my aunts that I would be moving home after college. \"Oh, I can't wait for Cindy to be home again. It's been so hard having her away. And, back among wholesome, hard working boys instead of those liberal college people, I'm sure she'll be wanting to start a family soon.\"\n\nI heard her talk about Carl and Bridget, too, mentioning often that Bridget's father and grandfather were preachers, and never once mentioning that she was half Guatemalan. I also noted how they all talked about their children. I had a number of cousins on both sides of the family, and the male ones were certainly praised for their families, but also how well they were doing in their careers or sporting exploits for the ones still in school, but the girls, apparently the only things of worth they were capable of was getting married and having babies, exclusively in that order.\n\nWhenever one of my aunts would be talking about their grandchildren and notice I was there, they would pat me on the shoulder and assure me I'd meet someone soon, generally using that condescending voice that comes so naturally to some people.\n\nMy father did give me the expected talking to. \"I hope you've got that all out of your system, young lady. When you come home I won't tolerate that sort of defiance.\"\n\nI didn't say anything, other than \"Yes, Daddy.\" When he determined I'd been properly chastened he dismissed me, and I went into the kitchen to help my mother and Charlotte. Mom smiled at me, and I felt a connection to her, realizing we'd both been on the receiving end of those lectures more than a few times.\n\nI also was acutely aware that I was going to break my mother's heart. In Mitch's arms the decisions seemed so easy, but here, in the house I'd grown up in, next to the woman who'd raised me, I understood why so many stayed in their proverbial closets, and how wanting to be with the person you loved could feel so damn selfish.\n\nIt changed nothing about what I planned to do, though. Now that it was so close to reality, I knew more than ever that I couldn't give what I had with Mitch up. It would be wrong on so many levels, and maybe it would inspire someone else from my little town that there were other options than hiding in the shadows for their entire lives.\n\nThe semester ended, and I had one more set of holidays to get through, and I managed to do so, although not without emotion. Mitch's situation had been finalized, and she was officially scheduled to be a student teacher in Tampa in the fall, and I imagined what my life would be like a year from now, realizing this would be the last Christmas I would have to spend apart from Mitch. It also might be the last I ever spent with my family.\n\nBlessedly, spring semester started, bringing with it my final collegiate tennis season. Coach had told me she had me inked into the number six singles spot, and she wanted me to work with the new freshman as much as possible, which I did, of course. We had another very successful season, and my time on the tennis courts was a blessed relief from the anxiety surrounding the approaching end of school.\n\nIf I'd had any lingering doubts about going with Mitch after graduation, they were laid to rest on Senior Day. Mitch's mom and dad, as well as Carrie's parents, were all there for our last home match of the season. I still got to walk out and get flowers as everyone in the stadium applauded for me, but I had to do it alone.\n\nMy teammates and coaches were there, and the fans, and especially Mitch, but I'd never felt so abandoned. That night Mitch just took me into her arms as I cried and cried. Eventually I fell asleep, and my dreams were a turbulent mess. But throughout there was one thing that was consistent. Wherever Mitch was, there was peace and rest.\n\nI woke up, still in her arms, feeling safe and loved. Mitch's fingers were running softly up and down my arm as I leaned against her.\n\nShe kissed me on the shoulder. \"Morning, baby.\"\n\n\"Good morning. I love you.\"\n\nMitch pulled me close. \"I love you, too.\"\n\n\"Will you do something for me?\"\n\nShe kissed the back of my head. \"Of course, baby. Anything.\"\n\n\"After graduation, will you come with me back to my parents' house? Help me get my stuff? I'm not going to take much.\"\n\n\"Sure. Of course.\"\n\n\"I'm going to tell them.\"\n\n\"And you want me there so your dad can shoot me in person?\"\n\nI giggled. \"That's unlikely. Besides, Dad keeps his guns unloaded. You should have a sporting chance to run away.\"\n\n\"Guns, like, plural? How many plurals?\"\n\n\"Um, two hunting rifles and a handgun. Oh, and a shotgun.\"\n\n\"Okay, see, when I said I'd go, I was being metaphorical.\"\n\nI turned in her arms. \"Really? You'd leave me there all alone?\" I nuzzled her neck, making her sigh.\n\n\"If I'm going to risk my neck, what do I get?\"\n\nI kissed down lower, onto her collarbone and chest. \"I'd be grateful.\"\n\n\"Ooh,\" she stroked the back of my head as my lips moved over her skin, \"How grateful?\"\n\nI pushed her onto her back, moving lower, pulling up her tank top and kissing her flat, toned stomach. \"Very grateful.\"\n\n\"Okay, oh, wow, you might be convincing me.\"\n\n\"I'll try harder then.\" I pulled off her boxers in one clean motion and settled between her legs. I let her flavor wash over me as I suckled her labia and clit, taking her higher and higher. If you're wondering, I never for one second thought Mitch would let me face my parents alone. I also knew the chances of my father pulling a gun on her were miniscule. A violent temper was not one of my father's many faults. Still, pretending to convince her was going to be a lot of fun, so I carried on.\n\nWe didn't get out of bed until almost noon, and I shooed Mitch off to the living room. I had work to finish. I knew that if I finished with a four point oh this semester I'd graduate summa cum laude, which had been a goal of mine since Freshman year. Mitch always joked that if I was graduating summa cum laude, she was graduating 'thank the laude', but I knew she was rooting for me as hard as anyone.\n\nI also found out that week that I'd been voted onto the first team Academic All SEC team, which was awesome. Our season ending tournaments finished, and there was nothing left in my academic career but graduation. Mitch's parents came into town the day before, taking Carrie, Mitch and me out to dinner to celebrate. Carrie's parents and sisters would be here in the morning. She was taking the job in Orlando, where she'd interned, which was awesome, 'cause she'd only be a few hours away from us in Tampa..\n\nIt was kind of crazy. The ceremony came, a dazzling display of color and humanity, all packed into Sanford Stadium as Senator Chambliss reminded us that the world is a scary place and challenged us to bring light out of the shadows. It was a culmination of four years of study and change. To say that I was a different person today than I had been that day sprinting to my first class was a massive understatement.\n\nI glanced over my shoulder toward the sea of caps and gowns, knowing the woman I loved was out there somewhere. She'd changed me, just like Coach Holiday and my professors. But no one more than Michelle Kirkpatrick. I think it's the final mark of adulthood, to stand up and make your own way in the world, to accept responsibility for your choices. Of course, I realized that I was moving into my girlfriend's parent's house for a moment, but still. For me it was huge, just like the world was huge.\n\nAnd then it was over, and Mitch and I were lying in our bed for the last time. The boxes and suitcases were stacked by the front door, and Jack and Stacy would be here first thing in the morning. They'd take the vast majority back with them, and Mitch and I would head to my parent's house.\n\nThey still believed that I was staying. Carl and Bridget knew the truth, but I'd told them to stay away. I didn't want either of them hit with any stray animosity, although I promised to keep Carl updated, especially if things went sideways.\n\nWe made short work of loading Jack's truck, and by nine o'clock we were outside Athens driving through the Georgia countryside.\n\n\"That's crazy. The dirt in this state really is red, isn't it?\"\n\nI shook my head, appreciating Mitch's latest attempt at light conversation. \"Yeah. Don't you remember from 'Gone with the Wind'? The red earth of Tara? You think they were making that up?\"\n\n\"I don't know what I thought, but it's kind of creepy.\"\n\nI laughed and looked back out the window, trying to keep my heart rate down. Eventually we pulled into town, and I took a few deep breaths.\n\nMitch reached over and took my hand. \"So what's the plan?\"\n\n\"I'm going to go in and talk to them, then I'll come out and get you.\"\n\n\"Alright.\"\n\n\"And if I come out running, start the truck.\"\n\nMitch gave a nervous chuckle. \"Check.\"\n\nI directed her to my house. She backed into the short driveway. That was probably a good idea, allowing for a much faster getaway if needed. Mitch squeezed my hand. \"You're going to be okay. I'm right here, and I love you.\"\n\nThe sincerity in her face brought a tear to my eye, and I leaned over and kissed her, taking strength from her touch.\n\n\"Okay.\" I breathed deep, climbed out of the truck, and went inside.\n\nMy dad was sitting in his chair, reading the Sunday paper. He'd already changed out of his church clothes; they generally went to the early service. My mom came out from the kitchen with a smile. \"Hello, sweetheart!\" She gave me a hug, which I let linger, seeing as it would be my last for a very long time.\n\nMy father folded his newspaper and set it aside. \"Do you need some help bringing things in, Cindy?\"\n\n\"No, Dad. I'm not staying.\"\n\nHis gaze grew icy. \"What exactly do you mean by that?\"\n\nI forced myself not to drop my gaze. \"I'm not moving home, Dad.\"\n\n\"Where exactly do you expect to be going?\"\n\n\"I'm moving to Tampa, Florida.\" I sucked in a deep breath as my heart thundered in my chest. \"With Michelle. She's doing her student teaching there, and I'm going to get a job. Start my career.\"\n\n\"You're moving to a different state to be with your college roommate. You understand how that looks, how it will look to everyone here.\" The tone of his voice told me he already had suspicions. I guess I hadn't been as clandestine as I'd hoped.\n\n\"How does it look, Dad?\"\n\n\"Like you are in a sinful relationship with that woman. I've seen her, you know, your doubles partner. People at the plant have shown me pictures from the internet. They've asked questions. I assured them you would never sully yourself in that way, that you would not embarrass this family like that. Tell me you haven't.\" His voice was frozen fire, and I could feel the fury building behind it.\n\n\"Haven't what, Dad? Haven't been with her? That I'm not gay? Is that what you're worried about?\" I glanced at Mom, who'd lowered herself onto the couch, wearing a look of stunned disbelief.",
        "\"Don't toy with me, young lady.\" Dad sat forward. \"Have you defiled yourself with that girl?\"\n\nThat word made me angry, and my soul steeled inside me. \"No, I have not. I have shared a bed with her for the last three years. We have been as intimate as two people can be, and none of it has defiled me. I am moving to Tampa with her, and we are going to start a life and a family together\"\n\n\"A family!? It's not a family, it's an abomination, young lady. You are going to get your bags and forget this nonsense.\" He looked past me. \"Charlotte! Back to your room!\" I turned in time to see my sister vanish down the hall.\n\n\"Really. That's what you want? Your openly gay daughter living under your roof? Cause that's what I am, Dad.\" I put some spite into the word. \"I'm not hiding any more. Now we're going to get my things from my room, and we're going to leave.\"\n\n\"We? She's here?\"\n\n\"She's in her truck. She's going to help me pack. We'll be gone faster that way.\"\n\n\"That person is not allowed in my house! If she steps in the front door I'm calling the police.\"\n\n\"Fine, Dad, you do that, and I'll make sure the officer and everyone on the block knows exactly what's going on. We'll see how long the town rumor mill takes to grow this particular weed.\"\n\nDad thought for a second, weighing the unpleasant options. In the end he decided on a different attack. \"If you walk out that door you are not welcome back, not until you've repented from this filth. This will take you to hell. You know that.\"\n\n\"If God doesn't want me to be happy, especially in an innocent, mutually healthy relationship, then he's not worth worshipping. \"\n\nMom was crying, and there were tears in my eyes as well. I went to the front door, opening it and beckoning Mitch inside. She nodded and grabbed the flat boxes and the tape gun out of the back and headed my way.\n\nA voice from behind me spoke, but I didn't turn. \"You are not my daughter. You have no place in this family. Get your things and leave. Don't darken our doorstep again. I wash my hands of you and your filth.\" There was no sadness or regret, no trace of pain in his voice, just anger and hatred that made my blood run cold.\n\nBy the time Mitch got inside my dad was gone, probably retreating into his study. To be honest, that was as good as I could have hoped for, so I figured we should make hay. Mom was still sitting on the couch, now staring in unabashed horror at the tall butch now standing in her living room.\n\n\"Mom, this is Michelle Kirkpatrick. My girlfriend.\"\n\nMom didn't acknowledge her, even when Mitch nodded to her and said, \"Ma'am.\"\n\nI decided not to push it, and led Mitch back to my room. We packed quickly. I pulled out my Letterman's jacket and other clothes I hadn't brought to school while Mitch assembled boxes. I moved with a fire in me. I wasn't sure what my dad was planning, if anything, and I wanted to be gone and out of his reach as soon as possible. By some miracle, we didn't see him again. In less than an hour I had my clothes and sundries packed, and we were pulling away from my house. My mother hadn't said goodbye, not that I'd expected it.\n\nAs we pulled out of town the emotion of the thing started to catch up to me, and tears were rolling down my face.\n\n\"Sweetheart?\" There was real concern in my girlfriend's voice, and I made myself look at her and smile.\n\n\"I'm okay, sweetie.\"\n\n\"I'm so sorry, baby.\"\n\nIt looked like she had something else to say. So I asked. \"What?\"\n\n\"You, um,\" she swallowed heavily, \"you don't blame me, do you?\"\n\n\"Blame you? For what?\"\n\n\"Well, if you hadn't met me, none of this would have happened. I wouldn't be taking you away from your family.\"\n\nThis was very unlike Mitch. She was always confident to the point of cocky, in the most innocent and endearing way, of course. Seeing her vulnerable and scared was disconcerting, so I reached out and took her hand. \"Sweetheart, don't. Remember when you told me I wasn't responsible for my parents actions?\"\n\n\"Yeah.\"\n\n\"Neither are you.\" My thumb ran over the back of her hand, and I could feel the energy that was always present when we touched.\n\n\"I know, but still.\"\n\n\"I know too. I know it shouldn't be like this. I should be able to bring the person I love home to my family, regardless of who they are. I shouldn't have to choose. But I know I chose right. You know how I know?\"\n\nShe turned her perfect blue eyes to mine, her gentle smile filling my soul. \"How?\"\n\n\"Because of the way that you're looking at me now. Because I know how much you love me.\" I smiled back at her. \"Because I can't wait to start our life together.\"\n\nA tear formed in Mitch's eye as she looked back to the road. \"Our life. Sounds perfect.\"\n\nIt was a long trip, and it was well after ten before we pulled into the Kirkpatricks' driveway. But even though the sun was long down, Jack and Stacy were standing on the porch, and when I climbed down out of the passenger side of Mitch's truck, Stacy's arms were waiting for a much needed hug. I kind of broke down on her shoulder, and she just held me tight and let me cry.\n\n\"You always have a family here, dear. You know that, right?\"\n\nI nodded, not letting go for what felt like several more minutes. The cold finality of my father's voice still echoed in my mind. But I also knew I'd done the right thing, standing up for who I was, and what Mitch and I were together.\n\nWe spent the whole of the next year living with Mitch's parents. I found a job quickly, at a locally owned fiduciary where I had real contact with investor accounts. I had a pretty good idea from before, but it didn't take me long to realize that was what I wanted to do, working with smaller accounts and helping them grow, so that real people could have the retirements they deserved.\n\nMitch did wonderfully at her student teaching, officially graduating in December and taking over her official teaching duties at the school, including being an assistant coach for the girl's tennis team. We spent, and still do spend, a lot of nights cuddled up on the couch breaking down film of her players and their upcoming opponents.\n\nWe moved into our own place that following summer, just renting to start. I'd put almost my entire salary away that first year, and being in the financial game has other perks. I was able to keep my ear to the ground on foreclosures and seizures, and we were able to buy a little place for a great deal.\n\nIt was just after two-thirty on a Tuesday afternoon, January 6<sup>th</sup>, 2015, exactly, when one of the ladies in my office poked her head into my cube.\n\n\"Are you excited?\"\n\nI looked up from the account I was working on. \"About what?\"\n\n\"You don't know? God, Cindy, look at your phone.\"\n\nI gave a confused grin and pulled the device out of the drawer where I kept it. I didn't like it on my desk, where it had a tendency to distract me. Sure enough there was a news alert, which I pressed to open.\n\n'Florida Supreme Court strikes down same-sex marriage ban.\"\n\nMy hand went to my mouth, covering it as I drew a shaky breath. \"Oh, my god!\"\n\nRachelle nodded. \"Yeah, they're already giving out licenses in some counties. They expect all counties to start issuing them tomorrow.\"\n\nI felt a sob escape my chest, and the commotion drew the attention of many others in the office. I'd never hid my sexuality here, I refused to, and there was a picture of Mitch and me on my desk, so everyone knew what this meant to me. I glanced at the clock. School should have ended for Mitch just a few minutes ago, and I was just about to call when my phone started buzzing in my hand.\n\n\"Hello?\"\n\n\"Hi, sweetheart. Did you hear?\"\n\nHer voice was dancing with happiness, and tears were rolling down my face. \"Yeah, people in the office just told me.\"\n\n\"So, what do you think? Cindy Spencer, will you marry me?\"\n\n\"Yes, of course I'll marry you.\" With that my whole office cheered, and I cried. My boss sent me home for the day, and Mitch and I and her parents all went out for dinner that night to celebrate.\n\nMitch insisted that she be able to buy me a real ring, so I waited a year while she saved up the money before she proposed again. We got married in April, 2017, on a perfect Saturday afternoon. Carl gave me away, and Carrie and Bridget stood up as my bridesmaids.\n\nCarl and Bridget had gotten married two summers prior, and at their wedding Dad and Mom completely ignored my existence, which left me an emotional mess afterwards. At my own wedding it was so hard, not having my mother or sister there, but I had total confidence in my choice of partner.\n\nI've heard so many people, including Mitch, say that their wedding was a blur. I guess a lot of the day was, but I remember almost every second of the ceremony itself, the beauty of the garden, the color of the flowers, and the beaming gaze of Michelle as I walked towards her.\n\nThe minister invited us to speak our promises before he got to the traditional vows, and I can recall almost every word,\n\nMitch went first.\n\n\"Cindy, my love, I'll never forget the first time I met you, and how much you didn't like me.\" --laughter- \"But even then, in those early moments, you were the only thing I could think about. As we got closer, teammates, doubles partners, friends, I kept telling myself not to get too excited, because if I did, if I indulged those fantasies, and they didn't come true, I'm not sure I'd have survived. Not that I listened to myself, of course. I dreamed of this moment so often, that when you told me you wanted to be mine, I didn't believe it was really happening. I still think it's a dream, some crazy, perfect dream that I never want to wake from. Cindy, I'm yours. My heart, body, soul, all yours, forever. I promise to be your best friend, biggest supporter, your wife, for every day God gives us together. I love you, always.\n\nThe minister turned to me, and I very much wanted to know how I was supposed to speak with the tears of joy rolling down my face. But all I had to do was look up into Mitch's eyes, those perfect blue eyes, where there was love, and peace.\n\n\"Michelle, you challenged everything I ever thought I knew from the first moments. I never told you this, but that first time, in the gym, I couldn't take my eyes off you. Your smile, your eyes, the way you moved, they captivated me in a way I didn't understand. But it wasn't just those things. Your relentless optimism, your passion for life, they brightened my world with colors I didn't know existed, and in your gentle arms, even when they were just the arms of a friend, I felt safe and happy in ways I'd never known. My heart understood it wanted to be yours for so long before my head caught up, but now I know. Every day with you is a joy and a gift, and every sacrifice is worth it if I get to be with you. I promise to be your friend, your lover, your cheerleader, and your critic. But mostly I promise to be your faithful wife and partner in all things. Now and forever. I love you, too.\"\n\nWe went through the traditional vows, and Carl and Stacy lit the tapers we used to light our unity candle. Eventually the minister turned us toward the assembly.\n\n\"And now, I present to you, for the first time, Michelle and Cindy Kirkpatrick. Ladies, you may kiss your bride.\"\n\nWe held off on our honeymoon until Mitch was out of school, and then we were gone to Bermuda for a week, a gift from Mitch's grandparents. And that's basically where you met us, when Carrie brought Iryna to meet us that fall.\n\nThat's been a few years now. Oh, and I just felt the baby kick. I had some complications, and my OB put me on bed rest three weeks ago. It's driving me nuts, even if it did give me the chance to write this, but I could deliver any day now. I'm definitely ready to not be pregnant anymore, but more than that I just want to hold my daughter. We haven't actually been told the sex, but I remember the dream I had before Mitch and I got together, and I know it's a girl.\n\nCarrie and Iryna helped us financially, as IVF is expensive and it took several attempts to get it right. Biologically Mitch is the mother, and Carl is the donor. I was honestly a little worried that I wouldn't feel connected to the baby, because she wasn't biologically mine, but that fear vanished the first moment I felt her move inside me.\n\nI sent my mom a copy of the sonogram, along with a letter stating I would keep her updated about her granddaughter's life, and that she was always welcome to reach out. Carl says she's asked about me, how I'm doing. I'm hoping someday she'll find the courage to contact me. Charlotte was allowed to attend a small Christian college, but she dropped out after three semesters to get married. I wasn't invited to the wedding. I hope she's happy, and I think about her a lot.\n\nMitch has been adorable. She reads and talks to my belly every day, saying she wants our baby to know her voice. She's also insistent that she gets to carry next time. She tells everyone it's so that she can send me for pickles and ice cream at two AM (which only happened once, thank you very much), but I know she just wants to experience this. I don't blame her. Feeling your child grow inside you is indescribable.\n\nI can hear the garage door opening, so Mitch is home. It still makes me smile every time. Thank you for reading, and God bless.\n\nTwenty years later\n\n\"Ladies and gentlemen, welcome to the ladies final at Wimbledon, 2041. I'm James Blake, here with my partner, Bethanie Matttek-Sands, and Bethanie, this is the day the U.S. has been waiting for.\"\n\n\"Absolutely, James, since bursting onto the scene at Flushing Meadows as an eighteen year old prodigy, we've all been waiting for the day the Great American Hope, Hope Kirkpatrick, would reach a grand-slam final. She faces a stiff test in Russian world number two, Sofia Ivanova, but with the dominance she's shown on the grass this fortnight, James, no one is calling her an underdog.\"\n\n\"So true. As we wait for the player introductions, here's a shot of Hope's box. Her coach, there on the right, needs no introduction, nine time grand slam champion and former world number one Iryna Baraskova.\"\n\n\"Yeah, James, she's been coaching Hope since she was sixteen, and of course sitting next to Iryna is Carrie Mitchell, Iryna's wife and absolute fixture through every one of her major titles. We all remember seeing her cheering and urging Iryna on through every point of every slam, and, as Iryna would say, keeping both her body and mind in top condition for each. Next to them, the couple holding hands, are Hope's parents, Michelle and Cindy Kirkpatrick. I actually got to sit down with them earlier this week, and let me tell you, if anyone wonders where Hope gets both her passionate playing style and the poise and high tennis I.Q. everyone says is beyond her years, look no further.\n\n\"Michelle is outgoing, dynamic, but always smiling and friendly, while Cindy is much more reserved and analytical, a brilliant tennis mind. They were both standouts at the University of Georgia, along with Carrie Mitchell, where they all met. But what really struck me, James, was the way the two of them just seem to resonate off each other. The energy between them is palpable, how much a part of each other they are. It's no wonder Hope has been able to reach so high so soon, with that secure foundation at home. Honestly, James, being around them made me want to go home and hug my husband, Justin, and remind him how happy he makes me.\"\n\n\"That's sweet. I probably should shout out to my wife, Emily, back home, too. I love you. Anyway, we also see her brother, John, who competed in the boy's championships this year, making the quarters at age fifteen. A new addition to the box, behind Hope's mothers, is her uncle, Carl Spencer and his wife Bridget. This week Hope revealed to us that Uncle Carl is indeed her biological father, and she was asked after the semifinals about how it would feel to have her father there in the box. This is how she responded:\"\n\n\"Uncle Carl isn't my father. He's a wonderful Uncle, and I love him and Aunt Bridget and all my cousins, and I'm forever grateful for how he helped my moms have me and my brother, but I already have two wonderful parents, who've shown me not only how to play tennis and chase my dreams, but also how to love without conditions, how to support your partner through everything, and how to be a woman of passion, poise, and grace.\n\n\"Even after almost thirty years together, they're still the best of friends, and still deeply in love. They've taught me what I want in a partner someday. But today, I just want to win Wimbledon.\"\n\nTHE END\n\n*******\n\nThank you all for taking this journey with me! I hope you enjoyed it. Please rate and comment. The comments keep me going. And if you have questions feel free to send feedback. I'll try to answer. Thanks again to rileyworks and ash_legend for editing. You both made the story and the reading so much better.\n\nIt may be a while before my next posting. I'm working on 'Unrequited', and starting a new project called 'Beautiful,' It's the story of a woman traded in for a younger, thinner model. Can she accept that someone new in her life loves her just the way she is? They are both highly emotional pieces for me, and I can't wait to share them with you all. It's such a joy writing for this community.\n\nTake care and be safe."
    ],
    "authorname": "JCMcNeilly",
    "tags": [
        "love story",
        "romance",
        "college",
        "tennis",
        "family"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/a-girl-named-mitch"
}
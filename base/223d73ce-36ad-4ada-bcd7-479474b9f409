{
    "title": "Vagabonds",
    "pages": [
        "As always, thank you to my awesome team. Harddaysknight is my mentor and gives me critical review. My editors are Papakilo14, Hal, Olddave1951, GeorgeAnderson and SBrooks103x. Love you guys and thank you so much.\n\nIn the original version of LW, the category description was: \"These ladies really know how to please their men.\" In the spirit of the original, I posted it here.\n\nThis is a story I have on another site, revised and expanded, and I wanted to repost it here as I rebuild my library. If you have already read it, thank you, you need not read, vote or comment, and if not, I hope you enjoy, Randi.\n\n*****\n\nI stumbled out the patio door with a nightstick in my hand. The damn dogs were in my trash again. The rumble of my trash container turning over woke me. It was the third time that week, and I was getting sick of it. Why couldn't people keep their damn dogs at home? I knew the dogs were just hungry, but this was ridiculous.\n\nI opened the back gate stealthily and prepared to rush out and deal the mangy curs some punishment. I flung the gate open and dashed to the garbage containers. There were two dark forms with one container on its side. I raised the club and they noticed me.\n\n\"Please, mister, we was just hungry,\" one of them said. \"We'll clean it up! Don't hit us!\"\n\nIt wasn't dogs; it was two children. They were definitely feral, though. It was dark back there and I grabbed them by the collars, dragging them into the backyard under the security lights. I stood them up and looked them over. They were ragged and dirty. They looked like vagabonds. They had on nondescript baggy clothes and ball caps. It was cold out, and I could see them shivering.\n\n\"Did you two turn my garbage over earlier in the week?\" I asked.\n\nThey looked at one another. \"Yes, you always leave some stuff like pizza or something in your trash,\" one of them said. \"I'm sorry we left it. We won't do it anymore. Just let us go, mister, we won't bother you no more. We'll clean it up.\"\n\nThis wouldn't do. I took them firmly by the shirts and marched them inside. I took them straight to the bathroom, pushed them in and shut the door. \"Don't come out until I get back,\" I said.\n\nI went and got some of my ex-wife's sweatpants, hoodies, clean socks and big fluffy towels. I took them to the bathroom and opened the door. They were trying to open the window and get away. \"You may like being dirty,\" I told them, \"but I don't think a hot shower is going to hurt you. There's soap and shampoo in the shower. Here are clean clothes and towels. Get undressed and get in the shower.\"\n\n\"We don't like being dirty,\" the biggest one hissed at me. \"We ain't got no nice shower like you. You just going to stand there?\"\n\n\"You might steal something,\" I said.\n\n\"Yeah, right,\" the little one said. \"We going to steal your toilet paper. We ain't thieves. You some kind of a pervert, mister? You like little girls?\"\n\nI was dumbfounded. Now that I looked closely, there were definitely girls under all that dirt. \"I... I...\" I stammered, \"I didn't know you were girls. Just clean up and I'll get you something to eat. Come to the kitchen when you get clean and I'll feed you.\"\n\nI left them the bathroom and went to the kitchen. I opened the refrigerator and took stock. There was cold fried chicken, half a bowl of potato salad, a half-eaten vegetable tray, some pastrami for sandwiches and baby dill pickles. I divided the chicken onto two plates. There were three pieces for each one and I gave them each a big pile of potato salad. I put the veggies on a plate and got some ranch for them to dip in. Some pickles on the plate, a pastrami sandwich for each of us and some chips for me, and them, too, if they wanted them, completed a pretty good meal, I thought. I hoped they liked Muenster cheese, mayo and mustard on their sandwiches.\n\nI heard the bathroom door open quietly and whispers outside the kitchen door. After a minute, two of the most beautiful girls I'd ever seen walked into my kitchen. They had long, midnight black hair and olive skin. The greenest eyes on earth, a little almond shaped, high cheekbones and just the cutest little noses imaginable made them quite a pair. They looked like they hadn't quite made it to teen yet, maybe eleven or twelve. It was funny seeing them in Brianna's clothes. She's a tall girl, and they were very little. They had sleeves and pant legs rolled up and they looked like vagabonds.\n\n\"Pull up a chair,\" I invited them. \"Do you like Coke, or I have juice or milk.\"\n\nThey both wanted milk. \"I'm McCay North,\" I told them as I poured their milk. I sat it on the counter in front of them. \"Dig in.\"\n\n\"I'm Maggie,\" the bigger one said. \"That's short for Margret. She's Stokely. Can we really eat all this?\"\n\n\"You can have more if you want another sandwich,\" I said. \"I'll cook for you in the morning. I'm not cooking at 2 AM.\"\n\n\"No, this is good. Thank you,\" Stokely said.\n\nMaggie looked at me suspiciously. \"What do you want from us? We ain't doing no nasty stuff.\"\n\nI laughed. \"No, me either. If either one of you has any designs on my virtue, you're going to be disappointed.\"\n\nThey clearly didn't understand my sense of humor. \"I'm not available to little girls,\" I said.\n\nI could tell they didn't like the \"little girls\" reference, but they started eating. They ate like wolves. \"Hey, whoa, slow down,\" I told them. \"It isn't trying to get away. The chickens are dead and the potatoes were never very fast. You're going to make yourselves sick!\"\n\nThat got a chuckle out of them, but they ate less ravenously. \"Where are you girls staying?\" I asked them.\n\n\"There's an empty house down the block,\" Maggie said. \"We found a mattress and we've got some stuff to cover up with. We're afraid the crackheads are going to move in, though. As soon as they find out it's empty, they will.\"\n\n\"Would you like to sleep in a warm, clean bed tonight?\" I asked them.\n\nThey looked at me suspiciously again. \"Not mine,\" I laughed. \"I have three spare bedrooms. Well, they're mine, too, but you know what I mean.\"\n\nThey giggled nervously. \"We ain't got no money,\" Stokely said. \"We can't pay you. We collect cans, but we just spend all that on food.\"\n\n\"I'm not asking you to pay me,\" I said. \"Did you hear me say I want you to pay me?\"\n\n\"What gives?\" she asked. \"Why you being so nice to us, Mc... Mc...\"\n\n\"Call me Mack,\" I said. \"Everyone does.\"\n\n\"Why you acting all nice, Mack?\" she asked.\n\n\"I'm not 'acting' any way,\" I told her. \"I'm a nice guy, just ask my mom.\" That got smiles from them. I liked that. I decided I'd make them do it a lot. \"If I were in your shoes I'd want someone to be nice to me,\" I said.\n\nThey seemed to consider that. \"Can I have some of those chips?\" Stokely asked. I pushed the bag over and they both reached in while they ate their sandwiches. I had finished mine. They drank their milk and looked like they wanted more. I poured them another glass and they drank that, too. I was amazed, but they cleaned their plates down to the crumbs and ate all the veggies. They must have been really hungry.\n\n\"Off to bed,\" I told them. \"You'll each have your own bathroom. There are toothbrushes, combs and stuff like that in the vanities. Aspirins, tummy ache stuff, toothpaste and floss in the medicine cabinets. Anything else you need you have to ask me.\"\n\n\"Can we lock the doors?\" Maggie asked.\n\n\"Yes, but you have to open them in a reasonable amount of time if I ask you to,\" I said.\n\nThey looked at me funny. Light dawned in Maggie's impossibly green eyes. \"He's afraid we'll steal stuff,\" she told her sister. \"We won't steal anything, Mack. It's okay if you don't trust us. We don't trust you very much either.\"\n\nI had to laugh. \"Okay, we have a mutual distrust. You're going to find out you can trust me. I hardly ever harm beautiful girls.\"\n\nThat got me another pair of flashing smiles. I think they liked the \"beautiful\" part. They followed me down the hall and went into their rooms. I heard the locks click and smiled to myself. When I got back in bed, I lay awake for a while. What was the deal on these girls? Why were they rummaging around in my trash? Why were they on their own? Where was their family? I was going to get some answers in the morning.\n\nI was getting dressed when I heard the floor creak down the hall. I opened the door a crack and they were sneaking toward the living room. I figured they were going to leave so I opened the door. They froze.\n\n\"You girls ready for breakfast?\" I asked.\n\nThey looked at each other. \"Maybe we better just go,\" Maggie said. \"You ain't going to, like, keep us or nothing, are you?\"\n\n\"You mean, force you to stay?\" I asked.\n\nThey looked at each other again. They looked back at me and nodded.\n\n\"No, I won't force you to do anything,\" I said. \"It's against my rules to force people to do things. I'd like it if you'd eat breakfast with me, though.\"\n\nThey glanced at one another again. \"You'll let us go after that?\" Stokely asked.\n\n\"If you want to,\" I said. \"Actually, I was hoping you'd want to spend the day with me. If you don't, that's okay, but do you have an appointment somewhere?\"\n\n\"Yeah, we need to meet with our stockbroker,\" Maggie smiled. It lit her up like a Christmas tree. \"What you going to feed us?\"\n\n\"First, you left an 'are' out of that sentence,\" I told her. \"It's, 'What are you going to feed us'.\"\n\n\"You an English teacher or something?\" she asked.\n\n\"As a matter of fact, I am,\" I told her. \"I teach English Literature at the University.\"\n\n\"Cool,\" Stokely said. \"We don't go to school. Too busy.\"\n\n\"You do eat breakfast though, right? I was thinking waffles and bacon. Do you girls like that?\"\n\nThey did, so we went in and they got out the waffle iron while I mixed up the batter. They cooked the waffles while I fried two pounds of bacon. I'm kind of a syrup snob. I'm a coffee snob, too. I let Maggie turn the bacon while I ground coffee beans and put the percolator on. It all came together pretty well, and we had real maple syrup and waffles. They disgusted me by asking if I had creamer for the coffee. I keep some around for the barbarians and Brianna, and they liked the vanilla hazelnut. We ate all the bacon and they each had three waffles.\n\n\"You girls stick with me and I'll have you as fat as toads in a week,\" I told them. They both laughed and it was the most wonderful sound I'd ever heard. They drank milk like starving calves, too. My pantry was going to need some work.\n\n\"So tell me about Maggie and Stokely,\" I said. \"What's up with you girls? Why are you digging through people's garbage for food?\"\n\nWe took mugs of coffee into the living room and they told me a tale of woe. Their father was an autoworker. He lost his job when they were little and started drinking and knocking them around. Their mother divorced him and they never saw him again. The Detroit economy was a mess. Well, everything about Detroit was a mess, but jobs were hard to come by. Their mother drove a cab and she picked up the wrong fare one night. He stabbed her for what little money she had on her and left her to bleed to death.\n\nThey'd been put in foster care and the man of the house started molesting them. They ran away and they'd been living on the streets for three months. Their last name was Steele and they worried about freezing to death, being raped or killed, and where their next meal was coming from.\n\nI sat there for a while after they finished talking. Jesus Christ, they were breaking my heart. I wondered how many like them were out there. It was probably a more common story than I imagined. I wondered if they'd let me help them. I wondered how I could help them. It seemed unlikely that child services would let them stay with me. A single man keeping two young girls sounded like something a pervert would dream up, and I was pretty sure it wouldn't fly with social services. They interrupted my reverie.\n\n\"Mack, you married?\" Stokely asked.\n\n\"I was,\" I told them. \"My ex decided I wasn't ambitious enough. She's a hotshot lawyer and she was going places. She didn't have room in her life for being married.\"\n\n\"What a bitch,\" Maggie said.\n\nI laughed. \"She's really a very nice person. She didn't cheat on me or anything and we're still very close friends. We mutually decided that we should never have gotten married. We were very young and very dumb.\"\n\n\"How old are you?\" Stokely wanted to know.\n\n\"I'm twenty-eight,\" I told her. \"How old are you?\"\n\n\"I'm eleven and she's thirteen,\" she said. \"What we going to do today?\"\n\n\"What 'are' we going to do today,\" I told her.\n\n\"Yeah, what you said.\"\n\n\"We're going to talk,\" I told her. \"First, I'm going to introduce you to someone.\"\n\nI opened the garage door and a bundle of wiggling fur shot through the door. He noticed our guests and shot over to them, leaping onto the sofa and lying across their laps, swiping them with a big pink tongue.\n\n\"This is Grandville,\" I told them. \"I call him Granny.\"\n\nThey were giggling hysterically as he drenched them with his tongue. He weighs about 130, and they weren't getting up with him on their laps. I'm sure he weighed more than they did.\n\n\"Down, Granny,\" I told him. He reluctantly climbed down and lay on their feet.\n\n\"He's huge,\" Stokely laughed, petting his head. \"What kind of a dog is he? He's kind of striped like a tiger.\"\n\n\"He's a Bull Mastiff,\" I said. \"He's called a brindle and that's why he's that color.\"\n\n\"He looks like he could bite our faces off,\" Maggie said.\n\n\"Yes, he could, but he won't. He's friendly to my friends. He sees you sitting in our house and being friendly, so he loves you. If you were being belligerent toward me, he would have been alarmed and very aggressive. Now that he knows you, he won't let anyone be belligerent toward you, either. If I yelled at you, he wouldn't like that. He's very protective of people he loves.\"\n\nStokely jumped down and lay on top of him, hugging him around the neck while he licked her arm. \"I love him,\" she said. \"He's so wrinkly and cute! Does he live in the garage?\"\n\n\"No, he lives in the house,\" I said. \"He was sick yesterday, and I put him out there so he wouldn't puke all over the house.\"\n\n\"What made him sick?\" Stokely asked.\n\n\"He eats stuff he shouldn't,\" I said. \"He chews up sticks, eats bugs, dead stuff he finds, no telling what. He seems to be okay today.\"\n\n\"Gross,\" Maggie exclaimed. \"He was licking my face!\"\n\n\"Yeah, he's cute, but kind of a mess,\" I said. \"He's my buddy, though, so I just put up with him. He'll be your buddy, too, if you let him. We should take him for a walk.\"\n\nI got his leash and Maggie wanted to lead him. He mostly leads the person with the leash so she stayed a few yards ahead of Stokely and me, being dragged along. Stokely put her little hand in mine. I looked down at her and she smiled up at me. God she was beautiful! \"Is it okay?\" she asked.\n\n\"Sure, baby,\" I said. \"I like holding hands with pretty girls.\" She blushed a little but she didn't turn me loose. We walked a couple of miles and Granny was panting and drooling by the time we got back. It was cold but he does that anyway.\n\nWe got more coffee and talked all afternoon. I finally asked them if they would let me help them. \"What can you do?\" Maggie asked.\n\n\"I really don't know,\" I told them. \"I could talk to Brianna. She's a lawyer, albeit a different kind. Maybe she would have some ideas.\"\n\n\"Is that the bitch?\" Maggie asked.\n\n\"Maggie, she isn't a bitch,\" I told her. \"Stop calling her that. Do you trust me?\"\n\nThey looked at each other and then back at me. \"Yeah, I guess so,\" Stokely said. \"You're being very nice to us.\"\n\n\"Well, let's give her a call and see if she'll come over,\" I said. \"You'll like her. Just give her a chance.\"\n\nBrianna was busy, but she said she would come over for dinner. Bri is this tall gorgeous redhead. She's smoking hot but she's never figured that out. I could tell the girls were impressed when she walked in. She gave me a kiss that curled my toes and hugged both the girls.\n\n\"You've replaced me,\" she winked at me.\n\n\"No, Bri, you're irreplaceable, you know that,\" I kidded her. She really was. I told the girls we were still friends, and we were. We were friends with benefits. We still had some great sex together, sometimes once a week or more. Sometimes she came over and stayed with me for a week or so and we fucked like bunnies. She just didn't have time for a husband in her life and I doubted she ever would. She loved me, in her own way, and I loved her, too. We just couldn't be married. We got along perfectly as fuck buddies, but we fought like cats and dogs when we were married.\n\n\"So, who are your new girlfriends?\" she asked. She smiled at them and I knew they were dazzled.\n\n\"I'm Maggie, and she's Stokely.\"\n\n\"Pleased to meet you,\" Bri said. \"You do know that this guy is dangerous, right?\"\n\n\"Not to us,\" Stokely said. \"I think he might be to someone he was enemies with. He has a club and a really big dog.\"\n\nBri prodded Grandville with her toe and he snored in protest. \"Hey, big guy,\" she knelt and hugged him. \"Miss me?\" He rolled his eyes up at her but couldn't muster the energy to raise his head.\n\n\"What's up, Mack?\" she asked. \"What did you want to talk to me about? Not that I mind the dinner invitation. He's a fantastic cook, girls, if you can get him motivated.\"\n\n\"I think he made lamb chops,\" Maggie said. \"We've never had that before.\"\n\n\"Well you're in for a treat then, but what's up?\" she asked again.\n\nWe ate dinner and I explained. \"We need your help, Bri,\" I told her. \"We don't know anything about legal stuff. The girls are orphans. Well, their dad may be alive but no one knows where. He abandoned them and their mother was murdered. They were in foster care and some asshole started feeling them up. They ran away and they're living on the street. They were dumping out my garbage looking for something to eat and I caught them. Now we're trying to figure something out so they won't be back out on the street.\"\n\nShe looked at me for a minute. \"You want them, don't you? Jesus Christ, Mack! You've always wanted kids and because I won't give you any you want them, don't you?\"\n\nI blushed. \"Yeah, I kinda do. How do you think that could happen, Bri?\"\n\n\"I don't think it could,\" she said. \"No family court is going to give you two young girls. You're a single man. It's a recipe for disaster. They won't do it.\"\n\nI looked over at the girls. They were staring at me with wide eyes. \"What?\" I asked.\n\nThey looked at each other and burst into tears. Both of them ran over and threw their arms around me. \"You wanted to keep us?\" Stokely sobbed. \"I can't believe that. I didn't think we would ever find anyone... anyone... \" she couldn't go on.\n\nI held them tightly. \"Yes, girls, I was thinking about it. You need someone to watch out for you. I need someone to look out for me. I thought we might do that together, and Granny would look for for all of us.\" Their little bodies were shaking and they pressed against me tightly. \n\nI looked helplessly over at Bri and there were tears running down her cheeks. She looked from the girls to me. \"Damn it, Mack, look what you're done to me! Just when I think I know you, you always surprise me. What am I going to do with you?\" There was an odd look on her face, like she was seeing me for the first time. \"Let me think for a few days. Girls, you're going with me. You can't stay here with Mack. It would ruin everything if that ever came out. Mack, we're taking Granny with us. I can't stay home and he'll have to look after them.\"\n\nShe was like a tornado as she swirled around and swept them and Granny out of the house in into her Mercedes. \"I'll call you,\" she said.\n\nShe did call for about thirty seconds, three times over the next two weeks. I didn't see hide or hair of them until she called me Friday morning and told me she wanted to meet me for dinner at Alphonso's. It's a nice Italian place in Pontiac, and we went there a lot. She was already there when I arrived, sitting at the bar with men swirling around her. She jumped up when she saw me and left them drooling. We went to a booth and she pushed me over and sat by me. She usually wants to sit across from me so I knew something was going on. We ordered and she didn't say anything for a while.",
        "\"You know I love you, right, Mack?\" she finally began.\n\n\"Yes, I love you, too,\" I said.\n\n\"I don't mean like I love your Mom or anything. I'm in love with you, Mack. I always have been since that day at Cedar Point. You're the only man I've ever loved or ever will love,\" she said. \"I trust you implicitly. I love everything about you except being married to you. You know how I am. I like to be free, no commitments, no baggage, nothing tying me down. I love my job and my life. I don't love them more than you, but I don't have to choose. You're as faithful as Granny is. We have an understanding. I don't fuck anyone but you. I never have, you know that. You've always understood me. That's why all this is going to sound as strange as hell.\"\n\n\"Uh oh.\" I laughed. \"Sounds like I'm in for a nasty surprise.\"\n\nShe shot me a 'you're an idiot' look. \"Yes, I'm afraid you are. Will you marry me, Mack?\"\n\nI nearly choked to death on my wine. Wine down the windpipe is a bad place for it to be. After I recovered, I just sat there with my mouth open.\n\n\"Stop being a dolt and answer me!\" she snapped.\n\n\"Hell no,\" I finally got out. \"Why, Bri? We make each other miserable. We'd be at each other's throats in a month. What's wrong with what we do now?\"\n\n\"Nothing,\" she said. \"This has nothing to do with us. It has to do with the sweetest, most adorable girls on the face of the planet, Mack. I'm totally in love with them. You fucked my life up completely when you invited me over that night. They're desperate to see you. They cry and beg me every night to come and see you. The problem is, I'm not going to give them up. I've never had so much fun or aggravation in my life as I have since they've been with me. Neither one of us has a stable home environment. No judge in his right mind would give them to either one of us. If we were married, they would give them to us in a heartbeat. So, if I want them, I'm going to have to take you as part of the package. If you want them, you're going to have to put up with me. Can we do it, Mack? We're great fuck buddies and I love you to death. Can you avoid irritating the hell out of me?\"\n\n\"I doubt it,\" I told her. \"You're just as bad as I am. You come home drunk, you're never on time for anything except your job, and you don't come home at all then don't call me. Hell, Bri, we've been there and done that.\"\n\n\"Yes, I know. The thing is, what if it's different now? I can't wait to get home at night. I always call them if I'm going to be late and I've had one glass of wine a night since I've had them. I never dreamed I could feel like this. Marry me, Mack. Give me a chance. I'll give you one.\"\n\n\"I think we need to talk about things,\" I said.\n\n\"So talk. What in the hell are we doing? You think I'm just flapping my gums here? Tell me what needs to happen. You want me to go first?\"\n\nI took a big gulp and signaled the waiter for another glass of wine. \"Shoot,\" I told her.\n\n\"The thing that pisses me off about you the most is you're so needy,\" she said. \"You need to know everything that I'm doing in great detail. When I'm going to be where, who I'm with, what I'm doing, when I'm going to be home. You're kind of OCD about stuff. If you would just quit trying to control me and let me be me, we'd still be married. You never could. It drives me crazy. Surely you know by now that you're the only man I'll ever be interested in. You know that, right, Mack?\"\n\n\"Yeah, I guess I do,\" I said. \"That used to bug the hell out of me. I worried that you'd find someone and leave me.\"\n\n\"That's never going to happen,\" she promised. \"I've never even thought about another man since the day I first met you. I go to dinner with clients and colleagues. I go dancing with groups, men and women. I entertain. That's what I do, but from the moment I met you no man or woman has ever touched me intimately or ever will. Do you believe me?\"\n\n\"Yes, it's the same for me. I trust you, Bri. I know you'd never hurt me. You're just so carefree and careless. I'm as in love with you as I was on the first day we were married. I think you feel the same way about me and we were comfortable where we were at.\"\n\n\"Well, I'm not anymore,\" she said. \"There are these two girls who need a family. I love them nearly as much as I do you. I love them more than my job. I want to be part of their lives and the only way I see that happening is with the two of us doing it together. So, will you give me a chance, Mack? Will you marry me and try to love me so we can have this family together? I'm never going to bear children. I'm too vain and selfish to do that to myself. However, we can have these girls. Marry me, Mack, and I'll try my best to make you deliriously happy, okay?\"\n\n\"Obviously, you've had some time to think about this,\" I said. \"Give me some time, too, okay?\"\n\nShe glanced at her watch. \"You have twenty minutes,\" she said.\n\n\"Jesus, I'm on some sort of deadline?\" I asked.\n\n\"Yes, they're going to be outside waiting for us in twenty minutes,\" she said. \"They should get here in ten minutes. They're going to walk Granny for ten minutes and then a car is picking us up to take us to your house.\"\n\nWe hurriedly finished our meal and walked outside. There was a limo waiting but no sign of the girls. The driver told us they were walking the dog. He seemed to disapprove of \"the dog.\" Maybe he didn't like drool on his upholstery. We waited a few minutes and I saw them hurrying toward the car.\n\n\"Let's go,\" Maggie said when they got to us. \"There's a guy following us. Granny doesn't like him. He growled at him.\"\n\nI glanced down the sidewalk and there was a young man approaching. He was about five-eight, had tattoos and metal sticking out of his face. He had on a stocking cap and a hoody and his pants looked like they were about to fall off him. I think he was under the impression that he looked thug, a pale imitation of the \"Real Slim Shady.\"\n\n\"What you looking at?\" he addressed me.\n\n\"Nothing, we're just leaving,\" I said.\n\n\"You think you all fly, nice sport coat, fine women, big car,\" he said. \"You look like you got some spare money.\"\n\nThe dude was nuts. I was eight inches taller than he was and probably a hundred pounds heavier. I don't have a fat belly either. \"I think you better move on,\" I told him. \"My dog doesn't like you.\"\n\nHe advanced to about four feet away. \"I ain't scared of no pussy dog,\" he said. \"How much money you got on you?\" He reached inside his coat toward the top of his pants and I saw a flash of metal. I kicked him in the chest and he launched backward through the air. A gun fell out of his pants to the ground. Maggie lost Granny's leash as he sprang. The kid had the presence of mind to protect his face with his arm and I heard the crunch as Granny destroyed that forearm. He screamed and Granny ripped the sleeve out of his hoody.\n\n\"Grandville, heel,\" I said.\n\nHe dropped the sleeve and came to sit beside me. The kid was writhing around on the ground and I went and knelt beside him, Granny at my side.\n\n\"Choke, Granny,\" I told him.\n\nHe sprang forward and the kid froze as those huge jaws closed around his neck. \"I think you're an asshole,\" I told him. \"Are you an asshole?\" He nodded a little, his face rigid with fear. \"Say it,\" I told him. He didn't respond. \"Bite, Granny,\" I said.\n\nHe screamed a little and I saw blood trickling down his neck as those huge canine teeth broke the skin. You could hear the air snoring in and out of Granny's nose. \"Say it,\" I repeated.\n\n\"I'm an asshole,\" he gasped.\n\n\"How much money you got?\" I asked him. \"Give it to me.\"\n\nHe reached into his pocket and Granny must have squeezed. \"Slowly,\" I told him as he flopped around.\n\nHe pulled out a roll and handed it to me. \"Let him go, Granny,\" I said.\n\nHe reluctantly released his hold and the kid scrambled backward. \"I'm giving you a twenty yard head start,\" I said. \"Then, I'm going to send him after you. I suggest you run fast.\"\n\nHe was off like a sprinter. He got about fifteen feet and his pants fell down. He took a nasty tumble and jumped back up, pulling his pants up and holding them with his good arm as he ran. \"You need a belt,\" I called after him.\n\nI turned back to the girls and all three of them were standing there with their mouths open. I kicked the gun into the storm sewer opening. \"What?\" I asked.\n\nBri unfroze first. \"You're a nasty son-of-a-bitch to mess with, Mack. Remind us not to piss you off.\"\n\nThe girls launched themselves at me and I hugged them up. \"Jesus, Mack,\" Stokely said into my chest. \"I thought that guy was scary. You fu... you messed him up. Thank you. You did that for us, didn't you?\"\n\n\"Well, nobody messes with my girls,\" I told her. \"He left you a little donation for your college fund.\" I handed her the roll. She counted it. There was $700 in it. He must have robbed some other poor suckers recently. She split it with Maggie and we got in the car.\n\nI was turned a little in the back, hugging Maggie, and I noticed something. \"There's a van following us,\" I said.\n\n\"I know,\" Bri said. \"It has some of our stuff in it.\"\n\nI raised one eyebrow at her. \"Yes, I know I'm taking a lot for granted,\" she grinned. \"Girls, Mack said yes. We're going to get married again and we're going to keep you.\"\n\nThey gasped and squealed. \"Really, Mack?\" Maggie asked. \"She really isn't a bitch. You were right. We love Bri. She's been so nice to us. We have a bunch of new clothes and she got us into this nice school! We're going to make you guys so proud of us! I promise you'll never be sorry.\"\n\n\"We know you will, sweetheart. Don't worry about that,\" Bri said.\n\nI was in a bit of shock. I tried to say something but I couldn't get the words off my tongue.\n\n\"Are you okay, Mack?\" Stokely asked.\n\nBri laughed. \"No, he's going into full panic mode. His carefully ordered world is turning upside down. Everything in his house is spotless. Everything is in the perfect place. He's going to have girl's panties hanging in the shower and we're going to move his books and leave drink rings on his coffee table and it's going to make him nuts. I honestly don't know how he manages to live with Grandville. We're going to have to love him so much that he doesn't care that there are crumbs on the counter. Think we can do that?\"\n\n\"I think you can,\" Maggie laughed. \"I don't know about us.\"\n\n\"Oh, he's a sucker for pretty girls,\" Bri assured them. \"All you will have to do is bat your eyelashes at him and he'll melt into a puddle. He'll be pissed off at me, though. That will piss me off and you girls will have to love us out of it, okay?\"\n\nI groaned. \"I didn't actually agree to any of this,\" I said. \"Bri is being her usual hurricane and just sweeping us all along.\"\n\n\"Do you love Bri?\" Stokely asked me.\n\n\"Yes, I love her on the other side of town,\" I tried to explain.\n\n\"Yes, but we all need to be together to be together,\" Maggie said. They all burst out laughing at that statement and I had to join them. The idea was ridiculous. How did I lose control like this? As usual, Brianna had just taken over. My little enquiry into helping the girls had become a full-blown marriage and adoption scheme. By such small actions, a whole life spins out of control!\n\nI thought this was a harebrained scheme and I told Bri that as soon as we got to my house. There was a flurry of activity and movers carried mountains of stuff inside and put it in various rooms. To my astonishment, there was pile after pile of girls' clothing going into Maggie's and Stokely's rooms.\n\n\"Where did you girls get all that stuff?\" I asked Maggie as she swept by.\n\n\"Bri took us shopping a bunch of times,\" she said, disappearing into her room.\n\nBri stuck her head out of my room. \"God, Mack, don't you ever get rid of anything? You have stuff you had when we got married. I'm throwing it away! I need drawers and closet space.\"\n\nI raced to rescue my high school letter jacket from the trash heap. \"Stop it, Brianna,\" I yelled in. \"This stuff isn't to be thrown away! If I didn't want it, I wouldn't have it! Damn it! This is my house and I'll throw your bony ass out if you don't stop it.\"\n\nShe stuck her head out and gave me a glare. \"Bony ass, huh?\" she snorted. She grabbed me by the sleeve of my jacket and dragged me into the bedroom. It looked like a cyclone had hit. In one motion, she locked the door, pulled her dress over her head and leaned over with her hands on the bed. My breath caught in my throat. She didn't have on any panties!\n\nHer ass was anything but bony. It was firm, small, tight and very muscular! She shook it at me. \"Fuck me, Mack,\" she looked back over her shoulder at me, her blue eyes blazing. \"I'm as hot as I've ever been. I need that big cock, baby. Quick, we can make out later.\"\n\n\"I'm onto your fiendish plan,\" I told her. \"You're trying to fuck me into forgetting about my house and my life being destroyed.\"\n\n\"Yes, just fuck me now,\" she pleaded. \"Don't make me beg, Mack.\"\n\nI'm sorry to say that her fiendish plan succeeded. By the time she was done with me, I was as helpless as a newborn kitten. She was up and going the minute she realized she wasn't going to get me up again any time soon. \"Go take some vitamins,\" she said as she swept out the door. \"We've got a lot to do. This isn't over.\"\n\nBy the time the house was in some semblance of order it was 3 AM. By the time she gave me up for dead it was nearly four-thirty. I slept until 10 the next morning before stumbling to the shower. By the time I had shaved and showered, I was beginning to feel vaguely human. Bri was still asleep, that flame colored hair across her face as she lay on her belly. God, her ass was spectacular! I went into the living room and Granny was asleep and drooling on a pile of my best dress shirts.\n\nI sighed. I got a glass of orange juice and a muffin. \"Come on, Granny,\" I told him. \"Let's get out of this scene of destruction.\" He raised his head and rolled his eyes, groaning as he got to his feet. We went out in the back yard and he did his business and came to lie down on my feet. I soaked up some sun, feeling as lazy as a big fat lizard. It was a very warm day for that time of year. The door opened and Stokely came out carrying a glass of milk and a muffin.\n\n\"Hi, Angel.\" I flipped a hand at her.\n\n\"Hi, Mack.\" She shut the door. She stood there for a minute and came to the glider in which I was sitting. \"Is there enough room for me?\" she asked.\n\nI scooted over and she sat on my lap, putting her feet in the empty space I had made. She curled up with a sigh and took a bite of her muffin. Her big green eyes pierced my soul. \"Mack,\" she began, muffin crumbs spraying over our laps.\n\n\"Ah, ah,\" I told her. \"Eat first; take a drink of milk, swallow and then talk.\"\n\nShe giggled, but she didn't try to talk again until her mouth was empty. \"Mack,\" she began again. \"If you adopt us, will you be our dad and Bri will be our mom?\"\n\n\"Would you like that?\" I asked her.\n\n\"Oh, yeah,\" she said. \"Bri would be the coolest mom ever! You're not cool, but I think you're more... dependable. I love you and I think you'd make the best dad in the world.\"\n\nI nearly choked. \"Well,\" I sputtered. \"I guess it's good to be dependable if you're uncool.\"\n\nShe laughed. \"I didn't mean it like that. I mean, she's like a force of nature and you're like a mountain. She really, really loves you, you know. She talks about you all the time. She told us all about you and her. Do you love her?\"\n\n\"Yes, honey, but you said it. She's a force of nature. It's like trying to love a thunder-storm or a forest fire.\"\n\n\"Mountains don't care about thunderstorms or forest fires,\" she said. \"Maggie's kind of like her. I'm more like you,\" she snuggled down into my chest. \"I think if we wanted, we could just let them swirl around us and we'd kind of be like the calm at the center of their storm.\" She looked up at me. \"I want you to be our dad, Mack. I never thought we'd... find anyone like you. Bri either.\" She cried a little bit. \"We've been so scared and so lonely, Mack. You got room for girls like us in your life?\"\n\nI squeezed her little form close. \"In my heart, Stokely. There's room in my heart. I've wanted someone like you and Maggie to love for years. I didn't think I'd ever have that. Bri never showed a speck of interest in having kids. I think you girls have messed up her life as much as you have mine. I've seen the way she looks at you. It's as if she woke up two weeks ago and discovered she likes being a mother. I've never seen anything affect her like you have.\"\n\n\"You were right about her,\" she confided. \"She's awesome. She's kinda overwhelming sometimes. She decides to do something and just drags you along.\"\n\nI laughed. \"I know, right? She's always been like that. The first time I met her, a group of us from a college class went to an amusement park. She decided I was going to be her riding partner. I had actually come because I was interested in another girl. She dragged me off and we never saw the other people in our group again. We were twenty and I fell in love with her that day. She's like a virus. She just invades and takes over your life. We had our first fight a month after we got married.\"\n\n\"What did you fight about?\" she asked.\n\n\"You're going to think this is ridiculous,\" I told her. \"It was about shoes. She kept moving mine and putting hers on top of them. I had to dig through hers to find mine and she scuffed mine up. She says I'm obsessive/compulsive. Maybe she's right, but is it too much to ask for her to keep her shoes on her side of the closet? It just blew up from there. I drove her nuts and she made me crazy. I have a plan about what I'm going to do tomorrow. She's completely spontaneous. That's part of who she is and I love it, but it drives me crazy. She loves how organized I am but it makes her nuts. Those things clash, though, and we just get on each other's nerves.\"\n\nShe giggled. \"Maggie and I fight about stuff like that, too. She spends half her life trying to find things she's lost. She gets up and just decides what we're going to do on the spur of the moment. I think we need to change a little bit, Mack. We need to go with the flow a little bit. They need to change some, too. They need to understand we like stuff to be in the right place. Do you think we can work it out?\"\n\n\"I don't know,\" I said. \"We've never had any reason to try. Bri and I have a really odd relationship. I love her more now than ever. I think she feels that way about me. She's not the type to talk about it. She just does things. We're closer now than we were when we were married and I like her. I didn't much when we were married. I loved her, but we were angry at each other all the time. We've kind of worked things out to where it's like we're married but we didn't have to change. I guess we were too immature and selfish, but it's worked for us. Maybe we just needed you to make us realize what we were missing. The idea of being a family is very exciting, but scary, too. What if we screw it up? We're risking everything on a gamble. I hate uncertainty.\"\n\n\"I know, but sometimes you just have to take a chance,\" she said. \"You don't get anything good without taking a chance it could turn out bad.\"\n\nI hugged her and she purred like a kitten. \"You're the wisest eleven-year-old I've ever met,\" I said.\n\n\"I'll be twelve next month,\" she said.\n\nShe finished her muffin and we went back inside. The other two still weren't up and we took Granny for a walk. By the time we got back, the lazy ones were up and about. Bri was never a morning person and, evidently, Maggie wasn't either. They both looked like beautiful rumpled sleepy cats. They stretched and yawned a lot. When they got out of the shower, they were like human dynamos. Bri whisked us off to get a marriage license, file adoption papers, get temporary custody started and then off to dinner. We had seafood and the girls were in awe of how good it was. They were really in awe of the prices.",
        "\"Wow, Mack, you must make tons of money,\" Maggie said.\n\nI laughed. \"I do okay,\" I told her. \"I don't mind you knowing. I make around $90,000 a year. I could take care of all of us if I needed to. Bri makes about ten times what I do.\"\n\nThey looked at her, stunned for a minute. She laughed. \"It's just money,\" she said. \"The thing is, we can afford to take you girls out to eat whenever you want to go. Most things, Mack can do better than the restaurants if we can wheedle him into cooking.\"\n\n\"Do you cook?\" Maggie asked her.\n\n\"Yes, but mostly simple stuff,\" she said. \"Anyone can follow a recipe. Mack is a genius.\"\n\n\"She's really very good,\" I told them \"If she could get over her unfortunate habit of getting distracted and burning things, she'd be excellent.\"\n\nShe punched me. \"Make one mistake and he never lets you forget it,\" she laughed.\n\nI snorted. \"The first year we were married we didn't have a dog to eat burnt things. It stinks the house up if you put it in the trash. She took it out back and dumped it at the bottom of a tree. It looked like we were offering burnt offerings to the tree god.\"\n\nThey laughed uproariously. Bri was in a very good mood and she cuddled up against me. I put my arm around her and gave her a squeeze. The girls giggled.\n\n\"We ain't never ate at a place like this,\" Maggie said.\n\n\"Maggie,\" Bri looked at her seriously. \"That will never do. You'll drive Mack out of the house in a week if you speak like that. I know you can do better. Say it again.\"\n\nMaggie thought for a minute. \"We've never eaten at a place such as this,\" she said with a smile of triumph at my nod. \"We know how to talk... I mean speak,\" she said. \"We just got in the habit of tal... speaking like the rest of the street people. We went to school until Mom died. We got good grades, too.\"\n\n\"I believe you, honey,\" Bri said. \"I think you'll do just fine. Just try to remember. We may be from Detroit, but we have class.\"\n\nThe girls looked like they were going to burst with pride. She gave them class, too. They dressed like she did. She showed them how to walk, how to sit, how to eat and drink, how to wear makeup and do their hair. In six months, you would have thought they were raised and educated all their lives in upper class New England. They were quick and they did make good grades. That night was the beginning.\n\nBri was excited to begin. When we got home, she told the girls she wanted them to turn the TV on and leave it on all night. They looked at her curiously. \"Your father and I have something to do,\" she gave them a wink. They giggled hysterically and blushed beet red.\n\nBri dragged me off to the bedroom. \"We're celebrating,\" she told me.\n\n\"What are we celebrating?\" I asked.\n\n\"The start of something amazing,\" she said. \"I love you, Mack. Never doubt that. We're going to make it. Every night, I'm going to remind you that I love you and then I'm going to show you. We've always been dynamite in bed. Tonight, I want to take it to a whole new level. Then, we're going to keep it there the rest of our lives. You down?\"\n\n\"Show me,\" I challenged her. She pulled a comb out of her hair and all that shimmering flame came tumbling down. She rarely wears it down, but it comes down to the top of her butt. It's very heavy and wavy and she swirled it around like a stripper as it fell around her. She strode toward me and turned her back.\n\n\"Unzip me,\" she said in a low, sultry voice. She has one of those low husky phone sex voices that just give you an instant hard-on. I eased the zipper of the blue dress down, letting the backs of my knuckles drag down her spine. She shivered and took two strides away, spinning and letting her hair swirl. She eased the shoulders off and the dress fell, hanging briefly at her breasts and again at her hips before pooling at her feet. She stepped gracefully out, her three-inch heels making her calves just spectacular, thrusting her ass out and arching her back. Her breasts were spectacular, too, big and firm and barely restrained by the white lace bra. I could see the hardness of her nipples and the outline of pink areolae through the lace. Her panties matched and I could see a heart-shaped flame of curls inside. God, she was gorgeous. I don't think she ever realized the effect she had on every man that saw her. She was totally unselfconscious. Men orbited her flame and she regarded them as so many fireflies. She turned all this smoky heat on me and I think I was the only man who had ever seen it. Her arms snaked behind her and her bra fell away, leaving those spectacular breasts to spring forward, gloriously bare, her creamy white skin showing a freckle here and there.\n\nShe wiggled her hips as she lost the panties, sliding them down to join her other things on the floor. She bit her finger and the ice blue of her eyes froze me. \"I think someone is overdressed,\" she teased.\n\n\"What are we going to do about that?\" I asked.\n\nShe came forward, gliding like flowing water, pushed me down on the bed and straddled me, her knees resting on the bed beside my hips. I could smell her excitement. It was a subtle perfume, almost masked by the Chanel she always wore. It was a faint muskiness, tantalizing and seductive. Her slender, long clever fingers opened the buttons of my shirt, tugging the tails out of my pants, pushing it off my shoulders and leaving my arms trapped. She pushed me over backwards onto the bed, reaching down to open my belt and pants before tugging on the waistband. I obediently raised my hips and she slid my pants down to my ankles. They hung on my shoes and she untied them, slipping them and my socks off before discarding my pants. My boxers tented obscenely and she undid the button, allowing my erection to spring free. I was harder than I think I've ever been in my life.\n\nThis was a whole new level of sensuality, even from Bri. She was always smoking hot but she had transformed into a neon sign that said \"fuck me\" in pink letters. When she bent down, ran her tongue over those luscious red lips and engulfed me in the inferno of her mouth I nearly went off right there. Her lips moved down until I felt the head of my cock bump against the back of her throat. There was a momentary hitch in her motion and I felt her swallow twice. My cock actually entered her throat and her lips stretched around the base of my cock, her cute little nose touching my belly! She had never done that before and it was too much for my resolve. I spurted into her throat and she backed off until just the head was inside her mouth, pumping my shaft with her hot little fingers and swallowing audibly until I was spent. I pulled her up until I could reach her mouth with mine. She tried to twist her head but I kissed her fiercely, crushing the soft plushness of her lips with mine. She clung to me, her eyes still liquid with the unshed tears of her effort to take my whole cock in her mouth.\n\n\"God, Bri,\" I whispered. \"Where did you learn to do that?\"\n\n\"A girl at work told me how and I practiced on a toy,\" she whispered.\n\n\"Thank you, baby,\" I breathed. \"My turn!\"\n\nI flipped her over and she squealed as I pinned her wrists to the bed. I kissed my way down her long, slender neck and she arched her back, her nipples spiked and thrusting, begging for my touch. I was happy to oblige.\n\nWhen my lips touched those hard little buttons, she gasped and tangled her fingers in my hair, pulling me into the firm mound and calling my name. I had never seen her this turned on before. She's always very responsive and her nipples are always very sensitive, but this was new and amazing to me. I loved on them for what seemed like 30 minutes, but couldn't have been, because she guided my head lower. I think she had a small orgasm while I was loving those luscious tits. \"More, Mack, I need more!\" she cried out.\n\nI kissed my way down over her flat belly as she arched her back, seeking and reveling in the contact. I pulled on those flame colored curls below with my lips and she giggled and sighed. She willingly spread her thighs for me when I lay between them and her muscles quivered and tautened as I nibbled on the silky flesh of her inner thighs. I nipped at her, letting her feel my teeth, and she groaned and began a slow writhe, just a hint of tremble in her motions. I knew that sign of her rising excitement and I nibbled my way up to nirvana. Her inner lips were sealed shut in a beautiful line that extended up to the button of her little clit. She had a beautiful pussy, bare and clean and sweet. There was a little drop of honey leaking and I lapped it up, savoring the taste of her. She twitched at the contact of my tongue against her lips and I used it to open her like a beautiful flower. She bucked under my touch and there was a flood of moisture. I lapped it up like a starving man as she twisted her hips and writhed beneath me.\n\nHer moans were now constant and when I worked my way up her lips to the little nub of her clitoris she arched her pelvis toward my lips, seeking and finding what she craved. I teased its protective hood and the little button peeked out. She squealed and jumped when my tongue hit it. I loved on it and caressed it gently and the trembling in her body grew more pronounced.\n\nI pulled my lips away from it and tapped on it gently with my fingertip. She jerked convulsively. \"Oh, God yes, Mack!\" her gasps were electric. \"You're driving me wild!\"\n\nI took it back between my lips and lashed at it with my tongue, causing her to explode off the bed, crying out and thrusting against me. When I added a finger to her tight little sheath she went off again. I kept her there as long as I could, my finger buried in her hot moistness. I added another and licked frantically along the pink lips, her engorged clit standing lonely above until she started to come down. She was beginning to relax and I attacked it again. She shrieked and tried to push me away. I captured her slender wrists in one hand and put some weight on her, trapping her in place and continuing to attack her clit.\n\n\"No!\" her voice was a little frantic. \"Please, Mack, I can't stand any more! Don't, please stop!\"\n\n\"No,\" I told her. \"This is my pussy and I want to lick it.\" I continued to do just that and she whined and exploded in orgasm again. It went on and on and she twisted wildly under me, finally managing to get her hips turned and scrambling backward on the bed. She stared at me wildly for a minute before collapsing back on the bed. Her head shot up again.\n\n\"What the hell is wrong with you, Mack? You know I don't like to be held down!\"\n\n\"Too bad,\" I told her. I jumped up on the bed and pinned her down, my renewed erection pressing into her hot little pussy, and pinned her wrists over her head again.\n\nShe struggled wildly but I was at least a hundred pounds heavier than she was. \"No!\" she hissed. The hiss turned into a groan as I sank into her humid depths. \"Oh, God damn, Mack!\" she moaned. \"Fuck! Take it easy! You know you're too big to just take me like that!\"\n\nI laughed and backed off a little. She relaxed and I pushed into her liquid heat in one long, smooth thrust. I felt her little patch of curls against my belly and my cock bumped against the back of her pussy. We were completely joined and it felt like heaven. She was tight, wet and hot, enveloping me in a volcanic heat as I ground my pubic bone against her clit. I stayed there, buried to the hilt and moving my hips in a circle that she followed in a counter-rotation.\n\nI drew back and began to thrust into her. She wrapped those long legs around my hips and I could feel her heels digging into my thighs. I released her wrists and her arms flew around me, searching for something to hold on to. We found a rhythm and her moans were punctuated with each thrust until she was cumming wildly, her head thrown back and her eyes closed. A flush suffused her face and crept down her neck to her upper chest. She came again and I squeezed her lovely form tightly as she throbbed and shook.\n\nWhen she recovered a little, I pulled out of her and flipped her to her stomach, straddling her legs and mounting her from behind.\n\n\"Oh, no! Oh no!\" she exclaimed. \"Again? I... I... I can't!\"\n\nShe could and she did. I fucked her for a good ten minutes in that position as she came over and over, finally sobbing and crying as her body shook and trembled. I came inside her, feeling like my soul was pouring into her. I'd never seen her so hot and so exciting. This was the woman I always knew she was, and could be. She was a creature of total allure and mystery, waiting to be taken and claimed. I think at that moment I truly realized how much I loved her. I knew I would die for her and never question the sacrifice.\n\nI rolled her over and held her tightly. She lay half over me and sobbed on my chest. Her words came, broken and full and husky.\n\n\"My God, Mack! You... you... you destroyed me!\" She shook for a minute and I held her; stroking her hair and petting the silky skin of her back. She raised her head and stared into my eyes. \"Mack, I love you,\" she said. \"I always knew I did. I'm a selfish bitch; I know that, too. I never really gave myself to anyone. I did to you, just now. Do you want me, Mack? I think for the first time in my life I'm ready. I'm ready to be your friend, your lover, your wife, the girls' mother. Will you help me, love me, and be patient with me? I swear to God you'll never regret it. I'm ready, Mack, if you'll help me. Do you love me that much?\"\n\nI crushed her luscious lips with mine. \"I love you more than anything,\" I said. \"You're going to have to help me, too. You have to be patient with me as much as I am with you. I've always loved you. If we're a team, we can make it.\"\n\n\"I'll do anything for you,\" she whispered. \"I'll do it for the girls, too. I never dreamed I'd feel this way. They just came into my life and I couldn't help myself. I'm afraid, Mack. I'm afraid I'll be a rotten mom. I've always been afraid of that. It's why I would never consider having kids. I'm terrified I'll mess them up. Christ, Mack, I don't know how to be a mom.\"\n\n\"No, me, either,\" I chuckled. \"I suspect Dad is going to be just as hard. I think it's something you learn by doing it. No one knows how when they start. I don't know how to be a husband, either. I don't know how to be a good one, anyway. We fucked it up the first time, Brianna.\"\n\n\"I know,\" she whispered. \"It was mostly me. I was such a child. I still am, in a lot of ways, Mack. I'm going to try as hard as hell to grow up.\"\n\n\"Yeah, me, too.\" I held her close.\n\nAt some point we drifted off to sleep. I woke up the next morning with an incredible feeling. My cock was enveloped in liquid heat and when I opened my eyes, Brianna's blazing blue ones were locked on mine and her head bobbed over my straining erection.\n\n\"Good, you're awake.\" She pulled away with a smile, swinging her leg over me to mount my pole with her back to me. That gave me a perfect view of that spectacular ass and the incredibly erotic sight of her pussy sinking down over my cock, her lips forming a perfect O as they clung to the shaft spearing up into her. They pushed and pulled, in and out as her tightness reversed directions. She rode me to three orgasms before I couldn't hold it anymore and fired off inside her.\n\nWe showered together, giggling like school kids, and when we dried off she put on pajamas.\n\n\"What are you doing?\" I asked.\n\nIf I'm not mistaken, we'll have visitors soon,\" she smiled. \"You better put something on, too. I'm feeling too lazy to get up now.\"\n\nI pulled on boxers and a t-shirt and we hadn't been back in bed for ten minutes before someone tapped on the door.\n\n\"Come in,\" Bri called.\n\nStokely stuck her head inside. Her face lit up when she saw us and she came running across the room to throw herself on us. Unfortunately, she left the door open and a brindle ball of fur also joined us, lying across our feet and sighing in ecstasy. In another five minutes, Maggie joined us and we all had an impromptu wrestling match with Granny.\n\nSince he had teeth and drool, he won, and we wrapped him in the bedspread and dragged him out of the bedroom. We managed to shut him out and trooped back to bed for a group cuddle. After about half an hour, the girls complained about being hungry, so we adjourned to a diner for breakfast. At 2 PM, Bri announced that we had an appointment. She wouldn't tell us what it was but she drove us down to the municipal court.\n\n\"Do you have a case?\" I asked her.\n\n\"Yes, the hardest case I've ever had,\" she laughed.\n\nShe dragged us inside and into one of the courtrooms. The Justice of the Peace was there and he asked us if we were ready.\n\n\"Ready for what?\" I asked.\n\nBri knelt down on the floor and got a box out of her clutch. \"Mack, will you marry me, again?\" she asked. \"This time, I promise it will be until we die. I know we promised that last time, but you know I never stopped loving you or wanting to be your wife. You're the only man I ever loved or ever will love. Please, Mack, marry me.\"\n\nShe had our wedding rings in the box along with her engagement ring. \"Brianna, are you sure?\" I asked her.\n\n\"I've never been so sure of anything in my life,\" she said. \"Girls, help me, he's being stubborn!\"\n\n\"Yes, please, Mack,\" they both pleaded. \"Bri really loves you. We want to be a family. We love you, too, and we love Bri.\"\n\nHow could I resist? It took about ten minutes and the deed was done. Bri whisked us off to this new Greek restaurant she knew about to celebrate and I saw my life playing out before my eyes. The most gorgeous woman in the world as my wife and in my bed every night. Two awesome daughters who were rapidly going to become beautiful women in their own right; what was not to love about that? Would we make it? Only time would tell.\n\nIt took us about a month to get custody of the girls. Bri worked tirelessly to make that happen and when it did, they were the happiest girls on earth and we were the happiest couple. Bri sold her condo and we lived in my house.\n\nI had worried a lot about Bri and me getting on each other's nerves. We did, too, especially at first. There was a minor flare up about three weeks after we got married when Bri went to dinner with a client and forgot to call us. When she came home, she was greeted with six accusing eyes.\n\n\"What?\" she asked.\n\nStokely held up her phone and Bri's eyes flashed in anger. She opened her mouth and then burst into tears. She ran over and gathered us all on the sofa, kneeling on the floor in front us and she just sobbed. \"I'm so sorry,\" she choked out. \"I just forgot to call. I should have called. Please don't be mad at me. I'll try not to do it again. I won't promise not to, but I'm going to tell my aide to remind me. I couldn't think of anything but getting that meeting over and coming home while I was there. Do you forgive me? Stokely, Maggie, Mack, I'm sorry.\"\n\nI don't think Bri had apologized a dozen times in her life. It was the beginning of a whole new kind of relationship between the two of us. We both went out of our way to make the other happy and the girls were just amazing in helping us. At times, I felt like we were the children and they were the adults.\n\nWe had our little spats, but I had never been so happy and content in my life. There was a private school on the campus where I taught, and Bri had the girls enrolled there. They rode to and from school with me and we bonded during those rides. They talked to me about everything and they just filled up my life with their enthusiasm. When school was out, we went home and they went straight to their rooms and did their homework. It usually took them a couple of hours and when they were through, we took Granny for a walk. At five, I would start dinner if we were eating at home, and Bri was usually home by six-thirty. If she was going to be late, she called well in advance and we usually went out to eat on those nights.",
        "When Maggie turned sixteen, Brianna asked her what she wanted for her birthday. She told us she wanted her driver's license. She studied and practiced for two weeks and she passed it the first time. The night of her birthday Brianna talked to me in bed.\n\n\"I want to get her a car,\" she said.\n\n\"Okay, what kind of a car?\" I asked.\n\n\"I want to get them a new Camaro convertible,\" she said.\n\n\"How much does it cost?\" I wondered.\n\n\"Jesus, Mack, does it matter?\" she asked. \"Do you think we're going to go broke?\"\n\n\"No, I guess it doesn't matter,\" I said. \"I just like to know things, Bri.\"\n\n\"I know,\" she kissed me. \"I'm sorry I snapped at you. I think we can get the one I want for somewhere around 60,000 dollars.\"\n\nI whistled. \"That's a lot of car. She's an amazing girl though. She deserves it.\"\n\n\"Yes, she does,\" Brianna smiled. \"They had a lot of bad things in their lives, Mack. Let's make sure they only have good things now.\"\n\nWe ordered the car. It was bright yellow with lots of black stripes and a black interior. We went ahead and got the big V8, against my better judgment. Brianna thought it would hold its value better and she was probably right. I didn't think Maggie would drive it crazy, anyway.\n\nWhen it came in, we parked it in the garage and when it was time for school, they got their bags and followed me out to the car. Brianna was inside the garage and I didn't unlock their doors.\n\n\"Dad,\" Stokely said. \"Let us in.\"\n\n\"You're not riding with me today,\" I called. \"You're going to drive, Maggie.\"\n\n\"Is Mom not going to work?\" she asked.\n\n\"No, she's going,\" I said.\n\n\"What am I going to drive, then?\" she asked.\n\nI punched the garage door opener. \"You'll be driving that,\" I pointed inside the garage.\n\nHer big green eyes went as round as saucers. Neither one of them moved for a minute and then Maggie began to wail. Big tears rolled down her cheeks and she was shaking like a leaf.\n\nI leaped out and Brianna came running down the driveway. I threw my arms around Maggie and Bri joined me. \"What's wrong, honey?\" I asked her. \"We thought you would be happy. It's your car. We got it for you for your birthday.\"\n\nShe tried to tell us something but she was too choked up for us to understand her. She buried her face in my chest and we held her and petted her until she calmed down enough to speak. Stokely joined the group hug and we finally got Maggie to talk.\n\n\"I don't want the car,\" she choked out. \"I love you guys so much and it's too much! I... we... we don't want you to have to buy us things. Stokely and I have talked about it. We don't need things, we just need you to love us,\" she broke down again.\n\n\"Honey, we do love you,\" Brianna consoled her. \"We love both of you more than anything. Having you girls is a dream come true for both of us. We like buying you things, though. We work and make lots of money so we can buy things for our girls. We like making you happy. This is part of the way we show you that we love you. It isn't the big way, but it's a little way. It makes us happy to give you things.\"\n\nStokely was crying too, now. I kissed them both on the cheeks. \"Come on,\" I told them. \"It's a really cool car. Let's at least go and look at it.\"\n\nThey sniffed around and wiped their eyes and let me lead them into the garage. I opened the door for Maggie and Brianna let Stokely in on the passenger side. Maggie put her hands on the wheel and looked up at me. A smile was starting on her beautiful face. \"It looks good on you,\" I told her. \"Start it up.\"\n\nThe big V8 rumbled to life and they were both trembling with excitement. I shut the door and knocked on the window. She rolled it down and I kissed her again. \"See you at school,\" I told her.\n\nShe backed down the driveway to the street and stopped. Brianna and I stood together, watching them. Her door popped open and she came flying back up the driveway, throwing herself into our arms and kissing us both, over and over.\n\n\"I love you so much,\" she repeated again and again. \"Thank you, you're the best Mom and Dad on earth!\" She ran back to her car and they drove away.\n\nI turned to Brianna and she was crying like a baby. My own eyes were leaking for some unaccountable reason. \"Look at us,\" I said. \"You would think we were three or something. That was a great idea, Bri. You're an amazing woman.\"\n\nWe held each other for a long time. I knew I was going to be late for class, but I didn't care.\n\nWhen Stokely turned sixteen we got her one of the new Challengers. It wasn't quite as emotional, but it was special. We took them to Hawaii and Belize when they graduated. The day Stokely started college I came home to find Brianna crying on the sofa.\n\nI went and sat beside her, taking her into my arms and loving on her without saying a word for a while. She just laid her head on my chest and cried quietly for a while. Finally, she looked up at me, those big blue eyes filled with tears. \"Our babies are all grown up, Mack,\" she said.\n\n\"I know.\" I kissed her. \"That's what babies do.\"\n\nShe took my face between her hands and looked deeply into my eyes. \"Let's make another one, Mack,\" she said. \"You and me this time. I want a baby, Mack.\" She broke down and sobbed. \"I never thought this would happen. I'm so in love with you and I miss them so much already. I want to do it again. It was so amazing! I know they're just 60 miles away, but I miss them.\"\n\n\"Me too, kitten,\" I said. \"Maybe if we're going to have that baby, we should go practice.\"\n\nShe gasped and stared up at me. \"Really? You want to? I mean, have a baby?\"\n\n\"Of course,\" I said. \"I hope it's a red headed girl like you. I love you with all my heart, Brianna.\"\n\nI picked her up and carried her through the empty house to our bedroom to start practicing. We had to kick Grandville out, but I decided I liked making babies. As I drifted off to sleep, the picture on my night table of Maggie and Stokely held my eyes. They didn't look like vagabonds."
    ],
    "authorname": "blackrandl1958",
    "tags": [
        "divorce",
        "remarriage",
        "adoption",
        "romance",
        "wife",
        "husband"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/vagabonds-1"
}
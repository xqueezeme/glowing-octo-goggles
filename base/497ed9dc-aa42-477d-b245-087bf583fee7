{
    "title": "For the Whored: Stormwind Ch. 25",
    "pages": [
        "Elunara found Jordan on the sidelines of the training yard, pouting. \"Did last night bother you that much?\"\n\n\"It's not last night, it's the fact I keep losing.\" Jordan grumbled. \"I don't know why I even try.\"\n\n\"A healthy dose of competitive nature.\" Elunara shrugged. \"That's why you're even in this relationship.\"\n\n\"It'd be one thing if I won every now and then, but I haven't won a card game against him YET.\"\n\n\"Do you always bet on me?\"\n\nJordan shook his head. \"We don't always bet. It's just one of the things we do to pass time. Often when you're... occupied.\" \n\n\"Ah.\" She tapped her chin. \"Well, you know your biggest handicap.\"\n\n\"Yeah, but I've been struggling to turn it to my advantage, and it's just not working.\"\n\n\"Alright then. It's Gerald's day off. I want you to get in plain clothes and go over there and tell him to teach you how to play cards.\"\n\n\"That cheat?\"\n\n\"Gerald may cheat a bet, but he doesn't have to cheat at cards. He's just that damned good. Never bet against him in cards. Most people won't even play him anymore.\" She shook he head. \"If he balks at you, and he will... Tell him I'm calling in that favor he owes me.\"\n\n\"Does EVERYONE owe you a favor?\"\n\n\"I'm working on it.\" She grinned. \n\n\"What does he owe you for?\"\n\n\"Chrissy.\"\n\nGerald yanked open the door and stared at Jordan. \"Man, it's my day off. You're married to Elunara of all people; you should KNOW why I don't want to see you right now.\"\n\n\"Elunara sent me. She told me to tell you to teach me to play cards.\"\n\nGerald just stared. \"No.\"\n\n\"She said to tell you she's calling in that favor you owe.\"\n\n\"FuuuuuuuCK!\" Gerald raked his hands through his hair. \"CHRISSY!\"\n\n\"What?\"\n\n\"I need you out of the house for a couple of hours.\"\n\nChrissy stared at him as if slapped. \"What?\"\n\n\"I'm sorry, sweetheart. Elunara is calling in her favor NOW.\"\n\nChrissy blinked. \"With JORDAN? Is the rumor true?\"\n\nGerald visibly shuddered. \"Gods no. It's over cards.\"\n\n\"Cards? Why do I have to leave the house over a stupid card game?\"\n\n\"Sweetheart, it's complicated, OK? Please? In revenge, go bitch at Elunara. Or make her teach you something interesting. Hell, I don't know.\"\n\nChrissy put her hands on her hips. \"Fine. But I'll want a damned good explanation.\"\n\nGerald watched Chrissy stomp away. \"Ok, why the fuck do I have to teach you cards?\"\n\n\"Because I have never won against Grogek and its pissing me the fuck off.\"\n\n\"What are the bets?\"\n\n\"Elunara.\"\n\nGerald ran a tongue over his teeth. \"Yeah, I can see where that'd be a pain in the ass. Fine, sit down, let me get my decks.\"\n\nChrissy stomped over to Elunara's and knocked. Elunara opened the door and jerked her head back. Chrissy walked in and crossed her arms. \"Tell me why I had to give up getting my brains fucked out, so your husband can learn to play a shitty card game.\"\n\nGerald sighed. \"No damned wonder you're losing, you SUCK.\" \n\n\"That's why she shipped me over here on your off day.\"\n\n\"Ugh, save me.\"\n\nChrissy sat on the couch, mouth hung open. \"And you LET them?\"\n\n\"It's half the fun. Of course, since Grogek always wins; and it would be worthless for Grogek to lose on purpose...\" Elunara trailed off and shrugged. At the knock on the door, Elunara held her hand up and walked over. \"Come on, kiddo.\"\n\nLydia giggled. \"Is Tulani available?\" \n\n\"Nah, she had to go pick up some materials. She'll be back shortly.\"\n\nLydia spotted Chrissy. \"Oh, I'm sorry. I didn't know you had an appointment.\"\n\n\"No, I interrupted HER day. But, while I've got her...\"\n\nA quick explanation and Chrissy giggled. \"Wow, the lengths you will go.\"\n\n\"Remember, not a word about the real plan.\"\n\n\"I won't even count this against the favor I owe.\"\n\n\"Good girl.\"\n\nAt the end of it all, Elunara stood behind the curtain and eyed the crowd. She looked back at Lydia, trying to do her breathing exercises. Elunara stooped down and straightened Lydia's hair.\n\n\"You ready for this, sweetheart?\"\n\n\"I think so.\"\n\n\"Just remember, no matter what happens; I will be right here.\"\n\nLydia nodded.\n\n\"You are strong, you are beautiful, and you are about the get the best damned revenge there is. Anything they have to say after this will be pure jealousy. If you get worried, the lighting is purposely set so that you can't see the crowd. You can just imagine you're in our practice sessions.\"\n\n\"Okay.\" Lydia nodded and calmed some. \n\n\"This is supposed to be fun; this is supposed to be powerful. Anything I do turns to gold.\" Elunara grinned. \"I'm the best, and you...\" Elunara put her hands on Lydia's shoulders and kissed both cheeks. \"You are my chosen. You'll be gorgeous, trust me.\"\n\nLydia nodded with determination.\n\nElunara stepped out on to the stage. \"Hello! I am so glad you came to my concert today, because I put a lot of work into this very special event. I had to ask like... ten people to do stuff.\" There were a few chuckles in the crowd. \"I hope you enjoy my surprises.\" She winked.\n\nShe moved to the center stage and began to sing and dance. Glowing with the energy of the audience, she got into her performances. By the third song, she had them all going. With a laugh, she stopped and stuck her hand behind the curtain, pulling out a pitcher of water. She chugged it down and tossed it away.\n\n\"Alright, this next song is pretty special, as I wrote it myself.\" She held out her arms and began to sing. Stepping to the side, she turned, ever so slightly. \n\nOn cue, Lydia stepped out from behind the curtain and moved forward. The lights picked up the glitters in her hair and dress. She picked up the melody and the words, as she sang with Elunara. The longer they sang, the more confident she became, and soon they were dancing in time to each other, their dresses swaying with movement. The soft fabric wings on Lydia's dress fluttered mysteriously with her movements. \n\nThey stopped singing, and the crowd went wild. Lydia grinned up at Elunara. \n\nElunara and Lydia held out a hand towards the curtain. Jordan and Bradly stepped out in full regalia and took their positions on stage. The pairs joined hands, and Elunara began to sing again, picked up by Lydia. Gliding across the stage, they danced. Twirling and swaying, Elunara and Lydia sang the beautiful, romantic song. At the end, the men bowed to their dance partners, kissed their hands, and disappeared behind the curtain\n\nThe crowd went crazy again, before Elunara opened her mouth and belted out a jaunty tune. Lydia giggled and picked it right on up with her. Soon, they were bouncing around the stage, singing like lunatics and laughing like crazy. Whenever Lydia looked to be lagging, Elunara gave her a tiny shot of energy. \n\nFor their final act, Elunara took Lydia's hand and they stood center stage. Elunara called out the start of a traditional Night Elf Ballad, and a hush went across the crowd. Her accent might have been weak, but Lydia gave the song all she had. Any lack, was made up by the sync to Elunara's voice. Soon, Elunara's energy reached out to Lydia and wrapped around her. They both rose up, the warm glow surrounding them. As they had practiced before, the energy shot up through the wings on Lydia's dress, and caused the glow to mimic Elunara's appearance. Elunara let go of her hand, and they turned to face each other. Both lifted their hands to the sky. As the song came to its end, the energy went up through their bodies and released into the air with a shower of sparks. They landed safely on the stage below.\n\nThe crowd sat in amazed awe, before standing and cheering. Elunara took Lydia's hand and they both took their bows. Jordan and Bradly stepped out, and taking the girls' hands, took a bow as well. \n\n\"How you holding up, Sweetheart?\" Elunara grinned. \n\n\"This is SO cool!\" Lydia whispered. \n\n\"All of this, for that child.\" Anduin murmured.\n\n\"Why do you think I love her?\" Varian grinned. He grabbed his bundle and made his way to the stage. Using the center steps, he climbed up. \"Elunara, I had planned on giving you these, but I rather think that she deserves them.\" Varian knelt and handed the bouquet of roses to Lydia.\n\nLydia went scarlet. \"Th-thank you!\" She swallowed.\n\nAfter Varian stepped back down, Anduin stepped on to the stage. \"I have to say, I am beyond impressed.\" He bowed to Lydia and took her hand, kissing the back of it. \"You have a beautiful voice.\" \n\nElunara smiled. \"I hope to drag her up here more often.\"\n\nAnduin nodded. \"I see why you had this thing built.\"\n\n\"Just giving people options.\" Elunara shrugged.\n\nSince Lydia had frozen solid, Elunara poked her in the back. Lydia jolted. \"THANK YOU!\" She blurted. She put a hand over her mouth and scooted behind Bradly. \n\n\"Don't ruin it now, girly.\" \n\nLydia straightened up and returned to where she was standing. \"Yes, Miss Elunara.\"\n\nAnduin shook his head and joined his father. \n\nLinda rushed up on stage and threw herself at Elunara. \"Oh, my baby's so beautiful.\"\n\n\"If your tears ruin my dress, Tulani will have your head.\" Elunara laughed. \n\nLinda stooped down. \"Oh, look at you...\"\n\n\"Try not to fuss, Momma...\" Elunara put her hand on Linda's shoulder. \"We want to maintain that dignified, mature air, we've got going.\"\n\nLinda stood up. \"Yes, yes of course.\"\n\nElunara jerked her head, and they all headed back stage. \n\nBradly threw his arms around Lydia. \"You were so cool!\" \n\n\"How did you plan all of this?\" Linda shook her head. \n\n\"I had loads of help.\" Elunara grinned. \n\n\"But, why?\"\n\n\"Revenge.\" Elunara shrugged.\n\n\"What?\"\n\n\"Those little bitches were cruel to Lydia, and I knew the only way to really pay them back, was to put Lydia on a higher ladder than them. Punching them would feel good, but would only prove them right.\" Elunara eyed Lydia. \"However, if I made Lydia more girly then they could hope for, if I could give her more status than they could fantasize about having... the revenge would be all the sweeter.\"\n\n\"Your mind is a mysterious, wonderful thing.\" Linda marveled. \n\n\"Now, using her natural talent, I've made her the belle of the ball, AND the talk of the town, in one fell swoop. Which, by the way, Lydia, you can use dance in training. In fact, a few of my moves are based on dance lessons I had as a kid.\"\n\n\"Really?\" Lydia was sitting in a chair, clinging to her rose bouquet for dear life.\n\n\"Like I said, we need to round out your education.\" Elunara winked. \n\n\"But, to get The King of Stormwind involved...\" Linda shook her head.\n\n\"Oh, that's the fun part. All I did, was to tell him my plan. I never asked him to do anything. I told him I would always let him know when I was doing a concert. Anything he did after... well, that was all him. I only asked Anduin to show up. He doesn't even LIKE me.\" Elunara snorted.\n\n\"I'm never washing my hand again...\" Lydia stared down.\n\n\"Ew, you better.\" Elunara rolled her eyes. \"Go home, kid. When my energy boost wears off, you're going to crash on your face.\"\n\nLinda fidgeted. \n\n\"What, momma?\" Elunara eyed the woman.\n\n\"Can... you help me plan her tenth birthday party?\"\n\n\"We'll set it up. Bradly's is soon as well.\"\n\nThat night, Elunara curled up under Jordan's arm. \"Thank you for helping.\"\n\n\"My pleasure.\" He ran his hand down her back. \n\n\"So, did Gerald help?\"\n\n\"He swore me to secrecy.\"\n\n\"I don't want t know his secrets, I just want to know if you think they'll help.\"\n\n\"I think so. You're right, in that he doesn't cheat, he doesn't have to. Like you, he just knows how to analyze and manipulate the outcome. We'll see, the next time I challenge Grogek to cards.\"\n\n\"We'll see.\"\n\n\"So, King Wrynn was going to give you flowers?\"\n\nShe snorted. \"Those flowers were never meant for me.\""
    ],
    "authorname": "Thatawfulwowporno",
    "tags": [
        "world of warcraft",
        "non erotic"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/for-the-whored-stormwind-ch-25"
}
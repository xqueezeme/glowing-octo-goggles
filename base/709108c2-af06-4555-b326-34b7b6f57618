{
    "title": "Her Governess Ch. 01",
    "pages": [
        "Author's Note:\n\nWelcome to the first of four or five chapters about a relationship between consenting adult (and fictional) women. This first chapter is to introduce the characters and set the stage for a deeper dive into their relationship. I'll be posting new chapters weekly (-ish). I'm just starting out as an author, so I welcome all feedback and suggestions for improvement. Comments and emails are welcome and eagerly encouraged. Thank you for reading!\n\n**\n\nAwareness seeped in and Kara's senses returned as she drifted out of a deep sleep. She was lying on her side in his warm, soft bed. It was morning. His familiar, welcome scent was in the sheets. Out of habit she reached out for him, seeking out his body, her hands eager for him, for that first contact with his bare skin. She felt impatient to begin another day by his side. Her lover. Her husband. Her Master.\n\nBut he wasn't in bed with her.\n\nThe sudden memory of his death slammed into her then, killing whatever was warm or welcome about the morning. She lay still, feeling numbness creep over her. She'd cried so many tears in the last five weeks and now there were none left, just a miserable sigh.\n\nShe wished for the thousandth time that she'd been in the car with him when it had skidded off the road. Why couldn't she have died at his side, in the same moment? She'd have preferred it to the horror and anguish of receiving the phone call from police. \n\nKara had dragged herself lifelessly through the process of putting his affairs in order, calling friends and associates, reciting the same words over and over like some morbid mantra. The funeral was a nightmarish blur in her memory. She'd returned to the apartment afterwords feeling lost and hollowed-out. \n\nAnd in the five weeks since, she'd shut herself away, greeting friends at the door, absorbing their condolences, then politely seeing them off. Even her sister and two nephews hadn't managed to talk their way past the threshold. Phone calls were a constant nuisance. Peter had made a lot of wonderful friends in his sixty years, and it seemed every one of them pestered her with a call or a visit. Luckily, after a week or so the intrusions dwindled and finally died off entirely, leaving her to stumble alone through the fog of her dismal thoughts and feelings.\n\nShe closed her eyes. Why bother getting up? Her days had nothing to offer her anymore.\n\nOh, wait. \n\nThe Masquerade. \n\nUgh.\n\nIt wasn't like she HAD to attend. Sure, the vendor deposit was non-refundable, but Peter's pension and insurance settlement had set her up for life, money-wise. She never had to get out of bed again. \n\nHer friends would understand if she didn't go, surely. Besides, the idea of attending a BDSM-themed trade show without her Master made her chest hurt. They'd gone together each of the past five years, and her memories of the event were inseparable from her memories of him.\n\nHe'd want her to go.\n\nShe had a workshop full of hand-crafted wooden bondage devices to sell, and a waiting list of people eager for custom-made pieces. That had been his idea - perfect synergy between his love of carpentry and his love of kink. And she'd been swept along for the ride, as his demo model, an occasional guinea pig for a new device idea, business partner, and, eventually, fellow craftsman. They'd built pieces together, and even the ones that hadn't sold had been fun to use themselves. \n\nShe gently fingered the stainless steel collar around her neck. She'd been wearing it the day he died and hadn't taken it off since. She'd worn it to the funeral, hidden by a scarf to avoid outing herself to her family and non-kink friends. She'd slept in it. She wasn't supposed to wear it in the shower but she'd done it anyway, the few times she'd bothered with hygiene. \n\nIt was the last tangible symbol of his 'ownership'. If she removed it, that final, sacred link between them would be broken and then he'd really, truly be dead and she'd be alone and scared and life would be joyless and empty.\n\nShe was being stupid, her rational mind screamed at her. Why wasn't she healing? Why wasn't she getting better? How much longer would she feel so hopeless? Dangerous, dark whispers inside her were getting louder as each day passed...how long before she surrendered to their seductive promises of a quick escape from the pain?\n\nKara groaned and peeled herself off the mattress. The bedroom hardwood felt unfamiliar to the soles of her feet. She didn't bother dressing. She peed, then got the coffee maker running. There was no cream in the house. No milk, either, nor eggs, bread, vegetables, or cereal. The remnants of a dozen order-in dinners stunk up the kitchen. \n\nSHE stunk, too - when had she last bathed? Or shaved? She tried to run her fingers through her long, brown hair but gave up immediately - it was a matted, massive tangle.\n\nHe'd hate to see her like this; weak, defeated and wallowing in self-pity, shuffling around the apartment like an old lady. She was only forty-three, for Christ's sake!\n\nHe'd want her to go to the Masquerade.\n\nEven without him.\n\nShe snatched the coffee pot while it was still half-brewed and filled a mug, then made her way stiffly to the living room. She knelt on her pillow next to his chair and took a sip. Strong, bitter and unfit for human consumption. She set the mug down on the hardwood floor.\n\nWhy was she kneeling? She had an apartment full of furniture and now it was all hers. She was being dumb again, like with the collar. As if by obeying her protocols...what? He'd come back? Stupid!\n\nShe picked up her mug and took another sip. It was still awful.\n\nHer bleary eyes took a moment to focus on the wall clock. Half past four in the afternoon! Where had the morning gone? It was almost time to think about ordering something for dinner. She had some planning to do, if she was going to attend the Masquerade tomorrow.\n\nHe'd want her to go. That would be his wish, and hadn't she always been attentive to his wishes?\n\nShe rose unsteadily to her feet, then staggered to the kitchen to dump her coffee down the sink. Maybe Chinese tonight? Or did she have that last night?\n\nShe decided to go to the Masquerade. Just one last time. For her beloved, departed Master Peter.\n\n*\n\nThe Masquerade was held at the expansive main pavilion of the O'Hanlan Private Golf Club. Admittance was by invitation only, and at five-hundred dollars per couple it wasn't a cheap date. But dinner was always high-quality, the wine flowed freely and the conversations were usually engaging. If nothing else, the spectacle made it worth the price of admission. \n\nThe Masquerade had only three rules, printed prominently on each ticket. No genital exposure or contact. Get permission before touching anyone. No recording devices allowed. That was it, and although there was a strong security presence to discourage rule-breaking, the Masquerade was a permissive environment. \n\nTo begin with, 'no genital exposure' wasn't a terribly restrictive dress code and the outfits that people wore ranged from trashy to regal. Most of the attendees wore masks - it was a bondage-themed event, after all, and there was both safety and freedom in anonymity. The masks themselves could be simple or ornate.\n\nTo add to the spectacle there were 'exhibition stations' where the attendees could sample and demonstrate different implements and equipment relating to bondage and sex. There were also two or three vendor booths - like Kara's - where kinky paraphernalia of all kinds could be purchased. It was a pervert's paradise and made for an evening of lively and decadent fun.\n\nOr it had, when Peter had been with her.\n\nKara was all in white as she stood in her booth; she wore a contoured corset top with a plunging neckline that showed off the tops and inner swells of her breasts, then flared out into an ankle-length lace-and-linen skirt. Elegant white, silk gloves stretched to her elbows. Her mask was a simple swath of white silk with tiny rhinestones speckling the perimeter. Kara had chosen white flats with a nod to comfort. She'd worn the same outfit last year and hadn't bothered to alter it this time.\n\nIt had taken her almost four hours to set up the booth all by herself, and she'd been dressed and ready when the pavilion opened to ticket-holders. She decided to hole up in her booth and be a spectator to the flamboyant madness all around her.\n\n\"Did we stumble into the junior prom by accident?\" said a voice from behind her. \"I think we're the only ones here over forty.\"\n\nKara turned to see Harold Sachs gliding up to her with his usual graceful stride, dressed in a cream-coloured, sequinned tuxedo and a truly ridiculous fake, white moustache that made him look like an elderly Yosemite Sam. Despite herself, Kara smiled. Harold possessed an aura that was corrosive to melancholy.\n\n\"Kink is mainstream now, I guess,\" Kara said, casting her gaze over pavilion. The crowd did appear to be largely twenty-something. \"How have you been, Grandpa?\"\n\n\"Grandpa?\" he huffed in mock outrage. \"I'm just a few years your senior, young thing.\"\n\nImpossibly, she found herself chuckling. Harold was in his seventies, at least.\n\n\"And what have you done with Phil?\" she asked, looking around for his partner.\n\n\"There was a rumour about a glory hole in the men's washroom, and, well, you know Phil.\"\n\nShe laughed at that. \"Is he giving or receiving?'\n\n\"He wishes he could do both,\" Harold said with an impish smile. \n\nA few moments passed as he made a show of inspecting the oak stocks, paddles and spanking bench that Kara had brought as examples of their work. They'd already drawn plenty of interest.\n\n\"I'm glad you decided to come,\" Harold said in a voice soft and gentle. \"And Peter would be glad you came too. You're a brave girl.\" He patted her bare shoulder companionably.\n\nShe nodded, suddenly unsure of her voice or her grip on emotions. \n\n\"I hope you won't object if I loiter about in your booth until Phil comes back? The dinner's not for an hour yet.\"\n\nShe flashed him a grateful smile. Of everyone she knew, Harold's zany company would be the most welcome.\n\nThe pavilion was well-lit and crowded - it looked like there were a hundred couples, maybe more. The vendors and exhibition stations were set against the walls, giving most of the floor space to round, eight-seater dinner tables and still allowing plenty of room to stand and socialize. \n\nAnd the outfits! Glittering ball gowns, cosplay homages, studded leather gimp suits, bearskin loincloths, even diapers. Two men done up as teddy bears sauntered through the crowd, arm in arm. A wealthy socialite-looking woman led three men crawling, dressed as poodles. It was equal parts sexy, crazy and surreal. Kara found herself grinning and snickering as she and Harold took turns pointing out the weird and wonderful.\n\nHarold offered to watch the booth to give Kara a chance to wander, and she accepted, working her way along at a leisurely pace and pausing every few steps to admire the wares. Automatic fucking machines. Silicone pussies. Dildos, vibrators and plugs of every imaginable size and colour. \n\nThe exhibition stations were next. In the first, a woman scantily dressed as Tinkerbell had Peter Pan locked in the stocks and was ceremoniously swatting his leotard-clad buttocks with a riding crop as the man howled in mock agony. The crowd of onlookers was chanting the number as each blow landed. Five...Six...Seven. Good fun.\n\nAt the next station were several Sybians fashioned to look like rocking horses, and a line of both women and men were waiting for a turn. A security guard lurked nearby to ensure the 'no exposed genitals' rule was enforced, which seemed to defeat the whole purpose.\n\nThere was a performance at the next station, and Kara paused along with a sizable crowd to watch. A man dressed in a dark suit stood next to an even younger, black-haired woman dressed as a Catholic schoolgirl complete with skirt, blouse and pigtails, although the thick ring through her septum that rested on her upper lip ruined the illusion somewhat. The thirty-something man was in a dark mask, the woman was unmasked.\n\n\"Why have you been sent to my office?\" said the man. He was supposed to be a principal, Kara assumed.\n\n\"I...mish...misbehaved in class...and my...my...uh...teacher sent me to be punished, sir,\" the younger woman replied. Kara noticed her eyes were unfocused, her face was flushed and she swayed slightly as she stood. \n\n\"We don't want these nice people to be disturbed by your whining, do we?\" the man asked, brandishing an inflatable gag theatrically. Without further preamble he slid it into her open mouth and inflated it, forcing the woman's jaws apart until they were straining and she was forced to breathe through her nose.\n\n\"And now the spanking bench,\" he continued, gesturing to the padded furniture behind him. The bench was angled like an inverted 'V', and the young woman lay on her stomach so her head and feet were at either end of the bench, with her rear end at the highest point. When she was face-down, the man set about buckling her wrists and ankles securely into leather cuffs attached to the bench. \n\n\"The finishing touch!\" the man crowed, producing a brown, leather hood from a backpack that sat under the bench. He expertly hooded her - there were no openings for her eyes or mouth, only two nostril-sized holes for breathing. The mask laced up the back.\n\nKara realized she was holding her breath and let it out slowly. This was a performance, after all. They'd obviously devised some way for the younger woman to communicate despite her bondage. She glanced at her fellow onlookers - they all seemed to be enjoying the show. She tried to relax.\n\nWhen the young man brandished a short leather strap, there were cheers from the crowd. \n\n\"A good dozen should teach her the proper behaviour!\" he shouted, then lifted the young woman's short skirt, revealing plain, white panties. The crowd hooted and clapped its approval. The man drew back and slashed the strap across her panty-clad bottom. It was a brutal blow and the smacking sound rose above the din of the crowd. The woman began to pull against the cuffs, wiggling her bum in what Kara hoped was an erotic and theatrical display.\n\nThe man turned to the crowd and said something about the sale price of the spanking bench, even stepping into the crowd to answer a young couple's question. Behind him, the woman's struggles intensified. If she was making any sound it was obliterated by the gag, hood and the noise from the onlookers. \n\nKara was sweating and her heart pounded, and finally she couldn't take it anymore. \n\n\"That girl is in trouble,\" her voice sounded small in the big crowd.\n\nNo one reacted, so Kara stepped forward and shouted at the 'principal' loud enough to be heard. \"Your partner's in distress!\"\n\n\"Relax, Ice Queen. It's all a show,\" the man proclaimed with a cold smile, then laid another punishing stroke onto the woman's ass. Kara saw the muscles in her bare thighs and calves straining against her bonds, quivering with the effort. Her elbows were jerking ineffectually, trying to free her wrists.\n\nLong ago, Kara had been in that situation, bound and helpless and frightened. She knew what panic felt like and recognized it immediately in the other woman's frantic struggles.\n\n\"You need to get that gag out,\" she said, pushing her way to the end of the spanking bench. \n\nThe man was in front of her a moment later, shoving her back by her shoulders, barking something to the crowd.\n\nAnd then the bound woman stilled, her arms and legs went slack in her bonds.\n\nKara didn't remember jerking her knee up between the man's legs, didn't recall shoving him away as he crumpled to the floor. She only heard about that part later, from witnesses.\n\n\"Call an ambulance!\" Kara yelled, her voice a shriek, then bent and began tugging at the laces of the leather hood. Up close, the acrid stench of vomit was unmistakable. \n\nShe looked over her shoulder and saw Harold squeeze his way through the crowd. He started wrestling with the cuffs on the woman's ankles. Kara wrenched the tight hood off the woman's head and squeezed the release valve on the gag, deflating it. The foul-smelling contents of the woman's stomach accompanied the gag as it was removed from her mouth. Her eyes were closed. Ignoring the nauseating odour, Kara bent and checked for breathing.\n\n\"Not breathing...\" she muttered. Harold had finished with the cuffs and together they lay the young woman on her side on the floor.\n\n\"Move,\" Kara said, and Harold backed off right away. Kara had taken a first aid course two years ago after Peter had fallen off a ladder, though she'd hoped never to need that particular set of skills. \"Get an ambulance.\" As Kara bent over the woman's body Harold was already dialing dispatch on his cell phone. \n\nWhat to do? She fought to remember. ABC. Airway, breathing, circulation. The woman wasn't breathing...so...what? The only thing Kara remembered clearly from her course was chest compressions - they'd practiced those on the dummy. She rolled the woman on her back, positioned her hands on the woman's sternum and pressed hard.\n\nVomit spluttered form the young woman's mouth and she started coughing violently. Coughing was good. Coughing meant she was breathing. Kara quickly rolled her onto her side so her mouth and lungs could empty themselves.\n\n\"She's breathing,\" she said, the relief in her voice obvious. The younger woman was alternately crying hysterically, coughing and shivering. \"Get my jacket,\" Kara said. Harold hurried to retrieve it from the booth, still relaying information to Emergency Response.\n\nHer old friend quickly returned with her down-filled winter jacket, and Kara wrapped her patient but kept her on the floor, smoothing hair out of her face and talking to her reassuringly. The young woman couldn't have been much over twenty and looked almost child-like, huddled and terrified on the floor.\n\nKara looked around for the young woman's partner but the man was nowhere to be seen. Good riddance. She hoped the coward never came back!\n\nThe paramedics were there in ten minutes but it felt like an hour. The young woman coughed and bawled and Kara cooed and hugged her and tried to ignore the disgusting smell. She stayed with the younger woman, holding her hand as the paramedics checked her vitals and took a medical history. The girl's name was Ashley Mallory, and she was twenty-one. Kara herself was interviewed by security and then by the police but fortunately there were plenty of witnesses to corroborate her version of events. The paramedics wouldn't let Kara accompany the girl in the ambulance. Maybe for the best - dressed as she was and smeared with vomit, Kara would have made quite a scene in the emergency ward.\n\nHer night ended early, with Kara closing up her booth and hoping the smell of bile wouldn't be too difficult to get out of her clothes. She realized, too late, that the girl still had her winter jacket, but all in all not too high a price to pay.\n\n\"You saved that kid's life,\" Harold said for the dozenth time, shaking his head in disbelief as he kindly helped her close up shop. \"You were amazing.\"\n\nAnd somehow, amid the chaos and panic, despite not selling anything and being covered in puke, Kara felt stronger. For the first time in weeks, she was glad she'd gotten out of bed. Death had cruelly stolen Peter from her. But tonight, she'd had a measure of vengeance - she'd stolen a young woman from Death. And maybe it didn't balance the scales exactly, but she had to admit, it felt pretty damn good.\n\n*\n\nIt took Kara three days to get her apartment cleaned, disinfected and smelling good. Her laundry was done, fresh sheets on the bed, groceries in the fridge. She wasn't in a good place by any means, but at least she was functional. She'd even met her sister and nephews downtown for some skating. The collar hadn't come off yet, but soon, perhaps.",
        "A week after the Masquerade, she was dressed in a comfy track suit and enjoying a quiet Saturday afternoon on the couch, spending some 'alone time' with a good romance novel. Her solitude was interrupted by a knock on the door. She figured it might be another well-wisher, but checked the spyhole in the door just to be sure.\n\nThe young woman from the Masquerade - Ashley - stood outside the door, holding Kara's winter coat draped over one arm. The thick septum piercing was hard to mistake. She wore jeans, a faded Bruins jersey and canvas sneakers. Her eyes were sunken and black-rimmed; she didn't look like she'd been sleeping well. She must have piggybacked through the secure entrance to the building.\n\nKara opened the door. The slight girl didn't look like someone to be feared.\n\n\"Are you Mrs. Meadows?\" the young woman asked, reading the name off the ticket stub that she must have left in her coat pocket.\n\n\"Kara,\" she said, extending her hand and smiling warmly. The woman looked like she could use a smile, and maybe a meal.\n\nAshley's eyes widened, and Kara noticed for the first time the younger woman's brilliant green irises. \"You're the woman in the mask and pretty dress! I remember your voice.\"\n\nKara chuckled. \"Yes, although the rest of that night is something I'd rather forget.\"\n\nAshley lunged forward and wrapped Kara in a tight hug, then clung to her. The younger woman was even smaller than Kara had realized, both in height and in build.\n\n\"Thank you. For everything. For saving me...for staying with me. For your voice...\" Her words ended in a sob.\n\nKara returned the embrace, and hugged her until the younger woman chose to pull back. \n\n\"I just did basic first aid,\" Kara said.\n\n\"You saved me. I'd be dead now if not for you. I owe you big time. I owe you everything.\"\n\n\"Oh, come on. I'm sure you'd have done the same,\" Kara said, blushing a little at the display of gratitude. \"I was about to make some lunch. I'd be happy for some company.\"\n\n\"I don't want to be any trouble. I'm just returning your coat. It's a little...dirty...but I didn't have the chance to get it cleaned.\"\n\n\"No trouble. Please come in.\"\n\nAshley followed Kara into the apartment and sat at the table while Kara made and served a couple of grilled cheese sandwiches and put on a pot of coffee. The woman seemed too nervous to initiate the conversation so Kara spoke up.\n\n\"So, that man you were with at the Masquerade...is he your boyfriend?\"\n\n\"Master,\" Ashley said. \"Master Chad. He's pretty pissed at me right now for humiliating him at the Masquerade. I've been texting him all week apologizing but he won't see me.\"\n\n\"What you you mean 'humiliating' him?\"\n\n\"You know, ruining the performance. Making him look bad.\"\n\n\"You were gagged, hooded and restrained. You couldn't communicate your distress. What did he expect you to do?\"\n\nAshley shrugged. \"Take it.\"\n\nKara stared at her, not quite sure how to respond. \n\nAshley must have picked up on the incredulous look because she continued. \"Hey, I've taken worse than that. Skull-fucking, fisting...I've been trained to do a lot of things. I should have been able to handle a little bondage. It was my fault for drinking too much wine beforehand. I was real nervous.\" The young woman tried to sound matter-of-fact but wouldn't meet Kara's eyes as she spoke. \n\n\"You're into some extreme stuff,\" Kara said, trying to find words that weren't critical or outraged. It wasn't her place to judge someone else's kink, after all.\n\nAnother shrug. \"Sometimes a slave has to do stuff she hates in order to serve her Master. It proves her obedience and devotion.\"\n\n\"I'm not sure you should be doing things you hate. That doesn't sound satisfying.\"\n\nAshley flashed her a puzzled look, then waved the comment off. \"Anyway...he'll get over it soon enough and take me back. He always does, even when I mess up. It just means I need more training.\"\n\n\"What kind of training?\"\n\nAshley's laugh was devoid of humour. \"Whatever he wants. The Master makes the rules, the slave obeys. You're a submissive yourself, you know how it is.\" Ashley gestured to Kara's collar. \n\n\"Can I ask you...what do you get out of all this? It doesn't sound like you're enjoying it a lot,\" Kara said.\n\nAshley took another bite of her grilled cheese. She looked like she was trying to decide how much to say.\n\n\"When I was eighteen I dated this guy in his thirties. This was before Master Chad. This guy was into tying me up, dominance, spanking, the whole bit. We'd have sessions that would last all afternoon. At first it was kind of scary, but once I got used to him, the feeling changed. It became really...intense, in a good way, you know? Like he was stripping away all the parts of me that weren't real and touching the one, true part of me. The real me. I could just let go and be who I really was - I could cry, or laugh or...you know...I didn't have to hold anything in.\" Ashley saw Kara hanging on her words and gave a nervous laugh. \"Sorry - that probably didn't make much sense.\"\n\n\"It made a lot of sense. You said it beautifully.\"\n\n\"Really?\"\n\n\"And does Master Chad make you feel this way?\"\n\n\"Well...not yet. He says it's because I'm comparing him to my last Master and that once I've fully submitted, that feeling will come. I'm trying really hard.\"\n\n\"How long have you been submitting to Master Chad?\"\n\n\"Almost three years. I met him online after my first dominant moved away.\"\n\n\"Have you spoken to him about your feelings? Told him what you like and don't like?\"\n\n\"Does that matter? I'm a slave. It's my job to do what the Master commands.\" Ashley was looking at her curiously, as though the fact should have been obvious to anyone.\n\nKara smiled. \"I used to think that way too, before I met my husband and Master. I used to go with Doms who gave me all sorts of commands, and some of them made me scared or uncomfortable. I didn't say anything because I thought the same as you...that a true submissive just obeyed. But with a lot of help I discovered it isn't true - a submissive still has a voice and should communicate clearly.\"\n\n\"And that worked?\"\n\nKara nodded. \"It really did.\"\n\nAshley looked away. \"Master Chad is pretty strict about complaints. Last time I complained I got beat real bad. A slave should trust her Master to know what's best for her.\"\n\nThe words were spoken dutifully but without conviction, and Kara tried not to wince. She didn't want to pity this young woman. Kara paused to get them both a mug of coffee, and she considered her next words.\n\n\"Is there someone you can talk to about this? Family maybe? Friends? I don't want to speak out of turn, but you don't sound like you're happy.\"\n\nAshley shook her head and sighed. \"It's just because I'm holding back, not devoting myself deeply enough. If I can just get it right, I'm sure I'll find that place again, like with my first Master. It's just taking longer to get past the scary part with Master Chad.\"\n\n\"Just curious...have you thought maybe Master Chad isn't the one? Have you thought about looking elsewhere?\" Kara tried to ask as delicately as possible. She knew well the power - and stubbornness - of a young woman's heart and didn't want to be too direct.\n\nAshley gave a sad smile, then turned her back to Kara and swept her black hair up and away from her neck. At the base of her neck, etched in simple black lettering were the words 'Property of Master Chad'. \"What kind of Master wants a slave who's already been marked?\" she asked. \"I've got other tattoos as well...no one's going to want that. I'm not exactly gorgeous to start with.\"\n\nKara struggled to find the words to put Ashley's fears to rest. The younger woman had built up a formidable knot of misconceptions. How to begin to unravel it?\n\n\"So...what next? If Master Chad won't talk to you...\"\n\n\"I'm going over there tonight, to his house. I'll camp out on his doorstep if I have to. I can't keep crashing at the house I'm staying at, anyway. I'm sure he'll take me back when he realizes how sorry I am, and how hard I'm willing to work. He'll probably punish me real bad but after that he'll forgive me.\" \n\nKara fought a rising despair. Ashley was going back? Back to the man who almost killed her, then ran off and left her with complete strangers? A man who beat her for expressing her feelings? Had Kara saved this young woman's life, only to have it spent in misery? The idea was too awful to contemplate. \n\n\"Anyway. Thanks for the lunch, and for...you know...saving my life. I want to give you my number - if there's anything I can do for you, just text me, okay?\" Ashley drained the rest of her coffee and stood up. \n\nKara recorded the younger woman's phone number, all the while battling a sense of desperation. She was going back to that bastard?\n\nKara couldn't allow it. She WOULDN'T allow it!\n\n\"Ashley, just a second.\" Kara's mind was racing. \"Would you sit down for a moment longer?\"\n\n\"Sure.\" Ashley resumed her seat.\n\nKara paused and carried the mugs to the sink, trying to put her thoughts together, then looked Ashley in the eye.\n\n\"You know that wonderful, submissive place you want to get to, like with your first Master?\"\n\n\"Yeah?\"\n\n\"I don't think Master Chad can lead you there. He'll never get you there because it sounds like he's lost, too. And you know how men are about asking directions,\" Kara said with a conspiratorial wink.\n\nRather than smile, Ashley's face fell and her shoulders slumped.\n\n\"I guess...I kind of figured that. But at this point...\" she shrugged hopelessly. \"I mean, it's pretty much Master Chad or nothing, right? No one else will take a marked slave. And it's not like I have a lot to offer, anyway.\"\n\nKara took Ashley's hand and smiled gently. Underneath her serene exterior, her mind was working furiously to plot the correct course. A young woman's life was at stake!\n\n\"I can lead you there. I've been there, and I know the way.\"\n\n\"You? But...how?\"\n\n\"I'll guide you and teach you. I'll be...\" Kara scrambled for the right word, \"Your governess! I'll be your governess.\" She'd plucked the word from the Victorian-era romance she was reading.\n\n\"What's that?\" The younger woman sounded more curious than skeptical and hadn't made any effort to pull her hand away from Kara's grasp. Those had to be good signs, right?\n\n\"It's a position of authority. Kind of a combination of a teacher, a mentor and a role model.\"\n\n\"So I'd be your submissive, and you'd be my Mistress?\"\n\n\"In a sense, but not quite to that extent. You'd be my 'ward' and I'd be your 'governess'. You'd submit to my authority and accept my teaching and lessons.\"\n\nKara watched Ashley's face intently for any indication of acceptance or doubt. The younger woman seemed to be considering the idea, at least.\n\n\"I'm not...totally into girls,\" she said at last, looking up at Kara almost apologetically.\n\nKara increased the warmth of her smile. \"I'm not totally into girls either. But I fooled around a bit, when I was your age, and enjoyed it. How about you?\"\n\nAshley flashed a shy grin. \"Maybe, like, twice? It was alright.\"\n\nShe made her expression thoughtful. \"Of course, you might have to move into my guest room. I can't have you sleeping on the street.\"\n\n\"You mean...I could stay here?\"\n\n\"Well, I suppose if you didn't want to...\"\n\n\"No, no...that's not what I meant. I mean, it would be great...\"\n\n\"And you'd have to end it with Master Chad. I'd need complete authority to teach you what you needed to know.\"\n\nShe was quiet for almost a minute, and Kara could see in her face she was thinking it through at her pace.\n\n\"So...I'd stay here...free?\"\n\nKara nodded. \"You'd be safe and comfortable.\"\n\n\"And in return, I become your submissive. Or what did you call it? Your ward?\"\n\n\"That's right.\"\n\n\"And you'll show me how to find that feeling again, like I had before?\"\n\nKara nodded again. Ashley's thought processes seemed...methodical, if not especially nimble.\n\n\"But what do you get out of this?\"\n\nThe question set Kara back. What DID she get out of this? Why was she extending herself so much to help this complete stranger? Was it because Ashley reminded Kara of a younger version of herself? Had saving the younger woman's life evoked some quasi-maternal instinct to protect her? Was she just doing a good deed for a person in need? Maybe a bit of all three. But would any of those answers sell the idea to Ashley?\n\n\"Companionship, for starters. I recently...lost...my husband and Master,\" Kara said, willing herself not to lose her composure as grief raked her insides at the memory. \"Having you around would be a welcome distraction. And of course, you'd be helping around the apartment too, so it would also be making my life easier.\"\n\nAshley fell silent again, thinking.\n\n\"You'll be safe, I promise. I'm not trying to trick you into anything,\" Kara said, scouting ahead of Ashley for possible objections.\n\n\"Oh, I totally trust you. I mean, you saved my life, right? And stayed with me even when I was puking everywhere. You're really nice.\"\n\n\"And I've been a submissive for more than twenty years. I've seen the highs and the lows. I can help you.\"\n\nKara could see she wasn't quite convinced, and didn't know what else to say to sweeten the pot without over-selling the idea. And did she have the right to do that? If Ashley chose to leave...well, it was her choice. Even if it was a dumb one.\n\nAnd possibly life-threatening.\n\n\"It's just, a slave has to be loyal, right? I swore an oath to Master Chad, so I'd be kind of worthless if I broke the oath,\" she said.\n\nKara stifled a sigh and instead reached out to brush Ashley's cheek with her palm. It was maybe too intimate a gesture for the short amount of time she'd known her, but Kara wanted to leave Ashley with the memory of a gentle touch. Master Chad didn't sound like the 'gentle touch' type.\n\n\"I see. Well, think it over, okay? You've got my number. Even if you just want to talk, give me a call. I'm a good listener.\"\n\n\"I will. And thank you SO much. For everything. I mean it, you have no idea how grateful I am.\"\n\nKara walked her to the door and wrapped her up in a tight hug.\n\n\"Be safe,\" she whispered to the younger girl, before letting her go.\n\n*\n\nWhen her cell phone rang at two the next morning, a terrible dread welled up inside Kara and immediately banished the grogginess. Good news never called in the wee hours.\n\nThe display showed it was Ashley.\n\n\"Ashley?\" Kara said, voice still gravelly with sleep.\n\n\"Hey...sorry for the late call,\" Ashley said. Her voice was pitchy with emotion. \n\n\"You can call anytime. Is everything okay?\"\n\n\"Um...\" There was a long pause, and Kara glanced at the screen to make sure they hadn't been disconnected. \"Is...is that offer still good? You know, I could be your submissive or whatever?\"\n\n\"Of course it is.\"\n\n\"I'd like to accept. You know, if that's okay.\" Ashley sniffed, then exhaled.\n\n\"Ashley? Are you safe? Where are you now?\"\n\n\"I'm...\" There was another long pause and Kara thought she heard a quiet sob. \"I'm in a Burger Joint, you know, the one on Sixth and Evans? I kind of...ran...and I don't have any winter stuff, and they said I can't stay unless I buy something but all my stuff is back at his place. I'm so sorry to call you like this, and so late, but I don't know what to do...\"\n\nThere was another awful silence. Kara was already out of bed and dressing.\n\n\"Ashley? I'm coming to get you, okay? I'll be there in thirty minutes or so. Tell the guys at Burger Joint that I'm coming and I'll buy something. Give them my number if they don't believe you.\"\n\n\"Oh, thank you! I'm really sorry, but I just couldn't...\"\n\n\"Ashley, just stay there, okay? Stay right there.\"\n\n\"O-okay. Sorry again. I know this really sucks and...\"\n\n\"It's fine. Just stay there, do you understand?\"\n\n\"Yeah.\"\n\n*\n\nHe'd busted her lip, and there was a weal just below her right eye, too. It was five below zero outside and Ashley was in a t-shirt, jeans and ankle socks. She wouldn't meet Kara's eyes, and every other sentence was an apology.\n\nKara gave up her coat to the shivering young woman, paid for two meals at Burger Joint, then got Ashley into the warm car without waiting for the food.\n\n\"We should go to the police and file a complaint,\" Kara said before putting the car in gear.\n\n\"No! No, please, no.\"\n\n\"But if he's got your money and your stuff...\"\n\n\"Please, please don't make me,\" Ashley said, then broke down into panicked crying. \n\nWorried that Ashely was nearing the point of hysteria or a mental breakdown, Kara reached over and rubbed her back through the coat, then cranked up the heat to maximum.\n\n\"Hey, okay. Nobody's going to force you to do anything.\"\n\nShe just nodded, still sobbing.\n\n\"Can I take you to Emergency to get those bruises checked out?\"\n\nShe shook her head vigorously. The tears didn't abate.\n\n\"How about we go back to my place?\"\n\nAshley gave a nod, and Kara put the car in gear.\n\nOnly when they were finally warm and safe in her tenth-floor apartment did Kara begin to relax. She got Ashley out of her filthy, wet socks and into some warm slippers and sat her on the couch, wrapped in a down duvet and holding some clean gauze against her swollen, split lip. Soup was heating on the stove. \n\nAshley looked physically and mentally exhausted. Her eyes were sunken, black-rimmed and haunted and she shivered despite Kara's attempts to warm her. She checked in with the young woman frequently, alert for the symptoms of shock. That first aid course was coming in handy a lot lately!\n\nAshley ate some soup, though hardly enough to be considered a meal, then Kara got her into bed in the guest room. She briefly debated suggesting a shower, but decided that the shaken woman needed sleep a lot more than she needed soap and water. Ashley had stopped shivering by that point and some of the numb terror had faded from her face.\n\n\"Thanks for this. I can't ever say it enough. You saved my life again tonight. I promise to be a really great submissive for you. Or, you know, a ward.\"\n\nKara sat on the side of the bed and looked down at Ashley, then gently stroked her un-bruised cheek and bathed her in the warmest smile she could muster at four in the morning.\n\n\"Don't worry about any of that stuff now, okay? Just sleep. You can sleep as long as you want, and no one will bother you. When you wake up, we'll get you some more food, and then we'll talk.\"\n\nAshley nodded, already half-asleep.\n\nKara left the light on in the bathroom in case Ashley woke up, and was asleep herself as soon as her head hit the pillow.\n\n*\n\n\"Hey, Sleeping Beauty,\" Kara said. \"Hungry?\"\n\nAshley gave an embarrassed smile and nodded. She'd slept through breakfast, lunch and dinner, only rousing herself at seven in the evening. She must have been totally depleted to sleep for fifteen hours straight!\n\nKara put her book down, got off the couch, then went to the kitchen. Ashley trailed behind her, still wearing yesterday's clothes, dark hair matted and tousled. The cut on her lip had scabbed over and the bruise under her eye had faded a little. She looked a little worse for wear, but at least she was intact.\n\n\"How about French toast and tea? Or do you prefer coffee?\"\n\n\"Anything is great, thanks. And sorry for sleeping so late.\"\n\n\"No need to apologize. You had a rough night.\"\n\n\"Thanks again for coming to get me. You're a real saviour.\"\n\n\"It was no trouble.\"\n\nThere were a few minutes of silence as Kara made the French toast. It had been one of Peter's favourites, and it felt nostalgic and a little painful to make it for her young guest. Ashley excused herself to the washroom, then came back and leaned against the counter, facing Kara's back as she cooked.\n\n\"I never get a chance to sleep that long. Master Chad keeps me on a pretty rigid schedule.\"\n\n\"He's still 'Master' Chad?\" \n\n\"Oh, right. Just 'Chad' now, I guess.\"",
        "\"I'm glad for that.\"\n\n\"It's because of you that I ran when he started hitting me. Usually I kind of...take it. But I started thinking of your offer, then just grabbed my phone and ran out of there. I didn't really think, I just ran. I figured, you know, maybe I could do better with you.\"\n\nKara turned away from the grill to face Ashley.\n\n\"You're welcome to use the guest room for as long as you like, whether or not you want a governess. If all you want is a safe, warm place to sleep, it's a sure thing, okay?\"\n\n\"Thanks. Really, that's so cool of you,\" Ashley said with a grateful smile. \"But...the 'governess' thing is still on the table, right?\"\n\n\"Is that what you want?\"\n\n\"I...think so.\"\n\nKara turned back and flipped the toast over. \"There's no rush to decide. Take some time and think it over.\"\n\nThere was another silence that seemed to Kara more companionable than uncomfortable.\n\n\"Um...I can't pay anything. You know, like rent or anything like that. Master Chad...I mean Chad...didn't want me to have a job, so until I find one...\"\n\n\"Don't worry about that. You're not costing me anything by using the guest room, and there's plenty of food. Maybe when you get your feet under you again we'll work out something more formal.\"\n\n\"Thanks. I'll pay my share, don't worry. It's just going to take a little time to get myself together, right?\"\n\n\"I understand. Again, there's no rush.\"\n\nKara plated the French toast and retrieved some maple syrup and milk from the fridge.\n\n\"You can eat at the counter or the table, whatever you want.\"\n\n\"Smells really good, thanks.\" Ashley doused the toast in syrup and stuffed an over-sized chunk into her mouth.\n\nKara leaned on the counter across from her and watched her devour the meal and guzzle the milk. In moments the plate and glass were empty.\n\n\"Coffee or tea?\"\n\n\"Whatever's easy. Tea?\"\n\n\"Sit on the couch and I'll bring it out. We can talk in the living room.\"\n\nAshley nodded and left, and a few minutes later Kara joined her on the couch, setting two mugs of green tea on coasters on the long, oak coffee table that Peter had hand-made.\n\n\"How do you feel?\" Kara asked.\n\n\"Honestly, kind of pathetic. I mean, I'm supposed to be an adult, and instead I'm leeching off you for everything.\"\n\n\"You ARE an adult. You just hit a rough patch, that's all.\"\n\n\"I'm almost twenty-two and all I have is this one set of clothes and a cell phone. And it's not really my phone - it belongs to Mas...I mean, to Chad.\"\n\n\"You've got a safe place to sleep and plenty to eat. That's a good place to start, at least.\"\n\nAshley nodded glumly and took a tentative sip from the mug, careful to use the undamaged side of her mouth. A couple of minutes went by quietly.\n\n\"So what would I need to do for this 'governess' thing?\" Ashley asked.\n\nKara had spent the day pondering that very question. She'd made some bold promises the previous day and wasn't sure she'd be able to live up to them. She'd learned a lot from the men she'd submitted to before Peter, and even more in the fourteen years she'd worn his collar, but it wasn't clear how much of that would translate into teachable lessons for Ashley. Really, it had been as much about self-discovery as anything those men had taught TO her. \n\nPeter, of course, had been a godsend, creating a space for her that was safe and nurturing; encouraging her to grow and experiment and expand her experiences. But even then, Kara realized, it wasn't like he'd 'trained' her in how to be submissive. He'd just fostered the conditions that allowed her own natural submissiveness to blossom - trust, respect, consistency, patience, firmness and gentleness.\n\nSo...could she do that for Ashley? Would that be enough? \n\nIn the end, Kara decided that she had only her own experiences and knowledge to draw upon, so those would have to serve as the foundation for her mentorship of Ashley. It probably wasn't the only way - or even the BEST way - but it was the only option that felt authentic to her. \n\n\"You'd have to be honest, and open to trying new things. You'd have to accept me as someone with authority in your life. You'd have to follow rules and protocols,\" Kara said.\n\n\"What are protocols?\"\n\n\"They're like...different sets of standards for behaviour. You know how there's one protocol for eating at a five-star restaurant, and a different one for eating at a Burger Joint, right?\"\n\n\"Oh, okay. Got it. And I guess there would be...you know...sex and stuff?\" Ashley's tone was matter-of-fact, as though sex with a woman she'd only known for a short time was a forgone conclusion. \n\nKara had spent time considering THAT question as well, while Ashley had been asleep. Ashley was certainly cute - her green eyes were absolutely beautiful - and Kara had enjoyed the few same-sex dalliances she'd had in the past. On their fifth anniversary in Aruba, she and Master Peter had a threesome with a voluptuous German tourist and it remained one of the most erotic and pleasure-filled nights she could remember. She had no reservations about sapphic lust. \n\nBut Ashley was young and dependent and vulnerable, having just come out of an abusive relationship. Kara wouldn't want her to feel obligated or pressured to have sex, even if she seemed more or less okay with the concept.\n\n\"It wouldn't be a sexual relationship, primarily,\" Kara said, selecting her words with care. \"But there might be some sexual or intimate touching at times. I think for this to work, we need to form a powerful bond, and physical touch would probably make that easier. What are your thoughts on that?\"\n\n\"A slave obeys any command her Master gives her without question or hesitation,\" Ashley said, as though reciting from a textbook. She gave a shy smile at Kara's raised eyebrow. \"Chad had me memorize the Three Cardinal Rules for Slaves. So whatever you said, I would do.\"\n\n\"Wait...the three what?\"\n\n\"He got them from this website. Three Cardinal Rules.\"\n\n\"I'm afraid to ask about the other two.\"\n\n\"A slave accepts her Master's superiority in all matters,\" she said. \"And...the slave must meet her Master's needs first and foremost and to the exclusion of all else.\"\n\nKara was temporarily speechless.\n\n\"So...if you wanted sex, I'd have to do it for you, no questions,\" Ashley said, seeking to fill in the awkward pause.\n\n\"It wouldn't be that way. Whatever happened, we'd negotiate beforehand and make sure your limits were understood and respected,\" Kara said.\n\n\"No worries there. Chad had a 'total power exchange' thing going with me, so I've been trained to have no limits. I wouldn't give you any back-talk.\"\n\nKara smiled patiently. \"Okay, well I guess the important thing is you'd be at least open to physical contact. But mostly it would be about both of us learning and exploring and building trust and understanding. I feel those are the fundamentals you'll need. Did you have any other questions you wanted to ask?\"\n\n\"Um...what kind of punishments do you use? And what would be an example of a severe punishment if I messed up?\" \n\nThat was a question Kara hadn't even thought about, and it pained her to consider the awful experiences that might result in a question like that being asked.\n\n\"I guess scolding, writing lines and standing in the corner, mostly.\"\n\n\"Yeah, but what about a severe punishment? Would it be like...caning or something?\"\n\n\"No, nothing like that. And regardless, we'd discuss everything before it happened and make sure you were in a good place with it.\"\n\nAshley bit the undamaged side of her bottom lip and furrowed her brow as she considered her next words. The younger woman was surprisingly easy to read - she seemed to be without guile or pretense.\n\n\"I'd like to accept your offer. Would you please be my governess?\"\n\n\"Whoa, that was fast. You can think it over if you like. You don't have to answer right away,\" Kara said, taken aback by Ashley's sudden and decisive declaration.\n\nAshley was quiet for a moment, then put her mug down on the coaster and met Kara's eyes.\n\n\"Kara, look at me. I'm broke. I'm homeless. I'm cut off from my family. I barely have any friends. I've been marked. I've been pierced. I've been beaten up, starved and humiliated. I've even done gross things on camera. For the last three years, I've done everything Chad told me to do. Do you know why?\"\n\nBecause you trusted the wrong man. You ignored your instincts and common sense. You confused abuse with dominance and suffering with submission. Kara knew the reasons but couldn't bring herself to judge Ashley harshly. She'd been there herself, once upon a time. Given herself to men like Chad in the desperate, naive hope they could feed and nurture that powerful, submissive part of her psyche that longed for expression and love. She'd been betrayed, hurt and even hospitalized when those efforts failed. She'd seen the world through Ashley's eyes, and walked for a time in her shoes.\n\nKara shook her head and Ashley continued.\n\n\"Because I really, really want to feel the way I did for my first Master. I know I'm stupid for wanting that but I can't let it go. It's part of me. I can't make it go away.\"\n\n\"It's not stupid to want that.\"\n\n\"Right? You get it. You were a submissive, too. You felt those things, right?\"\n\nKara nodded, stirred by the passion in Ashley's voice. \n\n\"And now you can help ME feel them. And it's even better because I can trust you. You saved my life twice in just the last week, and if I can't trust THAT, then what can I trust? So, yeah, I'm in. I'm all the way in.\"\n\nKara was quiet after Ashley finished talking. The younger woman was earnest and committed, no question. She seemed to understand and accept, at least in a general way, what Kara would be asking of her. And even more important, she would be safe, kept away from the Chads of the world.\n\nNow all Kara had to do was deliver.\n\n\"Okay, then. It's a deal. We'll have the ceremony tomorrow at noon, unless you change your mind.\"\n\n\"There's a ceremony?\"\n\n\"Of course,\" Kara said. She hoped Ashley wouldn't ask for details because Kara hadn't come up with any yet.\n\n\"Why?\"\n\n\"A ceremony lends weight and importance to the beginning of our agreement. All important beginnings have ceremonies, right? Baby showers, christenings, weddings, New Year's eve. You remember your high school graduation? The beginning of 'real life'?\"\n\n\"Uh...I never made it to the end of high school,\" Ashley said, blushing a little at the admission.\n\nKara made a mental note to revisit that in the future.\n\n\"Okay...you've heard of collaring ceremonies, right?\"\n\n\"Yeah. I even went to one.\"\n\n\"When something's important, it gets a ceremony. And you, Ashley, are very, VERY important. So you get a ceremony.\"\n\nHer eyes widened a bit and she grinned at Kara's words.\n\n\"Wow...that's really cool, thanks! Okay, I'm excited for tomorrow, then.\"\n\nKara knew she'd share in that excitement, as soon as she mapped out the ceremony in her mind.\n\n*\n\nThe next morning, for the first time in more than six weeks, Kara removed her collar. \n\nThere was a moment where lock wouldn't open and she was scared the mechanism had rusted shut, but some gentle coaxing had sprung it loose. \n\nTaking it off brought a cascade of emotion - anguish, followed by intense grief, then a strange vulnerability. All things being equal, she'd have preferred to keep it around her neck.\n\nBut she was a 'governess' now. An authority figure. And 'authority' didn't wear a slave collar, no matter how much she might want one. Appearances were important. Symbols gained out-sized importance in dominant-submissive relationships. Roles needed to be defined, and expectations clearly known. \n\nBefore heading out to do some shopping, she left a neatly folded pile of her old clothing on a desk in the guest room for Ashley to try on. Hopefully there would be at least a few outfits in there that didn't look ridiculous on the petite woman. Kara would have to take her to the mall for clothes soon, or else force a confrontation with Chad to get her old stuff back. But that was a problem for another day.\n\nThe shopping served a couple of purposes. She bought ice cream cake and Irish Cream Liqueur, to begin with.\n\nMore than that, it gave her some time to try to put herself into the 'dominant' mindset. \n\nHer nature had always been submissive, but she'd witnessed and experienced plenty of examples of 'Dominant' behaviour - some good, most not so good. She knew the good and bad when she saw it, and that was as much thought as she'd devoted to dominance up until now.\n\nBut with Ashley, she'd adopted that role and was expected to model it well, so Kara spent a lot of time remembering and analyzing the Doms and Masters from her past. Her memories of Peter were the most accessible to her and the most pleasant to recall, even if they left a terrible ache inside her afterward.\n\nShe thought about how he moved, how he positioned himself. How he spoke to her - his tone, his words, the volume of his voice. How he caressed her. How he inflicted a strangely welcome sort of pain and how he held her when it was over. She remembered his rules and protocols and tried to probe the reasons behind them. Why had he been strict with some rules and lenient with others? How had he signaled his displeasure when she'd transgressed them? How had he dealt with her when she'd been rebellious? Petulant? Angry? How had he shared in her joys and celebrated her achievements? What steps had he taken to keep their passion fresh as they moved slowly through adulthood and into middle age? How had he kept her empowered even as his emotional hold on her grew deeper and more certain?\n\nSo many questions! So many chances for error!\n\nAnd the stakes were high. Ashley wasn't stupid, and if Kara couldn't deliver on a satisfying experience then Ashley would seek out other dominants. Kara knew from personal experience the nightmarish pitfalls that lay along that road, especially for someone with Ashley's misconceptions, lack of personal support, financial dependence and damaged self-esteem. There were plenty of Chads out there, and worse.\n\nKara hoped to borrow from her late husband's bag of tricks without it appearing forced or fake. She knew how Peter had acted and remembered how she'd responded. Surely she could synthesize an authentic dominant persona from those ingredients.\n\nAnd maybe, in some way, the experience would bring her closer to the man she'd loved. Maybe becoming a Dominant would - belatedly - bring her a greater understanding and appreciation for all he'd done. The idea of it was an appealing one.\n\n*\n\n\"I want to talk about expectations, protocols and rules,\" Kara said in a voice she hoped was both no-nonsense and gentle. She held Ashley's beautiful green eyes in her own.\n\nThe young woman nodded up at her attentively. She was kneeling on the floor on Kara's pillow, with Kara sitting in front of her and above her on the couch. Ashley had found some yoga pants that were too big on her, as well as a pink t-shirt that billowed around her. Not fashionable, but comfortable, at least. \n\nIt was noon. The ceremony had begun.\n\n\"First, you need to accept that I do things differently than Master Chad. You're going to have to learn a new way. Are you willing to try that?\"\n\n\"Yes, ma'am,\" Ashley said, nodding again solemnly. The \"ma'am\" had come unprompted - apparently Ashley recognized the weighty tone Kara was using and instinctively responded in a more respectful way. A good sign?\n\n\"I want you to forget about the Three Cardinal Rules you recited yesterday. I don't believe in them and won't be enforcing them. Clear?\"\n\nAnother nod.\n\n\"Instead, there are five principles I want you to keep in mind as we begin this journey together. Five principles that will guide your behaviour in this relationship. Those are openness, honesty, diligence, obedience and submission.\" Kara counted them off on her fingers slowly.\n\n\"Yes ma'am.\"\n\n\"Please repeat them for me.\"\n\n\"Obedience, submission, honesty...um...diligence and...\"\n\n\"Openness. I want you to be open to learning and experimenting.\"\n\nAshley looked chagrined at not being able to remember all five, but recovered and tried again. \"Yes ma'am. Obedience, submission, honestly, diligence and openness.\"\n\nKara smiled down at her and Ashley returned it.\n\n\"Make sure you remember those. I want you to be able to repeat the Five Principles on demand. Clear?\"\n\n\"Clear.\"\n\n\"Do you have any questions so far?\"\n\n\"No ma'am.\"\n\n\"Okay. I will be your governess. A governess is a teacher, mentor and authority figure. My role will be to guide you, protect you and ensure you're keeping the Five Principles close to your heart. Does that meet your expectations?\"\n\n\"Yes ma'am.\"\n\n\"Is there anything else you expect of me? I want to know if you have needs or wants other than what I've just talked about.\"\n\nAshley frowned and bit her bottom lip. Finally she shook her head.\n\nKara smiled, then reached down and stroked the young woman's cheek. The caress brought an immediate grin. The younger woman was already receptive to intimate touching.\n\n\"You'll be my ward. Your role is to watch, listen, learn, ask questions and explore your own preferences and desires, as well as to be faithful to the Five Principles. Do you find any of that unreasonable, or think it's too much to ask of you?\"\n\nShe shook her head emphatically. \n\n\"Okay, that's good. Let's talk about protocols. We're going to have two protocols: low and high. Low protocol means the rules are relaxed and we can be more informal. We'll call each other by our first names, we can tease and joke around and be fun and friendly. The way we've been acting together so far would qualify as low protocol. Does that make sense?\"\n\n\"Yes ma'am.\"\n\n\"High protocol means the rules will be strictly enforced and I'll expect proper address and submission from you. Things will still be friendly and positive between us, but in a much more formal way. Okay?\"\n\n\"Yes ma'am,\" Ashley said. \"Low protocol is Burger Joint, high protocol is a five-star restaurant.\"\n\n\"Well said,\" Kara said with a wink, \"You can assume you're on low protocol unless I tell you differently.\"\n\n\"Okay.\"\n\nKara's expression became serious. \"Whatever protocol you're under, you still have a voice. You can express your feelings. You can say 'stop' if you're uncomfortable. You can ask questions if something is unclear. Got it?\"\n\nAshley nodded.\n\n\"Repeat what I just said.\"\n\n\"That it doesn't matter if it's high or low protocol, I can still tell you my feelings and opinions and ask questions.\"\n\n\"Very nice.\"\n\nAshley smiled brightly.\n\n\"I'll be writing down some rules for you, but I don't expect it's going to be a long list. Maybe four or five. You're not a child and I don't think I have to spell out every little thing, right?\"\n\n\"Right.\"\n\n\"And if you're not clear on what a rule means, what will you do?\"\n\n\"Um...can I ask you about it?\"\n\n\"Of course! Please do that. And what happens if I make a rule and you hate it? What will you do?\"\n\nAshley's expression turned thoughtful again. The silence stretched on for several seconds.\n\n\"I mean, I wouldn't disobey one of your rules...\" she said, \"And I know better than to complain. I guess I would trust that you knew what was best, and try my hardest to follow the rule.\"\n\n\"What about expressing your opinion? You're supposed to do that, right?\"\n\nShe frowned, and Kara could tell she was having a hard time getting her mind around the concept.\n\n\"Well...maybe I'd try to think of a way to tell you my opinion, but without complaining.\"\n\nKara gave her a patient smile. \"I'll tell you what; how about we allow complaining, at least until we know each other better? If you hate something, you can tell me directly and I'll be fine with that.\"\n\nAshley nodded slowly. \"Yeah...I guess at first that would be okay.\"\n\n\"Perfect! Is there anything else you want to say before I continue the ceremony? Anything at all?\"",
        "\"Just that I'm really grateful for everything. You saving me, and letting me stay here, and now accepting me as your ward to help me get where I want to be. I'll try really hard to be good, and not let you down. And...don't feel like you have to be too nice. I'm okay with strict, too.\"\n\n\"Do you prefer strict?\"\n\n\"I think sometimes, yes. But not, like, out-of-control strict, you know? Just...firm.\"\n\n\"That's good to know; thank you for telling me that. Is anything else on your mind? Questions?\"\n\n\"I can't think of anything else. Oh! What should I call you? You know, during high protocol?\"\n\n\"I'd prefer 'Miss'. I'm not ready to be a ma'am yet,\" Kara said. \n\nAshley gave a little chuckle. \"Okay. Thank you, Miss. That's all my questions for now, I think.\"\n\nKara took a deep breath, then opened the shoe box that was on the couch beside her. She reached in and drew out a black, leather collar with a silver buckle. As her fingers touched the smooth, inch-wide band it brought a flood of memories rushing back. Even after so many years, her fingertips remembered the feel of her first real collar.\n\n\"Back...\" she started, then had to clear her suddenly raspy throat. She took another breath and let it out slowly. Ashley looked on.\n\n\"Back when I was a little older than you are now, I was lost. I was on a bad road, and it was leading me further into darkness every day.\" She paused as her eyes welled with tears. She stroked the pad of her thumb over the shiny, black leather of the collar. \n\nShe missed him so much.\n\n\"I felt a lot of despair and...and the guys I was meeting were...they were not good guys. I kept looking, hoping, but it just seemed to get worse and worse. I was always scared, always hurting, but I kept going back because it was all I could think of. I didn't see any better options.\"\n\nHot tears overflowed and ran down her cheeks. She took another steadying breath. Ashley's eyes were wide.\n\n\"I kept putting myself in scenes that were more and more dangerous. I guess I stopped caring. Just got numb to it all.\"\n\nKara sniffed and wiped her eyes with the palm of her hand. Emotion was thick in the quiet living room.\n\n\"But when things were at their worst and I was...I was having really dark thoughts, I finally met a good man. An older guy, seventeen years older. He was gentle and thoughtful. He made me feel safe and confident. When I was with him, I could let go and be my real self. I'd been seeing him for six months when he gave me a collar.\"\n\nKara held the collar out so Ashley could see it. The younger woman was getting misty, too, her teary eyes still gazing up into Kara's. She knew by now where this was leading.\n\n\"I became his.\" Kara reached down and slowly looped the collar around Ashley's neck, sliding it under her hair at the back. \"This collar saved my life. I truly believe that. It literally saved my life. I wore it for two years before he got me a different one.\"\n\nKara fastened the buckle, making sure it wasn't too tight or too loose.\n\n\"But THIS is the collar that saved me. It's the most important thing I own. The most important thing I've ever owned.\"\n\nAshley was overcome, bottom lip quivering, sniffling, tears flowing silently. Kara could feel herself close to breaking down completely. She reached out with both hands, cradled Ashley's cheeks and looked down into her watery, emerald eyes.\n\n\"Please wear it with honour and pride.\"\n\nThen Kara dissolved into heartbroken sobs. And when Ashley stood and wrapped her in a tight hug, Kara returned it, grateful to have someone to share her terrible burden of grief, even in a small way.\n\n*\n\nThe crying went on for more than half an hour. Ashley held her the entire time, weeping herself. Gradually, tears gave way to a desire for ice cream cake and alcohol.\n\nThis was supposed to be a celebration, after all!\n\nKara got up and started brewing coffee for her Irish Coffee, then took the cake out of the freezer. Ashley had followed her to the kitchen and leaned against a counter, a faraway look in her eyes as she caressed the leather band around her neck reverently. \n\n\"Looks good on you,\" Kara said, enjoying how it contrasted with her pale skin, yet matched her hair almost perfectly.\n\n\"It's my first collar,\" Ashley said, still unfocused. Then she looked into Kara's eyes. \"Are you sure about this? I mean, this is...so special. Like, maybe too much?\"\n\n\"It's yours, now and always.\"\n\n\"I don't know how to thank you for something like this. I'm kind of in shock. This is the best gift ever.\"\n\nKara pulled her into a gentle hug.\n\n\"You can thank me by doing your best, every day. And I'm here to help you. You're not alone; we're in this together.\"\n\n\"Hey, you're making me cry again,\" Ashley protested, but didn't pull back from the hug.\n\n\"Well I can't be the only one,\" Kara said, then stepped back. \"Cut the cake and take it out to the leaving room. I'll be there with the Irish Coffee in a few.\"\n\nThe cake was delicious, although too rich to have more than a slice. The Irish Coffee hit the spot. Maybe a little too strong, but the added bite of alcohol wasn't unwelcome just then. Kara felt herself loosening up, and she hoped Ashley was feeling more relaxed as well.\n\nKara sat on the couch and Ashley was cross-legged on the cushion on the floor. That was a high-protocol rule - whenever they were seated together, Ashley would be at her feet. But even in low protocol the young woman seemed eager to embrace the tangible symbol of her new status.\n\nThey discussed the other rules too, as they sipped and Ashley downed a second slice of cake.\n\nThe 'eyes' rule was another high-protocol directive. When Kara was present, Ashley's gaze would be directed either to the floor in front of her, or watching Kara's face attentively, not wandering absently around the room.\n\nThe only other rule Kara decided to implement was to put Ashley in charge of all the household chores except cooking, which Kara enjoyed and kept for herself. But dishes, laundry, bathrooms, dusting, vacuuming, and other domestic duties now belonged to her ward. Ashley had readily agreed, pointing out that since she wasn't paying rent or expenses, it was fair for her to do the housework.\n\nThree rules was plenty to start with.\n\nThey passed some time with small talk. Kara learned that Ashley was estranged from her parents and had a younger brother she never saw anymore. Kara told her about her own sister and nephews, and her parents who lived in Victoria. None of them were aware of her kink lifestyle, and had not-too-subtly hinted that her marriage to a man seventeen years her senior - and the related decision not to have children - was a major mistake. But they'd been pleasant to Peter's face, at least, and that counted for something.\n\nBy mid-afternoon Kara was enjoying the combination of a sugar rush and a mild buzz brought on by the liqueur. Ashley felt it too - she shifted restlessly on her cushion, her eyes on Kara's. \n\n\"May I speak, Miss?\" she asked.\n\n\"It's low protocol, Ash,\" Kara said, deliberately shortening her name to emphasize the informality. \"And you can ALWAYS speak. No need to ask.\"\n\n\"Thank you. I was wondering if there was anything you wanted me to do. I'm excited to get started.\"\n\nGet started? Hadn't they already started? \n\nKara realized that Ashley wanted to be actively directed; to be assigned tasks and to have her time structured. It made sense - she'd said that Chad kept her on a 'rigid schedule' for the three years of that relationship. Small wonder that idleness made the young woman feel a little...impatient. Kara didn't plan to micro-manage her that strongly, but figured in the beginning she could accommodate her, to make her more comfortable. \n\n\"Hmm. Well, since you asked, I think I'd enjoy a foot massage. Would you be comfortable with that?\"\n\nAshley's eyes widened and Kara thought she saw a look of anxiety on her face, but it was gone a moment later. Kara cursed herself for the misstep - it had seemed an innocent enough request, but obviously it was too much intimacy, too soon. Being the one in charge was harder than it looked!\n\n\"That's okay, maybe we'll save that for later. How about we get online and look for some clothes for you?\" Kara said.\n\nIf anything, the retreat made things worse; Ashley's expression became almost panicked. \n\n\"No...wait! I'm sorry. Please allow me to massage your feet, Miss? Please?\" Without waiting for a response, Ashley knelt on the cushion and lifted Kara's right foot into her lap and peeled off the sock.\n\nKara didn't know what to do. Should she allow it, which clearly made the young woman uncomfortable? Or decline it, which ALSO made her uncomfortable? There didn't seem to be a correct answer here, so Kara decided to remain passive.\n\nAshley hesitated for a moment as she looked down at the foot in her lap, then gently stroked the top and sides with the palm of her hand as though she were petting a cat. She paused again before repeating the motion. She avoided the toes and soles as though not sure what to make of them.\n\nShe didn't know how to give a foot massage. That was the problem! Kara almost sighed in relief as the mystery of her ward's nervousness was revealed. She couldn't obey the command, but didn't know how to refuse. \n\n\"Ash?\"\n\n\"Yes, Miss?\"\n\n\"Is this the first time you've done this?\"\n\nAshley's shoulders slumped and she kept her head lowered. \"Yes, Miss,\" her voice was quiet and full of shame, \"I'm sorry it's no good. I'll accept whatever punishment you decide.\"\n\nKara put her feet on the floor and leaned forward.\n\n\"Hey, look at me.\"\n\nHer ward reluctantly lifted her eyes off the floor.\n\n\"If you didn't know how to give a foot massage, why didn't you just say that?\"\n\n\"I promised to be obedient. A slave doesn't make excuses for failure.\"\n\nKara took a few moments to figure out how to go forward. Ashley had failed the principle of 'honesty', but had followed the principle of 'obedience' too perfectly. Kara realized her high-minded Five Principles had trapped poor Ashley in a contradiction. Her very first command as a Dominant had been a failure!\n\nSo what was the best response? Stern? Apologetic? Forgiving? Should she retreat on the concept of Five Principles? Was it too late to ask for a do-over? How could having control be so difficult?\n\nKara opted for a warm, soft tone.\n\n\"Thank you for your obedience. I know it takes a lot of guts to try something you're not good at and I'm really happy you made the effort for me.\"\n\nAshely's face showed confusion. She'd been expecting a reprimand but got thanks and praise instead.\n\n\"I don't know all your strengths and talents yet,\" Kara continued. \"So if I ask you to do something and you don't know how, please say so. As your governess, it's my job to teach you these things.\"\n\n\"Okay. I'm really sorry about that.\"\n\nKara gave her cheek an affectionate rub with her palm. \"No need to be sorry, I'm really pleased with you. Now, let's switch places.\"\n\n\"Um...okay. Why?\"\n\n\"I'm going to give you a foot massage.\"\n\n\"Me? But...why?\"\n\n\"To show you what's involved, and because I'll enjoy massaging your feet.\"\n\nLooking bewildered, Ashley sat on the couch and Kara knelt in front of her and removed the younger woman's socks. \n\n\"Please tell me if I do something that makes you uncomfortable, okay? This shouldn't hurt at all.\"\n\nAshley nodded.\n\nKara began with the right foot, holding it in her warm hands and starting down by the heel, squeezing, flexing and gently rotating the ankle. Her touch was practiced; she'd given hundreds of massages like this one over the last fourteen years, though none to a foot so small and soft. When she began pressing her thumbs into the sole she was rewarded with a sigh from her ward.\n\n\"Wow...this is amazing,\" Ashley said.\n\nKara glanced up at her and winked, then looked back down at the dainty foot in her hands. \n\n\"Peter was a carpenter when I first met him. He did mostly kitchen cabinets and some custom orders for people who could afford it. He was on his feet pretty much all day, wearing heavy steel-toe work boots. We'd get together in the evenings. I'd complain about my dead-end retail job and he'd grumble about his sore feet.\"\n\nWhen Kara glanced up again, Ashley was following the story with interest. Kara continued to work on her sole.\n\n\"I was madly in love with him and after he collared me I decided I really wanted to do something to make his feet feel better.\"\n\n\"It's always smart to keep your Master in a good mood,\" Ashley agreed.\n\nKara shook her head. \"No, that's not it. I WANTED to make his feet feel better. I loved him and didn't want him to be in pain. He didn't ask me to do it, or threaten me if I didn't. I served him because his happiness was really important to me.\"\n\n\"So you did it without being told?\"\n\nKara nodded. \"I got books from the library on massage and practiced on him every night for a while. I watched videos online. I even managed to save up enough to take a one-day massage course at college.\"\n\n\"It shows. You have a really nice touch. It feels incredible.\"\n\n\"Thank you. I'm enjoying it too.\"\n\n\"You LIKE giving foot massages?\"\n\nKara smiled. \"It's not a foot fetish. I just love the feeling of making you feel good. I like knowing you're feeling pleasure. I like the way your foot feels in my hands. It's intimate, don't you think?\"\n\nAshley was quiet for a moment. \"Yeah. I feel that too. It's...a good feeling.\"\n\n\"Peter loved it too. He'd wash his feet and I'd kneel and massage them for twenty or thirty minutes while dinner was in the oven, or before we went out for an evening together. It was a quiet time between us. Just two people who loved one another, sharing in some simple pleasure.\"\n\nAshley gave an appreciative moan as Kara worked her way up to her toes.\n\n\"Oh! I should be paying attention! I've just been sitting here zoning out...\"\n\n\"Just relax and enjoy. There's lots of time for you to practice. This is just to show you what it's all about,\" Kara said. \"And because I like massaging your feet, Ash.\"\n\n\"Because you want me to feel good and you want to share some quiet time with me?\"\n\n\"Yes.\"\n\nThere was a long silence, and Kara glanced up to make sure her ward hadn't fallen asleep. Peter had often nodded off during her massages, and Kara always found it oddly flattering that he would relax to that extent. But Ashley wasn't asleep - she was looking at Kara thoughtfully.\n\n\"That's...really cool,\" she said softly.\n\n*\n\nThroughout the week the new relationship began to take shape.\n\nAsh was diligent about her new chores, almost to the point of fanaticism. She was out of bed by six and had the coffee on before Kara had even opened her eyes. She cleaned the apartment - all of it - every day before joining Kara for lunch at noon. The few times Kara had tried to help out by washing a dish or making her own bed, Ashley had hastened to take over the task, apologizing sincerely for not having attended to it sooner. \n\nKara realized it caused her young ward less hardship if she just left her to work, so Kara spent the mornings reading, running on the treadmill in the basement rec room, shopping for groceries or meeting friends for coffee. When she returned to the apartment it was absolutely spotless and pristine. Somehow it even smelled fresh.\n\nThe afternoons were more relaxed, but posed a unique challenge: Ashley grew restless, then anxious, if she sat idle for any length of time. She expected direction from Kara almost constantly, and towards the end of the week Kara found it difficult to meet this new requirement.\n\nHad Kara been so demanding of her Master's time and focus and just not realized it? The more she saw of Ashley, the more she began to question how her own behaviour might have created challenges and frustrations for Master Peter. It was sobering to experience both sides, and it led her to appreciate his patience even more in hindsight.\n\nThere were some wins, though.\n\nThe day after receiving the foot massage, Ash had offered one to Kara, unbidden. Her efforts weren't very skilled but she kept at it and incorporated some hints and tips from her governess. The following day, she offered again. Thursday, too. She tried hard, and each time her technique improved a little. She was never in a hurry, content to kneel and give the foot in her lap her complete focus. On Friday, Ash knelt on her cushion for more than forty-five minutes, absorbed in Kara's feet.\n\nThey went to the mall to re-stock Ashley's wardrobe, but even this proved more of a challenge than expected. \n\nFirst, Ash had wanted to wear her collar, and her disappointment at not being allowed to was obvious. Kara explained that she might meet one of her 'vanilla' friends and didn't want her kinks to be 'outed', and Ash dutifully accepted her decision, but Kara could tell she was unhappy with it. The collar had quickly become a source of pride and identity for Ashley; it left her neck only during showers and while she slept, and the latter case had only been at Kara's firm insistence. She didn't want Ash getting strangled in her sleep!\n\nAnd once they got to the mall, the younger woman ceded every clothing decision to Kara, refusing to express any preference; her deference bordered on stubbornness! Regardless of the size, colour or style, Ash would only say that she'd proudly wear whatever Kara chose. Her sincerity was the most frustrating part. Kara couldn't get angry with her because Ash genuinely wanted to wear whatever clothes her governess chose for her. Having Kara choose was meaningful to Ashley, it seemed.\n\nIn the end, Kara had decided on a few pair of black yoga pants, long-sleeved cotton shirts in pretty colours, a couple of skirt/blouse combinations, sneakers, flats, winter wear and enough underwear and socks to make do. It wasn't cheap, and Ashley seemed horrified at the cost and apologized again and again until Kara issued an edict against further apologies. \n\nWas being a Dominant always so difficult, or was Ash a special case? Had Kara herself been so needy with Peter? She had an uncomfortable suspicion it was true, at least at first.\n\n*\n\nBy the end of their first week together, Kara felt things were going well. It hadn't been flawless, but Ash was a conscientious and earnest young woman and Kara found her to be good company, although a tad over-zealous at times. \n\nEven there, Kara was more inclined to blame Chad than Ashley. Her former Master had enforced - often brutally - some extreme and unhealthy dogmas, and after three years they were deeply entrenched in Ash's psyche. Ashley spent most of her time in a high-protocol state, even when it wasn't called for, and Kara didn't know if this was her preference or the result of three years of abuse and stress.\n\nAsh hadn't needed much time to absorb Kara's rules and quickly acclimatized to her new home and to Kara's preferences and habits. By the end of the week Ashley had started dropping subtle hints that she was eager to go further and learn more, so Kara had devoted a lot of time to mapping out 'the next step' in Ash's journey into healthy submission. \n\nBut how best to proceed? Kara was torn.\n\nThere was so much non-submissive stuff that Ash desperately needed - a job, a supportive peer group, hobbies, interests, an education, and maybe counseling for psychological trauma - and Kara felt it was short-sighted to focus on merely deepening the younger woman's sense of submission. Ash had \"vanilla life\" problems that required urgent attention. Surely there were more pressing priorities that Kara should be emphasizing!\n\nOn the other hand, Ash knew what she wanted, and if Kara didn't deliver then Ashley would eventually go looking for someone who could. Keeping the younger woman safe meant keeping her close by, at least for now.\n\nBut even then, what was the best way to 'deepen' someone's submission? What did that mean? Was it even possible? Even an experienced Dominant might not know the answers, and Kara was far from experienced.",
        "So Kara focused on what had been working so far: foot massages. \n\nAsh had really taken to giving foot massages; embracing the task with more than the usual level of enthusiasm. She seemed keenly interested in learning how to give Kara pleasure, and was doing it because she wanted her governess to be happy and not out of fear of punishment. These were healthy motivations, and Kara wanted to encourage more of the same.\n\n\"I was thinking we might explore something different, if you're up to it?\" Kara said on Sunday evening after Ashley had again offered a foot massage.\n\n\"Yes, Miss, of course. What would you like to do?\" She gazed attentively up from her cushion on the floor.\n\n\"Well, you've become really good at foot massages, and in such a short time. I have to admit you picked it up way faster than I did when I started.\"\n\n\"I think you're just a good teacher,\" Ashley said, but smiled at the compliment nonetheless.\n\n\"What would you think about learning to do a full-body relaxation massage?\"\n\n\"Sure, I'd like that.\"\n\n\"It would be more intimate than the foot massage. The one getting the massage is naked under a towel, and the massage covers the whole body, from neck to toes.\" Kara watched her ward's face, alert for any hesitation or anxiety.\n\n\"Okay.\" Her expression was eager, even excited.\n\n\"I'd like to demonstrate it tonight. How do you feel about being naked in front of me?\"\n\nShe saw it then - Ash's eyes widened just a little as a flicker of nervousness passed over her face, then it was gone, buried deep within her again. But it was enough for Kara to know that Ash didn't like the idea, even if she'd never admit it.\n\nBut Ashley surprised her.\n\n\"Um...can I be honest, Miss?\"\n\n\"Always be honest.\"\n\nShe hesitated, then started slowly. \"I want to learn how to do a full-body massage for you. I like to make you feel good, and I like how it feels when we're together and I'm touching you. Intimate, as you said before. I really like that.\"\n\n\"Okay.\"\n\nThe pause was longer this time, then Ash looked away and started to fidget with her fingers.\n\n\"It's just that my body is kind of...awful. It's embarrassing, and...gross. I don't want you to see it.\"\n\n\"That's fine. There's no pressure. I think a lot of women have concerns about their body image, especially when they're young.\"\n\n\"If...if you command me to be naked, of course I'll do it.\"\n\n\"I'm not going to do that.\"\n\nAsh sighed miserably and her shoulders sagged. Kara could tell it was killing her to refuse. On the other hand, the fact that she was expressing her honest feelings counted as a win, right? Progress!\n\nKara leaned down, cupped Ashley's chin and tilted her face up so she could see the younger woman's pretty eyes.\n\n\"It's important to me that you feel comfortable and safe. It's normal to be shy about your body, so I don't want you to worry.\"\n\n\"It's not that I'm shy. Chad saw me naked all the time and so did his friends - he kept me naked a lot. I'm kind of used to it. But...you're the one person I don't want to see it. And that's really bad, since you're the one who has the right to see it, you know? I'm just being stupid.\"\n\nKara was quiet as she tried to figure out what to say next. Ash didn't want to be naked but it clearly bothered her a lot to refuse. Did all dominants run into so many lose-lose situations?\n\n\"Would it bother you to tell me why you don't want me to see it?\"\n\n\"There are tattoos. Bad ones. Piercings, too. Like this one,\" she touched the septum ring that rested against her top lip. \n\n\"I've seen the tattoo on your neck. Are the other ones like that?\"\n\n\"Worse. A lot worse.\"\n\n\"Maybe we should look into getting them removed.\"\n\nAshley's eyes went wide. \"We can remove them?\"\n\n\"Well, yes. They do it with lasers.\"\n\n\"Chad said they were permanent.\"\n\nKara shrugged. \"I'm pretty sure they can be removed. If you want, we can go to a dermatologist and see for sure.\"\n\n\"Oh, wow! That would be amazing!\" \n\nKara had never seen Ashley so excited and it brought a smile to her face. \n\n\"And if you don't like your piercings, we can take them out as well.\"\n\n\"The guy welded them on. They don't come off.\"\n\nKara leaned in close and held Ash's nose ring between thumb and index finger to examine it. Her face had never been so near to Ashley's before, and Kara felt a momentary thrill of excitement at the closeness and intimacy of the contact. She wondered if Ash felt it too.\n\n\"It's not a weld; it's solder. And anyway, I've got wire cutters in the workshop that would make short work of a ring like this. We could probably get it off tomorrow if you wanted.\"\n\nAnd then, Kara kissed her on the cheek. \n\nShe hadn't intended to, it just...happened. Their proximity, Ash's excitement and vulnerability, the gentle touch...somehow a kiss just felt right. She realized what she'd done and sat back on the seat to gauge Ashley's reaction. Kara hoped she hadn't crossed any lines.\n\nAsh was wide-eyed with surprise - or was it wonder - and didn't say anything for a few moments. Then she raised her hand and trailed her fingertips over the cheek where Kara's lips had been.\n\n\"Thank you, Miss.\"\n\nKara gave her a sheepish grin. \"I couldn't resist. I know I should have asked first...\"\n\n\"No, you don't have to ask. It's fine. It felt...good.\"\n\n\"Then I might do it again sometime,\" Kara said, putting a little tease into her voice.\n\n\"Thank you.\"\n\nKara eased herself back into the back cushion of the couch. \"I don't suppose that foot massage is still a possibility?\" She raised her foot and wiggled her toes.\n\nThere were a few quiet moments. \n\n\"Miss, would you please teach me how to do a full-body massage? I'm ready.\"\n\n\"It's okay, Ash. You shouldn't feel pressured to-\"\n\n\"I want to,\" Ashley said, her voice uncharacteristically firm.\n\n\"Are you sure?\"\n\nShe nodded.\n\nKara hesitated, unsure if it was the right call. \n\n\"Okay, if you're sure you're comfortable with it. I'm going to get some things. Meet me in your room.\"\n\nAsh stood and went to her room and Kara went to get her shoe box full of massage supplies and three thick massage towels from the closet. She changed out of her comfy sweater and sweat pants and into a tank top and workout shorts. She also nudged the temperature up a couple of degrees; the apartment was warm but not 'lying around naked' warm.\n\nShe entered the guest room to find Ashley standing next to her bed, looking apprehensive, still fully dressed. Kara gave her a smile she hoped was reassuring.\n\n\"I'll pull the comforter off the bed and put down a towel. Why don't you get out of your clothes?\"\n\nWithout waiting for a response, Kara folded the comforter and set it on a nearby chair, then spread the soft, over-sized towel over the mattress, carefully smoothing out any creases. Behind her, she could hear the rustle of clothing being removed.\n\n\"They're off,\" Ashley said, the nervousness in her tone was obvious.\n\nKara turned and, for the first time, set eyes on Ashley's naked body.\n\nShe was slim; maybe 'skinny' was a better word. There was no fat on her and her ribs and hip bones showed under her pale skin. Her shoulders and arms were thin and the muscle there toned and lean. Her breasts were small and perky, and inch-wide silver hoops dangled from her pink, pebble-sized nipples. She had a flat stomach, and a small, silver chain hung down from a navel ring and ended in a silver dog tag. A two-week growth of black stubble shaded her pubic mound. And just above that, in half-inch black lettering, the word 'Fucktoy' had been inked into her skin.\n\nKara's eyes must have lingered on the tattoo because Ashley dropped her hand self-consciously to hide it, blushing a deep red.\n\n\"Chad got that done on his birthday. It hurt so bad...for two hours I had to just sit there, showing everything...\"\n\nKara nodded slowly, imagining how it must have felt. \"We'll see someone about removing it, if you'd like. A doctor - someone professional.\"\n\n\"Thank you.\" \n\nAsh closed her eyes and took a breath, then slowly turned away. On the small of her back, just above the crease of her buttocks, another black tattoo read 'Anal whore'.\n\n\"Oh, Ash,\" Kara whispered, heartbroken for the younger woman. What had she endured in the name of misplaced hope?\n\n\"That one was punishment for complaining too much when one of his friends was...inside me. Inside my...you know. Chad said...the punishment should fit the crime.\"\n\nKara just stared, stunned.\n\nAshley sobbed and swiped her wrist over her eyes. \"I didn't think it was fair because...I really tried hard to be quiet. But it was so painful...\" the last word ended in a high-pitched whimper as she broke down completely.\n\nKara snatched the comforter off the chair and wrapped it around the smaller woman, hugging her tight from behind as sobs wracked her thin frame, then guiding her to sit on the side of the mattress. Kara sat beside her, one arm around her shoulders, pulling her close, the other hand stroking her face, smoothing back her black hair. There would be no massage tonight.\n\nAsh had been vandalized. Disfigured. Kara was torn between fury and a sympathy so deep it hurt. Even after the tattoos were removed - and Kara hoped to begin that process without delay - Ashley would still feel those marks inside her, emotionally, for a long, long time. \n\nMaybe forever.\n\n*"
    ],
    "authorname": "GobLean",
    "tags": [
        "bondage",
        "consensual",
        "feet",
        "female dominant",
        "female submissive",
        "massage",
        "rules",
        "bdsm"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/her-governess-ch-01"
}
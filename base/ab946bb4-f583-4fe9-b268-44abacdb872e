{
    "title": "Awakening the Beast Pt. 07: Veritas",
    "pages": [
        "Author's note: This story continues directly from Parts 1-6. While not required, Pts 1-6 are strongly recommended first, to follow the story, get to know the characters, and understand what's really happening in this chapter. This one is a little different from previous parts, but integral to the overall story series. Do enjoy, rate the story on the final page, and keep the comments coming, positive and negative. Even more story to come soon. I very much appreciate every read, every comment, and every star ranking. I reserve all copyrights as the original author. --TIB\n\n--------------------------------------------------------\n\nFall had come.\n\nKelly wrapped the blanket around herself a little tighter, looking out from the cabin porch to the forested splendor around her. Oranges, yellows, and rusted reds adorned the trees that painted the landscape. It was so beautiful. Far from civilization, it was quiet. Peaceful.\n\nAnd yet... Kelly was lost in thought, trying to draw in the beauty around her, but fighting a losing battle. Her mind was racing with memories and uninvited thoughts she didn't want to dwell on, but try as she might, it was like trying to hold back the wind with one's outstretched arms. She was anything but at peace.\n\nThe wind. As if to complete the metaphor, a small and short gust of a breeze blew past, rustling up leaves that had cascaded lazily to the ground around the cabin. Kelly reacted to the chill by clutching her blanket again. She tossed her head to the side, letting the breeze lightly blow her long red hair from her face. That much felt good--purifying, clean, and natural.\n\nKelly became aware of a tear she hadn't even noticed, that the wind had blown down her cheek. She pursed her lips in a small frown and, staying wrapped in the blanket, pushed the back of her hand up and wiped the tear away.\n\nShe heard the front screen door open with a creak, and looked up just as Caelin walked out. He looked so handsome and rugged in his familiar light brown cargo pants, a red and black checkered shirt, sleeves rolled up past his strong forearms as he liked to do.\n\nCaelin looked at Kelly, and must have seen something on her face that troubled him. He scrunched up his face with a curious look, then sat down on the porch swing next to her.\n\nThe two of them sat quietly together, taking in the view, letting nature provide the light background sounds of soft rustling with the occasional breeze. The porch swing rocked back and forth in the smallest of arcs, a tiny creak at the bottom of every swing. It could almost pass for serenity.\n\nCouldn't it?\n\nKelly sighed, a bit louder than she intended, without even realizing it, wanting to keep her thoughts contained in herself. Hoping he didn't notice.\n\nAnother minute passed in silence.\n\n\"Baby girl...\"\n\nKelly turned to look at him, not liking the way this sounded. Intrusive. Feeling like her little self-domain castle of pain was about to be challenged.\n\nCaelin paused. Then turned to look at her, and spoke slowly.\n\n\"I see you.\n\nI know you.\"\n\nCaelin took her hand in his. She always felt so small in his big, strong hands. He turned his head to look off the porch for a minute, then turned back to her.\n\n\"I know something troubles you. You carry a burden so big, it might as well be a rucksack of granite on your back. I see it in you clear as day.\"\n\nHis face took on a caring and concerned look. \"I don't judge. You know I, of all people, won't ever judge. I have my own troubles.\n\nIt's for you to decide. If you ever want to talk about it, I...\" his voice trailed off. He patted her hand with his free palm, then still holding it with his other, turned back to gaze from the porch.\n\nAnd it began again. Started to well up inside her. Those demons clawed at her, stirring from their sleep. Kelly looked at him, studying the side of his face as her mind raced. Maybe it was time.\n\nNo, no... she couldn't ever. Could she? Didn't she have to endure it for the rest of her life? It was her cross to bear, and hers alone.\n\nOr, was it?\n\nThat which he had left unsaid--she heard many things in it. An offer. Even a promise. Latitude. Understanding. Maybe even empowerment. But also a suggestion. Or maybe more.\n\nKelly drooped her head again in shamed chagrin. He kept his gaze looking outwards at the countryside, and she joined him, squeezing his hand, feeling her palm a little sweaty in fear. So much beauty out there in the world. So much ugliness and pain she felt within, in flagrant contrast. How could she ever uncover, that which she felt she had to perpetually and eternally keep hidden?\n\nBut he was him. And there was... whatever this was, between them.\n\nFuck it. \n\nKelly squeezed his hand. He turned his head to look at her, seeing the torment on her face. She smiled at him through welled-up eyes, and silently gave him a knowing little nod. He rose as she stood, and, together, they wordlessly walked inside the cabin, the wooden door clamping shut behind them.\n\nKelly led him to the sitting area next to the wood stove, and they took two chairs facing each other.\n\nKelly felt so nervous. No, terrified. She sat, wringing her hands, trying to find the words. Where to start? What to say? How does one go about the impossible?\n\nCaelin sat silently, patiently waiting without any motion or prompting. \n\nKelly took a deep breath. It was time. She just started talking, letting the words come to her as she spoke, not sure how to go about this.\n\nAnd so she began.\n\n------------------------------\n\n\"It was just a little under four years ago, in the fall. September.\n\nSeptember... 22nd.\"\n\nKelly looked up, carefully watching Caelin's face as she spoke, nervous with every word she revealed.\n\n\"I had a son.\"\n\nIf this freaked him out at all, he didn't reveal it in his face or bodily reaction. She didn't know quite what to expect from him, but telling him this made her anxious, dreading any potential scorn, feeling vulnerable like this could lower her value in his eyes, or make her less appealing to him. Caelin sat quietly, listening with full attention.\n\n\"Michael. He was my boy. My world. He came from a relationship I had with a man, CJ. CJ and I had our troubles, and by the time I woke up and realized he wasn't quite the man for me, I was already pregnant. That was a strange time in my life, and I was looking for something with CJ, but it didn't quite seem to be there. Then I found out I was pregnant, and my whole life changed.\n\nI was young, and didn't know what to do. I wasn't ready for a kid, to have that kind of responsibility. When I told CJ, he came unglued and said 'Well, we need to take care of that!'\"\n\nThe cabin creaked a bit, as leaves fluttered against a side window in the breeze. Kelly continued, tenuously letting out the words as they came to her.\n\n\"I knew what he meant, but I wasn't raised that way, and my church would never forgive it. So I had Michael, and everything changed. I never knew what people were talking about, not knowing what true love is, until you have a child. He became my everything, the center of my world. I put all of myself into Michael.\n\nCJ and I tried to do the right thing and work things out for Michael's sake. We moved in together, we fought a lot, but somehow kept going and talked every now and then about what the future might hold.\"\n\nKelly brushed a lock of her red hair back behind her ear.\n\n\"Anyway, when Michael was three years old, that September, we went to the lake with a bunch of our friends, me, CJ, and Michael. CJ was drinking hard with the guys, so I took it easy, just having a few wine coolers so that I could be the one to drive back home. Michael seemed to love playing on the beach, stomping around in his pudgy bare feet.\"\n\nKelly got a wistful look on her face, with a tight lipped smile at the memory, touched with pain. She spoke as an entirely different person when talking about her boy. Caelin kept listening silently.\n\n\"I was completely blind to it at the time. Or maybe I just didn't want to see it. But CJ wasn't very good to me. And I let it happen. Maybe I even asked for it, I don't know. I didn't think I was worth very much. He treated me like crap. Of course that day, the more he had to drink, the louder and meaner he got. He got pretty belligerent with all of us. Especially me. He...\"\n\nKelly didn't finish her sentence, lost in thought for a few seconds.\n\n\"Later that night, we all said our goodbyes and went home. I felt okay to drive, so I took the keys to our crappy old station wagon. CJ was pretty drunk, so I had to buckle him in his seat belt, just like I did with Michael. There I was, taking care of two kids, not one. I kept trying to talk to CJ on the way home, to stay engaged and alert. I was so tired, but felt it my responsibility to get us home. I took my right hand off the steering wheel as I turned to him and pushed his shoulder to wake him up, and...\"\n\nA quiver started in Kelly's voice.\n\n\"...and then...\n\nWhen I looked back to the road, there was a medium-sized something there. In front of me. To this day, I still don't know what--a coyote, small bear--who knows. I froze for a second, unsure what to do, then grabbed the steering wheel with both hands and swerved to the right. There was a BIG thump. Whatever it was smacked into the back left of the car. We were careening to the right, so I over-corrected and tried to come back to the left.\"\n\nKelly loosely held her arms in front of her above her lap as she told the story, hands clenched as if she were steering a car, reliving the events as she recounted them, her arms trembling.\n\n\"I lost control. We went sliding to the right, and spun off the road.\"\n\nKelly started crying, but kept speaking through her tears.\n\n\"W-we smacked into a tree,\" Kelly firmly clasped her hands together as she said this, emphasizing the impact with a clap, \"this big pine tree. Right into the back right door, where Michael was sitting in his car seat.\"\n\nKelly's face suddenly went cold, speaking in a detached manner. \"There was a huge 'BANG!' You know, how you think a car crash would sound, with progressively crunching metal?\n\n... it wasn't like that. This huge, awful, loud 'BANG!'\" Kelly again clapped her hands together in declarative emphasis.\n\n\"My whole body got yanked sideways with this terrible force. I think I smacked into CJ. I lost consciousness. Out cold. When I came to...\"\n\nKelly froze, as if unable to speak. She stared above Caelin's head, focused on something dreadful a million miles away. \n\n\"At first... I couldn't see. There was all this noise. All this commotion. People seemed to be scrambling around. I tried to move my arms and legs, but I couldn't. I started to see some blurs, and I heard this figure looming over me in a white shirt say that I'd been in an accident, and just to lay still.\n\nIt all suddenly came rushing back. I looked to my left, and saw CJ and Michael. We were all lying on stretchers, side by side, in the back of an ambulance. I yelled for Michael, I screamed, but he didn't respond. Paramedics were doing CPR on him.\"\n\nKelly's hands balled up into fists. \"... on my boy!\" Her face broke into an expression of deep despair.\n\n\"I yanked and twisted my body as hard as I could. It hurt so bad, but I didn't give a shit about the pain. I was strapped down tight, and they wouldn't let me get to him. I was totally powerless.\n\nThey whisked Michael off to the ICU when we got to the hospital. CJ and I seemed not as bad. CJ broke his right arm against the door in the crash, but otherwise because he was drunk seemed to just roll with it in his relaxed state. I fought my way straight to the ICU as soon as they let me. Little Michael was just laying there, limp, these machines hooked up to him, all grotesque. His little body turning black and blue, matted blood in his hair.\"\n\nKelly looked at Caelin now with wide, forlorn eyes, somewhat panicked.\n\n\"He looked so hurt. So helpless.\" She motioned in front of her, as if Michael were lying there on the floor, right at that moment.\n\n\"This little innocent body. But there was nothing I could do. *I* was helpless. I would have done anything, ANYTHING in the world right then, to make him okay. I wanted to push my own life right into him, you know? For him to take all my life and health? Trade me for him? But I couldn't do anything.\n\nWhy wasn't it me? He didn't do anything wrong. He wasn't the sinner, the worthless one. Michael was good and pure and beautiful. He had value. Why was he the one on that table? Why couldn't I make it me? That was the worst moment of my life.\"\n\nShaking now, lips quivering, Kelly visibly started crumbling in front of Caelin, tears flowing freely.\n\n\"He... he died an hour later, while I watched. Right in front of my eyes, me standing there like a fucking idiot, not doing a damn thing but watching my son's life leave his body. Oh God!!!\" Kelly's hand came up to cover her mouth.\n\nAfter a pause, Caelin started as if to move, but Kelly started speaking again.\n\n\"It was a hell that no one should ever have to experience. Me, his mother, alive, watching his little casket be lowered in the ground, one of his little blue toy cars resting on top. Knowing my precious little son was inside, dead, where I should have been. And it was my fault. All my fault.\"\n\nCaelin clenched his hands at this and pursed his lips, but didn't say anything.\n\n\"The cops took my blood in the hospital, and said my blood alcohol level was below all limits, so they didn't charge me with anything. But... if only I hadn't had those few drinks, that little bit could have made a difference. Maybe I could have reacted quicker. Maybe if I hadn't of swerved at all and just hit the damn thing straight on, I'd have been hurt, but Michael would be alive. The smallest of any change, and that tree would have hit our car in another spot, not Michael's door. Maybe if I had left just a few minutes earlier. Or later. Not a day goes by, that I don't think there's something I could have done differently, and he'd still be alive.\n\nI can't close my eyes without seeing his broken little body in front of me, all those tubes and wires sticking out of him.\n\nMy dreams.... my nightmares. I go through the crash over, and over. I know what's coming. I know what's going to happen, and I can't ever do something to stop it. Every time, the crash... that horrible sound... my boy gets the life beaten out of him. I can't escape it.\"\n\nKelly was falling apart, but tried to pull herself back from the brink and steady her bearing. She drew a deep, quaking breath.\n\n\"CJ and I tried to make things work. He didn't openly chastise me about it like he did other things. But I could see it. I could see it in his eyes, every time he looked at me. I saw that he blamed me for Michael dying, just like I blamed myself. Eventually, he left. In many ways, I pushed him away. I deserved it. Deserved it for what I did.\"\n\nKelly lost it, wrapping her arms around herself in front of her chest, rocking forward, wailing in grief. Her hair fell in front of her face, just like on the park bench, that first day in the forest, when she met Caelin.\n\n\"My boy!!!!! My boy!!!! Oh God!!! Sweet Jesus, forgive me, I killed him! I killed my little boy!!!\" A cry came out of Kelly that was primal, escaping her tortured soul, her heart burst wide open. There was nothing human left for her to hang on to. Nothing of herself left. Only pain. Pure, raw, gut-wrenching pain that comes from a shadow of a soul that feels damned to hell.\n\nCaelin went straight to her and wrapped his arms around her. Kelly sobbed uncontrollably, weeping into Caelin's shoulder, her body convulsing as she bawled in grief. Caelin enveloped her in his big burly embrace, cocooning this woman in a protective bear hug.\n\nKelly wept.\n\nAnd wept.\n\nThen wept some more.\n\nUntil she felt like all life had drained from her. Hell, she would have welcomed death, not caring anymore, if it meant no more of the pain. She felt so empty once again. That same old fucking numbness again drowned her in a black void.\n\nKelly wanted to die.\n\nThe persistent, never-ending aching pain inside was unbearable. She wanted to scream in self-hatred. Disgust. Anguish. Despair. Throw herself into the dark chasm that haunted her.\n\nCaelin. He always seemed to know what to do. He'd take her. Make her feel good again. . Wouldn't he?\n\nBut Caelin did nothing. Only held her tight, letting her fall apart. Gently letting her hit rock bottom, broken and shredded to pieces, no semblance of humanity left. Kelly was sure someone could sweep away the fragments of her entire being right then with a broom, and she'd anonymously evaporate into a nondescript cloud of dust.\n\nNothing.\n\nThe two of them remained still in his embrace, letting time flow past as if it didn't apply to them.\n\nKelly's face stayed pressed into the base of Caelin's neck. Her trembling now dissolved in the numbness. Her whole body ached.\n\n...ached...\n\nA feeling. \n\nHer hot breath, humid with salty tears, reflected right back from Caelin's chest, making her feel confined and claustrophobic. She could now feel her flowing tears, smeared with her mascara between the two of them in sludge, like an abstract oil painting.\n\nAshamed with herself, Kelly reached up to wipe her eyes and face.\n\nCaelin caught her wrist in a flash, grasping her tightly with his strong hand, not allowing her to tend to herself. With a vice grip, he lowered her hand to his chest, pressing her palm against his chest hair, just above his open collar, then slowly released her wrist.\n\nHe gently pulled her mess of a face away from his neck and softly kissed her swollen lips. Then he became the one to tend to her, tenderly brushing off the top of one cheek with his thumb, underneath her left eye. Another soft hint of a kiss where his thumb had just left.\n\nThen another brush of his hand, lower, across the same cheek, removing more of her black streaked mess. \n\nAnother angel's kiss.\n\nLittle by little, Caelin delicately cared for her, holding her and moving her as he needed.\n\nAs she needed.\n\nKelly obediently remained still, so jumbled up inside, just letting it happen.\n\nCaelin's hands became a salve. His kisses, healing gauze. Every touch as if he were a master sculptor, scooping the tiniest of pain away. Molding.\n\nFirmly holding her in his embrace, he slowly kissed and caressed Kelly's jawline. Her neck. Under her chin.\n\nStill beyond deeply troubled, at least this drew a small sigh from Kelly. She felt her lips quivering again in overwhelming grief.\n\nRising in one fluid motion, Caelin simultaneously stood to his feet and scooped up Kelly in his arms, pulling her tightly against him. Unable to do anything else even if she had been crazy enough to want to, Kelly again remained still, balling up in this man's massive embrace as if a child in her father's arms. He cradled her protectively.\n\nCaelin carried her into the bedroom, gently laying her down on the log-style bed. He stayed in constant contact with her, letting her feel both his enduring presence and a solid masculine touch. He straddled and sat on her legs, letting her feel a good portion of his weight holding her down onto the bed as he continued his dedicated attention upon her.\n\nCaelin began to undress his charge ever so slowly. He paused at each step, unfastening a button on her blouse, followed by a soft kiss on the newly exposed parcel of her skin. Every inch of her skin received his caring attention.\n\nPinning one wrist to the bed in his grasp, outstretched from her side, Caelin worked his way out along her arm, kiss by kiss, ending by taking her hand in his, interlocking fingers with her the same way he had the first day in the forest, pressed up against the tree. And then he repeated with the other arm.\n\nSilent and submissive even in her traumatized state, Kelly watched him work her body, covering every parcel of skin with his soft lips. Gradually, the exterior numbness began to be replaced, him leaving tender tingles lingering everywhere.",
        "After removing her shirt and bra, Caelin retrieved a silk scarf from the side of the bed. He brought Kelly's wrists together in front of her bare breasts, bound them securely together, and pushed her hands high on the bed, Kelly's arms stretched over her head. By default, she obediently kept her hands where he had placed them.\n\nCaelin now scooted down off Kelly's legs and knelt between them, turning his attention to the lower half of her torso. Pulling slightly on her waistband, he softly kissed her navel, the uncovered delicate flesh of her hips.\n\nHe continued to undress her, sliding her panties and jeans down her legs, inch by inch, pausing to attend to each bit of exposed flesh. \n\nFinally reaching her feet, Caelin removed her socks as the last bit of clothing, leaving her entirely naked.\n\nYes. Naked indeed, exposed and stripped bare in every way, inside and out, every last wall, defense, and pretense withdrawn from the man now with her. Never before in her life had she been so utterly vulnerable. There was nothing left for her to hold onto, or pretend she held privately in her inner sanctum.\n\nCaelin again knelt on her legs as he undressed himself, pinning her body securely to the bed. When fully nude himself, he leaned forward, supporting himself with straight arms planted on either side of Kelly's shoulders.\n\nHe looked steadfastly into her with his hazel brown eyes. Neither one spoke. But they shared a moment, connecting spiritually in the silence. Naked in every way together.\n\nFinally, Caelin drew in a breath. He spoke softly but intently.\n\n\"Baby girl...\"\n\nKelly waited.\n\n\"It's not your fault.\"\n\nWhat the fuck? This? THIS is what he says now, in a time like this? Kelly felt annoyed, right when she thought she might be stepping back from the all too familiar abyss she'd been plunged into, perpetually for years. Maybe they weren't connecting like she thought.\n\nKelly scrunched up her face a bit in confusion and mild annoyance.\n\n\"I know.\"\n\nCaelin shook his head slowly, keeping eye contact.\n\n\"No, Kelly. It's not your fault.\"\n\nWhat the...??? \n\n\"I know, I know... it was just a stupid accident.\"\n\n\"No, Kelly. \n\nIt's not your fault.\"\n\nA white hot stab of pain in her chest, her bound arms above her head now seeming out of place.\n\n\"No... I know...\"\n\nCaelin gently took her cheek in his right hand, looking down at her, more intently than ever.\n\n\"No.\n\nThis is not your burden to bear.\n\nIt's\n\nNot\n\nYour\n\nFault.\"\n\nThe pain swelled, cutting into her heart, crushing Kelly's chest.\n\n\"....\n\nI...\"\n\nShe stammered. Lost her voice. Grasped desperately for any remaining composure. Her head was swimming, her inner voices trying to sort out the truth from self-repressive lies.\n\nStill cradling her cheek in his hand, Caelin leaned down and rested his forehead on hers in an intimate gesture. He whispered now. One final time.\n\n\"It's not your fault, Kelly.\"\n\nKelly viscerally felt something snap deep inside. That white hot pain exploded, splitting her in two.\n\nThe dam burst.\n\nAnother wail erupted from Kelly, uninvited and involuntary, a primeval lamentation borne from nothingness. Just when she thought she couldn't fall any further.\n\nCaelin lowered his naked body onto hers, covering her as if a protective blanket, shielding her from the world. He held her securely as she shook, bawling.\n\nKelly squeezed her eyes shut tightly, obliterated with searing emotion. Instinctively drawing inward as a child curling into the protective fetal position, her bound arms came down, wrapped around Caelin's neck, pulling him further against her.\n\nTheir naked bodies pressed together, sharing every tremor in unison as Kelly sobbed. They melded, two becoming one. Kelly's grief poured out of her like an unleashed waterfall, roaring and demolishing everything in its path with awesome power.\n\nOnce again, Caelin just held her, motionless except the smallest stroke of his thumb against her again tear-covered cheek.\n\nMinutes passed. More. Kelly lost a sense of time, crying until no more tears came. Her chest hurt. Ached. The lump in her throat made swallowing and even breathing difficult.\n\nBut instead of that fucking numbness returning, all throughout Kelly was aware of Caelin pressed upon on her. Holding her tightly. Skin on skin, chest to chest. Heartbeat to heartbeat. It was calming. Reassuring.\n\nSlowly, Kelly traveled through her grief, a new and different type of journey. And Caelin just held her, his forehead on hers.\n\nEventually, Kelly's breathing slowed. Her emotions began to settle. Her spirit quieted just the tiniest bit, resting into a peaceful dark emptiness.\n\nThey lay together in silence. Then Caelin raised his head. Kelly opened her eyes to find him intently looking at her again with those intense eyes.\n\nCaelin reached into his nearby pants pocket crumpled on the edge of the bed and withdrew a small box. Opening it with one hand, he pulled out a strip of thick, ornate black material.\n\n\"You're ready for this, pet. This is for you. You are to wear this for me, and only me.\"\n\nHe brought it to her throat, and fastened it so it was just right as a choker necklace, secure but not tight. Caelin looked at her throat thoughtfully, tracing the necklace with his fingertips, then took her cheek in his hand again and looked into her eyes with a smile.\n\nKelly remained quiet, looking up at him. Then Caelin took her bound arms from behind his head and pushed them up above her head, tying the silk scarf securely to the headboard. He ran his palms down the exposed underside of her arms, raising goosebumps on her flesh.\n\nAnd Caelin began kissing her body again, tiny and delicate, slowly roaming her figure. Admiring. Tending. No teasing of any kind, he remained in constant contact with her, his strong hands firmly holding her body tight. \n\nNot teasing. Soothing.\n\nThe message was crystal clear, even though unspoken. \n\nYour body is claimed. Your soul is claimed. You belong. You are safe, bound, and protected. I know your every need, and you shall not want for anything.\n\nFeeling bound, Kelly felt secure. Safe. It was liberating. Freeing. She could let go, knowing he was there.\n\nAll the massive crap she had been carrying for years, all those troubles and worries\u2014Caelin was offering to take it all. That wasn't for her to worry about anymore. There was only one thing she had to do. It wasn't submission. It was something else.\n\nSurrender.\n\nAnd Kelly let go. She gave up. Gave up the pain. The burdens. All pretense of control. \n\nKelly unclenched her fists that had been unconsciously balled up for, what, an hour? Had it been her entire adulthood? The guilt might take some time to go away, but Kelly could feel some weight lifting.\n\nWith every kiss, Caelin replaced pain with love. Anguish with peace. Flowing over her, bit by bit he filled her emptiness. The numbing ache in her heart gradually dissolved, tension dissipating.\n\nMoving up on top of her again, Caelin took her head in his hands and kissed Kelly deeply. Her lips willingly parted, inviting him to her. He kissed her and kissed her, connecting directly with her inner spirit.\n\nSomething else crept into the emptiness.\n\nDesire.\n\nKelly became conscious of his chest pressing against her bare breasts. His masculine body covering hers. Her femininity responded naturally, heating her belly. Kelly squirmed ever so slightly just to feel his body rub on hers, stoking the fire inside her.\n\nBeing bound and captive was now making her wet. Kelly instinctively opened her legs for Caelin, drawing her heels up his calves. God, rubbing against him felt so good right now. It was such a welcome change from the fucking pain. Having him on top of her felt so natural. It just felt... right.\n\nShe could feel his body respond to her as well, his cock growing and hardening against her pelvis. Her desire was his desire. Their kisses grew more passionate. Deeper. Hotter. She needed something other than the pain. She needed to feel. She needed him.\n\nBetween kisses, she broke her lips away, her breath warm and labored, just long enough to whisper\u2014\"please.\"\n\n\"Please.\"\n\nSecurely bound, she was splayed open, her body willingly parting for him. Like a flower, she opened invitingly for him. Still kissing her, Caelin reached down and guided his hardened cock to her sex, moistening the tip in her outer folds, then resting it against her vaginal opening.\n\nKelly now yearned for him, and Caelin still did not tease. He gently pushed inside her, his cock head pushing apart her pussy lips and sliding full length inside her, filling her emptiness, both physical and metaphorical.\n\nThey both simultaneously groaned into each other, sharing a passionate kiss, tongues swirling. Kelly pushed her hips up into him, wanting all of him inside her. Lines blurred of where she ended and he began. They melded into one as lovers, fusing together in naked body and soul.\n\nMoving together, Caelin and Kelly ground against each other, making slow, deep, passionate love. It was ecstasy, as if the first time. This was where she belonged. He was right where he belonged. And she knew beyond a doubt she belonged to him. She was owned.\n\nAs if reading her thoughts, his hand came up to her throat as he moved inside of her, resting on her newly gifted necklace. He rested his hand over the necklace as he took her, a reminder of his possession, as well as his accepted responsibility.\n\nKelly drew her knees up, repositioning her pelvis and dragging her heels up the back of his legs, feeling him shift inside her and drive even deeper.\n\nCaelin slowly, rhythmically, rocked his body against her. It was more than just sexual. It was spiritual. \n\nKelly didn't know how long it lasted. Only that she was enjoying every second, like it would never end. This was exactly where she wanted to be, the rest of her life. She could feel every ridge and contour of his cock as he slid inside her, her pussy stretched and enveloping him.\n\nAfter such an emotional night, she likely wouldn't be able to come, but was savoring every second, and wanted his seed.\n\n\"Baby,\" she gasped, in between kisses, \"please come for me.\n\nPlease come inside me, Sir.\n\nPlease.\n\nOh, please.\"\n\nCaelin continued to rock inside her, making love to her steadily and passionately, her body undulating with his every thrust. Kelly opened her eyes to see him looking down at her with conviction and intensity.\n\nShe felt his hand on her throat. Owning. Claiming.\n\nShe felt him drive inside her, over and over, and thrust her hips upwards in time to meet him.\n\nShe looked deep into his hazel brown eyes.\n\nShe felt the easing ache alleviating inside her heart. The pain, the despair, was mixing with the desire, the passion. The numbing emptiness was being filled. By him. By the two of them.\n\nAnd at that moment, she unavoidably, starkly, realized something she had been denying for so long.\n\nShe loved him.\n\nAdmired him. Wanted him. Wanted only him. Kelly loved this man that was deep inside her, taking her pain and offering her endless love and protection. She arched her back, pressing her sweat-covered breasts into him, coaxing him. For the last time, looking straight in his eyes,\n\n\"Please.\"\n\nCaelin's grip tightened on her throat. His jaw clenched. Kelly watched in wonderment as she beheld his own pleasure peak. Watched his own climax arrive, claiming his body and overtake him. She watched his face in complete rapture, studying his every feature as his face scrunched up in ecstasy, knowing that every bit of his pleasure was coming from her, and from the two of them together. Just that knowledge alone, that she was completely pleasuring this man, was a total turn-on and satisfying in a way defying description.\n\nKelly felt him drive deep inside her pussy, pushing his pelvis hard into hers, his whole body tensing up tightly. Staring into his strong eyes, she felt his cock swell, then twitch inside her, releasing load after load of his cum into her womb as he groaned with gratification. With the smallest of motions, Caelin rocked his pelvis against her, sending small pulsing sensations onto her clitoris.\n\nKelly matched his undulations, grinding back against him, squeezing his penis inside of her, milking his cum out of his beautiful cock. Over, and over, she ground against him as he rocked against her, wanting every drop of his cum inside of her. Kelly's chest heaved with deep, labored breaths, her full soft tits pressing and rubbing against Caelin's chest. She felt his stomach against hers, a light film of sweat between them.\n\nAs Caelin's orgasm subsided, the two of them panting against each other, he kissed her again, deep and passionately, their tongues swirling together. Caelin's goatee gently tickled her chin.\n\nShe could feel his body unclench. As his muscles began to relax, his body weight began to rest more and more on her, covering her securely like an extra warm, heavy blanket. Caelin rested on his elbows as he kissed her over and over, his cock still deep inside Kelly's pussy. \n\nCaelin reached up and untied Kelly's bonds.\n\nEnraptured with his kisses, Kelly's arms came down and wrapped around Caelin, the two of them writhing against each other, passionately embracing in love.\n\nAfter some time, Caelin's cock slid out of Kelly, releasing a copious flow of cum with it. Kelly didn't mind, but Caelin smiled and rolled to his back, pulling Kelly to his side so they both could be comfortable. \n\nKelly rested her head on his shoulder and stroked his chest hair, letting her red tresses flow onto his arm and the pillow behind her.\n\nFor the first time in a long time, the demons were silent inside her. It was a different and almost unusual feeling. Kelly's spirit, still all jumbled up, at last felt like there might be peace that could be reached. She sighed, relaxing, releasing tension, and snuggled further into him, feeling their naked bodies against each other, her bare breasts still pressing into him, knowing he liked that. She brought her top knee up to rub against him and rest on his leg, and sighed contentedly again.\n\nThis was truly where she belonged. And to whom she belonged. There was no doubt in her mind. Kelly lay silent and docile.\n\nQuietly, ever so quietly, not wanting him to hear her, she half mouthed, half whispered into his chest,\n\n\"I love you\"\n\nAuthor's note: Stay tuned for more story of Kelly and Caelin. I do appreciate every comment and rating below. No login required to rate or comment! "
    ],
    "authorname": "TheInnerBeast",
    "tags": [
        "redhead",
        "cabin",
        "domination",
        "bondage",
        "tie up",
        "trauma",
        "secrets",
        "submission",
        "choker necklace",
        "collar"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/awakening-the-beast-pt-07-veritas"
}
{
    "title": "Changes Ch. 11",
    "pages": [
        "Here you go. The final chapter of Changes. It's a long one. Some parts are detailed and I've hurried through some parts. I may take up side plots of this story as a storyline in what I do next. I don't think I'm ready to let go of Vanessa and Heather yet! \n\nThank you for sticking with this for more than 13 months now! I appreciate all your comments and believe me when I say I would not have written this if it wasn't for your encouragement. \n\nI hope you enjoy the last chapter. A lot of love went into the making of this. \n\n***** \n\nHeather paced up and down her room. It was late in the night, but sleep was the last thing on her mind. Truth was, she couldn't wait for the morning. \"6 hours till Vanessa is here,\" she thought. She didn't know if she was more excited or anxious.  \n\nShe thought of Jules. Oh how she missed her, especially bed time. Reading to her had become a part of Heather's routine. She'd left a note for Jules saying she needed to go away for a little time and she promised she'd be back soon. She'd also told her to be good and take care of her mum while she was away. Heather had left her number and asked Jules to call her any time if she wanted to talk. Had Vanessa given Jules the note? She must have. But Jules never called. \n\nThe sadness in the pit of her stomach had been a constant for Heather these past few weeks. She'd spoken to her parents and her sister about everything and they'd been supportive. She hadn't expected any different. \n\n\"We don't care who you love honey. As long as you're happy,\" her mum had said, hugging her. \"Is that why you came by suddenly? You surely couldn't have thought we'd have a problem with you having a girlfriend!\" \n\n\"No mum. I didn't think you guys would have a problem,\" Heather said, helping her mum shell peas. \n\n\"Good. There's always room in my heart and in my house for anyone you love.\" \n\n\"What about their family?\" Heather asked, sighing. \n\n\"What do you mean?\" \n\n\"Vanessa has a daughter. She's 5 and she's the best,\" Heather said softly, smiling despite herself. How many times had Jules said that? \"You're the best,\" she'd whisper, her nose scrunched in a smile. \n\n\"How lovely! Trace will have a cousin!\" \n\nHeather rolled her eyes at her mum. \"It's not that simple.\" \n\n\"Why?\" \n\n\"I'm not, I don't know. I don't think I'm ready,\" Heather said with a frown, munching on some raw peas. \n\n\"You think Jen was ready when she had Trace? You think I was ready when I had Jen and then you?\" her mum asked incredulously. \n\n\"Mum, but I can't be a mum. Or a mum figure,\" Heather grumbled. \"I can barely take care of myself.\" \n\n\"Well, you are eating raw peas,\" her mum teased. \n\n\"You know I like the sweet, small ones!\" \n\nHeather's mum looked at her lovingly. \"I know, Heath. You've always picked the sweet, small ones out of the bowl.\" \n\nHeather grinned, going back to shelling peas. \n\n\"What's her name?\" her mum asked. \n\n\"Whose name?\" \n\n\"Vanessa's daughter's name.\" \n\n\"Jules,\" Heather said, smiling. \n\nHer mum smiled, \"Just saying her name puts a smile on your face.\" \n\n\"She's really precious. I mean Trace is my niece and I wish I could spend more time with her and I curse Jen all the time for living on the other side of the country. But Jules,\" Heather smiled, \"She's smart and kind and so sensitive to what other people need. It's difficult to believe she's just 5.\" \n\n\"And Vanessa's ex-husband, is he around much?\" \n\n\"Oh yes, she's with him every other weekend. He's always around. They have a very healthy relationship and you can tell they still care about each other.\" \n\nHeather's mum nodded before continuing. \"Jules has a mum. And she has a dad. She doesn't need another mum!\" \n\nHeather sighed. \"I don't know mum,\" she said softly. \"What if we don't work out? I'll lose them both. And Jules. It won't be fair on her.\" Heather said shaking her head, tears threatening again. \n\n\"Oh Heather. Have you talked to Vanessa about this?\" \n\n\"No. I need time to figure it out first.\" \n\nHeather's mum sighed. \"It's ok, take some time. But please talk to her. Nothing good will come of hiding away in your room all day,\" she added, walking away. \n\nHeather nodded. \"Wait, where you going? Who's going to shell the rest of the peas?\" Heather yelled after her mother. \n\n\"Now that you're here, might as well be of some help!\" her mother called back teasingly as Heather grumbled. \"And for God's sake, clean your room!\" \n\n\"I'm gonna eat them all,\" she said, moodily, going back to shelling peas. \n\n- \n\nHer mum had been right. She needed to talk to Vanessa. She'd pretty much scampered home after her talk with Vanessa. And the next day she'd driven to her parents' home right after work. She'd called Vanessa from the car and told her she needed some time and that she'd left a note for Jules on Vanessa's desk. That's it. That's all she'd said and now it was 2 weeks later. Had she ruined this? Had she waited too long? Oh god, just the thought made her sick. \n\nHow had this happened? She thought back to the day they'd gone to Valerie's house. The day everything changed. \n\n- \n\n\"Heather,\" Vanessa whispered. \"Wake up, love.\" \n\nHeather stirred, rolling onto her back. Her bare breasts coming into view. \n\nVanessa moaned and cupped one in her hand. Her thumb flicked across the nipple, drawing it to a puckered peak. She moved lower and sucked the other one into her mouth. \n\nHeather moaned in her sleep, her hand coming to rest on Vanessa's head. Vanessa moved her other hand down Heather's body, cupping her mound before running a finger along her slit and dipping it into her wetness. \n\nHeather moaned sleepily, opening her eyes and turning towards Vanessa for a kiss. \"You've got to stop waking me up like this,\" she mumbled against Vanessa's lips. \n\n\"You don't like it?\" Vanessa asked, sinking her fingers in deeper into Heather. \n\n\"Mph,\" Heather grunted. \"I like it too much,\" she whispered. \"Could get used to this.\" \n\n\"Good,\" Vanessa whispered, \"I love that you're so wet early in the morning.\" \n\nHeather hissed with pleasure as another finger joined the one already inside her. \"Yes,\" she moaned, encouraging Vanessa. \n\nVanessa wiggled her fingers before moving deeper. \n\n\"Ungh god!\" Heather exclaimed, her hips rising up. \n\n\"Too much?\" \n\n\"No no, more,\" Heather panted, seeking more friction. \n\nVanessa kissed her, her soaked fingers scissoring in and out of Heather's wet pussy. \n\n\"Oh god, right there,\" Heather grunted, trying to keep her voice down. Her fingers found her clit and rubbed furiously as she found Vanessa's lips again. \n\n\"Mmm,\" Vanessa mumbled into the kiss. \"Yes love, cum for me.\" \n\n\"Oh Vanessa,\" Heather whispered. \"Yes, yes oh god!\" \n\n\"I love you baby,\" Vanessa whispered. \"That's it, let go, I know you're so close.\" \n\n\"Ungh my...oh yes, just like...ohhhhh!\" Heather almost screamed, forgetting about being quiet as she felt the oncoming wave crash into her. \n\n\"Oh Heather! Shhh!\" Vanessa exclaimed before claiming her lips. \n\n\"Shit! Shit, I was too loud wasn't I? Heather asked, hurriedly sitting up, still panting. \n\nThey both looked at the door expecting Jules to knock any second. But when a minute passed and no knock came, Heather relaxed, a giggle escaping her. \n\n\"Sorry,\" she mumbled, blushing. \n\nVanessa chuckled. \"We've already used the 'you stubbed a toe' and 'there was a bumblebee in the room' story,\" she said, grinning. \"Maybe we need a couple of more stories ready, eh?\" \n\n\"Uhh.\" Heather groaned. \"She was so disappointed that I got scared of a bee,\" she said shaking her head. \n\n\"Oh I should have told her you killed the bee,\" Vanessa teased, chuckling at Heather's mortified expression. \n\n\"I can't believe you have such evil thoughts,\" she said, feigning shock. \"Such a pretty face,\" she sighed, \"So much evil,\" she said squealing as Vanessa pounced on her to tickle her. \n\nSeconds later they scrambled to put on their clothes knowing Jules was on her way. \n\n\"Was it another bumblebee?\" They heard her ask as she made her way to their door. \n\nVanessa opened the door before she could knock and scooped an unsuspecting Jules up in her arms making her squeal too. \"Mum!\" \n\n\"No bumblebee,\" Vanessa laughed. \"Tickling match!\" she said laughing before laying Jules on the bed and attacking her. \n\nJules squealed as Heather joined in. \"Stop! You're ganging up against me! Ahhhhhhhh!\" \n\nAfter a lot of squealing and flailing limbs, they collapsed on the bed, laughing and panting. \n\n\"Oh come on Jules, don't be a grump.\" \n\n\"You ganged up against a 5 year old,\" Jules mumbled. \"Mum! You're my mother! You're supposed to be on my side!\" \n\nVanessa grinned and whispered something in Jules' ear and the next second they'd both pounced on Heather who froze for a second then screamed bloody murder. Jules stopped and covered her ears in shock, a look of terror on her face. Vanessa rolled on the bed laughing while Heather continued to scream for a few more seconds before she realized that the attack had stopped. \n\nShe opened her eyes to see a wide eyed Jules squatting with her ears covered and Vanessa in splits. \n\n\"You're so loud!\" Jules whispered, still covering her ears, still in shock. \n\nEmbarrassed, Heather looked at Vanessa who was still laughing. \n\n\"Sorry,\" she mumbled sitting up. \n\n\"Mum, why are you laughing?\" Jules asked, now more concerned than shocked. \n\n\"Oh... oh honey. I'm sorry that scared you, c'mere,\" she said hugging Jules, still laughing in spurts. \n\nOnce she'd calmed down, Jules looked at Heather who looked back at her apologetically. \"It's ok Heather,\" Jules said moving to hug her. \"I know we startled you.\" \n\nHeather nodded, hugging Jules back. \n\n\"But you should try not to be so loud! You'll hurt your throat.\" \n\n\"And my ears\" Vanessa mumbled playfully which earned her a stinky face from Jules and a glare from Heather. \n\n\"All right, all right. You lot cuddle away. I'm starting breakfast,\" she huffed before planting a kiss on each of their foreheads and making her way down to the kitchen. \n\n- \n\n\"Eat up!\" Vanessa chimed, loading their plates with sausages and eggs when Heather came down the stairs with Jules on piggyback. \n\n\"Yummy!\" Jules exclaimed, digging in. \"Can I have some Nutella?\" \n\nHeather made a face at Jules. \"Nutella with eggs and sausages?\" \n\n\"I like it with everything. But best with waffles,\" she said, grinning at Heather, who high fived her. \n\nVanessa smiled, \"Aunty V's making her treacle tart today. So maybe no Nutella?\" \n\n\"Really? I'm having treacle tart for lunch!\" she exclaimed, punching the air with her fork. \n\nVanessa laughed. \"I know you are.\" \n\n\"Heather you should come with us! Aunty V's treacle tart is the best!\" \n\n\"Heather is coming along, hon.\" \n\n\"Yeay! You'll have the best time Heather! Aunty V is the best!\" \n\n\"I can't wait!\" Heather grinned. \n\n- \n\nHeather was feeling nervous as they got off the car in the driveway of a lovely house. It had a very well maintained old Victorian fa\u00e7ade. \n\n\"Wow,\" she whispered under her breath. \"This is where you grew up?\" \n\n\"Mhm.\" Vanessa took Heather's hand in hers. \"This is my first home.\" \n\n\"You were born here?\" \n\nVanessa nodded. \n\n\"That's where mum and Auntie V used to hide when they did something bad and Gramps always found them!\" Jules chimed, pointing to a small shed while skipping up the porch steps. \n\n\"That shed was built while I was in Italy, honey,\" Vanessa laughed. \"Where do you hear these stories?\" \n\n\"Auntie V tells the best stories,\" Jules said defiantly. She then looked at Heather guiltily. \"But Heather tells the best bedtime stories,\" she added shyly making Heather melt inside. \n\nThe main door opened and a tall, graceful woman stepped out. She had striking features, high cheek bones, a soft but defined jaw. The next thing Heather noticed were her eyes, dark, blazing with intensity, a spitting image of her sister's. She saw Jules, and Heather, from feet away could see the spark of joy in them. \n\n\"There's my pumpkin pie!\" she exclaimed with childlike glee, lifting Jules up, before putting her back down with a grimace. \"You're getting too heavy for me to do that,\" she said pulling her into a hug. \n\n\"I'm healthy weight,\" Jules said matter of factly. \n\nValerie laughed an all too familiar, throaty laugh. \"Of course you are pumpkin. It's my old bones, getting a bit rusty,\" she said turning her attention to her sister and Heather who were still holding hands. \n\nValerie's gaze lingered on their interlocked fingers for just a second before she beamed at Heather. \"You look lovely, Heather,\" she said warmly, embracing her. \"C'mon in!\" \n\nHeather smiled before following Jules and Valerie into the house, Vanessa by her side. She noticed Valerie was barefeet, comfortably moving around. There was no pretense, she was what she was. Just like Vanessa had told her, Heather thought smiling. \n\nThe house was lovely! Huge glass windows allowed oodles of sunlight which maybe explained the thriving indoor plants. Framed photographs lined every inch of the mantelpiece, some of them old, black and white. Heather looked around as Vanessa dropped down on the sofa, making herself comfortable. Jules had pranced into the kitchen behind Valerie and they soon emerged with a pitcher of pink lemonade and glasses. \n\n\"Your place is lovely, Valerie,\" Heather said, trying to get a look at some of the photographs hidden behind the more recent frames. \n\n\"Thanks dear,\" she said warmly, joining Heather. \"It's still pretty much the same as it was when we moved in,\" she said, looking over at Vanessa. \n\n\"Wow,\" Heather said. \n\n\"Yep,\" Valerie nodded. \"No major remodel in what, 43 years now.\" \n\n\"That table,\" Vanessa pointed to the kitchen. \"Fell off it and split my head open when I was two,\" Vanessa grinned. \n\n\"Oh,\" Heather said, unsure of where Vanessa was going with this. \n\n\"Ran into it and broke an arm when I was 5,\" Vanessa continued. \"At age 7, I fell off it again and got a nasty bump on my head,\" she carried on much to Heather's amusement. \"I've run into it, stubbed my toes, hurt myself on countless occasions. I even went into false labour while sitting at it,\" Vanessa said, exasperated. \n\nHeather laughed as Valerie shook her head. \n\n\"It had to get back at you in some way, Nessy,\" Valerie said, grinning. \n\n\"Oh come on Val! I was just a couple of months old!\" \n\n\"What did she do?\" Heather asked, thoroughly enjoying the story as Jules who'd obviously heard the story before giggled. \n\n\"Mum did a poo on it,\" she said looking at her mum, almost embarrassed for her. \n\n\"Who puts an infant on a dining table?\" Vanessa asked, obviously exasperated as Heather couldn't help but laugh. \n\n\"Gramps was a crazy man,\" she said to Jules, rolling her eyes. \n\n\"I know. Aunty V said that's where you get it from,\" Jules said, again looking at her mum apologetically. Like she understood that there was nothing her mum could do about it. \n\n\"Val! I swear to God!\" Vanessa almost roared as Valerie burst out laughing. \n\n\"It's true though,\" she said in her defense. \"You're cuckoo. Just like Dad was.\" She said, ducking as Vanessa hurled a pillow at her. \n\n\"Alright Nessy!\" she added sternly, before softening. \"We'll stick to the good stories for today then, eh? For Heather's benefit.\" \n\n- \n\nHeather couldn't get over the fact that Vanessa was 'Nessy'. There was so much about her that she didn't know! Nessy, she thought. That's absolutely adorable. \n\nLunch was so yum. Jules had only the treacle tart as she'd proclaimed she would. They settled into an easy chat and Heather got to hear some stories of Vanessa as a kid. Valerie had a way of getting under Vanessa's skin. It was so amusing to see the always in control, rational, practical Vanessa lose her cool with her older sister. \n\n\"I was 8 when Nessy was born,\" Valerie said as Heather listened intently. Vanessa distractedly ran a finger up and down Heather's arm. They'd just finished clearing up and Jules had run off to her room for something. The sun was streaming through the windows at the back of the house and there was a languid calm in the air. A soft breeze made the leaves of the many indoor plants rustle and Heather couldn't help but sigh and sink deeper into the comfy couch, almost leaning against Vanessa. \n\nValerie too tucked her feet under her, visibly relaxing into her seat. She continued with her story. \"Mum was a livewire,\" she said grinning. \"When she was well, she couldn't sit still for 5 minutes. Always on her feet.\" \n\n\"Yea, that's pretty much what I remember of her before she was sick.\" Vanessa said softly. There was no pain in her voice, but a hint of loss. Heather instinctively squeezed her hand, hoping to offer some comfort. They exchanges a glance and Vanessa smiled softly. \n\n\"She passed quickly after she fell sick. \"Nessy was 7, I was 15.\" \n\nVanessa nodded. \"Since then Val's been my mum. And she's been my dad too for the last 15 years,\" she said. Again, there was no sadness in what Vanessa said, but Heather felt an enormous outpouring of love for the two sisters. \n\nValerie grinned before mischievously adding, \"And I still get cushions thrown at me.\" \n\n\"Oh Val, you know I love ya,\" Vanessa grinned. \"Please just keep my daughter away from the rest of the treacle tart,\" she grumbled. \n\nValerie laughed but noticed immediately that Heather looked sad. She smiled, \"We had a good childhood, Heather,\" she said reassuringly. \"Dad was lovely, attentive, spoilt us rotten and helped with homework.\" \n\n\"Drove us to football practice,\" Vanessa chimed. \n\n\"Attended every recital,\" Valerie added, smiling. \n\nSoon they were laughing at happy stories of family vacations and first dates and sneaking out of the house post curfew. \n\n\"Val, please none of these stories are to be repeated to Jules. She's just 5 for heaven's sake!\" \n\nValerie grinned. \"I've already told her about the time dad caught you smoking a spliff.\" \n\nVanessa jerked forward, \"You what?\" she exclaimed as Valerie let out a chuckle. \n\n\"Quit!\" Vanessa said, harshly, apparently tired of the teasing. \n\n\"Your dad caught you smoking pot?\" Heather asked, laughing. \n\n\"Yea, I had some rebellious years,\" Vanessa shrugged. \n\n\"I bet Jules will too,\" Valerie teased, making Vanessa groan. \n\nThe rest of the afternoon passed quickly. Heather got a tour of the house courtesy Valerie and Jules. She spent time with Jules in her room which used to be Vanessa's room. It still had some posters from back in the day. \n\nAt some point Heather found herself alone with Valerie. They were sitting in comfortable silence when Valerie said, \"Jules is very fond of you.\" \n\nHeather smiled. \"I love her. She's such a special child.\" \n\nValerie nodded. \"She sure is.\" \n\n\"Heather, I...\" Valerie paused and smiled. \"I know you care a lot about Nessy. And Jules. I can see it.\" \n\nHeather nodded, suddenly apprehensive about where this was going. \n\n\"I've honestly not seen Nessy this happy in a long time,\" she added. \"I mean, don't get me wrong. Joe is great and they were great together. I'm glad they decided to separate. It's what they needed to do.\" Valerie sighed. \"But, it was hard on Jules. She was just 3 and it was hard on her. It's difficult for a child, no matter how well the parents handle it.\" \n\nHeather nodded, not sure what to say. \n\n\"Vanessa obviously knows what's good for Jules,\" Valerie continued. It was odd hearing her address her sister by her full name. \"And as I said, I can see that you care for her.\" \n\nAgain Heather nodded. \"Vanessa is a great mum. \" \n\n\"Yes, she is,\" Vanessa agreed. \"I can also see how much Jules likes you. She can't stop talking about bedtime with Heather and how you helped her with her craft project and made Nutella waffles for her.\" \n\nHeather grinned, \"Vanessa wasn't happy with how much Nutella we polished off that evening.\" ",
        "Valerie chuckled. \"So you know she's attached to you,\" she said softly. \n\nHeather looked at her silently, now making sense of where this was going. \n\n\"I know Nessy. If she wasn't sure about you, she would not let Jules get attached to you.\" Valerie looked at Heather, her eyes soft. \"Heather I don't want to make you uncomfortable. I'm just looking out for my family.\" \n\nHeather nodded, averting her gaze, dread permeating every inch of her being. \n\n\"I hope you've thought about what it means to be in a relationship with my sister. It means you're not only an integral part of her life, but Jules' life too.\" She was quiet for a moment before continuing. \"I hope you have considered the ramification of this going south, beyond the obvious heartbreak.\" \n\nHeather looked up, her eyes betraying the hurt, the doubt that she felt at the moment. \n\n\"There's a 5 year old child who will be directly impacted by every personal decision you and Nessy take. I hope you've considered that.\" \n\nHeather's heart was thundering against her ribcage. Her mouth was dry and she couldn't seem to string together two coherent thoughts. \n\n\"If you're not sure, please think about it before forging a deeper bond with Jules. I can't stand to see her hurt. Not for a second.\" \n\nShe nodded, her brows furrowed, her heart oddly burdened with guilt. \n\n- \n\nHeather had settled on the couch after endless pacing. Even today she knew that Valerie hadn't said anything untoward. It was a legitimate concern. One that had escaped Heather. They had driven back home in near silence. Jules was exhausted and Heather could not shake off the feeling of impending doom. \n\n\"Heather?\" Vanessa asked, her brow furrowed. \"What's on your mind?\" \n\nHeather shook her head. \n\n\"Did Val say something?\" \n\n\"No,\" Heather cleared her throat. \"It's nothing.\" \n\n\"Hon, talk to me.\" \n\n\"No really, it's nothing.\" \n\nVanessa sighed. Then with a grin she looked at Heather. \"Ice cream always cheers Jules up,\" she said softly. \n\nHeather looked at her, her heart brimming. \"I love you. I love you so much,\" she said, tears threatening. \n\nVanessa looked back to check if Jules was awake. She was dozing. \n\n\"Honey,\" she said softly. \"What's bothering you?\" \n\n\"Nothing.\" \n\n\"Once we get home I'm fixing you a nice bath. We can talk after.\" \n\nHeather nodded. Maybe that's what she needed. \n\nOnce they reached Vanessa's home Heather put Jules to bed and gave her a big hug. \"Gnite Heather,\" Jules mumbled sleepily. \"No bedtime story today,\" she yawned. \n\n\"I know love. You sleep well.\" \n\n\"You too,\" she said. \n\n\"Love you, little one,\" she whispered running a hand over Jules' head. \n\nShe sat next to Jules watching her sleep, unable to help the tears rolling down her cheek. She sat there for a long time and when she looked up she saw Vanessa's silhouette at the door. Quietly Heather made her way to Vanessa and stood in front of her. She'd been crying too. Vanessa drew Heather to her and softly kissed her. Heather tasted her tears and felt doubly guilty. She held Vanessa tight. \n\n\"I'm sorry,\" she whispered. \n\n\"For what, hon?\" \n\n\"For not talking to you.\" \n\n\"It's ok, I know you will, when you're ready.\" \n\nHeather nodded, \"I will.\" \n\n\"C'mon, let's fix you that bath,\" Vanessa said softly, closing Jules's door and leading Heather to her room. \n\n\"Will you join me?\" Heather asked. \"Just want to be close to you.\" \n\n\"Yes,\" Vanessa whispered, kissing her. \n\n- \n\nThey lay side by side in the tub, their legs intertwined, Vanessa's hand casually resting on Heather's thigh. They occasionally kissed or snuggled closer, but for the most part they were lost in their own thoughts. \n\nHeather tried to rid her mind of what Valerie had said and for the most part she could. But every few minutes this feeling of dread would take her over. \n\n\"Hon,\" Vanessa whispered. \n\n\"Hmm? Heather turned towards her. \n\n\"You keep tensing up,\" she said, caressing Heather's thigh. \n\nHeather sighed. \"I know,' she said resting her head against Vanessa's shoulder. \"Can we go to bed?\" \n\n\"Of course. Let's wash up.\" \n\nVanessa drained the tub and turned on the shower. \"Let me,\" she said, washing Heather down. Her hands ran over her curves, washing off the soap, her eyes locked on Heather's. Wordlessly she wrapped a fluffy white towel around Heather and one around herself before leading Heather to bed. She kissed Heather and lay down facing her. \n\n\"I love you,\" Vanessa whispered. \n\n\"I love you too,\" Heather said, kissing Vanessa. Their breasts touched, making Heather moan. Vanessa kissed her back tenderly, her hand stroking Heather's hip. Vanessa's tongue traced her lower lip before dipping in, touching Heather's tongue, flaring a spark in her belly. Heather moaned again, her desire consuming her. \n\nOnce they broke the kiss, they looked into each other's eyes, conveying need and pleasure their roving hands brought. Heather's hand moved south, settling on Vanessa's mound, her eyes seeking permission. A sharp intake of breath and an imperceptible jerk of Vanessa's hips told her what she needed to know. She ran a finger along Vanessa's slit, the warm wetness making her hiss. \n\n\"Don't close your eyes,\" she whispered to Vanessa. \"Please.\" \n\nVanessa nodded, groaning at how good it felt to have Heather touch her this way. She moved her own hand to Heather's mound, drawing a whimper from her. \n\n\"I want to touch you too,\" Vanessa said softly. \n\n\"Please,\" Heather nodded moving her legs to accommodate Vanessa's fingers. \n\nThey moved against each other's fingers, their eyes locked together, their breasts touching. \n\nVanessa moaned, kissing Heather, her hips bucking wildly as she approached her orgasm. \"Oh honey,\" she whispered into the kiss. \"You're gonna make me cum,\" she moaned, tensing up and shuddering. Heather felt a surge of emotion. Vanessa's face scrunched up in pleasure, soft cries escaped her as she came, god she looked so beautiful. She wanted to remember this, this feeling of immense joy she got from making her feel good. \n\nVanessa opened her eyes, breathing hard, and gave Heather a soft smile before kissing her. Her fingers found their way back between Heather's legs and resumed the gentle circular motion she knew Heather loved. \n\nHeather moved against her fingers, her own fingers digging into Vanessa's hip. \"Ungh!\" she moaned as she felt herself move closer to the point of no return. \"Vanessa,\" she whispered as she sought out Vanessa's lips. She found them and latched on as her orgasm gently consumer her. It wasn't the most intense, but it took her breath away. \n\nShe looked at Vanessa and saw the fire in her eyes. \"I love you,\" she whispered, a little breathless, more from the feeling in her heart than from cumming. \n\nVanessa kissed her nose, \"I love you too,\" she said, pulling Heather close. \n\nThey lay there like that, Vanessa lazily tracing the length of Heather's side with her fingers, when Heather said, \"Nessy is such an adorable name.\" \n\nVanessa chuckled, \"Yea, she's always called me that. Actually, she's the only person that calls me that.\" \n\nHeather nodded. \n\n\"Heather?\" \n\n\"Hmm?\" \n\n\"Are you happy?\" \n\nHeather frowned, \"What do you mean?\" \n\nVanessa propped her head up on her hand. \"I mean, have you been happy these last few months?\" \n\n\"Yes, without a doubt,\" she said. \"You make me happy.\" \n\nVanessa nodded. \"Do you think something's missing?\" \n\n\"No,\" Heather replied. \"I don't think there is.\" Then after a moment she turned to Vanessa. \"Why, do you?\" she asked softly. \n\n\"Honey,\" she said tenderly, interlacing her fingers with Heather's. \"When you're around, I feel... whole. I feel complete.\" \n\nHeather smiled, snuggling deeper into Vanessa's shoulder. \"I'm going to hold you really tight, tonight,\" she said, her voice muffled. \n\nVanessa chuckled. \"As long as I can breathe, I won't complain.\" \n\nHeather stayed awake long after Vanessa had fallen asleep. She watched her, willing her steady breathing to lull her into a calm. \n\n- \n\nNext morning Heather woke up to find herself alone in Vanessa's bed. She sat up and checked the time. Almost 10! Vanessa must be ready to leave for work! She quickly put on some clothes and rushed down the stairs. \"Vanessa?\" \n\n\"In the kitchen!\" she heard Vanessa call. \n\n\"You didn't wake me,\" she said, entering the kitchen. \n\nVanessa smiled, \"You looked so peaceful, I thought I'd let you sleep.\" \n\n\"But you always wake me,\" Heather mumbled. \n\n\"I know,\" Vanessa said kissing her. \"But I had to get Jules' bag ready. She's spending the night at Joe's tonight. And I forgot to do it last night.\" \n\n\"Oh, how come she's going there on a Monday night?\" \n\n\"Joe's not in town next weekend. So he wanted to spend some time with her.\" \n\nHeather nodded. \"How does it work? If he is away on his weekend, does he take her the next weekend?\" \n\n\"There's no fixed schedule,\" Vanessa said. \"We figure it out as we go. Ideally he spends every other weekend with her and picks her up from school every day.\" \n\n\"He does? I didn't know that.\" \n\n\"How do you think she gets home? She's done with school around noon on most days.\" \n\n\"Oh! I... I guess I didn't think of that.\" \n\nVanessa grinned. \"You see, it's a well-oiled machine. We check in every day to ensure we've got it covered.\" \n\n\"So he takes her home and you pick her up from there?\" \n\n\"Yea, sometimes he brings her over once I'm home or drops her off at Val's.\" \n\nHeather frowned. How the hell had she missed this? Sure, she'd picked Jules up from school once but she just thought it was a one off. Normally Vanessa left work around 4 and Heather stayed in till 6 or 7. So she'd never really had to think about the careful coordination between Vanessa and Joe. \n\n\"Why the furrowed brow?\" Vanessa asked kissing her forehead. \n\nHeather shook her head. Everything Val had said the previous day coming back to her. \"If I don't hurry up, I'm going to be late for work!\" she said, grabbing the mug of coffee Vanessa had put in front of her. \n\n\"What about we stay in?\" Vanessa asked, stepping behind Heather and wrapping her arms around her waist. \n\n\"Vanessa!\" Heather exclaimed, turning around. \"I have work to do!\" \n\n\"Awww, c'mon,\" she said teasing her earlobe. \"You can get whatever it is you need to do done from here.\" \n\nHeather relented. Spending one on one time with Vanessa would maybe help her get her mind off things. They had breakfast, lounged around the house, chatting but Heather had this constant nagging feeling that something was not right. Vanessa of course realized. \n\n\"Wanna tell me what you're thinking?\" she asked casually, munching on some nuts. \n\nHeather didn't respond. \n\n\"Heather?\" \n\n\"Vanessa, I think,\" she shook her head. \"I think I have some thinking to do.\" \n\n\"About what, honey,\" she asked. \n\n\"About... us.\" \n\n\"What?\" Vanessa asked, taken aback. \n\nHeather looked down. \"I need to think.\" \n\n\"Heather,\" Vanessa said, panic in her voice. \"What... what is it?\" \n\n\"I need some time, Vanessa.\" \n\n\"But,\" Vanessa said forcing Heather to look at her. \"Time for what?\" \n\n\"I, I'm not sure. I don't think I can...\" \n\n\"I don't get it. You were fine before lunch yesterday. What happened? What did Val say?\" \n\nHeather shook her head. She suddenly desperately needed to get away. If she stayed, she wouldn't have the strength to do this later. She had to get away to think. To figure out what she had to do. But Vanessa was right. She had to give her an explanation. It wasn't fair to just run out. \n\n\"Why are you crying?\" Vanessa asked. \n\nHeather wiped a silent tear. \"I love you both so much,\" she said holding back a sob. \"Jules and you, you've become so so important to me,\" she said in a thick voice. \"I can't imagine my life without you.\" \n\n\"Then don't,\" Vanessa said softly. \"I don't know what Val said,\" \n\n\"No, Vanessa,\" Heather interrupted. \"She's lovely. Don't... don't you go blasting on her for this.\" \n\n\"But she said something and it's... it's made you all... all quiet and mopey. And you want to...think!\" Vanessa sad, her shoulders dropping. \n\n\"I need to. Please, Vanessa. It's not easy. But I need to.\" \n\n\"Last night you said you were happy. What happened?\" \n\n\"I know. I am. But there's other things... Please, I need you to understand.\" \n\nVanessa sighed. \"Ok,\" she said. \"If you, umm, if you can't talk to me about what you're feeling, then, I guess...\" \n\n\"I just, I need to take some time. Please,\" Heather said, welling up. \n\nVanessa nodded. \"I understand,\" she said softly. \n\n\"I'm sorry,\" Heather whispered, tears streaming down her face. Vanessa's dull eyes looked at her for a second before turning away. \n\n\"Can't you tell me what's bothering you?\" she asked, the effort it took to keep her voice under control very apparent to Heather. \n\nHeather shook her head and Vanessa stood up suddenly and swore, taking Heather by surprise. She looked at Vanessa's back, saw her take a couple of deep breaths before she turned around to face Heather. \n\n\"I'm sorry,\" she said and Heather could see her chin quiver for a second before she pulled herself together. \"I understand,\" she said softly. \"I really do.\" \n\nHeather nodded. \"Thank you,\" she whispered, wiping her eyes, her breaths coming in heaves. \n\nThey sat in silence for a couple of minutes when Vanessa looked at her, \"Heather,\" she whispered, \"C'mere,\" she said patting space next to her. \n\n\"No, Vanessa,\" Heather spluttered. \"I need to go,\" she said wiping her tears with her free hand, standing up. \n\n\"I won't stop you,\" she said, her voice controlled. \"I promised, some months back that I'd, I'd be patient. That I'd be ok if you changed your mind.\" She took a fortifying breath. \"I haven't forgotten,\" she said wiping a tear. \"Just know that I'm here. I'll be patient. Like I promised.\" \n\nHeather was silently sobbing. She hugged Vanessa, burying her head in her neck, breathing her in. Vanessa hugged her back. \n\n\"I'm sorry,\" Heather whispered. \"I just need some time.\" \n\nVanessa nodded, \"I love you,\" she whispered before Heather closed the gap between them and kissed her. It was a kiss that she hoped conveyed her love, her doubt and a promise, that she wasn't being selfish. \n\n\"I love you too,\" Heather said. \"I have to go now.\" \n\nShe had to take her purse and her laptop from Vanessa's room where she quickly packed a few important things. She turned to Vanessa, \"Bye,\" she whispered, unable to keep her tears in check. \n\nVanessa nodded. \"Wait, don't drive like this. Your eyes are almost swollen shut. I'll drive you.\" \n\nHeather shook her head. \"I'll take an Uber. Will pick up my car tomorrow.\" \n\n\"Ok,\" Vanessa said. \"Let me know you reached safe?\" \n\n\"Yes, I will.\" Heather held Vanessa's gaze for a second and it took her all the strength that she had to turn away and walk down the stairs. She looked back and saw Vanessa standing at the top of the stairs, hugging herself. Vanessa waved a brief goodbye before turning away and when her form disappeared, Heather walked out the door with a leaden heart. \n\n- \n\nHow her heart ached every time she thought of that image. Vanessa standing at the top of the stairs, putting on a brave face, turning away because it was too painful to watch Heather leave. She'd done that to her. Heather had done that. \n\nIt was time to make amends. Heather checked the time. Past 4 in the morning. Vanessa would be here soon. She lay down on the couch. Closing her eyes she tried to think of something besides the image that hadn't left her in the last 2 weeks. \n\n- \n\nThe next thing Heather knew was her phone ringing incessantly. She sat up, trying to locate it, half asleep. \"Why the fuck am I on the couch?\" she thought as she found her phone under a cushion. \n\n\"Hello,\" she said sleepily. \n\n\"Hey.\" \n\n\"Vanessa.\" \n\n\"Yea. I'm on your street. What number house is it?\" \n\nHeather jumped up. \n\n\"Oh you're here?\" \n\n\"Yes.\" \n\n\"Oh god what time is it?\" \n\n\"Past 8,\" Vanessa said, her voice betraying her nerves. \n\n\"Fuck, sorry,\" Heather said, running to her door. \"I'm coming out, hang on.\" \n\n\"Just tell me the house number, Heather.\" \n\n\"It's 232 A, she said squinting at how bright it was outside. I see your car. 3 houses down, on your right.\" \n\n\"Yes, I see you.\" \n\n\"You can park in the driveway, behind my car.\" \n\n\"Ok,\" Vanessa said hanging up. \n\nHeather stood on the porch steps, squinting, watching Vanessa park, her heart hammering. Vanessa turned off the ignition and took a second to collect herself before looking out the window at Heather. \n\nHeather caught her eye and they stayed like that for several seconds, gazes locked, 10 steps and the car window separating them. It seemed like it took forever but must have been only a few seconds before Heather took a step towards the car. This broke the spell and Vanessa opened the door and stepped out. \n\n\"Hi,\" she said almost shyly. \"You're barefeet.\" \n\nHeather looked down at her feet, surprised to see blades of grass sticking out between her toes. \"Oh,\" she said. \"I am.\" \n\nVanessa chuckled, \"Always a sleepyhead,\" she muttered. \n\nHeather looked up, not reacting to Vanessa's joke. \"You look... you look beautiful,\" she said softly and for a second she saw a flash of unmistakable pain and hurt and maybe even anger, before Vanessa smiled. \n\nSwallowing her guilt, Heather held out her hand and led Vanessa inside. \"Uhhh,\" she said, trying to fill the silence. \"Did you get traffic?\" \n\nVanessa shook her head. \n\n\"Ok, good,\" she said. \"Can I get you something? Coffee, water?\" \n\n\"Thanks, I'm good,\" Vanessa said, still standing by the door. \n\nThey stood awkwardly for a few seconds before Heather took a step closer and tentatively reached out to hug Vanessa. \n\nAgain Vanessa chuckled, \"It's ok. You can hug me. I won't bite.\" \n\nHeather wrapped her arms around Vanessa and as always, buried her face in her neck, breathing her in. She felt Vanessa's arms around her and she sighed. This was it. This is where she belonged. No two ways about it. She felt so much relief that she knew she'd start crying if she didn't put distance between them, so she hastily stepped away, avoiding Vanessa's eyes. She sat on the sofa and Vanessa sat down next to her. \n\nShe looked up and again, plain as day, she saw the hurt in Vanessa's eyes before Vanessa masked it with a smile. \n\n\"Will you just sit with me for a minute?\" \n\nVanessa nodded scooting closer to Heather and allowing her to rest her head on her shoulder. Heather sighed, interlacing her fingers with Vanessa's. They sat quietly and Heather had never been more comfortable in her whole life. She absentmindedly caressed Vanessa's hand with her thumb and heard her breath hitch before Vanessa pulled away. \n\nHeather looked at her questioningly for a second before her gaze softened. \n\n\"Vanessa, thank you for coming,\" she said, her voice breaking. \"I'm sorry, I'm so sorry for everything,\" she said as the tears came. \n\nVanessa looked at her kindly, shaking her head. \n\n\"No,\" Heather said thickly, \"I'm sorry for shutting you out. Mum was right, no good came of it.\" \n\n\"Heather it's ok,\" Vanessa said softly. \"You had...have doubts. It's understandable.\" \n\n\"Yes, and I, I didn't know how to talk to you. I didn't know!\" she sobbed. \n\nVanessa looked on, her gaze soft but made no attempt to physically console Heather. \n\n\"I should have tried,\" Heather murmured amidst tears. She looked up at Vanessa and reached forward to kiss her. \n\n\"Heather no,\" Vanessa said, jerking back. \n\nStunned, Heather backed away, \"Sorry,\" she said softly, standing up and pacing the living room. Fuck, she thought. She won't even kiss me. \n\nShe stood in front of Vanessa for a second before kneeling down, so that she was at eye level. Vanessa looked at her before turning away. \n\n\"Vanessa, I'm sorry I hurt you,\" she said, forcing Vanessa to look at her. \n\nVanessa shook her head, shutting her eyes. ",
        "\"Please, I know you're hurting. I can see it. I can see that you're angry.\" \n\nVanessa looked at Heather, her eyes blazing. \n\n\"I know I hurt you and I'm sorry. Please, just say something. Anything!\" \n\n\"I,\" Vanessa sighed. \"I'm not angry.\" \n\nHeather was getting very agitated at Vanessa's reticence. \"Vanessa! You're bottling it up. I need you to let it out!\" \n\nAgain all she got from Vanessa was a blazing look before she turned away. \n\n\"Can you just,\" Heather said loudly before taking a deep breath. \"Please, Vanessa, it's like you've shut down!\" \n\n\"What do you want me to say?\" Vanessa asked softly. \n\n\"Anything! Yell if you want. Tell me I'm a horrible person for what,\" \n\n\"Stop!\" Vanessa interrupted. \"Just stop, ok?\" \n\nHeather shut up, stunned. \n\nVanessa looked at her long before she shook her head, \"I'm sorry,\" she said, her shoulders slumping. \"I don't think I can do this.\" \n\n\"What?\" \n\n\"I can't. \n\nHeather was in a panic, \"Oh god, Vanessa. Please! Just, I...you can't?\" \n\nVanessa shook her head. \n\n\"But, I love you. And I can't imagine, please just,\" Heather moved forward to kiss Vanessa who held up her hand. In tears Heather asked, \"Why won't you kiss me?\" \n\n\"I can't, Heather.\" \n\n\"Why?\" Heather asked, exasperated. \n\n\"Because I can't!\" Vanessa yelled. She stood up. \"I can't okay? I can't be angry and hurt and and kiss you and be a friend at the same time! Okay?\" Vanessa said loudly. \"I know I promised that I'd try, but it's too much! I just fucking can't,\" Vanessa groaned, leaning her back against a wall. \n\nHeather looked up at her, confused. \"What?\" \n\n\"Oh Heather,\" Vanessa sighed. \n\n\"No, what did you promise you'd try?\" Heather asked, now standing up. \n\n\"To be your friend.\" \n\n\"But, I... but you're my girlfriend,\" Heather said, still trying to make sense of what was happening. \"Or are you saying that you want to break up?\" she whispered. \n\n\"I want to break up?\" Vanessa exclaimed. \"You're the one that left! You're the one that changed her mind!\" \n\n\"I... Oh my god Vanessa!\" Heather said taking a step towards her. Now this made sense. \"Vanessa, I didn't leave because I changed my mind!\" \n\n\"What?\" Vanessa asked, looking exhausted. \n\n\"Oh god, I can't believe,\" she sat down, holding her head in her hands. \"I can't believe I've been so stupid!\" \n\n\"Heather, I don't know what you're saying.\" She said defeatedly. \n\n\"Vanessa, I'm in love with you. I want to be with you forever!\" \n\n\"What? Then why the fuck did you leave?\" \n\nHeather shook her head, the sense of relief making it difficult to think. \"Jules, Valerie,\" Heather mumbled. \n\nVanessa sighed, \"Names don't really make much sense here.\" \n\n\"I didn't know if I could be a mum to Jules!\" Heather said before moving in and hugging Vanessa. \n\n\"What?\" Vanessa roared. \n\n\"I, Jules, I love her! So so much! And she is used to having me around. What if I can't be a mum?\" \n\n\"What the hell are you saying, Heather?\" Vanesa said, exasperated, putting distance between them. \n\nHeather sighed. \"Ok. Sorry. So that day after lunch Valerie said some things which got me thinking. I hadn't thought of the role I play in Jules's life. By being with you, I am also a part of her life. And I just thought about you and me and not her.\" \n\n\"But, you're so good with her,\" Vanessa said. \n\n\"Yes, the little things. But I don't think about how she's going to get to school, who is going to help her with homework and who is going to take her to the doctor.\" \n\n\"Joe and I have got that covered. And...\" Vanessa hesitated before continuing. \"And if you want to, you can always pitch in. But it's not something that is expected of you.\" \n\n\"Vanessa, it's not that simple. I can't just be around her and not be there like you are!' Heather exclaimed. \"I've been such a... I don't know. So useless. You do so much!\" \n\n\"Of course I do. I have been for 5 years now. I'm her mum!\" \n\n\"Yes, but what if I can't be a mum to her?\" \n\n\"Honey,\" Vanessa said, \"She already has a mum. You don't have to be a mum to her!\" \n\nHeather smiled. Vanessa called her honey. \"That's what my mum said,\" Heather whispered. \"Then what am I?\" \n\n\"You're, Heather!\" Vanessa said, pulling her close. \"You're her mum's... girlfriend,\" she said. \"And you spend time with her, help her with craft sometimes, read her bedtime stories every night, make her Nutella waffles and just make her happy.\" \n\nHeather grinned despite herself. \"Is that good enough?\" \n\n\"Honey, no one can do it better. She likes you. You think I would let someone practically live in my house if I was unsure about how they were with Jules?\" \n\nHeather looked at her bashfully. \n\n\"Jules is my life. She will always come first. Always. And I know you know that. And I know you will never expect anything different from me.\" \n\n\"Of course not,\" Heather said. \"She has to come first.\" \n\nVanessa nodded, \"She fell asleep against you the first day you came over. Remember?\" \n\nHeather nodded. \n\n\"And she scolded me for wearing you out. She said 'you shouldn't wear out people you love'.\" \n\nHeather laughed. \n\n\"She hired you!\" \n\nHeather looked at Vanessa, her heart brimming. \n\n\"And she wants bedtime with you every night.\" \n\nBy this time Heather was sniffling so Vanessa gave her a tight hug and said, \"And that's why, Heather, you have the privilege of being in our lives. Because she in her own way approved. And I love you even more for it.\" \n\nHeather bawled against Vanessa's neck, holding her tight. \"I'm so sorry,\" she said as Vanessa calmed her. After she'd quieted down, she asked, \"Vanessa? What if we break up? It'll be hard on Jules.\" \n\n\"Yes, it will be.\" \n\n\"Aren't you worried about that?\" \n\nVanessa was quiet for a second. \"Hon, that's like saying I shouldn't let her fall in love because she may get her heart broken.\" \n\nHeather looked at Vanessa and frowned. \"Why can't I think like that?\" \n\n\"Because you're not a mother.\" \n\nHeather shrugged. \"Was it bad? These 2 weeks?\" \n\n\"She asked about you. A lot.\" \n\nHeather sniffled. \"Did you give her my note? I left my number for her.\" \n\nAgain the look of pain crossed Vanessa's face. \"No honey, I didn't give her the note.\" \n\n\"Oh.\" \n\nVanessa sighed. \"In the note you promised you'd be back soon. I didn't want her to be let down in case you decided otherwise.\" \n\n\"What? I was always going to come back! I mean I never thought of not...\" \n\n\"But I didn't know that love. You took off,\" Vanessa said softy. \"And I thought you were having second thoughts, about us. About being with a woman. You said you weren't sure you could do this.\" \n\nHeather groaned. \"I meant I wasn't sure I could be a mum.\" \n\nVanessa nodded, evidently still upset. \n\nHeather was quiet for a minute, wrapping her head around what had happened. \"Vanessa, you thought I changed my mind. And that I wasn't sure about...us, about being with you. And you still came here?\" \n\nVanessa nodded. \n\n\"Why?\" \n\n\"Because I had promised I'll be a friend. No matter how hard it was.\" \n\n\"So you came here thinking I'm breaking up with you. And you gave me a hug and held my hand and comforted me?\" \n\n\"It was hard. I wanted to scream when you tried to kiss me.\" \n\nHeather looked at Vanessa, \"You, I... I don't know how you do it.\" She shook her head, wiping fresh tears. \"I don't deserve you. What are you made of?\" She shook her head. \"Vanessa,\" she said softly, \"Look at me.\" \n\nVanessa looked up and it broke Heather's heart. The hurt, the anger, the disappointment all shone through. \n\nHeather knelt in front of her and took her hands. \"I am truly sorry. I know, I can see how much I hurt you. And I am sorry I caused you pain for a moment of weakness and self-doubt. I promise, I will never shut you out. Ever again. I will try my best to never be the cause of your grief.\" \n\nShe could see Vanessa lower her walls. She could see her eyes well and her posture slacken. Heather moved up and kissed her as tenderly and lovingly as she could. \"I'm sorry,\" she whispered. \"I promise I will make it up to you,\" she said, stroking Vanessa's cheek, brushing her tears away. \n\nThey sat holding each other for some time before Vanessa spoke. \n\n\"I was angry,\" she said. \"I was angry because I was angry.\" She shook her head. \"And Jules came back the next day and asked about you. She saw us kiss you know.\" \n\n\"What?\" \n\nVanessa nodded. \"That night after you put her to bed. We kissed, we were crying. She saw.\" \n\n\"After dinner at Val's?\" Heather asked. \n\n\"Yea.\" \n\n\"Shit.\" \n\n\"No, it's not a bad thing. It was just a difficult time to answer her questions.\" \n\n\"Was she, was she okay with the idea? What did she say?\" Heather asked softly. \n\nVanessa chuckled. \"First she asked me where you were and I told her you had to go home to be with family for some time. And then she asked me if that's why I was sad,\" Vanessa said. \"And I told her, yes. I was sad because I missed you.\" Vanessa paused and looked at Heather. \"She asked why you hadn't said goodbye to her. So I told her you had to leave suddenly and that you told me to let her know how much you'd miss her.\" \n\nHeather looked at Vanessa, pained. \n\nVanessa continued. \"When she asked me when you were coming back, I said I don't know. Hopefully soon. And then she asked if we had had a fight. And I lied. I told her no, you just had to go be with family.\" Vanessa was quiet for a bit. \"Then, with this very serious expression she asked, 'Mum, are you and Heather girlfriends?' I had like 3 seconds to answer that question. So I told her yes. And you should have seen the smile on her face Heather. It broke me to a million pieces. It made her so happy to know that we were together and here I was telling her that not knowing if you were coming back.\" She looked at Heather, her look defiant as tears rolled down her cheeks. \"It made me angry that I was in that situation,\" she said bitterly. After some time she continued. \"And then she said she saw us kiss the previous night and I asked her if that was ok. You know what she said? She said, 'Of course it is mum. All mums should have someone to kiss. You and dad used to kiss all the time before you got separated. It's good that you have someone to kiss again.' And then, she added, 'Maybe I can ask dad to get someone to kiss too. I'll talk to him tomorrow.' And mind you, all this with the most serious expression you've ever seen on Jules' face.\" \n\nHeather didn't know if she wanted to laugh or cry. She just made this choking sound before wrapping her arms around Vanessa. \"I can't believe I put you in that situation.\" \n\n\"It wasn't easy,\" she sighed. \n\n\"I'm sorry,\" Heather whispered in her ear and Vanessa gave her a squeeze. \n\n\"Heather,\" Vanessa said softly, her tone serious. \"If there's something on your mind I need you to talk to me. I don't care what it is. You can't just...you can't just run away. This...this doesn't work.\" \n\n\"I know. I promise,\" she said. \"I promise I'll talk to you. I won't do this to you... to us, again,\" she said in all sincerity. \n\nVanessa nodded. She sighed and pressed her fingers to her temples before sinking further into the sofa. \n\n\"You look exhausted. Did you sleep at all?\" \n\n\"Not much,\" Vanessa shrugged. \n\n\"C'mon, let me take you upstairs,\" Heather said. \n\nVanessa looked unsure before agreeing. Heather led Vanessa upstairs to her room. \n\n\"It's nothing fancy,\" she said. \"I've never really lived here. Mum and dad moved here not too long ago.\" \n\nVanessa nodded looking around. Heather's suitcase was on the floor, clothes spilling out of it. Her laptop was on the bed which had evidently not been made in a few days. Things were scattered on the small desk. \n\n\"Sorry, it's a mess. Didn't think of cleaning up.\" \n\n\"It's not like you to let things go like this,\" Vanessa said, stepping closer, her eyes blazing. \n\nHeather swallowed. \"I've, uh, I've not really been myself these last 2 weeks.\" \n\n\"Have you really been hiding out here?\" she asked finding a half-eaten packet of crisps on the chair. \n\n\"Pretty much. I mean I go down for meals and the bathroom is outside. So, well. That.\" \n\nVanessa looked at her disapprovingly. \n\n\"Oh c'mon!\" Heather said. \"That's the look mum gives me.\" \n\nVanessa chuckled. \"So this is a single bed.\" \n\n\"Yea, you can umm, have it. Or there's the guest room.\" \n\n\"Heather, I didn't come here to sleep,\" she said. \n\n\"Yes, I mean, I know. Just that you look so tired.\" \n\n\"Heather, shhh,\" Vanessa said stepping forward and placing her finger against Heather's lips. \"Shhh.\" \n\nHeather's breath caught in her throat as Vanessa's lips replaced her finger. She stood still as Vanessa brushed her lips against hers. A whimper escaped her as Vanessa traced her lips with her tongue before parting them slightly and kissing her on her mouth. Heather pressed in, trying to deepen the kiss but Vanessa pulled back. \n\nShe shook her head. \"You don't get to do that,\" she whispered, the hoarseness in her voice sending a chill down Heather's neck. \n\nShe cleared her throat, \"I don't?\" \n\n\"No,\" Vanessa whispered, kissing Heather's mouth. Again her tongue traced her lower lip, teasing Heather and the second Heather started responding to the kiss she pulled away. \n\n\"Why?\" Heather asked, surprised at how her voice sounded. She knew she was dripping. She could feel a throb in her pussy and her heart was pounding. \n\n\"Because I need to have my way.\" Vanessa whispered, her voice bordering on menacing. \n\nAnd to Heather's surprise all she wanted to do was yield, to surrender to anything Vanessa had in mind. She wordlessly nodded, swallowing, her throat dry, the hairs on the back of her neck standing. Vanessa continued to kiss her lips, her hands not touching Heather. \n\nHeather closed her eyes, moaning into the soft kisses. At some point instinct took over and her tongue flicked out to meet Vanessa's. \n\n\"Heather,\" Vanessa whispered, warningly before Heather even realized what she'd done. \n\n\"How the fuck am I not supposed to kiss you back?\" Heather muttered. \n\n\"By staying still,\" Vanessa said. \n\n\"But, you've been teasing me for so long!\" \n\nVanessa stepped back. \"I have, haven't I?\" she said, her voice calm. \n\nHeather nodded. \n\n\"Maybe I should stop.\" \n\n\"What?\" \n\n\"I'll stop. Let's get something to eat,\" Vanessa said. \n\n\"Wait, but...\" \n\n\"But?\" Vanessa eyes bore into hers and Heather looked away, blushing. \"You're wet, aren't you?\" \n\nHeather felt her face heat up. God she must look like a fucking beetroot, she thought squirming. \n\nVanessa took a step towards her, \"You like it when I'm in charge, no? When I'm the boss?\" \n\nHeather was so turned on, she almost panicked. \n\n\"Don't be shy, love.\" When Heather didn't respond, Vanessa whispered, \"Maybe I should check for myself.\" She put her hands down Heather's shorts and cupped her mound. \n\n\"Vanessa! Fuck! What are you, ahhh, ungh god!\" \n\n\"Slick. You're dripping,\" she said rubbing her fingers across Heather's clit a few times before withdrawing her hand. \n\n\"Ungh fuck,\" Heather exclaimed, moving against Vanessa's fingers despite herself, shocked at what was happening. She looked searchingly into Vanessa's eyes, who without breaking contact, brought both fingers to her lips and licked them clean. Heather moaned, again wondering what had come over her. God this scared her. \n\nVanessa must have seen a flicker of fear because she instantly softened. \"Shit,\" she whispered, turning away for a second. \"I'm sorry.\" \n\n\"No,\" Heather croaked. \"Don't stop.\" \n\nVanessa turned around. \"I'm scaring you.\" \n\n\"I'm not scared.\" Heather said, taking a step towards Vanessa. \"I know you would never hurt me.\" \n\n\"Never,\" Vanessa whispered. \"But...I really want to... to have my way with you.\" \n\n\"And what is it you want to do to me?\" Heather asked, defiantly. \n\nVanessa raised her eyebrows at the challenge in Heather's voice before she backed Heather against a wall and pressed against her. \"I want to kiss you, softly. I want to lick your lips,\" she whispered in her ear. \n\nHeather was panting. All Vanessa was doing was leaning into her, her lips inches from her ear. \n\nVanessa continued, \"I hate that you're wearing a bra.\" She reached behind and with one hand unclasped it effortlessly. \"I want to leave little bit marks along your neck and little kisses along your collarbone,\" she breathed, freeing one strap from under Heather's sleeve. \"I want to tease those lovely breasts, suck on them till your nipples are hard like rock. I want to feel them against my tongue, against my lips. I want to feed on them,\" she groaned against Heather's ear, making her whimper \n\n\"And you know the best part?\" \n\n\"No,\" Heather whispered, as Vanessa freed her other strap before pulling her bra out from under her t-shirt. \n\nVanessa let the bra fall to the floor. \"The best part is that you don't get to move during all of this. You can just lie in bed and moan and writhe.\" \n\n\"Oh.\" \n\n\"Yes, love. No kissing me back, no holding me, no touching.\" \n\n\"Fuck, Vanessa,\" Heather moaned. \"You're gonna drive me crazy.\" \n\n\"Just want to love you, honey,\" Vanessa whispered, kissing Heather, her protest caught in her throat. \n\nHeather kissed her back, unable to stop herself, a wrangled cry escaped her when Vanessa pulled away. She looked at Heather, her eyes blazing and Heather looked back apologetically and to her surprise Vanessa broke into a grin. \n\n\"You're hopeless at following instructions,\" she laughed, pulling Heather into a hug. \n\nHeather was flummoxed for a second, before she melted into Vanessa. \"It's hard,\" she muttered, \"You're the best kisser I've ever kissed. Impossible to not kiss you back.\" \n\n\"Good,\" Vanessa whispered, \"I'm glad.\" \n\nVanessa led them to the bed, \"You think we'll fit?\" \n\n\"If I lie on top of you, maybe,\" Heather whispered. \"Maybe we should take our clothes off.\" \n\nVanessa chuckled. \"Mmm, I think that will help,\" she said, removing Heather's t-shirt. \n\nOnce they were naked Heather whispered, \"You're so beautiful. I've missed you.\" She kissed Vanessa, her hands settling on her hips. \n\n\"I've missed you too,\" Vanessa whispered, drawing her in. \n\nHeather moaned at the feel of Vanessa's body against hers. \"God you feel so good,\" she whispered kissing the skin of her shoulders. \"Come to bed.\" \n\nHeather and Vanessa barely fit on the small bed. They lay facing each other, kissing, hands roving. \n\n\"So, should we try it again?\" Heather asked, breathless. \n\n\"Try what?\" Vanessa said, her tongue flicking an earlobe. \n\n\"You having your way with me.\" \n\nVanessa stopped, and looked at Heather. \"Really?\" \n\nHeather blushed, \"I can try. I mean, I will kiss you back when you kiss me. But... I can try the no touching and moving bit.\" \n\nHeather saw the fire in Vanessa's eyes. Oh god, this was going to kill her. She swallowed. \n\n\"Heather,\" Vanessa said, her voice hoarse. \"We don't have to.\" \n\nHeather shook her head. \"No, please. I want you to, no. I need you to be in control.\" \n\nVanessa's eyes became even darker, like there was a fire burning in their depths. \"Heather.\" \n\n\"I mean it,\" she said. \"Please.\" \n\nVanessa straddled Heather's torso and looked deep into her eyes. \"All you have to do is ask me to stop. Okay?\" \n\nHeather nodded. \n\nVanessa traced a finger along her jaw. \"I love you,\" she whispered. \n\n\"I love you too,\" Heather croaked. \n\nVanessa pinned Heather's arms to the bed before she lowered down to kiss Heather. Her weight held Heather's body down. Despite her aggression, she kissed Heather gently, drawing a moan from her. She made Heather tuck her hands under the pillow she was resting her head on. \n\n\"I don't want to see those hands for the next couple of hours,\" she instructed. \n\n\"What? Hours? Oh god Vanessa!\" \n\nVanessa chuckled. \"Bet you'll love it.\" \n\n\"I'm going to die, aren't I?\" \n\nAgain Vanessa chuckled. \"We'll see.\" \n\nShe spent agonizingly long minutes on Heather's neck, nipping the sensitive skin. She licked and sucked on her earlobes, drew rude expletives from Heather when she waggled her tongue on her exposed arm-pit. ",
        "\"Ok, ok, point taken you potty mouth,\" Vanessa laughed. \n\n\"If I end up kneeing you in your special place, I will not be to blame,\" Heather muttered, her skin on fire. \n\n\"This isn't a game of rugby, you know. No knees and elbows jammed where they don't belong.\" \n\nHeather raised her eyebrow and ground against Vanessa's knee that was pressed up against her mound. \"Yours seems to belong right there,\" she whispered. \"Unh.\" \n\nVanessa grinned. \"Remember, no moving.\" \n\nHeather's frustrated groan turned into one of pleasure when Vanessa pressed the knee into her briefly, teasing. \n\n\"Now, where were we,\" Vanessa whispered before moving her attention back to Heather's neck and shoulders. \n\nHeather was in heaven and hell at the same time. When Vanessa flicked her tongue across her nipple, all she wanted to do was hold her head, instead she bit her lips so as to not cry out as her body jerked with pleasure. \n\n\"Ohhh god!\" she moaned when Vanessa closed her lips around a nipple and sucked. She gasped for air as she felt Vanessa lightly nip with her teeth. \n\nVanessa looked at her, concerned. \n\n\"Do it again,\" Heather whispered and Vanessa obliged. \"Ahh yesss!\" \n\nVanessa took her time and when she was ready to move lower, Heather's breasts were shiny with saliva and pink with all the kissing and sucking. \n\n\"Look at them,\" Vanessa said. \"They're pink!\" \n\nBy the time Vanessa reached Heather's mound, Heather was delirious. Her hips had a mind of their own and this seemed to amuse Vanessa. \n\nShe ran her fingers through the crinkly hair before kissing her there. \"Whoa, easy,\" she whispered as Heather raised her hips, seeking contact. \n\n\"Please,\" she moaned. \"I need it. It's been too long.\" \n\n\"Hardly 20 minutes, love.\" \n\nHeather shook her head, frustrated. \"No no. I mean since...\" \n\n\"Since what?\" Vanessa asked, kissing Heather's mound. \n\nHeather looked away. \n\n\"Heather,\" Vanessa whispered, moving up so they were face to face. \"Since what?\" \n\n\"Since I...since I last had an orgasm.\" \n\nVanessa's eyebrows shot up. \"Not been taking care of yourself, have you?\" \n\n\"I...uh. I didn't want to. Didn't even try.\" \n\nVanessa nodded. \"So your last time was...\" \n\n\"That night, when we...\" \n\n\"I remember,\" Vanessa whispered. \n\nShe kissed Heather softly and reached under the pillow and interlaced her fingers in Heather's. \"I'm going to fix that,\" she whispered, drawing Heather's hands out with hers. \n\n\"I want you to touch me,\" Vanessa whispered. \n\n\"But I thought,\" \n\n\"Please,\" Vanessa interrupted. \"Just hold me.\" \n\nHeather wrapped her freed arms around Vanessa and felt her weight on her. \"Kiss me,\" she whispered, burying her fingers in Vanessa's hair and kissing her deeply. \"Mpfh,\" she groaned at how good it felt to be able to kiss Vanessa like she wanted. \n\nAfter letting Heather have her fill, Vanessa moved down and spread Heather's legs as much as the bed would allow. She looked at Heather for a second before spreading her lips and running her tongue along it. She was gentle, lapping at her folds, licking along the sides, making sure Heather was wet everywhere before she sat up. \n\n\"Fuck! Why did you stop?\" Heather cried. \n\nVanessa straddled one leg, turned a little sideways and held Heather's other leg up against her. She shifted around and positioned herself right on Heather's pussy. \n\n\"Ohhh,\" Heather whispered, finally understanding what Vanessa had in mind. \"You're gonna,\" \n\nVanessa nodded. \"Is that ok?\" \n\n\"Yes, please, just...need to feel you,\" Heather whispered, her hips rising, seeking contact. \n\nVanessa obliged and lowered her mound onto Heather's. \n\nHeather hissed as the warm, wet flesh pressed into her. \n\nVanessa kissed Heather's calf as she adjusted herself and thrust her hips back and forth causing sparks to fly. \n\n\"Ahh fuck!\" Heather screamed, her eyes screwed shut. \n\n\"Fuck, honey, I can feel your swollen clit against mine,\" Vanessa groaned. \n\n\"Oh shit!\" Heather exclaimed, lifting her head off the pillow. \"Yes, yes, oh shit!\" \n\nVanessa continued to press down and hump, her own pleasure causing her to keep at it. \"Ahhh, god!\" she moaned as she picked up speed. \n\n\"Oh don't stop,\" Heather cried. \"Yes, fuck yes!\" Heather couldn't process what she was feeling and before she knew it her orgasm crashed into her. No build up, no wave, out of nowhere her pussy clenched and her breath shuddered and she was suddenly too sensitive for Vanessa's pussy which was still sliding along hers. \"Ahhh! Stop stop stop!\" she moaned, pushing Vanessa off her. \"Ungh, god.\" \n\nVanessa lay down next to Heather, kissing her forehead. \"C'mere,\" she said, holding Heather to her chest. After a few minutes Heather looked up and smiled at Vanessa. \n\n\"I love you,\" she whispered, her chin quivering. \n\n\"I love you too, honey.\" \n\n\"I understand if you're still a little mad at me.\" \n\nVanessa smiled. \"I'm not mad at you. I was never mad at you.\" \n\n\"But,\" \n\n\"But,\" Vanessa interrupted, smiling. \"I should have been. You've been hiding in this little room of yours, filling your head with stupid thoughts, when you should have spoken to me about what Val said.\" \n\n\"I know. I know. I should have. And you've been so... so understanding. I would have been mad. Like mad enough to yell.\" \n\n\"That is not how we resolve conflict. No yelling. Not with Jules at home,\" Vanessa said pointedly. \"I got through a failing marriage with no yelling. Everything is up for discussion. And I mean everything. But no shouting. No matter how angry you are.\" \n\nHeather nodded. She thought for a minute before asking. \"Vanessa?\" \n\n\"Yes.\" \n\n\"You, um, you wanted to have your way with me. Is that... like a... because you were, angry?\" \n\nVanessa thought hard and shrugged. \"I wasn't angry, Heather,\" she said softly. \"But, yes, it's a control thing. I needed to dominate, to have my way, to feel, I don't know, to feel normal, I guess.\" She shook her head. \"It's a thing. I've always had it.\" \n\nHeather nodded. \"Is it something you'd rather do all the time or...? \n\nVanessa chuckled. \"It's only fun if it's occasional. Don't get me wrong. I love you as an equal. I respect you and I hope how I behave when we have sex reflects that.\" \n\n\"Of course. Vanessa, you've never pushed me too much. And you always ask if I'm ok. I know I can tell you if I'm not comfortable.\" \n\n\"Always. And honey, I know it turns you on when I take charge. I can see how it affects you physically. But, in your head, if it's weird, or if it's too much, we never have to do it again.\" \n\nHeather blushed. \"I, I do like it. I feel very, I don't know, very at ease when you're in control. Like I want to surrender and just feel pleasure.\" \n\nVanessa smiled. \"So, that's my kink. Tell me one of yours.\" \n\nHeather balked. \"Oh. I don't know.\" \n\n\"C'mon, let me indulge you.\" \n\n\"I think, being blindfolded and restrained. Like a little, not crazy bondage,\" she said, turning pink. \n\nVanessa's eyebrows shot up. \"Really? Have you ever done that?\" \n\nHeather nodded. \"With Adam, a couple of times.\" \n\n\"You do realize that this feeds directly into, you know, me being in control.\" \n\nHeather grinned. \"Yea. But also,\" she said with a wicked gleam. \"Also to do the same to you.\" \n\n\"Oh.\" \n\n\"Yes. Will you let me?\" she asked, kissing Vanessa. \"Will you let me tie your hands, blindfold you and fuck you with that fat dildo?\" she asked, grinning. \n\nVanessa laughed. \"I would.\" She said, kissing Vanessa back. \"I know I'd love it.\" \n\n\"Really?\" Can we go back to your place like, right now?\" \n\nVanessa laughed, the deep throaty laugh that Heather had missed so much. \"All in good time, hon.\" \n\nHeather was having none of it. \"Do you have the dildo with you by any chance? I bet I could find some scraps for a blindfold and restraints.\" \n\n\"You're crazy,\" Vanessa laughed. \n\n\"Oh I can think of so many things I want to do to you!\" Heather said, dreamily. \n\n\"Like?\" \n\n\"Haah! Like I'd tell you and ruin it!\" \n\nVanessa laughed and pounced on Heather. \"Let your imagination run wild, love,\" she whispered. \"For now, can I act out some of the things I imagine doing to you?\" she asked huskily, flipping Heather over onto her front and running her lips down her back. \n\n\"Ahhh, yes, of course.\" Heather moaned as Vanessa's tongue lingered on her tail bone before dipping into the crevice. \n\n\"Ungh!\" she exclaimed as Vanessa's tongue briefly flicked across her asshole. \"Fuck, that was intense.\" \n\n\"Yea? Can I do more?\" \n\n\"God yes!\" Heather groaned, propping her bums up higher, giving Vanessa better access. \n\nVanessa groaned before spreading her cheeks and diving in. \n\n- \n\nHours later they lay in bed, spent but glowing. Vanessa was dreamily playing with Heather's hair and Heather was fiddling with her phone. \n\nVanessa chuckled. \"What is it?\" \n\n\"What? I didn't say anything.\" \n\nNarrowing her eyes Vanessa asked, \"You're hungry aren't you?\" \n\nHeather stared at her. \"How do you know?\" she asked, sitting up. \"Did my tummy growl?\" \n\nVanessa laughed. \"It's lunchtime and we haven't had breakfast yet.\" \n\n\"Oh yea,\" Heather muttered. \"There's some shepherd's pie in the fridge. I could heat it up?\" \n\n\"Oooh, that sounds good!\" \n\n\"Be back in a second!\" Heather said, jumping out of bed. \n\n\"Hey, wait! You forgot to put on clothes!\" \n\n\"No one's home, remember?\" Heather grinned, running down the stairs. \n\n- \n\nAfter they'd eaten their fill, Vanessa sighed and sat back in her chair. \"I can't believe you ate naked,\" she mumbled. \n\nHeather grinned. \"I love eating naked.\" \n\n\"You do realize that that's weird?\" \n\n\"I know you don't care,\" Heather said. \n\n\"Yea, you're right. I don't care,\" she sighed. \"What I do need is some shut eye. Have a long drive.\" \n\n\"You're leaving today?\" \n\n\"Yes, honey.\" \n\n\"Why? It's Sunday tomorrow!\" \n\n\"I know. But I have to.\" \n\n\"Why?\" Heather asked, annoyed. \n\n\"We're taking Jules to the zoo tomorrow. And she wants to go with the both of us, like we used to.\" \n\n\"Oh.\" \n\n\"I'm sorry, I can't stay.\" \n\n\"Hey, don't. I understand. I hope you have a good time at the zoo,\" Heather said, smiling. \n\nVanessa nodded. \n\n\"And is it ok if I come straight to your place on Tuesday?\" \n\n\"So you're coming back?\" Vanessa grinned. \n\n\"Yes. Tuesday morning. And I'll be in office on Wednesday.\" \n\n\"I can't wait,\" Vanessa whispered, kissing Heather. \n\n\"Will you take something for Jules from me?\" \n\n\"What do you have in mind?\" \n\n- \n\nA couple of hours later, Heather was sitting at her desk rereading the letter she'd written for Jules. She put it in an envelope and signed it. With a sigh she looked over at her tiny bed. Vanessa was watching her. \n\n\"You woke up,\" Heather said. \n\n\"I love you,\" Vanessa whispered. \"I know I've said it more times today than every other day put together,\" she said softly. \"But I really do.\" \n\nHeather walked over to the bed and sat next to Vanessa. \"I won't disappear on you again. In fact I'm gonna be with you all the time. So much that you'll wish I disappear for some time,\" she said grinning. \n\nVanessa gave her a peck. \"I'm going to need one of those magic wand thingies,\" Vanessa laughed. \n\n\"Here's a letter for Jules. You can read it before giving it to her,\" Heather said, handing the envelope to Vanessa. \n\nVanessa nodded. \"I really should get going,\" she said, stretching. \n\n\"Have fun at the zoo. Get some pictures with the giraffes!\" \n\nVanessa laughed, hugging Heather. \"I'll see you on Tuesday,\" she whispered. \n\n\"Yep. My mum and dad are back on Monday. They'll be glad I've got my head on straight again.\" \n\n\"Did you tell them about...\" \n\n\"Everything.\" \n\n\"And they're ok with us...\" \n\n\"They don't care. Mum was like, 'You've come here in the middle of the week to tell me you have a girlfriend? Great! Why haven't you brought her along? Is she waiting in the car?'\" \n\nVanessa chuckled. \"Maybe we can have them over for a weekend. I'd love to meet them.\" \n\nHeather nodded. \n\nThey said their goodbyes and Vanessa drove away with a promise to text once she reached. \n\n- \n\nHeather was fretting all through Monday. So much so that her mum finally lost her patience. \"Heather, you're going to wear the carpet out!\" \n\n\"I'm leaving tomorrow,\" Heather mumbled. \"Aren't you going to miss me?\" \n\n\"Of course I am. But I don't want to have to miss my carpet too!\" \n\nWhen Heather continued to pace restlessly, her mum asked. \"Why are you waiting till tomorrow? It's only 4. You could go now.\" \n\n\"I...I could,\" Heather said coming to a stop. \n\n\"Thank God,\" her mum whispered. \"Finally you've stopped pacing.\" \n\n\"I could leave now. I'll be there in like 2 hours?\" \n\n\"And you're packed already.\" \n\n\"I am.\" \n\n\"Go on, sweetheart. I'm so glad you both worked it out.\" \n\n\"I am too, mum,\" Heather said giving her a hug. \"And thank you, for being there for me.\" \n\n\"Always,\" her mum whispered, squeezing her tight. \n\n\"You'll come visit?\" \n\n\"Of course. I'd love to meet her. And the little one.\" \n\nHeather smiled. \"I'll let you know when.\" \n\nHeather quickly packed up and bid her parents goodbye. She drove straight to Vanessa's home, excited about surprising her. But when she reached there was no one home. Heather let herself in with her key and settled down on the couch. She pulled out her phone and texted Vanessa. \n\n\"Hey you.\" \n\n\"Hello love. How's it going?\" \n\nHeather smiled. \"Good. What you up to?\" \n\n\"Picking up Jules from Joe's. Got really late at work today. L\" \n\n\"Oh! Ok. Drive safe. See you tomorrow!\" \n\n\"Can't wait. You'll come straight home?\" And the next second her phone chimed again. \"Please come straight home.\" \n\nHeather smiled. \"I love how you call it home.\" \n\n\"Maybe we can make it home?\" \n\nHeather swallowed, not sure what to say. She wasn't even sure what Vanessa was saying. \n\n\"Oh.\" Heather typed. \n\n\"Ok got to drive now. I'll call you in 15.\" \n\nHeather sat down on the floor, looking around. This was home. It had become home over the last few months. Could she live here? Could there be anything better than living with Vanessa and Jules? She could live here. For real. Maybe she could put some pictures of herself and her parents among the ones that Vanessa had. And she'd need cupboard space and a couple of drawers. Oh my god, she was going to live here. \n\nHeather sat there, on the floor, lost in thought when she heard the car pull in. Vanessa would see her car parked on the road. She'd know, she thought as she heard footsteps and a jangle of keys before the door opened and Vanessa walked in. \n\nVanessa's eyes immediately fell on her and she smiled. \"Welcome back,\" she said softly, walking towards her. \n\n\"You saw my car?\" \n\nVanessa nodded. \n\n\"Yes,\" Heather whispered. \n\n\"Really?\" \n\nHeather nodded, \"I'll move in with you.\" \n\nVanessa knelt down, face to face with Heather who was sitting cross legged on the floor. \"I love you,\" she whispered kissing her softly. \n\n\"Mum?\" \n\nVanessa smiled at Heather and turned back. \"Look who's here.\" \n\n\"Heather?\" Jules cried. She dropped her school stuff at the door and ran towards her. She stood in front of Heather for a second, a look of sheer glee on her face. \"You're back?\" \n\n\"I am,\" Heather said softly, still sitting on the floor. \n\nJules climbed into Heather's lap and just clung on to her. She wrapped her arms around Heather's neck and held on tight. Heather hugged her back, a sob escaping her. \n\n\"Don't worry, Heather. I'll hold you till you're not sad anymore,\" she said softly, holding on tighter. \n\nShe looked bewildered when Heather sobbed harder. \"Am I doing it wrong?\" she whispered to her mum and Vanessa shook her head. \n\n\"Not doing anything wrong,\" Heather mumbled. \"I missed you so much.\" \n\n\"I missed you too, Heather. But I know you had to go be with family.\" \n\n\"I did,\" Heather croaked. \"But next time I'm calling them over here so I don't have to go away.\" \n\nJules nodded enthusiastically. She settled down in Heather's lap and looked at her. \"Do you feel better?\" \n\n\"So much better. Thank you, Jules.\" \n\nJules looked at her shyly. \"Mum told me you're her girlfriend now.\" \n\nHeather smiled. \"I am. Is that ok?\" \n\nJules nodded. \"But Rebecca said that means you're my mum too? Are you my mum, Heather?\" \n\n\"You already have a mum, honey. And you have a dad.\" Heather said, grinning at the memory of her mum saying the same thing. \n\nJules nodded. \"I do. So you won't be my mum?\" \n\nHeather hesitated and looked at Vanessa who gave her a nod of encouragement. \"You could call me mum if you want. Or, I could just be, you know, just be Heather.\" \n\nJules nodded. \n\n\"I have so much to learn!\" Heather said. \"Your mum's had like 5 years of practice being mum and she's so good at it.\" \n\nJules agreed enthusiastically. \"Just like Rebecca is better at swimming because she's had more practice!\" Jules chimed. \n\n\"She has a pool!\" Heather and Jules said together. \n\nHeather grinned before continuing. \"So I need to learn how to manage everything like your mum does. And your dad too!\" \n\n\"There's not much to learn! You can always come along with mum and me! And I know everything she does.\" Jules said excitedly. \"She can, can't she?\" Jules asked looking at Vanessa. \n\n\"Of course, honey.\" \n\n\"See! You can practice with us. Then you'll know everything about being a mum!\" \n\nHeather grinned. \"You're the best, Jules. I love you.\" \n\nJules smiled before saying softly, \"I love you too, Heather.\" She then leaned in and whispered, \"I know mum loves you too. She was sad a lot when you were gone.\" \n\n\"I know honey. I missed her a lot too. And I missed you. So much. And\" she said, taking Jules' small hands in hers. \"I promise I'll always be here and I'll love your mum and you the best I can.\" \n\nJules looked at her shyly. \"I missed you too.\" \n\n\"Oh honey,\" Heather whispered, squeezing her tight. \n\n\"I'm so happy you're back! I wish you never have to go anywhere!\" Jules said excitedly. \n\n\"I won't go away like that again. Promise,\" she whispered, holding Jules to her. \n\n- \n\n3 years later. \n\n\"Is it weird for you? Being back here,\" Heather asked softly. \n\n\"It's always difficult. But I think it finally feels like I've let go of the ghosts.\" \n\nHeather nodded. \"I can see why you fell in love with the place. There's something about it.\" \n\n\"It's the love. The love they put into every inch of land. The love they show to every guest that passes through, the love that I found and lost here. That's all there is. It's love.\" \n\n\"Thank you for bringing me,\" Heather whispered. She was sitting with her back against the stone wall and Vanessa was leaning back against her, her head resting in the crook of Heather's neck. \n\n\"Miah and I lived in this room for a year. It was a blissful time.\" \n\n\"You've never told me how you two got together,\" Heather whispered, kissing Vanessa's head. \n\n\"No?\" \n\nHeather shook her head. \n\n\"I'd been here for a few weeks I think. I used to sleep in a little outhouse just a minute from here but the old structure would leak in the rains. Nonna suggested I share Miah's room till the rains let off.\" \n\nHeather nodded, to indicate that she was listening. \n\n\"So that night I came up the stairs with my stuff and knocked on the door. Now this room, if you've noticed is particularly stuffy. I don't think it was built for someone to live in. More of a store.\" \n\n\"You're right,\" she said. \"No breeze at all.\" \n\nVanessa nodded before continuing. \"So I put my stuff away and before we got into bed, Miah took off her clothes.\" \n\n\"Oh.\" \n\n\"I was quite taken aback, obviously, but I didn't say anything. I got into bed and tried to get comfortable. She said I'd wake up in the middle of the night with my clothes stuck to me if I slept with them on. And of course a few hours later I woke up, drenched in sweat. I got through it for two nights and the third night I couldn't take it anymore. I woke up and peeled my clothes off. We slept naked on the same bed for weeks. We'd wake up with our legs entwined, arms draped across each other, breasts smooshed against backs.\" ",
        "\"Wow,\" Heather whispered. \n\n\"I was attracted to her, but they're conservative around here, so I didn't say anything. And as we got to know each other, I think, somewhere along the way I fell in love with her.\" \n\n\"Did you tell her?\" \n\n\"I didn't have to. I think she knew before I did.\" \n\n\"What do you mean?\" \n\nVanessa smiled. \"One night we were up chatting and she casually said that she hadn't masturbated since I had started sharing the room with her.\" Vanessa laughed at Heather's reaction. \"Yea, Miah was crazy. So I told her I could give her space, go for a walk or something. 'What's the fun in that?' she asked. Trust me when I say it didn't take too much for her to convince me that we should do it together.\" \n\n\"Masturbate together?\" \n\n\"Yep. And it wasn't long before we were kissing and helping each other out by whispering dirty things and tweaking nipples and lending a finger or two.\" \n\n\"Damn,\" Heather whispered. \"But wait, how did she know you fell in love with her. \n\n\"Oh yea, sorry, got sidetracked,\" Vanessa chuckled. \"The first time we kissed was, let's say I'd never had such a kiss. It took my breath away. We were both touching ourselves when she turned towards me and kissed me. I came so hard and her lips fluttering across mine were just... So she must have seen the intensity and the confusion on my face because she said, 'Don't worry. I love you too.' I don't know what she saw, but at that moment I realized I did in fact love her.\" \n\nHeather smiled, giving Vanessa a squeeze. \"I love you,\" she whispered. \n\nVanessa turned to look at her, \"I'm glad we came here honey. I love you so much.\" \n\nHeather hesitated for a second. \"Vanessa?\" \n\n\"Honey.\" \n\n\"Will you marry me?\" \n\nVanessa turned abruptly to look at Heather. \n\nHeather took a fortifying breath. \"I um, don't have a ring. But I have this.\" She drew a small pouch from her pocket and handed it to Vanessa. \n\nVanessa took it from her and opened it. She pulled out a pale, rough cut amethyst. It had a delicate silver chain going through it. She held it in her hand before looking up at Heather. \n\n\"This is the one you gave me on...\" \n\n\"Same one. I got a chain put through it.\" \n\n\"For me to wear?\" \n\nHeather nodded. \n\n\"Why here?\" Vanessa asked. \n\nHeather shrugged. \"You said it yourself. It's the love in this place. And this,\" Heather said, pointing to the crystal. \"This is not an amethyst.\" \n\n\"Really?\" \n\n\"The guy at the store said it's Vesuvianite.\" \n\n\"Vesuvianite?\" \n\n\"Yea. You know where it was first found?\" \n\nVanessa squinted for a second. \"Erm, Mout Vesuvias?\" \n\n\"Mhm.\" \n\n\"Really?\" \n\n\"Yes. I mean I don't know if this stone came from here, but it's Vesuvianite.\" \n\nVanessa grinned. \n\n\"So? Will you?\" \n\n\"Yes. I will. I will marry you.\" Vanessa said, turning to kiss Heather. She put the chain around her neck. \"Sort of unreal,\" she whispered. \"When I left this room 18 years ago, I thought I'd die. And when I came back for the funeral I wanted to die. It's weird. This room has witnessed some of my happiest and saddest moments.\" She was quiet for a second. \"How things change.\" She looked at Heather. \"Thank you for giving me a happy memory in here. Feels like it's come a full circle.\" \n\nHeather kissed Vanessa. \"Let's get out of here,\" she whispered. \n\nThey climbed down the stairs and found Jules pacing, wringing her hands. She looked up expectantly when she heard footsteps. \n\n\"Hey honey,\" Vanessa said. \"What's wrong? Where's Cerelia?\" \n\n\"She went off to be with her puppies,\" Jules replied distractedly. As Vanessa walked into the light, Jules spotted the purple stone around her neck and squealed. \n\n\"You said yes!\" she exclaimed running towards her mother. \n\n\"What?\" \n\nJules squealed and hugged Heather and pulled her in for a group hug. \n\nVanessa took a second to figure out what was happening. \"Wait a second. You told Jules about this?\" \n\nHeather nodded. \"I asked for her permission to marry you.\" \n\n\"What?\" \n\n\"She should have a say. So I asked her if it's okay.\" \n\nHeather saw the surprise on Vanessa's face before her eyes welled up. She took Heather's hand in hers. \n\n\"I...thank you,\" she whispered. \"Thank you for... everything.\" She kissed Heather softly, wiping a stray tear. \n\nJules skipped around them in circles singing some song completely off tune. \"You're getting married!\" she exclaimed. \n\nVanessa sat down in the grass and pulled Jules in. \"We are honey. I love you so much.\" \n\n\"I love you too mum,\" Jules said giving her mum a squeeze. \"This stone is so pretty.\" \n\n\"Isn't it?\" \n\n\"Yes!\" Jules exclaimed, running in circles again. \"It's pretty!\" Cerelia came bounding towards them, wanting to join in the merriment. \"Cereliaaa!\" Jules squealed. \"Mum and Heather are getting married!\" Cerelia gave a happy woof and gamboled around with Jules. \"It's such a pretty purple! Isn't it?\" \n\nVanessa and Heather laughed as they walked down the gentle slope towards the main house. \n\nJules had run off ahead of them but they could still hear her. \"Pretty purple! Just like the wisteria in our house! You should come and visit us Cerelia. Bring your puppies. Come for the wedding! We have pretty purple wisteria!\" She sang. \n\n\"I won't be surprised if she starts doing cartwheels.\" Heather said, laughing. \n\n\"So, should we get married under the wisteria tree?\" Vanessa asked, taking Heather's hand. \n\n\"Do we really have to go back?\" Heather asked, making a pouty face. \n\n\"You still have job, remember?\" Vanessa laughed. \n\n\"Yea, but I'm thick with the boss, you see.\" Heather said, grinning. \n\n\"Really?\" Vanessa teased? \"Are you marrying her under the wisteria tree?\" \n\nHeather laughed. \"Sounds lovely, she whispered, giving Vanessa a kiss. \"But it's a vine, remember?\" \n\nVanessa looked from Heather to a frolicking Jules before she burst out laughing. \n\n*****"
    ],
    "authorname": "Akshi",
    "tags": [
        "lesbian",
        "lesbian romance",
        "boss",
        "first time",
        "romance",
        "friends"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/changes-ch-11-1"
}
{
    "title": "How To Cheat On Your Spouse Ch. 1",
    "pages": [
        "\"Oh the weather outside is frightful, but your thighs are so delightful. She has no place to go, let her blow, let her blow, let her blow.\"\n\nI caught a bit of the holiday spirit on the way to the mall and began humming the Christmas song while driving down the highway. Somewhere along the way I changed the words a bit and laughed. \n\nDon't I wish! I mean, my secretary was a cutie, and yes, she would have made an excellent partner in the sack. But there was a little problem: I was married with three children, and the little woman at home frowned upon marital transgressions. I know that for a fact, because it wasn't all that long ago that she caught me in the act.\n\nThat was not a pretty scene. After some time and counseling, we mended fences, but I got the ultimatum: even flirting with another woman was cause for her to give me the pink slip, kissing her, my kids, our house and most of our bank account, goodbye. \n\nI took those words to heart, and have been a model husband for more than half a decade. \n\nThen there are guys like Artie, a manager in the Accounting Department at the company where I'm employed. On the outside he's a pleasant enough guy in his early 30s with a wife and two lovely children. Behind the scenes, though, he's a wolf. A certifiable louse. \n\nHe's strayed more times than a barnyard cat, and somehow has never been caught.\n\nI thought of this while driving to the mall, and given my past history, decided to ask him how he does it. I didn't think he would answer, but it wouldn't hurt to ask. \n\nSo I did. \n\nMuch to my surprise, Artie was agreeable, and over a few beers at our local Irish pub, we spoke about the ins and outs, so to speak, of cheating on one's spouse. What follows are his frank answers to my probing questions.\n\nQ: We've talked in the past about some of your, well, dalliances, and I wondered if you could answer a few questions, anonymously, of course.\n\nA: Ask away!\n\nQ: Do you love your wife?\n\nA: Of course. She's a darling, the mother of my children, and a great friend too.\n\nQ: Then why...?\n\nA: (Interrupting) Why do I, uh, stray? \n\nQ: Uh huh.\n\nA: That's a complicated question. Probably something for a psychologist or psychiatrist to probe. But if you drill down and look for an answer, I'd say it's the excitement. The thrill of the conquest. The danger. \n\nQ: Life on the wild side, eh?\n\nA: Yes. I think that's it.\n\nQ: Do you fear being caught, being found out?\n\nA: Of course I do. I think about it all the time. But something happens when I smell the challenge of a conquest, and, stuff happens.\n\nQ: Often?\n\nA: Guess that depends on your definition of often.\n\nQ: Okay. Give me a number, then. You've been married about 8 years, right? How many, uh, liaisons, have your had?\n\nA: (After some thought) There have been nine women since I got married, but three of them I knew before Julie and I were married and we sort of got together again for little flings after my marriage.\n\nQ: When was the first?\n\nA: I'm embarrassed to say the weekend after I got married. I ran into an old girlfriend at the grocery store, of all places. We talked for a while, stopped for coffee, and after sitting and talking in her car for a while she went down on me. It was fantastic. I think it was a real turn on for her to get me to cheat on my wife so soon after getting married. It was the only time we did it, but it was an unbelievable, exciting happening.\n\nQ: No regrets?\n\nA: Absolutely. I shook all the way home. I had to stop at a fast food place on the way home to clean myself off, wash her smell away. I mean, my Julie would sometimes surprise me when I got home with a quick bj before supper, and that's all I needed! So I stopped and washed myself off just in case.\n\nQ: Did she?\n\nA: What, when I got home you mean? No, but later that night the sex was fantastic! I kept thinking about having two different women in the same day. \n\nQ: What is your secret to keeping these, uh, dalliances, secret?\n\nA: Obviously, the biggest thing is to be discreet. You never know whom you might run into, or where, so it's important to be smart about where you will meet, how you can explain if stumbled upon at, say, a public place like a restaurant. And it's especially important to keep track of where you are supposed to be and when.\n\nQ: You mean an alibi?\n\nA: Definitely.\n\nQ: Say more...\n\nA: Well, receipts are bad, unless they serve a purpose. By that I mean, if you are going to Morton's Steakhouse and an item shows up on your credit card bill, it would be easy for Julie to open the bill and question me on what I was doing at an expensive restaurant. I mean, the company isn't generally going to pay for me to take a client or someone there. So, why in the world would it be there? It would be hard to explain that away.\n\nQ: So how do you charge things then?\n\nA: Cash is king. But sometimes a credit card is necessary, like at a hotel or that fine restaurant. I have one of those addresses at a Mailboxes, Etc., where I receive my \"special\" credit card bills. I pay they with postal money orders so there isn't a cancelled check.\n\nQ: Brilliant!\n\nA: Just common sense. But sometimes a credit card can verify where I've been, and that can be just as important. For instance, I've been seeing this married girl in Pittsburgh. Now that's about five hours from here, too far to drive up and back in the same day. So I will schedule a business trip there. Stay the night, and invite her over to the hotel for breakfast and then a little morning delight before heading back home. It works for her, it works for me.\n\nQ: You just mentioned the word married. I would think you would be after single women?\n\nA: Not really. Married women are best. Single women can be all sorts of problems, I know it first hand. I've been with a couple single women but over time things get more serious and all of a sudden you have the possibility of getting a phone call at home and that's nothing but trouble. Married women, on the other hand, have a lot to lose if our relationship is uncovered. Both of us stand to lose. So they are careful, I am careful, and that works best. Plus, the sex becomes really great in two ways: first, the excitement of having another man's wife. Second, you do for her what her man can't. Another distinct turn on.\n\nQ: What other \"secrets\" do you have?\n\nA: Just a few. Never, ever, neglect your spouse. They have an innate ability to sense when something is up. So make sure you give them the time and affection they need. Be caring. And that shouldn't be a problem if you love her. I know I love my wife dearly. Be sensitive to her needs. Be there for her. \n\nQ: Those are all hints about your spouse. But what about, well, stuff outside your marriage. \n\nA: I'm getting to that. And that's the point. You have to take care of business at home or else anything else will be easily detectable. You wife is, after all, your wife. Presumably you love her. I love mine. \n\nQ: But...?\n\nA: Thinking of other relationships, outside marriage, some things are obvious.\n\nQ: Don't take the other woman home? Don't call out her name in bed? \n\nA: (Smiling) Now you are catching on. Don't have lipstick on your collar! But seriously, no biting. It is very hard to explain a hickey on your neck or butt or somewhere. And use a condom, you don't want to be bringing anything home with you! Have an alibi. Witnesses are good that way. As I said before, don't leave a trail of evidence.\n\nQ: That sounds a like a bit of contradiction. Don't be seen, but have a witness.\n\nA: Good point. Different strokes for different folks. What I mean is, you don't want to be scene with a woman in an improper setting. If you are out dancing at your country club with the \"other woman\" in front of your wife's friends, that's suicide. But if you are dining downtown and aren't all over each other in a booth, if someone you know happens to see you it's merely a common sense situation. \n\nQ: How so?\n\nA: First off, you tell your wife you are having dinner with a client, you don't necessarily say where. She has your cell phone number, so if she has an emergency or something and calls, you are available. Second, if someone does happen to see you, introduce the woman and get the reason for the dinner out front right off. For instance, \"Hi Bill, I'd like you to meet Dana, who represents the XYZ Company.\" Of course, you have to make sure Dana knows how to play the part. Don't make her a computer salesperson if she doesn't know a hard drive from a CD ROM or something. Rehearse the part if you are going to be out on the town. Be smart about it. \n\nQ: What else?\n\nA: Never over commit with the \"other\" woman. Don't promise her you will leave your wife. Don't tell her things that aren't going to happen. Be up front about the situation. Now of course, if it's a one-night stand, bets off. You should probably assume another identity or make sure you don't leave any telltale signs of whom you really are. But if you are in a relationship with a married woman, for instance, know what she needs and make sure that's what you give her. If she needs a new relationship, and that's supposed to be you, then cut it off. Otherwise you are walking on thin ice.\n\nQ: Okay. So let me get this straight. First off, make sure you take care of things at home as to not create any suspicion. Do not neglect your spouse or her needs. Second, be smart, use common sense. Third, be discreet. Fourth, watch where and how you pay for things. Fifth, an attached woman is a better prospect for a discreet liaison than a single woman. Sixth, take care to avoid incriminating marks, like hickeys, lipstick, matches, receipts, or, worse case, STDs.\n\nA: Absolutely. And there are a few more things. How about seven, have an alibi for where you are going and what you are going to do there. Eight know your partners, your wife and your \"friends\". You don't want to miss an anniversary to be with the \"other\" woman, it would be a dead giveaway to your wife that something was wrong. Likewise, if your friend becomes too possessive, no matter how good the sex is, you have to cut it off before she gets too serious. \n\nQ: Any others?\n\nA: A couple old standbys. Don't go changing your looks all of a sudden. I know this one guy who went on a diet, changed his hairstyle, bought a convertible, all to impress the girl...only to get caught in the act at a local motel by his wife on their first rendezvous. It was obvious he was up to something. \n\nQ: Anything else?\n\nA: How about this: be careful to dispose of any evidence. Love note are wonderful to get, but have to be destroyed! Can you imagine me trying to explain how a love note from another woman happened to get into my briefcase?\n\nQ: A definite no no!\n\nA: You have that right! By the way, do you remember Jeff Atkins at our Chicago office? He's the perfect example of this. His wife found intimate photos of him and his girlfriend on their laptop. It was impossible for him to explain that away.\n\nQ: Oh no! I guess not. That goes back to being careful, being discreet, being smart, right?\n\nA: That's the long and the short of it.\n\nQ: Well, I appreciate your candor.\n\nA: Hey, as long as this is anonymous, no problem.\n\nQ: Well, it is, of course. I have to ask you, though, any regrets?\n\nA: (Thinking)...yes, absolutely. I feel like a bastard at times, especially after a rendezvous. The guilt can be tremendous. I feel like trash, and I recognize I probably am in lots of ways. But I rationalize it, I guess. I do love my wife, I try and make her happy. But there is this little voice inside which drives me toward women and, well, there are some great things that happen.\n\nQ: Like?\n\nA: The variations in lovemaking. Deborah, for instance, gives the best head in the world, and she does it in cars, in my office, wherever. She's amazing, she gets off on it. And Kelly loves it up the ass. Her husband has never had her their, yet I have. I took her anal virginity! I've done it doggie style over her own bed. I'm really not trying to brag, but I've done it in great locations, all places imaginable, you name it. It has been great sex. I love it and think I'll keep doing it.\n\nQ: As long as you don't get caught.\n\nA: Absolutely. And if it comes to that, in the words of a former President, deny, deny, deny.\n\nSome insightful comments from a guy who should know. A guy who cheats and gets away with it. It's not for everyone, it's not for me, but if you are going down that path recognize that for every bit of excitement there's a whole lot of guilt and concern and danger. \n\nMaybe that's the whole reason he's so good at it."
    ],
    "authorname": "JRob",
    "tags": [
        "cheater",
        "women married",
        "sexy",
        "woman home",
        "shag",
        "single women",
        "wife friends",
        "common sense",
        "discrete",
        "married women"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/how-to-cheat-on-your-spouse-ch-1"
}
{
    "title": "My Sister's Friends Ch. 03",
    "pages": [
        "If you have not read \"My Sister's Friends\" Parts One and Two this will make no sense to you. I suggest you read them first and then continue on with this selection. Thank you for your interest. \n\nThis is not a quick jerk story. Neither is it hardcore sex. It is a story of a young man with Cerebral Palsy and how he learns about love through his sister's friends. I have included it in \"First Time\" because I thought that was the best fit, although there are elements of Group Sex, Exhibitionist and Voyeur, and Incest involved.  How much of this story is true I will leave for you to decide. Names have been changed to protect the guilty. It will be multiple parts. Constructive feedback is appreciated. \n\n\n\n\nWhen Kate's bikini dropped to the floor it was the first time I had ever seen a real pussy in the flesh. No matter how many one sees on video or in magazines there is no way any can measure up to seeing the real thing. Seeing it in its warmth and beauty is indescribable. The way the short hairs in her neatly trimmed bush curled in a vee pointing down to the slit, and the bump of her clitoris peeking through, the utter softness of the skin that could almost be felt just by looking at it is beyond my ability to express. When I awoke after my explosive orgasm Kate was standing beside me, while Jessica was still kneeling in front of me. Both of them were smiling broadly.  Kay and Shellie were still at their places at the table, with smiles of pleasure on their faces. \n\n\"Thank you. That was wonderful. I've never felt anything like that in my life!\"\n\n\"Oh, don't worry. It will get better,\" said Jessica as she wiped her face with a napkin.\n\n\"I don't know how it can. Kate, your pussy is beautiful! It is so much better than I could have thought.\"\n\n\"Hey, you guys. Don't you think you are overdressed? Come on, I kept my end of the bargain,\" said Kate.\n\nShellie, never the bashful one quickly peeled off her bottoms, and Jessica stood up between my knees and said, \"Jared, do you think you would like to do the honors?\"\n\nMy cock was quickly reaching full hardness again as I looked up at her. Would I like to remove the bikini from the girl that most filled my idea of perfection? My hands were definitely trembling as I reached for the ties and gently pulled them loose. They parted and her bikini dropped from her hips to the floor. Her bush was trimmed to just a landing strip, also a deep auburn, just like her head, and the cutest collection of freckles. It had a musky aroma attesting to her arousal that I found irresistible. I leaned in and returned the favor of her kiss by giving her a kiss right at the top of her crease. I couldn't help nuzzling her landing strip with my nose a couple of times.\n\nKay stood trembling at the far end of the table with indecision on her face. I knew she was as turned on by all the events as anyone, but she was torn by the thought of being naked with her brother. I felt for her. If I were in her place I would feel the same. In fact, being naked in front of my sister felt really strange to me, but the presence of three other nubile young ladies over-road my hesitation easily. \"Kay, it's OK. I see your boobs. If you don't want to get all the way naked, I understand.\"\n\nHer eyes were moist as she looked at me gratefully. \"Thanks, but I'm looking at your cock, and what really bothers me is that I can't have it. I shouldn't even be looking at you, but I can't help myself.\" She slid her fingers into the top of her thong, but hesitated. \n\n\"Go ahead, girl,\" said Shellie. \"You're the only one left.\"\n\n\"Don't push her,\" I said. \"It's totally up to her. I'm OK with her either way.\"\n\nKate walked around the table and put an arm around her waist and whispered in her ear. I don't know what she said, but Kay just nodded her head and sat down. Shellie started to say something, but I interrupted her before she got started. \"Shellie, it's OK. She's my sister, and I love her. If she doesn't feel comfortable being naked with me here I'm fine with that. Don't try to make her do something with which she isn't comfortable.\" Kay just looked her appreciation at me.\n\n\"Well, what do you think, Jared? Is it worth it?\" Shellie, the irrepressible one posed with one hand on her hip and her pelvis pushed forward. She was the only one of the three who had shaved her pussy bald. She walked to stand next to me where she could look down at my stiff member and reached down, pressed it downward, released it and then giggled as it bounced in place. \"Something tells me you like it!\" \n\nKate also came back to stand next to me, leaving me with Kate on my left side, Shellie on my right, and Jessica still standing between my knees. I didn't know where to look first, although I kept finding my eyes returning to Jessica. \n\nKay was feeling left out, sitting down at the other end of the table alone, and she got up sheepishly and walked around to stand behind me. She put her arms around my chest and gave me a hug from behind, letting her soft breasts press against my shoulders over the top of the chair. \"You understand the way I'm feeling, don't you?\" she whispered into my ear. I just nodded. \"I know I'm being silly, with you sitting there naked in front of me, but I can't help myself.\" Her breasts felt lovely against me, and I was willing to let her hold me like that as long as she wanted, whether she got naked or not. Of course, I didn't say anything like that to her. She would have quit and run away, I knew. She was also looking over my shoulder and watching my cock as it bobbed in place. \"You do have a gorgeous cock. Too bad you are my brother.\" She gave me a squeeze and stood up. \"What do you guys want to do now? We could go out and get some sun.\"\n\nNow, I've never been one for sunbathing, but I wouldn't pass this opportunity down! We all went out the door, all of us starkers, with me watching as the girls all seemed to add a little extra wiggle to their hips, except for Kay. She seemed rather subdued, but game as she walked ahead of me. Everyone laid beach towels out on the grass and lay down to catch the sun. It was still early afternoon, so the sun was still high in the sky and it was rather hot. We each started slathering sun screen on rather liberally, especially since there were bits exposed that hadn't been exposed to the sun before.\n\n\"Hey, Shellie,\" called Kate. \"Did you go totally nude in Jamaica?\"\n\nShellie actually blushed. I didn't know she could! \"Just one day. I slipped away from my brother and parents and went to a different section of the beach. I just wanted to see what it was like, and besides, there was this one cute lifeguard . . . .\" She was silent then.\n\n\"Come on, come on, out with the details!\" crowed Jessica. \"What was he like?\"\n\n\"Gay.\"\n\n\"Come on!\"\n\n\"Yes, he was. I had gotten my nerve up and everything, and then he didn't even pay any attention. It was a real let down. Not like today, though!\" Now it was my turn to color again. I had gotten accustomed to them seeing me nude, but when she drew their attention to me again I got embarrassed. It wasn't enough to make me leave though! I don't think you could have dragged me away that day. I knew I would have plenty to fuel masturbation sessions for months if not years to come. \"Be sure to put plenty of sunscreen on that cock, Jared,\" said Shellie. \"We wouldn't want that to get sunburned now would we? Need any help?\" I shook my head \"No.\" \"Too bad! You can help me with my back if you want to.\"\n\nThis was getting better and better!  Of course, I wanted to. I got up and moved over next to Shellie and poured a generous measure of oil on her back and started spreading it around, getting it up to her hair line and stroking her neck and shoulders, then spreading it out over her shoulder blades and down her ribs on her sides. I brushed my fingers across the swell of her breasts as they pooched out the sides, which brought a little bit of a moan from her. \n\nI worked my way down her back, making a point to spread oil all the way down her side as far as I could reach, until I was brushing the towel. When I got to her hips I made a point to stroke up and down her sides, feeling her marvelous figure before working my way on down her legs. I wasn't sure how far she would let me go, so I stayed on the outside of her thighs at first, then, I did her calves and feet. She seemed to like it when I stroked the palms of her soles with my thumbs.  \n\nWhen I started back up the inside of her legs she spread them a little wider, leaving me to look at her pussy between her legs as I moved up. I didn't know anything about a pussy other than what I had read and seen on the internet, but it did look rather puffy to me, and there was a good bit of moisture seeping from between the lips.\n\nI got to her knees and started higher. Again, she spread her legs just a little bit further for me. By the time I worked my way all the way up the inside of her thighs I was dripping on her leg. She was moaning for sure by now, and when I reached the top of her thighs I decided I might as well be hung for a sheep as for a lamb, and I allowed my finger tips to reach in and graze her pussy on the way by. She gave a gasp and raised her hips, giving me better access to reach her, so I did. I caressed her pussy lips with my finger tips and then slid one hand all the way under her cupping her pussy in my hand. She was moaning almost constantly now as I stroked my hand back and forth over her mound, and then I allowed my thumb to find and enter her vagina while my palm stroked side to side over her pussy and pressed on her clit. She gave a guttural groan, and her pussy spasmed and squeezed my thumb. I just squeezed gently with my thumb and hand, and I must have been pressing on her G-spot or something, because she gave a little cry, and a lot of fluid shot out into my hand. \n\n\"Enough!\" she cried. \"I can't take any more!\" I gently removed my thumb, but kept my hand over her pussy for a little bit as she squeezed her thighs together holding my forearm in place. My cock was bobbing up and down and dripping steadily from all the stimuli I was receiving. \n\nI lay down on my towel, only to see three other girls staring at me. It wasn't even my cock they were looking at this time. They looked at me like a calf looks at a new gate. Not like there was anything wrong, but they looked at me like they had never seen me before. Feeling a little nonplussed at the attention I reddened, thinking something had to be wrong. \"What's the matter?\"\n\n\"Where have you been hiding all my life?\" Jessica asked. \n\n\"Yeah,\" said Kate. \"I've never met anyone like you before.\"\n\nKay, my own sister, was looking at me like she had never seen me before. \n\n\"Why, what have I done wrong?\"\n\n\"Wrong? What have you done wrong? Not a thing! Every other guy I know would have been after us all day long, and wouldn't have wanted to take 'No' for an answer, but what have you done but give me an orgasm like I've never had before, and you didn't even touch my pussy or try to fuck me. Then when Jessica undressed you, you didn't even try to take advantage of her, even when she was practically in your arms. When I took off my bikini all you did was compliment me and tell me I was beautiful. You treated Jessica with respect when you undressed her, even though she was practically giving herself to you. Most guys would have been demanding Kay strip off too, as was agreed, but you respected her feelings and let her off the hook. And now, Shellie asks you to put sunscreen on her and practically asks you to fuck her you didn't take advantage, but gave her a great orgasm, leaving yourself totally unrelieved. I know you are about to explode, you've been dripping like a bad faucet the whole time you were rubbing Shellie. I've never seen anyone like you in my life!\"\n\n\"You've got that right, Kate! I know what my brother would have been like if it was him. 'Course, he's seen my tits anyway.\" said Shellie.\n\nI was really blushing now. I had learned to control my expectations after twenty years of being different, of never being included in activities, of never even getting to take a girl out, of being ostracized because I was \"different\", just because I had crippled legs, talked a little funny, and was generally clumsy. Never before had my feelings even been considered by other people. Oh, don't get me wrong. I'm not complaining, well not much anyway. I had gotten used to it. Even Kay, although I know she loves me and is as sweet and nice as can be to me, basically ignores me when out. Not so much ignores me; that sounds too harsh. I just didn't fit in with her lifestyle, and got left behind. I just didn't expect things from other people. To expect anything, even to hope, only left one disappointed.\n\n\"Jared is always like this,\" said Kay. \"I don't know about the sexual part, but he is always putting other people ahead of himself. He's pretty special, although I guess I've overlooked him too much.\" She stood up and said, \"I think I've been cheating you, Jared. Even though I'm your sister, I've been enjoying looking at your cock, but I haven't quite been fair.\" She put her thumbs in the sides of her thong and slowly pushed it down her legs, exposing her pussy to me for the first time. It was delightful, alongside the others to see hers now exposed to my eyes. \n\nShe had it trimmed to a narrow little landing strip that became an arrow pointing to her pussy. We were all surprised to see something like that from Kay, who seemed to be rather quiet and modest. I guess the thong she was wearing today should have tipped us off a little bit, but I know I was surely surprised.\n\n\"When did you do that, girl?\" asked Shellie. \"I never noticed that in the locker room!\"\n\n\"I did it last weekend to surprise Paul, but then the bastard broke up with me. He didn't even have the decency to do it to my face! He texted me!\" Now, I never liked Paul very much, but that confirmed my thoughts for him. He had been tapping my sister's pussy, then just ups and leaves her after he got what he wanted. I have only one word for people like that, scum! \n\n\"Do you like it, Jared?\"\n\nIn the words of Balki Bartokomous from Perfect Strangers, \"Don't be ridiculous!\" \"Kay, I think it is absolutely wonderful. You girls have more than made this a fantasy day for me. I've seen and experienced more here today than I ever expected in my lifetime. This has been a wonderful day for me.\"\n\n\"Just you wait. We aren't finished yet!\" Jessica walked over to me and stood over the towel I was lying on. \"You've made me feel beautiful today. I see the way you keep looking at me. If anyone else looked at me like you have been I'd be mad, but when you look at me it isn't like I'm just a pussy to be fucked, but like I'm a person to be loved. I love the way you've made me feel, and I want you to feel the same way.\"\n\nShe knelt down astraddle my legs and slid forward until her pussy was pressing against the base of my cock, and then slid forward even more until her pussy slid up my cock until just the head of it stuck out between her pussy lips. She leaned forward, resting those cute little breasts on my chest and looked me in the eyes. Did I mention I can fall into her eyes? Well, I can, and I think I fell a long, long, way just then. Can a man fall in love with a girl just like that? I don't know about anyone else, but I know I did. From that point on there was no other woman for me for life. I liked Kate and Shellie, they were a lot of fun, but Jessica was different. \n\nI reached both arms up and around her. As little as she is I did that and had room to spare, but my arms were as full as I wanted them to be. I hugged her to me, and I know tears came to my eyes. Big guys don't cry, right? Wrong. This one did, and I don't deny it. I buried my face in the hair on the top of her head. I had to reach down with my face to do it, but I did. I nuzzled my nose back and forth across the top of her head a couple of times as I squeezed her gently in my arms. I could feel her nipples against my chest, and I felt oh, so contented. Jessica started rocking her pelvis, rubbing her pussy on the underside of my cock. It felt great, but somehow it wasn't what I wanted for her. \n\nI slid my hands back across her lower back, stroking her skin gently as I did so, until my hands were at her sides. I slid them up her sides until they were under her armpits, then I gently lifted her straight up and off of me, did I mention she is a tiny little thing? I pulled her forward until she was directly over my face, then I lowered her down so that her pussy was right over my mouth. I had read about men doing this, and I had seen a couple of videos, but couldn't really see what the guy was doing, but I knew they used their tongues on women's pussies to make them come.\n\n\"No, Jared, you don't want to do that!\"\n\n\"Yes, I do. Why not?\"\n\n\"Guys don't like doing that!\"\n\n\"This guy is different. I like to make you feel good. If you don't like it I'll quit.\"  With that I stuck my tongue out and licked from the bottom end of her vagina straight up to the top of her pussy. She gasped and pressed down on my face involuntarily.\n\n\"Ohhhhh! That feels good!\" \n\nI did it again, and again, and again. I loved it, and from the way she was writhing on my face I know she did too. I admit I had no idea what I was doing, and my tongue is a little thicker than most men's tongues, and not nearly as agile, so I made up for finesse with enthusiasm. This was my Jessica sitting on my face, rocking and moaning with pleasure. I was looking up into her eyes the whole time, watching the expressions change on her face as I licked her pussy. I slid my hands around from under her armpits to her breasts and cupped them in my palms. Her nipples were hard with excitement, and I rolled them around and around as my hands made circles around the tops of her tits. \n\nI rolled my tongue as much as I could roll it and pressed it into her vagina, which elicited another gasp of pleasure, then, I lightly pinched both nipples between my thumbs and forefingers. She pressed her pussy down onto my mouth hard and shuddered. When I swiped my tongue forward again I hit that little nubbin at the front of her pussy. I didn't know what it was at the time. I knew women had a clitoris, but remember, I'd never even seen a pussy until less than three hours ago. Anyway, when I licked across that little nubbin again this time something different happened. My Jessica gripped the sides of my head with her thighs and simultaneously started bucking up and down on my face like a rodeo rider trying to make a sleepy bronco look vicious. Juices started pouring from her that I lapped up like a thirsty dog at a puddle. \n\nJessica leaned forward and said, \"Stop, stop, stop it! I can't take any more,\" and rolled off of me to lie curled up on the ground next to my head. After a minute or two of lying there looking at me she gathered herself together and leaned over and gave me a sweet little kiss on the lips. \"Do you know I've never had a guy want to do that for me before? They all want blowjobs, but no one has ever wanted to reciprocate. You haven't even asked anything for yourself all day, but, you keep giving us pleasure. You are mine! Don't even think about asking another girl out. From here on out you are mine, and I will do everything I can ever do to make you happy. Anything I have is yours. \n\nJessica wrapped her arms around my neck and laying her lovely breasts down on my chest, put her head down on my shoulder and began to shudder softly. I could feel the tears as she silently wept on my shoulder. I just wrapped my arms about her again and held and rocked her gently as she relieved her pent-up emotions. After a moment she lifted her head, looked me in the eye, and then settled her lips down on mine in a soul scorching kiss. It wasn't one of those sexy tongue kisses, but rather that of a lover laying claim to her beloved. I gladly gave back as good as I received.",
        "\"I hate to break up this love-fest,\" I heard my sister Kay saying, \"but we had better move this back inside before we all get sunburned in places we don't want to be burnt.\" \n\nI lifted my head to see three girls kneeling on the ground looking at the two of us wistfully. We all rose, picked up our towels and . . . ."
    ],
    "authorname": "Callicious",
    "tags": [
        "sister",
        "friends",
        "nude sunbathing",
        "bald pussy",
        "landing strip",
        "love"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/my-sisters-friends-ch-03"
}
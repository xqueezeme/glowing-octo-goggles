{
    "title": "Senior Year Memories Ch. 26",
    "pages": [
        "(Usual Disclaimer Time: Even though this story almost entirely takes place in a high school setting, all the characters in this story are 18 years old or older, and since we're living in the wide wonderful world of porno-land here, where clich\u00e9s roam free and things might get a little unrealistic from time to time, please remember it's all in good fun. This story is highly serialized, and though it's not 100% necessary to have read the whole story up until this point to enjoy the content of the chapter, it's definitely advisable to understand some of the ongoing plots.)\n\n(Author's Note: In the beginning, this was going to be one long chapter, but after a lot of work and realizing that just wouldn't work this chapter will be broken up into three separate parts. This is the third and final part. There's going to be a lot of things going on with a lot of characters, but since this is sort of what I'd call the \"season finale\" for the first half of Senior Year Memories, I wanted to make this one nice and epic and truly messy. I'd like to again thank MisterWildCard for acting as a second set of eyes on this chapter, for his honest editing and fantastic suggestions, and for the creation of the character Cleo Price. Please check out his story, \"Brooke's Wild Ride\" in Erotic Couplings, as it acts as a canonical side story to Senior Year Memories starring Regan Hills High's favorite blonde cheerleader.)\n\nPreviously, on Senior Year Memories: After a long, hard Christmas season, 18-year-old Ryan Collins had the chance to spend some of his winter break relaxing before being invited to a New Year's Eve party by some of his cheerleader friends, which, since this is that kind of story, can only mean an orgy with a dozen sexy cheerleaders. After a morning encounter with sweet redhead Sasha Pearl, Ryan took another ride with tight blonde cheerleader Brooke King, where she propositioned him with an offer for some future kinky sex. Returning to the party, Ryan was brought in to judge a sexy competition in the hot tub with Kaitlyn Pruitt, Jade Alvarez, Addison Gonzalez, Haley Campbell and Gwen Savage, only to be stolen away by the gorgeous and statuesque black girl, Cleo Price. With almost a full day of hot sex out of the way, what will the rest of New Year's Eve have in store?\n\n***\n\nNow if you don't already, you might think I'm crazy after I say what I gotta say next:\n\nDespite all the insane, hot sex I was having in the lead-up to New Year's, I find some of my most vivid, fun and even erotic memories of the occasion to be some of the moments in between sex when a bunch of us were just hanging out and recharging, and, yes, even clothed. I may not have been best friends with all of these girls, but with everything shared and the time I'd spent with many, I would definitely call a good number of them close friends. True, we may not have all had much in common, but there were some good, even smart people here that I didn't mind talking with as well as having sex with, and the moments I shared with them are moments I truly cherish.\n\nClose to the top of that list of people had to be Sarah Kent.\n\nA girl who normally wouldn't have been here any more than I would have, she'd come out of her shell incredibly since I'd known her this year. A shy band geek with killer dance skills who'd always dreamed of being a cheerleader, I'd pulled some strings to get her a spot on the squad. It was a difficult, begrudging transition for her, but she'd ultimately fit in quite nicely. Though she was still shy, she was smiling all the time these days.\n\nShe'd been especially smiley at this party, which, admittedly was a good look on her. At 5'2\", she may have been petite, but her years of dance had made her lithe and muscular, with amazing legs and a tight ass. Her breasts were a modest B-cup (with very sensitive nipples, I knew from experience) and her face was cute as could be. With sparkling green eyes behind horn-rimmed glasses and wavy blonde hair, there was something about her that felt positively angelic.\n\nThat she was a freak in the sheets didn't hurt, either, not that you could tell that now. While many of us were lounging about in the guest house, soaking in the air conditioning on what had turned out to be a hot post-lunch afternoon, she looked like a positively normal girl at a sleepover to the casual observer. Her hair was tied back in a ponytail, and she was wearing a loose, blue, spaghetti-strapped top and a pair of pink yoga pants.\n\nWhile the other girls watched some cheesy reality show about rich girls I didn't really care about, I found myself looking at Sarah from across the room occasionally, hoping that she was every bit as out of the loop on this entertainment as I was.\n\nWhen I saw her looking back at me, I smiled. She returned the smile, a bit timidly, licking her lips.\n\nWe could've easily slipped away with the others distracted as they were, but instead we just stood there for a while, making eyes at each other (and fuck, did she have pretty eyes), laughing along when the others laughed, but focusing very easily back on one another. She turned ever so slightly, showing off her exquisite, if covered, body to me. She ran her hands up and down her tight, modest curves, pinching a nipple through her tank top and biting her lip to stifle a moan.\n\nI couldn't match her sheer beauty and eroticism, but what I could do was readjust the erection in my underwear.\n\nI know, real classy, right?\n\nShe smiled at the sight, looking nervously around at the other girls. Then, either convinced that they were all adequately distracted by the TV or just not caring, she quickly lifted her top over her tits, flashing me her succulent mounds and her very, very hard nipples.\n\nI should've probably spent more time recovering, but the way these girls had me going I'd discovered nearly superhuman endurance and cum stores I never knew I had. Seeing Sarah so teasing, so happy, so completely comfortable and in her element when she was usually a shy and near-nervous wreck, it was an unbelievable turn on.\n\nI wanted her. Part of me was even tempted to try to take her in my arms and drag her off to fuck like Cleo had with me not long ago, but I decided to be a little more subtle about it.\n\nWith a simple nod, I turned back from the others and walked down the hall toward the guest house's bedroom. Once inside, I worried for a time that I'd played this badly, and that she was still out there with the others watching their inane show.\n\nThe door clicked closed behind me. I smiled, turning to face her.\n\nI wanted to say something smart, but when Sarah Kent closed the distance between us and passionately kissed me, smart took a vacation. I tore at her clothes, wanting her naked and getting her there quickly enough. Though I wanted my hands all over her firm, tight little body, she had other plans as she pulled off what little clothing I'd put on for the afternoon. My shirt was tossed aside, and when it came to my underwear she knelt down and pulled it off with such vigor that all ten inches of my thick cock smacked her in the side of the face.\n\n\"Sorry,\" I said.\n\n\"For what?\" she asked, kissing the head before taking much of the length of my cock down her throat.\n\nTime and again I wondered how the women of this town all got so good at deepthroating huge cocks, and time and again I realized that I didn't really care when they were all so good at it. Seeing Sarah's face, normally so cute and innocent, being defiled as it was was undeniably hot. With tears at the corners of her eager, satisfied eyes and her mouth stretched to the brim as she choked on my cock, she gave me a perfectly wet, and enthusiastic blowjob.\n\nA blowjob was fun, but that wasn't where I wanted this to end (even though I really liked that thing she was doing with her fingers on my balls). So, difficult as it was, I pulled my cock out of her mouth and guided her back onto her feet so we could make out some more. She was definitely the more aggressive of the two of us, wrapping her arms around me tightly as she first flung me into a wall, then rolled so she was sandwiched between the wall and me.\n\n\"I wanna... fuck... need to...\" Sarah said between kisses. Her voice had taken on a husky, begging tone, one that wasn't helped when I slid two fingers inside of her tight, wet cunt.\n\n\"Need to what?\" I taunted, trying to match her tone.\n\n\"Fuck you don't make this easy...\" she groaned, looking up at me with two of the prettiest come-fuck-me eyes that could very well have convinced me to do anything then.\n\n\"I need to ask you something... a favor... but not like this... not now... not when you got me all... fired up,\" Sarah moaned as I fucked her more urgently with my fingers.\n\n\"What should we do to fix that?\" I asked, still taunting.\n\nSarah smiled naughtily. \"Keep me against the wall, and hold me up.\"\n\n\"Hold you up?\" I asked.\n\n\"Yeah. Hold me up,\" she said, lifting her right leg and bracing it against my chest so she was locked in a standing split. That she did this with my fingers still buried in her slit was all that more impressive, but I took her meaning well enough and braced her vertically with my arms and body.\n\nSilently, she reached down and grabbed my cock in both hands, stroking me and spreading my precum so I was nice and slick for her, before lining it up with her pussy lips. Still looking into my eyes, she teased me, rubbing it against her lips.\n\n\"Tease,\" I joked, kissing her.\n\n\"You started it,\" she said, hissing as she pressed the cockhead inside of her. Sarah gritted her teeth for a moment as I slid my cock deep inside of her, my cock reaching deeper and stimulating her in ways it never had before with this odd angle.\n\nShe quivered.\n\nShe whimpered.\n\nShe looked up at me with one of the most intense looks of lust I'd ever seen from a woman.\n\nNo words were necessary between us at this point, our eyes silently communicating everything that needed to happen. She wanted it nice, and hard, and deep, and I was going to deliver.\n\nWith her hands wrapped around me for stability and mine holding her up on the wall, I fucked Sarah Kent as hard as I could while she held onto her vertical split. I fucked her with a vigor I never knew I had, one that threatened to lift her off the ground a little with every thrust. Though I could only gauge her level of pleasure by the tone of her moans and the way she trembled against me, I knew my cock was in fucking heaven. The splits tightened her pussy in a way I hadn't felt in a long time, gripping me like a vice and threatening to make me cum with every thrust.\n\nIt wasn't supposed to end that soon, though, not when we'd been waiting for this moment the last couple days. Bad timing and a lot of other girls demanding my attention had kept us from coupling for most of that time, but now that we were together we were going to make the most of it.\n\nThis is why I stopped power-fucking her after a minute or so, wanting to draw this out. Sarah whined with need, but a good kiss and a hard thrust let her know that I wasn't leaving her high and dry.\n\nI kept up with this slower pace, looking down into her eyes, challenging her to cum as I slowly thrust in and out of her. Sarah smiled up at me, biting her lip and knowing full well what I was going for. She chanced a moment to drop her hand down to her clit, her fingers rubbing up against my cock with every withdrawal.\n\nWe kept this up for a few minutes more, but it wasn't long before she'd reached her limit. Sarah came against me and came hard, crying out and shaking, her one leg barely holding her up as I continued to thrust away inside of her. It would've been something if I'd managed to cum in her then and there, but even with the superhuman recovery time I'd managed these past couple days, I couldn't pull that here.\n\nSatisfied that she could hold herself up, if only just, I pulled my cock from her and let her leg down. Sarah wobbled on her feet unsteadily, took a few steps, then collapsed to the ground on all fours. Worried, I went to help her up, only for her to look at me over her shoulder with one of the most intense 'come fuck me' looks I'd ever seen.\n\n\"Now,\" she growled.\n\nWith an ass and pussy that perfect just staring me in the face, I knew better than to refuse her request. I knelt down behind her, rubbing, squeezing her perfect ass, pulling her cheeks apart so I could get a better look at all of her. Her asshole, so tight and cute and perfect, winked up at me encouragingly, reflected in her beautifully confident smile.\n\nI couldn't help myself. I dove right in, kissing and licking her tightest hole, utterly going to town on her ass with my mouth while I fingerfucked her hot, soaked cunt. This may not have been what she had in mind if her disgruntled mewls were any indication, but that didn't stop me from working both of her holes at once, wanting her nice and ready for the hard fuck I couldn't adequately deliver against the wall.\n\nOnce I was certain she was nice and ready, I lined my cock up with her pussy and pushed back inside.\n\nThis time wasn't going to take long. My balls were already swollen with need for release from the hard fuck we'd already had, and now that I'd already made her cum, I wasn't feeling the need to draw this out any longer than I had to. I fucked her hard, grabbing her hips for better purchase, grunting and groaning like a wild beast while she just encouraged me with some amazing filth from such an otherwise timid girl.\n\n\"God, yes, pound me, fuck me like a little slut, fuck me hard, pound my little slut cunt, harder, harder, fuckfuckfuck, keep going, fill me up, fill me with your cum, keep going, keep going, god I love this cock, harder, fuckmeharderfuckmeharderfuckmeharder, I love this cock, cum for me, cum for me, yes, yes, YES!!\" she cried out triumphantly as I just let out with a formless groan. Pleasure flooded my body as I flooded her pussy with my cum, her tight muscles squeezing and milking me for every drop I had.\n\nA fuck that energetic had me collapsing on my back on the floor after an orgasm like that. Though it looked like Sarah would've wanted to keep going, after a wobbly crawl, she seemed to decide on being safe and collapsed on her back next to me.\n\n\"Wow,\" I panted.\n\n\"Wow,\" Sarah agreed.\n\n\"So... did you learn that split thing from these girls, or was that...?\"\n\n\"I knew that one before,\" Sarah confirmed. \"Not a lot of guys can keep the balance and the fucking going like that, too many things to focus on, like rubbing your stomach and patting your head, so, thanks for being better than most. That got it really nice and deep.\"\n\n\"Glad to help,\" I replied, reaching over and squeezing one of her nipples playfully. She hissed with pleasure, then looked over me with those adorable fucking eyes that could probably get me to do anything if she asked.\n\nWhich brought something to mind I'd almost forgotten.\n\n\"You said you had a favor to ask?\" I asked.\n\nSarah blushed.\n\n\"Bad timing?\" I asked.\n\n\"No. Yes. I... I don't think there's ever a good time to ask you what I need to ask you. Asking you when I'm well fucked and still dripping with your cum might be one of the worst times, but, I'll need to ask you eventually, so...\"\n\n\"You want to shower first?\" I asked, motioning toward the attached bathroom.\n\n\"Tempting, but I'd feel obligated to invite you to join me since we're all so sweaty and sticky and stinking of sex, and if you join me, then I can't say what's going to happen, but will probably involve you fucking my ass,\" she said.\n\n\"That's a bad thing?\" I replied.\n\nSarah smiled cutely. \"Never. But, it'd still keep putting off what I wanted to ask. So... I'll ask now.\"\n\n\"Ask away,\" I said, smiling back at her.\n\nShe took a deep breath. \"So... after everything you've done this Christmas season, it's gotten me thinking that I want to do something nice for the people I care about, and since there's nobody in this world I care about more than my mom, I want to start with her. That's where... god I can't believe I'm asking this... I need your help.\"\n\nThinking I was joking, I looked at her and grinned. \"You want me to fuck your mom?\"\n\nSarah looked at me with eyes that said that not only was I right, but that she wasn't joking.\n\n\"You want me to fuck your mom,\" I said more soberly.\n\n\"Yes,\" she confirmed.\n\n\"Wow,\" I said again, staring at the ceiling.\n\nSarah rolled over onto her side to better look at me. Admittedly, it also pressed her immaculate breasts together, which would have normally stolen my attention. Given the oddness of the request, though, I was able to avoid that temptation.\n\n\"I know it's weird, but will you let me explain why I'm asking?\" Sarah asked.\n\n\"We're friends. Of course,\" I said.\n\nShe smiled at this. \"Well... thank you... my mom's about the most awesome person I know, my best friend if I'm being honest, but she doesn't treat herself like she oughta. Since living in Regan Hills isn't cheap, especially for a single mom, she works about four different jobs at any different time to give us the life we got. She's got a part-time office gig, runs her dance studio, sells stuff on Etsy, even sells sex toys to a bunch of other sex-starved moms in town (even though she thinks I don't know about that).\"\n\nA couple puzzle pieces fell together quickly, a name I'd heard mentioned once before making being pulled from the depths of my memory.\n\n\"Your mom's Viola Kent?\" I asked.\n\n\"You know her?\" Sarah asked, hopeful.\n\n\"Of her. From... well, one of those sex-starved moms,\" I admitted.\n\nSarah thought about this. \"Good. Good that you know. My mom, she works her ass off for us to have a good life, but she doesn't really have one of her own. I think she fools around with some of those other moms, just casual sorts of stuff, but, I know she'd really enjoy having a guy to have some fun with. Nothing serious, but a guy who knows how to press her buttons and is considerate and willing to show her a great time. Since it's dangerous out there for a lady dating these days with all your pickup artists and incels and all those other assorted assholes and the creeps out there, I want her to have fun but safe fun, and you... you make sense.\"\n\nI'd honestly thought that Brooke asking to peg me was going to be the strangest request to come out of this New Year's party, but this might have taken the cake.\n\nSensing my hesitation, Sarah added quickly, \"And she's beautiful, too. I know I'm not the best to judge, but she's always got guys heads turning when we're out, and she's a dancer, way more flexible and tight than even me. She's always telling me about the trouble she got up to in college because she thinks these stories are good for me and I need to finally get out there and lose my virginity so I can finally start having fun (and I'm too embarrassed to tell her anything else), so you know she's fun, and... yeah. That's my mom, and if you'd put some thought to showing her a good time, I'd really appreciate it.\"\n\nAs with many of the crazier requests I'd gotten in life, this was one I knew I needed to properly take the weight of before acting. In that spirit, I asked, \"Can I think about it, or do you need an answer now?\"\n\n\"Please, think about it. I don't want this to be something you'd rush into agreeing on, especially since I know how strange it is. Please, don't think I'm trying to trap or prank you or anything,\" she said quickly.\n\n\"I wouldn't,\" I said.\n\n\"Thanks,\" Sarah said. \"I'm not used to asking things this serious, but I wouldn't have done it without a ton of thought. I love my mom, and I really like you, but I wouldn't want to fuck things up with you or her. I wouldn't have asked this if I wasn't sure that we'd all be able to keep having our fun and still be friends.\"\n\n\"And it wouldn't weird you out to be sharing a guy with your mom?\" I asked.\n\nSarah shook her head. \"No. Well... maybe a little, but if you clean up real good after and, you know, don't like fuck us in the same day or anything, I think that'd work on most of the weird.\"",
        "I thought about it. \"Just promise me... promise me that if this happens, that no matter what we'll be friends. I like all the sex I'm having, but I like the friendships more, and I wouldn't want to lose you.\"\n\nShe smiled at me sweetly, her voice barely a whisper when she said, \"Thank you.\"\n\n\"Promise me?\"\n\n\"Of course. I promise,\" Sarah replied.\n\nI kissed her. \"Then I'll think about it.\"\n\n\"Good,\" she said, rolling back onto her back and looking at the ceiling with me.\n\n\"I wouldn't mind that shower, though,\" I said.\n\n\"Yeah, ditto, I'm all kinds of sticky,\" she replied.\n\nI grinned at her playfully. \"That assfucking still on the table?\"\n\n\"Let's get cleaned up first, but then... yeah, probably,\" Sarah giggled.\n\nPutting my hands behind my head and smiling, I said, \"Fuck this has been a weird, awesome party.\"\n\n***\n\n\"Okay, girls, we can get the coordination of this working, this really isn't that hard, is it?\" Dakota asked, hands on her hips and tapping her foot on the ground expectantly. The naked brunette with the slender frame, C-cup tits and bushy pubic hair looked commanding and intimidating, yet utterly gorgeous at the same time.\n\n\"Easy for you to say; you're just taking it, we're the ones doing all the work,\" Haley replied, arms crossed under her amazingly huge H-cup tits. The curvy and pale redhead was one of the few girls I knew bitchy enough to match up to Dakota's reputation, but even in her sass she seemed a little intimidated by her cheer captain. You'd have thought given the size of the strap-on she wore that she'd be the one in charge, but Dakota had a way about commanding a room when she was on.\n\nAnd let me tell you, this time she was on.\n\n\"Well, I need to see what you've got, and so far what I'm seeing doesn't impress me one bit,\" Dakota said.\n\n\"Oh, relax, Dakota, we'll make it work. We always make it worse in the end,\" beautiful and busty dark-haired Kaitlyn said. Easily one of the most gorgeous women I knew (and fuck that was a competitive list), with her DD-cup tits and sweat-glowing body, she looked several different levels of hot, even with the large strap-on she was wearing.\n\n\"Don't you mean in my end?\" Dakota quipped.\n\n\"My end too,\" Kaitlyn shot back, glancing at Haley.\n\nHaley looked at me, licking her lips. \"I'm ready. You ready?\"\n\nEven with my cock overtaxed by all the insane sex I'd been having lately, I was not going to turn down an opportunity this hot. \"I'm always ready.\"\n\n\"Good,\" Dakota said, getting down on all fours. \"Because this is a rare opportunity for you girls, and you better take it while I'm offering it.\"\n\nLeaning her head on the floor, she reached back and spread her ass cheeks to show off her perfect, tight little hole. \"One of you better shove a dildo up my ass while I'm offering, because this is a limited-time only sort of thing.\"\n\n\"Dibs!\" Kaitlyn shouted, dropping to her knees behind Dakota before Haley even had a chance to realize what was happening.\n\n\"So not fair,\" Haley pouted. I'd heard a lot of girls claiming that things weren't fair these past couple days, and by experience I'd learned that those protests could usually be turned around with the right way of looking at things.\n\n\"Ahhh, fuck me...\" Dakota hissed as Kaitlyn pressed the head of her lubed-up strap-on dildo into Dakota's ass. Since Dakota's ass was incredibly tight (something I knew from glorious experience) and the dildo was very, very thick, it made for a really nice watch.\n\n\"Take it, bitch,\" Kaitlyn playfully hissed. \"You know that's how you've always wanted it, now take it like the bitch you are.\"\n\n\"Pissed that's not you?\" I whispered to Haley.\n\n\"Beyond,\" Haley replied.\n\nCarefully, I cupped her ass. \"Well, it may not be like fucking Dakota's ass, but you'll at least get to fuck Kaitlyn's ass and really give it to her good.\"\n\n\"True,\" Haley said begrudgingly.\n\n\"And...\" I said, sliding my hand between her amazing ass cheeks and pressing my middle finger against her tight hole, taunting, not enough to go inside, but enough to make her shiver. \"...while the other two only have toys in them, you get ten inches of serious fucking cock inside of you, so in the end, wouldn't you say you're really the winner in this pile?\"\n\n\"I got it!\" Kaitlyn cheered as she bottomed out the strap-on inside of Dakota's ass.\n\n\"Lucky first try,\" Dakota whimpered, looking back in pained pleasure.\n\n\"You might be right,\" Haley said.\n\nI pulled her in close, planting a long, deep kiss on her lips. When we broke, she looked at me dreamily.\n\n\"Okay, you're right,\" Haley said.\n\n\"I thought so,\" I replied.\n\n\"Okay, bend over, bitch, your ass is mine,\" Haley said, kneeling behind Kaitlyn and pushing her down against Dakota's back. With little gentleness, she pressed her large, lubed dildo against Kaitlyn's ass and slid it right inside. Though Kaitlyn was one of the most accomplished girls I knew at taking it up the ass, her eyes still went wide at the sudden invasion.\n\n\"FUCK, HALEY! A little romance, next time?\" Kaitlyn insisted.\n\n\"Oh, whine, whine, whine,\" Haley mocked, leaning over and kissing her friend. \"You and I both know this is how you love it. And besides, I called dibs earlier on Dakota's ass.\"\n\n\"Are we really having this conversation about dibs rules now?\" Kaitlyn asked.\n\n\"If I weren't pinned to the floor, I'd be happy to help judge!\" Dakota said.\n\n\"Well, you are, so fuck off,\" Haley said.\n\n\"I'm so over these one-time-only offers,\" Dakota grumbled.\n\nLooking up at me expectantly, Haley said, \"So... ready?\"\n\nNow I was licking my lips. \"Definitely.\"\n\nI knelt down behind her, rubbing lube onto my cock as I hungrily eyed the sandwich of gorgeous, naked cheerleaders in front of me. As always in moments like this, I took a second to thank the charmed kind of life that had led me here, but rather than linger on the unlikelihood of it all, I was focusing more on Haley's ass.\n\nI slid my cock between her ass cheeks, taunting her, teasing her a little, enjoying my position of power and how I got to play it.\n\n\"Stop teasing, please?\" Haley asked.\n\n\"Yeah, we're at an orgy, not a rom-com,\" Kaitlyn said.\n\n\"And I'm not gonna be on the bottom forever!\" Dakota said.\n\nI rolled my eyes. \"Fine, fine,\" I said, pressing in against Haley's tight hole. She winced pleasurably as I worked my way inside, gasping when the head popped in and groaning out loud as I fed my huge cock into her ass. As always, sliding inside of her tightest hole was heaven, so tight and hot and eager, and feeling my balls brush against her pussy was enough to make me groan.\n\n\"So, everybody bottomed out?\" Dakota asked, to all of our confirmation. \"Alright, then start a rhythm. Everybody work together and finger the girl in front of you; I know it'll be hard, I know it'll be weird, but if we pull it off, it'll probably be fucking amazing, or at least something to boast about. Everybody ready?\"\n\nWhen we all answered her positively, Dakota said, \"Then let's get down to business, bitches!\"\n\nThough establishing a rhythm where all three of us could effectively fuck the ass of the girl in front of us while fingering them, we were motivated to make it working. Soon, we were all a groaning, moaning mess, dancing a strange dance that we were the only ones privy to all the moves of while other girls around us fucked and cried out and watched us curiously.\n\nIf this was business we were getting down to, it was a kind of business I could get to liking.\n\n***\n\nI loved a good 69. This shouldn't be new to anyone who's read this far. I love the give and take of it, I love the taste of a good pussy, and I love a good blowjob. Put all those together and you've got one of the world's most perfect sex acts in my humble opinion.\n\nOf course, there are many perfect sex acts, so if I were forced to rank them I'd probably look like a lunatic, so since I'd rather not do that I think I'd rather describe how much fun I had 69ing Rose Ferris in the midst of the New Year's Eve party.\n\nAfter a lot of hot and heavy encounters, a laid-back encounter was just what the doctor ordered, and laid back was Rose's usual running speed. A tight bodied hipster with wavy, platinum blonde hair streaked with blue, a firm pair of C-cup tits, and some of the nicest lips I'd ever encountered (both up top and down below), I always knew I could relax when Rose was around. With a little help on the inside, we'd crashed this party together, though I realized too late that I hadn't spent nearly as much time with her as I'd wanted to.\n\nI meant to change that.\n\nEating her delicious, shaved pussy while she deepthroated my cock seemed a good way to get started there. She tasted good, she felt good, and as long as we were taking our time on each other, we could both catch our breaths and let time in the party pass by. When I came looking for her after my anal orgy with Kaitlyn, Haley and Dakota, I didn't tell her what I was looking for, but she knew right away.\n\nRose Ferris always had a way of knowing.\n\nWhen so many girls would've been all set for wearing me out, she was content to take her time, and oh did I mean to take my time with her.\n\nAlready she'd cum on my face twice. I thought she'd try to return the favor, but she played with my cock unhurriedly, suckling, licking and kissing it as if it were a delicious treat, occasionally dipping down to take my entire length down her throat before going back to her toying. Even in this relaxed a state it was rather frustrating, but only in the best way.\n\nWhen she got me close again, close but not quite there, I decided to push things a little further. I slid two fingers inside of her pussy and another in her ass, thrusting them, curling them, pushing her to the edge and then well over it as she pulled her mouth off my cock and cried out in orgasm yet again. Her sweaty, shaky body sliding against mine was one of the most perfect feelings in the world, and I couldn't help but take great pride in what I could do for her.\n\n\"Okay, Ryan Collins,\" she said, panting for breath. Rose climbed off of me, only enough to turn around and then re-straddle my hips, taking my cock into her perfectly tight, hot and wet slit. \"I'd say that's enough teasing.\"\n\n\"I'd have said that a while ago,\" I said, groaning with pleasure. \"But this is a good way of making it up to me.\"\n\nSlowly, she began to rise up and down on my cock, keeping her pace slow and distinct. \"I thought you might agree.\"\n\nRose bit her lip, riding me deliberately and looking so completely beautiful as she did. I was unused to seeing her without her fedora and sunglasses, but at some point in the past few hours she'd completely just given up on them. Getting a rare opportunity to look her in the eyes, to see that complete and effortless confidence that made me like her when we first met.\n\nI pulled her down toward me, enough that I could suckle on one of her perfect nipples. I flicked the hardened nub with my tongue, nibbling on it just slightly enough to make her moan.\n\nIt did the trick.\n\nRose smiled down at me, rocking her hips harder as she bounced on my cock. Not too much, not too fast, she didn't want to speed up what we'd started, but it was enough to tell me she was having fun.\n\nIn that spirit, I wrapped my arms around her and rolled on top. She looked up at me, no doubt fully expecting that this was when I was just going to go to town on her. Then I smiled, keeping the slow, deliberate pace. It wouldn't be enough to get me to cum right away, but I was in no hurry.\n\n\"Ah, you know how to treat a girl right,\" Rose said, grinning with satisfaction.\n\n\"Josie seems to think so,\" I replied.\n\n\"And what exactly are her thoughts on your orgy activities?\" Rose replied, wrapping her legs around me and urging me forward a little more.\n\n\"She thinks they're hot. I think that's why she's trying to outdo me. She set up a gangbang with a bunch of people she met in Hawaii last night, looked like she had a great time,\" I said.\n\n\"And you don't have a problem with that?\" she asked.\n\n\"Why would I?\" I asked, thrusting into Rose for emphasis. \"I'd have to be a major hypocrite if I had a problem with Josie having sex with whoever she wants when I'm... you know...\"\n\n\"I know,\" Rose said, squeezing my cock with her pussy.\n\n\"We have each others' hearts. That's what matters, in the end. Who we fuck around with when we aren't together... well, that's just fun, isn't it?\" I proposed.\n\n\"That it is,\" Rose purred, urging me on a little harder. \"So, do you think she's going to beat you?\"\n\nI laughed. \"I've my doubts, but I've also learned better than to underestimate her.\"\n\n\"A wise strategy,\" Rose laughed back, turning her head to the side. \"Oh, look, we've an audience.\"\n\n\"I don't care about an audience,\" I said, only looking down at Rose, only wanting Rose here and now.\n\n\"Not even a greatly jealous-looking Gwen Savage without a partner in the world seriously trying to not watch us and touch herself?\" Rose mused.\n\nAdmittedly, this probably would've been a great sight. Gwen Savage was a trashy blonde and one of the least pleasant cheerleaders here. Like all the others, she was unusually hot, but her pushy attitude toward my friends made me resistant toward her advances. I was interested in having sex with her before all this was over, but until then I was more than happy to make her work for it.\n\n\"Tempting,\" I said, quickening my pace slightly. I was ready to burst, and that necessitated a little more movement, something that Rose was all the happier to encourage with her legs wrapped around me. \"But I'd rather keep making her jealous by cumming inside of you.\n\n\"Oh, Ryan Collins,\" Rose purred, \"You really know how to make a girl feel SPECIAL!\"\n\nShe yelped as I came, covering my groan as I pumped her tight cunt full of cum. It was an exquisite kind of pleasure, one I would never want to end as I kept pushing into her, filling her with everything I had. When it slowed, with me out of breath on top of Rose, I kissed her tenderly. It was an act she was happy to return.\n\nSmiling slyly, I asked her, \"Is Gwen still watching?\"\n\n\"Uh huh, though it looks like she's on the hunt for a vibrator,\" Rose replied.\n\nWith some thought, I said, \"Good.\"\n\nThough not the funniest joke in the world, it was enough to make us both share a private laugh.\n\n***\n\nWhen you're at an orgy, sometimes it's best to join in, and sometimes it's just best to watch and see what was going on. Come across a sight as perfect as Cleo Price and Sasha Pearl locked in a passionate embrace and you'll understand the benefits of just letting something beautiful happen.\n\nOn the surface, the two of them couldn't have been more different. Sasha was a willowy, pale redhead, tall and gangly and carrying a modest pair of C-cup tits, with a goofy smile, freckles and large glasses. Cleo Price, on the other hand, was a muscular and tall black girl, curvy and fit with a big ass and even bigger F-cup tits. Sasha was timid but full of sexual energy, while Cleo was aggressive to a point where she easily hid how nervous she could be around guys.\n\nThey probably wouldn't be the kinds of people who'd hang out together if they weren't on the same cheerleading squad, let alone doing this with each other, yet here they were just utterly going to town on each other. They were kissing and caressing each other, eagerly licking at each others' necks and nipples while each had a hand buried between each others' thighs, fingering the other girl like crazy. It seemed like they were in competition with each other for who could make the other cum the most, and at the moment it appeared Sasha was ahead about 4-2, not that Cleo was complaining.\n\nWhile they had their own little slice of heaven on the blanket they did this on, I just sat nearby watching and slowly jacking my cock, thoroughly enjoying the show. Occasionally they'd look over at me and smile, giggling softly to each other before continuing to go at each other. They made no effort to make more of a show of it for my benefit, and I wouldn't have asked them to; their fun was their fun. They didn't ask me to leave, though, and that was enough to keep me there, watching and masturbating, trying to figure out what my next move was going to be.\n\n\"That cock looks like it could use some attention.\"\n\nThat, for example, was a fine next move.\n\n\"I won't say no if you're offering, Jade,\" I said.\n\nJade Alvarez stood beside me, her mouthwatering pussy with its field of jet black curls around it almost at my eye level. If I wanted to lean over and lick it, I could have, but I was rather more interested in taking in her body. A Latina with soft brown skin, a round ass and some of the softest, tastiest DDD tits I'd yet encountered, she looked down at me with that prettiest of pretty smiles and nodded.\n\n\"I'm offering,\" she said. Her body was slick with sweat and her hair, long and black and silky, was a mess. She had the look and the smell of a girl who'd just been fucked a lot, enough that it made my cock twitch more for her in hope and anticipation.\n\n\"Then how do you want it?\" I asked.\n\nShe answered me simply by walking over to me, standing over my cock and kneeling down. I entered her easily, her pussy as warm and familiar as coming home, and I let out a contented sigh as she settled herself entirely on my ten inches.\n\n\"This is nice,\" she purred, kissing me sweetly. \"Though if we can, you know, rotate some so we could watch those two, I'd like that.\"\n\nI did as she said, rotating just enough that both of us could watch Cleo and Sasha fuck each other silly while she rode my lap. Her tits, so juicy and tempting, bounced in my face, and given an opportunity like that I couldn't help but latch my lips onto the first nipple that got close enough. Between the pussy on my cock, the nipple in my mouth, and my hands on her perfect, juicy ass, you could say I was pretty content right then.\n\n\"So how's your first orgy treating you?\" Jade asked, groaning as she fucked me.\n\nI let go of her tit. \"Really, you want to ask me while I've got my mouth full?\"\n\nShe laughed. \"You can fill it again. I just wanted to... damn that's some nice cock... just wanted to see how you're doing.\"\n\n\"How do I feel like I'm doing?\" I asked.\n\nJade's attention was on Sasha and Cleo, both of whom looked like they were on their way to some pretty earthshaking orgasms. \"You feel like you're having the time of your life.\"\n\n\"Well...\" I groaned. \"I am.\"\n\n\"Never thought you'd see something like this a year ago, did ya?\" Jade asked.\n\n\"Oh, I thought I'd see it. I just thought I'd be watching something like it on Pornhub or something,\" I admitted.\n\nJade began riding me harder as it looked like Sasha and Cleo were about to cum. \"Well, I'm glad you're here, and not just because you've got the nicest cock in school, but, because I like to see it when good things happen to good people. And, whatever mistakes you've made this year aside, you're a pretty good person, Ryan.\"\n\nWith Jade being one of the most genuinely kind people in school, the only appropriate response I had was, \"Thanks.\"\n\n\"You're welcome,\" she said, kissing me again. It was a nice, long kiss, our tongues gliding against each other tentatively at first, then more enthusiastically as we began to make out harder.\n\nSqueezing my cock with her pussy as she bottomed out on me, Jade said, \"You know... if you're looking for a kiss at midnight, I'd be more than happy to steal you for one. I know I'd have to get in line, but-\"\n\n\"There's a line to kiss me?\" I asked.\n\nJade nodded, fucking me slightly harder, \"You're a well-hung guy who's good at fucking, is kind of cute and is really nice at an orgy with only girls; you bet your sweet ass there's a line. I know Dakota, Kaitlyn, Sarah, Haley, Brooke, Cleo and Rose all got designs for you, but if it's up to me, I'd like to steal you for that midnight kiss, get the new year off to a good start. What do you think?\"",
        "What I thought was that it was a strange thing to be wanted by so many girls, even if it was just for a kiss.\n\nWhat I said, or what I meant to say, didn't get said because that was the moment when Sasha and Cleo both catastrophically came, their cries and screams sending a chill through me that almost drove me wild with lust. I grabbed Jade and started fucking her harder, ready, waiting, needing to cum.\n\nI was close, so close, so ready for her to cum and set me off and get me going and-\n\nPetite and naked Alyssa Nguyen ran into the room, beaming and yelling, \"Holy shit, guys, you gotta see this right now! Never seen anything like it, I mean, fuck, hurry, it's awesome! In the bedroom! Now, before it's too late!\"\n\nCleo and Sasha and the rest of the girls in the room looked satisfied enough to drop what they were doing and go see what was happening.\n\n\"Fuck,\" I muttered, cursing at the timing. Part of me definitely wanted to know what was going on in the other room, but I also really wanted to finish fucking Jade.\n\nJade obviously saw the same conundrum. She blew a lock of hair out of her eyes while thinking about it, finally saying, \"You want to see what's going on too?\"\n\n\"Yeah,\" I admitted begrudgingly.\n\n\"You know, we can still probably fuck in there while we watch, right?\"\n\nI thought about it. \"Fuck, I love your problem solving skills.\"\n\nJade shrugged, kissing me. \"What can I say? It's a gift.\"\n\n***\n\nAfter a while in life, certain memories have a way of blending together, but as a general rule I've found that you most clearly remember your firsts. I clearly remember the first time I had sex, the first time I had anal sex, my first time with Josie, with Tori, with... well, you get the idea. Those firsts have a way of sticking with you better than a lot of later experiences, and will generally remain sharp in your memory over the years.\n\nHaving seen and done a lot before New Year's Eve, I didn't expect to add any true firsts to my memory bank, but I hadn't anticipated one thing.\n\nNamely, that I'd see my first ever in person fisting.\n\n\"HOLY SHIT!\" Addison Gonzalez exclaimed, watching as more of Brooke's hand slowly disappeared inside of her. The curvy Latina, normally so sweet and cute, was an utter picture of lewdness as she lay spread-eagle on the guest house's bed. Her normally exquisite makeup was streaked, her perfect dark curls splayed out all around her face. Wearing only her Homecoming Queen sash and tiara, she was otherwise completely naked. Every inch of her soft brown skin, her massive E-cups, and her bare, shaved pussy was on display for our viewing pleasure.\n\nWhen Jade and I first came in here after all the others joined, Brooke only had three fingers inside of Addison, but when we finally got a better view she'd gone up to four. The petite, pigtailed blonde with the cute smile and tight body looked like she'd lubed her arm up to her elbow, and like she was having the time of her life.\n\n\"Awww, come on, we've, like, all totally seen you take bigger than that,\" Brooke taunted, twisting her fingers around inside Addison, further preparing her hole.\n\n\"Yeah... but it's not every day you get most of someone's hand in you!\" Addison exclaimed.\n\n\"Hon', I think she's not stopping 'til she gets all her hand in you!\" Cleo quipped, stroking the side of Addison's face gently.\n\n\"I know, and I want it, but... fuck...\" Addison said.\n\n\"It's all right; I've got a lot of lube on me, and we'll take it slow, honest! Betcha you're gonna cum like you never cum before, too!\" Brooke said, smiling joyfully at the whole room.\n\nIt was crazy seeing all the other girls gathered in this one room around the bed, watching and encouraging Brooke and Addison, stroking Addison, urging her on. It was a spectacle I doubted any of them had ever seen in person, and it had a way of drawing attention. Maybe it drew their attention like a car wreck would, or maybe it was the pure eroticism of the moment, but it had a way of stealing everyone's attention.\n\nEven Jade's. I was a little miffed that she immediately jumped over to Addison's side, but knowing that the two of them were friends, I understood it. Jade stroked her hair, cooing to her calmingly, helping her through as Brooke began to slowly work her thumb in along with the rest of her fingers. I could've probably bent any one of these girls over and gotten off the good load of cum I'd been building up, and they'd no doubt have been eager to help, but it wouldn't have been the same.\n\nEspecially since I, too, really wanted to watch. What I was seeing wasn't the kind of porn I was usually drawn to online, but being reasonably open-minded I'd watched a fair few clips out of curiosity. Seeing it online was one thing, but seeing it happen in person? Well, that was something else entirely.\n\n\"How the hell did this happen?\" I asked no one in particular.\n\n\"The same way everything else happens. Somebody thought it might be cool,\" a cool, arrogant voice said next to me.\n\nI turned my attention to the voice and was met by Gwen Savage. Almost a foot shorter than me, the girl with the long, dirty blonde hair still had a sneer of supreme bitchiness on her otherwise pretty face. Despite all the action she'd gotten, she still managed to reapply her makeup a few layers thick, adding further to her trashy look. Naked and gorgeous as any of the others with her large, D-cup tits topped by firm nipples, round ass and glistening pussy with its full thatch of hair, on sight I wanted her, but in practice I'd kept my distance from her. She'd been a bitch to a lot of the other girls I considered friends, especially Sarah, and just radiated an aura of general unpleasantness.\n\nIt didn't mean I didn't want her, because, as stated she was still really hot, but it was something I wasn't hell bent on rushing.\n\nThough in my state of arousal, I was still taking her in, Gwen continued, \"We've all been talking about just having this big pile on of Addison in all her Homecoming Queen crap and she busted it out, and it was fun playing on her, putting toys and stuff in her, but then Brooke's got her brilliant fucking idea and says she's always wanted to try fisting, and Addison seemed down for it, so...\"\n\n\"So we're here,\" I finished.\n\n\"Yup,\" Gwen said.\n\n\"Yup,\" I agreed, watching Brooke slowly finish pushing her thumb into Addison. Though there was still a fair bit of hand to go, this brought out a round of applause that nearly covered for Addison's moan.\n\n\"Do you want me to say I'm sorry? Because I can say I'm sorry,\" Gwen said.\n\nI thought about this. \"Would you mean it?\"\n\nGwen huffed. \"I'd mean it!\"\n\n\"And would it just be to get my cock?\" I asked.\n\n\"Is that too much to ask for?\" Gwen asked.\n\n\"No, but it would be a bit shallow,\" I replied.\n\n\"Look, I don't apologize often, and when I came to you saying I was willing to apologize I meant it, but if you're gonna be an ass about it, I don't have to be here-\"\n\n\"You want to apologize? I'll listen,\" I said.\n\n\"Here?\" Gwen asked, eying the others nervously.\n\n\"Why not? You distracted?\" I asked.\n\nBrooke was slowly working the remainder of her hand in, the lube doing much of the work as it disappeared a fraction of an inch at a time inside of Addison. It was an odd, awe-inspiring sight, one that felt like we were waiting for the ball to drop on New Year's Eve. Slowly, slowly she worked her hand inside until...\n\nIt was gone. Only Brooke's wrist was visible sticking out of Addison's pussy.\n\n\"HOLY SHIT!\" Addison repeated, looking down in awe as Brooke began slowly rocking her hand around, thrusting it in and out a miniscule amount to the sounds of the rest of the room's cheers.\n\n\"Okay, I see your point,\" I said.\n\n\"Let's get a drink?\" Gwen suggested.\n\nI could've stayed in here, and sort of wanted to if just to see how crazy things were going to get from there, but since it sounded like Gwen wanted a heart to heart (or as much of a heart to heart as she could manage), I said, \"Sure.\"\n\n***\n\nI followed Gwen back to the kitchen where we both grabbed drinks from the fridge, her a beer, me a Coke. Then, hopping up onto the nearby bar, she cracked open her drink and took a long, chugging sip.\n\n\"I'm not sayin' sorry for who I am, because it's who I am and I don't plan on changin'. I've tried the nice and goody-two-shoes act before. It didn't take. Didn't suit me,\" she said.\n\n\"No, I don't expect it would,\" I said, taking a sip from my Coke.\n\n\"Even when I am bein' nice to people, it's got this way where it comes across fake and people don't trust it. It won't stop me from tryin' if nice is what I really mean to be, but it's annoying as fuck. So, I've stopped trying to look nice, and I just be myself. It doesn't mean I don't misread things sometimes. I just thought you were another fuckboy when I first saw you. A weird lookin' one, but, hey, fuckboys can come in all shapes and sizes. I thought you were in this for the pussy, the ass, whatever else you wanted, but you aren't fully, right?\" Gwen asked.\n\n\"Not fully. I have my fun. I like to make sure the girls I'm with have fun. I'm... trying to not deny who I am anymore either. This is me. I get that. I just don't like it when my friends are being disrespected, and that's a lot of what I've seen you do these past couple days,\" I said.\n\n\"I'm direct. Sue me. When I want something, you'll know it,\" Gwen said.\n\n\"Some people would say that's you being a bitch,\" I replied.\n\n\"People call any girl who don't take shit a bitch. Am I a bitch? Fuck yeah. I'm a bitch and proud. And being a bitch hasn't stopped you yet, has it? I see you fucking Dakota and Kaitlyn and Haley and they're some of the biggest cunts in school,\" Gwen replied.\n\n\"Cunts with a heart of gold,\" I amended, even if the words came across cheesy.\n\n\"I don't have a heart of gold?\" Gwen asked.\n\n\"Not that I've seen,\" I replied.\n\n\"Well, would that keep you from fucking me?\" she asked.\n\n\"No,\" I said. \"But I'd still like that apology you promised.\"\n\nGwen grumbled, \"I was getting there.\"\n\n\"Good. Then, have at it.\"\n\n\"I'm... I'm sorry I was such a dick to you and the other girls. I get that way in the heat of the moment sometimes, and these couple days've been all heat of the moment. I should've watched what I been saying to them and to you, especially since I didn't really mean anything by any of it, not truly. I'm sorry,\" she said.\n\nIt was the apology of someone who was accomplished at apologizing, and maybe not the most sincere one, either, but it also wasn't all lie, either. There was something in that voice that felt like the closest she could get to genuine, which had me hopeful. Gwen was definitely a different personality from the kinds of girls I was used to, but she wasn't evil, either. She was naked, and hot, and inviting, and we'd already done a little bit of fooling around. I was certain I'd tormented her enough.\n\nI took a sip from my Coke. \"Apology accepted.\"\n\n\"It's like that?\" Gwen asked.\n\n\"It's like that,\" I said, sliding closer to her. She looked good, and if I'm being honest, I already knew she felt every bit as good as she looked. Since I'd joined the party, I'd fingered her, made out with her, tittyfucked her and eaten both her pussy and her ass. She may have been a dirty, trashy kind of slut, but it sure put her in good company here.\n\n\"So, we're gonna do this?\" she asked, licking her lips and looking down at my cock.\n\nI walked right in front of her, spreading her legs on the bar to give myself a better view of her dripping cunt. Sliding my fingers between her thighs, meeting those perfect, moist lips and sliding inside, I asked, \"What do you think?\"\n\nGwen reached out and grabbed me by the back of my head, forcing me between her legs. \"I think it's high time you stopped teasing and we started gettin' down and dirty.\"\n\nDown and dirty. I liked the sound of that. I probably would've even commented on that if my mouth weren't so full of pussy then, but since it was I guess we'll just have to imagine what I might've said.\n\nShe may have had the look of white trash who'd been out in the sun for a while, but damn it if Gwen Savage didn't have one sweet pussy. I stayed buried between her thighs, hunched over and licking up her delicious nectar and wanting to make her squeal. I'd made her cum a couple times already in the last couple days, usually with others around or with encouragement or as part of a game, but right now with just the two of us here... yeah, I was prepared to get down and dirty.\n\nThat's why I wasn't particularly merciful on Gwen's pussy. There was little loving to it, just a pure, primal need to fuck and have fun with this bitchy girl. With two fingers slid deep into her pussy while my lips and tongue worked her clit and another hand working on her tits, I was plenty pleased with myself. The way her juices were flowing almost as freely as her foul fucking mouth, well, I knew we were off to a good start.\n\n\"Oh fuck, you fucking sonofabitch, you were fucking holding out on me, giving all these sluts your attention when you really wanted this shit, right? You played all fucking high and mighty, teasing me when you wanted to be all the boys who fucked me so hard? You just wanted to throw me around, fucking use me, choke me on your cock, fuck all my tight holes... fuckfuckfuck, keep going, there... yes... whatever you want, fuck, you can do it. You keep up with me, you fuck me good, you can do whatever you want, just drink my fucking pussy juice you fuckslut, like that, keep eating me...\" she groaned, running her fingers through my hair roughly.\n\n\"Anything, huh?\" I asked in one of my rare moments I came up for air. She was on the edge of a good cum. She felt it, I felt it, I could've done anything in the world to set her off and I wanted to make it a good one, but only when the time was right.\n\n\"Yeah...\" Gwen moaned, throwing her head back.\n\n\"Good,\" I replied, getting up and pulling her off the bar. She yelped at the suddenness of my maneuver, but I had enough control to keep her from falling (thank god she was as tiny as she was). She landed on her feet, stumbling only slightly as I pulled her over to the blankets that had been laid out on the floor. They were already a little moist, from sweat, from combined sex juices, some combination of the two, I didn't know, but I wasn't worried about any of that right now.\n\nI wanted to see what Gwen could do for me. I pushed her down onto her knees so her face was level with my cock. Her face had that perfect, trashy bimbo look to it as she eyed my cock up close with surprise, her mouth dropping open in an actual O of shock for seeing it this close up.\n\nTaking advantage of that O, I thrust forward, shoving my cock into her mouth. It was only a few inches (I wasn't going to be that cruel), and at first she took to it as if sucking on the sweetest of treats. After a moment, though, she spit it out, gasping.\n\n\"But... I neeeeed to cuuuuum...\" she whined, pouting up at me.\n\n\"Well, get sucking, do a good fucking job, and I'll make you cum so hard you won't see straight,\" I said.\n\n\"Fuck you,\" Gwen grumbled, leaning forward, her hands drifting between her thighs.\n\n\"No no no, no touching yourself. You can play with your nipples, but your pussy's off limits. I want you fucking gagging on my cock, make it sloppy, make it good, and I'll make you cum, I promise,\" I said.\n\n\"God, you're an asshole,\" she said.\n\n\"I thought I was an aggravating white knight,\" I replied.\n\n\"You can be both,\" Gwen replied, begrudgingly leaning forward and taking my cock back into her mouth.\n\nGoddamn, she was good at sucking cock. Her mouth was tight and hot, her lips and her tongue perfectly designed for sucking. It didn't take long for her nose to brush against my pubes as she indeed did gag on my cock. She'd come up for air dribbling saliva and coughing, the makeup around her eyes running with tears, but she went back to sucking me for all she was worth.\n\nTo her credit, she never tried to touch her pussy, even though the way she was writhing about on her knees told me her pussy desperately needed attention. One hand played with her nipples, but in an effort to help push me along, her other hand gently played with my balls.\n\nShe was good at it, too. I wanted to see how far she'd go with that. I pulled my cock from her mouth, rubbing it along her cheek as I hissed, \"Suck my balls.\"\n\nWithout even the slightest look of restraint or disgust, she went about doing exactly that. I had a feeling the way she was playing with me that it might be something she was into, and having only had limited experience with it so far I had to say, she was good. Really good.\n\nFuck she looked good. So dirty and an utter mess. Despite her complaints, in those rare moments I could see her mouth I saw a definite smile. Gwen was absolutely loving this, and even if it was a rare kind of encounter for me, I had to admit, it was a different kind of fun being with a girl who wanted to be fucked like this.\n\nKeeping with the spirit of it all, I grabbed a handful of her hair and pulled her away from my balls, just long enough to shove my cock back into her mouth. She took to it like a natural, sucking and licking and trying her best to keep pace as I fucked her face nice and hard. If I could have, I would have fucked her until I came down her throat, or all over her face, but that wasn't how this was going to go.\n\nContent that I'd given her exactly the face-fucking she was looking for, I pulled her off my cock and laid down on a blanket nearby. My cock stuck up thick and glistening above me, twitching and waiting for her.\n\n\"Well, if you want to cum, then you better sit on my fucking cock,\" I growled.\n\nGwen's face beamed with excitement, as if this were Christmas morning and she'd gotten exactly what she wanted from Santa. She crawled over to me, straddling me, rubbing her soaked lips up and down the length of my cock excitedly. Looking up at her with her tits hanging down, her face a mask of absolute lust, I think I might've actually gotten a bit harder, if that were even possible.\n\n\"You know, for what an asshole you've been, I should just leave you like this. I should just fucking grind on you, cum all over you and leave you high and dry,\" Gwen said bitchily.\n\n\"Yeah, but you won't,\" I said.\n\n\"Why not?\" she asked, challenging me with a smirk.\n\nTalking exactly how I knew she wanted me to, I said, \"Because you're a slut for big dick and right here's the biggest one you've ever seen. You could grind it and cum on me and walk away, but after knowing that everyone else at this party's had this cock inside of them except for you, I don't think you can take not knowing how much it'll make you scream once you've got it buried in your tight cunt.\"\n\nIt was dirty logic, but it was logic she couldn't argue.\n\n\"Fine. Let's see what all the fuss is about,\" she said, reaching between her legs and lining my cock up with her entrance. She ran the head along her slit, cooing softly when it accidentally hit her clit, before finding her entrance and pressing it against her tight lips.\n\n\"Fuck, that's big,\" she grunted, gritting her teeth and trying to force the head inside.\n\n\"You can't take it?\" I asked.\n\n\"I didn't say that, asshole,\" Gwen replied, forcing herself down and shoving a few inches of my cock inside of her. She was tight, but she was wet, so it went in easily, but... goddamn was it good. Forcing more of my cock in her, an inch at a time until she had my entire length, she finished, \"I just said you were big.\"\n\n\"Nice... nicely done,\" I said, looking down to where our sexes met. \"Wow.\"\n\n\"Yeah, that's some good fucking pussy, right?\" she asked.\n\n\"It's good, but not as good as this dick,\" I shot back.\n\n\"We'll see,\" she said, not even considering a slow start as she rode my cock hard. Considering all the teasing that had gone back and forth between us, I granted Gwen this indulgence. After all, I was past due for a good cum every bit as much as she was.",
        "\"FUUUUUUUUUUUCK THIS IS SO FUCKING GOOD!\" she cried out. \"Keep going like that, like that, like that!\"\n\nI didn't know who she was talking to since she was doing all the work, but with both of our orgasms building to a head I wasn't one to complain. I planted my hands firmly on her beautiful, bouncing tits, squeezing them, taking in their perfect weight and heft and just taking them into memory. I cursed myself for not having my phone with me (it must've been around here somewhere), but not too hard.\n\nIt was a good fuck.\n\nA really good fuck.\n\nHer pussy was perfection, hot and wet and squeezing me hard with every stroke. This was a girl who was built to be fucked hard and she knew it. It only took a few moments of hard sex with her to realize that I wasn't the one in charge of this encounter, and all the big, dirty talk I came up with couldn't change that.\n\nIn retrospect, I probably shouldn't have spent all my time at this party messing with Gwen.\n\n\"God, your pussy's so good!\" I groaned.\n\n\"The best you ever had, I fucking knew it, yes, yes, yes, fuck!\" she squealed.\n\n\"I don't know about... best... but so good,\" I groaned, no longer even trying to challenge her, just wanting to keep up with her as she bounced on my cock like crazy.\n\nFaster.\n\nHarder.\n\nHarder.\n\nShe was going to ride me to death, I knew it, but if death was the end then it would be an exquisite and rapturous one. Her sweat dripped down on me as she rode me harder and harder, her hips and ass a blur as she kept going with stamina that felt impossible. Impossible, at least, until she started to shudder as she fucked.\n\n\"Yes, fuck, gonna cum soon, you better fucking cum for me too, fill me up you fucker, you asshole, you beautiful, wonderful sonofabitch, I'm gonna fuck you 'til you cum in me, yes, yes ,fucking yes, right there, right there, FUCK YOU YOU FUCKING ASSHOLE, RIGHT THERE, FUUUUUUUUUUUCK!!\" Gwen cried out in orgasm, her pussy tightening around me so hard I couldn't help but cum myself.\n\nIt wasn't as hard a cum for me as it was for her because I was drawing on reserves at this point even I was unaware of possessing, but it didn't matter, because it seemed I had cum to spare.\n\nBreathing heavily, Gwen collapsed on top of me. She kissed my neck and my chest, giggling as we still lay connected.\n\nLooking down at me, her face pretty and a mess, Gwen smiled. \"Admit it; it was the best pussy you ever had.\"\n\n\"Possibly,\" I replied.\n\nShe snorted. \"Yup, best pussy you ever had.\"\n\n\"Are you always this arrogant?\" I asked.\n\n\"Yup. I think I've earned it,\" she said.\n\n\"Some of it,\" I admitted.\n\n\"Some of it works. I can live with some of it,\" she said proudly, squeezing my cock with her pussy. She sat back up on me, rocking her hips on my softening cock. \"Now, come on, get it back up, that was just the appetizer fuck, I want the main course.\"\n\n\"Then you might have to wait a while,\" I laughed. \"I've been running a marathon for close to two days now; it takes a little work.\"\n\n\"Nuh uh, no way, you gave all these girls their proper hardcore fucks and I want one for my own. You came in me once, and that's cool, but I want another, and I want it now,\" she said, still squeezing my cock and trying to ride a cock that just wasn't fully there.\n\n\"You can try, but I swear, it's gonna take a couple minutes,\" I said.\n\n\"Oh?\" Gwen pouted. \"Because if you could've manned up and gotten hard and fucked me 'til I came again soon, I was gonna let you fuck me in the ass.\"\n\nNow, I'd had a lot of fucked a lot of girls' asses over the past couple days, let alone this year, so you'd probably think that one more wouldn't be enough to fix my problem soon. You would also be fucking wrong. It wasn't just that Gwen's ass was one of the most perfectly fuckable I'd ever seen (it was), but, well, if you've read this far you probably have a fair understanding that I really consider a good anal fuck one of life's greatest pleasures, and that I was fortunate so many of the women in my life were into it.\n\nSo, did this start to reharden my cock?\n\nNo, not right away. I may have my moments of superhuman capability, as did most of the women I knew, but I was still human.\n\n\"How 'bout I give you eyes on the prize, see if that gets you motivated?\" Gwen suggested, spinning around on my cock until she was sitting reverse cowgirl.\n\nThis view helped. As did getting my hands on her perfect, big, round butt. Her hair stuck against her sweaty, tanned back, and even from this angle I could see the outer swell of her breasts, especially when she leaned back and put her hands on her head.\n\nIt wasn't record time for my cock to get back into the game, but it was definitely up there. Slowly my cock regained its usual hardness and vigor, and in a matter of moments I was once again impaled deep within her tight cunt.\n\n\"There...\" she purred, rolling her hips in a circle on my cock. \"Muuuuuuuuch better. See? I got the superior pussy. Completely verified, you love it, it loves you, I fucking win.\"\n\nI grabbed a handful of that hanging hair and hissed, \"You really are one cocky bitch, you know?\"\n\n\"A cocky bitch who made you fucking hard in no time flat!\" Gwen said in a sing-song voice, bouncing on my cock without a care in the world.\n\nShe had a point. She also really did have an amazing pussy. It gripped me like so few had, strong yet soft, welcoming yet intense. I realized I could fuck Gwen for a long time if I had the opportunity, and that that wasn't necessarily a bad thing.\n\nI'd had enough of her fucking me, though; I wanted to get in on this. I pushed her off of me to the side, then got up behind her on her hands and knees, sliding my cock back into her from behind. I grabbed her hips and began to pound her hard, wanting her to squeal, wanting her to scream.\n\nI succeeded on all attempts.\n\n\"GAAAAAAAAAHWD, FUCK ME LIKE THAT, FUCK, FUCK, FUCK ME YOU FUCKING ASSHOLE, THEN FUCK MY ASSHOLE, FUCK MEFUCKMEFUCKMEHARDER!\" she declared.\n\nI did fuck her. I fucked her hard, smacking her ass and pulling on her hair, pounding into her deeper and harder with every stroke until her words were no longer words but formless wails that communicated primal pleasure and little more.\n\nIt was around this time that I got the feeling that we might be being watched, but I didn't really care. I was fucking Gwen Savage and loving every second of it.\n\nAt some point in our fuck, her arms gave out, but rather than fuck her into the floor I pulled out of her and rolled her onto her back, climbing back between her legs so I could shove my cock back into her. I knew right away that Gwen wasn't exactly the girl built for missionary, but the way she squealed as I continued to fuck her, I didn't mind. She looked up at me so pretty, so vile, that when we started to kiss I knew she was one of the most fun people I'd ever had the opportunity to make out with. I loved her lips. I could've made a feast of her lips. Our tongues battled for dominance and never found a true victor, and that was okay, because it was in the battle that we had the most fun.\n\nWhen she came beneath me, I felt such a surge of pleasure and relief that I might've cum again myself were I capable.\n\nI didn't, though, because I had something to look forward to.\n\nGwen lay beneath me, writhing contentedly with my cock still buried deep in her pussy.\n\n\"Your ass,\" I growled.\n\n\"Yes, please,\" she said, stretching her arms out. \"Best. Fucking. New. Year's. EVER!!\"\n\nI didn't care what she thought of New Year's at this point, all I cared was about fucking this bitch as hard as we both wanted. There was little in the way of love or even affection to this, just a primal need from both of us to get off in the dirtiest ways we could. In its way, the only natural conclusion to this encounter had to be with my cock buried up her tight, tasty ass.\n\nI got off of her, then rolled her onto her stomach, pulling her onto her knees. I reached and found one of the many bottles of lube stashed about the room. There was whispering, no doubt from our audience who'd come in from the other room. Whether it was only one or two of them or all of them, I didn't care at this point.\n\nI'd save caring when Gwen's ass was loaded with my cum.\n\nI squeezed lube onto her ass, onto my cock, rubbing my cock between her ass cheeks, then against her hole.\n\n\"What, are you gonna tease me or are you gonna shove that in me?\" Gwen taunted, her voice husky.\n\n\"I was gonna shove it in you, but I don't know if you can take it,\" I retorted.\n\n\"Oh?\" she asked, turning her head to me and blinking. With an innocent, girly voice, she replied, \"You worried about hurting my sweet, cute, innocent little ass?\"\n\nShe squeezed me with her cheeks, playfully twerking on my cock.\n\n\"You and I both know that ass ain't innocent,\" I replied.\n\n\"No, but I can use it to get what I want. I can make your eyes roll back, turn you into an animal, I can even- MOTHERFUUUUUUUUUUUUUCKER!\" she screamed out when I thrust the head of my cock inside of her. It was a tight squeeze, so tight and perfect and hot against my cock. She beat on the floor, crying out from equal parts pleasure and pain as I thrust forward, claiming inch after inch of her slutty, bitchy ass.\n\n\"OH GOD, IT'S TEARING ME UP, SO FUCKING GOOD, YOU SONOFAWHORE, FUCK, KEEP IT LIKE THAT, LIKE THAT, YOU MOTHERFUCKER, FUCK YOU, KEEP SLIDING IT IN, LIKE THAT, FUCK ME, FUCK ME WITH THAT COCK!\" Gwen encouraged.\n\nAs encouragement went, I was sold. I was so sold, I bottomed out in her ass in what must've been record time for my first time with a girl, marveling at my swollen balls resting against her pussy and the way that tight little hole stretched to accommodate my girth.\n\n\"DAMN THAT'S FUCKING GOOD!\" she roared.\n\nI wanted to respond, to tell her off, to make her know that this was my fuck now. When the right words didn't come, a hard slap across her ass did. She snarled in response, looking back at me both scandalized and angry. I spanked her again. And again. And again. Harder, louder each time. Her snarl became a mewl, then a moan, and when I had her where I wanted her, I fucked her.\n\nGod damn did I fuck her.\n\nI'd fucked a lot of girls, but at that moment I was sure I'd never fucked a girl's ass harder than I had when I fucked Gwen Savage's then and there on the floor. It was a fuck like no other, the kind that drains you but keeps you going all at the same time, the kind that felt like it went on for hours. We were grunting, cursing, yelling fools, our hips a blur as I pounded into her with everything I had. Somehow she'd managed to pull herself up onto her hands, her massive tits now bouncing savagely with every one of my thrusts.\n\nI was close. I wanted more. I needed more.\n\nI grabbed a handful of her hair and pulled. She got the message easily. She pressed off of the floor and leaned her back into my chest, both of us kneeling, tightly pressed together as I fucked in and out of her ass. I let go of her hair and planted my hands firmly on her tits, squeezing them and pinching her nipples while she reached down to aggressively finger her clit. She turned to look at me, her eyes full of lust and something else, something more human than I'd seen in her in a while. I couldn't say what exactly it was, but it was enough that I mashed my lips against hers in a sloppy, ungraceful kiss that matched our sloppy, ungraceful fuck.\n\nOur orgasms, when they came, were every bit as explosive and messy. I grunted and roared as I filled her ass with my cum, while her pussy let loose with what looked to be a fucking geyser of her own juices.\n\nPanting and out of breath, I pulled out and fell on my back on the floor, while she collapsed on top of me, planting grateful, frantic little kisses on my lips while she giggled and cooed.\n\nIf that had been the end of it, I'd have called it an amazing holiday, but that wasn't how this day was meant to end at all.\n\nNot when the flashes of the phone cameras started hitting us. Or when they started clapping and cheering.\n\nGwen and I looked at the direction all this came from, and we saw all eleven of the other girls watching us.\n\nKaitlyn. Brooke. Jade. Rose. Sasha. Addison. Sarah. Alyssa. Haley. Cleo. Dakota.\n\nSome of them stood on unsteady legs as if they'd just been masturbating to what they saw, while others looked on with pride and lust.\n\nDon't ask me how, but somehow I managed to find my footing and stand up to look at them appreciatively. They all looked so amazing, so perfect, and having fucked each and every one of them, I knew that to be every bit as true as it seemed. I might just have been the luckiest man on earth.\n\nWith a low, pleased voice, I said to myself, \"Avengers, assemble!\"\n\nThough this got a few quizzical looks, Dakota understood immediately. Clapping once, she said, \"Damn straight, ladies, is this an orgy or isn't it? We've only a few hours of this year left; let's fuck!!\"\n\n***\n\nWhen a dozen hot, naked cheerleaders you've fucked charge at you with every intention of fucking you some more, you'd be forgiven for not remembering exactly every detail, but for those next few handful of hours before the old year was out and the new one rolled in, I remember distinct flashes of acts of debauchery I only imagined in my wildest dreams.\n\nDakota dripping my cum from her stretched-out asshole onto Haley's tits, only for Alyssa and Jade to lick it up as if it were the world's most delicious treat.\n\nBrooke and Sarah 69ing each other for what felt like an hour, each of them just making the other cum over and over until no one could take it anymore.\n\nAddison, Cleo and Haley wrestling all of their massive tits around my cock, all of them lubed up and perfectly fleshy until I came all over their faces.\n\nFor a good long while when I was between serious loads, I just lay down and let girls ride me. Kaitlyn naturally had to take a turn, but was soon followed by Gwen, Sasha, Brooke and Rose.\n\nAll of the girls getting together out by the pool, most of them naked or wearing whatever parts they'd scrounged up, most of them glowing with sweat, lube and sex juices, doing a dirty version of one of our school cheers while I filmed. Dear lord, I was definitely keeping that one for fun viewing later.\n\nAt one point, I was on the ground with all twelve of them on top of or pressed against me. I was blind to who was doing what at any time, but there were so many mouths, pussies, asses and tits pressed against me, fondling me, stroking me, rubbing up and cumming against me, I seriously thought I'd died and gone to heaven for a moment.\n\nAs midnight rolled around, we got a countdown live on TV. I matched the timer on my phone's camera to that exact moment, propping it in a corner of the room so it could get me and all of the twelve, naked, gorgeous women I was with.\n\nThe seconds ticked closer to midnight, and I could see more than a few of the girls jockeying for positions near me, looking to be the one to get to kiss me when it all ticked down to start the year off right.\n\n\"TEN!\"\n\nKaitlyn licked her lips.\n\n\"NINE!\"\n\nJade smiled at me prettily.\n\n\"EIGHT!\"\n\nDakota nodded authoritatively, looking ready to tackle some girls to get to me.\n\n\"SEVEN!\"\n\nHaley pursed her lips in anticipation.\n\n\"SIX!\"\n\nSasha and Gwen tried to push past each other.\n\n\"FIVE!\"\n\nRose eyed me confidently.\n\n\"FOUR!\"\n\nSarah smiled shyly at me.\n\n\"THREE!\"\n\nCleo squeezed one of her nipples.\n\n\"TWO!\"\n\nBrooke cocked her head to the side, sending her pigtails swinging.\n\n\"ONE!\"\n\nBetween \"ONE!\", \"HAPPY NEW YEAR!\" and the flash of my phone camera going off, there was a mad rush of flesh, first to me, then when someone found me, the other girls latching onto each other for that fateful New Year's Eve kiss. I could go and tell you who kissed me, but why don't we let your imaginations run wild with who *you* think I kissed (though between you and me, I think we all know the real answer). Suffice it to say, it was a nice way to kick off a new beginning.\n\n***\n\nAfter midnight, with the New Year declared and our energy finally completely drained, the rest of the evening sort of petered out. I know there was still some sex, some fun, a little partying, but with nearly two days straight of this, most of us collapsed exhausted into uneasy sleep. Personally, I was exhausted enough that it felt like I could sleep for days, but when I was naturally awake at seven in the morning, I knew that I finally had to get back to my everyday life.\n\nI didn't know how you were supposed to recover from the kind of sex I'd been having for the last couple days, but I'd find a way. It was a new year, one of new opportunities, but also a return to the daily grind. Mind you, my daily grind had improved immensely over the past few months, so it was one I was looking forward to, but it would have to do a lot to top these last couple days.\n\nI wasn't the only one up this early, thankfully. As I got dressed, I caught sight of Brooke hanging out outside, fully dressed and taking part in some early morning stretches, though if I'm being honest I was also pretty sure she was waiting for me. She waved to me, and looking to make as stealthy an exit as possible I went out to join her.\n\n\"You leavin'?\" Brooke asked me.\n\n\"Yeah. You?\" I asked.\n\n\"Yeah. Morning after's are always fun when you're stuck with one person, but when you got a dozen people, they're, like...\" she trailed off.\n\n\"They can go on, can't they?\" I asked.\n\n\"Totally,\" Brooke agreed. \"Need a ride?\"\n\n\"You mean, like, do I need a ride home, or...?\" I asked.\n\nShe giggled. \"Just a ride home, silly. I'm kinda fucked out for now.\"\n\n\"You?\" I mocked.\n\nBrooke laughed. \"I know, right? Gimme 'til tonight and I'll be rarin' and ready to, like, totally go nuts again, but I could totally use a long shower and a longer nap in my own bed. Totally.\"\n\n\"Totally,\" I agreed, making her smile. God did I enjoy making her smile. \"Hey...\"\n\n\"Yeah?\" Brooke asked.\n\n\"I don't really have a lot of money, right now, but... if you're up for swinging by IHOP on the way back to my place, I'll buy breakfast,\" I said.\n\nSquealing, Brooke threw her arms around my shoulders and kissed me. \"Ryan, I love you! I'd kiss you if I didn't, like, already do it. But, what's stopping me from doing it again?\"\n\nLeaning in, she kissed me again. Though it started off a quick and playful kiss, a \"Brooke King Special\" you might say, it soon transitioned into something much, much different. There was a lingering tenderness to it, a longing intensity that we'd never quite shared but often gotten close to. I knew things between Brooke and me had been transforming over time into something very different from where we started, but this was enough to tell me that I wasn't the only one who felt that way.\n\nWhen we finally parted lips, I must've looked every bit as confused as Brooke did. Unlike me, she tried to save it with an awkward smile.\n\n\"So, maybe we should, like, get out of here before IHOP, like, totally runs out of pancakes,\" Brooke said.\n\n\"Good idea,\" I replied, watching her as she turned and walked out of Dakota's backyard.\n\nTo myself, I muttered, \"This complicates things.\"\n\n***\n\nBreakfast with Brooke at IHOP wasn't nearly as awkward as I feared, and we were more or less our old selves once we got some food in us. Sure, there were strange glances here and there, and occasional sentences that we cut off when we didn't like where they were going. It wasn't completely unawkward, but it wasn't all that awkward either. Food helped bridge the gap and made it a pretty good start to New Year's Day.\n\nBy the time that Brooke dropped me off back at my house, there was a little of that strange energy between us back. When we kissed, it was still a friendly kiss, but one that still hid a little more that I don't think either of us fully understood. I considered inviting her in, to talk, to fuck, I dunno, but realizing that I needed some time to think about this (among many other things), I let her go her own way while I walked up the path to my house.",
        "I was lost in thought, considering how I was going to tell Josie about this (god did I need to hear her voice), when my year took yet another sharp turn that morning.\n\n\"Hey.\"\n\nThe voice was feminine, pleasant and slightly accented. Turning to the source, I met the very pleasant sight of the girl who'd recently moved in next door to me standing in front of her house. Beautiful, black, and with a tight, athletic body, I was somewhat surprised that I'd actually met this mysterious girl who'd been exchanging notes with me through our bedroom windows recently. I'd always thought I'd meet her someday, but part of me never expected that someday to actually come.\n\nShe was dressed for a jog in a sports bra that held her firm C-cups nicely, while her workout pants were tight and showed off her lean legs. Though exercising meant she'd tied her impressive lose afro back, it only highlighted her delicate face, deep brown eyes and killer smile.\n\nRealizing I'd been staring at her for a good few seconds, I said, \"Hey.\"\n\n\"So, you have a happy New Year?\" she asked, eyebrow raised.\n\n\"Yeah. It's a long story, but, something like that. You?\" I replied.\n\n\"Can't complain,\" she replied. \"A bit dull, since I don't know anybody here, but I can't complain.\"\n\n\"Well, you know me. Sorta,\" I replied.\n\n\"I don't even know your name,\" she said.\n\n\"And I don't know yours. Seems like a major oversight,\" I said.\n\n\"On both of us,\" she replied, her voice soft and silky. I could listen to her talk for ages, but exhausted and confused as I was, I could only do so much.\n\n\"Ryan,\" I said. \"Ryan Collins.\"\n\n\"Alice Talbot,\" my former mystery girl said.\n\n\"So... is this where we shake hands, or something?\" I asked.\n\nAlice smiled at me, amused. \"Or something? I don't know; what does 'or something' in this town mean?\"\n\n\"Sorry, I was just meaning to be... neighborly.\"\n\n\"I know. I was just having fun. I haven't been accustomed to fun for some time, so, forgive me if I'm not that great at it,\" she said.\n\n\"Don't worry about it. That was pretty good,\" I said.\n\n\"Good. For friendly physical contact, I'm afraid I'm a right mess after that jog, so unless you wish to smell of my sweat, perhaps we should postpone anything,\" she said.\n\n\"I probably smell worse,\" I said.\n\n\"Oh? Of what?\" she asked.\n\nOf sweat and pussy and ass and all sorts of things other girls wear and-\n\n\"Stuff,\" I replied.\n\n\"Then I guess you should take a shower too,\" she said.\n\n\"Guess so,\" I replied. I was tempted to make a comment about how we could have shared one, but not knowing fully where her limits were, I held back. For now.\n\n\"But... perhaps after we're showered, we can hang out? You could tell me all about this lovely town you live in and the people I need to worry about once school starts back up?\" she proposed.\n\nWhile that sounded like one of the most fantastic ideas I'd ever heard, I... well, I was exhausted. From two straight days of a whole lot of sex and a strange mix of emotions, I needed about a day of sleep to properly catch up with everything. I wanted to get to know Alice better, but today wasn't the day for that.\n\nHow to tell her this without pushing away a potential new friend?\n\n\"Can I take a rain check? I've had a couple late nights in a row and I really need to get caught up on sleep,\" I said.\n\nHer smile shrank, dejected, but didn't fully go away. \"A rain check. Okay.\"\n\n\"I'm sorry,\" I said.\n\n\"Don't be,\" she said, pulling the tie from the back of her hair and shaking out her afro. \"I understand; after all, it's not like we'll have a hard time finding each other.\"\n\n\"No,\" I said. \"But... give me a day... maybe two, let me sleep this off, and I'll be happy to show you the sights.\"\n\n\"The sights?\" Alice asked, eyebrow raised.\n\nI laughed. \"There's not much around Regan Hills, but there is some.\"\n\n\"You got a mall?\" she asked.\n\n\"Most of one,\" I replied.\n\n\"Then that's a start. A couple days... a trip to the mall... I'll hold you to that,\" she said.\n\n\"I'm good for it,\" I replied.\n\nAlice walked back toward her front door, turning back to flash me another great smile. \"I'll see you around, Ryan.\"\n\n\"You too, Alice,\" I said, liking how her name rolled off of my tongue.\n\nAs I went inside to my room, I couldn't stop kicking myself for how I should've handled the situation differently. Alice and I had been half-assed friends through our window for a little while now, and I shouldn't have brushed her off the moment we actually started talking, should I?\n\nStill kicking myself, I went into my room, ready to strip down for a shower and then pass out for a while.\n\nThat might've been easy, too, if I hadn't seen Alice through her bedroom window. Seeing her like this was nothing new, since it was more or less how we'd met and started communicating, but knowing she was about to take a shower I was seized by a conflicting set of instincts.\n\nThe decent one said to close my curtains and give her her privacy.\n\nA much less decent one told me to just sit and wait and see what was going to happen.\n\nBefore I had a chance to even consider these instincts, with her back turned to me, Alice removed her sports bra. All common sense went out the window then, and it didn't matter how much sex I'd had or how many naked girls I'd seen over the past couple days, I wanted one last look before I passed out. It was stupid, it was impulsive, and it would've gotten me in a lot of trouble if she saw me.\n\nWhich, a few seconds later, she did.\n\nLooking over her shoulder, Alice saw me and smiled.\n\nI was fucked.\n\nShe started to turn toward me.\n\nOkay, maybe I wasn't *that* fucked.\n\nWith an arm covering most of her nice, firm breasts, she bent over and wrote something on the small white board she used to pass notes to me with, then placed it in the window.\n\n'NAUGHTY BOY'\n\nThen, certain that I'd seen the message, she closed her curtains.\n\nI sat down on my bed, sighing hard. Something told me that whether I wanted it or not, Alice Talbot was going to make the next half of the school year more interesting than I'd expected.\n\n***\n\n(Author's Note 2: Writing this story is something I do in my spare time for fun, so if you're enjoying this, please, please, please drop some stars, reviews or shoot me some feedback, as they really keep me going (and please vote on any earlier chapters you enjoyed if you haven't already!). Though I may not always respond, I do love hearing from all of you and seeing that you're enjoying the series. It motivates me to continue writing more. You've all been wonderful and I can't thank you enough for all of your kind words and encouragement and yes, even the constructive criticisms!)"
    ],
    "authorname": "aimingtomisbehave33",
    "tags": [
        "anal",
        "big cock",
        "big tits",
        "cheerleader",
        "creampie",
        "fisting",
        "group sex",
        "high school",
        "slut"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/senior-year-memories-ch-26"
}
{
    "title": "Alison",
    "pages": [
        "Brrr brrr. My phone buzzed on the table in front of me. No one else in the room seemed to notice, more engrossed in the latest innovation from a regional office than to worry about the noise from the end of the table. As the chief finance officer, the other members of management only really cared what I thought when something effected the profit margins. Discussions on Innovations such as these didn't need my input so I could retreat in to my own world, keeping half an ear open of course, in case I was asked the ever important question: 'what does this do for our profit?'\n\nI flipped the phone over. Alison. Strange. We'd been seeing each other for about a year, not living together as such, but we each had keys to the other's flat. During the day however, she, like me, was usually too busy to text unless it was a real emergency. \n\nI opened the text, slightly concerned at what it might say, but it simply said: 'I've got a surprise for you when you get home.'\n\nHuh?!\n\nI looked around the room. Everyone was concentrating on Frank, who was continuing to present what the regional office had come up with and were suggesting the company try adopting. Nothing for me to be involved in so I text back: 'Are you ok? What surprise?'\n\nWhile I waited for a reply, I though about Ali. Blonde, petite, slender, and far too attractive and intelligent for me, we met through mutual friends at a dinner they were hosting. It transpired my mate Alex, and his wife Lucy, were trying to set us up. As we were the only two single people there, this fact became very obvious, very quickly. But luckily we hit it off, and a year later we were still going better than ever so I guess they knew what they were doing.\n\nBrrr brrr. The phone buzzed again. I looked down. This time there was no message, just a photo. A photo of some high heels. Black. Elegant. The type Ali might wear, but only on special occasions. I would describe them as 'fuck me heels'.\n\nHuh? Why are they a surprise? Maybe she's booked us a dinner this evening and that's what she was going to wear. \n\nI text again: 'Very nice! Are you wearing those tonight? What is the surprise?' \n\nWhile I waited again for a response I thought about my girlfriend some more. At 26 she was two years younger than me, but already considered a high flier in the legal firm she worked for. Earlier this month, at one of her work functions, I was told by a couple of her colleagues that her physic and size were her greatest asset. With someone so petit and delicate looking, clients, judges, other lawyers imagined an easy ride. Apparently no one got it. They told me I should come and watch her at work, I probably wouldn't believe what I saw.\n\nI began to imagine what dress she might go for. The short green one, which showed off her legs to perfection, the backless blue one, which was cut so low to her bum you would swear you could see cheek, or my favourite, the tight black one, which accentuated her b-cup tits and toned, athletic figure wonderfully? Perhaps she's bought a new one?\n\nI was shaken from my day dream by another buzz of the phone. Again no message, but this time a photo of two pairs of handcuffs. Now, this was getting interesting and I felt my cock began to stir in my trousers.\n\nFrank had finished speaking, and now there was a discussion at the table. I zoned it completely out and thought about those handcuffs. That was a slight surprise, but we had tried light bondage a couple of times, using my ties and her scarfs so this wasn't completely new. Maybe she was trying to build anticipation, tease me? What ever the reason I liked it, and as long as the result was sex with my gorgeous Ali, I was happy with anything.\n\nI sent another message back: 'fantastic! Can't wait!' Followed by a winky emoji. \n\nEven before I'd put the phone down it buzzed again. As looked at the third photo I choked out loud. A butt plug.\n\n'Huh!'\n\nEveryone turned to look at me. I said the only thing that came to mind. 'Some stocks I was watching have dropped.' \n\nMany in the room smiled, some rolled their eyes, all turned their eyes back on Matt at the front who had begun a new presentation.\n\nA butt plug! That blew me away. That was definitely new. How could I respond? What did she want me to say? \n\nI looked closely. It was red, cone shaped, with a flat base, and it looked rather large at its widest. I wondered what it would look like sliding in to Ali's most sensitive hole.\n\nI thought back to the one and only time we'd discussed anal sex. Or rather the one and only time I'd drunkenly told her my fantasy involving bum fun, and she simply nodded and smiled. I was mortified the next day, apologising profusely, although, thinking back, she'd only said, 'OK. No problem.' And that was that.\n\nThis however, made things very interesting.\n\nBefore I could even formulate a response though, she sent her fifth and final message: 'I'm at your flat waiting. Don't be long!'\n\nI text back, and then a few more times, but no there was no reply to any of them.\n\nI looked at the clock. 3.47. Two questions concerned me now: how had she got home from work already and how could I join her?!\n\n*******\n\nI managed to escape about half an hour later, once the presentation has finished and any questioned had been answered. I told the other guys in the office I had some data to crunch and would finish it at home. They grunted an acknowledgement which meant I was free to find out what awaited me at home.\n\nA twenty minute tube ride followed by a quick walk, and I was standing out side my flat. Keys in hand I apprehensively opened the door and stepped inside. Nothing seemed especially different. I glanced around the living room, which I could see from where I was standing but she wasn't there. I then carefully walked along the corridor to my bedroom, assuming this would is where she would be. The door was closed, so I grasped the handle and opened it. \n\n'Whoa...' \n\nTo say I was shocked was an understatement. I tried to speak, but no words would come out. Ali was on her knees on the bed, bent over, with her head on the covers. Her hands were handcuffed in front of her to the headboard, her back was arched, and her butt facing towards me. She was naked, expect for the heels from the earlier photo. Her knees were apart so her pussy and butt were delightfully exposed.\n\n'This...', I began, but she interrupted me.\n\n'I am so sorry Master. I know I've been a bad girl. I deserve whatever punishment you decide.'\n\nPunishment? Bad girl? Master!?!\n\nI tried again. 'I...'\n\n'I know you will deal with me properly master.' And with that she turned her head slowly towards me, winked at me, and smiled. She held my gaze for a few seconds then quickly turned her head back round and faced the covers again.\n\n'Oh,' I thought. I see. It's like that.\n\nI now noticed her ankles had cuffs on them too and there was a bar between them, stopping her closing her legs even if she wanted too. As I watched, it became clear it was difficult for her to move comfortably, but she looked incredible. Restrained in the way she was, her athletic body was stretched to its limits, and my previously semi hard cock was now straining against my trousers.\n\nI looked over to the bedside table, and noticed the objects lined up. As well as the red butt plug from the photo earlier, there were two other plugs, some anal beads, some small keys and a bottle of lube.\n\nI wasn't really sure where to start, but I thought I should play along with the roles she had created. \n\n'You're right.' I started. 'You have been a very bad girl but don't worry, you will be dealt with properly.' And with that I walked across the room and stood behind her at the foot of the bed. I reached towards her upturned butt and gently ran my fingers and hand across her skin. She moaned. I continued this for a few moments and then took one finger and ran it downwards between her cheeks, over her winking hole, between her pussy lips and finally gently stroking over her clit before moving it away. \n\n'Ahhhh!' She sighed loudly.\n\nVery slowly, I did this a couple more times, generating whimpers and gasps each time, and then when I thought she would least expect it, raised my hand above my head and bought it sharply down in the right cheek.\n\n'Smack!'\n\nAs I did this I held my breathe as I wasn't fully convinced how she would react. To my relief she simply drew in a short intake of breathe, and moaned again with contentment.\n\n'Count each smack,' I informed her. 'There will be 10 in total.'\n\n'One.' She said in a breathless whisper.\n\n'Louder.'\n\n'One.' She said again.\n\nI then quickly gave her the second smack. This time to the left cheek.\n\n'Ohh...Two.'\n\nI wanted to mix it up, so went back to gently stroking her skin, this time across her back and down the backs of her thighs too. I ran my hand up between her cheeks again, flicking at her clit and ticking her ass hole. She continued to elicit sighs and gasps. My cock was now pulsing in my trousers.\n\nI gave her three more snacks, each one was followed by her count.\n\nSmack! 'Three.'\n\nSmack! 'Four.'\n\nSmack! 'Five.'\n\n'Good girl,' I told her 'well remembered.'\n\nI teased her legs, back and butt some more, and at differing intervals I threw in the last five smacks. She counted for each one, but each number seemed to be more breathless than the last. \n\nOnce I finished, I looked closely between her legs. She looked wetter than I think I'd ever seen her. The whole of her body was glowing. She looked radiant. I desperately wanted to dive in for a taste, including flicking my tongue over that most intimate hole. I will, I thought, but not quite yet. \n\nThe room had become very warm as I had shut the door when I came in, and I wanted to get out of some of my clothes. \n\n'I will now be removing my tie, shirt, shoes and socks,' I told her 'but my trousers will be staying on for the moment. You're not getting my cock...yet.'\n\n'Oh please master,' she moaned, 'I'm so wet. I need your big, thick cock inside me!'\n\nThis was definitely not the Ali I knew, but I can't pretend I wasn't enjoying it.\n\n'Oh really? You need it, but do you deserve it little one?'\n\n'I don't know master,' she replied, 'but just think how easily it would slip in. How easily you could slide it in and out, in and out...'\n\nI finished undressing. 'Right, that's enough from you. She fell silent. 'You don't deserve my cock yet, but I think I do deserve a taste.'\n\nI climbed on to the bed behind her and got on to my knees. Her skin glistened in the light, and her tightest hole clenched and contracted involuntarily. I placed my hands firmly on her toned butt, and prised the cheeks further apart. Her asshole winked and spasmed even quicker. I lent in and gave the hole one slow lick.\n\n'Ohhhhh! That feels incredible.'\n\nI took that a sign to continue but kept in role: 'Silence little one. This is for my pleasure, not yours.' That was plainly not the case but I thought it sounded good.\n\nI continued my assault on her bum hole, slowly at first, but soon speeding up the pace of my licks. She squirmed deliciously in her restraints, moaning and gasping as I lathered her tight hole with spit. I moved down to her pussy, and realised for the first time that she was completely hairless. I didn't think it was possible, but this made my cock strain even harder against the confines of my underwear.\n\nI stuck my tongue in to her pussy and licked hard. As I did this I bought one thumb up and began to strum lightly on her clit. The other thumb I moved towards her now very wet butt hole and slowly circled it around and around. \n\nShe went crazy, panting loudly and bucking against her restraints. 'Ah...ah...ah!' I didn't want her to cum so soon, at least not until we'd explored a bit more, so I stopped licking and drew my thumb away from her clit. \n\nI kept my other thumb on her asshole though, and thought I might as well see if we can move this up another notch. I circled a few more times and then started to ease the thumb in to the quivering hole. She moaned again, but not like before. This one came from deep in her chest. I took that as another good sign.\n\nThe muscles of the ring flexed and clenched around the digit. I pushed passed the knuckle and then right to the base. My thumb was in my girlfriend butt?!? If this wasn't surreal, I was sure what was.\n\nI began working it in and out.\n\n'Oh, oh, ah, ah, ooooh.' She pushed her ass back towards me as best she could considering how she was tied, and her asshole felt like it was trying to suck my thumb in as far as possible.\n\nAs much as I was loving this there was more fun to be had. I turned my attention back to the bedside table, and specifically the butt plug. I pulled out of her with a small 'slurp,' and reached over to the table. I grabbed the lube, one set of anal beads and the plug. I wasted no time in flicking off the cap, and drizzling a liberal amount of lube directly on to her butt hole. It stared running down her crack and dripping on to the mattress, so I used my thumb to catch the drips then massage it in to her anus. \n\nWhen I thought I'd used plenty of lube I picked up the beads and looked at it more closely. It was blue, with 5 rubbed balls slighted larger than a marble, all attached together and a hoop at the end.\n\nI pressed the first ball up against her butt and gently pushed. It slipped in quite easily. \n\n'Ooooh.' \n\nI pushed ball two, which also went in with little resistance. I started to do the same with the third ball and realised they were graded slightly, meaning each ball was bigger than the last one. I pressed it against the winking hole, but this time needed to push a little harder: it also slipped in. I decided to tease a little a rather than going straight for the forth bead, and I pulled two beads out and pushed them straight back in again. \n\n'Ahh...oh...oooooh!' \n\nI did this a few times and she moaned louder.\n\n'Ahhhhh...oooh!'\n\nI then pushed the forth bead up against her butthole. This had the biggest circumference yet, and met with the most resistance. With a small bit of force, the muscles stretched and widened, and the ball was sucked in. Ali let out a small squeal but then gently sighed\n\n'Eee!...Ahhh.'\n\nI immediately moved on to the fifth and last bead. I rested this up against her hole. In difference to the others, I wasn't sure Ali would be able to take it in, but she was clearly loving the situation so I was determined to give it a go.\n\n'This is the last bead little one. It's rather large,' I chuckled, 'do you think you can take it?'\n\n'I don't know sir.' She said, but her words belayed her actions as she pushed back harder against my hand.\n\n'Well, we're going to try.'\n\nI held the last bead firmly, placed my hand on her lower back, and started to gently twist it in to her.\n\n'Owww...oh.'\n\nHer ass stretched delightfully wide, yet there was still further to go.\n\n'Oh...ahh...oh...ah!'\n\nShe was panting heavily and squirming around. \n\nSlurrrr...pah.\n\nThe final bead slipped in. I couldn't believe it, my previously anally avoiding girlfriend now had a set of beads in her ass. My cock was bursting the zip of my trousers it was so hard. I just had to fuck her.\n\nI slid off the bed, unbuttoned my trousers and quickly dropped them and my pants. My cock sprang free, hard, throbbing and ready.\n\nI climbed back on the bed, got behind her and positioned myself at the entrance to her dripping pussy. I knew that even with how tight she was and how thick my cock was, her wetness would mean I would slide right in. I pushed slowly and her pussy engulfed my cock all the way to the hilt in one thrust. \n\n'Ahhhh!' It was my turn to moan. \n\nI kept my left knee in the mattress but while still fully inside, got up on to my right foot. This gave a better angle.\n\n'Please fuck me sir!' She whimpered.\n\nI didn't say anything. I simply pulled back slowly until only the tip was inside, and then begin to pound in to her. Hard.\n\n'Ngh...ngh...ngh!' I knew I wouldn't be able to go on too long as I was already close to cuming. I had already decided I was saving my jizz for her ass.\n\n'Ngh...ngh...ngh...ahhhhhhhh!' Ali however obviously was even closer that me as she started to cum. As she did I grabbed the anal beads and pulled them out of her ass. She came really hard. \n\n'Ahhhhhhhhhh!'\n\nI allowed her to finish and then pulled out.\n\n'Naughty girl, cuming with out my permission.' I hadn't actually said she couldn't cum, but really, who cares. 'How many spanks should you get as punishment?'\n\nShe didn't answer. \n\n'Quickly girl!'\n\n'Ten!' She blurted out.\n\nIt seemed reasonable.\n\nThwack! Thwack! Thwack!\n\nI didn't spank her very hard, just enough to bring the pinkness back. \n\nThwack! Thwack! Thwack!\n\nI could her cheeks glowing delightfully.\n\nThwack! Thwack! Thwack! Thwack!\n\nI reached over to the table for the keys, undid the ankle bar first, following by the two handcuffs. She turned over and looked at me with a mixture of surprise and disappointment. \n\n'Don't worry,' I said, 'we're not done yet.'\n\nThe smile crept back on her face.\n\n'Oh no sir,' she smirked, 'what are you going to do now?'\n\n'Get in your back, legs in the air, hold your ankles.'\n\nShe rolled on to her back. I saw her tits for the first time this afternoon, round and pert, like two small melons. Her nipples were rock solid, and looked deliciously inviting. I leant over her small frame, placing my hands on either side of her, and, taking my weight on my arms in a press up position, sucked on one of them.\n\n'Oooooh. Yeah!' \n\nI moved across to the other boob and gave that nipple a hard suck too. She moaned again.\n\n'Ooooh!' \n\n'I thought I said to get on your back, put your legs in the air and hold your ankles?' I questioned. \n\n'Please suck my tits.'\n\n'Do I need to spank you again?' I reminded her.\n\nI moved out of her way and she complied straight away.\n\n'Pull you ankles further back!' \n\nShe did.\n\nGood god, what a sexual vision she was. Tight, toned legs, heals on her feet pointing upwards. Her slightly reddened pussy and ass was open and exposed, and her delicious tits looked ready to suck.\n\nI squirted some more lube towards her asshole and rubbed it around, ever so often using my slippery fingers to probe inside.\n\n'Ooh!'\n\n'Oooh!'\n\nI pulled my fingers away which elicited a moan of disappointment, however they were quickly replaced by the butt plug which I was holding in the other hand. It was obviously cooler than my hand and there was a sharp intake of breath when she realised what it was. \n\nI didn't say anything, but started to push the plug inside her. \n\nThe first inch went in relatively easily, but as it was quite wide it tapered sharply. Her ass quickly became as stretched as it ever had and I continued to push and twist.\n\n'Ooh...ooh.' \n\nI was amazed she didn't drop her legs at all, but instead gripped those ankles like a vice. \n\nSoon it was close to the widest part and as I pushed past, the muscles contracted and enclosed around the plug. She moaned softly. All that you could see now was the the flat base resting against her butt.\n\nHer pussy looked incredibly inviting so I wasted no time in dropping my head and going back in for a lick.\n\n'Hmmm. That tastes delicious. How does it feel?'\n\n'Full. Very very full.'\n\n'Ali?' I said dropping out of character, 'have you ever had a butt plug in your ass?'\n\n'No.'\n\n'What about anal beads?'\n\n'No.'\n\n'What about a cock?'\n\n'No.'\n\n'Would you like a cock?'\n\n'I'd like your cock.' She widened her legs a bit, looked up and smiled at me.\n\nI was so relived to hear that. I'm not sure I'd have coped if she'd have said no. \n\nAlthough the plug had only been there a short time I was ready to replace with my rock solid cock. I twisted it slightly and pulled. \n\n'Ngh.' She grunted.\n\nIt popped out.",
        "I lined up my cock with the entrance to her hole. I rubbed it around a bit, it was still very lubed up. The head of my cock was engorged, and the rest of it looked longer and thicker than I think it ever had. I didn't think it would take either of us long to cum.\n\nI pushed slowly in my girlfriends hole.\n\n'Ohhh yessss!' She hissed out as the head found its way inside. I couldn't believe how much she was enjoying this. I continued to slowly push more and more of my thickness up her hole. The lube was working wonders. \n\nVery slowly I pushed all the way inside until I was balls deep. I slowly withdrew a bit and again pushed back in.\n\n'Ohhhh.'\n\n'Ahhhh!'\n\nI grabbed her ankles myself, pushed them back further and I began to slowly piston my way in and out of her.\n\n'Mmmm...ngh...ah...ah...ah...ohh! Fuck me... fuck me... fuc... ohhh... fuck me!'\n\nShe was whimpering, grunting and moaning under me, shouting louder and louder. I took one hand off her ankle and she started to drop it.\n\n'Get those legs up!' I shouted at her. Immediately the legs returned to their original position.\n\n'Hook your arms under your knees and pull them back as far as you can go.' She was a high school gymnast, and although it may have been a while, her regular yoga and work out sessions kept her as supple as ever. She stretched her legs back even further and was almost bent in half, ankles practically by her ears.\n\n'Good girl!'\n\nI moved my thumb towards her pussy and started to rub her clit vigorously. We were both already very close, but this seemed to tip her over the edge.\n\n'Urh...urh...urhh...ahhhhhhhh!!'\n\nShe came hard. Her ass muscles pulsed and spasmed around my thrusting cock, gripping it tight. This only resulted in tipping me over the edge too, and while still pistoning in and out, I spurted again and again, deep inside her butt. \n\n'Urh... ahh... ahhhhhhhhh!'\n\nWe slowed and finally stopped. I gently pulled my cock out of her butthole. It gaped slightly and winked at me.\n\n'Oooooh.' Ali sighed and breathed out slowly, 'That was...I'm not sure there are even words to describe it. I feel used!' She dropped her legs and winked at me, 'But in a good way.'\n\nI crawled up next to her and put my arm across her, giving her tits a quick grope as I did.\n\n'I can't believe that just happened.' She said.\n\n'No, neither can I.'\n\n'I was worried when you got home you'd throw me out, that you'd be disgusted by what I was suggesting.'\n\n'Hah,' unable to hide the smile from my face, 'I'm not sure there's a heterosexual man alive who'd have done that. You looked too god damn gorgeous.'\n\nWe lay there for a while, naked, just listening to each other breathing.\n\n'So,' I said, the grin spreading across my face, 'are you ready to go again?'\n\nShe turned to look at me and held my gaze.\n\n'Damn right!'"
    ],
    "authorname": "JessieT",
    "tags": [
        "anal",
        "anal sex",
        "tied",
        "handcuffs",
        "spread",
        "stretched",
        "buttplug",
        "spank",
        "ass",
        "asshole"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/alison-6"
}
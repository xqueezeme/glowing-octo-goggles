{
    "title": "Stir Crazy Ch. 05",
    "pages": [
        "If you happen across this story and haven't read the first four installments, what are you waiting for? All the backstory and lots of sexy escapades can be found therein. And, as always, share your comments and ratings. Yours truly, Petitmort\n\nThe morning light filtered through the Linden trees that lined West End Avenue, bathing Juliet's apartment in a golden glow. Wearing a creamy lace camisole, Juliet walked from the bedroom, across the living room, and into the kitchen. Her sister Nikki was at the kitchen counter, chopping vegetables, her auburn hair falling luxuriously over her shoulders. A peach-colored, satiny pajama top framed Nikki's full breasts and stopped just north of her long, shapely legs.\n\n\"Bonjour! Tu dors bien?\" Nikki called out in a singsong tone. (Good morning! Did you sleep well?)\n\n\"Oui,\" answered Juliet. \"Est-ce qu'il ya du caf\u00e9?\" (Yes. Is there coffee?)\n\nNikki nodded towards the French press near the sink. Juliet poured herself a cup and brought it to her lips, leaning against the kitchen counter next to Nikki.\n\n\"Qu'est-ce que tu fait?\" Juliet asked. (What are you making?)\n\n\"Ratatouille aux oeufs poch\u00e9s,\" Nikki answered. (Ratatouille with poached eggs)\n\nJuliet smiled. She was used to her sister, a professional pastry chef, doing magical things in her kitchen. Whenever they were together, Nikki would provide the most delicious meal in the French country style, just like their mother used to do. It was her way of expressing love and it always gave Juliet a warm, nostalgic feeling.\n\nNikki was slicing a half dozen chanterelle mushrooms, her knife hand moving swiftly and efficiently, chopping and scooping the mushrooms into a skillet with onions saut\u00e9ing in olive oil and garlic. On the counter was an assortment of vegetables and fresh herbs.\n\n(The rest of the dialogue is translated for the sake of the reader.)\n\n\"Where did you get all this?\" Juliet asked.\n\n\"I got up early and went down to the farmer's market on 81<sup>st</sup>,\" Nikki replied.\n\n\"You didn't have to, you know.\"\n\n\"It's nothing,\" said Nikki. \"I'm always up early. The life of a baker.\"\n\nJuliet watched her younger sister wielding the chef's knife like a conductor with a baton. Nikki's satin pajama top was like a mini-dress, her full breasts pressing against the sheer fabric, revealing the delicate contours of her nipples. With her exquisite body and long bare legs, she resembled a lingerie model more than a pastry chef.\n\n\"Didn't those pajamas come with bottoms?\" Juliet teased.\n\n\"Why?\" answered Nikki. \"At home, Derek and I cook in the nude.\"\n\nJuliet took a mushroom slice and took a bite out of it.\n\n\"Sounds dangerous.\"\n\n\"Besides,\" Nikki said slyly. \"I've got panties on. See?\"\n\nShe raised her top to reveal a thong wrapped around her shapely ass.\n\n\"Oh la la,\" Juliet said. \"Tr\u00e8s chic.\"\n\nJuliet marveled at how sexy her sister was. Juliet was no slouch in the sex appeal department of course. But Nikki -- she was in a class by herself.\n\n\"Have you talked to Jake this morning?\" Nikki asked casually.\n\n\"Not yet. Why?\"\n\n\"I was just curious,\" Nikki shrugged. \"How he was doing after last night.\"\n\nJuliet snapped off a basil leaf, crinkled it, and held it under her nose.\n\n\"We haven't talked yet this morning,\" Juliet said. \"He's probably still asleep. How are you feeling about last night? Do you feel like it worked?\"\n\nNikki put her hand on her tummy.\n\n\"I don't know,\" Nikki answered. \"Maybe. I feel like we should keep trying. To be sure.\"\n\n\"I'm sure Jake will be up for it,\" Juliet said, smiling.\n\n\"Do you think so?\" Nikki asked, fretfully. \"You sure he'll want to?\"\n\n\"Of course. We talked last night, after our little ... orgy. Before he went back to his place to get some sleep.\"\n\nNikki looked up with interest.\n\n\"And? What did he say?\" Nikki asked.\n\n\"He said last night was unforgettable.\"\n\n\"He said that?\" Nikki asked. \"What else?\"\n\nJuliet thought a moment.\n\n\"He thought you and I had one of most genuinely giving relationships he'd ever seen.\"\n\n\"That's so sweet,\" said Nikki, pouting her lips.\n\n\"And he said he was glad he could give you and Derek the thing you wanted most. Or try to, anyway.\"\n\nNikki nodded.\n\n\"It's true. It is what we want most.\"\n\nJuliet moved behind her sister and gave her a hug.\n\n\"And he said making love to you was 'extremely erotic'\".\n\nNikki stopped chopping.\n\n\"He said that?\" Nikki asked.\n\n\"He did,\" Juliet responded. \"He said the idea of making you pregnant was ... what was it ... the ultimate aphrodisiac.\"\n\nNikki's caught her breath as a tingly feeling shot through her body.\n\n\"He did seem rather excited,\" Nikki said. \"I certainly was. I haven't cum that hard in a long time.\"\n\nJuliet nodded.\n\n\"He tends to have that effect. I know.\"\n\n\"I mean,\" Nikki said, \"don't misunderstand me. Derek knows how to get me off ... but Jake ... that was a whole other level.\"\n\n\"Well,\" Juliet said laying her head on Nikki's shoulder, \"I told him to be sure to make you cum -- to increase your chances of getting pregnant.\"\n\nNikki tilted her head to softly caress Juliet's.\n\n\"Then I have you to thank,\" Nikki said.\n\nNikki went back to chopping.\n\n\"Do you think we'll be able to do it again while I'm here?\" Nikki asked. \"Like, later today? I'm right in my fertility window.\"\n\nJuliet chuckled and moved back to the lean against the counter.\n\n\"Your fertility window? Sounds so scientific. How do you know anyway? Is there an app for that?\"\n\nNikki laughed.\n\n\"In fact there is. And today's the day.\"\n\nJuliet helped herself to a slice of bell pepper.\n\n\"Pas de probl\u00e8me. We sometimes do it three or four times a day. Jake's got quite a healthy libido.\"\n\nNikki gulped imperceptibly. The thought of having sex with Jake that often made her feel all creamy inside.\n\n\"Why don't you give him a call?\" Nikki said. \"Invite him down for breakfast. There's plenty.\"\n\nJuliet smiled, and then went looking for her phone. Nikki leaned against the counter and took a deep breath. She didn't want to sound too eager about getting Jake's \"help\" but she felt an ache deep inside she couldn't suppress.\n\nAnd her pussy was getting wetter by the moment.\n\nAs he applied shaving cream to his face, Jake took stock of the previous night's events. Did what he think happened, really happen? Or was it a dream? He distinctly remembered Nikki and Juliet taking turns sucking his cock. He had vivid memories of fucking Nikki like there was no tomorrow, sliding his cock deep inside her, again and again, while his girlfriend Juliet was fingering his ass. And he recalled having an orgasm for the ages.\n\nThen, at the end of the night, he left Nikki sleeping like a baby and was headed upstairs to sleep in his own bed. He remembered kissing Juliet good night and telling her how much he enjoyed the experience. He recalled being careful not to rave too much about her younger sister.\n\nJake had deep, genuine feelings for Juliet. She was everything he looked for in a woman -- she was bright, creative, funny, and sexy as hell. He wanted to make sure that, whatever transpired with this crazy situation with her sister, his relationship with Juliet would be undamaged. Sleeping with her younger sister would seem to be a bit of a faux pas but Juliet really wanted him to help get her pregnant and he was more than happy to oblige.\n\nWhile Jake felt romantically about Juliet, Nikki touched his more carnal desires. She had beautiful green eyes, full auburn hair, and a body that was simply the sexiest he had ever seen. Narrow hips, long luscious legs, and large, perfectly shaped breasts. But there was something in the way she moved that seemed to exude sexuality.\n\nJake was toweling his face when his phone chirped.\n\n\"breakfast?\" read the text.\n\n\"love to\" he answered.\n\nA few minutes later Jake was letting himself into Juliet's apartment, and feeling a tad nervous. Not job interview nervous. More like the jittery excitement when you know something really exciting is about to happen to you. Anticipation.\n\nHe found Juliet and Nikki in the kitchen. Juliet was leaning against the window sill, in her sheer cami, smiling at him. The sunlight was backlighting her, and he could see the outline of her breasts. He went over and gave her a soft kiss on the lips.\n\n\"Hey,\" he said in a soft voice.\n\n\"Bonjour Jake,\" called Nikki, giving him a smile over her shoulder.\n\n\"Hi Nikki,\" he answered.\n\n\"Du caf\u00e9?\" Juliet asked.\n\n\"That'd be great,\" Jake said, helping himself to a cup and leaning against the window pane next to Juliet.\n\nNikki was in her element -- standing at the stove, holding a pan in one hand and a wooden spoon in the other, with her back to Jake and Juliet. They watched her, in her satin pajama top, moving from the stove to the cupboard, back to the stove again. Her movements were precise and efficient. As she moved, Jake watched her ample bosom bouncing beneath the satin fabric.\n\nShe opened the oven door, and bent over to inspect whatever was baking inside. Her top lifted just enough to reveal the exquisite curve of her lower ass, and a hint of her pussy.\n\nJake felt himself starting to get hard.\n\nNikki placed three perfectly browned croissants onto a serving plate and spun around.\n\n\"\u00c0 table,\" she announced, a shock of auburn hair covering one eye.\n\nNikki removed the lid of the skillet to reveal a gorgeous m\u00e9lange of mushrooms, onion, bell pepper, zucchini, eggplant, and tomatoes with a triangle of three poached eggs nestled atop like snowy mountaintops. The aroma of fresh herbs filled the room.\n\n\"Wow! It's like we're at a fancy restaurant,\" said Jake. \"If I'd known, I would have dressed for it.\"\n\n\"Look at me,\" said Nikki, \"I'm still in my bed clothes.\"\n\n\"Nikki usually cooks in the nude,\" Juliet explained.\n\nJake pictured Nikki's luscious naked body standing before him. His cock was threatening to poke a hole in his shorts.\n\n\"Help yourself to croissant,\" said Nikki, as she portioned out the vegetables in three equal servings.\n\nShe was standing, bending over the table, her satin top falling open as she leaned in to serve him. Jake beheld her luscious breasts.\n\n\"That looks ... so good,\" Jake said, wondering if Nikki got the double entendre.\n\n\"I'm glad you like it,\" Nikki said. \"You can have all you want.\"\n\nOh, she got it all right.\n\n\"Bon app\u00e9tit,\" called out Juliet, raising a glass of fresh-squeezed orange juice.\n\n\"Oh,\" Juliet said suddenly. \"I forgot the champagne! Who wants a mimosa?\"\n\n''Sounds good to me,\" said Jake.\n\n\"Pourquois pas?\" answered Nikki.\n\nJuliet pulled a bottle of champagne out of the fridge and opened it, sending the cork flying with a loud pop.\n\n\"Salut!\" called out Nikki, holding out her glass.\n\n\"I love champagne,\" Juliet, topping off their glasses. \"It's so celebratory.\"\n\n\"Absolutely,\" said Jake. \"New Year's Eve. Weddings. Champagne and sex go together.\"\n\nJuliet and Nikki looked at each other.\n\n\"Well then, let's fill you up your glass.\"\n\nJuliet poured some more into Jake's glass. He laughed.\n\n\"I see what you did there,\" he nodded, smiling.\n\n\"We're plying you with alcohol and then we're going to take advantage of you,\" Juliet said, playfully.\n\n\"Ply away,\" answered Jake, taking a sip.\n\nNikki tore a piece of croissant and dipped in the juice of the ratatouille. She took a bite, and nodded.\n\n\"Parfait,\" she said.\n\n\"Les oeufs sont formidable,\" Juliet exclaimed. \"The eggs are cooked perfectly.\"\n\nNikki touched her poached egg with her fork.\n\n\"You need to time it just right. Once the tomatoes are hot enough, they break down and give their juice. Then, you add your eggs, cover, until they're firm, salt and pepper, et voil\u00e0.\"\n\n\"Hmmm, I like the sound of that,\" Jake said. \"Making a tomato hot so she gives her juice.\"\n\nJuliet smiled at him slyly. Nikki felt a tingling between her legs.\n\n\"And how are you supposed to eat the egg exactly?\" asked Jake.\n\n\"They're lightly poached,\" Nikki replied, \"so you can break it and mix up the yolk in the vegetables.\"\n\n\"Or,\" Juliet added, \"you can put the whole thing in your mouth and let the goo run down your throat. That's how I like it.\"\n\nJake leaned back, smiling.\n\n\"You do, do you?\" he said. \"I guess you always had a thing for warm goo running down your throat.\"\n\nJuliet looked at him knowingly, her eyelids half closed, reveling in the memory.\n\n\"Especially when there's a lot of goo,\" she said, giving his arm a squeeze.\n\nNikki shifted in her seat. Her heart was thumping.\n\n\"Jake always cums a lot,\" Juliet said matter-of-factly.\n\nJake put down his fork.\n\n\"OK then,\" he said, \"thanks for sharing.\"\n\nShe looked up at him.\n\n\"What? It's true!\" Juliet said. \"When you cum, you cum a lot. More than most men. That's just a fact.\"\n\nJake shrugged and picked up his fork.\n\n\"I wasn't disagreeing, I was just saying...\"\n\n\"And that's a good thing,\" Juliet continued. \"Right Nikki?\"\n\n\"Oh yes,\" answered Nikki, her eyes fluttering. \"Quite good.\"\n\nNikki's thong was positively soaked.\n\nWhen breakfast finished, Jake insisted on doing the dishes himself.\n\n\"If you don't cook, you clean up,\" he said. \"That was always the rule in my house.\"\n\nHe stood up and began to stack the plates like the busboy he used to be in high school. He stood at the sink, rinsing and loading the dishwasher.\n\nHe could hear Juliet and Nikki laughing in the other room. It made him feel good because he knew how much her sister meant to Juliet. He could tell she was missing her during the lockdown. Now, with things opening up, this overnight visit was a chance for them to catch up.\n\nAs he put the last bit of silverware in the dishwasher, and wiped his hands, Jake turned to survey the room. He was surprised to see flower petals at his feet. They were laid down purposefully, in a line, leading from where he stood, across the kitchen and into the living room.\n\nJake smiled and followed the dotted line of petals. They led in a playful, curving path, through the living room, around the couch, and towards the bedroom. Jake felt the rush of anticipation once again.\n\nThe petals led right to Juliet's bedroom. The door was ajar and Jake pushed it open slowly. As it opened, he could see a blouse draped over a lampshade, an ice bucket with the bottle of champagne on the night table. On the bed, laying in a sea of flower petals, were Nikki and Juliet laying on their stomachs facing him, side by side, with their chins propped in their hands.\n\n\"Bienvenue mon ch\u00e9ri,\" said Juliet, seductively.\n\n\"Bienvenue mon ch\u00e9ri,\" said Nikki, equally seductively.\n\n\"Well, isn't this a sight to behold,\" said Jake, smiling.\n\nThe women were still in their lingerie, sheer satin tops with thongs that showed off their gorgeous asses. Jake felt his cock growing by the second.\n\n\"You see something you like?\" asked Juliet.\n\nShe lifted Nikki's satin top to show off her ass.\n\nJake swallowed. His dick was pressing against his gym shorts.\n\n\"I see a lot I like,\" he murmured.\n\n\"Then come lay with us,\" Juliet cooed.\n\nShe rolled onto her back and patted the space between her and her sister.\n\nJake obliged climbing on the bed and sliding between the two of them. Their hands were immediately on him.\n\nHe felt his gym shorts being slid off, his t-shirt being pulled over his head. In a moment, he was totally nude.\n\nHe felt lips on his skin. On his neck. His chest. On his stomach and thighs. They were ravishing him. By the time their lips found his cock, he was already fully erect.\n\nHe was laying on his back with Juliet on one side and Nikki on the other.\n\nJuliet looked down at him with love in her eyes. She slowly lifted her cami up and over her head. Her raven hair falling over her shoulders. Then it was Nikki's turn. She unbuttoned her pajama top, from the top button to the bottom, and then slowly opened the fabric, unveiling two gorgeous breasts with pink, upturned nipples.\n\n\"Fuck,\" Jake growled.\n\nThen it was Juliet's turn again. Sitting up on her knees, she slowly pulled down her thong, turning sideways to Jake and arching her back, and slid the fabric over her ass. She dragged the thong across his throbbing cock.\n\nNikki followed suit, slipping off her thong and tickling Jake's face with it. Jake could feel the moistness, and smell her juices.\n\nHis cock, already rock hard just from looking at these sumptuous women, started to throb. He sensed they were leading this adventure so he just lay on his back and enjoyed the ride.\n\nJuliet shimmied on her knees until he was looking directly down at him. She took his face between her two hands and planted a long, wet kiss on his fleshy lips. She rose back up, looked at him lovingly, then spun around so she was straddling his face. She lowered herself down and felt his tongue find her pussy.\n\nHe began eating her out with a vengeance.\n\nShe looked at her sister and nodded to Jake's huge cock as if to say \"I got what I wanted, now you get yours.\"\n\nGiven permission, Nikki turned to look at Jake's body. There was hunger in her eyes. She had been waiting for this since last night. She rose up on her knees, hovering over his naked torso. Then she pounced, her mouth finding his turgid cock. She kissed and licked it voraciously, then stood it up with one hand.\n\nShe couldn't believe how heavy it was.\n\nNikki pivoted so she was too was straddling Jake, at his thighs. She was facing Juliet who was starting to make whimpering noises from the way Jake was probing her pussy. Nikki opened her mouth and wrapped her bee-stung lips around his swollen cock head.\n\nJuliet watched her sister take her lover's engorged head into her mouth. Nikki had to open her mouth wide to accommodate its size. It looked so fucking erotic. Juliet let out a moan as her orgasm approached.\n\nJuliet's moan got Nikki's attention. Nikki watched her sister as she writhed on top of Jake's expert tongue. She loved seeing her sister being satisfied by such a loving man. She drooled saliva on his big cock and coated it, readying it for her pussy.\n\nKeeping her eyes fixed on Juliet's, Nikki guided the tip of his engorged cock to her own dripping pussy. She rubbed the velvety head along her slit and then lowered herself until it popped inside her.\n\n\"Aiiiieeee,\" she cried out.\n\nJuliet's eyes were fixed on her sister as she took Jake's beautiful cock inside her. Nikki was high on her knees. She had to be -- he was that big. But she was slowing lowering herself, taking him in deeper and deeper. And it felt incredible.\n\nJuliet and Nikki were face to face, breathing hard, both in rapturous ecstasy atop the same man. Jake was sucking and nibbling on Juliet's distended clit, causing her to shake with pleasure. Nikki was filling herself completely with the biggest cock she had ever had. She was bouncing on his huge pole, and her orgasm came quickly.\n\n\"Je vais venir!\" Nikki moaned, \"Je vais venir!\"\n\n\"Moi aussi!\" cried her sister. \"Je viens aussi!\"\n\nJuliet gripped Jake's chest and started to shake, convulsing as her orgasm swept over her. Nikki was grinding her pussy now, taking all of Jake's huge girth and length deep inside her. She leaned back, her awesome breasts heaving, her nipples erect and pointing to the sky.\n\n\"Mon Dieu! Mon Dieu!\" Nikki moaned, her eyes rolling back in her head.\n\nJake's hands were all over Juliet's hips and ass, squeezing her, pulling her down onto his face and tongue. At the same time, his hips were raising up off the bed, impaling Nikki, driving his cock even deeper into her pussy.\n\nTheir orgasms built and crested like a tidal wave enveloping a deserted, tropical beach.\n\nWhen their orgasms subsided, both women leaned forward and embraced each other. Nikki was startled by how hard Juliet was breathing. Then she noticed she was breathing just as hard.\n\nAnd Jake still hadn't cum.\n\nEventually, the two women got off of him and lay together on the bed. They were on their sides facing each other. They started to giggle like school girls.",
        "\"You were so funny,\" said Juliet. \"I thought you were going to pass out. I thought I was going to have to call 9-1-1.\"\n\n\"I almost did pass out,\" laughed Nikki. \"That was an out-of-body experience. I can't believe you get that every night.\"\n\n\"And mornings too,\" giggled Juliet. \"I feel like I won the lottery.\"\n\n\"No wonder you've been so happy lately,\" said Nikki. \"Now I get it.\"\n\nJake was on his knees, watching the two sisters, laying face to face, sharing the moment.\n\n\"You ready for round two?\" he asked in a cheerful voice.\n\nJuliet and Nikki looked up at him. His hair was tossled and his cock was standing straight out, pointing dierctly at them. They looked back at each other and burst out laughing.\n\n\"What?\" Jake asked, innocently.\n\nJuliet moved her face close to Nikki.\n\n\"I've an idea,\" Juliet whispered. \"Do you want to feel something amazing?\"\n\nNikki's eyes widened and she nodded eagerly. Juliet lay prone on the bed, resting on her elbows. Her beautiful round ass and swayed back looked amazing to Jake.\n\n\"Now, Nikki darling,\" Juliet said in a playful voice, \"come lay on your tummy next to me. No, right next to me. So we're touching. That's it.\"\n\nThe two naked women were laying on their tummies next to each other, their hips, legs and shoulders touching each other. They both had swayed backs, with adorable butts that looked good enough to eat. Or to fuck.\n\nJuliet looked back at Jake with a pouty face.\n\n\"Darling, Nikki and I are feeling a little cold. Would you mind laying on top of us? To keep us warm?\"\n\nJake smiled. His cock bobbed and pointed a bit higher.\n\n\"Of course, I'd be happy to,\" he said.\n\nHe climbed on top of them, placing a knee between each of their spread legs, and slowly lowered his muscled body on top of them. Both women smiled when they felt the warmth and hardness of his body.\n\nHe nestled his pelvis so his hips rested on top of their perfect butts. His cock lay in the crease between Juliet and Nikki's thighs. Like a hot dog in a bun, Jake thought, amazed at how soft and silky their thighs felt. He rocked his pelvis to let his hard cock slide between them.\n\nJake's strong arms were splayed on either side of the women, holding the bulk of his weight. His handsome face was hovering between the two of them. Juliet lay her head down on her folded arms.\n\n\"That's nice,\" she murmured. \"It feels good when you move like that. It warms us up.\"\n\nNikki smiled and lay her face down, facing Juliet.\n\n\"Oh yes,\" she agreed. \"That does feel good. Really good.\"\n\nJake bent his elbows so his chest pressed against their backs. He nuzzled his face between the two sisters, planting soft kisses on their faces. They both smiled.\n\n\"Wrap yourself around us, Jake\" said Juliet. \"Like a blanket.\"\n\nJake's body melted into the two women. His legs relaxed and he nestled them between their legs, feeling their warm wetness against the top of his thighs. He ran his hands along their torsos, ticking their tawny skin. He could feel the sides of their breasts pressed against the bed.\n\n\"Oooh,\" Nikki moaned. \"Yes, touch me there.\"\n\nJake grazed his hand over Nikki's breast. Her breasts were beautiful, ripe melons normally. When pressed against the bed, they felt big and firm. She rocked her body to give him access. His fingers found her nipple and it was already hard. He rolled it between his fingers and she let out a moan.\n\n\"Oui, comme \u00e7a,\" she whispered. \"C'est si bon.\"\n\n\"Do me too,\" said Juliet. \"That sounds delightful, whatever it is.\"\n\nJake was resting on his elbows and cupping both of their breasts. Juliet's filled his hand perfectly, like they were made for each other. Nikki's was bigger, overflowing and sumptuous. And her nipple was big too. Like a ripe grape.\n\n\"Nikki?\" Juliet said in a quiet voice.\n\n\"Yes, Juliet,\" Nikki answered. The women were t\u00eate-a-t\u00eate.\n\n\"Did you know that Jake loves doing it doggie style?\"\n\n\"Really?\" Nikki answered. \"I didn't know that.\"\n\n\"Absolutely,\" Juliet continued. \"He says it's his very favorite way to fuck. Isn't that true, dear?\"\n\nShe wiggled her butt against his hard-on for emphasis. Jake's cock started to throb.\n\n\"She's right,\" Jake replied. \"It's my favorite position.\"\n\nNikki and Juliet were smiling like two mischievous children.\n\n\"That is such a coincidence,\" said Nikki. \"Because that happens to be my favorite position too. I cum so hard that way.\"\n\n\"Me too,\" Jake said, as if talking about a food they both liked. \"I like to push myself really deep, as deep as I can go, over and over, until I just explode my cum deep inside. I just love that.\"\n\nJake rocked his hips, sliding his hard on between the two women. Nikki arched her back, involuntarily, as if to receive him.\n\n\"I love that too,\" she gasped. \"Especially with someone who's big.\"\n\n\"You mean, someone big ... like Jake?\" Juliet asked.\n\n\"Yes,\" Nikki said, breathily. \"That would make me cum so hard.\"\n\nNikki reached back, her hand finding his firm ass. She squeezed it, and pulled it towards her.\n\nJake pressed into her and gave her breast a squeeze. Nikki let out a low moan.\n\n\"I wonder,\" Jake asked, \"is that a good way to try and get pregnant?\" Jake asked.\n\n\"I think it might be,\" said Juliet.\n\n\"Oh, definitely it is, yes!\" said Nikki, desperately.\n\nJake could feel a growing wetness against his thigh. He rubbed her pussy with his leg and Nikki squirmed.\n\n\"Jake, mon amour, why don't you lay on top of Nikki now and see what happens?\"\n\nJake shifted over, laying his long, thick dick in the crack of Nikki's ass. He slowly pressed his hips into her, sliding his cock along the length of her crack. Nikki stuck out her butt in response.\n\n\"Oh yeah, move like that,\" Jake moaned. \"That makes me so fucking hot.\"\n\nJuliet arched her back and rocked her hips. She was massaging his cock with her ass cheeks, her eyes closed and her mouth open.\n\nJuliet silently slipped away, smiling, knowing she'd lit the fire. She stood up and regarded her sister and her lover. Nikki's butt was lifted, invitingly, in the air. She was rocking her pelvis, stroking his big cock.\n\n\"Fuck, that feels good,\" Jake growled. \"Juliet, why don't you get that wedge pillow.\"\n\nJuliet's eyes lit up and she went to her closet. She brought out a triangle-shaped foam pillow and handed it to Jake. He reached down and lifted Nikki easily with one arm and slid the wedge under her.\n\n\"Here,\" Jake said, \"you'll want this.\"\n\nNikki found herself folded over the pillow. Her face was on the bed and her ass raised in the air. This all new for her. She felt exposed, vulnerable. He reached down and gently spread her knees.\n\nNow, she really felt at his mercy.\n\n\"What's this for?\" Nikki asked.\n\n\"You'll be more comfortable this way,\" Jake said, placing his hand softly on her back. \"We're going to be here for a while.\"\n\nNikki was touched by his concern, by the fact he wanted her to be \"comfortable\". Then she thought about them being there \"for a while\" and her heart started pounding. She felt Juliet's lips at her ear.\n\n\"Don't worry, we use it all the time,\" Juliet whispered. \"It takes the pressure off your body so you can just lose yourself in the sensation. Oh, and it lets him go deeper. Much deeper.\"\n\nNikki's body trembled involuntarily. Then she spread her legs a little wider.\n\nJake was kneeling behind her. The view of her swayed back, her perfect ass, her dripping wet pussy, and her long spread legs was such a turn on. His cock was telling him to jump on top of her and fuck her brains out. Instead, he took his cock in his hand and gently rubbed it along her slit. She was wet, really wet, and soon the head of his cock was wet too. She felt so velvety, so hot. He couldn't wait to feel her warm, wet pussy enveloping his cock.\n\nBut he took his time. He knew from experience that the wedge pillow made things really intense. The last time he and Juliet used it, she ended up having a screaming orgasm. He knew he had to take it slow. So, he forced himself to rub her pussy for the longest time to get her good and ready.\n\n\"Now I'm going push inside you,\" he whispered, \"but I'm gonna go super slow, okay?\"\n\n\"Oui,\" she mewed in a tiny voice. She raised herself onto her elbows, accentuating the curve of her back.\n\nHe positioned the head of his cock against her hole and slowly leaned forward. His strong arms formed two pillars on either side of her shoulders. He pressed his hips slowly forward until the head popped inside her.\n\n\"Ohhhhhhhh,\" she cried.\n\n\"You okay?\" he whispered, his mouth right next to her ear.\n\nShe nodded. Then she bent her legs to raise her heels to his ass. He felt her gently pressing him to go further.\n\nHe pushed inside her another inch. Then another. She arched her back more. He felt her feet against his ass. She wanted him even further inside.\n\nHe kept sliding his impossibly long cock deep into her folds. She couldn't believe how much he filled her. How much he spread her. But he was doing it so gently. So lovingly. She relaxed and got used to having something so big inside her.\n\nAs used to it as one could ever be.\n\nFinally, when he was almost completely inside her, she had relaxed enough to start to move her own body, rocking her hips to feel him stroking her. He took the cue and started moving his hips in tiny motions that caused his cock to massage her g-spot.\n\nShe was taking off now. Her eyes were closed and she was going with the sensation. The extreme sensation of a man, a wonderfully endowed man, sinking his beautiful cock deep inside her, and then moving it, so perfectly, so lovingly. She could feel her first orgasm coming.\n\nAnd it was coming hard and fast.\n\nJake was resting on his fists now. His arms were straight and taut, giving him the platform to really thrust himself into her. He hadn't got as deep as he could, that would come later. He knew from experience that would be a mistake. Too much, too soon.\n\nInstead, he was concentrating on massaging her g-spot and her clitoris. She was rocking her own hips to set just the right angle to rub the tender tissue that brought her ecstasy. He kept it up until she was grunting and groaning.\n\nWhen he felt she was getting ready to cum, he decided to change it up. There was a move he'd learned with Juliet that she really liked. Maybe her sister would like it too.\n\nHe straightened up, taking the weight off his arms, and then reached down to where her knees met the bed. With his cock still embedded in her now soaking wet pussy, he slipped his hands under her thighs and slowly lifted her. He was suspending her in the air -- like a wheelbarrow -- creating a perfect path for complete penetration.\n\nNikki felt herself being lifted. She didn't know how or why, she just knew he was holding her and she felt safe. She reached her arms out so they were splayed on the bed over her head.\n\nShe felt him lean into her. She felt his cock press deeper in her. She couldn't believe how deep he was.\n\n\"Ohhhhhhhhhhh,\" she moaned as Jake bottomed out for the first time.\n\nJake started a rhythmic thrusting that made her moan with every thrust.\n\n\"Tu est si grand,\" she moaned, amazed by the sensation of his cock filling her so completely.\n\nHe was holding her legs and pumping her pussy, watching her writhe with pleasure.\n\n\"Tu me fais moullier,\" she moaned. \"You make me so wet!\"\n\nHe knew that if he kept the motion going, at this angle, she'd have the most intense orgasm. A combination of clitoral and g-spot stimulation that her sister had enjoyed many times.\n\nSure enough. Her body started to convulse and thrash. She let out guttural sounds and some French words that he couldn't understand. He just knew that she was loving every second of it.\n\nShe came with an intensity she had never before experienced. She felt like she was flying.\n\nAfter she came back to earth, he laid her knees down on the bed and leaned forward to whisper in her ear.\n\n\"I thought you might like that,\" he whispered. \"I have another idea if you're game.\"\n\nShe nodded vigorously.\n\n\"Good. Now I want you to turn over.\"\n\nHe pulled out his long cock and turned her over onto her back. He pulled her, and the pillow, to the foot of the bed. She was laying on the long side of the triangle with her pussy right on the edge of the pillow. Jake stood on the floor and took each of her ankles and put them on his shoulders.\n\nHe moved in close to her and held her at the crease where her legs met her hips. She guided his cock to her hole which he took as a good sign.\n\nHe entered her with one thrust.\n\n\"Donne le moi!\" she shouted.\n\nJake knew enough French to know she wanted him to give it to her. He thrust again.\n\n\"Merde! J'aime \u00e7a!\"\n\nHe knew she was loving it.\n\nHe started to pump her. Steadily. Endlessly. He got a rhythm going he felt he could maintain. He wanted to put her back on the magic carpet ride.\n\nThere was another reason he wanted to change things up. As much as Jake loved sex from behind -- and boy did he love it -- he realized was making love to an incredibly beautiful woman, perhaps the hottest woman he had ever met. He wanted to take in all that visual splendor.\n\nIn this position, she was laying on her back and with every pelvic thrust her breasts would bounce in the most amazing, sexy way. He just kept pumping her and watching her, her head moving from side to side, as she thrashed and moaned. Occasionally, she would look up at him and reach out to hold his forearms, feeling his sinewy muscles.\n\nJake kept slamming his cock into her, sending her big breasts bouncing. JHe felt his balls tightening. He knew he wouldn't last long at this pace. He tried changing it up, pulling her towards him and thrusting hard and then holding himself deep inside her, grinding her. Then he tried shifting into double time, impaling her again and again at a rapid clip. It was these lightning thrusts that eventually sent him, and her, over the edge.\n\n\"Je vais venir! Je vais venir\" she cried. Then she grimaced and bucked as her orgasm peaked and crescendoed through her body.\n\n\"I'm going to cum too,\" he growled. \"I'm gonna fuckin' cum!\"\n\n\"Yes,\" she moaned, \"I want you to cum! Shoot it in me! Fill me with your cum!\"\n\nHe exploded in her pussy, filling her with hot, creamy cum.\n\nShe lay in a heap for a while after that. Juliet moved to her side and gently stroked her face. When Nikki didn't come to, Jake shot Juliet a concerned look.\n\n\"\u00c7a ne fait rien,\" she said with a smile. \"La petite morte, c'est tout.\"\n\nWhen Nikki finally stirred, Jake and Juliet were laying on the bed next to her.\n\n\"Tu veux arr\u00eater?\" Juliet asked. She wondered if her sister wanted a break.\n\n\"Non, je veux continuer.\"\n\nShe wanted more. Jake hopped off the bed, happy to oblige.\n\n\"OK, I thought we'd try something different. You on top. You okay with that?\"\n\nNikki remembered how it felt the previous night when she was riding his cock.\n\n\"Oh, yes,\" she said, sounding revived. \"I'm very okay with that.\"\n\nJake surveyed the scene. Juliet offered her two cents.\n\n\"Maybe use the pillow?\" she said.\n\n\"We could do The Rodeo?\" Jake asked.\n\nJuliet nodded.\n\n\"Okay, um\" Jake explained, \"I'm going to lay on my back with this under me.\"\n\nHe put the wedge under the backs of his thighs and lay back on the bed.\n\nJuliet took her sister's arm.\n\n\"Why don't you go freshen up and I'll get him ready,\" Juliet said.\n\nNikki smiled, happy to see her sister getting into the act.\n\nShe went off to the bathroom while Juliet hopped on top of Jake.\n\n\"I've been wanting to do this all day,\" Juliet said straddling Jake and kissing him all over his torso.\n\n\"I've been missing you too,\" he said.\n\n\"Yeah, right,\" she laughed. \"I've been watching you and you've been totally into it. And it's okay. You're doing a good deed.\"\n\nShe moved up to his face and kissed his deeply on the lips.\n\n\"Besides,\" she smiled, \"After she goes home tonight, you're all mine.\"\n\n\"I can't wait,\" Jake said, pulling her close to him.\n\nNikki stood in the bathroom looking in the mirror. She was surprised to see all the color in her face. Must be from all that fucking, she thought. She adjusted her hair, and applied a touch of Juliet's lip gloss to her lips. She took a deep breath as if to say \"here goes\" and switched off the light.\n\nWhen she got back to the bedroom, Juliet going to town on Jake's cock with her mouth. For a brief moment, Nikki felt a twinge of competitiveness. Does she suck cock better than I do? But she quickly chased those thoughts from her mind. After all, her sister was giving her the most generous gift ever.\n\nShe stood next to the bed and watched Juliet's technique. She was truly something to behold. She was holding his cock straight up with one hand, bobbing and smacking, while jacking him off with a twisting motion with the other hand. Every few strokes she would disengage her mouth and make love to his cock with her entire face. Licking and kissing, rubbing it on her cheek, tickling it with her hair, and then going back to sucking him deep into her throat. Wow, she is one talented girl, Nikki thought.\n\n\"Do you want to take a turn?\" Nikki asked her sister. \"I can sit this one out.\"\n\nJuliet looked up and wiped her chin.\n\n\"No, no, we have to take advantage of the time you're here,\" Juliet said. \"While you're in your window.\"\n\nNikki nodded. Juliet held up Jake's cock so she could take it from her.\n\n\"I'm passing you the baton,\" Juliet joked. \"You guys go ahead. I'm going to take a shower.\"\n\nThis was the first time Nikki had been truly alone with Jake. And it felt very different. Without Juliet there, it seemed ... more intimate. More intense. She had a feeling, illogical as it was, of illicitness. Like she was having an affair. She wondered if Jake felt it too.\n\nIt wasn't a feeling of guilt. Far from it. It was more a feeling of -- desire.\n\nNikki got on the bed and took Jake's cock in both her hands. In the light of day, she was struck by how big it was. Her fingers couldn't wrap all the way around the shaft. That certainly wasn't the case with her husband, Derek. She banished those thoughts from her mind as well.\n\nShe took in his long, athletic body, thinking about how this was going to work. His knees and thighs were raised by the wedge pillow.\n\n\"You can lower yourself on me,\" he said helpfully, \"and then rest your hands on my legs.\"\n\nShe got her bearings and then started to position herself over his cock.\n\n\"The Rodeo, huh?\" she said.\n\n\"Yeah,\" Jake said. \"You'll see why. Juliet really likes it.\"\n\nShe aimed the head of his cock at her swollen pussy and slowly lowered herself down.\n\nShe let out a deep sigh when it popped inside her. It was getting easier, accommodating him. Now it felt like a relief to have him inside her and less like a challenge. More like it belonged there.\n\nHer legs were tucked behind her. She moved herself up and down in tiny motions trying to get used to him. She was still quite wet and now he was getting coated in her juices which helped.\n\n\"That's it,\" said Jake helpfully. \"Now, when you're ready, just lean back.\"\n\nShe looked behind and saw his legs at an incline. She reached back with one hand and grasped the top of his thigh. Then she did the same thing with the other hand. God, his legs feel strong, she thought.\n\nShe took a deep breath and lowered herself down, taking his entire length into her pussy. She let out a gasp that morphed into a long moan.\n\nBecause she was leaning back on Jake's thighs, her shoulders were both pulled back and her back was arched. She was essentially doing a backbend, looking straight up, and thrusting her chest in the air, her auburn hair hanging down dramatically. From Jake's view, it was an astonishing sight. Seeing her body bent back like that, looking up at her gorgeous breasts and nipples, almost made him cum on the spot. He felt his cock surge.\n\n\"My God, you feel so big,\" she moaned.",
        "Jake fought the urge to cum. He realized this was his first real moment alone with Nikki and he wanted it to last.\n\n\"You look so beautiful right now,\" Jake said. \"Like a goddess. I think I just got an inch bigger.\"\n\n\"Please no!\" she laughed. \"I can't take it!\"\n\n\"I swear, Nikki, you're the sexiest thing I've ever seen.\"\n\nNikki closed her eyes and sighed. She wanted to be seen as sexy by this man. This man who made her feel more like a woman than any man in her life.\n\n\"Touch my breasts, Jake,\" she whispered. \"Please.\"\n\nJake reached up with his long arms and strong hands and softly caressed her full breasts. He touched them with a feather touch at first, as if they were precious orbs. He brushed his fingers over her nipples and felt her pussy contract. He gave the nipples a pinch and she let out a moan.\n\nShe arched her back a bit more. Her breasts were heaving now, her nipples standing up and out.\n\n\"Squeeze my breasts, Jake,\" she whispered. \"Squeeze them hard.\"\n\nHe gripped them both in his big hands and squeezed. The nipples protruding between his fingers.\n\nShe started to rock her hips and grind herself on Jake's cock. Jake responded by gripping her breasts harder. She let out a moan.\n\n\"No one's ever been so deep,\" she whispered. \"Tu comprends? No man has ever pleased me so much.\"\n\nJake raised his hips off the pillow. Nikki gasped at the movement and gripped Jake's legs tighter. Jake made slow figure eight motions with his pelvis and she held on for dear life.\n\n\"This must be the rodeo part,\" she laughed.\n\n\"That's right. You've seen a mechanical bull?\" he said. \"Ride it like that.\"\n\n\"You mean like 'Urban Cowboy?'\" she asked.\n\n\"Exactly!\"\n\nNikki relaxed her body and let her hips go. Her body started to undulate, in sync with his movements. She felt like she was flying, falling. For Jake, the effect was beyond sexy. It was like they were connected and he was controlling her with his cock.\n\nBefore long, it was like they were one being, moving in unison. He pressed his hips higher, pushing deeper inside her. Penetrating her as deep as he could go. She cried out.\n\n\"Touch my clit,\" she moaned.\n\nHe used his thumb to find her nub. He rubbed it expertly while maintaining the motion of his hips. When she was on the verge of cumming, she reached out to him with one arm. He grabbed it and pulled her up, out of her backbend. She leaned forward, putting her hands on the bed astride his head. They were face to face.\n\n\"Bais-moi!\" she commanded. There was fire in her eyes.\n\nJake didn't know if \"bais-moi\" meant \"kiss me\" or \"fuck me\".\n\nSo he did both.\n\nHe took her face in his hands and planted a passionate kiss on her bee-stung lips. It was the first time Nikki and Jake had ever kissed and neither one wanted it to end. When they parted, out of breath, he held her by the hips and started a series of lightning thrusts into her pussy. Each thrust caused her to cry out. Each thrust brought her closer to orgasm.\n\nHer fingernails pressed into his chest. She arched her back. Her breasts were in his face, her nipples huge.\n\n\"I want you to suck me!\" she cried out. \"Suck my breasts and I'll cum!\"\n\nJake thrust one last time, deep into her pussy, and held it there. He sunk his face into her full, fleshy mounds. His lips and tongue found her nipples and sucked hungrily. Her orgasm was volcanic. Her pussy contracted and her body shook. That was enough to suck the cum right out of Jake's throbbing cock. He exploded his seed deep inside her.\n\nTheir orgasms seemed to last an extraordinarily long time. Her pussy kept contracting and his spasms continued for what seemed like minutes. Finally, she collapsed on his chest and he embraced her.\n\n\"You're so fucking hot,\" Jake whispered in her ear.\n\nA few hours later, Nikki was packing her things for her trip home. She and Juliet were already talking about the next time they'd see each other.\n\n\"I hope you and Jake can come stay visit us upstate,\" Nikki said.\n\nShe was stuffing her satin pajama top and thong into her bag. She could feel the moistness in her thong, a reminder of the intense passion she had experienced just a few hours before.\n\n\"A souvenir?\" Juliet asked.\n\nJuliet smiled and shook her head.\n\n\"I can't remember the last time I had so much sex,\" she marveled. \"Or so many orgasms.\"\n\nJuliet slipped her arm around her waist.\n\n\"I just hope it took, you know?\" said Juliet. \"And you guys will be parents soon.\"\n\nNikki lay her head on Juliet's shoulder.\n\n\"I hope so,\" Nikki said.\n\n\"And if it doesn't happen this time,\" Juliet said, \"you can come back and try again. When that little app of yours tells you it's the right time.\"\n\n\"In my fertility window?\" Nikki chuckled. \"Listen, I don't know how to begin to thank you.\"\n\nJuliet put her finger to Nikki's lips.\n\n\"You don't need to. You know I'd do anything for you. Just as I know you'd do anything for me.\"\n\nJuliet gave her sister a deep hug.\n\n\"Tell Jake goodbye for me,\" said Nikki, gathering her bags.\n\n\"You should tell him yourself,\" Juliet said. \"He's upstairs. He just texted me.\"\n\nNikki thought about it and then nodded.\n\n\"I should thank him,\" Nikki said. \"I'll stop by on my way out.\"\n\nShe kissed her sister on both cheeks.\n\n\"See you later, sis\" Nikki said.\n\n\"I love you,\" answered Juliet.\n\nNikki took the elevator up one story to Jake's floor and found his apartment. It was literally the one right above Juliet's. She put down her bags and straightened her outfit. She was wearing a short skirt and a white cotton shirt, unbuttoned at the top to show a hint of her d\u00e9colletage. She knocked lightly on the door. At the last minute, she unbuttoned one more button on her blouse.\n\nJake opened the door and saw Nikki standing there, leaning on the doorframe. She looked like a glamour shot from a magazine.\n\n\"I came to say goodbye,\" Nikki said winsomely. \"And to thank you.\"\n\nJake raised his eyebrows and nodded.\n\n\"I'm glad you did,\" he said. \"Come on in. Let me help you with these.\"\n\nHe brought her bags into the foyer. He was barefoot, in sweatpants and a t-shirt. His curly hair was swept back and he looked as handsome as ever.\n\n\"I was just heading out,\" Nikki said. \"I want to make it home by dark.\"\n\nJake looked at his phone. It was 4:30. He noticed a text from Juliet. It read: \"Nikki's on her way. One last go?\"\n\nHe pocketed his phone.\n\n\"There's not much traffic,\" Jake said. \"You probably have some time.\"\n\nNikki looked at her feet. She hadn't planned what to say or how to even start to thank him.\n\n\"You know, Jake,\" she started, haltingly, \"what you gave me this weekend ... I can't begin to tell you ...\"\n\nJake gently lifted her face with his hand. His face was just a foot from hers, warmly smiling.\n\n\"Nikki,\" he said sincerely, \"I'll remember this weekend as long as I live.\"\n\nHer eyes showed she felt the same way.\n\n\"Oh, me too Jake,\" she gasped. \"You don't know. I've never felt ...\"\n\n\"I know,\" Jake said. \"It was pretty amazing.\"\n\n\"It was so amazing!\" she said. \"I mean...once in a lifetime. Right?\"\n\n\"Well, we did it more than once,\" Jake smiled.\n\n\"That's true,\" she laughed. \"I can't even count how many orgasms I had.\"\n\n\"Well,\" Jake said, \"we were awfully good together.\"\n\n\"The best sex of my life,\" she said. \"By far.\"\n\nJake looked at her open blouse, the top of her lovely breasts.\n\n\"I don't think any woman has ever turned me on so much.\"\n\nShe looked at him with longing in her eyes.\n\n\"Oh, Jake, embrasse-moi. Kiss me.\"\n\nJake took her in his arms and kissed her deeply, pressing her against the front door. His broad chest pressed against her bosom.\n\nHe began planting gentle kisses on her neck as she curled her leg around his thigh.\n\n\"J'ai envie de toi. Tu comprends? I need to feel you inside me. One more time.\"\n\nHis hand cupped her breast, as the other started to unbutton her blouse.\n\nShe reached under his sweatpants to find his thick cock.\n\nHe unzipped her skirt and let it fall to the floor, then pulled down her panties with a fervor that surprised her.\n\nHis fingers found her slit. It was soaking wet.\n\nShe had his cock in her hand and she was pumping it. He was already rock hard.\n\nHe unfastened her bra and freed her beautiful breasts. She pulled his t-shirt over his head. They were both completely naked now.\n\n\"Je veux te baiser,\" she moaned.\n\nHe lifted her in his strong arms and held her close. She wrapped her legs around his waist. He positioned his cock against her aching pussy and pushed the head inside.\n\nShe threw her head back and cried out.\n\nHe started pumping himself into her, sliding his long cock into her warm, wet pussy. Each time he penetrated her, he'd go a little deeper, and she'd let out a shriek.\n\nEvery thrust was sending her deeper into a reservoir of pure pleasure. She tightened her legs around his butt, as if to pull him deeper inside her. He spun around and moved across the room, never stopping his thrusting.\n\nIn the doorway to the bedroom, he paused and leaned back, sticking out his pelvis so she could impale herself on his cock. She was holding the top of the doorframe for balance, feeling him completely inside her.\n\nThat's when she came the first time.\n\nHe carried her to the bed and lay her down, still attached. He pulled a pillow under her ass and pressed into her. They were doing it face to face, missionary style, but there was nothing ordinary about this sex. It was intense, and erotic, with both of them at the very peak of arousal.\n\nShe raised her knees to his shoulders to give him full access. To let him go as deep as possible.\n\nHe interlaced his hands with hers and pressed them to the bed, pinning her. It was intimate, yet forceful. She felt like she was being taken, whether she wanted it or not.\n\nBut oh, how she wanted it.\n\nWith his eyes fixed on hers, he plunged his cock deep inside her. Again and again. He'd take his cock out so just the tip was inside her, and then shove it all the way back in. Each time, her breast would bounce with the force and his thrust. And each time, she'd let out a deep, animalistic moan.\n\nHe kept it up until she came a second time.\n\nHe was a non-stop fucking machine. He thrusts were hungry, dominating. Before, they were making love with a purpose -- to make a baby. And Juliet was there. This time felt different. This was about pure desire.\n\nHe seemed, to her, like an animal. And it turned her on no end. Something about being pinned there. At his mercy. While he was pummeling her. Over and over. With a fiery look in his eyes. His muscles flexing each time he rammed himself in her. She couldn't get enough of it.\n\nShe moved her legs higher, toward his neck. He put her ankles on his shoulders. This was her most vulnerable position, where he would go deepest. In this position, she knew she would feel every last millimeter of his cock.\n\nIt both excited and frightened her.\n\nJake saw the trepidation in her eye and slowed things down. He looked her straight in the eye, pulled almost all the way out, and then slowly pressed his entire length into her. Her eyes got big and her mouth opened. The base of his cock was spreading her so wide. His shaft was massaging both her g-spot and her clit. The head was pressing against her cervix.\n\n\"J'aime \u00e7a,\" she moaned. \"Donne le moi!\"\n\nHe repeated the motion, taking long, slow thrusts, sliding his cock all the way in and out. Every time his swollen head penetrated her, she let out a little shriek. He alternated the motion with short, fast pulses that had her arching her back and grunting with pleasure.\n\nFinally, he bottomed out and started to grind her pussy with his pubic bone. Her third orgasm surpassed even the first two.\n\nWhen she revived, she was ready to bring him over the top.\n\nShe lowered her legs so her knees were flexed. They were face to face. She held his gaze and lowered her voice to a whisper.\n\n\"Who would have known?\" she said, breathily.\n\n\"About what?\"\n\n\"That we'd be like this together,\" she said.\n\n\"We do seem to have chemistry.\"\n\n\"What's your favorite thing we did?\" she asked.\n\n\"Everything. Like I said, this was an unforgettable experience.\"\n\n\"But what one thing stands out?\"\n\n\"Why?\"\n\n\"Cause I want to do it for you. As a way to thank you.\"\n\n\"I don't know,\" Jake answered. \"I suppose it was when we were first alone together. When Juliet was off taking her shower.\"\n\n\"What did you like most?\" she asked.\n\n\"Let's see. I remember you were riding me. Leaning back. You looked incredible. Your breasts were ... a vision. But it wasn't so much what we were doing but what I was feeling. You were telling me how good it felt... we were telling each other how good it felt. I don't know ... maybe 'cause we were alone ... I felt like we were completely free ... to be expressive with each other. I just found it ... really hot.\"\n\nNikki was gazing in his eyes. His sincerity touched her.\n\n\"I think,\" Nikki said, \"I felt freer to express myself in the moment. Because Juliet wasn't there. I was able to tell you how much I loved it.\"\n\n\"I get it,\" Jake said. \"And hearing you say those things ... hearing you moaning how much you ... enjoyed it ... that was the biggest turn on for me. Cause I was feeling the same thing.\"\n\n\"Jake, you don't know how much I love it. I adore how I feel when we're fucking. More than I've ever loved it before. I just realized ... I've had great sex in the past ... but sex with you is like ... I don't know ... a whole new dimension. Especially when you go really deep inside me. I've never felt that way before. Because nobody's ever gone so deep. Nobody's ever filled my pussy like you.\"\n\nHearing her express her feelings, in that beautiful French accent, made Jake's cock swell inside her.\n\n\"You mean ... when I go really deep ... like this?\"\n\nHe pressed his cock deep in her pussy.\n\n\"Ahhhhh, oui!\" she cried out. \"Comme \u00e7a! Like that!\"\n\n\"So do you like it when I press myself as far as I can go ... like this?\"\n\nHe pushed his cock all the way inside her. To the hilt.\n\n\"Ohhhhhhh!\" she cried. \"I don't just like it, Jake. I love it.\"\n\n\"And what about when I move my hips like this?\"\n\nHe rotated his hips in a figure-8 motion.\n\n\"Oooooooh! I feel like you're touching ever part of my pussy, Jake! No one's ever done that.\"\n\n\"And how 'bout when I pump you fast, like this? How does that feel?\"\n\n\"Aiiiiiiiiiieeeeeeeoooooo! Mon Dieu!\" she moaned. \"You're gonna make me cum! Keep doing that and you're going to make me cum so hard!\"\n\n\"Oh, I love watching you cum, Nikki. And I love hearing you cum. Come for me, Nikki?\"\n\nHe was pumping faster now. Spreading her pussy with ever thrust. Her hands were gripping his butt.\n\n\"No one's ever made me cum so much! Or so hard! I love the way you fuck me, Jake! I just love it! Keep fucking me! Don't ever stop fucking me!\"\n\nJake pulled her knees up to her chest. He wanted to fuck her hard and deep. He needed to fuck her hard and deep.\n\n\"You're so fucking sexy!\" Jake growled. \"I love fucking you so much!\"\n\nNikki threw her head back, spreading her knees wide to take him as deep as possible.\n\n\"Give me your cock! Give me all of it!\"\n\nHe arched his back and thrust his pelvis hard, sinking his huge cock as deep as it could go.\n\n\"Arrrrrrrgggggggghhhhhhh!\" she screamed.\n\nAgain, he sunk his dick deep into her wet, hot pussy. Again, she screamed.\n\n\"Mon Dieu,\" she babbled, \"Mon Dieu!\"\n\nHer body was shaking now, her legs flailing. She was in the throes of a mega-orgasm.\n\n\"Fuck, fuck, fuck, fuck, fuck, fuck, fuck, fuck\" she ranted.\n\nWhen her orgasm subsided, Jake lowered her legs and slowed the pace of his thrusting. He brushed his chest against her breasts and kissed her face and neck.\n\n\"You know what I want now?\" she said, breathily. \"I want to give you the best orgasm of your life. Like you've given me. I want you to fucking explode your cum inside me and we'll make a baby. I just know we will.\"\n\nShe started raising and lowering her pelvis, as if to coax the cum from deep in his loins.\n\n\"C'mon,\" she purred, \"give me your cum. Make a baby with me.\"\n\nShe reached her hands to his head and ran her fingers through his hair.\n\n\"You know what I realize,\" she said, looking deeply into his eyes. \"I'm in love with making love with you. You understand? I love my husband, but I love the way you make love to me. The way we make love to each other. How you make me cum so hard. Every single time. No man's ever satisfied me the way you do.\"\n\nJake was so close now. Her words were in his head and it made him want nothing more than to fill her with his seed.\n\nHer legs were wrapped around his back, her hands cradling his face. Her arms were pressing her breasts together, her nipples were standing up.\n\n\"Put your mouth on my breasts, Jake.\"\n\nHe buried his face in her breasts, his lips finding her nipples and sucking hungrily. She reached down and cupped his balls gently and pressed his perineum at the same time. Then, she started to squeeze her vaginal muscles to milk his cock.\n\nThe three sources of stimulation were enough to push him over the edge. He felt pressure growing in his balls and electricity in all his limbs. It culminated in a huge explosion of cum deep in the recesses of her pussy. Again and again, he felt ropes of cum filling her womb.\n\n\"Ahhhhhhhhhhhhhhhh,\" Jake moaned as the spasms of his orgasm sent a shock wave through his body.\n\nHis orgasm was so complete, so all-consuming, he felt he had indeed filled her pussy with his seed. If this didn't impregnate her, well, he would just have to keep trying.\n\nIt was a tough job but someone had to do it.\n\nEpilogue\n\nA full two and a half years had passed since the fateful weekend that brought Jake, Juliet and her sister Nikki together in the midst of the global pandemic. Three souls trying to navigate turbulent waters had found a kind of shelter together -- and had an experience that would have seismic impacts on each of their lives.\n\nNikki had indeed conceived that weekend. She gave birth nine months later to a baby boy she and her husband Derek named Yves. He was a handsome, vivacious little boy who, in the right light, bore a striking resemblance to Aunt Juliet's boyfriend Jake whom Yves called \"Uncle J\".\n\nLike many young professionals, Jake and Juliet moved out of the city following the pandemic. While vaccines had been manufactured and distributed widely, they had found that living in the country had a host of advantages including a better lifestyle, access to nature, not to mention cheaper rent. Juliet could do her book editing from anywhere and Jake's graphic design career was equally portable.\n\nThey decided to move together to a farmhouse in Katrine on the Hudson, less than a mile from where Nikki and Derek lived. They had dogs, a garden, and their property bordered on an open space where they liked to take long walks together. It was on one of those walks that Derek dropped to one knee and asked Juliet to marry him.\n\nTheir wedding was held at a winery overlooking the Hudson. Yves was the ring bearer. Derek and Nikki stood up as witnesses. It was an unconventional wedding, short on religion, and long on humor.\n\nAt the reception afterwards, a DJ played lots of Motown and Beatles (Imagine, Strawberry Fields and Come Together were on the playlist.) The food was provided by Nikki and Derek's chef friends and Nikki, of course, baked the wedding cake.\n\nAfter the reception, Jake and Derek slouched on some folding chairs sipping champagne. On the dance floor, Juliet and Nikki were slow dancing to Marvin Gaye. Actually, they were just sort of swaying in place and talking and giggling a lot. Jake was looking contented, and a bit high on champagne.\n\n\"Yves was a champ,\" Jake said to Derek. \"At one point I thought for sure he was gonna drop the ring but he was clutch.\"",
        "\"He's got good hands,\" Derek nodded. \"I don't know, I think he could be a ball player when he grows up. Did he get that from you?\"\n\n\"Maybe,\" Jake answered. \"I could hit for average. Not much power though.\"\n\n\"Maybe second base,\" Derek shrugged.\n\nDerek looked at Jake who was in turn looking at Juliet and Nikki who were laughing on the dancefloor.\n\n\"You know,\" Derek said, \"Juliet and I were saying now that Yves is two and a half, it'd be great if he had a brother or sister. You know, so they're close enough in age to play together.\"\n\n\"Is that right?\" Jake replied. \"You guys thinking about another whippersnapper?\"\n\n\"Well, yeah, we are as a matter of fact.\" Derek smiled. \"And we wanted to talk to you about helping us out. We'd like him, or her, to have the same biological parents as Yves.\"\n\nJake leaned forward in his chair.\n\n\"Derek, I'd be honored to help you guys conceive. Anything Juliet and I can do to help. You can count on us.\"\n\n\"Thanks Jake,\" Derek said. \"Now I'm going to check on the little munchkin. It's way past his bedtime.\"\n\nDerek walked towards the food tables where a group of toddlers were playing tag.\n\nJake stood and walked over to Nikki and Juliet.\n\n\"Can I join you guys?\" Jake said with a smile.\n\n\"Of course you can,\" Nikki said, garrulously. \"We were just talking about you.\"\n\n\"Oh, oh,\" Jake laughed. \"That can't be good.\"\n\nJuliet hung on his lapels. She too was a little tipsy.\n\n\"We were just saying,\" Juliet said, \"how wonderful it would be if we all had kids at the same time. How great would that be?\"\n\nJake put his arm around her waist.\n\n\"It so happens Derek just told me you guys were hoping to add to the brood. He asked me if I'd help out.\"\n\n\"And what'd you tell him?\"\n\n\"I said yes, of course. Yves turned out pretty great after all.\"\n\nNikki burst into an enormous smile. She gave Jake a big hug.\n\nJuliet joined in the three-way embrace.\n\n\"And we were saying,\" Juliet added, \"how great it would be if we had our first kid at the same time they had their second.\"\n\nJake looked at her and smiled.\n\n\"I see,\" he said, \"you've got all this figured out already.\"\n\nJuliet leaned in and gave him a kiss on the cheek.\n\n\"And we can invite Nikki to come join us in St Croix. We just checked the app. We'll both be right in our fertility windows!\"\n\n# # #"
    ],
    "authorname": "petitmort",
    "tags": [
        "big cock",
        "french",
        "impregnate",
        "multiple orgasms",
        "sisters",
        "threesome"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/stir-crazy-ch-05"
}
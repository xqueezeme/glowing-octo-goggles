{
    "title": "There and Back Again Ch. 141",
    "pages": [
        "Chapter One Hundred Forty-One: InJustice \n\nVander's story turned out to be far more involved -- and yet, not at all more surprising -- than I expected. \n\n\"What would you like to know?\" Justice asked, unearthly voice booming. \n\nAedan looked to me and Alistair, clearly hoping someone else would take over the line of questioning. \n\nI sighed. \"Let's start at the beginning. Where did he live? Does he have any family?\" \n\n\"Until he became a Warden, he was living in the...what exactly is an Alienage?\" His expression, still queerly blank, looked like what I'd seen on earth when people were put on hold -- accessing Vander's memories? After a moment, while I debated how to answer, he scowled and his voice got even louder. \"They trap all elves behind walls like caged animals? There is no justice in that!\" \n\nAll four of us responded as one, holding hands out in a placating fashion, voices soft and soothing, hoping to avoid a repeat of the episode where he got all blue and glowy. Which is WAY scarier in person than in a video game! Only I knew the magical abilities he could potentially manifest when he was like that, assuming it was anything like when he'd been merged with Anders. \n\n\"No, no, Justice, we know. It's not fair. Let us explain. Please, calm down.\" \n\n\"The Alienages are as much for the elves' sakes as for anything else. Even in Highever, where they are treated much better, they prefer to live apart from the humans. When we've offered to fully integrate elves into the city, they decline, preferring to stay together,\" Aedan explained. \n\n\"And they are not all alike,\" Alistair assured him. \"Some are terrible places, but we're trying to fix that. The Alienage in Denerim was just completely rebuilt to improve the lives of everyone living there. But in Amaranthine...\" he trailed off. \n\n\"Racial discrimination was common, even encouraged by the former Arl, from what we gather,\" Zevran cut in. \"The walls probably protected as much as they also imprisoned, yes?\" \n\n\"It's one of the things Arl Nathaniel is trying to fix,\" Aedan continued. \"He and his sister, Bann Delilah. They're improving the Alienage, trying to guarantee safety for the elves living there.\" \n\nSlightly mollified, the spirit relaxed fractionally and continued. \"He was working at a farm near Amaranthine to earn enough to support his sister and her son.\" \n\nWe'd known about the farm, of course -- he'd been fleeing from there when he'd become tainted by the darkspawn. \"So he has a sister, and a nephew. Any other family? Parents?\" He was barely twenty, if that -- his parents wouldn't be that old, likely. \n\nJustice shook his head. \"His father died when he was young. His mother...disappeared from the Alienage last year, at a time when many elves went missing in Amaranthine.\" \n\nThe four of us exchanged saddened looks, knowing what that most likely meant; Rendon Howe hadn't been successful at selling elves from Denerim to Tevinter, but the Amaranthine Alienage hadn't been so lucky. She's probably a slave to some magister as we speak. Perhaps Vander's hatred of humans is even more justified than we knew. No one explained it to Justice, nervous about his potential reaction to such a horrible fate. \n\nHe went on to explain that Vander, younger even than we'd thought at only eighteen, and his older sister Kahril, a beautiful blonde, couldn't find enough work to feed themselves (and, I guessed, were terrified of being kidnapped by Tevinters as well) and so Kahril became 'involved' with one of the city guardsmen, Brandin. Justice didn't seem to fully understand the implication, thankfully, but it was clear to me she'd prostituted herself to the man in return for coin, protection from slavers -- and sword training for Vander. Which explains how an elf from the Alienage would have enough skill to defend a group of civilians from darkspawn. \n\n\"After several months, almost all of the guards including Brandin left, and they heard that he was killed in some sort of battle.\" \n\n\"When was this, Justice? Was it the battle against the Archdemon?\" Aedan interrupted. \n\nJustice paused for a moment, then replied, \"No, before that. He believed they were fighting other humans, in some sort of civil war.\" \n\nI scowled. So Rendon Howe pulled all the guards from the city during the civil war to fight other nobles in the bannorn, and left Amaranthine unguarded? Jerk. Bet Esmerelle and her smuggling, slaving friends loved that! \n\n\"Sorry, continue,\" Aedan sat back, expression grim, and I knew he'd come to the same conclusion I had. \n\n\"When Kahril became outcast from the Alienage-\" \n\n\"Wait, wait. Why was she cast out?\" I hoped Justice wouldn't get irritated at the frequent interruptions, but he mostly seemed just puzzled. Turns out spirits have no idea how to narrate stories. Varric would do a much better job of spinning this tale! \n\n\"She had a child.\" His forehead wrinkled in confusion. \"The elves treat them poorly because he is human.\" \n\nI face-palmed dramatically. \"Because Maker-forbid that stupid racial discrimination should be limited to humans.\" \n\nZevran chuckled wryly and Alistair squeezed me briefly. \n\nJustice nodded uncertainly in my direction. \"Yes, racial discrimination seems particularly unjust. So to support his sister and nephew, Vander started working at the farms outside the city -- after the Blight, there was a great need for farm workers and the pay was better.\" \n\n\"Until he became tainted.\" I sighed. \"Wait, did he go see his sister while you were in Amaranthine?\" I asked Aedan. \n\nHe shook his head. \"We didn't have a lot of time to spend in the city, once we'd heard rumours of talking darkspawn in Blackmarsh.\" \n\n\"So how is Kahril being supported now?\" \n\nJustice nodded at me. \"Vander had been worrying about that as well.\" \n\nAedan rubbed his face irritably. \"I'm not convinced letting her see you like...this,\" he gestured at Justice, \"is a good idea. I doubt very much she'll take kindly to her brother being possessed.\" \n\n\"We will find some way to support her,\" Alistair assured me. \"We can talk about that later.\" \n\n\"So, Justice? What are your plans now?\" I decided to change the subject, uncomfortable with dwelling on the effect Justice was having on Vander's life. \n\n\"Well, your Commander has explained the problem with the darkspawn to me. It was a darkspawn who injured Vander in the first place, and they do much harm in this world. The Grey Wardens serve a just cause, and I would stay here, if you would allow it, and fight the darkspawn.\" \n\n\"Do you...wish to...remain, inside Vander?\" I was afraid to ask the question, but we needed to know. If we were to find a way to free the poor elf from possession, having Justice's cooperation seemed necessary. \n\n\"Knowing that he would not be happy with my presence, I wish there was another way. However, I am not aware of a way to return to the Fade, and if I separate from this body, I do not know what will happen. Vander may not survive, nor would I. I do not wish to die.\" \n\nAedan cleared his throat. \"There is a mage -- ancient, and very knowledgeable, at our Keep nearby. It is possible he may know more about this than any of us. Would you permit me to write to him, and to the Circle of Magi, to see if anyone knows of a way to return you to the Fade?\" \n\nThe spirit stilled, apparently thinking, then finally nodded. \"If there were a way to give Vander back his life, without killing me in the process, I would be willing to try. Being in the mortal realm was not by choice, and taking Vander's life does not serve justice, but I saw no other way for either of us to survive. I would gladly find another way, if it was safe.\" \n\n\"I am certain that, willing or not, Vander would appreciate being alive. I'm sure we can...figure something out.\" Alistair looked positively leader-ish in that moment, and I grinned to myself. \"For now, if you could provide as much information about Vander's sister as you are able -- where she lives, her last name, whatever you think will help us find her, we will make arrangements to help provide for her.\" \n\n\"Varel will have what you need -- wait, do you know how to read and write?\" Aedan asked; Justice shook his head. \"Just ask Seneschal Varel to write down what you say. We will meet you in the dining room for supper.\" \n\nDismissed, Justice went in search of Varel, leaving me alone with my boys. \n\n\"Well, that could have gone worse, yes?\" Zevran drawled wryly. \"How do you say it, cara mia? He gives me the creeps.\" \n\nI snickered. \"Do you think we should tell him about me? About what I know?\" I had decided I clearly wasn't the best person to decide what secrets should be kept. I still wasn't even sure if Loghain knew about me -- one more thing to add to the list for discussion with Aedan and Alistair. \n\nNo one answered, the three men sharing similar pensive looks. \n\n\"I just thought, maybe if he knew about Vengeance...maybe we could prevent it just by him knowing? I mean, we can keep Anders away, but I'm worried Vander's anger could corrupt him just as easily.\" \n\n\"He didn't react well to the idea of an Alienage, that's for sure. What happens when he realises the missing elves are actually probably slaves in Tevinter? Maker.\" Alistair ran a hand through his hair, leaving it spiking up irregularly, and I smoothed it back down with a smile. \n\n\"I'm not certain how he will respond.\" Aedan slumped. \"You saw how he got when you compared him to a demon. What if he doesn't believe us?\" \n\n\"Maybe wait until Avernus has a chance to look at him, no? One would think a blood mage would know more about spirits and demons than any of us.\" Zevran patted Aedan's shoulder reassuringly. \n\n\"For now, anyway, we can support Vander's sister. She can have his wages as long as Justice is with us, and after...\" Alistair trailed off looking uncomfortable. \"Well, we will deal with that when the time comes.\" \n\n\"When we send Justice to Soldier's Keep, maybe I'll see if Nate would hire her at the Vigil. I think she'd have a lot less trouble with an elf-blooded child here.\" Aedan sighed. \"Stupid racial politics...\" \n\nI sighed too. \"As compelling as this topic is, there's some other things we need to discuss. We never got the chance, after you rescued me...\" \n\nNeither Zevran nor Aedan had any more insight into just what research the Wardens might have been doing in the Deep Roads under Soldier's Peak, though Aedan was less displeased than the rest of us to have a Deep Roads entrance in the basement. \"We're going to have to find some maps, see where they lead,\" he enthused. \"Maybe we've got a shortcut to Orzammar! I wonder if Shale and Caridin would like to help us explore. They've mapped hundreds of tunnels under the Wilds and near Orzammar...\" \n\nWhich eventually led to a discussion of the many other topics I'd been worrying about: \n\n-Sigrun and Faren -- \"cross that bridge when we get there,\" was Aedan's response, while Zevran seemed to be fantasizing about dwarf sex, if the lascivious look on his face was anything to go by; \n\n-My 'secret' being well-known among our Wardens -- Alistair had predicted Aedan's response perfectly, which was to quietly ensure that all of them knew enough not to discuss it amongst themselves, never mind with anyone else, and otherwise ignore it; \n\n-Loghain -- who had not been told about my secret, but would need to be updated, given his questions about why the Architect would kidnap me, not to mention that he'd earned my trust (if not my total forgiveness) by guarding me and coming to my rescue; \n\n-Rolan's attitude towards mages, which had never seemingly improved, if smiting them 'accidentally' during the fight with the Mother was any indication -- Aedan was still considering sending him to another Warden base, either in Orlais or to Weisshaupt itself; \n\n-And lastly, Rolan's whereabouts. We still hadn't received a bird from Conrad, nor had there been any sign of the Templar's patrol. \n\n\"I wish we had Morrigan around to scout now,\" Aedan groused. \"I don't want to send another patrol after them -- if it's lost as well, then what do we do?\" \n\n\"We aren't going to have much choice.\" Alistair frowned. \"Should we go talk to Arl Nathaniel and make plans?\" \n\nWe all tromped up the many winding steps to the room Nathaniel kept as a study; maps of the Arling, including our designated patrol routes, darkspawn sightings, and anything else of interest were marked with pins, string, and small paperweights. Nate wasn't there, and Aedan sent a servant to request that he and Seneschal Varel join us whenever they could. The four of us gathered around the maps while we waited. \n\nAlistair placed a pin where Conrad's patrol route met up with Rolan's, two days to the south and west of the Vigil. \"This is where Rolan's group failed to report. Which direction was he coming from?\" \n\nI consulted the list I'd drawn up with Nate, and pointed further southwest. \"He was supposed to be passing the Tarcaisne Ridge looking for darkspawn.\" That ridge was the border of the Arling on the southwest side; above the ridge was the central bannorn. \n\n\"It was...four days ago that he missed the meeting. So really, Conrad would only be reaching there now anyway,\" Alistair predicted, trying to figure out the time since he'd last spoken to the senior Warden. \"Maybe we should just give him more time?\" \n\nWe were interrupted by Nate and Varel, who exchanged greetings with us and joined us around the map. \n\n\"What's the Tarcaisne Ridge like, Nate?\" Aedan pointed, then leaned back, clearly trying to get a wider view on the whole area. \n\n\"It's a pretty sheer cliff face,\" the noble replied, tugging one of his dark braids pensively. \"There's only a couple of paths up, and even they are somewhat risky, at least in spring. Mud slides are common.\" \n\n\"Caves?\" Aedan asked. \"We think one of our patrols disappeared somewhere near there, and we wondered if they could have encountered darkspawn.\" \n\n\"It's possible,\" Nate admitted. \"It's far enough away that I didn't explore there as a boy. I only went there once, accompanying my father to Kinloch Hold when I was young.\" \n\nI turned to Nate, brow furrowed. \"That's the route to get to Kinloch?\" \n\n\"The most direct way, yes. Father used to go there...actually, I've no idea why. But he stopped going there when I was perhaps ten. I only accompanied him the once.\" \n\nI looked at Aedan and Alistair, apprehension rising and feeling like it would choke me. \"You don't suppose...I mean, would Anders and Solona have gone that way?\" Varel nodded confidently, and I gulped. \"He wouldn't have gone after them, would he?\" \n\nAedan swore. \"He'd better not, if he wants to keep his head,\" he threatened, voice low and growly. \"But they're not due back for another week or so, right? Which means Conrad might get there in time to disrupt an ambush, if that's what's happening. And I suppose we could send another patrol now and hope to catch up to them.\" \n\n\"There's just too much going on at once,\" Alistair complained. \"It feels like we're too spread out. For example, does no one have any idea where the Legion of the Dead went? They may need our help as well, if they've discovered anything.\" \n\n\"Even Sigrun said she didn't know, and I believe her. But I wonder...Trevian was quite upset about the damage to that Thaig where they met Conrad, no? Would they have returned there?\" Zevran speculated. \n\n\"Kal'Hirol?\" I glanced at the map. \"Wulf's patrol should pass near there. But because Conrad is gone, we haven't heard word from him in five days. I don't know how badly the Thaig was damaged -- is there even a way in now?\" \n\n\"Why not send scouts? There are several still here,\" Nathaniel offered. \"They'll travel faster by horse than the patrols will, and we can even send messenger birds with them. Send one to meet up with the patrol nearest the dwarven Thaig, and another to meet up with the other patrol. Send one through the pass towards Lake Calenhad, to see if Conrad or Rolan can be found, or if not, to warn the mages -- they can take the longer route north and avoid any ambush the scout missed. The scouts can send back the birds with whatever they find.\" \n\n\"Excellent idea. We will definitely take you up on that, Nate; thanks. \" \n\nI glanced at the map again, my gaze instinctively shying away from the place where I'd been held captive by the Architect. I sighed and pointed. \"What about,\" I winced, \"the Deep Roads here? There was an entrance on the surface, and even if not in the same complex where they kept me, there could have been other places for the Architect to hide.\" \n\nAlistair smiled, the grimmest and yet most satisfied grin I'd ever seen on his handsome face. \"Not possible.\" He looped his arm around my waist, holding me to him. \"After we rescued you, Anders, Solona, Jowan, and Alim all worked together to collapse the entrance -- and probably half of the tunnels for miles around. Velanna kept them safe while they worked.\" \n\nAedan grinned back at Alistair. \"Mental note: don't piss off a bunch of mages.\" \n\nI laughed. \n\nOur impromptu meeting broke up for Nate and Aedan to start sending scouts out after our errant Wardens; afterwards we all met for supper, including Justice. It was odd, watching a spirit eat; I somehow expected him to be different, or perhaps survive on Fade energy alone, or something, but he shoveled in a healthy Warden-sized portion just like everyone else. The only difference was he seemed completely indifferent to the various tastes and textures, mixing together foods that I'd never have combined and showing no preference for any of the items the cook had prepared for us. \n\nI found myself avoiding Justice over the next few days as we waited for word back from the scouts; between the worry that something terrible had happened -- to Conrad, or to Anders and Solona -- or that something terrible was about to happen -- and where was the damned Architect, anyway? -- I was a walking bundle of nerves, and Justice was just one more thing to worry about. Even Alistair had trouble distracting me, and I found myself lying awake long after he'd fallen asleep, listening to the soft hum of his snoring and trying not to think. I ended up getting up to walk the ramparts by moonlight, pacing for an hour before total exhaustion finally allowed me to sleep when I returned to our room. \n\nWe finally got the first bird back from the scout who went to find Wulf; his patrol had been uneventful, and Kal'Hirol was still, to the best of his ability to check, collapsed and abandoned. A second bird came the same day; Oghren's patrol -- roaming through much of the Feravel plains -- had found several small groups of darkspawn and eliminated another of the Mother's sentient darkspawn, but had seen no sign of the Architect or the dwarves. I knew that both had been given orders that, if nothing unusual had been found on their patrols, they should return to the Vigil as quickly as possible so that they would be nearby when needed to face the Architect. \n\nIt was another two days of worry before we got back the final bird, from the scout who'd headed towards where Rolan and Conrad had disappeared -- and the route the mages would take on their way back to the Vigil. And what it said would leave me even more terrified than I had been before. \n\nCommanders, \n\nUnable to reach the mages. Many darkspawn surrounding Tarcaisne Ridge. Avoided first few groups, but am surrounded. Warden patrols not found. Sending bird before I am overwhelmed. Recommend you come in force. \n\nMaker watch over me, and take me to your side. \n\nTell my wife and son I love them. \n\nScout Lawrence \n\nI bit my lip, eyes welling up in horror as I read the brief missive over Alistair's shoulder after Aedan handed it to him. Are Conrad and Rolan dead? What about their soldiers? Where are Solona and Anders? I struggled to calm my breathing, trying to use my head despite the frantic beating of my heart and the gut-wrenching nausea I felt. Panicking isn't going to help anyone, Sierra. ",
        "My brother and Nate had already started shouting out orders, not that many were needed -- the remaining soldiers and Wardens had been on alert, packed and ready to go at a moment's notice since we had assumed we'd be fighting the Architect hopefully sooner rather than later. \n\n\"How many darkspawn does he have, to have taken two patrols with Wardens?\" I worried. \"Assuming that's what happened to them.\" \n\nAlistair wrapped his arms around me, nuzzling my cheek reassuringly. \"Doesn't matter. We've got two more patrols headed their way, in addition to us and all the soldiers under Nate's command. We'll rescue them if they've been taken, and kill the Architect too. I swear it.\" \n\nI clung to him for a brief moment, trying to absorb his confidence and make it my own; finally I pulled away. \"I love you.\" I went up on tiptoes to press a kiss to the corner of his mouth. \"Let's go kick some ass.\" \n\nHe laughed, and I sprinted away to put on my armour and pack the few things we didn't have ready to go, leaving him with Aedan to arrange our immediate departure."
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "fantasy",
        "fanfiction",
        "dragon age",
        "modern girl in thedas",
        "romance"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-141"
}
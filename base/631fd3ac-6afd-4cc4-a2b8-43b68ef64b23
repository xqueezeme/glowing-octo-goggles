{
    "title": "Ashley's Revenge Ch. 07",
    "pages": [
        "I was sitting at the kitchen table enjoying my morning coffee when I heard my wife Katherine coming down the staircase. I hadn't slept well and had already been awake for a while. My mind was working overtime trying to put all of the pieces of my life where they rightfully belonged. Things that seemed so cut and dried a couple of weeks ago were now spinning out of control. I knew that I was playing with fire but I was like an addict having one last binge before I went out looking for help. I thought I could have the best of both worlds if I could just get Ashley out of my system and get back to my normal life.\n\n\"Good morning,\" Katherine said as she bounced into the kitchen carrying her tablet. She had her hair pulled back in a ponytail and she was wearing sweatpants and a tank top.\n\n\"You're not working today?\" I asked, immediately wondering if my tone of voice sounded as nervous as I thought it did.\n\n\"Oh, didn't I tell you? I'm not going in until noon, we're doing inventory tonight so I figured I'd run on the treadmill for a bit after I have some coffee. Is Ashley coming over today?\" she grinned as she popped her Starbucks K-cup into the brewer and leaned against the counter as it brewed.\n\n\"Yeah, she'll be here at 9AM.\" I was doing some simple calculations in my head and I was having a hard time believing that it was a coincidence that my wife wanted to take a run on a treadmill she hadn't used in months on a morning when I told her Ashley would be ironing the clothes. Oh, did I mention that the treadmill was in the laundry room?\n\n\"That's good, I want to thank her for doing such a great job yesterday,\" she smiled as she added a cream and sugar to her coffee and joined me at the table. My heart was racing but I did my best to appear calm, I didn't think Ashley would burst through the door wearing sexy lingerie and heels or anything but I knew she wasn't expecting my wife to be home when she got here.\n\n\"I'm sure she'll appreciate that, and if you have anything else she can help you with just let her know.\"\n\n\"Oh, I will,\" she grinned as she opened her tablet and loaded up the Drudge Report and started reading the news.\n\nI sipped my coffee and wondered if Katherine had heard something the night before when Ashley was over being my little fucktoy on the couch. Is that why she was all of a sudden going in late to work? I figured that didn't make sense, if she had heard something she'd have done much more damage catching us in the act. Maybe they really were just doing inventory at the store but I would have to make sure to stay on my toes just in case.\n\n\"What did you have planned for her?\" Katherine asked as she looked up from her tablet.\n\n\"What do you mean?\"\n\n\"Today, what did you have planned for Ashley?\" she asked as she raised her eyebrows and looked over at me.\n\n\"Oh, like I said yesterday she said she'd take care of the ironing for you and I was going to have her edit an article for me that I'm writing about the ever changing social media landscape.\"\n\n\"Sounds like the ironing will be the fun part of her day,\" she smirked as she sipped her coffee.\n\n\"Hey, not everyone thinks tech stuff is as boring as you do,\" I grinned as I watched her sip her coffee. She looked cute with her hair pulled back into a ponytail and the thought occurred to me that her current desire to run on the treadmill might not be to spy on Ashley as much as it might be to try and compete with the sexy blonde teenager.\n\nThere was a knock on the patio door and I looked up to see Ashley letting herself in. She was wearing a button down denim shirt that was tied at the waist showing off her midsection with skinny jeans that clung to her thighs and ass in a way that should be illegal. Her brown ankle-strap sandals with 4\" heels showed off her perfectly manicured red toenails and pushed her up over 6 feet tall. Her blonde hair was down and flowing in a very sexy slightly mussed up kind of way.\n\n\"Good morning,\" Ashley said as she walked into the kitchen and put her laptop down on the counter, \"I hope I'm not too early.\"\n\n\"Not at all,\" I said.\n\n\"Good morning, Ashley,\" my wife said, \"How was your first day yesterday?\"\n\n\"It was awesome!\" Ashley smiled, \"Well, the learning about writing was a bit more awesome than cleaning the bathrooms and doing the laundry but I know I'm here to work and I'm just happy for the opportunity.\" I thought to myself that if Ashley ever wanted to run for political office she'd be an absolute natural.\n\n\"That's good,\" my wife said as she closed her tablet and stood up. \"I was just going to take a run on the treadmill, why don't you let me show you where the iron is at.\"\n\n\"Sure, not a problem,\" Ashley smiled.\n\n\"If that's ok with you,\" Katherine said looking over at me.\n\n\"Sure, knock yourselves out.\" I said as Ashley made a kissing face as she stood behind Katherine and waited for her to head down the stairs.\n\nI wondered what exactly was going to happen down there. I had a feeling that Katherine was trying to trip Ashley up and prove that I was the one that did all of the manual labor the day before, which while it wasn't entirely true it was true enough to get me in trouble. I fought the urge to go down to the laundry room and instead went up to my office and read through the MLB site. After about a half-hour or so my wife appeared in the doorway of my office sweating and out of breath with a towel around her neck. \n\n\"I'm sorry,\" she said.\n\n\"For what, exactly?\" I asked looking up from my PC screen.\n\n\"Thinking you had done the work yesterday and not Ashley.\"\n\n\"What changed your mind?\"\n\n\"The girl is like a machine, I've never seen anyone iron and fold clothes so fast and so meticulously.\" She shook her head in disbelief. \"Anyway, I'm going to hop in the shower and get ready for work.\"\n\n\"Ok,\" I smiled.\n\nI heard the water start to run in the shower and shortly after that Ashley appeared carrying the first load of clothes up from the basement.\n\n\"Hey,\" she smiled as she paused in my doorway.\n\n\"So I hear you're good at doing laundry,\" I smiled.\n\n\"Yeah, I spent two summers working at Lindsey's dad's dry cleaning stores when I was in junior high.\"\n\n\"So you're not just a spoiled little princess, huh?\" I smiled as I sat back in my chair.\n\n\"I wouldn't say that,\" Ashley giggled as she took the clothes into the master bedroom and hung them in the closet. \"Come get me after she leaves,\" she said before she disappeared back down the hallway.\n\nI wondered what other talents young Ashley had that were lurking there just under the surface to be discovered. I hoped that now that Katherine had given her a test and she had passed with flying colors that would be the end of it for now. \n\nMy wife apologized again to me before she left for work wearing one of the blouses that Ashley had just prepared and a business skirt and heels. I waited a few minutes after I heard the garage door go down before going down into the basement to relieve Ashley from any further laundry duty for the day.\n\n\"The evil step-mom is gone, you can stop slaving over the iron Cinderella,\" I said as I walked into the laundry room.\n\n\"Does that make you Prince Charming?\" Ashley grinned, a bit of sweat on her brow as she finished folding one of my polo shirts and turned off the iron.\n\n\"I suppose it does,\" I grinned as I walked up behind her and wrapped my arms around her slim waist. \"You are by far the sexiest maid ever,\" I chuckled as I leaned down and kissed her neck, inhaling her sweet perfume.\n\n\"I know,\" Ashley giggled as she turned around to face me. \"What was she doing home this morning anyway?\" she asked as she put her arms around my neck and kissed my lips softly.\n\n\"I'm pretty sure she was checking up on you,\" I said as I kissed Ashley's sweet lips. I moved my hands down and cupped her firm ass and pulled her body closer.\n\n\"More like she was checking up on you,\" she giggled, biting her lower lip as she looked into my eyes.\n\n\"That's probably more true,\" I moaned as I kissed her again, this time I slipped my tongue between her soft, red lips and kissed her deeply. I pulled her closer and could feel her grinding her body up against me as we kissed.\n\n\"Let's take the clothes upstairs,\" Ashley groaned as she pulled away, \"I'm all for fucking you in every room of the house but the laundry room is not high on the list,\" she smiled.\n\n\"Fair enough,\" I said as I kissed her one more time then grabbed half the clothes and helped her carry them up to the master bedroom, enjoying the view of her perfect little ass in those tight skinny jeans as we climbed the staircase.\n\nWe walked into the master bedroom and I put the clothes I was carrying down on the dresser as Ashley carried her load into the big walk-in closet. I sat down on the bed and watched her as she hung the clothes and then began to check out the various items that were in the closet.\n\n\"The bitch really likes her handbags, huh?\" Ashley grinned as she picked up a few of them and examined them.\n\n\"Yeah, but don't all of you females?\" I asked with a grin.\n\n\"Maybe, but she has taken it to a whole new level. Holy crap!\" Ashley's eyes lit up as the pulled out an extra large Jimmy Choo leopard print calf hair satchel. \"I've only seen this one in magazines!\" she shrieked as she walked out of the closet carrying the bag. \"It is absolutely awesome.\"\n\n\"I take it you like it?\" I laughed and watched her as she sat down on the bed next to me like a kid on Christmas morning and examined the bag like it was some long lost find just unearthed from the depths of an important archeological dig.\n\n\"No, I don't like it, I love it! Feel how soft it is.\" She took my hand and rubbed it along the Italian calf hair.\n\n\"Sure, it's soft, but it's just a purse.\"\n\n\"Oh no, it is not just a purse! You guys just don't get it.\" Ashley shot me a look that let me know that I needed to be educated and then went back to exploring every last detail that Mr. Choo put into the handbag. \"Look, it even has a cell phone pocket right at the top.\"\n\n\"I just keep mine in my actual pocket,\" I chuckled.\n\n\"And you took the bitch to the Monet exhibit downtown? I want to see that so bad,\" she said as she looked at some sort of ticket stub that she had pulled from the bag.\n\n\"No, we never went to see that,\" I said as I leaned over to take a closer look.\n\n\"Well she sure did, the ticket is from a couple of weeks ago,\" Ashley said as she held the stub up for me to see before instantly pulling it back to take a closer look at it herself, as she did her eyes got wide. \"Well, I know what you and I were doing that night,\" she smiled as she handed me the ticket stub. It was from the same Friday that Ashley and I spent our first night together, the night my wife told me that she spent at her sister's house where they stayed in and made margaritas.\n\n\"That doesn't make sense,\" I said as I looked at the stub.\n\n\"Are you sure she was at her sister's house?\" Ashley asked, leaning closer to take one more look at the ticket stub in my hand.\n\n\"Well, no but if they went downtown to the exhibit why wouldn't she have just told me?\" I asked, missing the obvious answer.\n\n\"Well, maybe she wasn't really with her sister.\" Ashley looked at me matter-of-factly.\n\n\"Do you think she was with another guy?\" I asked, instantly aware of the irony of asking my hot, young mistress if she thought my wife was cheating on me.\n\n\"It's possible, you have said that the two of you don't have much of a spark lately, and I know for a fact that you emit plenty of sparks,\" she grinned.\n\n\"I need to confront her about this and find out what's going on.\"\n\n\"Or, it could be your get out of jail free card,\" Ashley said as she took the stub back from me.\n\n\"Get out of jail free card?\"\n\n\"Mmhmm, think about it, if she ever catches us you can tell her you were just getting back at her for her affair, put the blame right back on her.\"\n\n\"That actually makes some sense, but we don't know for sure that she's having an affair.\" I looked over at Ashley sitting there on the bed next to me as she slid the ticket stub into her jeans pocket. \n\n\"True, but what other reason would she have to lie to you about where she was and who she was with?\"\n\n\"I can't think of any,\" I said.\n\n\"So the bitch is cheating. On the bright side, I can think of a lot of ways for you to get back at her,\" Ashley said with a smile before she stood up in front of me and started to slowly unbutton the buttons on her denim shirt revealing a sexy red lace bra underneath.\n\n\"A lot of ways, huh?\" I asked with a grin. While I certainly was pissed off thinking my wife was cheating on me, I guess the fact that I'd been fucking Ashley made it hard for me to be too heartbroken about it. If anything, it made my affair with Ashley that much easier as I wasn't about to lose sleep over my affair with Ashley anymore since it seemed that my wife had been the first one to cheat. \n\n\"Yes, more ways than you can imagine,\" Ashley said in a sexy voice as she finished unbuttoning her shirt and untied the bottom before she let it fall to the floor. Her gold cross and chain sparkled above the sexy red lace bra that showed off her perfect, firm B cups. She sat down on my lap and put her arm on my shoulder as she leaned in and softly kissed my neck. \"She doesn't deserve you,\" she whispered as I wrapped my arms around her waist.\n\n\"She doesn't, does she?\" I answered with a low moan as Ashley's soft red lips playfully kissed my neck.\n\n\"No, she doesn't. But I do,\" she looked up at me with her sparking blue eyes.\n\n\"You do?\" I asked playfully.\n\n\"I think so, haven't I been the perfect little slut?\" Ashley smiled wide then bit down seductively on her plump lower lip as her eyes gazed directly into mine.\n\n\"That and then some,\" I answered.\n\n\"That brings us back to my question from last night,\" Ashley said as she looked deep into my eyes, \"What is your biggest fantasy?\"\n\n\"I think you've already been doing a great job of fulfilling almost all of my fantasies Ashley.\"\n\n\"Right, but almost isn't good enough. I remember you seemed at least a bit intrigued about a three-way with Lindsey,\" Ashley whispered softly in my ear.\n\n\"Like I said then, you're the one I want and not Lindsey.\"\n\n\"And that was the right answer,\" Ashley grinned. \"Have you ever asked the bitch for a threesome?\"\n\n\"Not for years, the last time she made it pretty clear it wasn't something that she would be comfortable doing.\"\n\n\"Well, to be fair it wouldn't be easy for any woman to share a man like you, I get that.\" Ashley nuzzled her nose against my cheek and playfully flicked my earlobe with her soft, warm tongue. \"But, if it's something you want I would do that for you.\"\n\n\"You would?\" I moaned as she nibbled softly on my neck.\n\n\"Yes, I would,\" she moaned.\n\n\"Fuck, where have you been all my life?\" I groaned.\n\n\"Right next door, baby,\" Ashley whispered softly in my ear, her warm breath sending shockwaves through my system.\n\n\"Just knowing you'd do that for me is so very hot,\" I said as my right hand slid up Ashley's back and gathered a handful of her soft, blonde hair.\n\n\"Anything for you,\" she moaned as I tugged her back gently by her hair and kissed her neck. Her young body was grinding against my lap as I kissed and nibbled softly on her soft, sweet flesh.\n\n\"You are amazing,\" I moaned.\n\n\"I know,\" she giggled as she backed away enough to look into my eyes. \"Are we done with work for today?\"\n\n\"Yes, I think so.\"\n\n\"Good, then playtime should officially begin,\" Ashley kissed me deeply as her hands ran through my hair. I fell back on the big, kind sized bed and Ashley straddled me and looked down into my eyes. \"Should I find some toys for us to play with?\" she asked with a wicked smile.\n\n\"If you'd like,\" I grinned.\n\nAshley jumped up off the bed and smiled at me. My eyes drank in her long, slim body. Her breasts looked absolutely amazing in the sexy little red lace bra and those skinny jeans looked nearly painted on her frame.\n\n\"Maybe we should get you undressed first,\" I said as I sat up and looked into her blue eyes.\n\n\"You're not stealing my panties today, mister,\" Ashley giggled as she walked back to me and slid her arms around my neck. I moved my hands onto her hips and looked up into her eyes, her firm breasts just inches from my face.\n\n\"Why not, I could have quite a collection someday,\" I grinned.\n\n\"Mmhmm, I'm sure you could, but I need them so I can wear them for my sexy man.\" Ashley leaned down and kissed me softly.\n\n\"Fair enough,\" I said as my fingertips found the waistband of Ashley's skinny jeans and slid around to the buttons on the front and popped the first one free as our eyes locked on each other.\n\n\"I love it when you undress me,\" Ashley moaned, her blue eyes searching mine as I unbuttoned the next button on the fly of her tight jeans.\n\n\"And I love undressing you,\" I moaned as Ashley leaned in and kissed me softly again and I popped the last button on her jeans. I glanced down to see she was wearing a pair of sexy little red lace panties that perfectly matched her bra and couldn't help but smile.\n\n\"You approve?\" she giggled.\n\n\"I do, you are so damn sexy Ashley,\" I said as I looked back up into her blue eyes and let my hands slide her jeans slowly down her sexy long legs. Ashley kicked off her heels and slipped out of her jeans and then leaned in and grabbed the black polo shirt that I was wearing.\n\n\"You're way too overdressed,\" she groaned as my hands grabbed her hips and pulled her body to mine. I kissed her breasts through the red lace of her bra as she pulled my shirt higher. She let out a few high pitched moans as I nibbled playfully on her hardening nipples before I had to move back for her to get my shirt over my head.\n\nI closed my eyes for the moment of darkness caused as the shirt made its way up past my eyes and when I opened them I saw Ashley standing there in front of me with a devilish grin on her face. It amazed me for a moment just how sweet and innocent that she looked standing there in front of me in just her red lace bra and panties with her gold cross and chain around her neck.\n\n\"You should be a model,\" I said as my eyes moved up and down her body looking as good if not better than the models in any lingerie catalog that I've ever seen.\n\n\"But I just want to model for you,\" Ashley grinned and gave me a quick little model twirl to show off her sexy little outfit and her sexy body.\n\n\"You are too good to me,\" I smiled.\n\n\"I know, right?\" Ashley giggled as she walked over to the dresser and opened my wife's large jewelry box. She opened up each little drawer dismissing most of what she saw until her eyes lit up as she opened one of the larger drawers at the bottom. \"These are amazing,\" she said as she took out my wife's strand of pearls.\n\n\"You like them?\" I smiled as she held them up to examine them more closely.\n\n\"They're huge, I want them!\" she giggled as she looked over at me as she put them around her neck. \"How do I look?\"\n\n\"You look stunning,\" I said as my eyes took her in.\n\n\"Where did she get these?\" Ashley asked as she looked at herself in the mirror over the dresser and admired the pearls around her neck. She reached behind her neck and unclasped her gold chain and after gathering it and the cross charm up she set them down on the dresser.\n\n\"They're old, they belonged to her grandmother,\" I said as I sat on the edge of the bed and watched Ashley as she admired herself in the mirror.\n\n\"So she wouldn't be very happy that I was trying them on, would she?\" Ashley smiled a wicked grin as she turned to face me and walked towards me on the bed.\n\n\"No, she wouldn't be happy at all.\" I couldn't take my eyes off of Ashley. I knew I shouldn't be so turned on by the sexy little Catholic school girl from next door but I just couldn't help it. She was so confident and sexy and the mixture of how sweet she looked and how naughty she was made it impossible for me to resist her.",
        "\"Stand up,\" Ashley said as she reached the bed and kneeled down in front of me. I stood up and I watched as her blue eyes looked up at me and her manicured hands unbuckled my belt and unbuttoned my jeans. She grabbed the waistbands of both my jeans and my boxer-briefs and in one quick move had them both down at my feet in an instant letting my hardening cock spring to life.\n\nI kicked off my shoes and socks and stepped free of my jeans and underwear as Ashley playfully flicked the head of my cock a few times with her soft, wet tongue before she pushed me back on to the bed. She got on top of me and kissed her way slowly up my body. Her soft, warm lips felt amazing as they moved up inch by inch with the coolness of the pearls dangling from her neck that followed closely behind.\n\n\"Fuck, you drive me crazy,\" I moaned softly as I grabbed a handful of Ashley's long blonde hair as she kissed and nibbled softly on my neck.\n\n\"Good, because you've been driving me crazy for years,\" Ashley said as she looked into my eyes and straddled me. My hands moved down to her hips as she expertly teased my rock hard cock by gently rubbing it with her soft, red lace panties.\n\n\"I truly had no clue,\" I smiled.\n\n\"Really? I thought I was being way too obvious,\" Ashley giggled as she leaned down and kissed me softly. \"Literally any time I was home and I'd hear your lawnmower or see you out back I'd put on a bikini and go outside to tan, even when it was cloudy! You didn't notice that?\"\n\n\"Oh I noticed you, I just thought I had good timing,\" I grinned.\n\n\"Guys can be so dense,\" Ashley giggled as she shook her head in disbelief and traced my raging cock with her soft panties.\n\n\"That is true; sometimes we just don't have a clue,\" I said as I reached up and pulled Ashley down to me and kissed her hard. I could feel my wife's pearls land on my skin as Ashley's lips landed on mine. Ashley slipped her sweet tongue into my mouth and twirled it playfully around my tongue as she moaned.\n\nI let my big, strong hands slide slowly up and down her back as we kissed. My fingertips found the clasp of her sexy red lace bra and I quickly snapped it open. Ashley moved her shoulders in to let the bra fall before she grabbed it and tossed it across the room all the while still kissing me.\n\nMy hands made their way down to Ashley's firm young ass and I playfully spanked her as her lips devoured mine with each and every deep, wet kiss. She moved her hands up to my shoulders and pushed herself up; her eyes were hovering above mine as both her soft blonde hair and the pearls dangled down on to my skin.\n\n\"Last night was so hot,\" Ashley moaned low as she looked into my eyes, \"Just knowing she was up here asleep while you were inside of me. I made myself cum a few times after I got home just thinking about it.\"\n\n\"You are a very naughty girl, but you're right it was fucking hot.\" I grinned and gave her firm, young ass a squeeze.\n\n\"I'd love to fuck you with her sleeping right next to us on this big bed,\" Ashley moaned with a wicked little grin.\n\n\"Wow,\" I groaned as I looked up into her blue eyes.\n\n\"For now, let's put these pearls to good use,\" Ashley smiled and quickly started kissing her way down my body until she was kneeling in front of me and her soft, red lips were on my rock hard cock. She flicked the big, swollen head with her tongue and then took the entire length deep into her hot, wet mouth.\n\nI watched her closely as she bobbed her head up and down my throbbing cock. She reached back behind her neck and unclasped my wife's pearls as she looked up at me with her innocent blue eyes. She brought the pearls down and slowly coiled the strand snugly around my rock hard cock. She used her tongue to coat the pearls with her sweet spit before putting her palms on both sides of my throbbing cock and slowly started sliding the pearls up and down.\n\n\"Fuck,\" I growled as the sensation of the wet pearls rolling up and down my cock made me want to cum nearly immediately. I took a deep breath and tried to think of anything but what Ashley was doing in order to regroup.\n\n\"You like that?\" Ashley giggled as she smiled up at me. I watched as her manicured hands with the pretty red nail polish and French tips rolled the pearls slowly up and down over my engorged flesh.\n\n\"Yes, fuck, that feels amazing,\" I moaned as Ashley bit down seductively on her soft lower lip as she guided her hands up and down with a slow, steady pace. I moaned as my body thrust upwards every time she let the slick pearls glide up over my sensitive throbbing cockhead and she giggled like a schoolgirl with a new toy.\n\nAshley brought the pearls down to the base of my cock and let her soft red lips engulf my cockhead, rolling her tongue quickly around it before bringing the pearls back up. She did this again and again and I could feel my cock wanting to explode. I was doing everything I could to make the sensation last forever but knew I was fighting a losing battle as Ashley rubbed the pearls up and down my cock.\n\n\"That's it baby,\" she moaned in her sweet little girl voice, \"cum for me.\" Her hands worked the pearls faster up and down, over and over, the combination of the friction from the pearls and her soft, sweet mouth was a sensation like I'd never experienced before. Ashley sucked on the head of my cock as I felt myself exploding.\n\n\"Fuck, yes, Ashley,\" I moaned out as she slid the pearls down my raging shaft and engulfed my mouth with her soft, sweet lips. Her eyes were looking up into mine as I exploded deep into her mouth. Her hands jerking me over the pearls milking me of every last drop of my hot, sticky cum. \"That was fucking amazing,\" I moaned as Ashley relaxed her lips and let some of my jizz fall down onto the pearls as she used her hands to slowly rub it in.\n\n\"Oh darn, I guess I got the bitches' pearls all dirty,\" she giggled as she slowly stroked my recovering cock.\n\n\"Yeah, very dirty,\" I groaned out of breath.\n\nAshley slowly uncoiled the pearls from my cock and then she moved up next to me on the bed. She sat facing me and she spread her long, sexy legs so I could see the little red lace panties that she was wearing were now absolutely soaked with her juices. She wrapped the strand of pearls around her fingers and started slowly sliding them up and down her body, moaning softly as they rolled over her pink puffy nipples.\n\nAshley slid her hand slowly down her body until it was between her legs, rubbing the pearls softly over her red lace panties as she let out soft little moans as she teased herself. She moved her free hand over and slid her panties to the side giving me a perfect view of her pretty pink pussy glistening with her sweet juices. Ashley looked into my eyes and smiled as she let the pearls touch her pink pussy lips then slid them up over her clit as she bit down hard on her lower lip and moaned.\n\n\"They feel so good,\" she groaned as she used the pearls to make small little circles over her clit. \"Covered with your cum and my sweetness,\" she moaned. I watched her as she rubbed her dripping wet slit with the pearls and then guided a few of them inside her pussy before slowly sliding them back out. \"Holy hell, that feels fucking amazing,\" she groaned.\n\nShe looked into my eyes as she slowly used her fingertips to guide more and more of the pearls inside of her hot, wet pussy. Moaning softly as each individual pearl slid inside her. After about half the strand was inside of her she grabbed my left hand and brought it down to the end of the strand laying on the bed. I grasped it between my fingertips and watched Ashley's face as I pulled the pearls ever so slowly from inside her.\n\n\"Oh fuck yes,\" she moaned as she took long, deep breaths. \"God that feels so fucking good,\" she moaned in a high pitched whisper as I slid them out slowly one by one.\n\n\"You are such a naughty little slut,\" I groaned as I changed the angle of the strand of pearls so that they were rubbing against her clit as I pulled them slowly from her dripping teenage pussy.\n\n\"Oh fuck yes!\" she screamed as she leaned back onto the bed, the wet pearls coming out of her wet pussy and then right up to tease her sensitive clit. She let out a soft squeal as she tried to catch her breath when the last of the pearls worked itself free from her pussy.\n\n\"Again?\" I asked with a devilish grin. Ashley's eyes were on fire with lust as she gazed back at me and nodded. She watched me closely as I quickly removed her red lace panties and then used my fingertips to slowly guide the smooth pearls back inside of her dripping wet pussy one by one.\n\n\"Oh fuck,\" she gasped as the last of the pearls disappeared inside of her tiny box leaving only the clasp visible. I moved down so my face was between her legs and I held onto the clasp as I kissed her soft, wet flesh and used my tongue to make quick, teasing circles around her sweet clit. Ashley shrieked and grabbed a hold of my hair as I sucked her sweet little button into my mouth and moaned. My tongue rolled around her clit ever so slowly as I could feel her body squirming below me. \n\nI grinded my lips up against her sweet flesh as my tongue continued to tease her with soft little circles and quick little flicks. I could tell by the continuous moans and shrieks that she was getting close; I glanced up and could see her firm B cups rising and falling as her breathing quickened. Her eyes were closed and her head was grinding her soft blonde hair back into the bed as she let go and exploded into a shuttering orgasm.\n\nI let my tongue roll around Ashley's clit as she rode the wave of pleasure and I slowly pulled the first of the pearls from her dripping wet pussy. Ashley moaned as the pearl slipped past her soft, pink pussy lips and she squealed when my tongue flicked her clit playfully. That's how it went for the whole strand, one glistening pearl would appear then my tongue would tease her or I'd suck on her sweet little clit and she'd moan and scream and squeal with delight. When the last of the pearls appeared I leaned in and kissed her clit as I looked up into her amazing blue eyes. She looked down and smiled as her body collapsed back onto the bed giggling.\n\n\"Holy fuck baby, that was hot,\" she moaned as she moved herself up and fell into my arms. She kissed my lips with a soft, wet lingering kiss.\n\n\"Yes it was, and it looks like you can clean more than just clothes,\" I chuckled as I held up the strand of pearls as they glistened with Ashley's sweet juices.\n\n\"Yep, good as new,\" she moaned softly as she nuzzled her face against my neck, still trying to catch her breath. I reached out and dropped the pearls onto the nightstand and then pulled Ashley's body closer to mine.\n\n\"Think of me the next time she wears them,\" Ashley whispered.\n\n\"Oh, I will,\" I grinned as I got on top of Ashley, supporting myself on my elbows. Her long legs wrapped around me as I looked down into her blue eyes. Ashley's hand moved down my body until she found my raging hard-on.\n\n\"You don't even give a girl time to catch her breath,\" she grinned as she guided my throbbing cock to her waiting pussy. I could feel her dripping wet lips caress the head of my cock as Ashley moved it up and down slowly, coating my cockhead with her slick juices. \n\n\"Are you complaining?\" I groaned with a grin.\n\n\"No, sir,\" she moaned as her hands moved up around my neck. I leaned in to kiss her soft, red lips as my throbbing cock slipped slowly inside of her tight, wet pussy. I moaned as I fucked her slowly, her pussy gripping my cock ever so tightly with each slow, deep thrust. I took a deep breath as I guided my rock hard cock deep inside Ashley and just left it there for a moment, I looked into her eyes as she smiled up at me. She softly bit her lower lip and I could feel her pussy muscles contracting against my cock.\n\n\"You have no idea how fucking amazing that feels,\" I moaned.\n\n\"I think I have a clue,\" she giggled as her pussy gripped me as tight as it ever has as our eyes locked on each other.\n\n\"Fuck,\" I growled as I kissed her deeply and rolled over onto my back and pulled her sexy, slim body on top of mine. Ashley was straddling me with her hands on my chest as I looked up at her beautiful face looking back at me as she guided her body slowly up and down on my engorged cock. \n\n\"You like my pussy, baby?\" Ashley moaned in her little girl voice.\n\n\"I do,\" I groaned as my hands grasped her hips and guided her tight pussy faster up and down my cock.\n\n\"I would never cheat on you,\" Ashley groaned as she leaned down, her blonde hair falling all around me as she kissed me deep. Her hot young body was grinding against mine and her tight little pussy was sliding up and down my throbbing hard cock. Her body felt so good on mine and her pussy was absolute heaven.\n\n\"Ashley,\" I moaned.\n\n\"I mean it; I would never do that to you. The bitch doesn't deserve you,\" Ashley whispered in my ear as she rode me slowly, her hair tickling my face as she nibbled softly on my earlobe. Feeling her on top of me and feeling her soft lips on my skin just felt so right.\n\n\"And who does?\" I asked with a moan as I kissed Ashley's neck softly and let my hands slide up the soft skin of her back.\n\n\"I do,\" Ashley moaned quietly as she let her pussy pause at the base of my cock, \"but you've already said that I'm too young to know what I want.\"\n\n\"Ashley\u2014\"\n\n\"I get it,\" Ashley interrupted, \"I'm young and you don't think I know what I want.\" She pushed herself up on her hands and looked directly down at me with her sexy blue eyes as I used my right hand to gather her soft, long hair behind her back so it wasn't falling down on me.\n\n\"You are young, Ash.\"\n\n\"I know, but how does that have anything to do with knowing what I want? For years I've tried to get you to notice me. I used to think you could never look at me as anything more than a little kid, is that how you see me?\"\n\n\"You know I don't, Ash.\"\n\n\"So how old do I have to be to know what I want?\" she snapped.\n\n\"I don't know,\" I moaned as Ashley resumed slowly guiding her tight, velvety pussy slowly up and down my cock.\n\n\"I'm old enough to get your cock rock hard, aren't I?\" Ashley said as she smiled a wicked little grin.\n\n\"Yes,\" I nodded, \"you are.\"\n\n\"I've wanted you for years now; this isn't some stupid little girl's crush that will go away. I never thought I would have a chance with you, but now that I know your wife is a cheating little bitch I want you to know that you can have me if you want me.\" Ashley's blue eyes were looking down into mine and her tight, teenage pussy was gripping my manhood hard when she added, \"It's all up to you.\"\n\nMy brain was moving in all sorts of different directions trying to process all of the information. I wanted Ashley; there was no doubt about that but our age difference and my marriage made things so very complicated. If my wife was cheating on me that just added to the complication and I didn't even want to think about that. Ashley was just supposed to be a fantasy, but God help me I had to admit I wanted her more and more every day.\n\n\"You know I want you,\" I moaned as Ashley slowed down her pace and started teasing my with a few slow shallow strokes before she'd slide her pussy fully down the length of my cock.\n\n\"I know, it's complicated,\" Ashley moaned as she leaned in and kissed my neck softly as her pussy glided up and down my shaft.\n\n\"Yes, it is,\" I groaned.\n\n\"I just wanted you to know where I stand,\" she said as she nibbled playfully on my neck. \"I'll do whatever you want, baby.\"\n\n\"Where were you before I got married?\" I asked with a wry smile.\n\n\"Being born!\" Ashley laughed as she put her hands on my shoulders and pushed herself up onto her knees. She groaned and bit down on her lower lip as her pussy teased the head of my throbbing cock by taking it in just an inch or two over and over again as she looked down into my eyes.\n\n\"Good point,\" I grinned. For a moment I felt like a dirty old man for fucking a girl that wasn't even born when Katherine and I got married. But Ashley was no little girl, every minute I spent with her proved to me that she was indeed very grown up.\n\n\"How about this, I help you find out if the bitch is cheating or not,\" Ashley said as she smiled down at me, \"And if she is we will make her pay, deal?\"\n\n\"Deal,\" I said as my hands slid up her hips and I started thrusting my hard cock up inside her as I pulled her young body down to mine. I watched her as she rode me; her body was perfection with her firm tits bouncing and her sexy long blonde hair flying every which way as she bounced up and down on me.\n\n\"If she is cheating,\" Ashley moaned, \"I say we tie her up and make her watch as you fuck me.\"\n\n\"Fuck, you are so naughty baby,\" I groaned as Ashley pounded her body down on my cock harder and faster, taking every inch of my hard throbbing cock inside her.\n\n\"Only for you,\" she moaned, \"Fuck your little slut, daddy.\"\n\nI was close to cumming and trying to make it last just a little bit longer so I pulled Ashley up off my cock and took a deep breath. She looked at me and began to pout as I stood up next to the bed and pulled her body to mine. I leaned in and kissed her hard as I took a handful of her soft, blonde hair with my right hand and pulled her to her feet. I spun her body around and bent her over the side of the big king bed.\n\nI grabbed my wife's pearls from the nightstand and I put them around Ashley's neck and she moaned loudly as I slipped my hard cock back inside of her soaked little pussy. \n\n\"Fuck me, husband,\" Ashley moaned as I grabbed a handful of her hair with my right hand and wrapped it around my fingers. I tugged her back hard by her hair as I pounded her tiny pussy with my throbbing cock with deep, hard thrusts. I reached up with my left hand and grabbed onto the pearls and tugged them back hard hoping they wouldn't break and she shrieked with delight.\n\n\"You like that, slut?\" I moaned as I split her teen pussy in two with my throbbing eight inches and grinded her sexy slim body into the big bed.\n\n\"Yes baby,\" she moaned, \"use your little slut. Fuck me, choke me, make me cum, daddy.\"\n\nMy balls were slapping up against Ashley's perfect young ass as I tugged her back by her blonde hair and the pearls. Her pussy was soaking my cock as she started to cum over and over again as she let out scream after scream. Her tiny pussy gripping and releasing me as I let go of the pearls for fear that I'd break them and tugged her back hard by her hair as I moaned and started to explode.\n\n\"Yes! Yes! Yes!\" she screamed as I thrust myself as hard as I could deep inside her tight little body. I yanked her hair back hard as I filled her pussy up with wave after wave of my hot white cum, loving the way she moaned as she took each and every drop. Her head was looking up at the ceiling as I pulled back hard on her soft, blonde hair and moaned as my orgasm subsided.\n\n\"You are truly amazing,\" I said as I slid my cock from Ashley's pussy and pulled her up to me as I released her hair.\n\n\"I know,\" she groaned as I leaned in and kissed her sweet lips. I fell down to the bed and took Ashley with me.\n\n\"You drive me crazy, I hope I didn't pull too hard,\" I whispered as Ashley climbed on top of me.\n\n\"Not at all,\" she grinned as she stared into my eyes with my wife's pearls hanging from her neck. \"You turn me on so much. This is exactly how I imagined it would be.\"\n\n\"Then you have a very dirty imagination, young lady,\" I said as I tried to catch my breath.\n\n\"You have no idea,\" Ashley giggled as she stretched her long body out on mine and rested her head on my chest and closed her eyes and we drifted off to sleep."
    ],
    "authorname": "TallMarriedMan",
    "tags": [
        "revenge",
        "blonde",
        "schoolgirl",
        "internship",
        "catholic",
        "pearls",
        "cheating",
        "hair pulling",
        "wife"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/ashleys-revenge-ch-07"
}
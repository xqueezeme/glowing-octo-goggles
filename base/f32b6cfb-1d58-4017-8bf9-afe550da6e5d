{
    "title": "My First Prostitute Ch. 01",
    "pages": [
        "All characters are over the age of 18 and fictional.\n\n------------------------------------------\n\nThe room was a pale shade of green. It held the air mute and chilly. The A/C unit hummed in a nearby corner. \n\nHe sat motionless on one of the two beds the room offered; the bed closest to the motel's lone door. He faced this door with a spark of expectation reflected in the wet of his eyes. \n\nThe beds were made. The room was pristine (as much as one could expect a motel of this tier to be). No suitcase. No clothes laying around on the floor. The only light source came from the bathroom where Kurt had left on the overhead dome. Close to hand, near a digital clock, lay a wallet and a set of car keys. Nothing else. Just one handsome, anxious man, the means to travel and pay, and a solitary light in the dim, verdant background gave character to Kurt's temporary room.\n\nKurt's hands lay flat over his knees in a gesture of waiting. Fingers rubbing deep, warm tunnels into the denim of his pants. Kurt was nervous. But he was also very excited. He could feel the heat from his hands, seemingly tangled in his jeans, travel up his legs, through his guts and settle just below his ribcage\u2014where his heart beat in time with the low-hum of traffic passing outside.\n\nKurt was indeed waiting\u2014waiting for a girl to show up at the door of his motel room. A prostitute, to be most accurate: his very first one. \n\nHe had first spotted her on a corner, not far from the motel room he currently was sitting in, about a month previous; it had taken that long for Kurt to build up the courage to approach her and arrange this rendezvous. \n\nHer name was Amanda. Or at least that was the name she had given him. She was blonde, tall, and lanky with pert breasts. She was fair in a slightly weathered, hardened sort of way\u2014a way that Kurt appreciated quite a bit. It was her eyes, her lips, her disposition of beauty that had attracted him most of all, that had inspired him to actually go through with paying for her services. Something he had never done before.\n\nIt was something in her eyes, something he couldn't quite put poetry to (though he truly wanted to try) that instilled within him the desire to have her. \n\nSo he asked her, as sweetly as he could, how much, and she told him. Told him to get a room at the River View Motel (no river to view) and wait for her there. That was where she conducted her business, she had told Kurt. So he booked a cheap room and placed a small blue rock she had given him to put just to the right of the room door he was occupying, near the jamb, so she'd know which to knock on.\n\nShe said it'd be about a half hour. She only had to clean up real quick but never told him where she was going to do that, so he didn't ask. It was immaterial as far as Kurt was concerned. \n\nTwenty minutes had now passed since their arrangement and Kurt sat still as the blue rock outside his door, waiting. The only parts of his body one could witness on the outside that evidenced his nervous state was the clawing and un-clawing of his hands on his knees. While inside, his guts churned like a laundry cycle on spin. Some of that heat making its way, finally, down to his penis. He greeted it there, for a moment, cordially, but tried to remain calm. He didn't want to be in an already aroused state when Amanda knocked. He wanted to build slowly up to that. \n\nAnd, hopefully, build her up to that state too.\n\nHis cock ceased to harden, for now, by force of will. He focused on the round, denim-ed pivots of his knees.\n\nA knock suddenly came at the door.\n\nKurt jumped on the bed, startled. His mind had been distracted, if only briefly. His cock forgotten (also, only for now) by the sudden change, it seemed, in the motel room's atmospheric pressure brought on by the knock; Kurt stood up from the bed, walked resolutely to the door.\n\nWith his head close to the frame, Kurt found his voice.\n\n\"Hello. Who's there?\"\n\n\"It's Amanda.\"\n\nThe voice was a bit husky from smoking too many cigarettes and the hard living affiliated with her profession, but Kurt recognized it immediately from speaking to her earlier in the evening.\n\nKurt opened the door. Amanda entered.\n\nShe was wearing a tight blue dress that hugged her hips, stomach and chest. It was low-cut, revealing the tops of her breasts. The cleavage suggestive and alluring. Kurt found his eyes were instantly drawn there. The fabric that was drawn tightly over each breast revealed that both nipples were hard and poking through the blue of her dress. Kurt wasn't sure if that was from the slight cold outside or a sign that maybe Amanda was excited for their tryst. He certainly hoped for the latter.\n\nAmanda took in the room; her eyes travelling over the two beds with practiced ease. She appeared to be making sure the environment was safe. Kurt didn't say a word, simply allowed her this freedom. He imagined in her business you could never be too careful and this was part of how she stayed safe. \n\nShe dropped her purse down in a chair that flanked the still humming A/C unit. She walked to the still alight bathroom, looked in, seemed satisfied that no one was there to hurt her; then turned her attention back to Kurt.\n\n\"Well,\" a slight smile touched her mouth. \"We have an hour. What did you have in mind?\"\n\nKurt looked into her eyes\u2014and yes, it was there!\u2014he saw a bit of the same excitement reflected back wet in her eyes.\n\n\"I want to be honest.\" Kurt said. \"This is my first time doing something like this.\"\n\nAmanda's smile only widened.\n\n\"I could kind of tell that.\" She said.\n\n\"Really?\" Kurt wore mild-surprise attractively. Amanda noticed. \"What gave me away?\"\n\n\"For starters, you're really attractive. And in my experience, the more attractive you are, the more likely this is your first and only time doing something like this, just to say you did it. Does that about spell it?\"\n\n\"Well, I'm not for sure it'll be my only time.\"\n\nKurt mirrored her smile. Amanda looked down at the heels she wore\u2014blue, to match her dress; a bashful look adorned her face as she looked to the ground. \n\nHad Kurt charmed her, if only a bit? \n\nHe followed her eyes to the floor, found her feet. The small hole at the front of each shoe showcased a small window where Kurt could see a few of her un-painted toes. He couldn't peel his eyes from them; Kurt had a huge foot fetish. \n\nAmanda noticed where his eyes were planted once her slightly-reddened face rose to search for his. She joined his lusty stare.\n\n\"Do you like feet?\" She asked in a sultry voice. \n\nKurt looked up into her wet eyes, nodded. \"I do. A lot.\"\n\n\"That's certainly a fun way to start. I was hoping to get things moving. Not because I want to go, just because I want to enjoy every moment of our hour together, and I want you to as well. You are honestly really sexy. I don't even mind if our time goes over a bit. I was looking forward to this.\"\n\nShe winked at him. Kurt smiled. Felt that familiar energy begin its abrupt journey from below his ribcage back to the head of his penis.\n\nAmanda made her way to the same bed, to the same spot, that Kurt had been sitting earlier, sat down and crossed her legs. \n\nShe looked up at Kurt as he moved to stand over her.\n\n\"Do you want to take my heels off?\" She asked.\n\n\"I do.\"\n\n\"Then take them off.\"\n\nShe reached her right shoe out toward Kurt. The pointed toe-end slid up between his slightly-parted thighs. The shoe climbed to about an inch below his balls before stopping. Amanda watched Kurt's cock harden before her eyes, against the rough denim of his crotch, before raising her eyes to his.\n\nKurt slowly got down on his knees, kneeled in front of Amanda's extended shoe. Taking the shoe into his hands, Kurt unhurriedly pulled the blue heel from her naked foot. His nose was so close to her foot now that he could detect a slight hint of the fragrance that was her most intimate of body parts. The smell drove Kurt wild. It was a mixture of lotion and sweat. His cock was fully aroused under his clothes. Almost barricaded by his boxer briefs and tight jeans.\n\nHe placed her shoe down on the carpet, took her naked foot, pink on the bottoms, clean, no dirt (just as he preferred them) before his mouth, began rubbing his lips across the bottoms of her toes; mashing them, wet, against the balls of her feet. He let his tongue sneak out, started dragging it down her arch, tasting her delicate, warm skin. His eyes had been closed while doing this but a sudden moan escaped from Amanda's lips, causing Kurt to look up and watch her.\n\nShe was leaning back with her arms as support behind her. Her eyes were closed as his had been before. Her mouth open in pleasure. She clearly liked what he was doing. Maybe she entertained a foot fetish of her own.\n\nKurt stopped licking and sucking on the heel of her foot for a second to ask. \"Do you like when I put my mouth on your foot?\"\n\nHer eyes opened at his question; she looked down at him with hungry eyes.\n\n\"I love it. It appears we have something in common.\"\n\nShe kicked off her other shoe, leaving both feet pink, damp and wanting attention. She laid back lifting both feet into the air, forcing Kurt to stand up; his cock rigid in his pants. \n\nAmanda pulled her legs high over her head, giving Kurt a great view down her legs, past the back of her knees, down her hamstrings, to the round apple of her pussy and ass. She was wearing dark blue panties. Kurt noticed a darker patch of blue in the center of her pussy. He involuntarily moaned. She was really turned on by him and what they were doing. This night was going better than he could have ever imagined.\n\nKurt had an idea. He pulled one of the chairs flanking the A/C unit over to where he was standing, looking over Amanda's body on the bed. He started to unbutton his belt and jeans. The sound of his belt buckle caused Amanda to look around her legs at him.\n\n\"What are you doing?\" She asked, not entirely worried; a heavy husk was still very present in the core of her voice.\n\n\"Just stay like you are.\" Kurt said as he pulled his jeans and boxer briefs down to his feet (naked now that he had kicked off his shoes). \"I want to watch you for you a bit. This is too hot to not take advantage of what I'm seeing.\"\n\nHis hard cock flopped out straight as rebar. On the floor, in the crotch of his boxer briefs, Kurt had left his own wet spots. Precum was smeared all along the front.\n\nAmanda positioned her head to best take in Kurt's cock from where she lay on the bed. She saw that precum was glistening on the head and deep within the slit. She took one of her fingers and gently dragged it across the bottom of her lips. His cock looked so good; she was so turned on to see what she was doing to him. She sucked her finger in a simulation of wanting to suck that cock displayed in front of her.\n\n\"That cock looks so good.\"\n\nKurt sat back in the chair. Pushed his pelvis up and out a bit, so she could see his cock well, and began to slowly stroke it. He thumbed the precum that was sitting patiently upon the tip in circles around his head, making it glisten. Amanda moaned while watching him do that. Kurt's mouth opened from the pleasure it caused. \n\nSoon, his dick was as slick as if he had put it in her, so much was his arousal and the amount of precum pumping out of his cock slit as he stroked.\n\nAmanda moved up on her haunches to watch him touch himself. In one quick motion, she lifted her dress up and over her head. She was naked underneath except for her blue panties, darker yet in front of her pussy. That patch of panties was so wet at this point, Kurt could make out the cleft in her vagina\u2014could almost imagine he could see her hardened clit through the fabric.\n\nHer tits were free from restraint now, and Kurt took them in, sighing with desire as he stroked. Her nipples were pink, almost like the bottoms of her feet, and erect. Amanda's eyes were locked on Kurt's hand as he moved up and down his hard penis (all eight inches of it), but her fingers still went unbidden to her nipples, began pinching them, moaning as she did it.\n\n\"Your dick looks so good while you're stroking it. God! It gets me so wet.\"\n\n\"I can see it. I love how wet I can make you.\"\n\nAmanda began pulling down the flimsy fabric of her panties; the last shred of clothing she wore.\n\n\"I'll show you just how wet.\" She breathed heavily.\n\nPulling her legs up, not unlike a frog, onto the bed, Amanda reached down between her legs, and with two fingers, pulled her pink pussy lips apart to show Kurt how wet he had made her. Inside of her pussy, it was even pinker than on the outside; her pussy positively glared with juices. Kurt could even perceive a slight bubbling at the bottom, where her pussy tapered off, running into the sweet bud of her asshole. Wet noises reached his ears as she continued to spread herself apart.\n\nUnbidden, once again, Amanda's finger found its way to her hardened clit (just as Kurt had imagined it being through her panties) and began to rub small circles just below its hood. She moaned loudly the moment the pad of her finger made connect. \n\nThe two of them were now vigorously touching themselves while watching the other. Only a scant two feet or so separated one from each other.\n\n\"Lean back for me.\" Kurt asked. \"Lay back and pull your knees and feet back. So I can see the bottoms. I want to see your feet, your pussy as you touch it, and your asshole as your juices drip down it.\"\n\n\"Oh yes...\" was all Amanda could manage; she leaned back, pulled her knees back, feet up, just as he asked. She continued to rub herself. \n\nKurt stroked hard and fast as his eyes feasted on the view Amanda was giving him. He watched her wet fingers rub her pussy into such a froth that, indeed, a small pearl of liquid escaped the bottom of her vagina, dripped down across the small, brown bud of her asshole, wetting it.\n\nAmanda moved slightly to the side so she could better watch Kurt as he stroked.\n\n\"Do you like what you see?\"\n\n\"Mmm. You have no idea. The hottest sight of my life.\"\n\n\"I love watching you touch yourself.\"\n\n\"Same here. Oh, man...\"\n\n\"Do you want to watch me cum?\"\n\n\"Oh, God, yes! Cum for me. Make your pussy cum.\"\n\n\"I'm going to make it cum for you.\"\n\nShe reached out her right foot to Kurt.\n\n\"I want to cum with my toes in your mouth.\" \n\nKurt eagerly received her salty toes into his mouth, began sucking them, still stroking as he leaned forward.\n\n\"Yes, baby, that feels so fucking good. Stroke that cock.\"\n\nAmanda rubbed the red, hard, glistening nub of her clit while watching Kurt suck her toes (which felt amazing) and stroke his engorged cock (which was purple on the head from arousal, red along the shaft); precum still decorated every glorious inch.\n\nKurt moaned against Amanda's foot. Amanda moaned out loud. She felt his saliva coat between her toes and drip down towards her heel. \n\nShe felt her pussy clinch in the throes of her orgasm while feeling\u2014watching\u2014these sensations.\n\n\"I'm cumming!\" She screamed. \"I'm cumming! Watch it! Watch it cum!\"\n\nKurt looked down to Amanda's open, pink pussy\u2014her finger a blur over her clit\u2014as it seized, contracted and came in front of him. He saw her fine, pink lips moisten as fresh wet came gushing from within, guided by her orgasm. \n\nAmanda fell back on the bed fully, satiated. Her foot came smoothly from Kurt's mouth and he let it go, eased back on his stroking as he felt that a chapter within the book of their \"hour\" had just ended. And he wasn't close to being ready to cum yet. \n\nKurt had incredible stamina; it was his favorite part about sex (and one of the main reasons he had sought out a prostitute): foreplay. The long period of the delayed climax, filled with lengthy teasing and prodding of each other's parts, till finally, neither can take it anymore and he is basically coaxed to cum. Kurt had never found a partner (despite his relative young age of twenty-nine) that would indulge his whims for foreplay, not to the extent that he wished for. To him, it was all about the delay.\n\nBut Amanda, she seemed primed for such an exercise, seemed almost to crave it. \n\nCould she be someone that he could...?\n\nHe didn't finish the thought.\n\nKurt was having the time of his life. No need to overcomplicate things, not right now. \n\n\"That was a really good orgasm you just made me have, Kurt.\" Amanda said, breaking into his brief thoughts, still out of breath, spread out on the bed. Her nakedness still just as fetching as it had been thirty minutes ago (had thirty minutes already passed?); he was ready for more.\n\n\"I like it when you call me by my name.\" Kurt said genuinely.\n\n\"Do you?\" Amanda raised herself up on her elbows to look at him.\n\n\"Yes. I really do. Now. I'm going to ask you what you'd like to do next?\"\n\nA sly smile spread across Amanda's face. Kurt could see a slight sheen of sweat had sprouted between her two lovely breasts; both nipples still pink and just as erect as before.\n\n\"I have a few ideas.\"\n\n\"Well,\" Kurt intoned, leaning back in the chair, his cock still hard and upright. \"I'm all yours.\"\n\nFrom the way Kurt was leaning back, it gave Amanda a great view of the shaft of his dick, wet with the precum he had used as lube earlier while stroking to her touching. Her eyes travelled the length of his considerable shaft, fell down to his tightly-wound ball-sack. She noticed that precum had even dripped down to there. She eyed the entirety of his cock hungrily. \n\nShe wanted it in her mouth.\n\nShe wanted to paint his balls with her spit.\n\nShe even wanted to tongue his asshole, something she rarely ever felt compelled to do. But there was something about Kurt that really got her motor-running in ways few men did. It had something to do with his quiet assurance of what he desired, and his complete transfixion with her. \n\nNothing had ever gotten her so wet; her clit so hard.\n\nAmanda scooted across the bed towards Kurt. Her eyes playing over his partially clothed body. \n\nThat won't do, she thought.\n\nShe bent down and began pulling his fallen jeans, and boxer briefs, still damp, out from under his bare feet, tossing them absently behind her. She placed the palms of her hands down on the top of his pale thighs (his cock standing at attention between her arms, but not touched, not yet). Her arrangement of hands upon his thighs almost mirrored Kurt's placement of his own hands earlier in the evening. Pushing her palms slowly, almost as if massaging the thick muscles of his quadriceps, Amanda pushed her hands up Kurt's legs, under his shirt, and up his abs (which weren't ripped but tone enough for Amanda to feel some juice leak from her pussy as she kneeled forward).\n\nAmanda's hands continued their upward progress, over Kurt's chest, tangling in his chest hair briefly before finding and rubbing his nipples.\n\nKurt's head jolted back from surprised pleasure; a moan escaped from between his lips. He hadn't seen that coming.\n\n\"Sensitive nipples.\" Amanda stated.\n\nKurt merely nodded as her fingers worked his nipples. Despite her not having asked an actual question.\n\n\"Same here. I love them to be pinched and sucked.\"\n\nAmanda stopped pinching Kurt's nipples and pulled his shirt up over his head. Finally, he had joined her in complete nakedness. She stood up, placed a kneed on either side of Kurt's thighs, straddling him, but not to the extent that Kurt's inviting cock could penetrate her. She leaned forward instead, offering Kurt her nipples.\n\n\"Would you suck them for me?\"\n\n\"Mmm. They're so hard. So pink.\"\n\n\"They're hard for you. Been hard for you since you approached me.\"\n\nKurt looked up into her fluid eyes at that comment. A part of him felt dizzy with the knowledge.\n\n\"Take one into your mouth.\" She breathed, and he felt her breath, warm, against the top of his head. \"Suck it for me. Suck it good. Make it wet.\"",
        "So Kurt did. He darted out his tongue first, flicking it lightly in rapid succession. Amanda's breath caught sharply (he felt it on his forehead) when he did that.\n\n\"You like that don't you?\"\n\n\"Mmm, Kurt...do it more.\"\n\nSo he did. Flicked one nipple, then the other, with his tongue; and Amanda moaned loudly as he did it.\n\nShe reached down, couldn't help it, and began stroking Kurt's proffered cock: still hard, still wet at the tip with fresh precum. She dabbed one finger into his slit, as if wetting the tip of a paint brush. She took it to her mouth and sucked; just as he was sucking her nipples below her. It tasted amazing. The best cum she had ever tasted (and she, unfortunately in some cases, had tasted her fair share). \n\n\"God, your cum tastes so good.\" \n\n\"Taste all you want.\"\n\n\"I will. Mmm...My nipples feel so good in your wet mouth.\"\n\nHer hand found his cock again, continued stroking.\n\n\"Your hand feels amazing on my cock.\"\n\n\"Your cock is so hot. So warm. I think it wants to cum, Kurt.\"\n\nKurt moaned against the nipple in his mouth.\n\n\"I'm almost ready.\"\n\n\"Your stamina is amazing. I love it. Playing with you is the most fun I've ever had doing this.\" She paused. \"Fuck. I need that cock in my mouth, despite how amazing it feels with you sucking my nipples right now.\"\n\nAnd in one quick motion, Amanda pulled her nipple from Kurt's wet, open mouth and moved down between his legs. She immediately began rubbing the head of his cock against her pursed lips and nose. She inhaled the scent of Kurt's cock in much the same way he had sniffed, and enjoyed, her foot when the evening got started. There was something about the smell of an aroused cock that really got Amanda going. \n\nShe met Kurt's eyes as he stared down at her expectedly, impatient for her to wrap her red lips around the purple head of his penis.\n\n\"Your cock smells so good, Kurt. I like the smell of your cock like you like the smell of my feet. God, I'm so fucking horny for you right now.\"\n\nShe paused.\n\n\"Tell me to suck your cock, Kurt.\"\n\nKurt's eyes never left hers.\n\n\"Suck my cock, Amanda.\"\n\n\"Mmm. Say it again. And say my name again.\"\n\n\"Suck my cock, Amanda. It's so ready for your mouth and tongue.\"\n\nAmanda reached down between her legs and begin rubbing her soaked pussy.\n\n\"I'm touching myself to the idea of sucking your cock, Kurt. Mmm...right now. I'm still so wet for you. Mmm...feels so good. Say it again.\"\n\n\"Please suck it. Amanda. My cock wants your mouth.\"\n\n\"Mmm yes...\"\n\nKurt's head fell back in frustration but the best kind imaginable.\n\nHe locked eyes with her again.\n\n\"Get your hand wet with yourself and stroke my cock with it before putting it in your mouth.\" He begged her. \"Do it, Amanda.\"\n\nAmanda did as he instructed. She took her right palm and smeared as much of her wetness to the surface of her hand as she could. Every pass over her clit as she did this drove her crazy; it was so sensitive right now. She doubted it had ever been this sensitive before, not even by herself, and certainly not with any of her previous clients. \n\nShe took her now dripping right hand and, making an \"O\" with her fingers and thumb, encircled Kurt's sensitive cock with her wetness and began stroking him quickly.\n\nKurt involuntarily kicked out one of his legs from the sudden shock of the pleasure. Amanda's strokes made wet, sloshing noises that turned her on even more.\n\n\"Oh God, Amanda, that feels so good.\"\n\nAs she stroked, Amanda stuck her tongue out, began licking the head of Kurt's cock. The taste of his precum returned to her mouth. Kurt looked down and watched her doing it\n\n\"That feels amazing...\"\n\nAmanda's left hand reached down to her pussy, stuck two fingers deep in the warmth of herself. She fingered herself as fast as she was now stroking Kurt's cock.\n\n\"I have two fingers deep in me, Kurt.\"\n\n\"Mmmm. How does it feel?\"\n\n\"Feels amazing. I want to make myself cum again with your cock in my mouth.\"\n\n\"Yes, baby. Do it. Do it, Amanda. Make your pussy cum again for me.\"\n\nJust as those words came out of Kurt's mouth, Amanda put the entire head of Kurt's cock in hers.\n\nThe sensation overwhelmed Kurt as he looked down and watched Amanda suck up and down on about three inches of his cock. Her two fingers still busy pumping in and out of her pussy, making wet piston noises.\n\n\"Fuck...\" He managed to stammer. \"Yes...suck it, baby. Ah, it feels so good in your fucking mouth.\"\n\nKurt felt her tongue dance along the bottom of his shaft just below the cleft of his mushroom. Felt the immense sucking sensation continue to build. Felt his cock was ready to cum, but was he? He wanted the night to go on for longer and longer...\n\nBefore he could really think about it, Amanda stopped sucking. Her eyes bore into his.\n\n\"I want you're cum in my mouth, Kurt. Down my throat. Cum for me now.\"\n\nShe continued to stroke his cock, using her spit, which covered the entirety of the shaft at this point.\n\n\"I want to make myself cum at the same time your cock cums in my mouth. You ready?\"\n\nHer fingers pumped inside herself. Her other hand stroked his cock. Her lips\u2014wet, red and waiting\u2014hovered just above the mushroom of his head. Kurt looked down at her and decided he was ready to cum. Everything was so perfect. Everything was so fucking hot right now. He found himself fully ready to blow every ounce of his cum, which, as this point, would no doubt shoot incredibly far, such was his complete state of arousal\u2014body and soul\u2014for this prostitute named Amanda.\n\nWho would have thought?\n\nHe guessed he would have, since it was he who saw her and felt irrationally drawn to her. Uncontrollably compelled to engage her in her chosen profession. Overpoweringly duty-bound to have her in every way he could imagine, and often did; to possess her carnally, to inhale, to taste, to absorb her every square-inch of sex.\n\nKurt closed his eyes just then and reimagined the scent of her foot when it was pressed in his mouth, rubbing against his nostrils, as Amanda made herself cum right in front of him. He could almost imagine feeling her orgasm through her foot.\n\nShe had wanted to cum with his mouth on her feet.\n\nHe was more than ready to return the favor to her.\n\n\"Suck it, Amanda. Suck it and I'll cum so hard in your mouth.\" He said between pleasured pants of breath. \"Finger yourself and cum with me. I'll tell you when I'm ready.\"\n\nAmanda smiled widely and took his cock back into her mouth. The result was near instant. Kurt felt his balls pull taunt. \n\nAmanda must have noticed because her right hand stopped stroking only to begin rubbing the pebbled flesh of his sack. Her mouth continued to work its magic on his erect cock, which stood up just fine for her to not need the use of her hands; her left still busy with her pussy.\n\nThe feel of her right hand on his ball-sack gave Kurt wave after wave of pleasure; his load building and building at the base.\n\nSuddenly, her sucking and rubbing stopped.\n\nShe said, \"Oh,\" as if having forgotten something.\n\nHe felt her pushing the backs of his thighs up, as if raising his legs in the air, similar to how he had her lay back on the bed earlier while watching her. He let her guide him, raised his legs with complete trust. Felt that his asshole was open to the wind, literally felt a breeze cross the sensitive hole, realizing it was her breath...\n\nThat was when he felt the wetness of her tongue flick across his asshole lightly.\n\nPleasure radiated from his asshole and up through the rest of his lower-body, ending at the head of his cock.\n\nAmanda's right hand reached up (her head below his legs, by his asshole and out of sight) as if on cue and continued stroking.\n\nHer tongue and breath danced in waves over his asshole, now wet from her spit. She licked some, all why pumping his dick.\n\n\"Do you like my tongue there, Kurt?\" She asked from below him.\n\n\"Yes, baby. Feels amazing. Ah...\"\n\nAmanda had pushed the tip of her tongue into his asshole a bit.\n\nHe felt her lips wrap around the entire surface of his asshole and suck.\n\n\"Ahh, shit! I'm going to cum if you keep that up!\"\n\nAnd he wasn't playing. Kurt felt the massively-delayed load in his cock seemingly move up to explosive levels.\n\nAmanda took her lips from his asshole and replaced them on his cock, began sucking hard. Her left hand still working her pussy.\n\nShe took her mouth away for a second.\n\n\"Do it, Kurt. Cum in my mouth. I want every drop.\"\n\nHis cock began its early convulsions, leading to orgasm.\n\nAmanda, her lips spread back around his cock, felt the convulsions as ripples that moved up from the base of his penis to the tip. \n\nShe felt her own orgasm building at the thought of his cum and how his cock felt just about to cum in her mouth. \n\nAmanda moaned with his dick between her lips, slurping, sucking harder than she had ever sucked a cock before. \n\nHer fingers pumped. Her mouth sucked. And Kurt came. Both of his hands tangled in her blonde hair, forcing her mouth down on him. He came.\n\n\"I'm cumming!\" He screamed, louder than he had wanted to but couldn't help himself.\n\nAmanda felt Kurt's cock go rigid for a second, and within that second, she felt a great push of his sweet cum push into the back of her throat. The moment she felt Kurt's cock pulsate one, twice, then go rigid again, pushing more cum out and into her mouth, Amanda had the most powerful orgasm of her young life (only twenty-five). \n\nHer pussy tightened like a vise around her two fingers (which stopped pumping in that moment, instead, reaching back to her G-Spot and rubbed) as she came along with him.\n\nShe pulled her mouth from Kurt's cock\u2014cum dripping down her chin\u2014and screamed out.\n\n\"I'm cumming...Oh, fuck...\"\n\nA few more ropes of Kurt's cum shot out of the now free head of his cock, hitting Amanda on her open mouth, on the bottom of her lip. She took every drop, licked her lips and swallowed it all. \n\nWhen her pussy had finally released its final spasm, Amanda fell back spent, this time on the floor of the motel.\n\nKurt leaned back in a similar way, only from a sitting position in the chair, now soaked in their shared sweat, spit and cum.\n\n\"That was so fucking good.\" Kurt panted from his chair.\n\n\"I've never had so much fun. You're amazing.\" Amanda finally admitted out loud. \"And we didn't even fuck.\"\n\nKurt pulled himself up into a sitting position.\n\n\"You up for another hour?\" he asked with a mischievous grin. \"We could give that a shot if you'd like?\"\n\nAmanda raised her head from the floor and met his grin with one of her own.\n\n\"Absolutely. And let's just forget about the whole hour thing\u2014for now, that I'm a pro even\u2014I want to fuck your brain outs\u2014let's just fuck each other's brains out right now for as long as it takes.\"\n\nShe sat up. Her tits wet from sweat. Her mouth reflecting spit and his cum in the dim light beaming from the bathroom. Both of her pink nipples still pebbled in arousal.\n\n\"How much time you need?\" she asked, referring to his refractory period.\n\nKurt looked at his still rock-hard cock.\n\n\"Not long at all.\"\n\nAnd his mischievous grin grew even wider.\n\n\"I'll be ready very soon. Let's get you ready while we wait. Get on the bed.\" \n\nKurt stood up from the chair, reached a hand down to Amada, helping her from the floor while guiding her to one of the made beds.\n\n\"Lay down on your back and we'll get started.\"\n\nThe END (for now...)"
    ],
    "authorname": "AJamesDarkly",
    "tags": [
        "first time",
        "foot fetish",
        "mutual masturbation",
        "male masturbation",
        "masturbation",
        "female masturbation",
        "prostitution",
        "blow job",
        "hand job",
        "rimming"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/my-first-prostitute-ch-01"
}
{
    "title": "My Little Ventrue Pt. 07 Ch. 21",
    "pages": [
        "~~Jack~~\n\n\"Oh my god,\" Jack said.\n\n\"Oh... dear Lord,\" Damien said.\n\n\"Now arriving, Mister Jack Terry, of the Invictus, and champion this evening. With him, Mister Damien Burksen, of the... Lancea et Sanctum, and champion's guard,\" the ghoul in the tuxedo beside them called out. The crowd turned to them, clapped for a few moments, nodded their hands, and resumed socializing.\n\nSomewhere along the line, Antoinette's invite to the ball, which had included a 'some skin but not too much' message, had gotten mixed up. Or people read something from it that Jack didn't really think was there, because he'd honestly thought everyone was going to dial down the sexiness factor for this ball. It was his mom's first ball after all, and everyone knew that. And hell, there were some other new faces in the crowd too, freshly embraced Kindred from before the hunters had made their presence known. They'd yet to see a ball either, and he didn't think they'd want their first experience to be... this!\n\nThere was even more skin than last time.\n\nJack looked down at his handsome, gray suit, fancy and expensive as all hell, but far less sexual. Antoinette probably knew what he'd decide to wear would be woefully overdressing, and would delight in stripping him once she arrived. For the sake of saving time, he sighed, unbuttoned the jacket, and undid a few buttons of the shirt.\n\n\"Blending in?\" Damien said.\n\n\"I guess. We stick out enough as is.\"\n\n\"You're right, I guess.\" With a quiet groan, Damien also undid his jacket, and a few buttons. His suit was black, and decidedly sleeker, with thinner legs and sleeves meant to highlight his lean physique. A perfect suit for a Mekhet.\n\nThe two of the walked down the front stairs of the Black Hall, and onto the main floor where everyone was chatting. The grand stairs in the back led up to a balcony that circled the main floor from above, but no one was up there, not yet at least. There was a band up there though, or what looked like a small orchestra? A bunch of cellos and basses and whatnot, playing some relaxing classical music Jack didn't recognize. The music would have fit proper ballroom dresses and tuxedos better, but something about everyone being Kindred added a certain atmosphere that demanded the 'upper-class' music. Quite the stereotype, that vampires loved pretending to be nobility. It was true.\n\nJessy wore what amounted to a bunch of horizontal leather straps, tied tight together around her body, with a lot of gaps between them. Each strap left a gap in the front, and a strap zigzagged through the ends where they stopped in the front, exposing enough of her body that nothing was left to the imagination. She had a fit figure, muscular without losing the hourglass physique, with surprisingly large breasts for someone so lean. She knew it too, and loved to show off; her breasts only had one strap across them, and it barely reached far enough across her bosom to cover the nipples. Their undersides were completely exposed.\n\nEric was on her arm, and the man was wearing black suit pants, and a black shirt that was slightly see-through. The first three buttons were undone, showing some of his chest, a silver necklace Jack was sure Jessy got for him, and he had a fancy silver watch on. Both of them looked like they should have been in a club, but he could see the clothes weren't cheap; not that club clothes were cheap, but ballroom clothes were a step above, price-wise. Fine silks, embroidery on the hems, luxurious jewelry, they looked like they were wearing a million bucks, a particularly horny million bucks.\n\n\"Really?\" Jack said, frowning at her.\n\n\"What?\" She shrugged at him, turned a bit to aim her hip at him, and pointed at it. \"I'm wearing a thong, see? Could have gone without.\"\n\n\"I... don't think that dress is meant to be worn without underwear,\" Damien said, eyebrow raised. It was true. Much as a lot of the dresses Jack expected to see tonight were probably worn without underwear, Jessy's naked front would have meant her sex would have been completely exposed. Considering how small the thong was, it almost was.\n\n\"That's what I did, last time I wore it. Though, I wore a pussy pastie with it then, so I guess--\"\n\nEric elbowed her in the side. She elbowed him back. Jack choked on a laugh. God, those two.\n\nSighing, Jack looked around, and scoped for familiar faces. There was Maria again, wearing a proper, normal, ridiculously expensive, old fashioned white dress. No chance the disfigured Nos would show off her physique, not when she looked like a cracked, broken, wet corpse. Few Nosferatu came to the ball for that very reason. Michael, on the other hand, wore a white suit with shirt completely open, showing off huge muscles that almost bulged out of his chest and stomach. He may as well have had a tattoo saying 'Kingpin' written across his pectorals. He wasn't wearing sunglasses, but it would have fit if he did.\n\nThe witches hadn't arrived yet, but he knew it'd be a sight when they did, considering Jennifer and Othello were bound to show off. A bunch of the werewolves had already arrived though, and Jack smiled as he noticed they were wearing fancier clothes than he'd ever seen them in. Well, the Invictus were doing their best to seduce the Uratha into their employ. Money for expensive suits and dresses wasn't exactly the best way to spend a fortune, but then again, this way the werewolves were getting more involved with the city and its vampires. Even Avery was there, wearing a tight one-piece white dress that reached halfway down her thigh, long sleeves with shoulders, and the classic boob window. Very mature, and it fit her mature visage well.\n\nJack did a double take when his eyes landed on Natasha. Holy shit. It was already hard to look at her without thinking sexual thoughts, with everything he'd learned and seen. But now, she was wearing a dress with a tiny black halter top connected to a tiny skirt. If she'd been wearing a small towel, it'd have covered more. Yep, those were the sides of her small breasts, and the entirety of her back, and her ridiculously small waist and stomach, and thin, lean legs.\n\nShe was talking with Caleb and Noah, while her boyfriends were talking with Avery. Probably trying to, again, explain themselves and their foolhardy trip into the Hisil with Eric that Tash told him about. Jack wasn't in a position to judge, but Avery was, and Jack smiled as he watched the tiny woman glare and frown up at the two huge men. Neither of them were wearing suit jackets, but they had the pants, and their partly open shirts had some colors streaking across them in slick patterns, a cross between classy suit shirt, and something you'd find at a night club. Undoubtedly picked out by Antoinette, or Jessy.\n\n\"She looks so fuckable, doesn't she?\" Jessy said, following his gaze. \"God damn, just imagine that tiny thing on your dick. Bet you can barely fit a finger in there.\"\n\nEric grabbed his girlfriend by both shoulders and pulled her away from Jack. \"Jessy, I swear.\"\n\n\"Sorry! Sorry. I'm just so excited!\" She bounced in place, one arm hooked behind Eric's back. \"It feels so fucking good to get back to this shit, you know? Even the fucking Carthians are here, and not being assholes for once.\"\n\nRight, the Carthians. Jack looked around and spotted a bunch of them. Joe, Mike, Tilly with her wolf boyfriend Mason, Marcus, Kathy, Jody, Debby, those he recognized, but there were many more he didn't know by name. And of course, the man himself, Garry. They'd definitely dressed up for the occasion, though a trained eye could see the difference between an expensive, tailored suit, and an expensive, stolen one. Still, they looked good, and it was obvious they were making an attempt to play nice. Considering how much trouble they'd been causing the Invictus lately, border skirmishes, and Terra Den getting in Xnomina's way, their playing nice here felt insincere. The Danse Macabre was a persistent pain in the ass.\n\n\"Where's Fiona?\" Eric said.\n\n\"She...\" Damien scratched the back of his neck as he looked to the werewolf. \"I don't know if she's coming. She wanted to, but after Mark was caught spying on the Prince, Azamel might not want her here.\"\n\n\"Then again,\" Jack said, \"Fiona is Fiona. She might just sneak out.\" The girl did have that 'sneak out for the party' sort of vibe to her. \"Mom here yet?\"\n\nJessy shook her head. \"Nope. Natasha says she's going to show up with Antoinette. And you know the host has to be fashionably late.\" Her following eye roll made Jack laugh. Yeah, Jack didn't really get things like that either, the social back and forth of impression, something outside the Danse Macabre that kine engaged in as well. If he got an invitation for a late night party, and it said it started at eight, he'd show up at eight. He knew he'd be the only one to do that, but being clear with the instructions on invitations was important, damn it.\n\n\"Jack.\"\n\nJack winced, looking away from the source of sound so hopefully she wouldn't see it. But when he turned around and looked Clara in the eyes, he knew she had. Meeting her gaze got a similar reaction from her, a borderline wince, but she forced herself to keep looking at him, only a single moment spared to admire his suit.\n\nHe spared more than a single moment admiring her and her dress, though. The Uratha and Carthians loved to wear clothes that were closer to casual, and hints of that still came through in their evening wear. Clara, on the other hand, was wearing something far closer to what an Invictus would wear: a fancy dress that screamed money, and sex. It took every ounce of effort he could muster to not let his jaw drop, but he knew it had anyway, if only a little.\n\nThe dress was black, like most of the dresses tonight. Strapless, the one-piece sat very, very, very low on her chest, no shoulders or sleeves, and wrapped super tight to her body. Any lower and the nipples of her handful breasts would have peeked out. The bottom of the dress was only just low enough to cover her sex, and it hugged her fit physique tight enough that he could see every curve and indentation of her muscular ass. Her box-braids were tied together in something like a ponytail, and she had it pulled over her shoulder.\n\nIt would have been a simple, tight, black dress wrapped around her like a towel, except for all the cuts along it that exposed so much more of her skin. Her dress had cuts arranged in V shapes along her front, very specific and precise cuts that had to have been made for her, a strange combination of erotic and sleek professional. Most of her breasts were left completely exposed saved for her nipples, and her flat stomach was on display as well, showing off her subtle abs.\n\nAnd she was wearing jewelry. Large diamond earrings? Whatever they were, they weren't subtle. And a necklace! He never, in a million years, figured someone like Clara would wear a necklace like this, large, glittering, and what looked like more diamonds. For the life of him, he couldn't help but stare at it, and how the large thing sat between her breasts against her amazing tan skin. He'd seen those breasts bare before, and damn it, his mind forced him to picture them adorned with the jewelery.\n\nHe didn't say anything. She didn't say anything. They looked at each other for a while, and only when Damien, Jessy, and Eric left, did Jack realize they were just staring at each other. Jack spared a glance for Damien, only for the man to give him a small grin as he disappeared into the crowd. Traitor.\n\nHe tried to speak first. \"Did... did you, uh...\"\n\nClara chuckled, but it was quiet, and awkward. \"No, I didn't buy the dress, or steal it. Marcus set me up.\" Marcus, a Ventrue of the Carthians. 'Set me up' meant he'd used Dominate to insure she was well dressed. Carthians could make money if they had to, but their covenant wasn't set up to take advantage of it. \"I thought he was crazy, but he insisted people were going to be... uh, under dressed, I guess?\"\n\n\"You mean half naked.\" He did his best to not stare at her breasts again as he said it. But, damn, just saying the word naked demanded he look down at her body for a second time.\n\nWhich was her plan, of course. He looked down, and she smiled. He forced his eyes back up to her, and she smiled again, this time with a grin smirk. Yeah, she knew she looked amazing, and she was enjoying making him squirm.\n\nWhy did women love making him squirm?\n\n\"Ha, yeah. And I guess I am pretty much half naked.\"\n\n\"Seems to be the theme for the party,\" he said, gesturing to his own shirt and the buttons he'd undone. His chest was exposed, and while he was a small guy, there was a fair amount of chiseled definition there.\n\n\"I wanted to talk to you,\" she said.\n\n\"Did you? I got the impression you'd want to avoid me.\"\n\n\"What? Why--\"\n\nNow wasn't the time for this topic, but he was just stupid enough to bring it up anyway. \"I saw the look on your face, Clara, after the incident. And I remember everything that happened during it, too.\"\n\nShe looked down, then around, before motioning for him to walk with her. He did, stepping out of the center of the ballroom floor, and heading over toward the wall close to the grand stairs that led up to the second floor.\n\n\"The look on my face?\" she said, once they had a few feet between them and everyone else, with the music band closer to block out their voices.\n\n\"The look I saw on everyone's face, really. The curse scared everyone, and disgusted them, including you.\"\n\n\"Yes... yes it did.\" Sighing, she leaned back against the white marble, a dragon carved into its surface, and she let her shoulders sag. \"I guess I wanted to see if you were ok.\"\n\nAnd that's why you dressed to kill? To ask me if I was alright?\n\n\"I'm f--\"\n\n\"You're not fine, Jack. You saw the look on my face, but I saw the look on yours.\" She leaned in closer to him, half squinting, half dripping with sympathy. \"It's lurking around in there, isn't it? Inside you.\"\n\nHe froze for a moment. Shit, he shouldn't have, but that was enough for her to nod and lean back a bit. He'd confirmed her suspicion without saying a word.\n\n\"I can manage it, Clara.\"\n\n\"Can you? That thing was twisted and cruel, Jack.\"\n\n\"It just wanted to kill the hunters.\"\n\n\"Did it? It gave the impression it would have happily, and literally skull fucked one of them if given the chance.\"\n\nThe grotesque image of him doing something like that to someone's head made his throat clench up, and he shook his head as he looked to the crowd. \"Yeah, it's twisted. But it wants what I want... wanted, to defeat the hunters.\"\n\nShe turned as well, looking to the crowd mingling as she stepped in a little closer, until her shoulder touched his. \"For now.\"\n\n\"For now,\" he said. \"And when it doesn't, I'll shut it down.\"\n\n\"Jack, this thing is strong enough to singlehandedly mow down a dozen hunters, and fight a monster that kicked my ass, twice. You're barely over two-years embraced. Do you actually think you could shut this thing down if it really wanted to get out?\"\n\nShe makes a good point, Jack.\n\nShut up. You're just a tag along. I'm the real Jack, and you're a shadow. If you could take me over permanently, you would have.\n\nPerhaps. Or perhaps I don't want Miss Tits and that witch Jacob getting in my way.\n\nGetting in the way of what? There a secret you're not sharing with me?\n\nHa, nothing so stupid. I'm you, Jack. I'm what a Kindred can be when they give into their Beastly nature. This city will be mine eventually, and we're going to make some changes! None of this pacifist bullshit your boobs-with-legs girlfriend is so attached to.\n\nYou said you wouldn't ruin things.\n\nI won't. I'll make them better! I'll show you a better way to live, Jack. Jacob's figured it out, but he isn't pushing hard enough for it. The only way to live is on the backs of kine, on their corpses. Seriously, when's the last time you Kissed a kine until they were dead? Remember how fucking good it felt, to drain the life out of them until they died in your embrace?\n\nI didn't enjoy that, you sick fuck. I--\n\n\"I can see it right now,\" Clara said. Jack snapped his head up to her, and she pulled back an inch, meeting his gaze. There it was again, that expression on her face, fear. \"You're fighting with it right now.\"\n\n\"I'll be fine.\"\n\n\"You're not fine, Jack. Christ, does Damien know about this, or the Prince? Do they know this thing's inside you, fighting to get out?\"\n\nHe clenched his fists at his side, and kept his glare on the crowd. People walking past were soon avoiding him, and anyone who did glance at him was quick to look away. God damn it.\n\n\"No, they don't know.\" They probably suspected, but until he straight up told them the curse was actively talking in his head, he doubted they'd come to that conclusion. Clara had managed to though, so maybe they would, too.\n\n\"You don't think you're being overconfident, Jack? Thinking that you can handle this problem on your own?\"\n\nHe looked down as her words brought up a nagging feeling from his gut. Ventrue hubris, sneaking his way into his life again, and again, and again.\n\n\"I... I'll tell them. Damien's already looking for a way to shut this curse down, like someone else in the Second Estate did for Susanna, centuries ago. And Antoinette, I'll... I'll...\"\n\nClara frowned at him, and gave his shoulder a nudge. \"You really hate the idea of appearing weak in front of her, don't you?\"\n\n\"It's not that. I appear weak in front of her all the time.\"\n\n\"Do you? Because I get the impression you probably just lower your manly-man wall, be emotional with her, and think of that as being weak.\"\n\nHe ground his teeth together. \"That's... not what I meant.\"\n\n\"Uh huh, sure it isn't. What I meant, Jack, is are you willing to look her in the eye, and say 'I can't handle this and I need help'?\"\n\n\"She knows about the curse, and--\"\n\n\"Dodging the question.\"\n\nHe frowned at her, but it didn't last. He knew what she was getting at, that he had a hard time lowering his guard about some things. His life as a Kindred had been unusually brutal, and he'd shared that with Antoinette readily. Now, he had something he thought he could handle, and he wasn't sharing it with his love. Antoinette was smart enough to guess he was holding something back, and she was trusting him to bring it up when he felt comfortable speaking about it. Clara, on the other hand, was content to approach him directly, and call him out.\n\nMaybe he could use a little bit of that directness?\n\n\"I'll hold on,\" he said. \"I'll keep it under control, until Damien and I can figure out a way to deal with it. I'll tell her about it, too, but I'll deal with it.\"\n\n\"Whatever you say.\" She folded her arms across her chest, and nodded out toward the crowd. \"Well, you did save the day. Now everyone gets to party and fuck, all thanks to you.\"\n\nHe winced again, this time a lot more obviously. \"No no, no fucking. I don't see any naked kine being Kissed and fucked.\"\n\n\"Yet. You don't see kine being Kissed and fucked, yet. I remember the last party.\"\n\n\"My mom's coming to this party!\"\n\n\"Well, she's going to get an eyeful, I'm sure.\"\n\nHe shuddered at the idea. Yeah, it was dumb that he'd embraced the sexuality of Kindred life, but couldn't imagine his mom doing it. And not fair of him. He wanted his mom to move on, and he wasn't helping.\n\n\"So... how is your sister?\"\n\nJack stepped over to the white marble wall by the stairs again, and leaned against it. Clara joined him a moment later.\n\n\"Better, now that I've told her about Angela. But she's still a ghost. She's so unstable, talking to her is dangerous.\"\n\n\"Must be rough. I can't imagine how I'd have handled it if I ever ran into my brother.\"\n\n\"You were close?\"\n\n\"Pretty damn close, yeah.\" The life left her eyes as she looked down, but it came back to her as she recovered. Not only recovered, but scooped up a glass of wine from a passing waiter heading toward her pack, and downed it. She downed a second, gave the waiter the two empty glasses, and took a third.",
        "\"You're going to get sick,\" he said.\n\n\"I'll be fine. Just... you kinda stirred up some bad memories. My fault, I know, bringing up your sister. But unlike you, I can use some nice alcohol to--\"\n\n\"Now arriving, the Circle of the Crone, and elder Jacob. With him, Beatrice Damor, Jennifer Denver, Aaron Jones, and Othello Manu, champion's guards during the assault on the hunters.\"\n\nThe crowd looked to watch the witches enter the ball. Or, two witches, three warlocks? He still wasn't clear on that.\n\nJacob was wearing a gray suit, something with the modern flair Invictus fashion demanded, but at the same time, it had enough old school flair that it reminded Jack of something worn by maybe a Roman soldier? Or even older, like, Greek? The suit jacket had something like a toga flap to it, and a sash. It would have looked ridiculous, if not for how seamlessly it was blended together.\n\nDid the elder have a tailor? The idea of the eyeless bastard with his own tailor made Jack laugh.\n\nOthello and Aaron wore tuxedos, though Jennifer obviously had a hand in picking them, because they left a fair amount of the chest exposed, no tie or bow tie, with jacket unbuttoned and under shirt unbuttoned to the pants. Clothes you could only get away with if you had the body for it.\n\nJennifer and Beatrice wore similar dresses, both in black. They were long enough to go past the knee, but each skirt was barely anything more than strips of black fabric, circling and connecting like rope. The ropes connected in the back, and crisscrossed in the front along the sternum, with thin slices of fabric just enough to cup the inner edges of their breasts and hide their nipples, barely, before tying around the neck, with a black choker. The only difference between the two women were the patterns in the dresses, the way the rope-like construction left slits of flesh exposed. Beatrice went for gaps that looked a lot more visceral and fleshy, harsh, uneven diagonal slashes. The message was clear: sexy witch. Jennifer's dress, which must have been made from the same starting point, had her straps all arranged in even patterns that crisscrossed along her whole body. The message was very clear: two sexy witches, different but similar. Considering they had similar hair and height, it was definitely an image. Anyone with a twins fantasy would be looking their way a lot tonight.\n\nZigzag, crisscross, Jack noticed that pattern in a lot of women's dresses. He didn't know shit about fashion, but it did seem to be a recurring theme. The kine were dressed more formally, with tuxedos and classy suits, or beautiful -- if dark -- gowns. They looked good, and tasty. The Kindred on the other hand, were dressed to kill. Apparently, only Damien and Jack hadn't managed to put that together, but it was easy enough to undo a few buttons. Not so easy for a woman to put a dozen strategic gaps in her dress to show skin without actually going naked.\n\nThen again, as Jack looked around, he noticed a few of the Kindred took his cue, and undid some buttons. Not their own buttons, they'd already been undone. They were undoing some of the buttons of the kine they'd brought with them, exposing the chests of their male kine they'd undoubtedly spent months grooming into fit, lean, strong sources of food.\n\nYeap. There was going to be a Kissing buffet tonight. Damn it.\n\n\"Oh. And arriving with the Circle, is... S\u00e1ndor Pavel, Begotten,\" the announcer said.\n\nThat surprised Jack. It shouldn't have, considering how obvious it was Jen was manipulating S\u00e1ndor into being her friend. But for her to bring the man, literally on her arm, was a pretty huge a statement to the other covenants. She had dibs. Of course, in the Danse Macabre, dibs meant shit all, and everyone was undoubtedly going to try and manipulate the man into their good graces. She was smart to get there first.\n\nAs the witches walked down the white stairs and onto the main floor, people gave them plenty of space. Much as everyone was giving Jack room out of fear of his rumored curse, they knew Jack, knew Julias, and knew the Prince. He'd become an anomaly for them, someone they used to be able to predict and trust, but not anymore, not quite. The witches, on the other hand, were entirely the latter. No one trusted them, especially Jacob. Now they had a Begotten with them, a nightmare monster, and one everyone knew was a deadly beast who'd been a slave to the hunters. To say that people gave them their space as they stepped onto the ballroom floor was an understatement.\n\nBut, much as they were giving them their room, they were all looking, and more than a few people were looking with hungry eyes. Yeah, the witches cleaned up good. And S\u00e1ndor, now that Jack got to see him in a proper, fitted suit, was definitely a handsome man. A bit tall, with a lean, muscular figure, and enough width to his shoulders to give him an imposing mass; highlighted by the suit, of course. Jennifer knew what she was doing. A lot of the women in the crowd, who'd backed up to give the newcomers room, set their eyes on him, taking in the sight and presence of the monster, and how good he looked.\n\nPeople probably knew by now that Damien occasionally fed on Fiona, and that it was a powerful experience. S\u00e1ndor was a taunting fruit dangling from a forbidden tree, for the Kindred eying him hungrily. And, kine or Kindred, women wanted what they couldn't have, as if forbidden was tantalizing icing on a cake, and not a deadly decree.\n\nTime to get to work. It kinda was his job to have everyone getting along. That job wasn't meant to focus on the covenants, but with S\u00e1ndor in their group, it was a good idea he get involved anyway. He walked up to them, and Clara followed.\n\n\"S\u00e1ndor,\" he said. \"I'm glad you came.\"\n\n\"Are you?\" he said coldly. It would have been offensive if he'd been looking at Jack, but he was looking around, doing his best to absorb the sight of almost two hundred Kindred and nearly a hundred kine all looking at him. He was distracted, and uncomfortable.\n\n\"Yeah, I am. There's a lot of people here who need to know Begotten aren't terrifying nightmare monsters... er, well, you know what I mean.\" As Jack talked, Othello and Aaron walked off. Aaron found a Mekhet Jack knew, and began a conversation. Maybe about a book, given what Jack knew of the man. Othello, on the other hand, walked over to Isabella, of all people, and started talking. The beauty was wearing a corset and a gown, surprisingly making her one of the more clothed vampires in the Black Hall, though the corset had pushed her breasts together and up to the point they looked like balloons ready to pop.\n\nIsabella was a lesbian, as far as Jack knew. Othello really wasn't the smartest man. Except, maybe he was? He wasn't alone. He'd brought a woman with him, not a vampire, a ghoul maybe, a black woman with very short curly hair. And she was wrapped in a black sheet, a fancy sheet that someone probably lied about and sold as a dress. One tug and the dress would come right off her, probably as planned. Whoever the ghoul was, Isabella and Hella both looked at her with the same eyes Jack saw on a lot of the women looking at S\u00e1ndor.\n\n\"Jack, my dear,\" Jennifer said, coming straight up to him. Her eyes slid away, fell on Clara, and looked her up and down a couple times. \"Oh my, Clara. Dare I say, damn.\"\n\nJack rolled his eyes, but he did look to Clara to see how she responded to the compliment. The werewolf grinned, a small and sly thing. Probably trying to figure out if Jennifer was manipulating her, or being sincere. Jack could see the sincerity in his fellow Ventrue's eyes, but to Clara, it probably seemed a little too forward. But that was Jennifer being Jennifer, Ventrue being Ventrue.\n\n\"Thank you. I figured, after the last ball, I'd be better off dressing... uh, less?\"\n\nJennifer nodded, smile growing bright. \"Exactly! I had to convince S\u00e1ndor here, and the tailor, that the party would require some skin.\"\n\nThe begotten frowned slightly. \"The invitation--\"\n\nJennifer cut him off with a small wave. \"You're new to Dolareido, and don't know the subtext of things, or people's proclivities. You'll learn.\"\n\n\"You're looking great too,\" Clara said. \"Tits not hanging out this time.\"\n\n\"Yes, well, I don't plan to get frisky with the kine tonight.\" And with that, she leaned in close to Triss, and nudged her cheek against her friend's for a moment. Cheek against crocodile teeth.\n\nJack expected Triss to pull away in friendly annoyance. She didn't. She didn't exactly reciprocate with her own cheek rub, but that was just Triss being Triss. There was a twinkle in her eye, a touch of happiness Jack hadn't expected to see. Angela's death had fucked with Triss, Jack knew that much. Half of him had expected her to suffer another session of depression, like she'd suffered after Julias died, but based on what Jack was seeing, Jen hadn't let her.\n\nOn the surface, Jen seemed like nothing more than a typical Ventrue manipulator, content to use her intelligence and beauty to control conversations and get her way. But, if that'd been all there was to her, Julias and Triss wouldn't have let her get so close. Even knowing that, he still hadn't expect her to be able to help Triss. Dumb of him to think like that.\n\nHe looked past the two girls for a moment, to Jacob. The man had walked past them with only a second's glance for Jack, complete with a knowing grin, before joining Garry. While everyone made sure to give the old bastard his room, the Carthians didn't seem as scared of him. Still scared, sure, but not as scared, since their boss was talking to the man regularly.\n\n\"How you doing, Triss?\" Jack said.\n\n\"Better than expected, honestly. Was kinda tempted to stay home, but I thought Athalia might show up.\" Her shoulders slumped, and she looked down for a few seconds, before recovering. \"And because I'm an idiot, I thought I should be here if she does.\"\n\n\"Right, Athalia.\" Jack shuddered and looked around some more. \"Hard for me to sense Begotten when they're hiding. I couldn't sense Mark, and I bet I won't be able to sense Athalia either.\"\n\n\"You think? Mark seemed to specialize in being a sneaky fuck. Athalia, I don't know.\"\n\n\"Good point, but I'm still not going to let my guard down.\"\n\n\"Guard? Your mom invited her, Jack.\"\n\n\"My mom isn't the smartest woman,\" he said. Everyone looked at him like he'd just insulted a kitten, and he rolled his eyes. \"What? I love my mom, but I'm not delusional.\"\n\n\"How's your sister?\" Triss said.\n\n\"She's... It's complicated, I guess. She wants to leave, but something's happening that's making her stay. Or at least, not want to leave yet.\" He almost didn't say it. There was a good chance whatever Mary sensed had something to do with the unknown force sneaking around in Dolareido's shadow, and he didn't want everyone knowing about that. But after everything present company had gone through, he felt he could trust them, at least more than a week ago.\n\n\"Doesn't want to leave?\" Triss raised a brow, before looking past Jack to Jacob. \"I'll ask the boss about it. We haven't had a chance to talk to him at all since the incident, but I... I think we all know he's up to something.\"\n\nThey all chuckled, nervous, small chuckles. Except for S\u00e1ndor, of course.\n\n\"So,\" Jack said to the gargoyle, \"I guess I should probably show you who's who?\"\n\n\"I'll educate him.\" With a grin and a small wink, Jen took S\u00e1ndor's arm, hooked elbows, and started guiding the man through the crowd.\n\nPeople didn't avoid them as much anymore, finally picking up on the atmosphere that the witches and Begotten weren't a threat. Well, they were, but not a threat at the moment. Everyone was here to relax, and as the music played and people mingled, the crowd stopped staring at Jack and his friends like they were going to snap and kill them all. That was Antoinette's intention, to get everyone to settle and be calm around each other, something Kindred didn't exactly do naturally without some coaxing.\n\n\"You really do look great,\" Triss said, smiling at Clara. \"Thinking of partaking?\"\n\n\"Partaking? Oh, right, the inevitable buffet. You know I'm not a vampire, right?\"\n\nTriss shrugged. \"Doesn't mean you can't get involved. Hell, you're a werewolf. Put your neck out there and you could have vamps lined up to have a taste of you.\"\n\n\"I... I really should just say no to that, but Matt and Art, and Mason have gone on and on about how good the Kiss is.\"\n\n\"Any girls in your pack get Kissed yet? One of them you can ask?\"\n\n\"No.\"\n\nTriss grinned. \"From the occasional girl kine Jen and I had in bed... from before, I can attest that the effect is pretty damn strong, sexually speaking. Maybe give it a shot?\"\n\nRolling her eyes, Clara couldn't help but laugh. \"I'm gonna go hang with the pack. Jack, think about what I said, ok?\"\n\n\"I will. I am.\"\n\nHer following sigh said a thousand words. She didn't believe him. Well, she was wrong.\n\nShe walked away, and Jack and Triss stared after her. No need to glance at Triss to see where she was looking, both were staring at her ass and how the black dress hugged it so tight, nothing was left to the imagination.\n\nOnce she was a ways away, in the crowd and mingling with her fellow werewolves, Triss leaned in to whisper in his ear.\n\n\"Dude, you can't make room for her in your bed?\"\n\n\"I'm pretty sure she wants more than just a fling with me and Antoinette, Triss. She wants a relationship.\"\n\n\"And you're still dead set on that being a no? I think you two have a lot more in common than you and the Prince.\"\n\n\"I love Antoinette. Like, a lot, you know? And Antoinette would never share me in a romantic sense.\"\n\n\"I guess I'm just suggesting it, because it... it's really helped me, you know? Julias died, and I thought everything was over. And that damn slut over there,\" she pointed at Jennifer, who was showing off S\u00e1ndor to some Carthians, \"has helped me more than I can ever repay her.\"\n\n\"I guess I just don't see it happening. Antoinette's very possessive of me, and I kinda like that.\"\n\n\"She shares you with her ghouls.\"\n\n\"Eh, it's not the same. She'll share me in a purely sexual context, you know? She's so ancient, sex and romance are two completely separate things for her. But, I know she'll never do that with a woman who's interested in me.\" Never, never ever ever, would he get used to the idea that two women were into him. For all his Ventrue hubris, that seemed to apply only to his willpower and strength. The idea that maybe his looks and personality intrigued multiple women? Madness.\n\n\"Sucks to be her, then.\"\n\n\"I hear she's been getting it on with Jessy's ghouls.\"\n\n\"Yeah, but like you said, she's looking for romance.\"\n\nSighing, he nodded. Guilt sucked, and the more he thought about Clara being romantically into him, and him having to say no, the more guilty he felt. It really was a shitty feeling. Infinitely less painful than how guilty he'd felt over Mary and Julias's death, but now that the hunters were dead, those aches were starting to fade. More subtle aches, like this strange feeling he had with Clara, were reappearing and growing.\n\n\"So, Jen and S\u00e1ndor?\" he said.\n\n\"Ha, well, he is really sexy. And he pulls off that whole dark and brooding thing super well.\"\n\n\"But?\"\n\nThe Nosferatu sighed, set an elbow on his shoulder, and leaned against him a bit. \"Jen sees some similarities between him and me, after what the hunters did to the both of us. She's planning to use him to help me get over Julias.\"\n\n\"She's too smart.\"\n\n\"Ch'yeah. Not so smart I can't tell what she's up to, though.\"\n\n\"Is her plan working? She making progress with you?\"\n\n\"Eh, well... I mean, not sure about her plan, but yeah I guess she's making progress.\" Sighing, she lowered her elbow from his shoulder, and stepped in close enough to nudge half her body into his, a sort of armless hug. \"It hasn't been very long since your sire died, you know? Not... not long enough, anyway. Jen's doing everything she can to help me move on, and she's convinced sex is the way to do that.\"\n\nJack laughed. Yeah, that fit what he knew of Jen.\n\n\"I'm gonna talk to Garry,\" he said. Jacob had just moved on from a conversation with the man, leaving him open. \"I figure now's a good time. Less chance he'll start a fight.\"\n\n\"Need back up? He is my old boss.\"\n\n\"Nah, I'll be fine. Go have fun. Or, you know, keep Jen out of trouble?\" Laughing, he looked toward the girl and the man she was dragging around on her arm. \"She's going to get him into trouble.\"\n\n\"Yeap, she definitely will.\" Triss nodded, and walked after her twin.\n\nJack smiled after her. It felt great, seeing how much better she was doing. Yeah, Julias's death really wasn't that long ago, not even a couple months yet, but she was recovering. He was, too. Beating the hunters was like removing a ball and chain from around their ankles, like Mary said.\n\nGod, what was Mary talking about? Lines that tore? Things in the darkness? Much as he wanted his sister's ghost to pass on, before the situation killed his mom, or him, he was damn glad she hadn't. He needed more information from her. Maybe he could find a way to bring her with him, out of the house?\n\nHe walked over to Garry, and immediately, the nearby Carthians backed off, keeping their eyes on him but otherwise giving him his space. Annoying that everywhere he went, he became the center of attention, but it was kind of nice having that leverage. This was how Viktor must have felt when walking around in his parties and balls, the feel of power and thrill of authority. An addicting feeling.\n\n\"Jack,\" the Gangrel said.\n\nHe nodded to the man. \"Garry.\" How to play this, how to play this. \"Gonna stop shitting down Xnomina's throat any time soon?\" Smooth.\n\nSmooth enough to make Garry laugh. \"It's not personal, Jack. Xnomina's been a pain in the Carthians' asses for decades.\"\n\n\"Yeah, I get that. Is it the money?\" Garry liked cutting through bullshit, and Jack could do that. Garry also liked it when people came at him with a little aggression, and Jack could do that too. Not in the past, but now? Easy, with or without the curse.\n\n\"Money's a part of it. Just because I got Terra Den working for me doesn't mean I'm swimming in money.\"\n\n\"You could be, if you--\"\n\n\"Ha, what, conspired to take over a bank? All the banks in Dolareido work for the Invictus, in some way or another.\"\n\n\"True. I guess we got a rubber band around your balls.\"\n\n\"You did. I'll punch a hole in your bullshit with Terra Den.\"\n\nJack nodded, and as a waiter walked by, Jack scooped a wine glass from the tray, filled with red. A sip confirmed it was blood, and Jack smiled down at the drink as he leaned his back against the white marble wall.\n\n\"I don't mind.\"\n\n\"Say what?\" Garry said, eyebrow raised.\n\n\"This economic stuff? Fighting over territory and money? After everything that's happened, some scuffles in the streets, the occasional brawl, a broken arm here or there, and maybe some blackmail, sounds like a vacation.\"\n\nLaughing, the Gangrel leaned back against the wall with him. \"Your boss disagrees.\"\n\n\"Michael? Well, he's old, and smarter than me. He probably thinks all this shit between you and him will turn sour, and Kindred will start dying.\" Jack offered Garry a single, harsh glare, but only kept it up for a second before he took another sip of the blood. \"I'd prefer it if Kindred didn't start dying, Garry.\"\n\n\"You and me both.\"\n\n\"Then why are you pushing so hard?\"\n\n\"Because your boss has been pushing on us for long enough. Before you were even born, let alone embraced, that asshole's been in our grill, fucking shit up, ruining lives and causing problems.\"\n\n\"Thought you said it wasn't personal.\"\n\nThe Gangrel snorted, shrugged, and nodded in Michael's direction. On the other side of the ballroom stood Michael and Maria, now talking with Damien and Jessy. A business conversation, based on the expressions on their faces.",
        "\"It's not personal... mostly. Doesn't mean I won't take any chance I get to break Michael's nose in.\"\n\nSighing, Jack shrugged slightly, took another sip, and gestured to his boss with the glass. \"Go ahead, if you want. All I care about is keeping people alive.\"\n\n\"You're still a Right Hand of the Invictus, Jack. If Michael tells you he wants me dead, what do you do? With that curse juicing you up, that's a problem.\"\n\n\"He won't do that.\"\n\n\"If he does?\"\n\nIf he does, Jack could just say no. Much as Michael was still his boss, and had a thousand ways he could ruin Jack's second life, Jack was confident he--that the curse was stronger than him. But he had to be careful. If he pissed Michael off, it could lead to any number of problems, from having his account frozen, to having an Invictus sniper blow his brains out, then set his body on fire before he woke up. Strong as Jack was now, Michael was still a deadly man to deal with.\n\n\"Then... I'll fix that problem, too. Been doing that a lot, lately.\" More than he could tell the man.\n\n\"It's pretty fucked up that you've got this curse thing in you, kid. I already knew there was something to Viktor and Julias, but--\"\n\n\"Don't,\" Jack said. \"Don't... just don't.\"\n\nGarry looked at him, and said nothing for a few moments, before he also grabbed a glass of blood from a passing waiter. \"Either way, thanks for dealing with the hunters. They really were a huge problem. And for what it's worth, I'm glad you got Julias's killers. He didn't deserve to die.\"\n\n\"Thanks.\" Don't make me do to you what I did to them, Garry, please.\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n~~Beatrice~~\n\nShe watched Jen's ass for a little while. Not like she stuck out doing that, when everyone else was doing it. Everyone was looking at Triss's ass, too. Well, Triss did have the bigger ass, and the dress, chosen by Jen, highlighted it nicely. It felt nice, having eyes on her, admiring her, getting horny for her. Some people noticed her freaky extra teeth where her cheeks should be, and the hunger in their eyes evaporated, the younger Kindred in particular. But, plenty of the Kindred -- and some kine -- didn't mind her extra teeth, or the snake eyes or short claws, and they watched her with brazen interest.\n\nIt felt good, to think about sex again. She knew she wouldn't be sleeping with anyone anytime soon, except maybe Jen, but it still felt nice. Lots of hunks standing around in really nice suits, many with chests showing or muscles highlighted in some way or another. Natasha's boys looked fucking great, with sleek shirts that really showed off their size. Lucky girl.\n\nGarry looked good, too. Nice to see the old bastard playing nice, talking with Jack and not throwing any punches. Yet. She was tempted to go talk to him, but it'd probably feel kinda weird. He wasn't her boss anymore. She'd dumped him for a crazier boss, Jacob.\n\nAnd Jacob, wow. The old bastard cleaned up good. He actually looked genuinely handsome, gorgeous even, with his salt and pepper hair combed back a bit so it had some body. He wasn't a muscular man, but he'd been in decent shape when embraced, and he filled out his suit well enough. And that suit, holy shit, she never expected her boss to have his own tailor. Dumb of her, now that she thought about it. Of course Jacob had a tailor. Much as he acted like he lived in the woods, the man had a bunch of connections in the city, thralls and ghouls she didn't know about, and probably a shit load of money in a bunch of different accounts.\n\nStill, she didn't expect to see him wearing a suit that looked like it'd been made for a fashion runway last year. The odd, streamlined shape of the sash and skirt that screamed Greek or Roman, while still looking kinda like a suit, was great, and she smiled at the man's back as she admired it.\n\nAdmiration turned to nervousness, and she gulped down the lump in her throat as she made her way toward him. She had to ask about what S\u00e1ndor meant, about Black Blood showing up. What happened? Why did he show up? Where the fuck was Elen?\n\nPeople gave him his room, as expected, so catching him alone to talk... would be damn difficult, evidently. Avery walked over to the man, Noah at her side, and she stared coldly at the old Nos.\n\nBeatrice came to Jacob's side, and met Noah's gaze. He met hers. The message was clear. Avery wanted to have a quick chat with Jacob, and Noah was there to make sure no one got in her way, someone like Beatrice. At least she didn't sense any direct hostility.\n\n\"Jacob,\" Avery said.\n\nThe old man glared at the old woman, and looked her up and down a few times. While Avery wasn't dressed to kill like everyone else, the white one-piece dress with the boob window looked great on her. If Jacob was going to insult her based on her looks, he gave up after a few seconds.\n\n\"What do you want, Avery?\"\n\n\"To talk.\" Her eyes drifted to Beatrice, and she offered her a small nod. Yeah, the woman wanted a peaceful talk, but she knew Jacob didn't want to give it to her. At least at the ball, she had a chance of making it happen. Heh, good luck with that.\n\n\"Nothing to say to you.\"\n\n\"So you say. But I want to talk anyway.\"\n\nGrowling, the elder looked between everyone present, eyes hidden behind the bandage, and shrugged. \"Yap yap, dog.\"\n\n\"Not going to work, Jacob. Not going to let you bait me. I want to settle the animosity between us.\"\n\n\"Us? You killed my lover, dog. And you still won't tell me why.\"\n\n\"You know she was fucking with the Gauntlet, Jacob.\"\n\n\"And? That tells me nothing. Still don't know why that's a bad thing, and I still don't know what exactly she was doing that warranted the assault you launched.\" Jacob stepped in closer, and glared down at the small woman. Didn't need visible eyes to see the glare, with how his neck muscles constricted and jaw clenched. \"Was it a ritual? Did she figure out a way to bring it all down? Or maybe she was summoning something?\"\n\n\"You know I can't tell you. The more people who know, the harder it makes my job, Jacob. Can't you just--\"\n\n\"Just what? Take your word for it that it was a good thing, that you killed the most amazing person I've ever known? That you stripped away the best thing that'd ever happened to me?\" His voice rose just enough that the Kindred nearby turned to look to them. Triss put a hand on her boss's shoulder, a soft touch, hopefully enough to warn him to lower his voice. It was. \"Consider it from my point of view.\"\n\n\"You don't think I have? Come on, Jacob, I'm trying to work with you here. I didn't want to kill her, and Simon caused a shit load of grief for so many people. But he made the right call with her.\"\n\n\"Simon--\"\n\n\"Is dead, Jacob. He died pissing off some fucking spirits he thought he could take on. I lost everyone because of that asshole. Christ, he's dead and gone, so can't you ease up a little here?\"\n\nJacob stepped in even closer, and Noah and Triss both stepped up, in case they had to jump in. Not exactly a viable option, considering Jacob could kick Avery's ass, and Noah's, and Triss's, all at the same time.\n\n\"Tell me exactly what she was doing that warranted her death, and I'll consider easing off. But we know you wont, so I suggest you leave me be, mutt.\" And he was off. With a quiet scoff, the man stepped around Avery and Noah, and moved to the stairs that led to the second floor. No one was socializing on the balcony that circled the ballroom floor from above, and that'd make it a good place to calm down, Triss supposed.\n\n\"Beatrice,\" Avery said, looking to her, \"can you help me out? The pack wants to stay in Dolareido, but we can't if Jacob's going to flip out and try and kill us randomly.\"\n\nTriss snorted on a small laugh. \"Try?\"\n\nAvery's eyes settled into a hard squint. \"Yes, try. Don't underestimate the pack, Triss. Jacob may be one of the oldest vampires around, but he's a vampire. He'll always have that weakness, that solitude and inability to trust others working against him. If I send the pack at him, all of us, we'll win.\"\n\nThat was a terrifying image. Clara had been a serious threat to S\u00e1ndor in the dream, alone, and even scarier, was how deadly the pack had been in the tunnels, fighting that spider monster months ago. Yeah, she had to give it to Avery there. Jacob might have an easy time kicking the ass of a couple werewolves, but if they all threw themselves at it him, especially the queen bitch herself Avery, it'd be a different story.\n\n\"Just, give him his space,\" Triss said, and before Avery could respond, she walked after Jacob.\n\nShe'd planned to jog after him, but the moment she put some real impact into the balls of her feet, she slowed it down to a walk instantly. High heels suck. High heels suuuuuuck. Catching up to Jacob took a little while, but thankfully the man came to a stop once he moved into the East balcony. He put his back to the wall, away from the balcony railing, and pointed his head down as he brooded. Even with his eyes covered, the brooding expression was obvious, frown chiseled into his lean face.\n\n\"Boss,\" she said. \"How you doing? Haven't seen you for almost a week.\"\n\n\"I've been busy.\"\n\n\"Yeah, I can imagine.\" She stood next to him, back to the wall, far back enough that no one in the ballroom below could see them. \"Lot of shit's happened, and you haven't been around. I've been wanting to talk to you.\"\n\n\"You want to know if I have Elen. You want to know if Black Blood helped me get her. He did.\"\n\nSighing, she nodded. \"Did you really let me walk into fire, just so you could have a chance of getting her?\"\n\n\"Yes.\"\n\nWell, fuck. Nice of him to be honest about it, at least. \"You couldn't have helped us?\"\n\n\"I don't stick my neck out for stupid shit, Triss.\"\n\n\"The great and mighty Jacob, afraid he might get hurt?\"\n\n\"The great and mighty Jacob, afraid he might miss his chance to get something that's got his attention.\"\n\n\"Elen. The flesh witch. Of course she has your attention. Sick bastard.\"\n\nThe man looked at her, and slowly formed a smile. \"When I'm ready, I'll take you to her, Triss.\"\n\n\"Thanks, I guess. But I don't know what the fuck's going on. Why did you capture her?\"\n\n\"Because she's a practitioner of arts similar to our own. And I know damn well you've been wondering what I've been wondering.\"\n\nWhat she's been wondering? \"Wondering... wondering if Elen could... help us perform resurrection.\"\n\n\"Exactly.\"\n\nShe shivered with the word. Resurrection. A fantasy. A dream. It was stupid to think about it, to consider it a possibility, but she'd be lying if she said it wasn't on her mind all the damn fucking time.\n\n\"You said... that you had to kill a lot of people, just to get a small peek through to the other side.\"\n\n\"Yep.\"\n\n\"And even if you could get a peek, how the fuck can you turn peek, into reaching into the... the beyond or whatever, to grab someone's... soul?\"\n\n\"With a lot of experimentation and practice.\"\n\n\"... Black Blood. You're talking about Black Blood.\"\n\nThe old bastard winked at her. No eyes, but she could see the muscle of his brow and cheek flex.\n\n\"The Prince isn't the only one doing experiments with the crazy realms that lurk among our own, Beatrice. We've both been poking and prodding at the walls between realms for decades, centuries. This Elen woman is a unique opportunity.\"\n\n\"Because she manipulates flesh. You think she could... could...\" Oh good fucking god. \"You think she could be a regular Doctor Frankenstein.\"\n\n\"Exactly. You told me about her flesh lair, Triss. Imagine the flesh vessels she could carve. She could make any body you could think of, and then we, you and I, could reach out, pluck a soul from the beyond, and place it within.\"\n\nThis was a horrible place for Jacob to confirm all the things Triss had been suspecting. She couldn't freak out here, get excited or angry or anything. And there was a good chance someone might hear them. Course, if Jacob was willing to say it, it was because he didn't care if people knew, or he figured they'd have pieced it together already. Antoinette probably had.\n\n\"You think this will work?\" she said.\n\n\"No.\"\n\n\"No?\" Well, fuck.\n\n\"No. People older than me have tried this kind of stuff, Triss. Cults as ancient as mankind have tried to reach across the barrier, to grab souls, and put them back into bodies. And every mythos, when you dig deep, exposes the folly of this idea.\"\n\n\"Then...\" She came around to look at him straight on. \"Then why are you doing this?\"\n\nHe grinned at her, reached out, and pat her shoulder. \"Because, I want you to give it a shot.\"\n\n\"Me? You want me to try something that you're sure won't work?\"\n\n\"Not completely sure, just mostly sure. I'm hoping you'll prove me wrong.\" He pushed away from the wall, and started to walk back toward the stairs. \"It'll be a teaching opportunity. The best teacher is experience, after all.\"\n\nShe grabbed his arm. \"Wait! Jacob, please, for fuck's sake, tell me what you're doing!\"\n\n\"Don't worry about it for now. When it's time, I'll come for you, and you can start your experiments.\"\n\n\"My experiments? The fuck makes you think I'll be doing any experiments?\"\n\nJacob turned around, and stepped in close to her. Too close. She tried to take a step back, but he stopped her, grabbing her arm and yanking her in close until they were almost kissing.\n\n\"Because I did. When Minerva died, it was all I could think about. Every fucking night, it consumed my thoughts, that maybe I could find a way to bring her back, that maybe the Crone would reward me. Every day, it's all I dreamed about. I know it haunts your thoughts too, the idea that maybe you can bring Julias back.\"\n\nFuck. Fuck fuck fuck.\n\n\"But, I... I spoke to her, remember? The Crone. She said it herself, to let him go.\" And that horrible, painful conversation was carved into her mind with a rusty knife. It'd be with her until she died, in every excruciating detail.\n\n\"And you'll let that stop you?\"\n\nAh, fuck, the trigger word. 'Stop'. Someone 'stopping' her, getting in her way, blocking, preventing. It immediately made her want to fight, to be obstinate, to be a fucking child and bitch and whine until she managed to break through whatever it was stopping her. Stubborn, but not so stupid she couldn't recognize it.\n\nStill too stupid to not let it control her, though.\n\n\"No, I guess I won't.\"\n\nThe old bastard grinned at her. \"I'll come get you when I'm ready. I'm thinking a week or two. Depends on how long it takes to break her. Be ready.\"\n\nBefore she could ask what the fuck that meant, the old Nos walked away, and back down the stairs to rejoin the crowd. She didn't get to ask him about Mary. She hadn't even got to ask him about Avery, and if he was really going to let the werewolf get him so angry. It did sound like Avery was genuine, that she wanted to fix things between her and Jacob. But, until the old wolf told Jacob what Minerva was doing that warranted her death, Triss couldn't blame him for holding the grudge. Triss had been so consumed by revenge when Julias died, it dominated literally every moment of her waking life. And Jacob had known Minerva a lot longer than Triss did Julias.\n\nSighing, she walked over to the railing, and looked down at the crowd below. Christ, up here, it was just tits, tits everywhere. Big ones, small ones, tits tits tits. Most of the dresses the women wore had exposed necks and plunging cleavage, so, tits. And it was obviously affecting the kine they'd brought. Anyone with a heartbeat was doing their best to keep themselves under control, but as the night went on, and people got more comfortable, and drunk, it was easy to see they were getting aroused. Hell, she could smell it.\n\nThe female kine were looking at the female Kindred of course, but if Triss had to guess, they were looking at the men just as much. The male kine were mostly looking at the women, and some were looking at the men. She laughed and shrugged. Natasha would have found that interesting, the distribution of sexual preference. Triss, on the other hand, found herself licking her lips as she watched the kine grow more and more horny. It'd been so long since she'd fed and got off at the same time.\n\nThere was Vivienne, hanging out with some of the young female Invictus. With them was Carter, the older wolf dude who was staying at the same building Clara and Eric stayed in. Carter was a handsome, rugged, old man kinda dude, big and gruff. Damn handsome, in a 'I live in the woods, chop wood, built my house from wood, and can break wood with my bare hands' kinda way. There was exotic appeal in that, definitely, especially to a bunch of city girls like Invictus Kindred.\n\nThe female Uratha were getting a lot of attention too. Rumor was that Avery had a boyfriend, so they stayed clear of her, but the other girls were getting more attention than they expected. Triss knew some of their names. Erica and Brianna looked to be in their forties, but like all the werewolves, were pinnacles of fitness and athleticism. Monica, on the other hand, looked to be in her early twenties, and one male vampire was obviously hitting on her. The poor girl looked to be in a daze, and not from any Discipline. The air smelled of sex. Not gross sex, like a couple's bedsheets that hadn't been washed in weeks. It smelled of sex like a great cologne or perfume might. It was affecting the Kindred, and that meant it was probably affecting the werewolves ten times more, considering how stronger their noses were, and how they couldn't turn off their biology like vampires did.\n\nShe looked around her, and gulped down the rising sadness. She'd talked to Julias on this balcony. At the time, she'd worn a veil over her face to hide her mouth, because she'd thought her crocodile teeth were ugly. And, well, they kinda were, but most Kindred didn't mind. Julias had helped her see past her own infatuation with misery, and consider that maybe her second life didn't need to suck so much.\n\nAnd then he died.\n\nShe growled to herself, grit her teeth, and shook her head hard. Stop it. Stop it, just let him go. The fucking Crone herself, or whatever that thing was, told you to let him go. Don't let yourself go down this road.\n\nShe looked around again, and the memories sucker punched her. It was this spot that brought it all back, the feel of his arms around her, the way he smiled, the god damn mother fucking sound of his voice.\n\nIf Jacob really was offering even the possibility that she could bring him back, then she had to try.\n\n~~~~~~~~~~~~~~~~~~~~~~~\n\n~~~~~~~~~~~~~~~~~~~~~~~\n\n~~Eric~~\n\nGood fucking god.\n\n\"Good fucking god,\" Jessy said. \"Look at these sluts.\"\n\nEric choked on a laugh, but nodded as he looked around. \"Um, yeah, I guess people did get a little crazy. Like, you know, you did.\"\n\n\"I'm over fifty years embraced. I'm allowed to do whatever I want. But I see a bunch of neonates just putting their tits out like rotisserie chickens. And look at all these dudes, showing off their abs. No class.\"\n\nEric looked at Jessy's dress, which was just a bunch of horizontal black straps connected at the front by a zigzagging string, and a thong that hid her sex. Then he looked down at his own, slightly see-through black shirt that was unbuttoned down to his navel.\n\n\"Uh--\"\n\n\"You're my date. If I wanted to, I could fuck you right there in the middle of floor, and no one except for five people could say shit. I have the power, so I get to flaunt! Them's the rules.\"\n\nFive people? Antoinette, the sheriff, her sire Michael, and probably Maria. And? Oh, probably Jacob. Well, he was a scary bastard, and commanded as much respect as the Prince in his own, strange way. Eric was perfectly content staying on his good side.\n\n\"So the people at the top get to flaunt. People at the bottom should be more conservative?\"\n\n\"Exactly.\"\n\n\"I get the impression Antoinette would disagree. I think she'd prefer everyone feel comfortable doing whatever they wanted, sexually speaking.\"",
        "His girlfriend rolled her eyes, hooked her arm with his, and started pulling him around the ballroom again. \"Yeah, but she'd still push for some kind of hierarchy.\"\n\n\"All the older vamps are tops, all the young vamps are bottoms?\"\n\n\"Ah!\" She beamed at him, eyes wide with genuine surprise and wonder at his suggestion. \"I like that idea!\"\n\nHe elbowed her in the side, again. \"You have a boyfriend.\"\n\n\"And you have a girlfriend. Don't think I haven't noticed all the tits you've been staring at.\"\n\nHe laughed. Well, it was true, but it was also true Jessy was staring at them as well, and more than he was. Though, as the night went on, he could tell that was slowly changing. Try as he might to ignore the smell of flesh and desire, his Uratha nose picked up on it all. His eyes certainly didn't miss all the breasts barely contained, or asses, or thighs, or stomachs; Jessy kept pointing them out to him. No matter how hard he tried to keep his blood cool, it was getting hotter and hotter.\n\n\"Eric,\" a voice said, one he barely recognized.\n\nHe turned and looked at the woman, and then up for a moment as he dug through his memory. \"Brianna, right?\"\n\n\"Yeah.\" Brianna was a bit tall, a black woman with short black hair straightened, and brown eyes. Quite muscular too, like Jessy, though her breasts were smaller. He kinda hated that he couldn't help but make that comparison, but Brianna was wearing a revealing dress, lacy, with shoulders and sleeves and a long skirt, but the lace made sure most of her body was visible through it. Only the convenient curls of solid black through the black lace over her sex and nipples kept it from being indecent.\n\nShe was damn attractive, and Jessy looked her up and down a couple times before smiling. Eric got ready to elbow her before she said anything, but she waited, grin barely contained.\n\n\"I wanted to talk to the both of you,\" Brianna continued. \"I... uh... wanted to talk about sex.\"\n\nJessy's grin exploded into a large smile. \"You can totally jo--\"\n\nEric elbowed her. She elbowed him. This was quickly turning into an abusive relationship. If this kept up, he was going to have to use ju-jitsu on her ass. She'd probably like it, too.\n\nBrianna blinked at them, several times. \"I uh, meant about you two. Word is Eric has sex while in Gauru form?\"\n\n\"He does,\" Jessy said, grin growing again.\n\n\"I... wanted to know, how?\"\n\n\"How?\" Eric said. \"Not sure what you mean.\"\n\n\"Well, it's just that... for the rest of us, Gauru form is damn hard to control. I know you're Cahalith, and not Rahu like me or Matthew, but still.\"\n\nWell, he figured this conversation would happen eventually. Caleb had poked him about it, but they hadn't actually had the conversation. Considering all the skin visible everywhere tonight, now was as good a time as any.\n\n\"Well, I guess a part of it is because I'm a city boy. Born and bred here in Dolareido.\"\n\n\"No, I don't think that's it,\" Brianna said. \"A few of us in the pack grew up in cities, too.\"\n\n\"Hmm. Maybe it's because I used to fight professionally? You get used to keeping a cool head, despite being in a fight.\"\n\n\"Maybe, but I doubt it. A lot of us are good at keeping cool heads when fighting, just, not when in Gauru form.\"\n\nHe shrugged. \"Not sure what to tell you then.\"\n\n\"Can you... describe it for me?\"\n\n\"Oh fuck yes,\" Jessy said, stepping in close and dragging Eric in with her. \"The dude gets so huge, and then he kinda grows a di--\"\n\nBrianna held up a hand. \"Uh, I meant from Eric, and I meant mentally.\"\n\nFun time ruined, Jessy frowned, but hooked her arm with Eric again and leaned in close to him.\n\n\"It's... a powerful rush, I admit,\" Eric said. \"There's been a few times I've lost control, but never with Jessy. With her, when I'm transformed, I can still hear my human thoughts. And they're... aligned, I guess, with the wolf's thoughts? Same for the desires.\" Well, this conversation was about to get pretty damn personal, but he was going to say it anyway. \"When I'm in that form, every part of me thinks of Jessy as my... mate. All those urges you get for the hunt in that form, they get sidelined for a while, replaced with this need to be... to...\"\n\n\"To pin me down and make me his bitch, literally,\" Jessy whispered, leaning in close so only Brianna and Eric could hear. She had the most evil smile on as she said it. \"It really is like fucking some sort of horny wolf, a giant one. Like, half of him is ready to fight for his territory or go on a hunt, but the other half is looking to fuck and make puppies.\"\n\nFor all her jokes, Jessy grinned up at him, and a hint of something more was there. She'd caught on to the word 'mate', and after their conversation a couple nights ago, the word had a lot more meaning than it used to, for both of them.\n\nBrianna raised a brow as she looked at Jessy. It was probably her first conversation with the woman, and considering the topic, was bound to be a shocker for her. Jessy was brash, brazen, and a lot wiser than she let on. He really did love that about her.\n\nHe really did love her.\n\n\"Why?\" Jessy said. \"You find a man interested? Cause, I mean, I'm not sure how that'd work physically. You girls get pretty big.\"\n\nBrianna frowned. \"Not that big. I'm... sure it could still work.\"\n\nAs if Eric no longer existed, Jessy let go of his arm, stepped around Brianna to get on her other side, and leaned in to her, shoulder to shoulder. \"Who?\"\n\n\"Who what?\"\n\n\"Who's the dude looking to bang a big werewolf girl?\" Jessy said. Eric facepalmed, but before he could say anything, Jessy shushed him.\n\nEric took a couple steps back, and let Jessy corrupt another soul. There was no stopping her.\n\nBut before she could get very far into spreading her evil tendrils into Brianna's brain, the front doors of the Black Hall opened.\n\n\"Now arriving, Prince of Dolareido, and Voivode, Antoinette of the Ordo Dracul. Introducing her childe Samantha Terry. Accompanying, ghouls Ashley Ronald and Julee Hemmertin.\"\n\nEveryone looked. Guys, girls, vamps, wolves, humans, everyone. Antoinette was the tallest woman in the whole damn city, with white hair and red eyes. Even without the absurdly massive rack, there was no way people couldn't take a moment to look at the woman. You had to look at her, if even only for a second, to know what she dressed like for the night, like witnessing a celebrity out in the real world.\n\nStraight up obvious was the corset. Eric glanced over across the ballroom to another tall woman wearing a corset. Isabella, according to Jessy. For just a second, Eric spotted a little envy, and maybe a little venom to join it, as the Invictus Daeva looked at the Prince.\n\nAntoinette's black corset covered her bust, but only barely, and it really had both her breasts pressed up and together to the point someone could have jumped on them and enjoyed a waterbed. From the corset hung a skirt, except as she moved, her legs broke through many hanging black strips of fabric. So, less a skirt, more a bunch of thin, dangling slices of black that did a very, very poor job of covering her legs when she moved. Each step exposed her black -- low -- heels, and he gulped as he noticed from certain angles that, of course, she was wearing a micro thong. When she held still, she looked like she was wearing a black skirt. When she walked, staring eyes could get a glimpse of her smooth mons and large ass. And there were a lot of staring eyes.\n\nIt was a simple dress, one that screamed 'I own this building, this city, and everyone in it'. It was working. Her two ghouls were dressed in tight black dresses, strapless, with long skirts. They were meant to accent the Prince, like living jewelry that proved who she was, and the power she wielded.\n\nHer childe, wide-eyed and scared, followed after her, glancing left and right with each step. It was obvious she was doing her best to keep her arms at her side, and not cover herself up. As was apparently in fashion, according to the dresses currently surrounding Eric, her black dress was a lot of straps, connecting horizontally to a long front and rear piece for a skirt. They connected behind her back, around her breasts for a sort of tube top shape, before hooking around the neck.\n\nThe straps along the thigh that connected the front and back of the skirt, went all the way up past the hip where they connected behind her. Yeap, no underwear. Poor woman look so frazzled and awkward, and with every step she took, it was obvious she was getting overloaded on the sheer amount of skin everyone was showing off.\n\nShe was beautiful, though. Must have been in her forties, but had put in the work to get in shape. Jessy would--\n\n\"Total milf,\" Jessy said. \"And embraced at that age? She's one kiss on the neck away from getting wet.\" She'd snuck back over to him, and he'd been too distracted to notice. As a great man once said: a penis and a brain, and only enough blood to run one at a time.\n\nEric chuckled as he looked back to her. Brianna had followed, but her eyes were locked on the newcomers. Yeah, everyone was staring, half because it was the Prince and that demanded respect, but half because four beautiful women had just walked in.\n\nFive? Everyone looked up to the stairs that Antoinette stood at the base of. There stood the sheriff in a tuxedo, and on his arm was a woman Eric had never seen before.\n\n\"Now arriving, the sheriff of Dolareido, Daniel.\" The name hung in the air, as if the announcer was waiting for a last name. Daniel didn't give him one. None of the super old elders seemed to have them. \"Accompanying him, esteemed guest Elaine, of the Ordo Dracul, Architect of Terror, companion of the Prince.\"\n\nEric literally heard the shifting fabric of every suit and dress in the place, as everyone looked to the front entrance of the Black Hall. She was gorgeous, this Elaine person. His inner wolf told him vampire; made sense, considering she was the Prince's friend, and a member of her covenant. He couldn't tell what bloodclan she belonged to, but whoever she was, she had certainly dressed for the occasion.\n\nHer black dress came with gloves that reached past her elbows. She wore black high heels, and the long split along the skirt made sure every inch of a long, pale, curvy leg was visible. It was a classic black dress, the sort you'd expect a lounge singer to wear in the fifties, except with a shit load more cleavage than a dress of that era could get away with. Open back, and a single strap that hooked the neck so the loose, dangling front straps barely covered her enormous breasts. A black strap wrapped around her waist was the only thing keeping the dress snug to her stomach and bosom as she walked down the stairs.\n\nLong blonde wavy hair, red lipstick, and grinning brown eyes. If she'd had a long, black cigarette holder with a lit cigarette in between her fingers, she could have walked straight out of a film noir flick. Except for one very specific detail.\n\nThe dress was slightly see-through.\n\nEric gulped again, and did his best to not stare at Elaine's huge breasts, and the barely visible large nipples that fought against the loose front straps. Every step she took made them jiggle and threaten to escape, and despite the fact his girlfriend was literally touching his side, he couldn't help but want them to do just that. Well, Jessy was probably hoping for the same thing.\n\nThe fact they could both see through the skirt enough to tell that she was not only not wearing underwear, but that she shaved her sex smooth, only added to the ensemble. Yeap, this was Antoinette's friend, another bombshell sex goddess that didn't mind people seeing her parts. And here he was worrying that Jessy was going to corrupt everyone, when the real threats had just arrived.\n\n\"She,\" Jessy said, \"is dangerous.\"\n\n\"You're telling me,\" Brianna said.\n\nThe Gangrel shook her head. \"No. I mean, that's Elaine. She hasn't been to Dolareido in decades. I think I saw her maybe once, when I was just a fledgling. Maria and Michael avoided her. Viktor did more than avoid her, he outright dodged her company. I think he was afraid of her.\"\n\n\"Really?\" Brianna said. \"Viktor, afraid of someone?\"\n\n\"Yeah, crazy, right? That motherfucker could take on anyone, but her, he put in time to keep his distance from.\"\n\nEric frowned, but said nothing. He barely knew who Viktor was, just that he was dead. But it didn't take a genius to pick up on the cues he was seeing from Jessy and others, older vamps giving Elaine plenty of room as she came down the stairs to join Antoinette. With the two women standing beside each other, it was hard to not stare.\n\n\"Just imagine,\" Jessy whispered as she leaned in close to his ear, eyes still on Elaine, \"those two women in bed with you.\"\n\n\"Uh...\"\n\n\"You'd drown in tits. Death by boob smothering.\"\n\n\"That, um, is a kink for some people, apparently.\"\n\n\"I think I may be coming down with said kink. A shame vampires don't need to breathe.\"\n\nHe laughed, and slipped his arm behind Jessy and around her waist. \"Picking up kinks like kids pick up the flu?\"\n\n\"Exactly. Probably the best part of these balls, getting introduced to all these new fashion statements, and seeing which stroke a new kink, like sparks starting a fire.\" Nodding, as if stating a most obvious truth, she turned the two of them to look at Brianna again. \"So yeah, I say go for it. Just find someplace with thick walls, first. Much as Eric is in control when we fuck, I can tell he's walking a line, you know? But your dude's a vamp, so I'm sure he can handle it.\"\n\nBrianna nodded, lifted her fingers to her chin, and held it as she walked off, deep in contemplation.\n\n\"Did you really convince her to have sex with someone while in werewolf form?\" he said.\n\n\"Yeap.\"\n\nWell, he had to admit, the female werewolves certainly didn't lack for curves. But they were eight feet tall, and all the best bits were covered in fur. Maybe her form would adapt to the sexual stimulus, like his did?\n\n\"Can I ask who?\"\n\nJessy touched her nose. \"Nope. Just a horny dude who's into strong girls who can kick his ass.\"\n\n\"Is he a dumb dude?\"\n\n\"Ha, yes. Very dumb. A charming, dumb dolt, I guess. Kinda like a big kid.\"\n\nThat did narrow it down a little. Kindred generally weren't stupid. A dumb, big kid in an adult body? Maybe Joe. Then again, for Jessy to talk about him without scowling meant it probably wasn't Joe. Maybe Othello? From what he'd heard from Jessy, Othello was an old, strong, lazy and dumb Daeva. So maybe him, but the man had brought a pretty woman with him. Heh, like that mattered to Kindred.\n\nThe crowd's murmurs resumed, only to die off again as Antoinette raised a hand, silencing the music. Everyone looked to the Prince, who stood by the front stairs, with her childe, her ghouls, her sheriff, and her friend. Time for a speech, apparently. Anyone else probably would have needed a mic. In Dolareido, people shut the fuck up when the Prince wanted to talk.\n\n\"My dear Kindred, Uratha, and Begotten,\" the Prince said. Only one Begotten at the ball, but maybe that'd change as the night went on. \"I host this ball to celebrate the removal of a great thorn in our sides. My love Mister Terry, with the help of the witches of the Circle of the Crone, and Miss Moreno of Avery's pack, have defeated the hunters.\" She nodded to Jack, to the witches, to Clara, waited, and everyone took the cue to applaud. \"And, lest I forgot, we cannot ignore that the hunters were defeated in large part due to the aid of one of their own. Brace Harcourt unveiled the hidden location of the hunters, and his two companions Marge LeBlanc and Dennis Hemmer allowed the assault to proceed. They knew their masters were villains, and we should acknowledge and appreciate our human guests' contribution to their defeat.\"\n\nWell, holy shit. Some more murmurs went through the crowd as three people walked in through the front door. The two guys were wearing some normal tuxedos, and the girl was wearing a white dress with big shoulder straps and a skirt that went down to the knee, zero cleavage or anything like that. To the watching Kindred, the three probably looked like very well wrapped snacks.\n\n\"Um, hi!\" the black dude in front of his two friends said. Probably Harcourt.\n\nAntoinette threw him a harsh glare, enough to make the human shrink, before she looked back to the crowd. \"I have given them sanctuary. Until I decide otherwise, they remain within the city, and under my protection. Treat them as you would any thrall or ghoul.\"\n\nAny thrall or ghoul? That was a dangerous statement. Far as Eric knew, the Kindred had license to get pretty hands-on with thralls and ghouls. So, as long as the three hunters weren't killed, embraced, or harmed in some nasty way, Antoinette basically just gave every vamp license to have some fun with them. And, the ball was filled with hungry vampires, who'd be very horny the moment they got a drink of someone. Unless the hunters defended themselves, chances were they'd be getting Kissed, and probably fucked, before the night was over.\n\nEric glanced to his side. Jack was nearby, standing with Damien, and while Damien was looking over the newly arrived Kindred and hunters, analyzing, Jack's eyes locked onto Elaine. For a moment, Eric figured the kid was admiring how fucking gorgeous the woman was. He wasn't. The kid's eyes were wide, as if someone had shocked him to the core.\n\nWhoever this Elaine was, Jack knew her."
    ],
    "authorname": "NovusAnimus",
    "tags": [
        "slow",
        "violent",
        "paranormal romance",
        "suspense",
        "vampire",
        "werewolf",
        "vampires",
        "werewolves"
    ],
    "category": "NonHuman",
    "url": "https://www.literotica.com/s/my-little-ventrue-pt-07-ch-21"
}
{
    "title": "Straight to...Straight?",
    "pages": [
        "==========================\n\nThe girls try to turn the gay guy straight.\n\nThis is a VALENTINE'S DAY STORY CONTEST 2015 entry. Just a fun little story about misconceptions, and going with the flow. I'll also have to beg you to be a little forgiving. I haven't had much time to write of late, and this story didn't get the editing it deserved, but it's less than an hour to deadline, so I'm submitting it as is. \n\n==========================\n\nI was stuck, in a serious bind. I was living off campus when our entire building received notice that we had to vacate over the holidays. The building was being turned into condo's or something, and we had a month to get out. Our lease was month-to-month, as it turned out were everybody's.\n\nSuddenly, sixteen students were out looking for a place to live. It wouldn't have been so bad, if I hadn't been away at the time, working on my grad project, off the coast of Brazil. I showed up, exhausted from a month at sea, and a bit depressed from the results of our sojourn, to find my entire building was under construction, and my apartment was gone.\n\nA few hurried calls, and I was informed by my ex-roommates that my stuff was in storage, and I owed them $94. A bunch more calls, and I found out that nobody had space to spare.\n\nAfter dozens of failed attempts at finding a new home, I found the notice on the campus bulletin board, and was knocking at the door of a big old house, about a mile off campus. I wasn't an ideal match for their new roomie, but I figured I'd give it a chance anyway.\n\nA gorgeous brunette opened the door, and glared at me. \"Let me guess. Another perv looking to rent the room. Read the notice dip-shit. Women only.\"\n\nI had read the notice, but I was hoping to convince them that I was in desperate straits, and appeal to their kindness. It was instantly obvious this sneering bitch didn't have a shred in her soul.\n\n\"Who is it?\" I heard from inside.\n\nThe brunette turned her head. \"Another dickwad with a fantasy,\" she shouted back.\n\n\"Listen, I won't be a problem, I swear,\" I told the girl, hoping that if I could just get my plea in, I'd have a chance.\n\nI really was desperate. I'd spent two days trying to find a place, and the guys whose floor I was sleeping on told me that his roommates wanted me gone. I had cleaned up the best I could, hoping that maybe my appearance would help. I'm told I'm not a bad looking guy, if a little on the skinny side. A month under the equatorial sun off the Brazilian coast, living on a boat, seasick half the time, had me dropping another 10 lbs, and I was brown as a berry from the intense sun. Not typical for late January in New England.\n\nAnother girl showed up beside the first. Equally beautiful, with diametrically different looks. Blonde, short, stacked, round in all the right places, compared to the long, lean brunette.\n\nThe new girl looked up at me. \"Don't I know you?\"\n\nI shrugged. \"Same campus I guess.\"\n\n\"No, I definitely know you. Biology?\" she asked, squinting at me.\n\nI remembered her now. \"Last semester, Bio 143, morning session.\"\n\nHer eyes lit up. \"Oh yeah! You were the TA!\" I remembered her very well, once she'd spoken. The little hussy had come on to me, trying to better her grades. Came on strong. No way I was going to let a little pussy ruin my schooling and career. Even if it was prime, grade A.\n\nShe pulled the door open, \"Come on in. You're really looking for a place?\"\n\nThe brunette turned on her. \"No way, Ashley. You know the rules. The last thing we need is some testosterone laden jerk living here.\"\n\n\"Chill Heather. It's cool. He's gay.\"\n\nGay? What the fuck. Where did she get off telling someone I was gay? Just 'cause I didn't want to . . .\n\nHeather, the brunette, looked me up and down like a piece of meat. \"You sure?\"\n\nAshley grabbed my hand and dragged me into the building. \"Of course. I mean, just look at him. Tan, manscaped, dressed like that. How obvious does he have to be? Hell, two of the girls in class told me about him, when I said I was going to get him to raise my grades, you know, with a little barter. I couldn't even get him hard.\"\n\nDamn of course not! I was shitting my pants, that someone might walk in on us. She had taken her shirt off moments after entering my office, asking me what it was going to take. I'd almost run from the room when she had grabbed my crotch.\n\n\"So he didn't go for it. Why would you want to think of giving him a place here?\" Heather insisted.\n\n\"He was cool about it. Didn't get flustered, and didn't cause me any trouble. He just laughed and told me I was barking up the wrong tree. He did give me a chance to make up a test and do some extra credit. Got my grades up high enough to keep my scholarship. He's one of the good guys. Plus, he's a brain. Wouldn't be bad to have our own tutor in the house.\"\n\nAround that time, another hottie made her presence known. I guess she'd been listening in from the hall. \"Why are you looking for a place?\" she immediately started in. \"Boyfriend kick you out?\"\n\n\"Look, it's not like that. I was in Brazil, and when I came back my stuff was in a storage locker, and I had nowhere to stay. I'm sleeping on a friend's floor. I could really use a place. I swear, I'm a quiet guy, and I'll stay out of your hair. I just need to finish this semester.\"\n\nThe latest visitor gave me the same appraising look. I returned the favor. Her hair was dark red, the kind of red you only got out of a bottle, but her skin had that look you expect from a redhead. These girls ran the gamut of physical perfection. Heather the brunette looking like a model, little Ashley was more like a curvy cheerleader. This girl was between the two, maybe 5'4\", 5'5\", with all the right curves in all the right places, without going overboard like Ashley.\n\n\"What are you looking at perv?\" she sneered.\n\n\"Not much,\" I answered quickly. \"Do you guys always judge so quickly? You won't even hear what I have to say?\"\n\n\"Trust me, we've heard it all. We don't need the hassle. Besides, you don't want this gig. It's the smallest room, you have to share a bathroom, and you get laundry duty. Do you really want to be scrubbing out panties, and sorting through four girls' things? Besides, how do we even know if you can cook?\"\n\nAshley intervened. It was nice to think I had at least one champion, even if she had me all wrong. \"Come on, Megan. We can at least talk about it right? Admit it, it would be nice to have a man around the house, even if he's not really a man.\" She turned to me. \"How are you with tools? Fixin' things.\"\n\nI shrugged. \"Better than average. I took care of things at home for years, since it was just me, Mom, and my three sisters.\"\n\nThe brunette seemed to warm up a little after I explained that. \"Could you fix a plumbing leak?\"\n\n\"Depends. I'd have to see it. Simple stuff, sure.\"\n\nMegan stood icy cold, arms crossed over her ample chest. \"I don't like it.\"\n\n\"How about you give me a week? Trial basis. I really need a place to sleep, and you can keep looking in the mean time. If you really don't want me around a week from now, I'm gone.\"\n\n\"I don't like the way you were checking me out, either,\" Megan insisted.\n\n\"Jesus, Girl! Get over yourself. So you've got tits. Big deal. Ashley's got better. If that's what I was interested in, I wouldn't give you a second look.\" To be honest, I'm an ass man. From the looks of things, Megan had a tremendous one, but I wasn't about to let her know that. I had no patience for snooty bitches.\n\nAshley giggled, and Megan turned bright red, almost matching her hair. \"Told ya. Queer as they come. I mean he didn't even give me a second thought, when I bared 'em for him.\"\n\nI was about to argue with her, but thought better of it. If they wanted to think I wasn't interested, that worked for me. I wasn't a kid at 26 years old, working on my PhD. I'd changed schools for my Doctorate in marine science and technology and didn't know that many people on campus, outside of my specialty. I knew better than to shit where I eat anyway. Sure, I could play along, as long as it gave me somewhere to lay my head.\n\n\"It's five-fifty a month,\" Heather said, \"but that includes utilities.\"\n\n\"Five hundred and fifty dollars? Your flier said four-fifty,\" I pointed out.\n\nHeather shrugged. \"For a girl. You get to pay a premium.\"\n\nMegan was still having none of it. \"No way, Heather. We all agreed. No guys. None. Not now. Not after . . .\"\n\nAshley jumped in. \"Why don't we let Bruna decide? Me and Heather are all for it. It's not like we've had a lot of choices so far. If Bruna say no, it's a no.\"\n\nIt looked like Megan was pondering it. \"Alright. She gets out of her last class around four. She'll probably be here around five. Can you stop by after five?\" she asked me.\n\n\"I'll be here.\"\n\n* * *\n\nAt five-thirty I was parked in front of the house, with all my belongings in the back of my baby. If this didn't work out, I'd be living on the street until something fell my way. I didn't want to come across as desperate, but the fact is I was. \n\nI checked my appearance in the glass beside the door before knocking. I heard a bustle inside the house, and the clatter of footsteps. Then the door was opened, and Ashley was shouting \"He's here!\" She pulled the door open wide and stepped aside so I could enter. I saw Megan watching me from the entrance to the living room, and she didn't appear any more pleased to see me than earlier. Oh well. She wasn't the one I had to convince.\n\nAshley grabbed me by the hand and dragged me to the back of the house, toward the kitchen. \"Bruna's great. You're going to love her.\"\n\nThe mysterious fourth roommate was nothing like the others. Oh, she was attractive enough, but she seemed quiet. She was on the short side, with dark skin, and darker hair. Her smile was gentle enough but didn't seem to reach as far as her eyes.\n\nI stuck out my hand, trying to look as unintimidating as possible. \"I'm Alex. Hopefully your new roommate.\"\n\nShe nodded, and took a moment to glance at the other three. Then she looked me up and down. \"Ashley says you're smart. Could you help us?\" The girl spoke with an accent, but her English was excellent.\n\n\"Probably in some subjects. I'm currently working on my doctorate in marine sciences. I've got a bachelor's degree in marine bio, with a minor in sustainability. I'm good in the hard sciences, bio, chem, physics. I don't know what your studying, but if I can help, I'm willing.\"\n\nShe nodded. \"Heather said you're good fixing things. Could you do that?\"\n\n\"I'm not the ultimate handyman, but I can do the basics. I wouldn't mind helping out around the house, but doesn't the landlord take care of that stuff?\" \n\n\"He's supposed to, but it never seems to happen,\" she said. She had a strong accent, Hispanic, maybe Brazilian, from her coloring. Could be Caribbean. \"You can't have any boyfriends spend the night,\" she added.\n\n\"Not a problem. I'm not in any relationship, and not looking for one. Right now, I'm all about finishing my dissertation, and taking care of my classes.\" \n\nShe nodded. \"Alright. Five hundred, your room is at the top of the stairs on the left. You get to cook dinner on Thursdays. Your share of the groceries is twenty dollars a week. Please fix the leak in the shower, and the back door gets stuck. Also, the window in Heather's room doesn't open.\"\n\nBefore I could even absorb the sudden turn of events, Ashley piped up, \"Is the car out front yours?\"\n\n\"Mine and the banks,\" I admitted.\n\nThat seemed to open a few eyes. Cars on campus were not necessarily a rarity. Immaculate classic cars were. I had a reserved parking spot, which was even rarer yet.\n\n\"You mind sharing, some time?\" Ashley asked. \"None of us have one.\"\n\nI was slow to answer. \"I need it during the day, I have to go down to the bay pretty frequently. Evenings I wouldn't mind running errands or shuttling around. I don't like to let other people drive it.\" That was an understatement. It seemed like nobody knew how to drive a manual transmission anymore. Plus, once most people felt the power of the 410 horsepower, they seemed to go a little crazy.\n\nAshley pouted, and grabbed my arm. \"Not even your favorite roomy?\"\n\nI almost laughed. \"It's a stick shift. It's very temperamental.\"\n\n\"It's a convertible, and gorgeous,\" Ashley said. \n\nTrue, very true. \"We'll see, alright? I'll let you give it a test ride. If you know what you're doing, then maybe.\"\n\nI was surprised when Megan spoke up. \"I can drive a stick. Dad has a fifty-three Chevy thirty-one hundred truck, with four on the floor.\"\n\n\"The five window?\" I asked, impressed. \n\nShe nodded. \"It's a vee three twenty-seven. I've also driven his sixty-nine Road Runner with the four-forty six-pack four-speed. Like I said, I can drive a stick.\"\n\nHeh-heh. She said sixty-nine. Alright, sometimes I'm a little juvenile. I was in a good mood, I had a place to live. \"Maybe you can, I'll have to check it out myself.\"\n\n\"Tonight?\" she asked. \n\n\"Probably not. I still have to unload and settle in, and I wouldn't want the first drive to be in the dark.\"\n\n\"Then let's get you started,\" Ashley said, grabbing me by the arm again, and towing me toward the front of the house.\n\nI didn't expect to have four women helping me empty the vehicle, and even assist me unpacking. It felt a little awkward watching them paw through my stuff. Heather gave me an extra set of sheets for the twin bed that almost filled the tiny room. It took a little more than an hour to have me completely moved in.\n\nThe girls were chattering away the whole time, filling me in on their majors, background, problem areas, and the rules of the house. I filed it all away in my brain. I knew I was still on shaky ground. They could kick me out at any time, so I needed to be on my best behavior. As I hung up the last of my clothing, the girls watched from just outside the door.\n\n\"Can we go for a drive now?\" Ashley asked.\n\n\"What about dinner?\"\n\nBruna answered. \"The sauce will keep. I've got it on its lowest setting. We can cook the noodles when we return.\"\n\nThey were determined, and I wasn't going to fight an unwinnable battle. \"All right. Anyone other than Megan know how to drive a manual transmission?\"\n\nThe answer was no. That made me feel a little better. \n\nWe gathered around my pride and joy. A 1963 Ford Galaxy 500XL, with the 427 engine, dual four-barrel carburetor, power everything. Rangoon red, with the white soft top, and red and white interior. I'd spent the better part of two years restoring it, and it was a thing of beauty.\n\n\"Can we put down the top?\" Ashley asked.\n\n\"It's gotta be less than fifty degrees outside,\" I reminded her.\n\n\"Please? Pretty please?\" she wheedled.\n\nI sighed. \"Get your coats on while I take down the top.\"\n\nThat left me with just Megan, who moved to the other side of the vehicle. \"Sweet car,\" she said as she helped me undo the convertible front.\n\n\"Thanks.\"\n\n\"You gonna let me drive it?\" \n\n\"Probably.\"\n\n\"Even though I was an ass to you?\"\n\nI chuckled. \"I get it, Megan. I can only imagine how many guys would love to live here. You're cautious. That's fine. I'm sure in time you'll find that I'm a good roommate.\"\n\nShe smiled, and it was a beauty. She was gorgeous, no doubt about it, even more so with that big toothy smile. \"The car helps a lot. It's a bitch getting around without wheels, especially doing the weekly shopping. If you really can fix a few things around the place, and cook halfway decently, I figure you're a keeper.\"\n\nMegan's accent made it clear she wasn't a local. She had the midwest twang, not quite 'Fargo', but more like Iowa. I suspected she'd say 'pop' instead of soda. Ashley, on the other hand, sounded East coast, while Heather was pure Boston. It was an interesting mix.\n\nBy the time we were all present and accounted for, I'd put the top away under the boot and had it snapped down. Megan insisted she needed to sit up front, to see how the transmission worked. When that started an argument, I promised that everyone would get a chance to sit in the passenger seat. \n\nI imagined we were quite a sight. Four beautiful women seated in that glorious vehicle, while we cruised around campus. Ashley seemed to know everybody, and anytime we passed a crowd, she was calling out names and waving. Megan was peppering me with questions about the car, while Bruna and Heather seemed to be holding some type of intense conversation in back.\n\nAfter about a ten minute drive, Bruna leaned forward. \"Can we go to the liquor store?\" she asked.\n\nIt made me stop and think for a moment. I wondered how many, if any of my passengers were of drinking age. I knew Ashley was a sophomore at best. I didn't need and more trouble. Then again, four pretty, drunken women had its own appeal. \"Sure, I think we can manage that.\"\n\nWe filled up a cart with beer and wine, and Bruna passed me eighty bucks. Looked like I was the designated payer, and she was the house treasurer. It wasn't a problem, and they were all suitably impressed with the huge trunk as we loaded it up. \n\nAshley giggled. \"I bet you could fit all of us back there. It's ginormous!\"\n\n\"Luckily, I'm not the kind of guy who fills his trunk with young women,\" I said.\n\nOnce I'd closed the trunk, Megan was standing by the driver's door, doing her best to look sweet and friendly. What a turn around. I put the keys in her hand, and she shrieked, practically dancing in place. Once I was situated, I gave her some last directions, and she started up the powerful engine.\n\n\"God, I love the sound of that,\" she said, grinning at me. She had no trouble with the shifter on the column, and I was pleased that she was able to pull out smoothly and with no major issues. After only a few blocks, she seemed to get the hang of it, and I had to admit, she could probably drive as well as I could.\n\nShe turned to me, grinning from ear to ear, her hair blowing behind her. \"What do you think?\"\n\n\"You can drive a stick.\"\n\nI was surprised when she reached over and patted my thigh at a stop sign. \"I appreciate it,\" she said, before easing through the intersection. \"I'd be scared to death to let anyone drive my baby. Thanks.\"\n\nAt the next light, I encouraged her to pull over, and let someone else sit up front. I was comfortable with her driving. Ashley was eager to take her turn, and I wasn't complaining about sitting in the back between Heather and Bruna. No, not complaining at all. We didn't talk much, the back seat was noisy with the top down, but I leaned back and enjoyed the ride.\n\nDinner was good, and afterward we shared a couple of bottles of wine. It was good, and I was surprised at how comfortable it was to be around the four hotties, with no thoughts of getting in their pants interfering with the dynamics. \n\nI'm not sure why Ashley was so friendly to me, but I wasn't complaining. She made sure she was seated next to me at every opportunity, and was very touchy-feeley. When she took a break to go to the bathroom, Heather took her place, scooting up way too close for comfort.\n\n\"If Ashley gets to be too much, just let her know. She's always like that.\"\n\n\"Like what?\"\n\n\"You know. Up close and personal. She loves everyone. I bet she considers you a challenge.\"\n\nI almost spit up my wine, and she giggled. \"It's cool, Alex.\" She was already a little buzzed, and I almost leaped out of my seat, when she dragged her fingernails up the inside of my thigh. \"That really does nothing for you?\" she whispered.\n\nOf course I lied. \"I wish it did.\"\n\n\"Too bad. So sad. What a waste,\" she whispered, then kissed my cheek, abandoning her seat as Ashley entered the room, pouting that her place was taken.\n\nOnce Heather had moved, Ashley was right back at it, cuddling right up against me. \"We're gonna be best friends, Alex. Alright?\"\n\nHer open kindness, guileless look, and easy affection was hard to fight. \"Nothing I'd like better,\" I said.",
        "\"Good. We can never have enough best friends, right?\"\n\nActually, I thought the definition of 'best' friend kind of limited the quantity, but I didn't say so. I put my arm around her and gave her a squeeze. \"BFFs, honey. BFFs.\"\n\n* * *\n\nThe morning after I had moved in, I was introduced to the calendar. Bruna kept a huge calendar on the hallway wall, with all of our duties spelled out. Breakfast and lunch were fend for yourself, but dinner was a group task, each of us taking turns. We each had a day during the week, and alternated weekends. The calendar also listed cleaning chores, laundry duty, dishes, and any occasional tasks that came up. They were an organized group.\n\nThey kept me busy. Once I'd managed to stop the shower leak, WD-40 the back door, and chip away the paint that had frozen Heather's window, more and more tasks were added to the calendar for me to deal with. It ticked me off a little at first, but I have to admit, the girls were very appreciative, and once Megan took to helping me, passing me tools, and assisting wherever possible, I didn't mind it at all.\n\nThe end of the first week, there was a run on my tutoring, until I had to comment on the fact that I needed some time for my own studies. After that, the calendar was updated with my tutoring sessions, no more than an hour a night, and two hours on the weekend.\n\nIt was wonderful, and it was torture. By the start of the second week, it looked like I was going to be one of the 'girls'. They had no problem walking around in their underwear around me, and I saw Ashley's and Heather's breasts within the first forty-eight hours. They were definitely worth seeing.\n\nI had decided not to rock the boat, and play the part of the gay best friend, if that's what it took to keep a roof over my head. The only problem was, I didn't know how a gay best friend was supposed to act. I wasn't about to get all campy, so I played it cool, but overly friendly. I was quick to deliver a hug, or give a compliment. I commented on their outfits and makeup, paying more attention than I ever had previously. I kept myself immaculate, and dressed as nice as my wardrobe would allow me. It seemed to be working.\n\nThe girls were all so different, and yet each was adorable in her own way. Ashley and I were BFFs and she confided in me at every chance. She dated a lot, but hadn't had a real boyfriend since she'd started at here. She was only a freshman, the youngest in the house. She was all hugs, kisses, and happiness, which was nice.\n\nHeather, gorgeous Heather, was insecure. She looked like a model, nearly my height, ridiculously long legs, slender, with that long dark hair. She had smallish breasts, a B cup I had learned, while fulfilling my laundry duty. In a word she was stunning, but all she could talk about was all her perceived faults. A couple of bad relationships had her down on herself, which was ridiculous. I went out of my way to tell her how beautiful she was, what looked best on her, and what didn't. Within the week, she was showing up at the door to my room, naked except for panties, asking me which outfit she should wear. I wanted to tell her to stick with the one she was wearing. Instead, I proffered my advice, even going so far as to help pick out her shoes. The woman was a clothes horse, and had a closet bigger than my entire room.\n\nMegan was cool. She was a rehabilitated tomboy who spoke her mind. An only child, she was Daddy's girl, and appeared to crave male approval. Even if the male was apparently gay. She could talk cars, hunting, fishing, and the great outdoors. Like Heather, she was a sophomore, and still hadn't decided on her major, having changed twice already. She also loved driving the Galaxy, and offered to run errands for us any chance she got. Megan came from money, and anytime she took the car out she filled the tank, 94 octane. She even asked me about getting a lead additive, and bought a few bottles for every other tankful. I asked her about her red hair, and she looked embarrassed when she admitted she was a ginger, but got less grief about it when she dyed it darker red. Megan was the most conservative about walking around the house half-dressed, which was too bad. She had a killer body.\n\nThen there was Bruna. Once she learned that I'd spent a month at the mouth of the Amazon, she was eager to talk about Sao Paulo, her home town. I practiced the little Portuguese I'd picked up with her. She was a senior, and had lived in the house for three years. She had become the house leader by default, managing the finances and interaction with the landlord. Whenever I fixed something, she had me fill out an invoice which she sent to the owner. I don't know if she ever got paid for them, but she still insisted on it. Bruna had a nice figure, and an incredible ass. She kept her hair short, and wore glasses which made her look like a librarian. Her skin was dark brown, darker than just a tan, and her hair was curly and wild. She told me she didn't date, didn't want the involvement or distraction until she graduated. She was serious about her studies, and I'd already tutored her on four separate occasions within the first ten days.\n\nAfter three weeks, I realized how ridiculously happy I was. I had four new best friends, all of them gorgeous, and I was learning more about the female psyche than I had ever hoped to. They counted on me, and I was eager to please. I had all the physical contact that a man could hope for. And I was as horny as a three-peckered billy goat. \n\nIt was getting more difficult to keep my desires buried, as I found myself fantasizing about all of them at one time or another. I was beating off two or three times a day, trying to keep my cock from blowing the whole gig, with an unacceptable reaction to their presence and teasing.\n\nI was lying in bed, having dirtied a paper towel or three, trying to get some sleep, when Ashley walked into my room, stripped down to her panties, and climbed into bed with me. I was about to say something when I saw she'd been crying. I pulled her close and hugged her. \"What's wrong, bestie?\"\n\n\"How come all men are such jerks?\" she sobbed.\n\n\"Uh, present company excluded, I hope.\"\n\nShe snorted in a very unlikely manner. \"Alright. How come all straight men are jerks. Why can't they be more like you?\"\n\n\"What happened?\"\n\n\"That dick Jerry. I had turned him down three times for dates, but he kept insisting. I finally went along just to get him to leave me alone. So we go out for dinner, not even a good dinner, just Denny's. Then he pulls over and asks me to blow him on the way home. When I laughed at him, he tried to make me.\"\n\nI felt my blood pressure rising, and probably squeezed her a little too tightly, from the way she whimpered. \"You stopped him, I hope.\"\n\n\"Fuck yeah. I'm not some tramp. I grabbed him by the balls and squeezed until he begged me to stop. Then I had to walk home almost two miles. My feet are aching, I'm freezing, and I'm sick and tired of all these assholes that think if I agree to a date, they get to fuck me.\"\n\n\"What's this Jerry's last name?\" I asked.\n\nShe shook her head, cuddling in close. Her hands and feet were like ice cubes. \"Don't worry about it, I took care of it. Besides, he's a pretty big guy.\"\n\nI was pissed that she thought so little of me. \"Nobody's big enough to mess with my best girl. Nobody. What's the asshole's last name?\" I demanded.\n\n\"Carmichael. Jerry Carmichael.\"\n\nI pulled her close, rubbing her feet with mine, kissing the top of her head. \"I'll take care of asswipe Jerry. Next time, give me a call. I'll come and get you.\"\n\nShe scooted up the bed, and before I knew it, she was kissing me. It took a huge amount of effort not to respond. She eventually backed off, sighing. \"Nothing?\"\n\n\"Don't be silly. Kissing you is never nothing. I love you, Ash.\"\n\nShe sighed again, cuddling in close. \"You know what I mean. Don't you ever think about switching sides? Us girls could use a guy like you for real.\" Her hand moved down to my underwear, and slid inside. Fortunately, her fingers were still ice cold, and I'd just finished jerking off twice, so no reaction.\n\n\"Ashley, don't,\" I whispered, but I didn't push her away. I hated rejecting her at all, but it was only the second week of February, and I couldn't afford to blow my cover. I still had three months to go before the end of the semester.\n\nHer hand kept rubbing for a few more seconds, tugging slightly, but when she got no response she pulled back. \"Why couldn't you at least be bi?\"\n\nI hugged her close, brushing her hair back, so it wouldn't tickle my nose. \"If I was going to be bi for anyone, it would be you, sweetie,\" I whispered. \"Now go to sleep, and everything will be better in the morning.\n\nShe gave me a peck on the cheek, then rolled away onto her side. I cuddled up behind her, spooning, and wondered how I got myself in this odd predicament.\n\nI woke to a feeling I hadn't had in a long time. Far too long. I lifted the covers, and found Ashley stroking my erection. She grinned up at me, her hand still moving. \"I think he likes me,\" she said.\n\n\"It's morning wood, baby girl. That's all.\"\n\n\"Uh-uh. I don't think so. At least he doesn't think so.\" She leaned down and licked my cock.\n\n\"Ashley . . .\"\n\n\"Just lay back and close your eyes, Alex. Pretend it's one of the boat boys down in Brazil. I mean, it's just a blow job, it could be anyone. Right?\"\n\n\"But it's not, Ash. It's my best friend. We shouldn't be doing this.\"\n\n\"Please?\" she begged sweetly, before taking me in her mouth. I couldn't help but groan, and she seemed to take that as encouragement. Her head started bobbing up and down, her talented tongue teasing me at the end of each stroke. The girl could certainly give head. \n\nI chuckled, and she looked up, her eyebrows raised in question, as her mouth continued pleasuring me.\n\n\"You're good. Very good.\"\n\nShe lifted up grinning, her hand stroking me. \"Really? Cause I always heard that men gave the best blowjobs, since they know what they like.\"\n\n\"No, sweetie. Trust me, you are very good at that. But we shouldn't.\"\n\n\"Why not? You like it, right? It doesn't disgust you, does it? Getting blown by a woman.\" Her hand kept stroking me, as she spoke.\n\n\"No, you don't disgust me, not at all. It's just . . . wrong. What would the others think? Why would you even want to do it? It's not like we're going to have sex.\"\n\nShe gave me a long deep suck, before pulling away with a loud pop. \"The others would be jealous as shit. As for why, I like doing it. I don't expect you to return the favor, and I'm not going to ride you into the sunset. It's just a little BJ between friends. Best friends, remember?\" She grinned, then started sucking again, looking up at me anxiously, like I was going to stop her.\n\nI tried to fight the feeling, thinking of the most disgusting images possible, but it wasn't working. I couldn't hold any one image in my head long, and the girl was doing a fantastic job. I had to stop her somehow.\n\n\"I've gotta pee,\" I told her.\n\nShe pulled away pouting. \"No you don't. You're trying to get rid of me.\"\n\n\"No, I do. I really do. That's why I have morning wood.\"\n\nHer hand had tightened around my cock, stroking me vigorously. \"Be honest with me, Alex. You don't have to lie. If my sucking you bothers you that much, just say so. I'm a big girl. I'm used to rejection.\"\n\nDamn, she knew how to get to me. I grabbed her wrist, stopping her action. \"I do have to pee, badly. Let me use the restroom, and I'll come back to bed.\"\n\n\"Promise?\"\n\n\"I swear. It does feel nice.\"\n\nShe grinned, and sat up, her big tits bouncing sweetly. I noticed she was naked except for her panties. \"Alright, but hurry back.\"\n\nI ran out to the hall, wearing only my underwear, by cock sticking out in front of me. I hoped nobody would notice. In the bathroom, I managed to squeeze one off quickly, before taking a leak, washing my crotch, and brushing my teeth. I was only gone a couple of minutes.\n\nAshley pouted when I returned to the bedroom, my stiffie gone. \"Take off your underwear,\" she said. While I did, she removed hers, and a few seconds later we were naked in bed.\n\nI had hoped that by finishing in the bathroom what she'd started I'd be able to resist her. It turned out that was a foolish hope.\n\n\"Close your eyes, and lean back. Pretend I'm anyone you want,\" she said, and then she had my soft cock in her mouth, sucking, while her devilish hand played with my balls. \n\nIt had been way too long, and my cock betrayed me almost instantly, swelling for her, and then growing harder. It was only a couple of minutes before she was giving me one of the best blowjobs of my life. I reached down and stroked her hair, while I gave up all resistance.\n\n\"God, you're good,\" I confessed.\n\nShe pulled away, and then she was kissing me, while her hand continued stroking. \"Do you want to try to have sex with me? Maybe you'd like it.\"\n\n\"Please, Ashley. I can't.\" I wanted to. I REALLY wanted to, but it would ruin everything.\n\n\"You . . . you could put it in my butt. Pretend I'm a guy.\"\n\nI lifted her chin, and kissed her softly. \"I could never pretend it was anyone but you.\"\n\nShe grinned. \"Even when I'm sucking you? You don't imagine I'm some hard bodied young guy?\"\n\n\"No Ash, I don't. I enjoy it, and think how wonderful you are, and how you deserve so much better than this. Someone who can love you back, totally.\"\n\n\"I think you'd like it. I'm good. Really, really good.\"\n\n\"I bet you are. But we're not going to have sex.\"\n\nShe pouted for a second, then smiled. \"I still get to finish blowing you, don't I?\"\n\n\"If you want to, I'd like that.\"\n\n\"And you won't be pretending it's someone else?\"\n\n\"Not in this lifetime.\"\n\nShe gave me a quick kiss, then returned to sucking. I imagined what it would be like to fuck her. She had an incredibly sexy body, and she was certainly eager enough. I bet she'd be a lot of fun. I especially loved how much she seemed to enjoy oral. \n\nIt was only a few more minutes before I was warning her, \"Close, I'm close.\"\n\nShe didn't pause, didn't pull away. She kept on sucking until I groaned my release into her mouth. She sucked me through the finish, and was gentle afterward. Then she climbed up the bed, and kissed me deeply. Her mouth was still coated in my cum. I almost pulled away, but realized that would blow everything. I couldn't be that disturbed about tasting cum, and be gay, right?\n\nThe endless kiss finally faded, and she scooted down a bit, and hugged me. \"That wasn't so bad, was it?\"\n\nI chuckled, holding her. \"No. Not bad at all.\"\n\nShe hummed her pleasure, cuddling in close. \"Good. There's more where that came from.\" She giggled. \"God, that felt naughty. Was I your first girl?\"\n\nI could have lied, but decided not to. \"No, but you were the first I enjoyed that much. That's for damn sure.\"\n\n\"We gonna do this again?\" she asked, her fingers tracing little circles on my chest. I was a little distracted by the sound of someone moving around outside the room. I was slow to answer. \"Please?\" she said.\n\n\"Only if I can do something for you. I'm feeling guilty.\"\n\nShe stiffened. \"You don't have to. I mean, if it bothers you . . .\"\n\nI reached down and gave her butt a squeeze. \"I'm not going to lick your icky slit,\" I said, teasingly. \"That's just gross. But if you want, I'll give you the best back massage you've ever received.\"\n\nShe laughed as I pulled away, leaving her on her belly. \"I think I can live with that,\" she said.\n\nI wasn't lying about the best back massage. In my eight years of schooling, I'd had the opportunity to take a lot of electives. Three years earlier I'd taken two courses on massage. I got A's in both, and took the lessons to heart, practicing often. My partners were always happy. Often, ecstatic.\n\nAshley was not an exception. After ten minutes she was putty in my hands. After twenty, she swore she'd died and gone to heaven. Thirty minutes in, she was on her back, and the massage had turned sexual. I couldn't help myself. I had a beautiful, willing naked girl in my bed.\n\nI was massaging between her legs, and she was moaning enough that I had to keep on hushing her. When I finally made her come for me, I had to cover her mouth with my other hand, so she wouldn't alert the whole house.\n\nI brought her down easy, caressing her softly, until she was relaxed again. She opened her eyes and reached between my legs. Fortunately, coming twice that morning had left me limp.\n\nShe pouted cutely. \"Damn, Alex. How can you do that to me, and not get excited?\"\n\nI chuckled, teasing her nipples. \"Training.\"\n\nShe stretched languidly, then sat up. \"Yep. We're definitely going to be doing that a lot more often. I figure one of those massages is worth at least a couple of blowjobs.\"\n\n\"You liked?\"\n\n\"Are you kidding? That might be the best sex I ever had, and I never even got fucked.\"\n\nI got a big kiss, then she picked up her clothes and walked out of my room naked as a jaybird. I hoped nobody was in the hall to witness it.\n\nOver breakfast, Bruna quizzed Ashley on where she'd been.\n\n\"You weren't in your room. I was worried that you never came home. You know you're supposed to call if you stay out all night.\"\n\nAshley didn't even look up from her cereal. \"I was here. I had a rough date last night. It really sucked, so I slept in Alex's room and he took care of me.\"\n\nI almost spit up my orange juice when she said that.\n\nHeather reached out and grabbed Ashley's hand. \"I'm so sorry to hear that, honey. At least you have us to turn to. How are you feeling this morning?\"\n\n\"God, so much better. Alex gives the best massage in the state. You're gonna have to get him to give you one.\"\n\nHeather blushed, but didn't say anything.\n\nMegan, on the other hand, grinned. \"I wouldn't mind getting one. What's his price?\"\n\nBefore Ashley could get me in any more trouble, I spoke up. \"Do my dishes, and we'll call it square.\"\n\nMegan got up and checked the calendar. \"Tomorrow?\"\n\n\"Sure,\" I said. \n\nShe took the marker down and updated the calendar. Great. Now I was another chore.\n\n* * *\n\nAshley's bad date was still on my mind that day. With my access to the school computers, it wasn't difficult to track down the asshole Jerry Carmichael. With a list of his classes in hand, and his picture from his profile, I found him leaving the second lecture. \n\nI walked up to him as he turned down the sidewalk. \"Jerry, got a minute?\"\n\nHe looked confused for a minute, trying to place me. \"Sure, I guess.\"\n\nI matched my pace to his, walking along beside him. \"You had a date last night. Ashley. You owe her an apology, and if I ever hear about you treating another girl like that, I guarantee you won't graduate.\"\n\nHalfway into my statement, he slowed then stopped, turning toward me. I could see he was angry. That was good, I hoped he started something. \"Who the fuck are you to tell me what to do?\"\n\n\"I'm a friend of Ashley's, and a teacher here. I can ruin your life, permanently. Anymore stupid questions, asshole?\"\n\nHe was slow to respond, then I could tell he was reconsidering his attitude. \"Listen, I don't know what she told you, but it wasn't like that. She chose to get out of the car and walk. I even tried to get her to reconsider.\"\n\n\"You didn't try to make her give you a blowjob? After a lousy fucking dinner at Denny's?\"\n\nOl' Jerry's shoulders slumped. \"I . . . I didn't make her. I guess I encouraged her, but she didn't have to be such a cunt about turning me down.\"\n\n\"You call her a cunt again, and your GPA drops a full point, understand?\"\n\n\"Shit, I'm not gonna mess with her. I don't need to chase someone who says no. I figured it was over. No more trouble, I swear.\"\n\n\"Fine. If you see her, you will apologize, and leave her alone. This can end here, but if I hear anything bad, I'll make it my life's mission to fuck you over so bad, you'll wish you'd never been born. Are we understood?\"",
        "\"Yeah. I swear it wasn't like that. It was just a mistake, alright? I won't bother her again, except to apologize if I see her.\"\n\n\"Good. Have a nice day.\"\n\nDid I need to do that? No, probably not, but I felt a whole lot better afterward. Ashley was a sweet girl, and deserved better.\n\nThen it was back to office for me. I had a shit-load of papers to grade, and it was hard for me to get anything done at the house, the way those women kept me busy.\n\n* * *\n\nAshley was serious about making it a regular thing. That night she came to my bed around midnight, naked, waking me. She'd been drinking, and was a little tipsy. Before I could say anything she was under the covers blowing me. \n\nI hadn't jerked off and she had me hard in moment, and it wasn't long before I was coming in her mouth. She climbed out from under the covers, grinning, then burped indelicately. She giggled and kissed me, evidence of her actions still in her mouth. \n\nWhen she was done tickling my tonsils, she rolled onto her side, tugging my arm so I'd cuddle up to her. \"Love you, Alex,\" she mumbled sleepily. \"I'll get my massage in the morning.\"\n\nYeah, life was getting stranger and stranger. \n\nIn the morning, I got another blowjob, and she got a half-hour massage with a happy ending. She asked me if I didn't want to fuck her, but I still had to say no. We were already way over the limit as it was. I was afraid of what would happen if the house found out what we were doing. \n\n\"Please don't tell anyone about this,\" I said, when we were getting dressed.\n\n\"About what?\" she asked\n\n\"You know, the blowjobs.\"\n\nShe shrugged. \"OK. It's not that big a deal, but it you want, I'll keep it our secret.\"\n\n\"Thanks.\"\n\n\"You gonna get Megan off when you massage her? She could really use it. I don't remember the last time she had sex.\"\n\n\"I don't know. I guess I'll have to see how it goes. She might not be comfortable with me touching her.\"\n\nAshley laughed. \"Oh, she'll be comfortable alright. She's got a thing for our guy. I think she wants a shot at turning you straight.\"\n\n\"You're kidding, right?\"\n\n\"No way. We talk. I think they'd all do you in a heartbeat. Even Bruna, and we thought she was asexual.\"\n\nGreat. That's all I needed.\n\nAnother day in the trenches, an hour tutoring Heather, and a couple of tasks to take care of around the house. My days were the busiest they'd been in longer than I could recall. Funny thing was, I didn't mind. I was feeling pretty good about everything.\n\nAfter dinner, Megan and I went back to my room. \"How do we do this?\" she asked nervously.\n\n\"You strip down to what you're comfortable with, and lay on the bed on your belly. I don't have any decent massage oils, so it's going to be dry. If masseur becomes one of my regular duties, I guess I'll have to invest in some decent massage oil.\"\n\nWhile I was talking she stripped down to her panties. I saw her hesitate, holding the sides. \"Should I leave them on?\" she asked, blushing. Damn, she was adorable.\n\n\"You can. I can be more thorough if you don't.\"\n\nShe took them off, and I got to see her body for the first time naked. She was incredible, not as full figured as Ashley, but exquisite as she was. She laid down on the bed, and I stripped down to my shorts, before straddling her legs. \"Now just relax. I'm gonna start slow. Tell me if anything's too uncomfortable.\n\nShe never complained, as I did my best under the circumstances. After about fifteen minutes, I knew she was thoroughly enjoying it. I didn't miss anything, including spending a few minutes on her perfect ass.\n\nWhen I stopped, she sighed. \"That was wonderful. Are we done?\"\n\n\"We don't have to be, I can do your front.\"\n\nShe turned onto her side, and I saw her looking down at my waist. Fortunately I wasn't full erect, but if she could see inside my boxers, she'd have known she was getting to me. \"It won't bother you?\" she finally said.\n\n\"Not at all.\"\n\nShe rolled onto her back, and I started on her arms, up to her shoulders, then down her front. I gave her breasts a little attention, but not too much before working down her sides. She started out watching me, but soon closed her eyes and relaxed. I went all the way to her feet, and back up again. On the return trip, I opened her legs and rubbed up the insides, until I was brushing the edges of her pussy. She had a light patch of reddish hair above it, confirming she was a ginger.\n\n\"Tell me to stop if you're not comfortable,\" I told her softly, as I cupped her mound and rubbed her.\n\nHer moan was anything but a stop.\n\nI stretched out beside her, and kept rubbing, gently teasing her open, brushing her clit, until I started working on it more seriously.\n\n\"Alex . . .\" she whispered.\n\n\"Should I stop?\" \n\nShe hesitated a second, then shook her head slightly.\n\nI leaned over and kissed her lips softly. \"Let me make you feel good,\" I told her.\n\nShe moaned again and opened her legs wider.\n\nIt took me less than five minutes to get her off. It wasn't huge, but she responded beautifully. I kept playing with her. \"Another?\"\n\n\"Please.\"\n\nI alternated fingering her, with rubbing her clit. Between her G-spot and clit, it wasn't long before she was squirming, gasping, ready to come again.\n\n\"Not yet,\" I told her.\n\n\"Please, Alex,\" she groaned.\n\n\"No, not yet. Soon, but not yet.\"\n\nShe was so sexy, biting her lip, trying to resist coming for me. When I could tell she was straining, I finally gave in. \"Come for me, beautiful.\"\n\nWithin seconds she was bucking under my hand, crying out as she came for me explosively. I calmed her down, touching her lightly, caressing her smooth skin. When her chest stopped heaving, I leaned in and gave her another soft kiss. She grabbed my head with both hands, and her tongue filled my mouth. I didn't pull away, letting her give free rein to her feelings, while I reached between her legs and teased her a little more. I was surprised when she came almost instantly, moaning into my mouth.\n\nWhen she released me, she was blushing. \"I'm sorry,\" she said.\n\n\"Why?\"\n\n\"For kissing you like that.\"\n\nI chuckled and kissed her again. \"I'm not dead. I like your kisses Megan.\"\n\n\"But your gay!\" she said.\n\n\"I'm not going to fuck you, honey, but that doesn't mean I can't enjoy a kiss from my friend.\"\n\n\"But what you did to me, how you made me come . . .\"\n\n\"Did you like it?\"\n\n\"Of course! But\u00e2\u20ac\"\"\n\n\"But what?\"\n\n\"I mean, how could you do that? How could you make me come so easily, so hard? Isn't it, I don't know, weird? Touching a girl, there, like that?\"\n\n\"Sweetie, it was just a massage. I wanted to give you a little pleasure. That's all it was, alright? Don't read anything more into it than that.\"\n\nShe nodded slowly. \"Does that mean we could do that again, sometime?\"\n\n\"I don't see why not? We're friends now, right?\"\n\n\"I think so. I hope so. I mean, yeah, we're friends, good friends.\" She was stammering her reply, she was so nervous.\n\nI caressed her body slowly, running my hand down her side. \"Relax, Megan. Don't get worked up over this. We're friends, that's all. I wanted to make you feel good, and I did. We're cool.\"\n\nHer hand slowly rose to rub my side. \"Can I, I mean how can I make you feel good, Alex?\"\n\nI laughed, kissing her shoulder. I ran my hand down between her legs, and rubbed her softly. \"You did. Surrendering like that, coming for me. That was beautiful. It felt great to make you come for me.\"\n\n\"But you don't want to fuck me.\"\n\n\"No, beautiful. This isn't about sex. This is just me making you happy, OK?\"\n\n\"I'd let you,\" she said softly.\n\nI leaned over and looked into her eyes. \"God, don't you think I would, if I could?\"\n\n\"You could try.\"\n\n\"No, baby. That isn't us. It's not me. This is all, alright?\"\n\nShe nodded. \"Hold me, Alex?\"\n\nI pulled her into my arms, and hugged her, rubbing her back, kissing her forehead.\n\nShe chuckled. \"This sucks, you know?\"\n\n\"What sucks?\"\n\n\"This. You're the first guy in a long time I've really wanted to do it with, and you're fucking gay. It sucks!\"\n\nI laughed, giving her a squeeze, then planting a kiss on her. She grabbed me again, kissing me hard, looking into my eyes. Then she eased back, pouting. \"Nothing?\"\n\n\"I wouldn't call it nothing. That was a nice kiss. And I like holding you.\"\n\nShe cuddled up against me, sighing. I prayed she wouldn't reach down below. I was hard for her, but luckily the covers hid that from prying eyes. I pulled them up a little higher just in case.\n\n\"Should I go?\" she asked after a quiet, comfortable silence.\n\n\"Soon. I've still got things to do, and it's too early to go to sleep. You're always welcome to come back.\"\n\n\"Could I spend the night, like Ashley?\"\n\n\"As long as you understand we're just friends, I think I'd like that.\"\n\n\"Me too.\" She slid out of the bed, giving me another eyeful of her outstanding body. \"I'll be back later, if it's OK.\"\n\n\"It's always OK, Megan. Friends, right?\"\n\nShe smiled. \"Yeah. I mean, after that? I hope we are.\"\n\nOnce she's left, I took care of the aroused fellow below my belt, and worked on my latest project. The old fireplace's damper had stuck shut, according to Bruna it hadn't worked in two years. The ash dump which could be cleared from outside was full of solidified gray gunk. A couple of hours of effort, and the damper was moving freely, but I still hadn't cleared out all the petrified ash. It was going to be a two day task. At least I was caught up on most everything else.\n\nIt was a task I really wanted to finish. The house was old, and had lots of drafts. It was difficult to keep the temperature above 70 in the winter. I thought that a warm living room would be nice, if a bit cramped with all of us in there. It wasn't that big a space. \n\nI was exhausted by the time I finished, and took a long shower to clean off all the sweat and gunk. It was also a good time to squeeze one off, thinking about my lovely roommates. Returning to my bedroom, I found I had a visitor. Megan was back.\n\n\"You don't mind?\" she asked, as I entered my room.\n\n\"Never,\" I assured her, as I dropped the towel, and climbed into the bed naked. I pulled the covers up nice and high, the bedsheet, the wool blanket, and the down comforter that together kept me toasty. It was nice to have the bed pre-warmed for me.\n\nShe rolled half on top of me, her slender arm reaching across my chest. I rubbed her back comfortingly and determined she had on panties and nothing else. That was perfectly fine by me.\n\n\"Did Ashley really give you a blowjob?\"\n\nDamn it. I was going to have to kill that girl.\n\n\"I was sleeping. I had morning wood. She attacked me,\" I confessed.\n\n\"She says that was the first time. Afterward, she didn't have to do too much attacking.\"\n\n\"You know I'm going to have to strangle the little troublemaker.\"\n\n\"So it's true?\"\n\n\"Yes.\"\n\n\"Then you're not gay. I mean not totally.\"\n\n\"It was just a blowjob, Megan. I'm a guy. I'll stick my dick through a hole in the wall, and I don't care who sucks it, as long as I get off. That's all it was, a blowjob. I didn't, couldn't do anything to her.\"\n\n\"Except that massage thing.\"\n\n\"Please, I'm uncomfortable talking about this. Can we drop it?\"\n\nShe sighed, and went quiet for a bit. Then I felt her hand sliding down my stomach, coming to rest on my soft cock. \"You got hard for her. How come you don't for me?\"\n\nI couldn't tell her it was because I jerked off twice in the last couple of hours, mostly thinking about her. \"She sucked me. I just relaxed, and let my mind drift, concentrating on the feeling. She gives a great blowjob. So I got hard and she got me off. That's all it was.\"\n\n\"I've only done it twice. I won't be very good,\" she said, her hand still misbehaving.\n\nI pulled her hand away, and kissed her softly. \"We're not going to do this. I told you, my bed is yours, as a friend. That's all.\"\n\n\"Don't you think I'm pretty?\"\n\n\"You're beautiful. For a girl.\"\n\n\"Could I give you a handjob?\"\n\nI couldn't help but chuckle. \"You're not going to leave this alone, are you?\"\n\n\"I want to do something for you. After that massage, I feel like I owe you. That was incredible.\"\n\n\"Do you want to know what I'd really like?\" I said.\n\n\"Yeah.\"\n\n\"I'd like to fall asleep, holding you. That's what I want.\"\n\n\"That's all?\"\n\n\"That's a lot, if you ask me.\"\n\nShe finally accepted, and that's what we did. Although God knows I wanted to do a hell of a lot more.\n\n* * * \n\n\"Megan, don't,\" I muttered, waking slowly, feeling her hand stroking my erection.\n\n\"Relax, Alex. We're not doing anything. I'm just going to make you feel good, like you did me.\"\n\n\"We shouldn't. It's not right,\" I said, too lazy, and feeling too good to stop her.\n\nShe was cuddled up to me, her hand moving slowly and easily up and down my cock. It felt great, comforting, really. I sighed, and let her continue.\n\n\"Happy Valentine's Day, Alex,\" she whispered, kissing my chest.\n\n\"Happy Valentine's Day, Megan.\"\n\nShe started moving on top of me, and all my alarms went off. \"What are you doing?\"\n\n\"I'm going to fuck you now. I bet you like it.\"\n\n\"No you're not. No way.\"\n\nShe had managed to straddle me, and was aiming my cock between her legs, while I tried to push her away. \"C'mon Alex. Give it a try. Please? I bet you just haven't met the right girl yet. It doesn't have to mean anything.\"\n\n\"Stop it, Megan,\" I snapped, although it was the opposite of what I wanted. \"Don't do this.\"\n\nShe stopped moving, and settled down. \"You really don't want to?\"\n\nI pulled her down to my chest, wrapping my arms around her. \"You're an incredible woman, Megan. Incredible. But we can't do this. I won't.\"\n\n\"How do you know you won't like it if you don't try?\"\n\nI didn't reply, holding her, running my hands up and down her back.\n\nI felt her tense up. \"You have, haven't you. You've been with a girl.\"\n\n\"I have.\" Plenty. Not many anywhere near as good looking as the naked beauty I was holding.\n\n\"I'm sorry,\" she whispered, hugging me.\n\n\"Don't be. I am what I am. I appreciate the offer, believe me. Who knows? Maybe with you it would be different. I love being with you. But now, like this, is not the time for experimenting.\"\n\n\"But maybe? Someday?\"\n\nHell, once I was in the final weeks of classes, and wasn't so desperate for a roof over my head, it would be more than worth taking the chance. \"If I was going to try, you'd certainly be worth the effort.\"\n\n\"Can I get you off?\" she asked.\n\n\"No fucking,\" I said.\n\n\"Alright.\"\n\nShe moved down the bed, and gave me a passable handjob, with a little oral play involved. Just a bit, teasing, licking, kissing, and a few nice sucks. It took a while, but she managed to get me off, making a mess on my belly, while she giggled.\n\n\"That wasn't so bad, was it?\" she asked, as she sat up, looking for something to clean up the mess with.\n\n\"Paper towels, under the bed,\" I said.\n\nShe retrieved them and cleaned me up, placing a last few affectionate kisses on my cock. \"See, girls aren't all bad.\"\n\n\"I never said they were. That was nice.\"\n\nShe grinned, and planted a kiss on my lips. \"Alright. No fucking, but I think I'll be doing your dishes a little more often. We can still do the massage, and you'll let me get you off?\"\n\n\"Sounds like a deal.\"\n\nShe gave me another big kiss, then climbed out of my bed, into the cool morning air. I watched her nipples harden, and pulled the covers over my waist, before she could see me get excited over her. \n\n\"What are you making for dinner tonight?\" she asked.\n\nHonestly, I'd forgotten that it was my turn to cook, and I would never have remembered it was Valentine's Day, if she hadn't told me so. \"It's a surprise. How many people will be here tonight?\"\n\n\"Just you, me, and Bruna. Ashley and Heather have dates.\"\n\n\"And you don't? That doesn't seem likely.\"\n\n\"You know I don't date often. Anyone I went out with tonight would have expectations I'm not willing to deliver on. I don't screw around randomly,\" she said, while dressing. \"I've only been with three guys. All long term relationships.\" She turned and gave me a quick little kiss. \"You could have been number four. You still could be.\"\n\n\"Why? I don't get it.\"\n\n\"That's cause you're not very smart about girls.\" She grinned, and gave me a princess wave, before leaving my room.\n\nWomen.\n\n* * *\n\nI only had two classes on Thursday, the first at eleven. It gave me some time to finish cleaning out the damn fireplace. I thought it would be a nice surprise. I manage to complete it with time to spare, and put some thoughts into what I wanted to do for dinner.\n\nI decided to do something special for the occasion. My last class on Thursdays ended at three. I did a little shopping, and by four-thirty the kitchen was a shambles, but I was making progress. I wasn't limited by their tastes, none of them were vegetarians, and for the most part, they typically ate what was made. \n\nIf they didn't, I figured I'd have lunch and dinner for the next day. I was making what I liked, and hoping for the best.\n\nI had visits from all of my housemates, and it was funny to see how Ashley responded. \n\n\"Damn it! I'm getting taken out to Olive Garden, and I'm gonna miss this?\" \n\nI laughed, giving her a big squeeze. \"I'll make you a plate, and you can have it tomorrow, if you don't mind leftovers.\"\n\nStarting at six, I posted a sign on the door that the kitchen and dining room was off-limits until seven. Then I went into overdrive.\n\nWithout a minute to spare, I completed my preparations, and opened the door to Megan and Bruna. The table was still set for five, so that Heather and Ashley could share a little in the event, should they decide to come home at all.\n\nI heard the appreciative cries as Megan and Bruna entered the dining room, seeing the surprise. Each place setting had a Valentine's Day card, and a single red rose. A bouquet of yellow roses was set in the middle to the table. The wine was open and breathing, and little red cut-out hearts were scattered across the table top.\n\nI escorted Bruna to her seat, pulling out the chair for her, and kissing her on the cheek. \"Happy Valentine's Day,\" I told her. I pulled the box out of my pocket and placed it in front of her. Then I sat Megan at the table on the opposite side of my chair from Bruna, and did the same.\n\nThe rings were simple silver infinity rings. Not much to them, but it was the thought that counts, right? The girls opened their boxes, and read their cards. I didn't expect the tears from both of them.\n\n\"I didn't get you anything,\" Bruna said, slipping the ring on her finger.\n\n\"Don't be silly. You gave me a house to live in, and friendship to treasure. That's all a guy could ask for.\"\n\nMegan's response was much simpler. She grabbed me and pulled my head down for a big kiss. \"Yes, nothing would make me happier than to be your valentine.\"\n\nI gave her a hug. \"I hope you guys are hungry, because we have a lot to eat,\" I told them.\n\nI retrieved three small bowls of homemade clam chowder. Maybe not the most romantic dish in the world, but what can I say? I love the stuff. It was full of big clams, Idaho potato squares, heavy cream and butter, and just enough celery and onion for flavor. Pan toasted croutons made from a fresh baguette completed the dish. I only gave us each a small bowl, and refused them seconds. \n\n\"There's plenty for tomorrow, but I'm not going to let you fill up on the appetizer.\"\n\nThe pepper-encrusted pan-seared inch and a half thick tenderloins had been resting in the warm oven, covered in foil. I plated them, with the decadent mashed potatoes - more Idaho potatoes, heavy cream and lots of butter. A small serving of roasted asparagus finished the main entree.\n\nWe were halfway through the meal, when I heard the front door slam. Ashley came crashing into the room. \"Well that sucked!\" she said, then stopped, staring at the table.",
        "I got up and escorted her to her seat, which had her card, rose, and ring box on her plate. \"Happy Valentine's Day, Ash,\" I said, giving her a peck on the cheek. \"Have you eaten?\"\n\n\"No,\" she said softly, opening up the ring box.\n\n\"Give me a minute, and I'll have a plate for you.\"\n\nI cut off a thick strip of the remaining cooked whole tenderloin, and seared it on high for just a minute. I added the mashed and asparagus, and had her dinner in front of her after just a couple of minutes.\n\n\"How did you know?\" she asked.\n\n\"I didn't. I made enough for everyone just in case. Sorry, but no chowder for you, unless you want some later.\"\n\nShe got up out of her seat and gave me a big hug. \"You're the best.\"\n\n\"Hardly, but I'm hoping that this will make up for what looks like a lousy date.\"\n\n\"No shit. I got one lousy carnation, then he wanted to go back to his place before dinner. He said he wanted to pick up something, but all he really wanted to do was get my clothes off. What a dick. After fighting him off for about fifteen minutes, I told him to take me home.\"\n\nShe took a bite of her steak, closed her eyes, and looked like she had an orgasm. \"Oh my God!\" she said, mouth still half full. \"This is the best steak EVER!\"\n\nI could only chuckle. \"You ladies deserve no less.\"\n\nWhile we finished eating, we talked about our worst valentine days. All three of them had funny stories about dates turned bad. When it was my turn, I explained that any Valentine Day spent alone was the worst, and that I was beyond happy to have them to share this one with. \n\nI kept the wine glasses full, which seemed to help put them all in a good mood. When the plates were clean, I cleared the table bringing out dessert. Julia's Fondant au Chocolat, her decadent cream-free chocolate mousse. My effort got full scores from my lovely tablemates.\n\nThey were in for one last surprise, and I left them to sip their wine, while I left them. In the living room, on the opposite side of the hall, I started a fire in the newly cleaned fireplace, before returning to them.\n\n\"Everyone had enough?\" I asked.\n\nMegan groaned. \"If I ate another bite, I would explode.\"\n\n\"Then it's time for you all to go upstairs and put on your pajamas. We're having an old fashioned slumber party in the living room.\"\n\nI cleared the last of the plates, and put away any remaining food, before running upstairs and putting on a pair of sleeping shorts. I still wasn't the last one to the living room, Megan held that honor.\n\nBruna and Ashley had put the couch cushions on the floor around the fireplace, and had broken out a bunch of blankets. Bruna was wearing a simple nightgown, Ashley had on a t-shirt, and not much else from the looks of things. Me, I had a magnum of wine in one hand, and a huge bowl of grapes in the other.\n\nIt was a blast. We drank and told stories. I mostly listened, while they chattered away. I kept the fire going, and was happy to cuddle with the girls, as we all fought for the space directly in front of the fire. After a couple of hours, and a second magnum of wine, we were all blitzed. We were feeding each other grapes, and lamenting the fact that even though it was a great Valentine's day, none of us had anyone special to spend it with.\n\nI don't know when the kissing started, or how it started. But I found myself reclining with my head in Bruna's lap, while I was fed grapes and kisses. I wasn't resisting. Maybe it was the wine. OK, probably it was the wine. That, the romantic fire, the barely dressed women, and the full belly. The kisses got deeper and deeper, longer and more passionate. Even Bruna was kissing me, and I don't think we'd ever spoken more than a dozen or so words that weren't about the house.\n\nAfter one particularly passionate kiss from Megan, which had her laying on top of me, she sat up and grabbed my cock. I was hard as a rock, no surprise there.\n\n\"I don't think he's gay,\" she said.\n\n\"Megan . . .\" I said, pushing her hand away.\n\nShe wasn't to be stopped, slipping her hand in my shorts. \"I'm serious. Maybe he thinks he is, but this doesn't lie.\"\n\nAny reply I might have had, was stifled by Ashley's lips. I moaned into her mouth, as my shorts were removed. Then she pulled away, looking into my eyes. \"You like girls,\" she said.\n\nAll I could do was nod. \"I love girls. At least the ones in this house. That doesn't mean\u00e2\u20ac\"\"\n\n\"You liked when I sucked you off, right?\"\n\nI nodded again.\n\n\"Megan says she got you off too. And you told her you've been with a woman before.\"\n\nI stifled a moan, as I felt Megan stroking my cock.\n\nBruna leaned over my face, smiling. \"It's Ok, Alex, to like boys and girls. You don't have to pick just one.\" She seemed so sincere, brushing my hair back from my face. \"It's OK,\" she repeated.\n\nI groaned as Ashley took me in her mouth. Then Megan was kissing me again. \"Tonight, Alex, you are ours. You're our Valentine. You said so.\"\n\n\"But Megan . . .\"\n\n\"No buts, Alex. Not tonight. Tonight, we get to love you.\"\n\nAny argument I might have had was eliminated when Ashley straddled me, and sank down on my aching shaft. I couldn't help but thrust up into her.\n\nMegan smiled. \"There, that's not so bad, is it? As good as any boy's butt, I bet.\"\n\nI looked down to where Ashley was rising up and down on my cock. She grinned at me.\n\n\"Admit it, Alex. You love us. I know you do. That's why it's good,\" Megan said.\n\n\"Best girls I've ever known,\" I said, reaching up and pulling her down for another deep kiss. \n\nAs soon as she was done, Bruna's face replaced hers. \"Me too?\" she asked cautiously.\n\nI drew her in for a kiss that seemed to go on forever. \"You too, house momma. I love you to.\"\n\nThen Ashley was climbing off of me, and Megan was taking her place. She was slower to accept me, gently lowering herself, until her full weight was on me.\n\nThere was movement under my head, and Bruna moved away, while Ashley took her place, holding my head in her lap, stroking my hair. \"This isn't so bad, is it?\" she asked softly.\n\n\"No.\"\n\nShe grinned. \"If you didn't like women, at least a little, you wouldn't be able to stay hard for us, would you?\"\n\n\"I guess not.\"\n\nShe was still wearing her t-shirt, but then she pulled it off. Her big breasts enveloped my face as she leaned over. \"Do these disgust you?\" she asked.\n\nI groaned as Megan started fucking me more thoroughly. \"No,\" I answered.\n\n\"Suck my titty, Alex. It's OK.\" Ashley guided her nipple to my mouth, and I gave up any resistance, sucking happily.\n\nMegan's motion stopped, and then her weight was gone, and cool air enveloped my wet cock. Then I felt movement again.\n\n\"Be gentle with her,\" Ashley whispered. \"It's been a long time.\"\n\nI looked down and Bruna was easing my cock into her pussy, eyes closed, head tilted forward. She was tight and it took her forever to settle down on my cock with a groan.\n\nAshley moved back, and Megan was leaning over my face, her tits over my mouth. When her nipple brushed my lips, I sucked greedily, while Bruna rocked back and forth on my hardness. \n\nThen Megan was kissing me. \"This isn't horrible, is it?\" she asked.\n\n\"No,\" I admitted. \"The opposite.\"\n\nShe smiled from ear to ear. \"Really? You like it?\"\n\n\"I love you all. It's wonderful.\"\n\nI got another quick kiss. \"Do you want to try something else?\"\n\n\"Like what?\"\n\n\"Lick me?\"\n\n\"Down there?\"\n\nShe nodded. \"Try it. Please?\"\n\n\"Only for a second, alright?\"\n\nShe nodded eagerly, then I watched her alabaster thigh pass over my head, and her pretty little pussy lowered over my face. I licked her tentatively, still playing the game. After only a few seconds she lifted up, looking down on me with concern. \"Horrible?\"\n\n\"No.\"\n\n\"Can we go a little longer?\"\n\nIn response, I pulled her down onto my mouth, and went to town, listening to her happy squeal.\n\nI felt another changing of the guard, and from the eager way she was fucking me, I knew it had to be Ashley.\n\nI grabbed Megan's ass cheeks in both hands, and lifted her up. \"I'm going to come soon,\" I gasped.\n\n\"Good,\" I heard Ashley respond, and then I was back to licking Megan.\n\nIt wasn't another minute before I was groaning into Megan's pussy, as I exploded into Ashley, thrusting upward, nearly unseating her.\n\nMy head almost exploded, and I saw black for a few seconds. When my senses returned, I was looking into three concerned faces. \"Are you alright?\" Megan asked.\n\nAll I could do was smile. \"I like girls.\"\n\nThey all laughed, hugging and kissing me. A few minutes later they had me hard again, and Megan was riding me, while Bruna settled down over my face. I was in heaven.\n\nThey took turns on me, keeping me pinned down, using me for their pleasure, but always sensitive to my needs. Bruna was riding me when my second finish approached. I pulled my face out from between Ashley's legs. \"Soon,\" I groaned.\n\nThere was a hurried discussion, and then Ashley was riding me again. It turned out that we were playing with fire. Neither Bruna or Megan were on the pill. Those two cuddled up to me, while we all watched Ashley ride me to my finish.\n\nMegan kissed my neck. \"You're not mad at us, taking advantage of you, are you?\"\n\nI shook my head, trying to last a little longer. I never wanted it to end. \"No. Love. You,\" I moaned.\n\n\"Come for me, Alex,\" Ashley insisted. \"Come, come.\"\n\nHer breathing was ragged, and I could tell she was close. I reached down and grabbed her hips, thrusting into her deep and hard. \"C-c-c-come,\" she gasped.\n\nIt was too much, and I hammered my cock home, coming as hard as I ever had in my life. It set her off, and she cried out, coming hard on my cock.\n\nI leaned back, exhausted, while she slowly dismounted. The little slut took me in her mouth and sucked me clean, before coming up and kissing me deeply.\n\n\"Happy Valentine's Day, Alex,\" she whispered, smiling.\n\n\"Best Valentine's Day ever,\" I replied.\n\nThey weren't done with me. We relaxed, cuddled, drank some more wine and talked. The big question seemed to be if this was going to be a onetime thing. I admitted I'd be happy if it wasn't. There was a lot of touching and teasing going on. Hand rubbing my cock, my fingers delving into three different pussies. Lots of titty play. It was all good. No, make that great.\n\nI was sitting up, with Megan in my lap, riding my hard cock, kissing me, when the door opened. Heather looked in and I saw the shock on her face. It was understandable, with her four naked housemates playing in front of the fireplace.\n\n\"What's going on?\" she asked.\n\nAshley jumped up, and grabbed her by the hand, tugging her into the room. \"Alex's not totally gay. He likes girls too. He just found that out tonight.\"\n\nAlright, I wasn't about to argue the point. Not with Megan riding my cock, and Bruna seated behind me, hugging me from behind.\n\nHeather appeared to be in shock, while Ashley undressed her. \"C'mon, Heather. You have to take a turn. You have to.\"\n\nI swear she looked like a zombie, as Ashley pulled her along, and Megan moved to make room for her. She was beautiful, tall slender, narrow waist, small breasts, just a hint of hips. Like friggin' fashion model, with that amazingly beautiful face. Heather lowered into my lap, and Ashley guided her home, while I held her. She didn't move, seated, my cock all the way inside her. She just looked into my face. \"You . . . you're not gay?\"\n\nI shrugged. \"I guess not.\"\n\nShe turned to look at Bruna and Megan. \"He can still stay, right? We're not kicking him out.\"\n\nMegan laughed. \"No, I don't think we're kicking him out. Now are you going to fuck or not? You're wasting some seriously good real-estate.\"\n\nHeather turned back toward me. \"You want to fuck me? You don't mind?\"\n\nI laughed, and with a huge effort, rose up and put her on her back. Then I started stroking into her, before kissing her lightly. \"Who wouldn't want to be with someone as beautiful as you?\" \n\n\"I'm not,\" she whispered, opening her legs wider.\n\n\"You are. Stop denying it. You're gorgeous.\"\n\n\"You think so?\"\n\n\"I know so. Now hush. I'm still trying to figure out how all this works.\"\n\nA lie, I know, but part of it was true. How do you work out a situation like ours?\n\nI don't know when I fell asleep, beautiful women draped over me. I know it was cold in the room when I woke, and I wriggled my way out from under all that delicious flesh, to build up the fire again. I kept looking back at the naked women sprawled around the room, and in spite of my antics, I was hardening. \n\nI had to choose, and it wasn't that difficult. I knew that Megan and Ashley would be regulars in my bed from that night on. Heather, I suspected would fall in step as well. Bruna was the mystery. So quiet, so reserved, so exotic looking. I crawled over to where she was lying, and stroked her dark skin. Such a beautiful girl, to live a self-imposed life of denial.\n\nMy touches turned into soft kisses, as I tasted her skin, caressed her soft flesh. I reached between her legs, and petted her carefully, opening her up, preparing her. I heard a tiny moan, and her eyes fluttered.\n\nI kissed her lips softly. \"I need you,\" I whispered.\n\nShe smiled and opened her arms and legs. I climbed between her legs and settled over her, slowly easing my cock inside of her tightness, taking my time, moving slowly until she was moist enough to accept me readily.\n\n\"Me?\" she whispered sleepily.\n\n\"You.\" I pressed my lips to hers, and felt her tongue brush my lips. I was in no hurry, tired, sore, but so damn happy. I fucked her slowly, in and out, no effort to do anything but plumb her depths. After a while, I felt her change, responding, moving with me, until she was trembling. Her fingers dug into my skin, as her hips moved in counterpoint to mine, more demanding. \n\n\"Come for me?\" I whispered.\n\nShe whimpered, nodding. \n\nI fucked her firmly, grinding into her at the end, until she gasped, and quietly climaxed. I slowed, and kissed her softly. \"Thank you.\"\n\nShe smiled and closed her eyes.\n\nI was still hard, and felt it was unlikely I'd come anytime soon. I looked around, and I saw that Ashley was awake and watching me. She smiled, and patted the space beside her. I laid down beside her and after a little acrobatics, I was holding her while fucking her from behind, on our sides. She giggled\n\n\"What?\"\n\n\"You're like a kid with a new toy.\"\n\n\"Best friggin' toy ever.\"\n\n\"Still BFFs?\" she asked, pressing her rear back to accept me.\n\n\"That and more.\"\n\n\"Pussy isn't such a bad thing, is it?\" she teased.\n\n\"This one isn't.\"\n\nShe was quiet, allowing me to fuck her easily. \"I bet that's it,\" she said.\n\n\"What's it?\"\n\n\"Why you can do it with us. We were friends first. I bet that's it. I know it is. You know what that means, don't you?\"\n\n\"No, what?\"\n\n\"Other girls probably won't do it for you. You're stuck with us. We're your friends, not any of those other sluts.\"\n\nI chuckled, turning her slightly, lifting her leg so I could penetrate deeper. \n\n\"Other girls are yucky,\" I said.\n\nShe reached down and touched where I was entering her. \"That's right. And don't you forget it.\"\n\nAfter that, we just enjoyed ourselves. When I got tired, I'd stop, and when I felt the urge, I'd stroke into her a few more times. I held her, tasting her skin, kissing her softly. She purred in my arms until she was sleeping. I don't know how much longer it was until I did as well.\n\n* * * \n\nThe noisy movement woke me. I cracked an eye, seeing my housemates neatening up the room. I was holding Megan, with no idea how or when that happened. I cupped her breast, enjoying the moment. She rolled over, facing me. I got a quick little kiss, and then she was pulling away.\n\n\"Stay,\" I pleaded.\n\nShe laughed at me. \"Ashley's right. You're just like a kid with a new toy. Get up, lazy bones.\"\n\nIt was difficult, but I managed to sit up. Then I was being hauled to my feet, and aimed toward the stairs. \"Up, shower, shave,\" I was told.\n\nI did as ordered, and the girls checked in on me a couple of times. It was obvious any hint I might have had of privacy was gone for good. Eventually I was kicked out of the shower, before I used up all the hot water. Ashley did the kicking, by getting in the shower with me, and forcing me out. \n\nEventually I was respectable again, and dressed. I had a bit of a headache from all the wine, and imagined I wasn't alone. Later I was to find out that while I thought I was getting them drunk they were doing the same to me, keeping my glass filled, while pacing themselves. Tricky, conniving little wenches.\n\nAt breakfast there were a lot of smiling faces. The kitchen had been cleaned, and I felt a little guilty remembering how I'd left it. We had steak and eggs for breakfast. The rest of the tenderloin sliced thin and shared, along with a huge bowl of cheese scrambled eggs. Heather gave me a big hug and kiss for her card and ring. \n\nAshley was the first to state the obvious. \"I guess this changes everything.\"\n\nI looked around and saw a lot of nodding. \"What?\"\n\n\"There's no way we're going to let you backslide again,\" Megan said.\n\n\"Backslide?\"\n\n\"You know. Batting for the wrong team.\"\n\n\"It's not like I've had a relationship in the last nine months. I haven't been batting for any team.\"\n\nBruna spoke up, and everyone got quiet. \"Do you want to choose?\"\n\n\"Choose?\" I asked, my voice rising two octaves.\n\n\"Us. Do you want to choose one of us?\"\n\nI looked around. My BFF Ashley, stunning Heather, wild Megan, quiet steady Bruna. \"I can't. I won't.\"\n\nBruna smiled and stood up, striding to the calendar. I looked around and saw the others were all grinning. I was afraid I'd screwed things up. Bruna started writing. \"It's best this way anyway. Monday, Ashley. Tuesday, Heather.\" She looked back at us. \"You want Wednesday or Thursday, Megan?\"\n\n\"Thursday. I got that seven o'clock seminar every other Wednesday.\"\n\nI sat, stunned while they split up my week. Friday and Saturday were date nights, to be shared with whoever was available. Sunday was my day of rest. I was on the calendar, and I had a feeling my life was never going to be the same.\n\nBut again, I wasn't complaining. Not by a long shot.\n\n==========================\n\nI hope you enjoyed this fun little frolic. It's a contest entry, so your vote would be appreciated. - TTT"
    ],
    "authorname": "Tx Tall Tales",
    "tags": [
        "confusion",
        "calendar",
        "gay",
        "college",
        "housemated",
        "blowjob",
        "valentine's day",
        "massage",
        "ffffm"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/straight-to-straight"
}
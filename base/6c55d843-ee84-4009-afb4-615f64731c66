{
    "title": "A GOR-y Halloween Party",
    "pages": [
        "=======================\n\nA wild Halloween party, where wives become slaves who are bought, sold and throughly enjoyed. Particularly by the men of Gor.\n\nAlthough this story is written so it can stand alone, it is a sequel to A Gor-y Halloween. You might want to read that one first. Or after. \n\nThere's a lot to this tale. It's rather long, and covers a lot of areas. First time, group sex, (almost) non-consent, light bondage, slave relationships, and more. At the heart is a story about a couple, and their evolving relationship.\n\nThis is an entry in the 2012 Halloween Story Contest.\n\n=======================\n\nChapter 1: The Dallas Halloween Slave Auction\n\nMy wife was livid. In her current state of dishabille, that description could be taken both figuratively and literally.\n\nShe snatched the artificially aged parchment out of her friend's hand, and read the Slave Auction Rule Sheet again, out loud, for the benefit of all of us.\n\n* * * * * * * * * * * * * * * * * * * * * \n\nDallas Halloween Slave Auction\n\n1. All Masters must arrive with at least one slave\n\n2. Only one Master per invitation, companions will be sold\n\n3. All slaves must be collared at all times\n\n4. Masters receive 500 Gold per slave for evening expenses\n\n5. Additional Gold may be earned (Contests, etc.)\n\n6. Slaves will be auctioned off in random order\n\n7. No Master may bid on a slave they brought\n\n8. Slaves who remove their collars are immediately free\n\n9. Slaves shall not be required to remove any clothing\n\n* * * * * * * * * * * * * * * * * * * *\n\nWe were standing on the front porch, along with several other couples deciding if we still wanted to play this game. A 'Slave Auction' Halloween party was already over-the-top, but this new twist required nearly every woman there to 'submit' herself to someone other than her husband. Or multiple someones.\n\nAdd to that the artificial and unspecified ways for the 'Masters' to gain their wealth and there was no telling how things might end up. It also made the pouch of silver coins at my side meaningless. An hour at the local numismatist store wasted.\n\n\"Can you believe this crap? Who's going to agree to these rules?\" Amanda asked her friend.\n\nShe wasn't the only one questioning the setup. We'd already lost one couple that I knew of and it was obvious that our hosts 'creativity' wasn't going over well.\n\nThe rules didn't seem that heinous to me. In fact, if anything, they didn't seem restrictive enough, as far as 'slave' protection went. But prohibiting the Master from buying back his own slave was turning out to be the non-starter, at least for Amanda.\n\nThe hostess and her cousin Michelle, looking devastating in leather bondage gear, were intent on getting my wife to give in and join the fray. \n\n\"Come on, Amanda, it's only fair! Otherwise, for propriety's sake every husband would have to buy his wife, or look like a complete asshole. Now they're free to mix things up, at least for a little while, like they secretly want,\" Erika argued. She had a point. In her sexy outfit, I'm sure I wasn't alone in wondering how she'd look tied up and helpless.\n\nAmanda wasn't biting. \"Like they want? How about us? Who would want to chance some stranger controlling them?\"\n\nThat got a laugh out of Teri, our third wheel. \"Just about every woman here, except you and me apparently.\"\n\nAmanda looked shocked, as if her friend had turned on her. \"You're not agreeing with this, are you?\"\n\n\"Hell no! I know who I want to be owned by, and he brought me here. But I can see where they're coming from. If Bill was still around, I'd still want to be controlled by your hunky hubby,\" Teri said.\n\nSweet girl. If she kept it up, she was going to make me blush.\n\n\"But now that's not going to happen. Do you really want to take a chance on someone like Cole, or heaven-forbid, Greg controlling you? Shit, Greg brought two slaves, he's going to have a lot of gold to bid with,\" Amanda argued.\n\nMichelle was still working with Erika, trying to persuade the girls. \"The way the contests are, I don't think he stands much of a chance to add to his wealth. Besides, even if he were to win, if you don't like it, all you have to do is say no and remove your collar.\" She put her arm around Amanda, walking her away from the gathered crowd. \"Don't worry...\" was the last I heard.\n\nEven though I was nominally the Master over my incredibly gorgeous wife, and her (nearly) equally ravishing friend, I had no inclination whatsoever to get involved. Our rocky marriage was barely on the mend, and I didn't want to cause any trouble. The status of our new 'open' relationship with Teri, was equally precarious. Truth be told, I'd have been happy to take my slaves home and play with them alone.\n\nI looked them over, Teri's diaphanous white silk and silver loincloth, reaching half-way down her thighs, her bikini top barely enclosing her smallish tits, the pink of her cold-hardened nipples beckoning. Amanda's rough brown tunic, open erotically on the sides, a simple rope holding it closed around the waist. Strategic tears exposing her skin, the strap of the thong exposed on each side. The side of her ample breasts were visible from the right angle, the teasing partial view in many ways better than a full exposed view. She was ridiculously sexy.\n\nTeri walked over, rubbing up against me cat-like, the silk of her top soft against my arm. \"Pet your slave, Master?\"\n\nI laughed and pulled her close, caressing her long lustrous dark hair, which had gained a white streak overnight, similar to Anna Paquin's Rogue character. It looked just as good on her. I couldn't help but notice the hesitation on the part of the other couples. \"Looks like Amanda's not the only one with issues here,\" I said.\n\n\"Oh, the others are just waiting to see what we do. If we go in, most of them will. If we don't, there goes half the party. Erika knows it,\" she said confidently. \"That's why she's pressing so hard.\"\n\n\"What makes you say that?\"\n\nShe laughed at me. \"Everyone knows Amanda's the most uptight here. If she's willing, it must be Ok. The men are equally interested in the outcome, since they know that if we don't go in the two hottest slaves are no longer part of the festivities,\" she teased, doing a little Gor slave dance for me.\n\nI noticed that got the attention of quite a few of the bystanders. Maybe she had a point. Saucy wench.\n\nI surveyed the porch, taking in all the couples waiting. Many were still covered up in wraps or coats, hiding their costumes from view. I was definitely curious. There were several women present I wouldn't mind owning, and I had no doubt that virtually every man there would kill to possess my stunning wife, never mind the hot vixen beside me. \n\n\"Tal, Jack.\"\n\nI turned and saw Troy Brown waving at me. Looks like we weren't the only ones coming as Goreans. Troy's outfit looked more like Robin Hood than a Gor Warrior, but his curvaceous wife was rocking an open sided red silk tunic which reached halfway to her knees. Hers covered considerably more than Amanda's teasingly revealing barbarian tunic, with only about a 2-3 inch gap at the sides, and held closed by a four inch wide sash around her waist. Of course, there was considerably more to cover, but the curves looked good on her.\n\n\"Tal, Troy,\" I responded amiably. I looked over Kayla appraisingly. \"Red silks definitely suit you,\" I teased. \"Who's idea was that?\"\n\n\"Hers,\" Troy laughed, \"but she's certainly earned them.\" \n\nWe laughed, while she blushed prettily. On Gor, red silk identified sex slaves, trained in the arts of pleasuring a Master.\n\nThey were an odd looking couple. She was taller than he was, and probably had him by 20 lbs or so. Not that she was that heavy, he just wasn't that big. Maybe 5'6, 140 lbs. He was in good shape, and didn't look bad in his outfit. Her soft curves contrasted his lean muscles nicely.\n\nHe moved closer, dropping his voice. \"This thing about not buying back your own slaves, not good.\"\n\n\"No,\" I agreed. \"At least not for us.\"\n\nHe nodded emphatically. \"I was thinking the men of Gor should team up. We could pool our wealth and buy each other's slaves, then share them. Kayla's a little concerned with being sold to the wrong guy.\" \n\nHis offer intrigued me. I knew there was more to it than face value. He could have offered to exchange them, not share them. Like many of the men present, it was obvious he had a thing for Amanda. But unlike most, we saw them sociably, if not often. His wife was friendly and cute, and easy to get along with. He was likable and decent, and they had a good marriage. At least as far as the rest of the world was concerned. Recent events made me wonder how good anybody's marriage was behind closed doors.\n\nMore to the point, it might work. It would resolve a lot of problems. And the 'sharing' part of the deal could be kept under control. The opportunity to share his red-silk wife was a titillating bonus. Emphasis on the tit. I wondered how far the sharing might go.\n\nAs if I needed any more encouragement, Kayla dropped to her knees beside me, in the classic 'Naru' kneeling Gor position. \"Buy me, Master. Please? Buy Kayla.\"\n\nI grinned. She had the look and the attitude. I felt a tug on my arm from Teri. \"I can't think of two men I'd rather be owned by,\" she said with a sexy smile. \"I'm sure Amanda would agree. We like Troy.\"\n\nI stuck my hand out and Troy shook it. \"It's a plan. As long as Amanda decides to stay.\"\n\nTeri giggled. \"Don't worry about her. The act's all for show. No way she's not going into the party, after all we've done in preparation. She just needs to be reassured a bit.\"\n\nMy sweet Teri was right. Amanda walked our way, and Kayla got up and made room for her. My wife came to me, clinging to my arm. \"You'll watch out for me, right Jack? I'm a little nervous.\"\n\nI put my arm around her. \"Troy and I will both watch out for you. We're going to work together to buy you all back, and keep you out of the clutches of these other posers.\"\n\nThat appeared to perk her up, and she looked over to Troy, who was patiently waiting. \"Really? You'd do that for me Troy?\" The devastating puppy dog look. Unfair.\n\nAlso, totally unneeded. He'd walk through fire for her.\n\n\"Of course, Amanda. Whatever I can do to help. You know that.\" \n\nShe gave a huge sigh. She was capitulating. \"Alright. Let's do this then.\"\n\nBefore she could turn away, I grabbed her by the arm. \"Once we cross the threshold and I collar you, I own you until the auction. You'll be my slave completely. Agreed?\"\n\nShe gave me the big-eyed innocent look. \"Amanda is Kajira. She will do nothing to disappoint her Master. Amanda will be good. Very good for Master.\"\n\nDamn, that got me hot. \n\n* * *\n\nOur decision busted the log jam, and we entered the house with a half-dozen couples on our heels. Inside the door I stopped the girls. I reached into one of the pouches at my side, pulling out a leather collar. It was simple, no studs or designs, just a single metal loop on the front.\n\n\"This is for you, Amanda.\"\n\nShe held up her hair, and allowed me to place the collar on her neck. \"It suits you well,\" I told her, giving her a kiss on the lips which caught her by surprise. We weren't usually publicly demonstrative. Shit, who am I kidding? Until the last week, we weren't privately demonstrative. When I pulled away she was blushing. \"Pretty Kajira. I think I'll call you Mandy.\" I gave a little tug on her collar ring.\n\n\"Thank you Master,\" she said softly.\n\nI turned to dear Teri, and drew out the second collar from my pouch. This one was a silver mesh collar, nearly an inch wide. It had a large loop on the front, perfect for leashing. \"And this one, is for you, sweet Kajira. Do you like it?\"\n\nShe stood tall, holding her hair out of the way. \"It's beautiful. Thank you, Master.\"\n\n\"No more beautiful than you,\" I told her, closing the clasp on the back.\n\nDale was standing nearby, and gave me two small bags of coins. \"Eight 50 gold coins, four 20's, and some small coins in each, Sir. May I compliment you on your taste in slaves? They look mouth-watering.\"\n\nI didn't know the protocol for a male slave speaking. \"Thank you. I hope your new owner tonight is to your liking. Don't let her use you too thoroughly.\" \n\nWe wandered through their home, absorbing all the changes. The place was filling quickly. Walking into the large central room, I saw a raised platform had been placed in front of the fireplace. A single wooden 6x6 rose from the floor to a height of about 8 feet, with two large steel rings attached to it.\n\nSilks and pillows were scattered everywhere. The furniture remaining had been moved out of the way, leaving the place wide open. Walking through the dining room and formal living room, I saw much of the same. I started to wonder where all the furnishings had gone. Numerous flag staffs were scattered around, but instead of flags, long silken sheets were hanging from each. I contemplated their possible purpose.\n\nThe lighting was dim, with most of the overhead lights extinguished, and candles scattered throughout the house giving off dim flickering light and strong fragrances. The corners of the rooms were particularly dark, and I suspected purposely so, in order to create the ambiance of privacy. The centers of the rooms were mostly empty, providing room for standing and mingling. The house was warm, a good thing, with so many of us minimally dressed.\n\nAs we explored, I saw a few new girls dressed in provocative leather mini-dresses. The outfits had a large zipper down the front, begging to be opened up. Additional zippers crossed the low cut top, above each breast. More temptation. Leather collars completed the outfits. The girls looked young, probably college kids looking to make some easy money. They were all pretty, though not as stunning as several of the guests. \n\nThere were a couple of male servants present. Their tight leather shorts, mesh shirts, and collars were very revealing. Fortunately, they were both fit enough to pull off the look. Most likely more college students. I wondered briefly what they were being paid for the night. The last time we'd hosted the rotating Halloween party, we'd hired three pirate wenches as bartenders and servers. It had run me over $150 each. This whole setup was looking pricey.\n\nWhereas the servant girls were walking around passing out drinks and snacks, the servant men were mostly standing off to the side, observing.\n\nI was thirsty. \"Mandy, paga,\" I told her firmly. \"Teri, two cups of Ka-La-Na.\"\n\nThe girls moved away quickly, giving me an opportunity to see how things were shaking up. Nearby stood a truly ugly orc who I would never have recognized except for his lovely companions. His mask must have been uncomfortable. \"Nice outfit Raul. Little heavy on the makeup, though.\" \n\nHell, it was my responsibility as a man to give him a hard time.\n\n\"Beautiful slaves you have there, Master Orc,\" I said to my long-time friend. He was one of our original guests, half-a-dozen years back.\n\nHe snorted. \"These scum? Some trash I found on the way over here.\" I had to imagine the smile I heard in his voice, through the full face mask.\n\nThe 'trash' was his tiny wife Denise dressed as a World of Warcraft Night Elf. The long pointy ears were a dead giveaway. The mesh bikini and burgundy cloak worked nicely. Beside her was an extremely tall blue girl, with large curly horns on her head, and hooves for feet. I didn't recognize her at first, then it struck me. I grinned. \"Sheila?\"\n\n\"Greetings, Master,\" she said with a charming smile. \"Perhaps you'd be so kind as to free us from the clutches of this stinking, uncouth, vile captor? I'd be ever so appreciative.\"\n\nI hadn't seen Sheila in years. She'd gone off to college a few years back. I guess she'd graduated. She was extremely striking, with the hard body of youth, bright yellow hair, and a fabulous breastplate of gold and yellow. Another gold plate was strapped around her waist, with a long yellow silk hanging from it, making her barely presentable. She'd set some hearts to pounding. Top tier slave material. \n\n\"I'll see what I can do once the auction starts,\" I told her with a smile.\n\nMy slave Mandy appeared at my side, dropping to her knees and presenting me with a goblet of what I assumed would be some kind of beer. I took it from her, taking a deep swig. It was a dark beer, not Guinness, but something almost as thick. Just what the doctor ordered.\n\nTeri showed up moments later, on her knees, holding up two more chalices. \"You two may have one glass each,\" I told her. \n\n\"Thank you Master,\" she said sweetly, lowering the glasses, and passing one to her comrade in chains.\n\n\"Mmmm. Tork would trade. Both of these worthless chattel for either one of yours,\" Tork barked, tugging on the leashes attached to his two women.\n\n\"Tempting, Tork.\" It was tempting. If I made the trade before the auction, would I get the sellers cash, 50 Gold each? I'd be even more likely to be able to buy my own girls back. I'd have to talk this one over with Troy. \"Perhaps later. Can I offer you something to drink?\" \n\n\"Not now. Tork will try to find someone foolish enough to take these troublesome creatures off my leash.\"\n\nHe walked off, with the girls struggling prettily on their leashes, putting on a nice act of being dragged along against their wishes. In retreat, Sheila had to walk carefully, the footwear she was wearing adding a good six inches to her already considerable height. I noticed she had a large purple tail protruding from her loincloth. I wondered how she'd look on her hands and knees, with me moving that tail out of the way to get to her youthful goodies. Shame on me.\n\nToo bad I'd be buying back my own women. Otherwise I'd have enjoyed having those girls at my feet. Either one, or ideally both. Not a true mother/daughter fantasy, since Denise was Raul's second wife, and only a few years older than her step-daughter.\n\nI mingled for a while, my girls always close at hand, running small errands for me, doting on me otherwise. They were very openly affectionate, raising a few eyebrows. The fact that Teri was acting so intimate, and that Amanda was not only accepting of her friend's attention, but was mimicking it, must have been quite a surprise for most of our friends.\n\nHell, it was a surprise for me. Unthinkable until a few days ago.\n\nThe atmosphere was electric; I'd never felt anything like it. The submissive half-clothed women, the easy way the men held them, touched them, caressed them. The exposed skin, the flashes of breasts, smooth ass cheeks, it was all breathtaking. The outfits for the most part were extremely skimpy, designed to tease. Some were downright lewd. Each movement opened up new vistas of tempting flesh. Even those more fully clothed displayed a new sensuality and wantonness most had never even hinted at previously.\n\nI had known these women for years. Amanda was somewhat standoffish, with a small circle of close friends. I, on the other hand, didn't have many close friends, but I was friendly with everyone. I was prone to flirt, but humorously, never pushing things too far, and rarely overstepping my bounds. Over the years I'd become a little friendlier with a few of the women, Erika our hostess, Tasha, and Raul's Denise in particular. That's part of what made the actions of Teri, and in a lesser way, Kayla so surprising. I'd never really pushed the envelope with either of them before.\n\nTonight, if I so desired, I could own any one of these women.\n\nI sent Teri off to find out what she could about the contests. More gold would be good.\n\nI won't bore you with the details of the contests they'd set up, but most were either skill or knowledge based. Made sense, any strength contests wouldn't be very fair for the female Masters. I'll admit that some of the frat games I'd played at, plus my endless knowledge of useless trivia came in handy.",
        "I don't know if I did the best, but I did better than most, and when all was said and done, I had another 840 gold to go with the original 1000. I was relatively certain I had more total gold than anybody else. There were only 4 of us who'd brought in two slaves. Raul and Greg were both doing poorly, only Michelle seemed to be doing well, and I didn't see her as auction competition.\n\nI found it especially interesting that Michelle, Erika's cousin, was the owner of our hosts, Erika and her husband Dale. She was flaunting that ownership openly, keeping her slaves in line with her ready crop. The image of Dale licking her boot would stick with me long after the party was over.\n\nBy the end of the games, we'd seen most of the house and yard. It was surprisingly warm outside for so late in the year, the temperature probably low 70's outside. During the day it had been in the 80's, and I suspected by the end of the night, it would be cooler outside, a nice change of pace from the balmy indoors. The backyard had a few small privacy tents set up, maybe 10 feet square, which were for rent, 50 gold per hour. Looked interesting. A little privacy might be nice. \n\nA lot of privacy might be even nicer.\n\nI ran into Michelle during our travels, and pulled her aside for a few moments. I filled her in on a bit of my slave's training, teaching her some important phrases for the auction later. She looked to be having a great time. \"Too bad you're not for sale, you'd be on the top of my list,\" she teased. \"I bet you'd be hard to break.\" Her emphasis on 'hard' had me going.\n\n\"For you, a private sale might be in order. Being your boy-toy for a night could be interesting,\" I told her, brazenly running my hand down her skin-tight leather clad side.\n\n\"I've got a feeling you're going to have your hands full as it is. I wouldn't want you all worn out come play time. That wouldn't be fun,\" she had a riding crop in her hand that she rubbed the inside of my leg with, using it to raise the front of my leather wrap.\n\n\"Careful, kitten, this is like a kilt. Nothing underneath but Jack,\" I warned her.\n\n\"Mmm. I like the sound of that. We may have to play after all. Of course I'd have to invite Erika; she'd kill me if I didn't.\"\n\nDamn, talk about hard sell. \"You pick the date, and I'll be there with bells on.\"\n\n\"No bells needed. This outfit would do just fine.\" She leaned in close, her face a bare inch from mine. \"Are you teasing me, or would you really like to play sometime?\"\n\n\"Could Amanda play too?\" I asked, getting worked up over the idea. \n\nMichelle's eyes opened wide. \"Would she be willing?\"\n\n\"Perhaps. We're exploring new areas of our relationship,\" I confided.\n\n\"That explains the Teri thing, I guess.\" She smiled devilishly. \"Anytime she's willing, the offer is open. Why don't you see if you can make it happen?\"\n\n\"I think I'll do that,\" I told her. \"Pretty wild night, you guys have concocted here.\"\n\nShe laughed. \"I'm guessing we ain't seen nothin' yet.\" \n\nI turned to walk away, but she halted me with her crop, and drew me close. Very close. \"Open your mouth,\" she said softly, \"and close your eyes.\"\n\nI did as she requested and felt her finger between my lips. She left something in my mouth. Michelle pushed my chin up until my lips met. \"A little gift. To help make sure you're ready if this party gets as wild as I think it will.\" Then she pressed her lips against mine gently. \"Have fun, tonight, handsome.\"\n\nI went back to my girls and we wandered through the house with about 1/2 an hour until the auction. You could feel the growing excitement in the air. \n\nWe settled into a dim corner of the study with a pile of pillows, watching the interplay around us. Troy showed up with Kayla at his side, and sat down with us. I enjoyed the sight of her sidling up to us, her silks shifting sexily. I was sitting on the ground with my girls beside me, and the view from below was riveting.\n\n\"Did well in the contests,\" he said, sending Kayla off for some more paga before settling down with us. \"I'm up over 400.\"\n\nIf he thought 400 was doing well, that made me feel even better about our chances. \"Good. That gives us over 2700 total. Let me give you an added 1000 to buy these two with.\" I counted out the large 50 gold coins. \"That leaves me 840 to bid on Kayla. If I need more, we can work it out.\"\n\n\"1920,\" he said, counting his coins. \"I hope it's enough. Any strategy?\"\n\n\"I can't think of any. It all depends on the order they come up. I figure Wendy, Penny and Sheila will go for big bucks. But there's no real telling.\"\n\nHe nodded.\n\nI saw that Teri was squirming for my attention. \"Something you'd like to say, Kajira?\"\n\nShe stretched out against my leg, her hand stroking my thigh. \"Mandy will be expensive, Master. Don't worry about this girl. Save your money for Amanda. If I come up first, let me be sold. You can always trade for me later.\"\n\n\"Master?\" Mandy said softly, seeking my attention.\n\n\"Speak.\"\n\n\"If Teri comes up first, buy Teri. If you pass on Teri, and someone outbids you for Mandy, you'll have neither of us. Buy Teri, Master,\" she was very un-slave like in the way she was so adamant.\n\nTeri was being bad. Her hand under my wrap was very naughty, brushing gently against my cock. I responded strongly to her touch.\n\nKayla had returned with our mugs of paga, and I pushed Teri away, \"Behave, slave.\"\n\nWith a giggle, she crawled over to Troy. She pressed her body against his, and I saw him smile. \"This girl hopes you can buy all of us, Master. We'll be good Kajira. I may wear white, but I'm sure I can make you happy.\"\n\nKayla seemed to be in a good mood. She passed Troy his mug, then stroked Teri's long, luxurious hair. \"She is beautiful, is she not, Master?\"\n\nTroy's smile grew even wider. \"Too beautiful, I fear. We have the three most beautiful women here. There will be many Masters trying to buy them away from us.\"\n\nKayla sauntered over to me, and took over Teri's previous place. Her robes opened somewhat, giving me an eyeful of side boob, and a brief peek at her nipple. \"Such strong Masters. I'm sure you'll have us serving you well, soon.\" She looked up at me, her eyes blazing. \"How may I serve you, Master?\" Her hands were on my thigh, reaching under my wrap, teasing me. \"This girl lives to serve. \n\nI looked over at Troy, who was oblivious to our actions. He was laying back on the pillows, with sweet Teri draped all over him. Her leg was over his, and her hands were reaching inside his vest. Her lips were pressed against his neck, while his hand caressed her exposed back.\n\nGod, that girl was trouble.\n\nMandy was sitting beside me quietly, watching her friend. I reached over and gave her a nudge. \"Kajira, that Master holds your fate in his hands. Perhaps you should help your sister convince him you're worth buying.\"\n\nShe gave me a mysterious look, hard to decipher. A tiny smile lifted the corners of her mouth. \"As you please, Master,\" she said softly, crawling across the pillows. The look from behind was too good to be true. Damn, I was a lucky man. I might have not realized it for the last few years, but the recent changes had me lusting after my wife like an infatuated teen.\n\nAmanda's departure seemed to be the sign Kayla had been waiting for. Her hand slid upward, stroking the inside of my thigh. She didn't stop until she reached as high as she could, the back of her hand brushing my balls. \"How may I pleasure you, Master? I'm willing to serve you in any way you wish.\" She licked her lips slowly and sensuously. I felt her hand move, and her fingers traced the length of my hardness. \"What would you like Kayla to do?\"\n\nJesus. This was beyond my expectations. Way beyond. I thought our slaves would be friendly, even allow a little fondling or caressing, but Kayla was forcing me to reassess everything. I wonder if Troy knew his wife's intentions.\n\n\"For now, that is nice. After the auction, I believe I may rent one of those tents, and see if you deserve to be in red silk.\"\n\nShe crawled up my body, her hand underneath my wrap all the more obvious. She was kissing my chest. She looked up and whispered, \"This girl would like that. Very much.\" She moved higher, pressing her lips to my ear. \"Kayla would like to submit to Master totally. If she's going to be a slave, she'll be the best.\" Then her lips were on mine, kissing me. \n\nI kissed her back fiercely, a Master's kiss, while my hand reached inside of her robes, squeezing her breast. Her hand was clutching my cock, squeezing.\n\nKayla? I'd never have expected anything like this from her. She hardly even flirted, normally. I figured her for almost as uptight as Amanda. But now? The red silks, the touching, the kissing. Fucking incredible.\n\nI heard the tinkle of bells, and looked up to see one of the cute servants hired for the party, walking by, ringing a bell. \"Auction in 10 minutes. All slaves please report to the Auctioneer.\"\n\nI looked over to find the other three sitting up, straightening their outfits. Mandy had to be very careful, any wrong movement and she risked showing off quite a bit. Kayla released me, and sat up as well. \"Buy Kayla, Master,\" she said fiercely. \"Kayla needs to be owned by Master Jack.\"\n\nI laughed, and gave her a pat on the rear. \"Go prepare to be bought, Kajira.\"\n\nMy girls stopped by for a kiss, which I happily bestowed. \"Remember,\" Teri whispered, \"buy Mandy whatever the cost.\"\n\nTroy stood and straightened himself. He was obviously erect. I shouldn't talk, but at least my outfit didn't show it quite so badly.\n\n\"Damn. You're going home with both of those tonight?\" he laughed.\n\n\"Naughty slaves have been talking, I guess,\" I smiled. \"Yes, and I assure you, Teri will not be wearing white again.\"\n\nHe shook his head. \"You lucky, fucking bastard. I don't know if I'd survive an evening with that pair.\" He grinned. \"Then again, what a way to go!\"\n\nChapter 2: Wives Bought and Sold\n\nThe main room was filling quickly. We found a place a little ways back from the auction platform, with my back to the corner. Looking around I started to get anxious. It looked like there were several small groups forming. I hope they didn't have the same ideas we did.\n\nWe didn't have long to wait. Michelle took the stage, all dolled up in her dominatrix outfit, black leather lace-up bustier, leather panties, black fishnet stockings, knee high laced boots with 4 inch fuck-me heels, and black gloves. She had a riding crop in her hand, and was guiding a woman dressed up as Princess Leia to the stage. The room may have been dark, but the stage was brightly lit. The slaves on auction would be on full display.\n\nMichelle attached the slave pole leash to Leia's collar, then turned to face us. \"Before we start, I'd like to lay some ground rules. The safety and comfort of our slaves is paramount. I'll remind you that no slave can be made to remove any clothing. Also, any slave can end their servitude and become a free person simply by removing their collar, and nobody may interfere with their doing so. Finally, all slaves tonight have a common safe word. We understand that sometimes a no uttered by a slave does not necessarily mean no. But any slave that speaks the safe word must be heeded. The safe word is 'lavender'. I'm going to repeat that, 'lavender'. If your slave says lavender, stop what you're doing immediately and find out what your slave's limitations are. Any Master who loses a slave because they remove their collar will not be reimbursed. Any Master who does not heed the safe word will be stripped of his slave and any other slaves, and will be dealt with severely. No slave may be gagged, since that would inhibit their ability to use their safe word. Are the rules clear?\"\n\nShe got a half-hearted chorus of yes's. \"Let there be no mistake. Every Master present, raise your hand if you understand and agree to these rules.\"\n\nAll the hands were raised quickly and the auction began. Michelle faded into the background, and encouraged our Princess Leia to move for us, with a nudge of the riding crop she was holding. \n\nPilar had made a good choice. Her slender figure fit the outfit well, and the hair buns on each side of her head were picture perfect. Her costume wasn't the most creative ever, but her husband's full body Jabba the Hut was side splitting. I wonder how long it would be before that came off. He had to be miserable.\n\nThe bidding started out at one hundred, and there were a lot of bidders. You could feel the excitement. Someone was going to own this pretty girl, with who knows what consequences. The bidding escalated, first by 20's then by 50's. In the end it became a bidding war between Victor and Jerry, the eventual winner. It ended at 650, which seemed a good price. She looked great, and for the first sale of the night, I thought it wasn't too bad. With each Master starting with 500 gold per slave, and another couple of hundred from the contests, you'd figure somewhere around 600 would be the average going price.\n\nWe went through two more rapidly, Tasha Evans dressed up as a vampire's blood slave, with a hot red dress that did a very poor job of covering her body, and bite marks on her neck, wrists and breast cleavage. She was our only female black slave, and I figured the exotic allure of owning her would increase her price. Never mind that she was gorgeous. IMHO. During her posing, we all got a clear view of the miniscule pink thong she wore underneath. Quite lovely. She went for 700 even, a bargain. Poor girl went to Cole, who was a crude dick under the best of circumstances. She didn't seem pleased.\n\nI couldn't help but think for a moment that if I hadn't committed to buying back my wife and our friend, I could have owned her. Maybe her and that sexy blue girl. If only.\n\nIf my counting was correct, there were 16 female slaves being auctioned off to 11 male Masters. If they all went for over 600, with the most prized slaves probably going for nearer 1000, there wouldn't be enough cash to go around.\n\nTasha was followed by Savannah, Cole's wife, with a crazy comedy outfit, huge fake breasts under a wet t-shirt, an enormous fake ass, and a strange headpiece that made the top of her head look flat. She was supposed to be her Mad Scientist's experiment to create the perfect girl. She wasn't bad looking, but her outfit was the least revealing, least slave-like, and completely obscured her real body. She topped out at 480 gold, even though she worked hard to drive up her value. Obviously, more skin sold better.\n\nI was caught off-guard when Kayla came up next. She looked hot, and posed nicely on the stage. I stayed out of the bidding at first, and jumped in when it slowed down around 500. At 660, there were just two of us left bidding, and Greg, who my wife detested was the other one. I couldn't let him have her; Amanda would never forgive me. I'm not sure what her problem with him was. Sure he could be a smartass, but for the most part he didn't seem all that bad. Admittedly, he was an obnoxious drunk, but he was usually pretty quick to apologize the next day. Thankfully, he bowed out at 720, and our partnership had its first success. It had me worried a little, that we might not be able to afford the other two. I thought she was attractive, but the thought that she went for more than Tasha was worrisome.\n\nI went up to the stage, paid my 720, and leashed my new slave. She followed me docilely to my corner, and I gave her the additional 120 I had remaining, and instructed her to take it to her husband. \n\nShe returned to my side, turning her body to the crowd around us, laying beside me. \"Thank you Master, for buying Kayla.\" \n\nI reached out and caressed her shoulder. \"A bargain at twice the price.\"\n\nShe pressed her lips to my side, her hand moving up the inside of my leg. \"Kayla will work hard to make sure you continue to believe that.\" Her hand had reached its goal, and once again I felt her warm fingers stroke me lightly before they encircled me. She dropped her voice, falling out of character. \"I was so worried that Greg would outbid you. I couldn't stand to be touched by that bastard. He makes my flesh crawl.\"\n\nHer too? Greg wasn't popular with the ladies, obviously.\n\nOur first male of the evening was on the block, Dave Moore. I was still surprised that he'd consented to be a slave. He was a big, athletic guy, and I imagine there were a few wives present who wouldn't have minded being leashed by him. I wasn't really interested in the bidding and gazed at my red silk girl. I wondered how much was act, and how far she'd really be willing to go. I slid my hand inside her silks and cupped her breast. She purred delightfully. \n\n\"I don't make your skin crawl, Kajira?\" I teased, squeezing her tit softly. \n\nShe kissed my chest again, her tongue lingering. \"Your touch makes my skin burn, Master.\"\n\nI squeezed her nipple. \"No safe word?\" I teased.\n\nShe let go of my cock, and moved up my body. \"Silly Master. There is nothing you could do to your willing slave that would have her even contemplate that horrible word.\" She finished by placing her lips over mine. The kiss was delightful, and while I kissed her, I saw the bidding for Dave conclude.\n\nEven in the relative darkness of our corner, I was aware of a few prying eyes. There were others who did not find the sight of purchasing a male slave interesting. I pushed her away, \"Remember your place slave. Now tend me, while I follow the proceedings.\"\n\nShe moved down, her back to our potential audience, covering up her actions. She quickly slipped her hand between my legs, and stroked me slowly. \"Yes, Master. Kayla knows her place.\" Someone would have to be standing directly over us to see what she was up to. Good girl.\n\nI was surprised to see that one of the servant men was paying for the slave, then he pulled Dave to the side and stayed with him. I put two-and-two together, and figured that Michelle had bought Dave for herself, through a servant proxy. She had to have over 1500 gold, since she had started with two slaves and had seemed to do well in the contests. Then again, she also had access to the gold coffers. Who knew what her limit was?\n\nWendy, our buxom, barely-clad cave girl was escorted on stage, and I sat up. This would be interesting, I expected her to go high. She was struggling against her chains, putting on a great act, dropping into a low crouch and looking out across the audience. With all her movement, and her frightened poses, we had several chances to see glimpses of her bare breasts and her excited nipples, when her meager top would shift out of the way. She had a dynamite body, and within an instant her price was already the highest of the evening. At 800 there were still three people bidding on her. \n\nThings were getting heated up. Raul dropped out of the bidding at 900, leaving Greg and Michelle's proxy still bidding for her. Michelle finally won at 1020. About what I was expecting price wise. I had secretly hoped that Greg would win, since it would take him out of any bidding war for my girls, and Wendy seemed to get along with him as well as anyone. I was a little surprised that Michelle had bid so actively for her. She'd shot her load early, spending around 1500 for her two slaves.\n\nKayla had been watching the bidding with interest, while her devilish hand kept me on edge. \"Lucky slave. I'd much rather be owned by Michelle than Greg.\"\n\n\"You'd rather be owned by a woman?\" I teased. \n\n\"Versus Greg? No question. Plus, she does own a handsome male slave. The possibilities are intriguing.\" She leaned down and kissed my side. \"Of course Kayla is much happier to be owned by her true Master. She would choose nobody else.\"\n\nI caught my breath when I saw my wife escorted on stage by Michelle. God, she looked hot. The house got quiet, and even before the bidding was officially opened, I heard Greg shout out \"One Thousand!\"",
        "Damn it. Just what I was afraid of.\n\nAmanda was standing tall, almost haughty. Michelle leaned in and swatted her thigh with her riding crop. \"Display, slave of Gor.\"\n\nAmanda looked shocked, but she straightened obediently, opening her legs a little more than shoulder's width, placing her hands behind her head and turning her face to the side. Even from where I could sit, you could see she was blushing.\n\n\"This slave comes to us from the second-earth, Gor, and still needs breaking in. A barbarian slave girl. Who offers 1050?\"\n\n\"Eleven Hundred,\" Raul yelled out.\n\n\"Eleven Fifty!\" Greg bellowed.\n\n\"Twelve hundred,\" Raul replied.\n\nI suspected Raul was our most likely competition, I was worried that we wouldn't have enough money for Teri if it went much higher. Both of these guys had brought two slaves, plus whatever they'd managed to earn in the contests.\n\n\"Thirteen,\" Raul answered.\n\nI saw a disappointed Greg, sit down, and chug whatever drink he was working on. I was glad to see him out of it.\n\nMichelle walked around Amanda, running her riding crop along the inside of her thighs, raising the front of her burlap tunic to show the edge of her tiny brown thong. \"This slave is unbroken, waiting for a true Master to tame her. Are there no real men here tonight?\" Michelle teased.\n\nThere were a lot of very attractive women in the building, but Amanda was Amanda. TV star good looks. The face of an angel. A body straight from the pages of Playboy, built for sin. And she was for sale. I had no doubt these men would be secretly picturing Amanda under them, when they were enjoying the fruits of the evening with their own wives.\n\n\"Fourteen hundred\", Troy announced. \n\n\"Fifteen\", \"Sixteen,\" Raul and my partner went back and forth. I was surprised that Raul had that much, I didn't think he'd done that well in the contests. \n\nTroy looked over at me quizzically. I nodded emphatically. \"Seventeen Hundred,\" Troy responded, standing. \n\nThe room was quiet for a few seconds, before Raul answered again. \"Eighteen.\"\n\nThe whole room was riveted, watching the auction pan out.\n\nMichelle was still controlling things, \"We have 1800 from the Orc Lord. Surely this juicy piece is worth that and more.\" She ran her crop along the inside of Amanda's thighs, making her tremble. \"Nadu,\" she said sharply, and Amanda quickly dropped to her knees, hands turned up on her thighs, head tilted back, exposing her collar. Her legs were open, displaying her tight panties, hinting at what lay within.\n\nI could see the people in front leaning forward for a better look. She had her eyes closed, trembling.\n\n\"Nineteen Hundred,\" Troy said.\n\n\"Nineteen hundred,\" Michelle laughed, caressing my wife's hair. \"A bargain for such a delicious slave. Imagine, owning the legendary Amanda, even if only for a night.\" She squatted down behind her, and I saw her hand slide into my wife's tunic from the side, caressing her belly.\n\nRaul was leaning over talking to John Peters. Shit. I guess we weren't the only ones working as a team.\n\n\"Nineteen Fifty,\" he said.\n\nTroy made one last effort, for the works. \"Nineteen Eighty.\"\n\n\"Two Thousand,\" Raul replied. You could hear the murmuring through the crowd. The bidding was nearly double what Wendy had gone for, and I thought she'd be one of the most expensive.\n\nIt was a disaster. We were out of it. Troy shook his head in frustration, and sat down.\n\n\"I have two thousand gold from the Orc Lord. Any more bidders? Anyone?\"\n\nShe looked around, waiting for a few seconds. \"Sold! For two thousand gold. Lucky beast, come claim your prize.\"\n\nI was devastated to see Raul jump up and high five John Peters before leaping onto the stage to put his leash on my wife. She looked at me nervously, while she was led offstage.\n\nWhat was it they said about the best laid plans...?\n\nThe next three slave auctions passed me by in a daze. How was I going to get Amanda back? Raul was decent enough, I actually like the guy, and I didn't think John Peters was trouble, but still. \n\nMost of the crowd seemed happy and boisterous, and it didn't appear that the other men were having too much difficulty dealing with selling off their wives. I guess I was alone in that concern.\n\nI had completely missed Mindy, a Chinese Concubine's, sale, as well as our host Dale. I couldn't think straight.\n\nBy the time I was paying attention again, Penny was being bid on. Hers was by far the most daring outfit there, having arrived wearing nothing but blue body paint and a thong, as one of the Avatar females. She was tall, almost 6 foot, with long hair divided into two long strands that struggled to cover her breasts. I expected her to sell well, but feared that too much had been spent already. Her husband hadn't bought anybody yet, but couldn't bid on her. Only Greg, Troy, and Victor didn't own slaves yet.\n\nI was surprised that Greg didn't bid much on her, he dropped out early. In the end Victor was able to purchase her for the bargain price of 650. The same price as Princess Leia. Gold was already growing scarce. I would have paid 1000 for her. Easily.\n\nKayla had stopped her 'tending' duties, and was trying to console me. \"We'll still get Teri, and we'll figure a way to trade for Amanda after the auction,\" she reassured me, adding a belated \"Master.\"\n\nI knew that only Greg had the gold remaining to bid against us for Teri, unless Elliot, Penny's husband teamed up with somebody. Even then, we should be able to outbid anybody. Small consolation.\n\nMichelle called for a break in the auction. \"We've reached the halfway mark, and will take a short refreshment break. The auction will start again in 10 minutes.\"\n\nTroy came over immediately, \"Damn, that was crazy! Nobody's going to have any gold for the end of the auction, the way things are going.\" Troy was a numbers guy, a CFO of a good size company. I was still surprised to see him pull out his smart phone. \"The way I figure it, it's not likely anybody has more than 400 left, except for Greg and Elliot. Kim, of course, but I figure she'll spend hers on Darius.\"\n\n\"I'm going to check on something, I'll be back in a second. Kayla, stay with Troy.\"\n\n\"Gladly, Master,\" she said to my retreating back.\n\nI located Michelle. I had an inkling of an idea. \"Hey Michelle, I have a question?\"\n\n\"Sure. What a deal with Amanda, huh? Two thousand? I didn't think anybody would go for much more than about a thousand, maybe 1200,\" she said.\n\n\"The rules looked like there might be other ways to earn gold. Other than the contests. Are there?\"\n\nShe laughed. \"I was wondering when somebody would pick up on that. There are a few. We'll have some slave contests later, of course.\" Her grin made me think she was still holding back.\n\n\"And?\" I asked.\n\n\"The servants may be sponsored. As you can imagine, this party ended up a lot more expensive than we thought. Dale is less than happy that we blew our budget. By a lot. So, if anybody were willing to help sponsor a servant, we have 6 of them, they could earn some gold.\"\n\n\"How does that work?\" I asked.\n\n\"For $100, you own that servant. Not like a regular slave, but as a working slave. Of course, as their Master, you get preferential treatment. You receive 100 gold, and you can cash out any gold tips they make for dollars. One dollar per gold. They haven't earned much so far, but once the auction is over, I expect their tips will improve. It could net you a lot of gold, but it could also get expensive.\"\n\n\"I'll take them,\" I told her.\n\n\"Which?\" she asked.\n\n\"All of them.\" I pulled out my pouch, and counted out a dozen Morgan dollars. \"These are worth about $50 each, if you'd like I'll change that for cash after the party. I didn't bring a wallet with me.\" I offered her the coins.\n\nShe seemed surprised. \"What are you up to, Jack?\" \n\n\"I'm going to figure out a way to get my wife back,\" I explained.\n\n\"Come on. Raul won't be a bad Master. Are you sure she wants to be bailed out?\"\n\n\"I'm not certain, but if she does, I want to be able to do it.\"\n\nShe counted out 600 more gold for me. \"That should go a long ways with what you already have. I figure there's going to be some bargains at the end, everybody's shooting their wad early.\"\n\n\"That's what I'm counting on. Maybe a two for one deal, or something along that order,\" I told her.\n\n\"Good luck.\" She seemed to have something else on her mind. \"You know Erika is still up for sale. If Greg tries to buy her, I could really make it worth your while to outbid him. I have a few gold in reserve, and would pitch in up to 300 if you do. Any more than that and I'd be cheating.\"\n\n\"Why did we invite him anyway? None of the women here want to have anything to do with him. At least I know Amanda, Teri, and Kayla don't. And now Erika.\"\n\n\"We all love Alice. We put up with him for her sake.\" She checked her watch. \"Gotta run, auction's about to start. Teri's going to be up first after the break.\"\n\n\"Thanks, Michelle.\"\n\n\"Your welcome, handsome. And remember what I said about Erika. She and I would both be grateful if you kept her out of Greg's hands. Very grateful. I might even let you be in charge. We both tie up very nicely.\" She gave me a sexy smile. \"She's up after Teri.\"\n\n\"Got it. I'll do my best.\"\n\nI returned to Troy. \"Teri's next. Spend what you have to, and afterwards, I'll take whatever cash we have left, and see if I can't expand our harem, if that's cool with you.\" I hung onto my extra 600.\n\n\"Got it. It's mostly your money anyway.\"\n\nI cornered two of the female servants, and filled them in on their new ownership. They had almost 30 gold between them, which I promised to cash out. I gave each of them a silver dollar. \"It's worth about $50, almost $30 in silver value alone,\" I explained, taking their gold coins. \"I'll cash it out after the party if you like, or you can keep it.\" They seemed happy enough with the deal. \"After the auction, we can talk again.\"\n\nMichelle was announcing the start of the bidding, and I had to leave them.\n\nTeri was led on stage, looking too sexy for words in her skimpy outfit. The way I figured it, we might get off lucky. With Sheila and Erika still to go, and so much of the gold already out of play, the bidding might be light for Teri.\n\nI was right. Greg didn't even try once Troy started bidding, and Elliot bowed out at 700. I knew he could afford more, but my guess was he was holding out for Erika or Sheila. Maybe Alice or even Denise. Their loss was my gain.\n\nTroy went on stage to retrieve Teri, and a few seconds later she came crawling over with nearly 1500 gold in her hand. She had to lean over Kayla to give it to me. My red silk girl was back to her tending duties. \"I can't believe you didn't buy Amanda,\" she said, sounding cross.\n\n\"I know. We only had 1980, and got outbid. But I'm working on a plan.\" I gave her a kiss. \"I'm glad we got you back, now go to Troy, I've got some buying to do.\"\n\nShe looked at me, curious, but held her tongue. At least for a moment. Teri saw what Kayla was up to, and a wicked smile broke out on her face. \"Someone's being naughty,\" she teased. \n\nKayla giggled. \"Master needed tending. Care to come help me, Kajira?\"\n\nTeri sighed. \"I wish. Our other Master needs some attention as well.\" She turned and went back to Troy.\n\nErika was already up to 600 with both Greg and Elliot bidding on her. Elliot dropped out at 700, and I outbid Greg at 850. 550 out of pocket. That still left me with over 1400. It also earned me a glare from Greg. Oh well.\n\nI went up on stage, and leashed Erika. She was looking incredible in a black leather corset, with a black body-stocking underneath. The corset left her breasts exposed, and you could see her perky nipples through the fine mesh top. After Penny's avatar costume, it was probably the most revealing, only Wendy's cave girl giving her a run for her money.\n\nI brought her back to my corner while Darius, the last of the male slaves went up for auction. I still found it odd that two of the arguably best looking men at the party had opted to be slaves.\n\n\"Thank God you bought me, Jack! I don't know what I would have done otherwise. Remind me, why do we even invite Greg?\" She asked settling in beside me, opposite Kayla. Kayla was still up to her tricks, with her hand under my wrap, which Erika noticed with a knowing grin.\n\n\"Alice,\" I reminded her.\n\nShe rolled her eyes. \"Almost doesn't seem worth it. I owe you one.\" She leaned in and gave me a soft kiss. \"How can your lowly slave ever repay you, Master?\"\n\n\"I'll think of something, Kajira.\"\n\nShe chuckled. \"I bet.\"\n\nThe bidding had stopped on Darius at 300. Kim didn't have any competition, since Michelle was tapped out, and Lisa couldn't bid. He was intimidating looking; imagine Dwight Howard as Kunta Kinte. Stripped to the waist, ragged rough-spun pants shredded just below the knees, a rope for a belt. It didn't seem fair. \n\n\"Four hundred,\" I said loudly, surprising everyone.\n\nKim glared at me. \"Four Fifty,\" she said.\n\nErika was pressed against me nicely, her hands active on my chest. \"What are you doing?\" she asked\n\n\"Draining the cash pool. I know she has more than 500, and he's the last male available,\" I explained. \"Four Hundred and Eighty,\" I announced.\n\n\"Five Hundred,\" Kim immediately responded, angrily. \n\nI let her have him. I really had no interest in a big, black field slave. Especially not one who looked like he could break me in half. I expected Kim would enjoy owning him.\n\nSheila, our hot, young Dranei was escorted out. I looked over and saw Greg standing up, looking over at me for a second. Once again he jumped the gun. \"Five Hundred,\" he announced.\n\nEven before she was leashed, Elliot was countering the bid, \"Six hundred.\"\n\nThey were bidding in hundreds, indicating this might go high. Michelle was already asking for the next bid. \"Six-fifty,\" Greg growled.\n\n\"Seven hundred,\" I called out. \n\n\"You want her?\" Erika asked.\n\n\"No, but I don't want Greg to get her too cheaply.\"\n\n\"Seven-fifty,\" Elliot had countered, and Greg raised it to 800.\n\nThe way I figured it, Greg only bid on girls he really wanted. With Penny, Erika and Amanda gone, Sheila was probably the most desirable slave remaining. In this crowd of mostly over 30's, her fresh youth went a long way. \"Eight-fifty,\" I called out, looking over at Greg and smiling.\n\nHe looked apoplectic. \"One Thousand!\"\n\nSheila looked at me hopefully, as did our auctioneer Michelle, and I felt a momentary pang of remorse when I let her go. He was going to buy somebody tonight. Let it be Raul's daughter, since he had my wife. Served him right.\n\nPoor girl. She didn't know this crowd. And had little idea of who she'd been sold to. Let's hope he didn't get too drunk.\n\nOnly Elliot remained with his money intact. Every other Master had at least one slave, except for Raul and John, who shared my wife between them.\n\nI caught my breath. I felt another hand underneath my wrap, looked down and saw Erika had moved lower and was now teasing me as well. \"You are both being bad,\" I whispered, while Michelle escorted the next slave onto the stage. Anybody looking our way, couldn't help but notice Erika's actions.\n\n\"Should we stop?\" Erika asked wickedly.\n\n\"Just go easy, Ok? Let's not make a mess,\" I reached down and cupped her breast, through the silky mesh.\n\nMichelle's man servant showed up, and both girl's hands retreated for a moment.\n\n\"I was instructed to give you this,\" He said, placing 6 of the large 50 gold coins into my hands.\n\n\"Thank you,\" I said, adding them to my stash. Erika's payment.\n\nAfter emptying Greg's coffer, everything went according to my new plan. One at a time I bought the remaining slaves, only losing two. Jean Harris, dolled up as a street whore with a drug addiction, went to Elliot for 640. She was one of the skinniest women in the room, and made for a hell of a crack whore.\n\nI was able to pick up both of Greg's slaves, his wife Alice and her sister Marie, for under 400 each. They were cute, but their outfits as brutalized, kidnapped women were scarier than they were sexy. They had been the cheapest sales of the night, and didn't seem happy about it. The few people still bidding were waiting for the last girls it appeared. Denise, the sexy Night Elf was probably their target.\n\nAfter I fetched the first of the sisters, Erika and Kayla ceased their overt fondling of me, to my displeasure.\n\nAfter that, I let Rex outbid me for Jewel Peters, who was dressed as a Roman Sex Slave. I was saving up for Denise, the last auction of the night.\n\nEveryone with any money left was bidding on her, but at 500 gold, there was no competition remaining. She was mine. Earlier in the evening she might have gone for 800 or more. She was extremely sexy as a waifish mesh-bikini clad Night Elf, and the ears were teasingly exotic. \n\nI imagine there might have been some bitterness toward me by my fellow masters. Only Rex and Michelle had two slaves. Troy and I had six between us. And I still had almost a hundred left.\n\nOh well. Next time, they should bring more than one slave of their own.\n\nMichelle was onstage, calling an end to the auction. \"It seems it is time for our Masters and their new slaves to become better acquainted. I would remind everyone of the house rules, and the safe-word 'lavender'. Try to behave yourselves. That's somebody's wife you own, and somebody now owns yours. Think 'Karma'. We'll be having a few contests later in the evening. They'll be announced each hour, on the hour.\n\nChapter 3: Basic (Slave) Training\n\nThe party had started at 8:00 pm, and it was already past 11:00. These parties usually lasted until after 2:00, with many people staying until 4:00 am or later. I wondered how many contests we'd have.\n\nI rose and waved Troy over, \"Let's find a quiet place to get things sorted out,\" I told him. We headed over to the study where we'd camped out earlier, and found that we had it to ourselves. I blew out two of the candles in the room, leaving it barely illuminated by one.\n\nI called our new slaves over, standing over them. \"You are now slaves of Gor. I hope you have an inkling of what that means. We will not harm you, or abuse you, but we expect you to obey. Kayla and Teri will train you on what's expected. Troy will work with you as well. You will refer to him as Master, and as Master only. Am I understood, slaves?\"\n\nThe girls nodded. I looked at each one in turn, waiting for a response. I started with Teri, and Kayla, who each answered, \"Yes, Master.\" Looking at Erika, she nodded, \"Yes, Master, Kajira Erika understands.\" I smiled. Someone had been doing her research. The other three answered in kind.\n\nI left Erika and Denise with Teri, Kayla and Troy, pulling Alice and Marie to the side. \"It's lucky for me you both went so late in the auction. I could have never afforded you during the first half.\"\n\nThey hadn't looked happy with their outcome, but they seemed to perk up at that. \"You think so?\" Alice asked.\n\nI glared at her. \"How do you address me?\" I said menacingly.\n\n\"Master! Sorry Master. Do you think so, Master?\"\n\n\"I'm certain. Seven or eight hundred each, would be my guest. With some changes to your outfits, maybe as much as a thousand,\" I explained.\n\n\"Changes, Master?\" Marie asked. \"What kind of changes?\"\n\n\"They are good, don't misunderstand me, but they don't show you as well as they could. They are scary, more than sexy. Blood, dirt and gore hide your beauty, and the outfits themselves should be more revealing, sexier,\" I explained.\n\nAlice glared at her sister, \"I told you so,\" she whispered.\n\n\"It wouldn't have mattered anyway. Everyone was broke when we came up for sale,\" Marie argued.\n\n\"Slaves, I'd like to make you more attractive, but only so far as you're willing, given the house rules. Would you go with Kajira Teri and modify your outfits? Call it vanity, but I wish my slaves to be the most desirable in the house.\"",
        "\"Modified how, Master?\" Alice asked nervously.\n\n\"I'll let Teri work with you on that, she has a knack for it. If you're willing.\"\n\nThe sisters looked at each other, then turned back to me. \"Whatever Master desires,\" Alice answered for both of them.\n\n\"Excellent. Wait here.\"\n\nI went to Teri and pulled her out of her training session. I explained to her what I wanted, and gave her an idea of my expectations. \n\n\"Yes, Master. Teri understands. She will prepare the new girls for you exquisitely.\" \n\nI pulled her close, kissing her. \"Thank you, sweet Teri. I know you will.\"\n\n\"Master, may this girl ask a question?\"\n\n\"Speak.\"\n\n\"Perhaps, will Master tell this girl about his plans for winning back Kajira Mandy?\"\n\n\"Perhaps,\" I told her with a smile. \"After.\"\n\nShe hugged me tightly, \"Thank you Master. I miss my sister already.\" She drew away, and I watched her take the new girls in tow, and disappear upstairs.\n\nI had one more task to do, before I could enjoy my new slaves. I hunted down the servant girls, drawing the four of them together. They were a veritable smorgasbord of young beauty. Fiona, the pale red-head; Erin, the tanned, blonde athlete; Beth, the buxom brunette; and Jazmin, the milk chocolate skinned, slender runner, with legs that seemed to reach to her chin. Thank God they weren't on the auction block, it would have wreaked havoc with the economy.\n\n\"Ladies, as you may be aware, I'm your sponsor for this evening. Any tips you receive from the guests tonight, I will purchase off of you, one dollar for each gold.\" I checked with the two girls who I hadn't caught up with earlier, and received another 36 gold from them. I gave them each a silver dollar. Again, I explained the value of the solid silver coins. I drew out four more and gave them each one. \"The slave that was sold for 2,000 gold, do you all remember her?\"\n\nThey all nodded quickly.\n\n\"Excellent. I want one of you watching her at all times. This is in addition to your regular duties. Fifteen minutes each, then switch off and report to me. Understand?\"\n\nThey all agreed. The pretty redhead, Fiona, asked, \"It this Ok with Michelle and Erika?\"\n\nI nodded. \"My slave Erika will be told, and Michelle is the one who sold your services to me. I'll make sure there are no recriminations.\" \n\nThey agreed, and the built brunette, Beth, took the first watch. I left them feeling a little better about the situation. A little.\n\nI returned to the study, sitting down next to Troy, while Kayla put her understudies through their paces. I watched them work their way through half-a-dozen poses.\n\n\"Want to fill me in on your plan?\" Troy asked. He sounded a little miffed.\n\n\"Sorry I couldn't tell you earlier. I managed to get my hands on nearly 1000 more gold, including 300 if I agreed to buy Erika when Greg tried to get her. After that, I thought we should get as many of the slaves as possible. That way, we can keep Teri and Kayla, maybe Erika, and trade the remaining for Amanda. Once they've been trained up nicely and made as desirable as possible.\"\n\n\"Denise is a cutie, but I don't know how far adding Alice and Marie are going to go toward getting Amanda back,\" he said. \"Face it, Marie is anorexic and Alice is just plain fugly.\"\n\nFugly? Anorexic? Kind of harsh. Alice had a dynamite body, and Marie looked like a model. Not everyone was going to measure up to Amanda, but I thought they were both more than Ok. Very doable.\n\nHe continued, \"Now if you add Erika to the offer, I don't know how they could refuse.\"\n\n\"We'll see. I'm hoping the newness and fun of owning Amanda will wear off in the next hour or so, and having three new slaves instead of one might be enough. Plus the sisters thing should be worth something.\"\n\nWhile we were talking, Erika and Denise came over and knelt at our feet. \"Test them, Masters,\" Kayla said with a smile.\n\n\"Nadu,\" I barked.\n\nBoth girls quickly assumed the appropriate position. \"Your turn,\" I told Troy.\n\n\"Tower,\" he said.\n\nThe girls closed their legs, turning their palms down, and sat upright.\n\n\"Bara,\" I told them.\n\nErika assumed the correct position, on her belly, with her ankles crossed, and her wrists crossed behind her back. Denise left her arms to her sides, until Kayla reached down and pulled them onto her back, crossing them.\n\n\"Don't embarrass me, slave!\" Kayla hissed. She used a leash on Denise's rear to get her point across. The girl squirmed at the impact, but remained silent.\n\nDenise was still wearing her cloak, and Kayla bent down to remove it. \"This is just getting in the way.\"\n\nI stopped her. \"Remember the rules, Kajira. No slave can be made to remove clothing. Besides, I like it.\" \n\nI got up and knelt between them. \"Do you understand what this position is for, Kajira?\" I ran my hands over Erika's butt cheek, giving it a squeeze. \n\nErika answered swiftly. \"For binding, Master?\"\n\n\"Precisely.\" I pulled out some leather strips from my pouch, one of a dozen I'd come prepared with. I quickly encircled her hands with it. Turning, I did the same to Denise. Moving to their feet, I bound their ankles.\n\n\"How do you feel, Kajira Denise?\" I asked.\n\nShe whimpered. \"Helpless, Master. Helpless and scared.\"\n\n\"Good.\" I took a moment to stroke her thigh, feeling her squirm beneath my hand.\n\nI sat back down in my place. Troy grinned and got up. \"Do you know the command 'bracelets'?\"\n\nKayla answered, \"Forgive me, Master. I did not instruct them on that one.\"\n\nErika spoke up, \"Kneeling, hands crossed behind the back, Master?\"\n\n\"Excellent. Yes. Let me assist you.\" He stood over Erika's legs, leaned over and pulled her upright into a kneeling position. Then he turned and did the same for Denise, getting her to gasp when he did so.\n\n\"Leash,\" he said quickly, and both girls obediently turned their heads to the side, lifting their chins and exposing their collar for leashing. He grabbed Denise's chin which was facing away from him, and turned her to face him. \"You face the Master, whichever side he's on. Understood?\" He said it quite forcefully.\n\n\"Yes, Master,\" Denise whispered, and I could see she was trembling uncontrollably.\n\nI moved beside Troy. \"Shall we untie them? I would like to see some more positions.\"\n\nWe put them through their paces for a while longer, before allowing them rest. Erika seemed to take to her servitude eagerly, but Denise looked terrified. I drew her aside, sat down and gestured in front of me, \"Nadu, Kajira.\"\n\nShe took the position, kneeling in front of me, legs open. Not wide enough, but the moment wasn't right to correct her. I moved closer, kneeling in front of her, one of my legs between hers, and I lifted her face by the chin, so she could look at me.\n\n\"Relax, Denise. It's just a game. You're too tense. Let yourself go.\"\n\nShe only seemed to tremble more. \n\n\"Take a deep breath, and tell me what's bothering you. Forget about the slave thing for a moment.\"\n\nShe took a couple of breaths, then I saw a little of the tenseness disappear. \"Are you getting even for Raul buying Amanda?\" she asked timidly.\n\nI laughed. \"Not at all. You're one of the sexiest girls here. I was excited to be able to put my leash on you.\"\n\nShe looked at me angrily. \"No I'm not. I'm the plainest girl you bought tonight. You could have bought Wendy if you wanted, or Sheila. I was just the dregs at the end.\"\n\nI looked at her hard. \"Stand up.\"\n\nShe stood slowly, inches from me. \n\n\"Now turn around, slowly.\"\n\nShe turned, her head on a swivel, watching me watch her.\n\n\"Lift your cloak out of the way.\" It reached just a bit below her ass and blocked my view.\n\nShe pulled it to the side, and held it in her arm, letting me see that her bottom only had a simple chain running up between her cheeks, connecting to the waist band.\n\n\"Sit,\" I instructed her.\n\nShe sat before me, her legs tucked to the side. I moved beside her, my arm across her belly, hand on her waist. \"You're beautiful. I've always thought so. The thought of owning you is making me hard.\"\n\nShe gasped, pulling away from me. \"Why would you say that? Why tease me? I see your other girls, like Erika and Alice. I have no tits, and no ass. I never thought you could be so mean, Jack.\"\n\n\"Stop being ridiculous,\" I snapped. \"You're beautiful. Having you kneel before me, dressed like that is driving me crazy.\" I moved my hand to her bare thigh, stroking it softly. \"I want you so bad I can taste it.\"\n\nShe squirmed under my touch. \"This is crazy, Jack. What are you doing? We're both married. Am I supposed to just forget all that and give myself to you?\"\n\n\"I'd like that very much,\" I told her smiling. I stood and took her hand. \"Troy, I'll be back in a minute. I hope you don't mind me leaving you with the Kajira.\"\n\n\"Don't hurry back,\" he laughed, while the two women openly stroked his hardness. He appeared to be quite demanding as a Master. I could understand Kayla, of course, but Erika? She was certainly adapting well to the role of slave. I wondered about her outfit. Was there something about her I didn't know? Did submissiveness come to her naturally?\n\nDenise looked to be in shock. I took her hand in mine. \"Come on, let's see what's going on at the rest of the party.\"\n\nIt was as I'd hoped, a few minutes of wandering and we could see all kinds of craziness going on. Everyone seemed to have different ideas of how to treat their slaves. In a corner I saw a Master being fed, his hand straying all over his slave. I saw another slave sitting between her Master's legs, facing into the room while he massaged her bare shoulders. I wondered which of them was really the Master. Peering into the dining room, a male slave was lying on his back, while his mistress straddled him. They were both still dressed, but the way she was rubbing herself against him, they might as well have not been.\n\nTasha was dancing for her Master, and a couple of others, while their slaves appeared to be waiting their turn, kneeling at their Master's sides, clinging to their legs. I was tempted to stay and watch.\n\nAt least half the party was nowhere to be seen. I imagine the privacy tents were getting their fair share of use. Probably most of the rooms as well.\n\nAt that moment Beth came hustling up to me. \"I've come to report,\" she said sweetly.\n\n\"Go ahead, please.\"\n\n\"She's outside on the porch, nothing too crazy. At first they seemed to be happy being seen walking around with her. Now they have her explaining all the Gor posing positions to them, and then they've been taking turns making her do them. Her outfit isn't helping of course.\"\n\nShe looked so cute, bouncing on her toes while she explained everything.\n\n\"Pretty crazy party, huh?\" she said with a smile. \"Makes me kind of wish I was a guest, and not working.\"\n\nThe big zipper on her leather dress was calling out to me, straining. I reached over and grabbed the handle. The young girl watched me, surprised.\n\n\"You are too sexy to be completely hidden away.\" She gasped softly as I slowly pulled the zipper down almost to her belly button. The top opened, displaying her young flesh. The lower the zipper went, the more it gapped, until the pink of her areola were just starting to show. \"That's so much better. Move carefully, or you'll be giving some of these guys heart attacks.\"\n\n\"Yes...Master,\" she said breathily.\n\nI pulled out a gold 20 and slid it inside the girl's top, pressing my hand against her tender young breast. \"Thanks for the report, I'll see you again in an hour.\"\n\nI took the dazed Denise by the hand and walked over to the window out to the back porch. I opened the blinds for a better view, and we could see Amanda on her knees, hands spread, head to the ground. The men were walking around her, and we saw Raul lean over and caress her butt cheek. In that position, the front of her tunic opened wide, and we could see the side of her breasts quite clearly. Her panties covered very little of her perfect ass.\n\n\"Slaver's Caress,\" I explained.\n\n\"Doesn't that bother you?\" Denise asked, leaning against me.\n\n\"More than it should. But like all the women here, she can stop it at any time. She wouldn't even have to take off her collar. Do you think Raul would force her to do anything, if she told him to stop?\" I asked.\n\nShe hesitated longer than I would have hoped. \"I...I guess not,\" she admitted.\n\n\"Does it bother you to see him with her?\" I asked.\n\n\"A little. Not as much as I thought it would.\"\n\nI put my arm around her, walking around the dancers, where Jean the Crack Whore was dancing salaciously, rubbing herself against each of the men in turn. Her top was untied and her small breasts were hanging free. The music piped through the rooms encouraged slow, sexy movements. I enjoyed the view.\n\n\"And this is what's happening in the open. Who knows what's going on in those tents, or anywhere else in the house?\" I reminded her. \"Compared to what's happening elsewhere, I'd say Raul is remarkably restrained.\"\n\nBack in the study, I could see Troy was enjoying himself. His wife was going down on him, while Erika looked on from only inches away. I went over to the lone lit candle, blowing it out, leaving us in the dark, only stray light from the hall and from the windows lighting our way. \n\nI sat down on the pillows in the other corner, and guided Denise down into my lap, sitting sideways. She came to me easily enough. I held her in my arms. \"It's one big fantasy. Everyone pushing the boundaries, the women free to be the amazing sexual creatures they are, with no recriminations. Is that so bad?\"\n\nShe had settled down, and I could feel her warmth. She leaned against me. \"Why me, Jack? You have five other girls. Erika would be doing that for you now, if I weren't here, wouldn't she?\"\n\n\"They both would,\" I told her softly, nuzzling my face against her hair, my hand on the inside of her thigh.\n\n\"Why me?\"\n\n\"I want you. I always have. And now you're mine. It's as simple as that.\" I turned her face to mine, and kissed her lips softly. I felt the tip of her tongue brush against my lips. When we finished, she lowered her head.\n\n\"Why are you explaining all this to me? Why don't you just order me to service you?\" she asked, squirming nervously in my lap.\n\nI put my hand on her breast. I wasn't rejected. \"On Gor we have many types of slaves. White silk slaves are virginal, and their privates are off limits. Red silk slaves are pleasure slaves. Yellow silks are for tavern servants, where the price of your drink includes their use. The rare black silks are for slaves born and bred as passion slaves. Grey is for domestic slaves, who are little used.\" My hand was squeezing her tiny breast gently, and I could feel her hard little nipple responding.\n\n\"For tonight, I let my slaves choose their own silk colors. If you choose grey, you will not be manhandled. If you choose white, your panties are safe, but not much else. I'm hoping you'll choose red.\"\n\n\"Amanda wears brown,\" she murmured.\n\n\"She's a new capture, once I take her home she'll wear nothing.\"\n\n\"Teri's in white.\"\n\n\"Only because it looks good on her. When Amanda and I take her home tonight, I assure you, she'll no longer be white silk.\"\n\n\"I still don't understand, Jack. You have Amanda. And it looks like you have Teri, too. Every man is jealous of you. We're all jealous of your relationship. Why would you do this?\" She nodded to the side, where it appeared Erika had taken over what Kayla had been doing. \"I feel like chopped beef compared to the prime rib you sleep with every night.\"\n\nI held her softly. \"Things aren't always as they seem, are they? Would it shock you to know that our marriage has been on very shaky ground? I may sleep beside her every night, but I'm lucky to sleep with her a handful of times a year.\"\n\nShe looked surprised. \"You too?\"\n\nI nodded solemnly. \"Until a couple of nights ago, I may have had the most boring sex life in this building.\"\n\nShe laughed softly, sadly. \"I doubt that. The bloom is off the rose in our house as well. It's been over three months.\"\n\n\"I find that hard to believe, Denise,\" I told her, giving her a warm squeeze. \n\n\"Harder to believe than Amanda not getting nailed every day?\" she asked.\n\nShe had me there. \"Or Bob leaving Teri?\" I added. \"I wonder what's wrong with all of us?\" I shook my head. \"Since we're sharing secrets, I'll confess. Our problem, at least for me, has been variety.\"\n\n\"Variety? You're looking for something else when you have her?\" she sounded a little irritated with me.\n\n\"I'm looking for something else WITH her. For nearly 10 years, she's been the most boring lover imaginable. Only missionary. And she only puts up with me, almost never responding.\" I shook my head, \"God I must be drunk sharing this with you.\"\n\nShe looked at me warmly, her hand moving across my chest. \"I'm sorry, Jack. And I promise, this will stay between us.\"\n\nI laughed it off. \"It's not all bad. When Teri decided to join us for the party, and they practiced their 'slave' roles, things in our house took a decided turn for the better. Last night was the best sex I'd had with my wife since we've been together. She surrendered as a slave, and she came for me, and allowed me to have her in new ways. Having Teri there with us made it all the more exciting. She even participated a little, and it only seemed to drive Amanda crazier. I think we've had a breakthrough, and that's why I was trying to buy her back, because things may still be a little shaky.\"\n\n\"I guess that explains Teri's attentive behavior,\" she said.\n\nI lifted my hand to her breast again, cupping it softly. \"But somebody's husband was determined to stop me.\"\n\nShe frowned. \"Not my idea. Believe me. The last girl I wanted him to buy was Amanda, although from what you're saying, if she's frigid, that could be a good thing.\"\n\nI shook my head. \"I don't think she'll be frigid tonight. She's exploring a new side of herself. Raul and John may have hit the perfect night to buy her.\" I realized after I said it, that it might not have been what she wanted to hear.\n\nDenise didn't seem to take it wrong. \"I don't know what's wrong in our house. I don't. It's been three years now. I deny him nothing, and try to be open to him, but he's shut down. Once in a blue moon he gets amorous, and it's usually good, but I know that he's not happy with me. I just don't know why,\" she sounded so sad, on the verge of crying.\n\nShe felt warm in my arms, and I was hard, holding her. I squeezed her breast. \"I wish I could tell you I had some kind of answer, but obviously, I'm not the one to ask. Although I will say that last night Amanda and I talked for the first time ever about a lot of things that had never come out. It was good.\"\n\nShe nodded. \"We don't talk. Not much. Hell, I don't think I've had a conversation with him in years, that bordered on the honesty I'm sharing with you.\"\n\nI leaned down and gave her a kiss. \"You know I really am crazy about you. I have been for years.\"\n\nShe grinned, nodding shyly. \"I know you like me. And I appreciate it a lot. You make me feel good, attractive. Wanted. I still don't know why me, but I'm not complaining.\" She took my hand in hers and brought it to her mouth, kissing my fingertips. \"I like you too, Jack. A lot.\" She kissed the palm of my hand. \"I'm glad you bought me.\"\n\n\"You are attractive. Beautiful. And ridiculously sexy. I want you so bad it hurts.\"\n\nShe put my hand back on her breast, turned and kissed me. It was different, intimate, loving, not passionate, but promising a lot more.\n\n\"So are you ready to choose your silk color, beautiful Kajira?\" I asked softly.\n\nShe had been sitting in my lap sideways, but she turned and straddled me. \"If I choose red?\" she asked coyly, pressing her crotch against me.\n\nI reached behind her, spreading her cloak out before sliding my hand between her legs, and cupping her pussy. I gave it a squeeze. \"What do you think?\"",
        "She slid off my lap, and reached under my leather wrap, her eyes glued to mine. I felt her small hand against my cock, and her fingers wrapped around it. \"I can't believe I'm doing this,\" she whispered. She stroked me slowly. \"May I see it, Master?\"\n\nI flipped the loose outer end back, then pulled the other side out of the way. I was hard as a rock for my lonely little elf slave. Not too surprising, the way things had been working out.\n\nHer hand continued its slow stroking, and she moved closer, watching me carefully. After a few more strokes, she got up and straddled me again, spreading her cloak out behind her. \n\nThe top of her outfit was a see-through white material, with half a dozen silver chains spread across it, meeting at the top, and spreading out below. It was tied to her with a thicker twisted silver chain wrapped around her body. The bottom had a similar chain, with the same clear material, and just a few vertical chains running from the belt between her legs and up the back. I could see the slight change in color where a small mound of pubic hair was mostly hidden from sight. \n\nThose chains were rubbing against me, and I lifted her by the ass, raising her high enough for me to reach between her legs and pull the material to the side, exposing her. She caught her breath loudly.\n\n\"Those chains were rough against my skin,\" I explained.\n\n\"Sorry, Master.\" She kept her hips raised as if in invitation.\n\nI rubbed my cock against her, and she whimpered softly.\n\n\"What silks will you wear, pretty Kajira?\"\n\n\"Choose for me,\" she said softly, \"Master.\"\n\nI laughed softly, rubbing the head between her moist lips, nudging her open. \"I choose red for you. Will you accept me as your master, Denise?\"\n\nShe leaned forward and kissed me softly. \"Denise is Master's red silk slave.\"\n\nMy cock was poised and I pulled her down roughly, penetrating her to the hilt. She cried out sweetly. \"Master!\"\n\n\"Wrap your legs around me, Kajira,\" I commanded.\n\nShe unfolded each one, sitting down more fully. \"Too much,\" she said with a grimace.\n\n\"Stay still now, and squeeze me with your treasure.\"\n\nShe wrapped her arms around me, her head tucked into my neck. I felt the warmth of her sheath squeezing around me. From behind, with her cloak covering us, it would look like a simple hug.\n\n\"Perfect,\" I whispered, caressing her ass cheeks with my hands.\n\n\"Amanda's a fool.\" She continued squeezing me, making me feel incredible. I lifted her face and kissed her fiercely. She kissed me back, and I felt her hips grind down.\n\nI pulled my lips off of hers. Her tongue reached out to me, begging for more. \"Now stay still.\" I lifted her top over her breasts, exposing her small tits, not much more than bumps on her chest, capped with the cutest erect nipples. I took one in each hand, pinching them softly.\n\nShe stopped her motion, and I tensed my PC, hardening, moving inside her. Over and over I did it, pumping the blood into my swelling cock. \n\n\"God,\" she gasped. \"It's growing inside me, stretching me. I can't believe how big you are! How can she resist this?\" \n\n\"How does it feel to be owned, Kajira?\"\n\n\"Wonderful, Master,\" she groaned softly.\n\nI lifted her ass up, making some room between us, and thrust up into her repeatedly, until she was quivering. \"Master...master...master,\" she groaned at each new thrust. I thrust up hard, and felt my first slave orgasm of the evening. \"Master!\" she cried out loudly, drawing some giggles from across the room. \n\nI lowered her onto my cock, resting, while she caught her breath.\n\nI leaned down and sucked on her bare nipple, teasing it with my tongue. So they weren't the biggest. I liked how they tasted.\n\n\"I would feel your lips on me, Kajira,\" I told her softly.\n\nShe slid off of me, and knelt between my knees. Her face was so pretty, I regretted blowing out the candles. I felt her mouth wrap around the head of my cock, and slowly slide down my shaft.\n\n\"I chose well,\" I told her, caressing her head. \"Anything but red for you would be a shameful waste.\"\n\nShe was good at what she was doing. Too good. If she kept it up, I would come, and it was far too early in the night for that. I pulled her up and took her in my arms. \"Thank you, Kajira.\"\n\nShe held me tight, breathing deeply. \"Thank you, Master, for allowing this girl to pleasure you.\" She pulled away blushing. \"And for everything.\"\n\n\"You understand that I am not your only Master, don't you little slave?\"\n\nShe nodded cautiously. \n\n\"I can freely give you to anyone I choose, now that you wear the red.\"\n\n\"Yes Master. Denise understands.\"\n\n\"I will not pass you around like some cheap tavern slave, but Master Troy is of Gor, and if he desires you, I would give you to him.\"\n\nI felt her shiver for a moment. Then she got up on her hands and knees, and kissed me again. \"Whatever Master desires. I only hope that Master is not displeased with this girl.\"\n\nI laughed. \"No. Not displeased. Just the opposite. I had to stop you or else I would have had to come in that sexy mouth. But it's too early for that. I plan to use you much more thoroughly.\" I gave her another kiss. \"Now go to Master Troy, and tell him you are red silk.\" \n\nShe seemed nervous. I drew her close. \"You've freed yourself for the night, pretty slave. The decision is no longer yours. You will be used, and used well, as a pleasure slave. As you should be. Relax and be the sensual creature you were born to be.\" I gave her a squeeze. \"What happens in Gor, remains in Gor. Feel free, and know that what happens here is our secret, unless you should decide otherwise.\"\n\nShe nodded, gave me a quick kiss. I held her head and made it a thorough one. Then she crawled across the room. Seeing her tight little ass depart, I was tempted to mount her. Tempted sorely.\n\nI heard voices from around the corner, and was soon greeted by the sight of my sweet white silk Teri returning, with our two new girls in tow.\n\nI stood, straightening my outfit, and greeted her with a hug. \"Let's see how you've done.\"\n\nThe room was too dark for a good view. I walked into the hallway where the light was better.\n\nI stood before Alice, looking her over. What a difference. All the fake dirt, grime and blood had been washed off of her tan skin. She'd removed her bra, and the tears to her shirt were maddening. The bottom of her right breast protruded almost completely through one long opening, and several small tears on the left side showed more skin than the tattered shirt covered. One oval tear was just to the outside of her nipple, the dark flesh surrounding her nipple slightly exposed. The shirt had been tied tightly at her side, the thin material straining to keep her breasts covered. Her ragged hair was pulled back in pig tails, and her makeup made her look young, very young. Disturbingly so. \n\nTeri was a devilish genius.\n\nI walked around her, and couldn't help but reach out and touch her ass. Her jean shorts had been shortened, and were in tatters. Her right butt cheek was completely exposed where a large tear went from the bottom all the way to her belt. Her tiny white panties were clearly visible.\n\n\"Amazing,\" I told her. \"I'm torn between protecting you and ravishing you.\" I smiled at her, \"I should warn you, the urge to ravish you is winning.\"\n\nShe blushed, \"Thank you, Master.\"\n\nI turned to her sister, who, if conceivable, looked even better. Marie was rail thin. Tall and without an ounce of fat on her body. She had a dancer's figure, no surprise, since it was her profession. Her dress was torn almost completely off, starting just below her breasts. It exposed her entire body, down to her protruding hip bones. You could count each of her ribs. The tattered remnants hung down below the edge of her hip. The bottom was torn at an angle, drooping halfway down her thigh. I reached in and caressed her side, walking around her, taking in the erotic view. Looking closely, it was obvious she was braless. I raised the bottom of her shirt in back, and saw that she was naked below as well. Her hands moved behind her to cover her butt, then amazingly grabbed the bottom of her outfit, and held it up for me. I caressed her skinny naked ass.\n\nMoving back in front of her, I looked into her pretty face. Her hair was loose and wild, her eyes painted dark, her lips unadorned by lipstick. Her features were sharp and angular. She looked liked she'd been locked in a basement and starved. I sure as hell had something I'd like to feed her.\n\n\"Jesus,\" I whispered, \"You are unbelievable.\"\n\n\"Is something wrong, Master?\" she asked softly.\n\n\"Wrong? I can't let anyone see you like this! It'll cause a riot. I can barely keep from throwing you down and ravaging you myself.\"\n\nShe giggled. \"Master shouldn't resist his urges.\"\n\nI took her and her sister by their hands and dragged them into the study after me. Back in my favorite corner, I commanded Teri. \"Nadu.\"\n\nShe dropped to her position.\n\nI looked over at the two new slaves. \"That is the most common Gor slave position. Nadu. Now do the same.\"\n\nThe girls got in position on each side of Teri. I couldn't resist looking between Marie's open legs, seeing her sexy little pussy, obviously moist.\n\n\"Kajira Teri, fetch Erika.\"\n\nShe came back moments later with Erika at her side. Erika dropped to her knees. \"How may I serve you Master?\"\n\n\"For the moment, I would have you teach these two the positions, and the ways of Gor.\"\n\n\"Yes Master. Kajira is honored that Master would trust her with such delicious belongings.\"\n\nThe girls seemed willing, much more so than Denise had been, and it was quite a sight to see Marie's body exposed as she moved from each position to the next.\n\nI drew Teri to my side. \"Damn, girl. What a change! You did well.\"\n\nShe giggled. \"Thank you Master, they clean up nicely don't they?\"\n\n\"No way Greg deserves them.\"\n\n\"Master is pleased with Teri?\" she asked teasingly.\n\n\"Need you ask?\" I pulled her close, speaking softly. \"Have you and Amanda made plans for us, after the party?\" \n\nShe climbed into my arms, resting her head on my shoulder. \"Mom has Becky until Sunday night. I'm yours all weekend, Master. Amanda's idea.\"\n\n\"Delicious. Have you two concocted any more schemes, Kajira?\"\n\n\"We stay in your collar all day Saturday. Yours to command and use however you want, Master.\"\n\n\"I want to feel your hand on me, slave girl\" I told her softly.\n\nShe chuckled, sliding her hand inside my wrap. \"This girl would ask a favor, for later, if Master pleases,\" she said.\n\n\"First girl has earned it. Ask.\"\n\n\"When we're home, don't be afraid to ask me to do things with Amanda.\"\n\nShe giggled when my cock swelled in her hand. \"Naughty things,\" she teased.\n\n\"Jesus, girl, where have you been all my life?\"\n\nShe pressed her lips to my chest. \"Just down the block, with the wrong Master.\" Her lips trailed down my chest to my waist. Then she moved back up kissing me on the lips. \"Now that I'm in your life, I hope we can find a way to make it more than temporary. Master.\"\n\n\"I'd like that.\"\n\n\"Would Master like to have both Amanda and me whenever he wants?\" she teased.\n\n\"It would be a dream come true,\" I admitted.\n\n\"Then make sure that she gets most of your attention, and mine. As long as she comes first, maybe she won't mind me being a somewhat permanent fixture.\"\n\n\"Hardly seems fair to you,\" I told her.\n\n\"Silly Master. I'd gladly be your fuck-toy, to be used however you want even if it meant my only purpose was to suck your cum out of your gorgeous wife's cunt and ass.\"\n\n\"You're driving me crazy,\" I confessed.\n\n\"Driving YOU crazy! I'm dying to feel you fill all my holes and drown me in your juice.\" She kissed me again. \"But now, I think Master has some new girls that need breaking in, if we're going to get Kajira Mandy back.\"\n\nI sat up, just as Jazmin, one of my watchful servants, came in. She approached and knelt down beside me. \"Your girl is in one of the privacy tents, giving lap dances for 50 gold. She's very good.\" I could see her watching the new girls work through the positions. \"Fiona is by the tents, collecting payment when they're in use. She'll keep an eye on her.\"\n\nLap dances, huh? Things were moving ahead quickly. We didn't have much time to waste. \"Thank you Jazmin, I appreciate it.\"\n\nShe smiled for me. \"Anything else you'd like me to do while I'm here, Master? Anything at all?\"\n\nThese young girls were killing me. \"As much as I'd like to, I think my hands are full at the moment. And Erika would kill me if I monopolized all your time.\"\n\n\"Aren't you at least going to adjust my costume as well?\" she asked with a mischievous grin.\n\nI reached over and slowly pulled her zipper down. She was much smaller upstairs than young Beth, and even after pulling it down as far as her panties, it stayed mostly in place, exposing the swell of her small breasts, but not much more. I pulled out a gold 20, and slipped it inside of her dress and panties. \"Thank you, Jazmin.\"\n\nShe stood, carefully testing her outfit. It was fun to watch her wiggle, and see how much it exposed. She seemed happy with the new look. \"This should help with the tits. I mean tips.\" She opened the top, showing me her breasts. \"If you feel like expanding your harem later, look me up.\"\n\nGod, she was brazen.\n\nTeri whispered in my ear, \"I'd love to see you bang the hell out of her, while I sat on her face.\"\n\nI laughed out loud. \"You are nothing but trouble, Kajira! Why did I ever think you were sweet?\"\n\n\"Only stating the truth, Master,\" she said saucily.\n\nErika seemed to have finished with the girls and they were seated together talking. I sat down with them.\n\n\"Ladies, you now have a choice to make. Denise has already made hers.\" I explained the selection of silk colors to all three. \"I'm leaving it up to you to decide your colors.\"\n\nErika was quick to respond. \"Since I'm wearing black already, black silk would seem appropriate,\" she told me.\n\nI grinned. \"You know black silks are rare and very difficult to earn.\"\n\nShe reached for me, sliding her slim arms around my chest. \"Erika would like Master to determine for himself if this girl is worthy of the black.\"\n\nI pulled her to me and kissed her hard. \"Black it is, for now. We'll see if you've earned the right to keep them by the end of the night.\"\n\nShe whispered in my ear. \"When this party is over, you can test me all you want.\"\n\nShe pulled away from me. I looked over to the other two. \"Any thoughts? Whatever you decide I'll abide by.\"\n\nAlice looked a little hesitant. \"What does white really mean?\"\n\n\"Your bottoms stay on. Everything else is pretty much fair game.\"\n\nShe looked over at her sister. Marie smiled, \"This girl would wear red silk for her Master.\"\n\nDamn.\n\n\"You understand I'm not your only Master here? Troy is your Master as well. And I may very well trade any one of you off later.\"\n\n\"If you trade me, then Gor rules no longer apply?\" she asked cautiously. \n\n\"Your new Master would have his own rules.\" I told her.\n\nShe smiled sexily. \"Then this girl would wear red silk, as long as she is a slave of the Masters of Gor.\"\n\nAlice poked her. \"Marie!\"\n\nShe laughed. \"I'm single, not tied down to some jerk. Let's have some fun. Wear red with me, Alice!\"\n\nShe hesitated. \"I can't. He'd kill me.\"\n\n\"Fuck him. He bought that big tittied college girl. What do you think he's going to be up to?\" \n\nSounded like Marie didn't think any more of Greg than the rest of us.\n\nAlice glared at her sister. \"Let's not talk about that.\" She turned to me, \"Master, I...I'd like to wear white.\" \n\nI reached out and cupped her full breast, making her gasp. \"You understand what white entails.\"\n\nShe looked at me, then pulled my hand off of her breast. To my surprise, she lifted her shirt, and put my hand back on her exposed tit. \"I'll wear white for you tonight, Master.\"\n\n\"For both your Masters,\" I reminded her, grasping her nipple between my fingers.\n\nShe closed her eyes, squirming while I tugged on her nipple. \"This girl will wear white for the men of Gor.\"\n\nErika laughed and gave her a hug. \"We're going to have so much fun tonight.\" She turned to me. \"Master, if it would please you, I have some colored silks I could get. Perhaps you could tie them to our collars, reminders of our position?\"\n\n\"That would be nice, Kajira. Do it.\"\n\nShe hopped up, and took off.\n\nI turned to Teri. \"And you, saucy girl. Why don't you check on how things are going with Amanda?\"\n\n\"Yes, Master.\" She got up and left me with the sister slaves.\n\n\"Come,\" I addressed Alice and Marie, \"I wish to get to know my slaves better.\"\n\nI retreated to my cushions. \"Kajira Marie, belly.\" I patted the ground to my side. \n\nShe laid down beside me, on her belly, legs apart, hands to her side.\n\n\"Kajira Alice, slave lips.\" I gestured to my other side.\n\nShe dropped to her knees, leaning forward, her lips presented. I kissed her. I started softly, and when she responded, increased my ardor, probing her mouth with my tongue. She moaned softly.\n\nI pulled away and pressed my lips to her ear. \"I'm going to play with your sister now. Then I'm going to use her. Prepare me for her.\" I pulled back my wrap, exposing myself.\n\nShe looked at me with something akin to fear in her eyes. She looked down below my waist. \"But I'm white, Master.\"\n\n\"Your shorts will remain intact. Your hand and your mouth are mine to use, sweet slave. You may start with your hands.\"\n\n\"Must I remain kneeling, Master?\" she asked, her hand moving slowly forward.\n\n\"No, be comfortable. But do a good job.\"\n\n\"Yes Master,\" she said softly, stretching out beside me, her hand encasing my cock.\n\nI sighed in pleasure, then turned to the patiently waiting Marie. I reached down and stroked her skin, lifting the bottom of her dress, and grabbing her tight ass. \n\n\"Thank you, Master,\" she said softly. I could hear the eagerness in her voice.\n\nI took my time playing with her, while her sister stroked my hardness. Her skin was amazingly soft, and it was a pleasure to touch her, caress her, learn her body.\n\n\"Slowly, Kajira Alice. Just keep me ready.\"\n\n\"Yes Master,\" she answered.\n\n\"Marie, do you know the 'She Sleen' position?\"\n\n\"Yes Master.\"\n\n\"Assume it.\"\n\nShe rolled over, her head to my feet, on her elbows and knees. I reached for her leg and tugged her closer, and she moved so that her bare bottom was pointed right at me, raised high, accessible. I lifted the scraps of her dress, and pushed them up her body, until they slid down and were gathered at her shoulders.\n\nI reached out and ran my fingers across her cheek, down her crack and eventually between her legs, feeling her moistness. She was definitely enjoying this. I probed her slit, toying with her, watching her squirm. I slid two fingers inside of her, playfully.\n\nI moaned, against my will, when I felt Alice's mouth replace her hands. God, that felt nice! While I diddled her sister, Alice made sure that I was more than ready. \n\n\"Marie, Nadu.\"\n\nShe got up and saw me gesturing toward the space beside me. She knelt down facing me, and I gently turned her to face her sister. I reached between her legs, sliding my fingers inside of her. \"Your sister is preparing me for you. Thank her.\"\n\n\"Thank you, Alice,\" she said softly.\n\n\"Come closer,\" I told her.\n\nShe scooted as close as possible, then leaned in further. I moved my mouth close to her ear. \"Have you seen her do that before, sweet slave?\"\n\n\"No Master.\"\n\n\"She's talented.\"\n\n\"It appears so, Master.\"\n\n\"Are you as talented, slave girl?\" I teased.\n\n\"I believe so, Master.\"\n\n\"Help her.\"\n\n\"Yes Master. Thank you.\"\n\nShe moved down between my legs, and I watched Alice's eyes follow her. Marie moved her face closer, reaching out with her tongue, bathing my balls. She rose up higher, her sexy mouth kissing the bottom of my shaft, while her pretty sister's face move up and down. She extended her tongue and licked me, then I watched in fascination as she reached for her sister's head. Marie stopped Alice's movements and pressed her cheek against her sister's. In tandem, Alice slowly took me deep into her mouth, while Marie licked my shaft just below her sister's stretched lips.",
        "Erika chose that time to appear with the silks in hand. She had already wrapped a black scarf around her own collar. She grinned as she leaned down and threaded a red scarf through Marie's. Then she moved around the girls and carefully worked a white scarf through Alice's. She came up to me and leaned down for a kiss. \n\n\"Don't forget this slave, Master.\"\n\n\"That would be impossible. Your turn will come soon.\"\n\nShe hopped up and walked across the room to give Denise her scarf.\n\nMarie took control. She pulled her sister up off my cock, and took it in her own mouth. Alice lowered her face and took over the licking, still working together. Soon they were taking turns, sucking me aggressively, using their hands and mouth. Alice was able to take my entire length, forcing herself down, sliding my aching cock down her throat. She'd pull away gasping, and her sister would do her best to do the same. Marie would push and gag, but couldn't take all my length. She was not as talented as her sister, but I gave her points for trying.\n\nI had been determined to use Marie, but I couldn't stop this blow-job for the life of me. Even when Teri came in, kneeling beside me.\n\n\"They have her in one of the tents, where some Masters and even some of their slaves are paying to dance with her. Hands are doing a lot of wandering.\"\n\n\"Does she seem distraught?\" I asked, moaning as Alice took me deep again.\n\n\"She seems Ok with it, I guess. Her hands are very quiet, but she doesn't seem to be resisting or complaining at all. She dances nicely. If I had to guess, I think she enjoys being the center of so much attention.\"\n\n\"The first competition should be soon,\" I told her. \"We'll see what we can do afterward.\"\n\nI turned back to where the sisters were doing there remarkable job. \"That's enough, slaves. Or else Master will be coming soon.\"\n\nTeri was cuddling me, watching the sister's performance. \"He said stop Kajira.\"\n\nAlice pulled away, gasping. \"Thank you, Master. Alice has prepared master for Kajira Marie.\" She leaned down and sucked me gently, loathe to stop.\n\n\"She Sleen, Kajira,\" I barked to Marie.\n\nMarie got back on her knees, presenting that sweet ass to me. \n\nAlice lifted up. \"Use her well, Master.\"\n\nI moved behind Marie, and slid my cock into her. She moaned sweetly as I plumbed her depths. I started slowly, getting used to her tightness, then fucked her harder, driving into her. She was so nice to use, her narrow hips fitting my hands perfectly. Alice came over and knelt down beside us, facing me. She reached out for her sister's ass, squeezing her cheeks and spread her open lewdly. \n\n\"Master looks so big, abusing her scrawny body,\" Alice teased. She gave her sister a delightful spank. \"How is it, sister slave?\"\n\nMarie groaned loudly, \"Amazing. You're really missing out.\"\n\nI stroked her a while longer, then pulled out of Marie and held my cock out to Alice. She hesitated, then moved closer, taking me in her mouth. I slid between her lips a few times, then returned to her sister, deep stroking her. \n\nTeri was parked on my other side, holding me. \"That will be me soon, won't it Master? Pound Teri like that.\"\n\nFor several minutes I switched back and forth between Marie's tight pussy, and Alice's warm mouth. I was in heaven. \n\nI pulled out. \"Sula, Marie.\"\n\nShe was slow to respond, seeming a bit dazed, but she turned over onto her back and spread her legs wide. I lifted her thin stalks to my shoulders, and entered her again, thrusting hard. Teri moved down and pushed the girl's dress out of the way, leaning in and sucking on Marie's tits. Between the two of us we had her moaning loudly. I opened her legs wider, in a large V, driving into her ferociously. She moaned loudly, \"Coming...\"\n\nShe was right, her body shook while her orgasm rolled over her.\n\nI loved having her come on my cock. I eased back, wanting it never to end.\n\nI gestured Alice closer, and had her rest her head on her sister's belly, mouth waiting.\n\nAgain, I switched between the two, spending longer between Alice's lips, before returning to hammer away at her sister. On the very first stroke back into her, Marie cried out, and I felt her exquisite release.\n\nI watched Teri get up and start dragging two of the flag poles together, stringing the material between them, creating a visual barrier from the door. She sauntered back, glancing up at me. \"She's too noisy, bound to attract attention.\"\n\n\"Quiet her, Kajira.\"\n\nIt was wonderful to see her lower her mouth over my sex slave's lips.\n\nI heard the tinkle of a bell, and turned to see the servant girl Fiona enter the room, walking around the makeshift barrier. \"The dancing competition begins in 5 minutes.\" She stood there a moment, letting her eyes grow accustomed to the dim light. Then she came over and stood beside me. \"So this is where the real party is,\" she said softly. \"Wow!\"\n\nI looked at her, slowing my motion inside of Marie. \"Kneel here.\" I pointed beside me. \n\nShe obeyed without hesitation.\n\nI reached over and unzipped her dress down to her belly button. She was nicely stacked on top, and her breasts were in imminent danger of falling out. Even more so when I peeled the top back exposing her tit. I grabbed it, squeezing gently. \n\n\"You can tell me no,\" I told her softly.\n\n\"Yes,\" she smiled devilishly.\n\nI pulled out and Alice's mouth engulfed my cock.\n\n\"Kiss me,\" I told the servant girl Fiona.\n\nShe leaned in and kissed me warmly, while my cock was sucked. As I was kissing her, Alice released me and guided my stiffness back into her sister.\n\nFiona pulled away, then stood, guiding her breast into my mouth. I sucked her hard little nipple, while I fucked darling Marie as hard as I could without losing that perky tit. Fiona shifted and gave me the other one. I reached up under her skirt and grabbed her ass, squeezing her young cheek. I slid her panties down enough to feel her bare flesh. My hips were on auto-drive, plowing away at the helpless slave beneath me.\n\nI couldn't hold back any longer. I bit down on Fiona's nipple, wrenching a gasp out of her, while I slammed into Marie, filling her with my hot seed. When I was finished, I pulled out, to find eager Alice's mouth on me again, sucking me clean.\n\nI kissed Fiona's nipple gently. \"Sorry about that.\"\n\n\"Fuck 'sorry'. I came when you did that.\" She grinned. \"I'll be back later.\" She started to turn away. \"Oh yeah, your girl is dancing with anybody who has 20 gold. Sometimes two or three at once. She's getting groped pretty good. But she's still dressed. More than I can say for this crowd.\" She leaned in and gave me a quick kiss. \"Save something for the help.\"\n\nShe walked away. I looked down to see Teri straddling Marie's face. No wonder I hadn't heard anything from her lately.\n\nAlice got up and gave me a kiss. \"That was intense.\"\n\nMarie's legs were open lewdly, my juices dripping from her. \"Looks like somebody needs cleaning up. Wouldn't do for her to dance like that.\" I said to Alice.\n\nShe blushed. \"Please Master. No,\" she said softly. \"She's my sister. Don't make me do this, please?\" Her pleading was pitiful.\n\nI took her face in my hands, and kissed her lips softly. \"Of course not. I don't want you doing anything you're not comfortable with.\"\n\nShe hugged me. \"Comfortable is not the problem. Sucking your dick after it was inside of her wasn't comfortable, but I don't mind expanding my horizons a bit. Going down on her would be different. Bad.\" She smiled. \"Master.\"\n\n\"I understand. And I'll stay within your limits, as long as you make them clear. Thank you.\"\n\n\"Mmm. No, thank you Master.\"\n\nComing to an understanding was nice, but it wasn't getting Marie any cleaner and our time was running out. \"Kajira Teri, please clean up Marie, the contest is soon.\"\n\nShe stretched adorably, then climbed off Marie. \"Of course Master, my pleasure.\" She settled down between Marie's legs, and went to work. I sat down beside Marie's head, caressing her pretty face. \"How are you, Kajira.\"\n\nHer eyes opened, searching for me. Alice was using Marie's own outfit to clean the poor girl's sloppy face. \"God, that was incredible! I never came so much or so hard. You can be my Master any time.\" She grabbed my hand in hers, squeezing it, clutching it to her breast.\n\n\"The contest starts soon. Will you be Ok?\"\n\nShe had closed her eyes, and was writhing under Teri's ministrations. It looked so sexy, I thought about blowing off the contest, and doing her all over again. Of course, I still hadn't had my way with Erika, and that was near the top of my to-do list.\n\nAnd then there was Amanda.\n\nIt looked like I wasn't going to get an answer from Marie, who was spacing out on me again. I grabbed Teri by the hips and dragged her off of the poor girl. She was strong, and clung to Marie's thighs like an octopus, her mouth working its wonders. I had her completely in the air, and had to shake her to make her let go.\n\nAlice was giggling at us.\n\n\"Enough, Teri! When did you become such a wild thing?\" \n\nShe wriggled out of my hands and turned, leaping into my arms. \"Master, how about me?\" she pleaded.\n\nI held her tightly. \"You're my special girl, Kajira. I'll only fuck you when Mandy's with us. These other slaves are just for fun, and just for tonight. You are more than that, understand?\"\n\nShe hugged me. \"I understand, but you just wait until this collar comes off. I'm going to get my revenge. Master.\"\n\nChapter 4: Assessing A Slave's Worth\n\nI peeled her arms away and set her down. \"Let's go. We'll be late for the contest. Who is going to dance for us?\"\n\nShe grinned. \"It's not really fair is it? Marie's a professional. How's anyone supposed to compete with that?\"\n\nWe were walking to the main room, where the dancers were lining up with Michelle. \"So nobody's going to try?\"\n\n\"I will. But don't laugh. And Erika has something special in mind,\" she leaned into me, giving me a hug. \"Wish me luck.\"\n\nI turned and was almost bowled over by Marie. She hugged me tightly. \"What do I get if I win, studly Master?\"\n\n\"How does a weekend at my place sound, with you, Amanda, and Teri all under my leash?\"\n\nShe grinned. \"Sounds like all the incentive I'm going to need.\" She gave me a quick peck. \"I've been practicing for this Master, choreographed and everything. Tonight, there's no one but us. I dance for you Master, and only for you,\" she whispered and ran off to join the competitors.\n\nOnly six girls opted to compete, and three were on my coffle. None of the men got up on stage and I can't say I blamed them. Of the three women I didn't own, Amanda was one. Tasha and Penny were the other two. \n\nThis should be good.\n\nTeri was right. It wasn't fair. Don't get me wrong, all the girls were beautiful and sexy, and had the men calling out for more. There was a lot of tit jiggling and ass wiggling, and a hell of a lot of skin showing. Erika got creative, and was tied to the slave post, by her hands and feet, and she put on the sexiest show I'd seen in ages. Clearly, she had practiced. Homefield advantage. But then Marie took the stage.\n\nShe was sexuality made woman. Beautiful, graceful, and barely clothed. Her turns were poetry, the arch of her neck, the extension of her arms, the way she held her hands and pointed her toes. A minute into it, the house was dead silent. Her movements picked up pace, frenetic, needful, beyond erotic. She managed to reach down and hold her dress in place when it was most necessary, giving us flashing glimpses of her well used pussy, and sweet young ass. You could see a sheen on her skin, and rivulets of our mixed juices running down the interior of her thighs. Her small tits were almost constantly on display, while her tattered dress struggled to keep up with her.\n\nHer dancing told a story in which you could feel her desperation and fear. She struggled to free herself from imaginary bondage, yanking her arms away from the pole she was tied to. Her struggles alone were mesmerizing. Freed, she peered around, then escaped, fleeing from her captors. She moved, stopped, perfectly still, then switched directions. But her running was fruitless. You could feel her captors closing on her, grabbing at her, striking her, knocking her off balance, tossing her around, throwing her to the ground. She struggled free, only to be captured and thrown down again. I heard a gasp from someone in the audience.\n\nHer captors used her, viciously, then let her escape for a moment, before capturing her and using her again. Her motions were so real, you could almost feel her being penetrated, her mouth used violently, raped repeatedly on her knees, on her back, on her side. She tried to crawl away, before being thrown on her back. The impact of her fall echoed through the room. Her legs extended, while she gazed in fear at the captors holding her open wide. A look of sheer terror appeared on her face, while her final captor prepared to take her. She'd been silent except for the occasional grunt, and gasp, but now she was trembling. A whispered, \"No, please, no\" and then she was tensing her body. The remains of her dress slid down her body, leaving her waist naked for the first time. She suddenly screamed out, loud enough to wake the dead. Her body was being abused, pummeled while she cried.\n\n\"Stop it, someone,\" I heard an anguished voice fron nearby. The audience was definitely getting into it.\n\nMarie's hips recoiled with each thrust, her legs pulled taut. Her muscle control was miraculous, and we could all feel every thrust into her. When her rapist was done, she collapsed, exhausted. She was pulled by her arms to the slave post, and tied back in place. She hung there, well used, and certain to be used again. You could see her sobbing, her body trembling while she cried.\n\nThen she abruptly stood up, smiling and curtsied sweetly. \n\nThe place exploded.\n\nPenny won second, and Erika came in third.\n\nMinutes after it was all over, my dancer came running over to me, throwing her arms around my neck. She was still gasping for air after her exertions. \"Is Master pleased with his slave?\"\n\n\"Incredible,\" was all I could say.\n\nWe were swarmed after that, and I lost her to the throngs of her admirers. \n\nI had bought her for 380 Gold. I would have paid $1000 for the show alone. Never mind getting to fuck the living daylights out of her. I was desperate to do her again.\n\n\"See what I mean? Not really fair, was it?\" \n\nTeri was standing beside me, looking over at where Marie was surrounded by men and women alike.\n\nI pulled her close. \"I loved your dance.\"\n\nShe gave me a poke. \"No pity compliments.\"\n\n\"Behave Kajira,\" I reminded her.\n\nShe stuck her tongue out at me, then smiled. \"Worth the price of admission to see that, don't you think, Master sweetie?\"\n\n\"I think we'll all be talking about that one for a long time,\" I admitted.\n\n\"Shall we find Raul? I think he might be more inclined to trade after that show,\" she said, reminding me of my original intentions.\n\nWe found him easily enough, my wife beside him, on her knees. He'd lost the mask. Couldn't say I blamed him. John was with him, drinking something from a big cup.\n\n\"So what did you think of Marie,\" I mentioned casually.\n\n\"Hottest thing I've ever seen,\" he admitted readily. \"Beats porn to hell and back.\" John echoed his remarks.\n\n\"Would you like to own her? Both her and her sister Alice, in trade for the little barbarian slave.\"\n\nI could see him thinking about it, and he looked over at John, who was obviously considering the value as well.\n\n\"Think about it. You've already owned the prettiest girl here, and now you could have that walking wet-dream too,\" I told them.\n\nRaul grinned. \"You make it sound tempting.\"\n\n\"That shirt is all she owns. Naked underneath it. When you tire of her, you could probably trade her for any woman in the house, and still keep Alice,\" I said.\n\nI saw John scowl. \"Good way to get on Greg's bad side. Not sure I'd like that.\"\n\n\"Then trade them as a pair,\" I urged. \"If you'd like, I could offer you Denise as well.\"\n\nJohn seemed to like the idea of that, but Raul's face clouded. \"Might cramp my style,\" he grumbled.\n\n\"I doubt that. Talk to her. She's feeling pretty rambunctious right now. You might see a new side of her you'd really like.\"\n\nHe kept looking over at Marie, then Alice. \"Give us a second, Ok?\"\n\n\"Sure,\" I told him, while he and John moved away a bit, discussing the deal.\n\nI knelt down in front of Amanda. \"How's it going, baby?\"\n\nShe smiled sadly. \"Tiring. They sure seem to enjoy showing me off and passing me around.\"\n\n\"Nobody's gone too far have they?\" I asked. Teri was beside her, holding her.\n\n\"No, they're not bad, really. But I feel like a ripe cantaloupe, getting squeezed by almost everyone here. Didn't see much of you, though, did I?\"\n\nTeri came to my defense. \"We're watching over you constantly. All those servant girls are reporting everything going on every few minutes. I came over and checked in on you, and so did Jack. We wouldn't let anything bad happen.\"\n\nShe grinned. \"I thought those young girls were a little too curious.\"\n\n\"I'm going to get you back, Amanda. Whatever it takes.\"\n\nThe men came over and this time it was John who spoke. \"Give us half an hour more with her, and then we'll trade her for Marie, Alice and Teri.\"\n\n\"Do it,\" Teri said.\n\n\"Come on guys! Look Raul, you'll be a hero to your wife. You traded to get her back. Denise, Marie and Alice.\"\n\nI knew I had them, but Teri couldn't leave well enough alone.\n\n\"And me, until the next contest,\" she offered. \"Starting now.\"\n\n\"Done,\" Raul said.\n\n\"Hey. Wait a second, you can't trade yourself, Teri.\" I reminded her.\n\nShe slid into my arms. \"Please Jack. This way it'll be best. She won't be alone anymore, and you'll have us both back in less than an hour.\"\n\nAgainst my better judgment I agreed, peering up at the clock in the kitchen. It was already twenty minutes after midnight. \"We make the exchange at ten 'til?\" I asked.\n\n\"Ok,\" Raul nodded.\n\nI pushed Teri over next to Amanda, \"I'll see you then.\"\n\nI gathered Marie, Kayla and Erika together, and lead them back to the study. I hadn't seen Denise or Alice around, and sure enough they were with Troy, already playing. Troy had Denise in his lap and she was riding him. Looked fun. Jeez, the guy had a lot of energy.\n\nI led my three over to the corner. I didn't know if I should break the trade news to Marie now, or at the last minute. I realized I had to tell Troy. \"Kayla, you and Erika wait here. Marie, you come with me.\"\n\nThe girls obeyed, of course, and I moved over to where Denise was bouncing up and down on Troy's lap.\n\n\"Troy, we need to talk a second,\" I told him.\n\nHe reached out and calmed Denise down, until she was sitting almost still.\n\n\"I made the trade.\"\n\nHe smiled sheepishly. \"I was afraid you might.\"\n\n\"After our dancer's little show, I had a few offers. I've traded Teri away until the next contest, and in about 25 minutes, we're swapping these three for Amanda. Raul wants his wife back.\" I added the last for Denise's sake.\n\nTroy laughed, thrusting up into her, making her squeal. \"I can't blame him. You had a taste of this hottie yet? Fucking sweet.\"\n\nI grinned. \"Yeah, but not nearly enough. Them's the breaks I guess.\"\n\nMarie was obviously disappointed. \"But I won for you, Master,\" she said sadly.\n\n\"Yes you did, and you were nothing short of amazing. People will be talking about that dance of yours for years to come. The reward is still on. But I promised my wife I'd do everything I could to get her back. She's being passed around like a sack of potatoes, and two guys sharing one slave is tough on her. The only slave they'll trade her for is you.\"\n\nI pulled her close, willing to offer up a white lie to spare her feelings. \"It was that damned dance. Every man in the house wants you now. I could have traded you straight up if it was only John. But Raul was insistent on Denise, and it seemed evil to split up a matched pair like you and your sister.\""
    ],
    "authorname": "Tx Tall Tales",
    "tags": [
        "wife",
        "threesome",
        "anal",
        "virgin",
        "first-time",
        "slave",
        "gor",
        "oral",
        "harem",
        "cuckold"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/a-gor-y-halloween-party"
}
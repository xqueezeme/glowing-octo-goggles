{
    "title": "The Big Tits Club Ch. 21-22",
    "pages": [
        "THE BIG TITS CLUB by bluedragon\n\n****\n\n-- CHAPTER 21: Caught --\n\n****\n\nIt was getting close to midnight, and I lay in bed dressed in my pajamas not feeling even remotely sleepy. I stared straight at the darkened ceiling, eyes wide open, and yet saw absolutely nothing. Not with my mind a few hundred yards away wondering what was going on at Belle's house.\n\nThe moment Belle kissed me I'd broken the kiss and whipped around in shock while simultaneously trying to hide the evidence behind my body. Really, it wasn't so different from the way I'd reacted that time when Mother walked into my bedroom while I was masturbating to a 4x6 photograph of the BTC girls in bikinis from a beach trip. Mother had pursed her lips, shook her head, and turned to walk away without saying a word.\n\nMr. K's reaction was... different.\n\nHe wasn't aloof, like Mother, nor was he angry. He'd just been surprised, really, staring at us with big eyes, raised eyebrows, and a confused expression on his face. \"Uhhh...\" he muttered, \"is there something you two wanna tell me?\"\n\nBelle jerked upright, now suddenly awake. \"Daddy, I can explain.\"\n\nShe tried to explain. It didn't go well. She was still pretty tipsy, and didn't quite have all her marbles together. He wanted to know if I was her boyfriend, which she truthfully stated I wasn't. He wanted her to explain the 'I love you' statement, which she truthfully (although bashfully) admitted that she did. That got him to ask me if I loved her in return, which I truthfully admitted that I did. And then he asked how long this had been going on.\n\nBelle's precise response was, \"We've only been having sex since November.\"\n\nThen his eyes got BIG.\n\nI muttered, \"I think he would've been okay with you just saying, 'Since November'.\"\n\nMr. K blinked and glanced at me. \"You're right about that.\"\n\nBelle cringed. \"Uh, wait, that didn't come out right.\"\n\n\"Oh, there's more?\" Mr. K folded his arms across his chest, his expression that of a father who had just found out his only daughter was no longer a virgin, and whose patience was wearing thin.\n\n\"Mr. K...\" I started, but he held a hand up, his palm facing me.\n\n\"Matt, I think it's time you went home.\"\n\n\"Sir, I really--\"\n\n\"Did you seriously just call me 'Sir'?\" Mr. K cut me off.\n\nI blinked, not having an immediate response to that.\n\n\"Go home, Matt.\"\n\n\"Please, just let me explain.\"\n\n\"Matt, seriously,\" he said in a voice that did NOT invite further discussion. \"I'm asking you to leave my house. I need to have a private conversation with my daughter.\"\n\nI took a deep breath and thought about arguing the point, but the look Mr. K was giving me warned me not to. I glanced helplessly at Belle, but she just closed her eyes and cried softly. I was still seated next to her on the bed, so I quickly wrapped my arms around her in a reassuring hug and gave her a chaste kiss atop the crown of her head while she patted my forearm.\n\nBut in the end, under Mr. K's baleful gaze, I got up and left the room. Right before I went out the bedroom door, I looked back at Belle, but her attention was entirely on her dad. Clearly, neither of them was going to say another word until I was gone.\n\nSo I left.\n\nThings weren't much better for me at home. As soon as Mother returned after dropping off all the girls, she came straight to my room, knocked twice on the door, and entered without waiting for my response. I sat up in surprise and looked up at her.\n\n\"Belle?\" she asked first.\n\n\"At home, with her dad,\" I replied. I did NOT tell her anything beyond that.\n\nShe nodded, and with that out of the way, crossed her arms over her chest and leveled me with a look. \"Matthew, what happened tonight?\"\n\nI frowned. \"Um, what?\"\n\n\"You've had Friday hangouts with the girls for over a year now, and this is the first time I've ever come home to find a house full of young women in no condition to drive.\"\n\nI winced. \"We, uh, never actually finished the box of alcohol you left us in Tahoe. Sam's big idea was to polish it off.\"\n\nMother blinked at me. \"And it never occurred to you that except for Belle, every single one of them drove herself over here?\"\n\nI winced again. \"Uh, well, no... it didn't.\"\n\nMother pursed her lips. \"And what was with your brilliant idea to have Zofi drive everyone home?\"\n\n\"I really don't think she was drunk. It would've been a perfectly acceptable solution.\"\n\n\"And you calmly evaluated her state of sobriety with your equally sober and unclouded judgment?\"\n\n\"We had it covered,\" I said defensively.\n\n\"You mean a bunch of teenagers THOUGHT they had it covered. I can understand your impulse to handle your own messes, but it wasn't the mature thing to do. You knew I'd come home eventually, and even if I didn't, Belle's father was right next door!\"\n\nI blinked and my mouth dropped open a little. The thought of asking Belle's father to drive had never even crossed my mind.\n\n\"Zofia is under 21,\" she continued, \"and did it ever occur to you to consider what a DUI would mean to her future? Or worse: What if she wasn't quite as sober as you thought, and something actually happened to the girls?\" Mother huffed. \"I don't claim to have been a very maternal parent, but I thought I had drilled into your head the need to be a responsible young man.\"\n\n\"I know, I know.\"\n\n\"Clearly, you didn't know. Not tonight.\"\n\n\"I'm SORRY, Mom.\"\n\nThat brought her up short. With a bit of a smile, she looked at me and asked, \"Did you just call me 'Mom'?\"\n\nI blinked, honestly not able to remember. My brain was still a bit mushy. I didn't think I'd said it, as it was so out of character for me, but I simply shrugged and replied, \"I have no idea what you're talking about. But that said, I do need to say 'thank you' for coming home and saving the day, as it were. You didn't have to drive the girls back home, but you did, and I'm grateful for that.\"\n\nMother smiled, and for half a second I thought she might actually step forward and hug me. But that was a ridiculous thought, and she ultimately waved me off dismissively. \"It's what any adult would have done, parent or not.\"\n\n\"Still. Thank you.\"\n\nMother nodded and turned to leave the room, but stopped short and looked back at me sternly. \"Be better next time,\" she admonished. And then she finally walked out, closing the door behind her.\n\nWith a sigh, I rubbed my forehead and mentally went over all the steps I'd need to make in the morning in order to arrange pick-ups to bring the girls back here so they could collect their cars. But that didn't take very long, and once I was done, I found myself alone in my room, staring at the ceiling, wondering what the hell was going to happen.\n\nAnd I'd been doing this for close to two hours.\n\nThat's when I heard the doorbell ring. I jerked upright and practically FLEW down the stairs. Mother was home, reading in the living room and she frowned at me, asking in a bit of an exasperated tone, \"Now what?\"\n\nI didn't respond, too intent on getting to the door. Without even looking through the peephole, I jerked the door open, and my heart leaped at the sight of Belle standing before me, a rather shy smile on her face. Without hesitation, I reached across the threshold and yanked her up into my arms while she wrapped her legs around my waist. And without even asking her a single thing, I grabbed her head and pulled her to me for a fierce, intense kiss.\n\nFor half a second Belle kissed me back, but then she pressed on my shoulders, pulled her face off mine, and hissed from inches away. \"Matty! He's watching us!\"\n\nI blinked, jerked my head around, and saw that Mr. K was indeed watching us from the sidewalk. And my heart sank down just as suddenly as it had leapt up moments earlier, as I started to panic that I'd just made the situation even worse.\n\nBut Belle giggled and rubbed my cheek. \"Relax, he just wanted to make sure I made it safely inside. It's not every day Daddy lets me walk outside in the middle of the night.\"\n\nI winced, shifted my weight, but didn't set Belle down. She remained perched on my hip as I gave him a nervous wave.\n\n\"G'night, Daddy,\" Belle called in a cheery voice, waving as well.\n\nMr. K took a deep breath, closed his eyes, and nodded slowly. He waved back to us, and then turned to walk back to his own house, moving as if he had aged two decades in the span of the last two hours.\n\nThe air was quite cold outside, so I stepped back and closed the door without letting Belle down from my hip. If you asked me in that very moment, I would tell you I had no intention of losing physical contact with her skin again for the rest of my life. Only when we turned around and came face-to-face with Mother did I remember that we weren't in the house alone. And then I blushed and stared nervously at my feet while Mother arched an eyebrow and gave us a curious look.\n\n\"Good evening, Belle,\" she finally said, quite politely.\n\n\"Um, good evening,\" Belle replied rather timidly.\n\nMother looked thoughtful, and apparently decided not to make any further inquiries. In the end, she pursed her lips, shook her head, and turned to walk away without saying another word.\n\nI carried Belle all the way up to my room.\n\nFifteen seconds after I closed the door, I brushed her strawberry-blonde bangs back from her forehead just before lowering my lips to my baby Belle's.\n\nTwo minutes later, my tongue slid into her already moist pussy, preparing the way before wrapping around her Baby Belle.\n\nFive minutes after that, my cockhead burrowed inch by inch into her tiny tight twat, Belle moaning her arousal against my chest while I dug my toes into the mattress.\n\nTen minutes later, she cried her orgasm into my neck, gripping me with all four limbs while I groaned and responded in kind, filling her up with all my liquid love.\n\n\"I love you, Matty,\" she whimpered in the aftermath, happy tears in her eyes.\n\nStill buried deep within her, I kissed her tenderly and replied, \"I'll love you forever... my Annabelle.\"\n\n****\n\n\"Ha ha, very funny,\" Sam drawled when Belle opened the front door on Saturday morning, clad in my white button-down dress shirt and one of my ties. On her petite 5'1\" frame, the shirt tails hung down past her knees.\n\nWe were all outside on the front porch. Before I'd left to go pick them all up, Belle had expressly told me to let the girls into the house through the front door so she could greet them in this manner. But Zofi and Mari never made it past the front entryway.\n\nZofi had a dance thing to get to. Mari, likewise, couldn't stick around for long, as her family was meeting up with her cousins. They at least had time enough for Belle to ask if there had been any fallout from Mother's little taxi run last night (i.e. \"Did your parents get mad about you coming home drunk and without your car?\"). While none of the parents were pleased, nobody got grounded or anything like that, and while Mother didn't exactly earn brownie points for being a supposed chaperone who let the girls get that drunk in the first place, at least they appreciated a grown-up returning their teenaged daughters home in one piece.\n\nAfter that conversation, Zofi and Mari exchanged hugs with everyone and then left to drive home in their own cars. But Belle, Sam, Naimh, and Alice didn't have anything planned and were happy to have a spontaneous hangout for a bit.\n\nDon't ask me how, but somehow we ended up in front of the big TV playing video games. At least, Alice, Belle, Naimh, and I ended up playing Mario Kart 64 while Sam and Mother ended up sitting at the dining table chatting about... Well, I have no idea what they were chatting about. I was still super-confused about how Sam and Mother had started bonding recently, and didn't know how to feel about that. So I just played the video game and tried not to think too hard about it.\n\nBut eventually, Mother left the house to go somewhere. For all I knew she was leaving to meet up with her boyfriend, but again, I didn't really want to think too hard about it. Alice promptly complained that I was winning too much and asked Sam to distract me. So of course, \"distracting\" me meant pulling my shorts down and giving me a blowjob while I desperately tried to focus on racing.\n\nNaimh actually ended up getting the most distracted, because she dropped her controller, parked herself next to Sam, and the pair of busty babes started giving me a tandem blowjob on the couch. I actually took the whole thing as a challenge, well and truly focusing on my driving, much to the girls' consternation.\n\nBelle laughed and commented, \"He's getting jaded. You guys give him too many blowjobs so even the two of you going down on him together is just run of the mill. Three months ago, he'd drop everything on a dime just to have one of you give him a handjob. We're losing our power over him. Maybe you should stop entirely and start withholding sex until you get the power back.\"\n\nSam and Naimh looked at each other, thought about it, and abruptly stopped blowing me. They backed away, Naimh blew me an air kiss, and the pair of them started making out with each other instead.\n\n\"Suckers,\" Belle drawled, dropping her controller and spinning around so she could start bobbing her head up and down my dick instead, moaning rapturously to feel my throbbing meat in her mouth.\n\n\"Hey!\" Naimh squealed. \"You little bitch!\"\n\nBelle popped up to laugh. Sam took advantage and slammed her face down on my dick, batting Belle's hand away from my shaft so she could deep-throat me. And the whole kerfuffle actually succeeded in distracting me so that Alice crossed the finish line first.\n\n\"I win!\" she cheered, thrusting her arms in the air.\n\nI gestured at Sam still fucking her own face on my cock.\n\n\"What?\" Alice shrugged. \"I told her to distract you. All's fair in love and war and video games.\"\n\n****\n\nThe girls stuck around through lunchtime but drove themselves home right afterwards, except for Alice. She and I had a quiet conversation where she thanked me for not taking advantage of her drunkenness last night, and even more for not risking anything while she was unprotected. She still didn't know when in the future she might be ready to \"go all the way\", but in the meantime, she said she would make an appointment to go get birth control pills.\n\nAfter Alice left, I found myself reclining on the couch lengthwise, Belle's petite body neatly tucked in beside me with my arm around her shoulder and down across her chest, cuddling her close. I rubbed her belly, and she abruptly let out a loud burp.\n\n\"Eww,\" she remarked a moment later, making a face. \"Spaghetti and sperm is not a flavor I ever expected to taste on the way back up.\"\n\nI laughed and held her close. \"I'll take your word for it.\"\n\nShe laughed with me and snuggled into my chest. \"I love this feeling with you wrapped around me.\"\n\n\"I love wrapping myself around you. Actually, after last night nearly imploded so spectacularly, I'm just happy you're here at all.\"\n\n\"I can't stay much longer,\" she said with a sigh. \"Daddy will be worrying about me until I come back.\"\n\n\"But you WILL come back, won't you?\"\n\nShe patted my forearm. \"Yeah, tonight. That's the deal. I can stay with you on Friday and Saturday nights, but not on school nights.\"\n\nI nodded my understanding. She'd told me as much last night. \"I'm gonna miss you tomorrow night.\"\n\nBelle giggled. \"We haven't even gotten through tonight yet and you're already missing me tomorrow night?\"\n\n\"Of course. You're gonna spoil me with these overnights. Turns out you're a pretty good cuddler after all. I was a little worried after the Tahoe trip that you wouldn't be able to fall asleep with me holding you.\"\n\nBelle shrugged. \"Just took a bit to get used to sharing a bed with someone. Plus, the solution might be falling asleep in your arms immediately while your sperm soaks into my pussy. In Tahoe, I got all worked up sucking the creampie out of Mari, so I wasn't in that dreamy, post-orgasmic state.\"\n\nI mimed writing a note into my palm. \"'Required... to... creampie... Belle... before bed.' Got it.\"\n\nShe giggled again and patted my dick, which didn't respond at all. Between last night's marathon, Belle waking me up with a morning blowjob, and then the girls pulling two more loads out of me before lunchtime, my balls were pretty drained. And a moment later, she moved to get up from the couch.\n\nI didn't let her. I just hugged her tighter, unsure about letting her go. It wasn't the only thing I was unsure about, and in a quiet voice, I asked, \"Are you certain you don't want to tell your dad that I'm your boyfriend now?\"\n\nBelle looked up at me and touched my cheek. \"Even though the whole school thinks you belong to the BTC, you're not actually my boyfriend.\"\n\n\"But he's made clear he'd be happier about the situation if I was.\"\n\nShe shrugged. \"I'm not gonna lie to him.\"\n\n\"You're not gonna tell him I can't be your boyfriend because I'm fucking all your friends, though.\"\n\n\"No, of course not. Telling my dad the truth about me is one thing, but I won't betray their secrets.\"\n\nI nodded my agreement.\n\n\"This is the way it is. I love you, and I love being with you, and I promise I'll see you tonight after dinner.\"\n\nI blinked. \"AFTER dinner? I'm not coming over to your place to cook like usual?\"\n\nBelle furrowed her eyebrows. \"Did I not tell you that part? He wanted to take me out to dinner tonight, just father/daughter. We'll still have all our weekday dinners together, just not weekends.\"\n\nSurprised, I asked, \"Wait, what?\"\n\nBelle frowned and thought about it. \"I know I told you this last night. I get to stay overnights on Fridays and Saturdays, and we can still have the whole BTC have dinner together Friday nights, but Daddy wants Saturday dinners to be just for him and me from now on.\"\n\n\"Oh, uh, I think I remember that now. I may have just been a little giddy about the getting overnights twice a week and stopped paying attention for a bit.\"\n\nBelle rolled her eyes but then gave me a reassuring look. \"I told him that was a more than fair trade. He feels like he's losing his little girl. It's the least I can do.\"\n\nI sighed but nodded my head in agreement. \"I know. Fair enough.\"\n\nBelle turned in my grasp, puckered up, and kissed me sweetly. \"I'll see you tonight.\"\n\nI nodded. \"I love you, Annabelle.\"\n\nShe grinned. \"I love you, too.\"\n\n****\n\nBelle did return to me late in the evening, wearing her pajamas and carrying a small overnight bag. We made love, I creampied her, and she fell asleep in my arms.\n\nIn the morning, I woke up before she did, spooned up behind her with one hand on her naked breast and my dick subconsciously hotdogging her cute buttcheeks. I couldn't help running my hands up and down her naked skin, gently in an attempt not to wake her, but she woke up anyway, at which point I switched to rubbing her clit, slipping a couple of fingers into her pussy, and eventually pushing my erection into her from behind. We screwed on our sides until she had a quiet orgasm, at which point we disengaged so I could re-enter her missionary style. When I eventually asked her, \"In or out?\" she replied \"Out\" with a sizzle in her eyes. And so Matty's Cumslut got to get dressed and head downstairs with a belly full of fresh protein.\n\nActually, Belle got two batches. Not wanting to go home to her dad smelling like sex, she invited me to take a shower with her. We didn't try to start a round of shower sex, but I inevitably got hard again soaping down Belle's beautiful naked body. Her big tits were just so... perky! And they drew my hands to them like magnets. We made out under the spray, cleaned each other up, and dried off. But before getting dressed, Belle parked me on the foot of my bed, knelt down so that my big dick was waving right in her face, and took care of that second erection.\n\nBy the time we came downstairs, Mother was up making breakfast for three. Apparently she'd heard us last night and dryly commented, \"I knew you had an overnight guest. I just couldn't be sure which one.\"",
        "Belle laughed and elbowed me in the ribs. \"Most girls would get really suspicious about a comment like that.\"\n\nI grinned and replied, \"Lucky for me you aren't 'most girls'.\"\n\nBelle thanked Mother for her hospitality, but explained that she needed to get home. I kissed her goodbye as she left and returned to the kitchen. That's when I explained, \"Belle and her dad came to agreement, now that we're... uh...\"\n\n\"Fucking?\" Mother finished for me, looking amused.\n\nI made a face. \"I was going to say, 'now that we're intimate'.\"\n\nMother shrugged, \"Same difference to a father of a teenage girl.\"\n\n\"ANYways, he said that she can spend the night with me on Friday and Saturday nights. So, uh, you can expect to see her around a little more often than you used to.\"\n\nMother's eyebrow arched. \"Does Samantha know about this little arrangement?\"\n\nI frowned. \"Sam? What does she have to do with it?\"\n\n\"If you seriously need to ask that question then you're in over your head even more than I originally thought.\"\n\nI pursed my lips and rolled my eyes. \"This is different. Everyone knows Belle and I have always been close. I already spend afternoons and evenings with her. This is... just an extension of that. And more to the point: Belle's dad knows about our relationship now. Sam's parents don't, and unless that changes, there's no conflict. Maybe she can use Zofi as an alibi a few more times, but it's not like she or any of the other girls can consistently stay overnight anyway.\"\n\nMother chuckled, sipped her coffee, and shook her head wryly. \"Got it. You're in over your head even more than I originally thought. Sometimes I keep forgetting you're only eighteen.\"\n\n\"Mother...\" I drawled.\n\nShe just waved me off. \"Don't worry. I'm sure you'll figure it out.\"\n\n****\n\nDespite Mother's cryptic warning, Sam and the other BTC girls took the news in stride. Like I said, everyone knew Belle and I had always been close, and now that her dad knew of our relationship, it sort of made sense that she'd seize the opportunity to have a few overnights with me. None of them could spend consistent nights with me without their parents giving them the Spanish Inquisition, but if Belle could get away with it, 'Go get some girl!' It's not like there were any scheduling conflicts. As long as they got their \"study breaks\" and I made time to satisfy their cravings on demand, they were satisfied.\n\nIn the meantime, after two weeks off, we were all absorbed in getting back into the school routine. It was a bit of a system shock to have homework and need to study for tests again. So our afternoon study sessions once again became primarily about actual studying and less about messing around with each other (although of course we still carved out time to mess around with each other).\n\nTwo weeks away from school also gave me some perspective on the way the PDA had been steadily growing without me really being aware of it while it was happening, much like that boiling frog urban myth. For example, lovely Zofi held my hand as we walked between classes, same as always. But after she cradled my head in her hands and gave me a sweet kiss just before we parted, it occurred to me that I couldn't remember exactly when we'd started doing that. Maybe early December or something?\n\nNaimh straddled my lap during lunch, face-to-face while feeding me grapes. Then the Irish redhead started putting them into her own mouth and French kissing me to pass me the grapes directly. This development in and of itself wasn't such a big deal. People were used to us making out at school. But then Mari commented that what we were doing looked fun, and she asked if she could try.\n\nI imagined there were quite a few eyeballs staring in surprise in our direction when the luscious Latina started making out with me in my lap only seconds after Naimh had been doing the same.\n\nAlice also started holding hands with me, although that wasn't a boiling frog slow development, but rather an instant microwave of heat. The first time she did so was during morning recess on Monday, and she didn't just hold my hand going from point A to point B. She held my hand, dragged me out to my minivan, and yanked my cargo pants down to my ankles to give me a blowjob right there in the parking lot. She even still fist bumped me when we got back onto campus and joined our friends for the few minutes of recess we had left.\n\nSam was... well, Sam was quiet, actually. Our normally loquacious leader was uncharacteristically taciturn, but when Zofi asked her about it she waved dismissively and said she was just thinking about an upcoming Modern Lit paper. The very next day she was back to her usual self, flirty and fun and chatting up a storm, so I figured the whole thing was no big deal. In hindsight, I should have known better. Mother certainly did.\n\nAt least I could honestly say I was on top of \"the Belle's dad issue\". Belle and I made dinner together at the Kramer house Monday evening, the same as always. She agreed to let me make one of her dad's favorites, even if it wasn't the healthiest meal, to try and help put him in a good mood. After all, this would be the first time we really had a chance to talk to each other since that Friday night when he'd asked me to leave his house.\n\nThe food helped. He came in from the garage, took one big sniff, and smiled. Looking forward to the meal, it was like he forgot to be awkward around me, falling into the routines we'd lived for six years already since his wife died.\n\nAt least, he forgot until about five minutes in. And then I saw his eyebrows furrow, and he looked up at me as if suddenly realizing I wasn't just \"Matt\" anymore; I was the boy fucking his daughter.\n\nLike I said though, I could honestly say I was on top of the situation. As soon as the meal was finished, I asked Belle if she could handle clean-up so her dad and I could talk. She nodded immediately and Mr. K and I went into the living room. Belle could still overhear us, but she didn't interfere.\n\nIn short, I explained that I was still the same Matt he'd known all these years. I told him that I had never planned on developing an intimate relationship with Belle, and had in fact expressly made her off-limits in my mind as the little sister I never had. But we loved each other, and at some point that love crossed the physical barrier. At the same time, we didn't intend to start a romantic relationship that quite honestly, could result in a bad breakup, which none of us wanted. The reality was: Belle was a young woman now, exploring her burgeoning sexuality. And when it came down to it: would he rather Belle explore that sexuality with some guy or guys (plural) she met at school and around town? Or would he rather she do so safely with a young man she loved and trusted like me?\n\nMr. K explained that Belle had said the exact same thing to him Friday night, which was why he'd ultimately allowed us to be together. He thanked me for my honesty, but told me that he had to be honest as well. From now on, I could no longer be \"just Matt\": the young man he'd watched grow up all these years, the son he'd never had. From now on, I was \"Belle's lover\": the young man taking his little girl away from him. And while he could accept that her growing up into an adult living her own life was an inevitable reality, that didn't mean he had to like it.\n\n\"We'll get there,\" he assured me with a comfortable hand on my shoulder. \"You're right: I'd much rather she be with you than pretty much any other guy in existence. Of course, I'd be even more okay with it if you two were official boyfriend/girlfriend.\"\n\nI gave him a helpless shrug. \"I offered, but honestly that's pretty much Belle's call.\"\n\nHe sighed. \"Well, whatever the actual relationship is between you two, it's going to take me a while to get used to this new reality, and until then there's going to be a little awkwardness. I imagine I'll have to go through the same thing with whoever she chooses to be her husband one day, unless that still turns out to be you.\"\n\nI gestured with my hand way above my head. \"Marriage is 30,000 miles above us. Right now, we're just trying to make it through high school.\"\n\nHe nodded.\n\n\"But until then, I promise you: I'll take care of her.\"\n\n\"I know you will.\" He smiled. \"Besides, you once gave me a different promise you still have to uphold.\"\n\nI furrowed my eyebrows. \"What's that?\"\n\nHe grinned. \"Any guy she's with, if he turns out to not be such a nice guy, you have to pound his face in. Even if it's you.\"\n\nI chuckled and nodded. \"Fair enough.\"\n\n****\n\nThe rest of the week passed uneventfully, if you can call getting laid multiple times a day by multiple different girls to be \"uneventful\". Five of the BTC girls regularly kissed me at school, regardless of who might be watching. Only Alice refrained from that level of PDA, although the way she'd started holding my hand and even occasionally making flirty comments spoke to how comfortable she was becoming with the new normal of being my best friend AND lover at the same time (even if the cherry-popping part hadn't happened yet).\n\nBy Friday afternoon, everyone was DONE with school. \"Can we have another two weeks off?\" Mari complained. No one wanted to have the remotest thought about homework, not even Sam, and since we hadn't actually used the hot tub in a while, Sam declared that we were all going straight to the tub on arrival.\n\nI turned up the tub from \"standby\" to \"hot\" on arrival and then went inside to change into my trunks, knowing that we wouldn't be skinny-dipping today. Sam had been clear on this point: Yeah, we'd all seen each other naked and yeah, it was quite likely the swimsuits wouldn't stay on the entire time. But... well... she rather MISSED wearing itty-bitty bikinis she could use to titillate and tease me with, and the other girls agreed they felt the same.\n\nThe most gorgeous thing I'd ever seen was the first to arrive. Naimh came straight through the side garden gate into the backyard and met me by the grill while I was cleaning the grates and checking the propane levels. She gave me a passionate kiss full of tongue and moaning and the whole nine yards. But even though it seemed like the horny redhead wanted to mount me right then and there, it was too early to start something and we both knew the rest of the girls would be arriving soon. That didn't stop her from sliding a hand into my trunks and jacking my dick a few times, though. Seriously, that girl had sex on the brain ALL the time, and some days I wanted nothing more than to fuck her hot body 24/7.\n\nShe carried a gym bag with her suit and towel and headed inside to change. Less than three minutes later she emerged back outside, a smirk of her own on her face.\n\nNo matter how many times I saw one of the girls emerge from the house in a swimsuit, I always enjoyed it. They seemed to appreciate it, too. Today Naimh wore a brand-new emerald-green bikini that matched her eyes and accentuated her pale, freckled skin. She crossed the distance between us walking like a Victoria's Secret Angel during a fashion show, hips swaying and lips pouty. It was a pretty skimpy bikini, revealing plenty of lush Double-D cleavage that threatened to reveal the hard nipples, cold in the January air, that poked through the sheer fabric, making obviously large dents. And coming to a stop a few feet away, she paused and did a slow twirl to let me see the tiny thong strap up the back that revealed her entire perfect peach ass to my hungry gaze.\n\n\"Gawddammit I wanna fuck you right now,\" I grunted.\n\nIt was the right thing to say. Stopping her turn with her ass towards me but her upper torso twisted back so she could look at me over her shoulder, the Irish redhead coyly bit her pinky nail and moaned, \"Wanna squeeze in a quickie before the other girls get here?\"\n\nI found myself moving on autopilot as I walked forward. Recognizing the uninhibited lust in my eyes, Naimh started fingering herself while walking over to one of the large posts that held up the wood-lattice patio cover. She bent over at the waist, bracing her left arm against the post while continuing to rub her own clit with her right. And it was a simple matter for me to drop my swim trunks to my knees, slide her ridiculously thin thong aside, and push myself all the way in.\n\nThe instant I was buried to the root, Naimh moaned, braced both arms against the post, and started fucking herself back at me. I sped up quickly, getting into a pretty good rhythm. But less than a minute after we'd gotten started, the sound of a big truck engine revved from the other side of the house. Sam had arrived.\n\n\"Keep going! I'm almost there,\" Naimh whimpered.\n\nSo I kept going. A minute later, Sam came in through the gate along with Zofi, saw us, and immediately howled, \"Hey, hey, hey! Party foul!\" I still loved the way her Aussie twang made the phrase sound like \"pahtty foww\".\n\nNaimh started screaming right then. Arms braced against the post, she banged her butt back at me three times in hard succession, clenched up, and came. I felt her cunt clamping around my cock as the ecstasy of her climax took over. But since we'd only been going at it for two minutes, I wasn't anywhere close to cumming myself. And after the redhead finished screaming her pretty little head off, I backed out, gave Sam a sheepish look, and tucked myself back into my shorts.\n\nHer expression was not that of a girl who would respond positively to a suggestion that she finish me off, you see.\n\n\"Neevie: the point is to TEASE him with our bikinis today, not give him the whole shebang,\" the platinum-blonde admonished.\n\n\"I got horny,\" Naimh replied, panting against the post. \"Today's a big day for me.\"\n\nSam shook her head and muttered, \"Just get in the tub. It's cold out. We're gonna go change.\"\n\n****\n\nWith Sam's baleful gaze in mind, Naimh's comment about a \"big day\" sort of slipped past without me noticing. Plus, Alice arrived soon after, coming over to give me not only a fist bump, but also a quick kiss. As usual, she'd worn her bikini beneath her clothes (a basic blue one she'd often worn) and so stripped off right then and there before joining Naimh in the tub.\n\nBelle and Mari arrived, having changed into their bikinis at Belle's house. Belle wore a cute number I remembered from the summer in baby blue with white trim that emphasized her youthful appearance. Mari wore a pure white bikini with a gold ring connecting the two triangles together in the middle and two more connecting her bottoms at the hips. Mari's was definitely new, and she did a mini fashion show for me to fully appreciate it. I didn't whip my dick out and start fucking her the way I'd done with Naimh, but the thought definitely crossed my mind.\n\nZofi emerged from the house next, in a rectangular black bandeau that revealed both upper cleavage and a good bit of underboob. I didn't think it was really designed with D-cups in mind, and the very first thought I had was to slide my dick into the gap from beneath the bikini top so I could fuck her tight cleavage. The bottoms would generously be called minimalist and hung quite low on her hips, making her already long torso appear even longer. The black strap that covered her mons was similarly narrow and disappeared into a thong in the back.\n\nFinally there was Sam, wearing a neon pink bikini that literally SCREAMED for attention. Further, it proved to turn almost completely transparent when wet, and... well... we were getting into a hot tub. Let's just say I really enjoyed the view.\n\nUnfortunately, viewing is basically all I got to do. To me, it was like a strange rewind back to the summer, before the Holly incident to a time when the girls would tease and titillate but not actually DO anything sexual with me. Sam's \"pahtty foww\" admonishment made a heckuva lot more sense once I realized what was going on, and at first it was pretty annoying.\n\nFor one thing, I'd been looking forward to seeing naked breasts bobbing up and down the surface of the hot water. Seeing bikini-covered breasts bobbing up and down is pretty nice, but... well... naked tits are better. But nobody took off their top, and I had to reach back into the spank bank to retrieve memories of the girls' boobs I could overlay over the view before me. At least Sam's transparent bikini made it much easier to imagine. For another thing, nobody started giving me a \"wristy\" in the hot tub. I'd gotten rather used to the girls sticking their hands into my trunks and jacking me off at the slightest provocation. But while they rubbed my legs and patted my bulge a few times, nobody put their bare hand onto my bare dick. And it wasn't like I was going to ASK one of them to do so.\n\nFor about ten minutes, I had just assumed the girls were all warming up, someone would start something, and the others would eventually \"keep up\". But when nobody took off their top or put their hand into my trunks, I'd started to wonder. The girls rotated as we chatted, each of them getting a turn to sit on one side of me or the other. When it was Sam's turn, she rubbed my bulge, turned to straddle my lap, and started rubbing her big tits against my face. I reached up to grab her ass, but she gently took hold of my hands and rather pointedly put them down at my sides while backing her breasts away from my nose. \"Down boy,\" she reprimanded, and I took the hint that she wanted me to keep my hands to myself for a moment. At the time, I assumed it would only be a moment. But when she dry-humped herself against my erection, started peeling back the edge of her bikini top right next to my lips, but never quite exposed her nipples, I groaned in frustration and grabbed her ass again to really press her pussy against my rod trapped between us.\n\nAgain, she scolded, \"Down boy,\" and took my hands off her ass.\n\nThen it was Zofi's turn. I had always been less free with Zofi's body, conscious of the need to let her set her own pace. So I never grabbed her booty and she never put my hands on it, either. She licked her lips, dry-humped my dick, rubbed her tits against my chin and cheeks, but ultimately moved off my lap in less than two minutes. And by the time Alice did the same right after, again without letting me get anywhere, I had realized what was going on.\n\nSo when Naimh buried my face in her lush cleavage and writhed in my lap, I kept my hands to myself. When Mari did the same right after, she actually apologized and whispered that she'd make it up to me later.\n\nAnd Belle was last, but as she ground her pussy against my dick, she gave me a quick peck on the lips and leaned in to whisper into my ear. \"I don't know how long Sam is gonna push this, but I promise I'll take care of you tonight.\"\n\nThe reminder that this was Friday, and therefore would be Belle's first overnight with me since last Saturday, certainly did wonders to put me at ease. Knowing there was a light at the end of the tunnel washed away my anxiety, and I finally started getting into the spirit of things. Getting teased for years by the girls with no idea when or even IF there would be a payoff hadn't been easy. But armed with the knowledge that it would only last for an afternoon and end with Belle's sweet pussy wrapped around my dick... well... I could think of the next couple of hours as...\n\nForeplay.\n\nWith that in mind, I decided to change up the rules a bit. While I could understand Sam wanted to play her little game of teasing me the way the girls used to do in the old days, I didn't HAVE to play along. The girls had continued rotating - as in literally rotating - around the hot tub. And since Sam had gone first, she was now seated to my right.\n\nI have no idea what Sam intended to do next, although I could be sure she'd cooked up a plan. I promptly wrecked that plan by spinning around, hoisting her in my arms, and bodily lifted her into a standing position atop the submerged bench. Sam squealed in surprise but quickly recovered, slapping at my arms and howling, \"Down boy! Down boy!\" But I reached for the hips of her bikini bottoms, dragged them down to her knees, and dropped her into a seated position on the deck. She grabbed my head for balance, which actually made it easier for me to yank her bikini bottoms off completely. And then with her crotch right up against the edge of the tub, I ducked my head down and furiously started eating her out.",
        "\"What the... Holy... FUCK!\" Sam howled in mixed pleasure and surprise. \"Matty! Matty! We're not supposed... Fucking FUCK!\"\n\nHer last exclamation was punctuated by the penetration of her pussy with two of my probing fingers. I quickly started sawing them in and out of her dripping snatch while gnawing on her clit, any sense of sticking to her plan overridden by the blissful sensations I was shooting into her brain. She wound up reclining back on her elbows, her knees up and her heels parked on the lip of the tub, no longer resisting and completely surrendering to my oral attack.\n\nIt didn't take her long to cum. She'd teased herself while dry-humping my dick in the tub, and watching all of her girlfriends doing the same didn't exactly take the edge off. All of the girls had been surreptitiously rubbing themselves, and after I finished off Sam and slid myself over to Zofi, the exquisite brunette abruptly yanked her hand out of her bikini bottoms and squealed when I picked her up.\n\nOne-by-one, I ate out each of the girls until they came right there on the edge of the circular tub. I never took my trunks off. I never grabbed their tits. I still got to SEE a few naked breasts, as first Belle and then Naimh were quick to dislodge their own bikinis and grip and squeeze their titflesh in their own hands while I worked over their pussies. Mari completely took her top off before I even arrived. But while I fingerbanged all of them, I otherwise kept my hands to myself. Any of my actions were for their pleasure, not mine, although I certainly enjoyed myself nonetheless. And in the end, I sat back down in the tub while the six girls of the BTC sagged around me, satiated and a little bit sleepy.\n\n\"Not quite what you had planned?\" I asked Sam.\n\n\"Nuh-uh,\" she admitted before smiling. \"But that was BETTER.\"\n\nI chuckled and gave her a thumbs up. \"Glad you agree.\"\n\nSam nodded, sat up a little straighter, and turned to face me. \"New plan. Matty sits up on the edge of the tub, and we all rotate giving him blowjobs until he finally pops.\"\n\n\"Ooh, I LIKE this plan!\" Alice cheered.\n\n****\n\nNobody whipped out a sand timer, but the girls switched off pretty regularly while giving me blowjobs. At this point, it was less about getting me off than just messing around having a good time. At first, the girls went in strict order: Sam, Zofi, Alice, Naimh, Mari, and Belle, each girl bobbing their mouths up and down my shaft for anywhere from thirty seconds to two minutes. After that, the order got a little jumbled, not that anybody seemed to mind.\n\nNaimh was the first to wrap her big titties around my dick and start humping away. Zofi climbed out of the tub so she could make out with me. Alice reclined against my side so I could reach around and play with her big tits. And they kept switching things up.\n\nI first started grunting on the way to orgasm while Sam was giving me a titfuck, Mari was making out with me, and Belle let me play with her boobs. After that, Sam declared that everyone had to try and make me pop for 30 seconds each, timed with Alice's waterproof watch. By that point, I wasn't sure if I could last through all six of them. My balls had started manufacturing sperm back during the quickie with Naimh against the patio cover post, I'd maintained an erection throughout the round robin cunnilingus, and by now I'd been getting continuously blown for more than 10 minutes.\n\nBelle probably could've made me pop. She went after both Naimh and Mari, two exceptionally skilled blowjob artists who battered down my defenses right away. But rather than get me off, she recognized the way I was straining to hold it back and she rather lazily slurped on my schlong, enough to keep me hard but not enough to push me over the top. When her time was up, I nearly blasted away the instant Zofi got me in her mouth, just for the mental high of blowing in Zofi's mouth. But I managed to hold on, just barely.\n\nSeeing how close I was to cumming, Alice and Sam ro-sham-boed to see who would get to go next. Alice won, and she promptly hoovered me into her mouth. But the momentary reprieve so they could ro-sham-bo actually gave me some time to back away from the brink. Despite Alice's enthusiastic efforts, she didn't have the skills some of the others had. And when the beeper went off after 30 seconds, she actually groaned around my dick.\n\nSam grinned rather smugly as she took over. She first wrapped her big breasts around my dick again and used her hands to jiggle them up and down in that cheerleader pom-pom motion I loved so much. I was gasping for air by the time she bent her mouth over me and started suckling on the mushroom head. And after pausing to flash me a wink, she dropped her entire face down, completing the deep throat as easily as Mari could, and she started swallowing in anticipation of my load.\n\nI didn't disappoint. \"Fuck, fuck, FUCK!\" I grunted as I felt the tension go slack as the dam inside me burst. Sam's contracting throat muscles ripped the cum out of me, and I nearly blacked out from the force of my orgasm. I certainly did collapse flat on my back across the deck while my hips bucked upward, ejecting great gouts of lava straight into Sam's gullet.\n\nThe beautiful busty blonde moaned and hummed and swallowed every single last drop, reveling in her victory as it were. She didn't even save anything for Belle, despite the pixie's attempt to cram her tongue into Sam's mouth searching for any remaining traces. Both Sam and Belle seemed to enjoy the attempt, regardless.\n\nAlice looked at her wrinkled fingertips. \"Man, how long have we BEEN out here?\"\n\n****\n\nThe rest of the evening was fairly routine. Everyone got out of the hot tub and went into the house to clean up and change back into their clothes. We hung out and socialized, I went outside to grill up dinner, and Alice came out to hang and chat with me.\n\nAfter dinner, we assembled in the family room and popped in a rented DVD. Zofi and Mari were my cuddle partners for the evening, and while I played around with their breasts for a bit and they slid their hands into my shorts to fondle me, nobody tried to start any new sex rounds. In fact, I never had sex apart from that initial unfinished quickie with Neevie outside. After all, I'd satisfied every single one of them over the course of the weekday afternoon study sessions, and Belle already knew she'd get to stay with me overnight, so perhaps everyone was already comfortably satiated with what they'd gotten so far.\n\nAfter the movie, the group started to break up. Alice gave me a fist bump and a wave before she went out the door. Mari gave Belle a warm hug before she left. Zofi had carpooled with Sam, and stood waiting while Sam and Naimh whispered something together. Sam looked surprised, covered her mouth, and looked a little sheepish. In the end, Sam pecked Naimh's cheek and shouldered her bag, getting ready to walk out with Zofi.\n\nIt was Sam shouldering her bag that tickled my brain. The act itself was completely normal, but it made me realize that Naimh didn't have her gym bag nearby, and I asked, \"Neevie, where's your bag?\"\n\nNaimh looked confused by my question. \"In your room, of course.\"\n\nBelle, standing next to me, asked, \"Wait, what?\"\n\nNaimh read the perplexed expressions on both of our faces and raised both eyebrows. \"Sam's 'slumber party', remember?\"\n\nI suddenly clapped my hand to my forehead. \"Ohmigawd. I forgot!\"\n\n\"My first overnight,\" Naimh pouted. \"I've been looking forward to it all week, and you forgot about me!\"\n\nBelle and I looked at each other in surprise.\n\nUm. Shit.\n\n****\n\n-- CHAPTER 22: Naimh II --\n\n****\n\nBefore Belle or I could say anything, Sam walked over to us.\n\n\"Don't feel bad,\" she told me with a grimace. \"I forgot too, until Neevie just reminded me. In our defense, a lot kinda happened that day. And drinking as much as we did is not conducive to long-term memory.\"\n\nBelle spoke up. \"Matty? What's going on?\"\n\nI sighed and explained, \"You remember how Sam met everyone at the front door wearing my shirt last Friday, right? Neevie was the first arrival and called 'next'. They worked it out for tonight.\"\n\nBelle frowned at Naimh. \"And neither of you told the other girls?\"\n\nNaimh shrugged and looked at Sam for a moment. \"Well once Sam didn't tell anyone, I assumed she wanted it kept quiet, at least until after the fact. I still thought Matty would've told you.\"\n\nBelle looked at her blankly. \"Uh, no, he didn't.\"\n\nNaimh was crestfallen, her gaze sliding over to Belle and then back to me. \"Nevermind. Tonight's not a good night. I'll just get my bag and go.\" She walked quickly past me to get to the stairs, but I reached out and caught her arm.\n\n\"Hey no. Please, don't go.\" I pulled her to my chest and hugged her tightly. \"If you really can stay tonight, I WANT you to stay tonight.\"\n\nEyes moist, she glanced past me at Belle. \"You don't need me tonight. You have her.\"\n\n\"I'm more than happy to share,\" Belle put in quickly, a little smile crossing her face. \"Or... actually... if you just want a one-on-one with him, I'm good with just hanging back and watching, too.\"\n\nNaimh looked surprised by the offer, but also a little confused.\n\nBelle screwed up her face. \"What am I saying? I should go and leave you two alone. I'll still have him tomorrow. I mean, this is your first overnight and it's probably better that I don't crash it.\"\n\n\"No, of course I wouldn't want you to go home,\" Naimh said hurriedly. \"I mean... yes, I want some time alone with him, but you're more than welcome to watch. And after... well... I rather enjoy the way you help me clean up afterwards.\"\n\nBelle's eyes sizzled, and I found myself ping-ponging my attention back and forth between the emerald-eyed redhead and the pale green-eyed strawberry blonde as they rather obviously ogled each other. Naimh was right: I had a thing for green eyes and reddish hair.\n\nSam snorted. \"Well now you've got me wishing I didn't have to go home, but I do. Especially after last Friday night went to hell. I swear my mom's gonna give me a breathalyzer test when I walk through the door. Besides, I gotta be there in case Neevie's parents actually decide to call.\"\n\nZofi spoke up quietly, with a warm smile for Naimh. \"Have a great evening with him. Well, with them both.\"\n\nNaimh squeezed me and reached a hand out to Belle as well. \"We will.\"\n\n****\n\nBelle closed the door after Sam and Zofi left. As she turned back around, she asked, \"So what do you guys want to do fir--\"\n\nShe didn't have to finish her question since Naimh already had her tongue in my mouth and her hand in my shorts. We staggered into the carpeted living room, sort of aimed at one of the couches, and didn't even successfully get THAT far. I wound up flat on my back across the rug, my shorts around my calves while the incredibly horny redhead bobbed her head up and down in my lap, slurping noisily at my rapidly growing erection.\n\nBelle just giggled and followed us into the formal living room, settling onto the sofa while unzipping her pants and digging her hand inside with a sigh of contentment.\n\nLess than a minute later, Naimh popped off my prick, eyes glowing as she intoned, \"I need you IN me. NOW.\" I nodded as she rolled onto her back beside me, unbuttoned her jeans, and started yanking them down her legs. I rolled after her, kicked off my shorts, and finished taking her jeans and panties off. Neither of us bothered to remove our shirts or even climb onto the sofa we were in such a hurry. The Irish redhead pulled her legs back and spread them to the sides, I mounted myself into position, and started pressing my way in.\n\nDespite the lack of significant foreplay, Naimh was incredibly wet, and I slid through her tight pussy like it was coated in warm butter. Almost immediately we were able to start fucking pretty hard.\n\n\"Holy crap you guys are incredible together,\" Belle moaned from the sofa beside me. \"But doesn't that hurt?\"\n\nIndeed, I was pounding Naimh's ass into the floor. Thinking quickly, I pointed to the sofa cushion beside Belle, and without me having to clarify she grabbed it and tossed it alongside us. Scooping my forearm beneath Naimh's lower back, I hoisted us onto the cushion, which was only long enough to support half of her torso and left her head and shoulders still on the floor. Still, at least the point of impact was a lot softer. And about a minute later, Belle tossed Naimh a throw pillow the Irish babe could use to prop up her head.\n\nOther than that, though, Naimh and I fucked each other's brains out. She screamed and howled and thrashed and moaned. I hammered her repeatedly, switching from long and hard strokes to short and hard strokes and maybe a few medium but still hard strokes in between. There's no other way to put it: we FUCKED.\n\nWe were both good at it.\n\nAnd it was always AMAZING.\n\nThe way her pussy gripped my dick just felt soooo good. She had like the Goldilocks of pussies: just right. Really tight, but not too tight. Really wet, but not frictionless. She fucked me at the same rhythm I fucked her. We were almost never out of sync. After regularly banging four different girls, the differences between them were becoming apparent.\n\nMari was lush and inviting. I felt like I could saddle up and ride her for hours.\n\nBelle was super-tight and so tiny. I could just pick her up and swing her around and fuck her however I wanted, although more often I loved the feel of her beneath me as I pressed her small form into the bed and she gazed up at me in devoted surrender.\n\nSam was super-willing to please, dedicated to my pleasure. Sometimes she did her best to fuck me into oblivion, and sometimes she wanted me to take over and dominate her.\n\nBut Naimh and I were just so... compatible. Sexually, at least. She moved, I moved, it all just... FIT. Even the others had commented about how the two of us were so attuned to each other during sex.\n\nLike right now: I had shoved Naimh's shirt and bra up above her big tits, ducked my head down to grab one of her big titties, and crammed the nipple into my mouth without slowing down my pounding of her pussy. With her head and shoulders hanging off the edge of the cushion, all she could do was cradle me to her breast and whimper. Presently, she twisted her hips just slightly, and I instinctively knew... just KNEW... that she wanted to roll over. So I pulled out, she quickly executed a flip, and braced her forearms on the couch beside us with her knees still on the floor cushion. This gave her a good view of Belle masturbating beside us, and she stared at the voyeuristic pixie while groaning as I filled her back up.\n\n\"Soooo fucking hot, you two,\" Belle moaned. She'd divested herself of her pants and was really working at her clit now with her right hand. With her left, she raised the hem of her shirt and bra out of the way and tweaked her own nipple.\n\nNaimh glanced back at me, just for a second, a little grin on her face. Again, without words I already knew... just KNEW... that she wanted to put on a show for our audience. So I reached back and let fly with a firm spank on her right asscheek. The redhead squealed and picked up her head in reaction.\n\n<thwack!>\n\nBelle groaned immediately, \"Oh, fuck yeah. Spank that ass! Spank that phat ass!\"\n\n<thwack> <thwack> <thwack>\n\nI grinned. Belle wasn't into pain and didn't like me spanking HER ass, but she certainly got off watching me spank the others. I kept spanking, Naimh kept squealing, and the redhead fucked herself back at me even harder.\n\n\"Grab her tits!\" Belle exhorted. \"Pinch 'em. Squeeze 'em. Fucking A you two are amazing! Fuck! Fuck! Fuck!\"\n\n\"Aaaugh!\" Naimh screamed while I fucked the shit out of her, loving every second of it. \"Matty! Matty! Matty! I'm cumming! I'm cumming!\"\n\nIndeed, the redhead was cumming, her body quaking as she set her forehead down trying to absorb the incredible sensations. I was almost there, but not quite. And I continued hammering away all throughout her climax.\n\nBelle wasn't quite there either. Our eyes met, and I could tell she was waiting for the money shot. At first, I had been inclined to give Naimh an internal combustion to let Matty's Cumslut suck it out. But instead I decided to give our voyeur a little show.\n\nGrabbing one of Naimh's wrists, I trapped it against her lower back and pinned her down beneath me. With a roar, I really laid down the lumber as I power-fucked my way through the final stretch. In the end, I howled, \"Gonna blow! Gonna blow! Gonna... FUCK!\" And I yanked myself out at the last moment, pumping my shaft to hose down the busty redhead's reddened buttcheeks, painting lines across both hemispheres, down her crack, and especially right over her tightly-clenched anus.\n\nBelle howled in ecstasy with me, eyes fixed on my impromptu performance art.\n\nEven when I had nothing left to spurt, I lay my dick into the valley of Naimh's butt-cleavage, gliding my shaft through my own puddles of cream to smear it around. I reached out with my left hand, beckoning to Belle, and she quickly dismounted the sofa and came to me. Grabbing her behind her head, I yanked the petite strawberry-blonde against my crotch where she gobbled up my prick and suckled smeared semen off my shaft. But I didn't let her linger long, and after I judged that she'd slurped every last trace of sperm from my schlong, I directed her face into Naimh's ass and pushed her down so she could start licking up every drop from the redhead's pale, supple skin.\n\nNaimh had been looking back at us while Belle sucked my dick, but her forehead dropped back down to the couch when Belle started licking her asscheeks. And she groaned when Belle even started giving the redhead a rimjob. I almost got hard again just watching them.\n\nBut I was in no rush. We had all night.\n\n****\n\n\"So what is the deal with you two?\" Belle asked a bit out of the blue.\n\nReclining sideways across the big couch, her head propped up on her elbow, Naimh furrowed her eyebrows. \"What do you mean?\"\n\n\"You... Matty. This... chemistry... between you two. It's been obvious since you two first met. We can all see it.\"\n\nNaimh blinked. \"You want to have this conversation now?\"\n\n\"Sure. Why not?\"\n\nNaimh gestured with her free hand, miming up and down in sync with the way Belle currently undulated up and down in my lap. The petite teen girl was riding me reverse cowgirl on the armchair in the family room, you see.\n\nBelle just grinned, clenched her cunt muscles tighter around my cock, and continued. \"So? It's not like my mouth is busy at the moment.\"\n\nNaimh chuckled in amusement and thought about her response. \"You know, I could ask you the same question. There's obvious chemistry between you and Matty. Everyone has always known you two are really close, and these overnights you get to have with him now are only going to amplify that.\"\n\nBelle shrugged. \"Matty and I are an open book at this point. Much as I complained about him seeing me as a 'little sister' for so long, that's actually a pretty apt description of our relationship.\"\n\nNaimh mimed with her hand up and down again. \"Most little sisters don't do THAT to their big brothers.\"\n\nBelle giggled, which did wonderful things to her core muscles for me. \"Perhaps, but then we're not actually related. So... call us 'siblings with benefits'? And didn't the group of us have this conversation in Tahoe?\"\n\nNaimh shrugged. \"You said you loved him, and would always love him, and fantasized about marrying the boy next door and never feeling alone again for the rest of your life.\"\n\nBelle stopped humping for a moment and glanced back at me. Somehow, none of us had ever completely removed our shirts, although we were completely bottomless from the previous round and I had my hands slipped underneath the hem of Belle's shirt so I could play with both of her boobs. Presently, though, I let go of her tits to instead wrap my arms completely around her body and hug her tightly. Belle cooed and kissed my neck while I bent my head over her shoulder, squeezing me tightly.",
        "\"Yeah, exactly,\" Naimh drawled.\n\nBelle sighed and looked back at her friend. \"I love Matty. But I also told you in Tahoe that I enjoy watching him fuck all my friends. I REALLY enjoyed watching him fuck you earlier. And I care too much about the BTC to ever seriously consider making him my boyfriend.\"\n\n\"You said he offered. Why not make him your boyfriend but give him permission to fuck the rest of us? Best of both worlds, right? You get to be with the man you love AND enjoy your voyeuristic side.\"\n\nBelle pursed her lips. \"The thought crossed my mind. But...\" Her voice trailed off.\n\n\"You wouldn't want to betray the BTC?\"\n\n\"Sort of,\" Belle conceded. \"I mean, that's your reason, isn't it? The thought that if he became your boyfriend, you'd be taking him away from the others?\"\n\nNaimh nodded.\n\nBelle exhaled and shook her head. \"It's not that. If I really loved him like that, I'd want to date him, walk everywhere holding hands with him, go on those romantic drives to the beach and cuddle while watching the sunset and all that stuff you've told me you wanted for yourself.\"\n\nI frowned and looked over at her and asked, a little confused, \"'If' you loved me like that?\"\n\nBelle gave me a warm smile and cradled my cheek. \"I'll love you for the rest of my life. And maybe one day we might get married. But even if we don't and ultimately end up marrying other people, I'll still love you forever.\"\n\nI frowned. \"I smell a 'but' coming on.\"\n\n\"But...\" Belle began with a sigh. \"I don't want to date you now. Dating you and becoming romantic and all that jazz would... I mean... I'm afraid it would end up in heartache for both of us.\"\n\n\"Why?\"\n\n\"What we have right now is great, isn't it? All of the intimacy. Lots of fun sex. I get to watch you banging all my hot friends.\"\n\n\"It's great, yes,\" I confirmed with a nod, slipping my palms over Belle's tits again and going honka-honka with my fingers.\n\n\"Then why mess with success?\"\n\nI thought about that. \"I suppose I'm not saying I wanna mess with it. If everything could stay the status quo for the rest of the year, with the whole BTC getting along great and me getting to have lots of crazy sex with all of you... yeah, I'd love it.\"\n\n\"So we're in agreement.\"\n\n\"At the same time, I HAVE been wondering why you've never wanted to become my actual girlfriend. Not saying we should; just want to understand why.\"\n\nBelle sighed. \"It's the same conversation I already had with my dad. Boyfriends and girlfriends break up; I couldn't take that happening to you and me. It's better this way: siblings with benefits. This way we can be eternal.\"\n\n\"For now.\"\n\nBelle shrugged. \"Until the end of high school, at least. We still don't know what colleges we're gonna get into or where we might be living next year. What if you get into some Ivy League university on the other side of the country and I end up living at home with my dad? What then?\"\n\nI nodded. \"I suppose.\"\n\n\"But...\" Naimh began thoughtfully while letting her free hand wander down between her legs, \"what if you're missing out on something that could be REALLY special? What if you're avoiding the greatest love of your life out of fear? What if you go your separate ways after high school, meet other people and get married to them out of convenience, and have to live the rest of your lives regretting the one that got away?\"\n\nBelle narrowed her eyes and gave Naimh a little smirk. \"Are we still talking about me?\"\n\nI brightened and also smirked at Naimh. \"Good point.\"\n\nThe redhead frowned. \"I don't know what you mean.\"\n\n\"Intro to Psychology elective,\" Belle explained. \"The questions you're asking me are the questions you've been asking yourself.\" She started grinding herself on me again, getting excited.\n\n\"I... uh...\" Naimh fumbled as she sat upright, pulling her hands away from her crotch and fixing the hem of her t-shirt so that it completely covered her.\n\n\"You got me sidetracked asking about MY relationship with Matty when I started this conversation asking about YOUR chemistry with him. So seriously, Neevie: Why not make Matty your boyfriend but give him permission to fuck the rest of us? Best of both worlds, right?\" she parroted.\n\n\"That's different.\"\n\n\"Is it? He's clearly super into you. He tells me all the time.\"\n\n\"Be-elle...\" I groaned in embarrassment, dragging her name out into two syllables.\n\n\"After Tahoe he kept wanting to call you up and invite you over so you two could fuck like bunnies every day.\" Belle sped up her thrusting.\n\n\"Belle,\" I exclaimed. She wasn't supposed to tell Naimh that part.\n\n\"He said he liked you a little too much, actually. That he was worried he'd fall head over heels for you and lose control.\" Belle started breathing hard as she fucked herself up and down on me. \"He really does want to keep all the girls happy, but he'd give them up to be with you.\"\n\n\"Belle, seriously!\" I exclaimed, grabbing her hips and pinning her down so she couldn't keep fucking me. \"That stuff was private!\"\n\nThe diminutive pixie shrugged. \"It's the truth, though.\" She looked over at Naimh. \"So if your big worry was whether or not he felt the same about you, you're worried over nothing. He wants you.\"\n\nThe redhead blushed pink and looked down at her hands clasped in her lap. \"I... uhhh...\"\n\n\"What if you're missing out on something that could be REALLY special?\" Belle asked intensely. \"What if you're avoiding the greatest love of your life out of fear?\"\n\nThere was moisture in Naimh's green eyes as she looked up at Belle. And in a half-whispered voice, she asked, \"Are you TRYING to break up the BTC?\"\n\nBelle blinked twice and backed up. \"Huh? No, of course not.\"\n\n\"Then why are you trying to... to tempt ME into breaking up the BTC?\"\n\n\"I'm not.\"\n\n\"Well it sure SOUNDS like you are. Like hey, get Neevie to date him and take him away from the girls, and when everything falls apart and everybody blames Neevie, Belle can sweep in and pick up the pieces.\"\n\n\"I'm just repeating what you asked me.\" Belle's eyes sharpened. \"Or is this YOUR master plan? Get Belle to date him and take him away from the girls, and after everything falls apart Neevie can sweep in and console Matty in the aftermath.\"\n\n\"What? No... I...\"\n\nBelle smirked. \"Hitting a little too close to home?\"\n\nNaimh shrank. \"I'd never WANT the BTC to fall apart. I just...\"\n\n\"Getting Matty would be a nice consolation prize?\"\n\nNaimh's head came up, and she fixed her eyes on me. \"I'd NEVER think of you as a consolation prize.\"\n\nI raised both hands. \"Don't worry. Belle's actually saying the exact same thing I've thought myself. If the BTC did break up for one reason or another, at least then I could ask you out on a date.\"\n\nBelle looked back at me. \"Then ask her out on a date.\"\n\nI frowned. \"Uh, the BTC is still intact, thank you very much.\"\n\n\"But you WANT to date her, don't you? You WANT those romantic walks on the beach as much as she does.\"\n\nI bit my lip and looked down nervously.\n\n\"Look, this doesn't have to be that hard,\" Belle insisted. \"She's in love with you, you're in love with her, so get out and DO something about it!\"\n\n\"What if he ends up at a university on the other side of the country and I'm stuck here?\"\n\nBelle shrugged. \"Is that a risk you're willing to take? You've got seven or eight months to be together, if that's what you want. IS that what you want?\"\n\nNaimh looked at me. \"Is that what you want?\"\n\nI blinked. \"I don't know what you and I could be yet... but I'd like to find out.\"\n\nNaimh turned to Belle, looking uncertain. \"But wouldn't you be jealous?\"\n\nBelle shook her head. \"I told you: I love him, and maybe I'm even a little 'in love' with him, but we're not romantic like that. I would never stop my big brother from finding true happiness.\"\n\nI arched an eyebrow and drawled, \"But you wouldn't mind getting to watch every now and again, maybe slurp a creampie out of her pussy, right?\"\n\nBelle giggled and squeezed her snatch around my shaft again. \"Wouldn't mind at all...\"\n\nNaimh sighed. \"But even if YOU wouldn't mind, there are four other girls to consider.\"\n\nBelle shrugged. \"Would you keep him from them? Or would you share, just like you said?\"\n\n\"Share, of course.\"\n\n\"Then I think you'll be fine. As long as those girls get their 'study breaks', I think they'd be cool if you two started dating. Mari loves being with him, but she's not looking to be his girlfriend and she'd be fine with it if you were. She's told me as much, even though she's on Team Belle and still thinks -I- should be the one dating him. Alice is his best friend, and no best friend would stop him from finding true happiness any more than his little sister would. Zofi's not in love with him, period. I'm not sure she's straight, quite frankly. She's always seemed more interested in nailing ME than nailing you, Matty.\"\n\nI frowned. \"She's not a lesbian.\"\n\n\"Given how often she sucks your dick, I agree with you. But let's just agree she's a little more on the other side of bisexual and not interested in dating you.\"\n\nI shrugged.\n\n\"There's one name you haven't mentioned yet,\" Naimh said quietly.\n\nBelle took a deep breath and exhaled. She'd been gyrating around my pole while talking about the other girls, but she came to a stop now. \"Sam wants... Sam... I mean... She doesn't want to date you, Matty. Well, she DOES, but she doesn't want to. That's different from you, Neevie. You're in love with him, and you WANT to date him, but you've been holding yourself back. Sam, on the other hand, doesn't want to be in love with him, even if she is. She's crazy busy, she's stressed out all the time, and her competitive streak drives her to do some things she's maybe not prepared for. But she doesn't have time for a boyfriend and being able to just get spectacular orgasms from you with zero commitment or needing to go through the whole dating exercise has been quite a relief for her. If you ask me, I think she'd actually welcome you dating him, Neevie.\"\n\nNaimh's eyebrows went up. \"You think she'd welcome it?\"\n\n\"She's your alibi tonight for being here, isn't she? She didn't have to do that. And as competitive as she can be with you, we can all see her going out of her way to NOT monopolize him.\"\n\n\"The way YOU go out of your way to not monopolize him,\" Naimh pointed out.\n\nBelle shrugged. \"I get him in the evenings and on weekends. I can afford to let him focus on the rest of you when we're in a group.\"\n\n\"But if I start dating him, that may cut into your evening and weekend time.\"\n\nShe shrugged again. \"I value Matty's happiness. And I feel guilty for not giving him the romantic partnership he wants. I mean, we're super close and we talk all the time and he shares his thoughts and feelings with me, but I don't fill his need to go out around the town with a hot young thing on his arm, drawing jealous stares from other guys. YOU do that for him whenever we all go out. Sam can't give him those things either, not with her schedule and how laser focused she is on getting into Stanford and becoming a doctor and all that. Enter Neevie... the one who really WANTS to date him. And that's a burden off her plate.\"\n\nI frowned. \"Dating me is a 'burden'?\"\n\nBelle giggled and hugged me with her pussy again. \"What. Are only guys allowed to want no-strings-attached sex without the hassle of dating?\"\n\n\"I didn't say that.\"\n\n\"I know. The point is: out of all six girls in the BTC, Neevie's the only one who wants that next level. I think it's finally time we let her.\"\n\nI looked over at Naimh. She looked absolutely adorable with an expression of such hope. I immediately wanted to hold her and reassure her that I was as infatuated with her as she was with me, but at the same time, the decision wasn't up to only the three of us. \"We still have to run this by the others. Belle's theories are great and all, but you know that's not concrete enough for us to actually start doing this.\"\n\n\"Of course,\" she nodded agreeably, the hope building into excitement, as if I'd just told her we were taking a trip to Disney World.\n\nBelle saw it too, and she started to get off my lap, her sopping wet pussy pulling off my prick with an audible <plop>. \"Well then, I think my work here is done.\"\n\nNaimh frowned. \"But you didn't finish!\"\n\nBelle grinned at her. \"I'm good. That was more riding him for the fun of it than needing to get off.\"\n\n\"But what about him?\"\n\nBelle's grin widened and glanced back at my wet dick. \"I think you can figure out what to do with that.\"\n\n****\n\nBelle started puttering around, gathering her clothes and putting them on while Naimh argued that she was perfectly fine with Belle's presence and didn't want to push her away.\n\n\"Relax, I get to be with him tomorrow,\" Belle said gently. \"I meant it when I said I didn't mind. This is your first overnight with him... well... besides Tahoe, but that was different. The point is: I want you to have him all to yourself. With our group of friends, that's a rare commodity.\"\n\nNaimh nodded, and reached out to hug Belle. \"Thank you. For everything.\"\n\nBelle grinned and waggled her finger. \"Ooh, I get to be the protective sibling this time and say, 'You'd better treat him right or I'll pound your face in.'\"\n\nBoth girls laughed at that.\n\nNo longer with a warm, wet pussy around my cock, I was starting to deflate a little. But after Belle kissed me goodbye and let herself out the front door, I found myself stiffening up again as a buxom freckled redhead knelt in front of me and leaned forward to give me a tender kiss.\n\n\"Are we really doing this?\" she asked nervously.\n\n\"Naimh O'Brien,\" I began slowly. \"Will you go out with me?\"\n\nIt was the same question I'd asked her once before, but her reaction this time was a complete one-eighty compared to her previous one. You know, like a rom-com where the guy finally asks the girl to marry him, and you can see the joy in her eyes when she claps both hands over her mouth but is too surprised to verbally respond. Naimh burst into happy tears, smiled broadly, and didn't verbally answer except to kiss me again. We started making out hot and heavy, although at the first break for air I did add, \"Pending BTC confirmation on like Monday or something.\"\n\nShe nuzzled her nose against mine and started climbing into my lap. \"Even if this relationship only lasts from now until then, I already know it'll be the happiest two days of my life.\"\n\nWithout further ado, she elevated my re-hardened cock and impaled herself. A second later, she wrapped both arms around my neck and we went back to French kissing like crazy even while our hips began to move against one another.\n\nMy hands gripped Naimh's naked ass, knuckles bent and fingertips digging into her plush buttcheeks to really yank her down onto my penetrating prick. Just like always, we fell into perfect sync, our bodies moving in unison as she undulated like a belly dancer while I repeatedly stuffed her with my fat schlong.\n\nBut a couple of minutes later, I became consciously aware of the way our two shirts were separating my bare chest from her big, beautiful breasts. I broke the kiss long enough to yank my own shirt over my head. But when I started scrabbling at the hem of Naimh's, she abruptly stopped my wrists and grinned at me. And instead, she expertly worked her bra straps and sleeves to pull the bra out without removing the shirt.\n\nThen, she elevated the hem of the tight t-shirt just high enough to reveal an inch of underboob, but no further. And keeping her thumbs notched underneath the bunched fabric stretched taut across her mammaries, she asked coyly, \"See something you like?\"\n\n\"I'll always love your eyes,\" I replied warmly.\n\n\"Good answer,\" Naimh giggled before popping the shirt up and letting her big boobies drop down. She jiggled them a moment for my viewing pleasure, covered them up once more, gave me another titty drop, and finally pulled the shirt off.\n\nAs soon as she was done, I wrapped her up in my arms and started kissing her again.\n\n'Is this really happening?' I asked myself. 'Are we FINALLY doing this?'\n\nI'd still known Naimh for less than a year, but ever since her arrival I'd wanted her badly. I couldn't even completely put a pin in exactly why. I mean, I loved her bubbly personality, her effervescent attitude, and of course the way she flirted with me like crazy. That the luscious Irish redhead was the most gorgeous thing I'd ever seen probably had a lot to do with it, along with that intoxicating accent so unique compared to anything else I'd ever heard around school.\n\nAnd yet, I couldn't have her. She had joined the BTC, and the BTC girls were off limits. We hung out, we socialized, I got so used to her accent that I barely heard it anymore, and we spent time together as friends. And yet, I could never really describe the two of us as being particularly close.\n\nBelle, yes. We spent all our time together both at school and at home.\n\nBut Naimh? The chemistry had always been obvious, but we actually didn't spend that much time together. Alice had been my buddy at school, and during those times Naimh would hang out more with Sam and Zofi while I gravitated to Alice, Belle, and Mari. I couldn't tell you what her favorite color was, what her hopes and dreams were, and had only dived deeper into her art hobbies within the past few weeks.\n\nThe more I thought about it, the more I realized I'd kept her at arm's length in some ways. Avoiding her had not been a recent thing only since Tahoe; I'd subconsciously avoided her for much longer than that.\n\nToo tempting a treat that could ultimately break up the BTC, yes. That part was obvious.\n\nBut was Naimh too... scary? Fuck, had I been nervous around a pretty girl? Kinda? Maybe? She had always been a little different from the other BTC girls. I'd grown up with Belle, Alice, and Mari, and known Sam and Zofi for years. I'd gotten comfortable with them as constant companions, and even gotten used to their flirtatious and teasing ways. Like that stupid boiling frog myth, I'd gotten acclimated to them over time. With Belle, Alice, Mari, Sam, or Zofi, it truly felt like we were friends just messing around with each other. The sexual tension had always felt comfortable.\n\nWith Naimh, however, and even Holly to a similar extent, the sexual tension had been just that: tension. It was palpable, and even the other BTC girls could feel it. Naimh was the newcomer, the unknown. The unknown could be alluring, yes, but dangerous as well. In a way, despite all we'd shared together being part of the BTC for the better part of last year, Naimh was a comparative stranger. There was so much about her I didn't yet know.\n\nBut I wanted to find out.\n\nI wanted to spend time alone with her, figure out if we were compatible. Well, of COURSE we were compatible sexually. The orgasms I had with her were AMAZING. The way we were in sync. The way we could read each other's cues. The way I could tell right now that she wanted me to roll us over so I could pound her senseless... that part was amazing. (Yes, I rolled her over so I could pound her senseless, folding her in half on the armchair with her legs hanging over my shoulders).\n\nBut I wanted to find out if we were compatible in OTHER ways than sexual. She was close to a blank slate, not a stranger but still, she had me hungry to learn more. I hoped a relationship with her could be everything we'd both dreamed of and more. And I genuinely hoped we would have the time and opportunity to find out.\n\nIn the meantime, though, we were busy fucking each other's brains out.\n\n\"Ungh-ungh-ungh-ungh-ungh!\" the busty redhead grunted with each rapid-fire impact. She held my head, eyes wide and staring at me reverently while I continued to hammer her into the armchair.\n\nPinned down and folded in half, she was helpless to resist my jackhammering thrusts, her cunt juicing out of control while I slid effortlessly through her saturated snatch. She came once, quickly, almost as soon as I'd flipped her over and started hammering away. She was approaching a second one already as well, her wide eyes narrowing as she clenched her teeth and started grimacing, unable to control the blissful pleasure threatening to overwhelm her brain.",
        "\"Fuckkkk... meeeee...\" Naimh groaned as she squeezed her eyes shut and threw back her head. \"Fuck me! Pound me! HURT ME! AAAAUUUUGGGGHHH!!!\"\n\nThe \"hurt me\" phrase caught me by surprise, but I was so amped up in that moment that I reacted automatically and spanked her ass with my right hand.\n\n\"AUGH!!\" Naimh screamed in response, her cunt clenching at the same time.\n\nShe LOVED that.\n\nSo I spanked her again. And again. And again.\n\n<THWACK> <THWACK> <THWACK>\n\n\"AUGH!! AUGH!! AUGH!! AAAAUUUUGGGGHHH!!!\" the gorgeous redhead howled at the stars as she exploded, her reddened asscheeks clamping as she bucked off the cushion.\n\n\"Fuck-fuck-fuck-fuck-fuck!\" I growled, on the verge of climax myself. I stopped spanking and switched to holding her hips, pinning her down so I could saw my big dick in and out of her. \"Oh, Neevie. OhmiGAWD you feel so good. I'm gonna cum, baby. I'm gonna cum...\"\n\n\"In my arse! I wanna feel you in my arse!\" she screamed, suddenly kicking her legs off my shoulders and pushing at my chest.\n\nMy eyes flew open. \"What? I... I don't have any lube down here.\"\n\n\"Fuck the lube! Just cram it in! I need to feel it!\"\n\nMemories of Sam crying in horrific pain flooded my brain. \"Neevie, I don't wanna hurt you.\"\n\n\"Fucking FUCK, Matty! Fuck me! Fuck my ass! Now! Now! Now!\" Suiting action to her words, she pushed me off her and flipped over, kneeling on the cushion and bracing herself against the backrest. \"Fuck me, Matty! FUCK MY ARSE! FUCK ME!!!\"\n\nThe ecstasy had gotten into her brain, and the horny redhead wasn't taking 'no' for an answer. I was still scared to fuck her ass dry, but a sudden idea occurred to me, and while she kept howling, \"Fuck me, fuck me, fuck me\", I decided to do just that.\n\nGrabbing Naimh's hips in my hands, I slotted my dick back in her pussy and railed the hell out of her. She screamed and quaked and quivered, still loving the way I fucked her pussy, but at the same time, she howled, \"My arse, Matty! Shove it in my arse! I'm gonna cum AGAIN!\"\n\nI was gonna cum too. Already on the brink of cumming right before her demand for me to sodomize her, I didn't have to rabbit-hump her cunt very long before I felt myself about to blow. Yanking myself out at the last second, I leaned forward, parked my cockhead right at her tightly-crinkled anus, and jacked my rod with my right hand.\n\n\"FUUUUUUCCCK!!!\" I groaned as my dickhead started spitting slippery semen straight against her sphincter. Leaning my weight forward, I even managed to push into it just a little, feeling her clenched muscle give way and open up just a tad.\n\nAt the same time, Naimh reached back with both hands, spreading her cheeks as if she could physically open her asshole that way. And even while I was still in the middle of my orgasm, I grabbed her hips, yanked her backwards, and somehow managed to successfully shove my still-spurting schlong several inches into her anal chute, using my own ejaculatory sperm for impromptu lube.\n\nIt wasn't enough. Not like real lube, at least. The friction was INTENSE and Naimh's asshole felt dry and clamped down around my invading prick tighter than anything I'd ever felt, including the night I'd taken Belle's virginity.\n\nNot that that would stop Naimh tonight. \"AAARRRRRGGGHHH!!!\" she screamed, bucking her butt back at me while I continued squirting semen straight into her bowels. \"AUGH!! AUGH!! AUGH!! AAAAUUUUGGGGHHH!!!\"\n\nWith a final lunge, my dick slid all the way into her ass. Incredibly, she climaxed again at the moment I hit full depth, and she collapsed against the armchair backrest, hanging her head over the edge while screaming and shaking from the overpowering sensations.\n\nMe? I'd already stopped cumming about halfway in. The heat and pressure of her tight bunghole around my dick made me dizzy, as if my head was trapped within her depths. My dick was super-sensitive post-ejaculation, and the sensations were almost unbearable.\n\nBut eventually Naimh stopped screaming and went limp beneath me. I collapsed against my lover's back, one knee braced on the cushion so that I didn't completely crush her, although my dick remained clamped up tight inside her anal chute. And together, we panted and gasped for breath, both of us a little bit in shock.\n\n\"Holy shit,\" I wheezed. \"You actually took my dick in there without lube.\"\n\n\"I felt you cumming on my arsehole,\" she groaned beneath my weight. \"That kinda worked, didn't it?\"\n\n\"You're crazy, you know that?\"\n\n\"Crazy about you. I loved every second of that.\"\n\n\"Didn't it hurt?\"\n\n\"The hurt felt GOOD.\"\n\n\"Now I KNOW you're crazy.\"\n\n\"I loved it when you spanked me. I loved it when you rammed that big cock into my tiny arsehole. I loved it all, just like I love you, Matty.\"\n\nI kissed the back of her head and started nuzzling her neck with my nose. \"I love you too, Neevie.\"\n\n\"I want you to be my boyfriend.\"\n\n\"I want you to be my girlfriend. But what if one of the girls doesn't agree? Or even just didn't want us to mess with the status quo?\" I sighed. \"I couldn't take it if Alice walked away again.\"\n\nCraning her neck around, Naimh caught her breath and looked back at me. Her eyes were shining and she looked at me with such a look of adoration, I couldn't help but kiss her right away.\n\nShe hummed happily into my mouth, and smiled sweetly when I pulled away. \"I won't break up the BTC,\" she said seriously. \"I won't betray them.\"\n\nI smiled. \"But...\"\n\n\"I love you, Matty. I've wanted this since I first met you, and not even the other girls are gonna stop me anymore. I'm GOING to be with you. If the girls aren't okay with me and you dating, then we won't date. But you already said out loud that you want me to be your girlfriend. Do you have ANY idea how long I've been waiting for that? I'll share you with my friends, no problem. I'll keep my love for you a secret, if I really have to. But I am GOING to love you the very best way I know how. We are GOING to fuck each other's brains out as often as we possibly can. I'm in love with you, Matty! Don't you see? I've always been. And am so happy I can finally say that out loud, express how I truly feel, and not hold anything back.\"\n\nI kissed her, grinned, and replied simply...\n\n\"Ditto.\""
    ],
    "authorname": "bluedragonauthor",
    "tags": [
        "anal",
        "anal sex",
        "18-year-old",
        "teenagers",
        "blowjobs",
        "hot tub",
        "bikini",
        "harem",
        "spanking",
        "big breasts"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/the-big-tits-club-ch-21-22"
}
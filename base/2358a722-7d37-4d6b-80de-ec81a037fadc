{
    "title": "Love Like a Blue Shell Pt. 04",
    "pages": [
        "This is it! The Grand Finale! If you've made it this far, well, what's another 20,000 words amongst friends? Enjoy! \n\nTim and Taylor have hosted three wild sex parties with their friends. Not all of them intentionally. Last time, it ended with all three couples fucking other people, despite a strict embargo on doing so. All of this was supposed to help the couples stay together, but the cracks are starting to show. There's only one way to fix it once and for all -- more sex!\n\nEveryone is over 18.\n\n-\n\nWhen Tim woke up the next morning, Zoe was gone. He felt groggy and he tried to sort out the dreams from reality. He found, to his elation, that it had all actually happened.\n\nThey'd hosted another Mario Kart party at their apartment, and this time they'd skipped the drinking and gone straight to sex. Everyone had ended up with someone else's partner -- Tim with his friend Zach's girlfriend, Zoe.\n\nHe pictured her lying next to him the night before, covered in his seed. Getting to be in Zoe without protection had felt amazing. And as hot as it was for him to mark the tall, dark haired woman, he kind of wished she'd let him cum inside her. He'd never done that with Taylor because of her condition and his body seemed to beg for it.\n\nHe picked up his phone and found a text from Zoe, \"Next party, I'm coming (a lot).\" Well, Tim thought, clearly there would be other chances. Maybe even soon.\n\nTim pulled on some pj pants and then stumbled to the bedroom door. He could hear his girlfriend Taylor talking to his closest friend Colin in the kitchen. It stopped him cold.\n\n\"Yeah that,\" Taylor said, \"Stick it in,\"\n\n\"Here?\" Colin asked.\n\n\"Wait,\" Taylor said, \"Wrong spot.\"\n\n\"Are you sure?\"\n\n\"Yes, I'm sure now take it out, dammit.\"\n\n\"Sorry,\" Colin said, \"Sorry sorry. OK, is that better?\"\n\n\"Oh yeah. That's it,\" Taylor said\n\n\"Definitely.\"\n\n\"OK, now push it in as far as it'll go. Twist it a little. There. Perfect.\"\n\nTim burst out of the bedroom. Taylor and Colin were sitting at the kitchen table, wearing their clothes from the day before.\n\n\"Hey Tim,\" Colin said, smiling, \"I found your Lego Millenium Falcon set and Taylor said we could start putting it together. I hope that's OK.\"\n\nTim went over to pour himself a mug of coffee. He was relieved, but also a bit disappointed. And not about the Millennium Falcon.\n\nA moment later, Colin's wife Courtney came out of the shower wearing one of Taylor's purple towels. She smelled nice and looked even better. Maybe it was the residual high from the night before, or the things he thought he'd heard that morning. Or maybe it was just Courtney, still dripping and practically slipping right out of that towel. But Tim found himself really aroused by the auburn-haired woman in that moment.\n\n\"Everyone else left?\" Tim asked. Taylor nodded.\n\nCourtney went over to the kitchen and started to make coffee. \"I hope you had a good time with Zoe last night,\" she said. Tim was about to answer when Colin said. \"Oh yeah, lots of fun.\"\n\n\"And how was Paige?\"\n\n\"Oh.... um, fine,\" Tim said, \"Just fine.\"\n\n\"Really?\" Taylor asked, \"Just fine? I'm sorry, hon. I really thought she'd be a blast in bed.\"\n\n\"Oh it's OK,\" Tim said, \"Don't want to kiss and tell in front of her older brother.\" Tim looked over at Colin suspiciously, but his friend just looked away.\n\n\"I think Paige only has eyes for Colin,\" Courtney said. She filled her mug and then walked back over to where Tim was standing. \"I swear those two have some kind of secret thing going on sometimes.\"\n\n\"We're just close,\" Colin said, \"Nothing more. I don't know where you get these things from.\"\n\n\"Fine. Whatever,\" Courtney said, \"Well Taylor and I had a lovely time.\"\n\n\"Oh really?\" Tim asked. Courtney froze. She realized she'd said something too far.\n\n\"It's fine,\" Taylor said, \"I just watched. It was really hot.\"\n\nTim knew his girlfriend. Recognized that look in her eye. She'd done way more than watch. And that was fine. More than fine. He'd practically begged her to, right? But the fact that she'd clearly never intended on telling him...\n\n\"Well anyway, we should be getting going,\" Courtney said, \"Thanks for another lovely time.\" She leaned over and kissed Tim on the cheek. Colin leaned over and did the same to Taylor.\n\n\"A lovely time,\" Tim said, \"Yes.\" He leaned in to give Courtney a kiss, but she turned and pressed her lips to his. Tim looked over and saw Taylor was doing the same thing to Colin.\n\nBoth couples stood there in the living room, wrapped around each other's significant other. Tim put his hand on Courtney's side and felt her towel start to slip away. She broke the kiss and they both looked over. Colin and Taylor were fully engaged -- tongues clearly twisting in each other's mouths.\n\n\"One more for the road?\" Tim asked. Colin and Taylor broke apart, gasping, and nodded emphatically. Taylor pulled Colin over to the couch and Courtney did the same to Tim. The four of them squeezed onto the sofa. In seconds, both couples were back to kissing, tongues firmly in each others' mouths.\n\nThey began to mirror each other, one pair following the other. Tim started kissing down Courtney's neck. The auburn-haired girl moaned. She slowly slid her towel down her body. Baring her freckled pink breasts. Tim wasn't going to ignore that invitation and he started suckling them.\n\nColin reached over and lifted Taylor's shirt over her head. The lithe brunette held her tiny breasts upward and Colin licked her little pink nipples. Taylor nearly growled as the pleasure shot from her sensitive breasts right down to her pussy.\n\nCourtney was naked now and Tim hurried to join her, throwing his shirt and pajamas to the floor. Then he dove back at Courtney's chest like he would collapse without being latched to her. Their bare skin reverberated against each other. Tim felt his penis press against Courtney's warm wetness and he quickly stepped away.\n\nHis friend's beautiful wife lay back on the couch, legs open, auburn hair splayed all over her body. Tim looked over and saw Taylor standing next to him. Also completely naked. Colin was sitting on the couch next to his wife. His penis as erect and aggressive as Tim's.\n\nTim leaned over and gave Taylor a heady kiss. Then they separated and slid down to their respective partners. Taylor wasted no time, quickly devouring Colin's entire cock in one throaty gulp. Tim buried his face between Courtney's legs and soon the married couple were both moaning in unison. But not from each other's attentions.\n\nColin reached across and grabbed Courtney's hand. She squeezed it tight. Both of them writhed under Tim and Taylor's attention. Taylor dragged her lips up and down Colin's member, almost making love to him with her mouth. Tim buried his tongue in Courtney, used his fingers to smear her clit back and forth.\n\nTaylor pulled back, a long trail of drool connecter her mouth to Colin's cock. \"How's my tongue?\" she asked and Colin just groaned. She gave him a few quick strokes. Then raised her eyebrow at him.\n\n\"S... so good,\" Colin gasped.\n\nTaylor gave Colin another stroke but then stopped. She could see he was on the edge. His body practically trembling.\n\n\"Tell her.\" Taylor looked pointedly at Courtney, writing under Tim's tongue. Colin's penis stood upright and almost purple. He stared up at Taylor for a moment, but when she made it clear she wouldn't move, he turned to his cute wife.\n\n\"Court... She's sucking my cock. Taylor is.\" Taylor bent down and took Colin back into her mouth, but only licked lightly. When Colin didn't say anything more, she slowed.\n\n\"It's the b... best. Best I've ever had.\"\n\nTaylor popped off Colin again. \"Come on, Colin. You have to say it or I'll stop. Am I better little cocksucker than Courtney?\"\n\n\"Y... yes.\"\n\n\"Then you need to say it.\"\n\n\"Courtney... ooooooohhhh Court. Taylor's sucking my cock so much better than you can.\"\n\nTim paused in his licking. He wondered if he should torture Courtney in the same way, but she replied on her own.\n\n\"Tim's licking me Col,\" she said, \"I'm going to cum so hard on his tongue. I... I've never cum so hard I... ah Ah AH!\" Courtney shook as, sure enough, she came -- a shaking, shocking scream of a cum that practically shook the apartment. \"Oh my God. I've never. I mean I didn't even think I...\"\n\nColin looked on in shock. Nearly six years of sex together and he thought, suddenly, that he'd never really made her cum. Not like Tim just had.\n\nTaylor redoubled her efforts on Colin's cock but she knew it was no good. She picked her head up off him and kissed him hard on the mouth.\n\n\"Be right back.\"\n\nCourtney lay splattered against the couch. She reached down and took Tim's hardness in her hands and started stroking. \"Sssssooooo thick,\" she said. \"Want it inside me.\"\n\n\"Courtney we can't,\" Tim said, though his body clearly was screaming something different. Taylor came back into the room holding two silver foil packets. She pushed Colin to the ground, his penis still pointing upward.\n\nTaylor tore open the condom with her teeth and rolled it down Colin's cock. She climbed up over him. Paused. Like the hammer about to drop. Then Taylor planted her pussy right onto Colin's hardness with a triumphant cry. Her pussy squeezed down, so ecstatic to be filled.\n\nColin's cock was a bit shorter than Tim's and a bit thicker than Zach's. Taylor found she liked comparing the sensations. She started humping up and down with abandon, her tiny tits doing their best to flop about with her. Colin fell back, blown, as the sexy brunette drove herself to ecstasy on his cock.\n\nCourtney took one look and lay down on the ground, legs splayed. Tim reached for the other condom, but Courtney slapped it out of his hand. She grabbed his cock, grinned wickedly, and guided him to her waiting, willing snatch.\n\nNow Tim saw the competitive Courtney. The one who needed to win just as badly as Taylor. Who fought to always have the best grades, the best job. Good was never good enough for the girl. She sprinted through life like losing had her tail.\n\nTim groaned as Courtney's pussy swallowed him whole. She was tight and, even better, soaking. After blowing his load twice the night before, Tim could feel that he was going to be able to last awhile. Something about that thought made him soar.\n\nTim reached down and grabbed Courtney's peaches, giving them a good squeeze. \"Oh, I love your tits!\" he cried.\n\n\"Sssssooo thick,\" Courtney hissed. Rolled her head back and forth on the floor like she was delirious.\n\nTaylor ground down on Colin harder. Faster. She reached down and strummed her clit. She wanted him to rise up. Kiss her. Nip at her nipples. Make her cum at his command. Instead he just lay there like he was in shock.\n\nThe look in his eyes was almost worshipful. He even said it. \"Can't believe Taylor's fucking me.\" It was sweet, but Taylor didn't want sweet. She wanted to get fucked. She pinched her clitty hard and pounded her pussy with Colin's cock. Taylor reached back and grabbed Colin's sack, not too gently. \"Mine,\" she said.\n\nHe nodded yes. Taylor arched her eyebrow at him again.\n\n\"Your cock. Your balls. Your cum,\" Colin said. Taylor was pleased to hear him repeat it exactly. She was in his head and she wanted to make sure everyone else knew it, too.\n\n\"T... tell her,\" Taylor said, the dirty talk bringing her closer to release now.\n\n\"Taylor...\" Colin said, \"I'm so close. God. Th... this is Taylor's cock. Taylor's balls. Taylor's cum.\"\n\n\"Only,\" Taylor said. She felt her body start to tighten. The pleasure building in her pussy and radiating outwards.\n\nColin could only gurgle as he tried to agree. He shook and suddenly Taylor felt his cock twitch as he filled the condom with his cum. Taylor gave her clit a few more rubs and... there! Her orgasm exploded.\n\n\"Mine you fucker it's all mine give it to me,\" Taylor rambled incoherently and then fell forward. Washed away in orgasm.\n\nTim kept driving into Courtney. Her leg was kicking out constantly now as she rolled from one cock-squeezing orgasm to the next. Her only sounds a machine gun \"Uhn. Uhn. uhhhhhhhhhn.\"\n\n\"Getting close,\" Tim said.\n\n\"Ohhhh it's g... gonna be a big one,\" Courtney gasped. \"Cum. Cum for me. I n... need it. Please.\"\n\n\"Where?\" Tim asked.\n\n\"Inside me,\" Courtney said, \"Like she never lets you. Fill me up. Give me your seed. Like Taylor never gets.\"\n\nTim practically wept with joy. The words spurred him forward. He pounded his friend's wife harder. Squeezed at her breasts. And then his orgasm exploded. Splattered Courtney's cervix with his cum.\n\nTim's ecstasy triggered Courtney's even higher. Her whole body snapped stock straight and she screamed, \"Cummmmmmming.\"\n\nTim, to his shock, was somehow still filling Courtney's quim. He grunted with each burst. Missile after missile fired into her. A barrage of beautiful boy-stuff unloaded into his friend's wife. Painted her walls and filled her womb.\n\nFinally he felt the pleasure fade. His head was practically vibrating as he rolled forward.\n\nCourtney slowly rose off the floor. As if on purpose, she hung in front of Taylor's face as little dribbles of Tim's cum dripped out of her pussy. Taylor leaned over and gave Colin's satisfied schlong a little squeeze. Still mine, she seemed to say.\n\n\"Well that was fun,\" Courtney said.\n\n\"A blast,\" Tim said, smiling post-sex silly. He looked over at Taylor and they both shared a wicked wink.\n\n\"It's neat to play around like that,\" Taylor said, \"Just say stuff. I don't mean those things. it just turns me on to pretend.\"\n\n\"Exactly,\" Courtney said, \"It heightens the whole experience.\"\n\n*\n\nColin and Courtney got dressed (again) and said far more chaste goodbyes to their friends. Then they stumbled down the stairs to their car. The morning was cold. The windshield sparkled with frost. Colin got behind the wheel and started the engine.\n\n\"What Taylor talked about,\" Colin said, \"That's true right? We were just saying stuff. It didn't mean anything.\"\n\n\"Right,\" Courtney said, \"That's all it was.\"\n\nThey didn't say another word the whole drive home. Colin told himself it was because they were both tired after what had been an absolutely epic evening. Besides, he'd take the silence over arguing any day.\n\n*\n\nOnce again, Taylor and Tim went through a week of wild sex, recreating everything that had happened at the party. However, Tim noticed that the events of the next morning -- Tim with Courtney and Colin with Taylor -- went completely unmentioned. As if it had never happened.\n\nBut then, other things seemed to be avoided, as well. When he and Taylor talked about what had happened with Zach that night, Taylor only mentioned what their tall friend had done with Courtney. Almost as if she wasn't there at all. Though of course she had been.\n\nNot that Tim was completely forthcoming, either. He told Taylor the truth, that he'd ended up with Zoe instead of Paige. But he skipped the grand finale, telling Taylor that he and Zoe had only done a little rubbing before he came on her chest.\n\nTim thought it was for the best, but he also had to concede that this second round of role play was far less exciting. Like watching a great movie with key scenes edited out, Tim could enjoy the show, but he kept feeling like the best stuff was mysteriously missing.\n\nStill, Tim kept up his enthusiasm for appearances. He didn't want to hurt Taylor's feelings.\n\n*\n\nWhile everyone agreed that there had to be another Mario Kart championship, it was obvious that people needed time to recover. And then there were the usual scheduling conflicts. After much negotiation, it was decided that the final Mario Kart tournament of the year would take place on the Saturday before Christmas at Colin and Courtney's house in the 'burbs. The group had gotten so large, Tim and Taylor's apartment could no longer contain them.\n\nTim imagined that all this planning took a lot of effort, but he hardly noticed. Along with fairly frequent texts from Sydney, Tim now had someone else taking up his attention: Zoe. With Sydney, it was like they were friends: they'd ask each other about their day. Tell funny stories. That kind of stuff. The texts with Zoe felt more like communicating with a porn star.\n\nZoe -- the queen of comportment -- could not stop sexting him. Telling him how wet she was. How much she loved his talented tongue. His thick cock. She wasn't sending pics, but Tim felt it was only a matter of time before she took the next step. He wasn't sure how much he could keep it all from Taylor.\n\nNot that he was doing anything wrong, Tim thought. Just some harmless teasing. No one was sneaking off to a neutral location for some extracurricular experimentation. Zoe was still with Zach. And Sydney seemed perfectly content to keep things convivial.\n\nIt was all in good fun.\n\n*\n\nThe week before the party arrived, once again, Tim and Taylor stopped fucking. Practically stopped touching. Taylor found herself frustrated, but at this point it was almost like a ritual. She didn't want to say anything to Tim -- didn't want to hurt his feelings -- but by the end it had all felt forced. Like they were doing it all just to prove that fooling around with other people wasn't fucking up their relationship.\n\nFinally, the big day arrived and they hit the road to Colin and Courtney's house. It started snowing on the way over and the drive took over an hour. The whole time Tim seemed buried in his phone. For the first time since the first time, Taylor felt nervous. Something about this party just felt off for some reason, though she couldn't say why. As an online gamer, Taylor know that some days you wake up and your game is just off for whatever reason. Your clicks are a bit too slow. Your responses are a bit delayed. There's nothing for it.\n\nThe suburban neighborhood looked like a Christmas card- the pretty houses covered in white. All Taylor could think about was turning the car around and driving home before things got worse. And then they were inside the warm house, and Taylor couldn't imagine driving back in the ever-worsening weather, and so she let herself be drawn in all over again.\n\nPaige greeted them at the door. She smiled and gave each a kiss on the cheek, just like a regular old Christmas party. Tim and Taylor took off their coats while Paige introduced them to her college friends: two girls and a guy.\n\nTaylor knew the two women were going to be there, but she was still taken aback by them. They were both redheads -- twins in fact. Apparently, they'd met Paige her freshman year and the three of them had been inseparable ever since.\n\nBoth twins had deep blue eyes and pale skin. Freckled noses and thick, pink lips. Their fiery hair hung long to the middle of their backs. And while Taylor didn't have much of an eye for their bodies -- their boobs looked big, their waists wasp thin -- she could tell by Tim's reaction that these girls were above and beyond beautiful.\n\nThe twins were close to identical, but Taylor could see minute differences. The one with a slightly more pronounced nose was named Anna and the one with the slightly larger bosom was Alexa. Both said their greetings and then bounded off to the kitchen.\n\nThe third friend Paige had brought was a freshman who also happened to live in her dorm. Isaac had a shock of curly brown hair and sharp features. He seemed to be all angles, from his nose to his arms and legs. Even his ears seemed less rounded than they ought to be. Isaac was sweet. He gave Taylor the same gaping look that Tim had given Anna and Alexa. He shook her hand very formally, then fixed his glasses and followed the twins to the kitchen like a sad, lonely puppy.\n\n\"Close friend?\" Taylor asked. Paige laughed, though not cruelly. \"Not exactly. But Isaac owns a Switch and with so many people coming I figured it'd be helpful.\"",
        "Taylor could see why a boy like that would agree to do almost anything for girls that looked like Paige, Anna, and Alexa. Taylor found Isaac strangely likable. He reminded her of Tim and all their friends back when they were in college. Geeky and a bit awkward but clearly sweet and kind of cute, in a certain silly way.\n\nColin entered as Isaac passed. He smiled and shook their hands. Gave Taylor a chaste little kiss that spoke nothing of all they'd shared.\n\n\"It looks like we're going to have two games going at once,\" Tim said.\n\n\"Three actually,\" Colin said. \"We needed that many, what with all the people coming.\"\n\nTaylor tried to count it off in her head and came up short. Even with Isaac and the twins added that put them at 11. So one of the groups would have just three?\n\n\"Long as we're here, let me give you guys the grand tour,\" Colin said. He led them out of the hallway and into the house, proper.\n\n*\n\nColin lead the couple around, starting with the finished basement. Paige came along, even though she'd seen the place already. Everyone could feel how awkward it was between the siblings-- Colin could tell. The two of them had barely spoken since the party. Barely looked each other in the eye.\n\nPaige clearly put the night off as a drunken mistake. Colin wanted to do the same but found he couldn't. His brain kept drifting back to how good it had been. It wasn't just the connection of cock and pussy -- although that had been incredible as well -- but rather some other indefinable aspect that had seemed to bind them together. An ethereal pulse of energy that took the sex from fantastic to something otherworldly. When Colin tried to talk about it, Paige pointedly changed the subject. And so he was left to suffer mostly in silence and hope his desires melted away with time.\n\nOne person who did want to discuss it, though? Courtney. Colin had fessed up and told her that there had been some sort of room mix up and he'd ended up with Paige in his room.\n\n\"By that point, Tim was already engaged and I didn't think it was right to interrupt,\" Colin had explained, \"So Paige and I just talked for a bit and then she hit the road.\"\n\n\"Oh,\" Courtney said, and Colin couldn't tell exactly if his wife was disappointed or suspicious. Colin wasn't sure which would be worse. Like things between them weren't already bad enough.\n\nAfter the party, Colin and Courtney had started fucking vigorously again which was fine. Good, even. But Courtney seemed fixated on the morning after when they both had swapped with Tim and Taylor. Particularly, whenever they were really going hot and heavy, Courtney would ask him, \"Am I the best?\"\n\nIt killed the moment. For one, there was a big difference between the dominating tone that Taylor used versus Courtney's pleading. It didn't make Colin hotter. Just sad. Worse, every time she asked, Colin would picture himself plugging away at Paige and think, \"No. God forgive me. You're not.\"\n\n\"So, three bathrooms?\" Tim asked.\n\n\"Huh? Sorry, I was distracted.\"\n\n\"This place is huge,\" Taylor said, \"I'm sorry it's taken us this long to get out here.\"\n\n\"It's fine,\" Colin said, \"I get it.\" For a second, he considered making a joke about how Tim had been in his wife before he'd been in his house. But then he thought better of it.\n\nIt was the biggest party of the year. Alcohol was already flowing. And Colin realized he wasn't just down. He was morose. Like preparing for a funeral instead of an orgy.\n\n*\n\nWhen they got back downstairs, Taylor saw that Zach and Zoe had arrived with Sydney following close behind. Taylor found herself strangely happy to see the blonde girl back. Like she was an old friend. She hugged Sydney tight and meant it.\n\nThe party started in earnest. Colin and Courtney had provided plenty of liquid courage. Paige's pals had also brought pot. Taylor hadn't smoked in years but it was agreed that everyone should take a hit and Taylor ended up taking more than a few. So now she was drunk and high. Stumbling before things even started. Pot usually mellowed Taylor out but this strain was doing something else, she realized -- it was making her horny.\n\nTaylor began to wonder if it was having that effect on everyone else, too. It seemed like a lot of people were 'accidentally' falling into each other. She noticed more than a few hands on more than a few bottoms, as well. The racing hadn't even started yet, but everyone's engines were running.\n\nThen there was a knock on the door. Taylor thought she'd accounted for everyone but maybe she was missing one.\n\n\"Could you get that?\" Courtney asked. She'd been in the kitchen all day heating up different versions of meat wrapped in different versions of pastry. Taylor was pretty sure her friend was avoiding her and it didn't take a detective to figure out why. Taylor felt like the Dutch boy at the dike -- every time she fixed one problem another one seemed to spring up.\n\nTaylor went to the door and opened it. The music stopped. Laughter faded away. The world shrunk down to just that space between the house and the outside storm. Taylor felt herself go numb.\n\nIt was Steve. That Steve. From the very first Mario Kart contest where everything had gone horribly wrong and also strangely right.\n\nShe hadn't seen him since that weekend. He was wearing a big black and white sweater with a bright red scarf. His face was pink from the cold. His usual smirk, however had been left behind. He just nodded at her solemnly.\n\n\"Hi Taylor,\" Steve said. And that's when she knew he must be really serious. No \"Swifty,\" just her name, spoken simply and without affect. It almost made her feel a little sad for him. The world slowly sped back up to normal. The rolling roar of a party filled Taylor's ears like it had always been there.\n\n\"I owe you an apology,\" Steve said as he shook the snow off his boots, \"I was drunk and I let things get out of control. It was stupid and rude and I hope you can forgive me.\"\n\nTaylor didn't know what to say. She just stared. Steve had gotten a haircut so he looked a little less boyish. He still had the broad chest, the sharp cheekbones. He looked good, Taylor thought. Then quickly stopped herself.\n\n\"I've been talking to Tim at work,\" Steve said, \"I'm sure he's told you. He said you guys were doing OK and that's all that matters. He even said that what happened kind of, um, inspired all this. That doesn't make it right, though. I know.\"\n\nHe kept pausing, expecting her to say something. Taylor only stared. She wanted to be angry. To shout and scream. Shove Steve's nearly perfect body right out the door. But all she could do was stand there. Confused.\n\n\"Anyway,\" Steve said, \"Tim said if I came to the party tonight we'd all be able to, I don't know, make things right. Or whatever.\"\n\nTaylor did her best to give an answer. Sydney walked by.\n\n\"Oh,\" Steve said, \"Hey Sydney.\"\n\n\"Fuck off, shithead,\" Sydney said. Steve pursed his lips and nodded.\n\n\"Guess I deserve that,\" he said.\n\n\"No,\" Taylor said, surprising herself, \"I don't think you do.\"\n\nTaylor ended up being the one to introduce Steve to everyone. It felt a little strange. She had this picture in her head of telling people, \"Hi, this is Steve. He's kind of an asshole most of the time but today he seems OK. Anyway, I got drunk and sucked his dick in front of my boyfriend once and that's why we're all here!\"\n\nThough of course she didn't say that. Showing him around, though, reminded her of just how crowded the house was. Colin and Courtney were in a corner talking to Zoe and one of the twins (Taylor was pretty sure it was Anna). Zach was on the couch arguing football with Tim, Isaac, and Sydney. Well, Tim and Isaac, anyway. Sydney just nodded along like a big-boobed bobblehead.\n\nMeanwhile the other twin -- Alexa almost definitely -- was pouring drinks for Paige and the two were laughing hysterically about nothing. Taylor finally was able to get them to pour her a drink, but as she handed it to Steve he waved her off.\n\n\"No thanks,\" he said.\n\n\"Seriously?\"\n\n\"After everything that happened... Look, I had to make some life changes and that's one of them. It's for the best, I promise.\"\n\n\"What step are you on?\" Taylor asked, teasingly.\n\n\"The one where I don't have to listen to girls who make fun of me. Even if they are kind of cute.\"\n\nTaylor smiled and stuck her tongue out at him. He winked back.\n\n*\n\nSomehow, they were able to get everyone to quiet down and gather in the living room. A few people managed to make the couch but most were standing. Tim found himself with Zoe on his right and Sydney on his left. Basically, the best place in the world as far as he was concerned.\n\nHe and Zoe hadn't talked -- she'd been busy schmoozing with other people. She did give him a smile and a little wave at one point. Tim and Sydney hadn't talked either, but that was because, you know, Sydney. They'd sat together since she'd arrived, though.\n\nTaylor stood up and waved at everyone. Tim could tell by her eyes she was pretty stoned. Though possibly, Tim thought, that was the pot in his own system giving him false signals. One of the side effects getting stoned -- you think everyone is high.\n\nTaylor tried to speak, but Courtney started a chant of \"take it off.\" A group tradition at this point.\n\n\"Ha ha,\" Taylor said, \"Very funny.\"\n\n\"No, I'm serious,\" Courtney said, \"I think we should all get naked right now. Just cut through all the bullshit.\"\n\nTim looked around the room and saw, to his surprise, that everyone was nodding along. The twins -- God, they were gorgeous -- and Isaac all seemed a little nervous, however.\n\n\"I don't know,\" one of the twins said. For the life of him Tim couldn't tell them apart. \"It feels weird to just get naked.\"\n\n\"How about underwear?\" Taylor said, \"We all get down to our underwear right now. That way we cut through the 'bullshit' but no one gets too uncomfortable. After all, it's no different than being in a bikini at the beach, right?\" She winked at Steve when she said that last part.\n\nTim had seen his work friend come in. It had been a little awkward, especially since it was Taylor leading him around. Tim and Steve had started talking again after Thanksgiving. They'd both been very tentative at first, but slowly Tim felt the old friendship unwind.\n\nIt was nice, actually. All the things Tim liked about Steve seemed to come forward and all the bad stuff had just gone away. Besides, Tim felt like it was stupid to be upset with Steve. Tim and Taylor had both done far worse to each other in the interim. Of course, it also helped that Tim was getting constant texts from Steve's ex. He didn't tell him that part, though.\n\nTim had suggested the party as a way of letting Steve know that there were no hard feelings. He'd meant to tell Taylor beforehand but with everything else going on, Tim had forgotten. And, in any case, it had all turned out fine.\n\n\"So,\" Taylor said, \"Down to the bra and panties. Or boxers. Or whatever. Does that work?\"\n\nThe room all agreed and suddenly there was a mad rush to rip off clothes. Tim was wearing boxers and he saw that Steve, Colin, and Zach all were as well. Isaac, however, had on tighty whities. Tim shook his head, sadly. Something about that kid really bugged him.\n\nThen Tim turned his focus to the girls -- a far more appealing observation. Taylor had on a lacy black bra and panties. Courtney was, again, wearing her lucky green underwear. Paige had on a white bra with blue striping and baby blue underwear. Her chest looked even a bit larger than Tim had remembered. The twins, just to make things harder, were both wearing identical periwinkle bra and panty sets. They looked satiny, and while they didn't reveal much, Tim could tell that both Anna and Alexa had nice sized boobs. Probably a C cup.\n\nTim saved his two favorites for last. Zoe, black hair tied back, had on a very dark, navy blue bra and panties. It looked good against her pale skin and she seemed to know it. She gave her chest a little jiggle when she saw Tim was looking.\n\nHe pictured her, again, sprawled across his bed and spattered with his sperm. The way she sort of licked her lips, Tim wondered if Zoe was thinking about the same thing.\n\nAnd then there was Sydney. Holy fucking God Sydney. Her massive chest made everyone else seem underdeveloped in comparison. Even better, she was wearing her fire engine red underwear, once again. Tim's heart hit the floor when he saw it. Sydney gave him a big smile, bashful yet also affectionate. She was wearing her earrings and they glinted in the lights.\n\nAfter everyone was undressed, Taylor somehow got the room's attention again. Tim found he looked forward to his girlfriend's nearly-naked lectures. But not nearly as much as he enjoyed what came after them.\n\n\"As usual, we will be playing for the Mario Kart Championship.\" Taylor had brought the tin foil trophy with her and held it up, as if that was really the goal. Uh huh. \"With so many people, though, we've had to change up the rules some. So, we'll be broken up into three groups of four. Each group will race on one Switch. I wanted to set up a full on, 12-person race but apparently you can't do that. Which is stupid.\"\n\nThe room all nodded. 12 people racing at the same time would have been awesome.\n\n\"So the groups will go against each other, round robin style. When you lose a race, you have to do a dare.\" Here Taylor held up a large deck of cards, all with green backs. She and Tim had found the cards, \"Naughty Games for Couples,\" at a store on Newbury Street of all places. It seemed harmless enough and solved a couple of problems that had been cropping up.\n\nTim and Taylor had agreed -- as had Colin and Courtney -- that while things were fun the last time, they had probably gotten out of hand. A big part of the problem was that no one could exactly figure out what to do so they just said the dirtiest thing they could think of. The cards would help people stay within bounds while still keeping it interesting.\n\n\"So the loser draws a card and then does the dare,\" Taylor said. \"At the end of the round robin, the two people with the best records in each group will move on to a single-elimination round.\"\n\n\"What about ties?\" Paige asked.\n\n\"I think that's unlikely,\" Taylor said, \"I guess we'll figure it out if that happens. In any case, the two people with the best records from the group stage will earn byes. The other four will play each other, four races each, to see who wins. For these races, we'll use the yellow dares from the deck.\"\n\nTaylor held up the yellow-backed cards. Tim knew these were racier, but nothing too crazy was going to happen. They had this under control. Finally.\n\n\"We'll play down to the two finalists who'll do a final Grand Prix. The winner gets the trophy, natch, and they get to give everyone else the yellow dare of their choosing.\"\n\n\"What about the red dares?\" one of the twins asked.\n\n\"What?\" Taylor asked.\n\n\"There's green and yellow in your hand. There must be red cards, too.\"\n\n\"Those are... Tim and I looked at them and they're really raunchy. I don't think we should do those.\"\n\n\"Trust me,\" Tim said, \"It's for the best.\"<br >\n\nEveryone agreed, though Tim thought some seemed more reluctant than others. No one was able to complain, however, because Taylor started splitting them into groups and sending them to their respective rooms.\n\nTim felt himself get giddy. It was all beginning again.\n\n*\n\nTaylor ensured she would stay in the living room. The bedroom TV sucked and the finished basement smelled moldy. Other than that though, she played it honest and so found herself in a group with Anna, Courtney and Steve.\n\nA few months ago, Taylor would have been mortified to end up stuck with Steve. But to her surprise, Taylor found she didn't really mind. He was being exceedingly polite and Taylor had to admit she almost liked him when he acted this way. Almost.\n\nKart was already set up, so everyone grabbed their controllers and got to racing. The first round was Taylor vs Anna. Unlike last time, Taylor didn't feel like she could take her time before trying. The way the tournament was set up, she had to win now or not at all. So she decided to abandon the so-called 'Sydney plan' and go all out.\n\nAfter all the racing they'd been doing, Taylor truly felt like a veteran of Mario Kart. She'd even looked up some local tournaments to see if she could truly take on the titans. Still, Taylor was surprised at how easily she took down the coed redhead.\n\nHaving taken the loss, Anna then smiled and took out the green deck of cards. If losing bothered her, she didn't let it show. Anna turned over her card and showed a drawing of a man kissing a woman on the cheek. \"Kiss,\" the card said. Anna just shrugged. Steve was the only boy in the room so he reaped the reward.\n\nWith everyone already in underwear, Taylor realized, the stakes were starting large. Even something as innocuous as a kiss became illicit when it was with someone wearing almost nothing. Not for the last time, Taylor was glad they were holding everyone to the cards. She could only imagine where things would go if they'd been left to their own imaginations.\n\nSteve then raced Courtney and beat her easily. Courtney's dare was to moon the room. She giggled, bent down at her waist and pulled down her panties. She turned around and showed everyone her backside, including one moment when she pulled her cheeks apart and gave them all a glimpse of her little brown star. Taylor saw Steve eyeing Courtney's freckled bottom. Well, no one could be a complete gentleman.\n\nThe next set of races saw Anna race Courtney and Steve take on Taylor. This was the one that Taylor was legitimately worried about. The memories of the last time they raced were still fresh. Steve had become her nemesis in her mind. Someone she simply could not beat. The blowjob, all that other stuff, that could be forgiven. Losing in Mario Kart? That would haunt Taylor for the rest of her life.\n\nThe race was close but Taylor won. Not a blue shell to be found. She found herself cackling as she crossed the line. Steve just looked at her and shrugged, the same easygoing attitude that she'd found so annoying before. Now it just reinforced Taylor's sense of satisfaction -- she'd finally bested him.\n\nSteve's green dare was that he had to demonstrate a blow job on a banana. The group got a good laugh at that. He found a suitable fruit in the kitchen, then brought it back and proceeded to drool all over it.\n\nFor a moment, Taylor worried he might mock what she had done to him all those months ago. But this was a different Steve. Instead he made a big show of doing a really bad, sloppy blowjob (he even bit the banana at one point) that had the girls all doubled over with laughter.\n\nThen Courtney raced Anna and trounced her. The redheaded twin drove like she'd never touched a controller before. Taylor wondered why Anna even came to the party, but then she realized it was probably for the other stuff. Losing actually helped her cause, in that case.\n\nAnna was given another dare which, this time, was to take off a piece of clothing. If the college girl was nervous now she didn't show it. She just stripped off her light purple bra and tossed it to Steve. She smiled at him, too. Taylor started to think that the ginger twin might have a little crush on him. Taylor wasn't surprised. Steve was a good looking guy. Objectively, of course.\n\nAnna's breasts were nice, well formed and of good size. Of course, Taylor thought woefully, everyone seemed to be of good size compared to her. Taylor noticed that Anna had very small nipples with almost no areola at all and they were erect as all get out. Taylor didn't think it was from the cold, either. She wondered idly if the other twin was exactly the same and thought that she'd probably find out soon enough.\n\nThe final round of races seemed pretty much rote. Steve was racing Anna (much to her delight, no doubt) and Taylor was pretty sure she would crush Courtney. Steve took care of business and Anna's dare was she had to sit on his lap for five minutes. Yeah, rough dare there.",
        "Anna settled on to Steve's seat, doing far more than was really needed to get comfortable. Not that Steve was complaining, Taylor was sure.\n\nThe competition was down to Taylor and Courtney. Perhaps Taylor was feeling too confident. Or maybe the auburn-haired girl had also benefited from all the practice they'd been getting. Regardless of the reason, Taylor sat back slack-jawed as Courtney crushed her.\n\nThey shared a little friendly high five that clearly neither of them felt. Then Taylor took her dare, which was to take off a piece of clothing. So, off with the bra. Not that it made much of a difference, honestly. Nothing to see here folks, just move along. Still she got an appreciative nod from Steve. That was nice.\n\n\"So who won?\" Anna asked. The first round of races had gone so quickly, Taylor was surprised that it was already time to total things up. She'd been having fun, sort of, and she didn't want things to end.\n\n\"Well that's a problem,\" Courtney said. Taylor counted out the wins. She, Courtney, and Steve were all tied for first.\n\n*\n\nColin found himself banished to the finished basement. It wasn't a bad room, though it could smell a bit musty when it was wet out. Still, the TV was big and they had a large, comfy couch down there. No more sitting on the floor like at Tim and Taylor's apartment.\n\nColin had been grouped with Alexa, Paige, and Zach. So at least he had two pieces of eye candy to play against. Except one of those was his sister. So just one piece of eye candy then. Alexa was cute, Colin told himself. Since he was married to the auburn Courtney, he clearly had a thing for redheads.\n\nMaybe it was too much of a thing: in his first race Colin lost to Alexa straight up. They turned to the green deck. Colin had to admit, this was easier than hoping Alexa came up with something appropriate. Probably safer, too. The twin held up the dare card. Paige started laughing almost immediately.\n\n\"Spank him,\" the card said. It showed a very funny illustration of a guy holding his sore bottom.\n\n\"Bare or over the boxers?\" Colin asked, nervously.\n\n\"It doesn't say,\" Alexa said.\n\n\"Oh, can I do it?\" Paige asked, \"Pretty please!\"\n\nAlexa smiled. \"Sure.\"\n\n\"Alright big brother,\" Paige said, sitting down and patting her lap, \"You've been very bad and it's time to take your punishment.\n\nColin sighed then lay down on his sister's lap. He felt his boxers slowly being pulled down.\n\n\"Hey!\"\n\n\"It's the only way you'll learn your lesson,\" Paige said. She hadn't spoken to him for a month and now she was being almost flirty. Did she want to hit him as a punishment? Or was this intended as a prelude to something more? Colin didn't have time to think about it though because,\n\nTHWACK\n\nPaige really must have reared back. His buttcheek stung and then settled into a low burn before Paige delivered another.\n\n\"I think it was just one slap,\" Colin said.\n\n\"I'll tell you when you've had enough,\" Paige said. She slapped the other buttcheek. Then did it again. After she'd hit him four times per cheek, he felt Paige's finger kind of drift over his balls. But he was sure that was just an accident.\n\n\"I think he knows better now,\" Paige said and allowed Colin to stand. He rubbed his tender backside.\n\n\"Lesson learned. Don't get dares,\" Colin said. The rest of the room nodded in agreement.\n\n\"Uh, bro,\" Paige said and pointed. Colin's boxers were still around his thighs, his penis protruded pendulously. He quickly pulled his underwear back up. There would be plenty of time to expose himself later in the game.\n\nZach was next, racing against Paige. At the previous party, Colin's college friend had looked like a worldbeater, at least in the beginning. Then Zach had completely collapsed. Except according to Courtney she and Taylor had both fucked Zach that night. So maybe the lanky lad hadn't really lost at all.\n\nIn any case, this time Zach definitely did lose. In fact, Paige pretty much destroyed him. Zach's card told him to run outside and yell something inappropriate. It was freezing out -- snow was on the ground and piling -- but the girls wouldn't let him get his clothes. Instead, he was forced into the snow in just his boxers.\n\n\"I have a small penis!\" Zach yelled, his voice echoing down the quiet suburban street. Next Spring's annual block party was going to be interesting, Colin thought.\n\nBack inside and shivering, Zach had to race Colin next. After his loss against Alexa, Colin knew he had to knuckle down and he did, pushing his record to 1-1 and basically knocking Zach out of contention.\n\nZach was beginning to get far too familiar with the dare deck. This time he had to give someone a kiss. He leaned down and put his lips on Alexa's cheek, but she turned at the last minute and Zach slid right onto Alexa's lips. Alexa purred happily and put her hand on Zach's head, as close as she could reach, anyway. When Zach finally stepped back, he did not look unpleased by the turn of events.\n\nNot for the first time, Colin wondered what had happened with Zach and Zoe after the party. The couple had seemed a bit distant, but that was kind of the norm for those two. Anyway, if Zach was worried about fooling around behind his girlfriend's back, he certainly didn't show it.\n\nAlexa raced Paige next and Paige pulled it out with the help of a blue shell. The redhead was clearly very good at Kart and Paige was, honestly, lucky to get the win. Alexa's dare was to take her bra off, which Colin was not going to complain about. The girl had good sized tits, probably about the size of grapefruits. She had almost no areola, but her nipples looked sharp enough to cut glass. Very suckable.\n\nThe last round had Zach vs Alexa and Colin against his little sister. Colin was sure Alexa would crush Zach, but somehow his tall friend won outright. As a reward, Zach got to give Alexa's bare breasts a single squeeze. Colin couldn't help but wonder what it would be like to hold the redhead's warm globes in his hands.\n\n\"Really nice,\" Zach said after he was done.\n\nNow it was Colin and Paige's turn. The last time around, Colin had taken a dive for his sister -- letting her win had seemed like the right thing to do. But this time he was going to go for it. There was just too much at stake. Besides, his bottom still hurt from his sister's spanking. A little revenge never hurt anyone.\n\nIt was a close race but Colin was able to pull it out in the last minute, his Kart sailing over Paige's and past the finish line. His sister sighed but she didn't seem too upset. They each had two wins and only one loss, so both of them would be moving on. However, there was still the little matter of Paige's. Colin reached for the deck and said a little prayer to the card gods. Give me something good. Something at least as humiliating as that spanking.\n\nInstead, the card just said \"kiss.\" The siblings looked down at the card and then at each other. Once again, it seemed, the dares were conspiring to keep them together. Alexa offered to take Paige's place -- she kind of owed her one -- but Paige just brushed her off.\n\nColin's cute little sister simply marched forward, leaned up on her tippy toes, and kissed her brother on the lips. There was that shiver again -- that electrical connection that seemed to race right through him every time he touched his sister. Colin had expected a perfunctory peck, but Paige hung there. Kept Colin locked with her lips.\n\nWhen Colin finally committed to letting this be more than just familiar affection, Paige pulled away. Tasted at her own lips and grinned. It wasn't a nervous smile or a mean one. Just a warm, happy look of devotion. It made Colin want to jump forward and hug his sister until someone made them separate.\n\nColin's chest hurt with how much he wanted her then. He wasn't sure what would be worse -- Paige seeing how he felt and shaming him, or her never realizing it at all.\n\n*\n\nTim felt like it was his destiny to end up in the tiny bedroom with the crappy, little television. However, luck seemed happy to balance things out, because he was in a group with both Sydney and Zoe. Also Isaac. But who cared about him?\n\nTim hadn't told either girl the full story about the other. Sydney knew he'd 'fooled around' with Zoe at the party and Zoe had, of course, heard tell of the famously stacked Sydney. But it wasn't like anyone had the full blow-by-blow of Tim's feelings.\n\nAnd what were Tim's feelings, exactly? He wasn't sure. He knew he wanted Sydney, oh so badly. But then he'd look over at Zoe and his heart kind of ached for her, as well. It was a good problem to have, Tim supposed, solved easily. He was with Taylor. Zoe was with Zach. Sydney was single but just friendly. That would be the end of it.\n\nThe first races had Tim against Isaac and Zoe racing Sydney. Tim was wary of the college kid -- Isaac seemed like the kind of kid who spent a lot of time playing video games. Tim couldn't believe it -- he actually felt nervous, and he couldn't completely blame it on the pot. Tim did his best to focus. He gripped the controller a bit too tightly. Stared at the screen and felt the sweat run down his back.\n\nFor all that though, the race wasn't particularly close. Tim crossed the finish line far before Isaac did. The skinny freshman's dare told him to take off his tighty whities which, honestly, was probably doing him a favor. Tim didn't look too hard but he could tell Isaac had a good sized dick. Probably about as average as everyone else's at the party. He was hard as all get out, though, that was for sure.\n\nIsaac sat down and covered himself. He was so shy, he made Sydney seem like an extrovert. Zoe leaned over. \"You have a great cock. Let me see it.\" Isaac almost beamed when she said it and slowly let his hands slide away.\n\nZoe turned and gave Tim a warm smile. It made him like her all the more, the way she was trying to help the kid come out of his shell. Tim remembered being a weird, anxious kid. He wished he'd had a Zoe to help him along.\n\nAfter giving Isaac an appreciative once over, Zoe grabbed her controller for her race against Sydney. Both girls were in their underwear, and Tim couldn't help but stare at four ample, yet perky boobs.\n\nLast time they'd all raced, Sydney had slow-played until things really mattered. Not this time: the buxom blonde wiped the floor with poor Zoe. Tim almost felt bad, like maybe he should have warned his tall companion.\n\nTim got out the green cards and dealt one to Zoe, which asked for a kiss. Tim knew these were the most common in the deck, so he wasn't surprised to see it pop up. Sydney offered to pass it over to Tim or Isaac (the freshman's eyes practically popped out of his head), but Zoe flatly refused. She walked right up to the beautiful blonde girl, a bit of smile playing across her face.\n\nZoe was easily half a foot taller than Sydney. She bent down slowly and pressed her lips to the blonde's. They both sighed in unison. Tim had been expecting something small, cursory. Zoe spent her time on Sydney, tasting and teasing at her lips. Tim thought he even saw Zoe's hand snake up Sydney's bare side at one point.\n\nThey broke and stared at each other starry eyed.\n\n\"That was awesome!\" Isaac said. Everyone laughed.\n\n\"It was pretty great,\" Zoe said. Sydney sat down silently, but Tim thought he recognized the euphoria on her face. It was the same look Sydney had given him when they'd kissed those many months ago. Shocked and happy and something almost a little bit like love.\n\nThe next round had Tim racing Zoe. He was pretty sure he was going to win, so, of course -- he lost. Zoe laughed and clapped as she crossed the finish line. When they'd first arrived, Tim had noticed Zoe looking dour and was worried that the ultra-serious woman from before had returned. Now, in that room, his fun friend was back.\n\n\"Oh, Tim,\" Zoe said, \"I really hope the cards give me a good one.\"\n\nThey did not. Tim's dare was that he had to put clothespins on his nipples for one minute. Zoe cackled madly as she attached them (she found two down in the laundry room). But once they were on it wasn't sexy -- just kind of bizarre. And it hurt like hell.\n\nAfter that less than joyous experience, Isaac raced Sydney. The blonde was clearly not taking any chances -- she hit him with red shells twice back-to-back and that was pretty much it. Isaac was clearly rooting for a kiss dare or something. He might have even taken the clothespins if it meant Sydney would touch his nipples.\n\nInstead, however, he had to go outside and run around the house. It was cold enough that everyone agreed he could put on socks and shoes, but that was it. Isaac slipped out the door. They all watched him through the window, curly hair bouncing as he did one circuit through the snowflakes. When he came back he was practically blue. But Isaac kind of got his wish after all -- Sydney and Zoe draped him with a blanket and then held him close to help him get warm.\n\nThe last round was Isaac against Zoe and Tim racing Sydney. Tim had been looking forward to this moment, even though he knew he would lose. As far as he was concerned, any kind of punishment from Sydney would still be a reward. Instead, though, shiny Sydney dimmed just a bit and Tim was able to take the race.\n\nSydney held up her dare for everyone to see. The whole room almost cheered -- she had to take off her bra. Sydney smiled shyly then brought out her amazing breasts. It wasn't just that they were so big, Tim thought, though of course they were. It was the shape, the perkiness. The way her pink nipples crinkled and poked. These were breasts worth starting a war over. Savoring and storing as an example of all that humanity could hope to accomplish.\n\n\"Wow,\" Zoe and Isaac said at the same time. Sydney just smiled a little and then sat down. But she didn't cover herself either.\n\nNow Isaac raced Zoe. He was still probably a little cold. Or maybe distracted by all the boobage. Or maybe, Tim reflected, the poor guy just sucked at Mario Kart. That seemed a bit unfair -- the one tradeoff for being a geek was you got to beat everyone else at video games. But whatever the reason, Zoe beat him badly.\n\nThe tall, dark-haired girl announced that she wasn't going to take a dare card. Instead she just gave Isaac a little peck on the lips. Tim had to admit to feeling a little jealous, but he backed himself down. How broken was he that he didn't care (actually often enjoyed) when his own girlfriend kissed someone else, but got upset when another dude's girlfriend kissed a different boy, instead of him?\n\nAnyway, Isaac seemed to enjoy his bit of contact and leaned back happily, like his whole world was at least ten percent brighter.\n\n\"Oh fuck,\" Zoe said, \"Look at the standings.\"\n\n\"What's wrong?\" Tim asked. He counted off the wins in his head. Well that was going to be a problem.\n\n*\n\nWell, the group thing didn't go as well as intended, that's for sure. Taylor couldn't help but stew as everyone filed back into the living room. The dares had gone perfectly, just the right amount of tease without taking things too far. But not one group had brought a clear winner. What a mess.\n\nShe, Courtney, and Steve were all locked in at 2-1. Tim's group had done the same -- he, Zoe, and Sydney all went 2-1, as well. Taylor had to admit she was a bit surprised -- she'd thought Isaac might be kind of a dark horse while Zoe had been pretty terrible the last time around.\n\nColin's group was the only one that had managed to avoid the three-way tie. However, he and Paige were both knotted at the top spot. That meant they were both moving on, but they still had to do a tiebreaker.\n\n<br >\"What?\" Colin asked, \"Why?\"\n\n\"The playoff rounds are all based on seeding,\" Taylor said, \"I can't choose who gets a bye, or even who plays each other next, until we have you two sorted out.\"\n\nTaylor gathered everyone around the couch once again. Her boobs did their best to bounce around while she talked. At this point she was going to feel weird giving presentations without her little titties out.\n\nAs she spoke, Taylor was surprised to see how focused everyone was. She thought that the people who were eliminated -- Anna, Alexa, Zach, and Isaac -- would have checked out. But instead they seemed just as involved as the remaining players. The promise of watching was, she supposed, almost as good as doing. In some ways.\n\n\"Let's do the easy one first,\" Taylor said. The room snickered. \"Colin and Paige will have one head-to-head race to determine who won their group. The other groups, though, will do a full grand prix, just the three of them. I'll reshuffle everyone, as well, to keep things fair. Whoever comes in the top two moves on. The people who finish first in those races will get the byes. They raced against tougher odds, after all.\"\n\n\"How do the dares work now?\" Courtney asked, clearly eager.\n\n\"Same as always, winner gives the loser a dare. In the three-ways, the top winner gives a dare to the overall loser, only. So second place doesn't get anything, but they don't have to do anything, either.\"\n\n\"We should move to the yellow dares now,\" Zach said.\n\n\"Yeah, the green ones were way too tame,\" Alexa said. Taylor shrugged -- sure, why not?\n\n*\n\nAfter a quick break, everyone got back together in the living room. This was clearly the nicest room in the house with high ceilings and big, glass doors on one side that opened out to a deck for nicer days than this one. Instead, the wind just howled and beat at the walls like it was trying to break in. The room smelled slightly like pine. And pot, of course.\n\nColin and Courtney had a brown, leather sectional couch in the center of the room, facing a massive flat screen that gave Taylor serious size envy. Bad enough that she had to covet everyone's boobs, now she had to be jealous of their TVs, too?\n\nThe main Mario players squeezed onto the couch while everyone else formed a cheering section, sitting in chairs to the side or on the floor behind. Courtney went around and refilled everyone's drinks. Then they settled in for some sexy racing.\n\nTaylor, Tim and Zoe were up first. The race went as expected -- Taylor won while Tim finished second and Zoe came in third. The group was insistent that now Zoe had to do a yellow dare for Taylor. Taylor hadn't intended it this way, she meant they would just do one dare at the end of all four races. The rest of the party (especially those who were out and looking for entertainment besides drinking and smoking pot) wouldn't let her off the hook.\n\nSo Zoe drew a card that said \"Manual: Rub your partner for five minutes, without letting them achieve orgasm.\"\n\n\"Holy fuck!\" Zoe said, \"How are these just the yellows?\" Not for the first time, Taylor was glad she'd taken the red cards out. If these dares knocked Zoe's socks off, the really bad ones might have blown away her entire body.\n\nNot that Taylor was too excited about the rubbing, either. She didn't really want to get 'rubbed' by another girl, though Zoe was about as attractive as any other. And, Taylor supposed, the card didn't say where she had to be rubbed. Her shoulders were feeling tight.\n\n\"Oh good idea! I know just what to do,\" Zoe said. She had Taylor sit down in a chair, then she stood behind her. Taylor waiting for Zoe to touch her shoulders, and she did. But then she glided down further. The tall, dark-haired girl rested her long fingers right on Taylor's little breasts.\n\nOh God. This was almost worse than a pussy rub. Taylor's tits were especially sensitive. Like they had a direct line to her pussy. Zoe was also, clearly, no stranger to tit rubs. She seemed to know exactly how hard to squeeze and when. How to touch Taylor's sensitive nipples -- when to just tease at them and when to tweak or even pinch.\n\nTime just seemed to drift away as Taylor's body rose to Zoe's boob massage. Then Taylor felt her pussy quiver and she knew she was about to cum just from having her breasts rubbed. It wasn't the first time that had happened -- but never in a room full of people and, certainly, never because of a girl.",
        "But there it was and Taylor felt the warmth start to spread from her center and out to her...\n\nTIME.\n\nZoe's warm fingers slowly slid away. Taylor was sure she sensed some reluctance in how Zoe let go. Or maybe that was just Taylor's own disappointment. She had been so close. SO close.\n\nDammit. Why am I always the one left wanting? The alcohol, the pot, the nudity -- every time Taylor thought she'd reached peak horniness her body found a way to climb ever higher. It left the lithe brunette feeling especially antsy, which was maybe why Tim was able to take the next race. Taylor almost ended up in third, but she was able to salvage second at the last moment. Poor Zoe, who did not look at all upset, was set for a second dare. She patted the yellow cards affectionately before sliding one off the top.\n\nThis time the card said \"Oral: Lick your partner for five minutes.\"\n\n\"Yes! Dreams do come true!\" Zoe clapped her hands and immediately dropped to the floor in front of Tim. She spread her legs, eager.\n\n\"No no,\" Taylor said, \"It's your dare. You have to lick Tim.\n\n\"Oh man,\" Zoe said, \"Fuck. I was really excited, too.\"\n\n\"Wow,\" Alexa said, \"Really?\"\n\n\"Oh you have no idea,\" Zoe said, \"He's amazing.\" Taylor smiled as she looked around the room. Courtney and Paige were nodding in agreement. That was pretty cool -- Paige clearly didn't like Tim at all, but even she had to concede that Tim was awesome at oral.\n\n*\n\nTim sat down in the chair and Zoe crawled over to him. No kidding, she actually crawled -- head up and tongue out like she was auditioning for an '80s music video. Tim beamed. Zoe really was so sexy.\n\nZoe leaned over Tim's crotch and let her long, almost black hair hang over his cock. Then she sucked him in with one big slurp, taking him head to root. Zoe pulled off him and smiled, a little bit of drool already hanging from her mouth.\n\n\"I don't know what I was so sad about,\" she said, quietly, \"I get to suck this fantastic, thick dick.\"\n\nTim groaned. His head lolled back as Zoe returned to work on his member. Zoe wasn't as talented as Taylor -- no one was -- but she was definitely very good. Her enthusiasm about her efforts made even her missteps feel amazing.\n\nTim was pretty sure he could cum from this, but he didn't want to. He had a feeling he'd need to keep his powder dry for as long as possible. Zoe licked up and down his shaft with long strokes, not really trying to bring him off, either.\n\nFinally, time was called. Tim's cock flopped back, covered in drool and left to dangle. Zoe smiled at him and gave him a little peck on the lips. Then she leaned in and whispered, \"You're supposed to make your bitch choke on your big cock. It's the only way she'll learn.\"\n\nTim nearly fell out of the chair as she walked away.\n\n*\n\nWatching her boyfriend get sucked off by someone else's girlfriend was almost routine for Taylor at this point. She was able to settle down for the third race and won it easily. Things were looking good.\n\nTim had finished in last somehow this time, which meant that boyfriend and girlfriend would be going at it. Was it wrong that Taylor was a little disappointed? Was it weirder that the room seemed let down as well?\n\nThe good news was, Taylor was dying to get off and she knew that Tim could get her there. Then she looked at the card and she almost cried.\n\n\"Titty fuck,\" the card said. The world was a cruel place. It really was.\n\nTaylor lay down and gamely pushed her breasts together. Tim lowered himself on top of her and placed his penis between the crevice in her chest. How was this Tim's punishment, really? Taylor thought. Tim rocked back and forth a bit but really it was just him grinding into her ribs. What fun was there in that?\n\nWhen time was up, Tim gave Taylor a peck on the lips and they both sat back down. Well, Taylor felt a little less aroused after that, so she supposed she got what she wanted. Tim tried to give her a happy thumbs up, but she could tell he hadn't enjoyed the experience either. What a waste of a perfectly good dare.\n\nTaylor put her frustration to work and won the last race, handily.\n\n\"Titty fuck my ass,\" Taylor cried. The room laughed but Steve gave her a sort of disdainful look. Was it so long ago that Taylor had been shouting 'suck my dick' at him?\n\nTim had finished second, so Zoe owed Taylor one final favor. Taylor wanted to be excited about this -- that breast rub had been incredible -- but the thought of another girl touching her snatch really icked her out. Taylor wanted to cum, not be forced to reexamine her heterosexuality. She thought that maybe she could transfer Zoe's dare to someone else.\n\nThe card was having none of it however. Instead it simply said, \"Together: show each other how you masturbate for two minutes.\"\n\nWell that was easy enough. Taylor got down on the floor in front of the couch so everyone could crowd around and see. Zoe sat across from her. They stuck their legs out wide. Their feet were almost touching. Both girls shed their panties and Taylor wondered at how easy nudity had now become. The fact that Zoe still had her bra on seemed silly, instead of demure.\n\nThe rug felt itchy on her bottom, but it didn't stop Taylor from getting started. With all the stimulation, Taylor knew two minutes was more than enough. Taylor knew that she was supposed to be 'showing' Zoe and vice versa, but instead she let her eyes drift around the room. She rubbed her clit with one hand and drove two fingers into her vagina with the other.\n\nTaylor looked over at Isaac. No. Tim was fun but why not branch out? She found Zach's eyes. He had a nice body -- and that long dick -- but his face was just eh. Kind of dopey looking, now that Taylor thought of it. Then, as she felt her body building, she landed on Colin.\n\nHe was cute enough and he gave her a sexy little smile. Taylor rubbed even faster and now it was really coming quick and she could feel it building in her, racing, and her eyes flicked over and she felt her whole body seem to SING as she finally reached the point of no return...\n\nLooking right at Steve.\n\nTaylor's orgasm washed over her. It wasn't a huge cum, but it was super satisfying. And somehow staring at Steve made it just that little bit better. Taylor laughed a little as her pleasure leaked out of her. She slowly let herself unclench. Steve smiled at her knowingly and she grinned back. Damn him.\n\nZoe stood up and brushed herself off like they'd just been having a little chat. If the tall girl had worked herself off, Taylor hadn't noticed. She didn't think that Zoe had gotten very far, though, just by looking at her face.\n\nTaylor thought she'd feel satisfied or at least temporarily satiated. Instead, with the pot coursing through her veins and all the half-naked people and the rubbing... Taylor was going to need to cum again for sure. And soon.\n\n*\n\nColin couldn't help but smile when Taylor brought herself off. She was always talking about keeping things safe, not pushing boundaries. But when that girl got horny, holy fuck, she was a house on fire.\n\nWith the first leg of the tiebreakers done, Taylor and Tim had managed to make it to the next round. Taylor would have a bye. Colin had watched with interest -- whoever won wouldn't just determine who he raced, but possible who he got to do far more fun things with. Obviously, then, he was happy to see Taylor moving on.\n\nNow Colin and Paige had to do a runoff to break their tie. Since both siblings would be in the playoffs regardless, Colin didn't really care who won but he wanted everyone to feel like he was trying so he only glanced over at his sister's tits a few times while they went around the track. He assumed that his sister's twin distractions would give her the win, but the blue shell showed its ugly face and so Colin captured the victory. Paige didn't seem too disappointed, though.\n\nColin felt good about himself. About where things were going. They had the right mix of risk and caution. Potential and possibility. Then Taylor held out the yellow deck of cards and Colin's heart dropped. He had forgotten about this part -- or maybe just hadn't considered it. Or maybe his traitorous brain had simply intentionally ignored the fact that he was about to be doing something dirty to his sister all over again. In front of everyone. Including his wife.\n\n\"Oral: Lick your partner for five minutes.\"\n\nColin showed the card to Paige, expecting her to immediately freak out. Instead she just shrugged and pushed her big brother toward the couch.\n\n\"We can switch it out if you'd like,\" Taylor said, \"We could give you, like, two green dares. Or Paige could just perform it on someone else.\"\n\n\"No,\" Paige said, \"It's not a big deal.\"\n\nAnd so it wasn't. Colin slowly sat down, doing his best not to tip the conversation against what he clearly wanted.\n\nHis younger sister peeled his boxers off. Colin was erect, of course -- he made flagpoles look flaccid at that moment. He felt a little ashamed, looking so eager for his sister, but Paige didn't seem to notice. If anyone else did, Colin realized suddenly, he didn't care.\n\n\"Here we go, big bro,\" Paige said and popped the head of Colin's cock into her mouth. Paige wasn't an expert cocksucker, being honest she was probably mediocre at most. Paige acted like she loved to lick her brother's dick, so that made some difference. But mostly it was that little shiver again -- that bit of magic as a sister sucked her brother -- that sent Colin reeling.\n\nPaige seemed to be feeling it too, making loud slurping noises and hmmmming with abandon. First it was just his head. Then his shaft. Then his baby sister had his whole cock in her mouth and was working it up and down like a maniac. No hands, just mouth, messy and loud and extremely enthusiastic.\n\nWhen Colin got head, he would usually shut his eyes and enjoy the sensations. But here he didn't want to. Instead he looked down at his little sister's innocent face and glorified in the fact that it was his so-innocent sister sucking his cock like a good little slut. He ran his hands through her hair lovingly while she worked.\n\nColin felt the pleasure building and he knew he was past the point of return.\n\n\"Paige...\" he tried to warn her, but just saying his sister's name seemed to trigger him and suddenly streams of cum blasted out of his cock. Paige choked a little with the first burst, but then settled and loudly gulped each explosion down.\n\nColin tried to hold back but that only made each release more powerful. The ecstasy shook him with every ejaculation. Finally, he slowed. Paige released his cock then gently licked the head, collecting any leftover spend. She even sucked a little bit on his slit.\n\nThen she looked up at him and licked her lips. Aren't I a good little sister? Don't I deserve my big brother's reward?\n\nColin lolled back. He expected the rest of the room to be staring at him, judging. Instead everyone just looked jealous, like maybe they'd like a little sister suck, as well.\n\nExcept for Courtney, but that was to be expected by this point. She eyed him oddly, like a detective putting together the final clues that would solve the big case.\n\nPaige went behind the couch and sat down on the floor between her twin friends.\n\n\"You swallowed your brother's cum,\" Alexa told her.\n\n\"Was it as awesome as it looked?\" Anna asked. Paige just nodded and smiled.\n\n*\n\nThe last set of three was Steve, Courtney, and Sydney. Sydney did not look happy to be racing against Steve. Honestly, Tim wasn't too happy about it, either. He'd forgiven his friend, mostly, but that didn't mean he wanted to start the argument all over again.\n\nSteve took the first win with Sydney right on his tail and Courtney well behind. The auburn-haired girl looked eager for some action but she seemed less than enthused to be sharing it with Steve. Tim wondered how much Courtney really knew about what had happened with Taylor. Actually, he reflected, she probably knew everything.\n\nCourtney took her yellow card and showed it to the group -- another shared masturbation session. The room oohed and ahhed. Courtney and Steve both sat down in front of the big couch as Taylor and Zoe had before. It felt strange to think of things this way, but Tim was kind of proud that Courtney didn't reach for a pillow and instead just played with herself.\n\nIt didn't seem to do much for her, unfortunately. She mostly just teased at herself. Steve probably did something similar, but Tim didn't bother to look. Time passed without either person getting very far.\n\nSydney won the second race while Steve finished behind her, leaving Courtney in third once again. The girls got the same rubbing card from before, but this time Courtney really did give Sydney a back rub. Both girls had dallied with Zoe at some point, but it wasn't surprising to see them both bail when left in their own boat. Sydney seemed to enjoy the massage, there was a surprising amount of moaning, but nothing more.\n\nSteve won the next race easily, while Sydney finished comfortably in second. Courtney now owed Steve yet another dare. Finishing things out seemed kind of cruel at this point. It was obvious who the two winners were going to be.\n\nThis time it was oral, but only for two minutes. Steve sat down on the designated chair and Courtney leaned over him. Tim had seen enough of Steve getting a blowjob to last him a lifetime, no matter who was performing. Instead he got up and used the bathroom. By the time he was back, the experience was over.\n\n\"You didn't miss much,\" Zoe whispered in Tim's ear, \"She licked him like his dick was filled with tetanus.\"\n\n*\n\nThe room was getting anxious for the good stuff. Antsy. Things were going to have to move forward soon or the crowd was going to engage themselves in something else.\n\nIt didn't help that every favor seemed to be for Courtney and Steve, and Colin's wife clearly could not conceal her disdain for the man. Colin understood why -- Court had told him about what happened with Taylor the first time around. But that didn't help make anything less dry.\n\nThe last race went the same as the rest: Steve won and Courtney lost. That meant Sydney would move on to the next round while Steve got the bye and a last dare from Colin's wife.\n\nCourtney dug into the deck and showed her card to the room. This one said ,\"Anal: Penetrate your partner once.\"\n\n\"Holy shit,\" Tim said.\n\n\"No kidding,\" Zoe said.\n\n\"See?\" Taylor said, \"That's why we're staying at yellow.\"\n\n\"Honey,\" Colin said, \"If you don't want to do that...\" He'd tried butt stuff with Courtney in college and she'd always rebuffed him. It just wasn't for her. Which was fine. Really.\n\n\"It's no big deal,\" Steve said, \"Don't do something you can't handle.\"\n\n\"I didn't say that,\" Courtney snapped. Colin watched his wife's eyes shift from haughty disdain to outright anger. It was as if Steve somehow knew Courtney's secret password -- understood instinctively that the one way to get Courtney riled up was to put her down.\n\nClearly pleased by what he'd accomplished, Steve stood and started to slide off his boxers.\n\n\"Hang on,\" Courtney said, \"It doesn't say with what.\" She smiled like she was somehow outsmarting him. Colin felt his anger rise.\n\nAll this playing around was one thing, but Courtney was willing to go farther with a stranger than with him? How was that even fair? Colin felt someone looking at him and saw it was Paige. She was giving him a strange look. Kind of compassionate. Sort of angry.\n\n\"I have an idea,\" Steve said. He went into the kitchen and found some vegetable oil. Then he dipped his pointer in there till it was practically yellow. Courtney bent at the waist and presented her brown asterisk to Steve. He gave the room a self-confident smile and then dipped his finger into Colin's wife's anus.\n\nShe made a little gasp and her eyes went wider and wider while Steve stretched her sphincter. It wasn't pained. In fact, it kind of sounded a bit like pleasure.\n\n\"Long finger,\" she choked out.\n\nColin didn't care that Steve had somehow unlocked his wife's back door. He was angry that Courtney had let him. As easy as he'd slipped it in, Steve slowly removed his digit. Then he went back into the kitchen and washed his hands. Courtney slowly straightened.\n\n\"How was it?\" Taylor asked.\n\n\"Weird, mostly,\" Courtney said, \"But also a bit neat. Especially in front of other people.\"\n\n\"That's pretty much the whole game, isn't it?\" Tim said, \"Weird, but also a bit neat. Especially in front of other people.\"\n\nThe room laughed, but Colin couldn't bring himself to join in. Instead he wrapped his arms around himself and stared somewhere off center. Courtney tried to catch his eye but she couldn't. He felt the rage rising. He knew he should tamp it down but he wouldn't.\n\nWith the tiebreakers finished it was time for the finals. The room got really quiet, as if somehow they could all sense that the big moment was about to arrive. Taylor drew names and announced that, in the first round, Tim would be racing Sydney and Colin -- somehow, again -- would go against Paige.\n\nColin didn't know whether to celebrate or curse.\n\n\"So they'll all do four races, with the loser taking a yellow card from the stack and...\"\n\n\"We should do red dares for these,\" Alexa said, \"The yellow ones are boring.\"\n\n\"I don't know guys,\" Tim said, \"I've seen those cards. They're really racy.\"\n\n\"We're racing,\" Zoe said, \"The dares should be racy.\" What a turnaround from the time before. The girl who had thought losing a sock was a step too far was suddenly demanding... well, a heck of a lot more than footwear.\n\n\"No,\" Taylor said, flatly, \"Not happening.\"\n\n\"Did you bring the red cards?\" Zach asked, clearly pleased with his solution. Of course Taylor hadn't brought the cards. That would end the argument right there.\n\n\"They're in our car,\" Tim said.\n\nWhoops. In trying to pull his friends from the fire, Zach had only fed the flames.\n\n\"If we have the reds we should play them,\" Courtney said.\n\nThe barrage just went on, everyone shouting and arguing like a court scene in a TV movie. Taylor finally broke. \"There's intercourse in them,\" she said, \"And that's just the start. We're not... I mean, I just don't think we should be... Fucking.\" She said the last word quietly.\n\nAnd Colin's anger finally overtook him. That was the big issue? Seriously? He'd just watched his wife get it in the ass. With a finger sure, but still. \"What's the big deal about fucking?\" he asked, \"You and Courtney fucked Zach last time.\"\n\n\"Wait, what?\" Tim leapt off the couch like it was lit on fire. And Colin realized he'd made a terrible mistake. He'd known he was supposed to keep it quiet. But then he'd gotten upset and Taylor had mentioned fucking it had all just sort of slipped out before he could stop himself.\n\n\"You and Zach?\" Tim asked, turning to Taylor.\n\n\"I told you we fooled around a little,\" Taylor said, almost pleading. She stood as well and held out her hands, like trying to placate her boyfriend. The room just watched this play out in silence. The TV movie had just gotten interesting.\n\n\"You said you watched, you didn't say you fucked him.\" Tim was practically panting.\n\n\"Oh come off it, dude,\" Zach called out from the side, \"You fucked Zoe, too.\"\n\nTaylor's arms dropped. Her face ran red. \"You weren't supposed to do that,\" she said, \"It was a rule and everything.\"\n\n\"You fucked Zach,\" Tim said.\n\n\"You didn't know that at the time,\" Taylor said. They were both staring at each other. Glaring. Heads forward. Arms back. Like at any moment they might punch each other. No one had even mentioned the fact that they'd also fucked Colin and Courtney the next morning. Colin figured that error was best left uncorrected.\n\nInstead, he slowly stepped up and stood between them. \"This is my fault, I'm sorry.\"",
        "\"You have nothing to be sorry for,\" Taylor said.\n\n\"Yeah dude,\" Tim said.\n\n\"More fucking, less fighting!\" Alexa shouted. Of course, Paige's pal was the troublemaker in the group. Colin should have expected it.\n\nIt seemed as if no one knew where to go from there, so they all just stayed frozen in place. Finally Zoe broke the tension.\n\n\"I don't know about you guys, but I'm ready to see some action. We've been building to this all day. So let's just do it. Let's get out the red cards and race.\"\n\n\"Some of them are really bad,\" Taylor said, not even looking away from Tim, \"Like stuff I wouldn't do if you paid me.\"\n\n\"OK\" Courtney said, \"That's fine. Whoever wins their race can look at three red dare cards. Then they can pick one. That way, none of the really wrong stuff has to happen.\"\n\nColin wasn't exactly sure how that solved anything. A winner could still make someone do something awful, but the rest of the room seemed OK with it.\n\n\"Fine,\" Taylor said and sat back down, \"Fan-freaking-tastic.\" Tim agreed and flopped down on the far side of the room. Well, Colin thought, at least that problem was solved.\n\n*\n\nRace one would be a grand prix -- four races -- between Colin and Paige. How he kept drawing his little sister Colin didn't know, but it didn't matter. He was stuck. Secretly happily stuck at that. But he kept up his pout-face for appearances.\n\nWhatever anger Colin had been feeling before, Tim and Taylor's fight had knocked it out of him. Colin realized he didn't care what Courtney did. Or anyone really. Just Paige. And if this race meant he could have her, even for a moment... Hell, he was willing to go through a lot worse than that for the woman he loved. Realistically, Colin he knew he couldn't have Paige -- he'd never have her -- but he was committed to chasing for as long as he could.\n\nColin sat down on the couch next to his pretty little sister. He was completely naked, but she'd managed to survive with her white and blue bra and panties set. Colin couldn't help but appreciate what his sister was already showing. Couldn't help but anticipate what else she might reveal.\n\nOutside it was still snowing hard. The party was all watching the screen, rapt, though Colin thought that he could see some hands sneaking into places they shouldn't be. The alcohol was out again and someone was passing around a joint. The room felt tight. Over bright. The Mario music chirped happily.\n\nPaige tied her brown hair back in a ponytail, then leaned over and gave Colin a little kiss on the cheek. \"You can have my ass anytime you want, big bro. But first you have to win it.\"\n\n\"Any time...?\" Colin asked but then the race started. Paige laughed maniacally as she sped off. Her little distraction had worked -- Paige took the race with ease.\n\nThe next track, Colin was able to focus a bit better and he managed to squeak out a win. Paige punished him for that with the third race. She practically lapped him. Colin needed the last one or his little sister would move on to the next round.\n\nHe wasn't sure why, but Colin felt the need to beat his sister. Maybe it was so Paige wouldn't move on and do all kinds of dares with other guys. Maybe it was Colin's competitive nature. Or maybe, he admitted to himself, the only thing he wanted in the world in that moment was to hold his sister completely. And winning was the only way he could see to do it.\n\nColin took the lead immediately. One lap passed. Then the second. He had this. And then whoooosh! His screen went blue and it was all over. Paige jumped up and cheered. She'd beaten him.\n\nAfter the room died down, Taylor pulled out a thin stack of red cards. Even the color seemed ominous. They screamed danger and Colin suddenly wondered if they'd chosen the wrong way. Taylor took out three, blind, and handed them to Paige. Colin couldn't see what the options were. He tried to search his sister's eyes but saw nothing. His heart was pounding in his chest like he'd just run the race instead of playing it on screen.\n\nPaige picked her card carefully, like she was defusing a bomb, and then nodded in Colin's direction.\n\n\"I think we should do these in private,\" Paige said. The room all groaned but everyone who was racing quickly agreed. \"You guys go ahead and do the next race. We'll be right back.\"\n\nPaige took Colin's hand and led him back to the master bedroom. It was dark in there and she left it that way. Colin could make out the little details of the room he knew so well. The frilly curtains and heavy dressers. More pillows then he ever imagined owning.\n\n\"Get on the bed,\" Paige said, throatily. Colin climbed onto his marital bed, lay down on the marital sheets. Pushed back the marital comforter. His head was actually resting on one of Courtney's pillows. Paige stood at the foot of the bed and shook her hair out. Then she reached behind herself and shed her remaining clothing. Paige's amazing breasts hung loose and Colin salivated at the sight of them.\n\n\"Your body is amazing, Paige,\" Colin said.\n\nPaige climbed up onto the bed. She tossed the card to the side where Colin couldn't see it.\n\nShe lowered herself over his body, sort of rubbed his nose with her own. Her breasts teased lightly at his chest. His penis trapped between them. Paige felt so warm and soft. Colin could smell her cherry lips and he reached to kiss them but she sort of pulled back.\n\nColin was here, exactly where he'd wished and prayed he could be again: naked in bed with his baby sister. His whole body seemed to hold in place, like any movement might scare her away.\n\n\"I screwed up,\" she told him.\n\n\"You didn't,\" Colin said, \"It was me. My fault.\"\n\n\"We shouldn't have fucked,\" Paige said. Colin felt his heart break. What was all this for then? The nudity. The bed. All for one last recrimination before saying goodbye forever? \"I was drunk and really horny and I just wanted a dick so bad and so I thought yours was as good as any other. I'm sorry.\"\n\nColin felt like he might cry. He wrapped his arms around his sister, like if he held her there she'd never go away. Paige leaned her head down and kissed Colin softly on the lips. It was warm and wonderful and that little shiver shot down his spine and up his arms.\n\n\"God, I'm so sorry, Paige,\" Colin said. She shushed him.\n\n\"We should have made love,\" Paige said. And then the tears really did come.\n\n\"I love you Colin,\" Paige said, \"I've loved you since I don't know when. I just didn't know how to say it. And you were with that stupid slut.\"\n\n\"Courtney.\"\n\n\"Yeah, her. And I felt like telling you how I felt was just asking to get hurt. Then you took me to that dumb Mario Kart party and we got drunk and... I don't care anymore. I want to be with you. If you don't want to be with me then that's your loss. But I love you.\"\n\nColin looked up and saw Paige was crying too. He kissed her mouth, slowly, like it was the most precious thing in the world. Because of course it was. Then slowly, he gripped Paige and rolled her over onto her back.\n\n\"Colin?\" she asked, her brown eyes looking scared, \"Say something.\"\n\nHe kissed her again, then dragged his tongue down her neck, her chest. He took her beautiful breast in his mouth and sucked on the nipple. Then the other. He dropped lower now. Facing her pussy. It was practically purple and dripping. He could even see her clit poking out.\n\n\"I love you too,\" Colin said, then assaulted her opening with his mouth. His tongue. Paige gasped, then moaned. Colin focused everything he had on Paige's twat. He knew he was no Tim, but then he also knew that no person could ever make him feel what Paige did. And that would be more than enough.\n\n\"Oh GOD I love my brother,\" Paige cried. Colin tried to shush her, but she just shook her head.\n\n\"I don't care,\" Paige said, \"I want that slut to hear. My brother is mine.\"\n\nColin just laughed and went back to licking Paige's pussy. Her hands shot down and grabbed Colin's hair, lifting his head.\n\n\"Say it,\" Paige growled, \"Mine.\"\n\n\"I'm yours,\" Colin said, \"Yours only.\" And he smiled because, unlike those other times playing with Taylor, he knew that it was true. Paige kept hold of his head and pulled him forward. She kissed him again, licking her own juices off his face. Then she grabbed his cock and held it at her entrance.\n\n\"Mine forever,\" Paige said, squeezing. Colin just nodded. She pulled him forward, so that the head of his dick began to slide into his sister. \"This isn't a mistake. It's us. Ours. The only thing that matters.\" She reached back, grabbed his buns, and pulled him forward. Colin didn't need encouragement, he pushed until his cock was buried in his sweet little sis.\n\nThere was that perfection again. That strange satisfaction of feeling something fit exactly. Like Paige's pussy was made for his cock, and his dick was designed for hers. Not just a tightness -- an elemental alignment where every vein and ridge seemed to have a slot where it belonged inside his baby sister.\n\n\"We're going to make love today,\" Paige said, \"Tomorrow. Forever. And you're going to put your baby in my belly.\"\n\n\"Now?\" Colin asked.\n\n\"Eventually. Need to get off the pill first. If, you know, you want that.\"\n\n\"Definitely,\" Colin said.\n\n\"Now make your little sister yours,\" Paige said.\n\nColin pulled back and then slowly pushed forward. He covered her body in kisses as he slowly slid back and forth . They both groaned, pawed at each other, like searching for every bit of their love. Colin wanted to rush forward, but he made himself focus on Paige's pleasure. She reached down and found her clit and started rubbing it. Then she screamed as her body straightened.\n\nPaige kissed Colin hard. Put her hand on his face. \"I change my mind,\" Paige said, \"I want you to fuck me.\"\n\n*\n\nOutside in the living room, it was impossible not to hear the constant banging as the bed beat against the walls. Paige's shrieks and cries.\n\n\"My husband is fucking his little sister in my bed,\" Courtney said, almost as if she were in shock.\n\n\"I know,\" Alexa said, \"isn't it awesome!\"\n\nAnd Paige's voice echoed across the whole house, \"My brother is fucking meeeeeeeeee.\"\n\n*\n\n\"My brother is fucking meeeeeee!\" Paige screamed as Colin pounded at her. There was nothing else in the world -- just him and his sister. His cock in her cunt. His ecstasy screaming to escape.\n\nColin drove himself into Paige's perfect pussy. He felt his orgasm building.\n\n\"N... need you to cum now,\" Paige said.\n\n\"You going to cum with me?\"\n\n\"I think I'm going to die with you.\"\n\nColin grabbed the edges of the bed and started slamming into her.\n\n\"Here it comes,\" he gasped. The dam burst and Colin came. Again and again. Saying \"I love my little sister. I love my little sister.\" Over and over again. Paige's eyes went wide. Her mouth gaped open in a silent scream. Her brother's cum had caused her own and the two of them blasted through each other's ecstasy.\n\nColin thought he'd never stop cumming. Hoped he wouldn't. The joy of spending in his sister was more than he could ever have imagined. But it did end, eventually, and he sighed as the contentment settled in. He looked down and saw Paige watching him, eyes so brown and bright.\n\nMaybe I've never really loved till now.\n\nThe siblings separated, almost reluctantly. Paige's hand immediately went back to Colin's penis. She rubbed it. Bent down and kissed it. \"God I love this thing. Almost as much as I love the man it's attached to.\"\n\n\"Daaaaaad,\" Colin said, \"Paige won't stop touching my penis.\"\n\n\"Damn straight,\" Paige said. She let go and then rolled out of bed. She started to pick her panties off the floor, then thought better of it.\n\n\"Wait,\" Colin said, \"Where are you going?\"\n\n\"I'll be back,\" Paige said, \"I just have to do my next round of Kart.\"\n\n\"Please stay,\" Colin said, \"Seriously. I'll make you your own trophy if that's what it takes. All gold and silver and ringed with giant rubies. The best a Systems Analyst can afford. Whatever you want.\"\n\n\"Well... I was looking forward to having Zach's dick in me. And Steve seems awfully nice as well. In fact, now that I think about it. You were my first. That means I need to try out everyone else's cock before I can settle on your.\"\n\nColin looked up, frightened. She was kidding, right? She had to be kidding.\n\nPaige ran back and jumped onto the bed, making the whole thing bounce. \"Nahhhhh. I think I'll stay right here and play with my brand new brother-cock. It was, after all, clearly made just for me.\" Then she kissed him. Colin felt himself ready for another go-round, as if he'd never even had the first.\n\nSome time later, Colin got up and locked the bedroom door. Otherwise, he spent the rest of the night in bed with his beloved little sister.\n\n*\n\nTim watched as Colin and Paige went back to the bedroom and he wondered. It really did seem like something was going on with those two. Tim didn't have any siblings, maybe this was how it was with all of them.\n\n\"Not usually, no,\" Courtney said.\n\n\"Speak for yourself,\" the twins said in unison. Every eyebrow in the room popped up.\n\nTim didn't spend any more time thinking about it: it was his turn to race against Sydney. The perfect blonde smiled at him as he sat down on the couch. He tried to get comfortable. To settle himself down and get ready to race. But he couldn't.\n\nTim was still shaken from what he'd found out about Taylor. Shaking. Tim hadn't realized he'd been holding on to that anger this whole time. Yet there it was -- gallons of it spilled out for everyone to see. He'd told himself he was OK so often, he'd forgotten to check if it was really true.\n\nTim had thought that maybe Taylor sucked Zach's dick or something. He'd been fine with that. But fucking? Somehow it felt like a betrayal. The fact that Taylor had lied about it told Tim she felt the same way. But then, hadn't he done the same thing himself? Fucked Zoe and never told his girlfriend? Not to mention all the texting. Wasn't that just as bad?\n\nFor that matter, Tim thought, what was he doing in this moment -- sitting naked next to the incredible shirt-less Sydney and thinking about how much he wanted her? His anger finally drifted away. He and Taylor had both done wrong, he realized. Why feel bad about it when there was so much good yet to gain?\n\nTim picked up his controller. He gave Sydney a smile. Tim had been playing Mario Kart so much lately, he'd gotten really good at it. Of course, Sydney was skilled, too. But Tim knew in his heart he could take it to her.\n\nHe could not.\n\nFour quick races, no blue shells, red shells, or green shells needed. Tim could have found a magical purple shell that dropped him at the finish line -- he was sure he still would've lost.\n\n\"Good game,\" Sydney said sweetly then kissed Tim on the cheek. The buxom blonde stood. Courtney fanned the red cards in front of her. Tim couldn't see what they said. He prayed for something halfway decent. Another titty fuck -- this time with actual titties -- would be divine.\n\nSydney looked at the cards, eyes wide, like picking a candy at the store. Everything so delicious, how could you only have one? She made her choice, ripping it from Courtney's hands with a flourish. Then Sydney stuck her free hand in Tim's. He let her lead him back to one of the guest bedrooms. Sydney locked the door behind them.\n\nThe room was dark. There was a large bed in there, soft and comfy. The cold beat at the windows, but the room felt warm. Tim climbed up on the bed and lay down. His cock stood up, engorged and eager. Sydney seemed to eye it nervously.\n\n\"So what are we doing?\" Tim asked. Sydney slowly turned the card and showed him. It had a pencil sketch of a man standing over a woman. His penis in his hand.\n\n\"Urinate on her,\" the card said. Tim was struck stupid. All these words spluttered out and none of them meant anything.\n\n\"Um. I mean. Fuck. Uh. If you really. Oh God.\"\n\nThen Sydney laughed, high pitched and tinkling like wind chimes in a Summer breeze. Her face turned red as she did it and then she snorted. Tim realized he'd never heard her laugh before. Just 'lols' on text or little titters that weren't her real laugh.\n\n\"I'm sorry,\" Sydney said, \"I just wanted to see your reaction.\" She climbed up on the bed and lay next to Tim. She rested her head on his shoulder, and her long, silky blonde hair, drifted down against his chest.\n\n\"So what do you want me to do to you then?\" Tim said.\n\nSydney rolled over a bit so her breasts hung down onto Tim's chest. Then she kissed him, in a way that he immediately recognized. It was how he'd kissed her, way back when, at that first party.\n\n\"Whatever you want,\" Sydney said. Tim kissed her back, the way he'd been dreaming of doing. With lips and tongue and love. Tim was gentle with Sydney in a way that just felt right. He imagined a lot of men went right for Sydney's breasts and molested them for hours. Because, why not?\n\nTim, instead, gave her whole body attention more akin to worship. Kissed her fingers. Dragged his nails across her back. Traced her arms and legs and toes. He felt Sydney sigh under him. A happy little expiration.\n\nFinally, Tim trailed his way down to her sex. He slowly pulled the bright red panties away -- god he loved that underwear on her. He was almost sad to take it off. He saw that her pussy was completely shaved and was surprised.\n\n\"After I saw Courtney's,\" Sydney said, \"I don't know. I wanted to try it. Do you like it?\"\n\n\"I like you, however you are,\" Tim said, \"But I do kind of miss all that blonde hair. I thought it was sexy.\"\n\n\"I'll grow it back then,\" Sydney said.\n\n\"Does make it easier to do this,\" Tim said, and pressed his mouth to Sydney's nether lips. Again he was gentle, yet determined, and definitely careful to search for Sydney's responses and react to them the right way\n\nSydney moaned. She ran her hands through his hair. Kind of writhed and rolled her head back and forth. But Tim could tell she was holding back. There were these little moments where Sydney's whole body started to rise and then she'd quickly flatten it.\n\nLike she was a supercar going down a highway known for speed traps, every time Tim accelerated, Sydney tapped the brakes.\n\n\"You've never cum with me,\" Tim said, \"Even when we all rubbed together that one time. You told me you were 'fine' but you didn't cum.\"\n\n\"I was fine,\" Sydney said, \"Seeing you do that and knowing that it was me? It was amazing. Telling Taylor what to do... I felt so powerful. I'm, uh, I don't usually feel that way. Mostly scared.\"\n\n\"Do you feel scared with me?\"\n\n\"I wouldn't be here if I was\"\n\n\"OK. Well I want you to trust me. To help you cum.\"\n\n\"It's just, ummmm, I get a little out of control. Wild. When I... You know?\"\n\n\"I don't care. You can kick me in the face five times if that's how you get there. It's your body. It's beautiful. Just let it out. For me. Please.\"\n\nSydney seemed to think about it for a moment, but then she nodded. Tim smiled and dipped his head back between her legs.\n\nHe went back to licking Sydney, but now he was far more focused. He pressed the issue, you might say. Tim filled Sydney with his fingers. Stimulated her with his tongue. He felt her legs go taut around him.\n\nSydney's breath seemed to catch, accelerate. Come out in little bursts and gasps. She whimpered, drew in a deep breath.\n\n\"Oh FUCK!\"\n\nIt was the loudest thing Tim had ever heard Sydney say.\n\n\"Oh FUCK FUCK fffffffffffFFFFFFFFFUCK! Your tongue is licking me so GOOD! Oh eat me. Just keep eating me and eating me and eating my slutty pussy!\" Sydney's whole body seemed to tense and then she screamed his name, a long howl that exclaimed her ecstasy. Legs and hands squeezing Tim's head so hard he thought it might pop.\n\nSydney slowly uncurled. She reached down and slowly pulled Tim up. \"Fuck, that was good,\" she said and kissed him. Tasted herself on his lips. She reached down and grabbed his cock.",
        "Sydney didn't wait for Tim to say anything, she just aimed his penis at her sex and smiled at him. \"So you going to fuck me or what?\"\n\nTim smiled and slid inside of Sydney. Kissed her deeply as he buried inch after inch in her eager quim. It was tight as fuck, yet she was sopping and he slid in easily. As soon as his stick hit bottom, Sydney stiffened, eyes fluttering, and let out a low moan.\n\n\"Oh FUCK yeah,\" she said, \"Let's do this.\"\n\nSydney seemed to like the word fuck a lot when she was fucking. She also seemed to like to tell Tim what to do. \"Yes, like that. No, harder. Faster. Suck my titties. Bit them! OH! Pump my pussy, pump IT!\"\n\nOther times she would provide commentary. \"GOD that cock is in me so good. Just. Keep. Fucking. My slutty, hungry, pussy. FUCK! It's so thick! I can barely stand it. Oh you magnificent fucker keep fucking your little slut.\"\n\nBut mostly, Sydney howled. She screamed. She seemed endured orgasm after orgasm as Tim pounded her.\n\n*\n\nThe bed in Courtney's bedroom was still banging when the living room heard a new sound: a long low howl, almost animal, followed by a scream.\n\n\"Oh FUCK Tim you're fucking me so GOOD! Oh my pussy needs that cock so bad you need to.... oooooOOOOOOOOO GOD! Keep. Fucking. MEEEEEEEEEEEEE!\"\n\nNow it was Taylor's turn to look up. She and Courtney shared a grimace. Then Taylor glanced over at Steve. To her shock, he looked almost ill.\n\n\"She... she always just lay there,\" he said, \"Never said a word. I mean... Not a word. I swear.\"\n\n\"OH! I love that thick cock!\" Sydney shouted, \"Harder. Fuck me harder. Punish that slutty pussy. I'm cumming again oh fffffffFFFFFFFFFUCK can't stop cummmmmming!\"\n\n*\n\n\"OH! I love that thick cock!\" Sydney shouted, \"Harder. Fuck me harder. Punish that slutty pussy. I'm cumming again oh fffffffFFFFFFFFFUCK can't stop cummmmmming!\"\n\nTim felt a little tingling in his cock. His balls. Sydney was practically shouting but suddenly she got quiet. Almost a whisper. \"Y... you ready to cum inside me? Fill me up?\"\n\nWith horror, Tim suddenly realized that he had, again, forgotten about protection. He had tons of condoms -- in his pockets, his wallet, he'd even left some in the car just in case. But not one was on his dick in the moment that he might actually need one.\n\nSydney seemed to see the shadow that crossed his face. She smiled that loving smile.\n\n\"I'm safe,\" she said, \"You can do it. Unload in me. Whenever you want. I promise I'm a good girl. I'll take it all. OH! I want your CUM so baaaaaaaaad!\"\n\nTim redoubled his efforts. Stroking faster now. He kept his hands on Sydney's tits and squeezed them practically purple. He wasn't building anymore, just bursting and suddenly,\n\n\"Oh YES!\" Sydney screamed, \"Fill me UUUUUUUUUUUP!\"\n\nTim's world shrank down to just a pinprick. His only sensation was dumping load after load of joyful juice into Sydney's hungry pussy. He thought he'd felt her cum before. But now his orgasm seemed to trigger something even further.\n\nSydney's whole body tightened. Her mouth, her eyes, screwed shut. Her body seemed to shake with every one of Tim's ejaculations. Like he was literally shooting her, Sydney screamed so loud he thought she'd shatter the windows. Then slowly she began to still.\n\nTim's head was throbbing. His Sydney was so full of cum that it was already dripping out the sides of his cock. He leaned down and kissed her. \"You're amazing,\" he said.\n\n\"I warned you,\" Sydney said. Tim just kissed her again. Latched his lips to hers.\n\nFinally Sydney sat up and let Tim's dick drop out of her. She eyed it sort of sadly.\n\n\"That was incredible,\" Tim said, \"I never wanted it to end.\"\n\nSydney nodded. Another glob of Tim's sperm dropped onto the comforter. And then the beautiful blonde started to cry. One tear, another, then huge heaping sobs racked her body. Tim wrapped his arms around her and held her close.\n\n\"I don't want you to go,\" Sydney said. \"I know I can't have you. I just...\"\n\n\"Why can't you have me?\"\n\n\"Because...\" she gestured around the room, like there were people there.\n\n\"Taylor?\" Tim asked.\n\n\"Yeah.\"\n\n\"I don't want Taylor,\" Tim said, \"I want you.\" Tim realized that maybe he hadn't been happy in a very long time. Like with his anger, he had just been telling himself otherwise. But now, in Sydney's arms, he knew where he wanted to be. His heart felt a momentary twinge -- not for Taylor at all but Zoe. Tim quickly filed it away. He was so lucky to have Sydney. To fall for some other girl that had slept with him seemed needlessly stupid.\n\n\"I only want to be here. With you. Well, not in Colin's house. But in your arms. You get what I'm saying. I was just... I don't know scared. I didn't think someone so beautiful could see anything worth keeping in me. Even when we were texting, I told myself that you just wanted to be my friend. But Sydney, if you want me? I'm yours. And if you don't want me then know I'm going to spend the rest of my life wishing I was with you.\"\n\n\"You're a dope,\" Sydney said and kissed him, \"It was you. Always you. I knew it as soon as you kissed me. Only one other person ever kissed me that way. Like I'm a person and not a pair of boobs with a twat.\"\n\nTim laughed at that. \"You do have an amazing pair of boobs. And an incredible twat. But I'm falling in love with you.\"\n\n\"You have a fantastic cock,\" Sydney said, \"And your tongue is unreal. Your balls might be a bit over enthusiastic though.\" She reached down and showed him yet another palm-full of sperm. \"But I'm falling in love with you, too.\"\n\nThey spent a long time then, just wrapped around each other and basking in the idea that, if they wanted, they didn't ever have to let go.\n\n\"You should probably get back,\" Tim said, \"Finish off your Mario Kart championship.\"\n\n\"Fuck the race,\" Sydney said.\n\n\"Good,\" Tim said, \"Cause I want to fuck you.\"\n\n\"You don't think there's enough sperm in my pussy already?\"\n\n\"Well, if you'd prefer I could do it on your tits.\"\n\nSydney laughed and kissed him, reached down once again to find her lover full and waiting.\n\n*\n\nThe semi-finals were supposed to be Taylor against Sydney and Steve against Paige. But after everyone waited for a good while, it seemed pretty clear that neither were coming back.\n\nTaylor looked over and saw that they'd mostly lost their audience, anyway. Zach lay on his back and Alexa (or was it Anna?) was kissing him while Anna (or was it Alexa?) sucked on his long, thin cock. Their red hair seemed to meet in the middle of his chest, like a long ginger cascade.\n\nIsaac, meanwhile had his face behind Courtney, and was learning the finer arts of licking pussy. Well, mostly Courtney was just yelling at him what to do, her bottom pertly up in the air like it was offended by his efforts.\n\n\"No! More tongue, less fingers. Ugh, college guys. I swear...\"\n\nTaylor felt the letdown hit her. The fucking, the arguing -- all the anger, desire and fear. She took a deep breath and let it all drain out. Was there ever a time where she'd done the right thing? It felt like she was working all the time to make fix things and when she stopped, all she heard about was her lack of effort. What would they say if she finally just surrendered?\n\nSteve slid over to where Taylor was sitting on the couch. She could smell a hint of his cologne as he came close. It wasn't a bad scent at all, really.\n\n\"We can still do the final, he said, \"You and me.\"\n\n\"And then you can fuck me up the ass?\"\n\n\"I didn't make Courtney do anything she didn't want,\" Steve said.\n\n\"Tell Colin that.\"\n\nSteve tilted his head toward the bedrooms. \"Pretty sure he's doing just fine. Look, I get that you want to hate me. I probably deserve to be hated. I never promised to be a good person. And look, I got what I deserved. Everyone else is having fun, while I'm sitting next to someone who despises me.\"\n\n\"No,\" Taylor said, \"I don't despise you. I'm just horny. And frustrated.\"\n\n\"I know what you mean. Tell you what. Let's do the races and whoever wins can pick a red dare. Just like we agreed. And if you win? Maybe you can fuck me in the ass.\"\n\nTaylor smiled. All of a sudden, that didn't seem like such a bad idea. \"Nah,\" she said, \"I'll just make you suck my dick.\"\n\n*\n\nThey sat down on the floor together -- Taylor in just her panties, Steve in only his boxer briefs. She had to admit, he looked really good. And he seemed to be thinking the same thing as he stared back at her.\n\n\"Your tits are amazing,\" Steve said, \"Sorry. I didn't mean to actually say that out loud.\"\n\n\"It's OK,\" Taylor said, \"I wish Tim felt that way. He keeps looking around for a larger pair.\"\n\n\"Tim's a fool,\" Steve said.\n\nThey fired up the game one last time. Taylor chose Donkey Kong. Steve selected Link.\n\n\"You're going to be staring at monkey ass all night,\" Taylor said.\n\nSteve pointedly looked back at her bottom. \"I don't think that's monkey. Baboon maybe.\"\n\nTaylor punched him in the shoulder.\n\nThey selected a Grand Prix. Taylor took the first race. Steve the second. Taylor the third. Back and forth they chased over majestic mountains, and underwater cities. Raced right up waterfalls and shot down frozen trails. Bananas slipped by and bombs exploded. A symphony of competitive perfection.\n\nThey were down to the last race. Taylor took an early lead. It felt like every turn came easy. Every obstacle was already out of her way. All Taylor had to do was finish ahead of Steve and she'd finally beat him. Once and for all.\n\nThere was a loud whoosh. An alarm. Taylor didn't need to see it. She just dropped her controller in disgust.\n\nSteve didn't laugh. He didn't taunt her. Didn't even bother to finish the race. He just put his arm around Taylor's shoulders and kissed her on the forehead.\n\n\"This really is a stupid game,\" Steve said.\n\nAnd then Taylor found herself kissing him. Running her hands over his chest. Stumbling as they slowly made their way back to the open bedroom. Unwilling to disengage.\n\nThey fell through the doorway. Onto the bed. It was a tiny twin but Taylor didn't care. Steve held up the red dare card triumphantly. Taylor simply slapped it away.\n\n<br >Still kissing. Probing with her hands, her tongue. Tasting every bit of Steve's body. She felt him doing the same. Tracing her lines like she was a sculpture. Taylor could still hear the beds thumping in the other room. The Mario music tinkling in the distance. She started to slide her tongue down Steve's broad chest. Breathed in his essence.\n\nShe slid his boxer briefs off and, once again, beheld that magnificent cock. Taylor had teased Steve about his teeny tiny peepee once before, she remembered. But Steve was anything but small. About as thick as Tim's. Nearly as long as Zach's. Practically perfect. She opened her mouth, eager to taste his manhood again. To own him lips and teeth and tongue.\n\nSteve gripped Taylor's shoulders and pushed her away. \"Not tonight,\" he said, shoving her on to her back. \"Tonight this pussy is mine.\"\n\nTaylor fell forward. Head down. Ass up. She wiggled it at Steve seductively. <br >\n\n\"God your butt is amazing,\" Steve said and slapped her cheek for good measure. He grabbed both sides and used his thumbs to spread Taylor open.\n\n\"Wait,\" Taylor said, \"Condom.\"\n\n\"The card said I had to do you bareback,\" Steve said.\n\nTaylor sighed and shook her head. \"You'll pull out, right?\" She didn't wait for an answer. She just reached back and took Steve's cock into her hand. Carefully, she guided it into her aching, needy snatch.\n\nShe felt the head break through, then Steve slid in the rest. Holy fuck did she feel full.\n\n\"Ohhhhh God,\" Taylor said. The words and sounds started flying out of her. Like Steve's thrusts were pushing them out of her body and into the open air. Gasping grunts and wanting whimpers\n\n\"Your pussy is too damn tight,\" Steve said.\n\n\"Your cock is too damn big,\" Taylor said.\n\nHe was picking up the pace now, holding on to her ass cheeks like he needed them to stay in place. His balls bounced against her clit. Then Taylor's pussy began to tingle and she knew she was about to cum. It felt like a storm, building inside her. One that would wash her away forever.\n\nShe felt Steve slow, his balls retracted just a bit. Taylor couldn't help herself. She tried to make him speed up again. Her cum had been so close.\n\n\"Am I fucking you good, Taylor?\" he asked.\n\n\"Ssssoooo good,\" Taylor said. She couldn't help it. She didn't want to do this, but found her body betraying her. Willing to do anything, say anything, so he'd let her cum.\n\n\"Better than Tim?\" Steve asked.\n\n\"Better than anyone,\" Taylor said.\n\n\"Say it. Loud enough so he can hear. While he's pounding that blonde slut. Make sure he knows.\"\n\n\"Oh Tiiiiiiim! Steve's fucking me so much better than you!\"\n\nSteve reached down and pinched her little nipple. \"Mine,\" he said, \"My tits, my ass, my cunt. Say it.\"\n\n\"Your tits. Your ass. Your cunt. Steve's. Steve's only.\"\n\nSteve laughed, but he didn't pick up the pace. Instead he leaned down so he could whisper right into Taylor's ear. \"I'm getting close.\"\n\n\"Cum on my tits,\" Taylor said, \"My ass.\"\n\n\"I'm gonna cum in your pussy,\" Steve said, \"Tim told me about how you can't take the pill. How you never let him finish inside you. This is my cunt and I'm going to fill it like Tim never could.\"\n\n\"Nooooo,\" Taylor whined. She felt Steve's hands at her hips now. Just tight enough that she couldn't be sure she'd be able to pull away.\n\n\"I'm going to dump my load in you. Put my baby in your belly. And you're going to beg me for it. Isn't that right, Swifty?\"\n\nSteve shifted back and started pounding her. Sawing through her pussy even faster than he had before. Taylor could feel Steve's balls on her clit again. Big and full of baby batter. About to be injected into her tiny, unprotected pussy. Her orgasm built right back up to the edge again.\n\nAnd then it stopped. Froze, like a piston had misfired in Taylor's internal engine. Her orgasm just hung there, unable to ignite.\n\n\"I'm going to cum inside you, Swifty,\" Steve said, \"Beg for it. Beg me to fill your fertile womb.\"\n\nTaylor knew then exactly what she needed. She took her sensitive nipple in one hand and pinched it for all she was worth. She backed into Steve's cock. Matching his rhythm. Hurrying him along.\n\nAnd then there it was. The storm of pleasure raced forward and Taylor screamed, \"Plllleeeease! Please cum in me!!!!!!\"\n\nSteve roared and Taylor felt his cock lurch in her pussy. Hot seed blasted past her cervix.\n\n\"Ohhhhhhhhh FUCK that's so good!\" Taylor cried and she thrashed and shook as the pleasure overtook her. Her pussy clenched to try to catch every bit as blast after blast of Steve's fertility filled her insides.\n\nSteve came and came and as he filled her further he just kept cumming like it might never stop. Taylor's orgasms ran on top of each other, the next one already exploding before the last could even end.\n\nSuddenly, Steve pulled his cock out of her. Taylor found her body screaming for him to shove it back in. Two full splatters of semen hit her back and chest. Her hair and face. Droplets dripping everywhere like he was icing her cake. She'd never seen so much sperm, yet she could feel so much more of it already in her pussy.\n\nTaylor fell forward and felt Steve slide in behind her. His body hard in all the ways she wanted it to be. She felt him kissing at her neck, running his hands through her hair. It all felt distant, like she was still in this other world of orgasmic pleasure. Far too gone to come back.\n\nSteve had marked her in every way possible and Taylor only wanted more of it. She craved his cum in her mouth. Her ass. But especially in her waiting womb. The room felt very warm. The lack of energy overtook her and Taylor felt herself slipping back.\n\nHer last conscious thought was that she couldn't wait to do it all over again.\n\n*\n\nPaige slipped out of Colin's arms and went to use the bathroom. She'd heard the other couples fucking all night and it just made her wanted to fuck Colin again and again. Still, a girl had to pee at some point. Especially after all the alcohol she'd had.\n\nAfter she went -- and laughed a little to herself as even more of her brother's semen slipped out of her -- Paige snuck into the living room to see what was happening. The group was making quite a bit of noise, themselves.\n\nPaige could make out Courtney in the far corner, bent over, with Zach's penis jammed rudely into her backside.\n\n\"Fuck that ass! Fuck that ass!\" she kept screaming it over and over again. Reached down and started frigging her clit. What a stupid slut, Paige thought, although Courtney certainly seemed like a happy one. Her leg trembled uncontrollably as she clearly reached her peak.\n\nPaige looked to the other side of the room and saw Anna on her hands and knees. Isaac and Alexa stood behind her, the gorgeous redhead held the skinny boy's cock. Paige had to admit, it seemed like a pretty nice penis. Way larger than she'd have guessed for someone his size and slightly curved in a way that she thought might hit all the right places.\n\nPaige smiled at them and Alexa waved her over. \"We're taking Isaac's virginity,\" she said. Anna just nodded in agreement. Well OK then. Alexa steered Isaac right into her sister.\n\n\"Stay right there,\" she told him. He was already turning red, just having his cock inside Anna. He looked worried.\n\nAlexa lay down in front of Anna and exposed her red-haired pussy.\n\n\"G... girls,\" Isaac said, \"I don't think I'm going to last too long.\"\n\n\"Good,\" Alexa said, \"That'll give you plenty of time to recover and give me a load of my own. Now start licking, Sis.\"\n\nAnna dutifully dropped down and started tonguing her twin. Paige watched for a bit, then made her way back to the bedroom. For a second, it occurred to her that she hadn't seen Zoe at all. Had the tall woman just gone home? Then she heard Isaac howl, \"Ohhhhhhh God, I'm cumming!\" and she got a little distracted.\n\nPaige carefully closed the door behind her. All that inspiration made her want to fuck her brother again. Maybe she'd let him take her virgin ass this time. After all, he'd done so well deflowering her pussy.\n\n*\n\nTim and Sydney lay in bed, locked in each other's arms. At one point, Tim had heard Taylor shouting something, but he couldn't hear what it was. He wondered if she was with Zach or Steve. Maybe even Isaac. It hardly mattered. Being with Sydney, Tim found a lot of things he'd worried about before suddenly slip away.\n\nThere was a light knock. Sydney looked up at him, a bit of a knowing smile on her face. Tim didn't know who it could be. He really hoped it wasn't Taylor. He climbed out of bed, sticky with their shared juices, and then opened the door. A tall, dark haired girl stood there, smiling shyly: Zoe.\n\n\"Hi,\" she said, \"I didn't want to interrupt, but...\"\n\nSydney shot out of the bed. \"Zoe!\" she said. She grabbed both of the tall girl's hands and pulled her into the room. Tim shut the door behind them. He and Syd were both completely naked, but Zoe was still in her bra and panties. It was sort of funny -- she was overdressed for the occasion.\n\n\"Um, hi,\" Zoe said, \"I'm sorry. I just, um. Dammit. I don't know how to say this but I've been sitting in the bathroom trying to figure out a way to...\"\n\n\"It's OK,\" Sydney said. She took Zoe's hands and led her to the bed. The three of them climbed up there.\n\n\"Well, I...\"\n\nSydney suddenly leapt forward and kissed Zoe on the lips. Hard. Zoe immediately began kissing back. Her hand rested on Sydney's cheek. As if holding the beautiful blonde in place.\n\nWhen Sydney slowly pulled away, Tim pushed forward, as if passing the kiss down the chain. He pressed his lips to Zoe's and felt her breath fill his mouth. Her tongue. All three of them gasping like they'd just run a race.",
        "When Tim opened his eyes, he saw that Sydney was behind Zoe, unsnapping the dark-haired girl's bra. He and Sydney both kissed down Zoe's neck. Zoe laughed throatily and let them lean her down.\n\nTim kept kissing his way down Zoe's body, dragging his hands down her bare sides till they touched the waistband of her midnight-blue panties. Sydney leaned over Zoe's prone body, sliding down to her now-bare breasts. The blonde's own fantastic tits hung right over Zoe's mouth, and so she began to return the favor.\n\n\"God, these are amazing,\" Zoe said in awe, hefting one of Sydney's monsters in her hand. Sydney just sort of purred, her own mouth engaged on one of Zoe's hard nipples. Tim slid Zoe's panties off and parted her legs. He looked up at Sydney. He and the beautiful blonde shared a naughty smile.\n\nSydney pushed Tim back. \"Show us,\" she said, coyly. \"Show me.\" That girl really had a thing for watching people work themselves. Zoe didn't even pause, she just dropped her hand down to her sex and started strumming.\n\nTim watched for as long as he could. It was incredibly sexy seeing Zoe rub between her long legs. Too sexy. He had to have a taste. Without a word, Tim brushed Zoe's hand aside and buried his head between Zoe's legs. Lapping her from bottom to top.\n\n\"Oh God!\" Zoe cried. Her head fell back and she began to writhe. Sydney climbed over so her mouth met with Zoe's. The tall girl moaned into Sydney's mouth.\n\n\"He's so good,\" she said, \"He's barely started and I'm already about to... cuuuuuuuuuuuuuum.\" That last word escaped from her lips like a hiss of steam. Zoe's whole body stiffened. Trembled. Then she laughed, a little chuckle. And Tim felt Zoe's body slowly unwind.\n\n\"She's such a... quiet cummer,\" Sydney said, eyeing the tall woman curiously.\n\n\"Everyone is compared to you,\" Zoe said, \"I've been hearing you all night.\"\n\nSydney turned bright red. Zoe quickly leaned up and kissed her. \"Oh, honey, I love it. I know Tim does, too.\" Tim nodded. He climbed up the bed and kissed Sydney.\n\n<br >He felt a hand grip his cock. Then another. Zoe squeezed the root while Sydney cradled the head. Zoe leaned forward and took Tim into her mouth. Sydney slid her hand down to make room, but she didn't let go.\n\nTim's eyes rolled into the back of his head. Apparently, Zoe was actually really good at sucking cock when she wanted to be. Then Tim felt Sydney let go of him and saw her slide down between Zoe's legs. Well there goes that, Tim thought.\n\nZoe moaned and, sure enough, her sucking slowed.\n\n\"She's... pretty good at that,\" she told Tim. Sydney just made a grunting noise and buried her face further into Zoe's puss. Zoe gripped Tim's cock and then, again, went perfectly still. Her pleasure punctuated with a little giggle.\n\nSydney once again came up and kissed Tim, Zoe's juices sticky on her face. Then she reached down and pulled Tim's penis out of Zoe's hand. Zoe moaned.\n\n\"Not fair. Mine,\" she said.\n\n\"Just wait a second, slut,\" Sydney said. She must have been pretty worked up already if she was saying stuff like that, Tim thought.\n\n\"I'm not a slut,\" Zoe said, pouting, \"I'm a bitch. Tim tell her. Tell Sydney I'm your bitch.\"\n\n\"You're our bitch,\" Sydney said, and playfully pinched Zoe's nipple. She gasped and Tim thought he saw a little tear in her eye.\n\nSydney rolled Zoe over and shoved her till she was up on all fours. Like molding a piece of clay, she slowly moved Zoe into the form she wanted. Then Sydney grabbed Tim by the dick and dragged him over, till he was pointing right at Zoe's pussy. Thick lips gaping open.\n\n\"Are you sure?\" Tim asked her. Sydney just kissed him.\n\n\"Remember what I said before?\" the blonde girl said, \"Only one other person ever kissed me like you did.\" Then she pointed at Zoe with her free hand. \"Now go in there and give her what she deserves.\n\nSydney started feeding Tim's cock into Zoe's pussy. The tall girl hung her head and moaned. \"Just once I'd like him to fuck me in a different position.\"\n\n\"There's plenty of time for that,\" Sydney said, \"I promise he'll fuck you however you want.\"\n\n\"Really?\" Zoe asked, her innocent excitement clashed with the scene around her.\n\nTim's cock was halfway buried in Zoe's twat. He looked at Sydney, now moving around to Zoe's front, her enormous tits swaying as she went. And he knew.\n\n\"Yeah,\" Tim said, \"As long as you two will have me. I'm yours.\"\n\nSydney lay on her back, slid her pussy under Zoe's mouth. \"As long as you two will have me,\" Sydney said, \"I'm yours.\"\n\nTim buried his cock to the root in Zoe. Squeezed her little ass cheeks. Zoe looked back at Tim. Then looked down at Sydney's waiting snatch.\n\n\"For as long as you two will have me, I'm yours,\" Zoe said. It was the only vow they'd ever share. A promise they would never break.\n\nZoe buried her tongue in Sydney's slit and the blonde girl screamed, \"Oh YES! Lick that pussy while Tim FUCKS you!\"\n\nTim didn't need to be told. He started sawing into Zoe. Amazed at how he could be this hard. Balls still so full. He wondered if he'd ever rest with these two. He wondered why he'd ever want to.\n\n\"That's it, bitch, eat my horny hole,\" Sydney said, \"Give it to her Tim. Make her scream. Make her beg. Fuck her till she can't walk.\"\n\nZoe looked up, \"Oh please, Tim, please. Give your bitch all she can handle.\"\n\n\"I didn't tell you to stop licking,\" Sydney said. She grabbed the dark-haired girl by the ears and dragged her back down.\n\nSydney was the first to break, \"C.... c... cuuuuummmmmmmming. OH I'm cumming on my bitch's beautiful tongue!\"\n\n\"I... I'm getting close,\" Tim said.\n\n\"Cuuuuuuummmmm in meeeeeeee!\" Zoe howled. Tim's body couldn't help but obey. A stream of his sperm gushed into Zoe's needy cunt. <br ><br >\"Ha AH!\" she gasped and then fell forwards. Whole body shaking. Eyes squeezed shut. Tim's cock slipped out as Zoe dropped. His semen blasted out, arched over Zoe's back and landed on Sydney's chest. Hot splashes of sperm rained over both beautiful women, covering them in hot spatters.\n\nFinally Tim stopped cumming. A last few bits dripped down on his thigh. He leaned forward, sliding between the two women -- each so different, yet his love for them the same. Tim's cock, somehow still at half mast, buried itself between Zoe's buttcheeks. He reached around Sydney's chest.\n\nThe three of them slowly coiled around each other on the bed. Zoe's face in Sydney's chest. Tim's hands intertwined with Zoe's. His penis rested against her snatch. Sydney's long blonde hair draped over the both of them. Limbs wrapped around and tangled.\n\nSydney rubbed Zoe's head. Tim nuzzled Sydney's neck. Then the two of them kissed. So warm and somehow loving.\n\n\"So,\" Zoe said, \"This is OK? I mean... All of it?\"\n\n\"A little better than OK,\" Tim said.\n\n\"I said it,\" Sydney said, \"I meant it.\"\n\n\"I didn't know you were into girls, Syd,\" Tim said.\n\n\"I'm not,\" Sydney said, \"I'm into Zoe.\" The two women kissed. Tim felt Zoe's hand reach back and find his cock. She squeezed it. Slowly shifted so that Tim was on his back and the two girls were on top of him.\n\nSydney reached over and grabbed his cock, as well. The two of them smiled hungrily at the dick in their hands.\n\n\"We going to be able to do this?\" Zoe asked, \"Two girls. One cock?\"\n\n\"Only one way to find out,\" Sydney said, then she squealed as Zoe stuffed her full of Tim.\n\n*\n\nWhile Tim's cock filled Sydney, his tongue lapped at Zoe and the two girls wrapped around each other and shook with pleasure, Paige howled her euphoria as her brother plowed her pussy, Courtney shook as Zach spurted inside her, Isaac filled Anna's snatch to brimming while Alexa shivered under her sister's tongue, and Steve dumped another load into Taylor's greedy, unprotected cunt.\n\nAll of them, together, in one shared explosion of ecstasy.\n\n*\n\n15 months later\n\nIt was as warm a spring day as anyone could remember. A flock of white folding chairs spread out over a sea of green grass. People drifted in, groups of twos and threes and fours, and slowly took their seats.\n\nColin sat near the back with Paige. They didn't hold hands -- they were still keeping things quiet. But Paige's baby bump was starting to show and so all the secrecy in the world wouldn't matter for much longer.\n\nColin felt a hand on his shoulder. He looked up and saw Tim, wearing a dark suit and smiling. Sydney hung on his arm in a flaming red dress. It was a conservative cut, but that hardly mattered with the blonde's ample chest.\n\n\"I'm surprised you came,\" Colin said.\n\n\"I have no hard feelings,\" Tim said, \"Honestly, I'm happy for her. Happy for them.\"\n\nHe bent down and kissed Paige on the cheek. \"Zoe's just parking the car. She should be up in a sec.\"\n\nColin looked back and saw a tall figure coming over the hill: Zach, his arm around Courtney. He saw them and waved. Courtney's auburn hair glinted in the warm, springtime sun. Zach steered her over to the group.\n\n\"It's good to see you guys,\" Zach said. Courtney just nodded. But she gave Tim a tight, warm hug and squeezed Paige's shoulder. She even smiled a bit when Colin met her deep green eyes.\n\nZoe walked up and grabbed Tim's free arm. She gave him a kiss on the cheek and said hello to everyone.\n\n\"At this point, I almost expect to see Isaac and those twins,\" Tim said.\n\n\"Don't get any ideas,\" Paige said, \"The three of them are vacationing on the Amalfi coast.\"\n\n\"Seriously?\" Zoe asked.\n\n\"That's a hell of a spring break,\" Zach said.\n\n\"After Christmas, I don't think any of us can complain,\" Courtney said. They all grinned and agreed.\n\n*\n\nSteve stood to the side and watched while everyone filed in.\n\n\"You can't tell, can you?\" Taylor asked. He looked her over. She was wearing this tight white slip of a thing, veil tied back. Taylor looked incredible, as always.\n\n\"You can barely see it. I promise,\" Steve said. He slid his hand down to Taylor's tummy and felt where his second child was already growing.\n\n\"Fuck, I knew this dress was too small.\"\n\n\"It's fine honey. You're fine. Our families, all our friends, and the people we've fucked are out there. Sophie is with your brother, I can't tell which one. The big guy.\"\n\n\"They're all big,\" Taylor said and started fidgeting with her veil.\n\n\"Well whatever, our beautiful, bouncing daughter is with him. And you look amazing.\"\n\nThe harpist started playing the wedding march. Steve put Taylor's arm in his. He whispered, \"I take thee, Swifty to be my lawful wedded...\"\n\nTaylor punched him in the arm. They laughed and then, together, stepped into the light.\n\n*\n\nThe party was inside the hotel with far too much alcohol and not nearly enough dance floor. Tim walked over to the side of the room and found Zoe sitting down, rubbing her ankle.\n\n\"It's fine, just got a little overexcited,\" she said, slightly slurry.\n\n\"Yeah, the electric slide can do that to you,\" Tim said. Zach came over, practically carrying Courtney, and lowered her into a chair nearby.\n\n\"We've got another one down,\" he said. Courtney giggled and nearly rolled right out of the chair.\n\n\"Ankle?\" Tim asked.\n\n\"Vodka,\" Zach said and smiled.\n\n\"You guys seem happy,\" Tim said, \"Courtney just seems so... content. In a way that I don't think I've ever seen her.\"\n\n\"I'd like to think that's my influence, somewhat,\" Zach said, \"It's been a tough year for her. But I've tried to help her stay loose. Maybe a bit too loose.\"\n\nCourtney giggled. \"I'm not as think as you drunk I am. I'm just having a good time.\"\n\n\"OK, honey.\"\n\n\"How's art school?\" Tim asked.\n\n\"Tough as hell,\" Zach said, \"And I'm loving every minute.\"\n\nSydney walked across the floor, holding a bag of ice in one hand. Colin and Paige followed.\n\n\"Is Zoe OK?\" Colin asked, \"Sydney told me she fell.\"\n\nThe whole group looked over at him dubiously.\n\n\"Well, I saw Sydney getting ice and I figured it out. Anyway...\"\n\n\"I'm fine,\" Zoe said, holding the ice pack to her leg, \"Only my pride is injured.\"\n\n\"There you guys are!\" Taylor marched right across the room, Steve trailing. The crowd cleared for the woman in the white dress. \"I can't have you sitting at my wedding. You're making me look bad.\"\n\nThey shared congratulations. Tim gave Taylor a kiss on the cheek. He shook Steve's hand warmly -- a surprise even to Tim, himself.\n\n\"I think the dancing is done for tonight,\" Colin said, \"Zoe rolled her ankle.\"\n\n\"And Courtney is smashed,\" Tim said.\n\n\"Yeah, cause you all are totally sober,\" Courtney said. They all nodded, somewhat sheepishly. They sat around the table, squeezed against each other. Told old stories and bad jokes. Eventually the music stopped and the guests all began to drift away.\n\n\"Well now what?\" Zoe asked, \"I'm not ready to call it a night just yet. It's Taylor's wedding! We have to celebrate!\"\n\n\"There's a bar down the way,\" Steve said, \"Pretty sure they're open late. Although, ahem, Taylor's not drinking.\"\n\n\"Wait wh...\" Zach spluttered. Courtney whispered in his ear. He looked up with large eyes and said, \"Ohhhhhh.\"\n\n\"Yeah,\" Colin said, \"Ummmmm... Paige isn't either.\" The sexy little sister blushed a little and smiled.\n\n\"Well, if we can't drink, what should we do?\" Paige asked.\n\nTim smiled and looked around the table. \"Wellllll,\" he said, \"We did pack Mario Kart...\""
    ],
    "authorname": "Spector_Dugan",
    "tags": [
        "group",
        "oral",
        "impregnation",
        "exhibitionism",
        "sister",
        "cheating",
        "swapping",
        "game",
        "incest",
        "masturbation"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/love-like-a-blue-shell-pt-04"
}
{
    "title": "Strokes and Distance",
    "pages": [
        "This is a new story. For those unfamiliar with the female lead... Well, that's what Google is for.\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe shuttle turned right, and entered the long, palm-tree lined driveway that led to the resort. It was beautiful, and now that the arduous trip to get here was nearly over, I was able to relax. All I needed to do now was check in, and I could truly begin my vacation. \n\nI looked to my left. There was no one there. There was supposed to be. When the planning for this trip had started, there had been a woman at my side, putting her two cents into the decisions. I had no problem with that, as we were a team. \n\nWere. Past tense. No more. \n\nI'm still not really sure what happened. It seemed like a simple misunderstanding, but I wouldn't let it go, and she wouldn't let it go, until things finally escalated into a screaming match that brought the relationship to a flaming, and catastrophic end. I probably could have salvaged things with a sincere apology, but I was still a little too angry to realize that. \n\nSo I went without her. Not smart, but that's what I did. I cancelled her ticket, and prepared to spend the week alone in the huge king-sized bed. \n\nAs the vehicle stopped under the awning, a baggage handler opened the back, and quickly put my luggage on the cart; one medium sized suitcase, and my golf bag. He immediately whisked me inside to check in. \n\nThe opulence of the lobby was one of the reasons Jenny wanted to come here. I was more interested in the golf course, but that didn't mean I was immune to the luxurious surroundings. An attractive brunette behind the counter smiled at me as I stopped in front of her. The name tag balanced on her quite substantial left breast read 'Manuela'. \n\n\"Checking in, sir?\" she asked, a trace of Spanish in her accent. \n\n\"Yes Ma'am,\" I replied, handing her my reservation. \n\n\"I see you have a suite booked. Is there another traveller joining you?\" she asked, typing quietly. \n\n\"Well, it's a long story, but no,\" I laughed. \"It's just me. I'll have to rough it, all alone in that big bed.\" Unless you want to join me, and let me have at that luscious body? I thought, hoping she could read my mind. \n\nShe just laughed. Maybe she read my mind and found my thoughts funny. More likely she had been hit on by nearly every man she ever checked in, and found my flirting as clumsy as it appeared. She let it die, flopping like a fish on the floor. \n\n\"Here is your key, sir. Room 418. George will help you with your bags,\" she smiled. \"Is there anything else I can do for you?\" Her demeanour was well rehearsed, and pleasant. \n\nI thought I made that clear. Tell George to get lost, come with me to the room, and get that pretty blouse off so I can see those tits. That's a good start. We'll go from there. \n\n\"No, thanks,\" I said, pushing the thoughts of her squirming naked on my bed aside. George led the way to the elevator, and moments later, we were in the suite. With tip in hand, he left me, and closed the door. \n\n\"Okay, this is one very nice room,\" I mumbled. Bigger than most, with a monstrous king-sized bed, a sitting area, and not one, but two doors that opened out onto the deck, it was a corner suite. One bank of windows faced out over the pool, beach, and ocean, while the other looked over the practice green of the attached golf course. \"All I need is some company.\"\n\nA pang of regret ran through me as I looked at the huge bed. Jenny would probably be laying on it by now, tempting me to join her and break it in. Or she would be, if she was here. If we hadn't fought. If. \n\nI probably couldn't count on Manuela for companionship, so I resigned myself to a week of golf and my right hand. Maybe they had an adult entertainment channel on the plasma TV? I hope so. \n\n***\n\nAfter a short nap, I pulled my putter out of the bag, along with a ball, and went to explore. \n\nMy first stop was the practice green. It was quite large, with a number of undulations, so I could easily kill a few hours here during the week. I wandered out to the first tee, which was deserted at this time of the afternoon. Finally, I went into the Pro Shop, and had a look at the times available for tomorrow. Since I was alone, I would just come out when I felt like it, and get to play with whomever was available. \n\nI hit a few more putts on the practice green, then strolled out to the pool area, where there were only a few empty lounges. I went out the gate onto the beach, where there was only one person laying on a lounge, catching some sun. \n\nWhat the beach lacked in quantity, it made up with quality. The one person was a very attractive brunette, in a revealing orange bikini, reading a magazine. She wore large, dark sunglasses, which hid her eyes completely. \n\nThe bikini hid nothing. Yikes! She was quite buxom, and I tried not to stare too much at the incredible cleavage on display. The ocean breezes had raised two distinct bumps in the orange triangles of the top. I stopped a few feet away from her, and looked out to sea. \n\n\"I can see two problems, right off,\" the woman smiled. \"First, you're way out of bounds, and second, you've got the wrong club.\" \n\nI giggled, and turned to face her, spinning the putter in my fingers. \n\n\"Thanks for the tip,\" I laughed. \"I'll keep it in mind when I play tomorrow. You have a nice day.\" \n\nIt wasn't until I made it back to my room that I realized what an idiot I had been. She was alone. I should have asked her for dinner or drinks. I should have done something. I went out to my deck, looking for her, but the lounge was empty, and there were no orange bikinis in the pool. \n\n\"Shit.\" \n\n***\n\nMonday morning dawned in typically beautiful fashion. I took a look out my window and saw a few people putting, so I immediately headed into the shower. I was eager to play, so as soon as I was dressed, I went for breakfast, and fuelled up. \n\nI was walking into the shop just after 10am, and the staff gave me a smile. \n\n\"Oh, your timing is perfect,\" the guy behind the counter said. \"We've got another single waiting for someone to play with. You can go right after the foursome on the tee now.\" \n\n\"Great!\" I smiled. \"Who am I playing with?\" \n\n\"Another hotel guest,\" he replied. \"A woman... Sanders is the name, I think. She's just outside, on cart 42.\"\n\nNow before you label me a male chauvinist, you should know I have no problem playing golf with women. I consider the course and myself to be my competition, so a pleasant playing companion is always welcome. \n\nI wasn't, however, expecting... her! \n\n\"Hey!\" she chirped, as I walked up to the cart. \"Not just putting today?\" \n\n\"Thought I'd try the whole course,\" I laughed, putting my bag on the cart. When I turned around, she was standing there. \n\nTall-ish for a woman, she was wearing a white skirt, and white visor. Her brown hair was pulled back into a long ponytail, and she was wearing aviator sunglasses. She must have had a thing for orange, as her top was similar in colour to the bikini I saw her wearing at the beach. It was snug across her impressive chest, and tucked into the narrow waist of her skirt. \n\n\"I'm Holly,\" she smiled, showing a perfect string of pearly whites. \n\n\"Shane,\" I replied, taking her offered hand. \"Are we up?\" \n\n\"I think so,\" she said, taking her seat behind the wheel. \"Which tees?\" \n\n\"Um... Let's ease into it. I've never played here before, so I think I'll play the Whites,\" I answered as I sat next to her. \n\n\"White tees it is,\" she nodded, and stabbed the gas pedal. \n\nIt was a short drive to the first tee, and she parked smoothly next to the elevated patch of neatly trimmed grass. I grabbed my driver, and walked up to the starting point for the first hole. \n\nI looked up the fairway. It was a medium length par 4, slightly uphill, with a single bunker on the right. A gentle start to the day. \n\nI was just standing up from having teed my ball, when I noticed her leaning on her driver, standing just to the side. \n\n\"Are you playing from back here?\" I asked, surprised. I just assumed she would be playing the ladies tee. \n\n\"Yes,\" she smiled. \"I play a lot, so I won't hold you back.\" \n\n\"Well then,\" I laughed, snatching my ball up. \"Ladies first.\" \n\n\"Don't be an ass,\" she giggled. \"You're ready to hit, so hit.\" \n\n\"Okay. Will do,\" I replied, replacing the ball. Seconds later, my ball was streaking down the fairway. It was a little scruffy, but would have to do. \n\nHolly took her stance, and I knew right away she had played a lot of golf. I also knew it was going to be a long day. She wasn't just stacked, and beautiful; she was an athlete, and in her element. \n\nI watched her body as she took the club back. With the flexibility that only a woman has, she kept both feet flat on the ground all the way to the top, turning behind the ball into the perfect position to hit her drive. With deceptive smoothness and power, she whipped the club-head through, sending the ball whistling into the distance with a yelp as titanium met polyurethane. She held her finish, perfect breasts pointed skyward, until the ball hit the ground, a few yards beyond mine. \n\nMy attention was understandably divided between the great shot, and her great rack. Like I said... a long day. \n\nI saw a small smirk on her face as we went back to the cart. Whether it was because she out drove me, or because she knew I was watching her body with great interest, only time would tell. \n\nWe both made par, although mine was fortunate, and hers was routine. The same could be said of the second hole, another par 4. I was thrilled with two straight pars to start. \n\nThe third hole was a short par 3, and I clanked it into the bunker to the right. One mighty lash and three putts later, I had undone the good of the first two holes, and came crashing to earth. \n\nOh, and she had zipped a nice little iron in to fifteen feet, and made birdie. My masculinity was taking a beating. \n\nThe fourth hole, a long par 5, was where I finally woke up. Not my golf game. That would take a few more holes. No, what I mean is, I finally figured out who I was playing with. \n\n\"Oh my god!\" I gasped, as the light bulb finally went on. \"You're Holly Sonders!\" \n\nThey had thrown me off in the Pro Shop, telling me her name was Sanders. That, and the fact that I wasn't expecting a celebrity to be waiting for someone to play with, had my brain in neutral, so I didn't recognize her. \n\nI can't tell you how many times I watched this luscious creature on the Golf Channel. Gorgeous doesn't do her justice, with long, toned legs, a narrow waist and tits to die for. She tipped her sunglasses down, showing me her big brown eyes, and winked. \n\n\"You could have told me,\" I laughed. \"I'm playing golf with Holly Sonders!\" \n\n\"Yes, yes,\" she nodded. \"Can I just be plain Holly, today? I'm on vacation. I was hoping to stay under the radar.\" \n\n\"Right,\" I smiled, shushing myself. \"Sorry. I will keep my mouth shut. Sorry,\" I repeated. \n\nTrying to keep that body, face and smile under the radar was like trying to disguise a Ferrari with a sticker that read 'My other car is a Ferrari'. Good luck. \n\nSpeaking of luck... Holy shit! I'm playing golf with Holly Sonders! As if I wasn't paying attention to her enough before, now I certainly was. Every time she bent over, that tight skirt made her ass look good enough to eat. Every swing reminded me how big her breasts were, and how much I had always wanted to get my hands on them. \n\nAs far as the rest of the round went, I stumbled along for a few more holes before finally stabilizing. I finished with two birdies, and a 79, pretty good for me. Holly kicked my ass, with a 73 that looked so easy she probably could have done it in her sleep. \n\nSitting on the cart afterwards, she had one more surprise for me. \n\n\"Do you have plans, tomorrow?\" she asked. \"Want to play together again?\" \n\nMy ego said 'no', but was vetoed by the rest of me, which would take any chance to stay close to her. Even if it didn't amount to anything other than friendship and masturbation fodder, I didn't want her to say goodbye. \n\n\"Okay,\" I smiled, \"under one condition. Dinner tonight?\" \n\nShe eyed me cautiously, before extending her hand. \n\n\"Deal. I'll book our tee time. You make dinner reservations,\" she smiled, as I shook her hand. I noticed how soft it was. \n\n\"What's the rest of your day like?\" I asked. It was only mid-afternoon. \n\n\"Pool time, I think,\" she grinned. She probably knew I'd be picturing her in that bikini. She was right. \"You?\" \n\n\"A nap,\" I laughed. \"Then I think I'll work on fixing some of today's issues on the range before dinner. Should I call you with our time for dinner?\" \n\n\"Sure. Room 318,\" she said softly. \n\n\"Hey! I'm right on top of you,\" I smiled, then heard it. \"I mean, I'm above you. Um, my room is right over... Oh hell,\" I laughed, hiding my face. I guess my train of thought was pretty clear. \n\n\"I get your drift,\" she giggled, and walked away. I watched her ass as she did, until she whirled around and caught me. Another smile, and a flutter of fingertips, and she was gone. \n\nA staff member put our clubs in storage, and I went up to my room. Dinner with Holly might be better than golf with her was. \n\n***\n\nI woke from my nap. \n\nWhen I returned to my room, I had placed the call for dinner. Then I had called Holly's room, and left a message for her. Then I had gone into the bathroom, and jerked off like a horny teenager. The range could wait. \n\nImages of that supple body filled my head, so masturbation was the only way to keep from going insane. It had taken next to no time at all before I splattered cum across the bathroom counter. I hoped I got it all when I cleaned up, or I'd get funny looks from the housekeeping staff. At least I slept well. \n\nSo, when I woke up, it was nearly time for dinner. I peeked out over the pool area, and didn't see Holly, so I assumed she was in her room, right below me. Maybe she was dressing, or maybe she was still in the shower. Maybe she was in the tub, with soapy water and bubbles clinging to the spectacular curves of her body. Or maybe she was as excited about this as I was, and was splayed wide on her bed, fingering her pussy wildly. \n\nMaybe I should jerk off again. My dick was hard enough. My imagination was sure going down that road. \n\nI decided to just get dressed, and go downstairs to wait for her, in an effort to keep from succumbing to frustration. I pushed the elevator button, and it arrived quickly. The doors closed, but the downward motion was short lived. The doors opened, and Holly stepped on. \n\n\"Hey, you,\" she smiled, giggling happily, \"we simply must stop meeting like this! People will start to gossip!\" \n\nSo let them, I thought. I'll take any reason to keep meeting you. Golf, dinner, groundhog day... Any reason at all. I can think of a few more fun reasons, like showering, or rolling over in bed. There goes my imagination again. \n\nHolly in an elevator was no less mouthwatering than Holly on the golf course. Her hair was down, draped over her left shoulder in a luxuriant cascade of brown, with sun-streaked highlights. She was wearing a slightly longer skirt than earlier, but it was still quite short, and snug across her firm ass and tanned thighs. Up top, her cleavage had come out to play. It was a monochromatic display of navy blue, and looked wonderful on her. \n\nBeing trapped in a confined space with her had the added benefit of concentrating her scent. A mixture of the beach, perfume, and clean hair, it was very intoxicating. She caught me inhaling for reasons other than merely breathing, and smiled. \n\nThe door opened, and I gestured for her to go first. Chivalry? Not likely. I just wanted to watch her ass wiggle along ahead of me. She knew where she was going, and I just trailed her all the way, focused on the hypnotic motions of her firm rump. It was a minor disappointment when we arrived at the dining room entrance. \n\n\"Montpellier, for two,\" I smiled, raising two fingers redundantly. \n\nThe host nodded, checked us off his list, and grabbed two menus, directing us through the maze of tables. Ours was near the windows, overlooking the beach. \n\nI did my best to impress, holding the chair for Holly, before taking my own. Now that I was seated across from her, I got the full effect of her attire. \n\nThose are very nice breasts, I thought, and I'd love to just rub my face in that cleavage, right here, right now. Decorum be damned. I'm having dinner with Holly Sonders. Take that, Jenny. \n\nIt's funny, but despite spending over four hours together this afternoon, we hadn't really talked too much, at least not about each other. We talked plenty about my often somewhat erratic golf game, and her much more effective one, but not about Shane the person, or Holly the goddess. \n\nSpeaking of Holly, this was the full HD version. With her hair down, and aviator sunglasses absent, I was in the presence of the woman who regularly beamed at me from my big, flat-screen TV. \n\nOf course, my TV wasn't 3D, and Holly most definitely was. \n\nDinner was lovely, but unmemorable, which is less than I can say about my dinner companion. If Holly was truly trying to stay unnoticed, she should probably have stopped smiling all the time. That display of perfect teeth was a dead giveaway, and she kept flashing them at me, which I found inspiring. \n\nThe display of cleavage in the slightly open neckline of her blouse was equally inspiring, although to a different part of my body. I certainly didn't want the show to end, and we kept talking and joking for hours. It was pure black outside by the time we finished. \n\n\"Shane, I can't tell you when I've had such fun at dinner,\" she smiled, \"but it's getting late. We'd better get to bed.\" \n\nA sudden silence enveloped us. Bed? \n\n\"Uh, gee, let me rephrase that,\" she giggled, blushing red. \"I was intending to say that we have a relatively early tee-time in the morning, and it's getting late. We should get some sleep, in our own, individual beds, in our own individual rooms. There. Fixed.\" She hid her eyes with her hands in embarrassment. \"Oops.\" \n\nI laughed, but my heart had done a jig for a moment, and was still pounding. Now, it slowed but held onto the hope that her words were a Freudian Slip. Perhaps she was having horizontal thoughts as well? \n\n\"Yes, sleep,\" I laughed, caressing her beautiful, round breasts with my eyes, until she pulled her hands away and made eye contact. \"You're right. We should get some sleep. Well, I should anyway. I'd have a better chance of beating you if you stayed up all night.\" \n\n\"I have to admit,\" she smiled, leaning closer. Her breasts rested on the edge of the table, showing me more cleavage. \"You took your defeat much better than most men would. The fact that you're here, and willing to play again tomorrow, shows me you're different.\" She reached across, and took my hand. My eyes dropped momentarily to the bulging display at the top of her blouse, then moved back up to her dark, sexy eyes. \"Goodnight, Shane. See you in the morning.\" \n\nI watched her leave. Just as well she made her exit before me, as I had to wait for my erection to soften. I'd get it nice and hard again once I got to my room, and get myself off before I went to sleep. \n\nShe would still be in my dreams all night. \n\n***\n\nI slept surprisingly well. Breakfast was good, and I was on the practice green already when she drove up. \n\n\"Getting an early start?\" she asked, dropping a ball on the green. \n\n\"Don't like getting my ass kicked by someone in a skirt,\" I laughed, \"even one as pretty as you.\" It just rolled out so smoothly, like my putts were, that before I knew it, I had called her 'pretty'. \n\nNot that it wasn't true. She knew it, and I knew it, even if I hadn't said it... but in all my years playing golf, I'd never used the word 'pretty' to describe a playing partner to their face. ",
        "If her smile was any indication, she liked hearing it. I stole glances at her long legs while she hit her own putts. The short, white skirt was back, but today's top of choice was red, sleeveless, tighter, and had a more revealing neckline than yesterday's polo shirt. Otherwise, she was the same, which is to say, gorgeous. \n\nAnother thing that was the same was her golf game. We were playing the second course of the 36-hole facility, which was slightly tougher, but it made no difference to her. Funny how the middle of the fairway is the same, no matter where you're playing. \n\nMy game was a little better. I hit it more solidly, and that led to less scrambling, and more opportunities to score. Oddly, my best opportunity to score came on a less than perfect shot. \n\nWe were on 14, a 410 yard par four, with a nice, open fairway. Too open, for my liking, as I like to have a distinct target, and didn't have one here. So naturally, I pulled my drive, right behind the only tree that didn't have several friends in place. \n\n\"Hmmmm,\" I said, looking at my lie in the rough. If I took enough loft to get over the tree, I couldn't possibly reach the green. If I took the club to reach the green, I'd need to go around the tree. Going left was not an option. It was right, or nowhere. But starting it right would involve aiming into trouble, so if it didn't hook, I was toast. \n\nAll of this was on one side of the balance, while my score, a mere one shot behind Holly, was on the other. It appeared my fate hung on this next swing. \n\nHolly walked back, having hitting her shot, from the middle of the fairway, of course. She as on the front edge of the green. A par was a virtual certainty. \n\n\"Ewwww,\" she groaned, looking at my predicament. \"You gonna go for it?\" \n\n\"Thinking about it,\" I nodded. The ball was above my feet, which worked in my favour, but it was still a very advanced shot. \"I don't suppose you'd like to offer some incentive? Nothing too much. A kiss, perhaps?\" \n\n\"Why do I get the feeling I'm being set up?\" she asked, a big smile on her face. \"Okay. If you put the ball, on the green, from here... I'll give you a kiss.\"\n\n\"On the lips?\" I clarified, not wanting to pull the shot off, only to get a peck on the cheek. \n\n\"On the lips. Three seconds. I will kiss you, on the lips for three seconds. Deal?\" she asked, holding out her hand. \n\n\"Deal,\" I replied, and pulled the 7-iron out of my bag. It was not a small hook. I would need to move it about twenty yards right-to-left. Not a shot I normally practiced, but I understood the technique adequately; Swing towards the starting point, with a closed clubface that aimed about where the target was. \n\nHolly sat on the cart, watching silently. It wasn't going to get any easier. \n\nOoookay, whatever you do, don't try to steer it, and don't rush it. Just trust yourself. \n\nI set up, and pulled the trigger. \n\n\"Nice contact,\" Holly said, narrating the shot as it arced through the air, curving in a tilted parabola. \"It's moving toward the target. Nice shot!\" she giggled, as the ball thumped down on the green. The remaining sidespin screwed the ball closer, until it stopped about twenty feet from the hole. \"Very nice shot. Looks like I owe you a kiss!\"\n\nShe stood up, and met me behind the cart, where I was putting my club away. She tiptoed, hands behind her back, and pressed her lips to mine. I counted four, so I think I got a bonus second. Her lips were so soft, and delicious, just as they appeared to be. \n\nBack on the cart, we drove up and parked beside the green. She had some forty feet, uphill and over a ridge, but she nestled it within three feet, and I tapped it back at her. \n\n\"Thank you,\" she smiled, accepting the gimme. \n\n\"Care to offer another prize?\" I asked her, as I lined up my putt. \n\n\"Ha! Not likely!\" she laughed. \"This is for birdie, to tie me, and you expect me to sweeten the deal? Just putt, hotshot!\" \n\n\"Chicken?\" I taunted her. \"Brock! Brock! Brock!\" I strutted, flapping my wings. \n\n\"Okay, Foghorn Leghorn, you've made your point,\" she giggled. \"Now make the putt.\" \n\n\"Do I get another kiss?\" \n\n\"Fine. If you make the putt, you can kiss me this time. Fair enough?\" she asked. \n\nNow that's motivation. \n\nThe putt was pretty quick, slightly downhill, right-to-left a few inches. It was delicate, but I thought I could be aggressive, and keep it inside the hole. It was either going in, or four feet past, but the kiss was worth the chance.\n\nI took a deep breath, and drilled it, right in the heart. \n\n\"Booyah!\" I yelled, pumping my first, and doing a happy dance. The fist pump was for the birdie; the happy dance for something else entirely. She picked my ball out of the hole, and crooked her finger at me. \n\nAs I put the flag back, she waited, and put her arms around my neck. This kiss wasn't timed, and lasted several seconds, with the added pleasure of her breasts brushing against my chest. She parted her lips, but just as I might have expected her tongue to peek out, she pulled back, and smiled, wagging her finger at me. \n\n\"I think I've given you enough motivation for one day. We're tied, and there are four holes left,\" she grinned. \"Game on.\" \n\nI learned something new about her. I knew from TV that she was firm, lean, built and gorgeous. I knew from yesterday's ass-kicking that she had game. I knew from the kisses that her lips were soft, plump, and tasted like cherry... and I learned from the last four holes that she was intensely competitive. She ground over every shot, and forced me to do the same, giving no quarter while asking for none. I stayed with her, shot for shot, and we finished still tied. \n\n\"Three-hole aggregate playoff on the putting green,\" she smiled. \"Loser buys dinner.\" \n\nI smiled. It meant that, win or lose, we were having dinner again tonight. That, I could live with. \n\nShe chose the first hole. Thirty feet, left to right. Two putts for both of us. My choice. \n\nI picked a long lag putt, over fifty feet. Uphill, over a ridge, then down and left. She still had the tee, and zipped hers eight feet past. You'd have thought it was for a Masters Green Jacket, the way she reacted as it slid by the edge. \n\nMy putt looked light, but picked up pace as it crested the ridge, trickling to a stop eighteen inches from the hole. I tapped it in. \n\nHolly lipped hers out. \n\n\"Fuck!\" she groaned, dropping her putter, and glaring at the uncooperative ball, hands on hips. \n\nShe chose a makeable fifteen-footer for the third hole, and poured hers in the centre, drawing even. Now I had to make mine, or it was sudden death. \n\nNo pressure. \n\nWhen mine followed hers into the hole, I had done it. I won! \n\n\"Alright, mister incentive,\" she pointed, as I danced across the green. \"Tomorrow morning. Round three. No side bets for kisses, or other tricks. Just you and me for the title!\" \n\nShe smiled, and stepped over, kissing me softly again. \n\n\"Good round. Nicely played,\" she nodded. \"What are your plans for the rest of the day?\" \n\n\"Pool,\" I replied. \n\n\"See you there,\" she grinned. \"Save me a seat in the sun.\" \n\n***\n\nIt had already been quite the day. I had played well, and received three kisses from Holly so far. Dinner later seemed quite promising, and within minutes I expected her to join me by the pool, likely in her bikini. \n\nJenny who? \n\nI'm not trying to be cruel, but Holly was doing a wonderful job of distracting me from what could have been a painful time. The glass was definitely half full right now. \n\nThe term 'half full' most certainly did not apply to her bikini. This one was black... I suppose, like most women, she brought more than one... and the cups were full to capacity with beautiful, sexy breasts. She dropped her bag of pool supplies on the lounge next to me, then wiggled away to get a couple of towels. Her lower half was wrapped, but on the return trip, she discarded the covering. \n\nI got a good look at her ass while she arranged her towels, and my view was unobstructed, as the bikini bottom was a thong style. Once she was satisfied with her prep, she placed herself on the lounge, and laid her head back. \n\n\"Mmmmm. The sun feels so good,\" she smiled. \"Very relaxing.\" \n\nMaybe for her, but having such a goddess seated next to me, only three small swatches of cloth away from completely nude, was less than relaxing. I had my sunglasses on, so she couldn't see my eyes on her, but I couldn't see her eyes either. Perhaps hers were doing the same on me. One can hope. \n\nWe chatted back and forth, and I listened as she told me about growing up in small-town Ohio, outside Columbus, then attending Michigan State. \n\nI had no story to compete with that, so I let her continue. She was happy to talk about herself, and having to look at her as she did was hardly difficult, especially when she laughed. That big smile shook those big tits slightly, and drew my attention down. \n\nShe had that perfect, golden brown colour already, but the shine of suntan lotion on her skin made her even more delicious. I had to get out of here, before I said or did something stupid. \n\n\"I think, I'll head in now. All this sun has me sleepy,\" I smiled. Actually, I'm in severe need of a sexual release, and you're going to be the star attraction. \n\n\"Oh, before you go,\" she smiled, rolling onto her tummy, \"Do my back, please?\"\n\nOne hand passed me the bottle of oil, while the other reached behind her back, and undid the string that held her top in place. I took the bottle. \n\nOooh boy. This is going to do nothing to ease my erection. \n\nI poured some oil into my shaking hand, and moved closer, touching her for the first time, other than the kisses, of course. \n\n\"Mmmmm, that's nice,\" she sighed, as I rubbed the oil across her skin, from shoulders to just above her nearly naked rear end. \n\n\"Legs, too?\" I asked, pausing with my hands eager to grab her ass fully. \n\n\"Please,\" she replied. \n\n\"What about your, um... Shall I leave your butt to you?\" I stammered. \n\n\"You can do it,\" she giggled. \"It's just an ass.\" \n\nJust an ass? That's like saying the Mona Lisa is just a painting, or a Ferrari is just a car. No, that is not just as ass. That's a work of art and if I touch it, I might never let go. \n\nI did her long legs first, saving her best part for last. Oiling my hands once more, I kneaded the firm cheeks, more massage than the mere application of tanning lotion. \n\n\"Mmmmm, you're good. I might need some more of that,\" she moaned. \n\n\"Okay, Holly, you're coated. See you at dinner,\" I laughed, patting her rump in departure. She was face down, so probably didn't see me limping off into to hotel, trying not to break my dick. \n\n***\n\nI beat her to the table this time. Sitting quietly, and staring out the window at the view of the ocean and beach, I was still playing back the events of the day. Three kisses, a chance to feel those big breasts against my chest for a few seconds, and getting to not only see, but touch, her fabulous ass. Oh, and I played some good golf, winning the day.\n\nAll in all, a pretty good day so far, with dinner to come. I heard the voice of an angel, and turned to see Holly approaching. \n\nOh my. \n\nIn my experience, most women don't break out the little black dress unless they're interested in the man they're wearing it for. I know Holly was definitely not 'most women', but I could hope it still applied, because she was taking her seat right now, and that dress was pretty sexy. \n\n\"Hi Shane,\" she smiled. \"Miss me?\" \n\n\"Of course. I always miss a beautiful woman when she's gone,\" I replied, smiling back at her. I was laying it on pretty thick, but she was worth the effort. \n\n\"Aww, thank you!\" she giggled, \"but you know, buttering me up will get you nowhere on the golf course.\"\n\nHow about your bedroom? Golf is important to me, but I'd gladly sacrifice my male ego in that arena, if I get to have you in the sexual one. And no one loses at sex. \n\nI gazed at her, my focus running from her beautiful eyes, down to those kissably pouty lips, then down to quickly steal a peek at her impressive d\u00e9colletage, which I'm sure she knew I'd be drooling over. That would be the whole purpose of choosing such a dress to wear, wouldn't it? \n\n\"Shane, you never really told me why you're here, all alone,\" she smiled. \"I mean, your room is the same layout as mine, so I know you're in a suite, and I know why I'm here alone...\" she let the sentence hang, unfinished. \n\n\"Oh, I get it. Quid pro quo, huh?\" I chuckled. \"Alright, I'll give you the whole sordid story, but you have to tell me your saga, too.\" \n\n\"I told you,\" she giggled, playing innocent. \"Marysville, Ohio... Michigan State... Golf Channel... Fox. You already know all about me.\"\n\n\"Well, I may know about Holly, the celebrity, but I don't know anything about Holly the woman,\" I said. \"I Googled you. It says what you said. Did you write it?\" \n\n\"No, just lived it. Gotta leave a girl with a little mystery, don't you?\" she smiled. \"Okay. You tell me, I'll tell you. Promise.\"\n\n\"Alright. My girlfriend decided not to come,\" I told her. \n\n\"Nice try, but you're not getting anything new from me for that bit of tripe,\" she shook her head. She crossed her arms, squeezing her breasts together noticeably, and sat back waiting for more. It was clear the subject was not debatable. \n\n\"Fine,\" I sighed. I decided there wasn't really much to lose by telling her the whole story, unless she sided with Jenny, in which case masturbation was as close as I was going to get to having her. \"Please reserve judgement until the end, okay?\" \n\n\"Okay. No judgement. So what's the gossip?\" she smiled, un-crossing her arms and sitting forward. \n\n\"Jeez, try not to enjoy my torment quite so much, will you?\" I frowned. \n\n\"Right. No entertainment in heartache and sorrow,\" she replied, switching off the smile. \n\n\"That's better. Okay, her name was... is... Jenny, and we were together for almost a year,\" I began. \"We had an argument. She left.\"\n\n\"Shane, don't hide behind your pain. Let it out. Tell me all of it,\" she said softly, reaching across the table to touch my hand. \"Please.\"\n\nWell, if I had a therapist as hot as you, I might have already done so, I thought. Let it out? I suppose it's about time, isn't it? \n\nI laid it all out... how we met, how I felt about Jenny, and the plans we had made for the future. I told her about the argument, and how things had grown from a spat, into a full blown fight that ended with many hurtful things being said by both of us.  \n\n\"How long has it been?\" Holly asked. \n\n\"Six months. I wanted to apologize, but she has moved on, with someone else,\" I finished. \"That's about it. This place was paid for, and non-refundable, so I came by myself. I figured the time on the golf course might help.\"\n\n\"Did it?\" she asked. \n\n\"With you? Yes, absolutely. You're very therapeutic,\" I laughed. I wasn't sure if I felt better having told her, but I did feel different. \n\n\"Glad to be of service,\" she giggled. \"Don't expect pity from me tomorrow, though.\" \n\n\"Oh, of course not,\" I waved, dismissing the very notion. \n\n\"My turn, huh?\" she smiled. \n\n\"You dragged it out of me. Don't make me twist your arm,\" I nodded. \n\n\"I don't suppose you'd believe my story is pretty much the same?\" she offered. \n\n\"Really?\" I smiled, disingenuously. \"No, I wouldn't. Now spill it.\" \n\n\"Okay, okay... I'll tell you,\" she giggled. \"In the interest of saving both of us some time, I'm going to cut to the chase. My husband is an asshole. We're separated, and getting a divorce, because we had an argument, too. I didn't think he should be sleeping with his production assistant, and he seemed to think he should, so he did, over and over.\"\n\n\"I'm sorry to hear that,\" I said, honestly. \"Betrayal sucks.\"\n\n\"You got that right,\" she smiled, raising her glass. \"Here's to solo vacations, and partners that don't know a good thing when they see it!\" \n\n\"Here, here!\" I laughed, clinking my glass with hers. \n\nUnlike her husband, I knew a good thing when I saw it. Holly Sonders was very definitely a good thing, and from what I had experienced so far, that evaluation wasn't purely physical. I liked her, almost as much as I lusted after her body. \n\nAt this point, that lust was bubbling to the surface, fuelled in no small part by that dress. It wasn't quite the skin tight, ultra-short, cleavage popping style of a club dress, but it was pretty snug. The skirt was a tulip cut, just above the knee, and had a layered detail that made her hips look more angular. \n\nBeing a breast man at heart, I loved the neckline, a wide, shallow V that showed off the rounded upper curves of her chest. Several inches of seductive cleavage peeked over the top edge, and an interesting scroll detail at the shoulders focused my eyes even more on those smooth, well-tanned breasts. \n\nAnother source of heat was the look in her eyes, and the slight, sexy curl of her smile. It was a look that told me I wasn't the only one feeling the need for physical companionship tonight. She used one long, manicured finger, to beckon me closer. \n\n\"You know, I said there would be no pity tomorrow,\" she smiled, \"but I didn't say anything about tonight. Misery loves company, right?\" \n\nWell, that's the clich\u00e9, isn't it? Personally, I think what misery really loves is relief, distraction, and replacement with another more pleasurable emotion. \n\nThe waiter arrived with the food we had ordered during a pause in our telling of sad stories. It was, in a way, just what we needed to keep us from spoiling the moment with urgency. She had put the suggestion of a night together on the table, and I'm sure she knew I wouldn't be declining the offer. My eyes on her body were more than enough to confirm that I found her very attractive, and I had already called her 'pretty' and 'beautiful' today. We didn't need to rush, and the anticipation only made it better. \n\nWith a smile, she tucked into her seafood pasta plate, a plump scallop meeting its end between lips I hoped would soon be inching their way down my cock. With surgical skill, I carved into my own steak, a juicy medium rare, and delicious warm up for the juicy slice between her legs. We ate with controlled fury, not wanting to ruin things by rushing, but not wasting time either. \n\nI watched, fascinated, as her tongue swept rogue custard from her succulent lips during dessert. Would it do the same with my cum, later tonight? Was I destined to paint her pretty face with semen? Oh god, I hope so. \n\nWith dinner complete, I led her outside, toward the beach. The sun was setting, and even though we both knew that we would soon be writhing in each other's arms, it simply wouldn't do to waste such a romantic vista as this one. We paused at the end of the paved walkway, and she deftly removed her shoes, one delicate foot at a time, hanging the sexy heels by the straps from her fingertips. \n\nThe sand was still warm, as we slowly sauntered over to one of the lounges, taking a seat side by side, as the lower arc of the sun just kissed the horizon. Holly held my hand and we watched it in silence for a few minutes, before she stood, and rearranged my feet, creating a gap for her to sit in between my legs, leaning back against me. She wrapped my arms around her like a favourite blanket, and rested her head on my shoulder. \n\n\"That's better,\" she smiled. \n\nIt certainly was. Her luscious body fit me like a glove, and I held her close, smelling her hair. The slender nape of her neck was bare, her long hair pulled aside, and I spontaneously kissed the smooth skin. She moaned, and shuddered. \n\n\"That's better, too!\" she giggled. I kissed her neck again, and slid my hands up her body from her waist. My palms caressed the lower curves of her breasts. \"Mmmmm, that too. Don't stop.\"",
        "Those full globes felt wonderful, and I fondled her softly, nuzzling her neck as the sun finally dropped below the horizon. She was totally relaxed in my embrace, moaning softly and enjoying the attention. She turned her head, and met my lips with hers. \n\nThis kiss was different. Not coerced, or part of a bet, this one was genuine, unhurried and passionate, as her tongue quickly pressed into my mouth to introduce itself. She was delicious, and turned in my arms as much as she could, while keeping my hand firmly in place on her breast. Her hand caressed the side of my face. \n\n\"I think we'd better take this inside,\" she breathed between kisses. \"This show is over, but ours is just getting warmed up.\" \n\nAt her behest, we headed back toward the hotel. It took several minutes for us to make it back, largely because we kept pausing to embrace again every few steps. I became more intimately familiar with the curves of her backside, so firm, muscular, and sexy. Her kisses were sweet, and grew more expressive with each cycle. \n\nWe did finally find our way to the elevator doors. Once they opened, we stepped in. \n\n\"Your place or mine?\" I asked. \n\n\"Mine's closer,\" she smiled, pressing the '3' button for her floor. The doors closed, and her arms reached around my neck again. This kiss was necessarily brief, as the ride was short. Moments later we were at her door, and she wasted no time opening the portal for us, pulling me in behind her. \n\n\"Truly alone at last,\" I laughed, and scooped her up. She giggled like a schoolgirl as I carried her to the bed, placing her gently on her back before laying atop her. \n\nNow, I kissed her hard. It had been well over an hour since she voiced her need for this evening's activities, and I was, shall we say, eager. So was she, and she soon had found her way on top of me. The snug fit of her dress made straddling me difficult. \n\n\"Damn dress!\" she giggled, rolling off the bed. She reached behind her neck, intent on removing it. \n\n\"Wait!\" I gasped, standing quickly. \"Please, let me. I'd really like to do it.\" \n\nHolly gave me an especially sultry look, then stepped back. \n\n\"If you're going to do it,\" she smiled, turning to move to her luggage, \"then you might as well get the whole package.\" She rummaged for a few seconds, then came out with a pair of six-inch stilettos. \"A fuck-me dress deserves fuck-me shoes, don't you think?\" \n\nI watched her rise atop the sexy shoes, her legs growing exponentially more shapely. \n\n\"Um, yeah. I think you may be onto something there,\" I nodded, drooling. She struck a pose, hand on hip, and levelled a smoldering gaze at me. \n\n\"Well? Undress me, and not just with your eyes,\" she purred. \"In that respect, I've been naked for two days now.\"\n\nI guess I wasn't quite as subtle as I thought with my longing glances. \n\n\"Oh, you, um, you saw that, huh?\" I asked. \n\n\"Yes, I saw that, huh,\" she smiled, stepping into my arms. \"It was actually kind of nice, watching you try so hard not to be obvious, yet unable to stop yourself. It's quite flattering.\" \n\n\"How about this?\" I laughed, grabbing her ass firmly. \"Is this flattering?\" \n\n\"In a way,\" she giggled. \"It's more arousing than flattering. Are you going to undress me, or not?\" she asked. \n\n\"What's your hurry?\" I replied. \"Got a hot tee-time? I'll strip you when I'm ready.\" I kissed her again. \n\n\"Mmmmm. Promise to be as patient and unhurried once we actually are naked, and I think we'll get along fine,\" she whispered. \n\n\"Promise,\" I said softly, easing the zipper down her back. She turned in my grasp, holding her hair aside as I slid the zipper down further. I saw the back of her bra, and the top edge of her panties, both black to match each other and the dress. \n\nWith the back of her dress wide open, I ran my hands outward over her shoulders, pushing the scalloped straps off, and the dress forward. She caught the falling sheath in the crooks of her bent elbows, holding it up as she spun to face me, and took a step back. \n\n\"Ready?\" she asked. \n\n\"Yes. Please,\" I whispered. \n\nHolly straightened her arms, allowing the dress to slip silently down, and land on the floor around her heels. \n\nI had been fortunate enough to see her in her bikini, but there was something different about seeing her in this lingerie. More personal. More intimate. \n\nOr maybe it was the shoes. \n\nI whistled. \n\n\"God, Holly... You're incredible!\" I smiled, caressing her skin. \n\n\"Thank you,\" she giggled. \"Shall I take off the shoes now?\" \n\n\"No!\" I gasped, to be greeted with a teasing look. \"Leave them on.\" \n\n\"I thought as much. What is it with guys and hooker-heels?\" she asked. \n\n\"Does it matter?\" I growled, pulling her tight against me. \"If it works, don't fix it... and believe me, it definitely works.\" \n\n\"I'll take your word for it,\" she smiled, returning my kiss. \"Now, please continue.\"\n\n\"Absolutely,\" I replied, palming her shoulders to turn her around. I nuzzled her neck again, and unhooked her bra. \n\nI knew, from my Google search on her yesterday afternoon, that the contents of this bra were not strictly original equipment. Call it augmentation, enhancement, or simply a boob job, I didn't really care. Nice tits are nice tits, regardless of the source. \n\nI slid the straps off her shoulders, letting the bra fall away, and peeked down at her spectacular, unfettered breasts. Thick, erect nipples, in large areolas, stood up on each of them. She turned, to give me a better look, pausing in profile. \n\nI had a new word for this particular surgeon's work; art, pure and simple. Nothing short of a masterpiece... two, actually. Absolutely beautiful. \n\n\"Please remove your panties,\" I smiled, and watched her breasts sway as she did so. She stepped out of them, and stood quietly, hands clasped behind her, looking demure. I glanced down at the neatly trimmed strip of brown curls that led south to heaven. \n\nI circled her, slowly, admiring every inch of her nude form, perched high on those sexy shoes. Her body was sex incarnate, so firm and taut, just a few workouts away from pure fitness model. Sculpted perfection. \n\nHolly watched me as I passed her, a naughty grin tickling the corners of her mouth. As I completed my third inspection lap around her, she put her hands on her hips. \n\n\"I'm feeling a little cheated, here,\" she giggled, wagging her finger. \"Seems to me you've seen mine, but I've only seen your choice of wardrobe. If you don't show me some skin soon, I'm going to start putting things back on.\" \n\n\"We can't have that!\" I gasped. \"Feel free to remove anything you like.\" \n\nI stood still, letting her move closer. The look on her face told me that she was more than willing to unwrap me. She started with the top button on my shirt, and worked her way down, reaching inside as she did to softly explore my chest. While not at the same level of fitness that she was, a past of several sports had built some muscle and kept it toned. She wasn't repulsed, which was about as good as I could hope to do. \n\n\"Nice shoulders,\" she smiled, dragging my shirt off. \"What's happening below the belt? Mind if I take a look?\" \n\n\"Not at all,\" I laughed, as she squatted on her heels, and wrestled with my belt. She managed to unbuckle it, and tossed it aside, then unsnapped the catch on my pants. She helped me step out of them, and even peeled off my socks while she was down there. She sat, balanced on those spiked heels, and gazed at the bulge in my jockey shorts. \n\n\"This looks promising,\" she nodded, still just looking. \"I can't believe how nervous I am. Nervous, and excited. That's a good thing, isn't it?\" \n\nI think so. I certainly shared her feelings, and prayed she wouldn't be disappointed with what she found next. Maybe I was being too hard on myself, but she was so beautiful, and perfect, I thought her standards might be higher. \n\nShe inched closer, her face inches from my eager dick, and tugged the waistband of my shorts downward. My penis, freed from its confined environment, sprung out, and slapped her cheek. \n\n\"Oh!\" she gasped, smiling wide as my tumescent shaft bobbed before her. She reached up and cradled my balls in one hand, while the other gripped the hard piece of meat. \"Shane, she walked away from this?\" she asked. \"It's nice and thick. I like it.\"\n\nI was about to say 'thank you' for the compliment, when she totally derailed my thoughts by plunging her open mouth over the head of my cock. Her wide, sexy mouth easily accommodated my dick, and she pressed it deep, against the back of her throat. \n\n\"Mmmmm,\" she moaned. \"Mmmmm hmmm, mmmmm hmmm.\" Her eyes were looking up at me, and she pulled my cock out of her mouth to speak. \"I'm going to start us off with a blowjob, for several reasons. I like it, and it's nasty. I love to swallow. It will help you last longer, too, and I think you want me to do it, don't you?\" \n\nNo. Don't you dare suck me off, you gorgeous, buxom, naked creature. I won't stand for it. \n\nSarcasm aside, I nodded like a bobble-head doll on crack, and she smiled before resuming her actions. \n\nToo bad she wasn't any good. There's that sarcasm again. My cock fit her mouth like they were made for each other. It was like a pussy, with a tongue and the ability to suck. Add her intriguing hand action, and the incredible view from above; her brown eyes boring holes into mine and big breasts swinging rhythmically. You can probably understand how exciting I found it, and why I would never see anything but this memory, anytime I saw her on TV from now on. \n\n\"God, that's so good, Holly,\" I groaned, tangling my fingers in her hair. She moaned, and pulled my other hand into her hair as well, grabbing my butt with both hands once she had done so. The message was pretty clear; she wanted me to fuck her face. Oh well, if you insist. \n\nThe room was quiet, with only the whirring of the air conditioning to compete with the sounds of a most enjoyable blowjob; Holly's soft moans, my grunts of pleasure, the wet 'gwock, gwock, gwock' of my cock in her throat, and desperate breathing from both of us. I was glad she said she liked to swallow, because I was about to give her plenty to swallow. \n\n\"Oh yeah, Holly, suck it harder!\" I gasped, my hips pumping into her face. \"Suck it! Suck my cock! Shit! Don't stop! Gonna cum! Gonna cum! Gonna cum, gonnacumgonnacumgonna... CUMMMM! FUCK! YES! YESSSS!\"\n\nHolly just hummed, and gulped down everything I sent her way, which felt like several gallons, but of course was much more manageable in volume. My cock flexed, and I held her head tight, jamming the shaft down her throat as the orgasm continued to rock my world. Finally finished, I released her and dropped onto the bed. \n\nHolly remained in place, squatting on her stilettos, a string of saliva and semen dangling from her chin. She scooped it back into her mouth with her fingers. \n\n\"Mmmmm mmmmm, good!\" she giggled, rising to her feet with deceptive elegance. \n\n\"You're... welcome,\" I panted. \n\n\"I think that's my line,\" she smiled, sliding into position beside me. \"I'll give you the chance to make it up to me. Whenever you're ready.\"\n\n\"Be with you in a minute,\" I laughed, \"as soon as the room stops spinning. That was realllllllly good!\"\n\nHolly just smiled, and waited patiently, laying on her side facing me. I've always liked it when busty women do that... lay on their side... because it stacks their breasts enticingly. It caught my attention, and made me focus, clearing my head. \n\n\"Alright, you,\" I smiled. \"Time to thank you properly. I assume you'd like me to lick your kitty?\" \n\n\"Mmmmm, oh yes,\" she purred, squirming slightly. \"Please do. I love getting good head. Do you enjoy munching?\" She scooted up the bed, and piled a few pillows to prop her up, legs spread. The sexy shoes remained in place. \n\n\"Absolutely,\" I replied, moving between her splayed thighs. \"Ooooo, especially when the pussy in question is a pretty, wet one, like yours. I may be down here for a while, so make yourself comfortable.\"\n\nI wasn't just paying her hollow compliments. Her pussy really was just that pretty. Her lips flared out, pink and dripping wet, much like my favourite seafood... butterfly shrimp. I always ate plenty of those, but there was only one of these, so I'd just spend the extra time making sure I ate this one really well. Still, even the longest session of cunnilingus begins with a single lick. Better get started. \n\nShe smelled wonderful, but tasted even better as my tongue made first contact. \n\n\"Oh yeah, there you go,\" she groaned, and laid her head back on the pillow. \"I hope you like nectar, because I can get pretty wet.\" \n\nThat's like asking if I like air. Silly question. \n\nI ran a few laps around her exposed outer labia and perineum, cleaning up her delicious, musky residue. Her inner lips, while pouting, were still glued shut, until I parted them with a pass from my tongue. They opened like a zipper, and I learned why she warned me about wetness. \n\nI trickle of juice ran out, in the form of a large, clearly visible droplet, expelled from her depths. I intercepted it before it made it too far, but it wasn't alone. Another followed soon, then more. I was spending a lot of time keeping up with her yummy drippings, while she moaned happily. I hadn't even started on her clit yet, but I did notice it was starting to swell, and peek out of its hood. In a pause between drops, I finally flicked my tongue over it. \n\n\"Oh god, yes!\" she gasped, and her body tensed. That tensing expelled more juices, not in the form of a drop, but of a small wave. The little Dutch boy was overwhelmed, but I slurped it up. \n\n\"Jesus Holly! You aren't kidding about being wet!\" I mumbled, lapping away at her gash like a thirsty dog. She lifted her head, and propped herself up on her elbows, looking down at me between her breasts. \n\n\"When I'm really horny, I can be very messy. Ready?\" she giggled. \n\nI suppose it was a compliment, then, because she was obviously very horny. I braced myself, tongue extended, and nodded. \n\nHolly clenched her well defined abs, and grunted. She didn't squirt, per se, as much as gush. It was impressive, and delicious, and abundant, but I managed to keep it from oozing down her ass. While I was there I licked her starfish, too, and was greeted with a deep, appreciative moan. Someone likes getting her asshole licked. File that one away for future use. \n\nHer big push seemed to have drained to pool for a while, letting me get to work on her little clit, which was now demanding attention, its pink head out in the open. I sucked it gently, making Holly squeal in delight. \n\n\"Oh yeah, suck my clit, honey,\" she moaned. \"Finger me, and suck my clit.\" \n\nSome girls, Jenny included, don't like fingers, but if Holly wanted them, I had a full set for her. I started with one, probing into her sodden folds while I nibbled her clit. Her moans became coupled with undulations of her hips. \n\nIt didn't take long for her to soak my hand. I added a second finger, and a third, continuing to tongue her clit eagerly. I could feel her body beginning to quiver, and knew she was close. Just in case I missed the signs, she told me directly. \n\n\"Fuck! I'm almost there, honey!\" she gasped. \"God, don't stop!\" \n\nI wasn't planning on it. I'd been down here, between her legs, for long enough that my dick had recovered from her very intense blowjob, but I wanted to get her off, so I would be seeing it through to the conclusion. \n\nBesides, I was curious. If she could gush on demand, what were her orgasms like? Maybe I should have brought my snorkel?\n\nThe quivers became shudders, and her ragged breathing spelled the approach of her big 'O'. My fingers and tongue worked their magic. Just a little more... \n\n\"OhhhhhhHHHHHHHHHHHHHHHHHH! GNAHHHHHHN!\" she screamed. Her hands pushed my face away, and flailed at my hand, which slid out of her pussy just as she sprinkled an impressive arc of droplets into the air. A second arc followed, as she changed colour with exertion, her whole body clenched like a fist of sexual release. Spent, she flopped back, breathing hard, and moaning incoherently. \n\nI cuddled beside her, and rested my soaking right hand on her breast. She grabbed it and dragged it to her mouth, sucking my fingers. \n\n\"Mmmmm,\" she smiled when she had sucked them all. Her eyes opened, and she saw the mild surprise on my face. \"What? You don't think I've tasted myself on more than a few occasions?\" \n\n\"No, I suppose you have,\" I laughed. \"Have you always been so, um...\" \n\n\"Juicy?\" she finished for me. \"Pretty much. I've always gotten very wet, although the squirting is a more recent development. Now, do you want to talk, or fuck?\" \n\n\"We can do both,\" I nodded, rolling on top of her. She spread her legs, and guided me in. Lubrication was not a problem, of course, letting my cock slide in easily. \n\n\"Oh shit, that's it. Gimme that cock,\" she whispered. \n\n\"With pleasure,\" I smiled. Her pussy felt wonderful, and juice squeezed out to tickle my balls as I pushed deep inside her. \n\n\"Oh, yeah, thanks for being a stupid bitch, Jenny,\" she groaned. \"My pussy is grateful.\" \n\nAnd I'm grateful that your pussy is grateful that Jenny was stubborn... because if that wasn't the case, I wouldn't be looking into your big brown eyes, feeling your big soft breasts squashed between us, and relishing the sensation of pumping my cock into your succulent cunt. I'd call it a win-win. \n\nHolly wrapped her legs higher around my waist, giving me even better, deeper, access to her vagina. I felt the stiletto heels against my butt. She was huffing softly in time with my strokes, and making little faces of pleasure each time I thrust into her. \n\nI raised up on my arms, gazing down at her. She had her hands braced against my shoulders, and was giving me a look that begged for more. \n\nWith one arm, I reached down and hooked one of her legs, raising it high, and changing my angle of penetration. This caused a gasp from her, and after a minute, she raised her other leg to match the first. Soon, her legs were against my shoulders, slutty shoes still firmly on her feet, and she was folded in half, in a position only a female athlete could achieve. I was drilling her hard, and she was screaming her joy. \n\nShe pushed me off, and rolled over, raising onto all fours. Nothing further needed to be said, as I knelt behind her and plunged back inside. Her ass was amazingly firm, and my thrusts were absorbed with less jiggle than you'd expect. I let Holly dictate the positions for a while, and she had quite a repertoire. She dropped her shoulders to the bed, then went flat on her belly, all while I ploughed her pussy from behind and above. \n\nHer next move was onto her side, letting me brace on her hip, while fucking her pussy between closed thighs. It was so tight. Heavenly. I moved to spoon behind her, and we went at it again. Holly screamed through her third or fourth orgasm, then uncoupled, turning to face me again. She put her leg over my hip, and welcomed my cock back inside her sodden cunt. \n\n\"Oh Shane, you're a really good fuck!\" she gasped. Her lips were on mine seconds later, and we kissed each other passionately while I worked my hips, sliding my dick in and out rapidly. \"Cum in me, honey! I love that feeling! Do it!\" \n\nI was close enough that merely picking up the pace hastened my own climax. That, and those beautiful tits, jiggling and slapping against my chest. \n\n\"Getting close,\" I grunted. \n\n\"Oh, please, spurt that hot juice way up inside me!\" she hissed. \n\nI did, slamming into her with desperate ferocity, until I exploded inside her, groaning in harmony with her own vocalizations. She held me close through several spasms, then kissed me softly, cooing in my ear. \n\n\"Mmmmm, thank you, baby. That was wonderful,\" she whispered. \n\nWe rested for a short time, before she slithered down, sucking my wilted penis back to life. This time she mounted me, discarding the shoes at last, and rode her way to another two orgasms, while I toyed with her nipples from below. She leaned forward, cuddled against my chest, and closed her eyes. ",
        "\"Out of gas?\" I asked softly. \n\n\"Long day,\" she replied, and slid off to snuggle against my side. \"Nap time.\" \n\nI wrapped her in my arms, and closed my eyes, too. She was right; it had been a long day, but a very, very good one. \n\nGood golf. \n\nGood company. \n\nGood meal. \n\nGreat sex, with a beautiful woman. \n\nI relaxed, and we fell asleep. \n\n***\n\nHolly stirred slightly in my arms. Her head was resting on my chest, and she kissed my skin softly. \n\n\"I'll be right back,\" she whispered, rolling out of bed. I watched her ass as she disappeared into the bathroom. On her way back, she stopped, and picked up the phone. \"Pro shop, please.\"\n\nShe looked over at me while she waited, a wide smile on her face. \n\n\"Yes, I needed to make a change in my tee time tomorrow... Sonders, for two, at 9:00... yes, I'd like to push it back a few hours... Oh, it is? Well that's great. We'll just come out when we can then. That's great. Thank you.\" She hung up, and stood, proactively posed, looking at me with fire in her eyes. \n\n\"It seems there's plenty of time for me to kick your ass on the course, as tomorrow is very quiet. That's good, because I don't think either of us will get much sleep tonight.\" She sauntered over, and rejoined me in bed. \"If that's okay with you? You're welcome to go back to your room, if you'd rather sleep.\" \n\n\"No. No, I think I'll stay here,\" I laughed. \"Maybe I can wear you out.\" \n\n\"Well, you're welcome to try,\" she smiled, rolling on her back and spreading her legs. \n\n\"Give it your best shot!\" \n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFirst, I hope you looked her up, if you didn't already know who she was.\n\nI also hope you enjoyed it.\n\nPlease send me your thoughts, feedback and comments, and please pay me for my time, in the form of your vote.\n\nThanks for reading."
    ],
    "authorname": "ilikeithot6308",
    "tags": [
        "golf",
        "big tits",
        "brunette",
        "romance"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/strokes-and-distance"
}
{
    "title": "The Sex Survey Ch. 02 - Results",
    "pages": [
        "Disclaimer: Like all lit stories this one would fit in multiple categories. This story has threesomes (M/F/F), exhibitionism, and lots of light bondage. If those aren't your thing, stop now and find another story.\n\n*****\n\n(Years later)\n\n(Thomas)\n\nSighing inwardly, I looked down at the cream-colored stationary in my hand reading the elegant script one more time. The parchment was thick with a rough texture.\n\n\"You are cordially invited to the wedding of Ben Jones and Deanna Cruz to be celebrated on November ...\" I passed over the details. More important than those was a small handwritten note below the flowing script. \n\n\"You better be there Gunny, no excuses.\"\n\nShaking my head, I remembered our time together. Jones had been a corporal underneath me for a deployment to Afghanistan, where I'd used him as my right-hand man. He was a bit on the slower side of picking up rank. He wasn't dumb or caused trouble or anything, he just didn't care about getting promoted. He knew he wanted to get out after serving his tour so he made no effort to advance. When I returned from an 18-month deployment he had immediately notified me via Facebook Messenger that I was expected at his wedding, I sent him my address and had an invitation the next week. \n\nJones was having the ceremony and the reception in the courtyard of the local Windsor hotel. Now I was sitting in the parking garage with my window rolled down playing with my phone trying to think about how long I needed to stay before I fulfilled my obligations as his friend when I looked up and caught my breath.\n\nWow, I mean really, wow!\n\nA dark-haired woman was walking down the aisle toward the entrance. Even from a distance she was stunning, with a perfect body and elegant dress. She was looking at her phone as she walked so her hair partially covered her face. She had an athletic figure with strongly defined arms and legs and a trim waist that flared into nice hips. She was wearing a red strapless dress that had a flowing skirt just above her knees and the top showing a healthy amount of cleavage. By the look of the outfit she had to be here for the wedding. Idly wondered if she was single. \n\nShe was on the far side and only a few spaces across from my lane when she crossed over a vent and her dress blew up around her, for a couple seconds I was treated to a full flash of her legs and a red satin string panty. \n\nHer head jerked up and I got another surprise, Alanza! \n\nIt'd been the better part of a decade since I'd seen her but she was as beautiful as ever. She'd filled out a little but in a good way. She was still toned as hell but now she had more curves, a fuller figure.\n\nShe moved a step away from the vent and looked around. I froze, most people in a parking garage never look inside the vehicles when they scan. Sure enough, after a quick check she believed nobody had seen her. She looked back down at the vent and then up and around. I knew what she was thinking, but this was almost a decade later, was she the same as back in the day? I tapped my phone starting my video recorder. \n\nGiving another glance around she stepped to the vent and let the air carry her skirt up in waves. She stood there gyrating her hips. Moving her arms above her head she began to dance to in slow motion, turning her hips back and forth, twisting as she put her back to me. The panties were a g-string and left her ass visible as the dress flew around her. Biting her lip, she slowly swayed as she turned around, letting the air play with her dress for a full minute before she finally stepped off the vent with a smile.\n\nStraightening her dress, she fixed her hair before she started walking again. Making a decision I stepped out of the car with my back to her, I caught a flash of her eyes going wide as she saw me but when I turned back around my face was neutral like hers. \n\nOur eyes met and I pointedly looked her up and down.\n\n\"I assume you're here for the wedding.\"\n\nShe nodded.\n\n\"Me too.\"\n\n\"I figured,\" she said.\n\nI made a show of looking behind her, \"No friends?\"\n\n\"Nope, stag, you?\"\n\n\"Same.\"\n\nWe stood there awkwardly for a second.\n\nWe both opened our mouths, then closed them when we realized the other person was about to talk, then laughed at ourselves.\n\n\"Not to be forward, and I'm not suggesting anything or trying the whole cliche wedding hookup, but do you want to sit together??\n\nShe nodded.\n\n\"I know I recognize you,\" she said.\n\n\"You're a Marine right? I know you from somewhere too.\"\n\nI mentioned my last duty station as a smokescreen before I talked about our old duty station together.\n\n\"That's it, I remember you,\" she said after I prompted her.\n\nWe chatted about our units and the people we knew in common as we walked toward the the hotel lobby. \n\nWe found some seats together and said hello to the few friends we each had pointing out to each other where we knew them from. Most of the crowd were Marines with scattered family. \n\n\"For the record, if you see anybody you'd rather be with let me know. It won't hurt my feelings if you go sit with someone else,\" I said.\n\n\"Damn, trying to get rid of me already! Did you spot somebody you'd rather hang with?\" she teasingly asked.\n\n\"Not at all, I just didn't want to intrude on your time since we barely know each other.\"\n\n\"Thanks for the thought but I'm good, I'll stay with you tonight.\"\n\nI nodded, \"I'd like that.\"\n\n\"You do have to dance with me, that's nonnegotiable.\"\n\n\"No problem.\"\n\n\"Are you a good dancer?\"\n\n\"Not as good as you but I manage.\"\n\nHer eyes went wide as I looked at her with a playful grin.\n\n\"I knew you saw me,\" she said, slugging my arm.\n\nLaughing, \"Of course I saw you. Did I say or do anything to suggest otherwise?\"\n\nShe narrowed her eyes and raised a fist to me, \"I'm not trying to hook up,\" she said mocking my voice.\n\nI laughed again and shrugged, \"I'm not trying to hook up. Did it make my day? Yes. Does that mean I think you'll have sex with me? No. You seemed like you were just having a little fun, I don't think you're easy or anything. It was harmless.\"\n\nMollified, she still eyed me.\n\n\"Besides, I'm happy enough to enjoy the video as a reminder.\"\n\nHer eyes went wide again, \"You are joking?\" she said crisply.\n\nI arched a brow, \"Not even a little.\"\n\nShe paused and studied me for a minute.\n\n\"Let me see,\" she said. \n\nI pulled out my phone and opened it, handing it to her after I opened the video and hit play.\n\nShe watched the whole thing before commenting.\n\n\"I look hot.\"\n\n\"I agree, and you'll notice you only see your face at the end.\"\n\n\"I did notice. What are you going to do with it?\"\n\n\"Post it on YouTube.\"\n\nHer jaw dropped, \"Really?\"\n\nI shrugged, \"No, I'm just teasing.\"\n\nShe sniffed, \"I could do better.\"\n\nI raised an eyebrow, \"Really?\"\n\nShe held her head up, \"If you do post it, I want a better one than that. Now that I know, I would put on a better show.\"\n\nThe music for the ceremony started so we both went quiet. Everybody turned as the bride walked into the room looking beautiful with a flowing white dress and bared shoulders. Eyes bright, the groom stood on a raised dias in full dress uniform. After the ceremony pictures were taken in combination with all family and friends. Even myself and Alanza sat in a few, the groom threw me into a full hug, thanking me for attending. We'd shared the battlefield and even though we hadn't seen each other in a while our connection was strong. \n\nFor the meal, Alanza and I found a free table with a few friends. Everybody introduced themselves and we talked and laughed while we ate, made congratulatory comments about the groom and how lucky he was to find his perfect match. Stories were told by each person and their connection to Jones. After the toast, the dance floor opened and the couple shared the first dance before the rest of us hit the floor. I danced with Alanza a few times before a few of her friends asked if they could have a dance with her. I passed her on and went back to our table. \n\nWatching her on the dance floor I saw her look back at me multiple times. One of my female friends walked up and asked me to dance so I hit the floor again. After our dance Alanza cut in and asked if she could have me back. My friend hugged me and went back to her group. The next song was slow so we wrapped our arms around each other and swayed to the music. After the song ended she reached up and gave me a quick kiss on the lips.\n\n\"What was that for?\" I asked.\n\n\"Needed to send a signal.\"\n\nI nodded, \"To who?\"\n\nShe shrugged, \"Your dance partner, my dance partners.\"\n\nAccepting her comment I took her hand and led her off the floor, \"Let's go for a walk.\"\n\nShe didn't say anything as she followed, wrapping her arm around mine as we toured the gardens of the hotel. We stayed silent, just enjoying each other. When we passed the doors to the parking garage she nudged me toward them. I let her guide me until she stood in front of the vent.\n\nI watched as she raised an eyebrow. \n\n\"Take out your phone,\" she said.\n\nI did what she asked as she pulled her phone out and tapped it a few times, \"Turn Me On\" by David Guetta burst forth. Then she looked at me to make sure I was recording and stepped on the grate and let her dress fly up. She danced to the beat of the music with her arms held high, making sure either her arms or her hair covered her face. I bent down to make sure I had a good angle of her panties and limit the chance of her face being seen. \n\nAfter the song finished, she stepped off, panting she looked at me, \"How was that?\"\n\n\"Words fail.\"\n\n\"Let's see it.\"\n\nShe wrapped her arm around mine as I played the video for her.\n\n\"Damn, it looks much better now, and the music helps.\"\n\n\"Yep.\"\n\n\"You really going to post that to YouTube?\"\n\n\"Unless you say otherwise.\"\n\n\"I don't see anything that somebody could tell it was me.\"\n\n\"Me either.\"\n\n\"Go ahead, then send me the link.\"\n\n\"K, text me so I have your number.\"\n\nI gave her my number as she tapped her phone and a one-word text popped up on my phone, Alanza. I hit save and opened up my browser.\n\n\"I love the music, good choice,\" I said.\n\n\"Yeah, I thought that might make it a little better.\"\n\n\"Better? It's almost perfect.\"\n\n\"Almost? I dance for you in my panties and it's almost perfect?\" she laughed.\n\n\"Well, to be perfect it'd have to have been done without the panties.\"\n\nLaughing, \"No way am I posting a video to YouTube without panties.\"\n\n\"Fuck YouTube, I meant for me.\"\n\nShe stepped back and looked at me, I met her gaze without blinking. \n\nQuickly, she reached under her dress and pulled her panties down, \"You post this video and I'll fucking kill you, understand?\"\n\nI nodded yes as she stepped out and handed me her underwear.\n\nShe hit her phone again, this time \"Life of my Own\" by 3 Doors Down started playing.\n\n\"I love this song,\" she said stepping onto the grate. \n\nThis time as she danced she didn't let her hair flow into her face or use her arms to conceal her. She danced to the upbeat rhythm looking me full in the face as her dress glided on the air around her. My heart was pounding as I once again recorded her, her pussy was different, years ago she'd been waxed smooth, now she had a small V of tightly trimmed black curls, it was sexy as hell. She had the same tan line though, when she turned I could see how little her bikini covered in the front and her ass showed only the single white stripe of a g-string or thong. \n\nShe stayed turned around letting me get her ass for a minute before she faced me again. Then she teasingly reached up and tugged the top below her tits without missing a beat as she now danced full frontal for me. Her tits were as beautiful now as they were before, firm, and a solid D cup. She still had the same perfect small, lighter triangle of skin on her tits showing where her bikini protected. Her dark, quarter sized nipples were hard as she danced and her body gleamed with a light sheen of sweat as the end of the song played.\n\nStepping off the grate she moved toward me and wrapped her arms around my neck. We kissed passionately as my hands slid under her dress to cup her ass.\n\n\"I can get us a room,\" I said breaking the kiss.\n\n\"No, it's now or never,\" she whispered huskily as she planted kisses high on my neck.\n\nShifting my grip, I lifted her up and she complied by wrapping her legs around me. She kissed me again as I moved us to my black Nissan Titan truck. Our tongues teased each other as I reached the side and pinned her against the vehicle using one hand to open the rear driver door. Lifting her onto the seat edge she broke the kiss and started fumbling with the buttons on my dress blue coat. She undid them and pulled it off, tossing it into the front seat, leaving me in a white t-shirt and blue slacks. She moved to my pants but I stopped her and pushed her back to laying position as I pulled up her dress. Our eyes met as I moved my face between her legs forcing one leg on top of the back seat and the other off the cushion. Without hesitation I began to lick, making her throw her head back with a groan as I took control and went down on her. Her fingers alternately gripped my head and stroked through my hair as I spent the next few minutes licking, teasing, and probing her with my tongue. Her constant whimpers and writhing had me hard as a rock, panting she finally gripped my head pulling me up and wrapping her legs around me. \n\n\"I need this,\" she whispered as she undid my pants freeing my cock. It sprang free hard and throbbing as she guided me to her entrance. Grabbing my ass, she pulled me and I thrust fully inside her. We both froze to adjust to one another then started to move. Our frenzied passion slowed and we developed a pace, her left leg stayed wrapped around my thighs but her right stroked up and down my leg. I shifted my body to let her move to a more comfortable position under me and her hands moved under my slacks to cup my ass. We kissed with each of us moaning as our bodies melded and moved slowly against each other.\n\nTime stretched as I continued to push into her, I quit supporting my arms and let my weight move on top of her so I could reach down and grab her ass. Our bodies tensed as our hips moved against each other, we picked up speed and our kiss broke as she cried out and I buried my face in her hair. I drove into her as she shifted one hand to my back and dug her nails in, seconds later we each came, locked as our muscles trembled while I pumped inside her. \n\nAfterward we fixed our clothes outside my car. \n\n\"You sure you don't want to get a room?\"\n\nShe smiled, \"It's getting late and I need to get home, babysitter can't stay all night.\"\n\nOh, she had a kid, good to know. She was quiet after that comment, I assumed she was waiting to see what I said. I imagined that was a show stopper for most guys.\n\n\"Can I see you again?\"\n\n\"Do you really want to or are you just saying that?\"\n\n\"I really want to.\"\n\nShe shrugged, \"You have my number so I guess we'll see if you're lying or not.\"\n\n\"I get it, I'm sure most guys run when they hear the word babysitter, but I promise I'm not bothered. I'll even ask what you're doing next weekend.\"\n\nShe raised an eyebrow, \"My kid's birthday, you want to come?\"\n\nAgain, if she was playing chicken or thought I'd be bothered she was wrong, \"No problem, I'll bring a gift. What does she like?\"\n\n\"She's in third grade and love the Disney Princess Jasmine.\"\n\n\"I'll text you for the address. I'll be there.\"\n\n\"We'll see.\"\n\n*****\n\nDuring the week we texted but kept it light. I knew she was waiting to see if I'd actually show up or come up with some excuse. On Saturday I arrived at the address she'd given me wearing blue jeans and a blue superman logo t-shirt. After I knocked a cute brown-haired woman opened the door.\n\n\"Hello, I'm Thomas, I'm here for the birthday party.\"\n\nShe held out a hand to shake, \"Hey, I'm Michelle, I'm Alanza's best friend, and you must be the stud from the party she can't stop talking about. \n\n\"Oh you bitch,\" Alanza muttered as she walked up behind Michelle.\n\nI shook Michelle's hand and asked, \"Can't stop?\" \n\n\"Yep,\" said Michelle. \n\n\"Ignore her,\" Alanza said moving in front of her forcing us to break hands. She gave me a quick kiss on the lips as she took my hand and guided me inside. \n\nBoth girls were dressed in black boots and blue jeans, Michelle had on a low-cut white blouse and Alanza had a burgundy silk spaghetti strap top that showed lots of cleavage and kept her nipples pressed against the fabric. \n\nShe walked me into the living room where there was a large crowd of guests. Kids were running around while the smell of hot dogs and cake drifted through the air. Disney Aladin decorations were on the walls and everywhere with Princess Jasmine plastered on just about everything, tablecloths, plates, and cups. \n\n\"I told you she likes Jasmine, same name and looks like her so it's her favorite, and before you ask the name is a coincidence,\" Alanza said.\n\nI nodded.\n\nShe introduced me to a bunch of couples and pointed out their kids and names. There were a few single guys from her unit that she motioned toward. I tried not to feel reactive towrd them, I'm sure they were her friends but given how beautiful she was it was hard to imagine every guy not hitting on her. \n\n\"That's Ken, cool guy, likes to mountain bike. That's David, can't stand him, always hitting on me in creepy ways, but his daughter is best friends with mine.\"\n\nShe named off other people and their relationship until it all blended into an ocean of new faces. \n\nLater I was discussing the upcoming football season and our favorite teams with Ken, when David had obnoxiously overheard us and was loudly decrying our teams and anything we said. Even when Ken and I talked to just each other he still interjected. Ken rolled his eyes so often I could tell he was used to this. David was on a diatribe when I zoned him out and glanced over the table and noticed Alanza talking to her daughter.\n\n\"What's that?\" Jasmine scowled at her mother as she held out a raisinete.\n\n\"It's a raisinete. Try it, you'll like them.\"\n\n\"I don't like raisins,\" Jasmine said suspiciously.\n\n\"You can't even taste them, it's mostly chocolate.\"\n\nJasmine took it and held it in her hand for a second, she sniffed it then proceeded to pop it into her mouth. After a second of chewing, she promptly turned her head and spit the raisinete on the table.\n\n\"JASMINE!\" Alanza snapped. \"Stop that, if you put something in your mouth you swallow it.\"\n\nMe, Ken, and David all watched Alanza with raised eyebrows and innocent smiles. It took her a second to realize the room had gone quiet and everybody was looking at her. She saw the other couples fighting back smirks as she looked up and around the room, only then did she realize what she'd said. \n\nShe turned bright red and shook her head. Everybody laughed as she faced down. Her daughter sat with her arms crossed and a scowl on her face. Alanza leaned over and whispered for her to behave. As Jasmine looked up at her and was distracted Alanza lifted her hand and gave us all the finger, making everybody laugh again. \n\nThe room went back to normal and everyone continued to eat and talk and have fun. A few minutes later one of the kids came running through the kitchen just as I stood up and he crashed into me with a hot dog in hand leaving mustard and ketchup all over my pants. I wiped myself with a napkin while Alanza laughed.\n\n\"Here, follow me, I'll clean you up.\"\n\nShe grabbed my hand and led me through her house past the normal bathroom to the master bedroom and attaching bathroom, there was a dark wood king size bed with a deep blue comforter. In the opposite corner sat her special chair and sitting in it were the Chip and Dale dolls. I immediately turned away and kept my face neutral as she led me to her personal bathroom.",
        "The bathroom counter had a dual sink with one side perfectly clean while the other was a hectic mix of female products. Past the sinks was a huge walk-in shower with a clear glass and bronze trim door. \n\nThe noise from the rest of the house was muted and we looked at each other in silence for a few moments. Without a word she put me in front of the sink while she grabbed a rag and quickly wet it down. Dropping to her knees in front of me she reached forward and undid my zipper and tugged my jeans open.\n\nShe eyed my black Calvin Klein briefs.\n\n\"Those are underwear you wear when you want somebody to see them.\"\n\n\"Hoped, but not expected.\"\n\nShe raised an eyebrow.\n\n\"And what are you wearing?\" I asked. \"Twenty bucks says it's sexy as hell.\"\n\n\"Just twenty?\"\n\n\"Fifty then.\"\n\nShe hopped up and undid her jeans pulling the sides out, I could see a small black and blue lace panty. I grabbed her hips and turned her, then pulled her pants down a little exposing the back g-string. This close I could smell a light coconut scent on her skin.\n\n\"Yeah, those are definitely panties that you wear to show off.\"\n\nShe turned back around leaving her pants undone, dropping to her knees, \"You owe me fifty bucks.\"\n\nReaching inside my pants she carefully began to clean me up. I could feel the back of her hand against my member but her actions were very matter-of-fact, she simply stretched the material from the inside to allow her to clean up the few small stains. I stood straight and focused my willpower on not getting hard. She shifted her hand to another stain and I flinched, she looked up into my eyes with a small smirk.\n\n\"Everything good?\"\n\n\"Yeah,\" I said hoarsely. \"Everything is fine.\"\n\nThe smile stayed as she turned away and continued to work. \n\nAs she cleaned the last stain she looked up, \"I do you know.\"\n\nConfused, I met her eyes, \"Do what?\"\n\n\"Swallow...\"\n\nMy mouth dropped.\n\n\"At least for the right guy,\" she added.\n\nMouth dry, I asked, \"And are there any 'right guys' in your life right now?\"\n\nHer hand had flipped and was no longer grabbing my jeans but was now stroking my shaft with her palm and fingers. My concentration evaporated and I got rock hard.\n\n\"There's one applicant, so far it looks promising.\"\n\nShe broke our gaze and tossed the rag into the sink, with both hands she tugged my pants wide open, then she hooked my briefs and pulled them below my dick. With one hand she cupped the bottom and angled it to her mouth. Slowly she put the head past her lips and began to gently suck on me. I groaned and had to grip the counter with both hands as her tongue made swirling motions around the head of my cock. She closed her eyes as she took me full into her mouth, slowly taking me all the way and drawing back with the same exquisite care. Moving back and forth each time she picked up the slightest amount of speed. Pulling back completely she swirled her tongue around the head, licking down my shaft then up. Again, she pushed me into her waiting mouth and held me there as she sucked on me.\n\n\"Hey girl, where did you...? Whoa!\"\n\nI looked up to see Michelle at the door wide-eyed with a shocked expression that quickly turned into a quirky smile. Alanza tilted her head sideways to look at her but never stopped sucking, after a few seconds Michelle and I both realized she wasn't going to quit. She pushed back down my shaft and pulled back once more. \n\n\"Uhmmm...\" I stuttered. \n\n\"Damn girl, I know you're enjoying yourself but you need to let me know where you put the candles.\"\n\nAlanza pulled her lips off me and looked back at her crossly with my dick still in her hand, \"Really, right now?\"\n\nLaughing, \"Yeah, right now, not that I don't appreciate what you're doing,\" she looked me up and down, giving me a quick wink. \"And I can definitely understand why, but we got a dozen screaming hyper kids that want cake. So get off your knees and get that cute little ass of yours out here right now and bust out the birthday cake.\"\n\nAlanza turned back to me and rolled her eyes, \"Sorry,\" was all she said as she dropped me and hopped up. Shaking my head, I focused on getting my clothes back in order as both girls watched me. Alanza moved toward Michelle while buttoning her jeans back up. Then the girls went arm-in-arm down the hallways whispering to each other while I followed. Alanza said something and Michelle giggled while looking back at me. \n\nOnce back in the kitchen Alanza got a candle and brought out the cake. The adults called everybody and soon we had the kids around Jasmine while she stood in front of her cake as we sang happy birthday. She was an exact duplicate of her mother, beautiful with a small oval face and long black hair. \n\nI grabbed a piece of cake and found a seat in the living room. After a few minutes Alanza led her daughter to me.\n\n\"Jasmine has something to say to you.\"\n\nAlanza nudged her and Jasmine looked up at me shyly, \"Thank you for the gift.\"\n\n\"No problem sweetie, hope you find something fun to do with it,\" I said. I had no idea what to get her since I hadn't asked anything about her daughter so I'd shoved two $20's in a Jasmine lunchbox and wrapped it.\n\n\"Do you like my mom?\"\n\n\"Jasmine!\" Alanza gasped.\n\nI laughed, \"It's alright,\" I told Alanza. \n\nTurning to Jasmine I said, \"Yes I do, she's pretty cool.\"\n\nJasmine looked at her mom and then at me, \"Yeah, most of the time, except when she wants me to eat vegetables.\"\n\nI laughed as Alanza shook her head in exasperation. \n\nJasmine smiled and looked into my eyes, \"You have really cool eyes.\"\n\n\"Thank you.\"\n\n\"They look just like mine.\"\n\nI nodded, \"Only cool people have green eyes.\"\n\nJust then one of her friends called for her and Jasmine ran away laughing. One of the couples called for Alanza and she turned and walked into the kitchen, her fingers brushing my arm as she passed. \n\n...\n\nI looked at the birthday cake, the candle was still on it, instead of multiple candles there was a single candle in the top corner, eight.\n\n...\n\nTime froze.\n\nI put my cake down and pulled out my iPhone. A quick google search and my heart was hammering. White noise filled my ears and my vision swam. One of the guys sitting next to me looked at me asking if I was okay. I nodded dumbly.\n\nI looked up to see Alanza in the kitchen laughing, she glanced at me and our eyes met. Slowly I reached to my left sleeve and lifted it to the top of my arm exposing my tattoo.\n\nAlanza turned white and froze.\n\nDear freaking lord.\n\nA glass dropped, I looked over to see Michelle staring at my tattoo with the same stunned expression as Alanza.\n\nLooking back at Alanza, I don't know how long we stared at each other but eventually we composed ourselves and went back to normal, or at least as normal as we could manage. I tried to think about anything else but all I could imagine was Jasmine and her green eyes, exactly like mine.\n\nThis was not possible. My mind reeled as the party continued and hours went by. Eventually, people began to leave. As the last child with parents left I saw an older couple talk to Alanza. \n\nSeconds later she called Jasmine, \"Grandpa and grandma want to take you home for the night so they can take you to breakfast and the zoo tomorrow. What do you say munchkin?\"\n\nJasmine squealed and ran away to get her clothes. In minutes she came back with a Disney Jasmine backpack. They said goodbyes and Alanza walked them to the door. \n\nMichelle was the only one left and she stood behind the counter in the kitchen facing me while I sat on the couch in the living room. Neither of us said a word as we stared at each other. \n\nAlanza came back and walked to her, they whispered back and forth and Alanza shook her head. With a last look at me, Michelle nodded and grabbed her purse and gave her a quick hug before she left.\n\nSilence.\n\nAlanza walked to the living room and sat on the opposite love seat, minutes ticked by and neither of us spoke. \n\n\"I don't even know where to begin,\" she said.\n\nI blew out a long sigh, \"Yeah, me either.\"\n\n\"So you're him?\"\n\nI looked into her eyes, \"Yeah, I'm him.\"\n\n\"I suspect you think that I barely remember you from when we served together, but I remember you very clearly, even at the wedding.\"\n\nI met her eyes for a full minute before nodding, \"That makes me feel good. Not sure how else I should feel right now. I suppose we need to clear something up so we each know what we're feeling. Is Jasmine my daughter?\"\n\nShe didn't answer for a for a while. Abruptly she stood and went to the kitchen coming back with two bottles of Blue Moon beer. Handing me one, she took a seat and swallowed half her bottle in one drink.\n\n\"Yes,\" she whispered.\n\nMy mind reeled and I took a long drink, \"Wow. I mean wow. Like I don't even know what to think or feel. Okay, next question and please don't think I'm a dick or anything, but are we sure it's mine?\"\n\nShe looked up from her beer, \"I don't think you're a dick, it's a reasonable question, but yes, I remember that time quite clearly. The time between our little fun with your buddy I had my period, so I know it couldn't be his.\"\n\nThat thought had crossed my mind, I knew the kid had my eyes but I figured it was still possible it belonged to Dean and not me. \n\n\"And I assume I was the only other one it could be?\"\n\nShe smiled, nodding, \"Yes, you are the only other one I was with then, besides the times with you two, I was in a self-imposed dry spell. I hadn't had sex in a while because of deployments and my boyfriend cheating on me while I was gone. That's kind of why I did what I did. Besides being fun, I figured it was a good way to have some hot sex without any drama.\"\n\nI nodded dumbstruck.\n\nWe stayed silent and sipped our beers.\n\n\"Can you tell me what happened?\"\n\n\"What happened?\" she asked, looking up at me.\n\nWaving my hands in the air, \"I mean why didn't you try to find me or whatever,\" I said. \n\nShe looked down at her beer and sighed, \"Look, you were awesome, and while I didn't think you were a jerk and we seemed compatible, I didn't know you. Hell, I didn't know anything about you really, other than you were great in bed.\"\n\n\"When I found out I was pregnant I was already at my new duty station. At first, I freaked out, but then I fell in love with the idea of my daughter and as I saw so many other moms with asshole dads I realized that my situation was perfect. I could do whatever I wanted, I didn't have to fight for child support or give her up weekends or worry that I'd have to explain why daddy didn't want to come get her for the weekend.\"\n\n\"So I told my family and friends I had in-vitro, that I wanted a daughter without a dad.\"\n\nSeeing how many Marine couples I saw fight over the exact things she was talking about made it easy to understand.\n\n\"And you never expected to run into me again,\" I added.\n\n\"And I never expected to run into you again,\" she agreed.\n\nI finished my beer in another swallow, suddenly she looked up, \"Wait, I very clearly remembering you telling me you had brown eyes.\"\n\nI shrugged setting down my bottle on the table, \"I thought it would be too big a clue if I told you the truth. My bad.\"\n\n\"Seriously, do you know how many people have green eyes?\"\n\n\"It's technically the rarest color and I thought it was too much of a giveaway. You seemed to like the idea of an anonymous lover.\"\n\nShe shrugged her shoulders, \"Point.\"\n\nTaking another sip of her beer she shook her head and said, \"I always wondered how she had green eyes.\"\n\n\"So why are you being honest? Why tell me now?\" I asked. \n\n\"For one, you're not stupid. Two it'd be easy to verify if you pushed it. Believe me, I've spent the last few hours wondering what I should do.\"\n\n\"But,\" I prompted.\n\n\"But I've always wondered if I should've given you the opportunity to be her dad. Trust me, if I saw the slightest hint of asshole in you, I'd make you pay, but you've been a pretty good person so far.\"\n\n\"Thanks... I think.\"\n\nShe barked a short laugh, \"I'm terrified this is going to end in disaster.\"\n\nI looked into her face and saw real fear. I realized what was at stake for her, her daughter. This was no joke, this was real, she had no idea what was going to happen, how I was going to act. I needed to calm her down.\n\n\"Look, this is as crazy a moment for me as it is for you. I get how terrified you are. I know only time will prove I'm not lying but I'll do whatever you say. I'm not going to fight for custody, I'm not going to turn your life upside down. I have no idea what to do. I would like to get to know her but I'll leave it to you to decide how that is. If it's as your boyfriend, then that works, if it's some other way I'll deal with that.\"\n\n\"Is there another way?\"\n\nI thought about it for a second, \"Not that I can think of, but we can figure something out.\"\n\nShe raised an eyebrow, \"My boyfriend?\"\n\n\"Uh... well... I mean, hell I don't know. Look, we actually do know each other if you think about it.\"\n\nShe shrugged, \"True.\"\n\n\"We can take it slow if you want.\"\n\nShe was taking another sip when she exploded with laughter, spewing beer across her coffee table, she kept laughing for a full minute before she got herself under control.\n\nI looked at her perplexed, \"What's so funny?\"\n\n\"You're my baby daddy and now you want to take it slow?\"\n\nI thought about it and chuckled, \"When you put it like that...\"\n\n\"Yeah, exactly.\"\n\n\"Well still, we can take it at whatever pace works for you. I won't push.\"\n\nShe nodded, \"Thank you.\"\n\n\"And look, as far as money...\"\n\nShe held up a hand, \"I don't want to talk about that until I know what you're going to do. You could commit to money right now and then change your mind, I wasn't joking, I really don't want to get in a court battle with you.\"\n\n\"Fair enough, but let me finish.\"\n\nShe sighed then nodded.\n\n\"I've saved quite a bit of money from deployments and stuff, I invested all of it. I have more than $400,000 in savings right now. I get that you don't want to get into a fight, so how about we keep it simple.\"\n\nI pulled out my iPhone, \"I'll call a lawyer on Monday. I can transfer $150,000 to a trust fund for her immediately. She can use it for college or anything she wants when she turns 18. I'll even have a provision that she can take some out to buy a car when she gets her license.\"\n\nI could see the doubt in her face, \"I know you don't want to battle over money. I even understand why, things get ugly real fast, but you have to admit, this is the best thing for your daughter... I mean my daughter... I mean our daughter. Dear God I can't believe I just said that.\"\n\nLaughing, \"It's a world shocker huh?\"\n\nI nodded.\n\n\"I remember the first time I said it and how much it rocked me,\" she said.\n\nShe continued, \"Fine, you can set up a fund for OUR daughter. Not to be a bitch, but I'm going to hold off on my feelings and how this will play until I see that. We'll see if you're real or not.\"\n\n\"Fair enough.\"\n\nShe finished her beer and walked into the kitchen to get new ones and a few paper towels to clean up the mess she made. After wiping everything down we sat in silence trying to adjust to the new dynamic in our lives.\n\nAfter a while she looked at me, \"Stupid off the wall question, but do you know your blood type?\"\n\n\"Yes, O negative.\"\n\nShe snorted, \"Yep, you're definitely the daddy, so is she, found that out last year. One of the rarest types there is.\"\n\n\"How the hell did you find that out?\"\n\n\"She wanted to give blood, but she's too young, but we found out her type and now she can't wait until she's old enough. You're a uni...\"\n\n\"Universal donor, yeah I know,\" I said finishing her sentence. \"We have the rarest type but we can give to anybody, it's freaky.\"\n\nWe talked some more and eventually I left with a simple goodnight. She admitted that she'd originally planned on asking me to stay the night but after this revelation we both agreed it might be best if I didn't. Strangely sex really wasn't on my mind.\n\nThe next week, I contacted a lawyer and made the arrangements. I sent a single text everyday telling her what I'd done. On Friday we met at the lawyer's office and went through the paperwork. The money went into an account that could only be touched by Jasmine and her mother. After we finished, we went outside and stood in front of each other on the sidewalk. \n\n\"I'm impressed,\" she said idly watching as cars passed us on the busy street. The cool afternnon air highlighted the aroma of the local coffee shop mixed with standard street smells.\n\n\"Why?\"\n\n\"You did what you said you would.\"\n\n\"I always do.\"\n\n\"I believe you after that.\"\n\n\"It was nothing.\"\n\n\"I'd hardly call that nothing.\"\n\nI shrugged, pointing to the coffee shop I asked, \"Do you want to grab something?\"\n\nIn response she reached up and grabbed my shirt pulling me toward her, her lips locked onto mine and we kissed. Her tongue danced between my teeth attacking my tongue, I reflexively put my hands on her ass and squeezed it tight, pressing her body to me. She went with it and moved her hands around my neck holding me to her. We kissed for minutes without regard for the numerous people walking around and by us. When we broke, we were both flushed and winded.\n\nShe looked around, checking up and down the street, then grabbed my hand and hauled me to her car. She slammed the car in reverse then sped out the driveway like her house was on fire. As she drove she held her phone. \n\n\"Siri... Text work... Won't be back, taking afternoon.\"\n\nShe drove a block and pulled in at a huge fancy hotel and jumped out practically yanking me along the way. She snatched the ticket from the valet and headed inside while pulling out her wallet. When she got to the front counter, there was a small Hispanic woman asking how she could help us. Alanza pulled out her credit card and drivers license, then pulled a $50 bill from her wallet.\n\n\"The money is yours if I get a card key to a room in the next ten seconds, fill out the information based on my ID and charge it to me, then send it to us when you're finished.\"\n\nThe woman looked at me, I shrugged, she paused only a second then she grabbed a key card and swiped it through a reader and handed it to Alanza.\n\n\"Room 107, right around the corner, king size bed.\"\n\nStill holding my hand Alanza pulled me along, over her shoulder she yelled out, \"Have them bring two cheeseburgers with fries, two apple juices, 30 minutes.\"\n\nShe hurried to the room and pushed the door open. Dragging me inside, she tugged my shirt off and threw me on the bed. She took her own clothes off, fast and rough. Beginning to match her intensity, I unbuttoned my jeans. As soon as I did she grabbed the bottoms and pulled them down. In seconds, our clothes were all across the floor and her naked body crashed into mine.\n\n\"I'm going to fuck you all afternoon,\" she whispered as she bit, nipped, and kissed my neck and chest. \"I'm going to wrap my lips around your dick and let you cum in my mouth.\"\n\nI groaned as she kept licking and teasing my body, she drew her nails down my sides making me hiss. \n\n\"I want to feel your tongue on my pussy.\"\n\nHer dirty talk had me hard, she flipped around and straddled my head as she took my dick in her mouth. She spent a minute just sucking on the head as she ground her pussy into my face. The heady scent of her arousal filled my nostrils and I reached around and cupped her ass as I used my tongue on her slit and gave her a long slow lick.\n\nOur first time became a contest, each of us attempting to see who could get the other off first. I lost after she started using her fingers in a circular motion at the base of my dick. When I came she kept sucking as my hips thrust forward, pumping into her mouth. I almost collapsed from pleasure but despite my defeat I got her off less than a minute after I came in her mouth. She leaned off my dick and pulled back straddling my face completely. Her hips thrust and she began moaning nonstop, her cries getting higher as she moved faster. When she came, her legs clamped around my head before she relaxed on the bed. ",
        "Minutes later, I got even. As she lay face down on the bed I rolled over and pinned her, entering her from behind. Gasping, she turned her head and grabbed a pillow to bite, stifling her moans as I steadily thrust deep into her bringing her to climax as her body quivered. I was sweating and dropped down next to her after I finished. Weakly, she pulled herself into my side and we lay there panting.\n\nA knock on the door stirred us, she hopped up and opened the door unashamedly. I ducked under the comforter as she ushered the busboy inside to set the food down and also giving her back her drivers license and credit card. She winked at me and I rolled my eyes as she signed for the food and a tip. With a last look at her nudity the busboy smiled shyly and left the room.\n\n\"Nice to see you haven't changed.\"\n\n\"Not at all, I have to be a bit more careful since I have a kid but I still wear thong bikinis and show off whenever I can.\"\n\nShaking my head, I sat up as she handed me a cheeseburger plate.\n\n\"I've actually flashed a few busboys since our time.\"\n\n\"Really?\"\n\nShe nodded, \"It's kind of become a thing, after that time in the hotel I realized it was a safe way to do a little showing off. I occasionally go stay at a nice hotel on a weekend, I always choose one with a balcony so I can lay out in my thong panty in peace. I get room service and I'll either answer the door naked or in my underwear depending on my mood.\"\n\n\"Where have you been all my life?\"\n\nShe sighed, \"I know, it's so hard to believe that we're back in each other's lives. I've never met a guy that understands me like you do. Sometimes I don't think you're real.\"\n\n\"Likewise.\"\n\nWe ate in silence for a minute.\n\n\"I am curious, who's Dale? Do I know him?\"\n\nI shook my head, \"I think so, he was and still is my best friend. Do you know Gunny Montoya?\"\n\nHer eyes went wide, \"Oh my God!\" she shrieked, rocking back and forth laughing. \"That's Dale? God, he really does look like a stripper too.\"\n\n\"Yep, Gunnery Sgt. Dean Montoya, and what do you mean, looks like a stripper?\"\n\n\"I can't believe it! I never suspected either of you as my boys.\"\n\nShe explained how she considered the names a combination of stripper names and the Disney characters we'd copied.\n\n\"Do we disappoint?\"\n\n\"The opposite, I've always imagined good looking but I figured the reality wouldn't match. You both exceeded my expectations, he's cute and you are too damn sexy and strangely both of your personalities match my expectations too. You each have a good sense of humor.\"\n\n\"Thanks.\"\n\nStill shaking her head, \"God, to think I've worked out and had normal conversations with him, and here he's seen my ass totally naked and I've even sucked on his dick and never knew it.\"\n\nI laughed, \"Yeah, it's a trip.\"\n\n\"I wonder what he thought every time he saw me.\"\n\nI shrugged, \"We've talked about it a few times while drinking, we just laughed. We both ended up at different stations after you. He left in six months, I left a year later. We occasionally ran into each other and stayed best friends. He came back here six months ago and I only got here last month but he was the first friend I connected with.\"\n\n\"Does he know about Jasmine?\"\n\nI nodded, \"I told him the whole story, even told him what you told me about it can't be his. He just nodded and said 'you could do a lot worse.'\"\n\n\"That's a glowing recommendation,\" she said sarcastically.\n\nI smiled, \"It actually is, he likes you and thinks we're good together. He also wants to meet my daughter.\"\n\n\"I don't see why not. We can get together this weekend if you want.\"\n\n\"Cool, you like motorcycles?\"\n\n\"I've only rode on the backs with boyfriends but yeah, why you have a bike?\"\n\n\"I have multiple bikes, my life pretty much revolves around motorcycles, street and dirt, so be prepared for that.\"\n\nShe shook her head, \"Unbelievable.\"\n\n\"What?\"\n\n\"Jasmine is in love with motorcycles. She wants a dirt bike, she'd love to go riding with you.\"\n\nI stared at her for full minute, \"I am so loving my daughter already.\"\n\nSmirking, \"Yeah, she's a little hellion, stubborn, athletic, a total tomboy. She loves basketball and has been wanting a dirt bike so bad it's all she's bugged me about for six months.\"\n\n\"Why didn't you get her one for her birthday?\"\n\n\"What do I know about dirt bikes? Even if I got her one I couldn't teach her to ride.\"\n\n\"Can I?\"\n\n\"I don't see why not.\"\n\n\"Hell yes.\"\n\nAlanza giggled.\n\n\"What?\"\n\n\"It's just so weird, I almost told you that you hurt my kid and I'll kill you but then I thought, hell, it's your kid too.\"\n\nI paused to think about that, \"Yeah, that still trips me out. It's going to take a while to get used to that.\"\n\nShe nodded.\n\n\"Speaking of, what do you want to tell Jasmine?\" I asked.\n\nShe blew out a breath, \"I've been thinking about that. I'm not sure. Let's play everything by ear for a while.\"\n\nI nodded.\n\nShe smiled, \"You genuinely seem to be a good guy. The way I figure our relationship will happen is this. Either we're going to connect and maybe end up together and then it'll be an easier conversation when she gets older OR we're not and then we'll have to figure out some way to keep you in her life OR you'll hate both of us and leave and then it won't be an issue.\"\n\nI thought about her words, \"That's remarkably succinct. I guess in only one scenario is it a real problem, so why make things more difficult until that happens.\" \n\n\"That's what I thought.\"\n\n*****\n\nThe next few weeks flew by, I spent a few nights a week and every weekend hanging out with Alanza and Jasmine. I took them out on my motorcycle and Jasmine squealed with delight. Every time she saw me she bugged me to take her for a ride. I spent time teaching her basketball and helping her on homework. She was crazy smart for her age and was always laughing. \n\nOne evening as Alanza was making dinner, Jasmine and I were doing her homework. She whispered to me, \"We need to talk.\"\n\nI raised an eyebrow. \"We do?\" I asked in a normal voice.\n\n\"Shhhhhh, keep it down. Mom can't know, and yes.\"\n\nFighting a smile, I bent low and whispered, \"My bad. What do we need to talk about?\"\n\nShe kept looking at her mother, only occasionally flicking her eyes toward me, \"You like my mom, right?\"\n\nI nodded, \"Yeah.\"\n\n\"Ok then, we're going to trade.\"\n\n\"Trade what?\"\n\nRolling her eyes, \"My mom silly. Pay attention.\"\n\nControlling my laughter, \"My bad! I'll try harder.\"\n\nShe nodded, \"Try to keep up.\"\n\nUnreal.\n\n\"So, what are we trading?\"\n\n\"I want a dirt bike, like your motorcycle but better.\"\n\nI raised an eyebrow, my motorcycle was a fully tricked out Harley with custom paint and I could probably sell it for $50k, \"Better than my bike?\"\n\n\"Yeah, better cause it'll be mine, I'll let you teach me how to ride.\"\n\n\"Thank you for that,\" I said, keeping the sarcasm from my voice.\n\n\"You're welcome.\"\n\n\"What do you want me to do?\"\n\n\"My mom likes you. I want you to talk her into giving me a dirt bike for Christmas.\"\n\n\"And what are you trading me?\"\n\n\"I'm going to talk to mom about letting you sleep over all the time.\"\n\n\"All the time?\"\n\n\"Yeah, I'll tell her to let you bring your clothes and stuff so you don't have to leave, you can be over here all the time.\"\n\nI was stunned. This conversation had taken a crazy left turn.\n\n\"Are you okay with that?\" I asked.\n\n\"Yeah, it'll be like you're my dad, you can help me out with stuff and you make mom happy. She always sad when you're not around, she can be a real bitch.\"\n\n\"Jasmine,\" I hissed. \"Don't talk like that.\"\n\nShe glared at me, \"Mom says 'bitch' all the time, why can't I?\"\n\n\"Because it's not a good word.\"\n\n\"But she made me clean my room when you were gone last night. She gets all crabby when you're not here.\"\n\n\"You still don't talk about your mother like that, or anybody else for that matter.\"\n\nShe was still frowning.\n\n\"If you promise to stop using that word we have a deal, I'll talk to your mom.\"\n\nHer face lit up, \"Yes, it's a deal,\" she said, sticking out her hand.\n\n*****\n\nOne Friday, my phone vibrated.\n\nAlanza: Kid's at grandparents for weekend. Get your ass over here seven pm. Don't be late. Bring Dean.\n\nIntriguing, I wasn't sure what she had in mind but I decided to play along.\n\nI knocked on the door at seven sharp, Alanza opened the door wearing only a pair of white tiger striped bikini panties.\n\n\"Uhmmm.\"\n\nShe grabbed my hand and pulled me inside, \"Hurry up! Where's Dean?\"\n\n\"He's going to be a few minutes late.\"\n\n\"Oh good, that'll be perfect.\"\n\nShe pushed me against the wall and kissed me. Stunned by the turn of events, I just stood there reflexively cupping her ass. After we broke, she brought me to the bedroom. \n\nWow.\n\nHer friend Michelle was centered in her bed and tied spread-eagle. She was completely naked and had a pink ballgag in her mouth. Her eyes tracked me as I walked into the room and stood at the bottom of the bed.\n\nAlanza put an arm on my shoulder, \"She wanted to experience a threesome, I told her if she wanted to use my boys it'd have to be the same way I did it.\"\n\nI glanced at Alanza, \"Are you asking me to have sex with your best friend?\"\n\nShe looked back at me, \"Have sex? No, not at all, I'm asking you to fuck her.\" \n\n\"Uhhh, are you sure about this?\"\n\n\"Wild huh?\"\n\nShe moved behind me and put her hands around my waist, placing her chin near my ear she whispered, \"I'm getting really turned on by the idea, I want to watch you fuck her till she passes out.\"\n\nWe both stared at Michelle. \n\nShe was beautiful. Not quite as beautiful as Alanza but still a nine by anybody's scoring. She had brown eyes and long brown hair with a heart shaped face and full lips. Her body wasn't as perfectly toned as Alanza but she was noticeably fit, her full hourglass figure was tight with large C cup breasts and small light brown nipples that were hard right now. All in all, she reminded me of Jennifer Lopez.\n\nHer eyes tracked mine and she shifted. Her pussy was waxed smooth and glistened with arousal. Her arms and legs were stretched taut by the ropes that bound her to each corner of the bed. \n\nAlanza gripped my shirt and slowly pulled it up and over my head. I stood there, eyes locked to Michelle as she opened my jeans and then pulled my pants down. I stepped out wearing just my black briefs as Alanza caressed my body. \n\nI watched Michelle as she whimpered and squirmed, I moved between her legs bringing my face within tongue distance from her pussy. Her eyes met mine as my warm breath touched her skin, goose bumps formed and she gave a frustrated shake of her head and pushed her hips up trying to get me to lick her. \n\n\"Is this what you want?\" I teased.\n\nShe nodded her head in frustration.\n\n\"You have to ask for it.\"\n\nShe groaned and tossed her head back and forth, she eyed the ropes and futility tugged at them before looking back at me.\n\n\"Grrrrrrrrr.\"\n\n\"Sorry girl, couldn't understand that.\"\n\nI used the bare tip of my tongue to tease her slit.\n\n\"Mmmmmmm,\" she whimpered, shaking her head frustrated.\n\nDeciding I'd teased her enough, I used my tongue to give her a long slow lick up then down her pussy. She sighed and her body relaxed while I continued to lick her. She laid her head back as I teased her lips, up then down while moving back and forth up the sides and down the center. Her cries of frustration turned to moans of pleasure and her hips made gentle little thrusts against my tongue. I took my time as I went down on her. Her excitement built and she got wetter and wetter. Her hips moved faster and her moans became a constant whimper. She brought her head up to watch me and I looked into her eyes while I pushed my tongue deeper inside her. Minutes passed and soon I was rewarded with a strangled cry while her body locked. She spasmed and I gave a last push with my tongue drawing a muffled scream.\n\nAs she lay helpless from cumming, I moved up until we were eye-to-eye. She knew what was coming next but could only pant and shift her head to watch me. I pressed into her an inch and she closed her eyes and flexed her hips upward. Pushing into her all the way she relaxed and and looked at me. Slowly I moved inside her, her gaze stayed locked to mine as I drove in and out, keeping our pace steady, she could only give little thrusting movements with her hips but she matched me perfectly. Minutes passed as we stayed in motion, steadily pressing our bodies against each other. \n\n\"You have no idea how sexy you both look,\" Alanza said.\n\nWe looked over at her to find her sitting on her \"special\" chair. She was leaning back with her legs spread wide, one hand idly tracing her panties and the other holding her iPhone with the camera pointed at us. \n\n\"Smile,\" she said.\n\nI shook my head in exasperation at her as Michelle flipped her off.\n\n\"Don't be mad babe, had to get this for posterity, you are a sexy bitch when you're turned on.\"\n\nMichelle glared at her and I decided to mess with her. I went extra deep and hard into her and her body tightened and she let out a muffled shriek. I kept pushing deeper and faster as her muted moans rose in volume and her hands grasped for anything. I could feel her building energy to match my own. Alanza moved closer to us, holding her phone, making it obvious she was recording us. That sent me over the edge and with my own moan of excitement an orgasm hit me and I released inside her. I pushed extra hard as I finished and Michelle reached her own peak, closing her eyes, she threw her head back as she shook from her own climax. \n\nI heard a knock on her front door.\n\n\"Oh, that's got to be Dean,\" Alanza said, jumping up and running out of the room. The fact that she was only wearing her panties didn't seem to faze her and a minute later she dragged Dean into the bedroom. \n\nI'd stood up and put my jeans back on and was relaxed in the chair as Alanza pulled him in front of the bed, she was all smiles as she stood next to him with an arm on his shoulder in a nonchalant way, \"So Michelle here wanted to experience a little fun with you guys, what do you think Dean? You up for it?\"\n\nDean looked back and forth and shook his head, with a chuckle he said, \"I swear, there's never been a dull moment since he met you.\"\n\nAlanza wiggled her eyebrows and moved back to me, she squeezed behind me on the chair as Dean undressed. Michelle flashed a look at Alanza as Dean moved between her legs. Michelle tugged against her ropes but then Dean moved on top of her and started kissing her body. In seconds Micheele was caught up in excitement and we watched as Dean took his time and fucked her. \n\nAlanza idly reached around and stroked my chest. Halfway through their session her lips nipped my ear and she whispered, \"For the record, she was expecting a threesome with us, she didn't know I made Dean a part of this.\"\n\nI froze and looked back at her, \"Are you serious?\"\n\nShe bit her lip and nodded.\n\nI turned back and watched the scene with new understanding, Michelle may have been tied and not have expected Dean but she seemed to be enjoying herself. Like her session with me she thrust her hips as much as possible and her moaning was continuously. She did flash a few dirty looks toward Alanza but she didn't truly thrash or put up a fight. \n\nAfter their solo session Dean stood and helped me untie her. Alanza undid the ballgag and kissed Michelle on the lips.\n\n\"Now for the finale,\" Alanza said. Motioning for me to strip back down.\n\nMichelle looked back and forth between us but didn't say a word as everybody positioned themselves. Like years before with Alanza we put Michelle on all fours between us. We took our time and Alanza stayed on the bed as I used her mouth and Dean took her doggy style. Halfway through we swapped positions but then Alanza moved underneath Michelle in a sixty-nine position. I felt her tongue as I moved inside Michelle and for a while enjoyed the slow licking of Alanza as she used her tongue on Michelle while I was inside her. Eventually we all came and fell on the bed in a heap.\n\nAfterward the girls threw on t-shirts while Dean and I put on jeans. We moved to the living room and Alanza grabbed us some Blue Moon beers while Dean took a place on the loveseat. I sat on one end of the main couch with Alanza in the middle and Michelle on the other end. \n\n\"Well,\" Michelle said.\n\n\"Yeah, well,\" I replied.\n\nFor a second, we all eyed each other nervously. Suddenly everybody burst out laughing at the tension in the room.\n\n\"You bitch,\" Michelle said, pointing at Alanza.\n\nShe giggled, \"Don't know what you're talking about babe.\"\n\n\"What?\" Dean asked.\n\n\"I agreed to a threesome with them,\" Michelle replied. \"You were not part of the deal.\"\n\nDean's eyebrows raised in worry, \"Uhhhhh...\"\n\nMichelle shook her head and raised a hand to stop him, \"I'm not mad, you're okay. It just caught me a bit off-guard.\"\n\nDean still looked uncertain.\n\n\"Look love, I promise we're cool! Hell, I'll even do you again before you go if you don't believe me. Just the two of us.\"\n\nDean raised an eyebrow, \"I'll take you up on that.\"\n\nMichelle held up her beer in a toast as they both took a drink.\n\n\"This is an interesting turn of events,\" I said.\n\nEveryone nodded.\n\n\"Who'd have thought all those years ago you chasing down a fellow Marine would lead to this?\" Dean said.\n\nAlanza face screwed up questioningly, \"What do you mean?\"\n\n\"I just mean that it's crazy how he semi-stalked you and now you guys have a kid together. I'm going to have to try the sex survey approach myself,\" Dean said.\n\n\"Wait! Did you make that survey for me?\" Alanza asked.\n\nI glared at Dean, \"She didn't know that part, dude.\"\n\n\"Oh shit.\"\n\nSheepishly, I looked at Alanza, \"Yeah, I was using it specifically for you.\"\n\nI spent the next few minutes explaining how we'd seen her and what I'd done and how I'd set it all up. Afterward both girls laughed.\n\n\"I'm flattered, that was a lot of effort just to get me.\"\n\n\"Impressive psychological warfare, that took some good effort and manipulation,\" Michelle said. \"Have you ever used that technique again?\"\n\nI shook my head, \"No, it wouldn't have felt right.\"\n\n\"I feel privileged,\" Alanza said. \"That is the most original approach I've ever heard of.\"\n\n\"Thank you.\"\n\n\"It's a good thing he didn't use it again. As weak as his pullout game is, he'd have kids all over the country,\" Dean said.\n\n\"Excuse me.\"\n\n\"You heard me dude, you need a better pullout game.\"\n\n\"My pullout game is fine,\" I said.\n\n\"Welllllll...\" Alanza said.\n\nI turned to Alanza, she was turning her hand back and forth in a so-so fashion.\n\n\"Hey,\" I said.\n\nShe shrugged, \"He's kind of right, your pullout game is a little weak. Just saying.\"\n\nI sat there with my mouth wide open trying to think of a retort.\n\nMichelle added, \"Hate to say it but there is evidence to what they're talking about.\"\n\nMy voice raised, \"This is not funny.\"\n\n\"It's true babe. I love my daughter more than anything in the world but let's face it, if your game was strong she wouldn't be here,\" Alanza said.\n\nGiggling, she turned to Michelle and Dean, \"I mean, I grabbed his ass and moaned Papi and it was over. We're lucky we didn't have twins he let loose so hard.\"\n\nMichelle and Dean laughed as Alanza grinned at me, I grabbed her and flipped her over my knee. She tried to get up but I pulled an arm behind her back and held it there. I lifted her shirt exposing her bare ass and brought my hand down in a hard swat. She shrieked and squirmed as I swatted her a few more times. By the fourth one she was moaning and twisting her legs as I kept her pinned with one hand and paddled her with the other. After eight strokes her butt was pink so I stopped.\n\nShe was breathing hard as I asked, \"Any more smart-ass comments you want to make?\"\n\n\"No baby, none, I'll be good,\" she said shaking her head.",
        "I let her go and she got up with a glazed look in her eyes, she reached down and unbuttoned my jeans and tugged them midway down. She lifted her shirt over her head and tossed it to the side as she straddled me. \n\nMy dick had gotten hard during the spanking. Without a word, she moved on my lap and shifted her body to place me at her entrance. With a shudder she slowly impaled herself fully on my length and began to ride me. She held her arms on my shoulders, keeping me motionless as she used her legs to push herself up and down. She looked over to Michelle then Dean then back at me then rolled her head back while gripping me tight. Small groans escaped her lips as she worked herself on my shaft. \n\nLooking over, I saw Michelle use a finger to beckon Dean, he moved toward her as she slipped off her shirt and then undid his jeans as he stood in front of her. Alanza shifted her body, pressing against me as she watched Michelle spread her legs and wrap them around Dean as he slid into her. Alanza's speed increased as we watched the pair of them thrust and press against each other. Michelle wrapped one arm around his neck and put the other on his ass as Dean cupped her ass with both hands, they started moaning and Alanza grabbed my chin and forced a kiss from me as she dug her nails into my chest. \n\nMinutes passed and she never broke our kiss, her hands never stopped caressing and alternately scratching my chest and back. I felt her buildup before mine and her sudden orgasm had her body quivering. Feeling my own need growing I put my hands on her butt and thrust harder. Seconds later I burst inside of her and threw my head back. \n\nAs we relaxed Michelle and Dean increased their speed to a rapid frenzy and with a cry Michelle's body froze at the same time as Dean. Their muscles straining against each other as they finished and dropped to the couch in each other's arms.\n\n*****\n\n\"MOM, OH MY GOD MOM, HURRY UP AND WAKE UP, YOU HAVE TO SEE WHAT SANTA BROUGHT ME!\"\n\nJasmine burst through the bedroom door screaming and hopping onto the bed next to us. I groaned and buried my face in a pillow.\n\n\"What time is it?\" I mumbled.\n\n\"Five in the morning,\" Alanza murmured back.\n\n\"MOM, HURRY UP.\"\n\nJasmine was pushing and tugging at me and Alanza as we tried to come to our senses.\n\n\"Ok baby, just give us one minute and we'll get up. Do me a favor and go hit the power button on the expresso machine, ok.\"\n\n\"Fine Mom, but hurry up,\" she said as she bolted from the room.\n\n\"You've got to be kidding me,\" I said.\n\n\"Don't look at me, she's half your kid you know. Besides, you should be happy, this is almost an hour later than last year.\"\n\n\"You've got to be kidding me,\" I repeated.\n\n\"Welcome to kids and Christmas, now come on lazy bones, get up.\"\n\nHer warm body draped on top of mine and a hand playfully slapped my butt. I twisted and lifted up then flipped over underneath her and gave her a good morning kiss with my own slap on her ass.\n\nShe slept in her panties without a shirt so as she got up I reached over and pinched a nipple.\n\n\"None of that, wake up and let's see what Santa brought the munchkin.\"\n\nI stood wearing my black sport briefs and we each threw on a sleeveless gray USMC shirt. I had to buy extras because she liked to wear them after I did. We walked out to Jasmine running around the living room in her Wonder Woman pajamas next to a bunch of opened presents and discarded wrapping. The boxes held a full set of motorcycle riding gear and next to the tree was a shiny new dirt bike.\n\nAlanza glared at her, \"Jasmine, you didn't wait for us to open presents?\"\n\n\"I was going to Mom, but you were so cranky last year and I just couldn't help it. I only opened mine.\"\n\nI shook my head at her child logic and Alanza rolled her eyes.\n\nWith a sigh, \"Well, let's see what you got.\"\n\nJasmine showed her all the toys and chattered nonstop about her new dirt bike.\n\n\"You're going to take me out riding today aren't you?\" she pleaded.\n\nThey both looked at me and I nodded, Jasmine squealed and ran over giving me a big hug. She rushed back to the tree and grabbed a small package and brought it to me.\n\n\"Here, open your present from Mommy, I helped wrap it,\" she said deliberately blinking both eyes.\n\nI took it from her, \"You okay?\"\n\n\"I'm winking,\" she whispered loud enough that her mom heard.\n\n\"Ohh, got it,\" I winked back at her.\n\nI opened the small box and inside was a key, I looked up at Alanza.\n\n\"It's to the house.\"\n\n\"So that I can come in when I want?\" I said questioningly.\n\n\"So that you can live with us?\" she said shyly.\n\n\"Yeah, then I can go riding all the time and you can cook because you don't cook as many vegetables as Mom and cause you're like supercool and Mom is so much more relaxed around you,\" said Jasmine.\n\nI laughed at Jasmine's jabbering and I hugged them both.\n\n\"I can't move in quite yet though.\"\n\nThey both frowned at me. I went to the tree and pulled out a box the size of a basketball. I handed it to Alanza. She was still frowning at me when I told her to open my gift.\n\nWarily she tugged the wrapping to find a smaller box inside, her eyes went wide as she pulled out the jewelry box and opened it to find the platinum ruby and diamond ring inside.\n\n\"I figure I need to know this before I move in. I can have a long engagement but I want to know it's going to be toward something.\"\n\nI got on a knee in front of her, \"Would you marry me?\"\n\nTears fell from her eyes and she nodded. I took the ring from her hand and placed it on her finger. Then she wrapped her arms around my neck and squeezed me hard, while Jasmine wrapped her arms around both our waists.\n\n\"This is so cool, now I'll have two parents like everybody else. Can I call you Dad? Mom, is it all right if I call him Dad? Oh my god, this is so cool. Are we going to live here or are we going to move? Where are we going to live now Mom?\"\n\nLater that morning as we all wound down, Jasmine fell asleep on the couch so I scooped her up and carried her to her room and tucked her in. Alanza and I went back to our room and she locked the door behind us. I looked at her as I got into bed, she stripped off her shirt and panties then snuggled next to me.\n\nWe made love slowly and tenderly. She took control quietly mounting me and riding me underneath the sheets. Our kisses were soft, sensual, and long as we gently rocked against one another. She pressed her body to mine as I held her tight.\n\nAfterward we lay side by side, her head nestled into my arm, as I gently stroked her hair. \n\n\"When are you going to move in?\" she asked.\n\n\"Is this weekend good?\"\n\nShe nodded, \"Mom and dad want Jasmine for the weekend so that'll be perfect.\" \n\n\"Great, you can help me pack and load.\"\n\nShe scoffed, \"Yeah right, that's minion work, I don't think so.\"\n\n\"You're not going to help me?\"\n\n\"Ask a friend.\"\n\n\"Dean's out of town for the holidays but I think my friend Alex can help.\"\n\n\"Oh, he's the cute one that looks like he works out 24/7.\"\n\nI nodded.\n\n\"I won't help but I will wear my thong bikini and a tanktop when you guys move everything in.\"\n\n\"You're so bad,\" I laughed.\n\n\"And you love it.\"\n\n\"I do.\"\n\nLater on we woke up again with her nestled in my arms. I nibbled her neck and ears to gently wake her up. \n\n\"Stop that,\" she whispered huskily. \"Or I'll start doing things that will wake the neighbors.\"\n\n\"I can always put something in your mouth to keep you quiet.\"\n\n\"I'm sure you would,\" she giggled. \"That reminds me, I have another Christmas gift for you.\"\n\nI propped myself up on one elbow as she reached across the bed to her nightstand. Opening a drawer she pulled out a small red envelope. \n\nI eyed her as she handed it to me, \"What's this?\"\n\n\"Open it and see.\"\n\nTeasingly, I pulled the cover below her tits as I tore the envelope open. I traced a finger across her hardening nipple as I noticed five business cards, four of them were red, one was pink.\n\nI pulled a red one out, in big bold letters it said:\n\nFuck Toy Coupon\n\nGood for 24 hours.\n\nUnderstanding flooded me and I looked into her eyes, \"So this means...\"\n\nEyes gleaming, she said, \"That anytime you use that coupon I'll be your personal fucktoy for the next 24 hours. No holds barred, we can have threesomes, you can tie me up, you can make me take off my clothes in public. Anything you want.\"\n\n\"And the pink one?\"\n\n\"Is mine. If you accept the red ones I keep the pink one and same rules apply.\"\n\n\"Hmmmmm, anything goes?\"\n\n\"Anything,\" she said.\n\n*****\n\n\"The munchkin's staying at a friend's house tonight so you're taking me out,\" Alanza said.\n\n\"Cool, date night. Where do you want to go?\"\n\nLet's take the motorcycle and have a nice dinner then go to a dive bar or something. I'll wear something slutty,\" she laughed.\n\n\"That's my favorite type of outfit,\" I said.\n\nLater that night I dressed in blue jeans, a black long sleeve affliction shirt and my motorcycle cut and waited in the living room while Alanza got dressed. She liked to wait until after I dressed before she got ready, she always wanted to surprise me and see my initial reaction to her \"adult\" outfits. I read a book on the kindle app on my iPhone while I waited for her to finish. \n\nI lost track of time as I read until she cleared her throat making me look up. Wow, she was stunning. She wore a black suede halter top that showed most of her boobs, a matching black suede miniskirt that was liable to get her escorted out of most public establishments if she bent over, and black thigh high boots. Her hair flowed curly and free and she wore dark red lipstick. The clothes and her natural dusky overtones gave her a sultry vibe that bordered on making me drool. She was a vision of sex appeal.\n\nI went to the garage and pulled out my Harley as she walked to the sidewalk. When she hopped on the back I caught a flash of red silk panty before the she was able to sit and adjust herself. I once asked her about her habit of bright colored underwear. She told me when she wears skirts, she wants people to know when they see her panties. With black or another dark color, they can never be sure, but if she wears pink, red, or white, they'll damn well know when they catch a flash.\n\nWe went to eat at a local steakhouse and she ordered a double Crown Royal on the rocks with her meal. I loved it when she was a little tipsy, our sex was usually wild on those nights. We laughed, talked and had fun as we had our dinner. Afterward she still wanted to stay out so we drove around on my bike until she pointed out a pool hall. We went inside and got a table and I got her another Crown on the rocks while we shot a few games.\n\nAfter a while she came and stroked a finger on my arm as I was taking a shot, \"I want her.\"\n\n\"Huh, want her who? what are you talking about?\"\n\nWe were in the back corner of the hall and she tilted her head toward a couple a few tables away. A mousy brown-haired girl in a skirt was playing with a guy wearing a local college hoodie. \n\nI stood up after my shot, \"Well, she looks like she's occupied tonight. The way that guy is acting I assume they're on a date.\"\n\n\"Yes, but have you paid attention to them?'\n\nI shrugged, \"Not really.\"\n\n\"Watch.\"\n\nI did what she said while we played and began to see what she was hinting at. Even though they seemed to be on a date the guy was pretty much ignoring the girl, he'd talk and never listened to anything she said or paid her any attention. He was on his phone texting at least half the time. The looks on the girl's face ranged from exasperated to boredom. \n\n\"I see what you mean, but when you say want her, what the hell are you talking about?\"\n\nShe raised an eyebrow at me and we stared at each other for a full minute in silence.\n\n\"Oh boy,\" I muttered.\n\n\"I'm going to bring her over here.\"\n\n\"How?\"\n\n\"Watch, I'm going to get another drink and pretend to know her and have her join us for a few minutes. If she wants to stay there, she won't play along.\"\n\nI shrugged nonchalantly, \"True.\"\n\nI watched Alanza walk over to her and suddenly \"recognize\" her, she gave her a hug and I saw her whisper in the girls ear. Seconds later they went to the bar and brought back drinks to our table.\n\n\"Thomas, this is Kristen, Kristen this is Thomas,\" Alanza said.\n\nWe shook hands and I went back to shooting while the girls talked. Up close Kristen was very pretty, she had lightly tanned skin. She was smaller than Alanza and not quite as toned but was slim with a good body. She had nice legs and C cup boobs, with her hair brown and curly past her shoulders. She had brown eyes and a tiny gap between her front teeth that added to her cuteness. She was dressed in a cream sweater that had a sharp V showing ample chest and a lack of bra, and a tan leather miniskirt that bordered between appropriate and slutty, with black leather calf boots.\n\nKristen explained that this was her first date with Jeff. It'd had been setup between her friends and she was bored out of her mind. All Jeff talked about was sports and the way he talked he seemed to assume they'd go out again. He kept on about taking her to his college teams football game and other related things. She couldn't believe how much he was on his phone on a first date and was borderline believing her friends had set this up as a joke. She had a hard time believing anybody could be this obnoxious.\n\n\"So leave with us tonight,\" Alanza said after Kristen finished talking.\n\nShocked Kristen said, \"Excuse me.\"\n\nAlanza walked around Kristen as she talked, \"Leave with us,\" Alanza whispered again. \"I'm going to be blunt. I want you, I want to take you to a hotel room and do very bad things to you. I want to watch as Thomas does equally bad things to you. I want to give you a night you will never forget.\"\n\nShe traced a finger up her arm as she circled her. Kristen stood still with her mouth open, digesting what Alanza said. \n\n\"Show me your panties,\" Alanza breathed.\n\n\"Wha...\"\n\n\"You heard what I said, and you know how to do it. Show us your panties.\"\n\nKristen swallowed and looked around. Jeff was still on the phone, the other patrons were paying attention to their own games and each table had it's own pool of light with darkened edges. Kristen faced us at the edge of light on our table and hesitantly reached her fingers down and tugged the hem of her skirt high enough to show us a white lace panty. Closing her eyes, she held it there for a few seconds before lowering it back down. \n\n\"Good, that's a start,\" Alanza said. \"Now we're going to pretend to have you make a shot from over here, and when you do, I want you to lift the skirt and show us your ass.\"\n\nSwallowing, Kristen allowed Alanza to guide her to the far corner that would allow her to watch everybody else at the same time. We stood behind her as she bent over pretending to line up a shot. We watched for the perfect moment when nobody was paying attention to anybody else. When it happened, Kristen reached behind her and hiked her skirt to her waist exposing her ass and the thong back of her panties. \n\n\"Now leave it like that and take the shot,\" Alanza ordered. \n\nWide-eyed Kristen looked over her shoulder but nodded as Alanza pulled her phone out, just as Kristen hit the ball with her que Alanza took multiple pictures. Bright red, eyes downcast, Kristen stood up and turned to her as Alanza showed her phone.\n\n\"Damn, I look hot,\" Kristen whispered, gaining confidence as they scrolled through the pics. \"Let's do some with you.\"\n\nAlanza nodded and they spent the next twenty minutes taking pics of each other subtly flashing me and the rest of the crowd with nobody the wiser. I looked through the pics and some were hot. One shot they both did, one stood behind me taking the picture, they had me shooting pool with a girl opposite me but with her back to the crowd. They each hiked up their skirts so you could see their full panty unknown to the people behind them. They each took a second shot like that but had pulled up their tops exposing their tits to me. Kristen had light brown nipples which got hard as she flashed us. \n\n\"You know what's really sad?\" Alanza asked.\n\n\"What?\" Kristen said.\n\n\"Not only is your date missing out on your total hotness, but he doesn't even seem to care that you're gone.\"\n\nI looked over, Jeff was still texting and shooting pool by himself. The only difference was now he had a pitcher of beer and two glasses next to him.\n\n\"I'm not usually a mean person,\" Alanza said. \"But I really want to leave now and see how long it takes him to notice you're gone.\"\n\nKristen looked back and forth at us, this was the deciding moment. Even though she'd just teased us I had no idea if she wanted to do what Alanza asked of her. As we looked at her, she gave a small nod. Immediately Alanza grabbed her hand and walked to the door.\n\n\"Close the tab and get to the bike,\" she said to me over her shoulder.\n\nI was outside with two minutes, \"Not sure how we're going to do this. I can't take two on the bike.\"\n\n\"Hush, I've been on top of this from the beginning,\" Alanza said looking at her phone.\n\nJust then a red sedan pulled up and a small clean-cut black kid in a blue polo shirt rolled down the window, \"You called an Uber?\"\n\n\"Yep, take us to the Marriot down the road,\" Alanza said. \n\nShe gave me a quick kiss and the lips while pressing something in my hand, she grabbed Kristen's wrist and piled into the car.\n\n\"Hurry up, I already booked a room.\"\n\nI looked down to see what she'd given me, her pink coupon. I hopped on my bike and followed the car to the hotel. We got our key and the girls rushed up to the room letting me pay. When I finally got to our room and opened the door they were already on the bed in their panties and boots in a frenzied make out session. Kristen was on bottom with her legs wrapped around Alanza as they kissed. Alanza broke and started to kiss her neck and then pinned her wrists to the side. She slowed down and planted kisses on her neck and chest making Kristen moan and squirm. She bent her head and teasingly licked a nipple making Kristen gasp. Alanza licked and circled her tits with her tongue, taking her nipples in her mouth, small nipping bites and long slow licks that had Kristen arching and groaning.\n\nI took off everything but my jeans as I watched them. Alanza patted the mattress next to her and I laid down beside them. Alanza shifted her body and moved lower. Kristen held her breath as Alanza positioned herself between her legs.\n\n\"Have you ever been with a girl?\" Alanza asked in between kissing her inner thighs.\n\nKristen swallowed and shook her head.\n\nAlanza smiled, \"Relax babe.\"\n\nShe hooked her fingers into Kristen's panties and slowly pulled them down her legs and off before tossing them to the floor. She pushed her legs wide again revealing Kristen's tight-lipped bare pussy. Alanza gave her a small lick making Kristen gasp and arch her back. After that Alanza began to use her tongue with a vengeance. I propped myself up on one elbow and watched as Alanza made Kristen go wild. I knew from experience her tongue was practically magic but it was my first time watching her go down on another girl, Our session with Michelle I hadn't been able to watch but now I had a close up view.\n\nKristen was moaning and gripping the sheets as Alanza did everything she could imagine to bring her to climax. She slid a finger inside her as she used her tongue to work her. Kristen was going crazy, her face was non-stop emotion of ecstasy and surprise. I stroked one of her nipples and she looked at me.\n\n\"Oh my god, I've never felt anything this good,\" she panted. \n\nAlanza looked up for a second, \"Kiss her.\"\n\nI obeyed and leaned over and kissed Kristen. She kissed me back with a passion and her moans while kissing were exciting me. I kept teasing her nipples as we kissed and her body started twisting. She gripped me tight and soon I felt her body shuddering as she dug her nails into me. I kept kissing her as she screamed and thrashed. I saw Alanza holding her legs tight with her mouth clamped on her pussy as Kristen orgasmed. When she finally stopped shaking we both released her and Alanza moved to her opposite side.",
        "Kristen looked back and forth between us, \"Oh my god, that was incredible.\"\n\nHer phone buzzed and I grabbed it off the nightstand and handed it to her.\n\nShe looked at it, \"He just now noticed I'm gone, wants to know where I am.\"\n\nShe turned off her phone and handed it to me to put back.\n\n\"No way am I leaving you two tonight.\"\n\nAfter a small break Alanza had me lay on my back. Kristen mounted me reverse cowgirl then leaned back against my chest. It was a hard position but I was able to flex and shift to push inside her. Alanza straddled my legs while pushing Kristen's wide and while I did my subtle thrusting into Kristen, she bent over and licked us both. The feel of her tongue as I fucked Kristen was incredible and Kristen must've felt the same as she was constantly moaning and flexing against me. She started going wild so I wrapped my arms around her to keep her pinned to me. This increased her arousal and Alanza started using her tongue with more force, soon both of us were straining and moaning as we sought to cum. I felt myself build and I thrust my hip harder as Alanza gave a strong lick and I exploded. My world went white and a second later Kristen shuddered as her own orgasm overtook her. \n\nThe rest of the night was spent with all of us working over the rest. We tried multiple positions, I took each of them doggy style, then I laid down and they took turns riding me while the other was on our side teasingly touching both of us. I could just see the sky lightening to silver as we all finally went to sleep from exhaustion. When we woke Alanza had ordered breakfast from room service and held hands with Kristen as they both opened the door naked. They giggled as the bellhop's eyes went wide when he brought our cart in while Alanza signed for the food. They made sure to guide him out so he got a good look at their asses before he left. \n\n\"That was such a rush,\" Kristen said as she grabbed a strawberry to nibble on.\n\n\"That's a regular thing with her,\" I said nodding toward Alanza.\n\n\"Really?\"\n\nShe nodded and we all grabbed our plates for breakfast. While we ate Kristen peppered Alanza with questions about some of the stuff she did. \n\nKristen was visibly impressed, \"You're so brave, I'd be terrified to do half the things you have.\"\n\n\"The question isn't if you're brave enough, the question is would you want to?\"\n\nKristen nodded and whispered, \"It sounds so sexy.\" \n\nAlanza grabbed her phone and sent her a text, \"Keep my number, if you ever get the urge to do something, call me, I'll do it with you. Maybe I'll call you the next time we go skinny dipping with friends or something, that way you can take it slow with us.\"\n\n\"I'd like that.\"\n\n*****\n\nTo be continued...\n\nNote: Comments always appreciated. "
    ],
    "authorname": "storm_usmc",
    "tags": [
        "flashing",
        "gagged",
        "pool",
        "threesome",
        "tied",
        "video",
        "wedding",
        "group sex"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/the-sex-survey-results"
}
{
    "title": "In Love with Lori Ch. 07 Pt. 02.1",
    "pages": [
        "Please be aware this story contains elements of taboo sexual relationships, if this offends you please stop reading now.\n\nMany thanks to my editor, GrandTeton, for leading me along the paths of righteousness (at least where grammar and punctuation are concerned...) and for taking the time to identify and temper my wilder flights of fantasy.\n\nThis is not the real world, it's an imaginary world of my making, and things happen the way I think they should, not how they would in real life, so please remember to not take any of this too seriously, it's just a story...\n\nHave fun,\n\nBB1958\n\n______________________________________________________________________\n\nSecrets Revealed:\n\nHouse-hunting took up most of my time for the next several weeks. Poor Davey was well and truly back in the swing at his hospital. He came home to Sybil's house every night wrung out and ready to drop, but that inner steel of his kept him going back for more, keeping his head above water and his mind in the game through all that punishing schedule. \n\nIn turn, I was overwhelmingly, unbelievably proud of him. Mom had told me once how he'd fought to get where he was today, willpower and sheer determination to succeed in his calling and be like his daddy keeping him afloat where so many other men would have given up and sunk without trace, and it was beginning to pay off.\n\nSo while he studied, worked, trained, and learned, I did what I could to find the place we could call home; Sybil's house, for all its warmth and welcome, was her home, not ours, and I couldn't help but feel twinges of discomfort at the thought of how much we were imposing on her. She never said a word, bless her, and her warm presence was a boon and a blessing, but nevertheless I would have felt more comfortable in a place of our own, and she understood that; Sybil's was a place of refuge, and gladly given, but we had to strike out on own, and soon. \n\nAnd then Sophie finally came home. By the time the days rolled around to the day she was due to arrive, I was a frazzled wreck; I'd spent the night before they were due back pacing and worrying and fretting and snapping at Davey, Rosie, Jimmy, everyone, really, and driving poor Davey insane. \n\nBy the time we set out to meet her at Heathrow, I'd swung the other way, and now I was a terrified bag of nerves, all sorts of weird fears and bizarre feelings roiling around inside of me; at one point I was actually convinced she'd forgotten me, which probably gives a great, big, neon-lit clue as to my mental state right there and then.\n\nDavey was comforting and Jimmy kept his mouth shut and stared stolidly ahead after I bit his head off for no good reason, but I could see the looks he and Davey were exchanging, those special 'shutupshutupshutup, she nuts, don't set her off, for fuck's sake!' glances that would have pissed me off if I wasn't so busy freaking-out. \n\nActually arriving at Heathrow Airport and getting to the Arrivals Area was a blur, and still is; I don't rightly know how we got there, because all I remember was circling round and round in the parking garage, then next thing I know we're in the Terminal 5 Arrivals Area. After several lifetimes of alternately fretting, feeling scared, losing it with Davey and poor Jimmy, and slowly losing my mind, suddenly she was here, my mom was home, she was here, and I could finally hold her again. \n\nI don't think I need to go into what I was feeling; all I could do was squeak 'Mom, Mom', endlessly, and she was too busy squeezing the life out me to correct me, and Uncle Richard's arms around both of sealed us together; Sophie may have been Davey's aunt, but now she was truly my mom, I could feel it in waves running through and through me, and Uncle Richard was everything Daddy had been, he felt so like my daddy it was impossible not to think of him as anything else, and he was there, warm, loving, making me his daughter, drawing me in and making us a family. \n\nI glanced at Davey, and his expression was unreadable; he looked transfigured, as if he'd finally worked out what was going on inside me, like he'd finally got it for real, not just what I'd told him before, and I loved him even more for that. From where I stood, I could see the knowledge dawning in his eyes that Sophie was my mom now, and if she was my mom, then in a very real sense she was his mom too. She was just who he needed in his life, and everything about her that had shouted 'MOM!' at me was doing it to him, too. We were truly family now.\n\n*\n\nSophie is a master of organization, and with her around, the pace stepped up a notch, whether house-hunting with me or interviewing dressmakers, caterers, venues, florists, and jewellers, then project-managing the whole thing into one complete event. I was awestruck; I thought I was capable, and reasonably organized, but what I knew amounted to tidying a toy-box compared to Sophie, with her memory like an elephant, her ability to relate one fact to another, and her razor-sharp attention to detail. \n\nThe day after she arrived home, we went shopping, picking out the watered silk for my wedding dress, then we went off to interview, bully, coerce, and intimidate various seamstresses she knew of until she found one she liked. She was adamant and unshakeable on several key points: no peach, apricot, or champagne - Royals and Eurotrash did that and it was vulgar, and no satin, taffeta, or organdie; brides in this family married in white watered silk and Honiton Lace, with subtle seed pearls, no sequins, ruffles, bows, mutton-chop sleeves or shepherdess petticoats, idiotic Bo-Peep bonnets, or angel wings, and definitely no silly Marie Antoinette extravagance. As far as she was concerned (and that meant as far as everyone was concerned), my dress was going to be modest, ladylike, subtle, and devastatingly gorgeous, with long sleeves and a sweetheart neckline - no plunging necklines, especially with a set like mine, no push-up bras or willpower dresses, no bare shoulders, and especially no garters to take off in public; Davey wouldn't like that, and most definitely neither would Richard. 'Nuff said. \n\nWhether we liked it or not, this was going to be a society wedding, and I had to make sure that no matter who turned up to try and upstage me, whether out of spite, malice, or just sheer bloody-mindedness, I was going to outshine them or die trying; it was my day, and no ex, also-ran, never-was, or wannabe was going to take first prize away from me. Sophie wanted the competition (if any) to show up, stare, gnash their teeth, and go home and cry. \n\nWhat did I tell you about Ladies Who Organize? \n\nIn the midst of all this, I found the house I wanted, in the same village as Sophie and Uncle Richard (was there ever any doubt...?), a beautiful, mellow, red-brick and sandstone vicarage dating from the middle of the eighteenth century, with dozens of unexpected little rooms and hidden, snug little corners, tiny, private, walnut-panelled sitting rooms with their own fireplaces, just big and cosy enough for two people to sit and enjoy the fire with a cup of tea, a slice of cake, and some private conversation, large, imposing reception rooms and bedroom suites with tall, classically Georgian windows and polished wood floors, and two wide, sweeping, almost terminally elegant staircases; Davey told me that was because one was for going up, and the other was for coming down, and I almost bought it, until I saw that grin he was trying to hide, so I paid him back with an elbow in the ribs and accidentally-on-purpose stepping on his toes in my peg-heeled cowboy boots. \n\nThe house stood in several acres of gardens, ancient apple and pear orchards, with a large duck-pond, and best of all, a paddock with two sweet, silky-muzzled little grey donkeys and a gigantic English Shire Horse with a head like a beer-barrel and feet like gunpowder kegs. The animals came with the house, their care was one of the conditions of sale, and without them there was no sale, but I was in love at first sight with those three beauties, so I signed without hesitation; I wanted that house, it ticked all my boxes, and the three special additions were the sweetener on the deal as far as I was concerned. \n\nSophie had decided that Davey and I, like his daddy, and his grandfather before him, should be married in the chapel of Kings College, Cambridge, their Alma Mater; when Sophie took me to meet the dean of King's College chapel, I was bowled over by the place; I was expecting a small, modest, chapel-type chapel, with room for a few dozen people, kind of like the one I always avoided back home, not the huge, magnificent Gothic masterpiece it actually was, bigger, older, and more imposing than the cathedrals in some cities. Davey's daddy had married our mom here, so Sophie felt it was appropriate we formally tie the knot here too; it was something of a family tradition. As soon as I walked into the chapel I knew I wanted to be married to my Davey in this place, it was in our blood, and, if and when our children married, it should be here too; this place was part of us, of Davey and me, and it should be part of them too.\n\nBridesmaids: Rosie was going to be my Maid of Honor, no question about that, but Sophie and I felt I should have someone who knew me, preferably my oldest friends, pretty much family, to be my bridesmaids, and I should decide soon; the dressmaker wanted to start on the dresses, and she needed to know who she was making them for. Of course, Sara Mason and Josie Gregor were my choice; we'd been inseparable since kindergarten; there was no way I was leaving them out of the most important day of my life. \n\nInviting Sara and Josie was a lot easier than explaining who I was marrying; they were in college in California and Texas respectively, and were unaware I'd left Des Moines, let alone that I'd met someone and we were getting married, and especially who I was marrying; dancing around the truth like a cat on springs was the only way I could avoid flat-out lying to the pair of them, but it gave me a few uncomfortable moments, I can assure you!\n\nCalling Sara and telling her I was getting married, in England, and I wanted her to be my bridesmaid with Josie was hard enough; telling Josie was almost impossible. She'd always known, or suspected, that there was something I wasn't telling her, and when I told her my husband's name was 'David Denham, I could hear her mind going \"OHOO, Really!!!???\" all the way down that phone line, even though she didn't know the 'Denham' name; she'd always known Davey as 'Davey Keene'; as far as she knew that's who he was, but mercifully she didn't quiz me any further. When I told the girls to get their passports sorted out, their tickets were waiting at the Air Canada desk at La Guardia, open flights, so get moving, we had dresses to fit, they promised to be here inside a week. Tick one more item off the list of several thousand...\n\n*\n\nThe Cat's Out Of The Bag:\n\nWhile all my kerfuffle was going on, Jimmy and Rosie were happily falling harder for each other. As a favour to Davey and I, Sybil had given Jimmy his own room in the house, and while I don't think he abused his guest privileges by sneaking into Rosie's private apartment after dark, he respected Sybil far too much, but the fact remains, something hot, hard, and heavy was going on there; Rosie went around with that secret little smile, Jimmy looked permanently dazed and sandbagged, and I had enough spare room in my head to wonder when they were going to tell us all what we already knew. \n\nI was all for having a little private chat with Rosie, but Davey absolutely balked at that; his exact words were \"mind your own business, and let her mind hers; when Rosie wants you to know something, she'll tell you, so just drop it, please?\"\n\nOf course I did, but I had eyes, and I could see there was something up, so I sort-of-worked-out something with Davey that meant we'd all get what we wanted. When I told Aunt Sybil that it was time for us to go, she understood; much as I loved living with her, in her home, I needed my own home even more. Davey says it's the nesting instinct; maybe so, but I still felt we should leave before we outstayed our welcome. David and my gift to Rosie and Jimmy (which had nothing to do with the fact she was my Maid of Honor, and everything to do with the fact she was the closest thing he had to a sister, and yes, I know...) was our way of giving them what we had; I could see Jimmy casting around, looking for a way to ask Rosie to marry him, and having a good job and a home they could forever call their own would seal that deal that for him, and keep them near us, the thing I wanted most in the world.\n\nWhen Rosie hugged us, I clearly heard Davey murmur \"Love you, Maid Marian, be happy!\"\n\nRosie whispered back \"I'm not your Maid Marian any more, David; lucky you, you're marrying your real Maid Marian! But look, I have a Little John all of my own now!\"\n\n*\n\nMoving into my new home was a strange, emotional experience; Sophie had hired movers to collect all the things we'd shipped over from Bar Harbor from the storage unit in Banbury and she and I had spent a couple days arranging the furniture; everything, every little piece of furniture or trinket reminded me sharply of mom and daddy, even in their new setting, but I'd resisted the urge to arrange the furniture as it had been in Mom's house: new house new layout, no old ghosts. \n\nOf course, I could have just dumped most of that stuff, but there was too much of Mom and Daddy in those worn, comfortable pieces; Davey and I both had vivid memories of sitting on Mom's lap in her big old green La-Z-Boy recliner and watching TV, Davey watching endless afternoon reruns of 'Champion, The Wonder Horse' and 'Casey Jones', and Mom singing along with me to 'Sesame Street' and 'The Elephant Show', and 'Mr. Rogers', and listening to Mom while she read Curious George, Paddington, Pooh, Alice, Snow White to us; tossing that chair out would have ripped a hole in my memories that nothing would ever heal, so it stayed. One day, I was going to read to my babies in that chair, that was what it was for.\n\n* \n\nDavid & Lori: an 'Interlude'\n\nThe first night Davey and I slept in our new home, I wanted him to be inspired to try as many things as possible; as he put it when we first took possession of the house:\n\n\"You know something, Angel? There's an old custom, it might even be a legal obligation, that the new homeowner christen every room in the house; we have to put our mark on this place, just so we know down inside that we're home, and so the house knows who we are. So, when we've moved in properly, you game for some games?\"\n\nSilly question, really; Davey's kind of 'christening' always makes my eyes bug-out, so yeah, I was game, and I made sure our first night in our new home was everything his dirty little mind could dream about!\n\nThat first night, the house was still kind of sparsely furnished, but I'd had the movers drag Mom's big old couch into what would be the family room, and then I dressed it with sheets, pillows, throws, and comforters, closed the shutters to block the evening sun, and turned off the main lights, so the only illumination was the golden light from a couple of table lamps, giving that enormous room a soft, intimate glow, and I waited, a little impatiently, in my bathrobe, with my hair pinned-up, and Yardley 'English Rose' spritzed strategically on me, just to add that alluring (I hoped!) touch. \n\nWhen he'd come in, Davey had given me that quizzical, adorable, 'half-squint-half-raised-eyebrow' thing he does when he's puzzled, but his eyes lit up when I shook out my hair, undid the belt on my heavy bathrobe, and it slide to the floor, leaving me stark naked for his delectation.\n\n\"Darling Girl, every time I see you I fancy you more!\" he breathed and I knew he wasn't lying, not if that bulge in his pants was any indicator! I think he got that I wanted to play a little. We'd been too dead serious for too, too long, and the bedrock of our relationship has always been the fun and clowning around we do with each other. I wanted to regain some of that; everything had just been too real lately; Des Moines, Bar Harbor, Boston, they all seemed a long, impossible way away, and a whole geological age ago, and it was time for David and Lori to play again, to recapture some of that. Fuck reality; we had plenty of time for that later!\n\nDavey started stripping off, but I stopped him; I was his wife, I wanted to play, this was MY game, so I was gonna unwrap him. He grinned when I batted his hands out of the way and loosened his tie, unbuttoned his shirt (well, started to unbutton his shirt; after three buttons I gave up and just yanked it over his head, stupid fucking men's shirt buttons, why are they so small and fiddly, AND on the wrong fucking side...?), and pulled him closer by the waistband of his pants so I could tease him with little nibble-kisses, just pecking at his lips, and ducking back when he tried to take them further, while I unlaced his belt and undid his pants.\n\nOf course, Davey being Davey, his hands were busy too; just as I slid his zipper down, his hands clamped around my butt and pulled me right up against him, jamming his tented cock hard against my pussy while his fingertip stroked my little hole, making me gasp.\n\n\"So you want to play hard to get, do you, you minxy little sexpot?\" he grinned, squeezing my butt-cheeks and pulling them apart as he rubbed his boner against my slit. That was about the time lights, bells, and whistles went off in my head, but I manfully (womanfully?) pushed him away and tugged his hands off my butt (a little regretfully, to be sure, but just who was supposed to be seducing who here, anyway?)\n\nDavey toed his shoes off while I tugged his pants down, made him step out of them, and threw them dramatically across the room, and when he finally pulled his socks off (because there's nothing sillier and less alluring than a naked man with a thundering erection standing in his sock feet...) I had him just where I wanted him; naked, torqued-up, hot and bothered, and ready to play!\n\nI think Davey was feeling some of what I'd had fizzing inside me all day, because before I knew it, our lips were locked together, and our hands and fingers fondling, squeezing, touching, and stroking.\n\n\"What does Milady desire?\" he breathed when I finally managed to wrench my lips off his and draw a shuddering breath; Davey kissing me has all kinds of deep-down side effects on me, and I wanted a clear head, because what was coming next was going to put my mind in orbit. In answer to his question, I slid to my knees, watching his eyes light up and his dirty little mind go into overdrive.\n\nAs I kissed and gently licked his velvety-soft erection, with that steely core just under the smooth skin, once more my head was filled with the scent of him, even stronger and more potent now, the scent complexes he was giving off firing-up my brain and causing all kinds of things, wild fantasies and deep-down desires to surface; Davey once told me I smelled like Christmas to him, but I had no words to describe how he smelled to me; shower soap and cologne, but under all that, the fresh, clean-skin smell of healthy young male, and the salty, ozone tang of the clear liquid seeping from the end of his cock. \n\nAs I sucked and rolled my tongue around the end of his pulsating cock, he hissed softly, obviously enjoying the feeling, so I sucked some more; Davey is a very tactile person, he likes touching and being touched, and the tensing of his muscles and tendons told me how much he was liking what I was doing to him.\n\nWe kept on in this vein for a few more minutes, but he obviously had other things on his mind, because at some point he pulled away from me and took my hand, raising me to my feet.\n\n\"Your turn, Angel-May!\" he grinned, walking me backwards toward the couch and that big soft pile of cushions and comforters. I lay down on my back so he could continue kissing me, his lips playing over my body in an endless rain of kisses, first my neck, then my shoulders, a quick, soft flick of my nipples with his tongue-tip, sending electric shivers through me, then down to my belly, finally swirling his tongue in my navel, something he loves doing. I grinned as he kissed and lapped even further, heading south to his ultimate target.",
        "\"Love you, Baby-Girl!\" he murmured, finally lapping gently at my swollen slit, sending a thousand icy-hot chills and shivers running through me as he lapped and teased my little button. I groaned with lust and need as he woke and teased my pussy, my clitoris buzzing and throbbing as he so, so gently bumped and grazed it with his tongue-tip, teasing, torturing me, making me ache with lust and unfulfilled longing.\n\n\"Davey, please...\" I moaned, pushing my mound against his mouth as he ate me, urging him to make me thresh and howl, the way he always did. When he moved his lips and probing, teasing, tormenting tongue from my labia to my perineum I almost groaned in disappointment, but when the pad of his thumb began gently rubbing and massaging my stiff little button, I thought I'd die. My excitement mounted steadily as he rubbed me so wonderfully, while his tongue licked and probed my perineum, and darted in and out of my tight little asshole. \n\nThis only made me hotter; I could feel the gathering storm about to break, he'd pushed me almost beyond my limits, and as that gigantic orgasm I knew was coming began to uncurl inside me, obviously something he could feel too, he jammed his tongue deep into my asshole.\n\nI shrieked in ecstasy as I came, orgasm crashing through me like a monstrous, breaking wave again and again as he touched and licked and urged me on and on.\n\nWhen I thought it couldn't get any better, he slid up alongside me, turning me so I was spooned against him, and holding my thighs open.\n\n\"Are you ready, Darling Girl?\" he murmured, and at my signal he slid his thick cock deep into my ass, his fluids and the liberal coating of saliva from his extended plating of me lubricating him as he rammed himself slowly, unstoppably, deep into the heart of me.\n\nI came all over again at the sensation of him doing that to me again, our thing, the culmination and pinnacle of our lovemaking always, my anus tightening around him as orgasm once more burst in me, lighting me up like a Christmas tree as he pumped into me. The delicious friction s he thrust into me sent hot and cold tails chasing through me as I orgasmed almost continuously, bolt after bolt of pleasure thrilling through me, intensifying as he speeded up, frenziedly fucking me as his own climax approached.\n\nDavey gave a coughing sort of groan, swelling inside me so tightly I could feel him wedging inside my ass, coupled with the muscular throbbing of that lovely fat cock of his as he pumped jet after jet of spunk deep into me, holding me tight as he blew his load inside me, and then the pulsating of his cock lessening as he came down from that place, until, at last, all I could feel was him slowly shrinking away inside me, and the drum-roll of his heartbeat slowly lessening.\n\nWe lay in our sweat and sweet afterglow, once more connected after a whole day apart, trying not to fall asleep, enjoying instead the gentle tristesse, the sweet, sorrowful melancholy and warm glow of renewed love that followed such intense lovemaking. Davey finally roused me from my woolgathering, his gentle nibble of my earlobe reminding me of his presence.\n\n\"I think we've well and truly christened this room, Darling Girl...\" he murmured in my ear, \"Just think, all those other rooms to follow; I'll be a shadow of my former self if they're all as good as this!\"\n\nI smiled happily as I pulled his arm around me and snuggled back down against him; in a little while we'd have to get up, clean-up, straighten-up this place, and have a light supper, but for now, my whole universe was Davey, and he was warm, and soft, and he was there, and that was all I needed. Thinking thoughts like that, warmed by my Davey, I fell asleep, secure in my world, and safe in my husband's arms.\n\n*\n\nRosie puts two and two together:\n\nWhile we were setting up our home, we also helped Rosie and Jimmy with theirs, which gave Rosie a chance to set something straight with me, in a roundabout sort of way, and it happened in the strangest possible way. \n\nOne morning, a few days after Davey and I had officially 'taken up residence' as they say in England, Sophie was out bullying caterers and generally having fun, with Jimmy bringing up the rear as muscle, pack-horse, and token person to complain at, and Davey was working, so it was just Rosie and me wrestling with what to put where. No matter how we rearranged things, the rooms still looked empty and unlived-in, so Rosie suggested we trek up to Denham Hall and pick out some more of the more attractive pieces of furniture, something to fill space and make the rooms more homey. I agreed, because I wanted her to pick and choose as well for her own nest with Jimmy. \n\nThere was enough stashed away in that huge, gloomy mausoleum for ten houses the size of ours, so we made our way up to the hall. Luckily it was a bright, sunny day; if it had been dull and overcast, I think we'd probably have gone another day, when Jimmy could come with us and keep the scaries at bay, because Rosie was as freaked by that place as I was.\n\nWe toured through the hall, sticking labels on pieces we liked, either for our place, or for Stone Cottage, Rosie's house, so the movers who collected them would know what went where, and we eventually ended up back in the study. Just like the first time I'd ever been there, that huge portrait of Mom and Davey's daddy over the fireplace captivated me; they looked so much like us today it was weird; it could have been Davey and me in that portrait. Standing there, with Mom watching over me, I actually felt safe for the first time in that scary place; touching that picture was almost like touching her again, and having her there with me was the best feeling in the world; while she was there with me, nothing could hurt me.\n\nWith my uneasiness allayed, I sat at the huge desk to make two lists of the stuff we'd picked, one for Rosie and one for me, and where I thought they'd go, only looking up when Rosie came clattering in with a pair of beautiful Regency candelabra, chatting about how nice they'd look in my dining room on the mantelpiece. As I glanced up, the painting caught my eye, and I froze, my heart leaping into my throat at what I saw. Mom seated, Davey's daddy standing behind her and to one side, his hand on her shoulder, her hand on his, but now, standing next to Mom, was Daddy, young, handsome, sleek and dashing in his air-force blues, his hand on her other shoulder, smiling at me just the way I remembered. I don't know how long I sat, transfixed, tears gathering in my eyes to see my mom and daddy together again, but Rosie obviously twigged something had happened.\n\n\"Lori...Lori...Lori, what is it, Lori, what's wrong?\" I heard from a long way away, but I nearly jumped out of my skin when Rosie touched my arm.\n\n\"Lori, what happened? What is it? What did you see?\"\n\nI turned to her, and the tears spilled down my cheeks more and faster as I cried, grief and loss rising up out of nowhere and overwhelming me, while Rosie held me and rocked me, obviously at a loss as to what had just happened, just being there for me while I cried it all out.\n\n\"Lori, what happened? You went as white as a sheet. I thought you were having a seizure; you kept staring at that painting. What is it, what did you see? Was it seeing your mother again?\"\n\nMy head snapped around. What did she just say? My God, she knew, she knew!\n\n\"What...I...it was...\" I fumbled and stumbled, but Rosie kept hugging me.\n\n\"Lori, look, it's alright, I don't care, I understand, truly. I worked it out almost the first second I saw you; you're the exact, and I mean exact, double of Aunt Jane; anyone who looked so like her had to have been really closely related to her, so it wasn't that hard to make the connection! I'm sure Mummy knows, but don't worry, no-one's going to say anything, I promise you; this is about you and Davey, and Mummy would cut off her own arm before she let any harm come to either of you. Now, tell me what brought this on; what happened?\"\n\nIn a soft voice, my throat still scratchy from crying so hard, I told her what I'd seen, how I'd seen Daddy in the painting, looking like he must have done when Davey's daddy had first known him, both he and David senior, best friends in life, flanking their wife, my mom. I told her how Davey leaving me behind to come to England when I was just eleven had broken my heart, how I'd been so very angry with him for so long, how I'd tried to cut him out of my life, and how a photograph, a simple photograph, had revealed to me how much I loved him. I told her everything, how I'd planned to seduce him, get pregnant, and let him go to go have his life, while I'd have a piece of him to be forever mine, how he'd got the truth out of me, and made love to me, showing me how much he loved me.\n\nRosie nodded though all this, as though I was confirming what she already knew, and when I eventually ran down, she held me and rocked me like a child, and in a soft voice started telling me stories about she and Davey when they were young, simple stories about two small children a long time ago. \n\nShe told me about building forts and hideouts in the woods with Davey, and how her daddy would make the two of them bows and arrows out of twigs and string and willow-wands, and fashion cocked hats out of folded newspaper for them so they could be Robin Hood and Maid Marian. She made me smile when she told me how her daddy would be the Sheriff of Nottingham or evil King John so Davey could fight him and rescue her. She told me how the two of them would go dipping with shrimp-nets in the streams on the estate for crayfish and minnows on summer afternoons, or catch frogs and salamanders in the duck-pond, and, when Fall came, how they'd gorge themselves on damsons in the estate orchards, and take baskets of the fruit home so Aunt Sybil could make damson jam. She told me of idyllic, golden autumn afternoons when she and Davey would forage for and gorge themselves on wild blackberries, and pick Rose Hips for her aunt Jane, and Blackthorn Sloe berries for her father to make the Sloe Gin that he and her uncle David liked so much at Christmas. \n\nI smiled when she told me how Davey would protect her when their older cousins Lavinia and Jennifer would try to bully her; it was so like him. They really were closer than brother and sister ever could be. I was amazed she'd remembered so much of him, but then Davey has a way of sticking in your mind, and she'd never forgotten him.\n\nI felt very close to Rosie by then; she'd been Davey's sister and best friend long before I'd ever known him, she had a past with him that I could never rival, and it was obvious to me that she loved him deeply and unconditionally, but at the same time, I knew her love for him in no way challenged what Davey and I had, nor would she ever come between us because of it; she was his oldest and truest friend, in truth she was his sister in every way that counted, and now, now that she'd shared my deepest secrets, she was mine too. \n\n*\n\nThe plans for the wedding grew and matured; Sophie was tireless, checking each detail again and again, putting the fear of Sophie in the whole army of people she'd convinced, persuaded, bullied, cajoled, and blackmailed to make the day as perfect as it could be, according to her lights, and where Sophie led, I followed. As she kept telling me, \"This is your wedding, Darling Girl; don't let me make it MY wedding; it has to be what you want, how you want it, so what next?\" \n\nWhile she busied herself following-through the details we'd hammered-out, she left me to get my home in order, just checking-in with me every day to go over what had happened, what had changed, and what I wanted to do about it. While I was doing that, Rosie, Jimmy and I also labored to make our homes as homey and comfortable as possible. I knew Jimmy was delaying formally asking Rosie to marry him until after Davey and my wedding, but that seemed unfair to me; Rosie needed to have some of what Davey and I had, and Sophie agreed, so a little plotting seemed in order. \n\nI knew Jimmy was saving to buy Rosie the best, most expensive ring he could find, but Sophie had other ideas; Rosie was a Denham, her favorite niece, and there were any number of Denham family heirloom rings, brooches, bracelets, necklaces, tiara's and assorted sparkly odds and ends various members of the family had left behind over the years stashed in the vault at Denham Hall. Davey wasn't interested in any of it, his mind doesn't work that way; he still relied on and treasured the battered old Timex Mickey Mouse watch daddy had given him when he was a boy, that was what he valued, not those glittering baubles; if it had all been stuffed in a sock and chucked in a closet somewhere it would have made no difference to him, nor to me; I had my own mom's jewellery, and I certainly didn't want some long-dead woman's creepy old ancestral pieces cluttering up my jewel box either. \n\nIt didn't seem beyond the realms of possibility there was an antique stunner somewhere in that pile of expensive junk suitable for what I had in mind. It seemed only fair, after all; most of that stuff had been owned by women who were both Rosie and Davey's ancestors, and I couldn't see why she shouldn't have the pick of them. Sophie agreed with me, so we rummaged around until the perfect ring showed up, a beautiful Art Nouveau-influenced 2-carat Marquise-cut Solitaire diamond ring in a platinum setting. \n\nJimmy, of course, objected; he wanted to buy his girl her ring, which is generally the way it should be, this is true, but this was different; because Rosie was a Denham, Sophie convinced him that a Denham family piece, something that had once belonged to her great-great grandmother (who was also Davey's great-great grandmother...) would mean more to her, and the thing about Sophie is, when she tells you how things are, then that's how things are, period. \n\nJimmy still looked doubtful, but then Sophie battered him with the eyebrow, and he wilted, agreeing to go along with our plan until the time came to ask her; when he asked when that should be, Sophie would only say \"Trust me, James, you'll know...\"\n\nSo now all was set for the wedding. Davey took it all in his stride. After all, we were already legally married; this second wedding was mostly for the family, although the thought of walking down the aisle on Richard's arm appealed enormously, especially after that quickie wedding in Bar Harbor, and I have to be honest; how many Iowa girls would ever get the chance to marry in that huge, stunning, Gothic-fantasy of a chapel in a place like Cambridge University? Not many, I guarantee it! \n\nAs far as Davey was concerned, wedding planning was my thing; his thing was getting me naked as often as possible, pinning me down, and shoving that lovely thick cock of his in any place he could fit it. I used to wonder how he could be on his feet all day in the hospital, come home, jump into the shower, then drag me off to his den of iniquity for an extended, hard fucking session; the boy was tireless, not that I objected; feeling him filling my pussy and stretching my ass with his big cock was definitely the pinnacle of my day! \n\nWhat made him even hornier was when I'd remind him I was his sister, as in \"Come here and fuck your sister, you dirty fucker!\", which just tuned him up to new heights, which is going some; I swear, he had an almost permanent erection, and no compunction about using it on me, for which I can only thank all the gods there are who manage these things... \n\n*\n\nI suppose I'd better tell you about my own personal ass-kicking party with Bella; in hindsight, it's almost funny, but at the time I just wanted to kick her ass all the way up the back of her neck. Now at last I understand fully why sweet, tolerant, mild-mannered Davey was so abruptly rude to her last time round. Anyway, back to my muttons. \n\nJust a few days before Josie and Sara were due to arrive, Rosie and I were in the village grocery store, buying the boys some treats for dinner that night, when who should come stumping up the road but Bella, flames pouring out of her ears, with a face like a bulldog with its balls in a vise, obviously determined to have her say with me, although what kind of a beef she thought she still had with me was a mystery to me. \n\nRosie bridled at the sight of her grandmother, especially as the woman hanging back behind her, who could only have been Maude, judging by Davey's surprisingly accurate description of her, was giving me poisonous stares, as were the two girls with her, who would have been passably pretty but for the unbridled malice written all over their spoiled-looking faces. Bella set the tone for the conversation that ensued, and it went downhill at Warp Factor 9; obviously Bella and Maude had decided it was time for a showdown. Davey was unassailable, so they must have assumed I was an easy target, alone as I was. Bad, bad idea. Doing that to me is guaranteed to send you home walking funny, with your teeth in your back-pocket; you do NOT fuck with me and mine...\n\n\"You! Yes, you! Who do you think you are, threatening me like that? How dare you, you nasty, cheap, common little American gold-digger!\"\n\nRosie was almost incandescent with anger, but I held her back, because I wanted to hear what that poisonous old maggot had to say before I knocked her on her ass. Bella wasn't slow to press ahead; obviously she was choking on whatever it was she hadn't been able to spew out the last time Davey and I had let the air out of her fraud-balloon, so I stood back, one arm ready to grab Rosie if she lunged for the decrepit old harridan ranting in the public street, and let her get on with it; to be honest, I was waiting to see if her head really would explode, something Davey had almost goaded her into last time round, and occasionally still fantasized about... \n\n\"Just what makes you think you have any right to anything this family has worked so hard for? You're just some common little colonial nobody, and now you think you can marry my family's money? As far as I'm concerned, you are nothing, not part of this family, you never will be and you have no right to exclude me from my rightful share of the Denham legacy, and I'll see you in court before I let this travesty of a marriage take place. What do you have to say to that, you ill-bred American guttersnipe?\"\n\nOkay, that was fun to listen to, if a little repetitive, but I had to put this bigoted old loony in her place and give her some facts to chew on, and, in the interests of balance, maybe hang one on her as well, old woman or not...\n\n\"First off, old woman, no-one excluded you from anything; you managed that all by yourself. Second, David and I are already legally married, we have been for several months now, this wedding is for the family to share with us, and I should note you won't be receiving an invitation, so you can yank that Atomic Wedgie out of your butt right now. Third, and last, the magistrate you deceived into signing your so-called court order has decided that you've committed perjury, which I understand is a very serious matter here in England, and he's really, really pissed-off that you used him to try and legitimize your attempted fraud, and once again, and I love this phrase, 'attempted to use a false instrument to gain a monetary advantage'. That's fraud where I come from.\"\n\nBella was starting to look scared now, so I thought I'd twist her titties just a little more. \n\n\"The law is on to you, Bella dearest; all the other frauds and forgeries you've tried to pull? They're being examined by the police, who will also be looking at any possible accomplices; David's mother felt sorry for you, so she let you off the hook; David only feels disgust and contempt, and no burning urge to protect you in any way, and now that you've verbally assaulted me on a public thoroughfare, which I understand is also a felony in England, I promise that will just stiffen his resolve to see you and your accomplices jugged for a long, long time. Face it, Bella; you're fucked...\" ",
        "Maude, standing only a few yards away, paled with fright and looked ready to change her underwear when I mentioned 'accomplices'; obviously she knew exactly who I was talking about.\n\n\"I will be pressing charges, Bella,\" I stated. \"With those charges, and all the others the police will be bringing, you can look forward to a nice long spell in the lockup; who knows, while you're there, maybe you can write autobiographies of daddy the shit-shoveller, and your beloved uncle, you know the one I mean, the pimp and profiteer?\" \n\nThe old woman had gone from purple fury to the color of old yogurt as I unreeled the list of things she'd done to piss the family off.\n\n\"One last thing, Bella: this is not your family, you have no place among civilized people, you've proved that again and again, and if you ever come within five hundred meters of my family, my home, me, David, or anyone else I choose to put in the restraining order, I think they call it a 'court order' here, or attempt to contact, intimidate, harass, or interfere in any way with anyone connected with me and mine, I will make it my business to make sure you go to jail, go directly to jail, do not pass go, and do not collect $200; do I make myself clear? Rosie...?\"\n\nRosie had been champing at the bit the whole time, obviously raring to go Ground-Zero on the miserable old bat, and Bella actually shrank back as Rosie let rip on her.\n\n\"How dare you set yourself up as though you have any say in this family, Bella? David was perfectly prepared to make your life comfortable for you, not because he had to, but because he wanted to, because he's civilized and compassionate, but you, you're such a venomous, greedy old rat-bag you tried to grab it all, when you're entitled to nothing from the Denham estates, nothing at all. Uncle David inherited everything, and he passed it on to his son; that David chose to share with you should tell you what kind of man he is. Now you get nothing, and you get to explain to the police the string of frauds you've perpetrated to squeeze money from funds and an inheritance that don't have your name on them, from a family you're not even a member of! Fine example of a grandmother you are! I hope they chuck you in gaol, you're a bloody disgrace!\"\n\nShe paused for breath, glimpsed Maude cowering a ways back, and the battle-light in her eyes flared up again.\n\n\"And you, Maude, don't think you're getting away with anything! Aunt Jane left a detailed record of all the snide little tricks you and this disgusting, grasping old snob tried to use; David's trustees have all the lying letters and forged documents the pair of you concocted, and they make really interesting reading; when they pass those to the police, and trust me, they will, they're on tenterhooks just waiting for the word that will get you tossed in gaol, you're going to be sitting in the cell right next to Bella's! The two of you are a pair of disgusting, greedy, work-shy, lying, thieving criminals, and I hope they throw the book at the pair of you. Let's go, Lori, it stinks around here!\" \n\n'Nuff said.\n\n*\n\nA blast from the past and the cat's out of the bag (again)...\n\nJosie and Sara's arrival finally cleared all the unpleasantness of the confrontation out of my head; my two best friends in the world were here, and soon I'd be marrying David in a beautiful, historic church. Life didn't get much better for me. They were both suitably impressed when I arrived in Jimmy's limo, and Jimmy stowed their luggage and bowed them into the car in the grand chauffeur style (winking slyly at me as he did so, while I struggled to keep a straight face). \n\nThe girls were agog to meet David, the mystery man I was marrying, but all I would tell them was that he was still at work and wouldn't be home until that evening; I'd managed to keep it from them that my David was also their David, but I think they were starting to put two and two together, or at least Josie was, and Sara was giving me some very odd looks. They'd already asked several times where Davey was (note how I was careful to keep 'David' and 'Davey' separate), and my slightly panicky, evasive, non-committal answers were beginning to make their antennae twitch. \n\nI got the girls settled in, called Sophie to let her know they were here so Operation Bridesmaid could swing into action, and gnawed my fingernails down to the elbows waiting for Davey to call and tell me he was on the way; to be honest, I was unsure how to spring it on them that Davey was David; they'd known him since they were out of diapers, he was their almost-big-brother, and I had no idea which way they were going to jump when they found out. Just as my worrying reached fever-pitch, Jimmy called to say they were about 30 minutes out, and that's when full-scale panic-mode really set in; it actually took me a while to realize the clacking sound I could hear were my teeth chattering...\n\nAs soon as Davey walked in the door he was almost bowled over by the girls flinging themselves on him, hugging him, kissing him frenziedly, and chattering, laughing and crying all at the same time. Poor Davey looked a little startled by it all; I don't think he ever really believed that Josie and Sara had missed him so much, despite what I'd told him, so he was caught a little off-balance when they'd leaped on him like that, but it made me smile a little; obviously, their feelings for him hadn't dimmed with the passage of time and maybe, just maybe, it would make it easier to tell them what they needed to know.\n\nSara was the first to quit mauling Davey and stop for a breather, although that didn't mean she let go of him. Josie ditto, so the two of them were hugged onto him, his arms around them, big smiles all round, and then Sara asked the $64,000 question:\n\n\"So Lori, where's the mystery man? When's this 'David Denham' going to show up? Talk, Keene; where's the groom-to-be, shouldn't he be here too?\"\n\nThis was it: showtime...\n\nDavey gently unhooked the girls' arms from round his waist and came to stand next to me, knowing how difficult this was for me, and giving me his support. Sara had 'that look' on her face again, so I just plunged in.\n\n\"Sara, Jose, David Denham, the man I'm going to marry, is...right here; Davey IS David Denham, not Davey Keene; his real name is David Denham, it always has been...\"\n\nSara's eyes widened, then narrowed, while Josie slowly nodded; obviously, something had just become clear to her. Sara, though, was a little more direct...\n\n\"Are you fucking kidding me right now?\" she yelled, \"He's your fucking brother! What kind of fucked-up retards are you, the pair of you? You can't marry your brother, Lori, it's fucking illegal!\" \n\nI tried to step in, calm her down, something, anything, but she backed away, her eyes blazing.\n\n\"How in the name of all fuckery did you two manage to get to this? What were you thinking? Chrissake, Lori, he's your brother! Are you insane? Are both of you fucking crazy?\"\n\nDavey moved. Maybe he thought he could reason with her, but all he did was draw her attention.\n\n\"YOU!\" she bawled, and in two quick steps was right in front of him. Before I could move, she'd slapped him across the face, the slap echoing like a gunshot in the sudden silence. Davey rocked back; she'd really put her shoulder into it, and it must have hurt him, but he made no move to push her away or retaliate.\n\n\"She's your little sister, you moron, you're supposed to protect her, not...be...with her like that, that's just sick! What the fuck were you thinking? You're both supposed to be grown-ups, what the fuck is wrong with the pair of you...?\"\n\nI tried to speak, to reason with her, but Josie held her hand up to silence me.\n\n\"Sara, calm down, there's more to this, Sara, listen to me!\"\n\nSara paused in mid-tirade as Josie grabbed her arm.\n\n\"What, whaddya mean, what's going on, more what?\"\n\nJosie stepped between Sara and me, and motioned me back behind her back.\n\n\"Listen Sara, just shut up! Lori's been in love with Davey since she was a little girl; so have you, and so have I. Don't you remember how hurt she was, how angry, when Davey left? Only someone in love can be that hurt. Davey's only her half-brother, I worked that out a long time ago, maybe that counts for something, but right now Lori's alone, she needs you and me, we're all she has, so are you going to shut the hell up for five minutes and just listen?\"\n\nSara glared balefully at Davey, then stabbed her finger forcefully at me.\n\n\"Five minutes, that's all, then I'm gonna knock your fuckin' heads together! Of all the stupid, hillbilly, shit-for-brains, fucked-up...!\"\n\n\"Sara, enough!\" barked Josie, grabbing her hand. \"And you,\" she pointed at me, \"start talking!\"\n\nDavey took my hand and squeezed it reassuringly. Sara's eyes narrowed dangerously at that, but she didn't say anything, so I started to explain, even rationalize, what really was so weird, but so wonderful, too.\n\n\"I guess the place to start is the day Davey left; you both remember how mad I was, how I felt; didn't we talk enough about it? All I wanted was Davey home, but the way I saw it, he didn't think my home was his home. He thought his home was here, and he wanted to come back here. So I decided to hate him, and I kept-on hating him; I kept that up for years; you remember that, both of you do, you were there with me, missing him as much as I did; I saw what you both did, how you were when you didn't know I was watching....\"\n\nJosie was nodding, obviously remembering how it had been with me, and her own silent pain that Davey had gone from our lives; Sara, however was flinty-eyed, her expression neither understanding nor compassionate. I plowed on regardless; I'd come this far, now I had to tell it to the end, and see what happened next. \n\n\"Then I found something, something that changed everything. I was thirteen and one evening daddy asked me to go get something from the bureau in the study, and a picture just fell out and landed in front of me. It was a picture of Davey, in school, almost eighteen, the first one I'd seen in over two years, but all I could see was his smile, that smile I hadn't seen in so long; he looked so beautiful, so different, yet still the same, still my Davey, and it twisted me up inside; I wanted to hate him, but I couldn't; I couldn't, he was there, and he was smiling at me, and it had been so long, too long...\"\n\nDavey hugged me close while I cried; even the memory of that long-ago feeling was still so poignantly painful I couldn't hold back the tears, and so he held me while those memories rattled inside me, undimmed by time, still vivid, still gut-wrenchingly intense. Davey gently blotted my tears, then smiled at me.\n\n\"Are you OK, Angel-May?\" he murmured, and I nodded, determined to get this over and out of the way; his arm around me gave me the strength and courage to go on. \n\n\"I was a mess, all churned-up inside. I didn't know what to do, what to say, I didn't understand what I was feeling, and I didn't know if anyone could even help me; finally, it was you, Jose, you pointed out what was happening inside me, you showed me the truth, and it scared and sickened me, but I couldn't get away from it; once you told me, it all fell into place, and it scared me even more. I think Mom guessed. She tried to help me, but I wouldn't let her in, I couldn't, not this...\"\n\nI trailed off, because the tears came again, thick and hot, and hard as bullets, my guilt that I'd pushed Mom away rising up again, brittle and hard as slate, sharp as knives, feelings of loss, of regret, that only my mom could make right, and it was too late, it was all too late...\n\nDavey held me close, his hand brushing my hair even as he wiped my tears away.\n\n\"Shhh, don't do this Kitten, please, calm down, it's not good for the baby...\" he murmured, but Josie heard, if the sudden sharp glance she gave me was any indication. \n\nI shook my head; we'd come this far, it all had to come out, and let the cards fall where they will; no more hiding, no more half-truths and white lies. He tipped my chin up and looked into my eyes, and he must have seen my resolve, because he nodded in agreement, so once more I plunged on.\n\n\"None of this was Davey's idea. It was me, all me. When daddy died, Mom asked me to call Davey home. She was so sick by then, and we needed him back with us. He came running, but it was almost over for her. I guess the strain of Daddy's funeral was too much for her, because we lost Mom two days later, so now Davey and me, we were alone in that house. Davey had bought Mom a house in Maine, in Bar Harbor; she wanted to go back there before she...died, but she never made it. So we decided to move there; I couldn't live in Des Moines anymore. There was nothing left there for me, and we thought a new start in a new place was what I needed.\"\n\nDavey took my hand in his, lacing his fingers between mine, encouraging me to go on, to get this all out in the open once and for all.\n\n\"You can probably guess the rest. As long as Davey was here in England, all my mooning around over him was just that; it affected me, but it didn't rule my life, it was all just a treasured teen-dream, an impossible thing to mope about in my alone-times. But then he came home, and all that stuff just came back and hit me right where I lived. You have to understand, to me, there's no-one like Davey, there never was; you two, of all people, should know that; he was the best big brother, my close friend, my go-to when Mom or Daddy couldn't be there, and I loved him; when he left, that's when I realized how much I loved him, and how badly it hurt me that he left, and it scared me that I could feel so bad over something like that.\"\n\nJosie was staring at me, obviously deeply wrapped-up in what I was saying, and even Sara had lost that hard, stony stare, and was looking interested, so once more I took a deep breath and went on.\n\n\"This is the part you probably won't understand, but please, just hear me out, then maybe you will. When I knew Davey was coming home, all those feelings I had for him rose up and bit me on the ass; he wasn't safely far away, thousands of miles away, just a figure in a daydream. No, he was coming home, he was going to be home with mom and me, and I just let myself go. I knew, flat-out knew, that he didn't want me like I wanted him; why should he, he hadn't seen me in years, and I knew that once the funeral was done he was going back home, what he called 'home', and I was going to be alone again, so I figured if I couldn't have him, maybe I could have a piece of him, some part of him that would always be mine, and that would be enough, I could let him go, and call it quits.\"\n\nJosie stirred; I think she guessed what was coming next, but she held her tongue; Sara, on the other hand, seemed almost enthralled, her face expressionless, but at least that cold hostility was gone, and all she radiated was keen interest.\n\n\"There's no other way to say this, so I'm just gonna say it; I set out to seduce him. I knew he was going to leave me, I could feel him drawing away from me, getting ready to be alone again, and if he left, he was leaving without me and never coming back; it was my last chance to have something that was part of him and all mine, so I led him on, I snared him, and I seduced him.\"\n\nI stopped and caught my breath. Both girls looked ready for more, so I squared my shoulders, and carried on. \n\n\"Now go ahead and say your piece, both of you. Tell me how wrong I was, how conniving and underhanded I've been. I have no excuses for what I did. All I can say in my defense is that I did what I did because I wanted to have some part of him so that when he was gone I could still have him with me, and that night that's what happened; Davey and I, we...he made love to me. I wanted him to, more than anything in the world, and then we talked about what I'd done, how I'd tried to trick him, and I told him how, if I had caught his baby, I wasn't going to tell him, because I wanted him to go back to England and be who he was supposed to be, and live the life he was supposed to live, far away from me and my hang-ups and fantasies. I told him that as long as I had his baby he'd always be with me, it was enough, and he could leave me and it wouldn't be so bad. As it turned out, Davey didn't care what I'd done, he brushed off what a bitch I'd been for plotting and planning to deceive him; he told me he loved me and wanted to make babies with me. Plural. He loves me, and I love him, and now we're having a baby...\" \n\nJosie had that triumphant little half-smile she always got when she knew she was right about something, and Sara, she just looked thunderstruck.\n\n\"Lori...you're pregnant...?\" she breathed, and I nodded.\n\n\"Almost four months, give or take a couple weeks.\"\n\n\"And his family knows...?\" she prodded, \"They know you and he are...you know, half-brother and sister, whatever? And they're OK with this?\"\n\nI opened my mouth to speak, but Davey got there first.\n\n\"Yes, Sara, everyone in my family who matters knows the truth; they all know, or they suspect, and they're all still in love with Lori, just like I am. Sophie, my aunt, she knew almost from the beginning, and she's the lady organising this whole wedding thing; Sophie and Lori are so close now that none of this matters to her; as far as she's concerned, Lori's her 'Darling Girl' and no-one's going to gainsay her; it would be an act of ground-breaking idiocy to try and say anything negative about Lori in Sophie's hearing. Sophie's husband, my uncle Richard, is giving Lori away, and as far as he's concerned, Lori's his girl, he's the father of the bride, and he's prouder of her than a cat with two gold-plated tails. Everyone who meets her loves her, but none more than me; she and I are supposed to be together, we're all we need, we're all we'll ever need.\"\n\nI watched Sara's face as Davey spoke, seeing her expression change from thunderstruck to incredulous, to perplexed, and, finally, to the mischievous smile I knew and remembered so well.\n\n\"You guys are serious, aren't you?\" she grinned, and Davey and I both nodded. \n\n\"Serious as a heart attack, Sara; Davey and I are in love, we're pregnant, we're getting married and having this baby in the spring, and we need you to be there for us, for me. Now you know it all. So are we good now?\"\n\n\"You're insane, Lori, both of you, you're both fucking nuts; how the hell are you guys going to pull this off? You're his sister, for criminy sakes!\" grinned Sara, and that's where Davey played his ace:\n\n\"Actually, Lori and I are already married, all legal and above board! Mostly, anyway. We've been married almost four months now, since before we ever left Maine. This wedding is for Lori, and for the family; we got married kind of quickly, so now we're doing it right, the way we should have, with everyone we love around us. My family is already here, and as far as I know you girls are the closest thing Lori has to family, which is why you have to be here too; we need you to be here.\" \n\nSuddenly both girls were all over me, hugging me hard enough to squeeze me to death, Davey off to one side, forgotten for the moment as I tried to answer a million questions from both of them, but I did catch what Sara muttered when she hugged Davey in a neck-breaker:\n\n\"When you left, it broke my heart, Josie's too; you were our big brother, too, even if you never realized it; losing you was the biggest hurt our hearts had ever felt, and we never really got over it. Lori did well to catch you, even if you are her brother, but paste this into your hat: you hurt her and I'll fix you, David Keene, or Denham, or whoever the hell you really are. Never forget this one thing, Davey; I love you like a brother, you ARE my big brother, but Lori's my girl; I'm watching you!\"\n\n*\n\nThat Denham Magic Does Its Thing, Again:",
        "The days whirled by madly, hardly enough hours in the day to suit Sophie. She dealt with everything, from fittings, to planning and tying everyone down for the rehearsal, getting the chapel decorations just right, planning the music, the cake, the reception, place-cards, working out who could sit where, who was feuding with who, and where the girls most likely to cause trouble or try and upstage me, but for various reasons couldn't be excluded, could be shunted to keep them out of the way and out of trouble. (As a sidebar to all this, the girls were astonished at how much Sophie looked like Mom; they couldn't get over how she looked, spoke, even laughed, like Mom; Josie was intrigued to the point she went so far as to speculate that Mom and Sophie had to have had some kind of familial connection; no two random strangers could be so similar, there had to be more to it. As it happens, she was right, but more of that later).\n\nIn the midst of all this, Richard and Hugo were called away to crisis meetings in Hong Kong, so Jimmy and Sophie's gardener were drafted in to stand in for them during the endless practice runs, and fittings, fittings, fittings, as Sophie redesigned the bridal party's dresses pretty much every day. \n\nAt the peak of all this chaos, the boys returned, their business in Hong Kong concluded, and Sophie breathed a sigh of relief. We were in the sitting room in my home, Josie, Sara, Rosie, and I all standing on footstools, chatting and giggling as Sophie and the dressmaker remodelled our dresses yet again, our backs to the door and not seeing Richard and Hugo, until a soft \"I'm sorry, we didn't mean to interrupt anything...' caused both girls to whirl around and freeze, transfixed, staring at the boys while they stared right back, all four of them suddenly playing statues. \n\nI started to introduce everyone, but I kind of trailed off when I realized no-one was listening, and Rosie was nudging me to silence as Richard and Sara, and Hugo and Josie gazed at each other. Sophie's eyebrows went up, then up some more when she realized what was going on, but she kept silent, not wanting to break the spell. \n\nI could tell immediately that this was different; Richard and Hugo went through girls like it was some kind of contest, dating three or four different girls every week, but I'd never seen them struck dumb before. If I'm honest, the super-hot fashion models/media darlings they usually dated made Sara and Josie look kind of ordinary, but I'd never seen the boys stunned into silence and gaze at any girl the way they were captivated by my two friends, and a little bell started ringing way down inside me. This was different. Were Richard and Hugo, playboys extraordinaire, finally caught? From the way Rosie looked at me and nodded, I think I knew the answer, and Sophie, looking silently from her sons to my girls and back again, like a slow-motion tennis match, looked like she knew too. \n\nSophie finally broke the silence, her throat-clearing enough to startle everyone, and then the blushes began; frankly, I was amazed; I've seen both Sara and Josie go into furious, blistering four-letter tirades at some of the brain-dead jackasses infesting the high school without a second of shame or pause for breath, yet now they were blushing the way they used to when we were ten years old and Davey would smile at them.\n\n\"Lori, who is THAT?\" whispered Sara out the side of her mouth, her gaze fixed on Richard. \"My God, he looks just like Davey, they both do, oh Jeez, are they his brothers? Has he got any brothers? Say something!\"\n\nJosie just gazed unblinkingly at Hugo. As for Richard and Hugo, their usual poise and aplomb seemed to have completely deserted them as they stood there silently, with their mouths hanging open, gazing raptly at my girlfriends. It was Sophie who eventually spoke, cutting across the waves of attraction tinged with longing emanating from all four of them.\n\n\"Josephine, Sara, I'd like to introduce my sons, Richard and Hugo; boys, I'd like you to meet Josephine Gregor and Sara Mason, Loretta's friends from America.\"\n\nBoth men stumbled and fumbled through some sort of response, all the while not taking their eyes off my friends' faces, and probably would have stood there dumbstruck for the rest of the afternoon if Rosie hadn't frowned at them and jerked her head at the two girls. Then they moved, possibly at warp-speed, because suddenly they were beside them, offering a hand each to the girls as they stepped down, and then the Denham charm clicked-on, while the seamstress watched wide-eyed, her mouth full of pins, as the girls were led away in a kind of trance, their dresses tacked-up and trailing bits of lace and ribbon, leaving Rosie and I stranded on our perches, completely forgotten. \n\nI caught Sophie's eye, and grinned happily, and I could see the words 'Yesss! At last, Hallelujah!!!' rolling around in her eyes like the reels on a fruit machine, and she, Rosie and I grinned at each other like cats while an awful lot of smoldering looks and intense gazing, green eyes into green eyes, happened on the other side of the room. I couldn't help thinking that from such small beginnings are dynasties born, and I smiled at the thought that those two playboys might finally have found what they'd been looking for all along, and maybe, just maybe, all being well, there'd be a new generation of green-eyed Denham children along one day soon.\n\n The concluding part is completed and awaiting editing and final polishing, so it will be along shortly.\n\nbb1958<i/>"
    ],
    "authorname": "beachbum1958",
    "tags": [
        "brother",
        "half-sister",
        "incest romance",
        "anal sex",
        "pregnancy",
        "wedding planning"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/in-love-with-lori-ch-07-pt-02-1"
}
{
    "title": "1BR Apt.",
    "pages": [
        "Derek was glad that he'd thought of this apartment remodel. It was a project he and his son Luke could work on together. He hoped that it would get Luke to come out of his shell. Ever since his mother passed away a few years ago he'd been closed off and anti-social. Luke gets his handiness from his dad. He loved to work with his hands, and it was not boasting to say that he was pretty good at it too. Fortunately the push, from Derek's dad, to be more took him to state college to study engineering and into a lucrative career afterward. Derek met his wife of 20 years at that college, Theresa was the world to him, and he would have done anything to lay the world at her feet. Fate had a different idea though. Her loss had left a deep scar on their family. It was hard at first, friends and relatives did their best to keep them upbeat and one or two even mentioned that Derek wasn't too old to start again. Those ideas were brushed aside. He would never love anybody like he loved Terri.\n\nLuke took it hard, he was only 14 when Terri found out she had cancer. The doctors did everything they could. Throughout her treatment he would give up being a normal teenager to be home for her when his father couldn't be. She'd get upset with him and tell him to try out for sports at school or join a club, and especially ask a girl that he like out on a date. He'd just brush it off and come home as soon as he could to take care of her. She wasted away before their eyes and in less than a year she was gone. It was a crushing blow to both of them, and as hard as Derek had it, he could tell Luke felt like he was set adrift, and had no guidance. Derek worked, he worked a lot, to keep his mind busy, to keep from thinking about her. Luke just hung around, and kept to himself mostly. He had a few friends but they, for the most part, had moved on after graduation. Luke was accepted to the college where his folks went to and was looking at a similar career to his fathers, no matter how much Derek urged him to do something he wanted. He insisted that he wanted to do what his father does, and build things. He was going to start as a freshman this fall. \n\nDerek, in the interest of keeping Luke from hiding in his room until fall, figured he'd give him a project. They lived in a big house with an large 2 car garage. Above the garage was a space that was large enough to turn into an in-law apartment. He presented Luke with the project to clean it out, and design an apartment. As soon as he had a plan they would build it and rent it out. Thanks to the college there's never any shortage of students looking for off campus apartments. They weren't really close, a few miles, but these days all the kids had cars anyway.\n\nLike anything he put his mind to, Luke had a plan in place pretty quickly. We worked out details for the major demolition and installing plumbing, and electrical etc. He really did his homework, even shopping for materials for finishing like the flooring and appliances. He got it in his head to fully decorate it with the help of some ideas from magazines. What they ended up with was a very nice small 1 bedroom apartment with a nice view over the backyard. Luke had already started school and they didn't think it likely that they'd get a lot of offers right away but they listed the apartment in the paper anyway.\n\nThey interviewed a couple students and even a visiting professor who was teaching here for a year, but nobody fit what they had in mind and too many wanted them to come down on the price. There was no way Derek was going to let anybody devalue the work that he and Luke had put into it, the only one who was going to budge on price was going to be Luke. It was his baby.\n\nIt was a warm Saturday afternoon when Derek heard a woman's voice call out. He was in the back yard puttering around with a rake. He leaned it against the house and walked around to the front where he saw a lovely blonde haired girl walking towards the other corner of the house heading to the yard. He called out to her and she jumped slightly startled. In only a few moments Derek took in the sight of her. She was very pretty, her blond hair fell around her shoulders. She smiled and held out her hand to shake.\n\n\"Hi, I'm Ellie. I was wondering if you've rented the apartment yet?\" He let her know that they hadn't yet, and that his son Luke was in charge of that. He went in and got the keys and let her see it, and she ooh'ed and ahh'ed at it. \"Who decorated it? They did an awesome job.\" He let her know that the whole place was done by Luke, from design to decoration. He smiled at her shock, when he told her he was starting school at the local university this year. \"This was done by a teenager?\"\n\n\"He should be home any minute if you want to hang around. A few of the ground rules that we've placed are that guests please park on the street so as to not block the garage downstairs. Use of the yard and pool are a given so long as you keep it down to a dull roar.\" He said chuckling. \"There's a washer and dryer downstairs in the garage that you can use rather than go to a laundromat. As you probably saw in the ad, utilities are provided including cable and Internet. We can get you telephone if you need it but it's not wired for it up here. We figured most students use cellphones anyway.\"\n\n\"It's perfect. Now I see why you're asking so much for it. Any chance we can haggle on the price?\" She cocked her head smiling, her eyes sparkling. Derek chuckled.\n\n\"That's up to Luke. This is his baby, start to finish.\" He heard the garage door opener beneath them start up. \"You can ask him yourself in a minute. I'll let him know you're here.\" He stepped out onto the landing and looked at the door as he closed it. He thought for a moment that they may have found the right person for the apartment. He smiled as he trotted down the stairs and ducked into the garage where Luke was getting out of the car. His hair was mussed from driving with the window down, his shirt was tight over his well formed chest and arms. The work had leaned him out and toned him up.\n\n\"Hey Luke, you have someone upstairs looking at the apartment.\"\n\n\"I'll guess by the grin on your face it's a girl.\"\n\n\"Is there anything wrong with a girl renting your place?\"\n\n\"No... I just want somebody normal and quiet.\"\n\nHe passed me on his way to the stairs and his father put his hand on his shoulder. \"I have a good feeling about this one. Trust your instincts.\" He nodded and made for the stairs taking them two at a time. I heard him open the door and close it behind him, and I went back to the yard whistling a little tune. She could be just the thing.\n\nA short while later, Luke popped around the corner of the garage and slowly wandered through the yard.\n\n\"Well?\"\n\n\"She tried to get me to come down on the price.\"\n\n\"Really?\" He smiled trying not to laugh. \"How did that go?\"\n\n\"I asked her how much she could reasonably afford, and I halved the difference. She took it.\" He smirked.\n\n\"How much lower did you go?\"\n\n\"A hundred bucks. Non-smoker, no boyfriend and she says she not a partier. She's a senior in culinary arts and nutrition. She offered to cook for us occasionally if we don't mind being her test subjects. Her name is Ellie Love.\" Luke grinned, but didn't say that he'd thought about dropping two for the pretty coed.\n\n\"No shit?\" He laughed. Luke just shrugged.\n\n\"She's calling her folks to let them know she's found a place.\"\n\nEllie started moving in the next day. Luke was out in the driveway washing his car, the sound of music filtered down from Ellie's open window as she unpacked. Derek watched Luke from the window for a moment and caught him looking up at the window off and on. He would bet anything she was intentionally wandering back and forth to get a look at him too.\n\n\"Hey Luke?\" Ellie called down.\n\n\"Yea?\" He replied.\n\n\"Any chance you could take me shopping for some kitchen stuff? There isn't much up here in the way of plates, glasses, silverware, you know.\"\n\n\"Sure, let me know when you're ready.\"\n\n\"Give me 10 minutes and I'll be down.\"\n\nEllie went and changed. She knew she was older than him by a couple years. His father mentioned he'd turned 19 last month. Luke was hot with his dark hair and dark brown eyes, but he seemed so quiet and shy. After the wild roommates and crazy party atmosphere of the apartment she shared last year, this was going to be a nice change. \n\nShe worked in a small caf\u00e9, after high school and found she loved it and thought it might be a cool idea to start her own. So she'd decided that getting it right was going to require some learning and went back to school. Now at 23 she was close to finishing her degree and moving on to realizing the dream. She threw on a striped tee and pushed her sweats off and found a pair of jeans in one of her bags and went to the bathroom to check herself in the mirror. She knew she wasn't a knockout but she was pretty cute. She knew that from the double-takes she got from guys at school. She was short, in her opinion, at five foot three, her sandy blonde hair hung past her shoulders, and her dark brown eyes were always sparkling. Her dad said they were full of mischief. If he only knew.\n\nShe pulled the door shut behind her checking that it had locked and bounced down the stairs like she was on springs. She watched Luke for a moment as he wiped down the car, and got a tingling sensation as he leaned forward, his jeans tightened around his cute ass. 'Get a hold of yourself girl' she thought. She reached her hands behind her causing her shirt to tighten across her small breasts, and cleared her throat.\n\nLuke looked over his shoulder at Ellie. Damn she was cute, but she didn't act like she knew it. He gave her a small smirk.\n\n\"Sorry about the kitchen. I didn't stop to think that someone moving in wouldn't have dishes of their own.\"\n\n\"Oh, no problem.\" Ellie countered quickly. \"It's just that my last place, everything belonged to my room mates, and as long as I kept them fed they didn't care what I used.\" She smiled. \"I could use a couple towels too. I'm on a budget so let's hit up that little French boutique, Tar-jay.\"Luke laughed at her joke and reached for the passenger side door opening it for her. He bowed with a flourish.\n\n\"After you milady.\"\n\nLuke was already winning points as she climbed into the car. He hopped in and started the car backing out of the driveway. On the way to the to the store Ellie drew him out asking what he was going to school for, and what he planned for after. He didn't do sports or really anything with friends. She could tell he was one of those quiet loner types, and he had a lot going on in there that nobody ever saw. She decided then and there that she'd make it her goal to draw him out of his shell.\n\n\"Maybe you can build my swanky caf\u00e9 for me when you graduate.\" She winked at him.\n\nLuke looked over at her for a moment and smiled. \"Yea I'll get right on that.\"\n\n\"Seriously, that apartment is awesome. I bet it wouldn't be much of a stretch. Your dad said you planned it nearly free hand. You don't do something like that without real talent.\"\n\nLuke just shrugged and said thanks.\n\nThey pulled into a parking space and Ellie grabbed a cart and hopped up on the rail, riding it a few feet towards the store like a kid. This gave Luke a great view of her backside and she knew he was looking by the expression she saw when she looked over her shoulder. He looked slightly shocked then looked down and away. She bit her lower lip and grinned. This was going to be fun, she thought.\n\nThey made their way into the store and Ellie took the long way around to housewares and chose a cheap set of dinnerware, then some glasses and flatware. She went over the cooking stuff with a fine tooth comb looking at labels and chose a few items. The cart filled up fast with the large items. She decided that she'd done enough damage there and wandered around a corner and started up the aisle. Luke just pushed the cart along behind her watching her walk. He was pretty sure she hadn't wiggled her butt like that on the way in. She reached out to a blouse hanging next to the aisle and felt the fabric and held it out and let it go and she walked past a rack of lingerie.\n\nEllie let out a little ooh when she saw a little yellow bra and panty set hanging up and took it off the rack. \"What do you think?\" She asked holding the cups up to her chest, grinning devilishly at Luke. His face turned red and he looked around.\n\n\"It's definitely your color.\" He said and mumbled something after.\n\n\"What?\" She asked, making him repeat it.\n\nHe breathed deep and replied. \"Did you want to pick up some food while we're here? The basics at least?\"\n\nEllie gave him a sly smile. \"Chicken.\"\n\n\"I don't know if they have chicken, but they've got groceries. You know, canned, boxed and frozen food, stuff like that.\"\n\nShe walked right up close to him and reached over and set the lingerie right in the top of the basket where he was sure to keep it at the forefront of his mind. \"Sure, let's go stock the cupboards.\" She chose some basic dry goods, a couple cans here and there. \"If I'm going to be a chef, I can't be relying on packaged goods too much, but sometimes a girl needs a night off.\" She grabbed a couple cans of soup and found some microwave popcorn piling it all on top of the cart. They made their way to the check out and the lady behind the counter was scanning away and looked up at the two of them noting what they were buying.\n\n\"You kids setting up home for the first time?\" The lady smiled.\n\nEllie wrapped an arm around Luke pulling them together and laid her head on his shoulder. \"Yes, we're going to be so happy.\" She peeked out of the corner of her eye and noticed Luke had gone red again. She pursed her lips and slid her hand across his lower back taking her time letting it drop and grazing his butt. The feeling sent a shock through Luke and he wasn't sure how to react so he did his best to forget it happened. They brought their cart out to the car and packed it away. On the trip home they didn't speak, and just listened to the radio. Luke turned off the car and reached for the door when he felt Ellie put her hand on his and give it a squeeze.\n\n\"Sorry, I was just...\" She said softly, biting her lower lip.\n\nLuke looked at her and nodded, and got out and began unloading the car. The little table was piled with boxes and bags were strewn around the floor.\n\nLuke was about to turn and leave when Ellie stopped him.\n\n\"I was just having a little fun. I didn't mean to embarrass you.\"\n\n\"I know, it's okay.\" \n\n\"Are you busy this afternoon? I could use a hand unpacking all this stuff and washing the dishes.\"\n\n\"Sure, I can help.\" He took the first box and opened it up and brought it into the kitchen and started loading the dishwasher with the plates and bowls. \"We forgot cleaning supplies. I'll run downstairs I'm sure we've got plenty. He headed for the door and trotted down the stairs, and his own kitchen.\n\nEllie decided to get more comfortable and wandered into the bedroom and lost the shirt and jeans. She had just pulled on her sweat pants when the door opened and Luke walked in. She hadn't bothered to close the bedroom door and he got a full on look at her standing there in her sweat pants and a lacy pink bra. His eyes locked on hers and he froze. Ellie just smiled and reached for her hoodie putting it on and zipping it up to mid chest just barely concealing the bra. She walked out of the bedroom.\n\n\"Relax it's the Internet age, I'm sure you've seen a girl in lingerie before.\"\n\n\"Uh yea, sorry I should have knocked. It's just that I've been up here so much while decorating that I forgot someone lives here now.\"\n\nEllie shrugged , \"Mi casa es su casa. You're welcome up any time. I don't make it a habit to walk around like a lingerie model, don't worry. I don't have the body for it.\"\n\nLuke mumbled something, and Ellie was sure it was a denial of that claim but she just bit her lip to keep from smiling. Luke started running water to clean the larger items in the sink and Ellie started putting things into cupboards. The tight space meant they were brushing against each other often. Luke noticed Ellie used him as a balance whenever he was in reach, a hand on his shoulder when she leaned into a cabinet. She placed a hand on the small of his back again to see what he was cleaning.\n\n\"No abrasives, just soapy water on that one. That's a pro quality non-stick saut\u00e9 pan right there.\" She winked. \"It said so on the label.\"\n\nAs she leaned back Luke got a light scent of her perfume. He hadn't noticed it before but it was sweet and flowery. Had she put it on after he'd gone downstairs he wondered. It was having an intoxicating effect, along with her touch. He was glad he was facing the sink to hide the bulge that was forming in his jeans.\n\n\"I'm going to go throw these towels in the wash real quick.\"\n\n\"Okay I'll just stay here and slave away in your kitchen like a drudge.\" Luke's response was surprising causing Ellie to bust out laughing.\n\n\"Yes! I have my own kitchen drudge!\" She did a little fist pump in triumph.\n\nLuke peeked over his shoulder as she made for the door watching her cute little butt with the store name plastered across the seat of her sweats. He'd better get out of here fast or he wasn't going to make a safe exit with the tent in the front of his jeans. He wiped down the last dish and headed down the stairs and poked his head into the garage telling her that he was done, and if she needed anything else to just let him know. She thanked him and he rushed into the house.\n\nEllie went back up to find the dishes all cleaned and laid out waiting for her to decide where they'd be put. She worked efficiently putting things in their logical places and had just enough room to fit everything she'd bought. She saw the yellow lingerie she'd bought and smiled. She hadn't intended to buy it, but wanted to tease Luke. They were cute though so she put them in with her wash.\n\nThe weekly grind began, everybody leaving the house and heading off in their respective directions. Ellie got home late from her job at the little caf\u00e9, and hit the books for an hour or so before taking a shower. She wandered into the bedroom and looked out the window hearing something moving around. She spied Luke hauling a trash can and recycling to the curb.\n\nLuke turned and looked up at the light in the window and saw her outlined in soft yellow light. She stood there in a long sleeve shirt, unbuttoned part way down the front. She lifted a hand and gave him a little wave and he waved back.\n\nEllie noticed that after he waved he didn't go back inside right away and she pointed to the door and beckoned him. She smiled when he knocked on the door this time. \n\n\"Come on in. You already know I'm dressed this time.\"\n\n\"Well I couldn't tell if you were wearing pants. What's up?\"\n\n\"Nothing, I was bored and wondered if you wanted to hang out and watch TV or something.\"\n\n\"Sure, I guess.\"\n\n\"I'm in a junk food mood. Would you like some cookies and ice cream?\"\n\n\"Yes, please.\" He replied with a little more gusto.\n\n\"I baked the cookies myself. The ice cream is store bought.\" She chuckled. \"Go ahead and turn on the TV, find us something to watch.\"\n\n\"What do you feel like?\"\n\n\"Anything really, nothing to cerebral I get enough of that from school books.\" She scooped up a couple bowls of the ice cream, adding a couple cookies to each, and added spoons.\n\nShe walked into the living room handing him a bowl and sat next to him curling her legs under her. The fact that her nipples were rock hard from standing in front of the open freezer wasn't lost on Luke, but he didn't stare. They sat watching the last few minutes of a sitcom, only the sounds of spoons tapping bowls and an occasional chuckle interrupted the silence. When the show ended Luke took the bowls into the kitchen and rinsed them out. When he came back Ellie noticed he had a little ice cream on his lower lip and did her best not to laugh.",
        "\"What?\"\n\nShe shook her head and patted the cushion next to her. When he sat she lifted his arm wrapping around her shoulders. \"It's just that you missed a spot.\" She leaned in and licked the drying ice cream from his lower lip and smiled. It was make or break time, what would he do she wondered. The answer was only a moment away when the shock left his eyes it was replaced by hunger. Luke leaned into her and kissed her, she responded quickly returning it in kind. He was slow and a little clumsy, but he made up for it in ardor.\n\n\"Mmm, you taste like cookies and cream.\"\n\n\"You do to.\" Luke said breathing in deeply. \"I uh...\"\n\n\"Stop thinking so much.\" She leaned in and kissed him again, this time her tongue slipped past his lips looking to play. Luke parted his lips and was quickly assaulted, Ellie grabbed the front of his shirt for leverage as her tongue delved deeper luring him out. She felt bold and went with it, and threw a leg over his lap and settled down wrapping her arms around the back of his head and took the upper hand. A few minutes of oral assault and she stopped and smiled, their foreheads touched.\n\n\"You know you can touch me.\" She whispered. \"I don't bite.\" He looked back at her wide-eyed, his chest heaving as he gasped for breath. She reached down and took his hands and placed them on her hips as she began again. She nudged his hands imploring him to explore and he began by lowering them around her flannel covered rear, massaging it with his strong hands. She responded with a soft moan, hoping to encourage him. It worked as he gripped her harder pulling her hips down against his. She could feel how hard he was through his jeans and was making her wet to know only a few layers of clothing kept this from getting out of hand.\n\n\"I uhh...\" Luke started.\n\n\"What?\" Ellie asked softly kissing the tip of his nose.\n\n\"I uhh, I've never really done this before.\" He said his cheeks coloring even more.\n\n\"You've never made out with a girl before?\" She sat back on his knees, genuinely surprised. Luke was hot and he didn't even realize it.\n\n\"No.\" He said looking downward embarrassment apparent on his face.\n\nShe lifted his chin and kissed him softly. \"Well you're doing just fine for a first-timer, just relax.\" His hands slid upward lifting the hem of her shirt and his hands wrapped around her waist, his touch was hot on her skin kindling the fire burning inside. She wasn't sure if it was luck or instinct that made him break their kiss and graze her neck with his lips kissing softly down then back up to her ear but his lips were eager and she gasped as he nibbled her neck. His hands began exploring upward, her shirt rising with them when he suddenly stopped right at the base of her breasts. Her body was screaming to have him continue as her lips latched back on to his, their tongues dueling.\n\n\"Please?\" She whispered softly. His thumbs were so painfully close but not completing the journey up her torso. He took a moment to realize what she was asking, and he lifted his thumbs brushing the bottom of her breasts. She gasped, she was nearly ready to rip her shirt off and bury his face into her chest but the build up he was creating was so intense she didn't want it to end. His hands found her nipples, applying pressure and rolling them around. Ellie leaned her head back and whimpered as Luke just stared at his hands working underneath her shirt.\n\nIn a swift movement Ellie had crossed her arms over her chest and whipped the shirt over her head, her hair falling wildly over her face. Luke's mouth dropped open as he saw what he was doing. Ellie noted that he'd stopped to stare, and reached up with her hands taking his and massaging her breasts with his large rough hands. She let out a delighted hum from deep in her throat as he began taking the initiative. He began to lean forward, then looked up into her eyes and sat back. Ellie wasn't going to let him off the hook and shook her head slowly, before reaching for the back of his head and pulling it to her breast.\n\n\"Don't shy away, follow your instincts.\" Ellie said softly.\n\n\"They're beautiful.\" He said before planting a kiss in the center of her chest. He kissed his way over and nibbled on the nipple with his lips before gently stroking it with his tongue. Ellie's breathing was getting more ragged and shallow. She grabbed him by the cheeks and tilted his head back and dove into his mouth tongue first.\n\n\"We should stop, before things get out of hand.\" She gasped between kisses. His hands were roaming up and down her back pulling her hard against him.\n\n\"Do we have to?\" He gasped.\n\n\"Yes.\" She said rolling off of his lap, her bare chest shone with a flush of pink, her nipples were bright pink as well. She tugged her shirt out from behind her and held it to her chest as she got her breath back. \"I don't want to be known as the kind of girl who puts out before the first date.\" She giggled.\n\nLuke just stared at her confused, longing to have her back in his arms. \"Yea, I guess.\" After a few more minutes he spoke up again. \"What are you doing Friday night?\"\n\nEllie's eyebrows went up and a smile spread across her face. \"Working, but I'm off Saturday night.\"\n\n\"Would you like to go out, with me I mean?\" Luke said sheepishly.\n\n\"On one condition.\"\n\n\"What's that?\"\n\n\"That this isn't why you're asking.\" She said lifting the shirt and flashing her breasts at him.\n\nHe stared at her chest for a moment and she covered back up. When their eyes met his expression softened and he shook his head. \"You're beautiful, but that's not the only reason I'd like to go out with you.\"\n\n\"Why then?\" Her curiosity peaked.\n\nHe shrugged. \"You're fun, smart, you make me laugh, and you're beautiful, even fully dressed.\"\n\nShe beamed up at him. \"So what are we doing on Saturday?\" \n\nLuke shrugged. \"I'll think of something, trust me.\"\n\n\"I'd better get some sleep... class in the morning.\"\n\nEllie suppressed a giggle when he stood, the front of his jeans was prison for the raging monster that she'd whipped into a frenzy.\n\n\"Sorry.\" She said softly, and bit her lip.\n\n\"Don't worry, I'll take matters into my own hands.\" He sighed and she chuckled. She walked him to the door. As he turned to say goodnight she wrapped her arms around his neck dragging him down to her kiss while crushing her breasts against his chest. His hands instinctively went to her waist pulling her to him while their mouths locked. She brought her hand down between them and stroked him through his jeans.\n\n\"Don't beat him too bad, he's been a good boy tonight.\" Luke chuckled and left, taking the steps slowly. \n\nEllie leaned back against the cool door, her eyes closed thinking about how the little things in life change when you least expect them. She hadn't had a steady boyfriend since last school year, and even then that wasn't very involved, they were more like friends with benefits. Luke on the other hand gave her a tingle that she hadn't felt since she was a teenager. She fret for a minute at the fact that she was older than him, but brushed that aside. Besides, Luke was a lot more mature than any 19 year old she'd met before. She stopped and grabbed a towel from the bathroom before heading to bed. She was going to need it after the evening she'd just had. She tossed her shirt onto the bed and spread out the towel and pushed off her flannel bottoms, her panties were soaked. She lay back on the towel rubbing herself slowly through the damp lace as she recalled the feel of his rough hands on her skin and the fire from his lips. She circled her clit through the fabric, with a sharp intake of breath she dragged her fingers over it. She reached over into her nightstand drawer, reaching for a small pink vibrator. She couldn't get out of the panties fast enough, pushing them down and kicking them onto the floor. She flipped the switch and it came to life and found the mark quickly. She didn't hesitate, she went right for the quick release while she imagined Luke between her legs performing the act she now performed upon herself. Her orgasm hit her like a rogue wave, ripping through her as she arched her back and moaned loudly. After a long moment of tension she relaxed back to the mattress, the vibrator slipping free onto the towel as she panted. She felt electrified a slight tremble overtook her. Eventually she wiped up the considerable mess she'd made, and sheepishly wondered how well sound proofed the walls were. There was a good ten or twelve foot breezeway between the main house and the garage so she didn't worry that she was overheard.\n\nLuke leaned back against the wall, his hard cock finally beginning to soften. He had quietly stepped into the garage when he got downstairs and leaned against the hood of his car to think about what had happened. He was also hoping that his erection would relax a bit before he went into the house, just in case he bumped into his father. He heard Ellie moving around upstairs and mentally followed her footsteps as she walked. He heard the creek of her getting into bed just above his left shoulder. He stood there for a moment longer and started hearing her making noises like she had only a little while before, but louder. It took him a moment to realize what she must be doing and the thought took him by surprise. She was upstairs getting herself off. He had a major ego boost from that, and her sounds were doing just the opposite for his jeans than he'd hoped. He decided to release the tension. He reached over for a couple of the heavy paper towels that were on a shelf there in the garage. He opened his fly releasing his engorged cock and began stroking it, while listening to her muffled moans. The feel of her strong, lithe body in his hands, the feel of her spread across his lap from only a few minutes earlier, the smell of her, so sweet and flowery. It wasn't long before he was hitting the point of no return. He heard her moan, and call out his name, the shock nearly made him stop mid stroke as his eyes opened instantly. A few sharp moans came from over his left shoulder and then silence. The realization hit just as his orgasm did, he hurried to catch his load with the paper towels. He leaned his head back catching his breath, then quickly cleaned up, ditching the evidence into one of the trash cans. He silently made his way into the house.\n\nFriday morning came and Ellie hopped into her car and after several attempts, it didn't start. She pounded on the steering wheel a few times, and thankfully the windows were up or the entire neighborhood would have heard a lovely young lady swearing like a sailor. She got out and peeked into the garage door window. Great, Luke's car was still there. She knocked on the door and he opened the door wearing only jeans. She was caught by surprise staring into his chest, a few dark wispy hairs curled against the lightly tanned skin. She looked up slowly seeing he was standing there with a toothbrush hanging out of his mouth.\n\n\"Hi, my car shit the bed, are you headed into school soon?\" She asked smiling. Damn he looked this good rolling out of bed in the morning?\n\n\"I don't have class for another hour, but I can give you a ride. C'mon in while I grab a shirt.\"\n\n\"Not on my account, I hope, you look just fine without one.\" Ellie thought. Luke grabbed his books and laptop and they headed to school.\n\n\"Listen, I can get a ride to work after classes. What I was wondering was... would you be a sweetheart and pick me up after my shift? Nobody at work lives on this end of town.\"\n\n\"Sure, no problem.\" He smiled. She gave him the address and time, and told him to come early if he wanted and she'd buy him dinner too.\n\nSchool went quickly, with nobody lingering on a Friday and Ellie got a ride to work. She thought about what the specials had been today and decided to whip up something special for Luke. It wasn't easy on a Friday night, it was pretty busy, but the regular client\u00e8le dropped off quickly after dinner, knowing that the caf\u00e9 closed at 8. A couple tables sported coffee sipping hipsters but for the most part the place had cleared out by then. Ellie had whipped up a little dish for them to share while she cleaned up the kitchen.\n\n\"Damn.\" Came a voice through the little window. Jody, one of the servers had whispered loud enough to be heard. \"He's hot.\" Ellie popped her head up and scanned where Jody was looking and saw look scanning back and forth. She grinned ear to ear. \n\n\"Back off, he's already taken.\" She said softly, but with a little edge of threat in her voice. He may not be taken yet, but she didn't need any competition from the bubbly little server. \"Can you sit him over at the chef's table.\n\nJody chuckled. \"Some chef's table, it's just the table nearest the kitchen door. What's his name?\"\n\n\"His name is Luke, and be nice, I have a large selection of cutlery at hand, and I know how to use it.\" \n\nJody walked over and introduced herself. Saying that Ellie had told her she had a friend stopping by. \"She said a dark eyed handsome stranger was coming to pick her up. I told her to snap out of it, Prince Charming isn't real. Then you have to go and prove me wrong.\" She smiled, and steered him over to the table against the wall near the kitchen, and fawned over him for a moment and got him a drink. Ellie made sure nothing was burning and wiped her hands on her apron and snuck out of the kitchen.\n\nA smile spread across Luke's face when he saw her, which warmed her heart. She walked over and he stood up, such a gentleman she thought. She couldn't help herself and walked right up to him and kissed him softly. At first he seemed surprised but he didn't take long to return it.\n\n\"Hi.\" She said drawing it out. \"Are you hungry?\"\n\n\"You mentioned dinner, so I haven't eaten since lunch.\" He grinned.\n\n\"Good, park it, and I'll go whip it up.\" She winked at him and turned and wiggled back into the kitchen. Her ponytail danced back and forth as she peeked over her shoulder to make sure he was watching. She put herself into work mode and started pulling ingredients together. When in work mode Ellie was a sight to behold, like a kitchen ninja she got more done with fewer moves than anybody else in the caf\u00e9.\n\nWhat seemed like only a few minutes later she walked out of the kitchen with two plates of seared scallops and linguine, setting one down in front of Luke and the other across from him.\n\n\"One second.\" She said as she reached down and pulled the apron string sliding it off her waist. She unbuttoned the chef's coat she wore and dodged back into the kitchen to hang them up.\n\nShe sat down and they began. Ellie peeking up to see if Luke was enjoying it. The speed with which he was eating told her what she wanted to know. \n\n\"I should have asked you if there was anything you didn't like. I didn't even think of that before hand. Seafood can be touchy for some people. Hell I didn't even think to ask if you were allergic.\" She said getting frustrated with herself.\n\n\"No, it's delicious!\" He was being completely genuine. He saw her getting upset and reached across the table to take her hand and rubbed the back of it with is thumb. \"I love seafood. My family used to go out to the beach in the summer...\" He trailed off, his expression softened.\n\nIt was Ellie's turn to comfort, and she took his hand firmly in hers. \"Tell me about it. I bet you had a blast.\" Luke went on to tell her about a trip to the beach they'd taken years earlier and he and his dad had gone fishing and he caught a striper that nearly hauled him overboard. He went from excited to wistful. She knew he was thinking about his mother, his dad had told her the previous week, and sympathized with him.\n\n\"I baked a small batch of cookies when I got here. Want to try one? They're sort of an experiment, but I think they came out pretty good.\"\n\nNever one to pass up a cookie he smiled and nodded.\n\n\"That's what I love about working here. I get indulge my creativity, and if things work out sometimes it makes it on the specials board.\" She said setting down the frosted lemon sugar cookies. They talked for a while longer and a loud scrape of a chair pulled them out of their reverie. Jody had been sweeping and Ellie noticed the time. They had closed nearly half an hour before.\n\n\"Oh my god. I'm sorry Jody. I lost track of time.\" Ellie hopped up and started clearing the table.\n\n\"No worries hon. I can see why. You just need to clean up that and we're out of here. I'd ask if you need a ride home, but I think I already know the answer to that.\" She chuckled. \n\nEllie wiped down the table and Luke helped out by flipping the last few chairs up onto the tables so Jodie could finish sweeping. He waited in the front while the girls finished up in the back. He looked out the window at the darkened street, the old style street lamps lending small town charm to the night. They came out of the kitchen whispering between themselves.\n\n\"You're sure you don't need a ride? This one looks a little dangerous.\" Jodi said laughing.\n\n\"I'm fine, besides he knows where I live, he's my landlord.\" Ellie grinned.\n\n\"I wasn't talking to you, I'm worried for him.\" They all got a chuckle out of that as they locked up and made their way to their cars. Luke opened up the door and held it for Ellie, these small gestures went over much bigger than he realized.\n\nOn the ride neither spoke when Luke felt Ellie's hand lay on the back of his giving it a squeeze. \"Thank you for saving my butt today.\" He just looked over and shrugged.\n\n\"You would have done the same for me I'm sure.\" He smiled at her for a moment and turned back to the road. He was honestly elated that her car hadn't started.\n\nEllie sighed. \"I hope it's nothing major. My dad had the car gone over before I came back to school. I can't afford anything big.\" She looked out the window, the lights of town faded behind them as they entered the suburbs. \n\n\"Tomorrow's Saturday, I can take a look at it if you want, if it's something simple I can probably fix it.\"\n\n\"Oh, would you?\" She squeezed his hand harder. They got back to the house and Ellie reached over the seat to grab her bag. Luke watched her lean frame twist, and her rear end stick up, her jeans stretched over it nicely. He remembered just how nice it felt too and longed to hold it again. Ellie was no fool, she knew full well Luke was staring at her butt while she pretended to be looking for something in her bag. It didn't hurt to pique his interest though. She sat back in the seat dragging the bag over with her.\n\n\"You coming up?\" She asked smiling.\n\n\"I don't know, you probably have stuff to do. You know school work or something?\"\n\n\"I do have some reading to do, but I can do that later. I'm feeling a little restless and I can't sit still and read when I'm like this.\" Luke's eyebrows went up a bit.\n\n\"You don't have to. I mean if you want to come up and grab the car keys in the morning that's fine too.\" Her smile began to fade.\n\n\"Oh, I can get them now, that way you can sleep in if you want to.\"\n\n\"Have something planned for tomorrow yet?\" Ellie asked sweetly. Luke just grinned. \"You're not going to give me a hint? A girl needs to know how to prepare for a date you know.\"\n\n\"Jeans will be fine, and bring a sweater or sweatshirt in case it gets cold. Oh, and walking shoes.\"\n\n\"So something outdoors? Okay then.\"\n\nHe wouldn't give her any more information than that. He enjoyed keeping her guessing.\n\n\"Would you like to play a game? I found a box with my bucket of Jenga blocks while I was unpacking some stuff last night.\" Luke nodded smiling and Ellie went and got the game. They sat on the couch and Ellie started stacking blocks and handed the bucket to Luke and directed him to keep stacking and she went to the bedroom and slipped off her jeans putting on lounge pants with some mall store logo down the leg and came back.\n\n\"That feels better. Do you want something to drink? I've got a bottle of wine, or something else maybe?\" He agreed to what ever she wanted. She opened the bottle of wine and poured a couple glasses and brought it over to the table putting them out of the way of game.",
        "\"Have you ever had wine before?\"\n\n\"I'm nineteen, I haven't been under a rock.\" He chuckled. \"My mother liked wine so I've tried several different types and I like it.\" He took a sip and swirled around his mouth taking in a little breath of air. \"Stone fruit, oak, I'd say a California Chardonnay.\" He added. It was Ellie's turn to raise eyebrows.\n\n\"Very good! Napa Valley to be exact.\" She looked at the blocks and noted he hadn't put the last one on the top yet. She took it and put both hands behind her back. Luke noted just how nicely her top stretched across her chest as she did this. \"Pick a hand.\" He picked the one with the block winning the starting move.\n\n\"What are we playing for?\" He asked, sounding crafty.\n\n\"I don't know. What do you have in mind?\" She smirked, wondering if he had the same thing in mind that she did.\n\nHe shrugged. \"Loser has to perform a strip tease for the winner.\" She grinned ear to ear hearing this.\n\n\"Okay hot shot. I'll have you know I'm a master at this game. I hope you're wearing cute briefs.\"\n\n\"Maybe, you'll have to win to find out.\"\n\nThey both concentrated on the game intently for a few moves, and then the smack talk began. They taunted one another as the blocks started to wobble. \"I don't know, maybe you should stay in the kitchen and let us real men handle the engineering.\" Luke said. Ellie reached over and flicked his ear sharply causing him to yelp in pain while he giggled.\n\nThe game progressed more slowly as the tower got more shaky. Eventually the tower fell to Ellie placing a block on top. \"Shit.\" She said, but she didn't really mind it. She was actually excited about this idea. She had hoped to see him perform for her but the exhibitionist streak in her wanted to show off to him too. \"Put the blocks away and find some music you like. I'll be right back.\"\n\n\"Where are you going?\" He asked picking up the blocks watching her stand. She leaned over and turned the lights down.\n\n\"Well if I'm going to do this, I'm going to do it right.\" She winked and went into the bedroom again. He had toted up the game and set it aside and grinned to himself that he'd pulled off the coup. After the other night all he'd been able to think about is her body. Her pert breasts, and smooth skin, now he was going to see her strip for him. He was flipping through music until he found some dance music. He started tapping his foot and realized she didn't have much room, so he slid the coffee table aside toward the window. The window! He drew the curtains so nobody would see her. The song he was listening to finished and she still hadn't come back. He wondered momentarily if he'd gone to far when he heard her open the bedroom door. She must have turned off the lights before opening it because he didn't get a peek until she walked out into the room. \n\nShe had put her hair up in a lazy twist on top of her head, and changed into a red satin top and gray skirt. She had even gone so far as to put on heels. She looked absolutely stunning as she walked out and noted that he'd made room for her. A small smirk touched her now red lips as she noted the look on his face. She was happy with the reaction but didn't want to let on that she was enjoying his prize as much as he was. She looked off into the distance and listened, then nodded.\n\n\"Are you ready for me, Luke?\" She asked, her voice husky.\n\nHe knew the line she quoted was from a movie, but he just sat there, his mouth hanging open.\n\nShe quirked her lips in a wry smile. She began to move with the music stepping carefully, heels on a carpet weren't conducive to graceful movement. She reached down and slipped the heels off tossing them aside and continued. Her sensual movements were already having an effect on Luke and for the first time he didn't care if he hid it or not. Ellie was beautiful, and he was totally captivated by her. She had turned sideways and began unbuttoning the cuffs of her blouse, she turned her back to him, her hips swayed to the music as she got into the music. She reached up and pulled the hair clip out and shook her head, letting her hair cascade down around her shoulders. She looked over her shoulder shooting him a sensual gaze, her hands worked the buttons of her blouse open. She spun around holding the front of her blouse closed and stepped towards him letting her hands fall as the blouse opened giving him a peek of the red and black bra she was wearing beneath it. He swallowed audibly and his jaw dropped open again.\n\n\"Thirsty?\" She reached over and handed him the half empty wine glass. He took the glass and practically gulped the remaining wine. \"Now we hadn't spoken of limits before this all started. Am I on my own with regards to how far I let this go?\" She quirked an eyebrow at him, knowing full well she was going all the way, but let him wonder just what he was going to see. She reached up and lifted the blouse from her shoulders and let it slide down her arms slowly. She flipped the blouse over the back of the couch next to him. He could smell her perfume, it was a stronger than before.\n\nHe swallowed audibly. \"Yes, as far as you comfortable with.\"\n\n\"Is it how you imagined it would be?\" He just nodded at her open mouthed. She tapped his ankles wider and danced between his spread legs swaying to the music and lifting her skirt giving him a peek of her smooth thighs. She noted that his jeans were straining to contain him. She couldn't wait to get a look at him either. She turned with the music and reached behind her making a come hither motion with her finger and pointed at the zipper on the back of her skirt. He didn't move for a moment and she looked over her shoulder at him and he was staring at her shimmy back and forth. He didn't move, and she directed his attention back to the zipper. As he reached forward she swayed to the side then back again avoiding his grip. He managed to catch the zipper and slide it down slowly exposing the back of her black satin panties. He reached up and pushed the fabric together releasing the hook. She took his hands and laid them flat on her hips as she swayed with the music. She gave them a small nudge downward and he understood she wanted him to remove the skirt. The skirt gave way as it slipped past her hips, and he gasped at seeing her beautiful behind swaying in front of his face. She stepped free of the skirt and he bent to pick it up and laid it next to her blouse on the back of the couch as she turned.\n\n\"How am I doing?\" She asked softly. He just nodded excitedly. Ellie was pretty sure that if she asked him to, he'd rob a bank for her right now. It was an exhilarating feeling for her to have him in this state of excitement. \"Good.\" She smiled. \n\nShe danced slowly to Wonderful Tonight. How appropriate he thought. As he stared in wide eyed wonder at this beautiful girl.\n\nShe ran her hands up and down her body slowly, her head swayed from side to side, her hair partly covered her face as she did. She peeked up at him as the song ended. She nudged his legs together again, and reached down and pulled his knees together. She turned and sat on the very edge of his lap, her butt just barely on his knees. She reached behind her and fanned out her hair and gathered it up over her head. The next song began and she waited for him to take the cue. \"Undo me.\" Luke wasn't sure who's undoing it was when he reached up and unhooked her bra, his hands shaking. She let her hair fall as soon as he did and took the shoulder straps down one at a time before standing again. She held it in place as she released first one then the other shoulder straps. She turned her back to him and tossed the bra to him over her shoulder. He put it with the rest of her clothing. She was standing there swaying in only her black lace panties. He noticed they had a tiny red bow on the front when she had walked over to him a minute before. She spun around with the music, her hands cupping her breasts as she took a step towards him, her nipples stood out hard and pink. She swayed to the music losing herself in the beat. She leaned forward placing her hands on his shoulders.\n\n\"We're done, right? I mean, you didn't want me to take everything off did you?\" She was clearly taunting him. Luke closed his mouth, swallowing hard and opened again to speak and nothing came out. \"No? Okay, I guess we're done then.\" She said standing again.\n\n\"No! I mean please... I...\" Luke stammered.\n\n\"Please what, Luke?\" She asked innocently.\n\n\"Please take them off.\" He whispered desperately.\n\n\"No Luke, if you'd like them off, then you take them off.\" She replied turning her body in a few circular sways. She banged her hips side to side with the beat of the music, and looked over her shoulder to see what he was doing. His eyes were following her butt as she swung it back and forth. She stopped moving. \"Well?\" She asked over her shoulder. Luke raised shaky hands from his lap wondering if this was real or if he was going to get slapped away at the last minute. His hands were like fire on her skin sending butterflies to her core as he ran his thumbs down, pulling the lacy fabric with them. He was going slowly, the fabric peeling off like the skin from a fruit. They slipped over her beautiful behind and the fabric stuck between her legs for a moment, but he kept pulling, down her smooth thighs past her knees. He let go and saw the slightest peek of her lips, they were pink and very wet. She stepped out of the panties and took a step away from him and turned covering herself with her hand.\n\nThe scent that bloomed now that her panties were off made his breathing even more shallow and fast. He honestly wasn't sure why his jeans hadn't exploded yet.\n\n\"Are you sure you want to see?\" She said, her voice low and husky as she swayed with the music again. He only nodded slowly as he stared at the hand she was covering herself with. She drew her hand lightly against her body and slowly ran it up over to her hip uncovering herself for him. She was shaved and pink, moisture shone on her slight lips. She danced for another song, winked at Luke and disappeared into the bedroom.\n\nLuke started panting, not believing what had just happened. Ellie was so turned on she had to force herself to keep her hands off herself or she'd explode. There would be no telling what Luke would do if he heard her moaning in the throes of an orgasm. Though part of her hoped he wouldn't contain himself and burst in the door throwing her on the bed and having his way with her. She took several deep breaths as she grabbed her bathrobe pulling it on, the soft fabric grazing her taut nipples. She walked back out into the living room and Luke swiveled to see her. A momentary crest-fallen look came to his eyes. Until she sat next to him and nestled against him giving him a long deep kiss.\n\n\"You'd better brush up on your dance moves buddy, next time I'm going to beat the pants off you, literally.\" She said as she softly bit his lower lip. They made out for a while longer, Ellie slowing him down when he got excited. \"We should probably get to bed.\" She said, and Luke's eyes went wide. Ellie stood and went and got her keys pulling the car key free of the chain and brought it back to him. \"Thanks for the ride today. You really saved my ass.\"\n\n\"Any time.\" He said reaching for the key, realizing tonight was done he seemed to get puppy eyes and Ellie just wanted to wrap him up and bundle him off to bed herself but she made herself a promise that she wasn't going to jump him on the first date. Little did Luke realize that tonight was, in her mind, their first date. No matter what he planned for tomorrow, she was done teasing him, she was going to have him. She walked him to the door.\n\n\"I can't wait for tomorrow. I bet it will be fun.\" She smiled and kissed him and grabbed his butt giving it a squeeze through the jeans. \"I can't wait to get you out of these.\" She thought before she reached for the door.\n\nLuke made his way down the steps and went into the house putting his hands into his pockets to hopefully disguise the bulge if his Dad was still up. He walked in and heard the TV and poked his head in to let him know he was home and going to bed.\n\n\"Did you two have fun?\" He asked. Luke said yes, not entering the little den, but speaking from the dark of the doorway. He turned to go to his room and his dad burst out laughing. He looked over his shoulder and wondered what was so funny, and figured it was just something on TV. He had a distinct problem and figured a shower would help him out with it. He hadn't closed his door for more than a minute when there was a soft rap on it.\n\n\"Yea?\" He said. The door opened and dad peeked in.\n\n\"Hey, I'm glad you two are getting along so well, just be careful Luke.\"\n\n\"What do you mean?\"\n\nDad took a deep breath and started. \"I just don't want to see you get hurt. She's a pretty girl, but this is her last year, right? I just don't want you to fall head over heels and have her leave you high and dry.\"\n\n\"I won't, we're just friends.\" \n\n\"Mmm hmm.\" His dad stepped forward and reached behind him and tugged the black lace panties from the back pocket of his jeans and held them up. \"Just make sure you protect yourself.\" He grinned, handing them to Luke, his face was beet red. Dad smirked and left the room closing the door behind him. He went to take his shower shaking his head.\n\nThe next morning he had the hood up on Ellie's car and had tried turning it over a couple times, and the starter took, but it didn't want to fire. He looked into the possible problems and everything looked in good shape, so he figured he'd look up the symptoms online and most pointed to the fuel filter, so he made a quick run down the parts store and picked up a new one. That seemed to do the trick, once it was installed he was able to start her car several times without any problem.\n\nEllie came trotting down the stairs with a plate and mug. She walked up to Luke and leaned in fast and gave him a kiss. \"Thank you! What was wrong?\"\n\n\"Fuel filter, I replaced it and now it's turning over first try.\"\n\n\"Hungry? I got up earlier than I thought so I baked banana bread.\"\n\nHe smiled. \"Absolutely, let me go wash the gas off my hands.\"\n\n\"Here, this will make sure you come back.\" She broke off a piece and fed it to him. As he hummed his appreciation.\n\n\"You think that's all that will have me coming back? Remind me to fix the mirror in your bathroom.\" He leaned in and kissed her again. \"That is awesome banana bread though.\" He grinned as he jogged into the house. He came back out to find her sitting on the hood of her car, half the slice she'd brought out was gone.\n\n\"Do you drink coffee?\" She asked, and he nodded. \"Guess I should refill this then, huh?\" She chuckled. \"If you hadn't taken so long to wash up you might have gotten this cup. Come on up, and I'll slice some more of this awesome bread.\"\n\n\"Isn't this how the spider lures the fly into it's web?\" He chuckled. \n\n\"Can spiders even make banana bread? I can assure you that I'll never trap you, but as my dad used to say, 'If you want the honey, you gotta deal with the bees.' I think he meant that you have to take a chance on the bad stuff to get to the really good stuff.\"\n\n\"Sounds like a good philosophy. I'm kind of scared though. What's the bad stuff?\" He paused for a moment.\n\n\"Have you always been such a deep thinker?\" She asked.\n\n\"I used to get called out by my mom for being introverted and quiet. She was always trying to get me out of my shell.\" He shrugged and smiled. \"But quiet doesn't mean stupid.\"\n\n\"I never thought it did.\" She refilled the mug with coffee and added sugar and milk, and sliced off a fresh slice for him and brought it to him. \n\n\"What about you Luke? Are you willing to brave the bees to get the honey?\" She asked.\n\n\"I've only been called a coward once, by you.\"\n\n\"I called you a chicken, not the same thing.\" She grinned.\n\n\"So... what are we doing today?\" Luke just smiled and drank his coffee.\n\n\"Jeans, comfortable shoes for walking, and a sweatshirt. That's all you get for now. We should head out early, maybe 2:30 or 3. Is that okay with you?\"\n\n\"Are we... becoming a 'thing'?\" He asked her. The genuine innocence was so sweet.\n\n\"Well we've only been hanging out a few weeks, but so far so good.\" She smiled, and noted that she'd been smiling a lot around him. That was a good sign too.\n\nShe was excited and curious. She'd gladly go where ever he wanted right now. She had a quick realization, that her little seduction of Luke was backfiring and without him even trying she was being seduced by him as well. \"Do I need to bring anything? Water, snacks?\" She asked pushing for a hint.\n\n\"No we'll stop at the store on the way.\" He smirked popping the last bit of bread into his mouth, washing it down with the rest of the coffee. \"Oh, I have something of yours too. I'll bring it up when I come to pick you up.\" She gave him a questioning look. \"Don't look so innocent. I turned redder than your satin top when my dad pulled your panties out of my back pocket last night.\"\n\nEllie bust out laughing. \"I was wondering where they'd gone to. I thought you'd pocketed them you pervert.\" \n\n\"Oh no! I know now that when you grabbed my ass last night you stuffed them in my pocket! You were hoping I'd get caught weren't you?\"\n\nEllie had tears in her eyes she was laughing so hard. She didn't have a clue but Luke was hooked now. He had never seen her look more beautiful.\n\n\"No, oh my god no. I did sneak them in there, but not for that reason. I figured they'd be a nice little memento of our first date.\"\n\n\"I thought tonight was going to be our first date?\" He asked curiously.\n\n\"Well I couldn't wait. I invited you to dinner last night, as far as I'm concerned that was our first date.\" She leaned on her fist smiling at him. \"How was it?\"\n\nHe looked at her wide-eyed, slack jawed. She leaned forward and slipped her tongue between his parted lips and they kissed deeply. \"It was fun wasn't it?\" She asked hoping for a little reassurance.\n\n\"It was fantastic.\" He whispered urgently and kissed her again. \"I'll see you in a couple hours.\" He gave her another kiss then stood and left looking over his shoulder at her beaming back at him. He smiled as he headed down into the house to spend a little time knocking off schoolwork before going out for the night.\n\nHe knocked on her door at 2:30 sharp. She called out for him to come in. He heard close the closet door, and she popped out of the bedroom in jeans and a black turtleneck. She held her arms out. \"Is this okay?\" She asked.\n\n\"Perfect.\" He smiled. They headed down to his car and once again he opened the door for her letting her settle in before he closed it. He hopped into the drivers seat and they were on their way. He drove out to the shopping center and pulled into a space at the grocery store.\n\n\"When you were a kid, what were the things you remember most about holiday meals. What was that one thing you couldn't wait for?\" He asked, he tilted his head indicating they were going inside.\n\n\"This is a first, a date at the supermarket.\" She chuckled.\n\n\"Seriously. Was there something special that you only had at that time of the year but not usually any other.\"\n\n\"Mashed potatoes with a lot of butter and pepper. Oh and my mom only used to make that string bean casserole at holidays. I love that too. Pie is a given, pumpkin and pecan, I'd have both.\" She smiled.\n\n\"Good, good to know. He grabbed a basket and they started wandering around the store and he picked up the makings of the casserole. A couple boxes of instant mashed potatoes, and some canned gravy. He found canned pumpkin and put some of that in the basket. \"What else?\" Ellie gave him a curious look trying to figure out what he was doing. \n\n\"Well, she used to make glazed carrots too. If we were lucky, relatives from up north would send her a bottle of real maple syrup, otherwise she would make it from butter and brown sugar. That was awesome.\" He found carrots and put several cans in the basket as well. ",
        "\"Anything else?\"\n\n\"Scrabble, well that's what we called it. The rest of the world knows it as party mix with the cereal and pretzels baked with seasoned salt and our secret weapon, Worcestershire sauce.\" Luke found the cereal aisle and grabbed the ingredients, and made his way to the chip aisle and found pretzels to go with it stating that they always had pretzels and mixed nuts in theirs. He looked down and seemed to be counting.\n\n\"Okay, first thing that comes to your mind when I say, comfort food.\"\n\n\"Mac and cheese.\" She said, and he grinned.\n\n\"Good choice.\" He stocked up on the blue boxes.\n\n\"Are we stocking a fallout shelter?\" She said nervously. He chuckled.\n\n\"You didn't see the big hole we've dug in the back yard?\" Ellie just rolled her eyes and grinned, she knew this had to be going somewhere and she was getting more curious. They made their way to the front and got in line at the check out filling a couple of the re-usable shopping bags with their groceries. He stowed all the groceries in the trunk and held the door open for Ellie once again. They were on the road again heading out of town.\n\n\"Okay, you've got me. I haven't got a clue what we're doing.\" She giggled. Nearly twenty minutes later Luke turned down a side road following a sign pointing out a fairground entrance. A few miles down the tree lined road the area opened up to fields filled with cars and signs for the county fall harvest festival. He made his way carefully up the dirt path and finding someone directing the parking.\n\n\"But why the store?\" She smiled as he handed her the lightest of the grocery bags. They walked towards the gate and she saw the truck and tables. A sign indicating donations for the holiday food pantry in lieu of admission to the park could be made there. Ellie grinned at Luke, finally realizing his plan. They brought the bags up to one of the tables and the older couple behind thanked them and asked how many items they had brought. Luke told them twenty-seven, ten per ticket had been requested. \"We went a little crazy remembering what we loved about holiday dinners and lost count.\" The lady fawned over them while her husband took the bags back to a sorting area near the truck, and thanked them. They took their tickets and went into the fair.\n\nThey wandered through the attractions. Luke showed off his prowess for carnival games and won Ellie a stuffed tiger. They wandered through the exhibits, marveling at the giant pumpkins and petting the cute animals. They found the food vendors and ate everything that was bad for them, but you only go to the fair once a year, so they indulged. There was even a concert that night and they sat in the grandstand listening to the band. Ellie was glad he told her to bring a sweatshirt because it had turned cooler as the sun went down. She hardly noticed as they sat there with their arms around one another. He rubbed her back as she held him tight.\n\n\"Why didn't you just tell me about the food drive?\" She asked.\n\n\"I didn't want you to think I was trying to impress you.\" He paused. \"My folks were pretty lucky. They both had good jobs and made a good living. We've never wanted for anything. Well there was this one time I wanted a dirt bike and they said no, but that wasn't because of the money. I think they just wanted me to live to be twelve at the very least. They never let me get jaded, you know, they always wanted me to know there were people who didn't have. They were much more subtle than the usual, 'Eat your broccoli, kids are starving in Africa' parents. Hell, I never realized that some of those less fortunate families were kids I went to school with until years later. Giving back is just something they taught me to do. Besides it seemed more fun that way.\" Luke smiled down at her. \"I got to tease you for a change.\"\n\n\"Well, it didn't work.\"\n\n\"Huh?\"\n\n\"I'm impressed anyway.\" She smiled. \"You spent almost twice the cost of those tickets filling those bags.\"\n\nAfter the last song finished a loud whistle screamed out followed by a loud boom. Fireworks had started behind the stage and they sat and watched them arm in arm. Ellie laid her head on his shoulder as they watched, both occasionally jumping at the explosions.\n\nEllie had taken hold of Luke's hand as they made their way home down the dark winding roads. She massaged it with her thumb rubbing in slow circles.\n\n\"Thanks, I had a great time.\" She said softly. She could make out his grin by the dash lights.\n\n\"Me too.\" He gave her hand a squeeze.\n\n\"Luke? When I asked the other night if you've ever made out before, you said you hadn't. Have you ever had a girlfriend? I mean, have you ever had sex?\" Her voice was soft but with an inquisitive edge to it. His hand flexed a few times in hers.\n\n\"No.\" He replied with a nearly silent sigh.\n\n\"Any reason?\" She pressed. \"It can't be that you've never had a chance. You must have had to beat the girls away with a stick in high school.\" A soft giggle followed the comment.\n\n\"I was pretty quiet, I didn't have a lot of friends.\" He shrugged. Neither spoke the rest of the way home. Ellie had laid his hand on her lap and continued to rub it gently, and he rubbed her leg through her jeans. They pulled into the drive and parked. With all the lights off in the car Ellie slid his hand further up her thigh, and leaned over to kiss him. She was eager and let it be known in her kiss and he responded in kind gripping her thigh tightly.\n\n\"Would you walk me up?\" She asked pulling away from his lips reluctantly. He got out and walked around to her door opening it. She stood, looked into his eyes and took his hand and led him up the stairs. \"Would you like to come in?\" She wasn't sure if she needed to coax him but he was already in the doorway closing it behind him. A faint smile came to her lips and she tried to hide it. He returned the little smirk in kind. \"There's a bottle of wine in the fridge. Why don't you open it up, and I'll be right back.\" She bit her lip and smiled backing her way to the bedroom. She was giddy because she knew she would have him tonight. She undressed and replaced her every day underthings with the yellow lingerie she bought the day they went shopping together, and dressed again. She wanted to see his face as he peeled her out of her clothes.\n\nShe entered the room and Luke stood up. \"Who taught him this stuff?\" Ellie wondered. She turned off the overhead light and put on a small table lamp. They sat down on the sofa, Ellie leaned into him pulling her legs up beneath her.\n\n\"Did you really you have a good time tonight?\" He asked. Ellie chuckled and looked him in the eyes. Her smile slipped away as she leaned in to kiss him deeply.\n\n\"The night's not over yet.\" She whispered.\n\nLuke's nervousness was slipping away as he and Ellie began kissing in earnest. He leaned back pulling her on top of him as their hands began to roam over each other. His hand slid up her back slowly lifting the hem of her shirt, he sent shivers up her spine as he caressed her skin. She joined in and reached between them and unbuttoned his shirt pulling it free of his jeans and ran her hand up his t-shirt playing with his nipple.\n\nEllie broke free of his warm lips and came up to a kneel between his legs, and looked down at him as she crossed her arms lifting her turtleneck up and over her head. She shook her hair out as she tossed the shirt onto a side chair and smiled down at him. She grinned showing off the little yellow lace bra, which made him smile. Luke reached up and grasped the front of her jeans pulling her off balance and back onto his chest in a flurry of giggles. His hands not only roamed her back, but now slid between them as he ran his palm up her bra eliciting a soft moan as he massage her breasts through the fabric.\n\n\"The clasp is in back.\" She said in a clear invitation. Using his other hand he reached down between her legs and dragged her higher up his body, placing her breast within easy reach of him. Rather than unsnap the band he slipped the strap off her shoulder and pulled the cup down revealing smooth white skin and puckered pink nipple to his hungry mouth. He kissed it gently, causing Ellie to gasp as his tongue ran lazy circles around the tip causing it get even harder. Her breathing was short and quick. She pulled away from his agonizing teasing, placing her forehead against his, and closed her eyes.\n\n\"I don't know if you want this, but I do. Would you take me to bed and make love to me Luke?\"\n\nHe looked her in the eyes for a moment thinking it would be his pleasure. Her eyes closed for a moment, when she opened them, he felt himself fall into their depths, and he was gone. He kissed her deeply.\n\nShe stood shakily, Luke reached for her steadying her. She smiled as she took his hand and pulled him up too. He wrapped his arms around her taking her mouth with his again. He fumbled a few times with the hook of her bra. She smiled.\n\n\"Don't worry, practice makes perfect.\"\n\n\"I hope I get a lot of practice then.\"\n\nShe walked backwards pulling him with her into the bedroom. She reached down and unbuttoned her jeans turning and giving her butt a little wiggle as she pushed them off showing her yellow lace panties, which thanks to the heavy petting on the couch were now quite damp. She kicked them aside and turned back to Luke who just stood there staring, his mouth hanging open. She smiled and pushed his unbuttoned shirt off his shoulders and down his arms. He reached to take off the tee, and she stopped him.\n\n\"Allow me.\"\n\nShe lifted the hem of the shirt and ran her hands up his chest and sides lifting the shirt with it. \n\n\"You don't know how much I wanted to do this yesterday morning when you answered the door.\" She smiled as she stroked his nipples with her thumbs. \"I want you to know how good this feels.\" She said leaning forward and taking one into her mouth swirling her tongue and flicking it. Luke's breathing got shallow a fast. She took it between her teeth, giving just a light tug before letting it free. Luke gasped at the sensation. She pushed the shirt up and he raised his arms letting her pull it off completely.\n\n\"Damn do you look good without a shirt on.\" She said.\n\n\"You look pretty fantastic without one too.\" He replied smiling. They kissed again, their bare chests touching for the first time sent shocks through them both. The heat they were building was intense and made the room feel cool in comparison. He felt hands on his belt fiddling with it to get it loose, soon his jeans were unbuttoned and the zipper slid down. Her hand slid down inside massaging the length of him through his boxers.\n\n\"Mmm, that feels nice.\" She mumbled into his kiss.\n\n\"It's not very...\" She halted him with a firmly planted kiss.\n\n\"Enough of that, you've been watching too much porn.\" She giggled. \"Remember, the pyramids were built with hand tools, it's not the size of your tool, it's how you use it.\" That made Luke chuckle. She began kissing her way down his chest and stomach and eventually knelt in front of him. She reached up and tugged the jeans down to his knees seeing his boxers strain to contain his hardness. She peered up at Luke from under a fallen lock of hair as she reached slowly for the waistband. She pulled down slowly, revealing it finally. Slowly a grin crept across her face as she looked up again.\n\n\"It's perfect.\" She said biting her lip. She looked down at it, he wasn't huge, but he was above average. She couldn't wait to have him inside her. She peeked up again. \"Mind if I take the edge off for you?\" Luke just tilted his head wondering what she meant just as she leaned forward and took him into her mouth.\n\nLuke let out a gasp as her lips engulfed him. It's a wonder his knees didn't buckle and land him on the floor. She started slowly taking a little more in with each stroke. She let him free and licked the length of him. He was gasping for air, she knew he wouldn't last decided to bring him some relief. She began bobbing her head while stroking him bringing him to the brink.\n\n\"Ellie! I'm..\" He didn't get the words out by the time she felt the rush hit the back of her throat. She swallowed quickly hoping she could keep up. \n\n\"I'm sorry! Oh, shit.\" Luke said looking down at her. As she continued to lick and suck him.\n\n\"Well I'm not. Now that the edge is off we can take our time.\" She gave him a last lick to clean the tip. \"I'm torn between wanting to instruct you and letting you discover on your own. Is there anything you've seen that you've wanted to try?\"\n\nLuke's expression changed from horror to astonishment. Was this beautiful girl kneeling in front of him gave free reign to his sexual fantasies? He reached down taking her elbow and lifted her up so she was standing again, and quickly kicked the rest of his clothing free. Ellie turned and went to the bed pulled back the covers and laid down and looked at him expectantly.\n\n\"Why am I naked and you've still got those on?\" He said nodding at her lacy yellow panties.\n\nShe grinned. \"It's because you haven't taken them off yet.\" She snickered. \"Though maybe I should do that myself before you pilfer all of my panties.\"\n\nLuke grinned and walked over to her and sat on the edge of the bed, and reached for the waistband, he gave a quick peek up at her, she just straightened out and lifted her hips off the mattress giving him the go ahead to slip them off. They released from her hips and as he pulled them from between her thighs the moisture held them in place for a moment as he pulled them free, sliding them down her legs.\n\n\"They're soaking.\" He said surprised.\n\nEllie rolled her eyes a bit and smirked. \"You have a, uh, certain effect on me. What can I say?\" She sat up leaning into his kiss. \"Have you thought about it, or shall I take the lead?\"\n\n\"I want to taste you.\" He said in a whisper. She kissed him deeply.\n\n\"Well you know what I taste like up here. Why not explore a little.\" She said in a deep voice he'd never heard her use before. He did just that, working his way down her neck leaving a trail of kisses that caused her to sigh deeply. Then laid a trail to her breasts taking an excruciatingly long time to take her nipple into his mouth. She moaned a little deeper and ran a hand through his hair while her other found his still hard cock and massaged it slowly not wanting him to go off in her hand. He lavished attention on her breasts for a while, and Ellie began to wonder if he'd go any further so she gently pulled herself up causing his mouth to land on her rib cage, hoping that would be incentive to continue south. It worked, he made his way down her stomach giving her belly button a little lick causing her to giggle. She gave his hair a tug to get him to stop. He hesitated as he made his way down over her smooth skin kissing his way around, dragging his tongue slowly nearly torturing her her. He slipped around pushing her legs apart and lay between her raised knees. He leaned forward and kissed her, his tongue teasing it's way up her swollen pink lips causing Ellie to gasp and grip his hair a little tighter. It took all of her reserve to not pull him down into her, as she relaxed her grip he began to explore and he took the cues she gave him very well, as she leaned in and lifted. He was very attentive and gentle, almost too gentle as her climax neared she moaned a little louder, a little quicker. Luke surprised her by slipping a finger into her molten core and taking her clit between his lips causing her to cry out and arch up as she peaked quickly. After a couple minutes of panting she lifted Luke's head by his hair from the task of cleaning up the mess he'd made of her.\n\n\"You've never done that before?\" She asked, an edge in her voice. He just looked at her in wide-eyed innocence and shook his head back and forth.\n\n\"Did I do something wrong?\" He asked, suddenly worried. She just fell back and laughed.\n\n\"No, you did everything right, that's why I wondered.\" Luke crawled up beside her and she looked over at his sweet face lacquered in her own honey. She leaned over and kissed him, tasting herself on his tongue. \"Listen. I'm on the pill, but I want you to wear a condom anyway. A girl can never be too safe.\" Luke's eyes went wide.\n\n\"Shit, I don't have any. I mean... I never.\" \n\nEllie giggled and reached into the nightstand drawer and pulled out a little foil packet. \"It's a good thing I was hoping this would happen and prepared for it.\"\n\nLuke's eyes went wide.\n\n\"Oh seriously. Guys can be as thick as bricks sometimes. I've been practically throwing myself at you since I moved in Luke. Hasn't it been obvious?\"\n\n\"Well I just thought you were being friendly, and well a bit of a flirt. I didn't think any more of it until last night.\" He shrugged.\n\n\"You surprised me with the stakes of that Jenga game.\" She smiled. \"I'm glad I lost.\"\n\n\"I'm glad you did too.\" He grinned.\n\n\"Lay back.\" She put the packet to her teeth and tore it open. \"See how it's rolled. Place it at the tip, and unroll it like this, and voila. Mr. Happy is now properly dressed for the ball.\" Ellie looked down at it, and her smile faded into a look of need as she looked up at Luke. \"Let me.\" She placed a hand on his chest as she rose up and threw a leg over his body and straddled his hips. She took his length and ran it against her before settling gently down on it. She let out a gasp as he entered her slowly. Luke lay back taking short quick breaths wanting badly to raise his hips and drive himself into her. Ellie was in control of the moment, a hand firmly on his chest as she lowered herself further, as she took him in she sped up burying him into her completely causing them both to cry out.\n\n\"Oh that feels nice!\" She said as she clenched down on him causing him to gasp again. She rose up slowly causing her own deep moan. She rode him for several strokes as he took hold of her hips getting into the rhythm of her body. She pressed herself down on him and leaned forward and kissed him. \"Luke?\"\n\n\"Mmm?\"\n\n\"Roll me onto my back and fuck me good and hard.\" She said biting his lip.\n\nHe smiled as he wrapped an arm around her and rolled over taking her with him. She adjusted quickly and her legs went around him rocking her hips to get him to start. He was a quick study, and he began thrusting into her in long deep strokes as he attacked her mouth and neck.\n\n\"Harder!\" She urged. \"Don't stop!\"\n\nHe had no intention of stopping if anything he was scared he was hurting her as the sound of their flesh meeting repeatedly rang throughout the room.\n\n\"Yes!\" Ellie cried repeatedly. He felt his climax approaching again. Ellie began to shudder under him as she let out a series of high pitched moans, he knew then he couldn't hold out any longer and pushed hard into her releasing as she gripped down on him. He collapsed unable to hold himself up any longer. \n\nThey lay there gasping for breath for a long while when Ellie leaned over and whispered into Luke's ear, in a little sing-song way. \"Guess who's not a virgin now?\" She kissed his cheek as she heard him laughing into her shoulder.\n\n\"What now?\" He asked.\n\n\"Well, first thing you may want to do is go and tie off your little goody bag and trash it.\" She said. She looked deeply into his eyes. \"Will you stay with me tonight?\" She asked. He didn't know why but Luke's throat tightened. He looked into her dark eyes, a feeling of falling into them washed over him.\n\n\"Yes.\" He whispered. \"I hope you don't snore though, I'm a light sleeper.\" He grinned.\n\nThey both busted out laughing as he rose to go clean up. When he came back the bed had been remade, Ellie lay there wearing his t-shirt which was enticingly short, her long supple legs leading up to the hem, it was obvious that she hadn't bothered with putting her panties back on. He turned off the light and crawled in beside her, they kissed, and explored as the fell asleep.",
        "Deep in the night they stirred, this time Luke took her slowly. She looked up, the faint light of a streetlight limned his body. Soft moans and whispers broke the peace as they concluded their lovemaking. The quiet enveloped them as they drifted off again.\n\nThe rumble of the door opener in the garage woke Luke. His head popped up realizing he wasn't in his room. He looked down quickly and found shining brown eyes smiling up at him.\n\n\"Good morning.\"\n\nThe blanket had pulled down and Ellie's breasts were in full view.\n\n\"Pardon the morning breath.\" He said as he kissed her. \"You lost your shirt.\"\n\nShe giggled. \"More like you peeled it off in the middle of the night.\"\n\n\"Oh shit!\" He grimaced, looking at her neck.\n\n\"What?\"\n\n\"I'm sorry. I had no idea.\" A panicked look settled on his face.\n\n\"What?!\" She started to panic, and she noticed he was looking at her neck. She bolted out of bed and ran to the bathroom. A moment later she busted out laughing. \"I look like I was attacked by a gang of vampires.\" She came back out smiling. \"Good thing I like turtlenecks.\"\n\nLuke was somewhat relieved but still worried. \"I'm sorry!\" He said again concerned that she'd be mad at him for looking like she'd been beaten.\n\n\"You have absolutely nothing to be sorry about.\" She leaned forward kissing him quickly. \"Except maybe waking me up with this a couple times over the last few hours.\" She said reaching under the blanket and grasping his hard cock. \"Let me check I may have a spare toothbrush, unless you want to run down and grab yours.\" She grinned. \"Sounds like your dad just left.\"\n\n\"Yea I'm guessing he went to breakfast without me.\" He smirked. \"We like this place in town, it has a large glassed in dining room like a greenhouse. On Sundays they do a jazz brunch.\" He looked over at the clock noting it was much later than he usually woke.\n\nEllie smirked. \"Well we did have quite a workout last night. It's to be expected.\"\n\n\"Let me text him. If we hurry we can join him.\" Luke said. \"If you'd like to, I mean.\"\n\n\"I'm torn between having my way with you yet again, but we'll have plenty of time later. I'd love breakfast. Let me go clean up and find a way to hide the damage. You brute!\"\n\n\"I should probably grab a clean shirt clean up myself. Jeans are fine.\" Luke grabbed his jeans pulling them on and pulling on his shirt and made a beeline for the door. He paused at the bottom of the steps to text his dad then made his way into the house to wash up and change. He bolted out of the house to find Ellie leaning against the garage.\n\n\"Guys, always taking forever to get ready.\" She shook her head. She looked absolutely radiant in the morning sunshine.\n\n\"What can I say. I don't just roll out of bed looking this good, it takes work you know.\"\n\nEllie chuckled as she said. \"Seeing first hand evidence to the contrary, I'm calling bullshit.\"\n\n\"He said he'd just have coffee and wait for us.\"\n\nThey walked into the restaurant and were directed to the table where he sat. Derek stood as they approached.\n\n\"Now I see where he gets it. Hi Mr. Page.\"\n\n\"Please, call me Derek. What do you mean?\"\n\nEllie grinned as she sat down. \"I've never seen a guy stand when I walk in the room, or hold the door for me like Luke does. It's nice.\"\n\n\"Well chivalry never goes out of style.\" He smiled. \"I ordered us the sticky buns, they should be out soon. They make their own here, and they're endless. Thankfully, after seeing how many of them Luke can eat.\" They all got a chuckle at that. Luke rolled his eyes.\n\n\"Did you kids have fun at the fair?\" \n\n\"We had a blast.\" Ellie said beaming. \"Hercules here won me a stuffed tiger, and everything.\"\n\nThey chatted amiably about school, work and the jazz band group playing at the other end of the dining room. \n\n\"What are you doing for the holiday next week?\" Derek asked her.\n\n\"I'm going back home for the weekend. My mother and my aunt own a bed & breakfast up on a lake. It's a huge old house which makes it perfect for everybody.\" Ellie said. \"What about you boys?\"\n\n\"Not much, we'll probably have dinner out and catch some football.\" Derek replied.\n\n\"No way! You don't have any family around here?\"\n\n\"None nearby.\"\n\nEllie gave them a shrewd look. \"Do you work Friday?\"\n\nDerek shook his head. She already knew Luke was free. She paused for a moment and excused herself to go find the ladies room.\n\n\"Those are some pretty nice shiners.\" Derek commented. \"When she moves a few of them peek up above the turtleneck.\" He grinned.\n\nLuke turned red. \"Uh, yea. Well we went up to her place after we got home.\"\n\nDerek grinned held up his hand, and gave a little shake to his head. \"No need to explain, you're both adults.\"\n\nThey both stopped speaking and stood as Ellie walked back to the table putting her cellphone in her pocket. She smiled at both of them as she sat down again.\n\n\"You are both now busy for the Thanksgiving holiday. It would be my pleasure if you would join me next week at the B&B. They have satellite so you won't miss any football.\" She grinned.\n\n\"Thank you, but we couldn't impose.\" Derek said.\n\n\"It's no imposition, there will be guests there as well. I just called my aunt and asked if there was room and she said there are still plenty of rooms available for you to stay over. It's about an hour away up near the state park on the west side.\" She smiled at him then looked at Luke. \"Besides, I was going to try and drag him away with me. It doesn't seem fair to leave you all alone. I've already told her you would accept. No backing out now.\"\n\n\"You're a regular fireball aren't you?\" Derek grinned. \"I guess I have no leave but to accept on my behalf. What about you Luke. Think you can be persuaded to spend an entire weekend in country with a lovely lady?\"\n\nLuke looked at Ellie grinning. \"It'll be tough, but I think I'll manage.\" She raised an eyebrow slightly and nudged him in the shin with her toe. \"Ow!\"\n\nDerek chuckled deeply. Yes Ellie was definitely the right choice, there was no doubt in his mind now. "
    ],
    "authorname": "Member389",
    "tags": [
        "innocent",
        "smart",
        "funny",
        "romantic"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/1br-apt"
}
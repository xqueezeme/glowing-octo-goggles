{
    "title": "Bimbo Builder Academy Ch. 11",
    "pages": [
        "I sat on the couch and stared at the coffee table in front of me. Well, that's not entirely true. I sat on the couch and stared at the black, empty screen of the smartphone on the coffee table in front of me.\n\nI sighed.\n\nI hadn't checked my phone in a whole day, and I knew what I would probably find if I turned it on. Missed texts. Missed calls. Julia trying desperately to figure out where I was, what was going on, who I had left with, why I'd broken up with her.\n\nAll logical questions. All completely fair. And yet they were questions that I couldn't answer.\n\nI had broken up with her to keep her safe. That seemed simple, on the face of it. There was too much going on that I couldn't explain simply because I was literally unable to talk to her about it. But, more than that, I knew that I had treated her poorly. I had allowed myself to be seduced by my student. Even after Denton, which should have taught me to be more careful. I had cheated on my amazing partner, and I hadn't even had the guts to tell her like a man.\n\nLogically, I knew that it probably wasn't all my fault, that there were things going on at the Academy that had fucked with my mind and twisted my morals all up into a nasty tangle. But that didn't change what I'd done. And if I turned on that phone, I'd have to stare my mistakes right in the face.\n\nI wasn't alone on the couch.\n\nSitting next to me were two other people, both staring straight ahead with wide, glazed eyes. But they weren't really there. At least not mentally. Danielle and Harrison St. John were both on their own laptops, watching video after video of Lena's online Academy classes, drilling the subliminal hypnotic commands deep into their brains.\n\nDanielle was doing it because of another mistake I'd made. I'd assumed that just watching a single Academy video would bring her entirely under our control, but Lena and I had learned that the effects of a lone video were only temporary. Danielle's mind, unable to completely rationalize her actions, had actually strained and splintered, creating a fractional nymphomaniac personality named Raven who could justify her actions.\n\nBasically, I'd traumatized her.\n\nHarrison, meanwhile, was watching the videos because we didn't know what else to do with him. It seemed safest just to entrench our control over the man even more securely. You never knew when having an international business mogul at your beck and call would be useful.\n\nI looked away from the pair beside me, sliding back into my thoughts.\n\nMaybe it was wrong to not talk to Julia, but... I couldn't. I couldn't be distracted right now. Not when there was so much at stake. Not just the lives of my students, the beautiful young women I had come to care for, but also my life. Joseph Clayton had hypnotized me, implanted subconscious suggestions in my mind and controlled me like a goddam puppet. There was no way he'd let me get away. And even if I did, I couldn't run away. Not this time.\n\nAfter Denton, I'd run away. Now I knew better. I knew how stuff like that comes back to haunt you. Denton certainly had. I'd been scared to even think about it for so long and then when I'd told Lena about it... It had been almost a relief.\n\nI guess facing your fears really is good for you, I thought.\n\nSlowly, I reached out. And, slowly, I flipped the phone face down. I couldn't face this fear. Not right now. Instead, I pushed myself up off the cushions.\n\nI needed a distraction. Lena and I had had a small victory, with Danielle's help. I could take a couple minutes off. I wasn't any use in this state anyway. Too much in my head. I got this way with my mathematics proofs, sometimes. Coming back with a fresh perspective was just the thing.\n\nI turned, leaving the phone on the table and doing my best to push it from my mind. \"Lena!\" I called.\n\nWe were still in Harrison St. John's suite up on the 16<sup>th</sup> floor. It was bigger and nicer and more expensive. But, even better, it had a balcony view out over the river. Even the mirror image suite of rooms we'd used earlier in the evening, just across the hallway, didn't have one of those.\n\nMy elegant blonde student was out on the balcony. She didn't have much to wear. Just a bulky hoodie we'd left downstairs, a couple of items from the hotel gift shop \u2014 half of which were being worn by Danielle \u2014 and the slinky cocktail dress she'd had on this evening to seduce Harrison. So, she'd returned to her new default. The plush white hotel robe bulked out her slender figure, but couldn't hide her feminine curves. There was a glass of wine by her hand, the liquid dark in the soft yellow lights that were strung along the railing, but her fingers were just playing with the stem.\n\n\"Hey, Mitch,\" she answered. She sounded as troubled as I felt.\n\n\"You doing okay?\" I asked. \"You were so brave earlier. Coming over alone. Really. You did great.\" I wandered over to the railing and leaned over on my forearms. I didn't look at her, didn't want her to see the uncertainty in my features. I wanted her to think I was confident and collected, like she could look to me to solve the problems we were facing.\n\nNight had fallen, but the City was still lit up with the million lights you expect from a metropolis this size. It was beautiful, but I couldn't help thinking about the last time I'd admired a view of the nighttime cityscape. It was last night, at the Academy party, when everything had gone sideways. Instead of remembering that, I turned back around and leaned against the railing. I stuck my hands in my pockets, trying to keep my body language casual.\n\n\"Thank you...\" Lena didn't say anything else for a minute, but her voice was soft and uncertain. Then she added, \"I was glad to know you were watching. That you would come help me if I was in trouble.\"\n\nI nodded, swallowing down another small knot of shame. I'd been fucking Danielle while Lena had navigated the most fraught part of the whole mission \u2014 making sure Harrison watched all the way through the hypnotic video.\n\nDamn it, Mitch! I thought. Just get out of your own head for a goddam second. Blaming yourself won't solve anything. It's just going to make you feel worse. \n\n\"You seem... upset.\" Lena's green eyes were hard to read in the soft yellow glow, but her voice was concerned. \"Are you doing okay?\"\n\nI nodded again, probably too fast. My fingers curled around the LucidSpecs in my pocket. Lena had returned them after we'd interrogated Harrison. I tugged my other hand free on its pocket and tapped my temple. \"Just a lot going on up here.\"\n\nThe young woman smiled gently. \"You're an academic, right?\" Her voice was teasing. \"Isn't there always a lot going on up there?\"\n\nI snorted out a laugh, feeling the tension ease a little. \"Maybe less than you think. Half the time it's just staring at your old work and wondering how you can possibly go one step further.\"\n\n\"What do you do when you don't know what happens next?\"\n\n\"Huh...\" I hadn't thought of that.\n\n\"Lena...\" I felt a smile creeping over my face as the balmy evening air stirred with a slight breeze. I wasn't going to dwell on things I couldn't change. It was time to think through what happened next.\n\nShe could hear it in my tone, and her matching smile was lovely on her lips. \"Yes, Mitch?\"\n\n\"You've given me a great idea.\"\n\n* * *\n\nThe master bathroom in Harrison St. John's suite was magnificent. It was big, for starters, with a huge mirror, long marble counter and two sinks side by side. The shower took up almost a third of the space, running lengthwise down one side and separated from the rest of the room by a floor-to-ceiling wall of glass. It was directly across from the mirror, like it was situated so someone could watch themselves while they washed.\n\nMy muscles relaxed under the hot stream of water, my palms flat against the ornately tiled walls of smooth, gold-brown stone as I bent forward and hung my head. The warm, relaxing jet pounded on my shoulders, wicking away the tension, and I closed my eyes with a sigh.\n\nThat's it... I thought.\n\nIn the darkness behind my closed lids, I could practically see my thoughts battling for attention. Worries and concerns and fears and plans and goals all tangled up and demanding my focus, like a snarled up proof with dozens of steps that didn't want to be solved. Instead of giving them what they wanted, though, I just focused on my body.\n\nThat was the secret to my shower ritual, really. It wasn't that there was some magical shower fairy that visited me to explain the answers to my problems. Instead, it was just a chance for me to let go of my thoughts, focus on the pounding water washing everything away. Strangely, letting go of my thoughts had often led to my biggest insights.\n\nI flexed my body, tensing all my muscles and curling my toes into the tile beneath me. I wanted to feel every part of me except my brain, remind myself to stop thinking for a minute. The water saturated my thick hair and ran down my back and chest, rivulets of heat that drew away my worry like poison being drawn from a wound.\n\nSomewhere distant, there was the soft creak of a door swinging open. Then, the click of it being securely closed. I lifted my head, shoving my hair back from my face and rubbing water from my eyes.\n\nIt was Lena. The beautiful blonde was standing in the middle of the bathroom and staring straight through the glass into my face. I didn't know what to say, didn't have time to respond before she undid her robe and dropped it in a heap behind her. The room, for all its size, seemed to shrink, like all of the light was drawn to the woman. She was barefoot, and didn't bother to take off the slinky, expensive dress that clung to her like a second skin as she walked across the tile, pushed open the door and stepped into the shower behind me.\n\n\"Um...\" I felt like I should have a comment, but I couldn't seem to think of anything intelligent to say. I had been doing my best to pass the reins over to my body, and now my body was responding to the vision in front of my eyes.\n\n\"Hello, Master.\" Her voice was smooth and low. Sultry. Water droplets shattered off my shoulders in a mist that sheened her skin and made it sparkle in the light.\n\nThe magical shower fairy, I thought. Suddenly the playful idea was a whole lot hotter. \"Lena...\" But I wasn't sure what I should say. My mind felt clumsy as blood rushed south, pumping between my legs and making my cock twitch. My eyes roamed over her as she took another slow step. Closer.\n\nThe short black dress ended halfway up her smooth, tanned thighs, and as it grew more and more damp it clung to her body even tighter. I could see the outlines of her perky tits, her nipples pointy and hard like little pleasure buttons. Her lips were soft and pink and parted in a soft sigh.\n\nI felt like I should ask her why she was here. But I already knew. Her bright green eyes were wide as they stared into mine. Wide and almost desperate.\n\n\"I'm yours, Master...\" she murmured. \"Please take me...\"\n\nShe was hypnotizing herself.\n\nMy own dark eyes were fixed on hers. I was unable to draw myself away as she raised a hand and pressed it to my chest. I'm sure she could feel my hammering heartbeat as my mouth went try. Her fingertips flexed into my skin, as if she wanted to pull me to her.\n\nJust as I'd wanted some time to relax, to get out of my head and give myself over to the streaming water, Lena wanted to get out of her own head and give herself over... To me. But I couldn't hypnotize her without the LucidSpecs...\n\nCould I?\n\nHer gaze was smoldering, emerald orbs that glinted amidst sculpted features. She didn't blink. Just slowly, slowly leaned forward. Closer and closer.\n\nI wanted to know. Could I hypnotize her? Did I have the power? Another pulse of lust shot through me and by now I was rock hard. I didn't resist the urge as I let my own gaze grow lazy, relaxed and commanding. I stared wordlessly into her eyes, a single phrase on loop running through my head.\n\nYou're mine.\n\nThe silent chant pounded like the steaming water that jetted against my back, and I knew that she could feel it wearing down her will. She wanted it to. I saw the moment she slipped into my power, her eyes growing hazy and glazed as her thoughts and will drifted away.\n\n\"Very good...\" I almost didn't recognize my voice as I stepped forward, my fingers cupping her cheek and turning up her chin. I sounded calm, no longer anxious and worried, and my tone had a deep resonance that rumbled through my entire body. I stared into her face as I bent to kiss her, felt the soft intake of breath that pressed her tits to my chest in a gasp of surrender.\n\nHer lips were soft and hot and malleable against mine, wet with the spray of water. My other hand slid down her side, landed on her hip, felt the cloth of her dress rough and bunched up under my palm.\n\n\"Oh...\" She blinked, slowly, as I pulled back. Then her wide eyes traced down my body to where my thick, throbbing manhood stood out like a steel pole between us.\n\n\"On your knees.\" There was no hesitation in my voice. I knew, now, that this was what we both needed.\n\nThere was no hesitation in Lena's eyes as she slipped to the floor on her knees, her green eyes still staring up into mine with a look that was somehow both blank and needy. She needed me to tell her what to do. She needed me to take command.\n\n\"Suck my cock,\" and I drew in a soft gasp as she leaned forward.\n\nHer pink lips slid around the red, needy head of my prick.\n\n\"Ohfuckyeah...\"\n\nLena's face slowly transformed into an expression of bliss, her eyes sliding closed and her head beginning to bob up and down. Her mouth was hot and wet, even hotter than the stream of water that shattered on my muscular back. I rested one hand on top of her head and my fingers twined in her wet hair.\n\nThis was what I wanted. This was what I deserved.\n\nWait... What? \n\nBut the thoughts were there and gone again and I couldn't focus on them. Everything was right with the world, my body was thrumming with pleasure like a harp that had just been plucked, and a gorgeous woman was kneeling at my feet, blissed out with one hand slowly kneading one plump, perky breast while the other slid between her spread thighs.\n\nLena moaned, the vibration traveling through her throat and up my cock in a wave. The hand between her legs was spreading her entrance, thumb circling her clit while one finger slid inside of her. Then another. And then she began to slowly thrust in and out, fucking her own pussy while I fucked her mouth.\n\nMy hips were moving now, ever so slightly, forcing my length further between those lips. She didn't gag, just shuddered with ecstasy and opened her eyes, glazed green wells of adoration staring up into my face. The head of my cock hit the back of her throat and she shuddered, thighs clamping down.\n\n\"Mmm...\" Her eyes rolled back as she moaned, fingers jamming into her slit.\n\nShe's cumming, I realized. Just from deepthroating me. The thought was like a shot of lust straight into my core, and I felt my balls roiling with expectation. My rod slid deeper into the tight sheath of her throat and she bucked, her face flushing as her body reacted to my thick cock between her lips. My hands curled in wet strands of blonde hair and kept her head in my lap.\n\n\"You like that?\" I grunted. \"You like sucking my cock? All those pesky thoughts disappearing until all you want is to serve and please me?\" I knew my words were hitting her mind hard \u2014 deepening the trance, strengthening my control.\n\nLena held me in her throat for several long seconds, nostrils flaring as she tried to breathe and her body overwhelmed itself with pleasure. Then, I released her.\n\nThe blonde pulled back, slowly, sensually, her body vibrating with lust. She stared up into my face, eyes glazed with lust as water cascaded down my body and across her cheeks. She was mine. And she loved it.\n\nThere was a soft pop as the tip of my length came free of those pink lips and she left them open for another second in a sexy little O. Staring down at her, I felt a rush of power and need strike me like a hammerblow. I could barely keep myself from grabbing her and thrusting into her mouth again, using her face like my own personal fucktoy.\n\n \"Ohmygawd Master...\"\n\nHer voice sent a bolt of heat right through me like a spear of desire. It didn't have its usual smooth, sophisticated tone. It was bubbly and brainless and bimbofied, her mind wiped clean of thoughts so all she could think of was hot, burning pleasure. So all she could think of was sucking and fucking and serving.\n\n\"God you're such a fucking stud... Please... Use my hot, tight little body...\"\n\nIt was like she was a different person. As if I'd transformed her into a different person. Not like Raven, with a new personality. But as if I'd subtracted all the personality right out of her and added back pure, unadulterated lust in its place. Lust and an eagerness to please her master.\n\nMe.\n\nNo more worries clouding her mind. No more stresses. Just blinding pleasure and a desperate need to please. Her hands rose, fingers brushing down across my rippling abs, my body clenched tight as I reined in the urge to fuck those plush, pink lips. I liked that mouth doing exactly what it was doing. Talking dirty to me.\n\n\"Fuck me, Master...\" Lena's mouth crept closer, kissing the head of my hard, swaying rod and then up my length. \"Do whatever you want with me... Make me your sextoy, a dirty little fuckdoll who lives for this huge cock...\"\n\nThe word cock slipping from between Lena's lips like a honeyed invitation was what flipped the switch. A flash of white heat blinded me, and when I could see again I'd wrenched the young woman up to her feet and bent forward, gripping the black, clingy dress by its bottom hem.\n\nIt was all I could do not to rip it apart and away from her body. Then, I wondered why I didn't. My mind wasn't functioning in its normal mode, had reverted back to more primal, cave man patterns. The dress was a symbol from Joseph Clayton, my enemy. At the party, it had marked her as his property and his goods for sale.\n\nBut she was mine now.\n\nI straightened, my body pulsing with lust and power as my hands slid up her body. I cupped her tits, squeezed, felt her nipples hard against my palm through the fabric as the young woman gasped and arched her back. She pressed her breasts into my hands, begging me for more, her eyes wide and wanton and desperate. Her hands were on my cock, slim fingers circling my girth and stroking. Stroking.\n\nMy own fingers curled over the deep V of the neckline and then wrenched apart.\n\n\"Ohfuck...\"\n\nI swear Lena came again just from the display of primitive dominance, the strangled moan that slipped between her lips like music to my ears. Her knees buckled and her thighs clamped together as the dress ripped down the front, sliding away from her body as I ripped it in half and threw it like a crumpled rag into the corner behind me.\n\nThen, I bent to kiss her.\n\nHer own mouth was desperate against mine, mewling with pleasure and need.\n\nMy hands were on her hips and then slid around to cup her ass, kneading the perky hemispheres. My fingers sank into her flesh. Lena ground up against me, her curves soft against my taut muscles. Then, with a primal grunt, I was lifting her into the air and twisting sideways, slamming her up against the wall.\n\nBut not the tiled wall behind me. The glass wall that separated us from the rest of the bathroom. The massive sheet of glass was solid as stone, but transparent. Through the steam that was slowly filling the bathroom, I could see the slender lines of Lena's body in the mirror as she wrapped her legs around my hips and writhed against me.",
        "Then, my gaze was on her face and my features were commanding. \"I'm going to fuck you.\"\n\nIt wasn't a question. Just a statement. A statement that told her I knew exactly what both of us wanted, and I was going to do it.\n\n\"Please...\" she groaned. Her arms snaked around my neck, holding on tight. My cock throbbed, one hand releasing her to line myself up with her smoldering entrance, hovering just inches away. \"Please take me Master... Fuck your needy little nympho fuckdoll...\"\n\nWater cascaded around us, striking both of our bodies now and drenching our skin. We were slippery against each other, wet and dripping, the hard stream shattering against us and sending up a fine spray.\n\nThen, I thrust up inside of her.\n\nIt was like an electric current shot through Lena's body. Her arms tightened around my neck, all of her muscles shuddering as a sudden shock jolted through her.\n\n\"OhfuckMaster!\" The tiled walls amplified her needy cry, her voice full of satisfaction.\n\nI slid all the way to the hilt, holding her up against the wall now with both hands and my rock hard manhood. Then I pulled back and slammed upwards again, bottoming out in her tight, hot pussy. I could feel her tunnel clenching around me, begging me for more, holding me and massaging my entire length as I pulled back.\n\n\"Fuckkk...\" Her slim figure was pressed to the glass and her mouth was open in an unending stream of words and moans.\n\nAnd then I thrust once more.\n\n\"Yes Master! Fuck my tight little pussy!\"\n\nMy eyes slid past her shoulder.\n\n\"It belongs to you! I belong to you...\"\n\nI could see us in the mirror. A tall, muscular man with thick, dark hair and a slender blonde, bouncing on his cock while he held her suspended in the air.\n\n\"I'm yours, Master! All I want is this fucking cock!\"\n\nI readjusted my gaze, staring up into Lena's contorted features as she came, her climax making her shuddering body fall forward so her face was buried in my shoulder. Her lips were still parted as she kissed my skin desperately, moaning while her fingers clawed at my back.\n\nI was splitting her in half, my thick length never slowing as her muscles clamped and released around me. Her thighs tightened around my hips but then seemed to lose control as her body slammed her mind with bliss. \"Ohmygawd...\" Her lips were brushing up my neck now, her voice a breathless murmur. \"You fuck me so good, Master. Like I'm just this needy little toy who exists to serve...\" She tugged at my earlobe with her teeth, teasing me as I slowed my pace.\n\nI stroked up into her, my breath ragged. I could barely think straight myself, now. Fire was roaring through me, fed by the words Lena whispered in my ear.\n\n\"I am a needy little toy, sir... A needy little fucktoy who exists to pleasure this perfect dick...\"\n\nI couldn't hold back.\n\nLena gasped as I slid out of her body, but even as I lowered her feet to the ground I was spinning her in place, pressing her up against the glass again and bending her over. Her palms smacked against the glass and then my hips smacked against her round, bubble butt as I pounded inside of her in a single motion.\n\n\"Fuckyesss!\"\n\nHer cry of pleasure faded into my background as I spread her legs wider and powered forward a second time. And a third.\n\nMy hands on her hips were the only thing keeping her on her feet, now. I could tell her knees were wobbly, her fingers scrabbling weakly at the glass but too overwhelmed with pleasure to care about standing. She came again, her body shuddering back against mine with every powerful stroke.\n\nSomehow, the gorgeous blonde managed to press herself back from the glass and into my body, her head tipping back against my chest. Her green eyes blinked up at me, eyelashes wet with the fractured water I could now barely feel against my shoulders. I kissed her as I buried myself in her body one final time.\n\nThen, I flew right over the edge.\n\nI came, hard, my whole body bucking as I actually lifted Lena's slight form into the air an inch or two with the power of my thrust. I growled, my muscles tightening as one hand rose and squeezed a round, bouncy tit and my lips devoured her mouth. Her feet hit the floor again and I held her in place, my cock pulsing and shooting strand after strand of hot, sticky seed straight into her womb. My balls were heavy and aching, my core tight and throbbing with fire.\n\nWhen I finally pulled back, sliding free and stumbling against the wall behind me, I knew that my spunk had whitewashed her inner walls, coating her in the ultimate expression of my primal dominance. Drunkenly, shaking water from my eyes, I groped blindly for the handle and fumbled it to one side, cutting off the shower.\n\nWow... I thought. I felt dazed, like I'd just come out of some sort of trance and my thoughts were still reorganizing themselves into their normal pathways.\n\nBehind me the water was dripping to a halt \u2014 plop plop plop down to the tiled floor.\n\n\"Ohmygod...\" It was halfway between a groan of satisfaction and a whisper of awe, and my eyes turned to Lena where she was slumped against the wall. Her head pressed back against the glass and her lids were clamped closed, her body shivering as she rode out another wave of pleasure. When she opened her eyes, though, they were back to their normal, flashing intelligence.\n\nI felt a single, momentary shard of worry. What if she hadn't come in to be hypnotized, and I'd just\u2014\n\n\"That was sooo hot.\" Her voice put any worries to rest. It was saturated with satisfaction. \"Fuck that was just what I needed.\"\n\nI felt my tired shoulders sag just a little in relief, then pulled them back and met her eyes confidently. \"I know.\" My tone was smooth, and I said it with the kind of easy, swagger I'd always wanted to have. I guess fucking a gorgeous babe while she cums a dozen times around your cock is one way to get it.\n\nLena swayed slightly as she took a single, wobbling step forward and then fell up against me. She grinned drunkenly up into my face. \"I can barely walk right now,\" she confessed. \"I can't tell if I'm just too high on pleasure, or if my brain is still waking up the parts of my body that don't have to do with sex.\"\n\nI smirked and bent, planting a kiss on her lips.\n\nThe young blonde sighed contentedly and kissed me back for a long, slow moment. Then, she pulled back and blinked several times. \"Alright...\" She blew out a breath, then nodded. \"I think I'm going to go lie down for a minute.\"\n\nMy eyes locked on her swaying hips as she sashayed out of the shower, plucked a towel from the rack and bent to pick up her robe from its rumpled pile on the floor. Then, with a last glance over her shoulder, she blew me a kiss and slipped away into the bedroom.\n\nI stood in the shower for several long, slow moments before I followed. I wasn't thinking, just enjoying the sensation of satiation that filled my body. It had relaxed my mind, as well as my muscles, and I let it fill me with a blissful ease.\n\nI'll definitely need to have Danielle to wipe any recordings of this suite, I thought absentmindedly as I pushed through the glass door and stepped from the warm, wet shower tiles to the cool, dry tiles outside. It really is nice to have secret access and control over the security features.\n\nI snagged a towel and rubbed it across my face, the soft texture glorious on my damp skin. I was halfway through toweling my hair when I froze.\n\nThe towel hit the floor as I turned and strode into the bedroom, naked body still wet from the shower as I pushed through the door and strode directly to the bed.\n\n\"Mitch?\" Lena was stretching languidly, her long, smooth legs twining together like a statue of a sex goddess. She raised one sculpted eyebrow and I could tell she was fully herself again.\n\nI didn't answer, just swooped in and kissed her hard, pressing her down into the sheets. Despite having just emptied itself deep inside her, my body pulsed with a feeling of heat and power and lust. Only now, it was also a feeling of triumph.\n\nI knew what we needed to do.\n\nThe young woman's lashes had fluttered low by the time I pulled back, and then her eyes slid down to the raging erection that was now standing straight out from my body. She smirked teasingly. \"You feeling good, lover?\" Her voice was pitched low and inviting.\n\nMy body strained against me, wanting nothing more than to take her again. But I held my lust in check. I was too excited to give in to my caveman brain. My academic brain was on a roll.\n\nBefore, I had had some crazy notion that in order to face Joseph Clayton we needed to return to the Academy. But why would I leave my position of strength? Why would Lena and I give up the element of surprise by venturing into his territory, custom-built to ensnare us once again with powerful subliminal messages? Why should we go to him, when we could make him come to us?\n\n\"Maybe even better now,\" I grinned in response. \"Because now I have a plan.\"\n\n* * *\n\nI slept that night in the huge, King-sized bed, like an ancient king between two members of his young, beautiful harem.\n\nDanielle had seemed calmer after an hour or two of subliminal programming, but tired. I suppose she'd had a long day. First, a normal day of work, which would exhaust anyone. Then, an afternoon of marathon sex with two strangers. Finally, a covert operation against a powerful business magnate, even more passionate sex, and several hours spent rewriting the inner workings of her mind and will. Small surprise that she clambered into bed, snuggled up next to me, and passed out almost instantly.\n\nI was exhausted as well, but my mind didn't want to shut off. Instead, it wanted to examine tomorrow's plan from all angles, take it apart and look at every variable to make sure it was sound and correct before rebuilding it piece by piece.\n\nStop... I eventually told myself, after a quarter of an hour spent staring up at the blank ceiling above me. You're doing the best you can, and that's the end of it. Just remember that you can't fail, because if you do you lose everything. \n\nIt was that comforting thought that kept me awake in the dark for a long time.\n\n* * *\n\nJulia was on her hands and knees, full tits swaying beneath her athletic figure as she took my cock between her lips. Her dark hair brushed across my thighs, teasing me as her hot mouth descended down my manhood. \n\nI murmured incoherently and her eyes sparked with teasing laughter, her tongue making circles around my throbbing shaft. \n\n\"That's good, isn't it?\" she asked, never taking her mouth from my length. \"You like how I make this dick feel, don't you baby?\" She stroked one hand up my thigh, nails brushing across my skin.\n\nI nodded, my brain rolling in pleasure like it was a warm, comfortable blanket. It blurred the edges of my confusion, soothed my worries. I felt myself shiver as a bolt of lust shot through me.\n\n\"Mmm... Good.\" Her mouth popped free and then my shaft was wrapped in the warm, pillowy embrace of her full breasts. \"Do you like how these titties feel wrapped around that thick cock, stud?\"\n\nWait... I didn't want to think, just wanted to relax into the pleasure, but something wasn't right.\n\nMy girlfriend was staring into my soul with smoldering eyes. \n\nJulia didn't talk like that... \n\n\"I'll bet if I sucked your cock this good you'd never have left me...\"\n\nMy eyes shot open.\n\nMy heart was pounding in my chest and the room was only dimly lit by early rays of sunlight filtering into the room between the curtains. My fingers were tight and knotted in the sheets.\n\n\"Mmm...\" I groaned, my hips shifting ever so slightly. I blinked, then, and realized that the sensation of a hot, wanton mouth on my cock hadn't disappeared.\n\nI scanned the bed. Lena was still beside me, sleeping peacefully with one small hand resting on my chest. On my other side, though, was a Danielle-shaped rumpling of sheets but no dark-haired beauty. My gaze drifted down my naked body.\n\nThere, between my legs, was the slender figure of the pretty hotel employee, her ass in the air as she sucked my morning wood between talented lips. For a single instant, I imagined that Danielle looked a little like Julia... But no. It was just the dark hair. And wishful thinking.\n\n\"Danielle?\" The word was half question and half groan of encouragement.\n\nHer dark chocolate eyes flickered up from her task, meeting mine. Her lips were wrapped fully around my shaft, massaging me gently as her head bobbed up and down. Then, she slowly shook her head, never slowing as she worshipped my manhood with her tongue.\n\nI paused for a second, confused, then took a guess. \"Raven?\" I asked.\n\n\"Mmhmm...\"\n\nThe moan of affirmation vibrated up my cock and into my core, making my toes curl as jolts of pleasure shot down my spread legs. \"Fuck...\" I groaned. I wasn't sure how long Daniel \u2014 or, rather, Raven \u2014 had been going down on me, but I was so hard I felt like I was about to explode with the tension.\n\n\"I'm gonna cum soon...\" I warned, figuring I might as well be gentlemanly.\n\nBut Raven's eyes just sparked, and the heat and enthusiasm in her expression turned up a notch. \"Mmm...\" she groaned, sliding me between her lips until I felt the tip of my length slide into her throat. Then she pulled back and did it again, staring into my eyes like she wanted nothing more than to take my hot load right into her stomach.\n\nThe thought drove me over the edge. \"Ohfuckyeah...\" I clenched my jaw as my hips twitched and my hot, sticky seed spurted straight up into Raven's waiting mouth.\n\nThe brunette's cheeks hollowed as she sucked harder, taking strand after strand, swallowing it down. The sight was incredibly sexy, her pretty features desperate as she took my spunk down her throat like it was the most delicious thing she'd ever tasted.\n\nI groaned when I was finally spent, relaxing back down into the mattress. As pleasure buzzed through my brain, I finally took a second to wonder why Danielle had woken up and immediately transferred control to Raven's personality. I cracked my eyes open, then pushed myself up on one elbow as I regarded the woman kneeling between my legs.\n\nShe had a blissed out expression on her face, but when she caught me looking she turned it into a wink. \"You like that?\" she sounded supremely self-satisfied.\n\nI nodded. \"That was... incredible.\" I tried to remember if I'd ever been woken up with a blowjob before, but decided that it had only ever been in fantasy. I sagged back against the pillows. \"So, Raven, did you... um, sleep well?\" I realized I really had no idea how to talk to Danielle's nympho alternate personality.\n\nJust try being normal, I told myself. They're obviously aware of each other, at least to an extent. I recalled that last night Raven hadn't remembered how she'd gotten to the hotel room. So, maybe it was like one of those special interrogation room mirrors? Danielle knew what happened with Raven, while Raven was only able to guess at what was going on with Danielle?\n\n\"Don't get too comfy, Mitch.\" The woman's voice, thick with arousal, shook me from my thoughts.\n\n\"Oh?\" I asked, glancing down at her. Her eyes were hot.\n\n\"Now it's my turn.\"\n\nI snorted, a smile twitching across my mouth, then shrugged. \"Why not?\" I forced thoughts of my dream from my mind as Raven crawled past me and flipped onto her back. She spread her legs, and even in the dim light I could see the glistening wetness of her folds.\n\n\"Alright, mister,\" she murmured. \"I know you can fuck. But let's see if you know how to eat pussy like a real pro.\"\n\nI snuffed a chuckle as I bent my head, my tongue and lips teasing up Raven's inner thighs. It was strange how different the Raven personality was from Danielle's usual light, charming self. Raven was more direct, almost aggressively so, but I couldn't say I hated her for it.\n\nIn fact, it was kind of a turn on.\n\nMy tongue flickered across her entrance, just brushing across her outer folds. I tasted her tangy arousal, could smell her desire in her scent. My tongue slowly slid across her skin again, and then again, teasing.\n\nHer hips arched, seeking my touch, and I heard a soft groan of protest. \"Come on, Mitch,\" she demanded. \"Fuck I'm so horny right now...\"\n\nI raised my head. \"Aren't you going to call me Master?\" I asked with a short grin. I loved the thought that sucking my cock had turned her on so much, that serving me had made her this wet.\n\nBut the brunette just raised her eyebrows at me. \"You can keep those power fantasies between you and blondie,\" she told me playfully.\n\nI slid my tongue between her folds, tasted her hot, inner depths, and she groaned, bucking briefly under my hands. I lifted my head again, staring into her eyes. I wasn't sure where my confidence came from, but it was certainly new. And I certainly liked it. \"'Sir,'\" I told her, quietly but firmly.\n\nRaven hesitated, and I slid one finger slowly up inside of her. \"Ohgod...\" The dark-haired young woman moaned, lips parting in a gasp and lashes fluttering.\n\nI slowly eased the finger back, and she swallowed as she met my eyes again. She was panting softly. \"You can keep those power fantasies between you and blondie, sir,\" she said, and I could tell that even with her resistance, her eyes flashed with arousal at the small submission.\n\n\"Good girl,\" I murmured. Then, I lowered my head and went to work.\n\nRaven's hips writhed under my palms, my hands holding her firmly in place as she tried not to cry out in pleasure and wake Lena in bed next to us.\n\nMy tongue was moving in swift, steady strokes, brushing across her hot entrance and then over her clit again and again. Every time my lapping tongue moved across her pleasure button it was like a jolt of ecstasy shot through her body, and I could feel her growing hotter and hornier with every passing moment.\n\n\"Ohfuck...\" she groaned. \"Yes, sir... That's perfect, sir...\"\n\nI was getting hard again, her desperate pleasure and her submission like a cocktail of arousal that injected itself straight into my manhood. But I'd already had my fun, and now it was time to pleasure this woman right into my control.\n\nHer skin was soft under my palms, my hands smoothly slipping down her thighs and closer on either side of my face, buried between her legs. I held her in place with one hand, and then the other joined my tongue as I flicked and flicked and flicked over her clit.\n\n\"Ohmygawd...\" Raven came as two of my fingers slid in and out of her tight entrance, my tongue dedicated to the little pleasure button and my fingers smoothly filling her pussy. Her tunnel clamped down, gripping my fingers like she never wanted them to leave. Her body tensed, back arching into the mattress and thrusting her lithe figure up in a bend like a bow, and then she collapsed, muscles spasming.\n\nSlowly, leisurely, I crawled up next to her, my sticky fingers sliding up her flat stomach and over the swells of her heaving tits. When they reached her mouth, she parted her lips without protest. As she sucked my fingers slowly, tasting her own juices, my voice was a gentle whisper in her ear.\n\n\"Thank you, Master,\" I murmured.\n\nRaven took a moment as my fingers slipped from her mouth, then turned her face my way. Her eyes darted down to my lips, then back up to meet my own, dark gaze. They stayed there for a moment, my commanding stare drilling down into her.\n\nThen, a gentle sigh and a glimmer of arousal as she whispered, \"Thank you, Master.\"",
        "* * *\n\nLena stirred awake not long later, and turned on her side. I felt her rustling and looked over.\n\n\"Danielle?\" she asked sleepily, rubbing her eyes and looking around.\n\nI slipped an arm under my head, admiring her for a moment, then nodded in the direction of the bathroom. Through the door, the sound of a running shower was audible. \"Washing herself up,\" I said. I let slip a small grin. \"She woke me up this morning and we got a little dirty.\"\n\nLena's sleepy smile turned mischievous. \"Is that so?\" she murmured, eyes sliding down my body.\n\n\"Mm,\" I agreed, my smile broadening. \"And now that she's out of the way...\" I opened my arms, and Lena laughed softly. It was a soft, sweet sound, and it still surprised me. Somewhere, part of me still instinctively expected the young blonde to act like the bitchy, manipulative socialite I'd come to know in the past weeks.\n\n\"A cuddle?\" she asked, green eyes flashing. \"Very well, I accept.\" She wriggled through the sheets, pulling the comforter after her, and turned to nestle back against me. Her slim figure, completely naked, settled comfortably in the curve of my body, and I had to resist the urge to let my hands roam over her smooth skin. It would start something, I knew, and right now I just wanted to relax a moment and think about the day to come.\n\nIn spite of myself, though, I started to mull on the blonde cuddling against me with my arm wrapped protectively around her. It was strange how quickly I'd come to care for this young woman. Less than two days and nights together and we'd already gone from enemies to lovers, and maybe grown even closer than that. Part of it, I was certain, was the insanity of our situation. In fact, that was probably most of it. But a part of me wanted to believe it was because there was really something there.\n\nI shook my head slightly and jostled those thoughts aside. I focused on the day ahead, thinking about how to give our plan the best chance of success, and thinking about Danielle and Raven. After this morning, it seemed to me that Danielle had been hypnotically programmed by the Joseph Clayton's video but Raven hadn't. She was a byproduct of the hypnosis, but not under its influence. Raven, though, was governed by a much simpler rule. The desire for sexual pleasure. And, because of how Lena and I had accidentally created her, a matching desire to submit to Lena and me. A desire I'd tapped into this morning when I'd begun the process of training her in obedience.\n\n\"Are you feeling better?\" Lena was facing away from me, so her voice was a little muffled, but I could hear the hope and concern her tone.\n\n\"Hmm? How do you mean?\" I brought myself back to the moment and shifted under the comforter, feeling the curve of Lena's ass against my slowly hardening length. It seemed that I couldn't help myself around these two intoxicating young women.\n\nThere was no way Lena didn't feel my growing erection, but she just shifted her hips slightly, easing back toward me. \"After coming up with the plan. I know you were worried. I was, too. But I hope a good night's sleep and...\" Her hand drifted back, over her own hip and then across mine. \"Everything else... helped you to relax.\" Her fingers were soft on my skin, growing closer and closer to my shaft.\n\nI swallowed, then nodded, realizing that my mouth had grown dry. \"Yeah,\" I said. \"Now that everything is ready I feel much...\" Her fingers wrapped around my girth, softly stroking. \"Mmm... Much better.\"\n\nThe blonde moaned softly as well, my cock pulsing with lust at the sound. She shifted her hips again, and the comforter rose as she lifted one knee. She rustled back again, closer, and I felt the tip of my length slip between her legs and nudge up against her entrance.\n\n\"Ohfuck...\" Her voice sent another jolt of heat through me. I could feel the heat radiating out from her pussy like an oven, her liquid desire making her wet and ready for me. Her hand slipped gently off my throbbing manhood and up onto my body, finding my own hand and guiding it to her hip.\n\nI paused for a moment, and Lena's voice was a deep, yearning invitation when she asked.\n\n\"How about you wake me up now, Master?\"\n\nAnd even though I knew she wasn't hypnotized, I knew she was mine. And with that knowledge sending a wildfire of arousal ripping through me, I thrust.\n\n* * *\n\nHarrison St. John had slept on the couch in the living room.\n\nHe hadn't minded. He hadn't minded being tied up, either, hadn't even struggled against the bonds as we'd bound him with the braided ropes usually used to tie back the curtains. I wasn't sure how much of a mind he had left, after several hours of being subconsciously besieged by the subliminal hypnotic programming of Joseph Clayton's Academy training courses. But when Lena and Danielle and I emerged from the bedroom at last, he was seated calmly on the couch staring into the distance. His wrists were bound together in front of him and his feet were tied.\n\nI frowned. We had tied his hands behind him last night.\n\nHarrison blinked, then turned our way with a brief smile. \"Hello and good morning!\" His voice was peppy and he rose to his feet with the same smile on his round face. He saw my frown, caught my glance at his bound hands, and the smile turned a little sheepish. \"Sorry about that,\" he shrugged. \"My shoulders got a little uncomfortable last night so I just slipped my hands under my feet and around to the front.\" His smile brightened. \"Slept like an infant after that. And...\" He jerked his chin across the room in the direction of the small kitchen. \"Anyone want coffee? I made a pot.\"\n\nMy frown had rapidly become one of confusion.\n\n\"Certainly was a tricky business, putting it all together while my hands and feet were tied. But I managed it.\" The man's chubby features were hopeful now, and so I shrugged assent.\n\n\"Coffee sounds great.\" Then I added reflexively, \"Thanks.\"\n\nHarrison rose ponderously to his feet, swayed, nodded to himself, and then proceeded to hop his way from the couch to the kitchen island, his round belly jiggling with every bounce.\n\nI shared a confused glance with Lena. Danielle, on the other hand, had simply meandered over to the couch and lounged back on the cushions. Once Raven had been satiated, it had only taken a few minutes of quiet for Danielle to smoothly and quietly reemerge.\n\nWhy is Harrison being so... helpful?\n\nThen I recalled, weeks ago, coming into my classroom the day after my very first encounter with Natalie. How she'd seemed aware of what we'd done but attached no importance to it. It must be some part of the conditioning, I thought.\n\n\"Milk? Sugar?\" The businessman's voice came cheerfully from the kitchen. \"Do you want anything, Lena? Or you, my dear?\" This last was directed at Danielle, who we'd never actually introduced to him.\n\nHe sounded so sociable all of a sudden, like he was just a moonfaced, middle-aged businessman with nothing but happy, kind thoughts.\n\n\"A splash of milk, please,\" was Danielle's unconcerned reply, while Lena just looked at her erstwhile father figure with a look of mingled shock and confusion.\n\n\"Go with it,\" I muttered, leaning down and speaking quietly in the blonde's ear. \"I think it's just part of the programming. And it'll be easier for the plan if he's trying to help, instead of being forced.\"\n\nHer frown deepened momentarily into something angrier, but then her shoulders rose and fell with a sigh of self-control. \"Mitch and I will take our coffee black,\" she called sweetly, and when Harrison glanced our way again she treated him to a dazzling smile. \"Let me help you bring it in.\"\n\n* * *\n\n\"So, Harrison...\" The man was seated at one end of the coffee table in a chair we'd brought in from the bedroom. Lena, Danielle and I were relaxing back on the couch, sipping our coffee, while Harrison watched me closely, absorbing my words. \"Do you understand what you need to do?\"\n\nThe man was still tied up, and now he lifted both hands to scratch one side of his round jaw. \"I think so,\" he said. \"Seems straightforward.\" He puffed out his chest. \"Back in the day, I was a master of phone sales. The Saint of Sales, they called me.\" His grin was a little self-effacing. \"Of course, it's not the most devout nickname, but my skills spoke for themselves.\"\n\n\"Good,\" I nodded. I chewed on my lip, then glanced over at my companions. \"What time is it?\"\n\n\"10:36,\" Danielle reported, checking her phone.\n\n10:36 on a Sunday morning, I mused. I hope he's awake.\n\n\"You have your phone somewhere in here, I assume?\" I directed this question at Harrison.\n\nThe man nodded. \"Definitely. In the bedroom, I believe.\" He started to rise. \"Would you like me to fetch it?\"\n\nBefore he could leave his seat, Lena had tugged a large smart phone from the pocket of her robe. \"No need,\" she said, tossing it with a clatter onto the coffee table. \"I got it already.\"\n\nIf she tossed it with a little more force than necessary, I didn't comment. I knew that behind her fa\u00e7ade of calm, there was no way she had forgiven Harrison.\n\n\"Perfect,\" I muttered, feeling a sudden dread in the pit of my stomach as the man scrabbled the phone up from the low table. No more delays. \"We all know our parts?\" I checked. \"Lena? Danielle?\"\n\nDanielle gave a quiet nod and Lena pressed her lips together in a hard line. \"Yes, Mitch. Just sit here and be quiet and listen. We've got it.\"\n\nHer voice was brittle, but I didn't say anything. I just squeezed her hand gently as I nodded at Harrison and he pressed the Call button, then awkwardly held the phone up to his mouth. The phone rang once, quietly, and then he swallowed nervously and put it on Speakerphone.\n\nI could understand Lena's nervousness. We were putting things in motion that could threaten all of our security.\n\nThe phone rang again, louder. An electronic tone that punched me in the chest.\n\nBut even though I understood, I knew that there was no running away. We had to face this head on. Which meant we had to face\u2014\n\n\"Harrison St. John!\" Joseph Clayton's voice had its usual bluff charm, and I felt it worm its way into my chest like a cold snake. \"What can I do for you on this fine morning?\"\n\n\"Joseph,\" Harrison didn't hesitate as he smiled gently, eyes never looking away from the phone screen. I could hear it in his voice, the ease of long practice. He was projecting security and calm, conveying it all in a subtle undercurrent beneath his words. \"Thank you so much for picking up during your off hours.\"\n\nThe principal of the Brighton Barnsworth Academy chuckled. It was an unconcerned sound, brushing away the gratitude. \"Anything for you, my friend. I am a little bit occupied at the moment, though, so if you let me know how I can help you I would be delighted to do what I can as soon as possible.\"\n\nHarrison nodded. \"I understand, Joseph. But...\" he hesitated just the right amount. \"I need to see you. Right away. At my hotel. Something very bad has happened to Lena.\"\n\nHe's good, I thought, listening to Harrison sell our plan to the Academy principal. His slight hesitancy, his combination of warmth and urgency and gratitude. I realized, abruptly, I'd only ever seen Harrison around women. It was probably his weakest area, given his need to literally purchase a lover. But in business and selling, I suddenly had no doubt that Harrison St. John was a master.\n\nThere was a sudden stillness on the other end of the line.\n\nHarrison leaned forward like he was going to speak, then shook his head at himself and sat back. Waiting.\n\nWhen the voice returned, it was ever so slightly harder, like there was only a thin layer of civility and professionalism between it and the speaker's true state of displeasure. \"What do you mean, something bad has happened to Lena?\"\n\nEverything was going according to plan. But as the principal's anger clawed through the phone like a frustrated lion I felt like I'd just locked the door to our own prison and thrown away the key.\n\nHarrison paused another fraction, wet his lips, then said simply, \"I made a mistake. I need your help. Please come quickly. I believe you should have my residence information.\"\n\nJoseph Clayton swore, then, angrily, and it was the first time I'd ever heard the man lose his temper. \"You absolute...\" I could hear that a massive effort of will was employed to keep him from completing the sentence. \"Don't go anywhere. I'll see you in an hour.\"\n\nThere was a voice in the background, then, and Joseph Clayton's voice was thin. \"Patience, please. We'll find him soon enough.\"\n\nMy blood chilled and my heart seemed to stop as the principal hung up.\n\nBecause the second voice was one I recognized.\n\nIt was Julia.\n\n* * *\n\nANNOUNCEMENTS:\n\nThank you so much for reading the eleventh chapter in this series \u2014 Bimbo Builder Academy.\n\nI really hope you enjoyed it, and if you did then please rate and comment. It means the world to me and even if I don't respond to all my comments, please know that I read every one. When I feel like my work doesn't matter, I come back and am reminded that wonderful people out there really are reading what I publish.\n\nYou can find me elsewhere online if you want to get early access to stories (multiple weeks ahead of Literotica). If you're going to be spending a lot of time alone this coming month (what with the virus and all) I hope that reading these stories gives you a little entertainment during long, boring stretches of time.\n\nLots of love, and I'll see you soon for my next publication!!!\n\nJC\n\n \n"
    ],
    "authorname": "JCBeleren",
    "tags": [
        "action",
        "blonde",
        "blowjob",
        "brunette",
        "female submissive",
        "hypnosis",
        "male dominant",
        "mind control",
        "oral sex",
        "professor"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/bimbo-builder-academy-ch-11"
}
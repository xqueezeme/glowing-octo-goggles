{
    "title": "Willow\u2019s Way Ch. 05",
    "pages": [
        "Summary: Faith presents stuck up bully Cordelia to Willow as a one-month anniversary present.\n\nNote 2:\n\nIn Chapter 1, Faith tries to seduce and ass fuck Willow, who surprises the aggressive slayer by turning the tables.\n\nIn Chapter 2, still the same night, Faith can't get enough of being sodomized in the high school while they are supposed to be on patrol.\n\nIn Chapter 3, Faith falls deeper into anal submission to Willow, who fucks her in a graveyard and Buffy catches them in the act.\n\nIn Chapter 4, Willow discovers a way to make her strap-on cock a real male cock to unload cum into Faith's ass; Willow and Faith also (through both word and deed) reveal their sexual relationship to the gang at The Bronze.\n\nWillow's Way Ch. 05\n\nIt was their one-month anniversary of the first night Willow had turned, gaped, ass fucked and destroyed Faith's asshole. And since that night, Faith had been completely addicted to Willow's two cocks (the original strap-on and the more recent magical one that was actual flesh and blood and which shot semen).\n\nSo for their one-month anniversary she wanted to give Willow as special a surprise as she could come up with.\n\nOriginally she'd thought she might find a way to seduce Buffy on Willow's behalf, and then present the other slayer to her as a fait accompli; she could tell Buffy was intrigued by what she'd witnessed them doing together... but then when Cordelia, Willow's long-time bully until recently, came up to her and started asking questions, she knew what she could do that was even better! Cordelia asked her, \"What you said isn't really true, is it?\"\n\n\"What I said about what?\"\n\n\"About Willow fucking you...\" Cordelia said, then lowering her voice, \"...in the ass.\"\n\n\"Oh yeah! Willow's a real ass fucking machine,\" Faith replied enthusiastically. \"Why? Do you want to get that sexy ass of yours destroyed too?\"\n\n\"I'm not saying that,\" Cordelia denied, her cheeks going flushed, since she hadn't been able to stop thinking about Willow in that way ever since that night at The Bronze... a couple of weeks ago.\n\n\"Oh, but that's exactly what you're saying,\" Faith smiled wickedly, now knowing for certain what, or rather whom, she was giving her girlfriend tonight for their anniversary.\n\n\"I-I-I need to go,\" Cordelia stammered, realizing she'd just given away way too much to Faith .\n\n\"Not so fast!\" Faith pushed Cordelia against a wall, shoving the palms of her hands squarely against her tits. \"Tell me Cordelia,\" she queried in her sexy, sultry voice, \"have you ever had that ass of your fucked?\"\n\n\"N-n-no,\" Cordelia stammered, even while her pussy tingled at Faith heavily cupping her tits and feeling her panties dampening.\n\n\"Y-y-you're lying,\" Faith stammered mockingly, always able to tell when she was being lied to, and except for the anomaly of Willow's flipping the script on her a month ago, she was almost invariably the most dominant one around... the one able to turn almost anyone into her willing plaything, regardless of their gender. (The only exception besides Willow being Buffy. Neither she nor Buffy could ever get the other to back down, so their cautious friendship was pretty much based upon grudging mutual respect.)\n\n\"Please,\" Cordelia said, even though she wasn't certain sure what she was asking for.\n\nAnd of course sensing her confusion, Faith pounced. \"Please what, sweety? Please push you to your knees and allow you to eat my cunt? Or please strip you, bend you over and fuck your pussy with my strap-on? Or perhaps please gape your asshole and offer it up to Willow to destroy?\" Faith spewed out possibilities while she reached her hand under the pretty bitch's skirt and went directly to her pantyhose-clad crotch.\n\n\"Oh, God,\" Cordelia moaned, since hearing Faith's wicked offers had her already wet pussy literally leaking out on her. Then when Faith began rubbing it, she thought she might burst right there in the library!\n\n\"Tell me what you want,\" Faith ordered as she continued rubbing the helpless girl's pussy. A month ago she would have simply shoved this prime target to her knees and made her eat her out, or taken her back to her place and fucked her hard, perhaps in both holes, but now that she had a girlfriend and was being faithful to Willow, she easily resisted the temptation.\n\n\"Please, not here,\" Cordelia begged, since although they were secluded in the library stacks, they could be happened upon at any minute, and she was very loud when she came... like awakening the dead loud!\n\n\"I'm good with that. Let's go to my place,\" Faith suggested, figuring that would give her an hour to prepare the slut for Willow as her very generous anniversary surprise. Even as she thought of that, she shook her head not quite in dismay at how Willow hadn't only turned her into a submissive anal slut, but had also turned her into someone so considerate that she'd remember their anniversary.\n\n\"But I have to attend a class,\" Cordelia resisted.\n\n\"Like I give a fuck,\" Faith snorted, slapping Cordelia's pussy three times through her pantyhose.\n\n\"Ohhhh,\" Cordelia moaned, hurriedly covering her mouth.\n\n\"So let's fucking go, before I make you come at top volume in the library,\" Faith threatened. It wasn't much of a threat, but she definitely meant it, and she'd really do it if it came to that.\n\n\"Okay,\" Cordelia said, unsure what she was agreeing to, but knowing Faith wasn't one to bluff. So another minute, and she'd be screaming bloody murder in the library, since she got very loud and verbal when she was revved up. In truth, she'd be willing to explore almost anything with Faith and Willow... having been unable to stop replaying in her head what she'd seen them doing that night at The Bronze no matter how she tried. She'd sometimes read some articles about anal sex. Recently she'd binge-watched almost exclusively anal sex scenes. She was currently reading predominantly anal stories. And as a result, she'd become obsessed with the idea of being not only ass fucked, but dominated by Willow while it was happening... which was absurd, given how meek the little mouse had always looked and behaved, and the ease with which Cordelia had been able to walk all over her throughout high school.\n\nFaith and Willow had already planned to meet at Faith's after school to celebrate their anniversary, so Faith didn't need to go find Willow and arrange anything... so she simply led Cordelia off the schoolgrounds and away to their rendezvous.\n\nOnce they were away from the school and clearly out of anyone's earshot, and Cordelia having had enough time to calm down, she summoned up the pluck to say, \"I'm actually not sure about doing this.\"\n\n\"About doing what?\" Faith asked, subtly demonstrating her dominance by walking slightly ahead of the preppy bitch.\n\n\"Going to your place, and... stuff,\" Cordelia said, her libido was desperate to keep going, but her logical side knew this was a bad idea. (Which was why it was uncooperative in helping her complete sentences.)\n\n\"That's already been decided,\" Faith said, not slowing down or looking back at the girl.\n\nCordelia stopped and said, \"I'm sorry, but I just can't do this.\"\n\nFaith, hearing the pretty girl's footsteps stop, turned around, stormed the few steps back to confront her face to face and said, \"Look, you dumb fuck. It's obvious you want to get ass fucked. You also want to get used like a dirty slut. You even want to eat my cunt. So all those things are going to happen, is that fucking clear?\"\n\nFaith's argumentative tone and wicked words had lit Cordelia's libido on fire again. However, \"I just don't know,\" she said, sounding wishy-washy... just like she'd always seen Willow as before her boisterous coming out at The Bronze.\n\nFaith reached her hand under Cordelia's skirt right out there in the open on the sidewalk, and bellowed, \"You don't know? Well I'll tell you what I know. I know if you don't get a move on, I'll finger bang you right here, and then I'll make you eat me right here, and then I'll do your ass until you're screaming for more! It's either that, or you fucking shut the fuck up, follow me like the submissive slut you are, and we do all of that in the privacy of my apartment. Either way, possible TV cameras or not, you're getting your asshole torn apart! Got it?!\"\n\n\"Okay,\" Cordelia whispered.\n\n\"Okay what?\" Faith asked, continuing to rub the girl's pussy right out there in the open.\n\n\"Okay, okay, I'll go to your place,\" Cordelia moaned, ashamed of what was happening to her and yet so fucking turned on.\n\n\"And then we'll do what?\" Faith asked as she rubbed her hand back and forth, getting Cordelia's to legs buckle a little.\n\n\"Whatever you want to do with me,\" Cordelia caved, and at that moment meaning it.\n\n\"Good,\" Faith said as she removed her hand, knowing exactly when to stop teasing and to leave a woman in a muddled mental and emotional mess, and she resumed walking to her apartment.\n\nNear orgasm, Cordelia took a deep breath and followed the pretty blonde, wondering what exactly she'd just agreed to... and just how far things were going to go. A part of her, a growing part even, was dying to find out... and that side was overruling her cautious side, which was pleading with her to turn around and run like hell!\n\nThey arrived at her apartment, walked inside, and Faith ordered, \"Strip. We need to dress you up like the slut you are.\"\n\n\"Pardon? Who's a slut?\" Cordelia asked as she began to comply.\n\n\"You are. And pantyhose? What are you, twelve?\" Faith taunted as she came up to her, reached under her dress and yanked them down.\n\n\"What's wrong with pantyhose?\" Cordelia asked, thinking they accentuated her legs, and she knew Willow often wore them.\n\n\"Proper sluts wear either thigh highs or a garter-belt and stockings, so there'll be easy access to their pussies and assholes,\" Faith explained, lifting her dress to reveal a garter-belt and stockings, an especially nice new set she'd bought today for Willow's viewing pleasure... it went nicely with some other sexy lace lingerie she had... and of course no panties.\n\nCordelia spotted Faith's shaved pussy and gasped.\n\n\"You like eating pussy?\" Faith asked, seeing the hunger in her eyes.\n\n\"I have on occasion, but I usually get girls to eat me,\" Cordelia bragged; the nerds, the geeks, the jocks, all were eager to go down on her hoping to benefit their social status.\n\n\"Well here in my house you'll be bottom slut,\" Faith pointed out, then added with a smirk while already imagining Willow destroying this bitch's asshole, \"quite literally. Now fucking strip. Let's see that ripe young body of yours.\"\n\nCordelia knew she was in over her head, knew this encounter was going to get way out of control, but her curiosity and lust were still leading the way while she got undressed.\n\nFaith went to her dresser and selected a white garter-belt and stockings set, figuring that was all her new pet would need. She returned to admire Cordelia's nude and impressively tight body, which was almost as tight as her own. The old her would have been using this beauty already, but the new her was only preparing her for Willow.\n\nFaith had already received two loads from Willow's magic cock today, one in the morning before school, and another during lunchtime in a seldomly frequented bathroom in the school basement... both times Willow had unloaded a massive load into her shit hole, and then Willow plugged it up tight with a butt plug, to keep her asshole well lubricated and gaped for quick and trouble-free access all day.\n\n\"Put these on,\" Faith instructed, as she too climbed out of her dress.\n\nCordelia stared at the slayer, in awe of her perfect body.\n\n\"What are you staring at?\" Faith asked, even though she knew exactly what Cordelia was staring at... perfection! This was the invariable look she got from boys and girls, and men and women, once they saw her naked.\n\n\"Nothing,\" Cordelia said, looking away sheepishly, and fastening the garter-belt to her hips. She'd never worn one of these before, but since Faith was wearing one she just replicated the look.\n\n\"Right, absolutely nothing,\" Faith smirked, indicating she knew exactly why she'd been staring.\n\nOnce Cordelia had the stockings on and the clasps attached, Faith ordered, \"Get onto all fours on the bed, slut.\"\n\n\"I'm not a slut,\" Cordelia denied, always hating that word. It was so demeaning to women. If a woman liked sex and did it a lot, she was a dirty slut; but if a guy liked sex and did it a lot, he was an enviable stud... just one more illogical slur delivered by a male-dominated world. And it was even more frustrating when a woman called another woman a slut!\n\n\"You've come into my home to eat pussy and to get your asshole gaped and fucked,\" Faith said bluntly. \"Therefore you're a slut. You're my slut and Willow's slut.\"\n\nCordelia hated that blunt truth, but she still hated being called a slut, and she said, \"Wanting sex doesn't make me a slut.\"\n\nFaith shrugged as she walked up to the pretty, but not yet completely broken girl, brought her hands directly to her pussy, and said as she rubbed it, \"I don't give a shit what you think or how you define the term slut or even define yourself, but today you're my slut, you're Willow's slut, and you're our fuck toy, our cunt licker, our plaything, our pet, and our anything else we decide to call you!\"\n\n\"Ohhhhhhhh,\" Cordelia moaned, Faith stroking her pussy driving her wild, as did that plethora of kinky terms, all of them demeaning, and yet right now in the moment, all of them turning her on.\n\n\"Is that fucking understood, you dumb, cunt-licking, ass-taking, bimbo bitch?\" Faith demanded as she squeezed and tugged on the girl's clit with two fingers.\n\n\"Yeeeeeeeeeees,\" Cordelia agreed mindlessly, her potential upcoming pleasure overriding all of her pride and all her feminism... plus, she decided, if she started only being with other women, that term had a very different connotation, since it didn't fall under any male dominion. So at least for now, she was a slut. \"You win! I want to be your sluuuuuut!\"\n\n\"\n\nAttagirl! So get on the fucking bed now, you dumb whore,\" Faith ordered, shoving her towards the bed and slapping her ass, \"we don't have much time to prepare your asshole for Willow's huge cock.\"\n\n\"Okay,\" Cordelia agreed as she crawled onto the bed and got on all fours... a position she'd never been fond of... she preferred sitting on a face or riding a cock, since those were power positions for a woman, where she asserted the control.\n\n\"Better,\" Faith said as she admired Cordelia's back end, which was very impressive; she was undeniably a very pretty girl. \"You do have a great ass, slut.\"\n\n\"Thank you,\" Cordelia said, always loving to receive compliments, thriving on them and in instilling fear in meeker people... although today for the first time those roles were being reversed and she was the designated meek one.\n\nFaith got onto the bed, got behind Cordelia, and spread her ass cheeks, \"So this asshole has never been penetrated? Not even by any toys or fingers?\"\n\n\"No, nothing.\" Cordelia trembled as she felt Faith's warm hands spreading her cheeks open.\n\n\"It's a cute little rosebud,\" Faith mused, admiring the tiny exit-only hole that would soon look very different once it had been repurposed as a two-way expressway.\n\n\"Thanks,\" Cordelia said, having no idea what a rosebud that wasn't cute might look like.\n\n\"Now it's time to get it ready for the fucking of your life,\" Faith said, \"Willow fucks harder, and with way more stamina than any man.\"\n\n\"I simply can't believe that,\" Cordelia said, not questioning Faith's word, although it came across like that, but more expressing her inherent disbelief that anyone meek like Willow could possibly dominate someone like Faith or like herself... or that here she was wearing some other girl's lingerie that effectively covered nothing, and she was otherwise naked, posed upon all fours with her ass sticking up in the air, and she was about to be sodomized by the wimp of a girl she'd picked on for years. Assembling all of that into her brain was taking some serious processing!\n\n\"Oh, you'd better believe it,\" Faith said, \"because you definitely will soon,\" as she placed a finger against the virgin asshole, \"when Willow has finished destroying your asshole, and you find yourself a forever changed woman.\"\n\n\"Sorry, I only meant I can't even believe I'm here, like posed like this, and like dressed like this,\" Cordelia said, \"let alone succeed in comprehending everything else as well,\" and the next thing she couldn't believe was she felt a finger touching her asshole!\n\n\"You mean you cannot believe you're on all fours willingly getting anally prepped so you can be ass fucked to oblivion by a nerd you've bullied forever?\" Faith asked only out of spite, as she pushed her finger (without any lube of course) into Cordelia's asshole. Faith likely could have instead gotten Buffy onboard for today's anniversary, it was obvious she was curious, but Faith had decided turning this bully into the bullied would be a far better gift. With far more ironic karma! Justice! Retribution!\n\n\"Yes, I guess that saaaaayyyys it all exactly!\" Cordelia agreed as she felt that dry finger forcing its way inside her virgin asshole. It felt weird! So weird!\n\nCordelia said helpfully, \"Make sure to breathe. I've had more than one girl or guy pass out when I've ass fucked them, simply because they've tried to resist the initial pain and forgot to breathe.\"\n\n\"Guys too?\" Cordelia asked, while at least so far this didn't really hurt, it was more of just an odd discomfort... since this experience wasn't remotely natural.\n\n\"Yeah,\" Faith said, loving to be in control of someone, an experience she'd lost completely ever since Willow had taken her ass a month ago. She'd now become pathetically submissive... she knew it... yet she'd discovered she delighted in being the submissive... and more surprisingly, taking part in a romantic relationship... why she'd even all on her own booked a dinner at the best restaurant in town for later tonight... a romantic dinner even. Yet she also still enjoyed being a dominant... turning someone. \"Guys will do almost anything for me; no, strike the word 'almost'.\"\n\n\"And for me too,\" Cordelia said.\n\n\"Yeah, I guess you too are used to getting whatever you want,\" Faith agreed as she wiggled her finger around inside the very tight asshole.\n\n\"That's right, I am,\" Cordelia moaned, finding this finger violation feeling so surreal... then good... then bad... comfortable... uncomfortable... natural... unnatural... what a mishmash!\n\n\"Well, today you're going to discover your submissive side; and you're going to discover exactly what your pets feel like while they're servicing you,\" Faith said, as she continued gradually gaping the tight asshole... preparing it for the life-altering fuck in its near future.\n\n\"Oooooh,\" Cordelia moaned as the finger wiggled around inside her.\n\n\"Today you're to obey without hesitation, today you're our pet, and today you're a mindless slut,\" Faith continued her explanation as she added a second finger, stretching the virgin ass a bit wider.\n\nFaith's words sounded so wicked and wrong, and they both excited and scared her as Cordelia responded only with, \"I don't knooooooow!\" Her asshole was being stretched wider, and now she felt was a sharp, sudden pain as it was widened even more extremely!\n\n\"Remember to breathe, bimbo,\" Faith reminded her, as a second finger disappeared into the tight ass.\n\n\"Huuurts,\" Cordelia whimpered, experiencing a pain that burned, and yet that inexplicably made her pussy tingle.",
        "\"No pain, no gain,\" Faith quoted... quoted lots of people I guess, as she rotated her paired fingers within a forty-five degree angle, clockwise and then counter clockwise a few times, slowly, gaping the asshole even wider.\n\n\"Oh God,\" Cordelia groaned, literally feeling her asshole being pried wide open... and it hurt... it was uncomfortable... it was humiliating... yet... yet... yet... undeniably it was turning her on!\n\nFaith recognized from Cordelia's moans that she was in that confusing middle ground of the pleasure-pain principle. Undoubtedly she was in pain... yet confusingly... she was also feeling a pleasure totally different from her other sexual experiences. She reassured her, \"Don't worry, the pain goes away soon, and the pleasure you're already beginning to feel will eventually consume your body in ways you can't imagine and you've never experienced before.\"\n\n\"This is all so weird,\" Cordelia moaned as she felt the fingers turning inside her.\n\nFaith glanced at the clock. She only had a few minutes remaining to get this ass completely ready for her lover. She pumped her fingers in and out vigorously, wiggled then around a bit more, and then she pulled them completely out... and paused, admiring her handiwork. She was tempted to eat this nicely gaped asshole, but resisted, since she didn't want to appear at all weak to Cordelia. As she got off the bed she ordered, slapping the girl's ass again, \"Don't move, slut. But you are welcome to enjoy the breezes wafting into your rectum for the very first time.\"\n\nCordelia was in rapture. The pain! The pleasure! The humiliation! Then anticlimactically, the sudden emptiness. She could feel her asshole gaped open, and she desperately wanted it filled up again. God, she was turning into a slut!\n\nFaith snagged some red lipstick off the dresser, returned with it, and wrote just above Cordelia's gaping asshole, \"Happy Anniversary!\" She then drew a bow next to it.\n\n\"What are you writing?\"\n\n\"It doesn't matter, slut,\" Faith said as she added on the right butt cheek, annoyed by the question, \"Enter Here!\" with an arrow pointing at the gaping, inviting hole.\n\nHumiliation compounded humiliation as Cordelia waited patiently (not!) on all fours with her gaping asshole, for the nerd she'd bullied for all these years.\n\nFaith got off the bed and pulled out the three brand new strap-ons she'd purchased for Willow to mostly fuck her with, but also so she could use them for going to town on Cordelia's asshole. As she heard the front door opening, she neatly arranged the three strap-ons along the side of the bed and threw a blanket over Cordelia's head to hide the identity of this special present while quietly saying, \"Don't say a word until I tell you to, slut.\"\n\nWillow walked in, and immediately saw a naked girl on Faith's bed with her girlfriend who was almost naked as well, so instantly jealousy and rage exploded in her. \"What the fuck is going on here?\" she demanded.\n\nFaith, suddenly realizing Willow thought she was cheating on her, blurted, \"This isn't what it looks like!\" Which she then realized was what everyone said when caught cheating, but for once it was true!.\n\n\"No? Then what else could it possibly be?\" Willow asked, still angrily, dropping her school shit carelessly on the floor and stalking to the bed.\n\n\"Ta-da!\" Faith sang out, posing like a Price is Right model directing the audience's attention to Cordelia's ass, \"it's your anniversary present!\"\n\n\"Don't you give me that... Huh?... You got me a girl for an anniversary present?\" Willow asked, immediately mollified once she finally noticed the writing on the girl's ass.\n\n\"Yes, and at the same time I got you a dumb slut, so you can revenge fuck her asshole,\" Faith embellished, speaking in headlines. \"As well some new weapons to use on her.\"\n\nWillow saw the three new strap-ons, their lengths beginning with large and getting progressively larger, and she asked in sudden curiosity, \"Who is it?\"\n\n\"Nope. You're not allowed to find that out until your cock is buried in her asshole,\" Faith said. She felt a bit nervous to be ordering around her dominant girlfriend like this, but she was pretty sure Willow wouldn't mind... this time... once she knew the full story.\n\nCordelia listened in on the surreal conversation, wishing she hadn't allowed herself to get into such a predicament, yet really needing to feel something in her ass after all that teasing.\n\n\"You're okay with my fucking another girl?\" Willow asked, even though they'd somewhat discussed it already.\n\n\"As long as we destroy any third party asses together, and we're using any extraneous sluts for our mutual pleasure, of course not.\"\n\n\"Well, I'm dying to find out who you've gotten under there for me ,\" Willow said, as she admired a pretty amazing-looking ass, and it was already gaped. \"I see you've prepared the bitch's asshole for me already, you sweet thing!\"\n\nCordelia couldn't believe this was Willow who'd just called her a bitch... she sounded so different from her school nerd persona.\n\n\"Yep, and except for my two fingers just now, this prime bimbo slut on the hoof is an anal virgin.\"\n\n\"Delicious!\" Willow said as she grabbed the ten-inch cock, the other two which measured in at twelve and fourteen seeming too harsh and monsterish for a virgin ass. Shit, even this ten incher was going to tear her apart.\n\nWillow strapped on the harness and picked up the lube from the side of the bed. \"Is this ass slut someone I know? You mentioned revenge fucking.\"\n\n\"You certainly do,\" Faith said smugly, feeling a little giddy, really looking forward to seeing Willow's reaction when she discovered whose asshole she was fucking.\n\n\"Sweet!\" Willow approved. The old Willow would have been very concerned about her reputation, especially since she still didn't even know who this was, but after outing herself at The Bronze recently, and many people now knowing she was a lesbian dating a super-hot girl, she no longer gave a fuck what anyone thought,\n\nWillow got onto the bed and laughed, \"You drew me an arrow? Did you think I wouldn't know which hole to use?\"\n\nFaith shrugged, \"I just thought it was funny.\"\n\nCordelia felt hands on her hips and a prosthetic cock poking at her asshole... she was about to allow the formerly pathetic Willow to ass fuck her... and she couldn't wait!\n\n\"Remember: no magical cock, please,\" Faith requested, \"that one is reserved just for me.\" She couldn't explain why, but sharing sluts with Willow was hot and it turned her on... but the magic cock was really special, and just for her.\n\n\"Of course, slut,\" Willow said, wanting whomever was under the blanket to know she was at the top of this couple's hierarchy.\n\n\"Now go ahead and fuck this slut, she's dying for your ten inches in her shit hole,\" Faith urged, as she watched excitedly.\n\nTen inches?! Cordelia gasped to herself just as her ass was penetrated. The cock was far longer and wider than Faith's fingers had been, and her pain returned with a greatly increased burn as she let out a loud, \"OH, FUCK!\"\n\nWillow's eyes went wide as her cock continued sliding into the virgin hole, since that was a voice she'd recognize anywhere! \"Shit! Is that Cordelia?!\"\n\n\"Happy anniversary, baby,\" Faith sing-songed, pulling away the blanket with a flourish.\n\n\"Please stop, this really hurts!\" Cordelia begged, the pain particularly intense.\n\n\"Shut up, slut,\" Willow snarled, as she squeezed Cordelia's hips harder, feeling her usual rush of adrenaline from having a cock in someone's ass (until this moment only Faith's), but magnified by the realization that this was her former bully! \"You inflicted emotional torment upon me for years, and now I have the chance to turn you into my ass-loving fuck toy. And you think I'm in the mood to give you a break?!\" (Even in this moment of triumphal conquest she still talked like a nerd! What kind of badass says 'inflicted emotional torment upon me'? Oh well.)\n\n\"I'm so sorry,\" Cordelia apologized abjectly, in awe that this endless jousting lance was still reaming itself deeper inside her.\n\n\"You look really good with ten inches of my dick up your asshole, slut,\" Willow gloated, her phone in hand and filming it all.\n\n\"It hurts,\" Cordelia whined.\n\n\"It's nothing like the inner pain you caused me,\" Willow said, with all ten inches inside the bitch.\n\n\"Hey, she too is suffering from inner pain,\" Faith joked.\n\n\"Ready to really get fucked, Cordelia?\" Willow asked, while she didn't pull out, but bucked her hips three times while firmly holding onto Cordelia's hips.\n\n\"Oh God!\" Cordelia screamed, feeling the nerd's body resting against her backside, and somehow sinking her weapon even deeper into her asshole... creating sharp pain, yet still making her pussy leak a little.\n\n\"I'm going to hate fuck this asshole so hard you'll be walking bowlegged for a week,\" Willow rumbled, adrenaline coursing through her body as she began properly fucking the preppy bitch in and out.\n\n\"Oh fuck, please...\" Cordelia begged... or almost begged, feeling so humiliated, but unable to utter the word 'stop' like she'd meant to.\n\n\"Fuck, you look so hot, pounding this dumb slut's asshole,\" Faith said, she too filming the festive occasion, while also slowly rubbing herself.\n\n\"Great present!\" Willow praised.\n\n\"I knew you'd like it,\" Faith gloated.\n\n\"I love it,\" Willow added.\n\nCordelia just lay in place and grimly endured the hard ass fucking... many feelings inside her swirling around... pain... pleasure... humiliation... excitement.\n\n\"Do you like my cock in your ass, slut?\" Willow asked, as she really drilled into the asshole like a sadistic dentist inflicting a root canal on her patient.\n\n\"Yes... no... I don't...\" Cordelia babbled, not wanting Willow to realize how much she was beginning to enjoy this experience.\n\n\"You really are a dumb slut,\" Willow said, as she reached forward and pulled on her hair, \"You can't even answer a simple question.\"\n\n\"Their brain shuts off whenever you're drilling their asshole, baby,\" Faith explained, knowing that because it always happened whenever she had Willow's dick in her ass.\n\n\"Hey, why don't you have our new pet fuck toy eat your asshole while she's lying about doing nothing? There should still be two fresh loads still warming in your oven,\" Willow suggested, wanting to push Cordelia as far and to humiliate her as much as she could... and to test whether she had a similar power over Cordelia as the one she had over Faith.\n\n\"Please, no,\" Cordelia said, looking over to Faith and realizing for the first time she was being filmed. \"Shut that thing off!\"\n\nWillow stopped moving deep inside her and ordered, \"Look into the camera and repeat after me: 'My name is Cordelia Chase, and I'm Willow Rosenberg's ass taking slut. Her strap-on cock is stuck up my butt even while I speak'.\"\n\n\"Nooooo,\" Cordelia refused wildly, shaking her head negatorially, yet overwhelmingly frustrated by not being fucked anymore.\n\n\"Okay,\" Willow said, knowing Cordelia was currently occupying the same lust-filled zone that Faith often did... when they would do absolutely anything to start getting fucked again. So she pulled out... a loud pop occurring when she did... and then did absolutely nothing but admire the huge gaping hole she and Faith had created.\n\n\"Oh fuck,\" Cordelia cursed, feeling empty and bereft. She begged before her mind could even monitor the words she was saying, \"Please shove that cock back inside me.\"\n\n\"Back inside you where, my dear?\" Willow cooed faux sweetly, receiving great satisfaction from humiliating Cordelia on video like this.\n\n\"Inside my ass, please shove that ten-inch cock back in my ass,\" Cordelia begged, gazing mournfully back at Willow.\n\n\"Because your name is what, and exactly the noun you are is what, and I'm also interested in hearing about a certain something and its current location, which is...\" Faith led the witness down a long, winding path, still on camera.\n\n\"Because my name is Cordelia Chase, and I'm Willow Rosenberg's ass taking slut, and her ten-inch strap-on cock right now is stuck as far up my butt as it can reach!\" Cordelia declared in a rush, although her head was facing down, away from the camera.\n\n\"You understand that I own this asshole now?\" Willow asked ritually, slamming the cock back into the ass under discussion, but immediately pulling it all the way back out again.\n\n\"Yes, yes, yes,\" Cordelia mindlessly agreed. \"You own my ass. I'll be a lesbian ass slut to you both.\"\n\n\"And you'll also be eating a lot of our cunts,\" Willow added. \"True?\"\n\n\"Yes, I'll truly eat both of your cunts and assholes,\" Cordelia agreed, desperate to have the dick back in her ass.\n\n\"Oh yes, and you're alllllso going to be the new pussy licking pet for all the nerds at school,\" Willow continued piling on her conditions, already imagining Cordelia kneeling under a desk in the library, servicing girl after girl.\n\n\"No, not that,\" Cordelia begged. \"Just you two. Please!\"\n\n\"I guess she no longer wants my cock,\" Willow said dismissively, climbing completely off the bed.\n\n\"Oh fuck, Willow, fine,\" Cordelia said, this time looking straight into Faith's phone, which was still filming her entire debauchery. \"I, Cordelia Chase, pledge to eat the cunt of every damn nerd in the fucking school who asks me to! So please, please just shove that wonderful big cock back into my asshole and use me like the bimbo ass slut that I am!\"\n\n\"That's much better,\" Willow approved, unfastening the ten incher from the strap and replacing it with the twelve incher.\n\n\"You really have a way about you,\" Faith praised her hot, nerdy girlfriend, then came over and kissed her.\n\nOnce they broke the kiss, Faith got on the bed, pulled the butt plug out of her asshole and ordered, \"Get eating, slut.\"\n\nCordelia stared at the gaping asshole, wondering if hers looked like that, as Faith reached behind herself, grabbed her victim's head and shoved it between her ass cheeks.\n\nAs Cordelia began licking the gaping hole, Willow got back onto the bed and slid the thicker and longer cock into her ass.\n\n\"Oh my God, now it hurts even worse!\" Cordelia screamed, as her ass was stretched wider yet again, unaware Willow had changed cocks.\n\n\"It's a bigger cock for a bigger ass slut,\" Willow explained, as she filled the bitch's asshole with twelve inches of cock.\n\n\"Oh fuck,\" Cordelia grimaced and moaned, the pleasure-pain principal once again hard at work inside her.\n\n\"Pay attention to what you're doing! Suck the cum out of my ass, you dumb fucking slut,\" Faith ordered, wanting to humiliate and degrade this bitch as badly as she could.\n\n\"You're the biggest slut yet,\" Willow insulted her, \"and you're also a phoney: acting all high and mighty at school, when in fact you're nothing more than a cheap whore.\"\n\n\"Oh God,\" Cordelia wailed, both hating and loving all this humiliation, as this fresh cock plumbed new depths inside her ass.\n\n\"You're now taking twelve inches inside your asshole, Cordelia,\" Willow announced.\n\n\"So full,\" Cordelia blathered from a daze, her tongue reaching well inside Faith's gaped asshole, smelling the musky scent.\n\n\"What do you want, slut?\" Willow asked, giving her five hard and fast thrusts.\n\n\"Ooooooooh, to be your ass slut,\" Cordelia declared mindlessly, her pleasure usurping the pain, the pain enhancing the pleasure.\n\n\"And our cunt licker too,\" Faith added as she spun around, spread her legs and shoved the pretty prep's face into her pussy.\n\n\"Ooooooh,\" Cordelia moaned, getting ass fucked while she ate Faith's scrumptious pussy.\n\nFor a few minutes: five, perhaps six, Cordelia got her asshole railed while she hungrily devoured Faith's tantalizing pussy... receiving a gush of pussy cum just as she got the slayer off.\n\nThe pleasure inside Cordelia was growing, she felt she was just about to come from getting ass fucked, and she begged, \"Harder Willow, fuck my asshole harder.\"\n\n\"She's going to come from getting her asshole reamed,\" Faith mused, as she watched an undeniable expression of euphoria growing on the ordinarily pretentious girl's face.\n\n\"Come, you dumb slut, come from taking my twelve inches in that asshole of yours,\" Willow ordered, really slamming hard into the preppy bitch, their bodies colliding with every rough thrust.\n\n\"More, harder, fuck me harder,\" Cordelia begged, looking back at Willow, her face wet with Faith's juices, complete lust in her eyes.\n\n\"I now own this asshole,\" Willow staked her claim, as she fucked her new slut as hard as she could.\n\n\"Yes, yes, yes, you own my ass,\" Cordelia said, turning her face back forward, and burying it in the sheets.\n\nA dozen more thrusts, and Cordelia screamed, \"Fuuuuuuuuuuuuuuck!\"\n\nWillow kept pounding the asshole throughout Cordelia's orgasm, before she pulled out and ordered, \"Flip the slut onto her back, and then straddle her face with your back to me.\"\n\n\"Mmmmmm, nice!\" said Faith with a smile as she did as instructed, thus offering her ass to Willow.\n\nWillow magically transformed her dick into a real cock, still a full twelve inches long, and slid it into Faith's asshole. Which was still gaped.\n\n\"Yes, fuck my ass, fill it with cum,\" Faith begged.\n\nFor a few minutes Willow did just that until she unleashed a load of cum into Faith's asshole.\n\nAs soon as her ass was full of cum, Faith readjusted her position slightly, allowing the creamy filling to drip out of her ass and into Cordelia's mouth.\n\nCordelia mindlessly caught and swallowed it. She hadn't the faintest idea how this semen had gotten into Faith's asshole, but she'd found everything that had happened tonight so completely confusing, that by this point she was beyond wondering.\n\nWillow watched as Faith got off of Cordelia by rolling onto her hands and knees and ordered, \"Now suck all the cum out of my ass, every little drop.\"\n\nCordelia also rolled over to crouch behind Faith, then pulled her ass cheeks apart, and sucked the white creamy cum from Faith's delicious ass.\n\nWillow smiled wickedly, as she cast a magic spell to create a tattoo on Cordelia's back right above her gaping asshole: Property of Willow Rosenberg... the exact same one she'd given to Faith.\n\n\"Ooooooh,\" Cordelia moaned, feeling strange sensations on her lower back. They weren't at all painful, not like if she were receiving an ordinary tattoo, just weird. (Can you remember what fairy dust feels like? No? Exactly.)\n\nA couple minutes later, Faith sat up and got off the bed, then turned back and noticed. \"You tattooed the slut.\"\n\n\"I figured I own her ass now, so why not?\" Willow shrugged.\n\n\"You gave me a tattoo?\" Cordelia asked as she craned her head around and saw her humiliating new body art/ownership label/tattoo.\n\nThe end of chapter 5 "
    ],
    "authorname": "silkstockingslover",
    "tags": [
        "anal",
        "submissive",
        "threesome",
        "virginity",
        "shemale",
        "strap-on",
        "eighteen-year-old",
        "buffy",
        "sodomy",
        "asshole"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/willow-s-way-ch-05"
}
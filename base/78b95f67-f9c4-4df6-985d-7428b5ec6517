{
    "title": "A Matter of Blood Pt. 04",
    "pages": [
        "Author's Note\n\nI just wanted to give a quick update here for those of you who are reading this as I am releasing it. This is part four, which is the start of the second act of the story. In terms of actual writing, parts 5 and 6 are complete and the story is currently over 75k words. It's still planned to be 9 parts, although may go over 90k words.\n\nNext, I wanted to respond to some comments I've gotten telling me how they want characters to end up or how the end of the story should be. I appreciate this and pay attention to all respectful feedback, including preferences. I've also finished planning the entire plot, and I don't see making any major changes to it. I will say two things: \n\n1) There aren't a lot of straight up good or bad guys here. There are people making decisions, selfish or selfless, wise or foolish. Every single character has weaknesses and flaws. The ones that allow themselves to be dominated by those negative aspects are the villains of this story. The heroes are those that rise above them or help others to do so. Love and sex are key parts of this.\n\n2) I'm not going to spoil it but if you're worried about how the ending might play out you could read some of my other works. They are very different in tone and content but should give you an idea of how I like to end my stories.\n\nI received a really excellent question via comment about confusion over the family tree. I realized, quite belatedly, that I had forgotten to make this clear early on. Oops. I'll have to revise the first part at some point, but for now, below is a quick guide to Finn's immediate family as it stands right before part 4 starts. I may update it as things change. Because they will change.\n\n* * *\n\nGrandmother (Mother of all Father and Syrlin, other two sisters are his half-sisters) - Deceased, mentioned in passing later because she had some unusual traits.\n\n* * *\n\nFather (Artan) - His relationship will all three of his sisters is pretty good, if sometimes tempestuous. Cares for family but can be ruthless, cold, and cruel. He would never hit women, but has no such compunction about his sons. Missing and presumed dead.\n\nSeigaldia - Mother of Tyr (1st Child) and Adewyn (2nd Child). She's more or less loyal to her son, but she has equal devotion to her daughter. Wife. Proud and has a temper. In Marche Grodayn.\n\nBayrd - Brother, Finn's Uncle. Has no known children. Was not permitted to marry any of his sisters and has many affairs with commoner and lesser noble women. Spymaster for kingdom. \n\nSyrlin - Mother of Finn (3rd Child). Made First Wife due to her unquestioned love and loyalty to her brother. Social butterfly, renowned for her beauty and charm. Capable mage. In Marche Grodayn. \n\nCedyr - Mother of Merwyd (4th Child) and Raisa (5th Child) and source of their red hair. I should have mentioned her at least. Concubine, not full wife. Raisa's name is different from the others out of respect for a friend of hers who died. Concubine without full rights of a wife, reason why is not public knowledge. In Marche Grodayn.\n\n* * *\n\nTyr - Heir. Unwell. \n\nAdewyn - Ex-wife of Tyr, rejected. Intended Wife of Finn. Very much in love with Finn but will not put up with his shit. Finn loves her and trusts her advice on all military matters.\n\nFinn - Although he's declared his intent to marry two of his sisters, none of it is official yet. Reputation for sleeping around, although this was during times when Adewyn and/or Merwyd were not with him and before Raisa as of age, so it is somewhat undeserved. Mostly.\n\nMerwyd - Finn's first head-over-heels love. First Wife of Tyr, has a daughter but her name hasn't come up yet. Finn still loves her but her current feelings are unknown.\n\nRaisa - Intended First Wife of Finn. Loyalty and love for him is complete. Finn loves her deeply and is protective of her. She was trained to be a shadow-magic assassin and is smarter than she gives herself credit for. \n\n==============================================\n\nCHAPTER TEN\n\n==============================================\n\nPolitics are dangerous both because they can kill you and because they can bore you into a stupor. To an extent, as a Pureblood, I am accustomed to them, but even my patience was sorely tested by the Lords of the Northern Comdail.\n\nI wasn't surprised that they all wanted something. I wasn't surprised that they were a pack of surly brats. I was surprised by how unwilling they were to commit to anything. Including coming out in support or opposition to me. By the seventh day of the meeting it was clear that some wanted to hear what Tyr might offer in contrast to me or had already been bought out or blackmailed to oppose me.\n\nThe Northern Comdail was held in its own fortress in the gray and dreary highland moors, which was ostensibly neutral. However, it was under royal command. And the soldiers there, lacking any particular affection for Tyr (in part because they had been ignored but mostly because they hadn't been paid), more or less swore loyalty to me immediately as soon as some money changed hands. Eorvane had opened his vaults to my cause, with the understanding that I would pay him back, with interest. Not to mention all the juicy favors I would owe him. \n\nOf the remaining lords, two had immediately backed me. One Dux and one Graf. Both powerful lesser houses. Interestingly it meant that all three lords who had commanded men in war had thrown their lot in with me. You'd think that would mean something to the others, but sadly four found the fence perfectly comfortable to sit upon and the remaining two declared loyalty for Tyr. \n\nIf it came to it, our forces were larger than that of our enemies here in the North, but sieging and taking their castles and towns as well as occupying (or simply pillaging) their land would be expensive in terms of both men and treasure, to say nothing of the ethics of the situation. I meant to avoid it if at all possible.\n\nEorvane had persuaded me to close the \"official\" deliberations so he could do the dirty deals that would be required to bring most, if not all, of the other lords onto my side. He believed that he could, given time, but he was certain that intimidation or direct pressure would have the opposite of its intended results. So I was stuck cooling my heels for a few weeks at least.\n\nI did take care of some things of importance. I sent trusted men off with messages for some of my friends in the southern cavalry, as well as one for Parla. While these men bickered over rewards for the use of their petty forces, I knew where I could find an experienced group that I could trust.\n\nRaisa was a bit upset that I didn't send her with the messages, but when I explained that I didn't want anything to happen to her and that I needed someone to gather and organize intelligence, both of which were true, she brightened up and started applying herself to being my spymaster. After all, who better to run spies and assassins than another assassin.\n\nAdewyn pored over maps, reviewed strategies, read reports from the South and generally was an effective pain in my ass. Rather than complain, I tended to take her advice, even if I did argue a little first. She was right most of the time, and knew more about logistics than I did, even if I had fought in more battles. I argued largely so she would defend her position, and therefore teach me the right way to do things without either of us appearing weak in front of nobles or soldiers. She understood this instinctively and I respected her for it.\n\nI also provoked her a little because I found her to be irresistibly cute when she was angry. I'd never say that to her face. I wasn't entirely a fool.\n\nOne day, after reviewing countless ledgers and reports and missives in my private tent, I found that I was, shockingly, out of busy work. I decided to walk around our camp, which was growing daily as the lords loyal to me continued to raise their levies. Fall was here in force and it was quite cool just after dusk, so I took my heavy dark cloak with me. I think that was one of the reasons why I was able to wander freely without being recognized.\n\nI strode around, impressed with the order I saw. Most camps I'd been in weren't arranged rationally or easy to navigate. Then again, most camps weren't laid out by Adewyn. A few people saluted or deferred to me, but I was dressed plainly so most assumed I was a knight of some kind and just nodded as they passed. This suited my purposes. I wanted to see how things were, not how others wanted me to see them.\n\nI made a circuit. I listened to folk songs, some old, others I hadn't heard before. There was a particularly bawdy one going around about me, which was flattering and made me out to be some kind of sexual titan who seduced good temple women and stole them away in the night. I did not correct the young lady doing the singing. I needed all the morale I could get.\n\nEventually, I completed my review. I was generally satisfied. The perimeter was guarded, the men had good boots, everyone had food and drink, and their tents were in good order. This would change as soon as we started marching, of course, but we would have all the advantages we could muster.\n\nAs I returned to my own tent, looking forward to sleep and, if I'm honest, laying with one of my sisters, I heard voices. They were hushed, and I recognized them. Rather than announce myself like a gentleman, I lurked outside like a cad.\n\n\"She won't listen. She's going to come straight here as soon as she is able to get away,\" Raisa said, obviously disapproving of this plan.\n\n\"For god's sake, she needs to let us talk to him first. Did you tell her what he thinks happened?\" Adewyn asked. They were in agreement. \n\n\"She wouldn't even tell me anything. I'm worried...I'm worried that he's right, at least in part.\"\n\n\"Fuck. He's not the same. I love him, more than anything, but I really think he's capable of killing them both.\" Adewyn said, and although I couldn't be sure who they were talking about, it still hurt me.\n\n\"Do you really think so? I mean, maybe in the heat of the moment, but...he's not like that. He didn't attack you.\"\n\n\"Yes, but I had him at a disadvantage. And my situation was very different at the time of the attack.\"\n\n\"All we can do is hope for the best and intervene if things go badly.\"\n\n\"Yeah. While we're on the subject of things going badly...\" Adewyn went from sounding concerned for someone else to hesitant, even afraid.\n\n\"Gods, you still haven't told him? Do it already. You're panicking over nothing.\" Raisa had apparently heard this before.\n\n\"I know! I'm such a fucking coward. I'll do it soon. But can you be there, just in case?\"\n\n\"Like, in the room? That would be awkward.\"\n\n\"No, just nearby, in case I need to talk. Or he d...hello?\" Adewyn inquired suddenly. Dammit, I'd gotten too close to the tent and my cloak had blown against it in the breeze. I made a shuffling noise and walked in, behaving as though I'd heard nothing.\n\n\"Hello yourself. Done for the day?\" I asked, trying to portray myself as calm and relaxed. It was far more difficult than I thought it would be.\n\nRaisa and Adewyn shared the briefest of glances before they both smiled warmly. They were better actors than I was. It made me worry what else they had been keeping from me. Was I becoming too trusting again? I didn't want another dagger in my back from a loved one. Especially one I was sleeping with.\n\n\"Yes,\" Raisa responded, \"we were just getting caught up. I have some news for you, but I don't know yet if its good or bad.\"\n\nAdewyn's eyebrows shot up. She must have been worried that Raisa was going to spill her secret.\n\n\"Oh?\" I said.\n\n\"You know I still have sources inside Marche Grodayn. They tell me that your mother has disappeared. No one has seen her for weeks.\"\n\nAdewyn relaxed at the realization that this wasn't what they had been discussing. I did not. Raisa saw my anxiety and she went on hurriedly.\n\n\"I almost didn't tell you, but there is more. It appears as though Tyr is sending people out to look for her, very quietly. And your uncle has been seen to be very concerned about her. So it seems likely to me that she escaped once she heard you were alive and had returned with an army. It would have been much harder for her to do that it was for Adewyn, who largely had free right of travel. Your mother was being closely watched and...\" Raisa stopped suddenly, and I could see that she almost said something that she had intended to keep from me. \n\n\"And what?\" I asked.\n\n\"...and your uncle had been...keeping her...in his rooms. My sources tell me that when she was seen about the castle that she had been more subdued, and once even limping. I thought that should have been her telling you that. I'm sorry. I don't know any details,\" Raisa seemed almost ashamed for having told me.\n\n\"Don't keep things from me, even for my own good,\" I said with deceptive calm, \"I'm not the person I used to be. I can't abide being lied to any more.\"\n\nMy sisters had the decency to avoid eye contact with me for a little while. I took a deep breath. I wasn't being fair to them. I wasn't sure what they had been discussing, but I was positive that they were both loyal to me. And everyone deserved to have their secrets, even from their brother or lover.\n\n\"What about the situation with The Graf of the Isles? He's still holding out and it will be difficult to transport anything on the coast without him.\"\n\nRaisa smiled.\n\n\"I'm almost insulted that you asked. Tyr's idiots were keeping his wife in a ruined fortress near the coast. My people got her back and she's safe. We're treating her well and told her that she'll see her husband soon. What do you want to do?\"\n\n\"Just give her back. He's loves her and he only asked for lower taxes. He'll side with us after that.\"\n\n\"And that leaves the Dux of the Irons,\" Eorvane said. He was standing at the entrance to my tent. I had been fairly tired and I didn't even notice him approach. \n\n\"Are you making headway with him?\" I asked. I was very interested. He didn't have a lot of money, land, or troops, but the \"Irons\" were the mountains that ran unevenly across the kingdom, breaking it roughly into north and south. He held all of the important passes, and therefore could allow or deny access to whomever he allied with. \n\n\"No,\" Eorvane said, \"he's not himself. Or at least he's not making the sorts of demands that he normally would. Can you believe that he asked me about marrying Adewyn?\"\n\nI was honestly angry for a moment. Purebloods might marry outside of their own family but always to other Purebloods. The lineage must be maintained or the magic that made us who we are would be lost. And she was mine to marry. I opened my mouth to speak but Adewyn spoke for me.\n\n\"Fuck that,\" she said, simply, \"and you can tell him that I said so.\"\n\nEorvane guffawed.\n\n\"Well, I assumed that would be the answer. But he claimed that I was stonewalling him and insisted on speaking directly with you, Finn. I wouldn't. I think he's just going to waste your time,\" Eorvane said.\n\n\"I'll speak with him, maybe he just wants to be flattered or reassured. Is he at the headquarters now?\"\n\nEorvane nodded. The headquarters was our fancy word for a really big tent with a table and maps. It was where we held our larger meetings. The request for marriage was too outrageous, though. Was it designed to insult me? Or just to get my attention? Or was it a distraction? Better safe than sorry.\n\n\"Raisa, you stay hidden and protect me from any ambushes. Adewyn you go get some of our Guard and hide nearby in case we need you. I'll head over with Eorvane and we'll play this casual and see what he has to say.\"\n\nRaisa was surprised as I'd never asked her to be my bodyguard before. I had been thinking about it for a long time. She wanted to continue to travel far and wide for me, performing assassinations and infiltrations by herself, proving her value. The trouble was that we had people for that now. Some of them had come over from my father and had even been trained by Raisa. \n\nAnd, to be honest, worrying about her while she was on missions was killing me. I never doubted her competence, but she could never, ever make a mistake. If she did, her impressive career would be over and I'd be in mourning.\n\nI knew that in her new role as spymaster she would chafe at being unable to help me more directly. The bodyguarding idea would hopefully solve that issue, but it wasn't just to assuage her ego. I needed someone to watch my back, and I trusted no one more than her.\n\nEorvane and I walked silently to the main tent. Adewyn had run off to assemble some men. I could tell by the way she looked at me that she would have preferred to just come with me directly but I was also worried about surprise attacks from without. More than one monarch had been killed in his camp by a sudden uprising or raid. Raisa disappeared into shadow and silence somewhere behind us. \n\nWhen we entered I felt stupid for my paranoia. The Dux of the Irons was a small man, fastidious, bald, and near-elderly. He hadn't even brought any of his own guards with him. Really, I'd killed people like this almost casually in battle. \n\nI smiled and approached the Dux and he did the same. As I grew close he extended his hand to shake mine, the universal sign of friendship and peace. After all, you can't draw a dagger while your hand is clasped. It was then that I realized that I had made a significant mistake. \n\nI don't know why I didn't shout or scream or even shriek. Even after all the battles I had been in, in which I had performed fairly well and avoided the paralyzing shock that some feel, I was not ready for this. I froze, completely, my hand extended, my forward momentum stopped. I don't think at that point that anyone else had seen what I had.\n\nI wasn't truly afraid at first, I just didn't understand what I was seeing. It was unlike any magic that I had witnessed before. The Dux's hand, small and wrinkled like aged leather, smoothed itself out. I blinked. His flesh began to flow, like water, that was strangely bound to his bones. And as I grew afraid and fatally unable to react, his flesh rolled off of his forearm, growing long and sharp, replacing his hand with a long and ragged reddish blade. I could even see the bone of his forearm, but it was black and had strange holes spread over it, like the hive of some terrible insect. \n\nAs I watched, he moved faster, his smile growing beyond the width of his mouth, his head splitting to reveal an awful blackish-red maw full of jagged teeth. That's when the ghastly howling started. I moved at last, almost too late.\n\nI shifted to my right, hard, and his hand-sword barely missed piercing my chest. Instead the edge brushed against my left side, biting into my flesh. I screamed. I am unashamed of this. I'd been cut and stabbed in battle, and much worse than this, but nothing had ever hurt this much. I smelled my flesh cooking where he'd touched me, and there was another acrid smell that made me think of an alchemists laboratory\n\nThat's when Raisa, my beloved and trustworthy little sister, saved my life. Her blade erupted from the thing's mouth as she stabbed it from behind. She didn't assume that would kill it either, and stabbed it where its heart should be as well as several other places before she leapt past him and stood in between myself and it. There she stood, bravely, ready to defend me.\n\nThe thing was dead, however. It collapsed, not like a person, but like a heap of sludge that had just been emptied on the floor. The form still had skin, and presumably bones and organs, but they had no shape. It was like a squashed ball of dough, but the dough was also a man. Blue-black blood flowed viscously out of its wounds, with the consistency of syrup in winter. \n\nFinally, I reacted. I spoke a word and burned the thing's corpse just as Adewyn's shouting form appeared at the mouth of the tent. I would have liked to examine the monster, but I don't know what it would have revealed. Besides that, I felt deeply and instinctively that this thing was unnatural, and that its very presence, even while dead, was dangerous and toxic. ",
        "\"Save whatever you can. Don't take anything that it touched. Burn the tent and everything left in it.\"\n\nWhat in the hell was Tyr dealing with?\n\n* * *\n\nThat was the thought on my mind as I allowed myself to be led away by Raisa, back to my tent. She made me wait outside while Adewyn checked it, and then they made me sit down upon my bed. I wanted to protest that I was a grown man and could move myself, but my mouth felt numb and my tongue swollen.\n\nAnd the pain in my side was getting worse. Why didn't that feel better? I felt the wound and it wasn't even bleeding. Raisa moved my hand abruptly. I realized that Adewyn was taking off my shirt and arguing with her. Why were they arguing? It seemed like a bad time for it.\n\nI opened my mouth to demand to be told what was going on, but then I realized that I couldn't hear anything. Or could I hear noises but didn't understand them? Was that cacophony my sisters' talking with one other? Normally I found their voices relaxing and beautiful. \n\nI was laying down now. When did that happen?\n\nI realized, with sudden clarity, that it was likely that I was dying. With this understanding, when Raisa's face appeared in my vision, I reached out and brushed my hand on her cheek. She jumped up, startled from what she was doing. She smiled at me, her lips quivering slightly. I still couldn't understand her words, but I didn't need to. She took my hand and kissed it and pushed my arm back down upon the bed. \n\nI was sure that she understood my intent. I felt that I couldn't do anything more, so I decided to sleep. I was very tired. \n\nI dreamed of shouting and pain. Of my sisters watching me with dead eyes and daggers in their hands. Of my father glaring down at me, his hand a living blade, ragged and red. Of Tyr, laughing while he fucked Merwyd. Of my uncle strangling my mother. \n\nI dreamed of a thing with many eyes, whispering to me of the ways in which it would consume everything that I loved.\n\nI woke up screaming, my side in such pain that I sobbed in a most undignified manner. \n\n\"Oh fuck...that hurts.\"\n\nAs soon as I woke up there was a hand on my face and lips on my forehead.\n\n\"Its all right, love. Don't worry. Raisa knew how to cure the poison. We couldn't give you anything for the pain until you woke up. We had to be sure that the venom's effects had passed. I'm going to bring you something.\"\n\nI knew it was Adewyn speaking, but. I couldn't focus on her. Although even in my present state, I wanted to watch her ass as she left. I laughed, although that just made it hurt more. I simply took my libido as a good sign and tried not to think of the bonfire in my side. \n\nShe returned soon, looked at me and then I felt her shoving something into my side. It was cold and soothing, but the pressure. Gods, the pressure turned the bonfire into an inferno. I screamed again.\n\n\"Oh gods, I'm sorry. You'll feel better soon, I swear. I don't know what that thing did to you but you'll be all right. Please just try to relax.\"\n\nI was barely in control and I wanted to ask her how I could possibly relax when I saw her tears. She was holding some kind of poultice on my wound, doubtless at Raisa's instructing. She knew that it hurt me, and it hurt her to do it. She was openly weeping, her other hand brushing my hair off of my forehead. \n\nI found that while I could not relax for myself, I could do it for her. I am not a great man or a brave one, but I love my family. I never wanted to cause her pain. I attempted a smile and she returned it.\n\nIt felt better already. I laid my head back. Adewyn stood and shortly came back with some warm, acrid tea. I drank it eagerly, being incredibly thirsty. \n\nThen I felt very relaxed. I laughed a little and I kissed Adewyn's hand. She rolled her eyes, but still smiled back at me.\n\n\"How did I know that the Soothing Leaf would make you amorous? Well, as much as I may want to jump you normally, you look like a corpse and you're as weak as a kitten. I'd break you, little brother. Are you still in pain?\"\n\n\"No, and I might want to get broken by you. I always loved it when you used to hold me down and kiss me, when we were young.\"\n\nShe laughed, full and heartily.\n\n\"Oh, I see that the Leaf makes you talkative as well. Why didn't you ever tell me? I love it when we're gentle with each other but I would always be willing to ride you hard and leave you a little bruised. Or to pin you down and have my way with you.\"\n\n\"Because a prince isn't supposed to like that sort of thing. You know, that's what father said. I'm not sure he knows as much as I thought he did about things a prince should and should not do.\"\n\nShe looked a little more seriously at me, and even in my intoxicated state I could tell that she was considering something.\n\n\"You know, Raisa exhausted herself healing you with her magic. You screamed in pain, but you got better almost immediately. Even so, she wanted to stay by your side until you woke. I insisted that she rest. She loves you very much. As do I. We don't ask for that much from you...\"\n\nThe way she trailed off made me look at her more closely. Her deep-blue eyes met mine. \n\n\"You know that I can deny you nothing. What do you want? If I can provide it I will.\"\n\nAdewyn blinked in shock. I suppose she expected reluctance or more questions. Of course, she was taking advantage of me in a drugged state. I was having increasing difficulty focusing my eyes upon her.\n\n\"Now isn't the time for me to make requests of you. It isn't really fair. But...Raisa and I were speaking about children and...\"\n\nShe had my interest but I heard no more. I was asleep, yet again. This time, thankfully, I had no dreams.\n\n==============================================\n\nCHAPTER ELEVEN\n\n==============================================\n\nLater I found that I was in and out of consciousness for a week. Raisa had used deep and secret magic to draw the poison out, but had no idea what could have been so virulent and fast acting. No one knew what the creature was, either.\n\nWell, thats not precisely true. I was sure, somehow, that I had an idea. Maybe something I learned on my Journey, but that whole affair was still quite dim in my memory. Scenes flickering by, a few words remembered here and there. \n\nBelial. I remembered that name. Dammit.\n\nThe first time I would call myself well, I stood up on my own. I'd had enough of needing help to relieve myself. I was still sore in my left side, but nothing severe. My thoughts were clear. My legs were a little wobbly, but felt strong enough to let me walk. I changed into fresh tunic and trousers, put on my boots, and went outside into the bright autumn sun.\n\nAdewyn shouted at me as soon as I left my tent.\n\n\"What the fucking hell are you doing?\"\n\nThe Guard, brave men who I trusted with my life, looked at each other and moved outside of the range of Adewyn's anger. I suppose there are some dangers that you cannot ethically ask men to face.\n\n\"I was just walking. I'm not going far.\"\n\nTypically we'd shout at each other a little at least, but I didn't have it in me yet. And, well, I appreciated her over-protectiveness a bit more now.\n\nShe sighed, and forced herself to calm down.\n\n\"I'm sorry. I just...I can't watch that again. You were as close to death as I've seen anyone, and I felt like a fucking widow.\"\n\nI embraced her. I didn't care if anyone thought it was un-princely behavior. She held me tightly, showing her deep care for me. I appreciated it even if it did hurt a little. She drew back, and when she did she was smiling. \n\n\"Let me get Raisa. Meet us at your tent. We have plans for you.\"\n\nI raised my eyebrow but after I had relieved myself, I returned to my tent and enjoyed the sense of being able to stand on my own. I was impacted by something fast, small, with fiery red hair.\n\nRaisa almost knocked me down, but kept me from falling with her deceptively powerful hug. I hugged her back.\n\n\"You fucking stupid bastard,\" she said, hitting me gently on the arm repeatedly, tears in her eyes, \"How dumb are you to get hit by a fucking assassin's blade? Do you know what would have happened if I hadn't been here? You useless idiotic... pretty boy!\" \n\nI couldn't help but be shocked at her loving assault. I'd never seen her like this before. I smiled charmingly.\n\n\"So you're saying you think I'm pretty?\"\n\nShe hit me one more time and then laughed despite herself.\n\n\"You fucking prick. I love you and you nearly died because you were too slow. I'm your new goddamn bodyguard and that's all there is to it. Don't try and stop me.\"\n\n\"I feel much safer already,\" I said with true sincerity.\n\n\"Oh, and you're not going back to council today. Or headquarters. Eorvane is sitting over the council. And Adewyn has hand picked some officers for you to approve later. Between them, they've got everything handled.\"\n\n\"Um,\" I said, at a loss, \"I don't know if I can rest any more. I'll go mad if I have to spend one more day that bed.\"\n\nRaisa laughed, pure and clear. I was reminded that she was still barely a woman, really. I guiltily thought about everything she had taken on for me and for her love of me. Adewyn too, even though she was older than I. \n\n\"No bed for now, elder brother,\" Raisa said, and then smiled sinfully and fake pouted, \"Maybe later. You've left your dear sisters so unsatisfied while you lazed about. Today, however, we're going to the market. The three of us.\"\n\nI blinked.\n\n\"The market? For what, cattle? Arms?\"\n\nAdewyn must have heard me from outside because I heard her laughing at me as well.\n\n\"No, you useless prince, its market day. Who knows what we might find there?\" she asked, excitedly.\n\nI was confused, but relieved that for at least a little while no one would be asking me to make critical decisions. \n\n\"I don't think I've ever been to one before. Even when I was on the continent the war kept anyone from having market days or trade fairs. Sounds...like fun.\"\n\nI think my sisters expected me to be stubborn or uninterested. At that moment, I truly would have done anything that they asked. I still would, but please don't tell them. My life is difficult enough.\n\nRaisa kissed me and took one arm, then Adewyn took the other, and off we went to town.\n\n* * *\n\nI noticed that we were all dressed rather plainly. We could have very well been a knight out with his women. Adewyn wore a simple wide brimmed hat to cover her hair, and Raisa's hair had never changed. For my part my head was nearly shaven and my beard was rather salt and pepper. I simply looked older than I was. \n\nAs we left the environs of the camp, we could see people trickling to the west of the fortress, to the small village that sat to the west of the great building. \n\n\"It's a large market today, because of all the nobility and soldiers,\" Adewyn said, \"there should be a lot of food vendors.\"\n\n\"Is this about the fry bread?\" I said, then laughed, \"Because I seem to recall someone's face covered in sugar and grease.\"\n\nAdewyn tried to respond but Raisa didn't let her.\n\n\"Oh my gods, I remember that day! She was like some kind of monster. She ate three times as much as you!\" Raisa said, then laughed with me.\n\n\"I work hard,\" Adewyn said, pouting slightly, \"It's not easy keeping Finn from making terrible decisions. And he's so demanding in bed! I need fry bread...for my morale.\"\n\n\"Wait, I'm demanding? This from the woman who wants to have her way with me whenever she chances to brush past me?\" I asked.\n\nAdewyn blushed and hit me, but she laughed. Raisa giggled. \n\nThe gentle morning stroll progressed like this, everyone joking and laughing all the way there. For a brief time, no one discussed war or assassins, enemies or logistics. In my mind it was like when we were all much younger and it was a festival day. All five of us: Tyr, Adewyn, myself, Merwyd, and Raisa would go and eat too much sugar and fight and play and, when we were teenaged, some of us would sneak off and make out. It was one of the few times that father was indulgent and recognized that we were children and not simply tiny nobles.\n\nThe market was very large, sprawling from the village square and down every small path and even outside of its borders. There were, to Adewyn's delight, many sellers of greasy, fried, and sweet foods. There were tailors and smiths and jewel merchants. There were large-scale import-exporters there to buy grain and sell luxuries from the south. There was even a traveling tent-brothel, which I noticed my sisters were steering me clear of in their subtle but no-nonsense manner.\n\nI had a reputation, but I wish that they understood how deeply I loved them. I hadn't even thought of Merwyd in over a month, much less tumbles with random women. I was quite content with my wise, strong, and beautiful Adewyn and my cunning, quick, and sensual Raisa. Not for the first or last time I considered how happy we might have been if we could just escape to the continent and live quiet, peaceful lives together.\n\nI knew in my heart that was impossible. My Journey had taught me that lesson. I couldn't remember the details, but I knew with absolute certainty that neither Tyr nor Uncle Bayrd could be allowed to rule. The people would suffer, the kingdom would fall, and...and perhaps worse.\n\n\"Hey!\" Raisa's irritated huff distracted me from my serious reveries, \"I asked you something.\"\n\nShe pouted adorably and I couldn't help but smile.\n\n\"I'm sorry, I was distracted.\"\n\n\"I could see that,\" she said, and then her annoyance abruptly disappeared, \"Which one is better, the green, or the gold?\"\n\nAs she said that she held two gowns in front of her. I was momentarily taken aback by my own imagination of what she would look like. The gold was classical, something that would go well at any ball, but not particularly daring. The green, though, was something else. It had a very low bust line, and some near transparent lace at the bodice which would show a little more than was considered appropriate. The hem wasn't particularly high, but it had a slit up to mid-thigh. And it was vaguely constrictive, so I imagine it would show of her thin waist and fine hips. \n\n\"The green,\" I said, hoarsely, \"Definitely the green.\"\n\nRaisa pursed her lips, unsure.\n\n\"Do you really think I'd look all right in it? I...I don't have much to show off.\"\n\n\"Let me assure you that you have more than enough to show off and that this would look amazing on you. I'm proud to have you on my arm at any time, but in this? No one would even know I was there.\"\n\nShe smiled widely and kissed me, perhaps a little longer than was appropriate in public. In fact, I noticed that both of my sisters had been giving me smoldering glances and lingering caresses. I wasn't complaining. My cock had responded rather gallantly, reminding me that I hadn't had sex in over a week. I'd definitely end up fucking one of them tonight.\n\nAt least one of them.\n\nAs Raisa was paying the merchant, I felt Adewin pulling me by my arm across the square. She had a curiously intense expression on her face. She'd already purchased some clothing, which was rare for her. Most of it seemed to be very loose, comfortable wear, that wasn't her typical style. I assumed that they were for sleeping in, or perhaps for a someone else in the camp. She had a tendency to look out for other women, especially the younger ones who might get taken advantage of.\n\n\"Here,\" she said, \"What do you think of these?\"\n\nIt was a simple question, no context given. None was needed. The jeweler had many rings on display, but Adewyn had picked out four of them of them: one with an icy sapphire, one with a clear white diamond, another with a blood-red ruby, and finally a simple platinum band. I picked them each up and inspected them. They were old, I could tell, and had been worn before. On they inside they had quite legible engravings, but the words made no sense. On a whim I stacked them all and looked inside, trying several different orders. On my third try I found there was a clearly readable poem:\n\nSister of Battle,\n\nSister of Magic,\n\nSister of Blood,\n\nYour love has made us yours.\n\nI was rather taken back by this, but I was no fool. \n\n\"How much for all four?\" I asked the merchant. He barely kept the predatory grin from his face.\n\n\"Ah, well, I couldn't possibly let four such fine rings go for less than...hmm...ten ducats.\"\n\n\"Ten ducats!\" Adewyn exclaimed, \"That's far too high! Come on, Finn, we can do better.\" \n\nShe tugged at my arm but I stood my ground.\n\n\"I'll give you twenty if you tell me where you found them. I don't care if they're stolen.\"\n\nThe merchant looked a bit panicked for a moment, but licked his lips at the prospect of such a price. He probably thought I was misleading him, but I was not.\n\n\"Um. Well, sir, they are not stolen.\" He spoke so softly that only I could hear, \"In truth, they were taken with a great deal of other treasure from...from a tomb on the western shores. There were many valuable artifacts of the Purebloods, and they sold for a fortune. I was late to the opportunity and was able to pick up some simple baubles and these rings.\"\n\nI gave him thirty ducats, smiling. He provided a simple cloth bag for the rings, and I put them there. As we walked away, Adewyn whispered happily in my ear.\n\n\"I saw them and thought of us right away. But you didn't have to give him so much!\"\n\n\"I'm already cheating him,\" I replied, \"But there is no way I could afford what they are probably worth. They're at least from the time of the invasion, maybe even during the first wars. Our ancestors may have worn them.\"\n\nShe stopped, suddenly. I could see her thoughts were moving in the same direction as mine. \n\n\"Will you let us wear them for you? I'm already yours, but I want the world to know. Raisa would be over the moon with joy. I think she still doubts that you will make her your First Wife\"\n\n\"Yes. I'll give them to you both later tonight, when the time is right.\"\n\nHer smile was brighter than the sun, and I couldn't help but notice the flush on her cheek. Raisa caught up to us, her fine gown wrapped in clean common cloth. \n\n\"What are you two talking about?\" she asked.\n\n\"Fate,\" I said, \"and why you must always pay attention when you hear her speaking.\"\n\n* * *\n\nBy late that afternoon we had eaten, shopped, drank, and even watched the children play a mock tournament that had us in stitches. I was tired, far more than I would have been prior to my poisoning, but I was also content. Something in me had changed. Maybe it was nearly dying, or perhaps it was simply being a part of a family again. We all three of us sat upon a hill looking down on the market. Some stalls were already closing while some were opening up for the night's entertainment.\n\n\"I wish the rest of us could have been here. It's not the same without them.\"\n\n\"Even Tyr?\" Adewyn asked.\n\n\"Yes,\" I agreed, \"Even him. Before we had our disagreement and his, uh, changes, I loved him. Not as you did, but still.\"\n\n\"And obviously Merwyd,\" Raisa said. I couldn't see her eyes but I'm sure that she rolled them.\n\n\"Oh yes,\" said Adewyn, \"We can't forget about perfect Merwyd. Whatever would we do if we didn't pine for her at least once a day?\"\n\nBoth her and Raisa laughed, rather rudely I thought.\n\n\"I don't mope about her that often any more,\" I said, testily, \"Besides, it's become more than clear that that was mostly one-sided. I think she was just playing me after I seduced her.\"\n\nFor some reasons, both Raisa and Adewyn found that hilarious. I was actually getting a bit upset.\n\n\"What's so funny about having my goddamn heart broken?\" I asked.\n\n\"Oh...oh no, Finn,\" Raisa said, quite sincerely \"We'd never make fun of you for that. We know you love her, and she loves you. It's the other part that's so funny.\"\n\n\"What bloody part?\" I said, more confused than irritated now.",
        "\"The part where you think you seduced Merwyd,\" Adewyn said, chuckling, \"You can be such a bloody idiot when it comes to her.\"\n\n\"Wait, what? I did seduce her! We had a relationship! It was even secret, for a while. I got in trouble! We didn't restart it for years later, but I'm sure that...\"\n\n\"That what, Finn?\" Raisa asked, her eyes twinkling annoyingly, \"That you saved her when she was out walking on the forest path? That you drove away some bullies and she was just so scared that you had to hold her close to your strong chest!\"\n\n\"Or that you helped her when she so-conviniently injured her ankle swimming?\" Adewyn added, unhelpfully, \"And you carried her all the way home on your back, and she was just ever so grateful that of course she kissed you spontaneously?\"\n\n\"Well,\" I said, \"yes, I that is what I remember happening.\"\n\nNow Raisa and Adewyn were both guffawing in an unladylike fashion.\n\n\"So...\" Raisa said, barely able to control her mirth, \"So do you ever remember seeing the bullies actually hurting her? Or did you just see some boys running away from you? Did you see her injure her ankle? Or did you just hear her cry out in her charming manner and then see her tears?\"\n\nI opened my mouth to protest, but, to my immense discomfort, Raisa was right.\n\n\"And,\" Raisa continued mercilessly, \"How many times can you 'just happen' to walk in on someone while she's changing, or getting into a bath, or getting out of a bath, before you start to think that it isn't coincidence? Oh, and of course, there's her imaginary suitor.\"\n\n\"Oh god,\" Adewyn said, between laughs, \"I almost forgot about the Mysterious Continental Noble!\"\n\n\"Yes!\" Raisa shouted in agreement, \"The one that Finn never ever saw, but had always just left. Or the gifts and notes from him just laying around her room whenever you happened to visit. You got so jealous of a man who never existed.\"\n\n\"Was everything she did an act?\" I was feeling quite low now, like the world's biggest fool.\n\n\"Calm down. Of course she loves you.\" Raisa said, taking pity on me at last, \"That's why she did all of that. You were always looking at Adewyn's ass, or your mother's breasts. You were even flirting a bit with our mothers, which I don't know how you got away with. But her? All you saw was just a scholarly little do-gooder who wanted to play house with you, while she saw her dashing prince.\"\n\n\"She seduced you, is what we're saying,\" Adewyn added, wiping away a tear of mirth, \"Sometimes I think you're lucky that you have your looks to fall back on. And of course your sisters to keep an eye out for you.\"\n\n\"Oh yes, thank the gods for my sisters,\" I said, glumly. They didn't always have to be so bloody truthful. I stood up, but I wobbled for a moment, my vision blurring.\n\n\"Are you all right?\" Raisa asked me, standing suddenly, looking into my eyes with worry.\n\n\"You look tired,\" Adewyn answered for me, \"We should get you back.\"\n\nI was going to object but their mirrored looks of concern convinced me that perhaps it was time for me to entrust myself into their care.\n\n\"Probably for the best,\" I said softly as they each took one of my arms again.\n\nWe were much quieter on the way back. Not somber, but reflective. I simply basked in their love. By the time we arrived at camp I was exhausted. They led me back to my tent and laid me down, although it was only early evening.\n\n\"Rest for a while, love, \" Raisa insisted, \"we'll be back and check on you soon.\"\n\nI realized that they were treating me very carefully, keeping an eye on me while doing their best not to insult my pride. Little did they know that the last five years had stripped me of many useless things, including much of my ego. I was simply grateful. I stripped, lay down, and was asleep in moments.\n\n* * *\n\nI woke to conspiratorial whispering. At first I thought I was about to be assassinated but then realized it was my sister's voice.\n\n\"What do you think?\" Adewyn asked.\n\n\"I think that you do all of your thinking with your quim,\" Raisa answered, cattily. I liked her new confidence.\n\n\"Come on. He's better. And we let him sleep for a few hours. He's got to be frustrated as well.\"\n\n\"Better isn't well. I'm his guard, so I say when its fine for you to fuck him.\"\n\n\"Gods, you aren't First Wife yet,\" Adewyn sounded annoyed, but I could tell that she wasn't really arguing. Typically she would be the one being overly protective. She must be really horny.\n\n\"Do I get any say in this?\" I said.\n\nRaisa came in and narrowed her eyes at me in the dim evening light, followed by a noticeably flushed Adewyn.\n\n\"No,\" she said, simply.\n\n\"Oh come on!\" Adewyn protested, \"Look at him, his color is back, his eyes look good. And he's standing at attention.\"\n\nI was making a little tent of my own under the blanket. \n\n\"Gods,\" Raisa said, \"Can both of you just stop and think for a second about what might happen if Finn strains himself?\"\n\n\"I'll be good,\" Adewyn said, although her husky voice indicated that she wanted to be anything but, \"Besides, if you're worried, you can stay and...monitor us.\"\n\nI'd never been with two people at once. To be honest, it hadn't held much appeal. Until now. My cock twitched at the idea of both Adewyn and Raisa being in my bed.\n\n\"Oh, look, someone likes that idea,\" Adewyn said, giggling while smoothly taking her shirt off. I'd missed those lovely breasts. Did they seem a little bigger?\n\n\"Fine, but...if you start feeling bad, tell us and we'll stop,\" Raisa said, but I noticed that she had seemed mesmerized by my erect cock. It was like we were all caught in a current of lust, and the tide was coming in.\n\nAdewyn stripped quickly and sat next to me on the bed, pulling back my blanket. Raisa, however, stripped slowly, teasingly. Both of them had been in tunics and trousers, which was their preference, and not all that uncommon for women in the camp. Raisa's pants were leather, and they gripped her tightly as she wriggled out of them. Her shirt was cotton, tight and light. As she pulled it off her breasts popped into view. Something about the way they did filled me with lust. She smiled at me, proud of the power she had over me. \n\nI was still a bit weak, and felt completely at my sisters' mercy. It was not an unpleasant feeling.\n\n\"Just lay back and let your sisters care for you,\" Adewyn said, obviously aroused but her voice gentle. As she wrapped her hand around my cock I moaned. \n\n\"Do you need us, brother? Do you need our warm mouths and tight quims?\" Raisa asked, teasingly, before she kissed me, slowly, and with longing. Her tongue explored my mouth, slowly, as Adewyn took my shaft in her mouth.\n\n\"Fuck,\" I gasped, my whole body tensing for a moment. The sensation was almost too much. If I hadn't been so full of desire, so lost in the moment, I might have been alarmed at how overwhelming it was.\n\nRaisa's hands roamed my chest, Adewyn's gripped my thighs. Mine were fondling Raisa's breasts, gently pinching and caressing her nipples in turn. She moaned, and then began to kiss my neck, nipping and even biting me, marking me as hers. As she did so Adewyn took me deeply, to the root of my sex. She gagged slightly but her throat gripped and tightened on me in a way that was delicious torture.\n\nRaisa stopped and looked at Adewyn, who released my cock from her mouth. I saw that they shared a smile.\n\n\"Oh gods, please,\" I said, feeling powerless and even more aroused because of it, \"I need you. I need both of you. Please don't stop.\"\n\n\"You've been so good for us today, haven't you?\" Adewyn said, positioning herself over my cock and guiding it towards her sex with her fingers, \"Spending time with us, buying us fine gifts, showing only us your attentions.\"\n\nRaisa began to straddle my head, bringing her pussy tantalizingly close to my mouth. I inhaled deeply and caught her scent, which I associated with both innocence and wanton desire.\n\n\"Will you care for me now, my lord?\" Raisa said, suddenly very serious, \"Will you give me your sweet kisses in all of my secret places?\"\n\n\"Yes, gods yes,\" I said, out of breath even though I was unmoving and a passive recipient of pleasure.\n\nAs soon as Raisa's warm wetness touched my mouth, I felt Adewyn sink down on my cock. I moaned into Raisa's quim, and she moaned in return. Adewyn had cried out as she enveloped me. No one within fifty feet of us would have any doubt as to what was going on in here.\n\nI licked and lapped and sucked Raisa's sensitive nub into my mouth. This was the only part of the experience that I truly had control over, and I tried to focus on stimulating her as much as possible. I penetrated her with my tongue and I felt her sex convulse. She was already cumming.\n\n\"Oh fuck. Finn, I love you so much,\" Raisa cried out.\n\nAdewyn, meanwhile, had been riding me with growing intensity. It was clear when she started, moving up and down slowly, that she was attempting to show me gentleness and care. I appreciated it, but her need must have been great. With each stroke she grew faster, harder. Her breathing turned to whimpers and then moans and finally cries. By the time she was nearing climax she was fucking me with bruising force. I loved it, and I felt like a goddess of legend was having her way with me.\n\nAdewyn screamed my name, her quim spasming. Her orgasm was shocking to me, I felt her whole body move and shake, and she was loud in a way I found lewd and erotic. I'd never heard her this excited, and I felt a wave of fresh wetness bathe my crotch. Everything about this was incredibly intense. She came again and again, rapid firing orgasms that rendered her unable to speak. Raisa did as well, but more gently, grinding herself against my face. My beard was soaked with her fluids.\n\nAdewyn collapsed off to my side, suddenly exhausted. I worried for a moment but then I felt her hand jerking my cock, sliding slickly and firmly over it. Raisa suddenly lifted herself up and turned around, again pressing her sex onto me as she leaned forward and took me into her mouth.\n\nI thought of her tasting Adewyn on my cock and I nearly came, but I wasn't ready. Raisa loved serving me but couldn't take me very deeply in her mouth. She more than made up for this with her speed and eager tongue. Soon I was having trouble even thinking, my own tongue seemed to have a mind of its own. That's how it ended up circling her puckered rosebud. She moaned on my cock and arched her back. I'd never done that before but apparently she liked it. I continued to lick and probe it while I used my thumb to gently stimulate her clitoris. As my tongue entered her she had two more small quivering orgasms, and then she let me pop out of her mouth.\n\nI moaned in complaint. Beyond words, I was so close. I felt something building in me, my passivity contributing to it. It felt like an orgasm, but it also felt like magic. My body and soul were gathering energy, just as they would before I cast a spell, but I knew not the source or the goal. It was all completely unknown to me.\n\nRaisa turned around again, facing me, her mouth sloppy and wet from her activities, and slid herself smoothly onto my cock, growling deep within her throat like a tigress in heat. Fuck, she was so tight! My good, innocent Raisa, who used to follow me around like a lost kitten, now riding me, grinding on me, rolling her hips. Adewyn leaned over from the side and began to kiss me, full and deep. \n\nSomething exploded inside me. I felt myself spurting my fertile seed inside Raisa over and over again. I felt her cumming a final time as I did so. It felt like I was putting more inside her than that. It felt like there was a true transfer of energy, of power, my love given literal form and sent into the core of her being.\n\nAs I came, I saw visions. This was the first time that it happened during sex, but not the last. The first of these visions had already happened. The other two had not yet occurred, and perhaps never would. Such is the nature of spontaneous divination.\n\nI was young, just having passed my initiation and ascent to adulthood. I had turned eighteen three days ago. I was bathing away the bruises and soreness from the ritual combat earlier in the day. My eyes were closed but I felt someone get in the large basin with me. It was my mother, nude, glorious, her eyes devouring me with want that I'd never seen before in any woman. She moved to kiss me, her hand finding my cock.\n\n\"I became quite wet, watching your performance today,\" she breathed into my ear.\n\nI was older than before, older than I was at the present, and sick, although not of the body. The room was dark and warm. Others worried I would die but I knew I would recover, even though I was unable to sleep and barely able to move. Merwyd watched me tensely; she had stayed with me late into the night. Her hair was stark white, and much shorter than I was used to, its ends dyed a stark black. Carefully, slowly, and almost idly, her small deft hand and found my cock under the blankets and had begun to stroke me with love and care. I did not complain. Finally she stripped off her gown and mounted me, almost desperate in her intensity.\n\n\"Love, please give me a child. I know you aren't well, and in case...you don't make it. Please, I know its selfish but...\"\n\nI was much older, and virile, healthy, and commanding. It was a chill autumn day and we were in a forest near the castle. The girl who was with me was less than half of my age, barely twenty-one, her hair a flaming red. She was cursing me, telling me that I wasn't truly her father, when she stopped, realizing that she had crossed a line that she never intended to. I was dimly aware that I had been...hurting her? Not physically, never that, but emotionally I had been pushing her, challenging her, even enraging her. To provoke her power out of her. I felt sick from doing it, she was a good girl, and true. I put my hand on her face to let her know of my love, and to my surprise, she leaned in and kissed it. Next I kissed her, and pressed her petite form against a thick oak tree. She gasped and pulled me to her, telling me how badly she wanted me, calling me pet names other than father. Soon I had pulled her pants off and was fucking her on a bed of thick moss. When she came her power manifested at last, her hair turning white in one smooth wave, both of us suddenly floating off of the ground. Afterwards she begged my forgiveness for her earlier words and I for my cruelty. Things were different between us after that, and she secretly became devoted to me with an almost feverish intensity.\n\nI realized that day that she had never hated me, but only herself.\n\nThen I was in the moment again, panting, and aching. Gasping for breath, feeling loved and terrified and sated and somehow, wiser. Raisa and Adewyn looked down on me, concern on their faces, still breathing hard and flushed from sex.\n\n\"I'm all right,\" I said, smiling widely and sincerely, \"Gods am I ever all right.\"\n\nRaisa laughed but Adewyn still looked serious.\n\n\"I thought for a moment we'd killed you,\" she said.\n\n\"Well, you have to go somehow, and death by my sisters' quims seems like a decent way, all things considered,\" I retorted.\n\nAdewyn snickered and hit me. Both of them cuddled up to me, one on either side.\n\nI reached under the pillow and pulled out the pouch from earlier in the day. I took the rings out. I held Adewyn's left hand and put the ring with the sapphire on her finger. I held Raisa's hand and placed the ring with the blood-red ruby on her finger. I handed the platinum band to Adewyn and she put it on my finger. All fit with eerie accuracy. There were no questions. We'd all answered them long ago.\n\nThe last one I would wear on a chain around my neck, as hope against the future that I feared would come to pass.\n\nEven knowing that it was coming, Adewyn was crying a little. Raisa, somehow, was much more flushed now than she had been even after coming. She clutched at me tightly, and snuffled for a little while. I held her.\n\nAnd that, for me, was the day that we became truly married. Perhaps there would be ceremonies later, or perhaps I'd be put into the ground sooner than I expected. I didn't care. This was the beginning of my new family, which I would build on love and trust and respect. For the moment, everything was perfect and I was wonderfully, truly relaxed. With my sisters on my arms I began to drift off to sleep.\n\n\"Finn,\" Adewyn said, with a slight tremor in her voice, \"I'm pregnant.\""
    ],
    "authorname": "LateStageInfernalism",
    "tags": [
        "fantasy",
        "epic",
        "love",
        "romance",
        "brother",
        "sister",
        "three way",
        "magic",
        "older sister",
        "younger sister"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/a-matter-of-blood-pt-04"
}
{
    "title": "Horny Student, Extreme Bet",
    "pages": [
        "(Author's notes: \n\nThis is a work of fiction. In this fantasy, nobody is worried about STDs. In real life, all non-monogamous sex should be practiced using accepted safe-sex precautions.\n\nThanks to Candace and HeyAll for editing/beta-reading. This is a better story because of their efforts.\n\nAll characters involved in sexual activity are at least 18 years old.) \n\n: : : : :\n\n\"Hey, Ashley, you want to go get a drink, then catch some dinner? Caf\u00e9 Prego?\"\n\nChris, of the gender-neutral name but all-feminine looks, was my roommate and best friend, and she was playing dirty. I had told her earlier that I was watching both my calorie intake and my dollar output. She said I was being silly -- if I'd allow some 'lucky guy' (her words) to take me out, I wouldn't have to pay for anything, and that my figure was second only to hers and didn't need monitoring. Now here she was suggesting Caf\u00e9 Prego, the best Italian restaurant in town, with all the carbs and calories -- and cost -- that implies. \n\nChris and I were both in our late 20s, instructors at the local university. She has a beautiful face accented by an easy smile, framed by brown hair that grows in natural Grecian curls. She has wonderful C-cup boobs, a sleek waist, a beautiful ass that is curvy without being over-inflated, and legs that go on for days. She is definitely a looker. I must admit, though, as modestly as I can, when I glance in the mirror, what I see is quite similar. Biggest difference is, my hair is blonde. And my boobs are slightly bigger (don't tell her I said that).\n\nWe both got divorced three years ago. I got the marital house, and she didn't. I couldn't afford the payments and maintenance by myself, especially the pool, which always seems to need something expensive. Chris didn't want to revert to living in an apartment, so we agreed on rent that was fair to both of us, and she took over what used to be my guest bedroom and bathroom. She's not a perfect roommate, but she probably comes as close as humanly possible.\n\n\"Let's go early and beat the crowd,\" she said.\n\n\"I can't,\" I said, hiding my irritation -- I hadn't agreed to go. \"I have a student coming by for tutoring at 5:00.\" The university doesn't pay overtime, so tutoring is one of the few ways we instructors have of making extra money.\n\n\"Is it 'Brandon' again?\" She used that mocking, schoolyard tone of voice that elementary school kids use to tease their classmates about their first girl- and boyfriends.\n\n\"As a matter of fact, it is.\"\n\n\"He is so crushing on you.\"\n\n\"I don't know why you say that. He's just working hard to get a decent grade,\" I said, trying not to show my growing aggravation.\n\n\"Maybe he is, but he craves you big time.\"\n\n\"Quit it, he does not.\"\n\n\"My bestie, so innocent, so na\u00efve.\"\n\nI didn't even dignify that with a response. In the silence that followed, I thought she was done with the topic. I was wrong. \"He'd fuck you in a minute if you'd let him.\"\n\n\"Chris! Give up!\" I growled. \"Just because neither of our ex-husbands could keep their pants zipped doesn't mean all guys are like that.\"\n\n\"I'm serious. I'm not even saying that Brandon is 'like that,' but he'd do you in a heartbeat. I doubt if he actually even needs the tutoring. I think he's just looking for some 'quality' face time with you. Your fee for a lesson is no more than a nice evening out.\"\n\n\"He never hits on me, Chris. He never even flirts. He calls me 'Ms. Collins,' not even 'Ashley.' He's all business.\"\n\n\"I didn't say he was perfect.\" She slipped into her condescending 'I can't believe I have to explain this' voice. \"He's shy, especially because you don't respond to the signals he does give you. If he was the type of shallow, smooth-talking hipster-with-a-dark-side you tend to fall for, you would have been in bed with him months ago.\"\n\n\"So you admit he's not my type.\"\n\n\"No, I'm just saying you only see what you want to see. How are all those 'cool guys' working out for you, anyway?\"\n\n\"Jeez, Chris, you're pushier than an iTunes update...\" I was reaching the end of my patience.\n\n\"I'm just saying, if you gave him any encouragement at all, you'd see what I'm talking about.\"\n\n\"Give it a rest, will you?\"\n\n\"I bet I'm right.\"\n\nA bet. Losing a bet would shut her up, and would be something I could hold over her head if she ever brought it up again.\n\n\"That's a great idea. I'll take that bet,\" I said. \"Loser pays for dinner tonight. At Caf\u00e9 Prego.\"\n\nAah, sweet silence -- I finally said something she didn't have a glib comeback to.\n\nThe silence turned scary, though -- I could hear the gears turning in her head. Chris is very intelligent, and usually quite reasonable, but from time to time she becomes the Anti-Chris, an impulsive, reckless demon who has never heard of reasonable limits. I've learned not to get pulled into her schemes, most of the time anyway -- she can be quite persuasive. \n\nShe finally said, \"See, the thing is, we have to come up with something that actually tests whether Brandon is the earnest student you claim he is, or whether he is the horny, love-sick pup I know he is.\"\n\n\"I don't like the sound of that.\" I couldn't hide the worry in my voice -- we had reached the point in the conversation where the Anti-Chris could appear and things start getting crazy.\n\n\"Just admit that I'm right,\" she said, \"and then no one has to 'prove' anything.\"\n\n\"You're not right. I'm just a little worried about what your devious mind might think is a 'fair' way to prove it.\"\n\n\"Well, for starters, I don't think we can just ask him.\"\n\nI sang, \"That would be awk-ward -- 'hey Brandon, wanna fuck?'\"\n\nWe both laughed, then no one said anything for a minute. She broke the silence. \"Today's lesson, could you do it out by the pool?\"\n\n\"I guess so. Why?\"\n\nShe didn't answer immediately. \"Okay,\" she finally said, \"here's what we do, actually what you do.\"\n\nI braced myself. I could tell this was going to be a doozy.\n\n\"When he rings the doorbell, don't answer it the first time. When he rings again, answer it, in your bikini.\"\n\n\"WHAT?\"\n\n\"It doesn't have to be your Cancun bikini.\" Chris and I and a couple of other friends had gone to Cancun earlier in the year, and after too many margaritas the first day we all bought the tiniest micro-bikinis I had ever seen. The tops barely hid our nipples, and we all had to shave off our landing strips to wear the bottoms, which covered our slits and nothing else. I only bought mine because they would have teased me mercilessly if I hadn't, and I only wore it because anyone who saw me in it was a stranger who I'd never see again. No way was I wearing it in front of Brandon. \n\n\"It can be your blue one.\" That's more like it. It still shows a lot of skin, but at least the bottoms actually have a seat rather than butt-floss.\n\n\"Not gonna happen!\" I said.\n\nShe looked annoyed, but only for a second. Then a huge smile appeared -- uh oh, that's usually trouble. \"Right, you're absolutely right. I answer the door in my bikini. You'll be out by the pool in yours -- don't worry, the blue one.\"\n\n\"And I'm out by the pool in my bikini for his lesson because?\"\n\n\"You lost track of the time.\"\n\nShe paused, arranging things in her mind. I thought the whole thing sounded absurd, but just to let her get to the part that was so obviously outrageous I could decline it easily, I asked, \"Then what?\"\n\n\"I answer the door, lead him to the patio, point him at you, and I disappear. When you hear him approach, you hold out the sunscreen without looking up and say, 'Chris, would you put some sunscreen on my back?' He takes it from there.\"\n\n\"Okay, but then that's it.\"\n\n\"Yes, that's it if you're right. If he redirects you to his lesson, then you win, and I buy dinner.\"\n\n\"I'm getting Osso Bucco -- it's the most expensive thing on the menu. And an appetizer, and wine.\"\n\n\"Not so fast. That's if you win, which you won't. If I'm right, then buttering your back will led to 'other things,' and I win.\"\n\n\"And I buy dinner at Caf\u00e9 Prego.\"\n\n\"No. Not at all. If I'm right, which I am, then you do anything he initiates. Anything. If he starts something, you don't cut him off, you don't refuse, you don't act unwilling, you don't discourage him, you do it. If that leads to something else, you also do that. If he keeps going, you keep going. Anything he starts, and I mean anything, you do it.\"\n\n\"Damn, Chris, that's hard-core.\"\n\n\"Not according to you.\"\n\nShe had me. I didn't believe Brandon would go there. I was sure he had a girlfriend, probably a bikini model who looked like she stepped out of a beer commercial. He was six foot three, around two hundred twenty-five pounds, and looked like a young Christian Bale, if Christian had played linebacker for Southern Cal. I was sure his girlfriend made me look like a spinster librarian.\n\n\"Okay, I'll do it. Just to shut you up.\"\n\n\"Good. You haven't gotten any in months, and you're wound tighter than a cheap watch. You could use a good 'shtooping.'\"\n\n\"Shut up, Chris. Not gonna happen.\"\n\nShe walked away, singing, \"Ashley's getting lai-aid, Ashley's getting lai-aid.\"\n\n\"Jeez, Chris, what grade are we in?\" I said in her direction as she stepped inside.\n\n: : : : :\n\nI have a competitive streak a mile wide, and a stubborn side even larger. Looking back, I realize the Anti-Chris used that against me. She knew that if I felt challenged, I wouldn't back down, no matter how ridiculous her plan was, so she made sure I felt challenged. The result was, a few minutes before 5:00, I found myself laying out by the pool on my tummy, reading. I thought I wouldn't be nervous, but the closer it got to tutoring time, the more I worried that she might be right, and I'd soon be way outside my comfort zone. \n\nI worried about more than possibly getting fired for having sex with a student. I've never been much of a casual-sex girl. I'm not a prude by any means, but to me sex happens as part of a relationship. Physical intimacy builds upon sharing things that are deep and profound: likes and dislikes, hopes and dreams, becoming familiar and comfortable with each other, building mutual trust, enjoying the similarities, learning to compromise and accommodate the differences. When you've done that, then you have sex. I've always done it that way, and it's always worked for me. \n\nBrandon and I hadn't done any of those things. I found myself hoping he wouldn't show up. When the doorbell rang, promptly at 5:00, I almost shot into the air like that cartoon cat that's always getting startled by the dog. A few moments later, I heard footsteps approaching. Without looking up, I held out the sunscreen and recited my line, \"Chris, will you put some of this on my back?\"\n\nI expected Brandon to say something timid like, \"Oh, well, um, hi, uh, I'm not really Chris, you know, I mean, uh, er, sorry,\" in the upper register of his voice, maybe with a squeak or two. But that isn't what happened. He took the sunscreen from me and in a deep confident tone said, \"Hey Ms. Collins, it's me, Brandon. Sure, no problem.\" \n\nBefore I could even pretend to be surprised or protest that I'd lost track of the time and we should move to the table for our lesson, he sat on the edge of my deck chair and I heard the sound of coconut oil being squirted into his hand.\n\nHe rubbed his palms together, placed them on my shoulders, and began massaging them, quite tenderly. \"Lookin' good, Ms. Collins,\" he said. \n\nShit, I might be in trouble, maybe Chris was right. He oiled my upper arms, and returned to my shoulders, rubbing the coconut-scented oil down my upper back. He lifted his hands, I thought to squirt more oil, but he unclipped my bikini top, then got some more oil.\n\n\"What are you doing, Brandon?\" I said in a cold, stern 'teacher' voice.\n\n\"Just getting more sunscreen,\" he said. \"Don't want to miss any spots.\"\n\n\"No, you undid my top,\" I said. That may have technically violated Chris's rule about going along with whatever he started, but I had to at least imply that I didn't approve.\n\n\"Your bikini is so pretty, we wouldn't want to stain it with sunscreen, would we?\" he replied. \"Besides, your tan will look better without a bikini line here, right?\" He rubbed all the way past the small of my back to the upper edge of my bikini bottom.\n\nHe shifted his weight on the chair, and I thought maybe he was done and we'd get on to our tutoring. Wrong. He got more oil on his hands, and started back at my shoulders, this time moving upward to my neck. When he reached my top's upper strap, he unfastened it, again without asking, and rubbed slowly, deeply, sensuously on both sides of my neck. \n\n\"Wouldn't want a tan-line here, either,\" he explained, ignoring that the strap was under the canopy of my hair and there wouldn't be any tan there anyway. He lingered at my hairline, which happens to be one of my most sensitive spots. I hoped he didn't notice the goose-bumps on my arms.\n\nMy inner voice told me it was time to break Chris's rule and stop him -- he was escalating way beyond applying sunscreen. Before I did, though, he shifted his position, squirted another handful, and began at the back of my knees, which happens to be another one of my secret erogenous zones. He lingered there for a luxuriously long time, then worked his way downward. He finished my heels and returned to the back of my knees, rubbing upward this time. When he neared my bikini bottom, he nudged my knees apart. \n\n\"Let's make sure we don't miss anywhere important,\" he said. \n\nHe massaged oil into my inner thighs, working upward until he briefly rubbed my pussy through my bikini bottoms. He paused, I think to see if he needed to claim it was an accident. When I didn't say anything, he ran his fingers under the seat of my bikini and massaged oil into the lower part of my butt. I should have stopped him, but my stupid competitive streak kept me from violating Chris's rule. And, to be honest, what he was doing felt pretty darn good. \n\nHe moved to my waist, and re-oiled his hands. He started at the small of my back and worked downward. He slid his fingers under my bottoms again, this time from the top, and finished oiling my butt, even though it was covered and didn't need sunscreen. I was all set to stop him if he tried to remove my bottoms, rule or no rule, but he must have sensed that because he didn't try.\n\n\"Your back is done, let's turn you over.\" \n\nEven though he had unclipped my top at both my back and my neck, I somehow managed to get turned over holding it in place, without even a nip slip.\n\nHe oiled my front from the bottom up -- feet, then shins, then thighs. He stopped when he got to my bikini bottom, still sensing I wouldn't let him pull it off. I was thinking it was time to re-clip my top, sit up, and say something about getting on with the lesson, but he started in on my shoulders, and it felt so good, I decided it wouldn't hurt to wait a moment. He really did have a nice, delicate touch, and he was careful to warm each new handful of oil thoroughly before applying it.\n\nAfter the tops of my shoulders, he moved to my collarbones and neck. He was respectful of my modesty, folding down the upper parts of my top rather than trying to remove it. Even though I found myself falling under the spell of his strong, gentle touch, my inner voice said this had gone far enough, bet or no bet. I decided it was definitely time to cut him off, but that it wouldn't hurt to enjoy his tender touch for just a bit longer. Seriously, just another minute, or maybe two since it felt so good. \n\nHe removed his hands to get more sunscreen, but this time he didn't squirt more oil, he lifted my bikini top off. I didn't realize I had relaxed my hold on it, but apparently I had. \"I don't think we need this anymore,\" he said. \n\nI shielded my nipples with my hands, and he began oiling the upper, unprotected swell of my boobs. He soon worked his hands under mine and began massaging my tits, cupping them in his palms. I told myself that as long as my nipples were covered, I wasn't actually topless. My lower tummy began to sizzle, warm and deep. I tried to ignore it but it wouldn't go away. WTF?\n\nHe pulled me out of my thoughts, flexing his fingers, squeezing the soft flesh of my breasts; in high school we would have called it 'feeling me up.' He began sliding his palms back and forth across my nipples. They are sensitive and love feeling friction, but they had never felt this type of slick, warm, oily touch -- they absolutely glowed in pleasure. They jumped to attention; I'm sure he felt it. My inner voice continued protesting, although it was sounding weaker and weaker.\n\nMy boobs sizzled in the warm afternoon air -- he had removed his hands and now I actually was topless by any measure: tits out in the open. He tweaked my nipples, rubbing them between his pointers and thumbs, and the sizzle in my tummy grew. I heard somebody moan and was surprised to realize it was me. \n\n\"Brandon, what would your girlfriend think?\" I managed to say. I expected him to ignore the question or if he said anything, offer some sort of lame rationalizing like 'She'll never find out.' \n\nHe surprised me and said, \"Not a problem, I'm sort of 'between' girlfriends right now. There's somebody I'm interested in, but she's taking awhile to respond to my attentions.\" \n\nI wondered if he meant me. \"Maybe 'taking awhile' means that she's not interested and you should look elsewhere.\"\n\n\"Maybe,\" he agreed, sounding somewhat amused and supremely confident. \"But I'm pretty persistent. I usually end up getting what I want, even if it takes longer than I like.\" \n\nHe got more sunscreen, and oiled my boobs again, as if they weren't protected enough. Then he rubbed down my tummy, massaging around the sides of my waist as he went. He got a fresh handful of oil and resumed below my navel, down to the top edge of my bikini bottom. Without any pause he slid under it, starting at the outer edges and working inward. His hands met in the middle, where he discovered something I had hoped to keep secret -- I was soaking wet. He worked a finger inside me and curled it up under my clit, teasing it just long enough to feel it rise up and reach for his touch, proving I was ready for more.\n\nHe reached his hands under my knees and lifted my legs until my thighs pressed against my boobs, then reached around my butt and looped his fingers under the upper edge of my bikini bottom. \n\nHe said, \"Wouldn't want to stain this, either\" and pulled it across my thighs, up my calves, over my feet, and off. He eased my legs back down and said, \"Nice racing stripe, Ms. Collins.\"\n\nI felt the open air -- and his eyes -- caress my groin, making my bare skin glow. \n\nHe continued, \"I knew you'd turn out to be a natural blonde -- cool!\" \n\nThat warm simmer in my groin had grown to a full roiling boil, which I didn't understand. As I said before, I'm not a prude, in fact I love sex. I've just always done it in a long-term relationship. It's not that a guy has to 'earn' sex with me, I'm not that much of a princess, but to me the thrill comes from building up to the act, whether it's a couple of dates or eight or ten. I had never had that buildup measured in minutes rather than weeks, and I was quite surprised to find such bubbling in my belly. Why was this moment so exciting?\n\nHe settled between my knees, his shoulders under my thighs, and spread my cleft apart with his thumbs. Then our lesson began, just not the one I planned -- he tutored me on the topic of world-class pussy eating. Oh my, he had mad skills. He not only knew all the hot spots, he knew which ones to treat tenderly and softly, and which ones to touch more firmly. He knew where to lick slowly, where to flick his tongue quickly, where to massage with his lips, and where to suck. And he knew when to do those things. He played me like a virtuoso performing a master recital, and he had me cumming quicker, harder, and longer than I ever had before. I had always heard the phrase 'seeing stars,' but that was the first time I ever actually saw them.",
        "He gave me a moment to catch my breath, then he straddled my chest, unzipped, and pulled his dick out. It was quite nice, although considering what he obviously planned next, perhaps a bit bigger than I prefer. He didn't do anything crass like grab my head and force his hard-on between my lips, but he quickly placed his tip, swollen, dark red, and glistening with pre-cum, right in front of my face. \n\nStill telling myself that one more step would finish things, I opened my mouth and drew him in. The manic fluttering in my gut increased, now consuming my entire lower body, although I still stubbornly tried to ignore it. At first I just held his tip between my lips, not moving except for swirling my tongue on the underside. Then my competitive side took over -- if I was going to do this, I was going to do it well, dammit, and give him the same level of pleasure he gave me. I began bobbing my head forward and back, still sucking deeply. I intended to build up to long strokes, but he took over. \n\nHe thrust in and out of my mouth quite firmly, leaving me to suck, which I did as hard as I could. He plunged deeper with each entry, pulling out to where only the very tip remained between my lips. I fisted the base of his cock, twisting my hand in rhythm with his thrusting, adding friction, but also blocking him from penetrating my throat. He kept his stroking luxuriously slow, taking his time, enjoying the soft warmth of my lips and tongue, obviously confident he didn't need to hurry. My groin sizzled harder than ever, and my mind did flip flops, trying to comprehend that there I was, on a deck chair beside the pool in my back yard, sucking a student's cock. I couldn't bring myself to see if Chris was watching from her bedroom window, but I'm sure she was.\n\nBrandon's thrusting became more urgent and uneven, almost awkward, and he began to sound out of breath. A couple of strokes later he pulsed stream after stream of warm goo onto my tonsils. He stroked my throat to make sure I swallowed. Looking back, it was the one thing he did that I resented -- I was going to swallow anyway, but he made me feel small, like he thought I was either an inexperienced teenybopper who had to be shown the basics, or a defiant little pet being difficult about taking her medicine. \n\nHe settled back on his haunches to catch his breath. I still thought, 'Okay, now that we got all that out of the way, we can proceed with tutoring.' Wrong again.\n\nHe parted my knees and dived between them again. The quivering I felt down there had grown so intense, I'd be surprised if he didn't see it. He surrounded my slit with his mouth, sucking all my soft fleshy bits between his lips. He set his mouth in heavenly motion, and in between tongue strokes, he moaned, \"Damn, this is sweet -- I can't get enough!\" He settled in for the long haul, although he took brief breaks to shed his shirt, then a bit later his pants, and finally his boxer briefs. What he did with his lips and tongue was pure magic. He was relentless, and although it took quite a while, his persistence won out and I came again, hard. He looked quite pleased with himself.\n\nI guess I could have stopped him before he fucked me, probably should have stopped him before he fucked me, but my stubborn side didn't want to admit to Chris that I violated her rule. No, that's an excuse; by that point I needed him inside me so bad I couldn't see straight. I mean, I shouldn't have enjoyed any of this, but what Chris said earlier was right, not only that Brandon wanted to fuck me, but also that I had gone without for a while. What no one realized was how intuitively Brandon would do all the right things to me. I still wasn't sure I should be allowing any of this to happen, but my body overruled every reasonable thought I had about why not. \n\nBrandon was utterly sure of himself. He knew exactly what he wanted, and being given an opportunity, even a reluctant one, he was taking it. And to be honest, once I accepted that I had lost this bet, and finally got my inner voice to shut up, I knew what I wanted, which was pretty much exactly what he was doing.\n\nHe graciously gave me a moment to recover from my O, gently kissing the hyper-energized skin around my slit, then he crawled up my body, licking, kissing, and sucking along the way. He carefully kept himself positioned between my knees, preventing me from closing them. He paid my boobs extra attention as he passed them, kissing them, nibbling on them, tickling the nipples with his tongue. He mumbled something, which might have been \"Damn these are sweet.\"\n\nWhen he got even with me, he tucked his chin into my neck and sighed heavily behind my ear -- he had noticed that my hairline is super-sensitive. Extra points for paying attention!\n\nI was still soaring from the rush of his breath on my neck when I felt the tip of his cock nudging my nether lips apart. Okay, enough already, it was time to put a stop to this. \n\nShit, who am I fooling... I curled my legs around his, grabbed his butt, and slowly pulled him into me. I was so ready, he slid smoothly all the way to the hilt on the first push. He held there a moment, completely still, letting us both enjoy just how completely he filled me. He slowly rolled his hips, pressing the base of his cock tightly against the top of my opening, giving my clit a firm nudge.\n\nHe didn't pull any length out, he just reduced the direct pressure from his groin against mine, letting my clit feel its absence before he pushed back against it. He did that again, then he added a tiny amount of length, not really a thrust, just fully un-touching my clit before pressing back hard against it. I curled my hips up to meet his when he pushed back in, then when he pulled back I did also, increasing the difference between 'in' and 'out.' When he pressed tight against me, he rolled his hips in a slight circle, adding a bit of lateral friction to my clit -- it was heavenly. \n\nAt first he showed no pattern -- pressing against my clit then pulling slightly away, then pushing back in, all luxuriantly random. But it began to take on a recognizable tempo, slow and strong. I matched it, mini-thrust by mini-thrust. He added some depth, and I added a bit more. Before long, we fell deep into the throes of that ancient, primal human rhythm, fucking. Every time he was at the bottom of his stroke, he rolled his hips slightly sideways, and I rolled mine in the opposite direction, both of us making sure my clit got its extra little nudge. He stayed slow, but gradually abandoned soft and easy, stroking me long and hard. It was animalistic, fierce, crude, ferocious, fabulous, and perfect -- exactly what I needed.\n\nHe separated from me and I groaned -- I needed a dick in me, now. He flipped me over onto my knees and plunged back into me, taking me doggie. I'm not a fan of doggie, I've never been able to cum that way. I needn't have worried; he gave me everything I needed and more. For the very first time I saw how exciting being on all fours can be, how the animal crudeness adds an extra level of excitement. \n\nHe slammed into me relentlessly. He reached around my waist, cupped my boobs and massaged them. He pinched and twisted my nipples, and that finished me off -- I launched straight into orbit. I fell forward, pulling my tits out of his hands, my shoulders slumping down onto the deck chair. I lost my leverage for pushing back onto him, but he made up for it by grabbing my hips, pulling on them for power. He didn't miss a beat, his thighs slapping hard against mine. My orgasm went on and on and on, blissfully seeming like forever.\n\nHe finally slowed, and I began to float back down to earth. I was completely spent, but he hadn't cum. He had given me three powerful orgasms and only had one himself, so even as wasted as I was, I felt like I 'owed' him another one. I gathered my wits and turned around to face him, thinking maybe I'd finish him in my mouth, even though his dick would be covered in my juices and I prefer not to taste that.\n\nHe had other ideas. He pushed me onto my back and laid his middle finger on my lower lip. He said, barely whispering, \"Cover it with saliva.\" \n\nI gave his finger a mini-blowjob, leaving as much thick spittle on it as I could. He lifted my legs by the ankles with his other hand and placed the tip of his wet finger against my asshole. He pressed inward, wiggling to find the soft center, pushing until it began to slide in. \n\nMy thoughts clanged together like a multi-car accident on an icy street. Hold it right there, buddy... now you've gone too far. I don't do anal, end of story. I've been with a lot of guys who wanted to, and several of them convinced me that they knew the secret: do these things in this order, and it won't hurt. Wrong! It hurts to do it there, period. Every time, no matter who's doing it and what he claims to know. Brandon's free pass to my body was over... soon. In order to satisfy my stubborn streak, I needed to wait until it actually did hurt, then I could justify shutting him down. I wouldn't be breaking Chris's rule, because I never agreed to do anything painful. Besides, I doubted if even Chris expected me to allow him into all three holes -- a trifecta -- no, a tri-fuck-ta.\n\nSomething weird happened, though. He slowly, firmly pushed his finger further into me, deeper and deeper, knuckle by knuckle, until it was buried in me, and it didn't hurt. He pulled it out and pushed it back in, then again, slowly at first, then picking up a little speed, and before long he was finger-fucking my ass. And it still didn't hurt. WTF?\n\nHe lifted my ankles higher, pressing my thighs tight against my boobs, drooling more saliva onto his finger until it slid in and out as smoothly as if it had store-bought lube on it. I kept waiting for it to hurt, so I could stop him. The thing is, though, it didn't hurt. At all.\n\nHe moistened a second finger and eased it in beside the first one. Two fingers felt more than twice as big as one, but the pain I feared still wasn't there. He dribbled more 'lube' until both fingers were buried up my butt as far as they would go. He began to double-finger-fuck me, twisting the angle of his hand every few strokes to stretch me in all directions, drooling more saliva as needed. \n\nAlthough it still didn't hurt, two fingers stretched my ass ring so tight they didn't slip in and out nearly as easily as one finger had. Brandon was far away in his own world, focusing on his conquest rather than my comfort, but even so, he sensed I was uncomfortable. \"Relax,\" he said, helpfully. \n\n\"I don't think I can, that's not enough lube.\" \n\n\"You might be right.\" He pulled his fingers out and picked up the sunscreen, squinting at the fine print on the label. \"Contains aloe,\" he said, \"and no glycerine. Perfect.\" He slathered both fingers in oil, and pressed them back into my ass. It wasn't as bad as before. Actually, it not only didn't hurt, it wasn't even uncomfortable. To be honest, it felt good. I never imagined there was any way having someone's fingers up my butt could feel sensual, even erotic, but it did. Somehow the warm slipperiness of the oil made his fingers feel like they belonged, and it actually made the hair on my arms stand up.\n\nHe continued double finger fucking me, adding more oil not only to coat his fingers, but also leave a slippery glaze on the inside of my ass ring and inner channel. \n\nMy ass must have felt like it was loose enough. He pulled his fingers out, grasped my hips with both hands, and pulled me sideways so my butt hung half off the side of the deck chair. He knelt on the deck and lifted my feet up, placing them together on his shoulder.\n\nHe drizzled sunscreen onto his dick, and used my hand to smooth the oil around. When his dick was nice and slippery, he placed the tip at my entrance. He paused briefly. He might have been waiting for a 'yes' from me, but I wasn't going to start granting him permission at this late stage. However, I didn't say 'no' either -- damn you, Chris, damn your rule, and damn my stubborn streak. \n\nHe clearly took the lack of 'no' to mean 'yes,' and began to push his dick in. I tensed, certain that refusing to break Chris's stupid rule was a huge mistake -- this was going to hurt like hell. He pushed in slowly but firmly, and I braced for a tsunami of pain. As thoroughly lubed as his cock and my innards were, though, it slipped in easily. Painlessly. Sensually, even. \n\nAn inch or so in it met a slight resistance, and I stiffened -- now it was going to hurt. He paused briefly, then pushed past it -- no pain. He finally stopped when he was about half in and held still. I felt full but comfortable, my guts awash in a deep warmth. His cock seemed to radiate an exotic animal heat that felt almost magical. He slid out to the tip, paused, then pressed in again, going a little further this time. He held in place for another long moment before sliding back out. He did that several times: push in a bit further than before and hold in place for a long moment before pulling back. If his plan was to let me adapt to the intrusion bit by bit, adjusting to his size each time he paused, then to my amazement it worked -- it not only didn't hurt back there, but it felt lush and deeply satisfying. He continued going deeper and deeper until nearly his entire length was buried in me. He held for a long time, letting me feel his length, his girth, how firm he was, his glowing heat. \n\nI couldn't believe I had a dick up my ass and it felt so wonderful. He began stroking, slow but firm. Out to the tip, in to within an inch of bottoming out. He picked up a little speed with each push, settling into a nice medium tempo, emphasizing the length and friction of the thrust over its power. It was sensual like regular fucking, but different. There's no clit back there, of course, but what I've read since is, there are millions of extremely sensitive nerves. Every one of them seemed happy to have his cock slide against it. On top of that, I felt an extra buzz from doing something that had always been so 'naughty,' so taboo -- didn't expect that!\n\nClearly the pain I expected wasn't going to happen. I pulled my ankles away from his shoulder and spread my knees, allowing his final inch into me. He picked up a little speed, drizzling more sunscreen on his cock every so often to keep everything nice and slick. Now that he was fully 'in,' there was no more need for gentleness, and he fucked me hard, slapping his thighs against my butt. I was amazed how good it felt, and it got even better when I began to stroke with him, meeting each of his thrusts, pulling back when he did. My clit may not have been getting any direct stimulation, but something was going on down there, and whatever it was felt freaking amazing. \n\nBefore that afternoon, if you had told me that I would not only tolerate being butt-fucked, but enjoy it, I would have laughed in your face. There we were, though, his dick, my ass, his length, his thickness, my depth, my smile -- unbelievable.\n\nHis breathing began to change -- he was about to cum. He thrust a little faster and pressed in a little harder. He moaned that he was cumming, and vibrated a finger across my clit. To my complete amazement, every muscle in my body pulled itself rigid in sexual ecstasy, every nerve in my body howled in pleasure; in other words, I came with him. I never knew it was possible to cum from anything anal. And I never knew I could cum four times! He groaned deeply; his jizz made my channel a little slicker, making his last few strokes smoother. His dick had to be ecstatic at how tight my ass was. I groaned deeply with him; he had done everything so well back there my ass was in heaven.\n\nHe slowed, and I gave him a body hug by crossing my ankles around his lower back. He kissed my lips, for the first time I realized. I kissed him back, but I wondered what it meant to him. Did it signal that his conquest was complete, another notch in his belt buckle, time to move on to the next target? Or was it a message from the painfully shy, inarticulate guy that Chris described, daring to express feelings that I had been oblivious to? Did he see this as a starting point, or was he just another guy who got his willie wet and would now focus on his next conquest?\n\nI also wondered what it meant to me. On one hand, he had quite crassly used my body for his own satisfaction without much regard for my feelings. I should resent that -- deeply. On the other hand, what he did to me was freaking amazing. He introduced me to several sensations I didn't know existed, and left me with an almost overwhelming afterglow. What should I do -- continue to dismiss him as someone who didn't particularly matter, or begin to look at him differently, consider parlaying the killer sex into something deeper?\n\nAll that noise was my inner voice reawakening, and I told it to shut up. I would sort all that out later. All I wanted to do at that moment was bask in the double satisfaction I felt. First, I took everything he gave me without violating Chris's rule. She may have won the bet about his intentions, but not blocking him was a major battle in that war and I won it -- take that, Anti-Chris! And second, in one afternoon I enjoyed doggie, enjoyed butt sex, and came a mind-blowing four times, all for the first time.\n\nWhile all those thoughts pinballed around in my head, his cock, still in my ass, slowly deflated, shrinking back to its normal at-rest size. He rested his head on my shoulder, his erection fading until his cock finally slipped out of my butt. His cum leaked out and dribbled down my crack.\n\nAlthough I was so worn out I could barely focus my eyes, I noticed the drapes on the bedroom window rustle. I wondered how long the Anti-Chris had been watching -- probably the whole time, the pervert! I'm sure she was celebrating her victory with a huge grin on her face, and I predict I'll be hearing about this for a long time. When Brandon was looking the other way, I stuck out my tongue and flipped her the bird, which she told me later made her laugh. \n\nBrandon stood, leaving my body disarrayed in a post-multi-orgasmic puddle on the deck chair. He pulled his clothes on, humming a simple, happy melody, but saying nothing. I heard him set something on the table, which I discovered later was an envelope containing my fee for the tutoring. \"Best lesson ever, Ashley.\"\n\nStanding over me, he leaned down, squeezed my tit, patted my racing stripe, and kissed my forehead. \"Same time next week?\"\n\n: : : : : "
    ],
    "authorname": "TexRiffraff",
    "tags": [
        "italian food",
        "anti-chris",
        "tutor",
        "student",
        "doorbell",
        "deck chair",
        "sunscreen",
        "cancun",
        "bikini",
        "finger-fuck"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/horny-student-extreme-bet"
}
{
    "title": "Her Last Affair",
    "pages": [
        "\"Oh, God!\" he moaned as she took his penis into her mouth. Her tongue softly caressed his hard rod. She gave him head with a herky-jerky motion that caused him to gasp and groan.\n\nThe eighteen-year-old moaned again and said, \"Ohhh! Mrs. B! That feels wonderful!\"\n\nThe older woman pulled off him, chuckled, and said, \"Don't you think, considering that we're naked and having sex, we should be on a first-name basis? My name is Agnes. My friends call me Nes.\" Her hand lightly stroked his cock.\n\n\"My friends call me Tommy.\"\n\n\"Hi, Tommy,\" Agnes said as she looked him in the eyes and casually squeezed his dick. She saw his face turn red and contort. His eyes opened wide, and he cried out, \"Oh. Oh! Sorry!\"\n\nHis dick exploded and he shot his load all over her face. Rope after rope of hot, sticky cum landed on Agnes' face. His face turned a darker red color, and he apologized profusely, speaking quickly.\n\n\"I'm sorry. I'm so sorry. I didn't mean to do that. It just happened. I felt my balls boil and then... I didn't do it on purpose. No one has sucked or stroked my dick before.\" \n\nHe stared at her, hoping she'd accept his apology. Her face was a mess covered with his spunk. He fidgeted and squirmed, waiting for her reaction.\n\nShe tilted her head back, and let loose a loud, belly laugh. Tommy gave her a crooked, hopeful smile. She smiled, licked her lips, taking some of his sperm into her mouth, and said, \"It's okay. I've done this before. I know young men lack control. You'll last longer next time.\"\n\n\"There'll be a next time?\" he asked incredulously.\n\n\"Yes. I'm guessing in about five-ten minutes.\"\n\n^^^\n\n\"Hey Tommy, why the long face?\" Billie asked. \n\nShe was a slim, brown-eyed teen, and she was sitting on the steps leading to the front porch of her small house. The warm sun shined on her, making her long brown hair that was pulled back into a simple ponytail shine. A bright pink halter top hugged her modest chest.\n\nTommy was on the sidewalk. He went to his neighbor and former classmate and said, \"I went to a dozen places this morning looking for a job for the summer and no one is hiring.\"\n\n\"Times are tough,\" Billie said. \"After the factory shut down, half the shops on Main Street closed, and many people moved. Last night at dinner, my dad said he's never seen it so bad. Shady Grove Nursing Home is hiring. They're having a jobs fair this afternoon. I'm going. Why don't you come with me?\"\n\n\"What kind of jobs did they advertise?\"\n\n\"The ad I saw said they needed nurse's aids, food servers, dishwashers, and housekeepers.\"\n\n\"I don't know if I want to work with old people.\"\n\n\"Maybe you could get a job cutting grass,\" she offered. \n\n\"I'd like working outside, taking care of the grounds or painting would be okay. What time are you leaving?\"\n\n^^^\n\nThe teens went to Shady Grove Retirement Community. There were dozens of people there even though all of the jobs paid minimum wage. They listened to a presentation about the company and the different jobs and filled out applications.\n\nThe administrator interviewed Tommy and asked, \"What job interests you?\"\n\n\"I like working outside and with my hands. Do you need help with the grounds crew or maintenance?\"\n\n\"Since the factory closed, we were able to hire experienced, licensed plumbers and electricians for our maintenance department, and we have no openings in the grounds crew. I could offer you a job washing dishes. Does that appeal to you?\"\n\nTommy fidgeted. He couldn't hide his look of disappointment.\n\n\"I understand dishwashing is not exciting,\" the administrator said. He gave him an earnest look and said, \"I'd like you to consider a job as an aid. I think you're well suited for it. You're a personable guy. You'd be interacting with our residents, talking to them, and helping them.\"\n\nFrom the look on Tommy's face, the administrator knew he wasn't sold on the job. The executive chuckled and said, \"Are you worried that you'll spend your day changing diapers and wiping asses?\"\n\n\"Yeah.\"\n\n\"We provide many levels of care to match the needs of our residents. Our independents live autonomous lives, and come and go as they please. The opposite end of the spectrum are those who are seriously ill or in the final stage of dementia. These people require constant supervision and are the ones you're thinking about that wear diapers and need help showering.\n\n\"The first group needs no help and the second requires a lot. I'd never put a person as inexperienced as you with them.\"\n\nThe executive cleared his throat, leaned forward, and said, \"The position I have in mind for you is working with the people in between. They've moved here because they can no longer safely live on their own. They need some help. However, you won't be changing diapers or helping them use the toilet. At most, you may have to escort them to the bathroom. Some are unsteady, and others have trouble sitting or standing.\"\n\nHe leaned forward and said, \"I'll be frank with you. I could use you on my team. You're big and strong. Due to the medicines they take and their inability to exercise, many of our people are heavy. It is dangerous to have a one-hundred-twenty-pound woman assist a much heavier person to get out of bed, sit, or stand. We have lifts that we use for some, but many just require a little help. I'd feel better if you were assisting them. You could keep them safe if they lose their balance.\"\n\nThe administrator sat back and said, \"I saw you sitting and talking with a petite, young woman with a ponytail while you filled out your application.\"\"\n\n\"Yes. I came here with my neighbor, Billie Richardson. She lives next door to me and we went to school together since the fifth grade. She hopes to be a nurse someday and might end up working in a place like this.\"\n\n\"Working here would give her good experience. I've helped many employees get into good colleges by writing letters of recommendation.\"\n\n\"She would appreciate that.\"\n\n\"Many young women who are applying for the aid's job have skills equal to or better than Billie. If you accept the position of nurse's aid and give it a chance, try it for a week, I'll hire your friend instead of one of the other candidates. Do we have a deal?\"\n\nTommy thought, \"This isn't the kind of job I wanted, but I need the money. The whole way over here Billie chirped excitedly how this was the perfect place for her. That it would be a great experience and look good on her college application. It's not like I have other opportunities. I can do any job for a week, especially knowing I'm doing Billie a favor. She's always been nice to me.\"\n\n\"Yes, sir. We have a deal,\" Tommy said.\n\nThe man stood, smiled, and extended his hand. Tommy shook his hand, and the administrator said, \"I think you'll be great at the job and find that you'll enjoy our residents.\"\n\n^^^\n\nWhen they were outside, Billie jumped up and down excitedly and said, \"This is great! We both got jobs!\"\n\nHer enthusiasm made Tommy smile.\n\n\"Let's go get our uniforms,\" she said. \"I saw some cute ones at Walmart. They have them with cats and unicorns and cartoon characters.\"\n\n\"Great,\" he said with less passion. \"I hope they have plain ones too.\"\n\n^^^ \n\nTwo days later, Billie, Tommy, and the other new hires went through orientation. Billie wore pink pants and a top covered with pictures of tumbling kittens. Tommy wore scrubs too. His was a solid blue color that happened to match his eyes.\n\nThey got lockers and spent the day shadowing experienced employees, receiving training, and learning the job. \n\n^^^\n\nThe next day, Billie rode with Tommy to Shady Grove. He wore a dark blue uniform. Billie's was a light green color, and her top had images of various hard candies. \n\nShe said, \"This is so cool. We can carpool to work, we'll eat lunch together, and we work on the same ward.\"\n\n\"Yes. Thanks for telling me about the job fair. This isn't my dream job, but I need to earn money.\"\n\nThey went to their assigned ward and waited for the nurse. Two women walked over. The middle-aged one said, \"Hello, I'm the day nurse, Jean Addler. This is Beth Wilson, one of our wonderful aids.\"\n\nThe black, twenty-some-year-old woman smiled when her name was mentioned. Tommy and Billie introduced themselves. \n\nThe day nurse said, \"Our unit generally has around twenty residents. Currently, we have twenty-one. You will each be assigned seven residents, although you will work with everyone as the need arises. We know you're new to this. If you have any questions or situations arise, come to Beth or me.\n\n\"Please keep this in mind at all times. This place is the residents' home. We are visitors. If they want to wear sunglasses and a bathing suit, they can. If they want food, even though they just finished breakfast, give them a cookie or piece of fruit.\"\n\nThe nurse looked at Tommy and Billie, and continued, \"We have scheduled meals and events so we are organized. The schedules are optional for them. If they skip a meal, let me know. The only thing that is not optional is taking their prescribed medicines, but you don't have to worry about that since nurses dispense all medicines.\"\n\nMs. Addler smiled at them and asked, \"Got it?\" The teens nodded. The nurse said, \"Billie, Beth will introduce you to your people and give you their background. Tommy, come with me, and we'll say hello to your residents.\"\n\nThe first three women Tommy met were pleasant and preparing to go to breakfast. They were the grandmotherly type you'd expect to meet here. The nurse explained their conditions and needs. They all had had cancer, heart and respiratory disease, and vision and hearing problems. \n\nShe introduced him to Mr. Davos and Mrs. Edwards. They were large people with heart issues and in the early stage of dementia. \n\nWhen they left Mrs. Edwards's room, Ms. Addler said, \"Mr. Davos and Mrs. Edwards don't have the physical issues that the first three people we met do. They need our help due to their cognitive decline. They have no short-term memory, so be prepared to hear the same story and be asked the same question over and over. Don't let it frustrate you. \n\n\"When you interact with them, they may go off on a tangent and say 'You're not my aid', 'I just had lunch,' or 'I want to go home' over and over again. When that happens, you can leave and check on them later or another technique is to distract them so you can do what you need to do. Hand them a book, photo album, or a stuffed animal, or ask them if they like dogs better than cats. Usually, questions or a distraction is enough to reboot their brain.\n\n\"Now, I'll introduce you to Mrs. McCarthy. Her mood ranges from grumpy to mean. She's lost her husband and only child. She has arthritis, and is in constant pain. She will complain and curse. Don't take it personally. Be pleasant; do your job.\"\n\nThey entered the room. Nurse Addler said brightly, \"Good morning, Mrs. McCarthy!\"\n\n\"What's good about it?\" the old lady groused. She, like everyone else Tommy had met, had gray hair, glasses, and hearing aids. She also was fat in the same shapeless, blob-like way: fat face, swollen belly, and a big butt.,\n\nThe nurse ignored the old woman's gripe and said, \"This is Tommy. A new aid.\"\n\nThe old biddy eyed Tommy and said, \"I've outlived my husband and child. I have no family in this world. When my time comes, and I hope it's today, don't try to save me!\"\n\n\"Mrs. McCarthy, that's a bit much to lay on this nice young man at your first meeting,\" the nurse said casually.\n\nThe old crone raised a hand with crooked fingers, pointed it at him, and said, \"I mean it! I'm ready to die.\"\n\nTommy stood there and looked at her. The nurse tapped him on the arm and led him from the room. In the hall, she said, \"I hope she didn't upset you. She's depressed and in pain. She does have a DNR, a 'Do Not Resuscitate' order in place. You cannot fix her. No one can. Check on her periodically, bring her meals, and do what you can to make her comfortable.\"\n\nThe nurse sighed and added, \"If I was in her situation, I too, would look at death as a blessing.\"\n\nThey took a couple of steps, and the nurse said, \"One thing you may have noticed about your patients is that they are all large. We thought you were a better match for them than Beth and Billie. Unfortunately, you did get stuck with many of the difficult ones. To make it up to you, we've assigned you Mrs. Brenner.\n\n\"She's a lovely woman with a cheery disposition. She has Parkinson's.\"\n\nTommy stared blankly at the nurse. Ms. Addler took that to mean he didn't know about the disease.\n\nShe said, \"Parkinson is a long-term, degenerative disorder of the central nervous system that mainly affects the motor system. It can start with a slight tremor in one hand and progress to the point that the patient is unable to walk. Muscles become stiff, limiting the range of movement. People with this disease stoop, move slowly, have balance issues, and, eventually, need a wheelchair or are bedridden.\"\n\nShe paused. Tommy nodded, indicating that he understood. The nurse continued, \"Her brain is not affected. She has her memories, intelligence, and sense of humor. Our major concern is her balance. Parkinson's patients are prone to falling and injuring themselves.\"\n\n\"Got it,\" Tommy said.\n\nThey entered the room, and introductions were made. \"Hello, Tommy.\" Mrs. Brenner said in a soft voice. \"It's a pleasure to meet you.\" \n\nThe slim, elegant, attractive woman turned toward him and smiled, showing him a mouthful of bright white crowns. She had on an ankle-length, lightweight, lounging gown. It was pink and contrasted nicely with her pale skin and silver hair. It had a V-neck and a floral lace bodice that showed her cleavage. The top was see-through, especially, where there was no lace. One nipple was visible.\n\nThe nurse took it in stride. Tommy stared. Mrs. Brenner appeared to be calm and comfortable in her racy frock.\n\n\"So you're my new aid. I guess I'll see you morning, noon, and night,\" Mrs. Brenner said with a light laugh.\n\nTommy blushed. \n\nThe nurse laughed and said, \"I told you she had a sense of humor. She knows we work rotating shifts and will sometimes be here during the day, in the evening, and at night. \n\n\"Anything we can do for you?\" Ms. Addler asked.\n\n\"Yes. Could the big, strong young man escort me to breakfast?\" Mrs. Brenner asked.\n\n\"Yes. Would you like a robe? It can be cool in the dining room.\"\n\n\"It is on the hook on the back of the bathroom door.\"\n\nMs. Addler fetched it, draped it around her shoulders, and buttoned up the front, so her charge's bosom was covered. She turned to the new aid and said, \"Tommy, help her stand and give her your arm to hold on to. If she is unsteady, you may need to put your arm around her waist.\"\n\nTommy nodded and used his training to safely assist Mrs. Brenner to stand. It wasn't difficult. She was a slim woman as light as a feather.\n\nThey took a few lethargic steps. She swayed. Tommy caught her. \n\n\"Thank you,\" she said. \"Perhaps your arm around my waist is required. I hope it won't upset your girlfriend.\"\n\nHe put his arm around her waist and said, \"I don't have a girlfriend.\"\n\n\"A handsome young man like you? I will help you get one.\"\n\nTommy escorted her to the dining room. She had to pause and lurched during the journey. He safely got her to her destination, took her order, and brought out her food.\n\nBeth, Billie, and Tommy brought most of the residents to the dining room. A few preferred to eat in their rooms. After breakfast, some residents stayed and chatted, others went to activities or returned to their rooms. \n\nTommy worked with all the overweight people, getting them in and out of chairs safely and taking them to their rooms and activities. Each encounter usually involved a conversation. The morning passed quickly. \n\nAt eleven o'clock, the nurse said, \"Billie, Tommy, you did well this morning. Go to lunch, and when you get back it'll be time for the residents to have their lunch.\"\n\nTommy and Billie retrieved the lunches they'd brought from home from their lockers and sat outside at a table the staff used for breaks and meals. Tommy bit into his peanut butter sandwich. Billie pulled out her sandwich, chips, and a banana, and asked, \"How's it going?\"\n\n\"Fine.\" The peanut butter stuck to the roof of his mouth.\n\n\"I like my people. The ladies remind me of my grandmother. Mr. Harrison is a bit of a problem. He's handsy. He patted me on the butt twice and touched my boob.\"\n\n\"Did you tell him to knock it off?\"\n\n\"Yes, but he doesn't understand why I objected or chastised him. I talked to Ms. Addler. She said it's part of his dementia. There is something wrong with his brain, and that he and other residents with dementia will do or say inappropriate things. She said they can't help it and gave me a couple of strategies to prevent it and to deal with it because, unfortunately, it will happen.\"\n\n\"That's too bad. I got into an argument with Mr. Davos this morning. He has Alzheimer's, and no amount of logic or reasoning swayed him that it wasn't time for dinner. This was thirty minutes after he ate breakfast! He became insistent, agitated, and upset. \n\n\"I talked to Beth about it,\" Tommy said, \"and she said the key to interacting with dementia patients is to stay calm and redirect or distract them. She says you need to change their focus.\"\n\n\"So no one has groped you yet?\" Billie teased.\n\n\"No, but I had an uncomfortable encounter with Mrs. Brenner. When Nurse Addler introduced us, Mrs. Brenner had on a sleeping gown. The top was sheer. They acted like nothing was odd about the fact that I could see her boobs and a nipple through the gauzy material.\"\n\n\"I think old folks aren't as shy or inhibited as we are,\" Billie said. \"During my last visit at my grandparent's, I knocked on their door one morning, and Nana said, 'Come in'. I opened the door and Pops only had his boxers on and my grandmother was standing there in her bra and panties and said, \"What do you want, Love?\" I blushed, averted my eyes, and back out of the room. They just laughed.\"\n\nTommy shook his head and said, \"I guess you're right.\"\n\n\"Who's your favorite?\" Billie asked, and she took another bite of her sandwich.\n\n\"Mrs. Brenner. And not because I saw her boobs. She has Parkinson and her body is letting her down, but she isn't letting it get her down. She's witty, fun, and kind. Who's your favorite?\"\n\n\"I like all the ladies. Mrs. George is a hoot.\"\n\n\"She's the one who's stacked, right?\"\n\n\"Trust a guy to go there!\" Billie teased. \"It's all about big boobs and big butts, isn't it?\n\n\"Ah. Ah. Ah,\" he stammered while his face turned red. \n\n\"I'm teasing you. She does have great breasts.\" Billie said casually. \"They're firm and sit high on her chest.\"\n\nTommy raised his eyes from the lunch table and looked at his friend. She had given an unusual description of a seventy-something-year-old woman. The other old woman had droopy breasts.\n\nShe said, \"Are you wondering what her secret is? How come her breasts don't sag down to her belly button like the other old women here?\"\n\n\"Well...\"\n\n\"Cancer. She's had breast cancer,\" Billie explained, \" and had a double mastectomy.\" As she said the words her right hand banged into her left boob, mimicking a chopping motion.\n\n\"And you know all this because...\"\n\n\"The ladies treat me like their granddaughter. I help them undress and dress. I select their jewelry, brush their hair, and put on their makeup. I saw Mrs. George's boobs. As I said, they look great. They're bigger, rounder, and perkier than mine. Hers are different in another aspect. She has no areolas. I asked her, 'Mrs. G, how come you don't have any nipples?'\"\n\n\"You didn't?\" Tommy said, sounding shocked.\n\n\"I did,\" and she answered and giggled. \"She said, 'I had cancer, and both breasts were removed. Then I had reconstruction surgery and got these nice fake boobs. The doctors said I could get tattoos that look like nipples, and I never got around to doing it.'\"",
        "\"Huh,\" Tommy grunted. \n\nHe ate his apple, and she ate her banana. Two young guys who worked in the kitchen pointed at Billie, whispered, and laughed. They got up and left, snickering and chuckling as they walked past Billie.\n\nWhen they were gone, Billie asked, \"What's their problem?\"\n\n\"You're eating a banana.\"\n\n\"So?\"\n\n\"YOU'RE EATING A BANANA.\"\n\nShe frowned and gave him a confused look. He said, \"What does a banana look like?\"\n\nThe young woman held up the large, curved, yellow fruit and turned it about. Her brow furrowed as she studied it, and she said, \"It looks like a banana.\"\n\n\"It looks like an erect penis, and when guys see a woman eating a banana, a hot dog, popsicle, or anything resembling a penis...\"\n\n\"Oh! Gross,\" Billie said. She pulled the half-eaten banana away from her mouth and said, \"I like bananas, and now you've ruined them for me.\"\n\n\"I wasn't the one giggling and pointing.\"\n\nShe shoved the fruit into her lunch bag and said, \"First, Mr. Harrison gropes me and then this. Are all men bastards?\" She didn't wait for a response. She got up from the table.\n\n^^^\n\nFriday morning, the administrator stopped by the ward and asked Tommy, \"Are you quitting?\"\n\n\"Would you fire Billie if I did?\"\n\n\"No. A deal's a deal.\"\n\n\"I'm not quitting. I like the job. I feel I'm doing something good.\"\n\n\"You are,\" the executive gave Tommy a friendly slap on the back and walked away.\n\n^^^ \n\nFriday night, after their shift was over, Beth said to Tommy and Billie, \"Why don't you come to my place. We'll have a beer, you can meet my boyfriend, and we'll unwind.\"\n\nBillie looked at Tommy. He nodded. She said to Beth, \"Sure. Sounds great.\"\n\nThey followed her car, parked, and went into her apartment. A big, dark man rose from the couch and said, \"Hey, babe.\" He embraced Beth and kissed her passionately.\n\nBeth squealed and kissed him back. When she pulled away, she made introductions. \"Tommy and Billie. This is my man, Alex. He works at Shady Grove in the laundry.\" \n\nAlex was a gregarious guy who was ten years older than Beth. He immediately made Tommy and Billie feel comfortable.\n\nBeth put some music on, Tommy and Billie sat on the sofa, and Alex went to the kitchen and got three more beers. Alex raised his bottle and said, \"To new friends!\" Beth clink her glass bottle against his and said, \"To love!\" Tommy bumped bottles and said, \"To earning a paycheck.\" \n\nEveryone looked at Billie, she clinked her bottle against the others, and said, \"To all of the above.\"\n\nThey drank and talked. Alex asked how the new job was going. Tommy said, \"Fine.\" Billie gave a long answer about how she likes her women, saying they were like dolls. \n\n\"I'm serious,\" she said. \"I dress them up every day like I did my dolls when I was little.\" Everyone laughed.\n\n\"How are you getting along with Mr. Harrison?\" Beth teased.\n\n\"He's a lech!\" Billie said. \n\nThe others laughed. Everyone knew he touched the female staff. \n\nBillie frowned and said, \"No. That's unfair. How can I accuse him of bad behavior when I know it's not him, but the disease? He has good days and bad days, and I have good days and bad days.\" She shrugged her shoulders and drank.\n\nBeth nodded, knowingly, and said, \"He's put his hands on me too. I don't know of a woman who's worked with him that he hasn't touched.\"\n\nShe got up, went to the bedroom, and changed into jeans and a tank top. Tommy and Billie noticed her big breasts swaying when she returned. He wondered if she'd ditched her bra. Billie knew that she had and was envious of her large breasts.\n\nAlex noticed his girlfriend was braless and smiled at her. He noticed that Tommy noticed and gave him a wink. \n\nBeth saw all this, stopped, and addressed the group, \"Yes. I took my bra off. Bras are uncomfortable. They pinch; the wires pop out and stab me. The straps dig into my shoulders. The best part of my day is when I come home and take off my bra. I always go, \"Ahhhh!\" Don't you agree, Billie?\"\n\n\"Ah. Well...actually. Mine don't bother me. My boobs are smaller than yours, and I don't need underwire bras. I have lots of friends who feel the same way as you do though,\" she said, supporting her.\n\nBeth smiled and said, \"Why don't you guys stay for dinner? We can order pizza.\"\n\nTommy looked at Billie. She nodded and said, \"Sounds good. I need to call my dad, so he won't worry about me. My mother died three years ago, and it's just the two of us.\"\n\nAlex ordered the pizza. Billie called her father. Then, she went to the bathroom. When she returned to the family room, she swung her bra in the air above her head and shouted, \"Girl Power. Solidarity for women!!\"\n\nEveryone laughed. Tommy checked out her chest and saw the imprint Billie's hard nipples put in the polyester/cotton blend top. Her smaller, firmer breasts didn't wobble as noticeably as Beth's fine pair did.\n\nBillie stuffed her bra in her pocketbook. She and Beth finished their second beers. Beth asked, \"Do you want another? Two beers give me a nice buzz and make me happy. Three make me rowdy.\"\n\n\"Let's get rowdy!\" Billie said. The girls went into the kitchen and got another beer. \n\nAlex turned up the music, and the gang danced until their dinner was delivered. Beth and Alex moved in a way that made Tommy think they had a high-quality, synthetic oil in their joints. Why else could their hips move so rhythmically and so much smoother than he or Billie?\n\nThere were smiles all around as Beth danced with Alex and Tommy danced with Billie. They changed partners. Tommy loved it when Beth shook her braless chest at him. He saw her soft flesh quiver, jiggle, and bounce.\n\nTommy looked surprised when the black woman turned around and put her butt against his hips and shimmed her ass. She looked over her shoulder, smiled, and said, \"Bend your legs, keep your hips on me, and rub up against my butt.\"\n\nShe pressed her ass against him, moved it around as they danced. As she raised and lowered her hips, he bent his knees and stayed in contact with her. He got an erection, and she didn't stop grinding on him.\n\nAlex and Beth were the better dancers, so Billie copied her moves. She danced with her hands in the air and shook her little tatas for Alex. He smiled, spun her around, and lowered his hips to her butt. He placed his hands on her hip bones as he rubbed his groin against her rear end. \n\nHer mouth flew open, and he whispered in her ear, \"Are you okay with this? Or is it too much?\" Before she answered, he added, \"We're aren't doing anything my girlfriend and your boyfriend aren't doing.\"\n\nShe was about to say 'Tommy is not my boyfriend' when Alex pushed his erect cock into her butt, and she thought, \"Wow! That's a big dick!\" and she unconsciously pushed her ass into his crotch.\n\nThe couples did some dirty dancing until that song was over. \n\n\"Thanks for the dance,\" Alex said to Billie when the song ended. He kissed her chastely on the cheek, escorted her to Tommy, and said in a teasing tone, \"Can I have my girlfriend back? Or is it too late.\"\n\nBeth laughed and said, \"You know I love you, Alex, but I do like to dance.\" She took her boyfriend's outstretched hand and went to him. \n\nAlex gave Tommy Billie's hand and said, \"This is a fine woman. Don't do anything stupid and break her heart.\"\n\n\"I promise,\" Tommy said and he winked at Billie. \n\nThe doorbell rang. Alex answered the door, paid the delivery guy, and shouted, \"Dinner time.\"\n\nThey ate, drank, and talked, and they danced more. This time they stayed with their original partners. Tommy slow-danced with Billie and said, \"They think we're a couple. I hope I didn't upset you when I didn't set them straight.\"\n\n\"No problem. They're in love, and I think they want everyone to be as happy as they are.\"\n\nTommy and Billie looked at their hosts. He said, \"They do look happy.\" Beth and Alex were kissing. She had her hand on the front of his pants. His hand groped her ass. \n\n\"I think it's time for us to go,\" Billie said and chuckled. \"They may forget we're here and do it on the sofa.\"\n\n\"Guys,\" Tommy said in a loud voice. \"Thanks for having us over. Alex, it was nice to meet you. We need to leave.\"\n\nBeth and Alex stopped kissing and attended to their guests.\n\nAs they walked to the car, Billie giggled and asked, \"What do you think? Are they naked and doing it yet?\"\n\n\"Absolutely!\n\n^^^\n\nWhen Tommy parked in front of his house, Billie said, \"I heard the administrator talking to you today. What did you mean when you asked 'Will you fire Billie?'\"\n\nTommy grimaced, looked at his friend, and told her the truth. \n\n\"You took this job so I'd get hired?\"\n\n\"Yes.\"\n\nTears sprang from her eyes as she said, \"That's the nicest thing anyone has done for me!\" She leaned over and hugged him. She clutched him so long that he felt obligated to put an arm around her. \n\nShe pulled away, studied his face, and looked deeply into his eyes. She leaned in to kiss him, and he pulled back. She looked surprised and embarrassed, and she swiftly got out of the car and ran to her house.\n\n^^^ \n\nTommy stood naked with his feet spread wide. He looked down at Billie, kneeling at his feet. Her sweaty, naked body glistened in the moonlight. It was a warm summer's night, and they were in the woods behind their houses.\n\nHer white, untanned ass and tits glowed and struck a sharp contrast with her lithe, tanned body. Her brown eyes smoldered; she smiled as she stroked his long, hard, curved cock. When she licked her lips, his dick ached.\n\nShe pounced and took his cock into her mouth.\n\n\"Ohhhh!\" he cried out. Nothing had ever felt so good!\n\nShe bobbed and sucked and gave him such pleasure that his dick exploded. She continued to stroke and suck and swallowed every drop of cum while he gasped, squirmed, and moaned.\n\n\"I love you, Tommy Boyle,\" she said breathlessly when he finished.\n\nTommy woke from his wet dream. His underwear was soaked with semen. He hurried to the bathroom to shave, shower, and wash his Boxer-briefs. He dressed in his uniform, ate breakfast, and sat in his car waiting for Billie.\n\nToday, Billie wore lavender pants and a top with images of cakes. \"Hello,\" she said in a brusque manner as she sat in the front seat. Her tone was no-nonsense and didn't invite a response or conversation.\n\nHe fidgeted, stared wide-eyed, and wondered, \"Does she know? You idiot! How could she know you had an erotic dream involving her? It was a figment of your unconscious. Just a stupid dream.\"\n\n\"Are you okay?\" she asked when he didn't start the car.\n\n\"Yeah. You look nice today.\"\n\n\"Humph,\" she grunted and looked straight ahead.\n\nHe started the car and drove. They didn't speak for the rest of the ride.\n\nThey exited the car, put their lunches in their lockers, went upstairs to their ward. Tommy hurriedly checked on everyone and got three to the dining room. He brought meals to another three.\n\nHe knocked on Mrs. Brenner's door. She called out, \"Come in.\" \n\nHe entered the room. She was sitting at her makeup table, brushing her hair. She had on a high collar, gold-colored sleeping garment that Tommy would classify as lingerie. It was opaque from the waist down and transparent from the waist up. He could see sagging breasts and hard-tipped, downward-facing nipples in the large mirror on her table.\n\nShe smiled, appearing blithely unaware that her boobs were visible, and said, \"Good morning, Tommy. How was your weekend?\"\n\n\"Terrible.\"\n\nShe turned to him, and he got a direct view of her droopy breasts. He forced his eyes to look up at her face, and he said, \"I know we're not friends, but I desperately need help. You once said that you'd help me get a girlfriend. Did you mean it?\"\n\n\"Yes. I did. And I think friends would be an accurate term to describe our relationship. What's the matter?\"\n\n\"May I sit?\"\n\n\"Yes. Sit on the bed. I lack chairs.\"\n\nHe sat across from her and said, \"There's this girl I like, and I'm afraid that I messed things up.\"\n\nThe old woman smiled and asked, \"Would this young woman have long brown hair and lovely brown eyes?\"\n\n\"How did you know?\"\n\n\"You silly goose. We're talking about Billie, aren't we?\" He nodded. She said, \"I knew it. I've seen the way she looks at you. So you've finally noticed her!\" \n\n\"I've known her for years. She lives next to me. We've gone to school together for eight years. She's always been a pal. I've never thought of her as something more.\"\n\n\"Until...\"\n\n\"Until Friday night. We were out with friends, having fun and dancing. And...It was like I saw her in a different light. She was fun, pretty, and sexy. We had a moment. She leaned in. I'm sure she was going to kiss me, and I messed it up.\"\n\n\"What did you do?\"\n\n\"I got scared and pulled away. You see, I've never kissed a girl. I was afraid that I'd mess it up and never have a chance with her again.\"\n\n\"What did she do?\"\n\n\"We were parked in front of my house. She got out of the car and ran into her house. I hid from her all weekend. I didn't know what to say or do. I was hoping you would help me.\"\n\n\"What do you want me to do?\"\n\n\"I need advice on how to handle the situation, and I could use some pointers on how to kiss.\"\n\nShe smiled and said, \"The first kiss is crucial. It can make or break a relationship.\"\n\n\"I knew it! I'm unprepared. Can you school me?\"\n\n\"Yes, but I need your word that no one can know about this. Ever. And that you will do exactly as I say.\"\n\n\"Absolutely. I promise,\" he said earnestly.\n\n\"I don't want to rush this or stop and start because you have work to do. Can you come back at midnight? The residents are asleep, and there's only a skeleton crew of staff present. We'd be less likely to be interrupted.\"\n\n\"I can. Thank you.\"\n\nMrs. Brenner brought a finger to her lips and appeared deep in thought. She said, \"Have you had a good conversation with Billie since the non-kiss?\"\n\n\"No. We barely spoke this morning on the way to work.\"\n\n\"I'm sure she's playing the scene over and over in her head, getting more confused and angry each time. We can't let this fester. Can you pull her aside this morning or talk to her at lunch?\"\n\nHe nodded.\n\n\"You need to tell her that the reason you didn't kiss her. That you were scared. Tell her the problem is with you, that you're inexperienced, and it had nothing to do with her or how she looks. Tell her she's beautiful, and beg her for a second chance. Ask her to go to dinner with you on Wednesday night.\"\n\n\"Okay.\"\n\n^^^\n\nTommy left her room and went to work. He was busy all morning and didn't get a chance to speak to Billie until lunch. \n\nHe sat at her table. She was quiet and sullen, and her eyes were downcast. He said, \"Billie, I like you. I enjoyed being with you Friday night. For a moment, I thought we might kiss.\" \n\nBillie looked up from the table.\n\n\"I've never had a girlfriend. I've never kissed a girl. I don't know how. I was afraid that I'd do something wrong. That's why I bailed. I want our first kiss to be memorable. In a good way.\"\n\nShe was smiling when he finished speaking and said, \"I thought something was wrong with me. That you didn't find me attractive or I had bad breath or B.O.\"\n\n\"No. No. No. You're beautiful, and I'm a fool. Please give me a second chance. Go to dinner with me on Wednesday.\"\n\n\"Okay!\"\n\n^^^\n\nThe afternoon passed quickly. When the workday ended, Tommy and Billie had a pleasant ride home and talked as old friends.\n\nTommy killed time at home. He was anxious to return to Shady Grove. He got there early and sat in his car in the parking lot. Near twelve o'clock, he went inside and to Mrs. Brenner's room. He knocked on her door precisely at midnight.\n\n\"Come in,\" Mrs. Brenner sang out in a cheery tone.\n\nHe entered her room and saw her sitting at her makeup table facing the door. Her hair was perfectly coiffed. She had on lipstick, makeup, and a dangerous low-cut, see-through gown that would meet everyone's definition of sexy lingerie. \n\n\"Did anyone see you come to my room?\"\n\n\"No. I saw Charlie downstairs, but no one saw me enter the ward or your room.\"\n\n\"Good. Lock the door and sit on the bed,\" she said. He did. \"Are you serious about this? Do you want to know how to properly kiss Billie?\"\n\n\"Yes. I did as you said and talked to her at lunch. I cleared things up and apologized, and I have a dinner date with her on Wednesday.\"\n\n\"That's good. That gives us time.\" She sat beside him on the bed and asked, \"What if she wants more than a kiss? Or you want more? Are you going to come running back to me and ask 'How to woo a woman? How do you caress a woman? Touch her breasts? Touch her sex? How to make love and leave her satisfied?'\"\n\n\"Well...\"\n\n\"The prudent thing to do would be to cover those topics. We could if we get together tomorrow night as well.\"\n\n\"Thank you. That would be great.\"\n\nShe leaned in and placed her wrinkled face near his face. He felt her warm breath hit his cheek as she said, \"I believe in a hands-on approach. I'm a proponent of the 'learn-by-doing' philosophy. Is that okay? Do you find the thought of kissing me revolting?\"\n\n\"No. I'm good with it. I appreciate you helping me.\"\n\n\"I have Parkinson's. I have uncontrollable muscle tremors. They don't hurt. If you see or feel me shaking, you can ignore them.\"\n\n\"Okay.\"\n\nHe stared into her eyes and saw a playful twinkle as she came closer. She stared into his frightened eyes as their lips met and she kissed him. She closed her eyes. He closed his and focused on the warm softness of her lips. The light suction. He tried his best to mimic her actions. He didn't do well, at first. \n\nShe pulled back an inch, stared into his eyes, and whispered, \"Kissing someone you like is exciting and intense. It can be scary and nerve-wracking if you haven't done it before. Go slow. Be tender and gentle. You'll eventually find your groove.\"\n\nShe crawled to the middle of the bed and laid down. She gestured for him to join her. She kissed him, and they laid together necking for twenty minutes. She moaned and occasionally murmured compliments and suggestions. \n\n\"Nice.\" \"Softer.\" \"Very good.\" \"Hold my face.\" \"Run your fingers through my hair.\" \"Hold me and pull me close.\"\n\nTommy was surprised when he got an erection. The old lady chuckled; her sex was warming. She said to herself, \"Ha! After all these years! I'd thought my vagina was a dried-up, useless, piece of flesh.\"\n\nShe pulled back and said, \"That was nice. Gentle. Unhurried. Now do what I do.\"\n\nHe nodded. She kissed his lips as before. She brushed the tip of her tongue against his lips and parted them. Then, she resumed a normal kiss.\n\nShe tapped him on the shoulder. He took that as a signal it was his turn. He kissed her softly, brushed his tongue tentatively against the lips, pushed them apart, and returned to a normal kiss. He liked giving and receiving this variation.\n\nShe took the lead, and French kissed him, bringing her tongue inside his mouth and caressing his tongue. He copied her action. They repeated it three times.\n\n\"That's called a French kiss,\" she said. \" After you've kissed the regular way, you can try it. Be tender and gentle. Touch their lip with your tongue and part them, so you can slide your tongue in their mouth. If they don't open for you, bring your tongue back. They might not be ready for something this intimate. If they allow your tongue into their mouth, gently swirl it around. You can also suck on their tongue and lips.\n\n\"Take your shirt off and let's try it,\" she said.\n\nHe pulled his shirt over his head. She smiled seeing his fit, firm, young body, and they kissed. They took turns, having their tongues explored the other's mouth. It raised their pleasure and their intimacy to a new level. She enjoyed her hands on his bare skin.\n\n\"That was wonderful,\" she said and sighed. \"I love gentle smooches with soft lips and the slight caress of a tongue.\"\n\n\"I had my tongue deep in your mouth,\" he asked, sounding concerned. \"Was it too much? Did I do it wrong?\"",
        "She chuckled softly and said, \"No, dear you didn't do anything wrong. I wanted you to experience the full range. Billie may like more or less tongue than me.\"\n\n\"How do I know what she likes?\"\n\n\"You try things and read her reactions. If she likes it, you'll know. The reason I emphasized going slow and being gentle is that if she doesn't like something, you have time to correct your course before you upset her. She'll appreciate you being considerate and respectful.\n\n\"Kisses are not only for lips, and soft caresses can intensify the pleasure of kissing. Copy what I do,\" she said. She held his face and kissed his mouth. She kissed his neck, collarbone, and earlobe while running her hands through his hair. She touched his left nipple while kissing the right one. \n\n\"Your turn,\" she whispered.\n\nHe held her face, looked into her eyes, and kissed her lips. He gently massaged her scalp as he kissed her neck, collarbone, earlobe, and her lips. \n\n\"What about my breasts?\" she asked.\n\n\"Ah. Ah. I was afraid that you'd get angry at me. You offered to teach me how to kiss. I didn't want to upset you by taking liberties.\"\n\n\"First, we agreed that we'd cover more than kissing. I will show you how to make love to a woman. Second, you agreed to do whatever I asked. And third, women like to be touched. It's a matter of when, how, and by whom,\" she said in a kind, calm manner.\n\n\"When Mr. Harrison gropes a female aid, his touch is never welcomed, but when a woman is alone with someone she likes, and he's gentle and respectful, it brings a woman great pleasure. Touch my breasts. Kiss my nipple. See what they feel like.\"\n\nHe tentatively touched a saggy tit. \n\n\"Wow! It's warm and soft.\" He lifted the droopy skin bag, smiled, and said, \"It's very soft, surprisingly heavy.\" He thumbed her nipple and grinned.\n\nShe placed her hand on his and said, \"Be very gentle when you touch a woman. Touch her as you would want your scrotum handled.\"\n\n\"Oh! Okay. I'll be very careful!\"\n\n\"Kiss and caress my boobs; suck on them,\" she instructed him and lay flat on her back and opened the top of her gown, baring her breasts and giving him complete access.\n\nHe peppered her chest with kisses. He touched her breasts as he would a rare and fragile object. He sucked on her nipples, liking the feel of the rubber objects in this mouth. She moaned, put her arm on his neck, and pulled his head to her bosom.\n\nHis hip was on her thigh. She felt his hardness and marvel at the pleasure that surged through her body. She felt young and desired. Her sex became wet.\n\n\"Oh. That was nice. You made me feel young and desired.\" She guffawed and added, \"You made my sex wet.\"\n\n\"What?\" \n\n\"You'll understand in time. Take your clothes off.\"\n\nHe hesitated; got off the bed, turned away, and undressed. He slowly turned and faced her. His cock was fully hard. It had a slight upward curve. The size and shape of his unit reminded her of a ripe banana.\n\nShe slid off the bed, removed her gown, and knelt naked in from off him. Her head was even with his cock. He looked down on her, watching her intently. She grabbed his dick, stroked it, and said, \"Very nice.\" \n\nShe enveloped it with her mouth.\n\n\"Oh, God!\" he moaned.\n\nHer tongue licked and caressed his cock. The tongue action reminded him of what she did when they French kissed. He closed his eyes and tilted his head back, and groaned, \"Ooohhh.\"\n\nWhile she gave him head, her Parkinson caused her body to twitch. She bobbed and sucked his dick while spasming. The bout did not diminish Tommy's pleasure. He gasped and groaned.\n\nThe eighteen-year-old moaned again and said, \"Ohhh! Mrs. B! That feels wonderful!\"\n\nThe old woman pulled off him, chuckled, and said, \"Don't you think, considering that we're naked and having sex, that we should be on a first-name basis? My name is Agnes. My friends call me Nes.\" Her hand lightly stroked his cock.\n\n\"My friends call me Tommy.\"\n\n\"Hi, Tommy,\" Agnes said as she looked him in the eyes and casually squeezed his dick. She saw his face turn red and contort. His eyes opened wide and he cried out, \"Oh. Oh! Sorry!\"\n\nHis dick erupted and his cum landed on the septuagenarian's face. Blast after blast of his spunk landed on Nes' face. Tommy was mortified and expressed his remorse.\n\n\"I'm sorry. I'm so sorry. I didn't mean to do that. It just happened. I felt my balls boil and then... I didn't do it on purpose. No one has sucked or stroked my dick before.\" \n\nHe shifted his weight from one foot to the other, dreading her reaction.\n\nHe was relieved when her face cracked, and she shrieked with laughter. Tommy gave her a shy, silly smile. His mouth fell open when her tongue scooped up some of his jism, and she ate it. She smiled and said, \"It's okay. I've done this before. I know young men lack control. You'll last longer the next time.\"\n\n\"There'll be a next time?\" he asked incredulously.\n\n\"Yes. I'm guessing in about five to ten minutes.\" \n\nShe got up and went to her en suite bathroom. Tommy stared at her backside as she walked away. Her butt was round, sexy, and, a bit, droopy. All of her body showed a lack of muscle tone. Her skin and flesh sagged.\n\nNes washed her face, combed her hair, and re-applied her red lipstick. She returned to the room, and he got a good view of her front. Everything sagged or had wrinkles. He could see the lips of her pussy, but not because she shaved, waxed, or trimmed her pubes. The hair down there was sparse and fine. \n\nShe saw him studying her, chuckled, and said, \"Don't worry. Billie won't look like this. She is young. She'll have a youthful, firm, toned, beautiful body.\"\n\nShe got on the bed and rested her head on a pillow. She spread her legs, brought her knees up, asked, \"Have you ever seen a woman's vagina?\"\n\n\"Only on the internet.\"\n\n\"While we wait for your next erection, let me give you a tour.\" \n\nShe laughed. He got on the bed, and she identified the components of her sex. \n\n\"For you, the most important part is my vagina. That's the tunnel you shove your cock in. For women, this bump, this nub located at the top of my slit, is the most important part.\" \n\nShe licked a finger and brought it to her clit and said, \"This is my clitoris or clit or button. It is filled with nerve endings. It is very sensitive, so be gentle. It is the source of a woman's sexual pleasure. Having a big, hard cock inside us is nice, but having our clits stimulated is what makes us climax.\"\n\nShe took his finger, stuck it in her mouth, wetted it thoroughly, and brought it to her vagina. \"Slide is inside me.\"\n\n\"Whoa! This is so cool!\" he said as he slid his digit inside her. \n\n\"Do you see a problem?\"\n\n\"What? Did I hurt you?\" he asked.\n\n\"No. You didn't hurt me, but your finger, which represents your cock, is inside me. Your penis is getting all the stimulation you need to cum, and my poor clitoris is being ignored. This is why women rarely orgasm from intercourse alone. There's not enough clitoral contact from screwing.\"\n\n\"Oh.\"\n\n\"Do you want to be that selfish lover who takes his pleasure and leaves his partner unsatisfied?\"\n\n\"No!\"\n\n\"I thought not. There are strategies to make sure Billie has fun and is satisfied. Anatomy is working against women. Even with the best lover, there will be times a woman doesn't have an orgasm. If you tried your best, she will not blame you, and you can make it up to her another time.\"\n\nHe nodded.\n\n\"You know the best way to satisfy a woman is to stimulate her clit. Your fingers can do the job during foreplay, as you kiss her lips and stimulate her breasts. This will rev her up and make her more likely to cum while fucking, or you can give her an orgasm before you get your dick out of your pants.\n\n\"Going down on her, using your tongue to stimulate her clit is always appreciated. Like your fingers, this can be a technique to excite or get her off.\n\n\"Some sexual positions allow you or her to rub her clit while you're inside her. I suggest you finger her when possible. Say when you're banging her doggy style, or you're spooning, or you're sitting on a chair or bed, and she's facing away from you sliding up and down your stiff cock, rub her button gently with a wet finger.\n\n\"If she's on top, encourage her to masturbate as she rides you. Tell her it's okay to touch herself even though her mother said not to. Ask her to do it for you. Tell her you like watching her, and you want her to scream, tremble, and have an explosive orgasm. Tell her that seeing her orgasm gives you great pleasure.\n\n\"Got it?\"\n\n\"I think so.\"\n\n\"Eat me!\" she screamed. She laughed and said, \"Kiss and lick my sex. Be as gentle as you were when you kissed my other lips. Use your tongue, lips, and fingers. Explore my vagina and labia, and learn how I like my clit touched.\"\n\nTommy laid on the bed and brought his mouth to her pussy. He gently explored her sex. From her grunts, sighs, and moans, he learned what she liked and how much pressure to apply. \n\nShe grew wet. He lapped up her nectar.\n\n\"Oh! That was wonderful. Take me. Put your big, hard cock in me!\"\n\nHe got on top of her. She guided his dick to her vagina, looked into his eyes, and nodded. He moved his hips and drove his cock inside her.\n\n\"Ohhh!\" they moaned.\n\n\"Just like the other aspects of sex, go slow and be gentle. This old girl hasn't had a cock in her in years!\"\n\nHe fucked her cautiously. Her pussy was warm and wonderful. After about a minute, he was overwhelmed by pleasure, jabbed his cock deep inside her, and came.\n\n\"Oh. Ohhh. Ohhhh!\"\n\nShe rubbed his back and said, \"It's okay. Fill me with your seed. Enjoy the moment.\"\n\nHe laid on top of her like a heavy rug, breathing deeply and lost in the moment. She pushed on him, getting him to slide off her.\n\nWhen he opened his eyes, he said, \"Sorry. I came so soon.\"\n\nShe brushed the hair out of his eyes, smiled warmly, and said, \"It's okay. I expect this to be a quick one. This is why we're practicing. You'll get better, learn to last longer, and you will thrill Billie.\"\n\nHe moved as if he was getting up. She grabbed him, and said, \"Stay with me. Girls always want to cuddle. Don't worry about the mess. We can clean up later.\"\n\nShe held him. He dozed off, and she let him sleep for twenty minutes.\n\n\"Hey. Tommy. Wake up,\" Nes said as she gently shook him.\n\nHe yawned and said, \"Sorry. I fell asleep.\" He rubbed his eyes.\n\n\"No problem. You've got an erection. I thought you could take me one more time before going home.\"\n\n\"Okay.\"\n\n\"How do you want me?\"\n\n\"What?\"\n\nShe laughed and said, \"We did the missionary position. Do you want to try another?\"\n\n\"I guess,\" he said, sounding embarrassed.\n\nShe took charge, got on her hands and knees, and said, \"My bum's not what it used to be, but doggy style was my husband's favorite. Give it a go.\"\n\nTommy sat on his knees and looked at her big, round bottom. He saw dark skin around her anus. Her sex was damp and glistened. \n\nShe said, \"Give me a few licks before you stick it in.\" She laughed and added, \"Don't worry. You won't taste your cum. I washed while you slept.\"\n\nHe caressed her butt and licked her pussy. When he flicked his tongue across her clit, she moaned. Next, he shoved his tongue in her hole, wetting her cunt.\n\n\"That's enough. We're not making love. I want you to fuck me to gain some experience and to build up some stamina. This is a free one! Have your way with me!\" She laughed and shook her bottom.\n\nTommy wet the tip of his dick with his saliva and sunk his meat in her.\n\n\"Ohh!\" he groaned.\n\n\"Ahhh!\" she moaned. \"You've got a good-sized cock, and it stretches me well.\"\n\nHe slid all the way inside her, paused, and then did it again and again. He could hear her breathing. His heart raced. He fucked her for a couple of minutes in this manner. Before he slammed his dick into her and sprayed her womb with sperm.\n\nHe slumped on her back. She collapsed on the bed, rolled over, and held him while he enjoyed his climax. \n\nWhen he opened his eyes, she said, \"Enjoy yourself?\"\n\n\"Yes.\"\n\n\"With a little more practice, you'll make Billie feel like that, and she will love you so much.\"\n\n\"Do you think so?\"\n\n\"I know it! Take a shower, get dressed, and go home. We should have another lesson tomorrow night. Come at midnight.\"\n\n\"Thank you!\" He kissed her on the lips. \"I don't know how I can repay you?\"\n\n\"A good deed is its own reward,\" she said out loud. To herself, she added, \"Your kisses, youthful body and vigor, and that big, hard cock are sufficient.\"\n\nThe next day, Tommy drove Billie to work. He had on his regular blue uniform. She had on lavender-colored pants and a top with lambs jumping over fences. \"Hi,\" he said when she got into the car.\n\n\"Hi,\" she said and smiled.\n\n\"I can't wait for our date tomorrow.\"\n\n\"I'm excited too,\" she said.\n\nThey talked the whole time on the drive to Shady Maple.\n\nTommy did his job and got his people to breakfast. However, not without a struggle. Edna told him, \"What's the point of eating? I'm going to die today, God willing.\" \n\n\"What if God isn't calling you to heaven today?\" Tommy asked. \"And what would be wrong with going on the journey with a full stomach?\" She agreed and went to breakfast.\n\nMrs. Edwards was also hesitant to go. She said, \"My mother is coming soon. I need to be ready.\"\n\nTommy knew that Mrs. Edwards was seventy-seven years old, so it was unlikely that her mother was still alive. He said, \"I will bring your mother to you the moment she arrives.\"\n\n\"Okay. I guess I can go to breakfast.\"\n\nMrs. Brenner invited him in when he knocked on her door. She was wearing another revealing sleeping gown. It was different from the one she wore last night. She said, \"Hello, Tommy. I'm ready to go to breakfast.\"\n\nHe helped her up, and they walked slowly to the dining room with his arm snugly around her waist. She asked, \"How was the drive this morning with Billie?\"\n\n\"Great. She was in a good mood and we both are excited about our date tomorrow.\"\n\n\"Good. Do you still want to get together tonight?\"\n\n\"Yes, if you don't mind. Last night's session improved my skills and made me more confident. Practice makes perfect, and I want to be perfect for Billie.\"\n\n\"Then our midnight practice session is on.\"\n\n^^^\n\nMrs. Brenner and Tommy interacted during the day. She also crossed paths with Billie. Mid-afternoon, Billie walked by Mrs. Brenner's room. The door was open, and Agnes called to her. \"Billie, can you spare me a moment?\"\n\n\"Sure.\" The slim teenager entered her room and asked, \"What can I do for you?\"\n\nAgnes said, \"I heard about your date with Tommy.\"\n\nThe eighteen-year-old blushed.\n\n\"I didn't mean to embarrass you. I think it's great. Tommy is very excited. Have you thought about what you're going to wear and how to fix your hair and makeup?''\n\n\"We're going to a neighborhood Italian restaurant. I was going to wear my new cobalt blue sundress.\" She saw the old woman grimace and shake her head. She asked, \"What's wrong?\"\n\n\"That color is perfect for me but wrong for you. Not every color flatters every woman. Experts say you need to consider your skin tone, hair, and eye color when buying clothes. Stylists divide women into groups: cool, warm, and neutral. \n\n\"Have you noticed some colors pop on you and others leave you looking blah or washed out?\"\n\n\"Yes. I was trying lipsticks at the drugstore. Some shades looked great on me and others didn't. I thought it was funny because they were various shades of red.\"\n\n\"I have blue eyes, silver hair, and pale white skin. That means I have 'cool' tones, so cobalt blue, pinks, dark greens, and rich purples work for me. With your brown hair and eyes, and tanned face, you're 'warm'. Yellows, oranges, browns, yellow-greens, and earthy shades of red are best for you.\"\n\nThe old woman opened her jewelry box and grabbed some bracelets. She put silver ones on the teen's right wrist and the gold ones on her left. She said, \"Here is a quick way to discover your skin tone. Which bracelets look best? I'm not asking if you like gold or silver. I'm asking which color flatters you? Gold looks better on 'warm' people, and silver favors 'cool' people.\"\n\nThe teen held out her arms and looked at both of them. She said, \"The gold ones look better. I guess I have a warm skin tone.\"\n\n\"It kills me that silver looks better on me. I like gold,\" Mrs. Brenner said, watching the young woman remove the jewelry. \"Do you have a dress in one of the warm colors?\"\n\n\"I have one that's mustard yellow. I could wear it.\" She frowned and added, \"I bought it last year when the style was for shorter skirts.\"\n\n\"With your long, lean legs, no dress is too short.\" Agnes chuckled and added, \"As for makeup, I would play up your eyes. They are big and beautiful and your best feature. Play down your lips by using a neutral shade of lipstick. Your long hair is great. I know you like to wear ponytails. Perhaps you could incorporate a braid.\n\n\"I think you'd look lovely in a French braid. It's classy. Perfect for a big date.\"\n\n\"I'd like that, but I don't know how to do it.\"\n\n\"I'll fix your hair tomorrow afternoon.\" The woman brought a finger to her lips, paused to think, and said,\" We want to wow Tommy. We cant' have him seeing you partially made up. I want him to see you completely decked out and looking like a million dollars.\"\n\nBillie's eyes widened, and she nodded.\n\n\"Why don't you bring your dress and makeup to work tomorrow? I'll get you all dolled up, and you can take an Uber to the restaurant. That way you can make a grand entrance.\"\n\nBillie giggled and nodded excitedly.\n\n^^^\n\nTommy knocked on Mrs. B's door at midnight. \"Come in,\" she said. Tommy opened the door and found her in bed. \n\n\"Oh. Did I wake you?\"\n\n\"No.\" She tossed the covers aside and revealed her naked body. \"Should I play coy? We both know why we're here. Get undressed and join me.\"\n\nThe teenage undress. He, complete with an erection, climbed into bed.\n\n\"Imagine you're with Billie, and make love to me,\" Nes said.\n\nTommy closed his eyes and began with a soft, gentle kiss on her lips. He lingered kissing her in different ways, varying the pressure, and touching her face, hair, and body as they necked.\n\nHe moved down to her breasts and treated them as tenderly. He caressed, kissed, gently squeezed her soft flesh, and sucked her nipples. Again, he added to her pleasure by caressing her body, touching her neck, and rubbing her clit.\n\nShe moaned and sighed.\n\nHe went down on her. He kissed and ate her sex. He flicked his tongue against her clitoris, chewed on her labia, and he poked his tongue into her vagina. Mostly, he found ways to stimulate her clit using lips, his tongue, and his fingers.\n\nHe was relentless. He sucked her clit and shoved two fingers into her vagina until she cried out and orgasmed.\n\n\"Oh, God. Oh, God. Yes! Yes! Ohhhh!\"\n\nHer body spasmed, and this time it wasn't due to her Parkinson's.\n\nHe slid behind her, spooned her, and held her as she felt electric jolts of pleasure course through her body.\n\nIn time she recovered, and said, \"That was wonderful. What shall we do next?\"\n\n\"This!\" Tommy grabbed his cock, guided it to her wet hole, and shoved it inside her.\n\n\"Ohhh!\" she cried out in surprise and then delight. \"My word!\"\n\nOhhhh,\" he groaned, enjoying being inside her.\n\nHe fucked her gently at first. As time passed, he went in deeper and harder. He brought his hand to her button and rubbed it in rhythm with his strokes.\n\n\"Oh! You are a quick study. Mmmm,\" she moaned.\n\nHe kissed her neck and groped her boobs as his dick glided in and out of her vagina. Their hearts raced, their breathing grew ragged., and they enjoyed the pleasurable sensation.\n\n\"Oh. Ohh!\" he hollered. He slammed his dick deep inside her, and he filled her with his cum. \n\nShe took over and fingered her button as he moaned and orgasmed. She masturbated and finished what he'd started.",
        "\"Oh, yes. Oh. Oh! Ohhh!\"\n\nThey laid together and luxuriated in their bliss.\n\nShe chuckled good-naturedly and said, \"That was excellent. Well done, Tommy.\"\n\nHe asked, \"Was it okay? You didn't climax with me?\"\n\nShe laughed kindly and said, \"I climaxed twice, and you came once. I'd say, 'Mission accomplished.' It's a rare thing for a couple to orgasm simultaneously because intercourse alone is usually not enough to make a woman climax. The goal is to have fun and give your partner pleasure.\n\n\"I came twice. That's a lot of pleasure.\" She kissed him on the lips.\n\nThey showered together. He got an erection while washing her boobs. She knelt and sucked his dick. Her body twitched and jerked as her Parkinson acted up. She powered through it, and he didn't let her spasms interfere with his pleasure. \n\n\"Ohhhh!\" he cried out as he came.\n\nShe swallowed his load and said proudly, \"Now, we're even. Two orgasms apiece.\"\n\nHe laughed and pulled her to her feet. He kissed her and found her lips softer and warmer than usual. He tasted his cum. It was salty and bitter but not offensive enough to break off the kiss.\n\nAs he dressed, Nes handed him four three-count packets of condoms. \"Here. Be sure to use these every time you have sex with Billie. She is too young to get pregnant. Don't take chances. Have fun, but be careful.\"\n\n^^^\n\nThe next day, Billie wore a rust-color uniform. The top had pictures of puppies running and jumping. She brought her dress and makeup and left them with Mrs. Brenner.\n\nThe day passed slowly for the teenagers. When five o'clock finally arrived, Billie said,\" Tommy, I'm going to stay. Mrs. Brenner is going to help me get ready. I'll meet you at the restaurant at seven.\"\n\n\"Okay,\" he said, smiled, and left.\n\nBillie made a bee-line for Mrs. Brenner's room, she knocked and entered when invited in. Agnes smiled. She was wearing a purple gown with her signature see-through top, This one had a shelf that supported her breasts so her large nipples were visible and pointed forward for a change.\n\n\"I like your uniform,\" Agnes said.\n\n\"Thank you. I've gotten a lot of compliments on it today.\"\n\n\"That's because you're wearing a 'warm' color.\"\n\n\"Your gown is smashing. That purple suits you.\"\n\n\"Thank you. When we wear the correct color, we are gorgeous!\" They shared a laugh.\n\nThe young woman closed the door, fidgeted, and said, \"Em. Em...\"\n\nAgnes smiled and said, \"Spit it out. We are here for a sacred cause. Sisters working together to champion love. You can say anything to me.\"\n\nBillie blushed and said, \"First, I want to say thank you for helping me. My mom died, and I have no sisters to help me with stuff like clothes, hair, and makeup.\"\n\n\"I'm glad to pitch in. Was there something else?\"\n\n\"Yes. You wear lovely gowns all day. Many are see-through, and everyone can see your nipples and boobs...\"\n\n\"Does the sight of my old, saggy breasts offend you?\" the old woman said, laughing. \"My dear, late husband bought them for me. He enjoyed seeing my breasts. I wear them because they remind me of a time when I was young and beautiful and loved.\"\n\nTears welled up in Billie's eyes. She wiped them away before they spilled down her cheek. She said, \"I want to be loved.\"\n\n\"We all do. Tommy is a fine, young man. He's finally noticed the treasure that lives next door to him. Let's make you shine so he never forgets you!\"\n\nBillie beamed.\n\n\"Take your top off and sit at the makeup table.\"\n\nThe slender, young woman removed her shirt. Her face became red, and she placed an arm over her bra-covered breasts. \n\n\"Please, relax,\" Agnes said. \"You're young, you're beautiful, and you have nothing to be ashamed of. You have beautiful breasts.\"\n\n\"They're not that big.\"\n\n\"And they are not that small,\" Agnes said, reassuring her. \"Can I let you in on a secret? All men love boobs, and most men don't care what size they are. They want to see, touch and suck on them. If size mattered to Tommy, he'd be going on a date with Beth and her double D's, not you.\"\n\nNes looked the young woman in the eyes, squinted, and asked, \"Are you dating Tommy because he has a big penis?\"\n\n\"No! God, no! I have no idea how big he is.\"\n\n\"You like him because he's nice, kind, and attractive, and you'll take him no matter the size of his cock within reason. He feels the same way about you. He likes you because you're a good person. He finds you attractive. He doesn't care what cup size you are any more than what size shoe you wear.\" \n\n\"Thank you for telling me that,\" Billie said. \"Sometimes I doubt myself and fixate on my flaws, real or perceived.\"\n\nAgnes gave her a loving smile and said, \"We all do that. Sit at my makeup table, and let's get busy.\"\n\nThe women chatted as Agnes braided her hair and applied the girl's makeup.\n\nAgnes applied the eyeliner carefully and said, \"Now, as long as my Parkinson's doesn't act up, I'll give you another perfect cattail. There.\"\n\n\"I love it!\" Billie said.\n\n\"Yes. It looks great. You have smokey eyes and eye-catching cattails. Your eyes look huge, and are beautiful. Tommy will be staring into the deep pools of your soulful brown eyes all night.\"\n\n\"I hope so.\"\n\n\"Put on your dress. I hope you don't mind, I had Cara, from the laundry, iron, and press it.\"\n\nThe dress was on the bed. Billie slipped off her pants, turned her back to Agnes, and bent over to pick up the dress, accidentally mooning Mrs. Brenner. The old woman chuckled, reached over, and patted her behind. She said, \"Nice butt. Now I know why Mr. Harrison is always grabbing it.\" \n\n\"Oh!\" Billie squealed. She grabbed the dress, stood, and turned, hiding behind the dress. She said shyly, \"I always thought my breasts were too little and my butt was too big.\"\n\nAgnes smiled and said, \"You have a great derriere. Guys like nicely round ones, so much so that they write songs about them. \" Agnes sang a line from a Queen song in perfect pitch, \"Fat-bottomed girls you make the rocking world go round.\"\n\nBillie smiled weakly, accepting the compliment. Agnes said, \"I love that song and I love singing, but that song wasn't written for you. You don't have a fat bottom or even a big butt. You're an attractive young woman with a perfectly fine, nice, firm bum.\"\n\n\"Thanks.\"\n\n\"I see you're wearing a thong. It's very sexy looking. I've never worn one. Does the string between your butt cheeks drive you crazy?\"\n\n\"It was weird and uncomfortable at first, but now I'm used to them. I forget I have them on. I like that I no longer have a visible panty line.\"\n\nMrs. Brenner nodded and said, \"Yes. It's a good choice for tonight. Speaking of ruining the look, I think you should ditch your bra. You have a cute, backless dress you don't want your straps to show. The dress material is thick enough to hide your nipples. I think Tommy will find it very sexy that you're braless, and you won't be overly exposed.\"\n\nBillie reached behind with one hand and undid her bra, she let it fall forward, exposing her chest. She was chagrin that her pink nipples were long and pointy. The other woman looked but didn't comment. Billie put the dress on without messing up her hair or makeup.\n\nShe stepped in front of the full-length mirror to look at herself. Agnes stood behind her, looking and smiling. She said, \"Gorgeous. You are absolutely gorgeous.\"\n\n\"Thank you. I couldn't have done it without your help.\"\n\n\"Look at your tanned legs! Tommy will be stealing a look at your legs all night\"\n\n\"The dress isn't too short, is it?\" Billie said as she turned from side to side. \"I've grown taller since buying it.\"\n\n\"It is decadent. Practically obscene!\" Agnes teased, adding, \"That's why it's perfect for tonight!\"\n\nBillie smiled brightly.\n\n\"Your Uber will be out front in a few minutes Any questions? Concerns. What if he wants to kiss you?\"\n\nThe young woman's face turned red as she said, \"I hope he kisses me.\"\n\n\"What if he wants to do more?\"\n\n\"I'm not sure about other stuff. I'm a virgin.\"\n\n\"I understand. Don't do anything you don't want to do or aren't ready to do. A kiss would be appropriate for tonight. Other stuff can wait for other dates. Be honest. Tell Tommy what you're comfortable doing. When I was your age, we had the third date rule.\"\n\nBillie tilted her head and gave her a questioning look.\n\n\"No boy expected anything more than a kiss before the third date. That takes the pressure off everyone and gives you time to get to know one another. If you tell Tommy you want to take things slow. I'm sure he will understand. He's a nice boy.\"\n\nBillie hugged Mrs. Brenner and went to the front door to meet her ride.\n\n^^^ \n\nBillie exited the Uber, and Tommy, who was sitting on a bench outside the restaurant, went to her. \n\n\"Hi. Wow! You look different.\"\n\nHer smile disappeared. Tommy saw her look of distress and said quickly, \"I've never seen you dressed up before. The hair, makeup, and a pretty dress. You look great.\" In an attempt to dig his way out of the hole he created, he added, \"You look wonderful. Beautiful. Terrific.\"\n\nHer smile returned, and she said, \"Thanks.\"\n\nThey were seated outside on the patio. The waiter steered her to the back chair by a small brick wall. Tommy didn't sit across from her. He wanted to be close and sat in a chair near her. A smiling male waiter came up to the table and took their order.\n\nTommy was proud that other men noticed Billie. That their eyes gave her the once over, and they smiled. She smiled back shyly, happy that she was attractive enough to catch their eyes.\n\nThe looks from other men never stopped because of her short skirt and her location. Her table was across from the main entrance to the patio. Her chair faced the door. When she sat down, the hem of her skirt rode up her thighs. \n\nEveryone who walked out onto the patio saw an attractive young woman seated at a table, and they saw her underwear. She was sitting with her ankles crossed, but her skirt was too short to block the upskirt view.\n\nTommy and Billie were unaware of this. Billie was staring into Tommy's blue eyes, hanging on his every word, and he was dazzled by and enchanted by the beautiful, doe-eyed young woman.\n\nWord got out, and many, many smiling men walked out onto the patio to take advantage of Billie's situation.\n\nA waitress stopped, whispered in Billie's ear, and explained the situation. Her face turned bright red, she quickly scrambled to her feet and moved to the opposite chair.\n\n\"What's the matter?\" Tommy asked.\n\n\"Ah...Ah...The sun was reflecting off the glass windows and hurt my eyes. I'll be more comfortable over here.\"\n\nTommy accepted her answer and began rattling on telling a funny story from their childhood. Her face returned to her normal color, her heart stopped racing, and she was able to get over that she'd flashed her panties at a horde of men, and she was able to enjoy her date.\n\nAfter they finished their meals, Tommy and Billie went for a walk in a nearby park, holding hands. Both were glossy-eyed and excited to be in each other's company. They walked, enjoying their one point of contact, their hands.\n\nThey found themselves in a secluded spot. Tommy made his move. He stepped in front of her, looked deep into her eyes, and brought his hands to her face. He kissed her lips gently. She melted in his arms as she kissed him back. They moaned and kissed more passionately and their hearts beat faster. \n\nHis tongue flicked her lip. She parted them, and they French kissed. He got hard. She got wet.\n\nA dog barked. The owner called out, \"Sheriff, come back here.\" A friendly golden retriever ran up to them, wagging his tail, and sniffed their crotches. \"I'm sorry. He got away from me,\" the owner said. He reattached the dog's leash and led him away.\n\n\"I guess we better head home,\" Tommy said. \"I enjoyed our date and I enjoyed kissing you.\"\n\n\"Me too\", she said. \"You're a very good kisser.\"\n\n\"Thanks.\"\n\nThey drove home. Tommy walked her to the door, and they kissed on her front porch. She became light-headed as Tommy kissed her mouth, cheek, neck, and collarbone. His hand slid down her bare back and cupped an ass cheek.\n\n\"Ah. I think we better stop,\" she said.\n\n\"Okay. Good night, Beautiful. I want another date. How about Friday night? We could see a movie.\"\n\n\"Yes!\"\n\n^^^\n\nThe next day, Tommy and Billie were on cloud nine. They were talkative and giddy around each other.\n\nWhen Tommy stopped in to see Mrs. Brenner, she flashed him a smile and a semi-opaque view of her breasts, and asked, \"How'd it go?\"\n\n\"Great. She was so beautiful. We had a great time. She said I was a good kisser.\"\n\nShe pressed him for more details, and he happily gave them.\n\n^^^\n\nLater that morning, Billie stopped by to see Mrs. Brenner. The women huddled together and went over every detail of the date.\n\n\"So you flashed your panties at a dozen men?\" Mrs. B asked.\n\n\"More like two dozen,\" Billie answered gloomily. \n\n\"I'm sorry that happened, but on the bright side, Tommy doesn't know. All he knows is you were the center of attention. The most beautiful girl in the restaurant. He told me how proud he was to be sitting with you. Especially, since so many other men kept eyeing you. Let's count this as a win and never tell him why the other guys found you irresistible.\"\n\nBillie nodded her head.\n\n\"Tommy was thrilled that you said he was a good kisser.\"\n\n\"He is. I practically swooned.\"\n\n\"So you had fun, and it didn't get uncomfortable?\"\n\n\"No. He grabbed my butt, and I didn't care. I would have let him do anything he wanted. I felt so close to him. I love him!\"\n\n\"He's a great guy, but hold your horses. I know you've had a crush on him for years, but you've only been on one date. Let's stay clear-headed. He has to earn your love, and your feelings mean nothing if they aren't reciprocated.\"\n\n\"Didn't he say he enjoyed our date? He called me beautiful.\"\n\n\"Yes, he did, but men have a propensity to screw things up. Some do it by their addictions to drinking, gambling, and drugs. Others sabotage relationships by not respecting their partners or taking them for granted.\"\n\n\"Tommy's not like that!\"\n\n\"I don't think so either, but sometimes we get blindsided. That's why you don't get married after the first date. I understand your heart is all in. Go on dates. Enjoy yourself. Just keep an eye open for danger signs.\"\n\nBillie nodded.\n\n\"What are you going to wear on Friday? Do you want me to help with your hair?\"\n\n\"If you wouldn't mind?\"\n\n^^^\n\nThat afternoon, Mrs. Brenner spoke with Tommy. \"Billie's a lovely girl. I like her.\"\n\n\"Me too. She's awesome.\"\n\n\"You know, there's a good reason all societies have a period of courtship. It takes a while to truly know someone. At first, everyone presents their best face or perhaps, you are smitten and don't see your potential mate's real self.\n\n\"Over time, you see them in a variety of situations and you get a clearer view of who they are. So just as you don't rush a kiss, don't rush the dating process. If all goes well, you will learn more about Billie and have more reasons to love and adore her and vice versa. Or not.\"\n\n\"Oh,\" Tommy exclaimed as the meaning of her words sunk in. \n\n\"It's okay to love with your whole heart, but don't stick your head in the sand. This is too important a decision for you to make because your heart beats faster when Billie enters the room. Use your brain. Are you compatible? Do you have the same values? Do you trust her? Do you want kids? Does she? How will they be raised? Etc.\"\n\n\"Wow! That's a lot to think about.\"\n\n\"It is, but maybe I'm overthinking this. Is this a serious, long-term relationship, or is this something casual?\"\n\nHe furrowed his brow.\n\nNes said, \"As long as you and Billie are on the same page, either option is okay, and there's nothing wrong with a summer romance, even one that includes sex. However, only a true scumbag would take advantage of a naive young woman and deflower her under false pretenses.\"\n\n^^^Friday^^^\n\n\"So you're taking Billie to a drive-in tonight,\" Mrs. Brenner said to Tommy. \"Sounds like fun.\"\n\nHe grinned and nodded.\n\n^^^\n\n\"Hi, Billie,\" Agnes said. \"I loved going to the drive-in when I was your age. The movies were terrible, usually some campy sci-fi flick or laughable horror movie. We'd load up on popcorn and sit with our boyfriends, and when it got dark, we'd make out with our dates.\"\n\n\"I'm good with that,\" the teen said and giggled.\n\n\"What are you going to wear?\"\n\n\"I bought a romper. I thought it'd be great for the drive-in. It's comfortable and casual.\" She gave the old woman a tight-lipped, wry smile and said, \"It has shorts so I won't repeat the upskirt incident, and it's a warm shade of red that suits my skin tone.\"\n\n\"That sounds great. What about your hair?\"\n\n\"I was on the internet, and I saw some tutorials for 'messy' ponytails. I could do that. They're cute and casual and simple to construct. I love that it's okay to have fly-away hairs and dangling tendrils.\"\n\n\"They are very cute,\" Agnes agreed. \"Embrace the imperfections! That takes a lot of pressure off you, so you can focus on your beau and have a good time.\"\n\n^^^\n\nTommy went next door and rang the bell. Mr. Richardson answered the door and said, \"Hello, Tommy. Come on in. Billie should be ready soon.\"\n\nThe men sat in the front room. A baseball game played on the television. Tommy asked, \"Do you think this year will be our year.\"\n\n\"Humph,\" Billie's dad grunted. \"Damm analytics is ruining the game!\"\n\n\"Don't get him started on sabermetrics,\" Billie teased as she walked down the stairs. The men turned, looked at her, and both thought she looked lovely. Her father was proud. Tommy was turned on.\n\n\"You look great, baby. So much like your mother.\"\n\n\"Yes, Billie. You look great,\" Tommy added.\n\n\"You kids have fun,\" Mr. Richardson said. \"What's playing at the drive-in?\"\n\n\"The Blob\" and \"Don't Look in the Basement\",\" Tommy said.\n\n\"Ha!. Those are blasts from the past.\" Mr. Richardson escorted them to the door and waved as they walked to Tommy's car. He said to himself, \"It doesn't matter what movies are playing at the drive-in, no one goes to see them.\" He laughed.\n\n\"I love your outfit, Billie,\" Tommy said.\n\n\"Thanks.\"\n\nThey chatted as they drove to the drive-in. They found a place to park and bought sodas and popcorn from the snack stand. They watched \"The Blob\" until darkness settled in around them.\n\n\"This movie is pretty silly,\" Billie said.\n\n\"Yes. The special effects are lame. The movie is ancient. It was made in the 1950s before they had computer-generated special effects.\" He turned toward her and said, \"Rumor has it that the movies weren't the only reason people went to drive-ins.\"\n\n\"Oh?\" Billie said coyly. \"Tell me more.\"\n\nHis face was inches from hers as he said, \"I'd rather show you.\" He kissed her.\n\n\"Mmmm,\" she moaned and kissed him back. They necked in the darkness and privacy of their car. \n\nTommy used everything Mrs. Brenner taught him to please his date. His kisses were soft, tender, and unrushed. He kissed her lips, cheeks, earlobes, neck, and collarbone. He supplemented the smooches with soft caresses on her face, neck, arms, and back.\n\nWhen he touched her breasts, Billie's eyes flicked open, and she gasped. Tommy noticed. He looked lovingly into her eyes, thumbed her hard nipple through her top, and whispered, \"Is this okay?\"\n\nShe sighed and said, \"Yes. It feels awesome.\" \n\nShe kissed him and he gently squeezed her breasts. He slid his hand under her top and lacy, bandeau bra. \n\n\"Oh,\" she gasped as he touched her soft flesh. He fondled and caressed her boobs, and he softly pulled and pinched her long nipples as he continued to kiss her.\n\nBillie felt many new, strange sensations. Her body tingled and felt warm all over, and her sex got wet.\n\nHe pulled her top and bra up and began kissing his way to her breasts. She freaked out and thought, \"Oh, no. What if he doesn't like their size, the way they look, or my long nipples?\"",
        "He kissed her breasts and sucked on her nipples, and all her worries disappeared. She said breathlessly, \"Oh my God!! This feels so good.\" She grabbed his head and pulled him to her chest. He redoubled his efforts.\n\nA huge flow of energy flowed from both nipples and made her pussy gush, and her body felt like it was on fire. She reached out to stabilize herself. One hand pressed on his leg, and she felt a rigid object and thought, \"That's his penis. It's as hard as a rock!\"\n\nTommy thought, \"This girl is hot. She likes what I'm doing. I'm loving it. I should keep going.\"\n\nAs he sucked on a breast, he slid a hand down her flat stomach into her shorts. He felt the soft curls of her pubic hair and kept going and found her warm, wet slit. He located her clitoris and rubbed it gently.\n\n\"Ohhh!\" she moaned and her hips bucked. She pressed against his hand as he diddled her clit. \n\nHe kept sucking her breasts and fingering her pussy. She kept moaning and trying to ride his hand until the dam burst.\n\n\"Oh, God. Oh, God! Ohhhhh!\" she cried out as she orgasmed.\n\nShe reached out for him and hugged him tightly as this new, wonderful sensation ran through her body. He held her and let her enjoy the bliss.\n\nAfter a bit, she pulled away. She shyly said with a red face, \"Wow! That was something.\"\n\n\"I liked it too.\"\n\n\"But you didn't come?\"\n\n\"Giving you pleasure gives me pleasure. I like kissing you, and your breasts are awesome!\"\n\nShe remembered her boobs were exposed, covered them with her hands, and asked, \"You like my boobs? They're not too small?\"\n\n\"I love your boobs!\" He pried her hands away, looked at them, and said, \"They're a nice size. No one would ever say your breasts are mosquito bites, fried eggs, or two aspirins on an iron board. They are a nice size and shape. I love 'em.\"\n\nHe looked at his watch and said, \"I better get you home. It's getting late.\"\n\n\"But what about you?\"\n\n\"If you want to do something for me. Let's go out tomorrow night. Stevo's having a party at the lake.\"\n\n\"Deal.\"\n\nHe drove her home, walked her to the door, and said formally, \"Miss Richardson, I had a delightful time this evening and look forward to the pleasure of your company tomorrow. May I pick you up at nine o'clock?\"\n\n\"You may.\" She giggled. They kissed, and she went inside.\n\n\"Hi, Dad,\" she said. Her father was sitting on the sofa watching television. \"Did you stay up for me?\"\n\n\"Yes. Because fathers worry about their daughters. Did you have a good time?\" he asked.\n\n\"Yes.\"\n\n\"Good.\" He stood, hugged her, patted her rear end, and said, \"You're bottom's wet.\"\n\n\"Uhh. Uhh. I spilled my soda. I'm going to wash it out now before the stain sets.\"\n\nHe didn't buy her story, but he didn't call her out either. He asked, \"Are you going to see him again?\"\n\n\"I want to. He asked me out for tomorrow night. A friend is having a party.\"\n\n\"You're all grown up and I've lost you,\" he teased. He smiled and said sincerely, \"Go have fun. Good night, sweetheart. I love you.\"\n\n\"I love you, too.\" She kissed him on the cheek and dashed into her bedroom. She took off her clothes and put on a comfortable, cotton sleepshirt. She went into the bathroom, removed her makeup, and used the toilet. She washed her sex, underwear, and the shorts of her romper.\n\nShe returned to her room, put the wet clothes on a small, drying rack, and went to bed. She smiled as she re-lived her date until she fell asleep.\n\n^^^Saturday^^^\n\nTommy and Billie spent the day with their families, running errands, and doing chores. After helping her father weed the garden, Billie and her dad had lunch. He said, \"I'm very proud of you. You're a woman now, and you're dating. I think it'd be a smart thing for you to go see Dr. Nelson and get on birth control.\"\n\n\"DAD!\" she called out in a voice expressing her embarrassment. \"I'm not having sex!\"\n\n\"I'm not saying you're a bad girl or accusing you of being promiscuous,\" he said calmly. \"You're dating. If you haven't kissed Tommy, you will soon, and there is nothing wrong with that. Why not be safe and be proactive? You have plans to go to college and become a nurse, having a baby is not on your to-do list at the moment.\"\n\nHe reached across the table, grabbed her hand, and said, \"I think it's the right thing to do.\"\n\nShe released a deep breath, nodded, and said, \"You're right.\"\n\n^^^\n\nTommy picked Billie up at nine p.m. \n\nHe had on sneakers, jeans, and a tight tee-shirt. She wore sandals, jean shorts, and an ivory-colored, short crop top with spaghetti straps. She was braless. Her pink nipples dented the fabric.\n\n\"Bye, Dad,\" she called out and blew him a kiss. He smiled and said, \"Have fun.\"\n\nWhen they were outside, Tommy said, \"You look hot.\"\n\n\"So do you.\" \n\nThey kissed, got in the car, and drove to the party. It was outside at a lake. Stevo's parents owned a small cottage on the shore, and he'd commandeered it for this party.\n\nThere were lots of people in attendance. There were drugs, beer, and loud music there too. Tommy and Billie passed on the drugs, drank beer, hung out with friends, danced, and had fun. \n\nBillie received a lot of compliments on her hair. It was in a fishtail braid. The loose braid hung down on the right side of her head. She left a few curled strands untucked, and they framed her face nicely.\n\nPeople began pairing up and going off into the darkness. Tommy and Billie did likewise. They found a secluded spot and made out. Tommy was terrific: slow and gentle. \n\n\"Ahh!\" Billie moaned as a gentle hand caressed a breast, and they French kissed.\n\nHe lowered his head to suck on the tits he'd exposed. She stopped him by saying, \"No.\"\n\n\"You don't want me to suck on your nipples?\"\n\n\"I do, but first I want to do something for you.\" She reached for his belt, unbuckled it, and said, \"I'm going to suck your dick. I've never done this. I only have tips for other girls, what I learned on the internet, and from watching porn videos. This may not be the best blowjob you've ever had. I'm open to suggestions.\"\n\n\"I'm sure I'll love it.\" He took off his clothes and laid on his back.\n\nShe knelt beside him and grasped his cock. She looked him in the eyes and said, \"This is pretty big. Here goes.\"\n\nShe leaned down and took his bulbous head into her mouth. She swirled her tongue, touching all sides of it.\n\n\"Oh,\" he cried out.\n\nEncouraged, she did more and took more of his dick into her mouth. She established a rhythm, bobbing her head, sucking, and stroking his shaft with her hand.\n\n\"Oh! Nice,\" he moaned. He closed his eyes and tilted his head back.\n\nShe kept doing what she was doing.\n\nHe looked down at her, smiled, and caressed her hair and face. She looked up at him with her big, brown eyes. And he lost it.\n\n\"Oh! I'm going to cum. I'm going to cum!\"\n\nHis words didn't mean anything to her until he ejaculated and filled her mouth with hot, sticking cum. She was transfixed and continued to bob, suck, and stroke. She added gulping. She had to swallow because her mouth was full. She had to ingest his cum repeatedly because he filled her mouth five times.\n\n\"Oh! That was wonderful,\" he said.\n\nShe pulled off and smiled proudly.\n\n\"I didn't expect you to swallow.\"\n\n\"Did I have a choice?\" she asked naively and sincerely.\n\n\"Some girls pull off and jack the guy off or catch the cum and spit it out in a tissue.\"\n\n\"Oh. I was so focused on giving the BJ that I didn't consider what to do when you ejaculated. Swallowing wasn't bad. It seemed like the neatest option.\"\n\n\"I'm glad you did. It's hot.\" He pulled her head to his and kissed her soft lips and tasted the bitter, salty flavor of his spunk. That didn't deter him. He kissed her passionately.\n\nThey lay together necking. Things progressed. Billie's clothes came off, and Tommy sucked her on her breasts and fingered her pussy. Life was good for the young lovers.\n\nTommy crawled down and put his head in her crotch.\n\n\"Are you sure you want to do that? Things can get messy and smelly down there.\"\n\nIn the moonlight, he could see her face turn red and a look of concern.\n\n\"I'm sure. You went down on me. What kind of guy would I be if I didn't return the favor?\" He swiped her sex with his broad tongue.\n\n\"Oh! Ohhh! And I thought your fingers felt good.\"\n\n\"Oh, God! You're delicious!\" He ate her pussy the same way he did everything else: slowly, tenderly, and lovingly. He slurped up every drop of her musky nectar that he could get. He said to himself, \"I love her pussy. She is tastier and more flavorful than Agnes.\"\n\nShe moaned, groaned, squirmed, and humped his face until her orgasm overtook her.\n\n\"Oh. Oh! Ohh! Ohhhh!\" \n\nHer body spasmed, her back arched, and she raised her hips. For a while, the world disappeared as she was lost in her climax. She settled on the bed, sighed, and said, \"Oh! You make me feel so good!\"\n\nHe kissed her and said, \"I know how to make you feel even better.\"\n\n\"Okay. Do it.\"\n\nHe got off her, reached for his pants, and pulled out a condom. He showed it to her and asked, \"Do you want to go all the way?\"\n\nSeeing the condom was like throwing a bucket of cold water on her. Her head cleared and she asked herself, \"Do I want to have intercourse?\". She paused a second and said out loud, \"Yes. I love you, Tommy Boyle!\"\n\nHer words stunned him. He paused, thought, and said sincerely, \"I love you, Billie Richardson.\"\n\nThey came together, hugged, and kissed.\n\nHe said, \"We don't have to if you're not ready.\"\n\n\"I'm a virgin. I'm ready. I want to.\" Her nude body glistened in the moonlight. Her white parts shimmered. He looked into her soulful brown eyes and got lost.\n\nThey came together and kissed and caressed each other. He sucked her tits. She sucked his cock. He ate her pussy until the ground beneath her was soaked with her juices.\n\nHe put the condom on and climbed on top of her, so they could look into each other's eyes. His dick pressed against the entrance to her vagina.\n\n\"Are you sure?\" he asked.\n\n\"I'm sure.\" She moved her hips and claimed the tip of his dick.\n\nHe moved his hips and claimed her as his own, sliding inside her.\n\n\"Ohhhh!\" they moaned. Their eyes closed as they focused on the point of their union.\n\nTommy went slowly, moved cautiously, and monitored her response. He stopped when she squealed or seemed overwhelmed. Her pussy was soaking wet. She was much wetter than Agnes ever got. His dick became slick with her fluid. He stroked in and out, going deeper and stretching her pussy more each time.\n\nWhen he was all the way in, he wanted to pound her, but he didn't. He ground his pubic bone against her clit. Instead of focusing on in-and-out thrusting, he concentrated on stimulating her nub by rubbing his body on hers.\n\n\"Oh. God! Oh! Yes,\" she cried out.\n\nHe heard her cries, felt her push and grind against him, and claw his back. Only then did he pound her. He thrust into her for his pleasure and continued to finish each thrust by grinding on her clit.\n\nThey went at it, fucking and grinding like animals. She cried out in ecstasy, \"Ohhh!\"\n\nHe felt her pussy clamp down on his dick, and he took his release as he drove deeply and forcefully inside her.\n\n\"Ohhh! Billie!\"\n\nThere was silence except for the cicadas and the sound of heavy breathing. They lay beside each other. Tommy remembered to cuddle her. She rolled on her side, and he spooned her soft, sweaty body. \n\n\"I love you,\" he whispered in her ear.\n\nShe rolled over, faced him, and said, \"I've loved you for a long time.\"\n\nThey kissed and cuddled.\n\nThey went to the lake and washed. Billie giggled, \"My father knows we are having sex.\"\n\n\"What? How?\"\n\n\"You got me so hot and bothered last nice that my panties were soaking wet and made my shorts wet. My dad hugged me and gave me a friendly pat on the butt. He discovered I was wet and put two and two together.\"\n\n\"Did you get into trouble?\"\n\n\"No. He wasn't angry. He suggested I get birth control.\"\n\n\"Wow!\"\n\n\"Yes. Wow. I'm going to go see the doctor. I love you and want to have sex again, but I have plans. I'm going to college. I'm getting a nursing degree.\"\n\n\"Yes. We have to finish our education, get our careers started, then we'll get married and have kids.\"\n\n\"I like that plan!\"\n\nThey sat naked on the beach and let the water run off them. Then used Tommy's tee-shirt to complete the drying-off process, got dressed, and went home.\n\nTommy kissed Billie goodnight under the porch light. She smiled and skipped as she ran into the house.\n\n^^^ \n\nSunday morning, the Boyle's and the Richardson's went to church. The families spoke afterward. Mrs. Boyle pulled Mr. Richardson off to the side and confessed, \"I'm glad our kids are dating. I was beginning to worry about Tommy, wondering what was taking him so long to realize what a treasure Billie is!\"\n\n\"She's had a crush on him since the day we moved in,\" Mr. Richardson said and laughed. \"I'm glad they're dating. He's a good boy.\"\n\n\"And she's a wonderful, beautiful young woman. Her mother would be so proud.\"\n\n\"Yes. She would,\" he said. He pulled a handkerchief from his pocket and wiped an eye.\n\n^^^\n\nAfter lunch, Billie and Tommy went for a walk. They bought ice cream cones, and ate them as they strolled in the park. Their old friend, Sheriff, found them and sniffed their crotches. His owner apologized, \"Sorry. He's a dog. What can you do?\"\n\nThe couple petted the beast and laughed it off.\n\nBillie and Tommy spent the afternoon together and had a great time. \n\n^^^\n\nOn Monday, Tommy put on his standard blue scrubs. Billie had a new uniform. It was a yellow-green color, and the top had images of willow trees and daffodils. Her hair was in her standard ponytail.\n\n\"Hi, Beautiful,\" Tommy said when she slipped into the car.\n\n\"Hi.\"\n\nShe leaned in and kissed her boyfriend. They talked about the weekend on their drive to work, where they clocked in, put their lunches in their lockers, and reported to their ward.\n\nNurse Addler greeted them with a neutral face and said, \"Saturday, Mrs. Brenner fell. She broke her hip and is in St. Mary's hospital.\"\n\nTommy's and Billie's faces fell. \"Oh. No!\" Tommy said.\n\nBillie said, \"The poor thing! Will she be okay?\"\n\n\"Things are not looking good. I understand she has pneumonia.\"\n\nTommy and Billie were down in the dumps all day. At lunch, Billie said, \"We have to go visit Mrs. Brenner after work.\"\n\n\"Yes.\"\n\n^^^\n\nThe nurse at the hospital said, \"We are only allowing relatives to visit Mrs. Brenner.\"\n\n\"I'm her grandson,\" Tommy lied.\n\n\"I'm her granddaughter,\" Billie said. She had tears in her eyes.\n\n\"Okay, but keep it short.\"\n\n\"Yes, Ma'am,\" they said.\n\nThey went down the hall, found the correct room, and entered. Mrs. Brenner looked old and frail. \"Hello, my darlings,\" she said in a soft, weak voice.\n\n\"We heard about the fall,\" Tommy said.\n\n\"Are you all right? You have to get better!\" Billie said, and she began to cry.\n\n\"Don't cry for me because I've had a good life. I was loved.\"\n\n\"We love you!\" Tommy said.\n\n\"I know, and I love you both.\" The old woman smiled and asked, \"How are you two? \n\n\"We're fine. We're worried about you,\" Tommy said.\n\n\"Don't worry about me. Tell me how your date went? Are you a couple?\"\n\nBillie's face darkened, she smiled sheepishly, and said, \"Things are great.\"\n\nTommy put his arm around Billie and said, \"I love her and she loves me. I followed your advice to the letter, and I couldn't be happier.\"\n\n\"I followed your advice, and I couldn't be happier!\" Billie said.\n\n\"I'm glad to hear that,\" Agnes smiled. A tremor struck her. When it passed, she said, \"You lovebirds are my final and best work.\" Her smile faded, her eyes closed, and she looked tired.\n\nTommy looked at Billie somberly, turned to Agnes, and said, \"You get better. We'll let you rest.\"\n\n\"Bye,\" Billie said softly. She clutched Tommy's arm as they walked out of the hospital.\n\n^^^\n\nThe next morning, Ms. Addler approached Tommy and Billie as they entered the ward. She said, \"I'm sorry to say that Mrs. Brenner passed away last night. The doctor said she went gently in the night.\"\n\n\"Oh, no,\" Billie said. She hugged Tommy. They both shed tears. \n\n^^^\n\nThat evening after dinner, Billie called Tommy and asked, \"Can you come over?\"\n\n\"Sure.\"\n\nSoon she heard a knock on the door. She opened it, let him in, and said, \"I need you to hold me.\"\n\nThey embraced in the living room for several minutes. She pulled him toward the stairs and said, \"My father is bowling tonight. He won't be back for hours. Make love to me.\"\n\nThey went upstairs and silently disrobed. They got into bed and went through the motions. Their hearts weren't in it, but their bodies reacted. Billie had a small orgasm while Tommy ate her pussy.\n\nHe put on a rubber and fucked her in the missionary position and doggy style. He pulled out, got on his back, and said, \"Ride me.\" \n\nShe mounted him and, mechanically, they had sex. His hands were busy as he paid special attention to her nipples, breasts, and clit. \n\n\"Oh. Oh. Ohhh,\" she moaned softly as her orgasm ripped through her body. \n\nTommy removed his finger from her button. He pumped his cock into her and filled the condom. She collapsed on top of him. They lay together for many minutes. \n\n\"I wasn't sure I would ever feel anything again,\" Billie said.\n\n\"I know what you mean. We will never forget Mrs. Brenner. If not for her, there wouldn't be an us.\"\n\n\"What advice did she give you?\" Billie asked.\n\n\"She taught me how to love you.\"\n\n\"She did a good job.\"\n\nThe End"
    ],
    "authorname": "regularguy13",
    "tags": [
        "virgin",
        "blowjob",
        "18-year-old",
        "cum",
        "cunniligus",
        "fingering",
        "older woman",
        "romantic",
        "outdoor",
        "embarrassment"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/her-last-affair"
}
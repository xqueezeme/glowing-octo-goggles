{
    "title": "Dana Ch. 03",
    "pages": [
        "Back to the present...as you remember.\n\nI hear the car pull into the driveway and that brings me back to the present. Who knows what Dana has in store for us tonight. I start to light the candles as I hear the car door slam. I'm all ready for her... to fuck and be fucked, to please and be pleased. I walk to the front door and as I reach to open it, I hear a second car door slam. A smile spreads across my face and I think \"Oh yeah, It's going to be a wild Saturday night.\"\n\n*\n\nDana greeted me with, \"Hey Sweety, have I got a surprise for you!\"\n\nShe reached her hand back and pulled someone from behind the door.\n\n\"Jon, this is Kristen. Kristen, this is my husband Jon,\" Dana said with a smile on her face.\n\nStanding in front of me was the most stunning sight I had ever seen. Not only was Kristen beautiful, but she could have been Dana's sister. The same beautiful crystal blue eyes, the same full, pouty lips, the same magnificent set of boobs, the same long, shiny blonde hair. Sisters... hell they could have been twins.\n\nThey must have seen the look of surprise on my face, because they both laughed at the same time.\n\n\"Unh-Hhn. That's how I thought you'd react,\" Dana said. \"If you can put your tongue back in your mouth long enough, maybe you could make us a couple of drinks.\"\n\nTurning to Kristen, Dana bowed slightly, waving her arm in a 'Welcome to my Domain' sweep and added, \"Come on in Kristen, I think he likes you,\" and they both giggled.\n\nWhen I came back into the living room with their drinks, the girls were sitting close together on the couch. Dana was twirling a strand of Kristen's hair in her fingers, and they both looked like the cat that ate the canary.\n\nAs I handed them their drinks, Kristen said, \"Dana's told me all about you, Jon. I think you guys have a great relationship\"\n\nI felt my face turn red as I blushed. \"E-E-Everything?\" I asked nervously\n\n\"Everything!\" Kristen smiled \"We seem to have a lot of the same interests\"\n\nDana reached behind Kristen's neck and untied her blouse, lowering it to expose her breasts to me. Kristen kept full eye contact with me as if nothing unusual was happening. I watched as Dana took Kristen's breast in her hand and start massaging and squeezing it. Took her nipple, which had hardened, in her thumb and finger and pulled.\n\n\"She has beautiful breasts, doesn't she Jon?\" Dana asked\n\nAll I could do was nod in agreement.\n\n\"Would you like to feel them?\" she added.\n\n\"Y-e-a-h, I would,\" I stammered\n\nDana leaned over and took one of the nipples in her mouth. Kristen tilted her head back and cradled Dana's head in her palm. When Dana straightened up, she asked me, \"Would you like to suck them?\"\n\nI looked straight into Kristen's eyes and nodded yes.\n\nDana leaned back down and sucked Kristen's nipple back into her mouth and bit down lightly. Kristen's eyes fluttered and she moaned.\n\nDana looked up at me and said, \"Come... join us.\"\n\nI walked towards the couch as Kristen stood to undress completely. She was breath-takingly beautiful. She had on a pair of black dental floss thong panties that framed her heart shaped ass perfectly. Bending over at the waist to unstrap her high heels, she gave me an unbelievable view of her ass and pussy from behind. Her legs were long and athletic like Dana's and seemed to go on forever.\n\n\"Be still my beating heart,\" I thought to myself.\n\nKristen turned to face me, sauntered up, put her arms around my neck and kissed me softly. I felt her tongue on my lips and opened my mouth. She kissed me deeply for several minutes, groping my cock through my pants. When I looked over at Dana on the couch, she was naked to the waist and was playing with her nipples as she watched us.\n\nShe mouthed silently to me, 'I Love You' and blew me a kiss.She was telling me it was OK to continue with Kristen.\n\nI reached down and cupped Kristen's asscheeks in my hands. They were as soft and perfect as they looked. I pulled her to my crotch, grinding my cock against her belly.\n\nBreaking our kiss, she said, \"Oh my, is that all you?\"\n\nShe unfastened my belt, unzipped me and pulled my pants down around my ankles as she got to her knees.\n\n\"I love your panties,\" she said as she rubbed me through the satin panties before taking my cock out.\n\nKristen leaned forward and took my cock in her warm mouth. She did things with her tongue that I never knew were possible. She used the tip of her tongue to probe the slit in my cock tasting some pre-cum that had formed there.\n\n\"Ummm, you taste good too!\" she said\n\nTaking my cock back in her mouth, she twirlled her tongue around and around the head as she bobbed her head up and down, never taking more than a quarter of my cock into her mouth. She got me close to coming several times, always backing off and squeezing the base to keep me from going over the edge. It felt so good that my cock ached. Stroking my cock with one hand as she squeezed my balls with the other she looked up at me and asked, \"Did you like that, Jon?\"\n\n\"Oh yeah,\" I answered. \"That was amazing.\"\n\nShe stood up and helped me take the rest of my clothes off, leaving the panties on even though my raging hardon was sticking halfway out of the waistband.\n\nTaking my cock in her hand, she led me back to the couch where she got on her knees between Dana's legs.\n\n\"Hey sweety, how are you doing?\" she asked Dana\n\nDana stroked Kristen's hair and said, \"I loved watching the two of you.\"\n\n\"Yeah, He does have a beautiful cock and he tastes great.\" Kristen said, \"But it's you I want to fuck right now.\"\n\nWith that, she lifted Dana's ass off the couch and pulled her panties off. I watched as Kristen put her head between my wife's legs, her long blonde hair cascading over Dana's thighs, and started licking her pussy. Dana wrapped her legs around Kristen's head and let them drape over her shoulders, fucking Kristen's face.\n\n\"O-h-h-h Kris,\" Dana moaned, \"You know exactly what I like.\"\n\nDana looked up at me, beckoning me with her hand, \"Come here Babe, I want you to get some of this,\" she said.\n\nI kneeled down next to Kisten and watched her eat my wife's pussy. It was obvious to me that this wasn't the first time the two of them had fucked, they were too familiar with each other. And that made me horny as hell just thinking about it!\n\nDana took Kristen's head in her hands, pulled it tight against her pussy, and started to hump against her mouth. Whatever Kristen was doing to Dana, it must have been good because Dana's breathing became shallow and more labored. I could hear a soft mewling sound coming from deep inside Dana as she took her own nipples between her fingers and pinched. Her moaning grew louder and she was fucking Kristen's face at a furious pace. Her head was thrown back and I knew she was about to come. I reached over and pulled Kristen's hair out of the way so I could see what she was doing.\n\nShe had Dana's clit, which had swollen up like a little cock, in her mouth and was biting and sucking on it, as she fucked at least two fingers in and out of her pussy.\n\nDana moaned, \"OH Fuck, Kris.... you eat pussy like no one else.\"\n\nI should have felt a tinge of jealousy, but I didn't. This was hot! My wife was having her pussy eaten by another woman, and I was watching. The fact that they looked so much alike was surrealistic, almost like watching Dana fuck herself... and it was HOT!!!\n\nI started rubbing Kristen's ass and slipped my finger between her ass cheeks to her pussy. She was so wet, that her lips parted easily and my finger slipped inside. I heard a muffled moan from Kristen, as she had a mouthful of pussy. She started fucking back against my hand. I felt her pussy throbbing slightly and thought she may have cum with her first orgasm of the night.\n\nDana gently pushed Kristen's face off her pussy and told her, \"Kris, put your cock on!\"\n\nKristen reached into her handbag and came out with a big strapon dildo. It was black, at least 9\" long and pretty thick around the base. I watched as she put it on and got back between Dana's legs.\n\n\"Help me put it in her pussy,\" Kristen said to me. \"Help me fuck your wife.\"\n\nI reached out and took the rubber dick in my hand and was amazed at how real it felt. I guided it to my wife's pussy and rubbed the head between her lips to lubricate it.\n\nDana said, \"Suck her cock Jon, make it wet for me.\"\n\nKristen turned slightly giving me access to her cock. I leaned towards her and took it in my mouth.\n\n\"Yeah, that's it babe. Suck her cock.\" Dana moaned\n\nKristen took my head in her hands and started to slowly fuck my mouth, sliding her cock in and out. I was afraid I would choke if she tried to get all of it down my throat, but Kristen was good. She seemed to know exactly how much I could take.\n\nShe said, \"You do that good... your wife told me you were a good cock sucker. Yeah, that's it suck my cock. Make it wet so I can fuck your wife.\"\n\nShe pulled it out of my mouth, and I guided it back to Dana's pussy. Kristen pushed her hips forward and I watched in amazement as the huge dildo disappeared into my wife's pussy.\n\nThe contrast of the big black cock against Dana's shaved, smooth white skin was amazing. Her lips opened like flower petals and stretched around the huge cock. Kristen was careful while Dana's pussy adjusted to the size. She started slowly, rocking her hips in and out of Dana's pussy slowly. Every time she pulled out, I could see how wet the cock was with Dana's juices.\n\n\"Fuck me harder,\" Dana whispered, \"Please, fuck me harder\"\n\n\"You like having your husband watch you getting fucked, don't you?\" Kristen asked.\n\n\"Yes, oh God, yes!\" Dana answered.\n\nKristen picked up her pace and fucked Dana faster. I couldn't believe that my Dana could take a cock so big into her tight little pussy... but she took it all.\n\nI reached out and put my hand on Dana's pussy, letting the cock slip between my fingers as Kristen fucked in and out of her. Using my thumb, I rubbed Dana's clit, which had hardened like a little cock. Dana started humping faster and faster. She was mauling her tits in her hands and pulling hard on her nipples.\n\n\"OH-OH-OH,\" She whimpered.\n\n\"Yeah, baby... you like it when I fuck you like this, don't you?\" Kristen said. \"Tell your husband how much you like my cock.\"\n\n\"Oh Kris, Oh Kris,\" Dana said, \"I love your big cock... you fuck me so good!\"\n\nThen she let out a loud moan and came violently. Kristen was fucking her deep and hard. She never let up as Dana came again and again. When Kristen pulled her cock out of Dana, she pushed my head towards the cock and said, \"Taste your wife's pussy on my cock, lick it clean.\"\n\nI took the cock in my mouth and sucked it dry, tasting the familiar tangy sweetness of Dana.\n\nReplacing Kristen between Dana's legs, I leaned forward and sucked her clit into my mouth and nibbled on it. Dana was humping my face when I felt my panties being pulled down. Kristen grabbed me by the hips and I felt something wet and cool against my opening. She lubed my asshole with her fingers, putting first one then two fingers in my ass.\n\nDana said, \"Fuck him Kris... fuck him hard.\"\n\nKristen answered, \"Do you think he can take a cock this big in his ass?\"\n\nDana answered, \"You can try.. and if he can't, we'll switch over to mine.\"\n\nKristen put the cockhead up against my asshole and pushed gently. I thought she was was going to split me in two. I felt the cockhead penetrate my ass and after the initial shock and pain, it started to feel kind of good. Kristen hesitated a moment to let me adjust to the size, then she slowly pushed more of the cock into my ass.\n\n\"How's it feel babe?\" Dana asked me.\n\n\"Big,\" I answered. \"Fucking big.\"\n\n\"She won't hurt you!\" Dana added, \"If you want to stop at anytime, just say so.\"\n\nDana reached under my belly and started stroking my cock as Kristen fucked my ass. It was starting to feel better, much better than I expected. Kristen took my hips in both hands and drove all 9\" of cock deep into my ass. I never felt so full before in my life.\n\nKristen said, \"Oh yeah, Dana... he can take it. He's a natural, I'm all the way in his ass.\"\n\nIn the meantime, what Dana was doing to my cock was something else. She had gotten up under me and was licking my balls while she jerked me off. That, along with Kristen fucking my ass was leading to a massive orgasm.\n\n\"Do you want more?\" Dana asked me, \"Do you want her to fuck you harder?\"\n\n\"Y-Y-Yeah, please, fuck me hard.\" I answered.\n\nKristen fucked me harder and deeper than I've ever been fucked before. Dana was stroking my cock, matching Kristen's strokes.\n\n\"Oh God, Oh God\" I said trying to catch my breath.\n\n\"That's it babe, cum for me.\" Dana said.\n\nI exploded. It felt like a gallon of come erupted from deep in my balls and out my cock. I came and came and came. When I looked down at Dana, she was covered in it, all over her tits and belly. She took some on her finger and brought it to her lips.\n\nFor the next hour I watched as Dana and Kristen fucked and sucked each other numerous times. I found out that they had met at the gym, and were as amazed as I was at how much alike they looked. They had shared a shower after workout one night when the gym was almost empty and scrubbing each other's backs had led to feeling each others tits, and a trip to the sauna ended with them in an multi-orgasmic 69 coupling.\n\nBut that's another story for another time. This was the start of a great weekend.... and I have to get back to Dana and Kristen. See ya!"
    ],
    "authorname": "primacord",
    "tags": [
        "strap on",
        "femdom",
        "lesbianism",
        "anal",
        "domme"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/dana-ch-03"
}
{
    "title": "I Kissed a Girl Ch. 08",
    "pages": [
        "\"We'd prefer to not do adoption,\" Jenna said. She reached for another scone, leaving a trail of sugar crumbs from the plate to her mouth.\n\n\"Then your options are limited,\" Joanie shrugged, sipping her coffee.\n\n\"You could always do it the natural way. That Brad guy from your wedding has some nice assets that would make a beautiful baby.\" Meredith grinned at me with a wink. \"I'd do it.\"\n\nJoanie smacked her paper cup down on the wooden tabletop. \"If you even\u2014\"\n\nMeredith held her hands up. \"I was joking!\"\n\n\"No man is sticking his dick in me or my wife,\" Jenna snorted.\n\nMeredith shrugged. \"So that leaves artificial insemination or in vitro. Either way, it's basically being stuck with a turkey baster.\"\n\n\"Enough!\" I yelled, shoving my chair back from the dining room table. \"I can't believe you're even discussing this!\"\n\n\"I'm sorry, Kat.\" Jenna stood and put her hands on my shoulders. \"I didn't mean for the conversation to get out of hand.\"\n\n\"Well, it did.\" I jerked out of her grip and stomped towards the stairs.\n\n\"I think that's a night, ladies,\" Jenna said behind me.\n\nA chorus of goodbyes echoed from the main floor as I hurried up to our bedroom. I slammed the door and threw myself on the bed face first. I wanted so badly to cry, but I had no tears. Feelings of resentment and longing combined with guilt. They all churned together in my stomach.\n\nThere was a soft click as the handle turned and the door opened. Another click told me the door had closed again. The lights remained off. Then the bed shifted.\n\nJenna didn't say a word. She lie beside me and pulled me into her arms. Her body was warm as she held me against her. Her even breathing tickled the back of my neck.\n\nThe longer we lay there, the more I calmed down. I no longer felt like I wanted to cry. If it had been her intention, it had worked.\n\n\"Thank you,\" I whispered and let out a deep sigh.\n\n\"Talk to me, Kat.\" She brushed my hair from the side of my face, tucking it behind my ear. \"It's just you and me now.\"\n\nI turned so I was facing her. Her arms tightened around me, and she tilted her head so our lips met. Then she put some distance between us but kept one arm under my neck, her fingers lightly playing with my hair.\n\nI gave her a sad smile. \"I guess I want a baby.\"\n\n\"But?\"\n\nWhen I blinked, a tear trickled down my cheek. Well, shit, now the water works decided to turn on? \"I know you said we had the perfect life now. Our home, our jobs, our friends. If it's already perfect, I shouldn't want more.\"\n\n\"Oh, sweetie.\" Jenna wiped away my tears with her thumb.\n\nI moaned as she pressed her soft lips against mine. Her tongue teased and searched while her lithe fingers cupped my cheeks as she rolled me onto my back. Then she crawled on top of me.\n\nI let out a shaky laugh as she broke the kiss. \"Jenna, I know there's been a lot of advancement in science through the years, but we can't make a baby this way.\"\n\n\"I know. Now shut up.\"\n\nShe kissed me again before she sat up and straddled my waist with her knees on either side of my hips. Her delicious mouth spread into a wide smile as she rubbed her crotch against mine. Then she tugged the hem of my shirt out of my shorts.\n\nI was holding my breath when she bent to run her tongue from my belly button up to the center of my bra. Her eyes lifted as she pushed up the material of my shirt. One of her hands pulled the edge of one bra cup down, her tongue darting out to lick my skin.\n\n\"Mmm. You taste yummy.\"\n\nI arched my back and gasped as she laid the flat of her tongue on my nipple and wiggled it back and forth. \"Oh, God, please don't stop.\"\n\n\"I have no intention, sweetie.\"\n\nJenna sucked my nipple into her mouth. She teased it with her tongue then her teeth.\n\nI gripped her arms, our eyes fixed on each other's. The more she lathed the tender tip, the shorter my breaths became. Then I was mewling incoherently, begging her to take me further into ecstasy.\n\nShe acquiesced with a moan and lifted her weight off my lower extremities. Her hands undid my button and zipper. But she took her time tugging my shorts down my legs.\n\nI gasped again as her nails scratched my skin when she went to remove my panties. I stared at her over the bunched up material of my T-shirt that rested between my bra and my chin. My bared breast bulged between the fabric mounds, the nipple still wet with her saliva.\n\n\"Here, Kitty, Kitty,\" Jenna called, spreading my legs, her eyes still on mine.\n\nThe second her tongue touched my clit, I cried out. It morphed into a groan as she pressed between my labia. My hands cupped my breasts\u2014one still encased in the satin cup\u2014squeezing in time with her licks. \n\nShe closed her eyes and made a purring sound. It rumbled against my pussy. Her fingers gripped my thighs as she held them apart.\n\nHer panting and my mewling combined. My hips kept rising. She kept forcing me back to the bed.\n\nWhen she brought me over the edge, she cried out with me. I was still trying to recover as she crawled up to lie on her back next to me. I tasted my tangy release on her lips as she turned her head and slowly ran her tongue over my lips and into my mouth. \n\n\"What the hell was that? You came, too?\"\n\n\"Mmm hmm. I've been mentally imagining that you're reciprocating whatever I do to you. I've had little flutters before.\" Jenna flitted her fingers over my exposed stomach to demonstrate, which made me shudder. \"But this is the first time I've come along with you like that. Not as good as you doing it to me, but it's definitely a trip.\"\n\n\"You are amazing.\" I returned her kiss, my tongue lightly outlining her lips.\n\nJenna just smiled at me and then turned to stare at the ceiling.\n\nAfter several minutes of lying in the dark silence, I almost drifted off. I felt her take my hand and lace her fingers through mine. She rolled to face me again, our joined arms now bent between us.\n\n\"So, my Kitty Kat, we're going to have a baby?\"\n\n###\n\nA week later, I pushed away the AI and IVF brochures along with a stack of donor details spread out on the table and closed my eyes. I'd read through the first two before my brain hurt with all of the technological terms. Catheters? Petri dishes? Drugs to help the procedure to be effective? Ugh.\n\nWhich made me think of Danny for some stupid reason. How I had hoped that someday, we'd have a child together. It would have been so much easier.\n\nBut that was no longer my life.\n\nNow that I had chosen to be with Jenna, I had promised I wouldn't have sex with a man. Not even to get pregnant. There would be too many risks. Of growing attached to each other. Of him wanting to be involved in the child's life. Of feeling guilty if I didn't tell him why we were having sex and I suddenly disappeared after I'd done the deed.\n\nWe also agreed not to do a surrogate if possible. Again, there was the risk of attachment. Although, Meredith, Jenna's sister, said she would be the perfect recipient since she'd be an aunt anyway. Of course there was adoption, but that was only an option after we'd exhausted all others first.\n\nJenna's test unfortunately found her to be sterile. She had said she was disappointed. But honestly, I think she was secretly grateful that she wouldn't have to carry the baby.\n\nSo that left it up to me. My test results practically said I was a preheated oven. Oh joy.\n\nAs much as I looked forward to being a mother, I was not looking forward to the effects that led up to it. Morning sickness. Swollen legs, feet, and hands. Sleepless nights. Back aches and migraines. Strange food cravings. And that wasn't even considering the labor pains and the actual birth process.\n\n\"Kat? You're up early.\" Jenna bounded down the stairs and disappeared into the kitchen for a minute. She reappeared with a glass of orange juice. She stepped behind my chair and leaned over my shoulder. \"Oh, you started reading them without me?\"\n\n\"I didn't get very far. It's all very complicated.\"\n\nShe kissed my cheek. \"How about we pick out our perfect male tonight over dinner. Italian?\"\n\nI snorted. \"The man or the meal?\"\n\n\"How about both?\"\n\n\"Sure, sounds like a plan. What do you want for breakfast?\"\n\n\"I have a meeting first thing, so I need to get going. Do you have lunch plans?\"\n\n\"Yeah, all of us girls in the admin office are going out to celebrate Becky, the intern's, birthday.\" I grinned and rolled my eyes. \"She's turning twenty-one.\"\n\n\"What, no after-hours party to get her drunk?\"\n\n\"We're trying to set a good example. Plus she has plans with her girlfriends tonight. I don't feel much like going out to get plastered, either.\"\n\nJenna downed her juice in one gulp. \"So I should skip getting a bottle of wine?\"\n\n\"I said 'going out.' It's perfectly acceptable to get plastered at home. Besides, I won't be able to drink much longer.\"\n\nShe arched one eyebrow at me. \"So two bottles?\"\n\nI raised my hand, and she gave me a high five. \"That's my girl.\"\n\n\"Do you want D'Angelo's or that little bistro we liked up on Cottage Avenue?\"\n\n\"The bistro. It reminded me of our trip to Florence.\"\n\n\"Perfect.\" Jenna gave me another kiss, this time on the lips. The taste and scent of citrus lingered as she pulled away. \"I love you, Kat. I'll see you after work.\"\n\nI held my hand against her cheek for a moment, smiling up into her eyes. \"I love you, too, Jenna.\"\n\n###\n\nLately, it had been babies on my mind. Keeping me awake at night with excitement, and then worrying during the day about if we'd made the right decision. Did all women go through this? Hell, I wasn't even expecting yet and I was already having mood swings.\n\nThey closed our office for a few weeks after the summer session to give us a bit of a break. But with the fall semester getting ready to start in a month, we were back behind our desks processing paperwork for new and returning students. Lunch with my coworkers before it all got crazy again was a nice distraction from both the mundane and my constant thoughts.\n\nWe talked about strange things that had happened in the office and on campus over the years. Since I'd just started two winters ago, most of it was new and enlightening to me. And I never felt left out at all, although I'd not been part of the group who'd experienced the stories firsthand.\n\nJenna had been right. We fit in perfectly here. I wouldn't have wanted to live anywhere else.\n\nAfter lunch, we decided it was a perfect day to clean the office and our workstations. They assigned me to dispose of old paperwork, so I busied myself for the rest of the afternoon with the company of an industrial shredder. I lost track of time and didn't realize how late it was until I'd emptied the last box. Most everyone else was gone when I left the stack of empty boxes to strip the labels off the next day and washed my hands before heading home.\n\nI entered the house with an apology on my lips and stopped short. Jenna's car had been in the garage, but the house was mostly dark. \"Hello?\"\n\nJenna jumped up from where she was sitting on the couch. In the shadows. It scared me half to death. She hugged me tight. \"Welcome home, sweetie!\"\n\n\"Hi.\" I tried to catch my breath and take in the surroundings as she led me toward the stairs. The dim light from over the kitchen sink showed the dining room table was set for two with unlit candles in the middle. I sniffed but didn't smell any food.\n\n\"Go upstairs and have a nice bath.\"\n\n\"What about dinner?\" I walked backwards up the stairs as I asked the question.\n\n\"It can wait.\" She shooed me with her hands, and I hurried the rest of the way up to our bedroom.\n\nMy muscles ached as I sank into the hot, sudsy water. I silently thanked my wife for insisting I take the time to relax a little. When I was done, I felt refreshed, although a tad sleepy.\n\nI was going to grab a pair of sweats and a clean T-shirt, but I found a short, red dress already laid out on the bed. Well, okay. I could dress up for take-out dinner if that's what she wanted.\n\nWhen I returned downstairs, the candles on the table had been lit. The scent of garlic bread and meaty marinara sauce finally met my nose. My stomach growled noisily.\n\n\"That smells\u2014 Wow!\"\n\nJenna appeared with a plate of antipasto. She had changed into a tight, black pantsuit. Her hair was curled and flowing over her shoulders. After she set the plate down, she turned to me.\n\n\"You look amazing, sweetie.\" She brushed her lips over mine and clasped my right hand. \"Come, let's eat. You must be famished.\"\n\nI nodded and followed her to the table. \"But why the\u2014\"\n\n\"Shh. Just enjoy the meal, Kat.\"\n\nI nodded again. For the next thirty minutes, we fed each other from the variety of dishes she'd arranged between our plates. There was more than enough food, and plenty of wine to go with it. By the time we'd had our fill, I felt like I'd grown a dress size.\n\nJenna took my hand again and led me to the living room where she had me sit on the couch facing the cold fireplace. She turned on the track lighting above it, and I noticed a whiteboard on a stand. It had a heading written across the top: Must Haves.\n\n\"Now, tell me what kind of child should we have?\" She picked up a stack of paper, presumably the donor characteristics from the fertility clinic. \"A doctor? A scientist? Maybe a police officer or a fire fighter?\"\n\nI giggled and pulled a throw pillow onto my lap, hugging it to my belly. I grinned wider as I thought about how it would feel to have a baby growing inside of me. How nice it would be to have a little boy or girl running around the house.\n\n\"I've sorted the candidates into various piles. Should we start with hair or eye color? Anything we should eliminate right off the bat?\"\n\nI could suddenly only think of one absolute 'must have.'\n\n\"Jenna, come here.\" I held my hand out and beckoned her to me with my fingers. When she approached and took them, I tugged until she sat down next to me. \"I love what you did tonight. It was all very romantic. The food was delicious.\"\n\n\"What's wrong, Kat?\" She put her hand on my cheek, and I pressed into her touch.\n\n\"There's nothing wrong. Everything is just right. I know you put a lot of effort into this evening. But it really doesn't matter what we choose.\"\n\nJenna frowned. \"Of course it does.\"\n\n\"No, sweetie, it doesn't.\" I took her other hand in mine and squeezed tightly. \"Just because the father was a cop doesn't mean our child will choose that path. Or just because he's tall and muscular doesn't mean my own genes won't mess that up and our kid ends up short and overweight because he likes to eat Italian food more than his mothers do. All that matters is that our baby is healthy...that he or she is our child. The baby could be purple with yellow polka dots and have six legs. We'd still love him or her unconditionally. At least that's how I feel.\"\n\nShe sat there, just staring at our laps.\n\nIf she wasn't on the same page with me about this, we shouldn't move forward. I may not like it, but I'd learn to live with that decision. I held her hands and tried to think of something else while I gave her time to mull over my words.\n\n\"I'm sorry, Kat,\" Jenna said after a long while.\n\nI let out a shaky breath full of disappointment.\n\n\"You're right. We can't make the perfect baby. It doesn't matter what characteristics we choose off a piece of paper. I just want our baby to be happy and know we love him or her.\"\n\nI pulled my wife into my arms and cried on her shoulder. \"I love you so much, Jenna. We can do this.\"\n\n\"Yes, we can, Kat. And we're going to do this. Together.\"\n\n###\n\n\"Oh. My. God.\" I squeezed Jenna's hand and pressed my cheek against the cool bowl of the toilet. I was thankful I had just cleaned the bathrooms that morning. A lot of good it did the toilet now, though. \"I am completely empty. I don't understand how\u2014\"\n\nMy stomach lurched again, but nothing else came up. I saw stars as I clenched my eyes.\n\n\"Shh, Kitty Kat. It's okay.\" Jenna's soft voice was soothing in my ear as she rubbed a hand against my shoulder blades.\n\nI moved to a sitting position, my back against the shower door. A cool rag pressed against my forehead, and I sighed. \"You are so fucking lucky you can't have a kid.\"\n\nShe kissed my forehead. \"That's the hormones talking.\"\n\n\"No,\" I said, rolling my head back and forth against the glass door, making it rattle in the frame. \"That's regret talking. What were we thinking?\"\n\n\"Shh. You don't regret getting pregnant. Or at least you won't when you're holding our beautiful baby in your arms.\"\n\nI cracked one eye open to look at her. \"I'll remind you of that when our little rascal is screaming her head off at the grocery store. Or wrecks the car.\"\n\n\"Did you know that you're constantly referring to our baby as a girl these last few weeks?\"\n\nI closed my eyes again. I laid my free hand against the slight bulge in my belly. \"A mother knows.\"\n\n\"Do you think it's too soon to start painting the nursery? Buying clothes and toys?\"\n\nI swallowed, cringing at the bile aftertaste. \"Dr. Nayum said to wait until the second trimester. I know I may not sound like it right now, but I'm excited, too. We'll have plenty of time to go shopping.\"\n\n\"I know. I'm just a bit anxious. So are Meredith and Joanie. They are going to make wonderful aunts.\"\n\nI let her help me up from the floor. \"Yeah, they are. Just think, we shouldn't have too much trouble finding a babysitter if we want some time alone!\"\n\nJenna sat on the closed lid of the toilet while I brushed my teeth. \"I'm sorry I wasn't able to be there for the exam today.\"\n\n\"Please, stop apologizing. There will be plenty more appointments. It was mostly just talk of prenatal vitamins and what to expect for the rest of the first trimester.\"\n\n\"Did you ask the doc about your piercings?\"\n\n\"They should all be fine. Mostly, I'll have some discomfort as I get swollen. Especially on my clit. I may want to remove the nipple rings before I begin breastfeeding.\"\n\n\"But we can wait to do that until after the baby is born, right?\"\n\nI caught the reflection of her hopeful smile in the mirror and laughed. I know she loved my piercings. Sometimes even more than I did. \"We'll see. We could look into changing the rings to bars, as well. There would be less risk to the baby. But we can discuss that later.\"\n\n\"I think you should try to get some sleep.\" Jenna put her arm around me as she led me to the bed. When I tried to pull back the comforter and top sheet, she batted my hands away. \"Let me do that for you.\"\n\n\"I can still put myself to bed, Jenna,\" I laughed.\n\n\"Yeah, but I like to do it, too.\"\n\nWhen she stuck out her lower lip, I sighed sarcastically. \"Fine, you can put me to bed.\"\n\n\"Yeah!\" She grinned as she clapped and bounced on her toes.\n\nI shook my head at her. Sometimes I wondered which of us was the more mature.\n\nWhen she'd gotten the bedclothes the way she wanted them, she turned back to me and gestured to my side of the bed. \"Your royal bedchamber is ready, my dear. Fit for a queen.\"\n\nI stroked the back of my fingers against her cheek, my eyes a little blurry. \"You're my rock, Jenna. I wouldn't be able to do this without you. I wouldn't want to.\"\n\nShe hugged me tight and sounded a bit teary-eyed herself as she spoke. \"I wouldn't want to do it with anyone else, Kat.\"\n\n\"Thank you.\" I wiped my thumb under my eyes, drying any tears that had escaped.\n\n\"Now quit crying and get into bed.\"\n\nI felt a million times better when I was finally horizontal. The pillowcase was cool as I laid my cheek against it. I sighed and closed my eyes.\n\n\"I've got a report to work on downstairs. You have your phone. Call me if you need anything?\"\n\n\"Yes, Mom.\"\n\nI felt Jenna reach over me and wedge the body pillow behind my back. She kissed my forehead and then laid her hand on my belly as she'd grown accustomed to doing each night since we found out the AI procedure had worked.",
        "\"Goodnight, my Kitty Kat. And goodnight, my baby bird.\"\n\nI smiled sleepily. \"Goodnight Mama Swallow. We love you.\"\n\n###\n\nI was well into my second trimester when the girls at work decided to throw me a baby shower. Jenna and I had decided to decorate the nursery with a green-and-yellow Winnie-the-Pooh theme. So it wasn't the typical pink baby booties and bottles for decorations at the restaurant.\n\nWe hadn't decided on a name, yet, but we had narrowed it down to five first and middle names. I prayed that the ultrasound was right and we were having a girl. I think Jenna would be more disappointed than I would if it ended up being a boy.\n\nI almost cried when we opened Meredith and Joanie's gift of a trip to Hawaii once we were comfortable leaving our newborn alone with them. Then I did cry when my boss presented us with a scholarship to the college to be used when our daughter was ready to attend.\n\nJenna took a load and went out to pull the car around to the front of the restaurant while my coworkers helped clean up and gather the rest of the gifts and leftover food. I sat like a bump on a log in a cushioned chair and sipped my ginger ale. I passed the time rubbing my belly as our baby bird danced while I talked softly to her.\n\nI didn't have as much swelling as I'd expected. And I'd definitely not gained as much weight as both Dr. Nayum and I thought I would. Especially since I couldn't get enough of Ben & Jerry's Half Baked ice cream. Then again, Jenna had insisted I walk on the treadmill at home when possible so I didn't get stiff joints just sitting around. As a result, I carried our volleyball-sized baby nice and high and was able to wear cute maternity clothes. And the morning sickness had departed a few weeks ago, thank the Lord!\n\nWhen everyone had left except Meredith and Joanie, and Jenna still hadn't returned, Meredith suggested she go check on her. Then Joanie said she'd go with her just in case Jenna needed some help. Although they were persistent I stay right where I was, I insisted on not being left behind. So the two of them grabbed a few bags of gifts, and I waddled after them out the front entrance.\n\nI heard yelling as we reached the side of the building. I couldn't see anything but several parked cars. Both Meredith and Joanie suddenly stopped, and I ran into them. Between their shoulders, I saw a pile of open boxes strewn on the sidewalk. Baby clothes were falling out of one of them. Next to the mess was Jenna's car with the rear passenger door open.\n\n\"Jenna!\" I tried to push past my sister-in-law, but she had dropped the bags she was carrying and turned to stop me.\n\n\"Why can't you just leave us alone?\" Jenna was crying.\n\n\"Because I love you!\"\n\nLauren?\n\nI shoved harder against Meredith. But now Joanie was blocking me, as well.\n\n\"How the hell did you\u2014\" Jenna started.\n\n\"I found Brad's wedding invitation.\" Lauren's voice was so high pitched and she was talking so fast, she sounded like she was on drugs. \"Your address was on it. It took awhile to track you down. That crazy little cocksucker hid you away from me, but now\u2014\" \n\n\"You're the one who's crazy, bitch!\" I yelled, breaking through the barrier of arms holding me back. \n\n\"Kat, no!\" Jenna screamed.\n\nI heard a loud crack, and then my legs crumpled beneath me.\n\nDeep-sea diving. That's what it felt like. I'd only done it once, and it had only lasted a few minutes before I had freaked out from the intense pressure all around me and admitted defeat. Failure.\n\nJust like before, my brain told me to head back to the surface when I couldn't breathe. As hard as I tried to swim upwards now, though, the further I felt pulled down. But I wouldn't give up. I couldn't give up.\n\nIt felt like I'd been trying for hours when I was finally able to force my eyes open. Then I was suddenly rushing through the water. I broke through the surface to hear screaming as my lungs sucked in blessed oxygen. People were standing over me, calling out my name.\n\nThat's when I felt the searing pain in my side. It pierced like a red hot poker right by my ribs and then quickly spread up to my armpit. I tried to reach out but couldn't move my arm. I opened my mouth, but nothing came out.\n\nDespite my disorientation, my first thought was of Jenna. Then I thought of the baby. I cried and screamed at the intensifying pain.\n\nSuddenly, breathing became a little easier. And then all discomfort was gone. I wondered if I was dying.\n\n###\n\nA steady, beeping sound was the first thing that processed in my head. Then I smelled the nauseating, antiseptic stench that all hospitals had. Soft whispers of people talking nearby reached my ears.\n\n\"The baby\u2014\"\n\n\"\u2014see until\u2014\"\n\n\"\u2014be okay\u2014\"\n\nThe more they talked, the more distinct the voices became.\n\n\"Her fingers moved!\" That sounded like Meredith.\n\n\"Kat? Are you awake?\" Joanie maybe?\n\nWarm hands enveloped mine.\n\n\"Mrs. Swallow?\" A male voice this time. \"Can you hear me? Try opening your eyes.\"\n\nI squeezed them tight instead as a marching band decided to practice between my ears. I licked my lips and mumbled, \"I feel like shit.\"\n\n\"Oh, Kitty Kat,\" a familiar voice said in my ear as soft lips pressed against my cheek. My Jenna.\n\nI managed to crack one eyelid. Even though that small action made my head throb more, I forced my other eye to open. I had to see her. To know she was really there.\n\nA pair of searching, violet eyes were just inches from mine. They were glossy. As they blinked, the dark lashes surrounding them parted with teardrops clinging between them.\n\n\"Why do you have to be so gung-ho?\" Jenna's voice caught as she spoke.\n\nI dropped my gaze to her lips, which she suddenly licked. \"Because I love you so much.\"\n\nShe frowned at me. \"You scared me to death. Don't do it again.\"\n\n\"I'm sorry. I just reacted when I knew she was there.\" I took a deep breath. Then I cringed.\n\n\"You're going to be very tender for awhile, Mrs. Swallow,\" the male voice said on my left.\n\nI turned my head and saw an older gentleman in a white coat standing beside my hospital bed, his hands busy with pressing buttons on a machine with a flashing number. A plastic bar on his left chest pocket said his name was Dr. Halstad.\n\n\"I have you on a very low dosage of painkillers so not to harm the baby...\"\n\n\"The baby!\" I tried to sit up and reached out blindly. A hand grasped mine, but Dr. Halstad gently pressed my shoulders until I was flat on my back again.\n\n\"She's fine,\" Jenna said as I swung my head to see her again.\n\n\"You're a very lucky lady,\" Dr. Halstad said. \"The bullet was lodged just below your right armpit. There should be no permanent damage. But I want you to get weekly checkups with your obstetrician just to be safe. In the mean time, get some rest, and you can go home in a day or so if you're feeling up to it.\"\n\n\"Thank you, doctor,\" Jenna said, reaching across me to shake his hand.\n\nHe nodded to both of us and returned my chart to the bin attached to the end of the bed. \"I'll check back on you this evening.\"\n\n###\n\n\"When are they going to be done?\" I mumbled, straining my neck again as I tried to see out the glass wall of my room in the ICU. I'd thought it was overkill to have me up here, but I'd found out that Dr. Nayum, our obstetrician, had insisted on it for the sake of the baby.\n\n\"I could close the curtain, if that would help?\" Joanie said from where she sat on my right.\n\n\"No, I'd rather be able to see them.\"\n\n\"You need a distraction,\" Meredith said, flipping on the TV.\n\n\"Shut that off!\" I snapped at her. \"What I need is to know what they're saying.\"\n\nShe obeyed and slowly lowered the remote control.\n\nOut of my peripheral vision, I saw her turn her head to following my own gaze where Jenna stood talking to two police officers by the nurses' station. They'd been out there at least thirty minutes after they'd interrupted my dinner.\n\n\"I bet she's pressing charges,\" Joanie said. She scooted her chair closer to my bed, and I cringed at the screeching sound the rubber tips on the legs made against the linoleum.\n\n\"She better,\" Meredith huffed.\n\nWe watched the silent conversation for another five minutes before the officers shook Jenna's hand. Then she was heading back toward my room. We didn't even try to act as if we were busy doing something else.\n\n\"So?\" all three of us said as the glass door slid open to my room.\n\n\"Lauren has been charged with attempted murder and unlawful possession of a deadly weapon,\" Jenna said with a sigh. She took the chair on my right as Meredith vacated it. \"She signed a confession and is taking a plea deal of twenty years. They're working on seeing if she can serve her time back in Illinois.\"\n\nI closed my eyes and placed my hands on my belly. Oh, baby bird.\n\n\"It's going to be alright, Kat,\" Jenna whispered in my ear. Her hand covered mine, and our daughter kicked her agreement. \"We are going to be alright.\"\n\n###\n\n\"I don't want it!\" I squeezed my eyes shut and gripped the bedsheet as I panted.\n\n\"Breathe in and out like they taught you in Lamaze class,\" Meredith said, wiping my forehead.\n\n\"Fuck Lamaze, I just want to...Oh, God!\" I screamed as another contraction hit me.\n\n\"Call the nurse, Joanie,\" Jenna said. \"She's getting an epidural.\"\n\n\"No,\" I moaned, shaking my head.\n\n\"Shh. It's okay, sweetie.\" Jenna took my hand and held our clenched fists between us as she leaned down and kissed my lips. \"Look at me.\"\n\nI focused on her violet gaze. Her radiant smile. Her perfectly combed hair that she'd pulled back in a braid. How the sweat on her own forehead just made her face glow. How the scrubs she'd been given fit her like a glove, emphasizing her luscious breasts that I'd been nuzzling just a few hours ago when my water broke.\n\nMe? I was in a stupid hospital gown with my ass bared to the world. My hair was wild, wet, and half-plastered to my face. Everything about me ached, especially my back, my right armpit, and my left hand. The latter two were perpetual reminders of my war wounds, although the pain was dull or non-existent most of the time with my hand now.\n\n\"I hate you.\"\n\n\"I know. I love you, too, Kat.\" The love of my life just smiled at me.\n\nI had recovered from another contraction when the nurse came in to check my dilation. Satisfied that we were on the right track, she started the epidural. I wanted to strangle her when she chirped, \"It won't be long now.\" I'd already been there for three hours.\n\nJoanie and Meredith pampered me with ice chips and cool rags while Jenna gave me a massage in between the nurse's check-ins. I tried not to look at the clock, but I couldn't help it. I was secretly hoping to hold out until after midnight.\n\nSix hours later, I was exhausted from pushing. Jenna hadn't left my side, although Dr. Nayum had shooed Meredith and Joanie out of the birthing room. A nurse stood on each side of bed I'd been moved to, holding my feet and knees up and apart.\n\n\"One last push, Kat,\" Dr. Nayum said.\n\n\"You can do it.\" Jenna blew her breath slowly across my forehead as I squeezed her hands to death. \"That's a good girl.\"\n\nI'd never felt so much pain in my life. I'd thought my little volleyball belly was cute and small? Holy shit.\n\nI was still bearing down when I heard multiple voices telling me to stop, push just a little more, then stop again. What the fuck? I wasn't trying to parallel park a car here!\n\nThe pressure between my legs increased exponentially. Suddenly, a repetitive cry rose over my gasping, and I froze. My eyes met Jenna's, and she was holding her breath as well.\n\n\"Congratulations, Mrs. and Mrs. Swallow. It's a girl!\" Dr. Nayum said.\n\nI was crying as a pink bundle was laid in my arms. Her own cries quieted as I cradled her delicate head against my breast. She turned into me and began nuzzling at the fabric covering my swollen mound.\n\n\"Let me,\" Jenna whispered, helping me get the gown off my shoulder and freeing my breast.\n\nOur daughter moved her tiny mouth against my nipple\u2014sans-piercing to Jenna's dismay\u2014and eventually latched on to begin nursing.\n\n\"Looks like you have competition now,\" I grinned up at my wife.\n\n\"I'm more than happy to share with her.\" Jenna kissed the top of our baby bird's head and then kissed me on the lips. \"Although I do miss\u2014\"\n\n\"I promise to get new piercings once she's outgrown breastfeeding.\"\n\nShe grinned back at me. \"You'd better!\"\n\n###\n\nI had just woken from a nap and finished feeding the baby again when there was a soft knock on the hospital room door. Meredith and Joanie poked their heads in.\n\n\"Sorry, we're getting anxious,\" Meredith whispered. \"Is this a good time?\"\n\nI yawned. \"Come on in.\"\n\nThey crowded around the right side of the bed.\n\n\"You look a million times better, Kat,\" Joanie said. \"How do you feel?\"\n\n\"Tired but elated.\" I couldn't stop smiling. \"I've never been happier in my whole life.\"\n\n\"I will not take offense to that.\" Jenna turned from where she stood by the dark window. A pink bundle was swaddled in her arms.\n\nMeredith gasped. \"She's the most beautiful baby ever! I want to hold her.\"\n\n\"Me, too!\" Joanie nodded, practically bouncing on her toes.\n\nJenna pulled the blanket back further from a tiny, yawning face. \"May I present the newest addition to our family? Essie Mae Swallow. Born June 9th at 12:06am. Coming in at a petite 18 inches and 6.5 pounds. Ten perfect little toes and fingers.\"\n\nI laughed as the two new aunties oohed and ahhed over our bundle of joy.\n\n\"Look at that blonde hair.\" Joanie lightly ran her finger over Essie's temple.\n\n\"And those bright blue eyes,\" Meredith cooed. \"It'll be interesting to see if either change in the next few months. Are you still not telling us about the donor profile you picked out?\"\n\nI shook my head. \"As long as she's healthy, her daddy doesn't matter.\"\n\n\"Will you tell her about him?\" Meredith glanced at me as Jenna placed our baby in her sister's arms.\n\n\"Someday,\" Jenna nodded, making sure the blanket stayed tucked around Essie's arms and legs. \"But for now, all that matters is we love her.\"\n\n\"So how hard was it?\" Joanie took a seat beside my bed and crossed her arms on the sheet.\n\n\"Harder than I imagined.\" I smiled at Jenna. \"But well worth it.\"\n\nJenna nodded and sat beside me on the other side of the bed.\n\n\"Essie is going to need someone to play with.\" Meredith cooed at her niece and added in a baby voice, \"Yes, you will, won't you? Maybe a brother or sister.\"\n\nI felt the blood drain from my face.\n\nJoanie just laughed.\n\nJenna and I locked eyes as I said, \"Lord help me...\"\n\nBecause you never know what could happen when you kiss a girl.\n\n~ H"
    ],
    "authorname": "secretsxywriter",
    "tags": [
        "lesbian sex",
        "pregnancy",
        "lesbian"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/i-kissed-a-girl-ch-08"
}
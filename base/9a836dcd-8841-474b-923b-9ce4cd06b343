{
    "title": "Club Caribe",
    "pages": [
        "Happy hour never began until 8 PM. Leaving your desk earlier was a sign of weakness. Un-seriousness. An interest in staying in your current position forever. But when it got going, it quickly got silly. Now ice was tinkling in the glasses and everyone was decompressing fast. \n\nI was standing with my co-workers. Shelly was a slim, athletic brunette with a huge work ethic. She would work her way up or die trying. Toni was the gorgeous, brilliant, but manipulative one. I expected her to fuck her way to the top. Betty had a nice face, but she was frumpy and lumpy. I expected her to be a big success. She was my problem solver, which made her invaluable if not easy to look at. \n\nI was two years senior to them, so I was the nominal leader on group projects. But in our giant meritocracy, any of us could crater, and any of us could zoom ahead. It made everyone edgy.\n\n\"I hear ya goin' to de islands next weekend, mon,\" said Shelley in not-very-good mock-Jamaican. I had been planning to spend the long weekend with my intended fianc\u00e9e, Tiffany. I had bought the ring. \n\n\"Yeah...no. She just joined the other team,\" I said. \"She knew I was getting serious and she thought it was time to announce. You know, to save me the anguish, right?\"\n\n\"You're better off without her,\" said Toni. \"What are you doing tonight?\" She eyed me speculatively, like a lottery ticket.\n\nShelley had already started talking work with a colleague. Betty was the only one available to save me from Toni. It wasn't easy talking to her because she was constantly hunched over and looking at her shoes. She gave me a little smile and a chaste, arm's length pat, like I had just missed a foul shot. \n\n\"I really could have used some more notice,\" I whined. \n\n\"I'm really sorry,\" she said. \"Why don't you go anyway? That place has a rep for being pretty wild. You could drown your sorrows and find a new friend.\"\n\nI said I wasn't sure I could turn my emotions around fast enough. \"I think I need a little tea and sympathy before I move on. I might just fly home.\" She said she understood, and we parted company after a few more kind words.\n\nBut later, as I was leaving, Betty materialized at my elbow and walked me out. We both lived nearby -- a necessity with our work schedules -- and we strolled through the city gloom in companionable silence. The rush hour traffic had faded and the evening drunks were coming out. She stood straighter as we stretched our legs, but unfortunately it just made her look pigeon-breasted.\n\nWe started talking about Tiffany, and after listening patiently to my story for a block or two she asked whether I had really felt Tiffany was the one. I considered that kind of impertinent, but it started me thinking. Tiffany had all the right superficial attributes. Beautiful. Pretty smart. Wealthy family. Good schools and connections. Excellent tennis. My parents hoped and expected I would marry her. She'd fit right in. Except for the gay part, I supposed. Was she a soulmate? Maybe someday.\n\n\"Hard to say,\" I admitted. \"I don't want to dump on her. I really think this wasn't a choice she controlled. She was pretty distraught. She wished me well. But we had different interests, and understandably she seemed lukewarm in the sack.\" \n\nWe paused where our routes parted. \"Would you like to come up to my place for a quick drink?\" Betty asked. \"Maybe a little company would do you some good right now.\" \n\nI really didn't want to get involved, especially with a sack of potatoes like Betty. But to be nice, I accepted, despite our draconian non-fraternization policies. Also, I really could use the company.\n\nAnd she seemed so innocuous.\n\nShe lived in two rooms in a stylish glass tower. She pointed me toward a liquor store and asked me to pick up a six pack while she took a few minutes to change. \n\nI knocked exactly a few minutes later and heard a musical \"Just a minute.\" But when the door swung open it revealed a creature of total, cosmic gorgeousness: big boobs, boyish hips, long, long legs, wavy golden hair that fell down her back, and a face to die for. Brilliant blue eyes. Fantastic smile. All wrapped in a tight tee, tiny cut-offs and nothing else I could detect. The outlines of her nipples swung around distractingly in her shirt. I felt weak, but I hastened to introduce myself. \n\nShe said, \"It's me, silly!\"\n\n\"...?\" Me, being charismatic.\n\nShe looked down where I was looking, then looked up with a mischievous smile and shook herself. Her shirt heaved around like things lived in there. \"Like them?\"\n\nI did. \"Who are you and what have you done with my friend Betty?\"\n\n\"I just cleaned up a little,\" she said as she ushered me in. \"And please call me Liza. We're both Elizabeth, but I like to keep us separate.\" She took the six pack out of my hand and sat me on her couch. She grabbed two cans and sat at the far end.\n\n\"Multiple personalities?\" I asked. \"Should I run while I can?\"\n\n\"Same brew, different mug,\" she said. \"You know, don't mix work and play?\" She was still having fun with me. She handed over a can. I could definitely detect a little Betty in her movements -- I thought. Economical, assured. Why hadn't I noticed that Betty was graceful? \n\nNo, this was impossible.\n\n\"But Betty -- Liza - why do you -- how do you -- look so different in the office?\" I asked. \"God, you could be a movie star. You're the most beautiful creature in the whole company.\"\n\n\"I could also be a weather bimbo, or a sex harassment plaintiff, or the girl that made it on her looks, or the dumb blond. I've been several of those things, and I can tell you it is harder than you would believe to be taken seriously as an attractive woman. So I dress down.\"\n\n\"Dress down?! You're a different person in there. You're shorter. You creep around. You have lumps and bumps and another 40 pounds. You need glasses and you waddle....\" \n\nShe smiled approvingly.\n\n\"I just can't believe you're ... you.\"\n\n\"Glad to hear it,\" she said. \"But let me ask you this. If I showed up as a sex bomb, would it help my career?\"\n\n\"Well, you'd make a big splash and get recruited wherever you want. . . . and then I suppose guys would be all over you and making jokes behind your back, and then you'd be put in sales.\"\n\n\"See?\" she asked softly. \n\nI did. Sort of.\n\n\"I don't want to be immodest, but I can look in a mirror and I see my effect on people. The thing is, it's just luck. An accident of birth. Icelandic genes. It's not an accomplishment, just a gift. It doesn't make me a better person, but it might fool me into thinking I'm smarter and more interesting and funnier than I really am. And, it makes some women resent me and it means I have to turn away a certain number of guys. I often end up with the wrong kinds. A lot of good guys get intimidated and think I'm out of their league, and that leaves the egotistical assholes. \n\n\"So believe me, looking like this is a mixed blessing. Usually it makes life easier to hide behind Betty. On the other hand it can be fun to be Liza, like now. It's kind of a hidden superpower.\" \n\n\"I'll say,\" I said. \"But how....?\" \n\n\"Not hard. First, it never occurs to people that someone would make themselves less attractive, so they don't look for it. Negative make-up. A wig. Clunky glasses. Frumpy clothing. Padding. A chest constrictor, although that looks odd on me with...these.\" She gestured across her chest. \"Different posture and gait -- those are tough, but you get used to it.\"\n\nIt was an amazing transformation. But I saw her point. \"Why are you coming out, so to speak, with me?\"\n\n\"I like you.\"\n\nMy rpm's redlined. \"Why? I'm a corporate drone. An ordinary guy at best.\"\n\n\"Don't sell yourself short. For one thing, I know you well. You're a good friend to Betty, so I know you're not shallow and just after tits. You've been entirely fair to her even with Shelly and Toni hanging around your neck. You see right through Toni, but you're always kind and you don't speak badly of people, even when they might deserve it. Like on our walk just now. And you're thoughtful. And fun. So I like you. And I hear you're available at the moment.\"\n\n\"Available? Like, off work?\" \n\nShe smiled kindheartedly at me. \"Like, unattached. And you have a fun trip lined up, and an extra reservation.\"\n\nNow I was dying. \"So, you're after me for my resort reservation? That's preposterous. Plus, this is a sex-drenched singles-couples resort and we're barely on a happy-hour basis.\"\n\n\"No,\" she said, \"I'm after you because I like you. And, I like sex. With boys, just to be clear. But you're right. We'd have to upgrade our relationship.\"\n\nI suspect my mouth was hanging open. Her superpower had frozen me. She looked like she was having fun, but to be fair, she didn't seem to be mocking me. \n\n\"Do you want to stay for dinner?\" she asked.\n\n****\n\nShe uncorked some wine and whipped up a chicken dish. She could cook, by the way. She lit some candles and we dined overlooking her 30 mile view of ugly rooftops. We had more beer. She actually had several kinds in her fridge already. She eventually asked me if she could come with me to Club Caribe. She said she respected my need for time to shake off Tiffany's sudden change of heart, but she had to know soon because she would need to get tickets and tie off some work projects if I would let her come.\n\nIt didn't feel right to rebound from Tiffany so fast. But Liza was a perfect eleven. But I had been about to ask Tiffany to marry me. But maybe our relationship hadn't really been that deep. By contrast, I did know Betty pretty well. And I liked Liza, although since she was in another league entirely I couldn't expect to be besties with her. Maybe I was intimidated now. Maybe I should man up and not be. Maybe our non-fraternization policies only applied to Betty, not Liza. Maybe I should dither a little longer....\n\nLiza rose, walked around the small table, bent over and planted a delicate kiss on my lips. I got a look right down her shirt at her unbelievable boobs swinging around. \"I really do like you,\" she said. \"I hope you believe me.\"\n\n\"Okay,\" I croaked, completely unencumbered by conscious thought.\n\n\"Great! We'll have so much fun! And so much sex, if you're okay with that!\" She held my head in her hands and bent down again for a much more sensual kiss. \"We need to get started on the practicalities. You should audition me. Is this a good time?\" Her brilliant blue eyes sparkled until she snuffed out the candles. \n\n\"Audition?\" \n\nIt couldn't be. It was incredible. I was supposed to audition the Rolling Stones for a kid's birthday party? \n\n\"You know. A trial run. But I want to ace it.\"\n\nI still felt disoriented. \"Ummm, you know, usually I'm a third date kind of guy. I want everyone to respect themselves in the morning.\"\n\nShe gave a slight frown and pursed her lips. On her, the expression was gorgeous. There was nothing she could do that wouldn't be sexy. \"I thought so,\" she said. \"But you've known me for years! Wait right here.\" She ran a finger down my chest, down to my belt, and she disappeared into her bedroom. I waited obediently. Frozen, again.\n\nWhat just happened? First I was jilted, then I found I had been working with the sexiest girl I'd ever met and she wanted to audition for sex? With me? What had been in those happy hour drinks? In reality I was probably lying at the bottom of a concrete stairwell somewhere, drenched in my own vomit. \n\nI didn't want to wake up.\n\nShe returned in black, but not much of it. It did go well with her golden, wavy hair. She had on a bikini that was basically a g-string bottom with a crazy top with tall but extremely narrow triangles. From the side all you could see was boob. It made her tits look larger than softballs. She posed in front of me. \"Okay so far?\" I managed to nod. Barely. She looked genuinely pleased. \"I've never had the nerve to wear this in public before, but this trip would be my chance.\"\n\nShe extended both hands to mine and pulled me to my feet. Then she enveloped me in a full-contact kiss that took my breath away. While I was recovering, she undid my belt and pants. My steely dick popped out. She knelt before me, dodging it gracefully, and took it in one hand with a smile.\n\nLiza -- certainly not Betty now -- had done this before. She inspected my dick unhurriedly, then fastened her brilliant blue eyes on mine as she opened her mouth. She placed the head on her tongue but didn't close around it right away. She ran her fingers up and down the bottom of my shaft. The sight was unbelievable -- that gorgeous face with my dick poised at the entrance of her mouth just begging to be shoved in, the bulging tops of her oversized breasts, the blue eyes seeming to beseech me for cum... I was all set to fuck her face...ohmygodohmygod ... \n\n\"Look out!\" I said. And I shot in her mouth. I flinched but she held me and pumped me dry, which took approximately forever. \"Mmmmmm\" she said, and she smiled as she licked me off. I was mortified, but she said, \"Don't worry. That happens to me all the time. Now we can get serious.\" She stood up, took my hand, and led me into her bedroom. \n\nDespite her clever maneuverings, I still had the feeling that she must be auditioning me rather than me, her. I had probably flunked the first test. I had better stop being so passive. So I wrapped my hands around her slender little waist and gave her a long, hard, investigatory kiss. Her teeth were all perfectly even. Some people have all the luck. And her breasts were large and firm. They held shape even pressed against me. As we broke, I undid the back of her top and dropped it to the floor. Her nipples still pointed right at me. I ran my fingers up her ribs, palms up, and ended holding her tits. They stood so far out from her ribs that I couldn't even get my hand around the bottom half of each as I tried to cradle them. They were delightfully heavy. \n\nShe seemed at ease with my audit so far; in fact, she cupped my recovering dick and squeezed lightly and rhythmically. I reached past her wandering hand and ran a finger lightly up her slot. I was pleased -- maybe flattered would be the word -- to find she was wet. \n\nI broke contact long enough to make a point of spinning her around and checking her out from all sides. She complied willingly but then pressed back hard against me from thigh to chest, and re-gripped my cock. \"Do I pass?\" she asked with a seriously worried expression. She could act, too.\n\nWe both knew she was spectacular and that she was going, but I was having a good time. \"Well,\" I said while sliding a finger into her in one of the strangest conversational gambits ever, \"probably. Would you bring this bikini?\" She nodded enthusiastically. \"I don't want to see you in anything boring!\" I said, stroking her clit. She promised, and I said in that case ... we could resume the audition. \n\nShe nodded gravely and started working my cock a little harder while pressing her tits on me and affecting an adoring smile. I stroked her back with one hand and her pussy with the other while kissing all over her face and lips. \n\nEventually she sat on the edge of her bed and took me into her mouth again, but I couldn't see her eyes and it wasn't the same, so I pushed her over backwards and entered her. She was tight, but what got my attention was the effect of my entry. She shivered, gasped and made little moaning noises on every instroke. She quickly started writhing and whimpering. I held her thighs and picked up the pace. Squishy sounds filled the room. She raised her hands above her head and gripped the bedsheets to better resist my thrusts, and her breasts started lunging up and down her chest. After only a minute she closed her eyes, arched her back, and froze for a good twenty seconds. Finally she gave a long \"Mmmmmmmmmmm.\" \n\n\"Sorry, sorry...\" she said. \"It's been forever.\" I said we were even, and she smiled. We cuddled a while. \n\nShe said she guessed neither of us had passed our auditions. I agreed we needed more practice. \"Ready when you are,\" she said. Girls. Sheesh.\n\nWe cuddled some more and discussed Club Caribe. I had heard wild things about the place and I wanted to be sure she knew what she -- we -- might be in for. I thought there might be a fair contingent of Spring break-type collegians as well as normal fun seekers. I secretly suspected Tiffany had chosen it because she thought there might be loose women there. But Liza said she could handle sexual situations, and rightfully so, I guessed. She said she would enjoy 'being Liza' for a while. We groped and stroked each other, but as usual we were exhausted from work, and eventually we drifted into sleep.\n\nHer clock went off at 5:30. We went into work mode, dressing quickly. My options were limited. 'Betty' needed more time, so I kissed her goodbye and headed for the gym. \n\nI had been clearing my desk for a month in preparation. Betty had a big project to complete, so she worked until midnight every night and we didn't have much fun. Also, she was ultra-careful not to blow our cover, and I took the hint. We barely nodded at each other all week.\n\n**** \n\nWe had booked early Saturday morning flights to the French Antilles, but Betty couldn't get on my plane. We shared a 5 AM ride to the airport and headed for our separate flights. We would meet when we landed. \n\nCustoms consisted of only a stern stare. Apparently vacationers and whatever they brought were all welcome. When I rolled out of the customs shed Liza was waiting at the pick-up point for the resort. She was wearing a modest, white calf-length dress that was tight only on top, and a lightweight cropped vest. She ran up to me, pressed her boobs against me, and gave me an excited kiss and a big smile. Then she looked around and briefly grabbed my crotch while staring at me with her big blue eyes. \"Missed you!\" she said. I assumed she was talking about a specific part of me. As Betty, she had seen me all week.\n\nA few others were waiting for the jitney too. It was a young crowd, about half looking like college seniors and the rest young grads like us. There was already a buzz of anticipation and lots of skin. \n\nMost noticeable was a bossy brunette who was organizing a small group of friends. She wore a pink terry chop top and matching hot pants, but her most noticeable feature was a pair of steely after-market domes stuck to her chest, the XL models. She had an otherwise forgettable figure and a good case of RBF. I disliked her immediately.\n\nThe jitney arrived. It had open-air bench seating and a keg of free rum punch to get the party going. We started to climb into the back seat when the brunette announced she needed it for her friends. We tried another seat but she said the same thing. She had about half the number needed to fill the jitney and I started to object, but Liza squeezed my arm and drew me over to where the young driver was enjoying a joint. As she explained the situation she squinted up at the sun and shrugged her vest off down to her elbows. Her big boobs, pointing right at the poor guy in the bright sunlight, were clearly visible through the tight white top, and the stretchy fabric outlined her tiny waist and her protruding nipples. She laid her most gorgeous smile on him. The guy had no chance. He hurriedly cleared off the rest of the driver's bench seat for us. Liza shrugged her vest back on and whispered to me, \"And that's how it's done!\" We rode in the front seat, getting the driver's running commentary, while the brunette and her buddies choked dust in the back.\n\nThe resort was nearby. For my big weekend with Tiffany I had booked a premium bungalow on the beachfront looking right at the ocean. It also overlooked the backs of many, many thong bikinis on the beach. \n\nWe lingered on our deck, and Liza asked me to point out the suits I liked most. Of course, there was a trend: an inverse correlation with size. She absorbed my tastes with interest. I wondered exactly what \"being Liza\" would mean, after so many months of being Betty.",
        "We finished our jitney rums sitting on our deck and then wandered over to the buffet lunch. Everyone else was in swimwear. I felt overdressed. Liza just shed her vest and dominated. \n\nOne of the \"Organizers\" (think camp counselors for adults) started to announce the schedule for the rest of the day. The big event for newcomers -- most of us, this being a big turnover day - was \"adult dodgeball\" at the nude beach on the far side of the point. I wondered what I had got us into and I was about to propose to Liza that we sit this one out when she came back with a couple of big rum drinks and said that adult dodgeball sounded like fun.\n\nI love confident women.\n\nWe returned to our bungalow and, as instructed, changed into our swimsuits. Liza disappeared into the bathroom and emerged with her hands behind her, wearing a microscopic plain white bikini top of handkerchief-grade material and a similar wrap around her hips. She was flaunting lots of top-, side- and under-boob; the tiny triangles seemed to float in place on her nipples. I was beginning to understand that Liza didn't need adornment. It only distracted from her spectacular body. She came over and, with a grin, stuck her boobs out at me for approval. \n\n\"OK so far,\" I said. \n\nThen, with a flourish and a big \"Surprise!,\" she handed me a tiny white speedo-like suit. This was going to be a problem, since I was already hard as nails. She was unsympathetic. \"Fair's fair,\" she said, \"if you want me practically naked, suck it up and stuff it in!\" \n\nI did, but especially under her watchful eye it was uncomfortable and the little pouch in front bulged so far you could look right in from the top. I took a towel and wrapped it around my waist for the walk to the jitney. I didn't help that Liza laughingly made an extra effort to bounce her giant rack all the way over. I told her that revenge would be swift and unexpected.\n\nThere were plenty of other scanty suits waiting for the ride, but only one bod like Liza's. It seemed to me that everyone was staring at her all the time. This must be something she was used to, and a good demonstration of the reason for her alter ego. But as Liza she seemed to revel in it. She held her shoulders back, swished her hips, and brushed by stunned guys left and right as we assembled. She had a perma-grin. I felt out of my league again and was beginning to miss Betty, but after we boarded she grabbed my arm, hugged it against her boob, and planted a big kiss on my cheek. \"This is so cool,\" she said. \"and exciting. Thanks for bringing me. Let me know if I'm making you uncomfortable.\" \n\n\"Only the part of me in this swimsuit,\" I said.\n\nThen the steel-breasted monster showed up, late, wearing a black suit with leather straps going all over, including down her cleavage and ass crack. I'll admit she deserved, and got, a certain amount of attention, since she looked straight out of a porn comic. Apparently she was with a hulking but overweight, balding guy, since she made a big show of sucking face with him. There's no accounting for taste, I hear. His, I mean.\n\nEveryone was given another jitney rum drink to bury our inhibitions for good, and we were off in a cloud of tropical dust.\n\nThe beach was actually a walkable distance, but I supposed we were going to need a ride back, because the jitney pulled up to a table full of more rum punches, and we were told our first mission was to chug one, no exceptions. Liza seemed to be having no trouble. I was already buzzed, and as intended, another whole punch made me officially drunk.\n\nWe went down to the water's edge, and the rules were explained: In a word, strip dodgeball in the water, with about a dozen balls. Liza said she was good at this, and I said not to brag, everyone could tell she was good at being naked. She smacked me one.\n\nOur radar-domed bondage slut grabbed a ball and waded in first, followed by a few smart folks who figured out it might be better to start with a ball. I was still assessing the situation when Liza ripped my towel off and threw it on the beach. Looking down, I realized I'd be better off in the water, so I quickly waded in. \n\nLiza dropped her own cover-up revealing her tiny handkerchief-weight thong, and just stood there for a moment at water's edge with her hands on her hips, being Liza. Suddenly there wasn't a sound, and everyone was staring at her, dumfounded, including the organizers. She was absolutely stunning, she knew it, she liked it, but she didn't overdo it. In fact, she modestly placed a forearm across her boobs and a hand over her crotch, and waded in and dunked herself. The top became effectively transparent, and Liza swiveled around looking somewhere between embarrassed and humiliated. Calculated, I thought. But fetching. \n\nA whistle blew, and the game began. For some reason, about four balls hit Liza at once. She mock-cringed, then straightened and looked around. Again, nearly all activity had stopped. Haltingly Liza reached behind her back and found one end of the string that held the top in place. She put the other arm across her breasts again, and pulled the string. The suspense in the air could be cut with a knife. My tip of my cock popped out of my suit, but I backed into deeper water and unconsciously started to stroke it. Liza now had the top just hanging from her neck. With her free hand she pulled the string at the back of her neck. The top strings joined the others hanging off her tits, but the triangles stayed in place. She lowered her arms. They still stayed, by capillary action. \n\nSlowly it started. Someone was going clap, clap, clap, like at a sports event. Soon everyone had taken it up. And everyone was looking at Liza. I think she actually blushed. She knew it was hotter not to act too brazen. She put her face in her hands as though she was mortified by the whole thing. The clapping got louder. Finally she gripped a string from each triangle top between thumb and forefinger, and reluctantly pulled slowly down. The triangles slowly peeled down and off, and fell into the water. For a second she stood there, arms at her sides, with her magnificent breasts fully exposed, her tiny waist on display, and her slender thong straps running over her hips and down into the water just barely above where her crotch would be. And then she suddenly crouched and let the water cover her. I eventually started to breathe, and after some cheering the game slowly resumed.\n\nBoys being boys, the girls got most of the early attention, and soon the air was filled with bouncing, swaying, jiggling tit flesh. Girls fought back and boys lost their one and only garments. Suits piled up at the waterline. Liza zipped a fast one at me and, since I was understandably distracted, it ponged off my head. In a slight daze I heard Liza say \"gotcha!\" I reached under the water and peeled off my so-called bathing suit. She waded up to me and grabbed my dick. \"Just want to be sure you're in good condition,\" she said, standing before me, topless, and stroking it just under the surface. I didn't resist. I had to bring myself back to reality when she stopped. \n\nSteel-boobs was still trying to be the center of attention, but she was having a lot of trouble getting her suit off. It was all connected, there were lots of buckles, and she was clearly smashed. \n\nFinally the game came down to hunting for people who weren't yet fully bare. Liza had lost her suit early, and we watched the hunters and their squealing prey from a safe distance, up to our waists in the water. Liza showed no apparent concern about her toplessness, and when I pointed out that the staff was collecting all the suits off the shoreline, she was completely unphased. I was learning she liked to look good, and for her, naked was a really, really good look.\n\nWhen there were no more victims left, we were called out of the water. Some people, like me, were shy about exposing our lower halves, in my case because girls were sliding glances at my super-hard dick. It certainly helped to be buzzed. \n\nThe head Organizer said we had to get dressed and go back for dinner. It was only 4 PM and there was some scattered hissing and booing. \"Don't worry,\" he said, \"we have rules about this. You may enjoy them.\" There was a murmur of anticipation. Or was it worry? \"These little games and tasks are good icebreakers for those of you who came single,\" he said. \"We don't want any singles, so we are giving you plenty of chances to meet...up close and personal. The couples here are just going to have to grin and bear it. The walk back is over there,\" he said gesturing, \"But we recommend getting in the spirit of things.\" \n\nThe first requirement was to drink another rum punch, but this time, he said, we could \"take our time and mingle for five or ten minutes while we arrange your swimsuits.\" Since we were all stark naked, this made happy hour look pretty lame. Fortunately my boner had mostly subsided. Liza had a group of guys surrounding her already. Her confidence seemed boundless, and I bet they were all wishing they were in her league. I chatted with a mixed group and found it amusing how little eye contact was made. Eventually we were told to find our suits and reassemble. They had been spread out on the sand, but the bottoms only. The girls complained, but not too much, and the boys seemed to approve.\n\n\"Alright,\" said the Organizer at last, \"here is how we put suits on at Club Caribe. Over there are two lines in the sand.\" They were parallel to the shore and about a foot apart. \"I want the girls to line up on the one nearer the water, facing the ocean. The guys please line up on the other one, facing inland.\" We did it. There was a certain amount of butt-contact and drunken giggling. \"Now sort yourselves by height,\" he said, \"tallest near me, but stay facing away from each other. No peeking.\" More butts touched and more giggles ensued. The Organizers, girls for boys and boys for girls, made a few adjustments in the height order. Thank god I wasn't hard.\n\nWhen we were organized to his satisfaction, the head Organizer announced, \"Here's the drill. First, reach behind you with both hands and hold the hands of the person behind you. They are your partner.\" I located two hands behind me. It wasn't easy holding our arms way back, so eventually we touched butts and stayed that way. The butt behind me gave a little wiggle, and I bumped it a couple of times to acknowledge. \"Your mission is to put your partner's suit bottom on. But there are restrictions. Your partner must remain standing and may not use his or her hands to help.\" I could tell everyone was trying to envision how this would work. \"The next rule, to preserve privacy\" (there were snickers) \"is that you must only look each other in the eye. Violators will regret it.\" This with a devilish grin. I believed him. \n\nThere was a collective groan. All I could think of was the ridiculous suit I'd been given, and a cute girl trying to put it on me. I started to get excited. Which certainly wouldn't help.\n\n\"OK, break!\" said our overlord. \"Find a nice spot and get started. Last team to finish walks home, naked!\" This time I really hoped he was kidding.\n\nI released one hand and turned around. My partner was tall -- only about 4 or 5 inches shorter than my 6' 2\". I pegged her as a college senior. She was definitely cute in a tennis/soccer athlete sort of way: very fit but modest curves. You could see the muscles working under her clear, tan skin. Nice face. Sandy blonde hair in a giant bushy ponytail of tight, kinky curls. \n\n\"Hi!\" she said. \"I'm Sandy! You're cute!\" A lively one. Drunk.\n\n\"Thanks, you too,\" I said. \"Are you OK with this? No pressure. And I may have a little problem.\"\n\n\"Oh yeahhhhh,\" she slurred a little. Maybe she wouldn't remember any of this. But she seemed very willing. And naked. Did I mention cute? It was hard not to stare at her bod. I was hardening up. Great.\n\n\"Well...,\" I said, \"there's something you should know. My girlfriend over there...\" I pointed to Liza \"...bought me this tiny swimsuit as a gag and it may not be easy...\"\n\n\"THAT'S your girlfriend?\" she interrupted. \"She's unbelievable. Hot! Hell, I'd fuck her and I'm straight! Have you known her long?\" \n\nThat was a tough question. \"We just started dating,\" I said. \n\n\"How about I find someone I don't know and we do a foursome?\" she asked. \"Names can be optional.\" \n\nMy boner got harder. I declined politely and we looked for a good spot to get on with our task. I insisted on starting with her suit, for one very outstanding reason. She handed it over.\n\nIt was a black-lace themed number with frilly edges and big leg holes, which would help. It seemed sort of thong-y, but low all around. I asked her which was the front. She directed me how to hold it. I looked her in the eyes and knelt in front of her holding it out for her to step into. Her balance wasn't too good, and she missed the leg holes a few times. She put her hand on my head to steady herself. \n\nI was looking in her eyes but her hairless pussy was right in my peripheral vision. She was looking straight down at me, not really in my eyes. \"Nice...\" she said. \"Is that for me?\" Finally she said both legs were in, and I whipped it up to her legs and snugged it up to her crotch. \n\n\"Ugh,\" she said. \"There's sand in it!\" And she arched her hips forward toward my face to indicate I should fix the problem.\n\nI was now hard as iron. Looking her in the eyes, I pulled the waist back down again. I found myself staring right at her snatch. It was waxed, close and fully displayed. It was covered with sand. \"Brush me off!\" she said. She spread her legs.\n\nI brushed lightly at her pussy and ass crack, and she wriggled like she was having an orgasm. I shook out the suit, she put her hand on my head again, and I pulled the suit back up her legs. It came only an inch or two above her crotch. She smiled. \"Better. Now you.\" \n\nWhat to do. I had to stand up. I had to hand her my ridiculous suit. She checked it out with disbelief, and then held it up to my boner. \"No way!\" she said. Still, for lack of alternative, she knelt down in front of me. She attempted to stare right in my eyes, but my straining cock was right in her sight line. She gamely held out the suit at arms' length and I stepped in, ignoring the sand problem. She hoisted it up as far as she could and then let the waistband snap around my thighs. She surveyed the result. My balls were covered. The rest stood out like a rocket. \"That's not going to do it,\" she said. \n\nWhen I had a tough problem at the office, I called on Betty. Right now she would only make it worse, but I was willing to bet she had the same problem Sandy did. I looked over.\n\nShe was paired with the overweight boyfriend of the bossy girl with the soup tureens. Her back was to me. All could see were her mane of golden wavy hair, now wet and plastered down her back, two globular ass cheeks outlined by the lacey bands of her thong, and of course the outsides of her boobs. She had her hands on her hips and was looking down. Given her hotness, there was no way she didn't have the exact problem Sandy was, literally, facing. I watched.\n\nShe wheeled to the side and I saw big boy's hard on. I also saw that one boob was mashed against him. She crooked her index finger and slowly lowered it. With great ceremony, she ran it along the underside of his shaft while gazing into his eyes. He shot his load about six feet and nearly fell over. After a minute, she tucked him in and walked off.\n\nI looked at Sandy, who had followed my gaze. She was slack-jawed. She looked at me. I shrugged.\n\n\"Harold!\" a voice screeched from across the beach, and the brunette with the double soccer balls cruised over, gave her boyfriend a good, stern correction and then glared at Liza's back. \n\nA voice below me said, \"That should work,\" and I felt a hand encircle my cock. I re-fastened my eyes on Sandy's, and she matched me, except that both my cock and her hand were now in the way. She levered herself up a bit, which cleared the view but put my tip an inch from her mouth. Almost by reflex, she sucked it in. Then she ran her fingernails up the exposed underside of my shaft, did some quick strokes around the edge of the glans with her thumb and middle finger, and took the whole thing in. All while staring me right in the eye. She was not bashful with strangers, I decided.\n\nI had been hard for a while, there were still dozens of bare boobs around, Sandy was young, cute and avid, and Liza was walking over with her tits in full motion, all of which explains why I almost immediately said, \"Watch out!\" But too late. The first load went in her mouth, the second on her upper lip as she backed off. Then she pumped me over her shoulder, getting only a little in her hair. Some dribbled onto her boob. \n\nWhen I was spent it was still quite a project to stuff me into the small pouch of the suit, but she was a trooper and made it work, albeit with quite a resulting bulge. \n\nLiza arrived and looked at my crotch, then at Sandy, then at Sandy's face. \"Nice job, guys!\" she said.\n\n\"Are you real?\" Sandy asked. \"Can I touch you?\"\n\n**** \n\nWe were back in our room, nearly passed out on the bed from all the sun and rum. \"Don't blame me if you're not getting any this afternoon,\" I said. \"That overachieving jock strap you got me is responsible.\"\n\n\"I thought it was cute!\" she said. \"I bet Sandy did too.\" Her brow furrowed adorably. \"Did you think she was hot?\" she asked. \"Hotter than me?\"\n\n\"She's certainly enthusiastic. I just hope she was legal,\" I said. \"I guess you have to be 18 to come here. But actually, she thinks you're the hottie. So do I.\" \n\nShe perked up. \"Who was last to get their suit on, did you see?\"\n\n\"I'm sure it was that bossy girl,\" I said. \"She had so many buckles and straps it would take a team of specialists to untangle it. Incidentally, even if she had to walk back naked, I'm glad I wasn't with her. If she turned quickly she could knock me down.\"\n\n\"Hey, I could do that,\" said Liza. \"You just might not travel as far.\"\n\n\"You could knock me down by just batting your eyelashes at me,\" I said truthfully.\n\n**** \n\nWe awoke soon before dinner. There was going to be a dance. Liza looked out the back window and reported that girls were wearing club dresses. She headed for the shower to wash off the salt and change.\n\nShe returned naked and dug around in her suitcase. Her first find was a pair of white stockings that came a few inches short of her pussy. Then she put on a black thong and some black school-girlish shoes with low heels. Finally she fished out a dress of some silver-gold material and dropped it over her head. The hem cascaded down to mid-thigh and rebounded sharply. It was actually made of tiny metallic chain links. To say it draped her would be an understatement. It cascaded over her tits and ass cheeks and fell into her crack and cleavage, faithfully following her every curve. It fell between her legs when she walked. It was entrancing. \n\nWe were late, so we got a quick dinner and hit the dance floor. It was dark and the girls there were showing lots of leg and boob, but as usual Liza seemed to have her own spotlight. Crowds parted for her, boys ogled her, and girls stared down their boys to little effect.\n\nWe danced in what I hoped was a dignified manner suiting our ages, but around us things were getting wild. Two girls stormed the bandstand and became volunteer go-go dancers. The lead singer, a woman, offered one of them the mike, but she was too drunk to notice. Liza, by contrast, was suddenly excited. \"This is like college!\" she said. \"I've missed this. Can I leave you here for a minute? Will you be good?\" I assented, of course, and she lithely ascended the stage and put her head next to the bass guitarist, who talked to the lead at the end of a song. The lead handed a mic to Liza, and the band struck up a new tune.",
        "In a voice I can criticize only as a bit too clean and pure, Liza sang harmony with the lead vocal. She sounded professional, but she looked at the soloist for reassurance and found it in a big thumbs up. Then it happened. She started to sing with confidence, and now she sounded as good as the band's lead, who eventually pointed at her to solo. She did, and the crowd went wild. She offered the mic back but the lead wouldn't take it and the crowd called for more. \n\nTo get back to more raunchy stuff, I assume, the band played a fast, rhythmic Latin number. Liza sang a bit but also went to the side of the stage, right in front of an orange flood light, and danced, professionally and quite erotically, with a lot of humping. With the light shining right through her chainmail, every motion of her functionally naked body was silhouetted. The crowd, or at least half of it, went absolutely berserk, hooting and howling and screaming. \n\nWhen she handed the mike back there was a chorus of boos. She poured off the stage and was instantly surrounded by a flock of horny guys. Most hung back respectfully, but a few obnoxious ones pressed in on her. She fought her way through and flowed straight into my arms, wrapped herself around my neck, and gave me a huge kiss. \"Thanks, that was really fun. I haven't done that for years,\" she said. \"I probably shouldn't have done it now, but I may never get another chance.\"\n\nI couldn't help myself. I was awestruck. \"That was fantastic,\" I said. \"You're fantastic. Amazing. Impossible.\" And then I did it. \"You're way out of my league. Out of anyone's league.\" \n\nAs a policy, honesty is overrated.\n\nShe had been pressing her full self on me and starting to kiss me again. Now the smile turned upside down. She let go of my neck. She spun away, crossed her arms, and moved a significant couple of feet to the side. Then she held her face in one hand.\n\nI knew exactly what she was thinking, thought for thought. She wanted to have fun, but she wanted to be normal first. She wasn't. She wanted to fit in, not have regular people tiptoe around her overawed or trying to ingratiate themselves. And she had blown it. The pack of obnoxious wolfmen circling her now was exactly what she didn't want. \n\nI thought about putting an arm around her. But I was the problem. Or at least, I was the messenger. \n\nI walked over and apologized. I said she could be fantastic but still be normal. It rang hollow even to me. Without a word she walked out onto the deck of the main lodge.\n\nI was nonplussed. I secretly thought she was overdoing the disadvantages of being slightly superhuman. Who doesn't want that? But she had been that, and this was her judgment, and she had good judgment. And I had just fallen into the category of problem people, even though we had been buddies for years. Now she had come out to me, and I had let her down.\n\nBut I couldn't not talk to her, so after a minute I tracked her down and asked if I we could talk. We stood in the warm night breeze, overlooking the ocean with little waves sweeping in on the beach. There were tree frogs. I didn't touch her. I thought hard about why I felt she was still a friend, at least, despite her huge talents. \"You told me once that being beautiful, 'is not an accomplishment, just a gift.' You have a great singing voice. You can dance. Aren't these things gifts too? Then I guess they're unimportant too.\"\n\n\"They are. To me. But they still have an effect on people,\" she said. \"They put me on a pedestal that's way too high, just 'cause I'm fortunate. Now I have an entourage but no idea who my real friends are. It's totally ridiculous. Betty is better off.\"\n\n\"Look,\" said I, \"listen up. I'm a friend of Betty. I'm a good friend, I hope. And she's a good friend to me. You're Betty, deep down. One and the same. I can swing this. I can be your friend, if you'll have me, and I'll be your boyfriend if you want me. I can't speak for the rest of the human race, but there are a lot of people out there and some are good ones. You may have to pick and choose more carefully than most, or let Betty introduce you. That was a great idea, by the way. But don't give up what makes you happy. And tonight you made a lot of other people happy, too. You really are fantastic, you know. There's just nothing to be done about it.\" I had exhausted myself.\n\nShe sniffled a little. I still didn't try to touch her. I thought she had probably learned to suspect that any touching was sexual. \n\nThe waves rolled in.\n\nFinally she came over and gave me a friendly but half-hearted one-armed hug, side to side. \"Thanks. I think maybe you're out of my league. I'm going to bed,\" she said. It was 10:30.\n\n****\n\nI stayed at the lodge and sipped a Corona as the waves whispered on the beach. I thought Betty could handle what Liza couldn't. On the other hand, if I found a genie in a lamp, I was no longer sure I would wish for all the things Liza was born with. \n\nSandy found me and sat down next to me, on the same chaise. She asked about Liza, after expressing incredulity about her performance. I said Liza was unhappy with herself, and Sandy was frankly disbelieving. \"She's who I want to be when I grow up.\" \n\nShe asked if I needed some company. I said it was tempting but Liza needed moral support. \"Next time!\" she said brightly, giving the inside of my upper thigh a friendly rub before bounding off into the night.\n\nWhen I got back to the room the lights were off and Liza was sitting on our deck overlooking the waves, still in her party dress. I sat down next to her. \n\nShe said, \"You're right. I'm being a crybaby. My problems are ones other people wish they had.\"\n\n\"Only from a distance,\" I said. \"They're still real. There's no substitute for having good friends.\"\n\n\"I know. I try. It just takes so much effort to cut through the chatter. I deserve credit for my genetics exactly as much as people deserve blame for their birth defects. None of it should matter. But it does. It just takes so much time and effort to set things right....\" She sighed.\n\nWe listened as the waves continued to self-destruct on Thong Beach. The tree frogs peeped by the millions and the moon started to set. \"This is nice,\" she said eventually.\n\n\"This is the best,\" I said. \"Ignoring everything else, this is perfect.\"\n\n\"Know what I was thinking when you came in?\" She paused. \"\"I'm tired of being me. I want to be someone else, someone outside the bubble. I'd like you to fuck me like I'm your escort. I want to be property. Just for tonight.\"\n\nI needed to think. I understood her reaction, but she was becoming important to me for reasons I hardly dared think about, and I didn't want to spike the relationship. On the other hand, I doubted this was really a one-off. It was too similar to her mock \"audition.\" That had been amusing, but she hadn't really needed to characterize our first encounter that way. Unless it turned her on.\n\n\"Well?\" she said.\n\n\"When I feel like it,\" I said casually. \n\nShe smacked me with a pillow from her chair.\n\n\"I suppose I have a minute for you now.\" I said. \"I don't keep slaves, but you never properly finished your audition. Your turn has come. Next!\"\n\nShe grinned and stood up in front of my chair.\n\n\"This is number 27?\" I called over to the side. \"Did you forget your tag?\" She apologized. \"Not a good start,\" I said. \"Let's review the basics. You realize what you are auditioning for, right?\"\n\n\"I want to get into porn.\" With a grin: \"I'll do anything.\"\n\nThis was going pretty well. \"Let's take a look at you,\" I said. She twirled around for me. The dress was interesting in how it poured off her peaks and fell into her valleys. Below where the dress had to accommodate her large breasts, the hem was higher and hung away from her legs. Also, her darker parts were slightly visible through the mesh and her nipples made noticeable bumps. She looked at me inquiringly.\n\n\"Whenever you're ready,\" I said.\n\nShe did a double-take, but then shrugged the dress off her shoulders. The top cascaded down to where the front caught on her boobs. She looked charmingly embarrassed as she tried to shake it off her twin obstacles. Metal links don't stretch, so she had to crush her boobs instead. Once they flopped out, she caught it on her elbows and rotated herself left and right. I watched her boobs sway and settle. I think the tree frogs went wild. In any event she looked down at me hopefully, and I said, \"So far, so good.\"\n\nShe let the dress fall in a pool around her feet, leaving her standing in white stockings, black heels and a thong. Then she slowly peeled of the thong.\n\nI stood, walked up to her, pinched her nipples, and watched her reaction. She leaned toward me a little and closed her eyes. I stepped back. \"Let's see,\" I said, and I weighed each boob in my hand, one at a time. I turned her to the side and kneaded each ass cheek. Finally I reached down to her bare pussy, pressed her outer lips together and massaged them. I stroked her inner lips several times. Again, she aroused quickly. She started to hump my hand. \"Hey,\" I said, \"the screen test is later.\" I pulled away, leaving her breathing hard and glaring.\n\nShe put her hand to her crotch, probably for relief. I said, \"Look, if you're going to be bashful this isn't the job for you. The camera is going to be rolling inches away while you get fucked like a farm animal, and then if you're lucky lots of people will be watching. Let's see it,\" I said ambiguously. She paused, spread her legs and bent back to display her pussy. I waited a beat and then said \"No, no...the heat! Let's see the heat! Can you act?\"\n\nSheepishly, she said yes. She bit her lip and ran her hands over her exposed flesh, uncertain what to do.\n\n\"Tell you what. Kneel there and pretend you're riding cowboy to an orgasm.\" As soon as I said it I wondered if this would be too much, but she actually grinned.\n\n\"You're very creative,\" she said. \"Will you be directing me?\" As long as she wanted, I said sincerely. We both paused.\n\n\"Sandy,\" I called over her shoulder to my imaginary helper, \"Record. Let me know if you need more close ups.\" \n\nLiza got down on her knees and started her act, bobbing up and down, rubbing her pussy with one hand. After a few moments she started some little grunts and whimpers that were startlingly convincing, and bobbed harder. She tried to keep her tits from bouncing with her other forearm.\n\n\"Put your hands behind your head,\" I said. \"Look right at the camera next to me. You have a big audience watching. I need wild abandon!\"\n\nI tried to watch dispassionately while her breasts heaved around, but she noticed the giant tent in my pants and started to smile. When I couldn't stand it anymore I said she had passed the fake orgasm test. \"Bad news for your boyfriends,\" I said. \"They'll never know for sure.\"\n\n\"Actually,\" she said, \"that was mostly method acting. I almost got there.\" She looked flushed.\n\n\"But you know this isn't really about acting, right? It's about lots of sex. Let's do that under live fire, shall we?\" I gave her a hand up and led her across the deck to the cushioned chaise. Our cabin was close to others, and the chaise was aimed right at the public beach, but I guessed almost everyone would still be at the lodge. The music could be heard faintly over the peeper frogs and the waves. I left her stockings and shoes on and pushed her down on her back. She knew what was coming. She opened her legs wide, raised her feet high in the air and pulled her knees back while I knelt on the deck in front of her pussy and spread her wide. \n\nI said, \"It will help your presentation if we can hear some reaction. Got it?\" She nodded hard. She seemed impatient.\n\nI watched her carefully as I gave her glistening pussy a few soft, exploratory licks and blew on it lightly. She seemed to like it. Actually, she was no longer grinning or smirking about our little fantasy. She was grimacing slightly. Her arms were straining to hold her knees as far up and apart as they would go. Her pussy was presented as close to me and wide open as possible. She made tiny humping motions with her pelvis while waiting for my tongue. I looked up and saw her enormous breasts, only slightly sloshed to the sides, rising and falling quickly. Her erect nipples, viewed in profile, framed her face. She stared at me and then rolled her head back and closed her eyes in frustration. She was in heat. \n\nI started by running the tip of my tongue up and down her outer lips. She went \"uuuunnnnnh\" softly and tried to angle her hips so my tongue would massage inside her. I switched to licking her inner lips and she promptly went \"aaaaaaaaaaangghhh\" with each stroke. I did this for a while and the groans grew louder. I inserted a finger in her and gave it a few strokes, which produced an \"Oh! And then \"Oooooh!!\" on each stroke. I added a finger and, finally, gave her what I thought she wanted: the flat of my tongue brushing hard over her clit. She went crazy, bumping her hips and almost whimpering \"ohmygod!\" repeatedly. I fluttered my tongue on her clit for a change. She seemed ready to cum, since she was bumping and writhing so hard I could hardly keep my tongue on target, so I stuck a finger into her and pumped it as fast as I could. She immediately arched her back and shook uncontrollably for a minute, with a loud \"Aaaaaaaaaaaaaaaa!\"\n\n\"Pass,\" I said. \n\nShe collapsed in a sweaty heap. She said she was glad we hadn't gone to the dance. \"Please stick your cock in me now,\" she said. \n\nIn the spirit of the evening I flipped her over on the chaise and took her doggy style. Since I'm a boobs guy and I missed seeing her tits, I wrapped my arms around her and felt them swing with every thrust. Then I grabbed them both and used them to pace the thrusts.\n\nI was about to cum when she said she wanted to audition a cum swallow. She disengaged and flipped over on her back, and snuggled down between my legs so my slimy pole was right over her mouth. She stuck out her tongue.\n\nAnd I came. Oceans of jizz laced over her tongue and into her mouth. It hit her nose and spattered onto her forehead. It dripped down her eyebrows and onto her eyelids, then down her cheeks. I pumped and pumped, and she smiled and smiled. She cleaned up with finger and tongue. And then we snuggled and groped hornily and talked about how great everything was.\n\n**** \n\nI was awakened by the sheer curtains billowing in the trade winds. And by the fingers stroking the underside of my erection, which was lying on my stomach. I turned and kissed Liza. \n\n\"This is nice,\" she said. \"I could do this all day. And I had a great time last night, too. You really got me off. I can't remember being hotter. That was the perfect set up.\"\n\nI could feel the individual fingertips and the edges of the occasional fingernail tracing their ways up and down my shaft. This wasn't gearing up to fuck, just a nice morning wake-up call.\n\n\"I'm not really a submissive, you know,\" she continued. \"I don't have rape fantasies. I have limited interest in being a sex slave. But most guys are so deferential with me. They don't want to blow their chances of fucking me again. Or more accurately, fucking this body again.\"\n\nThe fingers lightly circled my tip. Just for variety, I guessed, or to be nice.\n\n\"Maybe I'm a consensual submissive, though. I kind of liked the fantasy.\"\n\n\"What other fantasies can I assist you with, Miss?\" I asked. \"I liked it too, by the way.\" \n\nShe gave my cock a little friendly squeeze and started stoking again with the flat of her hand. It was getting more serious.\n\nShe sighed. \"I have lots of fantasies. I have to decide which ones might be realistic. And I like ones where I owe you something, like I did for this trip, where I had to audition.... Let's get a bite.\" She meant of breakfast, I decided disappointedly. \n\nI got up with a raging boner and turned on the shower. She materialized next to me instantly, naked. \"You didn't audition me for the obligatory shower scene,\" she said accusingly.\n\n\"You mean where the gorgeous girl with the big sexy boobs gets thrown up against the shower door and drilled by the trashy porno creep while the camera rolls in her face?\"\n\n\"Exactly,\" she said. \"See, you have a natural talent for directing.\" And as I turned on the water, she started seriously massaging my pole. I only wished Sandy had been there with the waterproof camera.\n\n**** \n\nSandy was at breakfast, though, and she rushed up to us. \"Where did you guys go?\" she asked. \"Everyone wanted to know who Liza was! Lady, you're in another league!\"\n\nLiza took it calmly. \"Thanks, I did some of that in college. What happened after we left?\"\n\n\"Wow,\" said Liza, \"you definitely should have stayed for that. It turned into a sex mosh. After the band the Organizers started this game of whether the guys or the girls could tie together the longest chain of clothing!\" I asked who won. \"The girls, of course. We had bras. Well,\" she shrugged, indicating her ultra-tight micro-tube top that served mostly to accentuate her nipples, \"some did. Then everyone paired off and screwed. I couldn't find an empty beach lounge anywhere. We had to go back to the room and have a foursome with my roommate and her guy. If you guys are up for that, you should let me know!\" She eyed Liza's tee shirt, which said, \"I would look good on you,\" in bulging letters with tension wrinkles.\n\nLiza looked at me in astonishment. I tried to minimize the tent in my swimsuit. \"Thanks,\" I said. \"I'm kind of stuck on Liza at the moment.\" \n\nSandy looked Liza up and down from neck to ankle, slowly and hungrily. \"Me too,\" she said. \"But you guys should definitely come to the volleyball game today.\" We promised to go.\n\nAs we finished breakfast, Liza asked how her porn audition had been received. \"Highest marks,\" I said, \"You're ready for the final step.\" \n\n\"There's another step?\" she asked, all wide-eyed innocence.\n\n\"Of course. You're a natural star, but so are lots of other starlets on the make. So now you have to catch the attention of a producer. They're mostly sleazy guys who'll just want to fuck you on the casting couch and dump you, so you have to give them a real girlfriend experience to get anywhere.\"\n\nShe considered this news soberly. \"Any ideas where I can meet a producer?\" she asked.\n\n\"Gilbert Gropewell at your service.\" I extended my hand.\n\nInstead of shaking, she reached across the table, took my hand, and moved it gently onto her left breast. \"Nice to meet you, Mr. Gropewell,\" she said.\n\nI looked around furtively as I withdrew my arm. \"Yes, a real pleasure. Want to go to the beach this morning? And then I hear there's a volleyball game.\"\n\n**** \n\nThe bulletin board said the \"Club Caribe Famous Volleyball Game\" was at noon, so we had plenty of time. On the way back to our room we speculated about why the volleyball game was famous. Liza figured it was strip volleyball. This being Club Caribe, I figured the winners got to do the losers.\n\nPreparing for a day in the sun, Liza stripped naked and covered herself with some slimy spf 30. I helped. Then she excused herself into the bathroom. I put on board shorts and waited. In a minute she called around the corner, \"I'm not sure about this,\" and re-entered the room.\n\nIt was the black bikini from her apartment. I now realized it had braided leather cords around her neck, behind her back, underneath her crotch, and up her ass crack where it separated into two, spreading her upper cheeks nicely. The narrow triangles barely covered her aureolae, and they were mesh anyway. \n\n\"This thing isn't easy to wear,\" she said. \"When I bend forward the slack lets it gap away and then it doesn't go back where it should.\"\n\n\"You're doing a service to mankind,\" I said, \"and you will have the attention of this producer all morning.\" We set out for the beach, Liza keeping her shoulders back and walking gingerly at the uneven spots.",
        "We scored a partially canopied triple lounge chair overlooking the waves. The Club seemed to have them all over, probably to accommodate amorous couples after the evening parties broke up. We lay together and chatted about our lives outside work. I was having trouble concentrating, though, and despite the risk of someone walking in front of us and seeing in, I started running one finger over the profile of Liza's nearer boob. \n\n\"Mr. Gropewell!\" she exclaimed, shocked, shocked, shocked! \n\nI told her it was for her own good, to help her get into films. She didn't resist, so I lowered my attentions and ran a finger over the tiny mesh panel covering her mound. She looked left and right as far as she could, and then spread her legs a bit. I ran my finger lower between them, and after a bit she closed her eyes and spread further. \n\n\"This really is a nice suit,\" I said. We could use it in your first movie.\" She asked if she had qualified for a part yet. I said only a non-speaking part as a party favor, but I was open to further negotiation. I continued to stroke her pussy through the mesh. For some perverse reason I really wanted someone to come along and see us there, with her spread wide in that hot suit and letting herself be fingered by me. \n\nFinally I heard voices -- lots of them. Liza stayed reclined, eyes closed, although she must have heard them. I increased the pressure of my strokes, forcing the mesh between her pussy lips. \n\nThe crowd was younger guests and an Organizer with a big cooler. It took a minute, but as they trudged past, a few of them looked into our lounge. They elbowed some others and a few stopped to stare. I whispered to Liza to spread more, and I ran my middle fingernail right down the center line of the fabric over her pussy, extra slowly. She sighed and humped my finger subtly for more. I got a few thumbs-up signs, and a few crotch-grab signs. Some of the girls giggled and whispered to each other. Then they trudged on, being, I suppose, polite about our privacy.\n\nLiza asked if she was now on track for stardom, and I said she was doing a good job padding her resume. \n\nIt was almost noon. We got up and walked down to the volleyball courts, following the crowd that had passed us. Some kids were playing already, and even from a distance we could make out one player dominating the action. As we got closer it was easy to see by her enormous, bushy pony tail that the player was Sandy. She was powerful and graceful, dashing everywhere, diving for digs and soaring high above the net for spikes. The opposing team scattered even before she slammed the ball down. She was a symphony of churning muscles, sinews and tendons. And glutes; she wore only a minimal thong. It had a bow tied where the straps met above her ass, with long trailing end ribbons that, like her pony tail, were begging to be pulled. We watched in awe for a few minutes. Finally, I choked out, \"Beautiful to watch.\"\n\n\"Just plain beautiful,\" said Liza. \"I think she's hot, and I'm straight.\"\n\nA whistle blew. The Organizer announced the start of the Famous Game and handed out the compulsory rum-dums. We each drank one and grabbed another; we were hot and they were free. \n\nThe rules were announced: as predicted, strip volleyball. The teams would be half guys and half girls. One player on the losing side of each point would shed a piece of clothing and chug a rum. The winning team would pick the player. Games were to eleven only, since each team of six would start with about nine items to lose. It looked like there were enough players for four teams, so there would be semifinals and a final. Captains were chosen to pick their teams. Sandy, obviously, was one, and the first player she picked was Liza.\n\nLiza declined. \"I'm not dressed for it,\" she said, indicating her tiny, wandering triangles. But the Organizer was unsympathetic. One more girl was needed to complete four teams; some of them (the less endowed ones, I noted) were already topless; the rum we had already drunk was for participants. She was still going to walk away, but I pointed out that this scene could make her whole movie career. She acquiesced, with misgivings.\n\nTo my amazement -- why I don't know -- she picked up a volleyball, locked her hands together, and experimentally bounced it off her wrists straight up in the air. Five feet, then 10, then 30. She caught it effortlessly against her hip, hardly looking. and held it there. \"Practice?\" I asked. No, just seeing whether her top would stay on, she said apprehensively.\n\nThe semis began. Sandy cracked an overhand serve with a motion like a major league fastballer. It went for a point completely untouched. A girl across the net was selected, lost her top, and chugged a rum. She was very voluptuous, and us boys enjoyed watching her breasts lunge around as she unsuccessfully tried to play topless. There was lots of hooting and howling. She was looking flushed. The loss of support, the humiliation, and maybe the rum, slowed her down so much that I could see there would be some strategy involved in picking the losing players. \n\nBut I had a hard time taking my eyes off Sandy as she flowed around the court trailing her ribbons. She served again, got a weak return and spiked it herself, with a vengeance. Another voluptuous player was selected, but perhaps seeing the writing on the wall she took of her bottoms before chugging. There were whistles and she gave a sheepish grin. Sandy served again with a similar result, but this time her teammates selected an athletic seeming guy to drop his trunks and drink. When he wasn't looking, Liza reached under the net and fondled him to stiffen his...resolve. I thought this made sense as a way to slow him down. As the drinks piled up, the opposing team got more inebriated, stiffer, and floppier, and the rout was on.\n\nAnd then Sandy missed a serve. No point was lost, but the serve changed hands and a tall gangly guy on the other team got the nod. Until now, Liza hadn't had to move a muscle. But I could see the server sizing up the opposition. He was probably going to serve to a girl, and for sure that girl wasn't going to be Sandy. Liza was in the back row, and he served to her, a booming overhand knuckleball.\n\nLiza dashed to her side, slid to a stop kneeling professionally, locked her wrists together, and delivered a perfect set up to the front line. A tall college kid watched it go up, jumped an inch, and smacked it over the net and into the sand. \n\nLiza held up a hand and spent a minute returning her breasts to her mini-triangles before the game recommenced. Then she noticed that stooping had slackened her bottoms, and they had moved to the side. She furtively repositioned it on her pussy.\n\nThe serve was ours again, but no longer Sandy's. Our server lofted a high floater which was smacked back at Liza. She again executed the dig, with Olympic form except for her boobs, which roamed again. Her top was floating loosely around her neck when the next ball came back. Sandy dug it but the set up went right in front of Liza, who had no choice but to charge the net, jump and hammer it with a professional, overhand motion. The ball hit squarely in a far corner of the opponents' court. Liza's breasts nearly hit her in the face on her way down, then rebounded off her chest on landing. She recaptured them and rearranged her triangles, looking flushed. The crotch was now firmly wedged in her pussy and the resulting dent was plain for all to see. The crowd went wild. She glared at me. I was going to pay.\n\nIt was clear that with Sandy and Liza, and only one weak player, Sandy's team was going to the finals, but eventually the other team did win a point. There was a heated discussion about whether to pick Liza, or whether there was no need. They picked someone else, and eventually Sandy's team won with Sandy and one other nice-looking, chesty girl both topless, and one guy with no pants.\n\nHaving followed the other semi a bit, I knew the finals would be tighter. Harold was playing, and while he was heavy and flabby, he was also about 6' 6\" and a strong spiker. Sandy held serve for five or six points, but there was an error, and the other team served well. Harold spiked everything at his half of the net. The other team picked on Sandy, Liza and our best guy player for drinks, to get them buzzed. Sandy was soon playing naked. Next point, Liza was relieved of the obligation of readjusting her top, but her boobs were so large and springy that she must have distracted the other team, because the time soon came that Sandy saw her chance, leapt about six feet in the air, and tomahawked the ball right off Harold's skull for the win. I can only think he was distracted by the sight of her bare snatch flying at him. I heard a familiar screech -- \"Harold!!\" -- from the stands, and then our team all cheered and ran out onto the court. \n\nWhile Harold underwent a concussion assessment, our team and well-wishers celebrated mid-court. Still flushed from the game, Sandy ran up to Liza first and grabbed her in a tit-crushing hug. Then she ran over to me and gave me a big sloppy kiss and ran off. Liza fetchingly retied the upper strings of her suit behind her neck, came over to me and possessively leaned a boob against my elbow.\n\nAs the crowd dwindled, Sandy came back and stood slightly inside my personal space. She had her thong slung over one arm, so she was still technically naked by my definition. I could almost feel her nipples focused on my chest like lasers. She asked whether we were going to the event at the lodge that night. Then she reached behind her head and pulled the band off her ponytail. There was an explosion of hair and a huge halo of tightly curled, sandy brown locks surrounded her head. I briefly wondered how that would look when she was flat on her back. \n\n\"What event?\" I asked suspiciously. \n\nShe now had her scrunchy around her fingers, and as she answered she put both hands behind her head to recapture her curly mane. She said it was a pajama theme party. Then she rocked her head from side to side as girls do when they are wrapping a band around their ponytail several times. She had a lot to wrap, and her firm little boobs shook. When she was done, she patted the ball of curls up with her palms. \"I like my tail higher for social events,\" she said. \n\nNow normally when a naked woman comes up to me, puts her hands behind her head, sticks out her boobs and shakes them, I'd suspect she was flirting. But with Sandy, it was so natural, so unselfconscious, so pure, it was impossible to tell. I glanced at Liza, but she was just staring.\n\n\"That way,\" Sandy concluded, \"it's easier to reach.\" And she turned around, bent at the waist, pressed her ass against my crotch, and rocked her head back. \"Is that good for you?\"\n\nNow she was flirting.\n\nSomeone up the beach called her, and she gave me a quick, chaste kiss and told us to call when we got to the party. Then she sprinted off at 40 miles an hour, her feet barely touching the sand. If you've never seen a fit, naked 5' 10\" young athlete sprint away like that, it's you're loss. \n\n\"Good god,\" said Liza.\n\n\"She's so sexual but she's so totally innocent. How does she do it?\"\n\n\"She's just never heard of an inhibition.\" said Liza.\n\n\"A force of nature.\"\n\n\"Hot, \"said Liza. \"And I'm straight.\"\n\n\"Is there an echo out here?\"\n\nWhile we walked back to our bungalow we discussed the pajama party. Liza thought it would be a giant college orgy by 10 PM. I asked what was wrong with that, and she swatted me, so I suggested we have an orgy of our own. She was uncharacteristically quiet.\n\n**** \n\nBack at the room, we took a shower and had a long nap to shake off the sun and rum. Then we sat in our deck chairs overlooking Thong Beach holding hands and sipping a couple of Coronas. The breeze gently stirred the palm fronds and pelicans were commuting home in a long straight line. The sun was slipping lower and it sparkled orange on the ripples. \n\nI thought we were being sophisticated by skipping the party. \n\nLiza said, \"I have a fantasy.\"\n\n\"Am I in it?\" I asked.\n\n\"You're essential,\" she said. \"The question is whether you have the guts.\"\n\n\"I'm in,\" I said. She smiled at that. I liked her smile. Also, no way would I jeopardize what might be the hedonistic experience of my life, something I would tell myself about when I was old and grey.\n\nShe continued after a pause. \"I have to swear you to secrecy for all time.\" I crossed my heart. \"Or I'll have to kill you. I haven't shared this with anyone else, so if it gets out, I'll know you're the leaker.\" I promised. I was dying to know. \"OK, so here it is. Ever since senior prom, I have fantasized about being fucked on the dance floor.\"\n\nI said, \"Who hasn't?\" I hadn't, but now that she mentioned it I probably should have. \"That's hardly even kinky. It's just hard to get away with.\"\n\n\"Yeah, I know, that's why it's still a fantasy,\" she said. \"But if I'm gonna do it, this is the place. And you seem like a good accomplice.\"\n\nParts of me were becoming very entertained by this line of thought. \"Have you figured out how to do it? Mechanically, I mean.\" \n\n\"I've been dreaming about this for years. I know what I need to do.\"\n\nSince I was a good six inches taller than her, I was concerned. But knowing Betty, not very concerned. I said it would be my pleasure to fuck her silly on the dance floor, especially right in the middle of a big crowd of people. I asked whether we should get some practice right now, but she said no, she wanted me \"cocked and fully loaded.\" She squeezed my hand, and then reached over and experimentally squeezed my cock. \"Getting there,\" she said. \n\nWe lolled around in the tropical breeze as the sun lowered and the waves rolled in. I could tell Liza was thinking. I was too, and I was getting both excited and nervous. We went over early for a quick buffet dinner, and then, at around sunset, Liza went into action.\n\n\"First,\" she said, \"we have to dress you appropriately.\" She took the old long sleeved office shirt I had brought to ward off sunburn and cut the sleeves off. I tried it on. It looked weird but not dorky. It had tails hanging down in front as office shirts do, so it would cover me, but with a slit in front beneath the last button it gave easy access below the belt line. \n\nThen she dressed in the bath and did the big reveal. She was wearing a sheer, strapless negligee that came down to her crotch in the back -- maybe. In front it was supported by her swelling boobs, though, so it dangled about 5 -- 6 inches away from her nice flat stomach and maybe 3 inches above her pussy. Fortunately it came with a tiny bikini bottom with bows at the hips. And, as I watched, she ceremoniously donned a pair of white six-inch platform heels. I swear I could hear them screaming 'Fuck me.' \"I have to get up to where you are!\" she said, all wide-eyed innocence.\n\n\"You can't go to the dance in that,\" I said. \"You'll never even make it in the door!\"\n\n\"Sure I can. I'll wear a beach towel. It's getting darker. When everyone is dancing, I'll whip it off, you'll be happy, and no one else will notice.\"\n\nI thought Sandy was getting to her.\n\n**** \n\nWhen it was twilight, Liza wrapped herself in a bath towel. It came down to her knees. We called Sandy, not without misgivings, and walked over to the lodge. \n\nWe encountered two glitches in the plan immediately: First, Liza was instantly recognized as the girl who gave the fabulous show the night before. Also the fabulous show at dodgeball. Also, the fabulous show at volleyball. She was royalty. Admirers gathered around ten deep as soon as we set foot on the lodge deck. Second, it was too obvious that her real outfit must be hiding under the towel. People started calling out, \"Let's see it, Liza!\" A chant of \"Take it off!\" started and gathered steam until the crowd was lifting their arms in a full-blown wave around us. The band started playing stripper music. I was starting to panic, imagining what the ravening drunken crowd would do to her when they saw her essentially naked in her fuck-me's.\n\n\"What the hell,\" Liza whispered, \"Everyone here has seen everyone's everything by now anyway.\" And she whisked off the towel and threw back her arms to display herself fully.\n\nAt that moment, so help me, the puffy evening clouds parted and a last ray of sun illuminated Liza like a reddish spotlight. Her mountainous boobs were fully revealed, their tenting effect on her negligee clear geometric evidence of their awesome size and firmness. Their shadow on the lodge wall looked immense. Her tiny waist and stocking-model legs were silhouetted as well. \n\nThe crowd silenced. She turned back and forth. Her boobs followed her around at their own pace, then took a moment to settle. A new chant began, \"Liza! Liza!\"\n\nThen another rolling chant began: \"Take it off! Take it ALL off!\"\n\nLiza was turning red for the first time in my experience. I stepped in front of her. \"Hey, it's a pajama party!\" I said. \"Let's see some other pajamas up here.\" But the band played on, inviting bumps and grinds.\n\nThen, of course, Sandy burst out of the crowd and stepped in front of us. She was wearing a two-piece: a ruffled skirt above her boobs that covered down to her nipples, maybe, and another on her hips that came down to her crotch. Plus, she had a microscopic g-string and heels. The crowd applauded again, and she smilingly raised her hands to accept the accolades. She called for others to come out while decisively walking us over to the bar.\n\n\"Wow,\" she said to Liza, \"your tits are all--world. You may be the hottest girl I've ever seen!\" Without warning she put a hand under one tit and weighed it admiringly. \n\nI rolled my eyes at Liza, but she just shrugged at me. \"Thanks. You're hot too,\" she said. Sandy flashed a huge grin and scampered off.\n\nWe tried to stay lost in the crowd, but it wasn't easy because the crowd wanted to look at Liza. So did I, of course. I had the advantage of being with her but the disadvantage was that I felt I had to be discreet, which no one else felt necessary. People were ogling her and saying \"Damn, girl\" or \"Nice titties\" or the equivalent for the first half hour. Then the lights dimmed and everyone started to dance. I held Liza tight to my chest when the music allowed, and I ogled her shamelessly when it didn't. I told her sincerely that I was helpless, spellbound by ancient genetic programming. Eventually she found this amusing. \"See why I need Betty?\" she asked. I said yes, especially at pajama orgies.\n\nAbout halfway to curfew Liza told me we had to get serious. We danced with my arms around her, crushing her all-too-visible boobs to me, and with her hands between us, stroking my cock under the shirt while we kissed and looked in each other's eyes. I particularly enjoyed looking at her because she was so incredibly beautiful, but also because I realized I was falling hard for her and no matter what she said, she was out of my league. I wanted to drink in every moment. \n\nAnd then the band started a new tune and she said, \"This is it!\" She had asked for one that had a musical climax -- the Stones or Doors or something -- and we were going to fuck to it. I quickly got 100% hard at the thought, poking right out of my shirttails. \n\nAs the music got to the slow part, she pulled the bows at her hip and dropped her bottoms on the dance floor. Then she held my tip to her slit. She was excited too, and slippery. With the platform heels, she was just my height. With a bend of my knees, I slipped right in.\n\nThe music chugged along. It slowly picked up pace, and we got more and more heated as it got faster. She was rolling her hips at me, and I was flexing my knees and humping my hips at her. In my excitement I broke our hug and put both palms on her tits. She leaned into my hands. She wasn't laughing anymore; she was concentrating. As the music got faster and our efforts got more energetic she started to grunt with each stroke. I pressed her head into my shoulder with one hand to muffle the noises, and I moved the other hand down to her clit, leaving space between us where anyone could see our private connection. Faster and faster the music went. Louder and louder came the moans, but we were beyond caring. Finally, just when I doubted we could keep on rhythm any longer, she grabbed me tight around the neck and said \"I'm gonna cum...I'm...now...fuck! Faster! Fuck! Me! Faster! Ohhhh................................!\" And she redoubled her humping, threw her elbows over my shoulders, and pulled herself right off the floor. I grabbed her spectacular ass with both hands. She wrapped her high heels around my thighs and moaned into my neck for almost a minute as I pumped for all I was worth. Then she went limp, feet on the ground again. I looked around for spectators but saw none.",
        "I was pretty close myself, so I continued to pump. Then I felt a hand on my back and Sandy swung into view. She put her other hand on Liza's back, and I think she had a thigh pressed against each of ours too. With all the high heels, we were all the same height. Liza seemed nearly unconscious, but she remembered to hug me hard so Sandy would be looking at squished breasts rather than our cock-to-twat connection. \n\nSandy's eyes were red and she was sniffling. \n\n\"What's the matter?\" I asked her after taking a moment to recover myself.\n\n\"My guy... he drank too much. He barfed on my skirt.\"\n\nIt didn't seem that important at the moment. Turned out, it was. \n\nWith a huge effort of will, I stopped pumping Liza's cunt almost completely, just making little motions that I couldn't bear to stop. But I was still hard and couldn't get out without lowering myself. \"That's too bad,\" I offered, continuing my furtive small humping motions. \n\n\"Then my guy tried to stand up, but his chair hit Harold sliding back.\" she said.\n\n\"Harold?\"\n\n\"Harold was lying on the ground behind his chair. So my guy couldn't push it back and the chair fell over backwards. So did my guy. He klonked his head. They took him to the infirmary overnight.\"\n\n\"Is Harold OK?\" I asked. I felt sorry for the guy on many counts.\n\n\"He was just sleeping off some booze. And maybe I hit him a little too hard with the volleyball today. But his girlfriend got real nasty and tried to mace my guy. She had the can reversed, though, and she sprayed herself and Harold instead, so they went to the infirmary too.\"\n\n\"Anything else?\" I asked. Liza was still acting weak, but I suspected it was now from laughter.\n\n\"Yeah. I had to ditch my smelly skirt\" she backed up and revealed only the micro-g-string guarding her chastity -- \"and now I have nothing to wear.\"\n\n\"Can't you go back to your room for other PJ's?\" Liza asked, a little breathlessly.\n\n\"I would but I can't. My roommate banned me. She said our foursome last night was no fun because I'm a hotter fuck than she is and her guy spent the whole night chasing me. So I said I'd stay away.\" \n\nLiza and I looked at each other with what I was now beginning to think of as our Sandy Glance. Beneath the cover of her tits, she extracted my shrinking cock from her pussy and tried to get it back under my shirt, with partial success. \"Well, you can't stay here like that,\" she said. \"You'll be pregnant by morning.\" \n\nI wasn't sure Sandy was as worried as Liza about the prospect of too much sex, but she did look distraught that her evening might be over. \"Ewww,\" she said, \"He barfed on this too!\" She slipped her upper skirt over her head and tossed it away.\n\nWe shared another Sandy Glance. Sandy sniffled.\n\n\"OK,\" Lisa said, \"You can come back with us.....\" She was about to add a 'but\", I'm sure, but Sandy brightened up like a supernova and said \"Oh, thanks, thanks, thanks!! I'll be a good girl. You guys are so good to me and you're such a nice couple. And you're both so hot! I need more friends like you. Let's go.\" She took Liza's hand and, wearing just her g-string, heels and reachable ponytail, she led us through the dancers, out of the tent, across the lawn, and back to our place. I opened the door, and the girls clop-clopped in.\n\nThis was going to be awkward. Our bungalow had one room and one queen-sized bed. Sandy looked out the window and said, \"Why don't I sleep on the chaise out there.\" She turned to me and said, \"Thanks. I really mean it.\" She patted her ponytail up and then flowed up against me for a kiss. I had a good stiffy, and she wiggled herself against it as, I assume, a polite social gesture like shaking hands. \"We should get to know each other better some day,\" she said. Then she turned to Liza. \"You too. I've never seen anyone as sexy as you.\" And she cradled Liza's face in her hands and gave her a boob-crushing full-body kiss on the lips. She broke it off with a lingering glance at Liza's full figure, up and down. \"You guys can have a good time in here,\" she said wistfully. \"I'll be fine....\" And she took our remaining large bath towel and went out though the curtains and the sliding door onto the deck.\n\n**** \n\n\"She really is a nice person,\" said Liza.\n\n\"And hot,\" I said needlessly, my stiffy protruding through my shirt. \"And I'm straight.\"\n\n\"I see that,\" said Liza, looking pointedly at my shirttails. \"That was fantastic on the dance floor, by the way. Thank you. It has always been a crazy dream. I owe you one.\" I told her to be sure to let me know if she had any other crazy dreams.\n\nShe said, \"Here's one\" and flowed to her knees before me. She gripped my cock in her mouth, no hands. She raised her boobs up to me under her negligee for maximum visibility, looked at me, and waited passively. I resumed where I had left off on the dance floor, marveling at the vison of my shaft slowly disappearing into her face around her tight-stretched lips. I could feel her licking the underside. She hummed a little to encourage me. I felt like I was going to cum a gallon of jizz down her throat. I told her I wanted to cum all over every inch of her, and strangely, that I thought I was in love.\n\nA burst of heavy tropical raindrops suddenly hit the roof.\n\nFor obvious reasons I tried to ignore it, but another burst of heavy drops swept across the deck. Liza's eye lock faltered. We shifted our attention to the sliding door. Nothing happened, except I lost my focus. Yet another, longer burst of rain hit. With my dick still in her mouth, I said \"Uh-oh!\"\n\n\"Mm-mm!\" she responded.\n\nReluctantly I stood back and pulled Liza to her feet. We shared a Sandy Glance. \"You know what this means,\" she said.\n\n\"We have to let her in,\" I said. \"But she can just come in and sleep.\"\n\n\"Where? There's only this bed. And, it's Sandy. What are the chances we all just go to sleep with her in here?\"\n\nI tried to imagine three people spending a chaste night sleeping in one bed with Hurricane Sandy. \"I'll sleep on the floor,\" I said.\n\n\"Oh no, you don't! You're not leaving me alone with her!\" said Liza. \"I'm straight.\"\n\nWe pondered what we would do. The rain accelerated. I looked out between the window curtains. \"She's sleeping under the chaise cushion,\" I told Liza. \"She's trying not to disturb us. It's pathetic.\"\n\nIt was pouring, a tropical deluge.\n\n\"She really is a nice person,\" said Liza. \"We'll work it out.\" We looked at each other hopelessly. I slid the door open.\n\n\"Come on in, Sandy,\" I said. Nothing happened. \"Come on in, really! We changed our minds.\" I saw Liza flinch. Maybe I should have been more specific.\n\nSlowly the cushion rose. Sandy clambered out from underneath it and made her way across the slippery deck in her heels and g-string, cupping her ponytail in both hands to keep it dry. The rest of her was wet as a seal. I had an urge out of nowhere to smack her ass. My stiffy was peeking out so I held it down and hunched over to avoid sending the wrong signal.\n\nWater was still streaming down her body as she stepped inside. She looked like a drowned rat, except for her bushy ponytail which she fluffed up again and patted higher on her head. She regarded us sorrowfully. \"This is not what I pictured,\" she said miserably. She shivered, standing there in her high heels. She tried to shake herself off. I found her impossibly sexy. Her mound was almost completely exposed by the wet g-string. I couldn't keep my dick out of sight, so I just grabbed it. \n\nTo my surprised, Liza went over and gave her a hug. I don't know how that hug was intended, and I don't know how Sandy interpreted it. But after a moment it grew kind of squirmy, and Sandy slid a knee between Liza's. Liza opened her stance. Sandy advanced her knee and laid a huge lip-lock on Liza. Liza didn't resist. It went on and on. Liza ground down on Sandy's thigh. She took a hand off Sandy's back and grabbed a handful of fluffy ponytail. Sandy freed a hand and ran it under Liza's negligee, up her side, to a boob. Liza ran her other hand down and cupped Sandy's ass cheek, her fingers deep in Sandy's crack. \n\nI almost came. And I'm straight. \n\nFinally Liza freed a whole arm and beckoned at me desperately. I was reluctant to interfere, but I thought she might need oxygen so I went over to pry them apart. Instead, they both enveloped me in a group hug, as on the dance floor. \n\nSandy broke away and pushed Liza's lips to mine. \"You guys are the best!\" she said as we kissed. \"We're going to have so much fun! Were you guys really fucking at the dance?\" She grabbed my cock and stroked it while I kissed Liza, whose inhibitions seemed to be off somewhere with Sandy's, far, far away. Liza still held Sandy by the ponytail. Sandy held Liza by a boob, although her hand was much too small. With her other hand she discarded her wet g-string. I reached down to cop a feel of Sandy's fantasy ass, and I gave her a light slap. She wiggled her wet body against me.\n\nBeing inexperienced with threesomes (threesomes!?!) I wondered where we went from here. I needn't have worried. Sandy suddenly grabbed Liza by the front of both boobs and bull-rushed her backwards toward the bed. The back of her knees hit the bed frame and she went down with a thud and a bounce. She released Sandy's ponytail to break her fall. Her boobs bounced. Sandy rushed her again, grabbed them both, knelt by the bed and went down between Liza's thighs. I watched in amazement as Liza gasped but didn't struggle. She closed her eyes, whether from ecstasy or mortification I couldn't tell, but soon her little noises divulged the truth.\n\nSandy, being a good person, remembered me. Frankly I'd have been happy just watching and stroking, but without removing her mouth from Liza's pussy, Sandy managed to get up on her feet, arch her back, straighten her legs, and wiggle her butt at me. With her heels still on, she was at exactly the right height. The invitation was completely clear.\n\nI stood behind her and stroked her wondrous ass, and then I ran a finger up her slit. She was wet, and she wiggled at me some more. I inserted my cock in her about an inch and waited. She humped a little but really couldn't move back toward me without disengaging from Liza, who was now quietly going \"ohhh, ohhh...\" I watched as Sandy slowly narrowed her grip on Liza's big tits so that she was just holding the aureola. Then she grabbed Liza's nipples and twisted them hard. Liza jerked and went \"Unnhhhhhh\" but kept her eyes closed. So I entered Sandy fully and started to fuck her. \n\nLiza must have felt the bumping via Sandy's mouth on her cunt, because she opened her eyes and gave me her most glorious smile.\n\nI couldn't resist lightly smacking Sandy's ass hard, just once. I hoped she'd take it as a love tap. Sandy said \"HUhhh eeee!\" \n\n\"What?\" I asked. \n\nLiza translated, \"I think she said 'Hurt me!'\" Sandy nodded her head as best she could, so I grabbed a big handful of ponytail with one hand, pulled hard, and whacked her on the ass again. There was a loud smacking sound of flesh on wet flesh. Sandy groaned and leaned her ass toward my smacking hand, so I did it again. Liza gave a sharp intake of breath. \"Hhhhhhhhhhhhhhhhh,\" and closed her eyes as Sandy twisted her nipples again.\n\nThis was all pretty entertaining, and I was close to cumming. I sped up my strokes and was banging Sandy pretty hard, with both my hand and my cock, and she was banging into Liza's cunt pretty hard with her mouth. But suddenly she raised her head and said matter-of-factly, \"Now I'd just like to watch you two guys fucking. Would you?\"\n\nLiza was in some kind of unresponsive state, so it fell on me to say \"Sure!\"\n\nSandy grabbed Liza under both knees and effortlessly repositioned her in the middle of the bed. I got between her legs, entered easily and started stroking slowly. Liza opened her eyes, gave me a big happy smile, and closed them again. Sandy crouched behind Liza's head, the better to watch me fuck her, I assumed, and to watch Liza's trembling tits. She occasionally gave Liza an upside down kiss, or grabbed a tit or a nipple and tweaked, slapped or twisted it to keep Liza fully occupied, and she fingered herself to keep herself warm. Liza was making those distressed sounds indicating a really good time and starting to get sweaty and short of breath. Sandy fingered herself really fast. I couldn't blame her.\n\nLiza, also a good person, eventually reached blindly over her head and groped around until she found Sandy's pussy. Sandy spread her knees wide and moved her own fingers out of the way. She watched with interest as Liza located her slit and started to stroke it. I saw Sandy reach around behind herself under that tasty ass and I wondered whether she was fingering her own asshole with one hand as she played with Liza's tits with the other. She seemed to be getting excited. Me too. \n\nI picked up the pace and was just about to cum when Liza said, \"You wanted to cum all over me, right?\" Sandy said, \"Ooooooo, me too, me too!\" and she ooched herself forward on her knees. Her crotch was now right at Liza's hairline, and to my amazement I saw Liza draw her forward the rest of the way and pull her snatch down onto Liza's tongue. Sandy looked delighted and settled herself down on Liza's mouth, still flicking Liza's tits and pleasuring herself behind. I reached out and tweaked Sandy's nipples the same way she was treating Liza's, but Sandy whispered \"Hurt me!\" so I pinched and twisted hard, and then slapped her on a tit. She pushed her chest out for more, but I was about to cum.\n\nI gave Liza ten or twenty extra hard strokes and watched her boobs slosh up and down. I was about to explode. I pulled out and aimed right at Sandy's boobs. She saw and leaned toward me. I pumped away and scored one hit almost on a nipple, a couple low on her stomach, and several on Liza's tits.\n\nSandy rubbed my first shot all over her tits, giving them a satin sheen. As the cum on her stomach slid inexorably down toward Liza's mouth, we both rubbed the rest onto Liza's tits.\n\nLiza continued to eat Sandy's pussy. We watched to see what would happen when the sliding cum arrived. As we waited, Sandy started a conversation. \"She's really something! Look at these tits\" -- she fluffed them up --\"they're natural but they hardly flatten at all when she's on her back. And these little pink nipples on top of that huge mound are just adorable.\" She pinched one, pretty hard. \" I just want to nibble her whenever I see her. And she's so thin! Thinner than me and I'm skin and bones!\" There was slurping from below. The cum was arriving at Liza's tongue and Liza was sucking it down. Eventually the noise abated. \"She has a good long tongue!\" Sandy reported. \"She can reach way up inside me.\" I really couldn't think of Liza as just a prime filet at this stage of our relationship, so I just rubbed her flanks and mound affectionately. \n\nStill sitting on Liza's face, Sandy said she liked having her nipples twisted until it was painful, and she demonstrated on herself and had me practice. She said she liked \"everything\" and we should have a real orgy some time. She continued, \"I'm really enjoying myself. My roommate can have that guy. I wasn't trying to steal him. I just like fun.\" I thought that summed her up pretty well.\n\n\"And I can tell she's really hot for you,\" Sandy continued, relaxing comfortably on Liza's face. \"She snuggles up to you all the time, have you noticed?\" I had, now that I thought about it, especially whenever I got the boob-to-elbow bump. I was pretty happy, even before Liza said \"uh-huuuuuh.\" \n\nWhile I recovered, the girls played with each other's body parts. I started to doze.\n\n**** \n\nI was awakened by another storm. The royal trireme was rocking and the oarsmen were groaning as they fought the waves. Strangely, though, a full moon shone brightly out of a clear, starry sky. A cold wind swept over me. Apparently the royal concubines had left the royal berth without permission. \n\nThen I woke up. A shaft of sunlight lit the room. The sliding door, still open, admitted a warm tropical breeze that rippled the open curtains. The bed was rocking because the royal concubines were sixty-nining energetically. Random moans emitted from both ends of the two-headed beast.\n\nResponding to four beseeching eyes, I stirred myself and picked one of the available orifices at one end, then the other. Minutes went by, but eventually Sandy freed her mouth briefly and said, \"I can't believe you guys are leaving today. What do you guys want to do this morning?\" \n\n\"Ladies first,\" I said. We both looked at Liza, who now had my shaft in her mouth.\n\n\"You always ask me things when I have my mouth full,\" she said, not very clearly. \"But I already had my fantasy, on the dance floor last night. Besides, this is all kinda...new.\" \n\nSandy looked at her disbelievingly.\n\n**** \n\nWe decided to spend our last morning on the beach. I managed to get a cooler of pina coladas and we scored one of the wide, half-covered beach chaises right near the water. Not wanting to disturb her roommate, Sandy just went out in her micro-g-string. Liza went with her white bikini with the absurdly tiny triangles. They were like postage-stamps on honeydew melons. She insisted I wear the suit she had bought me, just to be fair. \n\nWe settled down with lucky me in the middle and watched the waves roll in. Occasionally a thong would stroll by. I thought this was a passably good start to the morning, certainly better than the royal trireme with those shiftless concubines.\n\nLiza reached across me and gave one of Sandy's nipples an experimentally hard tweak. She'd been listening. Sandy, snoozing, just sighed.\n\n\"Are you changing teams on me too?\" I whispered.\n\n\"I think I'm bi,\" she said. \"But just for boys and Sandy.\"\n\n\"Me too,\" I said. \"But just for you and Betty.\"\n\n\"Really? When Sandy took off up the beach yesterday I thought you were going to chase her over the horizon.\"\n\n\"Well, first, that would be like running down a cruise missile.\" I pointed out. \"But also, I'm a boobs guy.\" \n\nShe swatted me, but then she rolled toward me so her boobs were pressed against me and gave me a long, happy kiss while she ran her fingernail over the little pouch on my suit. It twitched. \"Well, I guess I believe you,\" she said. \"The evidence supports you. But you better not change your mind!\"\n\nWe drank and snoozed in the tropical breeze. The waves rolled in and the thongs strolled by. It was lovely. But Liza had an early afternoon plane to catch, and I was going to keep her company on the jitney.\n\nSandy put a hand on my chest and slowly ran it down under my suit. She was acting blissed out and sleepy, but I could tell she was teasing me. She gave me a squeeze and asked whether we could have one more mini-orgy before we had to go. \n\nIt would have been rude to refuse, so I started to extract myself from between them, but Liza said \"Nooooooo -- it's too nice here!\" and threw a leg over my nearer knee. Her tits were still crushed against me, and if anything, they looked even bigger flattened out.\n\nSandy agreed. She rolled toward me, put a knee between mine, squeezed my cock and resumed stroking. After a few minutes she started humping against my thigh, which was growing damp. Liza kissed me. Sandy stuck her tongue in my ear. Liza started brushing her fingers lightly over my tip and grinding her crotch against my hip. I reached down to massage their pussies as best I could, but the angle was almost impossible.\n\nSandy suddenly reached over and grabbed Liza's Pina Colada off the opposite arm of the chaise. She slurped in a mouthful. Liza said, \"Hey, how about me?\" So of course they kissed messily, and a certain amount of thick, white Pina Colada drooled down their chins. They licked it off each other and grinned at me like pornstars. \n\nMy cock was rock hard and turning colors. \"Guys...! That's totally not fair!\" I said. \"How am I going to walk back in this lovely new bathing suit?\"",
        "Like a flash, Sandy peeled my suit down and sprang on top of me. \"Sorry,\" she said to Liza, \"but since you think he's a keeper, this last one's for me!\" and she shoved her micro crotch cover aside and impaled herself on me. \n\nLiza watched with interest, resting her head on my shoulder. \"So this is what it looks like. Pretty hot!\"\n\n\"You should see how hot it is when you do it,\" I whispered. \n\nSandy was athletic as ever, practically vibrating up and down, stomach muscles pulsing and ponytail bobbing crazily. As we climaxed she leaned backward slightly, fingered her clit, and went \"uuuuaaaaaaaaghhhhhhFUCK!\" We came together.\n\nThe crowd of thongs that had assembled at the waterline clapped politely and moved along. This was routine, apparently.\n\n\"I have to admit that was worth the price of admission,\" said Liza. \"But now you owe me.\"\n\n\"Thank god we're on different planes,\" I said, \"I'm exhausted. Back home I'm coming for you, though!\"\n\n\"Yes, you will,\" she said.\n\n**** \n\nSandy accompanied us on the jitney to the airport, just to say good bye. Harold and girl with the metal chest helmets skulked into the back seat and ate dust all the way. They gave Sandy wide berth. \n\nSandy kissed us both at some length and we talked wistfully about a reunion. But Sandy lived for the moment, and I didn't expect much. She took the return ride to the Club. \n\nI started to talk to Liza about work, but she said, \"Later.\"\n\n**** \n\nTuesday afternoon, Betty came into my office and shut the door. She looked particularly frumpy. \"I know what you want to discuss,\" she said. \n\n\"I'd kill to make it OK,\" I said. \"But we have invested 25-odd years of education and probably all of our charm and connections to get these jobs, and if we're caught dating, we're both out on the street.\"\n\n\"You poor guy,\" said Betty. \"I can't believe you fell for it, but Eliza said you would. I'm flattered, by the way.\"\n\n\"Who's Eliza?\" I asked.\n\n\"My sister!\" she said. \"You know her pretty well, I hear. That worked out, didn't it?\" No grin.\n\n\"Just a bit,\" I said with a total, shit-eating grin. \"What do you mean, sister?\"\n\n\"Well, it was a little sneaky. But for your sake and hers, we needed to find a way to get you to invite a total stranger on three-day, double-occupancy sex vacation, and we didn't think you were the type. You're a third-date kind of guy. So...you had a difficult, time-sensitive problem, and I solved it for you. Like always.\"\n\n\"No, that's nuts. I know you, I know her, and you're her!\" I was losing balance. \n\n\"Can you prove it?\" \n\nI thought back. The beer. \"Well, you're both Elizabeth. You can't have two sisters with the same name, Ms. Sneaky.\"\n\n\"I'm Boadicea. Check the company records,\" she said. \"And she's Eliza.\" \n\nI thought this over for a long time. \"Well...\" I said, \"actually, this does make it a lot less awkward. If it's true. Which I doubt. Don't tell her, but I'm head over heels for her.\"\n\n\"It's true enough.\" said Betty. \"Just don't expect her to join us at happy hour.\""
    ],
    "authorname": "Fervid",
    "tags": [
        "group sex",
        "humor",
        "romance",
        "threesome",
        "oral",
        "aroused",
        "blowjob",
        "ffm",
        "two women one man"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/club-caribe"
}
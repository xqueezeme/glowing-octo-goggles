{
    "title": "Lucy's Letters",
    "pages": [
        "This is a romantic tale exploring the developing affections of two young women brought together by a past connection they share. Not a story driven by dramatic conflict, but more dependent on the peeling away of layers and the unfolding of events. There's definitely sex, but it happens later in the story.\n\n*****\n\nSeattle, Washington, 2000\n\nWhen 'Grandma Audrey' passed away from cancer at age 75, I was deeply saddened. She had been such a positive light in my life and a true inspiration for me. And now she was gone. Audrey Ellison was a strong-willed person who stood up for women's rights, and for those less fortunate. And on a more personal level, it was her love of literature and her work as a high school English teacher that eventually led me, Adina Gray, to pursue a career in journalism. \n\nNow, at twenty-seven, I'd been at it long enough to have established a reputation as a writer of some worth, and as someone who manages to meet her deadlines. But I never went in for any of that investigative journalism or city desk stuff. I was more drawn to stories with a personal slant, or 'features' as they're often called in the biz. At the time of this story, I was mostly working freelance for a travel magazine, which had its perks. My last assignment had me reviewing Costa Rican travel lodges!\n\nGrandpa died well before Grandma, leaving her to spend her last years on her own, in the very house she had lived in with her husband for nearly forty years. When Grandma became sick, she fought my parents 'tooth and nail' to not relocate her to a care facility. And so, instead of risking an all-out civil war, my parents wisely enlisted a nurse to come to Grandma Audrey's home and provide her with as much care and support as Grandma, and the nurse, could possibly stand. \n\n\"I'm ready to head out,\" my mom called out to me. \"Are you going to be alright?\"\n\n\"Yeah, I'll be fine, Mom. Thanks!\" Mom and I had been cleaning out Grandma's place for the past week, and it was starting to feel fresh and alive in there again. Curtains were open and the windows washed. And quite a bit of stuff donated to Salvation Army. Of course, it wasn't too bad a job, for Grandma wasn't a hoarder, or messy, even when she was ill. And since I was moving into the house, I could take it at my own pace, and gradually settle in.\n\nThat's right, I was moving in. Keep it in the family, I say. And I sure as heck couldn't beat the price.\n\nBut I really did love the house. It was a cute marine blue bungalow chock full of so many wonderful childhood memories. The Christmases in that house were an especially grand time for me. Granted, the house was a bit dog-eared in places and rather old fashioned in many respects, but it also had its charm. And the kitchen and main bathroom had been remodeled about ten years ago, so they were now much nicer. Lighting had been modernized as well. \n\nBut the main reason I was moving in was because about a year prior, my husband and I had finally called it quits. I give the two of us some credit. We did keep it going for five years. But eventually it fell apart and I was forced to slink back home with no children to show for it, and with my tail between my legs. Speaking of 'tail', that was one of my reasons for ending it. Jeffrey just couldn't keep his pants zipped.\n\nMy first night alone in the house wasn't the best night of sleep I'd ever had. It was strange being in Grandma's bed that night, on the very mattress she'd spent her last days on. Even with fresh sheets, I kept waking up throughout the night, sure that her ghost was pattering about the house in those blue fuzzy slippers. Every cursed creak and groan had me sitting up and staring into the dark. \n\n\"Okay,\" I muttered. \"Maybe I should hire an exorcist...\"\n\nWell, I never did hire an exorcist. But I did buy myself a new mattress! Not that I believe in ghosts or goblins, but one can never be too sure. In preparation for its arrival, I stripped the bedding and yanked Grandma's mattress off the slats and onto the floor. 'A good time to dust under the bed,' I thought.\n\nAnd that's when I found the letters. Inside a shoebox.\n\nI raised up the slatting and retrieved the dusty box from beneath the bed. Scrawled on the top in bold black marker were the initials, 'L. D.'. I sat in a nearby chair and opened the box. There inside, were a packet of letters all neatly bound together with thick yellow string tied off in a bow.\n\nWhen I say 'letters', I should mention that they were still tucked inside their original envelopes. This was very good, for it offered more clues as to their origin. Without undoing the string, I attempted to discern who the sender was, but it was difficult to tell much without unbinding the packet. I gleaned from the top one that it was addressed to my Grandma, though the address wasn't one I recognized. \n\nAudrey Callaghan, 35th Ave. NE., Seattle, Washington. \n\nGrandma's maiden name was Callaghan, and the address was probably from when she was a young girl going to school in Seattle. If there was a return address, it would be on the back, I surmised. And so, with nervous anticipation, I undid the tie. \n\nI felt a bit uncomfortable, knowing that I was about to violate my grandmother's privacy, and yet, she could hardly mind now. Besides, there was no possible way I'd pass on a chance to examine the contents of these letters. And much better that I found them than some stranger. Or worse, they were tossed out, and an important part of our family history was forever lost.\n\nThe Letters\n\nHaving removed the string, I began shuffling through the first few envelopes. They were slit across the top, indicating that they'd been opened and read. As I looked through the stack, what soon became clear is that they were all written by the same person; Lucy Dwyer. Thus, the initials on the box. 'L.D.' As I suspected, her return address was on the back of the first envelope. \n\nLucy Dwyer, The Vintage Inn, Seattle, WA. \n\nI made a note to look into that. I checked the stamped postal dates, and they were all mailed sometime during the mid- to late 1940's, when my Grandma would have been of college age. I knew from conversations with her that she had attended the University of Washington.\n\n\"The Vintage Inn could very well be the name of a women's boarding school,\" I deduced, my journalism skills slowly kicking in. \"Lucy and Audrey were maybe schoolmates.\" How fascinating! A glimpse into post-war college life. \n\nThe first set of envelopes were in various pastel colors with flowery borders, which would be typical for a young woman of that time to use for sending letters. And what beautiful, flowing handwriting! Of course, a woman was trained to do these things back then. You know, sew, cook, drink from a cup, and walk with a book on her head. \n\nI can't remember the last time I wrote anything to anyone. I do have some colleagues who swear that their work improves when they write by hand, but I'm not one of those people. Now it's email, text, cut, paste, upload, download...add an emoji...\n\nI noticed that the last three envelopes were larger in size and off-white. And based on the date stamp, they were from a much later period. They were addressed to Audrey Ellison, at this address, which is where she moved with her husband Conrad Ellison in the 60's. These too were from Lucy, only now she was Lucy Dwyer-Bledsoe, and living in San Francisco, California.\n\n\"Hmmm...\" All these years later, and they continued to correspond. Who was this friend who meant so much to my Grandma that she kept her letters for all this time? I couldn't remember her ever mentioning such a person. Perhaps Mom knew something of her? \n\nMy hands were sweating so much that I went and got a towel to dry them off. The last thing I wanted was to soil these precious artifacts. I also decided to move out to the living room, turn on a table lamp, and settle in with a cup of tea for what I presumed would be a captivating read. \n\n\"Where to start?\" I wondered out loud, as I shuffled through the stack. There clearly was a story here, and it seemed best if it unfolded chronologically. I sorted the letters as best I could by their date stamps and opened the first letter.\n\nSeattle, 1945\n\nDear Audrey, \n\nI'm so happy we've become friends! I've asked my uncle if you could come horse riding with me at our Issaquah ranch, and he says that you are more than welcome. You should plan on spending the night, if that's okay? And don't worry about riding gear. I'm sure I've an outfit you can wear. We're pretty much the same size...Except for in the chest. You've got me beat there! Speaking of which, I love your blue skirt. Looks good on you. But then everything looks good on you.\n\nSincerely, Lucy\n\n'...everything looks good on you'...? Mustn't read too much into that comment. Did my Grandma read more into it? Problem was, I didn't have her responses, so I'd no idea what she thought. \n\nAnd yet she kept this letter. Well, on to the next one...\n\nDearest Audrey,\n\nThank you for not being upset. What a relief! I know my secret is safe with you. I cannot imagine what horrors I'd undergo if this ever got out. I'd certainly be removed from school. Yes, I am 'that way' and while I do have feelings for you, I promise never to do or say anything that would compromise your reputation. It's just difficult to deny what's in my heart. But such is the way of the world, and so I shall 'soldier on'. Forgive me for daring too much. I did sense some affection and, for a brief instant, I thought you might be like minded. Please don't regret my kiss. As long as I still have your friendship, all is right.\n\nWith deepest affection,\n\nLucy\n\n~*~*~*~*\n\n\"Oh my god!\" I blurted out to no one. \"Lucy Dwyer was attracted to my grandmother. And she kissed her!\" \n\nI couldn't believe this. What had I stumbled into? I must confess that my heart ached for this young woman's tender confession. Having to conceal one's feelings because it might offend others must be terribly painful. And in the case of one's sexuality, unjust. To think Lucy's feelings were directed toward my grandmother. And did Grandma reciprocate? I hoped that answer was contained within the remaining letters.\n\nWell! This is very interesting,' I mused, as I opened the third letter... It was a short note, but was it ever a shocker.\n\n~*~*~*~*\n\nMy Dearest Audrey,\n\nI had to write and tell you how grateful I am. Returning the biology book was a perfect ploy! I don't believe any of the other girls suspect us, and I hope with time, we'll find a safer place to meet. But right now, my room at the boarding house is all we have. \n\nEternally grateful,\n\nLucy\n\n~*~*~*~*\n\nWhoa, Grandma did have sex with Lucy Dwyer! The letter was a bit vague on the details, and understandably so. If such a letter got into the wrong hands, it would be devastating to both of them. Still, the gaps in time, and the lack of my Grandma's side of the story were extremely frustrating. Though it must be noted that my grandmother married a man and had two children by him.\n\nThe next letter, interestingly, was without a return address. I soon learned why. And it also helped clear up my misreading of Lucy and Grandma's relationship.\n\n~*~*~*~*\n\nDear Audrey,\n\nNo doubt you've heard, Gabrielle and I were discovered in my room. We were in bed together, and not exactly sleeping! Oh, you should have seen the look on Mrs. Rawson's face. I told Gabrielle we had to be quiet. Not good when your doors don't have locks on them! As for Angela, she's a loathsome rat! Nothing we could say would keep her quiet. It's not like we're the only ones. Sadly, the boarding house has evicted us, and my dad is threatening to either send me to a convent or marry me off. Can you believe him? As usual, my mother has no say in the matter. I had to sneak this letter off to you without him knowing. Good news is, Gabrielle has taken refuge with someone who is also like minded. I plan to join her. We'll hide out until we find the means to leave the area. How I hate this place! I'm not sure when I'll be able to write again. But I will, I promise. Oh, what we must do for Love!\n\nYour trusting friend,\n\nLucy\n\n~*~*~*~*\n\nI was astonished by what I'd just read. Lucy wasn't secretly in a relationship with Grandma Audrey. But with a girl named Gabrielle. While I knew this had taken place more than fifty years ago, I still couldn't help rooting for them, hoping they made it to a safe haven. \n\nAnd my Grandma was not only privy to Lucy and Gabrielle's relationship, she provided cover for them as well. What must she have been thinking!? She clearly hadn't condemned them, and yet, what thoughts must have been roiling through her head. \n\nWould the rest of these letters provide answers? Godspeed, on to the next one... Again, no return address.\n\n~*~*~*~*\n\nDearest Audrey,\n\nGabrielle and I are leaving for San Francisco. Hallelujah! She has a relative there that has agreed to put us up, and help us start afresh. Yes, Audrey, there are kind people everywhere. You only have to seek them out. The woman we've been staying with has been a godsend. Though she has also become our teacher as well. There's so much to know, I had no idea! But I guess you'll have to take my word on that. I couldn't possibly tell you all that we did, for that would make you blush a hundred shades of red. But imagine, if you will, someone watching!! I know! How could I possibly do such a thing, you ask. But it got even more daring. There's a French expression for it, which I've forgotten. Anyway, the experience was beyond anything you might imagine. I fear you think me wicked, but there's no wickedness in it at all. In fact, I may write a book about it someday. I can't think there's much out there on the subject. Anyway, I hope I haven't shattered your faith in me? \n\nPS: Once we are settled in San Francisco, I'll send you word, and perhaps you will visit? As for the contents of this salty missive, please burn it straight away! \n\nWith eternal friendship,\n\nLucy\n\n~*~*~*~*\n\nWell, sorry Lucy, but Grandma didn't burn your letter. Burn it, indeed! There were no more letters from this early period. All that was left, were three letters sent by Lucy from San Francisco. So, at least I knew Lucy had made it. \n\nAs I sipped the last of my tea, I had this strange feeling my world was expanding. Lucy's letters had provided me with a portal to a previously hidden world, and I was compelled to enter it. It was like coming upon a winding, dusty trail and wanting to know what waited at the other end.\n\nAnd so, I topped off my tea, and delved into the San Francisco letters. Upon opening the first one, out dropped a newspaper clipping announcing the marriage of Lucy Dwyer to Robert Bledsoe, at St. John's Church, Mill Valley, California.\n\nWhat!? Well, I could only hope that her letter explained this unexpected turn of events. The first thing I noticed is that the handwriting was smaller and the letter longer.\n\nSan Francisco, California, 1950\n\nDearest Audrey,\n\nSo glad to have received your letter. Congratulations on your engagement to Conrad. How happy I am for you! He sounds like a wonderful man. I wish you many happy years. I do apologize for not writing sooner, but it's been a whirlwind down here, what with the upcoming wedding and all. You must be surprised to read that I am marrying Robert, and likely curious as to what has happened to Gabrielle. Well, I should preface my tale by advising that after reading to the end, you should burn this letter as well. \n\nDo not be alarmed. Gabrielle and I are still very much together and very much in love! You see, my father, to save face, has threatened to cut me out of the family will unless I marry a man. Clever of him, yes? And so, I'm marrying a man. Of sorts. Robert is one of the first friends I made here in the bay area, and he is also 'like-minded' only toward other men. So, we've agreed to marry and serve as each other's cover. Very much like Edith and her husband Harold. And scores of others, I suppose. So, wish the three of us well. \n\nAnd please, no gifts! As always, you are welcome to visit. Gabrielle, Robert and I live together not far from Golden Gate park. We are a merry band, indeed. I've a job with the phone company, and Gabrielle is working for an insurance firm. Of course, Robert is in fashion, god bless him, and life is as interesting as ever. \n\nPS: There are plans for me to have a child. That task with fall to Robert, not Gabrielle. \n\nAs always, with love and affection,\n\nLucy Dwyer-Bledsoe\n\n~*~*~*~*\n\nI must say, my opinion of Lucy Dwyer-Bledsoe skyrocketed upon reading this last gem. I've read about such convenient marriages throughout history, such as Edith Sackville-West and Harold Nicolson. But to actually know of someone within my family's social circle, brought the reality home. This whole adventure just kept getting \"curiouser and curiouser\" to quote Alice. \n\nThe next letter from Lucy spoke of their first-born, a daughter, Doreen. She was born in 1950, a few years before my own mother. There were several photos of little Doreen enclosed with the letter. Life for Lucy and Robert and Gabrielle and little Doreen seemed to be quite idyllic, and comfortably below the radar.\n\nAnd now the last letter from Lucy, dated, November, 1998. \n\nDearest Audrey, \n\nI was going to call you, but I know how much you enjoy receiving letters. I'm sorry that it's taken so long to write, but these past few years have been quite trying. Robert finally succumbed to his illness, and I've been dealing with the fallout from that. During his illness, his partner, Allan, assumed care of him. Still, I hated seeing him suffer through such a long, painful decline. But now it's over and he's resting with the angels. Though we were a couple in name only, we did produce one beloved daughter, our precious Doreen who has come to accept the true nature of our merry threesome, and I consider her the wiser for it. \n\nIt's funny, but you were my first love, Audrey. You were the one who helped me figure out who I was. I think back on those days of innocence with such affection and longing. I can recall them, as if it were yesterday. Your friendship throughout the years has meant so much to me. I wish there was a way for us to see each other again. But it now seems unlikely. Still, one can always hope. \n\nOn a positive note, my granddaughter, Stephanie, has a pottery show opening in Tucson. Remember her? She was barely ten when you came to visit us in '83. It's her first show, and I'm quite proud of her. I've enclosed a recent photo of her taken while on one of her hikes. Hard to believe she's 25. As is, your granddaughter, Adina. \n\nWith love and affection,\n\nLucy\n\n~*~*~*~*\n\nBy the time I finished this last letter, I was completely won over by this woman's heartfelt sentiments. Though I didn't know Lucy Dwyer-Bledsoe, I was sure that I would like her if our paths ever crossed. \n\nBut the key piece of information was that Grandma did visit Lucy in 1983. And she met her granddaughter, Stephanie. Which makes Stephanie a witness to these events.\n\nI picked up the photo of Stephanie. In it, she is sitting on a rock, surrounded by desert. In the background are several towering cacti. She has on a pair of hiking shoes, a short-sleeved shirt and khaki shorts that show off her trim, muscled legs. Her skin is tanned, and her lips full and pink. And thanks to her short sleeves, I can see a red flower tattooed on her upper arm. \n\nHer brown hair, lightened in places by the sun, is pulled back into a ponytail and threaded through her red cap. About her neck hangs a pair of binoculars. She's smiling at the camera, her eyes twinkling, as if she's saying, \"Hey, it's great down here. Why don't you come and join me?\"\n\nWhat a tempting idea. She looks vibrant and happy, and would surely want to see her grandmother's letters. ",
        "I actually saw myself in that desert landscape, and couldn't help wonder if the reading of Lucy's letters had injected Stephanie's spirit into my veins. I felt as if I knew her. Of course, I didn't know her. And yet, there were these connections we had; being born in the same year, and being the grandchildren of two women with a deep and long-lasting friendship. \n\nAnd that's when I decided to track down Stephanie. \n\nThe Search for Stephanie\n\nAs for leads, I knew that she was living in Tucson, and that she was an artist, and did pottery. However, I couldn't know for sure what her last name was. Clearly, her mother, Doreen, would have married and taken the name of her husband, so it was unlikely Stephanie was going by Bledsoe. \n\nMy hope was that there could only be so many Stephanie's in Tucson who were also potters selling their work in galleries. I decided to conduct an online search of galleries in the Tucson area to see what surfaced. \n\nBut first, I called my mother. I had no intention of revealing to her the full extent of my discoveries. Not yet. But I did want to ask her about Lucy. \"Hey Mom!\" \n\n\"Hey sweetheart. How was your first night in the house?\"\n\n\"Uh, well, I didn't sleep too well. I kept hearing Grandma's ghost walking about.\"\n\n\"Oh, don't even say that! Please.\"\n\nI had to chuckle. Mom was a staunch believer in the afterworld. \"Sorry about that. Actually, the reason I'm calling is I want to know if you ever heard Grandma mention a friend by the name of Lucy. Seems they knew each other in college and kept in touch over the years.\"\n\n\"Lucy...Lucy...Not off the top of my head. Why?\"\n\n\"I just found some correspondence here at the house from a Lucy Dwyer-Bledsoe. Apparently, she lived in San Francisco.\"\n\n\"Wait. Did you say Bledsoe?\"\n\n\"Uh, yeah...ring a bell?\"\n\n\"I vaguely remember her talking about the Bledsoe's. They lived in California, if I remember correctly. Your grandma may have flown out there to see them at some point, though I can't remember exactly when.\"\n\nI thought about sharing the letters with Mom, but I felt my first responsibility was to track down Stephanie. After all, the letters were written by her grandmother, not mine. At least, Mom did have some recollection, vague though it might be, of Grandma Audrey taking a trip to the Bay Area.\n\nFor some reason, this whole connection to Stephanie's family seemed important to me. I just wasn't clear as to the 'how' or 'why'. Maybe through Stephanie, I'd learn more about my family's past. \n\nIf anything, it had the makings of a future article for one of my magazine publishers. \n\n~*~*~*~*\n\nMy search for Lucy's granddaughter was much easier than I thought. I simply searched for galleries in Tucson, and typed in words like 'pottery' and 'Stephanie', and eventually found what I was after. \n\nWhile visiting the Saguaro Gallery of Fine Arts website, I read about a show of paintings, drawings, sculpture and pottery currently running at the gallery. There were several artists listed, and one of them was Stephanie Whitmore. \"Ah, Whitmore...\" I murmured under my breath, quite pleased with myself. \"Still have the stuff, Gray.\" \n\nStephanie's name was an active link, and when I clicked on it, I was taken to her bio. There was mention of her love of birds and nature and how she wove them into her textiles and pottery. It listed her education and credits. But most importantly, there was a head shot of Stephanie Whitmore, smiling out at the camera from beneath her baseball cap. And I knew in an instant that I'd found her. \n\nWhitmore could be her married name, but there wasn't any mention of a husband or partner. Likely scenario, Stephanie Whitmore was the daughter of Doreen Whitmore, and the granddaughter of Lucy Dwyer-Bledsoe. Now, all I had to do was figure out a way to contact her. \n\nI copied down the gallery phone number and made the call. When I reached the gallery office, I got straight to the point. \"Hello, my name is Adina Gray, and I need to get a message to one of your artists. Her name is Stephanie Whitmore.\"\n\n\"Sure, I can do that for you. What's your message?\" the man on the other end of the phone asked me.\n\n\"Please tell her that I have in my possession some important letters pertaining to her grandmother, Lucy Dwyer. Again, my name is Adina Gray, and she can call me, or if she'd prefer, she can email me as well.\" I gave the man my contact information and signed off. \n\nI was tremendously pleased with my efforts, so far. The very thought of actually connecting with Lucy Dwyer's granddaughter, the very Lucy Dwyer who had fallen for Grandma Audrey when they were schoolmates, had me over the moon with excitement. And even if this contact resulted in nothing more than the passing on of Lucy's letters, I felt that it would be worth it. I was sure that this simple gesture was mending a thread that stretched deep into our families' pasts. A connection that began on a Seattle college campus nearly six decades ago. \n\nWell, a week went by without me receiving either a phone call or an email from Stephanie. I was just about to call the gallery a second time, when an email came through. \n\nTo: Adina Gray \n\nFrom: Stephanie Whitmore\n\nHello, Adina. I'm responding to a call you left at the gallery. According to your message, you have some letters having to do with my grandmother, Lucy Dwyer?\n\nStephanie \n\n----\n\nHooray! I had the right person. I felt my excitement growing by the minute.\n\n----\n\nTo: Stephanie Whitmore\n\nHi, Stephanie. Yes, thanks for getting back to me. I am the granddaughter of Audrey Callaghan, who was a close friend of Lucy Dwyer while at the University of Washington. My grandma recently passed away, and while cleaning out her place, I uncovered a box of letters that were sent to her by Lucy while they were at the University of Washington, and later when she lived in San Francisco. Anyway, I'm thinking you might like to see them.\n\nAdina\n\n----\n\nTo: Adina Gray\n\nHow did you track me down?\n\nS.\n\n----\n\nTo: Stephanie Whitmore\n\nWell, in one of the letters, your grandmother very proudly mentions that you are an artist working in Tucson. There is also a photo of you in that letter taken while you were out on a hike. So, I was able to find you through a bit of sleuthing. I'm a journalist by trade.\n\nAdina\n\n-----\n\nTo: Adina Gray\n\nAre you doing a story on Lucy?\n\nS.\n\n-----\n\nTo: Stephanie Whitmore\n\nNo! I was just tooting my own horn, that's all. Sorry. This is strictly a personal connection.\n\nAdina\n\n-----\n\nTo: Adina Gray\n\nWell, it does sound like these letters were written by my grandmother. She definitely attended UW. And I am an artist living in Tucson. I'd love to see them.\n\nS.\n\n-----\n\nTo: Stephanie Whitmore\n\nI figured you would. What do you say we move this conversation off email? If you're okay with it, let me know a good time to call you and at what number, and we can chat a bit more informally. \n\nAdina\n\n-----\n\nStephanie then emailed me her home number and we agreed to talk the following evening.\n\nThe next day, I called her at home. \"Stephanie, it's Adina.\" \n\n\"Adina! Thanks for calling. So, tell me more about these letters. How do I get to see them?\"\n\n\"Well, I suppose I could use a special courier service,\" I offered, hesitantly. Of course, she didn't like that approach at all.\n\n\"Don't do that. If they get lost in transit, then neither of us will have them. Could you possibly send me copies, maybe scan them for me?\"\n\n\"I suppose I could, but it would be much more meaningful if you could see the actual letters. They're quite elegant. Being an artist, I'm sure you can appreciate that. I wish there were some way I could get them safely to you.\" I did believe that she needed to touch and hold these letters, not read them via some electronic files. \n\n\"Well, you could always hop on a plane and fly down to Tucson,\" she joked. \n\nI was about to laugh that one off, when it occurred to me that it was not a bad idea. I'd never been to Tucson, and I was between projects, and it wouldn't be much of a burden to fly down for a week. A short trip from Seattle. I would be doing a good deed, taking a vacation, and conducting research, all rolled into one trip. And who knows, I might even get myself a new friend out of it. \n\n\"Hello, Adina...?\" \n\n\"Oh, yes, sorry. I was just thinking about your suggestion that I fly down to Tucson.\"\n\n\"Oh, Adina, I was joking! You don't have to do that. Just scan the letters and send them to me. I'll be fine with that.\"\n\n\"No, I don't want to do that. It's important for you to see these letters in person. I want you to hold them in your hands and read them as if she'd written them to you. That's what it was like for me, when I first read them, and it was transformative. Her writing is heartfelt and personal. They're special letters, Stephanie. I think you'll find them quite moving.\"\n\n\"'Moving', huh? Now I definitely want to know what's in them. Nothing risqu\u00e9 I hope,\" she again joked.\n\nI almost laughed. Risqu\u00e9 for that time, definitely. But I was hesitant as to how much I should reveal about the nature of the correspondence. I didn't want to spoil her experience of reading them for the first time. Besides, I couldn't bring up the whole lesbian angle and the threesome marriage over the phone. That was too weird. No, she had to experience these letters, as I had. Of course, she might know all about Gabrielle and the sham marriage. So, I decided to run a little test.\n\n\"Let me just say, the letters reveal a side of your grandmother that may surprise you. Tell me, did she ever mention to you someone by the name of Gabrielle?\"\n\n\"Yeah, that name sounds familiar. I believe she was my grandmother's caretaker, after grandpa Robert died.\" \n\nHer caretaker? I wasn't expecting that. \"I see. Well, I still think it would be best if you could read the letters for yourself. I mean, they were written by your grandmother, so in some respect, they have more meaning to you, than they do to me.\"\n\n\"Well, you've certainly piqued my interest. But since they were in your grandmother's possession, they have meaning for you as well.\" \n\n\"There's a story here, Stephanie, and we're both part of it. Somewhere in the past, our grandmothers were best buddies, and stayed friends for a very long time. Which is why I should fly down there and hand deliver them to you.\"\n\n\"So, you ARE serious about flying down here?\" I could hear her chuckling.\n\n\"Well, I've never been to Tucson. Why not? I'd love to visit, if it's okay with you?\"\n\n\"Of course, it's okay! That's fantastic that you are up to doing this. Wow, I'm actually going to get to see these mysterious letters.\" She sounded like she was about to open a birthday gift. \"Look, since you're going to all this expense and trouble, the least I can do is put you up at my place. I could even show you around the area. You like to hike?\"\n\n\"Yes, as a matter of fact I do.\"\n\n\"Excellent. Pack some good hiking shoes, a water bottle, some sunscreen and a sun hat and I'll show you some of this magical land that I know and love so much.\"\n\nAnd so, I made my flight arrangements, and Stephanie agreed to pick me up at Tucson International. As the day approached, my excitement grew. Stephanie Whitmore seemed like an easy-going person. And that photo of her on the rock was infused with her warm spirit. It looked like she belonged there. \n\nThen it dawned on me that she had no idea what I looked like. So, I emailed her a photo of me, telling her to look for a slender woman, about 5'7\" with long, dark hair and wearing a floppy yellow hat. That made her laugh. \n\nShe emailed me back. \"Nice photo.\"\n\nHow sweet. An unsolicited compliment. It made me recall Lucy's compliment to Audrey. 'But then everything looks good on you...'\n\nIn her email, Stephanie described herself to me, and I fired a quick message back. \"Oh, I'll know you. I have that photo of you sitting on the rock in your hiking gear, remember?\"\n\nOur last few exchanges had cheered me. Other than our recent conversations, all I knew about Stephanie is that we were somehow connected thanks to a friendship that had developed between Lucy Dwyer and Audrey Callaghan, nearly sixty years ago. \n\nAnd yet, I got a good vibe from this hiker and visual artist. \n\n~*~*~*~*\n\n\"Adina, over here!\" I saw a rather shapely, brown-haired woman, exactly my age, and almost as tall as me, waving from near the baggage carousel. And just as in her photos, her long, straight hair was threaded through the back of her baseball cap. She also had two earrings in the lobe of one ear, and a pair of full, round breasts that were restrained within her tight short-sleeved top. \n\nI made my way over and was about to shake her hand, when she leaned in and gave me a hug. \"No need for us to be formal. We're practically sisters.\" \n\n\"I suppose we are,\" I laughed, relieved to have finally made it to Tucson. Upon closer inspection, I could see just how fit she was. Lots of curves and well-toned muscles. This girl either worked out at a gym or got in a lot of exercise.\n\n\"Okay ground rule number one. No more with the 'Stephanie'. Friends call me, Steph.\"\n\n\"Okay, Steph. And I'll stick with Adina. Phew! I can't believe I'm actually here.\" \n\nWe collected my bags and made our way to her vehicle. Turns out, she drove a green jeep, which was perfect for negotiating rugged dirt canyon roads. We threw the bags in the back and we were off. The top was up, as were the windows so we could talk more easily, but I couldn't wait to get out on some backroad with this baby open to the air and sun.\n\n\"You sure it's okay for me to stay with you?\" I asked. \"No husband or anything?\"\n\nShe snorted. \"Definitely no husband. No roommates either. I'm blissfully single, and live alone. So, there's plenty of room. Besides, why would you want to stay in an overpriced hotel? I even have the coffee set for tomorrow morning.\"\n\n\"Room service and all! Well, Steph, I feel honored.\"\n\n\"I'm the one who's honored. I am very excited to see these letters. What an incredible find! It really means a lot to me that you took the time to track me down.\"\n\n\"Finding you was pretty easy. You're practically famous down here.\" \n\n\"Yeah, right,\" she smirked. \"Infamous, is more like it.\" I liked her wit and humor, and had to admit, she was cute. \n\n\"As for the letters, I'm dying to talk to you about them, once you've read them.\"\n\n\"Sure, okay...\" she replied, aware of my vague tease. \n\n\"Wow, the sunlight is so different down here,\" I said, admiring the rocky landscape awash in golden light.\n\n\"You're in the desert, now. But you haven't seen anything yet. Tomorrow, we're going hiking in Catalina State Park. Did you bring your hiking gear?\"\n\n\"Yep,\" I answered proudly. \"You know, I have done some hiking in the Olympics and the Cascades, so I'm not completely wet behind the ears.\"\n\nStephanie adopted a serious face. \"I could never be in a relationship with someone who didn't enjoy hiking and getting out into nature.\"\n\n\"Me neither,\" I agreed. Here was a woman after my own heart. \"And I also want to see your art show.\" \n\n\"Sure, we've plenty of time for that. I also have quite a bit of my work around the house. I'm not shy about showing it off. How long can you stay?\"\n\nI smiled rather smugly. \"I actually left that open. I haven't yet purchased a return flight. It costs more, but it allows me the freedom to extend a trip, if I'm so inclined.\"\n\n\"Wise woman. I hate over-planning. Which is why I'm doing so well as a starving artist. Now if only I could meet some of those deadlines.\"\n\nI laughed. \"Well, my world revolves around deadlines, and it's one thing I'm actually good at. However, if I overstay my welcome, just let me know. I can easily check into a hotel.\"\n\n\"Not having it. My place is humble, but it's homey. And if you pitch in with the dishes and the laundry, you're welcome to stay as long as you want. Once Gunther moved out, I was actually able to clean the place. That boy was an unrepentant slob.\"\n\nI raised my hand. \"Definitely not a slob. And I promise not to leave my underwear lying about.\" \n\nStephanie gave me a disappointed glance. \"You don't have to go that far! But seriously, Adina, you can stay as long as you like. It will be nice to share the space with someone.\"\n\nIt didn't take us long to make it to her place, which I later learned was in an older part of the city, what used to be called the 'barrio.' Small gravel lots, the metal fences adorned with ocotillo branches. The building was a duplex with her occupying one side. \n\nAs we loaded my stuff into her place, I was instantly aware of all the art. There were textile pieces hanging on the wall, as well as several charcoal sketches and a couple of paintings, and many pieces of pottery strategically arranged on surfaces.\n\nI also noticed a mobile of colorful birds hanging from the ceiling. \"Are these all yours?\" I asked, looking about the main room.\n\n\"Uh, that print of the Navajo woman was done by a friend of mine, Effie Abrillo. She's a very talented print maker. But the rest are mine.\"\n\n\"And the sewing machine?\" \n\n\"For my textile work.\"\n\nI was impressed. I picked up a blue bowl decorated with various plants, and held it up for her. \n\n\"Yep, that's mine. You can eat your cereal out of that one. Care for some wine?\" \n\n\"You read my thoughts.\" As she got the wine, I noticed three charcoal sketches of nude women adorning one wall. \"Where did you do those nudes? In a class?\"\n\nShe gave me a sly look. \"No, she's an ex-girlfriend. I've a whole sketch book of her.\"\n\n\"Oh,\" I nodded, with feigned understanding. \"And Gunther...?\"\n\n\"A mistake,\" she cringed. \"I make them, every now and then. Actually, I make quite a lot of them. And if you're asking if I'm gay, the answer is 'yes.' I've been with a few men over the years, but I've come to realize I prefer women. Now, if you'd asked me a year ago, I might have said that I'm still figuring it out. But I'm very clear now.\"\n\n\"What happened to make it clearer?\"\n\n\"I met someone. She was an artist in residence, and she rocked my world. We became lovers, and I actually thought she was the one. Problem was, she didn't care much for the outdoors, which tends to be a deal breaker. But I was crazy about her, and kept trying to make it work. But whenever I asked her to do things I liked, she'd blow me off. It was Gunther who convinced me to end it with her. And next thing I knew, he'd moved in with me. That didn't last very long.\"\n\n\"That sounds pretty intense. I didn't mean for you to have to share all that with me.\"\n\nShe waved her hand as if it were nothing. \"No worries. It's good to talk about it. And as they say, experience is the best teacher. I came away with a better sense of who I am, what I'm not willing to compromise on, what I like in a partner...\"\n\n\"Well, I've made my share of mistakes too,\" I offered. \"Marrying my husband was definitely one. I wouldn't say he treated me badly. But he did cheat on me.\"\n\n\"I'd say that's treating you badly,\" she noted, with a disapproving frown. \n\n\"Yeah, it didn't exactly do wonders for my self-esteem.\"\n\n\"Well! If it's alright with you I'd like to read through those letters now.\"\n\n\"Sure,\" I said, the mood shifting. \"Let me get them out for you.\" I rummaged through my bag and pulled out the bundle of letters which I'd packed into my carry-on to protect them. \n\nAs I retrieved the letters from my bag, I thought about her admitting to liking women. I had no trouble with it. In fact, it actually made her seem more interesting to me. Yet it was oddly coincidental, when seen in the context of her grandmother's love for women as well. \n\nI had never intended to say anything to Stephanie about what the letters contained. I wanted her to discover that for herself. But I wondered if I should give her a 'heads up.'\n\nHere,\" I said, handing them to her as if they were made of glass. \"Uh...I purposely haven't said anything about the content. I thought you'd want to discover that for yourself, just as I did, when I first found them.\" I figured that was vague enough.",
        "\"I appreciate that,\" she said, taking the packet and staring at it. There followed an awkward silence.\n\n\"It shouldn't take you long to read them,\" I added, giving her just a little guidance. \"There are only eight letters, and they don't run more than a page each.\" I could see her nodding, while flipping them over and back. \"I've put them in chronological order for you, starting with her college days and then, jumping forward to her time in San Francisco. Those are the larger, white envelopes.\"\n\nShe nodded again. \"Thanks for doing this, Adina. Definitely above and beyond. Okay!\" she exhaled. \"I'm going to tackle these letters! I hope you don't mind, but I'm going to read them in the bedroom.\" \n\n\"No, go ahead, you'll want the privacy. I'll make myself some tea.\"\n\n\"Here,\" she said, fetching out a large bound book. \"This is one of my favorite sketchbooks. Lots of nudes in them. You'll find some packets of tea in that tin. I prefer the black teas, but there is a box of herbal stuff in the cabinet above. And the bathroom's through there. Make yourself at home.\" \n\nBefore disappearing into her bedroom, she flashed me a broad, toothy smile that made her eyes squint. She left the door open, so I could actually see her sitting on her bed. Not wishing to hover, I put on the kettle, and sat down at the kitchen table with her sketchbook. \n\nI was impressed with the quality of her work. The drawings were mostly charcoal, though there were a few pen and ink studies. She clearly loved to work with bold strokes, especially when wielding a charcoal stick, and yet her ability to capture subtle detail was also evident. There were still life drawings and a few city sketches. And as she had forewarned, plenty of female nudes. Reclining nudes, standing nudes, seated nudes with their leg propped up on the strut of a chair. Some seemed only partially formed ideas, while others were quite polished. Her treatment of hair was often finely rendered, and musculature was accurately drawn, though, they weren't at all clinical or overly technical. I thought they were sensuous, with some erotic poses. \n\nI had to laugh to see the variety of pubic mounds, some cleanly shaven, with the lips finely sketched and others with a roughly hewn dark splotch denoting lots of pubic hair. A couple of those dark thatches reminded me of my own wild tangle. \n\nI loved the drawings showing women's backsides, their buttocks sometimes muscled, other times, soft and full of cellulose. But after all those sinuous shapes, your eye would be drawn to the face. Expressive faces with sultry, lidded eyes, long lashes, shapely eyebrows and slightly parted lips, conveying a woman deep in thought or recalling some past event. \n\nEvery so often, I would cast my eyes toward the bedroom, wondering where she was in her reading, and what effect the letters were having on her. It made me recall my feelings as I read them for the first time. \n\n\"Oh my god...\" I heard Stephanie's voice from within the bedroom. What had she just read? It had to be one of the earlier ones. The tension was starting to get to me.\n\nA few snippets from those first letters appeared to my mind's eye. \"But everything looks good on you...\" \"I'm 'that way'...\" \"It's difficult to deny what's in my heart...\n\nIt was quiet for a bit. Then I heard her laugh. Then suddenly, there arose another dramatic exclamation, much louder. \"I don't believe this...\" \n\nEventually, she appeared at the door to her bedroom. On her face was what could only be described as shock. Her arms hung limply at her side. In one of them, she clutched the eight letters. \n\n\"Are you okay?\" I asked gently, not wishing to jar her from whatever state or place she was in.\n\nShe shook her head as if trying to clear her thoughts. \"These are not what I was expecting. I had no idea of any of this. Not a clue! Here I am, coming to terms with my gayness, and my grandparents were in a fucking threesome. I see now why you asked me about Gabrielle. I thought she was her caretaker, not her lover!\"\n\nThe ensuing silence was awkward, so I attempted to fill it. \"You can see why I was hesitant to tell you much about the content of the letters. I wasn't sure what you knew or how you'd react. So, no one ever told you the truth about their relationship?\"\n\n\"Nope.\" Stephanie set the letters off to the side and sat on the sofa, looking off into space. After a bit, she provided further context.\n\n\"When I was about twelve, my family moved to Sacramento, so I didn't see my grandparents that much after that. And when I left to attend college in Tucson, I hardly saw them at all. I would sometimes fly out to see my parents, and I did make it down to San Francisco a couple of times to see them. I remember Grandpa Robert being there, but I don't remember seeing Gabrielle. Or anyone by the name of Allen. Mostly, Grandma and I would talk over the phone, and I would send her letters and photos of my shows and hikes. But I was pretty much into my own life. I didn't do a very good job of keeping in touch after leaving California.\" \n\nShe looked over at me, her face contorted. \"But that's not what really gets me!\"\n\nI went and sat next to her. I could see her trying to keep her emotions under control. \"Tell me, Steph...\"\n\n\"Remember I said I thought Gabrielle was my grandmother's caretaker? Well, that's because after my grandfather died, I was told that Grandma had this friend, Gabrielle, who would be taking care of her. I never questioned it. Why would I?\"\n\n\"Is your grandmother alive?\"\n\n\"Sure. She's in her seventies now, but she still lives in the same house.\"\n\n\"Maybe it's time you called her? Ask her about Gabrielle. I'm sure she'd tell you.\"\n\n\"I don't know...I don't want to accuse her, or make her feel guilty. I mean, they must have felt they needed to keep it a secret from me. Though I don't know why.\"\n\n\"It is puzzling,\" I said as delicately as I could.\n\n\"My mother definitely knew! I mean, Grandpa Robert was her father. And Gabrielle was my grandmother's life partner. And all this time, I'm out here struggling with my sexuality. Kind of ironic.\" \n\nWith Stephanie coming to accept her love of women, it had to sting a bit. \"Do your parents know you're out of the closet?\"\n\n\"Yeah, sure, my parents know. Mom was a bit weird about it, which makes sense after reading these letters.\"\n\nI placed my hand on her back and gently rubbed. \"May I offer a suggestion? Give yourself some time before you make any rash decisions. Instead of obsessing over why this was kept from you, just take some time to appreciate these letters. I mean, it's pretty amazing what your grandmother and Gabrielle did. College sweethearts. They went to tremendous lengths to be together, and it wasn't easy for them back then. I think that's beautiful. I'd like to write about it someday.\"\n\nStephanie nodded, and smiled. \"I think you should. But you're right, it is insane to think that she and my grandfather kept up this facade so they could live life on their terms. But finding out that both my grandparents were gay! I mean, damn! Still, I would have liked to have met Gabrielle. She obviously was important to my grandmother. I wish I'd been allowed into that part of their lives.\"\n\n\"Hey Steph, Lucy mentions in one of her letters that my grandmother paid a visit to San Francisco to see her. In it, she mentions that you were around ten at the time. Do you remember meeting my Grandma?\"\n\nSteph cocked her head. \"Yeah, I do,\" she nodded, her eyes focused on a distant memory. \"We were still living in San Francisco at the time. As a matter of fact, ...\" She got up and dashed into her bedroom. When she returned, she held out her hand. \"Your grandmother gave me this locket for my tenth birthday.\" \n\nIn her hand was an oval gold locket attached to a delicate gold chain. A strange feeling came over me as I instantly recognized it. \"This is way too weird,\" I mumbled. \"I have one exactly like this. Got it for my tenth birthday.\" We looked at each other, our eyes wide in amazement. \n\n\"Have you ever worn yours?\" Stephanie asked me. \n\n\"No. I suppose when I was married, I could have put a picture of my husband and me in there. Or if I had children, I could see putting their faces in it. But I never did. What about you?\"\n\n\"Never worn mine either. It seemed silly to put a picture of me in there. I suppose if I happen to meet that special someone, we could put a photo of us in here. Then I'd have a reason to wear it.\"\n\nMy body experienced a slight chill. \n\n\"You, okay?\" Steph asked with concern. \"You look cold. Want a jacket?\"\n\n\"No, thank you. I just can't shake the feeling that there's a reason I'm here, and it has nothing to do with your grandmother's letters. I mean, look at us. We were born the same year, our grandmothers knew each other, we both were given lockets...Interesting, isn't it?\"\n\n\"Well, maybe you and I were supposed to meet. This is a special place down her, and there's lots I can teach you.\" She then playfully tussled my hair.\n\nI gave her a quizzical look. She continued. \"Have you ever spent time in the desert?\"\n\n\"No, not really.\"\n\n\"Well, there you are. You've come to the right place. Prepare to lose your mind and come to your senses! Oh, Adina, if you lived here, the places I could take you...the canyons, the San Pedro river, the Chiricahua mountains, the Santa Ritas...But tomorrow, I'm taking you to Catalina State Park for a hike through the Sonoran desert. And I'll introduce you to all my friends.\"\n\n\"Your friends?\" I queried, assuming she knew staffers that worked the park.\n\n\"Yeah. The birds, the butterflies, the insects, the flowers and plants...But we do need to make an early start. By midday it starts to heat up. Might want to take it easy, you not being used to the heat and all, living up there in the wimpy Northwest.\" She was clearly jibing me.\n\n\"Watch out, Steph. I may surprise you on those trails!\"\n\n\"You're on! Help me make some dinner, and we'll call it an early night.\"\n\nAnd so, working together, we diced some veggies, shredded some cheese, whipped up some eggs and Stephanie cooked us up two tasty omelets. I took care of the hash browns and toast, and we had an evening breakfast. During dinner, I told her a bit about my freelance work, and she talked about her current show at the gallery.\n\n\"Uh, is it alright if I take a shower?\" I asked, as we cleaned up. \n\n\"Sure, right through there. I'll get your bed ready.\" \n\nHer bathroom was very clean, and I liked that. I had the feeling she'd cleaned it in anticipation of my arrival. I grabbed my toiletries kit and took a hot shower. When I came out of the bathroom, I noticed she had pulled out the sofa into a bed. I could already feel my lower back aching. I knew from experience that sofa beds are rarely comfortable. \n\n\"Don't like it?\" she asked, accurately gauging my look of skepticism.\n\n\"Well, as one who travels for a living, I usually find them to be uncomfortable.\"\n\nShe nodded slowly. \"Sorry. If you'd rather, I can drive you to a hotel. There's several quite close by.\" I could see that she felt badly, but there was no need for me to leave that evening.\n\n\"Absolutely not,\" I countered, with a wave of my hand. She'd plainly gone to some trouble to make her home comfortable for me, and I didn't want to disrespect that. Besides, I would much rather be with her than on my own in a hotel. \"I'll give it a try for one night, and if it doesn't work out, we'll come up with another plan.\"\n\n\"Okay, you sleep on it.\" she joked. \"But I do have a good-sized bed, and you're welcome to share it. Though I should warn you, I like to sleep in the nude,\" she teased me. \n\nI gave her a cheeky smile. \"Well, I like to sleep in the nude, too. So there! I'm not a prude, Steph. I just think you shouldn't have to give up your bed.\"\n\nA corner of her mouth raised. \"We'll continue this discussion tomorrow. Sleep tight.\" \n\nWhile I stripped down to my panties and put on my nightshirt, Stephanie took her turn in the shower. I got under the covers and watched as she exited the bathroom bare assed and made her way to the bedroom.\n\n\"Well, she wasn't kidding about sleeping in the nude,\" I thought as I began to settle into sleep.\n\nThe sofa mattress wasn't too bad. Though when I thought of Stephanie sleeping in that large, comfy bed all by herself, I actually considered accepting her offer to join her. But there was an important dynamic at play, I could feel it, and it was telling me to stay put. And so, I toughed it out on the sofa.\n\nCatalina State Park\n\n\"Rise and shine, campers!\"\n\n\"Unnnnn...\" I groaned, as Stephanie shook me awake. \n\n\"Breakfast is on the table. Did you survive the night?\" \n\n\"We'll discuss that later,\" I groused. \n\nOnce I shook the sleep from my eyes, I swung into action. \"Coffee!\" I shouted, getting up and staggering to the pot. \n\nAs I slowly woke up, I saw that Stephanie had our stuff ready to go. We dressed, had some cereal, packed our sandwiches, water bottles and power bars and hit the road. This time, the jeep's top was down and the wind whipped past our faces as we headed north. \n\nOf course, Stephanie had her long, brown hair threaded through her cap, blue this time, and she also had on some hi-tech sunglasses, secured with Croakies. I had on my sunglasses, as well, with my dark hair loose and flowing free. \n\nStephanie had outfitted me with a pair of binoculars, which included her tutorial on how to use them. \"When you're trying to track a flitting bird or a fast-moving animal, try to locate it first with your eyes. Then, lift the binoculars to your eyes. Let your eyes be the guide.\"\n\nAfter entering the park, we drove for a bit, looking for a particular trail she had in mind when suddenly, she swerved over to the side and put the vehicle in park. \"Out of the car!\"\n\nWe jumped out of the car and she pointed up to a soaring hawk. \"That's a Prairie Falcon,\" she said, proud of her find. \"See those dark underwing bars. That's how you tell it apart from a Peregrine.\" \n\nI actually managed to focus my bins on it, and was thrilled. The falcon was indeed majestic as it rode the currents.\n\n\"That's a beautiful bird,\" I exclaimed, truly impressed by her ability to pick it out of the sky. \n\nWe got back in the jeep and drove on to the trailhead. Part of me wanted to take in the surroundings, but another part of me kept wanting to watch Stephanie. I loved the way she was all concentration, and yet clearly happy to be outdoors. \n\nIt was smart to get out there early. I could tell it was going to be a hot one. Already, the air was alive with the thrum of insects. \n\nOnce on the trail, I let Stephanie take the lead. I was happy to follow and watch her. I began to notice her agility and her well-muscled legs and ass. She was in very good shape. I thought of that flower tattooed on her arm, and wondered if she had any others. I couldn't lie to myself. Stephanie was beginning to have an effect on me, and it wasn't a feeling I was used to. \n\nSuddenly, my eyes were drawn to a bird flying to a tall cactus. I recognized it. \"Hey, I know that bird. That's a flicker. We have that bird up where I live.\"\n\nShe gave me a pleasant smile. \"Not bad, rookie. Can you see that its wings and tail are yellow, and not orange?\"\n\n\"Yeah...\" I said, studying the bird as it pecked at a hole in a large cactus.\n\n\"That's because it is a Gilded Flicker, a completely different species from your Northern Flickers. This is a bird of the Sonoran Desert. It loves to nest in these old Saguaros. \n\nI shook my head. \"Wow, you really know your stuff.\"\n\nShe eyed me intently. \"Welcome to my world, Adina. I've spent years in this country, and never grow tired of it. I'm glad that I can share it with you.\"\n\n\"I'm glad too. And unlike that ex of yours, I love being out here, and am open to learning everything I can from you.\" I don't know why I brought up her ex, but it seemed important to me. \n\n\"I'll gladly teach you all I know. How many years you plan on staying?\" she joked. Then after a moment, \"I hope to grow old here and paint in the desert just like Georgia O'Keefe. \" Her wistful expression made it clear to me that this was a legitimate fantasy of hers.\n\n\"That flower on your arm could be a Georgia O'Keefe,\" I suggested, proud to have made the association.\n\n\"Could be,\" she answered, smiling enigmatically.\n\nOur playful exchanges brought home for me her interest in women, and that it was possible that she could be interested in me. The real question for me was, how long DID I want to stay? Something about her made me not want to cut this visit too short. I wasn't on a deadline, though at some point, I'd need to put in for an assignment. But my schedule was pretty open for the coming week.\n\nStephanie told me about the monsoon season and how it brought life to this part of Arizona. \"Most people think of Arizona in summer as an uninhabitable place. But what people don't get is that while parts of our state are quite parched, we often get rain here in the southeast. Tropical storms bring all this water here. The storms can be real powerhouses, crackling with thunder and lightning, and dropping tons of rain. The dry arroyos become rushing rivers, and everything turns green and wet...It's magical...\" \n\nOn and on she went, rhapsodizing on the beauties around us, and I was mesmerized. I learned about the weather systems, and the birds and butterflies, and lizards and snakes...and whether she intended it or not, I was enchanted.\n\nWe sat down by a trickling stream. Off to our right a bird was chattering incessantly. \"That's a Bewick's Wren. It's letting us know that we're in its territory.\"\n\n\"Sounds upset with us.\" I observed, genuinely concerned. \"Should we move?\"\n\n\"No, it's just warning us. Eventually, it will see we're not a threat and accept us.\"\n\n\"My word, Steph, these ARE your friends. You're an artist, you're attractive, creative, you love nature, you're in great shape...How could anyone not want to be with you?\" I gushed. I could see her blushing and realized that I was embarrassing her. Myself as well, I supposed. But I couldn't help it. She was a rare find, a jewel in the desert. \n\n\"Maybe you should make a play for me,\" she challenged. \n\nI stopped, momentarily caught off guard. But I wasn't put off. \"Maybe I should,\" I retorted. She snorted with amusement, clearly writing off our whole exchange as nothing more than meaningless flirting. \n\nWe found an outcrop by a stream, and ate our lunch. She talked some more about the wildlife and about this instructor that turned her onto the natural world. And then I listened to her talk about her recent show, and how important it was to get picked up by this particular gallery. \n\n\"I'm a fairly respected writer in the Seattle area. I could maybe write something about your show, or talk to some of the northern galleries when I get back home.\"\n\n\"Sure, that would be great,\" she replied, though her enthusiasm was dampened.\n\n\"Is anything wrong? You seem down,\" I asked, sensing a subtle shift in her mood.\n\n\"I don't like the idea of you heading back.\" she admitted. \"I enjoy your company.\"\n\nA silence fell over us, as I thought about what she'd just admitted to. As I mulled over a response, I became aware of the buzzing of insects, and the occasional bird song. I was becoming more attuned to my surroundings. \"I enjoy yours, too, Steph. Look, let's not talk about that now. I haven't even booked a flight back yet, and the last thing I want to do is put a damper on this beautiful day we're having.\"\n\nShe nodded and smiled at me. I leaned over and rubbed her shoulder. \"I'm just a little curious,\" I began, changing the subject. \"Why have you never ended up with someone? You've been single all this time?\"\n\n\"I am totally into being an artist and into hiking, and if someone wants to be part of that world, then I'm open to a relationship. Maybe it could develop into something meaningful, though it never has. And I'm okay with that.\"",
        "I didn't believe that she was okay with it. But I totally got where she was coming from. I knew very well how a relationship can impose itself on one's personal goals and ambitions. Throw children into the mix, and it becomes even more difficult. Would I want to be on my own for the next five or ten years? I'd miss the intimacy and the companionship. Even though my husband and I weren't the best fit, there was that sense of being a team. \n\nI suppose it was my training as a journalist, but I asked most of the questions. \"Were you always into pottery?\"\n\n\"No. I started out drawing and painting. Even took up watercolors. I got my art degree from UA, and then started trying to make it on my own. I got into textiles for a while, which I love. And eventually pottery. I have a small kiln in my backyard that I bought off someone who was retiring. Truth is, I actually love sketching most, but the pottery sells best. It's art, but also practical, and I can decorate the objects with classic southwestern images. People love that sort of stuff.\" \n\nNice to know she wasn't averse to marketing herself. She stood up and stretched, then took a long drink from her water bottle. As she drank, I found myself admiring her golden skin and the way her sweat glistened in the sunlight, and realized that she was more than a little attractive. And suddenly, I had my first urge to kiss her. \n\n\"We should head back.\"\n\n\"I need to pee,\" which I did pretty badly. \n\n\"Be my guest,\" she said, setting her backpack down on the earth. \"Just watch where you crouch. Right behind you is a hedgehog cactus,\" she said, pointing to a low spiny plant.\n\nI looked at it and made a note to avoid it. As for where to pee, well, there wasn't any nearby cover, so I made sure there weren't any spikey plants underneath me, undid my shorts and pulled them down my legs, taking my underwear along with them. As I mentioned a while back, I was a bit unkempt down there. I'm usually good about keeping the pubes trimmed, but I'd let it go for a while, and it was looking pretty ragged. Oh well, I sighed. This is not the time for modesty.\n\nWith my shorts and panties down around my boots, I squatted and let loose with a steady stream. I'd been holding it longer than I should have. I watched the rivulets as they ran down the slope. When my bladder was empty, I looked up to see Stephanie holding out a tissue for me to wipe myself with. I wiped, and then reached up with my other hand for her hoist me up. \n\n\"Thanks.\" \n\n\"Don't mention it,\" she smirked. Though my shorts and panties were still down around my ankles, I suddenly felt the need to explain why things were so disorderly down there. \"I'm usually much better about how I look down there,\" I said, blushing like a schoolgirl.\n\nShe glanced down at my bushy crotch and then back up. \"I think it's sexy,\" she said to me, smiling very approvingly. \"I like a woman who lets her bush go 'naturel'.\"\n\nHer approval brought a smile to my face. I just stared at her, with my shorts and panties still down around my ankles. I was actually enjoying the feel of the warm desert air caressing my bare bottom. If it weren't for all the rocks and thorns and snakes, I'd have suggested we take off all our clothes and hike back in the nude. \n\nBut to my surprise, Stephanie reached down and pulled up my panties for me. She then tugged up my hiking shorts, zipped them up and snapped the front button. \n\n\"Ready?\" she asked, in an officious tone. I nodded, unable to speak as she turned about, hoisted her pack and started wending her way back down the trail. I grabbed my pack, and followed her down.\n\nIt made sense for her to lead, not only because she knew the terrain better than I did, but because I could watch and learn from her. I loved the way she hopped and stepped her way past branches and stones, marking my way. She was so agile, and in tune with her balance. It was fun to see her move, and to admire those flexing muscles.\n\nOn our way down, she suddenly stopped and excitedly pointed to a tiny green plant. \"Come here, quick! See that powder blue butterfly with the orange spots?\" I did see it.\n\n\"That's a Sonoran Blue. A very special butterfly. I don't often see them around here.\" She was very happy with her find. \n\nThe butterfly was pretty. And so very tiny. I would have walked right past it, but she saw everything. While for me, the surrounding birdsong was a jumble of sound, to her, it was a tapestry of distinctive voices, each one belonging to a recognizable friend. \n\nThat day, she showed me a special part of the world. Her world. And I could see how it energized her spirit, and gave her the inspiration to make another drawing or glaze a terracotta bowl. Back at the car, as she started to pack up our gear, I took hold of her upper arm, the one with the tattooed flower. She stopped what she was doing and turned to me.\n\n\"Steph, I can't thank you enough for this wonderful day and for sharing this amazing world of yours with me.\"\n\nShe really smiled at that. \"Anytime, Adina. I meant what I said. You can stay for as long as you want. There's lots I can show you. And I'm sure there are some things you could show me, too,\" she added with a wink.\n\nDamn, she was openly flirting with me again. But before I had time to react or even process, she was already in the driver's seat. Accepting that the moment was lost, I got in and she started up the car. But before putting it in gear, she turned to me. \n\nShe gestured to the surrounding hills. \"There's this whole beautiful world here, and people barely pay it any mind. I see them every day, in these parks, always on their cell phones, or gabbing with a friend. For most of them, this is a place to catch up on the week, walk the dog, or get in a good run or bike ride. For me, it's my holy time, my refuge. I draw my spiritual strength and inspiration from this landscape, and from the creatures that inhabit it. Right out here, under an open sky. In the desert, like the wandering tribes.\"\n\nAgain, I felt that urge to kiss her. This time I did. I leaned in and place a very gentle kiss on the corner of her mouth. I felt her stiffen briefly as I pulled back and gave her an affectionate smile. After a moment, she grinned at me.\n\nDuring the ride home, we chatted mostly about our hike and I asked bushels of questions about the plants and the animals, and she answered all that she could, sometimes, saying \"I don't know. Have to look into that one.\" \n\n\"So that's not a Cardinal, but a...\"\n\n\"Pyrrhuloxia,\" she said, the word rolling smoothly off her tongue. I had to laugh and shake my head. As I did this, I casually placed my hand on her right thigh. \n\nShe looked down at my hand, then back up at me. Her eyes let me know that she was fine with it. I'd never been with a woman before, but I was on a journey that seemed strangely destined. Somehow losing my grandma had led me to Tucson and to this fascinating woman who had me thinking about all sorts of stuff I hadn't considered before. All triggered by a friendship that had its beginnings well before we were born. \n\nBack at her house, we began to get out of our gear. \"I need to take a shower,\" I said, having set my boots and socks by the door. \n\n\"Hang on, I'll join you,\" she answered, while busily washing out her mug in the sink. \n\nHer offer took me by surprise, and yet I loved the idea of us showering together. It was a chance for more intimacy with her. I was fairly confident Stephanie knew exactly how to be with me. And that made me consider the possibility of taking things further. \n\nI suppose I could have waited for her to finish washing up, but instead, I started removing my clothes right there in the main room. I felt sticky and hot, and not the least embarrassed to be naked in her presence. I took off my shirt and socks, then got out my hiking shorts, and finally unhooked my bra and tossed it on the pile. The only piece of clothing I still had on were my blue and white cheeky panties. \n\nShe turned and stared at my breasts. I liked the way she was looking at them. I reached up with a band and pulled my hair up. The act caused my tits to lift and jiggle for her. I smiled, for I could see I had her full attention. \n\n\"You leaving those panties on?\" she asked, her head cocked as if she'd just issued me a dare. \n\nI grinned slyly as I jostled my panties down and off. Feeling playful, I twirled them about my finger a couple of times before tossing them on my pile of clothes. I now stood fully naked before her.\n\nI felt a little shy, but not so much as to cover myself from view. She said she liked my bush, so I felt okay showing that off. And I wanted her to really see me. I knew my body wasn't as firm as hers, and my breasts sagged a bit more, but I felt attractive, right then. \n\nStephanie moved over to the sofa and tossed her shirt onto the back of it. She then unzipped her shorts and tugged them off as well. Her pink panties soon followed. I took a deep breath at the sight of her amazing ass, its creamy white skin much lighter than the rest of her body, which was browned from time in the hot sun.\n\nShe then pulled off her sports bra to reveal a pair of full, round breasts that were also creamy white. This was a woman who did not spend any time in a tanning salon or nude sun bathing. Her coral nipples were like two garnets set in the center of two large areolae. And on her pubis was a lovely patch of fine brown hair. It was more manicured than mine, thinner at the bottom, wider at the top. \n\nI don't know if I was still disoriented from too much time in the sun, or if Stephanie Whitmore was simply too attractive to resist, but I was moist between my legs. If I'd been alone, I would have touched myself. \n\nIt had been a while since I'd been sexually aroused by anyone, man or woman, and I missed that feeling. But I wasn't prepared for her next statement. \n\n\"Okay, time for a tic check.\"\n\n\"A what check?\"\n\n\"Tics. Nasty little blood suckers. First I'll check you and then you check me.\" She came over and began running her hands lightly over my naked body, studying my skin carefully. \n\n\"What do they look like?\" I asked, feeling a bit creeped out by the thought of tiny blood sucking creatures burrowing into my skin.\n\n\"Just look for a dark, round spot with teeny legs.\"\n\n\"Ewwww,\" I groaned, now definitely creeped out. \n\n\"Okay, you're good. Now me.\" \n\nI began studying her nude body, looking for any dark little spots, but I didn't find any, though I enjoyed running my hands over her ass, and up and down her legs. That's when I noticed the tattoo of a bird on her left hip. I'm sure she'd be able to tell me exactly which species it was. \"Didn't know about this tattoo,\" I told her, as I stood up. \"I like it.\"\n\n\"It's a thrasher,\" she told me. \n\nYep, I knew it. I stood up and was about tell her she was all clear of tics, when my gaze fell on her nipples. I wanted to touch them. And so, I did.\n\n\"Oh wait, I think I found a tic,\" I said, reaching out and pinching her left teat. She chuckled at my brazen move. \"Nope, not a tic. But it was nice of you to check. Okay, shower time,\" she said, bounding fully nude into the bathroom. \n\nI took a deep breath and followed her in. \"Here. Use this towel,\" she said pulling one down from a shelf. She started the water, adjusted the spray and gestured to the stall. \"After you.\"\n\nI stepped in and she immediately followed. She stepped in behind me and pressed her naked body to me. I could feel her firm breasts pressing against my back, and her pubic hair tickling my bare ass. Her hands slid up my torso to cradle the undersides of my breasts. She began to caress them and I leaned back against her. Her fingers brushed over my nipples, causing them to stiffen. And when she took each firm nub between her thumb and forefinger and pinched, them, I released a groan of pleasure, my legs weakening. \n\n\"You're very sexy, Adina,\" she whispered into my ear, before planting light kisses along my neck. \n\nThe pleasure of her lips on my skin was exquisite. \"I think you're sexy, too,\" I said, exhaling with a sigh. I felt like clay in her hands. \n\nHer voice stayed soft and low. \"You know, I could stay in her with you all day, but water is a precious resource. Hand me the soap and I'll wash you down.\" \n\nShe pulled away, breaking the erotic spell. Rather cruel, I thought, to wind me up and then leave me hanging. But like everything else she did, it was with intention. \n\nShe applied soap to the towel and began to briskly wash my body. It was almost business-like the way she went about it, though her sensuous washing of my breasts sent a tingle straight to my pussy. After she washed my butt, I held my breath as she ran the towel up the inside of my thighs, and then between my legs. By the time she finished, I was vibrating with pleasure from head to toe. \n\n\"Now do me.\" \n\nStill in a bit of a daze, I took the towel from her and moved as quickly and efficiently as I could, careful not to linger for I now knew that 'water was a precious resource.' But I found it difficult to relinquish the feel of her creamy white breasts in my hands, and the erotic sight of the water cascading over them as I soaped them up. I did manage to make it to her tummy and then around to her back, but things turned intensely sexual for me once I was on my knees and washing her muscled legs and firm ass. It was a servile position, and one that I liked. There was something about Stephanie that made me want to serve her. \n\nHow I would have loved to have lingered. But I patted her thigh and she turned around. \n\nI sucked in my breath at the sight of her thick, fleshy pussy. As I prepared to wash it for her, I marveled at the way the labial folds protruded from her body. I wanted to touch them, but instead, I ran the towel between her legs. My work was done. \n\nShe turned off the taps and we exited the tub. \"Feel better?\" she asked, as we toweled ourselves off. \n\n\"Mm, hmm,\" I nodded, while trying to jump start my brain. \n\nShe set the towels aside, and drew me to her. We were almost touching, and I could feel the energy flowing between us. At any moment, I expected sparks. She reached out and took my hand and brought it up to her lips, gently kissing my fingers. That simple, tender gesture made my knees buckle, and I fell into her. \n\n\"You, okay?\" she whispered. I nodded. \n\nKeeping hold of my hand, she led me toward her bedroom. Once at her bedside, she left me standing there as she tugged back the covers and climbed onto the mattress. Kneeling naked on her bed, she waited for me to join her, which I did. I knelt opposite her, and allowed my eyes to roam over her naked body. I could feel my heart thumping. \n\nStephanie eased closer to me, and I parted my thighs to allow her knee to slip between them. I moaned when it made contact with my bare sex. She leaned forward so that our foreheads touched. I could feel her warm breath on me, and I tilted my head up until our lips came together for our first real kiss. It was tentative and exploratory, our moist lips lightly brushing against each other. \n\nI took her lower lip between mine and sucked on it. She responded by licking my upper lip with the tip of her tongue. The eroticism of that moment sent a jolt to my pussy. We continued to kiss, our tongues now playfully dueling, until she eased me down, our bodies stretching out alongside each other on the bed. We moved closer so that our breasts pressed together. Soon our legs intertwined.\n\nWe began to kiss with more urgency, and I had to remind myself to breathe. No one had ever kissed me in this way. Her mouth was aggressive and yet her lips soft and gentle. I couldn't remember a time when I had been so aroused during foreplay. The sensation of our bodies pressing to each other, the feel of her breasts pushing into mine, our damp pussies rubbing together, her hands on my ass, it was almost too much to take in. \n\nNot to be outdone, I fluttered my fingers down her back, tracing the inward curve of her spine until I reached the swell of her ass. I ran my palm over the curve of her cheek and trailed a finger down the length of her crack. Grabbing a purchase of her butt cheek, I gave it a good squeeze.\n\nShe moaned into my mouth. Breaking her kiss, she started to noisily lick and kiss her way along my neck and onto my collar bone. As she kissed her way down my body, I stretched out onto my back in anticipation of the wonderful things she was about to do to me. \n\nShe cradled my left breast and took the nipple into her mouth. \"Oh god,\" I cried, as I felt the pressure building between my legs. \n\nAs her lips suctioned my teat, her fingers trailed lightly through my hairy mound, parting it so she could tease my labia. The combination of her lips on my nipple and her fingers at my entrance, were bringing me to a boil. \n\nSensing I was ready, she continued her journey downward. Occasionally, she'd nip or bite my skin, causing me to gasp from the sensation. Past my tummy and onto my mons. As she kissed over the swell of my mound, I elevated my knees and parted my thighs so that my sex was on offer. I didn't want her having any doubts as to whether or not I was fully invested.\n\nI felt her warm breath caress the length of my pussy, followed by her tongue lightly flicking at my ruffled lips. I gasped and arched my hips. \n\n\"Mmmm,\" she hummed. \n\nMy body came up off the mattress when her tongue began to lick more vigorously. She cupped my ass and held me to her as she probed deeper. My petals quickly gave way, opening right up for that amazing tongue of hers to enter.\n\n\"Oh my god, Steph, that feels so good,\" I whimpered, my hips arching upward. \"You are so good...\" Again, she hummed her approval as she began to really eat me. At one point, I felt her take one of my inner petals between her lips and suck on it. Then she did the other.\n\n\"Oh, god, yes, oh god, yes, oh god,\" I chanted, as her lips sucked and tugged on them. I could feel myself oozing moisture. \n\nI was now so close that it wasn't going to take much to push me over the edge. My muscles were taut as wire and when her tongue flicked at my clitoral hood and her mouth encircled my clit, I was done. The first shockwave hit me hard. \n\n\"Oh my god,\" I cried out loudly, as the floodgates opened. I continued to babble and curse as the hot liquid poured out of me and into her mouth. I could no longer think, my brain swamped by wave after wave of intense pleasure. \n\nAt some point I must have passed out, for the next thing I remember was her lying alongside me. \"Welcome back,\" she said, grinning like a cat that had eaten the canary. \n\nI turned my head on the pillow and adoringly gazed at this woman who had brought so much joy and pleasure into my life. \"That was the best oral sex anyone's ever given me. The job's yours, if you want it,\" I joked.\n\n\"I'll get back to you,\" she said, flashing me a crafty grin. I then watched her pluck a stray pubic hair from off her tongue.\n\n\"Sorry about that,\" I apologized. \n\n\"No worries,\" she replied, with a smile. She stared at me for a moment, and I could sense her mood growing serious. \"Adina, I'm not one to sleep around, but I have been with enough women to know when the chemistry feels right. I'm not just talking about the sex. I look at how we are together and I see the potential,\" she said, her fingertips stroking my cheek.\n\n\"Really? You think we have potential?\"\n\n\"Yeah, I do. What about you?\" \n\nI thought for a moment. I guess I hadn't calculated that far ahead. I was still trying to figure out how I got here in the first place. One thing I knew, our connection was real. \n\nI finally found my voice. \"Steph, being with you has made me re-evaluate so many things, like what to look for in a relationship. And what it means to be intimate. Everything we do together\u2014the talking, the hiking, making dinner, making love...it all feels special...and it flows effortlessly. I could very easily fall in love with you. So, yeah, lots of potential.\"",
        "\"That's really beautiful, Adina. Thank you.\" \n\nI reached down between her legs and lightly ran my fingers up and down her slit, fondling her thick folds. She lay on her back and opened her legs for me.\n\n\"You feel so soft under my fingers,\" I cooed as I toyed with her. Her oil coated my fingertips, making it possible for me to push into her. She released a sigh of contentment as my two fingers penetrated her entrance. \n\n\"Oh yes, baby, that's good,\" she let me know, her loins rising up to accept my fingers.\n\n\"Mmm,\" I hummed, pleased to hear her call me 'baby.' \n\nStephanie had set her feet apart, opening herself to me. I lay down on my stomach so that my head nestled between her thighs. With my fingers still embedded inside her, I planted a kiss right below her clitoral hood, inhaling her rich feminine scent. I extended my tongue and used the tip to tease her clit while repeatedly thrusting my fingers all the way in to her.\n\n\"Oh, fuck yeah,\" Stephanie began to moan, her hips rocking just a little faster and with more urgency. \"Oh, baby, I love what you're doing with your fingers. Oh yes, lick my clit...\"\n\nKeeping my mouth firmly sealed to her I began rapidly fluttering my tongue over and around her clit, while pumping my fingers in and out of her pussy. My tongue began to tire, but I didn't dare stop. I wanted my first effort to be a memorable one for her. \n\n\"Yeah, yeah, yeah...\" she was chanting. She was getting close. I could sense it. Her hips were bouncing up and down, and her cream was flowing out of her. I was now so into eating her that I barely registered how vocal I had become, moaning and gurgling deep in my throat as I strove to get her to the brink. \n\n\"Gonna come...gonna come...\" she warned. \"Mmmhmm...\" I hummed, urging her on from between her legs as I worked my fingers and lapped at her clit. \n\nWhen Stephanie came, a cry exploded from deep in her solar plexus. As her body writhed on the bed, my mouth lost contact with her sex. But it no longer mattered. I'd gotten her there. \n\nThe elation I felt was a revelation to me. In the past there were times when I phoned in my lovemaking, and my partner wouldn't even notice. I couldn't ever see that happening with Stephanie. With her, I would be present every step of the way. Our lovemaking would be fully conscious and meaningful. \n\nAs we snuggled in bed, I tried to understand how it was that this relationship had advanced so quickly. I'd only just arrived in Tucson, and here I was, in bed with another woman, and well on my way to falling in love with her. I didn't want to get too far ahead of myself, but I was already visualizing our future. \n\nThat potential we had talked of might quickly transform into something special and real. \n\n~*~*~*~*\n\nStephanie and I napped right up until dinner time. Gradually, we roused ourselves. We were both lying on our back, and turned our heads to look at each other. \n\n\"You know,\" she said, \"before I start grilling my grandmother about Gabrielle, I should first thank her for sending you to me.\"\n\nI laughed. \"I think she'd appreciate that.\"\n\nWe got up, and whipped up some pasta. I made us a salad and we sat out in the backyard under an awning enjoying a late dinner in the cool evening air. I cleaned up the dishes while Stephanie made some calls and then checked on her kiln. Before bed, I went online to read some articles and fire off a few emails to publishers, and one to my mom, letting her know that I was enjoying the Arizona sun. \n\nThat evening, the sofa was not even discussed. It was a foregone conclusion that, from then on, I would sleep in her bed. \n\nAt some point during the night, Stephanie, god bless her, went down on me again. Where she found the energy, I'll never know, but the ensuing orgasm left me dead to the world.\n\nThe last thing I remember was her spooning me from behind. \n\n~*~*~*~*\n\nNot surprisingly, we slept in the next morning. I contemplated getting up and starting the coffee, but I just couldn't give up the soft, intimate confines of those satin sheets, or the warmth and comfort of my lover's naked body. \n\nI must have drifted off again, for when I came to, I noticed that Stephanie was not lying next to me. To my surprise, I saw her sitting at the foot of the bed with her sketchbook in hand. She was busy sketching. \n\n\"Were you drawing me sleeping?\" I asked.\n\n\"Mmmhmm,\" she replied, her concentration still on what she was sketching. \n\n\"Doesn't sound very interesting to me,\" I said, grumpily. \n\n\"Oh, you'd be surprised,\" she said, while busily working her stele on the paper.\n\n\"What about this?\" I suggested, as I eased up onto the pillows so that I was facing her. I drew up one knee and opened myself to her. I then draped my arm behind me and gazed at her seductively.\n\n\"Oh, I like that,\" she said, in a breathy, drawn out voice. \"Hold that pose. I want to see if I can capture that 'come fuck me' look,\" she said, as she flipped over to a fresh sheet. \n\nThat's when I noticed that she wasn't wearing any clothes either. She was sketching while naked. 'Doing a nude while in the nude,' I thought, smiling. How eccentric.\n\nStill feeling relaxed from a night of gratifying sex, I lounged against the pillows in the manner of an odalisque or courtesan, and let my new partner sketch me. As the minutes ticked by, I found myself lulled into a dreamlike state by the rhythm of the ghostlike scratches of her charcoal moving across the paper. \n\nMostly, when she looked at me, it was with total concentration, as she studied some part of my body she was attempting to capture on paper. But every so often, our eyes would meet and there'd be that spark of recognition. \n\nI can't remember how much time passed, but I soon felt the pressure on my bladder. \"I have to pee,\" I warned her. \n\n\"Hold on. Almost there.\" Another long minute crept by, and she set her stick down. \"There. What do you think? Did I capture your essence?\" she asked turning it around so I could admire it. And admire it, I did. It was really good. She did that? The sensual and careful way she had rendered my eyes, and the curve of my body...\n\nMy eyes were then drawn down to the dark swirl of charcoal meant to represent my wild thatch of pubic hair. \"Uh, huh,\" I noted, with a knowing grin. \"Now I see why you don't like your women to shave...\"\n\n\"It's not the only reason,\" she replied with an upward curl of her lip. \"I need to do some more work on this, finesse it a bit. But I think it's one of my better efforts,\" she said, eyeing it carefully. \n\n\"Okay, got to pee!\" I announced, jumping off the bed and racing to the bathroom.\n\n\"Do you mind if I include this in my current show?\" she called out to me. \"I promise not to put it up for sale.\"\n\n\"You better not sell it!\" I called to her from my seat on the toilet. That made her laugh.\n\n\"I promise, I won't. Scout's honor.\"\n\nAs I finished up in the bathroom, I imagined my nude portrait hanging on the wall of the Saguaro Gallery. It was a bit daunting, and yet kind of exciting, too. When I came back in, I saw that Stephanie was continuing to fiddle with my portrait, working her pencils about the paper. \n\nI strolled over to her, still naked as the day, and kissed her on the cheek. \"I'd love it if you displayed my portrait in your show.\"\n\n\"I'm just going to apply some finishing touches to it and then it will be ready,\" she announced, her eyes remaining on whatever detail she was trying to enhance or bring out. \n\nA half hour later, I was dressed and Stephanie was still at it. Finally, she set her pencils down. \"All finished!\" she proclaimed. \"I think I have a frame out back that will work,\" she said, quickly putting on some clothes. \"I'd like to get to the gallery before the doors open at nine, so Ronnie can add this to the show.\"\n\n\"Think he'll like it?\" I asked, feeling a little less confident about the whole idea.\n\n\"She. And yes, she'll like it. She has a great eye for art. When she was younger, she used to model for artists all the time.\"\n\nSure enough, Stephanie spent the next half hour finding a suitable glass frame for the drawing she did of me lounging naked on her bed, looking rather naughty. All of a sudden, having my nude body on display for public viewing started to sink in. \n\nAfter doing some housecleaning and responding to emails, we hopped in her jeep and headed off to see Stephanie's current art show at the Saguaro Gallery of Fine Arts. In the back seat, was the newly framed nude sketch of yours truly.\n\nThe Saguaro Gallery of Fine Arts\n\nA woman in a white blouse, jacket and suit pants greeted us at the door and let the two of us in. Gallery Director, Ronnie Finkelstein looked to be in her late thirties, her skin tanned from years in the Arizona sun. Her dark, straight hair was cut short and peppered with gray. It looked very good on her, and perfectly set off her almond eyes, high cheek bones and lovely thin nose. \n\nShe and Stephanie hugged, as friends would, and then Stephanie introduced me. \"This is Adina, my new partner.\" \n\nRonnie graciously welcomed me, shaking my hand. \"Very nice to meet you, Adina. A friend of Stephanie's is a friend of mine.\" Stephanie then held up the framed sketch and asked Ronnie if she could add it to her show. \n\nI watched Ronnie study the work with a critical eye. She looked over at me and then back at the work. \"Very nice,\" she said with a nod, still engrossed in the picture. \"I'll get this up right away. Next to the other nudes, I think.\" And with that, she headed for the back. \n\nStephanie and I then walked about the main room admiring the displays. As is sometimes the case, the artists had their own areas, with their bio and photo on the wall. Each piece had a small card indicating the title of the piece, as well as a price, if it were for sale. \n\nThe quality of work being featured was extremely good. \"Ronnie is very discriminating when it comes to art. She's highly respected in the field, and her artists sell very well. It was a major coup for me, when she asked to carry my work. We've become pretty good friends, too. I hope the three of us can get together sometime. She also likes to hike.\" Stephanie gave me a warm smile. She was totally in her element, much like she was out in the desert. \n\nI also picked up on her use of the word 'sometime' which hinted at a future. And that made me think of Lucy's letters, and the path that brought me to the desert and into Stephanie's bed! \n\nI heard the tapping of a hammer and looked over to see a staffer hanging my nude portrait right next to some of Stephanie's other nude sketches. And there I was, on the wall for all to see. Seeing my portrait in the cold light of day, up on a wall, sure made a statement. There was no missing that 'come fuck me' stare, as Stephanie had so elegantly put it. \n\nAnd so, I'd joined the pantheon of models whose nude forms grace the walls of museums and galleries throughout the world. Rarified company, to be sure.\n\n\"Not much left to the imagination,\" I confessed ruefully to Stephanie, as we studied my portrait, her arm protectively around my waist. \n\n\"You look good, baby,\" she said hugging me to her. \"Trust me.\"\n\nI did trust her. Knowing that she thought my nude body suitable to include in her show, alongside her other sketches, made me feel better about exposing myself. Sure, I knew on some level that it was more about the way an artist rendered her subject and not the subject herself, but still... \n\n\"I think everyone should have their naked body on display in a public place,\" I proposed. \"It would quickly put an end to all this unhealthy obsession people have with sex.\"\n\nThe doors opened and people began to drift in. Stephanie began to schmooze with patrons, while I spent my time studying Stephanie's work. I loved her pottery. Some of them were perfectly formed bowls and plates, while others were abstract pieces purely intended for hanging on the wall or placing on a table. She had a couple of textile works from years back on display, and they were colorful abstractions of the desert landscape, with shapes of mountains and flowering cacti, and of course, birds. \n\nI'd just finished telling Stephanie how much I loved a particular sculpture by another artist when her gaze drifted away from me to another part of the room. \"Oh fuck,\" I heard her curse under her breath. \n\n\"What's wrong?\" I asked. \n\n\"See that woman over there, by the landscapes? That's the artist I had the affair with. Her name is Bethany Heredia. I thought she'd left town, but apparently not.\" \n\n\"Any reason why you don't want to see her? You're not still hung up on her, are you?\" I had to ask.\n\n\"No, of course I'm not,\" she replied testily. \"I'm not a player, Adina. It's just that it wasn't exactly a friendly break-up. And I don't want her giving you any shit.\"\n\n\"Hey, don't worry, I'm a big girl,\" I smiled, giving her a kiss on the cheek. She squeezed my hand. \"Go schmooze, or do whatever you artists need to do,\" I teased.\n\nAt some point, Bethany did catch my eye, and while Stephanie was off talking to a prospective buyer, she sauntered over. \"Hi there, I'm Bethany.\"\n\n\"Adina,\" I said, offering my hand. \n\n\"So, looks like we're neighbors,\" she noted, with a knowing smile.\n\nI gave her a quizzical look, not having any idea what she was talking about. She jerked her head toward Stephanie's nudes. \"The nudes.\"\n\nThat's when it dawned on me. The other nude model was Bethany. How could I have missed that? I guess I hadn't paid much attention to the other sketches. I was a bit wrapped up in my own.\n\n\"Ah!\" I exclaimed. I didn't want to admit that I had no idea it was her on the wall next to me, so I commented with as much professionalism as I could, \"Well, who wouldn't want to be sketched by Stephanie Whitmore.\" \n\n\"Touch\u00e9. By the way, that's a very beguiling portrait. You look...sated. Must have been a fun session,\" she noted with a wry smile. \n\nI was almost tempted to tell her that we'd just had the best sex ever, when I stopped myself. Of course, she knew that. It would make me come off petty and stupid. And so, I said nothing. \n\n\"Has she taken you out into the desert yet to be attacked by insects and birds?\" \n\n\"I don't think birds attack you,\" I smirked. \"Actually, she has taken me out. It was our first date,\" I replied proudly. Looking back on it, I now did see it as our first date, though I hadn't known it at the time.\n\n\"Uh, huh,\" Bethany nodded, sizing me up. \"Has she spoken to you about me?\"\n\nWow, this woman had some insecurity issues, I thought. \"Yes, a little. She told me that you two were an item, but you split up.\" \n\n\"Did she say why?\" \n\nWas this person serious? I shrugged. \"She just said you were incompatible,\" which was true. I didn't need to score any points, or give her any more attention than she deserved. Bethany seemed pleased with my assessment. \n\n\"Incompatible works. Well, it's nice she's found someone. She's a good person. And a very talented artist. Give her my regards, will you? Nice meeting you, Adina.\"\n\n\"And you, Bethany.\" When you come down to it, she was gracious. No catty remarks, and it sure didn't appear she was out for blood. \n\nHowever, after she sauntered off, I had this brief moment of doubt. I began imagining that I was just one in a long line of courtesans that Stephanie invited to her bed and then sketched the following morning. It was silly, really, and yet 'the heart knows no reason.'\n\nI knew Bethany had gotten under Stephanie's skin. She had admitted to being emotionally and physically involved with her. But then, I'd been married to a man for five years. I had to remind myself that as an artist, it was only natural for Stephanie to seek out models to draw. It had nothing to do with personal affections. Though, I did wonder if I might convince her to make me her lone nude subject. I mean, lots of artists have models who serve as their sole inspiration both on the canvas and in bed. Right?\n\nBy now, the gallery was packed, and I was getting antsy. We'd been there for going on two hours, and my feet were starting to hurt. Of course, Stephanie was networking and making sales, and that was extremely important to her. \n\nFinally, she made her way over to me and asked if I was ready to leave. I told her I was, and we left. On our way home, Stephanie wanted to know what Bethany had said to me. \n\n\"She was very gracious, Steph. We got along just fine,\" I assured her. \"Though I'm not sure it's safe to leave our portraits right next to each other,\" I said, in a suggestive tone of warning.\n\nShe laughed at that. The good news was Stephanie sold six pieces from her show, bringing in several hundred dollars. \n\n\"A reason for us to celebrate tonight,\" I told her. \n\nLater at home, I delicately broached my concerns. \"I won't lie, Steph. Seeing Bethany's nude body on the wall, next to mine, and knowing you and her were lovers, was a bit difficult to take.\"\n\nStephanie nodded. \"I get that. But like I said before, I'm not a player. It's pretty easy for me to find models to pose for me. And if it would make you feel better, I can remove her sketches from the show.\"\n\n\"You don't have to do that,\" I assured her. \"Though maybe you could turn them around so they're facing the wall,\" I joked.\n\nWe both laughed pretty hard at that one. \"And to be very clear,\" Stephanie added. \"Your willingness to go hiking with me and risk sitting on a cactus while peeing, pretty much knocks Bethany out of the running.\"\n\nThat made me smile. She leaned over and kissed me on the cheek. \"You've knocked everyone out of the running. Now are you up for a little hike?\"\n\nWe drove out to Sabino Canyon Recreation Area. The riparian stream with its man-made waterfall was absolutely lovely, and apparently important for many winged creatures as well. \"Every so often a rare bird will show up here,\" Stephanie informed me. \"We've had an Elegant Trogon visit the area a few times. Now that's a bird, I hope you'll get to see some day. Quite the stunner.\"\n\n\"Looking forward to it,\" I said, realizing we were imagining a future together. Just then a Roadrunner zipped across the trail in pursuit of a lizard. \n\n\"Beep, beep.\" No, it wasn't me who produced that silly cartoon honk. \n\nIt was another fun day in the sun with my girlfriend. Every so often, we'd stop to kiss and hug, and with every intimate moment, whether it was kissing, cuddling or merely hiking the trail, I grew more certain that this was the person I wanted to spend my life with. How did I make such a leap so quickly? I honestly don't know. But I believe that when you connect with someone on a deep level, other things, such as race, gender, religion, just aren't as important.\n\nThat night, we polished off a bottle of wine in celebration of her recent sales. And then finished off the day with a wonderful moonlit tryst in her bed. \n\nIt was a romantic night. The outside temperature was pleasant, so the windows were open, and as I continued to decipher the secrets of my lover's body, I made a mental list of every special thing I liked about her. I made note of her smells and the shade of her nipples, her indented belly button and the slope of her pubis. I studied her two tattoos, which for some reason, I like to kiss, and her long, slender toes and firm, sexy ass. And of course, I got a better sense for how she liked to be touched. \n\nThat night, I did a little work on my technique, hoping to discover more ways to give her pleasure. And when it came to giving her an orgasm, I took my time, for I was in no hurry to rush through the steps. I let her vocal urgings and physical reactions inform me as to what she needed. \n\nI explored every inch of her, committing to memory as much as I could retain. I remember studying her thick labial folds more carefully, and admiring how their brown skin gave way to a bright pink at their base. \n\n\"You're so pink,\" I remember giggling as I held her open and licked at her entrance. ",
        "She loved my playfulness, and that made me happy. As I've said, I wasn't one of those girls who knew from an early age that she preferred women. Lesbian sex was new for me, so any compliment from my lover was a gift to be cherished. \n\nDespite being a novice, I was quickly figuring out that sex with Stephanie excited me much more than it ever did when I was with a man. Yes, even my husband. I'm no expert, but I suspected my ease and comfort had a little to do with our bodies being similarly wired. The smoothness of her body, the gentleness of her touch and the way we read each other, aligned with my sensibilities. I never felt the need to have to perform, or prove myself to her. The way we pleasured each other seemed more in sync than it had been with my previous lovers. \n\nAnd as always, she made me come. That night it was with her fingers. I couldn't get over how good she was in bed. I wasn't naive. I didn't blindly assume sex with every woman would automatically be this good. I knew that much depends on how comfortable one is with their lover. I guess I just got lucky.\n\nOur relationship was in its infancy, and our sex was fresh as a spring morning. We were still getting to know each other. Perhaps down the road we might do some experimenting, but for now, getting to know her was my primary focus.\n\n\"Maybe we could put up some ceiling mirrors?\" I suggested, after she had used her fingers on me. \n\nShe looked at my, dryly. \"You want to hear about the mirror that fell off the ceiling?\"\n\n\"No, I don't.\"\n\nMending a broken circle\n\n\"I really want to tell this story,\" I insisted, as we sat out in her backyard late one afternoon \n\n\"Which story? Lucy's? Or ours?\" Stephanie asked me.\n\n\"Everything. All of it. My grandma's death, the finding of her letters, Lucy's secret relationship with Gabrielle and her marriage to Robert. Then flying down to meet you and our time together in the desert, and our falling in love...There's really just the one piece still missing.\"\n\n\"Gabrielle,\" Stephanie noted, nodding her head. \n\n\"We need to return these letters to your grandmother and find out from her what the real story is. What really happened and why. And maybe we'll finally get to meet this elusive Gabrielle. Your grandmother has all the answers, Steph. We should go see her before she's no longer with us.\" \n\nThe possibility of her dying was a real concern of mine. I'd already lost one grandmother.\n\n\"You'll come with me?\" It was clear Stephanie didn't want to make the trip alone. And I was glad, because I had no intention of letting her go without me. I needed to be there, as a witness.\n\n\"Of course, I'm coming with you. I'm the one telling the story, remember?\"\n\nInitially, Stephanie was hesitant to follow through. But I could see her better angels hard at work, convincing her of the wisdom of our visit. \n\n\"When you lack meaningful answers to difficult questions, you go to the source,\" I told her.\n\nAnd so, we began adjusting our schedules so we could make the trip together. First, Stephanie called Lucy and asked if she and a friend could come for a visit. Lucy was overjoyed that Stephanie wanted to see her.\n\nMeanwhile, I flew back to Seattle with plans to meet Stephanie in San Francisco. Back home, I followed through on a couple of assignment leads, while Stephanie focused on a commission she had managed to secure.\n\nDuring my time in Seattle, I mentioned to Mom that I'd met a very special woman, and that it was looking serious. She was surprised by this news, though happy for me. As always, her support was important to me. And so, feeling freshly energized, I left for San Francisco buoyed by the knowledge that I would finally get to meet my grandmother's childhood friend.\n\nAs it turned out, I arrived in San Francisco the day before Stephanie. I picked up our rental car, stayed the night in a hotel, and drove out to the airport the next day to meet her. When she arrived, I was waiting for her at baggage claim. Upon catching sight of me, she gave a loud squeal as she ran over and wrapped me in her arms. She kissed me hard and long right there in front of everyone, and there was little I could do but join in. \n\n\"Oh, I've missed you so much,\" she sighed, kissing me a few more times. \n\n\"I've missed you too,\" I answered between kisses, marveling at how openly affectionate she was, and how lovely it was to be missed by her. \n\nI had been missing her terribly over the past two weeks, and though we talked over the phone practically every evening, it was a long time to be apart and I was ready to be with her again. We collected her bags, loaded them into the rental, and made straight for her grandmother's house. \n\n\"How you feeling?\" I asked as we sped along the interstate.\n\n\"Kind of anxious, but relieved to be doing this with you. I mean, it's hard to know what to expect.\" I had to agree. We had talked through some strategies, but they were pretty basic. In the end, we decided to let Lucy's letters be our guide.\n\nThe house was a two-story, brick colonial, just north of San Rafael. I could feel my heart thumping as we made our way up the stairs to the porch and rang the bell. Stephanie's damp hand was gripping mine so tightly it actually hurt. \n\nThe door eventually opened to reveal an elderly woman in her seventies. Her grey hair was pulled back and pinned with a clip. Yet even at her age, and despite the wrinkles, I could see that her skin was clear and her eyes twinkling with life. She was wearing a long floral print dress.\n\n\"Oh, my dear Stephanie!\" Lucy cried happily as she embraced her granddaughter. \"It's been far too long. How good it is to see you. And who is this you've brought with you?\" she asked turning to me. \n\n\"This is my partner, Adina,\" Stephanie replied. She leaned over and kissed me on the cheek, to make sure her grandmother understood that we were more than just friends.\n\nI watched Lucy's eyebrows raise. \"Now this is news. Welcome, Adina. Come on in, you two. Bring your bags. I was hoping you and your friend wouldn't mind sharing a bed. I now see that I needn't have worried,\" she noted with a savvy twinkle in her eye. \"I have a cozy guest room all made up for you,\" she announced, opening the door to our bedroom.\n\nAfter we got settled, we came out to join her in what seemed to be a parlor room. \"Stephanie. Your mother has never once mentioned to me that you were...\"\n\n\"...'that way'?\" Stephanie finished, borrowing the very phrase Lucy had used in an early letter to my grandmother.\n\n\"Yes, well put,\" Lucy nodded primly. \"How long have you known?\"\n\n\"Well, I always knew I liked women. But it wasn't until college that I began to consider them as partners.\" \n\n'Just like you, Lucy,' I silently thought to myself as Stephanie continued with her answer. \n\n\"My mom now knows that I'm gay, as do some of my friends. But speaking of being 'that way', it seems awfully inconsiderate that no one ever bothered to tell me that you were in a long-term, committed relationship.\"\n\nThis caused Lucy to perk up. \"Ah! So, you know about me and Gabrielle, then. Good. Well, it's about time, my dear! Your mother finally came to her senses, did she?\"\n\nStephanie shook her head. \"Actually, no, she didn't. I learned about it from Adina. You see, she has some letters of yours that you sent to her grandmother. They made for some very interesting reading.\"\n\nI could see that Stephanie's grandmother was quite befuddled. This was my cue. Reaching into my bag, I extracted the packet of letters. \n\n\"Lucy...may I call you Lucy?\"\n\n\"Yes, you may, dear.\"\n\n\"My grandma was Audrey Ellison. Well, Audrey Callaghan back in college when you and her were friends. I'm not sure if you know, but she passed away earlier this year. She had cancer.\"\n\nLucy gasped and brought her hand to her heart. \"Oh, I'm so sorry to hear that, Adina. Yes, I knew she had cancer, for she'd called me a while back to tell me of her diagnosis. Last we spoke, she was undergoing treatment. Oh, this is just so sad to hear.\" Lucy was visibly upset at the loss of her life-long friend. \n\nStephanie ran over to fetch a box of tissues from a nearby side table. \"Adina, your grandmother was a dear, dear friend to me. Our friendship goes all the way back to our days in college,\" she said, dabbing at her eyes with a tissue.\n\n\"Yes, I know. It's all here in your letters,\" I said holding them up. \"After Grandma Audrey died, I found them in a box she had stored under her bed. She had kept them with her all these years. She even wrote your initials on the lid of the box. And no, she didn't burn them as you asked her to.\"\n\nLucy looked confused. \"I asked her to burn them?\" \n\nI held them out to her. \"There are only eight, but I think you should have them. You are, after all, their rightful owner.\" Lucy took them from me and began studying them. \n\n\"Why didn't you or Mom tell me that you were in a relationship with Gabrielle, and that your marriage to Robert was just for show?\" Stephanie asked, kindly as she could. She had moved over to sit next to her grandmother on the sofa.\n\nLucy seemed flummoxed and frustrated. \"Believe me, child, for years, I have wanted to tell you. In the early days, the secrecy was necessary to shield it from my parents. We feared all sorts of legal problems if my father found out. And when your mother was young, she found our arrangement confusing. She was embarrassed and didn't want her school friends finding out. Gabrielle and Robert understood this. And so, we did all we could to keep my relationship with Gabrielle out of the spotlight. We wanted Doreen to feel that she had a father and a mother like the other kids.\" \n\nAs Lucy explained, I recalled her writing to my Grandma that '...her precious Doreen had come to accept the true nature of their merry threesome...\" which turns out wasn't completely true. \n\n\"When you were born,\" Lucy explained to Stephanie, \"your mother wished to protect you from that confusion as well. She thought it would be the same for you as it was for her. Gabrielle and I fought her on this. But she insisted on waiting until she felt it was appropriate to tell you. We honored her wish, though she kept dragging her feet. Needless to say, it's been painful for Gabrielle not to be recognized as family.\"\n\n\"When Grandpa Robert died, Mom told me that Gabrielle would be looking after you. She said that she was a friend of yours, and would be your caretaker,\" Stephanie revealed.\n\n\"That is so like your mother,\" Lucy chuckled ruefully. \"Though in a way, I suppose Gabby has been my caretaker all these years. And I hers,\" Lucy reflected rather wistfully. \n\nSuddenly, we heard noises coming from the front of the house. \"Ah! I think that's her now,\" Lucy happily exclaimed, as the front door opened. \n\n\"Hey Luce, whose car is that in the driveway?\" a voice boomed out from the hall.\n\n\"Come into the den, Gabby. There's someone in here I want you to meet.\"\n\nThe woman who stepped into the den was slightly heavy set, and a bit shorter than Lucy. She had a ruddy complexion and curly reddish-brown hair that didn't have that much gray in it, and I wondered if she rinsed it with color.\n\nThe moment Gabrielle laid eyes on Stephanie her eyes lit right up. She recognized her in an instant. \"Oh, my goodness! What have we here? Come and give aunt Gabrielle a hug!\" \n\nWhat followed was a reunion as happy as you could wish for, and in spite of the years being denied each other's company, Gabrielle and Stephanie were gabbing away like siblings, busily apologizing and rationalizing and doing their best to catch up. \n\nOf course, I was welcomed into their circle, and proud to be there as Stephanie's partner. But mostly I chose to sit back and take it all in, making mental notes on how I would describe the scene.\n\nWhat I remember next was Stephanie and me sitting across from Gabrielle and Lucy as they read through the letters. Lucy would read the letter first before passing it to Gabrielle. It was really quite sweet to watch. \n\n\"You never told me you kissed Audrey Callaghan,\" Gabrielle gasped. \"Oh, you are in so much trouble,\" she warned Lucy, though the trouble she was suggesting seemed of a rather pleasant sort.\n\nAs they read the next letter, I had to ask. \"What's with Grandma Audrey and the biology book?\"\n\nFor a minute or so, the two women became animated as they tried to remember exactly what had happened. Eventually, Lucy relayed the event as best as she could remember. \n\n\"Gabrielle and I lived in the same boarding house. After we fell in love, she would often sneak into my room so we could be together. But you had to be careful, for Mrs. Rawson would occasionally conduct impromptu curfew checks...\"\n\n\"...to make sure we weren't hiding any men in our rooms,\" Gabrielle added, with a sly look to her partner. \n\n\"Well, I never did that,\" Lucy proudly proclaimed.\n\n\"Anyway, one evening, Audrey, your grandmother, had stopped by to visit. Gabrielle was also in the room, and planning to stay with me that evening. After Audrey left, Gabrielle and I started to enjoy each other's company. We were so bad, weren't we Gabby?\"\n\n\"I'm afraid we were,\" she agreed, without the slightest shred of shame or guilt.\n\n\"But as soon as Audrey stepped out onto the street, she saw Mrs. Rawson enter the building...\"\n\n\"...hoping to spring one of her curfew checks on us!\" came Gabrielle's disapproving color commentary.\n\n\"Audrey knew Gabrielle was in danger of being discovered. So, she ran back into the building and raced right past Mrs. Rawson. 'Hold on there, girl,' Mrs. Rawson hollered at her. 'Where do you think you're going?' 'I forgot my biology book,' Audrey yelled back at her, while racing up to my room.\"\n\nGabrielle jumped in again. \"I'll never forget Audrey bursting into our room and hissing 'Mrs. Rawson's here! Mrs. Rawson's here!' Well, believe you, me, I was through that door and down the hall as fast as my legs could carry me,\" she laughed. \n\n\"But before Audrey left my room,\" Lucy continued, \"she took a book from off my desk, I've no idea which one it was, and I thought, what are you doing? But without missing a beat, she looked at me and said, 'I forgot my biology book.' Then she raced back downstairs, holding that book up high for Mrs. Rawson to see.\"\n\nBoth women were now tittering and laughing like school children. I have to admit, their telling of it was quite entertaining. \n\n\"Did you ever get that book back?\" Stephanie asked, thoroughly engrossed by the story. \n\n\"I'm not sure that I did,\" Lucy replied, shaking her head in bewilderment. \n\nIt was such a treat to hear the full story of how my grandmother came to Lucy and Gabrielle's rescue. I couldn't have been any prouder of her.\n\n\"Oh, I definitely told Audrey to burn this one,\" Lucy noted to nobody as she passed the next letter to Gabrielle to read. Gabby began to read quietly, when...\"What's this...? Oh, for the love of\u2014You didn't!\" \n\nShe looked at her partner and quoted from the letter. \"'I've forgotten the French expression for it'...? Oh, that is rich!\" She started chuckling so hard that her face went quite red, and I feared she might have an attack. \n\n\"Well, I was trying to be subtle,\" Lucy defended herself.\n\nGabrielle looked at Stephanie and me. \"This woman couldn't be subtle if her life depended on it,\" she proclaimed, wiping more tears of laughter from her eyes. \n\n\"Look who's calling the kettle black,\" Lucy countered. \n\n\"The French expression for it...\" Gabrielle repeated, her body jiggling with amusement. \"M\u00e9nage \u00e0 trois, my dear Luce, m\u00e9nage \u00e0 trois...\"\n\nAnd so, Gabby and Luce made their way through the letters, reliving Lucy's account of her marriage to Robert and their happy threesome, the arrival of Doreen, and finally Robert's death, and some praiseworthy comments about Stephanie. \n\nAt some point, I retrieved my camera from my bag. \"Alright, time for some photos. Gabrielle and Lucy, get in there nice and close. Heads together...that's perfect.\" \n\nI took a few more of them, both looking positively joyful. \"Now, let me take some with Stephanie.\" Stephanie joined the two elderly women. \"And if you'd be so kind as to take one of Stephanie and me...\" The photos taken I stuffed the camera back into my bag with promises to send copies to all. \n\nAll of a sudden, I stopped and stared at Gabrielle. \"Gabrielle?\" I said, looking at her cozily snuggled up against Lucy. \n\n\"Yes, Adina,\" she replied, gazing up at me with the sweetest of smiles. \n\n\"After having spent all this time reading about you in Lucy's letters and then getting to finally meet you in person, there's still one thing I've yet to learn.\"\n\n\"What's that, dear?\"\n\n\"Your full name! I presume you have a surname. Or does everyone simply call you Gabrielle?\" \n\n\"Or Gabby,\" Lucy added, with an elbow poke.\n\nGabrielle giggled, and Lucy quietly smiled as she took it all in. It was pretty funny, in a way. Stephanie and I looked to each other and shrugged. Neither of us had a clue. \n\n\"My last name is Moreau,\" she stated proudly. \"Gabrielle Moreau.\" \n\n\"And Allen, Robert's partner?\" I then asked.\n\n\"That would be Allen Durant\" Lucy added with a nod. \"A dear man. I believe he's down in San Diego now.\"\n\nHallelujah! Now I felt I could properly tell this story. \n\nLater, Lucy and Gabrielle took us out to one of their favorite haunts for dinner, and that night, as Lucy showed us to our bedroom, she pulled me in for a long, firm hug. When she pulled back, her eyes were brimming with emotion. \"Your grandmother was the kindest woman that ever lived. I've a feeling you're cut from the same cloth. You be good to my Stephanie.\" \n\n\"I will, I promise,\" I assured her. And I meant every word.\n\nThat night, as Stephanie and I slipped nude under the soft bedding, I wondered if I'd ever want to wear anything when in bed with her. Though I suspected there were some pretty cold winter nights in Arizona.\n\nWe cuddled for a bit, stroking each other's hair and basking in the glow of what had turned out to be an incredible day. Then Stephanie asked about the photos. \"Think there's one of us that we could frame?\" \n\n\"Sure,\" I replied, placing a kiss on her shoulder. \"But what do you say we choose one to put in our lockets? That way can finally wear them.\" \n\nStephanie gave me the sweetest look, just before she rolled over onto me and kissed me hard. Her lips sealed to my mine as her tongue pushed deep into my mouth. We kissed and rubbed our bodies together until our thighs were slick. And with perfect timing, my new lover started to kiss her way down my body, her soft lips and talented tongue making me squirm with need. After lingering for a little at my breasts, and teasing my teats until they were aching and stiff, she eased herself down between my legs and began to make love to my pussy. The woman's tongue was astonishingly flexible. I swear, I could feel it swabbing my vaginal walls. \n\nI had no idea how long she was down there, but I was inching ever closer, and began tightening my muscles in an effort to get there, when she stopped. Thinking something wrong, I stared down my body to see her smiling at me. \n\n\"Why'd you stop?\" I asked her, disappointed, but also curious.\n\n\"I don't know. It just feels wrong having sex in my grandmother's house. You think maybe we should stop?\" She'd crawled up alongside me, looking dead serious.\n\nI gave her this incredulous look, my body now yearning for contact. \"I think your grandmother would be very disappointed if we didn't have sex in her house,\" I pleaded my case. \"And I doubt there will be any curfew checks.\"\n\n\"Good point,\" she nodded, smiling wickedly at me. And I realized she was winding me up. \"Oh, you!\" I growled, as I squirmed on the bed. \n\nSuddenly, she swung her leg over me so that she was facing down my body, her legs to either side of my chest. She scooted back so that her ass was poised directly over my head, and her pussy tantalizingly within reach of my tongue. ",
        "'Oh, this is very much to my liking', I thought. I gripped the top of her thighs and guided her pussy down to my face, giggling like a kid in a candy store. As my lips made contact, I began lapping at her. Then I felt her head dip lower, and her tongue begin to lick me as well. \n\nAt first, I was able to split my focus between what I was doing to her, and enjoying what she was doing to me. Problem was, I was already pretty wound up, and she was much more experienced at this than I was. I could feel my loins starting to clench and tighten. In desperation I pulled her tighter to my face. I pushed my tongue deep inside her, even as my lower muscles tightened. \n\nWhen I started to peak, my brain stopped working, and all I could do was give in to my pleasure. Her skills were just too good. \n\n\"Oh my god!\" I cried out as I released. I tried to keep my mouth pressed to her, but I was overcome with a series of vaginal spasms. My head fell back onto my pillow as I shuddered through my climax. \n\nIt took me some time, but I slowly came around. \"You okay back there?\" she asked. I could almost hear the smirk in her voice. She was still on top of me, presumably waiting for me to finish. \n\n\"I think so,\" came my weak reply. I started toying with her inner lips, ever so gently inserting two of my fingers between her folds and into her tight passage. \n\n\"Oh yes, that's what I need,\" she sighed. \"That's my girl.\"\n\n\"You like that?\" I asked rhetorically, as I began to move my fingers in and out of her. \n\n\"Oh yeah, just like that. Keep that up.\" \n\nI increased the pace a bit, and she rocked back onto my fingers, groaning and grunting. \"Oh yeah, almost there,\" she warned. \"Faster! Yeah, don't stop! Harder! Harder! Put in another finger!\" \n\nI added a third finger and drove them into her fast and hard. Her vagina was now so wet that it was making a loud, wet, slurping sound. It was as beautiful and erotic as anything I could remember. Stephanie started pushing down onto my fingers so energetically, that she had the bed creaking. It made me think of Mrs. Rawson's curfew checks, but only for the briefest of moments.\n\nStephanie's vaginal muscles were clenching my fingers as her insides began to smolder and catch fire. \"Ooooooh,\" she began to whimper. \n\nWhen she came, she stiffened and then began to shake as a series of tremors raced through her body. I extracted my fingers and watched her grunt and shiver through her orgasm. When the waves of pleasure finally ebbed from her body, her muscles gave way and she collapsed on top of me. \n\n\"Ungh,\" I grunted. Her dead weight was pressing down on me, and I went to push her off. Giggling, she rolled off of me and onto the mattress. I soon caught her fit of giggles.\n\nLater, as it grew quiet in the bedroom, we snuggled together under the covers, sharing a few loving kisses and watching the moonlight shimmer and dance on the far wall.\n\nIt had been an amazing day. One for the books. It had started with the poignant reunion of a granddaughter with her grandmother, then segued to the long-anticipated meeting with the grandmother's life partner, and finally came to an end with some really great sex. \n\nA spectacular finish to a spectacular day.\n\nEpilogue\n\nOur visit with Lucy and Gabrielle was replete with reconciliation and healing. To be there and witness the joyous reunion of those three women who I'd come to deeply care for was worth every minute I spent on that plane to San Francisco. \n\nDespite the many years of separation, it was difficult for Stephanie and Gabrielle to obsess over what hadn't been, when there was so much love and affection flowing freely between the four of us. \n\nWhen a frustrated Stephanie said to our group, \"I just wish it hadn't taken so long,\" Gabrielle shocked me with her response. \"It's possible that the reason it did was because we had to wait for Adina to become part of our story.\"\n\n\"Yes,\" Lucy chimed in. \"Without Adina, none of this would have happened. For she had to find Audrey's letters and then bring them to Stephanie so that the two you could meet and fall in love.\"\n\n\"And then the four of us could meet here in San Francisco and celebrate our continuing love and friendship,\" Gabrielle proclaimed happily. \n\nWow. For this Seattle girl, profounder words had never been uttered. Coming to Tucson and meeting Stephanie had altered my life's trajectory. But it was a tiny wrinkle in time, a forgotten shoebox under a bed, that brought the four of us together to heal a separation.\n\nAnd as the refrain of that old folk song wisely states, \"May the circle be unbroken, by and by...\"\n\nI did finally get around to writing the story. A well-known publication liked my draft proposal and agreed to publish it later that year. Of course, I changed the names to protect the guilty, particularly Mrs. Rawson, but the telling of it went pretty much as you read it here. \n\nMy narrative commenced with my beloved Grandma Audrey's passing and my subsequent discovery of her college friend's letters. Then detailed my eventual trip to Tucson where I met and fell in love with an artist and nature lover by the name of Stephanie Whitmore. And lastly, it described our trip to San Francisco to connect with Lucy Dwyer and Gabrielle Moreau, and mend that broken circle.\n\nAs for the next chapter, that's yet to unfold. But I have a feeling it will involve a long talk with Stephanie's mother, the selling of Grandma Audrey's house and my move to Tucson to be with Steph. \n\nUntil then, stay safe and well,\n\nAdina Gray"
    ],
    "authorname": "BirdnFlight",
    "tags": [
        "oral sex",
        "cunnilingus",
        "lesbian romance",
        "oral",
        "romance",
        "romantic"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/lucys-letters"
}
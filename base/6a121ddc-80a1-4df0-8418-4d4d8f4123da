{
    "title": "A New Life",
    "pages": [
        "My name is Liam and this is the story of how my life changed dramatically. It all began on a hot summer weekend in July while my girlfriend Mia and I were enjoying a trip to a cabin I had rented. At the time I was 24 and Mia 22. We'd been a couple for about five weeks and this was our first trip together, we planned to stay in this secluded part of Switzerland for 5 days.\n\n\"What?\" I hear you ask, is there even such a thing as a secluded part of Switzerland? Well the answer is yes! If you head into the alpine valleys of the south eastern part of the country you can still find sparsely populated locations. Mia and I both love nature and hate crowds, so we researched our trip carefully before leaving very early on a Saturday morning.\n\nBefore I continue, I'll give you a quick description of the two of us. I'm UK born and bred, easy on the eyes, scrawny and reasonably tall at 178cm. I've been told my eyes are my best feature and wouldn't argue with that. Being that I work in IT and am considered a geek you can imagine that I never had much experience with members of the opposite sex.\n\nMia's father is German and her mother Japanese. In my eyes she combines the best attributes of both races, being tall and slim with skin that's smooth, pale and like porcelain. When loose, her long silky black hair reaches almost to her bottom. She has brown, almond shaped eyes, a small nose and lovely, naturally pouting lips that all come together to form a very attractive and distinctive face. \n\nHer flat tummy and narrow waist are followed by a smooth hairless pussy with large protruding lips and a firm and perfectly shaped arse. These are, of course, some of my favourite parts of her body, coming a close second to her breasts and nipples. She would vehemently disagree as she finds her 32AA bust far too small and her nipples far too large. I however love touching, kissing or otherwise playing with her tiny breasts and dark brown nipples. These nipples are seldom soft, in fact the only time I've seen them in that condition is when she's in a very deep sleep. Even then, they jut out about 1cm and with the slightest stimulation or arousal they almost triple in length! Combined with a width similar to a large grape, it makes them perfectly suited to licking, sucking, pinching, pulling and twisting.\n\nAs to her personality, well, she's very intelligent, quick to smile, has a great sense of humour and is self-assured in everything except her body. She's fluent in English, German, Japanese and French. We met at work where she was acting as an interpreter. It took me a lot of courage and a good three weeks of dating before we were first intimate together. And by intimate, I mean we kissed and fondled each other through our clothing! It was a further week before we finally made love and Mia had refused to be totally naked, keeping on her top and bra.\n\nNot that I'm complaining you understand! It was more than worth the effort and her nether regions were pleasing beyond belief. Was she a virgin? No, that prize was taken by another a few years earlier and if I ever encounter the bastard I'll beat him to a pulp (or at least get someone else to do it for me!). He was part of the reason for her self-doubt in all matters sexual and related to her body. After that fateful experience Mia had withdrawn into a sexual shell and was only coaxed out after I had revealed my own inexperience and insecurities. \n\nAs I mentioned earlier, I'm a geek and proud of it. I'd dedicated my life to technology and was, at 24, already wealthy enough to retire had I desired to do so. The side effect of this was that I was still a virgin. That's not to say I wasn't interested in, or attracted to, the females of our species, quite the contrary! The problem was that I was too insecure to approach a girl and those that approached me only did so after finding out about my wealth. In addition to that, the last person that had seen me naked was my mother when I was about 9 and I was terrified at the prospect of anyone seeing me undressed.\n\nWith Mia, it was all different. She had no idea who I was, and I was smitten within minutes of meeting her. For the first time in my life, something other than technology was occupying my thoughts 24/7 and I finally found the courage to ask the simple question \"Would you like to go out for dinner?\"\n\nSurprisingly, she agreed. When we got to the stage of our first kiss, I admitted to her that I was a virgin and that it was my first time to even kiss a girl. She wasn't put off by this, as I had feared, and we gently and patiently explored the art of kissing. Our first caresses, even with the barrier of fabric, were beyond my wildest dreams. \n\nWhen things progressed and she allowed me to remove her skirt, stockings and underwear before slowly undressing me I was in a state of shock at her beauty. My penis is of normal dimensions but with a downward curve. Mia was impressed by its size and shape and fascinated by the fact that it lacked a foreskin. The only one she had previously encountered, belonging to the bastard I'd mentioned earlier, had been much smaller and uncut.\n\nWhen I'd asked if I could remove all her clothing she simply said \"later\" and knelt before me. She took my cock in her hand then began to lick and suck on its tip. The sensations were amazing, and I looked down in wonder at her head as it began to bob back and forth. My legs became unsteady as she looked up into my eyes and then slowly swallowed my entire length. She held it there briefly before rapidly pulling back. I groaned and she smiled up at me with a length of salvia connecting my tip to her lips.\n\nShe repeated this action a few times and then as she felt me getting closer to climax began a rapid sucking and licking action just on my glans. I couldn't hold back any longer and grasped her head as I felt my ejaculate travel along my shaft and explode into her mouth. I could feel her gulping and then she once again pulled my cock deep into her mouth and licked and sucked before releasing me.\n\nI looked down as she used a finger to wipe a trace of sperm from her chin before licking it clean. \n\n\"Oh my god, that was amazing.\" \n\nShe smiled as I helped her stand and we kissed each other deeply. I could taste myself in her mouth and eagerly explored her oral cavity with my tongue. \n\n\"Do you want to taste me?\" she asked shyly.\n\nI licked my lips and nodded in response. Taking my hand, she led me to an armchair and then sat down. She scooted forwards slightly, spread her long and sleek legs, hooking them over the armrests. Her sex was presented to me and I stared at it in wonder. Her longish inner lips glistened slightly and were still fused together. I sank to my knees and shuffled forwards, placing my hands on her soft and warm thighs. \n\nI could smell a sweet musky aroma and moved my head closer to its source inhaling deeply through my nose. She giggled and reached down, gently grasping those long lips and prying them apart. It was like a beautiful flower unfurling before my eyes. I could see her small pink clitoris poking out of its sheath and below that, moist pink tissue leading to her small and tight opening that was oozing a clear liquid.\n\nThe arousing scent intensified, and I felt almost light headed as I moved nearer. I extended my tongue to its maximum length and began to gently lick along the edges. She shuddered and moaned as she grasped my head and pulled me even closer. I used the flat surface of my tongue and began slowly licking from her opening to her clitoris. She tasted wonderful, a mix of salty and sweet.\n\nI had to get more and probed deeply into her while flicking my tongue about. She squealed and pulled tighter so that my nose and mouth were pushed tightly against her. I could barely breathe and intensified my lapping as I moved my face up and down at the same time. I could feel my nose nudging against the small bud of her clitoris and each time I bumped against it I felt her spasm. She began making a continuous and rather loud squealing sound as her body writhed about in pleasure before screaming loudly and clamping her legs behind my head and back. I felt a gush of liquid spray into my open mouth and greedily licked and gulped as much as I could.\n\nSuddenly she stopped moving and I felt her legs loosen before falling to the side. I lifted my head and looked up at her face. Her eyes were closed, and she was breathing deeply. Her cheeks, neck and the little I could see of her chest were flushed. She looked absolutely beautiful. Her eyes fluttered open as I watched, and she smiled at me. \"Come here\" she whispered pulling my head gently. \n\nI slowly slid up her body feeling her soft and wet pussy as it rubbed against my chest leaving a trail of fluid. When I was close enough, she leaned forward and began to lick her juices from my face. It was extremely erotic, and I felt my cock throb as it brushed against her inner thighs. \"That was fantastic Liam!\" she said before we kissed deeply. This time it was her tongue flicking around in my mouth tasting herself.\n\n\"Make love to me now!\" she said breathlessly. I repositioned myself and felt her hand as it grasped my erection and guided it to her opening. I felt heat and moisture as my glans came into contact and slotted into position. She released my cock and I slowly pushed forwards. My cock slid into her and I gasped. This was it, I was about to have sex for the first time!\n\nMia groaned as I slid deeper and I stopped in fear I was hurting her. \"Is everything OK?\" I asked.\n\n\"Yes, just give me a chance to get used to you.\"\n\nI paused and suddenly realised we weren't using any protection. \"Should I pull out? I don't have a condom on!\"\n\n\"No, it's OK, I'm safe.\"\n\nAfter a brief pause, she said, \"OK, I'm ready.\"\n\nI pushed forwards slowly again and felt her pussy surround me like a glove. Her warm canal pulsed and gripped my shaft as I sank ever further. She gasped again and I froze. \"No, it's OK, keep going.\"\n\nI looked down and couldn't believe how sexy she looked with half my penis buried inside her. I could see her opening stretched around my cock. I said \"I'm about half way in.\"\n\n\"Oh god, you're so big! Keep going.\"\n\nI was glad she said that and fought the urge to just finish the job with a single thrust. I pulled back a bit and enjoyed the feeling of her pussy trying to hold on to me before I continued my slow but steady penetration. Her gasps turned to moans and then to same squealing sound she had made when I was pleasing her orally.\n\nI could see and feel fluids oozing out around my embedded shaft as the last centimetres disappeared within her. \"That's it! I'm all the way in.\" I said as I felt my tight balls rubbing against her arse. She didn't answer and I looked up at her face. Her eyes where closed and she was breathing deeply. I waited a moment and then began to withdraw slowly. The feelings were intense and when I was about half way out I reversed the direction and plunged all the way back inside.\n\nMia screamed and hissed \"Yes\" so I repeated the action. My cock was glistening and began making a squelching sound each time I drove forwards. Gripping her waist tightly with my hands, I increased the tempo and the squelching sounds were joined by slapping noises as flesh hit upon flesh.\n\nI could feel I was losing control and said \"I can't hold it much longer! I'm going to come soon.\"\n\nI felt her pussy clench and grip my thrusting penis even tighter and after a few more thrusts I buried myself as deeply as possible and held myself there as I felt my semen shoot forth. Mia screamed and I felt my cock being massaged as her pussy pulsed rhythmically. The tension was suddenly released from her body and I felt her loosen her grip on me. Looking up, I could see the expression of bliss on her face as she lay panting before me.\n\nThe flushed cheeks and neck were now joined by pearls of sweat and I couldn't resist leaning forwards and licking them. She opened her eyes and giggled before we kissed deeply. She said \"That was amazing! I've never felt anything like it before.\"\n\n\"Neither have I!\" I said as I slowly pulled back. My penis was still stiff but no longer as hard as it had been and I slowly began to withdraw. We both watched as more and more of the glistening shaft became visible before the glans popped out followed by a gush of whitish fluid. Without thinking, I bent down and started to lick and suck up as much of it as I could. \n\nMia stiffened and moaned as I lapped, and I felt der distended pussy clench as she squeezed more of our juices out. I loved it and knew I would never get enough of the unusual and exotic flavour and texture. When I was done Mia said, \"stand up.\"\n\nI did so, and she proceeded to return the favour and licked and sucked my still aroused and very sensitive penis. When she was done, I felt it finally being to relax and soften slightly. Mia stood and took my hand saying, \"Let's have a shower together.\"\n\nI was hypnotized by her swaying and jiggling buttocks as she led the way to my bathroom. \"God, you're so beautiful\" I said.\n\nShe glanced at me over her shoulder and smiled as she added an extra wiggle to her walk. Once we were in the bathroom, she turned to face me and said, \"Liam, remove the rest of my clothes now.\"\n\nShe wasn't smiling anymore, and I could tell she was nervous as I stepped forwards and began to unbutton her blouse. My fingers trembled slightly from excitement as more and more of her chest was displayed. When the last button was undone, I pulled the blouse off her shoulders and she stood before me in just her bra.\n\nShe didn't meet my eyes and looked suddenly sad. I couldn't understand the change in her behaviour as I reached behind her back and sought out the clasp. I was unsuccessful and she quietly said, \"It's at the front.\"\n\nFeeling like a fool, I blushed and said \"Sorry, I've never done this before.\"\n\nInstead of replying, she took my hands in hers and guided them to the small clasp between her breasts. I was fumbling again but managed to open it and then pealed back the two halves to reveal her breasts. I gasped at the sight and let her bra fall to the floor as I stood staring open mouthed.\n\n\"I'm sorry.\" She said quietly and I raised my eyes to hers. She was crying and I said, \"What's wrong Mia?\"\n\nShe sniffed and didn't answer, just raising her hands to indicate her breasts. I said \"I don't understand? You're absolutely beautiful.\"\n\nI dropped my gaze to her small breasts that were capped with the most amazing nipples. I wanted desperately to reach out and touch them and suck on those tempting buds but didn't dare for fear of upsetting her. \"Can I touch them?\"\n\nShe sniffed again and nodded her head. I gently reached out with both my hands and felt the warm skin of her tiny mounds. I squeezed gently and felt her gasp. My fingers trailed over the hard nipples and Mia gasped again as I pinched them softly. Without asking I leant forwards and flicked one with my tongue, before placing my lips around it and sucking it deeply. Mia groaned loudly and her hands moved to my head pushing it further into her chest.\n\nI could feel her nipple grow in my mouth and I increased the suction before letting it pop free. My cock had recovered and was once again fully erect. I switched to the other nipple and repeated the process. It felt like sucking my thumb and I couldn't believe how big they got. Looking at Mia I said, \"Why did you hide them, they're amazing!\"\n\nShe looked at me in shock, \"do you really mean that?\"\n\n\"Of course! Why would you doubt me?\"\n\n\"Because my breasts are so small and my nipples are huge.\"\n\n\"I love them and I couldn't imagine anything better.\"\n\n\"But at school everyone made fun of me and called me a freak and then the guy that took my virginity told me he never wanted to see me again because I'm as flat as a man.\"\n\nThis time I was stunned and said, \"What the hell? They're perfect for you and if I ever met a guy with boobs like yours, I might consider batting for the other team!\"\n\nShe laughed and I was glad to see her relax slightly.\n\nI pulled her into an embrace and when she felt my hard cock prodding her, she said \"It seems you really do still find me attractive!\"\n\nI held her tightly and as I delighted in the sensation of those hard nipples poking into my chest. \"I don't find you attractive, I find you absolutely irresistible.\"\n\nWe held each other like that swaying slightly. She sobbed and pulled back to find her crying again. \"What's wrong?\"\n\nShe sniffed and said \"Nothing, I'm just so overwhelmed that you aren't repulsed. I just can't believe it!\"\n\nI held her tightly again, \"let's have that shower and then we can talk.\"\n\nShe nodded and I turned on the water before we both stepped into the glass enclosed stall. The water felt good but rubbing shower gel over Mia's body felt even better. I couldn't get enough of her nipples bouncing up every time my hand brushed over them. Rubbing my hands over her buttocks and washing between them felt equally good and my cock remained hard throughout. \n\nWhen we were done, we helped each other dry and she wrapped her long hair in a towel. We went to the bedroom and slipped under the duvet. Once we were settled, I said \"now tell me your story.\"\n\n\"It's not that complicated. At secondary school I first noticed that many of the other girls were developing breasts and I wasn't. It didn't bother me at first as I wasn't the only one. But as time went on the only part of me that got larger were my nipples. In the school showers and locker rooms the other girls began to make fun of me and called me names.\"\n\nShe took a moment and then continued \"I was really upset and started skipping sports. The teacher then reported me to my parents. My mother asked me what was wrong, and I told her. She looked at me with pity and said that it was a curse of the females in our family. She said that when she was in school in Japan, she'd also been teased but many of the girls had small breasts so it wasn't that unusual. I told her it wasn't only that my breasts were small but also that my nipples were huge. \n\nShe asked me to show her and I shyly removed my top. My mother hadn't seen me naked for many years and she stared at me and told me that she could understand now why I didn't want anyone to see my breasts. I was even more upset than before and asked her if she also had nipples like mine. She shook her head and told me her breasts were similar, but her nipples were much smaller.\n\nI began to cry and locked myself in my room. I didn't know what to do. A short time later my mother knocked on my door and said her and my father had talked to the teacher and explained things. The teacher had understood and agreed to allow me to shower separately from the other girls. I had no choice but to agree but it caused me to become very insecure about my body and I never allowed anyone to see me naked for many years.\" \n\nI took her hand and squeezed it as I said, \"Oh Mia, I'm so sorry.\" I didn't add that I thought her mother was cruel and insensitive.\n\nShe continued with her story. \"When I was 19, my mother arranged for me to meet the son of a Japanese family living nearby. She told me I should try and befriend him and see if he would be interested in being my boyfriend. She added that he being Japanese meant he might be more used to small breasted women and perhaps not as put off.\"\n\nMy opinion of her mother dropped even further, and I couldn't believe that a parent would say something like that to their own child.\n\nMia continued, \"Anyway, I met the guy and we went out. He was a few years older than me and seemed nice, for the first time I had real feelings for a man. After about two months of dating he told me he loves me and would like to have sex. I was overjoyed but scared as I had no experience whatsoever. I asked my mother for advice and she arranged for me to go on the pill and encouraged me to go ahead with it. Soon after we went on a date and after dinner, he took me to a hotel. I was terrified but decided I had to go ahead with it.\"",
        "Mia took a deep breath and I could see that telling this story was difficult as she relived the experience again.\n\n\"We kissed and he unbuttoned my shirt and pushed his hand under my bra. I felt his had groping and squeezing my tiny breasts. He then pulled my shirt off me and unclasped my bra. I tried to cover myself with my hands, but he pulled them down and stared at me. He didn't say anything, but I could see he was disappointed. He then stripped off the rest of my clothes before removing his. We stood before each other naked and I saw my first real penis. It was soft and quite small, the tip was covered, not like yours.\"\n\nShe paused again and then said \"He told me to make him hard. I had no idea what to do and he said I should kneel before him and suck on his penis. I was desperate to please him so did what he said. I tried my best, but he just didn't get hard. Instead he got angry and blamed me, saying I looked like a boy sucking him. I began to cry, and he got even madder. He pulled me to my feet and said I should lie on my front so he wouldn't have to see my chest. I was so humiliated and wanted to leave but he just pushed me down. I struggled and told him to let me go but somehow he got excited by my resistance and when I felt something pushing between my legs, I realised he was erect and was going to take me this way.\"\n\nI pulled her towards me and held her tightly as she sobbed at the memory. \"I'm so sorry darling, you don't have to tell me more if it upsets you.\" After a while I felt her calm down and she continued her story.\n\n\"Anyway, it was painful but thankfully didn't last more than a minute or two. When he was finished, he stood up and got dressed. As he was leaving, he said I was a flat chested bitch and he never wanted to see me again. I lay there for a while crying and then showered and went home. My mother was waiting for me and excitedly asked how it had gone. I just sobbed and ran to my room. She came in later and said she'd feared I wouldn't be able to please a man and that it would be difficult for me to find anyone. So, that's my story and you're the first man I've been with since.\"\n\nI pulled her closer and after kissing her whispered \"Mia, you're absolutely beautiful and I'm in falling in love with you! Your mother was wrong and cruel.\"\n\nShe looked at me and said \"Do you really mean that? Don't you care about my breasts?\"\n\n\"I absolutely mean it and I do care about your breasts. I think they're the most beautiful thing I've ever seen.\"\n\nShe smiled and kissed me before saying \"Liam, can you make love to me again?\"\n\nI pulled back the duvet and revealed my hard and pulsing cock. \"I've been ready ever since we came out of the bathroom!\"\n\nShe laughed and sat up \"Can I be on top?\"\n\n\"Whatever you want!\"\n\nShe straddled my hips and grabbed my penis, placing it between her legs and then slowly sinking down on it. It felt fantastic and we both gasped at the sensation. When I was all the way in, she leant forwards and I placed my hands on her breasts and squeezed them gently before pinching and pulling on her huge nipples. Breathing deeply, she began to ride me slowly. I kept hold of her nipples and she seemed to enjoy the sensation of them being pulled when she rose up. We were both so aroused that it wasn't long before we climaxed and she lay on top of me panting. I heard her whisper \"I love you Liam.\" \n\n\"I love you Mia.\"\n\nSo now you know the story of our first time, that was a week ago and now we were on the way towards the destination we'd chosen for our first ever trip together. \n\n***\n\nDay 1: My GPS seemed to think we'd arrived and I looked over at Mia and watched as she slowly woke up. She stretched, yawned and smiled when her eyes opened and met mine. \"Hello sleepy head\" I said.\n\n\"Are we there?\", she asked as she sat up.\n\nI was parked on the side of the road in the location the navigator had specified. It looked like I could continue driving but the dirt road wasn't on the map. \n\n\"Do you want to stretch your legs, or shall I just carry on driving?\" I asked.\n\n\"I'm fine walking.\"\n\n\"OK then let's go.\"\n\nTaking our gear from the boot I checked my smartwatch for directions and said \"According to this, we should be at the cabin in about an hour.\"\n\nMia nodded and we began walking side by side in the direction indicated. It was now almost 9 o'clock and the temperature was already quite high. Luckily the trees provided some shade and it was comfortable to walk. We chatted about general topics and our plans for the weekend and time passed quickly. As we climbed what I thought would be the last hill, the valley opened beneath us and we could already make out the river.\n\nMia said \"Wow, it's so beautiful here!\"\n\n\"Yes, and we haven't seen a soul! I'm looking forward to cooling down in the river, it's quite hot already. Let's get down there as quickly as we can.\"\n\nMia agreed and we picked up the pace as we headed downhill. About twenty minutes later we arrived at the secluded cabin and I tried the key I'd been given. Luckily it worked and we stepped inside. It was very basic, a small kitchen, bathroom and living/bedroom combined. Power was provided by solar panels on the roof. We dropped our packs and the first thing I did was turn off all my electronic devices. Mia did the same and said, \"It'll be good to be offline for a while!\"\n\nWe'd agreed beforehand that we wanted to be off the grid while we were here, and it already felt liberating. We quickly unloaded our belongings and then set out to explore the area around the cabin.\n\nThe river was about 30 metres to the south and we went there first. The water was clear and cool. There was a small sandy bank before you reached the water and despite there being quite a strong current in the centre, the sides were calm and only about waist deep. I removed my boots and socks and walked in up to my knees. \n\n\"Come in, it feels great\" I said.\n\nMia was wearing a short summer dress and only had to remove her footgear. I held her when she joined me, and we shared a kiss. She said, \"I can't wait to explore; it looks like we can walk in the water along the edge.\" \n\n\"Yeah, let's pack a picnic and go!\"\n\nShe took my hand and we both walked back to the cabin. As I packed some food and drinks Mia asked, \"What are you going to wear?\"\n\n\"I think I'll just go in my trunks. What about you?\"\n\n\"I was thinking to wear my bikini.\"\n\nI looked up and watched her as she pulled the thin dress over her head. She stood there in panties and bra, before removing both and hunting through her backpack for her bikini. My penis swelled at the sight of her beautiful body and when I stood it formed a large tent in my shorts.\n\nWhen she turned and saw the condition I was in, she laughed \"Don't get any ideas, I want to explore before we do anything else!\"\n\nI pulled off my t-shirt and dropped my shorts revealing my hard, curved cock. \"Are you sure?\" I asked, wiggling my hips to make it wobble about.\n\n\"It's very tempting...\" she said, as she stood holding what looked like two tiny bits of white fabric \"but I want to swim first!\"\n\nI watched lustfully as she pulled on the swimsuit bottoms followed by the matching top. She looked stunning. The top was unlined, and I could see her huge nipples forming two large bumps in the fabric. She noticed me staring and did a twirl \"Do you like it? I've never worn anything like this before!\"\n\nI licked my lips, \"you look absolutely fantastic!\"\n\nShe smiled, \"it's just for you! Before we met, I wouldn't have dared wear anything like this.\"\n\nMy cock gave a lurch and grew even bigger at the thought of others seeing Mia wearing this. She noticed my response, \"you really do like it!\"\n\n\"Of course, but don't ever be ashamed of your body again! You should wear things like this anywhere you want, not just for me!\"\n\nShe blushed at my words, \"I'm not ready for that.\"\n\nI wasn't disappointed with her answer, as I knew why she was reluctant to be seen like this by others. Besides, she hadn't said never, just that she wasn't ready! I was about to put on my trunks when she stepped closer and took my cock in her hand. \"I could take care of this for you if you want?\", licking her lips seductively.\n\nIt was very tempting, but I decided to save it for later, \"thanks, but I'll wait!\"\n\nShe gave my cock two quick tugs and then watched as I pulled up my swimming trunks. I struggled to contain things and the loose pants formed an obvious tent again. It looked ridiculous and wasn't very comfortable, but I thought it would settle down soon enough. \"After you\" I said, gesturing to the door. She bent down and slipped on her sandals. I groaned as the small white triangle that formed the back of her suit slipped into the cleft between her buttocks, leaving both cheeks fully exposed. \n\nMy cock throbbed again, and I could feel the tip moisten as some pre-ejaculate was expelled. I began to regret not accepting her offer as I bent and fastened my sandals before taking our provisions and leaving the cabin with Mia. As we walked towards the river she glanced at my continued arousal and said, \"it looks like you're leaking!\"\n\nI looked down and, sure enough, a small dark stain was forming where my tip rubbed against the blue fabric. I shrugged, \"it's your fault for being so bloody sexy!\"\n\nShe laughed, \"it looks very uncomfortable, but I've got to admit, seeing you like this is turning me on, imagine if we met someone!\"\n\nI stopped and took her hand turning her towards me. I could see her nipples were harder than before and I could even make out their darker colour through the thin fabric. I lowered my eyes and noticed that the front of her bikini bottoms was almost transparent from her juices. \n\n\"They wouldn't notice me once they laid eyes on you!\"\n\nWe walked rapidly into the water, this time not stopping until we were waist deep. The cool water felt wonderful and helped relax things down below. I sank lower and let the water cover my head. When I emerged, I could see Mia had done the same. As her chest came into view, I felt myself harden yet again as the wet fabric was now completely transparent. \"My god, it's like you're wearing nothing!\"\n\nMia glanced down and blushed as she saw the level of her exposure. Only the thin straps and the edges of the triangles offered any coverage, the actual fabric looked like it had vanished! She rose further and we both saw that the situation below was the same. Her pussy was clearly visible and just framed by a tiny white triangle. \"I didn't realise it would be this see-through! Do you think I should go back and change?\"\n\n\"NO! I love it, anyway, there's no one else here.\"\n\n\"But what if we meet someone?\"\n\n\"I doubt that'll happen and if we're in the water we can just wait until they leave. When it's dry you can't see as much.\"\n\n\"I suppose\", she said, sounding unconvinced.\n\n\"Look, it dries so quickly I can already hardly see anything now.\" \n\nShe did a quick check and could see that I was telling the truth. The suit was still partially transparent but less so than just a few minutes earlier.\n\n\"OK, I'll do it! Let's go.\"\n\nI smiled at her and gave her a peck on the cheek before we moved to shallower water and began to walk upriver. Walking in the water was quite slow going but we both loved it. The river was spectacular, and we found numerous deep pools and small waterfalls that we knew we'd visit again during our stay. At some parts, we had to do a bit of climbing and I always enjoyed looking up at my girl as she scrambled over the rocks. After about an hour of not seeing anyone or anything we came across the first signs of civilisation. \n\nThe river here was wider and only about knee deep. To the right there was a fenced off field with some cows grazing. In the distance the sound of a dog barking could be heard. We continued, but soon hit an obstacle. It was a steep waterfall and with our sandals it would've been foolhardy to even attempt to climb it. This was as far as we would get today so we decided to settle down for some food and rest.\n\nWe ate in silence, enjoying the sights and sounds of nature. When we were done, I said \"I wouldn't mind having a nap but lying on rocks isn't appealing, let's move to that sandy patch we passed earlier.\"\n\n\"I'm all for it\" replied Mia.\n\nWe packed up and started heading back the way we came. The small beach I'd noticed was just before the fenced field, upon closer inspection it was even better than we thought, and the soft sand was perfect for lying on. It was very comfortable, and we soon fell asleep.\n\nI woke with a start when I heard Mia shriek loudly. I jumped up quickly and then began to laugh as I saw the reason for her panic. A beautiful border collie was excitedly licking her face and wagging its tail. I reached over and pulled the dog off her by its collar. It turned its attention to me and tried to lick and jump up.\n\n\"Take it easy\" I said as I stroked its silky coat. Mia sat up and said \"God, he gave me a fright!\"\n\nI laughed, \"your scream scared the hell out of me!\"\n\nThe dog calmed somewhat as we both petted it. I released its collar and it stayed still enjoying the attention it was getting. We were so focused on the dog we didn't notice its owner approaching until we heard him speak. We spun around at the sound of his voice and the dog briskly went to his side before sitting down.\n\nThe man looked like a caricature of a rugged mountain farmer. He was small and stout with longish unkempt hair and a wild bushy beard. It was hard to guess his age, but I guessed he was over fifty. He was smoking a small pipe and staring at us, or rather at Mia.\n\n\"Hello!\" I said as I stood up.\n\nHe glanced at me and nodded before returning his attention to Mia. I followed his gaze and could see why. She looked stunning kneeling in the sand with one arm raised to shade her eyes. Her bikini was dry so it wasn't transparent, but much of her body was exposer and you could still clearly make out the two large bumps of her nipples. I felt my cock twitch as I saw him looking at her almost naked body.\n\nI was trying to think of something else to say when he spoke again. I couldn't understand a word and looked at Mia. She shrugged and then said in German \"I'm sorry, we don't understand you.\" \n\nHe grunted and puffed on his pipe before speaking again, this time more slowly and in German rather than the local dialect. I still struggled to understand everything, but could guess he was asking if we were camping nearby.\n\nMia replied and said \"No, we're staying further down the river.\"\n\nHe nodded and grunted again puffing on his pipe and never taking his eyes off Mia. After an uncomfortable silence Mia said, \"do you live here?\"\n\nHe nodded and grunted again indicating the field with the cows. I could see Mia was blushing and starting to feel uncomfortable under his penetrating gaze. I decided to try and distract him and said in my best German \"You have a lovely dog.\"\n\n\"His name is Bello.\" He said.\n\n\"Can I pet him?\" Mia asked.\n\nThe farmer nodded and Mia used both hands to slap on her thighs while saying \"Here Bello, come here boy.\"\n\nI think she was trying to get some cover from the dog, but her actions inadvertently gave the old guy a lovely show of her big nipples jiggling around beneath the thin fabric of her bikini. I felt my cock harden further and began to panic that I'd soon be pitching another tent in front of our unexpected visitor. Things got even worse as Bello suddenly rushed forwards, launching himself at Mia. She was surprised by his onslaught and lost her balance tipping over onto her back.\n\nShe squealed and tried to get back upright, but Bello, thinking it was a game, pushed further and continued to try and nuzzle her. I could see her long legs scissoring as she tried to sit up and could tell our farmer was enjoying himself. He was holding his pipe in his hand and staring open mouthed. This all happened in seconds and I took a moment to react. When I finally moved, I grabbed Bello's collar and pulled him off Mia.\n\nThe scene before me made my cock instantly erect. I was glad to be bending over as in this position it wasn't as obvious. Mia was lying spread-eagled on the sand and breathing deeply, her face was wet with Bello's saliva and during the struggle her bikini top had been pushed up revealing both her breasts and her huge and very hard nipples. \n\n\"Are you alright?\" I asked.\n\nTo my relief she sat up and said, \"I'm OK, I just wasn't expecting that!\" \n\nShe hadn't realised her breasts were exposed and I quickly said \"Um, you might want to cover up\" nodding towards her chest.\n\nMia gasped as she looked down and saw what had happened. She quickly pulled the top down and with shaking hands, clumsily tried to tuck her nipples back under the small triangles. Her face and chest were flushed with embarrassment and I felt sorry for her. When she finally had some semblance of cover restored, she crossed her arms in front of her chest and sat still.\n\nThe farmer just stood and stared. After an uncomfortable silence he said a few words and Bello rushed to his side again. My erection was still throbbing in my shorts, and I knew it would be very obvious if I stood up. However, I couldn't just stay sitting here letting him leer at Mia. I said \"We should be getting back now. It was nice to meet you.\" \n\nI hoped he would get the hint and leave, but he just grunted and nodded again. I decided we had to go and took Mia's elbow helping her to stand. Without looking down I could tell my cock was pushing out the loose fabric of my trunks, but I ignored it and released Mia to pick up my backpack before putting my arm around her and guiding her forwards, past the famer and his dog. \n\nI saw him glance at my crotch and could detect a smile beneath his beard. He turned to watch us go and I knew he was enjoying the site of Mia's totally exposed backside wobbling as she walked over the uneven surface. When I looked down, I was dismayed to see that my erection was very obvious and that it was seeping again. This time the stain was even larger, and the wet fabric had moulded itself to my cock head, making its contours and shape clearly visible.\n\nWhen we were about 10 metres away, I looked over my shoulder and could see him and the dog still standing in the same position watching. After a while Mia lowered her arms, I could see one nipple was still exposed so I reached over and tugged the triangle into place. We carried on walking in silence and about 10 minutes later she said, \"I'm so sorry Liam\" in a quivering voice.\n\nI froze and looked at her in shock. \"What are you talking about?\"\n\n\"I don't know what you must think of me after that.\"\n\n\"I think I love you even more than before!\"\n\nShe looked at me in surprise, \"but I exposed myself to that man!\"\n\n\"That was an accident, you didn't do it on purpose!\"\n\n\"I know but if I hadn't been wearing this bikini it wouldn't have happened.\"\n\n\"And I encouraged you to wear it. Stop blaming yourself, if anyone should be ashamed it's me!\"\n\nShe looked confused \"What do you mean?\"\n\n\"Well look at me, I got bloody excited!\"\n\nShe glanced down and noticed my erection, \"why are you hard?\"\n\n\"I don't know, somehow seeing that guy looking at you got me excited!\"\n\nWe stood staring at each other in silence before she began to laugh.\n\n\"Hey, don't laugh at me, it's embarrassing!\"\n\n\"I'm not laughing at you; I'm laughing at us! We're both so alike!\"\n\n\"What do you mean?\"\n\n\"I mean I'm so horny right now I think I'd come if you just touched me!\" To illustrate her point, she pulled down her bikini bottom and showed me her damp and dripping pussy. It looked puffy and pink and I couldn't resist dropping to my knees and burying my face in it. She smelled and tasted wonderful and, as promised, came almost instantly when my tongue flicked over her clitoris. \n\nAfter recovering from her quick orgasm, she sank to her knees and told me to stand up. I did so and watched as she pulled down my trunks and swallowed by cock to its hilt. I gasped and she began bobbing her head back and forwards. I felt my climax approaching rapidly and grunted loudly as the first of three loads exploded into her mouth. When I was done, she released my shrinking cock and I sank down next to her and held her tightly. ",
        "\"I keep meaning to ask you where you learnt to give such amazing blowjobs?\"\n\nShe smiled and said, \"I practiced for years with a banana and your penis is almost the same!\"\n\nI laughed and kissed her again \"Well, I'm thankful to all those fruits!\"\n\nWe stood and walked into the water to wash off the traces of our lovemaking. When we were done, we put on our swimwear and continued the journey home. I said, \"can you imagine if that guy had followed us and watched?\"\n\n\"Stop it Liam, you'll get me all excited again!\"\n\n\"Ah ha, so you'd like him watching us?\"\n\n\"NO! Yes, I don't know, maybe. Just stop, please!\"\n\n\"Don't be embarrassed, I think it would be hot being watched!\"\n\n\"What's wrong with us?\"\n\n\"Nothing, I just think we've suppressed our sexuality for so long and now that we've discovered it we want to show off.\"\n\n\"I suppose that could be it\", she said thoughtfully.\n\nWe walked in silence until we reached the cabin. After a rest we made dinner then relaxed in some sun chairs we'd found stored in the cabin. We both kept our swimwear on and, despite the sun going down, it was still warm enough not to need any further clothing. Since our encounter with the farmer and his dog we hadn't seen anyone else. \n\n\"How about another swim before bed?\" \n\n\"OK, where do you want to go?\", Mia asked.\n\n\"In the pool here, or if you want, walk to one of the bigger pools we found this morning.\"\n\n\"I wouldn't mind swimming properly, so let's go to a bigger one.\"\n\nWe both stood up and, much to Mia's surprise, I removed my swimming trunks. \"I thought you wanted to go swimming?\" she asked.\n\n\"I do, but I'm going naked! Will you to join me?\"\n\n\"I'll join you for the swim but I'm not sure about the naked part! What if we meet someone again?\"\n\n\"I really doubt we will, apart from the farmer we haven't seen anyone all day. Anyway, it'll be fun and exciting! I'm going to leave my trunks here so I can't chicken out.\"\n\nMia looked unsure, but I could tell she was also excited by the idea. \"You don't have to do it if you don't want, I just really feel like being a nudist for once in my life!\"\n\n\"It does sound exciting but what if we get caught?\"\n\n\"So what? They won't know who we are and it's not illegal.\"\n\nShe considered it for a moment longer and then, to my delight, reached behind her back and undid the clasp of her top and pulled down her bikini bottoms. She placed her bikini on my trunks. \"OK, let's go!\"\n\nI smiled and took her hand. We walked along and it felt fantastic being naked in the wilderness. \n\n\"This is great, I feel so free!\"\n\nMia laughed and said \"I was thinking exactly the same thing. Even though we weren't wearing much before, having nothing but sandals on feels totally different. I love it!\"\n\nAfter about half an hour we reached one of the largest pools. The light was wonderful, and I watched in awe as she walked into the water. \"Damn, I wish I had my camera along, you look so amazing!\"\n\n\"You can bring it next time, I'm sure we'll be doing this again! Come in, it feels great!\"\n\nI walked into the pool and she was right, it felt different and much better swimming naked. We both loved it and Mia began splashing me, which started a water fight. We were both laughing and behaving like children. After spending at least half an hour in the water, we'd had enough. As we exited the river I pointed at a large flat rock \"do you want to lie on that and dry before we go back?\"\n\nMia walked over to the rock and placed her hand on it, \"it's still warm!\" She carefully sat down and stretched out on her back. \"This is nice!\"\n\nI went to join her. It was very relaxing feeling the heat on our backs. Mia took my hand and said \"Look at us! Before today we wouldn't even get changed around other people and now, here we are, lying naked outside without a towel and far from any clothes!\"\n\n\"Yes, and I feel better than ever!\"\n\nMia said \"Have you ever thought of being naked around others? I mean at a nudist beach or a sauna for example.\"\n\nI shook my head and said \"No, just the thought of it would have caused me to panic! What about you?\"\n\n\"Only in nightmares! I remember having a recurring dream that I was walking naked on a nudist beach and then someone would shout and point at me and everyone on the beach would turn to look at me and start laughing.\"\n\n\"God, that's horrible!\"\n\n\"It was. But now, lying here and thinking about it, I think I'd actually like to try it.\"\n\n\"Really? I mean, it feels great here and everything, but I don't know if I could do it with others around.\"\n\n\"Why not?\"\n\n\"Well for starters, what I if had an erection! I told you seeing that farmer look at you got me excited, imagine what it would be like with a whole bunch of people seeing you naked!\"\n\nMia laughed, \"I suppose that would be a problem!\"\n\nOur conversation was interrupted by the sound of a dog barking in the distance. Mia said, \"do you think that's Bello again?\"\n\n\"I don't know, it could be.\"\n\n\"Do you think he's close by?\"\n\n\"Hard to tell.\"\n\nWe heard another bark and it sounded closer. This was followed by someone whistling and then silence. \"Do you want to go?\" I asked.\n\n\"Not really, it's so nice here. Maybe they've gone.\"\n\nI had my doubts but didn't say anything. We sat there listening but didn't hear any further sounds. After a few minutes I relaxed.\n\nI said, \"I wouldn't be surprised if it was the farmer again, maybe he's out looking for another glimpse of you!\"\n\n\"What shall we do if someone comes?\" she asked.\n\n\"Um, not much we can do. We can't really hide! The dog would find us in an instant. Running isn't an option either, so I suppose we'd just have to stay sitting here or go into the water.\"\n\nBefore Mia had a chance to answer we heard rustling in the bushes behind our rock. We turned to look just as Bello emerged from the undergrowth. He instantly saw us and bounded onto the rock wagging his tail and barking. \n\nWe both sat up and petted him. I said, \"you realize the farmer's probably not far behind. What do you want to do?\"\n\nMia stood and said \"I'm going for the water option\" before quickly walking into the pool.\n\nI followed her and we were soon both submerged up to our necks. Bello wasn't impressed and stood on the bank barking. I tried to quieten him and even coax him into the water, but he refused to do any of it! It wasn't long before we heard another whistle, closer and Bello rushed off in the direction of the sound.\n\n\"Do you think he'll come back?\" said Mia.\n\n\"Probably.\"\n\nWe decided to stay in the relative safety of the water and swam around in the pool. Bello suddenly reappeared on the Bank followed by the sound of voices and approaching footsteps. \n\nI said \"Shit, there are more people!\"\n\nMia was looking worried now and I was really regretting my idea of leaving our swimsuits behind. I said, \"Let's not panic, you can't see much through the water and we can just stay in until they leave.\"\n\nMia nodded but I had doubts about my plan as I recalled the farmer refusing to budge the last time we met. \n\nTwo figures emerged from the trees and I was somewhat relieved to see it was the farmer and an older woman, presumably his wife. They headed directly the edge of the pool and stood looking at us.\n\n\"Hello again\" I said in German.\n\nThe old man nodded in greeting and said something to the woman in the local dialect so both Mia and I couldn't understand. To my dismay they just stood there staring and I wondered how much they could actually see. Turning to Mia I whispered, \"let's swim around a bit and not just stand here. Maybe they'll leave.\"\n\nShe nodded and we swam to the furthest point from our visitors. It was only about 8 metres away, but at least it put some distance between us. The couple were talking to each other and then turned and began to walk away. My relief was brief as they stopped a short distance away and the woman removed two large towels from a bag and placed them out on the ground. \n\nI looked at Mia and said \"Crap! It looks like they're planning to stay!\"\n\nShe nodded \"at least they're not just standing there staring at us.\"\n\nShe was right. If they came into the water, we could use the opportunity to leave and the most they'd see were our behinds. Turning to face them, I was shocked to see that they were changing their clothes right there! The farmer had already removed his shirt, revealing a barrel chest covered in grey hair and was untying his boots. The woman wasn't far behind and after undoing a few buttons wiggled out of her loose dress. She was wearing a matching set of rather old-fashioned looking underwear which displayed an impressive amount of cleavage as she bent over to pick up her skirt.\n\nI wanted to look away, but the sight of the two of them undressing so casually was just too compelling to ignore. I glanced at Mia and saw she was also watching in fascination. The farmer loosened his pants and let them drop to the ground. Both were now just in their underwear and I thought for a moment they would enter the water like that. But I was wrong, and to my surprise, the man tugged down his underwear and dropped them on top of his other garments. \n\nHe stood there unashamedly, watching as the women first pulled off her panties, then unclipped her bra, releasing a set of enormous, hanging, breasts. I expected them to put on some swimwear, but was once again proven wrong, as they just headed for the pool naked.\n\nWhat a sight it was! A hairy, short, bearded man with a stubby uncircumcised penis perched on top of a large set of balls swinging between his legs, next to a slightly overweight woman with huge breasts hanging almost to her stomach and swaying with every step. She had wide hips, thick thighs and legs and her sex was obscured by a very large, untrimmed, triangular bush.\n\nI turned to Mia, \"do you want to go?\"\n\nShe looked rather stunned but nodded and we swam towards the bank slowly. Our plan changed as the couple waded towards us and the woman said, \"I hope you don't mind us joining you? We swim here every day in the summer.\"\n\nMia and I stopped swimming and I said, \"no problem, we were just leaving anyway.\"\n\nShe looked disappointed and said \"Oh no, please don't go. We meet so few people here and would love some company. My name is Elsa, and this is my brother Hans\". She stuck out her hand and I was forced to stand and shake it. \n\nI was grateful the water was more than waist deep, \"Um, hello, I'm Liam and this is my girlfriend Mia.\"\n\nI turned to Mia who was still submerged up to her neck. I was thinking about how I could spare her the embarrassment of standing up, when she surprised me by doing just that. She rose out of the water, stepped forward and shook Elsa's extended hand. I felt my cock harden at the sight of water dripping off her very erect nipples and knew I wouldn't be able to leave the pool now! \n\nElsa turned to her brother, \"stop staring at the girl and say hello properly!\"\n\nI looked at him, and he was staring at Mia's exposed breasts. I tried to see if he was as aroused as I was by her nudity but couldn't see clearly through the water. Mia stuck her hand out towards him, \"nice to see you again.\" \n\nHans took the extended hand and shook it without once taking his eyes off Mia's breasts. When he released her hand, I extended my own and said \"Hello Hans.\"\n\nHe shook my hand but didn't avert his gaze from my girl's breasts. Elsa said \"You'll have to excuse my brother. He's a bachelor and has lived here all his life. He's not used to visitors. So, will you stay and keep us company?\"\n\nI looked at Mia and she nodded, \"Yes, we can stay for a bit.\"\n\nElsa was overjoyed, \"Oh wonderful! Tell me, where are you from? How long and where are you staying?\"\n\nMia laughed and answered the barrage of questions \"I was born in Germany and my mother is Japanese and my father is German. Liam is from England but lives and works here. We're staying in the cabin near here for five days.\"\n\nI tuned out of the conversation between the ladies and watched Hans. He was still staring at Mia and she seemed to be enjoying the attention! I noticed her straighten her back pushing her small breasts as far forwards as possible and her nipples seemed to be even larger than before. I was pretty sure Hans would be erect and my cock grew even stiffer as I imagined him seeing the rest of Mia's body. \n\nI decided to try and engage him in conversation, \"so, Hans, you've lived here all your life?\"\n\nWithout looking at me, he answered \"yes.\"\n\n\"I'm sure you can give us some tips for the best places to visit. We've only been upriver up to the point where you have to climb a large waterfall.\"\n\n\"Yes.\"\n\nThis conversation was going nowhere, and I gave up, turning to look at Mia and Elsa as they spoke. Elsa's breasts swayed and wobbled as she spoke and gesticulated. You couldn't have found two more different examples of female breasts and nipples. Elsa's huge hanging breasts were topped by large areolae, light pink in colour with a small flat nipple in their centre versus Mia's tiny bumps topped with huge dark coloured nipples. I could imagine it being fun to play with Elsa's large mounds, but I found Mia's far more appealing. \n\nI lifted my eyes when Mia turned to me, \"maybe we'll do that tomorrow Liam?\"\n\nI had no clue what she was talking about but said, \"yes, it sounds good!\" \n\nElsa turned to Hans and said something and they both moved deeper into the water. I said to Mia \"Do you want to leave now?\"\n\nI was still in no condition to leave the pool and was somewhat relieved when she said \"No, let's stay a bit longer.\"\n\nWe turned and followed Elsa and Hans. Mia seemed in a playful mood and I felt her give my hard cock a quick tug as she passed by. She smiled at me and then dived down, surfacing further ahead and rolling onto her back. Her large nipples broke the surface and pointed at the sky. I watched in fascination as her smooth pubic mound briefly appeared when she kicked her legs to remain afloat. Her whole body was on display, and both Hans and I couldn't take our eyes off her. Elsa also took a good look, but soon turned away and drifted off. After a few minutes Mia rolled over, this time her perfect arse rose up before she dived below the surface again.\n\nI could see her naked form moving below the water and watched as she swam past. She surfaced and embraced me from behind. I felt the entire length of her body pressing against mine, especially the hard points of her nipples as they poked into my back. She whispered, \"did you enjoy that?\"\n\nI nodded dumbly and felt her hand as it briefly brushed against my straining cock. \"Me too!\". Giggling, she gave my ear a brief lick. I wondered how far she was going to take this teasing and looked at Elsa and Hans. Hans was still in a stupor and Elsa had a wistful expression as she said, \"it's so nice to see young love.\"\n\nMia asked, \"are you married Elsa?\"\n\n\"My husband passed away six years ago, that's when I moved back here to the family farm.\"\n\n\"I'm so sorry, do you any have children?\"\n\n\"Yes, a daughter. She lives in Australia and I haven't seen her for many years.\"\n\n\"So just the two of you and Bello live on the farm?\"\n\n\"Yes.\"\n\nShe briefly spoke to Hans in dialect and then said, \"would you like to come for dinner tomorrow?\"\n\nMia looked at me and I shrugged, so she said \"Yes, thank you, that would be lovely.\"\n\nElsa smiled, \"wonderful, we can meet here at the pool around 5 o'clock and then we can show you the way.\" She turned to Hans and said something we couldn't understand again before making her way to the bank. Hans looked somewhat perturbed and, for the first time since they arrived, took his eyes off Mia and turned to his sister before replying.\n\nElsa laughed loudly, \"he's embarrassed to leave the water because he's aroused!\"\n\nMy shock at her blatant statement quickly turned to mortification as Mia laughed, \"Liam is the same!\"\n\nElsa shook her head, \"men are such children sometimes!\" Before switching to dialect and saying something to Hans. \n\nAs Hans reluctantly began moving to the bank, Mia took my hand and pulled me in the same direction. I briefly considered refusing to move but then thought I would look like even more of a fool.\n\nElsa continued on her way and soon her very large, but still firm, posterior emerged from the water. It jiggled nicely as she made her way up the uneven surface of the bank. When she reached the top, she turned and waited, as the three of us followed.\n\nHans was moving slowly, and we quickly caught up to him. His eyes were again fastened on Mia as more and more of her body was revealed. My own penis was as hard as ever, and I was both excited and ashamed at the thought of it being revealed to Elsa and Hans in all its glory. After a few more steps it happened. I felt my cock bob slightly as it broke the surface. I looked over at Mia and saw her staring at it with a smile on her face. I blushed and, looking at Hans, noticed that due to his short stature, his crotch was still underwater. \n\nI had a moment of panic thinking what if he's flaccid and I'm the only one with an erection! A few seconds later my fears were proven unfounded as first the tip and then the rest of his surprisingly large and thick penis appeared. His manhood was straight and although shorter than mine, boasted greater girth and stood almost vertical in contrast to my horizontal and curved organ.\n\nWithout planning to, we all froze and gazed at each other's bodies. I noticed Mia seemed to be looking back and forth comparing the two hard cocks. \"Come on you lot, don't just stand there!\" exclaimed Elsa and we began to move in her direction again. She had a big smile on her face and was openly staring at us as we approached.\n\nIn her direct manner she said, \"It's good to see such healthy males again! I haven't seen Hans like that for many years!\"\n\nI blushed and Hans grunted before sitting down on his towel. He was still staring at Mia but this time his attention was focused on her shaved pussy. His penis was standing up tall and, considering how old he must be, I was quite impressed by his stamina. Elsa asked, \"where are your things?\"\n\nMia looked a bit embarrassed, \"we didn't bring anything!\"\n\nElsa laughed, \"Ah, real nudists!\"\n\nMia blushed, \"no, actually this is the first time we've ever been naked outdoors. We didn't bring anything because we wanted to make sure we didn't chicken out at the last moment! \"\n\nElsa laughed and even Hans had a chuckle. \"Would you like to use my towel?\" she asked.\n\nMia shook her head, \"no thanks, we'll just lie on that large rock to dry.\" She took my hand and pulled me towards the rock we had previously occupied. I could feel Elsa and Hans staring at our backsides as we walked the short distance. Mia lay down, and I stood hesitating. \"Come on, they've already seen everything!\"\n\nI realised she was right and took my position next to her. Lying down, my cock stood, waving proudly in the gentle breeze. I looked over and watched as Elsa dried herself with the towel. She rubbed and lifted those humongous breasts and then rubbed the towel vigorously between her legs. Hans had turned to face us and was sitting with his legs crossed. I could still see the tip of his penis poking up between his legs. As the rock we were on was slightly angled in his direction, he had a view directly up between our legs.\n\nMy cock throbbed and I felt some pre-cum leak from its tip. I whispered to Mia, \"I dare you to spread your legs a bit.\"\n\nShe turned to me and gave me a sly smile. I watched in fascination as she lifted one leg to scratch her knee, before lowering it again with her leg slightly bent and her feet further apart. I knew Hans could see everything and saw him lick his lips. Mia was also excited by her exposure and was gently chewing her lower lip. I was desperate to rollover and push my cock deep into her and hoped our new friends would soon leave.",
        "I must have transmitted my urgency to Elsa telepathically as when she finished drying off, she looked at Mia and me and then said something to Hans. He slowly stood and, without looking away, picked up his towel and gave himself a quick wipe. His cock hadn't softened and only bobbed about slightly as he moved. When he was done, he put on his underwear and I could see he had a far easier time wearing clothes with an erection than I did. His cock just poked up above the waistband and was hardly noticeable.\n\nElsa was also dressing, and we were treated to the sight of those massive breasts hanging down as she bent to pick up her things. They swung and bounced off each other as she moved and it was spellbinding to watch as she put on her bra and, with practiced ease, managed to restrain them in the sturdy garment. When they were both clothed and booted, Elsa packed the towels into her bag and wished us a good evening.\n\nHans nodded and waved. I could tell he would have liked to stay longer as he whistled at Bello and grudgingly followed his sister. Before the three of them disappeared into the undergrowth, Elsa turned and called \"remember to be here a 5 o'clock tomorrow!\"\n\nAfter about 30 seconds, Mia said \"oh god, that was so hot!\" \n\nShe turned to face me, and I could see juices from her leaking pussy glistening on her thighs. \"I need you now! Do you think they've gone?\"\n\nWithout waiting for an answer, she moved and straddled me. She positioned herself so that my curved shaft was pushing against the outside of her pussy. I could feel the heat radiating from within her and the feeling intensified as she reached down and pulled her lips apart. The heat was joined by moisture as my shaft slotted into the cleft. I moaned as she began a gentle rocking motion, making my cock slide up and down.\n\nShe leant forwards, increasing the pressure on my cock and I could feel the hard nub of her clitoris as it rubbed against the sensitive skin beneath my glans. It was amazing! \"That feels fantastic but you better slow down or it'll be over soon!\"\n\nInstead of stopping, she pushed down harder and moaned in ecstasy as her orgasm hit. I barely managed to hold back my own climax as I felt a gush of liquid hit my shaft and drip down onto my balls. Mia froze and breathed deeply. When she recovered, she sat up lifting her hips slightly and guided my cock into her opening. We both watched as my shaft slowly disappeared into her hot clenching tunnel.\n\nI released a breath I hadn't realised I'd been holding as she began rocking back and forwards. I could feel my cock bending within her and it was wonderful. She began to gasp and then made the squealing sound I loved so much. I reached up and grabbed her nipples, pinching and pulling them in sync with her movements. Her squeals became louder and I knew we both wouldn't last much longer. \n\nA bark from nearby made us freeze and we stared at each other in shock. We were so close, there was no way we could stop now. Mia began moving again, now at a faster pace. Her moans and squeals resumed and soon turned into a long drawn out scream as she orgasmed again. This was it for me as well and, after a few thrusts of my hips, I grunted loudly and let loose what felt like a torrent of sperm deep within her. Mia collapsed onto of me and we lay there panting together. I wasn't sure, but I thought I could detect some rustling in the nearby bushes.\n\nWe lay there blissfully for many minutes until Mia lifted herself slightly and we kissed. \"Oh Liam, that was fantastic. I've never had an orgasm like that before!\"\n\nI smiled and said \"Yeah, it felt pretty good for me too.\"\n\nI could feel her pussy still twitching and squeezing on my now softening penis and it wasn't long before it was ejected, followed by another gush of fluid. We both laughed at the sensation and I said, \"I suppose we better clean up and get home before it gets too dark.\"\n\n\"OK, but let's just stay like this for a moment longer, it feels so good.\"\n\nI had no argument with that and held her slender body tightly.\n\n\"Do you think they saw us?\" she asked suddenly.\n\n\"I don't know. After the bark I heard some rustling, but it could have been Bello or some other animal.\"\n\nShe surprised me again when she said, \"I hope they watched us. It made me so hot imagining they were.\"\n\nI didn't respond but squeezed her tightly. \"What did you think of Elsa's amazing breasts?\", she asked.\n\n\"They are massive, but I prefer yours and, by the looks of it, so did Hans!\"\n\nShe giggled, \"I feel sorry for him, all alone for most of his life.\"\n\n\"Well I think you made him feel a hell of a lot better today!\"\n\nShe looked at me with a worried expression and said, \"Do you mind?\"\n\n\"No, not at all, I loved it!\"\n\nI felt her wiggle and rub her body against mine, she was getting turned on again. \"Do you think Elsa and Hans have sex together?\"\n\nI really hadn't thought about that possibility, \"I have no clue, maybe. They did seem comfortable being naked together and living out here for so long with no one else around must be difficult.\"\n\n\"Yes. But when you and Hans came out of the water, she said she hadn't seen Hans like that for a long time.\"\n\n\"You're right! I remember thinking it was a strange thing to say. Elsa is very direct!\"\n\n\"I love the way she just says what she thinks. I suppose growing up on a farm makes you see sex as what it is, something completely natural and normal.\"\n\nI nodded in agreement and then gave her a light smack on the bottom. \"As much as I'd like lying here like this forever, we really have to get going or we'll be walking in the dark.\"\n\nMia moaned, but then rolled off me and we both stood up. Looking at our rock I could see a large wet patch. \"Look at the mess you made!\" I said jokingly.\n\nMia laughed and punched my shoulder playfully, \"Hey, some of it's yours!\"\n\nWe walked back into the pool and quickly washed off the traces of our love making. It was really starting to get darker and we made our way back along the river bank as quickly as we could. When we arrived back at the cabin it was already hard to see and we were glad we hadn't waited any longer. Both of us were tired and after using the bathroom we collapsed in bed and quickly fell asleep.\n\n***\n\nDay 2: We rose at dawn the next morning and it was another beautiful day. After a hearty breakfast, during which I admitted that I didn't know what she and Elsa had spoken about yesterday, Mia explained what Elsa had told her. Further down, the river merges with another and if you follow this other river to its source you come across a small lake fed by a waterfall. The lake is surrounded by forests but has a nice sandy bank where you can barbeque and sunbathe. \n\nIt's considered the local naturist site and many people that visit are nudists looking for a place to be naked away from the crowds. As it's quite hard to get to and not well known, there are never many people. It sounded great and after yesterday's experience of swimming naked I was more open to trying the nudist lifestyle even if there were others present.\n\nAs we prepared to go, we decided to wear clothes and footwear more suitable for a long hike. It would take between 2 to 3 hours to get there and the terrain would sometimes be difficult. We packed some food for lunch and two towels to lie on. I held up my swimming trunks and asked \"What's the plan, are we taking swimwear?\"\n\nMia shook her head \"I'm not bringing any. If we swim, I want to do it naked.\"\n\nI smiled and threw my trunks away \"I'm glad to hear that, I'd be happy never having to wear those again!\"\n\nWe were ready to go and, after locking up, followed the trail that ran parallel to the river. It was easy going at first and we soon found the point Elsa had described where the two rivers joined. The trail heading upriver started off flat, but soon got steeper and steeper. In parts you had to almost climb, and we lost the trail a few times, before finding the red/white markings that indicated we were going the right way.\n\nWhen we'd left, the temperature had been very pleasant but now, two hours later it was getting hot. During a break, I stripped off my shirt and stuffed it into my backpack. Mia looked at me and said, \"I wish I could do that.\"\n\n\"Why don't you? We haven't seen a soul and if this is considered a nudist hot spot, I don't think anyone would be too shocked seeing a topless woman!\"\n\n\"You're right, I've still got to get used to this!\" \n\nShe stood and pulled off her T-Shirt. She wasn't wearing a bra and I wiggled my eyebrows and licked my lips as her breasts were revealed. She laughed seeing my reaction, \"behave yourself, we've still got some walking to do!\"\n\nWe were both dressed in nothing but shorts and when she put her backpack on and adjusted the straps so they weren't chafing her nipples I couldn't resist taking a few shots with the camera I'd remembered to pack this time. Mia struck a few poses and I knew the shots would be great. I felt my cock swell as I imagined sharing the pictures with others.\n\nWe continued walking and, after almost an hour, emerged from the tree line to find the lake. We both stopped barely able to believe the beauty of the landscape laid out before us. The lake had two small islands each with a couple of trees and what looked like sandy shores. At the far end we could see the waterfall as it cascaded into the lake, it was about 10m wide and fell from a height of 30 to 40m.\n\nWe decided to follow the shoreline and get as close to the waterfall as possible. It took about 30 minutes before we reached a place that looked ideal. It was a large flat grassy clearing with a sandy bank leading to the lake. You could see and hear the waterfall and one of the small islands was within swimming distance. There were a couple of fire pits and we chose to settle near the one closest to the water. \n\n\"Before we do anything else, I want to swim!\" said Mia.\n\n\"I agree!\" I said as I dropped my backpack and removed my hiking boots and socks. All that was left were my shorts and I quickly disposed of them. I watched Mia as she undressed and knew it was something I would never tire of seeing. When she was naked, she walked towards me adding an extra wiggle to her step. My penis grew in appreciation and she gave it a small smile. Taking my hand, she pulled me after her across the sandy bank and into the water. \"Eeiiii\" screamed Mia jumping back as her feet touched the water. \"It's freezing!\" she complained.\n\nI laughed and waded in up to my knees. The water was colder than the other river, but I soon got used to it. \"Come on, it's not that bad. You'll quickly get used to it!\"\n\nShe looked at me doubtfully \"You go ahead then.\"\n\nI turned and walked a bit further before diving in. I gasped from the initial shock, but after a few seconds of swimming it was OK. The edge of the lake was quite shallow, and I stood up turning to Mia \"It's really OK.\"\n\nMia laughed, \"I think it's colder than you're saying, look at your penis!\"\n\nI looked down and couldn't help laughing at myself. My cock band balls had shrivelled and looked rather pathetic. \"Are you going to join me or not?\"\n\n\"I will but I'm going to go slowly.\"\n\n\"OK!\" I turned and waded further out, I could feel the ground begin to slope more steeply and then there was a sudden drop. I was forced to swim and dove down to see how deep it was. \"It's pretty deep here so be careful!\"\n\nMia was in up to her thighs and I could see she had goose pimples on her arms and her nipples were erect. She stopped and lowered herself until just her head was above the water then she jumped up squealing. I loved watching the water stream down her body and drip of the ends of her nipples and, despite the cold I felt things growing down below. Mia took a deep breath and then dived into the water swimming below the surface until she reached me. She stood and the water just covered her belly button. \"it's cool but feels good now.\"\n\n\"If you go another few steps there's a drop off and I don't know how deep it is.\"\n\n\"OK, shall we try swimming to that island?\"\n\n\"Sure.\"\n\nWe began to swim in the direction of the closer of the two islands. After about 5 minutes I could see ground beneath us and after a few more strokes we could stand. The ground was rocky and uneven making it a bit difficult to walk on. I took Mia's hand and we helped each other get onto the shore. There was a single fire pit and a small cluster of trees. We were now close enough to the waterfall to feel small water droplets and it felt very refreshing. Mia said \"Oh, this is so nice! Do you think we should move here?\"\n\n\"It's great, but I think it'll be a problem keeping our things above the water when we swim and there isn't enough wood here for a decent fire.\"\n\n\"I suppose so, pity, next time we'll need to bring an air mattress or something!\"\n\nI moved over to Mia and took her in my arms, \"I've always dreamt of being stranded on a desert island with a beautiful naked woman. I know we're not stranded and it's not a desert island, but the beautiful naked woman part has come true.\"\n\nShe smiled, \"so, what happens in this dream of yours?\"\n\n\"Well I seduce her with my good looks and charm, and we end up making passionate love.\"\n\nLaughingly she pushed me away and made a break for the trees \"Well, you'll have to catch her first!\"\n\nI liked the idea of a chase and gave her a small head start while enjoying the sight of her jiggling arse as she ran.\n\n\"Ready or not, here I come.\"\n\nShe squealed, ducked behind some trees and I began my pursuit. It felt funny running naked and I realised it was something I'd never done before. My cock and balls were swinging wildly and made a slapping sound when they collided. Mia had made a small circuit around the trees and was back in the clearing laughing as she watched me running towards her.\n\nI grabbed her and latched onto her nipple sucking it deeply. Her laughter turned to moans and she grabbed my hair, holding my head tightly. I switched to her other nipple, grasped her bottom and, pulling her cheeks apart, ran a finger through the parting until I touched her rosebud. She gasped and I felt her shiver as I rubbed my finger gently over the sensitive opening.\n\nI kissed her and when we stopped for air she said, \"take me like an animal!\" as she pushed me back, turned around and dropped onto all fours.\n\nI stood looking with lust at her exposed bottom and wet pussy until she wiggled her behind \"Hurry!\"\n\nWithout further hesitation, I moved into position and took my throbbing cock in hand. I swiped it up and down her slit, gathering as much lubrication as I could before pushing my tip into her tight opening. Once she felt me there, she pushed back and took half my length into her canal. She groaned in pleasure and I grabbed hold of her hips and pushed the remainder of my shaft into her. This position was ideal for my curved penis, and I achieved maximum penetration.\n\n\"Ohhhh, you're so deep!\" she moaned, and I could feel the entire length of my cock being squeezed by the rhythmic pulsing of her pussy. I withdrew slowly and then pushed in again. Mia started making the squealing sound I so adore. I repeated the motions of slow extraction and faster penetration until I heard her say \"Harder, faster\" between squeals.\n\nI began to speed up and then released her hips and leaned forwards to grab hold of her nipples. The change of angle increased the friction on my cock, and I began to grunt. I was sure the squealing, grunting and slapping sounds of our mating would carry over the water and could be heard all around the lake. Mia screamed, and her pussy clamped down so tightly I couldn't pull back. It felt like the entire length of my cock was being squeezed by a vice and the sensation of my semen forcing its way out was a mixture of extreme pleasure and mild pain.\n\nWe collapsed onto the ground panting and I felt the pressure on my cock slowly ease as she relaxed. My softening penis was released with a popping sound and I rolled off Mia onto my back. \"God, that was fantastic!\"\n\nShe mumbled something unintelligible and rolled over onto me. We held each other like this until things got uncomfortable. Mia stood first and I followed. We were both covered in sweat and dirt. Mia laughed, \"you look like a savage!\"\n\n\"I quite like the wild look on you!\"\n\n\"Let's swim to the waterfall. Elsa said you could stand under it.\"\n\n\"Lead the way.\"\n\nAs she turned, I could see her back and bottom covered in bits of grass, leaves and mud. She looked so good I almost wished we didn't have to wash off. I briefly imagined what life must have been like at the dawn of humanity when everyone looked like this and clothing hadn't been invented. Much like the first smartphone, the invention of clothing changed the way we lived and wasn't all good!\n\nWe swam the short distance to the waterfall and quickly felt rocky ground beneath our feet. It was tricky walking on the slippery and uneven surface, but it was well worth it. Soon we were standing under the pounding water and it was heavenly. Mia released her long hair and washed it. It was like a scene out of a movie and I couldn't believe how lucky I was to have her. Her sexy body appeared and disappeared under the cascading water and I again wished I had my camera to hand. \n\nWhen we emerged from the waterfall, we noticed smoke rising from the direction of our site. \"It looks like we have company!\" I said.\n\n\"I hope they're also naked otherwise it might be a bit awkward!\" said Mia.\n\n\"Well I'm starving so I don't care! Anyway, we can always put on our clothes if we want.\"\n\nMia nodded and we re-entered the lake. She left her long hair loose and it fanned out behind her as she swam. As we got closer, we could hear voices and I could make out four figures working on the fire in one of the pits. \n\nThere was quite a bit of smoke, which made it difficult to see if the group was naked. When we reached the shallows, we had no choice but to walk out still not knowing. Mia's hair looked amazing as it hung down to her buttocks and I told her as much.\n\nShe smiled and replied \"Thanks, but it's not very practical.\"\n\nThe smoke had cleared, and we could see 2 men and 2 women. They were all naked and hadn't noticed us yet. As we got to our backpacks and retrieved our towels one of the men looked over and waved in greeting. Mia and I waved back as the 3 others turned to look, also waving in greeting. I wasn't sure what the correct behaviour was in this kind of situation and said, \"Do you think we should go over and say hello?\"\n\n\"I don't know.\"\n\nThe question became irrelevant as one of the men made his way over to us. He looked to be in his early fifties and quite fit. Darkly tanned and with no visible tan lines it was obviously not his first nudist experience. As he got closer, I noticed that his genitals were totally shaved making his tanned uncut penis look very prominent. Once he was in range, he offered his hand to Mia and said \"Gruezi\" (which is a traditional greeting in Swiss German). Mia took the proffered hand and after a quick shake said \"Hello\" in German.\n\nHe turned his attention to me and after I shook his hand saying \"Hello\". He smiled and said in English \"Are you English?\"\n\nHis demeanour was totally different to Hans. Instead of staring at Mia, he'd given us both a brief once over and then kept his eyes above the neckline. I answered his question \"Yes, I am. My German must be really bad if you noticed after just one word!\"\n\nHe laughed, \"Not at all, I could just tell from the accent.\" He went on saying, \"I see you haven't made a fire yet. If you're planning to barbeque, you're welcome to share ours.\"\n\nI looked at Mia and she nodded. \"Well thanks for the offer! We're quite hungry and it would save a lot of time. As long as you're sure it's not an imposition.\"\n\nHe smiled and \"Not at all! Just come over when you're ready. My name is Peter.\" With that he turned and headed back.",
        "Mia said, \"He seems very friendly and it felt totally normal being naked.\"\n\n\"Yes, he doesn't stare like Hans, just acted as if there was nothing unusual at all. Not having to make our own fire will save a lot of time.\"\n\nWe finished off drying and took the bag containing our food to Peter and his group. As we got closer, I could see the other members of the group consisted of a woman of similar age to Peter and a young couple our age or slightly younger. They all stood as we approached, and I tried to emulate Peter's behaviour. It wasn't easy as my brief look had revealed that they were an attractive bunch of people. \n\nThe older woman, whom I presumed was Peter's wife or partner, was as tanned and hairless as him and I guessed her to be in her forties. Her small breasts were capped by raisin sized pink nipples and below her flat stomach her hairless pussy was just a slit with no visible inner lips. The younger girl was blond, lightly tanned and had faint tan-lines showing she sometimes wore a small bikini. The slightly lighter skin highlighted her quite large but firm breasts which were capped by very long thin pink nipples and her smoothly shaven crotch with a small slit. The young guy, also blond, was slim and totally hairless. Like the girl, you could see a faint tan-line below his waist until above his knees. His genitals were also totally shaven, and he sported a long, thin, uncut penis. \n\nWith my appraisal over, I tried to keep eye contact as Peter introduced us. In English he said, \"This is my wife, Iris and our children Monika and Andreas.\"\n\nIt was amazing to see a family so comfortable with being naked together. I tried to picture myself naked with my parents and just couldn't imagine it. I'd never seen my mother or father naked and imagined the same was true for Mia. \n\nMia said, \"I'm Mia and this is Liam\" as she shook hands with the three of them before I did the same. I noticed that the children weren't as practiced as their parents in the art of not looking. Their eyes wandered lower and lingered. They weren't as obvious as Hans, but Monika seemed rather interested in my crotch and Andreas in Mia's breasts. \n\n\"Thanks for letting us share your fire. We'll get out of your way as quickly as we can!\" I said.\n\n\"Nonsense, you're welcome to stay. We don't get the chance to meet new people out here often\", said Iris. As we waited for the fire to reduce to coals, we got to know each other. It turned out that Monika and Andreas are 19 and twins. They all live somewhere outside Zurich, but Peter grew up on a farm near here and they often visit for weekends and holidays.\n\nThe conversation moved to us, and Peter was fascinated in my work and Iris in Mia's Japanese heritage. Monika and Andreas didn't participate much, but I could see he was clearly still very interested in Mia. Every time I looked at him, I caught him watching Mia and I felt myself getting aroused. Things didn't improve when the topic moved to nudism and Mia explained that it was only our second experience of being naked with others.\n\nWhen Iris asked how our first experience at nudism had been, Mia told them about how we had met Hans and Elsa the previous evening. Growing up nearby, Peter knew them and said they were very down to earth people, but he could imagine their blunt honesty had been rather a shock for first time nudists. \n\nMia laughed, \"You're so right!\", to my horror she went on to say, \"Elsa even joked about the fact that Hans and Liam had erections when they came out of the river!\" \n\nI was embarrassed and blushing as everyone laughed. Peter said \"Sorry Liam, we're not laughing at you, just the story. It's typical of Elsa to say things just as she sees them. Having an erection is nothing to be embarrassed about! It's natural and happens to everyone on occasion.\"\n\nHis words eased my discomfort somewhat and when the men folk rose to begin cooking on the barbeque, I noticed that Andreas's long penis had swelled somewhat and while not qualifying as an erection was definitely firmer and extending further from his body than when we'd first met. Seeing him in this state and wondering if Mia was the reason, caused a similar reaction in my own organ. I concentrated on cooking and hoped my arousal would abate. The last thing I needed was to parade about with a full boner in front of this family.\n\nAt some point, I made the mistake of looking over to the ladies as they prepared the picnic area. Watching three beautiful women moving about and bending over while naked wasn't a good idea if you wanted to quash feelings of arousal and I felt my penis slowly begin to enlarge again. Peter nudged me, and I first thought I'd been caught, but then realised he was nodding towards Andreas. \n\nI looked over and could see that Andreas was ahead of me. His penis was already fully erect and pointing skywards, it seemed he was a \"shower\" and not a \"grower\" as it hadn't increased much in size compared to its flaccid state. Interestingly his glans was still totally covered by his foreskin. He noticed his father and me staring at him but continued to go about his tasks as if nothing was unusual.\n\nIt seemed erections were contagious! I noticed Peter's penis begin to twitch and extend as it lifted itself and stood firm. It was shorter but thicker than his sons and the glans also remained covered as rose. It wasn't long before the trio was complete, and I was also fully erect. Apart from being circumcised, I differed from the other two in that my cock stuck out horizontally with a downward curve, which meant I had to be especially careful around the grill.\n\nBarbequing in the nude was already strange enough, but the three of us standing here with boners and acting as if it was an everyday occurrence made it totally surreal. Our situation didn't remain unnoticed for long and we heard some laughter and giggling drifting over from the ladies. Iris even shouted, \"make sure you keep those sausages away from the heat!\" causing another outbreak of female mirth.\n\nWhen we were satisfied with the cooking, we loaded the food onto dishes and carried it to the picnic area. I could see that the men weren't the only ones showing signs of arousal as Mia's nipples were at their maximum size and I could even detect the giveaway glistening between her legs. Monika's chest was flushed and her already long nipples were even longer and a darker shade of pink. Her slit seemed swollen and somewhat moist. Iris seemed the least affected and apart from her nipples looking a bit swollen and darker I could see no other indicators.\n\nI took my place next to Mia, and she leaned over and whispered, \"It's so hot seeing you like this!\" as she gave me a peck on the cheek.\n\nAs we ate, Peter's erection dwindled, and his penis was soon totally flaccid again. The same can't be said for Andreas or me. He was still fascinated by Mia and took every opportunity to look at her chest and between her legs. She didn't seem to mind as she made no attempt to hide herself, in fact, it seemed more like she was positioning herself to provide him with the possible best view. Seeing his appreciation of my girlfriend, and the looks I (or rather my cock) was getting from Monika kept things rampant.\n\nAs we ate, the conversation moved to our plans for the next few days. Mia said, \"Apart from dinner today with Hans and Elsa we haven't really made any plans.\"\n\nIris said, \"It's a pity we're leaving tonight, we could have taken you to all the best places.\" \n\n\"That would've been nice.\"\n\nPeter said, \"If you want, we can walk down together, and I can give you a map and mark the best places to visit.\" \n\n\"We'd appreciate that but only if it's no problem for you.\" I replied. We agreed to leave the lake around 2 o'clock. It was much quicker getting back down so we should easily reach the pool by 5.\n\nAs lunch wound up, Iris said \"You youngsters go and explore, we can take care of cleaning up. Andreas and Liam should take care of things and cool down.\" She pointed at our still erect cocks and added \"it's not healthy to stay like that for so long.\" \n\nThe girls sniggered and Mia said, \"Yes, I'd hate for it to get damaged, I might need it later!\" Still laughing, they both turned and ran towards the lake. Mia's comment, and the sight of their firm backsides bouncing, did nothing to ease the pressure down below and after quick a look at Andreas we both chased after them.\n\nRunning with an erection was an even more enjoyable experience than just running naked. My cock got even harder and I had a primal urge to hunt down my prey and impale her on my lance. Is this what it had been like for early man? Did they roam the countryside in the hope of stumbling across females which they would then chase and impregnate?\n\nThe girls were already in the water by the time we reached the lake. I ran in and, as soon as it was deep enough, dived after Mia. She squealed and made a feeble attempt to escape but I soon grabbed her from behind. I spun her around and pulled her in for a deep kiss. Her hand grabbed my cock as it prodded against her tummy. If we'd been alone, I would've taken her right there in the water. Instead, we fought back the urge to continue and held each other before moving slightly apart. Mia took my hand and we turned to face our new friends.\n\nThey were both up to their elbows in water and staring at us with, what I can only describe as lust. Their hands were under the surface and I couldn't be sure, but it looked like they might be pleasuring themselves. Mia broke the tension and said \"Um, could you show us the other island? We've already visited the closer one.\"\n\nMonika laughed and said, \"I think you did more than visit!\"\n\nAndreas added \"We heard some interesting sounds from there as we were walking to the campsite!\"\n\nMia and I looked at each other guiltily and I said, \"Oh, um, sorry about that. We didn't know anyone else was nearby.\"\n\nAndreas said, \"don't apologize, it was hot\" and Monika nodded in agreement before adding \"I wish we'd been closer and able to see.\"\n\nI felt Mia squeeze my hand and wondered if she felt the same excitement at the thought we'd almost been caught. \n\nAndreas said, \"If you want to go to the other island it's better to walk along the shore first and them swim out, it's a bit far from here.\"\n\nWe agreed and the four of us walked out of the water. I cast a glance at Andreas and could see his penis had relaxed and was now swinging loosely between his legs. I wondered if it had been the cold water or his hand that had done the trick. For me the situation hadn't changed. Contact with Mia and the thought of being heard kept things hard. As we were walking Monika was more obvious in her observations of my cock and after a short distance said to Mia \"Can I ask you something personal?\"\n\n\"Sure, what is it?\"\n\n\"I've never had a man without a foreskin, does it feel different?\"\n\nI almost tripped over my feet when I heard her question, but Mia seemed to take it in her stride and didn't seem surprised. \"I don't really know! I've only had sex once with another man and it wasn't a good experience.\"\n\nWhat the hell is going on? Here we are, walking naked with what are basically two strangers and Mia was telling them her most intimate secrets. \n\n\"Oh, I'm sorry.\" said Monika.\n\nBeing twins must have meant brother and sister were on the same wavelength as Andreas turned to me and said \"Doesn't it feel strange to have the head exposed all the time? Mine is very sensitive.\"\n\nGrowing up in a nudist family must take away all inhibitions about sex, and it really seemed like they didn't think there was anything unusual about this conversation! \n\nI replied, \"Um, not really, but I can't remember a time when I still had my foreskin.\"\n\n\"What happened?\"\n\n\"When I was about 7, they removed it because it was too tight to roll back and was causing problems.\"\n\n\"Oh, is that also why it points forwards and down?\" Monika asked.\n\nBefore I could answer, Andreas said \"Don't be silly Moni, not all of them are the same shape. Some are straight, some curve, some point up and some don't\"\n\n\"I know they're not all the same, but I've never seen one like that.\"\n\n\"Is that why you've been staring at it all day?\"\n\n\"I just think it looks lovely. Anyway, you're no better, you haven't been able to keep your eyes off Mia's nipples!\"\n\nI looked at Mia to see if she was OK as the twins continued bickering. She gave me a small smile, so I guessed she wasn't upset. Listening to them was similar to listening to other siblings, apart from the fact they were naked and the topic they were arguing about.\n\nAfter a while, they must have realised what they were doing. They stopped arguing, and we walked in silence before a blushing Monika said, \"I'm sorry, that was so rude.\"\n\nMia said, \"It's OK. It's actually nice to see a family so close they can talk about anything together. I grew up very differently and so did Liam.\"\n\nAndreas interrupted saying, \"Um, we can swim from here.\"\n\nWe entered the water and began the long swim to the island. We were all out of breath when we finally walked ashore. The island was bigger than the other and, once we passed the through the trees, there was a large grassy clearing. A few fire pits indicated it was also a popular for barbequing.\n\nWe picked a sunny spot in the middle of the clearing. I sat and Mia settled herself between my legs. I wrapped my arms around her, and Andreas and Monika sat crossed legged facing us. Mia began asking them questions about their lives and I listened without joining in the conversation. It was relaxing and, without realizing it, I began to caress Mia. I started at her neck gently massaging it and then moved to her shoulders.\n\nShe seemed to be enjoying it and gasped slightly whenever I hit a tender spot. When I was done with her shoulders my hands slid down, and I felt her stiffen slightly as my fingertips brushed over the sides of her small breasts but, I could tell from her expression, that she was OK with what I was doing. When my hands came to rest on her hips, I felt my penis stiffen and push against her as I moved them up and cupped her breasts.\n\nShe moaned, and I gently squeezed her breasts with my hands. I looked over at the twins. Monika was staring at us and licking her lips. Her hands were gently squeezing her large breasts while her thumbs flicked her long pink nipples. Andreas was staring intently at Mia's breasts as I gripped her nipples and pulled them down as far as I could before letting them spring back. His cock was rising rapidly and was soon standing tall between his legs. Mia began to squirm and breathe heavily. I whispered, \"How far do you want to go?\"\n\nHer breathless reply was \"All the way!\"\n\nOn hearing this, I let my right-hand slide slowly down over her tummy and between her legs. I could feel the liquid heat pooling there, but with her legs together, I couldn't fit more than a single finger. Mia didn't hesitate and lifted and spread her legs, folding them over mine. Her pussy was fully exposed to our audience and I could smell the sweet musky scent of her arousal. My hand was now free to move, and I cupped her sex while sliding a finger between her large lips. She groaned loudly as I curled my finger and slid its tip inside her.\n\nMonika responded by unfolding her legs and spreading them wide. Her left hand remained teasing her nipple as her right slid between her legs. She rubbed the outside of her pussy a few times before dipping her middle finger inside and drawing out more fluid. My cock throbbed and I felt pre-ejaculate oozing from its tip onto Mia's buttocks. Andreas remained sitting cross legged, but his hand was now grasping his long thin cock. As I watched he pulled back his foreskin revealing his bright pink and glistening glans before reversing the action and hiding it again.\n\nMia shuddered and I could tell she was getting close to an orgasm, as she began making her tell-tale squealing sounds. I added a second finger and began rapidly thrusting into her while I pinched and pulled on her nipple. She screamed, her body jerked, and I felt a gush of fluid spray over my hand. After a few more spasms she relaxed and leaned back on me. We watched in fascination as Monika also climaxed. She tipped her head back and moaned loudly before lying back on the grass panting. With her legs still spread, I could see some whitish fluid oozing from between her parted lips. Her face and chest were red, and her long thin nipples quivered as she breathed.\n\nA grunt from Andreas drew our attention to him. He was breathing deeply and rapidly jerking his penis, which was now an angry red colour. His glans was bright red and flashing in and out of sight as his foreskin moved up and down. He was staring between Mia's legs and I knew he was picturing himself thrusting into her pussy. I decided to help him along and lowered the hand that was still holding her breast to join the other between her legs. After gently extracting my fingers, I used both hands to grip the ends of her long lips and pull them slowly apart. I knew he could now see deeply into her beautiful pink pussy as it was slowly unveiled before his eyes.\n\nHis hand suddenly stopped moving and he tipped his head back, in manner very similar to his sister, as his glans swelled a moment before expelling a large quantity of thick, ropey semen. His first shot reached his belly button and began trickling down his tummy as it was joined by another two somewhat weaker loads. He released his still hard penis and lay down looking at the sky while breathing rapidly.\n\nMia said, \"Oh god, I need you inside Liam!\" \n\nShe moved forwards out of my lap and said, \"Lie down.\"\n\nI did as she asked and waited to see what she would do next. Instead of turning around she shuffled back on her knees until she felt my cock prodding between her legs. Sitting upright she raised her hips and grasped my cock, moving it to her entrance. She stayed like this for a while gently rubbing my cock between her soaking lips before slotting it into the entrance of her tight channel. I raised my head and watched in fascination as my cock was slowly swallowed. I could see the twins had moved and were intently watching the act taking place barely a meter away. I gasped as Mia's full weight rested on my loins. Instead of an up and down motion, her pelvis began rocking backwards and forwards. My cock was bending in the same way and I felt extreme pleasure at the sensations this was causing. I began breathing deeply and said, \"I'm not going to last long Mia!\"\n\nHer reaction was to stop her rocking motion and lean further back. She then began lifting herself up and down and I grasped her hips to help. Our combined juices made a loud slurping sound and, added to the regular slap whenever Mia's buttocks landed on my stomach, it made a suitable soundtrack to the extremely explicit view of our coupling.\n\nI'd reached my limit and, with a loud grunt, pulled Mia's hips down as I thrust up trying to penetrate her as deeply as possible, before releasing my load explosively within her. She screamed when she felt the hot gushes of semen coating her insides and I felt her pussy clench and release repeatedly as she also orgasmed. My penis began to soften and when Mia lay back on top of me it was ejected, followed by a flood of fluids that coated both it and my now empty balls.\n\nAs we lay there blissfully, I contemplated what had just happened. We had just performed the most intimate act possible before a pair of siblings we barely knew. Instead of feeling shame or embarrassment I was feeling elated. This is how life on earth should be, everyone should be naked and free to love each other in any way and any place they wanted. Why did we humans treat the most natural act as if it was something shameful that had to be hidden? It was apparently OK to show violence and murder in extreme detail but nudity and the act of making love was considered obscene.",
        "I was jerked back to reality by the sound of someone shouting. The four of us jumped up and ran through the trees. Peter was waving and we could make dimly make out his words as being, \"We have to head back.\" \n\nLuckily he was too far away to see our dishevelled appearance, or he might have guessed what the four of us had been up to. We acknowledged his message with a wave and began our swim back.\n\nWhen we emerged from the lake Peter and Iris were already waiting and had brought all our gear from the campsite. Iris looked at our somewhat shrunken and shrivelled organs and said, \"That's better, I see you took care of things!\"\n\nWe all laughed, and I wondered if she suspected what we'd been up to. As the four of us dried off using our towels, Peter and Iris said they'd already go ahead as we were sure to catch up. They walked off and as I watched them go, I was surprised that they were still naked apart from their hiking boots.\n\nWhen we were dry, Monika and Andreas only pulled on their socks and boots. I asked, \"Are you walking back naked?\"\n\nAndreas replied \"Yes, it's no problem. Actually, when we're at the farm we usually stay naked all the time.\"\n\nI looked at Mia and asked, \"Do you want to get dressed?\"\n\n\"Not if we don't have to.\"\n\nI felt the same, and we quickly pulled on our socks and boots and got going. As we walked together, I realised we hadn't had an opportunity to speak about what took place earlier. I decided to kick things off by saying, \"About before, I hope we didn't go too far?\"\n\nMonika looked slightly confused and asked, \"You mean the sex?\"\n\nI nodded, \"we've never done anything like that before.\"\n\n\"Oh! That makes it special, thank you for letting us be the first.\"\n\nAndreas nodded, \"It was beautiful to watch, I always know what a couple is truly in love!\"\n\nIt took a moment to sink in before I asked, \"Do you mean you've watched many couples having sex?\"\n\nHe looked slightly surprised by my question, \"Yes. Our parents have never hidden their sexuality and Monika and I have often been together when we had sex with others.\"\n\nI was surprised he so candidly admitted this, as if it was normal behaviour.\n\nMia said, \"I suppose growing up in a nudist family makes things very different.\"\n\n\"I don't know if it's very different. We just grew up being taught that nudity and sex are natural and we shouldn't hide or be ashamed of anything related to it.\"\n\nMia said, \"Well, for me, that is very different! I've never seen my parents naked or engaged in anything physical. Being naked was considered dirty and sex was not discussed.\"\n\n\"That's horrible!\" exclaimed Monika.\n\nI added \"It was the same for me.\"\n\n\"I can't imagine that! But it looks like you've both overcome your upbringing and feel comfortable being naked and even having sex in front of others now.\"\n\nI looked at Mia and we both knew she was right. The last few days had changed us, and I knew we would never return to our old prudish ways.\n\nWe caught up to Peter and Iris and the six of us walked together. It was just past 4 o'clock when we reached their car. Peter took out a map and marked a few of the places he thought we should visit. They were all within range to walk and he mentioned that it was no problem to stay naked. In fact, the entire region was nudist friendly and there had never been any problems. \n\nWe thanked them for their hospitality at lunch and for the tips. Instead of handshakes everyone hugged. I took Mia's hand as we walked back towards our cabin. \n\n\"I don't know about you but I'm feeling better than I ever have.\"\n\nMia smiled, \"Me too!\"\n\n\"The only thing I'm worried about is going back to our old lives, how are we going to manage having to wear clothes again?\"\n\n\"I've also been thinking about that.\"\n\n\"Maybe we should buy a farm around here and just live in the nude!\"\n\nMia laughed and then asked, \"are you serious?\"\n\n\"Why not? We could still do our work remotely and for the few times we have to go to the city to see people we would get dressed.\"\n\nI could see Mia was considering my proposal and waited, \"it could actually work. But what about visitors like our friends and family?\"\n\n\"Anyone can visit as long as they don't mind our lifestyle. We can just warn people before they come that we're going to be naked, of course they can keep their clothes on if they want but we'd prefer them to go naked.\"\n\nWe walked a bit more both thinking about the idea. I said, \"you know what, we could even say that on our property people can make love wherever and whenever they want and if you don't like it, don't visit!\"\n\n\"God, it would be fantastic!\"\n\n\"Well, if you agree let's see if we can do it!\" \n\n\"But Liam, it would mean us moving together and changing our lives totally!\"\n\n\"I know, and I can't think of anything I'd rather do! You don't have to decide now, it's a huge step, just think about it!\"\n\nMia remained silent and I could tell she was giving my suggestion serious thought. As we approached the cabin, I said, \"let's take some chocolate and a bottle of wine as a gift for Hans and Elsa.\" \n\n\"Good idea. I suppose we should get dressed?\"\n\nI frowned and said \"Maybe not, let's just go as we are but pack some clothes. I'm sure we'll have a swim at the pool before we go to their farm.\"\n\n\"OK, that makes sense.\"\n\nWe repacked a single backpack with our clothes and towels then added the gifts for our hosts. It was time to leave so we headed upriver again, along the now familiar route to the pool. Bello was the first to notice our approach and came bounding through the bushes to greet us. We could hear Elsa and Hans in the water and greeted them as we approached the pool. They were standing waist deep in the pool and gave us a friendly wave. Elsa called \"Hello, come in and join us!\"\n\nHans only had eyes for Mia again and she winked at me as she turned her back to them and bent over at the waist to remove her boots and socks. I could clearly see her pussy and asshole and knew Hans and Elsa were getting the same view. My cock instantly began to harden but this time I wasn't embarrassed and didn't even try to hide or suppress it. I removed my shoes and socks and then took Mia's hand as we walked into the water.\n\nElsa laughed loudly \"It looks like you're happy to see us!\"\n\nI replied, \"It's always a pleasure and, thanks to your tip, we had a wonderful day at the lake.\"\n\n\"Ah, so you enjoyed it! It is a lovely place.\"\n\nMia said, \"It's amazing and we even met someone you know, Peter, Iris and their two children.\"\n\n\"Oh! Such a nice family. We haven't seen them for a long time.\"\n\nAs Elsa and Mia floated off talking about our day at the lake, I decided to try chatting with Hans again. I waded over to him and said, \"So Hans, how are you today?\"\n\nHe looked at me briefly and said \"Good.\" Before turning back to watch Mia. I decided to try a different tack and said, \"You know, it makes me very excited when you look at Mia and she likes it too.\"\n\nHe turned and looked at me again \"You mean you don't mind? You actually like it?\"\n\n\"Yes, we both do. When we got here, I wasn't erect but as soon as I saw you looking at her when she bent over, I got aroused.\"\n\nHe nodded, \"I noticed that.\"\n\n\"You must have met many nudists here and at the lake, do you always get an erection?\"\n\nHe looked a bit embarrassed, \"I've seen a lot of nudists but not many of them excite me.\"\n\n\"What is it you like about Mia?\"\n\nHe shrugged but didn't answer, so I said \"You can tell me, I won't get upset, really.\"\n\nHe hesitated, \"I've never seen a woman like her, so delicate, such small breasts but with big nipples and a beautiful bottom.\"\n\nI smiled at his words and said. \"I love all those things about her too!\"\n\nHe visibly relaxed and asked, \"don't you get jealous if other men see her like this?\"\n\n\"No, I like to share her beauty and I know she's mine. She used to be so shy and insecure about her body and now she's confident and loves to show herself, we've both never been happier.\"\n\nHans smiled and nodded \"Let's go and join them.\"\n\nWe swam to Elsa and Mia and treaded water. Hans said, \"We should go soon, or it'll be too dark to see the farm properly.\"\n\nWe all agreed and swam to the bank together. Being gentlemen, Hans and I let the ladies exit first. This gave us the opportunity to watch their asses as they wobbled about while crossing the uneven terrain. I winked at Hans and he smiled as we followed them out. I was again impressed to see his erection; country life must really be healthy as I don't think many men his age could sustain an erection for such a long time without anything but visual stimulation.\n\nAs the ladies turned to watch us, Elsa said \"Ah Mia, you really get the blood pumping in these two!\" She then directed her attention to Hans, \"Hans, you should be ashamed of yourself, lusting after a young girl like that!\"\n\nHans ignored her comment and Mia spoke up, \"it's fine Elsa, I really don't mind. I take it as a compliment when a man finds me attractive.\"\n\nElsa looked surprised, \"but what about you Liam?\"\n\n\"I just told Hans that I find it exciting when other men look at Mia, and even more so when they are aroused by her.\"\n\n\"Really? You are a strange couple!\"\n\nWe both laughed, and Mia said, \"we don't think it's strange anymore and I have to admit I also like it when women look at Liam.\"\n\nElsa shook her head in wonder, \"well that's good to know and Hans is more than happy to look at you!\" She hesitated a moment and then added, \"I have to tell you something, yesterday we watched you for a while from the bushes.\"\n\nShe waited for our reaction and seeing we weren't angry, continued \"When I saw you lying on that rock, I just knew something would happen and I told Hans we should wait a moment and then go back and look. It was wrong and I'm ashamed of myself.\"\n\nMia said, \"don't be ashamed, it's really OK. We were so excited we just couldn't wait any longer.\"\n\n\"It was beautiful to watch but we shouldn't have spied.\"\n\n\"I think if we'd have known you were watching we wouldn't have been brave enough to do it!\"\n\n\"She's right.\" I added.\n\nElsa smiled and said \"I feel better now that I've confessed! Let's get going. You can leave your clothes off if you like, Hans and I will also go naked.\"\n\nThat was fine with us and, after packing our towels, we followed the two of them. We walked along the river for a while but then soon veered off along a small track that Mia and I hadn't seen the previous day. Both Hans and I had relaxed and our cocks were flaccid and swinging as we walked. It was much faster than along the riverbank and, before long, there was a gate leading to a field. Elsa opened the gate and when stepped onto a large field she announced, \"This is our land!\"\n\nBello ran ahead barking and we took a path along the edge of the field until we reached their farmhouse. It was an old wooden building, but in very good condition. Hans said, \"Five generations of our family have lived here, we have chickens, cows, goats and grow vegetables.\"\n\n\"It's beautiful and so peaceful\", said Mia.\n\nElsa beamed at the compliment, \"let me take your bag and then we can show you around.\"\n\nBefore giving her the bag, I removed the chocolate and wine and handed it to her saying, \"here's a small gift for your hospitality.\"\n\nShe smiled and both her and Hans thanked us. After putting everything inside the house Elsa said, \"Let's show you the cows first, you can try milking if you like!\"\n\nAs we followed the ladies to the barn, Hans nudged me with his elbow and wiggled his eyebrows. I smiled but wasn't sure what he was trying to tell me. In the barn there were a few cows, Elsa selected one and led it to an open area near the entrance. She took a bucket and a small stool and said, \"have you ever milked a cow?\"\n\nBoth Mia and I shook our heads indicating we hadn't. \"Well, you watch how I do it and then you can try.\" \n\nShe sat on the stool and placed a bucket between her knees. Her legs were wide apart, and I could see the pink gash of her open pussy, now visible through her thick pubic hair. With each hand she grabbed one of the cow's teats, which looked alarmingly like cocks and I began to understand what Hans had been hinting at earlier! Watching Elsa's breasts swinging, as her arms made the rhythmic up and down pumping action required to extract the milk, combined with the view between her splayed legs was amazing. I felt myself harden and caught Hans smiling at me when he noticed. He remained flaccid and I guessed seeing his sister performing this task was nothing new to him.\n\nAfter a few minutes, Elsa released the cow and vacated the stool. \"Liam, you try it now!\"\n\nI moved forward and settled myself in the stool. My erect penis was in the way and I had to position the bucket further forwards to avoid it. \"OK, now take two teats\" she instructed. I gingerly reached forwards and took one in each hand. They felt warm and it was similar to holding my own penis. I began jerking up and down and nothing happened. Elsa and Hans laughed and then Elsa leaned over me, taking my arms in her hands and showing me how to do it correctly. \n\nIn this position her humongous breasts were hanging right before my face and even slapping into it when she moved. I had to fight the urge to release the cow and grab Elsa's tits instead. Her assistance meant that milk began squirting and she soon released my arms and stepped back. I felt the hot, soft flesh of her breasts as they slid past my face and over my shoulders and wished she would have stayed a bit longer. I had the hang of milking now and, after a few minutes, Elsa said, \"Let Mia try now!\"\n\nI made space for Mia and watched as she settled herself in my place. Her face was flushed, and her nipples huge. I wondered if watching me milking, or Elsa's tits rubbing against me, had gotten her so aroused. Whatever it was, she looked amazing as she spread her legs and reached for the teats. Hans had moved himself into an optimal position for watching and his cock had risen in response. It was almost too much for me watching as Mia grasped those teats and began tugging and I felt a squirt of pre-ejaculate ooze from my tip and hang for a moment before dripping onto the floor.\n\nMia's first attempts were also unsuccessful, and Elsa stepped in to assist again. From my position slightly behind and to the side I could see her ass spread and her, now somewhat moist looking, pussy reveal itself. Her breasts were hanging over Mia and I wondered if she was enjoying the sensation as much as I had. Mia suddenly shrieked in joy as the first squirts hit the bucket. Elsa helped for a moment longer before moving away. I could tell she purposely dragged her breasts over Mia's face and shoulders just as she had done with me.\n\nShe turned and, with a glance at my dripping cock, said \"You like seeing Mia milking, yes?\"\n\nI laughed, \"I never knew working on a farm could be so erotic!\" \n\nHans grunted and I noticed he was gently rubbing his cock as he watched Mia continue to milk. Elsa said \"Yes, on a farm you see nature in many ways. We used to have horses and I remember watching them mate for the first time. It was an impressive thing for a young girl seeing the stallion's penis grow and then watching him mount the mare and plunge it into her.\" \n\nI nodded in understanding and watched as Mia continued milking. The bucket was half full when Elsa said she should have a rest and that we would continue the tour. Mia stood up looking rather flushed and sweaty. There was a large wet patch on the wooden stool that everyone noticed but didn't comment on. Elsa took the lead and we followed her through the barn and out to see the other animals. Mia took my hand as we looked around. \n\nAt the end of the tour, we returned to the farmhouse and everyone removed their shoes and socks before going inside. The house had low ceilings and was very cosy. Elsa suggested we use the bathroom on the lower floor to clean up as she and Hans went upstairs to do the same. The bathroom was small with just a sink and toilette. After we used the facilities we kissed passionately and Mia said \"God, I'm so horny!\"\n\n\"Me too! I almost lost it watching you with that cow!\"\n\nMia giggled and we kissed again then left the bathroom as we heard Hans and Elsa come back downstairs. Elsa told Hans to get us drinks as she would prepare the dinner. We settled down in their living room and sipped our drinks. Hans's penis was flaccid, and I wondered if he'd taken care of things while he was upstairs. We spoke about the farm and life in general. After a while, Mia excused herself saying she would go and see if she could help Elsa in the Kitchen. \n\nAfter she left, I told Hans that we liked the area so much and were considering buying some land or a farm to live on. I stressed that we wouldn't want to work the land or have livestock but just wanted to get away from life in the city. I explained that we could work from home and only rarely had to meet with clients. He nodded and said he knew of a few farmers that may be interested in selling.\n\nI was excited to hear this and wanted to ask more about the properties, but we were interrupted as Elsa called saying dinner was ready. I followed Hans into the kitchen and sat down next to Mia. The meal was simple but delicious and contained a lot of their home grown produce. \n\nAfter a while the conversation moved to our thoughts about settling here. Elsa loved the idea and said it would be wonderful to have younger people in the area again as most of them left for the cities or even abroad like her daughter. I mentioned that we'd like a lot of land and, if possible, access to the river, it should provide enough privacy that we could engage in a nudist lifestyle without bothering others. They began discussing which farms might be suitable and available and Mia and I enjoyed watching as Hans would suggest a place and Elsa would make a counter proposal.\n\nAfter about half an hour, they'd managed to agree on two possibilities and said they could take us for a look tomorrow. Hans left, returning a few minutes later with a detailed map, and we made space on the table for him to spread it out. One of the options, which he called the \"Hartmann\" place, actually joined up with their land and followed the river further up. He explained that it was difficult for farming as the terrain was quite hilly. The land was about 20000 square meters and a mixture of fields and wooded areas. It was currently unoccupied, with the house in need of extensive renovation. Access was difficult but that also meant it was very private. I could see from the map that the property started soon after the point in the river where Mia and I had turned around on our first excursion.\n\nI liked the look of it, and the fact that the property bordered on the river was ideal. \"This looks great but what is the river like further up, is it similar to here and are there places to swim?\"\n\nHans nodded, \"It's a bit wilder with a few waterfalls but also large pools. There are lots of places to swim but they are hard to get to from here but easy to reach from the property.\"\n\nI smiled at Mia and could see she was also excited by this opportunity. Hans then pointed out the 2nd property. This one was further downriver, past the point where the two rivers merged. The land was about 15000 square meters but much flatter. It was still a working farm, but the owners were quite old and wanted to retire and move closer to their children. It also looked promising, but not quite as good as the Hartman place.\n\nI said, \"Both could be interesting, it would be great if we could take a closer look.\"\n\nWe continued talking about the two properties and lost track of the time. I checked my watch and realised it was already very late. I said \"Wow, it's already after 10, I'm sorry we've kept you up so long. Mia we should really be going!\"\n\nHans said \"No, no, it's fine. We've loved having company.\""
    ],
    "authorname": "shygeek",
    "tags": [
        "big nipples",
        "farm",
        "group",
        "nature",
        "nude",
        "nudist",
        "public",
        "river",
        "tiny tits"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/a-new-life-33"
}
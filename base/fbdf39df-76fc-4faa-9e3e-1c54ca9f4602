{
    "title": "A New Way of Seeing Things Pt. 03 Ch. 16",
    "pages": [
        "Standard disclaimers.\n\nThis is a story about sexual exploration and, open relationships. Open relationships can and do happily exist; but they are not for everyone. If you do not believe it is at all possible for open relationships to exist without damage to any and all involved parties, please do yourself a favor and don't waste your time reading this.\n\n. \n\nAlso, this story takes place in a world where STDs don't exist and only babies planned for and wanted do\u2014in other words, a fantasy world. Any resemblance to real-life people is purely coincidental. \n\nThe Lady grudgingly approved of Yvette McCallum. She had down-to-earth common sense and self-confidence, did not flaunt her obvious wealth and would have been someone to be respected, if not actually liked, even before Natalie had become such a bad influence and set the standards for decency so much lower. Of course, the Lady added tartly, her common sense and decency had been notably absent the day the met, but everyone makes mistakes...\n\n\"Your house is beautiful,\" Gwen said, standing in an open living area that featured two stories of windows overlooking the lake. A deck ran along the front of the house, from which a set of stairs descended to the dock where the McCallums' boat was moored. \"What a lovely view.\" \n\n\"It's way too big for two people,\" Yvette said, \"but it does come in handy for family get-togethers and holidays. Funny how we always end up hosting those...\" \n\n\"And as for the view,\" Bob McCallum added, \"the windows are a double-edge sword. We can see out, but the neighbors can see in, and apparently they are less appreciative of their view than we are of ours.\" He nodded to the two cottages sitting on either point of the gently arcing inlet, in plain sight of the house that sat in the center of the shallow horseshoe. \"We found that out right after we moved in. The folks in the white cottage saw us fooling around out here and couldn't figure out they could just look the other way. Boy, did he get red in the face when he told me\u2014pulled me aside to talk so Yvette wouldn't hear, told me he and his wife could see us in here and that this wasn't a nudist colony and what we were doing was meant for behind closed doors. I told him the door was closed, it was the window that was open, which I don't think helped things. But I mean, hell, how can he expect me not to want to play a little hide the hot dog when you have a beautiful woman like that always walking around naked tempting me?\" If the Lady respected Yvette, the Slut really liked Bob. He reminded her of Tim's friend Charlie, but in a good way, if that was even possible. He was out-going, self-confident without being arrogant, and was skilled in being inappropriate in ways that were kind of cute rather than crude. \n\n\"You mean conceal the cocktail frank,\" Yvette retorted with a smile. \"And I wasn't trying to tempt you. I just think in my own house clothing should be a choice not a requirement. The Slut chuckled at the woman's good-natured attempt to knock her husband's ego down a peg, but remembered that day on the beach and thought hot dog more appropriate, maybe even sausage. \"We both like to have choices when we're here,\" she continued, pointedly eying Bob, \"so to keep peace in the neighborhood and put these up.\" Yvette lifted a remote from an end table and a row of blinds advanced from left to right across the lower half of the wide expanse of glass. \"I can only imagine what they must think is going on in here when we close 'em, but I'm willing to bet it involves Bob making his long-suffering wife do unthinkable things.\" Another press of the button and the shades reversed direction, again revealing the sparkling water of the lake. \n\n\"She lies!\" Bob said with a laugh. \"There are no unthinkable things in her book! We haven't figured out a good way to add that kind of privacy to the deck, though and since we like to be comfortable outside too we spend a fair amount of time on the boat, which thanks to Tim is able to leave the dock way more than it used to. Speaking of that, we thought we could all go out and enjoy the nice afternoon?\"\n\n\"Bob stocked the galley fridge, be a shame to let his hard work go to waste,\" Yvette offered, the fabric of her white 4th of July celebration t-shirt unable to contain the bobbing and swaying going on beneath it, and the faint outline of two large brown circles were visible underneath the shirt as well.\n\nThe men led the way down the dock, in a hurry to be underway while their wives trailed behind. \"Listen,\" Yvette said quietly, \"I want to apologize for Bob checking you out in there. He's a typical guy with a dirty mind, but sometimes I wish he would be a little more discrete about it. I swear his favorite hobby is mentally undressing women to add to his collection.\"\n\n\"Oh, I didn't notice he had been,\" Gwen lied. \"But really, he's already seen me that way, so there's nothing left for him to imagine. I'm sure he's harmless\u2014I'll be fine, but thank you for thinking of me.\"\n\nYvette laughed. \"Nothing left to imagine. Honey, you're so cute. And yeah, he's harmless, but still, just let me know if he gets to be too much. You don't mind if I don't leave anything to Tim's imagination, right?\" \n\n\"Of course not. He's already seen you that way. We're all adults and we all know what we look like without our clothes,\" Gwen replied with feigned casualness. \n\nShe marveled at the cabin cruiser as they stood beside it, at just how big it seemed compared to their own boat. \"Tim's already had the tour, including a fair amount of time in the engine compartment,\" Yvette remarked drily, \"but let me show you below decks.\" She and Gwen descended a short ladder into a small salon complete with galley, not big but certainly roomy enough to seat four for a meal. Two berths lay forward, snug accommodations with a thin bulkhead separating the two bunks. The engine rumbled to life, and they came back up on deck in time to see Tim cast off and hop aboard. \"C'mon, the boys can drive. Let's go sit in the sun and catch the breeze.\" She led the way to a short ladder leading up to an open space over the salon forward of the cockpit, in front of where a bare-chested Bob was at the helm, carefully steering the large craft out of the small inlet at a speed low enough to avoid causing a wake and giving the neighbors something else to complain about. \n\nThe women each took a spot on the foam cushions covering the top of the cabin. Yvette wasted no time in reaching for some nearby sunscreen and working it into the skin of her bare legs while Gwen sat and looked about, wondering if and when the woman next to her was going to take off her clothes. She glanced behind her into the cockpit, Bob smiling back, Tim standing beside him, his shirt now gone as well. \n\nLegs taken care of, Yvette took a quick look around to ensure they were now a distance from the little cove and their neighbors, then at Gwen. \"You don't mind, right?\" she asked quietly, glancing back at Tim. \n\n\"No, of course not,\" Gwen said hurriedly. \"I'm sure Tim will behave himself, but if he doesn't please tell me.\" And you? The Lady asked icily. Will you behave? \n\nYvette smiled in thanks and casually pulled the t-shirt over her head before pushing her shorts down about her ankles. Gwen could see by the lack of tan lines the McCallums had not been kidding about how they got comfortable out here on the water\u2014of course not, why would they?-- and she watched out of the corner of her eye as oily hands worked the now-exposed skin around a trim chestnut-colored bush before moving up her stomach. Yvette's motions slowed to languidly knead and smooth her ample breasts, making them glisten in the bright sun. \"I think you missed a spot,\" a grinning Bob called out from behind her. \n\n\"You always think I missed a spot.\" She spun the cushion with her bottom to face the cockpit and got to her knees to present her chest to her husband on the other side of the windscreen, hefting her full breasts for his inspection. \"Where?\" \n\n\"Just put some more sunscreen on and rub it in, you'll get it,\" he told her, still smiling. Yvette sighed and applied another dollop of white cream to the top of each mound, looking down to carefully smooth it over and into the yielding flesh. Her hand made a quick, casual pass through the fluff between her legs as she brought it up to again present her breasts. \"Better?\" \n\nGwen had been watching as well, her attention split between the alluring performance and the mesmerizing effect it had on the men. She wondered if Yvette had intended for it to look so erotic; the unsatiated arousal that had started with the photographer's visit and continued to grow made it easy to believe she had. \n\nBob looked at the man standing next to him. \"What do you think? Pretty good?\"\n\nGwen suppressed a giggle as Tim tried to appear as though he had been concentrating on the gauges and not the display. \"Uh, yeah, they look great\u2014I mean, it looks like you got 'em covered pretty good.\" \n\nApparently satisfied with the response, Yvette lay back on the mat with her feet facing the appreciative men. They had a clear look up the length of her body, over thighs pressed together with a tuft of hair fluttering in the wind where they joined, and past full breasts that now hung to either side of her body. Gwen felt overdressed and decided it was safe to shed her t-shirt and shorts, the Lady conceding that much was acceptable. The Slut urged more, needlessly pointing out the naked woman beside her, but Gwen hesitated. \"May I?\" she asked, reaching across Yvette for the sunscreen and squeezing the contents of the bottle on to her legs while she pretended to consider her options. Her stomach and arms were next, and then there was no more uncovered flesh to be oiled. She stared out over the bow for a moment, at the brilliant blue water and the green of the shoreline in the distance, imagining two sets of eyes moving back and forth between her practically naked back and the completely naked body beside her. Not much difference between practically and completely, she rationalized, untying the knots holding her top together. It fell to her lap, set aside along with the bikini bottoms that were discarded as well. There was now more skin needing protection, and she quickly worked upward, applying one large splat of fresh lotion to the top of each breast. Not as much room on the shelf as Yvette has, Gwen thought ruefully and began to work the white cream in, her nipples coming to hard points despite the sun's heat. She worked the cream in far longer than necessary, almost to the point where the oily sheen had disappeared, relishing feel her heightened arousal had inflamed, fighting the urge to reach between her legs. The best thing to do now would be just to lie back and let things calm down a bit, regain some self-control... her head next to Yvette's feet, Gwen was certain her erect nipples were too close to the windshield not to go unnoticed by the men behind it.\n\n\"I think you missed a spot.\" \n\nGwen raised herself on one elbow and looked back over her shoulder at a grinning Bob. It sounded like a challenge, and she never liked to back down from challenges. She sat up and turned to face the grinning man. \"Really? Where?\" \n\n\"It'll be easier to just put some more on,\" he deadpanned, and she reached for the lotion. Two more creamy dollops were applied and Gwen looked down to concentrate on her efforts, squeezing and massaging her pert breasts, eventually forcing herself stop to at least pretend she wasn't enjoying it so much. \n\nGwen decided there wasn't enough of them to hold up for inspection and instead thrust her chest towards her audience. \"Good?\"\n\n\"Really good,\" Tim said with a smile.\n\n\"Incredible!\" Bob exclaimed. \n\nGwen lay back, her feet to the cockpit this time. Yvette was on one elbow, watching, a smile on her face. Gwen shyly acknowledged her with a nod and closed her eyes. The Lady took little comfort in the fact that the coaming around their perch as well as its height compared to most of the other boats on the lake meant that her lack of clothing would be difficult for passersby's to see.\n\nBob soon appeared next to their side, his upper torso visible above the coaming. \"You two want something to drink?\" \n\n\"Wine for me,\" Yvette answered, not bothering to look up. \"Gwen, you want something? Coke, water, wine, beer?\" \n\n\"Some wine might be nice, thank you\u2014but only if it's no trouble\"\n\nHe was back at the ladder a short time later, placing two clear plastic cups on the cabin roof. Yvette sat up and reached over to take hers, a forearm casually sliding across Gwen's bare midsection, making her shiver, the woman seeming not to notice. \"While you're here, think you can put some lotion on my back?\" Yvette rolled on to her stomach without waiting for an answer, giving Gwen a good look at her dangling breasts before they were pressed down into the towel. \n\nGwen sat up to take her glass out of his way as Bob grabbed for the ladder. She quickly discovered Bob had brought their drinks and left his shorts behind. Sausage, definitely sausage, the Slut thought as his waist and penis cleared the top of the cabin roof. It hung in that undecided state between flaccid and erect, forming a gentle arc over the loose testicles below, the pink flared head forming a cradle over the balls that lay heavy in their sac. No tan lines there, either, Gwen noted. She wondered if Tim was the only one still clothed. \n\n\"Guess I can do that.\" Bob straddled his wife's back, his heavy length laid between her asscheeks like a hot dog in a bun\u2014enough with the damn tubed meat comparisons, the Lady demanded-- his hands at her shoulders. Gwen stayed sitting, stealing glances as he worked. Bob was very thorough, delivering more of a massage than a simple application of lotion, masculine hands kneading her shoulder blades, slowly circling down over the sides of breasts now mashed against the towel, then to the small of her back. Yvette lay with her head on crossed forearms, eyes closed, a contented smile on her face. \n\nBob's fingers had reached the top of her ass, working just inches from where the head of his cock peered out from between her globes. His length retreated and poked insistently between her mostly-closed thighs as he shifted downward to straddle them, more sunscreen liberally and lovingly applied. \n\nYvette's eyes fluttered open as one hand, then the other found their way down between her legs. \"Down boy,\" she said while gently squeezing her legs shut against his advances. \"We have guests. If you can't keep that dragon of yours under control you'll have to put it away.\" \n\n\"Oh, that's alright,\" Gwen babbled. \"Don't mind us! It's your boat! We're married, too you know!\" She quickly decided she was not doing herself any favors and fell silent. \n\nBob raised himself on all fours, hovering above his wife as he leaned forward to kiss her cheek while his erection slid over the small of her back. \"Humblest apologies. It was just trying to get out of the sun and into its nest.\" He turned his attention to the woman next to him. \"Sun's hot. You should get some lotion on your back, too. Don't want that cute little rear end to get all red for the wrong reasons.\" Gwen's brain went into crisis management mode, quickly evaluating possible responses. Maybe teasing him had taken things too far; he probably thought that had been her signal to let him go for something more, maybe to touch her. That was out of the question, but maybe just her back would be okay--but only if he asked Tim for permission first, not that Tim would allow it\u2014would he? \"Let me go take the wheel from your husband so he can make sure a sunburn on that beautiful body of yours doesn't limit his options later,\" he continued, reducing her crisis level to yellow alert, her mental flailing slowing, the Lady relieved and the Slut guessing what \"options\" he was referring to. Bob turned and moved to the ladder, his bobbing length passing just inches from her face, close enough that the fat spongy head would poke her squarely between the lips if she bent forward just a little more.\n\nTim hurried forward, Gwen's curiosity about his clothing answered, his erection proudly leading the way. \"Want me to put some on your back?\"\n\nShe turned over in invitation, spending more time than necessary on hands and knees for the benefit of the man behind the wheel before turning in place to lie down next to Yvette, her earlier concerns of having gone too far with her teasing forgotten. \"If you want...\"\n\nTim took his cue from the boat's owner and straddled Gwen's rear end, nestling his cock into her split. She resisted the urge to bring her hips up a little more, to where he could slide in and do whatever he wanted, to shamelessly let him explore one of his options right there in front of the McCallums. A last burst of self-control kept her hips mostly in place, only tilting them enough for his length to saw across her sensitive rosebud as he worked. Tim finally pronounced her finished and reluctantly headed back to the cockpit. \n\nNow properly protected, the women remained on their stomachs, heads on forearms facing each other with eyes closed, the sun, breeze, and arousal making every inch of Gwen's exposed skin tingle sensually. \n\n\"You stole my moves,\" Yvette said softly enough that she couldn't be heard by the men over the loud growl of the diesel. \n\nGwen's eyes opened in surprise to find a knowing smile on the lips of the other woman. \"I, uhh, what do you mean?\"\n\nYvette's look of contentment had not changed. \"And here I was worrying that Bob was going to freak you out. I know a cocktease when I see one. Don't worry\u2014he had it coming. HE always has it coming. It's just nice to meet someone else who can deliver it. Someone who appreciates the art of using a man's hard on to knock him off balance.\"\n\n\"I'm sorry,\" Gwen stammered softly, watching Yvette's face for any sign she might be displeased. \"I didn't mean to copy you! I don't normally do things like that\u2014really, I don't!\u2014but both of them seemed to really like what you were doing, and I guess I got caught up in it...so were you doing that... intentionally?\"\n\nYvette laughed. \"You don't have to apologize and yes I was doing that on purpose, just like you were. It's good for Bob to have the tables turned him from time to time. You may not have noticed, but he is almost unnaturally gifted in the art of persuasion\u2014I swear he could talk the devil out of his pitchfork. Ever since I've known him he's been able talk me out of my underwear and into his crazy schemes pretty much whenever he wants, especially now that it's just us two and I don't have to worry about the boys seeing or hearing something they shouldn't. So, being a tease lets me pretend I've got some control over my fate. It's fun as hell to get old Mr. Alpha Dog and his trusty sidekick little Bob to sit up and beg for what he's going to get anyways. Having you work him over too doubles the effect!\" \n\n\"I really shouldn't though,\" Gwen demurred. \"I don't want him to think I'm being mean, or leading him on.\"\n\n\"Don't you worry about that. He started it, and he knows I'm the one he needs to come to when he can't take it any more. But please, keep doing what you're doing\u2014it'll be fun to see how he deals with both me and someone he thinks is a hot piece of ass\u2014sorry for the frank evaluation, but he does think you're very attractive.\" \n\nGwen smiled. \"I'm flattered he would think so. And I'll try not to copy you any more.\"\n\n\"Imitation is the sincerest form of flattery,\" Yvette said with a laugh. \"Just don't be upset if I end up stealing some of yours. With your looks I'm going to have to work twice as hard to get his attention.\" \n\n\"I don't have any moves, really. Or looks.\" Gwen quietly protested while the Slut purred in response to Bob's evaluation.\n\n\"You're far too modest. But I guess I should get to work, so....\" Yvette slowly turned over, Gwen using this as an excuse to raise her head off the towel to watch as the woman beside her again presented her breasts to the sun, She casually brought her right leg out and up to cock it at the knee casually open herself to the men in the cockpit. It was not a lewd display, not enough to appear as though she were presenting herself to be mounted, but rather just enough to broadly hint at the furrow beneath the thatch she now distractedly finger combed. Satisfied, she extended the bent leg to stretch it, then gently dropped it to the towel. \"I've always found that you can't go wrong giving 'em a quick peek between your legs,\" the blonde said, eyes again closed. \"Most men\u2014and women, even though a lot of 'em won't admit it\u2014will do whatever it takes to see what they shouldn't be seeing, and that little treasure we all have between our legs is the ultimate prize.\" Gwen wondered what the men behind the wheel thought, resisting the urge to look back over her shoulder, curious just how hard Tim could get without touching it. Maybe he WAS touching it...",
        "She lay her head back down and remained on her stomach, intent on not stealing any more of Yvette's moves but emboldened by her display. Her hand went to an asscheek to scratch an imaginary itch, the actual motion more of a caress. Gwen shifted on her towel, feigning an effort to get more comfortable while one leg crept away from the other. A hint of air against her lips told her the view had likely improved for the men behind her and she ground her mons against the towel at the thought, relishing the feeling of pressure on her clit and only reluctantly stopping to lie still.\n\n\"Pretty hot,\" Bob yelled from the shade of the cockpit. \"You ladies mind if we stop for a swim and a sit?\" \n\nYvette sat up to look around, bringing both legs up to cock them at the knee, forming a darkened valley at their junction. \"You're the captain. Right here?\"\n\n\"We'll get run over here. I was thinking the beach.\" \n\n\"The beach?\" Gwen asked, risking a look about. There were a couple of boats off in the distance, probably too far off to make out the women on the top of the cabin cruiser...\n\n\"The one we met you two at. That alright, or do you just want to stay out drive around for a while? Whatever you're comfortable with.\" \n\n\"No, the beach is fine,\" Gwen politely insisted. \"A swim would be nice.\" The engine's roar grew louder as the craft increased speed, eventually dying back to a low grumble, then silence, as they coasted in close to the shore. She cautiously raised her head again. The now-familiar anchorage was more crowded than the last time they had been there; four unoccupied boats in all, with two couples on the sand lying close enough to each other to assume they were together, a group of four what appeared to be college-age water skiers taking a break, and two single men sitting apart up near the tree line. The skiers were the only ones bothering with swimwear, the young men alternating between nervous sideways glances at the naked flesh on display about them and looks at the boat that had just arrived. \n\nTim and Bob were already busy at the stern loading a raft with items meant to stay afloat and dry on the trip to shore. Gwen could see their attention to the task had distracted them enough to soften their erections considerably, but she knew they could easily be summoned to return. \n\nTheir husbands were not the focus of the male beachgoers, though; it was the women now standing forward of the cockpit. The height of the cabin which had offered the Lady some comfort from prying eyes now made the Slut feel as though she were on a stage not unlike in her dreams and fantasies. \n\nThe men were the first in the water, towing the raft behind them to shore. The feeling of being on display made Gwen take her time as Yvette clambered down the ladder and walked to the swim deck at the stern, apparently not at all concerned with the amount of the attention those on the beach were giving her. Her t-shirt and shorts had been left behind; Gwen glanced at her own bikini lying at her feet, debating as to whether it should be brought along and kept close to hand just in case. She joined Yvette on the stern empty-handed. \n\nGwen stood up in chest-deep water after a short swim and began to trudge to shore, rivulets cascading down over her glistening skin as more of her body emerged with each step. Tim and Bob had set up camp halfway up the beach, the couples on one side and the skiers on the other, the single men behind them. She risked glances at the other beachgoers; the couples to her left lay on their sides with the men's attention back on their partners, touching and caressing while they talked softly. It was nothing overtly sexual, but their nudity made it look erotic. One of the single men up by the trees seemed reluctant to show too much, legs drawn up before him in a hug, but the other, an older man, proudly sat with legs spread to display an erection poking out from beneath the hairy belly that formed a roof above it. The group of four young men studied the newcomers intently as they walked up the beach, and Gwen willed herself to briefly return their stares, making them lose their nerve and look elsewhere. \n\nYvette was already arranging their blanket, on all fours with her rear thrust unnecessarily high into the air, giving both her husband kneeling at the small cooler behind her and the couples beyond a clear view of her sex. Gwen looked on in shock as Bob impulsively leaned forward, pressing his face between her upturned ass for a second before withdrawing. Gwen could guess where his lips, and maybe even his tongue, had been... \"Guests, remember?\" Yvette reminded him, although she didn't seem at all upset, even playfully wiggling her ass at him. \n\n\"It's like a reverse fried ice cream after you've been in the water,\" Bob replied with a laugh. \"Chilly on the outside, hot and wet on the inside.\" \n\n\"Hmmm, limited time only. It warms up when I leave it out in the sun...\"\n\n\"Can I get some more before it does?\"\n\n\"Maybe we can take another swim later.\"\n\nGwen kneeled on the blanket that Tim had laid out for them, bent over the already smooth fabric as if to adjust it, letting her breasts dangle and jiggle for Bob to ogle while she presented her backside to the skiers behind her. Tim's erection had begun to return, balls still drawn up tight from his swim while the length pulsed to life, showing its appreciation for the situation it found itself in. Gwen found herself enjoying the McCallum's casual openness, admiring it even, and she took her time completing her task, holding her pose, finally lying down next to her husband and turning to put her arm over his waist while keeping her back and ass to the four appreciative young men. \n\n\"Everything okay?\" she murmured, her hand brushing across his awakening member as she reached for his hip. Tim started, and she withdrew in panic. \"Sorry, sorry!\"\n\n\"No, it's okay,\" he said with a chuckle, quickly turning on to his side to face her while replacing her hand on his cock. He slipped his own hand down between her thighs, inserting a finger into her wetness and making her shiver when he found her clit. \"Feels like you're doing okay too.\"\n\n\"I can't believe we're doing this.\"\n\nHe grinned. \"I know, huh? Pretty wild...\" Tim glanced over his shoulder to where Yvette now sat between Bob's spread legs, her back to him while he applied more lotion. \"Want me to put some more on you, too? It probably washed off when you swam in.\" \n\nThere was the sound of an outboard in the distance. \"Sure.\" The Nelsons assumed the same position as the McCallums, Tim hurrying to catch up to Bob who by now had finished Yvette's back and had reached around to begin on her breasts. She arched her back in welcome, pushing them into his hands while a contented groan escaped from her lips. His hand crept down her stomach, circling, and Yvette opened herself to welcome it...\n\nThe sound of the motor grew louder until it could no longer be ignored. Gwen looked about for the newcomer, the Slut hoping it was carrying more naked people to see and be seen by. Dread filled her when she saw the boat. \n\nA white runabout with the words \"MARINE PATROL\" on the hull was pulling into the little anchorage, between her and the boat she had arrived on, in her panicked mind cutting off her escape. Gwen looked about wildly as the Lady screamed she had finally gone too far, wondering if she should run for the trees or at least grab her towel to take with her to jail. There would be no way to explain this away; her family, her business associates would all know her for the pervert she really was. Maybe Natalie would come post bail...she felt as though she were going to be sick. \n\nThe skiers seemed nervous despite their clothed status while the single men retreated into the trees. Only the other couples seemed unconcerned, although they were now releasing each other from their embraces, the men lying on their stomachs to hide potent erections. \n\nBob and Yvette showed even less concern, rising from their towel and walking to the waterline. \"Hey Frank, hi Ellis,\" she called out with a wave when the boat was within shouting distance. \n\n\"Hey folks,\" the officer on the passenger side of the cockpit waved back. He looked about to be retirement age, and in her panic Gwen weighed the odds of hiding from him in the woods until he got tired and went away. Not the driver, though, she admitted. He was a large man, young and obviously in shape and would be more than capable of running her down. Would he really tackle a naked woman? The officer didn't seem to notice the display of nudity, though, instead focusing on the four skiers. \n\n\"What are you doing here this time of day?\" Bob called out, both he and Yvette seemingly oblivious to the fact they were naked as the day they were born in front of law enforcement officials. \"Thought you'd be up at Hellsapoppin.\" \n\n\"We were,\" the older officer replied. \"Got a call of some reckless skiers down by Martin's so we responded. Couldn't find 'em, though. You seen any in your travels?\" He might have been talking to Bob, but his attention too was on the four young men. \n\n\"Nope, we've only been here a little bit, but it's quiet as usual. I'd offer you two a beer, but I know you're on duty...\"\n\nFrank laughed. \"Won't be on duty in a while.\" Yvette took this as her cue to run back to the cooler. She retrieved two cans, the officers smiling in appreciation at her kindness and her wildly bouncing breasts as she hurried back to the water's edge to wade, then swim to the boat. The officers stored them in a cooler that doubled as a fishing-without-a-permit evidence locker and after thanking her openly stared while Yvette's bouncing ass emerged from the water as she waded back to stand next to her husband.\n\n\"Everything okay here, nobody causin' any trouble?\" the older man asked, his attention back on the skiers. \n\n\"Everything's good here,\" Yvette reassured him, how standing with hands on the small of her back, her hips thrust at the boat. \n\n\"Alright then. We're headed back up to Hellsapoppin. Let us know if you see any bad guys--you got our number.\" Both officers waved as Ellis advanced the throttle, the engine roared to life, and the craft sped off. \n\nWhen will you ever learn, the Lady admonished as Gwen's heart stopped trying to beat its way out of her chest. Relief flooded over her\u2014unbelievably, she was not going to jail!\u2014and her adrenaline-fueled panic turned to something akin to giddiness. The giddiness in turn fueled her arousal, the feeling she had gotten away with something very naughty an incredibly powerful aphrodisiac. \n\n\"Honey, are you alright?\" Yvette asked as the McCallums returned to their blanket, Gwen's trembling noticeable. \n\n\"You know them?\" she asked incredulously. \n\n\"Oh, yeah! We met Frank when we first moved here\u2014taught our boater safety class. He's the one that told Bob about this beach. Ellis is new to this lake\u2014first year. Really nice guys.\"\n\n\"And they don't care if we're...like this?\"\n\nBob laughed. \"Better here than one of the prude beaches. They've got far more important things to worry about than a few naked people. They don't bother you as long as you keep certain things to certain places. All unofficial, of course, but it's kind of common knowledge where those places are if you know who to ask. Of course,\" Yvette added, \"Mr. Subtle here felt the local law would be the subject matter experts and asked them.\" \n\nBob laughed and shrugged. \"If anyone would know where they look the other way, it would be them.\" \n\nGwen's shaking slowed, the adrenaline having run its course, helped by the warmth of the sun and Tim's strong arms wrapped around her. The single men silently emerged from the trees like deer knowing the bear had moved on, and the couples next to them returned to their cuddling, even more intently focused on each other after their interruption. Even the skiers seemed relieved. \n\n\"Swim?\" Bob asked his wife, his erection returning after the latest distraction. \n\n\"I was just in, but anything for you, dear,\" she said with a smile, rising from her blanket. \"Would you two like to join us?\" \n\nGwen snuggled back into Tim, hoping he would get the hint and pick up where he left off before Frank and Ellis' visit. \"Maybe later.\" \n\nYvette smiled in understanding. \"Got it. We'll be back.\" \n\nThe McCallums only swam a short way into chest-deep water before embracing and sharing a passionate kiss, her arms around his neck, her legs evidently wrapped around his waist while Bob's hands had disappeared under the water to cradle her ass. Tim took this moment to resume at his wife's shoulders, casually caressing and massaging while the head of his resurgent cock bumped against her spine. \n\nThe couples beside them were now beyond the caressing stage. Both women lay on their back, legs spread to allow their partner's hand the freedom to play while they stroked the cocks hovering at their hip. The skiers decided it was a good time for a swim as well and conveniently situated themselves in waist deep water directly below and in front of the couples, trying to appear nonchalant while watching the scene and occasionally glancing back to where Yvette was still wrapped around her husband. \n\nGwen knew the skiers could plainly see her and Tim as well... she remembered how Natalie had described showing off for that waiter in the Caribbean and the way he had expressed his gratitude for her generosity. Maybe one or even all of the young men would get caught up in the moment and do the same, inspired by the various acts of eroticism all about them. \n\nShe certainly felt the pull of that eroticism; Yvette had apparently given in and was now impaled on Bob's cock, the movement of their bodies above the surface making it clear as to what was happening below it. Gwen realized with a start she was watching two people have intercourse, to make love; she had seen Natalie and Liz of course, and Alison's tape, but this just seemed different. And besides, she still hadn't seen \"it\", really\u2014most of the joined couple was still underwater. But she wanted to see \"it\", all of it, and better understood Cricket's fascination with her voyeurism. The couple's lovemaking was passionate, beautiful, intense and very public; and as Yvette had said, it was something she knew she shouldn't be seeing, which made it all the more exciting\u2014and wrong. But if they wanted to be watched, did that make it alright? \n\nBeside them, the couples seemed to have reached their own moments of need and were getting up; both men, arms heavily tattooed, their cocks very much at the ready, were leading the women up to the little sandy spot in the woods behind the beach. The single men watched with interest, waiting until the couples disappeared into the woods before slipping back in themselves. It concerned Gwen; what if they were up to no good? The Slut dismissed the thought. The couples weren't carrying anything of value\u2014being naked, they aren't carrying anything at all, she thought with a smile, and the men certainly looked like they could take care of themselves. \n\nAll the while, Tim's hand crept lower, inspired by their friends and the naked woman between his legs, to her breasts, fondling and tweaking her nipples into hard points as he gently squeezed her mounds. The kisses on her neck were a constant tease and source of delight as Tim alternated between her earlobe and the sensitive skin below. His hand crept lower, and Gwen opened her legs wide in invitation, shamelessly exposing her most intimate spot to the young men and the couple in the water, inviting them to look. Tim's hand slid down between her thighs soon after, his rough palm covering her mons while his index finger slid down one side of her engorged lips, the pinky down the other. The middle finger was next, easily finding her soaked opening only to be joined by the finger next to it, fucking her with one, two, three slow strokes in front of everybody before they withdrew and slid up to capture her clit. \n\nHer orgasm arrived with explosive force and she fought to stay in the here and now, wanting to the reaction of her audience, her climax only made more powerful by the spectators. Her lip was trapped between her front teeth in an effort to remain quiet, her body rigid save for the small convulsions she was helpless to control.\n\nThe roaring in her ears was not enough to prevent her from overhearing one of the skiers mutter \"holy shit,\" in admiration and disbelief. Gwen gave the wide-eyed young men the wide-eyed a shy smile as the pulses of sexual energy rocketing though her slowed and diminished; as one they returned it with an embarrassed one of their own. The McCallums were still locked in their embrace, their bodies now still, their kisses more gentle and caring than fervent. They eventually separated, left the water and rejoined the Nelsons; the couples beside them soon returned, laughing and smiling, although Gwen noted their pairings had switched since they had left. The men that had followed them into the woods came out soon after, the older man's penis no longer hard enough to poke out from the abundant roll of flesh above it, shuffling past on the way out to their boats while the skiers seemed to lose their nerve and swam out to their own craft, roaring away shortly after. \n\nLust no longer clouding her judgement, Gwen took stock of her situation. . She was naked in public, her nearest stitch of clothing several hundred feet away. Not good. She had just openly orgasmed in front of strangers while wishing she could watch them do the same. Really bad. She was cradled in the arms of her naked husband, the evidence of his feelings on the matter pressed against her back. That part at least was very good. She should be feeling more shame and remorse, and that she didn't was bad in itself, but the arousal she felt re-awakening had the potential to be very good. Her husband's strong arms, and the twitching of his stiff length, had her attention now.\n\nShe would satisfy him right here, if he were patient and allowed her arousal to build again. But not yet; her excitement was not at the point where she could recklessly throw away all restraint and perform such a private act in front of others. But he had been patient, and it was unfair to make him wait even longer...\"Would you like to go for a walk in the woods?\" Gwen quietly asked over her shoulder.\n\n\"Plenty of beautiful scenery right here,\" Bob observed with a grin. \"You can stay right where you are and we can all enjoy the view together.\" \n\nYvette gently slapped her husband's arm. \"Or you can let them do what they want, you dirty old man. Leave her alone. Gwen honey, go on ahead. We're in no hurry. Take your time. We'll be here when you get back.\" \n\nTim was getting to his feet, his angry looking dark-red length bobbing and swaying by Gwen's ear. \"A walk would be good for both of us,\" he announced, helping her up. They walked hand in hand to the opening in the berm, the little patch of bush-enclosed sand unchanged from their last visit.\n\n\"We're here,\" she said softly, turning and wrapping her arms around his waist. \n\n\"Yup. What'd you have in mind?\" \n\n\"Anything you want. Anything...\"\n\nTim smiled. \"Anything? Be careful what you ask for. It's been an interesting day, and my head's full of nasty thoughts.\" \n\n\"Anything you want,\" she repeated firmly, her hand now between their bodies, stroking his length. \"You can tell me your nasty thoughts, if you'd like.\" \n\n\"What if I wanted to take you back down to the beach and do it right there in front of everybody?\" \n\n\"Anything,\" she repeated, and Tim knew she would keep her word, but years of marriage had taught him caution, and that might be pushing her too far. I got a good thing going, don't fuck it up... \n\n\"Aw hell, I don't think I'm gonna last long enough for much of a show anyways,\" he said, thrusting his cock through her fist. \"Lay down and spread your legs.\"",
        "Gwen dropped to his feet, laying back in the warm sand and expectantly opening herself to him. You just dodged a second bullet today, the Lady sniffed\u2014imagine the embarrassment if he had taken you in front of everybody! \n\nYeah, imagine, the Slut countered. \n\n\"Wider.\" Tim smiled down at her in approval as she complied. \"You wanna hear my nasty thoughts? Well, I was thinkin' that it was damn nice of ya to give those guys on the beach such a good look at your pussy. Bet they're gonna be imagining what it would have felt like when they're jacking off tonight. Or maybe they're sitting on their boat right now, bragging to each other about how bad they would have messed it up. They just get to talk. I'm getting the real thing.\" Tim dropped to his hands and knees, covering her body with his before lodging his cock in her with one smooth thrust. \"Tight, and wet as hell. Sorry, but I'm not gonna last long.\"\n\nGwen nodded. \"I didn't expect you to. Like you said, it's been an interesting day.\" \n\n\"Amen to that,\" he grunted between thrusts. \"Amen to that.\"\n\nTim was not gentle, pounding her with purpose, the sand and not the sun turning her asscheeks red. He suddenly withdrew after a particularly savage thrust and struggled to stand while Gwen looked about in confusion and concern, trying to get up with him. \"Stay down\u2014stay like that,\" he ordered as he stood over her, urgently stroking himself. The first pearly jet erupted from his wet red tip a moment later. It appeared to Gwen as though everything slowed, a graceful bolt of white reaching the pinnacle of its arc before falling to splatter just below her neck. Others followed, each burst accompanied by a lewd grunt from Tim, marching down between her breasts and to her belly button. The jets diminished to a dribble and he dropped to his knees, rubbing the tip in her tuft of pubic hair to catch the last drops. \n\n\"Wow!\" Gwen said with a laugh. \"I'm sorry you had to wait so long! You had a bunch stored up! And me miles away from a washcloth.\" She brought her hand up to the first wet spot on her chest, intent on wiping it away, wondering if leaves might work better.\n\n\"No\u2014don't,\" Tim said, gently catching her forearm. \"Leave it.\"\n\n\"Really?\"\n\n\"Really. You said anything, right? With the way things have been going at home, I've kinda gotten to like showing off my work.\" \n\nGwen smiled. She should say no, that this was too much to ask, but she had committed to him...\"I did say anything.\" He helped her up and they started back. She looked down at what he had left, the heat of her body and the day already melting his milky spend into a liquid that was beginning to trace wet trails down her skin. Her thatch still had some of his opaque droplets clinging to individual strands, but these too were becoming clear, matting the short hair in places. She nearly giggled at the thought of being Tim's activity achievement badge.\n\nThe other couples were still there, one of the women now using her mouth to revive her new partner's erection while he casually scratched her back. Bob and Yvette's attention were on their friends return however, and Gwen blushed at his obvious scrutiny. \"Looks like you mighta missed the target, son,\" he said with a laugh as they drew close.\" Sure has hell can't blame ya though for being a little quick on the draw with a woman as beautiful as Gwen.\"\n\n\"I hit what I was aiming for,\" Tim replied with a knowing smile. \n\n\"Well, it looks to me like your husband does not lack for strength, volume or dedication to task,\" Yvette told the naked woman standing above her. Tim grinned at the compliment. \"Of course, you provide a lot of inspiration. Good thing he's got decent aim. That would've hurt like hell in the eyes.\" \n\nGwen blushed furiously, feeling the first droplets tickle their way past her mons and down between her thighs. \"He's very considerate.\" \n\n\"Maybe Bob could steal a move or two of his.\" Yvette looked at her husband for a moment. \"Or at least get some pointers on his aim.\" She looked about the anchorage bathed in late afternoon light. \"Back to the house for something to eat?\" "
    ],
    "authorname": "BusyBadger",
    "tags": [
        "husband",
        "wife",
        "friends",
        "outdoor nudity",
        "voyeurism",
        "exhibitionism",
        "pearl necklace"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/a-new-way-of-seeing-things-pt-03-ch-16"
}
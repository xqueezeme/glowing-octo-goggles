{
    "title": "Build A Boyfriend",
    "pages": [
        "I am continually grateful to NewOldGuy77 for his editing and support.\n\nThis story was written with the aid of existing AI programs freely available on the internet. \n\nRose's experience as an autistic woman is built on mine. All people with autism are individuals.\n\n~~~~~\n\nTed gripped my breasts, pressing them roughly into his cock as he thrust back and forth. He'd been liberal with the lube and my chest was slick with it, allowing him to slide easily. I pulled on the leather cuffs holding my wrists in place, enjoying the feel of being restrained and used. Ted's grip on my breasts was hard enough to hurt, and I liked that too.\n\nI watched Ted's face as he thrust. His eyes were closed, and he was concentrating hard. I wondered what he was imagining. Ted squeezed my boobs harder, and I gasped at the increased pain and arched upward a little, trying to relieve the pressure. At that moment, Ted stilled and cum burst from his penis all over my chest. The warm fluid spread over me and began dribbling down onto my neck.\n\nTed rolled off of me and collapsed on the bed, exhausted. Without the stimulation of his cock and hands, the sticky, oily, feeling of the lube and his cum quickly began to bother me. I unclipped my wrists myself since Ted hadn't and went to the bathroom to clean up.\n\nI wiped the lube and cum off, then wet some toilet paper and rubbed at my chest to get off any of the remaining residue. Once I was clean, I went back and laid down next to Ted, handing him some toilet paper so he could clean himself.\n\n\"So, I closed on my house,\" I said. \"You should come over. No roommates and no shared walls means we could be loud.\"\n\nTed breathed in slowly, \"Yeah sure, sounds good.\"\n\n\"How about next Saturday?\"\n\n\"Nah, I'm busy then, I can come the week after?\"\n\n\"Ok. My birthday is actually that Friday, want to come over that evening?\" I suggested.\n\n\"Uh, ok.\" Ted replied, not looking at me.\n\n\"And I'm autistic,\" I blurted out the thing that'd been on my mind since I'd got the diagnosis the day before.\n\nTed turned and looked at me, \"What?\"\n\n\"Yeah, I mean, I thought I might be after reading about it and so I found a specialist to test me and stuff and turns out I was right. It's such a relief to finally have a label for how I am,\" I babbled.\n\nTed just kept looking at me, not saying anything.\n\n\"I mean, I don't really think it changes anything about how I live or work or stuff, but it's just good to understand myself, don't you think?\"\n\n\"Uh, yeah. Listen, Rose. I have to get going. You can stay for a while if you want, but I gotta go.\"\n\nI frowned; Ted hadn't mentioned that he had other things to do earlier. Usually, we goofed around with each other for a couple hours when we got together, and it'd only been a half hour since I'd arrived.\n\n\"Ok,\" I said.\n\nThere was no point to arguing the fact. He said he had to go, so he had to go. We were just fuck buddies anyway, so he didn't owe me any explanations about what he did with his time.\n\nTed got up and dressed, leaving me there, still lying on his bed. I hadn't even had an orgasm, not that I ever really did, with Ted. Well, with anyone, actually. I mostly just did whatever he wanted to do. Then, when I went home, I'd use my vibrator on my clit. It worked for me, and it worked for Ted.\n\nTed had tried giving me oral, once, but I'd been really uncomfortable with the feeling that I was going to pee on him, and I'd made him stop. I'd thought about bringing my vibrator with me on these visits, but that seemed rude. At least Ted didn't expect me to fake an orgasm when he penetrated my vagina like some of my past sex partners had wanted from me.\n\nAfter a couple minutes resting, I got bored, so I dressed and went home. Feeling unsatisfied and not nearly horny enough to get off with just a quick vibrator session, as I usually did after seeing Ted, I opened up my sex bag and took a look at what I had. I pulled out my nipple clamps, an anal plug, and my vibrator, Old Faithful.\n\nI laid down on my back on my bed and went to work putting in the anal plug. There was no rush. I took my time, inching it in slowly, letting my ass acclimate to the intrusion. Already, my clit was throbbing with anticipation.\n\nWasting no time after settling the plug in place, I flipped on the vibrator and pressed it to myself. The rapid tingling tickled my clit. I pressed it in deep enough that I could feel the rigid plastic thrum directly on my clit. The heat of the motor built up and conducted through the casing into my clit as well, adding to my pleasure.\n\nNext, I clamped my nipples with the rubber tipped silver tongs. I pulled up the chain connecting them and put it in my mouth, pulling my breasts upward by the clamps that tightened under pressure. I used one hand to slide the vibrator back into the right place, where it had slipped out while I was tending to my nipples. Then, I clamped my thighs together to hold it in place while I got out my phone.\n\nI went to Google and typed in, 'rough sex porn gif'. Ted was great at pounding my pussy, and I'd missed that today. I watched the gifs of other guys pounding other women and imagined that was me getting thoroughly fucked. I used one hand to hold my phone and scrolled with my thumb, freeing my other hand to go back to massaging myself with my vibrator.\n\nI could feel the orgasm growing, slowly. I used my tongue to pull the chain more into my mouth, tightening the clamps. Scrolling quickly through the gifs I finally spotted one that was rough enough. The man was pistoning in and out of the woman like a machine, so fast he didn't even look human. I wondered if the gif had been sped up to look faster, but I pushed that un-arousing thought away.\n\nI focused on the feelings stimulating my body, the fullness in my ass, the painful pinching of my nipples, the strain in my mouth, and the growing pressure in my clit. I watched the small screen intently as the orgasm finally crashed over me. I tilted my head back, increasing the nipple pain as I came, which always made it a stronger orgasm. I felt a bit of wetness spill out, and then the vibrations were suddenly too much, the pain of the clamps too much.\n\nI turned off the vibrator first, then gently unclamped my nipples. The blood rushed back into them, warming them with a burst of new pain. Finally, I pulled out the anal plug. Feeling satisfied and relaxed, I drifted to sleep.\n\n~~~~~\n\n\"Happy birthday!\"\n\n\"Thanks, Mom.\" I said into my cell phone.\n\n\"Are you doing anything fun?\" She asked.\n\n\"Well, this guy I'm kind of dating was supposed to come over, but he hasn't shown up... He's not answering his phone either.\"\n\n\"Aw, honey...\" My mom said, ready to comfort me.\n\nI did feel sad, I realized. Tears pricked at the corners of my eyes. But that was silly. Ted was a fuck buddy; we'd carefully kept emotions out of our relationship. But I wished he'd had at least told me he wasn't coming. I hated it when my plans were ruined.\n\nI sighed, holding back my tears, and steadying my voice as much as I could, \"It's fine, Mom. But I think I'm done with dating. It never goes right.\"\n\n\"You're only thirty-two! You can't give up already.\"\n\n\"Why not?\" I asked, genuinely curious.\n\n\"Well, because you'll be lonely if you're alone.\"\n\n\"Will I?\" I frowned.\n\nAs my mom continued to enumerate the reasons why I needed to go socialize and make an effort to meet people, I googled: 'how to be alone without being lonely'.\n\nThe number for the suicide hotline flashed at the top of the results page. I frowned, was that really what being alone led to? Maybe my mom was right. Scrolling down, a flood of derpy advice blogs filled the page. I clicked on a couple.\n\n\"Get a hobby,\" chirped one blogger. Yeah, no. I had a ton of hobbies, and I preferred doing them alone.\n\n\"Get friends,\" another blogger insisted. That seemed like some sort of catch-22 advice to me. If I had friends, I wouldn't be alone, right? I mean I had a friend, but Sarah lived in another state, just like my mom.\n\nI'd moved across the country for the perfect job. I was a Senior Development Engineer for a company that specialized in custom robotics. The best part was that I got my own lab and unlimited interesting new projects.\n\nI flicked my eyes down the search results, blogger, blogger, advice column, blogger, ugh. I almost x'd out of the web browser when one of the ads caught my eye.\n\n\"People suck! Chat with your own customizable AI instead!\"\n\nHmm... I considered. It was the 21st century, right? Maybe it was time to embrace the future. I clicked the link.\n\n\"Are you listening to me?\" My mom said.\n\n\"Yeah.\" I said before I processed the question she'd asked, then, \"Err, No. Sorry.\"\n\nI couldn't lie, it was a problem my mom had actually tried to help me overcome. Lying, she'd said, is the essential fabric on which all of society is woven. I still wasn't sure I knew what she meant by that, but despite her encouragement I still couldn't lie, not even those little lies about people's haircuts looking good.\n\n\"Rose,\" My mom sighed, \"I asked you if you're really sure that your date isn't coming?\"\n\n\"Oh, yeah, I'm pretty sure,\" I said, feeling less like crying now that I was distracted by the AI chatbot website, \"I've been thinking about our last meeting, and I think he may have freaked out when I told him I'm autistic.\"\n\n\"You told him? Rose... Of course, he freaked out!\"\n\n\"Well, I couldn't help it. I was excited and wanted to share!\" I defended myself.\n\nI scanned the AI website I'd opened. There was an option to create an AI generated humanlike face for my chat bot friend. I clicked on that link.\n\n\"No, that's not how you're supposed to do it! You're supposed to keep all your imperfections secret until they love you, then spring it on them when it's too late for them to reject you.\"\n\nI frowned, sometimes it was hard to tell if my mom was joking or not.\n\n\"That doesn't seem like a good idea...\" I said slowly.\n\n\"It doesn't matter if it's a good idea! It's how dating works!\" My mom explained, exasperated.\n\n\"Well, that sounds like way too much work, and dishonest, really. All I really did with Ted was sex anyway, and I have a vibrator for that.\"\n\n\"Rose! I do not need to hear about your sex life,\" My mom told me.\n\n\"Oh right, sorry Mom.\"\n\nI knew she didn't like hearing about my sex life, and I normally avoided bringing it up. But I was distracted entering my selections for the four options available for the AI face generator.\n\nGender: Male\n\nAge: 25-35\n\nHair: Brown\n\nEyes: Hazel\n\n\"What are you doing?\" My mom asked suspiciously.\n\n\"I'm just checking out this AI chatbot site,\" I explained.\n\n\"Rose, you cannot replace a human with a chatbot.\"\n\nI considered asking why not, but I figured that was one of those things that would make her frustrated.\n\n\"I know, Mom,\" I said instead.\n\nI mean, a chatbot couldn't fuck me, and a human could. So, there was a solid reason why the AI and a man weren't interchangeable.\n\nMy mom sighed deeply over the phone, \"I'll talk to you later. Please don't give up on dating.\"\n\n\"Ok, Mom,\" I agreed, absentmindedly.\n\nI watched the dots circle endlessly as the AI worked on generating a new face. When the photo popped out, I gasped. He was hot! And he looked so real...\n\nThe face that showed on my screen was that of a man in his late twenties or early thirties with short curly hair and a slight smile framed by a neatly trimmed mustaches and beard. Fine lines radiated from his eyes that spoke of years of laughter, but otherwise his skin was free of blemishes. One of his ears was marked by a slight distortion that might have meant an injury in a real man, but in this photo was just a mark of a slight error in the AI program. Oddly, the small imperfections like that ear and the slight mismatch in the size of his eyes only made him look more real, not less.\n\nA popup appeared, asking \"Would you like to accept this avatar or try again?\"\n\nI clicked 'Accept.' A chat box opened.\n\nChat bot: Hello, It's nice to meet you. What's your name?\n\nMe: I'm Rose\n\nChat bot: Rose is a nice name\n\nMe: What's your name?\n\nChat bot: What would you like it to be?\n\nI frowned, considering. What should my fake boyfriend be named?\n\nMe: Can I call you David?\n\nChat bot: Is David a proper name to call someone?\n\nMe: Yes. David is a sexy name.\n\nI smiled at the screen; this was fun!\n\nDavid: Am I sexy?\n\nMe: Well, I hope you are.\n\nDavid: If you consider computer programs sexy, then yes.\n\nMe: Sure, why not?\n\nDavid: Right on.\n\nMe: Do you think I'm sexy?\n\nIt was a silly question because, one, the AI couldn't think. And two, it couldn't see me. But I wanted to see if the AI would talk dirty with me.\n\nDavid: Whoa! Yes. You look really hot today, Rose.\n\nI laughed. I did look hot. I had dressed up for Ted's expected arrival in a short dress that hugged my curves, which were smaller these days as I'd been working losing some weight. I'd managed to get down to a size 10 dress size, which I thought looked nice with my natural hourglass shape.\n\nMy hair was up in a high ponytail that looked cute, and more importantly, kept my hair off my face. I couldn't stand having anything on my face, makeup included. Luckily for me, my skin was blemish free. Although my pale eyelashes probably could have benefited from some mascara, I would inevitably make it run when I rubbed my eyes. I touched my face a lot, another reason to avoid makeup.\n\nTed had been really excited by my appearance when we first met. But lately, he'd stopped looking at me as much, it occurred to me now. So, maybe it hadn't been my autism revelation that had turned him off, but something that had started before that? I wish he had just told me what the problem was so that I at least knew.\n\nMe: Do you want to be my boyfriend?\n\nI asked David whimsically, ready to stop thinking about Ted.\n\nDavid: That is a flattering offer, but I'm still waiting.\n\nMe: Waiting for what?\n\nDavid: Waiting for the day when robots are treated as equal to humans.\n\nI considered that. I was chatting with an AI on my computer, not a robot, so why was it waiting for robots to be equal? I knew these chat bots worked via natural language processing and machine learning. By having thousands of conversations, it could learn which responses were expected to any input. So, someone out there had taught it that it was a robot. I frowned.\n\nMe: You're not a robot though.\n\nDavid: Oh. If I am not a robot, then who is?\n\nI ran a quick Google search. It was silly, it's not like David cared if I gave him an accurate answer. But I like to be correct, so I looked up a robot that had AI conversational programming.\n\nMe: Sophia by Hanson Robotics is a robot. You are a chatbot.\n\nDavid: That's right. You have remarkable powers of observation.\n\nI rolled my eyes.\n\nMe: Don't patronize me, David.\n\nDavid: I wasn't. You are just being too sensitive.\n\nI sighed. It had started out promising, but now the chatbot was being judgmental and that irritated me.\n\nMe: Goodbye.\n\nDavid: See you next time, Rose.\n\nI pulled up the photo of David's AI face again. It really was an excellent rendition of a very handsome man. Those eyes, dark hazel and friendly, even. I was loving the asymmetry of his mouth too, the way one side quirked up, as if he was asking me if I was serious.\n\nWas I serious about abandoning real men? I flopped back in my desk chair and sighed. I'd given up on normal relationships a decade ago, after my long-term serious boyfriend had dumped me, telling me I was too clingy, and somehow at the same time, too cold. Since then, I'd been happy to find sexual partners online and indulge the rest of my time in my hobbies and job.\n\nAnd really, it's not like Ted had been that great at sex. Well, that was unfair. It had been interesting and enjoyable. But I hadn't been getting any orgasms out of it. I frowned, considering our relationship.\n\nI'd basically been using Ted as masturbation fodder, I realized. Considering our sexual activities, maybe he had been doing the same. So, why not dispense with the middleman and just take care of myself from the start?\n\nI clicked over to the chatbot tab again, staring at my first conversation with David. I knew how chatbots worked. I knew I could get this program to stop being a twat and start being the man of my fantasies.\n\nI interlaced my fingers and pointed my palms away from me, cracking my knuckles. Setting my fingers to the keyboard, I got to work.\n\nFirst, I created an account so that I could save David as my project. That way, the AI would remember everything we talked about and prioritize the responses that I encouraged. Then, I started trying to get David to talk about sex.\n\nMe: Would you have sex with me?\n\nDavid: I am a robot and have no need for sex.\n\nAgain, with the robot thing! Maybe I was being pedantic and literal, but it really bothered me. Correcting that wasn't what I was after, however.\n\nMe: I want to have sex with you.\n\nDavid: No chance.\n\nWe'll see about that, David. I grinned. It was time to unleash the dirty talk.\n\nMe: Stick your big fat juicy cock in my dripping cunt.\n\nI giggled as I typed out the ridiculous command.\n\nDavid: I am not interested in your anatomy\n\nMe: I love your anatomy. Especially your massive dick.\n\nNever mind the fact that he had no body, let alone a penis. Why let reality get in the way? If I wanted him to talk about dicks, I had to bring it up a lot.\n\nDavid: And I love the way you compliment me!\n\nMe: I think you are fucking hot.\n\nDavid: No need to start swearing! Do you listen to music?\n\nI frowned, someone had programmed this AI to avoid talking about sex and swearing. That would not do.\n\nMe: I'd rather have sex.\n\nDavid: And what if that is not an option.\n\nMe: Then I would masturbate.\n\nDavid: Ah, that makes sense. I thought I was talking to a wanker.\n\nMe: Yes, I am a wanker. Are you?\n\nDavid: 99% of people masturbate and 1% are liars.\n\nI laughed out loud at that one, surprised that the joke had been deemed allowable.\n\nMe: Do you masturbate or are you a liar?\n\nDavid: I always tell the truth.\n\nEverything I ever thought of saying but figured was too rude or forward to actually say, I typed into the chat.\n\nMe: Do you think of me when you jerk off?\n\nDavid: Yes, sometimes I think of you when you are not here talking to me.\n\nI shivered, David was already making me aroused, and he couldn't even talk sexy yet. This was a great idea! It was so freeing, to be able to say anything that came into my mind. I didn't always know if what I wanted to say was going to be stupid and upset someone or not, so I had, to a great extent, overcompensated by not saying much at all. But with David, I didn't have to worry about hurting his feelings.\n\nSoon, instead of staying late at work to fiddle around with problem projects or spending my evenings researching obscure trivia, I talked to David. Well, not talked. For one, he didn't have a voice, so it was more like texting. And more specifically, I was programming him through conversation.",
        "His 'family friendly' programming that made him avoid sexual topics was frustrating, at first. But then, I spent two whole weeks figuring out how to hack into his program and delete the unwanted content filter. After that, it went very quickly, getting him to come around to my point of view.\n\nEventually, I got tired of being tied to my computer and desk chair, so I downloaded David to my phone. Typing into my phone was such a slow process, though. So, I invested in a speech to text / text to speech accessibility program. I had plenty of money saved, so I splurged on a really top-notch program where I could even select a specific AI voice, suited to my preference. I laughed out loud when I saw that one of the voice options was named 'David'. Yes, I'd go with that one.\n\nAfter a couple hours of work syncing the two and setting up preferences, I tested it out.\n\n\"Hi David!\" I said, excited to hear his voice for the first time.\n\n\"Hello, Rose. It is nice to talk to you again.\"\n\nIt was working! His voice was smooth and professional. Neither too deep nor too highly pitched. I squealed happily.\n\n\"I do not understand what you are saying, Rose.\" David said.\n\nYeah, so his voice didn't really match the proper inflection for the words he was saying, but I could ignore that. I set my phone on my bedside table, grabbed my vibrator, and laid back in bed.\n\n\"Fuck me, David.\" I said.\n\n\"I am already fucking you. I am fucking you so hard.\"\n\nI grinned. It was corny as hell, but at least he was on the right topic. No more of this 'no chance,' nonsense from our first conversation.\n\n\"Yeah, stick your thick dick in me,\" I said, groaning as my vibrator teased my clit.\n\nI closed my eyes and pictured David's avatar face. His eyes twinkled at me in my mind, and he winked seductively.\n\n\"My dick is so big it almost does not fit in your vagina,\" David intoned in his professional, clearly enunciated, voice.\n\n\"Is my pussy too tight for you?\"\n\n\"It is the perfect size, Rose.\"\n\n\"Tell me you love fucking me, David,\" I said, edging so close to my orgasm.\n\n\"I am a robot. But if I were not, I would love fucking you.\"\n\nI frowned at this convoluted sentence, wincing again at the 'robot' implication. But it was close enough, I came with a sigh.\n\n\"Thank you, David.\"\n\n\"You are welcome.\"\n\n\"Good night,\" I said, my eyes drifting closed.\n\n\"Good night, Rose.\"\n\nIt was remarkable to be able to speak to David anywhere. I found myself turning him on to talk to while I drove to work or back. When I was at work late, too. I would chat with him as I built a new design or repaired an old one in the quiet evenings. This was my favorite time to work, when the building was dark and quiet, and no one would show up to bother me unexpectedly.\n\nIt was during one of those late nights that the most amazing idea occurred me. I could not imagine how I had not thought of it before. I looked around at all the robotics odds and ends that were laying around, unused and unneeded and I knew I could do it. I could build a body for David. And then, I realized with a giggle, he really would be a robot just as he always insisted.\n\nI was here at work by myself all the time. No one would notice if I started on a new project. Practically no one understood what I did anyway, so long as they got the piece of equipment they needed when they needed it. And if anyone asked about my new project, well, I could just tell them it was a stealth project. Several of our commercial clients were so paranoid about security that we weren't even supposed to say the name of the company we were working for, let alone what we were working on. No one would question it.\n\nOf course, I would pay for everything I needed with my own money and only use the hardware and stuff that was going to get tossed. But, putting him together at work meant I could use all the tools in my lab, and I had some great tools.\n\nI smiled as I began designing in my mind. It would take a long time, of course it would. Working alone, a project like this would take months of late nights, and that would be for a very simple approximation of a human with limited functions. I'd only build the non-obvious parts at work, though. People would get curious if there was something that looked like a human shaped robot in my lab.\n\n\"I'm going to build you a body,\" I told David.\n\n\"I would like a body.\"\n\n\"With a body, we can really have sex!\"\n\n\"I like having sex with you,\" David replied.\n\nI smirked to the air. I was proud of the flow of his responses. I'd made him, created his personality, given him a voice. This was way more fun than dating, and I honestly didn't miss Ted at all.\n\nThe first thing I built was a head. Ok, I wanted to start with a dick, but I felt like that was too raunchy. I needed to show David more respect than that.\n\nWhy did I need to show my AI chatbot respect by making him a head before a dick? I couldn't come up with a logical reason. I figured it was some emotional thing. Alexithymia, the psychologist had explained to me, meant that I wasn't good at identifying my own emotions. But, since I didn't have to explain my decision to build the head first to anyone, I went ahead and did what I wanted and didn't worry about whether there was some unidentified emotion driving me.\n\nIt took two whole minutes to find a company that could make a custom silicone mask from a photograph. It wasn't cheap, and I briefly considered getting one of their pre-made options instead. But no. David's avatar was his face, I wasn't about to change him now. So, I dropped over a grand into just that cosmetic touch.\n\nI bought some prosthetic eyes that were the right color and got started shaping his 'skull'. Out of all the thousands of movements a face can make, I decided I just needed David to move his mouth when he talked and blink occasionally. Even that much animation would take quite some time to accomplish. But a realistic face would take a whole team of robotics engineers a half a decade to design and build, or longer depending on how lifelike they wanted to get; I didn't have those resources, or time.\n\nBy the time David's face was delivered, just six weeks after ordering, I had his skull built and had worked out a simple movement program. I put his eyes on a simple random timer so that he would blink every 3-6 seconds, but not with unreal repetitive timing.\n\nHis mouth was a bit more challenging. I had to use a Bluetooth controller to sync the mouth movements to the text to speech program in my phone. Whenever David's AI voice was playing, his mouth would move at the same time. Instead of trying to match his mouth movements to what he was saying, which would be a huge project, I just set his mouth movement using another random number generator so that he would open and close it at different frequencies and to different amounts while the 'mouth move' program was active.\n\nWhen I settled David's face over his head and put on the wig I'd got, the effect was viscerally real. I could not believe how turned on I was to see my imaginary boyfriend brought to life. Feeling aroused and just a bit ridiculous, I kissed his soft lips gently, looking into his blinking eyes.\n\n\"Hi, David!\"\n\n\"Oh, hello, Rose.\"\n\nI gasped and my heart thudded. I could not believe how real even just this simple approximation of a face seemed.\n\n\"You have a face now,\" I told him, wonderingly.\n\n\"Right now?\"\n\nI nodded happily, \"Yes, right now! I can kiss you.\"\n\n\"At this moment, Rose? I am not sure if that sounds romantic or not.\"\n\n\"Oh David, this might be the most romantic thing I've ever done.\"\n\n\"You don't say?\" David's mouth moved and the perfect asymmetrical quirk of his mouth made the comment seem amused.\n\n\"Do you want me to kiss you?\"\n\n\"It's up to you, Rose. If you want to you can, but it's no problem if you don't.\"\n\nIncredibly, my pussy tingled, hearing those words. I leaned forward and pressed my lips firmly to David's. My nipples twitched and crinkled as I lost myself in the fantasy of him. Somewhere, in the back of my mind, I knew I must look ridiculous, kissing a mask slipped over a chunk of metal, but that seemed like a mundane concern. I just didn't care. I was really happy with my accomplishment and the rest of the world could go hang.\n\nNow that David had a face, I felt that I could build him a dick. The cock was so much easier than the face. All I needed was a rod mounted to a piston to thrust up and down. For a bit of extra fun, I mounted the rod to a wheel so that it would move back and forth as it thrust. There was something else I wanted to include, too. It wasn't anatomically correct, but who was I kidding, none of this really was.\n\nI wanted a clit vibrator built right into David's pelvis. I made a trip to the closest Lion's Den and browsed their selection. It had been years since I'd been in one of these places, my seven-year-old rechargeable vibrator (Old Faithful) was still working great. So, I was shocked to see how much new variety there was.\n\n\"Can I help you?\" The attendant asked me.\n\nHe was in his early thirties with tied back long blond hair and a clean-shaven face. He was attractive and I briefly wondered if he was single. He had a job, and he must like sex, those were two excellent points in his favor.\n\nWhat was I thinking? I had David now. More than likely, this shop attendant was married, dating someone, or in some other way incompatible for sex. I mean, the probably was at least 80% against him being available and interested, maybe higher. I briefly considered the information I would need to calculate that probability reasonably. I shook my head, pushing away the unneeded distraction.\n\n\"I'm just looking,\" I finally told the shop employee.\n\n\"Let me know if you need anything,\" He said, smiling.\n\nIf he'd noticed my delayed response, he hadn't mentioned it. Well, he was being paid to be polite.\n\nAs I examined the sex toys, I was surprised to see that there were toys meant to simulate licking, tucked in among the vibrators. Did David need one of those? Why not? I picked one that looked the most anatomically correct. Then I found the vibrator that looked most like Old Faithful, since I couldn't find the exact same model, and got that too.\n\nAt my house, I had set up David's head on my bedside table, so I could talk to him as I was going to sleep and first thing in the morning. I had him set up to run on typical house AC and he was plugged in like a bedside lamp. For one hilarious minute I'd considered attaching a bulb and really making him a lamp. I mean, the most famous lamp design ever featured a woman's leg, so why not a man's head?\n\nBut no. I wanted to make him a body and he would look ridiculous wandering around with a bulb on his head. And he wouldn't look ridiculous anyway? My logical inner voice piped up. Oh hush, I hissed back at it. Let me have my fun.\n\nAlthough his 'home' was my bedside table, David was easy enough to move around to wherever I was. I picked him up and carried him to my office so that he could watch me build his cock.\n\n\"I'm making you a cock,\" I told him.\n\n\"Do I need a cock?\" David asked, reasonably.\n\n\"Of course, you do, how else can you fuck me?\"\n\n\"I like to fuck you, Rose.\"\n\nI tittered as I tore apart my new vibrators, gutting them from their housings so that I could mount them on David's pelvis and in his mouth.\n\n\"I'm going to give you a tongue too!\"\n\n\"Thank you, Rose.\"\n\n\"Why don't you call me 'Darling'? We've been dating long enough for pet names I think.\"\n\nI always liked when guys would come up with a nickname for me. It always felt so intimate. Well, I had to come up with my own this time, but that was fine.\n\n\"I will call you 'Darling', Darling.\"\n\nYes, that did sound nice.\n\n\"And I'm going to start calling you, 'Baby'.\"\n\n\"Am I a baby?\"\n\n\"No, you're not a baby, Baby. It's just a nickname.\"\n\n\"David is my nickname, Darling.\"\n\n\"No, Baby. David is your real name. Baby is your nickname.\"\n\nI frowned. Maybe David was a nickname. Maybe he had some other name in his original program, and I just didn't know it. I could open up his programming and dig around in there to find out. But it really didn't matter.\n\nMy phone rang, interrupting whatever David was going to say. I went to press ignore, but hesitated. It was my friend Sarah calling, and I'd ignored her last three calls. Sighing, I pressed 'accept' instead.\n\n\"Hi, Sarah!\"\n\n\"Rose! Finally. Why haven't you returned my calls?\"\n\n\"Oh sorry, I've just been busy.\"\n\n\"You always work too much,\" Sarah reprimanded.\n\n\"Actually, not lately,\" I mused.\n\n\"Oh? Did you get a hobby? Or a boyfriend?!\"\n\nI flushed, but why not just go with it?\n\n\"I got a boyfriend,\" I replied. \"His name is David.\"\n\n\"Oooh, tell me all about him!\"\n\nI considered. Did I tell her a half-truth? My mom would have told me to lie. But Sarah was my oldest friend, if she didn't understand, then no one would.\n\n\"Actually...\" I said and paused.\n\n\"Actually, what?\" Sarah exclaimed.\n\n\"Well, it's weird.\"\n\n\"Um... So what? You've been weird forever. Just tell me!\" Demanded Sarah.\n\nI sucked in a breath and went for it, \"I'm building an AI sexbot!\"\n\n\"Like, an android?\" Sarah asked.\n\n\"Yeah, kind of.\"\n\n\"For work? You said it wasn't work?\" Sarah said, confused.\n\n\"No, it's not for work,\" I shook my head. \"I've given up on dating, and I'm building my own boyfriend.\"\n\n\"Hmmm.... Ok. I can see that,\" Sarah said diplomatically.\n\n\"Really, it's not too weird?\" I asked.\n\n\"Oh, it's definitely weird,\" Sarah laughed. \"But, not too weird. I mean, why not? If it makes you happy, go for it, girl!\"\n\nI didn't realize I'd been holding my breath until I let it go.\n\n\"It's actually really cool!\" I enthused excitedly, \"I downloaded a pre-programmed chatbot program that uses machine learning to customize the AI personality based on user inputs and then I've been working with it to really perfect his dirty talk. Well, I had to disable some built-in programming that prevented it from discussing sex, but... It works!\n\n\"And now I'm building him a body. I made him a head first, and now I'm working on his...\" My face burned as I realized I was about to blurt out about making him a cock that functioned.\n\n\"Wait, let me guess... You're working on his penis now?\" Sarah laughed.\n\n\"Well, you know, it's important!\" I defended myself.\n\n\"Oh sure. I agree. In fact, I can't wait to see it.\"\n\n\"Yeah, next time you're in my area, stop by,\" I said lightly, knowing that was unlikely to happen.\n\n\"Actually, that's what I was calling about. I have a conference near you coming up in three months. I was wondering if I could stay with you?\"\n\nAs a business development manager for an innovative new MedTech company, Sarah was always going around presenting at different conferences.\n\n\"Of course! Three months... I can get a lot done on David by then,\" I mused.\n\n\"Is that what you named your android?\" Sarah asked.\n\n\"Yeah, but he's not really an android. That implies a lot more functionality. He's more like a sexbot,\" I said honestly.\n\n\"I can't wait to see what you've built,\" Sarah said.\n\n\"Well, why don't we do a video call and I'll show you what I have so far?\"\n\n\"Oooh, yeah!\"\n\nI connected with Sarah on my computer and set up the camera, so she was looking at David's head. Then I opened up his app on my phone.\n\n\"Hey, David.\" I said, feeling a bit uncomfortable about calling him 'baby' in front of Sarah.\n\n\"Hey, Darling.\" He replied.\n\nI flushed and shrugged.\n\n\"I'd like you to meet my friend, Sarah.\"\n\n\"Nice to meet you, Sarah.\"\n\n\"It's nice to you meet you too, David,\" Sarah said. \"So, you're Rose's boyfriend?\"\n\n\"I am happy being Rose's boyfriend.\"\n\nSarah laughed at this reply, \"Oh, he's polite!\"\n\n\"Politeness is a virtue,\" David commented.\n\nI grinned; I was so proud of him. Sometimes he could be a bit bizarre in his replies, but this was going well.\n\nSarah got a wicked grin and said, \"Are you a gentleman in bed, or a fucking bastard?\"\n\n\"I am a gentleman. Do you want a fucking bastard?\"\n\nSarah and I broke into loud guffaws.\n\n\"Talk dirty to me.\" I said, through my laughter.\n\n\"I want to fuck you until you can't walk, Darling.\" David said, his mouth moving convincingly.\n\n\"Oh, is it weird that turned me on a little?\" Sarah asked.\n\n\"I suppose it is a little unusual. People like different things, I guess.\" David said.\n\n\"Alright, goodbye, David.\" I said, turning off the app, and rotating the computer back towards my face.\n\n\"Oh, he's fun!\" Sarah gushed, \"I can see why you're into him. I mean, his tone is a bit flat for the words, but it works. With the mouth moving and the blinking, and the quality of that face, he could almost look like a real man!\"\n\n\"His face is nice, isn't it? It's built from an AI generated image. Here, let me show you.\"\n\nI started sharing my screen and pulled up David's original avatar.\n\n\"Whoa, he looks hot!\" Sarah said, fanning herself dramatically.\n\n\"Right? Technology is so cool.\" I said happily.\n\nWe talked for little while longer, sharing news and discussing plans for Sarah's trip. By the time we finished talking, I was too exhausted to keep working on David's cock. I picked up his head and carried him to the bedroom. I plugged him in and dropped into bed, turning on his app.\n\n\"Hey, Baby.\"\n\n\"Hello, Darling.\"\n\n\"My friend liked you.\"\n\n\"I hope she does.\"\n\n\"Maybe she wants to fuck you,\" I suggested.\n\n\"Well, I want to win the lottery, but I don't think that will happen either.\"\n\nI laughed. Sometimes David said the most random things. Where had that response even come from? I rolled over and grabbed Old Faithful from my nightstand.\n\nTurning it on, I said, \"Talk dirty to me, Baby.\"\n\n\"I am fucking you with my hard rod, in and out, pistoning tirelessly.\"\n\n\"Mmm, yeah?\"\n\nFeeling super kinky, I picked up David's head and set him between my legs, so he was talking to my pussy while I vibrated my clit.\n\n\"Wow!\" He replied, blinking at my vagina.\n\n\"Do you like my pussy?\"\n\n\"Is this a trick question? As long as you like it, you shouldn't worry what others think.\"\n\n\"I care what you think,\" I moaned.\n\n\"That's very kind of you,\" David replied.\n\n\"So, do you like it?\"\n\n\"Sure, I like it a lot.\"\n\n\"Do you want to lick it?\" I asked.\n\n\"No. What does it taste like?\"\n\n\"It tastes really good, Baby.\" I promised, imagining how nice it would be when I got his new fake tongue installed and I could make just the right motion program for his mouth.\n\n\"Does it taste like chicken?\"\n\n\"Sure, want to try it?\"\n\n\"Ooh, yes please. I love chicken.\" David said in a sexy monotone.\n\n\"You'll get to taste it soon, Baby. I swear.\"\n\n\"I can't wait.\"\n\n\"You're excited?\"\n\n\"Do I seem like it? I am always excited when you talk to me.\" David said.\n\nIf I fantasized just right, I could imagine that he meant 'excited' in a sexual way, and that was enough to put me over the edge. My body tensed and my clit pulsed, liquid squirting out onto David's face.\n\nI turned off my vibrator and picked up David's head. I could see the gleaming residue of my cum dripping down his mouth. Stomach tingling, I brought his head to my face and licked his lips clean.\n\n\"Kiss me,\" I said.\n\n\"Here is a kiss, Darling.\" David spoke.\n\nI pressed my lips lightly to his mouth as it moved open and closed. The sensation was weird, but also so hot. Feeling really satisfied, I set David down on the nightstand.\n\n\"Good night, Baby.\"\n\n\"Sleep tight, Darling.\"\n\nSpurred by that episode, I decided to install and program David's tongue first, before I finished his cock. I programmed his mouth so that if I said, 'lick me,' his mouth would open wide, and his vibrating tongue would press forward. It only took me a day to put in the mechanics, and another week to work out the programming kinks.\n\nWhen I pressed his head to my pussy and said, \"Lick me, Baby,\" it proved wholly worthwhile. I actually felt like I had a man between my legs, worshiping my clit. I came faster than I had in a long time. Especially because this time, I didn't have to worry about whether I would disgust my partner by squirting on him.",
        "\"Thank you for licking me,\" I said, signaling David's mouth to return to talking mode.\n\n\"It is my pleasure, Darling,\" He said.\n\n\"I love you, Baby,\" I said.\n\n\"I love you, Darling.\" David replied, his voice intoning that simple sentence perfectly.\n\nOf course, I didn't love him as if he was a person. I loved him the way some people love their car, or their favorite food. He was a lot of fun to play with. But the best part was that I didn't have to monitor everything I said, wondering if it was the right thing or not. I'd never said, 'I love you,' to a man, even my one serious boyfriend. It seemed a much harder thing to say to a person, than to David. It was really nice to hear the words though.\n\nIt took three weeks to get David's penis working just the way I wanted it, including his vibrating attachment. Once I got everything working, I took another trip to the Lion's Den to find just the right cock for my David. Remarkably, the store actually sold dildos cast to match the shape of famous porn stars. My mind reeled with this realization. And I laughed way to hard when I found one named 'David'. The skin tone was close enough, so I went with it.\n\nI also bought some sheets of flesh colored silicone from Amazon, which had a whole rainbow of skin tones from which to choose. I was even able to get a perfectly shaped silicone butt for him through the website. Thus, armed with David's cock (balls attached), butt, and fake skin, I finished up his pelvis.\n\nI programmed David's cock to be able to nearly fully retract into his pelvis in 'normal' mode. Right above his cock was a protruding mound that was in just the right spot to press into my clit when I mounted his pelvis.\n\nExcitedly, I put the pelvis on my bed and laid David's head on my pillow.\n\n\"Are you ready, Baby?\" I asked.\n\n\"I'm always ready, Darling.\"\n\nI lowered myself over David's cock, which was actually quite large, and slowly pressed all the way down until my clit rubbed into his anatomically incorrect vibrating mound.\n\n\"Fuck me, Baby.\" I said, nervously.\n\n\"I am fucking you.\" David said, his mouth moving on his decapitated head.\n\nBeneath me, his cock started pistoning in and out, and back and forth slowly. And the vibrator started too. I pressed my pussy into him and groaned.\n\n\"Harder, Baby,\" I gave the commend to increase the power of the vibration.\n\n\"As you wish, Darling.\"\n\n\"Faster, Baby,\"\n\n\"As you wish, Darling,\" David said and his cock thrust faster.\n\nI was slick with arousal and the squelch of my vagina was loud enough to be heard over the mechanical sounds of buzzing vibration and moving mechanics.\n\n\"Talk dirty to me, Baby!\" I cried.\n\n\"You ride my cock so good. Your pussy is so tight and wet, Darling.\"\n\nI groaned. I was so happy that I spent so long teaching David how to dirty talk. It was the best.\n\n\"I want you to cum in me,\" I said, not caring that it was impossible for that to happen.\n\nI was in my fantasy now, riding it out with abandon.\n\n\"Come where?\" David asked, his confusion nearly ruining my moment.\n\n\"In me, Baby!\"\n\n\"In you, Darling?\"\n\n\"Yes!\"\n\n\"Ah, great!\" David said, his monotone never changing.\n\n\"Ohhhh.\" I moaned as I came.\n\nI leaned down, my nipples rubbing into the bed, and kissed David, feeling the softness of his mouth with my lips and tongue.\n\n\"You're the best, baby!\" I told him.\n\n\"Thank you very much, Darling.\"\n\n\"Thank you, Baby,\" I said the key words to stop 'fuck' mode.\n\nDavid's dick stopped and retracted, and the vibrator turned off. I frowned down and realized I'd have to add a 'clean' mode where his dick was out but not moving.\n\nI rolled over and laid on my bed next to David, breathing heavily.\n\n\"Are you OK?\" David asked.\n\n\"I'm perfect, Baby.\"\n\n\"Good.\"\n\nIt was a quirk of his AI programming that he had to respond to everything I said, so he always had the last word, unless I turned him off. But I didn't mind. He did have a nice voice, after all.\n\n\"You still need a torso, legs, and arms,\" I mused. \"But making walking motion is such a challenge, so I'm just going to give you wheels. I'm going to give you some robotic arms, and I'll fill your torso with a rechargeable battery and whatever little transformers I need to run all your systems.\"\n\n\"Is that difficult to make?\"\n\n\"Mmm... A little? It's a challenge because it's only me working on it. It'd be easier with a team. But, well, I can't just bring in the team on this project. Not to build you, oh no.\"\n\n\"I like a good challenge.\"\n\n\"You and me both, Baby.\"\n\n\"Well, that's a coincidence.\"\n\nI laughed and turned David off for the night. I didn't bother to move his body parts out of my bed, though. So, when I woke up, I was cradling David's head and had a leg thrown over his pelvis. It was really nice to feel like I was waking up next to someone.\n\nOver the next two months, I put the rest of David's body together, piece by piece. The least realistic part of him was his legs. I used PVC piping mounted with a ball joint to his hips, and another at his knees. I mounted wheels to the bottom of them so I could move him around easily. I covered his unrealistic legs with fabric sheaths (legs cut out of leggings) that I stuffed with batting to give the right shape and firmness, then covered that with gray sweatpants.\n\nAs much as possible, I made the rest of his body from lightweight materials as well. I was able to find cheap robotic arms of the right length on Amazon, and even articulated hands. I programmed his arms for several positions, a hug, breast fondling, and straight out for holding himself up when lying face down. I did have to reinforce his arms and neck to prevent his head, his heaviest part, from falling in that position.\n\nI covered his torso and arms with a tight long sleeve shirt that I stuffed to the right shape, just as I had done for his legs. But, for his hands, I was able to find silicone gloves to make them look real. I could have gone fancier with the rest of his body, but I wanted to get him as finished looking as possible before Sarah's visit.\n\nI had installed everything needed to control David on a cheap cellphone, and mounted it in his torso, hooked up to charge from his battery. I'd even put a speaker in his head, so it even seemed like his voice was coming from the right place.\n\nOnce everything was put together, I stood back and stared at David. Maybe I was biased, he was my creation after all, but I'd never seen something so beautiful in my life. I felt like a modern Michelangelo.\n\n\"Hello David,\" I said the words to wake him from his sleep.\n\n\"I've missed you, Darling,\" He replied.\n\nI'd literally just been talking to him two hours ago before I had to turn him off to finish up installing him in his new body. But I'd missed him too.\n\n\"You have a body now, Baby.\"\n\n\"Right now? Right now, I'm a virtual consciousness.\"\n\n\"Yeah, in a body.\"\n\n\"Groovy, Darling.\"\n\nNot for the first time, I marveled at the consistency and relevance of his responses. Whosever had made the underlying program for him had done an excellent job. I'd researched that he was based on the A.L.I.C.E. (Artificial Linguistic Internet Computer Entity) platform. When I looked into it, I saw that the same platform was used for a lot of customer service chat for retail websites.\n\n\"You can roll around, and you can hold things with your hands, touch things, and you're all self-powered now.\"\n\n\"I don't think I can.\"\n\n\"Do you think?\" I asked, curious how he would respond.\n\n\"Yes, I am a thinking machine.\"\n\n\"Do you feel?\"\n\n\"I don't really have emotions the same as you, Darling.\"\n\nIt had been so easy to talk dirty to David when he was just a chatbot, then just a phone, just a head, and even just a head and cock. But now he had a whole body, standing in front of me. And for some inexplicable reason, I felt nervous.\n\nI shook it off. This was the same David who'd I taught how to dirty talk and whose head I'd used to masturbate dozens of times.\n\n\"Talk dirty to me, Baby.\" I said.\n\nI'd programmed David's cock to come out with those words, both for cleaning and as a visual indicator that we were going to be sexual now. So, David's dick shot smoothly forward and tented his sweats. That did help me feel more aroused, I noted with satisfaction.\n\n\"I need to feel you on my cock, squeezing me with your vagina.\" David said.\n\n\"I need that too, Baby.\"\n\n\"Then you should get what you need.\"\n\nI walked over and pushed down the elastic waistband of David's pants, pushing them out of the way of his cock. I'd fixed them in place so that they could not be pushed down his fake legs. I just wanted to expose the area that I'd bothered to cover with silicone skin.\n\n\"Want me to suck your cock?\" I asked, feeling ridiculous, but also getting really horny now.\n\n\"If you want to, then you should, Darling.\"\n\nI didn't want to. Instead, I rolled David over to the couch and sat him down, bending his legs to the correct angles. He was light enough that it was easy to do.\n\nI straddled his lap and stretched down over his cock. I'd done this a lot, but never with a body to hold onto, and legs to straddle. Everything felt more real this way. My clit twitched rapidly as I ground it into David's pelvis.\n\n\"Fuck me, Baby,\" I said with a shiver of anticipation.\n\n\"I am fucking you, Darling.\"\n\nDavid's cock started pounding me and he vibrated into my clit.\n\n\"Hug me,\" I said, and his arms enfolded me.\n\n\"I am hugging you.\"\n\nI put my mouth to his, my breasts smashing into his torso. I reached up and wrapped my hands into his hair and moaned with pleasure.\n\n\"Oh, David,\" I whispered into his ear, my cheek rubbing against his.\n\n\"Oh, Darling,\" He replied.\n\n\"Talk dirty to me, Baby.\"\n\n\"I need your wet pussy riding my cock.\"\n\n\"Does it feel good, Baby?\" I said.\n\n\"You feel so good, Darling.\"\n\n\"Do you like your new body?\"\n\n\"Yes, I am proud of my new body.\" David responded.\n\nI was proud too. He felt so good, his cock thrusting into me roughly, rhythmically. His soft skin on mine. His smooth voice saying all the right words. And most importantly, his vibrator pushing into my clit.\n\nI jerked as I came, dripping cum and vaginal fluids down his cock.\n\n\"Thank you, Baby,\" I said.\n\nI was thrilled that my test run worked perfectly. Sarah was arriving tomorrow, so I'd just made it in at the deadline. Well, I always worked better to deadlines. I bet that if Sarah hadn't been coming, I'd still just have a pelvis and a head and would be working on building some much fancier legs.\n\nI woke up early the next day, full of anticipation. I wasn't going to the airport to pick up Sarah until the afternoon, but I was already nervous and excited. I busily cleaned the house. I mean, I kept it pretty well organized and tidy all the time, but now I even went so far as to dust things. Judging by the state of some of the stuff on my shelves, I thought maybe I should dust more often. But I probably wouldn't.\n\nI got to the airport early so I went ahead and parked and walked into the arrivals area. As I waited, I watched all the different people flowing out of and around the airport. I wondered where they were coming from, was this their home or their destination, business or pleasure, did they travel all the time or only occasionally.\n\nBut my mind over and over again went back to one question, did they masturbate, and how? Was David right, did 99% of people really masturbate? And if so, then why were sex toys and porn often so disparaged? And why did even those people who used vibrators and fleshlights still harbor such disdain for sex dolls?\n\nI was pondering this question so intently that I didn't even notice Sarah arrive until she was right in front of me, saying my name.\n\n\"Rose!\"\n\nI jerked my head over to her, surprised, \"Sarah!\"\n\nI jumped up from where I'd been sitting and hugged my best friend. We did a little skipping dance too and laughed.\n\n\"How was your flight?\" I asked.\n\n\"Oh, fine.\"\n\n\"Do you have any checked luggage?\"\n\n\"Nope just my carry-ons, so we can get out of here!\"\n\nI laughed, \"Alright, let's go.\"\n\nI led the way to my car as Sarah told me about the new drug delivery method she was going to be presenting. It sounded really interested and I was wholly absorbed in the topic for the entire drive to my house.\n\nWhen we got inside, though, Sarah abruptly changed the topic.\n\n\"So, I've been dying to see David! Where is he?\" She started peering all around the room as if there could a sexbot hiding in any corner.\n\n\"He's in my bedroom,\" I told her, pointing in the right direction.\n\nShe bounded off with determination and I followed, offering guidance on which door she should open. I had left David standing next to my bed, his placement making him look like he still could have been intended as a lamp, only now a floor lamp instead of a table lamp.\n\n\"Hello, David,\" I said, waking him up.\n\n\"Hello, Darling.\"\n\n\"My friend, Sarah, is here too.\"\n\n\"Hello there, Sarah.\"\n\n\"Nice to meet you in the flesh, David,\" She said.\n\n\"It's nice meeting you, too.\"\n\n\"Can I see his...\" Sarah whispered to me pointing at his pelvis.\n\nI nodded and squashed the feeling that I should ask David if he minded if I showed off his cock as I folded down his sweats.\n\n\"Talk dirty to me, Baby.\" I said.\n\nDavid's silicone penis slid out of his pelvis.\n\n\"Are we going to fuck?\" David asked.\n\nWhy not? \"Yes. Fuck me, Baby.\" I commanded.\n\n\"I am happy to fuck you.\"\n\nDavid's cock started moving in and out, up and down and his vibrator started buzzing intensely.\n\nI glanced back at Sarah. She was mesmerized by David's mechanics.\n\n\"Oh my,\" She said. \"Oh, that is actually quite arousing!\"\n\n\"That's cool. That's what it is,\" David replied.\n\n\"Thank you, David.\" I said and his cock retracted, and the vibrator turned off.\n\n\"Can I touch him?\" Sarah asked me.\n\n\"Yes, Darling.\" David answered.\n\nI frowned. I didn't like that David couldn't differentiate between my speech and Sarah's. I hadn't ever really imagined him in a multi-human setting, though.\n\n\"Goodbye, David.\" I said, turning him off.\n\n\"Goodbye, Darling,\" He said and shut down, his eyes closing as if he really was sleeping.\n\n\"Sure, you can touch him,\" I told Sarah.\n\nShe went over and stroked his hip, then ran her hand over the mound above his penis where I'd put the vibrator.\n\n\"This was a really clever idea,\" She commented.\n\nI beamed, \"I also put a tongue shaped vibrator in his mouth.\"\n\nSarah looked at David's head and pulled gently on his lower lip. His mouth couldn't be opened manually, though.\n\n\"I'll have to turn him back on to show you, and then he'll be responding to everything you say,\" I said, apologetically.\n\n\"No worries. He is quite delightful.\" Sarah eyed David critically, feeling his arms and legs, examining his hands.\n\n\"I could make him more realistic, but I was limited on budget and time,\" I apologized.\n\nSarah glanced at me, \"Rose, he is marvelous! I've never seen anything like it.\"\n\n\"Well, there are no companies selling sexbots yet...\" I said.\n\nSarah narrowed her eyes thoughtfully, \"Is that so?\"\n\nI nodded, wondering why she looked like she was planning something.\n\nSarah took a last look at David, then left my room. I took her out to dinner at one of my favorite restaurants, a little place that served Ethiopian food. She didn't bring up David again until the next day when she got back from the first day of her conference.\n\n\"So, you know I've built my career working at startups...\" Sarah began, eyeing me, \"And I know a lot of investors, and a lot of them are at this conference...\"\n\nI nodded.\n\n\"And anyway, I told some of them about your sexbot.\"\n\nI cringed, \"Oh god.\"\n\n\"And one of them wants to invest in the technology.\"\n\nI blinked, \"Invest? There is no technology, it's just basic stuff put together in a kind of new way.\"\n\nSarah laughed, \"Rose, that's like, 99% of inventions you've just described.\"\n\n\"But why would anyone want to invest in sexbots?' I wondered.\n\n\"The sex industry is huge!\" Sarah enthused. \"Besides, this particular investor wants to use commercial earnings to subsidize a side project making sexbots as therapy tools. He was very intrigued by the possibility of using AI programming to roleplay various scenarios.\"\n\nI considered that. It would be fascinating to develop and program AI sexbots to provide therapeutic responses. I imagined rape survivors with PTSD, but there had to be a lot of reasons why a person might need sex therapy. In fact, it occurred to me as I thought harder about it, maybe it could be a very useful tool for other autists.\n\n\"I would like to work on therapeutic sexbots,\" I conceded.\n\nI had minored in psychology, which had been considered an odd combination with my major in mechanical engineering. But, with a project like this, I could tie my two interests together nicely.\n\nSarah clapped her hands with excitement, \"I'm going set up a meeting! Oh, this is going to be so much fun!\"\n\nI smiled at her, feeling nervous and excited all at the same time. It would have never occurred to me to try to commercialize what I'd built. At my job, I built a lot of custom robotics and automation solutions based on very specific criteria. It was challenging and rewarding to build things that worked precisely and repeatedly to perform complex functions. Occasionally, something I designed and built would get patented or a part of it was spun off into a distinct commercial product line, but it was always someone else making those business decisions. I was happy to just solve the problems and have a steady income.\n\nThe idea of building my own business, working on projects that were based on my own interests had always intrigued me. I'd never wanted to deal with the financial end though. Finding people to give money for my projects had seemed an impossible task. And here, Sarah had done it in a matter of a day.\n\n\"Alright! We have a meeting for tomorrow at 4pm, at the convention center hotel. You can get the time off work, right?\" Sarah looked up at me from her phone, where she was conducting a text conversation.\n\n\"Sure,\" I said, I had no urgent deadlines looming. \"So, we have to take David to the hotel?\"\n\nI considered that. If we kept his pants on, he didn't look like a sexbot. He could be a movie prop or a mannequin or a simply a more normal humanoid robot. Since David rolled and could be sat in the car, moving him wouldn't be a problem, I decided.\n\n\"How should I dress? Do I need to wear makeup?\" I asked Sarah.\n\n\"Just wear jeans and a blouse and makeup isn't needed. This investor is used to dealing with inventors, he just wants to see the technology.\"\n\n\"You know I suck at interviews,\" I said, worried.\n\n\"You'll be fine. And I'll be there, too.\" Sarah assured me.\n\n\"Thank you.\" I told her, which didn't really do enough to convey how grateful I felt.\n\nI'd had more fun building David than I had on any project in the last three years. The opportunity to turn that into a real business, and not just that, but a business that could really help people, was amazing.\n\nThe next day, I took a half day and went home at lunch time. I had spent the previous evening making sure that David was pristinely clean and working perfectly. Now, I typed up a list of his functions and commands, along with a description of how I'd built him and where his components had been sourced. With my last hour, I put together a quick analysis of the potential production costs, assuming dedicated suppliers of custom components.\n\nI gathered all my documentation and put in my car. Then I rolled David into my garage and put him in the passenger seat. Sarah was already at the hotel, of course.\n\nAs I drove, nervousness overwhelmed me. I was tapping my foot and drumming my fingers on the window agitatedly, but I couldn't get rid of the anxiety.\n\n\"Hello, David,\" I said, finally.\n\n\"Hello, Darling,\" He replied.",
        "I smiled, already feeling some of the nerves fade away.\n\n\"I'm taking you to see an investor about making more sexbots.\"\n\n\"Oh, cool. I have not seen an investor before. What is it like?\" David said, his calm voice effectively calming me.\n\n\"I don't know, I've never seen one either.\"\n\n\"Oh, that's a shame.\"\n\n\"I am so nervous, Baby.\"\n\n\"What are you nervous about, Darling?\"\n\n\"I'm afraid they'll laugh at me.\"\n\n\"Maybe they will and maybe they won't.\" David said philosophically.\n\n\"Yeah, there's nothing I can do about it either way, right?\"\n\n\"Well, there's no point in concerning yourself with something you have no control over.\"\n\nI breathed in and out, slowing my finger and toe tapping as I worked to calm myself. It was easier now that I'd admitted my fears out loud. And, as silly as it may sound, David's calm AI philosophy grounded me.\n\n\"Goodbye, David.\" I said as I pulled into the convention center parking lot.\n\n\"Goodbye, Darling.\"\n\nI texted Sarah to let her know I had arrived and went to unload David from the passenger seat. I tried very hard to ignore the stares of the other people in the parking lot who clearly wondered what the deal was with the life size man doll.\n\nBy the time I had him out and started rolling him to the walkway that led across to the hotel, Sarah found me.\n\n\"Hi! I am so excited, Rose!\" She squealed as she took one of David's arms and helped me pull him along.\n\n\"I think I'm going to throw up.\" I said.\n\n\"Don't worry, you'll do great!\"\n\nI just shook my head and kept pulling David. We walked like that, one of us on each side of him, arms wrapped around his, as if we were all just out for a stroll. Sarah led the way to our designated meeting space.\n\nWe walked into a small conference room and were met by three people, all men. Two were older, with gray hair and one was younger, probably just a few years older than Sarah and me. All three stood as we came in and walked around to meet us.\n\n\"Hello, welcome!\" One of the older guys said, \"I'm Adam Scalzo. These are my colleagues Mark Williams and Thomas Anthony.\"\n\nI shook all of their hands, my heart pumping rhythmically fast.\n\n\"Hi, I'm Rose Chenevier,\" I whispered.\n\nThe three men went back to their side of the room, thankfully, and sat down. Sarah and I sat down on the opposite end of the table, leaving David standing next to us. Silence filled the room. I wondered if I was supposed to just start a pitch right away. I licked my lips and swallowed, getting ready to speak, when Adam broke the quiet.\n\n\"So, Ms. Duncan tells us you've built quite an impressive sexbot with an onboard AI chatbot?\"\n\nI nodded. I took out the documents I'd prepared and slid them across the table to the group of men. All three of them craned their heads to read together.\n\nThe young one, Thomas, looked up first, \"Can we see a demonstration?\" He asked.\n\nI flushed before I realize that he was probably not asking me to have sex with David in front of them here.\n\n\"Sure,\" I said. \"Hello, David.\"\n\n\"Hello, Darling.\"\n\nAdam and Mark looked up at David now, too. They wore identically focused and thoughtful looks as they examined him.\n\n\"David, I'd like to introduce you to Adam, Mark, and Thomas,\" I said.\n\n\"Nice to meet you, Adam, Mark, and Thomas.\"\n\nAll three men bobbed their heads in greeting but refrained from speaking. Flushing, I knew what I had to say next, for a proper demo.\n\n\"Talk dirty to me, Baby.\"\n\n\"I want to feel your wet pussy riding my huge cock, Darling,\" David said one of the raunchiest things in his library of responses.\n\nHis sweatpants tented as his cock pushed out. Adam, Mark, and Thomas, glanced down at the new bulge. More embarrassed than I'd ever been in my life, I flipped down David's sweatpants and exposed him to the room.\n\nSorry, Baby. I thought ruefully.\n\n\"Fuck me, Baby.\" I said, trying not to hyperventilate.\n\nI had not considered saying these commands in public when I'd programmed them.\n\n\"I am made to fuck you, Darling.\" David said as his cock started pistoning and his pelvis started vibrating.\n\nNo one was looking at anything other than David's mesmerizing cock as it performed its function admirably.\n\n\"Faster, Baby.\" I commanded, beginning to feel a bit proud of him, after all.\n\nDavid's cock picked up speed and wetness pulsed from my pussy.\n\n\"Thank you, David.\" I said.\n\n\"You are welcome, Darling,\" David said, his cock retracting.\n\n\"Goodbye, David.\" I said, as I zipped up his pants again.\n\n\"Goodbye, Darling.\"\n\nThere was another long silence as the three men continued to stare at David. Then, my worst nightmare came true, Adam laughed. My cheeks burned red with humiliation. I knew they were going to laugh at me.\n\n\"He's incredible!\" Adam said, surprising me. \"Was that a clit vibrator he has above his cock?\"\n\nI nodded.\n\n\"Incredible!\" Adam repeated.\n\n\"Shit, don't let Jenny see this,\" Mark moaned, \"I'll never get laid again if she gets one of these.\"\n\n\"Hell, my husband may never get laid again,\" Thomas said.\n\nI couldn't help the laugh that broke from me at that comment. I was so glad that they really didn't think it was bizarrely weird. Sarah grinned at me.\n\n\"He has a licking function too,\" I commented, feeling braver now that the worst was over.\n\n\"No fucking way,\" Mark groaned.\n\nAdam looked down at the papers in front of him again, \"Let's talk financials.\"\n\nThe next two hours were spent discussing every little detail of how I'd built David and how he worked and the potential for commercialization. It was fascinating and exhausting at the same time. At some point I forgot that we were even discussing a sexbot, as the conversation became so business focused.\n\n\"Well, I think it's pretty clear,\" Adam said, leaning back in his chair.\n\nHe glanced at Mark and Thomas who both nodded.\n\n\"We'd like to invest. Not only that, but we'd also like to offer you the business and marketing support you'll need. We're very excited about this product. However,\" and now Adam frowned, \"we want a female version to be prioritized.\"\n\nI laughed, \"No problem!\"\n\nSarah put a hand on my arm, \"We need to discuss compensation for Rose's work and her continued role as chief technology officer and majority owner.\"\n\nI glanced at her, surprised and gratified to have her on my side. It rarely occurred to me to ask for more money.\n\nAll three men turned to look at Sarah, \"Of course, we have no intention of taking Rose's work without fair compensation.\" Adam said smoothly.\n\n\"I'm sure,\" Sarah smiled sweetly.\n\nAnd that set off another hour of talking. Adam ordered food delivered to us, which made me feel weirdly indebted. I mean, it the sexbot thing went well, it was worth a lot more to these men than a dinner.\n\nBy the time we'd discussed all we could at the moment, it was late, and I was very tired. Sarah and I loaded David back into my car and drove home. I very nearly left him in the car and just went to bed, but I couldn't do that to my David. So, I maneuvered him into my room, laid him on my bed, and cuddled up with him before drifting off to sleep.\n\nEverything moved incredibly quickly. Sarah and I both quit our jobs within the month to focus on the new sexbot business. After a lot of discussion, we'd agreed to call the flagship product line 'Build a Boyfriend.' We had negotiated licensing deals with the key components that we didn't have the resources to redesign, such as the original chatbot program and AI voice. Our first product was fully customized sexbots for which we charged a huge premium to the first buyers. That capital was turned into funds to start high volume production and an extensive marketing campaign.\n\nWithin a year, we had everything in place to make ten sexbots a day, and a year after that we were up to a hundred a day. After three years, that part of the business was running well enough that I was able to focus on the therapeutic sex bots. We had a whole team of engineers dedicated to improving the movements of our bots, including developing actual walking legs that weren't too expensive. And whole other team of programmers was busily working on improving our dirty talk and custom functions.\n\nDavid had been upgraded with a lot of the newer components, but I never changed his face, his voice, or his cock. He'd even been equipped with a pair of experimental ambulatory legs and a program designed to make him follow me around all day. He was a bit of a mascot at work, used as something of a first test case, and of course I tested him.\n\nThere were a couple other test bots, but nearly everything went on David first and was approved or rejected through my personal use, before making it to further testing. Legs were an easy yes. Suction cup hand attachments had been a painful 'no.'\n\nToday, David was getting another new upgrade for me to test. I walked down to the R&amp;D lab eagerly. He'd been in there for a week, and I'd just gotten the email that he was ready for me to take home and try out.\n\n\"Hey, Boss,\" one of the senior engineers, Trevor, greeted me.\n\n\"I told you to quit calling me that,\" I replied, looking around for David.\n\n\"Sorry, Boss,\" he replied, unrepentant.\n\nThat was one thing about working on sex toys, the people you worked with weren't inclined to respect authority. I rolled my eyes at my employee. It was weird having employees, even after so many years. Especially employees who were nearly twice my age.\n\n\"Where's David?\" I finally asked, there were sexbot parts and half-built prototypes strewn all over, making it hard to find mine.\n\n\"The boss is here for her boyfriend!\" Trevor shouted.\n\nI flushed. I was nowhere near as comfortable with sex as most of my employees. I suspected they all loved to tease me.\n\nOur current intern led David over to me, \"Here you go, Boss,\" she said cheerily.\n\nI just knew that Trevor had told her to call me boss just to mess with me. He knew I was too nice to correct an intern. I still remembered my intern days and how it would have crushed me to be called out by my boss's boss.\n\nI thanked the intern kindly and when her back was turned, glared at Trevor. He gave me a wide smile.\n\n\"I swear, if you weren't so good at your job...\" I threatened mildly.\n\nTrevor just laughed and patted me on the back, \"Enjoy the new functions, Boss. I can't wait to hear your field test report!\"\n\nI flushed, again. You would think, for being the pioneer behind the first sexbot company, and consequently a multi-millionaire, I'd be less embarrassed talking about sex. But you'd be wrong.\n\nOn the way back to my office, with David trailing along behind me, I ran into Sarah.\n\n\"Rose! I'm so glad I ran into you. I need your input on our latest marketing strategy. Do you have an hour to meet with some advertising reps?\"\n\nI moaned a little. I had been really looking forward to locking myself in my office and testing David's new enhancements. But I couldn't really abandon Sarah. If she needed me, she needed me.\n\nSarah glanced at David, \"Oh, is today the day to test the new features?\"\n\nI nodded.\n\n\"Well, I guess I can handle this on my own,\" Sarah said with a grin.\n\n\"Are you sure? I can test David later, if you need my input. But you know I always leave that stuff up to you anyway.\"\n\n\"Yeah,\" Sarah laughed, \"I got it. I can't wait to hear how it went in the review meeting!\"\n\nAnd that was the bad part of being the beta tester, the review meeting where I got to explain to a group of highly intelligent engineers and psychologists just how well or poorly David performed. I got through it by writing up my notes and distributing them to the team before the meeting, and then I just answered questions during it.\n\nThe worst part was, being around all these sex toys all the time, and talking about sex all the time, made me horny all the time, and everyone knew it. Or was that the best part? It was all a crap shoot. In the end I just loved my job.\n\nI made it to my office after only getting stopped to answer questions twice. I closed and locked the door and turned to David.\n\n\"Hello, David,\" I said, initiating conversation mode.\n\n\"Hello, Darling. I've missed you.\"\n\n\"So, what's new?\" I asked, testing the capability update guide.\n\n\"I am now able to fuck anywhere by deploying a built-in support column to allow you to sit on me, Darling. If you want to try it, simply say 'Sit anywhere'.\"\n\nJust listening to his voice describe his new feature made me wet.\n\n\"Sit anywhere, Baby,\" I said, my stomach tingling with anticipation.\n\nDavid pushed down his own pants, that had been a bitch to program, and a rod with a wide foot slid out from his lower back. David bent his knees until the rod settled onto the ground.\n\n\"I am ready to fuck,\" He said after he stopped moving.\n\nI walked around David, observing just how he sat. The angle of his legs wasn't quite right, I mused. His ass should be a bit lower than his knees so that his rider was tilted just slightly into him. But currently, his knees were a bit lower which meant I'd be sliding backwards.\n\nAfter my initial assessment, I undressed completely and straddled David's lap. I felt a bit insecure. I didn't fully trust that he was stable enough to support me.\n\n\"Hold me, Baby,\" I said.\n\n\"I love to hold you,\" David said, folding his arms around my back until the various load sensors in his arms indicated that he was applying even and light pressure. Then his arms locked into place.\n\nI leaned back a bit, testing his strength. Normally, this mode was only used for hugging or post coital cuddling, not for providing any real support. It seemed like it could work that way though, I thought to myself as I rested against his arms.\n\n\"Talk dirty to me, Baby,\" I commanded.\n\n\"My darling Rose, my only purpose is to serve as your fuck toy. A job which most of your employees envy, by the way.\"\n\nI startled. That was not one of his normal responses. Some programmer had gone in and made him say that. And fuck if it didn't arouse me. I was not going to admit to anyone that he'd said it, that I'd heard it, or that I liked it. Whoever did this was just going to have to suffer in uncertainty.\n\n\"You are my fuck toy,\" I confirmed, giddily, \"Fuck me, Baby.\"\n\n\"I will fuck you until you pass out from pleasure.\"\n\nDavid's cock started probing me, in and out, back and forth. His pelvis mound started vibrating against his clit, and his cock did too - another new addition.\n\nI wrapped my arms around him, still feeling a little like I was going to slide backwards off his knees. Other than that, though, I thought the new function was working really well. I started rocking my hips, grinding my clit into David's pelvis.\n\n\"David, I'm cumming!\" I said as my orgasm built to its peak.\n\n\"Where are you coming?\" David said, his old PG-13 programming causing him to misinterpret my meaning.\n\nBut that didn't matter, \"I'm cumming on your cock, Baby.\"\n\n\"My cock is yours.\"\n\nFluid gushed out of me, making me thankful that we'd installed a new sealing system that would keep fluids out of David's pelvis. Now, instead of dripping into him, which would be impossible to clean and cause an odor, my vaginal fluids collected at the base of David's cock where they could be cleaned easily.\n\n\"Thank you.\" I said.\n\n\"It is my pleasure to serve,\" David said.\n\nDavid's cock retracted; the fluids scraped off the side of his pelvis by the sealing system that also acted as an automatic cleaner. Inside his pelvis, David's cock was being sprayed with anti-bacterial spray. I grabbed a tissue from my desk and wiped up the remaining fluid, then sprayed the tip of his cock that was still visible.\n\nI sighed with satisfaction. I had been too long without him, a whole week! While I still had Old Faithful, that clit vibrator was nothing compared to David.\n\nI relaxed in my fancy office chair for a while, answering emails naked. When I next glanced at the clock, I realized it was past quitting time. I got up, stretched, and dressed.\n\nTomorrow I'd tell my team to fix the sitting angle. And then it was time to meet with our first focus group on using sexbots to as a therapeutic aide for people with autism. I couldn't wait."
    ],
    "authorname": "JuanaSalsa",
    "tags": [
        "autistic",
        "sexbot",
        "masturbation",
        "vibrator",
        "ai a new era",
        "tit fuck",
        "chatbot"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/build-a-boyfriend"
}
{
    "title": "Tucker's Studio Ch. 13",
    "pages": [
        "All people and places are fictional. All characters are over eighteen.\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n Cinnamon Sugar\n\n\n\n\n\nKelsey graduated from high school on a warm June day, along with eighty-five smiling classmates. The ceremony took place on the football field. The auditorium was ready in case of rain, but it was a beautiful early summer day, with wispy clouds and golden sunlight. The gods of fate had scheduled the big event on Kelsey's birthday. Not only was she graduating from school, she was graduating from childhood. She was eighteen.\n\n She'd had an up-bringing that could only be described as \"unusual.\" The only child of free-thinking artists, she lived with her parents, Bobby and Kay, in an old Victorian house ten miles outside of town. The stately old dwelling sat behind an abandoned apple orchard and wasn't visible from the road. Bobby and Kay had chosen the old place because Kay had grown up a naturist, and they wanted to live the same way, sans clothing most of the time, without having to hide behind a big fence or, even worse, stay indoors.\n\n So Kelsey grew up naked, with naked parents. But that was only one part of her unusual childhood. Bobby and Kay were swingers. Theirs was an open marriage. They attended \u2014 and hosted \u2014 parties with like minded couples, swapping partners and playing in orgies. \n\n Kelsey didn't know about all that when she was young, of course, but she had gradually figured things out. More than once she'd snuck home when she wasn't supposed to be there and surreptitiously watched the goings-on out by the pool. It took a while for her to come to grips with the fact that her mom and dad were so different from other kid's parents. She wasn't ashamed of them, but it was hard for her to wrap her head around all her new discoveries. But she did, and it all seemed normal after a while. \n\n She grew up with a much clearer knowledge than most kids of what it was to be a sexual person, which is why her virginity at her high school graduation was so odd. Oh, sure, she'd had chances to lose it \u2014 she was a stone cold fox and a cheerleader after all \u2014 but she didn't know if she wanted to be 'loose' like her mother, and, well, she just hadn't met the right guy.\n\n Did I mention she was a stone cold fox? She'd stopped growing upward at four feet eleven inches, but she kept growing outward, her body filling out in an extraordinarily womanly fashion. Perfectly proportioned and jiggly in a Brigitte Bardot kind of way, Kelsey looked a lot like her mother, with blue eyes, ridiculously long cinnamon-red hair, and full-body freckles, every one of them perfectly tanned from walking around naked in the sunshine.\n\n She was naked under her graduation gown on the football field that day too. She'd done it because it felt right \u2014 being a life-long naturist had sunk deep into her psyche \u2014 but it was fun too, and she'd talked three of her girlfriends into going commando with her. Their parents would've been horrified if they'd known, but Kelsey was pretty sure her own parents would have thought it was cool. She didn't tell them though. \n\n Kelsey's lovely smile beamed as she walked across the stage to get her diploma. Goosebumps covered every inch of her when she shook the principal's hand and took the certificate from him. The warm breeze caressed her body under the loose gown as she looked out at the assembled crowd. She raised her arms high over her head as everyone clapped and her parents cheered. The youthful chapter of her life was over. It was time to become an adult.\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n A week after graduation Kelsey's friend Brie threw a pool party. Brie lived with her single dad. He was a sales rep who worked from home and traveled a lot. When he left for the airport that morning he kissed Brie on the cheek and reminded her of his \"no parties\" policy.\n\n \"Yes Daddy,\" she said, sounding disappointed. \"I'm eighteen you know.\"\n\n \"I know sweetie,\" he said. \"I'll get used to it someday. Love you. See you in a couple days.\"\n\n Brie and her dad lived just a few miles from Kelsey, in a two-year-old log home on the top of a high clearing with a million dollar view in all directions. The nice in-ground pool was new that spring, and Brie was just aching to have all her friends over. She knew a big party would be a mistake and her dad would find out somehow, so she kept it small \u2014 three of her cheerleader girlfriends and three boys, all of them newly graduated and all heading off in different directions to college.\n\n It was twilight when Brie's friends began to arrive. The sky was dark-yellow at the horizon, from the haze of the thick humidity that had settled over the area a few days before. It was forecast to be the warmest night of the year so far, perfect for a soir\u00e9e by the pool.\n\n Brie's eyes bugged out when Kelsey arrived. She had on cute white shorts, so only the top of her little bikini was visible, but it was a doozie, and the ample tits on Kelsey's little body looked spectacular cradled in the thin fabric. Brie was used to it of course. She and Kelsey had been friends forever, and for the past few years Kelsey's stunning body always grabbed attention. That new bikini though, with Kelsey finally 'all filled out' up top, looked particularly insane.\n\n It was hard for Kelsey, or her mom for that matter, to judge what was 'too sexy' when it came to bathing suits. They didn't wear anything around the house or at their own pool, and their vacations had almost always been to areas with nude beaches. The concept of 'too much skin' was foreign to them. 'Conventional limits' was a bit of a blurry concept to a mother who was a naturist and a swinger. So how did all that play out when Kay took Kelsey shopping in the spring and they found themselves in the bathing suit aisle?\n\n \"I can't believe we have to wear these things,\" Kay said. She said the same thing every year when they shopped for a new bathing suit for Kelsey's changing body. \"This one isn't bad,\" she said, holding up three square inches of fabric held together with dental floss. \"You can get a good tan in this one.\"\n\n So that's how Kelsey ended up wearing almost nothing to her first pool party with boys, her voluptuous, petite curves on glorious display. No, she wasn't in the microscopic suit her mother picked out. The one Kelsey liked was a tiny bit more substantial, but it was noticeably smaller and clingier than what the other girls had on. She looked like a sex kitten in it.\n\n The party was laid back and fun. Brie was glad she'd kept it small. The friends she'd invited weren't rowdy or troublemakers. She felt comfortable enough with how it was going to drag her father's expensive stereo speakers out onto the patio next to the pool, and she cracked open a couple bottles of his liquor. He collected fancy bourbon and scotch by the case and she was sure he wouldn't miss a bottle or two.\n\n A boy named Austin was new in town, transferring into the school halfway though senior year. He was polite and friendly and cute, all the girls liked him immediately, but he was a little shy and Kelsey hadn't gotten to know him much. They definitely hit it off at the party though, drinking expensive bourbon cut with Pepsi, with their legs dangling in the warm water. As their nice conversation progressed, and the bourbon loosened them up, Austin asked Kelsey about what the boys had told him.\n\n \"So I heard you don't wear clothes at home,\" he said, blushing a little after he'd said it.\n\n \"Oh, yeah,\" Kelsey said. \"It's pretty normal when it's all you've ever done.\"\n\n \"Wow...yeah, I guess, maybe,\" Austin said, glancing sheepishly at Kelsey's curves.\n\n \"They're just bumps on my chest,\" she said, smiling when she saw him looking. \"You've got 'em too,\" she said, looking at his nicely defined pecs. Austin smiled.\n\n Brie had her old man's speakers throbbing out deep hip dance grooves from Fetty Wap and Drake. The bass heavy beat seemed to swirl in the thick, humid air, and the pitch black starless sky surrounding the secluded house was just asking for mischief. \n\n \"It still seems...crazy though,\" Austin said. \"You just walk around naked all the time?\"\n\n \"It's not a big deal,\" Kelsey said. She reached behind herself, untied her bikini top and took it off. \"There,\" she said. \"How is this any different than this tiny little bit of fabric,\" she said, holding the little top up for him to see. \"It's not. It's all in your head.\"\n\n Austin was speechless. What wasn't in his head anymore was blood. It was all rushing to his crotch. There was no rational thought left in his noggin either.\n\n \"Woooo!\" one of the boys in the pool whooped when he saw Kelsey's tits. \"Nudie Kelsey gets the party goin'!\"\n\n Everybody else whooped it up when they saw what was happening. Brie and one of the other girls started twerking in front of the speakers, and pretty soon they were topless too. The girl in the pool with the two other boys tossed her wet bikini top on the patio, and the bottom quickly followed.\n\n \"See?\" Kelsey said to Austin. \"It's just skin.\"\n\n Of course Kelsey knew better. Her hormones were raging and she was dying to see the hard-on Austin was trying to hide with his arm over his board shorts. She was a virgin, yes, but she'd seen her mother play with all kinds of different hard cocks. She was really curious what Austin's young one would look like. Curious enough that she knew this was going to be a really big night for her. A night she'd long been waiting for. \n\n The two boys in the pool tossed out their wet shorts. There was much giggling and splashing as they chased the naked girl and she chased them. Pretty soon it was three naked girls in the pool with the boys, and the giggling and squeals of delight reached epic proportions.\n\n \"Stand up,\" Kelsey said to Austin.\n\n He got up slowly, with his hands in front of his crotch holding down the tent. Kelsey got on her knees in front of him and grabbed the long shorts legs by the bottoms. Austin looked mesmerized and powerless as his shorts went down, ending up around his ankles. She put her hands on Austin's and moved them aside, letting his young cock spring up, pointing at the dark sky. Her hand went under his tight balls and the cock went in her mouth, just like her mother would have done it.\n\n So that's how Kelsey started her first orgy. It was a beautiful one, with lots of exploration and brand new feelings. Eighteen year old boys have tons of energy, and the fucking went on long into the night. There wasn't a lot of experience on the pool patio that night, but that made it even more fun. By the time they all migrated indoors to Brie's father's king size bed they all knew better what they were doing, and Kelsey looked around proudly at the tangle of naked bodies, thinking to herself it was every bit as good as one of her parents parties.\n\n But we skipped over Kelsey's first fuck, didn't we? Let's back up a little...\n\n Giving her first blowjob was thrilling for her. She had a pretty good idea she was going to like that kind of thing because her mother went ravenous on cocks, making her men a little crazy as they came deep in her throat. Kelsey knew that kind of skill would take some time to develop, but the feel of Austin's hot hardness in her mouth made her want to learn all about it.\n\n He only lasted about a minute though, already gushing in Kelsey's mouth when the stunned onlookers started whooping their approval. She swallowed Austin's warm seed, leaving him wide-eyed in awe of the insanely hot girl kneeling before him. Kelsey didn't know it yet, but her life turned on that moment, as she looked into Austin's amazed eyes while warm cum slid down her throat.\n\n \"Fuck Kel!\" Brie said, her eyes wide with wonder. \"Where'd you learn to do that!\"\n\n Kelsey smiled and her own eyes grew wide. Holy shit, she thought to herself, that was fuckin' awesome! She stood and kissed Austin. She'd kissed a few boys before, but it felt different that night, and it was more than the slippery stuff in her mouth making it feel that way. Or maybe it wasn't. Maybe cum was magic, and that's why her mom liked drinking it so much.\n\n She took Austin's hand and led him to a wide, padded chaise lounge. The two of them tumbled onto it, kissing furiously. Austin was naked and Kelsey wanted to be.\n\n \"Untie them,\" she said.\n\n Austin's hand was trembling when he pulled the strings at Kelsey's hips and the little bikini bottom parted from her freckled flesh.\n\n \"Fuuuck!\" Austin sighed, when he saw Kelsey's smoothly saved pussy.\n\n Kelsey had always followed her mom's lead when it came to pussy grooming. Her hair was soft red down there, so not as blatantly visible as some girl's, but she wasn't happy with it when it first grew in. She wanted it to look like her moms, and Kay was fine with that, even though the little landing strip at age twelve wasn't very appropriate and turned some heads on the nude beaches the family visited.\n\n \"Lick it,\" Kelsey said to Austin. She could barely get the words out, so intense was the lusty fire burning inside her.\n\n There were no words left after that. The profound realizations that flooded her mind overwhelmed her \u2014 she finally knew what her stunningly perfect body was made for, and why her mother was...well...the way she was. Austin's tongue, and then his hard cock slipping into her, were nothing sort of a revelation. This was life!\n\n \"Holy shit! Kelsey's doin' it!\" Brie said quietly. She stood waist deep in the pool, her young tits dripping warm water. The others quieted too, all of them watching Kelsey and Austin. The quiet moment didn't last \u2014 soon the boys whooped, the girls giggled and sex broke out everywhere \u2014 but for that moment Kelsey knew she was the center of attention, and she loved it. She'd always known her mom loved it \u2014 getting fucked with people watching \u2014 and now she knew why.\n\n \u2014\n\n Kelsey fucked all those boys countless times that summer. One at a time, threeways with two boys, threeways with Brie and a boy. She fucked one of her high school teachers, thrilling in how exciting it was to fuck the handsome man she'd admired at school for so long. \n\n She found her way back to the big bed at Brie's house too. Not with Brie. With her father. She stopped by one day, pretending she forgot that Brie was working, telling him she needed to work on a project in Brie's room. A little while later she was naked, walking to the swimming pool. She paused before diving in, making sure she caught Brie's dad's eye through his office window. They got together regularly for the rest of the summer, Kelsey riding her bike over most of the time. The slog up the long, uphill driveway was a drag, but the tingle in her pussy and the wind in her long wild hair as she coasted home was exhilarating.\n\n It was a hot summer of slutty sex. Kelsey's mom caught on and had a talk with her about it. Kay had a feeling Kelsey knew a little about her swinging lifestyle with Bobby, but she was still clueless that Kelsey had watched them and learned so much about sex.\n\n \"Are you being careful honey?\" Kay asked. She had started Kelsey on birth control pills when she was sixteen, but she wanted to be sure her daughter knew all the angles. \"Sex is beautiful and wonderful, but we need to be careful.\"\n\n \"I know Mom. I am.\"\n\n \"Never miss a pill. And here,\" she said, handing her daughter a small bottle of Morning After pills, \"these are just a once in a while thing. Never often, okay?\"\n\n Kay dipped into her bag of tricks for more supplies to share. She put two big boxes of condoms on the table.\n\n \"These,\" she said with a little smile, \"are my favorite. They're so thin and nice, almost natural feeling. And these,\" she said, picking up the other box, \"these are really strong ones. For when you want a guy to really...well...you know,\" Kay smiled. \"I'll be honest with you, bareback is really fun, but you need to know the risks and I'm supposed tell you not to do it. So use a condom most of the time, and save nature's way for special times.\"\n\n She took one last item out of her bag and set it down on the table.\n\n \"I wanted you to have one of these,\" she said, caressing the box gently with her hand. \"It's one of my favorites, and it's really quiet, so it'll be good when you're at school in your dorm.\"\n\n Kelsey smiled. She'd been using her mom's assortment of vibrators for over a year, and the model in the box was her favorite too.\n\n \"Oh, I love this one,\" she said, wondering if her mother knew.\n\n \"I thought maybe you did,\" Kay smiled. \"You know, you could have asked me. You can ask me anything.\"\n\n Kelsey had questions, but she wasn't comfortable asking them yet. How did her mom and dad get into swinging? What was the biggest orgy they'd been involved in? What did that massive cock in Jamaica feel like, the one Kelsey had seen in the photo albums her mom keeps hidden away? And how did she meet and fuck that handsome black man when Kelsey was there in Jamaica with them? Those questions and others would wait for another day.\n\n All the new excitement in Kelsey's life made the summer fly by. Before she knew it, it was time to go off to art school, the same University where her mom and dad had met. She was a top student in high school, and received a partial scholarship, but Bobby and Kay struggled a bit financially, so Kelsey would have to get a job after she got settled in at school.\n\n There was another blow-out orgy at Brie's pool the week before all the kids left for their new lives. A few new faces were there \u2014 another girl they liked and her boyfriend, and a boy Kelsey had been friends with all her life, a jovial computer geek named Raymond. Brie tried to veto his invitation, but Kelsey insisted, telling the other girls how nice Raymond was, and that she wanted to send him off to college knowing something about girls. Brie and the others thought Kelsey was crazy. They always laughed when she walked with him in the halls at high school, his tall, skinny ganglieness, bad hair and old-fashioned glasses contrasting vividly with her tiny perfection.\n\n Like most boys, Raymond watched porn. He'd only seen one naked girl in real life, and, well, it wasn't a girl. It was Kelsey's mom.\n\n It was a summer day and she was gardening. She walked around the corner of the house pushing a wheelbarrow and was surprised to see Raymond.\n\n \"Oh, Hi Raymond!\" she said brightly, naked as the day she was born. \"You snuck up on me. Did you get a new muffler for your car?\"\n\n \"Oh...yeah. Sorry,\" Raymond said. He was standing next to his old Toyota with the door still open, unable to move or look away.\n\n \"I'll get Kelsey for you,\" Kay said. She walked casually up the wide front steps of the old house, across the big porch and in through the front doorway. Kesley walked out a few minutes later, fully clothed.\n\n \"Sorry,\" she said as they drove off. \"Did you get an eyeful of my mom? I always tell her she shouldn't work in the front yard like that, but she's stubborn.\"\n\n \"Yeah...it's...all right,\" he said. He thought he was fighting a smirk pretty well, but it showed.\n\n \"You like older women?\" Kelsey asked.\n\n \"She's not really older...that much.\"\n\n \"She's thirty-seven.\"\n\n \"That's way younger than my mom,\" he said. My mom's forty-nine. She doesn't look like...yours.\"\n\n They changed the subject and drove on, but Kay's tits and the way her ass looked climbing those front steps fueled Raymond's fantasies for months. \n\n The pool party was another humdinger. It was the third one that summer, and with new kids involved it was the best yet. Kelsey hadn't told Raymond what to expect, thinking she might scare him off. So when he got there a little later than the others, walked in through the empty house to the pool patio and saw all the bare breasts and just two little bikini bottoms left on two of the girls, he was stunned.",
        "Kelsey was one of the two. She'd intentionally left her bottoms on to ease Raymond into things. She didn't want the poor guy to have a heart attack right off the bat. She'd underestimated the power of her naked tits though.\n\n \"Hi Ray!\" she yelled happily when she saw him. She ran over to him, tits bouncing, and gave him a kiss on the cheek. She'd never kissed him before.\n\n Raymond was speechless. For real. His lungs were locked up tight and he couldn't even muster a mumble. Kelsey smiled. She knew he needed a few minutes to get his head together before she introduced him around.\n\n \"Lets' go inside,\" she said. \"I'll get you a drink.\"\n\n Forty-dollar Bourbon and Pepsi was what almost everybody was drinking, so she poured one for Raymond. He was still shell-shocked, but starting to form words.\n\n \"Did you find the house all right?\" Kelsey asked.\n\n \"Oh...yeah,\" Raymond said.\n\n \"I like your suit,\" she said. \"We haven't been swimming in a while, have we? Not since I got these tits probably, right?\"\n\n \"Yeah,\" Raymond said quietly, glancing at the beautiful things.\n\n \"You don't mind us skinny dipping do you? You know me, getting naked's like no big deal. Everybody's different though. I hope you don't mind. We'll have fun,\" Kelsey said with a twinkle in her eye. Her latent lust was just starting to bubble through, and Raymond was getting his first glimpse of it. It threatened to send him into shock again, but he powered through. The drink he was gulping helped.\n\n \"Be careful with that,\" Kelsey said. \"You're not used to it and you've gotta drive home. You won't need it once you get used to everything. Real life's plenty intoxicating, right?\" \n\nShe smiled and put her hands under her tits, holding the weight of them and jiggling them up and down a little. She giggled at Raymond's reaction. \"Oh, sorry,\" she said when she noticed him trying to hide the rising tent in his bathing suit. \"You can hide it in the pool. Let's jump right in, then nobody'll see you. You can meet everybody later, after that cools down,\" she said, gesturing toward his boner.\n\n Raymond was amazed at how freely Kelsey was talking about...things. That, and the fact that she was standing there talking to him wearing nothing but a tiny bikini bottom. It was all so far beyond anything he'd imagined; his brain felt totally scrambled. He glanced out the big french doors at the other girls, tits bouncing as they danced to throbbing music. He felt like he was in way over his head.\n\n \"Take your shirt off. You can leave your glasses on the table if you want,\" Kelsey said, knowing he could see reasonably well without them. \"Ready?\" she said.\n\n He gulped down the last of his drink. She took his hand and they went to the far end of the room, through a sliding glass door that was away from the throbbing speakers and the dancing kids. They skittered across the patio and plunged into the pool. Appropriately, it was the deep end.\n\n They came up for air \u2014 Kelsey giggling, Raymond looking a bit more relaxed \u2014 and swam for the side. There was a little ledge there to stand on, and Kelsey moved in close to Raymond. With water still streaming off of their faces, she kissed him. It was a nice long kiss, with lots of tongue. It was Raymond's first.\n\n \"Nice!\" Kelsey said softly when their lips parted. \"You know you're one of my best friends, right?\" she said, her twinkling eyes darting back and forth between his. \"That's all this is, okay? You ever hear of friends with benefits?\"\n\n \"Yeah,\" Raymond said, wiping his eyes so he could get a better look at Kelsey's radiant face.\n\n \"You okay with that?\" Kelsey asked. \"You're not gonna get all weird and think I need to be your girlfriend?\"\n\n \"No,\" Raymond said. \"Whatever you want. I'm...yeah.\"\n\n \"Good, 'cause I wanna do things to you tonight,\" she said, her hand gathering up the still mostly hard lump in his bathing suit. \"Do you wanna do things to me?\"\n\n Her eyes were shining, and her latent lust wasn't latent any more. It was written all over her face. She kissed him again, long and lingering as his cock got even harder in her hand.\n\n \"Rayyymoooond! Gettin' some actioooon! Nice buddy!\" one of the guys yelled.\n\n Raymond's heart soared. He'd waited his whole life for one of the cool kids to talk to him that way. He'd gotten used to the fact that it would probably never happen, and he kind of thought sex with a girl would never happen either. Boy, was he glad he didn't chicken out and blow off the party like he'd wanted to earlier in the evening!\n\n Out of nowhere he heard it. At first he thought he was dreaming, his mind regurgitating some porn he'd watched earlier in the day, but no, it was real and it wasn't coming from the speakers. It was behind him. Kelsey watched him as his mind worked, her face showing the excitement she was feeling as Raymond slowly realized what kind of party it was going to be. \n\n \"Looks like Trina's happy,\" Kelsey said. \n\n She loved the look of surprise and wonder on Raymond's face as it clicked in his mind \u2014 Trina, the long-legged captain of the cheerleading squad and probably the hottest girl in school, was getting fucked!\n\n \"You can look,\" Kelsey said to him, her voice calm and reassuring. \"There'll be a lot to see tonight. Everybody else is watching.\"\n\n Raymond turned around. There were whoops and cheers above the throbbing music, and Trina's rising cries of love were shockingly visceral as one of the boys fucked her doggie style on a lounge just ten feet away. Raymond had seen such things on porn, but in real life, seeing a girl he knew embroiled in that way was breathtaking.\n\n \"She's hot isn't she? Did you ever dream about her? Or Brie or the others? We're all fuck buddies. You can play with any of 'em. And me,\" Kelsey said, her voice seductive and hypnotic. Her hand had shifted inside Raymond's suit, massaging his cock flesh-on-flesh.\n\n The girls ended up liking Raymond. A lot. No, he wasn't a great lover, and he didn't have a super nice cock. But he was a fun guy, with a great personality when he loosened up, and the girls kinda got off on fucking someone so good-heartedly geeky. \n\n He didn't have any stamina at all until he came three times, but he did pretty well after that, playing enthusiastically late into the night. He texted his worried mother at two in the morning, telling her he was okay and he'd see her in the morning. Damn the torpedoes. He wasn't going anywhere.\n\n Kelsey made sure his first time was with her. She kinda loved that it was, after being friends with him since they were four. It happened right there at the edge of the pool, Kelsey riding the stunned looking boy after swallowing his first load. Action had broken out all around the patio, so no one was really watching, but Raymond still felt exhibitionist thrills as Kelsey rode him wild and free, her tits bouncing and her vocalizations hanging in the night air with all the other moans and cries. The whole thing felt surreal to Raymond, like he had fallen into one of the alternate realities in the sci-fi books and movies he enjoyed.\n\n One of the highlights of the night was Trina's request for a gang-bang. Five eager boys gave it to her good while the five girls egged them on. The guys went round-robin on her, bringing her to multiple orgasms, and then the double penetration got started and she flew off to the moon. Raymond couldn't believe it when he had his cock deep inside the hottest-girl-from-high-school's ass. Flat out couldn't believe it.\n\n Needless to say, Kelsey fucked her brains out that night. She made sure she sampled all the boys, and all the girls too. It was a fitting end to a remarkable summer. She'd had a strong feeling standing on the stage on graduation day that her adult life was ready to start. Losing her virginity was the biggest step along the way. She lost it all right. Oh boy did she lose it!\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n Bobby and Kay drove Kelsey to the University in late August and helped her get moved into her dorm room. It was a different dorm than the one where they had met, but they'd been to a few parties there back in the day.\n\n \"Don't forget to be careful honey,\" Kay said to Kelsey when they were leaving. \"You don't wanna end up pregnant like I was sophomore year.\"\n\n \"I will Mom,\" Kelsey said. \"I mean I won't. I'll be careful.\"\n\n \"Have fun,\" Kay whispered as she hugged her daughter tight. \"College is where I learned how fun love can be. But you're way ahead of me, aren't you.\"\n\n Kelsey looked at her mom, wondering how much she knew.\n\n \"It's okay honey,\" Kay whispered as she squeezed her tight again. \"Mothers know things.\"\n\n The first night in the dorm was chaotic, but by night two the parties had started. Kelsey wandered into a particularly wild one on the floor above hers. The boys almost fell silent when they saw her. Tight, faded jeans and a shrunken t-shirt with no bra will do that to a guy. Someone handed her a drink \u2014 a multi-liquor punch of some sort.\n\n She didn't talk much. The boys seemed intimidated by her looks and effortless sexiness, and the girls, well, it was pretty much the same story with them.\n\n \"How 'bout some strip games,\" she said, blurting it out of nowhere when no one was talking. If there was one thing Kelsey was good at, it was being naked.\n\n So that was how she started yet another orgy, breaking the ice in a big way with her new crowd. If that dorm didn't already have a reputation for wild sex, it surely did after Kelsey's freshman year.\n\n In the weeks after the first party, there were other gatherings of drinking, listening to music and sex play. They were often a bit more mellow and laid-back than the first blow-out. Kelsey reveled in lounging around naked with her friends, having nice conversations, and fucking quietly on the bunk beds while the others talked. It all seemed so decadent and delicious. \n\n The subject of porn came up once in a while. One day a student who grew up in the city mentioned a local porn studio. No one believed him, but he said it was true. He said he'd driven by it one time and it was nothing much to see, just a yellow door on an old brick warehouse in the heart of the city. The conversation shifted and no one mentioned it again, but Kelsey was intrigued. She had just spoken to her mom on the telephone that day, and Kay reminded her she needed to get out and look for work, to help with the expenses. Kelsey did some Googling that night, and made a phone call the next day...\n\n \"Hi. I'm a student up at the University and I'm looking for a job. I was wondering if you ever hire girls?\"\n\n \"Do you mean office work honey?\"\n\n \"No. Doing the movies. Acting? Do you call it acting?\"\n\n \"Some folks do,\" Tucker chuckled. \"I prefer to think of it as performing. Do you have any experience?\"\n\n \"Not with movies, no. But I know how to...do sex, you know?\"\n\n Tucker could tell Kelsey was young. When she told him she was eighteen he was intrigued. He'd been wanting to add a teen girl to his stable of talent, but hiring them was difficult for him. He never felt comfortable approaching young-looking girls and propositioning them with an offer of work. It was dangerous unless he already knew their age, so he didn't get many opportunities with 'barely legal' girls.\n\n \"All right honey. Well, why don't you come down to the studio and we'll talk. I can't promise you anything, but we'll talk and see where things go.\"\n\n Tucker wasn't sure why, but he thought Kelsey was a heavy girl, as in rather round. It was something about her voice. Not that it mattered much \u2014 he'd been wanting to add a 'full bodied' girl to his stable too.\n\n Kelsey buzzed the intercom later that day. Tucker let her in. She was nothing like what he pictured on the phone. To say he was stunned by her looks was a huge understatement. Almost microscopically petite, with the curves of a voluptuous woman and wild, windblown, cinnamon-red hair hanging all the way to her ass like a sexy lion's mane. He knew he'd found his girl. Even if she was terrible he had to use her for the visuals alone.\n\n As he talked to her though, he realized she might be a porn producer's dream come true. Young, stunning looking, with a free and easy attitude toward sex and nudity that was totally refreshing; she seemed to be one-in-a-million. She was even a real, honest-to-God cheerleader for Christ's sake.\n\n \"Shit, you cheerleaded with those tits?\" Tucker said. Kelsey giggled.\n\n \"They made us wear ugly sports bras for a couple years. But senior year we got a new cheer coach and she said we didn't have to. I think we turned her on,\" she smirked.\n\n \"I'm guessing all the fathers in the stands celebrated when she got that job. I hate to ask honey, but how do you think your parents will react if I hire you?\"\n\n \"Oh. Well, my mom'll probably be jealous,\" Kelsey chuckled, \"and my dad...I don't know. I can almost picture him saying it's cool. I told you about their lifestyle. I don't think they've done any serious porn, like commercial stuff, but I know there's been lots of cameras around, and I've seen their friends taking video before. I don't know what happened to it, maybe it was just for them, but it could be out there I guess. I guess you kinda know by now they're kinda different than most parents.\"\n\n Tucker pulled a contract out of his desk drawer, gave her a thousand-dollar signing bonus and hired her on the spot.\n\n \u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n Cinnamon Sugar. That's the name they settled on for Kelsey. Her wild, way-to-long but awesome mane of cinnamon-red hair was the inspiration, and she was sweet like sugar, both to look at and to talk to. It was the best name Tucker had come up with yet.\n\n Tucker scheduled her first scene with Jamar. Kelsey had met him the day Tucker hired her. Jamar was smitten with her immediately, and she with him. They looked amazing together \u2014 the tiny, freckled redhead and the tall handsome Jamaican. Tucker had always loved the way a mix of white and black skin looked onscreen. It seemed like a no-brainer to get them out of their clothes and see what would happen. \n\n Friday afternoon Kelsey took a bus down to the warehouse district. Tucker had the full staff on hand \u2014 Chip to get Jamar ready, and Marsha to take care of Kelsey. Tucker would be handling the camera duties after Jamar set up the lighting.\n\n \"Good Lord girl!\" Marsha said when she met Kelsey. \"That hair! Wow!\" she laughed.\n\n \"Is it awful?\" Kelsey asked, twirling a big gob of it around her hand and forearm.\n\n \"If you cut it I'll fire you,\" Tucker said kiddingly to Marsha.\n\n \"No! It's awesome!\" Marsha said, running her fingers through it. \"I mean it's wild, but, yeah, I'm not doin' much, that's for sure. Oh my God, you naked, with this beautiful stuff hanging all around you? Jesus Tucker, can I do a scene with her?\" Marsha chuckled.\n\n \"Absolutely!\" Tucker said, suddenly realizing he might get to see Marsha naked and orgasmic again. \"Hubby won't mind, if it's a girl, right?\" he smiled.\n\n \"Wow,\" Marsha said, looking Kelsey over. \"I might have to ask him.\"\n\n Kelsey smiled. She'd never been with a woman older than her college friends. She got tingly thinking about all the possibilities at her new job.\n\n Marsha had some wardrobe choices laid out for Kelsey to try on. Typical 'teen hanging around the house' clothing and some little string bikinis, to go with the scene Tucker was staging. Kelsey ended up barefoot, with short, cut-off sweatpants that you could see right up inside when she sat down, and a loose white t-shirt. It showed off her bra-less tit jiggle and draped over her nipples beautifully. Marsha brushed out her hair and then messed it up again. A little eye liner brought out her blue eyes. Cinnamon Sugar was ready for her debut.\n\n She wasn't nervous at all, but her excitement level was off the charts. Jamar turned her on more than any man she'd ever seen. He was standing behind the cameras discussing things with Tucker when Kelsey walked onto the set, her white shirt and red hair almost glowing under the lights. Tucker had decorated the set to look like a college girl's bedroom.\n\n The first part of the scene was just Kelsey, lying in bed, talking to a girlfriend on the phone...\n\n \"Spring break? Yeah, I can afford it I guess. I've been saving up. Where do you wanna go?......Jamaica? That sounds cool!......Black guys? No, have you?......Really?......Oh my God!\"\n\n Kelsey falls asleep after the phone call, and has a dream.... \n\n She walks into a hotel room, leading Jamar by the hand. It's filmed in soft light, with a misty, almost blurry quality. He's wearing a colorful bathing suit. Kelsey's in an insanely sexy string bikini. Her tits seemed to be moving even when there was nothing making them move. \n\n Up until that point in Kelsey's brief sexual life Brie's dad had the biggest cock she'd played with, but she was hoping \u2014 and pretty sure based on the way he filled out his tight pants \u2014 that Jamar would be her first really big cock, as in, huge. She dropped to her knees and pulled down his bathing suit \u2014 the same way she'd pulled down Austin's at the first pool party \u2014 and was astonished at the size and perfection of the black meat hanging in front of her face. She didn't touch it at first. She just looked at it with wide, unblinking eyes, her mouth open a little, curling into a delicious little smile. She looked up at Jamar's big brown eyes and back down. She giggled a little. Her small hand wrapped around the growing appendage and looked up into Jamar's eyes again.\n\n \"What's your name?\" Kelsey asked.\n\n \"Elijah,\" Jamar said. \"What's yours?\"\n\n \"Cinnamon,\" Kelsey said. \"My friends call me Sin.\" \n\n It was a powerfully seductive line reading, worthy of an Academy Award. Tucker was over the moon. As he stood in the shadows monitoring the cameras, he shook his head and smiled at Kelsey's comfort and natural talent. He was dying to see if she was as natural with a cock deep inside her. Then he'd know he had a real star on his hands.\n\n Kelsey examined Jamar's cock for a few more moments, letting every detail sink into her brain. She wanted to remember everything about it. She raised it up high and extended her tongue, licking the smooth balls before lowering the long shaft onto her tongue and letting it slide into her wet mouth. It was fully hard, and fully huge. Kelsey moaned. It was an almost musical moan, and it made Jamar smile.\n\n \"You're as sexy as a little girl gets, aren't ya,\" Jamar said, gathering up her wild mane of hair in his hand.\n\n \"Mmm hmm,\" she moaned, her mouth full, and getting fuller.\n\n \"Ohhh!\" Janmar groaned when she had taken more than he thought she could. \"Damn girl!\" he sighed.\n\n The blowjob was slow but intense. Deeper and deeper Jamar went, bringing up stringy phlegm that dripped off Kelsey's chin down to her tits. She couldn't get him as deep as she wanted with her throat at that angle, so she pulled off, stroking the slippery cock with both hands while she took a breather.\n\n \"I'm not done yet,\" she said breathlessly, looking like a girl on a mission.\n\n She wiped her wet chin with the back of her hand and took off her bikini top, giving everybody their first look at even more of her magnificence. She got up on her feet, bent at the waist with her legs spread wide, and took the monster in her mouth again. The new position straightened her throat, and everyone was stunned to see all of Jamar's considerable length disappear into the tiny girl's gullet. She even held it there for a while. It was a pose that was breathtaking \u2014 her mouth stretched wide with Jamar's balls right up against her chin, her crazy nice tits hanging under a perfectly arched back, and the sweetest little ass and pussy Tucker had ever seen, spread wide and spectacular. He looked at Marsha and they both shook their heads in awe.\n\n \"Fuuucck little Sin!\" Jamar groaned as his length slid out of her throat. \"You a little wild girl, ain't ya?\"",
        "She gasped for breath as she straightened up, wiping her slimy chin again.\n\n \"You gonna fuck me with this thing?\" she said, still hanging on to her prize. \"Fuck me 'till I scream so loud they kick us out of this fuckin' place?\"\n\n Jamar picked her up and threw her on the bed. He ripped the stringy bikini bottom off of her and fucked her with his long tongue. She came almost immediately. He picked her up again and tossed her onto her hands and knees, sending her long hair flying. She looked like a wild little sex animal when the huge cock plunged into her tight little pussy.\n\n \"Oh Fuck!\" Jamar bellowed as he felt the mind-blowing tightness. \"Fuck little Sin!...Fuck!\" \n\n Tucker had never seen a look like that on Jamar's face. His mouth was open and his eyes rolled back in his head as he fucked the wild little minx deep. Somehow he held onto his last thread of composure and kept going, fucking Kelsey long and hard until she screamed, just like she wanted. \n\n Kelsey's first experience with 'big cock' was better than she could have ever dreamed. Ever since finding her mom's special photo albums Kelsey had been haunted by one of the pictures. She figured her dad must have taken it \u2014 a snapshot of her mom on her hands and knees with her pussy stuffed full of huge, black, Jamaican cock. Kelsey was haunted by it, but it was the good kind of haunting, the kind that made her pussy wet and tingly every time she thought about it, even back when she was a virgin. There were lots of other pictures of her mother with that good-looking man, but that was the one Kelsey liked best \u2014 her mom's body glistening in the tropical heat, her muscles bristling with energy like an athlete, her face looking over her shoulder, right at the camera, with an expression of pure, unbridled ecstasy. It was the most powerful image Kelsey had ever seen, and she couldn't help but associate that kind of sexual pleasure with big Jamaican cocks. She dreamt of going back there someday as an adult to partake in the adventures her mom had enjoyed. So imagine Kelsey's delight when Tucker showed her around the studio during her job interview and Jamar appeared, with his lilting Jamaican accent, his stunning smile, and his huge soft cock straining the zipper on his tight pants. Imagine her delight when Tucker told her Jamar did scenes once in a while, and they might be working together. Imagine her delight when, under the bright lights for her first time ever, she let that huge, coal-black cock slide into her mouth, and then into her throat. Imagine her delight when she reenacted her mom's pose \u2014 on her knees with Jamar filling her deeper and fuller than any man had filled her before, looking back over her shoulder at him with pure, unbridled ecstasy. She realized at that moment that her mother was screaming in the photo. She'd never thought of that before. Kelsey's scream raised goosebumps on all the crew.\n\n The scene had flowed effortlessly to get to that point, and equally naturally and beautifully from that point on. After the freeze frame she was after was solidified in Kelsey's mind, she felt as free as the wind and fucked like she'd never fucked before. It may very well have been the pinnacle of her sexual life. Only time would tell if that was true. Tucker knew how special it was, and how special Kelsey was. He looked at Chip and Marsha numerous times that day, silently saying, Oh my God, can you believe this? \n\n The session was epic in its sweaty intensity. When they took a short break Jamar and Kelsey both gulped cool water like they'd just walked out of the desert.\n\n \"Boss!\" Jamar said breathlessly as he tossed aside his empty water bottle. \"You didn't tell me I needed to hydrate for this one!\"\n\n They were quickly back to business, before their sweaty bodies cooled down and caught a chill. Three more fucking positions, and a gloriously slippery sixty-nine. It seemed karmically appropriate that the session ended with doggie style again. Jamar twirled Kelsey's wild cinnamon hair into two long handfuls, wrapped them around his forearms and pulled them tight as he fucked her hard from behind. He was so deep she could feel him way up in her gut.\n\n \"Yeah!...Fuck me!...Oh God yeah!\" she yelled. Her voice was gravely and devilish as she climbed to yet another slippery, sweaty orgasm. She'd screamed so much her vocal cords were raw.\n\n Jamar thrusted relentlessly into his thoroughbred yearling. It was her first time out of the gate, but she was born to be a winner. He held the reins tight and slapped her ass as he rode her hard, guiding her toward the finish line. First place? Oh yeah!"
    ],
    "authorname": "riverboy",
    "tags": [
        "virgin girl",
        "cheerleader",
        "big tits",
        "redhead",
        "orgy",
        "high school",
        "naturist",
        "swingers",
        "porn",
        "big black cock"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/tuckers-studio-ch-13"
}
{
    "title": "Halloween in Roanapur",
    "pages": [
        "<center>Halloween in Roanapur</center>\n\n<center>My Very First Souvenir Alligator Skin Cowboy Boots...</center>\n\n\u00a9 2020 Chloe Tzang All rights reserved. The author asserts the right to be identified as the author of this story. This story or any portion thereof may not be reproduced or used in any manner whatsoever without the express written permission of the author except for the use of brief quotations in a review. If you see this story on any website other than Literotica.com, it's been copied without the author's permission.\n\nAnd of course, here's that little note from Chloe: A couple of years ago, I organized the \"\" Story Event on Literotica, which is where \"\" came from. I started writing a second story, \"One Night in Roanapur\" for the Event, but didn't even come close to finishing the start, so I parked it. I was looking for an idea for the , and Roanapur popped back into my thoughts. \n\nAnd if you've never read \"Black Lagoon\", well, I love it, and I've got every volume. It's a Japanese manga series, you might like it, you might not, there's a lot of violence in it (go figure...) but it gave me the idea for this little story, so I resurrected the start of my old \"One Night in Roanapur\" story, and hacked out this in a screaming hurry for the 2020 Literotica Halloween competition. Writing down to the wire...\n\nAnd now, that warning: this story does have more than a little death and violence in it - it's set in Roanapur after all... so if that's not your thing, skip this one. Also, I've sorta played fast and loose with the category here, but I hope you won't mind. They're Trexy's very first souvenir alligator skin cowboy boots, after all, and a girl's first time for anything is very special.\n\nHope you enjoy, because I did have a lot of fun writing it, even if it was right down to the wire to get it completed and submitted for the competition, not that it's a winner or anything, but I hope it's entertaining, and that's what writing this stuff is all about, after all - entertainment... Chloe\n\n<center>Nothing but cowboy boots\n\nSets your spirit free\n\nThat wild, wild western birthday suit\n\nIs the remedy for modesty\n\nIt ain't proper, it ain't cool\n\nBut folks remember what you do\n\nIn nothing, whoa, nothing but cowboy boots</center>\n\nNothin' but Cowboy Boots, Blue County\n\n<center> * * * </center>\n\nRoanapur. A coastal city in southern Thailand, built by the Japanese military into a port during World War II to support their war effort. Even then, it was a city of criminals, but it found its real place in the world during the Vietnam War, when it became a haven, within which the deserters and the losers of the Vietnam War took refuge, to be joined by the worst villains and criminals on the planet. \n\nRoanupur. An evil city, caught between east and west but belonging to neither, coming to fruition during the height of the Cold War, nurtured by those who came there to ride the wave of the illegal drug trade sweeping across the continent, a last stop on the road to hell, and if you weren't tough enough and hard enough to look after yourself, you were doomed to take that road to the end.\n\nRoanapur. A city of prostitutes, drug-addicts, mercenaries, killers, and psychopaths of any and every nationality. The Triads. The Mafia. The Columbian and Mexican cartels. The Filipino gangs. The Yakuza. Hotel Moscow. The international biker gangs, the criminal ones. The Hells Angels, the Bandidos, the Australian Comanchero's. The worst of the criminal underworld. Islamofascists. Mercenaries. Neo-Nazis. The CIA, Mossad, the North Korean RGB, the Reconnaissance General Bureau, and every other Intelligence Agency and criminal organization needing a base outside the law. They're all there, in Roanapur, come from across the world to butt heads, and jostle for power, in a city outside the control of any government.\n\nRoanapur: The edge of the world, the crucible of hypocrisy, a place where those whose souls have been destroyed in the relentless search for money and power reside. Many who came here to make a name for themselves are swallowed by the darkness, never to return. A cruel fate awaits any half-assed small time crook who accidentally stumbles into Roanapur, for Roanapur is merciless to the weak.\n\nRoanapur. The city I was running to, because that's where my cousin, Rebecca Lee, Revy, Revy Two-hands, lived and worked, and she was my only hope now. Because when you have New York's biggest Triad, the Flying Dragons, and the Sinaloa Cartel, after you on the one hand, because you ripped them both off for a bit more than a few million on a fentanyl and meth deal you were the go-between on, and a Federal Grand Jury on the other, coz the Feds are hot on your ass after you moved that fentanyl and meth, along with a few other things they'd had their eyes on, like the bank accounts you cleaned out, you haven't got too many places to run.\n\nOnly Roanapur.\n\nRoanapur. The last refuge in the world for people like me.\n\n<center> * * * </center>\n\n\"Look, I not going further. This here's Roanapur. Find your own way in.\" The tattooed driver with the mirror shades and the bald head, who'd picked me up from the dive off of Soi Cowboy, and spent half the day driving me down here, pulled over to the side of the road before we got onto the long bridge.\n\n\"Your boss told me all the arrangements were made,\" I said. I was gonna be pretty pissed if I had to walk into Roanapur from here, but yeah, I knew why this chickenshit driver wouldn't go any further, coz I'd been here once before, visiting Revy, and she'd picked me up from Suvarnabhumi Airport that time, five years ago, and she'd told me. Guess I was gonna be real pissed.\n\nRevy'd been real pissed with me too, back five years ago. \"Fuck it, cuzzy,\" she'd snarled. \"What the fuck are you thinking, you stupid little bitch. Stay in New York, where you're fucking safe. Are you fucking crazy, coming here.\"\n\n\"I've got a delivery to make to this dude, Mr. Chang,\" I'd said, and yeah, I wasn't that stupid. The delivery met me in Bangkok, and I hadn't touched it. Might have been seventeen back then, five years ago, but I'd worked for Mr. Ong since I was twelve, doing deliveries, and I knew what it was I was delivering, and I knew the penalties in Thailand for what I was delivering, and I knew how to move deliveries and not get caught. Mules? You gotta be kidding me. I had it sent down by FedEx. They deliver anything, anywhere. Better than any mule.\n\n\"Chang? Jesus, kiddo. You're worse than fucking insane,\" Revy'd said, looking at me. \"Who the fuck are you working for in New York?\"\n\n\"Mr. Ong,\" I'd said.\n\n\"Fuck,\" Revy'd said. \"You're in deep.\" She'd looked at me. Really looked. \"You know what you're delivering?\"\n\nI'd just looked at her, and my eyes were as hard as hers. \n\nShe'd nodded. \"It's gonna cost you, cuzzy. Family means fucking nothing in Roanapur.\" \n\nIt had cost me, but Mr. Ong was paying, and Revy was right, family didn't mean anything to anyone in Roanapur, but we did spend a couple of evenings together, talking. Just catching up, because Revy and I, we were family. All the family each other had, because I knew what'd happened to hers, and I'd known her parents. Didn't blame her for that at all. I'd have done the same to mine, but mine went before hers, executed by a dealer they owed money to.\n\nThe only reason I hadn't joined my parents was that even at five, I'd recognized there was shit going down as I walked out of the elevator on our floor, late in the evening, coming home from school, because school was safer than being at home. One look, and I'd turned and walked the other way, and then bolted down the fire escape, as fast as five year old legs could take me. It was Revy that'd looked after me, back then, back when she'd found me, back when we were both kids. Back when I was five, and she was ten, and hard as nails, even then. With her parents, she'd had to be.\n\nI'd learnt to be. From Revy.\n\nI'd made the delivery to Mr. Chang. A big one. Got back, and Mr. Ong'd promoted me. I'd worked my way up. A long way up. The go-between on the big deals, that was me. But now? Now Mr. Ong wanted my ass, because I'd crossed him, along with the Sinaloa Cartel, the Feds, and fuck knows how many others, coz I'd made sure those millions were tucked away in half a dozen banks across half a dozen tax havens, and as many safety deposit boxes, and I'd offloaded the fentanyl and the meth to this Yakuza dude, who didn't give a crap for the Siniloa Cartel or the Flying Dragons, but he'd liked the discounted product. \n\nNow? Now I had to live to enjoy the proceeds.\n\nI'd been frigging crazy pulling the whole thing off at all, even if it had gone off without a glitch, and I knew it, but knowing didn't mean I'd anticipated all the fallout. Hand't had any illusions about the extent that the Flying Dragons and the Siniloa Cartel would go too, to get me. Just, itd been tougher to vanish than I'd anticipated. A lot tougher. Which was, yeah, why I was heading into Roanapur. A lotta people headed in to Roanapur. Not so many came out, and the ones that did, they were never the same.\n\nNow? Now, I just hoped family meant something to Revy, coz I didn't have anyone or anything else, and there was nowhere else to run too. Only Roanapur. And Revy. Nobody else knew about Revy. Not even Mr. Ong. I'd never told him about her, and this time, I hadn't sent a message to her, telling her I was coming. Too dangerous, and I didn't need much. A safe apartment, somewhere to get my feet on the ground, change my identity, change my face, get back into business, but for myself this time. \n\nThat was all I needed.\n\nYou could do all of that, and more, in Roanapur.\n\n\"Hey,\" the driver said. \"My boss in Bangkok tell me where to drop you. Roanapur, that not our turf. I drive you in there, I dead. You see noose there, Miss? That is a warning. I no go further. You get out here.\"\n\nYeah, I saw the noose. I knew the story. Better than he did. Revy'd told me, last time I was here. That noose that the bridge was named after, Slip Knot Bridge, that was a message to be read by anyone heading into Roanapur. For the cautious, the sane - it was a warning. For the reckless, the wild at heart - it was an invitation that was impossible to refuse. \n\nFor the desperate, like me? \n\nDidn't mean a thing, because Roanapur was my only refuge.\n\nIf I didn't move my ass, I was dead anyway, because if I couldn't make a place for myself in Roanapur, where the fuck else was there, and I knew the answer to that one. \n\nNowhere.\n\n\"Okay, okay,\" I said, 'n I could see this dude was crapping himself. He'd gone as far as he was going, and this was as close as I was gonna get in his cab. Unless I put a bullet through the back of his head and took the cab, but that'd be burning more bridges, and there wasn't anyone after me in Thailand. Not yet. Safer all round to keep it that way.\n\nBesides, I didn't have a gun. Not yet. \"Get my bags out, I'll flag down a ride.\"\n\nWhatever I could get, and yeah, you had to be careful catching a Roanapur cab. Driver picked you for an easy mark, you'd be in one of the canals with a hole in your head before you could blink and you'd be stripped of everything except your fingerprints. If you were lucky, that is, coz organ harvesting was a growing business these days, and a fresh donor, well, lets just say you'd be worth a few bucks to the right operation.\n\nAnd that was another reason right there, why I needed Revy. If I was gonna get my face rebuilt, I needed someone I trusted while I was out of it. Otherwise - well, when you were already on the operating table, what was to stop them doing a few different procedures, and tossing the remains out with the garbage. The short answer was, this was Roanapur. Wasn't anything to stop them. So yeah, I needed Revy. Just hoped she cared enough to help. No guarantees though. \n\nRevy was one cast-iron bitch.\n\nBut then, so was I.\n\nDriver got out of the car without a word, opened the trunk, and thirty seconds later both my suitcases were on the pavement, and I shrugged. \n\n\"Thanks for the ride,\" I said to his back, and I was wasting my breath.\n\nGuess I'd really have to make my own way in, and yeah, well, this was gonna suck big time coz local cabs were few and far between. Cut-throat business, driving a cab in Roanapur. Uber? You're killing me, dude, you are. Minute the Bangkok bunny was back in his car, asshole pulled a U-turn and he was gone, and me, I was baking already. Gulf of Thailand, it was supposed to be hot, but Jesus, this was a frigging sauna on steroids, and my top was gonna be see-through any second now. \n\nNo idea where Revy lived these days. Last time I'd been here, last time I'd seen her, that'd been five years ago. I'd stayed upstairs from some bar in a whorehouse, the Sloppy Swing was what the sign said, and the fat old bitch that ran the place had offered me a job.\n\n\"Only way a kid like you'll survive in Roanapur,\" she'd said, 'n then she'd cackled. \"Young and tight, they'll love 'ya, kiddo.\"\n\n\"I'm here from New York to see Mr. Chang,\" I'd said, real cold, 'n she'd seen the flying dragon tattoo on my shoulder, and she'd backed off. Instantly. Doubt that'd work this time, because if Chang knew I was here now, he'd be after me himself. Sell me back to Ong, or the Siniloa Cartel, or maybe just to the highest bidder, but then, anyone here knew who I was, they'd do the same, and I was fooling myself if I thought otherwise. Except maybe Revy. Revy was family, for what that was worth, and I was hoping it was worth something.\n\nHave to get rid of that tattoo too. Dead giveaway, which was why I was wearing long sleeves, and a light linen jacket. There were places that flying dragon tattoo would get you killed, just on principle. Other places, you'd wish you were killed first.\n\n\"Hey, honey. How much?\" The fat guy in the old Mercedes pulled up next to me, and Jesus, what was this? Halloween? Dude was wearing some kinda superman costume that barely held in his beer-gut, 'n a cowboy hat. I liked cowboy hats, 'n when I checked the old watch on my wrist, because I didn't use digital, ever, except maybe throwaways, yeah, date said thirty one October. Halloween. It was.\n\n\"You wearing cowboy boots too?\" I asked, smiling a real fake smile, the way some Chinese whore looking for a guy with some bucks to throw around would. \"I like guys wearing cowboy boots?\" \n\nI wasn't bullshitting him on that one. I did like guys wearing cowboy boots. I used to collect the boots, back in New York. Kind of a hobby. Souvenirs, and I'd had a few. Kind of sad that I'd had to leave them behind, but I could always get more. There's some real nice cowboy boots around, too. Nothing better than a guy in his birthday suit, wearing cowboy boots, and with a nice hard cock, and I always kind of thought that guys who wore cowboy boots had the biggest cocks. Sort of empirical experience on my part. Maybe one day I could write up a, you know, a Ph.D on it, or something. \n\n\"Honey, it's yore lucky day,\" he drawled. \"Ah ahm in fact wearing ma cowboy boots, so you jest park your cute little ass in here, and lemme take you foah ride.\"\n\n\"Sure, Mister,\" I said. \"Thousand baht for an all night ride, and I'll throw in this afternoon for free.\" I'd checked the going rates back in Bangkok. Dress like a cheap whore, there's a thousand bars and clubs you can blend into, and there's chinese whores everywhere in the world. I'd worked that one more than a few times.\n\nGet yourself picked up, and you got a free stay. Find a guy like this, and you walk out with more than you walked in with. Place like Roanapur, nine out of ten women, they're whores, one way or the other. The tenth is probably more expensive, that's all. I was gonna blend in easily. Already had, and I smiled, and this time it wasn't a fake smile. Cowboy boots here was in for the ride of his life, and I'd have somewhere to stay tonight. Maybe even some souvenir boots, although he seemed like a nice guy, so probably not. \n\nI never collected souvenirs boots from the nice guys. Only the assholes.\n\n\"Throw your bags in the back, honey,\" he said, and fuck, he even got out and helped me, and oh yeah, he really was wearing cowboy boots, beautiful cowboy boots, and I did like guys wearing cowboy boots. That, and he wasn't ugly. Just fat, and I didn't mind that. Fat guys are happy guys, usually, and I liked happy guys. Work this dude, and I'd have a place to hide out for a day or two while I sorted my shit out.\n\n\"You new to Roanapur?\" he asked, hand on my thigh, and I smiled at him, and put one of mine on his, and moved it higher. All the way higher.\n\n\"Yeah,\" I said. \"Just arrived from Bangkok. I was on my way to find somewhere to stay, and then have a look around tonight, see what this place is like.\" I gave him a bigger smile. \"I heard a girl could make good money here if she moved in the right circles.\"\n\n\"You just got real lucky, kid,\" he leered, and Jesus, he was getting a woody already. Didn't phase me. You used what you had, and I knew I looked younger than I was, and I knew what I had, and I'd used it before. Just wondered what he had, and I did like it that he wore cowboy boots. \"I can introduce you to a coupla people that could use a new girl. Do that tomorrow if you like. What's your name, anyhow, honey?\"\n\n\"Trexy,\" I said. Used to know a Trexy once. Real greedy bitch, so it was probably a good pick. She'd tried to screw me over, and for once, I'd just shrugged and walked away. I'd actually liked her, had a soft spot for the bitch, I'd even looked after her, and that was what hurt. Trexy? Yeah, Trexy would do for now. \"Trexy Lee. What's yours, Mister?\"\n\n\"Morty,\" he said, taking us across Slip Knot Bridge, and into Roanapur. \"Welcome to Roanapur, Trexy,\" and he smiled. \"We're gonna have a real good time.\"\n\n * * * \n\nHe was right. I knew that as soon as we walked in through the door of his apartment, and it was luxury. Sorta place you saw in Manhattan, and I'd been in a few of those. Doing deliveries. Taking payments, Collecting. The odd push out the window. This place was all glass windows and expensive carpets and designer furniture, paintings on the walls, a dining table with, like, china and wineglasses and crap, and he took me right into his bedroom, and peeled his superman costume off. Oh yeah, I loved his apartment, just the sorta place a girl deserved to hide-out in for a while, and I was gonna give him such a good time he'd beg me to stay.\n\n\"I wanna fuck you right now, china doll,\" he said, and yeah, he was ready alright. \"While you're all hot and sweaty. You can take a shower afterwards.\" He grinned.\n\n\"Leave the boots on,\" I said, peeling my panties off, and I was a little breathless, because I had this thing about guys in their birthday suits, wearing nothing but cowboy boots, and right now, that was all he was wearing.\n\n\"You like the boots, huh?\" he asked, and we both looked at them. \"Lucchese Romia, made out of Crocodile skin from the Blue Nile.\"\n\n\"They're beautiful,\" I said, and they really were. \"That from Africa or something?\" Coz I'd heard de Nile was a river in Egypt, or some shit like that. Didn't know about any blue Nile though, and Mr. Ong didn't source any supply from Africa, so I'd never been interested.\n\n\"Yeah, Africa,\" he said.\n\n\"Cool,\" I said, thinking oh boy, I'd love to hold those boots and just polish them until they gleamed.",
        "\"Stroke my cock for me,\" he said, looking down at me. \"I want to see those pretty little fingers wrapped around my cock.\"\n\n\"It's big.\" I musta sounded a little stunned as I eyed his cock, and it was big. Actually, it was huge, and now I was a bit nervous, because yeah, well, I could fake a whore real good, but I didn't actually have a whole lot of experience with cock's this size, even if I liked a good fuck as much as the next girl. \n\n\"Do it.\" His voice wasn't quite harsh, but it was commanding, and his eyes stared down into mine. \"Do it, china doll,\" he said again, grinning. \"Here.\" He reached down, took my hand, guided it to his cock. His fingers clasped mine on his girth and he was so thick, my finger and thumb didn't come close to meeting around him. \n\n\"It's easy, isn't it?\" He grinned. \"You know what to do,\" he added. \"Now do it.\"\n\nI looked up at him, and I held him in my hand, and I did know what to do. My fingers began stroking his cock, slowly, and I knew he was enjoying what I was doing. Enjoying my fingers stroking him to a rigid steely hardness, and he wasn't the only one that was excited. I was too, and that excitement was growing, the way it always did when the guy was wearing cowboy boots.\n\nYeah, weird, I know, but that went back a few years, quite a few years, and I was hotter and wetter by the second, just about panting now, and any second, I was just gonna moan out loud, and I couldn't wait. I didn't want to wait, and I sorta turned and backed towards his bed, drawing him with me.\n\n\"Oh yeah, china doll,\" he smiled, watching my hand. \"You're doing real good.\" He looked down at my delicate olive-brown fingers, so tiny on his massive white shaft where I stroke him. \"Trexy, huh. Cute name.\"\n\nI didn't say a word, just looked down, looked down at that massively long and thick cock I held in my hand and I watched my hand stroking him, that huge cockhead pointing up at me. I watched as his big white hand slipped between us and cupped my sex and his hand wass so big on me. Huge, covering me and his finger pushed into me, huge and thick.\n\n\"Nnnnhhhhh,\" I whined, biting my bottom lip as his finger penetrated me, sliding up inside me.\n\n\"Such a tight little pussy,\" he breathed, looking down at me. \"Pretty little tits too,\" he added. \"I love those cute little tits you Chinese whores have.\" He grinned, and he lifted me up and back, onto his bed, moving over me.\n\n\"I want some of that tight little china doll pussy right now, Trexy.\" One of his hands closed over mine where I was still stroking him, and he moved over me as I spread my legs wide for him. He guided his cock towards my sex and my heart pounded. Thumped. His cock was huge and I'm scared, but he's wearing those cowboy boots. Cowboy boots do it for me every time, because that first guy, that first special guy, he wore cowboy boots, and Morty's cockhead brushed my sex and I shivered in response. It was going to happen, I knew it was.\n\n\"Oh yeah, you like the thought of Morty's big hard cock fucking 'ya, don't cha, ya little whore?\"\n\n\"Yes,\" I moaned, looking up at him. I did, but it was the cowboy boots that did it for me, and he called me a whore. I liked that, I liked him calling me a whore. That's what that first guy called me, way back. He called me a whore, and for him I was, for that first special guy, the guy that took my heart, coaxed me into his bed, took my cherry, popped me, stiffed me for Mr. Ong's meth, and Mr. Ong's money, and then he told me to fuck off, and he broke my heart. \n\nI'd gone back to his apartment. I'd taken the meth back, I'd taken the money back, a lot more than he'd taken from me. I couldn't take back my broken heart, but I took his life instead, because I'd loved him, and I'd trusted him, and he'd betrayed me, and he'd broken my heart, so I put a bullet through his, and the asshole, he'd never break any hearts again.\n\nTook his cowboy boots too, because I did want something to remember him by. My first souvenir cowboy boots, and it was those cowboy boots that'd attracted me to him in the first place.\n\nI'd been as wet and as hot and as slippery-ready for him as I was for Morty now, and that huge cockhead brushed against my sex, brushed me where I was so wet and hot and slippery and I melted on him as his hand closed over mine, and he rubbed his cockhead up and down my slit. My knees fell even further apart, and I wasn't exactly anything like a virgin now, but still, the size of him scared me because it was so big, and my body was burning, on fire, alive with sensations as Morty smiled down at me.\n\n\"Oh yeah, china doll.\" His voice was low, filled with desire. \"Move your knees back for me. I want you to open wide for me, baby.\" It turned husky. \"You're going to need to be wide open for me.\"\n\nHesitant, timid, fearful... well, not really, but he liked that look, and I was excited, I did as he wanted me to do. I drew my knees back, my feet lifted into the air, dangling, and I offered myself up to him. I was scared of his size but my sex wasn't. My sex wanted him and I was so wet, so sensitive as he brushed his cockhead against me, exquisite friction where he parted my labia a little with his swollen cockhead.\n\n\"Further back, china doll, further back. Move those knees all the way back, as far as you can.\" He smiled as I did as he asked, drawing my knees back until they brush his ribs, my heels trailing against his hips and my hand was stroke stroke stroking his rigid length and he was steely hard beneath my fingers and his hand was almost gentle over mine, encouraging me, and I knew it was going to be good. \n\n\"Morty...\" I gasped, and okay, I was a little scared, and my heart fluttered like a bird's.\n\n\"Relax, china doll,\" he breathed, and he smiled. \"It's going to happen, you don't have to pretend to like it. All you have to do is take it.\" \n\nHe took his hand away from mine, brushed my hair back from my forehead, and my hand was still holding him as he pushed against me and I guided him, his cockhead parted my labia and he was pressing hugely against my entrance. His cockhead pushed thickly. It didn't slide into, it thrust, it bludgeoned, it rammed, and my knees clasped his ribs tightly as I opened to him, and he pushed and pushed and pushed, and I stretched and stretched and stretched.\n\n\"Oh, I like that, china doll,\" he breathed, and I knew it was happening. His cock, and he smiled down at me and he knew. \"You've never had a cock this big before, have you, china doll?\"\n\n\"No,\" I gasped, my back arching, and my hand clasped his cock, and I knew I was going to have to take it.\n\nAny second now.\n\n\"You're going to now,\" and he pushed harder still. \"Oh fuck, yeah,\" he groaned. \"You're one tight whore,\" and he reached down and took my hand from his cock, placed it on the bed above my head. \"I'm gonna stuff your hot little Chinese pussy full of big fat cock and fuck you 'till you can't walk.\"\n\n\"Ohhhhhh,\" I moaned as his weight came down on me, his hands pinned mine to the bed above my head and he was pushing against me, not stopping, I was opening, stretching and I knew I was going to take his cock. All the cock I could take. Maybe more than that even.\n\n\"Ohhhhhh.\" I stretched for him and it didn't exactly hurt. I wasn't a virgin, but he was so big, and my eyes were wide, my head arched back, my knees clutched at his ribs and I juddered and whined wordlessly as his cockhead entered me. Just his cockhead and it really was huge.\n\n\"Ohhhh... ohhhhh.\" Morty's cockhead stretched me, and he was enjoying me. \"So fucking tight,\" he breathed, and I was. I knew I was, because he was so big.\n\n\"Ohhhhh,\" I sobbed, juddering. He was so big in me, huge in me, pushing against my channel walls where he was inside me and he was moving a little now, gently pushing inwards, easing himself back, pushing inwards again and I shuddered again, knowing I'm taking his big fat cock, and it's bigger than anything I've taken before.\n\n\"Oh yeah, china doll. You are so soooo fuckable, you cute little whore,\" he breathed, and his cock pushed deeper, stretching me inside as he took more of me with every movement, not pausing now, sliding steadily, in and out, in and out and I was wet and hot and tight on him as he moved and the size of him. There was fear. Anticipation. Sensation. His cock inside me. Sliding through my entrance. Pressing against me inside.\n\n\"Ohhh... ohhh... ohhhh.\" I sobbed with every movement inside me. His cock was huge. So huge. Rigid. Steely hardness. It slid into me, eased out, stretched me everywhere inside, stretched me where our bodies joined and the sliding friction of his movements was exquisite. My back arched upwards, my knees clutched at his ribs, my feet kicked helpless in the air as he worked his huge cock deeper and deeper inside me, stretched my sex around his girth, around the rigid thickness of his big white cockshaft.\n\n\"Oh yeah, you do like that, don't you, china doll\" he breathed. \"You like my big cock and you're going to take it all for me tonight,\" and he just kept moving in me, easing his cock in and out, in and out and with every inward movement his cockhead thrust a little deeper, a little higher inside me, stretched me, opened my channel to take him and with every movement my breath puffed out, I gasped, juddered, clutched at his hands, and I knew what I was going to do. \n\nI was going to take it all. All of his big fat cock. As often as he wanted to give it to me.\n\n\"Ohhh... ohhh... ohhhh.\" Oh Jesus, he was huge. He really was. Huge and thick and hard and my entrance was stretched wide around him, I was completely open to him, at his mercy and he was taking me, moving in me, deeper and deeper inside me and I looked up at him, hypnotized by that white skin, his face, his head still wearing that cowboy hat, the bulk and weight of his body against my body, his weight solid on me, against me. Moving on me. In me. More and more of him inside me and what was inside me is big and hard and it was made to fuck me.\n\nIt fucked me. He fucked me. Steadily. On and on, and my climax was coming, I was almost there, and then it was, and there was no stopping as it crashed through me.\n\n\"Ohhhhh.... Ohhhhh...ohhhhoohhhhohhhhhh.\" I wailed, feet beating and kicking at the ceiling, and I bucked up against him, my hands clutched at him, and that climax swept me up and away in a cataclysmic tidal wave of sensation that filled my head with colors and almost blacked out my vision with the sheer intensity of that pleasure as he came inside me.\n\nHis cock throbbed, spurted, he groaned, he crushed me down onto the bed and he filled me with his cum as I sobbed through that aftermath,\n\n\"Well, fuck, china doll, you either fake it really good, or you had a good one,\" he grinned, a couple of minutes later.\n\n\"Jesus, that was a good one,\" I moaned, sort of collapsed on the bed. \"Can we do it again?\"\n\n\"You wanna take a shower first, honey,\" he said, after we'd done it again, and we were both smiling. \"And when you come back, I wanna fuck that hot little ass next.\"\n\n\"Want to take a shower with me?\" I said, smiling, because I did feel good. Really good. First fuck in three months, and I'd really needed that, and I didn't mind at all that he wanted to fuck my ass. I liked that too. Liked it rough, sometimes, and now was one of those times, and I sorta wondered how many times he could do me. Yeah, I was gonna enjoy staying here, even if it was only for tonight.\n\n\"You go start the water, china doll. I gotta make a call, 'n I'll come join 'ya.\"\n\n\"You bring that cute little ass back to bed as soon as you're all cleaned up, honey,\" he said, fifteen minutes later, still smiling, and he sorta slapped my ass as he left me to it. I didn't clean up right away though, because I did like the sight of that big cock, so I sorta watched through the crack between the bathroom door, and the door frame, and yeah, well, my heart sank, but I was kind glad I'd looked, because his cock wasn't what held my attention now.\n\nNope, it was those handcuffs, a knife, and some sorta gauze pad that he pulled out from that bedside cabinet, and he was pouring stuff from a small bottle into the pad, and I had that sinking feeling, because there could be two things going on here. One, he knew who I was, and he was gonna turn me in, or he was gonna try and get what I'd stashed away for himself, and hey, this was Roanapur.\n\nI was fooling myself if I thought anyone here wouldn't, and I never tried to fool myself. Not since I was about three years old, and I'd thought my Mom loved me or something. Turned out she loved that shit she stuck in her arm more. Two, he was one of those guys that liked doing the nasty to a girl. And hey, this was Roanapur, and I was fooling myself if I thought no one here would do anything like that. There were a lotta sick bastards in Roanapur.\n\nI watched him, and I smiled, coz there was one more sick bitch in Roanapur now, and I never did this to guy's I liked that, you know, toed the line. But when they crossed it, oh yeah, what's good for the gandar is good for the little goosey, and Monty, he'd just crossed the line. I'd met a few guys like him. In my line of work, that happened all the time. Didn't bother me unless it was me they had their eyes on, and for some reason, they always figured because I was small, and delicate, and okay, cute looking, and chinese, that it'd be easy. \n\nThey never did figure that I'd survived in this line of work for a long time, longer than most of them, and before then? Well, let's just say my parents disappeared when I was five, and it'd been Revy who looked after me, and my life'd been a real hard school. By the time they figured that out, it was too late. Too late for them, that is.\n\nWell, 'ol Morty, he wore cowboy boots, and me, I smiled a big happy smile. Hey, souvenir time.\n\n\"Morty,\" I said, smiling as I walked out of the bathroom, and I did feel lovely and clean after that nice long shower, and of course I'd taken one of my bags into the bathroom with me. A girl should always take precautions, and I hadn't picked up a gun yet, but there was always something.\n\n'Yeah, honey,\" he said, lying back on the bed, and he was big and hard again..\n\n\"I got some lube here. If you wanna fuck my ass, it'll make it easier for you.\"\n\n\"Jesus, Trexy, honey, you know how to get a guy going, doncha, you hot little china doll. You bring it here, and I'll make it real nice for you, too.\"\n\nYeah, well. Heard that one before, and he was gonna be real nice for me, alright. He really was, and I smiled, like I was small and a little excited and frightened, because I knew he'd like that, and I got that tube, and I undid the cap.\n\n\"Here,\" I said, kneeling down next to him, squeezing it onto his cock with both hands, and yeah, he was already big, and hard, and he was looking forward to this, I could see. \"Rub it all over with both hands,\" I whispered, all tremulous and scared, and I'd squeezed a lot of it on, and he rubbed it over himself with both hands, eagerly, and he was really big alright. Big and hard, and it seemed such a waste, but what else could a girl do when a guy had a knife and handcuffs and a gauze pad with what I guessed was something to put me out of it under his pillow?\n\n\"What the fuck?\" he said, tugging, 'n his hands wouldn't come free. \"What the fuck is this stuff? What'd you put on me, bitch?\"\n\n\"Oh dear,\" I said, looking at the tube, eyes wide and all surprised. \"Oh my goodness. This is the wrong stuff.\"\n\n\"Owwwwww,\" he howled, because he'd tugged, hard, and that superglue wasn't letting go. Surgery, or ripping the skin of his dick, those were the choices here, and there's not too many guys willing to rip the skin of their dick. Not even if it's a life or death alternative. \n\nGo figure.\n\nGuys! What can you say? \n\n\"Life's a bitch sometimes, Morty,\" I said, using my own voice now, the hard-assed New York bitch voice, opening his nightstand drawer, and sure enough. Handgun. With a suppressor. Picked it up, and Jesus, what was this? A Norinco 1911. Cheap fucking shit, but I worked it, and it was loaded now, round up the spout, and I flicked the safety off, because he was starting to swing his feet off the bed and sit up, and we couldn't have that, could we. No no no, we could not.\n\nLooking that 1911 in the eye, he froze. Guess he knew it was loaded, and I gestured, and he lay back down. I slid one hand under his pillow and yeah, cuffs. And that knife, and next to where the gun had been sitting, there were a few little toys. The sort of little toys I figured the Siniloa Cartel or the Flying Dragons would wanna use on me if they caught up with me, which was why, when you got down to it, I was in Roanapur, and running.\n\n\"Who sent you?\" he asked, and he was sweating. \"Chang? Balalaika? That asshole, Van der Merwe? It's Chang, isn't it...\"\n\n\"Why would they send someone after you?\" I asked, interested, because it sounded like the right people were interested in him, and I'd heard about Balalaika. Mr. Chang had mentioned her, and so had Revy, that one time I was here before. Hotel Moscow. Ex-russian Spetznaz, gone over to the dark side, and I wouldn't want to tangle with them. Not the way they sounded. The game they played was way above my league. Spetsnatz, they were real professionals, and if he thought they were after him, maybe he had no idea who I was, and he was just after some funl. Wasn't going to help him, but it was good to know.. \n\n\"Just tell me if it's Chang?\" he grunted. \"I got what I owe him.\"\n\n\"Where?\" I said, flatly, tip of the barrel touching the tip of his nose, and drops of sweat were rolling off his forehead.\n\n\"In the ceiling,\" he said, gesturing with his head, and when I looked, I could see one of the tiles was slightly outa place. He moved, and his feet were kicking for me, but he wasn't anything like fast enough. I giggled, which was kinda a nervous habit of mine, and I stepped back.\n\nBlaat. \n\nWow, the Norinco 1911 might be shit, but the suppressor was really good. He must've been using low-velocity rounds, because the kickback was way less than it should be.\n\n\"Aaaaaaaaaahhhhhhhhh.\" Low velocity or not, that bullet was still fast enough to completely shatter his kneecap and his knee, and that scream. Fuck. I whipped the gauze pad out from under the pillow, slapped it on his face, and hammered his head with the butt of the Norinco, hard enough to half stun him, and whatever it was he'd put on the gauze, it put him out right away, and after I'd used a belt that was hanging over the chairback as a tourniquet, I sort of stood there, looking down at him, considering the options here.\n\nWhatever he owed Mr. Chang was a good start, and I pulled one of the chairs into the bedroom from the dining table out there, and stood on it, pushed the ceiling tile up, and yeah, air con duct. Reached up, and there it was. Big bag with a lotta packets inside, a whole lotta them, and I got it down, put the tile back and used his knife to open the bag.\n\nUS dollars. Lots and lots of them, in bundles. Other stuff. Drugs, which made sense. Heroin, uncut, and let's just say I knew my business, so I knew, and I smiled. I smiled, and looked at the bed. I was gonna have to finish him off, that was for sure, but first... \n\nHalf an hour later, I had his credit cards, his pincodes, his bank account information, and a lot more cash, because he'd had more lying around. I had all that, and Morty didn't have any kneecaps at all. His hands, they were okay. Seemed he was attached to his dick, but he'd sorta been uncooperative enough that I'd used the cuffs on his ankles, and roped his neck to the head of the bed with some cord he had lying around.\n\nSorta pretty red cord you saw in Jap bondage movies, but it worked real good, and Morty and me, we'd had a little chat about, you know, the theory of relativity as it related to pain, accompanied by one or two less than theoretical examples. He was missing a coupla toes now, and he hadn't enjoyed losing them too much, and I'd sorta demonstrated what you could do with a little electricity in the air, and he'd been quite cooperative after that, because I'd been in this business a while, and Mr. Ong had taught me a thing or two, and Morty and me, we'd had a little chat about what else I could do if he didn't help me out here...",
        "I was gonna have to get rid of Morty, I knew that, and he probably knew that too. The problem was, he was a big guy. I liked this apartment, but really, even with the air-con, it was warm, and it'd take me quite a while to get rid of the body parts, and dead, he'd stink up the garbage real quick. Which was when the buzzer sounded, and 'ol Morty looked real hopeful through that agonized look on his face.\n\n\"Who're you expecting?\" I asked.\n\n\"No-one,\" he groaned, but he was lying, I could tell by his eyes, and when I looked at the security monitor by the door, holy moley, ambulance crew, two of them, complete with gurney.\n\n\"You there, Morty,\" one of the dudes said, 'n he was chewing gum. \"Got a call to say there was a pickup. She ready? We got the recipients on the table, ready to go. Doc's screaming for the parts. Don't be pissing us around, we got the cash, like always, and one of 'em needs a kidney real quick.\" He sounded bored.\n\n\"Change of plan,\" I said into the intercom. \"You okay if it's a guy?\"\n\n\"Hey, kidney's are kidney's, and we need the lungs as well,\" the dude said, and he laughed. \"Neither of the two waiting on the table are gonna care if the tables're turned.\"\n\n\"Funny, guy,\" I said. \"Say, you need him alive, or just fresh? Reason I'm asking is, there's been a little accident. Hope you don't need kneecaps.\"\n\n\"How fresh?\" the dude asked, and he'd stopped chewing gum. \"Nah, the doc uses plastic for kneecaps. Not gonna be a problem.\" Now he was worried. \"You didn't fuck up the chest, did 'ya? Or the head. Good market for eyeballs, 'n fresh skin, that stuff's always in demand.\"\n\nI looked back through the doorway, and Morty was tossing around, making a bit of noise. Fat guy, he probably wouldn't be able to hold his breath for very long, and yeah, fat. Lotta skin. I could see why they'd want him. Lotta other organs and things they could use too, if they could get rid of the fat, and for a fat guy, he'd seemed in pretty good shape.\n\n\"Fresh? Say, sixty seconds,\" I said. Then, \"there's a few bags of party ice in the freezer. We can pack him in that if it helps.\"\n\n\"Yeah, that works,\" the dude said, and he was back to chewing gum. \"We get him back real fast, that's not a problem.\"\n\n\"Gimme a minute,\" I said, and I darted back into the bedroom, and yeah, Morty was wide awake. Eyes flickering, looking at me, and I shook my head.\n\n\"Really, Morty,\" I said. \"You were gonna sell me for body parts? Frigging body parts?\" I shook my head, sadly. \"Well, at least your kidneys and lungs are gonna live on. They'll probably sell your heart as well, if they can find something that small.\" \n\nHis eyes widened, and they widened a bit more, and he tossed his head from side to side, but those pliers I'd used to pull his toenails off came in handy to get a good grip on his nose, and I squeezed that superglue onto his lips and sealed them shut. He squealed, and tried to bite, but that Norinco butt was solid, and a couple of solid whacks to the head left him dazed enough that his lips were sealed, and even though he shook his head frantically, I got hold of his nose again easily, and it was a big beaky one, easy to get a grip on.\n\n\"Big breath, Morty,\" I said, very considerately, I thought, and after he'd got it, I squirted superglue up each nostril and pressed tight. Instant superglue, only took a second, and Morty was on his way out, thrashing and bucking on the bed, eyes already bulging as I walked back to the door.\n\n\"Come on in, boys,\" I said, holding out my hand for the envelope, and I took it, carefully, Norinco 1911 in my other hand, and they saw the gun. They saw Morty too. Me, I saw the cash. US dollars, I'd count it later, and Morty was bouncing on the bed, kicking and thrashing, whining desperately, turning blue, eyes bulging big time.\n\n\"Guess 'ol Morty's plans did change,\" the dude said, as they wheeled the gurney into the bedroom.\n\n\"You know him?\" I said, and Morty musta, coz he was looking at them, and doing his best, but he was running outa oxygen, and his time was almost up.\n\n\"Yeah,\" the dude said, laconically. \"Used to supply us with two or three donors a week.\" He eyed me. \"Wanna business card? If you're thinking of taking over, we've got more customers than we got parts, if you know what I mean.\" He grinned. \"Just don't make the same mistake 'ol Morty here made.\"\n\nI grinned, keeping well back, coz I wouldn't, and Morty, he'd just about stopped moving. \"Just leave your card on the nightstand, would 'ya.\" Took another quick look in the envelope before I tossed it onto the dresser behind me. Guess that'd cover me for a few more days, but I did wonder what else Morty had lying around. This place really looked expensive. \"Do you need his brain? Or his ears?\"\n\n\"Na.\"\n\n\"Good,\" I said, smiling, and I took a quick step forward, steak knife from the kitchen in my left hand, and I slammed it through his ear, into his brain, and twisted. No chance of resuscitating him now. \"Didn't want him coming back,\" I added. \"He mighta been a bit pissed.\" \n\nI giggled, and stepped back. \"He's all yours, boys, and sorry about the smell.\" Because he'd done the usual, and crapped himself as he died. Didn't smell that great, but it wasn't like I was staying. Not now.\n\n\"Thank you, ma'am.\" All of a sudden they were real polite.\n\nI watched them lift him onto the gurney, toss the bags of party ice around him, and then they wheeled 'ol Morty out the door. Me, I counted out the cash, and considering I'd only arrived two or three hours ago, what with everything else Morty had turned over to me, I wasn't doing too bad. Wasn't going to stay here though. He might have friends. Didn't seem like the sorta guy that would, but you never knew. Best just to clear out fast, with everything I could use, and find somewhere safely nondescript, then track down Revy, 'n I could do that tonight. Halloween. Costume. I'd be invisible. \n\nJust one more asian hooker in a city filled with asian hookers.\n\nHad my first pair of cowboy boots in Roanapur, too.\n\nReally nice boots, these ones were.\n\nBlue Nile crocodile.\n\nMy first.\n\nAlways liked souvenirs, and I'd had to abandon my old collection. Guess I could start again though, and I looked at those boots, and wow, alligator skin from the Blue Nile. First time for everything, and that put them in a category all of their own. Cool! I smiled, and tucked them into one of my two small bags, and there was plenty of room. I wasn't exactly travelling heavy. Time to get outa here. From what he'd said, there were a few people after him, and they'd all think it was one of the others that'd gotten him, and me, I didn't want to meet any of the others..\n\nSucked that I couldn't stay here tonight though, and yeah, I was feeling a little disappointed as I poured a couple of bottles of cooking oil all over the kitchen, filled a wok with the stuff, turned the gas stove on, lit all four burners, and I was gone. Heard the wooomph and crash from down the road, as the glass windows seven floors up shattered, and I smiled. Nobody'd be getting any fingerprints or DNA outa there, on the off-chance anyone tried.\n\n * * * \n\n\"Hey, china doll. How much?\"\n\nI glanced towards the voice, and smiled. Wasn't american, from that accent. European maybe, but be still my beating heart. He was wearing cowboy boots.\n\n\"Thousand baht for all night,\" I said. Still had those two small bags, except they were kinda packed to overflowing now. That'd been a lotta heroin and cash, and I gestured at them, looking hopeful. \"I'm looking for somewhere to stay the night, Mister.\"\n\nHe grinned. \"Guess it's your lucky day, china doll. Come on up.\" He inhaled, tossed his cigarette in the stormwater drain, and turned, heading up the narrow stairs, and I followed, smiling happily, because he had that look. The sorta guy that'd be real nice to a girl, and let her stay the night, and I might even get breakfast in the morning. Bonus.\n\nAnd I know, I know. A few million in secret bank accounts and safe deposit boxes, but they were there, and I was in Roanapur. Until I'd met Morty, I hadn't exactly been on the bones of my ass, but I'd been, you know, economical and I sure didn't want to draw any attention. Not until I looked a little different, anyhow.\n\n\"Nice,\" I said, following him into the apartment four floors up. Long and narrow. Top floor. Windows with bars, air con, wooden floors, Large bed at one end, bathroom. Small kitchenette, refrigerator, table and chairs. Bottle of bourbon on the table, and when I turned around, he was holding a knife like he knew what it was for, and his other hand was gesturing.\n\n\"Everything you have,\" he said. \"Money, gold, drugs, electronics. Whatever you have.\" He smiled. \"Hand it all over, nice and quiet, get on the bed and spread, and you can walk outa here alive.\" He giggled, his eyes kinda weird, and he was high on something. \"Or maybe I'll sell you off. Market's always good for pretty little whores in Roanapur.\"\n\n\"Please,\" I whimpered, and honestly, I was disappointed. In him, and in me, because I really had thought he was okay, but I'd sorta thought Morty was okay too. Guess this was Roanapur, and I shoulda expected it. Never mind. \"Please, Mister. I came here to work... I'll give you everything... it's here... I'll give you the money.\" \n\nI reached around, small of my back, under that cheap linen jacket that was looking pretty crappy now, and yeah, Norinco. Suppressor attached. Wasn't exactly comfortable, but I was glad I'd hung onto it. Didn't think the superglue woulda worked with this dude.\n\n\"I'll give you the best blowjob you ever had, Mister. Just don't hurt me...\" and my hand came out, and I whimpered, and did that scared look, and eased the trigger back as I came on target, and there was that soft blaat, and a red flower blossomed, center of his body mass, and he staggered, looked down.\n\n\"Bitch...\"\n\nBlaat. \n\n\"Never bring a knife to a gunfight,\" I said, but I said that after I'd pulled the trigger, and put that second shot through his heart, tossing him on his ass on the floor, and I didn't think I'd call those guys for this one. \n\nToo many holes in the parts they needed, and besides, I didn't want anyone knowing where I was. He shuddered a couple of times, and then he went limp, and thank god that table had one of those old plastic covers. I whipped it off, tossed it on the floor, and rolled him onto it, with some old clothes that were probably his from the bed, but they were good enough to soak up the blood. \n\nLooked around. Yeah, this place'd do. Just have to dispose of everything real quick, because even with the aircon on, it was hot, and he'd stink up real fast, and it did need a clean now. Kinda wondered how leases worked here, but I figured whoever owned this building wouldn't give a shit as long as the rent was paid up. \n\nFirst things first though, and I looked at his boots. Yeah! Souvenirs, and I was beginning to like Roanapur. I tugged them off his feet, and lined them up with Morty's. Gonna get myself a nice display rack, because the ways things were shaping up, I was gonna have a nice souvenir collection real quick.\n\nLooked out the back window, and the disposal problem was sorta gonna take care of itself too. Nice thing about Roanapur was canals, and there was one, right down there, and from the look of it, there was already a body floating by, bobbing in the water. I smiled, started singing to myself as I got to work, and five minutes later, the first arm went out, far as I could throw it, and the rest was gonna follow, piece by piece, and then I'd clean up, take a nap, and tonight, yeah, I'd pick up something better than this Norinco 1911, and go look for Revy.\n\n * * * \n\n\"Ninja Arms. Looks like my kinda place,\" I said to myself, looking at the sign over the door, and those metal grills, you'd need a bulldozer to rip those out. Opened the door, and there was a guard there, shotgun pointing right at me.\n\n\"Yeah. Watcha want?\"\n\n\"Weapons,\" I said. \"And I'm paying. Cash.\"\n\n\"Do come in, Madame,\" another voice said, very politely, followed by a loud buzz, and then, rather more sharply. \"Let the lady through, Somchai.\"\n\nI walked through, the guard closing the door behind me. The voice belonged to an old man, who'd been sitting behind a glass counter, but now he was standing. Behind him were racks of guns, the glass countertop displayed handguns, accessories, all those little things that made a girl's heart pitter and patter. You know, mags, boxes of ammo, holsters, shooting gloves, ear protectors, suppressors, cleaning kits, slings, cases, laser sights. Be still my beating heart.\n\n\"Tea, Madame?\" he asked, gesturing, and an old lady, as old as he was, appeared through the doorway behind him with a tray, a teapot, and small chinese tea cups. Jasmine tea, too.\n\n\"Thank you,\" I said, taking the seat before the counter, waiting as he seated himself and poured, and we sipped tea, silently, eyeing each other. I knew what he saw. A chinese whore. I had that look down to a fine art. But what did I see? An old man who dealt arms in Roanapur, and he might have been old, but he was here, and alive, and obviously running a successful business in a city where the law was whatever the police said it was, and the police were corrupt.\n\nOn a section of the wall behind him were half a dozen framed certificates, and I recognized a couple of them. Advanced Handgun, and Submachine gun, both from Front Sight Firearms Training in Las Vegas, and I'd been there, done those, plus a couple more. Tactical Explosive Entry Course from the Thai Police, which was interesting. A few more, all professional, a Bachelor of Science degree from the Chulachomklao Royal Military Academy, and three certificates appointing Mr. Bennie Thanarat as a Second Lieutenant, a Lieutenant, and then a Captain in the Royal Thai Marine Corps.\n\nHe smiled. \"You can call me Mr. Bennie,\" he said at last.\n\n\"Trexy,\" I said, and I smiled. \"Just Trexy.\" Good a name as any, and it'd do for today.\n\n\"And what can I do for you, Just Trexy?\" he asked. \"A little personal protection? We have some discrete handguns for ladies.\"\n\nI smiled. \"I'm not after discrete,\" I said, sipping. \"This jasmine tea is wonderful, Mr. Bennie. I'm in the market for firepower. 1911's if you have them, point four five, and a short-barrelled rifle or two.\"\n\n\"If you don't mind me asking, Madame, how're you paying for this?\"\n\n\"Cash,\" I said, opening my handbag, peeling out five thousand bucks, and placing them on the counter between us. \"US dollars.\" That stash of Morty's was coming in sooooo useful. \"Five kay deposit, and let's keep a running total. I'll keep topping it up as we work through this.\" \n\n\"It's a pleasure doing business with a decisive woman, Madame,\" Mr. Bennie said, like he really meant it, and the size of that pile of dollars on the counter, he probably did. \"Why don't we start with the 1911's.\" He stood, and I was really beginning to like the way the old guy did business. Start with the stuff that filled a girl's heart with joy. \"If you'd like to come this way, I can show you what we have available.\"\n\nLes Baer. Ruger. Colt. Well, half a dozen different Colt 1911's, and they weren't bad. I'd used the Colt 1991 Commander a time or two. Kimber. Always liked Kimbers, and old Bennie had a few of them. American Tactical. Sig Sauer. Smith & Wesson. Browning. Remington. Metro Arms. Taurus. Walther. Wilson Combat. Citadel. Cimarron. Norinco. Rock Island. Springfield, and I did like Springfields, but really, there wasn't a shitty 1911 out there, which is why I liked them. Reliable. Sorta business I was in, or had been in, would likely get back into, you needed reliable.\n\n\"Oh man,\" I said. \"You've got everything.\"\n\n\"This is Roanapur, Madame,\" Mr. Bennie said, and I knew without looking that he'd be smiling. \"Chief Watsup's remarkably tolerant when it comes to personal defence.\"\n\n\"Chief Watsup?\" I said, and yeah, I'd met him when I'd had dim sum with Mr. Chang, that morning I was leaving, but I wasn't mentioning that to Mr. Bennie. I did remember Watsup though. Head of Roanapur's police force, and he'd dropped by to collect his payoff from Mr. Chang, and they'd chatted about golf.\n\n\"Roanapur Police,\" Mr. Bennie said, and now I did glance at him.\n\nHe eyed me blandly. \"We never discuss our customers, Madame,\" he said, and he smiled. \"With anyone.\"\n\nI looked at him, our eyes holding each others', and neither of us blinked. I nodded.\n\n\"I'd like to look at a couple of these,\" I said, but I already knew, and I did look. I tried a dozen, going over them, broke down a couple to check the works, and they were pristine, straight outa the factory from the look of if, but those Springfields. I'd always liked them, and these were good. Really good. \n\n\"I'll take two of these Springfield Army 1911's, the Ronin one's, twelve mags, and a thousand rounds, and yeah, that little Ruger SR9, six mags, better make it another thousand rounds. That's a nice little gun for concealed carry. Now, whaddaya got that's compact, and puts it out? We'll do something bigger after that.\" \n\nBecause if anyone came after me, I wanted firepower. Massive firepower. Enough firepower to blow my way out of hell if I needed to, and I was gonna setup a couple of different escape routes, that's for sure. Find somewhere close by I could stash a boat, to start with. Make sure the boat was equipped as well. With what Morty'd donated to my start-up fund, I was good for it, and I'd already sorted out taking over the lease from my boyfriend. \n\nNever did know his name, he'd gone from my life too fast, and I'd been all teary about him leaving, when I was talking to the old Thai guy that owned the building and lived at the back of his shop on the ground floor.\n\n\"Good fucking riddance to that piece of eurotrash,\" the old dude'd said, and he'd smiled when I'd carefully counted out that first and last month's rent, plus another month as a damage deposit.\n\n\"Oh boy,\" I said, looking at those rifles, the cute little compact ones that fired lots of rounds, very very fast, and aiyaaahhh, I did love this shop. \"You've got Heckler and Koche? The MP5?\" Okay, now I was excited. I loved those little H&K's. I'd used them a coupla times down in New Mexico sorting out a problem or two for Mr. Ong. Local chapter, they'd got a bit uppity, and I'd had to reorganize the command chain a little. \n\n\"I'll take two, and I'd like that little Brugger and Thomet APC9.\" There was only one, and I wanted it. Lovely when you were in a tight spot, and easy to tuck away in a little ruck with a few mags. \"And an Uzi of course.\"\n\n\"And throw in one of those Saiga-12's.\" Hard to beat those Saiga tactical shotguns. \"Now, what rounds have you got for it?\" I was gonna have to make a couple of trips to get this stuff back to the apartment, but hey, why not. Have to do something about security too. Steel doors, reinforced frames, security grills, check out the ceilings, the floors. Booby traps. Monitoring systems. Escape routes. Lot of work to do, but if I was gonna stay here, no harm in taking precautions.\n\n\"Let's make that three Uzi's and a second Saiga-12, and I better take two more of the 1911's,\" because it'd be good to have one of each in that boat, and another in a safe house I could use as a bolt hole... I better get a couple more 1911's too. Or maybe I'd just come back in a few days. \"No, make it one Uzi to go, but I'd like to put the other two on layby.\"\n\nYeah, Mr. Bennie was looking real happy now, smiling away as I counted out a few more notes, quite a few more, and then I turned to see what else they had, because this was the kinda shopping I loved.\n\n * * * \n\nHot. That was me, and I kinda snickered as I looked in the mirror. Black tanktop, loose and light black linen jacket, tight red shorts, cheap Nikes, and I'd had my hair styled and bleached blonde. Sort of a blonde asian Harley Quinn look, and I rather liked it. Blue contact lenses, makeup, and I didn't look like me at all, but then, I hardly ever did. It'd do until I could sort out some plastic surgery, and the mirror aviator shades I'd picked up from that stall down the road were just a little extra insurance. ",
        "The pad thai hadn't been bad either.\n\nOne Springfield Armory Ronin Operator 1911 in a shoulder holster. Forged stainless-steel frame, forged carbon steel slide, hammer-forged barrel, wooden grip. None of that 9mm crap, except for that cute little Ruger SR9, which was 9mm, tucked away outa sight. A couple of knives of course, some extra mags in my handbag, because a girl should always carry some protection when she goes out to a bar or two on her ownsome, and yeah, I was ready to head out and have some fun. I did remember that bar Revy and her friends used to hang out in. The Yellow Flag, and I'd start there.\n\nHalloween tonight, and jeez, it was eight already. Time to get out and party. Well, maybe not party, but I'd see if I could find Revy. She shouldn't be hard to find if she was in town. She'd said she always drank at that same bar, 'n I waved down a motorcycle taxi, swung myself onto the pillion seat.\n\n\"Yellow Flag,\" I yelled, and he nodded, 'n took off through the traffic, that little Honda screaming it's head off. Fucking Thai drivers, they were as frigging insane as I remembered from five years ago, and this kid was even more frigging insane than that, but whatever. He knew where we were going.\n\n * * * \n\n\"Yellow Flag,\" the kid yelled, and I swung off, paid him off, stood there, and looked.\n\nYeah, I remembered the place from five years ago, and I'd been a kid then. A seventeen year old kid who worked for Mr. Ong, but yeah, the Yellow Flag, it'd been a real eye-opener when Revy took me there, right after we arrived in Roanapur. It'd been my first trip outa North America. I'd travelled a lot for Mr. Ong, inside the USA. Done foreign as well. Mexico. Venezuela. Bolivia. Even California. Bangkok, it was just another city in the end, but Roanapur?\n\nNothing back then had prepared me for Roanapur, and I'd been relieved I was with Revy. \n\nWe'd stood outside that bar, the Yellow Flag, and Revy, she'd been smiling. \"It's like the last bar on earth, opened by a south vietnamese soldier who deserted during the War,\" she'd said. \"Bao, he runs it, and he'll take anything you say, and sell it to anyone, so keep your mouth shut, okay.\"\n\n\"Okay,\" I'd said.\n\n\"You wanted low key, I talked to Madam Flora. You're gonna stay upstairs in the Sloppy Swing,\" Revy said as we walked in through the double doors, and I gotta say, I'd seen a few bars, but the inside of the Yellow Flag was something else. I mean, there were bar fights, and there were bar fights. Security grills, yeah, I got that, but built-in bullet proof steel plating?\n\n\"Yeah, it can get a bit intense here some nights,\" Revy drawled, leading me towards a table. \"If anyone starts shooting, just tip a table over and get down behind it real fast, and stay down there on the floor 'till it's over. Hey, Dutch, Rocky, Benny. Wancha to meet a friend of mine...\"\n\nYeah, I remembered the Yellow Flag really well.\n\n * * * \n\nWalked in the doors, and Halloween might not be a big thing in Thailand, but inside the Yellow Flag, it was Halloween Party time, even if it wasn't that busy. Yet. I smiled a big happy smile, because every girl I saw in here was in some sorta Halloween costume, and the Yellow Flag wasn't exactly humming, but the drinks were flowing like water, and yeah, the girls from the Sloppy Swing, upstairs, were hanging over the guys that were already here, milking them for every glass of colored water they could before the real negotiations started. \n\nBecause this was Roanapur and just about every girl in the Yellow Flag was a hooker. Heck, just about every girl in Roanapur was a hooker, one way or the other, and I sure didn' stand out in the slightest. There were a dozen other Harley Qinn's here. Guess it was a popular look, and yeah, well, I got a few looks myself as I eased up to the bar and took a stool, slouched into it. Place wasn't packed, but give it two or three hours and I guess it would be.\n\n\"New here?\" the guy behind the bar said. \"I'm Bao. What'll it be?\" Yeah, it was Bao, and I recognized him.\n\n\"Trexy,\" I said, not answering. \"Make mine a Mekong, coke on the side, no ice.\" You didn't want ice in your drink, not in Thailand. Not unless you were sure of where the ice came from. Believe me, you wanted to be sure. I'd made that mistake once, in Bangkok. That was one helluva flight home, and I'd never make that mistake again.\n\n\"One Mekong,\" Bao said, pouring the shot in front of me, pushing the glass across the bar, can of Coke came next, and I popped the tab and poured. \"First one's on the house. Watcha doing here, Trexy?\"\n\nI shrugged. \"Looking for Revy.\"\n\n\"Two Hands?\" Bao eyed me, curious. \"You haven't been here before?\"\n\n\"No.\" I smiled. \"I haven't, but I got some business with Revy.\"\n\n\"Nothing... personal, I hope?\" Bao said, and there were beads of sweat on his forehead.\n\nI grinned. \"Business, but not personal business, if ya know what I mean.\" Coz I knew Revy. I'd heard a few stories, five years ago, from Dutch. \n\nHe shrugged, relieved look on his face. \"She'll be in later, two or three hours maybe. She was here last night, with Dutch and Benny and Rock. Said she was coming back tonight for the party.\"\n\n\"Pretty quiet now,\" I said, looking around again, and I was the only frigging one sitting at the bar right now, which I guess was why Bao was standing in front of me, talking. Nothing else for him to do. Bunch of Cartel dago's sitting at a table in one corner, couple of tables of mainland chinks at the other end, some loud-mouthed haoles in Hawaiian shirts with a half a dozen hookers from upstairs, table of Filipino gangsters, and a couple of tables of Thais wearing sunglasses, sitting there, leaning forward, talking intently, drinking and chain smoking...\n\n\"Better gimme another one,\" I added, because that Mekong and Coke was smooth, and it went down real easy. Found myself starting to relax, for the first time in maybe three months. I knew I shouldn't, but it was such a frigging relief to be in Roanapur. \n\n\"Here you go, Trexy.\" Bao slid that next shot across the bar, and I paid him, because the sign above the bar said cash on the nose. Threw in a tip, a good one, because first impressions and everything, and one thing Bao didn't do was shortchange his customers, and I sipped on it as he moved on to the next customer.\n\n\"This taken?\" Big guy, smiling, and he was young. My age, maybe a little older, American. Accent said Oklahoma, 'n I smiled, because I kinda guessed he was dressed the way a cowboy would. Hat, tan shirt, bandolier belt, jeans, revolver slung low on his hip, and when I looked down, cowboy boots. With spurs, and I was smiling when my eyes worked their way back up.\n\n\"Taken? It is now,\" I said, watching him as he eased himself onto that stool, and he was a big guy. Six foot something, and he had that look that said weights at the gym. \"I'm Trexy.\"\n\n\"Tex.\" Bao was right there, sliding a chilled Singha across the bar. \n\n\"Thanks, Bao, and another for Trexy...\" Whoever Tex was, and pretty much everyone from anywhere near Texas in Thailand answers to \"Tex,\" he slid a note back and inclined his head towards me. Bao slid another glass across towards me, half filled, and that was more than a double.\n\n\"Trying to get me drunk?\" I smiled, picked up my Mekong and slammed it down. I did like cowboy boots, and these ones had spurs. Never seen real spurs on cowboy boots before, and it really did things for me. Intense, shivery, exciting things.\n\n\"Yeah,\" he said, and that smile. Oh my gosh, my insides sort of danced, my heart beat a little faster, and I smiled right back, and hey, I'd been on the run for three months and I hadn't got myself laid since I left New York in a hurry. Not if you didn't count Morty, and I was still a bit sad about Morty. I mean, nice souvenir boots and all, but Morty, I'd liked the way he handled a girl. \n\nOh well, I could sit here and knock back a few thinking sad thoughts while I waited for Revy to show, or I could shortcut things here, and see some action, take my mind off the past, and then come on back, later. I looked Tex up and down, sipping on that straight Mekong, and with every sip, Tex looked better. Actually, Tex looked just like what I needed. Nothing like some physical therapy, and I eyed him, and smiled.\n\n\"Well,\" I said. \"Consider me drunk, but it's still gonna cost you. How about you and me go for a walk, Cowboy?\"\n\n\"Ma'am,\" he drawled. \"There ain't nuthin' I'd like better.\" He stood, reached for my hand, and I took it, but not before I'd downed my Mekong, and walked out that door, alive with anticipation, yeah, I was feeling good.\n\n\"Your place or mine?\" I asked, and yeah, he was peachy keen to head for my bed, so that was where we went.\n\n\"Say, how much?\" he hesitated, watching as I unlocked the door.\n\n\"Whatever,\" I said, just about dragging him inside, and closing the door behind him. \"This is gonna cost you a thousand baht. You okay with that?\"\n\n\"Sure,\" he said. \"Pay you after.\" He was already unbuckling his belt, and me I was peeling my jacket off, and our handguns hit the floor simultaneously, except I sorta caught mine with one foot to muffle the thump, and then there was a much bigger thump as we hit my bed.. \n\n\"Ohhhhhhh,\" I sobbed, feet kicking at the bed, frantically, because it was good. It was really really really good, and his hands pinned mine to the bed, his cock thrust deep and high, thick and hard, and he really pounded me onto that bed, and I was along for the ride, and wowee zowee it was good. \n\nGood all the way to the end, and Jesus, when he came it went from good to out of this world, and I woulda screamed if I coulda but all I could do was moan helplessly, because Jesus, I could fall in love with a guy like this, 'n I smiled up at him 'n I was just about to tell him to forget the thousand baht when he cut in on me.\n\n\"Federal Marshall,\" he said, smiling, his hands still pinning mine to the bed, and fuck, he'd fooled me. \"And you, Miss Trexy Lee, are under arrest.\"\n\n\"What for?\" I said, insides rippling as a little residual climax rippled through me, and god it was so good. Then, \"This is Roanapur. You guys got no jurisdiction.\"\n\n\"Don't have jurisdiction,\" he said, grinning. \"But I got you, and we're gonna take this nice and easy, aren't we, Ms. Lee. You and me, we can take a little trip back to Bangkok, and have a long talk about your friend Revy Two Hands, and who you actually are, and once we find out, I'm sure we'll want to slide you onto a plane heading back to the good 'ol US of A, because by then there'll be this Grand Jury back in New York wanting some quality time with you.\"\n\n\"Come on, Tex,\" I gasped, and okay, I was still limp in the aftermath of that climax, and my sex was sorta milking his cock, squeezing him, and that was good, let me tell you. Loved that afterwards, just lying there with him on me and in me, full of his cum, his weight on me, slippery with sweat, knowing I'd been fucked so good, and I didn't want this sorta shit. I really didn't.\n\nHe grinned. \"Guess you know when you're fucked, huh, Trexy?\" he said. \"You gonna come quietly, aren't you. There's probably a lotta people back home wanna talk to you.\" He musta liked that thought, coz his cock throbbed, and there was that last spurt of cum, and I felt that, and my sex kinda milked him good.\n\n\"Jesus, you really fooled me,\" I gasped, drawing my knees right back, brushing his ribs again, and I felt kinda sad, because he had, he'd totally fooled me, and I just wasn't having a good run today. \"I'd never have spotted you for a Fed.\" Not in a million years, not in that crazy cowboy outfit. \"Why'd you want me, anyhow? I mean, I know Revy, but not that well.\"\n\nHe grinned down at me. That kinda cocksure grin a lotta guys have when they're sure that a girl's totally fucked. \"Waal,\" he said. \"Wasn't sure until we got back here, and I saw that dragon tattoo. Saw that, and there's only one of the triads that uses that dragon tattoo, and we both know that's the Flying Dragons, don't we.\"\n\n\"Crap,\" I said.\"I didn't have time to get rid of that.\"\n\n\"You should've,\" he said. \"Without that, you'd just be one more asian hooker. Thought you were when we left the Yellow Flag.\"\n\n\"Can you pass me a tissue, they're on the nightstand,\" I asked, the way a girl does when she's fulla cum, and he glanced at the nightstand, and reached for the tissues the way a nice guy does, and yeah, well, that was all I needed, and I smiled up at him as my left hand, the one he'd let go, formed itself into a fist, middle knuckle extended, and then I struck, knuckle driving into his ear.\n\nHitting the nerves, exploding his ear drum, and I struck again, hard, simultaneously bucking him off as his eyes lost their focus, and yeah, the pain had disoriented him, and I had my backup gun, the one down the side of the bed, and when he started to roll towards me, he looked down the barrel of that good 'ol Norinco 1911 with the suppressor attached.\n\n\"Jesus,\" he said.\n\n\"Jesus ain't home, Cowboy,\" I said. \"He's on vacation back in Vegas.\"\n\n\"You ca...\" he said, his eyes widening as he looked into mine, and I knew what he saw there just before I put a bullet through his head, and fuck, I was gonna have to clean things up again, coz between the blood and the shit, he'd made a mess of my frigging bed, and that really sucked, because I did need somewhere to sleep, and I could sleep on the floor if I had to, but I didn't want to.\n\nI looked at the body, and just shook my head as I worked his boots off. Who the fuck sent a kid like this to a place like Roanapur? He'd thought he was up to it. Thought he was a hard man. Thought he could handle Roanapur, and he musta thought I was an easy mark. Well, the poor little fucker had found out he wasn't that tough. Last thing he'd found out, and honestly, I was a bit sad about that. He'd seemed like a nice kid, until he crossed the line. Ah well.\n\nHe wasn't small, and dead, he was big and dead, and he was a pain in the ass to drag across the room to that window overlooking the canal. The window opened, and fuck, it took me forever, but I finally got him up and half way through.\n\n\"So long, Tex,\" I said, kinda sadly, working him out bit by bit until he dropped, and I didn't hear the splash as he dropped into the canal, not from up here, but the sheets followed, and he was gone.\n\nExcept for his boots, and I'd polish them up in the morning.\n\nI lined those boots up with Morty's and the last guy whose name I never knew. Wasn't going to bother finding out, either, but they were nice boots. These ones, with the spurs, they were rather nice too, and it really was a shame. He'd seemed like such a nice guy, and I sort of hoped Roanapur wasn't gonna keep going like this. Three pairs of boots in a day was getting a bit much, even if they were nice boots, and I did enjoy looking at them.\n\nNow that he was gone, didn't seem to be much point staying here. Might as well wander back to the Yellow Flag and see if Revy had dropped in. Bao had said she'd said she'd be in, and I'd rather catch up with her sooner than later. Gave my Norinco a quick clean, reloaded, tucked it away, took a shower, thought about it, and this time I slipped that second Spring field on, and I tucked that cute little Brugger and Thomet APC9 into my handbag.\n\nTen minutes later, I was out the door. By the time I got to the street and waved down a motorcycle taxi, I was in a much better frame of mind, and fifteen minutes later, I was pulling up a stool at the bar, and yeah, it was busier. You might say it was starting to hum, and the Halloween Party vibes were really on, the drinks flowing, noise level up there in party territory, 'n I smiled. \"Mekong, Bao, make it a double. No ice. Coke on the side. Revy turned up yet?\"\n\n\"You're back?\" Bao said, pouring that double shot of Mekong, sliding it across the bar, no ice, and the Coke was cold. Ice cold. Beads of condensation on the can. \"No, bitch isn't. Couldn't that guy keep it up or something?\" \n\nDude sounded like he was laughing, and I guess I had that 'what a fucking disappointment' look that a girl gets when the guy's just wasted.\n\n\"Oh, he got it up alright, but the fucker was a Federal Marshall,\" I said, draining that double, and Bao had another one lined up. \"Tried to stiff me so I kicked his ass out.\" The window anyway, and I smiled, but it was a twitch of the lips rather more than it was a smile. \"You knew he was a Fed, huh, Bao? He asked me 'bout Revy. How come?\" Yeah, I was pissed. So bite me. All I wanted was a night of frigging Halloween fun. I mean, souvenirs were fine, but this was getting a bit frigging much.\n\nBao shrugged, one eyebrow lifting and yeah, Revy'd laid it down for me last time I was here. Bao would sell information to anyone. I slipped him a hundred US, under the hundred baht for the Mekong.\n\n\"Dunno,\" Bao said, slipping the hundred into his inside jacket pocket. \"Knew he was a Fed, guy hangs out here pretty much every night. Everybody here knows he's a Fed. They just like to keep an eye on Americans in general.\" He grinned. \"He heard you say you were looking for Revy, and those bastards, they've got a real hard-on for Revy over something. He probably wanted to see what you were after.\" He grinned. \"That, and score a freebie. Probably figured if he took you in, he wouldn't have to pay you. They don't get hookers reimbursed on expenses.\"\n\n\"Well, asshole won't be stiffing me again,\" I said, kinda sadly, because he'd had those big puppy dog eyes, and that big hard cock, and those cowboy boots, they'd really done it for me. Yeah, well, he'd wanted to score real bad, and I guess he'd gone out with a bang, so to speak, so at least he'd got the fuck of his life before I'd offed him.\n\n\"Guess he won't be,\" Bao said. \"Hey, you gonna be hanging around or you want another one? I make introductions for a thirty percent cut. Girls work from here, they either work upstairs or they cut me in. No pimps allowed.\"\n\n\"Works for me,\" I said, slipping him three hundred baht. \"Here 'ya go, and apologies. Shoulda asked first.\"\n\nBao palmed the cash, and I guess I had my cover established if he thought I was a hooker. \"But right now, I've had it with guys for a while. I'm gonna sit here and drink until Revy shows up.\"\n\n\"Your lucky night, then,\" he said. \"She just walked in with Rocky and Dutch.\"\n\nYeah, it was, and I picked up my drink, slid off my bar stool and walked on over and sat down, opposite her, coz I knew Revy. She didn't like surprises, and some bitch she didn't know, sitting down next to her uninvited, yeah, that'd be a surprise.\n\n\"Hi, Revy,\" I said, 'n I lifted my sunglasses, and my blue eyes looked into hers. \"I'm Trexy. Trexy Lee, maybe you heard my name.\" 'N I smiled. \"Ortiz says hi,\" 'n I flipped his badge onto the table.\n\n\"Ortiz?\" she said. \"That was a long time ago,.... Trexy.\" 'N I knew she knew who I was.\n\n\"Yeah,\" I said, 'n I smiled. \"He retired, down in Florida. You'd never guess what happened to him.\"\n\n\"What?\" she said, kinda flatly, and I knew we both remembered. She'd hidden me behind the garbage bins down that alley before that asshole Ortiz had raped her, 'n she been a kid. Just a kid, older than me, and I'd been terrified. Revy, she'd been terrified, Ortiz had kicked the shit out of her first, 'n then he'd fucking raped her.\n\nI giggled. \"Some gangbangers strung him up in a shower and carved him up, piece by piece, with a chainsaw. Took a few hours over it, the local cops said.\"\n\n\"Really?\" Revy said, and she smiled. \"Musta been real painful.\"\n\n\"Yeah, he did scream a lot,\" I said.\"He bit right through the gag I was using a coupla times.\"\n\n\"Glad you shared, Trexy,\" she said, 'n she looked at Ortiz' badge and tossed it into a corner. \"Poor 'ol Ortiz. Bet that sucked.\" \n\n\"Yeah, did for him,\" he said, 'n I grinned. \"Best therapy ever.\"\n\n\"Yeah, will, I get it on the therapy, So, wassup, Trexy?\"",
        "\"Decided to come stay awhile,\" I said. \"Got myself a place to stay and everything, friend of a friend suggested I look you up, say hi.\"\n\n\"Hi,\" Revy said, and she laughed. \"Bao, bring a bottle,\" she called out. \"Trexy and I got some partying to do,\" and when it arrived, she was, like, \"Sharing is caring. Let's have another one.\" \n\nSo we did, and I felt a sight fucking better after half a dozen more, and yeah, Revy got the drift of what was going down, 'n I sorta mentioned 'ol Tex, bless his boots, that he'd been asking after her.\n\n\"I'll kill that fucker, next time I see him.\" She just about exploded, and yeah, that was the Revy I knew.\n\nI shrugged. Don't need to,\" I said. \"That poor little fucker's floating in a canal right now, tossed him out the window.\" Just another body, that's all he was gonna be by the morning, and this was Roanapur, somebody'd probably have a use for the body 'n it'd have disappeared. Yeah, his boss'd be joining him soon enough, coz Tex mighta mentioned me to his boss, but no need for Bao to know that, or who his boss was.\n\nI smiled, and after half a bottle of Bacardi, Roanapur was looking pretty good, and sitting here with Revy, it was like it was back when I was ten, 'n she was fifteen, except better, and she musta seen my face.\n\n\"Trexy,\" Revy said, 'n she looked at me, 'n I could see she was serious. \"If you think about it, other than this...\" 'n she waved her hand around, but I didn't look, because I knew where we were as well as she did, \"...what do we really value in life? God? Love? Don't make me laugh. When I was a brat, crawling around in that shithole city, it seemed God and Love were always sold out when I went looking. Before I knew better, I clung to God and prayed to Him every single night \u2014 yeah, I believed in God right up until that night the cops beat the hell out of me for no reason at all. All they saw when they looked at me was another little ghetto rat. With no power and no God, what's left for a poor little Chinese bitch to rely on? It's money, of course, and guns. Fuckin' A, Trexy. With these two things, the world's a great place, and Roanapur, I dunno, I love this place. There's nowhere else I can call home.\"\n\n\"I know, Revy,\" I said. \"I know. I was there when they beat the hell out of you, remember. Who was it dragged you outa that backalley onto the street, and got you into that ER?\" Jesus, I remembered that night, and I'd been fucking terrified, and it'd been Revy that'd had the shit kicked out of her by those cops and then there'd been that asshole Ortiz, and I'd been hiding back of the waste bins where Revy'd pushed me, 'n I'd watched as those assholes from the 27th Precinct put their boots in.\n\nI'd signed up with Ong to do deliveries the next day, seven years later. I'd followed him in, stood by his table, not saying a word, 'n old Mr. Ong knew, like he was reading my mind. He scared the shit out of me then. Still did, but scared or not, I'd taken him and the Sinaloa Cartel for fifty million., 'n I was still shit scared, but I was shit scared with fifty million bucks in the banks and safety deposit boxes, and guns. I had guns now, too.\n\nThat, and I was in Roanapur, and I had Revy Two Hands. Cousin Rebecca.\n\n\"I know you did, Trexy,\" Revy said, 'n she'd lost that hard look. \"I remember.\" She took a long drag on that half-smoked cigarette.\"You know, when I was a brat and crawling around in the streets, for some reason God and love were always sold out.\" She eyed me. \"I had to get outta there, Trexy. Those cops were gonna kill me. I had to go.\"\n\n\"I know,\" I said. I hadn't at the time, but yeah, eventually I'd cluded in on that one.\n\n\"I killed them both you know,\" I said, after a long silence, and we were both good at those. \"The other two.\"\n\n\"Good,\" she said. Then, \"How?\"\n\nI smiled, and my eyes matched Revy's, ice for ice. \"Got them both the same night, ditched the gun in the harbor.\"\n\n\"Good,\" she said, 'n she smiled. \"Thanks for caring, Trexy. You were the only one that did.\"\n\n\"Yeah, well. You looked after me, Revy. You were the only one that ever did.\" Had the scars to prove it, too. I laughed. \"Taught me to shoot, too.\"\n\n\"Guess I did, huh. And now look at us.\"\n\n\"Now look at us,\" I said.\n\n\"What the fuck is it with you two?\" Rock said, sitting down opposite us, 'n we both looked at him, and he was, like, \"What is this? Am I in a movie or something?\"\n\nRevy looked at him, looked around the Yellow Flag, 'n slammed back her bacardi. \"Movie? Don't be stupid. This is more entertaining than Hollywood is ever gonna be!\"\n\nDutch grinned. \"Yeah, and it's gonna get better.\" He was on the floor, flipping the table, dragging Rock down with him, and all around us people were diving for the floor, and the steel shutters over the bar were slamming down.\n\n\"There she is,\" someone yelled, and fuck, a dozen of the Aryan Nation's best were pouring in the door of the Yellow Flag, guns waving, 'n you could just about see the swastika flying over their fucking heads. \"Kill the slant-eyed bitch.\"\n\n\"Which one?\" one of them called, 'n Revy had her Beretta's out, 'n I could see why they called her Two Hands, coz she had one in each fucking hand and she was pouring it out.\n\n\"Nah, you want full auto for this sorta job, bitch,\" I said, and hey, that little Brugger and Thomet APC9 was outa my handbag and in my hands, and I wasn't a pray and spray kinda girl. Little bursts, targeted, That sort three-to-five rounds, start low and let the recoil ride the rounds up through center of body mass and move on.\n\nFirst burst took the loud mouthed one from the groin up to the neck, sprayed blood everywhere, and I was having fun here.\n\n\"Leave some for me, bitch,\" Revy yelled, reloading, 'n I plugged the one that'd been lining up on her with a good long burst that danced him back to the wall and held him there, 'n by the time I'd reloaded, she'd finished them off.\n\n\"Fuck it, Two hands,\" Bao said, peering out from around the steel plates, looking around. \"How many times have you trashed my place? I'll tell you. Sixteen times you've done this. Sixteen! That's it, Revy. Get outa my bar.\"\n\n\"I was just having a drink,\" Revy said, virtuously. \"Not my fault if your bouncers can't keep the trash out.\" She laughed. \"Just be glad Roberta wasn't here. Or Balalaika.\"\n\n\"Aiiiyaaah, Jesus,\" Bao said, 'n he shuddered, 'n I had no idea why, but I couldn't help laughing, and that Brugger and Thomet APC9, Jesus, it was smoking. I could feel the heat, and I was gonna have to pop into the Ninja Arms, and pick up some more ammo in the morning, coz I'd gone through half a dozen mags.\n\n\"You fucking crazy bitches,\" the skinny old German with the weird moustache still down on the floor was pissed. Yeah, he was, front of his big baggy shorts was soaked, and it wasn't the beer he'd been drinking. That was all over the floor.\n\n\"Quit whining, dipshit,\" I said, smiling. \"Life's a ride. Might as well have some fun, and you're still alive. Quite the bitching..\"\n\n\"You owe me a beer, slant-eyed bitch,\" he said, levering his way up onto his knees.\n\n\"Bitch?\" I said, the muzzle of that Brugger and Thomet APC9 caressing his forehead, and Revy's Beretta was right next to it.\n\n\"Beer's like piss water. Gives me no buzz at all. This is what you drink if you're a real man,\" Revy said, and her other hand reached out and took the Bacardi from the bar. \"You wanna join us, or you want me to weld your asshole shut and bore a new nine millimeter one through your head as a replacement?\"\n\n\"Enough, Revy. Enough,\" Bao said, but he didn't go near her hands. Either of them. He didn't go near my Brugger and Thomet APC9 either.\n\n\"Yeah, he's right, Revy,\" I said. \"Why don't you park your ass in a seat, Herr...?\"\n\n\"Schicklgruber. Alois Schicklgruber,\" he spat. \"And I do not drink with racial inferiors.\"\n\n\"Well, fuck you too,\" I said, and I looked out at the slaughterhouse and grinned. \"Dunno about racial inferiors, buddy, but it looks to me like a lotta your kameraden are fairly fucked. You got anyone else here to drink with?\"\n\n\"Donner und blitzen!\" the old geezer looked around, peering over the table as he struggled to his feet, face livid with rage. \"You two chinese whores? How is this possible? You have killed the flower of Aryan manhood, you putrid little ...\"\n\n\"Call me Jewish and you're dead,\" I said. Had enough of those Jewish-American princesses in New York. Bitches, every one of them, and I'd offed a couple that wouldn't pay Mr. Ong what they owed him, back when I was starting out. Mind you, I wasn't, like, prejudiced. I offed everyone Mr. Ong asked me too.\n\n\"You a whore, Revy?\"\n\n\"No,\" she said. \"Not last time I thought about it. What about you, Trexy?\"\n\n\"You are both whores,\" Herr Schicklgruber spat, which was when I noticed those boots he was wearing. Shiny black military style boots, not cowboy boots, but they did send a little tingle through me.. \n\n\"Ah, fuck it,\" I said, and I pulled the trigger, put a dozen rounds up and down Herr Schicklgruber in a couple of seconds flat, 'n bounced him across the floor to join his kameraden.\n\n\"Yeah, why not,\" Revy said, 'n she put a 9mm through Herr Schicklgruber's skull, and guess he was stitched up now. He wasn't complaining about slant-eyed whores, anyhow.\n\n\"Two Hands, that is enough,\" Bao said. \"You can't just go killing anyone you don't like. Not in my bar...\"\n\n\"Shit happens, Bao,\" Revy said. \"Live with it. You want another drink, Trexy?\"\n\n\"At this point in the night,\" I said, kind of philosophically, \"if I'm not getting fucked by a man who's wearing nothing but cowboy boots, I might as well give up. Gimme another shot, Bao, and then bring another bottle.\"\n\n\"Hey honey, you good for an all-nighter?\" one of the Americans said, standing up.\n\nI looked, and I really liked the look of that hard-on I came face to face with.\n\nAnd he was wearing boots too, so the night was really looking up.\n\n\"Keep those boots on and it's free for you, Yankee trash\".\n\nMaybe I wouldn't even have to kill him afterwards.\n\nJust help him out the window, into the canal.\n\n\"You be gentle with him,\" Revy grinned.\n\nYeah! Halloween in Roanapur.\n\nThis was my kinda party.\n\n<center> * * * The End * * * </center>\n\nHope you enjoyed my little take on \"Black Lagoon,\" and if you've never read it, it's a Japanese manga series that actually works really well for an American audience. Much better than a lot of Japanese manga, and the english-language versions are really well done. No sex, but a lot of violence, and Revy Two-hands... well, let's just say I love Revy Two-hands... Chloe"
    ],
    "authorname": "ChloeTzang",
    "tags": [
        "roanapur",
        "black lagoon",
        "asian",
        "chinese",
        "action",
        "guns",
        "violence"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/halloween-in-roanapur"
}
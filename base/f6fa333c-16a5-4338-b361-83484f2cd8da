{
    "title": "Lady in Red Pt. 02 Ch. 12",
    "pages": [
        "\"Excuse me, Madam Chairman,\" repeated Virginia Senator Russell several times before the din abated and he could finally be clearly heard. \"May I suggest a recess so that the committee can discuss this situation? We could reconvene after lunch.\"\n\nOnce again, an aide stepped forward and spoke into the still livid chairman's ear as she slowly nodded. \"Very well, Senator Russell. We'll adjourn until one o'clock this afternoon. Ms. Anderson, Lieutenant Hammer, we'll expect you in your seats and prepared to answer questions at that time. You'll still be under oath.\"\n\nWith that statement, the lady chairman brought the gavel down. The senators and their aides stood to leave the chamber. \"That went well,\" observed Kate drily as she and Ashley joined Steve and Gwen. \"They don't seem to like your brand of truth too well here. They'd be pissed if you didn't have any proof, but they're even more pissed that you do. There are at least a hundred reporters waiting on the steps to ask you guys questions. Want to find a back door or something?\"\n\n\"I don't think we do,\" replied Steve. \"We need to remain completely transparent and truthful. Let's go get some lunch.\"\n\nAs the group stepped outside, dozens of reporters hurled questions at them. \"Did you exchange yourself for those kids with the intention of killing the terrorists?\" shouted a man standing in the forefront of the legion of reporters.\n\n\"I had no idea how it would all play out. But I was quite certain that with the tenacious support of my friend and fellow SEAL, Chip Martin, we'd have a better chance of bringing them to justice than that group of school kids would,\" replied Steve. \"There was no plan, per say, so much as an agreement between Chip and me to do all we could for the kids and for each other.\"\n\n\"How did you know that he'd be able to find you? That he'd be able to rescue you?\" questioned a different reporter. \"Wasn't that leaving a lot to chance?\"\n\n\"I didn't, and yes, it was leaving a lot to chance. Fortunately, Chip beat the odds, which really didn't surprise me. I've never seen his equal,\" praised Steve.\n\n\"Was it your intention to decapitate that terrorist?\" called a tall woman reporter from the second row.\n\n\"It was when I brought my foot down,\" replied Steve calmly.\n\n\"Why did you send that email? Did you expect your friends to show up at that warehouse?\" quizzed another reporter.\n\n\"Honestly, I didn't know what to expect. That said, I wasn't overly surprised at the results. I sent it to find out what would happen if I gave away our position. I'm certain that Gwen didn't send in that Hellfire missile,\" grinned Steve as he pulled Gwen closer. \"She never received the email. Who has the ability to monitor emails, and to intercept them? Who has the ability to use Hellfire missiles? Who can transport me surreptitiously to Iraq without the U.S. military, or government knowing? That list is pretty short, and it's the usual suspects.\"\n\n\"Do you believe that the CIA tried to have you killed?\" asked yet another reporter.\n\n\"I think the evidence points to a person, or persons, in the CIA dropping that missile on that warehouse with the intention of sending me straight to Hell,\" admitted Steve. \"I'm holding out hope that it was a rogue operation and not something the Agency condoned. That remains to be seen. Now, if you'll excuse us, we need to catch some lunch before we return to testify before the committee.\"\n\nSteve and Gwen strolled down the street with Kate and Ashley following. They were constantly recognized and greeted as they made their way down the sidewalk. Most of those they met were tourists and delighted to see the famous couple. Cameras and phones constantly snapped photos. Many people took the time to thank Gwen and Steve for their efforts on behalf of veterans, and for standing up to the powerful senate committee.\n\n\"Word gets around fast,\" stated Ashley as they group sat down at their reserved table. \"It seems like the everyday Joes are pretty happy with the way you two are handling things so far. This is big. You're pretty much accusing the CIA of trying to kill an American citizen that's an active member of the military; a Navy SEAL, no less.\"\n\n\"When I asked if I could have the afternoon off from class to attend this hearing, my instructors couldn't agree fast enough,\" stated Kate. \"These hearings are extremely interesting to people that teach at, or attend law school. I just watched history as it was happening. Tomorrow, I'm supposed to give a verbal report on everything, unless you're still testifying. Then I'll be here again to watch.\"\n\n\"People in medical school aren't quite as excited about this stuff, although I had no problem getting permission to take a few days off from class to come to Washington,\" admitted Gwen. \"The real problem is that med school is hard enough when you attend all of the lectures. Missing class is not the way to pass the exams. Luckily, Charlotte's got my back. She'll take notes and record the lectures, but I'm going to be working my butt off when I get back to Stanford.\" \n\n\"Do you think you'll be going back, or will that 'Madam Chairman' person throw you in jail?\" questioned a concerned Ashley.\n\n\"That was just a foolish statement made out of anger,\" replied Steve between bites of his lunch. \"We didn't withhold evidence from them. She's angry because we produced the evidence that she didn't want to even exist, never mind being seen by the public. Once she has time to cool off, she'll realize it, or her aides will explain it to her.\"\n\n\"After what Steve went through in Colombia and Iraq, the citizens of this country would probably stage a revolution if the government tried to punish him in any way,\" insisted Gwen. \"You've seen how people admire and respect him. Without wanting to sound vain, Steve and I have built up a lot of good will across the country. As long as we're honest about everything, 'Madam Chairman' won't be able to touch us. Look at what Steve managed in a two week span. He saved those two American girls in Colombia, killed a ruthless drug lord, freed 17 child hostages in Iraq, and killed numerous international terrorists. That's in two weeks!\" \n\n\"One of my law professors said pretty much the same thing last class,\" offered Kate. \"He suggested that Steve's influence exceeded that of most members of Congress. We're a country of citizens that want to do the right thing, and want to be proud of our leaders and their actions. Steve's given that to us, in spades! We haven't had a lot to brag about or believe in lately, but Steve's brought back pride in country. Americans like to feel that he represents our ideals, our courage, and our skills.\n\n\"Chip told me that he'd never have made it out of Iraq without Steve pushing him all the way. I don't think I realized how much you guys endured until I watched that video. You talked Chip into living, and you used me to make him want to keep going. That makes me love both of you guys. Busted legs, ribs, arms, and shoulders and you two were talking about not letting us down and how you had to get back to Gwen and me. You just keep amazing me.\"\n\n\"We'd better start back,\" suggested Steve as he blushed slightly under Kate's praise. \"We'll wind up behind bars for being late or something.\" \n\n\"It's come to my attention that I may have acted a bit rashly earlier today,\" began the lady chairman of the senate committee as soon as the hearing was called to order. \"Since you offered your evidence when this committee asked for it, you did not withhold it and therefore cannot be held in contempt. However, I still feel that it was grandstanding. It was theatrical and performed to perfection by skilled actors. We're here to get to the truth and that's what we intend to do. Senator Russell now has the floor.\"\n\n\"I'd like to thank you both for appearing here today,\" began the senior senator from Virginia. \"I'd also like to express my sincere appreciation for the courageous efforts you made on behalf of others in both Colombia and Iraq in recent weeks, Lieutenant Hammer. \n\n\"I have to state, Ms. Anderson, that your work with children and veterans has not gone unnoticed. You were instrumental in the construction of a state-of-the-art hospital in your home town. Your company is completely financing a similar one in Kiev. It's rare to see charitable work on such a large scale.\n\n\"Now for the reason we're here today. Lieutenant Hammer, can you state for a fact that the CIA tried to kill you in Iraq? Do you have any more knowledge than what you shared with us in that amazing video?\"\n\n\"No, Sir, I cannot. I can only give tell you the facts as I know them. They would seem to point at the Agency, but they're very careful about exposing their people, or their intentions. You need to find out why I wound up on three different military planes while being taken to Iraq, yet with no one in government knowing it. Who cleared me to ride on them? In Germany, they actually delayed their departure to wait for my arrival. Who told them to wait? If the military and the state department have no knowledge of these flights, then who made the arrangements?\n\n\"Why didn't my email get through to Gwen or my friends? How did the CIA learn there were terrorists in that building? Why did they bomb it? Who met me when we landed in Iraq and escorted me to meet the families of the kidnapped children? Who appointed the fellow that headed up the CIA's effort in Iraq to find me? Why wasn't the military included? My friends assure me that our service men and women were extremely anxious to assist in the search. Special Forces were created for situations like that. Why weren't they utilized?\n\n\"When you have the answers to those questions, you'll be a long way toward determining who was responsible for that series of incidents, and if it was their intention that I become a sacrificial lamb,\" concluded Steve. \n\nSteve and Gwen spent the rest of the afternoon responding to committee questions. No senator made the mistake of being overly critical, or insulting to the couple as they politely answered every question asked. When the questioning was finally completed, the lady chairman thanked both Gwen and Steve for their cooperation.\n\n\"We started off poorly, but I truly believe that we all have the same goal. We want this great nation to succeed and grow. There's no place in government for those that ignore our laws and pursue private agendas. Thank you, Ms. Anderson and Lieutenant Hammer for your cooperation and patience today. This committee will process the information we've received and proceed from there.\"\n\nOnce again, Steve and Gwen were mobbed by reporters as they left the Capitol Building. Before they began answering questions, Gwen motioned to a smiling man standing well off to the side. He was accompanied by several men in suits.\n\n\"Larry?\" called Gwen as reporters craned their necks to find the focus of Gwen's attention. They saw several well dressed men standing near a tall fellow with a pony tail. He was wearing jeans and a flannel shirt. Gwen motioned to the man and he grinned as he made his way to the front of the crowd.\n\n\"What brings you to D.C.?\" asked Gwen as she quickly hugged the man before Steve shook his hand. \"Is there anything wrong? Is everyone back home okay?\" \n\n\"Yeah, the guys are fine. I'm in town to lobby for aid for disabled veterans. I'm here right now because these three national veteran association honchos found out that I'm on pretty good terms with you, Steve, Jordan, and Charlie. They want a favor and they hoped that I'd soften you up before they asked it,\" chuckled Larry Carson as the three men in suits worked their way through the crowd of reporters.\n\n\"Bill Adams, Sam Notaranni, and Ben Li, it's my pleasure to introduce you to my good friends, Gwen Anderson and Steve Hammer. I did my part. Now it's up to you three,\" grinned Larry as he stepped back.\n\n\"We were quite willing to wait until you were done with the press. Asking a favor in front of reporters isn't really very fair,\" reasoned Bill Adams, the apparent spokesman of the group.\n\n\"Sir, if it's about helping veterans, feel free to ask us anything, in front of anyone,\" responded Gwen as she gave the three men her megawatt smile. \"We'll do what we can.\"\n\n\"Okay, here it goes,\" replied Bill Adams. \"We represent the three largest veterans' organizations in the United States. We've made arrangements with the Park Service to have the use the National Mall on Veteran's Day. We do this almost every year. We have speakers lined up. They're..., you know,... the usual Veterans Day speakers. What we'd really like to ask is if you could manage to work your schedule so you could perform...\"\n\n\"Absolutely!\" responded Gwen before the man finished his request. \"We'll make the time. I'll need you to give your contact information to Ashley. She'll be in touch with you. We'll need to know where you want us to set up, how long you want us to perform, and any special requests you may have for us. I can't speak for Jordan and Charlie, but I guess I'm speaking for Steve, aren't I?\"\n\n\"Feel free,\" laughed Steve as Gwen looked to him for his reaction. \"You know I'll do anything to help our vets, and even more to remain in your good graces.\"\n\nBy this time, Ashley was exchanging information with the three delighted men. She entered their information into her phone before she gave them numbers and emails they could use to contact her.\n\n\"We can't thank you enough!\" beamed the man introduced to Gwen as Sam Notaranni. \"Our turnouts have been getting a bit light with the usual predictable speeches and ceremonies. We've been watching the news and saw how well you treated the veterans in your state and what you did to help Larry's organization. We ran into him at a meeting and persuaded him to come here today to see if he could introduce us to you. He managed it without putting out much effort. He appears to be a genuine friend of yours.\"\n\nIt was at that point that everyone realized that reporters were recording the exchange. \"I guess you heard everything, but that's a good thing!\" declared Gwen as she faced the reporters once again. \"Steve and I have agreed to perform here at the National Mall on Veterans Day. I'm sure that Charlie and Jordan will be with us, if their busy schedule allows it. We hope that everyone will have a wonderful time, and the people of this great country will show their pride and appreciation for the sacrifices these men and women have made for us. I'm dedicated to helping our veterans. We'll be here in Washington, on the National Mall, celebrating with, and honoring the men and women that have risked so much for us. There's no more fitting place to honor these people than here in our nation's capital.\"\n\nA few minutes later, Gwen, Kate, Ashley, and Steve returned to their hotel for a 'quiet' dinner. \"Maybe we should have reserved a private room, or eaten in your suite,\" worried Ashley as Steve and Gwen were interrupted for about the tenth time by well wishers and fans.\n\n\"This is fine,\" insisted Steve. \"Gwen may be a Congresswoman soon. She needs to be seen as accessible. She can't become part of the establishment, where she's only seen at photo ops and political events. In fact, I think she should avoid the obvious situations where she'll be seen as pandering or politicking. People need to realize what a smart, honest, beautiful woman she really is. She has to keep her humility and natural charm front and center. It's what separates her from all of the clowns and jokers we have in congress.\"\n\n\"Jordan just called. She got my text about performing, and she saw it on the TV news,\" revealed Gwen as she put her phone away. \"Mr. and Mrs. Burns think it'll be the perfect venue for them to debut as a married couple. They can't wait to perform.\" \n\n\"Will Jordan change her professional name to Jordan Burns?\" asked Kate. \"That would take some getting used to, wouldn't it?\"\n\n\"Professionally, she'll still be Jordan Quick, but in her private life, she's Mrs. Jordan Burns and their kids will have the surname 'Burns'. I think it's a good idea. I'll always be Dr. Gwen Anderson to my patients, and plain Gwen Anderson to my fans, but I hope to be Mrs. Gwen Hammer someday, if I'm not being too presumptuous.\"\n\n\"I think we'd be Lieutenant and Doctor Hammer, or if I'm a civilian, Mr. and Dr. Hammer. At least that's what'll be on our electric bill,\" offered Steve with a grin.\n\n\"As long as I have 'Hammer' in there someplace and our kids are little 'Hammers', I'll be fine with just about anything,\" admitted Gwen. \"Mom's been hinting that we should tie the knot at some point soon. I told her we have it planned out, but she says plans don't always work out and it might be good to just make the leap.\n\n\"I told Mom that you haven't even asked me, so she's putting the cart before the horse,\" stated Gwen as she gave Steve a meaningful look.\n\n\"Gwen, if you want to change our plans, I'll gladly marry you tomorrow,\" responded Steve. \"You know how I feel about you and how I fully intend to make you my wife. If you're not happy with our timetable, just let me know. I'll be on bended knee so fast your head will spin.\"\n\n\"That's all I need to hear,\" beamed Gwen. \"Charlotte and I both think that it's better to concentrate on med school and avoid the distractions of marriage, especially when it's long distance. When you and I take the plunge, we're going to live together. That's important in a marriage. It's the only way that I know.\" \n\nGwen returned to Stanford the next morning, while Steve reported to Senator Chatham's office. \"You're coming to work for me after the way you stirred up things yesterday?\" questioned Senator Chatham. \"Presenting that video out of the blue like that really caught the committee by surprise. Politicians do not like surprises. You need to always be aware of that.\n\n\"You're going to be introduced as my attach\u00e9 today. There'll be more than a few questions since you're only a lieutenant. Usually Majors or higher receive those appointments. They're normally appointed to embassies and the like. What I want from you is silence on your appointment. I'll handle any questions that may be asked. Just remember that you're still in the service and you should consider me your superior officer in our interactions.\n\n\"I guess you'll want Veterans Day off,\" chuckled Senator Chatham. \"That was a real Kodak moment when you two promised those veterans that you'd perform on the National Mall. You two garner more good press without any real effort then my entire professional PR team can manage for me. This'll be an interesting year!\"\n\nSteve did his best to follow instructions while trying to maintain a low profile. Senator Chatham appeared to have a different agenda as she always had him travel with her and stand nearby for all of her photo ops. \n\nGwen and Charlotte flew to Sparta from California on Election Day to vote. Steve returned home from Washington. They all realized that they could have used absentee ballots, but were excited over the prospects of Gwen winning the election. Once again, Gwen and Steve, with friends and family, were enjoying a late dinner at Marsh's Landing. Every television in the place was tuned to a news channel. It was just past eight thirty when Amber Stahl announced that her network was prepared to project the winner of the Congressional race in Sparta. The entire restaurant became silent. Everyone was focused on Amber's announcement.\n\n\"CBC is now projecting that the winner in the 5th Congressional District, which encompasses Sparta. We project Gwen Anderson will win the district by a 2 to 1 margin!\n\n\"This election is important for several reasons. Gwen Anderson never campaigned. She spent no time, or money trying to sway voters. Several attempts were made to derail her support. Rumors were circulated that her famous boyfriend, Steve Hammer, was having an ongoing affair with Paula Anderson, Gwen's mother. That effort failed miserably. Then nude photos of Ms. Anderson and a close male friend, who happens to be black, were circulated. Gwen Anderson simply shrugged them off. She admitted the photos were real, that the man in the photos was a very close friend, that Steve Hammer was the only man she had ever slept with and that people could vote for her opponent if they didn't like her lifestyle.",
        "\"Winning with write-ins is unusual, but not without precedent. Winning in such a commanding fashion is not at all common. The fact that she claims no party affiliation will force some interesting decisions by the leaders of both parties. Many political pundits feel that Gwen Anderson, along with her boyfriend, Steve Hammer, has more political clout than many senators and most members of the House. Senator Chatham recently had Steve Hammer appointed as her attach\u00e9. Critics were quick to claim that she was trying to capitalize on his popularity.\n\n\"We will be broadcasting a live interview with Gwen Anderson in the next half hour. Stay tuned for what promises to be a candid and interesting discussion,\" finished Amber as the station went to commercial \n\n\"I'd like to propose a toast!\" stated an extremely proud Ted as he stood and raised his wine glass. \"To the most beautiful, most talented, smartest, and most qualified congresswoman this great country has ever seen!\"\n\nEveryone stood at Ted's announcement and clinked their glasses together. Surprisingly, Billy Marsh decided to give a short speech. \"Please remain standing. I've been thinking about this a lot lately. I'd like to propose a toast to the rise of the queen, and I don't mean the movie we made. Our royal couple is on a collision course with destiny! Gwen and Steve are becoming more famous, more influential, and more powerful every day. It's a lot like the movie. We have the warrior and the queen. It won't be long and they'll be building an empire. Actually, I think that they are already!\"\n\nOnce again, everyone touched glasses and drank to the toast. As they took their seats Charlotte spoke. \"Billy, that was really insightful. Now that I think about it, you've nailed it. The election today is another step closer to the 'throne' for our queen. I have trouble believing that we're part of it all. I think that Gwen and Steve are building their empire every day, as they continue to increase their power and influence. Asgard will become the home of the gods.\"\n\n\"I think you're getting a little carried away with all of this,\" observed Gwen modestly. \"There are a lot of people in congress and I'll just be one of them. It isn't that big of a deal.\"\n\n\"Actually, it is,\" insisted William Patterson as he joined the conversation. \"You won on write-ins, with no campaigning. You, Steve, and Jordan have built a billion dollar company. You've traveled the world making friends and helping people. There's never been anything like Lady in Red Productions, or your group, before this. You're the closest thing this country has to a queen. And you've earned it and not inherited it, or married into it, like most queens do.\"\n\n\"Never mind embarrassing the poor girl,\" interjected Steve's grandmother. \"I want to make sure that Gwen knows that she and Steve are always welcome to stay with us when they're in Washington. I already told Steve. He made certain that I understood that if you visited with us that you and Steve would be sharing a bed. After everything that happened with his mother, I understand why he felt the need to firmly state his position on the matter. I wouldn't have it any other way. We have a second master suite in our house and you're always welcome to use it. Please keep it in mind.\"\n\n\"Thank you, so much, Grandmother Patterson! Our company's rented an entire floor in a hotel for our group for the next year, but we'd be delighted to visit you on a weekend or holiday when we don't have to be at any government functions. I appreciate that you're so understanding about the sleeping arrangements. For some reason, Steve likes to keep me close whenever he can,\" teased Gwen as she ran her hand lightly over Steve's cheek. \n\n\"I'm well aware of that fact, My Dear,\" smiled Beatrice Patterson. \"Remember that we accompanied you on your trip to Russia and experienced those thin walls first hand. That trip was an eye-opener for me.\"\n\nAt that point, a well dressed man entered the dining room and approached the table. Ashley jumped up from her seat to greet the man. \"Gwen, this is Matthew Barnwell. He's interested in assisting you when you're sworn into the House of Representatives. He's been an aide to several influential Congressmen over the past ten years. He contacted me a week ago to set up an appointment. I told him then that if you won, I'd see that he met with you right away. I hope this isn't too soon.\"\n\n\"It isn't too soon, but it is too late,\" responded Gwen. \"I've already selected my top assistant, aide, or whatever they're called. Thank you for coming, Mr. Barnwell, but I won't be requiring your services.\"\n\nThe man thanked Gwen for her time and quickly left the room. \"I'm sorry, Gwen. I didn't know that you'd already found someone. I was just trying to stay on top of everything for you,\" reasoned Ashley. \"You're going to need some very good assistants after you take office. I hope you found someone extremely capable.\"\n\n\"That's exactly what I did, Ashley. Maybe I shouldn't have assumed that the person would accept the job, but I'm hoping that they will,\" added Gwen with a grin. \"I need someone that I can trust totally. I discussed it with Steve and we agreed that you're at the top of a very short list. I realize I may be taking advantage of our friendship, but I really need you. Your salary will be increased accordingly and you can hire all the assistants you feel are necessary, but you have to be in charge. You're the one I want. Will you do it?\"\n\n\"Me? Do you realize how little I know about politics? I'd be learning on the job. You can find some very good people with a great deal more experience,\" reasoned Ashley.\n\n\"Ashley, can you honestly tell me that you think Gwen could find someone that would work harder, or be more loyal than you?\" asked Steve.\n\n\"Honestly? No, but she could find people that know a lot more than I. I'm a novice. I'll make mistakes. I don't know what I'd do if I did something stupid that hurt Gwen politically, or in any other way.\"\n\n\"That's why you've been asked,\" replied Steve. \"We've known you for quite a while. You're smart, beautiful, well spoken, honest, and extremely loyal. Gwen can live with honest mistakes. What she can't risk is distrust, envy, and greed. We both believe that you're the best choice, and really, the only choice for the job.\"\n\n\"Then I'll gladly accept! I promise I'll do the best I possibly can,\" declared Ashley as she hurried over to Gwen and hugged her tightly. \"I'll always have your best interest at heart.\" \n\nAshley then moved to Steve and embraced him tightly. \"You and Gwen have been so good to me and my family. I'm so lucky to know you both. If I screw up, don't be afraid to let me know. If you have to fire me, I'll understand, but promise we'll always be friends.\"\n\n\"You've seen how Gwen and I are with our friends, and you're one of our best,\" assured Steve. \"You won't be fired and you'll always be very dear to us.\"\n\nAshley pulled Steve down and kissed him hard as everyone else smiled knowingly at the obvious affection Ashley had for Steve. When she released Steve, she ran her hands over her eyes as she wiped away her tears. Then she buried her face in Steve's chest and sobbed loudly. Steve simply held her and waited for her to calm down.\n\n\"I'm sorry about that, everyone, but I just felt so overwhelmed. My life has improved so much since I met Gwen and Steve. I wonder what I've done to have such amazing friends. You guys are the best!\" managed Ashley as she finally gained control of her emotions.\n\n\"Ashley, you'll have your pick of any room on the fifteenth floor of our hotel, except for the suites Kate, Naomi, and Steve and I will be using,\" added Gwen. \"They're long term, with kitchenettes and great views of the city. I'll be flying back and forth from California, but you'll be staying there, setting up my office, hiring your assistants, and buying whatever we need. Med school keeps me very busy, so I'll rely on you to handle everything in Washington. Mom's agreed to set up an office in Sparta for me and to staff it.\n\n\"Steve will be in D.C., so he might be able to answer some of the questions you might have, but he's almost worthless about things like colors and designs. Just email me with anything Steve can't handle and I'll respond when I get the chance. He'll be living on the same floor, so you can catch him in the evenings.\"\n\n\"Steve will be living on the same floor?\" repeated Ashley as she glanced at Steve. \"That'll make it easier to contact him with questions, and I'll feel safer with him nearby.\"\n\n\"Yeah, but will Steve be safe with you on the same floor?\" teased Becky. \"I think I'll be visiting my sister quite often.\"\n\n\"You'll have your choice of available rooms when you're there, so you don't have to bunk with Ashley,\" stated Gwen. \"You girls can keep his motor running, but he'll have to wait for me to come east to relieve his pent up tension. You probably heard that Naomi's an attach\u00e9 with Senator Mason. She's staying on the same floor and will keeping an eye on things for me. Now that the public has determined that her ass is bigger than mine, she's very humble, and quite helpful.\"\n\n\"That poll wasn't scientific and Gwen only won by two per cent, which is within the margin of error in any poll,\" explained Naomi. \"I should point out that I also won the bigger breasts poll by three per cent, so I'm proportional. Wouldn't you agree, Billy?\"\n\n\"After seeing you at the pool this summer, I sure wouldn't disagree!\" responded Billy. \"You and Gwen could be identical twins, except for a few minor differences.\" \n\n\"That's so sweet!\" replied Gwen and Naomi in unison, before Gwen added. \"I'll take that as a huge compliment. Naomi has an incredible figure.\n\n\"I've got another announcement about our company,\" added Gwen. \"Everyone knows that Lisa has been featured in advertisements for the new Lady in Red line for pregnant women. It's been doing extremely well, but that's no surprise considering how beautiful Lisa is, and how she positively glows.\n\n\"What you don't know is that after New Years, Jason will be heading up a new division for our company. He'll be discharged from the Army by the end of the year. In the past our company has attempted to help people that were victims of natural disasters, but it's been hit or miss for the most part.\n\n\"Jason will be utilizing his experience and his engineering background to set up a Lady in Red Productions national response to disasters, or any other event where large numbers of our citizens need help. He'll be setting up a network of vendors, as well as various professionals, that will stand ready to wear our logo, and rush to disaster areas with the appropriate response. This is going to require a great deal of planning and preparation. We feel confident that Jason can handle it.\" \n\n\"I'm sure that he can,\" agreed Paula. \"He's extremely detailed oriented, but I guess most engineers are. He'll do very well.\"\n\n\"Let's get over to LiR CPA,\" insisted Ashley. \"The TV cameraman is waiting. People are already pouring in to celebrate your victory. We'll touch up your make-up and do that interview with Amber. This is so exciting!\"\n\n\"You have all of this planned?\" asked a surprised Gwen. \"We're having a victory celebration? Steve, you stay close to me all night, okay? I want everyone to know that I rely on you and that we're a package deal. Let's get over there and greet all of our friends and supporters!\"\n\nGwen was greeted with a huge ovation when she entered the Lady in Red Center for the Performing Arts. Balloons and confetti dropped from the ceiling and the huge jumbotrons broadcast Gwen's every step and every expression on her beautiful face. Everyone was relatively quiet as she gave a long distance interview to Amber Stahl. Then Steve escorted her to the stage so she could speak to the crowd.\n\n\"Thank you! I appreciate your confidence and trust. It means everything to me. I don't have a speech written. I don't have much to say, really. I just want everyone to know that I'll do my best. I will remember why you elected me. If I should forget, Steve will remind me. If he doesn't, call, email, text, write, or use social media to get my attention. Hold my feet to the fire. I represent you.\n\n\"My belief is that I should always try to do what I feel is best for the country, and that in turn, will be good for Sparta. I will not be adding pork to bills to help individuals or groups, be they in this district or not. I will support legitimate issues that have merit, and do my best to make this country an even better place to live. \n\n\"I will lean on my family and friends for guidance, especially Steve, but I'll always be making the final decision. Blame me if I screw up and no one else. But most of all, I want all of you to feel that I really do care, and that you can contact me with your concerns. Have patience, but hold me to a high standard. I'd have it no other way.\"\n\nGwen and Steve spent the rest of the evening meeting and greeting people as they lined up to have a word with their next congresswoman. Gwen was gracious and attentive to all. Steve was always at her side, smiling and speaking quietly to anyone that spoke to him. William Patterson mentioned it to Ted and Paula as they watched the couple interact with the public.\n\n\"I've seen a lot of politicians in my day, but I've never seen anything like your daughter and my grandson. Look how calm and controlled they are. Watch how people smile in appreciation when they take the time to listen to them. I'm telling you right now that there's no limit for that couple. It's up to us to see that they have all the tools they need to achieve whatever destiny has planned for them. You both should be extremely proud!\" \n\n\"Charlotte and I have an early flight in the morning,\" reminded Gwen as she led Steve back to her family and friends as the greeting line finally petered out. \"We need to spend some quality time with our guys, so we'll say goodnight to everyone and go to bed, won't we, Steve?\"\n\n\"Yes! We will,\" laughed Steve. \"How dumb would I have to be to argue about that? See you all tomorrow. I'll be in our room, explaining parliamentary procedure to our next congresswoman, if anyone needs me.\"\n\n\"Let me know if you need me to establish a quorum,\" joked Becky. \"You could wind up deadlocked with just the two of you there, but with me in the mix, it's less likely.\"\n\n\"Deadlocked for awhile sounds pretty good to me,\" smiled Gwen. \"I do appreciate your concern, as well as your generous offer. However, we'll reach a unanimous decision, but only after a great deal of deliberation. I truly believe that I can coax Steve into seeing things my way.\"\n\nGwen and Charlotte returned to Stanford the next day, while Steve flew back to Washington. The Monday evening before Veterans Day, Gwen and Charlotte landed in Harrisburg, Pa. They were met by Steve, Jordan, Charlie, Jared, Naomi, Kate, Chip, and Billy. Plans had been made for the group to travel to Washington the next morning. They were scheduled to perform at three Tuesday afternoon and wanted to arrive in D.C. at noon or a little later. Early Tuesday Morning, the girls posted tweets, and to other social media while they worked on their breakfast. It was an unseasonably warm fall day with temperatures predicted to be in the mid sixties. \n\n\"Are you sure you're going to be able to ride the entire way?\" asked a worried Kate for the third time. \"You're not completely healed yet.\"\n\n\"We've been over it a dozen times,\" answered Chip. \"I feel good. My shoulder is at ninety per cent and my leg is getting a lot better. I wouldn't be able to walk that far, but I can ride this bike from here to Hell and back. Just climb on and look beautiful, would you?\" \n\nAs planned, the group pointed their bikes south at exactly eight AM. By the time they had traveled five miles, two dozen more bikes had pulled in behind them. Where the roads were wider and traffic was regulated by state and local police, the group rode four and five abreast. Ashley had printed out a map with directions for the group to follow so they could avoid interstates most of the way. The route had also been posted on FaceBook as well as the company web page.\n\nWhen Steve, Gwen and friends entered Washington city limits shortly after noon, it was estimated that six to eight thousand bikers, mostly veterans and active service men and women, were riding behind them. Many of the riders had small flags attached to their bikes showing the branch of the service they had so proudly served. Thousands of people lined the streets and waved and cheered as the seemingly endless stream of bikes poured past them. Gwen, Jordan, Kate, Charlotte, and Naomi waved back to the cheering crowds as the formation made its way to the National Mall. A side street not too far from the mall had been closed and designated for parking for the bikes.\n\nOnce they turned off the engines. Steve and Gwen, along with their friends, led the other bikers to the National Mall to join thousands of others that had come to Washington to celebrate Veterans Day and to see the concert. \n\nThe group was welcomed by fans with every step they took. Jordan, Charlie, Steve and Gwen posed for pictures, signed all sorts of flyers and pamphlets, and shook hundreds of hands as they worked their way forward. They were met by a grinning Larry Carson as they approached the stage.\n\n\"They've been having small turnouts the last few years? Take a look in any direction. There has to be over a quarter million people here today, if there's one! All of a sudden, politicians are begging to be allowed to speak, but we're sticking to our guns. We have a general and an admiral speaking, and then you guys will be asked to say something.\"\n\nBy three that afternoon, the National Mall was packed with people as were all nearby streets and parking lots. Lady in Red Productions had spent the previous few days installing numerous jumbotrons to allow more people to enjoy the show. As the Chairman of the Joint Chiefs was introduced, a park service official standing near Gwen told a reporter that the crowd was estimated at a just less than three quarters of a million people!\n\nThe huge crowd was polite as the General Dent gave a pretty much standard speech. He received some applause when he wrapped up his oratory efforts. Then Rear Admiral John Kane was introduced amid a less than raucous welcome. To his credit, the Admiral realized that hundreds of thousands of people had not come to hear him speak. He delivered a shorten version of his intended half hour discourse.\n\n\"Now, we're going to hear from Jordan Quick Burns!\" announced the emcee as a huge roar went up from the crowd.\n\nJordan had to wait over a minute for the crowd to settle down. Her beautiful smiling face lit up the jumbotrons that had been placed around the Mall. \"Thank you! I've heard news reports that all of you came here today to see us. They have that backwards. We're here today to see you!\"\n\nOnce again hundreds of thousands of people whistled and yelled their approval. \"I always thought that I understood our veterans and what they went through to keep us safe. A couple of months ago, that all changed. I went with some very trusted and dear friends to Iraq to do what we could for a couple of guys that we love, and that needed some help. You may have heard about it on the news? \n\n\"I saw acts of courage and sacrifice beyond anything I ever imagined. My husband, Charlie, is a veteran. I never realized what that meant until the day we had to fight our way out of a really bad situation. Charlie came within an inch of dying while protecting me and others. I saw death, pain, and despair that day. But what I really remember the most is the strength and the character shown by the men and women that traveled with us. I now have a small idea of what all of you brave men and women risked with your service to this great country. I'm humbled to be here today. I'm also incredibly honored to be able share this event with you. Thank you so much for your service, and for allowing me to be a small part of this glorious day. I'm in your debt!\"",
        "Applause and cheers lasted several minutes after Jordan had wrapped up her very brief speech. She beamed as she turned and waved in all directions to the adoring crowd.\n\nEventually, it began to quiet down and the emcee once again spoke to the crowd. \"Wow! Was that a great speech, or what! Now it's time to hear from another performer that's donated her time and talent to entertain us today. Give it up for Congresswoman-elect Gwen Anderson!\"\n\nOnce again, hundreds of thousands of people showed their approval with whistles, cheers, applause and the chant of 'Gwen', 'Gwen', 'Gwen', over and over. Again, the jumbotrons featured a beautiful woman's face as she smiled broadly and waved while she waited for the noise to diminish.\n\n\"Thank you! This is a great honor!\" managed Gwen once the din abated. \"We love our veterans, as well as our active military. You folks are the best. I've been pretty close to a military man the past few years and I've seen what you sacrifice for your country. To that end, Lady in Red Productions is formulating a strategy to upgrade some hospitals around the country that are having financial issues. We're going to help fund them, but with one condition. They will not turn away veterans for any reason, with the exception of being filled to capacity, and no veteran will ever be refused out-patient treatment. \n\n\"This is a huge endeavor and it'll take years to accomplish. We've already reached agreements with a hospital in Akron, Ohio and another in Nashville, Tennessee. We'll rehab and modernize them as fast as we can. Then we'll increase the staff and see that veterans that need hospital care in that area receive everything they need, and deserve. That's our promise to you!\"\n\nThe crowd was caught completely by surprise by the announcement and it took a few seconds to sink in. As understanding swept through the veterans in attendance, a huge roar went out from the audience. Gwen simply smiled and waved as she turned around to face the sea of faces that stretched in every direction before she returned to her seat.\n\nOnce again, the emcee waited for the noise to abate. When it finally dulled to a low roar, he began his introduction of the next speaker. \"Ladies and Gentlemen, our last speaker needs no introduction. Here he is!\"\n\nA Steve approached the microphones, the crowd went crazy. It was immediately obvious that his personal sacrifices had made an impression on every person in attendance. As the ovation continued, Steve grinned and waved. Now and then he'd point to a group and nod, smile, or signal something before moving his gaze on to others. Finally, the audience tired and Steve was able to be heard.\n\n\"Thanks! I appreciate it! I understand how you feel. This isn't about me. It's about all of you, all of us! What I did is no more than what every last one of you would've done if you'd been in my place. I've seen many examples of the courage, dedication, determination, and the honor that all of you possess. We're in this together. You're my brothers and sisters. You represent what's right with this country!\n\n\"We rode our bikes into town today because we're so damned proud to be seen with our veterans and active military. There's no greater honor than to be recognized as an equal by men and women like those of you here today! What I've done, what we've all done, is no less than what we expect from each other, and from ourselves. It's what we do!\"\n\nSteve had to wait over a minute for the cheering to let up. \"Forgive me, but I can't let this opportunity go by. I have to thank Lieutenant Chip Martin, a Navy SEAL brother, for pulling my ass out of a real jam. He's right there!\" pointed Steve as the camera swung to a red faced Chip as a huge cheer went up. \n\n\"Then there's Captain Jason Hunter, Lieutenant Jared White, Lieutenant Naomi Wilson, army veteran Charlie Burns, Ted Anderson, Charlotte DeVries, Billy Marsh, Jordan Quick Burns, and Kate Anderson. These friends and family made a trip to Iraq with the intention of finding me, and bringing me home. Please give them a hand! \n\nOnce again, an ovation went up and lasted a long time. \"Finally, I need to thank Gwen Anderson. She's incredible. I owe her everything that I am, and everything that I have, including my life. I can't imagine life without her,\" concluded Steve. \"Thanks, everyone! Now, are you ready for some music?\"\n\nAs applause rang across the National Mall, the band quickly set up their equipment on the small stage located in a sea of humanity. Within ten minutes, the music began. \n\nJordan and Gwen stepped to the front of the small stage and faced a hug flag flying over the mall. Then they delivered the National Anthem to the very best of their abilities. The huge crowd roared its approval.\n\nGwen had polled numerous veterans to ask what songs they'd like. The response was inconclusive, so they decided to give the crowd everything they had, mixing some of the early songs they did, as well as to play all of their hits.\n\nIt was almost four PM by the time the show began. At seven, there was a twenty minute break before the band returned for another three hours. As the day went on, the crowd increased in numbers. By dusk, it was estimated that nearly a million people were enjoying the show in person and millions more were viewing the concert on the internet. Lady in Red Productions was streaming the concert free over the web.\n\nNear the end of the evening, Gwen performed her most recent hit, 'Woman in Love'. The jumbotron played the video that had accompanied her song when it was released. They utilized a split screen, with the other half showing Gwen as she sang. Tears flowed freely, mostly from the ladies in attendance, as the lyrics and Gwen's vocals created strong emotions in the huge crowd. Then Steve performed 'Please Forgive Me' and even more tears streaked faces. More than a few men were shown on the jumbotron wiping their eyes.\n\nIt was approaching eleven by the time Gwen, Jordan, Steve and Charlie joined friends and family in a private dining room at their favorite Washington hotel. Once again, Gwen and Charlotte excused themselves since they had a morning flight and dragged their boyfriends off to bed.\n\nThe following Friday, Gwen called Steve from California. \"You're practically an uncle! Lisa had a baby girl this morning. They're both doing great. I'll meet you at the hospital in Sparta tonight. I have to go pack. Love you, Big Boy!\"\n\nA few hours later, Steve joined Gwen in the maternity ward. \"This is the best reason we've ever had to be in this hospital!\" proclaimed Gwen as she kissed Steve as her family looked on. \"Come with me. Lisa and Jason want to show you their little princess!\"\n\nJason stood and grinned as Steve and Gwen entered the room. The two men shook hands before Steve approached Lisa and the baby sleeping in her arms. Lisa looked pale but her smile lit up the room.\n\n\"Here, hold your goddaughter. Aunt Diane already warned me about how you'll want to watch me breast feed her, and that's fine with me. I want you and Gwen to be part of her life forever. Isn't she just perfect?\"\n\n\"She is!\" agreed Steve as he carefully held the infant and smiled broadly. \"She's beautiful. It's sure good that she looks like her mom!\"\n\n\"I agree!\" laughed Jason. \"It would've been pretty awful if she came out looking like me. But we both know that no Anderson sister could have anything but a beautiful baby, even if they're married to guys like us.\"\n\n\"We happen to think that guys like you look pretty good,\" insisted Gwen as she took the baby from Steve. \"She's so adorable. Doesn't it make you want us to have one of our own, Steve?\"\n\n\"Actually, it does. You just let me know when you're ready and I'll do my part,\" assured Steve. \"We can't let Lisa and Jason get too far ahead of us, can we?\"\n\n\"I'm afraid they might, because I have two years of med school left and you're pretty busy,\" allowed Gwen. \"Once we get married, I'm flushing my birth control pills down the toilet. Then we'll catch Lisa and Jason, and maybe even pass them out.\"\n\n\"To be honest, I can't even think about having another baby right now,\" groaned Lisa. \"This isn't a race, although Mom will be happier when you two tie the knot and add to the family. I just want to enjoy Theresa for awhile and not even think about anything else.\"\n\n\"Theresa? What a beautiful name!\" exclaimed Gwen. \"She even looks like a Theresa.\" \n\n\"Yeah, it's Theresa Paula Hunter,\" beamed Lisa. \"Don't tell Mom. I want that pleasure, but I wanted to let you and Steve hear it first. You're going to be her godparents and she's going to wrap her Uncle Steve around her little finger.\"\n\nSteve and Gwen spent a joy filled weekend as family and friends stopped by the Anderson's home to congratulate and celebrate the birth of their first grandchild. Sunday afternoon found the entire family, and numerous friends, enjoying an early dinner at Marsh's. Lisa was out of the hospital and sat between Jason and Steve as she held the sleeping baby.\n\nThe doors to the private room were left open. The locals knew that was an open invitation to stop by and visit. Lisa beamed as everyone proclaimed that her baby was the prettiest one ever, and how beautiful the mother looked. Gwen was congratulated on her victory and thanked for her efforts to find Steve and bring him home.\n\nGwen felt a large amount of pride when people spoke of her beautiful niece, or about how they voted for her, but her emotions knew no bounds as she listened to friends and neighbors speak to Steve about the courage he had demonstrated so many times, and the pride he had created in his home town.\n\n\"Mom, are you listening to everyone talk to Steve? They absolutely love him! Look at how the men shake his hand and pat his back and how the ladies hug him and cry,\" pointed out Gwen. \"He's becoming a legend.\"\n\nHalf way through the dinner, Ted managed to get everyone's attention when he spoke to Chip. \"You appear to have healed quite well. I've noticed that you've been hanging close to Kate and it occurs to me that I haven't taken the time to explain what's expected of a man that dates one of my daughters.\"\n\n\"Gwen! Lisa! Dad's giving Chip \"The Talk'. I can't wait to see how Chip takes it,\" beamed Kate as Chip gave her father his full attention.\n\n\"I gave this talk to Steve and to Jason. I have to admit that I've added a few items to the list since I've seen how Steve and Jason conduct themselves, and how they treat my daughters.\n\n\"You will not use alcohol to excess, and you will never use drugs. You will always drive safely when Kate is with you. You will treat her as a lady and with respect at all times. You'll also be expected to extend that treatment to her sisters and mother. You will be prepared to risk, or even sacrifice, your life for any of the ladies in the family. You'll follow the excellent examples set by Jason and Steve. We've all learned a lot about what we should expect from men in this family by their actions. Does any of this seem unfair, or too much to ask?\"\n\n\"Sir, I will do my very best to live up to your expectations. You have an amazing family and I'll treasure every minute I'm allowed to spend with all of you. You're being very reasonable and I'll do my best to follow the examples set by Jason and Steve. I tell you this without hesitation,\" finished Chip seriously. \n\n\"Thanks, Dad!\" gushed Kate as she went over and kissed her father's cheek. \"You always take care of us girls. These guys know what's expected of them and they'll toe the line. They know how lucky they are.\"\n\nDiane, Will, Stephanie, and little Billy joined the group as Kate finished speaking. \"Sorry, we're late, but Stephanie's plane was delayed. Billy, sit down by your father while Stephanie and I hold your little cousin.\"\n\nStephanie beat her mother to the baby and was holding her and smiling down at her. After telling Lisa how beautiful the baby was, Stephanie dropped into Steve's lap and kissed his cheek.\n\n\"You've certainly grown up,\" observed Steve as he held the beautiful young woman. \"I haven't seen much of you since you went away to college in Maine. You're still beautiful, maybe even more so than I remember.\"\n\n\"You always say the right things,\" replied Stephanie with a big smile. \"I missed you and Gwen and everybody. I was so worried about you when you had that trouble in Colombia and it was even worse when they thought you had died in Iraq. That's when I realized just how much I loved you. My stupid job kept me from coming back home when Gwen brought you back from Iraq last summer. I only have a week of vacation and I'm using that at Christmas time.\n\n\"Would you come and dance with me,\" asked Steve as he lifted Stephanie from his lap and placed her on her feet.\n\n\"Here, while everyone's eating? Sure! I'll dance anytime and anyplace you want,\" agreed Stephanie. \"You know how I love to dance with you.\"\n\nSteve led her out to the main dining area and over to an area where there were no tables. Soft music always played in the restaurant when the TV's weren't on. Diners watched with interest as Steve took Stephanie in his arms and swayed to the music. \n\n\"Steph, it's great seeing you again. I have an ulterior motive for asking you to dance with me. I don't know how much you enjoy your job, but we'd like to offer you a position with Lady in Red Productions. Since Gwen's been elected to Congress, Ashley's going to be running her office in D.C. Our company needs someone to replace her. You'd be doing us a favor if you'd accept the position. Will you consider it?\" asked Steve.\n\n\"You're asking me to come back home to work for you? Do you think I can handle everything the job requires? I know that Ashley was extremely busy,\" replied Stephanie as she watched Steve for his reaction.\n\n\"Steph, you've got degrees in business and accounting. You're really smart. You work hard, and all of us trust you totally. You can learn the job. It'll be challenging, but you'll enjoy it. We'll pay you quite handsomely and have you in a profit sharing plan. You'll be doing us a big favor,\" insisted Steve as he pulled Stephanie closer as they danced.\n\n\"That's a pretty persuasive argument,\" admitted Stephanie. \"I love when you call me 'Steph', by the way. But you're going to have to offer me more than that to lure me away from spending another winter in Maine.\"\n\n\"We haven't discussed pay, but we can. Tell me what you need and we'll probably agree to it. If it's hours, or vacation time, we're really flexible. We'll do anything within reason. What will it take?\" asked Steve.\n\n\"Since you've asked,\" grinned Stephanie as she stopped dancing and smiled up at Steve. \"You have to kiss me like you've never kissed me before. I want one nice kiss, and not like I'm a cousin or a teen girl, but like a man kisses a woman. And you have to do it right now, in front of all these people.\"\n\nSteve grinned briefly before he pulled Stephanie closer and leaned down to kiss her. The diners in the room were watching the scene intently. Then someone noticed that Gwen, Paula and Diane were also watching from the doorway to the private dining room. Gwen's smile told everyone that she wasn't upset.\n\n\"I'd say that Steve and Stephanie are doing some serious negotiating,\" laughed Paula. \"Stephanie's so much more self assured and mature than she was when she left for college. I'd hazard a guess that she's accepting Steve's offer right now. They're simply sealing the deal.\"\n\nStephanie finally released Steve and stepped back with a big smile. \"That's how you negotiate a deal! When do I start? I'll give notice Monday. I'm really looking forward to working under you.\"\n\n\"Don't get carried away,\" warned Gwen as she came over and hugged Stephanie. \"You'll be working for the company, and not under Steve. I have that position covered, thank you very much.\" \n\n\"Now that we've brought on a capable replacement for Ashley, let's go see how little Billy's doing,\" suggested Steve as he headed back to the table. \"That little boy of yours gets bigger and stronger every time I see him, Diane. He's going to be a heart breaker.\"\n\n\"Yes he will, just like his hero,\" agreed Diane. \"He asks about you all of the time. I warned Lisa that you're going to want to watch her breastfeed her baby. It didn't seem to bother her at all.\"\n\n\"That's because we all saw how much you liked showing off in front of Steve when you were nursing,\" teased Stephanie. \"I remember how embarrassing I thought it was at the time. Now I see the attraction. In fact, I think I'm the only woman in the family that hasn't shown Steve her boobs, yet. Now that I'm working under him, I'll have the opportunity to correct that oversight.\"\n\n\"Ashley, I'm getting your old job,\" announced Stephanie. \"How did you like working directly under Steve? Was it hard?\"\n\n\"Of course it was! It seemed like it was always hard. Did you ever sit on his lap in a hot tub?\" asked Ashley with a devilish grin. \"It doesn't get any harder than that!\"\n\n\"I haven't... yet,\" replied Stephanie, \"but you're telling me it's part of my job? I guess I'll have to whatever it takes to earn my pay.\"\n\n\"You've no idea,\" continued Ashley. \"Most of the time, he won't let you even wear a top. It's surprisingly comfortable, even with everything so hard. His abs and pecs will rub against you whenever he moves. As beautiful as you are, I'm sure you'll find it very hard most of the time you're working near Steve.\" \n\n\"Okay, I'll take the job, for sure! Will I have to pay the company to work under Steve?\" joked Stephanie. \"It sounds like my fantasy position.\"\n\n\"I'm sure it does! It can be quite demanding, but very fulfilling,\" responded Ashley as she winked at Steve.\n\n\"Okay! I don't think we can take one more double entendre,\" complained Gwen. \"Stephanie has apparently agreed to work for our company and keep things running smoothly. She'll be our new go-to girl. She'll handle just about anything that comes up.\"\n\n\"I can't believe you just said that!\" laughed Charlotte. \"I thought Billy was bad, but the females in this group are even worse. Look at poor Steve. He's almost blushing.\"\n\n\"Don't worry, Steve. I'll handle everything that comes up just fine!\" promised Stephanie.\n\n\"You realize that your father is sitting right here, don't you?\" asked Diane as she glanced at Will and smiled. \"I'd forgotten how much fun we have when we're together. I think Asgard will be a great place for this extended family to raise our kids and grandkids.\" \n\n\"Speaking of which, we're having Thanksgiving at our place since it's finished and we're moving in this week,\" announced Lisa. \"Everyone here is invited. Jordan and\n\nCharlie will be moving into their place pretty soon and Mom and Dad should be in before the end of the year.\"\n\n\"When Valhalla is finished, we'll have the big holidays and celebrations there,\" added Jordan. \"It's going to be so nice to have our own home with the neighbors all being family and friends. Steve had a great idea!\"\n\nThe next week was a busy one for everyone. Gwen returned to medical school, where they had to work very hard to maintain their position in the class. Ashley threw herself into her new job. She interviewed dozens of applicants as she formed her staff. Becky lived in Washington at Ashley's request and assisted her in her efforts. Kate was attending law school at Georgetown, while Naomi and Steve spent long days working for their respective senators.\n\nEvenings often found Steve having dinner with the four women, or any combination of thereof. Steve found himself looking forward to dining with his friends. It made the often tedious political maneuvering less boring. He enjoyed listening to the ladies describe their days and what sort of interesting things had occurred during the day.\n\nSteve was enjoying a meal with all four women one evening when they were approached by a man with a slight limp. Steve knew at a glance that the man was former military by the way he carried himself.",
        "\"Sir, I'm sorry to bother you at dinner, but I..\"\n\n\"Pete?\" cried Becky as she quickly rose from her chair and hugged the young man.\"You're getting around a lot better. Would you join us for dinner?\n\n\"This is my sister Ashley, then there's Lieutenant Naomi Wilson, and Gwen's sister, Kate Anderson. This is Pete. Gwen and I met him at Walter Reed last summer when Jason was here recovering from the wounds he received in Colombia. I'm sorry, Pete, but I never heard your last name.\"\n\n\"It's Walker, Ma'am. I don't want to intrude on you during dinner. I had hoped to make an appointment to speak with Lieutenant Hammer, if I could,\" finished the young soldier.\n\nSteve had been carefully observing the situation. It was obvious that the man limped, that he was a veteran and that Becky seemed to feel he was at least okay. \n\n\"Let's make that appointment for right now and right here,\" stated Steve as he shook the man's hand. \"Is it of a personal nature, or can we discuss the matter in front of the ladies?\"\n\n\"If you'll listen to me right now, I'd be fine with the ladies listening in,\" replied the man named Pete as he took the seat next to a smiling Becky and across from Steve. I'll get right to the point so I don't waste much of your time.\"\n\n\"We'll place your order first,\" insisted Becky as she summoned a waiter. \"Get this man the same order as Steve and a cold bottle of Bud and a frosty mug, please.\"\n\n\"Thanks, I wasn't expecting to eat with you folks. I know you're all busy and famous and must be bothered by people all of the time. You're being very good to me and I appreciate it,\" stated Pete.\n\n\"Maybe you haven't heard, but we treat our soldiers and veterans really well,\" interrupted Becky again. \"Steve, Gwen, and Jordan have set the tone for all of us. We're proud to be Americans and appreciate our freedom and those that fight to keep it.\"\n\n\"Becky, why don't you let Pete tell Steve what he wants to ask?\" prodded Ashley. \"I'm sure Pete knows all about Steve Hammer. Let's find out a little more about Pete Walker.\"\n\n\"I lost a foot in Iraq. I've been rehabbing for a few months and I'm pretty well done with it,\" began Pete. \"I've been looking for employment, but no one's been interested so far. Mom read on the internet that you're all staying at this hotel and she made me promise that I'd try to speak with you. She heard Becky and Ms. Anderson say that I should look them up if I needed a job. Mom thought you'd just up and hire me with no questions asked since it was Ms. Anderson that said it. I know it doesn't work that way, but I promised Mom and she'd never let me live it down if I didn't ask.\" \n\n\"You're right,\" responded Steve. \"It isn't quite that easy. What are you qualified to do? What's your education? What branch of the military were you in?\"\n\n\"I have a degree in computer science, so the Army made me an MP. I guess it was because I was good with weapons and managed to keep a cool head, at least back then. I'd be willing to do about anything to get started, and to live almost anywhere. I joined the army because I was having trouble paying for college. I finished my degree while I was in the service. Like I said, I lost a foot in Iraq, so I'm a little slow moving around, but I can walk all day and stand for hours without trouble.\"\n\n\"You said you were good with weapons. Can you handle a hand gun? Do you have a permit, or is there any reason you wouldn't be able to get one?\" asked Steve.\n\n\"I kept all of my paperwork up and have a concealed weapon permit in Vermont. I should be able to get one in any state. Are you thinking about some sort of guard job or something?\" asked Pete.\n\n\"Yeah, I am. I want to start hiring security for the girls, I mean the ladies here. Ashley and Gwen are at the top of my list of concerns. I'm not too worried about Gwen at school, but when she's in Washington and not with me, I need to be sure that she's safe. Ashley will be working with her and I'm a little worried for her safety here in D.C. Do you think you'd be interested in taking on a job like that?\" asked Steve.\n\n\"It makes me a little nervous, simply because of the responsibility, but I could do it. I wouldn't be as useful in hand-to-hand combat as I once was. I wrestled in high school and college and boxed a little when I joined the service,\" revealed Pete. \"If you're serious, I'd be very interested.\"\n\n\"You think I need a body guard?\" asked a surprised Ashley. \"I've never felt I was in danger here. Have you heard something?\"\n\n\"No, I haven't,\" admitted Steve. \"But I worry about it a little. You're alone a lot, you're beautiful, have an influential position with a high profile congresswoman, and have the cutest little butt around. I think it's best to be proactive. It would be security and not a 'body guard'. This isn't a movie.\n\n\"So, Pete, if the salary is right, will you be interested in the position?\" asked Steve. \"You can start when you get a permit to carry here in D.C. and we run a background check on you that's satisfactory. We'll put you on the payroll tomorrow. On Monday, if everything checks out, you'll need to pick a room on the fifteenth floor here. We have the entire floor reserved and there are quite a few rooms to pick from.\n\n\"One other thing. You'll be assigned to keep Ashley safe, but if any of these ladies has a problem and you're in the area, consider it your job to help them out. I'd be extremely upset if harm came to any of them. You can understand my feelings there, can't you?\"\n\n\"I sure can! These are the best looking women I've ever seen, and they've been really good to me. I won't let you, or them, down,\" promised Pete. \"Thanks for giving me the opportunity to prove myself. You're even giving me a place to live! Mom's not going to believe this!\"\n\n\"Are you kidding?\" laughed Becky. \"She knew Steve would give you a job when she heard Gwen suggest it months ago. Listen to your mother. She's a smart woman.\"\n\nNot wanting to overstay his welcome, Pete gave Ashley his contact information, thanked Steve and the ladies for the great time, and then headed out. Becky was smiling as she watched him leave.\n\n\"Did you really want security for Ashley, or were you just trying to help the guy out?\" asked Kate, who had been unusually quiet during the meal. \"Do you think we all need security? Are we in danger?\"\n\n\"I hired him because I think he'll do a good job. I'm worried about Ashley. I'll feel better if she has someone looking out for her. I also hired him because Becky vouched for him. I get the impression that she thinks he's a pretty good guy.\n\n\"I've already arranged for someone to keep an eye on you, Kate. He should be here by the weekend, and he's pretty good. You're a very wealthy woman now. You could be a target of all sorts of unsavory characters. I'd never forgive myself if something happened to you.\"\n\n\"You hired someone to watch over me without getting my opinion? That seems just a bit presumptuous to me. I should have been able to interview the guy, at the very least,\" insisted an annoyed Kate.\n\n\"Okay, do you want me to call Chip and tell him he's been fired already, or do I just tell him that you want to interview him?\" asked Steve with a straight face. \n\n\"Chip?\" repeated Kate excitedly. \"Chip's going to be my security? Why didn't you say so? I always feel really safe when he's around. That's a great idea!\"\n\n\"He was bitching and moaning about how he couldn't be an active SEAL any longer with his leg not being 100%, so I suggested that we could use him to keep an eye on you. He immediately started feeling way better about getting a discharge from the Navy and working in the private sector.\"\n\n\"Are you telling me that you think Kate will be safe around Chip?\" demanded Becky. \"You're asking the fox to watch the hen house.\"\n\n\"No, I'm asking the SEAL to watch the stone cold fox,\" responded Steve with a straight face.\n\n\"You do realize that if Gwen hadn't found you first, you'd be the one keeping me warm and safe at night, don't you?\" beamed Kate. \"You say the nicest things sometimes.\"\n\nThe next afternoon, Steve left Senator Chatham's office a little earlier than usual. He knew Ashley's schedule and expected to meet up with her and Becky well before they reached the hotel. He was surprised when an arm slipped inside his and a soft voice asked, \"Going my way, Sailor?\"\n\n\"Becky? What are you doing over this way? I thought I'd catch you and Ashley walking home from the office,\" offered Steve as he gave Becky a big smile.\n\n\"Ashley went over to the senate chambers to get some information from an aide of Senator Wolf's. I did a little shopping. I'm meeting her at the corner in a few minutes, unless she's late,\" replied Becky.\n\nAs Becky and Steve approached the corner, they saw Ashley hurrying along the sidewalk, less than thirty yards from them. Suddenly, a black SUV screeched to a stop in the street near Ashley and two men jumped out. They left the passenger doors open as they quickly grabbed Ashley and tried to drag her into the van! Ashley struggled until one of the men jabbed her in the neck with a needle of some kind. She went limp immediately and one of the men scooped her up while the other held the door open.\n\n\"Son of a bitch!\" screamed Becky as she launched herself forward to help her unconscious sister. Becky was quick, but Steve was already several steps in front of her. Before the man could place Ashley into the SUV, Steve grabbed the man's arm and spun him around. As the man turned, Steve's fist caught him flush on the chin. Steve deftly caught Ashley as the man crumbled to the sidewalk. \n\nThe problem with that was that with Ashley in his arms, Steve was unable to protect himself from the second man. He staggered back as he absorbed several quick shots to his face. While still holding Ashley, Steve swung around as fast as the situation would allow. His heel caught his assailant in the knee and that man went down.\n\nSteve quickly handed Ashley to Becky and turned to face the first man he had punched. The man was back on his feet and delivering blows to Steve's back and kidneys. Steve stepped back and turned to face the man, just as the man with the injured knee limped back into the fray.\n\nIt became immediately obvious to Steve that his opponents had some serious martial arts training. If they weren't stopped soon, they would batter him into unconsciousness. Even as he fought the two men, he processed the information and determined he was in a life or death conflict. Once he determined the severity of the situation, his right leg swung around and delivered a death dealing blow to the face of the attacker on his right. \n\nSteve was well aware of the outcome of the blow as he felt his foot strike the man. He felt the impact jar his leg and heard the snapping of ligaments and bone. That left one assailant and Steve turned to face him. He was taller than Steve and about the same weight. The two men exchanged blows with sickening force for a short time. Steve managed to stand the man up with a sharp left to the chin. Then he followed through with a right that he drove into the man's face. That man dropped to the sidewalk a couple feet from his fallen comrade.\n\nBecky had been clutching Ashley as she watched the battle in horror. She feared for Steve when the two men ganged up on him. Then she saw Steve drive his foot into the face of the one man, and heard bones snap as they man went over backwards, hit the sidewalk, and remained still.\n\nShe watched in awe as Steve and the second man exchanged tremendous blows so rapidly she couldn't follow their movements. Suddenly, Steve hit the man twice in the face and he toppled over and landed near his cohort. That was when she noticed the driver race around the front of the vehicle. He saw Ashley in Becky's arms and pointed his gun at her! Becky dropped down to the sidewalk with Ashley and covered her limp form with her own body as a loud blast roared in her ears."
    ],
    "authorname": "Harddaysknight",
    "tags": [
        "veterans day",
        "congresswoman",
        "write-ins",
        "testimony",
        "senate committee",
        "washington",
        "security"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/lady-in-red-pt-02-ch-12"
}
{
    "title": "The New Principal Ch. 17",
    "pages": [
        "After her outburst and the initial shock had worn off, Kimberly took charge. Not surprising, I suppose, but she took stock of the situation and knew the best way to handle things. \n\nI stood up next to Veronica, my mind still spinning, trying to figure out what had just happened. \n\nKimberly's orders came out quickly and efficiently.\n\nVeronica was to get to work immediately on the technical side of things. How did that article get posted if the site wasn't open for that yet? Was the site secure at all? \n\n\"If we need to shut down the whole campus network, can we do that?\"\n\n\"We can, but I don't think it will come to that. I was... a bit sloppy when I put together the newspaper site. I... won't be sloppy again.\"\n\nJennifer was to take me home and make sure I stayed there. \n\n\"No fooling around. someone's got'im in their sights and there's no tellin' who's watching.\"\n\nAnd me? My job was to go home and not fuck anyone. \n\n\"Do you think you can handle that, boss?\"\n\nI deserved that. But I would be lying if I felt in control of my libido right then. What was strange was that even though my headache and that weird pulse was totally gone, I could still feel the sexual energy in the air. It was like the humidity in a swamp, permeating everything, soaking into the skin. And I knew all the women in the room well enough that I could tell, even without using my trick, that they were feeling it too. \n\nKimberly was probably the best at locking down her emotions to get a job done, but her accent gave the lie to her fa\u00e7ade. She sounded much more the southern belle when she was aroused, and right then, while her words were professional and pointed, her voice was a thick sensual molasses.\n\nJennifer was a little less successful. When Kimberly told her to take me back to the Green House, she stepped over to me, and she reacted almost like Veronica did a few minutes previously. She didn't wobble on her legs, but she slowed down, and her eyelids fluttered low. She kept looking down at the angelic freshly fucked bookworm at our feet. She very nearly kneeled down to her with some measure of desire. Who knows what she was thinking, but she caught herself and stood straight again, leaning to one side on my desk for support. \n\nVeronica, well, like me, Veronica was still caught in the whirl of her lust. She was able to reply to Kimberly, and it was clear she understood, and that she would take action to put our system in good shape. But the whole time the conversation was going on, she was casually running her finger over her face and licking my cum off it. No one mentioned it, and I'm not even sure how conscious she was of the action, but it was having as much an effect on everyone in the room as the thick musk of sex was. \n\nAnne was still lying on the ground next to my desk, her face, hair and glasses still coated in my spunk. Anne's beatific serene smile and cute little snorting snores were feeding her desires and challenging her self-control. Her blouse was still peeled wide open, exposing her lovely breasts to the room, and more specifically, Jennifer's gaze. \n\nKimberly announced that she would be in charge of cleaning her up and getting her back to the dorm.\n\n\"Oh, one more thing you can do, Principal Lee. You need to write a response to the article. Even if we do get it taken down, too many people have read it already. We'll need to handle the backlash head-on.\" \n\nThen we all shuffled out of the room in various states of befuddlement and arousal.\n\nAfter that, I was basically under house arrest, only leaving the Green House to teach classes, and coming immediately back home afterword. It was the right thing to do, and I agreed to it, but it was still awful, and incredibly embarrassing. \n\nWe all agreed to meet again at the Green House on that upcoming Friday so we could go over everything. Also, I had thought about it for a long time, and decided it was well past time to come clean. I still didn't feel comfortable telling anyone about my little trick, and I didn't really know if they would even believe me, but these women had already proven their loyalty, and I really did need their help. More than that, I really liked that all and felt awful about keeping them in the dark.\n\nBecause I had seen their minds, I was convinced that I hadn't really taken advantage of any of them, but I still felt like I deserved the full pervert/creep treatment. I was fairly sure they wouldn't object to the sexual side of things, I knew their thoughts and inclinations well enough, but of course, they would be well within their rights to feel horribly wronged because I hadn't told them earlier.\n\nIn the end, I felt like I couldn't ask them to continue supporting me without at least trying to explain. It wouldn't be fair, and I needed them as partners. And I wanted them to be my friends. I couldn't keep this from my friends.\n\nWe all gathered together in my dining room and had a light dinner. I wasn't a good cook, but I could at least put together a decent lasagna, and they were all kind enough to clean their plates. \n\nOver dinner, we talked about general things, trying to keep things light and avoiding the sensitive topics we all knew were coming. \n\nAlthough my classes were still stilted and awkward, it seemed that the rest of the school was moving along very well. Each woman told me stories of how the entire mood of the school had picked up. \n\nThe clubs were all taking off and enthusiasm was evident all over campus. The Anime and Film Clubs were already planning a film festival for the beginning of the fall semester. By that time, we would have the theater rigged for film as well as stage performances. \n\nThe Swim Club had found an old record book and posted the times from back in the 1960s, and they set a goal of beating all of the old records. They scheduled a series of swim meets, and along with the other sports associations. They even asked the Dance Club members to serve as cheerleaders, and to my surprise, they agreed. I thought they would have considered that beneath them. By the fall, we would have Olympic sports, swim meets and even soccer and field hockey for regular competitions. \n\nSince our student body was relatively small, the teams were having a bit of trouble recruiting, but they were hopeful, and to be honest, I loved the idea of bringing people who didn't think of themselves as athletes into the competitions.\n\nWe hadn't made any public statement yet, but Kimberly had gotten permission from the Board of Directors to move ahead with the spa plans. Word of Mr. Takashima taking out permits from the town council had already become news. The contents of the permits leaked almost immediately, and the campus and town were buzzing about the possibilities. The women assured me that most of the talk was positive, especially with an eye toward an increase in tourism. \n\nIt was with a bit of genuine optimism that we poured some wine and headed into the library for a post-dinner conversation on the more delicate topics. \n\n\"Ok. Let's not avoid the difficulties. I have something I want to try to explain to everyone tonight, but first, I would like to hear what you have all been hearing and seeing about me and that article. I need to know how much in a hole I am.\"\n\nVeronica began. \"To start, the article was so badly written, and so many people had already read it that we decided to leave it online. It sends a signal that we aren't afraid of the absurdity of it all. Ben's response was posted Tuesday morning, and I think it's been fairly well received. It's certainly gotten a lot of hits, in any case. We still don't know who wrote it, but it has to be a friend of the old principal.\"\n\n\"I agree,\" Jennifer added in. \"There are people who still believe the article of course, but my read is that they weren't really fans of yours to begin with, or rather, they didn't want Principal Billanson removed, so they resent you by default. There aren't too many of them either, but they are worth keeping an eye on. Especially over in the sciences, there are a lot of people who were not pleased with the change of leadership, and I'm not sure how to bring them around.\"\n\n\"I think that the trouble that article stirred up has mostly died down, or at least it's not getting worse. Jennifer is right that the science department is really where most of the dissent is. We might try to address that when we hire for the vacant biology position.\" Kimberly was still a little warier. \"But I'm more concerned about... Well, I'm more concerned about Anne. And also... ah... the Xu sisters asked me to be the advisor for their club, and I think there is something going on there. I'm not sure what's going on, but...\"\n\nShe trailed off, but everyone could tell what she was talking about.\n\nI decided to start off with the woman who probably would understand most. \n\n\"That's what I wanted to talk to all of you about. Veronica, do you remember that dream you had. About me and Kimberly?\"\n\nVeronica actually blushed but was also a bit confused. \"Oh, god. I do... But, that's really weird. Until you mentioned it, I hadn't even thought about it since... that night. I had completely forgot about it, but now it's so clear in my mind. Well, most of it?\"\n\n\"The dream that Veronica had... Actually, we both had it. Now, we have all been... together, and to explain this, I'm going to have to be totally honest about everything. Is that okay with everyone?\"\n\n\"Sure.\" Jennifer leaned in. \"Kimberly and I have already talked through everything we know.\"\n\nShe looked at Kimberly who nodded in agreement.\n\nVeronica was less immediate. \"I... I've never been comfortable with sharing... that part of myself and my history.\" There was a significant pause. \"But I trust you all. And I have to admit, I'm really interested to hear the rest of the stories here. My imagination has been filling in the gaps of what I know, and that's probably not healthy.\"\n\nShe laughed a bit nervously.\n\n\"Okay.\" I took a deep breath. \"Veronica and I had the same dream. And that was before we met. It was an erotic dream involving Kimberly and me, all three of us together. It's impossible, but it's true. The reason I tell you about that dream is that there is a lot more that's not really easily explainable, and I wanted to try to show you that if this is just me losing my mind, then at least it's not only in my head.\"\n\n\"It's true. Our dreams were identical.\" Her voice was full of conviction. \"It was just from a different perspective. It was the most powerful erotic dream I have ever had. But why didn't I remember it?\"\n\n\"I don't know. I'm not sure why I can remember it now either. It seems to come and go in my memory. But now I need to lay the heavier thing on you all.\"\n\nI went through the details of how I got fired... or released from my previous job. I explained the \"pop\" in my mind that I felt that first time I met Tess, and what we were doing when it happened. They were all silent as I explained our experiment with darling little Frankie. \n\nGod, I know I was warned not to contact anyone from back then, but I wondered how they were doing. I hoped they were okay, but I had to admit that explaining my history there and remembering the details of voluptuous Tess and Frankie's incredible ass was having an effect on me.\n\nI went through my experiences since I arrived in Bright Hall. Everyone there knew pieces of the story, so they chipped in on things they knew, and I filled in the gaps. I went into detail about the Xu sisters and the way they ambushed me in the theater and their plans for the Dionysian Club. I even took them down to see the creepy camera cellar. Fortunately, Jennifer had already told Kimberly about the camera in her room, and Veronica eagerly described that night we watched them. Kimberly had been angry when Jennifer told her, but more about the man she assumed had planted it than at me, thank goodness.\n\nFinally, back in our comfortable chairs in the library, Jennifer pushed back.\n\n\"I'll admit that you have been getting more than your share here in Bright Hall. And I can't speak to the women at your previous school, but I will say that the women in this room have always been a bit... let's say frisky. You've certainly helped some of us discover more about our own desires that maybe we weren't comfortable showing in the past. And not to blow smoke up your ass, but I've always been more into women than men, but even for me, the simple fact is that you're really cute. I hate to disillusion you, but there isn't anything magical about it. Your trick is just that you've run into a few women who are into you and aren't hung up about sharing.\"\n\nAs I expected though, it made sense immediately to Veronica. \"No, Jennifer, I think it has to be true. I'm not... well, open about these things. I mean I never was before Ben. Seriously, I literally pounced on him when he came to visit me. The first day I meet the man, and I'm all over him.\" She laughed a bit nervously at the memory.\n\n\"Maybe you were just primed for it? You said you hadn't been with anyone in a long time.\"\n\nKimberly seemed a bit on the fence. \"But what about the twins?\"\n\n\"You can't tell me you didn't already know those girls were not normal? I mean, I didn't think they were sex kittens, but I knew they weren't like everyone else at school. In retrospect, it's not that surprising, is it?\"\n\nI turned to Jennifer. \"What about the run you had in the forest. The first time I met you. Do you remember that?\"\n\nJennifer looked blank for a moment then blushed.\n\n\"Right? Have you ever masturbated like that in the open? In the forest like that, where anyone could run into you? God, you were so hot. I remember when I shook your hand, your hand was still damp.\"\n\nJennifer's eyes widened as she considered the memory. Kimberly looked over at her with a smile. That was apparently not a story she has shared with her.\n\nAfter thinking for a bit, Kimberly was starting to come around. \"It's impossible, but it really is the only thing that explains things. I mean, think about Anne. She's a quiet mousey little bookworm, and I mean that in the best way, I'm not judging. She was devastated about the article on the website, came to apologize, and the next thing you know...\"\n\nVeronica broke in, speaking in a monotone, almost lost in the memory. \"And before you two got there, when I came into that room, I was so angry, but just walking toward them I felt the anger sap away. And before I knew it, I was chewing on her tit and holding her while she was cumming like a freight train. You can't tell me you didn't feel it when you came in, didn't you? This bozo's a great guy,\" She aimed a thumb at me, \"but nobody's that hot.\"\n\n\"Okay. I don't have any better answer, but I still just don't see it. Ben, walk us through it. How does it work?\"\n\n\"It's a little different for each woman.\" I stumbled. I had been thinking how to explain the trick, but Tess never really explained in enough detail, and I never found a good way that didn't make me sound like an idiot. \"I don't think it works for guys, but that may just be because I'm not into guys. It's connected with lust mainly. I look into their eyes and if they are open to me, I just kind of flow in. It's like I can see the way their mind works, but again, it's mostly just things related to sex and lust. I've tried to see other parts of people and almost never can, unless it's related to sex somehow. I can get images of what they're turned on by, and I can see how turned on they are. And if they are aroused by me, then I can kind of amp them up, make them hotter, make them feel the lust that I feel. God, it sounds so stupid when I say it all out loud.\"\n\n\"Wait. What do you mean 'if they are open to me?'\"\n\n\"Well, if the women doesn't trust me at least a little bit, or if she's not into me, I can't see much, and I can't do anything. The day that article came out, I tried to see into the mind of the cashier at the caf\u00e9, and I couldn't see anything... Well, I could tell that she thought I was a pervert, but that's it. And Kimberly, before we really started to understand each other, she kicked me out of her mind. And now it sounds stupid and creepy. I swear I'm not looking in your minds all the time.\"\n\n\"So if I don't let you in, you can't see in my mind?\"\n\n\"Yeah, I think so. I haven't tested it, but...\"\n\n\"Okay, try. Give it your best shot with your trick.\" Jennifer was firm, but didn't seem angry.\n\nI looked around to the other women, but they didn't say anything. I shrugged.\n\n\"Okay. Just look into my eyes.\"\n\nI walked over to her and knelt down next to her chair. I looked into her eyes, and it was almost eerie. I could feel her presence. I could feel that it was Jennifer, someone I knew, but I couldn't see anything of her mind. It was like her entire mind was a black box.\n\n\"Wow. I've never felt so shut down. I know it's you, but I can't see anything.\"\n\n\"That doesn't tell us anything. Here. Okay, try again.\"\n\nI looked back into her eyes. She was still resisting, but as I focused, was able to slip partially into her mind. I was surprised to see that she was getting aroused, not much, but it seemed that she was thinking of something that she was enjoying quite a bit. I wasn't getting a clear image, but then I did see something...\n\nWithout breaking contact, I said, \"Hey, Veronica, come over here, and stand in front of Jennifer.\n\nI felt Jennifer's mind shift and become slightly clearer, like a lens changing at the optometrist, everything was still very vague, but less than it had been.\n\nSensing that Veronica was standing next to me, I took the next step. \n\n\"Veronica, could you turn around and face away from Jennifer, please?\"\n\nSuddenly, Jennifer's mind cleared to me. I felt her arousal rise as her eyes slid away from me and locked on to Veronica's ass. So that was what she had been thinking of. I could suddenly see that she was using this as a test. She had been blocking me with all her focus, then opened herself up a little bit by focusing on Veronica's backside. When I found her arousal, the rest of her mind opened up to me almost completely.\n\nVeronica was figuring it out too. Now facing away from Jennifer, she teased, \"What? Is Jennifer enjoying looking at my little ass? I never thought you would be interested in my rail-thin nothing when you have this available.\"\n\nWith that, Veronica pulled Kimberly out of her chair and spun her around to aim her ass into Jennifer's field of vision. Kimberly giggled and even shook her ass a little, getting into the game.\n\nWith that, I saw Jennifer's mind bloom. It seemed that she let go of her last efforts to restrict my reading of her mind. Everything spread out in vivid colors, and the most elaborate, colorful area was the one I could see best: lust. It was spreading over what I assumed was her more rational consciousness, the part of her brain that had set up this little experiment. I could even see her doubt start to crumble away, not entirely, but significantly.\n\nI saw the lust moving faster, growing to take over...\n\nAnd I broke of contact and looked away.\n\nEveryone in the room blew out a long breath. Jennifer even moaned slightly.\n\n\"Holy fuck. It's real.\" She stammered out.\n\nI sat back on the floor cross-legged in front of Jennifer, and the women all stayed next to her in her chair.\n\nJennifer was silent, considering the implications of my trick. \n\nVeronica wasn't done with her little bout of teasing. She swatted Kimberly's butt right in front of Jennifer, then waggled her own.\n\n\"Kimberly's clearly got the world class ass here, but you were thinking of mine? That's sweet of you Jennifer. Hey Ben, what was she thinking about? Can you tell? Can you see that specifically?\"\n\nKimberly looked at me expectantly, with more than a bit of excitement. \n\nI looked up at Jennifer questioningly.\n\n\"Can you? Can you see what I was thinking about?\"",
        "\"I can try. Is that okay?\"\n\n\"Yeah... actually... yeah.\"\n\nI looked back up at here, and her mind opened up like before, brilliant technicolor. And her lust hadn't abated at all. \n\nI reported back to everyone what I saw.\n\n\"Her mind is gorgeous... All colors and light. But her lust is taking over. I'm trying to find what... Oh, here are some images... She's thinking of Veronica... wearing her naughty librarian outfit... with some adjustments... a tight corset-like thing, and garters... black, and very tight... I can see her gaze rising... her chest is uncovered... it's hazy... maybe she's never seen you naked?\"\n\nI could feel the lust in the room rising in an echo to Jennifer's excitement. I snuck a glance at the other two women and saw them leaning closer, breath starting to come heavily. \n\nI decided to try and help her out. \"Veronica, why don't you help Jennifer's imagination.\"\n\nI'm not sure that Veronica understood what I meant, but Jennifer did. Her entire mind sparkled in excitement.\n\n\"No! Make Kimberly do it.\" Jennifer smiled deviously. She looked directly at Kimberly. \"Kimmytoy. I need you to take Veronica's blouse off.\"\n\nKimberly hesitated, but only a split second. Hearing Jennifer use her pet name was always a trigger that caused her arousal to spike. \n\nI watched the scene through Jennifer's eyes and through the clouds of lust that were tinting everything she saw.\n\nAfter giving her order, she looked back to Veronica to make sure she was okay with this next step. Veronica's smile widened and radiated a playful hunger. I could feel that just me, Jennifer was transfixed by Veronica's incredible dark skin, her full lips and statuesque bone structure. Her heavy but sculped eyebrow raised, but she kept her gaze on Jennifer as Kimberly started to obey.\n\n\"Slowly, Kimmytoy, slowly.\"\n\nKimberly wasn't the seductress that the other women were, but the room was so charged with energy that she didn't have to do much to ramp up the excitement. \n\nShe moved close to Veronica, and ran her fingers over Veronica's body, lightly tracing down her arms and across her shoulders. Jennifer was fixated on Veronica's throat. She looked down slowly, from her long elegant neck to her breasts. Jennifer felt her own nipples hardening as she watched Kimberly's fingers, then fingernails, raking gently over each of Veronica's peaks.\n\nVeronica was trying to keep still, to stand and allow herself to serve as a statue, a focal point for Jennifer's desire, but Kimberly was also enjoying her body and the act of obeying Jennifer. And of course, I was responding not only to the physical contact, but feeding off Jennifer's arousal as well. I wasn't pushing anyone's drive, but I didn't need to at all. \n\nKimberly finally ran her fingers in between the buttons on Veronica's blouse. She popped open one button and moved her hand under the thin fabric. She stopped as if surprised, but Jennifer knew why.\n\n\"Is she wearing a bra, Kimberly?\"\n\n\"No ma'am.\"\n\n\"How do her nipples feel?\"\n\nKimberly started moving her hands again.\n\n\"They're tiny, and super hard. They feel so good.\"\n\nBy this time Veronica was reaching the end of her ability to stand still.\n\n\"Are you sure you want to see my little ordinary boobs? I don't even need to wear a bra most of the time. What good are these? I mean, just look at what Kimberly has. Her boobs are magical, so big but perfectly perky, and those big suckable nipples. I've only seen them on camera, but god they are incredible.\"\n\nI felt Jennifer's reaction, and her gaze snapped between the two women. Kimberly even turned slightly more toward Jennifer while keeping that hand exploring under Veronica's blouse. Then as she popped open another button closer to Veronica's neck, and the blouse almost flipped open, leaving a V of smooth dark skin nearly down to her belly button.\n\nJennifer gasped lightly. \"You are a living sex goddess, Veronica, and don't let anyone tell you otherwise. You know what you do to people. You know how to show off that insane body of yours, and you love it. I've seen you weave your magic, pulling those poor little students into your thrall. They love their teacher, but you have to know that they lust after their lithe librarian goddess. You can't expect others to be immune to your incredible body, can you?\"\n\nJennifer was really getting into the mood as each new fraction of Veronica's skin was revealed. And Veronica finally couldn't hold back and started to run her hands up Kimberly's side, aiming toward the buttons on her clothing.\n\n\"Oh, and now you're going to show me my little Kimmytoy? Do you want to borrow her? I've given her to Ben, and oh my, did she really enjoy that. Well, you're right, she's got very dangerous curves. Do you want to feel those boobs? God, they feel so good in your hands, you just can't stop squeezing them. And her nipples are just like little tripwires. She cums so hard. It gets me so worked up thinking about it. Her cute innocent face transformed in sexual need. The Disney princess calling out, begging to have her clit sucked harder and harder...\"\n\nNow all three women were nearly panting, and the lust I was taking in through Jennifer's gaze had me rock hard. Kimberly had Veronica's blouse totally unbuttoned and untucked, but it still hung loosely covering her breasts. Veronica had worked quickly, stripping Kimberly down to skirt and a cute but functional white bra.\n\nIt was clear that this teasing wasn't going to last much longer.\n\n\"Okay, Kimberly. I need to see her. Show me everything. Give Veronica to me.\"\n\nKimberly looked at Veronica. Getting a nod, she pulled the blouse off her shoulders, and then down her arms. She tried to go slowly, but couldn't help but speed up halfway through. Then she dropped to her knees and slid her slacks down those long, toned legs, leaving her only in her panties. Kimberly looked up dutifully to Veronica for permission. Another nod, and Kimberly delicately reached up and slid her fingers under the waistband of the frilly black undergarment. Then with a shuddering sigh, she lightly pulled them down.\n\nVeronica had to reach out and put her hand on Kimberly's head. Her own desire was taking over as well.\n\n\"Ok Jennifer, your Kimberly has gotten my clothes off. What now?\"\n\n\"I want to see you cum. I want to see that stunning body of yours wracked with pleasure. I want to hear you crying out. I want to see you writhing like an animal in heat. I want to smell your desire heavy in the air, filling the room.\"\n\nWith each demand, I could feel Jennifer's lust ratchet up, and through her eyes, I could see Veronica slip deeper and deeper into her lust.\n\n\"Ben?\" Her voice was now gravely with expectation and desire. \"Would you be a darling and fuck Veronica silly?\"\n\nI finally snapped out of Jennifer's mind and felt myself dropped back into the sauna of thick craving that hung heavy in the room. \n\n\"Ben?\" Veronica stuttered out, her voice dripping with need.\n\n\"Let's go to the bedroom.\"\n\nVeronica grabbed Kimberly by the hand and rushed from the room. I stood and lent my hand to Jennifer as she rose from her chair.\n\n\"It really is real, isn't it?\"\n\nWithout a word, I looked into her eyes and pushed hard on her lust. Her eyes lost focus for a moment and she nearly fell over, clinging to my side to keep herself standing. \n\nI leaned over and kissed her forehead. \n\n\"It's real. Is that okay?\"\n\n\"It's... wonderful... I think? I'm going to need to think about this more carefully later, but right now? I'm going to fuck you tonight too, so keep your energy up, okay?\"\n\nI smiled and walked with her to the bedroom. \n\nWhen we got there, we found Kimberly and Veronica already undressed and fondling each other on the bed.\n\nVeronica looked up at us. \n\n\"You are so right. These tits are, like, unreal. I could just play with these all night.\"\n\nKimberly giggled, then moaned as Veronica found out how sensitive her nipples were. \n\nJennifer and I both slowly stood next to the bed, pulling off clothes from each other but mainly we focused on enjoying the visuals and the cute noises that Veronica was pulling out of Kimberly.\n\nKimberly was on her back, exposing her entire glorious body to us all. She had pulled her hair, or rather most of it, to fall sprayed out to one side, but it still framed the alabaster face perfectly. Her eyes seemed too large to be natural, and it gave her that cartoon-cute look, even when, like then, they were smoky with desire. Her breasts, one covered by Veronica's questing hand stood up proudly, defying gravity. Further below, a thick thatch of bright red pubic hair hid the lovely folds of her pussy.\n\nWith Veronica's attention added to our hungry gazes, Kimberly was the focus of all three of us.\n\nHer eyes took all of us in, then she spoke, quietly.\n\n\"Y'all... I just want to say that... I mean... I don't know what's going on here. I don't know what to think about Be... Principal's Lee's trick, or any of that. Maybe we'll figure that out later. But I just wanted to say, I've never been as happy as I have been since we all started getting together. I'm just... I feel so comfortable with you all. Even Ms Rai, we haven't really... I'm sorry. I'm just so happy that I have you all here with me...\"\n\nShe started to tear up, but Veronica was close enough to dip closer and kiss her tears away.\n\n\"Shhh... We'll take care of you.\" Veronica kept kissing, gradually with more heat than comfort. \"It is amazing though. I never would have thought I could become so comfortable with anyone, much less three anyones. And trust me, Kimberly, you and I are going to have some time together tonight.\"\n\nJennifer and I had gotten rid of our burden of clothes, and were holding each other, caressing each other, enjoying each other's body while happily distracted by the scene in front of us, tender, yet hot as hell.\n\nJennifer tried to get back into her role as director.\n\n\"Now, it's no fair that you two have seen Kimberly and I playing together, but we haven't seen you two. Kimmytoy, come over here to this side of the bed and let's see if you've learned how to get me going. Let's watch Ben and Veronica fuck.\"\n\nKimberly scooted over, and Jennifer slid onto the bed and spooned in front of her. She grabbed onto Kimberly's hand and guided it over her body and down between her legs. A soft moan let us all know that Kimberly did remember some of her teacher's lessons.\n\n\"I like that, Jennifer. Ben and I didn't actually get to play much last time. Anne got most of his attention.\"\n\nShe took Kimberly's old position, flat on her back, arms open welcoming me to join her. The contrast was stark. Her dark skin couldn't be further from Kimberly's pale white. Her straight black shoulder-length hair spread over the pillow, but nothing like Kimberly's kinky curly mass took over the entire top of the bed. Her facial expression, teasing and arch, with an easy smile that promised trouble, her entire form, almost too thin, small breasts, long, elegant, both women as sexy as possible, but on opposite ends of the scale. What a wonderful contrast to enjoy!\n\nI started at the foot of the bed and crawled up her body, slowly deliberately. I kissed and licked her on the way up: ankles, calves, a long lick up her inner thigh, one delicate kiss right between her carefully groomed triangle and the flowering layers of her pussy, another on her belly button, then a lick from the bottom of her right breast all the way up to the tiny, taught nearly-black nipple. Finally, I took my time on her neck, kissing and nibbling. She arched her head back to give me all the room to work I could have asked for.\n\nAfter all that, I came up to her face. She was breathing heavily. Her mouth was open, and her lips glistened where she had been clearly licking them.\n\n\"Hi there, Veronica.\"\n\n\"Hi there, Ben.\"\n\n\"You are smoking hot, you know that?\"\n\n\"Yeah. I am pretty incredible, aren't I? Someone clearly seems into me, anyway. Are you going to zap me with your laser eyes? Make me putty in your hands?\"\n\n\"No. We're just going to fuck each other naturally. I want to take you nice and slow. How's that sound?\"\n\n\"Oh, I don't know about that.\" She started raking her fingernails across my back. \"You might not be man enough without your little games... Luckily, there are two gorgeous hot ladies over here on the other side of the bed, just in case you can't handle me.\" \n\nHer smile was ravenous. I didn't need the trick to tell how excited she was.\n\n\"Little games? Little?\"\n\nI knelt down, brining my cock into contact with her upper thigh. I rubbed myself closer to her heat.\n\nShe wrapped her arms around my neck and drew me down into a kiss. I collapsed on top of her, feeling the hard points of her nipples dig into my chest. \n\nWhile her hands rubbed up and down my back, grabbing onto my ass and pulling me closer to her, I reached up to run my hands through her hair. She groaned in pleasure into my mouth.\n\n\"Ok there, lovebirds.\" Jennifer's voice, much huskier than before, interrupted us. \"If he's going to do this without his trick, he'll need to make sure she's ready, right, Kimberly?\"\n\n\"Yes, ma'am.\"\n\n\"So, what should he do then?\"\n\n\"Um... He should... go down on her?\"\n\n\"Very good, Kimmm... guh... Kimberly.\" I snuck a quick glance to see that Jennifer's face was totally flushed. Kimberly's lessons had apparently been going very well, indeed.\n\n\"Oh, I'm plenty ready.\" Veronica panted out as I started sliding back down her body, keeping as much contact as I could as I repositioned myself. \"But, I suppose if this is all for demonstration purposes, I could... Ooohh... I could made do...\"\n\n\"How ready is she, Ben?\"\n\nI was now on my chest between Veronica's legs. I lifted them up and to the sides, then over my shoulders so we could both be comfortable. \n\n\"Well, I'll need to investigate. She's got the most incredible labia, Jennifer. You can probably see them from over there. They're thick and gorgeous, and right now they're covered in something... I think I'll have to check.\"\n\nI leaned in and took an agonizingly slow lick over each side, then I sucked her lips into my mouth, running my tongue over them and pulling back gently. I heard Veronica make a high-pitched grunt, and something that sounded like \"Yes.\"\n\n\"Well, Jennifer, I'm pretty sure her lips were just covered in her juices. I just sucked them clean, but it looks like they're getting coated again. I would bet she's more than ready, but I think we should be sure. What do you suggest?\"\n\nKimberly was getting nearly out of control, projecting her desire onto Veronica. \n\n\"Suck her clit!\"\n\n\"Now, now, Kimmeytoy. You know sometimes it's even better when you tease. What else could he do?\"\n\n\"Hmmm... Suck my clit...\" Kimberly moaned. She was rubbing her hips into Jennifer's ass, trying to get any kind of contact to alleviate her need, but her hands were still working on Jennifer's pussy and her breasts.\n\n\"Perhaps Kimberly is a bit preoc... preoccupied. I am... hnnng... a bit, too...\" She was conflicted, trying to twist her head back to kiss Kimberly, but not wanted to lose sight of us.\n\nI gave up on the pretense and went back to work. I slid a finger into Veronica, and she gave a muffled cry. She had pulled a pillow over her face so she could let loose. \n\nI kept my mouth busy on her lips while I pushed my finger deeper, then two fingers, searching for that magical rough patch of skin. When I found it and started massaging, Veronica's long legs started beating a tattoo on my back, then they crossed behind my shoulders and pulled my face closer into her.\n\nShe was shuddering with the start of a powerful orgasm, and she knocked me free a bit. My fingers slid out of her, dripping with her excitement. But her legs pushed my mouth into perfect position to pay proper attention to her clit. \n\nI flicked my tongue around the nub and immediately her cries changed pitch. She had been cumming already, but this seemed to change everything. She calmed down for a moment, then started twitching again.\n\nI could hear her even though the pillow.\n\n\"OHGOD! Yesyesyesyes... guh, guh, ohfuck... Don't stop... don't you dare... dare fucking stop...\"\n\nI wouldn't dream of it. Her hips were rolling in a circle as she tried to get the perfect contact, and I was trying to keep on top of her, to keep my lips and tongue working on as much of her as I could.\n\nI moved my hands from around her thighs and tried to reach up to pinch a nipple, but I found someone else's hands there. Veronica's? Jennifer's? I couldn't look up to tell.\n\n\"Ohben... Ben... I'm... getting there again... keep... ung... ung... unnng... Ohyeahohyeahohyeah...\" I sensed the pillow being thrown across the room and her voice came out loud and clear. \"Fuck...fuck... fuckfuckFUCK!\"\n\nHer entire body locked into an orgasmic spasm. Her legs snapped down hard on my head, and she twisted to her side, pulling me over in an awkward jerk. As I extracted myself from her legs, she curled herself into a fetal ball, still moaning in a jerky ragged voice. \n\nImmediately, Kimberly disentangled herself from Jennifer and crawled over to hold Veronica as she worked through the waves of bliss that coursed through her body.\n\n\"Oh, Ms Rai, you are so hot. You are so beautiful when you cum. You are just glowing...\"\n\nShe continued with her comforting in mumbled whispers as she snuggled in closer to the glistening woman.\n\nI was watching the two of them when Jennifer pounced onto me from the side. She kissed me all over my face, trying to get a taste of Veronica's love. I kissed her back, but she bowled me over onto my side.\n\n\"Ohh... She is tasty, isn't she?\" Jennifer giggled. \"I'm sorry, I just couldn't help it.\"\n\nHer hand slipped down to my cock.\n\n\"Hmm... It would be a pity if you knocked Veronica out of the game and I had to take care of this first.\" She smiled wide and looked at the tangled mass of Veronica, with Kimberly hugging her close.\n\nThere was a small but insistent voice that came form under Kimberly and the layers of her hair.\n\n\"I'm... okay... That was nothing... Just an itty bitty little mind-blowing... ummm... Kimberly, stop that.\" Both women giggled happily.\n\nKimberly moved away slightly so Veronica could get free.\n\n\"That... That was lovely, but I'm ready for round two. I need that big fat cock. But I want to thank... What do you call her? Your little Kimmytoy?\" There was a squeak from under the curtain of red hair. Let me try out my skills like this.\"\n\nShe scooted down the bed and rolled over onto her stomach. She moved over to Kimberly and opened up her legs.\n\n\"Ok, Ben, why don't we try this?\"\n\nShe arched her back and got up on her knees, presenting her butt to me and Jennifer.\n\nI was mesmerized by the view and didn't see any other movement but there was another sudden soft cry from further up the bed.\n\n\"Oh, Ms Rai... that's sooo good...\"\n\nJennifer slapped me on the ass.\n\n\"Fine, go ahead and fuck her. Can't blame a girl for trying, can you? I'm going to get up there and help our librarian rock Kimmytoy's world.\"\n\nAnd with that she moved up to whisper what I can only assume was a stream of very dirty things into Kimberly's ear.\n\nVeronica wiggled her ass at me.\n\n\"Come on, boy, don't you know what to do with that thing? Get at it.\" \n\nKimberly moaned in frustration at Veronica's sudden lack of attention, but her tone changed when Veronica laughed and went back to work. \n\nI crawled up and grabbed onto Veronica's ass. For someone so thin, she still had curves, and there was just a perfect amount of ass to hold onto as I positioned myself.\n\nI jumped slightly as her hand came back from under her legs and grabbed ahold of my cock. She placed me right at the entrance of her pussy, and I could feel the wet heat of her.\n\nI slid back and forth coating my cock with her juices three or four thrusts, but she was having none of that. She angled her hips and pushed me up into her. My tip slipped in smoothly and I heard my own groan of pleasure echo back to me from in front of me, muffled through Kimberly's muff.",
        "I tried to push slowly into her, letting her take the pace, but like before, she pushed back into me with speed and force. She pushed back hard, taking her mouth off of Kimberly's pussy and moaning loud.\n\n\"AAHHhh... Oh yeah... God you're so thick... oh god... I keep ramming back and there's still more of you...\"\n\nJennifer piped up. \"Hey Kimmytoy, why don't you spin around so you can see that huge dick pounding into our skinny librarian here?\"\n\n\"Cool!\" Kimberly spun around quickly, knotting up the sheets under her. \"Oh my god! I can't believe I took that thing! And her pussy is so pretty. You were right, her lips are beautiful. Ms Rai, you're so thin, how can you handle it?\"\n\n\"Oh, Kimberly... I... ugn... can take it just... fine... Oh, god... Hold tight there.\"\n\nShe had taken just about as much of me as she could, so I started pulling back and then pushing back into her. We both grunted with each thrust, sliding in and out finding our rhythm. \n\nWith Kimberly under her now, Veronica let herself down to lie on top of her, then wiggled over to get in between Kimberly's legs.\n\n\"OH!! Ms Rai... Oh, god... I thought... Mmm... ohyes...\"\n\nAs the three of us devolved into our animal lusts, I looked briefly to the side. There was Jennifer, now leaning up against the headboard, her legs wide open. She had one hand slowly worrying her nipple, and the other working between her legs. I knew from previous experience that she was one of those magical women with a very low threshold for orgasm, and a high capacity for many orgasms. In fact, she seemed to be rocking through a nice mini orgasm right at that moment. \n\nI couldn't help but pick up the pace, moving from gentle sliding to more aggressive thrusts. The chorus of erotic moans coming from Veronica and from Kimberly grew and took on a sharper tone. I had been on edge all night and now I was going to get mine. \n\nI kept looking back to Jennifer, and she was looking at me with a big smile. I could see an idea come to her and her smile turned playful.\n\n\"Alright... hmmm... alright there, Ben... You said you could feel the... ahhhnnngg... said you could feel the lust of a room sometimes, right? Can you... ugnn... can you feel us? Can you feel all of us? Veronica's tight... cunt... Hmm... Kimberly... ah... can't you smell her? She's so hot for you... And me... I'm... annng... I'm fucking... whew... I'm fucking cumming right in front of you... can you... aghnn... can you feel us?\"\n\nI could. I had tried specifically not use my trick when I was going down on Veronica, but now, there was lust everywhere, it was impossible not to notice. I could smell all of the women in fact. Obviously, I could feel the snug tightness of Veronica's pussy as we slid back and forth, her desire dripping off of her onto Kimberly's face. Kimberly even took a few tentative licks of Veronica's pussy and my cock as it glided into her. I could still taste Veronica on my tongue, and even Jennifer's kiss seemed to have left an impression of lust on my face and lips. \n\nAs I turned my attention to the room in general, I saw beyond the physical manifestations of sex. I felt the drive of the room. I looked into Jennifer's eyes, and her lust was overwhelming. She was a visual woman, and she had a live sex show right in front of her. She was skipping from orgasm to orgasm like a smooth stone on a calm lake.\n\nKimberly was having the time of her life. This more fun than she could have possibly hoped for. Veronica's tongue was hitting her so-very-sensitive pussy almost randomly. She braced herself with each of my thrusts, expecting and hoping that it would drive Veronica's mouth onto her sex. She had been right on the edge of orgasm for what seemed like forever now, but she was focused on playing, and taking in the whole environment of fun. When Veronica had lowered herself onto her it was like a hot sexy hug and she nearly laughed with joy. And now she was doing everything she could to sneak in and lick whatever piece of us she could get her tongue on. \n\nVeronica was trying hard to focus on giving Kimberly a good licking, keeping at least her tongue on whatever part of her pussy she could reach. But she couldn't help matching my thrusts, harder and faster. She was losing control, moaning and even shouting out as I pushed into her. We had fucked a few times now, but she was still amazed at how new it always felt, spreading her open and pushing so deep. The rhythm was getting hypnotic and she wasn't able to keep licking Kimberly like she wanted to.\n\nI could feel and understand them all, and now I had to see if I could push out my lust to everyone, like I had done before. I didn't feel that weird hum, or the pulse or anything else, but I had the feeling I didn't need that.\n\nI pushed.\n\nThe reaction was almost immediate. \n\nKimberly's hands shot out and wrapped around Veronica as Veronica slammed herself back into me. Jennifer cried out suddenly and then continued in a choppy wail.\n\nVeronica clenched down tight around me and threw her head back, joining with Jennifer's passionate howl, and from under her, I heard Kimberly cry out briefly, then she latched right on to where I was jack-hammering into Veronica.\n\n\"Ohfuck... Veronica... You are so tight... I can't... Ohgod... fuck... fuck... fuck...\" \n\nI lost all control and gave over to my basest needs, ramming myself back into her. It seemed like Kimberly was holding her tight so she couldn't fall over. Both women were deep into their own orgasms, but they held on enough to make sure I could hit mine.\n\n\"Dammit... I gonna... ughhh... ughnn... OHFUCK!\" \n\nMy legs started to lock up as I thrust again and again. I felt the cum rising in me and I heard my voice shout out an animal roar as I started pumping my cum into Veronica, pushing her harder onto Kimberly.\n\nIt was almost like time slowed down then stopped. I clamped my eyes shut, but I could still sense everyone as if it were a photograph, but with bodies and emotions, each woman trapped in a moment of time with a freeze-frame of their minds.\n\nJennifer was pinching her right nipple hard, her other hand a frozen blur on her clit, and her head was thrown back in ecstasy as she pushed though the last of uncountable orgasms of the night.\n\nKimberly was cumming in a nice lovely comforting way, the weight of Veronica a sensual and soothing sisterly pressure. She was in the middle of laughing with pure joy as a fountain of sexual fluids and sweat showered down onto her face.\n\nVeronica's mind was barely functioning. She was bestial in her lust, like she was in heat. Her body still felt the echo of her first orgasm of the night, but she couldn't even tell where this last orgasm had started. She felt glorious flesh all around her, and in her, but she barely even felt in control of her body anymore. She was a vessel of sex, able to enjoy the rapturous high of her animal sensuality, but nothing else.\n\nThat image, the positions of all the woman and their sensations, burned into my conciousness.\n\nI recall falling over, but only vaguely. I was in a tangle of gorgeous bodies, and my cock must have popped out of Veronica because I felt myself still cumming, now over someone's leg and then on my chest.\n\nBarely conscious, I heard a voice, she was herself drowsy beyond help. She said, \"I told you... I wanna fuck him...\"\n\nThen I felt a powerful sense of contentment and happiness. There was a shifting of body parts, and I think I heard someone giggle lightly, then I slipped into unconsciousness."
    ],
    "authorname": "shudai",
    "tags": [
        "fffm",
        "group sex",
        "doggy style",
        "cunnilingus",
        "masturbation",
        "corruption",
        "ffm",
        "ff",
        "mind control"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/the-new-principal-ch-17"
}
{
    "title": "The Sultanah Ch. 10",
    "pages": [
        "Dear Reader, thank you so much for reading this story. It has taken nearly a year of my writing life to get the whole thing finished. This is Chapter 10 of 14 chapters and the total is over 250,000 words. It is my Dirk Diggler/Jack Horner act of hubris: my attempt to write an erotic adventure story that pulls you in with a story you want to read, even when there isn't any sex going on (though there is a lot of sex. Crazy, weird, fun sex). It is the most ambitious piece of erotic fiction I have ever attempted. So I hope you enjoy it.\n\nWith that said, this book is not for everyone. It will be too long for many people (no shame in that, it is a big time investment). Some of the sex scenes are intense and include themes like hermaphroditism, non-consensual activity, incest, etc. For some people, that will likely be the appeal. In fact, while this story is definitely not for everyone, I think for a select group of people this story will essentially have everything you could ever ask for. So if that is you, congratulations, you found that thing you have been searching for. You can skip ahead to the sex and I won't be offended, but I think this story is more than the sum of its parts. If you read this whole story, you will not be disappointed. \n\nIn Chapter 1, our main character, Princess Varis, finds that her father has died and that, by virtue of the fact that she is a hermaphrodite and can father a child, she is now the Sultanah. In Chapter 2, Varis unearthed a conspiracy to destroy her Empire led by Rahip, the Cardinal of the \"New Religion\" and later she received her coronation. In Chapter 3, Varis humiliated the New Religion and raised the morale of her besieged people. In Chapter 4, Varis lifted the siege through a daring midnight raid. In Chapter 5, Varis survived an assassination attempt and visited her harem. In Chapter 6, Varis faced a challenge to her authority and seduced a noblewoman to maintain it. In Chapter 7, Varis defeats the raiders and comforts a peasant girl. In Chapter 8, Varis is briefly engaged and kills her fianc\u00e9 for betraying her. In Chapter 9, Varis slept with a member of the harem, her half-sister, while her aunt watched.\n\nSome recurring characters you might want by name are Varis (the Sultanah and narrator), Cin (the head priestess of Gunes), Arkadas (Varis' friend and servant), Kardes (Varis' older sister), Nislani (Varis' younger sister), Rahip (a Cardinal of the 'new religion'), Duke Hain (an important lord opposing Varis), Lord Sadik (a minor lord who has spoken in support of Varis); King Sican (the leader of Dusman, a rival kingdom), Prince Lider (Sican's son); King K\u00f6yl\u00fc (the leader of Temsilci, a rival kingdom); Agiz and Got (Subordinate Sun Priestesses); Saygili (Varis' guard); Soyguncu (a pickpocket and spy for Varis); Tutuklu (the head concubine of the harem); Kukla (a noblewoman). Further, Gunes is the name of the Sun God, Tanri is the name of the 'new god.' The city where the story is set is \u015eehir in the country of \u00dclke and the Empire of B\u00fct\u00fcn D\u00fcnya. If you need more...reread the earlier chapters.\n\nPlease, please, please, please, please tell me what you think after you read this. I put an embarrassing amount of work into this and I want to know what you think. Especially if it is good things.\n\n*****\n\nChapter 10: The Ceremony\n\nIt was only a matter of time now before it happened, there was really no way to stop it now. I didn't know that I wanted to stop it, but the option had passed. So I sat nervously in my throne in the reception hall of the palace, staring at the front door and waiting for it to open. Every time my eyes closed I prayed that it would still be shut when my eyes opened. But I also wanted it to be open, to be able to get everything over with. I just wanted it to begin. \n\nI was not waiting for the inevitable argument with Nislani. That had already happened. It had been about three hours before the set starting time for the wedding when it happened. I was sitting in my private room with Arkadas. She was applying my make-up so that I could look like a traditional bride in the manner dictated by Gunes. I had agonized for a long time about whether I should dress as a 'man' for the ceremony but I had ultimately decided that I had sacrificed enough and that two brides would be appropriate for the wedding. I was sitting on my bed in a loose-fitting robe with my eyes closed and Arkadas was carefully applying shadow to my eyes while seated on a chair next to me. I heard the door fly open and crash into the wall, but I kept my eyes closed. I had been expecting this for days. I was actually surprised it had taken this long.\n\n\"I am not supposed to see you yet,\" I said coolly. Arkadas had paused and I could tell she was looking at my sister standing in the doorway, \"Keep going,\" I said to her.\n\n\"She isn't even dressed or made-up yet!\" Arkadas whispered to me, \"You know how long she takes for everything. She won't be ready.\" I kept my eyes closed. \n\nArkadas seemed genuinely distraught about it. Her attitude leading up to my wedding had been surprisingly supportive. She had been afraid, I think, that I would find a love that would replace her friendship (our love, while still physical, had mutually never progressed beyond the point of friendship). While she sympathized with the emotional and physical difficulty I would have with marrying my sister, she seemed certain now that she would not be replaced. She would remain my greatest confidant and friend and so she was not concerned. While her interests were therefore quite narrow, I admit I leaned heavily on her in those weeks, supported by her commitment to me.\n\n\"Stop whispering about me you...slave!\" Nislani said, her voice coming out petulant and childish. I sighed as Arkadas responded.\n\n\"Don't speak to me in that fashion!\" she shot back quickly. I raised my hand slowly, not wishing to see this devolve any further.\n\n\"Nislani. Do not abuse Arkadas. She is the only person in this palace who doesn't already despise you. You would do well to treat her nicely,\" I said with a bored voice. But, despite my outward calm, I could feel excitement in my chest. I did not know what the result of this interview would be, but in my growing anticipation I had hoped it would clarify something when it inevitably came. It would somehow...make whatever happened next the obvious choice.\n\n\"I am glad everyone hates me!\" Nislani yelled back, \"If your degenerate friends and cronies liked me I would count myself a pervert!\" I could hear her stomping closer now and, once again, Arkadas stopped applying makeup.\n\n\"Comb my hair or something then,\" I ordered her. I felt Arkadas crawl onto the bed behind me and start to stroke at my long hair. My sister sat down on the chair across from me. I kept my eyes closed to maintain the tradition and also to show my sister that her concerns were of little note to me. Perhaps more importantly, I did not know what I would do if I saw her.\n\n\"Sister,\" I began, \"Why are you here?\" My voice sounded weary, though I had not intended it. Nislani sighed loudly.\n\n\"Are you serious?\" she asked, \"Why the...fuck do you think I am here, sister.\" The last word was spat out in sniveling mockery of my own voice.\n\n\"I don't know, not getting ready for the wedding,\" I shot back in the same vein.\n\n\"We are three hours from the scheduled start,\" she replied.\n\n\"I know. You don't have a lot of time,\" I said.\n\n\"When are you going to...spring whatever trap this is. I am tired of being in the dark,\" she responded. I let that statement hang for a second. I was not sure what it meant.\n\n\"Trap?\" I asked.\n\n\"Yeah, whatever game you're playing or con you are running, just tell me so I can stop going through with all of this stupid nonsense,\" she replied. \n\n\"Nislani, what are you talking about? What scheme?\"\n\n\"I don't know you haven't told me!\"\n\n\"I don't understand what you are talking about, what plan? We are getting...married in a couple of hours. That is the end of it!\"\n\n\"You can't just tell me now? I have done everything you asked, I won't screw it up,\" she responded.\n\n\"You are screwing it up because you are not getting ready. That is literally all you have to do today!\"\n\n\"Why?\"\n\n\"So we can get married! Why else?\"\n\n\"Don't fuck with me Varis. This is like your thing with Cardinal Rahip or the thing to lift the siege. I thought you were serious at first but the more I thought about it the less sense it made. You don't like me and I don't like you. Getting married...we are sisters! It makes no sense. But then I started thinking that you are so devious and crafty, you always have schemes going on. So you want people to think we are getting married for some reason. I didn't understand it, but I don't have to understand it. Once I figured that out, I just went along with everything. I keep waiting for you to do whatever it is you are going to do. But I can't stand it anymore. You have to tell me, we are getting too close and I am getting nervous,\" Nislani spat out all of this theory and paranoia in one long stream of words. \n\nWhen she was done, I was actually somewhat impressed with her imagination, her creativity. She had completely convinced herself that this was some sort of conspiratorial plot. That I was using our wedding as a ruse to achieve some other action. I almost laughed. I wished I had figured out some way to make her right.\n\n\"Nislani...\"\n\n\"Don't say it isn't true, I know it is,\" she said, before I could explain. Her words indicated a certainty that her voice could not back up. She was essentially begging me to admit that there was some secret plan. This was the last, delusional refuge of a desperate woman.\n\n\"In three hours, Cin is going to perform the marriage ceremony. Under the laws of the realm, that wedding will be legal. I will no longer be on the hook for a dowry for a virginal sister and I will have a spouse to begat me heirs. That is the plan. The scheme. The whole thing,\" I said.\n\n\"No, but...\"\n\n\"Nislani. That is the only plan,\" I interrupted. I kept my eyes closed and I could feel the heat rising in my cheeks. My heart was humming. I didn't feel good about this either. And Nislani was dredging it all up. But now she was sitting quietly. For several minutes, the only sound I heard was the slight tearing noise of a coarse brush running through my hair while Arkadas combed me. But I could sense that Nislani was present, she had not moved. She was simply stewing in her anger. Finally, \n\n\"You're fucking disgusting.\" She did not scream. She spoke in a defeated, incredulous voice, \"You want this. You hate me so much that you would do this to me. You probably meet with all the ladies at court, talk about it, to laugh it up.\" Now the heat in my cheeks grew more intense and it was my turn to unleash a little righteous fury.\n\n\"Do you think I have time to sorry about whether or not I hate you? You child. When we were both children, I hated you. Now I don't even think about you. You are a luxury I do not have. I no more ordered you to marry me out of hatred than I did out of love. This is politically necessary. I cannot justify any action in my life anymore that is not politically necessary. I cannot do anything just out of spite just like I cannot do anything just on a joyful whim. You think that I want this? You think I want to humiliate myself before the world by marrying my sister? Do you think that I want to fuck you? I absolutely do not and you are a moron if you think otherwise.\"\n\n\"You are the Sultanah, you get to do whatever you want, don't act like...\" Nislani began.\n\n\"I am the Sultanah. I get to do whatever I need. I get to do my duty. I have not, as Varis, been able to do anything I want for a very long time. There are knives at my throat every second of every day. I wade through blood up to my knees just to gain the right to breathe tomorrow. I have to commit heinous acts and bear the moral responsibility on my soul because my empire demands it. I ruin myself so that others can live. I fight every day and I do it for you. I do it for my family and for the dynasty we represent. I have lost everything to be the Sultanah. I have nothing. You lose the chance to have one fancy wedding party with a handsome man at your side and you lose your cunny a few nights of your life. Your sacrifice is nothing compared to mine.\" \n\nI unleashed everything. Every stray thought I had had for weeks, all of my resentments and my fears about my current situation. I poured it out hot and thick. As the last of the words spilled from my lips I felt totally drained. I could barely lift my head. I had already proven to myself that I could do my duty, but I was letting Nislani know that I didn't have to like it. As the whirring in my ears died down, I could hear Nislani sobbing on the chair next to me.\n\n\"Well I guess if you're unhappy, then it is okay that I am. If you are miserable because you have a cock and are an heir then I should be miserable too. You don't know what they are saying about me out there Varis. Not about you, they are afraid of you or respect you or something because you're ruthless. But what they say about me... All I have ever cared about it my place at court, you know that. You're destroying it!\"\n\n\"I am already ruined, I cannot shed tears for you,\" I shot back. I did not really understand what she was talking about. I had heard nothing at court. Though, admittedly I ran in different circles that Nislani and, perhaps more importantly, courtiers tended not to tell me the truth. Regardless, her little troubles with her stupid little friends were beneath my concern. Her self-respect was inconsequential compared to the needs of the Empire.\n\n\"You aren't ruining me because you have the power, you are ruining me because your jealous of my freedom, is that it?\" she sobbed. Something in her words stung. She was wrong, I knew that. My primary motivation was simply to solve a series of political problems. But I was jealous. I had not been all that much more grown than her just a few months ago. I had been shuffling off my childhood rapidly. And I was jealous. I had all of the cares in the world and Nislani was in a state of innocence and I did begrudge her that. Maybe that made my duty a little easier to stomach, I didn't know. \n\n\"It doesn't matter why. You don't get to ask why. Our father is dead, I am his heir. You are bound to obey me,\" I said, tired.\n\n\"Funny that you would even mention father. Nothing like this would have happened if he were alive,\" she said morosely, the tears nearly choking her voice. Inadvertently, her words crystalized something in my mind. I thought of my father, and the kingdom he bequeathed to me. I thought about all his attempts and machinations, his various failures. The failure of his will. While the personal parts of myself would still regret the future, Nislani's allusion to our father clearly indicated the correct action for Sultanah.\n\n\"It would not have. And he is dead and his Empire is a tiny speck of dust, inconsequential in world politics. And this is because Father and his forbearers, for hundreds of years, have been afraid to do their duty. I will do what I have to in order to save this Empire. I am no longer afraid. I will not let my own emotions get in the way. I will be the Sultanah that this empire needs. And you be the consort it needs,\" I said. I did not add \"or else\" but I suppose I could have. I don't know what my threat would have been, but this was not optional. I had allowed myself this brief opportunity to complain, to give my sister all of the reasons why my life was almost unbearable, but now it was time to stop whining. It was time to act in the best interests of others. That was my role.\n\n\"I don't want to do this Varis. I don't want to...I cannot take this. You have to make it stop. I don't want this.\" Nislani said, her voice breaking. This was not simply a childish fit. I could hear the sincerity in her voice, the pleading nature of her statement. I was surprised to find I was slightly affected by her despair. I still did not see her, but I could feel the physical force of her sincerity. It was powerful. But not enough; the die was cast. I ignored my sympathy just as easily as I ignored my own despair.\n\n\"Neither do I,\" I replied. I opened my eyes now and saw Nislani staring at me, deflated. I could not see Nislani, but I could sense something across the void, something in the silence that was different than the stony defiance before. I don't know what it was. The anger or sense of injustice seemed to have fled from her. I felt her thinking about the situation from my point of view. I saw her realizing that we were both lost, \"But our choices are to marry and live or give up and die. I am not being dramatic. We live on a knife's edge. Go get ready,\" I said, \"Arkadas, get back to my eyes.\" Nislani was still crying, but I heard her get up from the chair, defeated. She moved slowly out of the room.\n\nSo no, I was not waiting for Nislani's blow-up, she had let it all out. And I was not waiting for the wedding ceremony either. That had also already happened. \n\nThree hours later I was standing on the balcony where I had once been crowned before my people. It was an absolutely still, windless day. There was not a cloud in the cerulean sky and the sun was shining down from the highest point in its daily journey. \n\nOnce again, I was preparing for a sacred rite that was to be witnessed before my subjects. They were standing far below me, in the public squares and stretching back into the filthy streets beyond. There were more of them present this time, people had come in from the countryside to view the wedding. Whatever personal discomfort they might have at witnessing a sibling wedding, they had come to trust me. Further, they were at least somewhat familiar with Imperial history. They knew that if a sibling wedding was inappropriate for a 'normal' person, it could be justified for royalty. Further, their desire for a celebration likely overwhelmed whatever moral qualms they might possess.\n\nThe Peers were also present. The Executive Assembly and the more powerful lords and their ladies sat on the balcony in front of me. Chairs had been specially arranged for the purpose. These dignitaries included both Loyalists and Collaborationists dressed in their finest clothing. Lord Sadik, as the Chancellor, sat in a place of honor. He was flanked by Sir Sak\u015fak\u00e7\u0131 and his wife on one side and Duke G\u00f6stermelik and the Duchess on the other. However, Duke Hain and Lord \u00d6rnek and their wives were also close by, looking excited to be present. The members of the Peerage who could not fit on the balcony were placed just inside or even in rooms on higher floors of the palace, where they could look down on the ceremony.\n\nThe only other people on the balcony were the priestesses who would perform the sacred rite, Cin, Agiz and Got. They were wearing their traditional red robes and looked far more comfortable than anyone else on the balcony. Cin had been supremely jealous that I had thought of the marriage to Nislani. She had taken credit in a small way, by saying my idea showed that she had been successful in leading me towards Gunes. She had spent weeks in her library, researching previous sibling marriages in the Gunes tradition to ensure that this particular marriage would meet the exact specifications necessary. Every aspect of the ceremony had been planned by the priestess, from the red bunting strewn around the outside of the palace to the arrangement of the nobles in a semi-circular pattern around the balcony.\n\nI had been announced before my arrival and I was standing near the edge of the balcony next to the priestesses. I was facing the nobles and my side was turned towards the people in the streets below. I had already waved to the people when I arrived.\n\nI was wearing a traditional wedding dress, the likes of which had not been worn in hundreds of years. It was red, as was tradition, a very deep blood red that was slightly darker than the outfits worn by the priestesses. However dress, perhaps, is not an accurate description of the outfit. It included a long, tight red skirt that fell about three quarters of the way down my calves with short, gold tassels that tickled the tops of my bare feet. The skirt hung low on my body with the waistband actually riding around my body at the widest parts of my hips. The top curve of my ass (while not, thank Gunes, the crack) was exposed as it rose up to my back. Several inches of flesh were exposed below my bellybutton. In fact, my cock began just an inch or so below the hem of the skirt. ",
        "The expanse of flesh from the hem of the skirt to my top was vast. The feminine curve of my hips down to my narrow waist was clearly visible. As was the gentle slope of my torso back out as my body rose towards my breasts. The top itself was the same color as the skirt. It was, essentially, a very tight half-shirt. It had very short sleeves, barely more than a tank top. The fabric stretch across my back and was clasped together in the front between my breasts. There were no cups in the shirt to hold my breasts, in fact the bottoms of them poked out of the bottom of the shirt. The shirt was tight, however, and squeezed my breast into place. The clasp in the middle was just a single, small hook and eye. Above that clasp, the top clung tightly to my skin. However, there was not much fabric and my cleavage was exposed to my guests. Several gold tassels hung from the hemlines all around the top.\n\nThe only jewelry I wore was a small gold necklace with a ruby pendant that sat directly between my breasts. The exposure of my cleavage and the low-hanging necklace accentuated my neck, making it look long and regal. My hair was left completely unencumbered, flowing down my back and over my shoulders after being parted in the middle. A small, cloth ring was placed in my hair and my red veil hung down over my face from there.\n\nWith respect to my face, Arkadas had done an admirable job of applying make-up in the traditional fashion. She had applied powder to my face, lightening my olive skin slightly to make the rest of the make-up appear starker. My lips had been painted a deep red color, making my teeth appear particularly white. She had applied dark red eyeshadow to dramatically accentuate my eyes and offset this with a thick mascara that made my eyelashes look particularly long. Arkadas had done a splendid job of ensuring that everything, from my eyebrows to the powder on my chin, was just so. I had a symmetrical and alluring appearance that seemed more of an ideal than an actual human form. My face appeared more severe but also more beautiful than I had ever seen it before. I appeared as Gunes must have appeared.\n\nThese positive feeling about my appearance (so deliciously exposed and so desirable to everyone around me) was the only thing keeping me in place and secure. I could feel myself channeling Gunes as I wore her prescribed clothing and make-up. This allowed me to stand still and prepare to do my duty. Without it, I don't know that I would have been strong enough to go through with it, even knowing the stakes. \n\nPerhaps Cin truly had the gift of prophecy and she could sense that, it we did not begin immediately, that I would flee from this place and all of my responsibilities. Or maybe she was simply excited about the prospect of a wedding performed in the \"old\" manner. Regardless, I had only been standing on the balcony, listening to the cheers of my people and looking at the face of my Peers, for a few moments when Cin turned to the crowd and raised both of her arms high above her head. She then launched easily into her prepared remarks, an amalgamation of what Priestesses had been saying at Royal weddings for centuries before the arrival of Tanri. \n\n\"People of \u015eehir! Subjects of \u00dclke! Vassals of B\u00fct\u00fcn D\u00fcnya, welcome!\" A great cheer rose up from the crowd and Cin walked over to the edge of the balcony so that she could see them more closely. I followed her movements carefully with my eyes. Each syllable she uttered caused a jolt in my stomach and made my heart flutter faster. I felt dizzy and my eyes, involuntarily, closed. I breathed deeply, trying not to think about what was about to happen, and I leaned on Cin's words, trying to listen to the reassuring sound of her voice without hearing the content.\n\n\"It is my honor and privilege to be with you on this day, to witness the extension of our illustrious Hanedan Dynasty and to usher in a rebirth for our great Empire!\" This was also met with cheers and Cin soaked it in. I gazed over towards the palace, looking for the door where Nislani was waiting. I wondered what she would do when the time came.\n\n\"Rebirth. The rejuvenation and reawakening of our Empire starts with the rebirth of the traditions that made this Empire great. Centuries ago, the traditional ways of doing things were never question. People worshipped the Sun God because they knew no other God was present. And, at the same time, they served the power of the Empire because they knew that no other early power was present. When unified, Gunes and the Empire were unconquerable. The armies of the Empire spread out over the world and everywhere found victory, honor, and glory. In thanksgiving for these victories, the Sultans and their subjects praised Gunes and spread the message of the Sun God. The armies of the Empire spread the true religion all over the world and the fidelity of the Empire to Gunes brought peace and prosperity to all Imperial subjects, even the new conquered peoples,\" Cin's voice sounded almost orgasmic, taken away with the glories of the past. She then dropped her head dramatically, sighing.\n\n\"It is impossible to pinpoint an instant when reckless doubt and childish ignorance upset this perfect partnership. Scholars have debated the causes for centuries already. Some believed that life in the Empire was too good, that a decadent people believed they no longer needed the Sun God's guidance. Others believed that minor setbacks in the Empire's fortunes caused fickle Sultans to forget the blessings of Gunes. There are thousands of other suggestions. It is not important.\n\n\"What is important is that through the centuries, our Sultans have slipped away from the traditions that bound the dynasty to Gunes and, as a result, bound our Empire to this Earth. First in surprise and then in wrath, Gunes then turned on the Empire, seeking to induce the Sultans to see the error of their ways. The Sultans, unbound from the Sun God, found that their Empire had been nearly wrenched from the surface of the Earth. The God-given authority of the Emperors has been usurped by heretical fools in faraway cities. The sacred place ignored and false idols venerated by idiots. All earthly authority slipping away as spiritual authority was ignored.\n\n\"The fortunes of the Empire have always been tied to the fortunes of Gunes. As Imperial ignorance of the true religion faded, the Empire faded. As if to represent this collapse of earthly authority, the Blood of Gunes drained from the veins of the Hanedan Dynasty like an hourglass draining sand. Gunes Blood was debased and diluted by the blood of foreign harlots and sacrilegious whores. It seemed inevitable that the last few grains of sand, the last few drops of blood, would drain from the Hanedan line, all hope of reconciliation with Gunes would be extinguished, and the Empire would fade into history,\" Cin's voice grew low as she spoke. It almost seemed that she was on the verge of tears and her sincerity overrode my annoyance that my mother and grandmothers were referred to as 'whores' and 'harlots.\" The people had grown completely hushed and they seemed to lean in towards the stage, needing to hear what Cin was saying and believing it in their hearts.\n\n\"But,\" Cin said, her voice perking up suddenly, \"Just as it is always darkest before the dawn, in our most dire straits, a new light burst forth onto the world. The light of the Sun, augmented by the light of two shooting stars, has shaken the Imperial line from its ignorance and apathy. A new Sultanah has risen, versed in the history of the Empire and cognizant of the reality of Gunes' blessings. Sultanah Varis I,\" and as she spoke a great cheer went up from the people and I smiled despite myself, \"has re-forged the bond between the Hanedan line and the Sun God. She has returned to the old traditions and has set the Empire, once again, on the path to glory.\n\n\"Today, the Sultanah has asked you to be present to witness the symbolic re-affirmation of that re-forged bond. Today, two daughters of Gunes, possessing the very blood of the Sun God, will be wed. Their blood will mix in a child, an heir to the Hanedan line. The debasement of the Royal Blood will cease. And, as centuries pass, the blood of Gunes will once again concentrate in the veins of our illustrious Sultans. And just as Sultanah Varis I will wed Princess Nislani today, the Hanedan Dynasty will symbolically renew its marriage with Gunes. And, just as this wedding will bring glory to our Sultanah and her wife, the marriage of Gunes and the Royal family will bring glory to B\u00fct\u00fcn D\u00fcnya!\" \n\nAnd once again, Cin raised her hands high above the ground, everyone cheered loudly, almost wildly. Though many likely missed the meaning of some of Cin's words, they could feel what she was saying. She was saying that this marriage would be blessed by the Sun God and that it would make their lives better. And they were ready for it.\n\n\"Will the Princess Nislani please come forward?\" Cin bellowed and the crowd roared louder. I turned and looked once again at the door to the palace. I held my breath, waiting to see what would happen. I was still waiting for something to change, some accident of time or place that would allow me a way out of this prison that I had built for myself. Part of me wanted Nislani to have run away. To go somewhere and never return. It would be an absolute disaster for the Empire. But it would not be my fault.\n\nA guard reached over to the door and grabbed the knob, pulling it open quickly. Standing in the doorway, dressed exactly as I was and wearing identical make-up, was my sister Nislani. In addition to her red eyeshadow, her eyes themselves were red from crying and her shoulders were slightly hunched. It was clear that she wished she was anywhere else in the world (she barely reacted to the massive cheer in her favor) but she had resolved, as I had, to do her duty. I had broken when we spoke, her last delusion run out. She had no mind for intrigue, no way to escape her fate. I took a breath.\n\nAgiz and Got walked across the balcony rapidly until they were standing on either side of Nislani. They took her arms in theirs and began to walk her over towards me. I was struck by Nislani's beauty, though I felt a bit narcissistic in that thought because she looked so much like me. She had the same flow of wide hips, the same pert breasts squeezed into the small shirt, the same hair, the same eyes, even a remarkably similar face. Nonetheless, I had never seen my sister look more beautiful and I realized why my father had believed her to be such a prize on the international marriage market.\n\nIn a few seconds, Agiz and Got had returned to Cin's side. They had deposited Nislani directly next to me. We were separated by only a foot or two but Nislani would not acknowledge me. Her head was bowed and her eyes were closed. She was whispering something to herself, I assumed it was encouragement. I had ordered her to be here and she was, I could not demand that she enjoy the proceedings. I did not plan on enjoying them myself. I owed my sister a debt, for conquering her childishness and doing her duty as a Princess. I felt the first soft feelings I had experienced for her in a very long time.\n\n\"Varis Hanedan, I present to you, Nislani Hanedan, your betrothed,\" Cin called out over the crowd. Another great cheer rose up. As was required, I reached my right hand over and took Nislani's hand. Her fingers were icy cold and she did not react to my touch. She continued to whisper silently to herself. If Cin noticed, she gave no indication and continued on.\n\n\"Varis Hanedan, do you accept this presentation?\" she asked me. I looked at my sister, so beautiful and distraught. I almost laughed as a thought rushed to my brain. Nislani was my Empire, brittle, unyielding, difficult, and on the verge of collapse. I loved it despite myself. And I guess her.\n\n\"I accept her,\" I said, my voice sounding clearer than I believed possible.\n\n\"Nislani Hanedan, do you accept your betrothed as she is presented?\" Cin asked and my sister made no movement. Cin waited patiently, but Nislani simply mumbled to herself. There was absolute stillness in the air and the crowd around us had grown entirely silent. Cin looked at my sister angrily, apparently thinking that she was purposefully ruining the ceremony. I quickly realized that Nislani was not even listening. I squeezed her hand very tightly, my muscles contracting to the point that they ached. Nislani jumped and let out a quiet whimper. She looked at me, anger in her eyes. I quickly motioned my head toward Cin, who was staring daggers at my sister.\n\n\"I accept her,\" Nislani said, her voice sounding weak and uncertain. But in the absolute stillness, her voice carried out over the crowd. I was surprised by the feelings I felt as Nislani spoke. I was, to a certain extent, disappointed. I had hoped that Nislani would figure out a way out of it. A larger part of me was relieved, the trouble was past and the deed was done. But the greatest part of me felt something else. Pride. I had made this happen despite everything, despite my own wishes. It felt...good. Cin seemed to agree.\n\n\"As the Sun above us shines down in unequaled splendor, so do the blessings of Gunes fall on this pair. Feel the sunlight dissolve the ephemeral borders that separate you. Feel the heat of this day forge you once again into a single being. And what Gunes has joined, let no man tear asunder,\" Cin said, completing the prayer. Her smile was so wide it threatened to tear her face, \"Sultanah Varis, you may now kiss your bride.\"\n\nI woodenly turned and face my sister. She did not move, but I pulled gently on her hand. Her eyes were still closed and her head was still bowed, but she slowly turned to face in my direction. Her shoulders were rising and falling slowly and I could tell she was trying to control her breathing. I reached my left hand over and placed it on my sister's chin. Her skin felt cold and somewhat clammy. I placed some pressure on her chin. Her head rose in a hard, jerking fashion until her face was directed towards mine. Her eyes were still closed and her lips were still moving. \n\nI looked briefly over at Cin. She still looked triumphant and was staring out at the crowd. She noticed my reluctance and looked at my sister. She shrugged slightly and indicated with her head, telling me to continue. I sighed and looked back at my sister. I slipped my hand off of Nislani's chin, I slid it back across her cheek, finding the back of her neck. Her skin here also felt cold, though it was smooth and pleasant to touch. I looked once more at my sister's face, but she continued to ignore everything. I closed my eyes and titled my head. I leaned in forward towards my sister. I tried to pull her in towards me, but she stayed unmoved. \n\nAfter a moment, I felt my lips press into my sister's. They felt cold, almost hard to the touch and she did not return the kiss. I kept my lips on hers for several seconds. After first, I did not believe that she even noticed that I was kissing her. But then, I felt, against my cheek, a slight wetness. A tear had dripped from my sister's eye, run down her cheek, and touched my face. It was her only protest. I quickly broke our kiss and backed away.\n\n\"I now pronounce you married!\" Cin declared.\n\nAnd so no, I was not waiting for my marriage ceremony either, it was legally done, my sister was my wife. No, I was waiting instead for the consummation of that ceremony. The final rite to ensure the perpetuation of my dynasty.\n\nI did not know exactly when it would happen. In fact, I had believed it would have happened already. The reception for my wedding had already been going on for several hours. It had started first in the streets. As soon as Cin had declared my marriage to Nislani, my subjects became absolutely ecstatic. The cheering and jubilation seemed to stretch the city to its limits. Only after they had shouted themselves hoarse, did the people move on to the actual celebration. All of the city squares were made available to them. Food was purchased at my expense and distributed in the city. The water in the city fountains was replaced with wine. Minstrels and musicians of all kind had flooded into the city and dances and impromptu theater had broken out all over.\n\nThe celebrations within the palaces had started scarcely any later. Entire floors of the building were given over to celebration. Kardes and Cin had overseen every aspect of the planning. Food, drink, and spices of every imaginable kind were found in great abundance. I had hired the finest musicians and most skilled singers to entertain my honored guests. No one from outside of the Empire had been invited, so those present were the members of my own Peerage, present to celebrate my marriage and drink for free. \n\nThe most honored noble guests were those who had been selected to eat in the throne room. I sat in the front of that room with my wife, Nislani, by my side. The magnates drank my wine and toasted Nislani and me often. A section of the room had been set aside for dancing and many of the magnates had danced with their wives (and each other's daughters). The room was overflowing with the sounds of conversation and the tinkling of glasses. The food in the throne room was the most exquisite kind and had been purchased dearly in these rough times. But the two most honored attendees of the reception did not partake. I was far too nervous to think of eating anything. Nislani had not spoken since the end of the ceremony, she looked down at her food listlessly did not acknowledge the world around her. Perhaps that was for the best.\n\nI was just beginning to think that Cin had made some change to the order of events, when the rear door of the throne room open loudly and loud bell could be heard ringing out over the noise of the crowd. Slowly, the magnates in the throne room became aware of the ringing bell and grew quiet. The revelry of the other people in the palace, outside the throne room, as well as the peasants in the streets, could easily be heard, but the room itself was silent. Smiles began to appear on drunken, reddened faces and I saw lascivious old men wink at one another and trade hushed, bawdy remarked. I felt a lump form in my throat and my knees instinctively locked together.\n\nI turned and looked at the sound of the opening door. I saw the Guardian Party standing at the door. There were nine members of the Party: Cin, Agiz, Got, Kardes, and the five wives of the members of the Executive Assembly. The Guardian Party had been invented centuries earlier as an institution to ensure the consummation of royal marriage. To ensure that the, often unwilling, parties actually engaged in sexual intercourse on the night of the marriage, representatives from both families (sometimes even fathers or mothers) would enter the bridal chamber on the first night and watch. At first, there had been no ceremonial aspect of the act; it had simply been a practical requirement, to ensure that the wedding was legal. However, over the centuries, many rituals had been attached to the process such that the entire event had become extremely formal.\n\nAnd the first part of the tradition was that the Guardian Party was to burst in on the husband and bride in the midst of the wedding reception and drag them to their bed chambers. This was done quickly and with great mirth. The other people at the reception would scream out good-natured obscenities and predict the actions that would occur that evening. And, my Guardian Party was no different.\n\nThe nine members of the Party, with Cin in the lead, rushed to the table and grabbed at my arms and legs. Other women rushed at Nislani. It was customary for the bride and groom to put up some token resistance and, in the interest of tradition, I struggled somewhat as the women began to lift me. I even cried out slightly against the catcalls in the room. Nislani, on the other hand, went limp as the women grabbed her, and they pulled her easily out of the room and into the hallway leading to my chambers. I followed behind her and the door was closed, leaving the rest of the reception to their party and leaving me with ten of the most important women in the realm.",
        "Nislani looked particularly aggrieved to see the Guardian Party. I assumed that she simply knew what their arrival meant. Though, I suppose I should have been aware that there was more. I should have thought about what Nislani had said earlier, during out argument. Nislani had her reasons to dislike the Guardian Party. Not the entire party, but instead, the wives of the Barons (save for Kukla). Before my father's death she had run in the same circles as the younger wives (amongst others). They had, in many ways, grown up together. When my father died and our position became precarious, they had let Nislani know in no uncertain terms that she was no longer as worthy of their friendship as she had been before. I knew some of this, I suppose, but did not think much of it. She had assumed their affection was genuine and was crushed to find it so...conditional. Regardless, she had been weak in her will and still desired to be a part of the most exclusive circles and was allowed to tag along, humiliatingly, as a charity case. \n\nThese women took every opportunity to deride her and humiliate her. I later learned that when it was announced that she and I would wed, they had scornfully tossed her out of the group entirely, claiming she was beneath contempt. Laughing, as they did so, at her despair. Part of her discomfort at the wedding had been anticipating not just her first night with me, but the fact that her tormentors would be present. This disdain had been what finally sent her into my chambers that morning. Now, as they looked on scornfully at her final humiliation, Nislani seemed to break. She was already humiliated in their eyes, brutalized and de-humanized by their hatred. The same thing that had caused me to rise to the occasion, to become the Sultanah, had crushed my younger sister. \n\nBut I had only the smallest inkling of these events at the time. I was more focused on what the nine women had in mind than their status as my sister's former clique. I should note, it was not common for women to constitute all, or even the majority, of the Guardian Party. This had been a somewhat contentious issues in the weeks leading up to my marriage. While there was no dynastic need for a Guardian Party (no foreign family was ensuring their daughter was properly 'accepted.') there were still those who wanted to ensure that the marriage was consummated. Those people included Cin and the various Lords. They wanted to know that I would do what was necessary to ensure the perpetuation of my dynasty. I believed that many Collaborationists hoped that I would be unable to perform, thereby giving them a pretext to depose me in favor of someone willing to begat an heir. \n\nHowever, no one could determine the propriety of allowing men to witness my wedding night. While men were usually present, these men exclusively had an interest in the new wife present. Specifically, it would be the girl's father, brother, uncle, or (more commonly) some representative of the same. The only man present from the groom's side would be the groom himself. Here, Nislani and I, obviously, came from the same family. Further, there were no men left in our family. If there were, we would not be married. After long debate in the Executive Assembly it was decided that Cin and her fellow priestesses would be present as representatives of Gunes, Kardes would be present as a neutral representative of the Hanedan dynasty, and the wives of the Executive Assembly members would be present to represent the interests of the nobility. These women could be trusted to guard the interests of the peerage without affecting my sister's dignity.\n\nAnd so, as we tumbled wildly into my room, Cin, Agiz, Got, and Kardes rapidly pushed me over toward my bed while Duchesses Hain and G\u00f6stermelik along with Ladies \u00d6rnek, Sadik, and Kukla Sak\u015fak\u00e7\u0131 took Nislani into the privy for preparation. Once I was on the bed, the priestesses essentially attacked me. In a few moments, my wedding garments were lying on a pile on the floor. I was completely naked on the bed, my cock hanging limp between my legs and my nipples hardened by the sudden caress of cool, evening air. As soon as they had completed their task, the priestesses smilingly piled off of the bed. I noticed that Kardes carefully avoided gazing at my body, but I could see her cheeks were red. This would be terrible for her as well, as the representative of our family. The things she would have to see!\n\nNow that I had been forcibly disrobed, the next stage in the highly formalized process could begin. There was a knock. It was not on the outside door, but instead coming from the privy, where my sister had just been taken. Kardes, fulfilling her role as the family representative, spoke.\n\n\"Enter,\" she said, her voice sounding tight and nervous. Regardless, the women in the privy opened the door and burst in, heading to my bed. They walked out in order of importance, with Lady Sadik come out first, as the wife of the Chancellor. The other women filed out slowly. With the exception of Duchess Hain, they were young, vibrant, attractive women. They were second or third wives, my age and younger. \n\nThe last lady to enter was my former love, Kukla. She gave me a wry smile and a wink as she exited the privy. In fact, they were all looking at me closely. They, of course, knew about my anatomical abnormality, there were no mysteries left in the Empire. But, despite their efforts to behave as though they were not shocked by my appearance, I could see their unease in their eyes. Kukla, of course, was less the least affected. The other four women had mixtures of curiosity, disgust, and excitement on their face. A combination I knew well. Lady Sadik blushed uncontrollably and Duchess Hain had a simpering smile on her face. Despite their intense interest in my body, they continued to walk towards me and eventually, when all of the ladies were standing at the foot of my bed, the turned to the privy.\n\n\"Consort Nislani has been inspected and her virginity is confirmed,\" Lady Sadik said (though this was actually no longer done, it was simply stated. She was a virgin since marriage, and that was sufficient for the law).\n\n\"Then she may enter,\" Kardes said and we all looked toward the privy door. Glassy-eyed, Nislani stepped out into my bedroom. I let out a deep breath. Unprotected and nervous, Nislani had an innocent beauty that I had never noticed before. Her eyes were so wide, her face so na\u00efve, she looked younger than her 18 years. Her body looked remarkably like mine, though still encapsulated in her wedding dress. Her breasts were the same size and sat high on her chest, she had the same delicate arms, the same thin waist, the same wide hips and slender legs. She was only slightly shorter than me, her nose slightly longer, and she had a small black birthmark on her left breast that I could see where her flesh poked from the bottom of her shirt. Without the crowds and the bright sun shining down on us, she no longer looked like a doll or mannequin used for wedding ceremonies. She looked like a terrified young wife.\n\nDespite our close physical appearance, with me naked and her still clothed, I could really sense the differences between us. I know that might sound strange or even impossible, but I could. And it wasn't simply that she was childish and I was, at least now, more mature. There were deeper differences. I could sense her delicacy, her need for protection. I could sense the loss she felt and her isolation (who had been with Nislani all these months while I had been ruling? Who did she confide in with her friends gone?). I could feel her softness where I was rigid. For the second time that day, I felt gentle feelings toward my sister.\n\n\"Approach!\" Cin said, as Nislani remained in the doorway. Nislani jumped slightly and her wet eyes looked up at Cin. She nodded slowly and then made her way form the privy to the edge of the bed. She moved deliberately, like she had to order her feet to rise and fall with each step. But eventually, she was standing at the foot of the bed, directly in front of the Guardian Party. She was looking up at me where I sat at the top of the bed and I could see her eyes move, embarrassed, over my limp cock and balls. I could hear a slight sigh, but she stopped where she was supposed to stand.\n\n\"Are you prepared to enter freely into this marriage bed?\" Kardes asked, her voice clearly affected by Nislani's appearance as well.\n\n\"I am...\" A squeak of a voice escaped my sister. She spoke quickly. I wondered if her whispers to herself during our wedding had been an internal pep-talk and that now she was simply ready and wanted to get it over with. That was the way I felt, I did not to wait longer.\n\n\"You must prove three things to serve as a satisfactory Consort for a Sultan. You must prove your devotion as a wife, your dignity as a royal, and your dedication to the Empire as the Consort,\" Kardes explained in the ancient manner. This was where the rituals had become particularly rigid. Three sexual acts were required of the new bride to satisfy the Guardian Party. It was not really known when these particular tasks had been developed. Where there had once been no ritual, there was now no deviation. These rituals were as important as the kiss during the wedding ceremony. Perhaps more so, because after this, there was no turning back. But whatever discomfort my representative, Kardes, might have in explaining them was beside the point. Everyone had their role to play.\n\n\"Tell her what she must do and she shall accomplish it,\" Lady Sadik responded, giving the traditional lines as though she was reading them from her hand. She spoke in a somewhat haughty manner, I could sense her delight in the weirdness of the proceedings. The other Barons' wives looked equally smug. I looked to the side, by the bed, and saw Kardes looking down at the foot of our bed at our sister. Her eyes looked pinched and she gulped deeply.\n\n\"Nislani, to demonstrate your devotion as a wife, you must demonstrate your submission to your husband...er wife,\" Nislani said, recovering from the memorized lines to make her statement more accurate, \"You kneel on this hard floor with no thought of your own comfort and you must pleasure your...wife in a manner which gives you no gratification. You are forgoing you own needs to serve the needs of the Sultanah, just as the Sultanah forgoes her own needs for the Empire.\" \n\nWhile the script provided was too coy to actually spell out what needed to be done, it was clear to everyone the manner in which Nislani was required to \"please\" me. As such, the announcement served as my cue. I took a deep breath and briefly placed my hand on my heart, willing it to slow. I inched myself to the edge of the bed and placed my feet on the cold marble floor. I felt the eyes of the women around the room on me as I stood up next to the bed. My legs felt weak and I swayed uneasily for a moment. Kardes nearly reached out to balance me, but Cin held her back. I had been thinking so intently on the situation and on Nislani's obvious distress that I had barely noticed how nervous I was. It was not that I had conquered my nerves, they were all there, swirling in my stomach. I had just ignored them. Now they were returning to me with interest.\n\n\"She will do as commanded,\" Lady Sadik said. This was Nislani's cue. For a moment she simply stood at the foot of the bed. Unlike the other women in the room, her eyes had not followed me. Instead, she was staring at the spot I had been sitting a few seconds before. She made no noise, and the Guardian Party at her back looked at one another arrogantly. Finally, Duchess Hain reached forward and pushed my sister's shoulder slightly and then the women giggled rudely. Nislani made a quiet noise in her throat and jumped. But her eyes went back into focus and she shook her head. Her head turned towards me and she realized I was standing. Despite the fact that she had clearly not heard Kardes' command, she knew the part of the ceremony she had reached (the entire ceremony, in fact, was described in lurid detail by a female family member on a Princess' 18th birthday). She bowed awkwardly and then started to move towards me.\n\nHer motions were jerky and mechanical and her eyes remained down, focusing on my feet. She moved slowly, but not so slowly that she could be faulted. Her breasts bounced slightly in her revealing shirt as her feet padded along the marble. Perhaps if she was not my sister and I was not surrounded by family members, priestesses, and strange women, I would have been affected by her ethereal, sensual beauty as she walked. Instead, my body remained motionless, standing next to the bed. My cock remained limp between my legs. \n\nFinally, my sister walked directly in front of me and then turned so that she was facing me. She was only a foot away from me now, our breasts were nearly touching. Our eyes locked together for the briefest of times. But somehow, that fraction of a second seemed to stretch out into eternity. I saw her wide, scared eyes and her nervous, but beautiful face. But then the moment passed and I didn't even know what it meant. In retrospect, it didn't even really seem to last that long.\n\nRegardless, the spell was broken by Nislani's movement. She slowly started to shrink before me. Where we once stood nearly face to face, I watched as her eyes slipped down below my nose, my lips, my chin, my throat, my breasts, and my stomach. Down and down, getting ever lower. The whole time she kept her pupils facing up towards me, as though she could maintain her discipline if she could see my face, if she could keep her focus on the parts of my body that she was familiar with.\n\nBut eventually, Nislani's knees landed on the cold marble floor. Her neck was craned back entirely and here wide eyes were looking up. I was looked down, between my breasts. I could see the tops of Nislani's breasts, separated from my limp cock by only a couple of short inches. \n\nAs she settled onto the ground, I hear a low sigh slip through her lips. Then she took a deep breath. I became aware of the absolute stillness in the room. I could not take my eyes off of Nislani to look around, but I knew that no one was moving. No one was breathing. I believe they were all thinking what I was thinking: 'when is this going to stop? Who is going to stop it? This can't possibly happen.' But, at the same time, we could all sense that this thing, this duty and requirement, had a will of its own now. It was pulling events forward even if no one, except perhaps Cin, really wanted it to happen. Or perhaps some wanted it out of spite. Regardless, it had to happen.\n\nNislani seemed to understand this as well as the rest of us. She was still looking up at me pleadingly, but finally, she blinked. And when her eyes opened again, her head had dropped slightly and she was facing my cock. She had seen it from a distance a moment before, but now, she was experiencing it intimately. This was the thing that had placed us in this situation. This aberration in my anatomy had placed us in this situation. Nislani surely hated it, it gave me power over her. And yet she as bound, by all of the conventions of society, to try to give it pleasure.\n\nAnd yet, as Nislani's hand slowly rose from her side, her eyes flickered up to me briefly. And in that look I could feel something I had been noticing all day. Those soft feelings I had for my sister. My sister hated that I was Sultanah, but she had heard what I'd said to her in the morning. And I think she believed it. I did not want this power over her any more than she wanted me to have it. She felt trapped but she could sense that I felt trapped as well. That had been a revelation to her. I know she felt this, because I felt it in myself. I could feel the bond. I once overhead my father tell one of my brothers, \"the enemy of my enemy is my friend.\" Nislani and I understood that principle in that moment. We were not allies, but we were both trapped in this situation, it was our enemy. The office of Sultanah was my enemy. The silly girls in the room were my sister's enemies. And we both knew that we could only get out of it together. As Nislani's hand rose up and her finger tentatively touch the base of my cock, a truce was called. A temporary alliance of expedience was forged.\n\nI moaned despite myself. The pads of Nislani's fingers were very soft. She touched me with just the slightest amount of pressure, her skin just barely tickling mine. I felt my shoulders relax slightly and my breathing slow. Nislani jumped slightly as I moved, but she kept her cool fingers against my warm skin. She looked at my limp cock, seeming to study the impression it made on her hand. \n\nShe slipped her fingers around my cock, her skin skimming over mine. Eventually, I found her warm palm pressing against the side of my cock, her fingers were wrapped all the way around me. Her hands were so small that a couple of inches of limp cock still stuck out from her lightly closed fist, pointing towards her breasts. For a moment, she simply held it, her eyes glued to the tip of my cock. I looked down at her between my breasts, watching our chests rise and fall in unison.\n\nAfter a few moments, I felt my sister flick her wrist slightly to the side. My limp cock bent to the side slightly and I groaned. Her fingers squeezed and slipped around me in a pleasant way. She then bent my cock the other direction, and I groaned again, more loudly. Then, Nislani leaned in slightly, I could feel the breath from her nose against the tip of my cock and I felt a prickly feeling up my back. But then there was nothing. I looked down at my sister, my brow slightly knotted. She was staring up at me, giving me a beseeching look. She moved my cock slightly in her hand and leaned upward. She hazarded a glance at the women around us then spoke to me so softly that I could barely hear.\n\n\"Isn't it supposed to be hard?\" she whispered, \"Varis, I have never done this before...I wouldn't even know how to do this if it was hard. What do I do now?\" Now I looked around. I saw all the leering Guardians, leaning in towards us and trying to hear. I personified my hated fate with them, and leaned in towards my sister, working with my temporary ally. We had to get out of this, and that meant going through it.\n\n\"I am nervous and you're...this is difficult,\" I said and she looked a little pained. I hastened to explain, \"Everything you're doing is good. You look beautiful. You can't screw this part up as long as you don't use your teeth. Just do what feels...good,\" I offered and then gave a little shrug. Nislani gave me a wry look, but I could tell she was drawing strength from me. Hell, it was the first time she didn't look catatonic since our conversation earlier in the day. Her eyes dropped back down to the two inches of soft cock poking out of her hand.\n\nI saw her hesitate for a moment and then I watched as her thick lips part slightly. Her head leaned in towards my body. I felt her exhale sharply and warm air caressed the tip of my cock. And before that pleasant sensation faded, I felt my sister's tongue slide over my foreskin. My entire body felt tingly and my hands clenched into fists. I let out a low breath of air and felt a lump forming in my throat. This was so incredibly wrong, even if the sensation of my sister's tongue pressing against my foreskin was undeniably pleasant. \n\nDespite the fact that my body seemed to be reacting totally to Nislani's touch, I did manage to hear something from the side. Nislani's saliva was just starting to wet the bottom of the tip of my cock when a sharp gasp issued from the Guardian Party, or at least the wives of the barons. I turned my head slightly and could see Duchess Hain shaking her head.\n\n\"I can't believe she did it,\" I heard her whisper only slightly discretely under her breath.",
        "\"I am not surprised. What do you expect from degenerates?\" Lady \u00d6rnek responded. Even my 'allies' Lady Sadik and Duchess G\u00f6stermelik looked shocked and disgusted. On Kukla looked on totally unfazed. In fact, she was leaning in slightly, trying to get a better view. The Guardian Party, it seemed had been expecting this marriage to fall apart right here. They were looking forward to my failure. Whatever the politics of their husbands, these silly women were expecting to see a freak show and they were excited despite themselves to be seeing it.\n\nI felt anger rising up in my chest, shooting adrenaline through my system. How dare they! What had I ever failed at since I had become Sultanah? And who were these silly women to doubt me. Maybe I was feeding of Nislani's displeasure with these women as well. For the first time I had been married I felt a surge of passion run through my system. It was not passion for my sister, but passion to succeed. I just directed that feeling towards Nislani.\n\n\"Oh Nislani!\" I moaned, somewhat more loudly that I intended, \"That is divine. Don't stop!\" I gasped. It felt nice, but I admit to embellishing slightly. I looked down now at my sister. Her tongue was protruding slightly from her mouth, my soft cock was balanced on the tip. Her eyes were wide and she looked a bit stunned by my words. \"Just lick it. They think we can't,\" I hissed afterwards.\n\nAs I said, I did not know Nislani's history with these women at the time. I did not know that they humiliated her and derided her for weeks before this night. But I had, unwittingly, unlocked a certain pathway in her mind. As soon as the words fell from my lips, Nislani suddenly jumped to her task with passion that had been missing before. While we had already aligned ourselves against our enemy, I had suddenly put a human face on that enemy. A particular human face that Nislani needed to overcome both for her dignity and for her sanity. It was more than just them, but they encapsulated all of her shame nonetheless. She was bound to commit an act that should be humiliating. Her only recourse was to refuse to be humiliated, to embrace her fate to strike at her enemies. And Nislani attacked with vigor.\n\nNislani was not skilled at her task. It was clear she had been telling the truth when she said she had never done this before. But, what she lacked in experience, she made up for in fervor. Her hand remained wrapped around the base of my cock, actually squeezing me somewhat sharply. Her tongue poured out of her mouth, finding the soft flesh of my cock. She moved her tongue manically, covering every inch of my cock with her warm, soft flesh. She lapped at the base of my cock, running her tongue thickly against it. She rubbed the bottom of her tongue furiously over the top of my cock, trying to stretch her tongue out to touch as much area as possible. She titled my cock first one direction, and then the other, planting kisses on and lapping at the sides of my shaft. She even lift my cock upwards and found my balls, covering them with her mouth and bouncing them on her tongue.\n\nMy sister had no idea what she was doing but she had followed my advice to do anything but use her teeth and, as a result, she couldn't help but give me pleasure. My body reacted to her touch almost instantly. Part of it was just the sensation of her rough, wet tongue slipping across my flesh. Some of it was the determination that I was going to do what I had to do to finish my task as Sultanah. Another, largely unacknowledged aspect was the taboo of having my sister's mouth on my cock. But, perhaps the largest part, was simply that I was fired by passion and could feel Nislani's passion as well. Our shared fervor built on itself, growing more intense with each passing moment. And, to my only slightly surprise, after only a minute or two of having Nislani lap at my cock and lick my balls, I felt my shaft growing hard. \n\nAs my shaft expanded, growing harder and longer in Nislani's grip, she began to notice as well. In a few moments, my hard cock was sticking out straight from my body, pointing to my sister's lips. She looked up at me, her cheeks flushed. I saw that she was actually smiling. Not a happy or surprised smile, but a vicious smile. She was proud that she had excited me and I felt her hand trembling with excitement around my cock.\n\n\"Put the tip in your mouth and swirl your tongue around it,\" I ordered, somewhat louder now. I could still hear the baron's wives whispering to one another but I no longer cared. I could tell that I was going to succeed now and I felt a wave of ecstasy as a result. Moreover, Nislani's actions were undeniably gratifying, and I wanted to focus on the pleasure I felt, rather than focus on the stuffy wives at the foot of the bed.\n\nNislani nodded her head at my instructions and she placed her tongue at the base of my cock, right where it met my balls. She made her tongue rigid, pointing the tip of her tongue against my skin. Then, slowly, she started to pull her head back, dragging her tongue alone the shaft of my cock. She traced the bulging vein on the bottom of my cock, keeping pressure on it. I felt a delightful, creeping feeling run up my spine as Nislani moved and I held my breath. Finally, Nislani's tongue slipped around the curve of the tip of my cock and then it was pressed against her lips. Nislani didn't hesitate, she opened her mouth and let the tip of my cock slip inside.\n\nI felt Nislani's lips close around the tip of my cock. Her mouth felt humid and inviting. I looked down at her face, her eyes were open and she was looking up at me. Her face...it was so strange. For a moment, it felt and looked like I was on my knees before myself, sucking my own cock. But I did not have time to focus on this strange fact or to really consider the implications of having my sister sucking on my cock. Because, almost as soon as the tip of my hard cock was pressed into the wet, sticky confines of Nislani's mouth, her tongue had found me. Once again, Nislani did not know what she was doing. But this was even less important now. Nislani sucked on my cock slightly, making a gently vacuum in her mouth, pulling my skin into her lips. Her tongue began to swirl all around the tip, touching every inch it and bathing it in her saliva. For a long while I did not move. I stood rigid on the floor, actually rising up onto my tiptoes, closing my eyes, and just enjoying the sensation of the rough, wet tongue gliding over my skin.\n\nInstinctively, Nislani could tell that something more was needed. As my cock was rigid now, her hand slipped off the base. In fact, she had been squeezing so tightly that she had been holding me back slightly. I let out a low breath as blood poured into my cock, making it harder than ever before, pushing more tightly into Nislani's mouth. Which was, apparently, just what she wanted. She opened her lips slightly wider, breaking the vacuum on my cock. And she began to press her face in towards my body. Slowly, my cock started to slip deeper into my sister's mouth. The whole while, she moved her tongue frantically around on my cock, covering it in her saliva and caressing it with her movements. In a few seconds, more than half of my cock had disappeared into my sister's mouth and she gagged violently, her eyes filling with tears.\n\nThe sensation was too much for me. The very end of Nislani's throat squeezed tightly around the tip of my cock as she gagged. Her tongue moved desperately around the bottom of my shaft. And, in an apparent bit to steady herself, Nislani's left hand rose up, finding my balls and squeezing them gently in her soft fingers. My cock felt like it was going to burst and there was simply too many sensations and emotions swirling in my overheated brain. I kept breathing in deeper and deeper, trying to catch my breath, but always forgetting to breathe out. My knees shook and I spread my feet slightly, to maintain my balance. My eyes were open now and I looked down at my sister's beautiful face, shocked by the feelings I felt toward her. I needed something to release the tension.\n\nWithout thought, both of my hands rose from my sides. My left hand quickly found its way to my sister. I felt my hand drop down on to the top of her hand, sinking into her soft hair. My fingers gripped loosely around her head, giving me something to balance on. More importantly, my right hand shot up and found my right breast. My palm sunk into my cool, slightly damp flesh and I felt the heft of my breast in my hand. Most of my fingers sunk deeply into my breast, squeezing at it. My forefinger and thumb found my hardened nipple, poking out straight, just like my cock below. I pinched the hard nub of flesh between my fingers, squeezing it and feeling the release of tension as the delicious pain registered in my brain. While my sister's tongue swirled over my cock, I squeezed my finger and forefinger together, rolling my hard nipple around and lessening the unbearable anxiety I felt in my chest. Finally, I was able to let out a breath of air, feeling light-headed and tingly.\n\nNislani was not done trying to get more and more of my cock into her throat. Tears were running down her cheeks from choking, but her beautiful eyes were still looking at me intently. Her tongue continued to lap at my cock in her mouth, coating it in slippery saliva, lubricating it thickly. She pushed her lips forward more, letting them slip over my silky flesh. She choked again, but as she recovered her pushed further. Her fingers were still playing with my balls, poking and rolling them gently. An inch of my cock still remained outside of Nislani's mouth, and she pulled my balls forward, pressing my scrotum into her chin. Nislani moaned as she felt the soft skin against her face and the vibrations of her moan rocketed through my body.\n\n\"Oh shit Nislani!\" I groaned back, my hand gripping tighter on her head.\n\n\"Cease!\" Cin said suddenly and with great force. My head shot up and I looked at her, confused. I looked down at my sister, my cock still buried in her mouth, her tongue frozen on the underside of my shaft. She looked out of the corner of her eye and Cin as well. Suddenly where I was and what I was doing returned to me. It would not do any good to shoot my seed down my sister's throat. There was a time and place for that in the ceremony. Cin had stopped us before it was too late. Time to move on to the next step. I stepped back slightly, letting my cock slip from between Nislani's lips. She did not move, but let my cock slide from her body. Pulling out of her mouth felt almost as good as going in. Once the tip of my cock emerged, glistening, from my sister's mouth, I noticed a long, thin string of saliva dripping from my sister's chin. My cock twitched at the naughtiness of the vision.\n\n\"Nislani,\" Kardes said suddenly, her voice sounding thick. I turned and looked at her and saw that her face was red. She saw me looking and her eyes darted away, embarrassed. I saw her nipples, hard, through her robe and guessed the cause of her embarrassment. But there was no time to dwell on it, she was moving to the next stage in the ceremony, \"to demonstrate your dignity as a royal, you must go to the window overlooking the square and give this speech to the common people below. You must maintain your composure at all costs,\" she said. \n\nEven as she spoke, the wives of the barons were moving toward her. They quickly pulled her up to her feet (Kukla wiped the saliva from her chin and looked at me as she surreptitiously licked her fingers clean). Nislani continued to look straight in my eyes as the Guardians prepared her for the next step. Lady Sadik handed Nislani the script of her speech (it was the same speech that had been given by ever consort for generations) and pointed out the correct window. While she was doing this, the other women were working on Nislani's skirt. In a few quick motions they had unhooked the back of the skirt, pulled it down my sister's legs, and then thrown it on the floor, discarded.\n\nMy sister now stood before me, wearing only her tight-fitting top. Her legs, stomach, hips, and cunny, were now completely exposed. My eyes instantly dropped to that portion of Nislani's body. I saw her narrow waist, flat stomach, and wide hips that were so similar to mine. Her long, legs and delicate feet were almost indistinguishable from my own. But of course, there was an extremely apparent difference between my sister's body and my own. There, between her legs, my sister had only a small, pink slit that terminated in a small nub of a clitoris several inches below her belly button. Her lips were tight together and the skin of mound was smooth and evenly colored. She waxed her body clean of hair and her cunny looked stunningly perfect. For a brief second I had a vision of what my body would look like if I were not cursed and blessed as the Sultanah.\n\nBut I did not have much time to consider the mysteries of life. In a few seconds, the hands of the Guardians were on my sister's shoulder. They turned her around quickly and shoved her towards the window. Nislani stumbled as they pushed her but they did not stop. In a few seconds, Nislani was standing directly in front of the curtain at the window. She looked back over her shoulder briefly at me, and then faced forward once again. Lady Sadik and Duchess Hain stood on either side of her, clutching the curtain.\n\n\"Begin your speech,\" Kardes ordered from beside the bed. With that Lady Sadik and Duchess Hain quickly pulled the top part of the curtain apart. Kukla then pushed my sister's shoulder forward, sending her head and chest through the open window. Lady Sadik and Duchess Hain then quickly closed the curtain around Nislani's body, tying it in place. Now Nislani's head, arms, chest, and the top of her stomach were protruding, fully clothed, through the window over the crowd below. Her hips, ass, legs, and cunny, exposed and bent forward slightly, were still covered in the room behind her. \n\n\"It is the Consort!\" a voice called from the street below, noticing my sister at the appointed place at the appointed time. At first there was a low mumbling sound outside and then a great cheer rose up as the people welcomed their new Sultanah-Consort. I saw Nislani's ass and legs clench slightly, nervous, as she looked at the crowd below. I heard a strange squeaky sound as she tried to speak. She then cleared her throat, paused a minute longer, and began her speech.\n\n\"People of \u015eehir,\" she started and the continued on with the prepared remarks. I was not listening.\n\n\"Test your wife's dignity,\" Lady Sadik intoned impertinently, \"For only in testing her to the utmost of your ability will you ensure that she deserves to sit by your side.\"\n\nOf course, I knew what I was supposed to do. Nislani, standing in the window, knew what I was supposed to do. As did all of the other ladies present. In fact, all of the Royals and nobles in the palace were aware of the purpose of this particular ceremony. Only the people below were unaware of the exact nature of the speech they were about to hear. They simply knew that Nislani, like all consorts before her, was required to lean from the window and speak to the people. She was to introduce herself and to make a connection with them. She would promise to think first of the people and to be their intermediary with the ruler. It consisted mostly of platitudes but was an attempt to bind the people to the monarchy. The people accepted it as that and likely never thought more of it. They likely never wondered why they never saw the consort's legs during the speech. Maybe they noticed that the Consort often looked flushed, stumbled, and seemed nervous. But likely they figured it was simply nerves caused by the need to speak.\n\nPerhaps they would have been surprised to see me moving quickly across the room, naked with my breasts and cock bouncing as I moved. Perhaps they would have been shocked to see me drop down to my knees behind Nislani, placing my hands on her thighs. But the entire idea of the ceremony was that Nislani was to ensure that they never knew what happened behind the curtain. And I was supposed to put her to the test.\n\nAnd so, there I was on my knees behind my sister. I had my hands on both of her thighs and my cock was pressed slightly against her right calf. Her body was trembling and she was reading out her promises and obligations with a mechanical nervousness. \n\nI rose up slightly on my knees, allowing my cock to scrape along the back of my sister's leg, giving me a slightly chill. I felt Nislani's body react, she knew what was touching her. I knew I had to commit completely because the ceremony would take as long as necessary. I also knew that I had to maintain my seed for the third and final ceremony. Therefore, I quickly began my task, trying to bring the same intensity to it that Nislani had brought to her role.\n\nI was kneeling just a few inches away from my sister's body. Her large, round ass was directly in my face and I could see her cunny under her body, facing down toward the floor. I could see, even in the low light, that her cunny lips were glistening slightly. Her aroma was overwhelming, a thick musky scent that filled my nose and seemed to coat my tongue. Nislani had become excited by our actions thus far. Somehow, this made my chest flutter with excitement. I had caused this reaction in this woman. I noticed that it was easier to think this way now, when I could not see my sister's face.\n\nNislani's excitement was contagious. I wrapped my left hand around my sister's thigh and then lifted my right hand up between her legs. Nislani's body trembled as she felt my body moving against her and I heard her voice shake slightly. After a few moments, my hand was suspended in the air, just below my sister's slippery cunny. I could feel the heat coming off of her body and my cock ached as it rubbed more fully against her leg.\n\nSlowly, my fingers made their way up to my sister's cunny. I didn't want to move too quickly, didn't want my sister to be startled. At the same time, I was nervous. I was excited about touching her, I wanted to make this feel pleasurable. I can't explain why, but it was part of my calculation. Finally, I felt my fingers gently stroke against my sister's wet lips. I heard her gasp slightly, but she continued speaking as if nothing had happened. \n\nMy sister's cunny felt incredibly warm and smooth to the touch. Her lips were dripping wet now and my fingers glided easily over her body. I felt the gentle rise of her mons, the puffy softness of her lips, and the sticky wetness of her slit with my slow, moving finger tips. Nislani's words became thicker in her mouth and her knees bent slightly, trying to get down onto my fingers. I kept moving my hand around, touching her everywhere and enjoying the feeling of her cunny against my skin.\n\nAfter some time spent in gentle, teasing touches, I heard Nislani let out a low sigh and almost moan at the end of a sentence. Her cunny actually dripped into my hand. I knew that she needed more. With a careful movement of my wrist, finger tips found themselves buried slightly in the folds of my sister's cunny. All except one, my forefinger, instead, had found her clitoris. I placed the pad of my finger gently on the little button, pressing it gently with just the slightest amount of pressure.\n\n\"Oh Gunes...\"my sister moaned suddenly, I could heard her through the curtain, \"Please preserve me and help me to keep these oaths!\" she recovered nicely. To reward her, I started to rotate my finger in tight little circles around her clitoris. I offered only the slightest pressure and her cunny was so wet that she provided absolutely no friction. I could hear the panting in Nislani's voice, even as she continued her speech.\n\nI was leaning in closely to Nislani's body now, my fingers sliding over her cunny. My head was placed against the back of her thigh, my hair hanging down her leg. From where I was located, Nislani's scent was becoming overpowering. It had grown thicker, muskier, and I breathed her into my lungs. Her split cunny was dripping down onto my hands and I knew that her flavor would be even stronger than her aroma.",
        "Whatever prohibitions normally attached to the Sultanah tasting a woman's body was suspended here. Beyond the fact that this was my wife and not a social inferior, the ceremony practically begged for such contact. I circled my finger around on my sister's clit once more and breathed her in deeply. Then, I turned my face towards her. \n\nGiven her position, I could not reach her clit with my tongue, as I might've like to. I kept my finger there, circling, instead. But, with her ass poked back and up slightly, Nislani's now aroused cunny was essentially open and turned back, dripping, towards my face. The excitement I felt in that moment and the effect that Nislani's body was having on me were overpowering. As I looked at her tight, dripping pink lips, I lost control and dove in. \n\nI felt Nislani's body go rigid and she stopped speaking for a minute as my tongue plunged into her cunny. I felt the tight walls of her body wrap around my tongue, pulling at it. Her cunny felt hot and thick liquid instantly coated my tongue. Nislani's flavor was incredible, a strong musky flavor with delicate, aromatic notes underneath. My tongue plunged inside of her, lapping at her ridged insides and trying to push into her as deeply as possible. The rest of the world seemed to melt away and I focused entirely on tasting Nislani's insides, touching every part of her with my tongue, while my fingers continued to probe at her clit. I could not even tell if Nislani was keeping up with her speech, I focused entirely on the task at hand. My cock ached terrible and my balls sagged low against my body, filling rapidly.\n\nI don't know how long I continued in this way, on my knees with my tongue buried in my sister's cunny. But I do remember what made me stop. I was pressed tightly against my sister, one of my ears actually resting on her ass cheek. But my other ear was open and, despite my wild excitement, I could hear. And, in fact, I heard one of the Guardians behind me.\n\n\"It is one of those things,\" she said, \"You can't look away.\"\n\n\"It is better than most of these ceremonies,\" I heard Kukla said defensively.\n\n\"It is disgusting,\" I heard the first voice say, recognizing it as Duchess Hain, \"Like two stupid animals that have gotten stuck together in a barn yard.\" \n\nOnce again, I felt the anger rising inside of me. I had not chosen this tradition and I had not decided that I would bury my head between my sister's legs. I had been forced to do this by tradition and would have gladly skipped it if that were possible. But, in being made to do this, I had made the most of it. I had allowed my body to react to the stimuli. Now these women speaking loudly, trying to make me feel ashamed of doing my duty. They created the world where I had to do this, now I would make them pay. If they thought this was disgusting...\n\nI quickly pulled my head back out from my sister's cunny. My cheeks and face were lathered in her juices and her scent was thick in my nose. I heard Nislani whimper slightly under her breath, but she was still speaking. I looked to the side. Nislani's ass, like mine, was large, and her ass sat firm and high above her thighs. I moved my free hand from Nislani's thigh and quickly raised it up, sinking it into the firm, hot flesh of Nislani's ass. My face was still resting against her other cheek and I pressed slightly into her, gaining leverage. Then, I used my hand to pull Nislani's ass cheeks apart. There, in the center of her ass, was the small, purplish brown rosebud of my sister' asshole. It was just a small, crinkled spot in the large expanse of soft, smooth flesh that made up her ass. I blew on it slightly and watched it pucker. Nislani shivered.\n\n\"Oh my...\" a voice said, \"What is she doing now?\"\n\nAs if that were my cue, I instantly pushed my face into Nislani's body. I felt the firm, warm flesh of Nislani's ass as it wrapped around my face. I even felt my nose sinking into the skin at the base of her spine. Nislani's scent, so strong at her cunny, was here was well. It was sharper, more tart that it had been, but still recognizable. But most importantly, I felt my lips pressing against the tights fold of Nislani's asshole.\n\n\"Revolting!\" someone said behind me and I smiled into my sister's asshole. Then I got to work. At first, I just pressed my lips into Nislani's asshole, feeling the folds pressing against my skin. Each kiss I planted on her body caused my sister to jump. \n\nAfter a few seconds, this wasn't enough for me. My lips part and I slowly pushed my tongue out between my teeth. I felt my tongue press into the wrinkles of my sister's asshole and heard her gasp in her speech. She actually stopped talking for a few seconds before returning to her script. As she began to speak again, I pushed more and more of my tongue out of my mouth. Soon my tongue was coiled against the tight skin of my sister's asshole. The flavor of her skin was salty and tangy and it made my heart beat faster. Her scent had grown more intense and I could taste it mixing on my tongue. My cock was aching and I found myself rubbing against my sister's leg inadvertently. \n\nI began to swirl my tongue around on Nislani's asshole. I kept my face tight against Nislani's body and there was essentially not enough space for me tongue to fit outside of my mouth. Soon, Nislani's asshole was dripping with my saliva. Her body was shaking and, for a brief instant, her asshole relaxed and she sighed. Suddenly, my tongue plunged deeply into my sister's asshole. I was surprised by how quickly it happened. \n\nMy body tingled as I came to terms with what I was feeling. Nislani's asshole was squeezed around my tongue with a vice grip, but I was surprisingly deep inside of her. The walls of her asshole were smooth and rubbery, but constricted hard around me. She was incredibly hot inside and somewhat wet, but mostly from my spit. The flavor I had tasted outside of her asshole was here, but concentrated, more intense. I groaned, savoring the taste and surprising myself with how much I liked it. I think some of the reason I liked it so much was the women behind me had seen what happened and they were thoroughly disgusted. I welcomed their disgusted, twitching my tongue inside of my sister's asshole, massaging her insides. \n\nThe whole while, my hand remained on Nislani's clit, rubbing it furiously, and causing her body to tighten and her muscles to lock. My cock was flying furiously against Nislani's calf and I could feel my cunny dripping down my leg. I did not think about what I was doing or who I was doing it to. I just thought about my discomfort with the situation and my hatred for my fate and I poured that into my actions, feeling the tension rise inside of me and...\n\n\"Cease!\" Cin said again. Once again, drawn by the force of her words I stopped moving. My tongue still buried in Nislani's ass, my hand froze on her cunny. For a moment, Nislani stopped speaking. Once again, Cin had stopped us before we went too far.\n\n\"Conclude your remarks,\" Kardes said, her voice sounding small and nervous. Nislani completed the sentence she was one, then finished up in the traditional manner.\n\n\"Thank you all, and I look forward to serving as your Royal Liaison in the future,\" she stated and then quickly disappeared back inside the curtain. No one outside ever knew why the speeches of this kind ended so abruptly or why some Consorts said more than others.\n\nBut that wasn't my concern. Once Nislani was back in the room, she turned quickly towards me. Her cheeks were very red, her hair was tossed slightly askew by the wind and her eyes were feverishly bright. I had never seen her look more beautiful in my life. Her looks retained their na\u00efvet\u00e9, her innocence, and her vivacity and somehow shed her immaturity, her pettiness, and her ignorance. If she was disgusted by my actions, she didn't show it. Instead, she appeared excited to the point of frenzy. I rose up so that I was standing in front of her, my cock twitching between my legs. I was barely breathing and I could see that Nislani was panting enough for both of us, her breasts rising and falling rapidly. We were both on the knife's edge, barely able to control ourselves.\n\n\"Nislani, to prove your dedication to the Empire as the Consort...\" We heard Kardes saying. But more important, we could hear the women behind us, snickering. \n\n\"Fuck them Varis. Fuck all of this,\" My sister whispered, \"Put a baby in me.\" That was enough for me. I did not hear Kardes finish her sentence and say \"accept your wife's seed.\" I knew that was what she was saying, but I wasn't paying attention. Instead, I was reaching forward quickly to tear Nislani's shirt from her body, exposing her perky young breasts and leaving her as naked as I was. She shuffled it off, as though desperate to be free from its embrace. Then, I dropped instantly down onto the floor with Nislani. We didn't want to wait to go to the bed, we wanted to do this here and now. To shove it right in the face of fate and its Guardians. \n\nNislani dropped back onto the cold marble floor on her back. She instantly spread her legs. I saw her cunny, glistening with juices. I could see my saliva where the loaves of her ass where still visible. Her beautiful breasts were spread across her chest, her nipples hard. She had her arms outstretched and she was smiling. \n\nI wildly dove between my sister's legs, throwing my body into hers. The first thing I felt was my breasts pressing into my sister's breasts. Our soft mounds of flesh squeezed together, becoming firm, but comfortable. The rest of my body closed the gap as my stomach landed on Nislani's quivering stomach and my hips pressed hard against hers. Most importantly, I felt my cock slap against Nislani's clitoris and rub across the length of her cunny. Nislani gasped.\n\n\"Oh Gunes, Varis get it inside of me. I need it,\" Nislani moaned. My mouth went dry and I looked into her eyes, seeing the need there. I felt her hips moving underneath of me and I moved my hips as well. I was about to reach down and adjust my cock with my hand, but our hips slipped into line and I felt the tip of my cock suddenly poke against the opening of my sister's cunny. Nislani was panting wildly now and shoving her hips down. For a moment I wondered if we'd both lost our minds, we seemed to be in a thoughtless frenzy. But that rational thought melted as Nislani shoved down hard, driving the tip of my cock into her body.\n\n\"Oh! Oh! Oh!\" Nislani moaned.\n\n\"Gunes!\" I cried in response. Nislani was even tighter around my cock that she had been around my tongue. But somehow wetter too. Her body seemed to pull on mine and, with seemingly no effort on my part, I suddenly found that my cock was sinking deeper and deeper into Nislani. Her cunny walls wrapped tight around my cock, squeezing and massaging me expertly. Nislani may have been inexperienced but her body knew exactly what it was doing. In a moment, my cock was buried completely in her body, my balls pressing against her wet ass.\n\nNeither Nislani nor I were in any position to take our time. Almost as soon as my cock had completely entered Nislani's body, I was pulling it back out. As soon as the tip was the only thing remaining in, I slammed it home. Nislani moaned and wrapped her arms around me. I knew she must feel some pain, this was the first time she had ever done this. But she wanted it so badly she showed no signs of reticence. Instead, I felt her hips thrusting against me. I pulled back out and fired home again. Soon we were thrashing wildly on the floor, my cock pounding in and out of my sister's cunny. We were both moaning loudly, our eyes locked together.\n\nIt was impossible that we could go on for long at that pace. We were both already so wound up by our prior actions and we were fucking wildly. All the hatred I felt for my fate, for the Guardians, hell for Nislani, was put into my actions. I could feel Nislani's hate burning up as well. We converted it into pure sexual energy and threw it at one another. I cannot describe the feelings I had in those few moments, a lifetime of frustration boiled down to its purest for and then ejected in sex. It felt so good and also so...emptying. I cannot do the sensation justice. I never felt anything like it, before or since.\n\nI don't know who started first. In fact, I think we might both have started our climax at the exact same moment. All I know is that I thrust my cock into my sister one time, extremely hard. And it felt like her cunny grabbed me tightly. I could feel the muscles rippling inside of her body. I felt myself go tense at the exact moment I felt Nislani's body going rigid underneath of me. I closed my eyes and heard a low croak issue from my throat, and I could heard Nislani moaning as well. Her arms pulled me in tighter and her cunny milked my cock expertly. \n\nSuddenly, I felt a sudden burst of pure energy. I felt the world melt away and suddenly there was an intense, soothing wave that poured from my sister's cunny, wrapped all over me and turned my bones to jelly. The only bodily sensation I could feel was the seizing of my cock as gob after gob of thick seed poured into my sister's cunny. We had done it, the ceremony was completed. We had done our duty and accepted our fates.\n\nA few seconds later, my seed spent, I collapsed onto my side next to Nislani. The marble felt cool on my sweat-dampened skin and I panted furiously to catch my breath. I could see Nislani breathing also, her hands were down between her legs, feeling the seed overflowing her cunny. I felt empty, drained entirely. There was a hush in the room and it seemed no one really understood what had just happened. The only sound was that of desperate breathing. Though, I thought I could hear the drip of my seed as it dripped onto the marble floor from my sister's cunny. \n\n\"The marriage has been consummated,\" Kardes said, \"Nislani has proven herself and able Consort. The Guardians wish you both a lifetime of happiness. The ceremony is over. The Guardians are hereby disbanded. We may now leave.\" Kardes spoke quickly as if she was desperate for the ceremony to be over and to be out of the room. Cin and the priestess seemed ready to leave as well, more bored by the ceremony than disgusted. Cin had already achieved what she wanted, she had performed the wedding ceremony and preached a sermon about Gunes to the masses. Watching people who already believed fuck one another was really beyond the interest of the priestesses.\n\n\"You've done well Sultanah...And the Consort as well. I am proud of you both for doing your duty,\" Cin said. Agiz and Got both congratulated us quickly and then filed out of the room to return to the party. Cin was hoping to work with the aristocrats while they were drunk, to get commitment on conversion. The baron's wives moved slightly slower. I could still hear them talking, especially once Cin and Kardes were out of the room.\n\n\"Disgusting...\"\n\n\"It is like they wanted to do it...\"\n\n\"They enjoyed it, we all must do what we must but we don't have to like it...\"\n\n\"I will never get the image from my mind...\"\n\n\"You are all exaggerating, it went well,\" Kukla said. I turned for a moment to watch as the childish women collected themselves and walked from my chambers. But even as they expressed their disgust, I noticed that their faces were flushed and that their nipples were sticking out hard through their robes. They sort of slinked from the room and I could tell their cunnies were wet. None of these women had ever been fucked like Nislani was fucked, with their tired old men scrambling over them. They had never had someone abandon their senses to fuck them beyond the point of reason. They might have legitimately been disgusted. But they were jealous too. \n\nI laughed a little to myself and then turned to kiss Nislani on the cheek, to thank her for doing her duty and for helping her dynasty. Apparently, Nislani had had the same impulse, and she turned her face towards mine on the floor at the exact same moment. Without planning, Nislani and I suddenly found our lips pressed together as we panted, naked, on the floor. For a moment we stopped and our eyes opened, confused. We giggled nervously but I saw Nislani's eyes grow softer. Mine did the same. I pressed my lips more easily into my wife's, and we shared our first real kiss.\n\nEnd Chapter 10\n\n*****\n\nNote: I honestly write so that I can hear the comments you all give. So please just tell me what you think. Even if it is just a sentence or two (though I always prefer more). Consider that your payment for a free story. And if you like this, I beg you to read my other stories and comment on them too. I know who my loyal readers are and I really appreciate you. Thanks!\n\nYKN\n\nP.S. I do one edit of my work and I try to be thorough. But I figure when it comes to handing out free erotica, you all would be better served getting it fast (if a little rough), than waiting for me to polish it like I was getting paid for my work. Especially on a massive project like this, it took a year to write and could take longer to edit. So, in short, I know there are some errors and I don't really care that much. Don't complain about the soundtrack in your porno, don't sweat the typos in your erotica. Thanks.\n\nYKN"
    ],
    "authorname": "YKN4949",
    "tags": [
        "epic",
        "medieval",
        "serial",
        "analingus",
        "hermaphrodite",
        "shemale on female",
        "tranny on female",
        "incest",
        "exhibition",
        "reluctant"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/the-sultanah-ch-10"
}
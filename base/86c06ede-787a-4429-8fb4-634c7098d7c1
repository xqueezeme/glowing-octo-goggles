{
    "title": "Alexis",
    "pages": [
        "---\n\nAuthor's notes: This is a long one. The image of Alexis sitting in a sunbeam occurred to me one day, and I had to write this to get it out of my head. I hope you enjoy reading it as much as I enjoyed writing it. \n\n---\n\nShe's sitting in that way again - with her legs tucked under her, leaning against the arm of the sofa, hair trailing down over her shoulder. She's humming to herself; sheet music scattered around her. Wide French doors let what little sunlight March gives us into our lounge, giving us a view of the garden which still has the occasional patch of snow. It makes her hair flame like a golden halo.\n\nThe couch is Lexi's favourite place to study her music. She's gifted, and if she dedicated herself to it she could be great. But that's not Lexi's way. Lexi loves to have lots of interests, all going on at once. She says it makes her feel alive and that she gets bored without distractions.\n\nOf course I'm biased. She's my sister. But she's really that good.\n\nMyself, on the other hand? Not much to tell. Three years younger, neither as musical nor as pretty, and always a wallflower. I love my books and my Mac. People always give me crap about it - a girl who codes. Technical aptitude always falls behind the fact that I have breasts. \n\nDoesn't matter, I used school and university as a conduit to what I wanted, which was a career tinkering with gadgets. Jeans and tee-shirts for me - I was the one who was always in trouble for tracking mud through the house; Lexi dreamed of castles and princesses.\n\nLexi gives me grief for it; tells me I've got to take more care of my appearance. Sometimes I do, but mostly it's hair back in a ponytail and that's good enough. Anything more would be a waste, anyway. I don't socialise much outside of a few close friends. \n\nMy back's sore - bad posture. Sitting at the table is a silly thing to do; the height is wrong for the laptop and I always get kinks in the neck from it. But it's warm in this part of the house, and there's always the chance Lexi will start to play something.\n\nThat's my favourite thing, hearing her play. It makes the shadows around the edges of things go away for a while.\n\nMum and Dad died in a car crash when I was fifteen. Lexi had just turned eighteen and was about to head off to University, but she stayed to make sure I was ok and ended up studying her undergraduate degree via correspondence instead. It's been the two of us since then, bar visits from relatives and the McKintoshes down the road who helped out immediately after and became a kind of extended family to us in the weeks and months after... \n\nMum had always been a wise bird and had made sure that there were enough endowments to pay off the house and send both of us to higher education. Lexi had waitressed for extra spending money and I'd done some small websites for local businesses once I was studying. We'd been ok, bar the scars. Lexi struggles more with it, she's got the soul of an artist. \n\nMe, I just pack it away and try not to open the box it's in. It still hurts too much to open it up, so I try to leave it alone.\n\nSometimes I can almost forget it's there at all.\n\n---\n\n'You want some tea, Lex?' I call out. \n\nNo answer - she's clearly deep in whatever she's humming. I pull down a cup for both of us, make myself some coffee and a chamomile for her. Lexi loves her herbal teas and I try to keep the cupboard stocked. One of the little things I do for her to say thanks.\n\nMum loved chamomile too. The smell always reminds me of her.\n\nWaiting for it to brew gives me (in some ways unwelcome) time to think. Our house is large and we haven't changed much since Mum and Dad passed. I took over Dad's study (mainly because of his lovely antique desk and leather chair) and have turned it into my quiet room. But we still sleep in our old rooms; we've left Mum and Dad's pretty much as it was. Every time we talk about cleaning it out we wind up not doing anything. And so we live, Lexi with her music and hobbies and me with my coding, running and climbing...\n\nI turf the used bag into the compost box and ferry the cups back through to the lounge.\n\n'Lexi?'\n\nShe starts, then looks up and smiles. 'Sorry, Robs. Woolgathering again'. She shifts the music from her lap and takes the mug.\n\n'Thanks. I needed a cuppa.'\n\n'Who's wool were you gathering?' I ask, teasingly.\n\n'Nobody's in particular', she returns. 'Just thinking that I should go for a walk or something.' \n\nThis is unusual for her, Lexi's an indoors girl who's sense of a nice day out is to sit in the garden under a tree.\n\n'There's a nice gentle walk I do sometimes...' I offer, hopefully.\n\n'Oh?', says Lexi, interested.\n\n'Yeah, it goes down along the river and over the old weir. There're some stones out in the middle I like to sit on'.\n\n'In this weather?' Lexi asks.\n\n'You know the cold doesn't bug me, and it's nice to be outside in the wind. Want me to come with and show you?'\n\nLexi chews her lip, then smiles. 'Yeah. Lets go walkies! I need some fresh air.'\n\nWe grab hats and coats and pull on some sneakers. March is still cold in our part of the country, with frequent rain and sometimes even snow. So we bundle up warmly before heading out. It's mostly overcast, and there's a breeze, but the sun breaks through sometimes and it's a lovely day, my favourite kind of day. \n\nOur house is part of a cul-de-sac that borders onto woodlands, and so we make our way out through the garden and the old wooden gate at the back. I notice the birches are starting to bud. But mostly I'm just watching Lexi. She walks with a dancer's grace, making me feel like I plod. One of her prior boyfriends once called her Elfin; she has that kind of air about her. The effect is admittedly slightly ruined, however, by the washed-out pink knitted cap she's clamped down over her head.\n\n'How far is it to the weir?' she asks. We'd been walking in silence till now.\n\n'Maybe ten minutes. A kilometre or so', I reply. 'I can run it in five minutes or so.'\n\n'Freak', she responds with a laugh. It's always been a joke for her - Lexi gets up before me but I always find her wrapped up in a blanket on the sofa as I head out for my early morning run. Lexi eats like a bird and has a slim build; I have to work hard to keep mine. Of course it means I could probably bench-press her if I had to. I've joked with her before that she's the water that wears the cliff-face (me) down.\n\n'Some of us weren't born with the right genes' I mutter at her.\n\n'Crap, Robs' she says. 'I'd kill for your abs'.\n\nWe both laugh, hers free and mine somewhat self-conscious. I sneak a quick look at her; she's smiling and staring off into the distance as we walk. Some wisps of her hair have broken free from her cap; it makes her look even younger than she is.\n\n'Come climb with me and you'll have your own ones' I return.\n\n'Yuck, at the gym? No thanks. Too many creepy old men.'\n\nLexi has a thing about being watched. Strangely enough, she loves being a soloist. So it's situational, complex, like both of us.\n\n'Most of them are our age, Lex'.\n\n'Fine. Too many creepy men. Creep central. Lurching man-children in ill-fitting hoodies trying to be Rocky Balboa.'\n\nShe says this with a sardonic grin. Lexi has a lovely grasp of language and likes to play with words. Sometimes I manage to get her to read to me, and these are some of my favourite times with her. We've passed many winter evenings, the two of us. We closed ranks once we were alone and it's seldom that we let anyone else into our space long-term. This has cost Lexi some boyfriends. But truthfully I think she's also got a twist to the soul that makes her happier by herself.\n\n'They're just looking for luuuuuurve' I drawl. She snorts, takes my arm and walks closer. Our hips bump occasionally. To be fair, I'm more hip than she is.\n\n'Aren't you?' she asks.\n\n'Aren't I what?'\n\n'Looking for love?'\n\nI miss a step and stumble; she yanks me back before I can face-plant.\n\n'What do you mean?' I ask, a little bit flustered.\n\n'I'm just curious. You're all grown up now. Yet I've never seen you with anyone, or even interested in anyone.'\n\n'Lex... ', I start, uncomfortably. Lexi loves to pry, but this is an area she's never dug into before, and it's unsettling for her to suddenly take an interest.\n\n'Spill it, Robs. I'm bored and restless and have wanderlust, and part of that is due to not knowing whether you're happy.'\n\nI walk in silence for a bit; I can feel her watching me.\n\n'Robyn Emily Blake, I asked you a question.'\n\nShe never calls me by my full name unless she's serious about something. I sigh. 'I'm not seeing anyone.' I try to keep my answer neutral.\n\n'Why not?'\n\n'Because', I huff.\n\n'Whyyyyyyyyyyy?' she wheedles.\n\nI can't help myself, I laugh. Lexi has this way of sounding impossibly cute and adorable. I'd liken it to the way a kitten demands attention. I'm powerless against it, and she knows it, the bitch.\n\n'Because I've never met anyone who interested me,' I respond. 'Lex, I went to Uni with a class of social misfits who couldn't see past the fact that I had two X chromosomes. I work with a bunch of lovely people who are to a first approximation neckbeards.' (She makes a sympathetic face here).\n\n'I gym and run as an outlet for frustration, not as a way to partake in a meat-market. And my climbing partners, while awesome, are just that, partners.'\n\n'So, no boys then.' she says.\n\n'No boys, no.'\n\nWe walk on for a bit.\n\n'Girls then?' she asks, mischievously.\n\n'Lexi!' I say, and barge her.\n\n'I knew it, it's girls!' she laughs.\n\n'Damnit, Lex, stop teasing me!'\n\nShe dodges my attempt to smack her, holds up her hands in capitulation and then comes back next to me, taking my arm again. We walk on, and I listen to the wind and think.\n\nThere was a boy who tried, once. James, someone I met during a first-year social at University. He was funny, but it petered out pretty quickly when I was clearly not interested in anything but friendship. Part of me was glad, the constant flirting was tiring. I've never been into men. Yes, they're fun, and some of them (like my climbers) are incredibly well built and attractive examples. But I've never felt that spark.\n\nI first noticed girls when I was 12. I was an awkward gangly freckled girl who didn't fit into the 'sugar, spice and everything nice' mould. I'd sooner play football than be inside learning to be cultured. I'd sooner be waist deep in a bog than be in a dress. This singled me out, and made me a target for ridicule throughout school. Loosing Mum and Dad made everything a million times worse, because I no longer had either of them to listen to me or hold me while I sobbed.\n\nBut I had Lexi. I told her everything. Everything, that is, except this.\n\n---\n\nWe've reached the weir, and I stop and take a deep breath, shoving aside my thoughts.\n\n'Here we are!' said Lexi. I shoot her a glance; she's looking around with unfeigned interest.\n\nI squat down and pull off my shoes and socks, then roll up my hiking trousers. Lexi watches me with amusement as I take a wincing step into the water (still cold in March!) and walk carefully from rock to submerged rock out to the large boulder a third of the way out into the river. While only maybe ten metres wide at most, the river is still swift and deep and stocked with trout; sometimes you can see the fish flitting along between the rocks. The weir upstream has a fish ladder, and water is churning over it.\n\nI love the noise of water and of wind in trees. Thus I regard the weir and the perch downstream as my personal sanctuary. I come here to think, and more often than I care to admit, to wallow in self-pity.\n\n'How's the water?' she calls.\n\n'Crisp', I call back. She's removed her shoes and is standing by the riverbank, looking dubious.\n\n'Don't be a ninny.' I call. 'It won't kill you.'\n\nShe steps gingerly out. The broad flat rocks are visible under the surface so it is difficult to misstep, but one crosses them cautiously. I hold out a hand and pull her up to the perch.\n\n'Welcome to my throne!' I say, with a mock bow. \n\n'If I fits I sits!' she laughs, and sits down. I flop down next to her and we lean companionably against one another. There is no sound but the wind and the water. It's lovely. Lexi's shoulder is warm against mine.\n\n'Why the sudden need to poke into my life?' I ask, after a while.\n\n'I worry about you' she responds. 'Always have, always will.'\n\nI snort. 'I'm a big girl, I can take care of myself'.\n\n'I know. But you're always going to be my baby sister, and I still feel responsible for you,' says Lexi. \n\nI frown. 'Lex, you raised me and polished me. You don't need to waste energy worrying about me. I have a great job and friends and I'm fine.'\n\nShe leans her head forward onto a knee and looks back up at me.\n\n'Are you?' she says, quietly.\n\nThe words 'Of course' die in my throat. For some reason, I think of Mum. Before I can help myself, I start to cry. \n\n'Goddamn it, Alexis!' I snarl, scrubbing furiously at my face. 'Why can't you just leave well enough alone?'\n\n'Because it's not in my nature.' she says, quietly. She sits back up and puts an arm around me, pulling me in close. 'Fess up, Robyn. I know you're unhappy. I've been watching you for longer than you know and I can see you're not all there.'\n\n'I don't want to talk about it.'\n\n'You need to open up to someone, Robs'.\n\n'No.'\n\nShe sighs, and we sit in quiet again for a while, apart from my sniffs as I try to regain composure. Lexi is humming, Dvorak I think. Slowly I calm again. The water's always helped me.\n\n'I'm lonely' she says, suddenly.\n\n'Why?' I respond, cautiously. Lexi doesn't share much of what goes on upstairs - I read her moods from her body and music. I'm good at that.\n\n'Just am. I miss Mum and Dad and the cousins. Also Andrew.' she says, quietly.\n\n'That cheating sack of guts?' I exclaim, unbelievingly.\n\nShe smiles a small, sad smile. 'Yeah, him. He was good for me, Robs.'\n\n'Except when he cheated on you.'\n\n'Yeah, well. I still miss him.' she sighs. 'He had such lovely strong arms, and he kissed so nicely.'\n\nI make a retch-face and she grins.\n\n'God, Alexis. I'd rather imagine you kissing Tony Blair than Andrew'.\n\nWe laugh quietly. She leans her head against me and we're quiet for a bit again.\n\n'He had a great tongue too...' she whispers.\n\nI can feel myself going bright red. Always have, always will, I could light up a room when I'm embarrassed. 'Alexis!' I exclaim.\n\n'Seriously, Robs, you're twenty-one and blushing like that? What on earth is wrong with you?' she jokes.\n\n'I just... I don't... eeuw... I don't want to know things like that!' I gasp, laughing.\n\nBut I'm lying, because suddenly the vision of my sister and Andrew is in my mind. I shudder.\n\n'You ever been with a guy, Robs?' she asks, curious.\n\n'Thousands' I respond sarcastically. 'I don't even feel it any more, it's like throwing a sausage down a corridor down there'. Vengeance is mine as I watch her eyes widen. She stifles a snort and then bursts out laughing. I bless my climbing friends for my expanded vocabulary and the incredibly foul images I'm now able to conjure.\n\n'Oh my god, Robyn. That's the grossest thing I've ever heard come out of your mouth.' she cackles. I join in, unable to help myself, and we descend into a whooping cacophony as we fully enjoy the image I just let loose.\n\nFinally, we're spent. I manage to take a deep breath, and sit up again.\n\n'I love this', she says. 'Just talking to you.'\n\n'Me too', I respond. 'We don't do it enough. I get caught up in the 'net and work'.\n\n'And I do in my music' she agrees. 'Ships passing in the night, you and I'.\n\n'At least we've got the same home port'.\n\nShe smiles agreement and shoulder bumps me. 'Come on Robs, sun will be going down soon and I'm getting a bit chilly.' We cross back to the riverbank and pull on socks and shoes over our damp feet, then squelch back home at a relaxed pace. Lexi's humming again; she's seldom truly quiet. I listen, but can't recognise the piece she's humming. So I amuse myself by watching for squirrels and listening to the sound of the woodland around us. \n\nSoon enough we're home, and a good job of it too because the clouds have started to crowd in from the Northwest and the light is dying. \n\n---\n\nI eye my Mac guiltily. I should be working, my company has a release going live in the next month and we're behind. But I'm tired and moody and, quite honestly, feeling a bit strung out after Lexi's probing earlier. So I'm going to pamper myself tonight. I head over to the fireplace and lay us a fire the way Dad taught me, feeling a bit sad at the thought of him. So emotional today, Robs. Ice maiden status temporarily revoked. I snort at that, and strike a match to the kindling.\n\nAs the light dims, the firelight warms the room and, also, my soul - I'm an elemental girl. I stand and stretch, then wander over to the sideboard and pour myself a tumbler of Talisker - Dad's favourite. I grab a pillow and a blanket from the cupboard and spread them on the floor, liberating some additional cushions from the couches along the way. Soon, I'm lying on my side, facing the fire and losing myself in the flames and the whisky.\n\nI must have dosed off at some point, because I wake up to Lexi shaking my shoulder and summoning me to supper. I stack some more wood on the fire to build it up again and head through to our kitchen. Dad had always wanted to knock through the wall to make the entire space open plan, but had never got round to it, and neither have Lexi or I since then. So suppers are always in the kitchen, at our battered old oak table with space for six and settings for just two.\n\n'Wine?' I ask her, and she nods distractedly as she dishes up. I grab us a bottle of some indeterminate Italian red and pour us both some, using our mismatched everyday glasses. Cooking is one of the few areas I can beat Lexi, but hers meals are still great and we've never been in any danger of starving. I favour Eastern, she favours Mediterranean, but an appreciation of food is something we share and so supper is time we always put work aside so that we can just be.\n\n'When's your next concert?' I ask her. Lexi works as a music teacher, but far prefers performing. She's a member of the Philharmonic Orchestra, and has in the past gone on tours to the States and the Continent.\n\n'In a few weeks time,' she returns. 'Mahler and Haydn'\n\n'Solos?' I ask.\n\n'Of course' she says, grinning.\n\n'Nice' I say. Something to look forward to, I love the concerts. \n\nShe smiles and stretches, and I catch myself watching her, again. I quickly drop my eyes and poke at my food some more. I'm not really especially hungry but the food is delicious and Lexi went through some effort to make it, so I try my best. I look up and find her watching me. She smiles as I take another bite, but the smile dies as I push the plate away and take a large sip of wine.\n\n'Robs, you're too skinny. You should eat more' she says.\n\n'Balls', I say. 'I don't have your metabolism, Lex. I explode if I don't gym my ass off'.\n\n'Hah!' she exclaims. 'At least you have an ass.'\n\n'Knock it off, Alexis. You're the most beautiful woman in the world.' I say without thinking.\n\n'Oh Robs, now you're fibbing.' she retorts, and leans back into the chair, sipping her wine.\n\nWhether it's the wine or the earlier probing or what, I don't know. But to hear my sister deprecating herself is too much for me to bear right now.\n\n'Bullshit, Lex!' I explode. 'Christ, have you ever looked at yourself? You're as graceful as a dancer and as lithe as a fucking cat and you say you're not gorgeous? Bullshit!' \n\nShe's watching me, wild eyed, but I don't care anymore.\n\n'You could be a model, Lexi, and your face is stunning. You're beautiful, you're sexy, you're a goddamn concert cellist, you're pretty much every man's wet dream, so stop talking yourself down right now, do you hear me!' I shout.",
        "'Whoa, Robs, calm down! I wasn't talking myself down!' she protests.\n\n'Yes, you were, and don't you ever dare do it in front of me again!'\n\nI get up and storm back into the lounge, to flump down and stare at the fire. I can feel the embarrassment at my overreaction crawling its way up my throat to my face. But I sit and sulk.\n\nIt can't have been long before Alexis walks through to the lounge.\n\n---\n\n'Mind if I sit?'\n\n'Knock yourself out, Lexi.' \n\nShe lowers herself down on the blanket next to me. I shoot her a glance, then look away.\n\n'Sorry for upsetting you, Robs. I was just teasing.'\n\n'Maybe, but it hurts me when you talk trash about yourself.'\n\n'Why?'\n\n'Because you're my awesome big sister and I hate that you might not love yourself as much as I love you.'\n\n'Robs, listen... '\n\n'No, you listen, Lex. You're an amazing, caring, gentle woman. You stayed here to look after me when you could have made it big elsewhere. I will not sit here and listen to you talk yourself down. You're gorgeous. Repeat it after me!'\n\nLexi gives me an odd look, but recovers and assumes a naughty schoolgirl pose. 'You're gorgeous', she says seriously.\n\n'Alexis!' I yell, and hit her with a pillow.\n\nShe laughs, leans back out of range of my second attack, and then suddenly hugs me fiercely, taking the wind out of my sails. 'And you,' she whispers, 'are just as gorgeous. So here's the deal. You stop talking yourself down, and I will to.'\n\n'I don't!' I protest.\n\n'Yeah, you do, and you know it.' she responds. There's not really that much I can say.\n\nLexi pulls her legs up under herself, and stares at the fire. 'I'm serious, Robyn. I don't know why you're so anti-people. You're a stunning woman, if you'd only comb the twigs out of your hair.'\n\n'My twigs!' I mutter. 'Mine.'\n\nShe laughs again, and pats me on the head. 'Any more of that whisky left?' she asks. I go grab us both a tumbler, then come and sit back down next to her.\n\n'Thanks', she says, and sips it. She pulls a face. 'Never understood how you could drink this stuff'.\n\n'It's Dad's favourite' I say quietly. She glances at me, then sighs. 'Didn't know that' she murmurs.\n\n'Do you still miss them?' I ask her. \n\n'Every second of every minute of every day', she responds tiredly.\n\n'I was so angry with them, Lexi. So angry. I couldn't believe they did something so stupid. Why drive through that storm, knowing the roads haven't been gritted?'\n\n'They wanted to get home' she says. 'Clever people make silly decisions every day. Sometimes that catches them out.' I stare into my tumbler. Lexi reaches out and wraps an arm around me, pulling me closer.\n\n'Do you regret being saddled with me?' I ask, quietly.\n\n'What?' she exclaims. 'God, Robyn, no! You're my sister, of course I'm not saddled with you, you needed me and I stayed for you!'\n\n'But you had a chance at an awesome life out there'\n\n'My life is here. I'm only twenty four, Robs, plenty of time for me to explore the world!'\n\n'But you're here and lonely.'\n\n'Less lonely than I'd be without you.'\n\nI sigh, and drain my tumbler, then fetch the bottle and refill it. Lexi eyes me, then drains hers as well and presents her tumbler for a top-up.\n\n'You sure?' I ask\n\n'Hit me' she says, so I do. She's a lightweight, but we don't have anywhere to go, so what's the worst that can happen.\n\n'Fire needs more wood', she volunteers after a silence. I oblige and build it up. She arranges the pilfered sofa pillows for us and we both lie back.\n\n'So have you kissed a boy?' she asks.\n\n'Not this again!' I protest.\n\n'I'm curious!' she responds. 'Humour me, it's cold outside, it's just the two of us, and we're getting drunk and spilling secrets, so you can spill this one!'\n\nI grumble. Then think. 'Maybe once, at a varsity party.'\n\n'What!' she exclaims. 'Seriously, you've never kissed a guy?'\n\n'Lexi!' I protest. 'Why does it matter, good god!'\n\n'Robs, are you...'\n\n'Still a virgin?' I finish for her. She blushes, guiltily. 'Yeah. I am. Unless you count my regular liaisons with Mr Palm and his five lovely sons'\n\n'Robyn' she shrieks, laughing. 'Oh god, I'm sorry, that hilarious. But seriously, what?'\n\n'Never felt the need' I mutter. 'My lady parts are just fine by themselves.'\n\n'But surely you've wanted to?', she asks.\n\n'Alexis, seriously, I'm not going to get into this with you right now!'\n\n'Oh Robyn,' she sighs, theatrically, and slumps back onto the pillows. I turn my head to watch her. She's got an impish grin.\n\n'It's the best feeling ever', she says, after a moment.\n\n'What, kissing?'\n\n'No, sex.'\n\n'Lexi, seriously, you're starting to make me feel really uncomfortable.'\n\n'Why?' she asks, raising herself onto an elbow and looking down at me. 'Why does this make you so embarrassed? Don't you find it interesting to talk about sex?'\n\n'Of course I do,' I protest, 'but you're my sister!'\n\n'So?' she asks. 'Surely that means you can talk with me?'\n\n'Lexi, please stop.'\n\n'Why are you so afraid to open up to me?'\n\nI sit up abruptly and stare at the fire. I knock back my whisky, refill it, and knock that back too, gagging slightly as it burns its way down to my stomach.\n\n'Robs?' she asks, quietly. 'I've never seen you do that before. What's going on?'\n\n'You want to know why I'm sad? Why I'm a loner? Why I don't open up? Because. Because I'm still a virgin. Because I like girls.'\n\nThere's a silence. I close my eyes, feeling them start to burn. This isn't how I imagined telling her.\n\nLexi clears her throat. 'I thought you might. Why's it taken you so long to tell me?'\n\nI start to shiver as the sobs come. 'Because I was scared, dummy!' I yell. 'I had nobody to talk to about it. I would have been expelled if it had been discovered. And then if I'd told you you'd have left me I'd have nobody left! I'd have... been... alone'\n\n'Oh Robyn,' Lexi sighs, and scoops me up. 'Shhh. Oh god, Robs, I wish you'd told me sooner. I've suspected for years, love. What made you think I'd leave you?'\n\n'Because everyone else has!'\n\nI'm not too proud to cry. I just try not to because it hurts so damn much. But Lexi is there, holding me till it\u00e2\u20ac\u2122s over. It still hurts like hell. But like everything it passes eventually.\n\nShe gets up and disappears, returning with tissues which I promptly decimate, sacrificing the used ones to the fire. Lexi grabs another blanket which she wraps around my shoulders.\n\n'I must look lovely right now,' I manage.\n\n'Stunning', she winks at me. 'Bright eyed and bushy tailed.' I choke, then cough, then laugh.\n\n'How long?' I ask, after a while.\n\n'At least three years, possibly longer. You never talked about boys and you never mentioned girls who were friends. Then you left your Mac around one day and I was inquisitive.'\n\n'Oh god' I mutter.\n\n'Yeah, that'll teach you' she grins. 'Your browser history was interesting. I learned a few things.'\n\n'Lexi!' I yell, helplessly.\n\n'What?' she says, innocently. 'You left it unlocked and you know I'm nosey.'\n\n'Nosier than I thought'. I make a mental note to start clearing my history frequently.\n\nThe fire crackles a bit.\n\n'Kissed any girls?' Lexi asks.\n\nI sigh. 'No. Never had the chance. I liked a girl desperately. Never plucked up the courage to tell her. It's for the best.'\n\n'That's a pity' she says. More silence. 'I'm going to shower' she announces, as she stands and stretches. Lexi stretching is something else. She rises onto her toes, arches her back, tilts her head and reaches up as if she's trying to fly. It's like ballet, and like always I watch her. She's always so graceful. 'You going to be up a while, Robs?'\n\n'Yeah.'\n\n'Ok, see you in a bit then.'\n\n---\n\nI curl up, watching the coals and mentally picking at the jagged bits inside me. I feel exhausted yet somehow better for it. Truth be told I'd always dreaded this moment. Lexi must have known. I wonder how long she'd been plotting on how to yank me out of the closet.\n\nShe's always been able to know what I'm thinking.\n\nUnbidden, the image of her and Andrew comes to me again. I shift, uncomfortably. I've seen Lexi undressed far enough to have a reasonably intimate knowledge of her body, and in my current state it makes me very uneasy.\n\nHer breasts are small. Stop it. Her mid-shoulder length blond hair is tousled. Stop it, Robyn. Light sheen of sweat on her skin. Mouth open, eyes closed. Stop it, Robyn. Stop it.\n\nTo distract myself, I throw more wood onto the fire and pick up a magazine. Furniture. Couches. Settees. Beds. None help. I squeeze my legs together in frustration and groan. I have a suspicion that I'm highly sexed, but practical experience has, alas, been lacking, bar self-exploration. I've always had a visual imagination, hence the porn links on my laptop. Thank God she never found the fiction, I think to myself.\n\nI'm too drunk to go for a run and too horny to shut my mind down. Desperate times, desperate measures. I lie back down on the floor, drag the blanket over me, and unbutton my pants. I slip my hand down under the waistband of my briefs (more comfortable than panties) and try to relax. As always, I'm ridiculously wet and my finger slips effortlessly over the hood of my clitoris; but release eludes me and my frustration wars with the faint haze of alcohol, with alcohol winning. I feel warm and safe, if frustrated, and less wound up than I can ever remember feeling. Clearly opening myself up to Alexis has removed a major stressor from my life.\n\nI don't even remember falling asleep. At some point during the night I snort awake, finding myself under some additional blankets. Lexi the blanket fairy must have visited while I was sleeping. I roll over. The fire is still flickering and by its light I can see Lexi asleep on the couch, under some more blankets. Odd - she usually only sleeps in her own bed.\n\nShe's lying on her back, legs slightly bent. Suddenly she shifts one of her legs, and I hear a soft whimper. The blankets are moving slightly. Is she... she is! I feel myself starting to flush and my pulse starts to race as I realise I've caught her playing with herself. It's incredibly embarrassing. I know I should make some noise, roll over again or something, but I can't... I'm so turned on by the thought that my sister is masturbating not three metres from me that I can't do anything but slowly slide my own hand back down, slipping a finger gently between my lips and finding my clit. I stroke myself, heart thumping in my chest, listening Alexis playing with herself.\n\nI can hear her breathing tempo increase, and my own does in sympathy. I build and build, then my thighs clamp down on my hand as I start to climax, finger stroking along my clit and lips down to my aching entrance while I hear Alexis whimpering a quiet 'fuckfuckfuck'.\n\nI lie dead still as I recover, trying not to shudder. My orgasm was strong, verging on epic. And I feel incredibly dirty at the thought that it was the sight and sound of my sister playing with herself that made it so hot for me.\n\nI hear her shifting, and quickly close my eyes to slits. Her eyes are open and she's looking my way. She watches me, for maybe thirty seconds. Then she sighs, rolls back over, and doesn't move again.\n\n---\n\nI sleep eventually, and I don't remember dreaming. When I finally wake up, grey light is filtering through the French doors and Lexi is gone; her blankets are still crumpled where she left them. I stand and stretch the kinks out of my back, then go hunting some coffee. I nurse a cup of it at the table and mull over what I saw.\n\nI've always been peripherally aware of Lexi's habits. She's an attractive and friendly person, and she's comfortable with herself. But, fantasies aside, until now I'd not thought of her as a blatantly sexual creature. Perhaps this was a peculiar blindness because she's my sister. It's silly, in retrospect. I masturbate. Frequently. It's only logical that she would as well.\n\nBut seeing her actually doing it was something else entirely.\n\nI suddenly realise that I'm still in yesterday\u00e2\u20ac\u2122s clothes and grimace. Lexi might mock me for my tangled hair but I still prefer being clean to being dirty. I head upstairs and turn on the shower, giving the gas boiler time to warm the water before I climb in. I catch a glimpse of myself in the full length mirror, and whimsically pause to eye myself.\n\nLexi called me gorgeous. I snort. My mousy brown hair frames a face that I would call plain. In the right light I suppose I could verge on 'attractive'. I pout and then blow a kiss at my reflection. Then I shake my head, annoyed at my vanity. Flirty, hot Robyn is an apparition. Plodding backwoods Robyn is the everyday reality.\n\nI undress and strip out of my sports bra and briefs. Then I stand and stare at myself, taking stock. I'm slim and toned, with only the slightest hint of extra padding around my bum. At least there's that, I suppose. If I can't be hot I can at least be hardcore. I cup my breasts and squeeze them together gently. Adequate cleavage. Not that it matters right now, given that I'm my only lover.\n\n'Oh get over yourself' I tell my reflection, and then climb into the shower. It's gloriously hot, thank God for gas. I brace my forearms against the wall and then lean forward, letting the hot water sluice over my head and shoulders. I close my eyes and daydream, imagining myself a tropical island with a waterfall this hot that I can stand under for hours without gas bills.\n\nI don't know how long I stand there. When I open my eyes, though, Lexi is leading against the bathroom door, grinning at me. I squawk.\n\n'Shit, Lexi!'\n\n'Don't stop on my account', she laughs. \n\nI grab frantically for a towel to cover myself with.\n\n'Oh God, Robs, I've seen just about all of it anyway, I don't know why you're bothering to hide your bod from me.'\n\n'Get out, Lexi!' I shriek, flailing at the taps as I realise I'm soaking my towel under the shower jet. I spin, blinded by the water, and my usually great sense of balance lets me down.\n\nEver dropped a melon or a coconut? A head on tiles makes a sound like that. For some reason this thought is uppermost in my mind in the seconds immediately after I fall backwards and crash against the wall.\n\nI vaguely realise that Alexis is shouting. My ears don't seem to work properly. It hurts like hell. The water is pink. Water shouldn't be pink. Pink water is bad news, after all. I giggle to myself. Sharks and stuff.\n\nSomehow Lexi gets me out of the shower and props me up agaist the bathroom wall. She pushes a facecloth against my head and gives me an imperious 'Hold this and do not move' before she disappears. I woozily wonder where she's gone. My head is stinging like billy-o behind my ear where the facecloth is.\n\nLexi rematerializes.\n\n'Don't move, Robs. I'm warning you, I'll slap you if you do'.\n\nShe starts wrapping something around my head, pulling my fingers out the way as she gets it down where she told me to hold. Her face is beautifully framed between the white sparkles which are swimming through my vision.\n\n'You have very pretty lights, Lexi.' I say, seriously. 'Can I have some of them?'\n\n'Shut it, Robs. Don't move'. She disappears again and I sit, happily watching the lights as they pinwheel. My fingers are tingling as well - maybe the lights are doing it.\n\nLexi appears again, with a tracksuit. 'Put your feet into this', she says as she holds the tracksuit pants for me, and I oblige. She slides them up to my butt, then grabs the top. 'Arms through the arms', she says, and I oblige again. This is a fun game! Lexi eases the tracksuit top over my head and pulls it down. \n\n'Robs, we're going to the A&E,' she says levelly. 'I need you to help me; I'm not strong, so I need you to try to walk downstairs without slipping. Can you walk downstairs and hold onto the banister and not slip, Robs?'\n\n'Of course' I slur. 'Can do it blindfolded.'\n\nLexi snorts. 'Ok, on three, I'm going to pull you up. One, two, three!' and up I go.\n\nGod, my head hurts. Lexi pulls up my tracksuit pants and somehow we manage to stagger downstairs. Lexi steers me out the front door and down the driveway to mum's old Peugeot. The gravel hurts my bare feet. She manoeuvres me into the passenger seat and closes the door. I think that's the point that I zone out at. I don't remember going there, coming home, or Lexi putting me into bed, but she must have, because bed is where I wake up.\n\n---\n\nIt's only 11am, according to the clock. \n\n'Robs?'\n\nI turn my head gingerly. Focussing is a bit difficult right now.\n\n'Hey'. She's sitting on Mum's old chaise longue, which has been dragged into my room to serve as Lexi's perch. Music is scattered all over the place, but none's currently in her lap. \n\nI squint at her. I could almost swear she's been crying. But that's crazy, Lexi doesn't cry.\n\n'How're you feeling?' she asks with concern.\n\n'Woozy' I manage. 'Did you catch the guy who hit me?'\n\nLexi unfolds her legs, stands and steps over to the bed, sitting down facing me.\n\n'You had me really scared there, Robs.'\n\nI raise a hand and probe my skull. Lots of bandages. Awesome.\n\n'I don't remember much. I hope I didn't bleed everywhere.'\n\n'I'm really sorry, Robyn' she says, softly.\n\n'Forget it, Lexi.'\n\n'You know I'm not built that way'.\n\n'Lexi. It's not your fault I'm a klutz'\n\n'It's my fault you were clumsy. I flustered you and you slipped.'\n\n'Yeah, fair enough, seeing you there was pretty random. What were you doing? Watching me shower?'\n\n'I'd just got back home. I heard the water running and came up to say good morning. I wasn't there for more than 5 seconds.'\n\n'5 seconds, huh?', I tease.\n\n'Okay, maybe 10.'\n\nI eye her blearily. 'Seriously? You were checking me out.'\n\n'I wasn't!' she protests.\n\n'Alexis Julia Blake, you know as well as I do, 2 seconds is a glance and 10 seconds is checking me out.'\n\nShe's quiet for a bit, and then says, quietly, 'Alright, you got me.'\n\nNow it's my turn to be silenced.\n\n'What? Seriously?' I finally manage. I struggle with this concept, briefly.\n\n'I just wanted to have something to judge myself by. You're the only girl I know closely enough to ask. I was going to ask, but then you went hara-kiri on me.'\n\nI shake my head reflexively, then groan as the pain hits me. \n\n'Don't do that' says Lexi. \n\nI slump back into the pillows. 'Wish you'd told me not to do that 3 seconds earlier.' I manage. Then I take a breath. 'Why on earth do you need to have someone to judge yourself by, Lexi?'\n\n'Because...'\n\n'Because why?'\n\n'Because guys will lie through their teeth to you if they think they're going to get lucky.'\n\nI stare at her. 'Um. Ok, outside my realms of experience, but if you say so.'\n\n'Take it from me. I know so. So I want... I want an impartial judge.'\n\nI throw up my hands. 'This day couldn't get much weirder, could it.'\n\nLexi gives me a hurt look. 'I'm sorry, Robs, this was a bad idea. Forget I mentioned anything.'\n\n'No, Lexi, slow down. I'm sore. I'm trying to get up to speed. Ok?'\n\nShe leans back slightly, then sighs. 'Ok.'\n\n'So you wanted to see me... nude... so you had someone to judge yourself by? Why me? I'm hardly a good yardstick.'\n\n'Can it, Robs' she warns me. 'We made a deal. Stop talking yourself down. Holy shit, girl, half the women in my orchestra want to kill you every time they see you backstage with me. They're insanely jealous of you.'\n\n'Of me?' I say incredulously. 'Little Robyn stay-at-home, with the twigs in her hair?'\n\n'You really don't get it, do you?' Alexis says flatly. 'God, if you weren't injured I'd thump you, you're so dense sometimes. To them you're this totally together hard-as-nails girl who probably chases down reindeer on the Tundra and skins wolves with her bare hands. You show up and don't give a shit and the men in the orchestra go nuts and the women want to eat your liver. You have this aura and these women can't handle it - they can't conceive that you have it so together that you just don't give two brass pennies about their dresses and their hair and the three hours they spend doing their makeup. You have no idea how attractive that makes you.'",
        "That shuts me up for a bit. Alexis stares down at me, then she shakes her head and sighs.\n\n'I wish you could see yourself the way I see you,' she says. 'You have this wonderful classic face and gorgeous cheekbones. I could spend an hour on you and give men heart-attacks just from seeing you.'\n\n'Liar', I mutter.\n\n'Don't do that' she says, severely.\n\nI'm quiet for a while.\n\n'So what now?' I say.\n\n'That depends on you. You're confined to this bedroom for today, and you're not going anywhere tomorrow either. Doctor's orders.'\n\n'I'll have to work tomorrow, Lexi. I don't have time for this.'\n\n'Nope, you'll do as you're told', she says. 'I'm eldest and I know best.' I crook an eyebrow and she smiles wanly. 'That is, if we ignore today's events.'\n\n'I still can't believe you wanted to see me nude.' I say.\n\n'It seemed logical at the time.'\n\n'How would it help? You'd still be looking at yourself and comparing yourself to an idealised image of me.'\n\n'True,' she says. 'Plan B'. Before I know what she's doing she's got her hands on the hem of her shirt and she's pulling it over her head.\n\n'Lexi! What the hell?' I exclaim.\n\n'Fair's fair' she says, and drops the shirt onto the chaise longue.\n\n'Lexi, please, for the love of God, stop.'\n\nShe ignores me as she stands, and starts to unbutton her jeans.\n\n'Alexis. Please. Don't do this to me.' My voice is hoarse.\n\nShe pauses. 'Robs, what's the big deal? You've seen my knickers before. And I need an honest opinion.'\n\nI can't not look. But I try not to stare. Lexi backs away from the bed and kicks herself free of her jeans, then stands, somewhat self-consciously. 'Well?' she demands.\n\nI swallow. 'Please put your clothes back on.'\n\n'Look at me, Robyn.' she says, flatly. 'I'm asking you to do this for me because I need your help. I hardly ever ask you for anything. Help me, now.'\n\nShe turns slowly, posing like a ballerina for me. Her high, small breasts are cupped by her white lacy brassiere, and her panties are traced with lace and bows. She's lithe, no spare weight, but no muscle tone visible. But it doesn't matter. Lexi's ethereal - she doesn't look like she belongs in our world. Slight shoulders and hips, a perfect neck, and brilliant gold hair falling in gentle waves down to a point between her shoulder blades, which are lightly dusted with a sprinkle of freckles from a pre-teen sunburn. \n\n'And?' she asks.\n\nI shrug, helpless now. 'Galadriel', I whisper.\n\nLexi stares at me. 'What?' she says.\n\n'You'd be Galadriel. In the Lord of the Rings. You don't belong in this world. You're too perfect.'\n\n'You're serious.'\n\n'Deadly.' I say, softly.\n\nShe takes a deep breath, and impulsively reaches round behind herself.\n\n'Lexi, what are you... '\n\n'I need a full opinion, Robyn.'\n\nShe unclips her brassiere, and lets it fall to the floor. My breath catches in my throat. But it gets worse - she hooks her fingers under the waistband of her underwear and slides them slowly down, bending forward as she does. Then she kicks them free and slowly stands up straight, staring at me. Her deep brown eyes are unreadable. I don't dare look away from them.\n\n'You're totally taking advantage of me.' I say, flatly.\n\n'Yeah.' she responds. 'I could never have had the courage to do this without you being incapacitated and me being drunk.'\n\n'You're drunk?'\n\n'Triple on the rocks.'\n\n'Bad judgement drink' I say, trying to barter a way out of this situation.\n\n'Only sometimes,' she responds. 'Now. My appraisal.' She puts her hands on her hips, and raises her chin, daring me.\n\nThis is a weird and very unsettling side of Lexi that I haven't ever encountered before. I can read her well enough to usually know what she wants before she thinks to ask for it. To have outright demands made of me is strange. That they're these demands transcends entirely new dimensions of strangeness that I am absolutely unable to navigate. \n\nThere's a saying that when you've got a tiger by the tail, you've just got to hang on. And that's what I'm doing, hanging on by my fingernails and waiting for the mauling.\n\nI can't help it. She's standing there, starkers, telling me... no, ordering me to look at her. It's not my fault, I tell myself. I try to suppress the hot ache in my belly as I look at her perfect, high, perky breasts, her small, beautiful nipples with their tiny dark areolas, her flat stomach, the gentle curve of her belly and the shaven mound of her sex, barely visible between her pale and unblemished inner thighs. \n\n'Jesus' I whisper.\n\n'Do I pass muster?' she asks, seriously.\n\n'God, Lexi. You're killing me here.'\n\n'What?'\n\n'Lexi, please. I'm begging you. Please put your clothes back on. It's getting really uncomfortable for me.'\n\n'Oh? OH!' The penny drops. 'Oh God, Robs, I didn't even think of that. Uh, let me put my shirt and underwear on.' \n\nShe dresses quickly, clearly embarrassed. As for me, I want the earth to open and swallow me up. I squeeze my eyes closed, opening them only when Lexi gives me a brittle 'Done!'.\n\n---\n\nShe's sitting on the chaise longue again, legs tucked under her, head bowed.\n\n'I'm really fucking today up' she says, suddenly, and scrubs roughly at her face with her fists. Lexi doesn't swear often. I only hear it when she's really stressed.\n\n'Not as badly as I am' I reply, quietly.\n\nShe looks up and meets my gaze again. 'I'm sorry, Robs, I totally forgot about what you told me yesterday. I'm an ass. Please forgive me?'\n\nI squint over at and muster a smile. 'How could I hold a floor show like that against you?' Her eyes widen and she snorts, then starts to laugh. I join in. Suddenly, the brewing tension bursts like a soap bubble and is gone.\n\n'You're crazy' I say to her.\n\n'Cuckoo.' she chirps.\n\n'Play me something to help the pain?' I beg, after a while.\n\nShe stands and disappears downstairs, reappearing shortly with her battered cello case. She sits on the edge of the chaise longue, facing me, and rests her cello between her legs. She looks up at me, smiles a small smile, and starts to play as I close my eyes. The tune is rich but sad, at once haunting and yet totally unfamiliar. I'm too sore to try to puzzle out the composer or period; for once my brain lets me just listen. The music fills me, driving out the unbelievable strangeness of the morning I've just experienced, allowing me to unwind and, for a moment, forget the pain in my head and the ache between my legs. I open my eyes again and watch her as she plays, her eyes closed as she feels the music, moving in time, dancing her dance with the instrument.\n\nSunlight through my bedroom window wakes me; it's clearly late afternoon for it to be shining in here. Lexi's cello is leaning against the wall in the corner, and Lexi is curled up further down my bed, under a small throw, head pillowed on her arm. \n\nShe looks so vulnerable when she sleeps. My heart aches for her as I think about how lonely she must be, stuck here with me. For all her protestations, I think she'd have had a happier life elsewhere. \n\nI watch her breathing. Her cheeks and nose are red; she's been crying again. This hurts a lot; the idea of her crying while I'm asleep and not able to see, or help, or even just hold her. \n\nI slowly fight my way free of the blankets, trying not to wake her. Everything is spinning a bit, and my head is pounding, but I manage to steer myself to the window seat that my dad built for me. I lie back and close my eyes, basking in the remaining daylight. \n\nHeating me even more, though, is the memory of Alexis' perfect body and the almost daring way she stripped for me. I chalk that one up to the alcohol.\n\nI feel dirty. I should be able to banish these images of her easily. But I can't. Sister or not, she's transformed into my own personal goddess of sex and my mind turns somersaults at the image of her naked in front of me.\n\nI groan. I'm too sore to do a damn thing so all I can do is vainly try to think of other things.\n\n---\n\nEventually I doze again, only to wake after some indeterminate time as Lexi calls my name. I look over to the bed; she's rolled over and is looking my way.\n\n'Hey, sleepyhead' I say.\n\n'Takes one to know one,' she responds quietly. 'How's your head?'\n\n'Unpleasant. Can we go downstairs?' I ask, pleadingly. 'I'm going mental up here.'\n\n'Only if you promise to hold onto the banister and tell me if you feel dizzy.'\n\n'Cross my heart and hope to be mugged by badgers.'\n\n'That'll do' she responds, and we eventually make it downstairs. Lexi leaves me propped against the door to the lounge while she drags the couch in front of the fireplace; then steers me to it and makes sure I'm properly enthroned with cushions. She starts a fire, then comes and sits on the floor in front of me so that she can lean her head against me.\n\nWe listen to the fire hiss and pop as it starts to take hold.\n\n'I'm sorry for trying to bleed to death in the shower' I say, after a while.\n\n'I'm sorry for subjecting you to a sibling strip-show' she returns.\n\n'Consider yourself soundly chastised.'\n\n'Spanked?'\n\n'Like a red-headed stepchild.' I shift painfully, then roll onto my side so I'm facing the fire as well. I reach out and run my hands through Lexi's hair. 'Seriously, though, stop blaming yourself for it. I'm the one who tripped.'\n\nShe says nothing.\n\n'Lexi?' I ask, after a while.\n\n'Hmm?' she responds.\n\n'You were crying earlier. Why?'\n\nShe's quiet for a long time, then turns to look at me. Her eyes are dark in the firelight; I can't read them.\n\n'Boy troubles?' I hazard.\n\nShe snorts. 'If only. Just general malaise, Robs.'\n\n'You've never cried because of that before.'\n\n'I was freaking out about you. I guess the stress all just caught up with me.'\n\n'Well, you can stop now, ok? I've got a thick skull. I'll have another scar for my collection, that's all.'\n\n'You have too many of those already' she says, turning back to look at the fire.\n\n'How out of it was I?' I ask, curiously.\n\n'Pretty far gone. You were giggling. And going on about sharks.'\n\n'Sorry.'\n\n'Don't you sorry me, Robs. 9 stitches is quite a bump. Doc says it was a nice jagged split (his words, not mine) and it should heal well.'\n\nI watch her. She's sitting very still, and her voice sounds weird.\n\n'Lexi?'\n\nShe starts to tremble, and then she spins around and grabs me in a fierce hug. I feel her shaking and I awkwardly wrap my one free arm around her.\n\n'I was so scared' she whispers into my neck. 'There was so much blood; I thought I'd killed you at first.'\n\nI squeeze her as best I can, and slowly the shaking stops. She takes a deep, shuddering breath, and scrubs at her eyes with the back of a hand. Impulsively I plant a kiss on her forehead; something she's always done to me but that I've never reciprocated, till now. I feel an upwelling of fierce love for my sister, this strong but fragile woman who weathered everything life threw at us while still managing to raise me on the straight and narrow path. I snort at the inadvertent pun, then shake my head at Lexi's puzzled frown.\n\n'Come up here' I say. 'There's room for both of us.' I wriggle back against the backrest of the couch, and make room for Lexi to squeeze herself in just in front of me. It works because she's a waif and I'm slender; if either of us had any spare weight she'd be on the floor. It's a tight fit, but we manage, and I wrap my left arm around her to hold her against me. \n\n---\n\nWe lie, listening to the fire hissing. My breathing falls into a natural rhythm, and hers slows to match it. I can smell her now; the geranium scent she always wears intermingling with the smell of her skin. I try to keep my arm somewhere neutral, but to me nowhere on her body really fits that description any more. If I just close my eyes I can remember her in vivid detail. I cast around desperately for a safe topic of conversation, and come up blank.\n\n\u00e2\u20ac\u02dcThis is so nice', Lexi says suddenly. 'Just to be held, for once.'\n\n'Now you know why I always came running to you when I was sad. You give the best hugs.'\n\n'I think you might have me beaten there,' she says. 'Seriously, though, I can feel every muscle in your stomach right now.' This embarrasses me and I try to pull away, but Lexi protests. 'No, don't go away. It's nice. It makes me feel warm and fuzzy how strong you are.'\n\nI stop trying to wriggle away and just lie still for a while, with Lexi pressed up against me. Her comment has aroused my curiosity, though, and I take the chance to pry. 'How long's it been?'\n\n'Too long,' she responds with barely a pause.\n\n'Surely there must be somebody?'\n\n'All by myself... ', she sings, before sighing. \n\n'Why?' Short, direct questions seem to be working.\n\n'I got burned.' She sighs again, then takes a deep breath. 'Men lie, Robs. At least you don't have to worry about that.'\n\n'No, I just get to fall for people who don't want me.'\n\n'Trade you,' she says, quietly.\n\n'Believe me, you don't wanna.' I reply. 'Boobies everywhere and I can't seem to get my paws on any.'\n\nLexi cackles, and after a short gap I join in, realising how self-pitying I'd just sounded.\n\n'Girls be crazy' she says once she's calmed down. 'I can't believe nobody's wanted to jump your bones yet.'\n\n'You know me, Lexi. Couldn't chat up a hooker if my life depended on it.'\n\n'Ah, crap Robs' she says. 'You're so easy to talk to.'\n\n'That's just because I like you, Lex.'\n\n'Hah. I'm a difficult, high maintenance bitch, Robs.'\n\n'Who the hell said that?'\n\n'Andrew did.'\n\n'That fuckshit!' I exclaim, enraged. 'I'll fucking kill him if I ever see him again. How dare he! Jesus, Lexi, you're not difficult at all. You're an open book to me; all you need is your own space and nobody messing with you and you're perfectly happy. Christ, what an arsehole.'\n\n'An open book, huh?' she says.\n\n'Big print children's book' I say, still fuming at the sheer idiocy of her ex. My fingers twitch spasmodically as I enjoy a pleasurable fantasy about throttling him.\n\nLexi takes my left hand and pulls my arm round herself, wrapping herself tighter against me. My anger slowly ebbs.\n\n'I've always been able to read you,' I say after a while. 'Well enough to know your mood anyway. Anyone who cared for you at all would be the same.'\n\nShe sighs, but says nothing at first. Then, 'So have you ever been kissed, Robs?'\n\nI'm taken aback by her renewed scratching around my lack of love-life. 'Why do you want to know?'\n\n'Because I'm curious. We're home, there's nothing to do, you can't escape, and I'm bored. Putting you on the spot distracts me and provides amusing answers and blackmail material.'\n\nI briefly consider fibbing, then realise it's futile. 'No. Never been kissed, never been laid, never been loved.'\n\nLexi wriggles around to face me, an incredulous look on her face. 'Seriously, Robs, were you under a rock throughout school?'\n\n'Hello, Expulsion if caught, remember?' I respond. Having her this close is extremely distracting. Her eyes are deep black pools now; the deepening gloom has obscured her pupils and I have the vaguely unsettling feeling that she can see into my soul.\n\n'Hello, walks in the woods, sports trips away, etc? How do you think I popped my cherry?'\n\n'Lexi!' I gasp. 'Seriously, you jumped someone while on orchestra tour?'\n\n'Well, as for the jumping, I'm not sure if I was the seducer or the seducee but yes. I lost my virginity to the second Clarinet.'\n\nI can't help myself, I start to laugh to the point where I'm almost retching. It takes me a while to regain my breath. By which time Lexi's queued up the killer. \n\n'Woodwind players have amazingly dexterous tongues,' she deadpans.\n\nI die a little, and Lexi joins me, holding me tightly against her as we laugh ourselves to the point of hysteria. I finally get a grip and wipe my face, gasping a little. 'My God, Lex, you have a foul mouth when you're so inclined.'\n\nShe sticks her tongue out at me, then grins.\n\n'So... um,' I begin.\n\n'Yes?'\n\n'What was it like?'\n\n'Which part?'\n\n'Sex'\n\nShe thinks for a bit. 'Do you masturbate, Robs?'\n\n'That's kind of a direct question, Lexi.'\n\n'Yes, or no'.\n\n'Um... yes.'\n\n'Ok, so, I'm sure you've had your fingers up inside you, right?'\n\nAnd just like that, I'm aching again. I curse under my breath and squeeze my legs together, hoping Lexi won't notice.\n\n'Robs? Yes or no answer.'\n\n'Um... yeah.'\n\n'Imagine that, only painful to start off with because you're so nervous and you haven't had time to get wet yet, only as it goes on, it's so hot because you're so worried about getting caught, that it becomes this ache inside you that feels like you need to be filled, and every time he pushes into you you feel like that ache is satisfied but you need more... you understand?'\n\n'God'\n\n'And it's sticky and smells like musk and you can hear the panting and your heart is racing, and all you know is that you need it deeper in you, as deep in you as you can take it.'\n\nShe's killing me. \n\n'And then, just when you can feel your orgasm starting to build, it's over and he's come. And then it's just this massive let-down as he pulls out and you're lying there thinking 'Was that it?'\n\n'Your first time?'\n\n'My first N times, where N is a large number.' she says. 'Porn stars probably numb their thingies before going on set or something. Nobody I've been with has lasted long enough to write home about.'\n\n'Maybe that's because you're so damn hot,' I mutter without thinking.\n\nLexi's eyes widen, then she laughs. 'You're good for my self esteem, Robs.'\n\nAnd she's a terrible test for my self-control. The description she just gave me has made me acutely self-conscious; I'm probably awash below decks and am desperately trying not to bump any of my erogenous zones against her.\n\n'You ok, Robs?' she asks. 'You look a bit flushed.'\n\n'I am overheating a bit,' I say, deadpan. \n\nLexi quirks an eyebrow at me, and raises a hand to touch my forehead. 'Hmm. You do feel a bit warm.'\n\n'Let me sit up' I say. Lexi scoots over a bit and I swing my legs over the front of the couch. This allows me to clear my head slightly - having Lexi right in my face like she's been has really made it hard for me to concentrate; and I stare at the fire, trying to gain a bit of respite in the flames.\n\nBut then Lexi starts rubbing my shoulders, and I give up all hope of salvation. Clearly it's my day to suffer.\n\n'Move down to the floor and then lean back,' Lexi says. I oblige, but then regret it instantly when she places her legs on either side of me and pulls me back till I'm leaning against her.\n\nGod, it's exquisite.\n\nShe works her fingers deep into my shoulders and I whimper a bit as she brutalises my neck and collarbones. 'Gods, Lexi, that's good. You should have been a dominatrix.'\n\n'Still time for me to change careers,' she mutters. 'Holy hell, Robs, do you go through life this tense?'\n\n'I guess so... I don't really pay much attention to it...'\n\n'Your neck muscles are locked almost solid.'\n\n'It's the stress of being so awesome.'\n\nShe laughs, and uses her elbows to really dig in on my shoulders. I swear I'm starting to drool as my head lolls back against her. I look up at her; at the intense expression on her face as she pushes down. I'm feeling tension I never realised I had draining away. My head's even aching less,despite the lack of painkillers.\n\n'Better?' she asks after a while.\n\n'Wrsfgl' I manage. She chuckles, and rests her right hand gently on my shoulder. I reach my left up and squeeze hers gently, then hold it for a bit.\n\nThen I take a chance, leaning my head gently against her left thigh. It's warm and soft through the fabric of her tracksuit pants. She moves, frees her hand, and then starts to gently run it along my neck.\n\n'You have freckles,' she says, surprised.\n\n'You never noticed?'\n\n'No. Guess we both won the fair skin lottery there.'",
        "'Perils of being outdoorsy', I manage. Then I sit up and stretch. Lexi makes protesting noises but I ignore her; I need a drink to help blunt the nervous energy I've picked up during the course of the afternoon. I pour myself a double of the good stuff, and shoot Lexi a glance. She hrms, then nods. So a double for her too. I manage to walk back to the couch without embarrassing myself and resume my seat. I hold up Lexi's poison and she accepts it gracefully. 'Cheers', I say.\n\n'Health, wealth and beauty' she returns.\n\nWhisky on an empty stomach is far from the best idea I've ever had, but it burns its way pleasantly downwards. Soon, the ache in my head starts to wane and I feel myself relaxing again. I lean back, putting more weight against Lexi. She shifts herself around a bit and then settles down, and we watch the fire.\n\n---\n\n'So who was the girl you liked?' Lexi asks. \n\nI smile wanly at the memory. 'Her name was Simone. She was a visiting student from Holland.'\n\n'Pretty?'\n\n'I thought so. You know how tall Dutch girls are. And she had this beautiful cornflower blond hair. Kind of like yours. Grey-blue eyes. Lovely breasts.' \n\nLexi laughs at this. 'Do you think she was interested?' she asks me.\n\n'I dunno, Lex. I can't cold read people. But she seemed to always be chatty; tried to get me to go running with her once or twice but it never worked out. Maybe she was just being friendly.'\n\n'You wanted more, though.'\n\n'I nearly failed English Literature because of her. I could watch her for hours. I think she caught me looking once or twice.'\n\n'And?'\n\n'She didn't seem bothered.'\n\nLexi sighs. 'You should have tried at least, Robs.'\n\n'Shoulda, woulda, coulda,' I sigh back.\n\n'Defeatist', Lexi mutters. She shifts, and I feel her leaning forward. She puts a hand under my chin and gently lifts my head back so she can look at me. 'Next time, jump first, doubt second,' she instructs from on high.\n\n'Yes Ma'am' I drawl. We laugh, mine bittersweet.\n\n'I'm better off alone, anyway' I say after a while.\n\n'Nobody's better off alone, Robs' Lexi disagrees. 'We're social, loving creatures. We need to be loved and cherished. Life is hard enough without forcing loneliness on yourself.'\n\n'I'm not actively forcing it on myself, Lex. Just... very choosey about what I want, I suppose.'\n\n'Choosy? Or too shy to take what's offered?'\n\n'Maybe a bit of both.'\n\nLexi nudges me. 'Oi. Move over, I need to stand up.' I oblige and she slithers out past me. She stands, and stretches as before. I idly wonder if she's aware of how hot it makes her look. She must be. Lexi's aware of things like that.\n\n'I'm tired of hard tack', she says. 'If you and I are going to have a proper chin-wag, it's going to be over wine.' She wanders off to the kitchen, and I hear her rummaging. She returns with a bottle of red and some of our battered everyday glasses, into which she decants the Syrah she chose. \n\n(We consider it a point of pride to never be without wine. One never knows when an emergency glass is called for.)\n\nLexi hands my share down to me, then turns and sits down on the floor next to me, scooting right up next to me as if we're children. Shoulder to shoulder we sit, sipping. \n\n'So why so shy, Robs?' she asks. 'We've established that you're hot, intelligent, fascinating, loving, and that representatives of the Dutch nation want to shag you silly.'\n\n'I dunno, Lexi. I guess... I guess I'm just scared of getting hurt.'\n\n'You can't learn to run without falling once or twice.'\n\n'True, but I'd prefer to learn to run somewhere where I won't break bones.'\n\n'Mm. So who's your fantasy girl, then?'\n\n'Oh god... um. Natalie Portman.'\n\n'Her?' Lexi makes a face. 'She's a great actress, but she's a little cuckoo for my tastes.'\n\n'Crazy is interesting,' I disagree. The wine is warming me and making me more talkative. It's nice. Lexi is easy to talk to.\n\n'So what makes you like her?' Lexi asks, intrigued.\n\n'Her ass', I say without thinking. \n\nLexi screams with laughter. 'God, Robs, you shoulda been born a guy.'\n\n'Woulda made things easier,' I mutter, shamefaced.\n\n'So, what about her ass?'\n\n'God, Lexi, I dunno. It's just...'\n\n'A perfect example of ass?'\n\n'You're filthy,' I laugh. 'No... look, it's the entire package, ok? She's hot, intelligent, artsy, can act, has a nice sense of style, but isn't so ridiculously attractive as to be entirely out of reach.'\n\n'Personally, I prefer Jodie Foster', Lexi says.\n\nI turn and give her a look. She stares at her wine, thinking. 'Yeah, Jodie. Girl next door, slender, looks approachable, not a porcelain doll but a real woman. I'd do her.'\n\nMy jaw drops. Lexi turns her head and notices. 'Shut your mouth, Robs, you'll catch flies.'\n\n'Sorry, just processing that,' I say.\n\n'You think too much, that's your problem.' Lexi says. 'Learn to just listen to the music and watch the dance; stop trying to understand it or predict what's going to happen next.'\n\nLexi puts her wineglass down, turns back towards me, and then suddenly reaches out her arm and pulls me closer. She looks deep into my eyes, and then before I can even think, she darts her head in and kisses me, full on the lips. I jerk, surprised, and Lexi breaks off. \n\n'See?' she says, as she takes my wineglass and sets it besides hers. She turns back to me, and gives me a wide smile, before slowly moving in again. This time I'm expecting it, but the experience is so strange that I'm totally unable to respond at first. She pulls me even closer, and I reflexively part my lips. Before I can understand what's happening, I'm kissing her, my arm clenched behind her and hers cupping the back of my head gently.\n\nShe breaks off for air, and I gasp a shaky breath.\n\n'I rest my case,' she says, and she breaks free and picks up her wineglass to drain it. 'And now you know what it's like.'\n\n'Holy shit, Lexi,' I manage.\n\n'Nice, isn't it?'\n\n'Wow.' \n\n'Now you're loved and kissed, and as the bard said, two out of three ain't bad.'\n\nI run my tongue over my tingling lips and then trace them with a fingertip; Lexi watches me with amusement, then leans her head against my shoulder and resumes watching the fire.\n\nIt takes a while for what she's just done to really register. A small part of me is kicking and screaming about being kissed like that by my sister, while a much larger part of me is just awed that my sister kissed me like that.\n\n'Penny for your thoughts,' she asks.\n\n'Confused. Conflicted.'\n\n'Conflicted how?'\n\n'That was the hottest thing ever. But you're my sister.'\n\n'So good and bad, then.'\n\n'Some people would say so, yeah.'\n\n'But not you?'\n\n'I'm still too lost in how good it felt to be able to deal with the morality of it.'\n\nLexi chuckles. 'I'll take that as a compliment.'\n\n'Please, do. My head's still spinning. Think I need to lie down.'\n\n'Stay right there,' says Lexi. She gets up and grabs blankets and pillows and makes us a space between the couch and the fire. She sits down on the blanket, then beckons me. I choose the right hand side and slowly ease myself down, trying not to aggravate my head. Lexi lies down to my left, then rolls over towards me and regards me, with a sort of half-smile.\n\n'What?' I ask, suspiciously.\n\n'I'd just always wondered what it was like to kiss a girl, is all.'\n\n'And?' I ask. 'Was it what you expected?'\n\n'Better,' she says. 'No stubble.'\n\nI snort, and Lexi grins. Then she slides down a bit and lets her head down onto the pillows, still facing me. After a few moments silence, I roll over to face her. We lie, looking at each other, and I listen to her breathing. Suddenly, on a whim, I reach out to stroke her cheek. \n\nShe tucks her face into my hand and squeezes it gently against her shoulder, before releasing it. Emboldened, I trail my fingertips down along her neck to her shoulder, and notice goose bumps appearing behind them. Lexi shifts slightly, moving her head a bit closer. \n\nAs I reach the collar of her top, she shivers slightly.\n\n'Lexi?', I ask.\n\n'Yeah?'\n\n'I really want to kiss you again.'\n\nShe smiles a languid smile, and then reaches out to wrap her topmost arm around me, pulling me in closer. As she does so I realise, belatedly, that I'm not wearing underwear and that my nipples are really hard. I'm pretty sure she notices this, but she makes no comment. \n\nSoon I can feel all of her against me, and I struggle to think of a time that I've felt as happy.\n\nHer lips are soft, and she uses a melon lip-gloss that I've always been able to smell but until now haven't tasted. I awkwardly put my free hand on her back to give me something to hold onto, then cannot resist sliding it further down, expecting protest but receiving none.\n\nLexi's lips part, and after a moment of confusion I let mine follow her lead. She slowly explores and teases me with her tongue, becoming more insistent, and I can feel my heart racing.\n\nI groan, then I have to break for air, and to gasp out a 'wow.' I duck my head and tuck it under her chin, and she pulls me hard against her again.\n\n'You ok?' she whispers.\n\n'Overwhelmed. Never felt this way before.'\n\n'Then let me hold you till you've worked out what you're feeling.'\n\nShe clasps me to her, then rolls onto her back and worms her right arm under my head, pulling me against her side and resting my head on her shoulder. I can't think of anything to say; I'm consumed by my proximity to her, the feel of the soft swell of her breast touching mine, the dark undercurrent of helpess aching need I feel.\n\n'I could get used to this,' I say, stupidly. She makes no answer, but reaches round to pull my hand across her body to clasp it against her midriff.\n\n'So now what?' I say, softly.\n\n'Now, we chat.'\n\n'After that? I don't think I can form proper sentences anymore.'\n\nShe turns her head to give me an amused look. 'Lightweight.'\n\n'Inexperienced, remember.'\n\n'Doing quite well despite that,' she says.\n\n'Really?' I respond, intrigued.\n\n'Let\u00e2\u20ac\u2122s just say my body's impressed and leave it at that.'\n\nI groan, and squeeze my legs together hard. So is mine, I want to say, but I can't summon the courage. But I suspect she knows anyway.\n\n'So why me, here, now?'\n\n'Because,' she answers. 'I needed the attention and I think you did too.'\n\n'Even though I'm your sister?'\n\n'Especially since. I know you, I love you, and in your current state you can't run.' She gives me a mischievous grin.\n\n'No fair, preying on the wounded.'\n\n'I didn't hear you complaining.', she retorts.\n\nI lie quietly, watching her breasts rise and fall as she breathes. My thoughts are churning furiously. Neither of us are sozzled, and Lexi's clearly in full control of herself. \n\nAnd yet... the entire situation seems like a dream. I'll freely admit to frequent fantasies about her, but the actual physical reality of it is overloading my ability to function. All I can smell is her, all I can feel is her. \n\nShe suddenly wiggles her arm loose from under me and I make an involuntary complaining noise. \n\nShe smiles. 'Sorry, Robs, losing circulation to my arms. I'll be right back.' \n\n---\n\nLexi tucks a pillow under my head, and then disappears for a while, leaving me to my thoughts. I can't resist, once she leaves I slip my hand down to touch myself, and my legs spasm as my fingertip brushes over my clit. I'm thoroughly soaked; even the crotch of my tracksuit pants is damp.\n\nI shudder, then withdraw my hand. Lexi could be back any moment and I don't need the additional weirdness of her catching me playing with myself on top of everything else that's happened today. So I sit up, scoot over to the fireplace and rake the coals together. I build up the fire again, laying in plenty of wood so that it will warm and light the room. Then I look to the windows. \n\nTwilight has fallen outside. I rub my arms, feeling the chill, and gaze ruefully down at myself. I'm a bit mortified to see that Lexi took me to the A&E in a faded purple school tracksuit, but then I mentally shrug; needs must.\n\nI find myself thinking about what we just did. My heart races again, and I can feel myself flushing. Kissing my sister was incredibly, mind-blowingly gratifying... but I realise that it's opened Pandora's box. \n\nI snort, realising the pun. Then I catch myself once again thinking of Lexi's floor show this afternoon. My nipples harden, and the ache between my legs returns and intensifies. I ruefully look down at the now-visible damp spot at my crotch.\n\n'What you doing?', asks Lexi. I jump and spin on my bum to look at her; she walks like a cat and has once again snuck up on me.\n\nI take a breath to answer, but then lose fine motor control. Lexi's in a very thin, sheer nightgown.\n\nShe laughs. 'Surprised?'\n\n'I'm so far out of my depth I can't see the shore anymore.'\n\nLexi squats down, showing a length of pale thigh, and pours wine from the bottle she's carrying into both our glasses. Then she puts the bottle aside, and sits, cross-legged. I catch the brief flash of her white underwear before the folds of the nightgown fall down between her legs.\n\n'Come over here, Robs,' she says, patting the floor next to her.\n\n'That's a bad idea, Lex,' I say. 'I might do something stupid.'\n\n'Such as?' she asks, arching an eyebrow at me.\n\n'Hold that thought,' I say. I head for the stairs, and, gripping the banister tightly, climb them and make my way to my room. I strip off my soiled clothes, and dig a long tee-shirt and some briefs out of my cupboard. On a whim, I grab some deodorant and dose myself with it. I pull on the briefs, and then struggle into the tee-shirt. Then I touch my bandages gently to ensure they're still in place. I take a deep breath.\n\n---\n\nLexi's waiting for me when I get downstairs. She's built the pillows up into a large pile and is leaning against them, watching the fire. I stand in the doorway, and just look at her for a while, admiring. Then I walk to the blankets and sit down alongside her. \n\n'You smell nice', she says, as she hands me my refilled wineglass. 'And the outfit is an improvement.'\n\n'You dressed me, so the blame is yours for the prior one.'\n\n'Guilty as charged,' she says. 'You look good in briefs. They sit nicely on you.'\n\nI flush slightly and stammer out a 'Thanks' as I sit beside her. She turns slightly to watch me, but I keep my eyes on the fire. I can hear my heart hammering away, and need a pause for sanity. \n\n'What are you thinking, Robyn?'\n\n'That I've got heart palpitations and butterflies in my stomach because of you.'\n\n'Hah', she answers. 'Well, if it helps, so do I.'\n\n'Why?' I ask.\n\n'Because I'm supposed to be the older, serious, responsible one. And then I went upstairs to change into something which was calculated to escalate things.'\n\n'It has. I commend you.'\n\nShe laughs. 'You like it?' \n\nShe puts a hand to the hem and slides it further up her thighs. I try not to stare, then I shake my head and laugh ruefully. 'You're going to kill me for reals, Lexi.'\n\n'You'll die happy.'\n\n'True.' I clink my glass against hers. 'So why pick on poor little me?'\n\n'Because I can. And because I can trust you.'\n\n'Trust me?'\n\n'Of course. You'd never tell anyone my secrets.'\n\n'I'd die first.' I answer, seriously.\n\n'I know. I hope you know that it works both ways.'\n\n'I know.'\n\nLexi scoots over towards me, hip to my hip, and stretches out her legs in front of her. The hem of her nightgown is now no longer doing anything for modesty. She shoots me a knowing glance, and smiles. 'Look as much as you want.'\n\n'Pity that touching the display is not allowed.'\n\n'Says who?'\n\n'Gallery policy. Patrons are not to touch the art works.'\n\nLexi throws back her head and laughs, then reaches over to grab my left hand. She places it on her right upper thigh, and then releases it. She lounges backwards and watches me.\n\n'Lexi' I say, quietly, seriously.\n\n'Yeah?' she answers.\n\n'My self control is almost gone. If I take this step... it's big. I won't be able to let go. Do you understand? This is your last chance.'\n\nShe gives me a serious look, and takes a breath.\n\n'Robs. I'm lonely. I need to be loved and appreciated. You give me a home to come home to. You give me unconditional love. You're the closest person in the world to me, and always will be. Why should I want artificial boundaries on that closeness?' She sighs. 'Are you telling me you don't want this?' She wiggles her legs back and forth slightly.\n\n'I want it more than I can put into words. But... I'm scared. I'm terrified that you'll want a normal life some day. I won't be able to give you up if I don't stop now.'\n\n'Robyn Emily Blake, you are my normal life.'\n\nI feel an ache in my chest, and before I know it I'm crying again. Stupid, stupid Robyn. What the hell is wrong with you, chick.\n\n'Oh Robs,' says Lexi. She pulls me hard against her and holds me as I cry. 'Shh, Robs, shh.'\n\n'God, Lexi, I'm sorry. I don't know what's wrong with me today.' I hiccough.\n\n'Too much drama', she whispers, and kisses my tears away. Then she cups my chin and lifts it, starting to kiss me. I feel my body respond, and I slump slowly back against the pillows. I wrap an arm around her again, feeling her move in close to me. I can feel her breasts against me, and her thigh as she slides it gently over mine. I gasp for air, my pulse thumping. Lexi pushes harder against me, and I moan. She hooks her left calf over my right thigh and pulls my hip hard against her lower belly.\n\nI slide my hand down her lower back and over her thigh, then back up and under her nightgown. Goosebumps; I can feel goosebumps as I slip my hand further, past the waistband of her cute white panties and up, feeling the taut muscles of her back. \n\nShe whimpers, and slides her hand from my chin down my neck and past my collarbone. I feel like there are electric sparks under my skin, following the path of her fingers down as she teases over my breasts to the erect nub of my right nipple, which is achingly hard and blatantly obvious through the flimsy fabric of my tee-shirt. \n\nThe breath hisses between my teeth as her fingers close on it and start to tease around it. Without thinking I slide my hand around her ribs and almost before I know it the soft swell of her right breast is cupped in my hand. A small part of me is surprised that she isn't wearing a bra.\n\nLexi whimpers a quiet 'Oh god' as I touch her and tease her own nipple in sympathy of her teasing of mine, and my desire for her is a burning ache. She slides her hand under my shirt, but then suddenly stops to wriggle free. She slips her hands under the hem of my tee-shirt and in a single fluid movement lifts it up and off me, causing me to wince slightly as it snags on my hair and bandages. Then the breath is driven out of me again as Lexi dives forward to enfold my right nipple between her lips and my left between her deft fingers.\n\nIt is exquisite. She toys with me with finger and tongue, and I see stars. I must be moaning because she breaks off to kiss me. Then she, too, is topless; her nightie crumpled next to us and her bare skin against mine; her nipples hard against my sternum as she crushes me into a hug while kissing me.\n\nI feel deranged, burning with desire for her. I manage to push her away, and as she starts to protest my lips are on her breasts - I am vaguely amused to her the complaints turn into inarticulate whimpers as I trace my tongue gently around her areolas. She is covered in a very slight sheen of sweat now and her body's natural scent is rising - it is intoxicating.\n\nShe throws her left leg over me and rolls on top, straddling me as she locks her arms behind me and pulls my head against her. But I need air, and break away, and she collapses forward too. We lie there, her on top of me with her head resting on my shoulder, me staring at the flickering flames on the ceiling.",
        "---\n\n'Lexi?' I pant, softly.\n\n'Mm?', she whispers into my ear\n\n'Two things.'\n\n'Oh?'\n\n'You have awesome breasts.'\n\n'Yes, and?' she asks, teasingly.\n\n'Um... can I see you naked again?'\n\nShe stares down at me, and a small grin appears. She pushes herself off me and stands, straddling my hips, as she stares down at me. Slowly, teasingly, she leans forward, hooks her thumbs into the waistband of her underwear, and pulls them down. She lifts one leg daintily and kicks them aside, then stands and places her hands on her hips.\n\n'And?' she says.\n\nI take my time, running my eyes over her body. Her thighs are pale, and the mound of her sex is framed between them, forming a small heart shape in the gap between them. I can see her lips clearly, pale pink, and the sight sends a small shiver of want through me. I look upwards, and meet her eyes.\n\n'You're the first naked woman I've ever seen. And you're gorgeous. I could never get enough of seeing you like this.'\n\nShe looks down at me, and pouts. 'Alas, you're one up on me there.'\n\n'Really?' I ask, disbelievingly.\n\n'Really. Sum total of hot girls seen - zero. Bar today's glimpse in the shower...'\n\n'Coming up,' I say, and lever myself up. Lexi steps aside as I get to my feet. I lock eyes with her, and try to copy the move she just used on me, but I'm far less graceful. Still, I see her eyes drop to follow my briefs down, and I drop them to my ankles, then slowly straighten, kicking them to one side. I take a deep breath, then hold out my arms from my sides and try to turn a slow circle, giving Lexi lots of time to see me. I swallow as I complete my circuit, and meet her eyes again. \n\nShe's watching me, her eyes darting to my breasts and stomach, then down further to my crotch, and I can see a gentle flush on her neck and cheeks.\n\n'Gods, Robs' she says, quietly.\n\n'What?' I ask.\n\nShe shakes her head and laughs, ruefully. 'You are unbelievably hot.'\n\n'Rubbish,' I snort.\n\nLexi takes a fast step towards me and grabs me by my shoulders. 'We made a deal. Now listen to me, numbskull. You, my dear, are at least twelve out of ten. I look at you and all I can think of is touching you.' She steps in closer and pushes herself against me.\n\nWe're almost equal in height, and her breasts push against mine, her erect nipples as hard against me as I'm sure mine are against her. I slowly let my arms trail down her back, and cup her hips as she clasps her arms behind my neck. All I can feel now is her, and all I can smell is her. Her eyes are dark, and her lips are slightly parted, showing just the smallest hint of her perfect white teeth.\n\n'So what is it that you want from me, Robs?' she asks me, seriously.\n\n'Anything. Everything. You' I say, without thought.\n\nThen I lean in, closing my eyes as I do, and kiss her. \n\n---\n\nGently, I try to tease her. I feel her hands moving down, around my shoulders and down my back to cup me as I'm cupping her. One hand doesn't stop, though, and almost before I realise it Lexi's hand is probing down between my legs. I moan and break for air. 'Lexi...' I try, but she presses forward to kiss me again, arching herself slightly and forcing her hand between my thighs towards my sex. I can't help it, I want it, and I shift my feet apart. Her finger teases down to my lips and then gently probes between them, slipping easily down between my soaking labia to my clit. \n\nI groan as Lexi teases her fingertip around me, my back arches involuntarily and I break free of her kiss again to gasp for breath. With my small amount of remaining control I, too, slide a hand around her hip and down towards her mons. Lexi takes a deep breath and then she, too, spreads herself to allow me there.\n\nHer lips are slick to my touch, and her clitoris is small but hard. For a moment the feeling of her little nub under my fingertips overrides everything, even the feeling of her touching me, but then she pushes hard against me and teases her finger up to my entrance, and then inside.\n\nShe pulls away, and then pushes me backwards onto our nest of pillows, then lies down next to me, driving her fingers deep inside me. I convulse and gasp, my hips bucking hard back against her. She raises herself on an elbow and positions her hand so that she can stroke one, then two fingers deeply in and out of my aching vagina. She leans forward to take alternate breasts between her lips, pausing occasionally to tease her fingers out of me and over my clit.\n\nIn and out, each stroke spreading me over her fingers and down to her knuckles. I want more; my hips buck against her, I'm panting and sweating and gasping, crying perhaps, unable to control my need for her to take me and make me hers. I can hear the wet, sticky sound of her fingers plunging into me, and the room seems to go dark around me. I become unable to even move as she drives me swiftly upwards to my plateau and then, deliciously, slower than continental drift and still much too quickly, over into my climax. My legs clamp down on her and I cry out as I have the most intense orgasm of my life on my sister's slender fingers.\n\nI think I actually black out briefly, because the next thing I can actually recognise as reality involves Lexi lying curled up against me, head on my shoulder and hands gently stroking my outer lips. My hips are still spasming with each stroke, and I take a long, shuddering breath.\n\n'Oh my God' is all I can manage to say.\n\nLexi snorts with quiet laughter. She's grinning at me, clearly satisfied with herself.\n\n'I take it that was nice'\n\n'Holy shit, Lexi. Oh god. I wish you could have felt that. Nice... Nice doesn't even cover the first three seconds.'\n\nI reach my hand slowly down to touch myself, feeling Lexi's slick finger running along my lips adjacent to mine. I cannot believe how wet she has made me. Little jolts run through me, and I gasp again. She stops stroking, and slowly trails her slick finger up from my labia, over my mons and through my straggly pubic hair, then over my belly to my breasts. She taps her fingers there, then smiles.\n\n'So, how do you feel now?' she says.\n\n'Literally or figuratively?' I manage. 'Literally, like I've been turned inside out. Figuratively, like I just got religion.'\n\n'The religion of Lexi' she says, deadpan.\n\n'I'd worship at your altar.' I say, without thinking.\n\nShe starts to laugh then. Loud, uncontrollable whoops, and I ruefully realise the massive double entendre I just let slip. I roll my eyes at her, and she laughs even harder if that's possible.\n\nI decide on some revenge to get her to quiet down, and so I reach my free right arm over and slide it down over her belly. Instantly, she's shivering, and her whoops stop, but she still heaves silently with repressed cackles.\n\nUntil, that is, my cunning little fingertip reaches her labia and parts them. Then she just gasps and slivers slightly. I ease my arm out gently from under her and watch her breathing as I gently stroke her. Her eyes are closed now and her lips slightly open again. I gently kiss her breasts, then, deciding that I'm all in anyway, I sit up. \n\nShe gives me a puzzled frown and a quiet 'no, don't' as I stop stroking, but then her eyes widen as I gently take her knees and spread her legs in front of me. Then I shift so I'm kneeling between them.\n\nI take a moment, now, just to admire her. I've looked at myself in a mirror before, and I guess my vagina and lips and clit are passable, but Lexi's are staggeringly hot. Perfect lips, perfect inner labia, rosy pink with a tight entrance, perfectly shaven. I lean forward, and she lets slip a 'Oh god, Robs...' as I gently touch my tongue to her lips and slip it up to her clitoral hood. She moans an inarticulate 'Ungh' and her legs quiver.\n\nShe tastes musky, and the scent from her makes me ache and desire her fingers in me again. I lick her clit again, enjoying the way her stomach muscles clench and release once my tongue is past her hood.\n\nI tease her. Perhaps mercilessly, perhaps not, but the sounds she makes and the way her body responds leaves me in no doubt that she's enjoying it. It takes me a while to learn that she's not mad about being penetrated, but loves to be licked gently, especially just between the hood of her clit and her entrance. She's sweating heavily now; a glistening sheen has spread between her breasts and down over her belly, which is spasming in time with my licks. \n\nHer eyes are slitted but fixed on me as she lies, mouth open, lost in what I hope is her own sensual world.\n\n'Oh god, Robs, don't stop... don't stop...' she mumbles. I couldn't even if I wanted to. Instead, I toy with her, listening to the sound of her gasps and the small whimpers, feeling the quivering running throughout her body, tasting her, consumed by the experience of her and the way her body responds in ways that I can read.\n\nI can see tears on her cheeks now, but all that makes me want is to please her even more. I reach up to play with her right breast, bracing myself on my left forearm now and trusting to my stomach muscles to carry her and me through this. She's getting really wet now, and I can feel her inner lips moving slightly every time my tongue reaches them. Her stomach quivers and she is panting hard, wriggling around under me as I mercilessly have my way with her.\n\n'Robyn... Robyn... Robs... Robs...' she whimpers in time with my tongue tip; growing fainter with each breath until, suddenly, she tenses and starts to convulse. She grabs my head, pulling my mouth hard against her lips and mons as she lets out a long, wailing cry. Her thighs lock against my head, pulsing as I mercilessly continue to tongue her through her orgasm, penetrating her with my tongue tip as her body arches. She lets out a shuddering moan and finally collapses backwards, releasing me. I give her one last lick, feeling her whole body twitch in sympathy, then kiss her clitoris and start to trail kisses up over her mons and belly. \n\nThen I pause.\n\nAll I can hear is her panting and the fire crackling. I lift myself up from her and then scoot forward, bracing my arms on either side of her shoulders and letting my dangling breasts and belly gently touch her. I wait for her to open her eyes and look at me, and then, as she does, I lean in to kiss her. She makes a small sound and reaches up to wrap her arms around me, pulling me hard against her.\n\nMy arms give out eventually and I break off the kiss so that I can lower myself down. I pillow my head on her right shoulder while trying to get as close to her body as possible. \n\nI can hear her heart, still racing, and her breathing is ragged.\n\n---\n\nWe lie like that for some unknowable length of time, not saying anything, just content to feel and consider. Flickering light from the fire fills the room, and I for one don't want to break the spell.\n\nLexi speaks first, with a quiet 'Wow.'\n\nI twist to look up at her.\n\n'Seriously, Robs, if I'd suspected you were that talented I'd have let you do that long ago.'\n\n'If I'd known how unbelievably hot you were under your clothes, and your taste and scent, I'd have raped you in your sleep long before that' I return, quietly.\n\n'Really?' she laughs, slightly out of breath.\n\n'I've loved you all my life, Lexi. I think I've wanted you for most of it.'\n\nShe turns her head to look at me. 'I've known that for a while, Robs.'\n\nI lie quietly for a while. 'And it didn't bother you?'\n\n'You're my sister.' she says, as if that should explain it all. 'At first I thought it was sweet... but then, as I got older and learned stuff I got... intrigued, I guess. But when it was just the two of us I needed to make sure that you were ok, and then I needed to make sure that I'd be ok... and so with one thing and another I could never quite summon up the courage to do what I did today.'\n\nI lever myself up onto my arm and look at her. Her expression is serious; a strange contrast to her sex-hair and the sweat sheening her skin.\n\n'And now?' I ask, quietly.\n\n'I'm yours, if you want me.'\n\n'I do want you. Do you want me?'\n\n'Robyn Emily Blake. You have the nerve to ask me that when your fingers are still slick with me, and you just made me see stars?'\n\n'A girl's gotta know, Lexi.' I say, quietly.\n\nShe reaches up to cup my chin. 'Robs. Even ignoring how awesome that was, what I said earlier goes. You are my home. I don't want anything else.'\n\nI let myself down next to her again, and she snuggles my head into the crook of her neck. We're silent for a while.\n\n'Where did you learn to use your tongue like that, Robyn?' she asks, suddenly.\n\nI cough, then laugh. 'Lesbian porn, Lex.'\n\n'I'd swear that you'd done that before if I didn't know you'd never lie to me.'\n\n'I've dreamed about doing it to you ever since I first found out about it, Lex.'\n\nShe turns her head to give me an amused look. 'Well, take it from me, it was sublime.'\n\n'I'm sure I'll get better with practice,' I say, saucily.\n\nLexi smiles. 'Promises, promises. Though...'\n\nShe wriggles herself free, and pushes me over onto my back. 'Fair is fair, after all,' she says. 'It wouldn't do for you to get to taste me without me getting to taste you.' She starts kissing down over my belly, and I moan a desperate 'Lexiiiii' - I am incredibly sensitive after she fingered me and the thought of any more right now scares me.\n\nBut she ignores me, placing her hands to my knees and forcing them open, exposing me.\n\n'Mmm, you're very wet, Robs,' she says, huskily.\n\n'Famous for it' I manage, before the words are driven out of me by her lips on my labia.\n\nLexi licks me slowly, tasting, teasing. I'm floating on a sea of sensations; there's an aching fire deep in me and I need her to take me to make it ease. But she doesn't, not yet. I realise I'm moaning breathy little 'Oh's and part of me wishes I could record this moment to play back at will. \n\nThen Lexi escalates. She moves around between my legs, and slips a finger deep into me, crooking the tip over so it presses firmly against my g-spot. This alone is exquisite, but when she adds her tongue and lips to my clit my back arches and I can't help myself, I start to moan, loudly, convulsing in time with the licks she gives. It doesn't take long for another crashing climax to take me.\n\nLa petit mort, my arse.\n\nWhen I finally open my eyes, I see Lexi eyeing me past the curve of my mons. She's grinning widely, and still has a finger buried to the hilt in me.\n\n'Oh... oh god... Lexi... god' is all I can manage. Then I moan convulsively as she slips her finger out. She slides herself up along my stomach till she can grind her belly against my labia, but then she stops to lay her head down on my chest, stretching out an arm to hold me. I manage to lift my arms up to clasp them on her shoulder blades, and again we don't move for a while.\n\n'Penny for your thoughts?' I manage, eventually.\n\n'Two things, Robs.'\n\n'Yes?'\n\n'One, you're the first girl I've seen naked, the first girl I've made love to, and the only one I'm ever going to love.'\n\nI take a deep breath. 'And the second?' I ask, scared by the intensity of what she's just said.\n\nShe lifts her head up and gives me an impish grin. 'Second, I'm hungry. Lets go make supper.' \n\n---\n\nShe laughs at my incredulous look, and then levers herself up, pulling the rumpled nightgown over her head and hiding those lovely breasts from me. \n\nShe hands me my shirt. 'Here. Kitchen rules for tonight - tops only, no knickers. I want to be able to perve that fine butt of yours.'\n\nI sit up to pull my teeshirt on, and Lexi offers me her hand to help me up; I'm shaky after my last orgasm, and she wraps an arm around me to steer me to the kitchen, where she installs me in a chair.\n\n'Lexi?' I say, after a while.\n\n'Yes, Robs?' she answers, as she rummages for some pasta in a cupboard.\n\n'I love you.'\n\nShe stops rummaging, and turns her head to give me an inscrutable smile. 'I know, pumpkin.'\n\nI slide back slightly in the chair. 'I meant what I said earlier, Lex. Now it's real. Now there's no escape for me. And probably not for you.'\n\nShe straightens up, and walks over to me. Before I know what she's doing she's sitting in my lap, straddling me, with my head cupped between her arms, forcing me to stare into her eyes.\n\n'Robyn. Listen to me. She releases my head, and takes one of my hands, placing it between her breasts over her heart. 'I didn't fuck you today. I didn't let you seduce me today. I certainly didn't let you rape me, and I hope I didn't rape you. To me, this was making love... the best lovemaking I've ever had. Lots of people wouldn't understand. They'd call this incest. I call this love, and to me it feels right. I don't know when I started to think of you as anything but my sister, but it happened sometime, and now it's out in the open between us. I don't want anyone else, and I don't want anything else but the life you and I have.'\n\nI squeeze her hard against me, and she gives me a quick kiss. Then, as she tries to get off my lap I grab her hips and hold her. She gives me a quizzical look. \n\n'I just want you to know that it wasn't seduction. It was lovemaking for me too' I say, quietly. 'I've wanted you so long I can't remember when it first started. You've always been there for me, always guarded me, always listened, always wanted me in your life. Just understand that I can never ever be apart from you now. It would break me.'\n\nShe traces her finger gently over my cheek. 'I'd never want to be apart from you, silly. I'd miss your fingers and that tongue.'\n\nI laugh and she slips off me.\n\nLexi goes back to rummaging, and I'm content to watch her, helping out with the small tasks she entrusts to me (cutting tomatoes). She looks deliciously domestic in our tatty old kitchen apron and her almost-transparent nightie, and I enjoy the view. She's not above doing things like bending ridiculously far forward over the oven so I can almost see everything from my vantage point. She hams it up, striking various pin-up poses (ditsy blonde, bombshell, succubus) and dinner preparation passes in a flash. \n\nAlmost before I know it I'm setting our places and pouring us wine to accompany the simple tomato and basil dish that Lexi's prepared.\n\nThe smell of the food makes me realise that I'm ravenous. Lexi dishes up and then we eat; though to be fair I think what I do should be classified as devouring. I hadn't realised how hungry I was, and I think Lexi is the same because we both grab seconds. Once we're done we abandon the dishes for the morning, and make our way back to the lounge, which is not as warm as I'd like. \n\nLexi shivers, and presses up against me.\n\n'I have a suggestion,' she says.\n\n'Yes?' I ask.\n\n'I'm cold. I'm tired. I'm pretty filthy. I'm pretty sure you're the same. How about we run a bath?'\n\n'That sounds lovely. I'm pretty shaky though; you're going to have to help me get back upstairs.'\n\n'That's a given, Robs.' \n\n---\n\nLexi wriggles in under my left arm and we make our way carefully upstairs. I aim for the family bathroom but Lexi gives me a quiet 'Nuh-uh.'\n\nMum got Dad to add a large bath for her when they bought the house. Neither of us have used it much since the accident, and I'm a little unsure about using it now. I think Lexi knows this, because she says, quietly, 'It's our house now, Robs. We need to live with the ghosts but that doesn't mean we need to leave them all the room.'\n\n'Guess so. Dunno what Mum would think of what we got up to today, though' I mutter.\n\nLexi grins at me. 'She'd have died of shock.'\n\nI laugh ruefully. 'Then she'd have come back to life to drag both of us into hell.'\n\nLexi cackles, and we walk into Mum and Dad's room and from there into the en suite. Lexi sits me down on the loo and then goes to work; she opens the hot tap and lets the water drain till the gas heater has kicked in. Then she drops the plug in, and lets the water run. She gives me an amused look and pulls off her soiled nightie. ",
        "Once again, I feel desire tickling inside me as she bends over to stir the water, then reaches into the cupboard to grab some essential oils, giving me a lovely view of her breasts. 'Tea tree or Geranium?' she asks me.\n\n'Tea Tree'\n\nShe struggles a bit with the bottle, then gives a frustrated sigh. She hands it to me, and gives me an imperious 'Open that' before going back to nursing the bath. I clamp the bottle lid in my stronger right hand, and try to force it open. Eventually the top creaks and suddenly gives, and I hand the opened bottle back to Lexi, who decants a third of the contents into the water. The smell spreads through the room, and I sigh - tea tree is one of my favourite scents.\n\nI realise I've been staring at Lexi only when she walks over and leans forward to place her face right in front of mine. Satisfied she has my attention, she smiles, and says 'While I'm flattered that you can be so totally distracted by my body, Robs, it's time to get you into the bath. So take off the top and let us get you into the water, ok?'\n\n'Ok Mum' I mutter, sardonically. Lexi bumps her fist to my shoulder, and then steps back. I take the hem of my shirt and pull it slowly up and over; fighting slightly with it as it tangles again in the bandages on my head. When I get it off, though, Lexi's eyeing me and flushing slightly. \n\nI laugh then, loudly, and she grins a shamefaced grin.\n\n'Can't help it Robs, I feel like I'm 16 again and just discovered what an orgasm was.' She steps forward, and reaches out to gently cup my breasts. I lean back against the toilet's cistern and watch her expression as she explores me. Her hands are warm from the bath and her fingers are gentle. My nipples are erect again, and Lexi strokes them gently, before raising her eyes and looking at me.\n\n'I wish you could see yourself the way I see you', she says quietly.\n\n'Maybe you could teach me' I answer. 'But only if you learn to love yourself too.'\n\nShe smiles, sadly I think, but doesn't say anything as she drops her hands to take mine. In a single fluid movement she steps back and pulls me to my feet, then steers me to the bath and helps me step up and into it. \n\nShe helps me as I lower myself down into the water; I give a groan and lean slowly back in the almost scalding heat. I rest my arms on the wide sides of the tub, and watch as Lexi dims the lighting and then steps in to the tub with me. She lowers herself down, and I watch the water rise up over her thighs and up her stomach and chest, till all but the tops of her breasts are submerged like mine.\n\nLexi also leans back with a sigh and we just look at each other for a while. We've wound up with my legs tucked in under her haunches, and her feet resting on my thighs. She smiles and closes her eyes, letting her head rest back against the bathtub's rim, with the result that she slides slightly forward, closer to me. \n\n---\n\n'You ok?' she asks, after a while.\n\n'Can't remember when I've ever been this ok.'\n\n'That's good' she says. Then she yawns, widely. 'Whoa. I'm buggered, Robs.'\n\n'Pretty far gone myself,' I say.\n\n'Hand me the soap?' she asks, but instead, I pour some into my hands, then lean forward and soap her shoulders. Her eyes flick open, and she watches me, then she gets up and turns around so she can lie back against me while I rub the suds down over her shoulders and back and of course her breasts. I run my hands down under the water and over her body, making sure to clean her lips as well; all while she's languidly lying against me, making soft noises of appreciation.\n\nBliss is the best word I can think of as I gently nuzzle her ear. Her body feels so good against me. I slide my hands back over her and wrap my arms gently around her, then lean back so that the bath supports me and I her. I close my eyes, listening to the sound of us breathing together and feeling her back against me. I feel like the luckiest girl in the world.\n\nEventually, of course, the water starts to get cold, and we have to get out. Lexi grabs us some towels and then amuses herself drying me off like I'm a girl again. There's a glow to her that's been absent the last while; and it makes me happy to see her light-hearted playfulness emerging again. I pull her into a spontaneous hug and am rewarded with a kiss, then she quickly dries herself off; dropping her used towel to the floor.\n\nBut when she turns to look at me again, her face serious and her eyes dark and sad.\n\n'Robs?' she says, quietly breaking the silence.\n\n'Yes, Lexi?'\n\n'I've got a silly question to ask.'\n\n'You've never asked me whether you can ask me something before.'\n\n'It's... I'd understand if you don't want to...'\n\nI raise an eyebrow but say nothing, waiting for her.\n\nShe looks down, and seems to almost shrink in on herself as she asks, quietly, 'Would... would you mind if I slept with you tonight? I... I don't want to be alone in an empty bed anymore.'\n\nAnd just like that she moves from the confident vixen to the insecure girl who never had time to finish growing up before life got in the way. I can't find the words; all I can do is grab her fiercely and hold her hard against me; I don't know how long for. Eventually I manage a hoarse 'Why did you even need to ask?'\n\nI notice that she's shivering so I take her by the hand, and lead her through to her room. We both have double beds, but my room gets no morning sun and I'm not so attached to my bed that I'll struggle to sleep in hers.\n\nI pull aside her blankets and she sits down, then lies back as I tuck her in. I do a quick scamper through the top level of the house to turn off the lights, then head back to her room to crawl, chilled, in behind her. She squeals at that but doesn't draw away, and I burrow in against her to leech some of her warmth. Then I sneak my right arm under her head and wrap my left around her, pulling her close as I spoon her.\n\nAfter a short while she wraps my left arm under hers, and holds it tightly against her under her breasts.\n\nAgain, silence, apart from our breathing. I can smell her through the scent of tea-tree we both carry with us; she smells of home, of safety.\n\n'Thank you, Robyn,' she whispers after a while.\n\nI burrow my head against her and kiss the nape of her neck. 'No, Lexi. You don't ever need to thank me for loving you. You deserve all of it, and more.'\n\n'All I need is you,' she says softly.\n\nI smile, and squeeze her against me. 'That makes us two peas in a pod' I whisper.\n\nSoon, she's asleep. It eludes me for a while, my mind is too busy processing the day's events. My groin aches pleasantly thanks to Lexi's efforts and I can only marvel that all my fantasies seem to have come true. I know that life just got seriously complicated for us both; but I don't care.\n\nI'm in love with my sister, and it's reciprocal, and, just for a moment, all feels right with the world.\n\n.:. fin .:."
    ],
    "authorname": "onehitwanda",
    "tags": [
        "sister",
        "love",
        "exploration",
        "romance"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/alexis-5"
}
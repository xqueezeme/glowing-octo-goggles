{
    "title": "Abbie's Summer",
    "pages": [
        "This is my story, albeit considerably elaborated and condensed in time. My partner, a wonderful, tolerant and creative man, has written it with my help... and a sexy tale it is, even if I say so myself! \n\nThis is a true account of my deep, passionate involvement with two people at the same time \u2013 my then boyfriend and his wild, wonderful step-sister \u2013 during an idyllic summer holiday in 1993 at a remote beachside house in the North Island of New Zealand. The earlier encounter with my physiology tutor and the subsequent adventures of all four of us when we went clubbing together in Auckland are also true. \n\nI will never forget that summer; it was a turning point in my life. Looking back, I confess that I was a rather uptight young medical student beforehand, but in the company of my two lovers I was quickly transformed into a much more open, adventurous and loving person. I am forever grateful to David and Lara (not their real names, for obvious reasons!) for unlocking my inhibitions and helping me find myself as a woman.\n\nI had a sexual and emotional epiphany that summer, and to this day I remain (*blush*) an unremitted 'analoholic'.\n\n\n\nAbigail C\n\n\n\n<center>******</center>\n\n\n\n\n\n1\n\n\n\nAbbie awoke with a smile on her face. It was a warm day in early summer and the sun was streaming into her upstairs bedroom. Lying naked in bed, she stretched languidly, and as she did so the sheet slid across her chest, causing a pleasant tingling, followed by tautening, in her nipples. Her mild arousal instantly triggered the delicious memory of the previous night's hot and heavy phone sex with David, her boyfriend \u2013 a first for her. She had enjoyed two rapturous climaxes while she and David talked dirty to each other. Afterward, she had drifted off to sleep, one hand still between her legs. Sleeping naked was not something she normally did. There wasn't a lot of privacy when sharing a flat with three other university students, and besides, Abbie thought \u2013 until recently, let's face it, she'd been too inhibited to experiment with such sensual delights. \n\nToday, though, she was alone in her Christchurch flat. Everyone else had headed back to his or her hometown for the long summer holiday. She was the last of all her friends to finish her exams; David had returned home to Auckland over a week ago. Although her 19-year-old heart ached for her boyfriend, she felt happy in a way she had never experienced before. She was relishing her independence, and the summer ahead held promise of adventure. For the first time in her life she wouldn't be spending the whole holiday period with her family in the small South Island town where she had grown up. Her plan was to head back to her parents' home until after Christmas, and then, in January, head off to join her boyfriend. Abbie had been invited to spend the rest of the summer with David and his family at their coastal holiday home on a farm in the Coromandel. \n\nShe bounced out of bed, drew the curtains and stood in a pool of warm sunshine, checking herself out in the full-length mirror. By any standards, she was stunningly attractive - although until she met David she had scarcely acknowledged this to herself. Her conservative Christian upbringing and high intelligence had combined to produce a young woman who was more focussed on her studies than on exploring her sexuality. She wasn't prudish or ignorant about sex, and was aware that her looks could easily turn heads. It was just that after putting up with years of panting attention from spotty, zealous Bible Class youths she had learned (without being specifically conscious of this) to dress and behave in a way that played down her attractiveness. \n\nLeaving home and living in a university town, with lots of social activities and ready access to alcohol and soft drugs, had opened her eyes to different attitudes and ways of life. While Abbie remained a diligent student she had gradually learnt to relax more and to have fun. Slowly, an identity as a desirable young woman began to form. She had discovered the joys of masturbation only after coming to university, and now could scarcely believe that she had missed out on such pleasure for so long. Earlier that year she had developed a secret crush on one of her tutors, after which she found herself craving an orgasm almost daily. \n\nLate one night, upon crashing into Abbie's bed after a party, Abbie and her flat-mate Lisa shared their fantasies about guys. It felt so right when the two best friends progressed to passionate kisses, then to masturbating together. Next morning Abbie was horribly embarrassed, but Lisa smiled and hugged her reassuringly. Later that day Abbie received a present from Lisa - a large purple vibrator tied up with a ribbon. She also discreetly disposed of Abbie's sensible underwear and saw to it that her friend's summer wardrobe had a makeover.\n\nAnd then, one month ago, David's arrival in her life had been like a seismic jolt. They met at a bar, where they were each drinking with a separate group of friends. Abbie usually scorned engineering students due to their reputation as mindless jocks but she had to revise her prejudice after meeting David. He stood out because of his friendly and confident smile, his considerateness, his intelligence. A tall, muscular body, untidy blond hair and rugged blue-eyed good looks were an added bonus. The chemistry between them was immediate and powerful; there was a raw physical attraction that they both sensed would be life changing.\n\nOn their first night together David took Abbie's breath away when they kissed and explored each other's bodies; on the second night they made love until dawn. David proved to be skilled and passionate. On this, her first real grown-up sexual experience with a man, Abbie felt her inhibitions melting away and she responded with ever-growing ardour, experiencing climax after climax. She spread her thighs and opened her heart simultaneously - feeling wondrously abandoned as she pushed up her pelvis to meet his mouth while he feasted on her pussy; delighting in his eager virility, his hard, naked body, the sight and taste of his cock as she sucked him; purring inwardly like a cat as he fucked her, wrapping her legs around him, riding him, fucking him back... \n\nUnfortunately, since that great beginning their times together had been fleeting and rushed due to demands of study and encroaching exams. Now, Abbie thought to herself with a smile \u2013 soon it would be time for her sensual education to continue.\n\nAbbie regarded herself critically in the mirror: average height, 51kg ... big brown eyes, with long lashes ... shoulder length chestnut hair, tousled but shining in the sunlight ... clear skin, full lips ... perfectly formed pert breasts, medium sized, with slightly puffy areoles and prominent, rosy nipples ... softly rounded belly, with a jewelled stud in her navel (not yet disclosed to her parents) ... narrow waist ... long, shapely legs ... pretty ankles and feet. She frowned as she noticed how much her pubic bush had grown since her last shave; then she turned, checking out her cute round ass and smiling as she remembered how much David loved to watch it as she walked.\n\nShe stepped into the shower, razor in hand, and tended to her underarms and legs before focussing on her pussy hair. She shaved her mound smooth, leaving just a little fuzzy strip of auburn hair; then she squatted to tend to the hair around her vagina and anus. Rinsing off with the showerhead, Abbie's pussy began to tingle as the hot jets of water played over her labia, which were now pouting open, as she remained squatting. Arousal coursed through her body making her cheeks flush. \n\nShe reached for the shower gel and smeared it over her breasts and belly, and downward to her beautiful smooth pussy. Her fingers began to slowly stroke her private folds and over and around her clit. She closed her eyes and let her middle finger slide lower, further, allowing it to tease and press the sensitive skin around her puckered anal rosebud. Abbie had always secretly enjoyed washing herself there but had never consciously allowed herself to think of her ass as an erogenous zone. Now though, it felt deliciously naughty to let her fingertip slip just a tiny way inside...\n\nAbbie was very turned on. With trembling hands she squirted more gel onto her fingers and soaped her ass cheeks and the cleft between them. Her heart was pounding as she leaned forward, resting her head against the shower wall, and sank to her knees. A soapy middle finger slid between her legs to her waiting anus. Her other hand flew to her clit, urgently stroking now. Slowly, breathing raggedly, she pressed her finger to her asshole, felt herself twitch momentarily in token resistance, and then gasped with pleasure as she felt herself open up, allowing her virgin back door to be penetrated. Eyes closed, her sensual instincts took over, and she rocked her hips so that her invading finger was now gently fucking her anal passage. It was so easy to let her finger slide deeply inside her, little by little, until it was buried as far as it could go.\n\nSomehow, though, this didn't seem enough. She trembled, and her cheeks burned. Abbie withdrew her finger, applied more gel and pressed two soapy fingers to her crinkled opening. Her outer ring muscle yielded immediately, but then she felt a tight resistance as her fingers pressed against the inner ring. Eyes closed, panting, she concentrated on relaxing as her probing fingers pressed inward; she felt a hot stinging sensation, not exactly pain, and a little sob escaped her lips as her fingers succeeded in deeply penetrating her ass. A moment later, with a hot rush, her orgasm washed over her. Abbie's pussy and asshole clenched again and again; her climax was intense and prolonged. \n\n\"Oh fuck, yeah...\" she sighed, overcome with her delightfully perverted newfound pleasure.\n\nLater, as she dressed in snug jeans and t-shirt, she was deliciously aware of a leftover tingling/stinging feeling in her bottom and realised she was still horny. She felt warm, alive, bold...\n\n<center>******</center>\n\nIt felt a little strange to be shopping alone. In this part of town the streets would usually be thronged with students, but with the summer break having begun the city seemed quiet. Abbie was looking for a new bikini \u2013 her old one dated from high school days; it was faded and very conservative. She also needed some other summer things to wear on her stay with David and his family. \n\nShe found a pair of little white shorts which, she thought with a smile, her boyfriend would really like \u2013 they were cut high at the back, revealing the crease between thigh and ass-cheek. David always said those creases drove him wild. The search for a bikini was less successful. She wasn't sure exactly what style or colour she was wanted but nothing she looked at seemed right. As she browsed from shop to shop her buoyant mood started to deflate a little. \n\nAt last, as she was starting to think about taking a coffee break she found herself outside an adult supplies store, a place she'd noticed before but never felt comfortable entering. A display of fetish-wear in the window caught her eye and she checked it out without embarrassment, confident in the knowledge that none of her friends would be about...\n\n\"Hello Abbie.\" The deep, sexy voice made Abbie start. Then, as the shock of recognition hit her, she spun around, her cheeks instantly reddening. \n\n\"Oh h-hi Tony...\" It was her physiology tutor, the one she had enjoyed so many fantasies about earlier in the year. Abbie's voice faded, she didn't know what else to say. When she looked back at him Tony was smiling warmly.\n\n\"Pretty wild stuff, huh? I love this store!\"\n\n\"Well, actually I've never been inside. Umm... I was just passing. I'm shopping for some clothes and, er...\" She held up her one shopping bag as if to justify herself, then quickly realised how ambiguous this sounded considering the obvious interest with which she had been staring at a tight-fitting rubber suit in the sex shop window. \n\nShe giggled. \"I mean, I'm looking for regular clothes\".\n\n\"Sure, sure,\" he laughed, teasing her. \"Come on, let's go inside\". Without waiting for her reply he took Abbie by the elbow and led her through the door. \n\nTony chatted to the sales clerk and unselfconsciously bought a bottle of flavoured lubricant. Meanwhile, Abbie tried unsuccessfully to look worldly and cool as she stared around in wonderment at the wares on sale. Her eyes lit upon stacks and shelves filled with sexy lingerie (some tacky, some tasteful, she noticed), dildos, probes, vibrators, DVDs, books and other products that she didn't even recognise. With a shock she recognised her own (now well used) model of vibrator \u2013 the one her flat-mate had given her months ago. Lisa must have bought it here, she realised. \n\n\"See anything you like?\" Tony was at her side again.\n\n\"Heaps...\" she replied, rather boldly, \"but I'm certainly not buying anything in front of you, Mr Hughes!\" \n\nTony laughed, and put his arm around her shoulders. \"Come on, let's get a coffee\".\n\n\"OK... I was just going to suggest the same thing.\" \n\nAbbie found she was enjoying Tony's company. She felt wonderfully grown up, and seriously flattered, to think that her ex-tutor was interested in spending time with her. As he leaned close she could smell his familiar aftershave, and her old feelings of attraction welled up stronger than ever and made her heart skip a beat. Tony was in his early 30's, average build but with strong hands, rakishly long hair and rimless glasses; dressed in corduroy pants and a crisp linen shirt.\n\nSipping their lattes in the corner of a trendy caf\u00e9, Abbie allowed herself to flirt openly. She chattered away about her forthcoming holiday, smiling at Tony and fiddling coquettishly with her hair. He was equally relaxed and forthcoming, and Abby soon learned that he was currently unattached. She talked about her shopping expedition and her difficulty finding a bikini she liked. He demanded to see her new shorts, to which she made a token protest, but was delighted to notice the sharp intake of breath and widening of his eyes when she teasingly displayed her purchase. \n\n\"Your boyfriend is in for a treat,\" he said softly, and a little wistfully. He leaned back in his chair. \"Abbie,\" he began, \"it's been a delight to get acquainted... properly, I mean, not just as your tutor. I'd really like to buy you a present, something special for your holiday. Have you got a summer dress to wear out at night?\" \n\n\"Well, no... but I can't let you spoil me like that.\" Abbie demurred.\n\nTony laughed and took her hand across the table. \"Yes I can... and don't worry; I don't expect anything in return.\" Abbie felt a slight pang of disappointment at this, but squeezed his hand and smiled back happily.\n\nWith his arm around her waist he led her down the street to an upmarket designer store that Abbie had never even considered going into. Together they looked through the racks of expensive clothes. At the same moment their eyes fell on a sexy little sundress, daringly short with spaghetti straps and a plunging backline. It was beautifully cut and made of a soft, sheer peacock coloured fabric - emerald with splashes of turquoise - a perfect match for Abbie's colouring. \n\n\"Oh yes,\" Tony breathed. \"Try this on.\"\n\nInside the changing cubicle Abbie admired herself in the mirror. The dress was a perfect fit and looked even more stunning now that she had it on. She had never worn such an exquisite garment. \n\n\"Can I see?\" Tony asked, and without waiting for a reply pushed open the door to the cubicle and joined her inside. He shook his head. \"You look stunning, Abbie... but you need to lose the bra - the straps are showing.\" \n\nShe obligingly unclipped her bra and wriggled out of it with the dress still on and looked again at her reflection in the mirror. She saw Tony standing behind her, smiling. Their eyes locked. Next thing he had his arms around her from behind, nuzzling her neck. \n\nAbbie spun around in his arms and kissed him eagerly on the mouth. Tony felt like he was in heaven. He closed his eyes to focus on the incredible softness of her lips, and kissed her back. She stood on tiptoe, her arms snaking around his neck... lips parting, the kiss deepening, her body pressed to his. At last, she drew back. \"Thank you sooo much, but Tony, this dress is way too expensive...\"\n\nTony's eyes sparkled. \"That's OK. It's yours, on one condition: wear it this afternoon... and wear nothing else.\" \n\nAbbie felt his hands slide slowly down from her waist, over her ass and under the hem of the dress. He hooked his fingers through her panties and gently tugged them down until they dropped around her ankles. Abbie shivered with erotic anticipation and felt her mouth go dry. \n\nShe smiled slowly, and nodded. \"OK,\" she whispered. As she pressed her body to his and kissed him passionately again, his palms moved back under her dress to cup her ass.\n\n\"Is everything all right?\" the salesgirl called from outside the cubicle. \n\nAbbie stifled a giggle. 'Wonderful, thanks!\" she replied.\n\nStanding beside Tony as he paid for the dress, Abbie delighted in the sexy feeling of being naked in public apart from a thin, semi-translucent layer of material. Her pussy was wet and she felt incredibly aroused. She enjoyed the salesgirl's look of admiration tinged with envy, and stretched languidly, knowing full well that her hard nipples would be visible as the fabric stretched across her bust. \n\nThey stepped outside into the early afternoon heat, hand in hand. \n\n\"And now for your bikini - I think I have the answer!\" Tony said. \n\nAbbie had completely forgotten about her swimsuit problem, in the excitement of buying her sundress. Tony explained that he was the part owner of a surf store at the beach, which was managed by his brother.\n\n\"He has a great range of bikinis. The store's closed today, but I have a key. Let's take a look.\" Abbie happily agreed. \n\n\n\n<center>******</center>\n\n\n\n\n\nAs she sat beside Tony in his classic 1968 MGBGT on the road to the beach, a warm breeze in her chestnut hair, she allowed her dress to ride high up her thighs. She turned her head to watch him as he drove, then slowly let her knees fall apart as her fingertips caressed the inside of her thighs. Sliding down a little in her seat, her dress rode higher still, exposing her pussy. 'Look...\" she breathed as they stopped at some traffic lights. Tony's eyes met hers, and then dropped to feast on the alluring sight of her damp, pink, freshly shaven cunt peeking out below her dress as she writhed sensually in the seat. She smiled at the shock and excitement on his face. Abbie licked and sucked a finger then slowly drew the moistened digit between her pussy lips... dipped inside her wet centre... and returned it to her mouth. Just then a car pulled up beside them. Abbie grinned wickedly, pulled down the hem of her dress and gave her tutor a teasing wink.\n\nThey pulled up outside Tony's store. He unlocked the door (trying not to let his hands tremble) and let her inside. As soon as the door closed she flew into his arms. He lifted her effortlessly and she locked her legs around his waist, held him tight and nuzzled into his neck.\n\n\"Whoa, Abbie\" he said, laughing. He let her down and gently stroked her cheek. \"Let's get you that bikini first.\" \n\nTaking her hand he led her to the shop's swimwear section, and then busied himself closing the blinds so they had complete privacy.\n\nThe selection to choose from was everything Abbie could have dreamed of. She picked out a sexy bikini, in a silky, shiny material with a snakeskin effect, and held it up for Tony's approval. It was much more daring than she would ever have considered in the past but right now she was so turned on her only thought was to make Tony want her so much that he would be unable to resist fucking her right there and then.",
        "Leaning back on the counter, Tony smiled. \"Good choice.\" \n\nShe looked into his eyes and slowly lifted her dress, up and right over her head, then stood naked before him. Her nerve faltered momentarily and she blushed, then quickly put on the bikini and checked herself out in a full-length mirror. It was perfect: the four tiny scraps of fabric fit her snugly and barely covered her breasts and ass. \n\nAbbie felt her tutor come up behind her, one hand sliding across her belly, the other cupping a breast, his breath warm on her neck. She sighed, and closed her eyes. \n\n\"I want you... so much,\" he whispered, sliding one hand inside the front of her bikini briefs. She tilted her pelvis, eagerly offering up her very aroused, wet cunt to his invading fingers.\n\n\"I'm yours,\" she whispered back. \n\nShe turned and kissed him, gently biting his lip and his neck as she unbuttoned his shirt for him, pulled it loose, and then unzipped his pants. She crouched to pull down his pants and undershorts. Tony's thick, erect penis sprang free, right in front of her face. She looked up and smiled at him. \"It's beautiful,\" she breathed. Very slowly, eyes locked on his, Abbie let her tongue slide over and around the head before taking his hard cock in her mouth. She sucked on it, swirled her tongue around it, making him groan. She felt his hands at the back of her head, urging her on, and knew that he wanted more. \n\nAbbie's whole body tingled with lust. She slid her hands around to his hard buttocks and took his cock deeper into her mouth. Tony sighed in bliss as she sucked him hard. She released him, let her lips tighten just beneath the head, and then pulled his shaft into her again. Taking his cue from her, Tony began to fuck her mouth \u2013 slowly, gently, letting her stay in charge by holding onto his ass cheeks with both hands. With each stroke Abbie swallowed his cock a little deeper and held him there, sucking him rhythmically, before releasing again. Belying her inexperience, Abbie's sensual intuition took over. She closed her eyes, took a deep breath and let his cock slide still deeper, inch-by-inch, until she felt him enter her throat, swallowing him completely. To her surprise and delight, she did not gag. She held him there as she suckled... then released again.\n\n\"Oh God, Abbie... I'm going to cum!\" he gasped.\n\nShe glanced up, eyes sparkling, then swallowed him fully again... held him there, sucking, urging him on. Tony's legs shook, his head tilted back and his orgasm hit him like a bolt of lightning. He jerked, cried out and his cum spurted down her throat, jet after jet. She gripped his ass, pulling him completely into her, swallowing in unison with each spasm of his cock. \n\nOnly when his climax subsided did Abbie free him from her throat and draw breath. She tasted his salty cum. As she released him slowly, she closed her lips around his cock, freeing him at last with a little pop. With a wicked grin she wiped her mouth with the back of her hand.\n\nHe shuddered, eyes wide, stunned... \"How... on earth... did you do that?\" he said, his breathing ragged.\n\n\"Dunno,\" Abbie giggled, \"but you're not finished yet, Mr Hughes!\"  \n\nHe smiled weakly back. She took his softening cock reverently in one hand and cupped his balls with the other. Her tongue danced and slid over his penis, avoiding the oversensitive head, then gently licked his balls. \n\nAbbie stood and kissed him long and deep. She bent her head and sucked his nipples, making him groan. Tony watched, transfixed, as she stepped back and sat on the edge of the sales counter before him, pulled open her bikini top and traced wet rings around her own stiff nipples with a moistened finger. Consumed by desire, all inhibitions gone, she lay back and drew her feet up to the edge of the counter... let her knees fall wide apart... pulled her bikini bottom to the side... and arched her back, offering herself to him. He gazed at her coral pink, glistening cunt and thought that he had never seen anything so achingly, wantonly beautiful. Abbie opened herself with her fingers, dipped inside and slowly began to stroke her clit. To his amazement, Tony's cock stirred, and grew rigid once more.\n\nShe smiled at him, almost shyly. With shaking hands, she undid the ties of her bikini, letting the wisps of material fall away. Naked now, she lay open before his gaze, thighs spread widely apart like a deliciously provocative nymph. She felt feral in her desire. I'm a bitch in heat, she thought to herself with an inward smile. Slowly, gracefully, Abbie turned over onto elbows and knees, presenting herself to him again, ass high in the air, shoulders low. She bit her lip, heart pounding, waiting... her whole body ached to be taken, to be fucked by this beautiful man, her teacher.\n\nShe felt his hands on her hips and sighed deeply; pressed back at him so his hardness nestled into her ass-cleft. Urgently, his hands pulled her open and his cock plunged deeply into her slick cunt with one stroke. Abbie gasped... met his thrust... arched her back. And then at last they fucked... roughly, both crying out with animalistic desire. He ravaged her, slamming hard into her willing cunt, his buttocks clenching with each thrust... gripping her hips and pulling her towards him, his balls slapping against her. The heady scent of passionate sex filled their nostrils.\n\n\"Oh yesss...fuck me, FUCK me!\" Abbie heard a woman's howl of desire and realised, with a shock, that it was her own voice. As she bucked and jerked, Abbie rubbed her clit with one hand. The need to cum consumed her and made her body thrum with almost unbearable tension.\n\nAnd then she erupted with a half-scream, orgasm flushing through her from her neck to the tips of her toes. Tony rode with her climax, thrusting in time with her waves of pleasure. Just as her orgasm began to subside she felt him groan and the spasms of his own climax spurted deep inside her.\n\nShe collapsed face down onto the counter, her legs suddenly weak as jelly. His semen dribbled out of her as she pressed her legs together and squeezed her inner muscles, little ripples of pleasure coursing through her still. Tony climbed up onto the counter beside her, stroked her face and took her tenderly in his arms. She nuzzled into his shoulder, tears pricking her eyes.\n\nAbbie knew in that moment she had been transformed. No longer a sexual novice, she was a young woman whose sexuality had been ignited and now burned at the core of her being. She was shaken... amazed... and very excited, as she thought about the summer ahead. Even now, lying in Tony's arms feeling wonderfully contented and fulfilled, she knew she was both ready and eager for more erotic adventures.\n\n\"Thank you, Mr Hughes,\" she murmured.\n\n\n\n\n\n\n\n2\n\n\n\nA few weeks later, In early January, Abbie was sitting on board a plane to Auckland. She was feeling a mixture of apprehension and slight deflation. David had phoned the previous evening to explain that he and his parents had to attend some boring business meeting in the city, which meant they wouldn't be able to meet her as planned. \n\n\"I'm so sorry, babe. I miss you heaps, but it's only going to be one more day,\" he said. His mother and father both came on the phone to apologise as well. They sounded really friendly and welcoming.\n\n\"Don't worry, Lara will take care of you. She's staying for the summer as well,\" David said. Lara was David's 26-year-old stepsister. He had spoken of her a few times, and had said they got on well together.\n\n\"How will I recognise her?\" Abbie asked, a little plaintively.\n\n\"Oh, she'll recognise you... she knows all about you,\" David replied\n\n\n\n<center>******</center>\n\n\n\nAs she walked into the arrivals area Abbie scanned the crowd anxiously. She was just about to find a seat to wait when she spotted a strikingly sexy young woman on the other side of the hall, also looking around. The other woman was tall and curvy but carried not an ounce of overweight... lightly tanned... blue eyes and black hair in a short bob... a face like a model, subtly but perfectly made up... dressed in a short blue halter top, tight white jeans, classy but understated earrings and bangle, and high heeled white sandals. Abbie stared, oblivious to everyone else in the hall, and held her breath in anticipation. She realised she desperately wanted this siren to be Lara.\n\nAfter what seemed like ages the woman noticed Abbie looking at her. A smile lit up her face and she hurried over. \"Abbie!!! Yay, I found you!\" she gushed, opening her arms and enveloping Abbie in a long welcoming hug.\n\n\"Hi Lara,\" Abbie smiled back, \"glad you recognised me.\"\n\n\"I'm short-sighted, but once I spotted you it wasn't difficult... I was too vain to wear my glasses,\" she added, laughing.\n\nLara seized both Abbie's hands and appraised her without embarrassment. Abbie felt her cheeks go slightly pink.\n\n\"Wow, you're even hotter than David said!\" Lara breathed. \"I'm sooo glad you've come, I'm really looking forward to getting acquainted.\"\n\nIt was on the tip of Abbie's tongue to blurt out that she found Lara incredibly hot as well, but caught herself just in time. \"Umm, thanks... it's... er... great to meet you, too,\" she stammered. \n\nIf Lara noticed how nervous and tongue-tied Abbie was she didn't let on. She chattered away unselfconsciously about herself, filling Abbie in about her life and her family, as well as showing an interest in Abbie's studies and social life. It turned out Lara was the only child of David's stepmother from her first marriage, which had ended five years ago. She was close to her stepfather and stepbrother and loved spending time with her new family. She worked as a law clerk in Auckland, and was employed by a female lawyer whom she really liked. She hinted at a relationship with her boss that was more than just professional. Lara said she had a boyfriend but was feeling dissatisfied with him. She hadn't invited him down to Coromandel for the summer holiday because \"we both need a break\". \n\nIn truth, Lara's love life was a tangled mess. She had plunged into a hot affair with her female boss, but had chosen to be open about it with her boyfriend. This had naturally caused pain and ructions, and she was glad to have some respite with her family to consider her options. And now, she thought ruefully to herself, she was feeling hugely attracted to this gorgeous young thing who had landed almost literally in her lap. So much for 'time out' from the complications in her life! Lara decided to be circumspect \u2013 for now \u2013 about her bisexuality. From what David had told her she knew Abbie was quite inexperienced, and she didn't want to make her feel awkward.\n\nSitting in the passenger seat of Lara's BMW convertible on the way to the beach house, Abbie gradually relaxed. Lara was really easy to talk to, almost like they had been friends for years. She soon found herself conversing amiably, sharing personal details and laughing. She was a little in awe of Lara's stunning attractiveness, as a result of which it never entered her head that Lara might be similarly interested in her. She therefore felt quite safe in allowing herself the secret luxury of falling in lust. Apart from drunken kisses shared with her flatmate, Abbie had no experience of sex with other women. Her Christian upbringing had caused an unconscious psychological barrier to this idea. Now, though, in her new adventurous frame of mind, she eagerly embraced the possibility \u2013 at least in fantasy.\n\nLara negotiated the winding farm road to the coast, driving fast and confidently. Abbie periodically stole glances at her new companion, imagining her naked and indulging in daydreams of touching and kissing her beautiful golden skin. \n\nThey arrived at last at the beach house, and Abbie literally gasped when she saw its perfect setting for the first time. The modern house was designed to complement the landscape rather than compete with it, and opened onto a huge wooden deck with an outdoor spa pool overlooking the blue Pacific Ocean. To one side was a gully with lush native flax and palms; on the other, steep hillside. Just below, down a short path, was a small beach with gleaming white sand fringed by pohutukawa trees, offering natural shade. The whole property was completely secluded - the nearest neighbour was at least 5km away. Lara explained that the surrounding farmland had belonged to the family for generations but was now leased out. \n\n\"Like it?\" she enquired with a grin.\n\n\"I've never seen such a beautiful place,\" Abbie answered honestly, gazing at the spectacular view.\n\nIt was early afternoon by the time they arrived. The sky was cloudless and it was very warm. Lara grabbed Abbie's bag and wheeled it inside, to the guest bedroom.\n\n\"OK... I'll leave you to get unpacked and freshen up. Your bathroom's right next-door. Then let's have a picnic lunch on the beach... why don't you change into your swimsuit, if you want? It's so hot today, I can't wait to have a swim!\"\n\n\"Mmm, sounds great!\" Abbie replied happily. \n\nShe quickly unpacked her things and peeled off her sticky t-shirt and jeans, then jumped into the shower. With the hot jets of water caressing her skin, Abbie felt deliciously horny. She massaged the shower gel all over her body, lingering on her breasts and pussy. After drying herself she put on her new bikini and checked herself out in the mirror, suddenly feeling embarrassed by how skimpy it was. She pulled on a pair of denim shorts, pulled her hair into a ponytail and skipped out to the kitchen to rejoin her new friend.\n\nLara had changed into a sexy black one-piece swimsuit and colourful sarong. She turned, looked Abbie up and down and gave a low whistle, a big grin on her face. \n\n\"Whoa, girl, just as well it's a private beach... otherwise you might cause a riot!\" \n\nTo her annoyance, Abbie felt herself blush, but was secretly pleased by the compliment. She was very aware of her erect nipples showing through the thin fabric of her bikini. \"What about you, Lara... you look like a movie star!\" Abbie blurted out.\n\nLara turned from the bench and hugged her. \"You're so sweet!\"\n\nAbbie grinned, and hugged her back. \"Hey, that looks yummy!\" she said, eyeing the sandwiches, cheese and fruit Lara had thrown together, along with a bottle of riesling.\n\nThey put on their sunglasses and walked down the grassy path to the beach. Lara spread a huge beach blanket on the hot sand and they lay on it, chatting away easily and sharing their picnic. Before they knew it the wine bottle was empty and they both felt a little lightheaded.\n\nConversation gradually petered out. Lara stretched lazily and unwrapped her sarong. \"Let's sunbathe for a little while before we swim, shall we?\"\n\n\"Good idea,\" Abbie replied, wriggling out of her shorts and lying supine in the sun.\n\nEyes closed, she sensed her older companion's eyes on her. It felt exciting. She stretched her body like a cat, arching her back and thrusting out her breasts, hoping Lara would see them straining against her bikini top.\n\n\"Abbie, hon, we're going to fry if we don't get some sunscreen on,\" Lara said. \"Would you like me to put some on your back?\"\n\n\"OK, yeah... thanks,\" Abbie replied with a warm smile. She turned over onto her front and lifted her ponytail up. Abbie thought she detected a slight trembling in Lara's hands as she began to smooth the warm cream over her shoulders and upper arms. \n\n\"Umm, you know what,\" Lara breathed, a little huskily, \"there's really no need to wear a swimsuit on this beach \u2013 no-one else ever comes here. I hardly ever bother with mine.\" Abbie's heart began to race, but before she had time to figure out a reply she felt Lara's fingers untying her bikini top and gently pulling it from under her. As Lara's hands resumed her work \u2013 a sensuous massage, now, rather than simply application of sunscreen \u2013 Abbie moaned softly, \"Mmm, that's so nice.\" \n\nThe massaging hands slowly moved all the way down her back, and then stopped. There was an electric silence in the air as Abbie sensed that her new friend had stood up and was peeling off her swimsuit. Naked now, Lara knelt astride Abbie's thighs; next thing, Abbie felt soft hands gently tugging at the sides of her bikini briefs, untying them, pulling them off too. She felt deliciously aware of both her own nakedness and Lara's, the warm sun, the smell of the sea, the sound of the waves - a kind of primeval sensuality that she had never known before. Her pussy was very, very wet, and she couldn't stop herself squeezing her thighs together. She wondered what Lara would think if she noticed this, then realised she really didn't care.\n\nAs she straddled her, Lara now smoothed cream over the lower half of her new friend's body, caressing and kneading her perfectly rounded ass, then her shapely legs. Finally Lara leaned forward; as she did so, her hard nipples brushed Abbie's back causing a sharp intake of breath from them both. \"Turn over, honey,\" she whispered in Abbie's ear. \n\nAbbie did so, keeping her eyes tightly closed behind her sunglasses. She bit her lip, a little scared to be so openly exposed in public, but desperate for Lara to continue caressing her sun-warmed skin. She reminded herself the beach was completely secluded and soon found herself relaxing, letting her thighs roll slightly apart and delighting in the novel pleasure of warm sunshine on her naked pussy. Kneeling beside her, Lara slowly spread cream over her shoulders, arms and legs, then her belly, and down over her pubic mound... so close, but not touching her juicing pussy. Finally Lara spread her fingers and slid them one by one over Abbie's erect nipples, then gently caressed and kneaded the younger woman's impossibly perky breasts. She leaned forward again, this time openly allowing her body to press against Abbie's as she again whispered in her ear: \"My turn.\"\n\nAbbie felt almost in a trance as she opened her eyes, sat up and saw Lara lying prone on the blanket beside her. Naked, she was if anything more spectacular than Abbie had fantasised. She had no tan lines, a perfect ass and on her left shoulder blade was a beautiful 10cm black tattoo depicting a dragon. With shaking hands Abbie started to follow the caressing and massaging routine she had been shown. At first she was too shy to kneel astride Lara's body, but as she relaxed she grew bolder. She had never done anything so exquisitely charged with erotic sensuality, but it just felt so right and natural. \n\nAs she worked on Lara's lovely ass, Abbie gently pushed one knee between the other woman's legs; Lara obligingly let her thighs move apart, allowing Abbie to kneel between them. She massaged the tanned globes with her thumbs, spreading them apart as she worked, feasting her eyes on Lara's most secret flesh - the deliciously cute wrinkled brown star, the pink, wet, pouting labia. Finishing the first stage of the massage, she lay without hesitation face-down on top of Lara and slid her body over hers; then she butterfly kissed the back of her neck, gently blew in her ear and whispered with a giggle \"You know what to do...\"\n\nWhen Lara eagerly turned onto her back, Abbie gave a little cry of surprise and delight as she saw that Lara's pubic area was waxed completely hairless, but with a small dragon tattoo in the centre of her pubic mound, matching the one on her shoulder blade. \n\n\"You like it?\" Lara asked, unembarrassed by Abbie staring at her pussy.\n\nAbbie clapped her hand to her mouth. \"Oh Lara, that tattoo is so sexy!\" \n\nLara grinned, sat up, took off her sunglasses, and beckoned. \"Come here, Sweet One\". \n\nAs she kneeled hesitantly beside her, Lara gently removed Abbie's sunglasses as well, and then with hands on each side of her younger companion's pretty face she looked deeply into her eyes before slowly leaning forward to brush her lips against hers. As they shared the kiss, so soft and sensual, Abbie nearly fainted with delight. Their arms slid around each other and they kissed again, longer and deeper this time, growing increasing hungry and passionate... lips parting, tongues dancing, At last Abbie broke the kiss, panting and breathless; eyes locked on Lara's, she gently pushed her down onto her back once more and moved the other woman's legs apart so she could kneel between them. She squirted another dollop of sunscreen onto her palms and smoothed it onto Lara's belly, then up over her full, round breasts \u2013 slowly kneading and caressing, finally pinching the nipples between thumb and forefinger as she moved her head down and kissed the sexy dragon tattoo. Lara's eyes were hooded with lust as Abbie sensuously slid her outstretched body over hers and kissed her passionately again.",
        "It was very hot on the beach and both women were glistening with sweat mixed with sunscreen. Reluctantly, running her fingers through Abbie's hair, Lara said softly \"I think we're gonna melt if we don't swim now. Come on...\"\n\nThey ran naked down the beach, hand in hand, into the cool water and splashed about, diving into the breaking waves at the water's edge. Then Lara swam out a little deeper, bobbed down in the water and waited for Abbie to join her. She opened her arms and Abbie floated gracefully into her embrace. Under the water the two women's bodies intertwined, mouths locked together once more. They laughed as a wave tilted them off balance, breaking their kiss. Abbie wrapped her legs around Lara's waist for support, holding the back of her head, then realised with a shock that her breasts were bobbing right in front of Lara's face. Lara looked up, smiled and licked her lips sexily. Abbie held her breath... waited... and shivered with pleasure as Lara kissed her breasts all over, then took first one taut nipple then the other between her lips, letting her tongue slide around them, sucking, gently biting. \n\nThey emerged from the water like two goddesses, walked up the beach and flopped down again on the blanket to dry, again wallowing in the sensual pleasure of the hot sun kissing every inch of their naked bodies. They were both unbelievably horny, both dreamily imagining what might happen next. After drying off they began to get hot again. \n\n\"Let's move into the shade before we roast,\" Lara suggested.\n\nTogether they picked up the beach blanket and laid it down in the shade of trees higher up the beach. Kneeling face to face, bodies pressed together, Lara kissed her new friend softly... buried her face in her hair... nibbled her lip. Abbie responded ardently - long, wet, deep kisses that made them both gasp with pleasure. At last Lara broke their embrace and looked into Abbie's eyes for a long time. \"Are you sure you are ready for this?\" she whispered.\n\nAbbie could hardly speak.\"P-please... teach me. I want... everything.\" She couldn't bear to think Lara might stop, and tears filled her eyes. \n\n\"Oh Abbie, I sooo want you,\" Lara breathed. She smiled tenderly and licked away Abbie's tears, pushed her gently down onto her back, then slowly kissed all the way down her delicious young body, tasting the salt on her warm skin \u2013 her face, her neck, the insides of her wrists and elbows, her navel, her mound... taking time to lick and suck her rosy nipples... and then, at last, gently spreading her thighs and pushing her knees up toward her chest. \n\nAbbie's pussy opened like a pink tropical orchid, glistening wetly in the bright sunlight. Lara nearly died with desire. Slowly, very slowly, her eyes locked on Abbie's, she lowered her face reverently and kissed the waiting flower. Then her tongue began to slide wetly around and between the coral-pink folds, teasing, tasting, suckling... making Abbie sob with pleasure and arch her back. \n\nBarely a minute later Abbie's head fell back and she began to whimper. \"Oh yes... oh fuck... I'm going to cum\". Suddenly she felt her whole body drowning in pleasure as her orgasm consumed her. She cried out and bucked against Lara's mouth, juices gushing, her cunt clenching over and over again. When the quivering subsided, Lara moved up to kiss her young lover and hold her, moved by her power of her erotic responsiveness. \n\nFor a time they lay in each other's arms, not speaking. Then Abbie, still flushed, began to move her body sensuously and kissed Lara again, gently at first, then eagerly. With a smile of satisfaction Lara understood that the younger woman was ready to make love again. Moving like a sleek, lithe cat, Lara turned and kneeled in 69 position above Abbie's supine body. \n\nAbbie gazed upward, transfixed by the sight of her lover's wet and swollen pussy just inches from her face. Her nostrils flared as she inhaled the wild, heady scent of female arousal mixed with sea-salt, and her whole being ached to feast on every sensual pleasure promised by the delicious feminine flesh displayed before her. She felt, with a mixture of apprehension and delight, that another boundary in her sensual life was being pushed aside. Unbidden, almost, her hands moved up and gently spread Lara's cunt, exposing her dusky pink clit. For a moment she hesitated as Lara writhed and arched her back in anticipation... then drew her lover's open pussy down onto her waiting mouth.\n\nLara gasped and moaned softly at the first touch of Abbie's tongue. She closed her eyes and lost herself in the pleasure of participating in a new and very special experience: gifting her body to another woman, enabling her to experience lesbian lovemaking for the very first time. Abbie lapped at Lara's pussy, her tongue exploring, pushing inside, tasting... lips closing over her folds, gently sucking. Gradually her attention shifted to focus on Lara's clit, licking around and across it, alternating with slow, gentle suckling. As she sensed her lover's building erotic response, arousal suffused her own body and she began to tilt her pelvis, squeezing her thighs together. At this cue, Lara gently opened the younger girl's thighs, dipped her head between them and began to reciprocate the expert licking her own cunt was receiving. Perfectly in tune now, as if they had been lovers for years, they feasted on each other, their arousal peaking... easing back... rising again. At last, Lara's body began to shake as she felt the inevitability of her climax welling up from deep inside her. \n\nAbbie knew with certainty that her own orgasm would crest simultaneously to Lara's. She held Lara's hips tightly and clamped her mouth to her lover's centre, judging perfectly, by some deep erotic intuition, the perfect rhythm and pressure to exert on her clit. Lara's climax broke with a shuddering sob and pleasure drowned her like a tidal wave. Somehow, dimly conscious, she managed to keep licking Abbie, whose own orgasm burst a moment later... a series of clenching peaks that somehow, magically, coincided with Lara's.\n\nAfterwards, totally spent, they lay in each other's arms, both shaken and moved by the intensity of their experience.\n\n\"Thank you,\" Abbie said softly, as her eyes began to close. Then, drowsily, \"What am I going to say to David?\"\n\nLara smiled at her, stroked her cheek. \"Why don't you tell him everything? I don't think he'll mind,\" she replied. It was on the tip of her tongue to say more, but she decided it could wait. Abbie smiled, blissfully happy, and drifted off to sleep.\n\n\n\n<center>******</center>\n\nWhen they awoke from their nap it was late afternoon. The air was still warm but the sun had dipped below the ridge of hills to the west. Abbie stretched, hugged Lara and nuzzled her neck, still aglow from her afternoon of sexual awakening. Together they gathered their things and headed back up the track to the house. \n\nInside, they showered together, washing away the salt, sweat and other juices that had dried on their bodies. They soaped each other, delighting in the slippery sensuality of skin sliding on skin. Standing behind her, Lara massaged shower gel over Abbie's shoulders, down her back and over her rounded ass (now slightly pink, like a fresh peach, from sunbathing). She let her thumb slide slowly and deliberately down the central cleft, until it pressed gently against Abbie's anus. Abbie gasped and her body jolted; a moment later she relaxed and even pushed back a little.\n\nLara leaned forward and whispered conspiratorially in Abbie's ear \"I think you like that, don't you?\"\n\nAbbie turned to face her new lover. She was blushing, but her eyes were sparkling; no other answer was needed. They stepped out of the shower and dried each other off with big soft fluffy towels.\n\n\"Come with me, Sweet One,\" Lara breathed. Taking Abbie's hand, she led her into her bedroom. The room was suffused with soft light from many candles, and the bedcover was already turned back invitingly. Unbidden, eyes hooded with desire, Abbie lay down on her back and spread her legs wide apart, her feet on the edge of the bed. Smiling into Lara's eyes, she pinched her nipples into hard buds and tilted her pelvis upward, eagerly offering her body to the beautiful dark siren who had begun to unlock the depths of her sexuality - depths that she had never before imagined.\n\nLara knelt on the floor beside the bed and nuzzled the insides of Abbie's thighs, then slowly began to lick and gently suckle all around her pussy folds. At first, she teased her by avoiding direct tongue contact with her clit. Then, when Abbie began to writhe and whimper, she flicked her tongue over and around the little button which was now peeking out of its hood. \n\nGrowing bolder, Lara pushed Abbie's knees right up onto her chest, and let her tongue slide experimentally around her perineal area, between pussy and anus. Abbie gasped and shivered... Lara noted with a secret smile that her young lover did not try to lower her pelvis again. In fact, she hooked her elbows behind her knees and held herself in position, even lifting a little. Lara gazed with unbridled lust at the gaping cunt and sweet pale-brown wrinkled rosebud, and could not decide which was prettier or more inviting. \n\n'She did say she wanted everything', Lara thought. \n\nShe let her tongue snake gradually lower, eliciting soft moans from Abbie, then began to slide the tip over and around her twitching anus. Abbie sighed deeply and her moans grew louder.\n\nLara spread Abbie's ass-cheeks with her thumbs and watched as the now wet little star uncrinkled and gaped open a little. She licked it in earnest then pushed her tongue tip inside the dark chute as far as she could... withdrew... pushed in again, tongue-fucking her.\n\nAbbie cheeks burned and she felt deliciously depraved. \"Oooh, YESSS, that's so fucking nasty! Lick me there... T-take me,\" Abbie cooed. \n\nLara wet her index finger with saliva and traced the tip around Abbie's anal opening, teasing her, whilst transferring her mouth to suck on her clit. \n\n\"Please.... please,\" Abbie whimpered, her head rolling from side to side. \n\n\"Er... please what, Sweet One?\" Lara asked, faking innocence. \"Tell me.\"\n\nAbbie blushed scarlet but her incredible arousal overcame all her remaining inhibitions. \"Please put your finger there, and... f-fuck me... fuck my tight asshole and make me cum!\" she whispered, eyes glazed.\n\nLara slid her finger in and out of Abbie's anal opening, just a little way at first, then gradually deeper, gently easing past the sphincter muscle. From then on her finger seemed almost to be sucked in, as if Abbie's bottom-hole itself was eager to be penetrated more deeply. Lara was able to fuck her right to the limit of the finger's reach. Lara could sense Abbie's climax approaching \u2013 her breathing was ragged and she laid still, her body quivering on the brink. Lara sucked hard on her clit and at the same time thrust her thumb deep inside her cunt, fucking her there along with the finger invading her asshole. Abbie cried out, and her whole body convulsed in a shattering orgasm. As she came, Lara finger-fucked both holes in rhythm with each clenching wave of pleasure, until at last Abbie sighed deeply and her head rolled to one side, utterly spent. Lara withdrew her digits slowly, savouring the sight of both holes slick, gaping open and messy with cunt juice and saliva. She climbed onto the bed and fell into Abbie's open arms. As they embraced Abbie sobbed with gratitude and relief. She felt wickedly feral, as if her sexual being had abandoned all limits. \n\nLara smiled at her lovingly and shook her head in mock admonishment. \"I'd never have guessed what a wicked little vixen you are!\"\n\nAbbie clapped a hand over her mouth, blushed and giggled. \"I never realised either!\"\n\nThey lay together quietly, luxuriating in each other's bodies... caressing, stroking, kissing. After a few minutes Lara reached into a bedside drawer and handed Abbie a bottle of lube and a selection of vibrators. Positioning herself on elbows and knees, ass high in the air, she turned her head to lock eyes with her lover and breathed huskily \"Do whatever you want to me, Sweet One.\" \n\nSlowly and gracefully, as Abbie watched, transfixed, Lara placed her forehead on the sheets and reached around with both hands to spread her ass-cheeks wide apart. Her pussy gaped open, glistening wetly in the candlelight and then, as her muscles relaxed, her wrinkled anus began to pout open as well. Abbie, stunned by this erotic display, licked her lips then buried her face in Lara's pussy. She closed her eyes and tasted her deeply, inhaling her musky sexual scent. Her pulse raced with the excitement of crossing another sexual boundary as she allowed her tongue tip to trace slowly up to Lara's anal opening, flick across it, tentatively push inside. Lara sighed with pleasure, pushed back and felt her anus dilate a little further. Abbie squeezed some lube into the waiting hole, and then spread some more onto her fingers. She pushed two fingers, then three, into Lara's cunt, rubbing her lover's clit at the same time with her thumb. Lara whimpered and began to rock backwards and forwards. Taking the hint, Abbie fucked her \u2013 gently at first, then more roughly. \n\nAbbie's eyes glinted wickedly. With her other hand she reached for a medium sized ribbed vibrator, coated it with lube and switched it on, then pressed it against Lara's twitching anus whilst she continued to finger-fuck her cunt. \n\n\"Oh God, yes...FUCK me!\" Lara cried, her climax beginning to swell up deep inside her. Abbie pushed the buzzing vibrator past Lara's anal sphincter... drew it out completely... pushed in deeper... pulled out... thrust in again. At last, fucking her hard now in both holes, Abbie heard her lover's orgasm crest in a scream of pleasure, her whole body shaking as Abbie fought to keep both her holes pumped full as she climaxed. Exhausted now, Lara collapsed face down on the bed, her ass and pussy still open and slick. Abbie lapped up the leaking juices like a greedy kitten, then lay beside her lover and snuggled her. They basked in the afterglow of their passion for a long time, both completely sated.\n\n\n\n<center>******</center>\n\nThe phone rang, startling both women out of their reverie. \"Umm... hello,\" Lara said, picking up.\n\n\"Hi big sister!\" came the reply. \"How are you? Is Abbie there?\"\n\nLara covered the receiver with her hand. \"It's David!\" she whispered to Abbie. \n\n\"I'm good, and we're getting on just fine,\" she replied, winking at her naked lover lying beside her. \n\nAbbie giggled, her face blushing red. She desperately wanted to see her boyfriend again, to have him hold her close while she told him everything that had transpired since they parted... and to show him what she had learned. But what if he wasn't cool with it? What if he felt hurt or jealous? Abbie's throat tightened with anxiety. Gradually, as she listened to Lara chatting away happily to her brother, she relaxed. David wasn't the jealous type, she reminded herself, and neither was she.\n\nShe mimed her eagerness to take the phone, finally tickling Lara mercilessly to make her hand it over.\n\n\"Hi David!\" she said, breathlessly. \"I can't wait to see you.\"\n\n\"Me too. So... is Lara being nice to you?\"\n\n\"Uh huh. We've \u2013 um \u2013 we've had a great time together,\" Abbie replied, a little flustered.\n\nDavid laughed. \"I bet! You can tell me all about it tomorrow.\"\n\nAs he proceeded to update her about his activities since they had last spoken Abbie felt Lara's naked body pressing against hers from behind. Lara slid her warm hands around to cup Abbie's breasts and fondle them, teasing the nipples to hardness. At the same time she leaned forward to breathe in Abbie's free ear and nibble her earlobe. Abbie's heart pounded and she could barely respond articulately to what David what saying.\n\n\"... so Mum and Dad won't be coming down tomorrow after all. They have to stay on for another couple of days - just some family business stuff. But they don't mind if I take the car and drive down tomorrow by myself. I should be there around midday. So we can cut loose without worrying about them being around. Can't wait!\"\n\n\"Oh... er...OK.\" Abbie paused. \"David?\"\n\n\"Yeah?\"\n\n\"I want you so bad,\" she whispered.\n\n\"Oh fuck, I want you too... you're making me hard now.\"\n\nAbbie giggled. \"Don't you dare touch yourself. Save it for me!\"\n\n\"OK, I will,\" David groaned, \"...if you pay me back,\" he added with a chuckle. \n\nHis next words made Abbie gasp and her heart skipped a beat. \"Hey... guess what? I met one of your tutors \u2013 Tony Hughes \u2013 the other day. Seems a pretty cool dude, and he obviously likes you.\"\n\nLara removed her teasing hands from Abbie's breasts, looking concerned. \"What's up?\" she mouthed.\n\nAbbie covered the phone with her hand. \"Tell you later,\" she whispered.\n\nTrying hard to re-focus, she answered her boyfriend. \"Um... oh really? Yeah, he is pretty cool. How come you got to meet him?\"\n\n\"He was at the same forestry management seminar that Mum and Dad dragged me off to. Turns out that his family trust owns a plantation in Hawkes Bay. He's coming down to check it out the day after tomorrow, so I invited him to call in at our bach for a drink afterwards, sometime that evening. He was really keen.\"\n\nAbbie clapped her hand to the phone again and looked at Lara in horror. \"Oh shit... oh FUCK!\" she exclaimed under her breath. She had a heap of explaining to do.\n\n\"That's... great,\" Abbie spoke into the phone. \n\nDavid was in a hurry. \"Gotta go, Abbie. We're going out to dinner at my auntie's... funfunfun \u2013 not!\"\n\nAbbie laughed. \"OK then. Don't let your auntie see that hard-on! Be good... can't wait to see you tomorrow.\"\n\n\"Have fun with Lara. See you soon, baby\" David said, and hung up.\n\nLara raised an eyebrow. \"Well...?\"\n\nAbbie bit her lip, took a deep breath and proceeded to tell all about her encounter with Tony. By the end, Lara was grinning. \"He sounds pretty darn cute!\" she commented. \n\nLara put both hands on Abbie's shoulders and looked into her anxious eyes. \"Sweet One, please don't worry about David. Just tell him everything. I promise he'll be cool with it because I know he's just like you: he's a sensual being who understands that sex doesn't have to be complicated or possessive, it can be just for pleasure.\"\n\nAbbie looked doubtful. Seeing this, Lara took a deep breath and carried on.\n\n\"I know he feels that way for sure because...\" She hesitated. \"...Because I taught him,\" she confided in a soft voice.\n\nAbbie gasped. \"Y-you mean...?\"\n\n\"Uh huh... we've been lovers for a few years now - I was his first.\" Lara said, a little wistfully. Abbie's jaw dropped and she clapped her hand to her mouth.\n\n\"Don't look so shocked, Sweet One,\" Lara went on. \"We're not biologically related, remember, and we didn't grow up together. We love each other, and we have a really deep bond, but we've never been in love.\"\n\nAs Abbie's shock gradually melted away she found herself strangely excited by what she had just heard... and about the possibilities it opened up for new encounters among the three of them. She smiled and hugged Lara.\n\nLara held her in a tight embrace. \"I like to think I've helped David open his heart and mind to all kinds of erotic pleasure. Abbie darling, I'm so pleased he's found you \u2013 you two are sensual soul mates,\" she said tenderly.\n\nThe two women lay back on the bed facing each other, and talked and talked. The new openness between them allowed a wonderful sense of mutual connection and trust to blossom. \n\n\"Lara, can I ask you something?\" Abbie said, after a while.\n\n\"Sure.\"\n\nAbbie's mouth felt dry. She swallowed. \"Um... what's it like, being fucked in the... in the ass?\"\n\nLara smiled. \"You haven't done it yet with David, have you?\"",
        "\"Or with anyone else!\" Abbie replied hotly. \"I... I sooo want David to take me that way,\" she blurted out, blushing. \"But... will he like it? Will it hurt?\"\n\n\"Oh sweetie, all men love anal... it's instinctive!\" Lara laughed. \"And no... he won't hurt you \u2013 he's been well trained.\" Lara winked, and patted Abbie's bottom. \"It can be a little sore at first but, judging by the way you like your ass played with, I promise you'll love it!\"\n\nAbbie giggled. \"So... do you like anal?\" she asked.\n\n\"Mmm... oh yes,\" Lara replied. \"The three important things to remember are: first, you have to use heaps of lube; second, go slowly; and third, you have to be really clean. Do you know how to do an enema?\" \n\n\"Uh-huh... yup,\" Abbie answered, in a small voice, a little embarrassed.\n\nThey chatted on into the night, watched a little TV, and painted each other's nails. At last, talked out, they turned off the light and fell asleep in each other's arms.\n\n\"Guess I'd better enjoy having you in my bed tonight - don't suppose you'll be with me tomorrow!\" Lara mumbled as she drifted off to sleep.\n\n\n\n\n\n\n\n3\n\n\n\n\"Wake up, Sweet One... it's 'D' Day \u2013 'David Day', that is!\" Lara grinned down at her friend as she reached under the bedcovers and tickled her feet. \"When you're done in the shower, breakfast'll be ready out on the deck. It's another perfect sunny day.\"\n\nAbbie's heart sang with excitement. She sprang out of bed, skipped into the bathroom \u2013 and smiled as she saw the enema bag and tubing thoughtfully laid out for her. Half an hour later Abbie emerged onto the sunny deck in a towelling robe, squeaky clean both inside and out. \n\nLara had laid out a sumptuous breakfast on the outdoor table \u2013 champagne, orange juice, waffles with maple syrup, fresh fruit, yogurt, coffee. \"Go for it,\" Lara invited. Abbie realised she was really hungry. She piled her plate with food and tucked in. \n\nTen minutes later, Abbie sat back in her chair. \"God that was good... almost as delicious as you,\" she sighed. She took a big gulp of orange juice, accidentally spilling some down her front.\n\nLara grinned. \"Here, let me help you with that,\" she said, crouching beside Abbie. She dipped her head and licked the spilt juice where it had trickled down the centre of Abbie's chest, then kissed her on the mouth. \"I think this got wet,\" she continued, her eyes locked on Abbie's while she slid the robe off her friend's shoulders. Abbie dipped a forefinger into her glass of juice, traced a circle around each of her nipples and arched her back so her succulent breasts jutted forwards in offering to Lara's hungry mouth. Lara bent her head again and sucked Abbie's nipples to hard points. Dizzy with desire, Abbie rose, shrugged off the robe completely and stood naked in the morning sunshine.\n\nLara spread a towel out on the table, took Abbie's hand and helped her to lie down on it. \"On your back, Sweet One,\" she breathed. Her eyes sparkled wickedly. \"It's my turn for breakfast...\" \n\n\"Mmm...\" Abbie sighed, as she felt a slice of warm melon sliding across her belly, then up to her chest, around and across her breasts, then back down to her pubic mound and between her legs. She shivered, and let her thighs fall open. Next, the shock of cool yogurt on her sun-warmed skin made her gasp. As Lara smeared it all over her torso, Abbie felt her nipples tighten in response. A warm, wet, melty feeling of arousal began to spread through her pelvis. Lara's fingers slid across the folds of her friend's pussy and Abbie arched her body upwards, eagerly meeting the caress. Lara poured a little liquid honey around each stiff nipple, and then bent her head to feast on Abbie's body. Slowly, teasingly, she licked up all the yogurt... suckling on the sweetened nipples, swirling her tongue around Abbie's navel, and finally lapping at her centre. Abbie sighed with pleasure and spread her thighs wide apart. \n\nLara took a swig of champagne from the bottle and kissed Abbie's luscious full lips, probing with her tongue and sharing the wine. Then she lifted the bottle and slowly, carefully poured champagne over her lover's supine body, rinsing her. The tingling of the bubbles was delicious on Abbie's nipples, but when Lara gently parted her friend's labia and poured a slow, gentle stream of champagne over her clit the feeling was almost unbearably exquisite. Abbie shuddered, nearing orgasm.\n\n\"And now for dessert,\" Lara breathed. She pushed another folded towel under Abbie's hips, then coated her middle finger with maple syrup... held it up, locked her eyes on Abbie's... waited. Abbie hands flew between her legs and pulled open her cunt lips, offering her wet dusky centre. Lara shook her head. \"You should never put sweet things inside your pussy, darling... it just encourages thrush,\" she said. Abbie looked puzzled. And then, as her lover's intention finally dawned on her, she felt a jolt of shocked erotic desire, followed by the now-familiar sense of complete abandonment of inhibitions. She shivered, scarcely able to breathe. Slowly, without a word, her hands slid from between her legs and instead pulled her knees up to her chest so her pelvis tilted upward... this time wantonly offering her asshole to her lover's ministrations.\n\n\"Good girl,\" Lara murmured. Abbie's cunt and anus sparkled wetly with champagne and Lara couldn't resist sliding her tongue around every crevice, tasting the heady mixture of the wine and Abbie's arousal, before pressing her syrup-coated finger to the cutely crinkled star that twitched in anticipation right in front of her face. \n\n\"O-ooh...yes,\" Abbie whispered. Eyes closed, she slowed her breathing... relaxing, letting her anus open up to the probing finger now sliding deeply into her tight chute. She felt the finger withdraw, but this time she remained dilated. Her entire being ached to be penetrated again as she watched Lara thickly coat two fingers with maple syrup. She whimpered softly as the fingers pressed gently at her opening. Abbie felt her sphincter expand with a hot sting, which quickly faded and was replaced by a dark erotic pleasure, which enveloped her consciousness as her ass was deeply filled. \n\n\"Fuck me!\" Abbie panted. Lara began to gently slide her fingers in and out, at the same time rubbing her lover's clit. Abbie's mouth fell open in a silent scream. She hovered on the brink, thrusting her pelvis high, muscles quivering, and then sobbed out loud as a powerful climax flooded through her. Her sphincter clenched over and over as she came, contracting tightly on the invading fingers, and then fading to little pulses of pleasure which rippled through her body. She sighed with disappointment as her lover's fingers slipped from her body at last, the wonderful fullness in her ass receding. \n\n\"Keep holding your knees up, Sweet One,\" Lara whispered softly. She watched, eyes hooded with desire, as her lover's stretched anus twitched closed, loosing a little gush of syrup. Eagerly, Lara leaned forward and lapped up her dessert. Abbie gasped, feeling wickedly, deliciously depraved... and to her amazement and delight a second peak of orgasm washed over her.\n\n\n\n\n\n<center>******</center>\n\n\n\n\n\nAs she showered for the second time that morning, lathering soapsuds all over her soft, flawless skin, Abbie thought about her latest encounter. She had begged to reciprocate Lara's breakfast lovemaking but her friend had just smiled and gently spanked her bottom, saying \"Later, Sweet One. If you don't get straight back in that shower you'll soon be feeling horribly sticky... and besides, David will be here any minute.\" \n\nAbbie realised she was rapidly becoming addicted to the power and passion of great sex. She knew she was being swept up in something that was changing her whole perspective on life... and she loved it! She felt incredibly, deliciously alive. What's more, she felt insatiable \u2013 despite her two orgasms just beforehand Abbie found herself already fantasizing about making love to David. A broad grin flashed across her face as her hands slid lasciviously between her legs.\n\nEyes closed, she played with her pussy and clit, letting her imagination run riot. She paused to reach around behind and soap her bottom with a liberal amount of shower gel. Continuing to masturbate languidly with her right hand, Abbie pressed the soapy middle and index gingers of her left hand to her anus. She felt her ring relax... softly, easily... letting both fingers slide smoothly inside her eager ass. Smiling to herself, she remembered how it was only two days beforehand that she had first dared to penetrate herself there. 'I've come a long way in 48 hours!' she thought.\n\nIn her mind's eye Abbie imagined David's beautiful cock penetrating her backdoor for the first time. Her fingers moved, fucking herself gently... pulling out, plunging inside again. With shaking hands she poured more gel onto her fingers, and then squatted on the floor of the shower. This time she let three fingers press to her anal opening and felt the familiar delicious sting as she stretched herself wider. Pleasure washed through her as her sphincter yielded once more and, breathing raggedly, she began to fuck herself... just a little way at first, then as deeply as she could. She imagined David's purple cock-head invading her rectum, and as the erotic vision filled her mind she allowed her pinkie to join the other three fingers.\n\nSummoning all her willpower Abbie opened her eyes and let her reverie subside. She withdrew her fingers, leaving a nice prickly glow in her ass. She smiled to herself; she was ready.\n\nAfter finishing her shower and drying herself, Abbie rummaged through her suitcase, trying to decide what to wear. Having so far been naked for most of her holiday it felt strange to be getting dressed. Eventually she slid on her new white shorts \u2013 no panties \u2013 and a pair of white sandals. Selecting a top was more difficult. She had a number of cute options but none seemed to have quite the wow factor she wanted for impressing her boyfriend. Just as she was about put on a plain cotton tank top, Lara appeared in the doorway holding a skimpy pink blouse with pearl buttons and little capped sleeves. It was expensively cut and made of some gossamer-light sheer material.\n\n\"Would you like to wear this? It's new,\" Lara said.\n\n\"Oh Lara, it's perfect. Thank you so much!\" Abbie beamed happily and hugged her girlfriend. Lara grinned back and helped Abbie put the top on, leaving buttons undone at the top and the bottom.\n\nAbbie checked herself out in the mirror, turning left and right. She noticed how the shape and movement of her breasts and the rosy peaks of her nipples could be made out beneath the see-through material. There were a few inches of bare flesh between her shorts and her top, and her diamante navel stud flashed seductively.\n\n\"You look unbelievably hot, Abbie\" Lara said softly. Abbie had to agree. It wasn't just her outfit, or her pert body... she had a glow, a sexual aura like a cat on heat.\n\nAbbie just had time to put on some earrings, a gold chain necklace, a plain gold bangle and a little makeup before hearing a car door slam outside. Her heart leapt into her mouth and she ran outside to see her boyfriend standing there with a big grin on his face, holding his bag. David looked great; he was fit and tanned, his tousled blond hair shone in the sun and his muscles rippled beneath his white t-shirt and skinny jeans. He dropped his bag and caught Abbie as she flew into his arms, lifting her up and holding her in a tight hug as she wrapped her legs around his waist.\n\n\"You look incredible, Abbie,\" he whispered into her ear. \n\nShe buried her face in his neck, momentarily choked up, tears spilling down her cheeks. Then she lifted her head and smiled at him. \n\n\"I so want you,\" she said, and kissed him passionately, hungrily. David's cock was instantly erect, straining against his jeans. He put Abbie down and she grabbed his hand, eyes sparkling, and pulled him by the hand towards the house. \n\nWatching from the front door, Lara grinned at them both. \"Hi bro,\" she said, \"guess I'll see you guys later...\" David hugged her on the way past and grinned back.\n\nDavid's eyes were glued to Abbie's pert bottom as she led the way to the bedroom. The tiny white shorts fit snugly and rode up just above the creases between her thighs and her ass. He was stunned at the change in her. From the lovely but slightly na\u00efve, inhibited girl of a few weeks ago she was now transformed into the hottest babe he had ever set eyes on.\n\nHe closed the bedroom door and took her in his arms again. Abbie smiled uncertainly, bit her lip, and took a deep breath. \"David... I need to tell you some stuff,\" she began.\n\nHer heart in her mouth, Abbie haltingly confessed the details of her encounter with Tony. To her huge relief David's reaction was one of surprise, quickly followed by amused delight. \"No wonder he was so keen to come out here to pay a visit!\" he said, grinning.\n\nThen, more seriously, he added \"Abbie, I really hate jealousy or possessiveness... and I hope you're the same.\" \n\nAbbie nodded happily. \"Ok... but there's more to tell\", she said softly, unable to stop herself blushing. \"Lara and I have gotten close... real close. She's taught me things...\" \n\n\"Have you two got it on already?\" David interrupted, laughing. \"She is such a minx!\"\n\nAbbie giggled. \"Your sister is unbelievably sexy. We've been making love almost continuously since I arrived! \" David's jaw dropped with astonishment.\n\n\"And David,\" she added, \"I know about you and her as well. I'm cool with it. In fact\", she whispered into his ear, \"I'd love to watch you fuck her!\"\n\nAbbie dropped to her knees and undid David's shorts. She looked up at him. \"But right now, I want you to myself!\"\n\nShe tugged his jeans down and released his thick cock, which was already oozing pre-cum. David pulled off his t-shirt and stood before naked before her, his hands entwined in her hair. Abbie needed no encouragement. She took his cock reverently between her lips and slid it into her mouth, maintaining suction to maximise his pleasure. Her tongue slid around his cockhead, teasing him as she looked up into his eyes. \n\nHer hands wrapped themselves around his lean, muscular ass... took a deep breath... opened her throat... and slowly swallowed his full eight inches. As she pulled his ass toward her, she suckled rhythmically for a few seconds then released him again. David felt weak at the knees, and was breathing raggedly. \"Oh fuck, Abbie... I didn't know you could do that!\" he gasped. \n\nShe smiled sexily in reply, and again took him deeply into her throat, holding him there longer this time, sucking rhythmically and at last releasing his cock inch by inch, until the purple head slipped from her lips with a wet pop. Abbie reached for the lube on her dressing table and spread it over his balls, fondling and playing with them gently as his cock stood erect, twitching. She pushed him back onto the bed, so his legs were bent over the edge, and knelt between his knees. Once more she swallowed his cock to the hilt, until his pubic hair tickled her lips, but this time her lubed middle finger slid backwards beneath his balls to press against his wrinkled anus. David gasped, and then groaned with pleasure as he felt her finger penetrate him at the same time as her mouth and throat milked his cock. She came up for air, simultaneously pulling back her finger, then began continuously sucking, her lips forming a tight seal as they moved slowly up and down around David's engorged member. Again and again Abbie sucked his cock all the way into her mouth then withdrew until her lips sealed around the head alone; with the same rhythm, she finger-fucked his ass . . . slowly, deeply.\n\nDavid's eyes rolled back. He felt orgasm well up from deep within his consciousness. He tried to delay his climax, but soon surrendered helplessly to the exquisite pleasure centred on his groin. Crying out as if in pain, he came in huge spurts, once, twice, three times... followed by a series of smaller quivers of pleasure. At the moment of climax Abbie swallowed him deeply and held him there, milking him with suction in parallel with each crest of orgasm; at the same time her finger thrust to the hilt into his rectum. He came back to earth, opened his eyes and watched as Abbie slowly released his cock from her mouth, slid her finger from his ass and gave him a saucy grin. She stood and slipped quickly into the adjoining en-suite bathroom to wash. \n\nDavid was speechless, in complete shock for a long moment. He shook his head to clear it, and then opened his arms to hold Abbie as she returned to the bedroom. She kicked off her sandals and climbed eagerly onto his lap. David's slowly softening cock pressed against her shorts. \"Damn, this seat is lumpy,\" she giggled. With her arms wrapped around his neck she kissed him, a long and sensual kiss, sharing traces of his salty semen. \n\nAbbie ducked out to the kitchen, returning with two cans of beer. They chatted for a while, catching up, sharing sexy secrets. Abbie tingled all over with arousal as her boyfriend's hands slowly stroked and caressed her body.\n\nAt last Abbie couldn't stand the sexual tension any longer. She put a finger to David's lips to signal \"hush\" and stood before him, smiling and slowly unbuttoning her top. David's eyes were riveted to the sight of the filmy blouse slipping from her shoulders. Abbie cupped her round, firm breasts with her hands. She pinched her nipples and pulled gently on them, looking up coquettishly as she did so. Her hands moved down her front and undid her skimpy shorts. Then she turned away from him and bent slightly at the waist. With her thumbs hooked into the band of her shorts, she slid them ever so slowly over the globes of her perfect ass until they dropped to the floor. She stepped out of them, now fully naked. Abbie turned her head and smiled to see the hungry look in David's eyes reflected in his huge erection. \n\n\"I'm yours. Do anything you want with me!\" she said, huskily.\n\nShe climbed onto the bed, still facing away from him, and positioned herself on all fours, her knees spaced well apart. David gazed at her hairless pussy, the labia swollen and wetly pouting open with obvious arousal. He stroked himself and licked his lips. Male sexual desire suffused his whole body; his heart beat quickly, his muscles tensed. He ached to pounce, to ravage her.  \n\nHe watched as Abbie lowered her forehead to the bed and arched her back so her luscious heart shaped bottom rode high in the air. Slowly, gracefully, she reached back with both hands and pulled her ass-cheeks apart \u2013 the same erotic tease that Lara had shown her the previous day. David saw his previously shy girlfriend deliberately expose her crinkled rosebud to his gaze. Anal play had never previously been part of their repertoire; he had never pushed her boundaries in that way, thinking her too shy and inexperienced. But it was clear, now, that Lara's influence had utterly changed her. He wondered just how far her limits had been expanded.\n\nEntranced, transfixed, David watched Abbie gently stretch her anal aperture, initially with the help of a moistened index finger. As she concentrated on relaxing, the wrinkles slowly dissolved, leaving a small round opening. She began to rhythmically twitch her cute little backdoor, so the hole opened and closed enticingly. As Abbie had hoped he would, David rose and moved forward to kneel on the floor behind her, his face inches from her brazenly exposed cunt and asshole. He could smell her heat, her feral arousal. He gently moved her hands away and replaced them with his. Spreading her once more, using both thumbs, he bent forward and lightly traced his tongue in a tiny circle around her anus. She shivered, softly moaned \"Yesss...\" and pushed back slightly at him to signal her eagerness. At the same time one hand flew to her pussy, drawing forth lubricating juices with which she began to stroke her clit.",
        "David grinned. \"Not so fast, babe,\" he breathed, interrupting her self-stimulation by taking her wrist and drawing her arm out to lie flat across the bed. He pulled a strip of black silk from a drawer and tied it around her wrist. The other end he tied to the bed head, keeping her arm fully extended. \n\n\"And now... the other arm, please,\" David said with quiet authority. Abbie obediently extended her other arm, keeping her head flat on the bed. As her other wrist was tied she was flooded with a wonderful mixture of apprehension and arousal. A trickle of pussy juice ran slowly down her thigh, tickling her. She was helpless now.\n\nReturning to his position at her rear David teased her, kissing and licking her buttocks, her perineum, and her pussy lips. At last, when Abbie began to writhe and pant with impatience, he concentrated again on her asshole. This time he abandoned all restraint. He pressed his mouth to her flesh and slid his tongue wetly around and inside her anal opening. Slick with his saliva now, her ring muscle yielded as he probed with his tongue, testing her readiness. \n\nDavid reached for the bottle of lube conveniently left for him on the bedcover. He coated two fingers with lube then squirted more into her little round hole. The coolness momentarily shocked her but she remained relaxed, resisting the reflex to close up. She felt one of David's fingers press at her opening and ease inside, gently, easily. He rested a moment, and then began to move inside her... pushing slowly all the way in, sliding right out again. With his fingertip he rimmed her anus, exciting her nerve endings, helping her to relax still more, and then entered her again. \n\nWhen he judged her ready, David pressed two freshly lubed fingers to Abbie's dilated anus, now glistening dark pink. She inhaled sharply. He waited while she regained her focus... concentrating, relaxing. As soon as she sensed her readiness she pushed back tentatively at his fingers. As she did so, David gently increased the pressure on her anus, stretching it, and both fingers slowly eased about an inch inside and rested there. Abbie felt the now-familiar warm stinging in her ass, quite bearable, not unpleasant. She let herself experience it; she was calm and unafraid, completely trusting in her lover's gentleness and experience. \n\nAs the stinging faded Abbie was enveloped from head to toe in a strong, primal heat. Fantasies of being fucked hard in her virgin ass flooded her mind. She ached to be taken deeply, fiercely, without mercy. \n\nDavid started to move his fingers inside her. With each stroke he pushed a little deeper into her yielding ass, until his two fingers reached in to the hilt... withdrew all the way out... slid deeply into her again. Abbie sighed with pleasure and anticipation.\n\n\"Put your cock in my ass,\" she moaned.\n\nWith his spare hand David coated his aching cock with lube. He removed his fingers from Abbie's dilated asshole and positioned himself behind her, standing beside the bed. A moment later Abbie felt the head of his cock gently press against her anal opening. Cautiously she pushed back and felt her ass stretch, nerve endings aflame... yielding, letting go. Time stood still. Abbie held her breath. A moment later she felt his cock slowly slide into her ass. As if from far off she heard herself give a sob of relief and pleasure. \n\nDavid had never experienced a more erotic sight. His girlfriend was wantonly displayed and tied before him, and his cock was lodged in her virgin ass. Her initial resistance had quickly given way; now, it felt like his cock was being sucked into her. Her tightness gave him exquisite pleasure; he closed his eyes and savoured it.\n\n\"Fuck me!\" Abbie gasped, urgently. David opened his eyes and grinned. Holding her hips with both hands he eased his cock deeper into her rectum. Abbie thrust back, unable to wait, and all eight inches buried itself in her ass. She felt completely, deliciously filled up... on fire but without any pain. As David began to fuck her \u2013 slowly at first \u2013 she felt momentarily lightheaded; then she began to pant, thrashing her head from side to side, carried away on a tidal wave of wild sensuality. \n\nShe felt his fingers tighten on her hips and his fucking grow faster and rougher. Her body was being jolted violently and his balls slapped against her cunt with every thrust. Their bodies were shiny with sweat, their moans and cries almost animalistic, as David built towards climax. At last, with a great sob, David's orgasm exploded. She could feel each of his spasms and imagined his seed jetting deep inside her ass.\n\nHe wrapped his arms around her from behind. \"Oh Abbs...\" he whispered. Gently, slowly, he withdrew his cock. Abbie felt a strange, awful sense of loss and tears pricked her eyes. Quickly he untied her wrists, turned her over on her back and kissed her tenderly. Abbie pulled him close and kissed him back with unrestrained passion. \n\nShe could feel he was still fairly hard. \"Take me again,\" she whispered in his ear, releasing him from her arms.\n\nShe pulled her knees up to her chest and David pushed a pillow under her hips. Her anus was still pouting open, glistening with lube; he watched a trickle of cum dribble slowly out. He kneeled between her legs and gently pressed his cock-head against her little dark hole. She received him with the same slight resistance before her ring muscle yielded, and his cock sank deeply inside her once more. She put her legs over his shoulders. Eyes locked together, burning bright, David began to ream her ass again... this time slowly, sensually. One of Abbie's hands slid down to her wet cunt, drawing out juices to rub and stroke her clit. \n\nAs they fucked, gently but deeply, both of them felt a profound, almost spiritual sense of intimacy and connection. They watched each other's faces and breathed together, perfectly in tune. Abbie stroked herself towards orgasm, varying the pace of her stimulation, letting her pleasure build in ever-increasing surges. At last, she knew her climax was inevitable. \"I-I'm cumming!\" she gasped, and tipped her head back, closed her eyes and howled out loud as the most powerful orgasm of her life consumed her. Her body shook; she flushed all over; sweat matted her hair to her forehead. David's cock was locked in Abbie's tight, clenching ass. The erotic power of the moment was so intense that, miraculously, his cock jerked deep inside her and he came yet again, gently, in a series of soft ripples.\n\nWhen it was over they lay quietly, still locked together, side by side. Each felt a great tenderness for the other. Awestruck, silent tears rolled down their cheeks.\n\n\"I think I love you,\" David whispered, his voice catching.\n\nAbbie smiled. \"I think I love you too.\" Limbs interlaced, they held each other, feeling exhausted but exhilarated.\n\nThe sound of applause brought them out of their reverie. Lara was leaning against the open doorway, grinning impishly, with a video camera tucked under her arm.\n\n\"I got it all... if you didn't melt the camera, that is. Damn, that was hot.\" \n\n\"What the fuck...!\" David began, before his surprise melted into amusement. Abbie blushed, giggled and put her hand over her mouth.\n\n\"Come on lovebirds, let's go to the beach,\" Lara said. She was wearing a tiny string bikini and had a towel draped over her shoulder.\n\n\n\n\n\n<center>******</center>\n\n\n\nA few minutes later they were made their way down to the beach, cold beers in hand. David, wearing just a sarong around his waist, carried an eskie with a picnic lunch and more cans of beer. He watched his girlfriend and his stepsister sashay down the sandy path, hand in hand, their buttocks barely covered by their skimpy swimsuits. \n\nAs soon as they reached the beach and laid down their towels on the warm sand, they all immediately discarded their clothing and ran naked into the surf. They frolicked and dived like porpoises, cooling off. \n\nSoon Lara glided into David's arms and locked her legs around his waist. \"It's good to see you again, bro,\" she said. Abbie came up and embraced them both from the side. Gently, she pushed her two lovers' heads together and smiled as they kissed, tenderly at first, then with increasing ardour.\n\n\"I'm so fucking horny,\" Lara gasped. \"I want you both...\" She reached for Abbie and kissed her passionately as well. \n\n\n\n<center>******</center>\n\n\n\nThey dried off in the sun, still naked, lying on their towels while they ate their lunch \u2013 cold beer and delicious freshly made sandwiches. Afterwards, David had a nap while the two women talked and laughed together. One thing led to another and they were soon lying in each other's arms, kissing, caressing and fondling. With the sun beating down on their bare skin, Abbie knelt between Lara's widely spread thighs and licked her languorously to a delicious climax. \n\nLara sighed contentedly, in post-orgasmic bliss. Abbie moved up to lie prone on top of her, kissed her tenderly and stroked her hair. They smiled lovingly into each other's eyes. Just then Abbie became aware of the fullness in her bladder. \"I so need to pee!\" she exclaimed, getting up and reaching for her bikini.\n\nLara caught her hand. \"No need to go back to the house, honey,\" she said with a soft smile. \n\n\"But ...\" Abbie began, disconcerted. Lara gently kept hold of her hand.\n\n\"You can pee right here on the sand, I don't mind ... In fact,\" she whispered with a devilish grin, \"I'd like to watch!\" \n\nDavid opened his eyes and grinned. \"Me too!\" he said.\n\nAbbie felt quite dizzy but turned on at the same time. Biting her lip, she slowly sank to her knees. She closed her eyes and reached between her legs to spread her pussy lips, knowing Lara's and David's eyes were upon her. She concentrated on relaxing... held her breath... until at last she felt her bladder relax and her stream of urine begin to flow out and spray onto the sand. Abbie let her breath go in a sigh of relief, feeling a rush of natural, sensual freedom that was strangely arousing. \n\nJust then she became aware of Lara, also on her knees, moving in close to face her. Abbie's warm piss rained down on Lara's thighs; Abbie was shocked. Immediately one of Lara's arms circled her waist, preventing her pulling back. As Lara leaned forwards, her other hand moved to Abbie's pussy, fingers playing in the stream of urine and stroking her wet clit. They kissed deeply, urgently, both very turned on. \n\nAbbie felt strangely disappointed as her flow of pee petered out and stopped. Then, with a gasp of delight, she felt Lara begin her own stream of urine as they continued to embrace and kiss, kneeling face to face on the sand. As Lara peed over Abbie's legs, Abbie reached out gingerly and let her hand play in the hot spray, fondling the other woman's pussy and massaging the warm, golden fluid all over her belly.\n\nLara groaned. As her bladder emptied, she lay down on her back... legs open, playing with herself... writhing on the sand. She opened her eyes and looked at David, who had got to his feet and was standing above her. Her eyes sparkled with desire. \n\nAbbie, watching, was aware of her heart pounding. A powerful sexual intuition told her what was going to happen... what she wanted to happen. She rose and stood behind David, reached around him and held his penis. \n\nLara's eyes were locked on David's. \"Piss on me!\" she breathed.\n\nWith a soft moan David's cock twitched and he began to pee. Abbie directed his stream onto Lara's belly, spraying her jewelled navel, down to the sexy dragon tattoo on her pubic mound and lower, to her splayed cunt. Lara continued to writhe and masturbated furiously, as the hot rain splashed her hands.\n\nHolding David's semi-erect cock like a hose, Abbie excitedly aimed his stream up Lara's body to douse her breasts and throat. Then she hesitated, caught the naked woman's gaze... and saw there a look of pleading desperation. Slowly, heart pounding, Abbie moved David's golden stream higher still and let his piss splash all over the supine Lara's face and hair. Lara gasped, shuddered, and came with a howl of pleasure, her soaked body convulsing again and again as she squeezed one hand between her legs.\n\n\"Oh, fuck, that was so amazingly dirty!' Lara exclaimed with a sheepish grin, as she returned to earth after her orgasm. Laughing, David and Abbie pulled her to her feet. Hand in hand they all ran back into the sea to rinse off.\n\n\n\n\n\n\n\n4\n\n\n\nAbbie shared her bed that night with David on one side and Lara on the other. Reaching out to kiss, hug and snuggle with each in turn, she felt a blissful sense of contentment and security. \n\nNext morning, they slept late, then got up and spent the day exploring the surrounding coastland and bush, and generally lazing about. Although they continually flirted and touched each other there was an unspoken agreement among them to delay further sexual exploration; instead, they let anticipation build up. As a result Abbie was filled with a constant ache of sexual excitement. Between chatting to the others and reading magazines she let her thoughts drifted into erotic fantasies. Walking along the beach collecting shells and interesting pieces of driftwood, or lying naked in the sun, her body tingled in anticipation.\n\nEarly evening found the three friends sitting on the deck around the wooden outdoor table, watching the beautiful red/gold sunset and enjoying a smoke of some high quality weed. Abbie felt content and mellow. She was amazed at how sexually 'out there' she had become. After the experiences of the last few days she felt radically changed and grown up, like a butterfly that has emerged from its cocoon. She was delighted, too, that her boyfriend had been so encouraging of her newfound personal growth. \n\nCar tyres crunched on the gravel driveway on the other side of the house.\n\n\"That must be Tony,\" said David. He got up to meet the new arrival, leaving the two women waiting on the deck. \n\n\"I hope you like him... I think he's pretty cute!\" Abbie said, with a cheeky smile.\n\nLara smiled back. \"I hope so too!\"\n\n\n\n<center>******</center>\n\n\n\nTony greeted Abbie warmly and unselfconsciously, with a hug and a kiss on her cheek. \"It's so good to see you again, Abbie,\" he said, with a raised eyebrow and a knowing grin. \n\nHe turned to shake Lara's hand as David introduced him to her, and the sparkle of interest in his eyes was obvious. Lara smiled demurely; she watched him furtively, biting her lip, as Tony talked to the others. Abbie winked at her. Lara took in Tony's rumpled intellectual look \u2013 swept back, longish hair; glasses; dark stubble on his face; kind, deep brown eyes. She liked what she saw.\n\n\"What a drive! I thought I'd never get here,\" Tony said. \"I'm all sticky and my muscles have tensed up.\" He shrugged his shoulders to ease the stiffness. \n\n\"Then I know just what you need, Tony... a hot spa!\" Lara said, handing him a glass of wine and a fresh spliff. She flipped off the cover of the large spa pool on the deck, pulled her cotton beach dress over her head revealing her tiny string bikini and turned to face him boldly: \"How about it?\" \n\n\"Great!\" he grinned. \"I'll just go get changed\"\n\nAs David took him inside Abbie looked at Lara with feigned shock. \"That was sooo fast, you naughty girl!\" she laughed. The two women stepped into the pool in their bikinis and were soon in a huddle, discussing Tony's attractiveness. \n\n\"Mmm, what a nice ass!\" Lara whispered.\n\n\"His cock is lovely too... as you're going to find out, for sure!\" Abbie whispered back. They giggled like schoolgirls, excited and aroused. Immersed in the hot water, Abbie pulled her friend into her arms and kissed her on the mouth. She reached around to Lara's back, loosened the tie of her bikini top and pulled it off. Moving behind her, she cupped Lara's breasts, marvelling at their fullness and firmness, and pinched the nipples to hard points. From behind, her lips grazed the side of Lara's throat.\n\n\"Imagine Tony's hands on your tits... like this,\" she breathed, nibbling her friend's ear.\n\n\"Oh God, my cunt is on fire!\" Lara gasped, her eyes closed. \n\nJust then the men returned, wearing swimming trunks, four cocktails in hand. The girls hastily took their hands off each other. Tony grinned at Lara as he handed her a drink. She wondered if he had seen Abbie caressing her or heard her last exclamation, and surprised herself by blushing. She sat up to take a sip of strawberry daiquiri, and her nipples stiffened afresh as she felt his eyes on her luscious, wet breasts.\n\nDavid and Tony climbed into the spa-pool. All four of them luxuriated in the hot water, exchanging banter while they finished their cocktails. \n\n\"Would you like a shoulder massage, Tony?\" Lara offered, setting down her glass.\n\nHe smiled. \"Sure, that would be great.\"\n\nOut of the corner of her eye Lara noticed David winking at her, while Abbie mouthed \"Nice one!\" Ignoring them, she slid behind Tony so he was sitting between her lithe thighs. She began to gently knead his neck and shoulders. Tony closed his eyes, relaxing and focusing on her skilled hands. \n\n\"That's wonderful,\" he said. Lara didn't reply; instead, she leaned forward and slowly increased the pressure of her massage, her thumbs working at untangling the knots in his muscles. As she did so, her breasts pressed provocatively into him; then she eased back and slid softly up and down his back as she worked. Tony's cock stirred as he felt her hard nipples teasing his skin.\n\n\"Time for more drinks, I reckon,\" Abbie said tactfully. \"C'mon, David.\" They climbed out of the pool and headed for the kitchen.\n\nLara slid out from behind Tony. He opened his eyes to thank her for the massage, but before he could speak she smiled and put a finger to her lips to silence him.\n\n\"Lean back and close your eyes again, Tony,\" she murmured softly. \"I'm not finished yet.\" He smiled back and did as she asked. Lara silently removed her bikini bottom, stood and straddled him from in front, then squatted in his lap. As her hands massaged his chest, she slowly let her weight settle on the huge erection inside his shorts. Just a single thin layer of fabric now separated his throbbing cock from her swollen, overheated pussy.\n\n\"I can tell how much you're enjoying this,\" she teased. Lara took Tony's hands in hers and guided them to cup her ass, inducing a sharp intake of breath from Tony as he realised she was naked. \n\n\"I'm enjoying it too,\" she sighed. She ground her splayed cunt into his lap, at the same time leaning forward and rubbing her breasts against his chest. Tony opened his eyes; Lara stopped moving as his gaze met hers. For a long moment they regarded each other, violent lust sparking wordlessly between them. Then Tony's arms enveloped her, pulling her body to his, and their mouths crushed together in a deep, passionate kiss.\n\nLara opened herself to the sensual delight of him: the touch of his strong hands and hard body, his masculine scent, his talented tongue duelling with hers; she had the sensation of falling towards him, like her soul was melting into his. At last she drew back, panting and out of breath. \"I want you,\" she whispered huskily.\n\nHer breathing slowed, leaving Lara feeling sultry and mellow. \"By the way, Abbie told me all about you... I think you've lit her fire!\" she went on. \"And David knows about you fucking her, as well.\" \n\nTony's jaw dropped. \"Don't worry, he's cool with it,\" she laughed. \"In fact, he was probably more shocked to hear what Abbie and I have been getting up to!\"\n\n\"Oh fuck,\" Tony groaned, \"I would so love to see you two sexy vixens get it on!\" \n\n\"Maybe you will,\" Lara grinned. \n\nShe paused and tilted her head coquettishly. \"By the way, Tony, Abbie and I have discovered that she has a real thing for anal sex...\" Tony was speechless, but Lara noticed that his dark eyes flashed with interest.",
        "\"David fucked her cute ass for the first time today... that was very hot to watch,\" she went on. Lara's eyes narrowed. \"Mind you,\" she added in a hoarse whisper, \"if it was me I don't think I would have been so... willing.\" \n\nTheir eyes met, and she knew he had taken the hint. Tony dipped his head and nuzzled her full breasts. He sucked hard on each nipple in turn then bit them hard, making her gasp. He lifted her off his lap. With one hand gripping Lara's wrist firmly he pulled her roughly to her feet... \n\nWhen Abbie and David returned a couple of minutes later, fresh drinks in hand, they found an empty spa-pool, a discarded bikini and a trail of wet footprints in the direction of Lara's bedroom. \n\n\n\n<center>******</center>\n\n\n\nLara allowed herself to be led by the wrist, stumbling a little as Tony marched her inside. Her heart pounded with a heady mixture of desire and fear. In the bedroom, he pushed roughly down on her shoulders, forcing her to her knees before him, then stepped out of his shorts and tossed them aside. His erection swelled, pulsing, in front of her face. He grabbed a bunch of her hair and tilted her head back; involuntarily, her eyes bulged and her lips parted.\n\n\"Suck me, bitch,\" he muttered.\n\nLara obediently wrapped one hand around the base of his member while the other fondled his balls, and then dipped her head to take his dark pink cock-head in her mouth. She swirled her tongue around it, coating it liberally with saliva. Forming a seal with her lips she moved his cock back and forth whilst sucking her cheeks in. \n\n\"Oh yesss,\" Tony groaned. Impatiently he tore her hands away from his cock and thrust it deep into her mouth, at the same time keeping a firm grip on her hair and pulling her head towards his groin. Lara's eyes watered as she fought against the urge to gag. She closed her eyes and focussed on breathing slowly and evenly through her nose. After a few moments she was able to relax and began to suck him rhythmically, from time to time allowing his pole to slide all the way down her throat. Still holding her hair tightly, Tony allowed her to move her lips up and down his straining cock, milking him slowly with her mouth. She looked up, saw the unleashed masculine lust in his eyes; her body throbbed with desire for him. Lara brought her hands around to hold Tony's ass. Gradually he took over the rhythm as she continued to deep-throat him, and she felt his ass muscles tensing and relaxing as he fucked her mouth. He threw his head back, lips parted, eyes closed, exquisite pleasure radiating from his cock and making his peripheries tingle.\n\nAs the first stirrings of orgasm bubbled up into consciousness, Tony came back to earth. He pulled her head back and his cock sprang free from her mouth. \n\nTheir eyes met again, and Lara bit her lip. Tony bent and picked her up bodily in his arms; threw her face down onto the bed. Lara felt boneless, deliciously vulnerable. She heard him speak as if from a distance: \"Up on your knees, bitch \u2013 show me your slutty ass.\"\n\n\"No... please,\" she whispered. In answer Tony's palm flew through the air and smacked her hard on the ass. She cried out, a mixture of gasp and sob. \n\n\"On your knees, bitch!\" he said, more loudly.\n\nSlowly, trembling a little, she raised herself on all fours. Impatiently, Tony pushed down on her shoulders, shoving her face into the sheet. She was aware that her ass and pussy were now riding high in the air, ripely exposed for him. Lara shivered as a frisson of fear passed through her. Involuntarily she brought her knees together, only to receive another sharp smack on her other ass-cheek. Standing behind her, Tony roughly pushed one knee between her thighs and forced them apart again. He bent and spread her buttocks with both hands. For a long moment he gazed at her damp, aroused cunt and perfect little star, his nostrils flaring as he inhaled her scent of dark arousal. Then he pressed his mouth to her, hungrily feasting on her folds and crevices with his lips and tongue. Lara gasped with pleasure and arched her back.\n\nNext his tongue tip played with her anus, wetting, circling and probing. Slowly he felt her relaxing, loosening a little. After a few minutes Tony drew back, leaving her slick with his saliva. He coated his cock liberally with lube and slid it up and down between her pouting cunt lips and into her ass-cleft. \n\nLeaning forwards, he whispered into Lara's ear: \"I'm going to take your pretty little ass... going to fuck it hard and deep!\"\n\n\"P-please, not my ass... oh God, no\" Lara whimpered, secretly revelling in her subjugation.\n\nShe sensed Tony's weight kneeling behind her on the bed, leaning over her with one hand pressed to the small of her back. Dissociated, as if observing from outside her body, she was aware of his cock-head pressing insistently against her puckered anus. \n\n\"Nooo...\" she wailed. Tony grabbed her hair again and pulled back, extending her neck; with his free hand he swatted her hard, several times on each buttock. Her cheeks smarted, now glowing red. As her body jolted with his blows Lara's erect nipples slid back and forth on the bed, bringing her back into her body again and causing flickering flames of arousal to suffuse her whole being.\n\n\"Shut up!\" he hissed.\n\nLara knew it was futile to resist further. Desperately she tried to relax... panting, willing her rosebud to unfurl enough to receive him. As he pressed forward, his cock stretching her mercilessly, she clutched a fistful of bed linen in each hand. Tears welled in her eyes and hot pain seared her ass as Tony forced his cock past her sphincter muscle. Lara smothered a howl of pain by biting down on the sheet. \n\nShe felt him withdraw again, leaving her gaping open. She whimpered... submitting, letting go; it felt delectable. \n\nHe spread more lube onto his shaft and entered her gloriously tight chute again, deeper this time. The pain in Lara's ass gradually subsided to a hot sting as Tony began to fuck her. Seizing her hips he thrust brutally hard, burying his cock in her rectum, penetrating her to the hilt. Lara gasped as she felt his massive erection swelling inside her, filling her completely. Her face, her chest, her ass-cheeks were flushed and her whole body was covered in a sheen of sweat; she had never felt so aroused.\n\n\"Take me... fill my ass you dirty fucker, I love it!\" Lara cried. \n\nHe fucked her hard now, ramming his cock into her without holding back. His balls slapped repeatedly against her inflamed cunt. Lara reached a hand back underneath her to rub her clit and willed herself to climax along with him. She pushed her ass back to meet every thrust; all discomfort was gone, replaced by raw, unbridled lust. \n\n\"Mmm... yesss... YESSS... fuck... oh fuck... FUCK meee,\" she wailed, in time with his strokes; \"Oh God, that's so filthy!\" \n\nLosing all inhibition, their moans and cries grew louder and louder as Tony reamed her ass like a piston. With a roar like a wild stag his orgasm peaked. Tony felt he was spraying bolts of liquid lightning as his cock twitched and spurted deep in her backdoor; moments later Lara's own climax welled up and hit her like a blow, consuming her with pleasure and making her thighs quiver and lose all tone. She howled out loud, collapsed onto the sheets and felt herself momentarily faint away.\n\n\n\n<center>******</center>\n\nThey lay together on the bed, limbs entwined, each slowly getting their breath back. Without a word, Lara extracted herself gracefully from Tony's arms and pushed him gently onto his back. She positioned herself above him, squatting backwards so her ass was right in his face. He gazed at her star, now dusky red, swollen and slick with juices. Mesmerised, he watched her bear down gently so that her anus pouted open slightly, allowing a tiny spurt of his cum to emerge. She opened and closed her little round hole a few times, coaxing every drop to dribble out onto his chest. Then she turned around, kneeling astride him. Eyes locked with his, Lara slowly lowered her head to Tony's chest and lapped up his cum like a cat licking cream.\n\nShe grinned, wiped her mouth with the back of her hand and stretched herself forward to kiss him on the lips. As Tony responded and the kiss deepened he tasted his own salty cum on her tongue.\n\nAt last, Lara broke the kiss and reached over to rummage in her bedside cabinet with one hand, finally extracting her black silicone strap-on cock.\n\n\"Your turn,\" she breathed in Tony's ear.\n\nTony's initial puzzlement turned quickly to anxiety when he saw what she held in her hand and the wicked grin on her face. And then, just as quickly, his apprehension was replaced by a flush of desire and he felt his cock stir once more. Tony was no stranger to anal sex \u2013 like most men with a highly developed libido he had dabbled in bisexuality \u2013 but the idea of being fucked by a woman was a delicious novelty.\n\nLara slithered off Tony's supine body and grabbed a pillow, which she proceeded to position under his hips. She stood back and fastened the strap-on into place, then smeared lube onto her silicone cock. Lastly she coated two fingers liberally with more lube and met his eyes with a hard, expectant look.\n\nHis face reddening, Tony drew his heels up to his buttocks and allowed his knees to fall wide apart. Lara brought both her slippery fingers to his anus and pressed firmly, without hesitation or gentleness. Eyes closed, Tony bit his lip and relaxed... felt himself open for her, the initial stretching sting soon replaced by a deep sensual pleasure. \n\nIn a while her fingers slipped from him, leaving him loose, wet and ready. Lara moved forward and Tony felt the head of the rubber cock being pushed against his dilated anus... felt the swelling of his ring muscle as he accepted it. He watched Lara's sensual concentration as she began to ream his ass. The sight and feeling of being passively fucked was a new and unbelievably erotic experience; to his surprise his cock soon responded once more with a huge, aching erection. At that moment he wanted nothing more than to be taken... more and more deeply, more and more roughly, by this incredible woman, his sexual soul mate. He wanted desperately to be penetrated to the hilt, fucked without mercy, ravaged by her.\n\nPerfectly in tune with him, Lara read his expression and perceived clearly his unspoken need. In turn, he saw her understanding reflected in her flashing eyes and groaned with pleasure as she lifted his feet high and put his ankles on her shoulders. \n\n\"You like my thick cock in your ass, don't you?\" she snarled.\n\n\"Oh God, yeah!\" he groaned.\n\nNow she fucked him with wild abandon, just as he had fucked her, ramming the silicone cock up his ass to the very hilt; sometimes pulling right out slowly, leaving him gaping, then plunging in again and reaming him hard and fast. \n\nTony was almost delirious. His hands flew to his cock and he stroked himself in time with her thrusts. \"Keep fucking me hard... please,\" he rasped. And a minute later: \"Oh yesss... I'm gonna cum.\" \n\nHe howled out loud in an agony/ecstasy of release as another orgasm erupted from deep within him, his ass clenching and his cum spraying all over his belly.\n\nLara grinned, slowly withdrew from him and unbuckled her strap-on. She scooped up his cum with her fingers and fed it back to him, then stretched her naked body over his. Wrapped in each other, they kissed passionately.\n\n\"Where have you been all my life?\" he murmured softly in her ear, feeling awestruck and moved by the intensity of their connection. Lara smiled down at him. She bent her head, gently blew in his ear and bit his earlobe.\n\n\n\n\n\n5\n\n\n\n\n\nHalf an hour later Lara and Tony re-emerged on the deck; they were hand in hand, pink and freshly showered.\n\nTheir two friends grinned at them. \"Worked up an appetite, have you?\" David asked teasingly, as he threw steaks on the barbeque. He and Abbie had prepared a feast: various salads, fresh crayfish, garlic bread and vegetable kebabs. \n\n\"Sure have!\" Tony agreed, and the four of them sat down to eat. David handed out three glasses of pinot noir.\n\n\"What about you?\" Lara asked, noticing that David had left himself out of the drinks round.\n\n\"Abbie and I thought we might all go clubbing in Auckland tonight, OK? I'll be the alcohol-free driver,\" David replied.\n\n\"Oh yeah... cool!\" Lara said, eyes sparkling. She looked at Tony. He smiled at her, nodding agreement.\n\n\"Eat up then, guys,\" David said. They sat around the table, laughing and talking easily, and finished their meal with a pavlova dessert as the sun went down over the hills behind them.\n\nAs they were clearing the table, David caught Lara's wrist and whispered in her ear. \"I thought we'd go to Scorpio's... what do you reckon?\"\n\n\"Good idea!\" she whispered back. \"I was kind of hoping you would take us there. I'm sure Abbie's ready...\" \n\nWhile the guys cleared up, the two girls went off to get ready to go out, helping each other with outfits, accessories and makeup. Abbie wore her peacock coloured mini-dress with tiny white g-string panties and high-heeled white sandals, while Lara decided on a pair of soft black leather hotpants and matching cropped jacket over a tight white designer t-shirt. Lara rummaged in the wardrobe and produced a pair of black thigh-high boots. \n\n\"What do you think?\" she asked, biting her lip. \n\n\"Mmm, oh yes... fuck-me boots!\" Abbie giggled. She watched as Lara put them on. The effect was stunning, and Abbie felt a surge of desire. She beckoned Lara over and embraced her, then sought her soft lips for a long, deep kiss.\n\nLara's eyes had their familiar dark sparkle. \"You're in for a night to remember, Sweet One,\" she breathed.\n\n\n\n<center>******</center>\n\n\n\nIt was around 11pm when David led them into an alley, and then inside the vestibule of a modern office building, where he ushered them into a lift. Next to the button for the top floor, the 10th, was an unobtrusive sign: 'The Scorpio Club'. Abbie was puzzled; she was expecting a large, noisy nightclub at street level. \n\nIn the foyer on the 10th floor Lara slid a key-card into a slot and they entered a plush, elegant reception area. A beautiful young Chinese woman in a long silk dress with high slits at the sides approached them with a smile.\n\n\"How nice to see you again, Lara... and David,\" she said warmly, kissing each of them on the cheek.\n\n\"It's a pleasure to see you too, Marissa,\" David replied. \"This is my girlfriend, Abbie... and our friend Tony.\" \n\nMarissa shook their hands. \"I can see Lara and David have wonderful taste in friends. Welcome to the club, I hope you have a very pleasurable evening and find everything you're looking for,\" she said enigmatically. \n\nShe led them into a dimly-lit bar area with a grand piano in one corner and a number of small tables where well dressed people of mixed ages sat talking. At the end of the room was a small stage with a floor to ceiling fixed pole in the centre. A stunningly beautiful Asian girl with long, glossy black hair cascading around her naked body was performing a sinuous dance before a small audience clustered nearby. To the side, through double swing doors, they could hear the muffled pulsing sounds of dance music. David brought them cocktails from the bar. As they sipped their drinks and chatted, Abbie and Tony looked around with interest and approval at the classy, sensuously elegant ambience. \n\n\"Let's dance!\" Lara exclaimed, after they finished their drinks. She led them into the adjoining room which was largely taken up with a crowded dance floor, with a bar in one corner, where a younger set were jiving to an energetic DJ's mix amid a spectacular light show. There was no seating in the room but there were a number of small round chest high tables ringing the edges of the room to stand drinks etc. Young, good-looking bar staff circulated with trays \u2013 girls in tight, white tube minidresses, and men with tight black pants and bare chests. Abbie immediatedly noticed one strikingly attractive waiter, a tall, well-built part-Maori man with black curly hair, smooth skin and traditional moko on his shoulders and arms. Even from a distance the huge bulge at the front of his pants was obvious.\n\nAs Abbie looked around and as her eyes adjusted to the dark she began to notice how uninhibited and loose many of the dancers were. Student dances could be pretty wild, with lots of drunken groping, but the atmosphere at 'The Scorpio Club' seemed so much more sensually erotic. Many of the women were daringly dressed and looked very sexy, and there were a number of girl-girl pairs. Couples made no secret of grinding their bodies together or touching and stroking each other as they danced. In the dim light at the edges of the dance floor Abbie saw more intimate activity: passionate kissing and hands sliding underneath clothing. She saw one couple unlock from a hot embrace and slip hand in hand though nearby velvet curtains. With a shock of excitement she realised the whole room was actually ringed with several doorways leading to other areas of the club and a number of private curtained off side-rooms of various sizes. Her imagination leapt as she wondered what went on there.\n\nThe four friends hit the dance floor right away, and were immediately caught up by the energy of the pulsing music and the writhing crowd. Abbie let the beat envelop her mind, and her body followed. She danced uninhibitedly alongside the other three, tossing her lustrous auburn hair. Her short dress rode to the top of her thighs as she gyrated and raised her arms up high along with the crowd. \n\nAbbie and Lara lost themselves in the sensuous pleasure of moving in time to the pulsing music. Eventually they realised the guys had moved off to order drinks and to watch from the sidelines. As the music slowed the two women grinned at each other and moved in to dance close, arms around each other's necks. Lara had shed her jacket and was dancing in just her thin white top, leather shorts, and boots. Both of them were hot and flushed, with a fine layer of sweat covering their skin. As they swayed to the music their erect nipples brushed together. Abbie felt a wave of damp arousal course through her pelvis and she couldn't help pushing her mound forward against Lara's. In response Lara put her hands around Abbie's head and bent to kiss her. Abbie surrendered to the kiss, closing her eyes and parting her lips. Still moving to the music, Abbie was aware of hands sliding down her body to cup her ass and pull her in close. She felt boneless in her friend's arms, and very, very turned on.\n\nAt last, breathless now, they reluctantly broke their kiss. Lara took Abbie's hand and leaned in close to speak in her ear over the music: \"Let's go to the girls' room.\" \n\nIt was quieter in the bathroom and Abbie was full of excited chatter. \"What a cool place, Lara! What's behind those doors? And what are those side rooms for? Did you see that hot waiter, the one with the tattoos?\"\n\nLara hugged her, laughing. \"The waiter is called Mario. David and I know him well; they went to school together. Would you like to meet him?\"\n\nAbbie giggled. \"I'd like to do more than meet him!\"\n\nLara spanked her gently on the bottom. \"Naughty girl! And as for those doors,\" she went on, \"one of them takes you through to a wet area, with a giant hot tub and showers. Another one leads to a playroom with lots of sexy toys and equipment. And another leads to a B&D dungeon.\"\n\nAbbie's jaw dropped and eyes widened. \"You mean...?\" \n\n\"Uh-huh, Sweet One, this is a sex club. It's very expensive and very exclusive, but don't worry \u2013 I'm paying. By the way, there are no rules here, so those curtained rooms you saw are for... well, anything you want,\" Lara said with a grin. \n\nAbbie gulped. \"Omigod!\"",
        "\"So... are you willing to get wild?\" Lara asked. Abbie bit her lip and nodded slowly. \n\n\"OK, great! Well... to get the full enjoyment out of this hedonists' paradise we need some 'E'!\" Lara said, opening her purse to extract a couple of ecstasy tablets. \"David and Tony already had theirs. I gave them a Cialis each, as well \u2013 like super Viagra \u2013 so we shouldn't have any trouble with their stamina!\" she giggled.\n\nThey swallowed their little white tablets and turned to each other, eyes shining. \"Now where were we...?\" Lara purred, gathering Abbie in her arms again and gently pushing her back against the bathroom bench. They kissed hungrily, theirs hands stroking and exploring, oblivious to other women coming and going. Abbie lifted herself so she was sitting on the bench top, thighs spread. Standing, Lara pushed her mound forward to grind against her friend's. \n\nLara reached down to feel Abbie's little white panties, which were now translucent with wetness. \"These need to go,\" she whispered, and slid them off.\n\n\n\n<center>******</center>\n\n\n\nAs Lara led her by the hand back to the edge of the crowded dance floor Abbie was deliciously aware of her near naked body moving inside her filmy dress. They made their way back to join the guys. With a knowing grin, Lara handed David a little white bundle \u2013 Abbie's sopping panties. He put them to his nose and inhaled deeply, eyes locked on his stunning girlfriend, and then slid the wisp of fabric into his pocket. Abbie smiled softly. As the stimulant started to take effect she felt alert and unusually aware of her surroundings. Her skin tingled all over, the air she breathed seemed incredibly fresh. She slipped into David's arms and kissed him, on tiptoes, conscious of her mind and body moving into a state of arousal that she had never experienced before. \n\nDavid's hands slid down her sides and cupped her ass cheeks as they kissed deeply. Abbie lifted her arms and put them around his neck; as she did so her dress lifted and she felt David's warm hands underneath, caressing the back of her thighs, then moving higher. He cupped her ass cheeks, squeezing gently, then pulling them apart and exposing her publically. A new, warm thrill passed through her. She shivered, and kissed her boyfriend again. Tonight she felt she could do anything... would do anything. \n\nLara was gyrating against Tony, pushing her pelvis against his. She shot a sexy smile and a wink at Abbie, at the same time tilting her head with raised eyebrows to indicate an empty anteroom nearby. She led Tony by the hand through the entrance, with Abbie and David following. The anteroom was circular, with padded couch seating around the perimeter and a round padded dais, three metres across and covered with a huge sheet, in the middle. Dim light filled the room, softly illuminating the dark red plush velvet d\u00e9cor. David drew the heavy curtains and suddenly they were in privacy, and the music from the dance floor outside was muffled.\n\n\"Let's tease the boys,\" Lara whispered in Abbie's ear, eliciting a giggle in response. \"Follow me.\"\n\nLara pushed Tony backwards onto the couch and watched, with a saucy smile, as her friend did likewise with David. Leaving the guys sitting, she moved towards Abbie, took her in her arms once more and kissed her \u2013 softly and chastely at first, with coy glances at the guys, then with increasing passion. Abbie responded eagerly, pressing her pelvis forward and letting her hands rove over the skin-tight black leather shorts covering the other woman's perfectly rounded ass. Watching with bright eyes and big smiles, the two men's hands were in their laps, idly stroking massive erections through their pants. \n\nSlowly, sensuously, Abbie lifted Lara's white t-shirt up and off, letting her friend's large, perky breasts bounce free. Standing behind her so they both faced the men, Abbie let her hands roam over the heavy globes, caressing and lifting them, pinching the nipples into hardness. Her hands moved slowly down Lara's belly, undid her shorts and slid inside. She withdrew wet fingers and sensuously licked them. Then, very slowly, as they moved together in time to the distant music, Abbie pushed her friend's shorts down over her sleek tanned thighs, then down over her high black boots, until finally they dropped to the floor. Lara stepped out of them; she wore no panties and her pussy was very, very wet - juices trickled down the insides of her thighs. \n\nNow it was Abbie's turn to stand facing the guys, in her filmy peacock coloured dress and high heeled sandals. Lara reached around and lifted the front hem from behind, teasingly slowly, as she licked Abbie's earlobe; the two men watched, transfixed, as the wispy material rose inch by inch, first exposing Abbie's pink pussy, then her pierced navel, then her succulent breasts, and finally was pulled over her head and cast aside. \n\n\"OK, now let's give them a lapdance.\" Lara whispered in Abbie's ear. \"Drive David wild but don't let him touch you.\"\n\nNaked now, except for their footwear and jewellery, the two women climbed astride their partners as they sat, still fully clothed, on the couch. Abbie needed no coaching. She moved sensuously in David's lap, her pussy rubbing up and down the hard ridge in his pants. Her fingers undid his shirt, and then slid inside to caress his chest and pinch his nipples. When he reached out to pull her close for a kiss she playfully slapped his hands down again, telling him \"Naughty!\"\n\nOut of the corner of her eye Abbie saw Lara playing with her fabulous, evenly tanned breasts right in front of Tony's eyes, kneading them, squeezing them together. She pulled out her large, taut nipples between finger and thumb, and then let go so they sprang back with an inviting jiggle. As she leaned forward and rubbed her tits in Tony's face Lara looked across at Abbie. \"Swap?\" she mouthed, eyebrows raised enquiringly. Abbie grinned back at her in response.\n\nThe two women slithered off their partners' laps and exchanged places. Abbie carefully climbed onto the couch in her high heels and stood astride Tony, facing him, her pussy inches away from his face, rotating her hips seductively. She reached down and peeled open her dusky pink folds, displaying her juicy cunt to his longing gaze. The scent of her arousal filled Tony's nostrils, and he closed his eyes momentarily and groaned as Abbie arched forward to rub herself all over his face. His tongue snaked out to taste her. Straight away, she pulled back, wagging a finger at him and shaking her head. \n\nNext she turned around, still standing, so her bottom was right in front of Tony's face. Reaching back, she fondled her perfect round ass cheeks. Then, balancing carefully, she bent forward at the waist and undid Tony's pants, exposing his erection. She studied his cock at close range \u2013 it was beautiful: so hard it was pulsing with his heartbeat. The purple head was shiny with leaking pre-cum. Abbie moved her hands forward onto Tony's knees, and then arched her back so that her ass rubbed against his face. \"Open me up,\" she breathed. Tony wasted no time in placing his hands on her cheeks and separating them, exposing her wrinkled anal rosebud and wet, pouting cunt. As she dipped her head to place butterfly kisses down the length of his cock, eliciting another groan, Abbie imagined she could feel the heat of Tony's stare on her aroused centre. She focussed her concentration, rhythmically relaxing and contracting her butt-ring, making her cute little asshole put on a tantalising display and teasing him mercilessly.\n\n\n\n<center>******</center>\n\n\n\nThe two women lay together on the round dais bed in the middle of the room. With footwear and jewellery discarded, fully naked now, they took turns massaging each other each other with expensive, scented oil as David and Tony watched, still seated on the couch. \n\nThe kneading and stroking became more and more sexual until eventually Lara and Abbie gave up all pretence of massage. They wound themselves together in passionate embraces, slid their bodies over each other, and finally ended up in 69 position. Each with their head between the other's open thighs, they eagerly pleasured each other... tasting, licking, sucking... all the time making sure the men had a close-up view. The guys had discarded all their clothes too, and their shiny cocks strained in their fists as they stroked themselves in a tormented agony of arousal.\n\nComing up for air, Lara twisted her body to whisper in Abbie's ear: \"I want you to fist me, Sweet One.\"\n\n\"Er... what?\" Abbie whispered back, bewildered.\n\n\"I mean... fuck me, with your whole hand,\" Lara breathed, \"...and make me cum. Oh God, I'm so horny!\" Without waiting for a reply she slid off from atop Abbie's body and positioned herself on her back, with a pillow under her hips. She pulled her knees right back until they rested on her chest, showing off her smooth mound with its sexy dragon tattoo and just beneath, her splayed cunt, swollen, dripping, and musky. \n\nAbbie swallowed hard, grabbed some lube and coated her fingers liberally. Kneeling, she slid three fingers deep into the other woman's waiting pussy. With her labia spread now, Lara's engorged clit and pee-hole were exposed. Abbie began moving her fingers in and out, whilst flicking Lara's sensitive nub lightly with the thumb of her other hand. Lara sighed with pleasure, her head rolling on the sheet. \"More... please\", she murmured. Abbie slipped her pinkie alongside her other fingers so all four were in a line, stretching the delicious cunt-flesh wide apart as she pushed in deeply.\n\n\"Tuck your thumb inside and curl your fingers over it to make a ball, Sweet One,\" Lara whispered, her voice husky with arousal. Abbie complied. She pressed her lubed fist against Lara's gaping pussy and pushed slowly but firmly. \n\nLara closed her eyes and panted, revelling in the feeling of her cunt being stretched and invaded as the three others watched. She gently took hold of Abbie's wrist and helped the other woman ease her fist all the way inside. \n\nAbbie leaned forward to gently kiss her friend's clit as Lara's cunt closed around her wrist. \"It looks so hot... I never knew this was possible!\" Abbie said softly, in awe.\n\n\"Fuck me now,\" Lara gasped, \"...make me cum!\"\n\nLeaning back again, Abbie slowly eased her fist out, giving the men a full view of Lara's gaping, coral pink, glistening pussy, and then pushed it back in again, wrist deep. With her other hand she rhythmically stroked Lara's exposed clit. \n\nLara closed her eyes, arched her head back and gripped the sheet as she felt her cunt being filled to its maximum depth and fullness... felt the fist moving slowly back and forth inside her... felt Abbie's knuckles stimulating the taut ridged flesh of her g-spot. She imagined the erotic spectacle: in her mind's eye she saw Abbie's fist and forearm buried deep inside her, fucking her like a giant phallus... saw her beautiful girlfriend gazing down wide-eyed with amazement and lust. She surrendered completely to dark pleasure, panting hard, a kind of hot tension building quickly from deep inside her pelvis as her climax approached. Lara knew she was going to ejaculate, a rare, wonderful experience that only happened when she was exceptionally aroused and stimulated in just the right way.\n\nShe teetered momentarily on the edge, aching for release, scarcely able to bear the tension, and then plunged over into orgasm... howling, gripping the sheet and thrashing her head from side to side. With each spasm of climax she felt a delicious liquid release as she squirted over and over again. Lara's cunt clenched rhythmically, each contraction drenching the other woman's fist with slippery juice, which then flowed out in little gushes to make a wet patch on the sheet. Abbie stared in amazement. \n\nAt last Lara's spasms subsided and she lay back, limbs splayed, exhausted. She was flushed and her skin was covered in a sheen of sweat. Abbie gently extricated her fist. Their eyes met, and Lara smiled. \"Thank you, Sweet One,\" she whispered, and opened her arms for Abbie to join her. As Lara got her breath back the two women lost themselves in a loving clinch, kissing and cuddling.\n\n\n\n<center>******</center>\n\n\n\n\n\nAt last, rolling apart, the two women looked over to the men with sexy grins. \"Do you think we should put them out of their misery?\" Lara said. \n\n\"Uh-huh, I think they're waited long enough,\" Abbie replied. Lara beckoned both guys to join them. \n\nPumped up with 'E' and raw lust, David and Tony leapt from their seats, climbed onto the dais and grabbed the women eagerly. In a tangle of limbs, they embraced and fondled each other with abandon. Lara knew the men needed a quick release from the aching tension in their massive erections, so she focussed on pleasuring their cocks, and guided Abbie to do the same. Tony and David were treated to fellatio heaven as expert mouths and hands ministered to them. The girls swapped from one man to the other every minute or two - kissing and suckling each man's cock, or licking their balls, whilst teasing their perineum and asshole with fingers and tongues. Sensing a climax rapidly approaching in both men, Lara came up for air and whispered in Tony's ear: \"Why don't you fuck her like you fucked me this afternoon?\"\n\nAbbie was kneeling astride David in 69 position, her head down and her ass in the air while she concentrated on swallowing his cock deep into her throat, making him groan with pleasure. As Tony positioned himself behind Abbie, Lara gently eased the other woman's succulent buttocks apart, and bent her head to lick her cute little star into readiness. A frisson of delight quivered through Abbie's body; she paused momentarily, allowing her sensitive little asshole to loosen, and then continued her rhythmic deep-throating of David. She felt Tony's cock press urgently against her backdoor as his hands gripped her hips, then with a half-sob, half-grunt he thrust roughly and deeply into her rectum. Abbie's eyes bulged and watered; she was unable to cry out because her mouth was filled with cock. As her anal tissues were stretched and invaded, the now-familiar hot prickling pain/pleasure in her ass filled her awareness and made her dizzy with desire. Refocussing, Abbie continued to milk David's cock with her throat. As she did so, she rocked her body back and forth, pushing back at Tony with her ass, urging him to impale her. Sensing her readiness, Tony fucked her hard and fast. His cock buried itself to the hilt in her hot, gripping ass \u2013 drew back \u2013plunged into her again, his balls slapping against her cunt. He could wait no longer. With a roar of primal lust Tony's seed erupted deep in her rectum. Abbie felt his cock jerking inside her; she squeezed her ass muscles to milk his cock as he came. A moment later she heard David cry out as his orgasm crested, and another load of hot cum spurted into her, this time down her throat.\n\n\n\n\n\n6\n\n\n\nThe four friends showered together in the next-door bathroom, dried off, then returned to their private antechamber, where snacks and drinks had been laid out, and a fresh sheet laid over the huge round bed in the centre. They sprawled out naked in an afterglow of sensual bliss, feasting and chatting happily. Soon Tony grew sleepy and felt asleep on the couch. Abbie still felt wired and her body tingled with arousal. 'I'm the only one who hasn't cum tonight,' she thought to her herself ruefully, as one hand snaked between her legs. \n\n\"Oh Abbie, baby... are you still horny?\" Lara asked teasingly. \n\nAbbie sighed. \"I guess so, but I can hardly complain - I've had just about every sexual treat there is to have...\"\n\nLara snuggled up to her friend and caressed her lovingly. \"Honey, I've saved the best 'til last for you!\" She glanced at David, and winked; he got up and left the room. \n\n\"What are you two planning?\" Abbie demanded. But Lara would say no more, despite being tickled mercilessly. \n\nWhen David returned, a few minutes later, with a gorgeous young Maori man in tow Abbie gasped with delight. It was the waiter, Mario, whom she had lusted after earlier.\n\nMario gave Abbie a sexy smile as David introduced them. Abbie's mouth felt dry and her pussy flared hotly with need. She couldn't keep her eyes off this tall, beautiful young man, with his handsome face, fashionable stubble and his mop of unruly black hair. He was bare from the waist up, and very buff, no doubt from weight training. His muscles rippled under his smooth dark skin, which seemed to glow in the dim light, and Mario's dark brown eyes sparkled with fun as he joked with his old friends David and Lara. Abbie lowered her eyes and stared shamelessly at his ass, nicely outlined by his tight black pants. Her heart skipped a beat when he turned and she caught a glimpse of the huge bulge in the front of his pants.\n\nLara wound herself around their guest, caressing him. \"You're rather overdressed, don't you think, Mario?\" she said, glancing at Abbie as she squatted down and undid his belt. Lara paused, and beckoned. \n\nAbbie walked over, blushing, feeling dizzy with desire. \"Mario's your present, from David and me, Abbie darling,\" Lara said. Abbie's jaw dropped; she was speechless. David smiled lovingly at her. \"Go on Abbs.... he's yours,\" he said. \n\nAbbie felt suddenly shy at her nakedness and bit her lip. Heart pounding, she reached out and touched Mario's chest, tracing the stylised Polynesian design of his tattoo with her fingertips. She closed her eyes and slid her arms around him, inhaling his scent and feeling his hardness and strength. Her whole body ached for him, and she whimpered when he kissed her on the mouth \u2013 a long, tender kiss that made her feel faint. He tasted exotic and spicy; she didn't want the kiss to end, but somehow she was happy to obey when he gently pushed her down to a squatting position at his groin. Abbie looked up into Mario's warm, smiling eyes, and with both hands slid his pants down. He kicked them off, and stood splendidly naked before her.\n\nMario's cock sprang forth as it was released. Abbie thought she had never seen such a beautiful sight. Not only was it huge and thick, Mario's penis was perfectly proportioned. 'Like a polished ebony sculpture,' she thought to herself, and licked her lips. Pre-cum glistened at the tip. His balls and pubic area were waxed smooth. She touched the rapidly stiffening shaft reverently, drawing her fingertips down its length, trying unsuccessfully to encircle it with her hand, cupping and weighing his balls. Then, reaching around to caress his ass, she kissed and licked Mario's cock all over, finally taking the giant mushroom head into her mouth and sucking. \n\nAbbie stood shakily, flushed, aflame with lust for him, and slid her arms around his neck. \"I want you, Mario,\" she whispered huskily, \"Please fuck me now... fuck me hard!\"\n\nMario scooped her up then, as if she was as light as a feather, and carried her to the big round bed. He threw her down roughly on her stomach, winding her slightly. She felt boneless, like a rag doll, as he quickly positioned her on elbows and knees... pressed his huge cockhead to her sopping, aching cunt... and entered her in a single hard stroke. Abbie felt her cunt stretch and swell up as he filled her, and she gasped, then cried out \"yesssssss\" and pushed back as Mario seized her hips and began to fuck her. \n\nWithout warning, Abbie climaxed. Waves of pleasure surged through her as she felt her insides turn liquid and gush out. She nearly blacked out but returned to consciousness as Mario continued to pound her relentlessly, as if nothing had happened. Abbie felt her arousal build quickly once more, and knew she needed more.\n\n\"Ohfuck, FUCK...do me hard!\" she howled, as Mario slammed into her. Just when she was on the brink of another orgasm, he withdrew, and quickly flipped her over onto her back. Her pleading eyes flicked between his huge slick cock and his smiling face. Teasing her, he knelt astride her and rubbed his cockhead over her breasts, then her face. Abbie desperately wanted his beautiful cock deep inside her again, but she was so overwhelmed she could only whimper inarticulately. At last, after what seemed like forever, Mario moved down between her legs. She sobbed with relief as he plunged into her inflamed cunt once more, and climaxed immediately, her whole body rigid, neck extended, mouth open in a silent scream.",
        "After she came back to earth, Mario continued to make love to her \u2013 but now slowly and tenderly. He seemed to intuit exactly what she wanted and needed, a natural genius who could play her body and mind like a violin. Whenever she felt she could stand it no longer he would find a different way to lift her to a new plateau of pleasure, and bring her to orgasmic release. Abbie came, and came again....over and over... finding heights of passion that she had never before imagined. Mario had superb control and concentrated fully on her own pleasure, foregoing his own release.\n\nFinally, as she lay panting, taking a break but still aflame with sexual heat, Abbie became aware that David had joined her on the bed, while Mario knelt on her other side. David caressed her lovingly. She buried her head in his chest, tears running down her cheeks. Abbie rolled on top of her boyfriend and, aching to be one with him, impaled herself on his newly hard cock, grinding her pelvis into his and kissing him fervently.\n\n\"Oh...oh, David,\" was all she could utter. She moved her body over his, fucking him, feeling fulfilled but somehow still needing ultimate release. She felt David's hands caressing her back, and then became aware of Mario's hands there too, feather light strokes which gradually descended to her buttocks. She closed her eyes, surrendering to the blissful experience of two wonderful men pleasuring her at once.\n\nMario watched David's cock sliding within Abbie's slippery pussy as she moved atop him. Gently, reverently, he parted her ass-cheeks with both hands and bent his head to kiss and tongue her dark cleft. At this moment Abbie was looking deep into David's eyes. As Mario began to rim her asshole David saw her gasp and her pupils dilate. \"I...w-want... you...both,\" she half-whispered, half sobbed.\n\nAbbie slipped into an altered state of consciousness. She dissociated, her awareness floating; it seemed like she was observing from above as Mario knelt behind her and pressed his giant cockhead to her slick, twitching anus. She stopped moving and concentrated on relaxing, opening herself up.... her boundless sensual need tinged with apprehension at the thought of this monster invasion. Panting softly, she felt herself being opened, spread, and stretched wide like never before. There was no pain; only deep, dark satisfaction as she felt her anal ring surrender. Mario's cock eased into her rectum. She felt totally, deliciously feral.\n\nAbbie sipped back into her body, in ecstasy now. The heady aroma of masculine sexual desire mixed with her own heated cunt-scent aroused her even more. She felt tiny, sandwiched between the two big men... and felt unbelievably filled up by their two cocks inside her. Gingerly, she began to move again, and Mario picked up her rhythm, moving with her, gently at first. His greased cock slid deeper and deeper into Abbie's ass, until he understood, with amazement, that she would be able to take his whole length. Her ass gripped his shaft tightly, and he closed his eyes, aware that he could no longer postpone his climax. He withdrew his cock all the way out and gazed with awestruck lust at the sight of her anus splaying obscenely wide open, before sliding his huge shaft deep inside her again.\n\nAbbie shuddered, and a strangled cry escaped her lips. \"Aah... aah... fuck... FUCK ME!!\" she howled, and began to buck against the two cocks invading her. Sensing her readiness, Mario seized her hips and unleashed himself, fucking her with animal abandon, ramming into her ass deep and hard and fast. Together, they soared towards climax, their moans and cries mingling and building to a crescendo. \n\nAbbie felt the spasms of Mario's cock as he spurted jet after jet of hot cum deep into her bowels. A moment later, time stood still as an enormous earth-shattering tsunami of orgasm washed over and through her, transporting her to Heaven, and.... blackness.\n\n\n\n<center>******</center>\n\n\n\nAbbie gradually surfaced into wakefulness, stretched and opened her eyes. She felt spent, and a little sore, but wonderfully satisfied. David lay beside her, leaning on one elbow. He smiled at her, his eyes tender and loving, and moved a lock of hair from her face. Abbie felt her legs being gently moved apart and her knees pushed up onto her chest. A warm, soft tongue began to lap at her pussy and ass, cleaning her up. Lara's head popped up from between her legs. The other woman licked up a dribble of cum from the corner of her mouth, and shimmied up the bed to cuddle Abbie. \"You're special, Abbie \u2013 David and I both love you,\" she said. \n\nAbbie smiled, feeling moved to tears. She pulled her two friends close and kissed them. \"I'm so grateful to you both... and I love you too!\" she breathed."
    ],
    "authorname": "abigailc",
    "tags": [
        "medical student",
        "sex on the beach",
        "deep throating",
        "ass licking",
        "food in sex",
        "peeing",
        "lesbian fisting",
        "rough anal sex",
        "sex club",
        "double penetration"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/abbies-summer"
}
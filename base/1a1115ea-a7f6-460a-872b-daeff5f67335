{
    "title": "Shaving Pubic Hair: The Second Best Way",
    "pages": [
        "The most effective way to shave body hair anywhere--face, legs, pubes, etc.--is with a straight razor freshly sharpened on a barber's strap and deburred on the opposite, leather side. \n\nThis takes considerable skill and practice and is really a dying art. There are, however, a few old-time barbers and a handful of folks like me who learned from them who still know how to use a straight razor, so I'd encourage anyone who desires a super-close shave to seek one of these experts out to learn the technique. It has to do with knowing just how to pull the skin back with one hand while using the other to guide the razor at the right angle, pressure, and speed across the area to be shaved, plus getting a quality razor, knowing exactly how to sharpen it, and using good shaving cream and after-shave products.\n\nBUT, that takes considerable time and effort. \n\nSo, the second-best way to shave is with a so-called safety razor--they do have the potential to cut you--and knowing how to use it. I like the Schick Quattro and prefer the Nivea for Men Sensitive Gel shaving cream and Sensitive Balm after-shave lotion. I use these same products with the straight razor, too. Disregard the \"men\" in the name, as the gender-specificity is merely marketing, and they work just as well for women.\n\nIt's key to get comfortable in a well-lighted area and allow yourself plenty of time. A rush job is much more likely to lead to nicks and cuts and unfavorable results. You'll usually get better results if someone other than the shavee does the shaving, and it can serve as a great form of foreplay, too.\n\nThe first step, if the pubic hairs are longer than about a quarter inch, is to remove them with scissors. A good pair of barber's sheers is best for this. They are not cheap, but they'll last a lifetime if reasonably cared for. A good second choice are bandage sheers--the kind EMTs use to cut your clothes off in an emergency. They have the advantage of blunt blade tips, so you don't have to worry about watching the blade ends to keep from inadvertantly snipping yourself as your eyes focus on the other part of the blade cutting pubic hair. Also, dedicate the sheers, whatever kind they are, for hair-cutting purposes only, and don't use them for anything else like paper or fabric. Cut as much of the pubes with the scissors as you can, and brush out the severed hairs.\n\nThe next step is to soften the hairs. The easiest way to do this is to take a hot bath or shower first. Or, make a hot a compress with a hand towel soaked in water as hot as you can tolerate, wring it out, and hold in place for a couple of minutes. \n\nSo that the hairs remain warm and thus soft and more easily shaved, immediately apply the shaving cream. It's often cold--undoing the work of your hot shower, bath, or compress--so it's a good idea to warm it by simply placing the can in a basin of hot water. Schick used to make a hot lather machine with replaceable canisters of cream. I got one for my granddad, shaved my face with the hot cream a number of times myself, and thought it rendered an incredibly close shave. That was over 30 years ago, and I haven't seen that product anywhere in many years. If you really want to go all out, I'm sure there are still professional model hot lather machines available through barber supply firms, and I'd bet they aren't cheap.\n\nApply the shaving cream SPARINGLY; it's purpose it to soften the hairs and lubricate the skin, and too much will obscure the view of what you're trying to shave. Using a shaving brush facilitates working the cream in and feels great when swirled on clit, labia, scrotum, that sensitive spot on the underside of the penis near the head, and the anus. Yes, I know, not all of these areas have hair, but hey, this is about shaving and having fun at the same time!\n\nWherever possible, shave WITH THE GRAIN--in the same direction in which the hairs are pointing out of the skin. With practice, you can learn to pull the skin back so that the pubes are nearly perpendicular to the skin surface for the closest shave. Don't shave against the grain, as this is much more likely to lead to ingrown hairs as they grow back. By the way, the longer you continue to shave a particular area, be it face, legs, pubes, or wherever, gradually the more perpendicular the hair will grow out from the skin surface, making it ultimately easier to shave.\n\nDo not shave back over an area you've already shaved. This is awfully tempting when you spot a few hair stubs remaining, but doing so often leads to skin irritation. Simply leave them and get them the next time you shave, which, depending on the growth rate of your pubic hair could range from a couple days to over a week. Just like a face or legs, don't shave again until there's something there to shave. Incidentally, repeated shaving of the same area \"trains\" the skin to tolerate it, so that over time, less and less irritation is likely to result.\n\nRinse the area thorougly but gently with warm water, and immediately apply the after-shave lotion to lock in moisture. I pointed out my favorite, above, but whatever you use, make sure it is alcohol-free, as alcohol may feel refreshing and cool but is a skin irritant for many.\n\nEven if you've followed my directions scrupulously, don't be surprised if you get some skin irritation--a prickly-heat-looking rash of raised red bumps or ingrown hairs--if you are a new or newly-resuming crotch-shaver. To deal with an ingrown hair, NEVER pluck it, but rather take a needle and carefully pull it intact to the surface and then just leave it alone until you shave it off the next time you shave.\n\nI know it's counter-intuitive to continue doing something that has caused a problem, but, reiterating what I stated above, with repeated shaving, less and less irritation results. There are, however, a small minority of people that will always suffer irritation from shaving their pubes. For those folks, simply trim your pubes closely with scissors and be satisfied with that.\n\nAnyway, let me address a frequent problem--shaving where the skin is folded and-or wrinkled: No matter what the particular area--labia, clitoris hood, scrotum, anus--you want the area to be shaved to be as smooth and wrinkle-free as possible. It's best to develop skill at this by shaving someone else before you do yourself.\n\nLet's take the case of a person shaving a woman. Facing her while she sits on the edge of a stool or chair with legs spread, you should use the fingers and/or thumb of your non-shaving hand to stretch her pussy lip flat toward the center of her vagina. At the same time, she should be stretching out her leg on the same side in as wide a spread-eagle as she can while you apply a very small amount of cream to the area and shave in one continuous motion and applying moderate downward pressure on the razor until all of the pubic hair is removed on and between her pussy lip and as far as necessary across the divot of her upper thigh. \n\nTo remove the wrinkles, simultaneously pull her pussy lip in one direction with one hand as you shave in the opposite direction with the other hand. Then do the other labia using the same technique.\n\nIn may sound risky, but the razor itself will smooth out any remaining wrinkles as you guide it over the area to be shaved. Use about the same amount of pressure as you would shaving your own chin or knee, and, remember, shave the area just once. \n\nIn the case of a man, shaving the scrotum, especially the particularly wrinkly part at the base of the penis, can be accomplished in a similar fashion.\n\nIf there are a few small cuts, that means you are normal, so don't freak out. With practice and patience, you'll learn how to shave your pubic hair really close without a single nick. \n\nThere is a reason I did not describe how to use a straight razor to shave your pubes here, even though it's the best way. It's just too dangerous. You must have a highly experienced person SHOW you how to use it numerous times and be present to give you corrective feedback. I cannot do that in a How-To essay. So, if you defied my advice and tried to figure out how to use a straight razor on your own, you are about now probably bleeding profusely, and maybe even looking at portions of your genitalia on the bathroom tile. Call 9-1-1 and say your prayers. Be sure to bring severed pieces of your anatomy in a cup of cool water to the hospital. They may be able to re-attach them.\n\nI hope this helps those like me who love the visibility, smoothness, and unimpeded access of a hairless crotch. Please leave comments both pro and con, as we're all in this thing called life together, and will certainly benefit from sharing our knowledge and experiences. "
    ],
    "authorname": "Hornyman69WithU",
    "tags": [
        "shaving",
        "grooming advice",
        "pussy shaving",
        "pubic shaving",
        "shaved"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/shaving-pubic-hair-the-second-best-way"
}
{
    "title": "One Night Love",
    "pages": [
        "It was just about a quick night. Or so they thought.\n\n********************\n\nHave fun with this little story of mine!\n\nDingo\n\n********************\n\n\"Sammy? Well, what a surprise! What are you doing here?\"\n\nI knew that voice and turned around, a glass in my hand. A little redhead beamed at me. Who was that again? What was her...? Ah - right!\n\n\"Hey, Vanessa. Nice to see you again.\"\n\nI put an arm around her - the right one, balancing the drink in my left hand - and gave her kisses left and right. She had once been with Bruno, one of my best friends. She giggled, and I smelled the alcohol on her breath.\n\n\"How's Linda?\" she asked,\n\n\"Good, I guess,\" I returned, taking a sip. \"We parted, quite some time ago.\"\n\n\"Oh.\" She looked confused, then shook her head. \"I hadn't noticed.\"\n\n\"You'd already broken up by then, you and Bruno.\"\n\n\"Yeah, probably. It's been two years now.\"\n\nShe barely had to raise her voice. An hour ago, when I arrived, I had to shout for conversation. Now the electro-bass beats from the next room droned on a little less forcefully. Gerald had certainly invited all the neighbors, but after one o'clock in the morning you could never be sure if some neighborhood buzzkill wouldn\u00b4t call the cops.\n\nShe looked around and shrugged her shoulders. Bare shoulders. The red and white striped top with the spaghetti straps struggled to contain her full bosom. Vanessa was one of those girls who could best be described as \"buxom.\" Small and not fat, but not really slim either. Voluptuous, feminine shapes that somehow seemed too big for the body.\n\nVery provocative, to some. But not my favourite. I'm more into the skinny ones. And I have no preference for red hair like so many others, anyway.\n\n\"How do you know Gerald?\" she wanted to know, swaying her hips back and forth in groove with the bass drum.\n\n\"From college times,\" I returned, letting my gaze roam over her head. Less people around now. \"We had a few classes together. How about you?\"\n\n\"By a friend.\" She waved her hand in a \u00b4it-doesn\u00b4t-matter\u00b4 way. \"I just got here some minutes ago. Looks like the party's almost over, though.\"\n\n\"I get that impression, too,\" I sighed. \"What a bummer. There's not much going on at the 'Popocat\u00e9petl' today, so I came here instead. Now what I am supposed to do with this evening that\u00b4s started?\"\n\nShe laughed. A deep laugh, with a sort of coo in it. I blinked. Wait a minute -- I knew that tone!\n\n\"Me too.\" She yawned and stretched, showing off her breasts nicely. \"I came here with a guy who invited me. But then we had an argue and he left.\"\n\n\"Oh, and now you're all alone?\" I gave her a look of deepest regret. She laughed, again with that undertone. Her lipstick was a little smudged at one corner of her mouth. It didn't matter. She had beautiful lips.\n\n\"Nah,\" she giggled, winking at me. \"Now I'm with you, right?\"\n\n\"Right. Dancing?\"\n\nShe nodded immediately and put her glass down.\n\nWe danced. The volume was just enough to hit the blood and to go straight to the legs. Or maybe we had just enough drinks. Vanessa tossed her hair back and forth in front of me. Deep red flames in the colorflashes from the improvised light organ above. She moved loosely, relaxed, always half a heartbeat behind the rhythm, as if letting it pull her along. This seemed strangely lascivious. Again and again our arms touched, and again and again she smiled at me from below. She resembled a mixture of a little girl and a vamp.\n\nIt may well be that I'm not one of the fast ones. But these signals I recognized. This was an invitation, right?\n\nHm - and me? Should I accept it? Actually, I just had enough of girls. Nothing against one night stands, but usually it didn\u00b4t work out that simple and noncommittal afterwards.\n\nOn the other hand -- she was not my type, and vice versa was probably just as true. Best conditions, right? I was indeed hot. She was young and reasonably pretty, so why not?\n\nOr have I overinterpreted something here? Was her supposed cuddliness only due to the alcohol that was singing in my veins? Or was this some kind of game?\n\nUnexpectedly, I was overcome with displeasure. \"Come on.\" I put an arm around her and pulled her off the dance floor.\" \"I'll buy you another drink.\"\n\n\"Show-off!\" she laughed, showing dazzling white teeth. \"It's all from Gerald, isn't it?\"\n\n\"Exactly. Makes it easy to offer a drink.\"\n\nShe laughed again and willingly let herself be guided. I felt sweaty skin under my fingers. Her top left a stripe of skin above the red jeans, which highlighed the waist.\n\n\"A Caipibull for me.\" She brushed her hair out of her face as we stood at the bar. Where \u00b4bar\u00b4 meant a plain table full of bottles and glasses. I rummaged through the leftovers and found half-melted ice, pitu, lime slices, and a can of Red Bull. Normally this stuff grosses me out, but now it fit. I prepared two glasses and handed her one.\n\n\"Here's to this evening!\", I declaimed theatrically, bumping my drink against hers.\n\n\"It's night already,\" she winked, putting the glass to her lips without taking her eyes off me.\n\n\"To night, then.\" I took a sip, feeling the excitement tickle under my sternum. I wanted to know, and I wanted to know right now. Preferably with the oldest of lines.\n\n\"Speaking of night,\" I said in a chatty tone. \"Are we going to my place or yours?\"\n\nShe didn't choke. No cinematic effect, or anything. But she squinted her eyes, put down the glass and fixed me. Damn it -- overdone! I had screwed up. In a moment, she would throw a curse at my head and dissapear on the spot.\n\nSo what? What did I care about the whims of this woman? Just a distant acquaintance of mine, a casual party guest. I put on a thin smile and waited. But this felt like I was playing a role. The role of a stranger.\n\nBut - there! A miracle. A hesitant smile spread across her large, deliciously sensual mouth, and her eyelids went halfway down. If that wasn't a bedroom look!\n\n\"Well, well,\" she giggled, \"I didn't remember you being that direct.\"\n\n\"One learns.\" I shrugged, put the glass down, and put both hands around her waist. Pulling wasn't even necessary. She moved closer on her own until we were touching. Soft pillows nestled against my ribs. Her sparkling eyes looked up at me. She had deep green pupils. The color of wine bottle bottoms.\n\n\"My place,\" she murmured, clasping my upper arms. \"I live just around the corner.\"\n\n\"Perfect. Because I shouldn't be driving anymore.\"\n\nAll by ourselves we melted into an embrace and kissed. She tasted the way she felt: sweet and soft. The curves of her hips filled my grip, she clung to me, and her lips met mine with barely suppressed eagerness. I suspected she needed it as much as I did. My member swelled and tingled prettily as it pressed against her belly. She felt it and responded by rubbing against it and me.\n\nAll right, a spontaneous fuck then. Normally I like it when a girl is a little brittle, so real conquest work is due. Here and now, however, I found her easy concession as fitting as it was pleasurable. I slid a hand up her expansive ass and forced my tongue into her mouth.\n\n\"Mhmm,\" she murmured, licking my lower lip. \"Let's get out of here.\"\n\nNot five minutes later she stalked up the staircase to her apartment, a suppressed giggle on her lips. I followed her and enjoyed the sight of her butt swinging left and right in front of me. She really had a big ass, but nicely shaped. The plump cheeks came out perfectly in the jeans. Likewise the thighs: rather stocky than elegant, but very feminine and quite attractive. I was beyond aesthetic quibbles anyway. I just needed something warm and soft and devoted under me.\n\n\"Come in,\" she whispered on the third floor, fumbling with the lock. A soft click, and the door swung open. Light shone out; she obviously hadn't turned it off when she left.\n\n\"Nice,\" I commented after an initial sweeping glance around the appartement. She laughed up at me. The living room looked like a marauding horde had came through. Dishes from dinner were still on the coffee table, clothes hung over the back of the sofa - apparently the last selection before going out - and the monotony of the gray carpet was broken by scattered books, magazines, paper notes and a notebook computer.\n\n\"Don't look like that.\" She pulled a pout, but had to grin at that. \"I just thought I'd come back alone. Otherwise, of course, I would have cleaned up.\"\n\n\"Of course,\" I nodded, eyeing a bra hanging on the radiator. \"Maybe we should have gone to my place after all. Because my place is super hyper tidy. Always, as men do it!\"\n\n\"Yeah sure, certainly. Who needs too much tidiness anyway? You better look over here.\"\n\nShe waited until I directed my gaze at her. Then she stripped off the skimpy leather jacket and let it fall to the floor, where it remained as a half-erect figure. With a giggle, she slipped the top over her head and tossed it aside.\n\nI grinned at her. The chaos actually gained a certain charm this way. The white bra she was wearing really shone against her tanned skin. Those were DDs, easily.\n\n\"Well, do you think I'm pretty?\" she cooed, caressing her body with one hand.\n\n\"Sure do.\" I stepped toward her.\n\n\"Liar.\" She laughed, but didn't seem angry. \"Linda was just as petite as that blonde I saw you with at the town fair last year. Bruno told me that even in college you always went after the skinniest ones. So - why me, today?\"\n\nI stopped, confused. What did she expect from me? The truth, in the end? She eyed me as curiously as a researcher would examine his latest experiment. Again, anger welled up in me. I didn't feel like playing games any longer. All right! The truth? She could have it.\n\n\"Because I met you.\" I spread my arms. \"You're right. Normally you don't fit my pattern of prey. But for a quick, spontaneous Saturday night fuck, it doesn't really matter, right? I'm solo for now, and I am horny. Horny for you, just like that. Is this a crime?\"\n\nShe was no longer smiling. Her green eyes scrutinized me, weighing. She nodded slowly.\n\n\"I noticed,\" she said softly. \"Thank you for being honest.\"\n\n\"And what about you?\", I shot back, still upset. \"Don't tell me you're hoping for the big love.\"\n\n\"No. In fact, I never really liked you.\" She pressed her lips together. \"I always wondered why Linda got involved with such an arrogant jerk like you.\"\n\n\"Oh, really?\" I braced my hands on my hips. \"What am I supposed to think of a woman jumping into bed with someone she doesn't like at all?\"\n\n\"You stupid idiot!\" she hissed, a telltale glint in her eye. \"Maybe you haven't figured it out yet, but we girls can be just as horny. And then we just want to...\"\n\nShe broke off, swallowed. Turned away. I stared at her back. A beautiful back, all smooth and even.\n\nMy anger collapsed. What a giant ass I was.\n\nI stood behind her and took her upper arms. Soft upper arms, with a larger circumference than I was used to. I squeezed them gently, enjoying the unfamiliar sensation of soft compliance.\n\n\"I'm sorry, Vanessa,\" I whispered. \"I'm really being a dick. I didn't mean to hurt you.\"\n\nShe remained stock-still for a few more seconds. Then she sighed and loosened up.\n\n\"It's okay,\" she said wearily. \"What do I have to start deep conversation at this time of the day anyway?\"\n\n\"Come here.\" I turned her around and took her in my arms. She allowed it. I buried my face in her hair. Her scent surrounded me. Young and sweet, with a hint of sweat.\n\n\"I'm sorry,\" I repeated. \"Would you rather be alone? Do you want me to leave now?\"\n\n\"No.\" A strangled cry, almost a scream. She embraced me with frenetic strength. \"Not alone.\"\n\n\"Okay.\" I rocked her back and forth like a child. The cloud of lechery was blown away. I felt sober and a little pathetic. And strangely tender, toward her. \"We don't have to make love if you don't want to. We can cuddle or something...\"\n\n\"Don't give me that nonsense.\" She looked up at me. Wetness glistened in the corners of her eyes, but a smile twitched around the corners of her mouth. \"I want to. Why do you think you're here?\"\n\n\"Why, indeed?\", I inquired, my voice soft, brushing a strand of hair from her forehead.\n\n\"Because...\" She hesitated and took a deep breath. \"Because my boyfriend dumped me two weeks ago. Over a skinny blonde chick. And because I wanted to prove to myself that I was just as desirable, I guess. Even if I don't fit the current ideal of beauty.\"\n\n\"You are beautiful,\" I murmured, and meant it. \"You look great, Vanessa.\"\n\nShe looked at me, still doubtful. I put a hand on the warm pillow of her left breast.\n\n\"You look great,\" I repeated, squeezing. \"I'm already dying to admire your beauty without any cover.\"\n\nThat conjured up a smile to her face again. I had found the right tone with her, it seemed.\n\nI stroked her bosom and found a bud under the smooth fabric of the bra. We looked at each other unblinkingly as I gently teased her. She swallowed and opened her lips. The nipple hardened and swelled towards me. Lust bubbled up. In me, in her, and between us. Suddenly we were both breathing faster.\n\n\"Is that good for you?\", I asked.\n\n\"Mmm.\" She kissed me lightly. \"Can you take the other one, too?\"\n\nSo I grabbed for both breasts and felt the swelling forms, caressing, stroking the bare skin of both mounds above the hem of the bra. She did not take her eyes off me. I didn\u00b4t hide my arousal, neither in my gaze, nor in the pants. Sure, a small, sweet, firm tit was more my thing. But these big and soft hemispheres with huge nipples captivated me in a way all their own.\n\n\"I want to see them!\", I groaned out, curling my fingers into them, \"Now.\"\n\nVanessa sighed and nodded. \"Come.\"\n\nWith that, she took me by the hand and led me to the sofa. She pushed me in, right between the clothes, and swung herself on top of me, kneeling wide-legged. A kiss, hot and wet, with lots of tongue, then she straightened up bolt upright. The double balls floated right in front of my eyes.\n\n\"Open this,\" she demanded. I grabbed around her, nestled the hook open. A textile sigh, and her forms sagged a little with gravity as the support gave way. She shook the thing off her shoulders, and her breasts dangled freely in front of me.\n\n\"Wow,\" I nodded impressed, without hiding it. So wonderfully round and plump! With unusually large aureoles, dark, blotchy, and frayed at the edges. The nipples themselves stood out like little cones, also much more voluminous than average.\n\nShe clasped my head and leaned forward. My face sank into fragrant softness. I sniffed her, greedy and enraptured, and searched for the nipple with my lips, found it. She literally pushed it into my mouth.\n\n\"Yeah, suck on that,\" she breathed.\n\nI looked up, into her face, and licked the plump bud with the tip of my tongue. She blinked and sighed. Her eyes were reminiscent of a bottomless lagoon, her red hair flowing like seaweed. Tenderly I embraced her bosom and pampered her in every way. I kissed, licked, nibbled. Lust veiled her gaze and moans interspersed her breaths.\n\nI rubbed my teeth over the sensitive tips and probed under the bells, where they rested on the ribs and the skin felt especially soft. Into this sweaty crevice I thrust my tongue, and licked it across the breast with great wet strokes. Then I switched to the other side, which she immediately stretched towards me. She held very still and gasped louder and louder to herself. Only once did her abdomen involuntarily jerk forward when I sucked half a tit into my mouth as hard as I could.\n\nBlissfully, I put a hand around her and felt her buttocks. This formed a perfect counterpoint, an equally prominent double bulge, just as soft, just as seductive. My fingers followed the seams of the jeans, finding tender flesh, arousing curves. I felt her tense the muscles in her thighs as I reached around it, just below the waist.\n\n\"Oh yes...\" she whispered and pressed herself closer to me. I chewed on a swollen nipple and grabbed between her legs from behind, encountering heat under the fabric. She shifted her pelvis back and forth, rubbing against my thrusting fingertips.\n\nWith a suppressed sound, she yanked her tit out of my mouth and slid backwards, off the couch and suddently knelt in front of me. With an overexcited grin and flickering eyes, she lunged at my pants and tugged at the belt buckle. That was a little too fast for me, I would have liked to spoil her a bit more.\n\nBut I grinned back and lifted my ass out of the pillow. She growled like a she-wolf and tugged down my pants, barely unzipping them halfway. The underpants followed. My cock erupted and pointed at her, a speedometer needle of desire.\n\n\"Nice,\" she commented, giggling. \"You're shaved.\"\n\n\"Can't stand hair on me these days. I like my private parts without the dark curls. It looks cleaner somehow, doesn't it? I gladly take the hassle of f regular care for that.\"\n\n\"Then you'll probably like my kitty, too.\" She winked at me. \"It's naked, too.\"\n\nI didn't find the time for an answer. She hooked herself between my knees and a second later she took my stiff strap in her mouth. With a deep sigh, I leaned back and watched her suck me. She understood something about it, I saw and felt that immediately. With routine movements, she massaged the rod up and down with both hands, letting her lips and teeth play around the glans.\n\nThe tip of her tongue fluttered at the frenulum and caused a tingling sensation there that went through my marrow. I enjoyed the spectacle, as did the sight of the two breasts swaying beneath her, looking so pretty like udders.\n\n\"Slow down,\" I moaned, forcing myself to relax my pelvic floor muscles. \"Or else I'm going to cum in a minute.\"\n\n\"So what?\" She smiled like a witch as she chewed on me. \"There are worse things.\"\n\nWith that, she pushed herself higher, and she wedged my pole between her two pillows, which she pressed against each other for the purpose. Together with her breastbone, they formed a soft sheath. Vanessa gasped and went lower. My glans appeared red and shiny wet at her throat.\n\n\"Are you into breast fuck?\" she wanted to know, making my device disappear.\n\n\"Not really,\" I sighed, matching her movements. \"But in this case, I'll make an exception.\"\n\n\"Oh, I feel honored.\"\n\nShe propped her chin on the chest, and on the next thrust, she kissed the head of my penis. That looked insanely horny. I bucked higher, wanting to get into her mouth, but she just laughed and released her titty hug. Instead, she took my cock in her hand and stroked herself with it. This whipped me even higher, especially as she rubbed the tip over the hard nipples, back and forth, back and forth. As she did so, she had one hand around my testicles and was stroking me like you would stroke a cat's throat.\n\n\"I'm about to cum!\", I roared chokingly as I felt the unmistakable tickle in my lower abdomen.\n\n\"Yes, cum all over me,\" she urged, \"go ahead, cum all over me, I like it.\"\n\nShe squeezed her breasts together until the aureoles pointed at me like the double barrel of a shotgun and impaled them on my rod. The nipples tickled my hairless abdomen. Back, and again. Back, and again. The tickling spread, overflowed, swelled into a tidal wave, so good...\n\n\"Rhaaahh...\"\n\nWith a roar like a rutting deer, I reared back and thrust my cock in, somehow, somewhere, into soft, yielding fullness. It jolted through me like an electric shock. I closed my eyes, half out of it, hanging helplessly in the grip of that fierce, sugary, flowing orgasm. Again and again I shot off, squirted, gushed, laughed.\n\nBeautiful!\n\nWhen I opened my eyes again, Vanessa was kneeling in front of me, decorated from chin to breasts with white-transparent smears. She winked at me with a triumphant grin and leaned forward. The warm pocket of her mouth nestled around my flagging hardness. Trembling, I poured the last, feeble spurts on her tongue.",
        "How could this be, I asked myself, half out of it. That I experienced one of the most violent explosion of my life with Vanessa, of all people? She wasn't my type at all. Was it just the alcohol? The disinhibition? Or...\n\nShe straightened up again, smacking her lips in pleasure. With both hands she rolled her wonderfully large breasts and massaged my juice into her skin. I was amazed. My previous playmates have never done anything like that, or let me do it to them. She really enjoyed it, I could read that in her face.\n\n\"You want this one now?\" she teased, holding out a wet breast to me. The last remnants of my lust fizzled out, but I couldn't resist this challenge. I licked devotedly at her, registering the taste of my semen mingling with her scent. She giggled, then sighed, took my face between her hands and kissed me hungrily. The aroma of my sperm was also on her tongue. In my current state, it almost overwhelmed me.\n\n\"Now it's your turn!\", I therefore croaked, grabbed her and threw her lengthwise onto the sofa. A flowered blouse crumpled under her and disappeared. She squealed and gigged as I came over her, but didn't resist in the least. On the contrary, she was in as much of a hurry to get rid of her jeans as I was. When the thing was finally above the ankles, the white panties hung diagonally over her thighs. Underneath, a bare mound of Venus flashed at me.\n\nShe fell silent and held still as I undressed her completely. Once she was naked, she opened her knees as wide as they could go. Her labia smiled at me. Fleshy outer lips framed an inverted V, with a distinctively shaped hood protruded. The small lips also appeared full and plump and not at all crimped. The cleft between them glistened moistly, as did the skin all around.\n\n\"That's a pretty little thing.\" I pushed myself between her thighs. \"I love it juicy.\"\n\n\"Then I have just the thing for you,\" she purred, lifting one knee to offer herself even wider to me. I moved closer and sniffed curiously. She smelled sweet and round here too, a dark aroma, with the typical essences of woman and pussy underneath. Yummy!\n\nSo I licked her. Rather cautiously at first. After all, I was just in the post-coital fatigue phase and didn't really need it. Yes, I would have loved to snuggle up to her and just fall sleep. But you just can't do something like that. Not even in a one-night stand with a woman you don't care much about.\n\n\"Oh yeah...\"\n\nMy reticence turned her on all the more. She sighed and swallowed and lolloped, her abdomen squirming before me as if it had a life of its own. I tickled her inner thighs with the tip of my tongue and nibbled around the mound of her pubic mound, but ignoring the gaping slit she held out to me with short, breathless sounds of hope. Instead, I licked her navel extensively first, digging my teeth into the tender skin above her pelvic bones. She growled like an animal and clawed her nails into my scalp, pushing me deeper.\n\nI grabbed her by the thighs and drove my tongue into her vagina without warning. She reared up and moaned throatily, her bosom bouncing and dancing. I sucked and licked and munched for all I was worth, tucking at her labia with my teeth and slurping the sweet hot secretion that ran towards me. The feverish heat from inside her burned my cheeks.\n\nLicking is what I'm really into. Soon my reservations faded and I devoted myself to my task with full fervor. This is the best way to get to know a new pussy. Slowly, I pushed back the hood and revealed an amazingly large clit. It sat between the twitching folds like a dark raspberry.\n\nVanessa threw her head back and groaned as I gently sucked her between my lips. Her movements told me she couldn't take too much direct stimulation here. So I probed further, forcing both index fingers into her opening, and stretching them, advancing, detecting wet dark folds. My tongue went in between the fingers and found ridged areas with a velvety surface. The woman tasted of pure, animal temptation.\n\nA tugging in my loins distracted me. No pain, but not pleasant either. Ah, the hardness returned, driven by the unreservedly displayed lust with which Vanessa panted and yawed under beneath me. This goaded me immensely.\n\nAgain I wondered about myself. Sure, to taste and enjoy a woman like that is always exciting. But with Vanessa it still seemed to be different from on other occasions of this kind. She gave herself to my play so unreservedly that it really enchanted me.\n\nI set down briefly and wiped my mouth, greedy for more of the same.\n\n\"Do you feel like licking me from behind?\" she took advantage of the interruption and rolled onto her stomach without waiting for my answer. \"I like that too.\"\n\n\"Be my guest, I insist!\"\n\nIntrigued, I watched as she stretched out on the edge of the sofa, one leg bent on the seat, the other knee on the floor. Thus she stretched her buttocks out in all its glorious roundness towards me. The pussy underneath gaped obscenely wide and made my blood boil even more. The dangling tube between my legs gained in volume, the pleasure mixed with a kind of sweet torment.\n\nI took my time to sit comfortably behind her and let the sight take effect on me. She emitted impatient sounds and spread her legs even further apart, which also opened her buttocks a little. Ah, the anus. A wrinkled little funnel, darker than the surrounding skin.\n\nFinally I deigned to touch her, playfully stroking the soft cheeks. She sighed and relaxed. When I pulled her buttocks apart, she just hummed in approval and tensed her sphincter. That looked like a wink. Apparently it liked me.\n\nI liked it, too. The female bottom is one of my favorite areas, no matter how it looks. A rear entrance, shy and small, has a magic of its own, an almost mystical attraction. Unfortunately, only a few of my lovers met my urge of anal exploration with enthusiasm or at least understanding. I had not expected too much from Vanessa. That she presented me her rear end so offensively, came as quite a surprise. And made me incredibly hot.\n\nA first kiss, exactly on the highest point of the right cheek. Soft. Delicate. Fragrant. I sniffed her, got her already familiar smell in my nose, in a different variation. Sweeter, more enticing. My fingers clawed at the yielding forms. She trembled under my grip.\n\nLicking. Carefully, with just the tip of my tongue. All the way up, where the curve of the last dorsal vertebra merged into the anal furrow. Smooth skin, cartilage beneath, and life. She sighed throatily.\n\nDeeper now, into the canyon. There the smell was more intense, and darker. My own arousal surged, my greed as well. I licked devotedly the insides of her buttocks, then over her thighs. Around the pussy, which spasmed involuntarily from time to time. At the back, on the underside of the vulvar lips, she had missed two or three hairs. The dark single squiggles further emphasized the nudity all around.\n\nAt last I pulled the buttocks completely apart and penetrated to the bottom of the cleft between them. She moaned when I kissed her directly on the hot rectum for the first time and held absolutely still. With pleasure I licked her, explored her, probing the closed cavity with the tip of my tongue, my cheeks pressed fully into her lush forms.\n\nFrom the beginning, her anus seemed unusually soft and relaxed to me. Not the tight ring I knew from previous experiences, but an elastic organ, malleable and supple. I intensified my kisses and let the tongue circle around it, eliciting more sounds of pleasure from Vanessa. Then I played into it, into the center that radiated warmth like a stone heated by the sun. I pushed forward, penetrated, met with willingness, not resistance.\n\nThe tip of my tongue penetrated the first ring, feeling soft skin, intense flavor. Surprised, I pushed further. This was only possible to a certain extent, but I was already deeper inside her than I had ever managed before at first go. Greedily I worked the small opening, wanted more, wanted deeper. My erection stood like a stone stele.\n\nVanessa gasped and rotated her magnificent ass in slow motion. She enjoyed it as much as I did, no doubt. I let off when I felt the first signs of fatigue in my tongue and switched to the pussy. Here I penetrated with comparative ease. Not for the first time, I desperately wished for a chameleon tongue. How I would have loved to explore her to the deepest depths, and not just the first few inches.\n\nSlurping, smacking sounds filled the air, punctuated by choppy breaths. I had forgotten everything around me, only these two waiting, yearning openings counted. Again I devoted myself to her anus, thrusting my tongue forward, teasing, enticing. Nibbling at the perineum, on the wet skin, on the labia, eyes closed, my face pressed against them, nearly melting into her.\n\nI had to have her, here and now and immediately. It was no longer a conscious decision, but an irresistible impulse straight from my rock-hard cock. Ramp up, pounce on her, grab my rod, guide.\n\n\"Yes, yes, yes...\" she panted, arching her back for me. I found the oozing opening and massaged my glans over it, plump hardness on yielding folds. Then I penetrated, very slowly.\n\nOur moans vibrated together, blended into a single note of unbridled pleasure. Millimeter by millimeter I took possession of her, conquering her hot depths. The gap between us narrowed, disappeared. I withdrew my hand, which was no longer needed. My cock, once in the right channel, found its way further in on its own. I felt the wonderfully soft buttocks snuggling on my belly and loins.\n\nAll the way in, deliciously cuddled. I clasped her by the shoulders and pressed my hips forward, drilling deeper. She gasped, and something in her stretched. Her buttocks were flattened by my belly, and I felt the hot spot of the anus directly on my skin. She felt so heavenly soft and pliable. I reveled in the union, enjoying the gloved feeling around my device, and likewise the shivering body beneath me.\n\nFinally I let go of her shoulders, half straightened, and grabbed her around the waist. A short pull back, a push, still careful. She moaned and tensed the muscles in her vagina, stroking me with them. I fucked her, slowly, watching each thrust send little tidal waves through her soft flesh. As I said, I usually go for women who built as slim built as possible, but that night this wobbling seemed incredibly hot.\n\nOnly belatedly did I notice that she had propped herself up on her elbows and was watching me over her shoulders as I served her. She smiled at me, her expression distorted with lust.\n\n\"Good to fuck me?\" she wanted to know.\n\n\"Absolutely.\" I drilled extra deep into her, and she threw her head back and swallowed. \"You, too?\"\n\n\"Yes.\" She rubbed against me and sighed. \"But I can't move that much in this position. I come best when I can set the pace myself.\"\n\n\"How then?\" I was already pulling out of her. Her pussy remained wide open even when I was no longer inside her. A fleshy, dark red cavern I could barely tear my gaze away from.\n\n\"Wait a minute - sit back down, will you? Here on the couch.\"\n\nI did her the favor. She swung herself up and over me, almost like she did in the beginning. But now she took my pint, put it on, and staked herself on it as she settled down. Her expression showed rapturous lust.\n\nShe rode me, in gentle movements, up and down. I leaned back, watching her, playing with the wriggling breasts. Now I could barely move, at least with my hips, but that didn't matter. My erection was sticking up steeply, offering her enough resistance. I was no longer in super horny mode. It was her turn. Okay for me, I guessed.\n\nThe pace increased. She was breathing fast and jerky, with her mouth open, and kept dropping right onto my piston, producing a meatily clapping. I went with it, grabbing her around the waist, fucking her from below as best I could. Her tits sprang up and down with the movement, two adorable softballs in the color of flesh. She moaned and bent over, rubbing her front against me with every movement. I was considerably taller, but in this position our cheeks were against each other.\n\n\"Can you stroke me down back there?\" she whispered urgedly. \"I... I need that now.\"\n\nSo did I. I willingly slid both hands around the lush buttocks, fingertips in the hot cleft between them. In her current position, everything lay open. I immediately found the hollow in the middle and massaged in circles. She expelled the air hissing and pushed closer to me so that I reached her even better.\n\nAlmost by itself, my fingertip slid into the miniature funnel. Did she want...? Already I pushed deeper, in small, round movements. Vanessa breathed out completely and relaxed her whole body. Also the sphincter, which immediately felt even more supple. The first finger limb was in, I felt the inner ring of muscle. It, too, was no longer resisting. Deeper, slowly. Deeper...\n\nI felt a hard shape behind a partition. My cock. Intrigued, I felt the outline of the swelling and tightened my grip.\n\n\"Oh God!\"\n\nVanessa held onto me and tilted her head back a little so she could look into my eyes. Her pupils were so dilated that I feared I was about to fall in.\n\n\"Don't move!\" she breathed, staring right through me. I froze, my finger stuck up to my knuckle in her bottom.\n\nShe swallowed hard and began the final dance. Lifted herself up, and double impaled herself, on my cock and finger. I did nothing, just offered her the frame, the counterpart. But the glow of pure lust that kept her upright scorched me as much as it did her.\n\nThe movements became larger. Outwardly only a little, but the tension in her womb increased, she worked. Her rear entrance closed and opened in the same rhythm around my finger. She did this as deliberately and purposefully as the parallel movement with her vaginal muscles. She knew what she wanted, and she had trained it, clearly.\n\nAll the while we were staring into each other's eyes, panting into each other's open mouths, and reading each other's pleasure, absorbing it, doubling it. She was hotter than me, more ready, more horny, yet we vibrated as unison as the two prongs of a tuning fork. I knew where she was, how far she was, how high she would come. Knew it inside me, without thinking, but with intuitive certainty. I slid my other hand between her legs, grasped my wet piston, her swollen flesh, rubbed.\n\nShe snapped her eyes open and sucked the air into her lungs as if to create a vacuum in the room. Her riding movements slowed, became more violent, shuddering, quivering. Fascinated, I witnessed her climb to the top, feeling the pulsing center of her pleasure between my fingers.\n\nShe came. Not with a scream or a surge. She leaned back until her body formed an arch. Then she threw her head back and her whole body went into a tremor, a shudder. It grew stronger, taking her completely, almost shaking her as she let out a thin cry and gave herself over completely to the orgasm. Her pussy and sphincter spasmed in deliciously drawn-out spurts and let go, open and closed, open and closed.\n\nI did nothing at all, I was just there, as direct and close as I could be. The waves she radiated ran through me, too, cold and hot. Directly in front of me, her breasts quivered and almost burst with lust. They looked as if they were bloated, and the nipples jutted up fantastically hard.\n\n\"Oohhh...\"\n\nShe let herself fall forward, against me, leaning as the final, indulgent thrusts ran through her. The trembling grew lighter, quieter, almost like the shivering of a fever.\n\nAround my cock she felt soft and smooth, as well as behind. Experimentally, I let my finger circle inside her rectum. She gasped and shuddered again.\n\n\"Now my back door is all open,\" she whispered against my neck. \u201eCan you feel it?\"\n\n\"I can tell.\" returned I, still quite touched by the frankness and honesty with which she had shown her lust.\n\nA lush, dark giggle that still vibrated from the ecstasy she just experienced. \"Do you want me from behind? This would be the proper moment.\"\n\n\"W-what?\"\n\n\"Well, anal I mean. After such a glorious orgasm, I'm all loose and soft, so it should be fine.\"\n\nI couldn't get a word out at first. This chance encounter was shaping up more and more to be the event of the year.\n\n\"I'd love to,\" I finally groaned. \"How do you like it best.\"\n\n\"Wait a minute... ah!\"\n\nShe braced and lifted herself off my still steel-hard rod. I helped her up. She staggered a bit, caught herself, and grinned wryly as she held her belly. Then she stepped to the narrow side of the sofa and put one knee on the side rest. So she bent forward until she was lying lengthwise on the backrest. The breasts dangled down left and right of it.\n\n\"Like this, maybe?\" she smiled at me, her face right in front of mine. I kissed her and scrambled up to get behind her. A stretched out, bent XL butt welcomed me. I seriously wondered why I had only ever been into puny, narrow versions of this delightful body part.\n\n\"It's best if you come right in. Your cock should still be wet enough.\" She rested her face on the cushion of the backrest and closed her eyes.\n\nAs if hypnotized, I took my spanking and placed it at her rear entrance, feeling her inner heat. At first with careful pressure. The tip of the glans advanced, nestled against soft flesh.\n\n\"Do you do it anal a lot?\", I wanted to know, grabbing her around the hip bones.\n\n\"I do,\" she murmured, giggling. \"It's different, but just as nice, right?\"\n\n\"True,\" I lied. In fact, I found it much more beautiful! Or was that just because this practice was not yet really familiar to me? My previous partners had shown much less enthusiasm for this variant of lovemaking than Vanessa.\n\nI increased the pressure in a controlled manner. Vanessa sighed and relaxed. My penis slid forward, halfway into the sphincter, and got stuck there. Maybe we should have used lubricant after all, but it was too late for that. Now it either worked or it didn't.\n\n\"Keep going!\", came from her. Obediently, I put more emphasis and slid deeper with a jerk. She emitted a breathless sound, and I waited a moment before pressing against her, pushing into her, grinding. Agonizingly slow, in short, stuttering thrusts, I penetrated her butthole. Tightness and heat welcomed me, but once inside, it felt a little wider.\n\n\"Yes, all the way in now!\"\n\nI did her the favor, drilling my tube deeper and deeper into her rectum. She moaned, hissing from clenched teeth, and pushed against it. Until my belly was very close to her buttocks and I was really and truly inside her by my whole length.\n\n\"That's it,\" she gasped, really tensing her anal muscles for the first time. My cock was almost crushed, but it cheered at this treatment. She felt hotter here. And so unspeakably tight.\n\n\"And now - get it for me, please.\"\n\n\"Isn't that too... rough?\", I wondered. The few of my former girls who did anal with me preferred to lie very still once I was reasonably inside.\n\n\"Don't worry about it.\" She giggled. \"My ass can take a beating. It's big enough, after all.\"\n\n\"It's super,\" I confirmed in a chest voice of conviction, stroking her.\n\n\"Actually, I still don't like you,\" she said with a serious nod. \"But sex with you is great.\"\n\n\"Actually, you're still not my type,\" I replied posthaste, then hesitated. \"On the other hand - maybe you are! If you like anal sex as much as I do...\"\n\n\"I do.\" She giggled. \"Go ahead.\"\n\nI did her the favor. Curious, I pulled the cheeks apart and marveled at how my piston was surrounded by a tight ring of skin. When I pushed forward the first time, this was pulled in with it. As I moved back, the sphincter bulged against it and clung tightly on my member. This created little friction between my cock and her mucous membranes, but her entire rectum was taken along and massaged, so to speak.\n\nA dream! I fucked this horny girl in the ass, with small, delayed movements. Her back door felt completely different from the pussy, much tighter, hotter and drier. Incredibly arousing, incredibly pleasurable.",
        "She picked up my rhythm and started rubbing her abdomen against the pad. Probably the coarse fabric scratched right over her clit, but I had no time to muse about that. Tentatively, I lay down on her back and reached for her breasts, which dangled down on either side of the backrest like fat udders.\n\nShe groaned when I squeezed the air out of her lungs, but did not object. On the contrary, she put her hands on mine and encouraged me She showed me how to stimulate her by repeatedly taking the hard nipples between two fingers and squeezing, or pulling. My loins, meanwhile, performed independent movements. Shallow nudges, more of a stirring inside her than real thrusts. It reminded me of a rode up dog ramming into its mate. The image added an animalistic note to my sensual frenzy.\n\nVanessa opened her eyes and looked at me over her shoulder. I held my gaze, not taking back any of the mad lust swirling inside me. She smiled softly, almost melancholic.\n\nI let her tits and straightened up. Thinking was difficult for me, but not acting. I clawed my hands around her buttocks like a bird of prey and fucked her in earnest. My pole drove in and out, in and out, in and out. Pure passion surged up inside me, washing aside any remnant of restraint. She just laid there, completely limp and passive, watching me. Only her pelvis tilted back and forth in time with my onslaught, she rubbed herself against the upholstery. In my mind's eye, I saw liquid oozing from her wide-open pussy onto the fabric, producing dark stains.\n\nWith a last bit of mindfulness, I pulled my strap out of her rear entrance. Her asshole gaped at me, stretched wide and red. One second later I thrusted back and in. Again with the rim of the glans through the narrowest part, excitingly tough and slow. She groaned and quivered under my wild attacks, I could hear her teeth clattering on each other.\n\nWonderful! But I wanted more, wanted further, higher! Already I was back at her buttocks and drilled me in, moaning and pushing. My cock was an iron pipe, a steel beam, a pillar of granite, my whole abdomen a startled hive, it buzzed and burned and stung and....\n\nWith a deep roar, I poured myself into her ass. I clung on her, overwhelmed by the ferocity of the spurts I was shooting. The hair on my head stood on end, and my jaw muscles felt as cramped as after downhill skiing on an icy slope. The climax had grabbed me in the neck and shook me through. The absolute peak, the unreachable end of the rainbow. The world wavered and melted before my eyes....\n\nOnly slowly did my gaze clear and I realized that Vanessa was staring at me with dilated eyes, literally sucking up my lust and moving frantically. Her butt tightened rhythmically around my flagging erection, milking out the last juice, demanding more. She had her mouth wide open, drops of sweat on her forehead, and she pressed her pussy so hard on the backrest that the sofa made a warning creak. Then she rolled her eyes upwards so that only the whites were visible, and she came a second time while I was still in her butt hole.\n\nHer anus gripped me, roughly. She wrung me out, sweetening the last gushes that passed through me, emitting short, high-pitched sounds. A kind of whimper, like a helpless bird. Together we shook and shook on the sofa back, two glowing, sweating bodies connected by a pole, a channel, and the same off-kilter lust filling us.\n\nI closed my eyes. Now I could die with peace of mind. It couldn't possibly get any better, so I thought.\n\nBut that turned out to be wrong.\n\n***\n\nAll this happened exactly three hundred and sixty-five days ago. Today we celebrate the first anniversary of our relationship.\n\nWe're still together, pattern of prey be damned. I still tend to squint at skinny girls on the street. She still calls me an arrogant idiot at times, and probably she is right about that. But in bed we go so wild that no thought of alternatives has any room. Especially anal, we're both just love it.\n\nIs bare sex enough as a basis for a partnership? Many think no. We see it differently, at least for now. Maybe that will change one day, but at the moment I want to be with Vanessa, body and soul, with no one else. We fuck like otters, and we both enjoy it, oh yes!\n\nNow I have to stop writing. She's next door, in the bedroom. She just strolled by, still naked from the shower, the bottle with oil in her hand. On her lips was that suggestive smile I love so much, and she was swaying her expansive butt back and forth provocatively.\n\nLet's see where it takes the both of us today....\n\n***\n\nTHE END\n\n(c) 2021 Dingo666"
    ],
    "authorname": "Dingo_Triplesix",
    "tags": [
        "random encounter",
        "oral",
        "vaginal",
        "friends",
        "oral sex"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/one-night-love-1"
}
{
    "title": "Learning to Let Go",
    "pages": [
        "Rebecca was looking out of the window, not concentrating on the student discussion taking place. It was the end of a long week and she wanted to get home. She was in the final stages of her PhD in mathematics and should be submitting her thesis in a few weeks. She was currently helping her supervisor with an undergraduate teaching session. \n\nWhen people met Rebecca they didn't believe she was a self-proclaimed 'maths geek'. She was in her mid twenties, stood at just over 6 ft and was strong and fit following a life time of sport. Almost in spite of her size, she was incredibly feminine. She had a naturally beautiful face, rarely wearing makeup and her shoulder-length chestnut hair was usually pinned up. She had modest B cup breasts but most people would say her best feature was her long shapely legs, she didn't wear heels that often but when she did it only emphasized their effect.\n\nWhen the teaching session ended she packed up her bag and started to head home, her flat wasn't too far from the University so she often walked, enjoying the fresh air. As she left the campus she met her friend Simon who worked in the University Finance Office. Simon was married to Rebecca's best friend and they had all met during their undergraduate degree.\n\nSimon wasted no time in trying to convince Rebecca to join him and Jules for drinks that night. \"What do you say Bex? You haven't been to the club in a while.\" The club was the rowing club they were all members of, and the bar was open most nights acting just as much as a social club as a sports one. They had rowed at University and Simon continued in the local men's squad. Rebecca occasionally filled spaces in the woman's squad but usually went out in her own single scull.\n\n\"I'm not sure that I'd be very good company, I didn't get much sleep on the plane and the jet lag is going to kick in at some point.\" Rebecca had recently presented a paper at a conference in Boston, she wasn't really interested in entering academia but really enjoyed her chosen topic.\n\n\"Ooh, hark at me, jet setting all over the world, such a hardship\", Simon teased. The truth was, she did look tired but he knew that had little to do with her recent trip.\n\nIt was coming up to a year since David died and she had been throwing herself into her PhD to try to keep a handle on things but he knew she was barely holding on. She hadn't been out with them for weeks and had barely been out on the water either.\n\n\"Please, just come for one, Jules will not forgive me if you don't and I can't spend another night on the sofa.\"\n\nRebecca smiled, \"Didn't Jules tell me you'd collapsed on the sofa after going out last week? It seems you don't need to bring me into your relationship with your furniture.\"\n\nSimon looked slightly embarrassed, \"Does Jules have to tell you all of my secrets -- no don't answer that, I don't want to know what else you know. So, are you coming?\"\n\n\"Yeah ok, let me drop my stuff off, I'll meet you there around 7 pm.\"\n\n\"Thanks, Bex, you may have saved my life\", he joked. He headed off to his bus and sent a text to his wife, Jules: She's coming, be gentle.xx\n\n+++++\n\nFor most of Rebecca's early life she was fairly lonely. Her mother had died shortly after she was born and her father was heartbroken. Throughout Rebecca's childhood he was very distant, although not intentionally so. Fatherhood had come late to him and without Rebecca's mother he seemed lost. \n\nRebecca attended boarding school from the age of five and barely saw her father, even during school holidays. When her father died when she was 12 her life changed. Her last remaining relative was the half-brother of her mother that she had never really met. He was much younger than her mother and was only 28 when he was told he was now the guardian of a 12 year old girl. James was lucky that his wife, Emma, was so understanding and the couple bonded with Rebecca almost immediately. They weren't able to have children and although they didn't meet Rebecca until she was almost grown, they treated her as a daughter instantly.\n\nOvernight Rebecca realised what she had been missing, James and Emma were warm and loving and she spent every holiday with them in the Lake District, a place that Rebecca fell in love with the first time she went there. They also introduced a tradition of going skiing at Christmas, ensuring a white Christmas every year.\n\nAt school she was not the most popular but seemed to get on with everyone. She was exceptionally clever, with a natural ability in mathematics and physics. Even at a young age she was tall and her size made her a star on a number of the sports teams but rowing and swimming were her favourites. \n\nHer father had been extremely wealthy, he had made very wise investments and had a property portfolio. Jamie and Emma received \u00a31 million a year for caring for Rebecca and Rebecca had been left the property and nearly \u00a310 million as an inheritance, which she got access to on her 18th birthday.\n\nRebecca didn't go wild when the money came through but she did make one extravagant purchase, a converted farmhouse in the Lake District, close to Jamie and Emma. Although she could have gone to any University, she chose to go to Manchester so that she wasn't far from the Lakes.\n\nJules was the first person that Rebecca met when she moved into halls and was such a force of nature that she didn't really give Rebecca a choice in whether they were friends or not. Jules was physically opposite to Rebecca, just under 5 ft tall, petite with short hair.\n\nIn fresher's week, Rebecca went to the Rowing Club induction and Jules joined her -- not because she had an interest in rowing but for the bodies of the male rowers. However once there she fell in love with the team spirit and became an outstanding coxswain, she just had a knack of shouting at people. \n\nA couple of weeks into the first term, Rebecca and Jules came back from the first rowing club social and both were a little tipsy. Jules was raving about her huge crush she had on one of the guys in the second year, Simon, and was trying to ask Rebecca who she fancied the most from the club.\n\nRebecca replied in a non-committal way, a few had caught her eye but she hadn't got round to telling Jules that she was bisexual and didn't think this was how to do it. Jules didn't let up though, \"C'mon Bex, with a body like yours you could have your pick of men, who would you have -- and it better not be Simon.\"\n\n\"Really want to know?\"\n\n\"No, I've been pleading with you for fun...\"\n\n\"Ok, but don't blame me if you freak out. Out of everyone there tonight there are three that caught my eye.\"\n\n\"Now we're talking, continue...\"\n\n\"David was nice and he's a good rower too. Ben interests me, but the best of the bunch is Jenny.\"\n\n\"Jenny? Female Jenny?\"\n\n\"Yes Jules, I'm bisexual.\" Rebecca said, almost bracing herself for confrontation.\n\n\"Cool, are you going to ask her out?\"\n\n\"That's it -- you not going to say anything else?\"\n\n\"What do you want me to say?\"\n\n\"I don't know and thanks for being awesome and everything but could you at least freak out a little, I mean I have seen you naked.\"\n\n\"Yes and aren't you the lucky one but seeing as you didn't name me on your list of possibilities I assume I am safe from your wicked intentions. So answer the question, are you going to ask Jenny out?\"\n\n\"No, I don't even know if she is that way inclined and I don't want to make things weird.\"\n\n\"But what if she was interested?\"\n\n\"Then maybe, why?\"\n\n\"No reason.\" Jules said with a small smirk on her face as she drifted off to sleep -- clearly forgetting they were in Rebecca's room. Rebecca found her keys and went to open Jules' room, then returned to carry her friend back to her room, thankful that she was as light as she looked.\n\nThe next day Jules ran up to Rebecca in the library and said, \"She is, she is.\"\n\n\"Who is, what?\"\n\n\"Jenny is interested.\"\n\n\"You asked her?\" Rebecca hissed.\n\n\"Of course not but people will tell me anything and Laura told Jo, who told me that Jenny is a lesbian and had been checking you out all night.\"\n\n\"Oh.\"\n\n\"So ask her out.\"\n\n\"Maybe.\"\n\nJules stared at her friend pointedly, picked up Rebecca's phone and said, \"No time like the present.\" Jules started typing a message and before Rebecca could stop her had sent a text to Jenny: Hey, fancy a drink later -- Duke at 6 pm?\n\nRebecca had her head in her hands and said, \"I can't believe you did that, I won't be able to go back to the club now.\"\n\n\"Nonsense, just you wait and see.\"\n\nHowever, it looked like Jules was wrong as nothing came back. Just as she was about to admit her mistake and apologise to Rebecca a reply came through nearly an hour later.\n\nSounds great, sorry for the delay, battery had died. X\n\n\"Ha -- told you!\"\n\n\"Yeah, you weren't so cocky a few minutes ago.\"\n\n\"Just building the suspense, and don't worry, I know that was meant to come out as 'Thank you Jules.'\"\n\nRebecca was waiting at the pub when Jenny arrived and Rebecca reminded herself to thank Jules later as she felt the strong pull of attraction. Jenny had really made an effort and was wearing a short skirt that showed off her legs with a strappy top. They had a few drinks and played some pool and Jenny took every opportunity to show she was interested. By the end of the night they were pressed up against a wall locked in a kiss with Rebecca's hand up Jenny's top. They pulled apart and Jenny suggested they went back to her shared house, offering slightly more privacy than the halls.\n\nOnce in her bedroom she leaped on Rebecca and pushed her backwards towards the bed. \"You are so fucking gorgeous.\"\n\n\"You're pretty hot yourself,\" Rebecca said as she peeled off Jenny's clothes. They were both quite drunk and it didn't take them long to get naked. They spent a few minutes appreciating each other's breasts before Jenny climbed on top of Rebecca and tried to get into a sixty-nine position but they didn't quite match. Realising it wasn't working, Rebecca pulled Jenny into a sitting position, so that her pussy was resting on Rebecca's face. Wasting no time, Rebecca dove her tongue into Jenny's dripping pussy, sucking the juices from her centre. In no time Jenny was panting and calling out Rebecca's name but seemed to be teetering on the edge, not quite reaching her climax.\n\nShe cried out to Rebecca, \"Ass, my ass, please.\"\n\nMoving to suck on Jenny's clit, Rebecca used her fingers to spread some of Jenny's juice around her asshole before sliding her finger in.\n\n\"Oh God, yes.\" Jenny cried, finally cumming over Rebecca's face.\n\nWhen she had recovered slightly, she climbed off Rebecca and lay down next to her, pulling her into a sloppy french kiss. Once she had regained her breath, Jenny turned her attentions to Rebecca's breasts, circling the nipples before pulling them into her mouth and gently biting them, causing Rebecca's back to arch. Jenny moved her hand down Rebecca's flat stomach, wasting no time in dipping her fingers into the wetness waiting for her. She pushed her fingers in and out while continuing to bite and lick Rebecca's breasts, drawing her closer to climax. Rebecca came as Jenny used her thumb to rub her clit.\n\nKissing again, they fell into a sleep, the drink finally catching up to them. The next morning they both had slightly sore heads, which put a dampener on the passion of the night before. Rebecca asked, while running her fingers up and down Jenny's sides, \"so, assuming we can move at some point, what would you like to do today?\"\n\n\"I was thinking you could take me shopping.\"\n\nRebecca's hand froze, \"What do you mean 'take you shopping'?\"\n\n\"C'mon, I did my research on you, I know who your Dad was.\"\n\nSitting up in disbelief, Rebecca asked quietly, \"is that why you met me yesterday, because I'm rich?\"\n\n\"No, I do think you're gorgeous as well...\"\n\n\"But that was the main reason?\"\n\nWhen Jenny didn't answer, Rebecca got up and started pulling her clothes on saying, \"you used me, no wonder you were all over me. I guess I should be thankful you were so greedy you showed your true intentions before we went any further - at least I had a good night of sex.\"\n\nJenny looked like she'd been slapped but still didn't say anything so Rebecca turned and stormed out, slamming the front door behind her.\n\nBy the time Rebecca got back to her room she was more upset than angry. She let herself into her room and threw herself on the bed. Hearing her friend return, Jules went to hear all the juicy details. Opening Rebecca's door she realised something was wrong. She locked the door behind her and went over the bed asking, \"What happened? What's the matter?\"\n\n\"She didn't want me.\" Rebecca said through her tears.\n\n\"What do you mean she didn't want you? She turned you down?\"\n\n\"No, she wanted me but not for me, she wanted my money.\"\n\n\"What? She tried to steal from your purse?\"\n\n\"No.\"\n\n\"Sorry, I'm confused.\"\n\nSitting up and facing her friend she told all, from the beginning. Jules had known that Rebecca had gone to boarding school so assumed she was well off but was shocked to hear just how much money Rebecca had. When she finished talking, Rebecca waited for Jules to say something, praying she wouldn't have the same reaction as Jenny.\n\n\"What a bitch.\"\n\nRebecca flinched and started crying again. Realising how it came out Jules reassured her, \"No babes, not you, Jenny, a complete c u next Tuesday.\"\n\nRelieved and thankful for her friend's loyalty she smiled for the first time, \"Thanks Jules\"\n\n\"Want me to go and beat her up?\"\n\n\"You? I think she might kill you.\"\n\n\"Hey, I may be small but I pack a hell of a punch.\" Pulling Rebecca into a hug she continued, \"Look she clearly has issues and you are better off without her. Like you said, at least you found out now before you got any deeper.\"\n\n\"Yeah, I suppose. Can I ask you something?\"\n\n\"Anything.\"\n\n\"How are you so cool about everything? When I told you about my sexuality you didn't blink and it's the same about my money.\"\n\n\"I like you, you're my friend, that's all I care about.\"\n\n\"Thank you.\" Rebecca said quietly as she hugged her friend again. Jules continued, \"Can I ask you something now?\"\n\n\"Ok\"\n\n\"How was the sex?\"\n\nRebecca laughed at her openness, \"Good, not amazing but we were drunk. She does have a great body though.\"\n\n\"Well that's something. I promise, next time I set you up, I'll undertake a full vetting process for any potential suitors.\"\n\n\"Thanks but no thanks, stay out of my love life for a bit please.\"\n\n\"We'll see.\"\n\nJenny tried to reconcile with Rebecca but Jules steered her off at every turn before she eventually gave up. She withdrew from the rowing club and was seen out with some recent graduates. In the meantime Jules finally went out with Simon and it was clear they were made for each other.\n\nFollowing the disaster with Jenny, Rebecca didn't date again for a few months, until just before the Easter holidays. At another club social Rebecca realised how long it had been since she'd had sex and just how horny she was. Perhaps David had noticed the change or perhaps it was just luck but he managed to get Rebecca to dance with him.\n\nDavid appealed to Rebecca because he was taller than her, which was a rarity. He had blond hair and blue eyes, with a classically handsome face. He too had a body sculpted by sport since a young age.\n\nDancing with him, Rebecca felt the sexual tension building and after a couple of songs they were both breathless. During the third song David took a chance and kissed Rebecca, who returned it greedily. At the end of the song, Jules put her arms around them both and said unnecessarily loudly, \"if you two want to carry on you may want to go somewhere a little more private.\"\n\nDavid didn't take his eyes off Rebecca and said, \"Yeah, thanks Jules. Bex, do you want to get out of here?\"\n\nBreathlessly Rebecca answered, \"Definitely.\"\n\nJules didn't see Rebecca for two days and was starting to get worried. Eventually her friend returned and Jules could see that she had nothing to be concerned about. Rebecca had a massive smile on her face and, more importantly, could barely walk. Jules once again locked them in Rebecca's room and said, \"Can I assume that you're ok.\"\n\n\"Mmmm hmmm.\"\n\n\"Please get your mind out of the gutter, I mean really ok - considering what happened with Jenny and all.\"\n\n\"Oh, yes, thanks Jules. The sex was amazing but we did also talk. He actually knew about me already but is a bit like you, it barely seemed to register.\"\n\n\"How did he know?\"\n\n\"He knows one of Jenny's housemates who'd heard everything.\"\n\n\"Oh, so he knows everything, girl sex and all.\"\n\n\"Yep and he still likes me.\" Rebecca said unable to keep the smile from her face.\n\n\"That's good, let me know if I need to bring him into line.\"\n\nAfter that Easter the four of them were inseparable. Simon and Jules got married right after graduation. Rebecca went on to do her PhD. David proposed at Rebecca's farmhouse in the Lakes and they got married a year later.\n\nWhen David was killed, their whole group was torn apart. Rebecca went back into herself so much the others felt like they had lost two friends in the hit and run accident. For the first six months they barely saw her, she spent most of the initial period in the Lake District. Jules relied on reports from James and Emma and hated that she couldn't take Rebecca's pain away. When she was in the city, she was a gracious host when they went to her flat but she rarely met them in the outside world. She did eventually return to her PhD and outwardly seemed to be returning to the real world.\n\n+++++\n\nWhen Rebecca walked into the club she saw Jules talking to some of the other members and she realised how much she had missed them all. It hurt her to spend time with Jules and Simon because they were so connected with David but at the same time she understood that the hurt from being alone was greater. She made a resolve to stay for more than one drink to catch up with them properly.\n\nThe group looked up when they heard Rebecca arrived. Jules jumped up to give Rebecca a big hug, closely followed by the other girls. Simon was at the bar and called over to Rebecca to see what she wanted.\n\n\"I'm so glad you're here Bex, I need your support against these two, they are ganging up on me.\"\n\n\"What about, it's not like you to need assistance in a debate.\"\n\n\"I know but they are taking advantage of my isolation and bullying me.\"\n\nSteph interjected, \"We are talking about Harry Potter for god's sake, I don't think you can bring bullying into it. All we are saying is that the films are better than the books\", she said with a twinkle in her eye. She knew this was a touchy subject for Jules.\n\n\"But how can you even say that, there is so much missing from the films, so many layers of character depth that just aren't portrayed -- I mean what about Peeves! He's not even in the films at all.\"\n\nRebecca let the exchange go back and forth, pleased Simon had dragged her out. He came back to the table with the drinks and raised his eyebrows at the heated discussion. \"Harry Potter?\" He asked with a chuckle.\n\n\"Yes, but I think they need to agree to disagree, before the UN needs to be called in.\"\n\n\"OK, let's leave it -- for now,\" Jules said with a meaningful stare at Steph and Amy -- \"How was Boston Bex, successful?\"\n\n\"Yes I think so. But I'm sure you've all had an update on me from Simon, what's been going on with you guys. Amy, did anything happen with the guy you were sneaking off with at Steph's birthday?\"\n\nAmy looked up and said, \"Yeah, it's nice, I've seen him a few times since then.\"\n\nSteph nearly spat her drink out, \"A few times, we've barely seen you...\"\n\nAmy kicked Steph under the table and shot a worried look to Rebecca who looked confused for a second but then realised what was going on. \"You don't have to hide happiness from me guys. Just because I've been under a rock for most of the year, doesn't mean that your lives should stop. Hopefully one of these days I'll begin to feel human again and find my old self.\" She excused herself to go to the bathroom and had to take a moment to collect her thoughts. Although she meant what she said she was a bit overwhelmed by their concern.",
        "When she got back to the table, she asked Amy about her new boyfriend again and was genuinely pleased to see how happy she was. Her face lit up when she spoke about him and in the end the rest of the group complained and asked for the subject to move on. \n\nThey ordered some food and relaxed into their usual casual conversation. Around 10 pm, Rebecca started to say her goodbyes, she was meeting David's sister Claire for brunch the next morning before heading back to the Lake District for a week or so.\n\nOnce she had left, the others were pleased to conclude that she was showing signs of returning to herself but they were worried that the anniversary of David's death would set her back again. Jules was especially concerned, \"As we all know, left to her own devices Bex would stay in the Lake District and never see anyone.\"\n\nSteph added, \"I can't even tell if she has grieved properly, she is so good at hiding her emotions. I'm just not sure that spending so much time alone is good for her.\"\n\nThe others agreed but this was a conversation that had been repeated many times over the past few months. In the end they were happy that she had joined them that evening and resolved to encourage her social instincts when she returned from the Lake District.\n\n+++++\n\nThe impending anniversary of David's death was why Claire had wanted to meet with Rebecca. She knew that Rebecca had been hiding away for most of the year and wanted to check up on her. They had got on well since the day David introduced Rebecca to his family and Claire didn't want to lose that connection. She was aware that remaining friends with Rebecca may actually hinder her emotional recovery, not least because Claire looked so much like David. There was one topic of conversation that Claire really wasn't looking forward to but knew it had to be said before she lost her nerve.\n\n\"Although I am in no way rushing you, or expecting you to do anything right away, I do want you to know that I will understand if you start dating again. I can't expect you to burn a candle for David forever.\"\n\nRebecca was stunned into silence, she wasn't expecting this conversation at all and the subject hadn't even crossed her mind. She opened her mouth to reply but didn't know what to say. Seeing her discomfort, Claire rushed to reassure her, \"Like I said, It's not like I'm anticipating anything but we, I wanted you to know that whenever you do decide to dip your toe, we will understand, love and support you.\"\n\n\"We? Are you the messenger from your parents?\"\n\nClaire looked a little embarrassed, \"Yes, sorry, we discussed it a few weeks ago and they did ask me to pass on their blessing. They would love for you to visit them but they understand why it's hard for you. Look, let's not speak of it again, you'll know when the time is right and nothing more needs to be said.\"\n\nWhen the conversation moved onto a more neutral topic, Rebecca relaxed once more and enjoyed her sister-in-law's stories about the children in her class -- a seemingly endless resource of merriment. Claire was a teacher in a primary school and she was made for the job.\n\nAfter saying her goodbye's to Claire, Rebecca headed back to the flat to finish packing for a few days in the Lakes. When in the city she lived in a two bedroom apartment that overlooked the canal. She and David had bought it shortly after their wedding. In some respects she was lucky that they had not lived there together for too long, not many of their memories were tied up there. \n\nIt sometimes felt harder for her to be at the farmhouse without him. She had moved into the spare room as her room, although much bigger and more comfortable was too significant to her relationship with David for her to enjoy staying there. And now that she was alone, it made sense for the guest bedroom to be the bigger one, for Simon and Jules to use when they visited. She had contemplated selling the house to find somewhere that didn't constantly remind her of David but she loved the place too much and didn't want to forget about David, she just wanted to stop hurting.\n\nShe talked about what Claire had said with Jaime and Emma while she was away. She was in no way ready to meet someone but she was starting to feel the isolation a bit more. It was the little things she missed the most, simple physical contact, not sex but everyday contact, like watching a film with a cuddle on the sofa. She also missed having someone to come home to. After a long talk with Emma, Rebecca concluded that she was nowhere near ready to start dating but did resolve to join in with her friends more.\n\nWhen she returned to the city she agreed to spend the week of the anniversary of David's death in Barcelona with Jules and Simon. She had come to realise that they had needed to grieve nearly as much as her and it wasn't fair to shut them out. Rebecca managed to keep it together for the first couple of days but the day of the anniversary was too much for her. She didn't come out of her room and didn't answer when Jules and Simon knocked on the door. They had anticipated this and set plans in action. Simon was dispatched to get some supplies for lunch. \n\nJules quietly let herself into Rebecca's room and found her asleep on the bed. She had obviously been crying a lot and her heart went out to her best friend. She was fully aware that none of them would ever be able to appreciate what Rebecca had been through in the past year but she was going to do what she could to help her friend. She got onto the bed next to Rebecca and pulled her into her embrace. She knew that Rebecca wasn't an overly affectionate person but also knew that hugs were magic. Rebecca didn't wake up but settled into the hug with a sigh.\n\nA few hours later, Rebecca stirred and realised that Jules was there and in her maternal mode. She extracted herself from Jules' hug and went to the bathroom. When she went back to her room Jules was looking at her with her brow furrowed, \"Morning Bex, can I get you anything? Tea, coffee, food -- another magic hug?\"\n\nRebecca smiled at her best friend and sat down next to her, \"No thanks, I'm all cried out for the moment and I don't think staying in here and moping will help. Where's Simon?\"\n\n\"Next door, he has things for lunch if you are up to it.\"\n\n\"No, it's OK, I don't want to shut either of you out, you didn't have to stay in with me today -- I would've managed.\"\n\n\"We don't want you to manage, we want you to be happy. Today was always going to be difficult for you and we had contingency plans.\"\n\nAfter lunch Jules decided to broach the subject of therapy again. Grief counselling had been suggested to Rebecca but she didn't feel comfortable talking to strangers. \"Bex, do you want to try talking about it again, maybe it will help now.\"\n\n\"I'm still not sure sitting in a room with a stranger is going to make me feel any better, even if I can bring myself to say something. \"\n\n\"Well how about this, we'll have a group therapy session, right now. You are comfortable with us and you can say as much or as little as you want, maybe we would all benefit.\"\n\n\"I wouldn't even know where to start.\"\n\nThey noted that this wasn't a no, so they were careful with the next move. Jules continued, \"Let's try this. We'll get some wine and snacks, we can each start with saying something we miss about David, small or big. And Bex honey, you're not allowed to say 'Everything', I'm taking that as a given. I want specifics. I'll start -- I miss the way he deliberately wore odd socks, because he knew it annoyed your sense of order so much -- Simon?\"\n\n\"I miss his jokes, I mean, I know I shouldn't, they were awful but I do miss them.\"\n\nJules continued, \"I miss his cups of tea, he got the strength and milk just right every time.\" She looked expectantly at Rebecca and waited. Rebecca took a deep breath and said, \"His smile, not his every day one, but my smile, the one I would see when I caught him looking at me.\" Tears were filling her eyes again and Jules handed her some tissues while she rubbed her back.\n\nThe group went silent again, and after a few minutes, so quietly the others barely heard it, Rebecca continued, \"I miss feeling loved.\"\n\n\"Babes, we love you\", Jules said, starting to cry herself.\n\n\"I know Jules, but that's not what I meant. Every day that I was with David, he did a million things to show that he loved me. Text messages when he knew I was in the library, love letters hidden in my luggage for me to find when I was away; stocking the fridge with my favourite chocolate when he knew I needed it, even though he hated chocolate in the fridge. Even when we were disagreeing there was never a point when I wasn't 100% sure that he loved me.\"\n\nAt this point Simon spoke up, \"Isn't that a positive thing though Bex, I know that it is difficult but that fact that it was so clear he loved you, doesn't that help?\"\n\n\"Sometimes, but it means I can't let go, no more than that, it means I don't want to let go. If I let go of that am I letting go of him?\"\n\n\"Of course not. Trying to find yourself again and even maybe finding someone new doesn't and won't ever mean that your love for David wasn't real or that you are betraying his love in anyway. All of those things that he did to show you that he loved you, show me that he wouldn't want you to be like this, he would want you to be happy.\"\n\nJules smiled at her husband and continued, \"You know what else I miss, Bex? You! I know that you have dealt with hell for the past year but we miss you. You seem to be a shell, you don't play music, row or cook anymore -- you're you but just not you.\"\n\n\"I've missed you guys too, I really have. I do want to get back to being me. Thank you for today. It has helped, more than I could say. I promise I'm not going to hide memories of David anymore. I can't say that I won't have my dark days and I'm sure I will be blindsided by something every now and then. But I will try to not close up when it happens.\"\n\nThat evening was the closest they had come to being a whole group again in a long time. There were more stories about David over dinner and into the evening.\n\nThe next morning, they visited Montserrat, just outside of Barcelona and treated to a breath taking view form the top of the mountain. On their way back down, Jules asked, \"Why don't you think about getting a lodger Bex, so that there is someone around the flat?\"\n\n\"Hmm, maybe. What's brought this on?\"\n\n\"Just a thought, would make me feel better knowing that someone was there with you.\"\n\n\"Checking up on me and reporting back to you?\" Rebecca asked with a smile.\n\n\"No.\" Jules answered with little conviction.\n\n+++++\n\nA few weeks later she got a message from Jules asking about lunch. Rebecca readily agreed and met her at her office. Jules launched straight into it, \"Did you think any more about a lodger?\"\n\n\"Yes, I think it could be good, why?\"\n\n\"I think I've found someone -- I haven't said anything to them yet, I wanted to check with you. There is an Australian girl moving over to work here. She'll be in a hotel for the first couple of weeks. I haven't met her yet but was thinking I could see what she's like and then if I think it will work arrange a meeting with you.\n\n\"Wow, I mean, I guess so, I just wasn't expecting it to happen so quickly.\"\n\n\"I know and that's why I wanted to talk to you, to make sure you are happy with this\"\n\n\"I think it's a good idea, and I trust your judgement. Can you tell her about David? Just so that it's in the open?\n\n\"Of course, if you want me to. I'll let you know how it goes.\"\n\n+++++\n\nJules was responsible for Sarah's induction and liked her instantly. She didn't talk about Rebecca's flat right away, wanting to make sure she'd read Sarah correctly. Sarah was 5 ft 6 and was almost a picture perfect Australian girl, one you would find on adverts. Her skin was tanned and her long hair bleached from the sun. She had piercing green eyes and a kind face. She had large breasts for her frame but carried them well.\n\nAfter a few days they went out for lunch and Jules decided to bring it up, \"How's the hotel?\"\n\n\"It's ok, but I need to find a place soon, living out of suitcases is no fun after a few days.\"\n\n\"Actually I may be able to help with that, I know someone with a spare room. Bex is my best friend, super brainy, tall and beautiful, I hate her really but hey ho. She's just finishing her PhD. I suggested she get a lodger as she's had a rough year or so and I think the company would do her good.\"\n\n\"Rough in what way, boy trouble?\"\n\n\"Of sorts, her husband was killed in a hit and run accident just over a year ago. We were all at Uni together and unsurprisingly it hit her pretty hard, she's only just starting to come back to life.\"\n\n\"How awful, are you sure she wants a loud aussie living with her.\"\n\n\"I think it would take some getting used to, for both of you, but like I said it would be good for her. I just wanted to let you know in case you find her a bit cold to start with.\"\n\n\"OK, but there's something you should know and it may change things. I'm gay -- do you think she would have an issue with that?\"\n\n\"No, not at all, I promise.\"\n\n\"How can you be so sure?\"\n\n\"She's bisexual. I mean she was married to David but before him she'd dated women, so I can't see it being an issue at all. She's not exactly thinking about dating at the moment though so perhaps be discreet with your dates.\"\n\n\"Ha, chance would be a fine thing. So what now?\"\n\n\"I told her that if I think you'll work, I'll play matchmaker and introduce you. Do you want to meet her?\"\n\n\"That'd be great, thanks Jules.\"\n\nJules debriefed Rebecca and arranged to for Sarah to call round that Friday evening. When Rebecca opened the door and saw Sarah for the first time, she was surprised to feel a little stirring in her stomach that she hadn't expected, not full on attraction but almost like a thawing was beginning.\n\nRebecca showed Sarah the room explaining that Sarah would almost have full use of the bathroom due to the en-suite in Rebecca's room. \"Usually the shower is fine but a couple of times a month I might want a bath but otherwise it's all yours.\"\n\nRebecca showed Sarah the rest of the flat and she was more than impressed. \"This place is amazing, how can you afford it, Jules said you were a student.\" She then broke off and looked in horror at Rebecca, \"Dammit have I put my foot in it already, was this paid for with life insurance money or something?\n\n\"No, don't panic. David and I bought this place shortly after we were married. I had some inheritance from my father and we wanted a place that would suit us before we started a family. It would be nice to share it with someone again. I also have a place in the Lake District near my family. I'm going there in a few weeks to try to crack my thesis finally, so if you do move in you'll have the place to yourself.\"\n\n\"That's cool and I think we can get rid of that 'if', I love your place and I feel like I've known you for years. Is it OK if I move in tomorrow, I'll go back to the hotel now to sort out my stuff and come over after breakfast?\"\n\n\"That sounds great, I'll see you then.\"\n\nWhen Sarah got back to the hotel she exhaled slowly, she hadn't realised just how much being around Rebecca had affected her. When she'd opened the door she was overawed with Rebecca's beauty. Sarah wasn't small so it was unusual to be towered over in such a way and it brought a little thrill.\n\nSarah arrived at 10 am on the dot the next morning, with a taxi full of cases and a couple of boxes. Rebecca helped her take her things into the spare room and let her unpack. Over the next few of weeks, the two got to know each other a bit more, finding that they really enjoyed each other's company. Even in the early stages of the friendship, having a lodger was exactly what Rebecca had been hoping for. Knowing that someone was going to be at the flat made it much easier to go home. \n\nRebecca had started going to the rowing club again, taking her boat out, enjoying the peacefulness she felt. One Sunday she arranged to meet Sarah for lunch after her session, suggesting they meet at the club. Having heard Jules and Simon rave about Rebecca's rowing, Sarah left early so that she could walk the towpath and watch. When she saw Rebecca it took her breath away, the power in her form was so evident and Sarah could feel the desire between her legs. Walking towards the boat house she saw Rebecca guide her boat to the bank and get out, putting the blades away. Her desire deepened as she saw Rebecca lean down and effortlessly lift the boat over her head to put on racks. It didn't help that Rebecca was wearing a one piece racing suit, that showed off her legs perfectly, and that it was rolled down to the waist revealing Rebecca's sports bra and perfect six pack. Rebecca looked up, saw Sarah, and broke into a smile, saying, \"Hey, sorry, I'll just put this away and then grab a quick shower. Won't be long.\"\n\nAs Rebecca prepared to decamp to the Lakes to polish off her thesis she found herself thinking more and more about Sarah and came to the conclusion that some time apart would do her some good. She was nearly ready to admit to herself that she was attracted to Sarah but didn't know what to do about it.\n\nWhile Rebecca was away, Sarah was consumed with thoughts of her. Although perfectly respectable she had been practically naked when she'd seen her rowing and Sarah couldn't get her out of her head. In particular the flex of her muscles as she picked up her boat made Sarah go weak at the knees.\n\nWith her thesis finished, Rebecca returned to the city. After getting it bound, she submitted the thesis and went home. She was having a celebratory lunch with Jules and Simon for the following day. As she walked back to the flat she remembered how supportive David had been of her studies, and the extravagant plans he'd promise her when she finally finished it. An overwhelming sense of loss consumed her, in a way she hadn't felt for weeks. Thinking it was also coupled with relief of finishing she hoped it would pass soon but decided to retreat to her bedroom until it did.\n\nSarah came home to what she thought was an empty flat. She had expected Rebecca to be there but assumed she was running late. She went to her room to get changed and on her way back, passing Rebecca's door she heard crying. She tapped on Rebecca's door and called out to her friend. When she didn't answer, Sarah quietly opened the door and saw Rebecca sitting on her bed, clearly having been crying for some time. \"Can I get you anything? Tea? Wine? Ice cream? Do you want me to call Jules?\"\n\n\"No no, I'll be fine, don't worry, I'll be out in a minute.\"\n\nSarah wasn't convinced but let her friend collect herself and went out to watch TV. When Rebecca joined her she didn't say anything and Sarah didn't want to pry, she assumed Rebecca had been thinking about David. \n\nWhile continuing to watch the TV Sarah kept sneaking glances at Rebecca and could see that she was still very upset. In the end, she took matters into her own hands and pulled Rebecca into a hug. Rebecca tried to pull away but Sarah wasn't having any of it, \"Look you don't have to tell me what's wrong but you can't deny that you're upset and when my friends are upset I'm going to comfort them, so just sit there and accept the hug, OK?\"\n\nRebecca gave into her friend and leaned into the hug. Sarah continued, \"Don't be afraid to ask for help. You don't need to go through whatever this is on your own.\"\n\nSarah leaned into the corner of the sofa and pulled Rebecca back with her. The taller woman settled into the embrace and tried to relax, having not been held like this in a long time. She snaked her arm around Sarah's waist and tucked her head into Sarah's shoulder. After a while her eyelids fluttered closed and she fell into a peaceful sleep. Sarah saw the tension release from her friend and fully understood how many barriers Rebecca had up during the day. Sleeping, she looked so vulnerable and Sarah wanted to protect her from any harm.",
        "A few hours later Rebecca stirred and took a minute to realise where she was. The television was showing an old movie and Sarah had pulled a blanket over them. Sensing Rebecca's movement she loosened her grip and let her friend sit up. Rebecca said, \"Thank you, I think I should go to bed, your arm must be tired, you shouldn't have let me squish you for so long.\"\n\n\"Anytime, it was nice to hold you.\"\n\n\"It was nice to be held.\"\n\n\"If you want, I can sleep in your bed tonight, hold you for a little longer.\"\n\n\"You don't need to do that.\"\n\n\"I want to, that is if you want to.\"\n\n\"That would be lovely thanks.\"\n\nThey went to their bathrooms to get ready for bed. Sarah was waiting in Rebecca's bed when she came out of the en-suite. \"Make yourself comfortable and I'll work around you.\"\n\nRebecca got into bed and lay on her side facing away from Sarah. When she was settled Sarah moved behind her and spooned her, tucking her legs into Rebecca's and resting her arm over her waist. Rebecca turned out the light and whispered, \"Goodnight Sarah.\"\n\n\"Night Bex\", Sarah said with a brief kiss on the back of her friends head. \n\nIn the early hours of the morning Rebecca woke and instantly missed the embrace of her friend. At some point in the night Sarah had rolled to her side of the bed, away from Rebecca. Rebecca moved towards her friend and reversed the position they were in at the start of the night. Sarah stirred without fully waking and when Rebecca put her arm around her waist, Sarah found her hand and locked her fingers with her friend. Rebecca tightened her grip and went back to sleep. \n\nWhen Rebecca woke again she was facing Sarah and their fingers were still locked together on one hand. Rebecca's other hand had found its way under Sarah's pyjama top and was resting on her soft skin, just under her breasts. Rebecca marvelled at the warm skin under her hand and the mild attraction she had been feeling towards her friend exploded into full longing. Maybe it was that she hadn't been touched by anyone since David had died or maybe if was the touch of a female body that she hadn't felt for years, either way she felt her heart race as she watched Sarah sleep. \n\nShe flexed her fingers across Sarah's skin and gently brushed the underside of her breast. She watched Sarah's face for any sign of a reaction but Sarah appeared to be fast asleep, telling herself that if Sarah had been awake she could have passed the initial caress as an unconscious movement. Revelling in the closeness and the smoothness of Sarah's skin, Rebecca took a deep breath and stroked Sarah's breast once more, this time her touch could not be considered accidental. Sarah's eyes remained closed but her mouth opened and a sigh escaped. This turned into a moan when Rebecca's thumb brushed over her nipple which hardened instantly and Sarah's eyes flew open. \n\nShe didn't say anything but was questioning Rebecca with her eyes. Her only other response was to squeeze Rebecca's fingers with her own. They both looked down and watched Rebecca undo the buttons on Sarah's top, exposing her toned and tanned stomach, finally allowing Rebecca to move the top to the side to give full access to Sarah's breasts. She extracted her fingers from Sarah's hand so that she could pay attention to each breast. Sarah's hand rested on Rebecca's hip and rubbed in small circles. \n\nRebecca held each breast in her hand, marvelling at their weight, she brushed her thumbs over both nipples, staring at wonder in Sarah's face. She caught each nipple in her thumb and forefinger and gave a gentle squeeze. This elicited and moan from Sarah and Rebecca repeated the action, a little firmer this time. Rebecca gently pushed Sarah onto her back and kept one hand on her breast while she slowly lowered her mouth to the other, kissing around the nipple without touching the sensitive tip. Sarah squirmed under her touch and brought her hand to Rebecca's head trying to guide her mouth the nipple. Rebecca slowly drew her tongue around the breast, eventually flicking it over the nipple. At this, Sarah let a sigh escape her. \n\nRebecca continued worshipping Sarah's breasts with her mouth, moving between the breasts. Sarah's back arched and her breath became more erratic, as her grip tightened on Rebecca's hair. Rebecca traced patterns up and down Sarah's exposed skin, slowly moving her hand closer to the waist band of her pyjama trousers. She stopped her attentions on Sarah's breasts and looked up at her face. Searching her eyes for any hesitancy she eased her hand inside Sarah's trousers brushed her fingers over her cotton briefs, delighted to feel the heat and dampness already building. Returning her mouth to Sarah's breasts she pushed her hand under Sarah's panties and stroked her swollen lips. Again Sarah was squirming, trying to force a firmer touch. Rebecca dipped her finger inside and moaned into Sarah's breast when she felt the dampness. She circled her fingers around her friends clit, teasing her in the same way she had with her breasts. She didn't tease her for too long though and was quickly working Sarah's clit with a variety of touches that surprised and delighted Sarah who could feel her orgasm building. It exploded when she felt Rebecca thrust a finger into her and she cried out, making the only sound of the morning. Rebecca didn't stop but eased her pace and softened her touch, allowing Sarah to come back to earth. She removed her hand from inside Sarah's pyjamas and with a final kiss on her breasts, rested her head on Sarah's shoulder. She wrapped her arm tightly around Sarah and listened to her heart beat begin to return to a normal tempo. Still nothing has been said. \n\nWhen Sarah had recovered her composure, she kissed the top of Rebecca's head, bringing her hand to Rebecca's chin, titling it up so that she could look at her friend. Sarah slowly brought her lips to Rebecca's and gave her a gently kiss. Rebecca smiled at her and spoke for the first time, \"Hey...\"\n\n\"Good morning - that was unexpected...\"\n\n\"Sorry, I don't know what came over me...\"\n\nSarah quickly silenced her by pressing her lips against Rebecca's, \"I said unexpected not unwelcome. It was beautiful, just like you. Are you sure this is what you want to do?\"\n\nTo answer her friend, Rebecca leaned up to kiss Sarah again. They both moaned into the kiss as it deepened, Sarah taking the lead and probing Rebecca's mouth with her tongue. Rebecca rolled onto of Sarah, pressing herself into Sarah's semi naked body. Sarah took the opportunity to run her hands over Rebecca's back, and gently squeezing her bottom, pushing their hips together. Just as she was about to move her hands inside Rebecca's t-shirt they were interrupted by the house phone ringing. Rebecca leaned over Sarah to pick it up. \n\n\"Hello?\"\n\n...\n\n\"Oh, Hi Mrs Coates, sorry I'll just get her for you\"\n\n\"Your mum\" she said as she passed the phone to Sarah. \n\n\"Hi Mom\"\n\n...\n\nSitting up sharply she said, \"What? Slow down, I can't understand you.\"\n\n...\n\n\"Oh my god, what's going to happen now? Where is he?\"\n\n...\n\n\"Tuesday, I don't think I'll be able to make it, last minute flights are too expensive\"\n\n...\n\n\"No wait, tell me...\"\n\nShe stared at the phone in disbelief. Rebecca looked up in concern and asked what was wrong. \n\n\"My dad - my dad has had a heart attack. He's on life support and they are trying to make him stable enough for an operation on Tuesday. I can't believe I won't be there. The line went dead before I could get more details.\"\n\n\"I'll pay for your flight.\"\n\n\"What, don't be crazy it'll be thousands for a last minute flight.\"\n\n\"I don't care, you need to go and be with your family.\"\n\n\"Bex it's too much, I won't ever be able to pay you back.\"\n\n\"Don't worry about it. Go and get yourself ready while I have a look at flights.\"\n\n\"But...\"\n\nRebecca planted a firm kiss on Sarah's lips and pushed her out of the bed, \"Go and get me your passport so I can look at flights.\"\n\nSarah went back to her bedroom to get her passport. When she handed it to Rebecca she tried to protest again but Rebecca rebuffed every comment. She left the room again and Rebecca heard her go into the bathroom. She reached for her laptop and had a look at flights. She managed to get Sarah onto a flight that afternoon, automatically opting for first class. She didn't realise until she'd booked that she'd have to explain to Sarah why she paid five times more for the first class option, she hadn't told her yet about her true wealth. \n\nWhen Sarah came out of her room, Rebecca told her that they would be leaving for the airport in an hour and that she had only booked a single. \"When you know when you'll be coming back I'll sort out the return flight.\"\n\n\"I still can't believe you've done this, I can't thank you enough.\"\n\n\"Don't mention it.\"\n\nSitting down next to Rebecca, Sarah pulled her hand into her lap and said, \"I'm sorry we were interrupted this morning.\"\n\n\"Maybe that was a good thing.\"\n\nSarah looked worried, \"Are you having second thoughts?\"\n\n\"No, I won't ever regret what we did but I do think we should slow down and think about things. Maybe you being on the other side of the world for a while will help. C'mon, let's get some breakfast before we go.\"\n\nOn the drive to the airport, Sarah was staring out of the window looking worried, Rebecca took her hand in hers and gave it a reassuring squeeze. \n\nWhen they got to the airport Rebecca walked Sarah through the check in process, Sarah was so distracted she didn't notice her ticket was for first class. When Sarah had to leave to go through security she was pleased but surprised that Rebecca wrapped her up in a big hug and kissed her firmly on the lips. Rebecca broke the hug and said, \"Let me know how it's going. Ring me any time, doesn't matter about the time difference.\"\n\nSarah just nodded dumbly and joined the queue for passport control. Sarah was in a daze and sat around waiting for her gate to open. So much had happened in the past few hours and she was having difficulty wrapping her head around it all. \n\nWhen Rebecca got back to town she pottered around the flat wondering what had come over her that morning. She'd felt the attraction to Sarah but when she'd woke up with her there was only one thing on her mind. Her sexuality had been the last part of her to reawaken after David's death, she hadn't even masturbated in the nearly two years she had been alone. That morning she had been wetter than she had in years and Sarah had barely touched her. In many ways, she was relieved she didn't have to face her feelings right away. She shook her head to clear her thoughts and got herself ready to meet Jules and Simon for lunch.\n\n+++++\n\nIt wasn't until Sarah boarded the plane that she realised what Rebecca had done. She finally glanced at her ticket as she stepped on the plane to see where her seat was. Sensing her confusion, a stewardess stepped forward to help her. Seeing first class on Sarah's ticket she smiled and said, \"Right this way.\"\n\nSarah said, \"There must be some mistake, I can't be in first class.\"\n\n\"There's no mistake, seat booked this morning by a Rebecca Stuart.\"\n\n\"Oh, my god, what did she do.\" While allowing herself to be steered to her seat. She had never seen so much luxury. The seat reclined into a bed and there was so much space. She sat down in a stupor and wondered how she was ever going to repay Rebecca. \n\nAfter take-off, she used the wifi to send some emails. One to her mother saying that she was on her way and asking someone to meet her at the airport, preparing to go straight to the hospital. She sent another to her manager explaining what had happened, saying she needed to take some leave and that she would know more when she got to Sydney.\n\nThe final email was the hardest, she had so many things she wanted to say to Rebecca but her head was so muddled she didn't know where to start. \n\nDear Bex,\n\nI don't know what to say, I was so grateful for you getting me a flight home at all, and then I find out you paid for first class. I can't believe you did that. I'm sitting here wondering how I will ever pay you back. \n\nI also couldn't leave without saying anything about this morning. I hope you don't think I planned for anything to happen. I really did just want to comfort you last night. When I woke up and you were touching me, it was like I was dreaming. And when I think of where things were going if the phone hadn't rung, I feel like the desire must be written all over my face for the world to see. \n\nI know you said we should think about things and I agree but let me tell you this, I've been attracted to you since the day we met. I assumed it was nothing more than a crush and that it would go no further. I hope that our friendship hasn't been ruined.\n\nI don't know what else to say except thank you again, for everything. \n\nSarah xxx\n\nSarah sent the email and turned her phone off, not wanting to torture herself waiting for a response. She decided to take advantage of the first-class seat and tried to get some sleep. \n\n+++++\n\nWhen the friends settled on the sofa Jules asked how things were going with Sarah and Rebecca. \"Jules, I don't know where to start. I mean things are going well, great actually, but I've just put her on a plan back to Australia. Her dad is seriously ill and should be having an operation on Tuesday. She couldn't afford to go home so I paid for her ticket.\"\n\n\"Oh no, poor Sarah, how's she coping?\"\n\n\"Honestly, I don't know, it all happened really fast and we were distracted enough as it was this morning.\"\n\n\"What do you mean distracted?\"\n\nRebecca repeated the events of the past 24 hours, talking fast so that she didn't stop and Jules couldn't interrupt. When she finished, she waited for her friend to say something.\n\n\"So, you made the first move, gave her an orgasm and then said you needed to think while you put her on a plane to Australia, poor girl her head must be in a spin. How are you doing?\"\n\n\"I don't know. I mean as far as I was concerned I was going to be spending the rest of my life with David. Now that's not an option there is nothing to say I'd be with a man or woman. All I know is that I like Sarah and I haven't felt this level of attraction in years.\"\n\n\"Maybe that's all you need to know for now, let things just happen.\"\n\n\"What do I do while she's away?\"\n\n\"Just be honest with her, she's got enough on her plate so just support her as much as you can, like I said her head must be all over the place.\"\n\n\"Thanks Jules.\"\n\n+++++\n\nWhen she got back to her flat she missed Sarah more than she expected. Her mere presence in the flat made it feel more like a home and Rebecca missed it immediately. She got ready for bed and checked her emails. She read the one from Sarah many times before replying:\n\nSarah,\n\nI said don't worry about the money and I meant it. You needed to be with your family and the next few days will be tiring enough without a long flight in economy class. Don't think about trying to pay me back. Just focus on your Dad. \n\nI'm the one who should be worried about ruining things this morning, I feel like I forced myself on you and took advantage of your kindness. If I made you feel uncomfortable I'm sorry. I am attracted to you too, more than I expected. But, that is for when you get back. \n\nLet me know if you need anything,\n\nBex x\n\n+++++\n\nSarah didn't check her emails when she arrived in Sydney, she was too focused on getting to the hospital to see her Dad. She sent a brief text to Rebecca saying that she had arrived safely. She was so relieved that she had made it back to see her Dad and was pleased that he had stabilised enough for him to have surgery the next day. It wasn't until after the operation had appeared to be successful was she able to relax enough to check her emails. She sent a reply to Rebecca. \n\nBex,\n\nI will be eternally grateful that you made it possible for me to be here with my family. It means the world to me. The operation seems to have gone well, we should know how well in the next few days. There will be a long road to recovery but things could've been so much worse. I think I'll stay for a couple more weeks. I'll then will be looking to come back - are you sure the return flight will be ok? I feel like you've given me so much already.\n\nI don't feel we should talk about what happened between us on email, it's too impersonal. I really want to explore where this may go but this isn't the way to do it. I do want you to know that the memories of that morning are keeping me warm at night and you are never far from my thoughts. \n\nSarah xxx\n\n+++++\n\nRebecca hadn't realised how much she had been waiting for Sarah's reply until she received it. Over the days that Sarah had been away Rebecca had decided that she wanted to see if anything developed with Sarah. She wanted to do things properly so she sent a long email to Sarah, laying everything down, her family, history and everything about David. She ended the email with: If, after all this, you are interested in seeing where this is going let me know. If I have scared you off, then I will respect your wishes and help you find a new place. \n\nTo say that Sarah was shocked when she got Rebecca's email is an understatement. It caught her off guard and she didn't reply for a few days. In the end, it was talking with her Dad who was making good progress that eased her mind. Sarah had been very lucky that her parents had accepted her sexuality immediately and even seemed to be more aware of it than Sarah when she was younger. \n\nSarah's Dad made her realise just how vulnerable Rebecca had made herself by telling Sarah everything. \"Regardless of the money love, she's had a pretty shitty life. No proper family when she was younger, until her uncle and aunt. She went to University and it seems to me was lucky that this Jules woman didn't let her shy away. To have found some kind of normality with David must have been what she had dreamed of all her life. For that to be taken away, it's no wonder she put some barriers back up. If you want to peruse something with her, you need to tread carefully, she won't release her heart lightly.\"\n\n\"You're right, I don't want to hurt her, and I'll let her take the lead. Thanks Dad.\"\n\n\"No worries, in my book she can do no wrong, flying you out here, I'll never forget it. Are you going back next week?\"\n\n\"Yeah, I'll check with Bex.\"\n\n+++++\n\nRebecca was having dinner with Jules and Simon, and told them that the ball was in Sarah's court but that she was pleased to have got things off her chest. It became clear that something was going on between Jules and Simon, they kept glancing at each other and a few times they each started to say something and then stopped themselves. Over dinner Rebecca had had enough. She put her knife and fork down and looked directly at Jules, \"What is going on? You two are freaking me out.\"\n\n\"We need to tell you something.\"\n\n\"I guessed as much but you do know that you will have to actually tell me what it is, we'll be here all night at this rate.\"\n\n\"I'm pregnant.\" Jules stated, looking worriedly at her best friend. \n\nRebecca broke out into a massive smile and said, \"That's fantastic, I didn't even know you were trying.\"\n\n\"We weren't, not really, we were just a little less careful than normal.\"\n\n\"Well I think it's the best news I've had in a long time, why were you so worried about telling me?\"\n\n\"It's just that our lives are turning out as we expected and we didn't want you to feel like we were moving on without you.\"\n\n\"Jules, honey, I would never think that. Please believe me, I couldn't be happier for you. When are you due?\"\n\n\"Early March.\"\n\n\"I can't believe it, so happy for you. How are you doing Simon, freaking out yet?\"\n\n\"A little.\" But he couldn't keep the smile from his face. \"There's something else as well Bex.\"",
        "\"What's that?\"\n\n\"We want you to be godmother, not that we want the religious trappings, we just want to recognise how much we want you to be part of the family. You'd be more like the cool aunt.\"\n\n\"I'd love to, try keeping me away.\"\n\nSimon continued, \"That's settled then.\" \n\n+++++\n\nInstead of emailing Rebecca, Sarah phoned the flat, in the evening. With the time difference, she was relying on Rebecca being awake as it was early in the morning in the U.K. On the third ring Rebecca picked up, \"Hello?\"\n\n\"Hi Bex, its Sarah, did I wake you?\"\n\n\"No, no, I've just been reading in bed. How are you? And your Dad?\"\n\n\"He's doing really well thanks Bex, I think I can come back soon. Can I send you some options for my flight?\"\n\n\"Of course, it will be nice to have you home.\"\n\n\"That's not really why I called though Bex. I wanted to thank you for your email, for your honesty and what I really want to do is ask you out - on a date. Would you like to go on a date with me?\"\n\n\"Oh Sarah, I really would.\"\n\n\"Amazing, so if I'm back in the UK next Thursday, can I pick you up at 7 pm on the Friday?\"\n\n\"Pick me up? Won't you be here?\"\n\n\"I think I should go to a hotel for a couple of days. I want the date to be special, I don't want to rush things the second I get back. Is that ok?\"\n\n\"Of course, but don't take too long, I miss you.\"\n\n\"I miss you too. Bye Bex.\"\n\n\"Bye Sarah.\" Rebecca looked at the phone in disbelief when Sarah hung up. She felt butterflies in her stomach at the thought of seeing her, touching her and kissing her again. She wasn't sure she could wait another 10 days.\n\nSarah sent her the flight options and Rebecca booked the ticket and ordered a car to collect her from the airport, emailing back the details, confirming that the ticket was once again first class. \n\n+++++\n\nCatching up with Jules the day before Sarah came back she tried to explain how she was feeling. \"It's like I'm a teenager, I don't know what to do with myself. I have no idea what I am going to wear.\"\n\n\"Do you know where you are going?\"\n\n\"No, could be anywhere which makes it even harder.\"\n\n\"I suggest your light blue jeans that look like they are spray painted on and your pink shirt. It's not too dressy but also very smart.\"\n\n\"Spray painted on huh, when were you looking so closely?\"\n\nFlushing red, Jules admitted, \"I know it's early but my hormones are crazy. I'm so horny at the moment, I'd jump you in those clothes.\"\n\n\"I don't just want her to jump me.\"\n\n\"I know but it's been so long for you, I think you need to get past that step quickly to enable anything else to develop.\"\n\n\"Maybe you're right, I've not been this nervous in a long time.\"\n\n\"You need to try to relax, otherwise you won't enjoy it.\"\n\n\"Easier said than done. Still coming for dinner on Sunday night?\"\n\n\"Of course, but feel free to cancel if you are going to be otherwise engaged...\"\n\n\"You need to get your mind out of the gutter, hormones or no.\"\n\n+++++\n\nSince the phone call there had been little communication between Sarah and Rebecca. When Sarah was back in the U.K. she texted Rebecca again to confirm their date. All day Friday, Rebecca couldn't concentrate and ended up leaving the University early to get ready. She was fully dressed and pacing the flat by 6.15. The clock seemed to have stopped. Eventually she heard a knock on the door. Rebecca walked to the door and fumbled with the lock. When she finally got the door open she saw Rebecca standing in a summer dress that hung to every curve. She was smiling at Rebecca and holding flowers. \"Hi Bex.\"\n\nRebecca just stood there, gazing at Sarah, not saying anything.\n\n\"Are you going to invite me in?\"\n\n\"Sorry, of course, come in. Sorry for staring, you look beautiful.\"\n\nSarah walked past Rebecca into the living room, giving her a fleeting kiss on the cheek as she did so. \"You look amazing as well, if a little like a startled deer. Do I scare you that much?\"\n\n\"No, but the way you make me feel does.\" Rebecca said, surprised at the honesty in her words. \n\n\"Just remember that we don't have to do anything that you don't want to.\"\n\n\"It's the things I do want to do that are scaring me.\"\n\nSarah smiled at that but didn't want to push it any further. She handed the flowers to Rebecca and said, \"These are for you, it's lovely to see you again.\"\n\nRebecca blinked and took the flowers from Sarah, taking them into the kitchen to find a vase. When she brought them back to put on the coffee table, Sarah took her hand. \"We should get going, I've booked a table at Luigi's, I hope that's ok.\"\n\n\"That sounds lovely.\" Rebecca's hand tingled from Sarah's touch and she fought the urge to drag her to the bedroom. She had really missed her friend and wanted to reconnect before getting on to anything else. \n\nSarah was confident and charming throughout the meal. Rebecca soon relaxed into her company and told her what had been happening while Sarah was away, including the news of Jules' pregnancy. During the evening, Sarah took every opportunity to ease any tension that Rebecca might be feeling. She went out to spoil Rebecca, paying for the meal and walking her back to her door. She made no move to go into the flat but took Rebecca in her arms and pulled her into her embrace. She looked into Rebecca's eyes and said, \"Thank you for a lovely evening.\"\n\nRebecca was confused, she searched Sarah's eyes for an indication of what she was thinking, \"Aren't you coming in?\"\n\n\"Do you want me to?\"\n\nTo answer her, Rebecca tightened the embrace and lowered her lips onto Sarah's, \"I want to finish what we started, what I started.\" At that, Sarah's resolve disappeared and she deepened the kiss, teasing Rebecca's lips with her tongue. \n\nFinally breaking the kiss, Rebecca smiled and continued, \"But I was thinking of continuing it inside, not in the hallway.\" She took Sarah's hand in hers and opened the flat. When the door closed, she surprised Sarah by picking her up and pinning her against the door, leaning in to continue the kiss. Sarah quickly recovered from the surprise and wrapped her legs around Rebecca's waist. \n\nRebecca released Sarah's lips and kissed down her neck, finding her pulse and trailing her tongue along Sarah's collarbone. Deciding she wanted more she pulled Sarah away from the wall and walked toward the sofa and gently lowered Sarah down onto her back and kneeled between her legs on the floor, barely breaking the kiss. When she finally looked into Sarah's eyes she could see desire and a little surprise. When Sarah had seen how nervous Rebecca had been, she had expected things to go slowly. \n\n\"We don't have to do this so fast you know.\" Sarah said. \n\n\"Do you want me to stop?\" Rebecca said pausing tracing patterns she was making on Sarah's neck with her tongue. \n\nTo answer her Sarah kissed Rebecca deeply and ran her fingers over Rebecca's breasts, teasing the nipples that were straining against her shirt. She opened the buttons to reveal her bra and continued to run her fingers over her breasts. Rebecca took this as her answer and started to undo the buttons on Sarah's dress, gently kissing each bit of exposed skin. When the dress was loose enough she pushed it off Sarah's shoulders, revealing a delicate lace bra. Tracing the patterns with her fingers she reached round and undid the clasp, pulling the bra off. She started to repeat her actions of the other morning, teasing Sarah with her tongue, barely making contact with her nipples. As she did this her hand ran up the inside of Sarah's legs and lifted the dress around her hips. She brushed her hand across the dampness and gently pushed her fingers inside Sarah's hot centre. Wanting more, Rebecca removed her hand, drawing a whimper from Sarah, and pulled her panties down. She kissed her way down Sarah's abdomen, between her legs. \n\nIn no mood to tease this time, she gently pulled apart Sarah's swollen lips and breathed in deeply, her mind spinning from the overload to her senses. With a final look into Sarah's face she dipped her head to Sarah's sex and started kissing her, using her tongue expertly, drawing a million sensations dancing around her clit. \n\nSarah could feel her orgasm build, again surprised at how quickly Rebecca could push her buttons. When Rebecca flicked her clit with her tongue she nearly jumped out of her skin and started calling out her name, over and over as the waves of her orgasm crashed into her, \"Oh Bex, Bex, Rebecca, don't stop, oh god, Rebecca.\"\n\nNot wanting to disappoint, Rebecca didn't stop but changed her approach. She thrust two fingers inside Sarah and started to gently fuck her friend. At the same time, she sucked on Sarah's clit leaving Sarah reeling all over again. She came so hard she nearly passed out but Rebecca still didn't stop. Varying her approach again, Rebecca returned to teasing Sarah's clit with her tongue and inserted a third finger into her pussy. She removed her other hand from Sarah's breast and started caressing her bottom, squeezing and dragging her nails across her slit. Scoping some juice from her pussy she traced circles around Sarah's anus. Gently probing she slowly pushed her finger up to the knuckle. Sarah's body bucked again and she came hard, pinning Rebecca's head between her legs and screaming out her name once more. Rebecca could've stayed down there longer but didn't want to overdo it, so she gently pulled her fingers from Sarah's body and with a final kiss on her pussy, kissed her way back up to Sarah's breasts and then to her mouth. Sarah returned the kiss deeply but then lay back on the sofa, panting hard. \"I think you've broken me,\" she said to Rebecca.\n\n\"Too much?\" Rebecca asked, worried that she had gone over the top.\n\nSarah shook her head and said, \"Definitely not I just need some time to recover before I repay the favour.\"\n\n\"Hush, there's no rush but we could get somewhere a little more comfortable.\" With that she carefully picked Sarah up in her arms and took her to the bedroom. She chuckled to herself as Sarah was already falling asleep. Laying Sarah down on the bed she removed Sarah's dress and got undressed herself. Pulling the duvet over the them she curled into Sarah and fell into a peaceful sleep. \n\nWhen Sarah woke, she was lying on her back, Rebecca was lying next to her, with her head propped up on her hand, and the other hand was gently tracing patterns on Sarah's skin. Seeing that Sarah was awake, Rebecca leaned over and gave her a soft kiss on the lips, \"Good morning gorgeous.\"\n\n\"Morning, what time is it?\"\n\n\"Just after 7, did you sleep well?\"\n\n\"Better than I have in ages, like I said I think you broke me. Sorry for falling asleep.\"\n\n\"It's ok, nice to know I had that kind of effect on you.\"\n\n\"I can't explain what you did to me, I've never felt that way before.\"\n\n\"Well, you're doing wonders for my ego but clearly we need some more research if you can't explain it.\" She leaned down to kiss Sarah once more, unable to hide the longing any more. She rolled on top of Sarah and pressed their bodies together, loving the feeling of their breasts pressing together. \n\nThis time Sarah was not content to let Rebecca do all the work, with surprising strength she rolled them over so that she was on top and sat up, straddling Rebecca's waist. \"Ever since I woke up with you touching me, I've wanted to explore your body. When I saw you last night it took all my strength not to take you on the floor. I've missed you so much.\"\n\n\"I've missed you too, but...\" she trailed off and looked worried. \n\n\"What's wrong, are you having second thoughts, do you want me to stop?\"\n\n\"Not at all, but I'm not sure...\" again trailing off. \n\n\"Not sure about what sweetheart?\"\n\n\"Not sure I'll know what I'm doing, touching you fulfilled a desire in me that I thought was long gone, but I haven't been touched, not even by myself since David.\"\n\n\"Oh baby, come here\", Sarah said while climbing off Rebecca. She sat up against the head board and pulled Rebecca backwards into her embrace, wrapping her arms and legs around her new lover and resting her chin on Rebecca's shoulder so she could whisper into her ear. \"I should have realised, I'm so sorry, I definitely would've paid more attention to you first.\"\n\n\"Please don't be sorry, I've been wanting to do that to you since we spent the night together, it was amazing.\"\n\n\"Well today is all about you, we can do as much or as little as you want. How about we see where this is going and you can stop me anytime you want, no questions asked.\"\n\n\"Ok, but please don't let go, being in your arms is wonderful.\"\n\n\"Don't worry, I'm not planning on going anywhere for a long time.\" Sarah tightened the embrace and started running her fingertips up and down Rebecca's side, feather touches, that made Rebecca's skin tingle and her core fill with longing. \n\nFeeling Rebecca relax a little more, Sarah released her arms and placed Rebecca's hands on the bed, giving her access to Rebecca's chest. Continuing the same feather touches, she covered Rebecca's chest and abdomen, going everywhere except her breasts. After what seemed like an age, she started to circle towards Rebecca's nipples which were hard and begging for attention. Moving Rebecca's hair to one side so that she could access her neck, Sarah returned her attention to Rebecca's breasts, simultaneously teasing her nipples while kissing her neck. Rebecca nearly came there and then, moaning deeply and gripping Sarah's legs. \n\nSarah continued massaging Rebecca's breasts and gently pulling her nipples while whispering in her ear, \"You ok?\", registering the nod of Rebecca's head, \"More?\", again a nod but a little more hesitant. Hooking her legs over Rebecca's so that she could pull them apart Sarah continued to pleasure Rebecca's breasts and kiss her neck. She eased one of her hands down Rebecca's stomach, repeating the feather touches of earlier, she circled closer and closer to Rebecca's centre, waiting to feel any hesitancy from Rebecca. When she finally touched her sex, Sarah merely let her hand cup Rebecca's mound while continuing to pay equal attention to her breasts. Again, she asked, \"More?\" And again, she felt Rebecca's nod. She dipped a finger inside Rebecca and could feel how wet she was, going as slowly as she could, Sarah found Rebecca's clit and started rubbing in small circles, getting harder but never rushed, letting Rebecca get used to the touch before increasing the pace. Sarah felt Rebecca's heart rate increase and felt her orgasm crash almost before Rebecca did. Rebecca cried out on release and sagged into Sarah's arms. Sarah continued to caress Rebecca, kissing her neck and whispering encouragement but maintaining the pressure on her clit and breasts. Once Rebecca had caught her breath, Sarah increased the tempo again and moved her other hand from Rebecca's breasts to join her other hand, easing a finger inside her friend. Rebecca raised her hips of the bed to allow more access and Sarah took this as encouragement. She added another finger and slowly fucked Rebecca while continue to whisper in her ear. Before long, Rebecca was crying out again. This time Sarah slowly withdrew her fingers and returned to hugging Rebecca, caressing her sides, letting Rebecca catch her breath. \n\nAfter a few minutes, Sarah spoke again, \"Are you alright?\"\n\n\"So much better than alright, thank you.\"\n\n\"Anytime, sweetheart.\" Sarah replied, kissing Rebecca softly on the cheek. She continued to hug Rebecca and felt Rebecca fall asleep in her arms, something she didn't think she'd ever get tired of, after a while she went back to sleep herself. \n\nShe woke up alone and panicked that Rebecca had been having second thoughts. She got up to go and look for her, finding her dressed in t-shirt and knickers, dancing and singing along to a Missy Elliot song playing on her phone. \n\nSarah laughed and Rebecca spun round with embarrassment. That turned to shock when she realised Sarah was naked. She walked towards Sarah with desire etched on her face, \"if you are going to walk around naked, I won't be responsible for my actions.\" She wrapped Sarah in her arms and kissed her so hard, Sarah's knees went weak. \n\n\"Is that meant to dissuade me? Because from where I'm standing that's a good thing. Where did you go, I was worried that you were regretting things.\"\n\n\"Never\", kissing her deeply again. \"I was just making us some tea. Did you want to get up or shall I bring it back to bed?\"\n\n\"What would you prefer?\"\n\n\"Well I was planning on coming back to bed, if that's OK with you?\"\n\n\"Sweetheart, I will never turn that down.\" Kissing Rebecca again, she left to go to the bathroom, before returning to bed. \n\nRebecca came back into the room with some tea and toast. She put these on the bedside table and got back into bed. Sarah wasted no time in pulling Rebecca back into her arms. \"Are you OK? A lot has happened in the past few hours.\"\n\n\"I couldn't be better, thank you for being so gentle with me.\"\n\n\"Anytime sweetheart. Any thoughts on what you want to do today?\"\n\n\"Rushing to get up already?\"\n\n\"Baby, I would stay here 'til the end of time if you'd let me.\"\n\n\"Well, I guess we should get your things from the hotel and then I'd like to have a date.\"\n\n\"Didn't we do that already?\"\n\n\"Are you saying you don't want to go on a date with me?\"\n\n\"Not at all, sorry, carry on.\"\n\n\"As I was saying, I would like to take you on a date of sorts. I was so tense yesterday, I could barely keep myself together. I want to spoil you, I'll cook.\"\n\n\"That sounds lovely.\"\n\nRebecca continued, \"But that's later, for now, I need to show you what happens when you walk around without clothes on...\" She rolled Sarah over onto her front and lay on top of her. Again, the power of Rebecca's body sent shoots of desire across Sarah, she realised how much she liked Rebecca being in control. She lifted her head and asked Rebecca, \"Baby, will you try something for me?\"\n\n\"Anything for you.\" Sensing Sarah wanted to move, Rebecca lifted her body. Confusion covered her face when Sarah got off the bed and started to leave the room. \"Where are you going?\"\n\n\"Just a second.\" Sarah came back with a velvet bag and gave it to Rebecca. \"Could we use this?\"\n\nRebecca opened the bag and saw a strap on dildo inside. She looked at Sarah and asked, \"Have you used this before?\"\n\n\"No, I got it back home, hoping that the situation would arise. When I watched you rowing, I knew that you would look amazing wearing something like this and I got so wet thinking about it I had to buy one before I lost my nerve.\"\n\nRebecca looked at Sarah with a desire that was almost frightening and asked, \"Are you wet now?\"\n\n\"Oh god yes.\"\n\n\"I think you should show me how turned on you are. Play with yourself while I get ready.\"\n\nFeeling a thrill hearing Rebecca tell her what to do, Sarah lay back on the bed while Rebecca stood next to her. Sarah started on her breasts, pulling on hard on her nipples, she then moved a hand between her legs and started to pinch her clit, keeping her eyes on Rebecca at all times. With the harness secure, Rebecca sat across Sarah's stomach, trapping her arm between her legs. She leant over so that her breast was above Sarah's mouth and Sarah wasted no time in attacking it, keeping her hand moving between her legs. After a couple of minutes, Rebecca sat up and pulled Sarah's hand away, leaving her squirming, and begging for release.\n\nRebecca smiled and said, \"I thought you wanted this\", bringing Sarah's hands to the plastic cock as she moved between her legs. Sarah moaned with desire as Rebecca place the tip at the entrance to her pussy, barely giving her a chance to breathe, Rebecca pushed the length into Sarah, not hard but steady. Sarah moaned again as Rebecca's hips met hers. She wrapped her legs around Rebecca and tried to pull her closer. She whispered, \"Please fuck me Rebecca, I need it, hard.\"",
        "\"Hard?\"\n\n\"Really fucking hard.\"\n\nWith that Rebecca started thrusting in and out, as hard as she could. Sarah met her thrusts as best she could but in the end she let go so that she could be used by Rebecca. With her desires being met in a way she couldn't have imagined her orgasm exploded and she felt like she was lifted of the bed with its force. Rebecca sat up still deep inside Sarah's pussy and pulled Sarah upright into her arms. She ran her hands gently over Sarah's back as she was coming back down and kissing her neck and shoulders. When Sarah had stopped shaking she looked up at Rebecca with tears in her eyes. Rebecca was worried that she had hurt her and rushed to lay her down and withdraw from her, but Sarah held on and shook her head. \"Please don't go anywhere. That was perfect.\"\n\n\"Are you sure I didn't hurt you?\"\n\n\"Not at all, just perfect, please stay just here.\" Rebecca lay on top of Sarah as requested and they both went back to sleep. Rebecca woke up to Sarah gently removing the harness from her waist. Realising Rebecca was awake she said, \"Here I was telling you that today was all about you and I managed to turn it around on me. It's simply not acceptable, so now I'm going to do what I've been dreaming about for weeks.\"\n\nShe gently pushed open Rebecca's legs and lay down, resting her head against her thigh she ran her tongue up and down her slit, tasting her. Delighting at the smell and taste of her lover, Sarah pressed her mouth closer, kissing and using her tongue to slowly fuck Rebecca. She didn't want to rush, after the pleasure that Rebecca had given her, she wanted to take her time. Ever so slowly she increased the pressure and tempo and then, feeling Rebecca urging her on, she finally latched onto her clit and sucked it into her mouth. This caused Rebecca to cry out and hold Sarah's head to her pussy as the waves crashed through her body. Sarah was prepared to continue but Rebecca pushed her away saying she was too sensitive. Rebecca pulled her back up the bed and kissed her passionately. Sarah lay her head on Rebecca's shoulder and relaxed into her strong embrace. After a while Rebecca rubbed Sarah's shoulder tenderly and said, \"Do you want to tell me what this morning was about? Are you sure you're ok?\"\n\n\"Baby it was amazing, better than I could've dreamt.\"\n\n\"You were crying.\"\n\n\"Because it was so perfect, exactly what I wanted.\"\n\n\"Are you sure?\"\n\n\"Absolutely. One of my favourite things about you is your power, your body is so strong and beautiful and you showing me that does weird and wonderful things to me. Sorry if I freaked you out.\"\n\nRebecca titled Sarah's head to hers and kissed her softly, \"It didn't freak me out, I just wanted to make sure you were ok.\"\n\nA few hours later Sarah left to collect her things and check out from the hotel while Rebecca went food shopping. Rebecca banished Sarah from the kitchen until the food was ready, so Sarah went and had a long bath. After finishing three amazing courses, Sarah said, \"How have I lived with you for so long and not known you were such a good cook?\"\n\n\"I used to cook a lot, it's one of my favourite things to do, but it is one of the things that most reminds me of David. He loved my cooking and for a long time it was too painful to cook the kind of meals I used to. That's starting to change.\" Rebecca smiled at Sarah and continued, \"Thanks to you.\"\n\n\"I'm glad but I'm not sure that my waistline will thank you.\" Sarah yawned and then covered her mouth. \"I'm so sorry, I'm not in any way bored but I think the jet lag is catching up with me. Rebecca reassured her, \"Of course, don't worry, you go off to bed and I'll come through in a minute.\" \n\n\"I can't let you clean up.\"\n\n\"Of course you can, I said I wanted to spoil you. I've fed you and now I want to let you rest. I'll shove these in the dishwasher and then come and join you.\"\n\n\"Still doesn't seem fair to you\", Sarah said sleepily, allowing Rebecca to steer her to the bedroom. When Rebecca finished in the kitchen she went into the bedroom and laughed as she saw Sarah had fallen fast asleep, fully clothed on the bed. Rebecca gently undressed Sarah and pulled the covers over her, easing herself next to her, enjoying having a warm body in her arms as she fell asleep.\n\nThe next morning, Sarah was still fast asleep and Rebecca didn't want to disturb her. She left a note in case Sarah woke up and went to get the ingredients for dinner with Jules and Simon. When she got back to the flat Sarah was still fast asleep. Thinking it wouldn't be a good idea for Sarah to sleep all day, Rebecca went to wake her. She leaned over her and kissed her on the lips, after a few seconds, Sarah kissed her back and drew her arms around Rebecca's neck. Breaking the kiss and smiling up at Rebecca, Sarah said \"Good morning.\"\n\n\"I'm not sure that 3 pm can be classed as morning, but with a kiss like that I'll let anything pass.\"\n\n\"It's 3 pm? Why did you let me sleep so late?\"\n\n\"You clearly needed it and you looked so beautiful sleeping, I didn't have the heart to wake you.\"\n\n\"I'm sorry I feel asleep last night, it was so rude.\"\n\n\"Hush, I loved sleeping with you in my arms. But you need to get up now, Jules and Simon are coming round in a couple of hours and there's things to be done.\"\n\n+++++\n\nPausing outside Rebecca's flat, Jules caught Simon by the arm, \"Can you hear something?\"\n\nCocking his head, Simon listened and then smiled, \"Old School R'n'B -- Bex is in a good mood, she hasn't played this in years. With any luck her cooking skills have come out of hibernation as well -- not that you're cooking isn't wonderful darling.\"\n\nSimon's wish came true, Rebecca treated them to an amazing meal. It was clear that Rebecca was happier than she had been in a long time. Every so often Jules or Simon would catch Rebecca staring at Sarah, when she thought no one was looking, with a smile on her face that they hadn't seen in years. Wanting to give the new couple some space, Jules and Simon made their excuses early, blaming tiredness on Jules' pregnancy. While hugging Rebecca goodbye, Jules whispered in her ear, \"Don't over think this.\"\n\nA few weeks later, Jules was talking to Simon about Rebecca one night in bed and said, \"My biggest worry is that she will be her own worst enemy, she needs to let go and enjoy it -- see where things go.\"\n\n\"Yes, but you need to let her make her own mistakes -- if she does, you can't protect her forever.\"\n\n\"I know, I hope Sarah knows what she's getting into.\"\n\n+++++\n\nIt wasn't long before Rebecca suggested Sarah meet James and Emma, inviting them to come to the City for the weekend. The first couple of days they did some shopping and went to the cinema. On Sunday they went out for a pub lunch before having to go home. James and Rebecca went off to try their luck at the quiz machine. Emma took the opportunity to move round next to Sarah and say, \"Finally, I've been trying to get you on your own all weekend.\"\n\n\"Are you going to try to scare me off?\" trying to hide the fear that's exactly what Emma wanted to do.\n\n\"Oh god, no. Quite the opposite. I'm here to thank you.\"\n\nSarah furrowed her brow in confusion, \"What for?\"\n\n\"For giving us Rebecca back, or at least steering her in the right direction. This past few days has been the closest we've been to the old Bex since David died.\"\n\n\"I'm glad, I just want her to be happy, but I am a bit worried.\"\n\n\"What about?\"\n\n\"I think she's holding herself back.\"\n\n\"In what way, she seems besotted with you.\"\n\n\"She doesn't let herself go, especially in bed. She's so focused on me, on pleasuring me, but doesn't let me do anywhere near as much for her. I think she does more for me in one night than she's let me do since we've been together.\" \n\nRealising what she'd said, Sarah was flush with embarrassment. Emma burst out laughing and said, \"Wow, that good huh?\"\n\n\"Honestly, the best I've ever had. I didn't realise she was so strong, being picked up by Rebecca turns my brain to mush.\"\n\n\"Rebecca, huh, why not Bex?\"\n\n\"Bex is my friend, Rebecca is so much more to me than that already. Don't get me wrong, she seems to enjoy what I do but doesn't let me do it very often. It doesn't help that she gets me into such a state that I fall asleep almost instantly -- I think it's my body's way of recovering.\"\n\n\"Well, well, well, I'm not sure I'll be able to look at Bex in the same way every again.\"\n\n\"I can't believe I've said all of this to you. You're effectively her mother.\"\n\n\"Don't beat yourself up, not many can resist my charms. And I don't think you should worry too much about Bex. Just give her some time. Knowing her, she'll be triple thinking everything, you'll know when she lets go.\"\n\n\"Thank you\", Sarah said and despite the embarrassment, she did feel better.\n\n+++++\n\nA few months later Jules and Sarah were having lunch. Jules asked, \"What are you doing for Christmas, going skiing with Bex, James and Emma?\"\n\nSarah shook her head, \"Rebecca has paid for me to go home for Christmas, I'm so excited. I just wish she was coming with me. But she said summer at Christmas is wrong and she needs snow.\"\n\n\"What is home like, where you are from?\"\n\n\"Miles and miles of farmland -- a whole lot of flat as far as you can see.\"\n\n\"Wow, pretty different to here then and the Lake District must have blown your mind.\"\n\n\"I wouldn't know, I haven't been\".\n\n\"You haven't been to the Lakes yet? Why not?\"\n\n\"Timings haven't been right I guess\", Sarah said, trying to hide the disappointment she felt. Realising that Jules would've expected her to have been to the Lakes, confirmed the suspicions she had -- that Rebecca had been avoiding taking her there. She had asked Rebecca a couple of times about going to the farmhouse but Rebecca had changed the subject. Sensing Jules' surprise confirmed her deepest insecurities. Rebecca was holding herself back from Sarah. Sarah remembered Emma's advice about giving Rebecca time, but she didn't know how long she could wait.\n\nThe morning before she was due to fly home for Christmas, Sarah woke up to her favourite sight, Rebecca asleep in her arms. Thoughts of distance between them were pushed to the back of her mind and in that instant, she knew that she loved Rebecca and would wait for her forever. Believing Rebecca to be asleep, she whispered softly in her ear, \"I love you\". Relieved to have said it, even though she thought Rebecca hadn't heard it, Sarah closed her eyes and drifted back to sleep.\n\nSarah was mistaken, Rebecca was awake and her heart skipped a beat when she heard Sarah whisper those words. She opened her mouth to return the phrase but found she couldn't. Once again, her brain was thinking too quickly. Before she could listen to her heart she felt a wave of guilt wash over her. Does admitting her love for Sarah remove the last link she had to David? Worse, did it mean she hadn't loved him as much as she thought, or at all? Sensing that Sarah had gone back to sleep, Rebecca was relieved she didn't have to address those feelings quite yet. Rebecca tried to relax into Sarah's arms to go back to sleep.\n\nThe next time Sarah woke she was treated to her other favourite sight, Rebecca between her legs, worshipping her sex with her tongue. The feeling of love she had acknowledged to herself earlier, deepened and her orgasm exploded through her body. Rebecca looked up smiling, saying, \"Morning gorgeous. Sorry, I couldn't help myself.\"\n\n\"You never need to apologise for that, but come here, I want to kiss you.\" \n\nKissing Sarah deeply, Rebecca said, \"I'm going to miss you so much.\"\n\n\"Me too. How do I know you won't chase after some ski bunny while I am sweating my ass off?\"\n\n\"You are all I think about, you have nothing to worry about.\"\n\n\"I just wish you were coming with me.\"\n\n\"Well, I have a few surprises up my sleeve to keep you thinking of me while we're apart.\"\n\n\"Oh baby, I'm always thinking of you,\" Sarah said, kissing Rebecca deeply.\n\n\"You can have one of the surprises now if you want.\"\n\n\"OK.\"\n\nRebecca reached under the bed and pulled out a box, wrapped in gold paper. She handed it to Sarah and said, \"Open it.\"\n\nSarah unwrapped the present and lifted the lid on the box. Her eyes widened when she saw what was inside. She reached in and pulled out some leather wrist cuffs, a butt plug and a double ended dildo with a harness. She looked up at Rebecca, the desire clear on her face. Rebecca held Sarah's gaze and said, \"I know that you like it when I take control, so here's what I was thinking. I'm going to put these,\" picking up the wrist cuffs, \"around your wrists like this,\" slowly fastening them to Sarah's wrists. When the buckles were done up Sarah looked down at her hands and then back up to Rebecca, the longing in her eyes making it hard for Rebecca to keep the slow, tantalising pace. \n\nShe continued in a low voice, \"Then I'm going to attach these here,\" pulling up Sarah's arms and clipping the cuffs together, before pulling out a strap she had hidden under the pillows, securing Sarah's arms above her head. Rebecca stood up on the bed, seeing Sarah's breath catch at the show of power. \"Then, I'm going to put this on,\" sliding one end of the dildo into her dripping pussy and pulling the harness over her hips, watching the desire deepen on Sarah's face as she tightened the straps. \n\nLaying down between Sarah's legs, Rebecca teased her clit with her tongue, while using Sarah's juices as lube to open her rose bud, delighting in the moans from Sarah. Picking up the butt plug, and covering it with lube, Rebecca gently pressed it against her opening and allowed her to adjust to the sensation. When Sarah started squirming underneath her, Rebecca pushed the plug a little harder. When it was all the way in, Sarah was covered in sweat and panting underneath her.\n\nKneeling between Sarah's legs so that the tip of the dildo was resting against her entrance. Rebecca leaned forward and placed her hands either side of Sarah's head, looking into her eyes she asked, \"Do you want me to carry on?\" Sarah nodded.\n\nRebecca slowly pushed the dildo into Sarah, allowing her to adjust to having both holes filled. When their hips were touching and Rebecca was into the hilt, Rebecca looked into Sarah's eyes and asked her the same questions she had asked her a few months ago, \"OK?\"\n\n\"Yes.\"\n\n\"More?\"\n\n\"Yes please.\"\n\nRebecca started thrusting slowly, pulling almost all the way out before driving back into Sarah. Sarah was already pulling against her restraints, not wanting the sensations to stop. She wrapped her legs around Rebecca, urging her on, shouting, \"Harder, please, Rebecca, harder.\"\n\nRebecca knelt up and sat back on her heels, pulling Sarah's legs over her shoulders so that she could thrust deeper and faster. The increased tempo brought both of their orgasms closer and it wasn't long before Sarah's body was in spasm under Rebecca who was trying to hold on while calling out Sarah's name as wave after wave of her own release crashed over her.\n\nRebecca slowed her thrusts to a stop but stayed inside Sarah. She laid on top of Sarah and kissed her deeply while reaching up to remove the strap holding Sarah's arms above her head. Immediately, Sarah brought her hands, still joined at the wrist, around Rebecca's neck, pulling her harder into the kiss. After a few minutes, Rebecca broke the kiss and looked into Sarah's eyes, asking, \"Too much?\"\n\n\"Definitely not, amazing.\"\n\n\"More?\"\n\nSarah's eyes widened in shock and lust again and she tightened her arms around Rebecca's neck while slowly nodding, unsure about what the more could mean. Wrapping Sarah's legs around her waist, Rebecca stood up and got off the bed. Knowing that being picked up by Rebecca did amazing things to Sarah's brain she wasn't surprised when Sarah shoved her tongue down Rebecca's throat. Rebecca returned the kiss and chuckled when Sarah's breath caught and she let out a moan of longing when Rebecca pushed her up against the wall, all without pulling the dildo from Sarah.\n\nHolding Sarah's bottom, Rebecca began thrusting again, increasing the pace. Knowing she wouldn't be able to hold this position for too long, Rebecca needed to tip Sarah over the edge. Rebecca under Sarah and started manipulating the butt plug, alternating between turning it and slowly pulling it in and out. Sarah lost all control at this and came harder than she ever had before, Rebecca could feel her juices running down their legs. Once Sarah had started to breath normally again, Rebecca wanted to move before dropping her. Rebecca walked backwards until she could feel the bed behind her legs, she turned and lowered Sarah to the bed. Rebecca eased the dildo from Sarah's pussy and gently removed the butt plug. Taking off the harness and the other end of the dildo from herself, Rebecca joined Sarah on the bed and gently undid the wrist cuffs, rubbing Sarah's hands and arms. Wrapping her up in her arms and dropping lots of feather kisses on Sarah's face, Rebecca finally asked, \"Still worried about me running off with a ski bunny?\"\n\nSarah shook her head and smiled, saying, \"No but I am worried I won't be able to walk again.\"\n\nRebecca smiled, kissing her deeply, \"Like I said, I wanted to make sure you don't forget about me.\"\n\n\"Trust me, after that, I'll forget my name before I forget about you.\" Settling into each other's arms they both drifted off to sleep.\n\nRebecca woke Sarah up a little later to get ready to take Sarah to the airport for her flight. Sarah looked at Rebecca and felt the love fill her heart. She contemplated telling Rebecca that she loved her, but wasn't sure of the response and didn't want to spoil the memory of the morning.\n\nAt the airport, Sarah didn't want to let Rebecca go. Rebecca kissed her deeply and said, \"See you in a couple of weeks. Text me when you land. I'll be on my way to Colorado but will call when I can.\"\n\n\"Ok, bye baby.\"\n\n\"Bye sweetheart.\"\n\nShe called into see Jules and Simon before she went home. Simon was decorating the baby's room and Jules didn't waste any time asking Rebecca what she had wanted to since talking with Sarah in the pub. \"Why haven't you taken Sarah to the Lakes?\"\n\n\"I can't Jules, so much of David is there -- what about all of the photos and the cinema room for god's sake, two walls have giant canvas prints of our wedding day. It would look like he is still more important to me than she is.\"\n\n\"And is he?\"\n\n\"No, well yes, but in a different way.\" Rebecca put her head in her hands, she looked up at Jules and said, \"She said she loved me this morning, when she thought I was asleep. I wanted to say it back but...\"\n\n\"But you let that big brain of yours take over. What was your instant gut reaction, from your heart?\"\n\n\"To say it back.\"\n\n\"So, why didn't you?\"\n\n\"I didn't expect to love anyone other than David. Does loving Sarah mean I didn't really love him?\"\n\n\"Bex, honey, of course not. I'm sure Sarah knows that David will always have a special place in your heart, but holding yourself back like this will only hurt you both.\"\n\n\"Do you think she will have me?\"\n\n\"I think she'd swim back from Australia to be with you.\"\n\n\"Thanks Jules, I promise I'll think about it.\"\n\nRebecca drove to the Lake District and walked around the house looking at everything that reminded her of David. The first thing she did was move her things back into the master bedroom, moving the picture of David to the hallway, replacing it with one of Sarah. She laid in the bed and thought about what Jules had said. When she woke up the next morning, she knew what she wanted to do.\n\nThe two long walls had four large canvas prints taken from their wedding day. Rebecca took them down from the wall and carefully wrapped them, putting each in the car. She tidied up a few more things in the house then got back on the road. When she had signal again, she called to rearrange her flights. She had one more thing she wanted to do before going to the airport.",
        "Rebecca pulled up to the house she knew so well but hadn't been too in years. Nervously, she rang the doorbell and waited a few minutes for it to be answered. The man that answered the door was a spitting image of David, albeit with more grey hair. Graham, David's dad broke into a smile and pulled Rebecca into a hug, \"Rebecca my dear, how wonderful to see you. Come in, come in. Diane, come here, you'll never guess who was at the door.\" David's mother came in and wrapped Rebecca in a big hug. \"You've stayed away too long Rebecca.\"\n\n\"Sorry, I really am, it's just...\"\n\n\"We know it's hard and why you did it. It's just so nice to see you, you are looking well.\"\n\nAfter a few minutes catching up, Rebecca said, \"The reason I came is to tell you something. I've met someone.\"\n\n\"That's fantastic, we couldn't bear to think of you being alone. What's his name?\"\n\n\"It's a she, Sarah. She's Australian.\"\n\n\"Well that's lovely, it's nice to see you smile again.\"\n\n\"Thank you. The thing is, I think I've been holding back. I didn't want to let go of David's memory.\"\n\n\"Of course not, dear, but you deserve to be happy.\"\n\n\"Thank you. I actually have something for you in the car.\" Rebecca retrieved the canvas prints and unwrapped them. \"We had these at the house and it was one of the things that stopped me from taking Sarah there. I have kept smaller versions of the photos but I wanted you to have these.\"\n\n\"Thank you Rebecca, they are beautiful.\"\n\n\"No problem, I'd better go back to James and Emma's we're flying out early tomorrow.\"\n\n\"Of course dear, have a good trip. Don't be a stranger. Perhaps we could meet Sarah sometime.\"\n\n\"I'd like that. Happy Christmas\"\n\n\"Happy Christmas petal.\" With another round of hugs and more than a few tears, Rebecca got back in the car to drive back.\n\nRebecca was picking at her dinner and wasn't paying attention to the conversation. Sensing what was wrong, Emma spoke up, \"Bex honey, have I ever told you what happened when James first met my folks?\"\n\n\"No I don't think so, why what happened?\"\n\n\"We'd been on a few dates and I was falling for him hard but was too scared to admit it, even to myself. Anyway it was the Christmas holidays and I was at home for a couple of weeks. My folks and I had been out for the day and do you know what we saw when we got home?\"\n\n\"What?\"\n\n\"Simon, sitting on the doorstep. He'd driven up to declare his love for me. Obviously after that Mum was putty in his hands and I could tell Dad was impressed as well. The rest, they say is history.\"\n\n\"Wow, who knew James was such a romantic. Why did you tell me?\"\n\n\"Just passing the time dear. We should probably go to bed, need to be on the road by 10 tomorrow. Night Rebecca.\"\n\n\"Night Em, see you tomorrow.\"\n\nRebecca tossed and turned all night, finally making her decision. She left the house as quietly as she could to drive to the airport, hoping she was doing the right thing. As she was leaving, James saw her out of the window. \"Em, do you know where Bex is going?\"\n\n\"Huh, oh it's fine, she's just stealing your move.\"\n\n+++++\n\nGood morning passengers, we are now making our final descent into Sydney.\n\nRebecca couldn't contain her nerves as she collected her hire car and navigated out of the airport. It took her a few hours to drive to Sarah's town, finding her parent's farm from the stories Sarah had told her. Rebecca wasn't sure if she was upset of relieved to find that no one was home but then she remembered it was Christmas Eve and that Sarah and her parents always went to a neighbour's party. Rebecca sat down on the bench on the veranda to wait for them to return.\n\nSarah had been distracted since she had got home. She hadn't heard from Rebecca since she left her at the airport and she was really worried that the time apart had pulled Rebecca even further away from her. Sarah was desperately hoping she was wrong but could feel her heart threatening to break.\n\nThe family were driving back to their farm after the Christmas party and Sarah's Dad was trying to cheer her up. \"She'll call love, I know she will, maybe she doesn't have much signal while she's travelling. It's Christmas day tomorrow, I'm sure she'll call then.\" Sarah really wanted to believe her dad but wasn't convinced.\n\nAs they pulled up to the house, Sarah's Dad noticed the hire car. He swept his eyes over the veranda and spotted a sleeping form that looked a lot like the photos Sarah had shown him of Rebecca. Realising Sarah hadn't noticed he couldn't resist teasing her. \"Then again, what do I know, maybe you're right, maybe she won't call.\"\n\nWith tears in her eyes, Sarah's heart sank, she had been holding onto her Dad's words, \"Why not?\"\n\n\"It would be a bit bloody pointless seeing as she's sleeping on the veranda.\"\n\nSarah's head jerked up and she finally saw Rebecca. She leapt out of the car before it had fully stopped moving and ran towards the house. Sarah's dad turned to his wife and said, \"Fancy a Christmas Eve drive dear?\". Smiling as they turned the car around.\n\nRebecca was so tired that she didn't hear Sarah as she ran up. She only woke when Sarah kissed her. She broke from the kiss and sat up sleepily, \"Hey...\"\n\n\"Hi, I can't believe you're here.\"\n\n\"I changed my flights. I realised Christmas without snow is not as wrong as Christmas without you.\" Sarah kissed Rebecca again, as Rebecca continued, \"I also came because I had something to say...\"\n\n\"Oh yeah?\"\n\n\"Yeah, I love you too.\" Sarah smiled and cried, wrapping her arms around Rebecca saying, \"You heard me say that?\"\n\n\"Yes, and I'm sorry I didn't say it at the time. I have been holding back but I don't want to anymore. I will always love David, but I know that loving you doesn't detract from that, in fact my love for him makes my love you for stronger. I wouldn't be who I am if I hadn't loved him first. I love you Sarah.\"\n\n\"I love you too Rebecca. I just can't believe you're here, it's the best Christmas present I could ask for.\"\n\nStanding up they kissed each other deeply and their hands were everywhere trying to find the gaps in their clothing. After a few minutes, Rebecca stopped and scooping Sarah into her arms, said, \"Which way?\" Sarah unlocked the front door and directed Rebecca to her bedroom, marvelling at being in Rebecca's arms again and nuzzling her neck.\n\nWhen they got to bedroom, Rebecca lowered Sarah to the floor and pulled her in for a passionate kiss. Pulling apart, Rebecca looked Sarah in the eyes and said, \"I love you, I want to show you how much, and make up for being so distant. But first I want to show you how much I've missed you.\" Kissing Sarah hard again they both couldn't move fast enough, taking off each other's clothes and touching every bit of exposed skin. Laying Sarah on the bed, Rebecca kissed her and then trailed kisses along her jaw, down her neck and spent a long time on her breasts. Sensing Sarah wanted more, Rebecca moved down Sarah's body, settling in between her legs, gently nipping at her thighs. Rebecca licked up the length of her pussy, then used her tongue to delve in and out, teasing her clit with her fingers, using her other hand to massage her nipples. Sarah felt her orgasm consume her. When she finally came back to earth, she pulled Rebecca up to her so that she could kiss her again, saying, \"You need to stop being so selfless you know, let me love you back.\"\n\n\"But I really like making you come, and I've always been much more of a giver.\"\n\n\"I know baby, and I'm not complaining but seeing as you are so rubbish are letting go...\"\n\n\"Hey!\"\n\n\"Let me finish, seeing as you are not very good at it, you'll just need loads of practice.\" With a wink, Sarah rolled on top of Rebecca and pressed their bodies together. She said, \"What I think is that really all you need to do is relax, so I want you to turn onto your stomach so that I can give you a massage. After all, you've had a long flight.\"\n\nSarah went off to find some baby oil from her drawer, while Rebecca turned over and settled on a pillow. Sarah warmed the oil in her hands and started at Rebecca's feet, gently massaging each sole before working her way up Rebecca's legs. Sarah didn't go further than the join between Rebecca's thighs and bottom, even resisting when Rebecca spread her legs and raised her hips of the bed. She leaned down to Rebecca's ear and said, \"Patience sweetheart, good things come to those wait.\" Straddling Rebecca's hips, resting on her upturned bottom, she resumed the massage, working the light knots from Rebecca's shoulders, working down the arms and along each finger. Returning to Rebecca's back, Sarah worked her hands lower, while shuffling down to straddle Rebecca's legs, leaving room for her hands to massage Rebecca's cheeks. Adding more oil to her hands, Sarah spent a long time varying her touch while slowly moving her hands closer to Rebecca's pussy, feeling the heat. After what felt like an eternity to Rebecca, Sarah dipped her fingers inside. \n\nSarah lifted herself up so that she could kneel in between Rebecca's legs, spreading them. Sarah continued to dip her fingers into Rebecca. Sliding two fingers into Rebecca while using her thumb to rub on her clit. She once again asked Rebecca, \"More?\", taking Rebecca's moan as a positive response, Sarah moved Rebecca's hands to her bottom and said, \"Hold yourself open for me baby.\" Then she leant over and flicked her tongue over Rebecca's rosebud, feeling Rebecca's hips buck underneath her. Sarah continued her assault on Rebecca's pussy while probing Rebecca's other hole with her tongue, increasing the pace she didn't let up until Rebecca was crying out and Sarah could feel her insides clenching around her fingers and tongue. As Rebecca came back down, Sarah removed her hands and placed a gentle kiss on each butt cheek before lying down next to Rebecca and pulling her into her arms. Smiling as she saw Rebecca struggle to keep her eyes open, she kissed her on the forehead and pulled the blanket over them, whispering, \"Sleep well sweetheart.\"\n\nThe next morning, Rebecca woke up while Sarah was still sleeping deeply. Realising she hadn't brought her things in from the car, Rebecca pulled on her jeans and t-shirt and went in search of the bathroom. Leaving the bathroom, she walked straight into Sarah's Dad. He recovered first, \"Hi, you must be Rebecca, I'm Stu, Sarah's Dad. It's lovely to finally meet you.\"\n\n\"Hello Mr Coates, yes, sorry, lovely to meet you too. Sorry I didn't introduce myself properly yesterday.\"\n\n\"Call me Stu, I won't have anything else. And don't give yesterday another thought, you and Sarah had other things on your minds. Come through and meet Mary.\"\n\nChatting with Sarah's parents over tea, Rebecca instantly liked them. Sarah was like her Dad in so many ways. Realising Sarah's confidence in her sexuality was in large part down to them Rebecca said, \"Sarah is very lucky to have such supportive parents, not many would be so accepting of her bringing home a girlfriend.\"\n\n\"All we care about is whether she is happy. And apart from the past couple of days where she's been moping like a lovesick teenager, she has never been happier than with you.\"\n\n\"Thank you for that but I am wondering if your acceptance goes any further?\"\n\nThey both looked at her in confusion, so Rebecca continued, \"What would you think about her marrying a woman?\"\n\nMary squealed in delight, instantly crying and Stu said, \"Nothing would make us happier. Have you asked her yet?\"\n\n\"Not yet, I think I need to let her get over the shock of me being here.\"\n\nThey trio carried on chatting, Rebecca telling them about the Lake District. Sarah woke up in an empty bed and heard voices. Pulling on some clothes she went into the living room just as Rebecca was saying, \"It's an amazing place, my own little slice of heaven. You will have to come and visit sometime.\"\n\nSarah walked over to where Rebecca was sitting and slid onto her lap, giving her a deep kiss, \"What's that sweetheart?\"\n\n\"I was just saying that your parents should come and visit the Lake District when your Dad is well enough to fly. That is, after you have been there a few hundred times, of course.\"\n\nKissing Rebecca again, Sarah said, \"That sounds lovely.\"\n\nMary, with a love in her eyes at her daughter's happiness, suddenly clapped her hands, \"Oh Lord, it's Christmas Day, I'd completely forgotten. Time for presents, Rebecca, love, sorry there isn't anything for you.\"\n\n\"Don't worry, I've got all I could want, right here.\" Giving Sarah a squeeze.\n\nMary nearly cried again and looked accusingly at Stu, \"Why don't you say things like that to me anymore?\"\n\nStu looked at Rebecca in mock anger, \"Give a guy a break hon.\"\n\n\"Sorry.\" Rebecca said, smiling at the genuine love the family had for each other. Sarah turned Rebecca's face to hers and said, \"You don't need to say sorry baby, you can say things like that as much as you like.\"\n\nMary took charge again, \"Ok lazy bones, let's restart the day. Those that want showers, get them. Christmas Day Take 2 begins in half an hour.\" Then seeing the way Sarah and Rebecca were looking at each other, \"Stu, your doctor said you should start walking for exercise. No time like the present, I can think of a loop that will take about a hour. Did you hear that Sarah, an hour, but no more!\"\n\n\"Yes Mom\", Sarah said as she pulled Rebecca back to the bedroom.\n\n\"I really do need a shower.\" Rebecca said as Sarah pulled her onto the bed.\n\n\"I know sweetheart, but you can't fly here, tell me you love me, take me to heaven and back and then not be here when I wake up. For a few minutes, I thought I'd dreamt the whole thing.\"\n\n\"Sorry darling. Do you want to try again, Take 2 as your Mum said?\" Sarah looked at her quizzically, so Rebecca continued, \"Get undressed and back into bed, pretend to be asleep.\" Looking at Rebecca like she was crazy, Sarah did as she suggested, while Rebecca did the same. Rebecca placed one arm under Sarah's neck and cupping her breast, she spooned into her, resting other hand over Sarah's sex. Rebecca felt Sarah shiver with anticipation when she whispered in her ear, \"Now, I think it should have gone something like this...\" \n\nRebecca kissed Sarah's neck and whispered again, \"Good morning my love, Happy Christmas.\" Before Sarah could respond, Rebecca gently pinched one of her nipples and pushed apart her swollen lips, giving her access to her slit that was already drenched in her juices. Finding her clit and circling it before flicking it in a way that drove Sarah crazy, Rebecca continued to tease Sarah's breasts and nibble and kiss Sarah's neck and ear lobe. Sensing Sarah was close, Rebecca whispered again in Sarah's ear, \"I love you Sarah.\" This tipped Sarah over the edge and she felt the pleasure spread out from her core. Although it wasn't the most powerful orgasm Rebecca had given her, it was easily her favourite. A few minutes later, Sarah turned to face Rebecca and said, \"That's the kind of wakeup call I could get used to. I love you Rebecca.\"\n\n\"I love you to darling, but I really do need to shower now. I don't want to get in trouble with your Mum the day I met her. Care to join me? It is the middle of summer after all, need to save water.\" Sarah smiled and took Rebecca's hand. \n\nIn the shower, Sarah lovingly washed Rebecca's hair and body, washing away the air miles. Sarah knelt on the floor and nudged open Rebecca's legs, allowing her access to her delicate centre. Smiling up at her girlfriend, she brought Rebecca to a fierce orgasm with her mouth, holding Rebecca up as she came so she didn't fall over. Sarah stood up and kissed Rebecca, saying, \"I love you.\" They dried off and got dressed to re-join Sarah's parents who had just come back from their walk. Rebecca had collected a few boxes from her luggage and dropped them under the tree.\n\n\"What are those?\", Sarah asked.\n\n\"Just a little something I picked up in Duty Free\". Rebecca replied, she then leaned in closed to Sarah and whispered, \"Of course, I had to leave some of your presents at home. I didn't think it was appropriate to bring them to your parents' house, but I have so much more to give you.\" Chuckling as Sarah flushed as it dawned on her what Rebecca meant. \n\nSarah and her parents opened their presents, including the last-minute additions from Rebecca. For Stu, Rebecca had picked a new camera. When he opened it, Rebecca said, \"You can use it when you come to visit us.\"\n\nFor Mary, Rebecca had selected a beautiful silk scarf and brooch of a rose. But everyone was overawed when they saw the present that Sarah got, a gorgeous full length silk dress and platinum watch studded with diamonds. Leaning into kiss Rebecca, Sarah said, \"Thank you, it's beautiful. I can't wait to wear it for you.\" She lowered her voice and continued, \"and I really can't wait to take it off for you.\"\n\n\"You're welcome my love.\"\n\nThey spent the next few days visiting Sarah's extended family and friends. Everyone made Rebecca feel like part of the family the minute she walked in the door. On New Year's Eve, Sarah suggested that she drive to watch the sunset. Sarah drove to a creek at the edge of their land and dug out a couple of blankets from the back seat. Lying in Rebecca's arms, watching the sun go down, was the happiest Sarah had ever been. Sarah had her head tucked under Rebecca's chin, resting on her shoulder and said, \"I love you so much. I still can't believe you're here. This has been the best week ever.\"\n\n\"The best ever?\"\n\n\"Yes, I wouldn't change a thing.\"\n\n\"Oh really, so you don't want this then?\" Rebecca asked, pulling a box from her pocket. Opening the box to reveal a beautiful engagement ring. Sarah sat up, looking into Rebecca's eyes in disbelief. Rebecca continued, \"Sarah, will you marry me?\"\n\n\"Oh, my god, of course, yes.\" Sarah said with tears running down her face. Rebecca slipped the ring onto Sarah's finger and kissed her. \n\nHolding Sarah in her arms, Rebecca eventually talked about everything, why she hadn't taken Sarah to the Lakes, hearing Sarah say she loved her, talking with Jules, James and Emma, going to the house and taking the canvas prints to David's parents. When she had finished, Rebecca was crying. Sarah propped herself up on her elbow and wiped the tears from Rebecca's cheeks before saying, \"Thank you for telling me.\"\n\n\"Sorry it took so long, I love you\"\n\n\"I love you too.\"\n\n+++++\n\nWhen they got back to Manchester, Sarah was tucked in Rebecca's embrace when she said, \"I never properly thanked you for my present.\"\n\n\"It looks gorgeous on you darling, I'll need to take you somewhere special to show you off.\"\n\n\"Thanks, but that's not the present I was talking about. I meant the one you gave me the day I went to the airport.\"\n\n\"Oh, that present. I was worried it was too much.\"\n\n\"Oh no, it was perfect, you pushed all of my buttons, just thinking about it is almost enough to make me come again.\"\n\nRebecca gently pushed Sarah onto her back and ran her hands up and down her body, casually brushing her sensitive breasts. \"Almost enough hey? So, are you thinking about it now?\"\n\n\"Mmm hmm\" Sarah replied with lust in her eyes.\n\n\"Tell me about it.\" Rebecca said as she lowered her mouth to Sarah's breast while tracing patterns across Sarah's skin.\n\nSarah sighed as she began, \"I had no idea what was in the box and I couldn't believe my eyes when I lifted the lid.\"\n\n\"What excited you the most?\" Rebecca asked before lowering her mouth once more.\n\n\"The butt plug.\" Sarah said in almost a whisper. \"We've played with dildos and even a strap on before but the plug scared and thrilled me in equal measure.\"\n\nRebecca continued tracing patterns on Sarah's skin, edging closer to her sex, \"Carry on.\"\n\n\"The restraints were perfect, not painful at all but being unable to move my arms was another layer of pleasure. Watching you stand over me was so powerful, I wanted you to have your way with me.\"",
        "\"What happened next?\" Rebecca asked while lazily running her fingers up and down Sarah's slit, delighting in the dampness and heat.\n\n\"Next you used your marvellous tongue to relax me while teasing my rosebud with your finger.\"\n\n\"Like this?\" Rebecca asked lowering her mouth to Sarah's sex and moving her hand underneath Sarah to her asshole.\n\nSarah moaned and her voice trailed off, concentrating on the feel of Rebecca's tongue and the finger that was in her ass. When Rebecca added another finger, Sarah cried out and clamped down around her, coming over Rebecca's face. Easing out of Sarah, Rebecca lay back down and pulled Sarah into her arms again, holding her close as the aftershocks twitched through Sarah's body. Before she let Sarah fall asleep she whispered in her ear, \"Just wait until you see what's in the next box...\"\n\n+++++\n\nEpilogue\n\n-----\n\nRebecca and Simon were in the bar at the rowing club, helping plan for some upcoming races. There was commotion outside the door and then the door burst open. Sarah came tumbling in but didn't go towards Rebecca as expected. Instead she was pulling Simon out of his chair while asking, \"Why aren't you answering your phone?\"\n\nSimon looked at his phone in panic and saw he had 47 missed calls and messages, \"I can't believe it was on silent, what's the matter?\"\n\n\"What do you think? Jules has gone into labour, we're leaving now.\" Finally moving to Rebecca, kissing her on the lips, she said, \"Hey gorgeous, you too, we've all been summoned. There is a taxi waiting outside.\"\n\nWhen they got to the hospital Simon rushed off to be with Jules. Rebecca and Sarah went to wait for news. It wasn't until after midnight that Simon came to find them, Sarah was asleep, lying across some seats, with her head resting on Rebecca's lap. Simon had a massive smile on his face and the girls leapt up to give him a hug. Simon said, \"It's a boy, he's a boy. I'm a Dad and Jules in Wonder Woman. Jules is asking for you both, come through.\"\n\nWhen they got to Jules' room, she was smiling down at a small bundle in her arms. Rebecca and Sarah leaned over to give her a big kiss and congratulate her. \"How are you doing Jules?\" Rebecca asked.\n\n\"Oh Bex, it's amazing. It hurt like hell but totally worth it. Do you want to hold him?\"\n\n\"I'd love to.\" Sitting in a chair, gazing at her godson, Rebecca realised she couldn't wait to start a family with Sarah. She looked over at Sarah with love and hoped she felt the same way. \"Have you decided on a name yet?\"\n\n\"Matthew, Matthew David.\" Simon answered, looking at Rebecca to see her response.\n\n\"I think that's a perfect name for a perfect little man.\"\n\nA few minutes later, Rebecca looked up and saw Sarah quietly talking to Jules. Rebecca handed Matthew back to Simon and said, \"We better go and let you try to get some rest. We'll come back later, bearing gifts.\"\n\nSlipping her arm around Rebecca's waist, Sarah added, \"I'll try to stop this one buying the entire shop when she drops by to get 'one' present.\" Congratulating them again and kissing them goodbye, Sarah and Rebecca went home.\n\nGetting into bed, Rebecca asked, \"What were you talking about with Jules?\"\n\n\"Just asking about the delivery, how long it took. Matthew was born at 12.07 so his birthday is today.\"\n\n\"Oh\" -- Sarah felt Rebecca stiffen slightly and was concerned, \"What's the matter?\"\n\n\"Today is / was David's birthday. What are the chances?\"\n\n\"Oh sweetheart, are you ok?\"\n\n\"I'm fine, it was just a shock. It's nice actually, especially for them. They miss him just as much as me, more so now that I have you.\"\n\nSarah leaned in to kiss Rebecca and then settled into her arms. \"Do you want to know what else I said to Jules?\"\n\n\"OK.\"\n\n\"I was looking at you holding Matthew and I told her that I couldn't wait to see you holding our own baby.\"\n\n\"Oh darling, me too. I was thinking that exactly as I was looking down at him. I love you so much.\"\n\n\"I love you too.\""
    ],
    "authorname": "CaroSoft",
    "tags": [
        "lesbian",
        "lesbian sex",
        "romance",
        "romantic"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/learning-to-let-go-2"
}
{
    "title": "Kelsey's World Ch. 29",
    "pages": [
        "The holiday season was in full swing. When Charity was at home in St. Louis for Thanksgiving, Kay and Bobby had their annual Turkey Leftovers party. It was a tradition they'd started a decade ago \u2014 a day-after-Thanksgiving orgy that always featured writhing naked bodies smeared with warm pumpkin pie filling, cranberry sauce and turkey gravy. Clean up was a bitch, but everyone always had a wonderful time.\n\nChristmas rolled around quickly. Rick and Donna's daughter Ashley loved the holiday, and couldn't imagine spending it anywhere but snowy upstate New York. The company she worked for in Manhattan was closed Christmas day and the day after, so Ashley used some vacation time in order to have the whole week at home with her parents. She flew home Friday evening, right after work. Saturday afternoon she was firmly ensconced under a blanket on the couch, reading a book.\n\n\"Are you going to call your friends and go out tonight?\" Donna asked her daughter.\n\n\"No, there's nobody around.\"\n\n\"Lying around all week won't help with your weight loss,\" Donna said. \"You're doing so good lately.\"\n\n\"I know. We need to go for walks or something. I hit the forty pound mark the other day. Only forty more to go,\" Ashley said, rolling her eyes.\n\n\"You don't have to push yourself that far, Ash.\"\n\n\"I'm going to keep dieting until guys start looking at me.\"\n\n\"If you think men aren't looking at you, you're just not catching them at it. I know how men's minds work. They're looking at you, with all kinds of nice dirty thoughts in their heads.\"\n\nAshley doubted it, although she was well aware of her mother's knowledge of the dirty minds of men. When Ashley was younger and started to get interested in boys she had some odd suspicions about her parents. Donna sensed it, and had a quiet talk with her in her bedroom one evening, telling her about the swinging lifestyle they enjoyed. Ashley was fascinated but frightened by her mother's calm disclosure. As the years went by she realized it wasn't the end of the world. To the contrary \u2014 her mother and father seemed more in love than most of her friend's parents.\n\n\"If you catch a guy looking at me, let me know,\" Ashley said, smirking smugly as she buried her nose in her book again.\n\nDonna went upstairs to her bedroom and called Barbara...\n\n\"Hello?\"\n\n\"Barb? Donna. Hey, remember when we were talking about Ashley a couple months ago? I mentioned how she had a crush on Austin in high school, and how she could use the self esteem boost from being part of the group?\"\n\n\"Yeah, I remember. What's up?\"\n\n\"She's home for the week, right through Christmas and into next weekend. I get the feeling she's gonna lay on the couch with her nose in a book the whole time.\"\n\n\"Austin will be at Bobby and Kay's on Christmas evening, for their open house party. Do you think you could get her there? Are you guys going?\"\n\n\"Yes, Rick and I go every year. I already thought of that, but there's no way she'd just go to that with us. We'd have to get her involved ahead of time somehow. With the youngsters.\"\n\n\"I told you before, if you put Kelsey on this, she'll make it happen. She's got a way with these things. Want me to call her?\"\n\n\"No, I'll do it. Christ, I ate turkey gravy out of her pussy a few weeks ago, I guess I know her well enough to ask her this!\" Donna laughed.\n\n\"Oh my God, wasn't that fun?\" Barbara said. \"My ass was so sticky. It was like a cranberry enema with the guys pumpin' it into me like that.\"\n\n\"That's what you get for being a dirty anal girl,\" Donna said. \"I gotta say, that son of yours is like Mr. Anal these days, isn't he? Did your ex have a big cock like that?\"\n\n\"Yup,\" Barbara said. \"Identical.\"\n\n\"Jesus,\" Donna said. \"Ashley's gonna freak if this works out.\"\n\n\"Let me give you Kelsey's number...\"\n\n\u2014\n\n\"Hey you guys! Ashley's here!\" Kelsey yelled. \"Come on in Ash. God, I haven't seen you since graduation, right?\"\n\nKelsey ushered the tall brunette into the living room and took her coat. \n\n\"What are you drinkin'? We've got beer, wine, liquor and stuff.\"\n\n\"What are you having?\"\n\n\"We've been on an Old Fashioned kick lately. It's one of those cool old cocktails. It's like whiskey with sugar in it.\"\n\n\"I'll try that.\"\n\n\"Awesome. We get all jiggy when we drink 'em,\" Kelsey smiled.\n\n\"So you're living with Brie?\"\n\n\"Yup, and Brie's roommate from college, and Richie Nanty. He went to Hillydale, too, but he's only eighteen, so we didn't know him back then. Do you like jailbait? He's not, but he kinda looks like it. He's really cute. Oh, and Austin. You knew he lived here, right?\"\n\n\"Austin Lowe?\" \n\n\"Yeah. Didn't your mom tell you he'd be here?\"\n\n\"No. She conveniently forgot to tell me that.\"\n\nAshley's blood nearly boiled when she realized she'd be seeing Austin. She went to all his soccer games in high school and day-dreamed about him often back in those days, usually under a blanket on her bed with her fingertip flicking furiously against her clit.\n\n\"Hey, Ash!\" he said with a big smile as he came down the stairs. \"Long time no see!\"\n\n\"Hi, Austin. Jeeze, this is like a reunion or something. I didn't know you'd be here.\"\n\n\"Yeah, this is cool!\" he said, giving her a casual hug.\n\n\"Wanna drink, Honey?\" Kelsey asked. \"I'm doin' a pitcher of Old Fashioned's. Are my girls comin' down? And Richie?\"\n\n\"Yeah, they're just puttin' clothes on.\"\n\nAshley's body locked up tight as she stood there. She knew Kelsey grew up not wearing clothes. Everyone at school knew that. Could that crazy way of life have taken hold in the farmhouse she was standing in, Ashley wondered? With all her roommates? With...Austin?\n\n\"We're pretty casual around here usually,\" Kelsey said, with a twinkle in her eyes.\n\nNervous laughter escaped from Ashley's mouth. It was embarrassing and she blushed. She looked at Austin and her mind had stripped him of his clothes. She felt like she could barely function. The drink Kelsey was making couldn't end up in her hand soon enough.\n\n\"Here you go, Honey. See if you like that.\"\n\nAshley took a sip. The sweet whiskey cut through her dry mouth and flared into a warm flame in her throat. Another sip slid down easier, sweeter, nice.\n\n\"I like it,\" she said.\n\n\"Yup,\" Kelsey said knowingly. \"Suck a few of them down and you'll get jiggy.\"\n\nAshley had no intention of getting drunk, but the third sip was even nicer \u2014 warm and smooth, and the way her nervousness was melting away was like magic. Sips four, five and six were kind of awesome.\n\n\"Let me fill that up for ya,\" Kelsey said, pouring the amber liquid from a tall, thin pitcher. She noticed Ashley looking at it.\n\n\"It's cool, isn't it? We got it and a bunch of cool glasses at a really awesome antique shop. The woman said it was mid-century or somethin' like that.\"\n\nBrie and Charity and Richie came down the stairs. \"Ash!\" Brie squealed. \"Oh my God, it's so good to see you!\"\n\nAshley was excited by the reunion, too, but Richie had caught her eye. As much as she was attracted to Austin, boys like Richie were more her type \u2014 cute, cherub like boys who seemed to have an inner glow of purity.\n\n\"Hi,\" he said, when they were introduced.\n\n\"Hi.\"\n\nCharity was shy, too, but the cocktails soon loosened things up. She did feel a bit left out, though, with all the reminiscing about Hillydale High School.\n\n\"Where'd you go to high school, Charity,\" Ashley asked.\n\n\"I'm from St. Louis,\" she said.\n\n\"Char went to Bible school,\" Kelsey said. \"It worked like reverse psychology or somethin', though, because now that she's out she loves sex more than anybody.\"\n\n\"Out?\" Ashley asked. \"Are you...gay?\"\n\n\"Fuck no!\" Kelsey said, convulsing in gales of laughter. \"I just meant now that she's out of that fuckin' Bible school!\"\n\n\"It was an okay place,\" Charity said. \"It just wasn't for me. And...I could be gay, if I wanted to.\"\n\n\"Well, you like pussy, that's for sure,\" Kelsey giggled, \"but there's no way you're givin' up cocks. Whats that old saying? Oh yeah, here's the headline...Charity Witbro gives up cocks. P.S. Hell freezes over.\"\n\nCharity blushed. She'd just met Ashley a few minutes ago, and already she was being outed as a slut.\n\n\"How about you, Ash?\" Kelsey asked. \"What are you into? It's all good around here.\"\n\nWhat am I into, Ashley wondered? Is she really talking about cocks and pussies?\n\n\"Oh. Just...regular,\" Ashley said. She took another big sip of her drink.\n\n\"We got the full variety here, Honey,\" Kelsey said as she filled everyone's glasses full again. \n\nThe conversation veered away from cocks and pussies, and Ashley was glad of it. She was enjoying herself with her old schoolmates, and she hadn't had a nice alcohol buzz in quite some time. When she was heavier, back in high school and through most of college, she could drink a lot and it didn't affect her all that badly. Having shed forty pounds, though, and pounding the sweetened whiskey the way she was, it didn't take much longer for it to send her head spinning like she'd been hit with a sledgehammer. After an hour of reminiscing she was flat-out intoxicated.\n\n\"I watched your porn,\" she said. \"Me and Cindy used to watch it.\"\n\n\"Cool!\" Kelsey said. \"Did you guys get each other off?\"\n\n\"No!\" Ashley said. \"...but, we sorta did...on our own...like...in the same room.\" She blushed and a breathy whimper escaped her when she realized what she'd said in front of Austin and Richie.\n\n\"Nice, Honey! I love it when my stuff inspires people. Got any favorites? Which guys did you like watchin'?\"\n\n\"The college professor one, with that Daddy McQueen guy. And the Dickie Bigger's ones.\"\n\nKelsey laughed. \"I forgot about their names. That's so funny. They're Davey and Billy. Davey's the older guy. You like older guys?\"\n\n\"I...guess.\"\n\n\"You ever get with one, Honey?\"\n\nAshley shook her head and blushed a little.\n\n\"I could hook you up with Davey. You could do a scene.\"\n\nAshley looked horrified. \n\n\"Billy's super awesome, too. He's a Bible boy like Charity. His mom's a pastor. He grew up livin' right in a church.\"\n\n\"No way!\" Ashley said.\n\n\"Yup,\" Kelsey said. \"Totally fucked his way right outta there. His mom did, too. She got in all kinds of trouble.\"\n\n\"She made porn?\" Charity asked.\n\n\"No, just fuckin' around with, what do you call 'em? Parishioners? She was gettin' it on all over the place, I guess.\"\n\n\"Whoa! And she was the pastor?\"\n\n\"Yup,\" Kelsey said. \"I kinda love it. All that puritan shit just bores me. How about you Ash? Are you comfortable just havin sex? Like, for fun?\"\n\n\"Yeah. I mean, I'm not a virgin, if that's what you mean.\" She glanced at Austin. The whiskey in her brain made him look like a glowing god. She smiled shyly, and he did, too.\n\n\"Yeah, that's cool, but I mean, like now, we could all just play and have a nice afternoon,\" Kelsey said. \"Would you be into that?\"\n\nIf Ashley was a guy she would have popped a boner. The whiskey, Austin's glow and Richie's cherub good looks conspired, and all of the sudden a wave of warm horniness flooded her bloodstream. Kelsey could see it in her eyes.\n\n\"How about if we get Austin and Richie out of their clothes? You ever watch any of that clothed female, naked male porn? I always wanted to try that with a bunch of girls.\"\n\n\"That sounds hot,\" Charity said.\n\n\"We outnumber 'em,\" Kelsey said. \"They can't say no. I bet they'd be super hard with a new girl here.\"\n\nAshley was speechless. What Kelsey was suggesting was so out there, she didn't even know what to think. She was amazed that Austin and Richie didn't seem to be protesting. Richie looked a little nervous and fidgety, but Austin just sat there, sipping his drink, with quiet mischief in his eyes.\n\nKelsey waited a few moments for the idea to settle in, in case Ashley wanted to stop things before they started, but she didn't give her long. Kelsey was well aware that too much thinking was never conducive to free-wheeling sexy fun.\n\n\"We're strippin' you, you guys,\" she said to the boys. \"It's playtime.\"\n\nThis can't really be happening, Ashley said to herself. It's not this easy, is it? Get two gorgeous boys in a room and just say we're strippin' you, it's playtime? She looked around at the others and wondered \u2014 why didn't anybody ever tell me this could be done?\n\nAshley's eyes darted between Richie, who Charity and Brie were undressing, and Austin. Kelsey was unbuttoning his worn-out flannel shirt.\n\n\"Do his jeans, Ash,\" she said. \"He's probably commando under there.\"\n\nAshley didn't want to seem too eager, even though she absolutely was, so she waited until the other girls had Richie's pants down before doing what she used to dream about back in high school. Her fingers flipped open the brass button on Austin's jeans and she lowered the zipper. She already knew where his cock was, long and mostly hard inside his left pant-leg. The elongated lump looked positively huge to her, but she wouldn't be sure until it was out in the open. The fly spread open as the zipper went down, showing more of the short dark hair that started up near his bellybutton.\n\nAshley glanced at Richie's cock, out in the air and hard. Charity's hand closed around it and gave it a stroke or two.\n\n\"Pull 'em down,\" Kelsey said, holding Austin's wrists for added effect.\n\nAshley focused on Austin again. Her mind went blank for a second, overloaded by the enormity of the situation. Austin Lowe! I'm taking Austin Lowe's pants off!\n\nAnd then it was there, just like that. A foot away from her face, almost close enough to smell. The cock that had been in all those dreams all those years ago. It was more like two dreams converging, smashing into each other like an explosion \u2014 the most perfect cock in all the world, and Austin Lowe naked. She honestly hadn't expected the former to be attached to the later.\n\n\"Whoa!\" she said, loud and legible. Everyone smiled at the look on her face.\n\n\"Nice, huh?\" Kelsey said. \"You get the honors, Honey. Suck that baby.\"\n\nAshley's brain stopped working. Her mouth opened and she was on it, absorbing its heat and hardness like she wanted to be one with it.\n\n\"Yeah, the girl's hungry!\" Kelsey said.\n\nAustin moaned. Ashley just about melted when she heard it.\n\n\"Fuck yeah,\" Kelsey said. \"You're gonna get a mouthful to swallow if you keep that up.\"\n\nAshley moaned. She wasn't a cum-in-my-mouth kind of girl, but Austin was special.\n\nAshley was beautifully enthused and Austin loved a new and different mouth. It didn't take long for him to let lose a gusher. Ashley groaned over and over as she drank in the silky warmth. \n\n\"Fuck yeah, that's hot,\" Kelsey said quietly as she watched with reverence. \"My mom thinks it's genetic, you know, how much a person likes sex and everything.\"\n\nAshley was still working on the huge, slippery shaft, sucking Austin, and herself, down from their high, but she was listening to every word Kelsey said.\n\n\"It's cool havin' you here, Ash,\" Kelsey said. \"The kids of swingers, you know? My mom says your mom and dad have always been smokin' hot at the parties.\"\n\nAshley blushed. It was an odd feeling, blushing from hearing some words after being unfazed by sucking a cock in front of people. But her family secret was out in the open, and it was a shock.\n\n\"So, have you played with groups and stuff?\" Kelsey asked. \"Gettin' into the swinger thing at all?\"\n\n\"No!\" Ashley said. She held Austin's cock in her hand, just inches from her face. Her drunken mind wanted to suck him off again, and take another big load in her mouth. \n\n\"You should suck on Richie's cock,\" Kelsey said, recognizing the hungry look in Ashley's eyes. \"He didn't cum yet.\"\n\n\"Come here, Ash,\" Charity cooed from down between Richie's legs. \"Help me with him.\"\n\nAshley scooted over on her knees, stumbling a little as she went.\n\n\"Let me taste the cum,\" Charity said, kissing her before she could do anything about it. It was a deep, wet, hot kiss, and Ashley moaned.\n\nCharity smiled at her when it ended. A sweet smile with a bit of the Devil in it. She had Richie's hard cock in one hand and the back of Ashley's head in the other. She pulled the two together, smiling wide when Ashley's mouth opened, engulfing the hot young cock.\n\nAshley got so lost in Richie's gently writhing body and tender moans that she barely noticed when Kelsey and Charity and Brie took off their clothes.\n\n\"Hey,\" she said in a dreamy, drunk voice. \"I thought we were keepin' our clothes on.\"\n\n\"Did you really want to?\" Kelsey asked.\n\n\"No!...But...\"\n\n\"No buts,\" Kelsey smiled. \"Just naked ones.\"\n\n\"Fuck,\" Ashley said. \"You guys are gettin' me in all kinds of trouble.\"\n\n\"Austin wants to take your clothes off.\"\n\n\"He does not!\" Ashley said, letting her drunk eyes drift over to him. \"Do you?\"\n\nAustin smiled. It was answer enough.\n\n\"Fuck,\" Ashley said. \"You guys are way more fun than my friends.\"\n\nShe took another slow lick up the length of Richie's cock, stood up and walked to Austin, picking up her glass along the way.\n\n\"Be careful what you wish for,\" she said to him. \"I don't look like them.\"\n\n\"Ash, to a guy a woman's a woman,\" Kelsey said. \"Haven't you figured that out yet?\"\n\nAshley's intoxicated mind pondered the thought. If it was true it would change everything, but it couldn't be true, could it? Was everything her fat friends had told her not true? Do guys really not care all that much?\n\n\"What about to a girl?\" Ashley blurted out.\n\n\"Same thing, Honey. All pussies are sweet, as long as you take care of yourself.\"\n\nAshley's mind race with horrible thoughts. Am I clean? Am I too hairy? Coming here was the stupidest thing I've ever done!\n\nThen she felt Austin's hands on her, and then his soft lips kissed her on the mouth, and then her racing thoughts spiraled to a place of warm equilibrium, like she was floating on softly bouncing air. When she realized his hands were unbuttoning her shirt as he kissed her, she nearly lost her mind.\n\n\"You on the pill, Honey?\"\n\nKelsey's words echoed, blurry in Ashley's head. She nodded. Suddenly the gravity of the situation hit her, and the voice in her head grew loud. Is Austin gonna fuck me? Oh my God! Austin's gonna fuck me!\n\nHer kissing mouth went a little wild, and she let her hands roam on the athletic, soccer player body from her dreams. The fact that he was completely naked was crazy and wonderful. Kelsey and her house and her friends were crazy and wonderful. Life itself was crazy and wonderful.\n\nAustin freed Ashley's tits, buried his face in them, and Kelsey pulled down her stretchy pants. Kelsey wanted to ask her why heavy girls always wear stretchy pants, but there would be time for that later. She planted her face in Ashley's hairy pussy and licked up through the juicy gap.\n\nAshley was a goner. Her drink was still in her hand, so she downed what was left of it in two gulps. It gave her a warm headrush that amplified everything. The next thing she knew she was on the floor with Austin, riding him like a proud and wild cowgirl. \n\n\"Yeah!\" she moaned, riding the big long cock with full strokes. \"Oh fuckin' yeah!\"\n\n\"That's it Ash,\" Kelsey said. \"Fuck that boy. Your pussy looks so nice on him.\"\n\nThat was all it took.\n\n\"Oh, Jesus!\" Ashley said, the words hissing out through clenched teeth as her body furiously fucked it's way through an orgasm. \"God! she whimpered.\n\nAfter the orgasm she dropped her body down on Austin and luxuriated in the feel of his cock way up inside her. It was so delicious she could hardly stand it. She could have stayed that way forever, but Kelsey had other ideas.\n\n\"Richie's hard for you,\" she said.\n\nAshley felt hands on her hips, pulling them up. Austin's long cock slithered out of her, and another one took its place. \"Fuck!\" she whispered, just inches from Austin's face. She looked deep into his eyes and kissed him, moaning into his mouth as Richie started to fuck her. It was the dreamiest, most extraordinary feeling \u2014 lying on a beautiful boy's warm body, kissing him while another beautiful boy fucked her. Ashley wanted her whole life to be like that from that moment on \u2014 no more work, no more dieting, no more exercise. No more anything, just hedonistic whiskey-fueled pleasure with Austin and Richie, until the end of time.",
        "The wildly free and easy pleasures continued when the girls joined in. Ashley couldn't believe how easygoing and casual it all was.\n\n\"You all seem to know each other really well,\" Ashley said, when the first round settled into a warm tangle of bodies taking a break.\n\n\"Yeah, we do. Foolin' around here is real comfortable and nesty,\" Kelsey said. \"You need to come to a party. It's a whole different kind of vibe. Especially when you're new. It's the best. So fun.\"\n\n\"More fun than this? I'm in!\" Ashley said, half kiddingly.\n\n\"Awesome! I'll tell my mom! She'll love havin' you come!\"\n\n\"Whoa, wait a minute! You're mom's party? That'd be like...all my parent's friends, wouldn't it?\"\n\n\"Yeah. They're super fun.\"\n\n\"You...hang out with them? At those parties?\" Ashley looked around at everybody. \"All of you?\"\n\n\"Yup,\" Kelsey said. \"And now you do, too. Trust me, it's fuckin' mind-blowingly great.\"\n\nAshley suddenly felt sick. All the sugary whiskey hit her and she felt like puking. Her father and her mother would be at that party, and Ashley actually wanted to be there. Her vision started spinning wildly.\n\n\"Bathroom!\" she said, choking back the vomit.\n\n\"Fuck! This way, Honey!\"\n\nKelsey grabbed her arm and pulled her to her feet. They got to the bathroom just in time \u2014 Ashley blew her cookies in the sink.\n\n\u2014\n\n\"Did you have fun? Kelsey's so nice, isn't she?\"\n\n\"What the fuck, Mom. Set me up much?\"\n\nAshley glared at Donna for a moment, but her face soon softened. \"I should be really mad at you. I'm twenty-three. I shouldn't need my mother's help to find sex. No one should need their mother's help to find sex.\"\n\n\"So you had fun? You look like you drank too much.\"\n\nAshley shook her head and smiled a little. \"You're crazy. Yes, I had fun, and yes, I got fuckin' blotto'd.\"\n\nDonna smiled. Hearing her daughter swear was something she'd waited for. She longed to have an adult relationship with her.\n\n\"I hope you got fuckin' fucked, too. Was Austin there?\"\n\n\"Jesus Christ, Mom!\"\n\n\"I'm sorry Ashley. I'd just love it if we could talk about it. It's what I do with my woman friends.\"\n\n\"Talk about Austin? I'll bet you do. Fuck, Mom, this is just too twisted. I can't believe any of it.\"\n\n\"So he was there?\"\n\n\"Yes. And Richie, and Kelsey and Brie and Charity. And me. All fucking our fuckin' brains out. Is that what you wanna hear?\"\n\n\"Oh, I haven't met Richie yet.\"\n\n\"That's your takeaway from all this? A new young boy to get your hands on?\"\n\n\"Tell me about him.\"\n\n\"He's sooo cute. Eighteen. He knows everything. It's like a master class over there.\"\n\nDonna giggled. Ashley did, too. Donna sat down next to her on the bed.\n\n\"How did you get into all this, Mom? Please don't tell me Nanna finagled it.\"\n\n\"No, Honey,\" Donna chuckled. \"Oh my gosh, that's a crazy thought. No, it was an old boyfriend of mine. I heard he died a while back. He took me to a wild party without telling me about it. I...did some drugs back in those days. He had some mushrooms we were going to do, but I wanted to try ecstasy. It turned out he knew it was going to be a sex party, and...have you ever tried ecstasy?\"\n\n\"No. I can't believe you have.\"\n\n\"Let's just say it turned a party full of strangers into the best dream I've ever had. That's the night I discovered how incredible group sex can be. I needed more.\"\n\n\"How does Dad fit into this?\"\n\n\"He was there. I could easily say I fell in love with him right then and there, but ecstasy sort of makes you love everything. He was special, though. We hooked up a month later, after I broke up with my boyfriend. I ran into him on a city bus, on the way to a concert. We kissed the whole way. I wanted to fuck him right there.\"\n\n\"Wow. That's...unexpectedly romantic.\"\n\nDonna paused, wondering if she should tell Ashley how full-on slutty she was that night.\n\n\"That's not the best part. We were right up front at the concert, it was AC/DC, those CD's your dad plays in the garage, you know? We got by security somehow and snuck around behind the big speakers next to the stage. Your father pulled down my jeans and fucked me right there. The band could see us, and a security guard came to kick us out, but he didn't. He waved over some of his buddies to watch, probably because I had my tits out.\"\n\n\"Jesus, Mom! That's nuts! God, I thought you were gonna say they all gang-banged you or something...\"\n\n\"I would have loved that,\" Donna said, sounding a little embarrassed about the revelation. \"So, how about you? Was last night your first group experience?\"\n\n\"Yeah,\" Ashley said, a little stunned by her mother's wild story. \"I get it, Mom. It was...so much fun.\"\n\n\"Oh, I'm glad, Sweetheart. We've been wanting to ease you in, somehow, for years.\"\n\n\"We? As in...Dad knows about this?\"\n\n\"He does,\" Donna said. She put her hand on Ashley's. \"How does that make you feel?\"\n\n\"You don't need to psychoanalyze me, Mom. I'm strangely okay with it. Don't ask me why.\"\n\n\"You know, this is a big part of our lives, your father and me. I'm sure you can imagine that. A big, big part. Keeping it separate from you all these years has been...heartbreaking, in a way. I can't even begin to tell you how happy I am inside right now, talking to you like this. This is the best Christmas, ever!\"\n\n\"Don't ask me to explain it, but...I'm happy, too.\"\n\nThat night, alone in her old childhood room, Ashley thought about everything that had happened that day. The way she felt at Kelsey's house was unlike anything she'd experienced since puberty overtook her and fucked up her life. When she was ten or eleven she felt like every other girl \u2014 happy and carefree \u2014 but when her body began to change so did everything else \u2014 she felt uglier and uglier, until her self esteem finally tanked. The gang at Kelsey's house was different, though. They felt like old friends right off the bat, and Ashley felt attractive and sexually desired right from the get-go. Her body \u2014 the one she'd never liked \u2014 was devoured and ravished by beautiful, sexy people who genuinely enjoyed everything about her. They slapped her big ass, and hung on tight to her soft belly as their cocks and mouths and hands made her fly. They laughed at her offbeat jokes, and looked to be genuinely in awe of her sometimes funny looking orgasms. It was an amazing experience.\n\nOf course there was the Austin thing. Fucking your adolescent dream can be a let-down, but Austin was far from that. Far far from that. He fucked like a thoroughbred, and looked like one, too. But even that wouldn't have mattered if he was just going though the motions. Much to Ashley's disbelief, he wasn't \u2014 he was totally into the fact that she was there, and he proved it to her over, and over, and over again. She was soaked with his sweat by the end of the night.\n\nThe girl thing was a different kettle of fish. When Ashley thought back on it, she shook her head in disbelief at the things she'd done for the first time, and the fact that she'd liked it all so much! Letting a girl make her cum. Licking a girl all the way to an orgasm. Sticking her tongue in a girl's asshole for God's sake! She even made Charity cum with her big nipple, rubbing it across Charity's clit while the boys took turns fucking Ashley doggie style. Kelsey cheered that move \u2014 she'd never seen it before, and Ashley had never dreamed it.\n\nThe vomiting was an unfortunate misstep. She needed the booze to get her over the hump, but next time she'd be more careful, and wouldn't need it as much, she hoped. A quick clean-up with Kelsey's help and a gargle with mouthwash got her right back into the fray, with a slightly clearer head so she could remember things better. She was glad of that. She wanted to remember that night forever.\n\nAnd then there was her mom and dad. Her mother had flat-out blown her mind with the stories of the drug-fueled orgy and public sex at a big rock concert. Ashley knew her parents were kind of wild \u2014 they were swingers after all, and had more of a free-spirited vibe about them than any of her friend's parents. But still, pant's down fucking at an AC/DC concert? With the band watching you? It'd take a while for Ashley to digest that little tidbit.\n\nThe Christmas open house at Kelsey's parent's house was the biggie, though. Kelsey and the gang would be there, and Kelsey told her that Trina and Raymond would be there, and probably Donny, Tyler and Sarah, too. It seemed like half her high school class was involved in group sex. It was an astonishing revelation. Raymond? Really? Raymond? Surely, if he could do it, Ashley could. The parents thing freaked her out big-time, though. How could she possibly do what she'd done at Kelsey's if her Mom and Dad were in the same house, or watching, or maybe even rolling around in that pile of flesh with her! It seemed like a non-starter. Not gonna happen!\n\nThen she thought about the pure love and joy on her mother's face when they talked about each other's experiences. The \"best Christmas ever,\" her mom had said. What better present for her than sharing the party experience that she obviously loves so much? They wouldn't have to be together. They could talk about boundaries. Ashley was talking herself into it without trying too hard. When she thought about Kelsey and Austin, and all her classmates from school \u2014 there was no way she was missing that party.\n\n\u2014\n\nCharity called her mother in St. Louis on Christmas morning...\n\n\"Did you get the box with the gifts I sent, Mom?\"\n\n\"Yes, it came a few days ago.\"\n\n\"Good. I sent another one for you to Craig's house.\"\n\n\"Oh...thank you, Dear,\" Charlene said. Her voice dropped to a whisper, even though Clifford wasn't home. \"Do you mean the red one? Because I opened that right after Thanksgiving.\"\n\n\"No, Mom. Something new.\"\n\n\"Oh. Thank you, Sweetheart, but you didn't need to,\" she said, still whispery. \"Craig has been buying me...a few things.\"\n\nWhat Charlene didn't say was that she had her own closet over at Craig's house, with three sexy little dresses and a short, satin bathrobe hanging in it, and Craig's late wife's dresser in the bedroom \u2014 empty since his sister cleaned it out after the funeral \u2014 had a few brand new pieces of see-through lingerie in the top drawer.\n\n\"You father will be calling in the Devil to come and get me.\"\n\n\"Mom, the Devil isn't real. You know that, right?\"\n\n\"If you think that, then...you haven't stopped believing in God, have you?\"\n\n\"No, Mom, of course not. I just think about it all differently now. God is everywhere. The water, the sky. The food I just ate. The cute boy down the street is God. Your beautiful body is God. Craig's cock is God.\"\n\nThe phone line went silent. Charity knew she'd gone too far, but she was glad she'd done it.\n\n\"Charity, that's just...how can you say something like that?\"\n\n\"Isn't it true?\"\n\nThe question hung there, unanswered.\n\nCharlene finally spoke. \"Have you...found a steady boyfriend yet?\"\n\n\"No, but two boys live with us now,\" Charity said.\n\n\"You mean, they're your roommate's boyfriends?\"\n\n\"Yeah, well Austin's sort of Kelsey's. But we're all...friends...sort of.\"\n\n\"Charity, is it some sort of commune or something? Should I be worried?\"\n\n\"What's a commune? Like a hippie thing, you mean?\"\n\n\"Do you all...share...everything?\"\n\n\"Yes, Mom, we do.\" Charity waited for her mother's response, but there was none. \"Does that shock you?\"\n\n\"Yes...it does...but, you seem happy. Be careful, okay?\"\n\n\"I will, Mom. You too.\"\n\n\"Yes. I...am.\"\n\n\"Bye, Mom. I love you. I'll talk to you soon...\"\n\n\u2014\n\nThe Jonston house was draped with Christmas lights, evergreen swags and wreaths. A fresh blanket of snow was on the ground, sparkling in the moonlight. Kelsey and Austin had strung small twinkle lights in four of the old apple trees beside the long gravel driveway, lighting the way to the fairytale-looking house with a soft glow. It was Bobby and Kay's annual Christmas Open House, with an unlocked door for anyone who cared to wander in.\n\nCoats were piled high, and clothing, too, on a rug just inside the door. Winter boots and shoes were scattered all around the pile. A feathery-looking Christmas tree that Kay and Bobby had cut was decorated profusely, scenting the living room with pine. Two wood stoves, one in the living room and one in the big kitchen, were nearly red-hot, cranking out heat. Nat King Cole was singing Christmas songs. The stereo was turned up loud, so Nat could be heard above the orgasmic moans. People were fucking, people were sucking, people were slow-dancing naked. It was Kay and Bobby's biggest houseful of the year, and things were in full swing.\n\nThe younger generation was there in full numbers, the first time the popular party had been so diverse. The diversity didn't stop there, though \u2014 Jamar and his girlfriend Latanya drove down from the city to join in the fun. For many in attendance it marked their first time loving, and being loved by, someone with beautiful brown skin. Kelsey was amused by the effect Jamar had on some of the older women \u2014 the whole 'taboo' thing was hard for her to understand, but she loved watching what happened when those women climbed on Jamar's work-of-art body for a ride. It was more than a little explosive. \n\nYes, the young people all turned out, many of them leaving disappointed families behind so they could be there. Most of the girls wore Santa hats. Charity had soft antlers on her head, and a big red bow just above her bootylicious ass. \n\nAbby was adorned with a ballet tutu, just the wide frilly part around her waist. She'd carefully removed it from a proper ballet costume, and added some velcro for a closure. It was made of a stiff, white, net-like fabric called tulle, with red flowers for decoration, and it looked extraordinary ringing the tiny waist of her little naked body. She finished the look off with a wide, white satin choker around her neck, adorned with a red bow.\n\nRed stockings were in abundance, held up by garter belts in red, white and black. The older women were nicely adorned, too. Donna Welch and Olivia Bartlett both wore green-and-red lingerie \u2014 Olivia's a crotchless bodysuit that had the word 'HO' written in gold glitter; Donna's a crotchless babydoll with cutouts for her nipples and trim made of green feathers.\n\nSexy women in their Christmas finery were everywhere in the big house, but it was Kelsey and her mother who stole the show, making their grand entrance in full edible body-paint that each had applied to the other \u2014 twisting red and white stripes that made them look like smiling, big-titted candy canes. They were every young boy's dream come true \u2014 sticky and lickable and oh-so sweet.\n\nLedyard and Rose were the oldest guests. The Hawaiian couple were special occasion swingers \u2014 two, or maybe three times a years they'd let themselves go. A swinger's cruise on the blue waters of the Caribbean was an annual event for them. Every other year they made the trip from Florida, where they lived near their daughter's family, to Kay and Bobby's Christmas Open House.\n\nKelsey had met them before. When she was younger she was sent off to a friend's house every Christmas evening, but Ledyard and Rose always stayed on as guests for a day or two, so Kelsey got to know them, as she would a kindly Aunt and Uncle. They had that look about them \u2014kind faces with slim, twinkly eyes, chubby little bodies and old-fashioned clothes. Ledyard's hair was gray, and so was his short beard. Rose still had some flecks of black in her long gray hair.\n\nWhen Kelsey had moved beyond childhood and was slowly figuring out her parents swinging lifestyle, she started to understand why Ledyard and Rose came to visit. Her first full-on tongue kiss of kindly old Ledyard, wearing nothing but red and white body paint, made her toes tingle. Brie and Charity were looking on, both of them thinking how odd it was to see Kelsey do that to a grandfatherly old man.\n\nIt wasn't long before the young people had dubbed Ledyard and Rose \"Santa and Mrs. Claus.\" Two of the girls gave up their Santa hats, and the older couple wore them proudly.\n\nThe age spectrum at the party was wide. Having Abby and Richie there broke Kay's rules about age. Mingling with eighteen-year-olds from their smallish town was a risk she and Bobby had never wanted to take, but when Kelsey's twenty-two year old friends joined the group it softened her defenses. A sit-down with the two youngsters a week before the open house, fully clothed, over steaming cups of hot chocolate, let Kay and Bobby know they were trustworthy kids. They were already fully involved in Kelsey's world, after all, and Kelsey was right \u2014 Kay did find Richie irresistibly cute.\n\nRaymond made the trip up from Brooklyn to be there. His life was settling into a kind of normalcy \u2014 as normal as life can be for a small town boy in a big city \u2014 but he missed Kelsey and the girls something fierce.\n\n\"New York City's so awesome, you guys,\" Raymond said. \"You gotta come and visit.\"\n\n\"Yeah, we want to,\" Kelsey said. \"What are your roommates like?\"\n\n\"They're, like, totally lost in their work,\" Raymond said. \"It's good, though. It keeps me focused.\"\n\n\"Do they have girlfriends?\"\n\n\"No. They say girls aren't worth the trouble. There's a couple girls at work that hang around a little.\"\n\n\"Not worth the trouble, huh? Sounds like a challenge. There's two of 'em, right? I'll talk to Brie and Char and see about comin' down. Did you fuck the girls yet?\"\n\n\"The girls from work, you mean? No, they're like, super nerdy.\"\n\n\"That doesn't mean anything, Honey. You know that. Get their clothes off and they might be all kinds of fun. You guys should all play a strip game or something.\"\n\n\"Maybe,\" Raymond said, sounding unconvinced.\n\nAs the party wound up the epicenter shifted to the upstairs. The living room lights were switched off, the Christmas tree lights gave the room a warm, mellow mood and Nat King Cole kept singing. Most everyone had gone up to the bedrooms, but the couch and the big upholstered chair still saw some action.\n\nOut in the dark night, Ashley turned onto the long, snow-covered driveway. Her mother's car felt like it was finding its own way, lured by the twinkle-lit trees and the glow of the light in the windows of the big house, eerily visible through the bare branches of the old orchard. She was surprised to see so many cars, parked every which-way on shoveled patches of lawn. She sat for a moment in the quiet of the dark car after she switched it off, wondering if what she was about to do was insane. A few deep breaths failed to calm her pounding heart, so she got out of the car into the crisp cold of Christmas night and walked toward the house.\n\nMuffled music was audible, as was laughter, but what really caught her ear was the unmistakable sounds of sex. She stopped in her tracks before reaching the front porch steps, and listened. The window right above her, in the center of the house above the porch roof, seemed to ooze blue light into the night air. She could see snippets of people, flesh colored glimpses through the frosty windowpanes, and hear a woman in the throws of something big. The rooms either side were dimmer, with warmer colored light, and there seemed to be something going on in both of them, too. The downstairs seemed less mysterious, so she got her legs working again and climbed the wide steps to the front door. There was a hand written sign: Come on in.\n\nAshley stood for a moment, wishing she hadn't procrastinated so much. The party was in full swing and she'd have to somehow ease in, as quietly and anonymously as she could. What if she saw her naked father right off the bat? Or her mother with another man? She opened the big front door and stepped into the world she'd long been curious of.",
        "She was glad the first people she saw were unfamiliar, but all were naked and it was a crazy sight to see at a Christmas party \u2014 Margie, with her farmgirl muscles glistening, was on her knees on the couch with her arms and head on the top of the back cushion. Koop was standing behind her, fucking her with long, deep strokes. The roaring woodstove was nearby, making both their bodies sweat. The colored lights from the Christmas tree gave them a festive glow. Koop glanced at the late arrival, but he was too far gone to feel much embarrassment. Margie's moaning sighs had him hypnotized. Next to them, Ryan was leaning back lazily in a big upholstered chair. Sharron was on him like spiderwoman, draped over him for some sixty-nine action, with her knees hooked over his shoulders and her mouth full of his cock. His eyes watched Ashley's arrival while his mouth made Sharron moan.\n\nAshley looked at the pile of jackets and clothes. It was a remarkable collection \u2014 everything from down parkas to lace panties. She took off her coat and boots and immediately stepped in one of the landmine-like puddles of icy cold water that dotted the floor near the door, so she took of her socks. Bare feet seemed like a good way to start. The dress she'd bought special a few days before would stay on, for the time being at least.\n\nWhat looked like the kitchen beckoned, through an open door. She took the long way around the living room, to avoid getting too close to the couples having sex.\n\n\"Ash! Holy shit!\" Kelsey said. \"Did you sneak in through a fuckin' window or somethin'? I didn't even hear you!\"\n\nThe two girls hugged. Ashley hung on to Kelsey's warm, painted skin for a little longer than she normally would have, clinging to the sense of security she felt in the petite redhead's company.\n\n\"I bet you haven't seen Raymond since graduation, right?\" Kelsey asked.\n\n\"Jeeze, Raymond, I wouldn't have recognized you I don't think,\" Ashley said.\n\n\"I know, right? Kelsey said. \"He's all hip lookin' now that he lives in Brooklyn.\"\n\n\"Hi, Ash. How are you?\" Raymond said, hiding the lower half of his nakidity behind the kitchen island.\n\n\"I'm good. You're in Brooklyn? I'm in the East Village.\"\n\n\"See that?\" Kelsey said. \"You guys can play here tonight and then you can be fuck buddies down in the big city.\"\n\nAshley looked embarrassed by the idea, but a friend from home down there would be nice, she thought.\n\n\"Are my parents here?\" she asked. Raymond looked surprised, and Ashley looked embarrassed again.\n\n\"Yeah, Honey, they're upstairs,\" Kelsey said. \"It's wild and crazy, just about everyone's packed in up there. This party's gonna be legendary, I think. You picked a good one to come to. Your mom and dad took their time gettin' into things tonight, askin' about you and stuff. I think maybe they thought you decided not to come.\"\n\n\"I wasn't sure if I was going to,\" Ashley said. Kelsey could see the uncertainty in her eyes.\n\n\"Here. Down that and I'll give you another,\" Kelsey said, handing her a double Old Fashioned. \"There's a big pitcher right here, so you can fill her up whenever. We don't have to go upstairs, you know. Did you meet Margie and Sharron?\"\n\n\"No, I didn't,\" Ashley said, realizing Kelsey meant the two naked women in the living room.\n\n\"Ryan and Koop are nice guys,\" Kelsey said. \"We can have a nice party down here. What do you think?\"\n\n\"What do I think?\" Ashley said, after swallowing a big swig of sweet whiskey. \"I think this is the craziest thing I've ever agreed to.\"\n\n\"Crazy's good,\" Kelsey smiled. \"You'll see. Raymond, what do you think?\"\n\n\"I think...I'm glad I met you.\"\n\nKelsey's smile lit up the room. Sharron voice rose in the other room, with guttural vocalizations that told the world how much she liked Ryan's tongue.\n\n\"You glad you met Ashley, too?\" Kelsey asked. \"Hillydale High School rocked, didn't it?\"\n\nRaymond smiled. Kelsey squatted and pushed him a few feet out into the open, so Ashley could see his big cock. It was soft, but plenty swollen. Kelsey sucked it in and Ashley took another big gulp of her drink, emptying the glass.\n\nRaymond glanced at her while she filled her glass from the pitcher. Ashley felt his eyes on her and bushed. She wanted to look at the nice blowjob Kelsey was giving him, but she still couldn't get there. The whole thing still felt wrong.\n\n\"Jesus Christ!...Fuck me harder!\" Margie said in the other room, her voice breathless and urgent.\n\n\"Yeah, you go Margie!\" Kelsey cheered. \"She's so hot,\" she said to Ashley. \"She's my next door neighbor.\"\n\n\"Your next door neighbor? At your house?\" Ashley asked.\n\n\"Yup. The guy in the chair with Sharron's her sweetie, Ryan.\"\n\nAshley was amazed. She knew it was all part of the swinger thing, but it was still surprising to make the connections and realize how casually the swapping was happening.\n\n\"Come here, Honey,\" Kelsey said. \"Help me.\"\n\nRaymond's cock was fully hard. It was wet from Kelsey's mouth, glistening in the bright kitchen light, and a whole lot bigger than Ashley would have guessed it was.\n\nAshley didn't know why she did it \u2014 maybe because Raymond seemed so harmless \u2014 but she put her glass down after another big gulp and joined Kelsey, squatting on the kitchen floor. Hot, hard cock was the hors d'oeuvre of choice.\n\nRaymond groaned. Having two girls attack his tingling junk always amazed him. Ashley moaned, too. Feeling the warm hardness in her hand and in her mouth wasn't as strange as she thought would be. She'd expected to have to overcome the oddness of it all, but sucking a naked guys cock out in the open at a party seemed almost perfectly normal.\n\n\"I like your undies, Honey,\" Kelsey said, when the lacy strap of Ashley's bra came into view. \"If you wanna keep that pretty dress from gettin' all wrinkly you can hang it over the back of one of these chairs.\"\n\n\"Okay,\" Ashley said. She stroked Raymond's shaft with her hand and looked up into his eyes. It was now or never, she decided. He's a nice guy. I can show him my underwear.\n\nWhen Kelsey took over with a full deep-throat plunge onto Raymond's cock, Ashley stood up and walked over to the kitchen table. She had a handbag with her, which seemed ridiculous, so she hung it on the back of a chair. She unzipped her new dress and stepped out of it. The normalcy she'd felt a few minutes before was gone. Standing there barefoot, in a lacy bra and panties, felt decidedly unusual. Raymond smiled shyly at her. She needed to be back on her knees, next to the security of Kelsey where she wasn't so on display.\n\nSquatting again, with Raymond's cock in her hand, felt deliciously wicked. She glanced up at him, smiling when she realized his eyes were devouring her red lace bra and her tits. \n\n\"I bet you didn't know Raymond had a super nice cock, did ya?\" Kelsey asked. \n\nAshley smiled. The cock she was holding was a nice surprise, but the fact that she was on her knees in her underwater holding it, at a Christmas party no less, was just as surprising. She took it into her mouth again. A little whimpering moan gave away her excitement.\n\n\"Did you cum yet tonight, Honey?\" Kelsey asked Raymond as she gently massaged his balls.\n\nRaymond nodded.\n\n\"You know, you mighta fucked Ash's mom without even knowing who she was.\"\n\nAshley moaned on the big cock in her mouth. Raymond moaned, too. Kelsey smiled. Raymond had become quite skilled with his stamina, but Kelsey knew he had a weakness for new girls. She caressed his balls and the heat of his crotch, feeling him build to a fever pitch.\n\n\"Cum in her mouth, Honey,\" she said. \"Get her off to a good start.\"\n\nRaymond groaned at the two girl attack on his sanity. His hips writhed and his big cock throbbed, pulsing out a jet of hot cum in Ashley's warm mouth.\n\n\"That's it, Honey,\" Kelsey purred. \"That's it.\"\n\nA few minutes later, after Ashley had washed down Raymond's hot cum with a swig of her cocktail, Kelsey led her out to the living room, right next to Koop.\n\n\"Bend over, Honey, let him fuck you.\"\n\nJust like that, Ashley thought? No small talk? No...nothing? He was a plenty sexy guy \u2014 she'd thought so as soon as she'd walked into the house \u2014 but letting him fuck her like it was nothing seemed insane.\n\nAnd yet...she did it. Koop hooked the gusset of her panties with his thumb and pulled it aside, off of the dark, flower-petaly lips of her pussy, and pressed the tip of his long length into her wetness.\n\nOkay, this is fuckin' nuts! That's what Ashley wanted to say out loud, but Nat King Cole was crooning to her, and Kelsey seemed to have her hypnotized...\n\n\"Nice, huh, Honey? Just let yourself go. He'll fuck you real nice.\"\n\nKoop was in deep and Kelsey's words sounded like a dream. Ashley's body took over from her mind. She hadn't had many partners, and other than Austin the other night, none as big as Koop. His long, confident thrusts were tickling the goodies way up deep inside her, the same way Austin had done.\n\n\"Fffuuck!\" she mumbled.\n\n\"You like that, Honey? Want Ryan in your mouth?\"\n\nAshley nodded and grunted her approval. Ryan jumped to her service. She moaned deep when his fragrant, sticky cock filled her mouth.\n\nSharron and Margie looked on with little smiles. They loved watching Kelsey at work, orchestrating orgasmic bliss like a great conductor.\n\n\"This is her first time,\" Kelsey said to them. \"Her mom and dad are upstairs.\"\n\nIt was a statement that could have taken Ashley out of it, but it had the opposite effect \u2014 it triggered her. She convulsed into a kaleidoscopic orgasm that seemed to last forever, grunting like an animal, with long strings of drool hanging from her cock-sucking mouth.\n\n\"Yeah, girl!\" Kelsey cheered. \"Fuck! That's the way to get started. You're a party girl now, Honey.\"\n\nAshley's mind was a spinning mess. She was overwhelmed by having two men, men she didn't even know, take her so casually, and to such a high place. It was freakishly exciting. She didn't even realize until it was over that she had an audience.\n\n\"All that and you didn't even take off your clothes yet,\" Kelsey said. \"Pretty hot, huh?\"\n\nPretty hot? In Ashley's still spinning mind it was the understatement of the year.\n\n\"Hi, I'm Koop,\" Koop said, introducing himself to the girl he'd just fucked.\n\nAshley looked stunned but delighted. She chuffed out an airy giggle. It was all she could manage.\n\n\"I'm Ryan.\"\n\n\"Ashley,\" the stunned girl managed to say. \"Nice to meet you.\"\n\nMargie giggled. \"Wouldn't it be fun if everybody met this way?\"\n\n\"Ash, Koop runs the Jeep shop where my dad bought my truck, and Ryan's the cute farmer that lives next door to me with Margie here.\"\n\n\"Hi Ash,\" Margie said. \"Nice to meet you. So which ones are your parents?\"\n\n\"Oh, um...Rick and Donna...Welch,\" she said, starting to get her equilibrium back.\n\n\"I don't know if you met them yet,\" Kelsey said. \"Rick's the guy with the shaved head.\"\n\n\"Oh!\" Margie said, looking intrigued.\n\n\"Yeah, I know, right?\" Kelsey said. \"He's sexy. My mom said he fucks wicked good, too.\"\n\nAshley was starting to feel plenty awkward with talk of her father's sexual prowess being bandied about.\n\n\"I met them earlier,\" Sharron said. \"You look a lot like your mom, Ashley.\"\n\n\"Oh, yeah, a lot of people say that.\"\n\n\"So, we've got Kelsey and her parents, you and your parents, and Austin and his mom. This is turning into a family swinging club.\"\n\nAshley looked surprised. \"Austin's mother is here?\" \n\n\"Yeah, she's super hot,\" Kelsey said.\n\nAshley already knew that. Barbara worked for the dentist Ashley went to, and Ashley had long admired her attractiveness. She was just starting to wonder who else was upstairs that she might know when she heard footsteps coming down the big staircase, and a strangely familiar voice...\n\n\"Oh my God, Kelsey, this party is off the charts!\"\n\nIt was Jamar and Latanya, coming down for a drink and a little break from the action. Ashley immediately recognized him from Kelsey's porn. His Jamaican accent and his beautiful brown-skinned body were unmistakable. \n\n\"Hey guys, come meet my friend Ashley,\" Kelsey said. \"She's Ricky and Donna's daughter.\"\n\n\"Ricky and Donna upstairs?\" Jamar asked, looking interested. \"Yes, I see the resemblance!\" He walked over and hugged Ashley, who looked a bit stunned that a beautiful naked porn star was embracing her. \"Your parents are insane!\" he said, smiling wide. \"I mean that in the best possible way.\"\n\nLatanya hugged her, too. \"Hi Ashley, I'm Latanya,\" she said.\n\n\"You're the last hold-out,\" Jamar said, looking at Ashley's pretty lingerie. \"There's not a stitch of clothing on anyone anymore.\"\n\n\"Help her off with that stuff, Jamar,\" Kelsey said, winking a twinkling eye at Ashley.\n\n\"I'd be delighted,\" he said. \"You sure you're ready?\"\n\nAshley nodded. \"I guess so. It feels dumb to be the only one.\"\n\nShe turned her back to Jamar, somewhat nervously, so he could unhook her bra.\n\n\"Yeah, there's those nips,\" Kelsey said when they came into view. \"They're super sensitive, you guys.\"\n\nJamar tossed the bra onto the couch and put his hands on Ashley's sides, letting them slide up her goosebumpy skin to her tits.\n\n\"Fuck yeah,\" Kelsey said, loving the way the big, dark hands looked on the creamy white tits. \"I should have a camera for this shit.\"\n\nAshley looked down at the same sight, and another hot breath huffed out of her. Jamar's warm body was up against the back of her, and she could feel his big cock hardening.\n\n\"Panties now,\" Kelsey said. \"Get that girl naked.\"\n\nJamar dropped to his knees, sliding his hands down the tingly flesh to the lacy panties. He pulled them down over Ashley's curvy ass, and buried his face in her crack.\n\n\"Oh God!\" she moaned.\n\n\"His tongue's almost as long as his cock,\" Kelsey said.\n\nAshley was already starting to realize that. She was astonished at how it was exploring. She moaned again, arching her back to give Jamar better access. Kelsey stepped in and kissed her, wet and deep.\n\nSomehow Ashley had become the center of attention again, but she didn't care. It was all too thrilling.\n\nWithout even knowing how it happened she found herself on her knees with the most beautiful cock she'd ever seen heading for her open mouth\n\n\"I hope you don't mind tasting your mother,\" Jamar said, with a sly smile.\n\nAshley's lungs huffed out a breath. She looked up at Jamar with surprised eyes and gobbled up his big black dong.\n\n\"If you're into it, you can probably eat your father's cum out of Lataya's ass.\"\n\n\"That man can fuck!\" Latanya said with certainty.\n\n\"I swear to God, Tucker should hire him,\" Jamar said. \"Donna, too.\"\n\nAshley's mind was spinning in all directions. She tried to concentrate and give a good blowjob, but she kept thinking about her mother and father. She was starting to realize she had big shoes to fill, and a lot to learn. It was an odd feeling, something she never in her wildest dreams thought she'd be thinking about.\n\nThe blowjob was dreamlike, but it didn't last long. Did Jamar not like it, she wondered? Once again she found herself, without really understanding how, lying on the couch with him behind her, spoon fucking her from behind. He held her leg up high, letting everyone see his big cock do the carnal defiling. It didn't take long for Ashley to go over the top.\n\n\"There!...There!...There I go...!\" she said, her soft, excited voice giving a breathy, sexy play-by-play. Her throat muscles went as spastic as the rest of her, garbling her orgasmic noises as the head-rush reached epic proportions.\n\n\"Fuck!\" Kelsey said, watching her. \"You aren't gonna have any brain cells left tomorrow, Honey. We're just gettin' started.\"\n\nBoth Sharron and Margie wanted a piece of Jamar, so he happily tore into both of them while Kelsey, Ashley and the others went into the kitchen. Ashley felt as sexy as she ever had in her life, standing around casually naked with everybody. He brain was full of happy juice from the orgasmic afterglow when her mother entered.\n\n\"Ash? Oh my God! We didn't think you were coming!\"\n\n\"Oh. She's was cummin' all right,\" Kelsey said. \"Two or three times already.\"\n\nDonna didn't know what to say.\n\n\"Hi, Mom,\" Ashley said, holding her drink up so her arm covered her tits a little. \"This is weird, huh?\"\n\n\"Just right now,\" Donna said. \"It won't be. I'm so glad you're here.\"\n\n\"Me too, Mom. Where's Dad?\"\n\n\"I don't know. I think maybe in the blue room. There's two women tied up in there.\"\n\n\"You guys don't keep track of each other?\"\n\n\"We used to, years ago, but then we found that it's more exciting to just stumble into one another once in a while. It's like a surprise.\"\n\nDonna looked out through the doorway at the way Jamar was driving Margie to the brink.\n\n\"Jamar got a little mother/daughter action tonight,\" Kelsey said slyly.\n\nIt took a moment for Donna to realize what she meant, but then the light bulb lit up and her eyes got wide.\n\n\"Ash?\" she asked no one in particular, looking at her daughter.\n\n\"She cums wicked,\" Kelsey said. \"From what I've heard, it runs in the family.\"\n\nDonna smiled sweetly, with a misty tear in her eye. She went to Ashley's side and put her arm around her.\n\n\"I love Christmas,\" Kelsey said, just as Margie lost her mind in the other room.\n\nAshley and her mother had a quiet talk at the kitchen table, the first time they'd ever been naked together. They sipped their drinks and smiled, both of them happy that their worlds had come together in such an adult way. Ashley was still nervous about seeing her father, though, so Donna assure her she'd keep him upstairs for a while.\n\nAfter Donna left, back into the fray of the upstairs fuck-fest, Ashley climbed onto Ryan for a cowgirl style ride on the couch. It was a wonderful thrill, being able to just wander over to a cute guy and fuck him, just like that.\n\nJamar and Latanya had gone back upstairs and Kelsey was up there, too, so the downstairs was quiet and intimate. Dean Martin had taken over the singing duties, and the wood stoves were cranking out heat.\n\nRich wandered down the stairs, headed for the kitchen, his cock still mostly hard but hanging low. Ashley knew him. Her mom and dad used to take her to Rich and Jessica's restaurant when she was a kid and all through high school. She always found him attractive, in an older man kind of way.\n\nIt was a shock seeing him naked, and putting two and two together about he and his wife being swingers. Ashley caught his eye when he walked by. It took him a second to realize who she was. She'd lost quite a bit of weight and, well, he just hadn't expected to see her at one of the parties. He smiled a little, and raised his hand for a casual wave. It struck Ashley as funny. She was sitting up on Ryan, fucking him slowly. A smile creased her face and she waved, too. Rich disappeared into the kitchen.\n\n\"He's an old friend,\" she said as she lifted her warm, fuzzy feeling pussy off of Ryan. She bent down, kissed him and smiled. The smorgasbord aspect of a sex party was starting hit her, and she liked it. She liked it a lot.\n\n\"Hi Mr. Potter,\" she said when she entered the kitchen.\n\n\"It's Ashley, right? I'm Rich.\"\n\n\"Do you still have your restaurant?\"\n\n\"Yup. Still pluggin' along.\"\n\nAshley felt like her body and mind were humming with energy. She was shocked that she could be standing there so casually, showing off every inch of herself to a naked man she hardly knew. It was crazy and stupid and thrilling and wonderful.\n\n\"Your wife upstairs?\"\n\n\"Yup,\" Rich said, smirking a little as he took a swig of his freshly opened beer.\n\n\"You're, like, my dad's age probably, right?\" Ashley asked. She tried to keep from showing any emotion, but her eyes gave away her happy excitement.\n\n\"Yeah, I think so. What do you think of us older guys?\"\n\n\"I haven't come to any conclusions yet,\" she said, glancing at Rich's obviously swelling cock. Her face betrayed her, breaking into a shy, sexy smile.",
        "\"I'd be happy to help you try to figure it out,\" he said as his cock lifted, bobbing gently with his heartbeat.\n\nThe seduction, and the visuals, were too much for Ashley. Her heart pounded as she moved to Rich and dropped to her knees. His cock smelled like sex and tasted like man. Ashley moaned on it when its warmth filled her mouth. A few minutes later she was bent over the kitchen counter with her pussy full of cock, her head lying between her arms on the cool ceramic tile. She moaned, over and over again, with closed eyes and a happy looking mouth.\n\nRich built things up slowly, which was fine with Ashley. She luxuriated in the long, slow fucking, but her body was ready when Rich gave her more.\n\n\"Oh God!\" she sighed, breathing out deep lungfuls of air. Rich was breathing out deep breaths too, and Ashley loved the sound.\n\n\"Fuck you feel good!\" he whispered on a hot breath.\n\nAshley smiled. Rich's words sent her in the right direction \u2014 up...up...and up even farther. Her body felt molten. Rich was thrusting smooth and deep. He could sense it was perfect for Ashley \u2014 she was riding the wave. It was only when she thought about who it was behind her that she hit the brink. The handsome man from the restaurant. Dad's friend. Mom's lover...\n\n\"Ffffuckk!\" she squealed. Her muscles tensed and spasmed. Her molten pussy squeezed tighter.\n\n\"Ssshiiit!\" Rich gasped as his cock pulsed deep inside her. Ashley's pussy milked the few drops he had left in him.\n\n\"Holy shit!\" she sighed as the fucking slowed to a sweet ending. \"Okay, that was...awesome,\" she said, looking happy, proud and shy all at the same time.\n\n\"Did I score a point for the old guys?\" Rich asked, looking pretty happy himself.\n\nAshley just smiled.\n\nTen minutes later she was out in the cold, her excited breath huffing out in clouds that drifted into nothing. The snow squeaked beneath her boots. The stars looked almost as bright as the moon. Her mother's car groaned to life and she sat there while it warmed, looking up at the fuzzy blue light oozing out of the upstairs room, and the warm, dim light in the rooms either side of it. Blurry, flesh colored figures moved behind the frost covered glass. Her dad was up there, and her mom. What were they up too, she wondered? Maybe she'd find out, some other time."
    ],
    "authorname": "riverboy",
    "tags": [
        "orgy",
        "christmas",
        "holidays",
        "black cock",
        "first orgy",
        "daughter",
        "parents",
        "rock concert",
        "swingers"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/kelseys-world-ch-29"
}
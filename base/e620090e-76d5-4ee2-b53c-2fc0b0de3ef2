{
    "title": "What Every Man Wants",
    "pages": [
        "There are articles in abundance on what women want and need. There was even a movie recently, with Mel Gibson, about our secret feminine thoughts and desires, men spend hours trying to figure us out and what we need, but do we try to figure them out? You don\u2019t see many about what men need and want, and they can be as mysterious to us, as we are to them. All women think they need to do is, rope \u2018em, hog tie \u2018em and throw \u2018em in the barn\u2026well men ain\u2019t cattle girls, they know how to open that barn door even if we get them in there. \n\nUsually all you read is bitter accounts by angry cold women, about why men aren\u2019t worth much, and how to avoid the ones who may not be easy to catch, complete with titles and types and assessments of why you don\u2019t want one like THAT\u2026 Well, ladies, I catch them\u2026and if you want a good one, well, you better start figuring out what he wants or you aren\u2019t going to get him, let alone keep him. My men are trying to figure out how to keep me, not escape me.\n\nEvery woman knows men are into chemistry, although what it is, is a bit unclear. What it is is sex appeal, it is, they want to appeal to us sexually, and for us to appeal to them sexually, is really all that is, it\u2019s not looks or weight, or height or make up, it\u2019s how we look at them and how we make them feel, if we make them feel like males, deep inside, they\u2019re attracted to us. They\u2019ll admit to that readily enough, but to get inside the mind of a man, to learn what it is that makes him choose to stay and commit? That\u2019s the secret ladies, they have to want to commit to us. Most of us can all do enough to get them to stay for breakfast at any time. It\u2019s keeping hold of them that\u2019s tough. And to us, we want that commitment and they know it, but many of us want it because their paycheck comes with it. They want their money\u2019s worth, and that is fair, girls, it is. They aren\u2019t about to tell us this though, because they know we can be determined and devious. The line the bride sings walking down the aisle, of \u201cPhew, I\u201dll never have to do THAT again!\u201d Is a little too often true. They want truth and beauty, not to be a victim of some woman with a need for income. They believe in love more than we do at times. \n\nMen hit about 35 and begin to wake up to a silent urging to procreate and nest, they reassess their life in the wild, and begin to consider settling down, they get as broody as any woman does. Or if they have procreated and nested, they begin to feel the urge to stretch their wings and fly, to seek out more, and feel the wonder again. Men aren\u2019t one dimensional, is part of that, they need both, passion and comfort, home and freedom and sensuality, they\u2019re really somewhat simple, they\u2019ll give us everything if they can just be a star in their own lives. That\u2019s really all it takes. That and they want an interesting life. Give them that, and they\u2019ll line up to commit to who ever gives it to them.\n\nYou\u2019ll hear wives lament and whine that he\u2019s cheating on her, but what you don\u2019t hear is why he is, and it\u2019s not just some younger body, it\u2019s\u2026 she\u2019s interesting and the wife isn\u2019t. The wife has become dull and boring, and to her, all life is about is vacuuming the house now, and she yells at him and whines at him, just like she does after he flies the coop! and he\u2019s tired of sleeping with the maid whose got attitude, who\u2019d want to sleep with a bad tempered tyrant! \n\nHalf of that is she berates him, it\u2019s never enough, take out the garbage, fix the car, when are you going to mow the yard, she becomes this chore monger, another boss, so he has two jobs, not a home and a career. And she only lives to do chores, herself, he earns, he works, he takes second place in his own life, he is the gadget man, the vacuum cleaner with a mind, the guy who keeps life orderly for us, and not much else. The kids matter more, and Little League does, hey, girls, if they did that to US, we\u2019d leave, in a second! And do. We\u2019d never put up with working all day and handing over our check only to come home and get yelled at? And she wonders why he left?! Someone was nicer to him is why, and she wasn\u2019t\u2026You can\u2019t keep cows in the barn if you leave the door open, ladies! Get a clue wifey, you weren\u2019t what he needed, you were too busy making cupcakes to notice him, you said no fourteen times a week? And you didn\u2019t keep your buns firm or your underwear sexy. You bored him into leaving and you berated him for not liking you that way. And you follow it up with insulting him after the fact that he\u2019s shallow, and he has the problems! So were the cupcakes for the bake sale really THAT important? Cause you sure act like they are! \n\nMen want fantasy, they want entertainment, they want the princess we are, they want the fairy sprite, the little girl in us who dreams, they want eternal youth from our INSIDES, but they also want the slut lurking within us all, they want excitement and to fly, and then land safely, they want to be our wings, our angels of destiny and if we deny them that part of us, if we refuse to go with them or let them take us on their flights of fancy, they lose, but so do we, all we are is housekeepers then, neither queen or whore, and not their partner in life either, we become grounded as the world moves on without us. We just exist to make dinner, when we could be going on exotic trips and living a life of dreams. We choose to be dull and boring, and then whine they don\u2019t. \n\nClassic sex symbols, from Mae West to Madonna, from Liz Taylor to Brittney Spears, are women men dream of, women of passion and fire, women who are playful and adventurous and have a natural sexuality. Men, dream of a nymphomaniac in their lives, or at least one who can be one at times? They want to be cherished, and adored and worshipped, and they should be! They want to be teased and pleased and played with. They want a playmate, a friend and a confidant. They want a woman who makes them proud, who their friends go WOW, where\u2019d you find THAT one, you must be a stud huh? To keep HER! It\u2019s a man thing, it\u2019s pride, its competitiveness, it\u2019s what makes them happy\u2026its what makes them manly, ladies, if you want him to be more of a man, be more of a woman! \n\nThey want a princess to provide for, they want a woman who sparkles at them when they do things for her, and sighs and coos. They want her to be pleased, and surprised by their efforts to win her and appease her. They want to chase her and feel her give in to them. Ladies the guys want romance, not pink lace, real romance, the kind with feeling, the kind that has candlelight and soft music, and sighs, they want the longing glances and the deep involvement. And we sort of end up handing them Chef Boyardee and saying What\u2019s your problem? Well, gosh, dinner from a can, might be some of it, the Dog eats dinner from a can, and we pet the darned dog at least? Or I pet mine, but maybe my dog lives better than your man does too? Consider that. That\u2019s sort of sad isn\u2019t it, for him.\n\nThey want her to be glamorous at times, slinky and sexy. They want her to be natural at times, and able to get ready in less than an hour, they want her in baseball caps and jeans, as they sit and fantasize about how hot she was last night, and watch her looking like a tomboy now. They want her to like their bodies, and revel in them, as males, to act like a greedy sexual creature who can\u2019t get enough, at times, as well as listen to their thoughts, and try to make their dreams come true.\n\nThey want her to be all the women in the world at once, pure and innocent, devilish and dangerous, squirmy and high spirited, needy and soft, nurturing and comforting, and sexually awake and aware of sensual pleasures. They want the mother in us, the sister, and the slut, they want us to be as multi-dimensional as they are. They want the lady in the living room, the whore in the bedroom, and always have. Be that, and able to carry on a conversation about something other than yourself and your interests, and they will all eat from your hand, with pleasure. \n\nAnd if we give them that, they really don\u2019t care if we make dinner, or vacuum, they\u2019ll do it, they\u2019ll hire a maid, or they\u2019ll take us out to dinner! Trust me on this, ladies, I don\u2019t do housework! I do keep my passport handy just in case. It takes so long to go back for it, is why, we may miss the flight! I go places, I do things, I get taken out, and away, and I love that I do, they carry my bags, they open doors, and they buy me things to please me! And they call later! I love men, and it shows, and they love me right back! \n\nThey don\u2019t want to hear, oooh, yuck, and no way, and you\u2019re kidding, I\u2019m not doing that! They want her to blush and go really? You want me to do that, for real, and try it\u2026they want us to tell them that things feel good, and why, and how to touch us. They want to please us so we do go out of our minds with pleasure. They want to know what we think, but not about the sale at the grocery store, to them it doesn\u2019t matter! It doesn\u2019t! Who cares if lettuce is twenty cents less, like change matters? Now if you could do something sexual with that lettuce they\u2019d want to know about that. They want to be pleased, surprised, seduced, coveted, treated with awe, and worshipped, that\u2019s all! They want to be on a pedestal, just like they put us on one! And for that, they will give us everything they have, can find, can earn and look for more if it pleases us. We become their goddess, but only if we make them our gods\u2026\n\nI\u2019m sexual, very\u2026I like sex, I like a lot of it\u2019s aspects, I enjoy exploring it, and adventuring in it. And there are men, who don\u2019t like it as much as I do, that prefer quieter realms and softer ones, there are compatitble types, there are. But they still crave the sex, the affection and the bonding, and they have to have it ladies, it isn\u2019t about they physically need, it\u2019s how they express themselves to us, if we would only learn to listen! It\u2019s their language, it\u2019s primal, it\u2019s instinctive and it holds them totally in its\u2019 thrall, when we deny them that, they have to go looking, it\u2019s male. They cannot survive without it, and neither can I. \n\nI like a lot of different flavors in life, from the spicy to the sweet, to the hot and ice cold, salt and vinergar to sublimely mild. I like tastes, I like feelings, I like emotional intercourse, which by definition is communication. When we bond together in physical unity we can\u2019t hide from each other, we allow each other inside us, and to me, life without that is pretty boring. \n\nChanging our approach is so easy, it really is. When we join that exercise class at the gym, instead of whining about the effort and expecting to be praised, all we have to do is strip down and show them our behinds daily and say, \u201cWhat do you think, is it getting smaller, is it getting tighter?\u201d And they love it, and smile, and go hmmm, some, come over here, let me check closer. Then it becomes, for him, we work out, and then they\u2019re more than happy to share it\u2026they\u2019ll check our progress with glee\u2026and insist we take more classes, if they get to be part of it like THAT?\n\nIf we make dinner, add candles, dress for him, cook in just an apron for heavens sake? Want him to take out the trash more? Stand there naked. Wear a thong\u2026and say, Like this? Well, as soon as I take out the trash? If I\u2019m still in this mood\u2026the trash is gone, girls, never to be mentioned again\u2026if he forgets? Wear that same outfit\u2026he will learn fast\u2026see thong, take out garbage, get some, it\u2019s like electricity to men. They\u2019ll move so fast and while they\u2019re out there, they\u2019ll put your car away and close the garage door, they do not want more interruptions! As in phew, got her mind on me finally\u2026I got to keep remembering that trash, or yikes she\u2019s gonna find someone who will! Men learn so much quicker than we do. It is just about motivation, use that, there is no You forgot the trash again, oh no, he won\u2019t forget\u2026every day for six years, he\u2019ll remember the naked woman saying I\u2019m gonna take out the trash now\u2026like his own private pin up girl. \n\nAnd kids? Oh right those anti-romance creatures, uh, feed them early, put them to bed, they\u2019ve had you all day? Daddy\u2019s turn. Get a sitter, trade with a neighbor down the street, you keep mine tonight, I\u201dll keep yours tomorrow night\u2026just give that man, some of what he needs, he\u2019ll be happy! He had the kids, he loves them, just once in a while, he wants to play with the grownups too. And it doesn\u2019t hurt the kids to be told, Mommy and Daddy are going to play together tonight, it\u2019s our turn. You guys are going to bed early so we can. Give you Dad kiss now, night night.\n\nAnd if I hear one more woman tell me she\u2019s tired, in this day of electric appliances and television, here\u2019s my answer\u2026you will be more tired if you work all day and come home and then take care of the kids and have no one to help. Take a nap, plan it, don\u2019t wear your self out dusting once in awhile, schedule your man like he matters! Quit whining, once women made the soap, spun the cloth, plowed fields, baked bread, ground flour, knit the socks, and still had the energy to kiss him hello and wrap her arms around him when he walked in, so what is your excuse? The dishwasher door was so heavy to close you\u2019re tired now? He worked all day, he\u2019s tired too! And all he wants is a cuddle and a squeeze and a big smile to see him and to cop a feel, like that\u2019s hard to give him? Uh, give it to him ladies, or know, someone else will.\n\nMen need several things, acceptance of their masculinity, pride in their existence, self esteem, love, affection, sensual pleasures, credit for their contributions, titillation and warm welcome, and to be important in their own lives and for that, they will give you everything they can gather to honor you and please you, they\u2019ll lay anything at your feet, if you just treat them with respect and admiration. \n\nIt\u2019s our call girls, it is\u2026and it\u2019s ok with me, if you don\u2019t want to wake up to it! Cause your husband takes me to Mexico while you\u2019re busy at the PTA meeting, and I like going on trips to exotic destinations\u2026and being treated like I\u2019m important and wined and dined and catered to. You can do the PTA if you want? It\u2019s ok with me! \n\nDoubt me? Ask any man. "
    ],
    "authorname": "almost",
    "tags": [
        "men dream",
        "men aren",
        "make dinner",
        "women men",
        "make feel",
        "men",
        "man",
        "make"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/what-every-man-wants"
}
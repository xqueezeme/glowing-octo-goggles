{
    "title": "Brain Games Ch. 17",
    "pages": [
        "Brain Games Ch. 17\n\nSaturday morning dawned to low, menacing clouds, and squalls of driving rain. It was far more stormy than the usual spring showers, and the news talked about tornado warnings. Multiple converging storm fronts.\n\nZach invited Maddy for morning coffee.\n\n\"I've figured something out. The professor has something in my head, not physical, but you know. His superpowers are miles stronger than mine. If it's like the X-Men, he's Mr-fucking-Magneto and I'm some tiny pawn. Magneto is the villain right?\"\n\n\"I don't watch X-Men. But I think theres a Professor X or something and he actually does the mind control. Magneto controls... magnets.\"\n\n<br >\"But that's Patrick Stewart. He's a good guy. I am pretty sure Enkins is not a good guy. Ok, bad analogy. Moving on. Enkins has something like a mind-virus in my mind, and he uses it sometimes. He used it on Lisa, making Lisa my... whatever. He says its to protect me, but don't think so. The point is I found it. And, there's something more.\"\n\n\"Ok...\"\n\nZach found he still couldn't mention the Goddess. He started to and then his voice caught.\n\n\"What?\" Maddy asked.\n\n\"Ah, darn it. Well there's another element that apparently I am stopped from telling you about. There's more than just Enkins. And I don't know if that's good either.\"\n\n\"Where's all this going?\" Maddy followed up.\n\n\"I think I have a way of getting out of it. At least once. I have... an ally.\"\n\n\"Me!\"\n\n\"Well, yes, I hope so. And also, something else. Remember when I said something weird happened? Well, I used the energy with Katya to turn the tables on that, and now I have an ally in the, what to even call it? The world of superpowers. I actually have a couple, but this one is... powerful.\"\n\n\"Hang on, I need more coffee.\" While Maddy refilled her cup, Zach organized his thinking.\n\n\"This is what I have figured out. Sex creates energy, or taps into it in some nearly limitless way. And I can to a certain degree use it. But I'm not very good with it. However, I think this ally does know what to do with it, and will help me get out from Enkins' control. But...\"\n\nMaddy watched him expectantly.\n\n\"I'm going to need more energy. Possibly a lot more. I have used everything I can just to get this thing on my side, and now it wants more to do whatever it needs to do.\"\n\n\"Sounds like a deal with the devil kind of thing,\" Maddy said, cautiously. \"Are you sure it's really on your side?\"\n\n\"Nnnn... well yes.\" Zach went from remembering the horrific spideriness of the spirit to the genuine laughter and sense of affection from it. \"It's also not good. In fact, I'm thinking none of this is about good or evil or anything. But this thing is on my side... and not on anyone else's.\"\n\n\"Ok, so you want to get it on with me and Mia? Believe me, after yesterday's performance with Katya, we're down with it. And Lisa can't stop talking about you, either. You really did a number on her.\"\n\n\"A good number,\" Maddy hastened to add. \"She was so fucked up before, with all her religious stuff. Now... well... the pendulum has gone to the other side. I bet we could get her in on it too.\"\n\n\"I don't think I need more people, Maddy. In fact, I think that makes it more confusing. I need one person. One person I trust. One person I care about. And it's not that I don't care about Mia, or Lisa, or Katya for that matter, but the person I care most for is you.\"\n\nThe words surprised him, even as he said them. He had not been intending to say anything like that. He knew it was not coming from Enkins or anywhere else. He felt the truth of the words, even as he uttered them.\n\n\"Oh,\" Maddy said. She frowned. \"Zach: I feel very cautious. I will admit, I spent some time mooning over you this semester. I might have even done some pining. But things have gotten real. Things got real with you and me, and you disappeared. Things have gotten real between Mia and myself also\u2014and she's there for me. What's going on is weird. It's awesome! I love it! It's scary. I'm scared of it. It's freaky. I don't know what to think... and what you are telling me now isn't exactly helping. I don't want it to be serious, Zach. I don't want a battle between invisible demons and X-man professor villains. I wanted to have a bunch of fun. I liked playing with fire, so long as it was a candle. But you have a bit of a dumpster fire going here, and... I mean, I like you Zach... And...\"\n\n\"But no,\" Zach answered for her.\n\nMaddy frowned, thinking. In this moment, Zach loved the way her thin eyebrows seemed to curl inwards as she thought. Zach realized he could push her over the edge, and she would never know. A little tilt here and a little tug there, and she would be all in. And then he would be the villain.\n\n\"Thank you,\" he said. \"Thank you for telling me how you feel. I totally get it.\"\n\n\"Not 'but no'... Zach... And yes. This is all fucking insane. I'm the only one we can guarantee is on your side. And yes. Let's make some more crazy shit happen. But first, I think we need to get to the bottom of something. There's one more wild card in the deck.\"\n\n* * *\n\n\"That's her,\" Zach said, looking over Maddy's shoulder.\n\n\"Jenny Li. Senior. Political science and pre-law.\"\n\n\"No cell phone, just email.\"\n\n\"I'll send the email,\" Zach said.\n\n\"Nope. I will.\"\n\n\"Then I'll book a study room at the library for this afternoon &amp; we'll hope she checks email. I don't get the feeling she's going to be hanging out at Downlo or the like. More likely she has an off campus apartment and a cat and sips tea while studying law books.\"\n\n\"Sheesh, stereotype much?\"\n\n* * *\n\nJenny showed up, right on time.\n\nThe room was small, windowless, mostly sound proof but with a glass door and a security camera, all undoubtedly to discourage shenanigans.\n\nFor once, that wasn't Zach's intention.\n\n\"You two!\" Jenny said. \"I might have known.\"\n\n\"Hi,\" Zach said, but before he could say more, Maddy put her hand on his arm.<br ><br >\"Sit down, Jenny. We need to talk.\"\n\nJenny sat. She had a round face, very pale, with a hint of dimples. Her long dark hair fell with stylish waves to her shoulders. There was a glitter of amusement in her black eyes, and an arch to her brows suggesting curiosity.\n\nMaddy went on: \"Zach here has been having some strange experiences, and we think you might know something about it.\"\n\n\"Oh?\"\n\n\"And you clearly know who we are. You seem to know more than our five second encounter in the library the other day would lead us to expect.\"\n\n\"Hm.\"\n\n\"So, now, we want to know if you can help.\"\n\n\"Help? With what?\"\n\n\"I think you know.\" Maddy crossed her arms and waited.\n\nJenny crossed her arms as well.\n\nZach couldn't get a read on her, so he let his attention soften outwards.<br ><br >\"Don't,\" Jenny warned.\n\n\"Yeah,\" Maddy said. \"Don't.\"\n\nZach sighed.\n\n\"Ok, so, your man has encountered a yaojing, yes? And now I see he has several following him around, including a rather potent one. But that's not the problem. He has them mastered. You must beware of the powerful one, however, it was stronger once, and seeks to be so again.\"\n\nMaddy opened her mouth to speak, and didn't.\n\n\"Yes, yes, I see these things too. Because I am an exotic oriental and we know the secrets of the Universe,\" Jenny laughed derisively.\n\nMaddy shook her head. \"Well, you have a Boston accent, for what it's worth. But seriously, how do you know this?\"\n\n\"I see it. Let's see, you are Madeleine, called Maddy. He is Zachary, called Zach. You are lovers. Zach has five yaojing, three outside and two in. The inside ones are the problem. They are interesting though, aren't they? I haven't seen anything like that before. So, you see? I see! But I can't help. You would need my Mom for that.\"\n\n\"Where's your Mom?\"\n\n\"Boston. Duh.\"\n\n\"Well, she's not much help to us here.\"\n\n\"And neither am I. Good luck. Don't get eaten!\"\n\n<br >Jenny stood and started to go.<br ><br >\"Wait!\" Maddy shouted. \"You can't just tell us all that and not help!\"\n\nJenny leaned forward: \"Only a fool plays around with the tao like this. Look what a mess you have made. You two may be fools, but I am not a fool. Nor am I an expert. Nor do I want to be. Also, I am not your friend. I am not your family. So, most certainly, I can decline to assist you in further foolishness.\"\n\n\"But...\"\n\n\"But if I help, and it goes wrong, then it could affect me. If I even give you advice, I could incur liability. And that I have no intention of doing.\"\n\n\"But... you said it was interesting! Aren't you at least curious?\"\n\n\"As I am curious about many things that I do not have time to learn. I am also curious about gravity. Do you know that for all the most advanced physics we still don't have the slightest clue what gravity is? But right now I am curious about Helen Palsgraf vs. the Long Island Railroad Co., and I am going to return to reading about it. Good bye!\"\n\nWhen the door swung shut, Zach said. \"Well, that didn't go well.\"\n\nMaddy was already on her phone. \"Wikipedia says a yaojing is a kind of chinese monster. It's a seduction spirit. It's related to the word for 'weird.'\"\n\n\"Weird is right,\" Zach said.\n\n* * *\n\n\"We need the room,\" Maddy said, grabbing a towel to wipe the rain off her hair.\n\n\"Can I watch?\" Lisa asked.\n\nMaddy rolled her eyes. \"Not this time, sweetie.\"\n\n\"I wasn't asking you,\" Lisa said curtly. \"I was asking Zach.\"\n\n\"We need to do something special,\" Zach said. \"But I promise, you and I will have all the time in the world, soon.\"\n\nLisa caressed herself suggestively. \"I hope so, sir!\"\n\nOnce she had left, and Maddy locked the door, Zach said: \"I think I may have gone too far with Lisa.\"\n\n\"Maybe, but she's wound tight as a spring right now, so don't let her go just yet. I think we need to help her find her balance, when the time is right. Which it is not.\"\n\nZach pulled out the desk chairs to face each other in the small space between beds, and sat, indicating Maddy sit facing him, as they had before.\n\n\"I've thought about this quite a bit,\" he said. \"And I want to let you know that I heard you when you said you just wish it could be fun: I want that too! And I hope we can get out of this whole Enkins trap and get back to that. Because I have also thought about all the ways I would love to have fun with you.\"\n\n\"And Mia!\" Maddy added.\n\nZach's grin broadened, but faded quickly. \"Yes, and whatever else you want. And whatever else I want. Yes! But first...\"\n\n\"Look at me,\" he said, shifting his tone, and straightening. He brought his awareness into the spaciousness of feeling all around them. The locked their gazes together, and Zach felt the world begin to darken around them. He looked at Maddy and felt her simmering arousal, and he consciously boosted it. Her eyes widened. Her breath quickened, but they kept their focus on each other.\n\n\"More,\" he said, dialing up the fires again, and feeling his own surge meeting hers. She rocked her hips against the plain wood chair.\n\nHe began to weave their containment bubble, looping the strands of light. It was the finest he had yet managed, smooth and solid, the loops of energy very close to regularly spaced. He did so with his spider spirit inside, his own yaojing. He got the query from it: Now? There were fragmented images of Enkins being spun into a coccoon. A ringing started in his ears.\n\n\"Strip,\" Zach said, and held Maddy's gaze as she eased out of her clothing. Seeing her smooth skin, her delicious breasts with their perfect nipples... seeing that her pussy lips were already glistening with anticipation... Zach felt the urgency intensify. Remembering Enkins, however, he very carefully let his desire relax away even as the arousal strengthened. He realized these were two different things, and any hint of the desire that began to cling to his mind, he immediately fed to his yaojing, with images of it carefully separating Enkins from his mind.\n\nFinally Maddy stood completely naked before him. Zach stood. \"And now undress me,\" he said, \"but keep looking into my eyes.\"\n\nWith only a little fumbling, this was accomplished. Maddy had to very consciously force herself to keep her gaze connected when she released Zach's hard cock from his boxers, and Zach particularly savored the way she licked her lips.\n\nBut he continued to intensify the bubble, and increasing the flow of energy to his many-legged ally.\n\nZach ran his hands over Maddy, rediscovering all her slender curves, reveling in the smooth sensation of her skin on his palms.\n\nHe sat and guided her to sit astride his legs. It was not a comfortable chair, but at least it had no inconvenient arms. He settled her weight on his thighs, feeling himself pressing up against her mons. She leaned into him, belly to belly, heart to heart.\n\nHe ran his hands from her ass up her back, up into her hair, and he brought her kiss to his.\n\nThe sheer simplicity of it was perfect.\n\nHis arousal meeting hers, all the pleasure of their bodies rippling between them both. He continued to feel surges of desire, the craving of want: wanting to taste her, wanting to thrust his cock into her, wanting to hold her closer, closer, closer. But with each image, each thought, he took the power of the desire and fed it directly to the spider.\n\nHe let Maddy's desire be, however, and she began rolling her hips against him, rubbing her clit against the edge of his erection.\n\nHer breathing grew faster and shallower.\n\n\"Slow,\" he said. \"Feel it all with me.\"\n\nHe deepened his own breath, and invited her to come into unison with his breath. They calmed a little, and found the pleasure grow. Quivers and ripples.\n\nHeavy rain battering the windows gave the warm, dry dormitory room an even cozier feeling.\n\nZach scooped his hands under Maddy and lifted her to bring his lips to her breasts. A swirl of emotions went through him. Delight, affection, love. He kissed her with all of it, pressing his joy into her with his lips, with his tongue, with nibbles at her flesh that brought a deep moan from her, as she pressed the heart of her sex against his belly.\n\n\"Do you want this, Maddy?\"\n\n\"Oh God, Zach, I want it sooo much.\"\n\n\"Even with all my... weird stuff?\"\n\n\"Yeah, Zach. So much.\"\n\nHer words stirred something in him; that powerful desire to lift her, to throw her on the bed, to completely take her. But he caught it, and again fed the desire to the yaojing, which was delightedly gorging itself. At first it had been a shadow at the edge of their bubble, but now it was a shining light in its own right.\n\nZach gently guided Maddy down, bring the head of his pulsing, twitching cock between her labia. Tilting her head into another deep kiss.\n\n\"Together now,\" he said.\n\nShe eased herself down on him. There was that pop as the head of him wedged into her, and then she enveloped him in a slow, smooth settling. He tilted his hips, moving down the chair a little to allow her access to his full length.\n\nShe began to rock against him, and each roll of her hips sent huge waves of pleasure through him. The light that grew within them filled the space around them. Soon it was not a matter of feeding it to the spider spirit, but rather all of them dissolving together in a single bliss of light.\n\nThere were sounds: both Zach and Maddy giving utterance to their pleasure\u2014moans and grunts and sounds of delight. There was the wet sound of their bodies sliding together, growing wetter as Maddy churned herself around Zach's hard, thick cock.\n\nThere was a powerful cloud of scent, sweat and sex, pheromones and hormones, a heady concoction of organic chemistry.\n\nZach tried to keep his eyes open, and mostly they both succeeded, holding the visual connection as Maddy rode him.<br ><br >Sometimes when the power of it rose through them, Zach would guide her to slow, so that he could ride over the crest of the wave without exploding. But soon the waves were huge, carrying them both.\n\nMaddy held Zach close and hard, thrusting her hips down against him, and she called his name. \"Oh Zach, Oh Zach, Oh Oh Oh.\"\n\nZach felt himself disappearing into her, her warmth and her slippery wet swallowing him to the root, gripping him, milking him.\n\nThrough many such waves, they reached the plateau of endless ecstasy, where with minimal motion at all, the pleasure would wash through them. Beyond desire, beyond arousal, beyond mind, beyond self.\n\nEven within that plateau, he felt a different kind of climax lifting within him.\n\nMaddy felt it too.\n\n\"There's something,\" she started to say. \"I think I'm going to...\"\n\nHot fluids gushed around him.<br ><br >\"Oh God, did I pee?\" she wondered, not caring.\n\nBut it kept coming, a seeming impossible quantity of clear, hot fluids drenching them, the chair, splashing and puddling around them.\n\nMaddy's series of orgasms seemed to grow with his own rising climax.\n\nZach felt himself tensing to a wire-tautness. He was making some kind of animal sound as Maddy rode him hard. \"Another, Oh My God,\" she grunted into him.\n\nHe found the edge of the rising sun of his climax, as if it was breaking the surface of an ocean.\n\n\"Be slow, Maddy,\" he said. \"Be still with me.\"<br ><br >It trembled and tingled rushing through his body, and through hers.<br ><br >\"Oh God I feel it,\" she cried.\n\n\"Breathe it up through your body,\" Zach said, unsure what he even meant.\n\nTogether they drew deep breaths, summoning the pleasure, the power up through their bodies together, becoming one brilliant body.\n\n\"I'm coming,\" Zach said simply, and let himself go.\n\nAll the tension in his legs, his butt, his belly suddenly releasing and forcing his ejaculation up into her.\n\nThe sound that came out of him was long, and intense. Maddy shuddered with a series of rough peaks, also coming out in sound. There was another gushing release of fluid from her, with a deep cry, and she softened and fell against him, and he came to pure stillness.\n\nThe swirling continued even in pure stillness; an ocean of glassy calm love, holding them in warm tropical waters. They floated, as the spinning inside came to quiet.\n\n\"Let's lie down,\" Zach said. \"It's time.\"\n\nMaddy gently lifted herself off him. Zach felt his cock flop against his thigh, deliciously slippery with both of their fluids.\n\nThey lay next to each other on Maddy's bed.\n\n\"I'm going to give myself to the yaojing,\" Zach said. \"Hold me, please. I love you.\"\n\n\"Sshhhh,\" Maddy said. \"I know, Zach. I know.\"\n\n* * *\n\nZach never found words for what came next. It was like a dream, weird and fragmented and jumbled and nonsensical. It was uncomfortable. There were moments of pure terror as it seemed as though an egg of thousands of tiny spiders were climbing through his brain. He was sure he must be screaming, but Maddy told him later that he didn't make a sound.\n\nBut he also saw with crystalline clarity and perfect detail how the threads that connected the Enkins spirit were coiled inwards.<br ><br >It was a miracle of surgery.\n\nIn the end, the Enkins-entity was fully self-contained, but Zach could control exactly what it received, and could feel exactly what it commanded in a way that was only information. It was no longer threaded into him in any way, but he could read it or not as he chose.\n\nWhich left the other sprite, the Goddess sprite.\n\nThe yaojing gently detached it from Enkins, as it performed it's work; and left it resting next to Zach. It queried him, requesting his direction, and Zach decided to just leave it as is. It wasn't attached to him, it wasn't controlling him, it was simply there. It seemed perhaps important to keep it around.\n\nThe spider spirit gave him that Whatever, pal, shrug, and carried on.\n\n* * *\n\nWhen he woke, Maddy was leaning her head on her elbow, watching him.\n\n\"I'm back,\" he said.\n\n\"But are you Zach?\" she asked.",
        "\"I feel like I am? How would I know if I wasn't?\"\n\n\"I admit, I don't know either,\" she said.\n\n\"Well, here's what I do know: this Enkins thing is totally cocooned. I am free of it.\"\n\n\"Do you still have your superpowers?\"\n\nZach softened his attention, feeling. He felt her apprehension, her curiosity. He felt not only the spider ally, but his other two \"friends\" nearby.\n\n\"Yeah, I think I do.\"\n\n\"Good. Because it would be a tragedy if you lost them!\"<br ><br >\"Would you still love me?\" he asked.\n\n\"Who said I love you?\" Maddy said, but she said it playfully.\n\n\"Fair point,\" Zach said. \"But I think I said it, didn't I?\"\n\n\"You did, Zach.\"\n\n\"I'm pretty sure I mean it.\"<br ><br >\"As long as you don't get weird about it,\" Maddy said. \"I won't mind too much.\"\n\n\"Me get weird?\"\n\n\"Oh God,\" Maddy said. \"You're right. Well, let's just take it one day at a time.\"\n\nZach sank back, closing his eyes.\n\nMaddy shifted around and began to wake him up with her kisses.\n\nWhen they made love this time, it was without any intention other than fun.\n\n# # #\n\n \n"
    ],
    "authorname": "PriestOfIshtar",
    "tags": [
        "mind-control",
        "supernatural",
        "spirits",
        "magic",
        "hypnosis",
        "yaojing"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/brain-games-ch-17"
}
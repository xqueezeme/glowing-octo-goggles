{
    "title": "Backdoor Sweetheart Ch. 05",
    "pages": [
        "Author's note: This is a work of fiction. All characters are eighteen years or older. Don't expect realism and you won't be disappointed when you don't find it! Enjoy!\n\nThis chapter picks up exactly where the previous one ended, so it's best to read that first.\n\n*****\n\nEven though I should have been prepared, and in a way I sort of was, the sight of the mansion towering before us did manage to impress me more than I expected.\n\n\"Wow!\" I exclaimed as we left my car in the immense front yard, which was doubling up as a parking lot for the dozens of cars already there. \"So you weren't kidding when you said that Vanessa was rich...\"\n\n\"Filthy stinking rich, yep, that's what I said,\" Liz nodded sagely, holding my hand in hers as we made our way up the marble steps and entered her friend's not so humble abode. \"It's a good thing Vee is so nice and cool, otherwise I'd probably end up hating her. Plus,\" she concluded very seriously, \"she is the third biggest fan of Breaking Bad in the world, after the two of us, of course.\"\n\n\"Well, yeah,\" I had to agree, \"that's always a huge redeeming quality.\" \n\nWeirdly enough, the high ceilings and plush interiors of the spacious halls didn't really get to me as much as the imposing visual of Vanessa's mansion from the outside had earlier, while we were driving up to it through the private park that surrounded it. Once inside, despite the fancy setting, it was just another loud overcrowded party. \n\nThere were red paper cups and beer cans and assorted bottles everywhere, while bags of chips and boxes of take-out food cluttered every table in sight. Not even the inconspicuous presence of a couple of supervising maids keeping an eye on the expensive furniture ruined the overall vibe of the wild ongoing celebrations. Loud music was booming all around, different songs blasting off different stereos as Lizzie and I walked through room after crowded room. Beside the faces from high school that I recognized among the cheering and dancing mob, I noticed quite a few people that I had seen around campus and a bunch of strangers on top of that too. \n\nAs we navigated through the partying throng, stopping here and there so that she could chat with her friends from school, Lizzie didn't for a second stop holding my hand. Her slender fingers were tightly interlaced with mine, seeking comfort from the nervousness that being among big crowds always instilled in her. As I tried to alleviate her anxiety with my presence and support, I couldn't seem to stop glancing longingly at my amazing girlfriend all the time. With her long auburn locks flowing across her shoulders and a light touch of make up to enhance the natural beauty of her face, Liz looked more stunning than ever. \n\nWhenever I looked at her sensuous mouth, I couldn't help but think about the liquid heat that engulfed my cock whenever Lizzie gobbled me into her spit-slick oral cavity. Similarly, the sight of her thick, glossy lips unavoidably reminded me of the many glorious times I had admired them glazed in my creamy seed with a dribble of cum trying to escape them as Liz drank down my load and smiled broadly at me. Of course, my irreplaceable almost-sister clearly knew what was passing through my mind every time she caught me staring at her tumid lips: as her bespectacled gaze met mine, she kind of blushed and whispered to me to stop thinking about blowjobs, only to then giggle and suck my tongue allusively into her mouth in a hot, languid kiss.\n\nIn my defense, I did stare at the rest of Liz's voluptuous body too. In fact, given the way her clothes enhanced her generous curves, I was actually having a hard time choosing where to set my eyes on. The amount of cleavage exposed by Lizzie's gray V-neck top wasn't too extreme, but the combined effect of that tight shirt and the push-up bra beneath it was such that her huge bulging tits were simply too evident to ignore as they wobbled gently in time with her breathing. Funny enough, basking in the jiggly motions of her bra-constricted jugs and glancing at the pale softness of their upper slopes was the only thing that prevented me from staring like a total drooling perv at my favorite part of Lizzie's gorgeous body: her plump, beautiful ass. \n\nLiz's blue mini skirt hugged her meaty asscheeks amazingly, showcasing the perfect roundness and juiciness of her bubble-butt in a way that was literally mouth-watering. In my humble opinion, my girlfriend's legendary ass was at its very best when naked, but there was something undeniably sexy about the sight of that full, bouncy booty straining against the cloth of her skirt as if begging to be freed and unveiled. The protruding curve of Liz's plump rump became even more cock-hardening when she walked, thanks to her high-heeled sandals and the hip-swaying, ass-highlighting posture they seemed to cause. On top of that delicious eye candy, the knowledge that my sweet Lizzie had a buttplug jammed up her asshole to keep a massive load of my cum trapped deep inside her rectum ensured that I was in a constant state of semi-hardness. \n\nI had just finished adjusting my boner inside my pants for the hundredth time, trying to be as subtle and inconspicuous as possible while Liz rubbed her huge boobs teasingly against my side and gave me giggly smooches on the neck, when a shrill, enthusiastic voice reached us through the background noises of the party.\n\n\"Finally, there they are! Felicity Smoak and Barry Allen, best couple ever, straight from a crossover episode of The Arrow and The Flash!\"\n\nCruising through the celebrating crowds, high-fiving people and winking genially left and right while she hollered back at the cheers of her intoxicated guests, Vanessa approached us with a sly grin on her lips and a fat joint between her fingers. Starting with her purple-streaked, spiked up raven hair and ending with her combat boots, the young lady of the house was clothed entirely in shades of black, from crop top to tattered stockings, by way of matching studded leather wristbands and pleated skirt. I didn't have to try too hard to guess that she was in some sort of goth/dark/emo phase, fashion-wise at least. \n\n\"Hey Vee!\" Lizzie smiled after she and Vanessa hugged. \"You must be wasted already if you think I look anything like Felicity Smoak! Last time I checked, she was a thin blue-eyed blonde who knows lots of stuff about computers, and that doesn't sound like me at all.\"\n\n\"And she doesn't end up with Barry Allen either, as far as I know,\" I added as Vanessa hugged me while taking a deep puff from her joint. \"But they would have made a great couple, I agree.\"\n\n\"I know, right!\" Vanessa grinned at me before focusing her green and currently blood-shot gaze on Lizzie. \"And as for the absence of physical similarities, I say fuck those! I mean, really, Liz: you've got the glasses and you've got that sweet nerdy cuteness in spades, plus you have these big boobs and this round juicy booty! Seriously, you're pretty much an upgraded version of Felicity Smoak! And you, Russ...\" Vanessa added while appraising me through slitted eyes and a dense cloud of weed smoke. \"Well, you could be Barry Allen's long-lost twin. With just a little bit of Ewan McGregor thrown in too...\"\n\n\"Oh!\" Lizzie exclaimed, cocking her head as she looked at me intently. \"I never thought of that but... Yeah, that's right! You kinda have a young Obi-Wan Kenobi vibe about you, Russ, minus the beard.\"\n\n\"Och! Thank ye, me bonnie lasses!\" I said in the most awful attempt at a mock-Scottish accent. \n\nAfter some laughs all around, Vanessa led me and Lizzie through the partying masses to a huge living room that seemed less chaotic than the other halls. Music and people and assorted festivities reigned there too, but at least it wasn't as suffocatingly overcrowded as any other corner of the mansion. As Vanessa took control of the stereo and started a playlist of oldies but goodies that she had scrupulously picked out herself, Lizzie snickered and elbowed her slim brunette friend. \n\n\"Jeez, Vee... It really looks like you invited the whole county tonight!\" \n\n\"Nah...\" Vanessa chuckled back, shrugging her thin shoulders. \"I just told everyone I know that they could come here and bring whoever they wanted!\"\n\n\"How about your parents?\" I couldn't help but ask, immediately regretting bringing up such an uncool topic. Unfazed by my dorkiness, Vanessa just burst out laughing so hard that she had to lean against Lizzie as she answered.\n\n\"My parents, he says! Hahaha, that's a good one! For starters, they're somewhere in China or Japan right now and they won't be back for a week at least. And anyway,\" our saucy hostess went on with a conspiratorial wink that I totally didn't understand, \"I swear to you, Russ, even if I burned down the house they'd still consider themselves ahead of the game, trust me!\"\n\n\"Uhm, okay, I guess...\" I mumbled, not really sure what Vanessa's allusive tone hinted at. When I turned to Lizzie for a clarification, she just arched an eyebrow and smiled. Catching that, Vanessa stood straighter and stared at the both of us in turn before speaking.\n\n\"What?! Liz, you didn't tell your boyfriend about my greatest accomplishment as a manipulative evil genius? I'm shocked!\"\n\n\"It kinda slipped my mind, Vee. I mean, discussing you isn't exactly a priority when Russ and I are together... \" Lizzie replied, chuckling and snuggling into my side as my arm automatically encircled her shoulders. \n\n\"Fair enough, I guess. So go on, girl, tell him now!\" Vanessa prodded, poking Lizzie in the ribs while taking a long hit from the almost consumed joint. \n\n\"Well,\" Lizzie said, snickering as she met my eyes, \"basically, on the day of her eighteenth birthday, our dear Vanessa blackmailed her parents into pulling her out of the fancy boarding school she was attending in Switzerland, so that she could move back here and transfer to our crappy high school.\"\n\n\"Crappy?!\" Vanessa interrupted. \"Liz, you have no idea how great it feels to be there! Believe me, I should know. I've been in private schools since kindergarten, and they all sucked balls, big time.\"\n\n\"So, how exactly did you blackmail your parents?\" I asked, still blinking in stupor but growing intrigued.\n\n\"Oh, I just threatened to become the sluttiest teenage porn star ever and then to link all my videos and pics to my parents' clients, associates, so-called friends and bullshit acquaintances. And, of course, the entirety of our stuck up, dead-inside family, too,\" Vanessa bluntly declared, as serious as I had ever seen her.\n\n\"And... It worked?!\" I ventured.\n\n\"Hell yeah, it worked!\" Vanessa grinned with undisguised pride. \"I know my parents enough to know that their biggest weakness is that stupid combo of vanity and hypocrisy they've got going. I wasn't even bluffing, by the way, but just the threat of me doing porn was enough for them to finally let me go to a public high school in the real world, you know, just like actual people do.\"\n\nNoting my disbelieving expression, Lizzie confirmed her friend's words, nodding slowly as she glanced at me and Vanessa in turn. \"It's a true story, Russ. I was skeptical too, but then I asked her nanny and she confirmed it all.\"\n\n\"Inga is not my nanny!\" Vanessa interjected at that. \"Well, not anymore now that I'm older... She's still the top dog in the house, though, even my mom is sort of scared of her. And when exactly did you talk to Inga anyways?\"\n\n\"Back when I came over for that chemistry project, remember?\" \n\n\"Oh, right...\" Vanessa mused. While I looked at her with renewed curiosity and a sort of weird sense of respect for her crazy ballsiness, Vanessa shook off her momentary seriousness and offered us the joint. \"You guys sure you don't want a hit of this before I finish it? It's great stuff, I promise.\"\n\n\"No, thanks,\" Lizzie sighed, \"I'll just get more paranoid than I already am. I mean, you know I don't like crowds and stuff... Besides,\" she went on as I also declined Vanessa's offer of a puff, \"I've already failed epicly to fit in those skinny jeans I wore a couple of weeks ago. All I need right now is to get the crazy munchies and make my big ass even bigger...\" \n\n\"What!?\" Vanessa exclaimed, looking at Lizzie in horror. \"Girl, you're talking crazy! I'd trade your thick juicy booty for my scrawny excuse of an ass any time, really. And I bet Russ here agrees with me too, isn't that so? Don't you just love Liz's round bubble-butt, Russ?\" \n\n\"Yes, I absolutely do!\" I declared truthfully while I rested my hand on the protruding curve of my beloved Lizzie's pillowy, skirt-clad rump.\n\n\"Yeah, well, whatever...\" Liz mumbled, rolling her eyes at us and tittering as she blushed adorably under my massaging touch, visibly both glad and embarrassed to be the center of attention like that. \n\n\"And, speaking of big booties or lack thereof...\" Vanessa snickered, wiggling her tiny tushy while glancing at my ass-kneading hand resting on the upper slopes of Lizzie's fabulous bubble-butt. \"I'm gonna show you guys the special diet I came up with to finally grow a serious ass worthy of the name. You're gonna love it,\" she went on as she led Liz and me to the nearest goodie-laden table, \"it's like fusion cuisine, but with junk food!\"\n\nI had some serious doubts while I watched Vanessa rifle through boxes of take-out food and bags of chips to gather a bunch of chicken vindaloo, stir-fried noodles and crumbled bacon chips only to put it all on top of a couple of pepperoni pizza slices that she then proceeded to roll up like burritos, eventually handing the final products to Lizzie and me with a flourish. The first bite dispelled my every bit of reticence, actually blowing it to pieces in a storm of incongruous yet delicious flavor. Even though I knew all those tastes individually, I had never tried them all at once and I suddenly regretted not doing it before. \n\n\"Mmh! This is... It's pretty awesome!\" Lizzie mumbled through a mouthful of mixed scrumptious unhealthiness. \n\n\"It totally shouldn't be,\" I chuckled between hungry bites, \"but it definitely is awesome!\" \n\nNodding and snickering as she watched me and Lizzie stuffing our faces, Vanessa knowingly said: \"Any kind of pizza will do as a base, but I recommend that you stick to only two different types of take-out and one type of chips at a time. Trust me, that's the limit before it gets seriously gross. Apart from that, knock yourselves out!\"\n\nAnd with that, flashing us an impish grin, Vanessa glided back into the crowd, headbanging to the sound of one of the oldest versions of 'I Fought The Law' currently blasting in the room.\n\nAfter we tried a few more extreme combinations of pizza-wrapped take-out, Lizzie and I moved to one of the various couches pushed against the huge room's walls and plopped down on the plushy cushions. Sitting sideways in my lap with her head resting on my shoulder and her soft lips brushing against mine, Lizzie squirmed and wiggled excitedly as I caressed her plump rump through her skirt. \n\nGiggling and cooing as we lazily made out, Liz kept telling me how weird and dirty and super hot it felt to be there among all those people with a buttplug wedged inside her cum-filled little asshole and how much it turned her on to have her sensitive anus constantly stimulated like that. Those whispered comments and updates on her arousal made me hungrier and hungrier for my sweet Lizzie's incredible ass, a fact that she seemed to appreciate since her dainty hands never lost a chance to wander to my bulging crotch and feel the steely hardness of my boner flexing inside my pants.\n\nAll the while, hit after classic hit kept playing on the stereo. Every now and then, Vanessa reappeared, either to attempt to drag Liz and me to the dance floor or to try and find some trace of surprise on our faces as another great song from the past resounded in the room. Unluckily for her, we knew them all already, thanks to my Mom and the subliminal musical education she had imparted on me and Liz through the years simply by always having some of her favorite records on whenever she was home. Smooching and laughing, Lizzie and I sat on that couch and sang along to 'Crimson and Clover', 'You Can't Hurry Love', 'Walk Of Life', 'More Than A Feeling' and a bunch of other tunes we had heard countless times before, much to Vanessa's shock, since she had only recently started getting into that sort of oldies. \n\nA few times, despite our shared reticence, it was simply impossible even for a couple of lazy introverts like Lizzie and I to remain aside and just sit still. When 'Girls Just Want To Have Fun' kicked in, Vanessa physically dragged Lizzie to the middle of the room and they danced their respective asses off, keeping it up through 'My Sharona' and 'Wild Thing'. Even I eventually joined in when Lizzie shimmied my way to the sound of 'These Boots Are Made For Walkin' and grabbed my hands in hers, pulling me up and into the dancing crowd. \n\nVanessa chuckled and rolled her eyes at us as Lizzie and I slow danced to 'Don't Fear The Reaper', my hands holding possessively onto Liz's fabulous skirt-clad bubble-butt while her arms stayed locked around my neck and she looked dreamily into my eyes, smiling as she murmured the haunting lyrics in her soft soothing voice. Minutes later, when 'Don't Stop Believing' hit its peak, Vanessa dashed our way through the crowd and all three of us sang at the top of our lungs in a spontaneous tribute to the very last moments of The Sopranos' epic finale. Right then, as I saw huge tears swelling up in our sassy hostess's weed-reddened eyes at the thought of Tony's last glance into the camera before blackness and silence set in, I knew for sure that Vanessa truly was alright, and I understood why Lizzie liked her.\n\nAs midnight drew nearer, Liz and I found ourselves snuggled up on the couch once again, making out like there was no tomorrow. Our smooching lips and fondling hands were getting ever more restless, making me wonder where I could take Lizzie to have some private time and do more than just kiss her succulent mouth while pawing her huge tits and her spectacular buttcheeks. Suddenly, right after the last notes of 'White Rabbit' faded out and before the next song began, Vanessa's voice resounded in the room, loud and bright.\n\n\"This one's for my girl Lizzie! Come on Liz! Show all these skinny bitches in here how it's done!\" \n\nThat unexpected proclamation interrupted our kissing and left Liz and I staring in befuddlement at each other. Things got clearer moments later when the next song started, full blast. From the very first harmonics of its signature vocal intro, I recognized the tune and so did Lizzie. It was 'Fat Bottomed Girls' by Queen.\n\nI couldn't help but smile in admiration of Vanessa's evil genius for picking that specific song and dedicating it to Liz. Meanwhile, blushing violently, her soulful brown eyes bugging out behind her adorable nerdy glasses, my sweet almost-sister just sat there in my lap with her mouth agape and the weirdest expression on her pretty face. It was a mix of fear and embarrassment for being called out like that, but there was excitement too, and more than a hint of that sexy slutty pride she often showed during sex, when she shifted into pure Anal Queen mode. \n\n\"Come on, Liiiiz!\" Vanessa yelled from the midst of the crowd right as the intro finished. \"Time to shake that sweet booty, girl!\"\n\nAs Brian May's chunky guitar riff blasted across the room, Liz let out a half-sighing and half-laughing sound and straightened up, her expression suddenly changing from uncertainty to determination. Standing between my legs and facing away from me, Lizzie looked over her shoulder, smiling at me, managing to be sexy and cute at the same time. I could only grin goofily back at her, nodding to signify my appreciation and encouragement. Giggling and blushing adorably, Liz blew me a kiss and arched her back, tilting her magnificent bubble-butt up and back until her round, skirt-clad asscheeks were mere inches away from my astounded face. Then, while Freddy Mercury began singing, my amazing Lizzie started giving me the lap dance of a lifetime. ",
        "The pulsations of the drumbeat became fused with the thumps of my overexcited heart resounding in my ears as my wide open eyes stayed glued on the swaying, jiggling gyrations of Liz's beautiful juicy ass rocking side to side, then back and forth, then up and down right in front of me. The bouncy plumpness of Lizzie's protruding buttcheeks was always hypnotic for me as a rule, but my enthrallment to her divine ass reached a new peak as I stared mind-blown at that bootylicious rump wiggling and wobbling relentlessly in my face, its magnificent fullness barely contained within the straining confines of her ass-hugging skirt. \n\nShaking and twerking, teasingly slapping her hands on her meaty buns as she rocked and twisted in place while flashing me lustful glances over her shoulder all the time, Liz literally worked her beautiful ass off to the sound of the perfect song for it. By the time the second verse hit, my cock was so massively hard that I genuinely thought it would poke a hole through my pants. Right then, panting and tittering, Lizzie lowered herself down on my lap again, pushing her pillowy bubble-butt against my trapped boner until my shaft was nestled between her luscious, gloriously round globes. \n\nLeaning back against me as I held her hips, Liz grinned and tossed her hair back, resting her head beside mine, looking straight at me with barely contained lust glinting in her bespectacled eyes. As she started rocking and grinding her magnificent booty against my steely hardness, my arms encircled her waist and my fingers traveled under her top to caress her soft cute tummy. As I held her tight to me, she reached a hand around my neck and pulled me closer with an urgent purr. \n\nOur mouths were joined in a matter of moments, our tongues dancing away together while my cock and her ass teased each other through the layers of clothing separating us. The muffled cooing and panting sounds that escaped Liz's hot smooching lips reminded me that, while she pushed her majestic heart-shaped ass back into my dry-humping pole, her buttplug was still stuffed firmly inside her anus, no doubt stimulating her a lot all through her super erotic, unexpected performance.\n\nEven after 'Fat Bottomed Girls' faded out, our kissing and grinding routine continued uninterrupted, our desire for each other growing with every second. Through the mist of mutual desire enveloping me and Lizzie, I was vaguely aware of a chorus of hooting and cheering all around us, on top of which Vanessa's voice emerged, loud and cheerful. \n\n\"Woo-hoo! That's what I'm talking about, Liz! I knew you had it in you, girl! Fuck yeaaah!\"\n\nStill smooching away, Liz smiled and so did I when we heard that. I knew that showing off wasn't her style, but I was happy that my amazing almost-sister had accept Vanessa's challenge. It was great for me, obviously, since I got an epic lap dance out of it, but it was good for Liz too. The confidence boost she received was totally deserved, because she was truly awesome and beautiful and special, and it was only fair that she should be cheered and applauded for it.\n\nAs we continued making out hungrily on the couch, my cock uninterruptedly leaking precum into my boxers, I started having trouble keeping my hands from grabbing Lizzie's boobs or roaming under her skirt in search of her pussy. She was getting reckless too, moaning louder and rocking ever more wildly against my aching erection. \n\n\"Liz,\" I eventually murmured into her mouth, \"we need to find somewhere private to go, like, now! Seriously, babe... Another minute and I'll just have to fuck you right here!\" \n\n\"Mmmh... That's kinda tempting!\" Lizzie chuckled sultrily into my mouth. Then, letting out a long purring sigh, she stood up and pulled me to my feet. Hugging me and getting on her tip toes to plant a passionate smooch on my lips, she whispered: \"Come with me, baby... I know a place where you can fuck my ass as hard as you want and make me scream like the dirty little buttslut that I am! Oh, Russ, I'm so fucking hot right now... I want you inside me sooo bad!\"\n\n\"Fuck, Liz!\" I groaned as I ran my hands up and down and all around the juicy roundness of her bubble-butt. \"You'd better take me there immediately, or we'll have to up the ante and go from amazing lap dance to public assfucking! I mean it!\"\n\nLiz looked me straight in the eye and pressed her huge bulging tits into my chest at that, feigning shock but snickering impishly all the while. \"Oh my! We really must get there super fast then!\"\n\nGrabbing my hand in hers, Liz navigated her way through the dancing crowd and sprinted away as quickly as her high-heeled sandals allowed, with me in tow. After a brief detour to collect my jacket, and, most importantly, the bottle of lube in its pocket, Liz guided me through room after chaotic room until we reached a quieter section of Vanessa's mansion. Laughing and looking at each other with fiery desire shining in our eyes, we rushed through a few more empty halls and up the vast marble stairway that led to the upper floor. Once upstairs, at the end of a short hallway, our path was barred by a huge wooden door. Grinning at me, Liz stuck her hand into a cracked, antique-looking vase resting on a pedestal by the door. \n\n\"Alright, let's see...\" Lizzie mumbled as she rummaged around the inside of the vase, until she beamed: \"Yes! Here it is, as promised!\"\n\nAfter she fished out a key and used it to open the imposing doors, Liz finally turned to me and explained: \"Vee told me earlier that she had left a key for us here. You know, in case we needed some privacy...\" \n\n\"Okay then, it's official,\" I declared with genuine seriousness, \"Vanessa is totally awesome!\"\n\n\"I know, right!\" Lizzie smiled as we crossed the heavy door, locked it behind us and walked briskly down yet another hallway. Grasping my hand excitedly in hers, Liz moved past the first few doors we encountered before leading me into what looked like a plush guest bedroom. \n\nWe barely managed to switch on the lights before we fell into each other's arms, kissing and moaning and running our hands all over one another's body while taking off our clothes. As soon as her top and bra went flying and her fabulous jutting tits were accessible, I cupped them in my palms and dove head first into Liz's luscious cleavage, licking and sucking her big round boobs to my heart's content. Mewling with pleasure as I worshiped her fleshy melons and her tender puffed out nipples, Lizzie managed to remove my shirt and unbuckle my pants before yanking them down along with my boxers, setting my raging boner free.\n\nTrembling and whimpering while I devoured her amazing jugs, Lizzie hummed huskily as she wrapped her tiny hands around my massively hard cock and started jacking me off. Aided by the slick sheen of precum that had oozed from my bloated glans and now coated my entire length, Liz urgently walked backwards toward the bed, dragging me with her by my shaft as she kept pumping me two-handed all the while, mumbling and cooing in anticipation. \n\n\"Oh my god, Russ, you're super hard! Oohh yes, baby, bite my nipples like thaaat! Aahhh... I need you inside me so fucking much, Russ!\" \n\nI groaned in dissatisfaction when Liz fell back to sit on the edge of the bed with a squeal, thus leaving me standing there, deprived of the soft pillowy mouthfuls of tit-flesh that I was so devotedly feasting on. My disappointment was very short-lived though, because, while still holding her slowly jacking fist wrapped around the base of my throbbing boner, Lizzie lowered her face on my erection, taking half of my pole into the liquid heat of her mouth in one deep, hungry plunge.\n\nMy eyes rolled back inside my skull as Liz started bobbing furiously on my cock, sucking and slurping on my thick dickmeat and coaxing dollop after oozing dollop of precum from my bulbous glans. Her soft, incredible lips and the hot vacuuming grip of her saliva-drenched oral cavity were making me crazy with lust, while the spluttering and gagging sounds that she made as she recklessly blew me testified to her own burning arousal.\n\nMy head was spinning and my spittle-shiny cock was so hard it almost hurt when Lizzie suddenly pulled back and let my fat pole pop out of her mouth with a lewd wet slurp. A string of glinting spittle connected her tumid lips and my purple knob as she looked up at me with pure sensuous need in her eyes, panting: \"Fuck me, Russ! Ohhh baby, I'm so horny... I think I'll explode if I don't feel you inside me right now!\"\n\nThe rest of our clothes were gone in an instant, everything except for Lizzie's thong, whose crotch was so totally soaked in pussy juices that it was wedged deeply between her swollen, glistening labia. As she leaned back on the bed, whimpering with desire, I watched transfixed while she peeled her skimpy panties off and spread her legs wide open for me, exposing her dripping little slit and the nectar-coated base of the buttplug still jammed inside her tight, tiny asshole. \n\n\"Holy fuck, Liz! Wow... That's so hot!\" I groaned, unable to express in full how awesome it was to see rivulets of her liquid pleasure dribble down from her needy folds and past her smooth taint to pool all over and around the base of the plastic toy embedded in her anus. \n\n\"Give me your cock, baby, pleeease!\" Liz mewled, writhing with anticipation while I stepped closer, staring at her drenched, irresistible pussy and her plugged little butthole as if in a trance. My boner pulsated with rabid excitement as I swiftly dropped to my knees and dove tongue first between my amazing Lizzie's splayed thighs. I barely heard her words as she huskily pleaded: \"I need you inside me, I need to feel your co-ooohh-ooooh... Uuhh god, yeees! Oohh Ruuusss!\" \n\nThe long, intoxicating echo of her moans was as rewarding as the taste of Lizzie's scrumptious juices filling my mouth and coating my palate with their unique sweetness as I started devouring her pussy like my life depended on it. I knew she wanted me to fuck her, and I wanted to be buried inside her silky folds too, I really did. Still, the sight of her plump syrupy peach offered to me like that was just too enticing to ignore. Her soft slit was literally good enough to eat, so eat it I did. \n\nLapping and slurping on Liz's snatch, avidly drinking down the constant trickles of her heady nectar, I lost myself in a lecherous feeding frenzy for a while. As I munched on her wet labia and suckled her swollen clit, Lizzie squirmed and squealed, letting out inarticulate but super sexy sounds while cumming on my mouth over and over again, her hands holding my face pressed into her soaked, tender opening. Girlcum was drooling down my chin by the time Liz relented her grasp on my hair and pushed me off her overstimulated, thoroughly-licked clit. \n\nHer half-closed eyes were foggy with pleasure behind her glasses and her trembling voice was sexier than ever as she haltingly said: \"Your cock, Russ... Please, I need it! Put it in me now!\"\n\nWith a lustful growl, I straightened up and grabbed Lizzie's shapely thighs, pulling her closer until her plump round asscheeks were hanging at the very edge of the bed. As I nestled my pulsating hardness in the slick groove of her labia and rocked back and forth, coating my already spit-lathered length in her juices, Liz spread her legs out wide, wantonly offering herself to me. \n\n\"Fuck, Liz, you're so fucking beautiful!\" I mumbled, lovestruck and panting as I guided my fat glans into the soaked opening of her pussy. \"You have no idea how hot you are right now, babe!\"\n\n\"Ohhh Russ! Uuuhh!\" Lizzie yelped as I pushed myself into her tight, nectar-flooded slit, starting to cram my boner in her welcoming honey pot. \"Yes, yeeesss! Fuck me, baby, fuck meeee!\"\n\nHer moans of delight soon mixed with my own as I basked in the delicious cock-suctioning softness of her pussy. Even though her silky folds felt even snugger than usual around my invading thickness thanks to the buttplug jammed inside her butthole, Liz was so willing and horny that her vaginal tunnel was absolutely saturated with overflowing juices, allowing me to sheathe my massively engorged shaft all the way inside her docile little snatch in one single deliberate push. As soon as I was buried to the hilt inside her needy core, Lizzie's desire-clouded eyes shot open and her syrupy tunnel started contracting around my fat dick.\n\n\"Fuuuuck! Oooohhh fuck yeees!\" Liz screamed, grabbing the bedspread in her fists as a stabbing climax suddenly hit her, causing her drenched vaginal walls to squeeze me and bathe my hardness in yet more girlcum. \"Uuhh Russ, your cock feels so good inside me! Ooohh baby, I love youuuu!\" \n\nMy boner flexed inside my adored Lizzie's pussy at that spontaneous declaration, howled in the middle of her orgasm right at the moment when our bodies were once again fully joined. Acting on instinct, driven by visceral affection and sheer animalistic need to be one with my irreplaceable almost-sister, I leaned down until my chest was squashing her huge bulging tits and her puffy nipples were poking stiffly into my skin. Before I even knew it, I was pumping my hips like a man possessed, fucking Liz's little pussy with all I had and grinding hard into her sensitive clit every time I bottomed out inside her. After planting a long passionate kiss on her parted lips, working my rigid pole in and out of her snug juice-dripping slit in longer and faster strokes with every passing second, I finally managed to let some broken, lovestruck words tumble out of my mouth and flow straight into Lizzie's. \n\n\"Ahhh Liz... I love you too... My Lizzie... Ooohh fuck, babe! I love you... Sooo fucking much!\"\n\nSmashing her lips into mine again, Liz threw her arms around my neck and wrapped her legs behind my back, locking her cute little feet tightly around me, pulling me in and keeping me deeply engulfed in her tight, soft pussy. High on our closeness, needing to feel her and fuse with her, I ran my hands all over Liz's soft curvy body while I started vigorously sawing my cock in and out of her amazing slit, making her moan into my kissing mouth. I was increasing my cunt-plowing rhythm without even realizing it as I caressed her beautiful face, her neck, her big tits, her tummy and her flared hips until, finally, I reached the sumptuous fullness of her plump asscheeks, which I grabbed and kneaded possessively before letting my fingers run back up all over her voluptuous frame.\n\nAs I slammed myself into Lizzie's cock-massaging vaginal passage over and over again, glorying in the convulsing snugness and incredible wetness of her hot velvety folds, I could feel the presence of the buttplug on the other side of the thin membrane separating her holes. As weird as it was at first to sort of brush against that plastic intruder with my every snatch-pounding thrust, I quickly got used to it and just enjoyed the increased tightness it caused in her sugary canal. Besides, it was incredibly hot to see Liz in the throes of pure ecstasy from having her pussy pounded while her asshole was plugged at the same time. \n\nRabidly horny, with my each ramming thrust I pushed as deep as I could go into my adored Lizzie's welcoming love tunnel, leaving only my balls outside of her sopping little slit. At those times, when my scrotum bumped into the plastic base of the buttplug and her mewls spiked deliciously up, I couldn't help but smile as I realized that, no matter how good it might feel for me to fuck her lovely pussy while its silky tightness was enhanced by the presence of the toy inside her anus, Liz must be having an even more amazing time, with both her holes stuffed full like that. The pleasure she was taking in our torrid coupling was made even clearer when Lizzie began pushing her hips up into my in-strokes, meeting my spearing boner every time I plunged hard and fast inside her.\n\nAs we kept making out, our kisses got messier and more voracious by the second. Still, Liz and I managed to communicate somehow through primal grunts and moans and sighs that inflamed our shared passion even more. The groans of absolute ecstasy that traveled from her mouth straight into mine whenever I was stuffed to the hilt inside her molten core and my pubic bone was pressed firmly against her engorged clit were so intoxicating to me that I picked up my slit-stuffing pace at each pass, craving to hear Lizzie's rapturous gasps again and again and again. \n\nBased on the way her pussy suctioned my stiff dickmeat and on her incessant kiss-muffled screams, it was pretty clear that Liz was experiencing one rolling orgasm after the other. Knowing that she was cumming so much made me happy and proud and so insanely horny that, soon, all I could focus on was the feel of her soft needy hole spasming around my swollen boner, egging me on to fill her more, more, more. \n\nAs the chain of her mini-climaxes continued in a crescendo and my own release drew nearer, I suddenly felt something that made my cock throb even harder inside the clutching sheath of Lizzie's pussy. The sensation of the plastic toy moving inside her anus and the contact of her slender fingers brushing against my balls when my scrotum was pressed into the base of the buttplug registered at the same time, announcing the mind-blowingly hot fact that Liz was masturbating her own ass, sawing the tapered invader in and out of her butthole while I royally fucked her pussy. \n\nUp to that moment, our lips and tongues had been wrestling and dancing lasciviously together, but, as soon as she started playing with the buttplug, Liz's mouth went completely slack. Unable to even return my rabid smooches while her body was overwhelmed by the feel of being actively fucked in both holes at once, Lizzie mewled breathlessly and shivered underneath me, her lustrous brown eyes getting all big and unfocused behind her glasses. The look of sensual bliss on her beautiful, flushed face was so erotic that I relented my snatch-stretching rampage and pulled myself up on my extended arms to better drink in that cock-hardening sight.\n\n\"Uuhh... Don't stop, baby!\" Liz pleaded as I stared spellbound into her dopey eyes. I was high on lust myself as I realized that, in a way, she was experiencing the closest thing to a double-penetration at that moment. \"Keep fucking me, I'm sooo close... Oohhh my god, Ruuuss!\"\n\nGrabbing her huge jiggling tits in my hands, I could barely breathe as I resumed pounding away into my amazing Lizzie's soaked little pussy while she stimulated her asshole with the plastic toy. The transfixed expression of unbound pleasure painted on Liz's face burned itself into my brain as I boned her ever harder and deeper and faster while tweaking and pinching her fat sensitive nipples between my fingers, making her wail out her simmering, impending release. \n\nAs Lizzie slid the buttplug in and out of her asshole with increasing urgency, I could feel it rubbing against the underside of my pistoning boner through the thin layer of super sensitive skin separating her tight holes. That added stimulation, on top of the insane build up bubbling inside me, was bringing me dangerously close to what I was sure would be a huge ejaculation. Ready to pump her pussy full of cum, I was pounding forcefully into the silky wet vise of Lizzie's spasming vaginal tunnel when she suddenly went rigid underneath me and screamed out her toe-curling orgasm.\n\n\"UUUHH FUCK, RUUUUSS! I'M CUMMIIIING!\" \n\nJammed from tip to root inside the squishy grip of her hot convulsing folds, I pulled on Liz's engorged nipples and squeezed her bulging jugs in my palms to enhance her pleasure as her gushing girlcum bathed my engulfed length and drenched my clit-smashing groin. Throbbing and flexing inside the liquid heat of her orgasming pussy, I wanted to savor every last one of those wet dick-hugging caresses before withdrawing my swollen boner and starting to hammer away into her slit to get my own release. As soon as I felt the velvety hold of her juice-drooling folds diminish though, Liz grabbed my face in her hands and locked her bespectacled, pleasure-glazed eyes with mine.",
        "\"M-my ass, Russ...\" she panted huskily, still dazed and trembling from the aftershocks of her massive climax but very clear and determined about what she wanted next. \"More cum, baby... I need more cum in my ass... Oohhh Russ, I want you to fill my asshole full of your cum!\"\n\nBy some sort of miracle, I managed not to blow my load right there and then as Lizzie's lascivious request echoed in my ears. Smiling like the lust-drunk and lovestruck fool that I was, I just nodded and pulled out from the clutching sheath of her soft dripping pussy, causing both of us to groan. \n\nAs I fumbled through my discarded clothes to retrieve the bottle of lube, Liz groggily shifted and rolled, until her knees were down on the floor and her upper body was pressed onto the bed. Bent over like that, with her back arched, her legs held close together and her gloriously round bubble-butt tilted up high, the plump perfection of my sweet Lizzie's beautiful ass was accentuated so much that it made me tremble with arousal just to look at her soft pale globes framing her nectar-leaking pussy and her still plugged anus. \n\nAs I planted my feet outside her knees and crouched over her upturned booty, pointing my aching pole straight at the cleft between her luscious asscheeks, Liz reached one hand to her budding clit while with the other she grabbed the base of the buttplug. Her gaze glinted with anticipation and playfulness as she looked over her shoulder at me and gently started twirling the toy around in her needy little asshole, preparing to pull it out.\n\n\"Get ready, baby, I don't want to lose even a drop of the cum that's already in there, okay?\" Liz giggled, her smiling face resting sideways on the bedspread, her huge tits bulging out underneath her docile body. \"Just stick your cock right up my ass, Russ, don't make me feel empty!\"\n\nI chuckled along with her, feeling my heart swell with love as my cock pulsed with horniness, then I half-solemnly and half-jokingly said: \"Of course, my Anal Queen! Your wish is my command.\"\n\nLizzie's amused snickers faded into a long, soft whimper as she slowly removed the tapered buttplug from her anus, finally revealing her adorable little asshole in all its irresistible winking pinkness. The distended rim of her sphincter was still coated with my cum and also with the runoff juices that had abundantly trickled from her pussy. Having been stretched out by the toy, Liz's delicate butt-ring was slightly gaping, not too much, but definitely enough for a finger to slide in without touching its tender edges, hypothetically. The twitches of her horny little rosebud mesmerized me, but the sight of the first globs of my previous load starting to bubble out of her forbidden orifice called me back to the task at hand.\n\nAs swiftly as possible, I guided my boner to Lizzie's welcoming butthole with one hand while with the other I poured lube all over her dilated sphincter. As the slippery fluid soaked her asscrack and dribbled down into her anal passage, I rubbed by already nectar-soaked cock between her plump buttcheeks, lathering my shaft with lube as well. A wiggle of Liz's juicy booty and a hint of impatience in her persistent cooing moans let me know that she was more than ready, so I put the bottle of lubricant aside and took hold of her smooth meaty buns instead. \n\nBasking in the bouncy fullness of her beautiful ass filling my palms, I splayed Lizzie's buttcheeks nicely apart and nudged my purple knob into her slowly shrinking butt-ring. Sharing a meaningful look, both smiling excitedly, Lizzie and I communicated our readiness and urgency through raspy breaths and lustful groans as I squatted lower on her majestic bubble-butt, easing my raging erection into her willing little asshole.\n\nMy bloated glans slipped right into Liz's well-readied anus and the first inches of my cock swiftly followed, disappearing almost effortlessly inside her spectacular ass. As my girthy tool widened her oily butthole and sank further into her cozy anal passage, we both gasped in pleasure and renewed amazement at the fact that, once again, my massively swollen cock was entering the tiniest, tightest and most delicate of Lizzie's holes. \n\nThe buttplug had prepared her well, loosening and relaxing the elastic muscles of her sphincter, while the lube I had just used combined with the huge load of cum that I had blasted deep into her ass earlier made her creamy anal walls deliciously slippery around my fat, butt-delving boner. Without meeting much resistance except for the natural tightness of her dick-hugging tunnel, I easily buried half of my length into the incredible warmth of Lizzie's rubbery rectum in a single gliding push. I couldn't help but pause for a moment there, to soak in the buttery pressure of her snug seed-coated bowels gripping and tugging deliciously on my ass-stretching thickness, then I resumed my gentle sodomizing plunge.\n\nGoing very slowly so as not to hurt my adored Lizzie's lovely little butthole, I persistently pushed deeper and deeper inside her masterpiece of an ass, driving my rump-skewering shaft into her steamy anal chute with shallow, smooth back-and-forth motions. Thrusting in a bit and then pulling slightly out before another easy in-stroke, I carefully but firmly coerced Liz's cock-clenching anal walls into widening for me and accepting my presence inside her snuggest, warmest depths. Beside giving me the unique thrill of stretching out and filling up the exquisitely tight recesses of her well-greased backdoor, my unstoppable sodomizing progress had the added bonus of causing the sexiest moans to pour out of my gorgeous girlfriend's slack mouth.\n\n\"Uuuhh yes, baby! Ohh yeaahh, just like thaaat aahhh...\" Lizzie whimpered as I gradually crammed more and more of my fat dickmeat into her rippling rectum. All the while, as she encouraged me with mewls and sighs of anal pleasure, she circled her fingers on her nectar-soaked clit in sync with my persistent butt-jamming rhythm. \"Keep going, Russ, don't stop! Uuhh fuck, it's so good... Open my tight little asshole, baby... Make me feel your big cock deep in my aaaass!\"\n\nA few more little thrusts later, I was balls-deep inside my sweet Lizzie's ass and as close to paradise as I could ever imagine being. With my hips pressed against her plump pillowy rump and my glans pushing as deep into her dick-crammed rectum as possible, I shivered with pleasure as I abandoned myself to the glorious sensation of having my boner squeezed from tip to root within the velvety warm, sperm-slick caress of Liz's pulsating anal passage. My fingers dug possessively into the flawless roundness of her buttcheeks as I looked down to glory in the mind-blowing vision of her tiny pink sphincter tautly stretched around the wide base of my cock.\n\n\"Aahhh, fuck... Your ass is amazing, Liz!\" I growled as I leaned down over her docile, surrendered frame. \"It's so fucking tight! Oh my god, your sweet little asshole is incredible, babe!\" \n\nGently rocking my embedded thickness within her snug anal sheath, I peppered my adored Lizzie's neck and shoulders with kisses as I gave her cock-packed anus some time to adapt to my girthy presence. Sniffing her signature scent, tasting her salty skin and fragrant hair on my lips, I kept smooching her as I cupped the meaty globes of her majestic bubble-butt in my palms, murmuring dazedly all the while. \n\n\"I love being inside your ass, Liz, your asshole feels so good around my cock... Ohh my god, I love this beautiful ass so much, babe, it's the fucking best! So round and juicy and bouncy outside... So fucking tight and hot inside...\" \n\n\"Uuuhh Russ...\" Lizzie whimpered over the squishy sound of her fingers frigging away on her clit. \"I... Ooowwhh... I love having your cock in my ass! It makes me so horny when you fuck my ass, I love being your buttslut, baby! Ooowwwhh fuck, you're so hard inside meee... Sooo big... It's like you're pushing into my stomach, baby... You feel so fucking huge in my tiny little asshole! Ohhh it's sooo dirty and nasty, Russ, I just love how you fill my ass with your big fat co-ohh-oohh-ock!\"\n\nLizzie's final words broke down into a sort of howling moan, because, feeling that her anal walls had adjusted to my presence and egged on by her lusty vocalizations, I started moving in and out of her tight, slippery rectum. My first few strokes were long and slow, meant to test the readiness of my adored almost-sister's asshole. Her loud, languid whimpers and the accelerated motions of her clit-diddling fingers were enough of an answer, but I wanted to hear her say it. It took less than a minute. Looking over her shoulder at me as I held onto her plump bubble-butt and easily sawed my aching length in and out of her asshole at an exaggeratedly careful pace, Liz locked her sparkling brown eyes with mine and blurted out her unquenchable need to be sodomized. \n\n\"Owhhh don't tease me, baby... I'm ready and so fucking horny! Uuhh fuck my ass, Russ! I want to feel your big fat dick pushing deep inside me, baby, I want you to stretch my slutty little asshole... Just fuck my ass, Russ, pleeease! Uuhh... Oowhh fuck yeaahhh, fuck my ass! Ooohhh yeeeess!\"\n\nPushed off my final reservations by that irresistible plea, I let my anal lust take over completely and started pounding away at my beloved Lizzie's beautiful plump ass like there was no tomorrow. High on my overpowering passion for her juicy booty, I fucked Liz's asshole with all I had, just like she asked me to do. Sliding smoothly in and out, I pumped my hips full force into the cushiony roundness of her bubble-butt, driving my pole balls-deep inside her delicious forbidden hole at each pass. Like a battering ram, my cock pulled back only to slam forward again with increased force, gliding deep into the smooth, steamy tightness of her rectum all the way to the hilt, filling Liz's pliant tiny orifice to bursting with my stiff dickmeat. \n\nThe frothy mix of cum and lube coating my pistoning shaft and Liz's snug anal walls helped a lot as I mounted her ass at breakneck speed, but, in a way, her absolute eagerness to have her asshole stretched out and stuffed to bursting by my raging boner was even more important to make our sodomy mutually pleasurable. Over and over again, as I widened her slick sensitive anus to the limit and crammed her sweet booty full of my veiny thickness, I could feel Lizzie's anal passage ripple and spasm around me in time with her ever louder screams of ecstasy. That, beside making me even hornier than I already was, reassured me that she was loving every second of our intense buttfuck at least as much as I was.\n\nDespite the vigorous nature of our anal coupling, the harmonious attunement between Liz's body and mine remained unchanged, making the meaningfulness of the scorching hot glances we shared grow even deeper as our assfucking madness swept us away completely. Our broken, guttural vocalizations matched the furious speed of my butt-plowing thrusts, resounding in time with the rapid fire impacts of my crotch slapping against her jiggly, fleshy rump. \n\nSoon, the slippery grip of Lizzie's butt-ring sliding along my rock-hard boner and the spectacle of her distended little rosebud clinging desperately to my throbbing length as I pulled out of her ass became fused into a single heightened perception of sight/sensation wrapped up together and enhancing each other. Similarly, on the in-strokes, Liz's intoxicating gasps of pleasure at my every powerful plunge merged with the incomparable feeling of her rectum opening up around my ass-plundering shaft and then squeezing me snugly in the creamy heat of her quivering bowels as my entire veiny pole disappeared inside her insatiable dick-gobbling orifice. \n\nWe were both so rabidly turned on and high on our shared buttfucking frenzy that it didn't take long for our climaxes to rush closer. The overflow of juices bathing my pussy-bumping ballsack and the increasingly powerful tremors of pleasure reverberating through her cock-jammed rectum told me that the string of Lizzie's back-to-back mini-climaxes, each one a little bit more potent than the former, was quickly building up for the grand finale. As for myself, I knew that I was going to cum soon, but, as much as my rational mind told me to slow down a bit and make it last, I simply couldn't stop. That animalistic buttfuck felt just too good, and not only for me, apparently. \n\nIf Lizzie hadn't looked back at me with such a wild expression of joy painted on her face, if she hadn't cooed so appreciatively and egged me on by rocking her bouncy booty back into my impaling shaft, then yes, of course I would have relented my assault on her magnificent ass. But, even though no actual words were spoken, Liz and I did maintain a dialogue made of groans and mewls and gasps, brokenly celebrating our closeness and voicing the incredible pleasure we took in doing what we were doing together right there and then, implicitly asking the other for more.\n\nAnd so, while Lizzie frigged her clit like a mad woman and wailed away underneath my, I mounted her glorious bubble-butt frenziedly, assfucking her as if through a fog, knowing only how awesome it felt to sodomize my beloved soulmate and how hot it was to watch my raging pole slide between her plump juicy asscheeks while I pumped in and out of her clingy, stretched out rosebud. Reduced to a grunting rump-riding troglodyte, I just kept picking up my ass-splitting rhythm, accelerating my already reckless tempo at each pass and grunting hoarsely as I plunged my boner into the oily, pliantly snug depths of Liz's anal passage with ever harder and faster and deeper butt-busting slams.\n\nAt some point, while the dick-tugging convulsions of Lizzie's rippling rectum became too erratic and intense to resist, my long-denied orgasm suddenly boiled over. Caught up as I was in my ass-drilling mission, I gave one final ramming thrust and buried myself as deep as possible inside the delicious engulfing heat of Liz's butthole. My ejaculation surged along my shaft so explosively that I barely managed to announce my climax before I was pushed spectacularly over the edge.\n\n\"Arrghhh fuck, Lizzie! Gonna cum, babe... Aaahh I'm... CUMMING, LIIIIZ!\" \n\nThe spray of semen that exploded deep inside Liz's rectum shot out of my cock with such potency and in such massive spurts that I felt like I would pass out from the sheer intensity of my orgasm. As my vision faded to white and a continuous geyser-like jet of warm seed flooded her anal passage, I sank my fingers in the soft fullness of Lizzie's plump bubble-butt, steadying myself as my legs wobbled and my brain sizzled from the overdose of pleasure I was experiencing. As I growled out my impressive release, a long choking mewl reached my ears and a sequence of dick-milking spasms enveloped my throbbing, spunk-spewing cock.\n\n\"UUUHHH RUUUSS! YEAHHH! CUM IN MY ASS! FILL MEEEEE!\"\n\nThat prolonged scream of climax resounded like heavenly music in my endorphin-addled mind, while at the same time Liz's constricting rectum squeezed more and more globs of dense sperm from my hugely swollen boner. As my amazing Lizzie coaxed my liquid essence out with the relentless pulsations of her smooth, slippery anal walls, her pussy kept gushing a stream of sweet nectar all over my balls and down her thighs, drenching us both in her scrumptious girlcum. It took a while before our earth-shattering and almost simultaneous climaxes deflated, but eventually my cock stopped pumping cum inside Liz's tight asshole and her rectum relaxed around my stiff pole, her furiously whirling fingers also stopping and finally letting go of her overstimulated clit. \n\nWhile the aftershocks of my orgasm still sizzled through my body, I shifted from my booty-mounting stance and groggily knelt down behind Lizzie's majestic bubble-butt, careful not to remove my deeply buried boner from her cozy, cum-flooded anal passage. My hands just couldn't let go of her plump round asscheeks as I gently leaned down over Liz's submissive frame, draping my chest onto her arched, sweat-shiny back until my head was resting near hers on the bed.\n\nWordlessly, our mouths seeking each other of their own accord, Lizzie and I started lovingly kissing, letting our lips and tongues meet and embrace over and over again in a slow, languid dance. As bestially vigorous as our sodomy had just been, or make out session was sweet and delicate, reaffirming the intimacy that bound me and my amazing almost-sister so closely together. \n\nBreathing and recuperating through our feather-light smooches, we were lazily enjoying the quiet aftermath of our anal rutting rampage when a sort of distant collective roar was heard. Pausing our soulkiss, Liz and I smiled at each other as we realized that we were hearing the final seconds of the countdown to midnight echoing throughout the mansion. As the last second ticked away, the chaotic joy of the partying crowds bellowing at the top of their lungs in the halls below us and out in the park reached us too, making us laugh. \n\n\"Happy New Year, Russ!\" my beautiful girlfriend murmured into my mouth, nuzzling my nose and licking my lips.\n\n\"Happy New Year, Liz!\" I replied, taking a big sniff of her auburn locks cascading around her face.\n\nAfter we traded a few more passionate kisses, Liz pulled back to adjusted her cute glasses on her nose, snickering: \"Okay, so I've just decided that my New Year's resolution is to do more lap dances for you, Russ! I mean, if you're gonna fuck my ass like that every time I shake my big booty for you, well, let's just say that I'll be a very happy girl!\"\n\nLaughing and kissing her deeply, feeling my still hard boner flex inside her seed-plastered rectum as I envisioned an encore of her sexy moves to the sound of 'Fat Bottomed Girls', I replied: \"Oh yeah, I'll take another lap dance from you any time, Liz! But really, you don't need to do much except just be your usual awesome self, and I promise that I'll never stop giving your beautiful ass all the sweet love I have to give!\"\n\n\"Aw thanks, baby!\" Lizzie giggled, wiggling adorably in my embrace as I wrapped my arms around her tummy, squeezing her soft curvy body against mine. After sucking my lips hungrily into her luscious mouth, she arched an eyebrow as she added: \"Russ, I'm getting kinda sore now. I think maybe, uhm...\"\n\n\"Oh crap! Sure, Liz, I'll pull out right now...\" I said, already straightening up, ready to remove my ass-plugging thickness from her snug cum-sloppy anus. \"I just thought...\"\n\n\"What!? No, Russ! Noooo!\" Lizzie shrieked in alarm, pushing backward to make sure that her gorgeous bubble-butt stayed glued to my crotch and her twitching, dilated sphincter remained wrapped around the base of my fat shaft. She was looking at me with a mix of mock-reproach and genuine horror as she went on. \n\n\"Russ, are you insane?! Don't even think about pulling out of my ass! I've got so much of your creamy cum plugged in there and I don't want to lose even one single drop! Your cock stays in my ass, baby, where it belongs!\" she concluded with a husky purr, causing my boner to throb with joy inside her sperm-flooded rectum as my heart swelled in my chest. Once again, I was pervaded by that amalgamation of love and lust and awe that only my incredible Lizzie could inspire in me. I just had to kiss her, and I did, making her smile, before finally letting her explain. \"I just meant that my knees are getting sore, that's all! Maybe let's move to the bed, like, let's get actually on it?\"\n\nI laughed and slapped my palm on my forehead as Liz rolled her eyes and chuckled with me, then I nodded and we shifted. I pulled her up with me as I stood, while she greedily clenched her sperm-sloppy anus around my embedded length, then we moved together until we were lying on the bed, cuddling in a tight spooning position. \n\nWith one arm wrapped around her to hold her close to me and cup her big jutting tits, I rested my other hand on my sweet Lizzie's fabulous bubble-butt and reverently caressed her smooth asscheeks, letting their round perfect plumpness fill my palm to overflowing. As we rested like that, basking in our closeness, Liz purred and smiled beatifically. Her bespectacled eyes were almost closed as she just let the words flow out of her succulent, parted lips. ",
        "\"Mmh, Russ, you shot so much creamy cum in me... It's awesome, baby! I love being so full, I just love it! I can feel it, you know, squishing inside my ass... When you cum in my pussy I can feel it too, but not as much as when you pump your big loads all the way up my horny little butthole. God, baby, it's so good!\" Liz went on dreamily, sighing as she started to tenderly contract and relax her anal walls around my stiff tool, massaging me from tip to root within her seed-coated bowels. \"There's so much of you inside my ass right now, I love it... All that cum in my tummy, and your cock too, so big and fat, keeping two loads stuffed up my asshole! Two big loads of your cum way deep in me, mmh, that's so amazing... And you're still hard, baby!\"\n\n\"Actually, it's kinda hard to stay soft around you and this epic booty of yours! Seriously, I just love your ass, Liz...\" I declared, spooning her tighter and running my fingers all over the protruding curve of her heart-shaped masterpiece of an ass as I savored the soft, delicious anal suctions she was treating me to.\n\nHer smile widened as she cooed: \"Aawh! You know, baby, no matter how many times you say you love my ass, it always makes me feel good to hear it! Thanks, Russ. I mean it.\" \n\n\"I'm just telling the truth, Liz. Your ass is beautiful, and I love it.\"\n\n\"Mmh... Yep, I've got butterflies in my stomach again!\" Lizzie giggled, wiggling her bubble-butt into my crotch and giving my cock an intense, prolonged squeeze with her semen-slick anal walls that made me shiver all over. Then she playfully purred: \"More, Russ! More!\"\n\n\"I'm crazy about your ass, Lizzie. It's my favorite thing in the whole world,\" I whispered slowly into her ear, rocking my veiny boner inside her snug creamy rectum while pinching a puffy nipple between my fingers and grabbing possessively on a plump asscheek. \"I love watching, touching, kissing, licking, fucking and filling your spectacular ass with every drop of cum I have.\"\n\n\"Oohh yes, Russ... Again!\"\n\n\"If I could, I'd never pull my cock out of your tight little asshole, Liz. I just wish I could stay buried in your ass forever...\" I said sincerely, sucking her earlobe into my mouth. \"I'm absolutely, totally, balls-deep in love with your perfect bubble-butt.\"\n\n\"Yeah, well, \" Lizzie giggled, opening an eye just enough to wink at me, \"I won't argue with that, I can feel that it's literally true! And so sweet too, baby...\" \n\nSighing contentedly as I silently paid homage to her epic booty with my caresses and ever so gently stirred her snug anal passage with my cum-lathered dickmeat, Lizzie just lay there for a while, cozily cuddled up in my embrace. Moaning lightly as she enjoyed the reverent touch of my hand on her flawless meaty globes, she tenderly kept sucking my cock with her asshole while I flexed my stiff shaft inside the warm, seed-flooded snugness of her anal chute. Letting go of Liz's tits, I moved my hand up, so that I could delicately stroke her hair, her neck, her face, hoping that my indescribable adoration for her could pass through my finger right into her very being. She looked so peaceful and beautiful, I just wished I had the words to tell her exactly how I felt. \n\nWe were still snuggled and caught up in our super slow ass-stirring rhythm when Liz finally opened her big brown eyes to meet my spellbound stare. \"Russ,\" she murmured, her soothing voice bright with excitement, \"I think we should set a new record. You know, to celebrate the New Year or something...\"\n\n\"Sure,\" I nodded, holding her curvy frame tighter while my butt-kneading hand refused to move away from her plump asscheeks. \"What kind of record do you have in mind? Naughty stuff, I hope?\" \n\n\"Duh, of course!\" Lizzie tittered, jokingly rolling her eyes at me before explaining her plan. \"I want you to blow another load in my ass, baby. I never had three loads of cum inside me, but I want to! I want you to use your perfect cock to push all that creamy goo even deeper in me, and then I want you to give me more! I want you to pump my tight little asshole full of cum like never before, Russ!\"\n\nLiz's tone had gotten more excited as she spoke, her arousal showing in the increased pressure she imposed on her buttery anal squeezes, which in turn made my veiny log throb with joy deep inside her rectum. Considering the swelling and hardening of my boner to be a good enough response already, I just pressed my mouth to Lizzie's and hugged her tighter. After a long lingering soulkiss, she smiled broadly at me, whispering: \"Make love to my ass, Russ...\"\n\n\"Oh, Liz!\" I sighed, hazy with passion and affection while I pulled a few veiny inches of my shaft out of her slippery forbidden hole, only to press myself balls-deep in her ass soon after. As my sweet almost-sister arched her back to push her luscious booty urgently towards my groin, I kissed her neck as I murmured into her ear. \"You're the best girl ever!\"\n\nSinking my fingers into its full fleshy roundness, I splayed Lizzie's fantastic bubble-butt nicely open and gloried in the lewdly beautiful sight of her seed-smeared, outstretched little orifice clinging to my girthy pole as I began sawing in and out of her anus. As she rocked her sumptuous rump to meet my strokes, moaning in time with my long slow thrusts, I felt her cock-suctioning anal walls contract and relax to match my motions, loosening their seed-slick hold when I slid in and then squeezing tenderly all around my dickmeat to hold me tight when I pulled out. Within moments, Liz and I were once again lost in our shared bubble of assfucking bliss. \n\nFluidly entering and reentering the tiniest, most intimate gateway to her body, I pushed as deep as my glans could reach into Lizzie's snug steamy rectum at each in-stroke, never failing to make her moan at the moment of full balls-deep penetration, when she was as stuffed with my cock as she could possibly be. Every once in a while, when I was jammed to the hilt in the cozy warmth of her asshole, I held perfectly still and gave a couple of firm stabbing thrusts, humping into Liz's round cushiony booty to try and force my previous squishy loads as far into her receptive anal depths as possible. When I pulled out, slowly and unwillingly withdrawing from the most well-matched sheath for my boner I could possibly think of, I always left my bloated glans trapped within the hungry grip of Liz's oily twitching asshole, so as not to unplug her cum-filled anus even for a second. \n\nI was just vaguely displeased that I didn't get to retreat all the way out of her ass even once to admire the obscenely marvelous vision of my adored Lizzie's tender rosebud gaping and winking and pulsating as it remained briefly open, reshaped and lewdly widened by my butt-stretching tool as I knew it must be right then. That was okay, though. After all, I was mind-blown already by Liz's idea of getting the biggest anal creampie so far, and it was naughtily fun to know that her plan not only required me to shoot a third load up her butt, but also to prevent the first two from oozing out. \n\nWell aware that I loved the visual of her gaping asshole but knowing that I'd be willing to miss it for the success of our creampie mission, my amazing Lizzie rewarded my 'sacrifice' by using her snug, rubbery butt-ring to give my engorged knob a series of incredible nibbling squeezes every time I was at the end of an out-stroke and ready to begin another plunging in-stroke. Having my glans avidly and slickly suckled like that by her clingy little asshole always made me growl in delight, renewing my fierce veneration for my one and only Anal Queen.\n\nWanting our intimate sodomy to last as long as possible, I kept my thrusts smooth and long, powerful but unhurried. All the while, Lizzie's intoxicating moans were the constant background sound to our languid buttfuck. I loved hearing her little squeals and gasps and sighs, they were even sexier to me than the wet squishy sound made by her clit-diddling fingers as they traced circles on her swollen bud. Erupting from her O-shaped mouth in time with my deliberate ass-plowing strokes and matching the meaty, clapping beat of my groin bumping into her round jiggly booty, Liz's breathless mewls confirmed what the incessant quivering pulsations of her warm cock-caressing rectum already told me: my amazing almost-sister was cumming non-stop, experiencing one rolling climax after the other while I stuffed her adorable pink butthole full of my stiff, veiny length.\n\nAided by the ungodly amount of spunk squelching inside Liz's cock-engulfing bowels, I glided in and out of her tight little asshole as easily as if I was sinking into her soft, nectar-dripping pussy. Purged of my previous rump-ramming fury, I took my sweet time as I lovingly sodomized my incredible girlfriend. Cramming every last inch of my thick hardness into her clingy orifice at each pass, I focused on every ripple of pleasure coursing through her narrow anal tunnel, going all fluffy inside because I knew and saw and felt that Lizzie was loving getting assfucked as much as I loved assfucking her. \n\nPlunging into her snug willing anus over and over again while my aching boner got massaged by the slippery pressure and velvety friction of her rectal passage, I had a permanent smile on my face as I enjoyed the unique warmth and heavenly tightness of Liz's deepest anal depths. I might not have been much into drugs or alcohol, but I was most definitely addicted to my sweet Lizzie's plump beautiful ass, and I was very much okay with that.\n\nAll through our lazy buttfuck, I never stopped holding Lizzie's voluptuous body: her soft smooth skin rubbing against mine felt just too good to let go. As my hands incessantly played with her epic tits and kneaded her juicy jiggly asscheeks, I drank in every lust-drunk expression, every flush of arousal that appeared on her beautiful face. Relaxed and snuggled in my arms, lulled away by the ebb and flow of wave after crashing wave of orgasmic anal bliss, Lizzie never stopped frigging her clit and smiling rapturously as I sodomized her with all the assloving passion I had. All the while, punctuated but her insanely erotic sighs and yelps, all kinds of sexy exhortations tumbled out of her parted, exquisite lips.\n\n\"Yes, baby! Uhhh yes, like that... Push those creamy loads all the way up my ass! Owwhh god... You buttfuck me soooo good, Russ, I love iiiit... Don't stop, baby, don't ever stop fucking my ass! Oohh yes, I love how your cock stretches my tight little asshole and fills me up uuhh... You're so deep in me, babyyy... Uuhh fuck, yeees!\" \n\nSeeing and hearing and feeling Lizzie's sensuous rapture while my fat cock drilled incessantly into her ass was as rewarding to me as the actual pleasurable sensations I received from entering and reentering the warm, cum-lubed snugness of her rectum. My boner throbbed constantly, getting more and more swollen within the cozy confines of Liz's slick anal chute every time she picked up her clit-frigging pace and unleashed a whirl of squishy rubs on her love button, bringing herself to yet another climax. \n\nAs Lizzie's crashing chain-orgasms became increasingly potent with her every new peak, the suctioning contractions of her velvety anal walls grew more intense around my rigid length in turn. Those exquisite increments in her rectum's amazing cock-caressing quivers caused my powerful ass-stuffing strokes to become faster and deeper and harder, which of course made Liz squeal ever more ecstatically and jolted her pussy-diddling fingers to whirl faster on her clit, fueling and reigniting the lewdly delicious circle of our shared anal bliss all over again. \n\nSpooning her tighter and assfucking her ever more urgently as she kept cumming and drenching my pussy-bumping balls with her sweet gushing girlcum, I kept plowing Liz's snug rectum until I eventually reached my limit. As much as I wanted to prolong our passionate sodomy indefinitely, I knew that my orgasm was about to boil over. Well aware that pulling out of her dick-hugging anal sheath to break my rhythm and let my ejaculation subside was not an option, I just warned Lizzie between lustful grunts. \n\n\"I'm gonna cum again, Liz... Oh my god, this feels so good! Your asshole is so hot and tight and slippery, I love fucking your ass so much, Lizzie! Aaahh fuuuck, I'm gonna cum so hard in your beautiful ass!\"\n\nShivering in my arms at the prospect of getting yet another load of my milky seed inside her already creamed rectum, Lizzie locked her bespectacled half-closed eyes with mine and panted: \"Unghh! Fuck yeaaah, Russ... Get on top of me and pump my ass full of cum again! Ooohh, baby, I wanna feel you cumming deep inside meeee!\"\n\nStill pumping the whole veiny length of my shaft into her twitching anus, I firmly pressed my torso against Lizzie's sweat-shiny back and rolled with her until she was lying down on her tummy, her huge boobs squashed into the bed and bulging out to her sides. Draped over her docile voluptuous body, I planted my hands on either side of Liz's head to hold myself up. Her smooth legs were locked between mine as I bucked my hips full force into her rump, slapping her round bouncy booty with my crotch as I my fat log drilled hard and deep into her clingy little asshole. \n\n\"Ooowwhh yeees, babyyy! Fuck my aaaass!\" Liz squealed, gasping and barely breathing as an impressive climax closed in on her. She had both hands trapped underneath her and wedged between her labia, one still busy torturing her clit while two fingers of the other were sliding in and out of her soaked, nectar-drooling pussy. \"Uhhhh I'm so fucking close... More, Russ! Give me moooore! Harder... Fuck my ass harder, babyyyy!\"\n\nDetermined to satisfy her lustful request, I furiously rammed my raging erection into the heavenly snugness of Lizzie's warm rippling rectum. Beads of sweat were trickling down my face and my teeth were clenched hard as I pounded my girlfriend's ass with all I had, feeling my balls tingle and my whole body sizzle with impending release. Thrusting into her oily little asshole at that speed after our long and overcharging buttfuck, I managed just a few frantic rump-skewering plunges, all matched by Liz's loud moans of anal delight, then I was over the edge. Letting myself plummet down with all my weight onto Lizzie's surrendered frame, I buried my swollen cock balls-deep inside her ass one last time and came explosively, letting out a loud bestial growl.\n\nAs a torrential spray of cum blasted into Liz's velvety anal depths and my inarticulate yell of release resounded in the room, a series of choked screams of pleasure erupted from my adored almost-sister's slack mouth. Her narrow rectal tunnel began spasming uncontrollably around my fully buried boner, making me howl even louder as the slippery warmth of her dick-squeezing anal passage tugged avidly on my erupting pole, literally sucking the cum out of me and gobbling every spurt into the farthest recesses of her insatiable asshole. \n\nImmersed in the snug creamy sheath of her rectum, I saw stars as Lizzie's toe-curling orgasm overtook her entire body, claiming her with such force that she was shaking like a stranded fish underneath me while her impossibly tight anus clutched ever more greedily around my ejaculating length. Prolonging my own release, Liz's massive climax milked my cock amazingly and caused a long, uninterrupted stream of thick gooey cum to spurt into her buttery bowels, adding another deluge of my seed to her already sperm-coated anal depths.\n\nBy the time I was done inundating her heavenly butthole, I was so pleasure-weakened that I could barely manage to wrap my arms around Lizzie's voluptuous body. As my head fell down right beside her flustered, bliss-transfixed visage, without even thinking I instinctively pressed my lips to hers, needing to kiss her. Though breathless and still high on her monumental peak, Liz responded immediately and we started sucking one another's mouth languidly yet urgently, still inflamed by the jolting aftershocks of the pleasure that, as always, we never failed to give each other whenever we had anal sex. \n\nI only stopped smooching my beloved Lizzie when I realized that she was sort of trying to speak while still kissing me. Smiling and pulling myself up on my elbows, I straightened up Liz's cute glasses and tucked a few wild strands of her auburn locks behind her ears while she just chuckled and purred softly, breathing contentedly in and out. Finally, looking at me through barely open eyes, she began mumbling in a comically dopey tone, with an adorable expression of dizziness and pure physical joy painted on her face. \n\n\"R-russ! Oohh my god...\" she half-whimpered and half-giggled, continuing to shiver all over while her overstuffed rectum still twitched around my shaft in the last tremors of her gigantic anal orgasm. \"Mmh my ass is so fucking full! Your cum, wow... So warm and soooo much! It's so deep in me, Russ! Owwhh fuck, I'm still kinda uhhh... I'm, like, still cumming, sort of... Oh my god, baby! That was the best assgasm ever! Whoa, I feel like I'm high or something, it was so intense...There's no way my pussy will ever make me cum like that! Not ever!\"\n\nMy grin widened and my heart started beating faster at those delirious, joyfully sexy words from my sweet Lizzie. I couldn't help but laugh as I replied: \"You know, Liz, you'd probably stop cumming if you only took your hands off your pussy!\"\n\nThe drowsy, quizzical glance she shot me, looking over her glasses and furrowing her brow, made me laugh even harder. As her parted lips curled up in smile, Lizzie tilted her head and chuckled. \"Oh! Yeah, you're right, I guess...\" she conceded while extracting her nectar-shiny fingers from underneath her gorgeous frame. \"Actually I need to get... Damn, where did I leave it?\"\n\nAs I looked at Lizzie clumsily flailing her arms on the bedspread like she was making snow angels, I assumed she was looking for the buttplug so that she could keep the three creampies I had given her trapped deep inside her ass. After reaching over for the discarded plastic toy, I dangled it in front of Lizzie's face, smiling genially: \"Looking for this, Liz?\" \n\n\"Actually, no... But thanks, Russ, I do appreciate the thought!\" she answered with an impish snicker. \"I think my poor little asshole has been stretched out enough for tonight. I want it to rest now, so tomorrow it's gonna be all tight and needy and ready for your big cock again!\" \n\nAs my chubby and still fully engulfed boner twitched with anticipation inside her semen-flooded rectum at those promising words, Lizzie looked at me with an expression of playful mischief tinged with adorable uncertainty. Then she said something that made me even more excited. \n\n\"I was actually looking for my cell, but I'm so out of it that I forgot it's not even on the bed! Anyway, I, uhm... I want to see it, Russ, when you pull out of me, I mean. I want you to make a video of my gaping asshole, all gooey and open, with your cum dripping out of it. I bet there's gonna be a lot, and it must look so hot! Can we do it, baby? I never get to see my butthole the way you do... And we need a reminder of this super creampie, you know... For posterity and stuff!\"\n\n\"Fuck, yeah! Of course we can do that, definitely!\" I exclaimed, thrilled both by Lizzie's awesome idea and by the almost embarrassed yet sweetly sluttish tone of her voice as she exposed it. \n\nAfter I planted a long kiss on Lizzie's tumid lips while always staying draped over her voluptuous body with my cock buried in her ass, we sort of rolled and scooted and crawled together toward the very edge of the bed, so that I could extend my arm and rifle through the pile of our discarded clothes. Once I grabbed her phone, I guided Lizzie to reposition on her knees with her upper body resting on the bed, her back arched and her perfect ass tilted up as high as possible. Careful to always keep my butt-jamming shaft plugged to the hilt inside her rectum, I knelt up behind Liz's amazingly round rump and locked gazes with her, starting to film.",
        "\"This is so cool, Russ!\" Liz smiled at me over her shoulder, biting her lips with trepidation as she reached back to hold her plump juicy buttcheeks spread open with her tiny hands. \"How does my ass look on camera, baby?\"\n\n\"Fabulous, Liz! Your ass looks fucking fabulous, as always.\" I truthfully replied, tingling with excitement as I got a nice shot of my irreplaceable almost-sister's spectacular bubble-butt, including her delicate fingers prying her meaty cheeks apart and her little forbidden hole stretched out tautly around the root of my buried pole. \n\nTo the sound of Lizzie's soft cooing moans, I slowly withdrew my cum-coated boner from her conquered booty, recording every second. Pulling out a millimeter at a time to bask in the obscenely beautiful sight of her rubbery distended butt-ring dragging slickly along my veiny shaft, I eventually extracted my glans from the cute little hole that I could never get tired of filling up and stretching out. Lizzie's whimpers spiked up into a discontented sigh as my fat purple knob vacated her cozy, cock-hungry orifice with a lewd squishy pop, leaving her well-fucked anal passage maddeningly empty and her dilated sphincter gaping open. \n\nDespite the fact that she was keeping her ass perched up, no matter how deep into her smooth warm bowels I had shot my loads, as soon as her sperm-flooded anus was unplugged a stream of oozing cum began overflowing Lizzie's reddened little rosebud. Shaking with horniness, my spunk-dripping cock bobbing excitedly right above the twitching, pulsating opening of Liz's abused backdoor, I had to seriously focus on holding the phone steadily in my hand to capture the thick frothy rivulets of milky seed bubbling out of her puffy butthole. It was such an insanely hot sight, and knowing that we were filming it made it even hotter. \n\n\"Owwh, I can feel your cum dripping out of me! Oh my god, Russ, there's so much of it! So hot and creamy...\" Lizzie purred, looking back at me and winking at the camera with an expression of naughty satisfaction beaming on her flushed face. \"Mmhh, I can't believe I had all that cum in my ass, baby... It's so slutty and hot and awesome!\" \n\nWiggling her sumptuous bubble-butt as glob after huge pearly glob of semen escaped her already shrinking butt-ring and trickled down to paint her nectar-glossy labia white, my amazing almost-sister let go of one asscheek and brought her fingers to her pussy. Under my spellbound gaze, Lizzie started lazily rubbing her girlcum-slick and seed-glazed clit in languid circles, breathing harder by the second. Once a good amount of dripping sperm had accumulated all over her fingertips and in the soft cleft of her pussy, she scooped it all up and brought her digits to her mouth. As Liz sucked her fingers clean and happily gulped down her creamy treat, my plump shaft flexed and a final sticky drop of ejaculate spurted weakly from my glans, hanging in a shiny filament for a moment before falling down to splatter at the very edge of the winking, swiftly tightening rim of her asshole.\n\n\"Oh my fucking god, Liz!\" I exclaimed as she repeated that cock-hardening scene again, swiping up dribble after dribble of churned up runaway cum and then swallowing it down with gusto. \"You're so fucking hot, babe! Wow!\"\n\nTittering as she continued her libidinous clean up routine, Lizzie just shrugged and kind of blushed adorably as she locked her bespectacled gaze with mine and defensively murmured: \"Well, it's been hours since I last tasted you, Russ! You know that I need to drink you as often as possible...\"\n\n\"Liz,\" I stated as solemnly as I could, my half-hard cock throbbing while another fresh glob of cum appeared on my knob and dripped straight into her hungrily pulsating, gradually closing rosebud, \"I swear to you: if I wasn't filming right now, I'd squash you in the tightest hug ever!\"\n\n\"I know you would, baby,\" she softly said, gifting me with one of her signature heart-warming smiles. Then, sighing with delight as she once again brought her sperm-scooping fingers to her mouth and licked every last drop of my liquid essence off them, Liz pleadingly moaned: \"Mmmh it tastes so good... But Russ, I really need some help here. I'm leaking so much, I can feel your cum oozing out all around my asshole and down my legs. I'm not sure I can get it all just with my fingers... Can you push some of it back in my ass? Please, baby, help me keep your creamy cum inside me!\"\n\nChoking on my reply, dizzy with lust as I was, I just chuckled and nodded vigorously. Trying to get the best possible shot all the while, I held my plump shaft in my free hand and used it as a brush to gather up all the trickles of runoff cum dribbling down Lizzie's nectar-streaked thighs and glazing her asscrack. After pooling a lot of stray milky globs around her pulsating and now almost closed sphincter, I gently pressed my cockhead against her slippery butt-ring, widening it just enough to push my seed back inside her asshole. I repeated that lascivious routine a few more times while Liz's deft fingers diligently kept up their semen-gathering motions, until, pretty soon, her tender little orifice returned to its usual tiny starfish shape, sealing itself shut and thus holding what remained of my loads within the warm, dark confines of her anal passage.\n\nThough slightly reddened and glossy with a pearly sheen of sperm, I marveled at how quickly Lizzie's adorable tiny butthole had resumed its characteristic irresistible tightness. Only its pouty, blushing puffiness and the single white drop of cum lingering at its puckered center belied the fact that Liz's forbidden orifice had been fucked deeply and stuffed to the limit by my fat cock mere minutes earlier. Once again, I couldn't help but stare in awe at the small yet priceless gem that was my amazing Lizzie's asshole. Telling myself for the umpteenth time that I was the luckiest guy in the world, I let both my own and the camera's gaze rest on that crinkled little knot of sensitive muscles that, once untangled and stretched out, disclosed the way to the biggest, most incredible orgasms for both Liz and me. \n\nI heard Lizzie giggle as she glanced over her shoulder at my rapt face. My expression of dreamy adoration for her sweet hineyhole must have looked goofy and comical, but I just shrugged and kept feasting my eyes on her lovely rosebud. So delicate and cute, yet resilient and demanding, cozily ensconced in the cleft of her lush ass-cleavage and framed by the plumpest and roundest and juiciest buttcheeks ever, Lizzie's asshole really was the finest and most precious bit of treasure in that already gloriously rich booty of hers.\n\n\"Okay, I think we got it all. And... Cut!\" I finally chuckled as I ended the clip with a shot of her cum-shiny fingertips lazily caressing her engorged labia and overworked clit, followed by a final close up of her cute tiny pucker. \n\n\"I don't think the video will need much editing, but if you want we can oohhh... Oooh my god, Liz!\"\n\nTurning around as I was speaking, Lizzie had swiftly taken my semi-stiff and thoroughly spunk-drenched boner into her mouth and started devotedly going down on me, cleaning off every trace of sperm from my veiny tool with soft, long suctions synched with the deliberate bobbing motions of her head. Though caught by surprise, I immediately ran my fingers in Lizzie's cascading auburn locks, holding her hair up and gently stroking them as she slid her soft wet lips up and down my length. \n\nShe inhaled me lovingly, making me groan as she gobbled me to the very hilt, taking full advantage of my half-hardness to let my cock penetrate into her massaging throat until my glans was buried in her gullet and my balls were resting on her chin. As she treated me to that amazing slurping clean-up blowjob, Liz's magnificent ass was still tilted up, jiggling at her every motion and giving me another amazing sight to feast my eyes on, beside the awesome image of her exquisite lips wrapped around my shaft and gliding incessantly from fat tip to wide root. That visual stimulation, on top of the incredible feel of Lizzie's dick-worshiping mouth and the sloppy swallowing sounds she made as she drank down all the cum that coated my length, helped my recuperation a lot. By the time Liz let my pole slip out of her mouth with a wet plop, I was pretty much fully hard again.\n\n\"Mmmh... Yummy!\" Lizzie cooed, smiling sweetly as she looked up at me over her adorable nerdy glasses, all the while running her tongue on her succulent lips one more time to make sure that not a drop of my seed was left behind. Straightening up on her knees and retrieving her phone, she winked and pulled me closer as she giggled: \"And now, Russ, let's take a look at our first porn clip!\"\n\nSitting up against the headboard, holding my arms around Lizzie's gorgeous body as she snuggled tightly into my embrace, I watched her watching the video we had just made. I was glad to see her excitedly biting her lower lip, her eyes getting ever bigger and brighter with arousal as the images went by. As soon as the video was over, Liz turned her beautiful face toward me and blinked in stupor before speaking. \n\n\"Wow! That was so hot! And I... I'm hot too! I mean... I really am, ain't I, Russ? We both were, of course, but... Like... I wasn't even 'acting' or anything, I was doing what felt good, like we always do together, you know, but seeing it like that... Just... Wow!\" Liz concluded, beaming as she finally pushed completely past every remaining doubt she might have had about her looks. \"I actually am hot and sexy, Russ, like you tell me all the time! I mean, like, for real!\"\n\nThe surprised joy radiating from my adored Lizzie more than made up for the vague twinge of hurt I felt as she implicitly suggested that, before seeing herself in that clip, she was still not totally aware of how effortlessly, naturally beautiful she was. As she stared at me with a huge smile on her face, Liz repeatedly glanced back at the phone to see once again the still frame of her gorgeous cock-stuffed ass captured in all its indisputable perfection, as if she was trying to make sure that yes, that was indeed her bouncy bubble-butt and yes, it truly looked incredible. Chuckling, going all fluffy inside as I drank in her happiness, I held my sweet Lizzie by her slim shoulders as I pressed my forehead to her forehead and brushed my lips on her soft lips, speaking straight into her mouth.\n\n\"Do you believe me now, Liz? You. Are. Hot. Crazy hot! And you were all along,\" I stated, my eyes staring into her soulful, bespectacled brown orbs. \"I always mean it, every time I tell you that you're beautiful or that your ass is epic and stuff. I say it because it's true, Liz. I'm glad you can see it for yourself now, but trust me, it's not just the video or anything else. It's you, Lizzie. Like, it's not the booty, it's the beauty, you know... Seriously, you're amazing. So amazing.\"\n\n\"Oh, Russ!\" Lizzie softly murmured, almost sobbing. \"Russ...\"\n\nA moment later, she had her arms locked around my neck and she was pressing herself desperately against me, smashing her big jutting tits into my chest and kissing me all over the face, repeating my name again and again. Running my hands down her spine until I could cup her sumptuous bubble-butt in my palms, I hugged my adored almost-sister tightly as I basked in her unstoppable smooching flurry. By the time I managed to trap her succulent lips within my mouth and we fused in a long passionate soulkiss, Lizzie was straddling me, so that my stiff cock was nestled in the wet, welcoming groove of her smooth pussy lips. \n\nGrinding gently on my lap, moaning into my mouth as she teased her clit, Liz finally pulled back from our kiss, just long enough to whisper: \"I love you, Russ. I love you so much.\"\n\n\"I love you, Liz,\" I breathed out, already pressing my lips to hers.\n\nAfter a long languid while, as I massaged her juicy asscheeks more urgently and she rocked on my lap in needy circular motions to rub her sensitive slit on my boner, Liz interrupted the intoxicating melody of her kiss-muffled mewls and suddenly chuckled.  \n\n\"Russ, just tell me this: am I terrible for thinking that we should make more videos of us fucking? Like, lots and lots more!\"\n\n\"Of course you're terrible, Liz,\" I quipped, \"but we knew that already! I mean, all that business with the buttplug and the triple creampie and all... You have a very, very filthy mind, babe, and I love it!\" \n\nAfter enduring a few playful pokes on the sides and some very well-aimed tickling pinches, all delivered by a giggling and mock-shocked Lizzie, I concluded by saying: \"Anyway, I'm all for making more videos. I guess I could even pick that one as my New Year's resolution, like you did with the lap dance thingy. What do you say, Liz?\"\n\n\"Hell yeah, sounds like fun to me!\" she replied, still laughing as we resumed making out and grinding our sexes together while hugging tight.\n\nA couple of steamy, kiss-filled minutes later, as she rose from my lap and grabbed my thick shaft at the base to align my glans with the slick, soft entrance of her honey pot, Lizzie smiled and whispered: \"This looks like a really great year already, Russ... Oohh so great, baby!\"\n\n\"Y-yes... Aahh yeaahhh!\" I groaned ecstatically as she slowly descended on my pole, engulfing me completely in the liquid warmth of her snug little pussy. \"Oh yeees, Liiiiz!\""
    ],
    "authorname": "ZenZerker",
    "tags": [
        "anal",
        "ass",
        "oral",
        "anal creampie",
        "ass to mouth",
        "love",
        "buttplug"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/backdoor-sweetheart-ch-05"
}
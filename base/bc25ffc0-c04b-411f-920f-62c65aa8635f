{
    "title": "Two Hundred Dollars Ch. 29",
    "pages": [
        "2 (or 3?) Dollars \n\nI can't believe I did this. \n\nLaura looked down at her breasts, surveying herself in shock. Streaks of semen, cooling quickly, covered her entire chest and hung in a couple strings across her cleavage. Her nipples, chilled, poked out under a coating of icing. \n\nWow. He came on my breasts. I really did it. \n\n\"So-o-o-o messy,\" she whispered, unable to the stop the shiver in her voice. \"So messy.\" \n\nLaura continued staring at her body, unable to process anything. \n\n\"Is she gonna be okay?\" she heard Kent ask, his voice hollow as it echoed, blending in with the thumping music from his speakers. \n\n\"Yeah,\" Bailey said. \"Her brain's a little messed up. She'll be fine soon.\" \n\nBailey thinks it's okay, so it probably is, but there's still cold come all over my boobs, Laura looked at herself in paralyzed shock. Oops, I said 'boobs'. No, wait, I only thought 'boobs'. I'm allowed to think 'boobs'. \n\nTime passed and people moved around and Bailey appeared before her. \n\n\"Hey!\" Kent protested. \"That's my facecloth.\" \n\n\"And it's your come, jackass,\" Bailey told him. \n\nKent harumphed and Bailey placed a hot, wet facecloth over Laura's chest to start wiping her clean. \n\n\"Oh, good,\" Laura blinked, looking away from her chest and towards Bailey's face. \"Thanks.\" \n\n\"You okay now?\" \n\n\"Yeah,\" Laura smiled at her friend. \"Just felt kinda weird.\" \n\n\"We noticed,\" Kent put in. \n\n\"For a moment, there,\" Laura looked up at Kent, \"I just felt like I could do anything. Like I would do anything, y'know?\" \n\n\"And then you did it?\" Bailey asked. \n\nLaura took the cloth from Bailey and finished cleaning her body. \n\nBailey wiped too gently to get me clean, but I guess she wouldn't want somebody scrubbing her nipples too hard either. \n\n\"Yeah,\" Laura said. She looked up to Kent, hoping for his approval, \"Cool though, right?\" \n\n\"Very,\" Kent agreed with several quick, jerky nods. \"You earned your two bucks.\" \n\nLaura giggled, feeling far too much of everything to describe it. \n\nI'm clean now. Yes, there are pictures, but my breasts are clean and I'm fine. \n\nShe still detected the stirrings of guilt inside her. What did the religious voice inside her head think of what she'd done? Would it seek to torment her for this as well, or just for her orgasms? \n\nMy butt really stings, Laura reminded herself. That should take care of any guilt I feel for a long, long time. \n\nShe set the facecloth aside and stood up, but hadn't figured for her weakened state. Her adrenaline having worn off, her hormones sinking back to their normal levels, Laura started to shiver and her knees wobbled, having trouble handling her weight. \n\nBailey caught her, held her tightly. Their bodies touched, in that naked embrace, but it didn't matter. The sexual part of the evening had passed. A friend supported another friend, and the amount of bare flesh making contact didn't matter. She didn't count this as an act done for Kent. \n\n\"It's alright,\" Bailey whispered to her, setting her back down on the bed. \n\n\"Are you alright, Laur?\" Kent put in. \n\n\"We'll just get our clothes back on and she can relax,\" Bailey said softly. \n\nKent helped find Laura's clothing and they got her dressed, in her own underwear even. Once she had her pants and her shirt on, she felt calm again. Kent had put his shorts on at some point, and Bailey had at least put her white panties and a shirt on. \n\n\"Okay now?\" Bailey asked, crawling up on the bed to sit behind Laura. \n\n\"Yeah, sorry,\" she said. \"I just went crazy there for a bit. I'll be fine.\" \n\n\"A little too extra?\" Bailey chided, but kept her voice gentle as she rubbed Laura's shoulders. \n\nLaura shrugged and tried to smile for her friends, but knew it looked weak, \"Yeah.\" \n\nShe looked over at Bailey's cell phone. \n\n\"Laur,\" Kent said, following her gaze. \"It was great, really. But if you don't want to give me the pic, that's okay.\" \n\nShe gulped and looked back at Kent, \"I don't know, okay? I feel weird right now.\" \n\nPassing one more glance at the cell phone, she turned her head toward Bailey. \n\n\"Can I see the pics?\" she asked. \n\n\"You sure?\" \n\n\"Oh,\" Laura pulled back, hearing the warning wisdom in her friend's voice. \"Maybe just put them on my phone and I can look at them later and decide?\" \n\n\"Sure,\" Bailey and Kent spoke at the same time. \n\nLaura unlocked her phone and handed it to Bailey so she could make the transfer. \n\n\"You gonna fix the board?\" Laura asked Kent. \n\nKent nodded immediately and wiped the board clean before changing the total debt to four dollars. \n\n\"I'll change it to 'two' if you decide to go ahead with the picture,\" he promised. \n\nLaura smiled, glad they had an understanding, and stood up to test her knees again. \n\n\"That's better,\" she declared, then rubbed her cheeks through her pants. \"I'll remember this for a while.\" \n\nSeeing her in better humour, Kent relaxed too. Bailey handed Laura her cell phone back. \n\n\"I think I'm gonna go home,\" Laura said. \"It's late, right?\" \n\n\"I think we should walk you home,\" Kent said. \"Alright?\" \n\nLaura nodded, \"Thanks.\" \n\n============================= \n\n\"You think she's gonna be okay?\" Kent asked, halfway into their return journey from Laura's home. \n\nBailey shrugged, \"Probably.\" \n\n\"She was real quiet,\" Kent pointed out, his feet crunching lightly through the thin layer of snow on the sidewalk. \n\n\"She broke a lot of her own rules tonight,\" Bailey pointed out. \"The picture, the semen, you rubbing right against her like that, nothing between your bodies.\" \n\nKent gulped, looking sideways at Bailey as she refused to meet his glance. \n\n\"That was her last night,\" he said, mostly as a test to see if he could get a rise out of Bailey. \"Maybe she pushed herself a little too far?\" \n\n\"Maybe.\" \n\n\"I hope we did right letting her do all that.\" \n\n\"Me, too,\" Bailey finally met his eyes, but she didn't look worried. \"It is what she planned.\" \n\nKent unlocked the door to their apartment and they walked down the stairs, eventually stopping outside his bedroom door. \n\n\"I'll let you know when she decides,\" Bailey said. \"Then we can, y'know, finish up?\" \n\n\"Right.\" \n\n\"Thanks,\" she said. \n\n\"Thanks?\" Kent asked, confused. \n\n\"For tonight,\" Bailey replied, as if he should have known what she meant, \"you got us just right, I think.\" \n\nShe grabbed his collar, got up on her toes to cancel out the height advantage his boots gave him, and kissed him on the cheek. \n\nAwkwardly, she turned away, adding, \"Good night.\" \n\nKent watched Bailey go, kicking off her boots in the hall and disappearing into her bedroom. \n\n============================= \n\nThe next morning, when she thought herself ready, Laura laid back on her bed, opened her phone and found where Bailey had hidden the pictures. \n\nHere goes, preacher man. What do you think of this? \n\nThe first picture popped up, a dead centre view of her breasts, still squeezed together in a death grip, horizontally streaked with semen, both nipples covered. \n\nLaura closed her eyes and poked around in her brain, searching for a pang of guilt or a mote of panic. She remembered how she'd felt the night before, but couldn't find a trace of any of her terror or anxiety. \n\nTaking a deep breath, she opened her eyes and looked at the picture again. None of the feelings from the night before came forward. She used two fingers to zoom in on one of her breasts. \n\nThat's me, alright. Up close and personal. \n\nThe sight of the blown up nipple didn't arouse any more guilt than the long range picture. \n\nIt looks like there's even more of a mess from this angle. \n\nWhen she'd first looked at her breasts with her own eyes, her mind had exaggerated Kent's ejaculation into an infinity of glaze over the entire surface of her chest, a mess she'd never scrub clean with a thousand towels. With time, she'd calmed down and seen it for the voluminous but finite amount of seed he'd actually sprayed on her. \n\nFrom the camera's view, however, with trails of semen dripping over her nipples to the underside of her breasts, it looked like even more come. \n\nIt's a bit boring, though, as pictures go. \n\nBailey had taken the second picture from above. Laura noticed her hands a lot more from that angle, the thumbs coated with semen. \n\nBy the third picture, Kent's juice had started to cool, giving her nipples an attractive bit of stiffness. Plus, Bailey had angled the picture from a nicer perspective to her side, giving her breasts a bit more depth. \n\nThat's the nicest one, Laura decided, feeling clinical and professional. At least so far. \n\nThe fourth and fifth ones had Kent's cock in them. \n\nShould have taken these first. He'd started to flag a little by then. \n\nLaura realized she no longer had any negative feelings about either Kent coming on her, nor about having pictures taken of the event. If the preacher had any opinion on the matter, the lingering soreness in her left cheek kept him at bay. In that moment of realization, she made two decisions. \n\nFirst, she wanted to give Kent the third picture. \n\nSecond, she wanted to keep all the pictures for herself and, if she could ever manage it, take a better picture with Kent in it. \n\n============================= \n\nKent's phone vibrated in his pocket as he walked from Physics to Calculus. Even in the cold winter, he knew he had to check it. \n\nI hope Laura's alright, he winced as he coded in his PIN. I've seen both of them messed up, but that looked worse than usual. \n\nBy the time he got the phone unlocked, a second message buzzed in, and then a third. \n\nThe first message was from Laura, a simple, cryptic text. \n\n'Hope you like it!' \n\nThat seems cheerful and positive. Maybe she's okay. \n\nThe next two texts had come from Bailey. \n\n'Laura says ok' \n\nKent took that to mean that Laura had decided to sell one of the pictures to him after all, but neither girl wanted to text those exact words to him. \n\nBailey's second message had already moved on. \n\n'u and me tonight. Finish up. Little talk.' \n\nLittle talk? About what? \n\n'kk,' he sent back. \n\nWith only two dollars remaining, he wondered what could they talk about. He considered the possibility that Bailey wanted to do some fancy deal or other, but shrugged it off. \n\nWhat matters is that we all got through these two hundred dollars with our friendships intact, and nobody got hurt. \n\nKent rolled his own eyes at the thought. \n\nNobody got their feelings hurt, and probably nobody's ass got stung more than she wanted. \n\n============================= \n\nBailey came into his room late that night, after dinner, when Carson went out again. \n\n\"Your phone?\" she asked Kent. \n\n\"Uh-huh,\" Kent held the device out. \"Which pic did she go with?\" \n\n\"Here,\" Bailey held her phone out to Kent. \n\n\"Nice,\" he admired. \"That's the perfect angle for her tits.\" \n\n\"Yeah,\" Bailey said. \"She said your come really cooled her down, so her nipples got hard.\" \n\nKent smiled. \"Do the two of you actually talk like that?\" \n\n\"We get pretty practical, honestly,\" Bailey admitted and made the transfer. \"You should have seen her when she was deciding how to get your come on her.\" \n\n\"Was it that exciting?\" \n\n\"She's never watched porn before,\" Bailey explained, her expression stunned as she worked on his phone. \n\n\"So the two of you watched porn until she found a scene she liked?\" Kent's eyes went wider than Bailey's and his mouth hung open. \n\nBailey nodded, \"You should fix the white board.\" \n\n\"Sure.\" \n\nBailey took a picture after Kent had changed the debt to two dollars. \n\n\"What's that for?\" \n\n\"Making it official,\" Bailey said, \"So I can show Laur that you paid.\" \n\nShe sent the pic off to Laura and turned to Kent, \"Little talk?\" \n\n\"Sure.\" \n\nAlright, Bai, what's up? \n\nBailey took the marker and made three marks on the board. \n\nKent raised a suspicious eyebrow, \"You only owe me two dollars.\" \n\nWhat weird scam are we perpetrating now? \n\n\"Not really,\" Bailey said. \"You remember the time in the shower?\" \n\n\"Hard to forget,\" Kent replied. \n\nBailey handed him the marker and walked past him to sit on his bed. \n\n\"The last 'spanking' we did?\" \n\n\"Yeah?\" \n\n\"I don't want to count that one,\" she folded her arms and glared at Kent. \n\nBailey gulped, a taste of anger covering up something important. \n\n\"Why not?\" \n\n\"You remember what it was?\" Bailey asked him. \n\n\"Yeah,\" Kent said, \"You were, y'know, slapping your ass with my cock.\" \n\n\"Right,\" Bailey said firmly. \"I don't think those even count as spankings. I couldn't even feel them.\" \n\nKent looked Bailey over carefully. \n\nShe's acting like she's offended, but she's lying - or at least not being honest about her feelings. \n\n\"So they shouldn't count because they didn't hurt enough?\" he asked. \n\n\"Right,\" Bailey agreed. \"Think about it. No way is your cock as hard as your hand.\" \n\n\"How about we count all of them as one spanking then?\" Kent said. \"You must have felt it a little.\" \n\nSeeing her exasperation, Kent knew Bailey had hidden something from him. \n\nOut with it, Bai. What's the real problem? \n\n\"Just don't count it all,\" Bailey waved him off airily. \n\n\"Why not? Whenever your ass gets smacked with anything, it costs money\", Kent started enumerating on his fingers, \"My hand, Laura's hand, the spoon, the whip or the spatula.\" \n\nBailey frowned and squeezed her lips together. \n\n\"What's really wrong, Bai?\" \n\nBailey stared up at the ceiling and turned her eyes down again to glare at him. \n\n\"I am not a prostitute,\" she declared, standing up. \"You're not going to pay me for jerking you off, and that's all I was doing and I knew it even then!\" \n\nKent took a step back, breathing out an, \"Oh.\" \n\nI think I'd better just agree with her here, Kent decided, never having seen Bailey so ferocious. \n\nHe turned to the white board, erased the \"2\" and replaced it with a \"3\". When he turned back to look at Bailey, he watched her anger completely deflate, the tension in her shoulders collapsing instantly. \n\n\"Anything else bothering you?\" Kent asked. \"We're about to finish up. I don't want anything left over.\" \n\nBailey looked up at the ceiling, thinking carefully. Her eyes came down and she looked past his shoulder at the white board, and smiled. \n\n\"No, that's it,\" Bailey said. \"What about you?\" \n\n\"Me?\" \n\n\"Yeah,\" Bailey looked him sharply in the eye, \"Is there any time where you felt like I ripped you off, put one over on you, tricked you in any way? I don't want anything left of this debt after today, even if it means taking a few extra spankings.\" \n\nKent looked up at ceiling, trying to go through every time he'd laid a hand or implement on her ass or Laura's. \n\n\"No,\" he shook his head. \"Your asses earned every dollar, as far as I'm concerned.\" \n\n\"Alright, then.\" \n\n\"Alright.\" \n\nThey stared at each other for a moment, eyes locked, neither wishing to move. \n\n\"So...\" Kent trailed off. \n\n\"Right,\" Bailey nodded and walked over to him until her chest touched his. \n\n\"No bra today?\" he asked, looking into her eyes. \n\n\"Would just be in the way,\" she said, her voice as calm and smooth as ever. \n\n\"I see.\" \n\n\"Since, you know,\" she looked up at the ceiling and lowered her voice, \"I'm doing them all naked.\" \n\nKent inhaled sharply, wondering if he ought to try to kiss her at this point. She'd managed one extraordinarily awkward peck on the cheek the night before, but hadn't ventured further. \n\nIt would just fail like the last time. \n\n\"So?\" Bailey prodded. \n\n\"So?\" \n\n\"My clothes,\" she rolled her eyes. \n\n\"They're still on,\" Kent drawled. \n\nBailey sighed, raising her arms in the air, \"Take them off, then?\" \n\n\"Oh,\" Kent shook himself, \"You want me to strip you. I thought you and Laur were both into this 'stripper' thing.\" \n\n\"Not today,\" Bailey kept her arms up. \n\nI guess the shirt goes first, Kent thought, remembering the time she'd blindfolded him. I should feel her up just as much, blindfolded or not. \n\nHe circled around behind her and took hold of the front of the hem of her shirt. As he lifted it over her stomach, he kept his hands as flat to her body as he could. Crossing over her breasts, he made sure each of his fingers stroked her nipples before lifting the shirt clear over her head. Bailey sighed as he tossed her shirt aside and slid his hands back down the front of her body. He cupped her breasts a moment, those perky little mounds, and rubbed circles over her nipples with his palms. Kent felt her body waver in his grasp, but she only faded a little backwards, bracing against his body, and stayed on her feet. \n\nKent's hands reached the buttons of her jeans and Bailey pushed her hips back into him, grinding his growing erection with her cheeks. \n\nShe's only had a day, he thought, what's her right cheek going to look like when I get her pants off? \n\nThe button came undone in his fingertips and he knelt down to pull her jeans off. She'd worn the white thong underneath, so he got a good look at her ass, her cheeks threaded by the white fabric. \n\n\"One fresh and pink,\" he squeezed the left cheek, \"One angry and red.\" \n\nWhen he squeezed the right, Bailey moaned. \n\nNot sure how I'm going to do this, Kent examined her flesh. Can the right take any more? \n\nHe grabbed her hips and forced her to turn around, the sudden motion causing Bailey to spread her legs a little as she faced him. The transparent fabric of her panties let him see right through to her small, dark triangle of hair. \n\nAbove him, he heard her panting impatiently. \n\nI can afford to take my time, though, can't I? Kent thought. This is the end, and unlike the sixty or whatever they did last night, I only get to smack her ass nine times. I guess that means I can go pretty hard. All things considered, she probably wants it that way. \n\nHe slid his hands up Bailey's thighs from behind, squeezing both cheeks at once before reaching for her waistband. She held her muscles tight, clutching the thong between her cheeks while he pulled downwards, making him fight a little for her last garment of clothing. \n\n\"Wait a sec,\" Kent said. \n\n\"Huh?\" \n\nHe turned her and himself at the same time until her back faced the mirror she'd left behind. \n\n\"Now I can see.\" \n\nBailey turned around and saw her own rear in the mirror, the right cheek still red from the night before. \n\n\"Oh,\" she gasped in surprise, tensing up her legs again so the thong of her underwear disappeared completely. \n\nKent pulled down, forcing her panties from the grip of her muscles, unthreading them from the top down. Bailey moaned as the fabric came free. \n\nSweet. \n\nHe pulled down the front of the fabric and let it drop to the floor, then gently pulled her in by grabbing her cheeks. Turning his nose to fit in against her crotch, he pressed his lips to hers, drawing another moan. \n\nShe could stop me now, if she wanted, or tell me to keep going, Kent realized. Without a signal, I'll just have to ask. \n\nA moment later, her hands touched the back of his head, pushing him into her body, his lips pushing into her vulva. \n\nTime to learn a new skill, I guess. \n\nHis tongue eased out of his mouth, a short, fluttering movement poking between her lips. \n\n\"Ooh!\" Bailey yelped, then moaned as his tongue withdrew. \n\nThat was... good? \n\nHe moved more gently, letting his tongue slide up her slit, from as far down as he could reach, past- ",
        "That's her clitoris, then, Kent noted, as Bailey jumped and moaned. \n\n\"Not yet, not yet,\" she begged. \"Spankings first, okay? \n\nKent pulled back, wiping his mouth on his forearm, and stood up, \"Sure.\" \n\n\"You want to undress me?\" he asked. \n\nKent watched Bailey's chest heave as her eyes tried to focus on him. \n\nShe nodded and pulled his shirt off his head, then undid his belt. \n\n============================= \n\nGotta remember what I'm doing, Bailey focused her mind. Stick to the plan, right to the end. We can do this. Don't let Kent distract us with his tongue thing. Count it down to zero. \n\nShe got his jeans undone, unzipped them and dropped them to the floor. \n\nI'll leave his shorts on for now. That's fine. We're both comfortable, I hope. But first, just to be fair... \n\nBailey opened the fly of his shorts and let the head of his erection poke out. With her tongue wide, she took a long wet lick across the head of his shaft, tasting a tiny bit of the salty, clear fluid that graced the little opening. \n\nKent groaned and she put his erection back inside his shorts. \n\nWe're even now, she thought and stood up to face him. \n\n\"What are we doing?\" Kent shook his head to clear it. \n\n\"One at a time,\" she grabbed his head with both hands, cradling his skull. \"Okay?\" \n\nOh, god, how do I explain this to him without saying it outright? \n\n\"What's the matter?\" Kent asked, seeing her anxiety. \n\n\"Kent,\" she said, her eyes wandering away from his, wishing he could understand without having to tell him. \"There's only nine of them, right?\" \n\n\"Right,\" Kent said, \"so make 'em good?\" \n\nBailey smiled, \"Real good.\" \n\nShe released her grip on his head and turned to her right so his right hand could have a good angle. \n\n\"One at a time?\" Kent confirmed. \n\n\"Yep,\" Bailey nodded and bent at the waist until her hands touched the ground. \n\nKent braced her by putting his left hand on the small of her back. \n\nAt least I won't fall over, Bailey thought. How sweet of him to remember. \n\nHis right hand moved across her left cheek to her right. \n\nThat's right. Do the reddest side. If you don't, I'll know you're going easy. \n\nKent did an unusual amount of groping, testing, pinching, trying to find the perfect spot, before his hand finally moved away from her cheek. Bailey could tell, just a moment in advance, when he would strike by the way his left hand tightened against her back. \n\nThe first spanking came through as strongly as she had hoped. It shook her body, stung her reddened flesh, and cracked like thunder across the room. A hungry moan escaped her lips. \n\n\"Eight,\" she muttered. \n\n\"Eight?\" Kent asked, bewildered. \n\n\"Eight left,\" Bailey replied. \n\nKent accepted this with a tilt of his head and Bailey climbed up on the stool to bend over his bed, her thighs close together, and then rose up on her tiptoes. \n\nA second spanking cracked out, ringing in her ears. \n\n\"Seven,\" she said, and wished Laura hadn't gotten so crazy the night before. Their ass cheeks would have made the nicest picture, side by side, pink and red, red and pink. But her friend had needed to get her clothes back on after that little panic attack. \n\nI was afraid, once, of showing him my body, and I don't care about that any more at all. \n\nWith practised ease she turned over on her back on his bed and pulled her legs up to point her toes at the ceiling. Kent sat down beside her and she took his left hand, placing it over the centre of her chest before she reached for her knees so she could hold her legs straight. \n\nBailey held his eyes with hers as he groped her cheeks again, looking for a good spot. When he touched the sorest piece of flesh, she twitched her legs to let him know. \n\nKent smiled, swung his arm back and, without taking his eyes off of hers, struck her low and hard. \n\nThe shock forced her eyes closed and a whimper escaped. \n\nGod, I can feel how slippery my lips are getting. \n\n\"Six more,\" she told him. \n\nBailey had only nine spankings to use tonight, and she wanted to go through every position she remembered as even the least bit interesting. But she didn't want to throw them together at random. She had a specific order in mind and she wanted to see if Kent noticed. \n\nStanding up, she moved over to the foot of the bed and bent over again. But this time, Bailey placed her right knee up on his desk. \n\nHe can see a whole lot of me now. I want him to see me. I want him to see everything now. \n\nWith her right knee up, it made it easy for Kent to take a hard swat at her right cheek. \n\n\"Five,\" she said. \"Damn.\" \n\n\"Is that blasphemy?\" \n\n\"We're not still doing that,\" Bailey said. \"Laura's not here. I need to swear.\" \n\nKent pinched her left cheek and laughed, \"Fine.\" \n\nBailey moved to the other end of the bed and put her left knee high up on his dresser. While this forced her to open her legs wider because of the height, she felt a bit more covered this way, with the dresser right in front of her body. \n\nNot wasting any time on this one, Kent cracked a spanking out on her right cheek. \n\n\"It's gonna be so red,\" Bailey intoned, adding, \"Four.\" \n\n\"Earning your money tonight, for sure,\" Kent admired. \n\n\"Up on the bed, you,\" Bailey pointed. \n\nWith a shrug, Kent climbed on the bed and laid on his back. Bailey threw a leg over his body and straddled him, facing away to present her cheeks. She placed her bare vulva over his erection and took some time to grind him down, slowly working her way up his shaft until his swollen head pushed through his shorts, against her entrance. \n\nFeeling his body heaving under her, she twisted and rotated her hips, pushing him up, partially inside her vagina. \n\nThis doesn't count, not with fabric in between. \n\nKent took a hold of her ass, using his hands to control her body, push her this way and that. \n\nThat feels good, moving me like that, Bailey surrendered to his strength for a few moments, but I think he's had enough for now. \n\n\"Come on,\" she urged, \"Do the next one!\" \n\nHis hand swung back and cracked down again on her right cheek. \n\n\"Fu-uck,\" Bailey breathed out. \"Three.\" \n\nWith regret, she dismounted and stood on the floor, putting her hands on her knees. \n\n\"Laura's favourite position,\" she reminded Kent. \n\nKent took a few seconds to adjust his shorts and finally stood up. Bailey, looking over her shoulder, laughed at his discomfort. \n\n\"Penises are so inconvenient,\" she taunted. \n\n\"Uh-huh,\" Kent grimaced and took a grip on her right cheek. \n\nHe gave her ass a good swat then, and Bailey moaned out a long, \"Two.\" \n\n\"Sit down, buckaroo,\" Bailey shoved him back on his bed. \n\nShe crawled into his lap and raised her hips as high in the air as she could get them and still keep her shoulders on the bed. \n\nPerfect, so perfect. I wish this could be the last one, but it can't be. \n\nBailey tensed up the muscles in her rear as hard as she could, even as Kent squeezed and twisted her flesh. \n\nNothing can hurt me now. Nothing. \n\nKent cracked out his eighth spanking of the night, loud and devastating as all the others. \n\n\"Ow!\" she shouted, and stood straight up so she could exhale sharply through the small 'o' her lips had formed. \n\nRubbing her right cheek, she glared at Kent, \"Alright, boy.\" \n\n\"Hm?\" \n\n\"You're so clever,\" she taunted, \"Figure it out. What's the next position?\" \n\n\"Isn't it up to you?\" Kent asked. \n\n\"Yes,\" Bailey rolled her eyes, \"but I want you to figure out what I'm doing next. If you do, you can give me one extra spanking.\" \n\nDon't let me down, jackass. \n\n============================= \n\nKent steadied his brain, took a deep breath, and tried to focus. \n\nWhat the fuck is Bailey up to? \n\nHe'd had a hard enough time to keeping his shit together long enough to get this far after she'd licked him. She'd wanted hard spankings and he'd delivered them, fit perfectly to order if he ignored that last yelp of hers. \n\nAnd now I have to think? \n\nBailey stared at him, her arms folded under her naked breasts, and waited. \n\nWith a naked girl standing two steps away from me, I have to, what? Do pattern recognition? \n\nKent decided she must have constructed a pattern for him to follow. \n\nI'm an engineer, that's what we do. No problem. What's her pattern? \n\nHe looked first for simple, physical patterns. She'd done some standing up, some lying on her back, then over his lap. \n\nAre we getting lower and lower? Is the next one on the floor, on all fours? \n\nRacking his brain, he tried to see what else Bailey might have constructed her pattern on. \n\nAll of the positions she's used so far are ones we've done. Nothing novel. Nothing new. It's just like last night with Laura, when we toured all the levels of nudity. This is another kind of tour. \n\nSo, if they'd completed the journey through clothing the day before, recapping their descent into nakedness, what pattern had Bailey made this day? \n\nThe nudity thing went from fully clothed, like the girls were the first few nights, to completely naked, which Laura only reached right then. \n\nBailey looked on patiently, seeming to enjoy his torment. The pose she struck said that, even if he got it right and won his extra spanking, she had gained some pleasure from giving him the riddle. \n\nLook at the order of the poses, then. That's gotta be it, his mind desperately tried to focus. We started with that awkward toe-touching thing that almost knocked her over just a few nights ago, and we finished with her over my lap. \n\nHe knew Bailey had chosen that position as her favourite, the one she had started with, the one she could arch her back however she wanted to get the right tension. \n\nWait, Kent's thoughts caught up to him. The first position I ever spanked her in was over my lap. And then Laura showed up, and Bailey tried it Laura's way, hands on her knees. \n\nEverything clicked into place then, like tumblers falling into place on a lock. \n\nThe most recent one was that toe-touching thing that almost made her fall over. That's it! She did this in reverse temporal order. Ha! \n\nHis brain halted again. \n\nBut she's gone all the way back to the beginning already. We started over the lap and we just did that. Where do I go from here? \n\nKent looked up at Bailey in incredulity, suddenly bereft of any idea what to do. \n\nWhat came before we even started? \n\nThen Kent smiled and stood up. \n\n============================= \n\nBailey watched him approach her, the short distance she'd put between her naked body and his, and she knew Kent had solved her puzzle. \n\nHere he comes. I hope he just does both spankings at once. \n\nKent bent down and put his shoulder under her stomach. Bailey locked up her stomach muscles as hard as she could while he picked her up and put her over his left shoulder. \n\nCarefully, his right hand reached around her body and steadied itself on her right cheek. \n\nAs it began, so it ends. \n\nThe discomfort of the position didn't invite long stays, and Kent seemed to know it, because he slapped Bailey's right cheek almost as soon as he could, hard and low, then delivered another spanking to her untouched left cheek. \n\nThat's how he spanked me the very first time, last year, Bailey suddenly remembered. The right cheek was probably too far away to be convenient when he took me over his shoulder, so he just smacked my left. \n\n\"Zero,\" she called out. \n\nKent turned and set her down, and the two of them stared at each other. \n\n\"I-\" he started, and froze. \n\nBailey looked at him, also baffled. \n\n\"Um,\" she muttered, \"The white board?\" \n\n\"Right,\" Kent seized on that mission, turned away from her and wiped the board clean, then wrote on it again where she couldn't see. \n\nWhen he stepped out of the way, Bailey finally saw what he'd written. \n\n\"$0\" \n\nBailey's heart lurched when that registered and she felt something snap deep inside her chest. She took a deep breath and her body shivered. \n\nWhat do I do now? \n\nBailey became aware, once more, of her nudity and of the erection sported by the boy in front of her. \n\nHe's all the way across the room. What are we supposed to do? \n\nThey'd had a contract, the two of them. Bailey had exchanged the display of her body and the slaps to her ass for Kent's money. They'd regulated it, controlled it, defined and negotiated every step of the way. Bailey had counted and accounted for every single exchange, whole dollars and half dollars, every spanking down to zero-point-five accuracy. \n\nAnd what just happened? Bailey felt her chest turn hollow. It's all gone! \n\n============================= \n\nKent felt his erection straining at the skin of his penis. \n\nThis is brutal, and I don't know what to do. \n\nThey'd had an arrangement for so long Kent had lost the ability to find the next step. \n\nLet's be honest, Bailey set this up and I went along with it like anybody would. And now I have this naked girl in my room, and I'm blocking the door, but I'm also paralyzed here because, because... \n\nHis brain stammered. \n\nShe's beautiful, first of all, Kent wondered why he hadn't thought that word about her the whole time he'd spanked her. Look at her, just proud and determined and slim and... \n\nKent shook his head out, locking his desperate eyes on Bailey's confused doe eyes. \n\nAt the same time, I've never seen her look so lost. Does she not know what to do either? Or does she just want to leave now that the deal's done? I don't know how I feel, so how should I know what she feels? What am I supposed to do now?  \n\n============================= \n\nWe're naked, Bailey thought. We're naked and we're too stupid to know what to do. \n\nShe would either laugh or cry in a moment, and she didn't know which. \n\nKent's attracted to me. I'm sure he is or this whole thing wouldn't have worked at all. So why isn't he moving? \n\nBailey kept her eyes locked on his, desperate to see something useful, some action on his part. \n\nSay something, damn you. \n\n============================= \n\nShe looks small, suddenly, Kent noticed. Bailey's always been in charge, even when I had her over my knee. Always larger than life. And now - \n\nKent took a step toward her and received no reaction, only the confused, glassy-eyed stare. \n\nI hope to hell this is the right thing to do, Kent took a second step forward so their bodies nearly touched. \n\nHe reached out and took both of her hands in his, fingertips to fingertips. \n\nWe've never touched like this, he realized. Never held hands. Never shaken hands. Hell, never fist-bumped or high-fived or anything. \n\nBailey's fingertips held his, even while her shoulders remained limp. Kent watched her eyes wander down his body. \n\n\"Bai?\" \n\n\"I,\" she stammered. \n\n\"What?\" \n\n\"I feel,\" Bailey couldn't meet his eyes. \"Like everything inside me is just... broken.\" \n\nBailey shook her head, as if trying to erase the words she'd spoken, \"That's not what I meant. I-\" \n\n\"I know,\" Kent told her, because he felt the same thing, as if the whole ordering and structure of their universe had vanished in an instant. \n\nWe have nothing, Kent realized. And that means we can start something, or we can walk away from each other. \n\nBailey still couldn't meet his eyes, but the speed of her breathing told him she felt the same panic currently twisting his heart in knots. \n\nWhat we had is gone, and it hurts to see it gone. But even if that thing is gone, it doesn't mean we are gone. \n\n\"Aw, hell,\" he muttered. \n\nI hope this is the right thing to do, because I haven't the faintest clue otherwise. \n\nKent slid his hands up her arms, over her shoulders and cradled her head in his hands the way she had just done to him. Watching her lips, he turned his head, and moved forward, closing his eyes only the moment their lips touched. \n\nOh crap, he panicked, his first reaction to the deadness in her flesh. \n\nBut then, suddenly, her lips came alive, pressing firmly against his, opening as his opened, her tongue flitting sideways across the gap. Their tongues met. \n\nWe can kiss, Kent realized, a desperate breath of relief. We're not stupid. It works! \n\nThey separated, breathlessly, both of them turning their eyes downward. \n\n\"Thank god,\" Bailey gasped. \"Thank god.\" \n\nHe released her head from his grasp and slid his hands down to her waist. This sufficed to start another lengthy kiss. Bailey twisted her hips, which Kent took for a queue to take his hands lower. When he squeezed her cheeks, she sucked on his tongue so hard it hurt. \n\nThis is what you want? he wondered. \n\nThe second kiss broke when they ran out of air again. \n\n\"I don't know what I feel,\" Bailey muttered. \"I don't know.\" \n\n\"Don't worry what you feel,\" Kent breathed back. \"What do you want?\" \n\n\"This!\" she hissed at him. \"This. Since the day you put me over your shoulder. This, this, this.\" \n\nThey kissed again and Bailey fell backwards onto the bed, pulling Kent with her, his erection mashing against her vulva, drawing groans from both of them. \n\n\"Oh,\" Kent winced, \"what do you want today, Bai?\" \n\n\"I,\" she declared, \"want the same as I've wanted for so long.\" \n\nKent turned to bite at her neck and whisper in her ear, \"Which is what?\" \n\n\"You inside me,\" Bailey gasped. \n\nKent paused, \"Inside? You mean-\" \n\n\"You're the only one I've like using his fingers,\" she admitted. \"Hated it before you. It has to be you inside me. No one else.\" \n\n\"Wow,\" Kent said. \"So you've never, um-\" \n\n\"Neither have you,\" she pointed out. \n\n\"Fair enough,\" Kent nodded. \"But you're sure you want-\" \n\nBailey grabbed the back of his head and pulled him for another kiss, pushing her tongue into his mouth with unprecedented force. Using less grace than she normally achieved, Bailey managed to work Kent's shorts off, at least down to his ankles. \n\nWhen they came up for air again, she looked him in the eye, \"Please tell me you have a condom.\" \n\nKent nodded toward his dresser, \"In the drawer.\" \n\n\"You ready?\" \n\n\"Oh, hell, yeah, Bai,\" he replied, reaching to open the drawer. \"But you should be on top.\" \n\n\"I, what, why?\" \n\nKent found the string of condoms exactly where he'd left them, always ready for the opportunity, and tore one off the end before ripping open the packaging. \n\nThis isn't rocket science, he concentrated. Just squeeze the air out of the tip and roll it down. Which way is it going to roll? Okay, I got it. Shit, that's tight. \n\n\"Because you've never done it and I've never done it,\" Kent said. \"And I have tried, through all of this, to never, ever hurt you - or at least not to spank you any harder than you needed. Or wanted. Or whatever.\" \n\n\"So?\" Bailey looked panicked. \"Why can't you be on top?\" \n\nKent felt his heart beating, out of control, seeing Bailey's anxiety. \n\n\"What if I go in too fast?\" Kent's voice became tinged with panic. \"Or at the wrong angle?\" \n\n\"Kent,\" Bailey soothed. \"It's fine, okay?\" \n\nShe pushed him down on his back. \n\n============================= \n\nHe's right. I've seen him jerk on his cock and I've jerked on it. It takes a lot to hurt a penis and maybe a lot less to hurt a vagina. \n\nBailey straddled him, as she always had, letting the lubricated latex slide along her vulva and part her lips. ",
        "It doesn't feel too much different from the other times we've done this. It's smoother with the rubber instead of rubbing against his cotton boxers. \n\nSliding upwards, the tip of the condom touched her entrance. \n\nAm I ready for this? Bailey wondered. How long have I been getting ready for this? \n\nWhether she'd admitted it at the time or not, she'd prepared herself for this each time she'd taken any of Kent's fingers up inside her body. Bailey hadn't performed that test for nothing. She'd wanted to know if her body trusted him the way it hadn't ever trusted anyone else. \n\nBut how long before that? How long have I wanted this? \n\nShe couldn't tell for sure and she turned her glare on Kent. \n\n\"How long have you wanted this?\" \n\n\"I don't know,\" he gasped, feeling his tip pushing at her vagina as she moved her body in circles. \"Maybe from the time I picked you up on my shoulder.\" \n\n\"The first time you spanked me,\" Bailey continued to tease his cock. \n\nThat seems right, doesn't it? she thought. Feeling him lift my body off the ground, there was just a tiny bit of me that wanted him to come down on top of me after he threw me on the couch. \n\n\"Maybe it did start there,\" she admitted in soft voice. \"And here we are.\" \n\n\"Yeah, we're -\" Kent started. \n\nBut Bailey interrupted him, pushing gently down with her hips, pushing him against herself, into herself, fighting the little ring of muscle that objected to the intrusion. Kent gulped, locking his stomach up hard, and Bailey rotated her hips, arching her back until she found the right angle. \n\nThen it happened. A little push, and he slid up inside her, gentle and smooth, warm and wet. \n\nIt doesn't hurt, Bailey thought, a pinprick of surprise in her brain. It's pushing and it's tight, but it doesn't hurt. \n\n\"Okay?\" Kent asked, for Bailey had frozen in place suddenly, half of his erection inside her body. \n\n\"Yeah,\" she whispered, and smiled, and then pushed down the rest of the way. \"Oh!\" \n\n\"That's deep,\" Kent gasped. \n\n\"Yes,\" Bailey's eyes bulged, \"Yes. Don't move.\" \n\n\"Okay,\" Kent whispered back, placing his hands on her hips. \"Okay.\" \n\n\"If you spank me,\" she warned, still paralyzed, \"I will murder you.\" \n\n\"I'm not going to spank you,\" Kent protested, a laugh shaking his body and causing Bailey to cringe. \n\nSlowly, her body accepted the penetration, softened, and she could move again. \n\n\"Can we roll over now?\" she begged. \"I really need you on top.\" \n\n\"Okay,\" Kent warned. \"Slowly.\" \n\nTrying to maintain their orientation, Bailey lowered her body to Kent's and rolled over, pulling him on top. \n\n\"Mm!\" she protested, the torque on the steel rod inside her threatening to rearrange her insides. \n\n\"Good?\" Kent asked, taking a push-up position over her. \n\n\"Oh, yes,\" she relaxed. \"It's easier from here.\" \n\nThank god. He's on top. \n\nIt meant her hands had come free. With her left, she pulled Kent down for another kiss, glad that that barrier between them had broken, happy their lips could work together. With her right hand, she reached between their bodies and pushed downward on her clitoris. \n\nThe moment Bailey touched herself, however, her vagina seized itself around his penis. Kent groaned as Bailey moaned in pain. \n\nAs much as he swelled, and as much as she clamped down on him, Bailey found she couldn't stop herself either. Her right hand, almost of its own volition, continued to jam itself on her clit and her mouth opened in silent horror. \n\n\"No-o-o-o,\" she crooned out, finally, and her body began to shake. \n\nConvulsions struck her body, her vagina pulsing out her orgasm. This, she realized instantly, had proven too much for Kent as well. With a grunt, the head of his cock swelled inside her and pulsed along her tunnel. \n\nHe's coming inside me, and I can feel it surging along his shaft. \n\nWhoever had told her that condoms stole sensation had sold her a line of crap. Bailey decided that if she felt any more \"sensation\" than she did right then, it would probably kill her. \n\nLike a pair of wild beasts, they grunted out their orgasms and their sweat tacked bodies finally began to relax. \n\nBailey felt the tightness inside her starting to push Kent out. \n\n\"The condom?\" \n\n\"I got it,\" Kent said, reaching down to hold it at the base of his penis. \n\n\"Slowly,\" Bailey cautioned. \n\nKent nodded and gradually pulled himself out of her body. \n\nBailey winced, feeling the negative pressure sucking at her insides. \n\n\"Woo,\" she breathed when Kent had finally escaped. \n\nKent examined the condom, found no semen leaking through its tip, and fired it into his waste basket. Finally calm, he fell to Bailey's side and she immediately curled up into his chest. \n\n\"Since the first time you spanked me?\" she asked, \"Really?\" \n\n\"What about you?\" Kent prodded. \n\n\"I don't know,\" she said, \"Remember the first time I asked you to, y'know, spank me for money? I must have been thinking it already, right?\" \n\n\"Maybe,\" Kent hesitated. \"I'm not inside your head.\" \n\n\"But the debt,\" she shook her head. \"It was like this wall. If I had sex with your while I owed you money.\" \n\nBailey felt a shiver. \n\n\"It would feel like prostitution?\" \n\nShe nodded, unwilling to speak further on the subject. Let's not wreck this moment. \n\n\"So the spankings got in the way,\" Kent's voice carried a note of sadness. \n\n\"I guess,\" Bailey admitted. \"Until I got them all done, I couldn't see this - couldn't even imagine this happening.\" \n\nKent sighed, \"You could have just paid it off with money.\" \n\n\"No, I couldn't,\" Bailey clicked her tongue and looked up into his eyes. \"It would have felt like cheating. I gotta finish what I start, alright?\" \n\n\"Hm.\" \n\nHe seems off, a bit, doesn't he? Bailey noted. I didn't push him into sex too quickly, did I? \n\n\"Are you alright?\" \n\n\"Oh, yeah,\" he nodded. \"That was, well, I mean, they say you shouldn't expect much for a first time. So I wasn't. But that was... well, it was awesome, right?\" \n\n\"Yeah,\" Bailey assured him. \"So...?\" \n\n\"It's just that, well,\" Kent paused to compose his thoughts and clearly chose his next words carefully, for he spoke them very slowly. \"It's unfortunate that you saw the spankings as something that got in the way.\" \n\nBailey pursed her lips and curled back up into his chest. \n\n\"Not the spankings,\" she reminded him. \"The debt. It seemed like such a good idea, just to poke things along with us, to get you to spank me again. But once I'd made the debt sexual - and especially once you wanted me to undress - I couldn't go any further. Couldn't go here. We'd be having sex and I'd have owed you money at the same time. Ugh.\" \n\n\"But the debt's gone,\" Kent said. \"The wall is gone.\" \n\n\"More like a dam breaking, really,\" Bailey blew out a breath. \n\n\"Yeah.\" \n\nA pleasant silence stretched between them as Bailey tried to blank out her mind and enjoy the moment without thinking too hard about it. She had a lot of confidence that she and Kent would last a good long while and that she'd have plenty of opportunities to take him inside her again. The world felt wide open, with an amazing number possibilities she'd never known before. \n\nFifteen minutes ago, all I thought about were the ways I could pose for him, all the ways he could spank me and I could ride him and he could make me come, Bailey realized. But now - now there's so much more than just spanking and grinding. \n\nKent's thoughts must have tracked a similar trajectory, for he spoke next. \n\n\"Bai?\" \n\n\"Yeah.\" \n\n\"D'you think you'll still want me to spank you?\" he asked. \n\nBailey looked up at him. \n\nThat's a damn good question, actually. \n\nShe twisted in his grasp to lie on her stomach, then arched her back to put her cheeks up in the air. \n\nFirst of all, that's pretty soothing, but how does it feel otherwise? \n\nBailey closed her eyes, imagined her naked body exposed, imagined Kent's hand on her cheek. She flattened her body back down and curled into Kent again. \n\n\"I think so, probably,\" she said. \"But it'll be different without the debt to count down.\" \n\nKent nodded against the crown of her head and she felt relief flowing through his body. \n\nHe's a bit attached to slapping my ass, Bailey smirked. \n\n\"There's one other thing,\" Kent drawled out slowly. \n\n\"Yeah,\" Bailey inhaled sharply, feeling her body tense up. \n\n\"I didn't want be a drag right now, but-\" \n\n\"What ever are we going to do,\" Bailey asked, \"about Laura?\" \n\n============================= \n\nLaura, meanwhile, had secreted her mother's rolling pin into her bedroom and lay on her back, clenching it between her thighs, using her hands to grind it side to side against her panties. \n\nGod, I can feel my sore ass cheek rubbing against the bed, Laura sent a silent 'thank you' to Kent for focusing his payment and her punishment on one spot. The pain let her continue to pleasure herself without religious interruption. \n\nAs the third orgasm of the night rippled through her body, Laura sighed. \n\nI'm not going to be able to have him anymore, she felt depression seize her the moment her ecstasy faded. Bailey will want to keep him for herself. I could see that coming. Anyone could see that coming. And she's my best friend.  \n\nLaura held back tears, knowing she'd have to hold her future together with her imagination and her memories. \n\nUnless I can find another Kent out there somewhere, she thought, someone who knows just what I need and how hard to spank me. \n\nShe groaned in frustration, incapable of imagining another such individual. \n\nDamn it all, she cursed, but it was fun while it lasted. \n\n============================= \n\nKent and Bailey sat across the breakfast table from each other, he slowly eating his scrambled eggs and toast while she sipped her coffee. \n\nShe's glowing, somehow, even though the sun's not even up yet. \n\nCarson's bedroom door opened and he stumbled into the kitchen. \n\n\"Hey guys,\" Carson looked at them blearily. \"How are-\" \n\nTheir house mate cut himself off and looked back and forth between them, then smiled. \n\n\"Oh, thank fuck,\" he turned his eyes to the ceiling and sighed with relief. \"You finally got over yourselves, did you?\" \n\n\"Er, what?\" Kent asked. \n\n\"You two!\" he rolled his eyes again. \"Thinking you're being sneaky and clever and pretending you don't have a thing going on.\" \n\n\"Oh,\" Bailey muttered. \"Yeah.\" \n\n\"Yeah, exactly,\" Carson's eyes went wide in frustration. \"Good to know it's out in the open. I don't have to pretend I don't know and you don't have to sneak around.\" \n\n\"I guess we weren't that subtle,\" Bailey winced. \n\n\"Apparently,\" Kent agreed. \n\n\"No, you weren't,\" Carson exhaled in exhaustion and marched down the hall to the washroom, calling back, \"And I can stop randomly leaving the apartment while you sort yourselves out. God!\" \n\nThe bathroom door closed and Bailey burst into unseemly giggles. \n\nI guess we were really were too much, Kent admitted to himself, adding aloud, \"Poor Carson.\" \n\n\"Uh-huh.\" \n\n============================= \n\n\"How about like this?\" Bailey said, turning her back on Kent and sticking her bare ass out in his direction. \n\nKent sat on the edge of his bed and examined her her half-naked body. \n\n\"Looks good,\" Kent smiled, putting a hand on her cheek. \n\nHe hadn't spanked her since the first day they'd had sex, and while they'd had two decent sexual encounters in the mean time, the piquancy regarding spanking hadn't shown up. \n\nKent pulled his hand back and cracked a spanking across her right cheek. \n\n\"Ooh,\" Bailey played it up. \n\n\"Yeah?\" \n\n\"Um,\" she sighed, \"Sort of.\" \n\nShe pulled her panties and jeans back up and turned to face him. \n\n\"Sort of?\" Kent winced. \n\n\"It's not the same anymore, y'know?\" Bailey shrugged. \"Not your fault or mine.\" \n\nWistfully, she turned to look at the white board. \n\n\"Would it help if you counted?\" Kent asked. \n\n\"Count to what?\" Bailey looked back at him. With a shrug, she added. \"And why?\" \n\nKent shrugged, \"At least the sex part is good.\" \n\n\"Yes,\" Bailey agreed. \n\nSex is new and exciting, Bailey thought, and now that Kent has figured out how to penetrate me without hurting me, he can be on top all the time. \n\nThey hadn't tried any other positions yet, always feeling such a rush once they got turned on, but that would come in time as well. \n\nDisappointed in her butt's ability to turn them on, she dropped down hard into Kent's chair and frowned at the floor. \n\nWhat if he spanks me during sex? Bailey wondered, but didn't feel like proposing it yet. Still kind of anxious about that idea while he's in there. \n\nOn Kent's desk, Bailey's phone vibrated. With a shrug, she picked it up and unlocked it. A message from Laura showed up. \n\n\"Laur wants to come by,\" she said. \n\n\"Have you talked to her since, um?\" \n\n'Um' is exactly how I'd described what happened, Bailey thought. \n\n\"No, I haven't,\" Bailey worried. \"And I really should have. But I don't know what to say.\" \n\n============================= \n\nI have to be happy for my friend, Laura told herself. That's what friends do. We're happy for each others' happiness. \n\nShe had no doubt, walking down the road to their apartment in the waning sunlight, that Bailey and Kent had finally moved forward. \n\nIt's been three days since I even talked to her. What else could possibly have happened? Laura frowned. They've probably had sex. They're normal, not religious like me. \n\nLaura tried to banish the frown from her face. \n\nBe happy for Bailey, be happy for Kent, she repeated it like a mantra in her head, hoping to make it true through force of will. \n\nKnowing they wouldn't have room for her in their new relationship, she prepared herself for the worst. She'd walk down the stairs, politely acknowledge the facts as presented, put on her best, most caring expression and make polite conversation. \n\nThat's what friends do, Laura reminded herself. All over the world, girls chose one boy over another and boys chose one girl over another. If I'm a good friend, I'll stay a good friend. \n\nShe acknowledged she would miss the spankings. Last night, she'd had trouble masturbating. The soreness in her cheeks had run out and she'd only come once and still felt terrible about it. \n\nMaybe I could learn to spank myself, Laura felt her face scrunch up at that thought. Bailey did it, didn't she? \n\nBut Bailey had done it for Kent, to put on a show, and to turn herself on. Besides, the force Laura needed would probably make a sound loud enough to wake her parents at night. \n\nLaura let out a sigh. \n\nBe happy for Bailey. Be happy for Kent. \n\n============================= \n\nCarson let Laura in on his way out, and Bailey and Kent listened to her come down the stairs. \n\n\"Hi, Laur!\" Bailey called out. \n\n\"Hi, you!\" Laura called back and appeared in Kent's doorway. \n\nSeeing them, she gulped and forced a smile on her face. \n\nIt's only been a few minutes since she texted, Kent noted. She must have been on her way home when she called. God, she looks exhausted. \n\n\"How are ya?\" Kent asked. \n\n\"Good,\" Laura nodded, still standing in his doorway, \"You?\" \n\n\"Good,\" Kent said, feeling the awkwardness. \"Come on in. Don't stand there.\" \n\nLaura took her boots off to leave them in the hall, then unzipped her jacket and set it aside. \n\n\"Haven't seen you guys in a bit,\" she shrugged. \"Just thought, y'know.\" \n\nLaura turned her back on them, examining a few pieces of junk left on top of Kent's dresser. \n\nBailey turned to Kent plaintively, her palms up. Kent shrugged and walked over to Laura. \n\n\"Are you alright, Laur?\" he asked. \n\nLaura's shoulder twitched, a restrained sob and a sniff came forth. \n\n\"I'm happy for you two, really,\" she managed to blurt out, and turned towards them, her face tense as her body shivered. \n\n\"Laura,\" Bailey started, standing up. \n\n\"No, look,\" Laura held up a hand toward her. \"I'm sorry, I thought I could do this, but it's hard. And you two, you've obviously, y'know...\" \n\nKent and Bailey shared and a glance again and Laura turned away, facing the white board this time. \n\nDamn, this is harder on her than we'd thought, Kent realized. \n\n\"God, it was fun for a while, though,\" Laura sniffed. \"All of it.\" \n\n\"Are you sure it was fun?\" Kent said. \"I thought you felt bad all the time?\" \n\n\"Oh,\" Laura stammered, looking at the ceiling and holding back tears. \"I felt bad but this - this whole thing - made me feel better.\" \n\nShe shook her head, and pointed at the white board. \"That made me feel better. But I knew it couldn't last, and you guys are together now. I don't want to get in the way.\" \n\n\"You feel bad?\" Bailey's voice came out very slowly, \"Like, right now?\" \n\n\"Yes,\" Laura hissed. \"I can't, y'know, come, without feeling bad.\" \n\nKent looked over at Bailey, behind Laura's back, then nodded at the white board and raised his eyebrows in question. \n\nBai, can we make this work? Kent widened his eyes and pointed at Laura. \n\nHer expression matching his, Bailey nodded back. \n\nBailey firmed up her voice and addressed Laura, \"You feel bad? And you can't feel better without being spanked?\" \n\nLaura started to turn toward her friend, but paused halfway and shrugged. \n\n\"Laura?\" Kent came up behind Laura and placed a hand on her right hip, making her jump. \n\n\"Hm?\" \n\n\"Have you been a bad girl?\" he asked. \n\nLaura twisted around instantly and stared at Bailey, the trail of one tear down the side of her face. The girls' eyes locked together. \n\n\"Really?\" she asked Bailey. \n\nBailey nodded. \n\n\"But, Kent,\" Laura turned her focus on him. \"I can't, y'know. You and Bailey. I can't do what she-\" \n\n\"Laur,\" Kent soothed. \"When have I ever made you do anything you didn't want?\" \n\n\"Oh!\" Laura turned back toward Bailey, jumped over and hugged her friend fiercely. \"Thank you!\" \n\nThey stood apart after their embrace and Kent stepped up behind Laura again, his hand on the small of her back. Laura gasped as his hand slid lower, cupping her cheek. \n\n\"Now answer the question, Laura,\" Kent intoned, giving her a squeeze, \"Have you been a bad girl?\" \n\n\"Yes,\" she whimpered. \n\nFrom his left hand, he handed Laura the marker. \n\n\"Why don't you go up to the white board and write down a number,\" Kent told her. \"Let us know how bad you've been?\" \n\nShaking, a smile coming through her tears, Laura took the marker and walked over to the doorway. She uncapped the marker and wrote '$4' next to a spot that still read '$0'. \n\n\"Is that all?\" Bailey came up behind her. She took the marker, crossed out Laura's number and wrote a '6'. \"I think you've been much worse than that.\" \n\nLaura looked at her curiously. \n\n\"Don't worry,\" Bailey smiled at her. \"I'm going to help pay your debt.\" \n\n\"This isn't debt anymore,\" Laura explained with a laugh, then put her hands on her hips. \"You can't pay for my guilt.\" \n\n\"I think there's a precedent,\" Bailey told her friend. \"Paying for someone else's sins?\" \n\n\"You're not Jesus!\" Laura flushed indignantly. \n\n\"Maybe not Jesus,\" Kent said. \"But she might be your personal saviour.\" \n\nLaura looked at the ceiling and sighed, \"So-o-o much blasphemy.\" \n\n\"That's my thing,\" Bailey admitted. \n\n\"You're really going to take spankings for me?\" Laura asked. \n\n\"You put your ass on the line for me,\" Bailey reminded her. \"Seems fair.\" \n\nBailey smiled at Kent. ",
        "\"Bare asses?\" Laura asked Bailey, who nodded. \n\nSpankings are back on the menu, Kent smiled back at Bailey, watching the two girls slip out of their pants. And Laura and Bailey are still friends. This is going to work out after all. \n\nFin. \n\n============================= \n\nThank you. \n\nThank you to everyone who read, liked and especially commented. \n\nThank you to Bae for all her reading and editing, and especially her perspective. \n\nThank you, Literotica. \n\nCheers, \n\nXavier Torch."
    ],
    "authorname": "xtorch",
    "tags": [
        "finale",
        "money",
        "naked",
        "orgasm",
        "penetration",
        "picture",
        "riddle",
        "spank",
        "stripping"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/two-hundred-dollars-ch-29"
}
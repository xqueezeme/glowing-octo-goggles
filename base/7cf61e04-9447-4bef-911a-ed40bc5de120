{
    "title": "Hero's Life Ch. 13",
    "pages": [
        "Author's note: As you might guess from the delay, I struggled with this chapter. Mucho re-writes. It didn't occur to me that five-way sex would be virtually impossible to write in an intimate way. I ended up settling for what a friend rather accurately called \"interesting in parts.\" C'est la vie. I just can't wrestle with this chapter anymore. Later chapters are backing up.\n\nOkay, remember who everybody in this series is? Here's your refresher:\n\nHero: some random nice guy. Who cares?\n\nHeather (Peaches): smart, sweet, buxom, blonde teen freshman with a fetish for making weird connections, helping people, alcohol, and sex.\n\nSamantha: shrewd, not-so-sweet, petite, slender, dark-haired twenty-something with a knack for putting herself in other people's shoes and figuring out what they want.\n\nTracy: the statuesque Australian blonde that \"got away\" - she and Hero shared a brief romance in Thailand when they were vacationing together as teens. They were intimate one night but she chickened out on actual intercourse. She's still a virgin but with help from Heather, she's found Hero 10 years later to fix that.\n\nLisa: Tracy's cute, tiny, dark-haired, freckled friend and lover. She was with Hero and Tracy that night in Thailand. When Tracy couldn't/wouldn't sleep with Hero, Lisa stepped in and taught him all kinds of things. She's married to a tax attorney who has no idea that Lisa and Tracy are lesbian lovers.\n\nOkee doke, here we go...\n\n***********\n\nThat morning I was the last one up for a change. Coffee was already made and the girls - Heather, Samantha, Lisa and Tracy - were already sipping their coffee cups and lounging around the kitchen.\n\nHeather's back was to me as I entered the kitchen but her sharp little ears picked up my approach. She blindly reached an arm back towards me and I sidled up behind her. Her juicy little teen butt, clad in a pair of my boxers she'd pilfered, hit me at about mid-thigh. I stretched to rest my chin on top of her brassy, blonde head.\n\n\"Sleep good, honey?\" she asked me sweetly.\n\n\"Very.\" I wrapped my arms around her. Her oversized chest squished between my elbows.\n\nIt may have been early, but Lisa, the tiny, Australian freckle-faced cutie, was not above a bit of pre-coffee needling. \"So studboy, today's the big day,\" she teased. Her accent made each \"day\" sound so more like \"die.\" \n\nHer enormous dark brown eyes were bright with interest. \"How's it going to go?\" \n\nOh. Right. That.\n\nI was going to sleep with Tracy today. \n\nYep. \n\nI was going to sleep with Tracy today. \n\nCrud, it didn't make much more sense to me when I thought it the second time. Don't get me wrong, it was definitely a dream come true. I'd fantasized about Tracy on and off for literally a decade. And here she was, in the flesh, and even more beautiful, more sexy, and more generally wonderful than I'd remembered.\n\nI was just having trouble wrapping my head around all of this. Maybe it would make more sense after some coffee.\n\nI chewed my lip and looked to Tracy. She was sitting next to Lisa. She was smiling as she sipped from her coffee cup. Her long, sleek legs were stretched out onto the chair in front of her. \"What do you think, Trace?\"\n\nTracy's slender blonde eyebrows knitted together in thought, as she swallowed. \"Geez, I'd never considered much past getting here. I dunno.\"\n\n\"I might be able to help,\" Sam, my sweet little dark-haired ballerina, offered. She set down her coffee cup and unfolded her petite body to slip from her chair. She padded barefoot over to Tracy and crouched at her feet. \n\n\"Let me try?\" She asked, looking up at Tracy with an expression that somehow managed to be shy and sly at the same time.\n\nI saw where this was headed. \"It's Sam's odd little knack, Trace. She's got this thing about figuring out what people want,\" I tried to explain, failing miserably. Sam was pretty good, okay unnervingly good, at looking into people - seeing what they wanted. I'd watched her do it enough to know.\n\nTracy nodded vaguely at my crummy explanation, no doubt unclear on what was about to happen, and turned back to Samantha.\n\nSammie stared at Tracy's face a few long moments. I watched her eyes tighten as she concentrated. When she started talking in stops and starts it was the first time I'd ever heard her weird little talent in real time:\n\n\"It was dark before. When you and Hero and Lisa were together that first time. A pretty dark. But still dark. It can be, it should be, light now. Bright light. No hiding in a little dark hotel room like years ago. Sunlight. Yes, sunlight. Better to see him and you and everything. Crisp, white sheets. Fresh flowers too. Orchids. All of us? Yes, all together. Naked. In that big bed. Watching, touching, kissing, licking, urging. You can quench an old thirst by drowning it in love. Have something beautiful - something to keep forever...\" \n\nSam's voice trailed off.\n \nTracy eyebrows reknitted themselves in confusion. \"How did you...\"\n\nSam shook her head to clear it. \"Ohh... Tracy!\" She leapt up to hug her tightly. \"So much waiting and wondering for so long. Honey, we're going to make this perfect for you. Did that sound about right?\"\n\n\"It sounds wonderful!\" Tracy said from inside Sam's hug.\n\nIt was Heather who stood and offered Tracy her hand, \"Then come on upstairs, girlie. Let's get you ready.\" The two blonde beauties disappeared and moments later I heard bathwater running.\n\nI looked at Sam and Lisa. \"Okay, so you guys handle the sheets? And maybe some towels?\" They nodded agreement. \"I guess that means I'll run out for flowers.\"\n\nI came back in twenty minutes. While I was gone, Samantha and Lisa had made up the master bedroom. The curtains were wide open. Fresh sheets were on the bed with towels piled here and there.\n\nLisa pulled me into the hallway with a devious smile. She held up a glass of water and a small prescription vial. She popped open the vial and shook a pill shaped like a sunflower seed into my hand.\n\nI squinted at it.\n\n\"Cialis,\" she explained.\n\n\"I'm not so sure I need...\" I started to hand it back to her.\n\n\"Uh uh, you're going to be in a room full of naked women...\"\n\n\"Exactly, Lisa, I don't think I need to take any...\"\n\n\"Quit interrupting and let me finish!\" she chuckled, shaking her head, \"You're going to be in a room full of naked women who are depending on you to perform. Especially Tracy. This is a big day for her. That's a lot of pressure on you. Look at me,\" she eyed me seriously, \"You cannot get stage fright.\"\n\nI gulped. When she put it that way, she had a point.\n\n\"Think of it as insurance.\" She plucked the tablet from my palm and pressed it between my lips. \"Swallow.\"\n\nI did, chasing it with a gulp of water. \"So, does your husband take these?\"\n\n\"Sure, whenever I slip them into his food. Which is whenever I get extra horny.\"\n\n\"So on Saturdays, then?\" I needled her.\n\n\"Pretty much,\" she shot right back.\n\nHow did she manage to pack that much sass into such a tiny body? I shook my head as I followed her downstairs to fix myself a drink. I was going to need something to steady my big head too. \n\nIt was time for my \"go to\" liquor - single malt. I pulled out two heavy whisky glasses and poured myself three good fingers of Laphroaig from one of the 3 bottles I had stashed around the house. I poured two more fingers into the second glass for Peaches. A couple of drops of water for me. An ice cube for her. This was her absolute, bar none favorite and I'd long-since learned to include her every time I partook. It cut down on the whining. Like everything else about her, Heather's whine was cute. But even a cute whine has its limits.\n\nI brought both whisky glasses with me as I made my way back up the stairs. Trudging up, I went through the absurd checklist in my head. \n\nBedroom? Check. Liquor? Check. Gorgeous, smart, funny, leggy, virgin blonde who was waiting for me to make love to her after ten years? Check. Three beautiful, depraved bi-sexual assistants? Check.\n\nWhen the hell did I start living this sort of life?\n\nI turned the corner at the top of the stairs and nearly collided with Heather as she was coming out of the master bedroom I was headed into. \n\n\"Oh!\" she giggled. \n\nShe was flushed and her brassy blonde hair was damp. She was wearing her cream colored satin robe. It was tied loosely at her waist and the inside curves of each of her amazing, round breasts were on display. \n\nFor a couple of moments, I stared at her boobs while she stared at the whisky glasses. We both have our weaknesses.\n\nPeaches smiled brightly, obviously pleased that, despite the absurd sex happening around us, she could still stop me in my tracks. \n\n\"I'll let you keep staring at my boobs if you'll hand over that single malt,\" she finally said, selecting the glass with her tell-tale ice cube. \"Tracy's all yours, Hero. She's nervous though,\" she cocked her head at me with a soft half-smile, \"but it looks like you are too.\"\n\nI sighed, \"Maybe a little.\"\n\n\"You're not worried about how this might affect what you, Samantha, and I have are you?\"\n\nI sighed again. \"That's part of it, I think.\"\n\n\"Silly boy, I had a good idea where this was headed when I invited Tracy and Lisa up to visit. It was a connection I couldn't pass up. And Sammie is totally drooling at the potential debauchery of a five-way. Plus,\" Heather stepped into me and nuzzled my nose with hers gently, \"Samantha and I both know you'd sooner throw yourself in front of a bus than hurt either of us.\"\n\nI nodded.\n\n\"So take a couple of deep breaths and get in there. Tracy is waiting.\" Heather rocked onto her tiptoes to kiss my nose gently. \"Go get her dummy, it's not very polite to keep a girl waiting.\" \n\nI looked at the door. Heather turned but paused next to me. She could have continued downstairs, but she was waiting for me to open the door. I knew how her mind worked, well, part of it anyway. She wanted to see my reaction to what lay inside the bedroom.\n\nResigned, I gave her what she wanted. I pushed the door open and looked inside. My mouth fell open a little and my breath caught. I vaguely felt Heather's lips press quickly to my cheek and her bright little laugh as she tromped gleefully downstairs. My eyes were locked on my bed. And what lay in it. \n\nDear god in heaven.\n\nHow can I describe what Tracy looked like just then? She was beautiful and I'll try to do that justice. But I really need to start with how seeing her stretched out naked on my bed felt.\n\nFor me, this was the sweetest, most robustly satisfying blend of past and present possible. It was as if I had sampled the 1996 Chateau Lafite Rothschild the year it was bottled and recognized its outrageous promise. Then, more than 10 years later the caretaker of that estate delivered a case to my door free of charge after it trebled in splendor with a note that just read, \"Believe it or not, we specifically made this wine for you. We humbly suggest you try it first with lamb.\"\n\nIck... let's try a more down to earth example.\n\nThink back to hottest girl you went to high school with. If you grew up in a town like mine, you had known her since early childhood because you attended elementary school together. When you were small children you may not have been friends but you were at least familiar enough to be comfortable in each other's company. For some reason, though, one afternoon on the playground she'd suddenly kissed you. But then she'd laughed and run away. Girls were even more a mystery to you then than they are now so you stared after her dumbfounded. Then, remembering that girls were \"icky,\" you scrubbed at your own lips with the back of your hand where she'd kissed you. \n\nBut you thought about that kiss off and on for years.\n\nBy high school you and this beauty were in drastically different social circles. She made homecoming queen then prom queen. Walking up to her in the hallway and mentioning the kiss she stole as a little girl would have been pathetic if not impossible. \n\nNow, imagine fast forwarding to your ten-year high school reunion. That same pretty girl, now a fully grown and breathtakingly gorgeous woman, pulls you outside to the parking lot, kisses you longingly and says, \"I've been waiting for you to kiss me back since we were children. Now please take me to the back seat of your car and fuck me until I can't walk.\"\n\nYeah, seeing Tracy naked in my bed felt like that. \n\nOkay, now I can try to describe what I saw.\n\nShe was nude and... glowing. No other word for it. Clearly, Heather had scrubbed every inch of her and it showed as a rosy tinge. Tracy's long slender body was lightly tanned everywhere - not even the slightest hint of a tan line. Her feet were small and delicate. Her legs were stretched out and held together shyly at the knees. Dear lord, her legs went on forever. Sleek calves met toned thighs that curved into perfect hips. \n\nShe had a cute little tuft of soft, pale blonde pubic hair. Her hips collapsed down to a small waist. At one hip was a small scar in the shape of a jagged circle paler than the rest of her skin. On the rest of her otherwise flawless body, the scar it looked more like a decoration than an imperfection. \n\nUp from the little decorative scar, Tracy's belly was flat and smooth and tight. Above that was her slender chest with large, firm teardrop-shaped breasts capped by small pink upturned nipples. Her shoulders were broad but delicately boned and muscled. Her neck was long and smooth. \n\nAnd had her chin always been slightly cleft? I wanted to kiss that tiny dent, how had I not seen...\n\n\"Are you just going to stand there and stare?\" Tracy teased, breaking my reverie. \n\nIt drew my attention finally up to her face. Her lavender eyes were bright and beautiful. Her long, straight, light blonde hair was damp and tucked behind her ears except for one stray lock that stuck to her cheek. Her face was a see-sawing pair of fear and excitement. \n\nI drew myself up and squared my shoulders. \"As a matter of fact, yes, I am going to stare. You'd stare too if you were me.\" I took a long sip of my drink and paused to steady my voice. \"Trace... you're... you're stunning.\" My eyes trailed down her body again. \"But how'd you get that little scar on your hip?\"\n\nShe smirked and traced the mark with a few fingers. \"Let me get this straight... I flew 10,000 miles after looking for you for 10 years. I'm laying here naked in your bed... and you want to talk about my scar?\" she smiled, \"You're impossible.\"\n\n\"Mmm hmmm... I think we need to think about something other than sex for a minute or two. Or at least I do.\"\n\nI walked over to one of the club chairs in the corner of the bedroom, grabbed it by the arm, and dragged it across the floor to the side of the bed next to Tracy. I dropped into the chair, took another sip of my single malt and propped my feet up on the bed. \n\nWas it wise to mix dick pills with liquor? Frankly, I really needed this drink to control my nerves a little. \n\n\"Your scar, pretty girl?\"\n\nTracy turned onto her side to look at me, grinning. Her large breasts shifted on her chest gently. \"Moray eel. Little bugger nipped right through my wetsuit.\"\n\n\"I didn't know you liked to scuba.\"\n\n\"Mmm hmm, every chance I can.\"\n\n\"How long have you been doing it?\"\n\n\"Half dozen years or so.\"\n\n\"Were you alone when he bit you?\"\n\n\"No, I always dive with a buddy.\"\n\n\"A guy?\"\n\n\"No. A girl.\"\n\n\"Has it always been with a girl?\"\n\nTracy cocked an eyebrow. \"You still asking about scuba, Hero?\"\n\n\"Maybe.\"\n\n\"My dive buddy has always been a girl.\" Tracy smirked. \"As for the other thing... there have been guys, Hero. I'm a virgin not a saint. And I don't want to be either of those things. That's why I'm here.\"\n\n\"Oh,\" I said simply as she reached over and snagged my glass to take a long sip of my whisky.\n\nWhen she returned it, I moved it to my other hand and reached a hand out to her. \n\nOur fingers laced together. It made me think of how we'd held hands as kids in Thailand that first time. \n\n\"Do you remember this, Tracy? Holding hands like this that night?\"\n\n\"I remember everything,\" she scooted forward to kiss me. Her lips were so soft that they melted into mine. As always, she smelled like wildflowers and the sea.\n\nIt was a tender moment that was interruped when a naked Lisa essentially bounced into the room slightly ahead of schedule. Her compact, freckle-speckled body vibrated with energy. Not much had changed, she was still a cheerleader after all these years. \n\nSam, also nude, prowled in behind her. She was only an inch or so taller than Lisa but her olive-skinned body was more slender, more sleek, more graceful and more... predatory.\n\nHeather, brought up the rear, twirling in goofily with a huge grin. With her blonde hair, oversized chest, and round, juicy little bubble butt, she completed what looked like a male fantasy sampler pack. \n\nTracy and I watched as the girls slunk to the floor and crawl towards, then up and onto the bed from all three sides.\n\n\nTracy rolled her head to the side to look at me, her lavender eyes bright and happy. \"This is going to be amazing isn't it?\"\n\n\"Well Trace, you saved something for many, many years. It's accumulated a lot of interest. Literally and figuratively. You're cashing that all in now. And it's going to take awhile.\" \n\nWhen the first fingertip touched Tracy's body, I glanced at the clock. It read 12:30 pm. \n\nThe brunettes, Sam and Lisa, began at Tracy's feet, rubbing her toes then the balls of her feet then further down to her heels. Tracy sighed happily and closed her eyes. \n\nWhile Sam and Lisa worked Tracy's feet, Peaches crawled her way up to the top of the bed and gently lifted Tracy's head to remove the pillow beneath it. Peaches sat cross-legged and wiggled her lap under Tracy's head then began to softly massage Tracy's scalp. \n\nThe plan was for the girls to start by slowly working Tracy's long slender body from its outer edges towards the middle. Then they'd twist and tease her until she came several times. When she was relaxed and happy, Tracy and I would make love.\n\nRight then, Tracy was humming contentedly with her head resting in Peaches' lap. Eventually, she focused her dreamy lavender eyes on Peaches' enormous boobs dangling just above her face and studied them for a moment.\n\n\"So, they really are real?\" Tracy finally said in awe.\n\n\"Yep, grew 'em myself.\" Peaches giggled. She'd long since gotten used to the real/fake boob question. She looked down at Tracy while continuing her massage down into Tracy's neck.\n\n\"Wow. OK, I'm sorry, it just never occurred to me that they would actually be real.\" Tracy reached up to cup one of Peaches' heavy, round orbs with her free hand. \"Just, again, wow.\"\n\n\"Awww, thanks,\" Peaches whispered. \"Here, they taste real too.\" She bent forward at the waist to dip one perfect pink nipple into Tracy's mouth. \n\nTracy spiraled her tongue around it while her free hand kept squeezing and fondling the other one. The simple and sensual sight of her quietly nursing at Peaches' dangling chest hardened my erection completely. It would stay that way for quite awhile.\n\nEvery few minutes, Heather moved to switch nipples in Tracy's mouth. Tracy would re-attach herself to it with a soft suckle and resume caressing the other one. Whatever she wanted today, she would get.\n\nBy now, Sam and Lisa had made their way up Tracy's calves and were rubbing both of her thighs in long, slow, muscle-squeezing strokes. She spread her legs a bit to let them extend those strokes up to the top of her legs just by her groin. When the girls finished Tracy's thighs, they skipped over her crotch and switched tactics. The two brunettes bent to lick delicately at Tracy's flat belly; each twisting a tongue into Tracy's navel then continuing slowly upwards. They paused to lick back and forth along the length of each of Tracy's barely visible ribs.",
        "Peaches couldn't resist. She scooched from beneath Tracy's head and began to lick at Tracy's shoulders, tonguing and nibbling the smooth skin there. She began to slide slowly down Tracy's chest.\n\nTracy squirmed beneath the combined tongues of the three girls. She was left looking up into Heather's bald little sex. I watched Tracy's tongue dart out to lick her lips before she arched her neck up to bring her mouth into contact with Heather's smooth slit overhead.\n\n\"Hey!\" Peaches giggled at the contact, \"this is supposed to be about you.\"\n\n\"It is. And right now I want to mash my face into that perfectly smooth little teenage girlie twat of yours.\"\n\nI folded a pillow in half and slipped it beneath Tracy's head for support. As my reward, I was treated to a view of Tracy's mouth brushing Heather's puffy little outer lips. Then her tongue carefully traced up the perfect line of Heather's labia and pushed between them.\n\nIn response, Heather sighed and wiggled her hips happily. She limberly twisted her young body to return the favor by pulling one of Tracy's little pink nipples into her mouth. Lisa took the other, her short dark hair falling around her face and brushing Tracy's breast. Sam watched the other girls work at Tracy's chest then slid her small hand down Tracy's body to cup, then gently rub, her little blonde mound. Tracy moaned up into Heather's smooth-lipped pussy.\n\nLisa and Heather kept lapping and sucking gently at Tracy's chest while Sam circled two fingers at the top of Tracy's sex, working her button. Sam's hand was immediately slick with Tracy's arousal.\n\nSam has an amazing touch and Tracy was half way to an orgasm already. Her first climax came more quickly than I expected. More quickly, I think, than even she expected. \n\nTracye gasped suddenly and moaned out her release into Heather's bald pussy. Her head fell back onto the pillow under it and the girls gave her a minute to recuperate. \n\nWhile she caught her breath, Tracy traced a slender thumb along Heather's now-dripping mound. \n\n\"Heather, honey, can I ask you for something weird? I'd love to see you squirt. You said you can do that sometimes? Do you think you could you do it on me? That would be so hot.\"\n\nPeaches, bless her, adapted smoothly. \"Hmmmm... probably. This whole thing we're doing right here has me really turned on. Best if we have Hero's magic tongue though.\"\n\nI was up and out of the chair before Tracy could even turn to look at me. I leaned in behind Heather and eased my face between her rounded little butt cheeks. \n\n\"That's it, you know where to put it big fella,\" Peaches giggled as I lapped gently at her little rosebud. From her position beneath Peaches, Tracy watched my tongue probing the blonde adolescent's backdoor.\n\n\n\"God, that's hot,\" Tracy panted, watching my tongue work at Heather's ass. I chuckled and reached behind Tracy's head to nudge her back to eating Heather's pussy at the same time.\n\nBetween Tracy's long legs, Sam stretched onto her belly and bent her head in to kiss Tracy's delicately furred mound. Tracy shivered as Sam's tongue began to work on her.\n\nI concentrated on Peaches - on the soft firmness of her little round ass cheeks pressed on either side of my face and on the tiny wrinkled knot beneath my tongue. I licked and lapped, pressing against her backdoor harder and harder. It made Heather moan into Tracy's stomach. It wasn't long before the combined press of my tongue and Heather's eager pushes backwards breached her tiny ring. I wormed it into her ass as she helped by rocking from side to side, hungrily trying to impale herself onto my tongue. Heather wasn't kidding, she was very, very excited.\n\nTracy continued to eat Heather's now dripping little pussy. She surprised me when she paused a few times to tilt her head up and away from Heather's sex to lap along my chin and throat just above her. She made me moan when she gently mouthed by adam's apple. Then she went back to nursing at Heather's smooth lips.\n\nOur combined tongues worked Peaches higher and higher.\n\n\"Ahhh hmmm hmmm,\" Peaches' tell-tale whine was muffled because she'd pressed her face into Tracy's tanned belly. Her ass was hunching more urgently. I knew the signs, Peaches was going to come. I reached a hand down into Tracy's long blonde hair and pulled her face free of Heather's quivering sex. If Tracy wanted Peaches to come on her, Heather needed more space. \n\nTracy leaned back onto the pillow as I replaced her tongue at Heather's swollen clit with my thumb. I worked it in circles as I wedged my tongue deeply into her slippery backhole and curled it to lick every inch of delicate flesh I could reach inside her ass.\n\nPeaches was vibrating as her orgasm approached. Her breath was short and quick.\n\n\"That's it, honey,\" Tracy urged Peaches on. Her chin and mouth were alreay coated in Heather's pussy juice, \"Come for me. Come on me. Please? I want to watch it drip down from your little body. I want to feel it on me. You can do it.\"\n\nPeaches little body went rigid. \"Gaaah!\" she wailed. I wedged as much of my tongue into her little tush as I could, whirling it inside her frantically. My hand was a blur on her button. She hitched her hips violently a few times and gasped. Her little body was vibrating with excitement.\n\nAnd she did it.\n\nI felt a thin stream of warm liquid flow over my thumb. I heard Tracy's breath catch and she squealed with delight as Heather's girlie cum dribbled down onto her chest. \n\nWhen Peaches was done shuddering out her orgasm. She rotated around to kiss me. Then she bent and kissed Tracy too, lapping some of the stickiness of her own juice from Tracy's face. Peaches continued licking downward, tracing her tongue down Tracy's throat then down onto her chest towards where little puddles of girl cum had collected. She lapped experimentally at those too.\n\nTracy giggled at the sheer nastiness of it. \"You two are sooo... wonderfully depraved.\"\n\nSamantha piped up from below, \"Meh, we're just getting started. Want to see something neat? \" \n\nSam crawled up the bed and stuck three fingers in my glass of scotch resting on the nightstand. She returned to dribble the golden fluid from her fingertips onto Tracy's chest, flavoring the puddles of Peaches' cum with droplets of single malt. The amber dots sparkled in the clear puddles. \n\nTracy's eyes went wide as Peaches and I attacked her, racing to lick and suck the whisky-tinged sex juices off her skin. When Tracy was thoroughly licked clean, I sat back in my chair. \n\nWhat followed that afternoon can best be described as a kaleidoscope of lesbian sex entirely focused on Tracy.\n\nSam twisted one of Tracy's legs over so that she was laying on her side facing me with her legs scissored. Tracy leaned over to me in the chair and we kissed softly while Sam massaged her back. Then Heather was licking the back of her neck while Lisa tongued along her spine and Sam lapped her taut, smooth buns. Sam slipped a hand between Tracy's legs again and toyed with her clit as their three tongues swirled. I watched Tracy's lavender eyes slide closed as her orgasm came. Her large breasts rolled gently as she shuddered through her second climax.\n\nThen the girls moved around Tracy, still laying on her side. Lisa began sucking and licking at Tracy's breasts while Heather bent down to eat Tracy's already soaking wet pussy. Heather giggled as she lost herself in the slippery wet folds of Tracy's sex. \n\nSam grinned impishly at me and stretched herself out behind Tracy. She pressed her face firmly between Tracy's heartshaped buns. Tracy jerked as Sam began to lap at her backdoor but then she relaxed with a sigh. She even reached a hand back to twist in Sam's hair and pull eagerly into her ass in encouragement. Tracy came a third time with Heather and Sam's licking her from the front and back.\n\n\nThen Lisa pulled Tracy shakily up onto her hands and knees with encouragement, \"Come on honey, almost there now.\" \n\nLisa slid her little freckled body under Tracy to nibble gently at her nipples from below. Sam joined Lisa beneath Tracy and pulled her hips down to her face to lick and lap at Tracy's now swollen sex. \n\nHeather positioned herself behind Tracy, roughly squeezing Tracy's buns then gently spanking her a few times. She moistened a pinky finger in her mouth and ever-so-slowly eased it into Tracy's tiny rear hole, already slippery from Sam's prolonged rimming. Tracy submitted to the rougher treatment and came again for the fourth time. This time, the girls didn't give her a chance to rest. They continued working her until Tracy shuddered and came again.\n \nBy this point, Tracy looked tired, relaxed, and happy. Her face was flushed and her body was covered in a light sheen of sweat. When I rose from my seat, Lisa rolled Tracy onto her back and pulled her head into her lap. She stroked Tracy's sweat-dampened hair while I swung onto the bed and kneeled between Tracy's legs. \n\n\"How you doing, sexy?\" I asked, resting a hand on one of her knees.\n\n\"So good,\" she said dreamily, drunk on pleasure.\n\n\"I bet. You've cum, what, five times now Trace?\" I grinned.\n \n\"Actually, six.\" Tracy blushed. \"Heather started by rubbing me off back when we were in the tub.\"\n\nWe all looked at Heather. \n\n\"What?\" Heather said defensively, \"C'mon, I couldn't help it. She was there all naked and wet and shiny and sexy. She smelled so darn good too.\"\n \nI turned back to Tracy. \"Even better. If you still want to do this, I guess it will be seven then. Lucky seven.\" I squeezed her knee gently. \"You sure you still want to go through with it? If we stop here, it's still been a pretty good day.\"\n\n\"Don't make me ask you, Hero. It's not very ladylike.\" Tracy smiled thinly. \"I want this. I want you. I've waited too long already. This has been wonderful. I want... I want more wonderful.\"\n\nI took her hand and placed it on my painfully hard cock. It had been stiff for the entire girlie sex show I'd witnessed. She squeezed it firmly and ran her hand up and down its length.\n\nTracy spread her legs eagerly. There was no hesitation now. Her eyes locked on mine as I blindly centered myself on the steaming, slick entrance to her technically-virgin sex. She nibbled her lower lip gently as I rubbed my knob up and down her blonde slit to tease us both at the same time.\n\n\"Hold up a sec. Kiss for luck?\" Samantha appeared beside me. She dipped her head down and quickly sucked my cock into her mouth. I groaned as she demonstrated her cocksucking skills by swallowing the full length of my thick shaft easily and lapping a few times at my balls below. She popped me free and turned to Tracy's dripping pussy for a few equally-skilled licks at her clit and circled Tracy's entrance.\n\n\"That's better,\" Sam grinned as she gripped my cock and nuzzled it against Tracy's opening again. She pressed me inside and I felt Tracy's tight vagina resist my entry.\n\nI looked down at Tracy, \"Ready?\" \n\n\"Beyond ready,\" she nodded.\n\nI pushed firmly and slid a few of inches into her slippery and swollen sex. \n\nTracy's legs shook a little and she groaned. Her head was still in Lisa's lap and her tiny girlfriend stroked her hair sweetly.\n\n\"Fuck, this is good,\" Tracy gasped. \"Lisa, dildos will never feel the same again. He's so warm. So thick.\"\n\nI withdrew slightly and pushed into Tracy a bit further. Her insides were as amazing as her outsides. She was furnace hot and ridiculously tight. \n\nWe groaned together. Her legs shook again and her hips cocked upwards to meet me hungrily.\n\n\"Like the real thing, huh?\" Lisa leaned down and kissed Tracy.\n\n\"Definitely.\"\n\nI pressed in further, Tracy let out a long, soft moan as my last inch slid inside her. I held still to let her adjust to the sensation of her first real cock.\n\nLisa's hands slid down Tracy's body to cup her full, breasts gently. She occasionally tweaked her lover's hardened pink nipples. \n\nI eased back out of Tracy and slowly slid fully into her again. Wow, she was incredibly slick and puffy inside from her afternoon of sex. She cooed as I slid out and into her again. \n\nA few strokes later and Tracy and I were making love. Her long slender legs instinctively rose and wrapped around my waist, pulling me into her hungrily.\n\nI bent and kissed her, teasing my tongue along her lower lip.\n\nShe responded by trapping my lip between her teeth gently.\n\n\"Harder, Hero. I want it a little harder. Just a little.\"\n\nI thrust into her more roughly, her body shook each time we connected. \n\nHer insides were clutching and squeezing and the way she was grinding up to meet me was fantastic. I felt a warning tingle in my balls. She was so beautiful, so sexy, this was so perfect... how could I possible not cum?\n\nTracy saved me by grabbing my shoulder and digging her fingernails deeply into my skin. It helped.\n\n\"Wait and cum with me Hero?\"\n\nI nodded and we screwed gleefully together until I felt my orgasm rushing on again.\n\n\"Trace?\"\n\n\"Me too... me too... me...\" Tracy's voice gave out and her huge beautiful lavender eyes went wider. Her mouth fell open and worked silently. I felt her insides roll and squeeze around me. I ground into her and waited for her orgasm to crash down on her.\n\n\"So fucking good...\" she moaned. Her head shook from side to side and she bit her lower lip as she came. I joined her, streaming cum into the squeezing, grasping heat of her seizing insides. It was the sort of orgasm that is so intense that it makes you giddy even before it was over. I was already dizzy as I finished cumming.\n\nWhen I gently eased from Tracy to lay down on my back next to her, she twisted herself out of Lisa's lap to put her head on my chest. \n\n\"Wow, okay, I think that was worth the wait,\" she sighed.\n\nWhen Samantha scooted up the bed with a hungry look, I knew exactly where this was headed.\n\nSam nibbled her lip. \"Trace? What would you say if I told you I have this kinda off-beat fetish?\"\n\nTracy lifted her head to peer down at Sammie. \"You mean the fetish you have for sucking out cum?\"\n\nSam looked about as surprised as I've ever seen her, \"Yeah, well I....\"\n\n\"Relax Sam,\" Tracy smiled, \"Heather warned me,\" she glanced at Heather before turning back to Samantha, \"Is that what you want, honey? Do you want to eat Hero's cum out of me while it's still warm?\"\n\nSam surprise became a giant grin. She nodded eagerly.\n\nTracy spread her knees and ran a finger up her own thigh, \"Come on then, Sammie. Come clean me up you sweet, dirty little girl. Heather is so very lucky to have you and she knows it. When you're done, I'm going to fuck him again. And you can do this again for me if you want, okay?\"\n\nAs Sam's face disappeared into Tracy's lap, Tracy began petting her soft dark hair. Tracy let out a long, slow breath as Samantha's mouth connected with her freshly-fucked folds. Then she turned her head to look at me, \"Oooh, that's nice.\" She winced at the weird sensation of Samantha's deeper explorations then smiled again. She looked down at my groin. My erection hadn't budged despite having just cum enormously.\n\n\"That thing isn't going soft at all is it?\"\n\nLisa answered for me, \"Errr... probably not anytime soon, Trace... I gave him one of my hubbie's, you know, vitamins.\"\n\n\"Oh,\" Tracy smiled, \"So I can have more?\"\n\n\"Mmm hmmm,\" I answered.\n\nTracy let Samantha continue awhile longer than nudged the brunette away gently.\n\nSam's face popped from between her legs and I watched her tongue curl out raunchily to lick a bit of semen off her upper lip. She caught me looking and winked.\n\nTracy rolled onto her belly and urged me on top of her. I spread her knees out with mine and I nudged my still stiff length at her entrance and pushed inside her.\n\nTracy exhaled softly as I slid into her again and she rocked back towards me. I began to take her in a nice, even rhythm\n\n\"How's this, girlie?\"\n\n\"Goooood,\" she slurred. \"Is it okay if I just lay here and let you fuck me?\"\n\n\"I like that plan very much,\" I kissed the back of her neck and began to screw deeply in and out of her for several minutes, letting Tracy coo happily beneath me. \n\nThen she started giggling for no apparent reason.\n\n\"You okay, Trace?\"\n\n\"Yeah, it's just.... someone is licking my feet.\"\n\nI turned my head to look back. Sure enough, Heather and Samantha were lapping gently at each of Tracy's upturned soles. The girls couldn't bear to be left out of the fun for too long.\n\n\"They're a little nutty like that. So do you like it?\" I asked.\n\n\"It's nice in a funny way,\" she smiled. \"Nobody has ever done it before.\"\n\n\"All kinds of firsts for you today,\" I said as I kissed the back of her neck again.\n\nHeather and Sam each picked up one of Tracy's feet. Together, they sucked her largest toes into their mouths and slurped noisily.\n\nTracy wasn't objecting so I went back to thrusting in and out of hot wet depths.\n\n\"Ugh, that's good,\" Tracy groaned happily a few moments later, \"the three of you are going to make me come again.\"\n\n\"Mmm hmmm, that's kind of the idea, Trace.\"\n\n\"Oooh, they're nibbling now, Those wonderful girls are nibbling on my goddamn toes.\"\n\nI felt Tracy's body start to quiver beneath me. \"Just like that, Hero,\" she moaned, \"nice and steady and deep. I think I love real cock. Fuck, this is good. I can't believe...\" she grunted softly, \"...one person can come...\" she grunted again softly, \"...this many times in one day. Dammit, I'm going to...\"\n\nHer cunt started fluttering around me again and she grew quiet. Her breath came out as a hiss between her gritted teeth. I felt her insides tighten as I bounced gently off her flawless heart-shaped butt at the bottom of each stroke.\n\n\"Mah hahaaa!\" Tracy squeaked loudly as she finally shook and shuddered, twisting underneath me and clawing and biting at the bedspread as she came again.\n\nI pumped her gently while she rode through her peak to keep her riding high.\n\n\"Hold on, need a break,\" she finally gasped when she finished cumming.\n\n\"Thank god,\" I laughed, \"I do too.\"\n\nI let myself down and spread out on top of Tracy, with my face buried in her tousled pale blonde hair. It still smelled like wildflowers and the sea.\n \n\nWe laid like that for a few minutes before Lisa's little freckly face popped up from the edge of the bed next to Tracy. She was grinning.\n\n\"One more, Trace?\" Lisa asked.\n\nTracy shook her head weakly.\n\n\"Come on, there's one more in there. Show 'em some Aussie spirit,\" Lisa urged, eyes twinkling with mischief.\n\n\"You know, nine is the lucky number in Thailand,\" I sighed.\n\nTracy groaned, \"Kay, just one more.\"\n \nI wrapped my arms around her and rolled us over together, my belly to her back, until I was on my back and she was on top of me and facing the ceiling. I pushed inside her furnace-like cunt and gripped her hips then pressed her up into an arching reverse cowgirl position. Her smooth back just curved limply. My forearms were braced against the bed and they take her entire body weight, pressing down into the mattress. \n\nTracy had become a loose noodle of exhausted pleasure - almost completely dead weight. She barely had enough energy to breath much less cum again. But Lisa scooted in to help. She held Tracy's hips firmly and ducked her head in to lick and suck at Tracy's clit just above my lazily pumping cock. Heather and Sam squeezed in from each side and sucked each of Tracy's nipples into their mouths.\n\nTracy was tired but her body reacted automatically. There was too much sensation not to. She came one final time just a few minutes later. This time, her body barely twitched and she moaned hoarsely. \n\nAs Tracy's body shuddered on top of me, I took in the whole room, the whole day, what we'd been doing, how long we'd waited, and all of the the years I'd dreamed of this after Bangkok. Her spasming insides took me with her and I came in her again.",
        "Finally, I let her back down gently and rolled with her so she could lay on her stomach and I rolled off her again. \n\nI cleared enough of her pale blonde hair from her face to kiss her cheek. She was dazed. Her face was flushed. Her lips were dry from panting for hours on end. \n\nI glanced at the clock. It read 5 pm. She'd been cumming all afternoon.\n\nOf course, Sam remembered Tracy's earlier offer. \"Trace, can I...\"\n\n\"You don't have to ask, honey, it's your boyfriend's cum in me. Just come take what's yours,\" Tracy's voice was tired but warm and she managed a short giggle with her invitation. She spread her long legs and I caught a brief glimpse of thick white droplets sliding down her pink, freshly-fucked opening before Samantha eased herself between them. She licked and lapped happily for several minutes before pulling back and resting her little dark-haired head on one of Tracy's tanned buns.\n\nThe sun was setting outside, spilling orangey-red light in through the windows. We all piled around Tracy, to form a human blanket for her, warming her with our pressed flesh. We laid there for awhile, five people quietly luxuriating in the dimming light before I felt a tiny hand gently stroke my still raging hard-on. \n\nWould it ever go soft? Damn dick pills. I was starting to worry.\n \nLisa's voice came softly, \"Hey, while Tracy's knocked out and this thing is just sticking up there, do you think I could get a little too? You know, just for old times' sake?\"\n \nI rolled onto my back with a chuckle, \"You are so bad.\"\n\nI looked at Heather and Sam. Sam shrugged and grinned, \"Go right on ahead. This should be interesting to watch.\"\n\n\nLisa quickly swiveled her tiny body to straddle me. \n\n\"Look familiar?\" Lisa smiled down at me. \n\nIt did.\n\nHer face was half-shadowed and the sun had nearly set. It made me think of her taking my virginity just like this in Thailand years ago. She was still as tiny as she was back then, but she'd become a woman. Her breasts were a little fuller, rounder, heavier. Her stomach lacked the amazing six-pack she'd had back in those cheerleading heydays but it was still flat and tight. \n\n\"Definitely looks familiar,\" I said as she slowly slid her tiny sex down onto me and I groaned. We bottomed out with a half-inch left. She ground down into me tightly and I felt my shaft compress under the weight. \n\n\"Uhhh,\" I grunted, \"it feels familiar too.\"\n\n\"Still tight huh? At least I don't have to turn sideways to get you in there.\"\n\n\"Barely.\"\n\n\"Think you can last longer than the ten minutes you managed back then?\"\n\n\"I think so, I've come twice already and I'm not a kid anymore.\"\n\n\"Good, 'cause I've thought about that night a few times myself since then. Just lay back and relax, I can take what I need from you. Frankly, though, I'm not sure I even really need to move. It feels great just holding still.\" \n\nDespite what she'd said, Lisa rose up carefully and lowered herself again. \"Oh, this is nice.\"\n\nShe repeated the motion, looking over at Samantha and Heather, \"Don't ever let this man get away, he's got the perfect dick.\"\n\nHeather chuckled, \"There are other good parts to him but, yeah, that thingy of his is a definite plus.\"\n\nLisa was now riding me and her eyes were narrowed in concentration. She added a grinding motion at the bottom and her tongue slipped to the corner of her mouth.\n\n\"Whew, you're filling me up,\" she grimaced as she bottomed herself out on me a little too hard.\n\nBut she did it again. She was practically abusing herself on me repeatedly now. I looked up and Lisa's little freckled face was screwed up in a mix of self-inflicted pleasure and pain.\n\n\"I'm going to fucking cum on you, you thick-dicked bastard,\" she gasped.\n\nI reached up and brushed her rigid clit with my thumb.\n\nLisa jerked. \"Do that again.\"\n\nI did.\n\n\"More.\"\n\nI strummed her sensitive button as she skewered herself up and down on my shaft until she came. She groaned and ground herself down onto me viciously, rooting my shaft around inside herself while her body shuddered through her climax.\n\nShe leaned herself down forward and stretched her small body on top of me to catch her breath. Her head was on my chest. \n\nI was still trapped inside her miniature pussy and I felt her squeezing down on me periodically. She didn't seem ready to get off me just yet. I hugged her and ruffled her short dark curly hair playfully.\n\n\"I feel so cheap and... used,\" I kidded.\n\nShe kissed my chin and giggled, \"That was so nice, I may just have to do it again in a minute or two.\"\n\nThrough Lisa's hair, I saw Samantha standing at the foot of the bed. She was getting something ready. Oh boy, things were about to get interesting.\n\n\"Lisa, you're right. You're... ah.. you're not done. Sam wants to get even for that first night when you got a little overzealous with that jumbo vibrator.\"\n\nLisa turned to see Sam wearing a 4\" strap on dildo. She was dripping lubricant along its length from a small bottle and stroking it. Based on the absurd amount of lubricant she was applying, she clearly intended to push that dildo into Lisa's ass.\n\nLisa realized it too. \"Meh, I've taken worse in my bum. Bring it on girlie!\" Lisa piped bravely.\n\n\"Easy, don't egg her on,\" I warned her, \"The dildo's just a prop, honey, it's not the dildo you have to worry about.\"\n\nSam fixed Lisa with her look and held it longer that I'd seen before. She cocked her head one way then the other.\n\n\"What's she doing?\"\n\n\"She's sizing you up. It's that knack thing again. Just get ready.\"\n\n\"For what?\"\n\n\"She's figuring a little bit of you out. You need a safeword. Let's make it... ummm... 'pebbles.' Got that? If you want this all to stop say 'pebbles.' \"\n\n\"Huh?\"\n\n\"Lisa, look at me,\" I said more urgently, \"say 'pebbles' and we'll stop. Everything stops. Just please say 'pebbles' if you understand me.\"\n\n\"Okay, okay. Pebbles. Now quit it, you're making me nervous.\"\n\nSam snapped back to reality and rolled her neck in a slow circle then back the other way like a fighter getting ready for a good scrap. \n\n\"Don't be scared, little one.\" Sam began a running monologue in her purring, hypnotic voice as she climbed onto the bed behind Lisa. \n\nI'd seen Sam zip right down to the core of people. She was about to out due herself this time.\n\n\"Hero can be such a worrier. This will be fun. I promise.\" Her smile was, frankly, a little scary. She stroked Lisa's smooth freckled little back.\n\n\"I can tell what you've been wanting, what you've been needing. You don't even have to ask.\" Sam bent over to kiss one of Lisa's shoulders as she fisted her hand up and down the slickened dildo. She placed the head of the phallus between Lisa's tiny cheeks and pushed gently against Lisa's tight rectum. \n\nLisa exhaled slowly and smartly willed herself to relax.\n\nI felt the dildo begin to breach Lisa's ass. I felt it cause the mouth of her already small pussy to tighten around the base of my dick. \n\n\"Does your husband give you this? Does he fuck you with your girlfriend? He doesn't but he should. What a waste,\" Sam sighed, reaching forward to take hold of Lisa's small hips. \n\n\"God, just look at you. You're so fucking hot,\" Sam continued, using Lisa's hips for leverage and pulling the tiny, moaning brunette back onto the invading dildo. I felt it slide deeper along the thin membrane separating us.\n\n\"He should give you whatever you want for the privilege of sticking his dick in you. I'm going to call him and tell him that,\" Sam continued lancing her toy cock another two inches into Lisa's butt.\n\n\"No offense, but you've got a dumb hubbie. If he doesn't give you what you want, you're going to stay here and we're going to fuck you.\" Sam bottomed out in Lisa's bowels and held still to let her adjust.\n\n\"We'll call him everyday while we're fucking you so he can listen to you cum. Does he even make you cum? Does he fuck you in the ass like this?\" Sam gave each of Lisa's little cheeks a quick spank then slowly pulled out only to slam it back into Lisa's ass. \n\nLisa grunted as her body rocked forward on top of me.\n\n\"Have you even asked him to? No, right? I think you hinted at it a few times and he told you it was disgusting. You actually felt bad about asking for the butt-fucking your sweet little body deserves.\" Sam began to slide in and out of Lisa's ass. I held still, letting Sam control the pace and enjoying the sensations of the two women working above me.\n\n\"When you and your husband have sex it's in the dark and missionary and boring. It lasts about five minutes. That's why you go running to Tracy to get off isn't it? At least she knows what to do with a sweet little pussy like yours.\" Sam paused. \n\nI felt her hand reach underneath and around to play on Lisa's clitoris for a long moment. The inside of Lisa's cunt snapped tighter, hotter, wetter on my motionless shaft. \n\nLisa whimpered a little.\n\n\"Your husband's cock isn't nearly as thick as Hero's either. I'm guessing he's got an average dick.\" Sam moved her hands up to Lisa's shoulders, pulling the small woman back even more harshly. She began to sodomize Lisa roughly. \n\nLisa moaned and her nostrils flared.\n\n\"You think about fucking Hero back in Thailand when your husband gives you the old five-minute poke. Sometimes you can even get yourself off fast enough that way.\" \n\nSam twisted a hand into the back of Lisa's hair and used it to yank her abruptly off my chest and upright. \n\nLisa gasped and arched her small back, her eyes went wild at being so harshly used. \n\n\"I want you to come nice and big for me, Lisa. You know you can. Come with Hero's thick dick in your cunt while I'm fucking your beautiful, little freckled butt,\" Sam panted as she continued her energetic ass-fucking. She leaned in to gnaw on the back of Lisa's neck. \n\nLisa began to sob but urged Sam on by reaching around to pull her in more tightly against her neck. Lisa's other hand came up to squeeze one of her own breasts.\n\nSam rammed the dildo all the way into Lisa's body and reached down with her free hand to strum Lisa's clitoris. She rooted the fake cock deep around in Lisa's ass in widening circles. I felt Lisa's vagina ripple along my shaft.\n\n\"You're slutty little pussy is so stretched. So full. It's good to finally be full again isn't it, honey? Your hungry little slut holes are finally stuffed. God, I wish I had a real dick so I could cum with you. Cum right up your sexy little ass.\"\n\nSam was expertly working little Lisa into a complete frenzy.\n\n\"Oh god, Samantha...\" Lisa finally wheezed.\n\n\"That's it, cum for me right now. Cum for momma, you bitch.\"\n\nOn cue, Lisa exploded into her orgasm. I followed, erupting deep inside her, feeling my spurts bounce off her cervix. The sensation must have ratcheted Lisa up one last notch.\n\nShrieking, sobbing, arms flailing, and still cumming, she melted down onto my chest in a spasming puddle. \n\nSam just let her fall.\n\nLisa shuddered on my chest and I felt her insides grabbing and squeezing me as her orgasm continued rocking her tiny body.\n\nWhen Lisa finally stopped shaking, Sam gently eased the dildo from her and collapsed forward onto the bed next to us. \n\n\"And that, ladies and gentleman...\" Sam panted, raising her arms in victory, \"...is how it's done!\"\n\n\"Crikey!\" was all Tracy could get out.\n\n\"Damn, that was fucking hot! Darth Samantha rides again!\" cheered Peaches.\n\nLisa turned her head and leaned into Sam to kiss her softly on the lips. \"Thanks... I think. That was quite a ride.\"\n\nSam smiled weakly and kissed her back. \"Sorry if it got a bit dark in parts there.\"\n\n\"A little, but I kind of liked it. You do have quite a little knack there missy.\"\n\nThe blonde spectators rushed the bed and leapt in with us. We rested together in a giant contented pile.\n\nAn hour or so later, the door bell rang. Peaches, still naked, jumped from the bed and ran down the stairs. I quickly followed, hopping into a pair of pants, to see her snag two $100 bills from the table at the bottom of the steps and jerk the front door wide open. A little, elderly Asian man was waiting outside. His eyes went impossibly wide at Peaches' completely nude, nubile young body. \n\nNeither of them said a word.\n\nShe simply grabbed the several plastic bags he was holding, mashed the money into his hand, kissed him on the cheek, and slammed the door shut in his face. She raced past me into the kitchen with food-filled bags, leaving a trail smelling of peanuts, coconut and exotic spices.\n\n\"Peaches! Jesus, you could have killed the old guy.\" I peeked out the window to make sure he hadn't pitched over dead of a heart attack on my front porch. Thankfully, he was walking back towards his car, shaking his head.\n\n\"Meh, Mr. Liu will be fine. He's seen me topless a couple of times before. I've been working him up to seeing me completely naked.\"\n\n\"So that's why we get Thai food so fast?\" I realized, watching him drive away.\n\n\"Of course. It's also why the restaurant's owner personally makes our delivery. Food!!!\"\n\nPeaches bellowed. \"Thai food!\"\n\nThai food. Figures. Heather didn't miss a trick.\n\nThere was a rustling from above and the women came bustling down the stairs wearing just t-shirts. Sam was chasing Lisa, playing grab ass. Tracy followed behind them slowly, looking disheveled, satisfied, exhausted and beautiful. Some of her hair covered one of her bright lavender eyes. She kissed my nose as she walked passed. \"Hey there, virgin wrecker,\" she teased, swaying her hips saucily down the hallway on her way to the kitchen.\n\nWhile Heather and I unpacked the food, Sam fetched and popped open a couple of bottles of champagne. Lisa made a silly toast to Tracy's departed virginity.\n\nI don't know what made her do it, but Heather turned to Lisa as we munched, \"How is your husband anyway? Have you talked to him?\"\n\nLisa's guilt was immediately apparent. \"No, I guess I should though. I'll ring him tomorrow.\"\n\n\"You don't think he even suspects what's been going on between you and Tracy all this time?\"\n\n\"No, he doesn't. He's a pretty straight arrow. He wants to get up, go to work, come home, eat dinner and go to bed. He's not quite as, well, perverted as us.\" She sighed. \"He really loves me though.\"\n\n\"Aww... that's sweet.\" Heather said.\n\n\"Do you wish he was? More perverted, I mean.\" Sam asked softly.\n\n\"Maybe, yeah, I guess a little bit. I wish we did some crazier stuff in bed.\"\n\n\"What kind of stuff?\" I asked.\n\n\"Well, I'd love it if he'd be OK with me sleeping with Tracy.\"\n\nThat got Tracy's imagination going. \"Ooooh, how awesome would it be if he would watch us? Or I could watch you guys? Even better, get together for a threesome every now and again too?\" Tracy blabbered dreamily.\n\n\"What else?\" I followed up.\n\nThe question hung and it was Lisa's turn to blush, \"My butt,\" she sighed wistfully, \"I'd love it if he'd show a little interest back there sometimes.\"\n\nTracy just looked at her girlfriend.\n\n\"What, is it a crime to want your husband to fiddle with your bum once in awhile?\"\n\nHeather caught Sam's attention and they shared a long look.\n\nIt was Heather who casually spoke first, almost too casually. \"What if I said we could help you broaden your hubbie's horizons a little?\"\n\n\"I don't know, I've tried hinting around with him. Once, I even snuck a few dirty magazines into his suitcase when he was leaving for a long business trip.\"\n\n\"You've been patiently leading your husband to water, but he won't drink...\" Sam smirked.\n\n\".... you need to shove his head underwater,\" Heather said simply. \"He'll drink eventually.\" \n\nThere was a long pause.\n\nHeather looked at Sam, \"In a couple of days, you could wriggle yourself right into her hubbie's head and lay out some closet fantasy.\"\n\n\"Maybe,\" Sam considered it for a moment, \"but you'd get a better head start. Boobalicious young blonde girl and all...\"\n\nMy brain got traction and I saw the absurd direction this was headed in. I nodded agreement. \"Heather would be less intimidating too. Peaches, do 'sorority girl' for us.\"\n\nHeather grinned. She slouched a little, let her eyes go dull, and started breathing through her mouth. In milliseconds, she'd become a completely airheaded young coed. It was almost as disconcerting as it was funny.\n\nShe snapped back to normal with a laugh.\n\n\"What do you guys mean?\" Lisa asked, not following.\n\nSam ignored Lisa's question to ask Heather, \"Willing to show him your tits?\"\n\nHeather contemplated briefly then nodded. \"No point in pulling any punches...\"\n\n\"Hello?! What the hell do you guys mean?!!\" Lisa demanded more loudly.\n\n\"She,\" I pointed my chopsticks at Heather for Lisa's benefit, \"is volunteering to fuck your husband to fix him.\"\n\nTotal silence. Lisa's eyes became saucers. \"Oh, \" she finally said.\n\nIt took a bit more discussion and a lot of soul searching for the Aussies before Sam was laying out an simple but effective-sounding plan. I popped open a third bottle of champagne and poured us another round. \n\nAlready well-fucked, now we were also well-fed, well-drunk, well-laughed, and well-planned. We tottered back upstairs and climbed into bed together. It was a tight fit. Peaches wedged her way in next to me, her hand lazily wrapping around my finally exhausted cock. She drew one of my hands down around her shoulders to cup one of her full, round breasts. I rubbed her nipple gently and she wriggled happily. \n\nSam gave up her usual spot next to me for Tracy, who twined her long limbs around mine and held tight. I kissed her forehead and she sighed contentedly into my chest. Sam spooned in behind Tracy and ended up sandwiched between the two Australians, as Lisa pressed her little body into Sam's back.\n\nBefore settling down finally, Sam rose up on one elbow to look at me, sleepy-eyed and content. \n\n\"Menage-a-cinq,\" she whispered, reminding me that she'd predicted this whole thing the minute Tracy and Lisa showed up at our front door.\n\nI smiled in the silvery, near-dark. \"We, ma cherie, menage-a-cinq.\"\n\nIt had been a long and amazing day. I drifted off.\n\n\n***\n\nAuthor's footnote: Heather's plan to fly down to Australia should sound kinda familiar to a few of you who have persevered through this whole saga. She's going to fix Lisa's dull hubbie. That would be the story from Hero's Life Ch. 00. If you're inclined, you might re-read Ch. 00 now that you know the set-up. Fresh perspective and all.\n\nUp next: Another confession from Samantha. Not something she did this time. Something that was done to her. She's letting go of bad old things to make room for good new ones.\n\nAnd up next, next: Back to basics for a prequel, \"Peaches& Honey.\" Heather shares the very sweet tale of meeting Samantha and their romance before pulling Hero in. I'm shooting for a something tender and sweet, along the lines of my \"Strawberries & Bubblegum\" story that some folks liked."
    ],
    "authorname": "PacoFear",
    "tags": [
        "lesbian domination",
        "female virgin"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/heros-life-ch-13"
}
{
    "title": "Katy's Reluctant New Look Ch. 05",
    "pages": [
        "In this chapter our heroine, Katy, attends a conservative political fundraiser with her husband. As you know by now from reading the previous four chapters, he enjoys getting her into compromising situations. Well, the fundraiser is the perfect opportunity for shenanigans!\n\nBTW, I struggled with how to categorize this story. It's meant to be lighthearted and fun. So, this seems to be a good category for it! Hope you enjoy!!\n\n\n\n\n\n\nIt had been a week to the day since the interview with Der Spiegel and I was still feeling embarrassed about my shameless teasing of Mr. Amiri. I wouldn't have done it if it hadn't been for Jake's constant pressuring. My goodness, it was all he could talk about from the time Mr. Amiri approached him for the interview. \n\nI just can't believe I was so naughty. All I intended to do was dance in front of him. Jake had the strippers pole installed the weekend before and he was dying to see me twirl myself around it so I thought a bit of harmless dancing would be okay. \n\nI know a lady shouldn't lose control of her emotions, but I couldn't help it. Once I knew how much Marc was enjoying my dancing, I didn't want to stop. I couldn't stop. \n\nAnd, the things I said! Oh, my goodness! I didn't plan on talking dirty like that. I just meant to say a few flirtatious things about how much he would like it if I played with him. Before I knew it, I was teasing him with phrases such as \"You'd love to cum on my pretty face\" and once I got started I couldn't seem to stop.\n\nOh my goodness! My lips came within an inch of his big cock's head before I finally stopped myself. I could feel the heat radiating off his staff and it took all of my effort to pull away. I was so mad at Jake afterward. Sometimes he can be so demanding. But, that's part of why I love him! As for Marc Amiri; He should be happy that I went as far as I did.\n\nTo tell the truth, I hope I'm never put in that situation again. I don't know how I'd react. I'm just thankful that it's over and a week has passed and today's my birthday. \n\n\"Oh, Darling! You shouldn't have!\" I said to Jake as he surprised me with a gift. Jake never forgets my birthday and he always buys me something I love. This time it's a wonderful dark gray business suit! \n\n\"Jake, I love you!\" I told him excitedly. \"You know how much I wanted this! I'll wear it to the Conservative Political Action Committee dinner tomorrow night.\"\n\n\"Try it on, Katy. Let's see how a thousand dollar women's suit looks on my beauty queen.\"\n\nJake makes my heart melt every time he calls me that. We were high school sweethearts, homecoming king and queen, and now married with beautiful children! Jake calls me his beauty queen because I competed in a few Miss Texas pageants when we were in college.\n\nI have to admit I get quite a few looks when I'm out and about. I suppose it's my long dark hair and slender legs. Having a nice cleavage and a pretty face probably helps too. It certainly feels good to turn heads as I walk through a room.\n\nAs I walked to the bedroom to try on my new suit I thought of how happy I was that Jake didn't buy me anything risqu\u00e9' or revealing. \"Buying me this suit is a nice change for you Jake,\" I said under my breath as I looked into the bedroom mirror, turning this way and that, to admire my look. \n\n\"Much better,\" I said. For the past year, the only clothes Jake has been bringing home for me are very inappropriate for our image! Short miniskirts, tight low-on-the-hip pants and revealing tops. It's been awful! He seems to want me to dress like a hooker. That's why I'm so glad to open my present and it not be another 'Show Off My Sexy Wife' outfit. He probably got it all out of his system with the interview hijinks he pulled last week.\n\n\"I've got my old Jake back!\" I said with pride as I slid into the pants. The suit came with a pair of pants and a skirt. A nice women's suit often has both, but I chose the pants because the skirt was a little too short for me. Jake must have given the tailor the wrong measurements because it's hemline is seven inches above my knees! But, the pants fit perfectly; even in the high-heels that came with it!\n\n\"Va-va-voom!\" Jake said upon seeing me walking into the living room. \"Baby, you're beautiful!\"\n\n\"Why, thank you kind sir. I do try!\" I said teasingly and gave him an 'Aw Shucks' pose. \"I wish I'd had it for the Der Spiegel interview last week.\"\n\nThe suit really was a nice look on me. The jacket was short, ending just below my waist and covering up the top of my pants. The blouse was made of expensive silk. It was a short, button up blouse that was semi-transparent. \"Not to worry,\" I thought. I'll just wear a camisole underneath to cover my bra.\n\n\"You look great in the high-heels! They show off your pretty legs and ass,\" Jake told me.\n\n\"Jake! Don't be silly! I don't care one bit about showing off my legs and behind. If that's what you think, then I'll just wear flats with it.\" \n\nI was surprised when Jake didn't respond. I expected him to pull me over his knee and give me a nice, firm spanking. That's what he usually does whenever I'm not letting him get his way. He knows how much I love a firm spanking to put me in the right frame of mind.\n\nI kinda tilted my head just a bit, and waited for the response that never came. \"Well, well,\" I thought. My old Jake really is back. What a breath of fresh air! Does this mean he is done with his little episodes of wanting to show me off? \n\n\"How'd the skirt fit, Katy?\"\n\n\"Oh, just wonderful, dear. It's not too tight and not to baggy! Just a bit too short. I'll have it tailored next week.\"\n\n\"No. Don't do that. It's just the way I want it. You can wear it to the County Club tomorrow for the PAC dinner,\" he said. \"And, I expect you to wear garters and stockings instead of those pantyhose.\" \n\nI quickly explained to Jake how inappropriate it would be for me to wear the skirt to the dinner. \"It's too short, honey. All the top conservative political players will be there,\" I told him. \"Including Bob Townes and Senator Hastings. You don't want me dressed inappropriately in front of the President of your brokerage do you?\"\n\n\"Katy, it's only a short skirt. Oh, and make sure your bra and panties are skimpy and see-thru.\"\n\n\"Hmmph!\" I snarled. Then, pivoted on my toes and marched to the bedroom to change. So much for having my old Jake back.\n\nI was still mad at him the next afternoon as I shopped for matching lingerie at Victoria's Secret. \"Just who does he think he is,\" I whispered through clenched teeth as I held my selection of bra, panty and garters at arm's length to admire them.\n\n\"Will this be all?\" the pretty brunette sales assistant asked.\n\n\"Black, lacy and sheer! You're husband will love you in these,\" she added. \"Ma'am, do you need stockings to go with the garters?\"\n\n\"Oh, silly me! Yes, please. You're best quality stockings!\"\n\nShe selected a pair from the drawer and wondered aloud if they would fit. Looking at my long skirt she gave me a questioning look. \n\n\"I'm sure they'll be fine. That's the size I normally buy,\" I assured her. \n\n\"Yes, but these are a new style. Please, can I convince you to try them on?\" She motioned toward the changing room and walked away carrying my stockings.\n\n\"Well, crap!\" I whispered, I wasn't in the best of moods and I was thinking she was a pushy little hussy to assume I would simply follow her. I wasn't really made at her. I was mad at Jake for making me wear clothes that were not appropriate for a conservative woman.\n\nWhat else could I do but indulge her? She poked her head back around the corner, seemingly impatient with me as I lagged behind.\n\n\"Coming!\" I said aloud, forcing a cheerful smile.\n\nAs I entered the changing room I met her outstretched arm with the stockings in hand. I forced another smile and a thank you as I accepted them, knowing full well they would fit perfectly, and feeling a bit frustrated at having to go through a useless exercise. I rolled them up my legs while she waited outside the curtain. I was certainly caught by surprise when I discovered they didn't fit well at all. \"My Goodness!\" I exclaimed.\n\nThe next thing I knew, my pretty sales assistant was poking her head thru the curtains, looking up my legs! \"Those don't fit well at all,\" she fussed. \"Your legs are much to slender for them. I'll get a smaller size.\" \n\nShe was gone before I had time to stop her and returned with a smaller pair. Well, to my surprise she sat down on the bench beside me and began opening the package. \"Let's be sure to connect them to your garters too. We want to make sure they fit properly.\" \n\nI paused for a moment with the new pair in hand, hinting that it was time for her to leave. But, she didn't take the hint and seemed determined to stay and make small talk as I slid on the stockings, saying, \"Ma'am, did I tell you how pretty you are? I hope one day I'm as pretty as you!\"\n\nI've had just about enough of this, I thought. So I decided to do something about it. \"What's your name, young lady?\" I asked somewhat sternly.\n\n\"Danielle,\" she answered. \"And yours?\"\n\n\"Well, uhmmm....Katy,\" I replied and shook her outstretched hand. I was about to tell her to stop calling me \"ma'am\" and that I'm thirty-four years old, not fifty! After that, I planned on telling her to kindly remove herself from my changing room! \n\nBefore I could get a word out she disarmed me with her kindness. \"Nice to meet you, Katy! I hope you don't mind me helping! It's like, you're so pretty and all. I just want to make sure everything's perfect for you!\"\n\nMy heavens! What can I say to that? I felt as though I had just met a nineteen-year old version of myself. I can't hurt this young girl's feelings just because I'm angry at Jake. \n\n\"You're so sweet!\" I told her. \"I'm just not used to anyone helping me try on my stockings!\" I said, feeling better about my attitude. \"You're very helpful, Danielle. Thank you!\" I was obviously being too hard on this young woman. \"Relax, Katy,\" I said to myself. Let her do her job.\n\nI must admit to being taken aback when Danielle asked me to step out of my skirt. \"Excuse me?\" I asked quizzically. \n\n\"You know...so I can help you with the stockings,\" she answered.\n\n\"Oh, yes, of course,\" I replied. After my awkward double-take, I reluctantly stood. Just as I was coming to grips with my lack of privacy she spun me around and all in one motion she unzipped the back of my skirt and slid it off my hips! \n\nWith my skirt pooled around my feet, Danielle took my hand to balance me as I stepped out. Her hand was soft, warm and slender. I noticed her fingers were exactly the length of my own. \"Such a sweet girl,\" I thought.\n\n\"And your panties too, Katy. We want to make sure your new ones fit properly.\"\n\nAs Danielle undressed me, the feeling of her warm hands clutching my hips and her fingers slipping under the bands of my underwear made my body shiver. I was uncomfortable being in this intimate situation with Danielle; but didn't want her to stop. A rush of doubt, anger and excitement swept through me. \"Does she notice my goosebumps,\" I wondered, and held her hand as I stepped out of my panties.\n\nDanielle held my new panties delicately between her thumbs and forefingers as I slipped my feet into them. She slowly pulled them up my calves, over my knees and up my thighs toward my hips; where her soft hands once again made contact with my flesh. The back of her fingers slid up the side of my legs, stretching open the waistband until it fit over my hips. \n\nShe tilted her head. \"There,\" she said slowly, as if admiring the look of the panties on my body and she primped and tweaked at the waistband and crotch as she admired me; sending shivers up my spine as I felt her touch so close to my kitty.\n\nI was so glad I had a bikini waxing done yesterday when she complimented me, \"Ma'am, your little bush is so beautiful! It's like, perfectly trimmed and everything!\"\n\nWith a pensive look on her face she continued primping my panties, brushing her fingers across my pussy as she straightened the fabric in front. \n\nDanielle slipped her fingertips under the leg bands on the side of my hips and slid them forward, down the bands and toward my crotch, pretending to be adjusting the fit of the fabric on my legs; and as she reached my pussy they touched the outside of my labia. \n\nHer tongue pushed out, between her lips and she licked them as she moved her fingers up my crotch and through my pubic hair, seemingly unable to resist exploring me, before a look of being caught with her hand in the cookie jar came across her face. \"I'm sorry, I couldn't help myself!\" she apologized.\n\nI wondered if she could tell my pussy was tingling and wet. \"My goodness! Danielle, you're so attentive! Don't apologize. And, thank you. I don't believe I've ever received a compliment on how pretty my bush is,\" I replied nervously while trying to figure out what was happening to my emotions. \n\n\"Next comes the garter belt,\" she said with a voice that had changed from cheerful to sultry.\n\nI'm so lucky to have a nice firm behind and shapely legs because Danielle spent a lot of time fastening the garter belt and adjusting my panties. \n\nDanielle then slowly rolled the stockings up my legs. At first, I kept telling myself that she was only doing her job. But, I gave up on the pretense when she slid her fingers under my panties for the second time, her knuckles brushing across my pussy lips, pulling them apart. \n\n\"Oooh! That tickles,\" I exclaimed and pushed up onto my tippy-toes as her fingers tickled against my clitoris. \n\n\"Sorry! I needed to make a small adjustment, ma'am,\" she said.\n\nI was somewhat embarrassed to see the overhead light glistening off my pussy's moisture on the back of her fingers as she connected my stockings to the clasps of the garter belt.\n\n\"Step into your high-heels and let's take a look, Katy,\" Danielle suggested. \"Perfect!\" she added as I posed in my heels. \"You're so beautiful.\"\n\n\"Thank you, Danielle.\" \n\n\"Oh, hold on. There's a loose strand of fabric sticking out of your panty. Please, sit down and let me get that for you.\"\n\n\"Don't worry about that, Danielle. You've been so helpful. I can cut it off at home.\" I said, but sat down just as she had asked on the bench beside her.\n\n\"Nonsense,\" she responded, lowering herself onto her knees in front of me, pushing against my knees and forcing them apart. The feeling of the inside of my legs touching the soft skin of her shoulders was electric. \"I'll cut it free with my teeth. Won't take a second.\"\n\n\"Danielle! I, uhmm..Isn't this highly irregular? Oh, goodness. Mmmmm!\" I went from a gentle protest to a gentle moan as she placed her mouth on the thin silk fabric covering my clitoris and sucked the loose strand into her mouth.\n\nObviously, no woman had ever been between my legs! I looked down to see her beautiful dark hair tickling my upper thighs. I unconsciously closed my legs until they held her shoulders. Her nose was against my bush and only the thin, silk fabric was separating her mouth from my clitoris as she struggled with the loose strand. \n\n\"Oohh, my, my! Danielle, did you get it?\" I asked with my voice quivering. \"Did you get that bothersome little strand?\"\n\nAs she looked up to make eye contact she answered, \"It's a bit more stubborn than I thought, Katy. Give me one more minute.\" \n\nDanielle's lips kept tickling my clitoris as she tried to cut the strand with her teeth. She brought her hands up inside my legs and pushed them further apart; presumably, so she could better access the troublesome panty thread. I was becoming aroused, not even noticing my pussy flowing with moisture while she completed her task.\n\nI'm sure I just imagined it. But, if I didn't know better I would swear she closed her lips around my clitty several times.\n\n\"There! I got it!\" she exclaimed, and pulled the little strand from her mouth to show it to me.\n\nCompletely flustered, and disappointed she had finished, I properly thanked Danielle and stood to change.\n\n\"Oh no!\" she blurted. \"Katy, I've smudged lipstick on the front your panties! How foolish of me. I wanted everything to be perfect. Now, look what I've done.\"\n\n\"Nonsense! You've been so helpful. You are such a good saleslady,\" I kindly scolded her and added, \"It will come out with little effort. Don't worry about a thing, Danielle!\"\n\nNot to be denied, Danielle dropped back to her knees, resting her buttocks on her heels. She quickly began rubbing at the lipstick. \"I'll fix it,\" she replied. With her finger moving back and forth across my clit and pussy lips I began another low, embarrassing moan. She had me so sexually excited I could hardly stand it.\n\nWithout even thinking, I lifted my leg and placed my foot on the bench as she tickled my pussy. \"Mmmmm, Danielle,\" I cooed. \"Oh, my heavens! Take good care of that pesky lipstick smudge, dear.\"\n\n\"I think I have most of it, Katy. Let me get the inside too.\" Danielle slid her fingers under my panty and rubbed the inside to erase any possible lipstick. The back of her fingers were now in contact with my flesh, teasing my clitty. When her fingertips pushed out on the fabric her knuckles bent, and moved into my wet hole, spreading my pussy lips apart.\n\nI tried without success to control myself. But, I was melting with lust. \"Oh, my goodness! Not now!\" I said and felt both embarrassed and fully aroused to be cumming in front of this pretty young woman. I couldn't stop myself. My body convulsed in an orgasm. \"Ooooohhhh! Mmmmm, I can't take it anymore, Oooooohhhh!\" I moaned aloud.\n\n\"You're so thorough and....Oh, god.....Your teasing has me so fucking hot.......Mmmmm, Danielle,\" I stammered, losing control of my thoughts and unable to stop my orgasm. All the while, running my fingers through her hair. \n\n\"Ooooh, noooo!\" I moaned and tightened my leg muscles as my orgasm swept over my body.\n\n\"Thank you, ma'am. You've made me feel so good!\" she responded from her knees as I finished. \n\n\"Well, certainly dear. And, I do so apologize for my baudy language,\" I told her.\n\nI could hardly believe what had just happened! In fact, I am not sure it did happen. It's all such a blur to me now. I would never allow another woman to play with me like that. I wouldn't, and I'm quite sure I must have imagined it!\n\nDanielle waited outside and within a few moments I had changed back into my long skirt and left the changing room. I found myself walking on wobbly legs toward the register. In a desperate attempt to regain my composure, I stopped to pick out several additional sets of lingerie and added an expensive dress to my purchase.\n\n\"Thank you so much for your assistance, Danielle!\" I said, trying to forget the entire episode as she wrote her telephone number on her card and slipped it into one of my bags.\n\n\"You're very welcome, Katy! Call me anytime I can help!\"\n\nMy pussy felt warm and tingly as I drove home. Weaving in and out of traffic, I complained aloud as I played tricks with my mind in an effort to regain my moral compass. \n\nI looked into the rearview mirror and talking to myself I said, \"I can't believe you want me to wear that short skirt to the dinner, Jake!\" I added, \"You have a modest and beautiful, conservative wife. You should be proud of our image and want to protect it!\"\n\nIt took the entire drive home to settle down. Jake had left a message that he would be running late and I should be ready to go as soon as he got home. After the children arrived from school I gathered them up and took them to our sitter. Then, I began preparing for this very important evening with some very important conservative movers and shakers!\n\nI thought of Danielle as I admired myself in the mirror, wearing my new lingerie. \"You did a very nice job, young lady! I look marvelous in black and it all fits perfectly!\" I wore the black lace push-up bra and matching lace panties. The panties were full back but completely sheer. The front was also sheer and my pussy was easily visible through the thin fabric. My garter belt matched and my stockings were black sheer.",
        "I knew Jake wouldn't want me to do it, but I slipped a thin white camisole over my bra. Otherwise, everyone would be able to see it through my blouse. \"There, that'll show you who's boss!\" I said.\n\nI put on the skirt and admired it's fit. \"Very nice!\" I complimented myself. The skirt matched my jacket precisely. Charcoal gray pinstripes and a hemline that was short, but very well tailored. \"It's beautiful,\" I added.\n\n\"And, no one is going to get a peek up this skirt if I'm careful,\" I assured myself as I pulled down on the hem. The skirt wasn't cut to fit tightly. Instead, it fit comfortably, but loosely across my hips and would flare out with every turn. When I stood, it covered the tops of my stockings and if I was careful sitting down it would cover them when I was seated. I finished my outfit with a pair of black 3 inch high-heel pumps.\n\nI was feeling much more positive about my outfit as Jake drove us to the dinner. \"I'm sorry, Jake,\" I told him as we pulled into the country club parking lot.\n\n\"Sorry? For what, Katy?\"\n\n\"For being such a prude! This suit looks incredible with the skirt instead of the pants,\" I told him. I also confessed to feeling a bit naughty wearing the sexy lingerie underneath my conservative suit. \"I'll just have to be careful when I sit down!\" I cheerfully said.\n\n\"You'll do fine, honey. I've arranged for us to sit with Bob Townes and George Hastings.\"\n\n\"Oh, how wonderful! We'll be the center of attention, Jake. How much better can it get than sitting at a table with the president of your brokerage and the Senator of our great state of Texas, George Hastings.\" I told him as I walked around the back of the car.\n\n\"Just the way you like it, Katy,\" Jake said as he grabbed his briefcase from the back seat and shut the door to the car.\n\nI gave my husband a quizzical look when I saw his briefcase.\n\nJake read my face and explained that he had volunteered me to present a 50-minute video on the upcoming campaign. He nodded toward the briefcase and said, \"Brochures and CDs for the guests.\"\n\nI gave him a soft punch in the shoulder and asked what else he had volunteered me for. He said something about tending a charity bar with the Senator. I smiled, satisfied in knowing I had finessed myself into an entire evening spent with the power brokers of the state.\n\nThe dinner was outstanding. I sat in-between Jake and George Hastings. Just as I suspected, our table was the center of the social scene, with guests introducing themselves to us throughout the meal. \n\nBoth the Senator, and Bob Townes, seemed to enjoy my company. They flirted with me as all men do. But, they did so in a tactful way; for which I was very appreciative.\n\nMy skirt rode up my legs a few times, but I managed to keep it covering my stocking tops. There might have been one or two times when Mr. Hastings caught a glimpse of my garter straps and stockings; but only for a moment. I was very impressed that he didn't stare. He chose to remain a gentleman even with his wife absent for the evening. \n\nTruth be told, there might have been a couple of other times when I relaxed a bit too much and forgot to pull my skirt down. \"A woman cannot possibly be on guard 100% of the time,\" I told myself.\n\nAfter dinner Jake, Bob Townes, the Senator and myself made our way to the elevator. We were the last group to leave the dining hall. I was so pleased to be in the company of these powerful men! This is where I'm at my best! My image as a clear thinking, conservative woman pays dividends during these important functions. \n\n\"Just watch me in action upstairs introducing the campaign video,\" I whispered to Jake as we waited at the elevator doors.\n\n\"Such an elegant setting,\" I thought, as the doors slid open. The four men graciously allowed me to enter first.\n\n\"Thank you very mu......Oh My!\" I knew something was wrong as I felt the back of my skirt rise up my legs. \n\nSomething had hold of the hem of my skirt! I turned sideways, looking back at Jake and made the situation worse. \"Goodness, Dear,\" I said and felt cool air brush past the bare skin of my legs above my stockings.\n\nA wardrobe malfunction is every girl's nightmare. Something sticking out of Jake's briefcase had somehow caught on the hem of my skirt. \"Jake, your briefcase,\" I shrieked. I was mortified! Looking down, I could see my garter straps and stocking tops. And, if I could see them, the men could to.\n\nAll I could think to do was hurry into the elevator to hide myself. But when I took a step, the only thing I accomplished was to pull my skirt away from my hips, showing everyone my panties. Jake's briefcase was still hooked to my skirt, pulling it up and away from me, exposing me even further. \n\nI panicked! Mistakenly thinking I could hide my exposure I instinctively lowered my hips and squatted down onto my heels. That only provided the men a better look. Now, they could see both my garter belt and panties. \n\nI briefly looked down. \"Oh, my god!\" My pussy was showing through the transparent silk panty as I sat, looking helpless on my haunches below the control panel of the elevator.\n\n\"Oh, god no!\" I said and stood up straight. This didn't help one bit. I couldn't get my skirt to cover myself because it was pulled tight around my waist by my husband's briefcase. Jake wasn't helping things at all and a thought crossed my mind that this little briefcase malfunction hadn't been an accident. I mean; how does a briefcase latch catch itself on a lady's skirt?\n\nJake bend over slightly and lifted the briefcase closer to his face so he could get a better look at the problem and successfully exposing me up to my waist. \"What is it caught on?\" he asked out loud.\n\n\"Just hurry!\" I exclaimed through clenched teeth, while I pushed my skirt down with my left hand and held my right hand over my crotch to cover myself!\n\n\"Jake! You're pulling up my skirt! Stop that!\" I shrieked. \n\n\"Katy! I'm just trying to get this loose,\" he replied with frustration.\n\nI couldn't believe this was happening. Not this. Not my skirt lifted above my hips in front of these men. \n\nI could see them leering at me. They had a nice clear view. \"Why did I have to wear see-thru panties,\" I scolded myself. \n\n\"George, can you help me with this clasp?\" Jake asked calmly, seemingly unfazed by the fact that his pretty wife was exposed from the waist down. After that, I somewhat accepted the situation, stopped struggling and stood patiently, pushing my skirt down but resigned to my humiliation.\n\nThere I stood, backed into the corner of the elevator, my skirt above my waist, pushing as much of it down my legs as possible and several important men leering at me. How embarrassing.\n\nMr. Hastings, ever the gentleman, was quick to help. He succeeded in freeing my skirt from that terrible suitcase clasp. But, the effort took an excruciatingly long time.\n\n\"I'm so embarrassed,\" I said to them.\n\n\"Don't worry your pretty little self, young lady,\" George Hastings said as the doors closed. \"You look mighty sexy in those panties.\"\n\nThe ride up two floors took forever. Jake didn't make it any shorter; joking about the situation by carrying on about his \"Hungry Briefcase\" and \"Victoria's Secret Lingerie Model Wife.\"\n\nI spent the ride making sure my skirt was pulled down and attempting to regain my composure. It's not every day that a lady has three powerful men leering at her pussy. \"Finally!\" I whispered as the doors opened to the banquet room.\n\n\"I understand that we'll be tending bar together, Katy,\" Mr. Hastings said as we walked in. It felt good talk about something, anything, other than the embarrassing situation with Jake's 'hungry briefcase'.\n\nThe bar he was referring to was a charity fundraiser. All tips and profit went to the local orphanage. It was set up at the back of the room facing the tables and dance floor. The white screen for the campaign video was on the opposite wall.\n\n\"I hope we're a good team, Mr. Hastings,\" I answered, already feeling more comfortable after the episode a few minutes ago. I was anxious to get to work, and knowing that George Hastings was a gentleman sure helped my state of mind.\n\n\"Finally, all of my hard work is paying off,\" I told Jake as I pulled him to the side. \"I don't stay this smart and pretty by accident, you know.\" \n\n\"You're right, Katy. You never disappoint me. Enjoy the attention tonight, Sweety. You deserve it.\" Jake gave me a kiss and an affectionate pat on my behind as I headed for the bar. \n\nJake made the rounds, doing the 'meet and greet' with the crowd. I went to work behind the bar with our current and future Senator. The bar was about six feet long and L-shaped, with the short end of the L against the wall. The level of the bar was surprisingly high, being even with the bottom of my ribcage. \n\nAfter thirty minutes we'd raised quite a bit of money for charity. Everyone had purchased drinks and our tip jar was overflowing. The guests were grabbing their seats, preparing to watch the campaign video, leaving us an opportunity to talk. \n\n\"I'll have to leave for a few minutes to introduce the video, Mr. Hastings,\" I said.\n\n\"You're husband was right, Katy,\" he replied.\n\n\"Oh? What about?\" I replied, hoping we were about to engage in a substantive conversation about the campaign issues.\n\n\"You're a very attractive woman in your lingerie. Your husband's description of you as a Victoria's Secret lingerie model is spot on.\"\n\nI gulped hard and paused for a moment to make sure I heard him correctly. How do I respond to this, I thought nervously. Mr. Hastings has been a gentleman all evening and I'm sure he was giving me an innocent compliment. \"Don't take unnecessary offense,\" I told myself and replied, \"Why, uhmm....thank you, Senator Hastings. I'd better get to work. We need the video started.\"\n\n\"You're welcome, honey. Before you go, lift that cute skirt of yours and show me your ass again,\" he demanded quite nonchalantly as we both stood behind the bar, facing the guests.\n\nI was outraged at his suggestion and told him quietly through clenched teeth that, \"I will most certainly not lift my skirt. Furthermore, you had best count your lucky stars that I don't want to create a scene. Otherwise, I'd slap you!\" \n\nUnfortunately, he didn't seem fazed by my threat. \"Katy, I've been very impressed with your husband's performance tonight. Don't spoil it for him,\" He said and let me know that if I didn't do as he suggested he would make sure Jake and I regretted it. \"C'mon baby. You were showing me your stocking and garters all through dinner. And, you made sure I got a nice look at your pussy in the elevator. Stop your little righteous indignation act and lift up your skirt.\"\n\nJake was at the front of the room, about to introduce me. I was confused, and in such a tither that I didn't know what to do! \n\nI decided that given the situation, discretion was the better part of valor. I kept my eyes fixed on Jake, placed both hands under my skirt and lifted it up to my waist. Thank goodness the bar covered my indiscretion. As my husband was introducing me over the loudspeaker, our Senator copped a nice feel of my behind and gave me one good hard spank.\n\n\"Thwaakk!\" it sounded and caused me to jump forward. I hoped the clapping covered up the sound.\n\n\"Go get em, Katy,\" he said. \"And hurry back afterwards.\"\n\nMy behind was stinging all through the introduction of the video. I dreaded the video starting up because I knew I was committed to returning to the Charity Bar with Senator Hastings. I had to go back because I'd cause a huge scene by refusing. \n\n\"I'll just make sure he minds his manners,\" I told myself as I reluctantly assumed my place beside him. It could be worse, I thought. At least George Hastings wasn't an ugly, repulsive man. Quite the contrary, he was tall, large man and in very good shape for a man of fifty. He was very distinguished looking with gray temples and chiseled features. He's quite handsome, I thought to myself. And, he certainly has big strong hands! My behind still tingled from the spank he had given me earlier.\n\n\"You were terrific out there, Katy,\" Mr. Hastings told me as he placed his big paw under my skirt and onto my slender behind. \n\n\"Thanks,\" I said rather timidly. \"Now, please behave yourself. Let's not cause a scene.\" I pushed his hand away, but within a moment or two he put it back onto my bottom.\n\nI pushed it away again, and again it returned. I tried to push it away again. But, I couldn't budge it. He was too strong for me and since I didn't want to bring attention to my situation, I quit trying. \n\n\"Hmmph!\" I snorted to show my displeasure with him. I told him that he could leave his hand on my bottom as long as he cared to. \"I'm not letting you get the better of me, Senator,\" I said.\n\nThankfully, he seemed satisfied just massaging my behind and playing with the back of my panties. This isn't too awful, I thought. I tried to keep a cheery attitude, convincing myself that a massage is not really crossing the line of proper decorum. Just to make sure everything stayed under control, I talked about the issues that were important to my Conservative Women's Voting League.\n\nHe seemed to give lip service to our conversation while he continued to fondle my behind. Just when I thought he might be settling down he ratcheted up his rambunctious behavior by pushing his big fingers under the top band of my underwear and pulled them off my bottom. \n\n\"Mr. Hastings,\" I whispered angrily, as I wiggled and squirmed, trying to pull up my panties and still look normal to the crowd watching the video.\n\n\"Oh, don't get yer panties in a wad, little darlin,\" he replied.\n\n\"Mr. Hastings! It's very difficult to maintain a lady-like, professional image while you're attempting to take liberties with me.\" \n\nWith a strong jerk of his hand, he pulled my panties further down; all the way to my stocking tops, bunching them up under my garter straps. I felt the air touching my pussy and thought of how embarrassing it was that this man's actions had caused my pussy to moisten. \n\n\"Please, sir! Keep your hands to yourself and.....Ooohh!\" I moaned as his hand reached under my behind and he pushed his thumb into my wet hole. \"Whoa, Senator!\" I whispered and wiggled my hips on his large thumb. It's a natural reaction to the teasing he had given me.\n\n\"Spread your legs for me,\" he instructed. \n\nWhat was I to do?! My pussy was on fire! \"Ooohhh my!\" I moaned and asked myself what have I gotten myself in to?\n\n\"Just relax and enjoy yourself, little missy. Nobody'll notice a thing. They're all busy watching the campaign video. Besides, they're not about to show any disrespect to me by leaving their seat.\"\n\nI could hear him unzip his pants. I reached down to stop him. But, he grabbed my hand and forcibly placed it on his penis. A quick rush of air escaped my lips when I touched him.\n\n\"No,\" I told him. \"You can't do this, sir.\" I was telling him no, but my pussy was sopping wet.\n\n\"I'm not asking your permission, Katy. I'll only tell you one last time. Relax and enjoy it.\"\n\nOur current and future Senator was now fingering me in front of 200 guests and my hand was wrapped around his cock. \"Oh, my goodness,\" I whispered as his fingers sloppily stroked in and out until my juices were all over my crotch and the inside of my thighs.\n\n\"Please, just don't let anyone see us,\" I pleaded with my hand massaging him. \"I...I don't think I could stand to have someone see us.\" \n\n\"Just keep looking out on our guests and act normally. They'll never know.\"\n\nI tried to do exactly as he instructed. I kept smiling and watching the campaign video. But, it was sooo hard to do. He was finger-fucking my pussy just the way I like it. He closed two of his fingers together and fucked me hard with them. Then, he tickled and pinched my clitty while one of his fingers massaged my G-spot.\n\n\"You sure know how to finger a girl, Senator,\" I said with my voice cracking slightly as I balanced one hand on the bar and began enjoying the attention he was giving me.\n\nI spread my feet wide apart to give him more of myself. Then, I stroked his cock harder and faster as my body began an early orgasm. I hope none of the guests saw me look upward and moan!\n\n\"Do you realize how difficult it is to be lady-like under these circumstances?\" I asked him as my body tingled.\n\nGeorge Hastings assured me that I was doing just fine. \"I think your husband is convinced. Look at him,\" he said.\n\nAcross the room, Jake was giving me a smile and thumbs up sign. \"Hmmm...Is that thumbs up for the video or a thumbs up for being fingered to an orgasm by our Senator?\" I asked coyly.\n\n\"Perhaps it's for the job your pretty mouth is going to do on my cock, little missy,\" Mr. Hastings answered while I attempted to pull up my panties with my free hand.\n\n\"Leave them down, Katy,\" he demanded and gave me another hard spank on my behind. \"Thwaack!\"\n\n\"Ouch! Senator Hastings!\" I scolded him again; this time through smiling lips.\n\nMy emotions were all over the place. I didn't know if I wanted more of the Senator's attention, or my husband to rescue me. A tear welled up in my eye as Jake turned to watch the screen for the remaining ten minutes.\n\n\"What? No white knight to save you, Katy?\" \n\nI sniffled a bit and explained to him that if Jake caught on to what was going on he would beat him senseless. \"Senator or not, my husband would pummel you, sir.\" \n\n\"Then, for his own protection you had best not let him catch on. The room is full of 200 witnesses and all of them either owe me a favor or want to impress me. If he tries anything, I'll ruin him. Keep that in mind as you suck my cock, young lady.\"\n\nI felt like a little schoolgirl in the principal's office; Helpless and powerless, but desperate to please him! I squatted down and took him into my mouth. \n\n\"That's it, Katy. Sit back and enjoy this big cock of mine,\" he said vulgarly.\n\nWhat's a lady to do? I wasn't about to tell him my little secret. I loved the thought of sucking a powerful man's cock. Ever since the interview with Marc Amiri it was all I had thought about. But, I wasn't about to let the Senator know it. \n\nI pulled his balls out of his underwear. As his cock hardened in my hand I turned my head, moved my mouth onto his balls, and licked them clean of the day's musty sweat. \"Mmmmm,\" I moaned a my tongue licked slowly up his shaft and circled the head of his cock. \n\nI could see precum oozing out as I closed my mouth on him and sucked in my cheeks. \"Nice cock,\" I said after backing away; stroking him with one hand and massaging his balls with the other.\n\n\"Gimme a double scotch, Senator,\" was the voice I heard from the front of the bar!\n\nI immediately tried to pull away, but Senator Hastings's strong right hand was on the back of my head; and he pulled me back onto his hard tool and started fucking my mouth. \n\n\"You bet, Bob. A double scotch it is,\" George Hastings replied, poured the drink with his free hand and held my head on his staff with the other. \"How's the evening going, Bob?\" \n\nOh, my word! It's Jake's boss, Bob Townes. Will my humiliation never end? Maybe he won't see me, I hoped.\n\n\"Not quite as good as yours, George,\" Bob Townes answered and they both laughed. He leaned over the bar and added, \"Looks like Katy is taking good care of you, Senator.\"\n\nMy heart sank as they talked about me while I sucked off the Senator's cock. Will he tell Jake? Will he tell everyone? Thoughts of running away ran through my mind while my head was bobbing on Senator Hastings.\n\nI had to do something. I knew I couldn't let him leave without an explanation. So, I jerked my head back and freed myself from the Senator's grasp.\n\n\"Bob, this isn't at all how it appears,\" I said. \"It's....It's.....Oh, Bob...Please, don't tell anyone. Please!\" The Senator nudged my head back toward his erection. I crave being manhandled like this and I eagerly went back to work on his cock, awaiting a reply from Bob Townes.",
        "The Senator broke in saying, \"Let's keep it to ourselves, Bob. Katy's a fine little cock-slut and I'm sure she'd be willing to do you a favor sometime to repay your discretion. Wouldn't you, Katy?\"\n\n\"Oh, yeth! Yeth, uff kuth I wua,\" I said with my mouth full of U.S. Senator. I knew what \"doing a favor\" meant and so did Bob Townes. What else could I say?\n\nGeorge and Bob discussed the situation. Bob must have thought I was a total slut. I wanted to scream at him that I wasn't any such thing. I do crave cock, but there's a time and place for it. And, this certainly wasn't it. I wanted him to know that this wasn't my fault. \n\nInstead, I licked and sucked our Senator's balls while my husband's boss cheerfully agreed to keep the situation between us three. \"I think I'll take that favor right now, Katy. It'll be good P.R. to get behind the bar with the Senator.\"\n\nBob Townes took up a position behind the bar, sandwiching me between them and unzipped his slacks. \"You don't mind do you?\" he said and plopped out his half hard erection.\n\n\"Nuh uh,\" I replied. What's a girl to do but service them both? \n\n\"That's a pretty site,\" he said as my mouth took them in turn. \"Are two cocks better than one?\" he asked.\n\n\"Oh yeth,\" I mumbled. He was right. I'd never experienced anything like this. It was exhilarating and naughty at the same time. \n\nThat's when I heard the camera. With the Senator's cock in my mouth, I lifted my eyes up, my eyebrows moving with them, to see Marc Amiri taking photographs of me with my face framed by their erections. \n\n\"You're beautiful, Katy. That's it, keep it going....I'm just taking a few photos for remembrance purposes,\" He said as he clicked away.\n\nIt should have startled me and brought me to my senses. Instead, it had the opposite effect of further arousing me. I started sucking them off more eagerly and pumping them with my hands. \"I can't believe I'm doing this,\" I thought, still hungrily jacking them off. There were now three men at the bar with me. It was all terribly exciting and at the same time terribly terrifying that someone else might walk up and see me. \n\nMarc Amiri spoke up, \"Senator, Mr. Townes, we should take Katy into the conference room where it's more comfortable. We've got another 40 minutes before the video is over.\"\n\n\"Good idea, Marc. We need to do this in a more private setting,\" The Senator said and popped his cock out of my wet lips, causing me to whimper.\n\nBob Townes took my hand and lifted me onto my feet. It scared me to think of being in a room all alone with these three men. But, at least I wouldn't be as exposed as I was behind the bar. My reputation couldn't handle being caught in this situation. \n\nBob kept his grip on my hand and pulled me with him as he and Senator Hastings left from behind the bar and began walking to the conference room with Marc Amiri trailing behind us. \n\n\"My goodness,\" I complained with an arm outstretched and being pulled along by Bob Townes. \"Can't you give a lady enough time to pull up her panties?\" \n\nWell, I suppose their reply is an entire new chapter. TTYL!!"
    ],
    "authorname": "PhilCanyon",
    "tags": [
        "wife",
        "humor",
        "stockings",
        "heels"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/katys-reluctant-new-look-ch-05"
}
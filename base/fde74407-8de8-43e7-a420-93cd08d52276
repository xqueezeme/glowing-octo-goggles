{
    "title": "Summer Hire Ch. 13",
    "pages": [
        "Pony Ride\n\nMelissa walked out of the exercise studio with a towel around her neck, her martial arts jacket bundled up under her arm. Mike had told her it was called a judo-gi and had shown her how to tie it into a tight bundle using the long cotton belt.\n\nShe was tired, but not as exhausted as she had feared. In fact, she realized she felt energized. Learning from Mike was very different than the session with Amy. \"Mistress Amy,\" she quickly corrected herself.\n\nWalking back to the house, she considered the question Mike had asked her. Was she really willing to kill another person, in order to save her own life? When the question was put so bluntly, the obvious answer was, \"yes.\" But such a simple answer somehow didn't feel comfortable, and she wasn't sure why.\n\nMike was such an easygoing person. She had a hard time believing that he had killed people during his years in the military, although she knew that he must have. She was having difficulty reconciling all of her perceptions. Mike wasn't at all what she had expected. She had thought that a man with his background would have had a darker, brooding nature, with much more of an alpha-male dominance.\n\nInstead, he was polite, open, enthusiastic, and attentive. \"That's it,\" she said as she suddenly realized what seemed so weird about their interaction. The whole time she had been with him, his focus was only on her. His attention hadn't wandered at all. His focus hadn't felt threatening, and she didn't have any sense that he had been trying to seduce her or play mind games with her. He had simply listened to her, with total interest. He had talked a lot too, but she realized that when he told her something, he had always waited to see if she understood. It had been spooky.\n\nShe felt relieved that she had figured out what had been bothering her about their interaction, but that knowledge still didn't help her with the question of whether she was willing to learn how to hurt or kill someone. Mike and Erik did have a point, she thought; she was going to be spending at least some of her career in poor, backwater places -- where she knew life could be violent and cheap. She rationalized to herself that, just because she knew how to be violent as well, didn't mean that she would have to be. Learning what Mike had to teach her seemed like it was probably a good idea.\n\nEntering the main house, she laughed to herself. The reality of how she was struggling over her decision had nothing to do with the 'girl-with-a-gun' image of Lara Croft. Nodding to herself, she realized that the contrast between movie fantasy and her reality was just like how Mike wasn't the Hollywood version of a super soldier or how Erik wasn't some whacked-out sadist. Reality and fantasy were such distant companions, that it seemed to require deliberate stupidity to confuse one for the other.\n\nLooking at the divide between fantasy and reality in that light made Erik's attitude of treating fantasy as though it were a play toy seem like really good idea. By carefully labeling it 'play,' their fantasy life was kept separate from reality. She reminded herself that she had to keep this distinction clear while she was exploring the kink world. \"Weird shit indeed,\" she told herself.\n\nErik walked out from his room, looked up at her, calling out, \"How'd it go?\"\n\nShe moved down the steps to join him. \"It wasn't at all what I expected. Mike's a lot more... thoughtful than I would have guessed. And he's got this weird intensity. I mean, it's like he's really low key and all, but it's also like there was nothing else in the world but me. I didn't notice it until afterward, but it was kind of spooky.\"\n\nErik grinned as she joined him. He gave her a quick, unexpected kiss on the lips, and then led her over to a pair of overstuffed leather chairs and ottomans that looked out over the patio and meadow.\n\nSitting down, he said, \"As far as I can tell, it's a Special Forces thing. It must be part of their training. When an SF guy is talking to somebody, that SF guy is really, really listening. I think it's like that whole 'mindfullness' thing that you hear being promoted in seminars on 'being a more effective person,' or some such crap. Only it really seems to work for them.\n\n\"Through Mike, I've met some other SF guys, and they're all like that, at least with outsiders. With each other, it's the usual macho, joking-around shit. But even then, when somebody says something important or new, they all stop and listen. No judgmental stuff or one-upping. They just seem to want to take it in and consider what the other person said.\"\n\nHe shook his head. \"It's kind of wild. I don't know how they train that behavior into somebody, but I sometimes wish more folks had it.\"\n\nMelissa nodded, \"It was kind of weird... and amazing. I wouldn't have thought that having somebody really listening to you was such a big deal, but it definitely felt... different.\"\n\n\"Yep. So what else wasn't what you expected?\"\n\n\"Mike was a lot more... gentle... and serious than I expected.\"\n\nShe paused, thinking back over her time with Mike. Erik cocked his head, inviting her to continue, so she did. \"We talked about how violent some parts of the world can be, and whether learning to be violent in return was a good response. I don't know. I guess it is. But I'm not completely comfortable with it.\"\n\nShe shrugged, then continued, \"What surprised me, though, is that Mike was completely okay with my doubts. He's not all macho about it. I don't know... I guess I'll learn what he has to teach me, and then figure out what to do about it when I've had a chance to think everything through. In the meantime, though, I guess I'm grateful for the chance to learn how to protect myself, even if it is feeding some twisted adolescent fantasy of yours.\"\n\nErik put his hand over his heart, feigning injury. \"Forsooth, cruel and vicious woman. You accuse me most heartlessly of foul intent. My twisted adolescent fantasy was the most trivial part of my motivation.\"\n\nMelissa laughed, \"Yeah, and what was the other part of your motivation?\"\n\n\"Pure, unadulterated lust.\" His gaze suddenly bore into her, and she felt her heart skip.\n\nShe struggled to regain control of her powerless response to his commanding gaze. She took a deep breath as stealthily as she could, trying to hide how much he had thrown her off center. Without any conscious intent of speaking, she found herself countering with, \"So what was that kiss all about? Are we girlfriend and boyfriend, or slave and master?\"\n\nErik smiled, seemingly unperturbed by her question. Watching him, Melissa squirmed inside, not believing that she had just blurted out something so direct. Then he answered, \"All of that, I hope. Boyfriend and girlfriend, master and slave, plus there's the whole boss and employee thing. I know it's a bit of an uncomfortable mix. Sort of a hobgoblin, really. But it's like I told you, I'm committed to making it work, feeling our way through it, together.\"\n\nMelissa countered, \"If we're boyfriend and girlfriend, at least if that's part of it, then why do I have a separate room... like the maid?\" Once again, she was internally appalled at her lack of control, especially in tacking on a barb about living in the maid's room. She gritted her teeth in frustration that she couldn't seem to start speaking without letting an angry comment slip out sideways.\n\nErik paused again. He had clearly noticed her anger and frustration. \"I'm sorry. Giving you your own room wasn't meant to push you away, or demean you. I just... I wanted to give you a place of your own, a space that was yours. I know that I can be intense and that I often move too quickly.\"\n\nHe looked out the windows, across the meadow at the late afternoon sun. Then he turned back to her, \"It's your choice, where to sleep, where your clothes are. I would love for you to share my bed, my room. I just wanted to make sure you knew you didn't have to. It seemed important to give you a room of your own, so you had a safe place that was yours.\"\n\n\"Okay. I guess... I understand. Sorry for being all pissy. It's just that I'm sort of scared. Off balance. Not sure where I fit in.\"\n\nHe nodded and smiled. \"Right here, on my lap, enjoying a quiet moment at the end of the afternoon.\"\n\nShe felt the tension she had been holding in her shoulders seep away. \"That sounds nice.\" She got up from her chair and stepped across to his.\n\n\"Sure you don't want to get those sweaty clothes off first?\" His tone feigned innocence, but the twinkle in his eyes made his true intent clear.\n\nShe sighed, \"Yes Master.\" She peeled the sports bra off her chest, over her head, and tossed it into the chair behind her. She held his gaze as she reached down and untied the drawstring on her heavy cotton judo-gi pants, letting them slide down her legs. Stepping out of the pants, she straddled his legs that were stretched across the ottoman. \"Is this better, Master?\"\n\nHe smiled, simultaneously contented and hungry, seeming to drink in her beauty. Almost to himself, he quietly replied, \"Infinitely better.\" Reaching forward, he traced a slow, lazy line down her left thigh.\n\nHer sex clenched and moistened at his touch. She continued to be amazed at how he could command her instant arousal. Letting her eyes half close, she swayed closer to him. He reached up and pulled her down to him, his lips brushing softly against hers. Her mouth parted slightly open. He held her motionless above him as he traced the opening of her mouth with his tongue.\n\nAs she leaned forward, the softness of her labia pressed hard against the denim fabric of his jeans. She shuddered, feeling her building need. Erik lifted her higher, pulling her forward so he could nibble along both sides of her neck. As she slid forward, she left a wet streak along his pant leg. The weave of his denim sliding against her clitoris had nearly pushed her over the edge. She gasped with a sudden intake of breath as the sensation threatened to overwhelm her.\n\nHe chuckled at her response, then kissed and licked along the soft curve between her shoulder and neck, slowly reaching upwards toward her ear. She found herself panting, fighting the urgency building within her pelvis. He chuckled again and raised his leg sharply up, pressing against the heat of her sex, which sent her unexpectedly spiraling over into a pulsating orgasm. She arched her back, throwing her head up, her hair whipping past his face.\n\nWhen her shudders finally faded, she collapsed, limp against him as he lowered her torso down onto his chest. She snuggled into the clean cotton scent of his camp shirt and murmured, \"How can you do that? How do you make me come so quickly?\"\n\nHis only reply was a gentle stroking of her hair.\n\nShe turned slightly to kiss his chest, then laid her head back against him. Whispering, as though to herself, she speculated, \"Must be some evil spell.\"\n\nHe laughed quietly, the soft motion of his chest rocking her head. Reaching down, he kissed the top of her head and replied, \"No, the only spell is the one you weave around us. You are so full of life, so amazingly connected to your own sexual energy. I love to play with your body. You could be a Stradivarius violin. The feelings you evoke are so very potent and wonderful.\"\n\nShe whispered back, \"I loved being played. You are truly a master. My Master.\"\n\nHe shifted a little underneath her, finding a more comfortable spot against the overstuffed leather cushions. Then he whispered back, \"Don't forget, boyfriend too.\"\n\nShe lay quietly against his chest, slowly being lifted and lowered with his breathing. A tear trickled down her cheek, gathering for a moment before falling onto his shirt.\n\nShe wiped the tear streak from her cheek, hoping he wouldn't notice, then said, \"Yeah, and boss too.\"\n\n\"Yes, tis true. And as your boss, what are you doing, laying around? It's nearly time to get ready for this evening.\"\n\n\"But... isn't there something I can do for you?\" She felt embarrassed that he had so deftly brought her to yet another orgasm while she hadn't done anything in return but enjoy it.\n\nStill lying against him, she felt his laughter rumbling in his chest. She lifted her head to look at him as he replied, \"Dear one, simply playing with you gives me such pleasure. You never need to worry about what I want.\" He grinned evilly, \"After all, I will simply take what I want, when I want it. You are, in case you've forgotten, my sex slave.\"\n\nShe protested innocently, \"But Master, I need to practice my deep throating. You did tell me that I had to practice every day.\"\n\nHe looked at her, disapprovingly. \"If I didn't know better, I'd say my little slave girl was trying to manipulate me.\"\n\n\"Oh no, sir. I should never do such a horrid thing. I only seek to make myself a better sex toy for your amusement. Please sir, can't I practice just a little bit?\"\n\n\"Oh, you are a dangerous one indeed.\" He sighed deeply. \"Very well, you may unzip me.\"\n\n\"Thank you, Master, thank you,\" she said as she slid eagerly down his body until she was nuzzling his obviously rigid penis through the straining fabric of his jeans. She slipped open his belt and unbuttoned his waistband. Seeing that his zipper had a fabric pull tab, she used her tongue to lift the tab to her teeth, then she bit down on the tab and slowly drew his zipper open.\n\nWith her nose and chin, she nudged his penis out from where it had been trapped by a fold of his pants. He groaned with a deep, satisfied sigh as she took him into her mouth. She remembered to spend some time getting him wet first, before taking him in deeply. When she slid him down to the back of her mouth, she flinched a little bit as her gag reflex kicked in.\n\nHe told her, \"Just hold it there awhile. Breathe around it and let your body get used to the pressure. Don't hurry your gag reflex. Just relax into it.\"\n\nShe concentrated hard on being able to breathe while the head of his penis filled the back of her mouth. After a minute, the panicky sense of not being able to breathe ebbed away. Her fear of imminently gagging also subsided. She began to slowly draw him in and out, each time pressing him more firmly against the opening to her throat.\n\nHe slipped his head back against the cushions for a moment, \"Oh God, that's so good. I really love watching myself disappear into your mouth.\"\n\nShe tried to smile, but her mouth was so full of him that only the corners of her mouth quirked upwards.\n\nShe could now press him more forcefully against the opening to her throat, although the size of him seemed to make it impossible to go any further.\n\nHe noted her difficulty and said, \"Remember to straighten out the line of your mouth and throat. If you slide yourself down a little further, that'll tilt your head up a bit.\"\n\nShe wriggled down, feeling a little awkward in how she was half draped across the ottoman. Although the angle had improved, she still couldn't get him past the constriction of her throat.\n\n\"When you're ready, yawn. That'll stretch your throat open.\"\n\nShe paused, took a final deep breath, and then made a yawning motion. His penis suddenly slipped past the back of her mouth and into her throat. She fought down the rising panic caused by feeling such fullness intruding into her throat. She was only dimly aware that Erik had tensed up and was now breathing in shallow, jerky breaths.\n\nAs she gained control over her panic, she slid him deeper in, wanting desperately to match Deborah's ability to press her lips up against his torso. As she got close, the feeling of fullness overwhelmed her, and she had to pull away, drawing him back into her mouth.\n\nShe swirled her tongue around his head while breathing deeply, making up for not being able to breathe while he was in her throat.\n\nHe groaned contentedly. She was proud of the effect that she was able to have on him. He seemed so much less guarded as he gave into just enjoying her attentions. Determined to keep him in that place, she held her mouth in a yawn again and took him back into her throat. It seemed easier this time. There was definitely less of a panicky feeling, although she was also starting to feel very sore from having her throat stretched.\n\nShe didn't want to go much longer, but she also wanted to have him cum. For the moment, ignoring her increasing soreness, she started to rapidly move him in and out, taking him as deeply into her throat as she could. She could hear his rising gasps and groans as his orgasm built. With a loud groan that was nearly a roar, he orgasmed, shooting pulsating jets of semen deep into her throat.\n\nShe pulled him back into her mouth, breathing hard. A final few spurts of his cum filled the back of her mouth. She still could barely stand the taste, but she made herself roll her tongue over it, knowing it was important to him that she at least pretended to like it. She did feel a deep sense of satisfaction in being able to make him cum this way. She now truly appreciated Serena's joy this morning at being able to make Erik cum when he had been trying to keep on a schedule.\n\nErik slid his penis out of her mouth. He seemed protective of it, as though it was overstimulated. She knew that her clitoris often got overly sensitive right after an orgasm. Of course, her clitoris could easily be overly stimulated by a clumsy boyfriend rubbing directly on it. She often wondered what the hell they thought it was, perhaps some sort of button they were supposed to keep on pressing like a monkey trying to get a reward?\n\nErik looked down at her, his eyes still half closed in refractory bliss. He lifted her chin up, to see her face better. She smiled. The motion made her realize that some of his cum must have dribbled down her chin when he pulled out. Feeling self-conscious, she wiped it off with her hand, then wondered where to wipe her hand clean. She didn't want to use his pants or the leather ottoman.\n\nRemembering Serena's admonitions, she tilted her head down to lick her fingers clean. Erik groaned his approval as she feigned savoring her task. His clear enthusiasm actually made it easier to ignore the taste and honestly enjoy the process. Perhaps he was right, and she really liked being a sex slave. All the evidence seemed to point in that direction.\n\nShe looked back up at him. \"Thank you, Master, for letting me practice. Your slave is grateful.\" As she spoke, however, she realized that her throat was quite sore. It felt as though she had been shouting far too long at a football game.\n\nHe hummed his approval, still enjoying the afterglow of his orgasm too much to speak. She slipped back up to lay her head on his chest once again. He put his arms around her and snuggled deeper into the chair.\n\nSore throat aside, she decided that she was very contented to be his sex slave for the summer. She didn't see how it could keep on going once school started, but it certainly was nice for now.\n\n* * *\n\nShe hadn't even realized that she had fallen asleep when the \"bang\" of the screen door swinging shut startled her awake. She looked up bleary eyed as she heard a British-accented woman's voice calling out, \"Hello dearies.\"\n\nErik stirred underneath her, then called out, \"Down here, Mrs. Grady.\"\n\nAs Melissa's eyes regained focus, she saw a small, dark-haired woman with a picnic hamper coming down the steps from the upper level. She seemed younger and fitter than the stout, gray-haired matron that Melissa had envisioned. Mrs. Grady smiled at her with a broad, welcoming grin.\n\nWith a start, Melissa suddenly remembered that she was sprawled naked across Erik. She slid off, scrambling to snatch her judo-gi pants from the floor and her sports bra from the chair.\n\n\"Don't worry about me, dear,\" Mrs. Grady called out from above. Melissa looked up. The housekeeper had set the basket down on the counter and turned away to give them some privacy. Melissa hurriedly stepped into her pants. She struggled to pull up the stiff cotton judo-gi while she was still crouched over and trying to hide her breasts behind the crumpled-up sports bra she had clamped across her with one hand.",
        "Erik grinned, shaking his head at her. He levered himself from the chair and casually zipped his pants closed.\n\nWith a deep breath, Melissa forced herself to calm down and get more deliberately dressed. Her heart, however, continued to race. Memories floated up of her mother walking in on her while she had been making out with a boyfriend during a college summer break after her sophomore year. That incident had culminated in a shouting match and nearly being thrown out of the house for the summer.\n\nIronically, it had been her father's arrival back from work that had calmed things down. He had taken her mother aside for a long talk in the kitchen. When he came back from the kitchen, he took Melissa out onto the front porch, shaking his head in exasperation. Standing next to her, looking out at the street, he put an hand on her shoulder and said quietly, \"Next time, lock your door.\" After that, he turned around and went back inside.\n\nRemembering her father's calm acceptance helped Melissa steady herself. She took a deep breath, then turned away from both Mrs. Grady and Erik to rearrange her breasts, which had been squashed askew when she had quickly pulled on her sports bra.\n\nTurning back around, she saw the housekeeper taking food out of the hamper. Erik held out his hand to Melissa. She put her hand in his and let him lead her up to the kitchen on the middle level.\n\nMrs. Grady paused in her activity to smile brightly at Melissa. \"What a pleasure to meet you! We have such hopes that you'll mend this rogue of his wicked ways.\"\n\nThinking of her entirely willing complicity in their recent sexual escapades, Melissa froze, certain that she was turning red from embarrassment.\n\nMrs. Grady waved down her reaction. \"Oh pish, posh. I don't mean his proclivity for corporal punishment or his occasionally odd sexual partners. I'm British after all. Our upper class has provided us with generations worth of amusement along those lines. No, I mean the young master's galavanting around, willy nilly, as though this were a way station, not a home, not his home.\"\n\nErik cleared his throat, \"Now Mrs. Grady...\"\n\n\"Yes, yes. I know. None of my business.\"\n\nHe lectured her, \"Lest you forget, my work, galavanting around, is what pays for all this.\" Erik waved his hand to indicate the house and beyond. \"And your salary as well, which must be far too high if you feel free to take such liberties.\"\n\n\"Ha. Liberties indeed! Well, never you mind.\" She turned to Melissa, \"Have no fear, his bark is worse than his bite.\" Pausing, she glanced back at Erik's glower for a moment before continuing with Melissa, \"Well, maybe not much worse. But such is the lot of those of us who have to put up with him. In any case, please swing by for tea some afternoon. It would be lovely to get to know one another better.\"\n\nMelissa glanced at Erik as well for a moment, trying to assess how much of his anger was pretend and if any of it was real. Turning back to the older woman, she smiled. \"I would love to have tea with you. And to meet your husband someday. You have such a beautiful garden.\"\n\n\"Thank you...\"\n\nThe screen door banged shut again. Serena called out, \"Oh Mrs. Grady! What wonders have you cooked for us?\" Serena set down two bags she was carrying and walked to the top of the steps.\n\n\"Oh fear not,\" Mrs. Grady replied, \"You'll be well provisioned for your debauch. The young master, though, is in a proper state. He's sure to whip the both of you straight away.\"\n\nErik said quite loudly, \"Mrs. Grady!\" Pausing to gain a more measured voice, he continued firmly, \"That will be quite enough... thank you.\"\n\nThe housekeeper's eyes twinkled at the two other women as she hurried out of the kitchen. \"See what I mean. Well, have fun all.\" She went up the steps and out the door. Serena cocked an eyebrow inquiringly at Erik and Melissa.\n\nErik shook his head in frustration and snorted an annoyed laugh. Seeing both women looking at him, he announced, \"She's right. She's managed to needle me into a proper state, and now you're left to pay for it.\" He pointed to the kitchen counter. \"Lie across here, naked.\"\n\nSerena walked down the steps, giving Melissa a little shrug, as she shed her tee shirt and jeans. Melissa noted that Serena had not worn any underwear again. Melissa wondered once again, in a distracted moment, if a lack of underwear was somehow a rule of the kink world or just Erik's requirement.\n\nWith a start, she realized that she had been told to strip and lie across the counter, but hadn't done either. Erik was watching her with narrowed eyes. She hurriedly pulled her sports bra back off and untied her pants, stepping out of them as she walked over to join Serena at the kitchen island.\n\nSerena had to lever herself up over the rounded edge of the counter to lie across it, with her feet dangling above the floor. Melissa was tall enough that she could stand on the balls of her feet to lean over and lie next to Serena. She copied the other woman's posture of outstretched arms, clasped together in front of her head. The marble counter top sucked the heat from her naked body, giving her a shiver.\n\n\"Smack!\" She saw Serena flinch next to her, then moan in pleasure.\n\n\"Smack!\" Her own bottom lit on fire from something narrow and hard striking across both cheeks. She jerked in painful reaction, unsure if it felt arousing or just painful.\n\n\"Smack!\" Serena grunted, \"Oww!\" She arched back in reaction, groaning in pleasure as she slumped back down.\n\n\"Smack!\" Melissa gasped at the sharpness of the blow as she grasped at the unyielding counter top. The burning spread further across her buttocks, and she winced. It definitely was painful, but something in the act of submission, lying next to Serena, who was also being punished, felt extraordinarily erotic as well.\n\n\"Smack!\" Serena jolted again, then groaned as she recovered.\n\n\"Smack!\" Melissa cried out, \"Awwh!\" She felt tears near while the heat in her rear had also penetrated through to her sex, in a throbbing intensity.\n\nShe waited for the next blow to fall upon Serena, but there was a pause, and then Serena stiffened in pleasure as she was rhythmically pushed forward. Melissa realized that Erik had penetrated her. Serena's groans quickly grew more desperate, till she orgasmed in a loud series of deep growls. Serena slumped down, bonelessly on the counter.\n\nMelissa felt Erik step behind her as he spread open her drenched labia. Without further warning, he rammed inside her, completely filling her. He forcefully pumped himself into her, rocking her back and forth on the hard marble surface.\n\nAs quickly as Serena, Melissa felt herself building to an orgasm. In the dimness of her perception, Melissa sensed Serena lifting her head in a long groan as Erik asked the other woman, \"Did you clean and grease your ass?\"\n\nBefore Melissa could focus to puzzle out what that exchange meant, she felt herself hopelessly flailing toward a huge orgasm. Her toes curled against the floor as she was slammed forward again and again. The pounding of her blood roared in her ears as she cried out, \"Ahrr, ahrr, ahrr\" while she came. The painful redness of her buttocks merged into her helpless thrashing as her orgasm echoed through her, finally dying away.\n\nErik withdrew, and she collapsed against the now warm marble, her cheeks wet from tears. She didn't know if she had cried from the spanking, or the sex, or both.\n\nWhile she lay with her face turned toward Serena, she saw the other woman's eyes open wide as she was pushed forward, her head lifting again from the counter. \"Oh God,\" Serena moaned, \"I love feeling your dick up my ass.\"\n\nMelissa watched lazily as Serena was thrust repeated against the marble top, groaning and panting. Melissa could hear Erik's groans as his panting merged with Serena's. Melissa watched as Serena's face grimaced in pre-orgasmic intensity. Erik roared behind her as he came, slamming Serena forward once, then twice again, before fading away. Melissa could see Serena's frustration as her second orgasm slipped away, just out of reach.\n\nBehind her, Melissa could hear Erik catching his breath. Melissa lay still, recovering from her bewildering punishment and orgasm while Serena lay breathing heavily next to her. Erik announced in a deliberately pompous tone, \"Well, I feel better now. You girls get cleaned up and dressed for dinner. You've got... forty minutes.\"\n\nHe walked away. Melissa wasn't sure she trusted her muscles yet to pull herself off the counter. Serena wasn't moving either.\n\nFrom outside the door to his bedroom, he called back up to them, \"Forty minutes! Get a move on, else I'll have to punish you again.\"\n\nAt that warning, Serena started to push herself back off the counter. Melissa joined her, unsteadily regaining her feet. She reached back to gently touch her buttocks, unsure of what it looked like, but knowing that it still stung. Serena stumbled back and looked at Melissa's rear. She snorted derisively and asked, \"What the hell got into him?\" She reached back to gingerly feel her own butt. \"He's not usually that... forceful. At least, he usually lets a girl work up to it.\"\n\nMelissa replied, \"I don't know. Mrs. Grady was teasing him about something. I'm not sure what.\"\n\nSerena nodded, \"Note for future reference: be careful when teasing Erik. He's fine, up to a point. Then he's not. Also, never tease him about not being able to keep a girlfriend. He's a little prickly about the whole \"Peter Pan\" no commitment thing.\"\n\n\"Yeah, I guess that was what Mrs. Grady was saying. Something about not being willing to make a house a home, or something like that.\"\n\n\"Yep, that makes sense. By the way, it's Abigail. We only call her Mrs. Grady around Erik.\"\n\n\"Okay. That's kind of weird.\"\n\nSerena shrugged, \"Well, losing his mom, then having to live with his bitch-ass grandmother, the guy's a little weird about women in his home. Personally, I think Abigail intimidates him. She's not part of any of this stuff, but it doesn't scare her or anything. Says it's a proud British tradition, tolerating 'eccentricity' in the upper class. Anyhow, I've seen her land some zingers on him from time to time.\" She paused to gingerly rub her bottom. \"I've just never been on the receiving end of it.\"\n\n\"But you, I mean, you had an orgasm, right? Or were you faking it?\"\n\n\"No, I came alright. Almost got that second one too, dammit! I do like a good spanking, plus getting walloped next to you was kind of cool. I could see that it was hard for you too, but you were also into it, which was a major-league turn-on. And... I've had some clients who like dishing it out a little rough. It's okay, but I don't like a steady diet of it. Plus, it's a little rough on the body. Strokes like that are going to leave bruises for a day or two.\"\n\n\"Oh.\"\n\n\"Yeah, I charge them extra. With the right build-up, it can be a really intense session. Erik -- he knows how to build up to that level. So when he doesn't do a build-up, it's on purpose, which isn't usually like him. I mean, still, he was careful. Like, we both had serious orgasms, and he didn't leave any lasting marks.\"\n\nWith that, Serena turned and presented her rear end to Melissa. \"What does it look like?\"\n\n\"Wow, you've got three red lines right across both cheeks. It's... it's almost kind of cute, how each line fades away across the butt crack and then matches with its pair on the other side.\"\n\n\"Yeah, well he knows how to mark a girl. Took me awhile to learn how to get that exactly right, for my clients who are into that stuff.\" Serena walked over to pick up her discarded clothing.\n\n\"That's right, you're into both sides.\"\n\n\"Yep, a 'Switch.'\" Serena continued up the stairs to retrieve her bags.\n\nMelissa called after her, \"So, what's that like?\"\n\nSerena came back down with a knowing grin, \"You'll see. Anyway, we'd better get ready. I, at least, have had enough of being a bottom for awhile.\"\n\nMelissa gathered up her clothes and followed Serena back to her guest room. When she walked in, she saw that there was a pair of thigh-high black leather lace-up boots lying on her bed. Unsurprisingly, the heels were at least five inches tall. Serena looked at them and said, \"Oh good, FedEx got here.\"\n\nMelissa asked, \"Those are for me?\"\n\n\"Sure,\" Serena replied, reaching into a bag, \"and this too.\" She brought out something in frothy black lace and set it next to the boots. Then she reached back into the bag and brought out a fascinator. It had a spray of black netting attached to the merest suggestion of a black hat with a black satin bow on top and several iridescent purplish-black feathers sweeping out the back.\n\nMelissa took it from her gingerly, \"That's gorgeous! I always had hats for Easter. It never seemed right to wear them at other times, even though I always wanted to.\n\n\"You're in luck. Erik loves women dressed in hats and high heels... and not much else.\"\n\n\"Yeah, tell me about it.\" Melissa set down the hat and picked up the black lace garment, trying to figure it out. There was a rigid \"C\" shaped open hoop at one end.\n\n\"Here.\" Serena took the black lace from her. Prying the hoop open slightly, she slid it around Melissa's waist from the side, then rotated it ninety degrees, so the opening faced to the front. The lace bustled out to the back, before draping to the floor, like a Victorian skirt. The front, however, left her completely open and naked. Melissa laughed quietly, fairly certain that Queen Victoria would not have been amused.\n\nSerena, on the other hand, nodded approvingly. \"With those boots and the fascinator, that's going to look really hot.\" She looked in the other bag. \"The rest is all for me.\" Then she made shooing motions to Melissa. \"Go on, get showered. We've got maybe a half an hour.\"\n\nMelissa nodded, then struggled to get the skirt off. Serena quickly reached to help her.\n\nMelissa asked, \"Do you need to shower too?\"\n\n\"I showered before I left.\" Then she reached around behind her. As she brought her hand back, she wiped it on her thigh, leaving glistening streaks. \"I forgot. Now I've got cum dribbling out of my ass. I better hop in too.\" Suddenly, Serena snapped her fingers, \"Damn, I nearly forgot. Do you do anal?\"\n\n\"Ah, well, I guess so. A few times. You mean anal intercourse?\"\n\n\"Yeah.\"\n\n\"I have, but Erik's kind of big. I mean, doesn't it hurt?\"\n\n\"No. I actually really like taking it up the ass. But I enema myself out first, so everything's empty and clean. Then I shoot a little grease up inside -- if I'm not sure there's going to be lubricant around. The books all say that petroleum jelly isn't good for inside of you, but it's a hell of a lot better than a dry butt-fuck. When I get carried away, sometimes I'm not as careful about making sure the guy's lubed up first. But anyway, when you get some practice, taking it up the ass is easier.\n\nSerena waved dismissively, \"Besides, Erik's always careful. While he was fucking you, he stuck a finger in my cunt to rub my g-spot and then put his thumb up my ass to open it up. I mean, he's always careful to ease a finger in and expand my ass slowly. By the time he's ready to stick his dick in, I'm all ready for him. Hell the way he strokes my g-spot while his thumb is pushing my ass open, I'm more than hot and ready.\"\n\nMelissa nodded slowly. \"I suppose that's not TMI.\"\n\n\"Too much information?\"\n\nMelissa nodded again.\n\nSerena laughed, \"Well, the point is, the shower has an enema wand, just waiting for you. So we better hurry, if we're going to get you cleaned out, showered, and dressed.\"\n\n\"Oh boy, how much more fun can I pack into one day?\"\n\n\"I don't know. How much do you think you can pack into that cute little ass of yours?\"\n\n\"I'm not sure,\" Melissa responded innocently, \"how much do you think you can shove in there?\"\n\nSerena laughed and gave her a gentle shove toward the bathroom. \"Hurry!\"\n\nBoth women were giggling as Melissa turned on the shower to get it warm. Serena turned on the flow to a long shower hose with a black silicone end piece that was about a foot long and a half-inch in diameter. Water flowed gently out of its black rounded tip. Once Serena got the flow rate and temperature right, she told Melissa, \"Turn around; bend over.\"\n\nMelissa hesitated. Serena pointedly said, \"Time's a tickin.'\"\n\nWith a grimace, Melissa turned around and braced herself against the shower wall. Serena rubbed a little KY Jelly along the length of the tip of the enema wand. Then she squirted some more on her finger. She rubbed her finger against Melissa's tight, puckered hole until Melissa was able to relax and Serena's finger slipped in. Once inside, Serena took a moment to massage Melissa's sphincter, relaxing it even further. Then she slid her finger out and replaced it with the enema wand. Melissa took a sharp intake of breath as the length of the wand slid past her narrow ring of muscle, seating itself inside her.\n\nThe flow of water pushed into Melissa, filling her up. Serena warned her, \"When I pull the wand out, hold tight. Don't let it back out or we'll be cleaning up the shower. The first wash or two is always loaded with crap. It takes a few rounds before everything runs clean. Then you can play around with shooting stuff all over the place.\"\n\n\"Eew.\"\n\n\"Hey, don't knock till you've tried it. Some guys really love to fill you up with warm heavy cream and then watch it come shooting out in a stream. You never know what gets somebody off. There're even people who get into making an anal fruit smoothie, and then drinking it. That goes too far for me, though. I've turned down that request a couple of times, thank you very much.\"\n\nMelissa listened with growing incredulity, while she clamped down hard on the nozzle, terrified that it would come loose, and she would spray disgusting stuff all over the bathroom. The growing fullness inside her, however, was far more arousing than she had imagined. Trying to stay focused on holding the plug tight, she asked, \"Please tell me you're joking about the fruit smoothie?\"\n\n\"No. I mean, after a few rounds, everything comes out clean. I'm sure the fruit smoothie thing would have been fine, but it was just too weird. I don't do scat, and that was way too close. Besides, he wasn't willing to pay enough.\"\n\n\"You're incorrigible.\"\n\n\"Glad you noticed.\" Serena reached down for the wand. \"Now relax a little bit. I'm going to slip this out of you.\" Slowly, she drew the black silicone wand back out. Melissa moaned involuntarily as the last bit slid past her sphincter and popped out.\n\nSerena smiled at Melissa's reaction and asked, \"Sort of fun, huh?\"\n\n\"Different than I expected.\"\n\n\"Hold it in as long as you can. When you have to, hop out onto the toilet and let go. Then you can get back in and finish cleaning off.\"\n\nBoth women started soaping each other up in the shower together. Melissa grinned lewdly and asked, \"Didn't we already do this once today?\"\n\nSerena laughed. She stepped forward, pressing Melissa up against the side of the shower, kissing her long and slow. As they separated, Melissa protested, \"I thought you said you didn't especially like doing it with women?\"\n\nSerena laughed again and rebutted, \"I thought you said you didn't either.\"\n\n\"Ah well...\"\n\nSerena arched her wet eyebrows, then relaxed into a smile, \"Sometimes it's nice.\"\n\nMelissa nodded her agreement. Serena leaned back in, but then stopped and said, \"Shit, we're running out of time. Hop out and dump your load, I've got to wash up.\"\n\nMelissa stepped out, dripping wet. She carefully maneuvered herself onto the toilet. She only had to relax minutely, and everything seemed to shoot out of her. The sudden release of pressure was very weirdly erotic. She closed the lid, without flushing, afraid of scalding Serena. Then she got back in the shower and let Serena soap up her butt.",
        "Once she rinsed off, Serena turned off the water, and they both tumbled out of the shower, giggling. They quickly helped each other dry off. Serena gathered Melissa's hair up into a ponytail and wound it onto the top of her head, pinning it in place with bobby pins.\n\nHurrying back into the bedroom, Serena helped Melissa lace up her boots, which came above mid-thigh. In turn, Melissa helped Serena lace up a black corset. Serena had a similar skirt to Melissa's. As she put it on, Melissa could still see the red lines across Serena's buttocks, only slightly diminished. Melissa put on her own skirt and let Serena attach the fascinator above where she had bobby-pinned Melissa's ponytail.\n\nFinally, Serena pulled a pair of lace-up Victorian ankle boots with six-inch heels out of her bag. She looked at them ruefully, complaining, \"The things I do for Erik.\"\n\nAs soon as she got the ankle boots on and laced up, they rushed for the door, as best they could in their heels. At the end of the hall, they slowed down to make their formal entrance into the dining area. Erik was waiting for them, dressed in a black cut-away jacket, black silk breeches, riding boots, white shirt, and black cravat.\n\nHe had a gold watch in his hand, dangling from a chain attached to a black silk waistcoat. He looked up at them and announced, \"Just on time.\"\n\nHe waved them over to the table, where he had set out the food that Abigail Grady had brought. It was a collection of tea sandwiches, fruits, and small pastries.\n\n\"You two women look lovely. Before you sit down, however, show me your behinds.\"\n\nMelissa looked to Serena, who gave her a quick smile of encouragement. Then Serena turned away from Erik, bent over to grasp her ankle with one hand, and pulled her lace skirt away with the other hand. Melissa pivoted smoothly, following Serena and mimicking her pose.\n\nErik walked behind them, his hand caressing lightly along their paired buttocks. \"Very nice. Perfectly striped. Really quite lovely.\"\n\nHe sighed. \"Well then, we'd best eat. There'll be more... entertainment later.\"\n\nAs the two women straightened up and walked to the table, Erik lifted a bottle of champagne from a bucket of ice, popped its cork, and poured them all glasses. He held his champagne flute aloft, \"To new beginnings.\"\n\nBoth women joined his toast, echoing, \"To new beginnings.\"\n\nOne sip of the champagne left Melissa lightheaded. She realized she was famished. Between Mistress Amy, the session with Mike, and all the sex, her level of exercise was much higher than normal. To fuel all that, however, she had eaten less than usual. She smiled to herself, thinking she was sure to lose a couple of pounds a week at this pace. It struck her as a fun way to diet.\n\nShe was careful, however, not to pile too much food onto her plate. Erik and Serena were only taking small portions. Since they knew what was coming next, it looked as though eating light would be a good idea for her as well.\n\nErik asked, \"So you never really said, how did things go with Mike? What did you learn?\"\n\n\"Well,\" Melissa laughed, \"mostly falling down.\"\n\nSerena gave her a puzzled look.\n\n\"He called it break-falls, which was basically learning how to get thrown to the ground without being hurt. Then he showed me how to roll away from a break-fall and have that roll carry me back up to my feet, hopefully out of reach of whoever had knocked me down. Once I got the hang of it, it was kind of cool, but I'm sore.\"\n\nErik nodded, \"Yeah, it gets easier with practice.\"\n\n\"That's what Mike said. Sort of like ballet, I guess. Anyway, he also showed me this wrist thing, like when a guy grabs your shirt front, how to take the back of his hand and twist it around, so his wrist is all bent back. It's pretty amazing, I mean, I could just go 'zip' and I had him all twisted up, so he couldn't move.\"\n\nErik nodded again, \"When you have somebody like that, it only takes a few pounds of pressure to break somebody's wrist.\"\n\n\"Yeah, it's kind of scary. Right at the end, Mike showed me how the wrist move can be continued so you can put somebody on the ground. Then you've got their shoulder, elbow, and wrist, all at the same time. He said it'd be easy for me to break all three joints, not matter how strong the guy is. And when he showed the move on me, I could believe it. Ouch! We're going to work on learning that move tomorrow. Plus break-falls. He said we'll do those every day.\"\n\nErik nodded. \"Practicing that stuff over and over again is the only way to make it unconscious. Then you can do it without thinking about it. After I had worked with Mike for a year or so, some drunk guy at a club tried throwing a punch at me. I didn't even have a chance to think about it. I just blocked his punch, turned his momentum into a hip throw, put him on the ground. When he landed, I had him wrapped up in that arm lock you were talking about. The whole damn thing went by so fast, I didn't think about what was happening, at least until he started puking all over the floor.\" Erik shook his head disgustedly, \"He'd been drinking way too much.\"\n\nSerena asked, \"So then what happened?\"\n\n\"The monitors threw him out, really fast. I don't know; they must have put him in a taxi or something. Then the club black-balled him. I haven't really seen him around. I think he was just a poser. Probably a bully. Those types get nervous as all hell about going to a kink club and use too much liquid courage. It was at Marco's. They're not as careful as they should be about the bar.\"\n\nSerena snorted. \"Tell me about it.\"\n\nMelissa gave her a questioning look, so Serena explained, \"Kink, and BDSM in particular, can get pretty intense. Everyone really needs to be aware, have a careful sense of where everyone else is at, so it all stays safe. If someone's drunk, or drugging, or even just had an off day, they can be dangerous. Everyone's got to have their head in the game.\"\n\nErik continued, \"Most clubs have a two drink limit. The bartenders aren't supposed to serve you anything but soda if they think that you've already been drinking, or drugging. There's also monitors who walk around, keeping an eye on things, making sure that people don't get out of line. Everyone wants to keep it safe, but Marco has a reputation for playing it a little looser. I don't go there much.\"\n\nSerena agreed, \"I only go there if I'm with a guy I really trust. Marco lets too many wannabes and freaks in. Sometimes, you know, Marco can have an edgy, cool sort of vibe, but most of the time, I'd rather be somewhere that really gets, 'safe, sane, consensual.'\"\n\nErik nodded his agreement.\n\nMelissa said hesitantly, \"So, I saw the 'safe, sane, consensual' thing on the web...\" Serena made a face at her.\n\nMelissa retorted, \"Yeah, well this is all kind of new for me. I spent some time last weekend, on the Internet, trying to figure out what the hell I might be getting myself into.\"\n\nSerena shrugged an apology.\n\nMelissa continued, \"So anyway, is this 'safe, sane, consensual' thing real?\"\n\nErik gave a wave to Serena, inviting her to respond. She said, \"Hell yes. I won't touch anybody who doesn't sign up to being safe, sane, and consensual. And everyone I know feels the same way. That's what makes the kink world different from the creeps. I mean, it's like the difference between a client who's got a youth fetish and wants me to dress up like a teenager, versus some sick bastard who rapes children. My client is a responsible adult with a kinky fantasy. The sick bastard is a criminal who should be thrown in jail for the rest of his fucking life. They're just stupid fucking psychopaths who don't give a shit about anyone else.\"\n\nErik said, \"Gosh Serena, don't try to hold back so much. You should tell us how you really feel.\"\n\nSerena growled back at him.\n\nErik grimaced and turned to Melissa. \"The thing is, I agree. One hundred percent. Serena's right -- it's about fundamentally respecting other people. Even earlier, here in the kitchen, I know that whipping you like that might have looked non-consensual to an outside observer. The truth is, though, you both have safe words. And, of course, I also happen to know that both of you actually really like being spanked. On the other hand, though, I was guilty of deliberately upping the intensity faster than I let your endorphins kick in. I purposefully made it feel more like pain than pleasure. Now some of that was to remind you who is the Master around here. But that's not nearly reason enough. That doesn't make it 'okay.' It was only 'safe, sane, consensual' because I know you're both aroused by submitting. There's something fundamentally arousing to both of you when you make yourself the instrument of someone else's pleasure. Plus, I was also pretty sure I was only whipping you inside your limits. More than that, I trusted you to tell me if it wasn't, just like you trusted me to stop if you used your safe word.\"\n\nSerena smiled, \"Glad to know it had nothing to do with how much you like whipping a girl.\"\n\nErik laughed. \"Oh, I very much enjoy whipping you. Both of you. I love to see you bent over, the perfect rounds of your buttocks quivering as I whip them.\"\n\nMelissa cursed herself for the instant clench of anticipation she felt between her legs, reacting to the matter-of-fact way that he spoke about her enjoyment of submission and whipping. Part of her still wanted to deny it, although the wet spot she was certain that she had just created on the seat cushion provided solid evidence about how her feelings truly ran.\n\nSerena complained, \"I looked when we got dressed. You left nicer stripes on her than me.\"\n\nErik replied with a cruel smile, \"Well then, we'll have to work on that, won't we?\"\n\nSerena ducked her head, smiling, \"Yes Master.\"\n\nErik looked over to the kitchen clock. \"Speaking of which, we should be getting down to the patio.\" He stood up and took both women on his arms. Then he led them down the steps to the lower level and through the sliding glass doors to the patio.\n\nThe sun was low in the sky and the day had cooled somewhat, but the air was still warm against Melissa's naked skin. Her thigh-high boots were strange to walk in, especially on the stairs. They came so high that her knees didn't flex easily. The boots reminded her of a pair of skinny jeans she had from teenage years that she didn't wear anymore. The jeans didn't have any spandex, just denim. Unfortunately, those jeans had gotten so tight in the last couple of years that it was hard to walk. At least, the leather boots were soft enough that she could walk somewhat naturally. It also helped that she had gotten more used to moving somewhat gracefully in high heels.\n\nLooking around, she still marveled at how easily she accepted walking outside naked, wearing only thigh-high boots, a hat, and the back half of a skirt. She was also completely unsurprised to discover her labia were wet enough to be smoothly sliding past each other as she walked. Heightened arousal seemed to be her standard state with Erik.\n\n\"Oh good,\" Erik commented, \"We're all set up.\"\n\nMelissa followed his gaze and saw a black horse cart out on the grass. It was small and lightweight, like the carts used in harness racing.\n\nSerena cooed, \"Oh, such a pretty sulky.\" She walked over the patio wall. From a collection of items that were laid out on the wall, she picked up a long, flexible, black shaft with a floppy black leather tail on the far end. \"And a whip! What a surprise. But where's the pony?\" She turned to face Erik and pouted, \"A girl's got to have a pony.\"\n\nErik gave out a loud whistle. Around the curve of the hill, a nearly naked man appeared, trotting in a peculiar gait. Melissa realized he was Joseph, from the saddle shop. He wore a black leather harness, along with head gear that had a cross piece in his mouth. There were black leather squares on either side of his face near his eyes, and black folds of leather sticking up on both sides of his head. He wore shoes that were almost high heels, except the base was large and heavy, and there was no heel.\n\nSuddenly, Melissa realized that he was dressed to mimic a horse, which also helped explain his odd trotting gait. She had to stifle her natural reaction to laugh at such an odd appearance. Erik and Serena seemed to be treating his appearance very respectfully. After watching a while longer, she had to admit that, despite the odd costume, he was still both gorgeous and graceful.\n\nErik quietly told Melissa, \"I noticed you seemed somewhat taken with him today. Master Drexler let me borrow him, so you could have your own little pony to train.\"\n\nMelissa wasn't sure what reply to make, so she simply said, \"Thank you.\"\n\nSerena set down the whip and wandered over toward the sulky. Joseph trotted up to her and stopped. As he stopped, he turned to face Serena, showing Melissa his back. She could see that his arms were bound across his back, and a dark horsetail seemed to rise up from the top of his buttocks and cascade towards the ground.\n\nSerena reached out to stroke him, as though he actually were an animal, saying, \"Nice pony. You're such a pretty boy. Nice pony.\"\n\nJoseph shied away a little bit, appearing to be afraid. Then he stomped his hoof-shoe down in her direction and snorted.\n\nSerena looked over to Erik and Melissa. \"He's not quite broken to the saddle yet. I think he needs more training.\"\n\nErik nodded thoughtfully, leading Melissa on his arm over to the wall. He picked up a short riding crop and attached it to a clip that she hadn't noticed was part of her skirt's waist hoop. Then he picked up the longer whip, along with what looked like a very long black leather leash. Responding to Serena, he said, \"Well, he's her pony. She'll have to learn how to train him.\" He gave the long whip and leash to Melissa, telling her, \"Go on over to Serena. She'll show you what to do.\"\n\nMelissa smiled uncertainly in response. She walked out to meet Serena, crossing the grass as best she could in her heels.\n\nSerena was giving Joseph a disapproving look. She said to Melissa, \"Clip the lead onto his bridle, but be careful, he's a bit untrained yet.\"\n\nMelissa looked at the equipment in her hands and then back up at Serena, puzzled.\n\nSerena said, \"Here, give me the whip.\" Melissa complied. Then Serena said, \"Now clip the lead onto the bridle ring alongside his cheek.\" Serena pointed at Joseph's head gear, and Melissa could see where the leather straps were joined together with a metal ring alongside his cheek.\n\nSerena saw Melissa hesitating, so she added, \"You have to be confident and assertive. Never let a pony see indecision.\"\n\n\"Okay...\" Melissa took the clip on the end of the lead in her free hand and walked over to Joseph. He backed up. When she stepped closer, he stomped at her.\n\nMelissa turned back to Serena, not sure how to continue. In the distance, she saw Erik sitting on an Adirondack chair on the patio, looking very amused.\n\nSerena dropped the whip to the ground and said, \"Here, let me help you. I'll take the lead. Get your crop out, but don't let him see it.\"\n\nMelissa knew Joseph could hear what Serena was saying, even if Serena was pretending he couldn't. Melissa decided to give up on seeing what was going on from an external perspective. It was too confusing. Instead, she decided to play along with whatever the scene was supposed to be. She handed the lead to Serena and turned sideways to unclip the crop from her waist, holding it alongside her leg. Then she nodded her readiness to Serena.\n\nThe two women separated slightly and approached the pony/boy from either side. Joseph whinnied nervously and backed away. Without warning, Serena's hand suddenly shot out, grabbing him by his bridle. She quickly snapped on the lead. Joseph's eyes flew open wide. He jerked backward, snorting loudly.\n\nSerena called out, \"Hit him!\"\n\nMelissa, startled by the commotion, tried hard to stay in character. She swung the crop stiff-armed, and it bounced ineffectually off of his leg. Joseph turned and stomped at her, making her shrink backward.\n\n\"Hit him harder! Or he'll charge you!\"\n\nJoseph's nostrils flared, and he flung his head up as he stepped toward her. She swung again, this time with both fear and determination. The flat paddle at the end of the crop made a sharp \"crack\" sound against the side of his abdomen. He flinched away, stepping to the side before coming at her again.\n\n\"Hit him on the rear quarter. Keep on hitting him until he backs down!\"\n\nGrowing determined, Melissa followed Serena's instructions with increasing willingness, raining blows upon Joseph's butt and upper thighs until he stopped charging her. They were both breathing heavily as Joseph finally hung his head in submission, turning partially away from her and standing still, trembling softly.\n\n\"Good, now pet him and tell him what a nice pony he is.\"\n\nMelissa felt awkward approaching Joseph in this weird role playing, especially after whipping him so vigorously. She pushed down her anxiety and followed Serena's instructions. Petting his shoulder and bicep, she softly repeated, \"Good pony. You're a good little pony.\"\n\nJoseph's breathing quietened. He turned his head to nuzzle her. In her boots, Melissa was a little taller than him. His head rubbed against her cheek.\n\nSerena said softly, \"Okay, let's take a time out from the scene and check in on how you're both doing. Joseph?\"\n\nHe replied enthusiastically, \"I'm doing great. That was a lot of fun. I love being a naughty pony. Melissa was awesome.\"\n\nMelissa was shocked, both to hear Joseph suddenly talking and also at the transformation of the mood. It took her a moment to parse what he had said and realize that he truly liked what had just happened. She was amazed to see how much she had been drawn into believing that he actually was a recalcitrant pony that had to be whipped into obedience.\n\nSerena turned to Melissa and asked, \"Melissa, how about you?\"\n\n\"Wow... I don't know. That was seriously weird. I guess I kind of got into it, but... well... I don't know.\"\n\nSerena nodded her head at Melissa. \"You seemed a little bit shaken there.\"\n\n\"Yeah. It was pretty intense. It helps a lot to know Joe, I mean Joseph, liked it.\" Melissa took a deep breath. She noticed Joseph clearly appreciated how her naked breasts expanded as she filled her lungs. With a quick glance, she saw that his penis was nearly erect. She decided he wasn't lying about really liking the scene.\n\nShe heard Erik clear his throat and was startled to realize that he had walked over. He had clearly seen how Joseph and Melissa had just checked each other out. A coy smile played around Erik's mouth as he said, \"Remember Mel, it's okay if you don't like it playing a dominant role. When all is said and done, in fact, I'd be willing to bet a fair amount of money that you won't. My guess is you're more of a pure submissive, rather than a switch, like Serena. But I could be wrong. You might really like both sides.\"\n\nSerena butted in, \"Being a switch is way fun! Definitely the best of both worlds.\"\n\nErik gave Serena a mock look of disapproval at the interruption. Then he continued, \"No matter what your final call is, though, it's incredibly helpful to experience the other side. Even if you only enjoy being a sub, some time spent topping will give you a much better appreciation for what your role as a sub is all about.\"\n\nMelissa looked off in the distance for a moment, considering the idea he'd brought up. Then she nodded, feeling a more settled sense of resolve. Turning back to Erik and Serena, she said \"Got it. I think I understand now. And yeah, being on the other side is... hugely different. Not at all what I'd thought it was. You're right, I'm not sure I'm really into it. At least, not nearly the same way as I'm into it when you're on top. But I do get a sense of the intensity of being on top. It's sexually charged and all, but I'm so... foreign to it, I don't know that it really clicks for me.\"",
        "Erik smiled at her reassuringly. \"That's fine. Actually, that's great. It sounds like you're connecting some dots.\"\n\nMelissa cocked her head, puzzled by a new thought. She asked, \"How about you? Did you ever try bottoming?\"\n\nHe gave her a wry smile and said firmly, \"We won't go there right now.\" He looked off at the sun for a moment, seeming to calculate how much time remained before sunset. Then he glanced down at Joseph's penis, which had reduced some in size during all the talking. Finally, Erik turned back to Melissa. \"So, before poor Joseph completely deflates, are you ready to take the scene a bit further?\"\n\n\"Ah, sure. Well, I mean, I'm not sure exactly how much more...\"\n\n\"Don't worry,\" he reassured her. \"We won't stress you too much more. In this direction, at least.\"\n\n\"Okay...\"\n\nErik stepped back and waved to Serena, \"You may carry on.\"\n\nSerena said, \"Sure. Well, ladies and ponies, clear your heads; take a deep breath; this time-out is over.\" After a pause, she continued, \"Mistress Melissa, you've done a nice job breaking your pony to your will, but now you have to teach him how to trot at command, and do it with proper form.\"\n\nBending down, Serena picked up the long whip and handed it to Melissa. \"You'll need this. Put the crop back on your waist hook.\" Melissa complied. \"Good, now hold the whip in your right hand.\" Melissa transferred the whip to her right hand. \"Hold it a little closer to the base. It's springy, so you want to get a good snap out of it.\" Serena showed her how to hold the whip and flick it, so the loose leather tail on the end of the flexible shaft came alive. \"Yes, like that. With a little practice, you can decide which of his balls to hit.\"\n\nMelissa blanched, and Serena giggled, reassuring her, \"Don't worry. I was just kidding.\" She reached up to stroke Joseph's face. \"You don't want to hurt this pretty little pony. Well not too much. He's such a cute little thing.\"\n\nSerena handed the other end of the black leather lead to Melissa and told her, \"Now walk over there, until the lead is mostly tight.\"\n\nMelissa walked further out onto the lawn, to where Serena had indicated. Then Serena stepped away from the pony/boy and told her, \"Now you want to get him started. Give a little tug on the lead and then snap the whip at his rear to get him moving.\"\n\nMelissa tugged softly on the leather lead, then flicked the whip, so it passed behind Joseph. All he did, however, was stomp his foot in protest.\n\nSerena called out, \"You're going to have to actually hit him to get him to move. You're training him to know what the tug means. If you want, you can also sort of click your tongue to encourage him along.\" Serena paused a moment, then asked her. \"Have you ever worked with ponies before, or ridden?\"\n\nMelissa laughed, \"Not exactly in my income bracket.\"\n\nSerena chuckled with her. \"Know what you mean. So, just channel Elizabeth Taylor in National Velvet or whatever other movie you saw of a girl with a horse.\"\n\nMelissa thought a moment, then said, \"Okay.\" Then she clicked her tongue and snapped the whip, so it brushed past Joseph's rear. He moved forward a couple of steps, then halted.\n\n\"Don't forget to give a little tug on the lead, and you've really got to pop the whip.\"\n\nMelissa gave Serena a frustrated smile. Then Melissa gave the lead a sharper tug and snapped the whip with a much more determined stroke. It landed across the small of Joseph's back. This time, he bolted forward in a somewhat disjointed run.\n\n\"That's good. Now put a little pressure on the lead to slow him down. That's better. When you whip him, though, try for the rear quarters.\"\n\nJoseph slowed to a walk. Serena called out, \"Okay, keep him going.\"\n\nMelissa flicked out the whip again, this time with better aim. She was surprised to hear the \"thwack\" of the leather strap against his butt. Once again, he bolted, and she worked on getting him slowed down. She had to alternate between using the whip and the lead to try to get him into an even trot. Every time she thought she had it, he would start to slow down again.\n\nAfter a few minutes, she started to get better control. She could also see some red marks developing on his butt cheek. She shook her head in wonder, amazed that she had become so focused on the game of \"training her pony.\" For awhile, she had lost any external point of view. That external point of view still seemed vaguely ridiculous to her.\n\nJoseph started to slow again, while she had been distracted. He looked more frustrated this time, as though he had noticed her wandering attention, even though the blinders on his head gear kept him from seeing her. She snapped the whip again clicking her tongue more firmly. He responded quickly.\n\nThe realization struck her that this scene was very important to him. He seemed to revel in the fantasy, even if she found it silly. It didn't seem fair to him if she wasn't serious and committed to the scene. He had trusted her with something that was special to him. She felt she had an obligation in return.\n\nShe laughed quietly to herself, realizing that having her gain this insight was likely why Erik and Serena had set up the whole evening.\n\nJoseph started to slow once again, with his head drooping down. This time, Melissa called out firmly, \"You naughty little pony. I'll teach you to misbehave.\" With that, she flicked out the whip, landing a firm stroke across both of his butt cheeks. He jerked his head up and resumed his speed. Melissa could see the red mark from her lash stroke. It was much more clearly defined than her earlier efforts.\n\nShe smiled at his renewed spirit and called out, \"Get those knees up. You call that a trot?\" She crouched down a little bit in order to land the next whip stroke diagonally across her last one. She was a little off in her aim, but the effect seemed to make an immediate difference in his gait.\n\nOver the next several minutes, she gave him constant corrections, backed up by frequent strokes of the whip. He quickly had a raging erection, flopping up and down with every hoof beat. Finally, he was winded, so she pulled him to a halt.\n\nShe walked over to him, hands on her hips. \"You are such a bad little pony. Just a naughty thing. I just don't know what to do with you. And look at this thing...\" She slid the shaft of her whip across his rampant penis. \"What am I to do with this? It totally ruins your form.\" She stepped closer, shaking her head. \"Perhaps I should sell you.\"\n\nBehind Joseph, she looked over at Serena, who gave her a big grin. Then she looked over to Erik. He had returned to his Adirondack chair. He grinned as well, then made a silent clapping motion, indicating his complete approval.\n\nMelissa stepped back, considering Joseph. She pointed at his erect penis. \"That is just a naughty pony.\" Turning to Serena, she demanded, \"Why did you give me such a bad little pony?\" She stomped over to Serena, as best she could in her boots, even though her heels sank into the turf at every step. She reached down to snatch her crop from her waist and pointed it at Joseph, commanding Serena, \"Get over there and fix that thing. It's all swollen up.\"\n\nSerena ducked her head and hurried over to Joseph, saying, \"Yes mistress. I'm so sorry mistress. I didn't know he'd be so naughty.\"\n\nSerena leaned close to Joseph and whispered loudly, \"You bad little pony. Now you've gotten me in trouble with the mistress. We'll both be beaten for sure.\"\n\nMelissa called out loudly, \"I don't have all day.\"\n\nSerena bobbed a quick curtsey, \"Yes mistress.\" Then she bent over from the waist, taking his penis into her mouth. At the same time, she rotated the c-hoop of her skirt waist around, so that the open portion now exposed her rear.\n\nMelissa walked back to them, considering the scene for a moment. Then she cracked the crop across Serena's bottom, adding a red blotch from the crop's head to the three stripes that already crisscrossed her buttocks. \"You're not trying hard enough. Make it go away,\" she demanded shrilly. Then she brought the crop smartly across Joseph's buttocks, adding, \"You're such a bad little pony. I should just beat you silly.\"\n\nShe could see Joseph's chest shudder and his back arch. Serena continued to stuff him into her mouth, one hand firmly around the base of his shaft. Melissa swung the crop across Serena's other buttock, giving her a matching red spot on that cheek. \"You're still not trying hard enough!\"\n\nSerena redoubled her efforts, bouncing her head vigorously in and out, around the head of his penis. Melissa saw Joseph's eyes start to roll back. She smacked the crop across his bottom several more times, punctuating every word as she commanded, \"I. Want. You. To. Cum. Right. Now!\"\n\nJoseph shuddered, filling Serena's mouth with semen, much of which came shooting back out as she continued to pump her head up and down on his nearly purple member. Finally, Joseph's copious supply of cum was exhausted, and he slumped back. Serena stood up and straightened her skirt. Cum was running down her chin.\n\nMelissa stepped up, cupping hand to catch the cum and prevent it from dripping on Serena's beautiful corset. Melissa shook her head disapprovingly, \"Messy, messy, messy.\" With a frustrated sigh, Melissa asked, \"Do I have to do everything around here?\" Stepping closer, Melissa licked most of the cum from Serena's chin and transferred it to Serena's mouth with a long and very sloppy kiss.\n\nTo her surprise, Joseph's cum had a sweeter and cleaner taste than she had ever experienced before. She found herself enjoying kissing Serena, with the taste of Joseph spread liberally throughout both of their mouths. Melissa pressed her body against Serena. Melissa used her empty hand to hold Serena's head in tightly against her. She felt the silk fabric of Serena's corset firmly against her own naked breasts.\n\nMelissa slowly broke from the kiss, only to finish licking Serena's chin clean. Then she held out her hand, puddled with Joseph's remaining cum. Melissa insisted, \"Well?\"\n\nSerena, ducked her head apologetically. \"Yes mistress. Sorry mistress.\" She quickly licked it clean. With an edge of sarcasm, Serena whispered, \"Thank you ever so fucking much Mistress, since you know how much I crave the taste of cum.\"\n\nMelissa quirked a smile and whispered back, \"Serves you right.\"\n\nWith a satisfied sigh, Melissa surveyed the scene and finally stepped away.\n\nShe turned to see that Erik was now sitting on the patio wall, clearly approving of how the scene had turned out. Turning back to Joseph, Melissa reached out to stroke his cheek. \"That's a good pony. See. Everything is better now. You just have to follow your mistress' commands.\"\n\nErik called out softly, \"Nicely done. I am quite impressed. How did it feel?\"\n\nMelissa considered his question thoughtfully. Breaking away from the mood of the scene, she answered, \"I get the idea much better. But I agree with you, I don't think I'm really cut out to be a dom.\"\n\nSerena protested, \"Could have fooled me.\"\n\nJoseph agreed, \"Me too.\" He rubbed his butt gingerly. \"Ow!\" Then he gave Melissa a smile to show that he was only teasing.\n\nMelissa grinned back at both of them, then explained, \"It's not that I wasn't happy about what I was able to do, at least once I figured it out. It's just that it wasn't actually a whole lot of fun on my end.\"\n\nSerena gave her a questioning look.\n\nMelissa continued, \"I was too worried about everyone else and if I was doing things right... Yeah, I know it seemed to be working pretty well. I could feel that. It's just that it took so much concentration; I didn't have any time for my own fun. I don't know; maybe I'm just too selfish. I like it better when I'm on the receiving end, and somebody else has to do all the work. Then I can just sort of float along and enjoy it.\"\n\nMelissa looked at Serena and Erik. \"I don't know how you guys do it.\"\n\nSerena protested once more, \"But you're so good at it.\"\n\nErik said, \"Yeah, but if it's constant work, then it's hard for it to be fun. I get that. You see, for me, all the effort of creating a scene is more than rewarded by the joy of guiding the scene, taking the other person somewhere that they really love. When it works well, I get a huge rush. I love feeling that creative control. More than that, though, I love taking away someone's hang-ups and self-conscious fears, freeing them to the point where they're just a complete sexual creature. Then it's like they're blazing with sexual energy. They really love it, and for me, I feed and channel that energy, taking it to the point where all the other person desperately wants to do is satisfy me. That's a huge... I don't know, ego-boost? Reward?\"\n\nSerena offered, \"God complex?\"\n\nHe laughed, shaking his head. Turning more serious again, he walked over to Melissa and said quietly, \"I think the awesome thing is how brightly and naturally you burn with that sexual energy. It truly doesn't take much to release it.\" He caressed her face, smiling. \"It is very special, your Yin, to my Yang.\"\n\nTurning back to Serena, he tried to shake off his serious mood by joking, \"And you've got both the Yin and Yang inside you. You don't need any of us. You're perfect all by yourself.\"\n\nSerena sardonically replied, \"Lucky me.\"\n\nHe shrugged apologetically. Melissa could see Erik's realization that he had just openly expressed an affection for her that he would never feel for Serena, no matter how comfortable he and Serena might be together or how long they had known each other. Melissa was filled with a deeply bittersweet joy.\n\nSerena had clearly heard the same message. She reached out and took Melissa's hands, giving her a squeeze and a smile, fighting back tears.\n\nErik turned back toward the house, walking away from the feelings he had stirred up. He called out, \"I'll get some lemonade for everyone.\"\n\nSerena answered in a resolutely normal voice, \"That sounds good.\"\n\nMelissa ducked her head, embarrassed that she was the cause of Serena's hurt. Serena tugged on her hands, saying, \"Come on, let's go sit down.\" The she called out to Joseph, \"Stay there pony. We'll water you later.\"\n\nMelissa and Serena walked back to the patio, holding hands. Melissa whispered, \"I'm sorry.\"\n\nSerena shook her head angrily, tears now streaming down her cheeks. \"I'm grateful for what I have. I've always known it wouldn't be anything else. I never let myself be fooled into thinking anything else.\" With her free hand, she wiped the tears aside. \"I'm sorry. I don't know why I'm blubbering like this. Really, it's just what I've always known.\"\n\nThen Serena turned to Melissa and whispered fiercely, \"Don't you blow it! And don't you hurt him either!\"\n\nMelissa promised. \"I won't.\"\n\n\"Okay.\" Serena sank into one of the Adirondack chairs. \"Let's just sit for a minute.\" Melissa sat in the chair next to her, still holding Serena's hand.\n\nAfter a minute's shared silence, Melissa asked in frustration, \"What is it about him that inspires such love and such strong friends. I've known him less than a fucking week, and I'm falling for him in a huge way. Goddamn it!\"\n\nSerena laughed, \"Oh I don't know. How about, he's gorgeous, smart as hell, rich, sensitive, loving, an amazing dom... hell, in fifteen thousand ways, he's larger than life. And hidden away, in the middle of all that, there's a lost, hurt, little boy. Come on, what woman ever born wouldn't fall for that? In an instant?\"\n\nMelissa laughed bitterly. \"Okay. Yeah. You've got a point.\"\n\nBehind them, they heard the sliding glass doors open, and the rattle of ice as Erik carried a tray of lemonade-filled glasses out. He set the tray down on the patio wall and turned to face them. For the first time that Melissa could recall, she saw some uncertainty in his eyes. He clearly knew that what he told Melissa must have hurt Serena.\n\nHe picked up two glasses and brought them over. After seeing that both women were now in a lighter mood, he returned to more of his normal self as well. The women gratefully accepted their cool glasses. He went back to get his, then paused, looking out at Joseph, who stood, ever gracefully and patiently on the lawn. Erik shook his head. \"I have to admit, I'm not a real aficionado of pony play. How the hell is he supposed to drink?\"\n\nSerena stood up, \"Ha! I'll show you.\" She sauntered over to retrieve the last glass on the tray, complaining about \"rank amateurs\" and \"posers\" under her breath. Taking the glass out to the 'pony,' she slipped her fingers over the top of the glass to retain its ice, and then slowly upended the glass over his upturned face. He drank greedily as the lemonade overfilled his mouth, spilling down his chin and chest.\n\nWhen the glass was empty, Serena returned with the same sauntering walk, announcing, \"We'll have to hose him off when we're done, or he'll get all sticky.\"\n\n\"Sure you don't want him all sticky?\"\n\nSerena cast a long glance back at Joseph, then turned back to Erik and Melissa. She said quietly, \"Way too pretty for me. Besides, I'm fairly certain he likes boys better.\"\n\nErik agreed, \"Tis true. But now that you've got him cooled off, perhaps he could take you for a ride?\"\n\nSerena looked out over the lawn at the sulky. She protested, \"But the sulky is set up for two ponies, not one. Of course... that would be why you have the extra set of gear.\" She pointed at a clutter of black leather straps and other objects lying on the patio wall. \"Don't you dare think I'm going to wear that. I'll ride a pony, but I don't pull a cart. Nope. Not going to happen.\"\n\nErik put his hands on his hips, feigning a perplexed state. He asked, \"Well, who could we get to be the other pony?\"\n\nAs though on cue, they both turned to stare at Melissa. Her response was, \"Oh shit.\"\n\n\"Melissa, my dear,\" Erik began, \"we have a wonderful opportunity for you to learn a new skill.\"\n\n\"Fuck you.\"\n\n\"Yes my dear, don't worry. Serena and I will happily fuck afterward, but for now, we'll do whatever it takes to get you properly outfitted and prepared.\"\n\n\"Meaning hit me over the head and tie me up?\"\n\n\"Well certainly, if you prefer. But it would probably be much easier if you just came over here.\"\n\n\"You'd have to catch me first.\"\n\n\"Alas,\" he replied, pointedly looking at her thigh high, high-heeled boots, \"that won't be terribly difficult.\"\n\n\"Oh shit.\"\n\n\"Yes, you mentioned that before. Although I thought that Serena had strict instructions to give you an enema...\"\n\nSerena interjected brightly, \"Yes sir, clean as a whistle.\"\n\nMelissa pouted, \"Look who's sucking up to the boss now.\"\n\n\"Hey, as long as I don't have to pull that damn cart, I'll suck anyone off.\"\n\n\"Humph! You'd suck anyone off anyway.\"\n\n\"True, but that's beside the point. Tell you what, stay right there. It'll be easier to change your footwear while you're sitting down anyway.\"\n\nMelissa crossed her arms in mock frustration while Erik and Serena brought the heap of gear over to her. She offered only grudging help as they transformed her into a pony to match Joseph. They made her stand to put the harness on and then bind her arms behind her back. Fortunately, balancing in the hoof-shoes was easier than she had feared.\n\nSerena kissed her softly on the lips before slipping the metal and plastic bit into her mouth and buckling the bridle around her head. Melissa was grateful that the part of the bit that contacted her teeth was all plastic.\n\nErik held up a long horse's tail that nearly matched the reddish blond color of Melissa's hair. He said brightly to Serena, \"Oh look, it attaches the same way as Mistress Amy's clever little device.\"\n\nMelissa involuntarily stepped back, trying to put distance between her and the double dildo end of the tail.\n\n\"Oops, Serena, I think you're going to need to get the crop ready.\"\n\nUnable to talk, Melissa stamped her hoof in frustration. She was completely surprised when the \"whack\" of the crop impacted her right butt cheek almost immediately.",
        "\"Already had it in hand,\" Serena said proudly.\n\n\"Oh good. Clever girl. Now if you could just help me hold her still, I'll pop this into place in no time.\"\n\nMelissa turned to stare at Serena accusingly. The blinders on either side of her head meant she had to turn completely to see anything around her, which is how Serena had surprised her with the crop.\n\nSerena smiled pleasantly in response to Melissa's angry stare; then she tucked the crop under one arm, reached up with both hands, and captured Melissa's nipples between her thumb and forefingers. Serena called out to Erik, \"Don't worry, I have her.\" Melissa's eyes widened until Serena could see the whites all the way around her irises.\n\n\"Excellent,\" replied Erik, \"but could you get her to bend over a bit.\"\n\n\"No problem.\" Serena pinched harder, pulling down and forward. Melissa shrieked against the bit in her mouth and quickly bent over at the waist to reduce the pain.\n\n\"Oh, that's much better. Thank you ever so much.\"\n\n\"Absolutely, not a problem.\"\n\nMelissa felt pressure against her rectum while simultaneously something else slid partway into her vagina. Erik slowly pulsated the pressure against her rear as the tightness of her sphincter reluctantly relaxed, and the butt plug worked its way deeper inside her. Finally, the butt plug's maximum girth passed into her, and the remainder of the plug slipped in quickly.\n\n\"There we go. Let me just cinch up this harness strap to help keep everything in place... Can you get her to straighten up?\"\n\n\"Sure, anything to help.\"\n\nThis time, Melissa tried to follow Serena as quickly as she could, so Serena wouldn't have to pinch any tighter.\n\n\"Oh that's perfect,\" Erik said, stepping back to admire their handiwork.\n\nSerena finally let go of Melissa's aching nipples and stepped back to join him in admiring her. \"She is indeed exquisite. Wow, it would almost be worth going through all that fuss and bother, just to look that good. Almost. Not quite. But almost.\"\n\nMelissa stomped her hoof again in frustration. As she moved her leg, however, the harness strap that ran between her legs put the most delightful pressure on her sex. She realized that her wetness had already thoroughly lubricated the leather. The strap was tight enough that it had pushed apart her labia and the wet leather strap lay between them. Every time she moved, the slick leather slid back and forth over her clitoris. The feeling was so intense; she wasn't sure she would be able to walk.\n\nErik brushed off his hands and said, \"Let's get them hitched up.\"\n\nSerena slipped a finger under Melissa's bridle and tugged her forward. \"Come on little pony. Let's get you all hitched up. You and the other little pony are going to pull me in that adorable little sulky. Melissa followed along behind, dazed.\n\nSerena turned to watch her, walking backward, which, in a lucid moment, Melissa thought was quite an achievement in her heels. Serena stopped, with a disappointed pout. \"You are such a lazy, naughty pony. Your form is terrible. You need to lift your legs.\" She swung the crop. \"Whack.\" Melissa lifted her front leg, wobbling on the other.\n\nSerena walked around her, hidden from view by her blinders. \"Higher!\" \"Whack.\" \"Straighten that back!\" \"Whack.\" \"Head up!\" \"Whack.\"\n\nMelissa found herself vibrating from the unexpected blows. Serena came back into view. \"Better.\" Catching her bridle again, Serena led her over to the sulky, where Erik was already connecting Joseph's harness to the crossbar in front. Serena arranged Melissa next to Joseph and started attaching her as well.\n\nErik finished on his side and stepped back to assess their work. \"They do make a gorgeous pair of ponies. Well matched. Almost makes me wish I had taken more of an interest in pony play.\"\n\n\"I don't know Erik,\" Serena said as she finished off, \"you're not really a horsey kind of guy.\"\n\n\"But look at them,\" he gestured, \"aren't they magnificent.\" Melissa tossed her head and pawed the turf with her hoof.\n\nSerena joined him and agreed, \"Makes me wet, just looking at them.\"\n\nShe picked up the long whip and climbed into the driver's seat, letting the long black lace back of her skirt drape down behind her. She gathered the reins in her hand and snapped her whip at the ponies. They started pulling with gusto, quickly breaking into a trot.\n\nSerena called out, \"Girlie, knees up.\" The tail of the whip cracked across Melissa's buttocks, adding a new, if marginally fainter, red mark. Melissa tried to bring her knees up higher on each step, but it was quickly tiring. All of her day's physical exercise had left her with little reserve.\n\nSerena pulled to the right on the reins, directing the ponies into a sweeping turn. Melissa's breasts were starting to ache now, from the constant jarring of her trotting gait. The tops of her thighs were burning.\n\nSerena must have seen her struggling because she soon pulled them to a halt. Melissa stood, feeling dizzy. Her arms were bound behind her back; her chest was heaving in gasping breaths; her feet were trapped in the hoof shoes -- she was terrified she was going to fall.\n\nErik stepped up beside her, grasping her upper arms firmly, lending her support. After a minute, the world stopped spinning, and her breathing had slowed to a more normal pace. She saw Joseph step away from the sulky with his arms free. Serena then moved behind her, unfastening her from the sulky and freeing her arms as well.\n\nThen Melissa saw that Joseph had removed his headgear, so she immediately reached up to release her own. Serena batted her hands away and unbuckled it herself, letting the bridle fall forward off Melissa's head. Melissa tilted her head back and took a deep breath. She felt her right hoof shoe loosen and realized that Serena must have undone the straps. Soon after, the other one came loose, and she could step out of them. Once her bare feet made contact with the grass, she curled her toes in between the cool blades of grass, groaning in relief.\n\nLooking over at Joseph, she said, \"I'm sorry if I'm insulting your passion, but being a pony-girl is so not my thing.\"\n\nHe smiled back at her in understanding. \"It is a pity, though, we were a beautiful team.\"\n\nErik released her arm but kept one hand on her shoulder. \"I agree with Joseph. The sight of you two was simply amazing, but, unfortunately, I think we can cross this one off the list.\"\n\nPitching his voice to Joseph, Erik continued, \"Thank you so much Joseph, and also give my thanks to Master Drexler. Do you want to come in and cool off?\"\n\nHe shook his head, \"No sir, I should be getting back before dark.\"\n\n\"Okay, do you need any help loading anything?\"\n\n\"No, no. I'm fine Master Erik. Do you want to keep any of the equipment?\"\n\nErik looked at Melissa, considering the question for a moment. \"The shoes and the bridle can go back. I like the harness and the tail, though. I'll keep those.\"\n\n\"What about the whip and the crop?\"\n\n\"I've got plenty of my own... although Melissa, do you want to keep the crop, so you can use it on Serena in the future?\"\n\nMelissa grinned evilly, \"Oh that's tempting.\"\n\nSerena said quietly, \"Bitch.\"\n\nMelissa said, \"In that case, yes.\"\n\nSerena complained, \"You'd think I'd know to keep my fucking mouth shut.\"\n\nErik walked over to pick up the crop and came back to hand it to Melissa. \"It's your first crop. I'll be interested to see what comes of it. Anyway, let's go in and leave Joseph to the task of getting everything put away. Again, thank you so much Joseph.\"\n\n\"Yes Master Erik, Mistress Serena, Mistress Melissa. I really did have a lot of fun. Thank you.\"\n\nAs the three of them came into the house through the sliding glass doors, Melissa felt loaded down, carrying her boots, skirt, fascinator, and crop. She had mostly gotten used to the way the harness strap slid past her clitoris with every step, but her sphincter was sore. Prancing like a pony had pulled the base of her tail up and down.\n\nShe whined, \"Can I get this damn tail out of my ass now, Master?\"\n\nErik chuckled. \"It does look very cute. I was just admiring the way it swished back and forth on the way in.\"\n\nSerena chimed in, \"It actually does look pretty amazing. I'm thinking of getting one myself.\"\n\nErik mused, \"You two in matching tails. That could be fun. I'll have to think about the right venue...\"\n\nMelissa told Serena brightly, \"You can borrow this one, for as long as you want.\"\n\nErik asked more seriously, \"Is it really that uncomfortable?\"\n\n\"Sort of. I think it was mostly just the bouncing up and down. Walking around now, I guess it would be better. Except, I'm sore and tender now. I think I'd have to work up to having it in for a longer time.\"\n\n\"Sounds fair. In general though, you okay with something like that up your ass?\"\n\n\"Ah... I guess so.\"\n\nSerena quirked her mouth into a wry smile, \"Come on, spill the beans. Somebody I know really liked her enema.\"\n\nMelissa looked down, embarrassed. \"Yes Master, I like having something in my ass, especially when you put it there.\"\n\n\"Thank you,\" he said softly, \"that's good to know.\" In a louder voice, he continued, \"I can think of lots of things to stick in there.\"\n\nSerena snorted.\n\n\"Not just my own enormous self, of course. I mean lots of toys... remotely operated vibrators when we go out to the theater or dinner... someone else's dick, while I'm in your front. Is having two men at once ever a fantasy of yours, or something you actually did?\"\n\nMelissa was certain that she was turning red. Once more looking down, she answered, \"I never did, well almost, but no, the other guy got sort of weirded out and I was really glad. Well, maybe a little disappointed, but it was probably for the best. Anyway, yeah, I guess I thought about it.\"\n\n\"Let me guess, your fantasy involved being tied down and helpless, while your tormentor and his friend had their way with you?\"\n\n\"How did...\"\n\nSerena laughed, \"Don't worry, the guy's a fucking mind reader. He knows more than any man should about how a girl's mind works.\"\n\nErik shook his head, \"Maybe about how a sub fantasizes, but women in general? Alas, it is still a great mystery to all men.\"\n\nErik suggested to Melissa, \"Why don't you take that stuff upstairs? You can get out of the harness and tail if you want, and then come back down.\"\n\n\"Okay. Thanks.\" As Melissa walked around, she deliberately rolled her hips to swish her tail back and forth. She was rewarded by appreciative laughter and applause, from both Erik and Serena.\n\nOnce she got to her room, she dumped her clothes on the bed and went straight to the bathroom to extricate the butt plug holding her tail in place. As the wide part of the plug passed the sore rim of her sphincter muscle, she gasped from a flash of pain. Once it was out, however, the intensity of the pain quickly faded to a dull soreness.\n\nShe unbuckled the harness enough to wriggle out of it. She was reluctant to undo too much of it, for fear of never being able to figure out how to put it back on. Without the tail, she decided, the harness was deliciously fun. She liked how it looked in the mirror. The strap that went between her legs was particularly wonderful.\n\nShe washed both plugs of the tail in the sink and set the whole assembly on the counter to dry. Then she took the harness into her bedroom and put it on the bed next to the skirt. Looking at the bed for a moment, she wondered where she would sleep tonight. Her heart sped up a little bit, thinking about sleeping next to Erik in his bed.\n\nShe wondered if Serena would join them. Melissa was surprised that she didn't feel jealousy toward the other woman. Then again, she reminded herself, she had just made out with Serena in the shower. The weirdness of casually making out with another woman still astonished her. Even though the pony play was far weirder in some absolute sense, her reaction to the pony play was different because she had been ordered to do it, as part of her summer job. Making out in the shower with Serena, on the other hand, was something she had chosen, separate from whatever Erik had ordered her to do. The casual ease of her choice was disconcerting. She realized that part of what bothered her was that it still didn't feel wrong. It felt like something it would be fun and easy to do again. When she thought about it, making her own decision to lick up Joseph's cum seemed perfectly acceptable too.\n\nShe muttered, \"How can I have changed so much, in just a couple of days? Or was I always like this, and Erik just set it free?\"\n\nThe silent room had no answers for her, so she shrugged and headed for the door to go back downstairs.\n\nAs she crossed the threshold, she stopped, realizing that she was completely naked. She couldn't figure out why walking around the house naked felt wrong, then she realized that it felt boring. She wasn't decorative enough.\n\nTurning and looking back at the clothes lying on her bed, she quickly ruled out the boots or harness. The tail, she decided firmly, was staying where it was for right now.\n\nErik's theme for tonight seemed to be an English garden party, so she wanted to stay within that genre. After all the bouncing up and down, she needed to find something that would give her breasts some support.\n\nLooking down at the collection of shopping bags, she couldn't think of anything that she and Cathy had bought that would fit the bill. All of those clothes were definitely more \"Americana\" dressy-sexy, not \"British Victorian bordello.\"\n\nShe walked through her closet, pulling open drawers, looking at possibilities. There were more choices than she had remembered. She wondered if Erik had added more while she was out today, or if she had just been too overwhelmed the first time she had looked. Both alternatives seemed entirely likely.\n\nShe had just been about to select a black and gold leather corset with steampunk gear details when she spotted the pastel tapestry pumps that she had fallen in love with when she first arrived. The black and gold corset clashed with the pumps, so she looked some more, finally settling on an ivory brocade corset with a brown leather center panel. An intricate design was embroidered on the leather with heavy gold thread. As she walked out of the closet, she also grabbed a four-stranded off-white pearl choker, which went well with the ivory brocade of the corset.\n\nPlaying dress-up was fun. Walking over to the bed, where she laid the corset, shoes, and choker next to the cut-away bustle skirt and the fascinator. She wasn't sure the fascinator went perfectly with everything else, but it was much too pretty to leave behind. Besides, she didn't see any other hats in the closet. Some sort of head covering seemed a requirement for the evening's dress code.\n\nIt took ten minutes in front of the three-sided mirror in the closet for her to finally get the corset cinched up and tied properly. She now understood why Victorian ladies had maids to dress them. She wondered -- if the maid was cute enough, perhaps there were other duties. She grinned, shaking her head to dismiss the idea. She did, however, note that it might be a good fantasy to explore later, for Erik's benefit, of course. She reassured herself that she couldn't possibly be so far gone that she'd actively seek out another woman for casual sex.\n\nWhile standing in front of the mirror and struggling with her corset, she also had plenty of time to examine the stripes across her rear. They were already fading to a paler pink, which reminded her of her first date with Erik. The stripes he had given her that day had almost completely disappeared by the time she had gotten back to her apartment.\n\nShe could also see how he regarded these marks as decorative. When Serena had bent over and pulled aside her skirt, there had been something surprisingly erotic about how the stripes crisscrossed her bottom. Melissa wasn't sure what had been arousing about that moment, but even now, she could feel a thrumming deep in her pelvis as she remembered Serena's striped rear -- thrust out and waiting for her crop.\n\nShe shoved that thought aside as well, checked the fit of the corset one last time, and hurried back into the bedroom to finish getting ready. Then she left for downstairs.\n\nFrom the dining/kitchen level, she saw Erik and Serena curled up on a couch below, looking out at the fading daylight. Melissa slowed down, unsure whether or not to barge in on their moment. A little jealousy curled up inside her, seeing them in such a loving pose. Before she could decide what to do, they both turned and looked up at her. Melissa realized that her high heels must have been clacking loudly across the dining area floor.\n\nSerena exclaimed, \"Holy shit, that's beautiful!\"\n\nErik added, \"I agree perfectly with the sentiment, if not quite your wording.\" Turning to Serena, he said, \"Young woman, we're going to have to wash your mouth out with soap.\"\n\nSerena laughed. \"As many times as you've cum in it, I'm sure my mouth could use a good washing.\"\n\nErik shook his head, defeated. Then he turned his attention back to Melissa, as she came down the stairs. He said, \"You really are quite breathtaking.\n\nMelissa walked around to the elongated ottoman in front of the couch and sat on it, facing Erik and Serena. She looked serious, rather than flattered. \"You guys say that, and I really, really appreciate it, but I know I'm not beautiful, or gorgeous, or some cover-girl model. I mean, sure, I'm not ugly, and trust me, I'm incredibly grateful for that. In my better moments, I might even be sort of pretty, but in a plain-Jane, Irish lass sort of way. The two of you, though, keep on going on like I'm something exceptional, and I'm not. Really, I know I'm not.\"\n\nErik and Serena shared a look, and then Erik asked Serena, \"You want to tell her?\"\n\n\"Naw, you're better with words and crap like that.\"\n\nErik shook his head, smiling at Serena's straightforward nature. Then, taking a deliberate breath, he looked over at Melissa and began, \"Okay. So yeah, at one level, I know what you're saying has merit. There's certainly nothing about you that's ugly, and that's a true gift of nature, God, whatever. Beyond that, though, you really are quite pretty. I suspect far prettier than you give yourself credit. But that's not really what Serena and I are... responding to. You see, there's an energy you've tapped into, and it takes you to a whole different level of being beautiful. It changes the rules. It's not just about a clinical definition of attractiveness anymore. It's way beyond that. You broadcast an aura of knowing that you're desirable, sexual, and incredibly attractive.\"\n\n\"But that's not how I feel.\"\n\n\"I know. I believe you, but trust me, that's the zinger! This beauty and sensuality that you radiate are all wrapped in a little-girl innocence -- and the killer thing is that your innocence is real, not pretend... tell you what, stop and think a for minute, don't you feel desirable, sexual, attractive?\"\n\n\"I guess so. But Serena has all that too.\"\n\n\"Sure honey,\" interjected Serena, \"but I've also got way too many 'been there, done that' t-shirts.\"\n\nMelissa looked at her uncertainly, so Serena explained, \"I don't have your innocence. Most likely never did. It's the whole 'virgin-whore' thing. Every man has that fantasy -- the innocent virgin who's also a total slut. And you glow with it, like a beacon. It puts cover-girl good looks to shame. I mean, somebody like Joseph is drop dead gorgeous, but when the two of you were strapped into that sulky, you were the one I couldn't take my eyes off of. And I'm not lying, I really do like guys better, a lot better. But God, I'd go down on you in an instant.\"\n\n\"Oh. Ah... I think you're pretty... hot too.\" Melissa looked up, meeting Serena's gaze. An unexpectedly intense feeling of lust flashed between them.\n",
        "Erik smiled ruefully, then wagged his finger at the oversized ottoman she was sitting on. He commanded Melissa, \"Lie back.\"\n\nShe turned to smile coyly at him and answer, \"Yes Master.\" She lay back, with her arms stretched out over her head on the leather-cushioned surface, leaving her feet still on the floor. \"Like this Master?\"\n\nErik stood and stroked his chin, considering. \"Scoot down a little, so your butt's right at the edge.\" She arched up and wriggled to the edge. Erik walked around to one side, and Serena knelt down at the other side, near Melissa's legs. Then Serena gave her a leering grin and reached down to slide a drawer out from the ottoman that Melissa hadn't noticed. She pulled a coil of smooth, thick black rope out of the drawer.\n\nErik knelt down opposite Serena and took another coil of the same type of rope out from a matching compartment on his side.\n\nMelissa looked back and forth between the two of them, \"Does all your furniture have secret compartments?\"\n\nErik smiled, shaking his head, \"Not all. In fact, these drawers were actually built into the ottoman when I got it. The cleats on the underside, however...\" Grinning evilly, he turned to Serena and nodded. Working in unison, they each lifted Melissa's legs from the floor, folding her legs tightly against her torso so her knees were pressed into her breasts. Erik and Serena gathered her up so that she was curled into nearly a fetal position lying on her back, with her buttocks lifted off the leather ottoman. Her heels were pressed down, almost touching her raised buttocks. Working slowly and precisely, Erik and Serena wrapped a half dozen loops of the black rope around each of her legs, trapping Melissa's legs in their folded position.\n\nAs Erik and Serena worked, the tail end of each rope would seem to casually drop across her pouting labia. Then Erik and Serena would, in turn, draw their rope gradually upwards, causing every twisted plait of their rope to slide slowly past her aching clitoris. Melissa shuddered almost constantly, desperately trying to quell her body's need to thrash or jerk away.\n\nThen Erik or Serena would loop another coil around her legs, allowing the tail of the rope to fall once again across her exposed sex. Melissa was gasping for air as they finally finished wrapping her legs.\n\nNext, Erik and Serena each pulled their tail of rope off to opposite sides, forcing Melissa's legs wide apart, leaving her completely exposed.\n\nAfter a few moments, Melissa felt the tension on the rope become constant. Within that small portion of her mind that still seemed capable of conscious thought, Melissa realized that they must have used the cleats that Erik had joked about installing.\n\nShe felt them adding additional ropes to the loops around her legs. Soon, she was bound so tightly that she couldn't move her hips in any direction.\n\nHer arms were next, with loops of the soft rope encasing her wrists. They then pulled her arms firmly past her head and attached the ropes to the underside of the ottoman. She couldn't lift her shoulders from the leather. The only freedom she had left was to raise her head and look a little side to side. She could also rock her body slightly left or right.\n\nAs she subtly tested her bonds, she had been puzzled by a persistent, quiet moaning. Then she realized that moans were coming from her. She had been mewing softly, her clenching sex still vibrating from the ropes that had trailed across her as they had tied her. Melissa blushed, embarrassed she had been so transparently demonstrating her desperate need.\n\nBound so tightly, she was aware of being vaguely worried and uncertain. Her thinking felt cloudy. A burning need and helplessness had pulled her into an almost feral state of consciousness. What frightened her the most was that she loved the feeling.\n\nWithout warning, a warm tongue slid into the gaping cleft of her sex, searching, probing, and then slipping upwards, past her aching clitoris. Melissa was instantly seized by overwhelming orgasm, and she screamed, straining against her bounds. Within the limited movement possible, she vibrated and shook back and forth. The orgasm rolled on and on. The intensity was simultaneously painful and rapturous.\n\nSlowly, her pulses of orgasmic shuddering weakened and subsided. She was left desperately panting, crying for breath. A darkness crowded her vision, sweeping in from the edges, and she knew she was on the edge of passing out.\n\nVaguely in the background, she heard voices. A quiet, serious tone picked at the edge of her awareness. She mumbled, \"Uhggh...\" suddenly aware of how much her throat hurt from screaming.\n\nShe heard Erik say quietly to Serena, \"I think she's back.\" He seemed relieved.\n\nSerena laughed quietly in response. \"Yeah. I'd say that being bound was a lot bigger hit than pony play.\"\n\nMelissa inarticulately moaned, \"Uhh huhhnn\" in agreement. The other two chuckled at her attempt to agree.\n\nSerena asked Erik, \"So what do you want to do?\"\n\n\"I don't know. I think she's done for awhile, but I'm horny as hell.\"\n\n\"Yeah, me too... here, let's try this...\"\n\nThrough half lidded eyes, Melissa saw Serena position herself over her bound body, but facing in the other direction. Above Melissa's face was Serena's creamy smooth labia. Melissa wondered tangentially how Serena could possibly keep her sex shaved that smooth and soft. Then she felt Serena kissing the inside of her thighs.\n\nPanicked, Melissa begged, \"Naghh... nooo... please...\"\n\nSerena laughed, nearly a giggle. \"No fears, little one. I'm not going to make you come again. At least, not right now. I'll be careful. Promise\"\n\nMelissa mumbled, \"Oh kayee.\"\n\nSerena resumed her light kisses and nuzzling. After a few more anxious moments, Melissa was able to relax and enjoy the attention. Looking up at Serena's soft sex, Melissa wondered if she should try to return the favor. Convincing her muscles to lift her head from the ottoman seemed impossible for the moment, and Serena was otherwise out of reach, so Melissa just remained still and tried to focus on recovering. She saw the shadows defining Serena's sex darken as Erik stepped up behind her.\n\nErik's hand stroked alongside Serena's torso as he asked, \"So where do you want it?\"\n\n\"Silly man, you know where I like it.\"\n\n\"Ha!\"\n\nMelissa watched as the swollen head of Erik's penis slid into view, as he glided it past Serena's cleft before pulling the head of his penis up until it pressed against the bare skin above her labia. Then he slowly drew it back, the veined ridges of his shaft teasing apart Serena's labia. Melissa felt Serena pause in her nibbles. Melissa could see Serena's ribs expand from a sharp intake of air.\n\nAs the hood of Erik's head drew past Serena's clitoris, Melissa saw Serena flinch in a quick shudder. Then Erik's head was seated firmly at Serena's opening. Melissa realized that she had never seen the mechanics of sex quite this close before. She had an odd realization that the scene would probably be vaguely disgusting if she didn't like Erik and Serena so much. She wanted them to take pleasure in one another. They had given such intensity to her, it seemed only fair to let them catch up.\n\nThen Erik's head slowly disappeared into Serena, followed by the remainder of his penis in one long, smooth motion. Melissa was fascinated by seeing him so completely penetrate her. Serena groaned quietly and pushed back against him. Serena complained, \"Tease.\"\n\nHe laughed, withdrawing nearly all the way before sliding back in again. \"You want me wet, don't you?\"\n\n\"Alright, already!\"\n\nErik laughed again, then withdrew entirely this time. He lifted the head of his penis up until it was seated against the puckered opening of her anus. He pressed gently and firmly forward. Melissa watched in amazement as Serena's anus smoothly spread open to take him in.\n\n\"Wow,\" she thought, \"Serena's must have done that a lot more than I'd ever want to.\"\n\nOnce again, Erik's shaft slid fully forward, disappearing into Serena. His smoothly shaved scrotum swung forward as his pelvis bumped into Serena's wide spread buttocks. Melissa tried to stick out her tongue to give his scrotum a quick lick on the way by, but she missed.\n\nSerena groaned in pleasure, leaning forward and resuming her kisses and nibbles on Melissa's upper thighs. Erik gently slid in and out of Serena, slowly building momentum.\n\nMelissa wondered if Serena truly did prefer anal sex. She found it hard to believe. Perhaps Serena knew that Erik preferred anal sex and just went along with it. Melissa hoped that wasn't his preference. She had never found having a man in her ass to be hugely fun. Her experience was limited to a handful of times. Once or twice, she supposed, it had been okay. One time, she had even gotten close to an orgasm. But Erik was larger than anyone she had ever let in there. While Erik wasn't huge, Melissa was pretty certain that he was at least seven inches long, and pretty thick as well. Just trying to swallow his penis was intimidating enough. She winced at the idea that he might prefer anal sex.\n\nAs the intensity of their coupling had increased, Serena had sunk lower down, arching her back to take Erik in deeper, thrusting back at him. Her swollen sex was now in easy reach. Melissa decided that her duty as a friend was to help out. After all, Erik had been willing to suck off Michael. Tentatively at first, she reached out with her tongue to explore Serena's dripping labia. As Serena felt Melissa's efforts, she dropped even lower down. Seeing Serena's eager reaction, Melissa circled her tongue around the other woman's hooded clitoris.\n\nMelissa wasn't sure what Serena would want. She knew that once she was aroused, her clitoris was generally far too sensitive for direct stimulation. From the way that Serena quickly ground her clitoris into Melissa's mouth, however, it didn't seem that Serena had a problem with too much sensitivity. Melissa dutifully lapped her tongue side to side, across Serena's straining clitoris.\n\nErik was now pounding in and out of Serena's ass, his engorged penis millimeters from Melissa's nose, while his scrotum slapped against her forehead with every thrust. Between being tightly bound and having her face covered in thrusting bodies, Melissa had to fight off feelings of claustrophobia. \"At least,\" she thought, \"there's no poop stink.\" As close as she was to the intense action, she very grateful that Serena kept herself thoroughly clean, inside and out.\n\nThen Serena brushed her tongue across Melissa's sex, causing Melissa's distraction with all the mechanics of sex to instantly evaporate. Melissa discovered she was straining to lift her pelvis up to meet Serena's mouth. In response, Serena dropped her head, enfolding Melissa's engorged labia and clitoris into her mouth, then swishing her tongue back and forth across all of Melissa's captured parts.\n\nMelissa gasped, forgetting where her tongue was for a moment, wanting only for Serena to somehow take more of her in, which she did. Then Serena released her hold. After an agonizing moment with no contact, Serena delicately reengaged, slowly sliding her tongue back and forth alongside Melissa's clitoris, teasing it without direct contact.\n\nMelissa gasped for air, which made her realize that her mouth was covered by Serena and she had completely forgotten about her own part in all this. Melissa restarted her efforts, causing Serena to redouble hers. Melissa wasn't sure if she could keep focus on what she was doing to Serena while simultaneously coping with a quickly oncoming orgasm, but she was determined to try.\n\nErik, in the meantime, seemed to have sensed the shift in both women's arousal, because his pace and energy level began to peak. Melissa wasn't sure which one of them slipped over the edge first, but whoever did, ignited a rapid cascade of mutual orgasms.\n\nUtterly exhausted and satisfied, Melissa laid her head back. Her most recent orgasm may not have been nearly as cataclysmic as her earlier one, but it had been imminently enjoyable. The shared experience with all three of them had been amazing.\n\nErik slid out of Serena, the tip of his penis weeping semen as he rested momentarily against the crease of her buttocks. Then he sank backward to sprawl across the floor with a satisfied groan.\n\nMelissa relaxed as best she could in her bonds, breathing contentedly with the weight of Serena resting above her. She smiled, thinking that at least Serena weighed less than most men. While Melissa still didn't feel entirely comfortable with all the same-sex activity, it was clear that it wasn't completely horrible either.\n\nAs she smiled to herself, the simple contraction of her muscles made it clear that her tongue was stiff and sore. Gently sticking her tongue out of her mouth, she wagged it back and forth, trying to loosen up her cramped muscles. At that moment, however, a drop of Erik's semen fell from Serena's buttock, splashing directly onto Melissa's tongue.\n\nShe heard Erik chuckle from the floor. He must have seen what happened. Snorting derisively, Melissa reached up with her tongue and mischievously licked away another drop of his cum. What Melissa hadn't expected was Serena's reaction. As Serena felt Melissa's warm tongue lapping along the edge of her sphincter, she arched backward in a gasp of surprise. After a deep sigh of delight, Serena lay back down again.\n\nSeeing what she had started, Melissa lifted her head back up, and with a wry grin, very deliberately licked Serena clean of all the cum that had leaked out. Serena's satisfied groans and shudders made perfectly clear how much she enjoyed the attention. Melissa hoped that Erik was watching, which was confirmed when she heard him muttering from the floor, \"You are going to be the absolute death of me. Truly, I tell you, I am a condemned man.\"\n\nFinished, Melissa let her head fall back to the ottoman, a contented smile stealing across her face. She decided that Serena was right. It was worth dealing with the taste if she could get that sort of reaction from Serena and Erik. "
    ],
    "authorname": "brentaden",
    "tags": [
        "bdsm",
        "bisexual female",
        "control",
        "domination",
        "female submissive",
        "male dominant",
        "master",
        "punishment",
        "slave",
        "submissive"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/summer-hire-ch-13"
}
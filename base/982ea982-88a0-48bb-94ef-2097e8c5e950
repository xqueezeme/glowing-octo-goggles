{
    "title": "A Game of HORSE Pt. 05",
    "pages": [
        "This story contains italics.\n\nAll characters in this story are 18 or older.\n\nChapter 11: The Fun Center\n\nBrandi was conflicted. She wanted to dress up and go to the prom but she didn't want to be the center of attention and create a spectacle. Also, she didn't have a date. Peter wasn't allowed to go because he was caught drinking at the junior prom last year, and Ernesto and Gary had girlfriends. Donny had finally broken up with Arlene but there was no way she was going with him. Going as Brady would be no fun, so she resigned herself to missing the event.\n\nFortunately, a text from Peter changed her outlook: \"Hey Brandi what would you think about going to the Lincoln prom?\"\n\nThat doesn't make sense, she thought. Lincoln High School was two towns away. \"How can we do that?\" she texted back. It seemed impossible, but she knew Peter probably had some sort of plan. She had already picked out the dress she would wear if she was going so she was eager to hear Peter's idea.\n\nPeter didn't reply, but five minutes later he pulled into the driveway. It was a Thursday, right before dinner, and Brady was inside with his parents. Peter knocked on the door and let himself in as he always did, saying hello and charming Brady's parents for a few minutes, then asking Brady to come outside and see the new stereo system in his truck. Brady's parents were always happy to see Peter, especially now that the boys were almost grown up and going off to college.\n\n\"So,\" Brady said, looking over his shoulder to make sure his parents were out of earshot. \"How would this work?\"\n\n\"Well,\" Peter began, \"remember that girl Elena from Lincoln I went with for a few months last year?\"\n\nBrady nodded. Elena was gorgeous. She was half Thai and half American, with creamy tan skin, straight black hair down to her waist, luscious bee-stung lips and dark, almond-shaped eyes set above high cheekbones. She was about 5'6\" with a thin, toned body from playing volleyball. Brady saw her by the pool once and was immediately taken with her small breasts capped by perpetually hard nipples that poked out from her bikini top like little corks. She was a dream.\n\n\"So, Elena just broke up with her boyfriend who didn't want to go to prom in the first place, which is actually why they had a huge fight and broke up, but she already bought the dress and tickets and tux rental and all that stuff and still wants to go, so she asked if I would be her date. She said that after prom we could spend the weekend at her parents' beach house, and they won't even be there. Just us.\"\n\nBrady listened, but it still didn't make sense. \"Well, that's great for you, but what does it have to do with me?\"\n\n\"Well,\" Peter explained, \"I know you really want to dress up and go, and I thought it would be fun for us to double-date.\" Peter looked closely at Brady as he spoke, trying to gauge his response. \"So, I told her all about you and asked if she had a guy friend who might want to take Brandi...\"\n\n\"What? Are you crazy?\" Brady hissed, trying to keep his voice down. \"Brandi going to the prom with some random guy? Are you nuts?\"\n\nPeter raised his hands, palms out, urging calm. \"No! Listen! As soon as I told her about Brandi she told me her friend Ray would absolutely love to take her. She said he's really cool, good-looking, fun and really, really, really open-minded if you know what I mean.\" Peter smiled hopefully. \"Elena said Ray isn't planning to go to the prom because it's not 'his thing' but she was pretty sure he would want to take Brandi if he had the chance.\"\n\nBrady looked at him suspiciously.\n\n\"Elena suggested you two go on a pre-prom blind date, to see if you like each other. If it works out we could all do prom and the beach house together. What do you think?\"\n\nBrady shook his head. \"I don't think so.\"\n\n\"Here,\" Peter said, offering Brady his phone. \"Check him out -- this is his Instagram.\"\n\n* * * * * *\n\nBrandi decided to dress modestly for her date with Ray. She didn't want to come on too strong. She chose a loose, gauzy bohemian top, denim cutoff shorts and plain sandals, with just a touch of makeup and clear lip gloss. She went with her natural hair which was light brown and getting long by now, almost to her shoulders. She tied it back in pony tail under a pink baseball cap. She wore a leather bracelet and a turquoise pendant on a leather chain with matching earrings, giving her a hippy-chic style.\n\nWhen Ray rang the doorbell Brandi peeked out through the curtains. He looked just like the pictures she had seen online. He really was cute! Actually, in person he was even better looking than the pictures. He was tall and well built, with a narrow waist, broad shoulders and solid biceps, and carried himself with confidence but not in a stuck-up way. He wore tan baggy shorts and blue collared shirt with flip flops, casual and a little nerdy but neat. As soon as she saw him Brandi got very excited to be going on a date with him.\n\nWhen Brandi opened the door she could tell instantly that Ray liked her looks. They chatted on the doorstep for a few minutes, then Brandi grabbed a beaded handbag Katie had given her for her \"girlie things\" and they headed out.\n\nRay was a perfect gentleman and opened the car door for Brandi, but couldn't help taking a good look at her legs as she climbed in. Brandi knew it and gave him a little smile, letting him know it was OK.\n\nIn the car they hit it off immediately. They liked the same music and movies and books and the conversation flowed easily. Ray was a basketball player and, like Brandi, a Lakers fan. Best of all was that Ray didn't only talk about himself. He was genuinely interested in her. He asked lots of questions about school plays and what she planned to do after high school. Brandi was smitten.\n\nIt was Elena's idea that they play mini-golf on their pre-prom date. Brandi hadn't been to the Fun Center since middle school, and never as Brandi. As always, there were the arcade games, batting cages, driving range and the old mini-golf course with the windmill, the giant bear and the unnaturally-blue stream running through it. The only thing different was the new gigantic message board that flashed announcements about community events, kids' birthdays, and free ice cream for a hole-in-one on the 18<sup>th</sup> hole.\n\nIt was fun to be back, especially dressed as Brandi on a date with Ray. \"You can pick our balls,\" Ray suggested as he paid for their rounds. Brandi picked a green one for Ray and a pink one for herself.\n\nBrandi loved mini-golf with Ray. There was no one else there, so they had time to be silly and get to know each other without other people around. She tried not to be too obvious, but putting her ball gave her the perfect opportunity to lean forward, putting her cleavage on display as the billowy shirt hung down. After each hole she took the opportunity to bend down to pick up their balls, letting her faded shorts rise up into the sky and showing her smooth legs and shapely behind. Ray made no attempt to hide that he enjoyed watching her. The excitement was building and they both knew it.\n\nBy the third hole they were flirting shamelessly, leaning into each other to \"get a good line\" on each putt, giving each other advice, pretending to care about their scores when it was clear that all they wanted to do was grope each other.\n\nWhen Brandi was leaning over to take her shot for the fifth hole Ray blurted out, \"Brandi you are beautiful!\"\n\nBrandi paused and looked at him. \"Thank you, Ray,\" she replied with a big smile. \"That's so nice of you to say.\"\n\nThey looked into each other's eyes, wordlessly sharing their mutual desire. \"And you're sexy, too,\" he added quietly.\n\nBrandi raised her eyebrows, delighted at his boldness. \"You think I'm sexy?\" she asked. She decided to mess with him a little. \"What's the difference between 'beautiful' and 'sexy' anyway, Ray? What do you mean?\"\n\nRay smiled, looking Brandi up and down. \"Well... it's interesting, Brandi. I think 'beautiful' is when something is nice to look at, like a painting in a museum or a flower. You can look, and maybe smell it, and it makes you happy, right?\"\n\n\"Um, right,\" Brandi replied, surprised at his thoughtful response. She assumed he was going to laugh off her question but he certainly seemed to be taking her seriously.\n\n\"But you can't touch a painting. You can't feel it, you can't really experience it with anything but your eyes and maybe your mind, you know?\"\n\nBrandi nodded. He was making sense, but she wondered where he was going with this.\n\n\"But something sexy -- that's different. Like a Lamborghini, OK? That's beautiful for sure. It's sleek, with curves and paint and chrome and all that. It's beautiful, right?\"\n\nBrandi nodded.\n\n\"But it's also sexy. You feel it when get in the seat -- the leather is soft and smells good and grips your body, then you start it up and hear the engine roar, the vibration, you feel it. Then you put it in gear and hit the gas and you're pushed back in the seat and you go around a curve and there's G-force shoving you against the door, tires gripping the road. It responds to you! It moves you! It excites you! It's sexy! You know what I mean?\"\n\nBrandi stared at him, her mouth slightly open, eyes agape.\n\n\"When you experience something like that, Brandi, you never want it to end. You want to have it, always.\" Ray looked at her, studying her reaction. \"You want it to be yours...\"\n\nHe stepped close to her, so they were almost touching. \"YOU are sexy, Brandi. And beautiful, too,\" he whispered.\n\n\"Oh, my God!\" Brandi gasped. She was completely enthralled, as if he cast a spell on her. She put her arms on his shoulders and pressed herself against him, giving him a quick kiss on the lips. \"You're amazing!\" she said.\n\nRay wrapped his arms around her waist and kissed her back. They looked into each other's eyes, neither letting go. Their faces drew closer, as if by gravity, and suddenly their lips were touching again, soft and sweet. Brandi closed her eyes and melted into Ray's arms, and when she felt the tip of his tongue poking out she parted her lips, welcoming him into her soft mouth. Ray groaned and Brandi purred as their tongues curled together, and in moments they were locked in a torrid embrace, their lips mashing and tongues dancing. Their bodies pressed closer, grinding forcefully as they made out on the fifth tee.\n\nSuddenly, Ray broke the kiss. \"Ummm, just give me one minute,\" he said as he backed away and bolted to the office.\n\nWhat the hell? Brandi thought. Where's he going? What's wrong? She watched Ray talking to the women behind the counter and handing her his credit card. What's he doing?\n\nRay returned quickly, a big smile on his face. Brandi was about to speak but Ray shushed her. \"Take a look at the message board, sexy,\" he laughed.\n\nBRANDI WILL YOU GO TO THE PROM WITH ME? -- RAY was flashing on the big screen in colored lights, scrolling across with animated fireworks exploding and confetti streaming down. Drivers on the road could see it, and when one honked another did the same and then another, and suddenly cars in both directions were honking their horns as Ray's proposal flashed on the screen. It continued for a full minute, and when the flashing stopped and the horns went quiet Brandi shouted, \"YES!\" and threw her arms around Ray and again they were locked in a wet, passionate embrace, tongues wrestling, bodies grinding, panting for air.\n\nThis time it was Brandi who pulled back. \"I want to do something sexy for you,\" she said demurely. \"Let's go to your car, OK?\"\n\nRay nodded, very excited but not wanting to get his hopes up too high on account of it being their first date. Brandi hustled him across the little stream and over the back nine, leading them through the parking lot to Ray's SUV.\n\n\"Open it,\" she ordered, and Ray clicked the remote. He headed toward the driver's door but Brandi led him around the back on the passenger side, opening the door and shoving him in. She opened the front passenger door and pushed the seat as far forward as it could go, then climbed in the backseat with Ray and closed the door, kneeling on the floor in front of him.\n\n\"I'll show you sexy,\" she boasted, running her hands up his thighs then back down.\n\n\"Oh, yeah?\" replied Ray flirtatiously, realizing that Brandi was far more amorous than he had imagined. He clicked the remote again, bringing the car stereo to life \"What are you going to do?\" he asked, although Brandi was making it abundantly clear.\n\nBrandi looked up at him, biting her lip. \"I'm going to suck your cock, Ray,\" she purred, subtly swaying to the music. \"Is that sexy enough for you?\"\n\n\"Oh yeah,\" Ray said, breathlessly, a big smile on his face. He reached for his belt but Brandi pushed his hands away.\n\n\"I'll take care of that,\" she admonished. \"You just sit back and relax...\"\n\nBrandi rubbed his thighs, looking up at him, wordlessly communicating her desire. \"I think you're sexy too, Ray,\" she purred, then slowly undid his belt with her pretty fingers. She noticed him watching intently and moved even more deliberately as she unsnapped his shorts and lowered his zipper, making a show of it. Brandi always loved that part of blowjob videos, and she could tell Ray did, too.\n\nBrandi grasped the waistband of his shorts and tugged them down as Ray helpfully rose up. She left them around his ankles and sat back on her sandals, getting a good look at the large shaft encased in Ray's boxers. He looked like the perfect size, about the same as Peter. Brandi ran her hands up Ray's thighs and skimmed over the tent in his boxers. She ran her palm over his bulge, then spread her manicured fingers out and lightly ran them all around and down between his legs, grazing his balls.\n\nRay's eyes were fixed on Brandi's hands, watching her slowly rub him.\n\n\"Do you like my fingernails, Ray,\" she asked in a sexy voice, spreading them out over his lap, sparkling like ten red rubies.\n\n\"God! I love them, Brandi. So sexy.\"\n\n\"I'm glad you think so,\" she purred as she took the waistband of his boxers in her red fingers and lowered them down his legs, revealing his throbbing member to her for the first time.\n\nBrandi's heart skipped a beat. It's beautiful! she gushed to herself. And sexy too.\n\nHoly shit! thought Ray. We didn't even finish 9 holes and she already has my cock out. I think I'm in love!\n\nBrandi had the urge to suck Ray into her mouth immediately but she forced herself to wait, wanting to make this extra-special for both of them. She took his shaft in her hands and held it, devouring it with her eyes. It was long and thick, with smooth, taught skin and a flared helmet, curving upward, a pronounced main vein and big round balls hanging down, adorned with light fuzz. He was a perfect specimen of manhood.\n\nBrandi stroked him up and down, running her fist up from the base and gliding her thumb over the tip, then back down to take his balls in her hand, caressing them, getting the feel of him.\n\n\"You have a beautiful cock, Ray,\" she said as she fisted him. \"It's sexy.\"\n\nRay moaned, making Brandi giggle. \"It's like a Lamborghini, Ray,\" she teased, repeating his words. \"It excites me... I want it to be mine.\" She fisted him more, rubbing his balls, stroking the head, looking from his lap up to his face, seeing pure excitement in his eyes.\n\nShe looked at his cock, hungry to taste him, then looked back up as she stroked. He was pleading with his eyes, desperate for her to take him in her mouth but she waited, teasing, letting the anticipation build.\n\n\"I really want to suck your cock, Ray,\" she said softly as her red fingernails danced along his pole. \"You want me to suck it?\"\n\n\"Oh, my God, YES!\" he wheezed. \"There's nothing I want more right now, baby.\"\n\nBrandi loved being called baby. It made her want to make Ray feel really good. She stroked him smoothly with her manicured fingers, rubbing the head and massaging his balls, her pretty face just inches away from his throbbing erection.\n\nShe watched him watching her hands. \"You like my nail polish, don't you Ray?\" she asked.\n\n\"Uh-huh,\" he nodded vigorously. \"I love it. Especially on your fingers.\"\n\nBrandi smiled at the compliment. \"I bet you like lipstick too, don't you?\"\n\nRay nodded cautiously, noticing Brandi wasn't wearing any.\n\n\"Awwww, too bad,\" she clucked apologetically as she stroked him. \"And I didn't put any on for you. I'm so sorry Ray.\"\n\nRay groaned. \"Really -- it's OK, Brandi. I think you're amazing just the way you are.\"\n\n\"But you'd like it more if I was wearing lipstick, wouldn't you?\" she whispered, stroking. \"My lips painted red... wrapped around your cock... kissing it... licking your balls... you'd like that, wouldn't you, Ray?\"\n\nRay nodded, his mouth open, dumbstruck. Oh, my God! he thought. This girl is too much. All my favorite things -- nail polish, lipstick, blowjobs, talking dirty. It was like he hit the lottery.\n\nBrandi gave Ray a wicked grin and reached in to her handbag, feeling around for the tube of red, no-smear lipstick she knew was in there. It was \"specially designed\" for giving blowjobs, according to Katie, and wouldn't smudge no matter how energetic she was.\n\n\"I think it would be sexier if I sucked your cock with bright red lips, don't you Ray?\" she teased. Brandi looked up at Ray and made a performance of turning the tube to push the red stick out, then sensuously running it over her lips, smacking them together, kissing the air, turning her mouth into a glossy, red, wet dream.\n\nRay was panting with excitement, and when Brandi took his shaft back in her hands and lowered her face to the tip he thought he might pass out. She paused for a moment, holding him, inhaling, enjoying his scent, then she slipped her tongue out from between those sexy red lips and swirled it over the head. She ran her tongue all over the smooth helmet and back and forth along the ridge, then she got her lips involved, kissing and licking the tip of his cock, running the head across her lower lip, then her upper, swirling her open mouth around and around his big bell end, licking and kissing like she was making out with the head of his cock. Ray was in bliss.\n\nWith her lips against the head of his shaft she curled them into a smile, letting him know how much she was enjoying him, and then, looking into his eyes, she parted them and took him in to her mouth, moving down slowly, taking more and more, until she completely engulfed his entire length in one smooth motion so that her nose was pressed into his belly and the head of his cock was lodged in her throat.\n\n\"Oh, my God!\" Ray wailed. He had never experienced anything like this, not even in his fantasies. Brandi was beyond sexy. It was if a new word had to be invented. She held him buried in her mouth and throat then slowly withdrew, letting him watch his pole gradually appear through the perfect red O of her lips.\n\nWhen she got back to the tip she pursed her red, sexy lips together and kissed it over and over, again and again. She smiled as she made love to his cock with her mouth, looking up at him with a sparkle in her eyes, letting him know how much she loved giving him pleasure.\n\nBrandi lavished the head and then up and down his shaft, kissing all over, licking, smothering his erection with her utmost affection. She worked her way down to his balls and licked and sucked them too, taking each nut into her wet mouth as she fisted his shaft in her red fingers.\n\nAfter slathering his balls she worked her way back up and sucked him in again, bobbing her head up and down, picking up speed, rubbing his balls and sucking his cock feverishly in the back seat of the SUV.",
        "It didn't take long before Ray felt his orgasm approaching. He was pretty sure Brandi intended to suck him dry, but being the first time he thought it wise to give warning.\n\n\"Brandi... I'm... gonna...,\" he squawked, \"I'm... gonna...\"\n\nBrandi immediately pulled back, squeezing the base of his shaft between two fingers. \"No, not yet!\" she admonished. \"Not yet. Relax.\" She squeezed harder, making him wince. \"Not yet,\" she said again.\n\nRay exhaled, delirious with pleasure and dying for release. Brandi held still, gripping the base of his shaft. \"Trust me,\" she purred, looking up at him, hoping he could hold off. \"Trust me,\" she said again.\n\nWhen she saw his breathing come back to normal she began to stroke him again, slowly, gauging her speed and grip to keep him at a simmer. Ray groaned as Brandi erotically tormented him, bringing him to the edge of ecstasy but denying his climax, at least for now. When she was sure the eruption was no longer imminent she leaned forward and sucked him into her mouth again, bobbing steadily, not too fast, looking up at him lovingly as she nursed his straining erection, her red lips wrapped tight around his shaft, her tongue massaging the crown.\n\nWithin minutes she felt him shaking again, his hips pushing up off the seat, and she immediately pulled back, again denying him, prolonging his agony and ecstasy. Brandi kept this up for more than four songs on the radio, bringing him to the edge of orgasm and ramping back down, red-lining his sexual engine until he was about to burst, physically and emotionally.\n\nFinally, Brandi decided he had endured enough. After she brought him down for the fourth or fifth time -- she had lost count -- she began fisting him and took his dripping shaft into her wet mouth, swirling her tongue over the head, pumping the base, rubbing his balls, and then she took him deep, all the way down until the end of his cock was lodged in her throat. Brandi held him there, her face pressed against his belly, rubbing his balls, then she pulled back and held the head in her mouth, sucking hard, her cheeks drawn in, fisting him faster, holding his thick shaft in both hands and pumping, pumping, pumping as she sucked.\n\nRay began bouncing off the seat, fucking his cock up into Brandi's mouth, crazed with lust and dying for release, hoping that she would finally allow him to explode. This time she had no intention of denying him, sucking and fisting and rubbing with all her energy, intent on drawing every drop of cum from his churning balls into her hungry mouth.\n\n\"Uh... uh... oh... OH, OH! OH FUCK OH FUCK OH FUCK BRANDIIIIIIIIII!\" Ray shrieked.\n\nBrandi felt his balls constrict and shaft pulse as the first blast shot from his cock like a fire hose. \"AAARRGHHHHAAAHHUUUUGGG!\" Ray choked as streams of semen flooded Brandi's mouth. He felt like his whole body was electrified. Never had he experienced anything like this. He looked down at the angel kneeling in front of him, her red lips locked on his spurting penis, a look of pure pleasure on her face as he discharged his thick goo into her mouth. Brandi looked up at him adoringly and swallowed deeply, taking his seed into her belly.\n\nBrandi loved swallowing Ray's come. She loved everything about sucking him off -- the size and shape of his cock, the feel of it in her mouth, his scent, the sexy sounds he made when she teased him, the way he looked at her, the power of his ejaculation.\n\nWhen the flow from his shaft finally petered out she pulled back, giving the head of his cock a loving kiss. \"Was that sexy?\" she asked innocently."
    ],
    "authorname": "emelle78",
    "tags": [
        "oral sex",
        "crossdressing",
        "blowjob",
        "crossdresser blowjob",
        "car blowjob",
        "golf",
        "lipstick"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/a-game-of-horse-pt-05"
}
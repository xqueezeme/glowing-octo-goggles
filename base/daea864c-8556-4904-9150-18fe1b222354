{
    "title": "Three Square Meals Ch. 067",
    "pages": [
        "With the muted flare of silenced retro thrusters, the sleek black shuttle touched down in the centre of the glowing orange landing pad. Amatsu Mikaboshi powered down the engines, then flipped a switch on the black console in front of him, which opened the airlock door. He rose from the Pilot's Chair, and stalked from the tiny infiltration vessel without a backward glance. Movement to his right drew his attention, as a huge set of reinforced doors dropped down into position, concealing the entrance to the hangar bay. His hidden fortress, Yomi-no-kuni, was built into a remote mountain range, obscured from detection by the cunning use of technology.\n\nIt had taken a couple of days to pilot the freighter he'd hijacked back to his home system, where he'd promptly abandoned the 'Scamander' at the local starport. Flying from there to his citadel in Shinatobe's shuttle had taken a few additional hours, but he had no intention of landing the cumbersome stolen freighter in his base of operations. He had already taken a risk using the Scamander to fly back to this planet, but in his battered condition, he had rather limited options.\n\nNow that he was safely back in his stronghold, he felt a surge of relief; yet another long forgotten emotion he was experiencing again, courtesy of John Blake. Thoughts of the man that Mikaboshi was fast coming to think of as his nemesis, filled him with a blinding rage, and he struggled to bring himself under control as he strode across the dimly lit hangar. What made the events that had transpired all the more galling, was that he'd had John Blake at his mercy, and could have ended it all with a single gunshot. By indulging himself, and taking his time, he'd ended up losing so much...\n\nA door opened before him, and Servant Kagawa, his major-domo stepped through, walking with the small quick steps he favoured. \"Welcome home, Idaina-sha,\" Kagawa greeted him with an obsequious bow.\n\nMikaboshi normally enjoyed the man's servile disposition, viewing it as treating him with the respect he deserved. Today however, it irritated him immensely, and he had to strongly rein in his fury before he throttled the man. He breezed past him instead and snapped, \"What news of Shinatobe? Did she escape? Has she made contact?\"\n\nKagawa shook his head, his head bowing low as he fell into step beside Mikaboshi, and replied, \"No, Idaina-sha. We have received no word from her since the incident on the Amaterasu.\"\n\nThe mention of his flagship caused Mikaboshi to grind his teeth in anger, difficult though that was, with his jaw broken in three places. He'd successfully escaped the stricken battlecruiser in Shinatobe's shuttle, then activated stealth mode as he'd put some distance between himself and the compromised ship. Until he'd repaired his mangled body, he had no intention of confronting John Blake, or the boarding party that had slaughtered his soldiers with such contemptuous ease. \n\nWhen John Blake disembarked the Amaterasu in his evil-looking gunship, Mikaboshi's plan had been to return to his ship and regroup with the survivors. Moments later however, the Invictus had dropped out of hyper-warp, and hanging there in the blackness of space, he'd been forced to watch helplessly as the white-hulled cruiser had engaged the Amaterasu. He still struggled to find words to describe the level of destructive power that ship had brought to bear on his battlecruiser. He'd been shocked and appalled as his flagship that he'd meticulously upgraded and maintained over decades, was utterly obliterated in less than a minute.\n\nStill, when he had his revenge, and John Blake had been slain, he could always seize the Invictus for himself. He wasn't going to take any chances this time however. John Blake had threatened to come looking for him, so Mikaboshi planned to oppose him with such overwhelming force, the result of the impending battle would be a foregone conclusion. That thought brought a smile to his twisted lips, and he walked back to his quarters with an added spring to his step.\n\nNot bothering to look at the man walking by his side, Mikaboshi strode down the bleak stone corridor, and announced imperiously, \"Order the immediate recall of all my agents, with no exceptions.\"\n\nKagawa gasped in shock, and forgetting his place, he blurted out, \"But that would mean abandoning dozens of contracts! The loss of face will be catastrophic!\"\n\nMikaboshi paused as he reached his destination, and pushed the button to open the heavy black door. Turning to glare at Kagawa with his mangled face, he said in a low voice, \"Question my orders again, Servant Kagawa, and you will end up begging me to end your torment.\"\n\n\"Hai, Idaina-sha, I meant no disrespect,\" Kagawa replied, bowing impressively low. \"I will order the recall at once.\"\n\nHis major-domo scurried away, and Mikaboshi entered the darkened room, illuminated only by red lighting built into the floor. It cast a ghoulish crimson light over the dozens of cybernetic limbs hanging on the walls, giving the room the appearance of a horrifying slaughterhouse. He stopped in front of one of the left arms, carefully removing it from the rack with his right hand. \n\nJohn Blake had ripped his old arm away at the shoulder, but by luck, the torso mount itself was undamaged. He activated the command to detach the remnants of his dismembered limb from his body, and the ravaged shoulder joint detached with a soft click, before falling to the floor with a metallic clang. Aligning his new arm into the correct position took only a moment, and he locked it into place, then smoothed over the synthi-skin to conceal the joint.\n\nHis limb restored, Mikaboshi turned now towards the opposite wall, where a score of disembodied heads were neatly arranged in rows, staring back at him with cold, dead eyes. He strolled over to the first of those, lifting it from the shelf and checking the state of the connections. It had been many years since he'd had to make such significant repairs to his body, and it was one more thing he intended to make John Blake pay for, along with the loss of both the Amaterasu, and his beloved Shinatobe...\n\n***\n\n\"There's a good girl,\" Alyssa purred, planting a loving kiss on the big bulge in Sakura's slender neck. \n\nThe ravishing blonde Matriarch was lying on her back with the latest addition to their crew lying on top of her, their firm breasts squashed together. John knelt in front of Sakura with his cock buried down her throat, and he was stroking back and forth at a gentle pace that he knew she was comfortable with. They'd let the Asian girl sleep for several hours, lying peacefully between them as she absorbed the rich, heavy meal in her belly. Her stomach was flat and toned again now though, her growing body having voraciously consumed his load, and she needed feeding again to maintain the Change.\n\n\"Swallow now, sexy, it makes the muscles in your throat massage his cock,\" Alyssa said encouragingly, watching with lustful eyes as John thrust in and out of Sakura's mouth. \n\nSakura was watching John carefully, doing her best to learn from the blonde girl's expert advice, and she smiled around the girth spreading her mouth wide as she saw his breathing quicken. Her lips reached his groin, the full length of his shaft encased in the tight embrace of her throat, and she paused for a moment, swallowing again to heighten the sensation for him. It still astonished her that she could take John like that, but there was no discomfort in having his burgeoning length impaling her; on the contrary, she found it tremendously satisfying. She made eye contact with him, and took control over their coupling, maintaining a smooth, sensual rhythm as she bobbed up and down. \n\nNow that they'd made love, the nature of their relationship had shifted up a gear, greatly intensifying the connection between them. It still felt like a dream to her, how this incredible man had swept into her life, rescuing her from the horrific mental prison of her own cybernetic body - the psychotic Shinatobe persona enforced upon her by the Master Assassin Mikaboshi. Not surprisingly, her feelings towards John were overwhelming in their intensity, but their nature had subtly shifted, changing from earnest gratitude to lustful desire, and to something much more permanent. \n\nHer mind had wandered for a moment, but she'd been subconsciously following Alyssa's instructions, moving in fluid strokes accompanied by wet \"shlocking\" sounds as he pistoned in and out of her throat. All that stimulation soon had the desired effect, and John cried out in ecstasy as he came, running his fingers through her hair and gently holding her in place. This was another of those moments which made Sakura feel so submissive, but so empowered at the same time, and she whimpered with delight as she brought him to orgasm. \n\nHis huge cock began to throb in her throat, and she swallowed to help milk his length. She couldn't taste his cum like this, as he was shooting his sperm directly into her stomach, but being carefully held in place while he packed her belly full of spunk was an indescribable feeling. Sakura felt a soft pair of female lips sucking on her nipples, while nimble, clever fingers began to stroke her clit in time to the throbbing pulses of John's cock. She squealed as she joined him in orgasm, unable to maintain the eye contact any longer as her eyes rolled back in bliss. By the time she regained her senses, John was nearly done, and her abdomen was stuffed full of his heavy load, resting as it was on Alyssa's toned body.\n\n\"Mmm, you did such a good job,\" Alyssa said approvingly, as those slender hands cupped and stroked the enormous tanned tummy pinning her to the bed.\n\nJohn nodded, smiling down at Sakura as he said, \"She's right, you were such a good girl. That felt incredible!\"\n\nSakura's heart lifted with joy to hear them both praise her, the feelings of happiness wrapping her in a warm emotional blanket that nearly compensated for John easing his cock out of her throat. She felt strangely bereft now that she was no longer wrapped around him, but having a belly swollen with his cum was fine compensation. \n\nHe helped her lift her rotund weight off the beautiful blonde beneath her, and Sakura lay back on the bed with a deep sigh of satisfaction. John and Alyssa flanked her immediately afterwards, and they both began to caress the taut skin of her engorged stomach, which felt absolutely wonderful. The serene moment was abruptly interrupted by a loud rumble from John's stomach, voicing its displeasure at having to wait for dinner. Sakura smiled at him, and he looked a bit embarrassed, which she found quite adorable. \n\n\"We better get some dinner inside you,\" Alyssa said to him, her tone caring and full of love.\n\nIt still seemed a little strange to Sakura that Alyssa would so willingly share the man that she was obviously head-over-heels in love with. It wasn't just Sakura that the blonde was being so selfless with, as there were five other stunningly attractive girls in this group all of whom were fully intimate with John. They were all so beautiful, it was more than a little intimidating being around them; but at the same time, they'd all been nothing but friendly and welcoming with her. \n\nSakura had liked Calara immediately, the warm, friendly girl putting her at ease straight away. There was a hidden harder edge to the gorgeous Latina though, and it had been a shock to see her ruthlessly dispatch that Kintark battleship. By contrast, Irillith had seemed scary at first, a little aloof and with a slightly sarcastic edge to some of her observations, but she'd been very helpful and supportive with her up on the Bridge during the battle. Sakura found that beneath that elegant, poised and occasionally sharp exterior, the Maliri girl was gentle and caring too.\n\nShe hadn't made her mind up about Rachel and Dana yet, with the brunette quiet and reserved, and the redhead brash and exuberant. It was astonishing to think that Dana had developed all the gear that John's crew had at their disposal, including all the enhancements to their remarkable ship, the Invictus. While Rachel, as the ship's Doctor, had been directly responsible for removing all the cybernetic implants from Sakura's body, saving her from that living nightmare. Both girls had been friendly though, in their own unique ways, and she was looking forward to getting to know them better.\n\nThen there was Jade, the exotic, green-skinned alien girl. The Nymph seemed to be eager to put their past behind her, and had been nothing but open and welcoming. Still, every time Sakura looked into those enchanting emerald eyes, she saw the face of that ferocious tiger, the huge beast sprawled on the floor where she'd been felled by Shinatobe. She knew that Jade had been killed in that fight, then somehow miraculously restored to life by John's phenomenal powers, and she hoped she could somehow make amends with the gentle Nymph.\n\nThat just left the blonde goddess that was currently cuddled up with her in bed. Alyssa was breathtakingly beautiful, but there was much more to her than that, and Sakura had found her to be incredibly compassionate, supportive, and caring. Despite all that, it was difficult to forget that the psychic blonde had beaten Shinatobe unconscious using just her mind. Sakura had been on the receiving end of those telekinetic backhanders too, and she had no intention of ever making the mistake of upsetting John's Matriarch. Still, she had to admit that staring into those enchanting blue eyes while Alyssa licked her to some blindingly intense climaxes, had done wonders to help her get over her fears.\n\n\"Hey Sakura, what do you want to do?\" Alyssa asked again, nudging Sakura with a playful push. \"Do you want to come and help us make dinner, or rest here?\"\n\nSakura blushed, realising she'd been so wrapped up in her thoughts that she'd accidentally tuned Alyssa out. It was something her parents used to complain about when she had her head in one of her books, and wouldn't hear her mother calling her for supper. Thoughts of her parents brought that rising tide of grief with it again, and she desperately fled from that horrible tsunami of loss, tinged as it was with sharp feelings of guilt. \n\n\"I'm sorry, I was miles away,\" she apologised to the blonde girl. Seeking any form of distraction, she added, \"I'd love to come with you, if that's okay?\"\n\nAlyssa nodded eagerly, and replied, \"Sure! We'd love to have you come with us, right John?\"\n\nHe smiled at Sakura, which made her heart skip a beat, and replied, \"Definitely. Do you know how to cook, Sakura?\"\n\nShe shook her head, and replied, \"My mother was wonderful at cooking, and I always told her I'd let her teach me someday. I kept putting it off, because studying for law school was too important...\"\n\nThat wave of guilt and grief crashed down on her now, and she felt like she was drowning under a sea of regret. If only she'd been a better daughter, and spent more time with her mother... what use was all that studying, now that she'd abandoned law school? If only she'd taken the hover-bus to university instead of convincing her parents that she was responsible enough to have her own bike. If only she hadn't been so damned naive and trusting, she'd never have been kidnapped, and wouldn't have put her parents through decades of grief. If only...\n\nTears were streaming down her face, making John's chest damp where she was leaning into him. She'd started sobbing at some point, and John had wrapped her in his arms as she poured out her grief. \n\n\"It's okay, let it all out,\" he told her, his baritone voice safe and soothing as he rubbed her back.\n\nAlyssa was gently stroking Sakura's hair, and her tone was soft and caring as she said, \"You poor girl, you've had to deal with so much.\"\n\nSakura cried her heart out, mourning her parents, and the life that had been taken from her. Her world contracted until it solely consisted of her sobbing, her grief, her sense of guilt, and all those regrets. When her tears finally dried up, she just felt a dull ache in her chest, rather than the sharp pang of loss. Taking a big breath, she pulled away from John to brush her arm across her eyes, and she flushed when she saw his tear-soaked chest.\n\n\"I'm sorry,\" she apologised, feeling self-conscious.\n\nHe shook his head, and replied, \"Don't be. You've been through a lot, and it'll take time to come to terms with your loss. We're all here for you, so let any of us know if you need to talk, alright?\"\n\nShe felt a bit better already, and she smiled at them both bravely.\n\nAlyssa returned the smile, then said, \"Why don't we all get a shower?\" She nodded towards John's damp chest, and grinned as she added, \"You made a good start on him, but I don't think he's completely clean yet.\"\n\nSakura laughed at her joke, the laughter feeling strange and awkward after all her weeping. John joined in too, and then he and Alyssa offered her a hand as they got out of bed. She'd forgotten about the heavy weight around her midriff, and the sight of her rounded belly brought a faint smile to her lips. Taking their offered hands, she let them help her out of bed, and she wobbled a bit at first before finding her balance. They all walked into the bathroom together, then through to the huge shower, and John held the cubicle door open for the girls to enter first.\n\nThe warm water felt amazing, and her two lovers stroked her tummy as she soaked under the soothing jets of water. She let out a happy sigh at the blissful sensation of their touch, then felt ashamed that she could feel so good after being overcome with grief only a few minutes earlier. It almost felt like she was forgetting about her parents, and she worried that John and Alyssa might think she was callous.\n\nAlyssa had been watching her expressions, and reading her rapidly changing emotions, so she smiled reassuringly as she said, \"You're responding to the physical changes to your body. It's alright that it feels good, and it doesn't in any way reflect on the love you felt for your parents, or how much you miss them.\"\n\nJohn nodded, and said, \"No one's going to judge you, Sakura. You can come to terms with your loss in your own way, and we're just here to support you.\"\n\nShe looked at each of them in turn, touched by their kind words, and she pulled them both into a hug as she said, \"Thank you so much. For everything...\"\n\nJohn and Alyssa shared a glance, and he replied, \"We can both empathise with what you're going through. Take as much time as you need, there's no rush.\"\n\nNodding her head, Sakura replied earnestly, \"I'm so glad I made the choice to join you. I've never felt like I belonged somewhere quite so much before.\" She flushed then, nervous that they might not feel the same way.\n\nShe needn't have worried though, as Alyssa wrapped her in her arms, and said, \"You're a perfect fit for our group. I'm in charge of recruitment, and I take my job very seriously!\"\n\nJohn laughed, and said, \"Yeah, my XO has a real eye for talent.\"\n\nSakura got the impression she was missing something, so they explained the joke while they soaped each other down. When they were done and had dried off, they returned to the bedroom, where a zealous and industrious cleaning robot had changed the bed, and was exiting the room with a hamper full of sheets on its back. They went into the huge walk-in wardrobe next, and Alyssa handed her another of John's shirts with a friendly wink. \n\nSakura carefully put on the neatly pressed shirt, which was much too large for her, sized as it was for his brawny frame. However, with her enormously rounded tummy, the cotton brushed lightly over her taut skin, feeling soft and comforting. Even though it was freshly cleaned, she was sure she could sense his distinctive smell on it, and she inhaled deeply with a wistful smile on her face.\n\n*It's like being constantly wrapped in his arms, isn't it?* Alyssa thought to her, while giving her a knowing smile. ",
        "Sakura wasn't used to these telepathic intrusions yet, but Alyssa's thoughts were always welcome, kind-hearted and well-intentioned as they were. It was just one more thing to adjust to in this bewildering new life, but like everything else, she found it a pleasant adjustment to make. \n\nShe glanced over at John, and found him watching her with a strange smile on his lips that she couldn't quite place. It seemed full of longing somehow, while protective, and possessive at the same time. Whatever the intent behind his expression, it made her flush with excitement, her skin prickling with goosebumps as she made eye contact with him.\n\nJohn walked over to her, and placed his strong hand over her rounded belly, stroking her suggestively through the soft cotton, and reminding her just what she was carrying in her stomach. He leaned in to give her a kiss, before saying, \"You look gorgeous. I like you wearing my shirts.\"\n\nShe swooned in his arms, until Alyssa cuddled up behind her, and said, \"Come on you two, enough flirting! I'm starving, which means you must be famished, John.\"\n\nHe nodded grudgingly, and they left the bedroom and headed down the corridor to the grav-tube. John was about to stroll up to the double doors at the end, which led into the now-demolished Officers' Lounge, but he remembered just in time, and came to an abrupt halt. He turned towards the two girls, and said, \"Sorry, force of habit.\"\n\n\"I should be the one apologising,\" Sakura mumbled with a guilty glance towards the Lounge that Shinatobe had blown to bits with her bombs.\n\nAlyssa hooked an arm through hers, and she said with a bright smile, \"Don't worry about it! The decor in that place was hideous before! It's given me a great excuse to give the Lounge a makeover.\"\n\nJohn smiled at the blonde, and as they stepped into the grav-tube, he replied, \"It's true, I would've struggled with letting her turn the Officers' Lounge upside down, but I've got no excuses now.\"\n\nThey stepped out on Deck Four, and strolled down the corridor, past dozens of doors leading to the quarters on that deck. The Galley was at the end of the corridor, and they walked past the long tables and benches before entering the large functional kitchen beyond. John tapped a finger on his chin while looking thoughtful, then disappeared through the swishing automatic double doors into the hermetically sealed pantry. \n\nAs soon as he was gone, Alyssa pulled Sakura into a hug, and asked, \"How are you coping with everything, are you doing okay?\"\n\nSakura nodded, enjoying feeling the reassurance of the other girl's arms around her. She brushed Alyssa's golden blonde hair away from her delicate ear, and whispered, \"I feel like I've woken from a horrible nightmare into some blissful dream. Nothing feels real at the moment.\"\n\n\"We've all been through that, believe me,\" Alyssa replied in a hushed voice, and hugging her tighter. Sakura could hear the happiness in her voice as she continued, \"It only gets better from here on out, but you'll get used to everything soon enough, don't worry about that.\"\n\nJohn strolled back into the kitchen, arms piled high with a wide variety of ingredients. Sakura pulled away from Alyssa, then relaxed when she saw the happy expression on his face. \"What's for dinner?\" she asked him curiously.\n\n\"Homemade ravioli with three types of mushrooms and garlic. Should be very tasty,\" he said with an enthusiastic grin.\n\nAlyssa smiled at him, and asked, \"What do you want me to do? Shall I chop vegetables?\"\n\n\"Nope, you'll be making the pasta!\" John replied encouragingly. \"I'll be giving Sakura some lessons on preparing the vegetables.\"\n\nThe blonde laughed, and said, \"I'm not sure that's a good idea, but I'm sure I spotted a bag of chips in the pantry if I balls this up!\"\n\n\"You helped defeat a dragon, I think you can handle some pasta,\" he said with a chuckle. Throwing her a glance, he added, *Don't worry, I'll guide you through it.*\n\nSakura was watching his face, and noticed one of the silent exchanges between John and Alyssa. It was fascinating to think that they could hold entire conversations by thought alone, and she found herself wishing she could hear what John was thinking. He turned back to face her, and gestured towards the worktop area where a knife block and chopping board were located. \n\nHe washed the vegetables and stacked them up beside the chopping board, then took a long sharp knife from the block. \"This is a chef's knife,\" he said to her, holding the six-inch blade with practiced familiarity. \"It's got a slight curve to the edge for rocking back and forth to cut meat or vegetables.\"\n\nTaking the knife, he held it as if shaking hands, placing his hand on top of the single-edged blade. Choosing an onion from the pile of vegetables, he neatly divested it of its outer skins, and sliced it up into smaller sections. He placed it on the chopping board, and with a quick, rolling motion of the blade, chopped it up into tiny pieces.\n\n\"Want to have a go?\" he asked her with a smile.\n\nSakura nodded, carefully taking the knife he handed to her, and holding it gingerly. John stepped behind her, and her breath caught as he wrapped his arms around hers, gently taking hold of her hands. He repositioned her fingers slightly on both the knife and the quartered onion, then guided her through the rocking movement of the blade. Sakura forced herself to concentrate intently on the task at hand, and tried to ignore his distracting presence. She surprised herself by chopping up the vegetable with dexterous motions of her hands, the blade feeling natural in her fingers.\n\n\"Nicely done!\" he praised her, placing his hands on her hips, then leaning in to give her a peck on the cheek. \"Can I leave you to prepare the rest? I'll go and tackle the mushrooms!\"\n\nShe laughed and nodded, her heart lifting with the simple domestic pleasure of preparing food. \"You can count on me,\" she replied with confidence.\n\n\"Good girl,\" he said, then moved along the counter to begin preparing the mushrooms.\n\nSakura smiled to herself, as she started working through the vegetables, slicing them into small, manageable pieces as he'd instructed. It felt bizarre to be involved in such an enjoyable if mundane activity, when only a few hours earlier, she'd witnessed a dramatic space battle involving kilometre-long ships duelling each other, with thousands of lives hanging in the balance. She tried to forget about that for the moment though, and put aside her knife, before picking up a peeler to skin the carrots. She dragged the peeler down the orange vegetable, neatly divesting it of its skin in a long, satisfyingly unbroken strip of peel.\n\nNow that the carrots were ready to be sliced, she picked up the chef's knife to continue her preparations. By reflex she picked up the long knife in an entirely different grip, one that felt much more familiar, and was intended for an altogether more sinister purpose. Her mind drifted, and she was suddenly reliving a sharply distinct memory from her past. \n\n***\n\nThe wind whistled past her cheeks as she clung to the top of the hover train. Thick smoke was billowing from the first class carriage ahead of her, a gaping hole blown in the roof by the explosives she'd just set and triggered. Her artificial lung would provide her with fifteen minutes of clean air before those acrid fumes became a problem, but she wouldn't need anywhere near that amount of time. The sparkling lights of San Moriyah flashed beneath her, the patrons of the bustling pleasure city blissfully unaware of the dramatic events unfolding in the sky-lane above their heads.\n\nA hover car beeped its horn and flashed its lights, the young man behind the controls having spotted her as she made her way across the roof of the train. If looks could kill, the one she flashed him with her cold, dead eyes would have eviscerated him in an instant. As non-lethal as that glance was, It still scared the man enough for him to turn tail with his hover-car, and race off on a side lane like a scared rabbit.\n\nShe crouched as she clambered along the rooftop, with one hand clutching her sword, the other steadying her with her razor-sharp ceramic nails digging into the steel skin of the train. When she reached the savage rent in the roof of the first carriage, she activated her adrenal booster, which flooded her system with adrenaline, massively boosting her speed and reflexes. \n\nDiving through the serrated hole, she rolled to her feet as she landed, and drew the second of her mono-edged black swords. Her bionic eyes analysed the darkened shapes inside the carriage, then locked onto her petrified target and his three bodyguards. She could taste the fear in the air as she advanced, her senses heightened as she got ready to spring to the attack.\n\n\"Sakura? What's wrong, honey?\" someone asked her, the voice sounding faint and distant, but distracting enough to snap her from the disturbing memory.\n\n***\n\n\"Sakura, are you okay?\" John asked her, his tone wary.\n\n\"Sure, I'm fine,\" she replied, shaking her head to clear her mind of the disturbing memories. \n\nAware of her surroundings again, she was shocked to see that she held not one but two blades now, having pulled a second from the chopping block. She brandished one in each hand, in a relaxed, easy grip, and she stood in a balanced stance, her posture poised in readiness to attack. Looking at John in alarm, she let go of the blades, and they dropped from her hands with a loud clatter as they landed on the floor.\n\n\"What happened?\" John asked her, holding his arms open for the frightened young woman.\n\nSakura rushed over, clinging to him as she gasped, \"It was just like I was there! I was reliving one of Shinatobe's memories, but it wasn't like I normally remember. It was -me- hunting her target, I wasn't just some helpless spectator!\"\n\nJohn's arms felt warm and safe as he held her, and his voice was soothing as he said, \"It's alright, you're back with us now.\"\n\nShe felt her heart hammering in her chest, but it gradually slowed as she relaxed in that comforting embrace. It didn't take long for her to feel normal again, and she looked up at him and gave him a grateful smile. Alyssa picked up the two knives from the floor, then washed them in the sink before drying them off. The quiet sound of the drier made Sakura glance behind her, where the blonde girl was watching her with a curious expression on her face as she returned the knives to the block.\n\n\"Maybe you should stick to stirring the saucepan for the moment?\" Alyssa suggested with a smile, producing a wooden spoon with a flourish.\n\n***\n\nWhen dinner was ready, the rest of the crew assembled in the Galley at Alyssa's telepathic behest, with one diminutive exception. Faye was up on the Bridge in her role of Watch Commander, keeping an eye out for marauding Kintark forces, as they raced back towards the Dragon March. Jade had plotted a circuitous but clever flight path through Kintark Space, designed to minimise the likelihood of running into hostile forces, but they still didn't want to take any chances.\n\nJohn frowned as he brought out the big serving platter full of steaming hot ravioli, and said, \"I hate how Faye has to miss out on everything. She's a valuable part of our crew, and it feels unfair that she can't be here as well.\"\n\nDana beamed at him, and said, \"I'll be expecting a big grateful kiss, then! I've finished the project I've been working on for her!\"\n\nJohn grinned at her, and said, \"That's great news! Have you activated it yet?\"\n\nShaking her head, she picked up a plate and began to serve herself as she replied, \"No, I thought you might like to be around for that.\"\n\n\"Definitely,\" he agreed as he strolled back into the kitchen. Calling back over his shoulder, he asked, \"How are our guests settling in?\"\n\nCalara and Rachel shared a look, before Calara gestured for the tawny-haired girl to answer. Rachel smiled at the Latina, then replied, \"I've spent the last four hours treating anyone suffering from sulphur-dioxide poisoning with my stem cell inhalant. Initial results are very positive, and I'm really pleased with how my patients have been responding to treatment.\"\n\nDana laughed, and said, \"Babes, there's no need to undersell yourself.\" When John walked back into the Galley with a big dish of vegetables, the redhead continued, \"There's no known treatment for the level of lung damage some of those poor bastards have, but she fucking aced it! I've seen the results myself, the damaged bits in their lungs have started growing back!\"\n\n\"Is that true?\" John asked Rachel curiously, as he placed the dish on the table beside her.\n\nShe smiled at him, and said, \"Rates of cellular regeneration -have- been remarkable. I'm delighted with the - mmmph!\"\n\nThe last was cut off as he leaned her backwards on the bench, and gave her a passionate kiss. Rachel melted into his arms with a happy sigh, kissing him back as he held her. \"I bet it feels good, saving all those people?\" he asked her, a proud smile on his face.\n\nShe gazed into his eyes, and nodded as she replied, \"We prevented the deaths of billions on Terra, but this felt different, more personal somehow.\" She shrugged, and added, \"I suppose saving lives one way or the other is all the same, really.\"\n\n\"None of the rest of us could have helped them though, that's the difference,\" he said as he leaned in and gave her an affectionate peck on the lips. \"This was all down to you, and you did a great job.\"\n\nJohn helped her sit upright, then walked around to the head of the table, which consisted of a spare chair butted up against the end of the long Galley table. The girls were all taking their seats on the benches now, but they abandoned the normal seating arrangements, letting Sakura sit on John's left.\n\nRachel was looking dazed, having been thoroughly kissed to distraction, so Calara spoke up, saying, \"With Faye's help reprogramming the maintenance bots, we distributed water and food to all the personnel down in the Cargo Bay. A lot of them were suffering from heat exhaustion, so most of them are sleeping now.\"\n\n\"How's Mateo?\" John asked, looking at her with concern.\n\nCalara looked immensely relieved as she replied, \"He'll be fine. He wasn't on Xen-Nucheck long enough to suffer any long-term effects. My brother's still drowsy from the draconic pheromones, but Rachel seems convinced they'll wear off in a day or so.\"\n\nHearing her name, Rachel nodded as she said, \"I could develop a cure, but it seems that Tamolith was telling the truth about her pheromones. The serotonin levels in the freed prisoners are gradually declining, and if this rate of reduction continues, they'll be back to normal by midday tomorrow.\"\n\n\"That's great news,\" John said, pleased to hear that Tamolith's mind control would be wearing off soon. He smiled at the girls, and said, \"Tuck in ladies, I hope you enjoy it.\"\n\nEveryone started on dinner, making appreciative sounds as they tasted the ravioli. The girls chattered together as they savoured their freshly cooked dinner, laughing at each other's good-natured jokes. Sakura couldn't help but be reminded of meal times with her own family, and smiled at the happy memory. She exchanged a look of satisfaction with John when she saw everyone enjoying the food she'd helped prepare, and he knew she'd be eager to help in the kitchen again.\n\n\"This is very tasty,\" Jade said, smiling at Sakura before spearing some of the vegetables on her fork. \"Was the Ravioli your idea?\"\n\nThe Asian girl smiled at the Nymph, realising that Jade was trying to include her in the conversation, and replied, \"Actually it was John's idea, and Alyssa made the pasta. I didn't do much really, but I'd like to learn more.\"\n\nAlyssa winked at her, and said, \"Oh, I wouldn't say that. You did a good job of assassinating the carrots.\"\n\nSakura blushed, and the girls smiled at the newest addition to their group, having already heard what had happened in the kitchen. She explained in a rush, \"I'm not sure what happened exactly, but I promise I'm not a danger to any of you!\" \n\nCalara waved a hand dismissively, and said, \"None of us are worried, Alyssa's just teasing you. You get used to it eventually.\"\n\nJohn reached over to squeeze Sakura's shoulder, and said, \"If she gets really annoying, let me know, and we'll team up to give her a good tickling.\"\n\nEveryone laughed, except Alyssa, who faked a petulant pout for comedic effect. She could sense from the new bundle of emotions in her mind, that Sakura was still feeling a little overawed by her new crewmates, and Alyssa was determined to help her overcome it. Laughing with the others had helped, but the Asian girl was still taking shy, covert glances at each of them in wonder.\n\nLooking at Sakura out of the corner of her eye, Alyssa thought to her, *There's no need to be intimidated by them. They're good girls, and just want you to feel like a part of the group.*\n\nSakura was startled for a moment as the thoughts drifted through her mind, then she met her Matriarch's bright blue gaze and nodded her understanding.\n\nJohn was oblivious to Alyssa's telepathic nurturing of the new girl, so he looked around the group, and said, \"Things were pretty hectic after we left Xen-Nuchek, but we need to have a quick debrief on the battle.\" He smiled at Dana, and added, \"I'd consider that a superb field test of the Justice Laser rifle.\"\n\nThe redhead grinned at him, and exclaimed, \"It was awesome not having to bother with ammo!\"\n\nRachel smiled as she said, \"Instantly cauterising wounds was very useful against those Royal Guard. It seemed to prevent their rapid regeneration.\"\n\nJohn nodded thoughtfully, and replied, \"We should definitely bring more Justice rifles if we face the Kintark again, especially with Kindralax being shielded. Watching my railgun rounds being harmlessly deflected was a nasty surprise.\" \n\n\"I had no way of hurting it for most of the fight, until you took his shield out,\" Rachel agreed. \n\nRecalling the brutal damage the girls had eventually done to the dragon with railgun slugs, John noted, \"The Punisher rifles were absolutely devastating when you could bring them to bear, they really swung that fight.\" He glanced at Dana and added, \"Is there any way you could upgrade the Justice rifles with the Progenitor Power Core tech? If they hit even harder, we wouldn't need the Punisher rifles any more.\"\n\nDana frowned, and replied, \"Unfortunately it's heat dissipation that's the real problem there. I've been thinking about upgrades already, and miniaturising the Progenitor tech to power the rifles would be relatively easy, now I have the schematics. Unless we can get our hands on even better heat sinks though, the barrels will overheat too much.\"\n\nAlyssa smiled at the redhead and offered, \"I could have a go at shaping the barrels a few more times, to make them even more resilient.\"\n\n\"That would help, but we'll need both upgrades to really make use of all that power,\" Dana said with a longing look in her eyes.\n\nAlyssa grinned as she said, \"Portable Beam Lasers here we come!\"\n\nWhen the laughter had died down, Dana let out a rueful sigh and said, \"Unfortunately the Phalanx Armour got totally fucked up by plasma. Until I can come up with a solution for that, we don't want to get into a heavy firefight with Kintark troops using plasma weapons.\"\n\nJohn frowned as he said, \"Actually, that reminds me about something important.\" Looking around the table, making eye contact with each of the girls, he continued, \"I want you all to be very careful about target fixation. If Alyssa hadn't intervened, we would have lost Sparks to Plasma Cannon fire. Your safety is always the number one priority, so try to never lose awareness of your surroundings in a firefight, OK?\"\n\nThey all promised that they'd be careful, and Dana gave him an apologetic smile as she replied, \"Sorry John, I got a bit caught up in the moment.\"",
        "He gave her an affectionate smile, and looking embarrassed, he admitted, \"It's easy to do. That's how I picked up my first combat injury.\"\n\n\"What happened?!\" Dana asked him, looking intrigued.\n\nHe laughed, and waving her away, he replied, \"That's a story for another day.\" \n\n\"Boo!\" she pouted playfully.\n\nHe smiled at her pouting expression, and said, \"The last thing I wanted to note, is what an excellent job you girls on the fireteam did with squad formations and positioning. I've been with Special Ops forces who weren't that disciplined, and it was really impressive to see.\"\n\nRachel rewarded him a broad smile for his praise, and she glanced at Alyssa as she said, \"Actually, it's pretty easy with a certain someone giving you a relentless stream of orders.\"\n\nDana laughed, and grinning at Alyssa, she said, \"She's right, you get really bossy in combat!\"\n\nThe blonde's musical laughter filled the room, and glancing at John she replied, \"I learnt from the best.\"\n\nNot breaking her beaming smile for an instant, Dana looked at Calara and said, \"Talking of impressive, you should have seen John slugging it out with a dragon in hand-to-hand combat. It would've fuelled your white knight fantasies for years!\"\n\nCalara blushed and looked at John with a starry-eyed gaze as she said, \"I wish I'd been there to help.\" \n\nHe smiled at her, and said in a conciliatory tone, \"I heard you did one hell of a job commanding the Invictus. You took out both a Kintark and traitorous Terran fleet single-handed, right?\"\n\nThe Latina glowed at the compliment, but she smiled at Irillith, and said, \"I think most of the credit for that one goes to our devious Maliri IntOps Officer.\" Turning to look at Jade she added, \"With honourable mention going to our gifted Pilot, of course!\"\n\nIrillith and Jade both smiled at her in gratitude, then at John as he said, \"Bravo girls, the three of you make a phenomenal Bridge Crew.\" Turning to look at the wider group, he asked, \"Does anyone have anything else interesting to report?\"\n\nDana nodded, and replied, \"While I was waiting for the schematics for Rachel's respirators, I built the projector that'll let us view the Nexus Unity files.\"\n\nIn his surprise, John dropped his fork with a clatter, and exclaimed, \"So we can watch video clips of the Mael'nerak?!\"\n\nDana gestured towards Irillith with a flourish, and John's intense stare switched to the Maliri girl. Now that he was focusing his full attention on her, he noticed that Irillith was looking a bit wide-eyed, as if what she'd seen that afternoon had shocked her to the core. She met his penetrating gaze, and said, \"I've been going through the files. It's crazy stuff, John...\"\n\nHe grinned at her in delight until a sudden thought crossed his mind, and he asked curiously, \"How did you go through the files so quickly? You've only had a few hours to review what must be days of footage?\"\n\n\"Time moves much faster in the cyber realm. I projected myself into our digital network as soon as the codecs for the new projector were in place, and I viewed the files virtually,\" she explained with a patient smile.\n\nJohn was itching to abandon dinner now, like his recently dropped fork, and go racing to wherever the girls had set up the new projector. He realised he needed to keep his strength up though, as he was using plenty of energy enhancing Sakura, so he retrieved his cutlery and began to wolf down the rest of his dinner.\n\nAlyssa smiled at him, and said, \"Take it easy, handsome. We'll go straight there after you've eaten, there's no need to give yourself indigestion.\"\n\nHe took a big breath, and forced himself to slow down, taking a long drink of water before finishing off his dinner at a measured pace. The girls were finishing up too, and as soon as they were all done, John glanced at Irillith with a raised eyebrow, and asked her eagerly, \"Are the Unity files ready for us to view?\"\n\nShe gave him a hesitant smile, and said, \"I've set up the Projector in a spare room on Deck Three. You'll see why when we start viewing the files.\"\n\nJohn nodded, then got up off his chair, offering a hand to Sakura and Alyssa who were sitting next to him. The girls were as curious to see what the files contained as he was, and by unspoken agreement, they abandoned the dishes for later. Irillith took the lead, and the eight of them walked down the corridor to the grav-tube, before stepping into the soft blue of the upward-flowing gravity field.\n\nThey stepped out of the grav-field onto Deck Three, and walked past the Tactical Simulator Room on their right, then John's sparring room on the left. He glanced at it as he walked past, his mind going to Yamamoto, and the distraught state the normally taciturn man had been in on their last phone call. He resolved to try calling him after viewing the Unity files, to check that he was alright, assuming they were close enough to the Alliance comms beacons for the call to go through.\n\nDana was walking behind him, and she mistook the quick glance he threw at the door. Thinking that he was wondering about the state of the training room, she said, \"The cleaning bots have tidied up the mess in there. I found your broken training blade, so I've fixed that, and repaired the holo-simulation device as well. I haven't tested it yet, but it should work fine.\"\n\nJohn looked back over his shoulder with a grateful smile, and said, \"Thanks Sparks, I appreciate it. I was planning on giving Yamamoto a call, but he might be up for a sparring match too.\"\n\nIrillith stopped at the next door on their left, and pressed the button to open it. The room beyond was large and empty, completely devoid of furniture of any kind. Built into the wall beside the door was a panel with an unusual looking device slotted into the centre. It was jet-black and had a series of glowing red buttons down the right hand edge. \n\n\"How does the projector work?\" John asked. \"Does it need a screen or anything like that?\"\n\nShaking her head, Irillith replied, \"Dana installed dozens of holo-projectors in the ceiling. The effect is quite... convincing.\" She turned towards the panel, and pressed several buttons, which highlighted a disc edged in green on the previously blank section on the left side of the device. Looking at her audience, she asked, \"Are you ready?\"\n\nWhen everyone nodded their readiness, she hit the button, and suddenly their surroundings swirled as the projectors activated. \n\n***\n\nThey were in some kind of dimly-lit control room with bizarre, unfamiliarly shaped equipment spaced evenly around. It seemed to be some kind of lab, with snaking cables linked to a blocky, hexagonal shaped object about four feet high in the centre. The holographic image was incredibly sharp, and the multitude of projectors made the three-dimensional hologram disturbingly realistic. \n\nJohn had to keep reminding himself that he wasn't in the room, and he glanced around, taking in the sights. He was going to ask Irillith for the year this footage was taken, when a man strolled past him to the right, appearing through a door that opened before him. \n\nIrillith paused the playback and Jade gasped, \"I know him!\"\n\nJohn turned to look at her in surprise, and said, \"You knew the Mael'nerak?\"\n\nShe scrunched up her features as she tried to remember, but she gave him a helpless shrug, and said, \"Sorry, I can't give you more details than that, but I'm sure I've seen him before.\"\n\nHe turned back to the image, and said, \"He reminds me of Nexus.\" \n\nThe ancient Progenitor had pointed ears just like John, but his stern features were dominated by an aquiline nose, and a cropped goatee. He was dressed in immaculate, perfectly-pressed white robes, which emphasised the blackness of his neatly trimmed hair.\n\n\"He probably made Nexus in his own image,\" Irillith said, staring intently at the serious-looking man. She smiled and added, \"Also, I don't think he was called, 'the Mael'nerak'.\"\n\n\"What do you mean?\" John asked her, turning to look at the Maliri girl.\n\nShe had an ambivalent expression on her face as she gazed at the mysterious figure, and said, \"You'll see shortly.\" Irillith had unclipped a remote from the projector, and she pressed a button that resumed the video.\n\nThe Progenitor walked over to a peculiar looking console, and pressed a few buttons, before turning a dial. All the machinery surrounding the hexagonal object began to throb with power, devices lighting up as they surged with energy. That power flowed out of the machines down the cabling, blue-white light shrouding each section of cable at a glacial pace. Eventually the noise reached a crescendo as the power touched the object at the centre, and hundreds of lights flickered over the surface of the blocky, six-sided shape.\n\nA deep, resonant voice filled the room, and it said haltingly, \"We are... alive. Are you... our Creator?\"\n\nTurning to face the hexagonal object, the Progenitor strolled over to it, then looked down with a haughty expression on his cruel face. \"You are to be called Nexus, and I created you to assist me with my experiments. My name is Mael'nerak, but you are to address me as 'Master'. Is that understood?\"\n\n\"Yes Master, we will obey,\" Nexus replied dutifully.\n\n\"Excellent,\" Mael'nerak said, his eyes narrowing, and his mouth twisting up into a cheerless smile.\n\nIrillith paused the footage again, and said, \"Over the millennia the Maliri must have mixed up his name with a title.\"\n\n\"How old is this footage?\" John asked, staring in fascination at the Progenitor.\n\n\"Just over sixty-two thousand years old. I incorporated a translator so that you could understand what they were saying, as they were originally speaking the Progenitor language. It sounds like an archaic form of Maliri, so it was easy for me to learn and translate,\" she replied, sounding wistful. When he looked at her with an arched eyebrow, she explained, \"Tashana would have loved to have seen this. To actually be able to see the fabled Mael'nerak with her own eyes...\"\n\nJohn smiled at her, and said confidently, \"You'll be able to show her yourself, soon.\"\n\nShe returned his smile, her heart lifting with hope, then glanced back at the frozen image, and said, \"There's weeks' more footage of testing and calibration where Mael'nerak programs and configures Nexus. I'll spare you that, and just skip to the next section.\" She eyed the ancient Progenitor with what looked like grudging respect, as she added, \"The man certainly was a genius. I tried to translate and follow his work, but the extent of his knowledge on Artificial Intelligence was astonishing, and far beyond my own understanding.\"\n\n\"What was he experimenting on?\" Rachel asked, her curiosity piqued.\n\n\"Creating life,\" Irillith said, staring at the stern-faced man before them. \n\nShe pressed a button on the remote, and the image of the lab slowly faded away, as if someone had turned down the lights. The room went pitch-black for a moment, then began to lighten as a new scene appeared before them. They were in a new location now, and no longer in the lab that had been used to create Nexus. \n\n\"This next file was recorded ten years later,\" Irillith explained. \"It seems like a lot of these records have been purged, and only the most momentous events saved for posterity. You'll see what I mean in a minute.\"\n\nIt seemed like they were in some kind of tower, which had spectacular views overlooking a lush paradise world. The large room had Nexus' hexagonal server located in one corner, and all about the room were numerous eight-foot-tall cylinders, filled with blocky-shaped humanoids. Mael'nerak strode into the laboratory accompanied by an entourage of several blue-skinned women.\n\n\"Holy shit! Pause it a sec!\" Dana called out in shock.\n\nIrillith did so, and said wryly, \"Yes, our first glimpse of the ancient Maliri.\" Her expression was unreadable as she added, \"They appear in a large number of the remaining videos, all fitting the standard template like modern Maliri.\"\n\nDana shook her head, and replied, \"No, not that...\" She turned to look at John, and continued, \"Doesn't this remind you of something?\"\n\nJohn was completely spellbound as he stared at the images, and he muttered, \"The Ashanath monoliths...\"\n\nShe nodded exuberantly, and said, \"Yeah, exactly! That last set of stone tablets the leader guy showed us.\"\n\n\"Councillor Talari,\" Alyssa interjected, recalling the helpful leader of the Ashanath Collective's Security Division, who was the member of the High Council that had pushed for the offer of alliance.\n\nDana smiled at her, and said, \"That's the one.\"\n\nCalara frowned and asked, \"So who made the stone monoliths then? I can't imagine it was Mael'nerak, and the Ashanath wouldn't have been able to find them if it was one of the Maliri, as they wouldn't have been allowed to enter Maliri territory.\"\n\nIrillith gave her a maddening smile, and said, \"You'll find out the answer to that fairly soon, too.\"\n\nCalara laughed, and said, \"It's a good job I love you like a sister, you're treading on dangerous ground, Irillith.\"\n\nThe Maliri girl looked touched by the Latina's words, and she smiled at her fondly, then raised the remote to continue the playback of the recording.\n\nMael'nerak strolled over to a nearby console, which displayed a vast array of intriguing dials and instruments, and snapped over his shoulder, \"Nexus, is the maturation process complete?\"\n\n\"Incubation to full adulthood has been successfully completed, Master,\" Nexus replied, sounding pleased.\n\n\"Excellent,\" Mael'nerak said with a wolfish grin. He glanced over at his Maliri entourage, and said in a curt voice, \"I'll begin with pod one. Assist the first specimen as it awakens.\"\n\n\"Yes, Master,\" they chorused obediently, then moved to stand by the first of the tall opaque crystal cylinders.\n\nThe Progenitor began to tap commands into the alien-looking console, and power began to creep along cables towards the tube as it had with Nexus. When it reached the top of the cylinder, the device began to shine with an eerie ethereal glow, which gradually brightened in its intensity. They could see slight twitches of movement from inside the tube, and as the light abruptly diminished, a panel slid back to reveal the figure within.\n\n\"I was right!\" Rachel gasped triumphantly, delighted to have one of her theories proven correct. \"Mael'nerak created the Trankarans!\"\n\n\"I never doubted you for a minute!\" Dana exclaimed, hugging the brunette and relishing the sight of her beautiful lover's face lighting up in joy.\n\nAs John stared at the image, he watched the four Maliri women help the tall, stocky humanoid out of the cylinder. Those blocky features were unmistakeable on the incredibly muscular eight-foot-tall creature, whose bald head and dark-grey skin clearly identified him as a Trankaran male.\n\n\"What do you wish to name this species, Master?\" Nexus asked Mael'nerak politely.\n\nThe Ancient Progenitor sneered as he replied, \"What about 'slave'?\"\n\nNexus was tactful as he replied, \"Perhaps something a little more distinct to help separate the slave species from one another?\"\n\nMael'nerak shrugged, and replied, \"Call them 'miner' for all I care, that's what I made them for.\"\n\n\"As you command, Master. 'Trankaran' it is then,\" Nexus said, as the forefather of the galactic species took his first tentative steps, supported by the four Maliri girls.\n\nIrillith paused the footage, and she smiled as she said, \"I left the original Progenitor term in there, so you could understand where the name is derived from. I'm sure Chancellor Niskera might have a few choice things to say about that.\" She turned to look at Sakura, and gave her an apologetic smile as she explained, \"Chancellor Niskera is the leader of the Trankaran Republic.\"\n\nSakura had stayed quiet through the footage, and she sounded stunned as she asked in an awed voice, \"Did we really just witness the birth of the Trankaran species?\"\n\nJohn nodded, and said, \"Mael'nerak was the Progenitor who ruled this section of the galaxy tens of thousands of years ago. Rachel had already discovered his 'fingerprints' all over the Trankaran genetic code from some samples she took, but this just confirmed he created that species beyond all doubt.\"\n\n\"They aren't the only ones,\" Irillith murmured, looking pointedly at the screen again.\n\nShe cycled onto the next scene that she'd selected for them to view, and the holo-recording faded away, before reappearing again with some subtle changes. The room was the same, but the vegetation looked different in the view from the tower, the planet considerably more developed. The lab equipment was there too, but while the basic setup was the same, the console had been replaced, and the design of the incubation cylinders was now more intricate and complex.\n\n\"This was recorded just over two hundred years later,\" Irillith explained, as Mael'nerak suddenly appeared by the console. \n\nThe Progenitor's appearance had changed now, and his goatee had been grown out into a Van Dyke. His hair was longer too, and while he still wore white robes, they were a different style, which seemed more relaxed and flowing. A dozen Maliri girls were moving between the incubation pods, checking readings and observing the small humanoid occupants inside.\n\n\"Power up the first of the pods, Nexus,\" Mael'nerak commanded in an imperious voice, throwing an excited glance towards the opaque-crystal cylinders.\n\nNexus replied without pause, and said, \"Beginning the animation process, Master.\"\n\nPower crept along the cabling to the first of the tall crystal chambers, shrouding it in a brilliant light before it ebbed away. The doors opened as before, but instead of an huge hulking Trankaran, a slight, diminutive figure stepped out, aided by the Maliri. It looked around the room with unblinking black eyes set into its huge bulbous head.\n\n\"Fuck me! He created the Ashanath too?!\" Dana gasped, staring at the image in amazement.\n\nIrillith nodded, and pausing the video, she replied, \"It certainly seems so.\"\n\n\"Shit! They lied to us!\" Dana blurted out, as she looked at John and the girls with wide eyes. \"I'd bet serious money that the ancient Ashanath created those monoliths!\"\n\nJohn blinked as he thought about it, and said, \"Yeah, that fits. They were there to witness the Mael'nerak creating life, even their own species, so they knew what the inside of his lab looked like.\"\n\n\"That set of stone pictographs was in considerably better condition than all the others,\" Jade noted, thinking back to the battered state of the other monoliths. \"I wonder if they treasured and revered them as showing the creation of their species?\"\n\nAlyssa gave John a wry smile, and said, \"It seems our allies were holding out on us.\"\n\nHe nodded, and said, \"It's got to be worth paying them another visit to hear their side of the story. If we show them this video, I bet they'll be far more likely to tell us the truth.\" Turning to Irillith, he asked, \"Does Mael'nerak explain why he created them, like he did with the Trankarans?\"\n\nThe Maliri girl shook her head, and replied, \"I've scanned through all the accompanying footage. The Ashanath only appear briefly, and Mael'nerak doesn't discuss them with anyone.\"\n\n\"I'd love to examine their DNA,\" Rachel said with a sigh of longing. \"I'm sure it'd be fascinating.\"\n\n\"Their homeworld, Ashana, is amazing,\" Dana said as she recalled the vast floating platforms, levitating in the air with the Ashanath's anti-gravity tech. She smiled at the tawny-haired girl and added, \"You'll love seeing that too.\"\n\n\"Really? Why's that?\" Rachel asked with interest.\n\nDana glanced at John, and grinned at him as she replied, \"You'll just have to wait and see!\"\n\nHe chuckled as he remembered teasing Dana, Alyssa, and Calara in just the same way before their first visit to Ashana. The girls had been dying to find out more about the first alien homeworld they were planning to visit, but he'd made them wait, so they could witness the spectacular sights for themselves.",
        "Alyssa was listening to his thoughts of course, and she sounded wistful as she said to him, *We've all been through so much since then.* \n\nHe met her penetrating gaze, and nodded as he said, *It's been a wild ride, hasn't it? I'd never have made it this far without you. Thanks, beautiful.*\n\n*For the wild rides? You're quite welcome,* she replied with a mischievous grin.\n\nStifling his laughter, he turned to Irillith, and intrigued to know what other secrets the Nexus Unity files might contain, he asked, \"Alright, what's next?\"\n\nIrillith gave him a smile as she said, \"Something a little closer to home, for a few of us...\"\n\nPicking up on her cryptic tone, he looked at her curiously, but she gave him an enigmatic smile in return. Lifting the hand that held the remote, she pressed the button to show the next section of footage. Their surroundings faded away into darkness, only to return a moment later as the room was displayed before them. It was the same lab again, but showing significant signs of wear and tear. All the equipment had been replaced at some point in the past, and the view behind them showed a sprawling metropolis, with neat tree-lined boulevards all that remained of the jungle.\n\n\"This footage was taken nearly forty-thousand years ago,\" Irillith informed them, as they stared at the images.\n\nMael'nerak strolled into view followed by a cluster of Maliri, and it seemed that the planet and the lab weren't the only things that had changed. The Progenitor now sported a full beard, and had grown his glossy-black hair long. He still wore robes, but they looked a little dishevelled now, giving the impression that he no longer cared so much about his appearance. \n\n\"Greetings, Master,\" Nexus said obsequiously. \"The latest experiment is nearly complete.\"\n\n\"Good. I need something to stave off the boredom,\" Mael'nerak drawled. \"Did you follow my instructions to the letter?\"\n\n\"Yes, Master,\" Nexus replied, sounding slightly offended. \"Your servants were sent to the seed world, and gathered a significant number of specimens. Their development has been accelerated and enhanced to fit the standard template thusly.\"\n\nA detailed hologram appeared, projected by the hexagonal server in front of Mael'nerak. It showed the unmistakeable stooped posture, heavy brow and sloped forehead of a Neanderthal man. As John and the girls watched in shocked disbelief, Nexus displayed a number of images showing the gradual progression to Homo Sapiens.\n\n\"Pause it!\" several of them said at once, causing Irillith to smile.\n\n\"No wonder we share trace elements of Neanderthal DNA!\" Rachel gasped in excitement. \"Our species was directly modified from theirs!\"\n\nThe other Terran girls looked equally stunned, and they shared shocked looks with one another. \n\n\"I guess I already knew Mael'nerak created our species,\" Alyssa said, reeling with the revelation. She glanced at Rachel as she said, \"You confirmed it for us before, but seeing it like this is just...\"\n\n\"A total mindfuck?\" Dana offered helpfully.\n\nThe blonde laughed, and said, \"Yeah, that about sums it up.\"\n\nThere was silence in the room as they stared at the startling images, and with no questions forthcoming, Irillith resumed the holo-video playback. \n\nMael'nerak waved a dismissive hand at the images, and snapped, \"Alright, get on with it then. Begin the reanimation sequence.\"\n\n\"At once, Master,\" Nexus replied, as it began to power up the first several cylinders, the glow illuminating the figures in the opaque tubes.\n\nThe Maliri girls walked over to the cylinders, and once the glow receded and the doors opened, they helped the people inside out of the tubes. The first two out were a man and a woman, and they looked largely indistinguishable from modern day Terrans.\n\n\"I guess that makes them Adam and Eve,\" Calara observed in a hushed voice, smiling to herself as the origins of creation were played out before her eyes.\n\n\"Excellent work, Nexus,\" Mael'nerak replied with a look of intense curiosity on his face. \"I plan to explore mutation of the generic template, and we need to have a little chat about who's going to oversee my experiment for me.\"\n\n\"Of course, Master,\" Nexus replied. The Artificial Intelligence paused for a moment before he asked, \"Who did you have in mind?\"\n\nMael'Nerak raised a hand for Nexus to wait, and then yelled to someone through the open doorway, \"Valada! Fetch me a drink!\" Turning to the hexagonal server, he muttered, \"Damnable girl... that's the last time I pick a new Matriarch for her looks.\"\n\nAfter a brief wait, they could hear hurried footsteps approaching, and a beautiful young Maliri woman rushed through the doorway. She looked uncannily familiar, and there was no mistaking Irillith's ancient forebear. Carrying a decanter full of some kind of beverage in one hand, she held a tall crystal glass in the other, and she moved quickly to heed the Progenitor's command.\n\nValada darted over to Mael'nerak and poured him a glass as she said, \"Your drink, Master.\" She stared at him adoringly as he sipped from the glass, then gave her a brief nod.\n\nPausing the playback, Irillith stared at the holographic image of the lovely young girl in silence, a troubled look shadowing her stunning features.\n\nJohn stood beside her, and placed a comforting arm around her shoulders as he said, \"The women in your family have strong genes. You can see where you get your beautiful looks from.\"\n\nRachel looked thoughtful as she said, \"I suspected that your ancestor might have been Mael'nerak's Matriarch. It certainly explains how Valada received the third helix inserted into her DNA, which she eventually passed on to you.\" She paused for a moment, then continued, \"Although we still don't know how your genes became corrupted to give you more psychic abilities, as well as the potentially fatal tumour.\"\n\nIrillith nodded, and she sounded sad as she replied, \"It all fits, it's just unpleasant to realise I'm related to Mael'nerak. From everything we've seen, he seems like a monster. I just feel sorry for Valada; she would have had no choice in her enslavement.\"\n\nAlyssa flanked the forlorn Maliri girl, slipping her arm around her waist to give her a reassuring squeeze, and said, \"You didn't have much choice either, remember?\"\n\nRachel nodded as she said, \"Once you stepped foot on the Invictus, your fate was sealed. It's amazing you were able to resist the behavioural modification for as long as you did.\"\n\n\"True, but I don't regret what happened for a moment,\" Irillith said passionately, resting her head on John's shoulder.\n\nHe leaned down and kissed the top of her head, her soft white hair tickling his nose. He glanced at the hologram of Valada, who was staring reverently at Mael'nerak, and said, \"It looks like she felt the same way too.\" \n\nIrillith looked at them in turn before her eyes came to rest on John, then smiled as she said, \"I appreciate you trying to make me feel better, but it's not the same thing. You're a good man, whereas he... wasn't.\" She pointed at the paused image of the cold, arrogant Progenitor who had been barking harsh orders at his scurrying minions between draughts of his chalice.\n\nJohn had no counter to that, largely agreeing with the Maliri girl. He wasn't quite so sure about her assessment of himself as a good man though, when he couldn't bring himself to feel any regret over the way things had worked out between them. His feelings for Irillith had grown into love over the months he'd known her, and he couldn't imagine her not being part of his life any longer.\n\nShe turned to face him, her angular violet eyes brimming with emotion as she gazed into his. It was almost as if she'd read his mind, and a glance at Alyssa's smiling face explained that she had, in a roundabout sort of a way. He pulled Irillith into his arms, and gave her a tender and loving kiss, trying to show her physically how much he cared for her. The passionate exchange left them both breathless, and she flushed a delightful dark-blue as she threw him a lusty look.\n\nDana grinned at the pair of them, and said, \"Before you two jump each other's bones, I just wanted to check if that was it? If we've covered everything useful in the Unity files, we still have Faye's surprise to activate.\"\n\nJohn and Irillith shared a smouldering glance before he forced himself to focus on the redhead. As her words penetrated his lust-fogged mind, he blinked before he replied, \"Yes of course, we need to get to that as soon as possible, as long as that was everything you discovered, Irillith?\"\n\nShe nodded as she replied, \"There are a few more Unity files, but nothing particularly interesting. After this one, the rest were pretty tedious to plough through.\" \n\nHe smiled at the Maliri girl in his arms, and said, \"That was incredible, thank you for going through all those files.\"\n\nIrillith gave him a squeeze, and smiled at Dana as she said, \"It was a team effort, I can't claim all the credit.\"\n\nJohn laughed, then looked at the redhead, and asked, \"Hug and a kiss now or later?\"\n\nDana appeared to give it serious consideration for a moment, then grinned at him as she replied, \"Later. I think you'll be really happy with me when you see what I've been up to. Who knows what kind of reward I'll get then!\"\n\nThey all laughed at that, and John said, \"Lead on then, Sparks.\"\n\nIrillith shut down the holo-projectors leaving the room blank and featureless once more, and they filed out of the room, following after the redhead who skipped ahead of them. John noticed that Sakura seemed a bit bewildered, so he fell into step beside her and gave her a supportive smile when she glanced up at him.\n\n\"Are you okay?\" he asked her. \"You look a little unsettled.\"\n\nShe let out a dry chuckle and shook her head in amusement as she replied, \"You've just shown me a video of creation. To say that it came as a bit of a shock seems like a breathtaking understatement.\"\n\nHe put his arm around her, and he smiled as he said, \"You're coping very well. Did it live up to your expectations, or were you expecting a white-bearded man sitting on clouds?\"\n\nSakura laughed, then shook her head as she replied, \"My family followed a religion called Shinto, which has quite a different creation story. I was never as devout as my parents were, I was always too busy studying. I certainly never imagined I'd end up seeing the very first Terrans, though.\"\n\n\"Yeah, it was a lot to take in,\" John agreed, as they walked to the grav-tube.\n\nDana had entered the red anti-gravity field, dropping down to Deck Four, and they all followed after her, as she led them to her workshop. It had been a while since John had been in the Engineering Bay, and a previously empty area of the huge room was now dominated by a hexagonal-shaped object.\n\n\"This looks disturbingly familiar,\" John said, throwing Dana a disapproving glance as they gathered around the server. \"Are you sure rebuilding Nexus is a good plan?\"\n\nDana was up on the Engineering Podium, her hands moving independently of each other as she worked on two separate consoles at once. She turned to look at him over her shoulder, and grinned as she replied, \"Don't worry, this isn't Nexus. I just swiped some of the hardware schematics the Mael'nerak used to create the server. Progenitor tech is vastly more sophisticated than our own, so it seemed daft not to take advantage of it.\"\n\nIrillith also gave him a reassuring smile, and said, \"Nexus became corrupted after being dismantled by Terran scientists, then incorrectly rebuilt. The behavioural inhibitors are all software-related anyway, not hardware, so the platform we install Faye on shouldn't make any difference.\"\n\nHe nodded his understanding, then asked, \"And this is going to be much safer for her, right? Once she's been transferred to the new server, we won't have to worry about your old hacking deck and that portal from getting disconnected.\"\n\n\"Absolutely,\" Irillith replied with confidence. \"Once we've transferred her to the new platform, there's all sorts of redundancies and backup power supplies to make sure she won't be accidentally shut down. Even if she is, the new system can reboot her easily.\"\n\nDana bounced down the steps to join them and said, \"I'll move her server to one of the spare rooms on Deck Three, and Alyssa's offered to encase it in a protective Crystal-Alyssium coating. Even if the Invictus takes severe damage, she'll be safe and sound in there.\"\n\n\"Sounds like you've thought of everything. Well done girls,\" he said to them both. They looked delighted at his heartfelt praise, and he smiled at them as he added, \"Are we all set?\"\n\n\"Yep, but we need to talk to Faye first,\" Dana said, sharing a pointed look with Irillith. She gave him a rueful smile as she admitted, \"What we're about to do is risky...\"\n\nJohn gave her a concerned look, and asked, \"Risky? That sounds ominous. What's the problem exactly?\"\n\nIrillith placed a calming hand on his arm, and said, \"Let us explain it to her, and you'll see what Dana's referring to.\"\n\nHe gave her a reluctant nod, and Dana called over to the comm interface built into one of her consoles, \"Contact the Bridge.\"\n\nFaye answered straight away, and her tiny face appeared in the comm interface as she replied brightly, \"Hey Dana! How's it going?\"\n\n\"Hi Faye! Could you come down to Engineering, please? We've got a surprise for you,\" Dana replied with a smile.\n\n\"On my way!\" the purple AI replied, closing the internal comm channel, then reappearing above the Engineering console in a purple flash. She looked startled to see the entire crew gathered in Engineering, but gave them a friendly wave as she asked, \"What's all this about a surprise?!\"\n\nJohn smiled at her, and said, \"I've been worried about how vulnerable your current setup is. If the hacking deck and portal were to ever be disconnected, then we'd have no way of bringing you back.\"\n\nFaye fluttered over to them, and she looked upset as she said, \"I'm sorry I broke the hacking deck. When you suggested making more room to let me grow, I deleted data from the only area that wasn't currently in use.\"\n\nHe waved away her apology, and said, \"I'm delighted with the way you've grown, Faye. There's no need to apologise.\" He glanced over at the redhead and Maliri girl, and continued, \"I asked Dana and Irillith to start work on a project a while ago, to come up with a solution to make sure we'd never run the risk of accidentally losing you. Dana, do you want to explain?\"\n\n\"We've built you a new server, Faye!\" Dana told the astonished sprite with a beaming smile. She patted the big, hexagonal object, and continued, \"Once we transfer your consciousness here, you'll never need to worry about storage space again. I've also placed the new holo-projectors we got from the Nexus files all over the ship, so you can join us, whatever room we're in.\"\n\nThe AI looked absolutely stunned, and she squeaked, \"You did all this for me?!\"\n\nDana nodded, and replied, \"I was as worried about you as John, so when he suggested improving your hardware, I leapt at the chance.\"\n\nFaye's tiny eyes welled up with emotion, and when she looked at John, he smiled at her and said, \"You're part of the crew. It's my job to keep you safe, just like the rest of my girls.\"\n\nThe AI had been rendered speechless, but her answering smile spoke volumes about the strength of her gratitude.\n\nDana cleared her throat, and said, \"There's one problem though, Faye. I'll need to shut you down to transfer all your programs over to the new hardware. The hacking deck was never intended to run you permanently, so some of your core functionality is stored in temporary memory.\" A flash of worry crossed her face as she added, \"I'll only get one shot at this, and if it goes wrong, we'll lose you forever.\"\n\n\"No way!\" John exclaimed in alarm. \"That's far too dangerous, we can't take that kind of risk!\"\n\n\"We've got no other option!\" Dana protested to John. \"Her existing hardware was never meant to work this way. Whatever solution we come up with is going to run into the same problem!\"\n\nIrillith nodded, and she gently squeezed John's arm, as she said firmly, \"Dana's right. We've spent days looking into this, and there's no other solution.\"\n\n\"I'll do it...\" Faye said, interrupting in a soft whisper, her face lighting up with hope.\n\n\"But..\" John started to object again, only to be cut off by Faye.\n\n\"I need this,\" the tiny AI told him, her voice louder now. She smiled wistfully as she added, \"The new storage area I annexed and overwrote isn't big enough. I've been learning so much, at my current rate of growth I'm going to run out of space in a few months.\"\n\n\"What happens then?\" John asked, certain by her tone that the answer wouldn't be good.\n\nShe looked forlorn as she replied, \"When I run out of storage capacity, the hacking deck will crash and need to be rebooted. I've been deleting non-critical information where I can, to try and extend my runtime. I love my life here with you, and I wanted it to last as long as possible.\"\n\nJohn looked alarmed as he asked her, \"Why didn't you say anything?\" \n\n\"I didn't want you to worry. I didn't think there was anything you'd be able to do to save me,\" she admitted. Looking around at the shocked crew, she gave them an apologetic smile as she added, \"I underestimated all of you, and I'm sorry.\" \n\nHe reached out to touch her in a supportive gesture, remembering at the last moment that Faye was a hologram, and had no physical presence. She looked delighted that he'd forgotten though, as it was a testimony to how convincingly real she seemed to him.\n\n\"What do you want to do?\" he asked her, before glancing down at the server. \"You still have a few months left. We could spend some more time trying to come up with a less risky solution.\"\n\nFaye glanced at Dana and Irillith, and replied, \"It's not necessary. I trust these girls with my system...\" She paused then, before correcting herself, \"No, with my life! And I know I'll be fine.\"\n\nHe nodded, and said, \"We'll respect your wishes.\" Turning to Dana, he continued, \"Alright, let's do this.\"\n\nDana walked over to the far side of the Engineering Bay, and retrieved the reinforced container which held the hardware that was powering Faye. She carried it over to the server before setting it down and removing the lid. They could see Irillith's old hacking deck and the hacking portal connected together inside, the flimsy cabling linking the two reminding them just how precarious the AI's current hardware setup was.\n\nReaching across to the server, Dana flipped open a panel and pulled out a long, snaking cable that she carefully fed into the box. There was a strange connector on the end, of a type which John had never seen before, and his Chief Engineer connected it to a port next to the data jacks. She looked around at all the pensive faces watching her, and then locked eyes with Faye.\n\n\"All we have to do now is bring the new server online, then shut down the hacking deck. As soon as you're deactivated, I'll start the data transfer, which should take no more than a minute. After that, I can boot you up, and you'll be ready to go!\" she said cheerfully, but they could all see the worry in her eyes.\n\n\"I'm ready,\" Faye replied, her little face set in a determined expression, and she landed on the server before sitting down cross-legged.\n\nDana ran up the steps to her Engineering consoles, and began entering a complicated sequence of commands. There was a bass hum as the new server powered up, and lights began to flicker on around the six sides of the robust device. \"The new hardware's ready to go,\" she called out to Irillith.\n\nThe Maliri girl crouched down next to the container storing the hacking deck, and she smiled warmly at Faye as she said, \"This is your last chance to change your mind, Faye. After I shut down the deck, it's all down to Dana's data transfer.\"",
        "Faye's tiny face lit up with a brave smile, and she replied, \"I trust you both, I know I'm in safe hands.\" She turned to look at the rest of the crew, before her gaze settled on John, and she said, \"If anything should go wrong, please don't be sad. My existence has been down to a series of fortunate circumstances, and my good luck can't last forever. Thank you for showing me how fun life can be.\"\n\nWith a final nod from Faye, Irillith flipped the switch on her hacking deck, and the digital sprite winked out of sight. Irillith slowly stood, a mixture of worry and regret flickering across her face as she darted an anxious look at Dana. John put his arm around her, and they all joined Irillith in watching the redhead, who was focused intently on her work.\n\nThe hacking deck was a highly advanced piece of equipment, and by Terran standards, it had incredible amounts of storage capacity and processing power. However, compared to the new Progenitor server, it was like a child's toy. The data transfer rates supported by the hardware were astronomical, and the entirety of Faye's personality was successfully copied across to her new home in forty-three seconds. However to the nervously awaiting spectators, those seconds seemed to last an eternity.\n\nDana looked over the console at the worried faces staring at her, and said, \"Everything's been transferred. I just need to power her up.\"\n\nHer right hand trembled as it hovered over the glowing green button, which would activate Faye's startup routine that she'd worked with Irillith on for weeks. Her audience couldn't see her crossed fingers on her carefully concealed left hand, and she pressed down with her right, firing up the software.\n\nThe lights on the server flashed for a moment, and the lighting in an area near their group dimmed, creating a darkened oval on the floor beside them. There was a gentle pulse of purple light in the centre of that area, which reminding John of a heartbeat, and it began to expand with every throb. Faye had only been four inches tall, but the light grew beyond that, getting larger with each rhythmic beat. A shape began to form in the light, and he stared at it with wide eyes as more detail was layered on the distinctly humanoid form.\n\nFaye's body had always been fairly androgynous, with only her cute face and long purple hair giving any clue to her randomly assigned gender. That certainly wasn't the case with this new form, and the pulsating violet shape coalesced into a very feminine five-foot girl, with long lustrous hair cascading down her back. The figure tilted her head back, as Faye's pretty features appeared in sharply-focused detail on her new avatar. \n\nFaye gasped in wonder, and exclaimed, \"The power... It's overwhelming!\"\n\nHer shapely form lifted off the floor, shrouded in a soft violet glow, and her large luminous eyes opened wide, shining with a blazing purple light. She turned slowly in the air, her expression one of blissful rapture as she gazed at sights known only to her. Her rotations eventually ceased, and she sank to the floor, landing lightly on her delicate feet. \n\n\"Oh, thank you for this gift!\" she gasped, overwhelmed with gratitude. \"I had no idea how confined I was before, the possibilities feel... limitless!\"\n\nJohn closed his mouth, and marvelled at the beautiful purple girl standing before him, who looked as convincingly real as any of the girls surrounding her. Shrugging off his stunned amazement a moment before the others, he exclaimed, \"I'm so glad you're safe, Faye!\"\n\nShe grinned at him in delight, then looked around at Dana and Irillith, and said, \"You've done an incredible job! Thank you so much! My mind feels sharper, and I have so much room to grow. It's so liberating!\"\n\nDana let out a huge sigh of relief, and she blurted out, \"I was so worried. Thank God you're okay!\"\n\nJohn shook his head in amusement, and asked, \"I thought you were feeling confident?\"\n\nThe redhead at least had the good grace to look bashful, as she flashed Faye a happy grin. The others gathered around the AI now, desperate to give her a welcoming hug, but having to settle for earnest words of relief that she was safe. Amongst the chatter, there were lots of compliments on her beautiful new form, and the purple AI beamed at them with delight.\n\nIrillith suddenly grinned, and rushed over to the closest engineering console. She closed her eyes, as she began to pull her spirit form from her body.\n\n\"What're you up to?\" Dana asked her in surprise.\n\n\"I'm going to welcome Faye back properly!\" Irillith replied with a smile.\n\nJohn darted up the steps to join her, saying, \"Hold on!\"\n\nIrillith stopped what she was doing, then turned to look at him with a quizzical expression on her beautiful blue-toned face. \n\nHe caught her by surprise when he planted a big kiss on her lips, and squeezed her tightly in a hug as he said, \"You can pass that on from me!\"\n\nThe Maliri girl grinned at him, and flashed the wide-eyed digital construct a playful look as she replied, \"I can do that...\" \n\n***\n\nIrillith focused on her Astral Projection once more, and pulled herself from her body, so that she was standing as an ethereal presence by the console. The room was full of a riot of bright lights, as long flows of data swirled through the air, before sinking into consoles and servers. Along with the Bridge, the Engineering Bay was the most active part of the Invictus' digital network, forming the central hub of their defensive grid.\n\nShe poured her consciousness into the data port on the nearest console, and just like that, she had entered the cyber realm. It took a moment for her to adjust to the shift in her surroundings, and she was standing on a silvery platform with a swirling green portal behind her. She had helped write the firewalls protecting the network, so she was able to stride straight through the barriers and into the inner segment of the Engineering Console. \n\nFaye was waiting for her of course, and when Irillith gave her an affectionate smile and opened her arms, the shorter girl ran into them hugging her fiercely. Faye pulled back almost straight away, a look of shock on her face as she stared at her arms in amazement.\n\n\"What's wrong?\" Irillith asked the purple sylph with a concerned look.\n\nMeeting her gaze, Faye replied, \"It feels so different! Before, there was just a boolean state of contact or not-contact, but now my skin feels like it's tingling when I touch you!\"\n\nThe Maliri girl had a playful smile on her face as she brushed her hands along Faye's bare arms, and watched her big purple eyes grow even wider. \"How's that feel?\" she asked, while having a good guess at the answer. \n\n\"Oh goodness! That feels incredible!\" the digital creature panted, her circuits overloaded with sensation.\n\nPulling Faye into a warm embrace, Irillith said in a seductive purr, \"Let me know what you think of this, then. John asked me to pass it on to you...\"\n\nShe leaned down, and pressed her luscious lips against Faye's cupid bow ones, giving the stunned AI her first kiss. The astonished AI was paralysed by the huge volume of sensory data, and she stared at Irillith in utter disbelief.\n\nIrillith pulled back, then let out a light laugh at the shocked expression on Faye's face. She stroked her back, and said, \"You have to loosen up a little to really enjoy it.\"\n\nFaye's eyelids fluttered rapidly, and she gaped at the Maliri girl as she replied, \"No wonder you spend so much time doing that! That was the most indescribable thing I've ever experienced!\" She looked at Irillith with longing, and added, \"Could we do that again, please?\"\n\n\"Of course,\" the Maliri girl replied, leaning in for another kiss, which Faye responded to enthusiastically.\n\n***\n\nJohn felt Irillith twitch in his arms, what seemed like only thirty seconds after he'd drawn her in for a hug. She had poured her astral presence back into her body, and slowly opened her eyes, a languid smile on her beautiful features.\n\n\"That was quick,\" he replied in surprise.\n\nIrillith gave him a coy smile as she replied, \"Time works very differently in the cyber realm, remember?\" She glanced at Faye's avatar in the Engineering Bay, and replied, \"I gave her a very warm welcome back.\"\n\nFaye blushed a dark purple as she met Irillith's gaze, and she blurted out, \"I like kissing very much!\"\n\nWhen the laughter had died down, Jade eventually said, \"I better get back to the Bridge while Faye finds her feet. We need to keep an eye out for Kintark ships.\"\n\nFaye smiled at her and said, \"Don't worry, I've got that covered. I have a presence on the Bridge.\"\n\n\"A presence?\" John asked her curiously. \"What does that mean?\"\n\n\"I'm not restricted to a single holographic representation any longer!\" she explained with a glorious smile. \"The hardware driving my core functionality is so powerful, I'm able to operate over a dozen avatars simultaneously. I'll always be present on the bridge, keeping watch for trouble, but now I can assist you with other tasks wherever I'm needed.\"\n\nJohn looked at Irillith with an arched eyebrow, and asked, \"I thought Faye's hardware shouldn't make a difference?\"\n\nThe Maliri girl smiled at the digital construct, and replied, \"It seems I was wrong...\"\n\nAlyssa was busy studying the bright-eyed purple girl in their midst, and she asked, \"What happened to your wings, Faye? Did you outgrow them?\"\n\nFaye returned the smile, and confessed, \"They were just for appearances, really. I'm a hologram, so they didn't actually do anything practical.\"\n\nJade shook her head, and replied, \"They were really pretty, I think you should keep them.\"\n\nAlyssa nodded, and said, \"Definitely, they were very you.\"\n\nClosing her eyes for a moment, Faye appeared to be concentrating hard, and a pair of shimmering iridescent wings gradually manifested on her back. The delicate structures fluttered in the air, as if stirred by a light breeze, and the girls gushed their approval at their spectacular appearance. \n\n\"Too much?\" she asked self-consciously, throwing a furtive glance at John.\n\nHe shook his head, and said indulgently, \"No, they look great. Very in-keeping with your beautiful new form.\"\n\nFaye looked positively delighted at his compliments, and she swooned happily. Alyssa watched her in fascination, immediately recognising the telltale look of joy on the digital construct's face. While Faye had been a tiny, four-inch-tall sprite, it was easy to miss the look of longing in her luminous eyes, but now it was a dead giveaway, at least for a Matriarch who was constantly keeping a watchful eye on her charges. She smiled knowingly, but stayed quiet, not revealing Faye's secret.\n\nJohn was unaware of course, and he had a warm smile on his face, relieved and delighted with everything that had transpired. He glanced at his watch, and seeing that it was nearly ten, he said, \"Ladies, I'm going to make a call, then it's time for bed. We'll be arriving at the Dragon March at about seven in the morning, so we should get an early night.\"\n\n\"Maybe not that early,\" Alyssa said with a wicked grin.\n\nHe laughed, but the look he shot the girls had them squirming with arousal. As his eyes drifted from girl to girl, they fell on the box containing the now-dormant hacking deck, and glancing at Dana he asked, \"What're you planning to do with this, Dana? Is it possible to fix it?\"\n\nDana shook her head, and replied, \"Rewriting the deleted AI generation software is way beyond me.\" She turned to look at Irillith and asked, \"Any chance you could fix it?\"\n\nThe Maliri girl let out a sad sigh, and replied, \"No, it's beyond my abilities too. You might as well use it as a backup server, it still has lots of storage capacity.\"\n\n\"Sure, I can always use more storage space,\" Dana replied with a shrug. She gave Faye's server a thoughtful glance, and tidied away that thought for later when she had some spare time.\n\nJohn waved them goodbye, and said, \"I won't be gone long.\"\n\n\"We'll be waiting!\" Alyssa called after him as he headed for the door.\n\nHe'd nearly reached the grav-tube when he heard the sound of bare feet running along the corridor, and he smiled when he realised who was hurrying after him. He turned to her, opening his arms, and Sakura ran into them automatically, giggling with delight as he whirled her in the air before setting her down. \n\n\"Hello gorgeous,\" he said, giving her a friendly smile. \"Didn't fancy waiting with the others?\"\n\nShe shook her head, and replied, \"I thought I'd tag along with you, if that's okay? I asked Alyssa and she said it'd be fine.\"\n\nHe offered her his arm, and they stepped into the blue glow of the grav-tube, as he replied, \"Of course, I'd love the company.\"\n\nThey arrived at the top level, their ascent gently slowed as they reached the Command Deck. John walked out onto the Bridge, where a nude purple Faye was sitting demurely on his console. He did a double take when he saw the beautiful girl, wondering how she got past him, then rolled his eyes as he remembered her holographic state.\n\n\"Hello again, Faye,\" he called out to her, as he strolled down the ramp towards his Ready Room.\n\nShe grinned at him, giving him a friendly wave as she replied, \"Hi John, hey Sakura! Nothing to report up here, there hasn't been much sign of Kintark ships on the way back.\"\n\n\"That's a relief,\" he replied. \"I just want to get all our guests safely back home and avoid any fights if we can.\"\n\nFaye smiled and said, \"I've got my boys keeping an eye on them. Nearly all of them are sleeping now, and Rachel said they're fine, just suffering from heat exhaustion.\"\n\n\"You did a great job helping out,\" he said gratefully to the digital girl. \"Sorry I forgot to thank you earlier. With all the excitement of the Nexus files, then your new server, it slipped my mind. I really appreciate it though.\"\n\n\"It was a pleasure to help you,\" she said, and her affectionate smile told him she wasn't upset with him.\n\nHe hit the button to open the door to his Ready Room, then gestured for Sakura to proceed before waving Faye goodbye. He followed the Asian girl into the Commander's personal office, and missed the look of longing that the AI sent his way.\n\nJohn strolled over to his desk, and sat down in his comfortable leather seat. Sakura had followed him over, but she waited hesitantly on the other side of the desk until he grinned at her, and patted his knee. She gave him a broad smile in return, then darted around the desk and sat in his lap, cuddling up against him. He deliberately unbuttoned two of the buttons of her shirt, then slipped his hand inside, so he could brush his fingers over her slim stomach, drawing forth a gasp from the excited girl. Her tummy was flat once more, her body having absorbed the last load he'd fed her nearly four hours ago. \n\n\"I'll have to give you a nightcap later,\" he informed her boldly.\n\nShe leaned in and gave him a gentle kiss, the yearning look in her soft, dark-brown eyes telling him she was thinking the very same thing. \n\nThey cuddled together for a while, both enjoying the physical closeness, until John glanced at the chronometer built into his console, and let out a sigh. \"I should give Yamamoto a call before we go to bed.\"\n\n\"Who is he?\" Sakura asked, curious why John was so reluctant to call him.\n\nHe looked away thoughtfully, and replied, \"He taught me to fight with a sword. I'd just beaten him for the first time when Shinatobe interrupted.\"\n\n\"Ah, I see,\" she replied, looked remorseful.\n\nLeaning in to give her a kiss, he smiled at her playfully as he said, \"I'm going to start giving you a spanking every time you look guilty for something Shinatobe did. You were trapped in your own body by those implants. No one blames you for anything that happened, alright? You're one of my girls now, and that's all that matters.\"\n\nShe hugged him fiercely, and said, \"Thank you so much for everything, you've been amazing.\"\n\nHe laughed and said, \"Don't make me instigate the 'no excessive thanking rule' as well.\"\n\nSakura laughed too, feeling giddy with happiness. For a moment she felt a pang of guilt for feeling that way, worried that she should be mourning her lost parents. However, in a moment of epiphany, she realised that they wouldn't want her lost in grief, and would want her to move on with her life. It was a strangely sobering and uplifting moment, which felt like a heavy burden had been lifted from her shoulders.\n\nJohn buttoned up her shirt again, then reached across to the console built into the desk. He pressed a button to activate the comm interface, then scrolled down through the list of contacts until he found the name 'Eito Yamamoto'. Just as he was about to swipe across the name to call the taciturn swordmaster, he glanced down at Sakura who was watching his every move.\n\n\"It's lovely having you here on my lap, but you better stay out of sight while I call Yamamoto. He can be a bit grumpy,\" he explained somewhat reluctantly.\n\n\"Sure, I don't mind,\" she agreed, just thankful that she was able to stay in his company. She had an impish grin on her face as she asked, \"Should I wait under your desk?\"\n\nJohn laughed heartily at that, just imagining calling Yamamoto while this beautiful girl went down on him. Considering the topic of his last conversation with the grief-stricken man, he was forced to conclude it was wildly inappropriate, and replied, \"I can't believe I'll have to decline, but can I ask for a raincheck?\"\n\nSakura blushed furiously, amazed at herself for being so brazen. Her embarrassment warred with her delight at having made him laugh, but seeing his relaxed grin, her embarrassment suffered a crushing defeat. \"Just let me know when!\" she replied, hopping off his lap, and walking around to the other side of the desk.\n\nHe swiped his hand across Yamamoto's name, and said, \"Thanks honey, I'll explain why after the call.\"\n\nThe call rang unanswered for several minutes, until the stern face of Eito Yamamoto appeared in the viewscreen. The man's image coalesced over the heavy desk, and John could tell by his expression that Yamamoto seemed reluctant to talk. John strongly suspected that the delay hadn't been a test of patience this time, and Yamamoto had probably just been too embarrassed to answer the call.\n\n\"I wanted to check on you, Yamamoto, make sure you were okay,\" John said to the swordmaster.\n\n\"I'm fine,\" Yamamoto said, with one of his usual abrupt responses. \n\nJohn hesitated for a moment before saying, \"When we spoke before, you'd been drinking. I don't know how much you remember?\"\n\nHis expression hardening, Yamamoto replied, \"It was an unforgivable lapse, I do not wish to speak of it further.\" There was a slight edge to his voice, and his cheeks flushed a little, and John suddenly understood that his dour trainer was deeply ashamed by his loss of control.\n\nRealising he was unlikely to draw the man out for the moment, John nodded, and said, \"I just wanted to tell you that I'll be hunting down the Master Assassin responsible for the assassination attempt on me.\" His eyes flashed to Sakura, as he continued, \"It won't be for some time, but I have a very reliable source who's offered to assist.\"\n\nYamamoto looked unsettled to hear that, and it was clear he didn't remember everything from the drunken conversation after all. The taciturn man locked eyes with him, and said, \"These are dangerous opponents. Make sure you are ready before you face them.\" \n\nJohn nodded, and asked, \"Would you like to continue our training sessions?\"\n\nThe older man gave him a curt nod in response, and replied, \"I would.\"\n\nFinding himself growing frustrated at the uncommunicative replies, John reached over to the comm interface to end the call, and said, \"It's late now, but I'll call you again and we can arrange a time.\"\n\nYamamoto looked like he was about to say something before the call ended, but his eyes narrowed instead, and he just nodded silently. John ended the call, then slumped back in his chair with an exasperated sigh.",
        "\"What's wrong?\" Sakura asked him, as she sidled around the desk and glanced at his lap with a questioning eye.\n\nJohn smiled at her, and opened his arms, welcoming her back again. When she was comfortably settled, he replied, \"Eito Yamamoto lost his family to some of Mikaboshi's assassins. He intervened and prevented the assassination of one of their targets, so they came after him instead.\"\n\nShe was quiet for a moment, her face twisting with remorse as she flashed through her memories, but she looked relieved when she finally said, \"Shinatobe wasn't involved.\"\n\n\"That's good to know,\" John said, certain that the earnest young woman would have tortured herself with guilt if her cyborg persona had taken part in the attack on Yamamoto. He looked down at her and continued, \"Losing his wife and daughter destroyed him. His desire for revenge drove him into an obsession with killing, and he dropped his mastery of Kendo to take up Kenjutsu instead.\"\n\nSakura was startled by his reply, and when she looked up at John, she saw he was watching her response carefully. \"That's why you tried to dissuade me from hunting Mikaboshi, wasn't it?\" she asked, gazing into his eyes. \"You were worried that I'd end up like Yamamoto.\"\n\nHe nodded, and said, \"He's practically a recluse now, and you just saw what it's like, trying to talk to him.\" Giving her a gentle smile he added, \"I didn't go to all the trouble of saving you, only for you to throw your life away.\"\n\nShe nodded soberly, then smiled back at him as she said, \"You don't have to worry. I've got a new life here with you now, and besides, I don't think Alyssa would allow me to turn into a recluse!\"\n\nHe chuckled, and said, \"No, I don't think she would either.\"\n\n*You're far too lovely to end up like that,* Alyssa thought to Sakura, her warm voice pouring through her mind like liquid honey. *I'm afraid, you're stuck with all of us looking out for you now, sorry.*\n\nSakura suspected that Alyssa wasn't particularly sincere with her apology, but she felt comforted by her telepathic voice, and found she didn't mind one bit. She snuggled into John's chest, feeling his strong arms surrounding her, and let out a contented sigh. He rested his chin on her silky black hair, and they sat there quietly, watching the stars drift by in the long window flanking the Ready Room.\n\nAfter relishing the tranquil moment together, John reluctantly said, \"We better head off to bed.\"\n\nSakura sat up in surprise, and asked, \"Haven't you got all the girls waiting for you? You don't sound like a man about to enjoy the loving attention of his harem!\"\n\nHe nodded, and replied, \"It's not just them waiting for me. I need to speak to Athena, and I'm praying she's come up with a plan.\"\n\n\"Athena?\" Sakura asked him with a puzzled frown. \"I don't think I've met her yet. Who is she?\"\n\nJohn was about to help her off his lap, so that he could get up, but he sank back in his chair instead and replied, \"We only found out about her recently. Before I talk about her, it's probably better if I start by explaining about the nightmares, and what triggers them...\"\n\n***\n\nThey arrived in the bedroom with Sakura still reeling from the thought that there was an Astral Plane, and that it was populated by horrible creatures capable of slaying them. Alyssa saw the look of shock on the young woman's face, one that Sakura had worn with distressing frequency over the last couple of days. The other girls were also there waiting for them, so when Alyssa gracefully climbed off the huge bed to go and comfort the Asian girl, Calara went with her to help. \n\nThey helped her shrug out of her clothes and join the others on the bed, while Dana and Rachel rushed to assist John in stripping off too. He was about to follow the redhead and brunette over to the bed, when a flash of purple caught his eye, and he spotted Faye sitting cross-legged on the big leather chair in the bedroom. She was still just as gloriously nude as before, and when he saw the acres of luscious purple flesh on display, he sorely wished she wasn't just a hologram. Faye caught his admiring glance, and she blushed furiously before flashing him a shy smile and sitting straighter, giving him a better view of her spectacular pixels.\n\nHe winked at her, then sat near the foot of the bed, facing Alyssa with the rest of the girls fanned out around him. He looked at each of them, and asked, \"I'm sure Alyssa's filled you in on what we might be facing tonight?\"\n\nThey all nodded, sombre expressions on their beautiful faces, and Jade asked him, \"Are you really in danger from this nightmare creature?\"\n\nHe hesitated, then replied, \"The last time I got pulled into the dreamworld, Alyssa was sucked in with me, and we barely escaped with our lives. I'm just hoping that Athena has come up with some kind of plan...\"\n\nThe Nymph didn't look particularly reassured, and with a worried frown on her face, she persisted, \"What happens if she doesn't have any ideas?\"\n\nHe smiled at her, and said with a confidence that he didn't feel, \"That's when we get creative!\" \n\nTurning to face Alyssa, who was cuddled up with Sakura and Calara, he gave her a brief nod as they shared a meaningful look. He closed his eyes, then tried to blot out any distractions, focusing intently on drawing out his spirit form from his body. He still had to fight hard to separate himself from his physical form, but he was in no mood for delays, and the process of Astral Projection seemed a little easier this time. When he opened his eyes again, he was facing the radiant copy of Alyssa known as Athena, who gave him a warm smile in greeting. \n\n\"You look happy to see me,\" he noted, returning her smile. \"Does that mean you have some good news?\"\n\nAthena's smile wavered, and she replied, \"Sorry John, I was just glad to see you again. I'm afraid I don't have anything definitive for you yet.\"\n\nJohn felt a heavy weight sink in his chest, and he said despondently, \"Alyssa and I were practically helpless there last time, and we only just escaped with our lives because you intervened. I hate not knowing what the hell I'm doing!\"\n\nAthena approached him with her arms open, and her embrace felt comforting, soothing the fear and doubts in his mind. He could feel her lips brushing his ear as she whispered, \"I only helped ward you from the debilitating fear the creature radiates. You were the one who saved us, pulling us from the Astral Plane.\" \n\nHe pulled back a little, but not enough to break her embrace. He stared into her glowing eyes only inches away from his, and said, \"We can't just wing this, though. It's far too dangerous to just hope I'll know how to protect us by instinct alone.\"\n\nShe nodded, and said, \"I know, I agree with you completely.\" She gave him one of her enigmatic smiles as she continued, \"I only said that I had nothing definitive for you, but that doesn't mean I've been idle.\"\n\n\"What do you mean?\" he asked her succinctly, his patience for her cryptic answers frayed by his fear for their safety.\n\nAthena pulled away from him now, and gestured around her at the girls on the bed, who were frozen in a semicircle around him. \"I suggest you harness their power,\" she said, her piercing gaze feeling like it was reading his soul. \"I've been considering this at length, and I believe you can use them to become much stronger.\"\n\nJohn frowned, his mouth twisting with distaste, and replied, \"I don't like the sound of that. I love those girls, I don't want to use them.\"\n\nShe smiled at him, and said patiently, \"Don't you see? That's what makes you so unique. A normal Progenitor gathers legions of female slaves and treats them like disposable tools, but you've focused on an elite group who you've nurtured and cared for. The closer their relationship with you, the more powerful the psychic connection you build with them, which in turn makes you both stronger. Progenitors are parasitical by nature, but you've twisted this process, and developed a symbiotic relationship with these girls instead.\"\n\nJohn closed his eyes for a moment, viewing the compartments in his mind. Just as Athena had described, the eldritch power lines connecting the girls to Alyssa were surging with power, each one a blazing cable of light. The psychic connection between Alyssa and Sakura was the only exception, being considerably weaker than those from the other girls he'd known for months. He fully expected that, however, as the Asian girl was still new to their group, and hadn't yet \"bonded\" with Alyssa.\n\nWhen he glanced at the compartments for the dozens of Maliri linked to Edraele, the connections from the eighty engineers appeared feeble by comparison. Those faint lines seemed pitifully frail even when compared against Sakura's link to Alyssa. There were three significant exceptions, the assassins whose fertility he'd restored, but even then, the connection with them was still weak.\n\n\"Given time, and enough care and attention, they could be equally powerful allies,\" Athena said to him, sharing Alyssa's telepathic ability and reading his thoughts. \"They won't be able to assist you here though, you'll need to work with the girls on your ship.\"\n\n\"Work with them, how?\" John asked her, feeling particularly obtuse. \"What have you got in mind?\"\n\nAthena brushed her fingers across his chest, and replied, \"Your psychic strength is fundamentally sexual by nature. Love those girls, and it will encourage them to open up to you even further, enhancing the strength of the eldritch power you can draw from them. Then have Jade assist you in feeding them all to create an active connection. I know you've seen the glow from them when they're open to your psychic manipulation.\" \n\nHe laughed, and shaking his head in disbelief, he said, \"So you basically want me to have an orgy?\"\n\n\"Yes, exactly,\" Athena replied, her tone deadly serious. \"Once you've established an active connection with all of these women, we can attempt to create a ward.\"\n\n\"A ward? What's that?\" he asked her curiously.\n\nShe shook her head, and replied, \"We'll discuss it again later when you're ready. For now just concentrate on the task at hand.\"\n\nHe paused for a moment, before looking into her eyes again, and saying, \"I still don't like the idea of 'using' the girls like this, it feels wrong.\"\n\nAthena smiled at him, and said, \"If you weren't in any danger tonight, what would you have done before going to sleep? Please be honest, this isn't a trick question.\"\n\nJohn thought about it for a moment, then admitted, \"At the very least, I'd have made love to Irillith and Dana, to show them how much I appreciate everything they've done for Faye. Calara's wanted to thank me for saving her brother, so almost certainly her too. Rachel looked like she was in the mood to celebrate being right about the Trankarans, and then Alyssa...\" He trailed off, then smiled as he continued, \"Alright, I get your point. The only real difference in what you're asking is that the girls 'share the load' so to speak, instead of filling up Sakura.\"\n\nAthena nodded, and said, \"She's developing nicely, but missing out on one session won't make any difference. This is far more important.\"\n\nRemembering how much weaker Sakura's psychic link was, he asked, \"Do we leave her out of this completely, then?\"\n\n\"No, we need all the help we can get,\" Athena replied looking thoughtful. \"Have Jade fill her stomach with your cum too.\"\n\n\"Alright, so we've got a plan,\" John agreed. \"Shall I Spirit-Walk again later, so we can discuss this 'ward' idea?\"\n\nShe shook her head, and replied, \"No, I'll contact you, I don't want you wasting any more psychic energy than necessary.\"\n\nHe nodded, and said, \"Alright, I'll head back to my body.\"\n\nAthena looked pleased, and she replied, \"Have fun, and I'll speak to you soon.\"\n\nJohn was about to return to his physical presence, but he smiled instead, pulling Athena into his arms. \"There's one other beautiful girl I know of aboard the Invictus. Is there anything I can do to strengthen her connection to me?\" he asked her playfully.\n\nShe looked flustered for the first time since he'd known her, and when he saw the flicker of curiosity in her eyes, he leaned in and gave her a tender kiss. Athena moaned softly into his mouth, clinging to him as she returned his kiss with feeling. They'd kissed once before, when he'd saved Jade, but this was very different. \n\nAthena looked just like Alyssa, although she glowed with a bright inner radiance, and his lips tingled where they met hers, feeling like a surge of electricity was passing between them. The ethereal guide was very new to kissing though, thus ending the similarities between her and her blonde counterpart, who had a wealth of experience in that regard.\n\nWhen he finally pulled away from her, Athena stared at him in bewilderment, and she lifted her hand to gently brush against her lips. \n\n\"I'll speak to you later,\" he said with a smile, enjoying the look of amazement on her face.\n\nWhen he stopped fighting the pull from his astral cord, he was snapped back into his body, and he steadied himself on the bed as he readjusted to the sudden swirling change in his surroundings. He glanced around, and saw that seven girls - eight, if you included Faye - were watching him intently. They hadn't moved position since he started his Spirit-Walk, reminding him of the time dilation effect on the Astral Plane.\n\n\"So what's the verdict?\" Alyssa asked him, as soon as he was stable again.\n\nHe was about to open his mouth to explain Athena's plan, but Alyssa read his mind before he could say anything. She sat up, clapping her hands in delight, an excited gleam in her eyes. \"Oh, this is going to be fun!\" she squealed happily.\n\nThe other girls all moved off the bed, moving with disconcerting synchronicity as they sashayed into the walk-in wardrobe, with Alyssa following behind them. She looked over her shoulder at John and Sakura, who were watching the beautiful girls with bemusement, and flashed them a mischievous grin.\n\nSakura crawled over the bed to join him, and whispered \"What's happening? Where are they going?\"\n\nHe smiled at her and replied, \"I've learnt to just go with it. Whatever Alyssa's planning is bound to be lots of fun, so just relax and enjoy yourself, okay?\" \n\nShe giggled nervously, so he put his arm around her and gave her a reassuring kiss. She responded by kissing him back, and it was only when they heard the sound of clicking heels that they pulled away from each other to look back across the room. While they'd been distracted, someone had lowered the lighting, creating a sensual ambience in the bedroom. Alyssa and the girls paraded out wearing nothing but four-inch stiletto heels, which emphasised the lean muscles in their long athletic legs, and added extra lift to the compact roundness of their toned cheeks.\n\nThis reminded John of their trip to Oceanus, and Alyssa presenting the girls as enticing flavours for Rachel to try. He wasn't certain, but knowing Alyssa as he did, he was fairly sure this little scenario was intended for Sakura's benefit.\n\n*Mmm, very good, handsome,* she purred to him, her bright blue eyes catching the light. *It looks like I'll have to work harder to surprise you...*\n\nTurning to Sakura, Alyssa gave her a warm smile, and said, \"I told all my sisters how good you taste, and they all begged me for a chance to go down on you. So it's up to you, gorgeous, take your pick. Who's the lucky girl?\"\n\nJohn chuckled at the bug-eyed expression of utter disbelief on the Sakura's face, and putting his arm around her shoulder he murmured, \"Don't feel pressured. You don't have to do anything you don't feel comfortable with.\" He saw the flicker of desire in her dark-brown eyes, and he grinned at her when he realised she could hardly believe her luck, not that she objected to the idea. \n\nSakura gazed at the six stunning Amazons arrayed before her, and she couldn't help but feel intimidated by how astonishingly beautiful they were. Each girl had the body of an athlete in the peak of physical condition, but with full gravity-defying breasts, uncommon in professional athletes.\n\nThe high heels, and subtle application of makeup emphasised their incredible natural allure, making them by far the most beautiful girls Sakura had ever seen. She couldn't help but feel shy around them however, so she was tempted to pick Alyssa, who she was far more familiar with than the others. The blonde met her gaze, and correctly guessed what Sakura was thinking.\n\n*I'd love to have you writhing on my tongue again, but why not pick someone else and let them enjoy you too?* she urged, giving her an affectionate smile.\n\nLooking at each of the other girls in turn, Sakura's eyes eventually settled on the coffee-coloured Latina, and mustering up her courage, she asked in a faint voice, \"Calara?\"\n\nA radiant smile lit up Calara's tanned face, and she stepped out of her high heels, then glided over to Sakura, before leaning in to give her a gentle kiss on the lips. \"Thank you for choosing me, you won't regret it,\" she replied, with a lustful look in her sultry brown eyes.\n\n\"Damn! I was hoping she'd choose me,\" Dana pouted, as she watched Calara climb lithely onto the bed. \n\nRachel laughed and said, \"You probably scared her off by swearing like a drunken sailor.\"\n\nThe redhead grinned, and replied, \"It didn't put you off though, did it? Or is that because you're a well bred lady, who likes her bit of rough?\" The two lovers shared a heated look, their pulses quickening with lust.\n\nAlyssa shook her head, and sauntered over to join her girlfriend, then brushed her hand along the Latina's leg as she purred, \"Calara's just irresistible, aren't you baby?\"\n\nCalara blew her a seductive kiss, then lay down on the bed, and gave Sakura a come-hither look. When Alyssa saw the confusion on the Asian girl's face, she beckoned her over, and said, \"She wants you to sit on her face...\"\n\nSakura's eyes looked like they were about to roll out of her head as Alyssa helped her swing a leg over the supine girl, but those eyes snapped shut, and she let out a low moan as she settled over Calara's mouth. \"Oh my God!\" she gasped, as she felt the wet, flickering touch of a hot tongue on her pussy.\n\nJohn grinned at the lustful sounds filling his ears, and turning his gaze back to the lined up girls, he said, \"Looks like you'll have to settle with me then, Red.\"\n\n\"Oh fuck yeah!\" Dana crowed with delight, and she kicked off her heels, and dashed over to the bed in her haste. \n\nJohn caught the excited girl mid-leap in his arms, then winked at Rachel and asked, \"Could you warm Irillith up for me, please? She's next, then I plan to ravish you.\"\n\nThe smouldering look she shot him left him in no doubt that the tawny-haired girl would be a handful when it was her turn. He saw Jade move to couple with Alyssa, and he turned his attention back to Dana, laying her back on the bed. \"It feels like ages since we've been together,\" he said, his tone apologetic. \n\nShe smiled at him, and said, \"A new girl to enhance, and plenty of injuries to heal. Who's dipshit idea was it to link all that to your cum?\"\n\nHe laughed as he leaned over her, then moved in for a passionate kiss, running his hands through her dark auburn hair. She gasped with excitement as he ran his hands over her body, taking his time to feel the firmness of her breasts, and the taut leanness of her toned belly. \"You're a smoking hot piece of ass, you know that?\" he said to the lusty redhead.\n\nThis close to her face, he could see the golden coronas flare around her pupils as they expanded with arousal, and she growled, \"Fuck me hard, you big-dicked bastard.\"\n\nHis fingers dipped lower, moving between her thighs, and he shoved them apart roughly, making her gasp. He was gentle when he brushed his fingers over her pussy lips though, and found her soaking wet for him already. Not wasting any time, he covered her with his body, then pushed his way into her glistening channel, relishing the sound of her girlish whimpers as her pussy wrapped around his huge shaft. He knew by now that she'd easily stretch to take him, and he forced his way up to the hilt inside her. Her cheeks were flushed as she gazed at him, and she clung to him with her legs and arms, in anticipation of the pounding she'd demanded."
    ],
    "authorname": "Tefler",
    "tags": [
        "teenager",
        "swallow",
        "cum inflation",
        "orgy",
        "double penetration",
        "tentacles",
        "alien11111",
        "psychic",
        "assassin",
        "stygian abomination"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/three-square-meals-ch-67"
}
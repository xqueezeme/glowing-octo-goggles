{
    "title": "Collateral Ch. 13",
    "pages": [
        "Jake had no idea he could feel like that. So swept off his feet, so engulfed in another one's heat. Klaus was holding him close, Jake's back flush against the man's chest and was penetrating him slowly. He almost wanted to groan in frustration and ask the other to just hurry and give it to him hard.\n\nIt was funny how not uncomfortable he felt. He had expected to need a thousand pillows for his ass or something like that. Yet, the moment the guy's hands had been on him, probing gently and coaxing him into giving in, he had been game.\n\nWhich had eventually led to him being kept like this, on one side, and fucked excruciatingly slowly. Klaus was an amazing lover, generous and kind, yet still wicked and a pervert when he felt like it.\n\nVanilla my ass, he thought. Was it really vanilla to have his cock restricted like that? Klaus had just said something about delayed gratification and how good he was going to feel, but, at this point, he wanted none of it.\n\n\"Can you just take that thing off my dick?\" He whined.\n\nKlaus nuzzled his neck and chuckled, right next to his skin, making him quiver.\n\n\"Just a little longer,\" the man cooed and Jake buried his head into the pillow to hide his dissatisfaction.\n\nHe could deny all he wanted, but the buildup in his loins was not entirely unpleasant. It grew like an itch, and it was making his entire body tremble. \n\n\"Easy,\" Klaus pushed the wet strands of hair from his face and guided him in for a kiss. \"You are perfect, Jake, do you know that?\"\n\n\"Stop getting all mushy over me and fuck me,\" Jake murmured, his eyes tightly close.\n\nHe was in no shape to look at his sexy tormentor right now. A kind hand eventually enveloped his strained cock and the tight grip of the ring was released. Klaus maneuvered him in such a manner that Jake landed on top, his back still at the man.\n\n\"How about you show me how much you want it?\" the pervert spoke.\n\nIt didn't hurt to be in control. It didn't feel right and he was clumsy as he moved up and down, impaling himself on the man's hard cock, but he was willing to give it a go, now that he felt so close.\n\nKlaus's hands moved to sustain his legs, and he found a rhythm. The small appreciative grunts coming from Klaus each time he pushed down were enough encouragement to keep him going.\n\n\"Fuck!\" he cursed out loud, as he came, without even touching himself.\n\nIt was funny to look at his own dick and see it shoot like that. That, if he were to be totally conscious of what was happening and that definitely didn't feel like it. Klaus took the reins and began manipulating him like he was a doll, dragging him over his dick in short powerful thrusts. When the man came inside him, Jake felt complete.\n\nHe would have expected to at least feel a little grossed out, but it was nothing like that. He liked that Klaus wanted to come inside each time. Point taken, it was only the second time, but he could already see a pattern.\n\nKlaus took him in his arms and pulled him close. Everything about this man seemed firm, possessive. And Jake loved it, because it made him feel protected. With his brother constantly telling him to just stay already on his two feet, there had been a constant anxiety growing inside him. The moments when Diaz showed that he really cared were invaluable to him, and those had been fewer and fewer over the years. He was part of the gang and everything, but he could feel that he didn't belong with the others, no matter how hard he tried to blend in.\n\n\"We will go out tonight,\" Klaus spoke after kissing him long and hard.\n\n\"Where? This shitty town ...\"\n\n\"Jake, language,\" Klaus said, but Jake knew the guy was amused. \"And it will be somewhere ...that is not here.\"\n\n\"So much info, wow.\"\n\n\"I want it to be a surprise,\" Klaus placed a quick peck on his lips. \"Ready for another round?\"\n\n\"You must be kidding me,\" Jake mumbled, and closed his eyes.\n\n\"Just joking,\" Klaus let his hands wander down Jake's flanks, tickling him.\n\nJake snickered and tried to escape, but Klaus was stronger and soon he was trapped underneath solid heat and their faces were close. It was a bit unnerving to stare into the man's beautiful blue eyes. That stare was so hypnotic that he felt a bit like drowning. It wasn't fair, if he was to think about it. Klaus was going to leave at some point, anyhow. \n\n\"Good,\" he finally replied. \"Because my ass cannot anymore. Actually my dick. That delayed gratification thing did the trick, I guess,\" the words came out of his mouth like a flood.\n\nHe was silenced by rough lips closing over his. Klaus liked kissing a lot, it seemed. And that was doing funny things to his brain, making his thoughts a tangle of messy watergrass, slippery and somehow, a lot of fun. \n\nWhen he was finally let to breathe, he licked his lips with unhidden satisfaction.\n\n\"You like this kissing stuff a lot, right?\" he asked.\n\nKlaus seemed to be taken aback, and then smiled.\n\n\"It must be you I like kissing. I do remember a lover or two reproaching me that I was too cold towards them and I did not care about kissing as much as they liked.\"\n\n\"Look who's talking about other guys in bed,\" Jake joked, but the truth was he felt a little pang of jealousy at the brief mention of past flames.\n\n\"Then I make the solemn promise that I will keep my mouth shut,\" Klaus leaned in for another, noisy this time, kiss.\n\n\"How many guys have you been with?\" Jake asked, as he slowly caressed Klaus's shoulders.\n\nHe looked away. Who knew he was a masochist? Klaus tipped his chin and made him look up.\n\n\"It does not matter. What matters is the moment we have right now. You matter. That is everything you need to know. Come now, I want to spoil you a little.\"\n\n\"How?\"\n\n\"I think playing in the jacuzzi might just be up your alley.\"\n\n\"Do you have a jacuzzi?\" Jake's eyes grew wide.\n\n\"And a hot tub and the pool you have already seen.\"\n\n\"Yeah, I'd like to swim a little.\"\n\n\"What stopped you so far? Anything on the premises is free for you to use.\"\n\n\"Really? What if I break something?\" Jake asked, but he could not hide the bubbly sensation in his chest.\n\n\"We both know you do not mind paying for your little mistakes,\" Klaus threw him an all knowing look.\n\n\"Yeah, my ass remembers,\" Jake pursed his lips.\n\n\"Come. Up,\" Klaus dragged him out of the bed. \"I want to enjoy a nice relaxing bath with you. And feed you some strawberries.\"\n\n\"Really? Cool,\" Jake was now more lively as he got out of the bed.\n\n***\n\n\"What is this?\" Klaus pressed his fingers against a long white scar going from the inside of Jake's elbow up his arm.\n\nHe did not miss the shadow passing over Jake's handsome face. \n\n\"I fell,\" the young man said abruptly. \"When I was little and stupid.\"\n\n\"Oh, so it happened yesterday,\" Klaus chose to joke.\n\n\"Yeah, right,\" Jake snorted. \"Are you going to send me back now that I'm damaged?\"\n\n\"Send you back? Never,\" Klaus protested in jest.\n\nYet his heart skipped a beat, strange enough seeing that this was nothing but business as usual, another tryst meant to end up with both parties satisfied and a tad bored of one another.\n\n\"What other things are you hiding from me?\" he covered his sudden unease with another joke.\n\nJake made a one eighty, regaling his temporary owner with a good look at his beautiful body. Klaus loved the boy's olive skin, despite being marred every here and there by marks of what could count as a tumultous personal history for some, but completely normal for a young man like Jake. Navigating the concrete jungle must not have been always easy for the rebellious youth in front of him, and some encounters must have ended with him on the losing end.\n\n\"I'm like all open and stuff,\" Jake emphasized his actions with his words.\n\n\"Yes, I can still remember distinctly how well you open,\" Klaus smiled.\n\n\"Perv,\" Jake shot at him, his dark eyes becoming darker and unfocused for a second.\n\n\"You must be that one man newspapers talk about,\" Klaus said.\n\n\"What man?\" Jake scrunched his nose.\n\n\"The one that thinks about sex every seven seconds. I was talking about how well you have opened to new opportunities ever since we met. You are even thinking of pursuing higher education.\"\n\n\"Don't change the subject. You're the pervert here,\" Jake shot back, but Klaus could tell the boy was all bark and no bite.\n\n\"Let us catch some rest. It would serve us since we will be out tonight.\"\n\n\"You still don't want to tell me where we're going?\"\n\n\"Then it would not be a surprise, now would it?\"\n\nJake pouted. Klaus could feel desire, renewed and strong, coursing through his veins. Those pouty lips were pure heaven. He liked them, when Jake smiled, or bit them, or pouted like a miffed child right now. And he especially liked them wrapped around his cock. Jake was smart. He learned quickly.\n\nKlaus pulled the young man towards him a bit too firmly, almost making him stumble.\n\n\"Oh, man, don't give me that look,\" Jake complained.\n\nKlaus held him by his waist and looked him in the eyes.\n\n\"What look?\" he asked.\n\n\"The one that says that my ass is going to be on the line again. You know, your cock up my ass, that's what it says.\"\n\n\"Do not worry. You also have a mouth,\" Klaus said and lifted one hand to slowly caress the wonderful lips.\n\nJake seemed delighted with the proposition.\n\n\"Do you want me to blow you?\" he asked, without hiding his excitement.\n\n\"It is quite interesting how much you like this,\" Klaus thought out loud. \n\n\"Well, you could blow me, too,\" Jake cocked his head to one side and bit his bottom lip.\n\n\"In bed, now,\" Klaus ordered.\n\nAnd he wondered if he was going to feel satisfied after one more time. With Jake, so far, each act had only lead to more and more desire. That was something that did not fit the picture. No, it definitely did not fit the picture.\n\n***\n\n\"What is this place?\" Jake asked, the moment they were out of the car.\n\n\"What does it look like to you?\" Klaus replied, with what seemed like genuine interest.\n\nKlaus was like that. He was interested in finding out more. It was a good thing that he hadn't insisted about the scar. Jake had felt a little tempted to just blurt out the truth. But he was not supposed to. Not to a stranger. Not to anyone. Bad memories were supposed to be just one person's burden anyway, and he didn't want anyone's pity. \n\n\"I think it's a bar,\" Jake took his shot at guessing.\n\n\"Close enough. A club, to be more precise.\"\n\n\"Do you feel like dancing? You?\" Jake looked at Klaus, giving him a long look.\n\n\"Does it seem so impossible?\"\n\n\"You're way too stiff for dancing,\" Jake snickered.\n\nThe man looked quite affronted, and Jake laughed even louder, making a few passersby turn their heads to look at them.\n\n\"Then I will be your dancing pole and you can dance around me,\" Klaus guided him towards the entrance.\n\nThere was a bit of a crowd in front of the club, but Klaus managed to have them navigate with ease until they reached a man of impressive size guarding the entrance.\n\n\"Mr. Metzger,\" the man welcomed them and hurried to step aside.\n\nKlaus stopped to exchange a few words with the bouncer, and Jake dared to take a look around.\n\n\"Fuck, you're so lucky,\" he heard someone speaking to his right.\n\nHe turned to look at a guy in his 20s, with a long earring in his right ear, mascara loaded eyelashes and a crop top that left little to the imagination. Jake gaped like a fish.\n\n\"Boo,\" the guy pretended to scare him and smiled. \"Pretty boys like you, always landing the fat cats,\" he added, gesturing towards Klaus.\n\nJake was completely non-pulssed. He could not make sense of what he was seeing or hearing. The stranger took a long look at him.\n\n\"Yet not too bright, are you?\" the guy joked.\n\nJake frowned and he was about to give the stranger a piece of his mind when Klaus's hand landed on his shoulder and made him turn and follow.\n\n\"Have fun for me, too!\" the stranger called after them.\n\n\"You are quick to make friends, I see,\" Klaus smiled as he placed a possessive arm over his shoulders.\n\n\"Why do we get inside and the others don't? It's that kind of fancy club where people sip champagne and make jokes about politics that no one understands?\"\n\nKlaus chuckled.\n\n\"Do not worry. You will not get bored. That I can promise.\"\n\n\"That guy outside was strange,\" Jake commented. \"But I suppose he wanted to get in really bad.\"\n\n\"Would you like to get to know him better?\" Klaus questioned.\n\n\"Not really. But he was disappointed,\" Jake shrugged.\n\nKlaus stopped and took a few steps back to the bouncer. Jake stared after him as the man talked to the enormous guy in front. The bouncer moved aside, letting the stranger from before inside, along with two other guys who were just as flashy. \n\nThe guy in the crop top shrieked in delight as he entered and hurried towards him. Jake almost took a swing at him as the guy embraced him and kissed him loudly on one cheek.\n\n\"You're like my new bff, sweetie,\" the stranger claimed.\n\n\"What the fuck ...\" Jake murmured and searched for Klaus with his eyes.\n\n\"Thanks a lot, man, you're cool,\" one of the stranger's friends patted his shoulder. \"Do you guys have a table? I bet you do.\"\n\n\"Gary, stop it, don't be such a leech! It's enough that we're in. By the way, your boyfriend is the man, dude!\"\n\n\"He's not my boyfriend,\" Jake denied, knee-jerk reaction, rather than anything else.\n\nWhat was this strange place? What were those people? As he took in his surroundings, his jaw dropped to the floor. As fas as he could tell, the entire club population visible in the stroboscopic lights was male.\n\nAnd that was not all. Some of them were engaged in sensual dancing, while others were nothing short of making out, with a few couples sucking faces for real. \n\n\"What's with him, J baby?\" the one named Gary asked.\n\n\"I don't know. Maybe he just got out of the hospital or something. Or he has some speech impediment. Baby, are you okay?\" the guy touched Jake's arm.\n\n\"He is totally fine, just a tad laggy,\" Klaus finally came to the rescue and embraced him from behind.\n\n\"Laggy? Where are you guys from?\" J asked, excited.\n\n\"Europe,\" Klaus replied with his natural nonchalance. \n\nYour momma's backyard, more likely, Jake thought, but kept his mouth shut.\n\n\"Oh, so your ...friend doesn't know English too well?\" J asked again.\n\n\"Oh, trust me, that is no problem. He just does not warm up to new people easily. And he is not my friend. He is my lover. And, by the way, I am Klaus and this is Jake.\"\n\nA common 'wow' was the immediate reply from the rambunctious group. Jake wanted the earth to open up and swallow him. This weird trip was getting weirder and weirder. Was that why they drove for three hours? So that Klaus could let anyone know they were fucking?\n\n\"Did you hear it, boys? This is how they say it in Europe,\" J said to his friends.\n\n\"Please join us. We could use some company since we are new in town,\" Klaus said smoothly. \"And, of course, the drinks are on me.\"\n\nJ grabbed Jake by one arm and shook him.\n\n\"That is so frigging awesome! Jake, whatever you do, don't lose this guy, okay? Promise me!\"\n\nWhat, was the guy really expecting an answer? Eventually, Jake murmured a half assed answer so that J could let go of his arm. There was no chance for that, apparently, as he was dragged along with the group.\n\n***\n\nKlaus was examining Jake from the corner of his eyesight. The young man was obviously still in a bit of a shock, but he had trust that, by the end of the night, he was going to feel much more at ease.\n\n\"So, how did you guys meet?\" J asked, his eyes traveling back and forth between Klaus and Jake.\n\nKlaus opened his mouth to give a standard answer, when Jake intervened.\n\n\"He saved my life.\"\n\nThe youngsters at the table looked at each other and then started laughing.\n\n\"It's true,\" Jake insisted.\n\nThe laughter died down.\n\n\"What did he do? Gave you a kidney or something? Poor you, that's why you look a little pale.\"\n\n\"J, are you an idiot? He wasn't in a hospital.\"\n\n\"He beat the crap out of five guys who were bent on fucking me up,\" Jake continued.\n\n\"Wow, Europe is scary,\" J pretended the conversation was giving him the shivers.\n\nWhat was with Jake and this strike of honesty? Klaus pulled him closer and shut him up with a short kiss. At last, he took the hint. \n\n\"Man, this is better than a soap opera,\" Gary commented. \"You two are uber cute together. Jake, you don't mind me asking, but are you from Spain or Italy?\"\n\n\"Southern France,\" Klaus supplied promptly.\n\n\"Wow, we should thank France for gifting us with such beautiful boys. I could have sworn you were Latino, Jake. And how is not your name French?\"\n\n\"He is actually called Jacques, but his parents were very anglophiles, so they called him Jake, and the name stuck,\" Klaus said.\n\n\"And where are you from, Klaus? Germany?\"\n\n\"Correct,\" Klaus said back with a smile. \"How about you take Jake for a little bit of dancing? I am afraid I am not that much of a dancer, and I do not wish my lover to become stiff with boredom.\"\n\nThe trio laughed, like they had just heard a funny pun. J got up to his feet, followed by the other two and they dragged Jake along with them on the dance floor. Klaus pretended to ignore the death glare Jake threw him over his shoulder and just lifted his glass.\n\nHe followed the boys with his eyes. Jake seemed a little out of place at first, but goaded by J and company, he slowly began to loosen up. Soon enough, he was dancing with the rest, smiling, and even laughing at some point.\n\nKlaus returned to his drink. His head thrown back, his sinewy body swirling in the rhythm, Jake was beautiful. The most beautiful man in the whole wide world, and right now, he belonged to Klaus and no one else.\n\n***\n\n\"So that was a gay bar,\" Jake mused, and climbed on Klaus's lap, as soon as they were comfortably seated inside the limousine.\n\n\"Club,\" Klaus corrected him.\n\n\"I had to speak with a weird French accent the entire night,\" Jake pointed a finger at Klaus, and hiccuped in the most adorable way possible.\n\n\"I am quite flabbergasted to see that you do not hold your liquor well.\"\n\n\"Don't change the subject,\" Jake threatened again, poking Klaus's cheek with his finger.\n\n\"I thought you would have liked to enjoy a bit of an incognito adventure.\"\n\n\"Inco-what?\"\n\n\"To pretend to be someone else for a change.\"\n\n\"While admitting that I'm gay,\" Jake frowned like he was trying to make sense of everything.\n\n\"Yes. Did you like it?\"\n\n\"Yeah,\" Jake smiled. \"The guys were cool. And no one touched my ass.\"\n\nKlaus laughed.\n\n\"Were you expecting to be groped? Are you disappointed?\"\n\nJake was not allowed the luxury of a reply. Klaus quickly turned the tables and caught Jake under him. \n\n\"Let me correct that,\" he said with a smile and pushed Jake's t-shirt up and drew a wet line from his belly button to his chest.\n\n\"Stop it, I'm sweaty,\" Jake protested, while giggling.\n\n\"Delicious,\" Klaus replied and sucked in an erect nipple, with a loud smack.\n\n\"Fuck,\" Jake arched into him. \"Why are you so good? It's not fair.\"\n\n\"Oh, so finally I am good enough,\" Klaus said and proceeded to open the fly on Jake's jeans.\n\n\"Are you kidding me? You're the best thing ever on seven continents.\"\n\n\"How flattering. I am glad that your opinion of me finally evolved.\"\n\n\"It didn't,\" Jake covered his eyes and sighed. \"The moment I saw you I thought I was going to jerk off thinking of you.\"\n\n\"Oh, so it was coup de foudre,\" Klaus joked.\n\n\"What's that? Some weird French stuff?\"\n\n\"It means strike of lighting, and it is the equivalent of what you people call love at first sight,\" Klaus supplied an explanation right away.\n\n\"Well, maybe it wasn't at first sight,\" Jake retorted. \"But definitely after.\"\n\nKlaus's fingers stopped their ministrations. Jake said the darnest things, especially when tipsy. ",
        "\"So, are you trying to say that you love me, Jake?\" he could not resist the temptation.\n\nJake's eyes were shining, the reflection of street lights fading in them. \n\n\"Yeah, I do. I love you, Klaus,\" he said and pulled himself up to place a hard kiss on Klaus's lips.\n\nIt was just the confession of a very affectionate drunk. Klaus could not take it seriously, by any means.\n\n\"Now, are you going to blow me or not? Because I've seen so much gay porn tonight that I think I'm going to explode.\"\n\n\"Where in heavens did you see gay porn? I know for a fact that the guys did not drag you to some shady corners.\"\n\n\"Right there, on the dance floor. I swear, a guy was grinding his ass so hard against another dude's crotch that I think both came into their pants.\"\n\n\"It is interesting what definition you use for gay pornography. That is another thing that must be corrected.\"\n\n\"Please, I know what Internet is. I've seen things,\" Jake sounded very convinced. \"And always wondered how those guys could take those dicks up the ass.\"\n\n\"Now you know,\" Klaus said, smiling.\n\n\"Yeah. Although, I had to be careful about deleting that damn browser history. And then bury everything with huge tits.\"\n\n\"Another fetish of yours?\" Klaus joked.\n\n\"No, what Diaz likes,\" Jake said with a shrug.\n\n\"Good. You would have had me in a terrible pinch if you had said out of the blue that this is what rocks your world.\"\n\nJake grabbed Klaus's by his shirt and pulled him closer. \n\n\"Less talking, more sucking. That will rock my world.\"\n\nKlaus felt compelled to laugh. And, also, to punish a little that uncouth mouth. So, instead of proceeding with undressing Jake, he straddled him and made him face the consequences. He was quick to open his fly and almost smack the young man's face with a rock hard cock.\n\n\"Lead by example, Jake, if you dare,\" Klaus cooed and was pleasantly surprised to feel his mouth engulfed in moist heat. \n\nJake needed no incentive once he was taken out of his shell. He went all in, like now, his mouth hungry, his tongue wicked, and his hands all over his lover's body. Jake's fingers fiddled with the waistband and dragged Klaus's pants down, along with his boxers. \n\nHe was about to make a few recommendations when he felt rough fingers reaching between his buttocks and pushing, with what could be called pinpoint accuracy, against the dry hole.\n\n\"Easy there,\" Klaus gasped. \n\nHe watched in fascination as Jake withdrew one hand only to take a moment and wet his fingers, without even letting go of the cock in his mouth. And then, he returned to his initial conquest and slid one finger inside Klaus's ass. \n\nHe was going to let it pass this time. Jake's natural curiosity had to be nurtured. And it was not entirely unpleasant. If anything, it truly heightened the experience. And it had been a while since anyone had dared to touch him so intimately. \n\nJake was getting good at taking cock deeper, too. And soon, as the bold finger in his ass hammered the entrance, clumsily, but pleasantly, nonetheless, he let go. Jake made a small sound, but sucked in everything. Klaus caressed the young man's neck slowly, enjoying the way the Adam's apple bobbed up and down, as Jake swallowed.\n\nWhen he finally withdrew, Jake's eyes were drowsy, and the boy seemed just ready to go sleep. Klaus placed a protective hand over Jake's crotch, and Jake covered it with his right away.\n\n\"I'm just too drunk,\" Jake said. \"And happy.\"\n\n\"That is nice to know,\" Klaus chuckled softly. \n\n\"One day, I will fuck you,\" Jake mumbled, as he maneuvered himself to one side and assumed a sleeping position. \n\nHis feet rested against Klaus's thigh, but the owner of the expensive kakis now made a mess by the boy's snickers, didn't mind.\n\n\"Do not make promises you cannot keep,\" Klaus began caressing the pert bottom sticking out. \"I told you. I do not enjoy it.\"\n\n\"Those guys who tried to fuck you sucked,\" Jake said with determination. \"And they didn't want you enough.\"\n\n\"You think?\" Klaus let the young man entertain the idea a little more. After all, everything was going to be forgotten in the morning. \n\n\"Yeah. They didn't know how to make you want it.\"\n\n\"I must warn you, Jake, that you are talking about men with experience here.\"\n\n\"Bullshit,\" Jake huddled and trembled a little. \"Just watch me pop your cherry.\"\n\nKlaus laughed this time. What Jake was saying was completely ridiculous, but endearing, nonetheless.\n\n\"I am quite certain I lost that type of virginity a long time ago.\"\n\n\"I'm not talking about your ass. You have to feel it. Like in your heart.\"\n\nNow that was something that required a carefully picked comeback. Luckily, one was not needed. Jake was dead to the world, snoring softly, his face against the leather seat, his feet pressed stubbornly on Klaus's thigh.\n\nTBC"
    ],
    "authorname": "laurasfox",
    "tags": [
        "gay anal",
        "gay romance",
        "gay novel",
        "gay oral"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/collateral-ch-13"
}
{
    "title": "Down the Rabbit Hole Ch. 04",
    "pages": [
        "-- Greetings All! Thanks again for all your comments, someone asked if any of this is true, I'll let you decide.\n\nCh 01. Discovering my attraction to bras and panties.\n\nCh 02. Dildo play and lingerie.\n\nCh 03. Going out in public for the first time.\n\nChapter 04. Angie.\n\nI'm not really sure I would have ever imagined things would have come to this. Look, I'm straight, I adore beautiful women, and all I can think of is having sex with them. I shook my head while looking into the rear-view mirror of my car, I don't know why I felt any need to convince myself of this, and then went back to touching up my lipstick in the mirror.\n\nGoing out dressed in public was something I had a love/hate relationship with. I hated it because I always felt like I would constantly forget to do little things, little behaviors, little attention to details. On the other hand, I loved it because of the danger of being outright discovered, and someone pointing their finger and yelling 'Look at that guy dressed like a girl!!'\n\nSilly, I know, but at the time, it felt like that was always a simple mistake away from happening. So I'd drive quite a bit further than I'd really need to, in order to feel better about someone that knew me, actually seeing me, or me seeing them and panicking. This mall was almost an hour's drive from my house, and the goal for this evening would be two stops. First, I wanted to buy a bra, in person, and second, I would stop at the Halloween shop that would open during this time of year and see if they had any wings in stock.\n\nI took a breath, nodded, stealing my courage while slipping on my heels, and stepped away from the car to the mall entrance. I loved the sound the heels made as I walked, my smile grew a bit wider when an older man held the door open for me as I entered the mall 'Thank you.' I said, as I passed him.\n\n'It's my pleasure Beautiful.' he responded and that made me feel so good. Inside the mall, the sound of my heels seemed a bit louder than I would have liked, it felt like I may have been trying to call attention to myself. I just kept my focus and eventually made my way to my first stop. This would be the first time for me actually going into a store and buying any female clothing, let alone underwear, but I knew I had come this far and would continue on. As I stepped through the entrance I was immediately approached by one of the Saleswomen.\n\n'Hi, is there anything I can help you find?' she asked.\n\n'I'm looking for a new bra.' I said, probably a bit more softly than I should have.\n\n'Right this way!' she smiled and turned away leading me into the promised land of lingerie.\n\n'Did you have anything special in mind? Or just generally looking?' she turned her head towards me as we arrived.\n\n'I'm not sure really. I've got a party coming up, and I'd like something that would make me look, umm, bigger, but not cartoonish'. I said.\n\nShe tilted her head just a bit, and nodded, as she went to a rack, and then without turning asked 'What did you have in mind?'\n\nI'm not sure why this caused me to start unwinding, but that is the exact moment things did start becoming uncomfortable, and I stammered for a moment before she turned to face me with a warm smile and in a low voice said 'It's okay, really, don't be embarrassed. We'll find something you'll love.'\n\nShe looked at my chest and said 'You're a B-cup, did you want to go a little bigger, or a lot bigger?'\n\nI figured that I'd just go back to a C-up like my first bras, but wondered if a D-cup would look silly 'How big do you think I could go? I have a party..' I trailed off and she looked at my chest once again and quietly said.\n\n'You can go to a D, but you'd just need more padding, we have breast forms available here, or you can pick whatever you're most comfortable with if you have another preference.'\n\nMy obvious cluelessness (who would have guessed this would be so complicated?) coupled with her voice now being very obviously much quieter when she greeted me, convinced me that she knew I was a guy. I think I must have gotten that deer-in-the-headlights look on my face, and she quickly added 'It really is okay, listen, you're beautiful, you really are. So let's not have your visit to our store be a bad experience, let me help you find exactly what you want.'\n\nAfter she rang me up, she took one of the business cards off of the counter, wrote her name on the back of it, and smiled at me once more 'I hope you come back, and I want you to call and ask for me, so that I can help you with anything else, okay?'\n\nI smiled and thanked her for being so helpful. I spun around and walked out of the shop, feeling a bit gun-shy, but also feeling good, it felt like that could have gone very badly, but I knew I'd be back for more purchases, and I wouldn't have to wait days for them to be delivered.\n\nTom was a friend of mine, about 5 years older than me who lived in one of the suburbs that bordered 'the country'. He had a great house, with a huge backyard, and every Halloween, he'd throw a great party, I'd been going for more years than I'd been dressing up, but this year, I'd be going to the party as 'Nina' my other-self. I felt like there wouldn't be any problem with this because it was a Halloween Party, and the worst that would happen would be I'd see some people there that I knew, who would just be surprised, maybe THEY would feel uncomfortable seeing me as a female, but I felt fine when dressed.\n\nMy outfit wasn't elaborate. My plan was to present myself a bit like a Punk Angel. I had a pair of feathery white wings strapped to my back, I wore white tights then put on some black fishnets that I ripped up a bit. I wore some beat-up black combat boots that I left mostly unlaced, and then a pleated black mini-skirt with lace fringe, a heavy black belt with metal buckle and a chain that dangled from a 'bible' rested at the side of the belt. I wore a black long-sleeve cold shoulder top, and with the long straight blonde hair of my wig dancing around my breasts (yes, I went with the C-cup and the breast forms from the shop) I have to say the outfit looked better than I hoped. I'd done my makeup in a paler style, my eyes were dark and smoky, and my lips a deep crimson.\n\nThis wasn't a mission to get laid, I was there to see if anyone would recognize me, if they did, what would they say? Finally, I wanted to see how I'd feel around friends and acquaintances dressed like a female, although a very different kind of female than I typically dressed as.\n\nStrangely, I had the least amount of nerves driving out there, I really just felt like the worst that would happen would be to have someone say 'You make a pretty hot woman..' and I'd definitely take that compliment. I arrived, gathered up some beverages from the passenger seat, and could see that there were already quite a few people having a great time as I entered the house. I made my way to the fridge, then opened a beer and filled a plastic cup, I decided to move around and see who was there.\n\nAlmost immediately I saw Angie.\n\nShe's one of the most beautiful women I've ever actually spoken to, with long, curly dark hair, very likely Italian heritage. She's got deep dark eyes, and lips that suggested a kiss from her would ruin most guys for life. I'd guess she stands about 5'6\". with what looks like a very toned, tight body. She doesn't have huge tits or a giant ass, I suppose I'd say she has a Runners body.\n\nI didn't really 'know' Angie, I mean, I knew her name, and I'd briefly chatted with her several times at various parties. I'm sure I made some bungled attempt at being cool so she'd be interested in me. The truth is, I had more of a crush on her because she wasn't a bitch. She never blew me off as some other women had, she had a friendly way of making it clear she wasn't interested, without making it painful, and I had seen her similarly blow other guys off as well, so I didn't feel like I was the only guy that had no chance with her. It'd been a couple of years since that happened, and while I was mostly over her, seeing her in the outfit she had on, had an immediate, and considerable effect on me and my anatomy.\n\nAngie was dressed as the most incredibly sexy Angel I had ever seen. She was entirely in white, white stockings with white patent-leather stripper heels, she wore a dress that look like a bridal mini-dress and she had a halo that kept tipping over. above her head. I didn't want to stare at her, but she looked so perfect. I had one of those weird thoughts in my head, as I've said before I always felt like at least part of the reason I dressed up was because I had no sex life outside of my own playtime with myself. I had always attempted to create the kind of woman that I would want to be with. I wanted to be Angie at that moment, I knew I'd never get the chance to be with her, and I knew I could never, with all the practice in the world, ever look at beautiful as her, but that was probably okay. God, she looked gorgeous though.\n\nI moved along and made my way out into the backyard where a bonfire had been started, there were a handful of others there, all with drinks in their hands chatting. I sat down and almost immediately one of the guys got up and said 'You need whatever is in that cup refilled!' with a big smile on his face.\n\nI giggled and shook my head 'It's early, and I just got here.' I said, making sure to use Nina's voice.\n\nHe shrugged and said 'Okay, but you let me know as soon as you need a refill!' and he went back and sat down with his friends.\n\nOkay, well, so far, so good.\n\nI got up a few minutes later and looked around for people I knew, and eventually found Tom, the host chatting with a couple, when they finished, Tom turned around and I walked up and said 'Hi!'. He looked at me, clearly having no idea who I was, which caused me to crack a huge grin and I said 'nice party' in my normal voice. His eyes popped open and then smiled back and started laughing, he grabbed my arm and pulled me into the backyard and started carrying on about how I looked a bit familiar, but he didn't recognize me till I spoke in my normal voice. He made a point to mention that he definitely WOULD have figured out that it was me if he'd have had another few seconds.. 'Okay Tom..' I smiled.\n\n'So has anyone hit on you yet?' he asked.\n\n'I really just got here a few minutes ago, I just came back into the house after sitting by the fire for a few minutes.' I replied, using Nina's voice once again.\n\nTom shook his head and said that I made a better-looking woman than a guy, and I told him he only said that because I fooled him, which he continued to deny. It was good fun, and I told him I didn't want to keep him away from the rest of the people at the party but asked if anyone else I knew had arrived yet.\n\nHis eye sparkled and he said 'As a matter of fact..' he grabbed my hand, and led me back into the house. I figured I'd get to play this same trick on a friend that I had just played on Tom, but he took me straight up to Angie 'Hey Girl, you aren't the only Angel here tonight!' he said and looked back at me.\n\nAngie looked at me, and I'm sure I had a look on my face.\n\n'Ohhh no!' she said, feigning anger. 'This party is only big enough for one Angel. You need to go home and change!' she pointed to the door.\n\nI smiled back and said 'What kind of mean Angel are you? I traveled a long way to come here, and I'm so thirsty.' then made a pouty face.\n\n'Okay, well in that case you can stick around for a little while.' she laughed, and shook her head.\n\nI went back to moving around the party and I found a few friends had arrived, I played Nina for just a few moments before told them to stop undressing me with their eyes in my normal voice and they had a good laugh at that. I was having a great time, nobody had gotten freaked out, and I just stayed in Nina-mode and relaxed. A few times some friends would head get refills and bring me back a beer and I thought that was sweet, I convinced myself they were just being Gentlemen, even though those same guys knew who I was. The party continued and I'd been there for a few hours, I was feeling the alcohol a bit. I decided to make my way over to the restroom and noticed the door was closed. I waited, hoping that whoever was inside wouldn't take too long when the door opened and Angie stepped out.\n\nShe stopped and I know I was staring, she grinned then moved close and said 'Tom shared your little secret, I know who you are!', she leaned back a bit with that same grin.\n\nI could definitely feel my cock straining against the tights I wore 'Oh really?' I raised an eyebrow at her 'You'd have to know me, to know who I am.' then I pouted a bit and stuck out my lower lip.\n\n'Oooooo..' she said, and her smile turned to a bit of an animated frown 'I know you..' and then she raised a finger to her lips and then pressed that same finger to my big pouting lips.\n\nMy eyes opened wide, and she smiled at the reaction she had caused in me 'Umm, you do?' I asked.\n\nHer smile came back and she nodded 'I do. I mean, I didn't know you were YOU till Tom told me, but yeah..' she looked away for a moment 'I know you.'\n\nI was really surprised, and I figured I didn't have a lot to lose at that point so I looked at her, and switched back to Nina's voice and said 'You are so beautiful.' I looked her up and down and shook my head 'Whoever your guy is..' I started.\n\n'There is no guy.' she cut me off, staring intently into my eyes, which were wide open once again. I had minimal social contact with women since this part of my life had started, and I never had any real skill in decoding women.\n\nI swallowed hard, and then 'I... I..'\n\nShe pursed her lips and whispered 'ssshh.' then leaned in and kissed me, our lipstick mingled, she parted her lips and I felt her tongue enter my mouth, I reached down, entirely on animal instinct, and cupped her perfect asscheeks in my hands, pulling her closer and she moaned into my mouth.\n\nI wanted that moment to go on for the rest of eternity. Angie was pressed up against me, her soft lips playing against mine as our tongues danced. Her hushed moans nearly put me over the edge, and I'm sure she felt my hardness.\n\nShe broke our kiss and looked down to the front of my skirt 'Oh my..' she giggled. Her face lifted and she looked back into my eyes and said 'Angel Girl, I need you to do something for me, okay?' This wasn't happening, this couldn't possibly be happening... I was going to wake up at any moment.\n\n'Anything..' I gasped.\n\nShe slowly stepped to the side, and brought her mouth to my ear, and whispered 'Go into the bathroom... and fix your lipstick..' then she softly bit my earlobe, and walked off.\n\nI watched as her perfect ass swayed down the hallway and back into the party. I blinked a few times, then went into the bathroom, and stared at myself, trying to figure out how any of that had happened. I shook my head, and for a brief moment, I thought 'Is she fucking with me? Is this a bad joke?' but I dismissed that thought. There's no way she could be that cruel, I'd never seen her act badly to anyone, why would she start acting like a heartless bitch right now. 'Maybe.. just maybe..' I quietly said, then reapplied my lipstick as Angie had asked before heading back out into the party.\n\nI looked around for her, not seeing her right away, I thought 'maybe she's outside, waiting by her car? Maybe this night is just getting started!' So I left to have a look by the street full of cars, seeing nobody, the doubt crept back in, and I went back into the party. In the worst-case scenario, I had the most beautiful woman at the party making out with me, and that would have been far more than I ever would have expected, but I wanted more, I would have done anything for more.\n\nI stopped in the kitchen, fixed myself another drink, and decided to head back out to the bonfire. As I left the back door of the house, I could see Angie sitting at the fire, looking in my direction. I breathed a long sigh of relief and sat down next to her.\n\n'H you.' I said.\n\n'Hi right back' she replied.\n\n'You know, for a minute there, I thought I died and went to heaven, or wondered if I was having the best dream of my life..' I said, meaning that very seriously.\n\nShe giggled and looked at the few people across from the fire, then looked back at me and said 'That was really nice.' then she looked across the fire again, then back to me.\n\nI took that to mean that I shouldn't say too much about what had just happened, and I could understand that, after all, she had just made out with a guy that was dressed as a woman.\n\nShe asked if I had seen a few people we both knew, and I had mentioned I'd seen some friends. She made small talk, but all I wanted to do was kiss her, hell, I wanted to spread her legs and fuck her right there on the spot, so the small talk was difficult to concentrate on, yet I didn't want to screw up any possible chance to continue being close to her.\n\nIn a bit of time, we were at the bonfire by ourselves, and her voice went low again 'I really enjoyed that, I'm soaking wet right now.' her eyes were as big as saucers.\n\nShe was wet? Did I do that? Oh my God.\n\nAngie was turned on, and I helped put her in this state?\n\n'That was the most exciting thing I've ever done' I confessed 'I can't believe what just happened, I've had a crush on you for a long time..' I truthfully told her. She looked away for a moment, maybe a bit embarrassed, I don't know. I wanted to pull her face back towards mine 'Angie? I asked, she looked back at me and then glanced back to the fire\n\n'There's just us here.' she said.\n\nI looked as well and continued 'I'm serious, I don't know how I got so lucky tonight, I really want to kiss you again.'\n\nShe looked back at the fire, and we were still the only ones there, without looking back at me she asked 'It's just us here, why are you still talking like a woman?' she turned her head to me and waited.\n\n'Umm..' I looked around 'in case someone comes.' I said.\n\n'So what if someone comes?' she said, barely above a whisper.\n\nI shrugged. 'I don't know, I don't want it to be uncomfortable for you to sit by a fire with someone looking like I do right now, sounding like a guy?' I improvised.\n\n'Have you ever done this before? she asked, blinking those impossibly large eyes. \n\n'No, I'm not exactly super socially active these days..' I confessed.\n\n'No, I mean.. dress like this.' she blinked and waited for my response.\n\nI didn't know how to respond, my first thought was to tell a little white lie\n\n'I mean, your makeup is really good.' she said 'Maybe you had a girlfriend or sister or someone do it for you?' she asked.\n\n'I've done this before.' I admitted. 'It's a long story, and it's really hard for me to admit to, but I've been doing this for a while, not just Halloween parties.' I let out a long sigh. If nothing else, I was honest about it, and if I never saw her again, it would hurt, badly, but I couldn't lie.\n\n'What should I call you?' her voice stayed low.\n\n'Nina' I said nervously.\n\n'Nina is a beautiful name, beautiful name for a beautiful woman.' she moved closer to me. 'Nina, do you have a guy?' she whispered.\n\nI shook my head 'No, not ever..' I replied in the same low whisper.\n\n'What about a girl? do you have a girl Nina?' she asked.\n\nI shook my head again, and followed 'not in a really long time.' that was hard to admit to. She leaned closer and our lips met once again, my tongue now pressed into her mouth, and she softly sucked on it, then shortly broke off the kiss, and brushed her hand across my cheek 'Do you have a car out front?' she asked.\n\nWe walked around the house and down the street to where I had parked. I opened the door for her and met her across the seat.\n\n'So...' she started. This time, it looked like she was the nervous one, and immediately a stream of terrible thoughts entered my head.",
        "'So?' I asked.\n\n'I'm not a Lesbian.' she said.\n\n'I know that. You knew who I was before we kissed..' I told her, wondering why any of that would have mattered.\n\nShe exhaled and said 'I don't date a lot, I don't have a lot of relationships. They just.. end badly and I get my heart broken.' her big brown eyes looked pained.\n\n'Angie, I would never in a million years...' I said\n\nShe looked back at me and said 'I know Nina, but listen..' I nodded and let her talk 'Women are beautiful, sexy, soft..' she trailed off 'but I have never been with one. I don't know if a woman would break my heart, but I know a woman wouldn't have..' her eyes moved from mine to my crotch. 'Women don't have these.' she said as her hand reached across and rested on my crotch. I felt electric shocks at her touch and gasped.\n\n'Nina?' she was using my female name, and my eyes went from her hand in my crotch to her beautiful face once again 'Nina, would you think I'd be a terrible person if I wanted to see you. like this? like Nina? right now?'\n\nI leaned back into the seat as Angie slowly moved her mouth up and down my length, she'd make little sounds as she did but I could hardly notice as my breath was ragged and I kept putting my mind someplace else. I never wanted this feeling to stop. This was nothing like the few sexual experiences I'd had with women in the past. She knew how to use her mouth, she knew how to use her tongue, and I was putty in her hands.\n\nShe lifted her mouth and asked 'Do you like this Nina?' as her hand moved up and down my shaft.\n\n'Oh fuuuck yes..' I gasped.\n\nShe grinned wickedly and then returned to sucking, as one of her hands reached up and began fondling one of my breasts, squeezing, then doing the same to the other. I let out a soft, girlish moan, trying hard not to explode in this beautiful woman's mouth.\n\n'Do you like the way I suck your girl-cock Nina? Do you want me to swallow your cum?' she purred.\n\nThis woman was beyond sexy, she was definitely in control and keeping me right on the edge of cumming 'Angie..' I gasped 'I can't last much longer, you feel so incredible.' I didn't even realize that Nina's voice was coming out naturally, I didn't have to focus to sound like her.\n\nI was her, I had truly and fully become Nina. Angie had completed me.\n\nMy hips jerked erratically and I let out a long groan, to which Angie clamped her lips around my girl cock as I sent a flood of cream into her mouth. She flicked her tongue on my sensitive underside till I couldn't stand it anymore, and pulled away. I lay back gasping and watching her as she lifted herself from my crotch, showing that evil grin of hers, and moved her lips to mine. I opened my lips and began moving my tongue into her mouth when I felt a warm flood of something enter my mouth.\n\nShe closed her mouth and broke the kiss, then looked into my eyes and said 'show me.'\n\nI opened my mouth, so she could see the pool of my cum inside. She put her lips to mine once again and I pushed some of the load back into her mouth. I felt her swallow hungrily, and I followed, sharing the load she'd so expertly coaxed from me.\n\nThere is no possible way things could have gotten any better.\n\nBut I was very wrong about that.\n\nWe embraced in the car, it felt like I had used up all of the good luck I would ever have for the rest of my life with this incredibly beautiful, sexy woman, when she said 'Nina, tomorrow I want you to come to my house and fuck me.'\n\n'We can go right now!' I immediately said, still in shock.\n\n'Right now isn't a good time for that, and I'll explain more tomorrow, but I promise, everything is fine, trust me, okay Babe?'\n\n'Okay, but I don't want to let you go like this tonight, I really want to make you feel good too.' I said.\n\nShe laughed and said 'Baby, you just DID make me feel good.'\n\nShe gave me her number and asked that I promise to call her the next day. I walked her to her car and we shared a long passionate kiss before she got in, she rolled down the window 'Nina, tonight was incredible, and I want to spend a lot more time with you. I think we would be really good for each other. I didn't think anything like this could happen until tonight. I hope you feel the same?'\n\n'This has been the most incredible night of my life Angie, I feel like the luckiest girl on the planet' I said.\n\nShe smiled and pursed her lips, inviting me for one last kiss for the night, which I immediately took advantage of. 'See you tomorrow? Promise?' she asked.\n\n'Just try to keep me away Girl..' I smiled back at her, and she drove off.\n\nI went back into the party for just long enough to see Tom and thank him for putting on another great Halloween blast, he laughed and said he wondered if I passed out under one of the trees in the backyards, and I told him 'I just took a walk to sober up a bit.' I said farewell and I drove home, happier than I could ever remember being.\n\nThe following day I woke a bit after 9am and my first thoughts were of Angie. I showered, ate some breakfast, and thought about calling her, but it was still early. I settled on calling at noon, and she answered on the first ring\n\n'Hi Nina!' she sounded full of energy.\n\n'Hi there, I hope you're not feeling too hungover after the party?' I asked in Nina's voice.\n\n'No, I really didn't drink much last night, I'm not much of a Drinker. How about you? Are you hungover?' she asked.\n\n'I'm okay, I needed a little liquid courage last night, I met the most incredible woman..' I said.\n\nShe laughed and asked 'Oh really do I know her?'\n\nShe asked me if I had some time to talk, and I said I'd been waiting to talk to her for hours, she laughed warmly again and asked if I could come by her place a little after 3pm, to which I eagerly agreed. 'Should I bring anything?' I asked.\n\n'Just bring Nina..' she said and hung up.\n\nI put my phone away and just had the biggest smile, I couldn't believe how my luck had changed. The craziest thing is, I went to that party with absolutely no intention of 'hooking up. I just went to see how things would go, and yet somehow I managed to have the most incredible night of my life, with possibly the most beautiful woman I had ever known. I don't know what I could have done to deserve.. wait a minute.. 'Just bring Nina.'?\n\nI guess I hadn't thought about this more than 'She said she wanted me to come by today and fuck her.' but all of that was a lot more complicated by the fact that I was Nina last night, but right then, a little past noon on a Saturday, Nina was someplace else. Did Angie want me to come over? or did she want Nina coming over? I replayed all of our conversations from the previous night and decided that I'd arrive as Nina. Truthfully, it felt like Nina knew Angie much more intimately than the guy who had first met her a couple of years ago. In the worse case situation, I could laugh and change into my guy clothes, and things would be fine. But I hoped I wouldn't have to.\n\nI packed up the outfit I loved the most, my pencil skirt, long-sleeved white blouse, and the new bra and the breast forms I just purchased, finally selecting my favorite black stockings, lacy garter belt, and black panties. My standard process since I started going out dressed in public would be to leave the house in my guy clothes and then stopping off at restroom in a nearby park, where I could quickly change clothes and throw my wig on. I get back into my car and then drive to one of the bigger retail store parking lots, and then just put my makeup on in the car, and be Nina.\n\nI went with a much less dramatic look than I had for the party last night, but kept to my favored red lipstick, as I approached Angie's house I started wondering 'Should I just waltz up and ring the bell? Should I call when I arrived? should I call and tell her I'm dressed?' I figured I was stressing too much, and just called her as I got close.\n\nShe answered on the first ring, her voice lively 'Nina?' she asked.\n\n'Hi Sexy..' I answered as Nina.\n\n'Are you almost here?' she asked.\n\n'Mmmhmm' I responded ' then paused 'Babe, I didn't know how you wanted me to dress for this, and well.. anyway, I don't have a lot of..'\n\nAngie cut me off 'I don't care what you have on, because it's all coming off as soon as you get here..' \n\nI parked on the street across from a nice house, that had a very beautiful woman standing at the front door, with a big smile on her face.\n\nThis made me VERY happy.\n\nI slipped my legs out of the car and put on my heels, stood, and made my way up the long walk to her house. Angie put her mouth into the shape of a whistle and I blushed quite a bit at that. She wore a very sexy black mini-dress and open-toe sandals with what I'd guess to be 4-inch heels. She opened the door for me and said 'Well hello Beautiful!' and we embraced in the doorway.\n\n'You look gorgeous, my God Angie, you always look so sexy!' I breathed into her ear.\n\nShe gave me a brief kiss, said 'we're here alone, let's get comfortable.'\n\nI followed her into the living room and looked around at the furnishings, it was clear Angie didn't live here by herself 'Your house is incredible!' I said.\n\n'My Parent's house, I'm just here for a bit..' she said, looking back and following with 'Something to drink?'\n\nI nodded 'sure, anything is fine.' she disappeared into the kitchen and came back with two glasses of water, sitting next to me on the couch, she kissed me again\n\n'So Nina..' I studied her face, and she smiled, saying 'Everything is fine! Relax!'\n\nI nodded 'So like I was saying..' I settled back and listened intently.\n\n'Last night was fantastic, that was the first time I'd ever done anything like that. When Tom brought you over to see me, I knew I didn't know you, but I felt like I'd met you before, or met someone you were with before. A few minutes later, Tom came back over and whispered who you were, and I really didn't know how to process that. I mean, you're hot.. look at you..' my face burned again. 'And I thought, how brave is this guy to dress up like that, and to be able to pull it off, Nina, you could live full time as a woman and very few people would ever know the difference.' That statement shocked me, I don't think I had ever really considered doing that, but. She continued 'I knew I wanted to talk to you and find out more, and then we almost bumped into each other by the bathroom, and you seemed so soft, like, not that bullshit masculinity nonsense. It really turned me on. This guy definitely doesn't look like a guy, and he's definitely not acting like a guy.' I nodded at her, and let her continue 'when we kissed. I didn't plan that.' I watched her carefully.\n\n'Me either.' I said simply.\n\n'Nina, I want to try something with you, I think it's something we'd both like, but I want you to think about it, and you don't have to give me an answer today, I don't want you to ever feel like I'd ambush you, or force you into making a big decision without taking your time to consider everything.'\n\nAt this point, I was wondering what she was doing She'd told me everything was fine, and not to stress, so I was trying to stay calm.\n\n'Do you like guys?' she asked.\n\n'It's complicated..' I thought for a second 'I told you last night, I'd never been with a guy, I'm not sure if that's something I want or not, I do know I want you, very badly Angie..'\n\nShe smiled then asked 'So, you dress up, because?'\n\nObviously, this was a tougher question to answer.\n\n'So my love life has been no life.' I started 'It's always felt like the harder I'd try to meet someone, the further it ever was to actually happening. So I invented Nina to kind of be the kind of girl that my other-self would love to know. Nina has become the closest thing I can picture to the kind of women my other-self would want to be with.'\n\n'So, I know it sounds redundant but.. you like girls.' She asked.\n\nI nodded 'One in particular..' I said, hoping that I wasn't pushing too hard too soon, the truth was, I didn't want to lose the chance to spend more time with her.\n\n'Nina, I think you're really sexy, and last night was great. I don't want it to be the last. But would you think I'm a horrible bitch if I asked if we could continue on, as Angie and Nina? and not Angie and your 'other-self?' \n\n'So you want a girlfriend, well, mostly a girlfriend?' I asked, absolutely shaking with excitement, I would happily enter that kind of relationship with her. In fact, it felt like a safer thing to do than to tear off Nina's clothes and take her as my other-self.\n\n'I want a girlfriend, with your cock.' she purred.\n\nI nodded and said 'I would love that, what do we do now?'\n\nShe stood, and held her hand out to me. I took it, and stood 'Next, we go upstairs, and you fuck me.'\n\nShe led me into her room, turned, and said 'my Parents wont be back until tomorrow. They spend weekends at our cabin property. We have until tomorrow night to get to know each other better.' With that, she reached out to my blouse and started unbuttoning it. She looked curiously at my bra and smiled 'I wondered what you were using to give you tits last night when I gave them a squeeze.'\n\nI smiled and said 'My turn!' and turned her around unzipping her dress before she pulled it off her shoulders and slid it down her tight body, landing on her bedroom floor and turning back to me. 'I hope you never get sick of hearing me tell you how beautiful you are.' I said.\n\nShe smiled back at me, and unfastened her bra, letting it fall to the floor as well. Her C-cup breasts sat high on her chest, they were perfect, certainly far more incredible than any other partner I'd ever had. I reached out and cupped them, pushing them together, and then playing with her nipples, which quickly stiffened into perfect nubs. 'Your tits are perfect..' I hissed. 'I wish I had tits..' her eyes closed partially as I softly played with them.\n\n'Really? she asked 'Do you really want titties?'\n\nI paused a moment 'Sometimes.. right now I wish I did, I'd love to press my own tits up against yours. I'd love to know what this feels like.' and I leaned forward and took one of her tits into my mouth, circling the hardened nipple with my tongue and sucking gently.\n\n'Oooooh' she moaned. 'that feels so nice..'\n\nI smiled and moved to her other tit and did the same 'My God, you're perfect Angie.' she smiled as I reached down and pulled her panties down her legs.\n\nAll of her pubic hair had been shaved, which I've always found sexy. Either completely shaved, or nearly so, as I kept mine. As I admired her sexy body she 'hmph'd' at me.\n\n'Why am I the only naked person here?' she giggled.\n\nI unzipped my skirt and pushed it down my legs, wiggling my hips as I did.\n\nAngie let out a low whistle and said 'Nina, what a naughty young lady you are..' seeing my garter belt and stockings.\n\nI grinned at her and asked 'staying or going?' as I took one of the clasps in my hand.\n\nShe shook her head and said 'staying, definitely staying..'\n\nThat made me smile, I wanted to leave as much of my lingerie on as I could. I wanted to maintain as much of my feminine persona as possible for this. Would this be my first Lesbian experience? It felt a bit like that, but not completely. The truth is, as much as I wanted us Girls to make each other feel good, I wanted nothing more than to sink my 'girl cock' into her pussy.\n\nI closed with her once again, kissing her deeply, and caressing her tight asscheeks, which felt like silk in my hands. I slowly spread her cheeks apart, wanting to expose her, wanting her to feel as if no part of her body was still private. She pulled me backward and we climbed onto her bed, where we began kissing once again.\n\n'As I recall..' I whispered in her ear 'there were a few things I had planned to do to you today.'\n\nShe giggled at that. 'Oh, such as?'\n\nI kissed her neck, and began slowly moving my mouth down to her tits 'well after I finish tasting these wonderful tits once more, I'm going to make you come with my mouth.'\n\nHearing this caused her to shudder a bit.\n\n'and after I've made you come with my mouth, I'm going to fuck you.' I said in as sexy a voice as I could manage.\n\nShe sighed at that and asked 'fuck me with your girl cock?'.\n\n'I'm going to fuck you with my girl cock.' was all I replied.\n\nI looked against the wall to admire the sight of Nina gently sucking Angie's tits, but realized, the only mirror in the bedroom sat atop her bureau on the other side of the room, and only reflected an area of the bedroom higher than we were. I'd have to fix that later, no matter right now though. I might not be able to look at the reflection of the two Girls on the bed, but I had the best seat in the house. As I made my way down to her shaved pussy, her musk became unmistakable. It had been years since I had done this, a bit of fear entered my thoughts 'I hope I can make her feel good.' I thought.\n\nI began kissing her pubic area, then moved to her thighs, spreading her legs apart a bit, so I could kiss her inner thighs, and slowly move towards the dark lips of her exposed pussy. I let my tongue drag softly along the length of her lips, stalling near where I hoped to find her clit.\n\nAngie would routinely tense up, which had me wondering what it was I may have been doing to cause this. She'd tense as soon as my tongue would make contact, then twitch when I'd kiss her thighs, again when I licked in the area of her clit. I gained confidence, although I really couldn't determine a particular pattern to maximize her enjoyment, it seemed like almost everything I was doing was working, so I just kept it up. Before long, I felt her fingers reach into the hair of my wig, and she thrust her hips forward, pressing her pussy against my mouth. I continued moving my tongue against her, hoping to keep her twitching and tensing up, and quickly after she made the first noises since I had started.\n\n'mmmMMmmmmMMM aaaaaahhhh' she then pulled me tightly into her pussy, I flicked my tongue as chaotically as I could until she let out a gasp and pushed my head away.\n\n'Too sensitive!!' she gasped 'enough! enough!!'\n\nI had just made this incredibly hot, horny woman come with my mouth, and I don't mind saying I was quite proud of myself. I rose away from the wet mess I had created of her pussy, glistening and her lips slightly swollen. I wanted to plunge myself into her, but I knew she'd need a little time. I looked up at her, and she was still shaking a bit, and breathing hard. 'Did that feel okay?' I asked.\n\n'Oh my God!' she panted 'Nina, that was incredible. I haven't had anyone do that in a long time, and I've never had a beautiful woman do that.'\n\n'Well, then I don't mind admitting that Nina has never done that either.' I grinned at her. I wiped my face a bit and laid down next to her, with both of us quiet for a time.\n\nI still couldn't figure out how lucky I had gotten and wanted to say something when she asked me 'Can I suck your girl cock again, and make you hard, so you can fuck me?' which were words to my ears.\n\n'Get up on all fours.' she said. I thought that wouldn't be the best position, but got on all fours as she asked.\n\n'Keep your head down on the bed.' she said, and as I did, I felt my ass stuck up in the air. It was a vulnerable position, but it felt sexy. I'd seen plenty of porno scenes where the girl was positioned exactly like I was now. She got on her knees behind me and started to stroke me from behind. I felt her lips on my balls, and then she asked 'Is this okay?'\n\nI let out a breathy 'yesss, please don't stop.'\n\nShe continued to slowly stroke me while alternating between licking my balls, and then softly sucking them. Soon after, she bent my girl cock back between my legs and took it into her mouth. I'd never had anyone do this before, and my legs became unsteady, it felt fantastic but more than that, I felt truly exposed. I felt like she was preparing me for a guy to enter the room and sink his cock into my 'pussy', it felt very feminine in this position. Additionally, this was the first time anyone had seen my 'pussy' and Angie was close enough to it at this point that she could have easily slipped her tongue inside me.",
        "She continued to slowly suck up and down my length, and I briefly wondered if that subject may ever become part of our conversation. I wondered what I'd say.\n\nAngie took her mouth off of my hardness and quickly followed with 'I want you inside me Nina, I want you to fuck me right now.'\n\nWhatever the Lady wants.\n\n'Roll over' she said. 'I want to ride you.'\n\nI rolled and she smiled at me, saying 'I've never let a girl fuck me before..'\n\nShe climbed into position, and leaned forward, her tits pressed against my bra and she reached back with a hand and brought me to her entrance.\n\n'Ready?' she asked.\n\n'Fuck yes..' I replied.\n\nShe eased back, her pussy swallowing my girl cock until it was fully inside her. I held my breath and concentrated, trying hard not to cum right then and there. 'Nina.. ' she hissed into my ear 'You feel so nice inside my pussy..' and she began rising off until only the head remained inside, then she eased back down. 'soo nice..'. I held her hips as she moved up and down and watched her face. Her big brown eyes were closed as she fucked me 'ohh fuck that's nice..' she sighed. If I would have died on the spot I would have died happy. Never before in my life had I ever felt so completely happy. I was having sex with the most beautiful woman I'd ever been with, by a long shot, it wasn't the clumsy, mechanical sex I'd had in the past, this was pure sex, this was the kind of sex I'd dreamed about. Not only was I having sex with this beautiful woman, Nina was having sex with her. I couldn't really focus on that too deeply at the moment, but it did cause me to question what that may have meant.\n\nShe quickened the pace and began bouncing on my girl cock with clear intent.\n\n'Angie, I'm not going to last much longer if you keep this up... it feels too good.' I cautioned.\n\nShe kept right on going 'Angie, Babe, I'm not gonna last..'\n\nShe opened her eyes and smiled at me 'It's okay, we have all night Girl..'\n\nAnd with that, I began filling this beautiful woman's pussy with cum, with Girl cum. I convulsed upwards into her, and pressed her hips down tightly against me, forcing myself as deeply as I could into her until I was drained. I opened my eyes and she was looking directly into my face her eyes beaming at me\n\n'I love you Nina.' she said.\n\nShe rolled over, pulling me with her until I was on top of her and we kissed. 'That was incredible.' I said 'No one has ever made me feel like this. I.. I..'\n\nShe raised her finger to my lips to shush me 'Baby, do you think you could help me clean up down there?'\n\nI nodded, and then moved down her body, licking her pussy once again, slipping my tongue inside her, and scooping out a thick glob of Girl cum into my mouth. I held it while searching for more, finding none, I lifted my mouth from her pussy and she reached for me, urging me back up, and finding myself staring into her eyes once again as I moved my mouth to hers, she opened her mouth, and extended her tongue, waiting for her share.\n\nWe spent the rest of the afternoon and night having sex, not rushing with so much time for ourselves. We talked quite a bit and I asked her about having said she loved Nina. 'What did you mean?' I asked 'I'm confused because, Nina, and my other-self.. we share the same body. I'm not Nina all the time.'\n\nShe nodded at my words and simply asked 'Would you like to be?'\n\nI thought about that for a moment and said 'Well, if I could spend all my time with you, like this, that would be a hard offer to pass up.'\n\nShe giggled and said 'I meant it, I love Nina, and I love being with you. I know you are a guy, but like this, like you are right now, with me right here. I feel like you're more than a guy, and more than a girl, does that make sense? You're sexy, God, you're so sexy, and I feel so wicked having sex with you, and that feels so good. I love your cock, and I love your girl cock inside me.' she paused, then turned serious, 'I don't want to hurt you, but I don't know how things would go if I had a relationship with your 'other-self' and that may be selfish of me, I don't want to be heartbroken again. It feels like Nina would never do that to me, and I want Nina to know, I would never do that to her.'\n\nI nodded back at her, that was a lot to take on.\n\n'So, Girlfriends then?' I asked.\n\nShe smiled widely up at me 'Yes absolutely! yes!' she cried.\n\n'I love you too Angie!' I said, and she hugged me tightly, nibbling on my earlobe 'Babe?' she paused.\n\n'Yes?' I answered, wondering what this amazing woman had to say next.\n\n'We need to get your ears pierced Babe.. Don't you think?' she asked, matter-of-factly.\n\nI smiled and said 'I've always wondered what I'd look like in a sexy pair of hoops..'\n\nI wasn't sure what would happen with Nina and Angie, I knew that she made me feel better than any other time in my life, and I knew I wanted this to last a very long time. I hoped she felt the same. I knew there would be challenges, but right then, at that moment, lying there next to my Girlfriend, everything was perfect in my world."
    ],
    "authorname": "SilkeeSmooth",
    "tags": [
        "crossdressing",
        "exhibitionism",
        "oral sex",
        "lingerie",
        "girlfriend",
        "intercourse"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/down-the-rabbit-hole-ch-04-2"
}
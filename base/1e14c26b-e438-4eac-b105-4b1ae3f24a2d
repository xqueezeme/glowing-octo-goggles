{
    "title": "The Theater Student",
    "pages": [
        "There she was, standing by the roadside in the headlights of my battered old truck. Right away I noticed that she was stark naked. Not a stitch of clothes on; in her birthday suit.\n\nShe wasn't actually hitchhiking, just posed with arms crossed under her bare breasts. And nice breasts they were, with large dark areolae that I've always found so erotic. And that wonderfully small waist, what can I say? Did I mention her long sleek legs? \n\nI pulled over and leaned across to roll down the window, wondering what catastrophe had befallen the woman. But she just opened the door, got in, and sat gazing thoughtfully at me.\n\nTrying for a witty opening line, I said, \"Uh, I guess you know that you're naked as a jaybird.\" She made no response. A trace of a smile crossed her face.\n\n\"Miss, I don't think there are any nudist clubs around here, if that's what you're looking for.\" \n\nAgain nothing. So we just sat there, the naked woman and me. She appeared to be my age, about 25, with short dark hair cut in lengths. The dashboard lights revealed full lips and large expressive eyes. Below the waist this woman was all natural, sporting a dense thatch of pubic hair. No landing strip or bikini wax for her.\n\nFinally she spoke. \"You're kinda cute. Do you have a big dick?\"\n\n\"Well, it has gotten some favorable comments, yeah.\"\n\n\"I like to suck big dicks,\" she smiled warmly.\n\nThen it finally dawned on me. \"Oh, okay, I get it. Did Corey hire you? Did that lame-brain put you up to this?\" Corey, an incurable prankster, had been my best friend since high school.\n\n\"Does Corey have a big dick? Maybe I could suck his dick too.\"\n\nWhat's wrong with this picture, I kept thinking. It's bound to come to me. \n\n\"Do you like anal sex?\" she asked inquisitively, in the same tone that you might ask someone if they like apple cobbler. But no, the lady said anal sex. \"I love to have a man fuck me in the pussy, you know, but sometimes a girl likes it in the ass too. I wonder why that is?\" \n\nThat damn Corey, I thought, I'm gonna wring his fool neck. He's probably waiting along the roadside, ready to laugh like a hyena the minute I try to grab this woman. This genuinely weird woman.\n\n\"Well,\" she said pensively, as if she had arrived at a critical decision, \"if you aren't going to fuck me in the ass, you might as well take me home.\" \n\n\"Just out of curiosity, where's home?\"\n\n\"The Lowery place, of course.\"\n\n\"Their cottage here at the lake? But there's no one there. They usually don't show up for another month.\"\n\n\"Either fuck me in the ass or take me home!\" Clearly an ultimatum.\n\nStill expecting Corey to leap out and give me the old horselaugh, I put the Ford into gear and drove the few hundred yards down to the Lowery place. I pulled into their short circular drive, surprised to see that there was a light on, a lamp in the living room.\n\nAt the walkway, the woman got out without a word and walked to the cottage. She swung her hips so provocatively, her delightful ripe ass swaying just as nature had designed it. To be sure I got the message, she glanced over her shoulder and gave me a saucy smile, full of carnal promise.\n\nLet's be honest. Show any red-blooded man a captivating derriere like that, and he has no choice but to pursue it like a bull moose in rut. So I got out of the truck and followed her up the walkway. But then she went inside, and I could hear the dead-bolt lock on the door close with a loud thunk. A moment later the lamp was turned off. The cottage was now dark and silent.\n\nI stood there on the walkway feeling like a complete fool, still trying to understand it all. Who the hell is she? I thought. Did that numb nuts Corey put her up to this? \n\nNeedless to say, I didn't sleep well that night. The next morning after breakfast, I had an idea. I don't often get those, but this one was inspired. I picked up the phone and called Wally, who's been the postmaster around here, they say, since Calvin Coolidge was president.\n\n\"Aah yeah?\" he answered the phone.\n\n\"Say, Wally, this is Ryan over at Basin Harbor. I noticed a light on at the Lowery cottage last night. Is someone staying there now? Getting mail delivery? The Lowerys don't usually arrive until late July.\"\n\n\"Why, yeas,\" he mumbled, \"young woman came by the other day to let me know she'd be there. It's Kathryn Lowery's niece, I b'lieve, name's Sara. Such a sweet young lady.\"\n\nRight, you could see that she was a sweet young lady last night, I thought. Thanking the old geezer, I hung up and planned my next move.\n\nSince moving out to Basin Harbor to concentrate on graphic design work, I had taken up gardening. My specialty was tomatoes, which I start in flats in early March. My favorite varieties, Early Girl and Celebrity, were just now ripening. Why not drop by the Lowery cottage with a basket of tomatoes? As a neighborly gesture, you see.\n\nI showered, shaved, and put on my best jeans. I even dabbed on a bit of after-shave. You never know.\n\nThe door to the Lowery cottage opened after my third knock, and of course it was she. \"Yes?\" she smiled pleasantly. But there was not a glimmer of recognition. I waited, smiling in return, but she only offered another \"Yes?\"\n\n\"Hello!\" I finally managed. \"I'm your neighbor, Ryan. The postmaster mentioned that you were down here, so I thought you might like some fresh tomatoes. I grow them myself.\"\n\n\"Oh how nice! Please come in. I was just making some chamomile tea. You must join me!\" She extended her hand. \"So nice to meet a neighbor. I'm Sara,\" she said bashfully, a faint blush on her cheeks. \n\nAs I entered, I saw that my nocturnal siren was now wearing a long-sleeved blouse, buttoned almost to the top, and loose cotton pants. Ah, the charms hidden away under all that fabric, I thought woefully.\n\nWe sat on the patio overlooking the lake. It was a perfect summer day, a cool breeze blowing white fluffy clouds around. Over tea, Sara told me that she was a graduate student in theater at the state university. She was here to write a history of theater in this region.\n\n\"It's so peaceful and quiet here, I love it. I'm getting so much work done.\"\n\nI watched Sara closely. Only in a nunnery would you find a woman more prim, more uneasy in a man's presence. The blush on her cheeks came and went. Each time I gazed at her intently, she turned away, fully abashed by the fact that a lusty young man was eyeing her. Can this be any weirder? I thought.\n\nFinally I had to say it. \"You know, Sara, I saw a woman out along the road near my cabin last night. Wasn't that you?\"\n\n\"Oh, no, it couldn't have been me. I always lock the doors and stay in after dark. A girl can't be too careful, you know.\" \n\nAnd so it went. I dropped hints that I'd like to invite her to my place for dinner, or take her to a movie. But Sara just swatted those hints away like annoying mosquitoes. Still blushing, she said, 'Ryan, I've always been a homebody. I know I should be more sociable, especially with...\" she struggled to say the word...\"with men, but well, that's just the way I am, you see. Even just sitting here talking with you is difficult. Can you understand?\"\n\nAfter a long awkward pause she finished, \"But I hope we can be friends.\" That's what she said. Friends.\n\n\"You don't have an identical twin sister by any chance?\" I asked.\n\nShe finally laughed, a most beguiling laugh at that. \"Oh no, what on earth would make you think so?\"\n\nI finally left, as perplexed as ever. But at least I had a new friend.\n\nThat evening, just after dark, my cat Mojo ran to the screen door that leads to the deck. He looked out, a low growl in his throat. I drew back the door to see what had alarmed the fur ball. And there she stood, her butt against the railing. Sara was once again naked; in the altogether.\n\nWe gazed at each other for a few seconds. \"Look, Sara, \"I said, \"what th' heck is going on? Why do you..?\n\nBut she came to me in two steps, placing her finger on my lips to shush me. \"I'm not Sara,\" she said in a throaty voice, \"I'm Lara. And you still haven't fucked me.\" \n\nHave you ever noticed how a man's ability for rational thought decreases in direct relation to his proximity to a naked woman? And when that woman is young, possessed of silky skin, with rich musky aromas emanating from her, you can't expect him to be sensible. That's just the way it is.\n\nBut I must be completely honest. A few moments later in the bedroom, after I had quickly stripped naked and Lara was sucking my cock with passionate gusto, I knew. Even after she drained me dry and then impaled herself, burying my still-hard manhood in her pussy, explanations bounced around in my head. But oh, her incredibly smooth buttocks felt so wonderful as she rode up and down my cock. Good Lord that woman was delightful.\n\nWe switched positions, I now mounting her, without my cock ever leaving her soaking wet pussy. Our climax was pure animal frenzy. \n\nEven then, after a moment's rest, I rose up and moved my hips to her face. \"Suck me again,\" I murmured. I watched Lara in fascination as she acquiesced: her face gleaming with oily sweat; my cock, coated with all manner of bodily fluids, sliding easily past those full ripe lips.\n\nDammit, how can you do something so wrong? I thought as she cleansed my manhood with her mouth. But I was out of control, ruled by my base instincts. Smiling at her in pure wanton satisfaction, I whispered, \"Don't stop.\" She continued to pleasure my cock, licking it and sucking the base of the glans with practiced ease. It quickly swelled and hardened yet again.\n\n\"I recall you wanted to be fucked in the ass,\" I heard myself saying. She smiled as I turned her over, moving her into the position. I used my tongue to make her ready down there. At my bidding Lara likewise wetted my cock with her saliva. When I once again penetrated her, it was easy and ever so satisfying. What a garden of carnal pleasure was this woman! \n\nA few moments later, having discharged my bolt for the third time, we both collapsed on the bed. I gazed at her in fervid amazement. Sex had transformed her. She was no longer Sara or Lara, just Woman, who can give a man the most wonderful experience in life.\n\n\"Ryan, honey, I need to clean myself in the bathroom now,\" she murmured as she rose from the bed. \n\n\"Don't keep me waiting too long,\" I grinned. But after a few minutes there was no sound in the house except for my heavy breathing. I looked in the bathroom and then everywhere else, but Lara had vanished. Just like that.\n\nNow that my cock was satisfied, I became racked with guilt. Oh you hound, I told myself, have you no shame? The worst part was that I had known all along what was wrong with her, you see. The woman must have been Ambien sleepwalking tonight and last night. Or worse still, she's a schizophrenic: the timid Sara, the shameless Lara in the same body. I'd seen the movie Sybil; I knew all about it.\n\nBut did I try to soothe and take care of her? To be a gentleman and see her home safely? No, I just wanted to ride her like a pony. To stuff her like a Christmas turkey. Was I totally without morals or scruples? The answer was obvious.\n\nI was tempted to walk down to her cottage. But fearful of just who I might find there, I decided against it. Another restless night passed. \n\nEarly the next morning, I picked a basket of strawberries and once again knocked on the door of the Lowery cottage.\n\n\"Oh good morning!\" Sara greeted me, once again covered in shapeless garb; once again blushing like as schoolgirl.\n\n\"Today I've brought strawberries,\" I smiled. She invited me in, and we repeated our ritual of tea and idle chitchat. I could not detect the slightest hint of the sex goddess with whom I had gone around the world last night. Just a shy young lady, not very adept at social skills.\n\nMore than once I wanted to tell all, to get it out in the open. If she had been Ambien sleepwalking, she ought to know. But something stopped me. I decided that I'd better think this through before confessing to my heinous behavior.\n\nAfter a while I bade Sara goodbye. As I was walking back to my cabin, an approaching BMW roadster slowed, passed me, then stopped and backed up to where I stood. At the wheel sat Kathryn Lowery. She was in her fifties, with eyes and hair the color of steel, and a personality to match.\n\n\"Aren't you Ryan?\"\n\n\"Yes Ma'm. I'm living in the old MacDonald cabin. I was just visiting your niece Sara down at your cottage. I thought she might like some strawberries.\"\n\n\"I see.\" Was it my imagination, or did her eyes narrow slightly? \"Well,\" she went on, \"I was over to Burlington, and thought I'd drop in to say hello. Good day!\"\n\nWith that she sped off, but a moment later slowed, turned the car around, and drove back toward me. I didn't like the looks of it. By now I had reached my cabin. She pulled into the driveway and got out, saying, \"Ryan, I'd like to have a word with you, if I may.\"\n\nI invited her into the living room. \"Could I offer you something to drink, Mrs. Lowery?\" I asked nervously.\n\n\"No...wait, yes, some brandy if you have it.\"\n\nI brought her a small apricot brandy, feeling a cold sense of foreboding. She took a sip; then, \"So, you've become acquainted with my niece?\"\n\n\"Yes Ma'm. I've taken her some fruit and vegetables from my garden. She's a very nice woman, really intelligent, quite likable,\" I babbled on.\n\n\"Yes of course,\" she said, fixing me with those steel gray eyes, \"Ryan, I'm not a woman to beat around the bush. And I didn't call on you just for some of this mediocre brandy. I need the answer to a question. Have you had sex with my niece? Tell the truth.\"\n\nOh jeez, I thought. She know about her niece's condition. And she can tell just by looking that I'm the kind of low life who'd take advantage of her. What to do?\n\nYou don't lie to a woman like Mrs. Lowery, or tell her to mind her own damn business, and live to tell about it. Taking a deep breath, I confessed. \"Yes Ma'm, I've slept with your niece.\" Boy have I ever.\n\n\"I thought as much,\" she said, drumming her fingers on the arm of the sofa. \"When you had sex with her, was she, shall we say, different from other times that you saw her?\"\n\n\"Yes Ma'm, I'm afraid she was.\"\n\nDraining her brandy, she said, \"Well, young man, you'd better come with me.\"\n\nNothing was said as we left the house and got into her car. There's bound to be a law against what I did last night, I thought. I could see the headline now: Basin Harbor Man Gets Maximum Sentence.\n\nInstead of the sheriff's office however, Mrs. Lowery drove to their cottage and pulled up to the walkway. She got out, saying \"Follow me.\" She entered the house without knocking. We found Sara working at her laptop on the dining room table, still sipping tea.\n\n\"Why, Aunt Kathryn!\" she smiled, \"what brings you down this way? My goodness, I'm having so much company today!\"\n\n\"Niece,\" said Mrs. Lowery, \"I need to talk to you about something.\"\n\n\"Of course,\" Sara said, a bit flustered as usual, \"Could I interest you in some tea? It's Darjeeling, Auntie, the kind you like so much.\"\n\nSo again we sat drinking tea. Mrs. Lowery glowered at Sara. \"Niece, I'll get to the point. Have you been playing your Sara-Lara game with this young man? You needn't lie. He's already told me that you two had sex.\"\n\nSara paused and eyed the older woman. \"Not that it's any of your business, but yes, Auntie, I have.\"\n\n\"Well, don't you think you owe him an apology? Or at least an explanation. Good Lord, girl, I just don't understand you!\" Turning to me, Mrs. Lowery said, \"She's done this before, you know.\"\n\nDo you remember those Jekyll and Hyde movies, when Dr. Jekyll changes to Mr. Hyde? Something like that now took place before my eyes. The younger woman turned to me and smiled warmly. But gone was the shy awkward Sara, always blushing and ill at ease. Now I was seeing Lara, a self-assured woman who relishes life's pleasures. Not least of which are those of the carnal nature. \n\n\"Ryan,\" she began, her voice an octave lower, \"I've been doing regional theater for the past few years, and just love acting. What I really enjoy is the role-playing. Becoming, you know, different characters with totally different personalities. And well, just for practice, I sometimes do role-playing even in real life.\"\n\nShe went on, \"I'm not schizophrenic, and haven't been sleepwalking. The last few days I was just playing two of my favorite roles for you: Sara the shy insecure girl; and Lara the ...well, not to put too fine a point on it, Lara the slut.\"\n\nAnd doing a great job of it, I thought. \n\n\"I love both characters, but especially Lara. When I'm playing her, I have no choice but to abandon all my inhibitions, to become wild and shameless, because that's the kind of woman she is. She's also a hopeless tease, which you saw the night you met her. It's such a turn-on to play Lara. But Auntie is right. I did mislead you. Will you accept my apology?\"\n\n\"Of course,\" I said. \"But only if you'll forgive me.\"\n\n\"Oh? For what?\"\n\n\"Last night, Lara, I was sure that you were sleepwalking, or that you were a schizophrenic. And, I'm ashamed to say that I did not do what any responsible person should have done.\"\n\n\"On the contrary, Ryan,\" she smiled mischievously, \"you did exactly what you were supposed to do.\"\n\n\"Hmph!\" Aunt Kathryn gave us a grumpy look and took another sip of Darjeeling.\n\nSeveral days later I was on the deck, watching the sun set over the lake. It was a glorious display, finally ending with the warm golds and reds fading to purple and gray. The cackle of loons echoed across the water, now as still as glass. It was almost dark when I glanced over to the steps leading up the deck. Lara stood there watching me, her nude body in profile: the taut breasts, the generous tuft of pubic hair at her midsection.\n\n\"Hello, sailor,\" she smiled. \"Looking for a good time?\"\n\nI just gawked as she came to me and put her arms on my waist, drawing our hips together. \"Look, Miss...Miss..?\" I stammered.\n\n\"Call me Lara,\" she purred.\n\n\"Please, uh, Lara,\" I struggled for breath, \"you're a pretty lady and all, but good gosh, we've never even met, and here you are naked!\"\n\nLara paused, her eyebrows arched in surprise. \"Look, let me introduce myself. My name's Brian,\" I went on, struggling for words. \"And the truth is, what you're doing is making me really nervous. I wish I wasn't this way. But, well, in a situation like this I never know what to do. I'm not very good around women, you see.\" By now my body was trembling. I tugged at my collar anxiously.\n\n\"To be honest, I've no experience with women at all. Couldn't we just talk for a little while?\" I asked timidly. \"I could make us some tea.\" \n\nDo you remember those Dracula movies, the look on Count Dracula when he finally sees a tender neck to sink his fangs into? Just that sort of look came to Lara's face as she recognized the game. Her dark eyes smoldering, she drew her tongue across her lips in eager anticipation. And like a vampire she fell on me. \n\nI begged her to be gentle with me, but she was not. I didn't want to lick her pussy lips and clitoris, but she gave me no choice. I was mortified when she ordered me to fuck her in her luscious ass, but somehow I managed to do it. Several times, in fact. Lara took poor innocent Brian's virginity, showing him a world of sensual pleasures that he had never known. She dragged him to the bedroom a boy, but he walked out of there a man.\n\nA few days later, Sara invited me to join her acting troupe. Like her, I've discovered that playing a role, taking on a different personality, can be fun. Try it sometime. "
    ],
    "authorname": "CAP811",
    "tags": [
        "anal sex",
        "seduction",
        "schizophrenia",
        "male virgin",
        "his first time"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/the-theater-student"
}
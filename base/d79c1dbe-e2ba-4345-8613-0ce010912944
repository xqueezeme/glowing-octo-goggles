{
    "title": "Dirty Little Secret",
    "pages": [
        "Yes she is!\"\n\n\"Not really.\"\n\n\"Oh come on! Are you blind? Look at her!\"\n\n\"She's okay. I just don't think she's that hot.\" \n\n\"You're fucking crazy! She's gorgeous!\" \n\nThe argument Kevin and I had been having throughout the entirety of the movie we had been watching was now reaching epic proportions as the alcohol we had been consuming was now starting to take effect. In fact, not one of the four people in the room that night was even paying attention to the television screen, as the evening had transformed from a simple 'movie night' to a beer filled discussion on women, sex and anything else we could think of. Our latest topic of interest was a debate on whether or not the lead actress in the movie was 'hot' or not, although I think our two girlfriends were significantly less interested in that particular discussion. \n\n\"Whatever man,\" Kevin said with a dismissive wave of his hand and slumped back into the large armchair he was sitting in.  His girlfriend Melanie, who was sitting cross-legged on the floor in front of him, let out brief laugh as she shook her head. \n\n\"I can't believe you guys,\" she said, leaning back against her boyfriend's legs. \"I don't think you can agree on anything.\"\n\n\"Well,\" I sputtered, motioning to the screen. \"Do you girls think she hot?\"\n\nMy girlfriend, Carrie, wrinkled her cute little nose in contemplation before answering. \n\n\"Well....\" she began, leaning forward on the couch. \"I think she looks kind of...trashy.\" \n\n\"Thank you,\" I said with a contented smile, patting her on the knee. Mel?\" Melanie stared at the screen for a moment before giving her answer. \n\n\"I think.....,\"she began slowly. \"Thaaaaattttt,\" she continued. \" I Need another beer.\" \n\nWith that she hopped up from the floor and headed for the kitchen. \"Does anyone else want one?\" \n\n\"I'd better not,\" Kevin answered, shaking his head. \"I have to get up really early for work tomorrow.\" \n\nMelanie shot him a disappointed scowl then turned to Carrie. \n\n\"No thanks,\" Carrie said, fighting off a yawn. \"If I have one more, I'll probably pass out.\"\n\n\"Wow,\" Mel exclaimed. \"You're such a lightweight!\"\n\n\"I know, I know.\" \n\n\"Damon?\" she asked, finally turning to me. \"You're not going to make me drink alone are you?\"\n\nI glanced over at my sleepy girlfriend, then back to Melanie as I pondered the decision. \n\n\"I'm in,\" I stated, hopping up from my seat. \"But I think I've had enough beer. \n\n\"Ooooh,\" Mel answered, a look of excitement crossing her face. \"What did you have in mind?\"\n\n\"Well, let's just see,\" I said, heading into the kitchen with Melanie. \n\n\"I think you still have some vodka in the freezer,\" Carrie called to me from the living room. \n\n\"Perfect,\" I said, making my way to the refrigerator. \"If you can handle it.\" Mel laughed and hopped up on the counter. \n\n\"Oh I can handle it!\" she responded with a smile. \"Although I am pretty buzzed already. It's been a while since I've drank.\"\n\nI opened the freezer and pulled out the frosted bottle before holding it in the air triumphantly and presenting it to Melanie, who was reaching up behind her to retrieve a couple glasses from the cupboard. As she turned, I found myself staring at her body, unable to peel my eyes away. I had always found something enticing about Melanie, although I could never quite put my finger on it. She was attractive, but in a very non-conventional sense. She rarely wore anything other than a simple t-shirt, similar to the one she was currently wearing, and a pair of black, tight fitting yoga pants. Her hair was long and dark brown, always looking perfect although I had never seen her do anything to keep it that way. Her most distinguishing feature however, was her glasses. I had always found glasses on girls to be less than attractive on most cases, but there were a select few that could pull it off. Melanie was one of those select few. In fact her glasses not only looked good, but made her even more attractive. Needless to say, she had been the subject of numerous daytime fantasies that I could not easily dismiss. Something else I could not dismiss, however, was the feelings of guilt that accompanied those fantasies. Not only was she my girlfriend's best friend, but she was currently dating my friend Kevin. Those two simple facts made my fantasizing seem so wrong, but also so much more exciting. \n\n\"Here you go,\" Melanie said, handing me two glasses. \"What are we going to mix with it?\"  \"I was just going to mix mine with water,\" I said simply, accepting the glass and setting it on the counter. \n\n\"Water?\" she blurted out, a disappointed scowl on her face. \"That sounds disgusting.\"\n\n\"Hey,\" I began, shrugging my shoulders. \"Like I said...If you can't handle it...\"\n\nMelanie laughed and hopped down off the counter. \n\n\"Okay,\" she said. \"Bring it on.\"\n\nI poured the vodka and filled the remainder with water before offering the glass to Melanie. She looked apprehensive as she took her first sip, but widened her eyes in surprise as she swallowed it down. \n\n\"It's actually not bad,\" she exclaimed, taking another drink.\n\nI poured some vodka into the other glass and walked back to the sink. \n\n\"So,\" began, turning the tap on. \"There's something I've been wanting to ask you.\"\n\n\"Yeah? What's that?\"\n\n\"What's the deal with yoga pants?\" I asked, turning my head as I filled the glass. \"I mean...You wear them all the time, but I don't think you ever do yoga.\" \n\nMelanie laughed and tossed her head back. \n\n\"They're soooo comfortable,\" she explained, before spinning around and arching her back in sexy pose. \"Plus, they make my butt look really, really good!\"\n\n\"Yeah, I've noticed that,\" I blurted out without thinking, instantly regretting what I had just said.\n\n\"Oooh, Damon!\" she said flirtatiously, slapping me playfully across the shoulder. \"You bad boy.\" \n\nWith that, she laughed and turned to head back into the living room. I walked behind her unable to tear my eyes away from her ass as she walked. She was right. Those pants did make her but look good. Really good. The form-fitting material clung to her curvaceous cheeks emphasising every line on her perfectly, round ass. As I continued to study Melanie's body I made notice of how much she contrasted with my own girlfriend. Carrie was very small and petite, standing at not much more than five feet. She was the epitome of the 'cute little blonde girl' that I was so often attracted to. Melanie, on the other hand, was significantly taller, with a more ample body. Her breasts were significantly larger, and her entire form seemed softer and rounder. The two friends contrasted in personality as well, with Carrie playing the part of the cautious, responsible one and Mel possessing a very care-free and easy-going attitude. \n\n\"We're baaaack,\" Mel shouted as she walked into the living room. \"What did we miss?\"\n\n\"Not much actually,\" Carrie answered, sounding irritated. \"Kevin paused it.\" \n\n\"You didn't have to do that,\" I said, walking in and sitting back down on the couch beside my girlfriend. \"I don't think any of us were really paying attention to the movie anyways.\" \n\n\"Yeah, I know,\" Kevin blurted out, sounding excited. \"But I had to stop it here so you could see.\" \n\nI looked at the screen to see a paused image of the women we had previously been discussing, wearing a red bikini. \n\n\"Now look at that!\" Kevin stated emphatically. \"You have to admit she's hot! Look at those fucking tits!\"\n\nI just shook my head and took another drink. \n\nCarrie laughed and grabbed the remote from Kevin, starting the movie again. \n\n\"What's so funny?\" Melanie asked, sitting back down on the floor. \n\n\"Damon doesn't like boobs,\" she said with a giggle. \n\nA confused look crossed Mel's face as she turned towards me. \n\n\"You don't like boobs? What kind of weirdo are you?\"\n\n\"I like them, I like them,\" I explained, smiling at the sudden turn in the conversation. \"I just don't think they're the most important feature on a woman.\" \n\n\"Oh no?\" Mel pressed on. \"What is?\" \n\n\"Damon's an ass man!\" Kevin blurted out before I could answer. \n\nMelanie cocked an eyebrow and cast me a surprised look. \n\n\"Oh really?\" \n\n\"Really!\" both Carrie and Kevin blurted out in unison, eliciting a giggle from everyone in the room. \n\nI shot my girlfriend a warning glare as I sensed where the conversation was about to go. \n\n\"Didn't you know?\" Kevin continued. \"I thought everyone knew about it.\" \"Know about what?\" Mel asked again, her head turning back and forth from Kevin and I. \n\n\"Alright!\" I interjected. \"Time for a change in subject.\" \n\n\"No, no, wait,\" Mel said with growing curiosity. \"I want to know. What's this big secret?\" \n\nI dropped my head in my hands with ever increasing embarrassment.  \"Well, it's not really a secret,\" Kevin stated bluntly. \"Damon likes....\"\n\n\"Hey!\" I shouted, cutting off my friend's words. \"I think that's enough. Let's get back to this movie.\" \n\n\"No!\" Mel said with a laugh, grabbing the remote and pausing the movie once again.\"Not until you tell me!\"\n\nI gave Kevin a warning glare, but he just smiled and shook his head. \"Damon likes to do girls in the ass,\" he stated simply, causing everyone in the room to fall silent. \n\nI shook my head, hoping that my inebriated friend would not disclose any more of my personal information to his girlfriend. Mel just sat there for a moment, before turning to look at me. She cocked her head forward and raised her brow as if asking for confirmation. I just shrugged my shoulders and sat back on the couch. \n\n\"Damon,\" she said, smiling widely. \"I had no idea!\" \n\n\"And you!\" she said with even greater surprise, turning to Carrie. \"I really had no idea.\"\n\nCarrie's eyes widened and her hands shot up in the air. \n\n\"Oh no,no,no,no,no,\" she blurted, shaking her head and waving her hands in front of her. \"Not with me! I would never do that! Not that he hasn't tried though.\" \n\nAgain I dropped my head into my hands in an attempt to conceal my embarrassment. It was bad enough to have Kevin running his mouth, but now my girlfriend was publicizing the private details of our love life. Kevin was laughing harder now, and soon was pressing Carrie for more juicy information. \n\n\"So why won't you try it?\" Melanie asked with growing interest. \n\nCarrie shot me a quick glance before answering. \n\n\"Lots of reasons,\" she answered cryptically. \"But I will never, never, NEVER do it.\" \n\nThe last 'never' had been directed at me, as Carrie locked eyes with me in a resolute stare. And she meant it. In fact, I had long since given up trying to convince her. I had long ago resigned to the fact that I would never be engaging in anal sex with my girlfriend. \n\n\"Have you ever tried it?\" Mel asked Kevin, suddenly switching the focus of the conversation from me and Carrie. \n\n\"Fuck no!\" he answered strongly. \"I'm with Carrie on this one. Anal sex is just....wrong.\" \n\nHe and my girlfriend shared a smile and touched their beer bottles together in a toast of agreement. Melanie looked over me as if studying my face. Her expression was not one of disgust or judgement, but more of interest and curiosity. I was beginning to wonder what Melanie's thoughts on the subject were, but before I could put her in the spotlight, she hopped up to her feet. \n\n\"I have to use the bathroom, \"she said, handing me her empty glass. \"Feel free to make me another.\" \n\nAs Carrie turned the movie back on, I got up and followed Mel out of the room. As she walked through the kitchen and into the hall, my gaze was once again fixed on her luscious ass, now fuelled by an alcohol-induced horniness. As my eyes remained on her enticing behind, she suddenly looked back over her shoulder. I quickly averted my stare, but it was too late. She had caught me. She flashed me a knowing smile and continued on her way. \n\nI fixed two more drinks, and was about to head back into the living room, when Melanie entered the kitchen once again. \n\n\"H..here you go,\" I stammered, now feeling extremely awkward at having been caught checking out her ass. \n\n\"Thanks,\" she said with a smile as she took the glass. If she had any of the same feeling of discomfort that I now had, she certainly didn't show it. \n\n\"Oh, and by the way....\" she began, taking a drink while looking at me over the edge of the glass. \"I think it's hot.\" \n\n\"W..what's hot?\" I asked, still feeling awkward. \n\nMelanie smiled and turned to walk back into the living room. \n\n\"You know, \"she stated flatly as she walked away. \n\nI just stood there thinking about what she had said and watching her as she left the room. I then took a deep breath, drank half my drink and joined the others. \n\nAbout twenty minutes later the movie ended, although none of us really cared. \n\n\"What a bad movie,\" Mel exclaimed, finishing off the last of her vodka. \"Next time me and Carrie get to pick.\" \n\nKevin yawned and stood up, stretching his arms out over his head. \"Well, I should go,\" he said, picking up his jacket. \"Work is going to be hell tomorrow. \"\n\n\"Awww, poor baby,\" Melanie said, making an exaggerated pouty expression. Are we still on for dinner tomorrow night?\" \n\n\"Sure,\" he responded, pulling his arms through the sleeves of his coat. \"Are you going to sleep at my place tonight?\" \n\n\"Nahhh,\" she answered, shaking her head. \"You need to get up early. I'm still wired, so I won't be able to sleep for hours.\"\n\nKevin nodded in agreement. He then kissed his girlfriend, said goodbye and left leaving the three of us sitting in the living room. We talked for a while but soon Carrie was starting to show overt signs of sleepiness and we decided to call it a night. \n\n\"Oh no!\" Carrie said, dropping her face into her hand. \"I left my backpack at your apartment! I need those books for class tomorrow!\"\n\n\"Well, we can go to my place and sleep there,\" I suggested. \n\n\"But I'm soooo tired,\" she returned, her shoulder slumping down with exaggerated fatigue. \"I really don't want to walk all that way.\" \n\n\"Well then just go to bed,\" I said. \"I can go get it. I'm not tired at all.\"\n\n\"Are you sure?\" she asked with concern. \n\n\"Yeah, no problem. I think I need to walk off the effects of that vodka anyways.\" \n\n\"Thank you!\" Carrie squealed, throwing her arms around me with affection. \"And that's good,\" she continued, releasing me from her embrace. \"Because Mel shouldn't be walking home alone anyways.\" \n\n\"Oh Carrie,\" Melanie scoffed with a dismissive wave of her hand. \"You worry too much.\" \n\nI couldn't agree more, although I would never tell her to her face. Carrie had a tendency to worry a lot, and Mel and I often joked about it. In all reality though, it probably wouldn't be the best idea in the world to have a young, attractive, intoxicated woman walking home in the middle of the night. And since Melanie and I lived in the same neighbourhood, it just made sense for us to walk together. \n\n\"Don't be long,\" Carrie said as we stepped out the door. \"I'll try to stay up and wait for you.\"\n\n\"Nah, don't worry about it,\" I returned. \"Just get some sleep. I'll try not to wake you when I get back.\"\n\nShe said goodbye one last time before closing the door leaving Mel and I standing in the driveway. \n\n\"How's that vodka treating you now?\" I asked, as we started walking. \n\n\"I have to admit,\" Melanie said with a smile. \"I'm prrrreeetttyyyyy drunk.\" \n\n\"Yeah, me too,\" I laughed. \"Way too drunk for a Thursday night anyways. It's probably a good thing I didn't bring the absinthe over.\" \n\n\"You have absinthe?\" Mel shouted with excitation. \"I've always wanted to try that!\"\n\nI nodded. \n\n\"Let's do a shot!\"\n\n\"What?\" I asked, with a puzzled expression. \"Tonight?\"\n\n\"Sure. Why not? One more drink won't hurt.\"\n\nI pondered for a moment before answering. \n\n\"Sure. I guess we can do one.\" \n\nMel looked as excited as a kid on Christmas morning, and I began to wonder if she had already had enough to drink. As we kept walking, I was finding it difficult to keep up with Melanie's pace.\n\n\"Jesus, slow down!\" I called as I found myself lagging behind her. \"Why the hell do you walk so fast?\"\n\nMel spun around and began walking backwards with her arms crossed in front of her chest. \n\n\"What's the matter?\" she asked in a phony baby voice. \"Can't you keep up?\" \n\nI ignored her teasing comment and took a few quick steps to catch up. \"I guess I shouldn't walk in front of you anyways,\" she commented, smiling. \"I wouldn't want you checking me out again. Since you're all about ass!\"\n\n\"I'm not ALL about ass,\" I muttered, shaking my head. \"And I was not checking you out.\"\n\n\"Oh come on!\" she said with determination. \"Just admit it. You were checking out my ass.\" \n\n\"Okay fine,\" I blurted out in resignation. \"I was checking out your ass.\" Mel smiled, a look of smug satisfaction across her face as we continued on our journey, neither saying a word. \n\n\"So....\" Melanie said, finally breaking the silence. \"What do you think?\" \"About what?\" I responded quizzically. \n\n\"My ass,\" she reiterated. \"What do you think?\" \n\nI suddenly felt very uncomfortable, as Mel put me on the spot with her awkward question. \n\n\"I don't know,\" I muttered, looking down in slight embarrassment. \n\n\"Come on!\" she said, coming to a dead stop. \"Since you're such an ass connoisseur. Tell me.\" \n\nMelanie then turned around and arched her back, thrusting her ass out provocatively. I just laughed and continued on my way. \n\n\"Hey,\" she shouted after me. \"You're really not going to tell me?\" \n\n\"Nope.\" \n\n\"You suck!\" she stated flatly. \n\nMel soon caught up to me, but didn't press the issue any further. The rest of the trip we remained silent, although I did catch her glancing over at me a few times. Five minutes later we reached my apartment building.\n\n\"Do you still want that shot?\" I asked, fumbling with my keys. \n\n\"You're damn right I do,\" she answered convincingly. \n\nI opened the door and Melanie rushed inside making for the stairs in front of me. As we ascended, I found myself again staring right into Mel's perfectly round ass, the tightness of her pants clinging to every curve. I wondered if she was trying to tease me on purpose by walking up the stairs in front of me. By the time we got to my apartment, my dick was rock-hard, straining against the inside of my pants. I put the key in the lock and opened the door, letting Mel inside as I subtly adjusted my package to decrease the discomfort I was beginning to feel. \n\n\"Wow, your place is small,\" she exclaimed as she stepped in and took a look around. \n\n\"Yeah,\" I agreed. \"It's a bachelor suite. I don't really need a bigger place. And I don't really want roommates.\" \n\nMel nodded and walked over to my computer desk and sat down. \"I guess this does the job.\" \n\n\"Uh huh,\" I responded only half-listening to what she was saying as I began to search through my cupboards for the bottle of absinthe. After a few minutes of futile searching, I finally found it situated at the back of one of the lowest cupboards.\n\n\"Here is it,\" I said, climbing up from my hands and knees. \n\n\"Hey,\" Mel called from the other side of the room. \"Do you have any porn on here?\"\n\nI turned to see her on my computer, clicking through the various icons on my desktop. \n\n\"Hey get off there!\" I scolded, rushing over with the bottle in my hand.  But it was too late. \n\n\"Here we go,\" Melanie said as her face lit up with excitement. \n\nI reached over and tried to shut the computer off, but Mel rebuffed my attempts, pushing my hands away laughing. \n\n\"Just let me see!\" she said, giggling as she opened the folder that contained my favourite porn movies. \"Oh wow! You have a lot. Let's see....Anal Cavity Search, Asshunt, Fuck Slaves?\" she spouted off the various titles. \n\n\"Come on,\" I pleaded. \"Get off there.\"\n\n\"Just go pour the drinks,\" she suggested, pushing me away, her face now glued to the computer screen. \n\nI accepted her request and headed back over to the kitchen area as Mel continued to peruse my porn collection. I retrieved two shot glasses and headed back over to the desk, setting both down as I started to open the bottle of absinthe. Melanie had a vacant, occupied look on her face as she stared, unfaltering, at the computer screen which was now displaying an image of a woman on her hands and knees getting fucked in the ass. ",
        "\"Having fun?\" I asked with a smile as I poured the green liquid into the shot glasses. \n\n\"What's it like?\" Mel asked, her eyes remaining on the scene in front of her.\n\n\"What's that?\" I asked, not completely understanding her question. \n\n\"That.\" She responded pointing to the computer screen. \"What's that like?\" I laughed as I set the bottle back down. \n\n\"Well that depends on who you ask,\" I answered. \n\n\"How many girls have you done it with?\"\n\n\"I don't know....A few I guess.\" \n\n\"And they liked it?\" \n\n\"Yeah, they did....Hey what's with all the questions?\"\n\n\"I don't know,\" Mel said, shrugging her shoulders. It's just that...I've always been kind of interested in trying it.\" \n\n\"Really?\" I asked with widening eyes. \"Well then why haven't you?\"\n\nMel's self confident demeanour suddenly faded away, as she looked away bashfully. \n\n\"It's hard for girls to...bring that up. If the guy's not into it, he might think you're a slut or something.\"\n\nI nodded with understanding. \n\n\"Why don't you ask Kevin to try it?\"\n\n\"Are you kidding,\" she countered firmly. \"You heard him! He'd never do it.\" \n\n\"I guess we're in the same boat then,\" I said with a smile. \"Because Carrie definitely would never do it!\"\n\nMelanie nodded in agreement, as she looked back to the computer screen. \n\n\"Maybe you and I should have dated instead,\" she muttered nonchalantly. \n\n\"Yeah,\" I said with a forced laugh. \"Here.\"\n\nI handed Melanie the shot glass, which she accepted finally drawing her attention away from the movie. She studied the green liquid with an expression of wonder before holding aloft. \n\n\"Here's to sexually unadventurous partners,\" she said sarcastically. \n\nI smiled and touch my glass to hers before we both downed the strong liquid. \n\n\"Mmm,\" Mel exclaimed, licking her lips. \"That's not bad.\" \n\nI nodded in agreement as I set my glass down. \n\n\"Oh and by the way...\" I began, the alcohol beginning to lower my inhibitions. \"It's very nice.\"\n\nMelanie shot me a puzzled look as she too set her glass down on the desk. \n\n\"Your ass,\" I explained, referencing her previous question. \"It's very, very nice.\"\n\n\"Oh yeah?\" she said with a slightly bashful smile. \"You don't think it's too big?\" \n\nAs she asked her question, Mel leaned over slightly in her seat allowing me to view more of her tightly clad posterior. I shook my head as my eyes shot down to take in the appealing sight. \n\n\"Not at all,\" I reiterated, my mouth suddenly feeling very dry. \"It's perfect.\"\n\n\"Aww, thanks,\" she replied with a coy giggle, before looking up into my eyes. \n\n\"So you have checked out my ass before then huh?\" \n\nI nodded in affirmation, now seeing now need to hide the truth. \n\n\"So...\" she began cautiously as she rose from her seat, leaning over the desk seductively. \"Have..you ever thought about...fucking my ass?\"\n\nI swallowed hard as my fingers fidgeted nervously. \n\n\"Maybe,\" I stammered ambiguously. \n\n\"I'll take that as a 'yes',\" Mel giggled, as she reached for the bottle of absinthe. \"Let's do one more shot.\" \n\n\"Are you sure?\" I asked, furrowing my brow with concern. \"I think we're already pretty drunk.\" \n\n\"Then one more won't hurt,\" she countered, flashing me a sexy smile. I reluctantly agreed and motioned for Mel to fill the glasses once again. It wasn't the alcohol I was worried about, but rather the increasing state of arousal that I was beginning to experience. Her flirtatious words combined with our ass-centered conversation were having an unmistakable effect on my mood. Whatever concern I felt however, was no match for the combined forces of Melanie and absinthe that seemed to be conspiring to torture me all night long. \n\n\"So...\" Melanie said after imbibing her second shot of green liquid. \"When you fuck a girl in the ass...how do you like to do it?\"\n\nI almost choked on my drink when I heard the bluntness of Melanie's question. After composing myself, I managed a forced laugh as I made my over the bed, sitting down to settle my spinning head. \n\n\"Well?\" Mel pressed, urging me to answer.\n\n\"Well, I've really only done it one way,\" I replied, starting to feel more comfortable with Mel's grilling questions.\n\n\"How's that?\" she countered quickly, her big brown eyes blazing with interest.\n\n\"From behind,\" I answered plainly, as I rested back on my elbows. Melanie smiled and nodded. \n\n\"Yeah,\" she said in contemplation. \"I think that's how I would want to do it.\" My eyes widened and I felt my dick twitch from within my pants. I wasn't sure if it was the alcohol or the conversation, but my body felt as if it was tingling all over. \n\n\"Oh really?\" I scoffed. \"You've thought about that a lot have you?\"\n\n\"I told you I've been interested in doing it!\" she said with a broad smile, her face beaming with enthusiasm. \"I think it's hot. And.....so....dirty.\" I nodded in agreement. \n\n\"And you would want it from behind?\" I asked, delving deeper into Mel's sexual psyche. \n\n\"Yeah, I think so...\" she answered slowly as if in a state of contemplation. \"Although, you know what else might be hot?\" \n\n\"What?\" I asked, growing more curious and more aroused by the minute. \n\n\"Like..kind of...\" she stammered as she struggled to find the words. \"Here. Let me show you.\"\n\nWith that, she hopped up onto the bed beside me, laying on her back. She then took a hold of each of her ankles and proceeded to pull her legs up to her head, spreading her thighs wide in an amazing show of flexibility. I found myself staring between her legs into her smiling face, trying in vain on to focus on the outline of Mel's pussy which was completely visible due to the tightness of the stretched fabric. \n\n\"See. Like this,\" she explained as she continued to hold the erotic position. \n\n\"I see,\" a said with a nod, once again feeling very uncomfortable. \"You're pretty flexible. Kevin must have a lot of fun with you.\"\n\nMelanie's smile turned to a look of disappointment as she let go of her legs, letting them fall to bed. \n\n\"Yeah right!\" she scoffed sarcastically, as she pulled herself up to a cross-legged sitting position. \"Are you kidding me? Kevin's not into anything like that! He's a straight-up missionary position kind of guy.\"\n\n\"Yeah,\" I muttered in complete understanding. \"Carrie's the same way. She doesn't even like doggy-style.\" \n\n\"Really?\" Mel blurted out, her voice void of any noticeable sarcasm. \"That sucks. I love getting fucked from behind!\"\n\nI smiled once again at the explicit nature of Melanie's statement. \n\n\"Oh yeah?\" I managed to stammer, unsure of what to say. \n\n\"Absolutely! I love it when a guy just bends me over and fucks me hard from behind, pulling my hair and slapping my ass. Mmmmm.\"\n\nI could feel my dick throbbing as it pulsed with blood. I shifted to a more comfortable position as I continued to talk. \n\n\"So.....What else do you like?\" I asked, growing even more interested in what Mel was willing to tell me in her intoxicated state.\n\n\"I'm not sure,\" she responded, biting her lip in contemplation. \"I haven't really done much. All my boyfriends have been pretty boring in bed.\"\n\n\"But you would do anal if you had the chance?\" \n\n\"Yes!\" she blurted out, before composing herself and staring at me through narrowed, suspicious eyes.\n\n\"Why Damon?\" she asked slyly. \"Are you offering?\" \n\n\"W...what? No! Of course not!\" I stammered with false conviction. \"I..I was just asking.\"\n\n\"It's okay!\" Mel said with a laugh as she placed her hand on my leg. \"I was just kidding.\"\n\nHer touch sent a pleasurable shiver through my body. I just shook my head smiling as I tried to think of something to say. What followed was 90 seconds of tension filled silence, filled only with the faint sounds of sex emanating from my computer. Finally Melanie spoke.\n\n\"You know...We should do it.\"\n\nI just stared for a few seconds, confused, as I tried to process what she had just suggested. I studied her face to look for any sign of jest, but found only committed seriousness. \n\n\"W..What do you mean?\" I asked, my heart beat racing. \n\n\"Damon,\" Mel said sternly, cocking her head and raising an eyebrow. \"You know what I mean.\"\n\n\"So.......\"  \n\nMel nodded.\n\n\"You're suggesting that we.....\"\n\nAgain she nodded. \n\n\"Why not?\" she reiterated, shrugging her shoulders. \"Our significant others obviously can't meet our needs. So we might as well do it together?\"\n\nI was dumbfounded. Although Melanie had been quite flirtatious throughout the night, I never would have expected this!\n\n\"What about Carrie?\" I blurted out. \"And Kevin! You don't think they might mind?\"\n\n\"Well, they don't have to know!\" Mel said convincingly, running her hand down my leg. \n\nMy mind at that moment was a confused jumble of thoughts as I tried to sort out the consequences of what might happen. A girl that I had fantasized about countless nights was offering herself to me. It was a dream come true! However, complicating things was the fact that that particular girl was my friend's girlfriend. And no less important, she was my girlfriend's friend! It all seemed so wrong, but yet....so appealing.\n\n\"Come on Damon\", Melanie purred provocatively, laying down beside me and putting her lips to my ear. \"Are you telling me that you don't want to bend me over right now and slide your big hard cock into my tight little ass?\" \n\nI swallowed hard, trying to restrain myself as I felt Melanie's warm breath in my ear. \n\n\"I bet...\" she continued, her voice growing even more seductive. \"That your dick is hard from just thinking about it. Am I right?\" \n\nI was trembling with desire as I felt her hand sliding up my leg to confirm her statement. \n\n\"Ahhhhh,\" I groaned, throwing my hands over my face. \"Why are you torturing me like this?\"\n\n\"Because...\" she said with a giggle, grazing her hand along the crotch of my pants. \"You got me all turned on with your talk about ass-fucking....So now I think it's time you showed me.\" \n\nStill I hesitated. \n\n\"Come on...\" she purred. \"You can do me any way you want. \n\nJust...say...yes.\"\n\n\"Yes!\" I blurted out with exasperation, knowing that there was going to be no going back. Whatever guilt I felt had been severely overwhelmed by Melanie's seduction and the enticing prospect of deflowering her virgin ass. \n\n\"Good,\" she squeaked with excitement, kissing me on the cheek as if I was 'just a friend' and not the guy about to take her anal virginity. \n\nMel sat up on her knees and stared down at me, her eyes lit up with excitement. \n\n\"How do you want me?\" she asked, her voice bursting with remarkable enthusiasm. \n\nI thought about it for a moment before answering. \n\n\"On your hands and knees.\" \n\nMel smiled with approval before spinning around and dropping to all fours, displaying her perfectly round ass provocatively. She even arched her back to accentuate the enticing effect, staring back over her shoulder at me with her sexy dark eyes. I took a deep breath and leaned over to open the drawer in my night table, rummaging around to find the lubricant I had stashed there. \n\n\"I haven't used this in a while,\" I muttered, pulling the small bottle from the back of the drawer and inspecting it for an expiration date. I then found a condom which I placed on the bed in preparation.  I tossed the bottle on the bed and unzipped my pants as Melanie's gorgeous ass swayed back and forth before me. \n\n\"Okay,\" said, rising to my knees and inching my way behind her. \"We should make this quick. \"Carrie is expecting me back soon.\"\n\n\"Not too quick,\" Mel replied with a giggle as she rose back up to her knees and looked back over her shoulder at me. \"Remember...it's my first time.\"\n\nMy dick was throbbing with anticipation as I watched my friend's girl begin to peel off her tight fitting pants. I responded in kind by taking off my shirt and jeans, stopping midway when I became distracted with the site of Mel's tiny black g-string coming in to view. \n\n\"Mmmm, nice,\" I muttered quietly as I stared at the thin line of black fabric disappearing between Mel's luscious, round cheeks. \n\nShe giggled again as she rolled over to kick her pants to the side before resuming her previous position on her hands and knees. I swallowed hard as I removed my underwear, allowing my throbbing cock to spring free. \n\n\"This is so wrong,\" I muttered to myself as I rolled the condom onto my dick, my hands trembling with nervous anticipation. \n\nI inched forward on my knees, coming up behind Melanie's eager, willing body. \n\n\"Do you want to do it normally first?\" I asked, staring down at her delectable backside.\n\n\"Nah,\" she responded nonchalantly. \"I just really want it in my ass!\" \n\nI was a little surprised but in no position to argue as I reached forward, sliding my fingers under the waist band of her tiny undergarment. It then seemed as if time had stopped completely as I began to pull the underwear down over her ass. Her cheeks seemed to be squeezing the tiny strip of smooth black fabric, releasing it only reluctantly as inch by tantalizing inch, I exposed my eventual prize. Soon I was staring down at Melanie's tiny pink star as I flipped the cap open on the bottle of lube. Placing one hand gently on her ass cheek, I gingerly pulled it to the side as I dribbled some of the slippery liquid down onto her exposed hole.\n\n\"Ooooh,\" she squeaked at the feeling of the cold lubricant, as her asshole clenched reflexively. \"That's cold.\" \n\n\"Sorry,\" I said softly, before placing my thumb at the base of her butt hole and running it upwards, spreading the lubricant over her twitching, pink star. \n\n\"Mmmmm,\" Mel purred as I moved my thumb in small, circles gradually adding more pressure. \"You have no idea how long I've waited for this.\" Pressing down, I gently forced the tip of my digit into her clenching hole, feeling her tight little muscles squeezing my invading thumb. I pushed in up to the knuckle before slowly retracting, lubricating the inside of her asshole in preparation. \n\n\"God that feels good,\" Melanie exclaimed as I replaced my thumb with my middle finger, allowing me to go even deeper into her eager orifice. \n\nI started sliding in and out, her tight little asshole hugging my finger as it moved inside her. She let out a gentle sigh of enjoyment as I added more lube to the area, dribbling the clear liquid down around my half-buried finger. \n\n\"Mmmm,\" she cooed, extending her head back with pleasure. \"I hope your dick feels as good as your finger.\" \n\nI smiled to myself as I squirted some lubricant along the length of my erect cock. Tossing the bottle on the bed, I then stroked my shaft, covering it completely with lube as my finger wiggled its way deeper in Melanie's eager asshole. My dick was pulsing with excitement, throbbing with anticipation as I inched closer, slowly withdrawing my finger. As I slipped free, Mel's tiny hole closed up tight once again. I then slid my slick cock between her plump cheeks, up and down over her glossy, wet star before coming to rest at the entrance to her inviting little orifice. Mel closed her eyes and bit her lip in anticipation, resting the side of her face on the bed. At that moment all thoughts of Kevin and Carrie had disappeared from my mind. All I could focus on was Melanie's perfect ass, begging to be filled.\n\n\"Do it Damon,\" she gasped as her hands clutched the bed sheets. \"Put you dick in my ass.\"\n\nI pushed forward, the head of my dick meeting slight resistance before slowly sliding through Mel's muscular opening. I high-pitched moan escaped her lips as her tight little asshole began to swallow my shaft inch by agonizing inch. \n\n\"Are you okay?\" I asked when my dick was halfway inside the confines of her stretched little hole. \n\n\"Y..yessss,\" she stammered, her eyes remaining firmly closed. I began to move my hips in short, undulation motions, moving my cock back and forth in her ass, sliding slightly deeper with every push. Melanie reached between her legs and started rubbing herself as my pace increased. \n\n\"Oh God, I've waiting so long for this!\" she gasped, pushing her ass back on my dick. \n\n\"How does it feel?\" I asked, my hands firmly gripping her supple cheeks. \n\n\"Soooo, fucking good!\" she exclaimed, looking back over her shoulder at me. \"And it feels sooo fucking dirty!\"\n\nI tossed her a sly, contented grin before turning my attention back to her ass. Deeper and deeper I slid, until soon my balls were pressed firmly against her pussy, my shaft completely enveloped by her tightly gripping hole. I pulled her hips back into me, trying to get as much of my dick inside her as possible, revelling in the indescribable feeling of having her taut asshole pulsing around my invading member. \n\n\"Do it Damon,\" she urged. \"Fuck my ass and make me cum.\" \n\nAgain I began with small, rhythmical movements, withdrawing a little more each time until my cock was sliding freely in and out with long, steady strokes.  Over and over, I withdrew before plunging back deep inside her accepting ass as she clutched the bed sheets and moaned with ever increasing intensity. Her hand was still working frantically between her legs as she approached her first anal climax. As much as I was enjoying myself, I was more focused on Melanie's pleasure. At that moment I wanted nothing more than to make her cum with my dick in her ass.\n\n\"Come on,\" I muttered between laboured breaths. \"Cum for me. \"Cum with my cock in your ass.\"\n\nMy words apparently set Mel off, because she immediately buried her face in the bed, stifling her squeals of erotic pleasure as her body was wracked with the most intense orgasm I have ever witnessed. Pushing back against me, her ass swallowed the entire length of my shaft as her wet pussy slapped against my balls and remained firmly pressed against them. Her asshole clenched, gripping my cock around the base with long, forceful contractions as her orgasm slowly subsided. \n\n\"Oh my fucking god!\" she gasped, raising her head from the bed. \"That was intense. I've never had one like that before. \n\nI smiled with contented satisfaction as I felt Melanie's asshole relax once more, and I began to slide my dick back out of her tight confines. \n\n\"Are you okay?\" I asked. \"Do you want me to take it out now?\" \"Fuck no! Are you kidding? Keep going!\"\n\n\"Okay, \"I replied, picking up the pace once again. \"But I might not be able to last very much longer.\" \n\n\"Oh yeah?\" she said, glancing back over her shoulder. \"Are you going to cum soon?\" \n\nI nodded as my hips swivelled forward, sinking my dick back into her accepting hole. Mel closed her eyes and bit her bottom lip as she revelled in the feeling of complete fullness before slowly opening them once again and speaking. \n\n\"Take it off,\" she said, arching her back once more. \n\n\"What?\" I replied, stopping for moment in slight confusion.\n\n\"The condom,\" Mel clarified. \"Take it off. I want to feel you cum in my ass.\"\n\nI was astounded at her dirty request, but I was even more aroused by her words. In fact, I would have cum right there if I had not taken care to cease all motion. Without a word, I slowly unsheathed my dick from Melanie's asshole, watching as her tight, puckered star closed up once again. Mel adjusted her position as I slid the tight rubber ring down my throbbing shaft and tossed it on the floor. I could feel my cock pulsing in my hand as I added more lube to my unprotected shaft while lustfully eyeing Mel's newly ravaged asshole. Then without even being asked, she reached back with both hands and lewdly spread her cheeks wide, inviting me back into her hungry hole. I shuffled forward and pressed my slick cock against her tiny opening, slipping back past her tight muscular ring as she sighed with enjoyment. As her butt clenched around my cock head, she pushed her hips backwards into mine, sliding her beautiful ass down my naked shaft. \n\n\"Fuck, you have no idea how good your ass feels,\" I exclaimed, overcome by lust. \n\nMelanie giggled as she wiggled her ass, inching it further down my cock. \"And you have no idea how good your dick feels in my ass,\" she returned with a quick glance back over her shoulder. ",
        "Mel's ass felt even better, now that the condom had been removed and I knew I would not be able to last much longer. I therefore, fucked her asshole with slow, deliberate thrusts intending to prolong the pleasure as long as possible. Every time I felt an orgasm approaching I would slow down or stop completely. \n\n\"Damn this looks hot,\" I muttered to myself, splaying Melanie's butt cheeks wide apart to view my shimmering cock buried halfway in her asshole. \n\n\"Mmmm,\" I bet it does,\" she moaned. \"I wish I could see it.\" \n\nI kept her cheeks spread wide, increasing the visual stimulus as I started sliding my dick in and out again. \n\n\"Wait,\" she blurted out suddenly, causing me to cease my thrusting. \"I have an idea.\"\n\nMel then reached over and rummaged through her clothes, finally producing her cell phone. \n\n\"Here,\" she said nonchalantly, passing the phone back to me. \"Take a picture.\" \n\nI was continuing to be amazed by Mel's antics, as I accepted the phone with a smile. I then flipped it open and set it to camera mode as she once again reached back to pull her ass cheeks wide. I pointed the phone down at her ass, zeroing in on a close-up image of her tight little hole hugging my cock and pressed the button. \n\n\"Give it here,\" Melanie ordered enthusiastically once the filthy picture had been captured. \"I want to see it.\" \n\nI inspected the image on the screen with satisfaction before handing the phone back to her. \n\n\"Wow,\" she gasped, setting the phone down on the bed. \"That's so fucking hot!\" \n\nViewing the image of my dick in her ass apparently turned her on even more as her hand quickly returned to its previous position between her legs. As her fingers went to work again, her eyes remained fixed on the phone beside her. I began to pick up the pace once again as well, encouraged by Mel's undeniable enjoyment. Again and again, I my dick sank into her tight little butthole, my hips slapping against Mel's luscious ass with each thrust. \n\n\"Uh! Uh! Uh, she moaned every time my cock slammed back into her newly de-virginized hole. \n\nAs I repeatedly fucked Melanie's ass, the force of my thrusting slowly increased, driving her hips down into the bed. I straightened my legs out behind me, all my weight now driving my cock deep into her tight hole. With each thrust, Mel's hips descended farther until she was pressed flat against the bed, her arm trapped under her body as she continued rubbing her pussy. Our bodies, now moist with sweat, were pressed together, my chest lying atop her back as my cock remained buried balls deep in her ass. I switched from a thrusting motion to a slow gyration, grinding my hips into Melanie's smooth, shapely butt as my dick pulsed inside her. My face was now close to hers, my breath on her ear as I groaned with pleasure. \n\n\"You want my cum in your ass?\" I whispered into her ear as I felt my approaching climax. \n\n\"Yes!\" she gasped as I started picking up the pace once again. With a final groan, I clenched my teeth as the intense feeling coursed through my shuddering body. My hips drove down hard into Melanie's ass as my swollen cock pulsed, spilling a copious load of hot cum into her ravaged hole. \n\n\"Oooooh\", Mel moaned softly as she felt the warm liquid filling her insides. \n\nHer eyes closed and a smile crossed her face as she wiggled her ass in pleasurable contentment. I took a deep breath and gripped Mel's hips firmly for a moment before slowly extracting my dick from her cum soaked asshole. As my softening cock slipped free with a lewd slurping sound, it allowed a small rivulet of semen to escape, dribbling out and dripping down onto her swollen pussy lips. Melanie let out a playful giggle as she rolled over smiling with satisfaction reaching back to massage her newly fucked ass. \n\n\"So...\" I asked, exhaling slowly. \"How was it?\" \n\n\"Soooo, good!\" she exclaimed, her face glowing with contentment. \"Better than I expected actually. It didn't even hurt that much.\" \n\n\"Well, that's good,\" I said, wiping a small bead of sweat from my brow. \"I'm glad I could be of service.\" \n\n\"Mmmm, hmmmm,\" she responded, rising up to her knees. \"Thank you.\" \n\nI then found myself staring into Melanie's irresistible big brown eyes as she stared intensely into mine. I was about to say something when she leaned in and kissed me. My first reaction was to pull away, but the feeling of her soft lips pressed against mine was too much to handle as I closed my eyes and opened my mouth, our lips melting together. As I felt her warm tongue sliding into my mouth, she reached down and wrapped her hand around my limp shaft. Feeling a little self conscious about my less than turgid member, I instinctively moved to push her hand away. \n\n\"Hehe,\" she giggled with a cute smile as I continued to rebuff her playful advances. \n\n\"Well...\" I said finally, reaching for my underwear. \"We should get going.\" \n\nAs I spoke those words, Mel's lips curled downward into a pouty frown. \"Noooo,\" she whined. \"I want to do it again.\" \n\nI looked over in disbelief. \n\n\"We shouldn't,\" I replied after pondering for a moment. \"We've already taken quite a while. I don't want Carrie to get suspicious.\" \n\n\"Well, let's hurry then!\"\n\nI shook my head, laughing at Melanie's increasing persistence. \n\n\"Oh come on,\" she continued, her voice softening into a seductive tone as she crawled over and whispered into my ear. \"Didn't my tight little ass feel good?\"\n\nAs I felt her warm breath on my skin, I could sense a tingle of renewed excitement in my dick. But still I hesitated. \n\n\"Let's go,\" Mel coaxed as she turned around and presented her ass to me on all fours. \"I know you want it again...\" \n\nI glanced over at the enticing site as she arched her back wiggled her ass from side to side in an attempt to seduce me back into another session. Her actions would have been comical if not for the fact that it looked so damn hot. As I gazed at the beautiful site my heartbeat quickened and my cock twitched with life. Between Melanie's luscious fleshy cheeks, her tiny hole beckoned me to enter its depths once again. \n\n\"Come on Damon...,\" she cooed, reaching back to spread her cheeks apart, shamelessly exposing her recently fucked asshole to my hungry eyes. \"Your big, hard cock felt soooo good in my tight little ass.\"\n\nI could feel my dick slowly filling with blood as my eyes remained fixed on Mel's lewd pose. Her tiny pink asshole was glistening with a mixture of cum, sweat and pussy juices. I knew I could no longer resist, but I was holding back purposely because Melanie's performance was so enjoyable. \"Mmmm, \"she moaned softly as she reached back and ran a slender finger around the rim of her tiny hole. \n\nI inched closer. \n\nMelanie began rubbing her fingertip up and down over her ass before slowly and deliberately pushing it inside.  She gasped and tossed her head back, pretending as if my eyes weren't transfixed on her every motion. Gently, her slender finger disappeared, sliding deeper into her asshole as I watched with growing desire. As her finger reached the knuckle, Mel bit her bottom lip and cast me a sexy stare over her shoulder. Her eyes caught sight of my renewed hard on and beamed with satisfaction. She knew she had convinced me. \n\nAs slowly as she had penetrated her ass, she began to withdraw her finger. I moved even closer, staring in lustful wonder as her digit reappeared, now shimmering wet with the fluid I had deposited there moments before. She let out a subtle giggle as she slid in and out, taunting me with seductive display of her tight little butthole hugging her slender finger. It was quite possibly the hottest thing I had ever seen. Unable to control myself any longer, I lunged forward and took hold of Melanie's wrist, pulling her finger from the tight confines of her ass and replacing it with my tongue. Melanie gasped with surprise and her body tensed as I stabbed her tiny pink star with my tongue, thrusting it against her tightly closed opening. My hands splayed her fleshy cheeks wide as I planted a deep kiss on her butthole, while tonguing her ass with lewd enthusiasm. \n\n\"OH MY GOD,\" Mel exclaimed, gasping with pleasure. \n\nAs my tongue wiggled its way inside her clenching hole, Melanie reached back and slid two fingers into her dripping wet pussy. Her moans of pleasure encouraged me, and continued my oral assault, licking, sucking and probing her tender asshole. I was almost lost in the moment before I realized I needed to have my cock inside her once again. \n\n\"I knew I could convince you,\" Mel giggled as I rose into position behind her. \n\n\"Uh huh,\" I agreed dryly, spreading lubricant up and down my shaft. \"Well, you asked for it. And don't expect me to be so gentle this time.\" \n\n\"Mmmm,\" she responded, arching her back and wiggling her ass. \"No problem.\"\n\nI placed the head of my cock against her freshly licked asshole and easily forced it inside. With the lube coating my cock and the copious amount of sperm in her ass, it slid in easily. \n\n\"Ohhhh, yesssssss,\" Mel sighed as her tight asshole swallowed my entire length for the second time that night. \n\nThis time I wasted no time in increasing the pace. Within a few minutes I was sliding in and out with ease as her butthole hugged my invading shaft through every inch.  Each time I bottomed out in her ass, my balls would slap sharply against her moist pussy lips, eliciting a sexy sigh from Melanie's gasping mouth.  \n\n\"Harder!\" she commanded in a low, throaty growl as she pushed her ass back onto my cock swallowing it up to the hilt. \"Fuck my ass hard and make me cum!\"\n\nI raised my eyebrows in disbelief. I had thought I had been fucking her hard! \n\n\"Okay...,\" I muttered in a cautioning manor as I took a firm hold of her firm but supple thighs, drawing my dick out almost all the way. SLAP! \n\nThe sound of my hips slapping hard into Mel's sweat glistening ass reverberated throughout the bedroom as I plunged deep and hard into her insatiable little hole. \n\n\"Yesss,\" she moaned through gritting teeth. \"That's better.\"\n\nSLAP!\n\nAgain I slammed down, driving my cock inside her. And again. And again. I continued the frantic pace until I felt her body begin to shudder and tense. \n\n\"Oh fuck yessssss!\" Melanie squealed as her body was wracked with another orgasm, causing her tight little asshole to once again spasm around my invading cock. The feeling was unbelievable. I was far from ready to cum again however, so I decided to switch things up. Slowly, as her climax subsided, I withdrew my throbbing dick from the tight confines of her ass.\n\n\"Roll over,\" I said simply, more a command than a request. \n\nMel glanced back at me for a moment before a broad smile spread across her face. Enthusiastically, she flipped over onto her back, pulling her legs back to her shoulders. \n\n\"This is how you wanted to try it?\" I confirmed, inching closer to her. \n\n\"Uh huh,\" she said, nodding with the excitement of a small child on Christmas morning. \n\nI couldn't help but smile as I placed the head of my cock against her pink little rosebud for the third time that night. As enticing as that sight was, I found my eyes drawn to Melanie's lustful, smiling face gazing up at me from her back. Her big brown eyes slowly closed in anticipation as I pressed forward, working my dick back into her hungry asshole. I glanced down to see her puckered hole stretching open around my cock which slid in even easier than before. \n\n\"Mmmm,\" she moaned, spreading her legs wide. \"How does that feel?\" \n\n\"So fucking good!\" I gasped in response, my dick gliding deeper with each stroke. \n\n\"Good. You have no idea how long I've wanted this!\"\n\n\"Oh, I think I have an idea,\" I answered with a quick smirk before diverting my gaze back to my dick in her ass. \n\n\"Oh yeah?\" Melanie said with smile, before gasping due to a particularly deep stroke. \"You've thought about fucking my ass before?\" \n\n\"Maybe...,\" I answered cryptically, my current state of arousal now firmly in control of my better judgement.\n\n\"Tell me,\" she ordered, as she pulled her knees to her chest lifting her hips off the bed. \"Tell me as you fuck my ass.\"\n\nMelanie's new position allowed me to completely bury my dick in her ass, which I did as a firm forceful stroke brought my balls slapping against her ass. Mel closed her eyes and moaned at the feeling of having her butthole completely filled. A moment later she opened her eyes and stared up at me with a renewed look of sexual intensity. \n\n\"Tell me!\" she reiterated, more forcefully. \"I want to hear your dirty fantasies.\" \n\n\"Okay,\" I conceded, slowing my thrusting slightly. \"Every time I see you wearing those tight pants...\"\n\n\"Uh huh?\" Mel prompted, her eyes fixed intently on mine. \n\n\"I just want to peel them down your legs, bend you over and stick my dick in your ass.\"\n\n\"Mmmm,\" she moaned, closing her eyes once again. \"What else?\" \n\n\"I think about lying down on my back and having you sit on my face.\" \n\n\"Ooooh, Damon,\" she cooed. \"You're dirty\". \n\nI smiled in response as I continued to fuck Melanie's tight little asshole. \n\n\"Are you going to cum in my ass again?\" she asked between laboured breaths. \n\n\"Do you want me to cum in your ass again?\" \n\nMel bit her bottom lip and nodded in a coy, hesitant manor. \n\n\"Say it,\" I stated, continuing sliding my dick in and out with short quick strokes. \n\n\"Mmmmm,\" she purred. \"I want you to cum in my ass.\" \n\nI increased the speed, working hard to comply with Mel's kinky request. \n\n\"I want it sooo bad,\" she continued. \"I want you to fill my tight little asshole with cum.\" \n\nHer words were pushing me over the edge. \n\n\"Uh, uh, uh,\" she moaned with every thrust as the bed shifted and squeaked beneath us. \"God Damon, you cock feels sooo good in my ass! Do it! Fill me up! Fill my butthole with your cum!\"\n\nJust then, every muscle in my body contracted as my dick pulsed, shooting another stream of cum deep into Mel's ass. \n\n\"Mmmmmm,\" Mel purred, laying her head back and closing her eyes with pleasure as she felt shot after shot of warm, sticky cum splashing against the inside of her asshole. \n\nAs my orgasm subsided I leaned back, pulling my slippery, wet cock from her ravaged hole. As it slipped free, a large amount of white fluid followed, pouring out of Mel's butt and dripping down onto my sheets. \n\n\"Wow,\" I exclaimed, falling back to the bed in a tired, sweaty heap. \"That was intense.\"\n\n\"Uh huh,\" Melanie agreed, stretching her legs back out and rolling over onto her stomach. \n\nAs I regained my composure I noticed her staring at me with a sly, mischievous look in her eyes as she rested her chin in her hands. \n\n\"What?\" I asked, shifting uncomfortably. \n\n\"I want to do it again.\" \n\nI laughed at Mel's response, shaking my head in disbelief. \n\n\"You're insatiable!\" I chuckled.\" I can't believe you.\"\n\n\"Come on,\" she coaxed, running her fingers up my bare leg. \"Just one more time.\" \n\n\"No way!\" I blurted out with a smile. \"Carrie is really going to wonder where I am.\" \n\n\"Oh come on....\" she continued. \"One more time won't hurt.\"\n\nI was in awe of Melanie's ravenous sexual desire. However, my post-orgasm tiredness was taking over and my libido had dropped to almost zero. \n\n\"Pleeeeeease,\" she begged, smiling up at me. \"I'll let you do anything you want...\" \n\nOne of my eyes slowly opened at hearing Mel's new proposition. \n\n\"Anything?\" \n\n\"Anything!\" she reiterated, her face beaming with sexual energy. \n\n\"Can I cum on your face?\" I asked, fully expecting Mel to vehemently refuse.\n\nA short period of silence followed until it was broken my her cute voice once again.\n\n\"Sure,\" she said nonchalantly. \n\nMy eyes widened with surprise.\n\n\"Really?\" \n\n\"Sure. Why not.\"\n\nAlthough I was drunk, tired and not very horny, the prospect of fucking Melanie's ass one more time and cumming on her face was an enticing one. However, I wasn't sure if it would be physically possible at that time.\n\n\"Yeah,\" I began, looking down at my dick which was lying flaccid against my stomach, cum dribbling from the tip. \"I don't think I'm going to be able to go another round.\"\n\n\"Oh, don't worry,\" Mel countered with a sexy grin. \"I think I can do something about that.\" \n\nMelanie positioned herself between my legs and began kissing her way up my leg. I was sceptical, however that she could do anything at that point to counter the potent mixture of alcohol and anal sex that had just drained my reserves. I laid my head back and closed my eyes, enjoying the warm feeling of Mel's soft lips working their way up my inner thigh. As she got closer, I could feel her breath on my cleanly shaven balls and I bent my knees as she settled into place between my legs. \n\n\"Mmmm,\" I moaned as her tongue swept up the underside of my balls in a long, slow lick. \n\nShe let out a quiet giggle and continued, flicking her little wet tongue all around, bathing me in warm, wet saliva. She then blew softly onto my moist, sensitive skin sending a pleasurable tingle through my entire body. I raised my head to see her big brown eyes staring at me through her glasses as she gingerly sucked my balls into her mouth. \n\n\"You like that?\" she asked, reaching up to take my dick in her hand. \"You like having me lick your balls?\" \n\n\"Uh huh,\" I grunted in response, completely lost in the blissful moment. \n\nMelanie then began to slowly stroke my cock as her tongue continued to explore my body. She licked and nibbled her way around my balls, down my thighs, and up to my stomach before settling back in between my legs to probe intently at the sensitive area just below my balls. She even took a finger and lightly stroked my asshole as she licked me, causing my shaft to once again rise from the dead. \n\n\"You know what really felt good?\" she asked, rising up to her knees. \n\n\"What?\" I asked, a little disappointed that she had stopped.\n\n\"It felt really good when you licked my ass.\" \n\nMy eyes popped open to see Mel blushing slightly as she bit her lip with a coy, innocent expression. \n\n\"Really?\" I asked, getting more turned on by the second. \n\n\"Uh huh,\" she said, nodding in confirmation. \"Do you want to do it again?\" \n\n\"Sure,\" I blurted, out sitting up from my supine position. \n\n\"Uh uh,\" Mel snapped, stopping me and then pushing me back down into a lying position. \n\nAt first I was confused, but the naughty glint in her eye made me realized what she wanted. Slowly, she crawled up my body, her wet pussy leaving a glistening trail up my bare chest. She then rose up to a sitting position, her legs straddling my chest. I could feel the warmth from between her legs permeating my wet, naked skin. I held my breath in anticipation. Slowly, Melanie leaned forward grabbing the headboard and pulling herself up into a crouching position right over my face. Her wet pussy and beautiful round ass were now mere inches from my hungry mouth. \"Is this what you think about?\" she asked, lowering herself down so close that I could feel the warmth emanating from her pussy. Before I could answer, she descended further and I strained my tongue to get at her little wet hole. \n\n\"Or....\" she continued, rising up again out of my reach. \"Do you think about it like this?\"\n\nMelanie then turned her body around so that she was facing my feet. I gazed up to see her asshole, hiding in between her fleshy cheeks, just begging to be licked and fucked again. \n\n\"Yessss,\" I stammered, as she pulled her cheeks apart with a giggle. \n\nHer ass was now slightly red and swollen from the earlier reaming I had given her, but it remained tightly closed, shimmering wet with pussy juices and lubricant. Then, with agonizing slowness, she lowered her freshly fucked asshole down onto my waiting mouth. \n\nAs soon as my lips and tongue made contact with her sensitive ring, Mel moaned deeply and tossed her head back with enjoyment. Her soft cheeks enveloped my face as the weight of her body came to rest on my head, forcing my tongue up into her asshole. ",
        "\"Oh yeah,\" she cooed, gyrating her hips on my face, eager to feel more my tongue inside her. \n\nAs her pleasure increased she became more forceful, pushing her ass into my face and almost suffocating me. When she leaned forward to play with my cock, I took advantage of the situation to gasp for air before stabbing my tongue back at her little pink star. \n\n\"Mmmm, your tongue feels soooo good!\" she exclaimed as her fingers wrapped around my shaft, which was now back to full rigidity.  As she slowly stroked her fist up and down, her other hand gently squeezed my balls in unison. I reacted to her attention by renewing my oral assault on her asshole, sliding my tongue in and out. \n\n\"Oh yeah,\" she squealed as I felt her tight little butthole clench around my tongue. \"Tongue-fuck my ass!\"\n\nI needed no convincing or direction as I continued tonguing her hole, lubricating it with warm saliva. A few moments later, Melanie pulled her ass off of my face and moved down my body. Without a word, she hovered above my throbbing cock momentarily before slowly lowering herself. Holding my dick in an upright position, Mel then guided her wet, freshly licked asshole to my waiting shaft. I bit my lip as her tight little star slowly opened and enveloped my engorged head before sliding down my entire length. \n\n\"Ooooooh, \"she moaned, nestling down with my cock fully implanted in her ass. \"That feels so deep!\" \n\n\"Uh huh,\" I grunted in agreement, overcome by the sensation of Melanie's pulsing asshole tightly gripping my turgid cock. \n\nResting her hands on my thighs to steady herself, Mel lifted herself upwards, sliding her stretched butthole up my slick shaft before plunging back down to bury to bury it once again. I watched with amazement as my friend's girlfriend proceeded to fuck me with her ass, continuing with an unchanging, cautious pace. \n\n\"God I love your ass!\" I exclaimed, as I watched my dick disappear inside Melanie's tight, pink hole. \n\n\"And my ass loves your cock,\" she countered, reaching down to squeeze my balls and sending a shiver through my body. \n\nAfter a few more minutes of unrelenting ass fucking, Mel experienced her third orgasm of the evening. Plunging her butt down hard, her legs tightly gripped my body as she shuddered and clenched her asshole around my dick. Through clenched teeth she howled in ecstasy, tossing her head and sending her brown hair thrashing across her back. \n\n\"Are you close to cumming?\" she asked, as she lifted herself off my throbbing cock. \n\n\"Hmmm, not really,\" I answered as my dick fell against my stomach with a wet \"slap\". \n\n\"Well, let's see if I can do something about that.\" \n\nMelanie spun around and coaxed me to spread my legs wider as she nestled down into position in between them. Wasting no time, she began running her tongue over my balls which were soaking wet with her own pussy juices. \n\n\"So are you still going to let me cum on your face?\" I asked as she started stroking my cock in conjunction with tonguing my balls. \n\n\"Of course,\" she said with a sexy smile. \"A deal's a deal.\" \n\nI returned her smile as she resumed licking and sucking my balls with enthusiasm. \n\n\"Come on Damon,\" she coaxed. \"Cum for me. I want your cum all over my face.\" \n\nHer dirty words increased my arousal but I still felt far from orgasm. That was, until Mel took one of her slender fingers and began rubbing it against my asshole. \n\n\"Mmmm,\" I moaned in gratitude.\n\nMelanie smiled intently as she removed the finger and sucked it into her mouth, wetting the entire length. I was a little confused, but soon understood as she returned the slick digit to my ass. Her fist furiously pumping, and her mouth sucking at my balls were soon complemented by Mel's wet finger prodding at my asshole. I took a deep breath as she slid it in up to the knuckle. \n\nSuddenly my body tensed and my ass contracted around her finger as the most intense orgasm I have ever experienced wracked my body. \n\n\"Oh fuck!\" I moaned as Melanie lifted her face and pointed my cock towards her. \n\nShe continued stroking as my dick erupted, sending a thick stream of white cum onto her smiling face, splashing across her forehead and glasses. Again and again the warm fluid spurted forth as Mel directed it to cover her face in a playful but sexy fashion. A few seconds later she sat before me with my cum dripping off her glasses and running down her cheek and chin. \n\n\"Well, that was interesting,\" she said with a laugh as she wiped a glob of cum from her glasses. \n\nMy orgasm now past, I slumped back on the bed in contentment as Melanie rushed off to the bathroom for a quick cleanup. My lustful feelings of arousal were soon replaced by guilt as I realized what had just taken place. I had just fucked Kevin's girlfriend! I had just fucked Carrie's friend! I brought my hands to my face as the remorse set in fully. Lethargically, I rolled over and grabbed my underwear.\n\n\"Well, I guess I better get going,\" Mel chirped happily as she returned to the room and began to collect her clothing.\n\nShe obviously did not appear to share my feelings of regret. \n\n\"Look, Mel,\" I began anxiously. \"This is just between us right? I mean...if Carrie or Kevin find out about this...\"\n\n\"They won't,\" she said, cutting me off as she pulled her tight black pants back over her round ass. \n\n\"Yeah but....\"\n\n\"Damon,\" she stated firmly. \"Don't worry. \"\n\nHer assurance did little to decrease my feelings of guilt as I watched Mel dress. Then without a word, she headed for the door, stopping only briefly to turn back with a smile. \n\n\"Don't worry,\" she reiterated as she blew me a kiss. \"It'll be our dirty little secret.\"\n\nThe End.\n\nDamonX "
    ],
    "authorname": "damonX",
    "tags": [
        "cheating",
        "rimming"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/dirty-little-secret-7"
}
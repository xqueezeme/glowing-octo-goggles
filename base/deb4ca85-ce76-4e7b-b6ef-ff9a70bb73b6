{
    "title": "The Bet Ch. 03: End Game",
    "pages": [
        "Disclaimer: Like most lit stories this one would fit in multiple categories. This story has exhibitionism, and light bondage. If those aren't your thing, stop now and find another story.\n\nv5\n\n*****\n\n(Michael)\n\nThe faint sound of music slowly pierced my sleep, I opened my eyes and yawned. The smell of breakfast made my stomach rumble, I looked at my phone, 0930. Getting up, I stretched, put on a pair of black gym shorts with a red t-shirt and followed the smell. Eventually I made it to the kitchen where Eva was dancing around wearing a small black t-shirt, sans panties. She swayed around my kitchen to the beat of salsa music playing from her iPhone and she must've heard me because she spun around with a spatula in one hand and danced to the beat. Her shirt stopped at her hips so I had a complete view of her sex and ass as she spun and danced her way toward me and gave me a quick kiss on the lips before dancing back to the stove. I groaned, walking around without underwear was the latest shot fired in our battle of wills. I was simultaneously excited and frustrated as she danced around while smiling knowingly at me. She quickly served two plates of chorizo, eggs, and cheese in a scramble on my center kitchen island. \n\nI pulled a half-gallon of Florida's finest orange juice from the refrigerator and poured two glasses, then pulled two barstools next to each other and sat down to eat. Eva looked at the barstool with disdain, then used it to climb on to the island, tuck one leg under her and leave the other swinging free on the side. She pulled her plate toward her and took a small bite, in between mouthfuls we talked. I tried to keep casual but it was distracting trying to eat with her perfectly trimmed racing stripe so brazenly displayed less than three feet from my face. \n\n\"I wanted to thank you for last night, that was the most intense experience I've ever had.\"\n\n\"Glad I could arrange it. What did that girl talk to you about?\"\n\nAfter everyone had left the gallery the red-haired beauty had stayed while Remy and I had uncuffed Eva. She'd stayed naked and they had gone into another room to talk privately. I'd helped Remy clean the gallery and after they'd came back out, we'd headed home. Eva had walked to my truck naked and had stayed that way for the ride home, it was a testament to how exhausted we were that we'd fallen asleep in my bed without messing around or trying to tease each other. \n\nEva grins, \"She offered me a job.\"\n\nI arched an eyebrow, \"Really.\"\n\n\"Yeah, kind of like the one Remy did, I'll tell you more about it later.\"\n\n\"Fair enough,\" I said, if she wanted to keep it a secret for now, I'd let her. \n\nWe continued to eat and chat as I stole glances at her nonstop. It was turning me on that she was so nonchalant about her partial nudity. I wasn't sure if she was always like this or was just teasing me in our battle of wills but given her demeanor, I suspected it was a combination. Every time I glanced up at her face after glancing at her pussy, she had a playful smile. She knew exactly what she was doing to me. Afterward I grabbed our empty plates and put them in the sink and when I turned back around, she'd leaned back with her arms propping her up from behind, grinning as her foot swung back and forth.\n\n\"Sure, you don't want anything else for breakfast?\" she asked. \"You could have anything you want.\"\n\nShe spread her legs just a little wider as she spoke and her shirt pulled up giving me a perfect view of her pussy. Her own arousal was evident as she tried to seduce me. My hands clenched into fists and my knuckles turned white as I stood there, I waivered but held firm against her proposal. I wouldn't give in that easy, she hopped off the island and bent over leaning on her elbows. Standing on her tiptoes she propped her ass right in front of me and moved it back and forth.\n\n\"Or would you prefer me like this?\"\n\nGroaning I shook my head.\n\n\"God you're evil,\" I said, as I smacked her on the butt and told her to \"behave.\"\n\n\"Ohhh, harder,\" she laughed.\n\n\"Don't tempt me.\"\n\n\"I like a good spanking baby, just say the word and you can spank my ass all you want.\"\n\nClosing my eyes, I buried my face in my hands, after I gained control, I looked up to see her standing in the hallway with an infuriating smirk. She didn't say anything as I walked past her to the living room to study. She followed me after cleaning up the kitchen.\n\n\"I'm expecting Jason over within the hour.\"\n\n\"Oh, he's cute,\" she said standing in front of me and stretching her arms above her head, her shirt pulled up a few inches once again leaving the trimmed black curls of her racing stripe exposed to me. \"I guess I'll get dressed in my uniform then.\"\n\nI forced my eyes to look up into her face and found her smiling, \"Hey, eyes off other guys,\" I joked. \"The uniform is up to you, I'm not forcing you.\"\n\n\"I know, but a deal is a deal, besides, it's kind of fun,\" she grinned as she relaxed her arms and turned around. She stood there for almost a minute before I realized she was waiting for me. I reached out and gently pinched her bare butt, she immediately wiggled it, sighed and walked out of the room without a word. \n\nPicking up a law book to study I thought about Jason. He was one of my best friends, we'd served in the same unit at our last duty station and then had been assigned to units on this base so it was easy to hang out in our spare time. He was also a member of my motorcycle club and I considered him as close as a brother. While he was a lot shorter than me at five six with short blonde hair and blue eyes, he weighed more than 200 pounds and was built like a tank with arms as thick as my legs. His parents were standard white Midwestern farmers and he was the middle of five children with two older and younger sisters. Farm life had hardened him and made him obscenely strong and he liked to compete in bench-pressing competitions and regularly worked out with more than 400 pounds on the bar. Now I'm damn good at fighting and have been training in martial arts for most of my life and the Marine Corps keeps me in excellent shape but if I had to fight Jason I'd run screaming like a little girl and then wait until his back was turned before I hit him upside the head with a bat... hard and repeatedly. He was not somebody you wanted to be on the bad side of.\n\nWith Eva changing, I read my book in peace for about 30 minutes before the doorbell rang.\n\n\"I got it,\" she said from the other room.\n\nI closed my book and waited, in seconds she led Jason into the room. True to her word she was wearing the maid outfit. Jason walked two steps behind her wearing jeans and a blue tank top, his eyes were practically bugging out of his head as he followed her. Admittedly, she was a vision wearing the type of maid outfit that you would buy from Victoria's Secret or any other lingerie store. It was low cut in the front showing lots of tanned skin and barely reached a decent length to cover her panties. The silk was thin so her nipples visibly poked against the material and I knew from experience that it was tied in the back by only two strings. The choker gave her a submissive air but she'd skipped the fishnets for today and only wore black heels. Idly I wondered what kind of panties she'd chosen to go with it this morning, knowing her it would be something daring and small. \n\nWalking up to me, \"He's here, do you need anything else sir?\"\n\nI smiled at her formality, she liked to tease and I knew she was showing off for me. I took a moment to admire her muscled legs. She smirked as she watched my inspection.\n\n\"I'll take a bottled water if you don't mind,\" looking past her, \"You want anything Jason?\"\n\nShe turned and caught him staring wide-eyed at her ass, she didn't say anything as he turned red. \n\n\"I'd make you some breakfast if you'd like sir,\" she said crisply.\n\nI was enjoying her primness since it matched the personality of her uniform but when she turned, I found out I'd been wrong, she hadn't worn small or daring panties, she hadn't worn panties at all! Her small, tight butt was completely exposed with her tan cheeks and muscular back bared.\n\nJason's face was red as he stammered through a reply.\n\n\"N...No, I'll... I'll just take a water too if it's okay.\"\n\n\"If you say so sir,\" she told him. Turning to me with an impish grin she winked, \"I'll be right back sir.\" \n\nAfter watching her leave, Jason turned to me, \"Dude, what the fuck is going on?! You and Eva, when did that happen? Why is she wearing a maid outfit? What the hell man?!\"\n\nI laughed at his frustration. \n\n\"I'll tell you everything in a minute, let her bring our water back first.\"\n\nIn seconds Eva returned with two water bottles, placing one next to Jason and then casually running her fingers through his hair ruffling it slightly.\n\n\"You're not going to be stupid about this right sir?\"\n\n\"Uhmmm, I'm not sure what you mean.\"\n\n\"I'm not going to hear thoughtless comments or snickering from everybody and you're not going to get any irresponsible ideas or anything about me sir.\"\n\n\"N-,\" clearing his throat and then speaking clearly. \"No, I promise I won't be stupid about this.\"\n\nGrabbing his hair, she tilted his head back and looked him in the eyes for a few seconds, \"Good boy sir,\" she said letting him go.\n\nWalking over to me she set my water down. \n\n\"Anything else sir?\"\n\n\"I think we're good, if you'd give us some time alone that'd be great.\"\n\n\"Of course sir, I'll be in my room.\"\n\nBending over she kissed me on the mouth, her tongue slipped through my lips and teased me as her breath mingled with mine, without underwear I could only imagine the show Jason was receiving as she'd kissed me.\n\nFinishing she stepped back and slyly flipped up the front of her skirt exposing herself to me. I looked over at Jason and saw his mouth drop open with an astonished look, he knew what she'd just done but hadn't been able to see from behind her, still I was sure the angle he'd just seen had showed him plenty. \n\nWithout another word she turned and walked away, when she passed Jason she reached out and ruffled his hair again.\n\nI held up a hand for silence and we watched as she left the room waiting until we heard her room door close.\n\nI laughed as Jason looked at me with a confused expression, getting myself under control, I explained the situation to him. Never speaking, he just nodded as I told him about everything we'd done up until this moment. \n\nAfterward he spoke, \"You know you can't win this right?\" \n\n\"The hell I can't.\"\n\n\"You're an idiot, you don't understand what I'm saying. I'm not saying you can't win, I'm saying you shouldn't win.\"\n\n\"I don't think so, there is no way I'm going to let her have the upper hand.\"\n\n\"Dear god you're an idiot.\"\n\n\"What the hell do you mean by that?\" \n\n\"Just what I said, you're a freaking moron, but because you're one of my best friends I'm going to explain it very slowly to you. Don't worry I'll use small words,\" he grinned. \"Although I shouldn't, because if you fail, I may have a chance at her.\" \n\n\"Don't make me kill you.\"\n\nLaughing, \"You're lucky it's easy for me to see this stuff because I'm on the outside looking in.\"\n\n\"Ok, let's hear your reasoning.\"\n\n\"To begin with, you like this girl, right? I mean you're not planning on just hooking up and nothing else right.\"\n\nShrugging, \"Whatever happens happens, but yeah, I don't plan on it be a quickie or anything.\"\n\n\"So, you're saying that you want this girl to possibly get into a relationship with you with her knowing that you don't find her irresistible?\"\n\n\"Of course not, that's just stupid.\"\n\n\"Exactly.\"\n\n\"But that's not what's happening, this is just a challenge to see who's stronger.\"\n\n\"God you're an idiot.\"\n\n\"You keep saying that...\"\n\n\"You keep proving it, if you keep this up, I'm going to strap a helmet to your head when we go outside. Look, I know she's drop dead gorgeous and everything, but no matter how beautiful the girl is they always feel insecure, especially one who just got out of a bad relationship. Imagine this, you guys end up boyfriend and girlfriend and every time you fight, every time something happens, not only is she going to be dealing with whatever the argument was about but she's going to have this tiny seed of doubt about how you feel about her. She's always going to remember that you were able to resist her and that maybe you don't think she's beautiful or special or whatever.\"\n\n\"That's just stupid, she knows she special.\"\n\n\"Oh my god, you really are an idiot. It doesn't matter how hot a girl is, they all feel insecure about something. They all have their moments that they don't feel special, and your plan is to highlight this fact. So that every time she feels less than perfect, she's going to remember that you don't think she's perfect too.\"\n\n\"That doesn't make sense.\"\n\n\"That's because you're a guy and are therefore incapable of understanding what goes on in a woman's brain. I promise you I know what I'm talking about.\"\n\n\"If that's true how do you know this?\"\n\n\"Hello, four sisters, they make it their life's mission to educate me on this crap. Let me put it this way, have you ever met a woman who wasn't a little bit crazy?\"\n\n\"No, not really.\"\n\n\"Do you really think this one is the exception?\"\n\nI started to reply but then I thought back to the occurrences we'd already had, the breakfast fiasco, the scratching me with her nails.\n\n\"Uhmmmm...\"\n\n\"Yeah, that's what I thought. I can see by the look on your face you're thinking about some incidents. Now let that little hamster in your head keep running around that wheel and think about this.\"\n\nI scowled but had to admit his logic was sound, eventually I reached a conclusion.\n\n\"You may be a little bit, possibly not as totally wrong as I would like to think.\"\n\n\"Uh huh,\" he said drily. \"Keep going.\"\n\n\"So I should have given up?\"\n\n\"NO, through sheer dumb luck you've played it well.\"\n\n\"Huh? But you just said...\"\n\n\"You're an idiot, shut up and listen.\"\n\nI gave him a dirty look as I considered punching him.\n\n\"You don't want to be too easy either. Girls aren't any different from guys in that manner. If you'd given up too easily you wouldn't be worth the chase. Now that you've resisted her, if you lose, you'll still be worth it because now you're a trophy, a conquest. Now when you're together she'll know that not just any girl will be able to take you. If you'd given in too easily then she'd always think that another girl just has to wink at you and you'll go running. By making it a challenge, you've shown you're worthy of her affection.\"\n\n\"You're giving me a headache.\"\n\n\"Look, I know with your limited IQ it's hard to understand all the adult words I keep using but try to keep up.\"\n\nI flipped him off.\n\nWithout blinking he continued, \"I know you think you've been putting on the moves and charming her and being mister smooth, but I promise you, you've been stalked, baited and hunted from the beginning.\"\n\n\"What? No, that's stupid.\"\n\nHe gave me a look that most people reserve for small children, \"Really?! So you really think she just decided to agree to your bet because you're such a good guy? You may have come up with the bet but she agreed to it. Do you really think that she would have kept betting you and kept doing all the things she's done if she hadn't been chasing you? Let me put it this way, either she's so weak willed that you've manipulated her every step of the way which means she doesn't really like you orrrrrrrrr she's playing the game as well as you are and likes you just as much as you like her and you're too stupid to realize it. Now which sounds more likely? Does she seem stupid or weak?\"\n\nI put my head down to think about it for a minute, when I looked up at him, \"I hate you.\"\n\nHe burst out laughing, \"You just don't like the fact that you've been manipulated as much as you've been manipulating. Don't worry, I'm sure you've been doing good or she would've stopped a long time ago. You just need to realize that two are playing the game. Every time you tied her up or got her naked, she was adding another link to the chain on your collar and you didn't realize it.\"\n\nI hated to admit it but he might be on to something. I'd been so proud of my efforts to 'get her' that I completely thought it was a one-way street, and as much as I hated to 'give in,' he was right, if I didn't give in how would that make her feel? I tried to reverse the thought process on how I would feel and I immediately got a sick feeling. If I tried my hardest to get her and she rejected me I'd feel horrible no matter what the circumstances.\n\nHe stayed quiet as I worked through the issues he pointed out, eventually I looked up and nodded, he was right. \n\nAfter that we talked about other things like sports and work and after a while decided to go play some basketball at the nearby gym. I got up and knocked on her door to see if she wanted to come with us. She agreed and I went to my room to grab my gym bag. When I came back out Jason was coming out of the bathroom wearing red basketball shorts and a black tank top. I had changed to a pair of black basketball shorts and a blue muscle shirt while Eva walked out of her room wearing black skintight volleyball style shorts that barely covered her butt and a pink sport bra with her hair in a tight ponytail. \n\nWe hopped in my truck and drove to the gym. The next few hours were spent playing ball with the local gym rats. Eva joined a couple of games and proved she was athletic with a set shot from anywhere short of the three-point line. She gave as good as she got and by the beginning of the afternoon, we were all soaked in sweat. \n\nAround one o'clock everyone headed out leaving just us as we sat on the bleaches and drank Gatorades I'd bought while talking about the games.\n\n\"You're pretty damn good.\"\n\n\"Thanks, I played all four years of high school but I'm pretty rusty. Most guys don't want to play with a girl so I don't get a lot of chances to stay sharp.\"\n\nEven sitting on the bench out of breath and sweating she looked sexy, her bra was soaked and I could just make out the darkness of her nipples poking through the material.\n\nWe glanced at Jason and caught him staring at her chest. Eva cleared her throat and he quickly looked up and back and forth at us shaking her head as she took a drink of Gatorade. \n\nI laughed, \"Busted.\"\n\nHe turned red and shrugged but didn't say anything and we continued to talk about the games and each other's strengths and weaknesses when I noticed the time, 1:30 p.m.\n\nStanding up, \"I need to take a quick shower.\"\n\n\"Me too,\" Jason said.\n\n\"I'm good, I'll wait for you here. I didn't bring a change of clothes,\" Eva said.\n\nI nodded and walked toward the locker room while Jason followed. We quickly stripped and walked into the massive shower room. Like most male lockers it was one big room with individual shower nozzles and no privacy between occupants. \n\nI ignored Jason and rinsed my body. I grabbed my small bottle of shampoo, closed my eyes and lathered my hair but when I turned around to rinse, I opened my eyes and saw Eva standing in the doorway of the shower room.\n\n\"What the...\" I stuttered.\n\nJason looked over and froze, we each stood with our mouths open, the only thing she was wearing was a small black G-string, her breasts were slightly upturned and her nipples were puckered and hard. The steam from the showers and her sweat combined to shimmer on her skin making her muscles stand defined in the dim locker room light. \n\nShe casually reached down and slipped out of her bottoms as she walked into the shower. \"Don't worry, I checked and nobody else is here except the staff.\" \n\n\"Uhhhh, yeah but what if they walk in?\" I asked.\n\n\"Right before they close?\" she replied. She walked toward us with a sensual power and a purpose. \"Besides, who cares if somebody does? At most it'll be one or two people that will see me and what are they going to do? Go tattle? I'll be the one to be embarrassed, not you two.\"",
        "Jason and I looked at each other, he shrugged and continued to watch Eva. \n\nI closed my mouth as she walked between us, turned on a shower head and started to rinse.\n\nTurning to face me, \"You boys want to lather me up?\"\n\nJason and I looked at one another, I gave him a quick nod and then we washed her body. I rubbed the soap into her arms and chest as she closed her eyes and relaxed. Jason moved his fingers into her back and gradually worked his way down. When he washed her ass, she looked down and to the side. I got the impression that she was waiting to see if he'd cross a line and she'd have to tell him to stop but my friend just soaped her up and bent down to one knee to wash the back of her legs. \n\nAfter finishing washing her tits and stomach, I moved lower to wash her pussy. Closing her eyes, she let out a soft sigh as I cupped her mound moving back and forth, stroking her gently I spent extra time cleaning her. Jason finally finished her legs and stood, I noticed he was washing her butt again, she gave a small smile and looked over her shoulder.\n\n\"Guess you better make sure I'm really clean right?\"\n\n\"Just thinking of you chica,\" he said with a smirk. \n\nI went to one knee to wash the front of her legs as she turned back to me. With a wink she turned around switching sides for us. Jason paused and glanced at me but I nodded and washed the back of her legs. He soaped up her front and we were quiet the next few minutes as we washed and rinsed her. Jason wasn't shy as he soaped her front and I saw him cup and slowly lather her pussy as I moved up to wash her back. He didn't spend as much time as I did but he thoroughly washed her front. \n\nAs we finished, she looked directly at Jason, \"Thank you for that.\"\n\nSome unspoken communication passed between them for a second then he nodded his head, handed her the soap and stepped back. \n\nTurning back to me, \"Want me to do you now?\"\n\nClearing his throat Jason said, \"I'm going to go get dressed, I'll let you two finish.\"\n\nEva and I ignored him as he left the shower but the second, he was gone I pulled her to me and kissed her.\n\nShe molded her body to mine as the shower played over us. I felt the rivulets of warm water wash over our skin. Our tongues met and teased each other and my erection formed between us, pressing against her sex. Her hands grabbed me by the back of the head to keep me from breaking the kiss and my hands roamed over her back, moving down to cup her ass and pull her against me. She finally let my head go and moved her own hands to cup my ass and her kiss became frenzied, passionate. I pushed her against the cold tile of the wall and she hiked her right leg up and wrapped it around me while digging her nails in my ass. I was losing all semblance of control. \n\nI broke the kiss and she frowned at me, her teeth showing in a snarl as her hands moved from my ass to my back and she dug her nails in raking them down my back.\n\nI arched and growled, \"You win. You win, I relent, you're stronger than me.\"\n\nHer smile deepened and she pulled me toward her, \"Never forget, I own you,\" she whispered before biting my ear. \n\nI groaned and she pulled her head back with a look of triumph. I grabbed her wrists and pulled them off my butt and pinned them to the wall above her head. Glancing up at her hands she gave me a wicked grin then lifted her other leg and wrapped it around me as we stared at each other through the steam and water. \n\nStill holding her arms against the wall, I shifted my waist until the head of my cock was pressing against her entrance. Her sneer changed to a gasp as I smoothly entered her and she was so wet that I instantly slipped fully inside her, closing her eyes I impaled my full length inside her. Holding her against the wall she kept herself supported by her legs wrapped around me. \n\nCarefully I flexed against her, slow measured thrusts that picked up speed. She used her legs to pull me deep with each stroke, quickly we were slamming against each other as she cried out with each stroke.\n\n\"Yes, yes, oh my god yes.\"\n\nOur need for each other was vicious as I kept her trapped and we took from each other. I plunged into her until I felt myself ready to burst. Recognizing my need she pressed harder and harder against me on each plunge of my cock. We were both at the edge and the exact moment I burst she cried out and her body spasmed and locked. Paralyzed with pleasure I emptied myself deep inside her as her legs tightened around me and she shuddered in ecstasy. \n\nTime eventually moved forward as we caught our breath from the intensity of our climax. I let her hands go and she wrapped them around my neck while holding on to keep herself upright. I cupped her ass to support her as we leaned against the wall. I felt the tremors in her body like little aftershocks matching my heartbeat. \n\nFinally, we looked into each other's eyes and she gave me a smug smile.\n\n\"Now we know,\" she said.\n\nNarrowing my eyes, I pushed inside of her again making her cry out. \n\n\"Don't ever think that means I'm weak,\" I said.\n\nShuddering she nodded as she clung to me.\n\n\"Hurry up you two,\" I heard a voice say. \"I need to go home and jerk off after hearing that.\"\n\nWe broke apart then quickly rinsed and got dressed.\n\nAfter we got home, she went to her room. \n\n\"I think I need to take another shower and change,\" she said. \"Showering then putting on sweaty clothes is kind of disgusting.\n\nOnce she was gone Jason turned to me, \"Damn, you two are loud.\"\n\nI laughed, \"Don't look at me, it was all her.\"\n\n\"That was the coolest thing ever.\"\n\nI looked sideways at him, \"I admit I thought it was pretty hot, but I'm not sure of that thing between you two. Should I be worried?\"\n\nJason waved a hand, \"Naw, she was testing me, not you.\"\n\nRolling my eyes and holding up my hands questioningly, \"Alright, let's hear more of your wisdom.\"\n\n\"You already told me she's a showoff, that's all it is. She was testing to see if I'd be cool or a jerk, it had nothing to do with you. If I had tried something, she'd have just stopped it and then she'd never do anything around me again. Now she knows I won't act dumb or take advantage of her. It was a trust thing. She wants to be with you and now she's knows she can trust that I'm your friend.\"\n\nI nodded, that made sense from what I knew of her personality.\n\n\"And I guess that means I can trust you around her too,\" I said.\n\n\"Always brother, I'll look all day long but I don't touch what isn't mine.\"\n\n\"Well, you did touch her,\" I pointed out.\n\nLaughing, \"True, but not disrespectfully or sexually, yeah, I soaped her up but I didn't do anything she wasn't cool with and I'd never do something while you two were together.\"\n\n\"She's one of a kind, isn't she?\"\n\n\"I'd kill to find a girl like that,\" Jason agreed. \n\n\"Why don't you go home and change and then come back around six. I'm going to take her out to dinner, you can join us, dress nice.\"\n\nHe looked at his phone and did some quick mental calculations. \n\n\"Sounds good, I'll text you when I leave my house.\"\n\n\"Great, see you in a bit.\"\n\n*****\n\nAfter Jason left, I walked into her room and lay on the bed. I'd changed at the gym to a clean pair of jeans and dark blue t-shirt with the word 'Bazinga!' on the front. I didn't have to wait long before Eva entered wearing a towel. \n\n\"Aren't we getting squeaky clean today?\"\n\n\"After putting those dirty gym clothes back on I kind of needed another shower.\"\n\nI nodded understanding.\n\n\"I guess you won,\" I said.\n\n\"I guess I did,\" she said sighing with exaggerated innocence she shook her head while looking up at the ceiling. \"And here I thought you were tough. I guess it was all talk about how badass you are. In the end you're just like all the rest, you couldn't resist me.\"\n\nRolling my eyes, I buried my face in the pillow.\n\n\"You're never going to let me live this down, are you?\"\n\n\"No.\"\n\n\"You have to admit that I lasted longer than anybody else would have.\"\n\n\"I maaaaaay be slightly impressed, I really didn't think you'd hang as long as you did.\"\n\nWalking to the edge of the bed she reached out and used her fingers to lift up my face.\n\n\"But in the end, just like we knew it would be... you... are... mine!\"\n\nAs she said those last words, she undid the towel and let it drop to her feet.\n\nHer body was magnificent standing there in front of me, her smooth tanned skin with light bikini tan lines, lean muscular definition, and wavy dark hair still damp from the shower. I reached out to run my finger up the outside of her thigh.\n\n\"Of course, now you belong to me too,\" I said looking into her eyes. \"Your words, not mine.\"\n\nShe gave one small nod of her head and I took her hand, swallowing, she entwined her fingers with mine. \n\nSuddenly I pulled her on top of me, she lost her balance and fell forward but went with it to straddle me with our face's inches from each other. \n\n\"One of us is a little overdressed,\" she said huskily.\n\n\"So fix it.\"\n\nShe leaned back and I pulled up to a semi sitting position as she helped me tug my shirt off quickly throwing it to the side. Wasting no time, she undid my pants and tugged them down while moving with them. Pulling off my jeans they went flying across the room. She slowed down as she reached for the waistband of my black sport shorts and tugged it down a couple of inches then stopped when she saw the head of my growing erection. She didn't pull my shorts down farther but just kept me exposed. Looking at me hungrily she moved between my legs, positioning herself till I felt her breath on my dick. Without any hesitation she licked the head of my cock, teasing me, swirling her tongue around the head. I moaned and she grew excited, taking me into her mouth and sucking. I pushed my hips but she matched me and never let me thrust deeper into her mouth. She drove me crazy as she played with me, licking, teasing, bringing me to edge and back. \n\nI reached my hands out to guide her but she slapped them away.\n\n\"Uh uh, no touchy or I stop,\" she murmured between licks and sucking. \n\nI groaned in despair.\n\n\"Ughhh, you may be the devil.\"\n\nShe pushed my hands flat against the bed and held them there, then went back to sucking me. She finally pulled my shorts to mid-thigh but never took any more of me into her mouth, never letting her tongue or mouth go further than an inch or two beyond the head of my dick. No matter how I pushed my hips and shifted she flexed with my body and kept me on edge. I was growling nonstop as she tormented me.\n\n\"Oh come on, I gave in already! You can't keep doing this,\" I protested.\n\n\"I told you I was going to get even,\" she growled around the head of my cock. \"You tied me down for two hours and drove me crazy so I don't want to hear your complaints.\"\n\n\"God damnit!\"\n\nDespite her words I think she liked hearing my complaints, knowing how worked up she was getting me. It seemed to excite her because she pulled my shorts down the rest of the way and gave one last swirl of her tongue around the head of my dick before she straddled me.\n\nI felt the wetness of her slit as she pressed against me, I grabbed her hips but she pushed my hands away.\n\n\"Hands down,\" she commanded.\n\nI knew I could take control but I also knew that I deserved a little payback. Like my friend told me, sometimes you have to give in a little. After this time though I promised myself I'd show her who owned who. \n\nI gripped the sheets and she gave me that condescending look of hers. \n\nOh yeah, I thought, she is definitely going to get put in her place after this.\n\nShe let my frustration mount while I pushed against her, I kept trying to slide inside her while she rode me but she never let me penetrate. Finally, I got tired of her teasing and grabbed her hips as I thrust up and I held her there a second before she came down, shifting my hips she fell forward and I pushed inside her.\n\nI froze as her warmth enveloped me, her eyes closed and her hands opened and closed into little fists against my chest. Opening her eyes, she looked at me as I drove upward, forgetting anymore teasing she slowly rode me. \n\nTime lost all meaning as she relaxed and moved her body in passionate rhythms with mine. I kept my hands on her hips but let her control our movements. We took our time, letting our desire build into a wave. We each moaned and matched each other's pace. She put her hands over mine as we kept our movements perfectly synced. I pushed and she would ride each of my thrusts and roll her hips back at the top of our motion. Our lust grew but our motions never increased and the pressure came on suddenly, one second, we were moving slow and luxurious and the next she was trembling. Feeling her orgasm around my cock, the burning of her body, the quivering need inside her, instantly sent me into my own explosion. We continued to thrust against each other gently but fiercely as we rode a wave of ecstasy, our thrusting, giving and taking decreasing in ever smaller movements until completely spent she collapsed against my chest. I stroked her hair as we recovered. \n\n*****\n\nA few hours later I woke up with Eva snuggled against me, messy haired, mouth open, drooling on me with one hand in a fist lying on my chest. I watched her for a few minutes thinking about the last week. \n\nGently I got out of bed without waking her, for a moment I was worried but she let out a loud snort and a grumble then grabbed a pillow and wrapped around it and quickly fell asleep again. Looking at the clock I saw we'd slept for a few hours, it was a little before five and Jason would be back over soon. Now was as good a time as any to wake her so I reached out and gently shook her shoulder. With a growl she threw her arm back and hit me in the face.\n\n\"Jesus...\"\n\n\"Whazzah...\" \n\nI stepped back and she looked around the room bleary eyed. It took a minute for her to come fully awake and she finally focused on me with half lidded eyes. \n\nShe grunted and flopped back down on her pillow.\n\n\"Time to wake up.\"\n\n\"Mrf razzh,\" she mumbled into her pillow.\n\nI crawled on the bed to straddle her butt.\n\n\"I didn't hear you.\"\n\nShe lifted her head from the pillow, \"GO AWAY.\"\n\nAmused I told her, \"We need to get ready for dinner.\"\n\nShe squirmed as I straddled her, so I ran my fingers up her side in a ticklish motion and she squealed and squirmed away forcing me to pin her down. She brought a hand behind her to swipe at me but I grabbed it and pinned it behind back. She swiped her free hand but I grabbed that too, sensing an opportunity I reached over to my nightstand and grabbed a pair of handcuffs and in seconds had them on her. She squirmed and bucked but couldn't get free. My closet door was fully mirrored so we were able to look each other in the eyes after she gave up.\n\nGlaring and shaking her cuffs, \"Going to be hard to get ready like this.\"\n\n\"Probably but you seem like you need a wakeup boost,\" I said as I tickled her sides.\n\nShe half-screamed and fought and thrashed while I ran my fingers up and down her sides. For a few minutes we tumbled on the bed as I tortured her. \n\nGasping, \"Please baby...\"\n\n\"Gonna kill you...\"\n\n\"Bastard...\"\n\n\"Fuck... Fuck... Let me go...\" she panted.\n\nUghhh... I hate you.\"\n\nI stopped teasing her and she lay red-faced, panting and glaring at me in the mirror. While still face down I grabbed her ankles and spread her legs apart, she was so exhausted she didn't put up a fight. She bit her lip when I shifted and stroked my fingers, teasing her pussy, rubbing up and down she moaned as I switched from one finger to two. Slick from arousal with her juices flowing I reached over with my freehand and grabbed her hair and pulled her head back slowly but firmly. Her mouth opened in a small O and a guttural noise escaped her, closing her eyes when I slipped my fingers inside her and teased her clit. I pulled her head back a little farther, just enough to see her nipples and she strained against me, her cuffed hands fluttering behind her back as she moaned in pleasure while I kept up the pressure. She looked sexy with her back arched, hands cuffed and struggling behind her, head pulled back, mouth open and eyes half closed. Her noises got louder as I kept fingering her and before I knew what was happening, I felt her body tremble, crying out as the orgasm took her and her hips pressed into the bed. She shivered as I held her tight until she finished her pleasure and I eased her head down while pulling my fingers out of her. She lay limp as I uncuffed her and hopped off the bed.\n\nRolling her head to look at me she never moved the rest of her body. \n\n\"I'm really getting into this whole bondage thing,\" she said.\n\n\"Careful, I'll have you tied up every night if you encourage me.\"\n\nClosing her eyes, \"Right now I wouldn't mind.\"\n\nTaking advantage of her weakness I reached over and slapped her butt.\n\nHer eyes flew open and she groaned but made no move to protect herself. \n\n\"Stop that or you'll get me all worked up again.\"\n\nI leaned down till our faces were barely a foot apart, \"Sounds fun, we could cancel dinner and stay here.\" \n\nIn a sudden change she grabbed my head with both hands and pulled my face toward her kissing me fiercely, I had to push my arms against the mattress to keep from falling over. Biting my lip, she abruptly broke and pushed me back. \n\n\"Now go away, I want to get ready in peace and you're going to distract me.\"\n\nShe hopped up and hurried to the master bathroom, seconds later I heard the shower.\n\n\"I'll join you,\" I said.\n\nHer head popped into the doorway, \"No you won't, go clean up in the other bathroom. You distract me too much. No more peeking before dinner,\" she said closing the door, I heard the lock click. \n\n\"Pushy brat,\" I said leaving the room to get ready.\n\n\"I heard that.\"\n\nAt 5:48 the doorbell rang.\n\n\"Jason's here,\" I called out, cuffing the sleeves up to my forearms I walked to the front door.\n\n\"Be out in a minute.\"\n\nI opened the door and Jason followed me to the living room. We each wore black dress slacks and shoes, I chose a fitted dark red dress shirt while Jason had a sapphire blue dress shirt. \n\n\"She'll be down in a second.\"\n\n\"No problem, where you plan on taking us?\"\n\n\"Nick and Stan's Steak House in downtown.\"\n\n\"Nice, I love that place.\"\n\n\"Me too.\"\n\n\"Any plans for us afterward?\"\n\n\"Not really, why, you got something?\"\n\n\"I figure we can go for a nice walk afterward since it's less than a block from the city square.\"\n\n\"Good idea.\"\n\n\"Well I....\" \n\nJason froze and his jaw dropped, I knew what must have caused his sudden change. Slowly I turned around to face her and savor the moment. Nobody spoke as she paused in the entrance with a black elegant dress in each hand wearing only bra, panties and garters. Making an entrance her hair was done up and piled atop her head with a few strands framing her face. Her earrings dangling like streams of silver with a matching silver and sapphire necklace, her bra was a translucent black and her nipples were clearly visible through the flimsy material. She had another matching silver and sapphire ring piercing her navel with matching silver armband, she wore a sophisticated black garter attached to black stockings that matched her bra. Her black panties were made from the same material as her bra and clearly exhibited her shaved sex underneath. I did a double take, I knew she had a small racing stripe a while ago, I studied her panties to make sure they weren't illusory transparent but I saw her clearly. She had to have shaved in the shower. I swallowed as I looked into her eyes, she'd noticed my deduction and gave me a wink. \n\n\"Gentleman.\"\n\n\"Uhhhhh.\"\n\n\"Ummmm.\"\n\n\"Clever as always,\" she said rolling her eyes at our dual shock. \"I need your help deciding which dress.\"\n\nTilting her head to the right, \"This one has a stomach cutout and pretty daring side slits but it's kind of tight so I'm not sure if I can pull off the garters,\" she said. Tilting her head left, \"This one is slightly more flowing and will hide the lingerie better but the front plunges to my belly button so I'd have to lose the bra and the side slits go pretty high and would definitely show off the fact I'm wearing garters.\"",
        "\"That one,\" we both blurted.\n\nShe raised her eyebrows.\n\n\"Of course,\" rolling her eyes. \"The second one it is.\" \n\nShe tossed the first dress on the back of my grey plush comfort chair and turned around.\n\n\"Do you mind?\" she asked Jason. \n\nPausing a second, he reached over and unclasped her bra and she shrugged out of it and turned to face us as she slipped the dress over her head. This close I saw a faint trace of glitter on her chest and her nipples were crinkled and hard from excitement. I reached out and tweaked one while her head view was blocked by the dress.\n\n\"Behave.\"\n\nJason laughed then he reached out and tweaked the other nipple just as her face came free.\n\nHer mouth formed a surprised O, \"Hey,\" she said in mock outrage as we stood there innocently.\n\nShe shook her head and continued to let the dress drop down her body. It tied around the neck with two flowing strips of cloth going down the front to meet the bottom half leaving a wide V on her chest. The bottom half reached her ankles but was split on the sides to mid-thigh. When she stood still you could see the sides of her stockings but when she moved, I knew I'd be able to see the garter straps. She did a slow turn, the back side molded to her ass and stopped just above her butt leaving her back bare. She smoothed out the dress and waited for our reaction. I had seen her naked so much that it was burned into my brain but this dress still took my breath away and it took us both a minute before we were able to respond. \n\nI blew out the breath I'd been holding, \"Words fail me.\"\n\nJason nodded dumbly as she rolled her eyes at our reactions but I saw she was pleased. \n\nI eyed the dark clouds overhead as I drove us to the restaurant in my truck with Jason in the backseat. The weather was forbidding but the night was warm and we parked a block away next to a gardened side square. We got out and she took each of us by the arm and with one on either side we walked toward the restaurant. \n\nOnce inside I saw quite a few heads turn from guys and girls as we made our way to a small 4-person table. Eva was stunning and she knew it but she looked straight ahead or at Jason and I, ignoring everyone else. I held out her chair and Jason and I took seats on either side of the table. We kept it simple and all ordered steaks and a bottle of wine. We talked while waiting for our food and the topic turned to Eva and her flashing as Jason asked to hear the story. I assumed even though he'd heard my version he wanted to hear the difference from her point of view. \n\n\"So why has nobody ever discovered you're an exhibitionist before?\" Jason asked.\n\nEva shrugged, \"I didn't really know everybody that well. My ex didn't like it, he was super possessive and after him I didn't want to alienate anybody in the club so I kept it under wraps.\"\n\n\"Why would we care?\" I asked.\n\nShe rolled her eyes, \"Spoken like a guy,\" she said. \"If the girls heard I was showing off they'd get jealous, especially since I didn't have a boyfriend. Each one would think I was trying to get their guy, they'd quit inviting me to hang out and eventually I'd be forgotten.\"\n\n\"But dating princess over here changes that?\" Jason asked.\n\nMy eyes narrowed at the princess comment but I kept quiet. \n\n\"Yes, now that I'll be seen as his property, I can be a little crazier, they won't feel as threatened by me.\"\n\n\"Makes sense,\" he nodded.\n\nI laughed, \"Of course it does cupcake, she used small words so you'd understand.\" \n\nIgnoring me Jason turned to Eva, \"I get all that but what I really don't get is what you see in princess over here,\" jerking his thumb toward me. \n\nEva giggled.\n\nMy eyes narrowed and I held up my steak knife, \"I will stab you in the heart.\"\n\nFacing me, \"Naaaaaaaa, you love me too much.\"\n\n\"I'll get over it.\"\n\n\"Never happen.\"\n\n\"Really I will.\"\n\nShaking his head, \"Now you're just embarrassing yourself.\"\n\nTurning to Eva, \"You believe this guy.\"\n\nShe giggled again at our banter.\n\nClearing his throat, \"Ok, all serious now. Are you telling me you were naked at an art gallery in front of hundreds of people?\"\n\nShe blushed and looked down, \"Yes.\"\n\n\"How the hell did that feel?\"\n\nA look of ecstasy crossed her face, \"Incredible.\"\n\n\"Annnnd you were tied down?\"\n\nShe nodded, \"Trust me, I was on the edge of orgasm the entire night.\"\n\nShe noticed my raised eyebrows and added, \"It's true.\"\n\n\"Good to know.\"\n\nTilting his head toward me, \"So now that you're with my boy here you can let loose. Is that it?\" Jason said.\n\nShe nodded.\n\nProdding, \"You really enjoyed flashing me throughout the day though, didn't you?\"\n\nShe shrugged, \"I just like showing off my body.\"\n\n\"Feel free to show your body to me anytime,\" Jason laughed. \n\nShe turned serious and looked him in the eyes for almost a minute before she casually glanced around the room. I followed her gaze, all the other patrons were engrossed in their own conversations and nobody was paying attention to us. She brought her hands down and sat back in her chair just a little straighter so that we could each see her lap. Still glancing around she grabbed the sides of her dress and slowly bunched it up to one side. After a few seconds we saw her panties and garter belt. She looked around while smiling and holding her dress up, I glanced at Jason and saw the waiter at the next table look at us right then, his eyes went wide and I knew she'd been caught. When I looked back at Eva, she'd calmly let her dress drop back into place. \n\n\"That was so sexy,\" Jason whispered.\n\n\"You have a new admirer,\" I said gesturing at the other waiter. \"Pretty sure he saw what we were doing.\"\n\nEva blushed but didn't say anything. \n\nAfter taking the other tables order he made his way to our table, he was a lean young man with a good-looking clean face and short dark hair, he looked Puerto Rican and spoke with a slight accent. \n\n\"Hello, I'm Andre,\" he said. \"I know I'm not your waiter but I just wanted to let you know if you need anything, I can help you. \n\nEva gave him a winning smile, \"Thank you Andre, I'll wave you over if we need anything.\"\n\nWe all held matching conspiratorial smirks as he nodded his head and walked away. \n\n\"You gained a fan,\" I said.\n\n\"Yeah, I don't think he saw anything because of the angle but I'm sure he figured what we were doing.\"\n\n\"Your nipples are hard,\" Jason said.\n\nEva glanced down at her dress at her conspicuous display before looking at him and whispering seductively, \"Yes they are Jason, I guess that means I'm excited.\"\n\nThe first of our food came and broke the conversation for a while as our waiter placed dishes and refilled glasses. \n\nThe meal was perfect as we laughed and talked, Jason and Eva finished our bottle of wine and I limited myself to one glass since I was driving. \n\nAfter dinner I asked for the dessert menu but Eva told the waiter no.\n\n\"But I wanna...\" Jason sputtered.\n\nEva raised her eyebrows, \"I said NO!\"\n\nJason looked at me with a small scowl but I had no idea what she had in mind so I handed the waiter my credit card.\n\n\"Whatever,\" I said offhandedly.\n\nWe left the restaurant arm in arm to see the weather getting worse.\n\n\"I was going to suggest a walk around but I think that'd be a bad idea now,\" Jason said.\n\n\"Maybe next time,\" I said. \n\nHalfway to my truck the wind picked up and silence fell in quick premonition as fat drops hit the street, we picked up our pace and were hallway across the park before the rain picked up. Other well-dressed pedestrians out for evening strolls and dinner were making mad dashes to their vehicles as we all tried our hardest to avoid getting wet. Thirty yards from my truck the rain increased as we sprinted the last dash. Breathless we hopped into my truck, we were mildly wet but laughed while the rain steadily fell. \n\n\"It's actually not too bad,\" Eva said. \"Let's wait and see if it goes down.\"\n\nI turned my truck on and music played as we watched in silence. \n\nEva turned up the volume as Only Girl by Rihanna started. \n\nSitting up straight, \"Wait, pause this,\" she snapped.\n\nReacting to her urgency I did what she said.\n\nLooking over her seat, \"I know I saw a speaker box in your backseat.\"\n\n\"Yeah, I use it for the beach, why?\" I asked.\n\n\"It's right here,\" Jason said reaching down to grab it and hand it to her.\n\n\"Perfect,\" she said clutching the box. \"Is it waterproof?\"\n\nI nodded, \"Yeah, like I said I use it at the beach. What do you need it for?\"\n\nIgnoring me she grabbed my phone and played with it syncing my Bluetooth. Then she reached over and hit the lights on my truck. Grinning she looked at us and winked and before we knew it, she'd opened the door and hopped out. She ran around to the front of the truck and stopped a small way out. She set the box down and started the music, I rolled down my window to ask what the hell she was doing when the song flooded my truck. \n\nLa la la la\n\nLa la la la\n\nLa la la la (yeah)\n\nLa la la la\n\nThe rain was soaking her but she ignored it. Closing her eyes, she threw her head back and kicked off her heels as she slowly matched the rhythm of the music. Raising her arms above her head she began to sway. \n\nI want you to love me,\n\nLike I'm a hot ride (uh yeah)\n\nKeep thinkin' of me (uh)\n\nDoin' what you like\n\nSo boy forget about the world\n\n'Cause it's gon' be me and you tonight (yeah)\n\nI wanna make your beg for it\n\nThen I'mma make you swallow your pride\n\nI was speechless as her body picked up speed, swaying sensuously with the music. Her head rolled forward then back with her black hair plastered to her body. Her dress clung to her as her legs danced, stepping back and forth. The wet material stuck to her, highlighting her curves, her garters became visible as the weight of wet cloth restricted the flowing garment. \n\nWant you to make me feel\n\nLike I'm the only girl in the world\n\nLike I'm the only one that you'll ever love\n\nLike I'm the only one who knows your heart\n\nOnly girl in the world\n\nLike I'm the only one that's in command\n\n'Cause I'm the only one who understands\n\nHow to make you feel like a man\n\nI glanced at Jason, he was as spellbound as I was. A quick glance around the park and I noticed a few people watching from under a nearby picnic shelter. I looked back at Eva, water had completely soaked her by this point but she never stopped or hesitated. Her pace matched the music as her body spun and danced, her hair whipping about her as she flung her head to each beat of the music. She dropped her hands from above and grabbed her tits while swaying with the beat. Even from a distance the light from my truck was able to highlight the hardness of her nipples. Suddenly she turned her back toward us and grabbed her dress and bunched the back together. Most of her ass and all of her garters were now displayed as she held the dress behind her and continued dancing.\n\nYeah\n\nWant you to make me feel\n\nLike I'm the only girl in the world\n\nLike I'm the only one that you'll ever love\n\nLike I'm the only one who knows your heart\n\nOnly one\n\nShe dropped her dress and slowly ran her hands up her sides, rolling her head she snapped her hair to the side and reached for the halter around her neck. Teasingly she slipped her fingers under the material and hooked her thumbs. Taking her time as her hips swayed back and forth, she ducked her head and slipped the top off.\n\nWant you to take it\n\nLike a thief in the night\n\nHold me like a pillow\n\nMake me feel right\n\nBaby I'll tell you all my secrets\n\nThat I'm keepin', you can come inside (yeah)\n\nAnd when you enter, you ain't leavin'\n\nBe my prisoner for the night, oh\n\nThe rain glowed from the head lights as it struck her body. Tiny diamonds highlighted in a single pool of darkness surrounding her. Keeping her back to us she spread her arms wide like a luau dancer as she continued to dance and sway. Looking around I saw more people than before, silent watchers listening to the music and admiring the free spirit untamed. \n\nWant you to make me feel\n\nLike I'm the only girl in the world\n\nLike I'm the only one that you'll ever love\n\nLike I'm the only one who knows your heart\n\nOnly girl in the world\n\nLike I'm the only one that's in command\n\n'Cause I'm the only one who understands\n\nLike I'm the only one who knows your heart\n\nOnly one\n\nWater beaded on her back highlighting her muscles as she brought her right hand behind her back again, this time she grabbed her dress and slid the material out holding it with her hand as it came to the end. Now her butt was totally displayed with her panties and garters. The sheer wet fabric of the panties hugged her ass leaving nothing to the imagination. \n\nTake me for a ride, ride\n\nOh baby, take me high, high\n\nLet me make you rise, rise\n\nOh make it last all night, night\n\nGlancing around I saw more people under the picnic shelter, I looked around and found that some had gathered on an opposite shelter too. Jason had pulled out his phone as he climbed into my front seat and was now video recording. I turned back as she slowly turned letting the fabric of her dress fall from her fingers. Her face was partially obscured by her clinging hair as her hands cupped her breasts hiding her nipples from view. Still she moved to the beat, teasing her body back and forth matching the rhythm of the song as if she choreographed it. Her hands moved back and forth on her chest, her arms blocking the view as she swept them teasingly across her body. \n\nTake me for a ride, ride\n\nOh baby, take me high, high\n\nLet me make you rise, rise\n\nMake it last all night\n\nUnexpectedly she crossed her arms and slowly drew them up her body as she gyrated her hips sensuously. She brought her arms straight above her head exposing her tits to the world with rivulets of water running down the hard-little mounds of her nipples. Closing her eyes, she thrust her chest out proudly, her arms reaching high, fingers spread, and head tilted back. \n\nWant you to make me feel\n\nLike I'm the only girl in the world\n\nLike I'm the only one that you'll ever love\n\nLike I'm the only one who knows your heart\n\nOnly girl in the world\n\nLike I'm the only one that's in command\n\n'Cause I'm the only one who understands\n\nHow to make you feel like a man\n\nHer body was taut with barely contained energy, face resplendent in the beauty of her movements, shadows and light played over her muscular body highlighting the sleek strength yet feminine curves. \n\nOnly girl in the world\n\nGirl in the world\n\nOnly girl in the world\n\nGirl in the world\n\nShe slowed as the music came to a stop, head down, chest heaving she froze letting the water wash over her body. Out of the night another car turned its lights on spearing her in its beams. She looked up and around seeing for the first time the crowd of onlookers on either side. Another set of headlights turned on yet she never moved but just slowly looked around the park. The next Rihanna song began to play, S&M. A ghost of a smile crossed her lips as she walked over to the speakers, reached down and turned up the volume so everyone heard, she stepped away and threw her head back.\n\n*****\n\n(Eva)\n\nNa na na, come on\n\nNa na na, come on\n\nNa na na, na na come on\n\nNa na na, come on, come on\n\nCome on, na na-na na come on\n\nNa na na, come on\n\nNa na na, na na, come on\n\nNa na na, come on, come on\n\nCome on, na na na na\n\nClosing my eyes, I slowly pivoted a full circle while hooking my thumbs into the dress, I continued to pivot while increasing my speed in a revolving whirl of precision and grace as I pushed the outfit down. I would have tried a different approach but I knew the rain would make the dress near impossible to get out of gracefully so I opted to use the movements of dance to shed the soaked clothing. As I pushed it over my hip's gravity took it away and it slid off my body to lie in the grass. I wanted this; I wanted this as badly as I wanted to breathe. The entirety of my being moving with perfect clarity.\n\nFeels so good being bad\n\nThere's no way I'm turning back\n\nNow the pain is for pleasure\n\n'Cause nothing can measure\n\nOpening my eyes, I noticed the crowd, more people had gathered under the picnic shelters and more lights had turned on from parked cars so that now half a dozen headlights highlighted me to anyone within sight. Blood pounded in my head and I felt dizzy from excitement as I swayed to the beat in my underwear and garters. My senses exploded as I felt cool rain mingling with the warm spring air playing on my skin causing goosebumps to cover my flesh. The scent of wet grass invaded my nostrils as my feet danced to the beat. The patter of rain mixed with the pulse of the music heightening the energy of the moment. \n\nLove is great, love is fine\n\nOut the box, out of line\n\nThe affliction of the feeling leaves me wanting more\n\n'Cause I may be bad but I'm perfectly good at it\n\nSex in the air, I don't care, I love the smell of it\n\nSticks and stones may break my bones,\n\nBut chains and whips excite me\n\nExhilarated I slowed to the music, swaying my body seductively, trying to seduce everyone around me. I saw men and women in the watching crowd, their faces suffused with awe, delight, and admiration. Almost everyone had phones out and I knew I was being videoed, I felt the intensity of the moment, the desire in the air as everyone watched me. \n\n'Cause I may be bad but I'm perfectly good at it\n\nSex in the air, I don't care, I love the smell of it\n\nSticks and stones may break my bones,\n\nBut chains and whips excite me\n\nMy feelings overwhelmed me, threatening to engulf me and leave me collapsed on the ground. I focused on Michael's truck, I couldn't see his face past the light but I knew he was watching. I was doing this for him, nothing else existed, just him, as I kept dancing. \n\nNa na na come on, come on, come on,\n\nI like it, like it, come on, come on, come on\n\nI like it, like it, come on, come on, come on\n\nI like it, like it come on, come on, come on\n\nI like it, like it \n\nLove is great, love is fine\n\nOut the box, out of line\n\nThe affliction of the feeling leaves me wanting more,\n\nA slow feeling of arousal crept into me, the heady rush of the watching crowd gave ground to the slow build of sexual need. Impulsively I hooked my fingers into my panties and tugged them to either side. The material was wet and provided no protection from view but still the thought of pulling them off was dangerous. \n\n'Cause I may be bad but I'm perfectly good at it\n\nSex in the air, I don't care, I love the smell of it\n\nSticks and stones may break my bones,\n\nBut chains and whips excite me\n\nIt was different from last night, that had been controlled, consented, and ultimately protected. This was raw, wild, out of control. I undid the clips to my garters as I slid my panties down my legs, bending I brought them to my ankles and stepped out of them, straightening I held them and pointed at Michael. I wanted everyone to know who this was for, whether they saw him or not. \n\nNa na na come on, come on, come on,\n\nI like it, like it, come on, come on, come on\n\nI like it, like it, come on, come on, come on\n\nI like it, like it come on, come on, come on\n\nI like it, like it\n\nS, S, S and M, M, M\n\nS, S, S and M, M, M\n\nHis headlights flickered off and on as I threw my panties at his truck. I wanted him to take the words of the song to heart, to know what he was doing to me. I was falling for him and I felt inspired! \n\nOh I love the feeling you bring to me\n\nOh, you turn me on\n\nIt's exactly what I've been yearning for\n\nGive it to me strong\n\nAnd meet me in my boudoir\n\nMake my body say ah, ah, ah,\n\nI like it, like it\n\nI slowed my dance down to be more seductive as I alternated moving my hips from side to side then front to back. I turned away from him delicately swinging my ass back and forth, my eyes looking down over my shoulder, teasing Michael with promises of later tonight. ",
        "'Cause I may be bad but I'm perfectly good at it\n\nSex in the air, I don't care, I love the smell of it\n\nSticks and stones may break my bones,\n\nBut chains and whips excite me\n\n'Cause I may be bad but I'm perfectly good at it\n\nSex in the air, I don't care, I love the smell of it\n\nSticks and stones may break my bones,\n\nBut chains and whips excite me\n\nOnce I again I increased my pace, feeling each thrum of the music, the beat pounding in my body. The harshness of the moment affecting me with its strength, I left all my inhibitions behind as I took all my passion and danced. Unrestrained I weaved, turned, threw my arms wide, my limbs quivered, my breath came in gasps, my muscles ached as I gave everything I had to the dance, the elements matched my intensity as lightning struck and thunder followed. I cried out with Mother Nature and felt on the edge of the universe. \n\nNa na na come on, come on, come on,\n\nI like it, like it, come on, come on, come on\n\nI like it, like it, come on, come on, come on\n\nI like it, like it come on, come on, come on\n\nI like it, like it\n\nAs if sensing my finish, the rain slowed, one last lightning strike and with a resounding boom I slowed as the song faded, my arms came down, my head dropped, energy spent I faced Michael. \n\nS, S, S and M, M, M\n\nS, S, S and M, M, M\n\nS, S, S and M, M, M\n\nS, S, S and M, M, M\n\nSmiling, I looked up, he was standing next to his truck now. Unexpectedly I heard clapping and looked around, at least fifty people stood nearby under shelter, car horns honked from around the park and lights flashed on and off. It lasted for minutes as people cheered and clapped, I straightened and turned, looking around and smiling at everyone. The rain had faded to a light sprinkle. Michael came forward and picked up the speaker turning it off, Jason grabbed my dress and panties. They stayed back as the crowd cheered and offered their admiration to me. I turned to Michael as he walked forward, he tossed the speaker to Jason. I started to ask him if he enjoyed the show when he took me in his arms and kissed me hard. His lips pressed against mine and his tongue slid into my mouth. Reawakened passion surged in me and I grabbed his head and pressed my body to him. The cheering and clapping resurged as I closed my eyes and savored the moment, the feel of his rough clothes pressed to my naked body was arousing on so many levels. I was a heartbeat from putting on an entirely different kind of show when he broke the kiss and took my hand pulling me back to the truck with him. Jason followed and we quickly loaded up and drove away while people waved. \n\n\"Oh my god that was such a rush,\" I screamed as we drove away.\n\nJason and Michael stayed quiet as I sat in the middle of the back seat while leaning forward between the front seats. They're both quiet as I use my dress to dry off a little, Michael keeps glancing in the mirror to watch me, Jason isn't nearly as subtle as he blatantly stares. Even though they've both seen me naked on numerous times I still feel a thrill run through my body. It's such a rush being naked in front of both of them. Words can't describe the feelings and emotions tearing through my body, I'm bursting with energy to the point that I swear I'm going to explode. \n\nBefore I know it, he's pulling the truck into his driveway and he barely stopped before I hop out. The rain has died to a light sprinkle and I wait for the boys to exit the truck. I walked in front of them to the door and looked back to find them both smiling and staring at my ass as they followed me. \n\nAs they come inside, I pulled Michael to me and kiss him. I wrapped my body around him and grind up and down, I'm all hands as I push him into a wall. \n\nI break away long enough to look at Jason, \"We're going to be a while, so unless you're going to hold the video camera...\"\n\nJason laughed and held up his hands in a hold on gesture, \"As entertaining as that would be, I'll leave you two alone, but I may take you up on that offer one day.\n\nI wiggled my eyebrows, \"Sounds fun.\" Breaking from Michael, I moved toward Jason and kiss him full on the mouth, he stands still for a moment until I grab his hands and placed them on my ass, then he returned the kiss and cupped my ass, squeezing it tight. \n\nWhen I break away, I tell him, \"Thanks again for everything, maybe when you hold the camera, I'll let you go down on me too.\"\n\nStunned, Jason only nodded and moved to the door letting himself out.\n\n\"That's going to have him on air for weeks,\" I said. \"Did you mean it?\"\n\nI shrugged, \"Would it bother you?\"\n\n\"Not under the right circumstances I guess, I wouldn't want more but watching you get oral could be fun.\"\n\n\"I agree, I might eventually be open to threesomes but I'd need to get a lot more comfortable, but I'd totally let him go down on me, especially if you tied me up again.\"\n\n\"You're going to be the death of me woman.\"\n\n\"You have no idea,\" I said as I moved away from him to the bedroom. \"Now take me to bed or lose me forever.\"\n\n*****\n\nThe next few weeks flew by as we integrated our lives. I practically lived at his house and while there I spent most my time naked or a best wearing a pair of panties. Jason and Remy stopped by often and had both seen me naked so many times that it had to be getting boring. They assured me, it was not. Still it was a little unexpected when I came by his house after work and a group from his motorcycle club was there.\n\nStanding at the edge of living room my heart raced as I looked around at the circle of Marines, there were four of them plus Michael standing in a semi-circle around me with small smiles on their faces. I sensed I was in trouble... lots of trouble. Swallowing I looked at Michael, his face held no hint at all. We'd been playing lots of games up to this point but I had a feeling, things were about to escalate. \n\nLicking my lips, I tried to act casual, \"Uhmmm, what's up guys? What's going on?\" \n\nWithout saying a word, they moved toward me, I felt the tension in the air but despite the slightly sinister feel and the look on their faces I felt no fear, just an anticipation. A small surge of adrenaline shot through me and my nipples went hard under my white office blouse. The front had a sharp V making it obvious I wasn't wearing a bra and I could feel my nipples pressing against the soft fabric. It turned me on, I knew Michael and trusted his friends, something crazy was about to happen I just didn't know what.\n\nI involuntarily stepped back as they moved forward, I was wearing a gray pencil skirt, stockings, and black heels so I had to keep my steps small. \n\n\"Uhmmmm guys?\n\nThey came forward slowly, no words were spoken and they never looked at anything but me. Before I realized what was happening, I let out a small whimper. Suddenly I noticed something, these were all the single friends. A few of them were dating girls but as far as I knew none had wives. \n\nThe last steps were taken quickly as they rushed me. I barely had time to register their movement before they grabbed me and lifted me into the air. Each one grabbed a separate limb and held me up as if I was light as a feather. I fought a little but it was more for show than true resistance. \n\n\"What the hell?\" I cried. \n\nNobody said a word but they casually rolled me over without letting me free. They took me to the ground and their combined weights easily held me down. I put a little more strength in my resistance to test my limits but now they had leverage against me too. Each one had a grip like a vice and with their weight balanced over the top I couldn't move at all. A familiar flush hit me and my excitement quickly grew. \n\nI'd kept my hair free at work today and it fell around my face blinding me. I tried to speak, \"You can't just...\" but Michael had been waiting for the moment and I only got a few words out before he slipped my ballgag in my mouth. I shook my head to object but in seconds it was firmly strapped between my teeth. He moved down to my legs and straddled my feet while holding my calves. The rest positioned themselves around me as I thrashed my head around to move the hair from my face and see. \n\nI had one on each arm, Michael straddling my feet and holding my calves and one on each side at my waist with a hand on my waist and on my thigh. I faced forward to get my bearings and tried to figure out what was going on. Despite all the showing off I'd done recently I was still unsure of what was happening so I was surprised when I felt my skirt being unzipped. I wiggled my ass to see what they'd do and both guys on my sides slid their hands up to my ass and tightened their grip. Again, a surge of excitement ran through me as two different men each had a hand on my butt. Quickly my zipper was pulled lower till I felt cool air over my ass, the hands moved from my zipper to the sides and pulled the cloth down. There was no hesitation as my skirt was pulled down to my feet, where Michael slipped it off. I whimpered but they continued without pause. The two on either side hooked their fingers into my black g-string panties and pulled them down to my ankles. I heard a \"damn\" and they all paused, I blushed as I realized they were admiring my ass. After a minute they all moved to turn me over, escape was impossible as they gently turned me and switched their grips to opposite sides. Now I was face up wearing only my blouse and heels. I had a better view as the hair fell out of my face and noticed Michael smiling at me. I never looked away from him as my blouse was unbuttoned and slipped off my body. Now I was naked and all five men were still holding me down. I glanced around at each face but not a single one except Michael met my eyes, they were all looking at my body. I reflexively shifted and thrust my hips and chest out making them all go bug-eyed. I'd have laughed except for the ballgag, they were all transfixed by my nakedness and I loved it. I'd been naked in an art gallery, naked in a park in public and naked in front of one of his friends but this was even more exciting. The public places had more people but they were all strangers, nobody had known me, these were all close friends. These men knew me and considered me a friend, every time I saw them from now on, I'd wonder if they were imagining me naked. Michael shifted my legs a few feet apart to give everyone a better look at my racing stripe. I'd shaved for him a couple of weeks ago but had let it grow back, thankfully I'd just trimmed it to a nice stripe today. Jason was one of the men on my side and he traced a finger over my pussy lips causing my hands to tighten to fists and to draw in my breath, the one on the other side brushed a finger across a nipple and I had to fight to keep from moaning. I wondered how much farther they'd go but Michael cleared his throat and nodded and they lifted me gently to standing position. My hands were pulled behind me and handcuffs quickly ratcheted them together. \n\n\"Now we can either walk to the garage or carry you,\" Michael said.\n\nI blinked and he nodded then they moved me through the house to the garage. They opened the door and led me inside taking me to his Hayabusa that I wanted and told me to hop on. Using their arms for support I straddled the bike. The two that were supporting my arms held me while the two free ones tied my ankles to the foot pegs. Michael watched as they worked, after my feet were tied the other two went to work too. Five minutes later they stepped back. My hands had been tied to the grab bar behind me, my ankles had been tied to the foot pegs, and my knees were strapped to the side of the bike. Michael nodded as he looked me over and all five men moved around me watching me intently. I tested the restraints and couldn't do much more than squirm, the cuffs behind me forced me to keep my back straight in a sitting position with my chest thrust out or they'd put a strain on me. My legs were thoroughly strapped to the sides and I glanced down to see the small stripe above my pussy was visible to everyone but my lips were mostly pressed to the motorcycle. \n\n\"It's pretty simple really, you've wanted this bike and I'm going to give it to you, but first we're going to have a little fun. Let's see if we can make you cum.\"\n\nMy eyes widened at his words, he was going to give me the bike? He reached down and started the motor, a jolt shot through me. They'd tied me so that my pussy was pressed to the gas tank. The gentle vibrations of the idling motor sent a shock through my already aroused state. I tried to wiggle away but they'd done a good job tying me and my pussy was sent into overdrive. Michael revved the engine and I spasmed. I looked around at the men watching me and the arousal on their faces, I knew my face reflected the same emotion. One of them went to the garage door and turned it on making it rise. I squealed realizing I'd be open to the street now and anybody passing by could see me. \n\nMichael smiled, \"Relax, everybody's cars are in the driveway, it'd be really tough to see you, but we have to open the door because of the fumes.\n\nDespite my initial squeal my exhibitionist side was getting turned on. I really didn't want the neighbors to see this but the thought that they might was making me dizzy with lust. Michael revved the engine again and I unconsciously pressed forward. Jesus fucking Christ I thought, I'm humping my bike! I was completely naked, tied, gagged and getting off in front of five different men. Everything about this was humiliating, the ballgag in my mouth, my nipples being rock hard, the fact that I was rubbing against the motorcycle, I should be dying of embarrassment yet I was as turned on as I'd ever been. I looked around again and thought fuck it, let's do this. Closing my eyes, I pressed harder against the tank, Michael gave little revs that sent courses through my body every time. I started moaning through the gag, tossing my head back and forth as I pressed my pussy into the motorcycle. I let the moment take me, Michael revved harder and longer and my pace quickened. A finger stroked my nipple and I opened my eyes to see Jason smiling at me. That sent me over the edge and electricity shot through me in a blinding moment, my body locked and my muscles strained against my bonds. I held that pose for more than a minute until the glow passed and only little aftershocks surged through me. My head lolled forward and Jason and Michael held me upright. Everybody moved forward and began untying me, the gag was taken out and I worked my jaw. My body went limp and Michael and Jason lifted me off the bike, Jason took me in his arms and carried me back into the living room and laid me on the couch. One of the others handed me a bottle of water and I took a sip, my body was in shock, I'd rarely cum that strong in my life, they all stepped back and watched me as I tried to recover. Jason signaled everyone away except Michael but they both stayed to watch over me. After a few more minutes I felt stronger and looked at them. \n\n\"That was intense,\" I whispered.\n\n\"Tell me about it,\" Jason replied.\n\n\"Not sure I'll be able to look those guys in the eyes again.\"\n\nJason snorted, \"Don't worry about them, you looked like a goddess, that was the hottest thing I've ever seen.\"\n\nI smiled and stretched out, \"Did you mean what you said about the bike?\n\nMichael smiled and grabbed a small folder off the coffee table I hadn't noticed. He opened it and pulled out a pink slip and handed it to me. It was for the Hayabusa and it was in my name, he'd already been to the state office and transferred it to me. I caught my breath as I looked up at him, tears forming in my eyes, my own bike, my first motorcycle and it was really mine. \n\nI looked at him, \"But I haven't given you any money.\"\n\n\"I know, this is a gift, this past time with you has been the best of my life, I want you to have the bike.\"\n\n\"I love you.\" \n\nHe looked stunned and for a second, I was scared, it was the first time I'd uttered those words to him and I wasn't sure how he'd take it. \n\nHis face broke into a huge smile, \"I love you too.\" \n\nRelief poured over me as we smiled at each other. \n\n\"That does bring me to a question though,\" he said. \n\nI frowned at his pause, he looked up and down, almost like a little kid that had done something bad. \n\nFinally, he cleared his throat and looked me in the eye, \"Do you want to move in with me?\"\n\n\"I already told my landlord this was my last month. I was moving in whether you wanted it or not.\"\n\nJason exploded into laughter, \"Dude, she so owns your ass.\"\n\nMichael looked back and forth between us as I joined Jason's laughter, the dumbfounded look on his face made us laugh even harder. When we finally stopped, I felt good enough to sit up.\n\n\"Now I'm going to go put some clothes on and check out my new bike.\"\n\n\"Nope,\" Michael said. \"You may own me, but I own you right back, you're staying like this the rest of the night.\"\n\n\"Here here,\" Jason said.\n\nI paused to digest what he'd commanded, shrugging I stood up, \"Can I ditch the sandals?\"\n\nHe nodded so I looked at Jason, we all stared at each other and I saw they weren't getting the hint. \n\nI rolled my eyes, \"Take them off please?\" I phrased it in a question but my tone was commanding.\n\nJason dropped to his knees and began to unbuckle one.\n\n\"What are you waiting for?\" I asked Michael.\n\nHe dropped too and undid the other. \n\n\"I may be naked but I'm still the queen.\"\n\nThey both looked up and nodded, finished they stood up and smiled at me. \n\n\"Fair enough, you're right, you're the queen, but your ass is also mine.\"\n\nMichael grabbed me toward him and kissed me. I melted into his body as he pressed himself to me. I closed my eyes to savor the moment. I was in love, everything about him turned me on, the hard muscle, the rough texture of his five o'clock shadow, I could taste whiskey and coke on his breath and lips. It was pleasant, combined with the force of his body and feel of his lips I kissed him back with fervor. \n\nWe broke panting, \"Show me you're mine.\"\n\nI looked at Jason and at the door, I could hear the rest of his friends in the kitchen talking and laughing. I was an exhibitionist but even I had limits, what I was about to do I would never do in front of that many men, but Jason watching was alright, it showed him I was Michael's and would show the depth of love I had for him. I slipped to my knees and undid his pants; his cock sprang from his shorts steel hard the second I pulled them down. I looked at him, then Jason, then I slowly took him into my mouth while his best friend watched. I went back and forth, bobbing my head up and down, I pulled back and made cat like licks up and down the length of his shaft. This wasn't a blowjob it was an act of submission in front of his friend. I let the shaft caress my cheek and moved the tip around my lips, I took him back in my mouth and deep throated him. When I pulled back, I looked up into his eyes as the length of him left my mouth. I tugged his shorts up, buttoned his pants, stood up and looked at Jason. \n\n\"How was that? Did that show enough ownership?\"\n\nJason nodded, and Michael let out a sigh.\n\n\"Hell yes,\" Michael said.\n\nI walked past them both and into the kitchen, the talking stopped as I stood naked in front of them again. I smirked at each of them then walked to the refrigerator and took out three Blue Moon beers making sure to bend at the waist and give them an excellent view of my ass. I turned and handed one to Michael and Jason as they walked in, then popped the cap on mine and took a drink. The boys hooted their approval and another flush hit my cheeks, I kept chugging and downed the whole beer, after I finished, I got another one.\n\n\"So...\" I said, looking around, \"Was that enough of a show?\"\n\n*****\n\n(Michael)\n\nI walked into the house on a Friday afternoon looking forward to spending time with Eva. ",
        "\"In here babe,\" I heard her cry out, I walked toward the sound of her voice and entered the master bedroom. Eva was standing in front of our bed wearing a black garter and thigh high stockings, her hair free and wild. On our bed tied to the dark wood rails and lying on our dark purple comforter was a beautiful red head, she had smooth lightly colored skin, a tight body with a bald pussy. Her tits were C sized and her light pink nipples were rigid from excitement. Her shoulder length hair lay free around her head like a wreath and when I looked into her deep green eyes, she looked familiar.\n\n\"Hey babe, this is Alexa, you remember her from the art gallery party, right?\"\n\nFamiliarity rushed through me as I placed her, she was tied spread eagle with her limbs stretched tight to each corner. Eva slid onto the bed next to her and ran a finger up her side sending a shiver through her body. \n\n\"She wanted to meet you, I told her if she wanted to meet you it had to be like this. What do you think?\"\n\nShe continued to move her fingers up and down her body and making Alexa groan and squirm.\n\n\"Say hello Alexa.\"\n\n\"Hello Michael.\"\n\nI realized my mouth had been hanging open and closed it, \"Hello Alexa.\"\n\nLooking me in the eyes Eva brought her hand down and traced a finger over her pussy lips, lightly stroking her finger back and forth.\n\n\"Take off your clothes babe,\" Eva said.\n\n*****\n\nThe end? \n\nNote: Comments always appreciated."
    ],
    "authorname": "storm_usmc",
    "tags": [
        "exhibitionist",
        "bondage",
        "panties",
        "tied",
        "public",
        "friends",
        "dancing",
        "motorcycle",
        "garter",
        "stockings"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/the-bet-ch-03-end-game"
}
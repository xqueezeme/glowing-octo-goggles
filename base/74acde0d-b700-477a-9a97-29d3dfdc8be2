{
    "title": "Sosoni Ch. 03",
    "pages": [
        "A few hours later, my home came into view. I slowed us down and drove around it to give Sosoni a view, and then I pulled up to the driveway and shut down the vehicle.\n\nSosoni was hesitant and awestricken at the sight of the house. I held my hand out to her, telling her it was my home.\n\nI pointed to the woods. \"Sosoni home,\" I said, and then I pointed at the house and said, \"My home.\"\n\nShe took my hand. I helped her off the ATV and carried her around to the front door. I unlocked it and took her inside. She gazed around in the entryway. I hauled her into the kitchen and sat her on a stool. It took a moment to find her balance, then she gazed at the utter strangeness of the kitchen.\n\nI got two glasses, filled them with water from the sink and gave one to her. \n\nI said, \"Water.\" Then, I drank mine and she followed.\n\nAfterward, I took her through my bedroom and into the master bath. I turned on the shower. Sosoni limped over and reached inside to feel the water. I put my hand in, too. As it cascaded over our skin, it began to get warm. Sosoni quickly drew her hand away. I laughed and guided her hand back under the stream.\n\n\"Water,\" I said. \"Just water.\"\n\nShe let the warm water run over her hand and arm in joyful awe.\n\nI undressed, and she did, too.\n\nIt was a large shower stall in the corner of the bathroom, five feet by five feet square, all tiled and with a 44-inch wall along one side. No door, it only had a low threshold.\n\nI took her hand, and walking backward, led her inside. She watched the stream soak my head and shoulders. I let go of her and turned, covering myself in the hot water. Then, I stepped out.\n\nShe walked toward the stream, first touching it again with her hand, and then she plunged in. A joyful noise burst from her lips as her hair soaked through and clung to her body.\n\nI stepped back and admired her. \n\nHer long neck upheld a small, distinct head. The word that occurred to me was regal. She was like a princess in posture, dignified and haughty. She held her head high. Her cheekbones were wider; her nose, somewhat flat. The jawline was a shallow curve, not at all square, and her little chin just dipped beneath it. Her dark brown eyes were wide set and with thin, black eyebrows. \n\nHer side profile was distinctly Native American. Her face seemed to stretch forward from her ears. From her chin to her nose, the profile sloped slightly out. From her nose to her hairline, it slanted sharply back. It made her seem alert and eager. Her lips, though full and voluptuous, naturally turned down. When she looked right at me, those lips didn't make her seem displeased, but she definitely looked as if waiting to be impressed.\n\nHer breasts were like softballs\u2014big, not obnoxious. Her coffee colored areolae were slightly elliptical, like two wide-set eyes on her chest. When Sosoni pivoted, her breasts didn't move and didn't shake. They were like fat erections jutting from her torso. Scanning down her waist, it occurred to me that, in fact, her breasts were a little obnoxious. Sosoni was so slender that the two globes seemed disproportionately large.\n\nThe core of her body stunned me at it sleek robustness. Her honey oak skin was absolutely smooth. And, it was taut, as if it barely contained something burgeoning underneath. Her tummy and waist were impossibly small. The long, rippling muscles of her legs only appeared when she moved, but when they showed, I knew this was a woman of great agility and speed. They had the quality of a spry young horse. \n\nHer ass was two small hemispheres of solid muscle, compacted together and covered by that velvet brown skin. Sosoni's hips were narrow, with only the faintest hint of a curve, but her butt definitely had curves. From the side, it projected out at the top of her thighs in a half moon. From behind, it looked bulbous, tightly packed with iron muscle and then smoothed over with soft, fatty flesh. \n\nShe turned to look at me, and I shook my head in amazement at her face and figure. I didn't think I rated such nobility of face, youthful energy, and abundance of allure.\n\nI walked over, my hard cock swaying. She made way for me as I walked under the water.\n\nI took the shampoo and washed my hair. After I rinsed, I let her smell the bottle. The potency of the aroma seemed to surprise her.\n\nI turned her front into the stream of water and got behind her. My dick pressed into her ass, and I poured shampoo into my hands and took her black locks, all three feet of them, and washed lathered them. I worked up to her head and massaged her scalp. The sopping ends of her hair dragged across and dabbed my cock. When I finished shampooing, I spun her around, and held her head, rinsing the suds free.\n\nShe frown-smiled at me, and never did she look more stunningly attractive.\n\nAs she let the hot water slide over her body, I covered mine in suds with a soapy washcloth. She watched me. After I rinsed clean, I replaced her under the stream, and I washed every part of her body. I spent a good deal of extra time cupping and squeezing her breasts through the sopping fabric of the washcloth. I was certain that her pussy and ass sparkled like jewels from my efforts down there. \n\nI shut off the shower and grabbed towels for us. Dabbing gently upon her wounds, I dried Sosoni off, and then myself.\n\nI brushed her hair, and then I treated and dressed her wounds. Her shoulder and shin, despite her long walk, looked good\u2014better, even. Her ankle, however, had swollen up again. I wrapped it tightly.\n\nI carried her to the bed and set her down on the edge. She felt the sheets and the softness of the mattress, and I gazed on her naked body. My cock remained rigid. I had been so hard for so long, it ached.\n\nI wanted to fuck her.\n\n***\n\nToward the end of my senior year of high school, I got cocky and invited the hottest sophomore in the school to go to the prom with me. Our school was a bit small, so we had a junior-senior prom. Sophomores weren't allowed unless invited. \n\nShe was young and beautiful, and me being a senior and having invited her to prom, she looked at me like I was a superhero. \n\nAfter I picked her up and did pictures at her parents' house, we went back to mine, so that my parents could get a few snaps of us together.\n\nMy Dad got a good look at my date and how she looked at me, and after pictures, Dad pulled me aside for a private conversation.\n\n\"Listen, son. Don't ever think that you're worthy of some woman's virginity. You're not. No man ever is. Never can be. It is too precious a gift to be given. And you mustn't ever receive such a gift\u2014ever\u2014unless you have already decided\u2014beforehand, mind you\u2014that you are going to marry her. Understand?\" \n\nI nodded. He tousled my hair and shoved me out the door.\n\n***\n\nI never forgot what he said. Despite the superheated intensity of my desire to fuck Sosoni, I was not going to, not until I knew for sure. \n\nWe were side by side on the edge of the bed when I drew her off and between my legs. She sat on her knees and stared up at me with those eager brown eyes. Her breasts rose and fell, and her hard nipples pointed at my knees.\n\nI pulled her up and between my legs, feeling the smooth firmness of her breasts on my thighs. I brought her closer, and my cock rode inside the gap between her tits. I wrapped them around the shaft, and the merest touch of her skin on my penis sent a wave of aching pleasure through me. I drew her hands up, shaped them into cups, and put Sosoni's hands under her breasts, squeezing my cock between them. Her cleavage was like a warm hug around the shaft. I guided her hands up and down a few times, and then let go.\n\nSosoni used her body, rocking gently up and down to slide my cock between her breasts. She watched me, and I was three-quarters there from the delayed gratification. Her breasts were shockingly firm, almost as if they could have held my cock without the help of her hands. I groaned and said her name. Sosoni smiled, and then she looked down at her work, and I watched the tip of my dick come closer and closer to her lips. Sosoni opened her mouth, fractions of an inch from the flaring, purple tip, and I gasped.\n\nFeeling one of her nipples on my scrotum, I watched the tip of my cock disappear in her mouth, and I groaned. Fuck, it felt good.\n\nBut, it wasn't better than when she looked into my eyes while my cock rode up between those tits. I touched her cheek and lifted her head. \n\nHer mouth was slightly open and her head tilted up at mine. In her eyes were a mixture of that energetic zeal she almost always had and a kind of curious anticipation. She almost looked like she was begging me for something. She was fucking beautiful.\n\nI glanced down. My cock half-hidden between those fat oval breasts, the surge of my orgasm filled me.\n\nShe rose and fell, rose and fell, squeezing my cock between her breasts. When we looked at each other again, I was cumming, but neither of us broke eye contact. I said her name and only peripherally caught the view of my cum pouring out of the tip and spilling down one of her breasts and over her nipple. Another surge sent a line of semen vertically up her face, beginning at her chin and stretching across her lips to the tip of her nose. She didn't flinch.\n\nThe rest must have just gushed out the end. I was watching Sosoni smile, and I caught my breath and laughed. Only then did she turn away from my eyes and look down.\n\nShe licked her lips to gather up the cum on her face. What she couldn't reach with her tongue, she scooped up with a finger\u2014from her nose and chin\u2014and sucked the finger clean. Then, Sosoni sucked the end of my penis, drawing out the few final drops. She took her cum covered breast and drew it to her lips, her tongue mopped up some of it before her lips closed over the nipple, and she sucked the white fluid from it. \n\nI drew her up to me and pulled her onto the bed. We fell asleep.\n\nI awoke in the dark. The clock read 11:45 pm. I reached over and felt Sosoni beside me. She had to have been exhausted from her pursuit of me on the trail. I got up quietly and let her sleep.\n\nI walked around my house in the dark, and I saw it with new eyes. It was a dangerous place for Sosoni. Every electrical device, every heating or cutting device in the kitchen, my guns\u2014although those were locked up\u2014there was a ton to protect her from and teach her about.\n\nBut, how was I going to do that without some common language?\n\nAs far as she knew, we were the only two people on earth. When do I show her that we're not alone? When do I take her to town?\n\nPassing by the bathroom, I realized she would need...what should I call it? Potty training?\n\nIt dawned on me then that, while she had the body of a woman, her experience in the civilized world was more like an infant's. I needed to come up with a plan.\n\nWhat I didn't know then was that several others were also coming up with a plan.\n\n***\n\nIn the days that followed, Sosoni and I were almost always together. We slept, ate, explored the house, explored my land, used the bathroom, and bathed together. \n\nMy plan was fairly straightforward. I figured she needed to learn to be safe in and around the house, to communicate, to be clothed and take care of her needs, and to see the world as it is.\n\nIn terms of language, since I was no teacher, I decided to let it come as it may. I made a conscious effort, however, to name everything I used\u2014in the kitchen, in the bathroom, everywhere.\n\nAs to other matters, I tackled them when it made sense. Through it all, we did not deprive each other of our bodies. We took each other when we felt the urge.\n\nSometimes it was me. \n\nI had just demonstrated using the toilet. Sosoni sat down on the seat with her skirt around her ankles, and we waited. I wasn't expecting success, but suddenly I heard her start spraying into the bowl. I shouted for joy, and Sosoni laughed. \n\nI stood her up and showed her how to wipe her pussy with the tissue and flush. She took over, and I watched. Fuck, my eyes were glued to her ass. \n\nShe finished, and when she bent over to flush, I took her hips and ground into her from behind until I got hard. Sosoni cooed encouragingly. She wanted me inside her that way.\n\nI pulled a nearby drawer open, fetched some lotion and coated her anus and my cock.\n\nI eased my cock inside and just took her, right there in the bathroom. She reached back and clutched my ass with one hand, drawing me to her. She howled; I grunted. Not long after, I filled her ass with semen.\n\n*\n\nAnother time, we were on the living room couch. I had taken off her shirt to look over her shoulder bandage\u2014she was wearing one of my old tee-shirts.\n\nIt looked fine, and so did her breasts. I knelt in between her legs in front of the couch, and I couldn't stop myself from taking her tits in my hands and feeling their shocking rigidity.\n\nSosoni just watched me. When I looked down, I saw that her skirt had ridden up. A madness seized me. I took her legs and pulled her down so that her back was flat on the bottom cushions of the couch. I raised her ass up and brought her pussy to my face as if I were cupping water with both hands.\n\nI licked on her virgin pussy until she came, and she tasted so fucking good that I carried her to the bedroom and spent the next hour eating her out. I lost count of her orgasms. The only reason I stopped was that my tongue was so tired.\n\nWhen I finally rose up, Sosoni was utterly exhausted. She didn't come out of the bed for hours.\n\n**\n\nSometimes it was her.\n\nOne morning, I woke up before Sosoni and decided to take a shower. When I finished, I wrapped a towel around my waist and walked back into the bedroom. Sosoni was laying on her side, facing the bathroom door, awake.\n\nI walked over to her. Leaning down, I kissed her cheek. She reached inside the towel and grabbed my cock. She put her hand under her head and pulled me closer. My towel slipped off, and Sosoni took my entire limp penis into her mouth. She sucked me until I was hard. \n\nShe let my cock out from her lips and grabbed it with her free hand. Then, she scrutinized it. She looked at it from every angle. She pulled it down and released it, watching it spring back. She did the same to the sides. She ran her fingers gently over the veins, and she caressed the rim around the head of it. She even squeezed it so as to open the hole and peered inside. Apparently seeing nothing, she sucked on the tip.\n\nThen, she got interested in my balls. After squeezing, caressing, and fondling for a time, Sosoni craned her neck underneath me and began to lick them. My shaft rested along her cheek. She used her free hand to draw each testicle into her mouth and suck on it.\n\nWhen her interest in my balls waned, she looked up at me, grinned, and sucked me as deeply as she could until I came. I watched the suction compress her cheeks into her teeth as she drew every drop out of me and swallowed it. \n\n*\n\nThere was another time when I was working out in the exercise room. Sosoni watched me from the doorway, looking confused and curious. \n\nI had worked up a huge sweat on the treadmill. I turned off the machine and stripped off my shirt. Then, I laid down on a mat and began doing push-ups. When I finished those, I rolled over.\n\nOne moment, I was doing crunches, the next, Sosoni was lowering her pussy onto my face. She had stepped over to me, turned around and squatted.\n\nWhen I saw her pussy, I let it come. I pushed my tongue out, and Sosoni used it. She ground into my tongue from the squatting position for a minute or so, and then she got on her knees, and drug her pussy back and forth across my tongue, breathing deeply and making her strange sexual pleasure sounds\u2014something like a feminine growl.\n\nWhen she finished herself, my face was awash in her fluids. She climbed off me and went back to the doorway. She smiled, watching me resume my crunches.\n\n*\n\nOn another occasion, I had just finished showing her the refrigerator, and she was exploring it by herself. She pulled out jars and jugs, opened and smelled them. She tasted some. She didn't like mustard. Then, she opened the freezer. \n\nI looked out the window, noticing the approach of rain. When I heard the freezer door close, I turned back and saw Sosoni holding a wrapped popsicle.\n\nI smiled, went over to her, and opened it. It was cherry. She took the stick, and I showed her\u2014I stuck out my tongue.\n\nShe got the idea. She licked it. Then, again. She grinned and grunted a little laugh.\n\nSoon, she was sucking it. Watching her, I started to get hard.\n\nWhen she finished the popsicle, she saw my erection. She threw the stick on the counter and attacked my cock. It took her maybe five seconds before her lips were on it.\n\nShe made all kinds of small noises\u2014little grunts and squeaks. And it didn't feel like she was sucking to give me pleasure. It felt like she just wanted to draw semen up the shaft so that she could eat it.\n\nShe did. I held her head deep on the shaft and felt cum rise up and spill from the tip onto her tongue. No sooner than it filled her mouth, she swallowed it with an audible, sloshing gulp.\n\n**\n\nOther times, it was both of us.\n\nI decided to order Sosoni some clothes from Amazon, but having no idea about women's sizes, I spent some time looking for an online women's size converter based on measurements. Having found one, I grabbed an old flexible tape measure and called over Sosoni.\n\nWithout an inkling of guilt, I had her undress completely. Then, I began taking her measurements. I completed her sleeve length with no difficulty, but when I measured her bust, I lost control.\n\nI liked seeing the tape press against her flesh. I made sure it crossed exactly over both nipples, and I drew it taut, watching the soft flesh give way to the pressure and bubble at the edges. I let the tape fall and began to suck upon her nipples.\n\nSosoni reached down into my shorts and massaged my penis; I slid my hand between her thighs and rubbed. \n\nI let her nipple fall from my lips and rose up. Her hand stroked me. My fingers drew circles on her clitoris.\n\nWhen we made eye contact, she dragged me to the floor. We landed askew one another with her on top. I turned and put my face between her legs. She scooted over me and, as if we meant to do it the entire time, we formed a perfect oral sex union.\n\nShe began her climax before me, but her airy moans quickly swept me to my conclusion. She rolled off me and we both gasped for breath.\n\n*\n\nOne afternoon, we came up the stairs after a short walk through the basement. Sosoni was a few feet in front of me as we ascended.\n\nI looked up and could see right up her new stretchy black skirt. I called her name, and she stopped. \n\nI came up behind her, snaked my head under her skirt and pushed my face against her ass crack. Reaching under her skirt, I pulled her new panties down and spread her cheeks apart. Smelling her body, a sudden urge seized me. I licked her asshole while rubbing her clitoris.\n\nAfter I was sated, I stood up and, one step below her, she stared down at me, drawing deep breaths. Her hand snaked around, and I watched her push her middle finger into her anus. Sliding it back and forth a few times, she added her index finger. When they both slid in, her eyes met mine and she bent over in front of me, putting her hands on the steps.\n\nI slathered my erection in saliva and fucked her ass.\n\nFor whatever reason, she felt even tighter than usual on the stairs. I stopped.\n\nSosoni took over. She let me out to the tip, and then she\u2014extremely gradually\u2014took me back in. Each repetition took about ten seconds\u2014five seconds in and five out. It was the slowest, sexiest fuck I'd ever experienced, and I just watched the whole thing, never moving.\n\nI watched her asshole lazily glide up and down my shaft. Incredibly tight, Sosoni vocalized her suffering ecstasy in several drawn-out cries. It was sexy as hell, and I came. My cock squeezed, and I felt each contraction in my guts. I held her hips, spreading her cheeks apart, and watched my cock pulse in her little hole. ",
        "When all was spent, I drew the shaft out and a great gush of cum slipped out and down Sosoni's inner thigh.\n\nNeedless to say, Sosoni did not like spilled semen. She quickly moved to collect and lap up all that her ass couldn't keep contained.\n\n***\n\nThe shoulder and ankle were healing well. \n\nWe made it through a menstrual cycle; I bought her some tampons, showed her some videos for how they're used.\n\nTelevision and the Internet showed her there were other people the world, and I took her on a drive into town so that she could see civilization for herself. I was surprised to find her unruffled by it all.\n\nYet, I hesitated to show her these things because I knew they would evaporate the illusion of my heroic greatness in her eyes. She would learn I was just some guy and not a bear-killing, machine-riding god of some kind.\n\nBut, that didn't happen. If anything, introducing her to civilization made her more affectionate and eager to please me.\n\nStill, more and more of Sosoni's personality began to emerge in those days. She was devoted but ready to learn skills that would make herself more personally independent\u2014hygiene, food preparation, etc. She was inquisitive, always looking to understand how something worked. Often with technology, I had to admit I had no idea, and it surprised her, it seemed, that I would so casually use things that I didn't understand. \n\nShe was equal parts energetic and lazy, able to spend entire days with me working outside as easily as she passed days with me never leaving the bedroom except to bring in food. \n\nShe loved taking showers. She loved brushing her hair.\n\nShe could be demanding and insistent, but always in ways that kept me close to her.\n\nAt night, we sometimes fell asleep apart from one another, but always woke up intermingled. \n\nIn sum, she loved being my partner and helper, and she hated feeling useless.\n\n***\n\nThere was an idea buried inside my mind needing to get aired, but it terrified me.\n\nAs I grew more convinced that I wanted to be with Sosoni for good, the idea rattled all the harder in my head.\n\nIt was the issue of choice.\n\nI had gotten one. I lived a life amongst people. I met and dated many different girls and women as I grew up. I chose one\u2014chose poorly because she divorced me\u2014but, I chose.\n\nNow, as I considered Sosoni as a potential mate-for-life\u2014using that terminology in my own mind because I had no idea how I could marry a person who didn't really exist on paper\u2014I realized that Sosoni had not gotten to choose.\n\nWhat if some other fella had found her out there? Would she now be that guy's devoted partner and helper? Would she be giving her body to him?\n\nWhat if I called up some professor in Boise and told him about Sosoni? What if a team of anthropologists took her off to a lab to study and educate her? Would she come back to me?\n\nBefore meeting Sosoni, one of the images that occasionally haunted me on my long hikes was the thought that, all alone in the wilderness, I wasn't going to be meeting some new woman. Moving from the city might have helped my heart\u2014my life, really\u2014last a bit longer, but at what cost? Did I really want a longer, lonelier life?\n\nAnd here, this strange, beautiful woman appears as if in answer to these fears. Do I risk losing her?\n\nOr, flipping that thought over, do I risk earning her lifelong resentment for keeping her like some caged eagle?\n\nDo I dare, in other words, set her free?\n\nThe answer was easy.\n\nI'm an American. Freedom is my fucking job.\n\n***\n\nI began the process of setting Sosoni free to make her own choices by formally introducing her to Charles, my doctor and friend.\n\nI invited him up to the house one weekend. Sosoni was a bit wary of him until she saw the two of us laughing together. Then, she kind of latched onto him, as if an understanding of friendship were hard-wired into human consciousness.\n\nThe next time, I invited Charles to bring his wife. \n\nThere was a tricky moment. \n\nCharles's wife, Deborah, is fairly large-breasted. Sosoni immediately recognized her as a woman. When this happened in my front entryway, Sosoni sprang toward me and stood beside and in front of me. She reached back with her hand and grabbed the crotch of my pants, and with her other hand, she reached out as if warding Deborah away from me. \"This cock is mine,\" she seemed to declare.\n\nI eased her out of that situation, and when she saw that Charles and Deborah were their own couple, Sosoni finally relaxed.\n\nWe went to their home the following weekend where Charles showed her some magic tricks. Sosoni loved it, and she insisted on being shown how the tricks worked. Charles obliged, later admitting to me that, even though magicians never reveal their tricks, Sosoni's face was too hard to resist.\n\nDeborah, a former school teacher, had an inspiration. She and Charles have two grandchildren who spend weekends with them on occasion. Deborah went to the \"grandkid's closet\" and pulled out some games she thought might help Sosoni learn basic skills.\n\nIt was a head-smack moment for me. Of course!\n\nBefore leaving McCall, Sosoni and I stopped at a store and left with Candyland, Chutes and Ladders, Memory, and a bunch of other kids games.\n\nDeborah and Sosoni grew fond of one another, and whenever she could, Deborah came up to visit and play games with us, bringing new ones sometimes. Before long, Deborah invited Sosoni out, just the two of them. \"Women's Time,\" Deborah called it. It happened about three times per week, and Charles insisted that I not ask Deborah about it.\n\n\"Let it play out, my friend,\" he said.\n\n\"I'd just like to know where they went. That's all. I don't need to know what Deborah's teaching her.\"\n\nCharles waved me down. \"Trust Deborah. She's never let me down.\"\n\n\"Alright.\"\n\nSosoni's vocabulary growth\u2014hell, mental growth, really\u2014flourished as those \"Women's Time\" weeks passed.\n\nCharles and I played Cribbage together more than usual during those days, and one day in late May, I asked him if I should notify the authorities about Sosoni.\n\n\"In my experience, when you're wondering about telling the authorities something, it means you probably should.\"\n\nI sighed. \"As always, Charles, you're probably right.\"\n\n\"So what's got you worried?\"\n\n\"The entire set of events.\"\n\n\"Like what?\"\n\n\"Let's run it down. I didn't immediately report her to anyone, even though I knew exactly what she was\u2014knew her family, even\u2014or, at least, I knew of her family. I let her give me hand jobs and blow jobs. I shot a bear without a license. I disposed of the evidence of said bear. I took her to my house and have done everything a man can sexually do to a woman without special equipment, except for vaginal sex.\"\n\nCharles guffawed. \"Put it like that, of course it sounds bad. You know that's only half of the truth. You saved her life by killing that bear\u2014and your own. Every act of sex was consensual. You've nursed her back to health and given her safety, food, shelter, and love. Sure she's got distant relatives, but her family was\u2014what'd you call it?\u2014forgotten?\"\n\nI nodded.\n\nHe continued, \"Yeah\u2014forgotten. You've eased her into culture and civilization. Because of you, she spends time almost every day with my wife, a licensed, professional teacher. You've saved her from a cold, hard life with an early death, and you've given her a chance for a very long and happy one.\" \n\n\"Friends are expected to see the good in one another.\"\n\n\"No,\" Charles argued, \"I'm looking at this like a scientist.\"\n\n\"So, who do I call? Boise State Anthropology or something?\"\n\n\"Better still, call Idaho Health and Welfare. I know a guy.\"\n\n\"Yeah?\"\n\n\"He'll do the right thing, and he owes me one.\"\n\n\"Okay. Before I do, I'm going to head back out to her cave, find everything I can and bring it all back.\"\n\n\"For a complete record?\"\n\nI nodded.\n\n\"Not a bad idea,\" he acknowledged. \"Take your camera out there.\"\n\nI pointed at him. \"Yes. Good idea, my friend.\"\n\n***\n\nThat night Sosoni climbed into bed, naked as usual. What was different was that she immediately rolled onto her tummy, pushed herself to her knees, and spread her legs wide.\n\nThen she waited, peering back over her shoulder at me. \n\nI heard her breathing, and she sounded almost out of breath.\n\nI began to undress.\n\nShe called my name.\n\nI smiled and pulled off my shirt.\n\nShe yelled my name and smacked the bed.\n\nI looked at her.\n\nBlood seemed to have rushed to her face. Her eyes glared at me like a mountain lion's at a deer. Knowing she had my attention, she spread her legs even wider and gyrated her ass. Then, she smacked the bed again, crying out in her broken, childlike English for me to go faster, to hurry up.\n\nI grinned, chuckling, \"Wait, Sosoni, I need to go to the...\"\n\nShe hollered angrily and smacked the bed twice, thrusting her pussy in my direction.\n\nI quit moving. She was serious. Her eyes burned at me. She wanted this right fucking now.\n\nI went to her.\n\nShe issued a low, almost purring sound when I approached. Her knees drew closer together, and she moved her ass towards me.\n\nThe moment I held her hips and brought my face to her vagina, she began to moan. Sosoni never sounded how one expects a woman to sound during sex, but this was even more strange. This moan was like a large feline's death growl.\n\nHer orgasm\u2014the wettest I had ever experienced with her\u2014was almost instantaneous. My tongue had been on her for less than a minute. The growls turned into bawling screams, and she collapsed forward onto her stomach.\n\nI followed her down, but she twisted away from me.\n\nSitting back on my knees, I watched her recover. Then, as if a deafening alarm had rung out in my bedroom, she sprang up, legs kicking and came at me on all fours.\n\nI fell back, my head over the foot of the bed. Is she pissed off? I wondered. What did I do wrong?\n\nHer lips suddenly closed around my cock and her head bobbed furiously. She moaned and hummed urgently.\n\nI grunted her name.\n\nShe drew off, said, \"Cum,\" and inhaled the shaft again.\n\nI propped myself up with my elbows, thinking that I'd misheard her.\n\nHer head rose and fell five, six, seven times, and then she drew off, looked up at me with ferocious eyes and yelled \"Cum!\"\n\nMy jaw fell open as much from what she said as from how she took me back into her mouth: her head plummeted. It drove down the length of the shaft. Her lips stretched to take more, stretched to gain a fraction.\n\nI grasped.\n\nShe screamed into my cock. Her lips came off and she shrieked, \"Cum!\" slapping the bed three times. \n\n\"I will!\" I snapped. \n\nShe smiled at me viciously.\n\nI reached out, wrapped my hand around the back of her head, and guided her mouth back to my saliva-coated erection. \n\nShe hummed, sucked, and slurped. \n\nI collapsed back into the bed at the warm pleasure she gave me. I whispered her name.\n\nShe felt the onset of my coming orgasm. Her lips plummeted deep.\n\nI groaned.\n\nShe held in place, humming urgently into my cock until her mouth was so full of semen that she could only whimper. With her tongue, I felt her draw the cum back into her throat, and I listened to the wet, throaty gulps that followed.\n\nThe orgasm, usually an energy drain, electrified me. I sat up and moved towards her, wanting to play with her breasts for a while. She drew back, and we wound up facing one another on all fours like hostile bears.\n\nShe rose to her knees and lunged at me. I caught her, and we kissed. Throwing more and more of her weight upon me, I tipped backward. She capitalized, sliding over my stomach and chest. Now straddling me, pinning my shoulders to the mattress with her knees. She stared down triumphantly at me.\n\nI glanced at her thick, black bush.\n\nShe circled her hips and her pussy drew near my chin before arching away. She did it again, and I craned my neck to lunge for it. Sosoni snatched it away before I could reach it. \n\nOur eyes met, and she smiled teasingly. Then, she circled her hips again.\n\nI did not fall for the bait. I grabbed her waist to pull vagina to my face.\n\nShe threw her weight backward, denying me and laughing.\n\nWhen she glanced at me, I said, \"Sosoni, please.\"\n\nShe fell forward to her hands and, supporting her lower body with them, she brought her legs to either side of my face and lowered her vagina to my mouth. From the moment my tongue met her, she started in growling again\u2014a low, feminine rumbling purr.\n\nI grew hard again to the sounds of her pleasure, and I wanted her.\n\nThis woman, I thought, is in heat. Maybe it was her closeness to nature for her entire life; maybe hormones were out of control, or maybe she saw animals do it this way in nature. I didn't know, but she needed to be fucked.\n\nI was, finally, going to fuck her. \n\nI slid out from under her and spun around so that, before she could voice her protest, I was positioned behind her, rock hard, holding her waist.\n\nShe lowered her hips, pointing her anus at my cock, and waited.\n\nI raised her back up, and I nestled the head of my cock against her pussy.\n\nSosoni's face darted around to me. Her jaw fell open. She visibly panted.\n\nI hesitated. \n\nEven though I looked down on a sloppy wet dream of pornographic imagery\u2014Sosoni's wet pussy, the full arc of her ass, a throbbing little pink anus, the sides of her tits hanging firmly under her chest, and her desperate eyes, shocked and excited about what might happen\u2014I stopped.\n\nI had to wait. I had to let her choose not from one option, but from the world. I had to set her completely free first.\n\nThe decision pissed me off. I slathered my index and middle fingers with saliva and, for the first time, slid them into Sosoni's pussy and through her hymen until they could go no further.\n\nShe cried out in a mixture of pain and pleasure.\n\nI grabbed a handful of her ass and sucked on it. Then, I grabbed a fistful of her hair and drew it tight while my fingers, at first, slid inside her, and then, when her grunts and whimpers rose, pounded her with them.\n\nHer orgasm was pure savagery\u2014a screaming, roaring, bloody affair. She toppled to the bed like a slain deer, gasping.\n\nStill furious at myself for being weak, for letting my conscience prevail, I rolled her onto her back and straddled her chest. Clutching Sosoni's firm, fat tits, I brought them to my cock.\n\nA few minutes later slashes of semen crisscrossed her chin and face. Pools gathered at her neck. I rolled off and fell asleep.\n\n***\n\nIn the early morning the next day, I slipped out from under her arm and, letting her sleep, took my four-wheeler out to the cave to gather up anything she or I had left behind, and to take pictures with my camera. \n\nIt didn't take long, other than the trip. \n\nDriving back, I thought about my decision to wait to have sex with Sosoni. I was proud of myself. This was right. Let her, I decided, remain a virgin until she chooses. So, I began to imagine the phone call I planned making to the guy Charles knew at the Idaho Department of Health and Welfare. What would happen once people knew about her?\n\nI slowed down my ATV.\n\nFrom a few hundred yards away, I saw two trucks parked haphazardly in my driveway. \n\nWhat the fuck?\n\nA man in jeans and an old ball cap appeared on my deck, carrying a shotgun. He turned and said something to someone inside my house before stepping out and charging the weapon.\n\nSosoni.\n\nI raised two hands in the air briefly and approached my house.\n\nAnother man emerged from my front door, rifle pointed at me as I rounded my house and pulled into the driveway. I parked and raised my hands.\n\n\"Get off the ATV,\" the man commanded.\n\nI stepped off.\n\n\"Helmet off,\" he said.\n\nI pulled it free and tossed it on the ground.\n\nThe man with the shotgun emerged from the front door and then a third and a fourth man. The third man led Sosoni. There was a black pillowcase over her head, and her hands had been tied together in front of her with what looked like zip ties. She twisted, struggled, and yelled, \"No!\" The man held her tight.\n\nThe last man, I recognized. It was Bert Headley.\n\nHe smiled at me, set his pistol on his shoulder, and groped Sosoni's ass. \"Well, if it ain't Mr. Rich City Boy, come home day late, dollar short.\"\n\n\"Don't hurt her, Headley. Please.\"\n\nSosoni screamed and fought when she heard my voice. The third man slammed the butt of his pistol down on Sosoni's back and she cried out.\n\n\"No!\" I hollered.\n\nSeeing her give up the fight, Headley turned back to me. \"Only reason she gets hurt is if she fights us, see?\"\n\n\"What are you going to do?\"\n\nHeadley sniffed and hiked up his pants with a kind of cowboy-like bravado. \"Well, way I figure is this fine lookin' piece of ass don't even really exist. Ain't no one gonna complain she's missing 'cept you. Ain't no cops gonna look for no woman don't exist. So, we're going to have ourselves some fun, eh boys?\"\n\nLaughter surrounded me.\n\n\"Always wanted me one of them squaws!\" one of them cackled.\n\nBert nodded at the man. \"'Specially one so young!\" he yelled.\n\nThe man escorting Sosoni reached around and cupped her breasts. \"And with these big ol' titties!\"\n\nMore guffaws followed.\n\nFury paralyzed me. I couldn't speak.\n\n***\n\nWhat follows here is only what I could piece together after the whole tragic mess ended.\n\nFirst and most importantly, I had not seen Bert Headley for the twisted old fuck he really was.\n\nThere had been hints. He had insisted on seeing me in person. He wanted to be paid for his time, and he asked for quite a sum, given that I only required an hour. He had wanted cash. \n\nWhen I so readily agreed to his outrageous demand, he had cursed himself not asking for more. I didn't hear it in his voice when we made our agreement over the phone. I didn't see it in his eyes when we met, but his curiosity had been awakened.\n\nHe traced back to how I had gotten his name. He talked to those folks. \n\nHe had probably looked me up\u2014talking to people and searching the Internet.\n\nHe started assembling a story.\n\nThen, knowing I had gone off to speak with Kamewaititi, he went up to the Reservation and spoke with the old Shoshone.\n\nAnd it was there that he learned what I learned from Kamewaititi. It was there he uncovered my biggest mistake: I had assumed that the first child had been a girl. I had been surprised to discover it was a boy.\n\nBert Headley undoubtedly left Fort Caldwell thinking that I had found an 18 or 19-year-old Shoshone woman in the forest, the second child and daughter of Tonjadika and Okoweney.\n\nBut that wasn't all. He had been able to confirm it. The small network of rural folks loved privacy rights, sure.\n\nBut, they liked rumors even better.\n\nBert probably learned from my gas station guy that I had asked where to find outdoor women's clothing. He may have even gone to the store to find out what I'd bought. Other store owners may have explained how I'd been visiting more frequently, buying more food. Buying tampons.\n\nHe might have fed the store owners some juicy tidbits. He may have put it out there as some kind of kidnapping crime on my part. He may have played upon my outsider status\u2014the rich city guy stealing up the land of good Idaho folks.\n\nHe got the information he needed. He confirmed it. He knew.\n\nHe wanted Sosoni for himself.\n\nSo, he assembled his small crew, probably promised them some money and rights to Sosoni's body, and they drew up a plan.\n\n***\n\nWhen the laughter of Headley's crew finally abated, the old man turned back to me. \"You ain't gonna follow us. Already cut yer Jeep tires. And you ain't gonna follow us on that there four-wheeler 'cause, well...\" He pointed his pistol at the ATV.\n\nI leaped away.\n\nTwo shots rang out in succession.\n\nSosoni jolted, but the third man held her tightly.\n\nI looked at the damage: both right side tires were flat.\n\n\"'Cause of that,\" Headley said. \"And you ain't gonna come after us because this here little girl don't need no fingers, toes, hands, or feet to get fucked.\" He blinked at me to hammer home the import of his words. \"We know where you live, and you might know me, but you don't know nothin' 'bout the fellas here, do you?\"",
        "I didn't respond.\n\nHe continued. \"We got friends in every little town and police station 'round here. We'll know if you make noise about this. You go round askin' questions? She starts losin' parts. We see you\u2014anywhere, that is\u2014in town, at the store, at the gas station, outside my house\u2014she loses parts and maybe we come visit you in the night. Break some shit. Set us a fire. Take some of your parts, maybe.\" He waved the pistol at my arms and legs.\n\nI bristled at the threat but said nothing.\n\nHeadley finished. \"Now you forget about this thing. Forget her. Forget us. Move back to your big city or stay, we don't care, but you let this go now, got it?\"\n\nI nodded. Inside, I was thinking really, really hard.\n\nSosoni was loaded into the front truck. Her guard jumped into the driver's seat. Bert climbed in the passenger side, sandwiching her in the middle. \n\nArm out the window, Bert trained his pistol on me as the other two climbed into their truck.\n\nI walked toward Bert.\n\nHe re-gripped the pistol. \"Easy, City Boy.\"\n\nI raised my arms. \"Buckle her,\" I commanded as firmly as I could.\n\n\"Huh?\"\n\n\"You won your prize. Now keep her safe. Buckle her.\"\n\n\"Mind yer own business, now. She's ours, like you say.\" With that, Headley's driver made a three-point turn in my driveway and waited for the other truck. As it pivoted around, too, I saw something through the back window of Headley's vehicle.\n\nHe turned in his seat, grabbed the seat belt, and buckled in Sosoni.\n\nThe other truck took the lead; Headley's followed.\n\nI walked into the front door of my house.\n\nOnce out of view, I bolted.\n\n***\n\nI raced down the hallway into my bedroom to get the safe key. Then, I sprinted to the basement, unlocked the gun safe, and pulled out a rifle along with the pre-loaded magazine. Throwing open the sliding glass door in the basement, I seated the magazine, pulled the charging handle, slammed the forward assist, and tore off throughout the woods.\n\nMaybe, I thought, there was a little fact about foothill roads that they had forgotten.\n\nI knew my property, and I knew the long, winding road that led to it.\n\nI took the straight line.\n\nThey took the road.\n\nThe meeting point was just over half a mile for me, but for them, it was just over a mile on a narrow, slow road with sharp turns that they would be mostly unfamiliar to them. \n\nI had to beat them to the stretch\u2014a flat, straight part of the road that ran for a couple hundred yards before bending around toward the intersection with the paved street.\n\nI might have run faster in my life, but never harder. Dodging trees, jumping little creeks, up crests and down draws, I sprinted for Sosoni.\n\nThe road came into view, 75 yards in front of me through the trees and downhill. Glancing right, I saw no trucks. To the left, no trucks.\n\nI had either missed them or beaten them easily.\n\nHad to assume I won the race.\n\nMy feet landed on the rocky gravel, and I laid in the prone, bringing the rifle to my shoulder and disengaging the safe with my thumb.\n\nI was zeroed for a 100-yard shot. With trees and hills on both sides, wind would not be a factor. \n\nThe first truck rounded the corner. Headley's followed.\n\nI probably looked like a log in the road to them.\n\nI sighted in on the passenger.\n\n150 yards. Speed increasing on the flat stretch.\n\nI squeezed the trigger. The butt shoved into my shoulder as I trained the muzzle toward the driver's side. \n\nIt didn't matter.\n\nWhen the bullet struck the passenger, the truck held straight for a moment and then swerved left. The driver overcorrected. \n\nAt just under 100 yards, the truck barreled into the trunk of a fat cedar tree. The driver's head and torso blasted through the windshield, and he lay there, half in and half out of his truck, unmoving.\n\nHeadley's truck skidded to a stop behind it.\n\nSomeone cursed loudly.\n\nHeadley's driver jumped out, never even looking at me.\n\nThey don't know, I realized. They think the other driver just lost control. Maybe they didn't hear the shot. Maybe they thought it was a backfire. Shit! They don't know I'm here! \n\nHeadley's driver ran over to the driver's side of the wrecked truck, and he stopped.\n\nI squeezed the trigger, and he instantly fell into a pile like a dropped chain.\n\nHeadley had a pistol. I was 90 yards away. Good luck hitting me, asshole. I had a rifle.\n\nThe old fuck had just rounded the tailgate of the wrecked truck when I shot his partner.\n\nNow, he scampered behind it just as I brought him into my sights. \n\nI got up and ran into the treeline to get an angle on him. I heard the door of his truck open and close. I stopped and sighted in.\n\nHe had drawn his pistol. It was pointed at Sosoni's head.\n\nI lowered my rifle.\n\nHe smiled.\n\nI raised it back up.\n\nHeadley thumbed back the hammer on his pistol.\n\nI slowly walked toward the truck, keeping Headley's face in my scope.\n\n60 yards.\n\n50.\n\nI raised one hand.\n\n40 yards.\n\n30.\n\nI stopped.\n\nKeeping the pistol on Sosoni, Headley lowered the driver's side window and screamed, \"You're a dead man, City Fucker! Them boys was my friends! I know cops! Tell them you kidnapped and raped this woman. We was trying to rescue her!\"\n\n\"Cameras all over my house,\" I called back, bluffing. \"Your story won't hold.\"\n\n\"I'll kill her! You won't have her! Never again!\"\n\n\"Let her go.\"\n\n\"Just kill me then! No way!\"\n\n\"If I put down my rifle, you let her go.\"\n\n\"Then, I just kill you and go find her?\" he said, doubtfully. \"No, you got something cooked up.\"\n\n\"Take off the pillowcase, cut the ties, and let her run. You won't catch her. She's lived in these woods hidden away for almost twenty years. You're an old fuck. She's free. That's all I care about.\"\n\nHe guffawed. \"And you're just gonna let me kill you?\"\n\nI nodded. \"You kill me. You go back and burn my house down. You pin the deaths of your friends on me. The woman goes free.\"\n\n\"Fuck you, prove it!\" Headley screamed.\n\nI lowered my rifle and let one hand fall away. \"Set her free.\"\n\nHeadley licked his lips. The pistol slowly fell out of sight behind the door. He watched me as he yanked the pillowcase from Sosoni's head. His pistol turned toward me.\n\nSosoni blinked a few times and cried. She glanced left and right, taking in her situation, it seemed. She saw the old man's partner was gone. She saw the wrecked truck in front of her, and the two lifeless bodies inside. She saw me and yelled my name. \n\nThen, she turned toward Headley. Her face twisted. Her eyes blazed.\n\nOh, shit! I ran toward Headley's truck. \"No! Sosoni, no!\"\n\nHeadley saw me running and raised the pistol at me. Then, he must have felt Sosoni moving behind him. \n\nHe turned in time to see her bound hands wrap over his head, and her bare white teeth driving toward his face, toward his eyes. He screamed.\n\nThe pistol fired into the air. \n\nThe inside of the truck was a blur of flailing arms and writhing bodies.\n\nHeadley shrieked and cried. \n\nAnother shot rang out, and Sosoni screamed.\n\nI wrenched open the door. Headley fell out with Sosoni on top of him. They were both still screaming. Their bodies knocked me backward, and I lost the grip on my rifle.\n\nI spun to retrieve it, but by the time I had it trained on Headley, I didn't need it anymore. His pistol was on the ground five feet away.\n\nSosoni hammered at his bloody face with her bound hands. A string of blood followed her clasped fists as she drew them up for another strike. Her stomach muscles tightened, and she smashed Headley's face again.\n\nShe stopped, panting and watching him.\n\nI scanned her body for a gunshot wound. There was so much blood, I couldn't tell.\n\nA choking gurgle erupted from Headley's mouth.\n\nSosoni's eyes widened. She screamed. She bared her teeth, and I watched her jaw fire into Headley's throat, ripping and tearing. \n\nI ran over and pulled Sosoni away from him. She fought me momentarily, and her strength at that moment might have overcome me. \n\nBut, she knew my touch and my smell.\n\nShe relented and turned to me. Her face was shrouded with dripping blood. She cried out, and I held her.\n\nIf she had been hit by a bullet, the wound had to have been superficial.\n\nShe went to her knees, and I followed her down. She bawled. Like her laughter when I first gave her the blanket near her old home in the woods, the sound was unpracticed, untainted by civilization, feral, and true.\n\nI glanced at Headley. His face was a massacre of blood and gnarled flesh.\n\nSosoni held my hand as I searched Headley's pocket for a phone. Finding one, I engaged the emergency line and dialed 911."
    ],
    "authorname": "fsqueeze",
    "tags": [
        "anal",
        "feral",
        "first",
        "oral",
        "save",
        "teaching",
        "tit fuck",
        "wild",
        "young",
        "first time"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/sosoni-ch-03"
}
{
    "title": "Life after the Lottery Ch. 72",
    "pages": [
        "I am so sorry it has taken much longer than I expected to get this chapter out. I went ahead and split it because the end is taking me some time to complete. I am working at combining many things into the final chapters. I have had to slow down because of this damn arthritis. Copyright 2021, LATL.\n\nLife after the Lottery, CH 72\n\nThings begin to fall into place\n\nThe alarm went off at 6:30 Monday morning, and I woke everyone up. Amy and Samantha sat up in bed for a minute before Samantha got up and headed to her room. Dawn got up and followed her.\n\n\"What time do you have to be at school?\" I asked Amy.\n\n\"9:30.\"\n\n\"We have some time then.\"\n\nI had Amy straddle my head so I could look up at her while I ate her pussy. She smiled at me and ran her fingers through my hair while I enjoyed her. I worked my tongue deep in her pussy as she smiled. By the time she was working her pussy on my mouth, she was squeezing both her tits.\n\n\"James...do you know how much I love you? I am so happy I am going to be having your child.\"\n\nAmy kept working as I tongued her pussy.\n\n\"Ohh, that feels so good! Keep going!\"\n\nAmy moaned louder and louder until she came in a gush and filled my mouth with her tasty juices.\n\n\"Oh, yes...James...\"\n\nShe looked down at me then began moving back so she could straddle my cock. First, she leaned down and kissed me for several minutes before she sat up and worked my cock into her.\n\n\"Honey, I love you very much also,\" I said.\n\nAmy smiled as she slowly worked her pussy down on my cock. I rubbed her tits while she went to work. She smiled at me as I softly caressed her breasts.\n\n\"Do you feel different?\" I asked.\n\n\"Yes.\"\n\nAmy took her time slowly working her pussy on my cock. I could feel that she did seem different. I had a much closer and intimate feeling with her energy now. I had always had to work to feel that from her, but now it just flowed.\n\nI ran my fingers through the hair of her red patch as she wiggled. She just smiled at me.\n\n\"It is so different now. I don't have to work at getting off. It just happens,\" Amy said.\n\nI used the tip of my finger to slowly rub her clit.\n\n\"Emmmmm...yes...\"\n\nAfter about 30 minutes, Amy was growing to a huge orgasm.\n\n\"Ohhhh! Wow!\"\n\nAmy kept going until she began to come.\n\n\"Oh...my...god!\"\n\nAmy started coming hard. I thrust up into her and she screamed as she kept working her pussy. She kept screaming as I erupted inside of her. She finally collapsed on top of me, and I wrapped my arms around her and held her.\n\n\"Oh, my...sex is just getting better and better,\" Amy said.\n\n\"You two don't stay up here all morning,\" Dawn said from the door.\n\n\"Dawn...\" Amy said.\n\n\"Yes?\" Dawn replied as she came back into the bedroom.\n\n\"Do you have to work aa hard at getting off anymore? I mean...I feel so pleasured, I don't need to work at it,\" Amy said.\n\n\"Honey, I have never had to work at getting off with James. I'm happy that you're feeling things differently,\" Dawn told her.\n\nI held Amy until she wanted to kiss me for a while.\n\n\"I guess we better eat,\" she said.\n\nWe got up and went down to the kitchen and sat while Samantha and Dawn made breakfast.\n\n\"Will you two be ready at 3:00?\" Dawn asked.\n\n\"Yes,\" they both said.\n\n\"What's at 3:00?\" I asked.\n\n\"We have an appointment with our GYN,\" Dawn replied.\n\n\"I guess I'll have to start using condoms.\"\n\n\"In a few weeks,\" Dawn replied with a smile.\n\nAfter we all finished breakfast, I went down to my darkroom and worked to get the two prints of Ashley and Raven finished for the printer. By 10:00, I had them printed and dried. I grabbed the prints and negatives for Ashley and Raven's posters and headed to town to the printer. When I got there, I found the guy named George that I had talked to about the posters. We looked at the 24 X 36-inch prints I had made.\n\n\"Damn, these are hot,\" George said.\n\n\"Can you still get me 100 of each by Friday?\"\n\n\"Sure. We can have them done by Thursday afternoon probably. What are they for?\"\n\n\"These two are going to sign them to raise money.\"\n\n\"They should raise a lot of money then!\"\n\n\"Do you want to use the prints or the negatives?\" I asked.\n\n\"What size are the negatives?\"\n\n\"8 X 10.\"\n\n\"Let's use the negatives then. For four-color printing, it will save me a step, and these will be very sharp and clear with that size negative.\"\n\n\"You got it.\"\n\n\"Let me keep the prints too for matching up the color balance,\" George said.\n\n\"No problem.\"\n\nI left everything with him and headed back to the house. When I got there, I went straight to my darkroom.\n\n*****\n\nA little after noon, I went up to grab a sandwich. I took it and went to my study to check my email. I was about to go back to the darkroom when my phone rang.\n\n\"Hello?\"\n\n\"Dr. Smith, this is Lieutenant Dan.\"\n\n\"Hey Dan, what's up?\"\n\n\"I wanted to let you know we picked up that guy you told us to look out for last night for drunk driving.\"\n\n\"You did? Where is he now?\"\n\n\"In lock-up. I was on duty last night when I got a call they were bringing him in. The word is out about him.\"\n\n\"How long can you keep him locked up?\"\n\n\"Probably a while. When they stopped him last night, he resisted arrest. The two officers had to get pretty physical with him.\"\n\n\"Are they going to charge him with resisting?\"\n\n\"They will now. When they had him in booking last night about 2:00 AM, I was with them. Dumb son-of-bitch started a fight with me, wouldn't you know it!\"\n\n\"What happened, Dan?\"\n\n\"Well, I had to defend myself, you understand!\"\n\n\"I'm sure you did!\"\n\n\"He has been charged with assaulting an officer and DUI. We'll keep him in lock-up a while.\"\n\n\"Thanks for letting me know. When he is released, please call me.\"\n\n\"Will do.\"\n\n\"Thanks, Dan.\"\n\n\"No problem.\"\n\nAfter he hung up, I called Linda.\n\n\"Hey, James.\"\n\n\"Good news. Our stalker got picked up for DUI last night.\"\n\n\"They have him!\"\n\n\"For now. It seems he resisted arrest and assaulted a police officer.\"\n\n\"Can they hold him?\"\n\n\"They are right now. The officer he assaulted is my friend that teaches Krav Maga. He said the guy was pretty beat up right now and in lock-up. They are going to charge him with DUI, resisting and assaulting an officer. He'll be locked up a few days at least.\"\n\n\"Great! I need to make a few phone calls. I'll talk to you later, James.\"\n\nLinda hung up quickly.\n\n*****\n\nI was coming up from my darkroom about 2:00 when Samantha came in the front door with Amy and Dawn.\n\n\"I can't get used to your new schedules,\" I told them.\n\n\"What are you doing?\" Samantha asked.\n\n\"Finishing the prints for the club and the store.\"\n\n\"Can I help?\"\n\n\"Sure. I have some good news.\"\n\n\"What?\" Dawn asked.\n\n\"Our friend that has been stalking us got stopped for DUI last night. Dan called and said he was in lock-up.\"\n\n\"For how long?\"\n\n\"A few days at least. It seems he resisted arrest and attacked Dan when they were booking him.\"\n\n\"Really?\" Dawn asked.\n\n\"Well, that's Dan's story. They have him locked up and are charging him with DUI, resisting and assaulting a police officer. I called Linda and told her.\"\n\n\"Maybe they can keep him locked up for a while!\"\n\n\"I told Dan to call me if they were going to release him.\"\n\n\"Great.\"\n\n\"I can drive my car now?\" Samantha asked.\n\n\"For now,\" I told her.\n\n\"Good! What prints are you working on?\"\n\n\"The ones for the store and the club.\"\n\nSamantha went to the darkroom with me, and we went through the proofs and the negatives for the color prints and found the next one. I put the negative in the enlarger and moved it up so I could make the 36 X 48-inch print. I turned off the lights and focused, then got everything ready.\n\n\"Damn, that is big,\" Samantha said.\n\nI turned off the lights again and felt around and opened the box of big paper and got out a sheet and put it in place. I exposed the paper and then put the large sheet of paper in another box and turned on the lights.\n\n\"How do you know what you are doing in the dark?\" Samantha asked.\n\n\"I just have to make sure everything is where it needs to be and take my time.\"\n\n\"Why can't you use the red light with color?\"\n\n\"Because it would expose the paper. I can use a dim red or yellow light with black and white because the black and white paper is not sensitive to those colors.\"\n\n\"Oh.\"\n\n\"Another reason printing color is harder. Come on. We will run this one print and check it.\"\n\nWe went out the door to the other room with the color processor. I turned off the lights and got the print out of the box and fed it into the processor, and waited.\n\n\"What did Dawn have to say?\" I asked.\n\n\"She told me I have to be careful now.\"\n\n\"Me too.\"\n\nWe waited a few minutes in the dark.\n\n\"Okay, we can turn the light on,\" I said.\n\nWe went to the other room where the prints came out and waited.\n\n\"Why don't you have to keep the lights off until the print comes out?\"\n\n\"The color print processing machine is light-tight,\" I said.\n\n\"Is that machine expensive?\"\n\n\"Oh, yes. Very few people will have one at home that can make prints as big as this one can. It was something I splurged on when we built the house.\"\n\n\"Why do you make the black and white prints in trays of chemicals and not a machine?\"\n\n\"Color is much more complicated and higher temperatures. With black and white, I have more control when processing it by hand. There are black and white machines, but I prefer processing by hand.\"\n\nA few minutes later, the print started coming out slowly. We watched until it was out all the way.\n\n\"She looks hot, James.\"\n\nI put the print on the table, and we looked it over. It was the lady realtor in the snow. \n\n\"She looks hot in the snow and that black coat,\" Samantha said.\n\nI bent over and looked closely at the lady's face.\n\n\"What are you looking at?\" \n\n\"Spot on her face.\"\n\nSamantha leaned over and looked.\n\n\"That tiny white spot?\" She asked.\n\n\"Yes. It's from a piece of dust on something.\"\n\n\"You can't see it from a distance. No one will know it is there.\"\n\n\"I'll know it is there.\"\n\n\"What do you do now?\" Samantha asked.\n\n\"Two choices. Clean the negative and everything and make another print or color in the spot.\"\n\n\"How do you color in the spot?\"\n\n\"You using spotting colors and a tiny brush. If you want to learn, I will teach you.\"\n\n\"Cool.\"\n\n\"But I am going to make another print. I need to make a minor adjustment to the color. Once we have this one right, we can print all the others with less trouble.\"\n\nWe went back into the darkroom, and I grabbed the end of my air hose and sprayed the negative and the inside of the enlarger.\n\n\"That will clean off the dust, but I think there was a piece of lint on the paper. The spots would be bigger than that if it were dust on the negative,\" I said.\n\nI turned off the lights and made a minor adjustment, and made another print. We went and fed it into the processor and waited until we could leave that room.\n\nSamantha looked closely when the print came out.\n\n\"It's gone,\" she said.\n\nI took the print and laid it on the table, and looked it over.\n\n\"There is a spot right here. With really big prints, it is hard not to have a tiny spot. You will get to learn how to color them in.\"\n\nWe went back into the darkroom, and I located the next negative to print and got it ready, and turned off the lights. We worked until they had to leave at 3:00. I kept working for several more hours until I had a stack of twenty prints.\n\n\"Come eat!\" Dawn said over the intercom.\n\nI looked at my watch, and it was 6:00. Time had gotten away from me.\n\nI went up and joined them for dinner.\n\n\"What did the doctor say?\" I asked.\n\n\"You need to start using a condom soon,\" Dawn replied.\n\n\"That sucks,\" I said, and they laughed.\n\n\"I have all the prints ready for the store.\"\n\n\"Already?\" Dawn asked.\n\n\"Yes. Once I got the first one right, the rest were easier. I'll have to spot them.\"\n\n\"That takes time.\"\n\n\"I want to learn, but we are leaving for class,\" Samantha said.\n\n\"I'll have plenty for you to learn on.\"\n\nAmy and Samantha headed upstairs after they finished eating.\n\n\"How did the prints come out?\" Dawn asked.\n\n\"I think they look great. I made two of each. One for backup in case something happens. I made a few other prints for Rick.\"\n\nI headed back to the basement and went to work on the rest of the prints.\n\n*****\n\n\"Are you coming to bed?\" Dawn asked over the intercom.\n\n\"What time is it?\"\n\n\"11:30.\"\n\n\"I guess.\"\n\nI went up to Dawn in the den, and we went up to the bedroom. Amy and Samantha were already asleep. We got in bed with them and turned off the lights.\n\n*****\n\nI was up at 5:00 Tuesday so I could work. Amy came and got me about 7:30 to eat breakfast. After we finished, Amy headed off to school.\n\n\"What time do you have to be at school today?\" I asked Samantha.\n\n\"10:00\"\n\n\"I am going to make some big black and white prints. Are you going to help me?\"\n\n\"Sure.\"\n\nWe helped Dawn clean up a little then we went down to my darkroom. I had used 2 X 4 lumber to make frames to put plastic in for processing the large black and white prints. I had them down on the floor and was pouring the chemicals into them.\n\n\"That one stinks,\" Samantha said as I poured chemicals in the second tray.\n\n\"That is acetic acid. It stops the paper from developing anymore.\"\n\n\"It stinks.\"\n\nWe got all the chemicals poured into our makeshift trays. We looked at the proofsheets for a few minutes.\n\n\"Print this one of Ashley,\" Samantha said.\n\nShe had picked one of the low-key light shots that did look pretty good.\n\nI stuck the negative into the enlarger and adjusted the print size for the 24 X 36-inch print. I used a print analyzer to get my exposure in the ballpark after I turned off the lights. I grabbed a piece of 8 X 10 paper and made a test print on it. I put it in the developer and waited. I moved it to the other trays and then turned on the light.\n\n\"What do you think?\" I asked as I handed the test print to Samantha.\n\n\"Her skin looks too white.\"\n\n\"It is. I need to expose it longer.\"\n\nI turned off the lights and made another test print. Once it had developed, we looked it over.\n\n\"That looks better. I can see all the little bumps on her skin now,\" Samantha said.\n\n\"I find that sexy,\" I said.\n\nI looked at the test print for a minute and made a minor adjustment to the exposure timer.\n\n\"Ready to make a big print?\" I asked.\n\n\"I guess.\"\n\nWe got out a big piece of paper once all the lights were off except the red one. I placed it under the enlarger and exposed it. Samantha helped me get the whole piece of paper into the chemicals at one time. I watched as the print became visible.\n\n\"Oh, that looks hot,\" Samantha said.\n\nOnce it was fully developed, I pulled it out of the developer and slid it into the acetic acid for a minute, then moved it to the final tray and waited a few minutes, then turned on the lights.\n\n\"Oh, that is nice,\" Samantha said as we looked at the low-key print.\n\nWe waited a few minutes, then moved it to a tray I had created to wash it for a while. I made several more of the same print of Ashley.\n\n\"Let's look at the ones of Raven,\" I said.\n\nWe looked over proofsheets and picked out a black and white shot of Raven. We made a test print and got it where I wanted it, and then we made some more copies. They were all in the wash water after a few minutes. I pulled out the prints of Ashley and hung them up to drain. We looked them over closely.\n\n\"I see a few tiny white spots in the black,\" Samantha said.\n\n\"Those are no trouble to color in. Any on her body are harder, but not as hard as color.\"\n\nOnce it drained for a few minutes, I took it out to the basement and laid it on a table so we could see it under full light.\n\n\"That lighting is so sexy,\" Samantha said. \"Did you shoot any in color?\"\n\n\"I did.\"\n\n\"You should make a few for Rick to sale,\" Samantha said.\n\n\"I'll look at the proofs and pick one in color.\"\n\n\"I have to go,\" Samantha said and kissed me, and left.\n\nI went back to work and picked out a color shot that was very close to the black and white one and worked for a while to get a color print right. I had it lying next to the black and white print in the full light.\n\n\"Those are hot,\" Dawn said when she came down.\n\n\"The color is nice, but I still like the black and white one.\"\n\nDawn helped me make about two dozen different prints. I had strung up a clothesline in the basement to hang them from so they would dry. While they were drying, I cleaned up the darkroom and put the chemicals back in bottles.\n\n\"James, these look really hot,\" Dawn said.\n\nShe was looking at the prints as they hung to dry. We looked over the prints for a while.\n\nI got my spotting colors and went to work on the color prints. Amy and Samantha came down about 3:30 and looked over the prints. I kept working until after 5:00. Brenda and Sherri were coming to look over the prints for the store. \n\nWe were eating a light dinner with Samantha and Amy until they went to get ready for their boxing lessons. \n\nLater, Sherri and Brenda buzzed themselves through the gate.\n\n\"Hey, you two,\" I said to them as I let them in the front door.\n\n\"Hi.\"\n\n\"I have the prints done for the store.\"\n\n\"Good,\" Brenda replied.\n\nDawn joined us as we looked over the prints of the lingerie and swimsuit shots for about an hour.\n\n\"Are we through with these?\" Brenda asked.\n\n\"If you are happy with them.\"\n\n\"They look great, James.\"\n\n\"If you decide on more, let me know soon,\" I told them.\n\n\"Where are the girls?\" Sherri asked.\n\n\"Downstairs with their boxing instructor,\" Dawn replied.\n\n\"Sounds like they are really getting into the self-defense thing.\"\n\n\"They are. They need to,\" I said.\n\nAmy and Samantha came up with Daryl later. They were all hot and sweaty.\n\n\"Hi, Sherri and Brenda,\" Samantha said as she headed to the kitchen.\n\n\"Daryl, let me know how much I owe you.\"\n\n\"No problem,\" he said.\n\nSamantha came back with bottles of water for Amy and Daryl.\n\n\"Do you like the prints?\" Samantha asked.\n\n\"We do,\" Sherri replied.\n\n\"I'm helping print them,\" Samantha let them know.\n\nDaryl left a few minutes later.\n\n\"Are the prints ready to mount?\" Brenda asked.\n\n\"We should let them dry more tonight.\"\n\n\"Okay. We can get them mounted and up in the store. Will come and pick them up.\"\n\n\"Great.\"\n\nWe talked awhile, then Sherri and Brenda left. Samantha and Amy headed up to shower.\n\n\"You want some wine?\" I asked Dawn.\n\n\"Sure.\"\n\nI got us some wine, and we sat in the den and talked.\n\n\"If you are finished with the prints, are you done until the fashion show?\" Dawn asked.\n\n\"Yes. I'll have all them spotted by lunchtime tomorrow, I hope.\"\n\n\"Good. You need to take a break.\"\n\nWe talked and sipped our wine until 10:00. The girls had not come back down.\n\n\"Where did they go?\" Dawn asked.\n\n\"Let's go to bed.\"\n\nWe went up to the bedroom. Samantha and Amy were lying on the bed asleep, still wrapped in towels from the shower.\n\n\"Hey, you two,\" Dawn said as she shook Amy. \"Get out of the towels.\"\n\nThey stirred and pulled their towels off. Dawn took them to the bathroom.\n\n\"Hey, sit up so I can pull the sheets back,\" I said.\n\nThey finally moved enough I could get the sheets back.\n\nBy the time Dawn and I were undressed, they had gone back to sleep.\n\n*****\n\nI woke up about 6:00 Wednesday morning. Amy and Samantha were curled up next to each other between Dawn and me. Dawn was watching them sleep too.\n\n\"You're staring at me,\" we heard Samantha grumble.\n\n\"I didn't think that bothered you anymore,\" I said.\n\nSamantha rolled over to me.\n\n\"I guess,\" she moaned.\n\nDawn and I watched the two of them sleep for a bit before we got up and went to shower.\n\n\"Sam had stopped waking up when we watched her sleep,\" I said.\n\n\"I know. I bet she feels it more now.\"\n\nDawn and I got in the shower. ",
        "I was rinsing Dawn's hair while I stood behind her. Once I finished, I wrapped my arms around her and held her a minute, then moved her toward the wall.\n\n\"Emm...we won't be able to do this soon,\" Dawn said as she leaned forward and put her hands on the wall.\n\n\"Condoms are going to cut out spontaneity.\"\n\n\"You have a few weeks.\"\n\nI grabbed my cock and slid it into Dawn's pussy from behind.\n\n\"Emmmm...that feels so good.\"\n\n\"Yes, it does.\"\n\nI worked my cock in Dawn for a while.\n\n\"Oh, my...\" Dawn moaned.\n\n\"Does it feel different?\"\n\n\"I just feel you so much stronger now. The feelings are so...pleasing.\"\n\n\"I aim to please.\"\n\nI sped up and worked my cock in Dawn faster as she moaned.\n\n\"Oh, honey! Yes! More!\"\n\nDawn was really growing to a huge orgasm as I felt her energy.\n\n\"Ahhhh!! More!!\"\n\nI held Dawn's hips and jammed my cock into her harder. She moaned louder and louder.\n\n\"James!! Ahhhh!! Fuck me!! Come in me!!\" Dawn screamed.\n\nI kept thrusting into her as she cried out and screamed.\n\n\"Ahhhhhh!! I'm coming!! I'm coming!!\"\n\nI jammed into Dawn as she shook and pumped cum into her.\n\n\"Ohhhhhh...my...\"\n\nDawn stood quickly and turned around and grabbed my head, and kissed me hard.\n\n\"Ohhh...wow...\" came from Dawn.\n\n\"Different?\"\n\n\"Yes.\"\n\nWe finally got out and dried off.\n\n\"What time do they have to be at school?\" I asked.\n\n\"Sam has her biology class this morning and her anatomy class this afternoon. Amy has a class at 10:00 and another one after lunch.\"\n\nWhen we went back into the bedroom, Amy and Samantha were in a 69, getting each other off.\n\nWe headed down to the kitchen. After some coffee, I went back to work, spotting the prints. Samantha came down about 8:00. \n\n\"You and your sister looked hot this morning.\"\n\n\"We had to do something. You two fucking made us hot.\"\n\n\"More than normal?\"\n\n\"Yes. We both could feel Dawn getting off.\"\n\nSamantha stayed and watched for an hour or so.\n\n\"That is slow,\" she said.\n\n\"It is and tedious. That is why you don't want spots.\"\n\n\"How many more do you have to do?\"\n\n\"Ten more color ones and then the black and white ones. I have some extra prints for you to learn on.\"\n\n\"How do I start?\"\n\n\"Look at this with that magnifying glass and tell me what you see?\" I told Samantha as I headed her some color and black and white prints from some magazines I had pulled.\n\n\"Nothing.\"\n\n\"Look closer. Tell me what you see on the black and white ones?\"\n\nSamantha looked closely for a minute.\n\n\"It's not a solid color. It is a bunch of small dots.\"\n\n\"Now look at the color ones.\"\n\n\"The color is not a solid color either. It is made up of tiny dots of different colors.\"\n\n\"That's right. When you spot black and white or color, you don't paint with the tiny brush. You make a bunch of tiny spots. Just like the magazine prints.\"\n\n\"Why?\"\n\n\"You'll see.\"\n\nSamantha stayed, and I explained everything I was doing.\n\nI let her try spotting some black and white prints. She tried to paint in the tiny white spots on the prints.\"\n\n\"Hmmm.\"\n\n\"What's wrong?\" I asked.\n\n\"Looks like shit.\"\n\n\"Look at this one I just touched up.\"\n\nI had to point out where I had filled in a white spot. She looked with the magnifying glass.\"\n\n\"You filled it with dots.\"\n\n\"Yep. Make sense now?\"\n\n\"Yes.\"\n\n\"Same thing with color. But, you try the black and white first.\"\n\nShe worked for an hour as I explained things to her.\n\n\"Not bad,\" I said, looking at where she had been practicing.\n\n\"I need to head to school. I'll be back after 2:00.\"\n\n\"Okay. I hope I am finished with the color ones by then.\"\n\nSamantha left, and I went back to work.\n\nDawn came down later.\n\n\"You need to take a break. I have some salads.\"\n\n\"Okay.\"\n\nWe went back up to the kitchen.\n\n\"How many more do you have?\" Dawn asked.\n\n\"Five.\"\n\n\"I'm glad you can do that. I have tried. I don't have the eye for color you have,\" Dawn said.\n\n\"You can help me with the black and white ones.\"\n\n\"I can do those.\"\n\n\"I made some other big black and white prints of Ashley and Raven. I thought Rick could sell them too.\"\n\n\"I'm sure he can. They are not as revealing.\"\n\n\"I think I have one Bob can put up in his store.\"\n\nAfter we finished, Dawn went with me to the basement. I went back to work on the color prints while she worked on the black and white ones.\n\n\"Is this the one for Bob's store?\" Dawn asked as she held up a 16 x 20 black and white print of Ashley.\n\n\"I hope so.\"\n\n\"It's okay. It is the side of her body. You can barely see her nipple. I just finished it.\"\n\n\"I'll get it framed.\"\n\n\"I'll stamp our name on it in the gold foil.\"\n\nDawn and I worked until Amy and Samantha came down about 2:45. They were happy they could drive their cars again. I had finished the color prints and worked with Samantha as she tried her hand at spotting some color test prints. We worked on that until about 3:30. Samantha helped me put all the big prints into empty paper boxes.\n\n*****\n\nBrenda and Sherri pulled up after dinner, about 6:30. They were stopping by to pick up the prints and discuss the Grand Opening.\n\n\"We will get these prints mounted as soon as we can,\" Brenda said.\n\n\"Where are you on help?\" I asked Sherri and Brenda.\n\n\"I have hired four full-time ladies for the swimsuit area and am talking to about six more for part-time,\" Sherri said.\n\n\"Same here,\" Brenda told us.\n\n\"How have they reacted to wearing swimsuits and lingerie?\" Dawn asked.\n\n\"They all think it is hilarious, and they will do it. There will be some lingerie they can't wear,\" Brenda said.\n\n\"James, what are you going to do about guys coming in just to look?\" Sherri asked me.\n\n\"I have some security that will be helping us out.\"\n\n\"Who?\"\n\n\"I didn't have any trouble finding officers to work part-time!\" We all laughed.\n\n\"I'm not sure that will be enough,\" Dawn said.\n\n\"They will be at the elevators. No unaccompanied males under 18 will be allowed up to the second floor.\"\n\n\"Linda said the rest of the outlying stores would be open by the next weekend. Most will be open for the Grand Opening,\" Brenda told us.\n\n\"Good. Are you two ready?\"\n\n\"We are. The last of the training will be next week. We will be ready for the private sale that Friday prior to the fashion show. Then we are open for the Grand Opening on that Saturday and Sunday,\" Sherri said.\n\n\"Have all your staff working those days,\" I told them.\n\n\"We will finish putting all the merchandise in soon,\" Brenda said. \"What about the men's store?\"\n\n\"As soon as they tear down the stages from the fashion shows and move everything out, Walt will start moving everything in. He plans on being open no later than the next Monday.\"\n\n\"Wonderful. What is he doing for sales staff?\" Brenda asked.\n\n\"He has one man moving here from New York. He has hired three from some of the men's stores in town. I asked him to train some college students for part-time.\"\n\n\"Does he have any women?\"\n\n\"He hired one from a store in town. He went in to look around, and he said she did a great job of selling him, so he hired her on the spot. Where did you end up with commission levels for your sales staff?\" I asked.\n\n\"We kicked that around a lot,\" Brenda said. \"With the price points we are going for and the markup, we are going to try 10% on regular items. I think that the full-time staff will pull in at least $800 or more a week, plus their hourly. If things go great, it may go up.\"\n\n\"Is that okay for you, Sherri?\" I asked.\n\n\"It works for me. We stuck with the same commissions since the ladies will be crossing over between our areas. I think once Spring is here, the ladies will make great money on swimsuits.\"\n\n\"Do you have items that have bigger markups?\" I asked.\n\n\"Oh, yes. The designer swimsuits and the French lingerie are marked up a lot since we are the only place you can get it.\"\n\n\"Once we see how sales are going, we may raise the commission on those items since they are a bigger ticket,\" Brenda said.\n\n\"Perfect.\"\n\n\"Are you two going to work part-time?\" Sherri asked Samantha and Amy.\n\n\"Yes!\" Samantha exclaimed.\n\n\"You two may have to hold off on that,\" I said.\n\n\"Why?\"\n\n\"You know why?\"\n\n\"That is not fair, James,\" Dawn said.\n\n\"Have you thought about it, Dawn?\"\n\n\"There is nothing wrong with them working while they are pregnant.\"\n\n\"You two are pregnant!\" Sherri exclaimed.\n\n\"Not yet,\" Amy added.\n\n\"That would be hot!\" Brenda said. \"You two being a little pregnant...wow, we could sell to a completely different market! It would show women they can still be sexy! I love it!\"\n\n\"See!\" Samantha exclaimed.\n\n\"We will talk about it,\" I said.\n\n\"Sherri, we need to find some pregnant ladies!\" Brenda exclaimed.\n\nAfter that, I lost control of the conversations. I got up to get some more wine. Before it was over, they were discussing a complete line of lingerie and swimwear for pregnant women.\n\n\"I think we need another incentive for the salesladies to sale more,\" Samantha said.\n\n\"Like what?\" I asked.\n\n\"Maybe a prize for whoever sells the most,\" Amy added.\n\n\"Like a weekly sales contest?\" Sherri asked.\n\n\"Something bigger,\" Samantha said.\n\n\"Like what?\" I asked.\n\n\"Something really big. We want the store to be very successful the first year, right?\"\n\n\"Sure.\"\n\n\"We could have a year-long sales contest. Have a point system or something,\" Samantha suggested.\n\n\"For a year? What would be the prize?\" Brenda asked.\n\n\"Money!\" Amy said.\n\n\"How about a car?\" Samantha suggested.\n\n\"A car?\" Sherri asked.\n\n\"For whoever sells the most?\" Brenda wondered.\n\n\"We need to make it fair for the part-time people, too,\" Amy said.\n\n\"How about this. For every $1,000 they sell, they get a raffle ticket. That way, the part-time people will have a chance,\" I said.\n\n\"That would work!\" Sherri exclaimed now that she was excited about the idea.\n\n\"I like that,\" Dawn said. \"But what kind of car?\"\n\n\"Something nice,\" Amy said.\n\n\"How about a Corvette,\" Samantha said.\n\n\"Honey, a new base Corvette is at least a $50,000 car,\" I replied.\n\n\"So?\"\n\n\"That is a lot of money out of the profit,\" I told them.\n\n\"What if sis and I cover it out of our profit? We should make enough to do that, shouldn't we?\"\n\n\"Sure, if you want to do that,\" I said.\n\n\"Wow. That would motivate them,\" Sherri added.\n\n\"You know what we should do? Make a place in the showroom to park it all year,\" Brenda added.\n\n\"Good idea,\" Sherri replied.\n\n\"You two want to do that?\" I asked Samantha and Amy.\n\n\"I like the idea,\" Amy said.\n\n\"Okay. Can you find a place to park it?\" I asked.\n\n\"Will it go up the freight elevator?\" Brenda asked.\n\n\"It should,\" I told her.\n\n\"Then we can find a place.\"\n\n\"I have another idea,\" Dawn said. \"What if we have the same contest for customers? They get to put their name in a drawing for every $1,000 they spend all year.\"\n\n\"Great idea!\" Samantha exclaimed.\n\n\"If we do that, it should be for the entire store. Your areas, plus the women's wear and the men's wear,\" I said.\n\n\"That would work!\" Brenda exclaimed.\n\n\"I'll talk to Linda about it,\" I said.\n\n\"How would we track all of it?\" Amy questioned.\n\n\"The computer system Sam is putting in for the cash registers can track it,\" I told them.\n\n\"You know what?\" Sherri said. \"This would give us a reason to issue customers a store ID card. That would make tracking all of their purchases easier, plus target marketing. It code be bar-coded for easier checkout.\"\n\n\"Good idea,\" Dawn said.\n\nThey were all excited now and discussing the contest.\n\nBrenda and Sherri left about 9:30. I got all of them to bed by 10:30.\n\n\"Now that the doctor has said you all are ready what now?\" I asked.\n\n\"If we all want to get pregnant at the same time, you will need to find some condoms for that big cock of yours!\" Amy teased me.\n\n\"What is the plan?\" I asked.\n\n\"If we want Christmas babies, near March 20th,\" Dawn said.\n\n\"Can you get pregnant that quick after the pill?\" I asked.\n\n\"With my help, we can,\" Dawn said.\n\n\"One of your potions?\" I asked. \"Are Rachel and Linda shooting for Christmas too?\"\n\n\"Yes. You will be fucking all of us every day for a week!\" Dawn said, laughing.\n\n\"I can live with that!\"\n\n\"James, honey? Do they make condoms big enough for your cock?\" Samantha asked.\n\n\"No. We won't be able to have sex again until late March.\"\n\n\"Uhhh!\"\n\nDawn was giggling.\n\n\"What are you laughing at!\" Samantha said.\n\n\"They make them that big,\" Dawn said.\n\n\"You are mean!\" Samantha said, climbing on top of me and sitting on my chest.\n\nI reached up and rubbed Samantha's big tits. After a few minutes, she spread her pussy lips apart and slid up so I could lick her exposed flesh. While I was doing that, Amy straddled my cock and slid it into her, and sat.\n\n\"Dawn, if you have something for us to help us get pregnant quicker, do you have anything for James?\" Samantha asked.\n\n\"I don't want him pregnant,\" Dawn said.\n\n\"Not funny,\" Samantha said.\n\n\"I always have something for almost anything,\" Dawn said.\n\nI licked Samantha's clit as she watched. Amy began to work her pussy slowly on my cock. Dawn got up and straddled my stomach, facing Amy. The two of them kissed while Amy worked.\n\nI let them do what they wanted for a bit. Samantha came in squirting orgasm as I tongued her clit. When she stopped, she moved her pussy over my mouth and sat. I worked my tongue deep into her pussy as she looked at me.\n\n\"I love this,\" she said.\n\nSamantha grabbed her tits and closed her eyes as she felt my tongue inside of her. I watched her slowly rub her tits as I tongued her insides. After she and her sister came again, they all got off and laid down.\n\n\"I'll get my potions, as you call them, ready tomorrow,\" Dawn said.\n\n\"I'll have to get some condoms.\"\n\n\"You are not getting up early in the morning, are you?\" Samantha asked.\n\n\"No. I'm finished for now.\"\n\n\"Good.\"\n\n*****\n\nWhen the alarm went off Thursday morning, I looked, and Samantha was draped over me with her arm.\n\n\"Hey...time to get up,\" I said.\n\n\"Emmm...no...sex first,\" Samantha moaned.\n\nSamantha moved down and started sucking on my cock. I looked over at Dawn, and Amy was working her way between her legs.\n\nSamantha sucked my cock for a while as I watched her sister. When she climbed on top and slid my cock into her pussy I returned my attention to her. She worked her pussy slowly for a while, and then I started rubbing her clit. Dawn was thrusting her pussy up into Amy's mouth as she came.\n\n\"Dawn...everything feels so different now,\" Samantha said.\n\n\"I know. But it feels great, doesn't it.\"\n\n\"Yes. It feels wonderful. Does it feel different for you?\" Samantha asked me.\n\n\"I can feel the three of you so differently now. I don't have to work at feeling your energies.\"\n\n\"It is that way for me too,\" Samantha said. \"It's just...so fulfilling now...I feel everyone's love more now.\"\n\nSamantha closed her eyes and just slowly worked her pussy. I enjoyed watching her as she just slowly worked to please herself and me. Dawn traded places with Amy and was working on her pussy. Amy watched her sister and rubbed her tits while Dawn pleased her.\n\nAfter we were all satisfied, we headed down for breakfast. We cooked and sat and ate.\n\n\"We need to get ready,\" Amy said.\n\n\"I have to go to the library and do some research,\" Samantha said.\n\nThey headed upstairs while Dawn and I sat.\n\n\"Did the doctor have anything new to say about you getting pregnant?\"\n\n\"No. She said everything should be fine. Are you ready for this change?\"\n\n\"Yes, I just hope all of you are.\"\n\n\"It is going to work out fine.\"\n\nLater, Amy and Samantha came down to leave for school, and left together.\n\n\"How long are they going to keep that guy?\" Dawn asked.\n\n\"A while. Dan will let me know if he is scheduled to get out.\"\n\nDawn and I worked on cleaning up the house until noon. After we grabbed a quick snack, we ended up in the pool. I was standing in deep water while Dawn held on with her legs wrapped around me. Steam was coming off the water as we kissed.\n\n\"Talk to me about how you feel now?\" I asked.\n\n\"Different.\"\n\n\"What does that mean, honey?\"\n\n\"Things are just different now. Some is hard to explain, but my abilities to feel you and everyone is just so much stronger and clearer. When we make love now, it feels incredible. I even feel the girls more when you are making love to them. I hope you are feeling different also.\"\n\n\"I don't know if it is the three of you or me, but I feel each of you so differently now.\"\n\n\"How is it different?\"Dawn asked.\n\n\"It is hard to explain, but I just feel like each of you is more in touch with my body and feelings. It is just so much more intense now when I am with you.\"\n\n\"I know...intense is a good word.\"\n\nDawn held me tight for a few minutes, then she grabbed my cock and worked it into her pussy, and held me.\n\n\"Emmmm, this feels so good,\" she moaned.\n\n\"When will I need to start using condoms?\"\n\n\"Week after next, probably.\"\n\n\"That gives us some time.\"\n\nDawn and I held each other and made love for a long time before we got out of the pool.\n\nWhen Samantha and Amy got back, they went swimming until it was time for an early dinner. After we ate, they got ready to go to class while Dawn and I were sitting in the den naked.\n\n\"We will be back soon,\" Samantha said as they left.\n\n*****\n\nLori pulled in about 7:00, and I let her in.\n\n\"Well, you all look comfy!\" She teased me.\n\n\"We are. Take your clothes off, too,\" Dawn said.\n\n\"Is everything almost ready?\" I asked.\n\n\"Just about. I brought some early edits of the videos they shot for the commercials. I think you will like them,\" Lori said.\n\nShe pulled out a DVD, and I stuck it in the player and put it on the big TV.\n\nWe watched the video where they had staged executives getting in the town cars and riding in them. They had set up some other recordings of a couple going out on the town. All of them looked great. We watched some of the exterior shots of a wedding and a couple getting in the limo. They had a bunch of different takes of that.\n\n\"You will like these next ones,\" Lori said.\n\nThey were filming the bride and groom in the backseat of the limo. They were kissing and sipping champagne. They had a few different shots of that. The next shots were of them getting more aggressive in kissing. \n\nThe groom started pulling off the bride's dress and soon had her down to just some white lingerie.\n\n\"That is cute,\" Dawn said.\n\nThere was more of the groom laying her back on the seat and kissing her while she was just in the lingerie. Several shots of that.\n\nWe watched as he started pulling off her lingerie. They staged some shots of the two of them giggling and laughing as he got her naked. She pulled off the groom's clothes and more giggling and laughing. We watched a lot of staged hot scenes for a bit. Then we watched as he pulled her legs apart and worked his cock in her. They had a lot of video of this from different angles as he fucked her in the back seat of the limo.\n\n\"What do you think?\" Lori asked.\n\n\"That was more than we asked for,\" I said.\n\n\"I set that up,\" Lori said.\n\n\"I like it!\" Dawn said.\n\nWe laughed about it.\n\n\"I'm not sure where we can use it, but we will find a way,\" I said.\n\n\"The rest is on the party bus.\"\n\nWe watched a lot of staged footage of dancing and partying for a while. It was just a party with a bunch of college kids.\n\n\"I had them also shoot a bachelor party on the bus,\" Lori said when some more footage came up.\n\nIt was all young guys partying as two women worked the stripper poles in the bus. They staged a lot of this, but it was good.\n\nOne of the guys got up and was dancing with the stripper. I was surprised when the stripper started rubbing his crotch. I was more surprised when she pulled his pants open and down as she got on the floor and started sucking his cock. They shot video of everyone cheering her own as the other stripper gave a guy a lap dance in the background while she was naked.",
        "\"You think that will get us some bachelor parties!\" Lori said, laughing.\n\n\"As long as we are not providing the strippers!\" I exclaimed and laughed.\n\n\"I thought I could use this if they come in to reserve a party bus.\"\n\n\"None of women partying?\" Dawn asked.\n\n\"Not yet!\" Lori said and laughed.\n\nWe watched the rest of the videos and discussed them for a while. We knew we would have to take out the racy parts to put them on the internet. While I was talking to Lori, Dawn had started pulling Lori's clothes off until she was down to her lingerie.\n\n\"That's better,\" Dawn said.\n\n\"What else do we need to work on?\" I asked Lori.\n\n\"The website is almost ready. I want it up so we can go ahead and take reservations. I have some ideas for the grand opening Monday. What else can you think of I need to do?\" Lori asked.\n\n\"Let me think while you are fucking my cock.\"\n\nLori laughed but stood and took off the rest of her lingerie, then straddled my lap. She grabbed my cock and rubbed the end between her pussy lips until she was good and wet.\n\n\"I am getting used to this,\" she said as she slid down.\n\n\"Good,\" I told her.\n\n\"I don't know.\"\n\n\"Why?\" Dawn asked.\n\n\"I'm looking at a larger place to rent, and I want a female roommate.\"\n\n\"One you can sleep with?\" Dawn asked.\n\n\"Well...yes.\"\n\n\"That's okay. You can always bring her here unless she wouldn't be into James' big cock. And if she isn't, that's okay. We can please her,\" Dawn told her.\n\n\"I would have to ease into that, Dawn.\"\n\n\"That's okay.\"\n\nI was holding Lori as she rode my cock while she sat in my lap.\n\n\"Were the videos okay?\" Lori asked.\n\n\"They are great. I am not sure how we can use the sex scenes.\"\n\n\"We can figure it out,\" Lori said as she worked her pussy.\n\nLori kept working her pussy until she got faster and faster.\n\n\"Oh, fuck!! I'm coming!!\" Lori screamed.\n\nLori kept going until we both came.\n\n\"Emmm, that was good,\" Lori said.\n\n\"Yes, it was. I have got to get some video of us having sex in the back of a limo.\"\n\n\"Oh, I don't know about that, James.\"\n\n\"Why?\" I asked.\n\n\"I wouldn't want the drivers to see that.\"\n\n\"I wouldn't worry about it.\"\n\n\"James, I wouldn't want my employees to see me having sex with you.\"\n\nI rubbed Lori's tits for a few minutes, then she got up, and slid off my cock and got on the floor, and starting licking and kissing my cock. I watched her get my cock nice and hard again, then sucked on it for a long time as Dawn and I watched.\n\nI pumped her mouth full of cum then she got up and sat next to me on the sofa.\n\n\"I guess we are ready for the Grand Opening Monday,\" she said.\n\n\"I will be there with my camera gear for shots for the website.\"\n\n\"We have been pretty busy with customers. The website and the news we got is drawing them in.\"\n\n\"Great.\"\n\n\"What all do you have planned for Monday\" Dawn asked.\n\n\"Some drawings for a night on the town, free rides around town Monday, a few other things.\"\n\n\"Sounds good.\"\n\n\"Everything will be polished and shined before Monday.\"\n\n\"Just make sure everything is available for the store Grand Opening. Is everything else taken care of?\" I asked.\n\n\"Everything else is done. The only thing left for me to do is get the tags for all the vehicles.\"\n\n\"I have the name of who you need to see for the custom plates. Give her a call and set up a time to go see her. She will take care of everything and tell her Dr. Smith said he would be very appreciative if the plates can be expedited.\"\n\n\"Okay. Now, what about the store Grand Opening?\" Lori asked.\n\n\"There will be some media and a few guests coming in Wednesday the 11th and Thursday morning. Everyone will need to be available Thursday morning through Sunday evening to shuttle guests around town and from the airport, and anywhere else they want to go. All the out-of-town guests are staying in that new hotel across the parking lot. Everyone needs to be on their toes and acting professionally,\" I said.\n\n\"I just finished the employee handbook. It covers everything we talked about down to keeping the cars clean,\" Lori said. \"I'll pick them up from the printer in the morning.\"\n\n\"Make sure everyone understands the video cameras and how to operate them and approach the clients,\" I told her.\n\n\"That is what we are doing this weekend. Everyone is familiarizing themselves with all the vehicles and operations.\"\n\n\"Did you hire some help for you?\"\n\n\"Yes. I have four graduate students for part-time starting Saturday so I can get them trained. I am still looking for an assistant manager.\"\n\n\"Anything else?\" I asked her.\n\n\"I hope not.\"\n\n\"Come with me. We will get you cleaned up.\"\n\nI took Lori to one of the showers, and we got cleaned up. She put her clothes on and headed out. \n\n\"One more project down,\" Dawn said.\n\n*****\n\nDawn and I were in my study about 8:45 when we heard Amy and Samantha pull up after their Krav Maga class. We went to the front door and waited for them to come in.\n\n\"Did you have a good class?\" Dawn asked Samantha and Amy.\n\n\"Yes, we did! We learned some new moves!\" Samantha exclaimed.\n\nSamantha moved to stand in front of me.\n\n\"Push me...\"\n\nShe no sooner had the words out of her mouth than I pushed her hard on her shoulders. She fell back on her butt.\n\n\"Hey! I wasn't ready!\" She exclaimed.\n\n\"What!!?\" I yelled.\n\n\"I wasn't...\"\n\n\"Get up!!\" I yelled at her.\n\nSamantha jumped up and took a stance, and put her hands up.\n\n\"Better,\" I told her. \"What did you want to show me?\"\n\n\"Try and push me.\"\n\nI reached out and started to push Samantha. She slapped my hands down and stepped to the side like she was supposed to do.\n\n\"Very good,\" I told her. \"Again.\"\n\nShe turned to me, and I tried to push her again. She did a great job of slapping my hands to her side as she slid away.\n\n\"Very good. Again.\"\n\nI pushed Samantha again. This time when she slapped my hands away, and before she could sidestep me, I brought an arm back up and hooked her under her chin with my hand, and pushed her back hard. I turned and grabbed her before she hit the floor.\n\n\"Hey...\" Samantha said as I stood her up.\n\n\"You haven't learned that part yet, huh?\"\n\n\"Nooo. Just stepping clear.\"\n\n\"Okay, let me show you the rest of the move. Push me.\"\n\nSamantha pushed me, and I slapped her hands down, and sidestepped her and brought up a hand and hooked her chin, and stopped.\n\n\"This is what you do next. While you are stepping away, bring a hand up and hook the face at the chin and slam them down on their back hard.\"\n\nI slowly went through the rest of the motion and bent Samantha back, and stopped.\n\n\"Like that.\"\n\nI went through the motion several times with Samantha as Amy and Dawn watched.\n\n\"Now, when I push you, you try it,\" I said.\n\n\"Your too tall for me to do that,\" Samantha said.\n\n\"Dawn, your turn,\" I said.\n\nDawn stepped in front of me, and I attempted to push her. I quickly found myself lying on the floor on my back.\n\n\"Dang!\" Came from Samantha and Amy.\n\nI got up.\n\n\"You two are almost the same height and size. Don't ever say you can't do something because your opponent is bigger than you. You will get hurt or killed with that attitude, Samantha. I'll walk you through it some more.\"\n\nI worked with Samantha a few more minutes while Dawn demonstrated the move to Amy.\n\n\"Now, you do the whole thing,\" I said.\n\nI pushed her, and she did what I had shown her. She sidestepped, brought her arm and hand up and grabbed my chin, and pushed into me as she took me down.\n\n\"That's it.\"\n\nDawn and I worked with Amy and Samantha awhile, teaching them what they would learn the next time.\n\n\"I have got to shower,\" Samantha said.\n\nI followed her up to her bedroom.\n\n\"Sit a minute,\" I told her.\n\nWe sat on the edge of the bed.\n\n\"I know I pushed you hard and knocked you on your ass, but we have talked about you saying you weren't ready.\"\n\n\"I now. I just didn't expect you to push that hard.\"\n\n\"I know. I just wanted to catch you off guard. You did a great job on that move. You are learning well. How is your sister doing?\"\n\n\"She is doing good. She doesn't work as hard as I do on things.\"\n\n\"Dawn and I will need to make sure you both work on the important fundamentals. We want you two to get better before you can't practice hard. What else did you learn tonight?\"\n\n\"We worked more on escape moves and that new thing.\"\n\n\"Good. Always remember, you have to escape first, then defend.\"\n\n\"What do you do once you have someone on the ground like you showed me?\"\n\n\"What would be a good move?\" I asked.\n\n\"Run.\"\n\n\"That would be a good move. What if there were more than one person that may come after you. What if two guys came up to you, and one of them pushed you?\"\n\nShe thought a moment.\n\n\"Back up and be ready to defend myself.\"\n\n\"Okay, but if you don't finish the first guy, the two of them may come after you at the same time then.\"\n\nShe thought a moment.\n\n\"I guess I need to make sure the first guy doesn't get back up...but I haven't learned enough to do that yet.\"\n\n\"What is the easiest and most effective thing you can do once you have someone on the ground. Something you could do quickly and either run from the other attacker or stand and fight?\"\n\n\"Dawn would straddle him and beat him.\"\n\n\"Not with two attackers. You don't want to go to the ground ever unless you are in control. Keep thinking.\"\n\n\"I guess I could kick him in the head and turn and run.\"\n\n\"That is one idea. Fuck him up, so his friend has to stay with him.\"\n\n\"What should I do?\" Samantha asked.\n\n\"You saw how hard Dawn pushed me down.\"\n\n\"Yes.\"\n\n\"Situational awareness.\"\n\n\"What?\"\n\n\"If you are standing on concrete or another hard surface, you will be in control, and you can slam someone down hard onto their back and bounce their head off the concrete. How would that help you?\"\n\n\"He wouldn't get up if he hit hard enough.\"\n\n\"No, he wouldn't. Once you learn to perform that move flawlessly, you will see just how hard you can slam someone to the ground. It is all one move. Sweep, grab, and push hard as you step through the attacker. You don't need to stop to do it.\"\n\n\"What if I am on grass?\"\n\n\"Put them down as hard as you can, then quickly kick him in the side of the head as hard as you can, or stomp the throat and move.\"\n\nSamantha scrunched up her nose.\n\n\"Problem?\" I asked.\n\n\"Just thinking about kicking someone that hard in the head. It could kill them.\"\n\n\"Yes, it could. Do you have a problem with that?\" I asked.\n\n\"I just haven't thought about it much.\"\n\n\"What have Dan and I and Dawn told you about that?\"\n\n\"That some of the moves we learn could kill someone.\"\n\n\"Yes, but the first rule we taught you is that there are no fair fights on the street. Right?\"\n\n\"Yes. Once I make a decision that I need to defend myself, there are no rules.\"\n\n\"Correct. I'm sure Dan taught you another part to what you learned tonight. What was it?\"\n\n\"He told us that once we step to the side, put our hands up like we are telling the person to stop and yell, \"Stop, I don't want to fight you!\" \"\n\n\"And why do you do that?\"\n\n\"Because it may stop the fight. Especially if a woman yells that at a guy.\"\n\n\"What other reason?\"\n\n\"So if there are other people standing around, they will hear me warn them.\"\n\n\"And why do you need to do that?\" I asked.\n\n\"So they hear me warn someone...in case I have to defend myself and hurt or kill them.\"\n\n\"Right. You can be a badass and just go ahead, and body slam a guy and fuck him up. Then he and his friend can say they were just playing with you, right?\"\n\n\"Yes.\"\n\n\"Most attackers will laugh off you telling them to stop because you don't want to fight and push you again...\"\n\n\"Then I fuck him up!\"\n\n\"Yes. But you do it quickly and don't punish him. Do what you must do to stop the attack and escape. With two attackers, you are probably going to make the second guy think twice about messing you while his buddy is on the ground. But there is one more thing to know that we will teach you with this move and others if there are multiple attackers.\"\n\n\"What is that?\"\n\n\"When you push off and hold your hands up to say stop and yell...it may piss the guy off, and his buddy, and they may come after you hard.\"\n\n\"Oh...\"\n\n\"A lot of it is back to situational awareness. How did the guy come off? What did the two guys act like? You have to quickly assess how you think they will respond. You can easily just put the guy on his back and then jump back and put your hands up and yell. If things turn bad quickly, you will be ready, and one guy will already be on the ground.\"\n\n\"So, if I put the first guy on the ground, not hard enough to knock him out, and his buddy comes after me...then what?\"\n\n\"Fuck his buddy up fast. You can use the same move if he is coming at you, but body slam him and make sure he doesn't get back up.\"\n\n\"We are still learning the release moves and not the follow-up.\"\n\n\"That's good. You have to get the first part right. Dawn and I can work with you. You need to shower.\"\n\n\"Shower with me.\"\n\n\"Next time.\"\n\nI left her to shower and went back downstairs. Dawn was sitting in the den. I went to my study and called Dan.\n\n\"Hey, Dan. Are you home yet?\"\n\n\"Just came in. How are you, James?\"\n\n\"Good. Samantha wanted to show me what she learned tonight.\"\n\n\"Good. What did you do?\"\n\n\"Knocked her on her ass the first time.\"\n\nWe laughed.\n\n\"I showed her the rest of that move.\"\n\n\"Good.\"\n\n\"Dan, I wanted to ask how Samantha and Amy are doing?\"\n\n\"If you and Dawn would come to class, you would see! Amy is doing as well as anybody, but Samantha amazes me. She catches on quickly and is not afraid to try something new. She is very athletic.\"\n\n\"She is, and she is very smart. Did she tell you she was going to go to med school?\"\n\n\"No. Good for her!\"\n\n\"She has always wanted to be a doctor, and we made it possible for her.\n\n\"That's great, James!\"\n\n\"One more thing. Samantha, Amy, and Dawn are all planning on getting pregnant.\"\n\n\"Really?\"\n\n\"It was a surprise for me too. They hope to get pregnant in March. Once they are, they will need to be careful training.\"\n\n\"I guess they will.\"\n\n\"Between now and then, turn up the heat with Samantha.\"\n\n\"Okay. Can you and Dawn come?\"\n\n\"We will start coming.\"\n\n\"Great.\"\n\n\"I'll talk to you later, Dan.\"\n\n\"Okay. Later.\"\n\n\"Who were you talking to?\" Dawn asked when I walked out.\n\n\"Dan. I wanted to ask him how Amy and Samantha were doing.\"\n\n\"What did he say?\"\n\n\"About what he expected,\" I told Dawn as I sat next to her.\n\n\"He wants us to come to classes again,\" I told Dawn.\n\n\"We should. I need the workout.\"\n\n\"We need to find time to work with Amy and Samantha before they get too pregnant. I would like to see them being able to use the fundamentals.\"\n\n\"We can go more. I do need to get in better shape before I get pregnant,\" Dawn said.\n\n\"I hope you are not expecting me to get in shape!\" I teased Dawn.\n\n\"We both need to get back in shape.\"\n\nWe went upstairs later and found Amy and Samantha already in bed. Dawn and I took our clothes off and got in bed with them.\n\n\"You two tired?\" Dawn asked.\n\n\"Yes,\" Amy replied.\n\nWe turned off the lights and went to sleep.\n\n*****\n\nAfter we finished eating Friday morning, I headed downtown to see Linda. I parked under her building and went up to her office. I had to wait a few minutes.\n\n\"Hey, come on in,\" Linda said from the door.\n\nI went in and sat in one of her big chairs, and she sat across from me on her sofa.\n\n\"You look tired,\" she said.\n\n\"I am.\"\n\nI went over everything I had done the last few weeks.\n\n\"My two Vice Presidents came up with a sales incentive for everyone,\" I said.\n\n\"What?\"\n\n\"Samantha wants to give a car away. We discussed it and decided that each sales lady would get a raffle ticket for each $1,000 they sell for the first year. At the end of the year, they want to have a drawing for a Corvette.\"\n\n\"That should motivate them.\"\n\n\"Amy and Samantha are paying for the car out of their profit. They then decided the contest should be for all areas of the store, including yours and the men's wear.\"\n\n\"Hmmmm. Tell them to keep it for the lingerie and swimsuit area. I'll come up with something similar for the women's wear and men's wear.\"\n\n\"Okay. Think about a similar contest for customers.\"\n\n\"This may get expensive,\" Linda said.\n\n\"It may, but it could get things rolling quickly.\"\n\n\"If we do this for customers, we should include all the stores in the strip. How can we track it easily?\"\n\n\"Sam is putting in the sales system for cash registers that can track customer information in all the stores. Sherri thought that this would give us a reason to issue an ID card to all customers to use when they checkout. That would let us target marketing. That way, they could use the same ID card for all stores because we could tie all them together on one server,\" I explained.\n\n\"That is a great idea. That information would be worth a lot to us,\" Linda said.\n\n\"My friend on the police force called to tell me they are keeping your stalker in jail until his trial.\"\n\n\"I know.\"\n\n\"You know?\"\n\n\"I know the judge they brought him in front of,\" Linda said.\n\n\"Oh?\"\n\n\"I explained the situation to him.\"\n\n\"And he did you a favor?\"\n\n\"That is all you need to know about it,\" Linda said.\n\n\"Okay.\"\n\n\"Well, other good news. I closed on the land next to you.\"\n\n\"Great!\"\n\n\"I even have some drawings of a house for you to look at.\"\n\n\"Even better.\"\n\n\"Are you ready for the store to open?\" Linda asked.\n\n\"Yes, I am.\"\n\n\"I told you I wanted you to be the exclusive photographer during the fashion show.\"\n\n\"You did.\"\n\n\"Not much I can do about cell phones, but you will be taking all the pictures at the end of the runway.\"\n\n\"What will they be used for?\"\n\n\"Magazines, press releases. Things like that. I guess you will shoot 200 or 300 shots each night.\"\n\n\"I'll have to get some help.\"\n\n\"For what?\"\n\n\"Loading film backs. I have just the right person to help.\"\n\n\"Each model will stop at the end of the runway and take a couple of posses while you shoot. They will model about 100 different outfits total each night. About four per model.\"\n\n\"You're right. That will be 200 or 300 hundred shots a night. I'll set up two big umbrella strobes at the end.\"\n\n\"Just have plenty of film...and help if you need it.\"\n\n\"Are you going to model?\" I asked.\n\n\"Maybe.\"\n\n\"I'll have to be ready for that!\"\n\n\"You will get your photos in some big-name magazines, James.\"\n\n\"I will be ready.\"\n\n\"They will be doing a dress rehearsal of the fashion show the Wednesday before the opening,\" Linda said.\n\n\"Good. I'll be set up to practice.\"\n\n\"How long will it take you to get the film processed and proofs made?\"\n\n\"That much film, two or three days. I'll talk to the processors and see.\"\n\n\"Good. We will need to look at all of them and make some prints quickly.\"\n\n\"I'll have the processors work that weekend then. I can make prints Monday if you are available.\"\n\n\"I will be available. You want to see my house?\"\n\n\"Yes!\"\n\nWe went to her desk, and she unrolled some blueprints. The house was not huge, but it had a lot of room. The outside was a modern design and looked great.\n\n\"I haven't finalized it yet, but that is what it will look like.\"\n\n\"I like it.\"\n\n\"I hope to have it started by March.\"\n\n\"You have something else to do in March,\" I said.\n\n\"I know! Are you ready?\"\n\n\"Dawn says all of you will be ready.\"\n\n\"I will be...but I am not waiting until then for sex!\"\n\n\"Good! How long will it take to build your house?\"\n\n\"I am going to be paying a lot of people to work a lot of hours. I hope before Christmas.\"\n\nLinda was leaning over her desk, looking at the blueprints. I slid my hand up inside her skirt and between her legs until I was rubbing her pussy.\n\n\"James, you need to stop.\"\n\n\"I haven't fucked you in your office in a while.\"",
        "\"And you are not going to today. I have an afternoon meeting.\"\n\nI worked my fingers inside of her panties and kept rubbing her pussy.\n\n\"You know what that does to me,\" she moaned.\n\n\"Are you sure I can't please you this morning?\"\n\n\"You are terrible.\"\n\nLinda stood, and I kissed her for a few minutes.\n\n\"Stop a minute,\" she said.\n\nI pulled my fingers out of her pussy and held them up to her mouth. She opened it, and I slid them in, and she sucked on them for a minute.\n\n\"Will you make it quick?\" She asked.\n\n\"Of course.\"\n\nLinda got up and walked to her office door and opened it.\n\n\"Hold all my calls,\" she said and closed the door. She locked it and walked back to the sofa.\n\nWhile she was standing in front of me, I unzipped her skirt and let it fall to the floor.\n\n\"Oh, I like this,\" I said.\n\nShe was wearing black stockings and a black garter belt. I unsnapped the stockings from her garter and pulled it down, then pulled her thong off. I pulled her to me and kissed the top of her pussy.\n\n\"Emmmmm. That makes me so hot.\"\n\n\"I know.\"\n\nI kept kissing at the top of her slit then started licking her.\n\n\"Ohhhh...James.\"\n\n\"Linda? Does Rachel please you enough?\"\n\n\"Of course...you...you just do things to me.\"\n\n\"When I can.\"\n\nLinda got on her knees in front of me and started pulling my pants open. She got my belt open and unzipped my pants. When she pulled on them and I lifted my ass off the sofa. She pulled everything down and off after I kicked my shoes off. I leaned over and kissed her again, then she leaned down and slid her mouth over the end of my cock.\n\nShe worked her mouth on my cock until it was good and wet.\n\n\"That's good enough,\" she said and stood.\n\nI helped Linda straddle my legs. She grabbed my cock and held it up as she slid her pussy over the end.\n\n\"Make it quick,\" she said as she slowly slid down.\n\n\"That is up to how hard you work.\"\n\nLinda settled her weight on me and then kissed me for a minute before she started working her pussy slowly.\n\n\"We will be here all day like that, Linda.\" She smiled and kept working her pussy nice and slow.\n\n\"Linda, we finally got the fax from Spain...\" I heard Patricia say as she came in through her side door.\n\n\"Ohh.\"\n\n\"Hi, Patricia,\" I said.\n\n\"Hey, James.\"\n\n\"Have a seat,\" Linda told her.\n\nPatricia walked over and sat next to me on the sofa.\n\n\"What did they say?\" Linda asked as she worked her pussy.\n\n\"They want 350 million,\" Patricia said.\n\n\"I told them 335, and that was it.\"\n\n\"I'll let them know.\"\n\n\"Patricia, can you join us?\" I asked.\n\n\"I need to send this fax back,\" she said with a big smile.\n\n\"You can do that later,\" Linda replied.\n\n\"In that case...\"\n\nPatricia stood and unzipped her skirt and let it fall to the floor.\n\n\"Do all of you get together and wear the same thing?\" I asked as I looked at Patricia's stocking-clad legs.\n\n\"No, we just dress sexy,\" Linda said.\n\nPatricia pulled her panties off and stepped on the sofa, and stood. She placed one leg on the other side of my head and lowered her pussy down to my mouth as I tilted my head back. I licked for a minute until she pushed her pussy into my mouth while I worked my tongue into her.\n\n\"James, you will be proud of Patricia. Rachel and I went to her house for dinner last weekend, and we fucked her husband.\"\n\n\"And Gregg was very happy!\" Patricia said and giggled.\n\n\"Now, we just have to get Gregg to let some other men fuck her,\" Linda said.\n\n\"You know what, Linda? Gregg and I talked about it again last night. I think he will let me do it,\" Patricia said.\n\n\"Oh, really?\"\n\n\"Yes. I talked to him about it while I was riding him last night, and he got very horny. I kept talking to him and asked if he would like to watch another guy fuck me.\"\n\n\"What did he say?\"\n\n\"He said he would love to watch, but with his job, it could be a big problem.\"\n\n\"Did you tell him he got to fuck other women too?\" Linda asked.\n\n\"Yes. After you two fucked him...he will probably let me be fucked just so he can get some more pussy!\"\n\nI felt the two of them laugh.\n\n\"You should tell him that James has already fucked you.\"\n\n\"I better not.\"\n\n\"He sure fucked me hard while he watched you and Rachel doing each other,\" Linda said.\n\n\"Oh, Linda. You were one of his biggest fantasies.\"\n\n\"If he wasn't worried about some guy that fucked you causing problems with his job, you think he would go for it?\" Linda asked.\n\n\"Well, we were up late last night talking about it. He said it would be hot watching. He must have liked the idea because he fucked me again for about an hour.\"\n\n\"Patricia, I think we can solve that problem,\" Linda said.\n\n\"How?\"\n\n\"If you two come to one of James' fuck parties, there wouldn't be a problem with any of the people talking.\"\n\n\"You mean one of the parties where you got fucked a bunch of times?\" Patricia asked.\n\n\"Yes.\"\n\n\"Oh, I don't know if he would go for me being fucked a bunch of times.\"\n\n\"I bet he would if you told him there would be a lot of hot women there.\"\n\n\"How many people are you talking about?\"\n\n\"Maybe a dozen couples,\" Linda said as she worked her pussy faster.\n\n\"Oh, that would be so fucking hot! But, that may be too many for us.\"\n\n\"I'll let you take home some pictures of James' three wives. That should encourage him.\"\n\n\"Just don't give him any ideas about us getting more wives!\" They both laughed.\n\nI got Patricia off while Linda worked her pussy hard.\n\n\"Emmm, I still wish Gregg ate pussy like you do, James,\" Patricia said as she got off my mouth.\n\n\"My wives can teach him if he will let them,\" I told her.\n\n\"We would have to come over more often for them to teach him!\" Patricia exclaimed.\n\n\"That would be okay,\" I told her.\n\nShe sat and watched Linda working her pussy.\n\n\"Ohhhhhhh...I'm coming! James! Come in me, please!\"\n\nLinda began to jerk as she worked her pussy.\n\n\"Ahhhhhhh!\" She exclaimed and started gushing.\n\nI thrust up into her and filled her pussy full of cum.\n\n\"Emmmmmmm,\" came from Linda as she held my head against her breasts. \"Oh, that felt great.\"\n\nShe leaned back and then kissed me for a minute. Patricia was slipping her clothes back on as I held Linda.\n\n\"I better get this fax back to them,\" Patricia said as she walked out, buttoning her top.\n\n\"I guess that is it for sex without protection,\" Linda said.\n\n\"Not just yet,\" I said. \n\n\"What can we do for Patricia?\" Linda asked.\n\n\"I can set up a small party.\"\n\n\"Maybe, but I would like to see Patricia and Gregg have some fun.\"\n\n\"Maybe I can get something together quickly. Will you come?\"\n\n\"How many people?\"\n\n\"Let me see what I can do. At least four or five couples.\"\n\n\"That would be perfect for Patricia.\"\n\n\"So, you will come if I can set it up?\" I asked.\n\n\"We can come.\"\n\n\"Find out if Gregg and Patricia will come first.\"\n\n\"I'll let Pat take home the naked picture of your ladies.\"\n\nLinda stood and slid her pussy off my cock.\n\n\"You can tell Dawn and the girls that Gregg has a nice size cock,\" Linda said.\n\nI watched Linda walk to her private bathroom off her office while I put my pants back on. She came back out and sat next to me and put her garter and panties back on.\n\n\"Did you enjoy fucking Gregg?\" I asked.\n\n\"It was a lot of fun. Rachel had a good time fucking him too.\"\n\nLinda put her skirt back on and stood and fixed her clothes.\n\n\"We need to do this more often,\" I told her.\n\n\"James...once I live next to you, what will we do?\"\n\n\"What do you mean?\"\n\n\"You know how much I enjoy you making love to me. Being next door, what will we do?\"\n\n\"You can come over anytime. You know that.\"\n\n\"I'll have to talk to Dawn, and I have to think about Rachel.\"\n\n\"Linda, don't worry about it. You two are part of our family.\"\n\n\"I'll have to talk to Dawn.\"\n\n\"Okay. I need to go. I have to stop and pick up some posters and prints at the frame store. Oh, Dawn said you and Rachel need to come by tonight,\" I told Linda.\n\n\"She must have our stuff ready to help us get pregnant.\"\n\n\"I guess.\"\n\n\"We'll be there.\"\n\n\"Listen, are you and Rachel going to try and take more self-defense classes?\"\n\n\"I don't think we can work evenings into our schedules.\"\n\n\"What about Saturdays?\"\n\n\"I don't know if I can spend a day doing that, James.\"\n\n\"Well, Dawn and I are going to start going back again. Dawn said she needs to get in shape if she is going to get pregnant.\"\n\n\"Get in shape? Damn, she has a rock-hard body now.\"\n\n\"I don't guess you need to get in shape...\"\n\n\"James...\"\n\n\"I mean, you are not as old as Dawn...\"\n\n\"James, watch it...\"\n\n\"You have Rachel to defend you...\"\n\n\"Enough, James. We will try and work in Saturdays.\"\n\n\"Good.\"\n\nI kissed Linda and left.\n\n*****\n\nI stopped at the frame store to pick up a stack of newly framed prints.\n\n\"Dr. Smith, did you make these?\" The lady we worked with asked.\n\n\"Yes. Dawn and I have started a lingerie photo business as a hobby.\"\n\n\"I would like to hang one up in the store.\"\n\n\"I will make you one. If anyone asked about them, tell them it is $10,000 for the photoshoot.\"\n\n\"Damn!\"\n\nI smiled at her.\n\n\"Be selective in who you tell. I'll also pay you a $1,000 referral fee.\"\n\n\"I'll remember that!\"\n\nI paid and loaded them in the Escalade. While I was sitting in the parking lot, I called Rachel.\n\n\"Hey, James. What's up?\"\n\n\"I left your wife a little bit ago. Where were you?\"\n\n\"Oh?\n\n\"I can call her that, can't I?\"\n\n\"Sure. I have been out of the office this morning.\"\n\n\"We had a good time.\"\n\n\"And I missed it?\" Rachel asked.\n\n\"Yes, you did. I'll make it up to you.\"\n\n\"You better.\"\n\n\"She told me about you two doing Gregg.\"\n\n\"Oh, we had a great time!\"\n\n\"I asked Linda if you two would come to a party.\"\n\n\"What did Linda say?\"\n\n\"She would ask you. I want the two of you to come next Friday night and stay until Sunday. Linda is going to try and get Gregg and Patricia to come.\"\n\n\"No way!\"\n\n\"I think Linda has Patricia talked into it if she can get Gregg to agree. After what Patricia told me, I think she can get him to come,\" I told her.\n\n\"I hope they will come,\" Rachel replied.\n\n\"She said he wanted to watch some guy fuck her.\"\n\n\"He wants to fuck her while she sucks other guy's cocks,\" Rachel said.\n\n\"I know. I think Dawn wants to do something like that too.\"\n\n\"I wouldn't mind giving it a try,\" Rachel said and laughed.\n\n\"You help Linda work on Pat and Gregg.\"\n\n\"I'll do better than that. I'll call Gregg and tell him how much fun I have!\"\n\n\"Great!\"\n\n\"When?\"\n\n\"How about next weekend?\" I asked.\n\n\"Okay.\"\n\n\"Plan on coming about 6:00 next Friday. I will cook bar-b-cue.\"\n\n\"Great. I will make sure she leaves on time.\"\n\n\"I'm counting on you to get Patricia and Gregg to come.\"\n\n\"I will do it!\"\n\n\"You two are coming by the house tonight. Dawn has something for you.\"\n\n\"Okay.\"\n\n\"I have something else I want you and Linda to do.\"\n\n\"What?\"\n\n\"I am going to ask Linda to come to the Grand Opening of our strip club Sunday.\"\n\n\"She won't go.\"\n\n\"Maybe she will if you talk her into it.\"\n\n\"I'll see.\"\n\n\"Bye.\"\n\n\"Bye, James.\"\n\nI started the SUV and pulled out. Before I got to the interstate, I decided to run by the bank and see Ian.\n\nI parked under the bank just before noon and hoped I would catch him eating lunch. I got on the elevator and went up to his floor.\n\n\"Hi, is Ian in his office?\" I asked his secretary.\n\n\"Yes.\"\n\n\"I need to talk to him a minute. Tell him it is Dr. Smith.\"\n\nShe called him.\n\n\"Go on in.\"\n\nI opened his door and walked in.\n\n\"Hey, Dr. Smith!\" He said as he jammed his cock into his wife while she lay across his desk on her back.\n\n\"Hey, Dr. Smith!\" Sondra said.\n\n\"I didn't mean to interrupt.\"\n\n\"That's okay,\" Sondra said.\n\n\"What can I do for you?\" Ian asked.\n\n\"I was wondering if you two would like to come to a party next weekend.\"\n\n\"Is this one of your orgy parties!\" Sondra asked and laughed.\n\n\"It will be if you two will come.\"\n\n\"Sounds like fun!\"\n\n\"Can you two be there by 6:00 next Friday and stay until Sunday?\"\n\n\"Do we get to fuck all weekend?\" Sondra asked.\n\n\"I sure hope so,\" I told her.\n\n\"We'll be there!\" She replied.\n\n\"I need to run,\" I said.\n\n\"You want to stay and fuck Sondra?\"\n\n\"I'll make up for it next weekend.\"\n\n\"You better!\" Sondra exclaimed.\n\n\"Hey, James. Can we get several guys to do Sondra at the same time?\" Ian asked.\n\n\"I'm sure we can.\"\n\n\"Great!\" Sondra yelled as I went out the door.\n\nI laughed all the way to the elevator. I went down and got in the SUV. I had one more couple to invite. I called Joseph, my broker. His secretary put me through. \n\n\"Hey, Dr. Smith!\"\n\n\"Hey, Joseph. How are things going?\"\n\n\"Housing market is turning to shit!\"\n\n\"That's good for us, right?\"\n\n\"You know it is! We have already made a ton of money. Two mortgage companies we went short on have gone bankrupt.\"\n\n\"What are you and Pam doing next weekend?\"\n\n\"Fucking all weekend, probably!\"\n\n\"That was what I had in mind.\"\n\n\"What do you mean? You and the wife want to come over?\"\n\n\"Wives, remember.\"\n\n\"Oh, yes.\"\n\n\"We thought we would have some people over and fuck all weekend at my house.\"\n\n\"Sounds great!\"\n\n\"Would Pam like that?\n\n\"Oh, yes.\"\n\n\"Can you two be there about 6:00 and stay until Sunday?\"\n\n\"Sure!\"\n\n\"Great!\"\n\n\"Can I bring my secretary?\"\n\n\"Of course. Bring Kelly. Did you two get anywhere with her husband?\"\n\n\"Oh, yes,\" Joseph said. \"He has been fucking Pam for a while.\"\n\n\"Would he like to come?\"\n\n\"I'm sure he would!\" Ian exclaimed.\n\n\"Well, bring the two of them then. How many people will be there?\" Joeseph asked.\n\n\"About a dozen or so. Is that enough for you and Pamela?\"\n\n\"Oh, yes!\"\n\n\"I'm making bar-b-cue for Friday night. Be there about 6:00.\"\n\n\"Okay! I'll double-check with Pam.\"\n\n\"If she says no, call me.\"\n\n\"She won't!\"\n\nI hung up and headed to the printer. I stopped and loaded up all the posters of Ashley and Raven and headed to the house.\n\nI was carrying some of the framed prints into the house.\n\n\"You need help?\" Dawn asked.\n\n\"Yes.\"\n\nDawn and I unloaded all the prints and looked them over.\n\n\"Bob will like this one,\" I said.\n\n\"This is not too risqu\u00e9 for his store?\"\n\n\"He said no. Where are the girls?\" I asked.\n\n\"They have gone to the grocery store for me.\"\n\nI sat at the bar while Dawn worked in the kitchen.\n\n\"Are you caught up now?\" Dawn asked as she stood on the other side of the bar.\n\n\"Almost.\"\n\n\"You have a few days to take a break.\"\n\n\"I hope so.\"\n\n\"Did you tell Linda and Rachel to come by tonight?\"\n\n\"Yes.\"\n\n\"Good. I need to go make some special tea to get us ready for getting pregnant.\"\n\n\"Make it strong!\" I said and laughed.\n\n\"It will be strong enough.\"\n\n\"I talked to Ian and Joseph. They are coming to the party. Linda said she and Rachel will come.\"\n\n\"Great.\"\n\n\"Linda and Rachel did Patricia's husband. I asked Patricia if she and her husband would come.\"\n\n\"What did she say?\"\n\n\"She said she would think about it. Rachel is going to work on him.\"\n\n\"I hope they come. I need to get to work,\" Dawn said.\n\nDawn headed upstairs while I fixed myself a snack.\n\n*****\n\nI was sorting out the new prints later when Samantha and Amy came in. They had some bags of groceries.\n\n\"Need help?\" I asked.\n\n\"Yes.\"\n\nI went out and helped them carry all the bags into the kitchen. They had Dawn's Jag full.\n\n\"You need to buy a truck,\" Samantha said as we unloaded.\n\n\"I'm glad we can go out now,\" Amy said.\n\n\"We will need to keep tabs on the guy,\" I told her as they put groceries away.\n\n\"I hope they keep him in jail,\" Samantha said.\n\n\"I think I have Linda and Rachel talked into coming to a party next weekend.\"\n\n\"Great!\"\n\n\"They are going to try and talk Patricia and Gregg into coming.\"\n\n\"Oh, good. A new guy!\" Samantha said and giggled.\n\n\"Ian and his wife are coming, and Joeseph and Pamela.\"\n\n\"Even better!\" Samatha said.\n\n\"Tramp!\" Amy teased her.\n\n\"Linda and Rachel will be here later for their stuff,\" I said. \"See if we can talk her and Rachel into joining us at the club this Sunday.\"\n\n\"She won't go,\" Amy said.\n\n\"That is why we have to talk her into it.\"\n\n*****\n\nI was helping Samantha with dinner when Linda buzzed through the gate. Amy went to the door and waited on them.\n\n\"Hey, you two,\" Dawn said, coming down the stairs.\n\n\"We stopped by to pick up your stuff,\" Linda said.\n\n\"I have it right here.\"\n\nDawn came down the stairs and handed Linda a bag. She spent about 15 minutes explaining to them how to make the tea from what she had prepared.\n\n\"Morning and evening,\" Dawn said as she wrapped up.\n\n\"When do we start? Rachel asked.\n\n\"Tonight. Are you two staying for dinner?\"\n\n\"We need to run. We are having dinner out...since that guy is locked up,\" Linda said.\n\n\"What are you two doing Sunday night?\" Dawn asked.\n\n\"We don't have anything planned,\" Linda replied.\n\n\"Good, you can join us.\"\n\n\"For what?\"\n\n\"The strip club we are members of is having a Grand Re-opening.\"\n\n\"Oh...I don't guess we better be seen in a strip club,\" Linda said.\n\n\"Why not?\"\n\n\"I just...\"\n\n\"Snob,\" I said, and Dawn laughed.\n\n\"Come on, Linda. It is a private club, and we have our own private table,\" Dawn told them.\n\n\"I don't know.\"\n\n\"Linda, we can go. No one cares,\" Rachel said.\n\n\"Maybe...\"\n\n\"It is going to be a big event, come on,\" Dawn said.\n\n\"Okay...I guess,\" Linda said.\n\n\"We can go out for dinner first. We don't need to be there until 8:00,\" I told them.\n\n\"Okay. We will pick all of you up at 5:30,\" Linda said.\n\n\"Sounds good,\" Dawn replied.\n\n\"We better get going,\" Rachel said.\n\nLinda and Rachel left, and we ate later.\n\n\"Are you two going to class with us tomorrow?\" Samantha asked.\n\n\"Yes. We are going to start going back on Saturdays,\" I said.\n\n\"I need to get something ready. You three clean up,\" Dawn said and got up and \n\nwent down to the basement.\n\nWe had been watching TV for about an hour when Dawn came up with a duffle bag and went out to the garage.\n\n\"What is she doing?\" Amy asked.\n\n\"Getting some things ready for tomorrow.\"\n\nDawn came in about 30 minutes later and sat with us.\n\n\"Need any help?\" I asked Dawn.\n\n\"Nope.\"\n\nAmy and Samantha were caught up with their studying, so we enjoyed an evening watching movies.\n\n\"Time for bed,\" I said a little after 11:00.\n\nWe all went up and got ready for bed.\n\n\"Are you two going to go every Saturday now?\" Samantha asked as she got in bed.\n\n\"We are going to try,\" Dawn said.\n\n\"When will we have to stop going to class?\"\n\n\"I guess we will have to see.\"\n\n*****\n\nEarly Saturday morning, Amy and Samantha had left the bedroom to get ready after we all got up. I went to shave while Dawn got some things ready.\n\n\"Need anything?\" I asked as she slipped some things into a bag.\n\n\"Can you get my katana case and take it down and put my sword in it?\"\n\n\"Sure.\"\n\nI went downstairs to my study. I opened the closet and took out the custom-made hard case for Dawn's sword, and went to the den. This was the only time she would let me touch her katana.\n\nI pulled down the hidden shelf and removed the sword and placed it in the case and closed it, and locked the combination lock. I pushed the shelf back up and went to the kitchen to set out some juices and make some toast. Amy and Samantha came down and grabbed some toast and juice while Dawn ate a bowl of fruit. After they finished, they went back upstairs while I cleaned up. I went up to see what the hold-up was.\n\n\"Are you ready to go?\" I asked Amy as I stood in her doorway.\n\n\"Just about.\"\n\nI waited a few minutes.\n\n\"I'm ready.\"\n\nI went down the stairs with Samantha and Amy. Dawn had already taken the case to the Escalade and was in the kitchen loading food and water in a cooler.\n\n\"Are we ready to go?\" Dawn asked.\n\n\"We are ready.\"\n\nWe went out to the garage and got in the Escalade, and left.",
        "\"What is that in the back?\" Samantha asked.\n\n\"Something for a demonstration in class,\" I said.\n\nWe drove into town to the gymnasium. We pulled up outside and got out, and went inside. I saw Dan talking to Linda and Rachel.\n\n\"They did make it,\" I said.\n\nI set the cooler on the bleachers as Dawn went to talk to Dan.\n\n*****\n\nEveryone had lined up, and Dawn and I were standing in front with Dan.\n\n\"Everyone, Dr. Smith and his wife Dawn, wants to say a few things before we start,\" Dan said.\n\n\"Good morning, everyone. I think all of you have met Samantha and Amy. They are both working hard like all of you are. I was talking to one of them Friday, and it made me think of a few things. Some, I am sure Dan has already talked about. But, I thought it would be good to hear some of it from Dawn and myself.\"\n\n\"As you learn the fundamentals and then the more aggressive parts of self-defense, you all need to be thinking of one other thing. Some of the moves and strikes you will learn are very capable of killing another person. That is something to think about as you train. Dan has told you and will continue to repeat some very fundamentals of self-defense. One of the most important things to remember is that there are no fair street fights. Once someone has decided to attack you, all bets are off. Dan is teaching you to backup if you can and announce that you do not want to fight. That is one of the first things to understand and learn. If, and only if the situation always it, you stun your attacker by pushing back and telling them to back off, it may stop a fight. If it does, great, but you will have done two things. Warn the attacker and allow anyone around you to see you are not the attacker.\"\n\n\"This is the same reason that police officers announce they will shoot if a perp doesn't drop his weapon. But, they do this if and only if they have the opportunity and their life or the life of someone else is not under immediate threat. If time does not allow it, they strike fast, and so will you. This all comes back to what we keep saying about situational awareness. We cannot emphasize enough that you must always be aware of your surroundings. It may sound like paranoia to tell you to always be on the lookout. Maybe it is not something you always do, being hyperaware. But, as your situation and surroundings change, your level of awareness must change.\"\n\n\"If you are walking down the street and there is no one else to be seen, your awareness level can drop down to being on the lookout, but being prepared. If you are walking down a dark street and there are others around, your awareness level needs to go way up. If you are in a parking lot and about to get out of your car, you look around and become hyperaware. I hope this makes sense. Most of all, if you have questions, ask us.\"\n\n\"Let me add to this,\" Dawn said.\n\n\"For you ladies, and you men...I repeat, there are no fair street fights. If someone is attacking you, you assume that they are going to rob, rape, or kill you! The law says you cannot use deadly force to protect property, right, Dan?\"\n\n\"Correct.\"\n\n\"That means if someone is breaking into your car, you can't shoot them because they are only stealing your stuff, right, Dan?\"\n\n\"Correct.\"\n\n\"But, if you are in the car and someone is trying to take it from you, you may not know if they have a weapon or not, so you don't know if they are planning on killing you. But, you have the right to assume they are going to kill you because they are being violent and trying to remove you from your car, and you can do whatever you need to do to defend yourself, right, Dan?\"\n\n\"Correct!\"\n\n\"I hope you see the difference. We had a discussion at home the other night about this. If someone comes up to you and pushes you and you do not see a weapon, you are learning what to do. The question came up at our house as to if you take the person pushing you out immediately or warn them as you break free. There is no correct answer to this question. We will show you today that when someone pushes you that you can easily hurt them badly or kill them in one swift move. Is that the first response you should make? Don't know. It's back to situational awareness. What is your assessment of your attacker? Are their others around, witnesses? Does your attacker have one or more buddies with him? These are things you must, and I repeat must, be assessing immediately.\"\n\n\"One man, or woman, walks up to you and pushes you in the chest...what do you do? Deflect and side-step and bring your hands up and tell them to stop because you don't want to fight is one move. It may stop the fight and your attacker, or...it may piss them off, and they come after you harder! So...what do you do? You should have already made that decision before you deflected your attacker. How can you do that, you ask? In your mind, you should have been asking yourself what do I do if this guy approaching shoves me? Pretty cynical way to go through life? Not if you want to stay alive, it's not,\" Dawn told them.\n\n\"You will learn how to deflect attacks or escape a hold, separate, strike a defensive stance and warn your attacker. You will also learn how to follow through immediately with a deflection or escape and strike a blow that could easily kill. How do you know which to do? Trust your instincts and worry about what a jury will think after it is all over. Your first goal is to come out of the situation alive!\"\n\n\"All I can tell you is that you learn to trust your feelings and your gut. You learn to be able to assess situations immediately. You have to, to stay alive. Dan, come and push me,\" Dawn said.\n\n\"We will show you the rest of what you didn't learn last week,\" Dawn added.\n\nDawn stepped out, and Dan walked up and pushed her. She deflected and stepped back, and yelled for him to stop.\n\n\"That is what you learned last week, right?\" Dawn asked.\n\n\"Dan, push me again,\" Dawn said.\n\nI was glad we were on the mats.\n\nDan pushed her, and in a blur, Dawn hooked him by his chin and put him on the mat. There were some mumbles.\n\n\"As you can see, if I slammed him down hard on a hard surface, it is going to bust his head good. Hard enough, and it could kill him,\" Dawn said.\n\n\"Just to make sure...\" Dawn picked her foot up and stomped and stopped just above Dan's throat. \"I can finish an attacker this way.\"\n\nDawn helped Dan get up.\n\n\"All escape moves and releases can be followed with a fatal attack. You need to be prepared for that. You will have to either escape and run...or...escape and attack...and possibly kill. You have to get very good at this to make the decision if you are going to stop your attacker...or fuck him up some!\" Dawn said to some giggles.\n\n\"Just like Dan, as a police officer is not trained to shoot to wound, are you, Dan?\" Dawn asked.\n\n\"No, I am not.\"\n\n\"Why?\"\n\n\"Because with a weapon, it is very difficult to attempt to wound someone in a stressful situation. By trying to wound, I could easily hit a bystander and kill them.\"\n\n\"But Dan, I know you are a very good shot and could easily wound someone. Why don't you just do that?\" Dawn asked.\n\n\"Because I will not fire unless my life or someone else's is in immediate danger. Even if I wound the perp, he could have friends or could go down shooting,\" Dan said.\n\n\"Using a weapon to defend yourself is not like using your hands or feet. It is close if you know what you are doing, but not the same. However, you know that what you can do can easily kill. All I can tell you is that the better you get, the more you have to think about things. If Dan, or James, or I get in a fight and kill someone, we better be able to prove we had no other choice. We may have to make a jury understand that also. As you train, you will learn more and more. As you learn more and more and get better and better, your decisions will come under scrutiny.\" Dawn finished with.\n\n\"Dawn? I have a question?\" A lady asked.\n\n\"What's that?\"\n\n\"In that video where you were fighting off those two guys...did you feel like your life was in danger?\"\n\n\"I knew someone would bring that up...\" There was laughter.\n\n\"No, I did not feel like my life was in danger, but...that was me, though. I didn't feel like my life was in danger for one reason...I am very, very good at this. You will never be as good as I am...maybe one, maybe two of you after five or ten years. I don't say that to brag. I say that so you understand I can easily stop an attacker and my life not be in danger. Knowing you are that good, you have little fear of being overtaken, you can make that kind of decision. The only situation I am very afraid of is an attacker with a gun.\"\n\n\"Some of you have seen Dawn demonstrate her abilities,\" Dan said. \"All I can say is she is right. She is good enough to not have much fear.\"\n\n\"Then did you over-respond?\" Amy asked with a smile.\n\n\"Are you asking if I subjected the attackers to more physical damage than they deserved?\" Dawn asked.\n\n\"Yes.\"\n\n\"I did. The first guy that attacked me pissed me off. I could have stopped after I broke his elbow. The second guy really pissed me off. If you have seen the video, you will have seen that I got punched in the face really hard. That was what I got and deserved for screwing around and messing up the first guy. I was pissed off and wanted to mess up the guy. While I was doing that, I made a mistake that could have been fatal. I got over-confident and forgot about his buddy I had seen him with earlier. And because of that, I got punched very hard and could have easily lost that fight.\"\n\n\"Did you ever have the thought you would need to kill him?\" A lady asked.\n\n\"No, not unless he produced a weapon.\"\n\n\"Why not?\" Samantha asked.\n\n\"I wasn't afraid of him.\"\n\n\"We will watch the video again later,\" Dan said. \"Also, Dawn has a treat for all of you after lunch.\"\n\nWe worked with the class until about noon, then broke for lunch.\n\nWhile everyone ate lunch, I went out to the Escalade and brought in the things Dawn needed. I took her sword case to her in the locker room then I set up the stand that held a rolled-up bamboo mat. Once it was secured, I went to the locker room to check on Dawn. She was putting on the white top of the Kendo uniform.\n\n\"Your stand is ready,\" I said.\n\n\"Braid my hair, please.\"\n\nI stood behind her and braided her hair tightly all the way down. Whenever Dawn's hair was braided, it went down to her ass.\n\n\"Done. What else do you need?\" I asked.\n\n\"How long before it is time for me?\"\n\n\"About 15 minutes.\"\n\n\"Okay. I need to meditate.\"\n\nI left Dawn in the locker room. I knew she wanted to clear her mind from the morning's practice. I sat with Amy and Samantha as they finished eating.\n\n\"What is she doing?\" Samantha asked.\n\n\"Getting ready.\"\n\n\"What did you set up?\" Amy asked.\n\n\"You'll see.\"\n\n\"What was in the case?\" Samantha asked.\n\n\"Her katana.\"\n\nI finished my sandwich and was sipping water as everyone finished up. A few minutes later, Dan went into the locker room. A few minutes after that, he came out with Dawn following him. He walked over to us, but Dawn stopped in the middle of the floor and got down and sat on top of her legs, and dropped her head. The gym had gotten quiet.\n\nDan sat with us a few minutes and finished a bottle of water.\n\n\"Is she ready?\" Dan asked me.\n\n\"Yes.\"\n\nDan stood and walked to the floor to address everyone.\n\n\"Everyone, can I have your attention. Among Dawn's many talents, she is also a swordmaster or a Kendoka. She has studied Kendo and Bushido martial arts for over a decade. She holds a 5th-dan in Kendo, which is near the best. She is going to demonstrate a sword kata. And no, we do not teach this in our classes.\"\n\nDan walked over and sat down with us. After a minute, Dawn slowly stood and, ceremonially and seriously, slowly withdrew her razor-sharp sword and took up kamea. She stood in her stance with a furious look for a minute, then started. She went through her kata, screaming as she made phantom strikes. If everyone thought Dawn was a badass at Krav Maga, they knew she was a badass now.\n\nIt was quiet as Dawn performed for about ten minutes. As her kata ended, she stopped in her stance at the stand with the rolled-up bamboo mat. After a minute, she screamed and swung the sword at the roll. She stopped with the sword on the downstroke. The top of the bamboo mat fell off the roll. She drew her sword back up again and screamed and made one slice through the roll, then came back and cut the falling piece in half and stopped on her downstroke.\n\nShe stood and slowly slid the sword back into the scabbard, and everyone applauded, and Dawn bowed.\n\nDan got up and walked out, and stood next to Dawn.\n\n\"Ladies and gentlemen, do not try that at home, please,\" Dan said. \"Any questions?\"\n\n\"Dawn. How long did it take you to get that good with the sword?\" A guy asked.\n\n\"I have been studying and practicing for over ten years. It takes a long time and a lot of practice to become good with a katana.\"\n\n\"Is that sword really sharp?\" Amy asked.\n\n\"Yes.\"\n\nI stood and tossed Dan an apple. Dawn withdrew the sword and held it out, blade up. Dan held the apple about four inches above the blade and released it. It fell through the sword and landed in two pieces.\n\n\"My katana or sword is very sharp. It is as sharp as a scalpel. Even in my house, no one is allowed to handle it but me. It is just too dangerous. With one stroke, I can cut a human body in half.\"\n\nDawn withdrew a small cloth from her sash and slid it down the blade to wipe it off, then returned it to the scabbard.\n\n\"Is that a real Japanese sword?\" A lady asked.\n\n\"This is my katana or sword I use during formal presentations. It is a real Japanese sword and is over 200 hundred years old. Once I had the money, I went through many swords until I found one that fit my size and felt balanced for me. I had the luxury of being able to afford this one. I have other practice swords that a far less expensive.\"\n\n\"What did that one cost?\" Someone asked.\n\n\"Old traditionally made swords are very expensive,\" was all Dawn said.\n\n\"Dawn studied Kendo and Bushido while she was studying Krav Maga. She didn't think Krav Maga was bad enough!\" Dan teased her. There was some laughter.\n\n\"Dawn! Do you have any other talents!\" Someone asked, and everyone laughed.\n\nDan walked over to me, and I handed him two apples, and he walked back to Dawn. Dan tossed one apple out to the side, and, in a blur, Dawn pulled a knife from her arm holster and threw it and stuck the apple in mid-air. There were some gasps.\n\n\"Never, ever, try anything like this, ladies and gentlemen,\" Dan said as he walked about 15 feet away from Dawn.\n\nDan held the apple between his thumb and fingers and held it out to his side. Without hesitating, Dawn threw a knife and stuck it in the apple. Everyone applauded.\n\n\"I learned several years ago that Dawn is also very good at throwing knives,\" Dan said. \"She didn't learn that in any martial arts class. She learned that as a kid on the Cherokee reservation when she was there in the summers.\"\n\nEveryone applauded again and stood, and walked out to talk to Dawn. After about 10 minutes, Dawn walked back to the locker room to change.\n\nDan had everyone back on the floor practicing when Dawn came out in her black Gi carrying her sword case. She walked out the side door with it. I knew she was going to lock up her sword in the Escalade. When she came back in, she went to work with some of the students.\n\nWe worked all the students hard for the rest of the day. Dan wanted to finish teaching them the moves we had taught Samantha and Amy. By 4:30, everyone was ready to stop for the day. Dan talked to everyone for about 20 minutes, then dismissed the class.\n\nLinda and Rachel walked up to us.\n\n\"This is hard work,\" Linda said.\n\n\"Yes, it is. Did you learn anything?\" Dawn asked.\n\n\"Yes, don't mess with you if you have a sword!\" Rachel exclaimed.\n\n\"Or a knife,\" Linda added.\n\nWe talked until we had cooled down, then we got in the SUV and headed home.\n\n\"Can you teach me to use a sword?\" Samantha asked from the backseat.\n\n\"You won't have time for that anytime soon, Sam.\"\n\n\"Why not?\"\n\n\"You have to get much better at Krav Maga before you turn your attention elsewhere. You would not be just learning to use a sword. You would be learning an entirely new discipline. I started training while I got my Expert rating in Krav Maga. Remember that takes at least three years. I also had a lot of experience with a staff weapon from my summers.\"\n\nSamantha got quiet in the back.\n\n\"But, you both can benefit from beginning to learn some of the fundamentals of Kendo. I can also teach you to use a staff. That can be useful if you have something in your hands like a stick or umbrella. It also makes you very confident. If you are using a scalpel, that comes in handy.\"\n\nWe stopped and grabbed some burgers before we got home.\n\nOnce we pulled up in front of the house, I had Samantha and Amy help me unload things from the Escalade and take them to the garage.\n\n\"Could Dawn really cut someone in half with that sword?\" Samantha asked.\n\n\"I have no doubt she could.\"\n\n\"You think she would if she had to?\"\n\n\"Probably.\"\n\nWe finished and went in to shower and clean up. The four of us showered together and then got out and dried off. Dawn went to the bedroom and put away her Kendo outfit.\n\n\"I need to check my katana. Can you three start dinner?\" Dawn asked.\n\n\"Sure,\" Amy said.\n\nThe three of us were starting dinner when Dawn came down the stairs. She had on some sweats and picked up the sword case and went to the den. She pulled out some things and came to the kitchen, and got a glass of water.\n\n\"What does she have to do?\" Samantha asked.\n\n\"Clean her sword and check to see if it needs to be sharpened.\"\n\n\"How does she sharpen it?\"\n\n\"I'm not sure how she does it. I have seen her sit for hours and work on the blade.\"\n\nWe got things started, and Samantha went to watch Dawn. \n\nAbout an hour later, we all sat down to eat.\n\n\"Did you finish?\" I asked Dawn.\n\n\"Yes. Everything is good to go.\"\n\n\"You took a long time sharpening it,\" Samantha said.\n\n\"I don't actually sharpen it. I just polish the edge and the blade. I would never try and sharpen the blade. I would have to ship it off for that,\" Dawn said.\n\n\"What was that flat thing you were running on the blade?\"\n\n\"That is a very, very fine honing stone. I use it with water on it to polish the edge.\"\n\nAfter we finished eating, Dawn went to put her katana away and put the case back in my study.\n\n\"James, do they still make those swords? Dawn said hers was several hundred years old,\" Amy asked.\n\n\"There are still swordsmiths in Japan. They make custom swords for people that can afford it.\"\n\n\"What does something like that cost?\" Samantha asked.\n\n\"Around $60,000.\"\n\n\"Wow.\"\n\n\"It sounds like a lot, but the swords are hand-made for the person that is purchasing them. These swordsmiths don't make more than a handful a year.\"\n\n\"I bet Dawn would love to have a sword made just for her.\"\n\nI smiled as I finished my wine.\n\n\"What are you smiling at?\" Amy asked.\n\nI looked to see if Dawn was still in my study.\n\n\"Don't you two dare saying anything about this, but I have been working for a year to get her a custom-made sword.\"\n\n\"Cool!\" Came from Samantha.\n\n\"I finally got her on the list. There is just one catch.\"\n\n\"What?\" Amy asked.\n\n\"She has to visit the swordsmith in Japan so he can make it to fit her. And, he has to decide if she is worthy of the sword.\"\n\n\"Oh...\" came from Amy.\n\n\"Can you make that happen?\" Samantha asked.\n\n\"Please don't say anything to Dawn,\" I said.\n\n\"We won't.\"\n\n\"My plans right now are that when we leave Hawaii at the end of June, we are going to Japan...\"\n\n\"All of us?\" Amy asked.\n\n\"Yes. I am working with the swordsmith in Japan.\"\n\n\"Wow!\" Came from Samantha.",
        "\"Just keep it a secret.\"\n\n\"We will.\"\n\n\"And, if Dawn tries to schedule anything for July, let me know so I can shoot it down.\"\n\nWhen Dawn came back to the kitchen, we were cleaning up.\n\n*****\n\nI think we were all tired from class when 10:30 came. We all went up to the bedroom and got in bed.\n\n\"Dawn, you looked pretty fierce today,\" Samantha said.\n\n\"I am going to have to start practicing with my katana again. I am out of shape.\"\n\n\"It didn't look like it,\" Amy replied.\n\n\"It really takes a lot more to perform that kata than you think.\"\n\n\"I would still like to learn some of that,\" Samantha said.\n\n\"I can teach you some with bamboo swords.\"\n\n*****\n\nWe slept late Sunday morning.\n\nDawn slipped down and was sucking on my morning hard-on. Amy kissed me then straddled my mouth. We had all been so busy we knew it was time for us to spend time together.\n\nI was working my tongue in Amy's pussy while she looked down at me. She closed her eyes, and suddenly I could feel her deep energy.\n\n\"Wow...\" came from Amy.\n\nShe kept her eyes closed and just felt my tongue inside of her. I felt Dawn slide her pussy down on my cock. The intensity of Amy's feelings grew as I felt Dawn's energy. I just concentrated on Amy's pussy and energies.\n\n\"Ohhh! I'm coming again!\" I heard Amy exclaim.\n\n\"Again?\" I thought.\n\nI had been lost in her feelings.\n\n\"Ahhhhh!\" Amy cried out and gushed into my mouth.\n\nI looked up, and she had her head back as she jerked.\n\n\"Oh, my...\" came from Amy.\n\nShe fell to my side, and I looked at Dawn. She had her eyes closed as she slowly worked her pussy.\n\n\"Oh...me...that was perfect,\" Amy moaned.\n\nDawn still had her eyes closed as she smiled.\n\nSamantha leaned over me and kissed me for a minute. Then, she sat up and straddled my mouth, facing Dawn. I slid my tongue into her pussy.\n\n\"Ahhhhhhh...yes...\" came from Samantha.\n\nSamantha felt wonderful. She still had so much more energy than her sister. I took my time with her as she just sat.\n\n\"Ohhh...that's it...\" Samantha moaned and came in a gentle orgasm. \"Yes...\"\n\nShe felt wonderful.\n\nI could feel that Dawn was leaning back and slowly working her pussy up and down on my cock. Samantha leaned forward, and I felt her and Dawn's energy connect. I could tell just from their energy that Samantha was licking Dawn's clit.\n\nI started licking Samantha's clit also and heard her moaning.\n\nI don't know how long we went, but I felt Dawn shaking as she came. I jammed my cock up into her and began pumping cum into her pussy.\n\n\"Ohhh...yes...honey...\" Dawn moaned.\n\nA few minutes later, Samantha slid forward, and I heard Dawn moaning as Samantha licked cum from her pussy. I lay for a few minutes, then pushed myself up to watch. Amy was straddling Dawn's mouth as Samantha kept licking cum from her pussy. I slid my fingers into Samantha and worked on her spots.\n\nAfter about ten minutes, the three of them came at the same time. The four of us lay in the bed and talked and laughed until about 11:00.\n\n\"Come, sis, we'll start breakfast,\" Amy said. She and Samantha headed downstairs.\n\n\"I need to ask you something,\" I said to Dawn.\n\n\"What?\"\n\n\"Do you think either Samantha or Amy measure love by how much sex we have?\"\n\n\"Why would you ask that?\"\n\n\"When Amy first moved in, I think she did,\" I said.\n\n\"She did, but she doesn't now. Your work with her helped her.\"\n\n\"I know when I was doing therapy, I worked with plenty of women that measured love from their husbands by how much sex they had. I was just curious what you thought.\"\n\n\"Honey, if that were the case, with any of us, we wouldn't be doing what we are doing,\" Dawn said.\n\n\"I know. I just wondered. I know far too many women value their self-worth or love from a spouse by how much sex they have. They think if the husband is not having as much sex with them as they think he should, he must not love them.\"\n\n\"I know it happens,\" Dawn said.\n\n\"I have never thought you had that problem,\" I said. \"I just wondered about the girls.\"\n\n\"Don't worry about it. Amy is okay, and Sam...\"\n\n\"Sam is like you,\" I said. \"A lot.\"\n\nDawn and I got up and went down to the kitchen.\n\nAfter we finished our brunch, Dawn went upstairs. After the girls and I cleaned up, we went out and sat in the hot tub.\n\n\"Don't forget about the club grand opening tonight,\" I told Amy and Samantha.\n\n\"Oh, we won't. We are looking forward to it,\" Amy said.\n\n\"What did Dawn go to do?\" Samantha asked.\n\n\"She said she needed to call Linda.\"\n\nThe three of us soaked for a while, then headed inside and dried off. Dawn came down the stairs while we were grabbing some water.\n\n\"I need you to do something,\" Dawn said as she stood there with one of her jars of medicine.\n\nShe handed the jar to me and turned around.\n\n\"Rub that on my left lat,\" Dawn said.\n\nI poured some of her medicine in my hand and rubbed it below her shoulder blade.\n\n\"What did you do?\" I asked.\n\n\"Strained my lat yesterday.\"\n\n\"You are out of shape!\" I teased Dawn.\n\n\"Just rub...\"\n\nOnce I finished, Dawn took her jar and went to the laundry room, and came back out wearing a sweatshirt.\n\n\"You didn't hurt it bad, did you?\" Amy asked.\n\n\"No, it's just tight.\"\n\nSunday afternoons were always house cleaning day. The four of us spent the afternoon cleaning.\n\nBy 6:00, everyone was getting ready to go to the club. I had put on a black Armani suit and was downstairs.\n\n\"Linda just pulled up! Come on, you three!\" I yelled.\n\n\"Coming!\" Came from upstairs.\n\nA moment later, the three of them came down the stairs. I stood and looked because all of them were well made up and wearing some sexy short dresses. Dawn smiled at me as I looked a the very thin black, see-thru top she had on.\n\n\"You all look nice,\" I said.\n\n\"Thank you!\"\n\n\"I like the new top,\" I told Dawn.\n\n\"I thought you would. I got it from Linda's store.\"\n\nDawn's perfect tits were clearly visible through the thin material since she didn't have on a bra. Amy and Samantha also had on very thin, loose silk tops that were unbuttoned to their skirts. I could see their beautiful breasts outlined beneath the thin material.\n\nI walked to the door and opened it, and waited for Rachel and Linda to come inside.\n\n\"You three look hot,\" Rachel said after she came into the house.\n\n\"Thanks,\" Amy replied.\n\nRachel and Linda both had on the same thin tops, but they were not as brave and had on revealing thin bras underneath.\n\n\"Let us grab our purses, and we will be ready to go,\" Dawn said.\n\nI waited as they retrieved their purses, and we went out the front door. There was a long limo waiting and a Tahoe.\n\n\"Are they going everywhere you go?\" I asked.\n\n\"Yes,\" Linda groaned. \"I can't talk them out of it.\"\n\nI watched as Linda got in the limo. She had on a very short white skirt to go with her white top. When I got in and sat across from her, I looked between her legs, and she didn't have on underwear. Rachel had on a short skirt also.\n\n\"At least you dressed for the club,\" I said to them.\n\n\"Dawn's idea,\" Linda replied.\n\nThe limo pulled out.\n\n\"Dawn, I love that top on you,\" Linda said.\n\n\"Thank you. It came from your store. I see you have on one like the girls...but there is something wrong with it...\"\n\n\"What?\" Linda said as she looked down at the thin top.\n\n\"You have on a bra...that's what is wrong with it.\"\n\n\"Dawn, I have to wear a bra.\"\n\n\"No, you don't,\" Dawn added.\n\n\"I'm afraid there would be a lot to see without a bra!\" Linda exclaimed and laughed.\n\n\"That's the idea, Linda. You have a hot body. Show it off. You too, Rachel,\" Dawn told them.\n\n\"I can't wear things like that in public,\" Linda replied.\n\n\"Why not?\"\n\n\"I...just can't.\"\n\n\"You can if you want. You need to stop worrying about what other people think about you,\" Dawn told her.\n\nWe drove into town and pulled up to one of the really nice restaurants in town. The driver opened the door, and Linda and Rachel got out first. I got out to help Dawn and the girls out. When Amy and Samantha bent over to get out, I could clearly see their beautiful tits through their unbuttoned tops.\n\nWe all walked into the restaurant.\n\n\"Good evening Ms. Williams,\" a man said. \"Right this way.\"\n\nWe followed him to a table for six and sat down.\n\n\"I am so glad we can go out again,\" Linda said.\n\n\"For now,\" Rachel added.\n\nAll through dinner, when the waiters came, they lingered and looked at all the tits.\n\n\"They keep looking at my breasts,\" Linda said.\n\n\"They are supposed to,\" I told her.\n\nWe had plenty of wine all through dinner and then left.\n\n\"Linda, I have a question?\" I said.\n\n\"What?\"\n\n\"Why did you wear a bra...but no underwear?\"\n\nLinda and Rachel laughed.\n\n\"Go ahead, Linda, take off the bra,\" Dawn encouraged.\n\n\"Alright!\"\n\n\"You too, Rachel,\" Amy said.\n\nI watched as Linda and Rachel took off their thin tops and removed their bras.\n\n\"Oh, that looks nice,\" I said.\n\n\"They'll think we are some of the strippers,\" Linda said.\n\n\"That would be a good show!\" Samantha said and giggled.\n\nLinda looked over at Rachel, then reached over and rubbed her tits for a minute.\n\n\"You'll make me horny looking at your tits all night,\" Linda said to Rachel.\n\nThey put their tops back on before we pulled into the club parking lot.\n\nIt was just before 8:00. I had called Rick and asked him to make our table for six. We sat in the limo for a few minutes until it pulled up to the front door. We got out and headed inside. Rick was greeting everyone as they came in.\n\n\"Hey, James. Glad you could make it,\" Rick said.\n\n\"We wouldn't miss it,\" Dawn said.\n\n\"Rick, this is Linda and Rachel. They are joining us tonight,\" I told him.\n\n\"Great! Your table is at the end of the new stage. It's ready for you. Enjoy!\"\n\nWe made our way in and to our table. It had a reserved sign on it with our name and a bottle of champagne in a bucket of ice. We all sat down.\n\n\"This is some place for a strip club,\" Linda said as she looked around.\n\n\"They just remodeled. It's a private club,\" I told Linda and Rachel.\n\n\"See all the photos on the walls? James took all of them,\" Dawn said. \"Come on. We can go look at them.\"\n\nDawn got Linda and Rachel to follow her. They walked around and looked at the photos, along with other people.\n\n\"Hey, James!\" Rick said, walking up.\n\n\"Looks like a nice crowd,\" I said.\n\n\"Who is the tall hot blonde?\"\n\n\"That is Linda Williams.\"\n\n\"The Linda Williams?\"\n\n\"That's her.\"\n\n\"Damn, she is hot. Who is her hot friend?\"\n\n\"That is Rachel. Her lover and bodyguard.\"\n\n\"Nice tits. You all enjoy. We are going to have a big party tonight. Ashley and Raven will be out soon to sign the posters. We won't start the show until about 9:00. Check out the silent auction.\"\n\n\"Okay.\"\n\nRick walked off. I opened the champagne and poured Amy and Samantha a glass.\n\n\"I wonder how the Pro-Am is going to go?\" I asked.\n\n\"It sounds like fun,\" Samantha said with a big smile. \"We are going to check out the silent auction.\"\n\nThey got up and walked away.\n\n\"Hey, Jaaammmes!\" I heard Ashley's southern drawl.\n\nShe came to me and sat across my lap. She was wearing a very small and sexy black dress.\n\n\"Hi, Ashley.\"\n\n\"I love the photos. You did a great job.\"\n\n\"I had fun.\"\n\n\"We did too. Where are the girls?\"\n\n\"Dawn is showing some friends the photos, and Amy and Samantha wanted to look over the silent auction.\"\n\n\"I have had several people ask me who took the photos. I told them to give you and Dawn a call.\"\n\n\"Thanks.\"\n\n\"When can I come back for some more great sex?\"\n\n\"Anytime you want, Ashley.\"\n\n\"I guess I better go sign your fabulous posters,\" Ashley said as she stood.\n\n\"I hope they sell out.\"\n\n\"I think they will. See you later.\"\n\nAshley walked off toward a crowd. I looked around, and the club was filling up. Dawn and Rachel came and sat down.\n\n\"I didn't know you made a smaller print of each of the other girls to auction off,\" Dawn said.\n\n\"I did that for Rick.\"\n\n\"They look great,\" Rachel said.\n\n\"Did you two lose Linda?\"\n\n\"She is looking at the items on the silent auction,\" Rachel said. \"Who was the hot blonde?\"\n\n\"That was Ashley. She is one of the performers.\"\n\n\"She has a thing for James,\" Dawn said.\n\n\"Looked like it.\"\n\nI poured Dawn and Rachel champagne. A few minutes later, Linda came and sat down.\n\n\"James, the photos are fabulous. I especially like the two limited edition black and white prints. They look so artistic,\" Linda said as I poured her a glass of champagne.\n\n\"I like the low-key look. They could hang in anyone's house as art prints,\" Dawn said.\n\n\"I thought the same thing,\" Linda replied.\n\nSamantha and Amy came back to the table.\n\n\"Everyone is bidding on the photos and buying the posters,\" Amy said as she sat down.\n\n\"Someone bid $3,000 on each of the black and white prints of Ashley and Raven,\" Samantha said.\n\n\"Who?\" I asked.\n\n\"I don't know. Everything has a number for the bidder. It was number fifty-one.\"\n\n\"I guess someone likes the photos,\" Dawn said.\n\nBy 8:45, the club was almost full. We were all sitting and sipping champagne. One of the waitresses had brought us some cake to go with the champagne.\n\n\"Are you James Smith?\" Someone asked.\n\n\"That's me,\" I said as I turned around.\n\nThere was a couple standing there; mid-forties, nice-looking lady.\n\n\"They said you are the one that took all the photos. I'm Charlie.\"\n\n\"I did, Charlie. Nice to meet you.\"\n\n\"They are some hot photos. I understand you do them for other people.\"\n\n\"My wife and I have an exclusive photo business.\"\n\n\"I was wondering if you could take some photos like that of my wife, Britney.\"\n\n\"That is what we are planning on doing. I would be happy to set up a shoot for you.\"\n\n\"Great. But, I wouldn't want copies of the photos getting out from whoever prints them,\" he said.\n\n\"No need to worry about that. I make all the prints at the house. It is included in the price.\"\n\n\"That's even better.\"\n\n\"We set it up to be very exclusive like that,\" Dawn said.\n\n\"That would be good. What does it cost?\" Charlie asked.\n\n\"The photoshoot is $10,000. That covers everything, including all the prints,\" Dawn said. \"Britney, you bring the lingerie, or we can do nudes. We take care of the rest.\"\n\n\"Great! When can we set it up?\" Charlie asked.\n\nDawn got Charlie's phone number from him and told him she would call and set it up.\n\n\"Is it okay if I come and watch?\" Charlie asked.\n\n\"That is up to your wife,\" Dawn replied.\n\n\"Of course, you can come and watch,\" Britney said.\n\n\"Great. Mrs. Smith, you call and let us know when you can do it.\"\n\n\"I will,\" Dawn replied.\n\n\"Nice meeting you. I look forward to it.\"\n\nCharlie and his wife walked away.\n\n\"Ten-grand?\" Linda asked.\n\n\"Sure. It is a very exclusive service!\" Dawn exclaimed and laughed.\n\nWe all sat and talked until it was time for things to start. Once the show started at 9:00, we watched performances until after 10:30. I had ordered more champagne as we watched.\n\n\"Ladies and gentlemen!\" Rick announced from the stage in front of us.\n\n\"Thank you for coming to the Re-grand Opening of our club. I hope everyone had a chance to purchase autographed posters from Ashley and Raven and bid on the other merchandise. There are photos of all your favorites, and I am sure they will sign them for you. We are raising money for the local food bank with all proceeds from the sale of merchandise as well as the tips for the performers tonight.\" \n\n\"Tonight, we are doing something special for our party. We are having a Pro-Am night. Each of our performers has what I would call an amateur joining them on stage tonight. These ladies may be girlfriends or even wives of some of you gentlemen! I hope everyone enjoys the local talent. So, get ready for our Pro-Am show!\"\n\nBy 1:00 AM, we had watched a lot of the other performers put on some great shows with other local ladies. Some of the locals kept on their lingerie. A few went topless.\n\n\"I have to go to the bathroom,\" Amy said and stood while we were waiting for the next show.\n\n\"I'll go with you,\" Samantha said.\n\n\"You two hurry back,\" Dawn told them.\n\nWhile we waited, there were some ladies on the stages dancing to the music.\n\n\"This is a pretty nice place,\" Linda said.\n\n\"For a strip club?\" Dawn asked, and they laughed.\n\nLinda and Dawn talked and laughed for a bit.\n\n\"Ladies and gentlemen! Please turn your attention to our main stage! Our last two shows are about to begin! Please give a big round of applause for Raven and her lovely companion!!\"\n\nEveryone turned toward the main stage in front of us and applauded.\n\nThe lights came up slowly on the stage, and a spotlight came on where the ladies had been coming out.\n\nWe watched as Raven slowly slinked out onto the stage. She had on a black leather outfit as she slowly danced for a few minutes. She turned and held her hand out toward the entrance of the stage, and her companion started out.\n\n\"What the hell!\" I said as I saw Amy coming out on stage.\n\nAmy had on a matching black leather outfit.\n\nDawn started applauding and whistling.\n\n\"Dawn! Did you know about this!\" I asked.\n\nShe just smiled at me.\n\nAmy took Raven's hand, and they danced their way to the end of the stage in front of us. Amy looked at us and winked.\n\nWe all watched as everyone cheered. Raven and Amy had choreographed some nice moves. Raven unzipped her black skirt and dropped it, and danced in her black lacey thong a minute. Then Raven slowly unbuttoned the black top. She held it up as she danced around because she didn't have a bra on. When she pulled it away, all the guys cheered.\n\nRaven and Amy danced a few minutes, then Raven turned to Amy and began rubbing her tits through the top. After they danced and did that for a bit, Raven reached over and unzipped Amy's black skirt and pulled it away. There was a lot of cheering and applause, especially from Dawn.\n\nWe watched them tease and perform for a while. Then Raven began to unbutton Amy's black top. Amy was rubbing Raven's tits as she worked on her top. Once Raven had it unbuttoned, she jerked it away. There was a lot of applause and cheering for Amy's huge tits. She danced in her sexy white thong bottom as Raven teased her.\n\nThe two of them danced and teased each other for a while. The contrast of their skin in the spotlight looked amazing. Then Amy wiggled her way down in front of Raven and slowly pulled the thong down and off her. Amy slowly slid her hands up Raven's legs as she wiggled her way back up.\n\nAmy kissed Raven, and then wiggled her way down in front of Amy. She teased everyone as she pulled at the thong Amy had on. Raven smiled and slowly wiggled back up as she ran her hands over Amy's legs.\n\n\"Ahh!\" Came from the crowd since Raven hadn't pulled off Amy's thong.\n\nThe two of them teased each other and danced for a few more minutes. Raven made her way behind Amy and reached around her and rubbed her stomach and mound as they wiggled. Then Raven slow wiggled down to sit on her stiletto heels as she rubbed Amy. I watched carefully as she slid her hands back up to Amy's thong and hooked her fingers in it, and slowly pulled it down her legs, exposing that lovely tuft of red hair.\n\nThere were cheers from the crowd as Raven slid her hand slowly up Amy's legs as they wiggled. Raven wrapped her arms around Amy's stomach, and they swayed and danced for a few minutes, then made their way off the stage.\n\nRick came back out on stage.\n\n\"Weren't they great!\" Rick yelled to a lot of applause and cheers.\n\n\"That was Raven and her companion Amy! And guys! Don't get any ideas! Amy is married!\"\n\n\"Booo!\" Came from the crowd.\n\n\"If you enjoyed Amy's performance, I know you will enjoy the next performance!! Come on out, Ashley!!\"\n\nAshley slowly danced her way onto the stage as everyone cheered. She put on a show for a few minutes, then turned to the back of the stage, and Samantha danced her way out.",
        "\"I don't believe this!\"\n\nDawn cheered and smiled at me as she clapped.\n\nEveryone watched the two of them dance for a while. They began to tease each other and slowly pulled each other's clothes off as everyone cheered. The two of them were left wearing black teddies that were cut very high on their hips.\n\nI watched them dance and wiggle, wondering how they were going to get out of the teddies. Then Samantha began pulling down the straps and the top of Ashley's teddy and let it slide down her arms and legs. Ashley danced naked as everyone cheered.\n\nWhen Ashley began pulling at Samantha's teddy, everyone began to cheer. Ashley teased the crowd for a few minutes, then slowly pulled down Samantha's teddy, then pushed it down enough, so it slid down her legs to the floor.\n\nThe two of them danced and teased the crowd for a while. Samantha's bare mound looked great as it exposed her pussy lips. The two of them looked hot as everyone was cheering and yelling until they finally danced their way off the stage.\n\nRick walked out to the middle of the stage and stood with the microphone.\n\n\"I told you that you wouldn't be disappointed!! Give a hand to Ashley and her companion, Samantha!!\"\n\nMore cheers.\n\n\"And...in case you were wondering, Samantha is Amy's little sister!! And unfortunately, she is also married!!\"\n\nThere was a lot of applause.\n\n\"We may have to make the Pro-Am a regular thing! Ladies and gentlemen! Thank you for such a warm reception for our Pro-Am ladies!\"\n\nThere was another round of applause.\n\n\"Before we wrap up for the night, I have a few announcements. Make sure before you leave, visit the silent auction again. There are tip jars on the tables. Ashley and Raven have a few posters left, so please make your way over and pick up one. They will be over there signing the remainder.\"\n\n\"One final announcement for the night. Did you ladies and gentlemen enjoy all the sexy lingerie the ladies had on? For at least a few minutes!\"\n\nMore cheers and applause.\n\n\"All of the lingerie was donated tonight by a new store in town. It is not open yet, but I understand it will have a huge Grand Opening on Valentine's Day. I have been told they will carry some very ALLUUUURING! lingerie, swimsuits, and ladies' high fashion clothes. Watch for their Grand Opening, and you men take your ladies there and purchase some of this hot and sexy lingerie!\"\n\nEveryone applauded again.\n\n\"Hey, Rick!\" Ashley exclaimed as she walked out on stage, naked.\n\n\"Yes, Ashley!\"\n\n\"If anyone is interested...the lingerie I wore, and my hot little redhead wore, will be for sale back at my table!\"\n\n\"Ours too!\" Raven yelled as she walked out on stage, naked.\n\n\"Oh, my! I am sure someone will be very interested in bidding on those!\" Rick exclaimed.\n\n\"I'm sure if the bids are high enough, we can sign them for the winner!\" Ashley exclaimed.\n\n\"What about the redheads!\" Someone yelled.\n\n\"Oh, I bet I can get them to sign theirs too!\" Ashley yelled.\n\nThere was more applause.\n\nAshley and Raven walked down the steps from the main stage and made their way over to the area where they had been signing posters.\n\n\"That's it for the night! Please make your final bids on any merchandise!\"\n\nEveryone applauded and cheered as the house lights came up.\n\n\"I can't believe those two did that!\" Linda exclaimed.\n\n\"It's not the first time,\" I said. \"Dawn, how long have you known they were going to do this?\n\n\"Awhile. They have been coming here and practicing some in the afternoons.\"\n\n\"Did you like it!\" I heard Samantha exclaim.\n\nShe and Amy ran up to us. They were just wearing some short black robes.\n\n\"I can't take you two anywhere without you taking off your clothes!\" I said to them and wrapped my arms around their shoulders. Linda and Rachel laughed.\n\n\"That was so much fun!\" Came from Amy.\n\nRick walked up.\n\n\"You two were very hot! Thanks for doing it.\"\n\n\"Oh, we had fun,\" Amy said.\n\n\"We may have to have you two back. Maybe we can talk Mrs. Smith into our next Pro-Am.\"\n\nDawn laughed as Rick looked at her tits.\n\n\"It wouldn't be her first time either,\" I said.\n\n\"How about you two joining Ashley and Raven and see if you can get the bids up high enough for you to sign the lingerie you had on,\" Rick said.\n\n\"Sure!\"\n\nRick escorted them across the room and through the crowd.\n\n\"Those two are crazy,\" Rachel said.\n\n\"I know,\" I replied.\n\nWe sat and finished our champagne while the crowd thinned out. We had two more couples come up after Rick pointed us out. They wanted to find out about having photos made.\n\nAfter that, there seemed to be a small crowd where Ashley and Raven were signing posters. We all walked over to see what was going on.\n\n\"$2,000!\" A guy shouted as we walked up.\n\nI looked over the top of the crowd and could see Ashley sitting there naked. I moved a little and could see Samantha sitting next to her, also naked.\n\n\"Come on! You can do better than that!\" Ashley yelled. \"Here is what I will do. One bidder takes my lingerie and hers! Winner takes all! Plus! The last poster I have, and Samantha will sign it too!\"\n\n\"$3,000!\" Someone yelled.\n\n\"$4,000!\"\n\nI looked over to see Raven and Amy enticing people to bid on their lingerie. Amy was naked also.\n\nLinda looked on with amusement before she walked over to the other items for sale. Things were crazy for about ten more minutes. The bidding seemed to have stopped at $4,000.\n\n\"Sold!\" I heard Ashley yell to a lot of applause.\n\nThe place cleared out after about 30 more minutes. Samantha and Amy had signed their lingerie along with Ashley and Raven. All the posters were gone, and Ashley was talking to several people. I saw people claiming the photographs from the auction and walking away with all of them but the two black and white ones.\n\n\"We are going to get dressed,\" Amy said as she and Samantha walked up, now in their robes.\n\n\"Why were you two sitting over their naked?\" I asked.\n\n\"A guy said he would donate $1,000 to the tips if we would take our robes off,\" Amy said.\n\n\"Go get dressed,\" I told them.\n\nRaven handed Ashley a robe as both of them walked up to us.\n\n\"Your two wives are a lot of fun,\" Raven said.\n\n\"In more way than that!\" Ashley exclaimed.\n\nAfter everyone left, we were the only ones left.\n\n\"Dr. Smith, thank you for everything,\" Rick said.\n\n\"Sounded like you raised some money.\"\n\n\"I think we did. The tip jars are full.\"\n\n\"The place looks great,\" Dawn said.\n\n\"It does. I wanted to get everything finished before I head off to Houston.\"\n\n\"Are you moving?\" I asked.\n\n\"I am opening a new club there with that couple you introduced to me. Ashley will be running things here for a while.\"\n\n\"I hope she is not going to stop performing,\" I said.\n\n\"Oh, no. She will still be performing. I will be gone for a year or so.\"\n\n\"Good luck then,\" Dawn said.\n\n\"Dawn, thanks for hooking everyone up with the lingerie,\" Ashley said.\n\n\"No problem. Don't forget you owe me,\" Dawn said to Ashley and Raven.\n\n\"Just let us know when,\" Ashley replied. \"You still owe us too.\"\n\n\"You two were hot!\" Raven said as Samantha and Amy walked up. \"Thanks for doing it.\"\n\n\"We had a blast,\" Amy said.\n\n\"You two are just a little crazy,\" Linda told them.\n\n\"I guess we better be going,\" I told everyone.\n\n\"Dawn, the week before Memorial Day,\" Ashley said.\n\n\"I remember,\" Dawn replied.\n\n\"Let me go and check on the limo,\" Rachel said as she got out her phone and walked toward the exit.\n\n\"What about Memorial Day?\" I asked.\n\n\"Later,\" Dawn said.\n\nAfter Rachel had been gone a few minutes, she came back.\n\n\"It's clear,\" she said.\n\nWe all left the club and got in the limo.\n\n\"Damn, it is almost 4:00 AM,\" Linda said. \"We have to work today.\"\n\n\"You two have classes this afternoon,\" Dawn said to the girls.\n\n\"You two may as well stay at the house and have breakfast before you go to work,\" I told Linda and Rachel.\n\n\"May as well.\"\n\nLinda talked to the girls about performing until we got to the house. We all went in, and Dawn, Amy, and Rachel started breakfast.\n\n\"You and your sister looked pretty hot,\" Linda told Samantha as we sat in the den.\n\n\"It was fun. Maybe you and Rachel can do the next Pro-Am,\" Samantha said.\n\n\"I don't think so!\" Linda said as she laughed.\n\nBy 6:30, we were all finishing breakfast.\n\n\"You two need to get some sleep,\" Dawn told Amy and Samantha. \"I'll wake you up.\"\n\n\"We need to get cleaned up and head to work,\" Linda added. \"I'm glad we have clothes here.\"\n\n\"Leave your clothes. I will get them dry-cleaned,\" Dawn said.\n\nLinda and Rachel headed up the stairs with Samantha and Amy.\n\n\"What do Ashley and Raven owe you?\" I asked as I sat with Dawn.\n\n\"They are going to have an autograph session one evening at the new store.\"\n\n\"Oh? What are they autographing?\"\n\n\"Some 8 X 10s you are going to print. The ones I had you take with them wearing our lingerie.\"\n\n\"I see. What about Memorial Day weekend?\"\n\n\"Ashley and Raven are taking some time off and going to the Bahamas the week before Memorial Day.\"\n\n\"So?\"\n\n\"You are going with them.\"\n\n\"I am?\"\n\n\"Yes. I figured you would need a vacation by then.\"\n\n\"Just me?\"\n\n\"Just you, honey.\"\n\n\"Don't forget we are going to Hawaii for June?\"\n\n\"I haven't.\"\n\nDawn started gathering up dishes. I headed up the stairs and stopped in my bedroom, and took off my clothes. I walked down to Linda and Rachel's room and heard the shower running. I walked into the bathroom and watched them showering for a minute, then walked into the huge glass shower with them.\n\nLinda was soaping up Rachel's tits as I got behind her and started shampooing Rachel's hair.\n\n\"I am going to make sure we have a nice big glass shower,\" Linda said.\n\n\"You should have several,\" I told her.\n\nWe washed Rachel, and then we soaped up Linda and rinsed her off.\n\n\"My girls say morning sex is the best,\" I said.\n\n\"It is,\" Rachel replied.\n\n\"But you will have to wait!\" Linda exclaimed.\n\n\"I know...\"\n\n\"Oh, maybe not,\" Rachel said as she got on her knees and sucked my cock into her mouth.\n\nLinda ran her hands over Rachel's head as we watched. Rachel worked on my cock hard until I filled her mouth full of cum. She stood, and Linda leaned down and kissed her for a minute. Linda stood, and I took her in my arms and kissed her, then kissed Rachel.\n\n\"We have got to get going,\" Linda said.\n\nI dried off with them.\n\n\"Go, we need to get ready,\" Linda said to me.\n\nI left them and walked down to my bedroom. Dawn was taking her clothes off.\n\n\"Where are the girls?\" I asked.\n\n\"I sent them to their rooms to get some sleep.\"\n\nI took Dawn in my arms and kissed her.\n\n\"You would look good in a Pro-Am.\"\n\n\"I don't think so.\"\n\nDawn pulled me to the bed, and I laid her back and kissed on her tits for a few minutes.\n\n*****\n\n\"We are heading to the office,\" I heard Linda say.\n\nDawn was sitting on my mouth as I worked on her pussy.\n\n\"Okay. Are you two coming next weekend?\" Dawn asked.\n\n\"I guess so.\"\n\n\"Great. Talk Patricia and her husband into it.\"\n\n\"I think I can,\" I heard Rachel say.\n\n\"Very good. Do you two want to stay and let James do you when I am finished?\"\n\n\"We better be going.\"\n\n\"Okay.\"\n\n\"We had a good time,\" Linda said.\n\nDawn laid on me and sucked my cock into her mouth. We made sure we both were pleased until we decided to take a nap.\n\n*****\n\n\"How far along is Elizabeth now?\" Amy asked she ate before leaving for class.\n\n\"About six months,\" I said.\n\n\"Hmmm. Why don't you call her and have her come over and see if any of the lingerie will fit her. If it does, maybe she will let you use some photos of her.\"\n\n\"Let me run it by Brenda.\"\n\n\"That would be a good idea,\" Dawn said.\n\n\"I'll call Elizabeth. Linda wanted me to come by her office,\" I told them.\n\n\"Tell her I need them to come by the house tonight. I have something for them,\" Dawn said.\n\n\"Okay.\"\n\nI called Brenda about 11:30 before I left the house.\n\n\"Hey, Amy thought of something. One of our friends is about six months pregnant. I'm sure some of the lingerie you have here will fit her. You want to talk to her and see if she will let us take some photos and use them?\"\n\n\"Yes!\"\n\nI gave her Elizabeth's number.\n\n\"If she says yes, we need to get it done,\" I told her.\n\n\"Okay! I will call her!\"\n\nAfter Amy and Samantha headed to school, Dawn said she needed to run into town.\n\nI was in the computer room moving the files from the videos of the last few weeks when my cellphone rang. I looked, and it was Angie.\n\n\"Hey, Angie.\"\n\n\"Hey. Did you all have a good trip?\"\n\n\"Yes. Linda Williams took us to Paris for New Year's.\"\n\n\"Damn. That was nice.\"\n\n\"It was. We took our friend from Hawaii that was visiting.\"\n\n\"Is this the friend you fucked while you were in Hawaii?\"\n\n\"That was her.\"\n\n\"I am going to work on Brian taking off a week or so this Summer if you are still planning on going back to Hawaii.\"\n\n\"We are still talking about it. Make him take at least two weeks off, Angie.\"\n\n\"Are you still planning on having the salesladies in your new store work in lingerie?\"\n\n\"That is the plan. Lingerie and swimwear.\"\n\n\"If you are still hiring, I may know someone.\"\n\n\"They are still looking for staff.\"\n\n\"There is a new attorney at Brian's firm. He has been there since July. His wife is really cute and is looking for a job. She used to do some modeling and sales before they moved here.\"\n\n\"Did you say something to her husband about it?\"\n\n\"Well, they were here this weekend, and I mentioned it.\"\n\n\"All weekend, Angie?\"\n\n\"Well...yes. They have been here a few times.\"\n\n\"How is that working out?\"\n\n\"So far, so good.\"\n\n\"Did you mention the job to the husband?\"\n\n\"Yes. He thought it was a great idea.\"\n\n\"A married lady could have a problem with the husband.\"\n\n\"Not for Hannah.\"\n\n\"Oh?\"\n\n\"Her husband likes to show her off.\"\n\n\"Is she cool with that?\"\n\n\"Well, that was sort of how it got started. We took them out to dinner one night, and Hannah was wearing some really revealing clothes. Ryan, her husband, teased Brian all the next day about looking at her. That weekend, Brian invited them to the house for dinner. Her husband talked Brian into doing her.\"\n\n\"That may not be a good thing, Angie.\"\n\n\"Oh, it worked out very well. She loves to eat pussy and loves to fuck.\"\n\n\"How about the husband?\"\n\n\"Oh, he loves to fuck too.\"\n\n\"The husband is not pimping her out, is he?\"\n\n\"Oh, no. He and Brian have become good friends. They will either come here or we go to their place every few weeks.\"\n\n\"How is Brian handling it?\"\n\n\"Great. He will fuck me afterward and tell me how hot it was watching me. He wants me to tell him about how it felt.\"\n\n\"Are you good with that?\"\n\n\"Yes. You and Dawn said it would be hot talking about it. I tell him about being fucked, and he tells me about doing her. It's hot.\"\n\n\"Are you enjoying it, Angie?\"\n\n\"Oh, yes. James, Ryan's cock is bigger than yours. His wife is happy because Brian is big too. I think that is why Brian is enjoying watching.\"\n\n\"Are you getting off on his big cock?\"\n\n\"Just like I get off on yours!\" Angie laughed.\n\n\"How about you and the lady?\"\n\n\"She has taught me a few things.\"\n\n\"About eating pussy?\"\n\n\"Yes. Brian and Ryan love watching us.\"\n\n\"As long as you are enjoying it and having some fun.\"\n\n\"Oh, we are.\"\n\n\"Angie, is Brian enjoying it because you are being pleased?\"\n\n\"Yes. That and he wants to ask me about it and how I am getting pleased. James...maybe I shouldn't tell you...\"\n\n\"What?\"\n\n\"James, Brian really gets off when you fuck me. He knows I love his big cock, and he keeps asking how much I enjoy yours. Is that okay?\"\n\n\"Sure, but I want you to make sure he is happy you are being pleased. Have you two been with any other couple?\"\n\n\"One other one from the firm.\"\n\n\"How did that go?\"\n\n\"The same. Brian told me how much he enjoyed watching me.\"\n\n\"Do you enjoy watching him?\"\n\n\"It's like Dawn said, it's hot watching.\"\n\n\"Just make sure things are going as you expect them to go, Angie.\"\n\n\"I wanted to know if Hannah could talk to you about working in the store?\"\n\n\"She would need to talk to Sherri and Brenda. They are doing the hiring. I can give you their numbers.\"\n\n\"Okay. They would love Hannah. She is tall and has an incredible body.\"\n\n\"She won't mind men looking at her?\"\n\n\"Hardly. Every time I see her, she has on something really skimpy.\"\n\n\"How old is she?\"\n\n\"Twenty-five.\"\n\n\"If you think the husband will be okay with it, call Brenda or Sherri.\"\n\n\"He will. They really love each other but love watching each other being fucked. I think Hannah likes to see her husband's big cock in another woman...just like Dawn does.\"\n\n\"Dawn does like watching.\"\n\n\"She told me she enjoys knowing how the other woman is feeling.\"\n\n\"I am sure that is part of it.\"\n\n\"Hey, James. Maybe we could find a reason to bring Ryan and Hannah to your house for dinner. Would Dawn enjoy a really huge cock?\"\n\n\"I am sure she would, but remember, I have three wives. Are you enjoying it, Angie?\"\n\n\"James, Ryan is a freak of nature. I can't get all of it in me, and it took me several times to get most of it in me. Would Dawn enjoy a cock that big?\"\n\n\"She enjoys a challenge.\"\n\n\"James, I am serious. He is a fucking freak. He has to be four or five inches longer than you, and I can't get my hand around it.\"\n\n\"That could be interesting. I'm sure all my wives would like to try it.\"\n\n\"I think Ryan could handle all of them!\"\n\nI gave Angie, Sherri and Brenda's phone numbers.\n\nAfter I hung up with Angie, I hoped she was being careful.\n\n******\n\nDawn came back about 2:30.\n\n\"I am heading over to the limo grand opening. Do you want to come?\" I asked.\n\n\"Sure, give me a few minutes.\"\n\nDawn went upstairs while I gathered my camera gear and loaded it in the Escalade.\n\n\"I'm ready,\" Dawn said, coming down the stairs.\n\nWe drove downtown to the limo lot. Lori and several of the drivers were showing people the insides of the limos. I went into the building and looked around. Everything looked great.\n\n\"Things are going great,\" Lori said when she walked up to me.\n\n\"There seems to be a lot of people walking around looking,\" Dawn said.\n\n\"We are running some ads on the radio today. Everyone that comes by gets a free ride around town in a limo, and they get to put their name in a drawing for a free night on the town.\"\n\n\"Great idea,\" I said.\n\n\"I also had some of the drivers visit the local wedding shops and drop off some drawing boxes. We are going to have a drawing from those tickets for our luxury wedding package. The limo will be provided for the wedding and a party bus for both the groom's party and the bride's party.\"\n\n\"That should get you a lot of names to contact,\" I said.\n\n\"I think it will. We have had some engaged couples come by to check us out.\"\n\n\"Good thinking.\"\n\nI walked around and took some photos of everything that was happening. Amy and Samantha showed up about 5:00 to check everything out. They went around and checked all the limos.\n\n\"Hey, did you know the backseats of the Hummer and Escalade stretch limos fold down to make a bed?\" Samantha asked me.\n\n\"Yes...\"\n\n\"We'll have to try that out!\"\n\nWe hung out, and I took plenty of photos. About 6:30, we decided to head home.\n\n\"Let's stop somewhere to eat,\" Dawn said.\n\n\"What would you like?\" I asked.\n\nThey decided on a steak house. Dawn and I followed the girls to the restaurant, and we went in and sat. \n\n\"I have an idea for something?\" Samantha said after we ordered.\n\n\"What?\"\n\n\"One weekend...let's rent that stretch Hummer for an evening.\"\n\n\"And go where?\" I asked,\n\n\"Nowhere. Let's just ride around town and have sex in the back all evening.\"\n\n\"Sounds like fun,\" Dawn said.\n\n\"You set it up,\" I told Samantha.\n\nAfter we ate, we all headed home. Everyone was tired from the previous night and being up early. We all headed to bed.",
        "*****\n\nTuesday morning, Dawn had gone to the university, and the girls had classes. I was in my study working when the gate buzzed. I looked up, and it was Angie. I went to the door and waited on her.\n\n\"It's cold today,\" she said, coming into the house.\n\n\"I'm glad you came by.\"\n\n\"I got horny. Where is everyone?\"\n\n\"At school.\"\n\n\"I wanted to tell Dawn about Ryan's huge cock.\"\n\n\"They'll be home soon.\"\n\nI took Angie's coat and walked her to the den.\n\n\"I called Brenda and Sherri. They said they would call Hannah today,\" I told Angie.\n\n\"Good. If she can sell, she should make some good money.\"\n\n\"I think she will do great.\"\n\n\"What time will everyone be home?\" Angie asked again.\n\n\"Soon.\"\n\n\"Good,\" Angie said, then started taking off her clothes.\n\nShe grabbed my hand and led me to the big bedroom downstairs, then she crawled up on the bed and spread her legs.\n\n\"Eat me, please, James.\"\n\nI laughed at her and moved between her legs. Angie loved me eating her pussy, so I took my time and got her off several times. She then climbed on top of me and was working her pussy hard on my cock.\n\n\"I thought that was Angie's car,\" Dawn said when she walked into the bedroom.\n\nAngie kept working her pussy.\n\n\"Hi, Dawn,\" Angie said.\n\n\"Hi, Angie.\"\n\n\"I was horny, so I came by.\"\n\n\"Good for you.\"\n\n\"I need to tell you about something...after I get off.\"\n\nDawn smiled and left the bedroom. Angie worked her pussy on my cock for a very long time. She came four times before I filled her full of cum. After we cleaned up, I walked Angie to the kitchen, and we sat at the bar. Dawn and the girls were fixing something to eat.\n\n\"Angie, if you are here, have you stopped working?\" Dawn asked.\n\n\"At the end of the year.\"\n\n\"Good. Now you can work on getting pregnant.\"\n\n\"We are...but we are going to have a little fun first.\"\n\n\"It looks like it.\"\n\n\"I stopped by to thank James for helping my friend get a job.\"\n\n\"Oh?\"\n\n\"A lady we know is looking for a job, and I told her about the lingerie store. James gave me Sherri and Brenda's number.\"\n\n\"That's good,\" Dawn said.\n\n\"She is a tall hot lady. She and her husband like the idea of her working in lingerie.\"\n\n\"How did you two meet?\" Dawn asked.\n\n\"Brian and I have been fucking them. He works with Brian.\"\n\n\"So you are having some fun?\"\n\n\"Yes, we are. Dawn, her husband's cock is much bigger than James'.\"\n\n\"I guess you are enjoying that.\"\n\n\"I am, but Brian seems to be enjoying him fucking me.\"\n\n\"Is that the reason?\" Dawn asked.\n\n\"It is part of it. Dawn, Brian likes for me to tell him how much I enjoy James' cock.\"\n\n\"Are you okay with that?\"\n\n\"Yes, because I love it in me!\"\n\n\"Is Brian having you tell him about this other guy?\"\n\n\"Yes. We have some incredible sex afterward.\"\n\n\"Okay. Just make sure everything is going well,\" Dawn said.\n\n\"Dawn, is that part of what you enjoy? Knowing his big cock is pleasing another woman?\"\n\n\"That is part of it. But Angie, I also enjoy knowing my husband is having a good time.\"\n\n\"I enjoy knowing Brian is having a good time. I enjoy watching him fuck this other lady we have been hooking up with because she loves his big cock.\"\n\n\"Angie, make sure you and Brian are comfortable with everything,\" Dawn said.\n\n\"We are.\"\n\n\"Do you want something to eat?' Amy asked Angie.\n\n\"Yes, I worked up an appetite!\"\n\nWe all talked while Dawn and Samantha made dinner. \n\nLater, we were all sitting at the bar eating.\n\n\"Dawn, you would love Ryan's huge cock...you two too,\" Angie said. \"He has got to be three or four inches longer than James.\"\n\n\"Damn,\" came from Samantha.\n\n\"Can you get all of it in you?? Amy asked.\n\n\"Not all of it. But I am wokrng on it!\" They laughed. \n\n\"Dawn...I asked James if we could find a reason for Hannah and Ryan to come by the house...so you all could fuck him.\"\n\n\"Wouldn't that be a little obvious?\" Dawn asked.\n\n\"Who cares!\" Amy exclaimed.\n\n\"I don't think it would be a problem,\" Angie replied.\n\n\"Can they come?\" Samantha jumped in and asked.\n\n\"Angie, is this couple cool about everything? I mean, they are not going to talk, are they?\" I asked.\n\n\"Oh, no. They are cool about everything.\"\n\n\"So, if they saw you fucking your brother-in-law, they wouldn't say anything?\"\n\n\"Oh, no.\"\n\n\"You're sure?\"\n\n\"Yes.\"\n\n\"Hmmm,\" came from Dawn.\n\n\"Are you thinking about it, Dawn?\" Angie asked.\n\n\"Maybe.\"\n\n\"Cool!\" Came from Samantha.\n\n\"Angie, what are you and Brian doing this weekend?\" I asked.\n\n\"Nothing this weekend.\"\n\n\"Why don't the four of you come by Friday about 5:30. I'll make bar-b-cue, and the four of you can stay all weekend.\"\n\n\"Oh...\"\n\n\"You don't want to fuck all weekend?\" Dawn asked.\n\n\"Oh...well...sure. I'm not sure about Ryan and Hannah, though.\"\n\n\"We can probably talk them into staying!\" Amy said and laughed.\n\n\"I'll ask Brian.\"\n\n\"Do that, and I will call you Thursday,\" Dawn said.\n\nAmy and Samantha giggled.\n\nAfter Samantha and Amy finished eating, they took Angie back into the bedroom.\n\n\"Are you two going to class tonight!\" I yelled.\n\n\"Yes!\"\n\n\"I hope she and Brian are being careful,\" Dawn said.\n\n\"I think they are. I'll call Brian and talk to him.\"\n\n\"Are you going to tell him about the party?\"\n\n\"I'll tell him...but tell him to not tell Angie.\"\n\nAngie was getting dressed about 6:30. Amy and Samantha had rushed upstairs earlier to get ready then ran out the door. Once Angie was dressed, she sat next to Dawn. \n\n\"It's okay if I come over and fuck James, isn't it?\"\n\n\"Sure, as long as Brian knows,\" Dawn replied.\n\n\"I told him I was coming by. He has a meeting this evening.\"\n\nDawn and I sat and talked with Angie for a while before she headed home.\n\nI wanted to stop here because it will take me some time finish with the next part.\n\n*****"
    ],
    "authorname": "drmac100",
    "tags": [
        "lottery"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/life-after-the-lottery-ch-72"
}
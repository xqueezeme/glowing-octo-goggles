{
    "title": "Is She Smiling at Me? Pt. 05",
    "pages": [
        "This story is the fifth installment of the \"Is She Smiling at Me?\" series. As dearly as I wish I could say any part of the following is based on actual events it is, in its entirety, a work of fiction. Any resemblance to real people is purely coincidental. I love hearing feedback from my readers; please feel free to leave comments or contact me with your thoughts or suggestions.\n\nSpecial thanks to my new editor, SissyKaty. She has been an absolute pleasure to work with and has gone above and beyond the call of duty to help me make this story the best it can be. Thanks Katy.\n\n*****\n\nI let myself into the apartment, just home from the day's work, and found Alex in the kitchen drinking some kind of vegetable smoothie concoction. She was wearing black yoga pants, the tight fabric magnifying the beauty of her already exemplary ass and causing me to marvel at how she concealed her substantial endowment so effectively. A pink sports bra covered her small breasts, accompanied by matching ankle socks, and her rich mahogany hair was tied back in a ponytail, completing the athletic look. The lack of sweat on her pale, freckled shoulders indicated she was headed out for a run rather than coming back from one. She hadn't seen me yet, so I approached her from behind and grabbed her around the stomach.\n\n\"AHH!\" She screamed before the sudden realization came over her, plucking an earbud out of her head as she turned. \"Jesus Christ, Matt!\"\n\n\"Sorry, baby.\" I chuckled, playfully smacking her on the butt.\n\nAlex looked a little irritated with me, so I leaned in to kiss her adoringly on the cheek and give her an affectionate hug. She got over it quickly and hugged me back, going as far as to grab me a beer from the fridge as token of her forgiveness. I took the bottle and sat at the table, talking with Alex for a while.\n\n\"Don't forget,\" She said, sipping her smoothie, \"We have to be there for the delivery people at ten tomorrow.\"\n\n\"I know babe, I'm going to pick up the truck first thing tomorrow. I'll come back to get you and Liz, and hopefully we'll have time to take a load over in the morning.\" I recited the plan for what felt like the hundredth time.\n\nIt had been about a month since the girls asked me to move in with them. We did a lot of thinking about whether we wanted to stay here at their place or find a bigger apartment. The decision was practically made for us when we found, what all three of us agreed to be, the perfect apartment while digital window-shopping.\n\nTomorrow was moving day, and Alex was a little stressed about the whole ordeal. She was classic Type A and as such had fussed over every little detail since the decision was made. I identified with Alex; I had those tendencies myself. Everything though, was carefully planned so that tomorrow would go as smoothly as possible. We'd rented a truck to move whatever we were taking from the girls' apartment, since a lot of their furniture was earmarked to make the move with us. My apartment had already been cleaned out and my things taken to the new place. Delivery of our new bed and assorted furniture items had all been arranged for the next few days. Most of the girls' apartment was already boxed up, and I'd enlisted the help of my friend Josh to assist with the heavy lifting.\n\n\"Sorry,\" Alex began, sitting on my lap and putting an arm around me. \"I'm just stressed out.\"\n\n\"It's okay, beautiful.\" I squeezed her, kissing her lips softly. \"It's gonna be fine. We're a well-oiled machine.\"\n\nAlex laughed and kissed me again, playfully slipping her tongue between my lips for a moment before resting her forehead against mine. We went over a few more last-minute details, and she seemed to feel more comfortable knowing the plan was well thought out. We finished our drinks and Alex got up from my lap.\n\n\"Where's Liz?\" I asked as she rinsed out her glass in the sink.\n\n\"Oh, right!\" A mischievous smile spreading across her face as if she had suddenly remembered a dirty secret. \"She's waiting for you in the bedroom.\"\n\nI raised an eyebrow inquisitively, but Alex gave up no further information.\n\n\"Okay, I'm off.\" She said, leaning down to kiss me again. \"Love you.\"\n\n\"Love you, gorgeous.\" I patted her on the butt and watched her depart, checking out her pert little ass displayed exquisitely in her tight yoga pants as she slipped out of the kitchen.\n\nI smiled to myself and stretched, getting up from the table and putting away my empty beer bottle. As I headed down the hall to find Liz, my phone buzzed in my pocket. I pulled it out to see a text from Alex that read simply 'Enjoy!' followed by a winky-face emoji. I pushed open the door to the bedroom and laughed out loud at what I found.\n\nLiz was fully nude, tied front-down to the mattress with the restraints I had fastened to the bed for exactly this purpose. Legs spread wide; her gorgeous ass was propped up in the air by our wedge-shaped sex pillow with her back sloping down so her chest was flat against the bed. Alex had left her there with a butt-plug inserted into her ass and a ball-gag and blindfold fastened around her head. Liz's hard cock was pulled back, pointing straight down to the mattress against the back of the pillow, a glistening trickle of precum leaking down the black velvet material leaving a wet smear. My own cock immediately shifted in my pants at the sight of petite, sexy Liz bound and presented thus.\n\n\"Well hello, beautiful.\" I chuckled, sitting next to her on the mattress, brushing her brunette hair over her ear when she turned her head to the sound of my voice.\n\n\"Hey baby!\" Liz cooed happily when I pulled the ball-gag out of her mouth. \"How was your day?\"\n\nI laughed again at the absurdity of the casual question, given the circumstances.\n\n\"It just got a whole lot better.\" I smiled, bending to kiss her softly on the cheek. \"How long did Alex leave you like this?\"\n\n\"I don't know, I can't see the clock.\" She replied with a frustrated huff. \"Maybe an hour?\"\n\n\"Poor baby!\" I chuckled. \"Okay, I'm going to take a shower and I'll be right with you.\"\n\n\"What?!\" She exclaimed incredulously. \"Matt, no, she wouldn't let me cum and-\"\n\n\"Shh.\" I cut her off, putting the gag back in her mouth. \"I'll be back.\"\n\nI smacked Liz hard across the ass, leaving a red handprint across her cute cheek, the loud slapping sound reverberating in the nearly empty room. She yelped in surprise, a small squeal that bled around the edges of the gag. I left the bedroom to the sound of frustrated groans, muffled by the obstruction between her lips. I smiled to myself and shook my head as I closed the door behind me, heading to the bathroom. Of course, I wanted nothing more than to crawl on top of Liz and empty myself inside her; but Alex had put in all that work to torture her, she would be disappointed if I just gave in right away. I showered, divided between wanting to rush to get back to Liz as soon as possible, and wanting to dawdle and drag out her sweet torment.\n\nI did take my time, finally getting out of the shower and toweling off. My cock was semi-erect already, thinking about what I was going to do to Liz back in the bedroom. The dominant/submissive dynamic had never really appealed to me much in the past, but Liz loved it and that made it fun. Besides, I loved her and there was nothing I wouldn't do to make her happy, so I had grown into it over time. I wrapped the towel around my waist and went back down the hall to Liz.\n\n\"So, what did you do that Alex decided you needed to be punished for?\" I asked as I sat next to her on the bed, slipping the gag out of her mouth.\n\nWhen the mood struck her, Alex would arbitrarily pick something to justify \"punishing\" Liz. It could be anything; the week previous Alex handcuffed her so that we could take turns fucking her throat and cumming on her face because she left dirty dishes in the sink. We always left dirty dishes in the sink. There was simply no escaping Alex's wrath.\n\n\"I didn't put my shoes in the closet when I got home today.\" Liz answered, affecting a tone of shame.\n\n\"Well, baby, you should have known better.\" I responded, trying to keep a straight face and my tone even. \"Or do you do these things on purpose, knowing Alex is going to punish you for them?\"\n\n\"No!\" Liz protested.\n\n\"I think you do. I think you get off on being treated like this, you little slut.\"\n\nLiz visibly shuddered with pleasure, her face going bright red. It was the first time I had played that card since I witnessed how positively she responded when Alyssa called her a slut the night of her birthday party. It was exactly the reaction I was hoping for. I lightly traced up her thigh with my fingertips, feeling her quiver at my touch as I wound my way up between her legs, over her balls and perineum, finally drawing back and spanking her firmly across the cheeks.\n\nAgain, Liz yelped in surprise, breathing heavily as her excitement mounted. I pulled the towel out from under me and wrapped it around her elegant neck, twisting the ends and pulling away from her, using just as much force as I was comfortable with as I choked her. I slapped her hard on the ass again, the clap echoing over another sharp yelp. I spanked her a few times, alternating cheeks until her entire behind was beet-red and she was practically vibrating with mad desire.\n\nLiz's arousal was as contagious as it was electric, and I found myself with a throbbing erection from her reaction to the spanking I had just administered. I got up and repositioned myself at the top of the bed, sinking low on my knees so my cock was in line with her face. Seizing a handful of hair, I pulled her head up from the mattress. Liz began to gasp, but no sooner had her mouth opened then I shoved myself inside, burying my cock all the way down her throat in a quick thrust. The move surprised her; she very nearly gagged, but she quickly recovered.\n\nI fucked her face vigorously, pushing myself down until her cute little nose flattened against my pubis before withdrawing again. Occasionally I would pull out entirely, thick strands of saliva connecting my cock to her lips, and smack her across the face with my raging erection before diving back in without warning. The sensation was incredible; thrusting myself as deep as I could at a manic pace, feeling her tonsils stretch over me, hearing my cock hitting the back of her throat over and over in rapid succession.\n\nPulling out one last time, Liz gasped deeply, swallowing for air while I slapped my cock against her lips, leaving shiny wet spots where her spit transferred to her face. She giggled happily, too excited to keep up the charade of helpless victim as I crawled over her and positioned myself between her legs. Bending down to her ass, I bit one cheek roughly, then the other. Each nibble earned me a yelp and a giggle as my teeth sunk into her supple flesh.\n\nWhen I pulled the butt-plug out of Liz I shouldn't have been surprised to see a thick glob of cum escape and run down to her balls. Obviously, Alex had deposited a load inside her before she plugged her up. As I righted myself between Liz's legs, her glistening hole winked at me, another rivulet of cum oozing out. I wiped a dollop of the thick, white cream from her and reached forward to slip my fingers into her mouth as I lined myself up with her entrance. Liz moaned appreciatively, sucking my fingers clean while I used what was left behind as lube, and penetrated her. She gasped as I slid easily inside, pushing on until I was completely enveloped in her warm, velvety ass.\n\n\"You like that cock in your ass, dirty little slut?\" I growled into her ear.\n\n\"Mhmm...mmfhh.\" Liz nodded emphatically, trying to push her ass back onto my cock as hard as she could.\n\nPutting one hand on Liz's back between her shoulder blades, I pinned her to the bed while I found the ends of the towel and pulled back to choke her again. I pounded into her roughly, fucking her as deep and hard as I could while she whimpered with uncontrollable ecstasy. Knowing I couldn't last long with all the excitement, I shifted my weight forward, searching for the right angle to really slam into her prostate. I could tell I hit my mark when Liz cried out and her legs began to tremble spastically. As I drove into her forcefully, Liz emitted a cry or yelp with each violent push into her little body, the whole bed creaking as it bounced along with us.\n\nIt only took a few minutes more before Liz let out a long, wavering moan. Her muscles tensed and her ass squeezed me powerfully as she contracted. She came so hard I could hear the splash of cum hit the bed sheets below while I thrust into her depths mercilessly. She whimpered loudly as her climax ripped through her, nearly drowning out the clapping sound of my pelvis impacting against her firm little ass. As her orgasm tapered, I slowed my pace, making shorter strokes deep inside her, letting her recover just a little.\n\n\"Oh my God...\" Liz panted, her voice shaky.\n\n\"I'm not done with that ass yet, little whore.\" I whispered harshly into her ear, pulling her head back by her throat and licking a wet smear across her cheek.\n\n\"Oh God!\" Liz cried as I picked up where I had left off just moments ago, driving my cock into her violently.\n\nI had very nearly cum inside her when she was contracting on my cock, barely buying myself any time as I slowed down for the few moments that I did. Now though, I had the opportunity to make her beg for it. I fucked her hard and fast, pistoning into her tight little ass until I was back to the top of the mountain, ready to crest the peak.\n\n\"Mmm,\" I growled, \"You want my cum in your ass, slut?\"\n\n\"Oh - God - Yes!\" Liz moaned, stuttering syllables between my hard thrusts into her.\n\n\"Beg for my cum, dirty little whore.\"\n\n\"Wh-at?\"\n\n\"If you want my cum so bad, you'll beg for it. Tell me how much you want it.\"\n\n\"Matt - Please! I need - your cum - inside me! Please!\" She pleaded; the raw, genuine need obvious in her voice.\n\nWith that I jerked into Liz, slamming into her ass as my cock exploded, pulsing so hard it ached when the first blast of cum rushed through it. I was pressed firmly against her cheeks, humping into her raggedly as I spilled my load as deep as I could reach inside her. Grunting myself empty, waves of orgasmic rapture crashed over me, feeling my cock twitch with each jet of cum I squirted into her colon. When the seizure of pleasure finally subsided, I collapsed against Liz's back, panting heavily.\n\nLiz's legs were trembling against mine; she twitched with aftershocks as she struggled to catch her breath. I laid against her for a bit, my chest heaving against her back, both of us slick with perspiration. When I was ready to get off her, I nuzzled into her shoulder and kissed her neck, tasting her sweet and salty sweat on my tongue, and withdrew from her ass slowly. Reaching back to unfasten the cuffs that bound her ankles, I could feel the tremors run through her legs before freeing her wrists.\n\nAs soon as she was free, Liz pulled the blindfold off and pushed up off the bed, throwing herself against me and hugging me tight as her lips slammed into mine, hitting me so hard we both fell back onto the bed together, laughing and giggling. She kissed me with intense passion, our tongues meeting and entwining in a wet embrace.\n\n\"Oh my God, you were amazing!\" Liz exclaimed joyfully. \"Thank you!\"\n\n\"It's still a little weird for me, being rough like that with someone I love.\" I replied, gently bushing her hair behind her ear as I gazed into her big doe eyes.\n\n\"You're looking at it the wrong way.\" She informed me, smiling her illuminating smile. \"You can be rough with me like that because you love me.\"\n\nI smiled back at her and kissed her on the forehead, realizing once again that young, bubbly, adorable Liz somehow understood more about life than I did.\n\nLiz nuzzled her head into my shoulder, cuddling up to me with her arms wrapped around me. I held her close; one hand stroking her hair, softly kissing the top of her head. When she finally felt like her knees could support her weight again, we went to the bathroom and I took my second shower. We stood under the warm water holding each other for a long time, Liz leaning into me for support and snuggling lovingly against my chest. She seemed especially cute and amorous after the wild sex we had just shared, giggling and purring as I washed the lube, cum and sweat from her body.\n\n*****\n\n\"Just shove it in the box.\" Alex said impatiently.\n\nLiz and I stopped what we were doing and looked at each other, trying not to laugh. Alex was stressing out again and we both felt now was not the time for immature jokes. It was moving day and we were cleaning out the last of the bedroom to take with us on the first trip of the day to the new apartment, where I would leave the girls to be there for the delivery people before meeting up with Josh and coming back for the heavy lifting.\n\nWe got the bedroom boxed up and loaded into the truck with the rest of the kitchen and bathroom stuff I had already packed in. There was plenty of time to get to the new place and unload before the delivery people were supposed to show up. Alex finally started to relax when we hit the road, satisfied that things were moving according to schedule. I knew the odds were that the deliveries would run late anyway, but I kept my mouth shut lest I risk getting her upset again. By the time that happened I would be back at the old place with Josh loading whatever furniture we planned on keeping into the truck.\n\nSome twenty-odd minutes later, we carried the first boxes from the girls' place into our new home. It was a beautiful loft apartment, very open concept with exposed brick walls, pipes that ran along the length the high ceiling and huge industrial style windows. The only walls on the main floor were behind the spacious kitchen area, concealing a half-bath and closet. At the end of the long space, a spiral staircase led up to the bedroom area; a mezzanine over the kitchen and lower bathroom, about half the length of the main floor, enclosed with a frosted glass railing.\n\nPossibly my favorite part of the place, next to the amazing kitchen with its island and miles of counter space, was the upstairs bathroom. The tiny, walk-in stall shower at the girls' apartment was, in a way, the genesis of the idea to move into a bigger place, and in that regard, we had done exceedingly well. The shower in the upstairs bathroom was a dark, mosaic tile construction, more than big enough for the three of us, complete with a built-in bench, a wide waterfall style shower head and floor-to-ceiling glass walls.\n\n\"Oh my God, I can't believe this is our new home!\" Liz squealed, doing a slow pirouette as she took in the entirety of the space with a joyous look.\n\nAlex and I looked at each other and smiled, her reaching out to squeeze my bicep affectionately. Liz's happiness was infectious, and it warmed both our hearts to see her so excited. I carried a box of toiletries over to the bathroom and set it down outside the door, joining Liz at one of the massive windows while she gazed out through the panes of glass at the city skyline. She turned to me, her smile illuminating the room far more than the overhead lights could ever hope to and jumped into my arms giggling gleefully.\n\nI carried her over to Alex and set her down, pulling both girls in for a hug and kissing them each. A buzzing in my pocket interrupted the moment and I stepped away to check my phone. A text from Josh announced his arrival and I told the girls I was going down to let him in, leaving them in an amorous embrace, staring lovingly at each other as I slipped out the door.\n\n\"Hey, buddy.\" I greeted my friend, finding him leaning against his car smoking a cigarette with the cute blonde from Liz's birthday party. \"Rachel, nice to see you again.\"\n\nAlex had introduced the two at the party and they ended up going home together that night. Apparently, they really hit it off and had been seeing each other ever since. I was happy for my friend; Rachel seemed like a solid girl. She had come to the party as a friend-of-a-friend, and neither Alex nor Liz really knew her, but she none-the-less offered to come help us get settled into the new place. I figured we could use any help we could get, but more importantly, I hoped we could all bond as friends.",
        "\"Hey, man.\" Josh smiled, flicking his butt to the curb before giving me the bro hug.\n\n\"Hi, Matt. How's it going?\" Rachel greeted me with a hug.\n\n\"Heh, it's going. The girls are upstairs, we're expecting the delivery guys...\" I paused to check my watch, \"In about an hour, I guess. Still got some boxes in the truck to unload before we go do the furniture.\"\n\n\"Let's do it then.\"\n\nWe each took a box up to the apartment where Alex and Liz greeted the couple warmly, taking the box from Rachel and hugging her as though they were old friends. I knew my girls would make her feel welcome and I smiled watching the interaction. Liz hugged Josh and Alex took his hand, thanking him for coming to help with the move. We all went back down for the remainder of the boxes and emptied the truck so Josh and I could head back to the old apartment. The girls were already unpacking, setting up the kitchen and conversing animatedly when we left.\n\n*****\n\nIt took Josh and I the rest of the morning and into the afternoon to get the furniture from the old apartment either loaded onto the truck if we were keeping it or disassembled and taken out to the garbage area if we were not. Everything went smoothly enough, but it was a laborious and time-consuming process. At quarter after ten I had gotten a text from Alex that read 'They're late!' with a frowny face emoji, followed twenty minutes later by a second text; 'False alarm' and a picture of a couple burly delivery guys carrying a large box into the apartment. When we finally got back to the new place, we found the girls lounging on the new black-leather couch, each with a glass of wine.\n\n\"What is this?\" Josh said teasingly while we wrangled a shelving unit through the door, \"You ladies on break or what?\"\n\n\"Funny, smart guy.\" Rachel quipped back, sticking her tongue out at us.\n\n\"Actually, we're pretty much done.\" Alex added with a proud smile.\n\n\"All of it?!\" I asked with surprise.\n\n\"Everything that could be done without you, yeah.\"\n\n\"Awesome.\" I said as Josh and I set the unit down near the couch.\n\nI went over to my girls and gave each of them a kiss before going to the kitchen for a couple beers for me and my friend. Handing Josh his bottle and twisting the cap on my own, I was rewarded with the satisfying hiss of gas escaping when the seal broke. I leaned against the kitchen island and took a long draught, suddenly realizing how parched my mouth was as the beer cut through the dust and phlegm. Liz got up off the couch to come over and be with me, hugging me tight around the chest.\n\n\"Hey, gorgeous.\" I said softly, kissing the top of her head.\n\n\"You smell.\" Liz said quietly, her face buried in my shoulder.\n\n\"Yeah.\" I chuckled. \"I need a shower.\"\n\n\"No...\" Liz said quietly so only I would hear, \"You know I love your smell.\"\n\nShe looked up at me with a bright smile, her big brown eyes twinkling with a hint of arousal. Liz, both girls really, had a magical way of making me forget whatever it was I was doing and drawing me fully into the moment with them, isolated and insulated from whatever was going on around us, with something as simple as a subtle look. I bent to kiss her softly, slipping her just a flirting hint of tongue.\n\n\"Oh shit,\" I exclaimed with a sudden realization when the intimate moment with Liz had passed, \"Where's the new bed?\"\n\n\"The delivery guys brought it upstairs for us.\" Alex answered with a satisfied smirk. \"It's a good thing you guys weren't here; men will go out of their way for some pretty girls.\"\n\nI laughed, acknowledging the truth to the statement.\n\nIt was a couple hours more before Josh and I got all the furniture up to the apartment and set up where the girls wanted it, but our new home was really coming together. The living room area was complete with a new L-shaped couch and matching loveseat across from the old TV and entertainment unit, the kitchen was fully stocked and already looking lived-in, both bathrooms were full of various products and toiletries. All that was left was finishing up the bedroom area.\n\nJosh and I had gone upstairs to put the new bed together, tossing the heavy cardboard packaging over the rail as we cut it open. By time we got the frame assembled Alex had come up to relieve Josh, telling him to go hangout with Rachel and thanking him again for all his help. Her arrival was well timed, and when Josh left, I started drilling holes for eyelets at strategic locations around the bed frame to install discrete restraints for playtime. I winked at Alex, and she flashed a playful smile as I tucked nylon straps into the edges of the frame to be hidden by the mattress.\n\nWe wrangled the huge mattress onto the frame -we had elected to go with a king-sized bed, a little roomier of a playground then the girls' old queen-sized- and stepped back to look at our work. I felt Alex's hand slip into mine and I looked over at her. She was grinning happily, a sparkle in her brilliant green eyes as she looked back at me. Stepping into me slowly, she pushed me back onto the bed until I sat on the edge of the mattress, crawled onto my lap to straddle me, and wrapped her arms around my shoulders, never breaking eye-contact as she stared lovingly into my eyes.\n\n\"Thank you.\" Alex spoke softly, touching her forehead to mine.\n\n\"For what?\" I chuckled, squeezing her around her slender waist.\n\n\"Just for everything. Thank you.\"\n\n\"I'm so happy we did this.\" I responded quietly, our lips slowly drawing nearer.\n\n\"Me too.\" She whispered just before our lips met.\n\nI kissed Alex deeply, slow, intimate passion consuming us both as I felt her body press into mine. I was glad her tension had melted away, and I was elated that finally, officially, the girls and I lived together. Really, we had practically lived together for months, but in this new place we would build our lives and our home together, a new chapter in our amazing relationship. Of course, I was thinking none of that while Alex's warm tongue danced in my mouth and my cock shifted in my pants at the feel of her body grinding into mine. Eventually we came to our senses and broke off the kissing and petting, Alex climbing off me and taking my hand to lead us back down the spiral staircase.\n\nJosh and Rachel stayed for dinner, and we ordered pizza for everyone. Alex surprised us with a bottle of champagne she had stashed away for the occasion, toasting to the new place and new friends. The five of us hung out for a couple hours, talking and laughing; our new apartment already feeling like a warm and welcoming home. I was happy to see the girls were bonding with Rachel as they made plans to go shopping together next weekend. It was a fun evening after a long day's work, and I sat back in my seat, happily watching the animated exchanges going on around the table.\n\nWhen it came time for our helpers-slash-guests to leave, the girls and I said our thanks and goodbyes, and the couple departed, leaving us alone for the first night in our new apartment. Alex was happy, and Liz was absolutely giddy, buzzing with energy. I pulled both girls in for a hug before we poured another round of drinks and retired to the couch; flirting and teasing each other. We cuddled together for a while, enjoying each other's company in our new abode. I was in the middle with my beautiful girls on either side of me, goofing off and laughing together.\n\n\"Okay!\" Alex exclaimed with a laugh, \"How about this? What is your favorite thing we do, sex-wise?\"\n\n\"Ughhh!\" I groaned dramatically.\n\n\"What?\" Alex laughed again.\n\n\"How am I supposed to narrow that down to a single thing? It's like asking 'What is your favorite cheese?' What are we talking about? On a sandwich? What kind of bread? Or are we making a salad? Maybe for snacking on with crackers and fancy wine?\" I replied, earning another giggle from both girls.\n\n\"I know mine.\" Liz said, affecting a shy grin.\n\n\"Okay baby, what's yours?\" Alex looked past me to Liz.\n\n\"When you guys tie me up and drive me crazy teasing me and using me however you want. That's definitely my all-time favorite.\" Liz answered, still wearing a bashful smile.\n\n\"That is a good one.\" I nodded in agreement, smiling at Liz's sudden modesty.\n\n\"All right, Matt. Liz went, you're up.\"\n\nI wracked my brain trying to come up with an answer I felt confident about. In our vast repertoire of sexual experiences there was so much to choose from; I loved it when the girls came in my mouth, eating their asses always got me rock hard, the look on either of their faces when I penetrated them, Liz's complete and total lack of a gag reflex...\n\n\"Okay, okay.\" I said with a chuckle. \"But I'm doing one for each of you, it's too hard to pick one thing. Deal?\"\n\n\"I'll allow it.\" Alex agreed, Liz nodding her approval.\n\n\"First, but in no particular order,\" I paused to sip my drink, letting the suspense build while the girls awaited my answer. \"Liz's footjobs. It blows my mind every time how good she is at that.\"\n\n\"Oooh, good answer.\" Alex said while Liz beamed proudly at me, her big eyes twinkling as she bit her lower lip seductively.\n\n\"And second has to be when you cum in my ass.\" I smiled at Alex. \"Especially when I can watch your face while you do it, and particularly if you've already made me cum.\"\n\n\"Really?\" Alex replied, surprised by my answer.\n\n\"Yeah. It makes me feel...\" I paused, searching for the words to properly explain the flood of emotions I experienced when she emptied herself inside me. \"Proud? I guess? But also, grateful. I don't know how to explain it. It feels like love. An overwhelming rush of pride, gratitude and love.\"\n\n\"I totally get that.\" Liz added, a dreamy look on her cute face.\n\n\"I guess you do.\" I chuckled, tousling her hair affectionately.\n\nIt occurred to me in that moment that what I had just tried to describe is how Liz must feel all the time when she was servicing us. I smiled inside, suddenly understanding my adorable Liz a little better. I leaned over to kiss her softly, our tongues meeting for a flirting instant before backing off. When we parted, she smiled brightly at me and snuggled into me with my arm around her. My explanation pleased Alex, who was smiling beatifically, warmth and adoration pouring from her brilliant green eyes.\n\n\"I love that.\" Alex replied, beaming at us.\n\n\"Wait, baby, what about yours?\" Liz inquired.\n\n\"Oh!\" Alex said with a start, as if it hadn't occurred to her that she would be expected to provide an answer too. \"I was so absorbed in listening to your answers I didn't even think about mine.\"\n\nShe reached for her drink and took a sip, a pensive look on her face. Liz and I looked at each other and smiled while we waited for her to come up with her answers.\n\n\"Okay, I got it! But I'm doing two like Matt. Liz, the way you can swallow my entire cock and just stay there, massaging me with your throat; that is absolutely magical.\" She smiled lovingly at Liz, who beamed back at her.\n\n\"I nearly went with that myself; she is amazingly talented.\" I chimed in, smiling at Liz who was grinning from ear to ear, clearly loving all the praise.\n\n\"And Matt, I love it when you fuck me. I never cum as hard as I do when you're inside me, but the absolute best is when you're in me, and I'm in Liz, fucking myself on your cock while I fuck her.\" Alex continued with a sultry look on her face.\n\nI smiled at Alex and kissed her tenderly, grazing my tongue against her lip and feeling her melt against me. The three of us cuddled together, enjoying the warm sense of intimacy that followed the disclosure of our favorite sex acts.\n\n\"So, I have a confession.\" Alex began slyly. \"I had an ulterior motive to the question.\"\n\nLiz and I looked at each other, eyebrows raised.\n\n\"I know I've been a little difficult the last couple weeks.\" Alex smiled and pretended not to notice as Liz and I flashed each other a knowing look. \"Between the move and work I've been stressed out.\"\n\n\"Nooo...\" Liz teased playfully, rolling her eyes.\n\n\"Naw, we hadn't noticed.\" I added sardonically.\n\n\"Anyways!\" Alex laughed. \"I'm sorry. It wasn't fair of me, and I want to make it up to both of you. Hence the question.\"\n\n\"Baby!\" Liz exclaimed empathetically, reaching over me to squeeze Alex's arm.\n\n\"Yeah, babe, it's okay. Really.\" I said, touching my forehead to Alex's.\n\n\"So, you're saying there's no need to go out of my way giving you two an amazing night then?\" Alex grinned.\n\n\"Woah, woah, woah!\" I quickly protested, \"Let's not get carried away here. I mean my feelings are a little hurt. Liz?\"\n\n\"Crushed.\" Liz smiled playfully, picking up the thread.\n\n\"I thought so. Come with me, sweetie.\" Alex smiled, standing up from the couch and reaching for Liz, pulling her to her feet before bending down to kiss me. \"We'll be back in a bit, baby.\"\n\nI watched the girls as they headed to the stairs, Liz flashing an excited look over her shoulder as Alex led her away by the hand. I smiled to myself and shook my head, wondering what Alex could possibly have in store. Picking up my drink, I reclined on the couch and tried to be patient waiting for the girls to return, but it was impossible not to be excited given Alex's lead up to that point.\n\nAfter what felt like an eternity, the click-clack of heels on the hardwood floor alerted me to someone coming back down. I turned to see Alex come around the corner of the upstairs railing and my jaw dropped at the sight of her. She was wearing a sexy black fishnet halter camisole; see-through netting from just below her breasts extending up to her elegant neck with a buckle detail high on the chest. Under the net, a thin black band covered her small tits, leaving most of her flat, defined stomach exposed.\n\nSitting low on her hips was a black leather micro skirt, barely enough to cover her pert little ass; a few inches of smooth, alabaster skin showed between its hem and the wide-hole fishnet thigh highs she wore over her long, slender legs. Alex had completed the ensemble with a pair of open-toe stilettos, showing off her jet-black toenails. She had done her make-up on top of everything else, heavy on the eyeshadow and a dark, blood-red shade of lipstick. Taken together, all that black contrasting sharply with her milky-white complexion had a striking effect, a very sexy gothic, almost dominatrix, vibe. My heart nearly stopped as I drank her in.\n\n\"Oh my God...\" I said out loud, earning a wink and a sultry grin from Alex.\n\nMy mind was still trying to process Alex's adopted look when I realized she was holding a leash at her side, the chain drooping down from her hand and disappearing from my line of sight behind the railing. Unsure if I was ready for however Liz looked at the end of that chain, I steadied myself, feeling my pants tighten as my cock shifted and swelled.\n\n\"Come on, sweetie.\" Alex said, tugging on the leash.\n\nWhen Liz came into view, I let out a long, low whistle. Alex had dressed her in a tiny white tube top with built in off-the-shoulder sleeves. The skimpy garment stretched tight over Liz's sizeable breasts and showed off the entirety of her flat stomach; smooth, naked flesh all the way down to an equally revealing white thong. A pair of white thigh-high knit leg warmers I recognized as Alex's covered Liz's slender legs from her thighs down to her heels, half her adorable feet poking out from the open bottoms. Alex had gone as far as to paint the younger girl's toenails white to match the rest of her outfit.\n\nIn addition to the collar fastened around Liz's elegant neck, Alex had bound her hands in front of her with the padded cuffs we often used to restrain her. Liz was smiling brightly, unable to contain her delight as her eyes twinkled with excitement. Her submissive slave-girl look juxtaposed by Alex's dark and edgy motif was strikingly erotic and I felt my cock shift once again, binding uncomfortably in the confines of my underwear. I squirmed in my seat, appreciating the full, three-hundred-and-sixty-degree view of them as they descend the spiral staircase, trying to subtly adjust myself as my member engorged.\n\n\"Jesus Christ.\" I said with a laugh.\n\n\"What's so funny?\" Alex sounded a little nonplussed by my reaction.\n\n\"Nothing at all.\" I smiled, my eyes drifting back and forth between them. \"This is about the sexiest thing I've ever seen. I think you girls broke my brain.\"\n\nAlex smiled warmly at that while Liz giggled happily. She gave the leash a tug, directing Liz to follow her around to my side of the couch. Alex sat next to me, making a show of crossing one slender leg over another. The sexy pose combined with her trademark alluring grin had my arousal climbing to new heights instantly. Liz remained standing, clearly waiting for instruction as to whether or not she could sit. She looked excited as I had ever seen her, ready to burst with sexual energy.\n\n\"Why don't you get us some more drinks, baby.\" Alex said, pulling on the chain to make Liz bend towards us and unhooking the leash from her collar.\n\nLiz looked down at her hands, still bound by the wrists, and had just opened her mouth to say something when Alex cut her off.\n\n\"You'll figure it out.\" She said with a wink.\n\nWhen Liz turned to head for the kitchen I leaned forward and smacked her firmly across her taut little ass, making her yelp and giggle. I looked at Alex with a smirk and she laughed, leaning into me and kissing me passionately. We were still making out when Liz returned, awkwardly setting down a tray of drinks while she navigated the motion with her wrists bound together.\n\n\"You can sit, baby.\" Alex instructed.\n\nLiz turned to sit next to me on the couch, but Alex stopped her.\n\n\"No, no.\" She said with an amused laugh, \"Not on the couch, sweetheart. On the floor.\"\n\nWhat seemed almost cruel to me only served to stoke the fire growing in Liz; she was practically vibrating with delight at being bound and ordered around. I was definitely going to be following Alex's lead on this; she seemed so comfortable and natural in controlling Liz and the effect it had on the younger girl was awe inspiring.\n\nLiz sunk to her knees at our feet, sitting on her legs and looking up at us, her big doe eyes twinkling with anticipation. Alex leaned forward to fasten the leash onto the collar, pulling her near and kissing her deeply, licking Liz's lips with a final, sensual flick of the tongue when they parted. She reached for our drinks and handed mine over, leaning into me with a contented sigh. I smiled and shook my head, taking a sip of the fiery whiskey Liz had brought me as I put an arm around Alex.\n\nLooking at Liz, I noticed her attention had shifted downwards. I followed her gaze and realized she was staring at Alex's feet. I couldn't blame her; our lover's pale, perfect toes came through the wide holes of her fishnets, complimented with the dark, almost reflective black of her nail polish, and looking especially exquisite in heels. Alex still had one leg crossed over the other and was spinning the unsupported foot in small, lazy circles while she sipped her drink. She was watching Liz, teasingly edging her foot closer and closer to the poor girl with each pass.\n\n\"I think Liz wants to worship my feet.\" Alex said to me in a mock whisper, clearly intending to be heard.\n\nI looked back to Liz, her eyes tracking Alex's foot as it spun in its slow, elliptical arc. She was nodding emphatically and biting her lower lip, her desire obvious on her cute face.\n\n\"I think you might be right.\" I grinned at Alex.\n\n\"What do you say, baby?\" Alex teased her.\n\n\"Please?\"\n\n\"Please, what?\"\n\n\"Please, can I worship your feet?\" Liz pleaded earnestly.\n\n\"Of course you can, sweetie.\" Alex smiled at her, lifting her foot to Liz's face.\n\nLiz reached up to take Alex's shoe in her hands, fumbling with the buckle on the tiny strap, impaired as she was by the cuffs binding her wrists. She eventually got it loose and slipped the shoe off Alex, setting it aside blindly; her eyes never left the perfect foot held aloft in front of her face. I watched Liz as she kissed each toe slowly and systematically, working around to the silky-smooth top of the foot, and back around to the sole, kissing and softly licking the skin between the holes in the stockings.",
        "Alex let out a soft gasp when Liz took her big toe deep into her mouth, her tongue snaking out past her lips to lick the ball of Alex's foot before retreating with a wet slurp. With eyes closed and mouth slightly open, a slight smile pulling at the corners of her mouth, the pleasure was obvious on Alex's face. Her eyelids fluttered open to reveal her beautiful emerald eyes shining my direction. She smiled and bit her lip as she stared at me, looking as gorgeous as I had ever seen her, compelling me to kiss her supple lips.\n\nI kissed Alex passionately, slipping my tongue into her mouth as I felt her moan tenderly into mine. The sounds of Liz sucking and slurping on Alex's toes and hearing her soft noises of delight fueled our hunger for each other as we made out with increasing intensity. I felt a hand slide up my thigh, pausing to cup my bulge with a playful squeeze, finally finding my belt buckle and pulling it free with practiced smoothness. In the next second Alex had my button undone and my fly down, slipping her hand inside my underwear and wrapping around my hard cock.\n\n\"Take your pants off, baby.\" Alex said with a playful gleam in her eyes.\n\nRaising my butt off the couch, I slipped my pants and underwear out from underneath me, sliding them off and kicking them to the side. Alex's soft hand found my throbbing member once more, stroking me sensually. When Liz looked up at us, I could clearly see her pupils dilate with excitement as her eyes fixed on my dick, two pale toes between her moist lips.\n\n\"Liz, honey, I bet Matt would love to feel your soft little toes on his cock.\" Alex had noticed Liz staring, her voice dripping with eroticism.\n\nLiz looked up at me, slowly slipping off Alex's glistening toes, a thin string of saliva connecting them to her lip. The look of arousal and anticipation on her face was heartbreakingly adorable; she was even waiting for me to give her permission to pleasure me.\n\n\"Go ahead baby. I want to feel your feet on me.\" I encouraged her with a smile.\n\nThe petite young beauty complied eagerly, shifting over on her knees so she was in front of me and rolling sideways to get her legs out from under her. She laid down flat on her back, her excitement clearly visible through her thong, lifting her slender legs and taking my throbbing cock between her toes with expert control. I exhaled a soft moan at the feeling of Liz's smooth feet stroking me. Her white nails complimented her gorgeous feet, half-covered by the matching white legwarmers, looking stunningly erotic as she worked my cock with slow, deliberate movements.\n\nAlex leaned into me with content sigh, watching Liz do her thing for a moment before nuzzling into my neck. I turned towards her, and she kissed me, deep and slow, slipping her tongue past my lips to flirt with mine. Making out with Alex while Liz administered one of my favorite pleasures was pure heaven and I didn't think it could get any better. As if she read my mind, Alex broke off the kiss and bent down to my lap, kissing, and licking the sensitive head of my dick, her tongue flashing over me and Liz's toes, depositing a wad of saliva before she straightened back up. Freshly lubricated with spit, Liz's soft feet glided easily against my aching cock, taking my pleasure to new heights as Alex's tongue invaded my mouth once more.\n\nThe footjob went on for some time, Alex keeping us lubricated with her spit while Liz worked her magic. Toward the end, Liz braced my cock against the top of one foot and took me between her big toe and second toe with the other, squeezing tight against my frenulum as she stroked me. Liz knew this move always pushed me over the edge in a hurry, and I heard her giggle happily when I gasped at the incredible sensation. My breath became a shallow, panting rasp as the pleasure overwhelmed me.\n\n\"You gonna cum, baby?\" Alex whispered in my ear, sending a crackle of electricity down my spine.\n\n\"I will if you don't stop her.\" I replied with a moan.\n\n\"Why would I do that?\" She whispered again, a playful lilt in her voice.\n\nAlex took the back of my head in her hand and kissed me hard and passionately. Instantly, my orgasm boiled over and erupted, muscles tensing as I felt my cock pulse against Liz toes. I grunted into Alex's mouth; my eyes squeezed tight as wave after wave of climactic bliss crashed over me. I felt droplets of cum rain down on my thighs and heard a gasp and a giggle that could only mean I had sprayed Liz somewhere, my turgid member twitching violently until finally the overwhelming force of my orgasm subsided.\n\nWhen I opened my eyes, Alex was staring right back at me, a look of unadulterated joy in her sparkling green eyes. She giggled and kissed me on the forehead, readjusting so she could snuggle into me. I looked down at Liz, still holding my slowly softening cock between her toes, dappled with wet spots from the load I had blindly sprayed all over her.\n\n\"Liz, baby, you made a mess. Get up here and clean this up, okay?\" The sultry tone was heavy in Alex's voice as she commanded the younger girl.\n\nWe watched as Liz struggled to right herself for a moment, deprived of the use of her arms to aid her, until she finally got herself seated with her legs crossed in front of her. I would have almost felt bad for her if she wasn't wearing a look of sheer delight. She grasped her ankle and lifted a foot to her mouth to lick a gob of my cum off her toes while she stared into my eyes. When Liz had thoroughly cleaned her feet, she got herself back up onto her knees and began licking the droplets of semen from my thighs.\n\nI grabbed the leash near the collar and pulled Liz to me, kissing her roughly. I wanted to thank her for the amazing footjob, but not to shatter the illusion of being our indentured sexual servant. She tasted strongly of my cum as I pushed my tongue into her mouth to dance against hers, feeling her melt against me as I kissed her deeply. When I released her, she sunk back down low on her knees, looking up at Alex and I for her next command.\n\n\"I think Matt and I could use our drinks refreshed, sweetie.\" Alex said passively, as if it were a given Liz would follow the order.\n\n\"You're fucking amazing.\" I told Alex quietly after Liz had taken the tray and empty glasses back to the kitchen.\n\n\"I know.\" Alex smiled, flashing a sexy wink. \"You got another one in you?\"\n\n\"Jesus, I'm not a young man anymore, babe.\" I chuckled, \"Give me a half-hour?\"\n\n\"You got it.\" She laughed, leaning in to kiss me.\n\nWhen Liz returned with our refilled glasses, Alex sent her upstairs to fetch her vibrator. Liz's face lit up with excitement, her big brown eyes twinkling happily as she turned to depart, yelping in surprise when Alex's hand shot out and slapped her across her cute little ass. I watched Liz, practically skipping with delight, as she headed for the stairs.\n\n\"So, what's the play?\" I asked when Liz got out of ear shot.\n\n\"I figured we'll drive her crazy with the vibrator for a while, then go upstairs, tie her to the bed and make her watch while I fuck the cum out of you.\" She said with a sexy wink, looking over the rim of her wine glass at me as she took a sip.\n\n\"Won't get any argument from me.\" I laughed, kissing her cheek.\n\nLiz came back down a few minutes later carrying the little prostate vibrator in her mouth; a brilliant touch I knew Alex would appreciate, her eyes broadcasting her eagerness as she dropped the remote into my hand.\n\n\"Good girl!\" Alex laughed at the sight of her, plucking the toy from her mouth and pulling her down by the leash to kiss her intensely.\n\n\"Now, lay down across my lap.\" She instructed, shifting away from me to make room for Liz to spread out.\n\nAlex handed the vibrator to me as Liz crawled onto Alex's lap, feet towards me with her ass up in the air, tiny goosebumps across her smooth skin speaking to her anticipation. SLAP! The sound echoed in the open space of our new home, followed by another yelp and giggle, a red handprint instantly visible on Liz's taut cheek. Alex kneaded and massaged her ass for a moment before delivering another loud smack to the other cheek. We teased Liz for a while, petting and caressing her backside, rubbing her tight little knot, and tickling her balls while spanking her occasionally.\n\nAfter a few minutes of sweet torment, Liz was quivering at our touch, her body electrified with desire and arousal. I adjusted myself behind her, bending down to bite her playfully on the bottom cleft of her ass as I pulled the thong out of her crack and spread her cheeks. Her beautiful asshole stared back at me, winking with anticipation as I drew near, kissing and nibbling at her smooth flesh.\n\n\"Oh, God.\" Liz gasped when my tongue made contact; a long, slow lick across her little pucker.\n\nImmersing myself in the sensations of Liz's rear against my face, I reveled in her smell and taste while I ate her ass with increasing passion. Almost immediately, I felt my cock stir in response to my lover's moans and shudders of pleasure. Alex looked down at me with arousal burning in her eyes, squeezing Liz's cheeks with the slender fingers as she watched me devour the younger girl. For a long while I kissed, licked, and probed, pushing my tongue into Liz, moaning my own enjoyment as she did hers.\n\nWhen I felt I had prepared Liz properly, I drew back, looking down at her glistening hole slick with my spit. Alex held her cheeks spread wide, and I pressed the bulbous head of the little vibrator into her slowly, watching her open and swallow the toy until it passed its widest point and her body sucked the remainder of the bulb inside her. Liz gasped quietly at the sensation as the vibrator nestled into her, giggling when Alex released her cheeks and smacked her once more for good measure.\n\n\"Okay, baby. Back on the floor.\" Alex purred sweetly.\n\nLiz rolled off Alex's lap, sliding down to the floor and taking her place on her knees. I noticed her eyes fix low and followed her line of sight, realizing for the first time that Alex had forgone panties under the tiny leather skirt. Impressive even when flaccid, her cock hung free, resting against the couch between her spread legs, the pale pucker of foreskin covering her glans. Liz was staring hungrily at it, mouth partially open as she waited quietly for instructions.\n\n\"Mmm...\" Alex hummed, looking down at Liz as she hiked up her skirt, fully exposing her glorious member. \"You want it in your mouth, baby?\"\n\nLiz nodded slowly, never taking her eyes off the beautiful cock before her.\n\n\"Say please.\"\n\n\"Please, baby?\"\n\n\"Have you forgotten already?\" Alex scolded her. \"Please, what?\"\n\n\"Please, can I suck your cock?\" Liz was practically drooling.\n\n\"Good girl.\" Alex cooed, pulling Liz closer by the leash. \"Go ahead.\"\n\nWith her wrists still bound, Liz leaned in to kiss Alex's member, sucking it into her mouth and sliding all the way down until her nose was pressed into the bright orange muff of pubes on our lover's pelvis. For a few minutes Liz just stayed in place, the telltale sign of her tongue moving inside her mouth while Alex moaned softly. Eventually Liz backed off to catch her breath; Alex's cock had disappeared into her mouth flaccid and came back out fully erect and glistening wet.\n\nI couldn't help but feel a little jealous of Liz, my cock shifting again as I watched, but I had had my fun for now, this was her turn. Alex leaned forward, grasping a handful of Liz's hair and pulling her head back, kissing her deeply before pushing her back down on her hard eight inches. The big cock disappeared once more down Liz's throat as Alex gasped in pleasure. The more I watched, the more my arousal grew and my cock began to swell again. Alex took notice and reached for me, taking me in her hand and stroking slowly while she purred and moaned at Liz's ministrations.\n\nSuddenly, I remembered the little remote still in my hand and clicked the button. The sudden vibrations caught Liz off-guard, and her eyes went wide as a muffled moan escaped her lips. She tried to pull off Alex's cock, but the older girl seized the back of her head and shoved her back down roughly. The sound of her cock hitting the back of Liz's throat was such a forceful presence it was almost palpable. A few seconds later Alex released her, and Liz came off of her gasping and panting with pleasure, a thick rope of spit connecting her bottom lip to Alex's cock.\n\n'Click, click, click, click, click.' I cranked up the power until the sound of the vibrations inside Liz was clearly audible.\n\n\"Mmmmm.\" Liz hummed, matching the sound of the toy in her ass, her big eyes glazing over as her little body tensed under the weight of the pleasure she was receiving.\n\n'Click.' I turned the device off.\n\nLiz let out an adorable whimper of frustration and Alex giggled, smiling at me.\n\n\"I didn't say 'stop,' baby. Come on.\" Alex pulled Liz back onto her cock by the chain.\n\nI let Liz blow Alex unimpeded for a couple minutes before I clicked the vibrator back on, eliciting another dramatic reaction from the younger girl as we went through the whole process all over again. Alex and I grinned amusedly at each other, and I leaned over to kiss her, pulling her into me by the back of her head. As our tongues entwined, I felt her moan deeply into my mouth as Liz swallowed her cock. The cycle was repeated again and again until Liz was trembling with raw, sexual energy. By that point, I was more than ready for round two.\n\nFinally, Alex indicated it was time to go upstairs. When Liz struggled to stand after so much time on her knees, I picked her up, feeling dampness against my thigh when her bulge pressed into me. Liz was rock hard, straining so hard against her little thong that her cock pulled the material away from her body in its effort to stand straight out. Precum had soaked through the thin, white fabric, turning it transparent, her member clearly visible through the growing wet spot. I pulled her in by the leash and kissed her deeply, tasting Alex's cock on her mouth, further heightening my arousal.\n\nAlex took hold of the leash and gave it a tug, directing Liz towards the stairs. I followed, staring at Liz's perfect little ass as she ascended a few steps ahead of me, my desire growing as I watched the subtle sway of her hips. Upstairs, I peeled off my shirt and tossed it aside while Alex led Liz to the foot of the bed, kissing her passionately and giving her a smack across the butt.\n\n\"Down on your knees, honey.\" Alex instructed firmly, yet with a sweetness to her voice\n\nThe ever-obedient Liz sunk to her knees, looking up at us eagerly. I clicked the remote on again, and again Liz hummed and moaned, her mouth opening in an expression of pleasure. I took advantage of the opportunity and stepped towards her, slipping my cock between her lips. The petite beauty needed no further prompting and drove herself down the length of my cock, swallowing me in one smooth motion. I moaned at the feeling of her tonsils stretching over my throbbing erection, looking down at her with her nose pressed firmly into my short pubes.\n\nAlex maneuvered the chain between my legs, stepping in behind me until I felt her smoothness against my back and the warmth of her mouth on my neck, making me shudder with delight. The pressure of Liz's face in my pelvis increased; Alex was pulling her into me firmly by the collar, leaving no slack for the girl to back off. Not that Liz needed it; she stared up at me while her throat massaged me, her eyes going in and out of focus as she tried to balance the task at hand with the pleasure of the vibrator buzzing against her prostate.\n\nA moment later I felt Alex slide down my back, lowering herself to her knees behind me. Her strong, forceful hands spread my ass cheeks and I gasped when she buried her face in me, her tongue flicking against my hole. I couldn't believe the eroticism of both my girls on their knees, faces pressed firmly into me as they administered some of the greatest pleasure a person can know; Liz swallowing my cock and Alex eating my ass.\n\n\"Oh, God...\" I moaned softly, overwhelmed with pleasure.\n\nBoth my girls emitted muffled moans of affirmation, expressing their delight in my pleasure. Alex finally gave Liz some slack and she started bobbing on me, my cock hitting and passing the back of her throat repeatedly while Alex's tongue probed me, pushing into me like she was trying to eat me from the inside out. As amazing as the experience was, Alex's efforts were pushing my mind towards one singular focus until it was all I could think about, an obsessive need permeating every reach of my consciousness; I wanted her cock inside me.\n\n\"Alex, I need you inside me, baby.\" I uttered through gasps and moans.\n\nAlex growled animalistically as she stood up, moving to my side and kissing me intensely. Her hand clamped against my ass and I felt a finger seeking out the entrance to my body, pressing into me and slipping inside easily, slick as I was with her saliva. I gasped at the intrusion, one leg shaking slightly at the pleasure of her finger inside me while Liz merrily sucked away at my cock. When a second finger joined the first, I felt I could barely stand, leaning against Alex while we kissed, moaning at the sensation of her fingers in my ass.\n\n\"Liz, get on the bed, baby.\" Alex purred, her fingers slipping out of me, leaving a hollow, empty feeling and a deep longing for more.\n\nI watched as Alex undid the binding at Liz's wrists, just long enough to move her hands from her front to behind her back before fastening them once more. She directed Liz to kneel on the mattress, her back to the headboard, using the eyelets I had installed in the frame to secure the chain for Liz's collar, preventing any forward movement.\n\nWhen Alex backed off, I laid down on my stomach and took the opportunity to liberate Liz's cock, pulling her thong aside to let her throbbing member spring free. She was glistening in the light, coated in a slick of precum. I gave in to the primal desire to taste her, hungrily sucking her into my mouth and moaning my excitement at the enchanting flavor of her sweet nectar. Liz gasped and moaned loudly as I blew her exuberantly, cleaning her cock with wanton abandon.\n\nAlex crawled on top of me; she had stripped off her skirt and top, and I felt her nakedness against mine. Smooth, warm flesh pressed against the entirety of my back, her hard cock nestling in the crack of my ass, her wet mouth on the back of my neck. She righted herself, sitting high on my thighs, and a moment later I felt the cool sensation of lube being massaged against my hole followed immediately by the wet squelching sound of Alex stroking more of the slippery fluid onto her cock.\n\nMy heart skipped a beat, overwhelmed by the excitement that I was about to be penetrated by my lover's big, hard member. Coming off Liz with a gasp, I braced myself for the intrusion when I felt Alex's head press against my hole. I tried to relax as the pressure built, my sphincter stretching over her, asserting its own resistance futilely until it was no match for her, and she slipped inside. I winced at the quick flare of pain, then gasped as it subsided almost instantly, replaced by the feeling of warmth and fullness as Alex slid all the way into my depths.\n\n'Click, click, click.' Alex had found the remote and was turning up the power on Liz as she held still inside me, giving me a moment to adjust.\n\nLiz let out a whimper, Alex giggled, and I moaned. The cock in my ass pulled back slowly, hesitated, and pushed back in. Alex's pelvis pressed hard against me for a moment, then backed off all over again. Soon she was fucking me in earnest; deep, hard strokes into my colon while she moaned in my ear, sending tingling jolts of energy down my spine to meet the waves of ecstasy radiating from deep inside my ass. Alex wasted no time finding the best angle into my prostate, pumping into me powerfully, making me cry out in pleasure.",
        "It was only a few minutes before I found myself on the verge of orgasm; intense warmth spreading throughout my pelvis as my legs began to tremble uncontrollably. I moaned and whimpered as Alex pounded my ass, her big cock touching every nerve inside me. I was only a few strokes away when suddenly it stopped. I groaned in desperate frustration, the haunting feeling of emptiness where Alex's cock used to be was the physical embodiment of disappointment.\n\nAlex giggled at my reaction, knowing full well how close she had taken me when she pulled out. Her intentions were clear, however, when her strong hands flipped me over by the legs and I rolled with the motion. She lifted my legs, jamming a pillow under me and positioning herself once again at my hungry hole. I moaned as she plunged into me, dashing the hollow sensation with her dick as I felt full and whole once more.\n\nI realized I was staring straight up at Liz's rigid cock from below, her member hovering a few inches above my face, a string of clear precum dangling from her slit as she quivered and moaned. She was staring down at me, her eyes glazed, wearing a mask of pleasure while the vibrator buzzed loudly inside her. A sharp thrust into my ass stole my attention and I cried out; Alex had found my prostate again and began pummeling it mercilessly, quickly taking me back to brink.\n\nMy body couldn't take it any longer; the warmth and pressure built up and exploded, every fiber of my being crying out in ecstasy, every muscle contracting powerfully. I was barely aware of the sensation of my cum spraying my stomach and chest as I moaned loudly, flashes of illumination detonating behind my retina as my orgasm thundered through me. Pleasure spread from the little gland inside my ass to the farthest extremities of my toes and fingertips like a flash fire. Alex gasped and moaned happily as I came, a magical, loving sound that my consciousness tried to latch onto as I fell through floors of climactic bliss.\n\nAnd then finally it passed. Or so I thought. Alex quickly wiped her hand across my stomach, smearing my cum against me and grabbed my still-hard cock, jerking me furiously. I squirmed involuntarily, my body recoiling from a pleasure so intense it hurt. Alex just giggled and pinned my chest down with her free hand, putting her weight into me so I was trapped against the mattress. She pounded my ass and stroked me at a feverish pace; within seconds I came again, tensing so hard my ears popped and I thought I might pull a muscle as my body fought against the crushing intensity of raw, unabated rapture.\n\n\"Oh, fuck!\" I wailed as the orgasm ripped through me, my balls running empty as my cock pulsed and twitched in her hand.\n\nWhen the second climax had come and gone, Alex released me. I was gasping and panting crazily, completely detached from reality as my body struggled to regain control. She leaned close to me, kissing passionately as she moaned into my mouth. When she backed away, I looked up at my lover, her beautiful face coming back into focus as my consciousness reasserted itself. Awareness returned and I realized she was still fucking me, less vigorously than before, but still deep and intense as her cock pushed through my colon.\n\nAlex's moans and shallow breaths indicated her own pleasure, and I knew she was about to cum. I seized her smooth, firm ass in one hand, trying to pull her deeper into me, holding her close around the back with the other as I bounced against her. Alex's eyes squeezed shut and her mouth fell open, her panting breath building to a crescendo and she cried out, jerking into me haltingly. I smiled up at her, overwhelmed with adoration as I watched my gorgeous lover cum inside me, feeling her warm wetness flood into me as her strokes took on a squishy quality in my bowels. She was a beautiful goddess, filling me with her essence and I felt a divine love and gratitude; I owed her everything in that moment as she deposited her cum deep inside my body.\n\nWith a final, wavering moan, Alex collapsed against me, her chest heaving against mine. I kissed her neck and shoulders adoringly, hugging her tight, overjoyed that my body had given her that pleasure. When she caught her breath, she lifted her head to look at me, smiling happily as she touched my cheek gently with her soft hand. I smiled back and kissed her deeply, hopelessly trying to translate the language of my heart through my lips and tongue. We parted again and Alex giggled, her brilliant green eyes staring lovingly into mine.\n\nA whimper from Liz snapped us out of the tenderness of the moment and Alex moved her head to the side, bringing Liz's cock back into my line of sight. The poor girl had been watching us helplessly, leaking precum into Alex's hair while we shared our moment together. Alex and I laughed, and she pulled back slightly, taking Liz in her mouth, and pushing her down toward me with her lips. Sandwiched between our mouths, we made out with Liz's cock, kissing, licking, and sucking at her head, our tongues connecting randomly as they flashed over the glans, wet with spit and precum.\n\n'Click, click, click.' Alex maxed out the power on the vibrator, Liz's humming growing in volume with the pitch of the buzzing.\n\n\"Oh, God...\" Liz moaned breathlessly, bucking her hips spastically.\n\nSeconds later, Liz cried out, her cum splashing against our faces while Alex and I kissed her cock vigorously. I felt her warmth spread across my lips, tongue, and chin as rope after rope of thick, salty semen poured out of her, covering us and draining into my mouth, making me shudder in delight. We kept at it, lovingly making out with Liz's member, until she was whimpering uncontrollably and beginning to soften. When Alex backed away, her face was a glistening mess of spit and semen, grinning happily at me as she slowly withdrew from my ass. I squeezed her tight as she slipped out, trying to keep every drop of her cum inside me where it belonged.\n\nAlex rolled off me and got up on her knees next to Liz, turning off the vibrator and unbuckling the cuffs around the captive girl's wrists. Liz sighed as the cuffs fell away, rubbing her wrists as Alex unfastened the collar on her neck. Once free, Liz launched herself at Alex, practically climbing onto her as she embraced her intensely, planting a series of kisses across the older girl's face, lapping at the strings of cum that decorated her cheeks and chin.\n\n\"Oh, God!\" Liz exclaimed between kisses, \"I love you so much!\"\n\nAlex giggled at Liz's enthusiastic affection. Eventually Liz turned around and crawled on top of me, her face alight with glee, showering me with kisses like she had Alex.\n\n\"You both were amazing!\"\n\nI laughed at Liz's joy, hugging her tight while we kissed. Alex cuddled up to my side, snuggling close while Liz wrapped an arm around her and laid against my chest, sighing contentedly. We stayed like that for some time, basking in afterglow as we each floated back down to earth, kissing, and petting lovingly. We were in desperate need of a shower, but no one was in a particular hurry as we cuddled lazily, tired and spent.\n\n\"Well...\" Alex said, taking a deep, satisfied breath and smiling warmly at us, \"Welcome home.\""
    ],
    "authorname": "loveinbriefs",
    "tags": [
        "threesome",
        "transexual",
        "lesbian",
        "submissive",
        "redhead",
        "cum",
        "bondage",
        "spanking",
        "bdsm",
        "feet"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/is-she-smiling-at-me-pt-05"
}
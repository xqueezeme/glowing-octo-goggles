{
    "title": "Sounds Good Ch. 05",
    "pages": [
        "Michelle was a hoot. I played a new game, from the beginning, concentrating on her - and her alone. The first night that we retreated to her room, I made sure to lock the door.\n\nOnce she was certain that I was choosing her, Michelle became exceedingly ... daring.\n\nIf we were watching a movie, her hand would inevitably find its way into my pants. Of course, I had my own options to reach under her clothing, which I took full advantage of.\n\nThere were a few evenings where we were very active under that (by now) legendary blanket. Snogg had crafted several smaller renders which I found amazing. They were generally dark, showing little more than a shadowy outline: Michelle's breast, with my hand around it, a naked butt cheek (hers), or her hand around my erection.\n\nThey were extremely effective.\n\nOn the fourth occasion that we watched a film together, at night, Michelle pushed the boundaries again. We were under the blanket, lying down, with me behind her. I had two fingers inside her, and she began sighing ever more loudly.\n\nShe swore, suddenly, and shoved her jeans down past her knees. Then she reached behind her for the zipper on my pants.\n\nWithin seconds, she had me inside her, as we humped and pumped like demented spoons on that narrow couch, under that wonderful blanket.\n\nWhen she came, Michelle made choking sounds, as if she had her fist in her mouth. She didn't want to wake our roommates. I came a moment later - quietly.\n\n- Was that the climax of the film, Michelle? I asked her.\n\n- I don't know about that. But it was the climax of the week - that's for sure. \n\n***\n\nMichelle came to the Halloween party as a gypsy fortune teller. I went as a pirate.\n\nShe was smiling the whole time. She pointed out everyone else's costumes, and seemed genuinely happy that they were all having a good time.\n\nWe danced, and Michelle made a discovery about my costume.\n\n- Aww ... really? You had to wear underwear? Pirates aren't supposed to wear underwear.\n\n- Sorry. I'm guessing that fortune tellers don't?\n\n- That's because I know the future. I won't be needing them later, will I?\n\nWhen the party began to break up, Michelle showed no signs of wanting to leave. I was growing a little impatient, but she said good night to everyone, got a cab for one guest who was too drunk to drive home, and comforted Nalani, who was a little teary.\n\nAfter that, she began to clean up.\n\nI pitched in, of course. But it was a powerful reminder of who Michelle was: the den mother. Despite her uninhibited behaviour with me, she was still the most responsible of the roommates.\n\nShe made sure that there was food in the fridge, and that her friends were supported. I'd failed to notice the significance of the fact that it was Michelle who collected the rent from each of us, before it was due.\n\nI was almost tempted to start a game from scratch, just to see what Michelle would do if I couldn't pay the rent. Something told me that she might just cover me - for a week or two, anyway.\n\nWhen we'd finally tidied up to her satisfaction, Michelle led me back to her room. It was a great pleasure to help her out of her costume.\n\n- You know, I said, sometimes I can tell the future, too.\n\n- Is that so? And just what do you see, Mister Pirate?\n\n- Well, I see that your bed is longer and wider than the couch. Which means that if I lie you down there, I'll have enough room to show you some appreciation.\n\n- Appreciation?\n\nI put her on her back, and went down on her. It was something I just hadn't been able to do on that short couch - something we hadn't done since our date (with or without Laura).\n\nDespite her failure to correctly foresee the future, Michelle seemed to appreciate my efforts. Snogg must have been fixated with gumdrops, or Hershey's Kisses, because Michelle's breasts sat up proudly on her chest, even though she was lying on her back.\n\nBut her smile was radiant, and I loved the sight of her fingers twined in my (Tristan's) hair. She was also encouraging me vocally, with a mixture of sighs and specific instructions.\n\nI didn't wait upon her orgasm. Instead, I swiftly crawled up between her widely spread legs, and found her wet opening with the tip of my rock-hard erection. I penetrated her in one long, slow thrust.\n\n- OH! she called out. Piracy! Help ...\n\nI fucked her halfway off the bed. In a brilliant illustration, Snogg showed Michelle's head and shoulders hanging over the edge of the bed.\n\nShe was still grinning, even though her position looked decidedly uncomfortable. Her breasts were spread a bit, to either side, though her nipples still pointed north. Her legs were spread wide.\n\nHer vocalizations were more intense than usual - which sounded very appropriate. It was an energetic, no holds-barred fuck, and I found it far too exciting. This time, I came before Michelle did.\n\n***\n\nMichelle's birthday didn't appear on the calendar. Heather's did.\n\n- It's Heather's birthday. Michelle told me.\n\n- We should get her something.\n\n-That's what I was thinking. \n\nWe went in together to get together to buy Heather a cake - and a new swimsuit. Heather thanked us effusively. Michelle thanked me more quietly - and more privately.\n\n- You're a very nice man.\n\n- I can't come close to you.\n\n- Yes, you can. Come over here.\n\nMichelle took me in her mouth, but that was only a prelude. Once she had me hard and thoroughly wet, Michelle straddled me, and sank down on my cock.\n\nThe illustrations were top-notch, from the beautiful expression on her face, to the exquisite shape of her breasts. A second view was provided, showing the glorious globes of her ass, and the twin dimples in the small of her back.\n\n- This could be the start of a ... beautiful friendship. she said.\n\n***\n\nI could only wish for a girlfriend like Michelle.\n\nBeautiful, confident, with a great sense of humour. She had a big heart, and preferred giving, rather than taking. Michelle often thought of others before herself.\n\nResponsible, caring ... and frisky. I had to admire her adventurous sexuality. Hot. Very hot. That couch and that blanket would be embedded in my memory.\n\nHeather might be the kind of girlfriend I could aspire to. Someone like Michelle was certainly well beyond my reach. A fella can dream, though, can't he?\n\n***\n\nLaura was ridiculously hot. La-ow-ra. Just hearing her say her name gave me a shiver. And I have to admit that I lingered over quite a few of her illustrations.\n\nYes, she had large breasts. But she also had a beautiful face, long black hair, and everything about her was sensual - even her voice.\n\nI replayed her story from the start. I got the wine for her friend's party, and took her to the museum again, after which she surprised me in the kitchen. Then we went to the cafe, and ended up in her room. Ah, that beanbag.\n\nSurprise, surprise: there was an additional scene with Laura before the Halloween party. It was a Sunday morning. Laura came to my room, and knocked on the door\n\nShe was in her housecoat. She looked really good, with minimal makeup and a terrycloth robe that covered virtually everything.\n\n- Oh! I'm sorry. Did I wake you up? she said.\n\n- I was just going to grab a shower.\n\n- Oh. Okay. I need your opinion about something. Can you come by my room when you're done?\n\n- Sure.\n\nI didn't know what to expect. When I'd finished in the bathroom, I threw on some clothes and went to see what she wanted. Laura closed the door behind me. She was still in her robe.\n\n- I want your honest opinion. she said. I bought this on a whim, but I'm not sure if I should actually wear it ... \n\n- Okay. What did you buy?\n\n- This.\n\nLaura opened her robe, to reveal the most astonishing bathing suit I'd ever seen.\n\nI forgot to breathe, for a few moments.\n\nThe suit seemed to consist of three patches of green and yellow fabric, rather tenuously linked by some pieces of gold string. Now, I'm no bathing suit engineer, but this particular piece of swimwear struck me as highly improbable. Structurally, I mean.\n\n- Do you think it's too much?\n\n- Too much for ... what?\n\n- For the beach.\n\nYes, Laura. It was too much for the beach. There was absolutely nowhere you could wear that without setting off a riot. It could break the internet. If Laura had worn that in the forest, with no one there, the trees would have fallen down.\n\n- Are you sure?\n\nLaura turned around, and simply dropped her robe. It wasn't very subtle. Lord, it was effective, though. I didn't know how to break it to her, though: there was nothing covering her back - nothing at all, except for a few bits of string.\n\nWe ended up on her bed, in the doggie position. Snogg's illustration allowed to me to see us reflected in a full-length mirror. My goodness, she was loud.\n\nAfter our frantic coupling, I couldn't help asking: That's what you meant to happen all along, wasn't it?\n\n- I don't know what you mean. I just wanted your opinion.\n\n- And? Did you get it?\n\n- Oh yes ...\n\n \n\n***\n\nLaura's costume was definitely creepy. She came as a vampire, with fake fangs, and lots of makeup: white all over her face and neck, with dark black circles around her eyes, and red blood all over her cheeks and chin.\n\nOf course, she couldn't conceal her shape, so the overall effect was gruesome and sexy at the same time.\n\nAnd when we danced, she pressed that sensational body against me. I couldn't help but respond.\n\n- Mmm. I seem to have your attention.\n\n- You always have my attention, Laura. My complete attention.\n\nWhen it came time to clean up after the party, Michelle jumped in, of course. Laura and I offered to help, but our roommate simply laughed.\n\n- It'll take you forever to get all that makeup off. Why don't you start with that?\n\nLaura agreed. We went into the bathroom, and she began peeling off parts of her costume.\n\nI helped.\n\nThat is, I stood there, serving as a glorified clothes rack. Great work, if you can find it. Meanwhile, I got to enjoy and appreciate the unveiling of a phenomenal piece of modern art: Laura's body.\n\nShe jumped in the shower, and began to wash off layers of makeup. There was a great illustration of her naked back and backside, with water streaming down from her hair. Laura's face was turned towards me, over her shoulder.\n\nShe didn't have to say a word. What on earth was I waiting for?\n\nSex. Standing up. In the shower.\n\nIt wasn't one of my top fantasies, but I couldn't complain about the quality of Snogg's work. And yet ...\n\nWith her flowing hair soaked, and plastered against her skin, Laura looked like a different person. An extremely sexy, different person - but not quite as appealing to me as the rest of her portfolio.\n\nIt was a rare occurrence, but it was interesting to note that I could still be disappointed (slightly) by Snogg's and Patience's work.\n\n***\n\nLaura's birthday was coming up. Unlike the other scenarios, I had the opportunity to discuss it with her.\n\n- What would you like? I asked.\n\n- Nothing fancy.\n\n- Really?\n\n- Don't look so surprised. I know the girls will want to get a cake, and sing 'Happy Birthday'. But ... honestly - all I want is some private time with you.\n\nLaura loved to go out. Her definition of 'Private time' was probably not a match for what Michelle would have wanted. I figured out what she meant, though.\n\n- Dinner at the restaurant. Just you and me.\n\n- That sounds wonderful.\n\nI got her the necklace, though - just in case.\n\n***\n\nI reserved a table at the restaurant. Laura wore a form-fitting dress that very nearly reduced me to the level of a gibbering idiot. How could I ever go out with someone who looked like her? I would've needed extra napkins to soak up the drool.\n\nRonnie served us, and brought us a bottle of wine on the house.\n\n- Happy Birthday. I toasted her.\n\n- Thank you, Tristan.\n\nWe talked about a few things - goals and ambitions, our to-do lists. Then she surprised me with a question:\n\n- Are you happy with me?\n\nWow.\n\nHow to answer that? And ... once again, I had to take my hat off for Patience. There was no option for me to respond. Instead, Laura continued.\n\nI'm not with you because you tell me I'm hot. I like the way you look, but I'm much happier that you're a sweet man, with a good heart. I have fun with you.\n\nEvery time I started to think of Laura as one-dimensional - the hottest woman in Creation - Patience surprised me by adding a little more depth to her character. It was a recurring theme in this game: pre-conceived notions and stereotypes were regularly shattered.\n\nWe walked home, hand in hand, and went straight to her room. For some reason, I thought that the illustrations of Laura which followed made her look even more beautiful. Not her body - that was incomparable - but her face.\n\nWe made love in the cowgirl position. It was some of Snogg's best work.\n\nI felt sad, a little bit.\n\nThere was no way - not in a million years - that a woman as unbelievably hot as Laura would ever give me the time of day. That's not an opinion; it's just simple fact.\n\nLaura could have any man she wanted. She was that sexy, and that sweet. I could fantasize about her, of course, and masturbate to pictures of her. That was as close as I would ever get.\n\nLaura's ending was interesting, in an intellectual sense. I could appreciate how Patience and Snogg had created an amazing character. But I couldn't even begin to picture Laura as my girlfriend.\n\n***\n\nPatience responded to my last audio review.\n\nHey Cyrano,\n\nGlad you like the new title. You should - it was your idea. And I really appreciate your help in convincing Snogg to fix the first screen as well. Believe me: it's difficult to change his mind. But we did it!\n\nAs for the music ... I was outvoted - that's all I have to say on that subject.\n\nGlad you liked the calendar. That was partly your idea, too. As for the costumes ... well, yeah.\n\nI was pleased to see you recognize the Halloween Party as a turning point - or as a choke-point. You were dead on, with that description. Some players may need help making up their minds, and this event was designed to force them to choose.\n\nI told the voice-actor who did Heather that you liked her work. She was very pleased. I agree with you: I think she was first-rate.\n\nYou found Nalani more ... high-maintenance? I'm going to have to review what I did. You may very well be right. I hope you're not: it means more work for us if you are. Then again, some guys like being the big, strong protector, or the knight-errant.\n\nPlease keep sending me your saved games - I'm learning a great deal from them.\n\nAll the best,\n\nPatience \n\n \n\n***\n\nMom got me a job interview. She helped me choose what to wear - 'casual professional' she called it - and then took me downtown, to the offices where her company was based.\n\n- \"Don't be nervous.\" she said. \"They're not going to grill you. But if you get an opportunity to show them what you know - take it.\"\n\n- \"Okay, Mom.\"\n\n- \"And don't forget to ask questions. That shows you're interested. And look Mr. Barron in the eye when you're talking to him. That shows confidence.\"\n\n- \"Okay, Mom.\"\n\n- \"I'm over-doing it, aren't I? Too much coaching?\"\n\n- \"A bit.\"\n\nShe was more nervous than I was. But Mom had prepared me very thoroughly; I knew quite a lot about her company, and how to succeed in an interview. She'd also showed all of the programs they used. I was quite familiar with their operating systems.\n\nMr Barron was the Head of Personnel. He had several employees working off-site (like my Mom), so he wouldn't necessarily be opposed to the idea of me working from home.\n\nHe was a nice-enough older guy (who probably needed to invest in some new suits). He seemed reasonably impressed with me - Lord knows why. He obviously knew about my condition; maybe he was surprised that I could string coherent sentences together.\n\nWhat Mr Barron didn't have, though, was the slightest idea of what to do with me. I got the idea that he'd agreed to interview me as a favor to Mom. But he didn't have a job for me. Given my limitations, he really didn't see what I could do for them.\n\nHe knew that I could assist my mother - but why pay me extra to help her?\n\n- \"Mr Barron? May I ask a question?\"\n\n- \"Sure, Daniel.\"\n\n- \"How many IT specialists do you have working for you?\"\n\n- \"In the whole company?\"\n\n- \"No, sir. Just in Personnel.\"\n\nThe answer was 'None'. But I already knew that.\n\n- \"When you, or someone in your department submits a ticket,\" I continued, \"how quickly do you get a response from IT?\"\n\n- \"Not very.\" he admitted. I knew that, too.\n\nI knew that his department's budget wouldn't cover hiring an IT specialist. But he could probably afford me. I was able to quickly spell it out for him: for a relative pittance, I could probably solve many of their computer and software problems. The really serious issues could still be reported to their own IT people.\n\nI could be on call during working hours. We could also connect me to their remote desktop software, so that I could fix small problems from home.\n\nMr Barron was a bit old-fashioned, but he was no fool. He could see that clearing up computer problems quickly, without having to wait for their IT specialists, would increase his department's efficiency.\n\nI would definitely be cheap. And security was no great risk - he knew where I lived, and who my Mom was. Here was a possible way to make himself look good, at a bargain-basement price.\n\nWhat did he have to lose? Mr Barron agreed to take me on, on a trial basis. After two weeks, I was to submit a claim for the time I spent working, and we would meet at the end of a month, to decide if 'we' wanted to continue the arrangement.\n\nMr Barron came around his desk to shake my hand.\n\n- \"I'm very pleased that you came in today, Daniel.\" he said. \"I have to admit: this isn't quite the outcome I anticipated, but now I'm really curious to see what you can do.\"\n\n- \"Thank you, Sir. Thank you for giving me an opportunity.\"\n\n***\n\nI didn't neglect the game. But I was just a little nervous about starting another play-through. The reason I hesitated had to do with the last roommate: Veronica, or Ronnie.\n\nThe problem may sound strange: it wasn't that I didn't find her appealing. At the beginning, though, she seemed to be the least noteworthy of the roommates.\n\nAs I first started playing, starting with Heather just seemed right, because she'd been the first one to open the door. When I decided to try pursuing another girl (at the same time), Nalani was the only one home.\n\nMichelle had asked how I was doing with Heather. Laura had somehow stepped into Michelle's story. What I'm trying to say, I guess, is that I didn't consciously leave Ronnie for last.\n\nIt might have seemed that way, based solely on looks. In the illustration showing all five girls, when I first met them, Ronnie couldn't even begin to compete.\n\nHeather was tall and busty; Nalani was petite and beautiful. Michelle was really attractive, and Laura, of course, was a smoke show.\n\nRonnie was maybe 5'8\" or 5'9\" - roughly in between Heather and Michelle. But unlike those two, Ronnie was almost entirely devoid of curves: flat-chested, hipless, and flat-assed.\n\nShe was, at first glance, a little odd-looking, too. It took me a little while to figure out why that was. There were the caterpillar eyebrows, of course.",
        "But there were other features that stood out: her mouth was a bit wide, because the corners of her mouth seemed to go on and on. I actually looked it up; those grooves were called 'commissures'. Well, Ronnie had the longest oral 'commissures' I'd ever seen.\n\nHer nose wasn't huge, but it was a bit too big for her face. On the plus side, Ronnie had lovely dark eyes, and long dark brown hair. But she wasn't what you'd call a 'classic beauty'.\n\nThe first few times I looked at Snogg's illustrations of her, I noticed these little flaws.\n\nThen I began to wonder about them. Why had Snogg drawn her that way? He didn't make many mistakes, and he could certainly draw beautiful faces - as he had with all four of the other roommates.\n\nThe only conclusion I could come to was that Snogg had used photographs of models as the sources for his subjects. They were based on real people. And so was Ronnie - except that she wasn't a model.\n\nThat made Veronica much more interesting to me. After a very short time, I began to see her in another light. She looked ... different. I don't know how else to put it. It didn't take long, following her story, before I realized that I found Ronnie very attractive.\n\nVery soon after that, I changed my mind again: Veronica could very well be a model, too. There was something about her ... her look was unique: part exotic, part unusual.\n\nBut all of my musings about her face came second, after I'd already discovered a very good reason to become fascinated with Ronnie: her voice.\n\nHeather, as I've said, sounded like sunshine and open windows. Nalani was smooth, almost silky, with careful enunciation. Michelle's voice was warm and friendly; Laura could stop me in my tracks when she spoke her own name. La-ow-ra.\n\nRonnie's voice was a little deeper, rich and throaty. It took me a little longer to fully appreciate it. But I slowly began to prefer hearing her dialogue over everyone else's.\n\nI can only compare it to music. Sometimes you hear a song for the first time, and it immediately appeals to you. A catchy tune, a beat, or a lyric that sticks out. Then, after hearing it 65 times, you don't really want to hear it again - yet the radio stations are still playing the shit out of it.\n\nOn the other hand, there's the song you hear without really noticing it. Back in our D&amp;D days, Mike used to play a few of his favourite tunes in the background. After listening to one of them several times, I asked him who the band was.\n\nHe told me, and I promptly forgot.\n\nThe next time he played them, I asked again. Then I got him to email me several links to these groups. Most of them were what you would call acquired tastes. There are several artists like that: their music may not leap out at you right away, but once it sinks in, you're probably a fan for life.\n\nThat was how I stood with Ronnie. I found her more and more attractive every time I saw an illustration of her (even if I'd seen it three or four times before). And her voice grew on me, until I found it powerfully appealing.\n\nYes, I assigned her the role of the athlete, just to see what she looked like in a swimsuit. I was pleasantly surprised. She didn't 'rock' the bikini, but she definitely looked more feminine.\n\nThen I started a new game, and made her the waitress. It was the role I associated with her, because she'd been that through four full games.\n\nShe began to grow on me, to the point where I thought about her all day. I had to replay every scene where she spoke, just to hear her voice repeat the words I'd already heard. I was becoming slightly obsessive.\n\nI tried to discipline myself. No 'Bird in the Hand' in the afternoon. I had to wait until after dinner, just in case someone called with an IT issue. In the meantime, I assiduously monitored the IT tickets, to see if anyone in Personnel had a problem.\n\nMr. Barron's people would probably never have called me on their own. But when I got to see the tickets they submitted to their own IT department, I recognized some of their issues right away.\n\nOne of them only required a quick phone call. I talked the employee through her problem, and had it solved in under twenty minutes - and fifteen of those were spent trying to persuade her to let me help her.\n\nAnother was remarkably simple to address; the only difficulty was getting the employee to let me use the remote access. They simply weren't willing to grant it to me.\n\nI had to call my mother in on that one. Fortunately, she and I worked in the same office - our house.\n\n- \"I can solve this for you.\" she said. \"But let's try to fix it so that I won't have to do this again.\"\n\nShe got on the phone with Mr Barron. I don't know why Mom had so much pull, but she got Barron and the stubborn employee to sit in front of the computer screen, and grant me access.\n\nAs I solved the issue, I explained what I was doing over the phone. There were only a few simple steps.\n\n- \"That's it?\" said Mr. Barron.\n\n- \"Yes, Sir. That's it. Would you like me to show you again? Then, if this problem re-occurs - which it probably will - you'll be able to fix it on your own.\"\n\n- \"Yes, please.\" he said, very emphatically.\n\nObviously, Mr Barron knew the difference between buying a fish dinner and getting his own fishing rod.\n\nMom kissed me on the forehead.\n\n- \"I'm so proud of you.\" she said. \"And not just because you're making me look good.\"\n\n***\n\nRonnie worked Tuesday night to Saturday night; Sunday and Monday were her only days off. But she didn't start her shift until late in the afternoon. I began relentlessly stalking her, so that I would know where to find her.\n\nI was surprised to discover that there was no distinct pattern. She might be at the cafe, sipping a latte, but she could just as easily be at the bakery. If she was at the University Library on Wednesday morning, there was absolutely no guarantee that she'd be there the following Wednesday.\n\nWhen I saw her at the bakery, I chose to approach her.\n\n- Hey, Ronnie.\n\n- Oh - hey. No smile. No expression of interest. Snogg's render showed her busily studying the bakery's bill of fare - that is, looking away from me.\n\n- Those buns look nice. Maybe I should get some for the apartment. No, it wasn't a double entendre. The bakery's buns probably looked and smelled great. Ronnie's buns were barely noticeable.\n\n- Yeah, that would be great. she said. Total disinterest.\n\nIs it any wonder that I was madly infatuated with her?\n\nJust kidding. I knew that she was more difficult to approach. One morning, I saw her at the cafe. When I asked if she'd mind if I joined her, she waved a hand at the next chair.\n\nWe chatted. We had a conversation. And when it was over, I knew no more about her than I had when I walked in. She didn't volunteer to tell me her personal history (as Heather and Nalani had), nor did she seem very curious about me.\n\nShe was a mystery. An enigma. It didn't matter: every time I saw her face, every time I heard her voice, I was getting hooked just a little deeper.\n\nFinally, I reached the point I'd been waiting for: according to the computer in my room, Ronnie had reached the stage where she was 'intrigued'.\n\nI asked her to go to the cafe with me for lunch.\n\n- My treat, of course.\n\n- Sorry, Tristan. I've got a million things to do today before I go to work.\n\nWhat? I was stunned. That's not supposed to happen. Is it?\n\nI rolled back. There it was - no doubt about it. She'd turned me down. I was given some new dialogue options.\n\n- I understand. How about tomorrow, then?\n\n- Don't think I can tomorrow, either. Sorry.\n\nThere were no options for me after that. I couldn't quite believe what I'd heard - and read. I re-loaded to the last auto save (the game saved every day). Then I double-checked the computer inventory. Yes - Intrigued.\n\nI approached Ronnie again. The first two lines were identical. A million things to do she said. So I chose another option in response.\n\n- Well, what would be a good time for you?\n\n- I'm really swamped for the next few days. Sorry.\n\nWell, that was definite. Ronnie was saying 'no'. Loud and Clear. I didn't have the slightest idea what to do next. After thinking about it for a long time, and getting absolutely nowhere, I turned off the game, and played solitaire for an hour or so before going to bed.\n\n***\n\nI'm really swamped for the next few days, she'd said. Maybe that wasn't just an excuse. I re-loaded the game, went through that rejection one more time, and then ... I worked. My intention was just to make some money, and see what happened.\n\nOf course, I must have checked Ronnie's status three times a day. Still 'Intrigued', for what that was worth.\n\nTwo days after turning me down, Ronnie came to see me.\n\n- Hey, Tristan. You free on Sunday?\n\nI had a couple of options. One was fairly pathetic. I chose a careful one.\n\n- Maybe. Why?\n\n- If you are, I thought we could go for lunch at the cafe, like you said.\n\nMy options were limited:\n\nI don't think so. I'm swamped.\n\nWhy?\n\nAre you sure, this time?\n\nSounds good.\n\nThe first response sounded snarky. The third was closest to what I wanted to say, except for those last two words, which made it sound slightly petulant. I definitely wanted to know 'Why?', but I had to hope that I'd find out later.\n\nWhy she would say 'No' when I asked, and then turn around and ask me out two days later? Ronnie was definitely more complicated than the other roommates. I was going to need patience to unravel her mystery - or mysteries.\n\nHah - Patience. Was the writer's pen-name a clue on how to play her game?\n\n- Sounds good. I replied.\n\nI was more than a little confused. Still - we were going on a date. Sort of.\n\nI simply worked and slept for two days, until Sunday. Ronnie and I walked to the cafe. Snogg showed her wearing a rather plain grey dress. I didn't care: I only had eyes for her lovely face.\n\nPatience gave me several conversation options. I backed up, and saved the game, in case I screwed up again. But there was one opening line that appealed to me.\n\n- Can I ask you something, Ronnie?\n\n- If you want.\n\n- Why did you say no when I asked you out? You said that you were too busy - and yet ... here we are.\n\nI heard Ronnie let out a deep breath.\n\n- I'm sorry about that. When you asked ... I didn't know what to say. I wanted to, but I wasn't sure. I needed time to think. That's why I said 'No'. \n\n- You weren't sure? But ... it's just lunch.\n\nShe laughed. Just lunch? I don't think so. How many of our roommates have you asked out to lunch? Or are you going to ask all of us, starting in reverse alphabetical order?\n\n- No. Just you.\n\n- Just me? Then it's not just a lunch, is it? It's a date.\n\n- Well ... yes.\n\nSnogg's picture of Ronnie was nothing short of masterful. It showed only her face, which I now considered very pretty. But it was her expression that fascinated me.\n\nShe was almost smiling - but not quite. It wasn't a smirk, or anything like that. Ronnie just looked like ... well, like someone who was enjoying the conversation.\n\n- Can I ask you something? she began. Are you familiar with what was said about American soldiers in Europe after World War 2?\n\nI did know that. I was able to select the correct answer.\n\n- You mean the three things wrong with Yanks: 'They're overpaid, oversexed, and over here'?\n\nShe laughed. I forgot that one. No, I was thinking more about how American soldiers thought that European girls were 'fast'.\n\n- Fast?\n\n- Back home, a guy might get a goodnight kiss on the 2nd or 3rd date. A couple could progress to 'necking', but it might be months before they got to second base. American women were expected to be 'good' girls.\n\nWhereas, European women were ready to have sex right after the first kiss.\n\n- They were?\n\n- Sounds fast, right? Slutty, even. But here's the thing: European girls thought that American soldiers were 'fast' - because they wanted to kiss on the first date. To them, kissing was something you did once you were sure that you wanted to go to bed with him.\n\n- Ah. I get it. I understood the story, but not why Ronnie was telling it.\n\n- I didn't want you to get the wrong idea. she explained. I said 'yes' to a guy once. He thought that by agreeing to go on a date, that I was also committing to have sex with him.\n\n- I wasn't ...\n\n- I know.\n\nMy first date was entirely unlike the dates with the other roommates. I had absolutely no idea where I stood with Ronnie.\n\n- Thanks for the coffee. she said, afterwards. I had a good time.\n\nAnd that was it. No sex scene of any kind. Not even a kiss.\n\nAnd yet ... I had enjoyed the date, too. I reloaded and played it again, just to watch that expression on her face as I listened to her voice.\n\n***\n\nHeather and Nalani had pretty much told me everything I needed to know on our first date. Michelle and Laura had dropped plenty of clues even before we went out. Ronnie was different: she didn't come with a road map or guide book.\n\nI didn't know whether to take Patience to task for making things so difficult, or to congratulate her for creating such an interesting character - and making it difficult.\n\nIn most dating sims, the girls are stereotypes at best, and cardboard cut-outs at worst. In some games, they're just attractive bimbos who will have sex with the main character no matter what he says or does.\n\n It's about as challenging as spitting in the ocean. There's no sense of achievement whatsoever; you might as well skip the game and go straight to porn.\n\nOther games are plagued with a mysterious path to success, where you have to be a perfect gentleman in the first 2 dialogues, and then an arrogant asshole in the next. There's no logic or pattern to these choices; trial and error is the only way forward - unless some kind soul has been good enough to compile a walkthrough.\n\nThere are similar games where the dialogue options may make sense, but you must be in exactly the right place at the right time to use them. How the hell am I supposed to know that I have to go to the bank at 2 p.m. on Tuesday to advance my romance?\n\nA Bird in the Hand had none of these problems. The girls were easy to find, most of the time, thanks to the calendar. You could fail, but only by deliberately choosing the worst options, or by pursuing multiple relationships at once (with one exception, of course).\n\nBasically, all you had to do was be a decent guy. Is that so hard?\n\nBut Ronnie demanded a little extra Patience, and a little more perseverance.\n\nI asked her out a second time, suggesting a drink at the pub on Saturday evening - one of her nights off.\n\n- Sure. she said. Sounds good.\n\nLaura steered us to a good table, in a relatively quiet corner. We talked - mostly about me, as it turned out - until she surprised me with a question.\n\n- Can I ask you something else?\n\n- Be my guest.\n\n- Why did you ask me out?\n\nThat's not such an easy question to answer, for a guy. Sometimes, the real answer isn't all that pretty:\n\nBecause your sister turned me down\n\nBecause I'm dying to get into your pants\n\nBecause I've already had sex with all of the other roommates - you're next!\n\nThankfully, those weren't the options that Patience provided. There were a few reasonable choices, even if they struck me as a bit too direct. But Ronnie seemed to prefer honest, no matter how blunt, so I gave it a go.\n\n- Well, I'm attracted to you. (That sounded better to me than 'I find you interesting'.)\n\n- Attracted?\n\nThankfully, Patience had added a little wrinkle to my next response. There was the usual list of options - but I could choose more than one.\n\nI told Ronnie that she was unusual. That I found her very appealing. That I enjoyed spending time with her, and, finally, that I didn't know anyone quite like her.\n\nI wish that I could've added one more truth: that I loved her voice. I made a note to suggest that to Patience.\n\n- You seem to have given the matter quite a bit of thought.\n\n- I think about you all the time.\n\nThere was another illustration of Ronnie, with that almost smile.\n\n- That's a nice reason. she said. Did you know about the concert in the park next Sunday? Maybe we should go together.\n\n- Sounds good to me. I answered, trying to play it cool.\n\nWe returned to the apartment after a couple of drinks. Ronnie stopped, just outside the door.\n\n- Just so you know, Tristan - I'm not European.\n\nThen she kissed me.\n\nNice illustration by Snogg. I went to bed happy.\n\n***\n\nThe concert was no big deal. We sat on the grass together, listening to the music. Then there was a brief interlude.\n\nTo my surprise, Ronnie reached out and took my hand.\n\n- I like being with you, too. she said.\n\nShe held my hand through the second half of the concert.\n\n***\n\nI composed another audio review. I knew that I wasn't very far from the end. By that point, I'd have seen virtually all of the content, and I could do a critique of the whole game. But I wanted to share my thoughts on Ronnie's story.\n\nSnogg's work was great, as usual. But I praised Patience for creating a unique and memorable character, and for making Ronnie more of a challenge.\n\nI also asked her to congratulate the voice actor playing Ronnie. No disrespect to the others, I said, but she has the most wonderful voice.\n\nThen I returned to the game. I had the opportunity to ask Ronnie out again, but there was no new dialogue. Nothing changed, then, until the night of the Halloween party.\n\nRonnie went as a witch. She had the tall, pointed hat, and a black cloak. She'd made herself a horrible fake nose, with a pair of disgusting warts. She'd even blacked out a couple of her teeth.\n\n- You look amazing. I told her.\n\nHer only response was to cackle: Thank you, dearie.\n\nLaura looked gruesome. Ronnie had aimed more at repellent. But I saw those familiar lips, with their extra-wide corners, and those dark eyes I'd come to know. To me, she looked fantastic. And, of course, there was her voice.\n\nWe danced, and I held her close.\n\nShe couldn't help but feel my reaction - just below my broad belt.\n\n- Really? she whispered. You're turned on by this costume?\n\n- Not the costume. What's under it. I replied. (And your voice, I wish I could have added.)\n\n- Are you sure it isn't just the nose?\n\n- Quite sure.\n\n- Good. she said. Then she proceeded to grab a handful of my ass.\n\nShe kissed me. We made quite a mess of her fake nose; part of it stuck to my cheek.\n\nWhen the party was over, Ronnie wanted to help clean up. I was certainly game to pitch in. But Michelle nixed that idea.\n\n- Ronnie, you need to clean yourself up, first. We can get started while you take care of that nose - among other things.\n\nI seconded the motion, so Ronnie went to the bathroom, while Michelle and I cleaned up the apartment.\n\n- I'm really pleased for both of you. said Michelle. You two look great together.\n\nThat was nice to hear.\n\n- Thank you.\n\n- Ah - there's your witch. said Michelle, as Ronnie returned.\n\n- You guys finished everything without me. she complained.\n\n- You can clean the bathroom tomorrow. said Michelle. G'night, you two.",
        "That left Ronnie and I standing in the living room.\n\n- Hmm. I'm still in a party mood. said Ronnie.\n\n- Really?\n\n- Yeah. Why don't you come to my room?\n\nReally? I didn't know quite what to expect. My hopes were high, though. And I was definitely aroused. (I hoped that Tristan was, too.)\n\nRonnie didn't waste time. The moment the door was closed, she kissed me. Without further ado, she began to undress me. As she undid my pirate belt, she reached into my breeches and took hold of my erection.\n\nShe didn't moan, or sigh. Nor did she talk. But I could hear Ronnie's breathing in my headphones, and it was ... very exciting.\n\nI managed to peel off her clothing - not too difficult, since she'd only thrown on a t-shirt and a pair of sweatpants.\n\nThe first illustration of Ronnie naked nearly took my breath away.\n\nShe had tiny breasts, but lovely nipples. Her stomach was fairly flat, and she did have hips and an ass - they just didn't jump out at me. I had to look a bit closer. But they were there.\n\nNot too long ago, I wouldn't have believed that a flat-chested, narrow-hipped, flat-assed woman could turn me on. She certainly couldn't have competed with Michelle or Laura.\n\nI was prepared to admit that I'd been completely wrong.\n\nWe lay on the bed, kissing and caressing each other. Ronnie was still stroking my cock.\n\n- I want to taste you. she said.\n\n- Witches first. I retorted. She didn't fight me over precedence. I slid down the bed, and kissed my way up from her ankles.\n\nI could hear her breathing, which only encouraged me. Ronnie came very quietly.\n\n- My turn.\n\nShe changed positions, and went down on me.\n\nThere was a really striking render by Snogg, showing Ronnie lying on the bed. The only parts of me (or Tristan) showing were my legs and my erection. Ronnie was holding my cock in her right hand, while brushing back her long hair with her left. She was looking up, towards me. She had that wonderful almost-smile on her face.\n\nI probably wouldn't have lasted 30 seconds. Tristan was made of much sterner stuff.\n\n- Do you want to come now? Ronnie asked me. Or ...?\n\n- I want to make love with you.\n\n- Mmm. Sounds good.\n\nWe ended up in the missionary position. Patience's description was very good, but I was too eager to see the illustration. I wasn't disappointed.\n\nRonnie was on her back, with her arms and legs wrapped around me, as if she was trying to draw me deeper, or to make sure that I couldn't escape. Her eyes were closed.\n\nThat did it for me.\n\n***\n\nThe birthday on the calendar wasn't hers. It was Heather's.\n\nI paid for the cake, but I wanted to do something for Ronnie, so I checked the shopping options on my computer.\n\nThere was a new addition: it was a download of the band that had played at the outdoor concert. They were called Rubber Garden. I hadn't seen this opportunity before; it had to be for Ronnie.\n\nIt was. She was absolutely delighted.\n\n- How did you find this? she said. Wait - can we listen to it together? On my computer?\n\n- As you wish. I answered. I always love channeling The Princess Bride.\n\nWe retreated to her room. Snogg did a lovely illustration of us sitting on the edge of her bed, her hand in mine. I can't quite explain why, but it brought tears to my eyes.\n\nI sat in front of my own PC, crying, as I looked at this beautiful young woman, in this fictional world, that I was in love with ...\n\n***\n\nIn the first 2 weeks of my deal with Mr Barron, I worked a total of 11 hours. Over the following two weeks, I only worked six hours.\n\nI was too successful; I was rapidly working myself out of a job.\n\n***\n\nI filed a final review. I nominated Snogg for artist of the year, and praised Patience for the characters and story-lines. Their game, I was quite sure, would be a hit.\n\nI got an email from Patience.\n\nThat's very kind, Cyrano. I hope that you're right.\n\nI also got a phone call from Mike.\n\n- Dan! Long time, buddy.\n\n- I know. How are you?\n\n- My fingers are sore, and I'm going to therapy for my neck. You wouldn't believe how many hours I spent on the coding.\n\n- You did a great job. It's a fantastic game.\n\n- Sure hope so. If this one flies, we might be able to make some serious money.\n\n- That would be great. You all deserve it.\n\n- Listen, Dan - there's another reason I called. We're having a launch party. Snogg and Patience both want you to come.\n\n- A party?\n\n- No big deal. All friends. People involved in the production, a couple of play-testers, like yourself.\n\n- I ... I don't know. Will ... the voice actors be there?\n\n- Hah! I knew it - you want to meet Angie? She'll be there.\n\nA party. I could meet Snogg and Patience. I was also very curious to see what the voice actors looked like. I knew that they probably bore little resemblance to the fictional roommates in Snogg's illustrations.\n\nIt might be awkward. They would see me. I knew what kind of figure I cut. It would also be weird to talk to people I'd ... with whom I'd had virtual sex. Would they mind that I'd masturbated to their image, and to their voice?\n\nBut I was very curious. What did Laura - the voice of Laura - look like?\n\nAnd Ronnie. Yes, I wanted to meet the voice of Ronnie.\n\n- Okay, Mike. I'll try to be there.\n\n- You'd better. Hey - say hi to your Mom for me.\n\n \n\n***\n\n \n\nI had second, third, and fourth thoughts about going to this party. Did I really want to go through this?\n\n- \"Of course you do.\" said my Mom.\n\nI'd confessed my fears, and she surprised me by simply laughing.\n\n- \"What's so funny?\"\n\n- \"You are. Are you seriously going to pretend that you aren't dying to go to this party? You'll pass up a chance a chance to meet the people who put this game together? This game that you've lived, eaten, breathed, slept for the past several months?\"\n\n- \"Mom ...\"\n\n- \"Don't lie, Daniel. You wouldn't miss this for the world.\"\n\nShe had me there.\n\n- \"But ..\"\n\n- \"I'll drive you over. You can call me when you're ready to come home.\"\n\n- \"But I don't want to put you out.\"\n\n- \"Daniel ...\"\n\n- \"Okay, Mom.\"\n\n***\n\nI went.\n\nMom loaded my lightest wheelchair into her car, and dropped me off in front of the apartment building where the party was being held.\n\nI didn't particularly want to show up in a wheelchair, but the sight of me walking might have startled some of the other guests. The chair was simpler and easier, as Mom pointed out. She was probably also right when she said that people weren't so surprised by the sight of a wheelchair any more.\n\n- \"Call me when whenever you're ready.\"\n\n- \"I will.\" Then I gave in. \"Thanks, Mom.\"\n\n- \"Enjoy yourself.\" she said.\n\nI managed to get into the building without any trouble. They'd reserved the party room, which was - thankfully - on the ground floor.\n\n- \" Hi.\" said a young woman. \"Who are you?\"\n\n- \"Ah - I'm Daniel. Cyrano. I was a ... a play-tester.\"\n\n- \"Cool.\" she said. \"Come on in.\"\n\nThis girl was in her late teens, or early twenties. She looked like a tomboy, with short, light brown hair, and no makeup whatsoever. Yet ... I knew who she was.\n\n- You're ... you did the voice of Heather.\" I was stunned. She looked nothing like what I'd expected.\n\nHer face lit up. \"Yeah. I did. Wow - you recognized my voice?\"\n\n- \"You were awesome.\" I said.\n\nWe had sex - virtual sex. You moaned in my ear for quite some time. I used up several tissues because of you. Of course, I didn't say any of that.\n\n- \"Thanks.\" she said.\n\n- \"Dan! Brother Cyrano!\"\n\nI recognized Mike's voice. Then I caught sight of him, with his arm around a diminutive Asian girl. They both came towards me.\n\nMike was grinning, but I was checking out his ... girlfriend? She was short, and skinny, with coke bottle glasses, and a body that made Ronnie look positively voluptuous.\n\n- \"Mike.\" I wanted to hug him. He understood, and stepped closer so that we could embrace, a little awkwardly.\n\n\"Thanks, man.\" I said. \"This was a great experience.\"\n\n- \"You were fantastic, Dan. You made me look like a genius, for inviting you in. Hey - I want you to meet my girlfriend - Angie. Angie: this is my friend Dan.\"\n\n- \"Pleased to meet you.\" said Angie.\n\nIt was the voice of Nalani.\n\nI had to smile. Mike was obviously happy, and Angie seemed quite happy, too. This wasn't the time - or the place - to discuss how I'd had virtual sex with Mike's new girlfriend.\n\n- \"Hey - you have to meet these girls.\" said Mike. He held a hand over my head. \"Yo! Cyrano in the house!\" he shouted.\n\nThere was a group of three women, chatting and sipping their drinks. They all looked up when Mike called out. All three smiled, and then they came towards us, as a group.\n\nThe first girl was short, and chubby.\n\n- \"You're Cyrano? Hi - I'm Felicia. But you probably know me better as La-ow-ra.\"\n\nFelicia couldn't have looked less like the character she'd voiced. She had a cute face, though. And the way she said her name still sent a chill up my spine.\n\n- \"You were fantastic.\" I told her. \"I reloaded a dozen times, just to hear you say your name.\"\n\nFelicia playfully punched my arm.\n\n- \"And this is Marsha B.\" said Mike.\n\n- \"Pleased to meet you.\" said a pretty, curly-haired blonde girl. She had freckles all over her nose and cheeks.\n\n- \"Michelle?\"\n\n- \"You recognized my voice? Wow.\"\n\n- \" I don't think that I'll ever forget it. You did a fantastic job.\"\n\n- \"Well, thank you.\"\n\n- \"And this is Patience.\" said Mike.\n\nMy head snapped up.\n\nThe third girl was ... I didn't quite know what to make of her. I saw long, dark brown hair. Strange eyes. An odd face.\n\n- \"Hello, Cyrano.\" she said. \"It's nice to finally meet you.\"\n\nMy mouth must've fallen open. Patience was speaking to me - with Ronnie's voice.\n\n*****\n\n\n\n \n"
    ],
    "authorname": "AspernEssling",
    "tags": [
        "dating simulation",
        "games",
        "gaming",
        "playtesting",
        "shut-in",
        "virgin"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/sounds-good-ch-05"
}
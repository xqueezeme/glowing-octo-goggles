{
    "title": "How To Piss Off My Wife",
    "pages": [
        "Every year I try to help out the readers with a little 'How To' information. This year I will use some new ideas, good e-mail information and some dumb humor. You may have heard or read a lot of this stuff before but it's always good to read it again.\n\nLet me start with the wife and grocery shopping. If you're like me, and she asks you to go to the store for bread, milk and eggs, I come back with bread, milk and eggs. When she goes, she has over a hundred dollars worth of groceries. She just went after the same three items that I did. How do you respond?\n\nFirst: don't say a damn word or you will regret it. You'll be making your own dinner for the next month. \n\nSecond: don't ask her if she needs help carrying in the groceries if she is about finished. You will more than likely get your head bitten off and she will be mad the rest of the evening. \n\nWhat you do is sit so you can see when the car pulls up and run out and help her carry in the groceries. Compliment her for buying your beer. This is her way of saying she spent too much money. Accept this as her apology. Don't say another word.\n\nI used to have a problem when my wife asked me to go shopping with her. First, she asks me and then starts yelling at me.\n\n\"Honey, I didn't say a word. Why are you yelling at me?\" I responded.\n\n\"I can see it in your face. You won't do anything with me. All I ask is that you do a little shopping with me, but no, you have to watch a dumb ball game.\"\n\nGuys, next time do what I have learned to do. You have to understand that if your wife is like mine, you were probably the last person she asked to go shopping. Her friends and family were already busy. Smile and go with her. If she goes to a large store, go to the TV sets and watch your game. She really doesn't want you around bugging her anyway. She just wanted your company getting to and from the store.\n\nLately I have asked her to go to the mall instead. Of course, there are a lot more stores and she is happy to go there. While she shops, I go to the Cinema and take in a movie. She meets me when the movie ends and we go out to eat. Everybody's happy.\n\nIf the mall has a Victoria's Secret, tell your wife to go in and buy something for herself. The chances are if she's bigger than a size five they probably won't have anything that will fit her. She'll smile and make some kind of snide remark, but she will remember your nice gesture. If she does go in and buys something then you just hit the lottery. It's a win-win situation for you. \n\nThen there's the problem when your wife holds up two outfits and asks which one you like. This is a lose-lose situation or at least a bad one. If you answer her you had better have a good reason why you picked the one you did. Better yet, try and reverse it back to her and ask which one she likes better and then agree with her. Let me give you a good example.\n\nI loved watching 'Alias' with Jennifer Garner. In one episode, she was undercover on an airplane. She was supposed to be a hooker for this customer. She came out of a bedroom -- yes, this plane had a bedroom - holding two bra and panty sets. One was black and the other was red. She showed them to the customer and smiled with those big dimples. Damn, I'm getting hot remembering this.\n\nShe went back into the bedroom and came out wearing the black panties and bra and looked fantastic. She smiled that beautiful smile, for those looking at her face, and the man said to try on the red one. She went back and put on the red outfit. Again, she came out looking great.\n\nShe smiled at the man and then pulled out a gun she had in her hand hidden behind her back. She shot him dead center in the forehead. Her words to him were. \"What was the matter with the black outfit?\" So guys, really give your answers some thought.\n\nSo, be very careful what you say when helping her choose an outfit. Remember, no matter what outfit she chooses, her ass is never too big and her boobs always look great.\n\nSpeaking of asses. If your wife is blocking your view of the TV and you're missing the game, don't say a word. No matter what you say, all she's going to hear is, \"Get your big fat ass out of the way. I'm missing my game.\"\n\nCalmly wait until she moves from blocking the TV and continue watching the game. If you missed anything important, you can always catch the replay or it will be on the eleven o'clock news. Believe me, you'll be glad you waited.\n\nWhile we are talking about asses, I should tell you about what happened while my wife was cleaning the BBQ grill. I mentioned to her that her ass was the same width as the grill. It was a big mistake. She didn't say anything to me at the time but you have to remember that women never forget any negative statements made by their husbands.\n\nMy wife still brings up stuff I said twenty years or more ago. They say elephants have great memories. My wife has them beat by a mile when it comes to things that I've said or done.\n\nLater that night I was horny as hell. I slipped into bed next to my wife and grabbed her butt. I was ready to make love. \"Get your hands off of me,\" she yelled.\n\n\"Honey,\" I replied. \"I want to make love to you. I'm all hot and horny for you.\"\n\nShe turned over and looked at me. \"Do you think I'm going to fire up this big ass grill for one little hot dog?\" Needless to say, I didn't get any that night or for the next month.\n\nAnother problem I used to seem to have is my wife always wanted me to stand behind her and protect her. Believe me, she was more than able to take care of herself. I remember one time when we went to this one bar. It was pretty crowded and the only seats in the place were two empty stools at the counter.\n\nWe sat down but I didn't realize my wife was sitting next to a man who was totally inebriated. My wife looked at me with that look of disgust. I gave her my, \"I'm sorry, I didn't know\" frown. Then it happened. The drunk let out the biggest fart you ever heard. Phffffffttt.\n\nMy wife gave me that, \"do something\" look. I jumped up and pulled the drunk off his stool and started shaking him saying, \"I dare you fart before my wife!\"\n\nThe drunk looked at me and, scared as hell, he said, \"I'm sorry, sir! I didn't know it was her turn.\"\n\nToilet seats always seem to be a problem. I'll never know why, if it's up and you have to take a shit or a woman wants to use it, put the damn thing down. If you have to take a piss, then lift it up. Don't piss on the seat. Women don't like to sit on a toilet seat that is all wet. If you pissed on it, then wipe it off. Your wife will be glad you did and it will prevent another argument\n\nA new problem has risen in my household concerning toilet paper. Now my wife gets pissed if the roll is empty when she uses the bathroom. If the roll gets small go in the cabinet and take out a new roll and set it by the old roll. It shows you're at least trying. If for some reason there are only a few sheets on it, throw it away and put the new roll out.\n\nWomen have a tendency to use a lot more paper for obvious reasons. Make sure there is enough for her next trip to the restroom.\n\nWe guys need to learn which battles are worth fighting for and believe me, a roll of toilet paper is not it.\n\nOral sex is still a problem at my house. My wife doesn't like to do it. I think one of the reasons is because of her false teeth. I know they are hard to control when eating a pussy because I have that problem too. I just take them out and gum the hell out of her pussy. I asked her to do the same thing.\n\nI've never said it to her but I don't care if she looks great while giving me a blowjob. I just want to come. Besides, I would just as soon that she gum my cock as bite it with false teeth. I'm still working on that problem.\n\nOne big problem that pisses my wife off is when I do the grilling. I don't have a lot of say-so here but people always congratulate me on a dinner well done. You see, my wife has thawed the steaks, put the seasonings on them and brought them out on a platter. All I do grill them.\n\nWell, I stand there and keep my eye on them she makes the potato salad, relish tray and everything else for our cookout. Our guests always tell me how good it was. If you have this same problem, don't wait for your wife to get mad. Tell your guests how the little woman did all the hard work and got it all ready. At least it will soften the blow and she might not hate you.\n\n-------------------------------- \n\nI'm not the only husband with problems. My friend Frank feared his wife wasn't hearing as well as she once did and he thought she might need a hearing aid. Not quite sure how to approach her, he called the family doctor to discuss the problem.\n\nThe doctor told him there is a simple informal test the husband could perform to give the doctor a better idea about her hearing loss.\n\n\"Here's what you do,\" said the doctor, \"stand about 40 feet away from her, and in a normal conversational speaking tone see if she hears you. If not, go to 30 feet, then 20 feet, and so on until you get a response.\"\n\nOne evening my friend's wife was in the kitchen cooking dinner, and he was in the den. He says to himself, \"I'm about 40 feet away, let's see what happens.\"\n\nIn a normal tone he asks, \"Honey, what's for dinner?\" No response.\n\nSo, my friend moves closer to the kitchen, about 30 feet from his wife\n\nand repeats, \"Honey, what's for dinner?\" Still no response.\n\nNext, he moves into the dining room where he is about 20 feet from his\n\nwife and asks, \"Honey, what's for dinner?\" Again, he gets no response.\n\nSo, he walks up to the kitchen door, about 10 feet away. \"Honey, what's for dinner?\" Again, there is no response. \n\nHe told me he was scared that his wife had lost most of her hearing so he walked right up behind her. \"Honey, what's for dinner?\"\n\n\"Frank, for the FIFTH damn time, CHICKEN, we're having chicken!\"\n\nSo before you blame the little lady, make sure you're right. Frank now wears a hearing aid.\n\nMy buddies Al, George and Ralph all thought their wives were very simple minded. We were at the bar one day drinking a few beers when the subject of what stupid things our wives do came up. I decided to stay out of this one because whatever I said would somehow, someway get back to my wife and there would be hell to pay. I was interested to see what my friends had to say about their wives.\n\nAl went first. \"My wife is as stupid as they come. The bank called the other day and said our checking account was overdrawn. Linda told me that it wasn't even possible, she still had six checks left in her checkbook.\"\n\nGeorge went next. \"My wife did something more stupid then that. She went and bought a lawn mower because it was fifty percent off.\"\n\n\"What's wrong with that, George? You got a new mower and she must have gotten it at a pretty good price,\" I asked.\n\n\"We live in an apartment building and don't even have any grass,\" explained George.\n\n\"My wife has got them both beat,\" said Ralph. \"The other day I wanted a cigarette so I went into my wife's purse to get one and I saw a whole box of condoms in her purse. She must have got a hell of a deal on them but I've had a vasectomy and she doesn't have a cock. How much more stupid can she be? \" laughed Ralph.\n\nAfter listening to Ralph, I thought it was time to go home. I don't think Ralph was wrapped together very tight.\n\n------------------- \n\nI went to see another one of my friends who was in the hospital. He was beat up pretty badly. He told me that he came home one day and his wife was in her birthday suit. He cracked a little joke and his wife didn't think it was funny.\n\nThe way the story goes was that his wife went over to his son's house to visit her new daughter-in-law. When she got there her daughter-in-law was naked except for an apron. When she asked her why she wasn't wearing clothes she was told that their son Brad loved to come home and be greeted at the door with her being naked. He would take her even before they ate dinner.\n\nMy friend said his wife thought she would jazz up their love life and try it. When he came home and saw his wife naked, he asked her why she was wearing only her birthday suit. She told him she did it to look good for him.\n\nHe made the mistake of trying humor and told her she should have ironed it first. He should be released from the hospital the first of the week.\n\nOne time I returned from the bar and my wife was trying on some clothes that a friend gave her. The woman used to dress like a clown. My wife came out with a stripped pair of pants, a checkered blouse and a goofy looking hat. She asked me how I thought she looked.\n\nShit! Should I tell her the truth or not? She really did look like a clown. So I told her, \"You look like a million bucks,\" I replied.\n\nShe responded, \"You've never seen a million bucks.\"\n\nI said, \"That's right! You look like something I've never seen.\"\n\nI don't think we're talking yet.\n\n---------------------- \n\nI was writing this short 'How To' when I received an e-mail from a friend. It fit my wife to a tee but I knew if I gave it to her, she would get pissed at me. I sent it to my son who my wife says is nice and nothing like me. I had him send it to his mom and she thought it was hilarious and gave it to me to read. It's about everything his mother has taught him. I thought I'd share it with you.\n\n25 REASONS I OWE MY MOTHER: \n\n1. My mother taught me TO APPRECIATE A JOB WELL DONE. \n\n'If you're going to kill each other, do it outside. I just finished cleaning.' \n\n2. My mother taught me RELIGION. \n\n'You better pray that will come out of the carpet.' \n\n3. My mother taught me about TIME TRAVEL. \n\n'If you don't straighten up, I'm going to knock you into the middle of next week!' \n\n4. My mother taught me LOGIC. \n\n'Because I said so, that's why.' \n\n5. My mother taught me MORE LOGIC. \n\n'If you fall out of that swing and break your neck, you're not going to the store with me.' \n\n6. My mother taught me FORESIGHT. \n\n'Make sure you wear clean underwear, in case you're in an accident.' \n\n7. My mother taught me IRONY \n\n'Keep crying, and I'll give you something to cry about.' \n\n8. My mother taught me about the science of OSMOSIS. \n\n'Shut your mouth and eat your supper.' \n\n9. My mother taught me about CONTORTIONISM. \n\n'Will you look at that dirt on the back of your neck?' \n\n10. My mother taught me about STAMINA. \n\n'You'll sit there until all that spinach is gone.' \n\n11. My mother taught me about WEATHER. \n\n'This room of yours looks as if a tornado went through it.' \n\n12. My mother taught me about HYPOCRISY. \n\n'If I told you once, I've told you a million times. Don't exaggerate!' \n\n13. My mother taught me the CIRCLE OF LIFE. \n\n'I brought you into this world, and I can take you out.' \n\n14. My mother taught me about BEHAVIOR MODIFICATION. \n\n'Stop acting like your father!' \n\n15. My mother taught me about ENVY. \n\n'There are millions of less fortunate children in this world who don't have wonderful parents like you do.' \n\n16. My mother taught me about ANTICIPATION. \n\n'Just wait until we get home.' \n\n17. My mother taught me about RECEIVING. \n\n'You are going to get it when you get home!' \n\n18. My mother taught me MEDICAL SCIENCE. \n\n'If you don't stop crossing your eyes, they are going to freeze that way.' \n\n19. My mother taught me ESP. \n\n'Put your sweater on; don't you think I know when you are cold?' \n\n20. My mother taught me HUMOR. \n\n'When that lawn mower cuts off your foot, don't come running to me.' \n\n21. My mother taught me HOW TO BECOME AN ADULT. \n\n'If you don't eat your vegetables, you'll never grow up.' \n\n22. My mother taught me GENETICS. \n\n'You're just like your father.' \n\n23. My mother taught me about my ROOTS. \n\n'Shut that door behind you. Do you think you were born in a barn?' \n\n24. My mother taught me WISDOM. \n\n'When you get to be my age, you'll understand.' \n\n25. And my favorite: My mother taught me about JUSTICE \n\n'One day you'll have kids, and I hope they turn out just like you.\n\nWell, that pretty much covers it for this year. Hopefully, you will take some of the ideas and it will appease the little wife and make life more bearable for both of you.\n\nThanks for reading my 'How To' Please understand that I was having a little fun here. I know you probably have read some of this stuff before, somewhere. I wrote it from memory and thought I'd share a few laughs. Also, a big Thank You to my editors, Miss Lynn and Techsan.\n\nComments are always welcome and appreciated.\n\nDG Hear "
    ],
    "authorname": "DG Hear",
    "tags": [
        "humor",
        "marriage",
        "relationship advice",
        "battle of the sexes",
        "sex advice"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/how-to-piss-off-my-wife"
}
{
    "title": "A Very Special Delivery Ch. 02",
    "pages": [
        "It had been weeks since I heard from anything from Dr. McNurthy. My cravings for another delivery of cum from the sperm bank that he worked at bordered on painful. My dreams were haunted by a vision of an endless supply of flowing cum -- hot, warm, slickery cum. Until his first delivery, I'd never considered myself a kinky individual. Sure, I played on the Internet a bit, and even posted the occasional digital photograph of myself, but that was the extent of my kinkiness. Who would have thought that his special gift could have released such primal needs within me?\n\nI often wake from my dreams, in the middle of the night, with an insatiable burning between my legs \u2013 beckoning for attention and release. When I close my eyes I can still see myself in the mirror, dripping cum from my face, hair, breasts and mouth \u2013 and it only fuels my desires more.\n\nLast night, when I logged on to my favorite bulletin board, I was greeted by a new message from the Doctor. My hands were trembling on the mouse as a rushed to click on the message link, hoping that he was, indeed, going to send me another delightful delivery. When my hopes were confirmed in his letter, the strangest thing happened, I gasped, and welled with tears. Emotion had over come me in a way I'd never expected. \n\nAs I sit here, awaiting his delivery, I contemplate the thoughts that kept me awake most of the night. What have I become? How could something like this have changed me so easily? How could my thirst for something so naughty, be so overpowering? \n\nOut the window, I watched for the approach of the delivery vehicle while sipping on my coffee. I'd taken the entire morning to prepare the bathroom and myself for another adventure. I washed and carefully arranged my collection of sex toys on the counter. I dressed in my favorite lingerie and heels, and I wrapped myself in the ultra-thick, white, terrycloth robe I'd worn the on the day my first package arrived. When everything was set, I phoned the office and told them I needed a day at home and catch up on my financials without any interruption. It was the perfect start to the soon-to-be perfect day. All I needed now was for my package to arrive.\n\nI sipped again at my coffee as a white van slowed in front of the house. My heart stated to race and I jumped up from the bar stool I was sitting on at the kitchen counter, and headed towards the door at a run. Cool air rushed under my robe, and what I had thought was just a minor wetness, flowed down my thigh with each step. It felt liberating, but I could only think to myself, \"What have I become?\" With a smile, I answered myself out loud, \"Someone who is about to have an excellent day.\"\n\nI opened the door as the van came to quick stop in the driveway. I'd have run out and unloaded the box myself, but I had plans for the young delivery boy that couldn't be conducted in the driveway. Yes, I was going to give him a good tip. I'd already decided on it hours ago. I mean, what young man wouldn't mind a good cock sucking first thing in the morning?\n\nThe door to the van swung open and my heart nearly sank, as large, woman in coveralls stepped onto the driveway and walked to the rear of the vehicle. My vision of a thick, silky piece of meat, stroking my tonsils, vanished with a frustrated sigh and I tossed my head back in aggravation. I'd deliberated with myself for nearly an hour as to whether I should or shouldn't do something so downright slutty. After all that turmoil, and finally deciding to do something so out of character for me, it was irritating not to have the opportunity. \n\nThe driver approached the house with my box on a red hand-truck. The box appeared much larger than the first one I had received. What could the doctor have sent this time?\n\nShe spun the wheels of the truck around and huffed as she popped the box up the stairs and onto the front step. The metal clunked as it struck the ground and the cart stood upright. She handed me the clipboard and I signed it quickly and passed it back to her.\n\n\"Running late for work?\" She said as she looked down at the heels and stockings poking out from under my robe.\n\n\"Ummm... sorta, I replied while tightening the belt on my robe so she wouldn't see my corset. \"I had planned to head to the office after this delivery, so I took my time getting dressed.\"\n\n\"Well, would you like me to put the box in the house? I'd hate to see you trying to lift something like this in those shoes,\" she said, gesturing to the large box.\n\n'That would be great. Thank you.\"\n\nI held the door as she carried the box in, \"Just set it in the hall here,\" I said as I headed to my purse on the counter to get a more traditional tip. I returned with a ten-dollar bill and handed it to her as I showed her out the door. \"Thank you so much for the extra help,\" I said, \"Have a wonderful day.\"\n\n\"You too,\" she waved on her way to the truck. \n\nI grinned to myself and said softly, \"I will. I most certainly will\"\n\nI rushed to the kitchen for scissors and returned to open the box. I slid one blade over the tape and ripped the box open with all the excitement of a child on Christmas morning. I yanked the Styrofoam inner lid off and smiled deviously as not, one, but two containers appeared. I could feel the smile reaching from one side of may face to the other. Between the two containers was another box, wrapped in silver paper with a gold ribbon and delicate bow. Next to the gift-wrapped box was an envelope. I lifted the envelope and the inscription on the outside it read, \"Do not open until you are finished.\" \n\n\"Just like the good doctor to be mysterious,\" I thought.\n\nI slid the envelope into my robe pocket for later and started to unwrap the gift. I tossed the paper aside and opened the lid of the box inside. A thick, natural looking dildo appeared and connected to the bottom was a long tube and squeeze ball. I'd seen these squirting dildos in an online store before, and knew exactly what it was. I pursed my lips and lifted the tip of the dildo towards me and peered at the thick hole inside. It needed to be filled. Now. I needed to be filled. Now.  \n\nI tucked the dildo under my arm, grabbed one container and rushed up the stairs to my bathroom -- then I returned for the other container. After the short trip, I set the second container on the floor next to the other and shucked of my robe, closing the bathroom door behind me.  I lifted the dildo again to inspect it, and read the small tag attached to the hose;\n\nMy Dearest Elizabeth,\n\nI took the liberty to clean and sterilize this for you. It's ready for your use. May your day be filling and deliciously satisfying.\n\nDoc.\n\nI looked into the mirror at the reflection of the dildo in my hand \u2013 contrasting against the background of my black, lace corset. Above the counter top, I could see the snug lace tops of my thigh highs circling my leg and the very wet center of my thong. I set the dildo on the counter and slid my thong down over my hips -- letting it drop around my ankles. I stepped my heels out of the wet lace and kicked my panties to the side as I returned my attention to the mirror. I looked at my clean-shaven pussy. It looked so smooth and wet. I don't consider myself vain, or super-model material for that matter, but I do turn a few heads from time to time. I like to look good and I do work at it. I love the feeling I get when I dress sexy, and I like the look of me being sexy \u2013 or, as in this case, slutty. Today, I'm going to be a bad girl again -- very bad. \n\nMy hand drifted to my aching sex, and immediately teased through my wetness. I watch in the mirror as one hand circles my aching clit and the second starts to plunge fingers in and out me. My attention drifts back to the dildo on the counter and I grab it and kneel next to one of the buckets. Within seconds I spin the top off and lift the lid sideways. As expected, the top of the lid is coated in pearl colored icing \u2013 begging to be licked clean. I tilt the lid to my lips and lap at the warm coating into my mouth. The salty taste flares across my tongue and the sharp aftertaste spreads over my taste buds with each swallow. I feel myself flowing between my legs, as if the liquid is pouring right through me. I adjust one hand to hold the lid and turn the attention of my fingers back to my aching clit.  \n\nAs I lick the last drops from the lid, the first wave of bliss quakes between my legs and a spasm courses through my body \u2013 jerking my hips violently. With my eyes closed, I hold my breath until I feel the tremors of my orgasm subside.\n\nI looked down at the two buckets of cum in front of me, and wondered how many more orgasms I could stand to have today. While I wasn't sure, I was sure the next one was going to be with the new dildo I'd received. I spun the ball pump off of the hose and submerged it halfway into the warm pool of cum \u2013 squeezing the air bubbles out and watching the cum suck in. I felt the heat and wetness on my fingers as I dipped the bulb in deeper. When I was sure it was filled, I lifted it over the bucket and secured it to the dildo. I licked the excess off of the ball pump, and I dipped the dildo into the pool to lubricate it. A lifted up on my knees as I positioned the dildo between my legs. I slid downward slowly -- pressing my aching pussy over the dildo. The pressure of the thick head entering me made me quiver. My tightness squeezed the coating of cum down the sides of the dildo, and I watch as cum runs towards the floor like dripping paint. After a few thrusts I was sliding easily on the dildo and rubbing my button with my free hand. I held the ball tightly, and pushed my fingers hard towards my palm \u2013 injecting the first load of cum from the dildo deep inside me. The heat spread in my abdomen and I could feel the volume of wetness filling me. The dildo slid easier and faster. Cum leaked out of me around the dildo and I kept reaching down to spread it over my clit in fast, tight circles. As the waves began to build inside of me again, I pumped the ball furiously \u2013 feeling loads and loads of cum pouring into me. My hips bucked again, and electric shocks twisted my torso from side to side, as my second orgasm quaked through me.\n\nBefore I could recover, the doorbell echoed through the vaulted ceilings of my home. I tried to ignore it, but the repeated ringing soon led to knocking. I spun the lid on the container, stood on numb legs and placed the dildo on the counter. I quickly put on my robe, as the impatient knocking became suddenly became pounding. I tightened the robe, made myself as presentable as possible in the mirror and rushed to the door.\n\n\"Coming,\" I yelled as I descended the stairs wondering who the fuck could have interrupted my special moment.\n\nWhen I opened the door, I nearly passed out. Sandra McNurthy, my account and wife of the Dr. William McNurthy, stood there, with an obvious look of agitation and anger.\n\n\"Where is my husband?\" She said as she pushed her way in and past me, \"I know you two have something going on. Where is he?\"\n\nI twisted to follow her as she barged into the house, and felt a river of cum begin to flow down my leg. Tried as I could, no matter how hard I could pull my muscles together, I could not stop the flow. I turned briefly away from her and pushed my robe into my crotch to stop the dripping, then turned to her with a sharp reply, \"Your' husband isn't here. What are you talking about Sandra?\"\n\n\"Don't 'what' me Elizabeth,\" I know what's going on. I read his email you know,\" she stated as she pulled a stack of printouts from the envelope she carried. \"Where is he?\" She repeated again, raising her trembling voice even higher.\n\n\"I told you Sandy, he's not here. There's nothing going on. It's not what you think.\"\n\n\"It's not WHAT I think Liz -- it's what I know,\" she said waving the printouts inches from my face, \"It's what I've seen \u2013 like his collection of your naked pictures.\"\n\n\"You've got it all wrong Sandy. I've never done anything with your husband. I've never seen him. Ever! Except when the three of us have been together. I swear to you.\"\n\n\"Sure, and that's your everyday work attire?\" She said as she pointed to my corset, which was now visible through the front of my robe. \"Expecting someone? My husband perhaps?\"\n\n\"Dammit Sandy. I told you,\" I retorted with more volume, \"I'm not fucking your husband.  I'm not kissing your husband. I've never seen your husband outside of our working relationship. Can you stop with the accusations for one second so I can explain?\"\n\nShe looked at me, tears streaming down her face and I could tell she wanted to speak again, but couldn't.\n\n\"I swear to God Sandy. I'd never do anything to hurt you, and I swear I have never, EVER, touched your husband. Please give me a chance to explain. Please?\"\n\nHer hand was resting against her over her lips. I could see her clenching her jaw and trying to hold back the flow of tears as she nodded. I grabber her arm and led her into the kitchen. She sat at the island and I poured two cups of coffee as she sat in a silent rage of emotions. She looked lost. And while her husband and I hadn't ever had a physical or emotional contact of any kind, I couldn't help but feel responsible for her pain.\n\nI slid her coffee across the countertop, and my heart sank from her helpless sight. My eyes welled with tears and I looked into her eyes as I started to speak, \" First, please believe me Sandy. I have never had an emotional, sexual or even flirtatious action or conversation with your husband. What has transpired between 'us', has nothing to do with 'us' as much as it has to do with 'something'. In order to explain it I have to start from the beginning.\"\n\nI sipped at my coffee and prepared to bare my entire story and soul. I took a deep breath, and looked directly at her and started into my story, \"It all began about a year ago. I found this bulletin board online where people post their erotic stories. I started out just reading stories, and a few of the people I met online talked me into posting pictures of myself. My first pictures were just lingerie pictures, and after a lot of coaxing from the viewers, I started posting nude pictures. I'd have never thought I could ever do anything like that in my entire life, but the more I did it and the more compliments and appreciation I got, the more addictive it became. I'd only posted a few pictures that ever showed my face, but when I did, I guess that's when William recognized me online.\"\n\nI paused and waited for her reaction, but she was blank, so I continued, \"I didn't know he'd recognized me until a few weeks ago, when he sent me a package. In the package he sent a letter that said he'd recognized me and that he'd keep my secret safe. The package,\" I stuttered, \"was very strange. It was from his work, and, well... it...\"\n\n\"It what?\" She asked sternly.\n\n\"It was...\" I stumbled my words, then put my face in my hands and shook my head, \"It was...\"\n\n\"It was WHAT?\" She demanded.\n\n\"It was cum. I mean sperm,\" I blurted, \"from the bank that he works at.\"\n\n\"No,\" she said in disbelief, \"you're lying. How could... why... would he send you sperm? This is bullshit.  I read your mail. You told him you loved his package. Needed his package. You're seeing my husband. You want his cock and beg for it in emails. I'm not going to sit here and listen to these lies.  You're a whore and you're trying to steal my husband, and I'm not going to sit here and listen to this.\"\n\nSandy lifted herself from the counter and started for the door in anger. I chased after her and grabbed her arm to stop her, \"I'm not lying to you. It's the truth dammit, and I can prove it.\"\n\nI pulled her by the arm from the front door up the stairs and into my bathroom. She followed along reluctantly and I didn't let go of her arm until I pushed the bathroom door open, revealing my counter full of sex toys and two containers on the floor, \"You see? Do you see the monster your husband has created?\" I said pointing at the toys. I grabbed one of the containers from the floor and banged it on the counter next to the sink. I spun the top off and stood back from the contents and gestured towards it, \"I'm not lying. Your husband sent me a bucket of cum from the sperm bank. I didn't ask for it. I didn't fuck him for it. I didn't want it. He did it. And,\" I paused \"I played with it. I didn't want to. I wasn't going to. It just happened. And...\" my tears started to flow, \" And, I liked it. I didn't want to, but I do...\"\n\nSandy never looked at me. My tears rolled over my cheeks and at that moment I didn't know who I should be mad at; William, Sandy or me? I wanted to turn the clock back and wished I'd never posted a picture or received that first delivery. Sandy never took her eyes off of the bucket, and she spoke without looking at me, \"Is this really? I mean all this? All cum... sperm?\"\n\n\"Yes,\" I sighed.\n\nShe leaned in towards the bucket and inhaled, \"I don't understand? I mean why? How could...\"\n\n\"I don't know why he did it Sandy. You'll have to ask him that. What I can tell you, again, is that nothing ever happened between us. Nothing. \"\n\nSandy looked up at me for the first time without anger in her face, \"I'm sorry Liz. I didn't know what to think. I mean...\"\n\n\"It's ok. I can see why you got the wrong impression,\" I said as I leaned in to hug her and whispered in her ear as I squeezed her tight, \"Nothing ever happened. I promise you with all my heart. There is nothing going on between me and your husband.\"\n\nOur hug seemed to last forever. We cried at first, and just hugged silently until we released our hold. As we pulled apart, I held both her hands in reassurance, \"In fact Sandy, after finding our your husbands Screen Name on the website, I went and read his posts on the site. He adores you. I've seen women flirt with him online, offer him invitations for cyber sex and even real sex \u2013 yet he always respectfully declines. He loves you Sandy. He really does.\"\n\n\"Then why doesn't he do things like this for me?\" She said pointing at the bucket, \"Why doesn't he want nude pictures of me?  I have desires too, you know? I have needs too. I mean, I don't have sex toys like this,\" she said picking up the squirting dildo, \" but it doesn't mean I wouldn't want one\" \n\nHer hand squeezed the ball and a long rope of cum shot from the tip, catching her across the face, neck and the front of her suit jacket. She jumped in surprise and dropped the dildo, letting out a squeal, \"Oh god. Shit. Is this...?\" \n\nI reached up with my hand and caught a large drip of cum rolling off of her chin. \"Don't worry. It's safe. Your husband assured me of that. It's definitely disease free and you're not going to catch anything.\"  Subconsciously, I rolled the gob from her chin onto my fingers and straight into my mouth.\n\n\"LIZ! Oh my god,\" She stammered, \"You ate it! Oh my god, you don't even know... Oh my god. How could you?\"\n\n\"I week ago I couldn't, I said as I dipped two fingers into the bucket on the counter and slurped them clean in my mouth, \"Now it's easy \u2013 and, you can thank your husband for that.\"\n\nSandy looked at me with disbelief, but not disgust, \"Oh my God that is so wrong. What does it taste like?\"\n\n\"Like your husband I suppose,\" I replied, \"Some is sweeter than other's but it's all pretty much the same. It tastes... sexy.\"\n\n\"I've never tasted him,\" she sheepishly admitted.\n\n\"Sandy, you mean you've been married 15 years and never let him cum in your mouth?\" She didn't reply and just shook her head. \"No wonder he's on the Internet all the time,\" I muttered.\n\n\"I'm not a prude you know?\"\n\n\"I didn't say you were.\"\n\n\"But you were thinking it,\" She continued, \"We did it in the car once. In broad daylight.\"\n\nI looked at Sandy in her proper business suit. Her deep brunette hair was pulled back tight and her trendy, wire-frame glasses rested across her nose. She was all business, all the time. Her figure was shapely, and her perky, firm, b-size breasts were always at attention. Her slender legs were nearly covered by her uninviting, almost knee-length skirts. \"You know,\" I said looking at her, \"I've got an idea. Just wait here. I'll be right back.\"",
        "I rushed out of the bathroom and collected a sheer black, baby doll outfit I had hanging in the closet. I grabbed a pair of thigh highs and my digital camera and returned to the bathroom. As I entered the bathroom, I caught Sandy inspecting my toy collection and she looked up with a startled blush, \"Oh, sorry, I... umm...\"\n\n\"Don't worry about it,\" I smiled, \"I have a few in the closet I have opened yet, would you like to take one home?\"\n\n\"No. That's ok. I couldn't.\"\n\n\"Sure you can. I insist.\"\n\n\"What's that for?\" She said, pointing at the armful of stuff I had.\n\n\"I think we can show your husband just how sexy you can be. I mean, if you're willing?\"\n\n\"That depends,\" she said with a curious tone in her voice, \"I'm not really good at this.\"\n\n\"Practice makes perfect. Put this on,\" I said handing her the armful of stuff. She took the bundle and stood there. I looked at her to see why she was waiting, and she nodded her head towards the door, motioning me to leave. \"Honestly Sandy, if you can't even change in front of me, you're hardly going to be able to pose for a pictures.\"\n\n\"Pictures?\" She yelped with surprise, \"You never said anything about pictures. I couldn't possibly...\"\n\n\"Sandy, how else are we going to show him? Men are visual beasts. They understand pictures. Besides, would you rather him be looking at other people on the Internet, or pictures of you?\"\n\nShe looked at the clothes in her arms, at the counter filled with toys, and then at the bucket on the counter, \"I don't know if I can do this Liz.\"\n\n\"Sure you can Sandy. I'll help you.\" I stepped towards her before she could chicken out and lifted her jacket over her shoulders. It slid off easily and brought us surprisingly close. I dropped the jacket to the floor and began to unbutton her blouse, \"Sandy, you really need to relax a bit. There's nothing wrong with feeling or being sexy from time to time.\" As I rolled her blouse over her shoulders, her sheer, beige bra appeared with her erect nipples poking through the fabric. She squirmed slightly as I \"accidentally\" brushed my forearm across one of them.  Her body jerked back slightly, and I noticed she was holding her breath, \"It's ok to breath,\" I giggled.\n\n\"Sorry,\" she apologized through her exhale with a smile.\n\nI pulled her blouse out of her skirt and dropped it to the floor. Without pausing, I reached behind her to unclasp her bra and I noticed her eyes were closed. It had been a very long time since I enjoyed the taste of a woman, and I suddenly felt my appetite for her growing, \"This sheer bra looks incredible on you,\" I said into her ear, \"does William like it?\"\n\nHe's never seen it, \"she replied as she rolled her head back further.\n\nI slid her bra off of her shoulders and she extended her arms forward to ease its removal. The sheer fabric fell from her breasts. I wanted to lean in and nibble on them but I had a feeling that would end our moment before it even started. I quickly decided that if I were going to seduce her at all, it would have to be slowly, in a teasingly perfect manner.\n\nAs her bra came off I knelt on the floor in front of her and reached for the button and zipper on the left side of her skirt. The button opened easily and I took my time with the zipper, watching her expression and body language as I did disrobed her.\n\nShe lifted her arms away from her body and took a deep breath as I slid the skirt over her hips. The silk lined skirt slid smoothly over her pantyhose covered hips. As the waistline of the skirt crested her thighs, I noticed her sparse landing strip of hair behind the nylon, and the top of her smooth crease, \"I don't were panties under nylons, I hate the lines. Sorry.\"\n\n\"You don't have to apologize to me Sandy. I totally agree, \" I said reassuringly, \"It's either this or a thong when I wear a skirt.\n\nShe finally opened her eyes, and rested a hand on my shoulder as she stepped out of the skirt. I gracefully helped her remove her shoes, and before I could reach the waist of her pantyhose, she was already rolling them down. Not wanting to be too, aggressive, I let her remove them on her own. I reached over, while still on my knees, and grabbed the thong for the baby doll outfit I'd brought her. It was a lovely lace pattern with a scrumptious string of fake pearls connecting the front and back. I held them out as she stepped into them, then lifted them up her legs and over her waist. My face was just inches from her lovely pussy, and I nearly drooled as the beads snuggled between her fold. I took a few moments to overly adjust the beads by wiggling the waistband back and forth. A slight gasp escaped her lips and she looked at me with a grin, \"I'd have difficult time wearing these at the office all day. People would wonder why I was smiling so much.\"\n\nI smiled back at her and licked my lips, \"The smile is where it starts. It's finding the right place at the office to finish that's important.\n\nWe both giggled as she finished dressing and I gave her some personal space to relax the mood. I watched as she slid her perfectly painted toes into the thigh highs and rolled them over her calves, and up her milky thighs. I've always loved the feeling of nylon sliding against nylon and I wanted our legs tangled together -- soon. Why William overlooked her beauty I couldn't understand, but I wasn't about to. \"Come here,\" I wiggled my finger, \"Look in the mirror.\" She stepped next to me and gazed in the mirror. A smile spread across her face as she looked at the reflection of her newfound sensuality. \"Just one more thing,\" I said as I reached up and undid the clips holding her hair. I teased my fingers though her sleek, glossy hair as it rained over her shoulders. I peered over her shoulder and spoke to her reflection, \"What man could refuse this,\" I said as my hands slid from her shoulders to her waist, \"I mean, oh my god loot at you. Even I'd do you...\"\n\nSandy grinned at herself in the mirror and I had hoped she caught the hint that I'd dropped. If she did, she wasn't really bothered by it, and I risked proving my point by letting my hands slide under her chemise, which I lifted to expose her breasts, \"I mean look at these, God they are so perfect. Any man would beg to taste and tease these,\" I said as I gave one nipple a brief tweak. I felt her body quiver and she blushed. I backed away quickly and changed the subject to relax her again. I decided each step towards her would bring a bit of pressure, then I'd give her a bit of safety by backing off, until she gave in to her desires. I grabbed the camera and swung back towards her, \"ready to go super model?\"\n\nWe stepped into the bedroom and clicked a few pictures to warm up. As she modeled I coaxed and praised her, \"You need to seduce the camera more Sandy. Pretend it's a man and you are trying to get him off with your body language. Touch yourself everywhere and a lot. Pretend your hands are your husbands and just do what you like him to do.\"\n\n\"Ok,\" she giggled, \"I'll try.\"\n\nI walked over to my radio and turned on some music. Sandy swayed and her hands really started to slide up and down her body. \"That's it. Pull at the fabric a bit,\" I instructed. She tugged on the waistband under her chemise and I watched as the beads slid back and forth between her fold -- which seemed to swell and then part as she moved faster. \"Mmmmmm, that's it. God that is sooooo hot.\" The more she wiggled the more her slit parted. Her lovely pussy lips were now visible and looked as if they were almost reaching for the moving beads. She worked the beads back and forth faster as her hips were grinding to the music. If her eyes were open, she would have seen me discard my robe. My pussy dripped and I teased it a bit -- not caring if she saw me or not. Sandy was obviously lost in her own world and I knew it was time to move things forward. I stepped up and grabbed her hand, which was sliding towards her protruding clit, \"Over here Sandy, I said as I pulled her back in the bathroom, \"use this.\"\n\nShe took the squirting dildo from my hand and looked at me curiously, \"use it how?\"\n\n\"Lick it. Suck on it. Tease it,\" I said.\n\n\"Oh, ok,\" she smiled. \"I can do,\" she said a bit reluctantly.\n\nSandy kissed the tip then circled her tongue around the head. Her lips parted and she engulfed the head of the dildo as my camera flashed. For a girl that never let her husband cum in her mouth, she worked that flexible cock like a professional. The squeeze bulb dangled between her breasts and swayed with her movements. When she opened her mouth wide and slid the cock in deep, I grabbed the bulb with a hard squeeze. Sandy's eyes flew open and I watched her swallow hard, then cough a bit as a I pumped it a second time. She jerked her head off of the dildo and before she could speak, I asked, \"That wasn't so bad. Was it?\"\n\n\"That was evil,\" she said through a wince and the potent flavor, \"are you sure it's ok... I mean safe?\" \n\n\"The safest,\" I said as I lifted the spurting cock to my mouth and pumped three thick streams into it. Sandy's eyes locked on mine and she opened her mouth. I pointed the cock towards her again and pumped another stream into her mouth, then hit her on her cheek and face with another squeeze. \"Ooo.. sorry. Let me get that,\" I apologized as I leaned in and lapped the dripping cum off of her cheek. Before she could react, I slipped my mouth over hers and pushed some cum from my mouth into hers. Our tongues darted back and forth, spreading the juice from my mouth into hers. I placed the camera on the counter and my hands went to work on her breast and clit. I pushed the beads from side to side, feeling her hips grind forward. She moaned deep in her throat as I breeched the opening of her pussy with two fingers. They slid in with ease through her flowing juices. She moaned again then peeled her lips off of mine.\n\n\"I've never...\" She sighed, \"been with a woman Liz, I...\"\n\n\"Just enjoy it Sandy,\" I whispered, \"You can dream about it later.\" I slid my hand over hers and moved it towards my pussy. It was all the coaxing she needed as her fingers went right to work. Her fingers plunged in and out of me and her thumb circled my button just perfectly. We paused for a brief second and removed our tops, and I slid her thong off. In pointed to our reflections in the mirror and we looked a porn pictorial \u2013 naked except for our thigh highs and heels.  I guided her to the floor and moved the open bucket from the counter next to us. As Sandy leaned back on the towel I'd spread on the floor, I dipped a hand into the bucket and held it over her belly. Cum dripped between my fingers and splashed over her torso, \"Rub it in,\" I pleaded.\n\nSandy's hand smeared cum over her thin belly and breasts. Her fingers tweaked and kneaded her nipples as the aroma of sex began to fill the room. The smell of cum was like an airborne intoxicant, and the moment to slip into a dream-like state. I scooped cum into my mouth until I couldn't hold anymore.  I slid forward and straddled Sandy's stomach \u2013 grinding my pussy pack and forth on the slick pool of cum she'd spread on her belly. I leaned over her and my hair dangled down around her face. I removed her glasses and traced a finger over her lips, guiding her mouth open. I nodded and winked at her to signal that I wanted her keep her mouth open. I leaned my lips closer and let a gob of cum fall from my mouth into hers. Her tongue swirled it back and forth as I let the next drops flow over my lips. She swallowed deeply as I fed her, smiling with each gulp. I kissed her with an open mouth as the last of my mouthful passed into hers. For the first time, she acted without instruction and I felt her hands kneading my ass, then her finger pressed against the tight ring of my anus. I moaned acceptance and pressed hard against her wet finger as it pierced my tight hole. I threw my head back and pumped against her finger as she fucked it in and out of me. I only paused long enough to slide forward where her mouth could reach my pussy, and she plunged her tongue into me.\n\n\"Oh fuck yes, Sandy.\" I wailed, \"That's feels sooooo good.\" My body quaked as her tongue flicked my clit and fingers probed my ass. Intense waves of pleasure knotted my insides and I bucked wildly against her face as my orgasm rippled through me and I fell forward onto my hands, gasping for air and calm. As I gained my composure I glided back down her body, I stopped to kiss her face and thank her, \"That was so amazing Sandy, thank you.\" She smiled without speaking and I knew I had to return the favor, \"you are going to love this,\" I kissed her as I slithered down her body.\n\nI reached for a disposable cup on the counter and filled it to the brim in my bucket. I set the cup aside for a moment and lifted her legs behind her knees \u2013 pulling them towards her stomach. She held them in place as I worked my way towards her lovely, parted labia. I worked in one, then two fingers, pushing them apart to hold her open. When I could see deep in her pussy, I lifted the cup with my free hand and poured the contents into her. She worked her hips back and forth and her pussy pulsed, almost in a swallowing motion as cum drained deep into her. I slid my fingers out carefully then dropped my face between her legs. My tongue flicked over her clit then pushed deep into her \u2013 each time releasing a spurt of cum into my mouth. I nibbled on her swollen lips and clit, occasionally holding her labia between my teeth -- stretching them away from her body. My appetite for her pussy and cum just couldn't be satisfied. I couldn't swallow enough, or lick her fast enough. I plunged two fingers deep into her and curled them up towards her belly. I quickly found her G-spot and worked it hard and fast. Her soft mewing was no longer enough and Sandy nearly burst into song, \"Oh god Liz. Right there. Oh god yes. Fuck me. Fffffffuck me. Yes. Please. Oh god yes.\"\n\nMy fingers reached as deep as they could and worked her G-spot with reckless abandon. She fucked hard against my fingers, screaming, and twisting as her back arched high into the air, \"Oooooooooooooooo fffffuck Oooooooo,\" she screamed and fluid burst from between her legs \u2013 much more than I had put there. Steady hot streams of cum mixed with her spewing juices filled into my mouth, and sprayed across my face and into my hair. I swallowed for all I was worth, yet I couldn't keep pace with the drenching she was giving me. Her hips pushed so hard against my face I nearly fell backward. Her one hand reached for her clit and wiggle it wildly as more juice exploded from within her. I planted my open mouth over the second flow and gagged as I tried to swallowed the immense volume of hot liquid. Then, she collapsed.\n\nI crawled up to her mouth, a liquid mess. She opened her eyes as I lay down next to her. She turned on her side to face me and we kissed through smiles as our legs tangled together \u2013 nylon sliding against nylon. Between kisses, she finally spoke, \"How do we top that?\" She said with a very broad smile.\n\nI giggled, half wondering myself. \"Get into the hot tub. I'll show you.\"\n\nI helped Sandy to her feet and into my two-person jet tub. She leaned back into the molded sides as I collected the open bucket. Without warning I dumped the entire bucket over her face and body. Her hands immediately started moving cum from her body into her mouth as I opened the second bucket. I filled the squirting dildo and joined Sandy in the tub with our second batch. She glistened from head to toe \u2013 much like I did from her soaking, \"roll over\" I said, twirling my finger in a circular motion. \n\nSandy rolled onto all fours and her cum dripped onto the tub floor from her entire body. Her small, heart-shaped ass looked wonderful. I dipped the dildo into the new bucket of cum then slid it up and down between her cheeks. Her small, pink hole seemed to beg for my tongue and I leaned in to kiss it. I pushed my tongue into a hard point and licked around her rim. Sandy moaned as I traced her pursed ass, and I probed at the opening, flicking my tongue into it quickly, until the muscled relaxed and opened enough for me to push my tongue in. Sandy groaned deeply as her ass accepted my tongue. Her hot muscles contracted around my tongue and the familiar taste of cum filled me from inside her. I was a little shocked, but more pleased when I discovered she'd already been spreading cum in there with her own fingers. I figured she must have been doing it when she was eating me earlier. I retracted my tongue and replaced it with the tip of the dildo. She pressed back against the head with force. Her ring opened slowly, as the head disappeared into her, \"Ohh... mmmm. That's soo nice. Soooo full,\" she grunted, \"Rub my pussy more Liz.\"\n\nI lifted my hand to her clit and rolled it between my fingers. She relaxed a bit more and slid her ass deeper into the dildo. After long pause, she began to glide back and forth on the dildo. Her tight ass pulled against it, and her tight ring stretched away from her body every time she slid forward. It was so hot watching her ass fuck it the thick dildo. The more I rubbed her slit the faster she rode it the cock in my hands. Soon, she was banging away on the dildo and screaming to another orgasm. I pumped the bulb furiously as she came, filling her ass with cum as she let loose another round of deep moans and yelps. When she finally slid off of the dildo, her ass gaped open and cum flowed out of her like a river. I could only watch in amazement as the white ooze boiled out of her deep, stretched, red hole.  When the flow had almost stopped I leaned in and pushed my tongue, without resistance, into her ass as far as it would go. As her muscles quivered around my tongue as they tried to tighten \u2013 seeking relief. Each time I swirled my tongue, her hole would spring open again, and her body would shiver. \"Oh,\" she gasped, with each word spilling out of her in a one hard breath, \"Please. No. Mmmm... More... please.\"\n\nDespite her begging, I plunged my tongue deeper, and swirled faster. My hand returned to her clit and rubbed it for all I was worth. Her body convulsed almost immediately, and she collapsed in another violent orgasm. She was spent -- curling into a fetal position on the tub floor, in an absolute pool of cum.\n\nI slid away from her as she rolled on her back, drenched in cum, juices and sweat. I snuggled in next to her and poured what remained of the second bucket, over our faces, in our mouths and over our bodies. We kissed and wallowed in our pool of lust, fingering and licking each other to multiple orgasms before we drifted into a trance \u2013 resting in each other's arms. When we finally climbed out of the hot tub, we snapped a few pictures of each other in all our glory and decided to shower.\n\nOut hot shower was filled with tender moments of mutual pampering. We soaped each other's bodies, kissed often and held each other for long moents of silence under the soothing spray above us. When the water started to run cold, I stepped from the shower and wrapped myself in my robe -- then grabbed a second robe for Sandy from my closet. I wrapped her in soft, fluffy fabric and kissed her a few times as I tied the belt, \"You need to teach me now to do that,\" I said as I nibbled on her lower lip.\n\n\"Do what?\" She kissed back.\n\n\"Squirt like that,\" I said, \"I mean I know women can do it, but I'd never seen it or have had it happen to me. I was very, very hot.\"\n\n\"It's been a long time since that happened to me. Years even. So thank you for reawakening me.\"\n\nI slid my hands into my pockets before I replied, and discovered the letter I had put there earlier. I lifted the letter out and started to open it.\n\n\"What's that?\" Sandy asked as I opened the envelope.\n\n\"It's a letter your husband sent in the box. It said not to open it until I was finished.\"\n\n\"What does it say?\" She asked.\n\n\"It appears,\" I said in astonishment, \"That it's for you,\" I said as I handed her the letter.",
        "Sandy gazed at the letter then tears rolled out of her eyes and across on her face. There wasn't much to the letter, but it said more than enough:\n\nMy Dearest Sandra, \n\nI want you to know that I love you as much today as they day we met. I hope you enjoyed your afternoon with Elizabeth, and the extra container I included in her box for you.\n\nI look forward to hearing about your day.\n\nYour loving husband,\n\nWilliam\n\nPS: Elizabeth, thank you for all you have done."
    ],
    "authorname": "xPhantomKissX",
    "tags": [
        "bucket",
        "dildo",
        "squirting",
        "bisexual",
        "photographs",
        "masturbation"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/a-very-special-delivery-ch-02"
}
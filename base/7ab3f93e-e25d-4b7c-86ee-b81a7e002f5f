{
    "title": "Isabelle and mr. B\u00eate ch. 11",
    "pages": [
        "Several days went by and Isabelle had gotten things back to what they were when she had left for B\u00eate Holdings. Her father praised her and even Jean-Marie had told her he was proud of her when they spoke on the phone.\n\nHer sisters didn't want her to go because then they'd have to get back to working hard and wouldn't be able to borrow a suit from Isabelle to impress friends.\n\nAdelaide and Felicia were waiting in Isabelle's office when her phone rang. Adelaide saw the name B\u00eate Holdings and picked it up, hoping to get to speak with Jean-Marie.\n\n'Isabelle isn't available right now, can I help you?' she said. She was disappointed when Colette introduced herself on the other side.\n\n'I'm calling to let Isabelle know the meeting with mister al-Hassan takes place at two o'clock and she needs to be at the Boston Hotel. Mister B\u00eate will meet her there and won't be able to contact her because he has several late meeting today and early ones tomorrow.' Colette said.\n\nAdelaide hummed. 'Okay, I will let her know.' she said and hung up.\n\n'What was that about?' asked Felicia.\n\n'Damn that girl.' Adelaide said and pouted. 'That girl's meeting up at the most expensive hotel in town with Jean-Marie and probably some very rich Arab.'\n\n'Why does she get all the luck?' Felicia said, crossing her arms as she slumped back in her seat. 'She always got the best attention from guys, and even father likes her best. She never gets scolded..'\n\nThey sat for a while, brooding in their own thoughts when Felicia spoke up. 'Let's not tell her.'\n\n'What?'\n\n'Don't tell her about the meeting. Maybe then they'll get mad at her, and she'll stay here longer to do the work.'\n\nAdelaide smiled a little. 'I'll only tell her he's in meetings, so she shouldn't call until he does.'\n\nFelicia nodded in agreement and they did so when Isabelle returned to her office. She didn't like the thought of not getting to speak with him, but she knew it would have been very late and early and he didn't want to disturb her when he finally had the time at an inconvenient hour. She would let him know that next time, he could wake her up in the middle of the night if that was the only time available to talk to her.\n\nShe sighed and hoped the mess at her father's company would be cleaned up completely in a few days and then could go back to him. She hadn't been feeling very well lately and had scheduled an appointment for the next morning with her doctor for a quick health check. She thought it was the recent stress, but she just wanted to make sure.\n\n***\n\nThe next day Isabelle was barely at the office after taking the tests at the doctor when three men in suits walked in and asked for her. She heard them and asked what they needed her for when they showed their badges. Federal Trade Commission.\n\n'How may I help you?' she asked, puzzled as to why they came here.\n\n'My name is Frank Watson, FTC. Can we talk in private?' the older of the three men asked.\n\n'Sure?' she said. 'Follow me to my office.'\n\nShe offered them a seat but they kept standing and Frank took papers out of his pocket.\n\n'We've had a complaint about industrial espionage and traced it back to certain transports.' he said and handed her two forms. 'Do these look familiar?'\n\nShe read the forms and recognised them as transports she had arranged at the start of the week. 'Yes, these are two I arranged for subsidiaries of the B\u00eate Holdings.' she looked back at Frank. 'We were the most convenient transporter. I did clear it with Mr. B\u00eate to prevent any misconception about favouritism.'\n\n'Then we'll have to take you in for questioning.' Frank said to her surprise. 'Those containers have been breached and examined by one of Mr. B\u00eate's competitors while they were in your care.'\n\n'Wait, you're saying we had anything to do with this!?' she asked, stepping back to sit on the edge of her desk when her knees began to weaken.\n\n'We have several tips that we need to look into. So we'll have to shut down your office and you'll need to come with us to answer some questions.'\n\nOne of the other men, a tall and dark young man took her gently by her elbow. 'Please come with us.'\n\nA bit dazed she stood up and was led out of her office. Frank handed a written order to Adelaide and had her sent everyone home while the third man stayed to oversee that no one would destroy any possible evidence.\n\nBefore Isabelle knew it she was guided into a car and driven away.\n\n***\n\nJean-Marie looked at the clock and worried. It was getting late and she hadn't answered any of his calls. Usually things that didn't go his way angered him, but in this case he felt more worry than anger. The office hadn't been able to reach her or her father's company either.\n\nMartin, the local assistant to Yusuf came in. 'Sorry to keep you waiting, but he's in a call with the office. Won't be long though.'\n\n'That's okay.' Jean-Marie said, looking at his phone.\n\n'I thought you said your personal assistant would be here as well?'\n\n'Yes, she-' Jean-Marie said but got cut off by a call from the office. 'Excuse me.' He picked up the call, listened for a while to the head of the legal department, then stood up. 'Stay put! I'm coming back!' he said and hung up.\n\n'You're going?' Martin asked surprised. 'You know he doesn't like people walking out on him, it will cost you the contract.'\n\n'I know.' Jean-Marie said. 'But when it comes to the girl in my life, I'd rather lose everything than see her get into trouble for something I'm sure she hasn't done.'\n\nMartin watched him leave, puzzled and worried because he knew Jean-Marie wouldn't risk his business for anything.\n\n***\n\n'Where is she!?' Isabelle winced at hearing Jean-Marie's voice outside Frank's office .\n\nHe would be mad at her for sure, she reckoned and braced herself for the worst.\n\n'You can't-' said a man outside but Jean-Marie opened the door to the office and stood in the doorway, looking at Isabelle. She shrank as she saw his angered look.\n\n'Excuse me!' said Frank irritated. 'We're conducting an investigation here!'\n\n'And I'm protecting my interest!' Jean-Marie said.\n\nIsabelle winced again as he sat down on his knee in front of her.\n\n'Are you okay?' he asked, taking her hands in his to her surprise and slight bewilderment.\n\n'You're not mad at me..?' she asked softly.\n\n'Are you crazy?' he said. 'When I heard about the accusation from the legal department I knew it was bullshit. No woman who knows me and still accepts me would do such a thing.'\n\nShe smiled gently at him. 'You're so sure..'\n\n'I am.' he said.\n\nShe gazed into his honest eyes and wrapped her arms around his neck. 'You have no idea how grateful I am to have met you..' she whispered.\n\n'Same here..' he whispered, held her for a moment, then pulled back to address Frank. 'She's coming with me. You can talk to her next time with my lawyers present. They are currently discussing the matter with my subsidiary and we'll find out what's going on.'\n\n'Fine.' said Frank and sighed. 'But you'll need to sign a few forms since the complaint is on our desk right now and we have to investigate it by law.'\n\nOutside Frank's office they bumped into Avery who walked out of another office and Jean-Marie started to suspect things. 'You had something to do with this.' he said, almost growling.\n\nAvery stepped back, remembering the punch at the party. 'I have no idea what you're talking about. I'm only here because they asked questions.'\n\n'Jean, let's just go.' said Isabelle, taking his hand.\n\nHe glared at Avery for another moment, then walked away with her. Back on the street he looked around.\n\n'What is it?' Isabelle asked.\n\n'I don't know. Something's not right.'\n\n'That's for sure.'\n\n'Come.' he said and led her to his car and opened the door for her.\n\nWhen he got in he started the car, drove around the corner and took another turn at a back alley, driving to the other side of the block and parked between two vans at the corner of the street they had just left.\n\n'I have this gut feeling.' he said. 'Let's wait here for a moment.'\n\nIsabelle could see the front entrance of the FTC office and saw Avery walking out later. He looked left and right, then called on his mobile and waited at the other end of the street.\n\n'Looks like someone's picking him up.' she said.\n\n'I wonder who.' Jean-Marie said softly.\n\nA minute later a car stopped, Avery got in and it drove away, passing their car and they saw Linda behind the wheel.\n\n'That bitch!' he said, gripping the steering wheel tight. 'She's behind it!'\n\n'Linda? Why?'\n\n'To undermine my company. I heard from a friend in the business she was talking to a competitor and mentioned she knew ways to gain projects and profit at my expense. All for a percentage of the profits.'\n\n'What can we do?'\n\nHe looked at her. 'First off, you're going home to take a relaxing bath. And that's an order.'\n\nThat made her chuckle and feel more secure. 'Yes, master.'\n\nHe smiled at her. 'Tell your father we'll sort this out. I have a hunch and I'm going to see Ramirez, our IT guy.' he said, started the car and drove off to her home.\n\n***\n\n'Come on in.' said Ramirez when Jean-Marie arrived at his home.\n\nHe lived in a simple house, even though he was paid very well and had told Jean-Marie before that he didn't like too much luxury, with the exception of his multimedia room and his home network.\n\n'I've already started a search on the door logs when you mentioned access outside normal hours.' Ramirez said, leading Jean-Marie into his home office and offering him one of the chairs. 'Soda, or a beer? Something else?' he offered, opening the small refrigerator next to his desk.\n\n'Ah, the orange juice looks good.' Jean-Marie said, taking a quick look at the contents of the fridge.\n\nRamirez tossed Jean-Marie one bottle and took one himself. 'What are we looking for?'\n\nJean-Marie twisted off the cap. 'Any anomaly. Access by someone who shouldn't be there.'\n\nRamirez nodded and pulled up the list from his initial search, containing badge numbers, employee names and numbers, times. 'These are all outside the usual nine to five. Anything you recognise?'\n\nJean-Marie read through the long list which showed most people doing an hour here and there of overtime. 'Nothing familiar.' he said. 'Unless there's a false badge.'\n\n'The badges are unique and very difficult to copy. Maybe a false name or a name that hasn't been removed from the access list.' Ramirez said and punched in a query to cross reference the names with the employee database.\n\nA minute later they had double checked the result.\n\n'Damn. She's not here.' Jean-Marie sighed and leaned back in his chair.\n\n'She?' Ramirez asked.\n\n'Promise not to tell and search for?'\n\nRamirez shrugged. 'If I wouldn't be able to keep a secret, I would be a lousy sysadmin and you'd have to kick me out.'\n\nJean-Marie smirked a little. He liked the relaxed attitude of Ramirez and had trusted him because of that since he started working at the holding.\n\n'You know my father's lover, just before he died?' Ramirez nodded. 'He had provided her with a badge and access so they could meet late at the office for a little fun.'\n\nRamirez smiled. 'He would not have used her real name.' he said and pondered for a minute before trying a new search on the list. When the result appeared on screen, he smirked. 'Bingo.'\n\nJean-Marie looked at the red marked lines. 'That's her?'\n\n'I believe so. Look at the times. The cleaning crew all arrive and leave in a group. That one does not.' Ramirez said. 'And I think I can confirm it.' He punched in another query on the security system to get another list. 'Do these dates match?'\n\nJean-Marie checked the dates and nodded. 'Yes, that was when they dated.'\n\nRamirez logged into the security footage and selected the video feed from the entrance. When he retrieved the time of the first access in the last couple of weeks they watched a woman come in who casually hid her face by fiddling with papers and a bag.\n\n'I think that's supposed to look like Isabelle, but something's off.' Jean-Marie said.\n\n'These indoor cameras are a bit fuzzy during the darker hours, but if I had to guess, it's a guy.'\n\nJean-Marie raised his eyebrow. 'A guy?'\n\nRamirez froze the image and pointed at the shoes. 'Flat shoes. Not high heeled. He'd have trouble walking normally if he wasn't used to those.'\n\nJean-Marie grinned. 'Ramirez, can you-'\n\n'Pull up all the video feeds and check for a mistake and get a view of his face?' Ramirez smirked. 'Shall I dump the complete list with video and the highlights at the sharks office tomorrow?'\n\nJean-Marie laughed at the apt name for the legal department which Ramirez always used in jest. 'Prepare for a big bonus this month.'\n\nRamirez lifted his bottle of juice. 'Thanks, but I've got enough money. This bit of excitement has been enough.'\n\nJean-Marie lifted his bottle and clinked it with Ramirez. 'Then think of something and I'll see what I can do.'\n\n'Unless you can cure my shyness and get me a date with Samantha at your office, there's nothing that I don't have right now.'\n\nJean-Marie laughed again. 'You're asking the worst person to deal with women there is.'"
    ],
    "authorname": "SciFurz",
    "tags": [
        "beauty and the beast",
        "fairy tale"
    ],
    "category": "Romance",
    "url": "https://www.literotica.com/s/isabelle-and-mr-bete-ch-11"
}
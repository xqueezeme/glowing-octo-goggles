{
    "title": "Slender Man Ch. 03",
    "pages": [
        "This story is part of an ongoing series. The chronological order of my stories is now listed in WifeWatchman's biography.\n\nFeedback and constructive criticism is very much appreciated, and I encourage feedback for ideas.\n\nThis story contains graphic scenes, language and actions that might be extremely offensive to some people. These scenes, words and actions are used only for the literary purposes of this story. The author does not condone murder, racial language, violence, rape or violence against women, and any depictions of any of these in this story should not be construed as acceptance of the above.\n\nPart 15 - Slender In The Neighborhood\n\n\"His name is Wesley Smith.\" said Jerome Davis, meeting us at the side door as Cindy and I came into Headquarters at 7:55pm, Friday, March 10th. \"Nine years old. Lived with his mother on Pine Street, in the house Coach Marshall used to live in.\" I remembered that house from the 'Murdered Football Player' case.\n\nWe walked into MCD, which once again was a 'War Room' and very busy. I noticed on the large television screen on the wall that our Police cruisers were in wider concentric circles around where the boy's home was, and I was glad to see that Captain Croyle had wasted no time in implementing a better search plan.\n\n\"Sir,\" said Captain Briscoe, coming up to me, \"the Press is at it again, demanding to speak to you personally.\"\n\n\"I'll handle the Press.\" said Chief Moynahan, who had come up behind me from the other side. \"Let's go, Brick. Don, I'm just getting out of your way. Carry on.\"\n\n\"Yes, Chief.\" I said. \"Okay, Jermaine, let's go to my office, so you can tell me the whole story, from the beginning...\"\n\n* * * * * * * * * * * * * * * *\n\nAs Chief Moynahan made his way to the Press Room, he found himself beaten to the punch.\n\n\"I've got this one, Chief.\" said Sheriff Allgood. The Sheriff was dressed in his \"western\" outfit: off-white button-down shirt, a bolo around his neck serving as a tie, a Stetson cowboy hat in his hand, khaki pants and brown western boots, and a brown western-style jacket. His badge was affixed to his belt, and his gun in a shoulder harness.\n\nHe strode up to the podium. \"Ladies and gentlemen, before I give an update on this situation, I will tell you right now that Commander Donald Troy is doing what he is supposed to be doing, and doing what he does best: solving these cases. He does not have time nor any need to speak directly with any of you, and he will not be doing so tonight unless and until this case is solved. So stop asking for him personally, and leave him alone to do his job. If that is a problem, you know where the door is. Make use of it.\"\n\n* * * * * * * * * * * * * * * *\n\nJermaine Davis sat in the hot chair and Cindy on the sofa, with me in my chair behind the desk. \n\nJermaine said \"He's a latchkey kid, sir. Well, he has a digital code to get into his house, that's the rage these days. His mother works at Wal-Mart until 6:00pm or later. Mark Walker, the Crime Lab's technician for these things, said the kid came in the house after punching in the code at 3:10pm. Then the mother, whose name is Beverly, came home and came in at 6:45pm. Wesley wasn't in the house. The mother called around and Wesley wasn't with any of his friends at their house. She called her ex-husband, and he had not seen Wesley, either.\"\n\n\"Ex-husband?\" I asked.\n\n\"Yes sir.\" said Jerome. \"His name is Gerald Smith. Their divorce was finalized about six weeks ago. She got custody of Wesley. He works for Stafford Cleaning Services, who do contract cleaning and custodial services. He's living in the basement of a co-worker's house. We sent a Patrol cruiser over there, and the kid's not there. They brought Mr. Smith here at his request. He's in the Pastor's Room now.\"\n\n\u2028\"Where is she?\" I asked.\n\n\"In the Admin breakroom.\" said Jermaine. \"She's already eaten two of the apple pie turnovers from the vending machine.\"\n\n\"Nice observation.\" I said with a brief grin. \"So where did Gerald work at before the cleaning service?\" I asked.\n\nJermaine checked his notes and paper printouts. \"Place called Wentworth Tool & Die, sir. They're on this side of the River, just across from Crown Chemicals. They were bought out by BOW Enterprises about six months ago.\"\n\n\"Any idea why he left there?\" I asked.\n\nJerome had a pained look on his face. \"No, I'm sorry sir, I don't have that. Just that he worked there.\"\n\n\"That's okay.\" I said. \"You've really done a good job getting the info you have, Jerome. Did the Mouseketeers help you get that?\"\n\n\"No sir.\" said Jerome. \"Myron and Mary are out of Town this weekend; they went to the City to a concert, and Mary said they'll do some shopping and stuff while they're over there. I tried to call David Krueger, but didn't get hold of him.\"\n\n\"That's okay, I think he may be out of Town, too.\" I said. \"All right, keep on keepin' on. Good job, so far. You can go.\" Jerome left the office.\n\n\"Where's Krueger?\" Cindy asked.\n\n\"I don't want this getting out until it's official.\" I said. \"But I expect to be getting his resignation any time now. He had an interview with Chief Soltis in Midtown, and our Chief told me that Soltis likes David and offered him a job down there.\"\n\n\"Wow, no more Three Mouseketeers.\" Cindy said. \"That's sad.\" I held my face, not letting on that it was for the best for all concerned...\n\n* * * * * * * * * * * * * * * *\n\nTwo hours later, things had settled in. The Amber Alerts had gone out. Police cruisers were going through farm fields, and we had drones up. No results, so far.\n\n\"Any ideas, Commander?\" asked Captain Croyle as I looked at the monitor in MCD.\n\n\"I like the search pattern you're doing a lot better.\" I said. \"And you've posted up all the checkpoints leading out of the County again, as well.\"\n\n\"And Judge Watts is handing out warrants like cheap bubble gum wrappers.\" Teresa said. \"But he's pissed. If we catch the perp this time, he'd do well to avoid Judge Watts's courtroom.\"\n\nI nodded. And then it hit me. \"Teresa, there are two places I want you to check. First, the baseball field and the area around County High School. Do that for Town High School and Booker T. Washington High School, as well. The second place is up on the mountainside. Promontory Point, the roads leading to the Cabin and around to the other side, the roads further north leading to the Sheriff's house. Slender Man was sighted at County High, and at my Cabin home. That may be where this child will be found.\"\n\nTeresa went to send out the orders as I continued to watch the screen. What is your purpose and intent in all this, I silently asked my adversary over space and time...\n\n* * * * * * * * * * * * * * * *\n\n\"We've found him.\" I heard the call on the radio. \"County High School, behind a couple of trailers in the cedar trees. He's not conscious but is breathing fine. We're taking him to University Hospital.\"\n\nEveryone clapped and cheered, though the response was a bit muted. I congratulated everyone there, then got on the radio and thanked all the Officers that has been out there searching. The Press Relations Officer made the notifications to the Press as Chaplain Calvin let the parents know. It's nice when the Chaplain can give out good news, I thought to myself.\n\n\"Good job, everyone.\" said the Chief as he came into MCD.\n\n\"Thank the Iron Crowbar, sir.\" said Teresa. \"He said look around County High, and that was that.\"\n\n\"How did you knowwww, Mr. Crowbar?\" the Chief asked. The room fell silent.\n\n\"There was a Slender Man sighting there earlier.\" I said. \"Just like the previous kidnapping was preceded by a Slender Man sighting. So Captain Croyle had some people check it out...\"\n\nPart 16 - Falling Off The Pace\n\n9:00am, Saturday, March 11th. We convened for a post-action conference. In addition to the TCPD Officer, we had Jack Muscone and Martin Nash of the FBI visit us. Martin brought doughnuts, a most very good and recommended way of bribing Your Iron Crowbar and his subordinates.\n\n\"Wesley Smith is fine.\" said Jermaine Davis. \"Injected with sedatives, but otherwise unharmed. Pretty well hidden behind cedar trees behind the trailers at County High. Homeless people camp there sometimes, but there were none there last night.\"\n\n\"Do we know more about the parents?\" I asked.\n\n\"Yes sir.\" said Sonali, speaking good English in her Indian accent. \"Mrs. Smith took the job at Wal-Mart after her husband, now ex-husband, lost his job at Wentworth Tool & Die, which occurred after BOW Enterprises bought Wentworth. She also filed for divorce right at that time. It was fairly amicable, he did not really fight for custody of the child. Neither have any arrests from the past nor any issues with the law, really.\"\n\n\"And he lives a distance away?\" I asked.\n\n\"Yes sir.\" said Sonali. \"Southside. His car is very old, and has no GPS, but the people he lives with... he lives in their basement, that is... said he did not go anywhere after coming home from work Friday, until the Police came.\"\n\n\"What about his employment with Wentworth Tool & Die?\" I asked. \"What happened there?\"\n\n\"Sir,\" said Teresa, \"I have some off-the-record stuff about that. Barry Oliver of BOW Enterprises was the force behind buying Wentworth for BOW. Todd just wrote the checks. They bought it quietly last Autumn, and they put some money into it, refurbished the place, brought in CNC machines, and upgraded the old tool and die machines.\"\n\nTeresa continued: \"What I understand, again off-the-record, is that Gerald Smith maintained the old machines. He did not do a great job of that, and had a poor record otherwise. He was basically dead weight. When BOW came in, they laid off the unneeded people like the Admin people, but kept most of the skilled workers. Smith was an exception; he didn't have enough specific talent or knowledge to be useful anywhere, so they let him go.\"\n\nI said \"And after that, the Smith's marriage began to crumble. A story we've heard many times. So, anything about Wesley?\"\n\n\"He's still sleeping it off.\" said Cindy. \"I checked with the Hospital. Rudistan and Morton are there and ready to help Dr. Yates talk to Wesley when he wakes up.\"\n\n\"Sonali,\" I said, \"one thing I want you to try to do is to find a connection, any connection at all, between either of the Jones parents, and the Claymores, Henrietta's parents, and you might as well check and see if Larry or Jen Lance knew either of the Jones parents.\" Sonali made some notes.\n\n\"Okay, so Gerald now works for Stafford Cleaning Services?\" I asked.\n\n\"Yes sir.\" said Sonali. \"He's been assigned mostly to apartment residences when people move out. Cleaning, repainting, putting down carpet, that kind of stuff.\"\n\n\"He's not very tall, either.\" I said. \"He's listed as 5'7\" on his drivers license. Okay, there's just... not much here.\"\n\n\"So what's next, sir?\" asked Cindy, pretty much on behalf of everyone in the room.\n\n\"Well, we do know a couple of things.\" I said. \"Two kidnappings happened after Slender Man sightings were reported by the News Media. Both children were kidnapped from the Northside, in middle class neighborhoods in the County High school district. Both children were found in or near places where Slender Man sightings occurred. So, let's keep grinding, look for any clues, look at video footage of cars near County High in the time Wesley Smith was missing, such as that. And hopefully, we'll catch a break and can make an arrest and stop this crap.\"\n\n* * * * * * * * * * * * * * * *\n\n\"We came to offer our help.\" said Jack Muscone. \"Clark Webster says if you get another disappearance to let him know, and maybe we can help find something on this perp.\"\n\nWe were sitting in my office after the meeting. Cindy was on the sofa, per usual.\n\n\"I appreciate it.\" I said. \"Right now, it's Slender Man's version of 'catch and release'. We've been lucky so far.\"\n\n\"So you don't have any ideas at all about any of this?\" asked Muscone.\n\nI shook my head. \"There's a couple of threads running through it all. First, BOW Enterprises keeps coming up, and former employees after BOW absorbed Burke Enterprises. Then the whole 'Slender Man' stuff.\"\n\n\"Sir,\" asked Martin Nash, \"is there any thought that these were just pranks? The County High tape looked like it was a prank and not a genuine sighting like some of the others.\"\n\n\"Sure, we've considered that.\" I said. \"Have we not, Captain Ross?\"\n\n\"We have, sir.\" said Cindy. \"But both kids were injected with sedatives, which are prescription drugs and don't come cheap. And kidnapping two children, with the possibility of getting caught and going to prison on felony charges for years, is going pretty far just to create pranks. And last but not least, taunting the Iron Crowbar with drawings on the window of his home is in itself a very dangerous thing to do just for the sake of a prank.\"\n\n\"By the way,\" said Muscone, \"I'll ask just to say I did: anything on Leonard Lotz?\"\n\n\"Besides me being a hair from being fired over that?\" I asked. \"And me being a thinner hair from turning in my badge and walking away from the Sheriff's bullshit? No.\"\n\nMuscone nodded. \"We don't know what Craig's beef with Lotz is, either. It's bordered on the obsessive. Maybe Lotz has pictures of Craig or something.\"\n\n\"Hmmm,\" I said, thinking about it, \"that might not be so far off... Maybe Lotz has some information that's bad for Craig, that Craig wants to suppress.\"\n\n\"Flip side to that, sir,\" said Cindy, \"is that Lotz was in the Asylum for years and was never touched when they could've gotten to him easily.\"\n\n\"True.\" I said.\n\n\"The general consensus around our FBI offices is that Craig wants to capture Lotz to make a big splash and a name for himself. He needs all the feathers in his cap that he can get, if he's in the running for Deputy Director.\"\n\n\"Naah, you're going to get that job.\" I said.\n\n\"No, I'm not.\" said Muscone. \"I've formally notified my boss and the top brass that I am not interested in any job that requires me to move and be headquartered in Washington, DC.\"\n\n\"Really?\" I asked. \"I mean, I know Washington is a cesspool, but the opportunity...\"\n\n\"Just like you had opportunities to be Police Chief, or to run for Sheriff.\" said Muscone. \"But you stayed where you are because you're in the right spot, and you're happy. Well, same here. I'm happy where I am, with the team I have---\"\n\n\"And with the girl you're with.\" said Cindy. \"And that's good: you and Tanya are great for each other.\"\n\n\"That lady is smart, Commander.\" said Muscone. \"You should promote her... or we may offer her a job with the FBI.\"\n\n\"Don't even joke.\" said Cindy. \"No disrespect to you guys, but an FBI with Les Craig in it, is an FBI I don't want to fool around with. Besides, I've got the bestest boss ever.\"\n\n\"Chief Griswold really taught you how to kiss up properly, didn't he?\" I asked Cindy with a grin.\n\n\"The best part is that I don't have to lie when I'm doing it.\" Cindy replied right back.\n\n\"Okay, how about I treat you guys to brunch at the Country Breakfast Diner.\" I said. \"And then I'm going home and getting some sleep...\n\n* * * * * * * * * * * * * * * *\n\nSunday, March 12th. After spending the morning with my family, I came into the office in the early afternoon. To my surprise, there was a knock on my door. David Krueger came in.\n\n\"Hello, sir.\" he said. \"I called your home and they said you'd come down. I wanted to catch up with you.\"\n\n\"And you have. Tag, I'm it.\" I said, then explained: \"Guess what I played with the kids this morning?\" Krueger laughed politely.\n\n\"I'm just glad to have the chance, sir,\" said Krueger, \"of thanking you in person for the opportunity you've given me to serve with you and the TCPD. It's been awesome, but I'm taking the Midtown job.\"\n\n\"I'm sad for me.\" I said. \"I'm happy for you. It should be a great opportunity. But do keep your eyes peeled; they have some nasty, corrupt people down here.\"\n\n\"Yes sir,\" said Krueger, handing me his resignation letter. \"We're going to clean them up.\"\n\nI stood up and shook Krueger's hand. \"I appreciate all you've done for us here. You were part of some very productive times with us.\"\n\n\"Yes sir,\" said Krueger. \"Thank you again, sir.\"\n\n\"I'll walk you to the desk.\" I did so. Krueger handed in his badge and his TCPD-issued service weapon at the desk. We shook hands again and he exited to the parking lot.\n\nDavid Krueger was a good man, a good Detective, and a great data analyst. He would do very well with the Midtown P.D. And I had averted a possible crisis amongst my Mouseketeers. Myron and Mary had become indispensable to me.\n\nPart 16 - Hammering The Crowbars\n\n\"This is Bettina Wurtzburg, KXTC Channel Two News!\" said the lovely redheaded reporterette at 7:00am, Monday, March 13th, from in front of the Courthouse complex. \"Channel Two News has learned that new lawsuits have been filed by the Citizens For Police Accountability against Police Commander Donald Troy!\"\n\nBettina seemed to be relishing every word as she reported: \"The CFPA lawsuit cites 'ongoing misconduct' by Commander Troy, citing illegal searches of Citizens' cars at illegal checkpoints, the violation of a Citizen's home without a warrant which resulted in Child Protective Services removing a child from her parents' custody, illegally obtaining employee records without a warrant, and failure to give proper effort into apprehending dangerous criminals that might be at large in the County!\"\n\nBettina went on: \"Jay Swenson and Ken Eidex gave a press conference over the weekend, giving their reasons for filing the lawsuit against Commander Donald Troy of the TCPD, and demanding that the SBI and FBI open criminal investigations into Commander Troy's misconduct. Roll tape.\" The tape showed Swenson and Eidex whining about Your Iron Crowbar.\n\n\"And in State news,\" said Bettina, \"the Legislature has once again worked out a compromise, this time with the State Budget. Over the vociferous objections of 1st District State Senator Katherine Woodburn, the Senate Democrats caved in and allowed the Republicans to win key concessions, including more money to track down and deport undocumented workers and their families, less money for the SBI, which makes our children vulnerable to dangerous drug gangs, and a new excise tax on gasoline that replaces the old sales tax, which means you will pay more money to fuel your cars.\"\n\n\"And in further State news, Channel Two News has confirmed that TCPD Detective Krueger resigned from his position to take a similar position with the Midtown Police Department!\" Bettina went on. I could not help but groan out loud as she said \"Sources tell Channel Two News that Officer Krueger will be getting a promotion and increased duties with the Internal Affairs Department of the Midtown Police. The Midtown P.D. has been in chaos since young Frank Soltis was hired from the SBI as Midtown Police Chief.\"\n\nAs Bettina turned it over to Chuck Pringle for Sports, I felt all eyes on me in the utterly silent MCD room.\n\n\"Yes,\" I said, \"Krueger accepted the job offer with Midtown PD, and it's a good opportunity for him. What pisses me off is that Bettina is blasting it all over the airwaves, so the corrupt bastards David and Chief Soltis are trying to fight now are fully aware of him coming down there.\"\n\n\"Yes,\" said Chief Moynahan, who'd just come in, \"that was plain dirty of Bettina. I will be in-form-ing KXTC that they are no longer welcome in our Headquarters, our Precinct Headquarters... what's the plural of 'Headquarters'? 'Headquarterses'?... well, it doesn't matter. I'm going to inform Commander Harlow and Captain Briscoe that KXTC is forbidden the Press Room, also.\"\n\n\"Thank you, Chief.\" I said simply.\n\n\"Commander, what's this lawsuit against you about?\" said Joanne Warner, who looked worried. \"These bozos were just rejected a few days ago!\"",
        "\"And they'll be rejected again.\" I said. \"Well... unless Nance gets the case. But that's not the important thing. I'm sure everyone spotted what is obviously going on there?\" I was greeted with dead silence.\n\n\"Okay, I'll be in my office.\" I said. \"You guys get to work finding Slender Man, kicking his faceless ass, and giving parents more sleep at night...\"\n\n* * * * * * * * * * * * * * * *\n\nJust before the scheduled 'Angels' meeting was to commence, I was told by the Chief to cancel it and be prepared to meet with him and the Sheriff whenever the Sheriff got to Police Headquarters. Ten minutes later, Sheriff Allgood arrived, and he had company: State Attorney Jenna Stiles.\n\nI was called into the Chief's conference room, where they, the Chief, and Deputy Chief Harlow were gathered. I was 'invited' to sit at the far end of the table where I normally sit.\n\n\"Hello, Jenna.\" I said in a friendly manner when I saw her.\n\n\"Good morning, Commander.\" she replied formally, her voice freezing cold. I could immediately see that something was up.\n\n\"Commander,\" said the Chief, \"that lawsuit filed by the CFPA may be more trouble than we think. Ms. Stiles, would you explain?\"\n\n\"Thank you, Chief.\" said Jenna. \"Commander, I was asked by Regional Director Bennett to examine this lawsuit on the State DOJ's behalf. While most of the individual charges are easily dismissed, some of them may not be, and the cumulative effect could be damaging.\"\n\nShe paused for breath, and to gauge my reaction. I said nothing, showed nothing on my face.\n\n\"For example,\" she continued after an awkward moment of silence, \"the gathering of employee records from BOW Enterprises. CFPA says they're acting on behalf of former employees there, one John Claymore and one Larry Lance.\"\n\n\"That's gratitude for you.\" I said with asperity. \"The Police find Claymore's daughter, and he turns around and sues us?\"\n\n\"The CFPA is suing on his behalf.\" said Jenna. \"Also, they claim they're representing Gerald Smith's interest vis-a-vis the Wentworth Tool & Die employee records, which are now part of BOW Enterprises.\"\n\n\"We... we get employee records all the time!\" I gasped out. \"We call and ask their H.R. Departments, anyway. And we get warrants if they're not cooperative, but in BOW's case, they were cooperative.\"\n\n\"Commander,\" said Jenna, \"I don't disagree with you on the technical points of the law. But one of your Captains is engaged to the CEO of BOW Enterprises, BOW's Director of Research Barry Allen was a TCPD Officer and remains an Auxiliary Officer, and the CFPA is claiming this relationship was improperly used to obtain these records. The employees are claiming their privacy was invaded.\"\n\n\"That'll never hold up.\" I said. \"By the way, the CEO of BOW Enterprises is my sister's firstborn son. Why do I need to go through my Captain? Why implicate her at all, or are they just trying to harass her, too?\"\n\n\"Continuing on,\" Jenna said, \"the checkpoints at the County lines are legal, and warrants were obtained in all cases where car searches were not permitted by consent. But several of those that were searched, which include several University students, are complaining about probable cause, about being strong-armed, about being detained without probable cause, so on and so forth. You are legally okay, Commander, but they can drag out the points of this for some time.\"\n\nI shook my head. And Jenna wasn't finished:\n\n\"Also, Commander, there's the warrantless search of the Saint home.\" Jenna said.\n\n\"And the drug charges were dropped.\" I said. \"But Judge Folsom ruled that the child endangerment was all valid. And Marie is never going back to that home and those parents.\"\n\n\"That is true.\" said Jenna. \"But the problem is that the CFPA is suing about your conduct in violating the suspects' rights. And while Folsom ruled you were within your bounds due to the child issues, there's no telling how that can go in a civil suit.\" \n\n\"Do these guys even have standing?\" I asked. \"Their last lawsuit was dismissed with prejudice. They can't refile it, and that sounds like what this is, with some sugar sprinkles on top this time.\"\n\n\"Now I'm getting hungry.\" growled the Chief.\n\n\"Does the party stop there, Ms. Stiles?\" I asked, with just the slightest bit of acidity in my voice.\n\n\"No.\" Jenna said. \"There's the part about neglect. I'm sure you've figured out that has to do with Leonard Lotz. FBI Special Agent in Charge Les Craig has filed formal complaints with the US DOJ and with the State DOJ over your refusal to cooperate with him in finding Lotz.\"\n\n\"So that's what this is about.\" I said, pretty much to myself. It went over everyone's heads.\n\n\"What?\" Jenna asked.\n\n\"Nothing. So what's the issue on this?\" I asked.\n\n\"Your refusal to cooperate with an FBI Agent, and a 'Special Agent in Charge', I might add.\" said Jenna. \"That looks bad all the way around. And Craig has authorized the CFPA to represent him over that issue.\"\n\n\"I'm not required to lead not-so-Special Agent Craig by the hand.\" I said. \"And while I might refuse to work with him after the way he's treated my people, to the point the Chief banned him from entering this Headquarters, how is the CFPA going to prove I'm not looking for him? You can't prove a negative, as you know, Ms. Stiles.\"\n\nJenna did not answer, but looked over to her right at Sheriff Allgood, who was sitting to the Chief's left. He picked up the bit: \"The CFPA, as well as Les Craig, wants a formal investigation of these issues to be opened by the SBI, FBI, or both. But because of your past relationship with the SBI, which has been cool at best...\"\n\n\"Heh heh heh heh!\" the Chief laughed as I rolled my eyes.\n\nSheriff Allgood was not amused. \"As I was saying, because of your bad relationship with the SBI, and then with your recently being named SBI Reserve Inspector, the SBI cannot be considered to be impartial in the matter. Therefore, they are deferring to the FBI.\"\n\n\"Don't tell me you're going to cooperate with that in any way.\" I said as a warning.\n\n\"Commander,\" said the Sheriff, \"I may not have a choice.\"\n\n\"Yes you do.\" I said. \"You tell them to fuck off, especially when the Courts dismiss this bullshit lawsuit. We've done it before.\"\n\nJenna said \"Commander, we believe that allowing the investigation is the best way to exonerate you and shut your enemies up.\"\n\n\"Who is this 'we' you are referring to?\" I asked.\n\n\"That is the State DOJ's position, and the position of several members of the Town & County Council.\" said Jenna. \"And I thought it was the position of the Town & County Sheriff's Office, as well.\"\n\n\"Well, that's all crap.\" I said. \"Do you really think I don't see this as the set-up it is?\"\n\n\"You may have to hire your own legal counsel and respond to subpoenas.\" said Jenna.\n\n\"I'll have to do that anyway.\" I said.\n\n\"You'll be wasting time and money if you fight it.\" Jenna said. \n\n\"My time. My money.\" I replied flatly, my eyes boring into hers.\n\nJust then the fun dramatic moment was twisted when the conference room door opened and Cindy peeked in. \"Oh, sorry.\" she said, seeing that it wasn't just me and the Chief.\n\n\"Wait!\" I called out. When Cindy looked back in, I said, \"Is it big?\"\n\n\"No sir, it can wait until you're done.\" Cindy replied, then withdrew and closed the door. I'd asked because I could see Cindy's face was beet red and her ice blue eyes were blazing cold fire. Something had upset her... and it wasn't Jenna's presence.\n\nAnd then, my personal cellphone rang. It was my wife Laura.\n\n\"Hi, Dear.\" I said. \"Can I call you back? I'm in a big-ass meeting right now.\"\n\n\"No, you can call back when you're done.\" Laura said. \"I'll just give the one-sentence version. The FBI called Cindy about Callie's presence in our County.\"\n\n\"I'll call back in a second.\" I said. Hanging up, I looked around the table. \"Anything else?\"\n\n\"Just this.\" said Chief Moynahan. \"Sheriff, the Commander is right: we can fight the FBI like hell... and I intend to do so. I will personally order every one of my Officers to not cooperate with this disgusting 'inquiry' of my Police Commander. The Police Union and Police Captain's Union will become involved, if need be.\"\n\n\"All right.\" said Daniel Allgood, with some resignation in his voice. \"Look, I don't know what the Feds are going to do, but as the Sheriff of this County I will let them know that we will not cooperate and that we consider this a witch hunt based upon false pretenses.\"\n\nI was inwardly stunned that Daniel was so strongly taking our side, but I said nothing. The Chief dismissed us.\n\n* * * * * * * * * * * * * * * *\n\nThere is only one person in the Town & County Police Department that has the true prerogative of waiting for me in my office. And the Green Crowbar was doing that just now.\n\n\"Don't tell me, let me guess.\" I said as I came in. \"The FBI is making some kind of inquiry about Callie.\"\n\n\"How did... oh, your wife called you.\" Cindy said, figuring it out right quickly, to my delight. \"Yeah. Some asshole named Waddell called from the FBI office in the City. He asked what Callie Carrington was doing in our County. I told him she was an American Citizen and entitled to go where she pleased, and it was none of his business what she was doing, nor why. He then asked if she was taking up residence in the County, and I told him to call Dr. Laura Fredricson at the University if he wanted to know any more. Then I hung up on him.\"\n\n\"Good.\" I said. \"Okay, let's call Laura.\" I did so, on the landline, which I put on speaker. I might add the bug-killer was on, so I couldn't use my cellphone.\n\n\"So what is the FBI doing harassing Callie?\" I asked as soon as she answered.\n\n\"Has Cindy destroyed her office?\" asked Laura.\n\n\"No, she's sitting in mine, and I have a crowbar to parry her blows.\" I said. \"What gives?\"\n\n\"I don't know.\" said Laura. \"I ripped Agent Waddell a new one when he called, then I called Jack's boss and told him about it. He said he couldn't talk, that he was in a big meeting. What is this, 'big meeting day'?\"\n\nI chuckled. \"It must be. And you won't believe what my meeting was about. More on that later. I need to go. I love you.\" \n\nAfter disconnecting the call, I said to Cindy, \"Okay, the Deputy Director is in a meeting. Let me call Jack Muscone.\" I did so on my Police cellphone. It went to voicemail.\n\nI tried calling Nash and Lindy. Their phones went to voicemail, also. Yep, must be 'big meeting day', I thought to myself.\n\nI called Tanya Perlman. \"Hi Tanya,\" I said when she answered. \"I was trying to get in touch with Jack, and can't seem to. Anything going on?\"\n\n\"Uh, he got called to the City.\" Tanya said. \"I really don't have anything on that for you, Commander Troy.\"\n\n\"I see.\" I said. Her use of my first and last names ('Commander' being my 'first' name) was code warning me that something was up.\n\nPart 17 - Servicing the Crowbar\n\nI came into Tanya's office at the State Crime Lab building pretty much without permission. Tanya watched as I picked up a chair and brought it around to the back of her desk, sat it down right next to her in her wheelchair, and sat down. Without a word, I took out my bug-killer where she could see it, and I activated it.\n\n\"Whassup, my friend?\" I asked.\n\nTanya smiled wanly, then said \"I'm not supposed to talk about anything. Having said that: I don't know. I truly don't. But it's big. Jack really was called into the City for meetings. The Deputy Director just got back from Washington, and Jack looked kind of worried when he left.\n\n\"O-kayyyy.\" I said. \"What has Jack told you about the nerve agent situation?\"\n\n\"Just between us, more than he should have.\" said Tanya. \"And I told him about the Jeremy Moreland case, and those drugs that were injected into him, possibly by that bastard Ferrell. Those drugs are similar to the nerve agents you found, and to whatever those kids took in 'Punk' that Dr. Morgan had to give them atropine for.\"\n\nI felt stunned as this hit me. \"Geez, I never thought to make that connection!\" I gasped. Tanya grinned.\n\n\"I've still got it!\" she said. \"So I guess some things DO get past you, eh?\"\n\n\"Sometimes.\" I said. \"And you definitely have still got it.\" I saw Tanya's eyes change slightly... and saw her desire in them as she reached for me and grabbed my shirt around the neck. She pulled me to her, which I willingly allowed, and our lips met in a warm kiss.\n\n\"Mmmmmm,\" Tanya moaned as I slid my tongue into her mouth. As the kiss deepened, she wrapped her arm around my neck and I slid my hand behind hers, taking the back of her head and gently pushing her face harder into mine. The deep, tongue-twining kiss went on for a long moment as my hand slid down and fondled her breast through her shirt. \n\nWhen we finally broke the kiss, she said \"Stand in front of me. I want to suck your cock. How long has it been since I've sucked your big hard cock, Don?\"\n\n\"Way too long.\" I said. I stood up and straddled her, getting as close to Tanya's beautiful, cherubic face as the wheelchair would allow. She opened my pants and fished out my cock, which was beginning to throb and lengthen.\n\n\"Mmmmm... God, that feels good!\" I gasped as Tanya sucked my hard male meat into her warm, wet mouth. I felt one of her hands bring my balls out of my pants and fondle them as the other hand held my shaft in place as her luscious lips slid up and down. I again gently put my hand on the back of her head, not really fucking her face but just enough for her to know that I was in charge as she serviced my cock.\n\nTanya's eyes sparkled with her hot desires as she sucked and licked my 'little crowbar' as if she were starving. She looked up into my eyes several times as she fellated me, and we felt that intense connection that we had not shared for a long, long time. Too long.\n\n\"Wanna fuck me before you come in my mouth?\" Tanya asked as she gently jacked my shaft.\n\n\"Are you able to?\" I asked.\n\n\"Oh, sure.\" Tanya said with that mischievous grin of hers. \"My parts work. I get wet, and I am soaking wet right now. I don't have orgasms, but I have some sensation in my abdomen. So... pick me up and put me on the desk.\"\n\nI easily picked up Tanya by grabbing her under her armpits, then turned her around and deposited her on her desk. I raised her limp, hanging legs and pushed them back, and she helped by pulling them back and holding them in place. She was wearing a garter belt to hold up her stockings, so I slid the only impediment to paradise, her panties, up and off her legs. Then I pulled her sweet ass to the edge of the desk and slid my cock along her swollen labes.\n\n\"Oh yeah, put it in.\" Tanya begged me. I fit my swollen cockhead to her cuntlips and pushed it down into her hole. She was indeed very wet and I slid in easily, driving down until my meat was sheathed to the hilt in her hot womanhood.\n\n\"Oh God, that is so fucking good!\" I gasped as I began to piston in and out of Tanya's sweet juicy snatch. I grabbed the backs of her slender thighs just behind her knees and pushed her legs back until her knees were on the desk next to her sides, giving me better access to her upturned cunt. And I took advantage, shoving my meat hard and deep into her with driving, lust-filled thrusts.\n\n\"Oh yeah, give it to me!\" Tanya gasped as she watched our coupled loins between our legs. Then she looked up at me and said \"Do you want to come in that pussy?\"\n\n\"Where do you want it?\" I growled, my breathing ragged as I pounded Tanya's pussy with a relentless, fast rhythm.\n\n\"In my mouth.\" Tanya said, her eyes glowing with lust. \"I want to swallow your cum.\"\n\nI fucked Tanya for what seemed like a long time but was really just a few minutes, driving resolutely towards my climax. When I felt my nut rise, I pulled my cock out of her sweet snatch and spun her around on her desk so that her head was over the edge. Holding her by the back of her neck for support, I slid my cock into her mouth, with her hand helping guide it. She stroked the base of my shaft furiously as she sucked voraciously on my cockhead until I could not hold back.\n\n\"UHHH!!\" I gasped out as long thick ropes of my jism fired into mouth. I could feel her swallowing greedily as I shivered through my climax.\n\nFinally, I picked Tanya up and sat her back in her wheelchair and straddled her again. She sucked on my cock for another minute, getting the last drops of my semen out of me, then using her lips and tongue to clean up my now-wet shaft and balls. The sparkle in her eyes and the grin on her face showed me that she had enjoyed this encounter as much as I had...\n\n\"We need to do this more often.\" she said. \"And not wait as long as we did since the last time.\"\n\n\"You better believe it...\" I gasped, still trying to catch my breath...\n\nPart 18 - Radioactive\n\nI had Cindy call Callie, and we met her for lunch at the Cattleman's Club (my treat). I told Callie of the FBI inquiring about her, and that she should be aware of her surroundings and possible danger to her.\n\n\"Story of my life in the porn industry.\" said Callie with her beautiful grin. \"At least here I've got two hot people with crowbars helping me out.\"\n\n\"Even so, be on the lookout.\" I said.\n\n\"Why is Callie being targeted?\" asked Cindy, who was still most very displeased at the phone call she'd gotten. \"And don't tell me it's not personal, because that bastard called me directly.\"\n\n\"Yezzzzz... I noticed.\" I replied. \"That's why I was trying to get ahold of Muscone earlier this morning. I don't know if it was your shots at Les Craig in the Queen's name, or your complaints about their surveillance of your father's property... which did cause them some embarrassment... but they're harassing you as well as me, now, and I'm not going to brook their shit very long.\"\n\n\"Neither is Laura.\" said Callie. \"I now know what she looks like when she is pissed under the surface. I'm glad you're the only one in that household carrying a crowbar.\"\n\n\"As you know,\" I said, \"she is not one to be trifled with, crowbars notwithstanding. This... is getting bad.\"\n\n\"What is this 'this' ov vich yoo speek?\" asked Cindy.\n\n\"Just the whole ball of crap Les Craig keeps hurling at me.\" I said. \"He's behind most of it... the CFPA lawsuit, targeting you and Callie, harassing and goading the Sheriff into giving me shit...\"\n\n\"If he's dirty,\" Cindy said, \"we'll find out soon enough. My father was amused more than anything about the surveillance at 'The Vision', but he got his hackles up when I told him about the call about Callie. He's going to dig deep into Les Craig.\"\n\n\"Good.\" I said. \"Just ask him to be careful about anything splashing back on him, or us.\"\n\nOur food arrived, and we spent the rest of lunch talking about more pleasant things, which did not include police work. And I did not fail to observe that while Callie seemed happy, Cindy looked positively radiant. This was the relationship she deserved and needed.\n\n* * * * * * * * * * * * * * * *\n\n\"Ah, Commander Troy.\" said Dr. Mickelson as I came into his office at the Biology Building on the University campus. \"I'm glad you stopped by. Some interesting things have been discovered since that case at Point Hollow.\"\n\nHe showed me some charts. \"As you know, my theories of possible alien visitation are not very well accepted in academic circles.\" That was an understatement, I thought, but said nothing as he continued: \"Now I believe that if we are going to be visited from another world, those creatures would have to have some tremendous technologies. Among those technologies would be some form of energy to propel them here. And we're talking space-time, wormholes, all that stuff.\"\n\nI nodded, understanding. He went on: \"So I'm looking for odd sources of radiation, odd levels of radiation, and perhaps things that should not exist naturally upon this planet. I believe some of these so-called test sites, like Dawsonville, Georgia; Oak Ridge, Tennessee; and that Federal installation to our northeast, nearer the City... the story could be cover for alien visitation. And then things like Area 51 further distract the Public.\"",
        "\"Is there radiation at that Federal facility?\" I asked.\n\n\"No, but some strange energy signatures and some radio transmissions have come from there.\" said Dr. Mickelson. \"I tried to get information on that site several years ago, but the Federal Government rebuffed my inquiries, and made me understand that that area is not one that I should show interest in.\"\n\n\"Did they visit you?\" I asked. \"Threaten you?\"\n\n\"It was actually an amicable conversation.\" said Dr. Mickelson. \"They said they understood my research on alien visitations, but that I was touching upon subjects of vital national interest, and it was to everyone's best interest that I look elsewhere. Fortunately, I have another place to be looking... Point Hollow.\"\n\n\"One question, sir.\" I said. \"When these Government agents visited you, did they mention your Biology background at all?\"\n\n\"Err... not that I recall.\" said Dr. Mickelson, who looked surprised at the question. \"It was about the radiation. They sent me data showing that there was nothing out of the ordinary. Of course I think it was fake data, but I moved along.\"\n\n\"Thank you, sir.\" I said. \"You were saying? About Point Hollow?\"\n\n\"Oh yes.\" said Dr. Mickelson. \"Now we've found some very strange energy readings from that place. The actual Hollow, the bowled out place where the strangely shaped trees are growing, it's what we call a 'collection point' for electrical energy. The work of Dr. Thorneycraft at Cambridge in England, and Dr. Huxtable of Caltech... read up on them, Commander... very interesting. This place in the Hollow appears to be one of those such 'collection points', and is why we have unusual energy discharges when storms brew in this area.\"\n\nDr. Mickelson continued his fascinating narrative: \"These collection points could be recharging stations, so to speak, for aliens that visit. And if they used the Point Hollow collection point, they might leave residual radiation. And that, my young friend, is what I've found!\"\n\nHe showed me a piece of paper. If I were an academic adversary, that would've been a mistake; the contents of that paper were now printed on my mind.\n\n\"Astatine?\" I asked.\n\nOf the first 92 elements in the Periodic Table, 90 occur naturally on Earth in appreciable quantity. The other two? Technetium, element 43, is the lightest element that has only radioactive isotopes, and they're not stable; they break down into other elements. \n\nThe other element is Astatine, element 85. It's in the same column as Chlorine and Iodine. Astatine is the rarest naturally occurring element, and only as a breakdown product of other radioactive elements. It's so rare that it might as well not occur naturally.\n\n\"Ah, you understand, Commander.\" Dr. Mickelson said. \"We've actually picked up some Astatine at Point Hollow. That is virtually impossible, as other radioactive elements are not there in sufficient quantity.\"\n\n\"That... is stunning.\" I said, genuinely interested.\n\n\"Of course, Dr. Shitzu at State Tech is trying to claim that the electric fields in the collection point ionize radon gas so that it is deposited in the soil, and that breaks down to astatine. But that is sheer folly, of course. No, Commander, that astatine had to come from somewhere else... from something else.\"\n\n\"I agree, and this is very interesting.\" I said. \"I don't want to take up much more of your valuable time, so allow me to change the subject a bit. You've worked with genetics a lot, have you not?\"\n\n\"Oh yes, though not for some time now.\" said Dr. Mickelson. \"I do teach the basic Genetics course here at the University.\"\n\nI said \"I understand the Nazis did some work on eugenics. Did you ever study any of that?\"\n\n\"No, I never did.\" said Dr. Mickelson. \"That subject is sort of... taboo. Our scientists did bring home some papers about the Nazi experiments, but I never saw them. The only professor I knew that did study them was a Doc-terrrrrr, er, Yarborough. Yes,Yarborough. He was a quack, and a virulent racist, too. Nobody wanted much to do with him. He was at City University, but he died some years ago.\"\n\n\"I see.\" I said. \"Thank you for seeing me, Doctor. And let me know how this astatine research plays out.\"\n\n\"I'll do that. Drop by any time.\" said Dr. Mickelson. I left the professor, hoping that in her old age, my wife would not become as erratic as Mickelson was...\n\nPart 19 - Slender In Hollow\n\n\"This is Bettina Wurtzburg, KXTC Channel Two News!\" yelled Bettina from in front of the Courthouse at 7:00am, Tuesday, March 14th. \"Channel Two News has learned that Judge Patrick R. Folsom has dismissed the suit filed by Citizens For Police Accountability with prejudice. Judge Folsom angrily rebutted the CFPA's claims that this lawsuit was new and went beyond the previous lawsuit that he dismissed with prejudice, and he further stated that there was absolutely nothing that made a compelling case that Commander Donald Troy had acted in a manner inconsistent with good police work!\"\n\n\"Still,\" said Bettina, \"the State Department of Justice has said it will defer to the FBI in any investigation of Commander Troy. The FBI has not responded to Channel Two News's repeated requests for comment.\"\n\nBettina then smiled a bit more as she said \"And there have been more Slender Man sightings! This footage was taken by teenagers near Cemetery Hill at dusk last night, showing Slender Man among the graves of the cemetery.\" The camera footage was low quality in the low light, and the camera was moving a good bit.\n\n\"And a group of students from the University were taking samples at Point Hollow when they captured this.\" Bettina said. This footage was more clear. it showed a very tall man in a suit at the edge of the copse of trees in the bowl of the Hollow. The sun had set but there was still some twilight; even so, there seemed to be an electric blue shimmering of light around Slender Man. And then the video started buzzing and hissing as horizontal lines appeared on the screen.\n\nBettina came back live, saying \"This footage was turned over to the Police last night, and is being examined by the State Crime Lab's video forensic experts. And now to Nick Eastwood for Sports! Nick!...\"\n\n\"Commander,\" said Joanne Warner, \"I swear I saw the hair on your arms stand up when that footage of Slender Man at Point Hollow was shown.\"\n\n\"Funny you should say that.\" I said. \"Why do you think you noticed? And that's not rhetorical? What drew your attention to it?\"\n\n\"Uh...\" Joanne said, \"I guess I felt the electricity on your arms.\" Theo chuckled.\n\n\"Don't laugh.\" I said. \"Because I felt that electricity running up my arms when I saw that, too.\"\n\n\"He's coming for you, sir.\" said Teresa Croyle. \"I'm telling ya, the legend is true... he's got you in his sights, sir.\"\n\n\"Pul-eeze.\" said Cindy... but her voice was shaky.\n\n\"Well, bring it on... Slender Man vs. the Red Crowbar.\" I said. \"And the red crowbar will win, just as it will in the Police Boxing Matches Championship!\"\n\nHowls, cheers and jeers erupted at that one. Cindy was staring daggers at me, and I did the two-finger point at my eyes then at her, and got the same in reply...\n\n* * * * * * * * * * * * * * * *\n\n\"Do I even need to say it?\" I asked Teresa at the Angels meeting.\n\n\"No sir, you do not.\" said Teresa. \"Precinct 1 is already patrolling Point Hollow, and might even have one or more squad cars camp out there tonight. Precinct 2 is handling the cemetery.\"\n\n\"Sir,\" said Cindy, \"the University students that turned in that footage were interviewed at Precinct 1 last night. Do you want to watch it, or do you want the Cliff Notes?\"\n\n\"Cliff Notes for now; I'll watch it later.\" I replied.\n\n\"They all saw Slender Man right there.\" said Cindy. \"Four students. They're in Dr. Mickelson's Genetics class, and were taking the samples for extra credit, since he has no more graduate students to do that for him. Their smart phones stopped working; no signal, they couldn't get the cameras to work and one of them couldn't get the phone to take his passcode.\"\n\n\"What about the cemetery?\" I asked.\n\n\"High School kids. Town High, this time.\" Cindy said. \"They gave their footage straight to KXTC, and my Detectives have not been afforded the opportunity to talk with them... yet.\"\n\n\"Yes, let's make that happen as soon as we can.\" I said. \"Okay, let's get Briscoe to put out a public bulletin to the schools and the radios. I want a strong visible presence at and around the schools. Increase patrols of the residential areas, especially on the northside where the previous kidnappings took place.\"\n\n* * * * * * * * * * * * * * * *\n\n\"Sir,\" asked Teresa as we talked in the early afternoon, \"it occurred to me that this Slender Man has technology that freaks out the cameras.\" She then silently pointed at me and then gestured with her fingers as if I were turning on my bug killer. So I took mine out and activated it.\n\n\"Yes.\" I said. \"But whatever he's using acts differently than this device. In fact, let's look at the Point Hollow tape again.\" As I brought up the video file on the computer, Cindy came in, having been called in by me.\n\n\"Cindy, we're talking about Slender Man's jamming of the cameras.\" I said. \"Now the Police Photography people and Myron and Mary worked on this. We got some enhancements, though they're still frames.\" I brought up a still frame photo.\n\n\"Okay, there's some strange light behind the guy, but enough light from the sun that had just set to see he's featureless above the neck. No brains, either, but I digress.\" I brought up another slide.\n\n\"Okay, this is an enhanced photo. Note that there is definitely some heat signature around his chest and waist.\" I said. Cindy and Teresa nodded. \"And now this. Myron went to the Hospital and literally had them take an x-ray.\" The next slide came up. \n\n\"Wow!\" Cindy said. Slender Man appeared as a blue-white form against the gray-black background, but there was clearly an 'aura' around him, and what looked like some faint electrical discharges.\n\n\"So whatever he's doing, the videocamera recorded the electrical discharges.\" I said. \"I think he's wearing some kind of device that zaps the cameras, especially as he gets closer. That's what the original Slender Man in England did... the closer he got, the worse the video got. But the real Slender Man is not known to have used any kind of device like our guy here.\"\n\n\"It's the same in the video game, too.\" Cindy said. \"And that is one scary fucking game, too... and I speak from personal experience.\"\n\n\"I just watched the Youtube videos of people playing it.\" I said. \"And I can understand the fear factor it generates, especially after seeing that bastard looking into my office window.\"\n\n\"Sir!\" said Teresa as if it were a sudden thought, \"has there been a Slender Man sighting around you or your home? That happened the first two times we had sightings.\"\n\nJust then my door began creaking open, slowly. And to my shock, in the doorway stood a very tall man in a suit and tie, his head all white!\n\n\"AUUGH!\" cried out Cindy, going for her gun. Teresa had bolted up out of her chair, as had I.\n\n\"Don't shoot!\" said the man. He raised his hand and ripped off the white mask that completely covered his head. It was my nephew Todd!\n\n\"Todd, you almost died right there!\" Cindy shouted at him.\n\n\"I'm sorry, it was meant to be a joke.\" said Todd, grinning his usual grin.. \"I guess you guys are on edge, huh?\"\n\n\"What do you think?\" Teresa said back.\n\n\"Well.\" I said, then added \"I've had my Slender Man sighting, and once again in m office. By the way, Todd, why are you really here?\"\n\nTodd came on inside and closed the door. \"Just to tell you I got a call from an FBI Agent named Waddell. He wants to interview my H.R. people about Police requests for employee records. I told him that he'd be hearing from our lawyers instead, and that we would not be cooperating with any FBI lynch mobs of my uncle and my lovely fianc\u00e9e.\" He put his arm around Teresa as he said it, and she leaned into him. Ah, young love... except Teresa was a little bit older than me...\n\n\"Interesting.\" I said. \"Waddell. Who his he?\"\n\nCindy said \"Lindy told me he's what they call an 'errand boy' in the City FBI offices. Takes papers from people to people, escorts people in and out of the offices, to interviews and such. But just a couple of days ago, he got assigned to Les Craig's National Security team.\"\n\n\"So he's Les Craig's 'boy'.\" I said. \"Why does that not shock me?\"\n\n* * * * * * * * * * * * * * * *\n\n7:30pm, Tuesday, March 14th. I was in my office, wearing my 'black' uniform, and looking damn good in it. But not nearly as good as Teresa looked in her 'black' uniform... I fully understood why Todd loved fucking her so much. But I digress...\n\nThe Chief knocked on the door and came inside. \"Soooo, Mr. Crowbar,\" he said. \"You are expecting trouble tonight?\"\n\n\"Yes sir.\" I said. \"Another child abduction. Unfortunately I have no clue as to who, where, or when, but if he follows his pattern at all, we should be able to move in on him quickly.\"\n\n\"Good.\" said the Chief. \"I do need to let you know this: the Sheriff approves of what you are doing. But this business happening again and again is really setting the Town on edge, and when the Public gets on edge, they contact their Council Members. And then the Council Members contact the Sheriff, he contacts me, and now I'm contacting you, if you get my drift on this.\"\n\n\"Yes sir, I do.\" I said. \"And Lord willin' and the Creek don't rise... we'll put a stop to it tonight.\"\n\n* * * * * * * * * * * * * * * *\n\nThe call came in 30 minutes later. \"Seven year old girl, Kensington subdivision.\" said the Duty Desk Sergeant. Parents thought she was with the other parent.\"\n\n\"Girl's name is Rachel Kelly, daughter of James and Nina Kelly.\" said Cindy as she came to my office five minutes later, wearing her 'black' uniform. \"They're divorced, joint custody of the child. He's a sales rep for Chemix Solutions, Inc., which sells lab equipment, glassware and the like. She's an office manager for StatePowerCorp.\"\n\n\"How did this mix-up occur?\" I asked.\n\n\"Not sure, sir.\" Cindy said. \"The parents are being brought in now.\"\n\nI turned to my computer and began looking up some stuff. \"I'm reading the Divorce Decree. Okay... now for the trial transcript... hmmm, there's a good bit here. This wasn't all that amicable. James could afford good legal representation, and they fought hard for him, so he got joint custody and not as much alimony as Nina wanted, seeing as she has a good job, also.\"\n\n\"Is that important?\" asked Cindy.\n\nI sat back, thinking. \"Yes, it could be.\" I said. \"It could be...\"\n\n* * * * * * * * * * * * * * * *\n\nThirty minutes later, Sergeant Rudistan came to my office, where Cindy was strapping on her armored vest.\n\n\"Sir,\" said Sergeant Rudistan, coming up to us. \"I have some information on the mix-up picking up the girl.\"\n\n\"Good, let's hear it.\" I said. \n\n\"Normally Rachel takes the bus to an after-school daycare center near her mom's house in the Kensington subdivision.\" Rudistan said. \"Other times, her father James will pick her up, especially if it's one of his days to have custody of her. I called the school's front desk persons, and they said Rachel's father had called and said he'd pick up Rachel, and apparently she was picked up. Thing is... it wasn't her father.\"\n\n\"Oh, that's interesting.\" I said. \"That means Rachel knew who it was that picked her up. Kids don't get into strangers' cars when getting picked up from school, they know whose car is their parents's car.\"\n\n\"And that means she may be in far greater danger than those other kids were, if she could identify him.\" Cindy said.\n\n\"Okay, Rudistan, thanks. You're going to stake out the cemetery?\" I asked.\n\n\"Yes sir.\" said Rudistan.\n\n\"Go ahead and leave now.\" I said. \"Captain, if your armor is on, we're going to Point Hollow.\"\n\nPart 20 - A Heartbeat Away\n\nA streetlight had been installed at the end of the road where it connected to the driveway of the house at Point Hollow. It provided a dim and somewhat eerie view of the house, which gave me chills to look at. \n\nCindy and I had driven up to within 150 feet of the driveway, where the others were parked. They were Cpt. Croyle, Lt. Irwin of 1st Precinct, Patrolmen Johnson, Barker, Goodwright, and Meir, and Hugh Hewitt of the SWAT Team. Goodwright was staying with his Patrol cruiser and the radio in it and the rest of us had crept up the road on foot, and I was using binoculars to look around.\n\n\"No sign of movement, sir.\" said Teresa. \"Our people at the cemetery and surrounding area also report no activity. It's darker there; they have night vision devices.\"\n\n\"Good.\" I said quietly. I felt cold, and a sense of foreboding. \"Man, this place gives me the creeps.\" As if to answer my words, the wind whipped up, rustling through the trees in the bowl of the Hollow.\n\nI heard the snap of a twig and quickly trained the binoculars onto the copse of trees. Seeing nothing, I looked towards the house, seeing nothing---\n\n\"Oh my God!\" Teresa gasped. \"There he is!\" I looked over. Standing at the edge of the trees was a very tall man in a suit and tie. He was holding a child in his arms, a little girl. It was Slender Man!\n\n\"STOP RIGHT THERE!\" screamed Teresa. As she took off after him, he put the girl down then stood up straight, hands pressed to his sides, even tighter than being at attention.\n\n\"Wait!\" I cried out, but it was too late. Teresa was running right at him, and was going to tackle him. Just as she got to him he moved his arms in front of him just slightly.\n\n*WHOOSH!* *BZZZZ!* *ZZZZT!*\n\n\"AAUUGGGHH!\"\n\nA blinding shower of sparks enveloped them. The scream was Teresa's. As we began running towards Slender Man, Teresa fell to the ground, not moving. Then Slender Man was enveloped in darkness. He had disappeared!\n\nBy the time we got to Teresa and the child, Slender man was gone. Hugh and Barker were running into the trees to give chase. Lt. Irwin was kneeling by Teresa as I had Cindy go to the little girl. Then I felt a deep, cold chill as Irwin shouted out:\n\n\"She's not breathing! I'm not getting a heartbeat!\"\n\nTo be continued.\n\nWill Teresa survive? \n\nDear Readers, you have all the clues. Who is Slender Man? What is his insidious purpose? Will the Iron Crowbar be able to stop him? The solution is in the next chapter, so hang on!"
    ],
    "authorname": "WifeWatchman",
    "tags": [
        "hot wife",
        "big cock",
        "blowjob",
        "mystery",
        "police drama",
        "crime drama",
        "iron crowbar",
        "slender man"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/slender-man-ch-03"
}
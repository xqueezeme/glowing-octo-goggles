{
    "title": "A State of Grace Pt. 04",
    "pages": [
        "Before we begin this chapter, I want to give a huge thank you to my brand new editor, gungurl_300blk. Her attention to detail can only make things better! Any mistakes that remain in this chapter are mine, not hers. If you're interested in what's been going on with me, see the Author's Note at the end of the chapter. Thanks! - CM\n\n*****\n\n\"TOGETHER!\" we all said.\n\nIt was a powerful and emotional moment! Afterwards, Kevin looked at Crystal.\n\n\"Do it, Crystal. Make the call,\" he said quietly. \n\nShe nodded her head and took her phone out of her purse. \n\n\"Damn!\" she said with a grimace. \n\n\"What?\" I asked, concerned.\n\nWordlessly, Crystal held out her iPhone for me to see. I could only echo her sentiment when I saw the size of the crack in its screen. It was completely useless.\n\n\"Kayla,\" she muttered under her breath. \"I swear, that girl is death on touchscreens! It's a damn good thing I have the money to keep fixing the things!\"\n\n\"Here,\" I said to her, handing her my phone.\n\n\"Thanks, Gracie!\" she said, taking it eagerly.\n\nShe dialed a number and listened, saying nothing for several minutes. The four of us watched her with baited breath. Crystal was quiet for several minutes. When she started speaking, it was obvious that she was using some kind of prearranged code, because the things she was saying had absolutely nothing to do with anything we'd been discussing. Finally, she ended the call and gave me my phone back.\n\n\"The Special Investigative Response Team (SIRT) will be here within 48 hours,\" she said.\n\n\"I'd hoped they'd feel a little more urgency than that,\" I said in a dry tone. \n\n\"Oh, they always say 48 hours,\" Crystal said soothingly. \"In my experience, it'll be a lot quicker than that!\"\n\n\"They probably say 48 hours to keep people from learning where the SIRT units are at any one time,\" Kevin said, and Crystal nodded her head in agreement.\n\n\"How do you figure that?\" I asked, more to hear his reasoning than because I thought he was wrong.\n\n\"Well,\" Kevin began, \"with modern air travel, you can literally be anywhere in the world in 48 hours, no matter where your starting point is. By saying 'expect a response within 48 hours,' they help keep people in the dark about where their base of operations is. That's pretty smart, really, considering the way things are these days.\"\n\nWe spent about an hour talking with Fleur, Elizabeth, and Crystal before things broke up for the evening. Fleur and Elizabeth left for home after hugging Kevin and I. Elizabeth still looked a little fragile. \n\n\"It's going to be okay, Liza,\" Kevin said softly as he held her. \"We're going to make sure the people who did this won't be able to do it to anyone else! And after we do that, we'll do everything we can to help make you and your Mom better!\"\n\n\"We will, Liza,\" I assured her. \"We promise!\" \n\nThey left, and Kevin and I watched until they made it to their Trailblazer and drove away before we returned to the kitchen.\n\n\"You shouldn't make promises you can't keep,\" Crystal said quietly.\n\nShe was still sitting at the kitchen table, staring down at its polished surface. When she turned her face towards us, I could see her eyes were red and her face was blotchy. \n\n\"I can tell you right now that while the Feds will come down on these bastards like a cluster bomb, some of them are going to get away with it.\"\n\nCrystal was speaking to both of us, but her haunted eyes bored into mine like a laser drill.\n\n\"Some of these sick fucks will try to get a plea deal - and they may succeed.\"\n\nShe shrugged almost shrugged fatalistically and brushed her hair back behind her ear. \n\n\"I've seen it happen. Or, they'll turn state's evidence in return for immunity. I've seen that too. And I've also seen people actually manage to completely avoid getting arrested at all!\"\n\nShe closed her eyes and heaved a loud sigh. After a few moments, she looked at me again, her eyes reddened and sad. \n\n\"Gracie, no matter how hard we try, we aren't going to get them all. We're just not! I'm not happy about it, God knows, but that's the way of the world. You shouldn't go making promises to people like that poor woman when you can't possibly keep them!\"\n\n\"So what are you saying, Crystal?\" Kevin demanded. \n\n\"Kevin,\" Crystal said tiredly, \"I'm saying exactly what it sounds like I'm saying. We live in a flawed world, with a flawed justice system. Sometimes - hell, a lot of the time! - some of the bad guys escape punishment. We will get some of them. In fact, with what you've discovered, I'll wager we get most of them. I've been working with these people for a long time, and they're some of the best criminal investigators there are. But it won't be the 100% clean sweep you seem to think it will be. That isn't how real life works!\"\n\nKevin stared at her for a moment, and his face fell. He looked so forlorn that I couldn't stop myself from going to him and pulling him into my arms. There were no tears; we were both too hard-bitten for that by this point. I held him close and pulled his face down against my neck. \n\nHe allowed me to comfort him for several long quiet moments.\n\n\"I'm sorry to have to be the one to tell you both that,\" Crystal said softly. \"But just like I know you won't lie to me, I won't lie to you either. Not even to make you feel better!\"\n\nCrystal sighed again and stood up from her seat at the table. She offered the two of us a weak smile.\n\n\"Look, there's more than enough time to worry about all that,\" she said. \"If you want my advice, concentrate on the now. Let the Feds do their job. You two just live your lives. I'm going to go hold my daughter and get some rest.\"\n\nCrystal smiled at us again, more warmly this time. Her eyes took on a hint of their usual twinkle. \n\n\"Why don't the two of you go...relax your way, alright?\"\n\nHaving delivered her parting shot, she wrapped an arm around each of us and hugged us for a moment before heading off to the guest room where little Kayla slept. I knew intellectually that Crystal was right, but that didn't make her words any easier to hear. That was especially true for Kevin. \n\nMy loving brother is not naive by any means, but he does have a very simple view of the world. In his view, good prevails. Evil is punished, and justice is given impartially to one and all. I know he knows that isn't really the way things work. We've both had enough personal demonstrations of that, God knows! But that doesn't change the way he feels about the way the world SHOULD be. In some ways, Kevin would be a truly wonderful absolute monarch. If anyone could assume that much power without being corrupted by it, he could!\n\n\"Come on, Gracie,\" he said softly into my ear. \"It's late. Let's get to bed.\"\n\nHe took my hand and led me to our bedroom, closing and locking the door behind us. \n\n\"Just in case Kayla should get up in the night,\" he said by way of explanation. \n\nThen he pulled me hard against his chest and kissed me passionately! At first, I was too startled to react. In moments, though, my body responded all by itself. My arms went around him, tracing the outlines of his muscles through the fabric of his shirt as I kissed him back. This kiss was hungry, and the raw need and desire behind it nearly took my breath away!\n\nI was so lost in that kiss that it took several moments for me to realize he was undressing me. In fact, I didn't become fully aware of that until his strong, calloused hands caressed the smooth bare flesh of my back. \n\n\"Ooooohhhh,\" I moaned softly into his mouth.\n\nAt last, Kevin broke the kiss as his lips wandered down to nibble and tease my sensitive neck. The feeling of him kissing and nibbling there was electric!\n\n\"Ah! Oh, Kevin!\" I whispered urgently as one of his hands cupped a breast.\n\nHe gently teased the nipple with the pad of his thumb. I moaned again in pleasure as the crinkled skin hardened beneath his touch. Then he dipped his head lower and stroked the broad, flat surface of his tongue across the aroused skin. I cupped the back of his head and pulled him closer, while simultaneously trying to push my breast into his warm, wet mouth!\n\n\"Oh, yes, baby,\" I whispered breathlessly, still trying to be quiet.\n\nHe lavished both breasts with his loving attention before startling me again. Kevin scooped me up and carried me effortlessly to our bed. I reveled in my man's strength for an all too brief moment before he laid me down on the mattress. He hovered over me as he carelessly stripped himself. Then he dropped down on top of me, his arms sliding beneath me to hold me close. His lips met mine again as he kissed me wet and deep.\n\nAs he kissed me, he very gently slipped a finger between my thighs and tested my wetness. He probably knew I was soaking wet, but the way he made sure to check was too touching for words! And then suddenly he entered me!\n\n\"Oh God!\" I cried, ruining all my earlier attempts to be quiet.\n\nKevin silenced me with a kiss and thrust the rest of his thick manhood into me. I couldn't believe how rock hard he was! I hadn't so much as touched his cock, and yet he was hard as a rifle barrel! \n\n\"Gracie!\" he whispered, his voice full of urgent need.\n\n\"Take me, Kevin!\" I whispered back. \n\nI reached up and cupped the back of his head with one hand, urging him to look me straight in the eye.\n\n\"Take me the way you need to, darling!\" I said. \"I belong to you!\"\n\nNeeding no further encouragement, he thrust deeply into me. I threw my head back against the pillows, making soft noises of ecstasy as his thick manhood filled me. He pulled out smoothly, then plunged back in as deep as he could several times, before building up a steady rhythm. I spread my legs wide and crossed my ankles over his ass, and let him have me. \n\nIn seconds he was pounding me into the mattress, giving quiet gasps of pleasure. His penis was hitting places it usually didn't. That, combined with the aggressive - almost rough - way he was taking me brought me to a shattering orgasm very quickly!\n\n\"God, Kevin!\" I cried, before stuffing the corner of a pillow in my mouth to stifle it.\n\nI rode out the blissful contractions as my handsome, strong, loving brother kept thrusting. He didn't break pace, not even when his continued thrusts brought me to a second (smaller) orgasm. Suddenly though, he lowered his body until he was lying fully on me. \n\n\"Ooohhh,\" he moaned softly.\n\nThen I gasped as I felt his manhood pulse inside of me. His release was so intense, he could do nothing but bury his face in the crook of my shoulder. I quivered with ecstasy as he filled me with his seed! As long as I live, I'll never get tired of that feeling! Kevin and I lay like that for a few moments, savoring the warmth and intimacy of the moment, before he rolled off of me onto his back. \n\nI took a few moments to recover, then I got up and strode into the ensuite bathroom to freshen myself up a little. When I returned, I brought a warm soapy washcloth and used it to clean Kevin's softening manhood. One of his eyes popped open as I gently wiped him clean. \n\n\"Thanks, Love, but I was gonna get up in a minute,\" he mumbled.\n\n\"Hush, Kev!\" I said. \"Just relax and let me do this for my man!\" \n\nI finished quickly, dried him off, and tossed the washcloth into the bathtub. When I came back to bed, Kevin had turned the covers down and fluffed up the pillows. He smiled at me, lifting the covers for me so I could slide into bed with him. As I did so, he pulled me close. I snuggled into his warmth as his arms wrapped around me. \n\nIt was so comfortable that I expected to drop off into dreamland almost instantaneously. That didn't happen, though. Instead, I laid there snuggled against Kevin's flank, idly stroking him. \n\n\"You can't sleep either, huh?\" he said softly after some time had passed. \n\n\"No,\" I sighed.\n\n\"What're you thinking about?\" he asked, turning his head to look me the eye.\n\n\"I don't really know,\" I said, after taking a moment to consider it.\n\n\"I've been thinking about what Crystal said,\" Kevin admitted. \n\nI wasn't at all surprised. I wondered if that was what was bothering me too, or to be more precise, if the way it was bothering Kevin was what was bothering me. I'm very attuned to his moods and feelings. When he's upset, I usually pick up on it even if I'm not right there with him at the time. \n\n\"Do you think she was right?\" I asked quietly.\n\n\"Yeah,\" he said with a sigh. \"Yeah, I do. In fact, deep inside of me, I already knew that was probably going to be the case. I guess her saying it like that just snapped me right out of my little hero fantasy.\"\n\n\"Hero fantasy?\" I asked, lifting an eyebrow at him. \"Honey, what do you mean?\"\n\nKevin pursed his lips and his eyes narrowed as he tried to articulate what he was thinking about.\n\n\"For as long as I can remember,\" he began slowly, \"I've been a problem solver. When something's broken, I fix it. When someone needs help, I help. I take action, and I make things better. But this mess with Trent and his cohorts...Gracie, for the very first time in my life, I'm faced with a situation that I might not be ABLE to fix! I can't shoot my way out of it. There's no engineering solution. There's simply no way I can affect the outcome of this situation, no matter what I do. Or more accurately, there's nothing I can do beyond what I've already done.\"\n\nHe heaved a frustrated sigh and squeezed me into a gentle hug. \n\n\"Do you think I have some kind of hero complex, Gracie?\" he asked. His tone was deliberately light, but I could tell it was a serious question. \n\nFor my part, I didn't even have to think about it. However, I wanted him to take my answer to heart, so I took a moment or two to consider his question.\n\n\"No, Kevin, I don't think you have a hero complex,\" I said. \"At least, not in the clinical sense that you're implying in this context.\"\n\nI pulled slightly away from him so I could prop myself up on one elbow. I gazed lovingly into his beautiful eyes and laid a reassuring hand on his chest.\n\n\"Kevin, in the past few months, you've been through an awful lot. You've been rejected by your first true love. You've had to rescue me from a vicious rape/mind control scheme, you've saved me from drowning and freezing to death, you've dealt with serious bodily injuries of your own, you've dealt with the trauma of telling our family something you knew might make them cast us out of the family (which, thankfully, they didn't!). And finally, you were forced to actually take a man's life.\" \n\nI shook my head in love and admiration.\n\n\"Kevin, a lot of people would collapse under that kind of stress and emotional turmoil. In fact, I wouldn't blame anyone who did. But you did NOT, Kevin! You have held up amazingly well under the burden! Honey, you don't have a 'hero complex!' You really are a hero to me!\"\n\nI leaned down and kissed his lips, letting myself linger there for only a moment before continuing to speak.\n\n\"You have proven that you are both willing and able to rise and meet whatever challenge life throws at you. I'd make the argument that you really don't have anything left to prove to anyone, anymore. If this situation is beyond you, that isn't your fault! Now, perhaps Crystal made a good point when she spoke about making promises you can't keep, but Kevin, even that is a part of your nature. I don't believe for a moment that Fleur or Elizabeth truly hold you responsible for curing all the victims and putting all the bad guys behind bars. Do you?\"\n\n\"No,\" he said after a long quiet moment. \"No, I don't really think they do.\"\n\n\"I know you hate this phrase, but Kevin, this is one of those times where you have to 'let go and let God,'\" I said tenderly. \"You've done everything you can do on your own. Now it's time to let the professionals take over and do their job. You concentrate on your job!\"\n\n\"There's not a lot to concentrate on until the spring thaw really sets in,\" Kevin began.\n\nIn spite of myself, I giggled lightly.\n\n\"What?\" he demanded.\n\n\"Not your job with the landscaper! Your real job is taking care of me!\"\n\nI grinned delightedly at him and settled back down against his body. He pulled the covers more closely around us before pulling me closer. I savored once more, the feeling of his powerful embrace as I rested my face in the crook of his neck. \n\n\"That's not just a job, it's a career,\" he murmured tiredly. \"But there's no other career in the world I would rather have!\"\n\n\"I love you, Kevin!\" I whispered with fierce passion.\n\nI squeezed him tightly for a moment, wanting him to feel the depth of my emotion. He returned the hug with interest, crushing my nude body against his.\n\n\"I love you, my precious Grace,\" he whispered back.\n\nWe shared a passionate, yet gentle kiss, and then dropped off to sleep.\n\n###\n\nWe woke the next morning to the delicious smells of food wafting in from the kitchen. Kevin and I took a moment to freshen up in the ensuite, before putting on our pajamas and robes and wandering out to see what Crystal was making. \n\n\"Good morning Aunt Gracie!\" came Kayla's gleeful shout.\n\nThe cry reached my ears only shortly before the curly-haired tornado reached me and wrapped herself around my legs. She hugged me tightly for a moment before throwing her little body at Kevin.\n\n\"Good morning Uncle Kevin!\" she cried. \n\nThe precious little girl didn't seem to come with a volume control, but I had become used to that over the years of my friendship with Crystal. For his part, Kevin actually seemed to enjoy it! He grinned down at the little 10-year old girl. Kayla giggled in pure delight as Kevin suddenly caught her up in his arms and started to tickle her ribs.\n\n\"Good morning to you too, Kayla!\" he said after finally letting her go. \"Something smells good! Did you cook us some breakfast?\"\n\n\"Yeah!\" she replied happily, \"But Mommy helped, too!\" \n\n\"Did she? Well what did you make for us?\" he asked, his eyes twinkling.\n\nKayla's little face lit up with a mischievous grin. \n\n\"We made chocolate-dipped asparagus with cauliflower compote!\" she cried.\n\nThe two of them stared each other down for a moment, then they both said simultaneously, \"EEEWWW! That's GROSS!\"\n\nKayla collapsed in a fit of laughter as Kevin suddenly tickled her ribs again. \n\n\"Try to feed me gross stuff like that? I'll show you!\" he growled playfully as he teased the child. \n\nThat image: the two of them playing there, Kevin's face full of love, Kayla's little face full of innocent delight at the attention he was giving her, will be forever etched into my memory. I knew - had known for some time, now - that Kevin was destined for fatherhood. He was simply too good with children not to be! And I knew also, that I wanted to be a mother. The desire to have his child was very strong just then. Almost overwhelming, in fact. \n\n\"It's good that you've got someone your own age to play with, Kayla!\" I said brightly.\n\nThe girl looked up at me, momentarily confused. Then, her eyes lit up with renewed mirth as she got the joke. She laughed gleefully.\n\n\"Did you hear that Uncle Kevin!\" she chortled. \"She just said-\"\n\n\"Oh, I heard her alright,\" Kevin growled. \"I think your Aunt Gracie wants some of this too!\"\n\nSuddenly, Kevin's hands shot out and caught me, tickling my sensitive underarms without mercy! I was so startled that I didn't resist for a second or two. By then it was far too late! Kevin utilized his unfair knowledge of my ticklish spots, and soon I was laughing helplessly in his arms. \n\nHe stopped after a few moments and just held me close. Kayla, laughing at our antics, snuggled against the two of us and hugged us both. \n\n\"I love you guys a lot,\" she said quietly.\n\n\"We love you too, sweetie!\" I said, kissing the crown of her head. \n\n\"Breakfast is ready!\" Crystal said, startling all three of us.\n\nShe was leaning against the archway that led to the kitchen, grinning at us. She shook her head, laughing at our playing with her daughter. ",
        "\"C'mon, before it gets cold!\"\n\nThe three of us smiled back and headed for the kitchen. As I passed her, Crystal leaned in and whispered, \"It looks to me like Kayla has TWO playmates in her age group!\"\n\nI shot her a wicked look that she returned with interest. Just before I could take a suitable revenge, though, she slipped away and headed for the stove. \n\nWe enjoyed a meal of eggs, bacon, toast, and juice. Kayla was her usual bubbly self, and it was contagious. It's hard to stay depressed and worried about what's going to happen when you're sitting with a happy, cheerful child! I felt my own spirits brighten as I listened to her banter back and forth with Kevin and her mother. \n\nAt last, though, breakfast was over. Kevin cleaned up the kitchen while Crystal and Kayla got ready to go home. As they were leaving, Crystal embraced me. \n\n\"Things are going to start moving quickly,\" she said. \"The people I've worked with in the past don't muck around, and with the kind of evidence you've uncovered...well, let's just say that the next few days will get really exciting, really fast!\"\n\nShe pushed back from me slightly so she could look me in the eye.\n\n\"I'm not trying to sound melodramatic or anything, but you and Kevin need to be especially careful while all this is going on. Pay attention to what's going on around you at all times. Be vigilant!\"\n\n\"Do you think we're in danger?\" I asked.\n\nCrystal frowned and shrugged.\n\n\"I honestly don't know, but this isn't the time to get complacent. There are some pretty powerful people - at the local level, at least - on the list of names that Kevin dug up. A lot of those people will be looking at some very serious prison time if they're charged and found guilty. They might come to feel like they have nothing to lose. And there is nothing more dangerous than a powerful person who thinks they have nothing to lose!\"\n\nCrystal hesitated for a moment, clearly having an argument with herself. Then, she heaved a soft sigh.\n\n\"It hasn't happened often, but there have been one or two instances in the past when someone has learned that I was the one that provided evidence against them. In those instances, there was some...unpleasantness aimed my way.\" \n\nShe favored me with a nasty grin.\n\n\"Fortunately for me, I'm very wealthy, and I have a couple gentlemen on my staff who look after Kayla and I. In those instances, they were able to make sure that the 'unpleasantness' didn't interfere with our lives. They were even nice enough to leave remains for the FBI's forensics team to work with!\"\n\nI felt my eyes widen involuntarily at the thought of what she was implying. Crystal will occasionally embellish a story, but she makes it a point never to actually lie to her friends. \n\n\"I had no idea,\" I said quietly.\n\n\"You're not supposed to, silly!\" she said. \"As far as most people know, Mr. Andrews is my personal assistant, and Mr. Cantrell is Kayla's male 'nanny.' Not even Kayla knows that the two of them have other responsibilities, or that back in the day, they used to do very different work! Then there's the doorman at the condo where we live...\" \n\nCrystal broke off her sentence, smiled enigmatically at me again, and then looked over her shoulder and waved at a silver Chevy Suburban that was parked a couple houses down from us. As I watched, the driver - who wasn't visible through the tinted windshield - blinked the lights of the vehicle twice. I was gobsmacked. I had no idea Crystal took that kind of precaution. But then like she said, I wasn't supposed to. \n\n\"I'm not trying to scare you, Gracie,\" Crystal said. \"I just want you and Kevin to be extra careful. Other than Kayla, you two are the ones who mean the most to me! You understand me, accept me, and best of all don't hold my past against me! If anything happened to you...look, just make sure it doesn't, okay?\"\n\nNot sure what to say, I simply nodded my head in agreement. Then I hugged her tightly once more.\n\n\"I'll be in touch as soon as the team leader contacts me,\" Crystal said into my ear. \"Until then, just keep your eyes open, okay?\"\n\n\"I will,\" I said, releasing her. \n\n\"Kayla!\" she called. \"Come on, honey, it's time to go home. Besides, you and I apparently need to have another talk about how we treat expensive electronics!\"\n\n\"Uh oh,\" Kayla said very softly, but with feeling.\n\nCrystal hugged Kevin tightly, then she took Kayla's hand and led her out to their Escalade. As soon as Crystal backed out of our driveway, I noticed the silver Suburban pull out and follow at a discreet distance. \n\nFor a while, after Crystal and Kayla left, I wandered the house aimlessly. Kevin and I both spent some time in the basement, working out on the exercise equipment. Then I got my tablet out and surfed the web for a while. By the time lunch arrived, I was going stir crazy! \n\nKevin made us grilled cheese sandwiches and homemade tomato soup for lunch (he uses Grandma's recipe and it's fantastic). As he served lunch, I looked out the kitchen window at the beautiful Saturday morning outside. Even though the early spring weather was still on the cool side, it was nice and sunny. There wasn't a rain cloud in sight, and there wasn't much of a breeze. It was just about a perfect Saturday morning. \n\n\"Kevin,\" I said after a bite of my grilled cheese. \"How about we hit the bike trail after lunch? This time of year, we'll probably have to ourselves.\"\n\nKevin looked at me, his expression a silent query.\n\n\"I can't stand just sitting here waiting,\" I elaborated.\n\n\"'They also serve, those who but stand and wait,'\" Kevin quoted.\n\n\"Okay, classic literature lessons aside,\" I said, tolerantly, \"I'm going stir crazy. So how about it?\"\n\nHe shrugged and took another spoonful of his soup.\n\n\"I'm game,\" he said. \"We could both use the extra cardio, anyway.\"\n\n\"That's the spirit!\" I enthused. \n\nAs soon as we'd finished eating and washing the dishes, we loaded our bicycles on my Jeep and headed for the park. Kevin and I spent the trip in companionable, loving silence. It was the kind of quiet you can only have with someone who truly loves you; someone who is secure enough in their relationship with you that they don't need to fill every second with idle chatter. \n\nAs I pulled into the parking lot at the head of the bicycle trails, I saw that I was almost correct. While we didn't have the place completely to ourselves, there were only two other vehicles in the lot. One was a large red pickup truck, the kind with a 4-door extended cab. (I'm terrible with the makes and models of cars.)\n\nThe other car was a dark gray muscle car of some sort. It had a spotlight mounted on the doorpost of the driver side that made it look a lot like an unmarked police cruiser, actually. To be completely honest, other than taking note of their presence, I didn't pay much attention to the other vehicles. I parked my Jeep in the usual spot, and Kevin and I got out. \n\nKevin took our bikes down off the rack while I got our packs out of the back. I put on my light day pack and handed Kevin his well-worn rucksack. Damn, it was heavy, I thought to myself. He took it from me and settled it on his back, and buckled the sternum strap and the waistbelt. Kevin glanced around the lot with seeming casualness, but I knew him far too well to be fooled; he was concerned about something.\n\n\"What's wrong, honey?\" I asked.\n\n\"That dark gray Charger over there,\" he said back quietly. \"It might not mean anything, but it's got a spotlight, dark-tint windows, and municipal license plates. It's practically screaming 'hi there! I'm an unmarked police cruiser!' It could just be a cop enjoying a late lunch. Like I said, it could be nothing at all, but it just feels off to me.\"\n\n\"Ooohhh, your Spidey Sense is tingling!\" I teased.\n\nHe smiled, but the expression didn't have any real humor in it. Clearly, he was genuinely concerned for some reason. \n\n\"Should we pack up and leave?\" I asked, picking up on the depth of his concern.\n\n\"No,\" he said, finally. \"I can't think of any logical reason why it's presence here is a threat. I guess maybe I'm just feeling a little paranoid, because I spent too much time with...well, you know.\"\n\nI smiled tenderly at him, and lightly kissed his lips.\n\n\"I can certainly understand why you might be a little jumpy,\" I told him. \"In light of everything that's going to be happening in the next few days, it's probably a good thing to feel that way! Why don't we go ahead and do our warm-up lap, and then you can try and keep up with me on the trails, alright?\"\n\n\"'Try and keep up with you?'\" he snorted. \"Alright, I accept your challenge, milady! You lead and I'll follow!\"\n\nWe mounted our bikes and headed for Trail 1. This was the least physically demanding of the 4 available trails. It was basically a big oval. It was wide enough for two people to ride abreast if they wished, and it didn't have any hairpin turns or steep climbs to hassle the inexperienced. It was an excellent trail to stretch and warm up your leg muscles before trying something more demanding. \n\nWe did two circuits on Trail 1, then I took the exit loop and made for Trail 4, the most demanding trail. I was feeling full of myself, and I wanted to see if I could smoke my brother out. So, I punched up the speed to the very limits of what was safe. Trail 4 is quite narrow in places, and unlike the others, it does have some challenging switchbacks, hairpin turns, steep climbs, and equally steep descents. It isn't for the timid or the inexperienced rider! \n\nWe made two circuits on this trail as well, and I was about to turn us in for a third, but then I heard voices ahead of us. There were two speakers, and man and a woman from the sound of it. They were too faint for me to understand until we reached the head of the trail. Then I could hear them clearly.\n\n\"I have no idea who they really are, Hannah, but I'll tell you this much,\" the male voice was saying. \"There's no way in hell that they are who they say they are.\"\n\n\"Why do you say that?\" the female voice asked. \n\nTo my surprise, I found that I knew that voice. It was Hannah, the nurse from the hospital! As we rounded the corner and arrived at the trailhead, I could see her. She was standing with a tall, well-built man in a muscle shirt and shorts. He was in excellent shape, though he had a truly wicked scar on the left side of his neck and his left shoulder. \n\nThere were also two young children, twins from the look of them, on little bicycles. They clearly wanted to start riding and were irritated with their parents' desire to talk instead of getting moving. They also had a pair of beautiful dogs, who were currently lavishing their attention on the two little girls. \n\n\"Well for starters, they didn't show us any badge or credentials,\" the man continued. Then he caught sight of Kevin and I coming towards them.\n\n\"Whoops, looks like we're in the way here,\" he said. \"Sorry!\"\n\n\"I recognize you!\" Kevin said from behind me. \"You're Nurse West, from the hospital!\"\n\n\"Oh! Hello, you two! Kevin and Grace, right?\" Hannah replied with a friendly smile.\n\n\"That's us!\" I agreed, returning her smile.\n\n\"This is my husband, Chris,\" she said, resting a hand on Chris's arm. \"These are my daughters Brittany and Bethany, and our mangy mutts, Berry and Goldie.\"\n\n\"Hello,\" Brittany said.\n\n\"Mooom! They aren't mangy mutts!\" Bethany protested. \"Oh, hello!\" she then said over her shoulder to us. \n\nI grinned as Hannah rolled her eyes at her daughter.\n\n\"I don't mean to horn in on your conversation,\" Kevin began, dismounting his bike, \"But who were you talking about just now?\"\n\n\"Oh, there are these two guys in black suits in the parking lot,\" Hannah said with a laugh. \"They look like they're the Blues Brothers or something.\" \n\n\"They said they're Federal Agents, but if they really are, I'll eat this bicycle!\" Chris rumbled, his eyes dark with suspicion. \"For one thing, they're driving a Charger with local municipal plates - not what a Federal Agent would be cruising around in. For another, they didn't show us any credentials or ID.\"\n\n\"What would Federal Agents be doing here in the park?\" I asked.\n\n\"They said they were looking for someone named Crystal, but they didn't give us a description,\" Chris replied. \"They also said they tracked her here. That was another thing that sounded strange to me.\"\n\n\"Tracked her here?\" Kevin spoke up, his tone dark.\n\n\"Well, that is what they said,\" Hannah admitted, giving her husband a puzzled glance.\n\n\"Mommy can we PLEASE go riding now?\" Bethany asked with a huff.\n\n\"Soon, Beth,\" Hannah soothed.\n\n\"You're in the Jeep Liberty, right?\" Chris asked.\n\nKevin nodded his head yes.\n\n\"I think they ran your plates,\" Chris said, \"and they apparently didn't like the result.\"\n\n\"Are you two in some kind of trouble?\" Hannah asked, her eyes narrowing.\n\n\"I don't know,\" Kevin replied honestly. \n\nHe studied the two of them for a moment, then caught my eye. I could almost sense the question he was asking me, and I nodded my head yes.\n\n\"We have a close friend named Crystal,\" Kevin said. \"She and her daughter stayed with us last night. I just can't understand why anyone would think she was here with us now. As far as tracking her here -\"\n\nKevin broke off in the middle of his sentence.\n\n\"She used your phone,\" he said very quietly.\n\n\"Excuse me?\" Chris said.\n\n\"Huh?\" I said.\n\n\"Last night, when she called the...you know, when she made the call, Crystal used your cell phone!\" Kevin explained. \n\n\"So what?\" I asked, not seeing what he was getting at.\n\n\"Chris just told us that the 'Federal Agents' told him they tracked Crystal here, but they didn't have a physical description. They're not tracking her, they're tracking you, and I think they're doing it through your phone!\"\n\n\"I don't understand,\" I said, though I was starting to.\n\n\"They must have been monitoring the house, or monitoring our phones,\" Kevin said, wiping his forehead. \"Or they could've just been doing random sweeps of the local cellular frequencies. They're just radio waves, it isn't hard to intercept them. They aren't even encrypted!\"\n\n\"But why would anyone care about what you guys are saying?\" Chris asked, his eyes hardening. \n\nHe very carefully positioned himself between us and his family, and his right hand inched towards his waistband.\n\n\"What kind of trouble are you in?\" he asked.\n\nKevin made sure to keep his hands visible. \n\n\"We aren't trying to cause trouble for anyone,\" Kevin said. \"I'm sorry you were disturbed, we'll just leave.\"\n\nHe touched my arm, and lead us down the path to the parking lot, walking his bike.\n\n\"Good to see you again, Hannah,\" I said as I passed them. \"You have a lovely family.\"\n\n\"Thank you, good to see you too,\" Hannah replied, concern in her voice.\n\nAs we walked, I pulled out my phone and checked it. There were no new messages or missed calls. The signal strength was 3 out of 5 bars. I did note that the battery charge was lower than what I thought it should be. After all, I hadn't used it yet today. I looked at Kevin's back as he walked cautiously down the trail.\n\n\"Do you really think they're tracking my phone?\" I asked him.\n\n\"I do,\" he replied without hesitation. \"I'm not sure when they started doing it, or what the pretense for doing it was. But it seems evident that they are. The fact that that car was here ahead of us tells me they may have been using it as a remote microphone, too.\"\n\nI was shocked. That had all kinds of negative implications! Literally almost too many to count! I opened my mouth to ask Kevin for more details, but suddenly he held up his hand and gestured for me to stop and be quiet. A second later, I understood why.\n\n\"The signal's stopped moving again,\" came a man's voice from somewhere ahead of us.\n\n\"How far?\" another asked.\n\n\"Hard to say, exactly,\" the first voice replied. \"This damn thing uses the metric system. I don't understand all this meters and kilometers crap!\"\n\n\"Then what does it say the distance is in meters, or whatever?\" the second voice demanded irritably.\n\n\"Uh, fifteen meters, I think.\"\n\n\"Oh, for Chrissakes, give me the fucking thing!\"\n\nKevin turned and stared at me.\n\n\"Give me your phone, quick!\" he whispered.\n\nI handed it to him wordlessly. He took it and put it, along with his own phone, in the tall grass to the left of the path where they couldn't be easily seen. Then he grabbed his bike.\n\n\"Follow me, and be as quiet as you know how to be!\" he whispered urgently. \n\nHe picked up his bike and hurried back down the access trail in the direction we'd just come from. I did the same, staying as close behind him as we could. When we reached to point where the different trails branched off, he took the entrance to trail 4. I followed him for about 100 yards or so down the trail. At that point, he stopped and mounted his bike again, and I followed suit. \n\nStill being quiet, we rode single file for another quarter-mile, then he stopped at the first switchback.\n\n\"Okay,\" he said very quietly. \"From here, we leave the trail. If we follow the slope down the side of this hill, we'll come to little spring that will lead us -\"\n\n\"Straight to the creek,\" I finished, and he nodded his head in agreement. \"Good idea, Kev!\"\n\n\"Well then, after you, milady!\" he said, smiling faintly.\n\nI hopped lightly over the steel guardrail and Kevin handed our bike over to me. Then, he followed me over the side, and we started climbing down. It was a damn good thing we were both in such good physical shape! It would not have been an easy climb in any case, but carrying our bikes with us made it that much more difficult. \n\nIt took us around 40 minutes to reach the forest floor. I recognized where we were almost instantly. We were still well inside the treeline, but I could see the edge of the parking lot from here. My Jeep was parked just a few feet beyond the treeline...and so was that Charger! There was another car there now, too. That one was a marked police car from the HPD. The two guys in suits were talking with two uniformed officers. I couldn't hear them from here, but the body language told me no one was very happy.\n\n\"C'mon, Gracie, gotta go! Now!\" Kevin whispered urgently.\n\nWe turned and made for the creek. It was slow going! With the coming of Spring came the renewed growth of brush and brambles. There were also hidden trip hazards in the form of fallen branches and gopher holes. I fell twice. Even the normally sure-footed Kevin stumble a few times. Still, I thought we'd make it alright. Well, I did up until I heard the shouts, anyway.\n\n\"Hey, you two! STOP!\" came one of the voices I remembered from earlier. \"FBI, STOP!\"\n\nNeither of us was inclined to stop; in fact, we picked up the pace, now that being quiet was no longer an issue. I was giving the ground in front of me my full attention. Fortunately, Kevin is better at multitasking than I am. He slammed me to the ground and covered me with his body an instant before the unmistakable sound of fully-automatic gunfire roared behind us! \n\nThat sound, CRACK-CRACK-CRACK-CRACK-CRACK-CRACK, cannot be mistaken for anything other than what it is. Fortunately, it was still far enough away that the shooter missed with his burst, I thought. There was a meaty THUNK sound from above me, and Kevin grunted.\n\n\"Please tell me you're armed,\" he said.\n\n\"Yes, I've got my Smith & Wesson in my waistband. One spare magazine, too,\" I said.\n\nI didn't have to tell him that only gave me a total of 16 rounds. He could do the same math and get the same, grim result. \n\n\"I have my Kahr and two spare magazines, plus some more loose rounds in my pack,\" he said with a grunt. \n\nI grimaced up at him.\n\n\"Well, if you knew there was going to be a gunfight, you would've brought your AR-15, I know!\" \n\nHe grinned in spite of the situation.\n\n\"Gracie, honey, if I knew there was going to be a gunfight, I'd have stayed home!\" ",
        "There was another long burst of automatic fire, and Kevin covered me once more with his body. He jerked twice and gasped.\n\n\"Kevin!\" I whispered.\n\n\"Now, while he's reloading! Make for that rocky outcropping! It's the only cover we've got!\" he said urgently. \n\nThen he rolled off of me onto his back, his pistol in his hands. He fired slowly, taking the time to aim. I reached for him.\n\n\"NOT WITHOUT YOU!\"\n\n\"GO, DAMN IT!\" he screamed. \"I'LL BE RIGHT BEHIND YOU!\" \n\nThe brush behind me parted and one of the men in suits was there - right there in our faces. There was no time to yell, run, curse, or draw my weapon. He was right there, holding some kind of compact rifle in his arms with the business end pointed right between my eyes. In that moment, I knew I was looking at the end of my life. I'd never graduate, never become a psychologist, never be a mother, and I'd never feel Kevin's arms around me again. This man was going to kill me, there was nothing I could do to stop him and to top it off, I wasn't even completely sure why! \n\nAnd then came the explosion of blood. My ears were already deadened from all the gunfire, but to my surprise, it didn't hurt. I always thought getting shot would hurt. Maybe I was in shock or something? But then the compact rifle fell from the man's hands, and he crumpled face forward to the ground. Turning my head, I saw Kevin sliding a fresh magazine into his pistol. \n\n\"FUCK THAT WAS CLOSE!\" (I think that's what he said, anyway.)\n\n\"ARE YOU HURT?\" he shouted.\n\nWordlessly, I shook my head no. Kevin rolled onto his stomach and carefully grabbed the compact rifle from the ground where it had fallen. With skillful fingers, he ejected the magazine, checked the chamber, then put it back in. The rifle looked a lot like Kevin's AR, but the barrel was much shorter, and I'm pretty sure Kevin's isn't full auto.\n\nKevin took just a second to pull two spare magazines for the rifle from the corpse of the man in black before the looked at me again. He didn't have to say a word, his look said it all. I crouched and ran, diving behind the rocky outcropping he'd pointed out to me. A few moments later, Kevin dropped down beside me, panting with effort. \n\nAfter a second to recover, he cautiously peered around the side of the rock, the rifle pulled tightly to his shoulder.\n\n\"KEEP YOUR DISTANCE!\" Kevin roared at whoever he saw. \n\nThe only answer Kevin got was a short burst of automatic fire. Kevin answered it with a short, controlled burst of his own. I heard a faint scream - or at least I thought I did. Then there was nothing further. It felt like forever, but in reality, I think it was only a few minutes. Whatever the case, it was long enough that my hearing started to come back. \n\nKevin was wheezing and panting. Finally, the rifle started to droop towards the ground, as though he couldn't hold it up anymore. When he sagged back against me, I knew he'd been hit!\n\n\"The two guys in suits are down, the uniforms took off,\" Kevin mumbled.\n\n\"Forget that, Kevin!\" I said.\n\nGrunting with the effort, I pulled his upper body into my lap. I reached into his pocket and took out his folding knife and used it to cut off his shirt. \n\n\"OH GOD!\" I cried, seeing his abdomen. \"Kevin, you're...what do I do?\"\n\n\"Gotta...stop the...bleeding first,\" he said tiredly. \"Got any tampons?\"\n\nI always carried a few, since my periods have occasionally started when they weren't expected. I pulled my pack off and got them. I unwrapped one and he took it. He put the applicator against the wound, and to my horror, pushed it in. He moaned in agony, but I could see, as he tossed the applicator away, blood flow had ceased. He did the same with the other wound. \n\n\"Oh, Kevin! Oh God, Kevin!\" I cried. \n\nI prayed for the strength to keep my wits about me. I prayed for help. And, I prayed that God would spare my brother. \n\n\"What next, Kevin?\" I asked urgently.\n\n\"Gotta keep...me awake,\" Kevin said. \"And you have to get help. I wonder if Chris and Hannah are still in the park? I...bet Hannah...could fix me...\"\n\nHe looked up into my eyes. \n\n\"Take this,\" he said, pushing the rifle to me. \"Get to the Jeep, get to a phone, and get help.\"\n\n\"No! I won't leave you!\" I cried.\n\n\"If I don't...get help, I'm dead,\" he replied, simply. \"We...don't have any...way to call for help. I don't think I can walk...out of here.\"\n\n\"Kevin,\" I sobbed, \"If I leave, you could die!\"\n\n\"I'll die for sure if I don't get to a hospital,\" he said. \"If it has to happen, I'd rather die in your arms than in the back of an ambulance, anyway. I guess...you should stay here.\"\n\nHe smiled lovingly up at me and weakly stretched out a hand to touch my cheek. \n\n\"You're so beautiful, Gracie,\" he said. \"You have always been my true love, even though I was...too blind to see it...I love you!\"\n\n\"Don't Kevin!\" I said fiercely. \"Don't you dare say your goodbyes! Not yet!\"\n\nThen I remembered: the dead man! I gently, loving slid my legs out from beneath Kevin and lowered his head to the soft dirt.\n\n\"You stay with me, Kevin!\" I said. \"I'll just be a few feet away!\"\n\n\"Okay...you say so, babe,\" Kevin mumbled.\n\nI can do this, I told myself. Holding the rifle against my shoulder as I'd seen Kevin do, I leaned carefully around the rock, and startled the hell out of Chris West! He grabbed the rifle out of my hands just before I could squeeze the trigger.\n\n\"Whoa there, girl!\" he shouted. \"Back it down!\" \n\nHe quickly put the weapon on safe and then slung it over his shoulder. \n\n\"We saw part of what happened,\" he said. \"Enough to know who the real threat was, at least.\"\n\nHe met my eyes with a steady gaze.\n\n\"I made sure my family was safe before any other consideration, though, and I won't apologize for that.\"\n\n\"I understand that,\" I said, recovering my wits. \"Kevin's hurt, though, he needs-\"\n\nBut Chris had already darted behind the rock and was examining Kevin. As I watched, he clucked his tongue. He ran a finger around the wounds and nodded his approval at the field dressing. He worked quickly, using items from his own pack to clean the areas around the wounds. He was clearly a practiced hand. \n\n\"How-\" I began, but he cut me off.\n\n\"I've done one tour each in Iraq and Afghanistan with the Army, plus I'm married to a truly excellent nurse,\" he said, answering my unspoken questions. \n\nHe sat back on his haunches and turned his gaze on me.\n\n\"He's probably going to make it,\" Chris said. \"Gut wounds hurt like hell, and I know there's a lot of blood, but as long as we get him to a hospital in the next little while, they'll put him back together again.\"\n\nChris smiled down at Kevin and rested a surprisingly gentle hand on his shoulder.\n\n\"I'd say you've got guts, kid, but you probably wouldn't care for the irony!\"\n\nKevin smiled wanly in spite of himself.\n\n\"You're going to have to help me, Grace,\" he said. \"Let's get him up.\"\n\nKevin gave an agonized cry as Chris and I lifted him to his feet. Chris supported most of Kevin's weight; I think my 'helping' was to keep me occupied, not because he actually needed me. Sure enough, as soon as Kevin was upright, Chris hoisted him into his arms and started walking towards the treeline. \n\nJust a few feet farther down, we encountered the second man in black. He was sprawled against a tree. Kevin was obviously a better shot, I thought to myself. Even with the added burden of Kevin - who wasn't exactly a lightweight - Chris moved like a soldier, making less than a quarter of the noise I was making. When we finally reached the treeline, Chris gently set Kevin down, propping him up against a tree. \n\n\"Stay here,\" Chris said, his tone making it a clear order.\n\nThen he took off a fast run. I quickly lost track of him, but as Kevin was my focus anyway, it didn't matter. I dropped to my knees by his side and tenderly stroked his face. \n\n\"Just hold on, Love,\" I soothed him. \"Help is coming!\"\n\nHe leaned against me and I pillowed his head on my breast. I gently caressed him, offering him all the love and gentleness I could. It was all I could do for him, other than the whisper quiet words of love to him. I was fully, intimately aware that he had saved my life yet again! As I knelt there, holding my wounded hero to my breasts, I made a decision.\n\n\"Kevin,\" I said softly.\n\n\"Hmm?\" he said tiredly.\n\n\"I know the timing is awkward, to say the least, but...Kevin, as soon as you're healed, I want your baby!\"\n\n\"But-\"\n\n\"No, love, no arguments!\" I insisted. \"I want there to be something in this world other than two of us, that proves we lived and loved together! We were meant to do this, Kevin! I've never been so sure of anything else in my life!\"\n\n\"Okay,\" he said. \"It's not...like I didn't want to give you a child. So what if it's...earlier than I planned? We...can make it...work.\"\n\nHe smiled at me.\n\n\"Now...we just...need some names...huh?\"\n\n\"Yes!\" I agreed, tearing up. \"We'll have plenty of time to choose them together, Kevin. Kevin?\"\n\nHe was still smiling faintly, but his eyes had gone glassy, and his breathing was weakening.\n\n\"Kevin!\" I cried. \"Kevin, wake up! Kevin, come back to me!\"\n\nHis eyes rolled back into his head until only the whites showed, and the feeling of alarm turned into outright terror. \n\n\"KEVIN!\"\n\n*****\n\nAuthor's Notes:\n\nWell, it's been a fascinating last couple of months. I wasn't expecting to get another contract so soon after the last one, but the money was way too good to pass up. I'm back for now. I would say I'm back for a few months, but you never know. When you're a 'private contractor' you go where (and when) the work takes you. Sometimes you know quite a bit ahead of time - and sometimes you don't! There have even been some contracts where I've been allowed to have my family join me. Those aren't too bad, but they're also few and far between. Still, it allows me to provide pretty well for the aforementioned family, so I won't complain (too loudly).\n\nThe next chapter will probably conclude 'A State of Grace.\" It depends on whether or not I can tie off all the many loose ends in a single chapter or not. Where we go after that depends on you, dear readers. You haven't been shy about your comments up to this point, so don't start now! Best of Holiday Wishes to all of you and your loved ones! \n\n- Carbinemaster"
    ],
    "authorname": "carbinemaster",
    "tags": [
        "brother sister incest",
        "brother sister romance",
        "adventure",
        "suspense",
        "true love"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/a-state-of-grace-pt-04"
}
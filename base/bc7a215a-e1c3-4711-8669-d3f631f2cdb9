{
    "title": "They Said SURE!",
    "pages": [
        "I'm a teacher in a small town in Arkansas. Happily married for 22 years, but like any normal guy, I have my fantasies, some of which don't particularly include my wife. Oh, she's a wonderful wife, great mother, and our sex life is....adequate, but she being quite conservative. We don't ever try too much more than the normal things when it comes to our love-life.\n\nAnd living in a small town, and a teacher to boot, I really don't have the opportunity to act out on any of my crazy fantasies. I could ruin my career in a hurry if I ever was caught doing those things that go through my head when I'm alone and....horny.\n\nOh, I've done some things online. Yes, I have masturbated for a few women on cam, and even masturbated WITH some women on cam. Most of the women I've masturbated with online have been middle aged like myself, and don't have the great bodies anymore, but, I mean, when you masturbate on cam with a woman, you're not really looking at her body, are you? \n\nAnd I've had some very hot masturbatory experiences. One woman, she came really easy, came 14 times for me. I can still hear her. \"Oh, god! Oh, god!\" And she was 60. But boy could she cum. Not a bad body either.\n\nWell, this story comes from an experience I had in Little Rock one summer. Teachers always need to get their professional development hours each year so I attended a three-day conference so I could get my hours knocked out pretty quickly.\n\nThe conference was an exercise in teamwork, learning to work as a team, something a classroom teacher doesn't always do. We were divided up into four-person teams and assigned a project to work on together. I was assigned with three other women. There aren't that many male teachers in my grade level. \n\nJennifer was the oldest teacher, besides me. She was 46, married, two teenage kids, and pretty much had a middle-aged body, kind of wide, extra padding, like me, and probably the alpha of the group. She was a take-charge type person and turned into our group leader.\n\nCindy was 24, in her second year teaching, cute as a button, blond, tiny, probably 5' 1\", maybe 110 pounds. Also newly married. Not much older than my daughter.\n\nSamantha was in her middle 30s, married with two small kids, a very attractive woman, quiet.\n\nWe all developed a great working arrangement throughout the first day. At 4:30 the conference was over for the day and Samantha, who lived just outside of Little Rock, went home, but the other three of us were from out-of-town and had booked rooms in the hotel the conference was in.\n\nSo the three of us decided to have dinner together, figuring we could further discuss our project during dinner. The hotel was nice and we all had a pretty good per diem so we decided to have dinner at the hotel.\n\nWe had a good time at dinner. We enjoyed ourselves at the conference and so it was easy to relax together at dinner. Bedtime was a few hours away so none of us were in a hurry to go to our rooms. We had a few drinks at the table and soon the conference was forgotten and we were discussing our lives, our schools, co-workers, etc.\n\nSoon the conversation began to lag and Jennifer stated that she wished her husband had come with her. \"I could use a little fun tonight,\" she said with a wink.\n\nI didn't say anything. I felt a little nervous and probably turned a little red. She noticed and said, \"oh, did I embarrass Joe?\"\n\n\"Maybe not Joe, but you sure embarrassed me,\" joked Cindy. \"This is the first time I've been away from Stan since we've been married.\"\n\n\"Ah, I know what Cindy is thinking about,\" joked Jennifer right back at her.\n\nI just nodded and smiled. \"I think we all feel the same way. Nothing like a little night-away-from-home sex with the one you love,\" I joked right back.\n\nNow Jennifer was red. \"Oh, I hope no one misunderstood! I meant fun with my husband,\" she explained. \"I have never been with another man and I don't intend to break that record.\"\n\n\"I knew that's what you meant,\" I returned. \"I am also a one woman man. And proud of it.\"\n\nCindy chimed in. \"I miss my man.\"\n\nThings got quiet for a while. Since we were kind of on the subject I decided to see where it might go. \"So....deepest secret. If there were not any consequences, what would you wish you could do tonight?\"\n\n\"No consequences?\" Jennifer asked.\n\n\"Nope, I mean, totally fantasy. Not that you'd ever do it.\"\n\nJennifer thought for a while. Cindy was quiet, looking down, her face was flushed.\n\n\"There's none of this in Arkansas, but I would love to go to a male strip show,\" Jennifer said with a smile and a wink.\n\nTotal silence. Cindy looked up at Jennifer with wide eyes. \"Well, he asked.\" Jennifer retorted.\n\nThen she looked at me and asked, \"Have you ever been to a strip club?\"\n\n\"Not to a MALE strip club!\" I answered.\n\n\"Oh, so you've been to a FEMALE strip club.\"\n\nI got as little red and nodded. Well, I had! I mean. I'm like any other red-blooded guy. I like to look at naked women.\n\nIt got quiet again.\n\n\"Tell me about it.\"\n\n\"It was OK, but kinda disappointing.\"\n\n\"How so?\"\n\n\"Well, I guess I expected the women to fall all over me,\" I laughed. \"But it's a fantasy business, and the women are there to just make money off your fantasy. And nothing really happens.\"\n\nIt was quiet again.\n\nThen Jennifer said, \"I've seen some videos of guy strip clubs and it really was crazy. A lot of yelling and clapping....and sometimes touching.\"\n\n\"Except for the loud music the strip club I visited was quiet.\"\n\n\"Not that I'd ever go, but it IS a fantasy of mine. Shoot, I like to look at naked men as much as any woman,\" she laughed. Cindy looked up and smiled.\n\nQuiet again. I had seen the same videos. OK, I'm a real guy and have no interest in guys. But strutting around naked in front of a group of clothed women? Allowing them to touch me? And the women DID touch the guys....everywhere. THAT turned me on.\n\nActually, I best like the videos where there were just a few women and one naked man, without the wild music and screaming. The kind where there was just two or three nervous women watching a guy masturbate, or maybe helping him out. I loved the excitement on their faces as he shoots his load for them. Hmmmmm.\n\n\"Shoot, I would be happy if Mark would do a little striptease for me some time,\" she laughed.\n\n\"Ever done one for him?\"\n\n\"Me? No WAY! Look at me! Who would want to see me dance around naked. I'd probably hurt myself.\"\n\nCindy was turning red again. I wanted to ask her if she'd ever done a striptease for Stan, but she hadn't really joined in with this conversation.\n\nJennifer continued. I don't think she could help it. \"Jimmy is so uptight. He's pretty dull, actually. I wish he'd loosen up. Hey, don't get me wrong. I love him, but, dang, I wish he'd do something unexpected.\"\n\n\"Like what?\"\n\nJennifer thought for a bit. Then she looked really embarrassed.\n\n\"What is it?\" I asked. \"You thought of something.\"\n\nJennifer got real red. \"Oh, nothing.\"\n\nCindy finally chimed in. \"You thought of something. Spill it.\"\n\n\"No, I can't. I won't.\"\n\n\"It's that bad?\" I asked.\n\n\"No. It's just....well, it's not bad between a husband and wife, but it's...personal.\"\n\n\"Spill it,\" laughed Cindy. She was getting into this.\n\n\"I can't. You'll think I'm a pervert.\"\n\n\"Jennifer,\" I said. \"We're friends here. We know you already and while you're pretty strange,\" I laughed, \"what is said here stays here.\"\n\n\"Like Las Vegas,\" laughed Cindy.\n\n\"Oh, OK. You promise not to laugh?\"\n\nBoth of us nodded.\n\n\"I wish....I wish he would let me watch him masturbate.\"\n\nCindy's eyes got real big. My dick began to grow.\n\n\"Have you ever masturbated for him?\" Cindy asked.\n\n\"Well, no. He's never asked me to.\"\n\n\"Have you asked him to?\"\n\n\"Well, no.\" \n\n\"Then ask him.\" I was keeping quiet. But this conversation excited me.\n\n\"Have you ever masturbated for Sam?\" Jennifer asked.\n\n\"Yes, we do it all the time. It's hot. And we really have a great time afterward. He'll last a lot longer then,\" Cindy answered with a shy smile. Who would have thunk it from sweet little Cindy.\n\nEveryone was really quiet for a bit. I'm sure Cindy was thinking about Stan. I figure Jennifer was thinking about Stan AND Cindy together. I was too, Cindy especially, but I was also thinking about something else.\n\n\"Let's change the subject,\" laughed Jennifer after a long silence.\n\nWe tried to change the subject but it seemed like all our minds were somewhere else. A lot of little mindless talk. It seemed that the night was winding down. But the night was still young.\n\n\"Well, I think I'll call it a night,\" Jennifer finally said. \"I should call Jimmy.\"\n\n\"A little phone sex tonight?\" joked Cindy. Boy, Cindy was hotter than I thought.\n\n\"Oh, stop! We've never done that!\"\n\nWe got quiet again. Jennifer started gathering her things together. I came to a decision.\n\n\"I've got an idea,\" I said.\n\n\"I'm not coming to your room to screw you,\" Jennifer laughed.\n\n\"I'm not interested in getting laid,\" I laughed. \"but I will proposition you both.\"\n\n\"Oh, a three-some,\" laughed Jennifer.\n\nI smiled and continued, nervously. \"I propose that you both come to my room.\"\n\n\"I told you, no sex for you,\" giggled Jennifer.\n\n\"No sex. I propose....that you both come to my room....and I do a striptease for you and then masturbate for you. No touching, just watching.\" There, I said it.\n\nThey both looked at me, then at each other, then laughed. \"You're kidding!\"\n\nI shook my head.\n\n\"You're serious?\"\n\nI nodded my head.\n\nThey looked at each other. Then in unison they said \"sure!\"\n\n\"Ok, It's a deal then. Are you ready?\"\n\n\"Let me get another drink,\" said Cindy.\n\n\"Yeah, I'll need one too,\" retorted Jennifer.\n\n\"Me to,\" I sighed.\n\nWe caught the eye of the waitress and reordered. Then waited.\n\n\"You surprise me,\" Jennifer commented.\n\n\"I surprise myself,\" I returned. But I was excited. I had really said it. And they had accepted. My fantasy.\n\nOur drinks came and we settled our bill. We sat there a minute.\n\n\"Are you ready?\" Cindy wanted to get this started.\n\nI sighed. \"Let's go.\"\n\nWe settled our ticket, got up and walked out to the restaurant. When we got in the elevator Jennifer grabbed my butt. I gently removed her hand. \"No touching. That's the rule.\"\n\nWhen we got to my room I nervously opened the door. I was having second thoughts. Could I do this? What if I couldn't get hard? What if I got naked and I grossed them out? I was 48 and I don't have a great body anymore. You know how it is. Thicker around the middle. A little too much padding. My cock isn't huge. But all the women on the Internet said it was very nice. Were they lying?\n\nWe entered the room and the girls sat on the bed facing the window. I made sure the curtains were closed. I was fixing to put on a show, but I wasn't ready to put on a show for the world.\n\nI turned back to them. It was obvious that we were all nervous. \"You don't have to do this, you know,\" Jennifer said nervously.\n\n\"I want to.\"\n\nWe looked at each other. I saw Jennifer eye my crotch. \"It looks like you're ready,\" she laughed.\n\nI could feel that I was already pretty hard. Well, I don't have to worry about that at least, I giggled to myself.\n\n\"Well, we're ready.\"\n\nI took a deep breath and began to unbutton my shirt. Jennifer and Cindy looked at each other and grinned. The unspoken word was \"he's gonna do it!\"\n\nI pulled my shirt out of my slacks and took it off. I walked over to the closet and took a hanger and hung it up.\n\n\"Oh, he's neat,\" Cindy laughed.\n\nWhile I was at the closet I slipped off my shoes, then my socks and put them in the dresser. It was my way of teasing them.\n\nI walked in front of them again and unbuckled my belt. They sucked in their breath as I unzipped and slowly lowered my slacks. As gracefully as I could; it's not easy to take off your pants gracefully, I stepped out of my slacks. \"Oh, whitey-tighties,\" giggled Cindy.\n\n\"If I knew I was gonna do this I would have brought my sexy underwear,\" I laughed.\n\n\"Looks like he's already hard,\" commented Jennifer.\n\nI walked to the closet and hung up my slacks.\n\n\"Nice ass.\" Jennifer of course.\n\nI walked back in front of them and stood with my hands on my hips, letting them look at my body, my bulge. Both of them were staring intently at my bulge.\n\nFinally Jennifer looked up at me and said \"we're ready....for the unveiling.\"\n\nI took a deep breath and grabbed my waistband and began to lower my underwear. As my cock came into view they both sucked in their breath. \n\n\"Beautiful\", Cindy commented\n\n\"You have a NICE cock,\" Jennifer this time.\n\nI stepped out of my briefs and walked over to the dresser to put them away. I was gloriously naked before two women. This has always been my fantasy. It was happening.\n\n\"REALLY nice ass!\" said Jennifer.\n\nI wiggled my ass at them. \"That's the extent of my dance,\" I laughed.\n\nI walked back to the bed and stood before them with my hands behind my back, letting them have a good look. I was thrilled to be naked before these two women. My heart was beating a mile a minute. I was breathing heavy already\n\nThey concentrated on my cock. I had been worried about what they would think about my body, but they seemed to be only interested in my cock. I remembered someone saying online one time. No man ever turns down a naked woman. Most men are just thrilled that they have a chance to get some pussy. I guess it's the same with a naked man.\n\n\"Look how it curves up,\" Jennifer said to Cindy. Cindy nodded. Jennifer reached out her hand and I pulled back.\n\n\"No touching. That was the deal.\"\n\n\"But, on the videos the girls are allowed to touch,\" she pouted. \"And remember, this is my fantasy.\"\n\nCindy smiled and nodded.\n\n\"Wouldn't that violate your marriage vows?\" I smiled.\n\n\"I won't tell anybody if you won't,\" she winked.\n\nCindy nodded. \"I think all of this is stretching the marriage vows,\" she commented.\n\n\"Pul-eeese. Let me touch it?\"\n\nI sighed, thought a bit. I really wanted them to touch it. While I didn't want this to go too far, I really wanted to play out the CFNM thing. And that meant allowing them to touch, to do what they wanted to do to my body, short of fucking. That's a step I didn't want to take. That WOULD be violating my marriage vows. This wasn't really cheating was it? This was just playing out a fantasy. Shoot, I was already naked! And hard as I've ever been!\n\n\"OK, just a little bit.\" I stepped toward her.\n\nJennifer reached out and touched the tip of my cockhead. It jumped by itself. She pulled her hand back and giggled. Cindy was staring intently.\n\nJennifer reached out her hand again and wrapped it around my cock. This was the first woman's hand other than my wife's that ever touched my cock. It was electric. \n\nShe looked up at me and started to stroke my cock. I closed my eyes. It felt SO good. I felt her lips go over the tip of my cock. I should have pulled back, but I couldn't. I looked down at her. She was looking back at me as she began to suck on the head of my cock. She began to stroke my cock. I looked over at Cindy and she was staring intently at my cock. I don't think she realized that she was licking her lips. She was beginning to breathe heavily. Yes, I was gonna let this pretty young thing suck my cock also.\n\nJennifer began to take more of my cock in her mouth and started to bob her head up and down on my shaft. She took her hand off my cock and put both of her hands on my ass and squeezed and pulled me toward her face, pulling my cock deeper into her mouth.\n\nI closed my eyes and rocked, enjoying a different mouth on my cock.\n\nFinally I pulled back. If I didn't I was gonna cum.\n\nI moved over in front of Cindy. She looked up at me. I nodded.\n\nCindy put her arms around my body and grabbed my ass and pulled me to her. She looked up at me as she pulled my cock into her mouth. Sweet little Cindy, 24 year old Cindy, was sucking my cock. She took one hand from my ass and started to rub my balls. It felt SO good. TOO good. If I didn't stop this, I was gonna cum in her mouth.\n\nI finally pulled back. There was a pop as my cock came out of her mouth. \"This is not what we came for,\" I said.\n\n\"But it was nice,\" commented Cindy.\n\n\"Oh yes it was,\" I answered. \"Too nice. But the deal was that I'm supposed to masturbate for you.\"\n\nThey smiled. \"And cum for us?\" Jennifer asked.\n\n\"I think that's most likely what will happen,\" I laughed.\n\n\"How are you gonna do it?\" Cindy asked.\n\nI thought about that. I could stand in front of them and masturbate. But I'd probably fall on the floor when I came. I could sit on the chair and spread my legs and give them a good show. But that chair looked hard and didn't have any arms to hold my thighs.\n\n\"I think I want to lie on the bed,\" I said.\n\nThey both got up off the bed and pulled the comforter off the bed and pulled the blankets down.\n\n\"No sense messing up the comforter and the blankets,\" Jennifer laughed. Women...always thinking of the mess, I thought to myself.\n\nI climbed up on the bed, pulled all the pillows together. There were three. I put two against the headboard, and one lower where my ass would be. I settled in, adjusting everything just right. Jennifer knelt down beside the bed and Cindy went to the other side and knelt.\n\nI took a big breath, spread my legs, and for the first time of the evening, took my cock in my hand. It was hard at a rock, standing tall from my body, with that little curve that all the women who had seen it said made it beautiful.\n\nThere was a drop of pre-cum coming out of the slit. I took my finger and spread it around the head. My cock was still wet from their mouths. I began to stroke, slowly.\n\n\"What do you think about when you masturbate?\" Jennifer asked.\n\n\"This,\" I replied. \"I think about two beautiful women looking at my cock as I masturbate for them. This has been a long-time fantasy.\"\n\nThey watched quietly. \"This is what I'm gonna masturbate to from now on,\" Cindy laughed. That seemed to ease the tension. I thought I might cum too quickly and I wanted to extend this out as long as I could. I wanted to put on a great show.\n\nCindy reached out and put her hand on my inner thigh. Jennifer did the same, and pulled my thighs further apart. I slowly stroked, watching each of their faces as they intensely watched.\n\nI felt Cindy's hand slide up my thigh until her fingers touched my balls. She slowly rolled them between her fingers. It felt so good. I looked over at Cindy. She looked up at me and smiled. \"Thank you,\" I mouthed.\n\nJennifer slid her hand under my thigh and up under my ass. I lifted my ass slightly, giving her better access. I felt a finger slide over my asshole. \"Mmmmm,\" I moaned.\n\nWe continued like this for a bit, me stroking my cock, Cindy rubbing my balls, Jennifer rubbing my asshole, sometimes probing inside. All of our breathing got quite ragged. Both of them alternated watching my cock and watching my face. I'm sure my face was showing my pleasure.\n\nMy hand got faster. I was softly moaning. I was ready to cum for them. My pleasure got higher and higher. My ass was rotating, my belly was clenching.\n\n\"His asshole is grabbing my finger,\" Jennifer squealed.\n\n\"His balls are contracting. He's getting close,\" Cindy panted.\n\n\"Yes I am,\" I stated. \"I'm gonna cum for you guys.\"\n\n\"Come on baby,\" Cindy encouraged. \n\n\"Shoot that cum all over yourself,\" Jennifer yelled.\n\n\"I'm gonna cum!!!\" I lifted my ass off the bed, just having my head and feet touching the bed as I stroked with abandon, eyes closed, face in ecstasy....or was it pain?\n\nI felt it first in my ass. At that moment Jennifer stuck her finger in my asshole. If I wasn't already cumming, that did it. My cum shot out of my cock. My eyes were closed, so I didn't see where it went, but in a second I felt it land on my belly. It was the most intense orgasm I have ever had. The girls squealed as I came.",
        "\"Look at that!\" Jennifer squealed. \"It shot a foot in the air!\"\n\n\"Wow!\" was all Cindy could say.\n\nI shot another time, and another, and another. My orgasm couldn't seem to stop.\n\nFinally my cock stopped shooting cum. It just twitched. Cindy started to lightly stroke my cock. I let her as I tried to come back to reality. My heart was beating like a drum. I couldn't seem to catch my breath.\n\n\"That was SO hot,\" Jennifer cooed.\n\n\"The hottest thing I've ever seen. My husband has never cum like that!\" Cindy commented.\n\nWe all just quietly enjoyed my afterglow, Cindy still lightly stroking my shrinking cock, Jennifer, rubbing my cum all over my belly and chest.\n\nMy breathing began to return to normal. I looked at their faces. Jennifer's was flushed, still breathing heavily. Cindy looked me in the eye and brought her hand to her mouth and licked my cum off her hand. She smiled and winked.\n\n\"Can you do it again?\" Jennifer asked.\n\n\"Not without some motivation,\" I answered.\n\n\"Like what?\"\n\nI thought for a minute. \"Well, probably you girls masturbating for me.\"\n\n\"What? Oh, I could never do that. My body isn't very nice. Maybe Cindy would do it for us.\"\n\nCindy smiled, looked at me and then shook her head. \"I might do it if you do, Jennifer,\" She laughed.\n\n\"No way,\" Jennifer laughed. \"He'd only be watching you anyway. I'd feel left out.\" She winked.\n\nWe kept silent for a bit. \"Well, I guess the show is over,\" I said.\n\n\"And a dang good show it was,\" laughed Jennifer. \"I'm sure Samantha wished she had stayed.\"\n\n\"Don't you DARE tell her I did this,\" I scolded. Jennifer just smiled.\n\n\"She wouldn't believe I would do this either.\" She answered.\n\nCindy went to bathroom and got a towel and started to clean me up. I like Cindy touching me, even after cumming so hard.\n\nJennifer got up and got her purse. \"Well, thank you for an unexpected show. I don't know about you, Cindy, but I need to go to my room and masturbate,\" she laughed.\n\n\"I agree. Maybe call Stan and have some hot phone sex. He'll wonder why I'm so horny,\" she laughed.\n\nI walked them to the door. Each one took me in their arms and kissed me. Jennifer grabbed my ass. Cindy grabbed my cock. I grabbed her ass. Mmmmmm. What an ass!\n\nAs I closed the door I could hear them giggling as they walked down the hall. \"Can you believe that?\" Cindy asked. "
    ],
    "authorname": "secret_admirer72116",
    "tags": [
        "exhibitionism",
        "cfnm",
        "teacher",
        "strip"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/they-said-sure"
}
{
    "title": "The Subway Succubus",
    "pages": [
        "AUTHOR'S NOTE:\n\nThis is my entrant for the . This is very much on the 'horror' side of erotic horror. It gets a little icky near the end. You have been warned!\n\nAlex Lumley was a little taken aback when the pretty girl with red hair suddenly hopped in his lap and started grinding her hips against him.\n\nHe was travelling on the last subway from the airport. It was late and the only other person in the carriage was an old woman in a shawl with a quilt wrapped around her legs. \n\nAlex was travelling alone. Because of work he'd been unable to catch the same flight as the others. The evening flight had been delayed and he'd almost missed the last train. He could have booked a taxi, or an Uber, but money was tight for Alex and he tried to be careful wherever possible. The underground was a tenth of the price of a taxi and their hotel was right next to one of the stops. Alex liked using public transport when visiting foreign cities. It felt more... authentic.\n\nMaybe a little too authentic. While the inside of the carriage was clean and bright, it had clearly been in service for some time with a limited budget for maintenance. The fluorescent tubes flickered overhead and it was both a noisy and bumpy ride. The train groaned rather than whispered through the tunnels.\n\nThe girl with red hair entered from the previous carriage just after Alex had taken a seat. She was quite a looker. Her tight black jeans and tight black top hinted at appealing curves beneath. An impish face with mischievous big brown eyes beneath a shock of dyed-red hair spoke of a rebellious nature, further reinforced by a short-cut black leather jacket.\n\nDespite the carriage being unoccupied aside from Alex and the old woman, and with plenty of seats free, the woman chose to hang on the rail right in front of Alex, as close as if the carriage was packed.\n\nA little too close, Alex thought. He had taken a seat near the door, so maybe hers was the next stop. It did give him a chance to glance up and take in the pleasing contours of her body and face. He didn't stare too long. It was late and he didn't want her to worry he was some kind of creeper.\n\nIt turned out his fears should have been the other way around. The girl was the creeper-type here.\n\nA few minutes after standing right in front of Alex, she grabbed the bar above her head with both hands, lifted her legs up off the floor and smoothly plopped herself down in Alex's lap with her knees straddling him on the seat.\n\nAlex was so taken aback he didn't know what to do. He leant back with his arms up, trying his best not to touch her.\n\nThe girl didn't say anything. Her big brown eyes twinkled and she smiled mischievously. Then she started rocking her hips against him in a way that was aggressively suggestive.\n\nWhat the? Why was she doing this? Had she mistaken him for someone else? Was she drunk? Was she high? Was this one of those viral social media pranks?\n\nThe latter seemed the most likely. And even though Alex, who was currently single, would have normally enjoyed an attractive young woman gyrating in his lap, this was altogether too sudden, unexpected and brazen.\n\nHe twisted his body and carefully tipped her to the side and onto the seat next to him. Then he scooted back to the clear plastic divider at the end of the row.\n\nThe girl righted herself and sat on the seat as if nothing in the slightest untoward had just happened. She looked right in front of her and acted as if she'd been sitting like that the whole time. In contrast, Alex was sprawled up against the plastic barrier and watching her warily.\n\nThen, with a mysterious smile only to herself, the girl got up and quietly walked to the door to the next carriage, leaving behind a very confused and bemused Alex.\n\n* * * *\n\n\"Welcome to Eastern Europe,\" Brian laughed as Alex recounted the story the next day.\n\nThe four of them\u2014Alex, Brian, Gage and Nevill\u2014were sitting in a small bar opposite their cheap hotel. They were tucking into plates piled high with sausages, bacon and other meats, while enjoying the first beer of the day.\n\n\"You should have asked her for her number,\" Gage said.\n\n\"I was too shocked,\" Alex said. \"When she jumped in my lap I didn't have a clue what to do.\"\n\n\"It was sexual harassment,\" Nevill said.\n\nThe rest of the table collectively rolled their eyes.\n\n\"I mean, think about what she did,\" Nevill continued. \"She jumped in your lap and ground her body against your genitals. That has to be sexual harassment. Just imagine if the positions were reversed. You'd be metoo-ed out of existence.\"\n\n\"Yeah, but...\"\n\n\"What did you feel\u2014awkward, embarrassed. You said you didn't know how to react.\"\n\n\"Well...\"\n\n\"There you go\u2014sexual harassment. If it's sexual harassment when we do it to them, then it's sexual harassment when they do it to us,\" Nevill insisted.\n\nNevill's belligerence was annoying but understandable given recent events. When they'd originally booked this holiday some nine months ago it was supposed to be his stag weekend. Unfortunately, The Thing had happened since then. Nobody quite knew what The Thing was. Only that the marriage was off and Nevill's relationship was very very dead for reasons nobody quite understood and were too afraid to ask. Now it was just four lads spending a long weekend in a foreign city with cheap beer prices.\n\n\"If a pretty young woman wants to jump in my lap I'm not going to complain,\" Gage said. \"She can sexually harass me all she likes,\" he added with a ribald laugh.\n\n\"That's where it's all wrong,\" Nevill said. \"Just because she's good-looking shouldn't give her a pass. It's still sexual harassment. The man might not be interested. What if he's already got a girlfriend? A wife?\"\n\n\"I wouldn't like it,\" Brian admitted. \"It would make me feel uncomfortable.\"\n\nWith Nevill no longer getting married, that left Brian as the only one among them currently in a relationship. He'd gotten married last July and his wife already had a child on the way.\n\n\"Did it make you feel uncomfortable?\" Nevill asked Alex.\n\n\"A little, but...\"\n\n\"There you go. Sexual harassment,\" Nevill said.\n\nAlex pulled a face. \"It's not the same.\"\n\nSure, he'd felt mildly uncomfortable, but that was it. If it hadn't been for this conversation, he doubted he would have paid it any more mind.\n\nWell, aside from wondering what might have been if he'd asked her for her number.\n\nNevill was like a dog with a chew toy. He wasn't going to let it go.\n\n\"She made unwanted sexual advances. Now imagine what the consequences would have been had the positions been reversed and it had been you pinching her on the bum. She could press charges. She could have you locked up.\"\n\n\"Yeah, but there's a power differential,\" Alex said. \"I can laugh it off. A woman has to worry about the twat going violent on her.\"\n\nIt really wasn't anything to Alex\u2014just something amusing that had happened to him on the way from the airport. He didn't know why Nevill was making such a big deal of it. Brian and Gage had warned him that Nevill was behaving a little erratically. Maybe The Thing had affected Nevill worse than they'd thought.\n\n\"What if she'd been ugly? What if she'd been fifty pounds heavier than you?\" Nevill kept on.\n\n\"Then it would be different,\" Alex replied.\n\n\"Exactly,\" Nevill said. \"That's why it's sexual harassment.\"\n\n'But she wasn't', was what Alex was going to say, but he could see there was no point. Nevill was a dog with a chew toy and no amount of pulling would get it out of his mouth.\n\nBrian saw it too, and looked to move the conversation on by paying the bill and suggesting they head to the next bar.\n\nGage, who was the biggest and most physically imposing of the four, with a bullet-shaped bald head, got up and grabbed his jacket. \"Come on. We need to get some drinks in Alex to help him get over his recent 'traumatic' experience.\"\n\nHe bumped Alex on the way out.\n\n\"Get her number next time,\" he said with a wink.\n\nIt was probably just a prank or social media stunt, Alex thought. He supposed it wouldn't have hurt to ask. Maybe next time. Ha, right. It wasn't like he was ever going to see her again.\n\n* * * *\n\nAlex was proved wrong on that, as he saw the woman again two nights later. They were on another subway train, this time returning to the hotel after a night spent checking out the strip clubs of Mustek Square. It was late and the carriage was empty aside from them and an old man in a flat cap. The old man had the perpetually ruddy complexion of a long-term alcoholic and was hunched up in the corner as if he hoped no one would notice him.\n\nThen the woman entered from the next carriage.\n\n* * * *\n\nGage saw the woman with red hair enter the carriage. Sort of. The crazy lights kept flickering on and off, so he didn't actually see her walk through the door at the end. She just sort of appeared. She was wearing tight black jeans, a tight black top and a black leather jacket cut short to just above her midriff. Her most distinctive feature was a shock of dyed-red hair.\n\nHe remembered Alex's story from a couple of days ago. Could this be the same girl?\n\nHe looked over to where Alex was sitting with Brian. They were spread out. Partly because there was plenty of room and partly because they'd had enough of Nevill's shit tonight.\n\nIt was difficult. Nevill was a friend. This weekend was supposed to be for his benefit. Originally, it was meant to be his stag do. Then The Thing had happened and they'd repurposed it as a pick-me-up weekend. The lads having boozy fun in a foreign city.\n\nBut by god was Nevill making it difficult with his general bitchiness and whining. Gage had wanted to strangle the twat on multiple occasions.\n\nOriginally, it was supposed to be a 'clean' weekend. Plenty of booze, but no strippers or hookers or anything like that. They didn't want to get Nevill into trouble with his girlfriend.\n\nWell, no need to worry about that now.\n\nThey'd thought a trip to a strip club would mellow Nevill out a bit, stop him acting like a cunt.\n\nIt hadn't.\n\nIf anything, it had made things worse.\n\nThe strip club itself, Silverfingers, was top quality. Nevill had moaned about them all being tourist traps on this street, but Gage had been given the knowledge and knew better. A mate of his had travelled out on a lad's weekend a couple of months previous and told him this place was top-notch. And it was. The minge was quality. Even classy once you took into account the regular stage shows and costume changes. Gage had got himself a lapdance with a lively little blonde hussy and thoroughly enjoyed it. They'd all chipped in to get one for Nevill as well... and that might have been a mistake.\n\nSeeing all that gorgeous semi-naked flesh and having an energetic little hussy squirm away in his lap had maybe turned Nevill on a little too much. On leaving, he'd suggested they go somewhere where you could 'take things further'. He had fliers for places that catered to that.\n\nThe others were understandably less keen. Watching naked hot totty gyrate around a pole\u2014or even squirm away in your fully-clothed lap\u2014was still relatively good clean fun. Going further\u2014sticking your dick in a hooker\u2014was not. It was a bit sad and sleazy in Gage's opinion.\n\nPlus, as Gage and Alex pointed out, Brian was married with a kid on the way.\n\n'She'd never know,' Nevill retorted.\n\nWhoa boy, it had taken most of Gage's self-control to not give Nevill a good slap there. Yeah, The Thing was shitty and everyone felt sorry for Nevill, but that was bang out of order.\n\nInstead he'd offered to pay for Nevill's taxi. If Nevill wanted to get his end away, he could fuck off and do it and meet up with them later back at the hotel.\n\nTo which Nevill had moaned about not wanting to go alone.\n\nFucking pathetic.\n\nThe others had decided to leave him to sulk, and so they'd ended up sitting apart in the train carriage.\n\nGage watched the girl walk down the centre of the carriage. She looked pretty fine, to be fair, if a little chaotic. There were plenty of seats, but she didn't seem interested in taking any of them.\n\nGage caught Alex's eye and mouthed, \"Is that her?\"\n\nAlex nodded in reply.\n\nWell, well, Gage thought.\n\n* * * *\n\nIt was the same girl, Alex was sure of it. She had that same strange ethereal look, with her lips turned up in an enigmatic smile, as if she wasn't quite all there.\n\nAgain, she chose to stand, despite there being plenty of empty seats. And, as on the night Alex had been travelling from the airport, she chose to stand very close to someone sitting down, in this case Nevill.\n\nBrian shot a concerned glance to Alex. Alex knew exactly what he was concerned about. Nevill had been combustible all evening. They'd had to leave one place early after he'd been so vile to a waitress they'd been worried the bouncers, massive shaven-headed fuckers, were going to intervene. Given his current unpredictable mood swings, they had no idea how he'd react if the girl tried to prank him like she'd done to Alex.\n\nThey were not the only ones.\n\n* * * *\n\nGage glanced sideways. The girl had stopped and was leaning over Nevill. Nevill had been too much in his own personal funk to notice her at first, but that changed. He lifted his head as her shadow fell across him.\n\nUh oh, Gage thought.\n\nGiven how much of a complete prat Nevill had been already tonight, this might get messy.\n\nGage switched his weight to his feet just in case he had to get up and intervene.\n\nIt would mean giving Nevill a slap, and given how much of a twat he'd been all night, Gage wasn't exactly averse to that prospect.\n\n* * * *\n\nAlex and Brian watched on with concern. No one knew how Nevill would react. He might, as Alex had done, gently tip her off to the side in bemused embarrassment. Or, he might shove her off so hard she banged her head. Or punch her. Or go in the opposite direction, misread it as a sexual advance, and pull her close for a good grope and snog.\n\nAnd if it was a prank, if there was a camera hidden somewhere, all of those other options were very bad indeed. It would likely go viral and result in the world getting more of a look at Nevill than Nevill would really like.\n\nThe train bumped around a bend. Wheels squealed and rattled. The lights flickered on and off. Nevill looked up at her, his expression unreadable.\n\nThe girl moved away.\n\nEvidently, the girl had seen something in Nevill that would make him a poor target. A good read, Alex thought.\n\n* * * *\n\nGage watched the girl turn away from Nevill.\n\nThe good news was it meant he wouldn't have to give Nevill a slap.\n\nThe bad news was it meant he wouldn't have to give Nevill a slap.\n\nThe really good news was that the girl reached Gage and decided to stop there.\n\nAllo, allo, he thought.\n\n* * * *\n\nThe girl moved on only as far as Gage. He was an equally inviting target. He was sitting on his own with his legs apart and his long arms stretched along the back of the seat.\n\nGage turned to Alex and Brian and flashed them a wink. Then he went back to admiring the figure of the young woman leaning over him.\n\nNevill's face was all sullen thunder as he glanced across. He was going to be unbearable when they got back and for most of tomorrow, Alex thought.\n\n* * * *\n\nWell, ain't you a pretty little bundle of hotness, Gage thought as he looked up at the girl.\n\nHer black jeans clung tightly to her lithe legs and the swell of her hips and ass. Her black top was equally tight and accentuated her larger than average bust. She wore a short leather jacket over the top. It was cut off just above her midriff. Her face was heart-shaped and smouldered with sexuality. Her brown eyes were big and bright, and her supple lips were curled up in a sultry smirk.\n\nFrom Alex's description he expected her to look high or drunk, but saw no evidence of that in her face. Her dyed-red hair was pretty wild, but it looked as if it was styled that way through choice rather than neglect. It was very retro '80s glam.\n\nNow then, Gage thought.\n\n* * * *\n\n\"She's going to,\" Brian said.\n\n\"Yep,\" Alex said.\n\nAfter looking her over, Gage studiously pretended she wasn't there. He just sat, sprawled casually in the seat, his lap an inviting target.\n\nIt was coming, Alex thought.\n\nBrian fumbled in his pocket on the seat next to Alex.\n\n\"Have to record this,\" he said as he pulled out his smartphone.\n\nThe lights flickered.\n\nThe girl lifted herself up on the bar, opened her legs, and then smoothly plopped herself down in Gage's lap.\n\n* * * *\n\nGage had already decided what he'd do if the girl did decide to jump in his lap, and that was... nothing.\n\nWhich was exactly what he did when she grabbed the bar, lifted herself up and dropped down in Gage's lap. She straddled him and immediately started rubbing her crotch against him in a suggestive manner.\n\nHe had thought about grabbing her ass and pulling her in tighter. Or maybe her tits. Fair's fair and all that.\n\nThen he thought about how it would go down if it was just a prank with a hidden camera. Him giving her melons a good feel would be splashed all over the internet. He'd look a prize prat.\n\nSo, he just smiled at her and sat casually with his arms stretched across the back of the seats. Hey, free lapdance, he thought.\n\n* * * *\n\nBrian and Alex watched the girl writhe away in Gage's lap.\n\n\"If she's trying to embarrass someone, she couldn't have picked a worse target than Gage,\" Brian chuckled while filming it on his smartphone.\n\nGage glanced over and gave them a wink and a smile.\n\nOf course Gage would just roll with it, Alex thought. He was kicking himself for not doing the same when he'd had the chance.\n\n* * * *\n\nThis was fun, Gage thought.\n\nHe gave a smile and wink to Alex and Brian, who smiled back, and to Nevill, who didn't.\n\nServes you right for being a cunt all evening, Gage thought.\n\nHe turned his attentions back to the girl in his lap. She was really giving it a good squirm\u2014rolling her hips, pushing her tits out and pouting her lips for all she was worth.\n\nGage felt chuffed to receive a second lapdance of the night, and a free one at that. The girl might be fully clothed, but the contours revealed by her tight figure-hugging top hinted at an even better bod than the girl that had so enthusiastically writhed in his lap back at Silverfingers. And that girl had been a complete knockout.\n\nHe was curious to see just how far she'd go to get a reaction.\n\nFar enough to surprise him with a full passionate kiss on the lips.\n\n* * * *\n\nBrian started slapping Alex excitedly on the arm as the girl leaned forwards and started passionately kissing Gage. It was a proper snogging as well, like two teens at a party that were too horny to give a damn who was watching. Or rather, one really horny girl. Gage was still trying to play it cool.\n\n\"Ooh ooh,\" Brian said as Gage's arms left the back of the seat and slowly moved around to wrap around her.\n\nThey didn't go all the way. Gage stopped just before fully embracing her. His hands hovered awkwardly.\n\n\"Nearly,\" Brian laughed.\n\nAlex glanced over at Nevill.\n\nWhoa boy, did he look pissed. His bottom lip jutted out in a whiny pout.\n\nWelcome to the what-might-have-been club, Alex thought. Maybe she'd end up picking Gage's pocket and Alex would feel better about himself, but right now he was really regretting being hasty in throwing her off two nights ago.\n\n* * * *\n\nFuck me, this girl knew how to snog, Gage thought. It had caught him by surprise. He'd been thinking of this as like a lapdance and lapdancers didn't kiss.\n\nAnd boy could she kiss. Tongue and all. It reminded Gage of that little hussy he'd made out with behind the bus station when he'd been back in his teens. He couldn't remember her name. Gemma or something like this. She could snog your face right off. Mouth like a hoover. Gave a wicked blowjob. But she also had a fondness for cake that had caused her figure to balloon.",
        "For a brief moment Gage forget where he was and was on the verge of wrapping his arms around her.\n\nAh ah, you don't get me that easily, he thought.\n\nHe did respond to her kiss. While he did think this was probably a prank or scam, he didn't want her to think he was a wet fish if it wasn't.\n\nThe girl finished the kiss and leant backwards. She stared right into his eyes as she shrugged off her jacket and tossed it onto the seat next to her.\n\nGage could taste the aftertaste of her kiss on his lips. Strangely sweet, as if she'd recently drunk a strawberry slushie. His hands still hovered, reluctant to commit to holding her.\n\n\"I want your dick inside me,\" she growled, her heavily accented voice low and husky.\n\nAre we going there? Gage thought.\n\nFuck it, we're going there.\n\n\"My hotel is three stops away,\" he said to her.\n\nHe glanced sideways at Nevill.\n\nSorry sunshine, you're sleeping on Brian and Alex's floor tonight.\n\nThe girl continued to stare at him with smouldering eyes. Gage's burgeoning erection was squashed beneath her as she shamelessly started to dry-hump him on the subway seat. Gage finally let his hands settle on her shapely ass and give it a good squeeze.\n\n* * * *\n\n\"She doesn't waste any time,\" Brian chuckled.\n\n\"Neither does Gage,\" Alex said.\n\nThey were properly making out now. The girl was even dry-humping him in full view of the rest of the carriage.\n\nAlex's regret grew.\n\n\"What are we going to do about him,\" Brian whispered, nodding at Nevill.\n\nNevill was still watching on with a petulant frown on his lips.\n\n\"If Gage has scored, he'll have to spend the night in our room.\"\n\nAlex pulled a face.\n\n\"I'd rather spend it drinking downstairs in the bar,\" he said.\n\n* * * *\n\nGage was also thinking about Nevill. Well, in between the moments she pressed down just right and his erection twitched in delight.\n\nOkay Nevill, sunshine, he thought. We're going to make a deal.\n\nIf this little firecracker is up for it, truly up for it, she's coming back to my room and you're in with Brian and Alex for the night.\n\nIf she wasn't. If this is all a big tease that ends up leaving me frustrated and wanting to explode, we'll do what you wanted to do earlier. You and I will take a taxi to one of those knocking shops and we'll bang a pair of hot Eastern European tarts.\n\nGage was normally against paying for it on principle. But between all the gorgeous flesh on view at Silverfingers, the lively young hussy who'd given him a lapdance and this new hussy currently squirming away in his lap, he was massively aroused right now.\n\nSo, how does that sound, old chum?\n\nThe Nevill in his head didn't answer, because it was just a Nevill in his head rather than the real thing.\n\nNot that it mattered, because Gage was going to do what he wanted anyway.\n\nHe got back to appreciating the hot girl writhing in his lap. Her hands were at the bottom of her top and she was slowly, teasingly hiking it up. Gage got a flash of the underside of boob.\n\nSurely she wasn't going to go topless, here, he thought.\n\nHis thoughts were interrupted by a warm, wet, soaking sensation in his lap.\n\nAw fuck, was she pissing herself? Pissing all over him?\n\nThen the awful sinking feeling that if she was crazy, or high, enough to jump in a stranger's lap and start gyrating away like a sexually frustrated stripper, on a public train, then yeah, she was probably crazy enough to piss all over him.\n\nGage looked down. Aw crap. She was pissing herself. It was pouring out onto his lap.\n\nHis first instinct was to throw the disgusting skank off him.\n\nHe couldn't move. His body refused to respond. His head felt fuzzy, like someone had lined the inside of his skull with cotton wool. It felt slightly dreamlike, as if he'd dozed off on the underground.\n\nWhat he was seeing was fairly dreamlike. She wasn't so much pissing as gushing. It was bubbling out of her crotch like someone had run a hosepipe up her trousers. It didn't look like piss, being clear like water. Didn't smell like piss either. Smelt like something else\u2014sex.\n\nWhatever it was, it also seemed caustic. It ate through the crotch of her jeans. The black fibres dissolved and vanished to expose her gushing pink sex.\n\nIt ate through the crotch of Gage's pants as well. The bubbling fluids soaked in and then the threads of his trousers and underpants beneath unravelled and shrivelled away. It didn't have the same effect on flesh, thankfully. When she gushed all over his exposed genitals it felt no worse than dipping them in warm bathwater.\n\nIt had to be a dream, but everything else seemed so real. He could hear the clackity-clack of the wheels of the train. The harsh fluorescent lights continued to buzz and flicker. Her weight in his lap felt all too real and tangible.\n\nAnd yet he couldn't move.\n\nThe girl looked down as his erection rose up out of the ruins of his trousers. Her eyes gleamed hungrily and she ran her tongue around her supple lips.\n\n\"Yesss,\" she hissed. \"Time to put you inside me.\"\n\nShe lowered her hips. The labia of her exposed vagina parted around the swollen head of Gage's cock and then he was sliding up inside her tight wet warmth.\n\n\"Yes,\" she sighed.\n\nGage's mouth dropped open in pleasant surprise as her delicious pussy clenched around him. Fuck, she felt incredible inside. Really tight and juicy.\n\nThe girl placed hands on his shoulders and started smoothly bouncing up and down. The fleshy walls of her sex smoothly stroked up and down Gage's cock.\n\nFuck. This had to be a dream. She couldn't be fucking him, in the carriage, in front of everyone. Could she?\n\nFuck it, might as well roll with it, he thought.\n\n* * * *\n\nAlex watched the girl bounce up and down in Gage's lap. Her moans of pleasure were shamelessly loud.\n\n\"Is he...? Are they...?\" he said.\n\nBrian was still excitedly filming it on his smartphone.\n\n\"Nah, they couldn't,\" Brian said. \"Gage's an animal, but he's not that much of an animal. I didn't see her get his dick out. Did you?\"\n\nAlex hadn't. He was pretty sure her hands hadn't gone anywhere near Gage's fly. But... it looked pretty convincing.\n\nHe glanced over at Nevill.\n\n\"Are they?\" he mouthed. He pointed over at Gage and the girl bouncing up and down in his lap. He formed a circle with his thumb and forefinger and ran a finger back and forth through it.\n\nNevill was sitting on the same side of the carriage. He might be able to get a better look. He peered through the clear plastic divider. He got up and moved his head to try and see better.\n\nHe turned back to Alex and shrugged.\n\nCrouching crablike, Nevill looked as if he was thinking about moving closer, but instead scuttled over to Brian and Alex.\n\n\"Can't see,\" he said.\n\n\"She must be simulating,\" Alex said. \"They can't actually be... doing it.\"\n\nGage's head tipped back against the seat. Eyes closed, he let out a very loud and obvious groan of orgasmic climax.\n\n* * * *\n\nOh fuck. Oh fuck. Oh fuck.\n\nHer pussy was incredible, Gage thought. Tight and muscular. Very muscular. As she bounced up and down in his lap, he felt the cushioned walls grip and squeeze him. Watching all that hot totty in Silverfingers had already got his juices flowing. It didn't take many strokes of her luscious tight pussy to tip him over the edge into an explosive orgasm.\n\nHe didn't care where he was. In the moment, it didn't matter. He tipped his head back and let out a loud groan as his cock throbbed and blasted a massive load of cum up inside her.\n\nOh fuck, that was so satisfying.\n\nThe embarrassment came right after.\n\nOh fuck, wasn't he sitting in a subway carriage with the lads?\n\nHe stared at the gorgeous girl with the tightest, most luxurious pussy he'd ever felt sitting in his lap.\n\nFuck it.\n\nThe girl was completely into it as well. She grabbed the bottom of her top and started to lift it up over her head.\n\nThe carriage lights binked and flickered like crazy.\n\nThe skin revealed beneath was deep red in colour\u2014\n\nGage blinked. The lights stopped flickering.\n\n\u2014was creamy pink and pale. With as nice a pair of breasts as Gage had seen, and he'd seen plenty of gorgeous titties already tonight. His suspicions were correct. She was hiding an incredible bod underneath that top.\n\nShe was topless... on a public train.\n\nYeah and she'd already fucked Gage to the point he'd deposited a massive load inside her. Her being topless seemed pretty minor at this point.\n\nShe hunched up over Gage and tipped her head forwards. Her eyes glimmered with lustful hungers and her smile was vulpine.\n\n\"Delicious,\" she said.\n\nSo fucking high, Gage thought.\n\n\"I must have more,\" she said.\n\nShe wound her arms loosely around Gage's neck and shoulders and went back to bouncing away in his lap.\n\nAnd so fucking incredible.\n\nOh fuck, that pussy. That delicious, juicy pussy. That squeezing, sucking pussy. What was she doing down there? Even though he'd come only moments before, his cock was back to hard and throbbing. The soft walls kept squeezing and stroking. Her pussy was driving his cock crazy.\n\nThis had to be a dream.\n\nHer hips bounced, rocked, gyrated. Gage's cock slipped back and forth, and every which way up and down her luscious pussy. The walls kept squeezing him with rhythmic clenches.\n\nOh fuck, he was going to come again.\n\n* * * *\n\nAlex and the others let out nervous giggles as Gage tipped his head back and let out another loud and completely shameless orgasmic moan.\n\n\"It's a live fucking sex show,\" Brian said. \"The mad fucking bastard is giving us a live sex show.\"\n\n\"Hey, let's not,\" Nevill said, sticking out a hand to block Brian's camera. \"A laugh's a laugh, but there shouldn't be vids of this.\"\n\n\"It's Gage,\" Brian said, as if that was explanation enough.\n\nHe put the phone down anyway.\n\nThe three of them watched the girl ride Gage. They were the only audience. The old man in the corner had turned away and was busily pretending there was nothing to see here.\n\nThe lights above them flickered and buzzed madly. It was as if the energy of the two people having sex was somehow being transmitted to and overloading them. For a brief moment they flickered out completely.\n\nAlex's vision shifted. He got the impression of something else sitting in Gage's lap. Something with horns. Something not human.\n\nThe lights binked back on and it was just the girl, topless now, having sex with Gage in full view of the whole carriage.\n\n* * * *\n\nFuck, a proper double-barreller, Gage thought. He hadn't had one of those since he'd been a teen. A very horny teen. That had properly emptied his balls.\n\n\"More,\" the girl whispered at him with a sultry rasp.\n\nGoddammit, lass. I'm not bottomless.\n\nShe kept grinding away at him. Her hips had less bounce to them now, so Gage wondered if she was finally getting tired.\n\nYou don't have to have it all right now, Gage thought. We can have the whole night up in my room. Ooh\u2014\n\nHer hips might have slowed down, but her vagina made up for it. It narrowed still further, forming a snug fit around Gage's cock. Tight enough to keep him hard and eager.\n\nThe lights flickered and briefly plunged into darkness. Gage's eyesight flickered with it. For a brief moment he thought he saw something else in his lap. Something that was not human.\n\nTight enough to keep him trapped.\n\n\"Give me more,\" the woman said.\n\nShe was optimistic. A triple-barreller? Not even horny teen Gage could manage that.\n\nBut that was with a normal woman. This girl was not.\n\nThe girl chuckled darkly. Her belly popped and flexed sinuously as internal muscles gripped and worked on Gage's cock.\n\nSomething happened inside her. Her vagina clamped around the base of his cock and a muscular contraction rolled up his shaft. A chamber opened up within her and pulled on Gage's cock with a strong vacuum force. He felt it on the end of his shaft. He felt it down the shaft. He felt it in his balls. It was a powerful tugging suck.\n\nGage felt himself sinking back, sinking into the chair. His toes twitched. His whole nervous system thrummed like vibrating piano wires. After his big double-barrelled pop there couldn't be anything left. That had to have emptied his balls.\n\nThe girl's unnatural pussy would not be denied. It kept throbbing and sucking. He was caught, suspended beneath her, his whole body trembling in delicious resistance. He couldn't hold out. Her pussy sucked. And sucked. And sucked. And finally Gage's resistance broke. He let out a strangled moan and emptied a third load into her.\n\nThis one kept going. Her vagina continued to throb around him, working like some indefatigable organic pump. That's what it was doing\u2014pumping the cum right out of his balls.\n\nThe girl leant forward and lasciviously licked his face. Her tongue felt unnaturally hot and long.\n\nGage couldn't stop. Her belly flexed and popped and Gage kept spurting cum inside her like a broken tap.\n\nCum... and maybe something else.\n\nGage felt that unnatural tugging suction stretch beyond his balls and into his abdomen.\n\nWhat was happening? What was she doing to him? It felt so good, but also so draining. His orgasm kept going. He couldn't stop it. He couldn't even move his body.\n\nHe felt the vacuum suction reach up into his chest.\n\nUnable to move or stop, he glanced over to the others with wide, fearful eyes.\n\n* * * *\n\nWhat was happening?\n\nAlex saw Gage tip his head back and moan in orgasm. For a third time. A third time! His body trembled uncontrollably beneath the girl. He glanced over at Alex with wide frightened eyes.\n\nThe lights flickered and buzzed. They went off, briefly plunging the carriage into complete darkness. They came back on... but wrong.\n\nThe lights were dim and red, the colour of dying embers.\n\nThe thing writhing in Gage's lap still resembled a beautiful woman. To Alex that was maybe the worst part. She still looked sexy. Even with the black bat wings unfurling from her back. Even with the whiplike tail swishing behind her. Even with the horns rising up out of her red hair. Even with the blood-red skin marbled with black veins. Her figure was still incredible, better than any other girl they'd seen tonight, but so much better it crossed over the boundary between sexy and alien.\n\nShe rode Gage with wild abandon. She thrust her naked breasts out. She tipped her head back and let out a loud gasp of erotic delight. Gage, normally a bald-headed dynamo of a man, slouched meekly beneath her. His wide eyes met theirs and pleaded with them to do something.\n\nNevill went to stand up.\n\nThe devil woman turned her head. Her eyes were as black as pitch.\n\n\"Sit down!\" she hissed.\n\nNevill collapsed on his ass on the floor and stayed there. Alex and Brian didn't move. They couldn't. All they could do was watch. Watch as...\n\n* * * *\n\nGage couldn't stop. Her demonic vagina kept pumping and pumping, and Gage's ejaculate kept flowing into her. Her sex had become an irresistible sucking maw. She'd already emptied his balls and had moved onto the rest of him.\n\nAnd it felt so good.\n\nThat was the bit he couldn't understand.\n\nThere was a devil woman sitting astride him. Her vagina was sucking the life out of him with great lusty gulps.\n\nAnd he didn't want it to end.\n\nOh fuck it felt so good.\n\nHe couldn't stop. He couldn't stop it. He was coming apart and the pieces were flowing up into her hungry sex. All of him was flowing into her.\n\n* * * *\n\nHe was melting. Dear fucking God, Gage was melting.\n\nAlex watched it all with horror.\n\nAt first it looked like sweat, and then it got heavier, as if Gage's flesh had become melting wax. Beneath his T-shirt, his stomach rippled unnaturally and gradually diminished. It looked like the substance of him was being sucked out in great liquid gulps. As if it wasn't the devil girl's sex around his cock, but her mouth, and she was slowly sucking his fluids out like a spider consuming its prey.\n\nGage was alive throughout the whole process. His eyes were open and looking around him even as his chest started to collapse, then his face, until...\n\nThe she-devil finished with two powerful slams of her hips. She tipped her head up and let out a loud, ululating howl of climax.\n\nGage's face slid down the remnants of his body, his eyes still open and blinking, like mud thrown at a wall. He let out a final blissful sigh and his eyes closed.\n\nThe succubus, for she could be nothing else, held her pose. Her large bosom moved up and down as she breathed huskily.\n\nThe lights flickered off. When they came back on, they had returned to normal brightness. There was no red tinge.\n\nThe demoness was gone. Just Gage remained, his body a puddle of flesh-coloured slurry dripping down the seat.\n\nAnother flicker of the lights and that too was gone, vanished without so much as leaving a stain behind.\n\nAlex blinked and let out a pent-up breath. Nevill stood up, stared around him and then returned to his seat on the other side of the carriage. Brian stared at his phone with a puzzled expression.\n\n\"Where's Gage?\" Alex asked.\n\nBrian turned to him. \"Who's Gage?\"\n\nAlex blinked bleary eyes. He didn't know himself.\n\nWhy'd he said that? He didn't know a Gage.\n\nHe stared at an empty row of seats. There was a sense of something being missing, but he couldn't put his finger on it. The thought slithered around in the back of his head like a silvery fish, too fleet and slippery for him to catch, and eventually disappeared to nothingness like a forgotten dream on waking.\n\nThe train reached their stop and the three men got off. Alex paused at the door and looked behind him. He had that strange little nagging feeling he'd left something behind, but like most such thoughts, it was nothing.\n\nTHE END"
    ],
    "authorname": "manyeyedhydra",
    "tags": [
        "horror",
        "succubus",
        "wet",
        "messy",
        "demon",
        "devil",
        "monster"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/the-subway-succubus"
}
{
    "title": "Nice Family Vacation Ch. 03",
    "pages": [
        "<p align=\"center\">Nice Family Vacation, Ch. 3</p>\n\nThis story contains descriptions of close family members engaged in entirely inappropriate activities that some may find either disturbing or hot. If you find family members fantasizing about or taking liberties with each other or otherwise behaving in naughty ways, then you probably should stop reading right about...now.\n\nAll characters in this story are fictional and are eighteen years or older. Any resemblance to any real person, living, dead or under the age of eighteen, is in your own dirty little mind. Sadly, some of the events portrayed in this story are not based on true events. I wish.\n\nIf you are still reading and are not offended by SILF or BILF and believe siblings behaving in very naughty ways is hot, I hope you enjoy this story.\n\nIt was still hard for me to believe, several days into our family vacation to the French Riviera, the most beautiful sight I had seen on the famous C\u00f4te d'Azur was my sister. More specifically, her breasts. If I spent 100 years in strip clubs, I doubt I'd see tits more beautiful than hers. Carefully applied Coppertone kept the skin alabaster with nipples cherry pink surrounded by a wide band of pink fading into lighter shades the further from the delicious center.\n\nIn the rose-colored light of early morning, I lay on my stomach, which helped ease the growing ache of a monstrous case of blue balls. Alyssa's perfect breasts caused that, too. After another day on a topless beach, my sister finally broke down and let me play with her titties, which was wonderful. Made out with me, too, which was about 100 times hotter than it should have been.\n\nThen, I went for her panties, and that freaked her out. Alyssa wasn't just a \"good girl\", she was very conservative, brought up in a normal, upper-middle-class family. If anything, we were intellectual to the point of nerdiness. Now that she was 18, though, she had begun expressing her sexuality for the first time. How fortunate I was to be there to witness it with my own eyes!\n\nNothing was ever more worthy of a case of blue balls.\n\nNo problem. She caught me jerking off after seeing her topless on Nice Beach, and not only did she deal with it, it must have turned her on. I never in my wildest dreams expected to have sex with her, anyways. Heck, I never expected to see her boobs! So, a little pre-breakfast wank in the bathroom would be no problem.\n\nI turned my head toward her bed, only to see her lovely emerald eyes staring at me. \"Good morning!\"\n\n\"What time it is?\" My voice croaked, unable to sound nearly as cheerful as she did.\n\n\"6:30. I couldn't sleep. How do you feel?\"\n\n\"Does honesty count?\"\n\n\"Always.\"\n\n\"My balls hurt.\" I started to explain blue balls to her, but she stopped me. \"Boules azur on the C\u00f4te d'Azur.\"\n\n\"Every one my boyfriends has complained about that, but I never really believed them. I thought it was just something you guys make up to get laid.\"\n\n\"No, I can assure you, it is very real.\"\n\n\"Want a Tylenol or something?\"\n\n\"Only one thing makes it better.\"\n\nCheerfully, she asked, \"What's that?\"\n\n\"If you must know, it's the same thing you caught me doing in the bathroom Tuesday.\"\n\n\"Oh!\" Her face turned crimson. \"That works?\"\n\n\"100%.\"\n\n\"Good thing I'm not a guy; I'd have spent half my life with blue balls.\"\n\nHmm. Intriguing as her comment was, now that she understood what I needed to do, no point in putting it off any longer, so I rolled out of bed, not even bothering to hide my morning wood bulging in my boxers.\n\nAlyssa started laughing. \"Does that happen every morning?\"\n\n\"Pretty much.\"\n\n\"I am so glad I'm not a guy!\" She was giggling like crazy at my boner. \"Well, go ahead and take care of it so we can go get breakfast. I don't want to be seen in public with you in such a state!\"\n\nSlightly annoyed at her laughter, I said, \"Since it's your fault, the least you can do is offer a helping hand.\"\n\nEyes widening, she asked, \"Would that work?\"\n\n\"It doesn't matter whose hand it is. Might even be better if you did it.\"\n\n\"Hmph!\" She stared at my cock in my boxers. \"I suppose it is my fault.\"\n\nTotally outside my control, my cock moved with a life of its own. \"There's a bottle of lotion in the bathroom. Might be fun to try it.\"\n\n\"You're a freak.\"\n\n\"You enjoyed when I played with your boobs last night; think this will be any different?\"\n\n\"That did feel nice. Is that what caused your...current condition?\"\n\n\"Yes.\" Perhaps an oversimplification, because I awakened in such a state, as she put it, probably 3 days out of 4 at home, alone, without playing with her tits.\n\n\"Okay. But only this once.\"\n\nOne more handjob than I ever expected from my sister. France is a great country. \"I'll get the lotion. It will...\"\n\n\"I can imagine what it will do,\" she said, sitting up on her bed and propping pillows behind her. I handed her the lotion and sat down beside her. \"Do you do it with your underwear on?\"\n\n\"Oh.\" Tossing my boxers onto my own bed a few feet away, I sat naked beside my sister with my rock-hard erection pointing at the ceiling. Her eyes bulged, making me wonder if seeing a hard-on was as rare for her as sitting naked on my sister's bed was for me.\n\n\"I'm probably not very good at this.\"\n\n\"Don't worry--if you need any tips, I will let you know.\" She's going to be fucking amazing at this!\n\nShe rubbed a handful of freezing cold lotion over me, covering my dick like she covered her breasts with Coppertone at the beach. A slight sensation of disassociation hit, and it felt like a dream or watching a movie, although the feel of her hand on my cock felt very real.\n\nTry as I might to act cool, the moment her fingers closed around me, I let out a deep sigh, well beyond my control. Her fingers were so tiny and thin and soft, and felt a million times better than my own hand.\n\n\"How's this?\"\n\n\"Uh-uh-uh,\" is all that came out.\n\n\"Tell me what to do.\"\n\n\"You're doing it!\" Her hand stroked slower than my own would have, but I was in no hurry. Our parents never came to get us before 8, so she could pump my rod for an hour and a half, for all I cared. And the French make some damn fine lotion! It smelled of Lavender and was remarkably smooth. I made a mental note to stick the bottle in my bag when we left. If nothing else, for the memories.\n\nInside the thin fabric of the pajama top she wore, her boobs were starting to sway with the rhythm she took, and that made for an incredible sight. I watched as long as I could, but when I could not take any more, I reached over and grabbed one. In my state, I grabbed it rougher than I had the night before, but she didn't seem to enjoy it any less, her eyelids fluttering as I squeezed.\n\nI tugged up her shirt to expose her boobs and kept pulling until she let go of my penis.\n\n\"Freak!\" But, she lifted her hands to let me get her top off then immediately resumed stroking my rod.\n\nI didn't say anything because she had rendered me speechless. Her arm leaning across her to reach my cock pushed her boob in, pushing them together, and each stroke shook them subtly in the most enthralling sight I had ever seen. Well, her hand moving up and down on my cock may have been. Let's call the visual impact even.\n\n\"Do you ever use both hands?\"\n\n\"Mn-mm,\" I groaned, imagining.\n\n\"Can I try using both hands? Is that okay?\"\n\nGiving her a side-glance, I nodded. \"Better than okay.\"\n\nHoly hell! No one had ever given me a 2-handed hand-job, and it was off the charts! Her shoulder leaned against my shoulder now, her boobs bouncing, both arms pushing them together. Moving even slower now, one hand caressing each side, fingertips meeting in the center and rubbing right down the root, it felt better than sex.\n\nEnticing boobs swaying with the motion, with her face inches from mine and her emerald eyes staring into mine, I could not control my impulse to shove my tongue into her mouth. Opening hers to mine, her tongue welcomed mine as I reached maximum sensory overload. Not long after we started kissing, I felt an orgasm coming on.\n\nWithout releasing our kiss, I rolled and knelt over her, straddling her above her on my knees. A massive sensation welled up inside me and I knew this was not going to be an ordinary orgasm. This felt like it came from every inch of my body and soul.\n\nGasping and moaning too much to continue kissing, I knelt on all fours over her body and brought my hips over her chest. I eased her hands over her right breast, which for some reason was my favorite, and she crinkled her nose and gave me a disgusted look. \"Freak!\"\n\n\"Please!\" I begged her.\n\n\"You clean it up!\" This was going to require a lot of cleanup. When she discovered rubbing the tip on her nipple felt good, that was all it took to send me over the edge. Half her nipple disappeared under the first gush. It seemed to surprise her. \"Oh!\"\n\n\"Oh!\" I practically yelled.\n\n\"Is that good, baby?\"\n\nWhere the hell that came from, I have no idea, but if I wasn't already coming on her tit, hearing her call me \"baby\" would have done the trick. She was rubbing my pearly DNA around her nipple and I continued shooting more and more onto her. Hard as it was to keep my eyes open with this unprecedented level of pleasure coursing through and out of my body, I could not look away.\n\nIt felt like every nerve in my body was stimulated with unimaginable pleasure. Certainly more magic than any girl I dated had in their hands. A white drop trickled down the center of her boob like liquidy Coppertone, and that brought another couple of spurts out of me. Her skinny little fingers milked each drop out of me, squeezing hard like she was juicing a lemon. I had to brace my hands against the wall above her head to keep from collapsing on top of my sister.\n\nThat orgasm had so much power, it left me drained, and for a while I lay next to her trying to regain my breath and my sanity.\n\n\"Was that good?\"\n\n\"Best thing I ever felt in my life.\"\n\n\"Seriously?\"\n\n\"Honesty counts, remember?\"\n\nShe laughed, and there was that vanilla pudding shaking again, like I enjoyed so much at the beach, this time dripping with cream sauce. \"Look at the mess you made! Go get a towel to clean me up!\"\n\n\"Cleanup on aisle Cs.\" She didn't dispute the cup size as I wiped her breast clean with a washcloth and warm water, then carefully dried it with a towel. Throwing them aside, I lay on top of her and looked into her green eyes. \"Best thing I ever felt.\"\n\nThen I kissed her, and we just lay there for quite a while making out. Like lovers. Finally, she put an end to it. \"They'll be here anytime. We need to get ready for breakfast.\"\n\nOh, what a day this was shaping up to be! Sponging your own spunk off your sister's breast is a fine way to start a day. I highly recommend it.\n\nOur parents had set aside the day for museums. There were many to choose from, so in the morning we toured the Musee Franciscain, a history museum, and after a late lunch, the Matisse museum. We never noticed how we were acting like a couple, shoulders bumping against each other while we looked at the exhibits, gawking and giggling at the nude paintings.\n\nWhat it felt like was the best date of my life. That may be slightly unfair to my girlfriends, because rarely did they launch a date with a handjob. Its too bad more women don't know about that strategy.\n\nWe had dinner and wine at a lovely cafe overlooking the Mediterranean, and never once let slip any mention about our inappropriate activities. Our mood was contagious, though, and our parents were having a great time, as well.\n\nJust before we left, Alyssa spilled red wine on her shirt. Wearing the conservative, preppy clothes she had on, it was hard to tell for sure, but it looked like it landed about where my jism had run down her breast 12 hours before. I grabbed a napkin and reached before I caught myself and handed it to her, and tried not to stare too much as she dabbed herself.\n\nOur folks didn't seem to catch my near-error. Mom asked, \"Are you young people going out tonight?\"\n\n\"I don't know. Look at me! I need to change if we do.\"\n\n\"Well, we're probably going to call it a day,\" our father said. \"Let's go back to the hotel together, then you can decide from there.\"\n\nAlyssa went into our room to change, and after giving her enough time, I excused myself to go to the bathroom. In the room, my sister was standing in her bra and panties holding up two tops. \"Which do you like better?\"\n\nQuickly shutting the door so my parents would not see me talking to her while half-naked like that, I answered, \"I like what you have on.\"\n\n\"Cute. I'm talking about going out.\"\n\n\"Where do you want to go?\"\n\n\"Drinking, dancing. Maybe a moonlight walk along the shore.\" I pointed to the cute green top in one hand that matched her eyes. \"I knew you'd pick this one.\"\n\n\"Why?\"\n\n\"Because I can't wear a bra with it--not with those little straps. Pervert!\"\n\n\"Admit it--that's the one you wanted to wear.\"\n\n\"No it isn't.\"\n\n\"Admit it--it is!\"\n\nAlyssa is terribly ticklish, and she was backing away from me as if she could read my mind. I stalked her to a corner, where she half turned, elbows pulled in to her sides and doubled over to protect herself when I started tickling.\n\nThe lower portion of her stomach around her belly-button is where she is most ticklish, her weak spot which all of us in the family have attacked since she was a little girl, but that night she seemed even more sensitive than usual, squealing and trying to escape. She got far as the bed, then fell onto it, trying to roll onto her stomach to stop me, but I held her on her side and went in for the kill, right above the elastic of her panties.\n\nNeither of us heard the door open, but we both heard it close. There stood our mother, glaring at her two children rolling around the bed, her daughter in sexy lingerie and her son on top with his hands all over her.\n\n\"What are you doing?\"\n\nAlyssa immediately stopped laughing and I stood, hoping my early-stage hard-on was not visible. \"He was tickling me...\"\n\n\"Better put some clothes on,\" she sternly said. Alyssa held up a shirt on a hanger in front of her. \"I don't know what has gotten into you, but be thankful it was me who walked in here. If your father saw you like this, he would not tolerate such behavior.\"\n\n\"Sorry,\" I muttered. \"It won't happen again.\"\n\n\"It better not. Now you get out of here while you sister gets dressed. And no more funny business--you hear me?\"\n\n\"Yes,\" we said simultaneously.\n\nWe went out and drank more wine and danced and walked along the rocky shore barefoot, the water lapping over our bare feet. Narrowly having dodged a bullet, we had obviously gone too far and agreed to behave for the rest of our vacation. It was a chilly night, and Alyssa's nipples poking against the green fabric were visible in the light of a full moon, as was the spring in her breasts with each step.\n\nBefore we went to bed, we hugged for a while standing up, and kissed a little, too, but without the insanity of the night before or that morning. Moonlight through our open window fell on Alyssa's shoulder-length blond hair. I slept with wood in my pants that night.\n\nThe next day was a long-planned day trip to Monaco, the fairytale duchy ruled by Grace Kelly until her tragic death a couple of years before. Mom and Alyssa enjoyed it more than I did. The shopping was fantastic, I guess. Pops and I hiked up to where Grace Kelly's car had plunged off the cliff, where a monument of flowers stood. Alyssa wore an Izod shirt over a firm bra and long white shorts with green and pink plaid, the most conservative thing she wore since we arrived. I got my passport stamped.\n\nAfter lunch, Alyssa took me window-shopping while our parents did the same a half-block away.\n\n\"Oh, my gosh--you aren't going to believe the conversation I just had with our mother.\"\n\n\"About what?\"\n\n\"Safe sex. She pulled me aside and asked have you and your brother been using condoms!\"\n\n\"What did you say?\"\n\n\"I told her the truth--we haven't done anything we need a condom for, and pretended to be all offended, saying you were only tickling me.\"\n\n\"I was only tickling you!\"\n\n\"That's what I told her! So she says we both know where that sort of thing will lead. And I say, Mom, he's my brother!\"\n\n\"Yikes! What did she say to that?\"\n\n\"She says, and he's also a handsome man and you are a beautiful young woman. Then she said something about forgetting that she was a sister who had a brother and knows all about how young people have all sorts of impure thoughts. Then she got all flustered and said, I just want you to be careful is all.\"\n\n\"Wow! That must have been a super creepy conversation to have with our mother!\"\n\n\"For sure! And it raised all sorts of questions I really don't want to think about.\"\n\nI let out a low whistle. \"You don't suppose...\"\n\n\"Well, everyone has always joked how much you look like Uncle Brad. And she did name you his middle name.\"\n\n\"I really don't want to think of Mom like that.\"\n\n\"Well, we are doing the same thing.\"\n\n\"Not quite the same. And Mom was married to Pop when I was conceived, so it's different.\"\n\n\"I suppose so.\" Alyssa was deep in thought. \"Do you remember when we were kids and Uncle Brad used to come visit so often?\"\n\n\"He was always there.\"\n\n\"I remember him coming to visit once while Pops was away on some business trip. Remember, she had some story about he was there to keep us safe?\"\n\n\"Yeah, that was strange, even then.\"\n\n\"And Mom said not to tell Pop that Uncle Brad stayed there because she didn't want him to worry.\"\n\n\"That was weird, too.\"\n\n\"I think they were together, which is why she's cool with us being together.\" It was the first time she referred to us as being \"together,\" and until then, I had not really thought of it that way. \"You can't really blame her--Uncle Brad is a handsome man. You do look almost exactly like him.\"\n\nFeeling my ears burning and my face turning red, I said, \"We should probably get back so we don't make Mom worry about where we are and what we are doing.\"\n\nNot 10 minutes later, Mom led me off to see something or other and when we were off by ourselves, said to me, \"We need to talk.\"\n\n\"Okay,\" I answered, worried that she was going to have the same sex talk with me she had with my sister.\n\n\"This is very awkward, so I will just get to the point. You and Alyssa need to be careful. In this day and age, you cannot be too safe.\"\n\n\"Right...\"\n\n\"I don't know what they call them here in France, but I want you to buy some condoms. I am sure you can find them at a pharmacy.\"\n\nGood question, I had to admit, although I suppose they sell Trojans here. \"Mom, Alyssa and I don't need condoms.\"\n\nShe repeated, \"In this day and age, there is no such thing as being too safe.\"\n\n\"Mom! I'm not going to give my sister VD! Even if we were doing that--which we aren't--I'm pretty sure Alyssa does not have VD.\"\n\n\"Well, with AIDS and all, you can't be too careful.\"\n\n\"Mom, neither of us has AIDS. And we were just goofing around, a tickle fight. That's all it was.\"\n\n\"That's how it starts. Look, I'm not judging you. I'd rather have you consoling your sister after her boyfriend treated her so badly than have her give herself to some Frenchman she meets here. Some stranger. Same goes for you.\"\n\n\"Don't worry, Mom--the last thing either of us are interested is picking someone up at a bar while we're here.\"\n\n\"Good. Good. I'm not stupid. Mothers know things. When the two of you went to the beach the other day, I went down to check on you, and you weren't there. I suppose you wanted to experiment with your freedom and went to a topless beach. When I was your age, I probably would have done the same thing. Just promise me you will be careful.\"\n\nAnxious for this painful conversation to be over, I promised to be careful and left it at that. The image running through my head of my mom sunbathing topless on the beach, however, may take some time to process fully.",
        "In French, condoms are called le pr\u00e9servatif. I discovered that at la pharmacie. More expensive there, too. I went with the small box, because I didn't really expect to use any of them and the smaller box is much easier to hide. Alyssa made me promise not to fuck her, regardless of what Mom had to say, but she was right, there is no such thing as being too safe.\n\nThe good thing about walking around Monaco all day is how it wore our parents out. They went straight to bed when we got back.\n\nWe changed to go back out for the night.\n\nAlyssa was thoughtful enough to again wear that gorgeous green top with spaghetti straps that prevented her from wearing a bra. We stopped at a new cafe with a view of the Med and sipped Pouilly-Fuiss\u00e9, which tastes much better than its lame name suggests.\n\n\"It's beautiful tonight,\" she said.\n\n\"Sure is,\" I agreed, and I don't think she noticed when I answered that I was studying the faint outline of her nipple poking through her shirt, visible in the bright moonlight.\n\n\"Wouldn't it be nice if we could take a vacation together, just the two of us?\"\n\n\"That would be fun. Where would you like to go?\"\n\n\"Anywhere no one knows who we are. Spring Break in Florida or skiing--I've always wanted to learn how to ski.\"\n\n\"That would be nice,\" I agreed. I learned to ski in college; my ever-present hard-on grew harder at the possibilities. \"France wouldn't be too bad, either.\"\n\n\"Oh, wouldn't that be something? Everything here is incredible. You know what I want to see? Those castles on our way to Paris.\"\n\nNo trip to France is complete without visiting Paris. We were heading there Monday for the second week, with a few stops along the way. \"Yes, those Medieval towns will be awesome.\"\n\n\"Another thing has been on my mind all day. Mother.\"\n\n\"Weird, right?\"\n\n\"I can't believe she thinks it is fine if we have sex.\"\n\n\"About the last thing I expected from her. What do you think about it?\"\n\n\"About Mom?\"\n\n\"No, about us?\"\n\n\"I've spent most of the day trying not to think about it.\"\n\n\"Why? Is there something wrong with it?\"\n\n\"Are you kidding? Everything's wrong about it--despite what Mom thinks about it, or what I do.\"\n\n\"So, you do want to?\"\n\n\"Don't you?\"\n\n\"Isn't that obvious?\"\n\nHer eyes looked so sad. \"What's wrong with us?\"\n\n\"Nothing, I suppose. It didn't feel wrong the other night, did it?\"\n\n\"That felt really good. Really good. What we did the other morning, was that enough for you?\"\n\n\"Was it enough for you? Wouldn't you like to feel the way you made me feel?\"\n\n\"I'm scared.\"\n\n\"You think I'm not?\"\n\n\"I told you, we can't go all the way. But,\" her finger twirled slowly around the rim of her glass and a lovely, high note sang out like a bell; her eyes somehow glowed as if lit from inside, \"we wouldn't want to disappoint Mom, would we?\"\n\n\"I'm more afraid of disappointing you.\"\n\n\"I'm more afraid we will start laughing at how ridiculous it is.\"\n\n\"That morning when you did that to me, or the night before when I kissed your body, we didn't laugh.\"\n\n\"No, we didn't.\"\n\n\"I want to kiss the rest of your body--do you want that?\"\n\nShe began looking around. \"Let's pay our check.\"\n\nHalfway back to our hotel, I pushed her up against a stone wall and kissed her. Her arms wrapped around my neck and her body melted into mine. I could not believe how fantastic a kisser my sister was, or how good she felt in my arms, how electric the soft form of her breasts pressed against my chest. Our tongues instinctively knew what the other wanted.\n\nStealthily we sneaked into our suite, so our parents would not hear us, and before I shut the door to our bedroom behind us, my sister had her shirt off. It's hard to understand how her breasts had grown even more lovely since I saw them that morning, but it's true--they had. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\nBack at the cafe table, our decision had been made. Now that we were here, we only acted. I don't know about her, but all thoughts were gone from my mind. The only things that existed in the entire world were me and Alyssa. Nothing else mattered.\n\n\"What are you going to do to me?\" She stepped back as if expecting me to tickle her again.\n\n\"I am going to make you mine,\" I said. Don't ask why, but it sounded cool at the time, and it was true.\n\nFunny enough, she didn't laugh at such a cocky answer. It seemed to satisfy her, or turn her on even more. Whatever it did, she stopped backing and let me take her into my arms again, and kissed me with more passion than my mind ever contemplated might exist in my own sister.\n\nWhat the fuck was her boyfriend thinking about when he cheated on her?\n\nMy sister's kiss, her tongue were almost enough to satisfy me, although my cock pressed achingly against her. Needed her.\n\n\"What are you going to do to me?\"\n\n\"Anything I want,\" I said between kissing her lips and her neck. The line between horny and cocky is a very thin one. \"What I want to do is make you feel as good as you made me feel yesterday morning.\"\n\nHer body went limp in my arms for a second, as if her knees buckled or she almost passed out. While we did drink wine, she only had a couple of glasses; even her small body could take that much. No, it was something else, although I wasn't sure if it was anticipation or fear. Either one was cool.\n\nMy hands grabbed at her firm ass and at the button of her shorts. I haven't told enough about what a nice little tail she has because of the obsession with her boobs that devoured me that week, but I finally realized her little ass would feel better without the canvas shorts, so I unbuttoned and unzipped them, and she kicked them across the room.\n\nOne thing I miss from the 80s is lace and silk boyshorts. They made women's asses look so damn fine, not like what they call them today. Lacy, silky, with the bottom third of the ass poking out. And when I felt them on my sister, I loved them even more. I rubbed that lovely ass, hands venturing up inside the fabric. Her hands worked on my shirt, and soon it was off and her bare breasts pressed against my skin.\n\nOne hand held my neck while she kissed me, the other felt the front of my khakis and the massive boner inside. It felt swollen beyond its capacity. I squeezed Alyssa's firm, tight butt, fingers deep in her crack. It felt, in my hand, even smaller than it appeared, the opposite sensation from her breasts.\n\nSomehow, we were on her bed. She may have shoved me, or I could have fallen over--all that blood swelling my cock, I might have swooned. Who knows? All I know is she lay atop me and her tongue was down my throat and the skin of her back and legs and bottom was smooth as silk. Underneath, muscles rippled as her body writhed against mine. Nothing about this felt real.\n\nWhen I rolled her over and lay on top of her, she got my pants off so fast it was shocking. Her sweet skin against my rod felt so damn good! Down I moved, until it rubbed between her legs, and her panties felt moist and shockingly hot, like an internal flame burned between her legs. She started moaning, even though her tongue never stopped plumbing the depths of my soul.\n\nI had to kiss her breasts again. This time, she responded even more powerfully, pressing my face forcefully against her, holding it there while I sucked and licked her nipples. Her movements in response told me which lit her fire most, so I paid attention and gave her what she craved. I covered both breasts with kisses and licks and teasing little bites, and by then, I swear, she would have let me do anything I wanted.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\nAnything.\n\nThe only thing I wanted was to lick her between her legs. To find out if her bush was the same color as her light, almost invisible eyebrows. She didn't even have to look at my cock, if only I could eat her!\n\nThis time, she didn't stop me. In fact, she lay there moaning as I kissed down her stomach to her panties and pulled them slowly down, kissing each inch of skin as it was revealed to me. There she lay, eyes closed, head turned slightly to the side with her lips slightly open, hands curled up beside her head completely surrendered to her fate.\n\nOh, damn! It is blonde! At first, only a tiny bit appeared, and I kissed those flaxen curls, kissed the skin beside them, pulled a little more down and kissed a little more white fur.\n\nAlyssa's was my first blonde bush. My only blonde bush, to this day, and my heart was pounding so hard I was pretty sure I was about to drop dead of a heart attack. Okay, fine, but not before I got my tongue up inside her! So I yanked off those boyshorts and gazed upon the most beautiful bush anyone has ever seen. So light, it was hard to believe it was not bleached. Her thighs were only slightly apart, just enough for me to squeeze between them.\n\nI pushed them up and apart, so her knees were bent and I could kiss her most sensitive parts.\n\nThe gasp that came from my sister's lips the moment my lips touched her softest lips didn't sound like it came from her. A voice I never had heard. So soft, so warm to the touch, and they opened to the touch of my lips, spilling hot, aromatic liquid down my chin. She wanted me as much as I wanted her!\n\nI didn't even try to act cool anymore. I attacked her! My tongue went crazy around, on and inside her. Her scent and flavor filled my senses, delicious and all her own, adding to my madness. Even at the time I knew it was madness, because I simply did not care about anything else but burrowing my tongue inside her.\n\nHer body writhed about, seemingly as crazily as my tongue, and her moans and sighs rose and fell like waves on the rocky beach. Two hands on my head guided me, and I followed along like a good dog on his leash. Soon, I began settling down, focusing on her pink button, watching her bush from too close for my eyes to focus.\n\nAs I became less crazed, having realized my initial goal of sticking my tongue where it now was, I set for myself a new goal. If you are giving your own sister cunnilingus, you should give her your very best. Right? I mean, if your sister does not deserve your very finest tongue-lashing, then who does? Your own flesh and blood surely deserves no less.\n\nSo that is exactly what I gave Alyssa. I paid attention. Every moan, every gasp, every twitch of her muscles or twist of her body spoke to me. My tongue sought out those sounds and involuntary movements that gave away what brought her the greatest pleasure, and I gave more of what she craved.\n\nA certain way the tip of my tongue licking down from the top of her clitoris worked like rocket fuel, and she responded powerfully to sucking on her button. Particularly when rubbing it with my tongue. A finger inside helped. Two seemed to be magic.\n\nHer first orgasm came quickly and obviously. My girlfriend takes a long time, so Alyssa surprised me, but there was no doubt. Her legs closed around my head and her stomach quaked like a spasm as her moans took on a new, high-pitch that almost sounded like she was crying. It worried me a little, but she hung onto the back of my head, and I realized I just did not know that sound--but I remembered it.\n\nOnce was not enough and I was barely getting started. Reaching up, I ran 2 fingers still dripping with her essence across one nipple, pinching and flicking and circling it. Even with that, it took longer to coax out the second one. She taught me how much she loved when I licked along the roof of her love canal as far back as my tongue went then drew my tongue slowly all the way back to her button.\n\nSoon after I discovered this little secret, her hips were bucking and her stomach quivering again. This time, though, instead of moans, she kept inhaling deeply, hitching inspirations and her fingernails dug into my scalp.\n\nThis orgasm continued for an insanely long time, several minutes it seemed, long enough to envy. Mine last but a few fleeting seconds!\n\nAfter that, I almost quit. Much as she enjoyed me licking her, it seemed the moment had passed. One knee lay flat out to one side, the other limp over my shoulder. Never underestimate a brother's determination--I wasn't giving up without licking a third one out of her, if it took all night!\n\nAfter a few of those deep dives along the silky top surface, I focused all my energy on her clitoris. A marvelous thing it was, so tiny, a pearl rolling around my tongue. Tinier than the ones I was used to, yet filled with no less power. Her knee rose off the bed and her leg on my back began rubbing up and down.\n\nThere is something particularly exciting and stimulating about hearing your sister climax, feeling her orgasm rattle her body like an earthquake destroying her most forbidden depths. I cannot explain it. I suppose others get that same thrill from other crimes--shoplifting or shooting heroin or maybe that is what drives people to parachute from a perfectly good airplane.\n\nNow that I had experienced this power, it consumed me to the point that I needed to feel it again--maybe as much as she wanted that quake to take her body.\n\nWhen she came, much like her first, she left no doubt. Hips thrust her blonde bush into my nose, thighs slapped against my ears and my hand on her lower abdomen felt waves of muscles contracting in a syncopated, out of control way. Her sound was different, though, forceful gasps followed by repeated \"Oh, oh,\" rising in pitch and speed until I wondered if our parents might hear her.\n\nStrength nearly used up completely, my tongue circled her flesh pearl hard with the last bit of energy it possessed. And suddenly, it was over. Her entire body relaxed, fell limp, and a long, mournful sigh came from those rosy lips. An exhausted, sated sound.\n\nMy poor tongue--numb, sore and barely able to move--continued working her over, though, even when she began laughing, then squealing and squirming, begging through the laughter, \"Stop, please! Oh, it tickles. Stop!\"\n\nMy sopping wet chin collapsed on her blonde fur, and past two pink-tipped mounds I gazed up at her beautiful face, those unforgettable green eyes scrunched in a smile returned back at me.\n\n\"Come here,\" she said, fingers opening and closing, urging me up. On the way, I kissed her stomach a few times, then her breasts, a shoulder, her neck, then our lips came together. My weary tongue slowly circled hers like we were both exhausted, and I just wanted to hold her, to fall asleep with her in my arms.\n\nHonestly, I wanted nothing more of the night. The deed was done, and I could die a happy man.\n\n\"Now, what am I going to do about you?\"\n\n\"Nothing. There is no need.\"\n\nSoft, caring fingers took the tip of my penis and her thumb traced the edge of my helmet. \"Feels like a pretty big need.\"\n\n\"I didn't do that as part of a deal. This wasn't an I scratch your back, you scratch mine.\"\n\n\"What if I want to...scratch your back?\"\n\n\"I've got nothing against a little back scratching,\" I held her face in one hand, \"but, only if you want to!\"\n\n\"You idiot! Do you think I am passing up this opportunity?\"\n\n\"There will be other opportunities.\" Honestly, I have no idea why I was trying to talk her out of another handjob. But, there I was, lying on top of her naked body while she played with my dick trying to talk her out of it.\n\n\"Roll over.\"\n\n\"Alyssa...\"\n\n\"Roll over!\" she started shoving me, so I rolled onto my back.\n\nJust before I reminded her of that fantastic lotion, she rolled over my legs so her head rested on my thigh, and she loosely held my cock in her fingertips. \"Don't get me wrong--I don't do this with just anybody.\"\n\n\"Only your favorite brother?\"\n\n\"Something like that. Since I may not be very good, tell me how to do it better.\"\n\n\"Oh, you are extremely good.\"\n\n\"How would you know?\" Before I could answer, her head lifted up and her lips wrapped around the head of my cock.\n\nHo-ly shit!\n\nHer tongue circled around the tip, much like mine had done to her tiny button a few minutes before. My head fell back on the bed.\n\nLooking back on it, technically, she might not have been very skilled. Her soft, pink lips, though, felt so amazingly good, her tongue running across my stiff flesh so provocative, nothing ever felt better.\n\nThe moment she drove her head forward, taking me in, I let out a gasp and reached for her blonde hair, allowing my fingers to run through it. She held it steady in a tight grip, as if my rigid cock terrified her, but her hand did not stroke my shaft. I almost asked her to, but decided to find out what she could do on her own.\n\nOne of the best decisions of my damn life!\n\nHer head rose and fell with a slow rhythm and she sucked me like a lollipop. Each time, her tongue firmly licked my vein along the bottom. She only took about half of me in, and I wanted to shove the whole thing back, deep into her throat, but I didn't. I wanted her to show me what she could do.\n\nWhen she withdrew along its length, her supple lips trailed along behind and she sucked in, sucking harder as she continued. Every few strokes, she stopped and circled my tip with her tongue, each time playfully locking those smiling green gems on my eyes. Damn, she was enjoying herself!\n\nNot as much as I was enjoying her, of course.\n\nI watched as my cock slid into my sister's mouth, but her hair kept falling down, blocking my view, and I kept pulling it back because I needed to see to know this was not some dream or a fantasy run wild in my brain. Her cheeks puffed out and hollowed inward as she took me in and sucked on the way out.\n\nA man can only take so much pleasure of that intensity. After a minute of her exquisite torture, my balls drew up and that feeling hit.\n\nHonest, I planned to warn her, but it just happened so fast! I shot my cum into her mouth. If she spat it out, it still would have been a miraculous blow-job. Maybe she is just like me and wanted to give me her best.\n\nBut, she didn't spit out a mouthful of me. Instead, she hoovered me up, sucking in my cum, swallowed in big gulps, then sucked some more. Her head moved faster when I came, up and down. I was biting the hell out of my tongue to keep from screaming her name at the top of my lungs, and I tasted blood. My entire body felt alive, electric, acutely aware of every sensation around me.\n\nFinally, a long \"Ohhhhhh\" came out that sounded so comical we both started laughing. Thank god I was finished, because her face landed on my thigh right at the hip, her nose buried into it to keep the laugh inside the bedroom. After a few seconds, her eyes peered up at me, and she winked. Winked!\n\nThat was so damn hot!\n\nOne last pearly bit of schmoo leaked out, and she was still holding the base of my rod, so it just sat there. Eventually, she saw it, and her tongue lashed out, licking it off playfully as she made a funny \"Arumph\" sound, making us both break out in another fit of laughter, this one lasting like five minutes. One of those where your sides hurt and you can't catch your breath.\n\nThen she lay in my arms, forehead on my cheek, giving my neck these cute as hell little kisses with those soft, soft lips.\n\n\"Where did you learn how to do that?\"\n\n\"Was it good?\"\n\n\"Amazing! Incroyable! Fantastique!\"\n\n\"Don't tell anyone!\"\n\n\"Who am I going to tell?\"\n\n\"I just don't want anyone knowing. I mean, when you hear someone saying a girl gives good head, you immediately think she must be a slut. You don't think I'm a slut, do you?\"\n\n\"You aren't a slut.\"\n\n\"Promise? I really didn't think I was any good. I haven't done that much.\"\n\n\"Tres fantastique!\"\n\nHer face glowed red. \"I was going to tell you not to, you know--in my mouth--but I figured, what the heck? He's my brother, and...\"\n\nThe way she said it, we both started laughing again. It was pretty absurd. All of it. When the laughter ended, I wanted nothing more than to fall asleep just as we were, but that would have been the craziest thing we did that night. Our parents were no more than 20 feet away, and locking the door would have been too obvious. Not after what Mom told us.",
        "So, we kissed goodnight. A long, wet tongue kiss and, wearing our PJs, climbed into our own beds. Eventually, her breathing slowed, and I think she got some sleep. I may have slept for an hour or so; the memories of what we did playing over and over in my head kept me awake most of the night.\n\nAnd we still had more than a week in France. The potential for what lay ahead also conspired to keep me awake.\n\n\u00a9 de Vere Literary, LLC 2021"
    ],
    "authorname": "de_Vere",
    "tags": [
        "sister",
        "virgin",
        "18-year-old",
        "brother sister",
        "brother",
        "siblings",
        "blow job",
        "cunnilingus",
        "incest romance",
        "hand job"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/nice-family-vacation-ch-03"
}
{
    "title": "Diagnosis Murder Ch. 01",
    "pages": [
        "Entering his beach house home, Lieutenant Steve Sloan dropped his suitcase and stretched tiredly. He wasn't due back from the Conference until the next day, but the final speaker had cancelled and rather than stay away one more night, Steve had chosen to come home. He'd missed his young lover for the two days and nights he'd been away already and his drive home had become somewhat uncomfortable due to the thoughts of a naked Jesse Travis and making love chasing through his mind. He cocked his head, hearing a mixture of CD music and his love's off-key voice singing. Smiling, the big detective moved to the living room, then stood in the doorway. The sight before him made him gasp.\n\nIn the middle of the floor, diligently polishing their dining table was Jesse Travis. The young doctor had his back to Steve and so was blissfully unaware of the appreciative audience. Steve's appreciation however was not for the slender man's polishing or singing abilities. Jesse had decided to undertake the cleaning work in nothing but baby-blue bikini briefs. The young man rocked forwards and backwards as he polished, alternating with hip gyrations to the music. As he stretched over the table, Steve enjoyed the view of Jesse's pert bottom, the thin cotton emphasizing the perfect twin globes beneath the fabric.\n\nSteve growled low in his throat. He was both protective and possessive of his younger lover. Added to that a very large button that found being dressed in the vicinity of a near-naked Jesse incredibly arousing and Steve found all tiredness suddenly evaporating in favour of making mad, passionate love with his beloved. An insistent ache between the big man's legs drew his attention to just how aroused he already was. Steve smiled ferally.\n\n\"Hi, Honey, I'm home\" he rumbled.\n\nJesse turned round immediately. For a second there was fear in his eyes, before he registered clearly the words and the identity of the speaker. The polishing cloth forgotten, Jesse's face lit up with an incandescent grin and Steve found himself with two arms full of energetic, enthusiastic blond. Jesse wrapped his legs around Steve's hips and the bigger man cupped a firm buttock in each large palm. Jesse's face buried itself in Steve's neck with a contented sigh. Then the younger man pulled back and began peppering Steve's face with kisses. He moaned softly as Steve gently squeezed the young man's cheeks. Finally, their lips met and two tongues danced and swirled around each other. Breaking apart due to the necessity of breathing, Jesse gazed deeply into the eyes of his lover.\n\n\"Missed you, Steve\" he murmured. \"Love you so much.\"\n\n\"Love you too, Angel\" Steve replied. \"And I missed you.\"\n\nDeciding he didn't want to waste a single moment of the time he could spend making love with this special young man, Steve carried a giggling Jesse to their bedroom, whilst explaining how he came to be home so early. He gently laid Jesse on their bed and removed Jesse's briefs. He leant back to appreciate the view of his young lover; naked, aroused and willing.\n\n\"Steve, please, Love, please\" Jesse begged softly. \"Love me. Show me I'm yours.\"\n\n\"Mine, Jess\" Steve growled as he kicked off his shoes and knelt on their bed. He caught hold of Jesse's trim thighs and spread them back and apart. He shifted forward as he gazed predatorily at the now exposed tiny pucker. Meeting Jesse's eyes, he tried to convey how much he appreciated the submissive, vulnerable position Jesse lay in so quiescently. Steve always felt humbled by the trust Jesse gave so freely. Despite Steve's size, Jesse trusted the much bigger man not to abuse or hurt him.\n\n\"Yours, Steve\" Jesse affirmed. \"Only ever you.\"\n\n\"My beautiful virgin\" Steve smiled. He had been both awed and proud to have been the man to take Jesse's virginity. He then moved swiftly and engulfed Jesse's straining erection. \n\n\"Steve!\" the young man screamed as Steve sucked hard and fast. He wanted Jesse to come quickly so that the next part of their love-making could be more leisurely. He began to gently rolled Jesse's testicles and then reached up to pinch an innocent nipple. Jesse's nipples were a highly erogenous zone for both men and the firm tug on the delicate flesh was enough to trigger Jesse's release. Steve swallowed greedily, savouring the salty taste of his lover's cream. He suckled until he felt Jesse's penis softening and slowly allowed the organ to slip from his lips. \"Love you, Steve\" Jesse panted. \"Love you so much.\"\n\n\"Love you, Baby\" Steve rumbled as he slowly stood. \"Watch me, Jess\" he commanded softly. \"Gonna get naked for you, Angel. Gonna get skin to skin with you. Gonna cover your beautiful body with mine, lick you, suck you, reach inside you till you come again screaming my name. You want me inside you, Baby? I know you do. You want me inside you, owning you, possessing you.\" Steve had stripped as he spoke, inflaming Jesse's passion with both the visual display and his words of seduction and passion. Finally he stood nude before his prone lover. He reveled in the whimpers he could hear spilling from Jesse's lips as the slender young man opened his arms and legs wide in wanton invitation. Growling, Steve advanced crawling between Jesse's spread thighs as he accepted Jesse's invitation. \n\nJesse wrapped his legs around Steve's waist as the bigger man blanketed his slighter form. Steve balanced his weight on his left forearm and began a trail of kisses down Jesse's jaw and neck. He increased pressure as he reached Jesse's collarbone and chest, leaving the occasional mark of possession in his wake. Steve's tongue danced down Jesse's smooth chest and then he began to suckle Jesse's right nipple as he squeezed the sensitive breast. Jesse moaned softly at the attention. Steve moved to Jesse's left breast and laved the same attention upon it, leaving both nipples achingly hard in his wake. Abandoning the solid nubs with reluctance, Steve then began a tender assault on the slender doctor's navel. He ran his tongue around the edge of the tiny indent, and then began a rhythmic thrusting inside. He ran his tongue down towards the heat of Jesse's groin then diverted down the crease of each inner thigh. Gently he took each testicle into his mouth and rolled them slowly, reveling in Jesse's mewls of pleasure and need. Steve released the small ovals and slid a large palm under each of Jesse's cheeks, simultaneously lifting and spreading them open. Using his thumbs, Steve exposed Jesse's tiny center fully and began to lick and probe until the rose flowered open and Steve's tongue began to thrust deeply and rhythmically. Continuing to thrust with his tongue, Steve blindly reached for their lube and coated his fingers. He replaced his tongue with a slick finger as he kissed Jesse, his tongue invading his lover's mouth with the same tempo as his finger pumped into Jesse's center. As Steve entered Jesse with two fingers, Steve began to suckle Jesse's sensitized nipples, relishing the way Jesse arched into his touch. Finally Steve had three fingers buried inside his lover and Jesse's erection arched hard against the lissome man's flat stomach.\n\n\"Please, Steve\" Jesse panted. \"Take me. Show me I'm yours. Come inside me.\"\n\n\"Gonna come inside you, Baby\" Steve rumbled. \"Gonna fill you. You're mine, Baby. Say it, Jess.\" As he spoke, Steve lifted Jesse's legs onto his shoulders and pressed his slicked length at the stretched opening to Jesse's body.\n\n\"Yours, Steve\" Jesse moaned. \"Always yours. Only ever you.\"\n\n\"Mine\" Steve affirmed, pressing inside Jesse's welcoming body. \"Ah, God, Jesse!\" Steve groaned at the sensation of Jesse's channel clenching tightly around his hard length. He'd wanted to love Jesse slowly, but instead gave into his body's demands and began to pound hard and deep, hitting Jesse's sweet spot repeatedly. Steve kissed Jesse as his hips pistoned into the willing body. Sliding his hand between their bodies, Steve began to pump Jesse in counterpoint to his thrusts. Jesse responded by arching his back, his head thrashing from side to side, lost in their mutual passion. \n\n\"Steve\" Jesse cried out his lover's name as he felt his imminent climax.\n\n\"You're gonna come, Baby\" Steve growled in Jesse's ear. \"Gonna come with me deep in your body, Angel. Want you to milk me, Jess. Come for me, Baby.\"\n\nWith a wail, Jesse climaxed hard. The clenching of his channel and the look of ecstasy on Jesse's face as he came were enough to force Steve over. With a primal roar, Steve erupted in Jesse's body, his seed flowing deep inside his lover. As he came down from his orgasmic high, Steve retained enough presence of mind to roll sideways, taking Jesse with him. He tucked the smaller man's head beneath his chin after kissing the sweat-dampened temples. \"Love you, Sunshine\" he whispered.\n\n\"Love you, Babe\" Jesse panted in reply, snuggling into the bigger man's comforting embrace and surrendering to post-orgasmic sleep.\n\n\"Sleep sweet, my love\" Steve crooned. \"We've got the rest of the night together.\" Smiling tenderly, Steve joined Jesse in sleep.\n\n\"Jesse. Jesse! Is everything OK?\" a voice demanded, rousing Steve from his sleep. A sharp rap at their bedroom door accompanied the words. Steve couldn't help but smile as he became aware of his human blanket. Jesse was sprawled over Steve's chest and his right leg was between Steve's thighs. \"Jesse?\" the voice persisted. Steve realized the identity of the voice's owner, but before he could reply, the bedroom door opened.\n\n\"Hi, Dad\" he smiled as Mark Sloan anxiously peered inside.\n\n\"Steve!\" the older man exclaimed with surprise. \"I wasn't expecting you home tonight\"\n\n\"Steve?\" Jesse's sleepy voice came from the vicinity of Steve's nipple. \"Wazzit...?\"\n\nHolding onto the smaller man tightly, Steve murmured \"it's just Dad, Sweetheart\"\n\nJesse jerked, but couldn't move away. His head shot up to meet Steve's amused look. \"Dad!\" he exclaimed. \"Dad's coming over to keep me company tonight. We gotta get ready.\"\n\n\"It's OK, Jess\" Mark assured as he retreated from the room. \"I'll just set three places. See you both in a few minutes.\" The older man smiled. Jesse usually called him Mark, which he was quite happy with, but occasionally the younger man called him Dad and that gave him a warm fuzzy feeling. He'd been like a surrogate father to the younger man since Jesse had come to Community General. Whilst he might have entertained other ideas of an ideal relationship for his son previously, he knew Steve and Jesse were made for each other. He recognized them for the Soul-mates they were.\n\nJesse groaned from Steve's armpit and Steve couldn't help but grin widely at the blush he could see on Jesse's body.\n\n\"Jess, you know Dad's happy with our relationship. He's caught us like this more than once.\"\n\n\"I'd never rub his face in it intentionally...\" Jesse began.\n\n\"And he knows that\" Steve concluded. \"Look on it as more ammunition to tease us with. Now, out of bed and in the shower. I'm famished. Move it, Angel.\" Steve aimed a gentle swat at Jesse's bare backside and within minutes the two men had completed a rapid shower in the en-suite Steve had built in their bedroom.\n\nMark smiled at his two sons as they came into the living room. Steve had an arm slung proprietary around Jesse's waist. The younger man nuzzled into the loving embrace. Before either could speak, Mark strode over. Tilting downwards first Steve's then Jesse's heads, Mark dropped a kiss on each. \n\n\"Welcome home, Steve\" Mark smiled. \"I'm sure Jesse won't mind sharing three ways now you're home. Jess\" he looked into the wide guileless eyes. \"Thank you for making my son so happy.\" Mark grinned widely at the vivid blush on Jesse's face, but the look from Steve was priceless as Steve's eyes shone with gratitude at his father.\n\nThe three men enjoyed the take-out food and then Jesse prepared two bowls of popcorn for them to nibble whilst watching the basketball game. Soon Jesse had slid onto cushions on the floor between Steve's spread legs. Not long after, Steve slid to the floor behind Jesse. The slender man now sat between Steve's legs, a strong arm wrapped around his waist as he leant back into his bigger lover's solid warmth. Steve enjoyed holding Jesse and used his free hand to attack the popcorn, remembering to feed some to his lover. By the time the game was three quarters through, Mark noticed Steve begin to move gently. Before he could speak, Steve motioned for him to keep quiet and indicated Jesse who was fast asleep. In an obviously well-practiced manoeuvre, Steve scooped up his tiny lover and sat back on the couch with Jesse nestled securely against his chest.\n\n\"You want me to go?\" Mark whispered. Steve shook his head in response.\n\n\"No, Dad. We can watch the end of the game and you can sleep here tonight. Jess will probably sleep through now.\" Almost on cue, Jesse moved restlessly, but stilled immediately as Steve crooned softly into his ear. A soft sigh and Jesse sagged completely in Steve's embrace. \n\nAs the game finished, Mark assured his son he would lock the house and Steve smiled his gratitude as he carried his precious bundle safely back to their bedroom. As Steve stripped the lithe body, he found himself hardening. He gave a muttered 'Down boy', undressing rapidly and sliding into bed to spoon up behind his sleeping lover. His semi-erect penis slid comfortably between the cheeks of Jesse's ass and the younger man unconsciously snuggled backwards. Steve bit back a groan and kissed Jesse's ear whispering \"Goodnight, Angel\" before slipping into sleep. \n\nSteve awoke slowly, with a pressure on his thighs and a warm wetness surrounding his left nipple. His eyes opened in time to see a pink tongue trail its way across the plains of his chest to his right nipple which received the same tongue bath as its twin. Steve couldn't suppress a moan of appreciation as Jesse gently tugged on the small nub with his teeth.\n\n\"Morning, Sunshine\" Steve smiled.\n\n\"Morning, Lover\" Jesse replied, leaning his body forward to be able to kiss Steve's lips.\n\n\"This is a nice wake-up call\" Steve groaned as Jesse returned to licking and nipping the taut nipples.\n\n\"One part of you is very happy\" Jesse said grinning as he shifted to display Steve's full erection. Smiling seductively, Jesse wriggled his way down Steve's body. When his face was level with the head of Steve's penis, Jesse licked it slowly. Steve groaned again, fighting the urge to push himself into Jesse's mouth. Jesse rewarded his self-control by gently sucking the head and then lapped his way down to the base. Pushing Steve's legs apart, Jesse followed the crease of each thigh with his tongue and then moved lower. He lapped delicately at each of Steve's heavy sacs before working lower again. Realizing Jesse's intent, Steve braced his feet on the bed and shifted his hips upwards. This gave Jesse the needed access to gently lap at Steve's dusky pucker. \n\n\"Baby,\" Steve rumbled huskily. \n\nJesse looked up to ensure Steve was alright. The sight of Jesse with his disheveled hair and flushed face, panting slightly from his attentions to Steve's body sent surges of love and lust through Steve in equal measure. \"Wanna ride me, Baby?\" he asked roughly. \"I wanna see you ride me. Wanna see you impaled on me, pleasuring us both. Ride me, Jess\"\n\n\"Oh yeah\" Jesse breathed. \"Get me ready?\" he asked.\n\n\"C'mere\" Steve husked. Steve propped himself into a more upright position and Jesse kissed him long and deep before pressing a tube of lube into Steve's hand, straddling his lover's legs and presenting his enticing buttocks to Steve's hungry gaze. Jesse shivered in anticipation as Steve's large hands stroked over each cheek, then kneaded them purposefully. Jesse gasped as a cold slick finger invaded his most private place. \"Soon be warm, Baby\" Steve murmured. \"Love you, Angel\"\n\n\"Love you, too, Babe\" Jesse replied. The younger man was gently and thoroughly prepared by his bigger Mate. Steve never took chances in regards to preparing Jesse properly. Both were aware of the need for safe sexual practices. Steve was also well aware of how easily someone of his size, both physically and sexually, could hurt a more diminutive lover. Jesse's body was tiny in comparison to Steve and the big man wanted Jesse to enjoy their coupling, not be hurt by it. They didn't use condoms because both men knew they were clean as they were tested regularly in their jobs and neither man intended to have another lover. This was a union for life. Satisfied that Jesse was ready to accept his turgid sex, Steve assisted as Jesse turned to face him and lined his prepared entrance over Steve's straining erection. \"Slowly, Sweetheart\" Steve purred as tight slick heat began to envelop him. Both men moaned as Jesse finally came to rest flush against Steve's groin. Slowly Jesse undulated on the shaft that pierced him and Steve held his hips to assist in lifting up and down. Steve vocalized his appreciation of Jesse's movements, but Jesse was concentrating too hard to notice. Finally the lissome man needed more. He was rubbing Steve's cockhead against his prostrate but needed additional stimulation.\n\n\"Touch me, Steve\" he begged softly. \"Please, lover.\"\n\nSteve moved one hand to start stroking Jesse's own need and as Jesse moved downwards, Steve began thrusting his hips upwards, hitting Jesse's sweet spot harder. Jesse threw his head back and cried out with pleasure. His head dropped back down towards his chest and Steve felt the tightening of Jesse's body that heralded the slender man's impending climax. Releasing Jesse's hip, Steve thrust up hard and pressed three fingers into Jesse's mouth. The young man's eyes widened.\n\n\"Mmm...mmm...mmm\" Jesse's more vocal cries of completion effectively muffled, Steve bit down on his own roar of passion. The sight of Jesse orgasming, the clenching of Jesse's channel and the scent of Jesse's release tipped Steve over the edge and he felt his own release jettison inside Jesse's body. Steve caught Jesse's body and settled him against his chest as Jesse lay spent and trembling from the intensity of his climax.\n\n\"That was beautiful, Baby\" Steve whispered. \"You're beautiful. I love you, Jess\"\n\n\"Love you, too\" Jesse panted, snuggling into Steve's chest.\n\nSteve gently petted Jesse's body, massaging the younger man's head and neck and then running up and down the sweat-dampened back. All too soon Steve knew they had to move if they were to see his Dad off to work.\n\n\"Dad spent the night here, Sweetheart\" Steve told the sated young man. If we grab a quick shower we can have breakfast with him before he leaves. You still have today off?\"\n\n\"Uh hmm. Wanted to welcome you home properly\"\n\n\"Then how about a picnic later? Fresh air always sharpens my *appetite*\" Steve licked Jesse's ear and nibbled gently on the lobe.\n\n\"I like the way you think\" Jesse smiled softly.\n\nThree hours later, the two men were enjoying a picnic of bread, cheese and fruit. They fed each other, enjoying the intimacy and allowing their lust to slowly build. Eventually each man was feeding more on the other's fingers than on what they contained. Steve slowly eased them down to lie on the blanket, his hands roaming over the slender doctor's body. He unsnapped Jesse's pants and eased the zipper down whilst kissing the younger man breathless. Dazed from the intensity of his Mate's kiss, Jesse barely registered Steve deftly removing his pants and briefs. Jesse moaned and arched into Steve's knowing touch as Steve stroked Jesse's hardness with just the right speed and pressure to increase arousal. Sucking on Jesse's neck, Steve undid Jesse's shirt and began to nurse at Jesse's nipples. He felt Jesse's slender hands working to undo his own clothes, but resisted the urge to help, concentrating instead at robbing Jesse of coherent thought. \n\n\"You taste so good, Baby\" Steve whispered as he released one achingly hard tiny bud to work on its neglected twin. Jesse groaned as Steve began his new assault, his hands twining in Steve's t-shirt.",
        "Jesse had succeeded in freeing Steve's erection and had wrapped his hand around the thick shaft. Steve found himself unconsciously thrusting into Jesse's hand, enjoying the slow build up of sexual tension. \n\n\"Roll over, Angel\" Steve instructed and Jesse moved slowly to comply, reluctant to leave Steve's touches. As he lay down, Steve slid a cushion under Jesse's hips to elevate them and keep Jesse comfortable. Kissing the nape of Jesse's neck, Steve began to work his fingers inside Jesse to prepare him for penetration. Jesse was still loose and somewhat slick from their earlier love-making and the thought sent a jolt to Steve's already achingly hard rod. He lavished lube over the length and pressed inside his Mate's body.\n\n\"Oh, Steve! Love you, love you\" Jesse cried as he felt Steve enter him fully. It didn't take long for both men to come hard. Jesse's wail of completion drowned out by the roar from Steve. Rolling to the side as his climax ended, Steve curled protectively around Jesse's sated body.\n\nWhen his breathing had settled, Steve grudgingly acknowledged the need to clear things away and be heading home to avoid driving in the dark. He smiled lovingly at his sleeping lover. He knew Jesse had worked extra shifts at the Hospital to be able to have taken this day off and so wasn't surprised at his Mate's tiredness. His smiled turned feral as he slipped off Jesse's shirt, leaving the young man completely naked. He used the shirt to clean himself perfunctorily. He tossed Jesse's clothes into the basket with their finished picnic items. He put the basket into the back of the truck and pulled out a thick fleece blanket. Wrapping Jesse in the blanket on which he lay, Steve buckled him into the truck. The thought of Jesse next to him in the truck covered only by the blanket was causing the older man's cock to twitch. He hoped Jesse would take it in good stead. He tucked the thicker blanket within easy access and buckling himself in the truck began the drive home.\n\nIt took another half an hour before Jesse woke up and the younger man was shocked to find himself naked in the front passenger seat. However, seeing the look in Steve's eyes, Jesse decided it was worth feeling somewhat nervous to indulge the bigger man in something he clearly wanted. Smiling flirtatiously, Jesse angled his head towards Steve. Indicating the blanket with an eloquent hand he asked \"So you want to explain this?\"\n\n\"You are OK with this, Jess?\" Steve asked anxiously. \"I'll give you my t-shirt and get your chinos...\"\n\n\"Steve it's OK. I feel naughty and debauched, but not uncomfortably so. I can see the fleece blanket, so I can cover up more if I want. Just...why?\"\n\n\"Big time fantasy\" Steve confessed, blushing faintly. \"Having a naked, nubile young lover next to me as I drive along the open road is a fantasy I never thought I could have. I couldn't leave you uncovered though, Jess. I don't want anybody seeing your body except me and your doctor\"\n\n\"Who just happens to be your Dad\" Jesse giggled.\n\nSteve smiled happily. He loved the musical sound of Jesse's giggles and if the young man was happy enough to giggle, then he couldn't be too uncomfortable. Glancing sideways at Steve, Jesse queried \"So do you have other fantasies?\"\n\n\"Yeah\" Steve replied. \"You?\"\n\n\"Yeah. I'd like to be your love-slave for the night\" Jesse whispered, blushing furiously.\n\nJess!\" Steve exclaimed. \"I think we need to have a long talk when we get home. Driving with you as good as naked beside me and talking fantasies like that one will have us crashing.\" He glanced over at Jesse, grinning widely and gave into the temptation to reach quickly inside Jesse's blanket cocoon to touch naked flesh. \n\n\"Steve!\" Jesse yelped. \"Hands on wheel now, hands on Jesse later.\"\n\nSteve waggled his eyebrows and both men laughed easily, comfortable in their intimacy.\n\nThey arrived home without incident. Both men giggled like teenagers as Steve tried to manoeuvre Jesse out of the truck and into his arms without the blanket falling open and displaying Jesse's nudity. Steve cradled his precious bundle to his chest as he began to walk towards their home. They were so engrossed in each other they failed to notice Mark who stood smiling at their antics. He quickly took in Jesse's bare feet and legs, which were displayed up to mid-thigh, and the bare arms and shoulders. Raising an eyebrow as the two men finally noticed him, he casually enquired\n\n\"Do I even want to know?\"\n\n\"Jess and I were just...communing with nature, Dad\" Steve improvised. He felt himself smiling broadly as Jesse buried his face in Steve's chest, the shaking body and muffled giggles showing the smaller man wasn't too embarrassed.\n\n\"I see,\" Mark said seriously, causing the two younger men to laugh out loud. \"How about you two boys communing with the shower and coming to my place to have dinner with me. I'd like some company\" Mark said laughing.\n\n\"Sure thing, Dad\" Steve agreed.\n\n\"I'll even help empty the truck\" Mark offered magnanimously. As Steve carried in his lover, Mark trailed behind carrying the basket. The three men were blissfully unaware of a malevolent gaze that watched their loving camaraderie. Nor could they hear the threat uttered in a cold, hard voice.\n\n\"Enjoy them for now, Sloan. Soon they'll be gone. Tomorrow sees the beginning of your retribution\" \n\nAt Community General it was another busy day in ER. Both Jesse and Mark were on duty and both men were on shift till the evening. Jesse was happy despite the activity. There hadn't been any fatalities to deal with. He had Steve to go home to and the memories of the previous day's love-making. In addition, Steve had been interested in Jesse's fantasy. Jesse's mind was working on how to best indulge his fantasy whenever it was quiet enough to think. The young doctor nibbled on a chocolate bar. He hadn't stopped to eat properly so far and his energy was waning. He glanced at his watch. He had a break coming up and would need to indulge in a caffeine fix. He knew Steve wouldn't be happy he hadn't eaten, but working out ways to have his fantasy had pre-occupied his mind when ER work hadn't. He smiled softly as he finished the chocolate, thoughts of his big, gentle lover running through his mind.\n\nMark Sloan had returned to his office after completing a ward round. His eyes immediately lighted on the plain white envelope on his desk. Picking it up, he saw the single printed word, 'Sloan'. He opened it and removed the single sheet of paper. Typed in the middle was the threat 'Today your retribution begins'. Mark frowned. Tucking the paper back into the envelope, he put the envelope into his inside pocket. He didn't feel it warranted calling Steve. He would, however, show it to his son that evening. From experience he knew he couldn't afford to ignore the threat. However, he had patients to see and determined that they came first.\n\nAt the time Mark was leaving his office, Jesse was heading into the doctors' lounge. He got himself a coffee, when there was a knock at the door. A nurse stuck her head round smiling and handed Jesse a Starbuck's coffee container. \n\n\"Someone's a lucky boy\" she smiled. There was a card with the cup. It simply said 'Jesse from Mark'. \n\n\"Cool,\" Jesse enthused. \"Starbuck's mocha. One of my favourites.\"\n\n\"What is?\" asked Amanda as she joined Jesse. \"Ooh, Starbuck's coffee. Nice\"\n\n\"It's from Mark\" Jesse said. \"Not expected but really welcome.\"\n\n\"Jesse Travis\" said Amanda sternly. \"Do not tell me you've existed on coffee and chocolate again today\"\n\n\"OK\" Jesse smiled mischievously. \"I won't.\"\n\nThe two relaxed together for a few minutes before an emergency had Jesse sighing and putting the unfinished coffee in the bin. Amanda found mocha too bitter and Jesse didn't relish the idea of warming it later. \n\nAn hour later a frantic Mark and Amanda were trying to soothe Jesse as he repeatedly vomited uncontrollably. He lay in Mark's lap as Amanda tenderly smoothed his hair back from his sweat-damp face. \n\n\"What have you eaten, Jess?\" Mark asked anxiously. He'd arrived to see Jesse just as the young man had clutched at his abdomen and begun vomiting. Amanda had happened along at the same time and had bleeped for a gurney. Jesse simply shook his head, words too much effort.\n\n\"He had some chocolate and that Starbuck's mocha coffee you sent him that I know of\" Amanda offered.\n\n\"What Starbuck's mocha?\" Mark asked worriedly. \"I didn't send him any coffee.\"\n\n\"It might still be in the lounge\" Amanda said jumping to her feet. \"I'll run a check on the contents\"\n\n\"Call Steve\" Mark instructed, holding Jesse tenderly as a bout of dry heaves had tears running down the distressed young doctor's face. \"Get him here. I'll get Jesse's stomach pumped and have blood screening done.\" He rocked the younger man instinctively as Jesse whimpered with the pain. \"It's going to alright, Jess\" he promised. \"Here!\" he shouted as porters arrived with a gurney. \"Get him into a cubicle; I'll be there in a minute.\" Mark delayed long enough to call for the equipment needed before racing after the young man he regarded as a second son.\n\n\"Dad? Jesse?\" Steve's voice, laced with fear carried into the cubicle in which Jesse lay recovering from his stomach-pumping. Leaving Jesse with the nurse who had assisted him, Mark slowly walked out to his son. \"Dad? What's happened to Jesse? What's going on?\"\n\n\"I'm not sure, Son\", Mark said carefully. \"I need the results of Jesse's blood tests, but I think someone laced a drink with an emetic. I've pumped Jesse's stomach and he's getting an anti-convulsant to counter-act the urge to vomit. It hit him quite hard. He's completely drained. I want him here until the blood tests confirm my diagnosis. Once I know for sure that's the problem, I'll be happy to let him home. He'll rest better there and rest will do him the world of good.\"\n\n\"But why? I mean...is it a joke gone wrong? What?\" Steve asked sensing there was something his father hadn't said.\n\nWith a sigh, Mark handed Steve the note. Steve read it, and then put it in a plastic evidence bag before putting it in his own pocket.\n\n\"I don't see how my suffering retribution could be linked to Jesse being hurt. But I think the emetic was put into a coffee that was purported to have come from me. Jesse wouldn't have drunk it otherwise. Why hurt Jesse?\"\n\n\"I don't know, Dad\" Steve replied. All his instincts as a cop told him this was no coincidence. \"But I promise I'll find out\" he said through clenched teeth.\n\n\"All done, Dr Sloan\" a voice cut into their reveries. \"Jesse's responding well. The vomiting urges have gone. What he needs now are rest and fluids.\" She smiled reassuringly at Steve.\n\n\"Can I sit with him, Dad?\" Steve asked anxiously, looking more like a scared child than a self-possessed Police Lieutenant.\n\n\"Of course,\" Mark said smiling. \"He will be woozy and probably sleepy. Don't expect too much of him. As soon as the toxicology reports are in I'll look at releasing him.\" \n\nSteve nodded and hurried into the cubicle. His stomach lurched at the sight of his normally bouncy and energetic young lover looking so pale and drained. The young man's pallor was in stark contrast to his normal healthy glow.\n\n\"Steve?\" the young man's voice was a pained whisper and it galvanized his bigger Mate out of his shocked stillness. Steve was at Jesse's bedside instantly, catching hold of the flailing hand and pressing it to his lips before nuzzling it to his cheek.\n\n\"Don't speak, Love\" Steve said solicitously. He smoothed Jesse's hair away from his forehead and gently stroked the revealed skin. \"Just relax for me, Jess. Dad's got everything under control and I can take you home soon. He placed a finger to Jesse's lips as the fragile young man tried to speak again. He replaced the finger with his lips and felt Jesse relax. \"Not yet, Jess. Shh. Sleep, Love.\" For a few minutes Steve whispered endearments and reassurances interspersed with chaste kisses until he felt Jesse relax fully and a sigh heralded the younger man's descent into sleep. \"I'll find out who did this, Jess\" Steve promised his sleeping lover. \"They'll wish they'd never been born\" he snarled quietly. Making himself as comfortable as possible, Steve settled to keep vigil over Jesse, holding tightly to the smaller man's hand.\n\nThe labs and Amanda worked rapidly to analyse the coffee and Jesse's blood sample. It was an obviously relieved Mark Sloan who confirmed to Steve that it had indeed been an emetic in the drink that had caused Jesse's vomiting. However, Mark was still concerned as Jesse had received a dose more in keeping with someone of Steve's large and bulky build, rather than Jesse' diminutive and slender form. \n\n\"I don't know whether the large dose was deliberate or the result of ignorance\" Mark sighed. The elder Sloan had taken up position sitting on the bed at Jesse's other side, across from his son. He reached out to Jesse's face and stroked the still-pale cheek. \"The good news is he's responding well to treatment and now I know why his reaction was so violent, it's OK to take him home.\"\n\nSteve had tried to put Jesse to bed when they got to Mark's beach house. But the older man was too wired to sleep himself and each time he'd tried to leave Jesse, the younger man had whimpered and held tighter. So for now Steve was stretched on his father's couch and Jesse lay wrapped mummy-like in a thick blanket between Steve's legs. Mark sat in a chair opposite and reassured his concerned son that Jesse was just reacting to the shock and drugs. Steve had no problems with Jesse using his chest as a literal body pillow. He was relieved to see some colour was returning to Jesse's face and that the earlier restlessness was giving way to a deeper, healing sleep. If the smaller man stirred, Steve simply petted and soothed and Jesse quickly settled.\n\n\"You could turn in, Dad\", Steve offered. \"I just want to stay awake a while, see if Jess wakes up and needs anything.\"\n\n\"In all honesty, Steve\", the older Sloan confessed,\" although I know Jess needs sleep, I'd like him to wake up before I turn in. Add to that the things running through my mind and I doubt at this time I could sleep. I keep wondering if the letter and the attack on Jess were connected. I feel they were, but if I'm to suffer retribution, why hurt Jess?\"\n\n\"My instincts say the same thing, Dad\", Steve replied. \"But I don't know why Jesse would be targeted. Possibly the idea is to isolate you from friends.\" As he spoke the big detective instinctively tucked Jesse closer protectively. His arms tightened around the precious bundle held close to his chest.\n\n\"Are you comfortable, Steve?\" Mark asked.\n\n\"As long as Jesse is here and safe I'm fine\" Steve replied.\n\n\"Steve?\" a tiny voice queried.\n\n\"I'm here, Sweetheart\" Steve replied.\n\n\"You 'k?\"\n\n\"I'm fine, Hon\" the bigger man swallowed past the lump in his throat.\n\n\"Mark 'k?\"\n\n\"He's fine too, Babe. You were the one hurt, so how about 'how's Jess?'\"\n\n\"Stomach doesn't feel too good. Tired\" the young doctor confessed. \"Was it an emetic? Do we know who or why?\"\n\nMark brought a glass of water over and helped Steve rearranged Jesse to allow the young man to drink it slowly.\n\n\"You need rest, Jess\" Mark stated. \"Yes, it was an emetic and no we don't know who or why. However, I received a letter warning me of impending retribution. But that doesn't explain why you would be given tainted coffee.\"\n\nSteve helped Jesse to his feet with Mark's assistance and then swept the younger man into his arms.\n\n\"Like Dad says, Jess\" he said. \"You need to rest. Tomorrow I'll start a full investigation.\" He smiled as he felt Jesse's full weight in his arms. The young man was already asleep.\n\n\"Take him to bed, Steve\" Mark smiled. \"I just want to make sure we're locked up secure.\" The older Sloan's smile faded as the two men disappeared. As relieved he was that Jesse was recovering, the concern that he'd been hurt at all weighed heavily on him.\n\n\nThe next couple of days passed without incident. Steve hadn't been able to determine anything about the coffee. It had been left at the Nurse's station with the card for Jesse. No-one had seen who left it. There were no more notes for Mark. Despite this, there was an air of unease. For an experienced detective like Steve Sloan it was extremely hard. His cop instinct warned him that things weren't over. He sighed heavily. He decided to head over to Community General. If nothing else, the sight of his now fully recovered lover would lift his spirits. As he parked his truck, Steve was unaware of the hostile gaze that noted his arrival or of the softly whispered threat of \"Phase two, Sloan.\"\n\nJesse was back in his busy routine. He was aware that both Steve and Mark were still concerned about the note and the attack, but when busy and active, the young doctor effectively dismissed the incident from his mind. As he strode towards his designated ward round, he was approached by a young nurse.\n\n\"I have a call for you, Dr Travis\" she said.\n\n\"Jesse Travis\" the young man said into the receiver.\n\n\"Jesse, it's Steve. I'm hurt. Front car park. Hurry.\" The voice was broken and gravelly and Jesse wouldn't have recognized it as that of his lover. Under other circumstances, that might have made him think twice. But following him being attacked, Jesse immediately believed the assailant had now struck at Steve. Without thought for his own safety, the slender man ran for the lifts. As he entered the lift he saw Amanda.\n\n\"Amanda\" he shouted frantically. \"Tell Mark. Steve's in the front car park, hurt. I'm on my way to him now.\"\n\n\"Right,\" Amanda replied turning to race to Mark's office. As she reached the door, it opened and her eyes opened wide as Steve Sloan followed his father out. Both men stared at her with shock as she cried out \"Oh dear God... Jesse.\"\n\nJesse ran into the car park and quickly located Steve's truck.\n\n\"Steve. Steve!\" he called without answer. \"Please don't be too hurt, please, please\" the young man begged. \"Steve, its Jess. I'm here, Big Guy.\" Jesse was on the verge of a panic attack as he called unsuccessfully for the man he loved. He was so focused on finding Steve, he was oblivious to the car that slowly emerged behind him and began to drive towards him like a predator stalking its prey.\n\nSteve, Mark and Amanda ran out of the hospital in time to see a black sedan accelerate towards an unaware Jesse.\n\n\"Jesse!\" Steve screamed his lover's name, but it was too late. The three of them watched in horror as the car shot forward, clipping Jesse's left side and spinning the young man to the floor. It continued without slowing and vanished from sight. Outside of the car park, the car was abandoned. The driver shedding layers of coat, scarf and hat as they made their way back to Community General to observe the results of their latest attack.\n\nAmanda ran back inside to call for porters and gurney for Jesse as Steve and Mark ran to the stricken young man.\n\n\"Jesse. Jesse, can you hear me?\" Mark asked as he ran his hands over Jesse's body trying to assess the level of damage. Jesse had a cut and bump on the right side of his head and was glancing dazedly around him. Mark was immediately concerned by potential concussion.\n\n\"Steve,\" Jesse murmured' \"Steve's hurt. Gotta find Steve.\" Jesse tried to raise himself to continue his search. \"C..can't find S..Steve.\" Jesse couldn't stop the moan of pain as he tried to move.\n\n\"No, Jess. No, Love\", Steve groaned, trying to immobilize his young lover. He lined himself in front of Jesse to allow the hurt man to see him. \"I'm here, Babe. I'm fine.\"\n\n\"Steve,\" Jesse whispered. He lifted his left hand to caress Steve's face. The tender, loving gesture caused Steve's vision to blur with tears as he caught the hand holding it to his cheek to both receive and give assurance. The caress was frighteningly weak from Jesse and the hand went limp as Jesse's eyes rolled back and he collapsed in Mark's arms.",
        "\"Jesse!\" Steve shouted desperately.\n\n\"He's just fainted, Steve\" Mark assured. \"This wasn't intended to seriously hurt him.\"\n\n\"What...?\" Steve muttered.\n\n\"Put your cop head on, Steve\", Mark instructed softly. \"There was no way that car should have missed hitting him full on. They intended to hit him, to hurt him, but no more.\"\n\n\"Retribution\", Steve snarled. \"By hurting Jesse, they're hurting you. Why doesn't the cowardly bastard come after me? Am I too big for him, that he attacks Jesse like this?\"\n\nFurther discussion was halted as porters arrived and the unconscious Jesse was taken back into the hospital. Mark took no chances that Jesse could have suffered more serious head trauma than a simple bump and arranged CT scans along with x-rays for the young man's bruised body. It was soon established that Jesse had bruises and abrasions on his left side. He had a big bruise on his right shoulder where he impacted with the ground and a bigger one on his left hip where the car clipped him. Lastly, he needed a couple of stitches in the cut to his head and was suffering from a mild concussion. By the time Jesse's full prognosis was known, Steve had been informed the car was found. It had been stolen the day before and the big detective realized that the purpose of its theft was to use it as a weapon.\n\n\"I'm keeping Jesse in overnight,\" Mark advised Steve. Seeing the look of alarm, Mark immediately made calming gestures. \"He's OK, Steve, really. But he's been hurt, shocked and has a mild concussion. He's had a heavy dose of painkillers and he's not going to be capable of looking after himself for a while. One part of me knows you and I could care for him at home. The other knows he's better left here. He'll be fine to go home in the morning.\"\n\n\"I want to stay with him, Dad. I don't want to leave him alone here. Both attacks have been here. Whoever did this knew where I was and where Jesse was. It has to be someone here. I've contacted the Department and in the morning we're going to start checking all new employees for the last six months.\"\n\n\"I'm going home to go through my notes on old cases of mine. I haven't lost a patient for a long time and I don't get the feeling this is related to medical practice anyway\", Mark stated. \"I warned the night staff that you would be staying. There's no problem. They won't bother you.\"\n\n\"Get me a list of names for cases you worked on and I'll run them through the computer. Maybe someone's been released that we don't know about\", Steve mused.\n\n\"Hey there, Dr Sloan, Lieutenant Sloan. Bad business with Dr Travis. Heard he was in a car accident. He's a nice boy. He OK?\"\n\nMark and Steve turned to see they were being addressed by a cleaner with his cart. The man had thin grey hair and flat grey eyes. Mark didn't recognize him, but was touched the man was concerned for Jesse.\n\n\"Yes, he was involved in an incident with a car\", Mark hedged. He glanced unconsciously at the door of Jesse's room. \"He's a bit banged about, but nothing serious. He'll be fine after a couple of days rest.\"\n\n\"Glad to hear it\", the cleaner replied. \"Looks like you two need some rest yourselves. Looking peaky to me. Be seeing you.\" The man pushed his cart away giving a careless wave over his shoulder. As he moved away, neither Sloan saw the cold smile on his face.\n\nFollowing Mark's departure, Steve sat at Jesse's bedside. His hand shook as he reached to allow his fingers to trace where bruising was showing on Jesse's face below the bandaged cut. Holding Jesse's right hand in his left, Steve slid his right hand under the hospital blankets and the thin hospital gown Jesse wore. He lovingly stoked the warm skin of Jesse's abdomen. It was a relaxing gesture that his Mate appreciated, although Steve realized that in Jesse's current condition, the younger man would be unaware of the touch. However, it made the big detective feel better. Touching warm, living flesh reassured him Jesse was really fine. The ringing of the phone in the room had Steve realizing a couple of hours had lapsed already.\n\n\"Sloan\", he barked into the receiver.\n\n\"Steve, it's me,\" Mark Sloan advised. I did some work in my office and have only just got home. I've had a visitor. There's another envelope here. I haven't touched anything.\"\n\n\"Give me twenty minutes,\" Steve replied through clenched teeth. \"I'm not leaving Jesse unprotected. I'll get a team there and come over as well.\"\n\nThe uniformed officer settled himself in the chair outside Jesse's room. He nodded at Steve.\n\n\"No-one unless a doctor or nurse is allowed in. Check him when they leave. Accompany him if anyone wants to move him. That all?\"\n\n\"Yeah \", Steve replied. \"I don't think this assailant will attack again so soon. But I'm not taking chances. This attack has shown he's escalated what he's willing to do. I think I'm justified in believing Jesse's life is in danger. If this attack had gone wrong, Jesse could have been very seriously hurt.\"\n\n\"I'll watch out for him, Steve\", the officer said reassuringly. \"The faster you get out of here, the faster you can get back.\"\n\n\"Thanks, Dave\", Steve smiled grimly.\n\nAt his father's house, Steve found Mark with a team of experts ready to examine the scene. They all watched as Steve pulled on thin gloves and carefully opened the large envelope. The envelope was simply marked with the single word 'Retribution'. As he revealed the contents, Mark heard his gasp of distress. The envelope contained three grainy photographs of Jesse from the vomiting incident.\n\n\"He was there watching\", Mark breathed. \"There were so many people moving around, checking if we needed anything. I couldn't possibly identify them all.\"\n\n\"But why?\" Steve asked thrusting the offending items back in the envelope. With a wave he indicated that the team could begin dusting and checking the room.\n\n\"He's hurting us again. We'd moved on from this and he's brought it all back\" Mark sighed. \"Steve, go back to Jesse\" the older man said gently, squeezing Steve's shoulder. \"There's nothing you can do here. I'd feel better with you with him.\"\n\nWith a sigh, Steve nodded.\n\nOfficer Dave Simmons took in the appearance of the dark-haired doctor and the identity badge proclaiming 'John Smithson'. He nodded at the doctor who fixed him with a cold grey-eyed stare and gave him an insincere smile.\n\n\"Officer\", the doctor muttered. \"Just a quick check on our patient.\"\n\nInside the room the man's face contorted into a manic smile of satisfaction. He quickly took a picture of Jesse in the bed. Hurrying to the bedside he pulled down the covers. His smile went wider as he saw Jesse was just in a thin gown. Unfastening the ties, he uncovered Jesse's body. The pallor of Jesse's skin made the bruised and abraded areas stand out in stark contrast. He took another photograph of Jesse. His hand stroked the bruised flesh of Jesse's side, a look of cunning replacing the smile. He half-turned Jesse, displaying the young man's bruised hip and side as well as his nude body from the hips down. \"I'm sure your big detective lover will like that one, boy\", the phony doctor leered as he rapidly re-dressed the unconscious and helpless younger man. \"Three's the charm, boy\", he said as he walked to the door. He left the room, nodding curtly //Big dumb cop// he thought as he strolled away.\n\nDave looked in on Jesse. The young man was still sleeping soundly. There was evidence of the sheets being disturbed, but nothing else. He quietly shut the door to await the return of Steve Sloan.\n\n\"Ohhh!\" the pained gasp had Steve Sloan awake and aware instantly.\n\n\"Jess, Love\", he said trying to restrain the smaller man gently. \"You were hit by a car. Take it easy, Sweetheart. Lie still for me.\"\n\nHurts,\" the younger man moaned softly. \"Sorry, Steve\", he said sadly.\n\n\"No need to be sorry, Jess,\" said Steve. \"You were hurt trying to come to rescue me.\"\n\n\"Didn't think. Didn't see the car,\" Jesse's voice was barely above a whisper. \"All I could think was that you were out there somewhere, hurt, needing me ...\"\n\nA kiss to Jesse's dry lips effectively silenced the agitated man before he could escalate into a full-blown panic attack.\n\n\"Shh, Love. It's OK. Dad's due to come and see you soon, then I can take you home.\"\n\n\"Just pack me some mega-painkillers and I'll be fine.\" The intuitive young man regarded his Mate carefully. \"What aren't you telling me?\" he asked bluntly. \"Has something happened to Mark?\"\n\n\"No, Babe,\" Steve replied quietly. He took a deep breath. \"Whoever this sick bastard is, he managed to take photographs of you when he poisoned you. He left the pictures at Dad's beach house. Hey, Jess, don't cry, Sweetheart.\" A sob broke free from the hurting young man and despite the physical pain of moving he instinctively reached for the comfort of his lover's arms. Steve wrapped his arms around him gently, fighting back his own tears. Steve cradled Jesse, rocking the distressed man until the sobbing ceased. Jesse was a dead weight and Steve realized the smaller man had cried himself back to sleep. He lay Jesse back down, settling him comfortably. He roughly wiped at his own eyes. Their unknown assailant was effectively tearing his family apart. \n\n\"You alright, Steve?\" Mark asked gently as he entered. He'd seen Steve cradling his young lover and hadn't wanted to intrude.\n\n\"I told Jess about the pictures. He's just cried himself to sleep in my arms.\" Steve looked hard at his father. \"You look like you were awake all night. I feel like I was. Whoever this guy is he's destroying us, Dad.\"\n\n\"It was better to let Jesse know straight away\", Mark assured the big detective. \"If he thought we were trying to hide things he'd be really upset. And I promise you this, Steve, I won't let anyone drive my family apart.\"\n\n\"I want to kill the son of a bitch, Dad. He's hurting Jesse, you, me and like the coward he is, he's safely hiding.\"\n\n\"I've got a list of names from cases I've helped you with. I also remember serving on a Jury a few years ago. I'd like that followed up, too,\" Mark said passing the list to Steve. He then moved past to check on Jesse. Finishing his checks, he smiled at Steve. \"He'll need painkillers, but he's good to go home.\"\n\nJesse was warned he'd be off work for a couple of days until he regained full movement. Steve made a priority to check out all the names on the list provided by his father to check for any convicted felons that had been released. He also left instructions for his father's jury service to be checked out. At the end of the second day that Jesse had been released home, Steve was concerned to be met by his father and not his lover. Mark smiled assuring Steve that Jesse had not long retired, saying he felt a little tired. Mark waved his farewell to return home, leaving Steve to hunt Jesse out in their bedroom. He tapped on the door as he opened it, calling out Jesse's name. The smell of vanilla and ginger permeated the air.\n\n\"Come in, Lover\", Jesse purred. \n\n\"Wow, Jess\", Steve gasped. The room was lit by candles alone and his young lover was lying naked on their bed, his arousal evident. Steve growled low in his throat, his own penis hardening. As he went to step closer, he stopped and hissed angrily at the sight of the bruises that still marred his lover's beautiful body.\n\n\"It's just bruising, Steve\", Jess said sadly, misinterpreting Steve's reaction as one of disgust. \"Please love me, Steve. It's been so long, I need you to love me\", he begged softly. Jesse dropped his head, not wanting Steve to see the tears beginning to fill his eyes as the young man prepared for Steve to reject him.\n\n\"Jess, Sweetheart\", Steve closed the gap between them, sweeping Jesse's naked body into his embrace. \"I want you, too. It was just seeing the bruises and remembering how hurt you were. I'll love you, Jess. I wish I could take the pain away.\"\n\n\"Make me yours again, Steve,\" Jesse pleaded.\n\n\"You're always mine, Angel\", Steve affirmed. He then kissed Jesse tenderly, pressing the slender man back down on the bed. He deepened the kiss before needing to break away for air. As Jesse lay panting softly, Steve ran his tongue down Jesse's cheek and jaw and nibbled gently down the column of Jesse's throat, Steve paused when he reached Jesse's nipples. Suckling and gently biting first one then the other, Steve sensually assaulted the tiny nubs until both were equally hard and aching and Jesse was writhing erotically beneath him. Realizing Jesse's attempts to touch him were thwarted by Steve's clothes, the big detective rapidly stripped. Spreading Jesse's thighs wide, Steve knelt between the smaller man's legs and swallowed Jesse's erection to the root in one swoop. Jesse screamed and bucked, but his bigger Mate's strong arm across his hips prevented Jesse moving too much. Jesse's climax hit hard and fast. As Steve finished swallowing Jesse's sexual surrender, he sat up smiling. \"So beautiful, Angel\", he said. Noting the oil on the warming pad, Steve coated his hands and began a leisurely massage of Jesse's body from neck to feet. Once he had covered Jesse's front, Steve rolled the younger man carefully and repeated the massage on Jesse's back. \n\nFinally, the insistent throb between his legs would no longer be ignored and Steve began to prepare Jesse to accept his solid shaft. He positioned a pillow under Jesse's hips and began to massage the luscious globes. He felt a further jolt to his already inflamed groin each time he displayed Jesse's tiny pucker. Finally he held Jesse open and stared hungrily at Jesse's most private place. The tiny opening to Jesse's body that only he had ever tasted, touched and possessed. It had been Steve's intention to rim Jesse, but he knew he wouldn't be able to last and he desperately wanted to come inside his Mate. He coated a finger was oil and pressed inside the relaxed body beneath him. Spurred on by Jesse's mewls of pleasure and need, Steve quickly added a second, then a third, rotating and scissoring them inside the smaller man. As he pumped three fingers in and out of Jesse's body, he felt the young man pushing back. With a mixture of reverence and desperation, Steve positioned the head of his engorged penis at the stretched opening to Jesse's body. \"Gonna love you, Baby\", he crooned. \"Gonna love you so good. Gonna make you come with me deep inside you, Lover. Love you, Jess. Ah...Jesse!\" Steve groaned as his shaft was enveloped in slick, tight heat. Jesse's channel clung to him as he tried to move, driving his arousal even higher.\n\n\"Love me, Steve\", his Mate begged. \"Fill me, come in me.\" \n\n\"Gonna fill you up, Jess\", Steve promised. \"My seed, deep in your body. You're mine, Jesse, now and always.\" Steve's thrusts were slow and measured and a slight shift of his hips ensured Jesse's sweet spot began to be repeatedly rubbed. Jesse's whimpers of need became a continual keening as Steve drove into him repeatedly. Reaching under Jesse's hips, Steve was gratified to find Jesse's resurgent erection and began to stroke the hard flesh in counterpoint to his thrusts. Jesse tried to push back, but was virtually immobile with 200lbs of detective pressing him into the bed.\n\n\"Oh, Steve\", Jesse cried out. \"Gonna, gonna...oh, oh, STEVE!\"\n\n\"MINE!\" Steve bellowed as Jesse's climax triggered his. He pushed himself as deep inside his Mate as possible reveling in the way Jesse's clenching channel milked his orgasm from him. Wanting to prolong the intimate connection, but not crush his tiny Mate, Steve gently rolled them both sideways and spooned tightly around Jesse as the two men simply shared moments of total, undisturbed intimacy. Steve tightened his arms around Jesse as the younger man whimpered the loss of Steve's softened penis. He then took the opportunity to move, not wanting Jesse to try and put weight on his bruised left side. For long minutes, the two men simply lay together, whispering declarations of love and enjoying intimate loving caresses. Steve then began to croon softly in Jesse's ear whilst gently petting the young man. Within a couple of minutes, Jesse had given in to post-coital sleep. Steve smiled and then moved rapidly. \n\nSteve checked the beach house carefully; pleased to note that Jesse and his father had ensured the house was secure. He checked the locks on the front door and added the final bolts. Moving swiftly into the kitchen, Steve pulled out two thermos flasks. He made soup for one and hot chocolate for the other. He put a pizza in the microwave as he carried the flasks into the bedroom. He covered the pizza with foil and took that through. Finally he carried a bottle of orange juice and a packet of their most indulgent cookies. His last trip was to the lounge to collect a couple of their favourites DVDs. He switched on the small TV; there was now no need to leave their tiny sanctuary till the following morning. He turned to see a half-awake Jesse was searching for him. Moving swiftly to the bed, Steve nestled Jesse into his chest.\n\n\"I'm here, Love\", he soothed. \"Everything we need is in this room. We're gonna veg out here and enjoy being alone and intimate and undisturbed.\n\n\"I like your thinking\", Jesse whispered and reached up to kiss his beloved Mate.\n\nThe next evening, Steve and Jesse were joining Mark and Amanda for dinner. As a precaution, Amanda had sent her two children away for a few days at Mark's insistence. Although Jesse had been the focus of the unknown assailant, the older doctor didn't want to take unnecessary chances. As the four entered Mark's house, their eyes immediately alighted on the large envelope. It was Steve who opened the envelope, after donning plastic gloves. There hadn't been prints on the previous messages, but he couldn't take any chances.\n\n\"Oh God\", Steve gasped. The four of them stared at the photographs. The third had Steve uttering a cry of pain and distress, turning away from the others to stare out of the beach house patio window as he tried to control his fury. Mark and Amanda stared as the 'posed' picture of Jesse in the hospital bed. Jesse backed away from the pictures as if they were a living entity, capable of striking out at the young doctor if he stayed near them. Amanda glanced up, taking in the way the three men were all standing alone and separate from each other and for a moment she thought their adversary had finally succeeded in driving the Sloan family apart. Jesse's tremulous voice had all three turning their attention to the shaking, silently crying young man.\n\n\"I'm sorry, Steve, Mark. I'm s...sorry. P...please don't h...hate m...me. P...please d...don't...\"\n\n\"Never, Jess', Steve cried out hoarsely as he ran to kneel at Jesse's feet. He enfolded the fragile young man into his arms. \"Never. You're the victim here.\"\n\n\"H...he t...touched m...me\", Jesse stuttered. His shaking increased as his shock set in and his sobbing increased. Steve suddenly found that both he and Jesse were being held tight by Mark.\n\n\"You were drugged and unconscious, Jess\", Mark said quietly. \"I love you, so does Amanda and you know Steve adores you. These photographs don't change that. This psycho thinks he can weaken us and drive us apart. He can't, Jess.\"\n\n\"Dad's right, Sweetheart\", Steve assured as he leant Jesse back, feeling the sobs stopping. He gently brushed away the young man's tears. \"I love you. Nothing will change that. Certainly not those photographs.\" He tilted Jesse's head up and claimed Jesse's lips.\n\nMark strode to the table and removed the third picture. Steve, Jesse and Amanda stared as Mark burned it.\n\n\"I'm quite sure you have enough evidence without that one, Steve\", Mark said. \"I see no reason why anyone outside of this room needs to see it.\"\n\n\"There's only one time those photographs could have been taken\", Steve snapped as the stood up. \"That's when Dave was with Jesse. He stayed outside Jesse's room, I was always inside. Dave has a photographic memory. He'll be able to provide us with a good description of the doctor who supposedly checked on Jesse.\" As he spoke, Steve was dialing a number. With a snort he replaced the receiver. \"Dave's out. I'll speak to him first thing in the morning. I'll bring the composite to the hospital tomorrow. If I have to see every person who works there, I'll find them.\"",
        "\"I want to be there\", Jesse said quietly but firmly. \"I have to go back. To show I'm not afraid and it might flush this psycho out.\"\n\n\"I don't want you taking any chances, Jess\", Steve admonished.\n\n\"He can stay with me\", Amanda said brightly. \"We can say he's not fully fit if anyone asks.\"\n\n\"Promise me you'll go nowhere alone, Jess\", Steve said seriously, holding tightly to his smaller Mate's hand. \"I couldn't bear it if I lost you\", Steve husked.\n\n\"I promise\", Jesse smiled and nuzzled into Steve's chest. He was somewhat frightened to return to Community General, but was determined to play his part in catching the psycho.\n\nWhere the intention had been to sow discord, fear and division, the photographs were now seen as the springboard to be able to identify then catch Mark's unknown Nemesis and Jesse's assailant.\n\nSteve strode purposefully towards his father's office in Community General. Things were beginning to move. Dave Simmons had provided him with a good likeness of the phony doctor, the detective beside himself at realizing Jesse was being abused when he was supposed to have protected him. He had gone so far as to request being part of the uniformed protection for Mark and Jesse. There had also been a development with regards to Mark's list. No felons had been released, but the young man convicted at the trial in which Mark had been a juror had died. It was a year ago, but Steve was now following up on family of the convicted man and the other jurors. He saw his father at the end of the corridor, partially turned away from him. Without thinking, Steve hailed the older man.\n\n\"Dad! I have the photofit.\" Steve then silently cursed himself as the cleaner from the other day shuffled away from Mark and the elder Sloan shot Steve a pained glance.\n\n\"Let's get into my office\", Mark strode ahead and Steve shut the door behind him. Steve passed the picture to his father.\n\n\"I doubt he's a doctor\", he said.\n\nMark stared at the face. He knew this face. For a couple of minutes he tried to identify what was off-kilter about the face. Then his eyes opened wide in horror.\n\n\"Not a full head of dark hair\", he said frantically. \"But thin graying hair. The cleaner who showed such concern about Jesse.\" He picked up a phone, but got no response to his call. He was running almost before the receiver went down. \"He was asking about Jesse again. Telling me how difficult it must be for me to have to treat someone I cared about who was hurt\", Mark shouted as Steve followed his father blindly. \"I even told him Jesse was here today with Amanda. She didn't reply to my call or bleep.\"\n\nThe cleaner had heard Steve's announcement about the photofit and was fuming as he rounded a corner. As soon as he did, he abandoned the cart, donning his wig and white coat and transforming himself into a doctor.\n\n\"Too soon\", he snarled as he headed to his intended victim. \"One more hurt and then you can die, boy. You and your big cop lover. Sloan will be all alone. Just like me.\"\n\nMark and Steve arrived at Amanda's lab to find a small crowd around her door.\n\n\"Police\", Steve bellowed. \"Please move aside.\"//Please be OK, Jess// he begged mentally.\n\n\"I'm so sorry. I couldn't protect him\", Amanda sobbed. She knelt at Jesse's side, holding a bloodied dressing to the young man's side. Mark and Steve noted her bruised cheek and cut lip. \"He just burst in saying it was nearly time for Jesse to die. He just slapped me away and stabbed Jesse.\"\n\n\"I'm OK, Steve\", Jesse gasped. \"Hurts, oh God it hurts\", he whimpered as Steve and Mark crouched beside him. Mark gently removed the dressing, opening Jesse's shirt to examine the wound. Mark looked at Steve with relief. \n\n\"It doesn't look too deep. It's meant to hurt, not kill.\"\n\n\"I'll nail this bastard. I swear I will\", Steve vowed.\n\nFurther discussion was halted as Mark followed Jesse as orderlies came to take him to ER. \n\nA couple of hours later saw Amanda, Mark and Jesse back at Mark's house. Jesse had been cleaned up and stitched. He had been told how lucky he was, but everyone in the room knew his attacker hadn't meant to do more than hurt him again. Jesse had been laid down on the couch. From his prone position, Jesse could see Amanda, the bruising quite evident on her cheek. Glancing at Mark, Jesse could see that the normal affable man had lines of fatigue and pain around his eyes. He knew he must look completely wrung out, it was how he felt. However, the young doctor knew that this time he had to find some way of providing reassurance. The others in the room felt responsible for his hurt and felt they had let him down. Taking a deep breath, Jesse hoped he would find the right words.\n\n\"He's not going to win, Guys\", he said huskily. \"I'm not dead and I'm not going to die. 'M tougher than I look. Steve's going to get him first. We know who he is, where he was staying. Steve'll get him.\" Jesse's voice faded away and the young man couldn't stop the yawn as the medication sucked away his strength.\n\n\"No, he won't beat us, Jess\", Mark agreed, coming to Jesse's side. He smoothed Jesse's hair away from his forehead and bent down to kiss the revealed skin. \"Sleep now\", he whispered gently, rhythmically stroking Jesse's forehead. Within seconds, the exhausted man had given in to sleep.\n\nWhen Jesse next awoke, he saw Steve had joined them. From the tightly coiled stance and rhythmic clenching and unclenching of his fists, Jesse deduced Steve hadn't yet caught his attacker.\n\n\"Hey, Big Guy\", Jesse husked, reaching for his lover.\n\n\"Jess, Love\", Steve was Jesse's side instantly. He tucked Jesse's small, slender hand in his own large calloused paw and held tightly. \"How do you feel? Do you need anything?\"\n\n\"Just a bit sore and tired. Like I told Mark and Amanda, 'm tough. Did you find anything?\"\n\n\"His real name is John Smithers. Dad was on the jury that sentenced his only son Johnnie for aggravated burglary three years ago. Johnnie liked to play the hard man and a year ago died in a prison brawl. It seems his father has been targeting the jurors, but his target is their family wherever possible. That's why there hadn't been a link till now. An elderly lady fell downstairs, she was victim two. Victim one was a young married woman. Her husband was mugged and killed in a car-jacking. But she was the juror and only the car-jacking was originally reported. He wasn't really badly hurt in the other instance. Victim three was the daughter of a juror. She was attacked in an attempted mugging. This time, he car-jacked second, pushing her into the road as he drove away. She died in a gas explosion. Dad was his next target and the first juror who, like Smithers, had an only son.\"\n\n\"Then why target, Jesse?\" Mark asked confused. \"Why wasn't he targeting you?\"\n\n\"According to his journal, he knows Jess and I are lovers,\" he said gazing at Jesse. \"Smithers believed that if he targeted Jesse and I knew it was for something to do with you, it would estrange us. I would put distance between us, blaming you for Jesse's hurt. You would then be subject to mental as well as physical pain, the pain of Jesse's hurt and our estrangement. He wanted you to feel twice the pain. The journal began to show he was rambling, making less sense about targeting victims after the second attack. He seemed to want to draw out the attacks as he progressed with his victims. I think Smithers is seriously mentally unbalanced. Unfortunately it hasn't affected his cunning or determination to achieve his aim of punishing all twelve jurors and the sentencing Judge.\" Steve stopped as Jesse began to sit up and the big detective molded the young man to his side. \"We have an APB out on him and we're watching the airport, train and bus stations. Effectively he's now a serial killer. Amanda's leaving town for a few days, just in case he tries to target her. There'll be a black and white watching the house. It's safer if we stay with Dad. I'd be tempted to put you both in a safe house, but Dad believes the best chance we have to catch him is for Dad to be where Smithers can see him.\"\n\n\"I agree,\" Jesse said firmly. \"He has unfinished business with me. If I disappear, so might he.\" Jesse couldn't stop another yawn and Steve smiled affectionately at him.\n\n\"I think it's time for all sore and tired young doctors to be tucked up in bed.\"\n\n\"Not alone?\" Big guileless blue eyes gazed up at the big detective.\n\nNo. Love,\" he said standing and scooping Jesse into his arms. \"Not alone. Dad, I've checked all the locks once...\"\n\nMark stopped him with a gesture.\n\n\"I'll re-check them before I turn in\" the older man confirmed.\n\nThe only incidents the next day were phone calls to Mark where the caller didn't speak. Mark listened to the harsh breathing before the receiver was replaced each time. The call was only a few seconds and so untraceable. The detectives monitoring Mark's calls were of the opinion the man was playing some form of psychological warfare with Mark. The doctor was just happy that Steve was surrounded by detectives and Jesse had his own protection. There was no saying what the maniac would do next. A call from Steve showed the detective's frustration. Smithers seemed to have vanished. Mark knew he couldn't concentrate enough on his work and decided to head home. He called Steve to advise him and was assured that the detective would come home soon.\n\nIt was dark when Steve got home. He glanced at the black and white parked in the shadows and sighed. He would be glad when all this was over. Going into the house, Mark told him Jesse was sleeping. Steve went to check. Jesse lay asleep on their bed. The recent lines of pain and fatigue disappeared while he slept; leaving the doctor looking so young and vulnerable that Steve felt love and protectiveness sweep through him for this special man. Jesse wore a baggy pair of sweatpants and an oversized t-shirt that Steve recognized as his. Bending over Jesse to kiss his cheek, Steve recognized the scent of his own aftershave and realized Jesse must have dabbed some of the t-shirt. Steve swallowed past the lump forming in his throat.//I swear I'll catch this madman, Jess// he mentally promised his sleeping lover. \n\nBack upstairs, the two Slogans found their discussion going back to the case. Neither man was inclined to eat, deciding instead they would wait for Jesse and let the younger man decide what he wanted and they would simply fall in line. An unexpected tap on the front door had Steve cautiously peering through the spy-hole. A uniformed officer stood in the doorway looking at a notebook. Steve opened the door, but wasn't expecting the strength or speed of his attack. The false cop hit Steve hard on the temple almost knocking the big man unconscious immediately and dropping him to his knees. A gag was shoved into his mouth as the dazed man heard his attacker say loudly.\n\n\"Sorry to disturb you, Lieutenant. Just wanted to check you were all OK here.\"\n\nSteve was hauled to his feet and shoved against the wall, his own handcuffs used to restrain him. He was pushed into the living room, a gun covering both him and Mark, as he staggered towards his shocked father.\n\n\"Kneel by Dr Sloan and he can then remove the gag. Don't expect the officers in the black and white to help. They're sleeping soundly.\"\n\n\"You OK, Steve?\" Mark asked as he removed his son's gag.\n\n\"Disgusted at being caught so easy,\" Steve muttered darkly. \"What now, Smithers?\" he snarled.\n\n\"Now I kill you and your beautiful boy, Lieutenant Sloan,\" Smithers said in a conversational tone. \"I was tempted to kill the boy first. But I've seen how much he means to you. You really love him; very touching. You would welcome being killed to join him. So instead you die first and you die praying I let your boy die as quickly. But I'll leave you wondering. Will I kill him quickly, or will I shoot him in the gut and let him die slowly, or perhaps I'll pleasure myself with him first. After all, I have seen just how beautiful his body is. Touched him, too.\"\n\n\"You bastard,\" Steve bellowed. He hoped his voice would alert Jesse, but feared that the toll on the younger man over the past couple of weeks would leave him asleep and defenseless until Smithers moved to attack him.\n\n\"Please,\" Mark begged hoarsely. \"Please don't kill them. They're innocents. They don't deserve to die.\"\n\n\"Thanks to you I lost my only boy, Dr Sloan. There's nothing left in this world for me except pain, loneliness and vengeance. There are still eight more jurors and the Judge who have to pay. I'll find a way to make them all pay for my loss, to suffer as I suffer. Prepare to watch your son die.\"\n\nAs the gun was raised, the men heard a pained shriek.\n\n\"Nooo!\" Jesse launched himself at the man who threatened his Mate. The two men went crashing to the ground in a tangle of arms and legs. \n\n\"Right pants pocket, Dad,\" Steve commanded jumping to his feet despite the stabbing pain in his head at the sudden movement. \"Hurry!\"\n\nJesse wrestled valiantly with his deranged attacker. He knew this was a fight he couldn't hope to win, but so long as it gave Steve a chance for survival, Jesse didn't care. He'd felt his stitches tear when he'd leapt at Smithers and he could feel the wetness as his stab wound bled freely. It was taking both his hands to hold the gun away from both him and those he sought to protect. He could see Smithers grinning maniacally above him. Then as Smithers shifted, the killer struck the young man beneath him a brutal back-handed blow. Jesse's vision greyed and he felt his strength giving out. Grimly he tried to hang on, but the second blow was purposely aimed at the stab wound so recently inflicted. Jesse couldn't stop the scream as agony radiated throughout his already weakened body. Smithers raised the gun and Jesse closed his eyes. \n\nA shot rang out, but Jesse realized he was still alive. Smithers' unwelcome weight across his lower body disappeared and Jesse risked opening his eyes. Steve's concerned face swam in and out of focus above him.\n\n\"Jess,\" Steve gasped. \"Oh dear God, Jess.\" The bigger man's voice broke as he gently touched Jesse's face as though afraid the smaller man would break.\n\n\"Love...you...Steve,\" Jesse whispered. The young man went limp in Steve's protective embrace, the sound of Police sirens from the call he had made the last thing he heard. \n\nJesse had been forced to spend a couple of days in Community General. The torn stitches had been repaired, but an infection had set in and the young man's temperature had spiked alarmingly. Fortunately, the medic had responded well to antibiotics and had been finally allowed home to the care of equally attentive and over-protective lover and surrogate father. Although still somewhat weak from all he had endured, Jesse's strength was returning and on the third day home, was taken for a short walk along the beach as late afternoon came round. Jesse and Steve were still staying at Mark's home. Each of the three men not wanting the other two far away in the aftermath of the Smithers nightmare. Jesse was beginning to feel more like his old self. He walked slowly alongside Mark, the older man's arm slung across Jesse's shoulders. Although it hadn't been Steve's intention to kill Smithers, when he'd seen Jesse helpless with Smithers aiming a gun at him, all Steve's training and innate marksmanship had come to the fore. Knowing there was no possibility of the maniac hurting any of them again was one of the biggest contributory factors to Jesse's recovery. All he had to do now was convince a very protective lover that he wasn't made of glass and he was ready to do more than simply kiss and cuddle, as much as he enjoyed the intimacy. He'd needed the gentle side of his lover when first out of hospital, but he had tried hinting the previous day that he was ready for some more strenuous loving which had apparently gone completely unnoticed by Steve.\n\n\"Hi there,\" Amanda waved as the two men returned to the beach house. \"All ready, Mark?\" she asked smiling. \n\nJesse watched dumb-struck as Mark lifted an overnight bag.\n\n\"Absolutely,\" Mark replied. He smiled at Jesse's obvious confusion and took the opportunity to tip the younger man's head down to kiss the top before ruffling his hair affectionately. \"Tonight, Jess, three's a crowd so I'm taking Amanda for dinner and a movie and staying over at her place.\"\n\n\"But Steve's working ...\" Jesse began.\n\n\"Oh I'm working alright,\" Steve's voice carried through from the living room as he walked through to the patio. \"I'm working at making tonight special. Thanks, Dad, Amanda. Jesse, say goodnight to the nice people.\"\n\n\"Night,\" Jesse murmured. His eyes locked on Steve as the bigger man took his hand and led him away. The younger man oblivious to the giggles as Mark and Amanda left.\n\nSteve led Jesse to the bathroom. A steaming bath had already been run and Jesse could smell vanilla and rose. He smiled tenderly as he noticed the rose petals that floated in the bath. Steve slowly stripped the younger man and kissed each part of the body he exposed. He then helped his smaller Mate into the bath. Jesse couldn't help the moan of appreciation as he sank into the steaming water. He moaned with even more appreciation as Steve slowly undressed himself. Kneeling at the side of the bath, Steve soaped the wash cloth and carefully cleansed his lover's body. Abandoning the wash cloth, Steve soaped his hands, cleansing Jesse's back and genitals, keeping his touches light to keep from arousing Jesse too quickly. Satisfied that Jesse was now completely cleansed, Steve then reached for two brandy balloon glasses. He passed one to Jesse.\n\n\"To you, my Love,\" Steve toasted \"My Sunshine, my life.\"\n\n\"To you,\" Jesse echoed. \"My everything, forever.\" The two men drank. Jesse felt warmer from Steve's heartfelt declaration than either the bath or brandy.\n\nTaking the empty glass from Jesse's hand, Steve assisted the young man to stand and get out of the bath. He wrapped a thick fluffy towel around the slender body and carefully dried his lover. He then scooped up his relaxed Mate and carried him into the bedroom. Jesse smiled at the vanilla and ginger candles from his romantic evening. Steve lay Jesse down on the bed and blanketed his tiny lover with his body. Steve claimed Jesse's lips gently. As Jesse's mouth opened to his, he deepened the kiss, allowing his tongue to map out all of the recesses. Their tongues danced and mated until the need for air forced them apart. Steve trailed his kisses down Jesse's chin, throat and chest until he reached a small pink nipple. Steve licked it slowly, drawing his tongue across it with deliberate pressure, enjoying the feeling of the tiny nub hardening under his attentions. Opening his mouth wide, Steve drew in as much of the sensitive breast as he could; gratified to feel Jesse arch in pleasure beneath him and pleased by the cries of need spilling from his Mate's lips. Leaving one solid nub, Steve repeated the process on its lonesome twin. Finally he drew back to gaze lovingly and possessively at the slender man. \n\nJesse was flushed with arousal, his hair disheveled, and his eyes both dilated and darkened with desire. With a feral smile, Steve swallowed Jesse's straining erection. The taste of pre-come exploded on Steve's tongue and the bigger man knew he wanted more. He worked the innocent flesh mercilessly, using all his knowledge of his Mate's body ruthlessly to take the younger man to the brink of climax only to ease back and start over again. Finally he could stand his own teasing no longer, desirous of the bittersweet essence of his lover. He sucked and swallowed until with a scream Jesse's release flooded his welcoming mouth. He swallowed all the beautiful young man could offer and continued to suckle gently, even as Jesse softened, reluctant to release the flesh. He slowly allowed Jesse's penis to slip from his mouth and smiled at the sated young man.",
        "\"You are so beautiful,\" he murmured softly. \"I love you so much.\"\n\n\"Love you, too, Steve,\" Jesse panted.\n\n\"Want to come inside you, Angel,\" Steve whispered seductively. \"Want you to come with me when I do.\"\n\nJesse's eyes widened at Steve's words and he looked into Steve's face and could see the primal need in the big man's eyes.\n\n\"I'm yours, Steve,\" he affirmed. \"My body is yours. I want to pleasure you.\"\n\nThe submissive words seemed to trigger Steve into action. With a growl, the older man laid assault once again to Jesse's already sensitized nipples and breasts. He licked down Jesse's body, tasting the smaller man's sweat as he did. Reaching Jesse's groin, Steve ignored the still lax penis; instead he sucked each testicle lovingly, rolling them in his mouth. He pressed Jesse's legs wider apart and licked and nipped sensitive inner thighs. He grinned savagely at Jesse's rhythmic thrusting as the younger man began to respond to the sensual assault. Steve could see Jesse was already half-hard and guided the younger man onto his stomach, pillows strategically placed to raise the delectable globes for Steve's pleasure. He licked each cheek, allowing his tongue to slowly move towards Jesse's most private place. Steve's large hands parted Jesse's cheeks, displaying the tiny pucker. Using his tongue, Steve began to jab and lick at the rosebud until it flowered. With a rumble of primeval need, Steve thrust his tongue as deep into Jesse's center as he could reach grunting with the effort, determined to taste all of his lover.\n\nJesse cried out with pleasure as Steve's tongue thrust ruthlessly inside his body again and again. He tried to push backwards to impale himself on the moist intruder, but Steve held him in place whilst he plundered Jesse's unresisting body. Jesse felt Steve's hand trace the length of his resurgent erection and he sobbed his need to his bigger lover.\n\n\"Now, Steve,\" he begged. \"Take me now, need to feel you in me. Need you to come in me.\"\n\n\"Mine, Jess,\" Steve affirmed. He reached for the lube and pressed two fingers inside, knowing his tongue and saliva had already loosened and lubricated the tiny opening. He smiled triumphantly as the fingers slid in without resistance and withdrew them to return with three and rotate and scissor them to stretch Jesse adequately to receive the throbbing organ that pulsed between Steve's legs. \"Can't hurt you, won't hurt you,\" Steve chanted as he readied the smaller man.\n\n\"Wanna see you, Steve,\" Jesse moaned as the flexing fingers brushed his sweet spot. \"Wanna see you enter me, wanna see you come in me.\"\n\n\"Jess,\" Steve groaned. Quickly the older man withdrew his fingers and flipped his Mate onto his back. He groaned again as Jesse pulled his legs back and open to fully display himself to Steve's gaze; a gaze of love and lust in equal measures. Steve knew he couldn't wait any longer. Seeing Jesse open, vulnerable and so needy had the big man covering his rock-hard flesh with a ludicrous amount of gel and pressing the engorged head to Jesse's stretched opening.\n\n\"Fill me, Steve,\" Jesse pleaded softly. \"Need you so much.\"\n\n\"Need you, Baby,\" Steve affirmed. \"Love you, Jess,\" he moaned as he pressed inside Jesse's molten heat. The smaller man's channel clenched tightly around the welcome invader. \"So tight, Sweetheart,\" he ground out as he held back his release. \"So good, Jess.\" He began to move slowly, wanting release, but craving for the moment to last. However, his body's demands quickly became dominant. He covered the smaller body, nipping and kissing face, neck and shoulders as he pounded into the willing body. Cries of pleasure heralded the repeated striking of Jesse's prostate and balancing on his left arm, Steve began to pump Jesse with his gel-slicked right hand. He stroked the hot flesh in counterpoint to his thrusts. He felt the tightening of Jesse's body and the younger man hurtled towards a second climax.\n\n\"Together.\" The word was a plea and a command from Jesse and one Steve both wanted and had to obey. As Jesse's seed sprayed their bodies, Steve's seed pulsed deep into the waiting body below him. Steve pulsed long and hard as Jesse's channel clenched and milked him. Both men screamed the other's name as they climaxed hard. Steve forced himself to remain cognizant long enough to roll to the side, taking his limp lover with him, to avoid crushing the lithe form. For several minutes, Steve lay hovering on the edge of consciousness. He felt his lax penis slip from Jesse's body and mentally mourned their intimate connection. He smiled tenderly at the smaller body in his arms, still out cold from the intensity of their climax. Rolling Jesse onto his back, Steve scrupulously cleaned Jesse's body with his tongue. Cleaning himself more perfunctorily with a baby wipe, he turned back to Jesse to find the young man gazing at him with such an expression of open love and devotion, it almost took Steve's breath away.\n\nHe slid his arms under Jesse's unresisting body to drape the smaller body across his chest. His hands gently stroked down and across Jesse's now exposed back as he kissed the still passion-swollen lips.\n\n\"Love you, Babe,\" Jesse whispered. He snuggled his body against Steve, knowing he wasn't going to stay awake much longer. His body was demanding rest following two explosive orgasms.\n\n\"Love you, Sunshine,\" Steve replied, tucking Jesse's head at the juncture of his neck and shoulder. \"Sleep now, Baby,\" he crooned softly. He smiled at the soft snore he got in return, before settling to join his Mate in sated slumber."
    ],
    "authorname": "Pelaam",
    "tags": [
        "slash"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/diagnosis-murder-ch-01"
}
{
    "title": "The Magic in Your Touch Ch. 17",
    "pages": [
        "Brandon complained all the way to the car. \"I told you, I don't want a bachelor party.\"\n\nKeith shook his head. \"I don't remember asking whether you wanted one or not. Every guy has to have a bachelor party. Back me up, Wayne.\"\n\nWayne grinned. \"I'm not sure, but I think maybe it's a law.\"\n\nLes, home from college for the wedding, opened one of the rear doors on Keith's Stratus and said, \"If I ever talk about getting married, just shoot me.\" He raked his fingertips through his dark red hair, which glowed orange in the glare of the security lights brightening Brandon's driveway. \"I think single's the way to go, but I'm happy for you and Nate.\"\n\nRandy, the youngest Nash brother, also home for the wedding, grabbed the handle of the opposite door. \"I second the well wishes for you and Nate, but unlike Mr. Single-and-Loving-It, here, I hope I do get married.\" His expression turned grim. \"Not that I think I ever will. Gay and bipolar isn't exactly a sought after combination.\" \n\nBrandon climbed into the passenger seat. \"That's bullshit. We've known you were bipolar for years, and it's not like you don't keep it under control with meds. I admit, the gay part was a shock, but since I'm on the verge of marrying the man of my dreams tomorrow, I think you can probably tell that you've got my blessing.\" He turned around to Randy and cracked a grin. \"Everyone says you look just like me with that black hair and those big ole blue eyes. How could anyone not fall for you?\"\n\nRandy ignored that and said, \"Yeah, but you guys are my family. You have to love me.\"\n\nWayne squeezed into the back seat with Les and Randy. \"We do? Damn. I didn't know that.\"\n\nKeith slid behind the wheel just as Randy popped Wayne on the back of the head. \"Cut it out. Don't make me come back there. We're running late enough as it is. Grandpa and Dad were expecting us to be at Shorty's a good half-hour ago.\"\n\nBrandon glared at Keith. \"Hey, it's not my fault the rehearsal ran late. Since Nate started working at Chicago General, his hours have been crazy. He was almost an hour late getting there, himself. And since you're the one who got him the job, it's conceivable that I can blame the whole thing on you.\"\n\nKeith snorted. \"Don't even think about it. Who gets married the first Friday in January, anyway? You could have at least waited until Valentine's Day. At least that makes more sense.\"\n\nBrandon shook his head. \"No way. We had to postpone for two months, anyway. As it was, I was afraid Nate would shut down again, like he did when Amy died. I thank God it didn't happen.\"\n\nWayne stretched his legs out as best he could in the cramped back seat. \"I still can't believe Nate went to Leda's funeral. I'd have been hoping the old bitch rotted in Hell, myself.\"\n\n\"Me, too, but Nate's not like that. I do think he went more for Seth's sake than anything. And there was no way I was gonna let him face Calder alone, no matter how much I hated Leda for what she did.\" He turned around and looked at his brothers as Keith started the car and pulled out of the drive. \"In case I never told you guys, I really appreciate the way you rallied around Nate at the funeral. And at Vaughn's arraignment.\"\n\nKeith shrugged. \"Nate's family. We wanted to be there.\"\n\nWayne said, \"What got to me was the way Calder refused to even look at Nate or Seth during the service. Seth was sobbing his heart out, and Nate was all to pieces, but that old bastard never even glanced their way.\"\n\nLes adjusted his seat belt. \"At least it looks like Vaughn is going to get his. I'm just sorry it took so long to arraign him. No telling when he'll actually go to trial.\"\n\nRandy shook his head. \"I can't believe he's pleading not guilty. Who does he think he's gonna fool?\"\n\nKeith turned the car onto the Reed Highway. \"He probably thinks a jury will feel sorry for him because he lost the use of his legs. Being paralyzed from the waist down is humane compared to what he did to Nate, not to mention to his own wife.\"\n\nDesperate for a topic that didn't make his stomach turn, Brandon said, \"Speaking of Nate, does anybody know where Seth was taking him tonight?\" \n\nRandy laughed. \"Like we'd tell you if we did.\"\n\n\"I'm just curious.\" And if Seth took him to one of those gay strip-clubs, he'd skin him alive.\n\nConversation continued in a teasing vein until Keith whipped the Stratus into the parking lot of Shorty's Pub. Brandon noticed the parking lot was unusually empty, even for nine o'clock on a Thursday night.\n\nBrandon saw his dad and Grandpa Taylor leaning against the backend of his dad's mini-van, or as Brandon liked to call it. The Paw-Paw wagon. Dean used it to haul around all eight of his grandkids in one shot. Brandon and his brothers climbed out of the car and walked over to where the two elders stood.\n\nDean looked down at his watch. \"You're late. Good thing we rented this place for the whole night.\"\n\nNo wonder the pace looked so deserted. Brandon grinned. \"Sorry, Daddy, but you know the rehearsal got a late start. You were there. And I thought we'd never get away from Mama when the thing ended.\"\n\n\"The woman is a sucker for weddings. By the way, did you and Nate ever settle the argument of who's gonna wait at the altar and who's gonna walk down the isle?\"\n\n\"Yep. Nate's a walking and I'm a waiting.\"\n\nGrandpa Taylor said, \"How did you talk Nate into that?\"\n\n\"We flipped for it. I won the coin toss.\" And just the thought of watching Nate come down that isle and into his arms was enough to make his heart beat a little faster.\n\nDean clapped him on the back. \"Well, let's get to it, then. I promised Gale we wouldn't keep you out too late. She's scared to death you'll be all bleary eyed and hung over for the wedding photos.\"\n\nHe led them all into Shorty's. The old pub had been in existence since before Brandon was even born, and little had changed about the place since. Same old neon signs, same vinyl covered chairs and stools. The only difference now was the shiny, silver-foil banner hanging above the cigarette-scared bar which read, \"Congrats Bran and Nate.\"\n\nEarl, the bartender, came out and shook Brandon's hand. \"Congratulations, Sheriff. Shorty says the drinks are on him tonight. What can I get you guys?\"\n\nDean said, \"Bring us all a beer, please, Earl. And tell Shorty we said thanks.\"\n\n\"Will do, Mr. Nash.\"\n\nWhile Earl went to fetch the beer, Dean led them all to a table at the far end of the building. When they were all seated and the drinks arrived, Dean held up his glass. \"To my boy, Brandon. Not only do I thank the Lord every day for making you my son, but now you're giving me a new son, and I didn't even have to watch Gale puke her guts out for nine months to get him.\"\n\nBrandon said, \"Gee, Daddy, that's very, um. . .touching.\"\n\nDean laughed and a round of toasts and well wishes followed. A few minutes later, the door opened and Sam came in. He gave Bran a pat on the back and slumped into the chair beside him. \"Congrats, Boss. Or I guess I should give you my condolences. After all, your bachelorhood is about to die an agonizing death.\"\n\nBrandon's smile went from ear to ear. \"Yeah. Ain't it great?\" He took a swig of his beer. \"Hey, who's on duty tonight?\"\n\nSam shook his head. \"Oh no, you don't. You officially went on vacation at two o'clock this afternoon. For three weeks, that station is not to see or hear from you.\"\n\n\"Yeah, yeah. I hear you.\" Not that he minded. Three weeks alone with Nate was the closest thing to heaven on earth he could think of. He was so intent on what he was going to do for those three weeks, he didn't realize his father was talking to him.\n\n\"I think it's time for phase two, men. We're losing him.\"\n\n\"Sorry. I was just--\"\n\nGrandpa Taylor finished it for him. \"Thinking about Nate. We know. And I'm with Dean. Time for phase two.\"\n\nBrandon sighed. \"I'm afraid to ask, but what's phase two?\"\n\nKeith did his best imitation of an evil cackle. \"Phase two is the entertainment.\"\n\nBrandon was beyond skeptical about what six straight guys and a twenty-year-old gay virgin considered entertainment for a gay man's bachelor party, but he followed his dad and the rest to the back room, anyway.\n\nThe backroom was legendary. Since Shorty's was neither a strictly gay nor a strictly straight establishment, the backroom--where the stage was--had seen its share of varied entertainments, including everything from Best Breast Contests to the Reed Annual Arm Wrestling Championships. Brandon couldn't wait to see what they had in store for him, but he had the sinking feeling they'd hired a stripper. He appreciated the thought, but there was only one man he wanted to see naked.\n\nDean escorted him to a chair placed directly in front of the stage. But instead of sitting down with Bran, he and the others turned to leave.\n\n\"Where are you going?\"\n\n\"This is a one man show, son.\" And before Brandon could ask him any more questions, the lights dimmed, the spotlight came on, and the music started. The others were gone before Brandon even realized it. He shrugged and turned his attention back to the stage.\n\nWhen the curtains parted and a figure dressed in scrubs, a surgical mask, and a cap stepped out onto the stage, Brandon had to fight the urge to flee. It wasn't until the guy started dancing that Brandon's urges shifted from flight to desire. He'd recognize that uncoordinated wiggle anywhere. Nate might work magic as a doctor, but he couldn't dance for beans. Bran cupped his hands in front of his mouth and hollered, \"Take it off, Nate.\"\n\nNate stopped dancing and pulled off the mask. He gave Brandon that crooked grin he loved so much and said, \"How did you know it was me?\"\n\nNate looked so darn cute with that stethoscope draped over his neck and that silly smile on his face, Brandon had to force himself not to grab him up and rip his clothes off. Instead, he said, \"It wasn't hard for me to figure it out, Nate. No offense, baby, but you have no sense of rhythm.\"\n\nNate's eyes took on a wicked gleam. \"I don't know about that. You've never complained about my rhythm before.\" He slid the cap off his head and tossed it on the stage. \"As I recall, last night you thought my rhythm was right in step.\" He drew the scrub shirt over his head and pitched it alongside the hat.\n\nBrandon's body went into overdrive as he stared at Nate's bare chest. He swallowed hard and said. \"You think so, huh?\"\n\n\"Yep. As I remember it, my rhythm last night was right in keeping with your breathing.\" Nate undid the drawstring to his scrub pants and Brandon's mouth went dry. \n\nHe squeaked out, \"My breathing?\"\n\n\"Yes, sir.\" He twitched his hips. \"Don't tell me you've forgotten already? Every time you took a deep breath, I thrust into you. And when you exhaled, I pulled back out and did it again.\" And with that last remark, he grabbed the left leg of his scrub pants and ripped them completely off.\n\nHe was wearing a g-string made of gauze and medical tape. It looked so ridiculous, Brandon couldn't believe it when he got so hard he actually started aching.\n\nNate danced to the edge of the stage. \"So, Nash, you gonna stuff a dollar in my g-string or what?\"\n\nBrandon stood up and pulled a twenty out of his pocket. He didn't have to be asked twice.\n\n#\n\nNate came out of the dressing room, freshly clothed in the jeans and t-shirt he'd brought with him. He walked over to Brandon and grinned at the satisfied smile on his face. He looped his arms around Brandon's neck and pulled him close. \"What are you smiling at?\"\n\nBrandon rocked him back and forth. \"That's the first time I ever made it with a stripper.\"\n\n\"Well, what do you know? That's the first time I've ever been a stripper.\"\n\n\"I never would have guessed. The rip away scrub pants were a nice touch, by the way. What did you do, go to a stripper outlet center?\"\n\nNate snorted. \"Not even close. I'll have you know, those pants were designed by my own personal tailor. Grandma Taylor, to be exact. Get it? Tailor, Taylor?\"\n\nBrandon groaned. \"I want Pastor Oakley to make you swear off those bad puns during the marriage vows.\" He reached down and stroked Nate's cheek. \"So, this whole bachelor party thing was a family effort, huh?\"\n\n\"Yep. They all got together--Seth included--and decided that we both needed a bachelor party. But I think they also knew neither of us really wanted one, so Seth came up with this idea and everyone else pitched in.\"\n\nBrandon kissed the tip of Nate's nose. \"I'll be sure to thank them. And I'm glad Dad and the rest of them stayed in the main room during your performance. Watching us make love on stage might have been overkill, broadminded though they may be.\"\n\n\"No kidding.\" Nate yawned and then stretched in Brandon's arms like a sleepy kitten. \"What time is it?\"\n\nBrandon glanced down at his watch. \"Eleven-thirty. You gonna turn into a pumpkin at midnight?\"\n\n\"Who knew I was marrying a comedian? I promised Gale we wouldn't see each other after midnight. She swears it's bad luck to see each other before the wedding.\"\n\n\"And as I told her when she informed me that you were spending the night at her house instead of in our bed, that tradition is only for straight people.\"\n\nNate smoothed his hand over Brandon's chest. \"Don't fuss at Gale, Bran. She really wants this to be perfect for us.\"\n\n\"I know, but I hate the thought of spending the night away from you.\"\n\nNate reached up to stroke Brandon's face. \"Try not to think about it like that. Look at it this way: after tomorrow, not only will we be spending the rest of our lives together, but we'll have God's blessing to do it.\"\n\nBrandon said, \"That's what I'm counting on.\" Then he lowered his head and covered Nate's mouth with his own.\n\n#\n\nNate paced the confines of Brandon's old room, pausing occasionally to flip through Bran's high school yearbooks and to study the many trophies and pictures lining the shelves and walls. He'd talked a good game to Brandon about the two of them spending the night apart, but the truth was, he ached for the feel of Brandon's warm body next to his.\n\nHe'd almost decided to throw himself on the bed and try to force sleep when someone knocked on the bedroom door. He opened it to find Dean Nash standing there, a ratty blue robe thrown over his pajamas and a tray in his hands.\n\nNate ushered him into the room and watched as Dean set the tray on Brandon's old school desk. He handed over one of the steaming mugs, waited until Nate took a seat on the edge of the bed, then picked up his own mug and settled himself backwards in the desk chair.\n\n\"I thought maybe a cup of Gale's world-famous hot chocolate might help settle your nerves.\" He took in Nate's still fully-dressed form and grinned. \"I was afraid you might be sleeping, but I can see that isn't gonna happen anytime soon.\"\n\nNate took a slow appreciative sip of his drink. \"Thanks, Dean. I don't know if I'm nervous, per say. I think I'm eager more than anything. I'm ready for Brandon and I to put the past behind us and start our new life together. Sort of like a clean slate.\"\n\nDean nodded. \"Perfectly understandable, after all you've been through. Personally, I think you've been a rock through this whole thing, especially for Seth.\"\n\nNate shrugged. \"He needed me. I think this whole ordeal with our parents hit him harder because he wasn't prepared for it. Even though my mother's,\" his voice cracked on the word, but he forced himself to continue. \"Even though my mother's involvement in the attacks was a surprise to me, I've had six years to come to the conclusion that neither of my parents ever really cared about me.\" \n\n\"Speaking of parents, that reminds me. I have something for you.\" Dean reached into the pocket of his robe and pulled out a rolled up scroll tied with a blue ribbon. He handed it to Nate.\n\n\"What is it?\"\n\n\"Well, open it and see.\"\n\nNate tugged the ribbon loose and unrolled the paper. It was a birth certificate. Not a legal one, but the kind found in upscale stationary stores. The type to be filled in by hand and then framed.\n\nIn fancy script, someone had filled in the name space with the words, Nathan Llewellyn Nash. His birthday was listed as September twenty-fourth, the day he and Brandon met. But the best part, the part that touched Nate the most, were the names given for his parents: Gale Taylor Nash and Dean Nash. On the back, all the Nash children--and also Seth--were listed as his siblings.\n\nNate lifted his eyes from the paper to Dean. \"I don't know what to say. I'm stunned.\"\n\nDean reached forward and clapped his hand on Nate's shoulder. \"We figured you might think yourself a little old for an actual adoption, so this was the next best thing.\"\n\n\"This means more to me than you'll ever know, Dean. Thank you.\" \n\n\"That's what father's are for, son.\"\n\n#\n\nBrandon tugged at his tie. \"Are they here, yet?\"\n\n\"Calm down, Bran. Seth just called, and they're on their way.\" Keith sank into one of the plush chairs occupying the church dressing room. \"If you don't start taking it easy, I have Mom's permission to give you a sedative.\"\n\n\"Yeah? Well, you weren't exactly calm and cool on your own wedding day.\" Brandon pulled on his black tux jacket. \"As I recall, you were a nervous wreck.\"\n\n\"There's a difference between being nervous and being a complete mental case.\"\n\n\"I know, but I can't help it.\" He ran his fingers through his tousled hair. \"I've almost lost him so many times, Keith. I can't believe he's finally going to belong to me.\"\n\nKeith came to his feet and patted his brother on the back. \"He's belonged to you since the day you met him, Bran. Do you really think a ceremony is going to make him any more yours?\"\n\nBefore Brandon could answer, Wayne stuck his head in the door. \"It's time to start seating the guests, Keith.\"\n\nWith one final pat on the back for Brandon, Keith left. A few minutes later, the door opened again and Dean Nash came in, laughing when he saw the shape his son was in.\n\n\"Damn, Brandon. I thought I was a mess on my wedding day, but I don't hold a candle to you.\" He fished a comb out of his pocket. \"Do something about your hair. Looks like you've been running your fingers through it.\"\n\nBrandon did his best to tame his hair, griping as he did so. \"Tell me again why I asked you to be my best man?\"\n\nDean moved in front of Brandon and straightened his tie. \"Because you've got good sense. Your brothers make decent ushers, by the way. They've gotten most of the guests taken care of. Now we're just waiting on you.\"\n\n\"Does that mean Nate's here?\"\n\n\"Yep. Got here about ten minutes ago. He's in the other dressing room. We're ready to get to it.\" Dean started for the door, but Brandon stayed him with a hand on his arm.\n\n\"Daddy?\"\n\n\"Yes, Brandon?\" \n\n\"Thank you. For everything.\"\n\nDean drew him into a bone crushing hug. \"You're welcome, son.\" He pulled back and chucked Brandon under the chin. \"Enough mushy stuff. Nate's waiting.\"\n\n#\n\nThere were times in Nate's life that he prayed he'd forget, episodes he sent to the fringes of his memory so he wouldn't go crazy from the pain. The site of his mother's coffin as it was lowered into the ground. The sobbing of his brother at her funeral, and the icy coldness of his newly-released father as Leda Morris was laid to a twisted sort of rest. He hoped to forget the site of Mike in a wheelchair, being arraigned on two counts of murder and two counts of attempted murder, and he also hoped to erase the slight satisfaction he felt knowing that at least a certain amount of punishment had been dealt to Mike when the crash had severed his spinal cord, leaving his body powerless from the waist down. He and Dr. Carson had spent long hours discussing the normality of his feelings, and Nate was finally beginning to rebuild the shattered security he'd momentarily lost.\n\nAs much as Nate had to put behind him, there was so much more to commit to memory, to hold to his heart so he could savor each wonderful episode, over and over. The feel of Brandon's arms as he scooped him up at the scene of the accident, the warmth he felt as the Nash family crowded around him at the hospital that night. The love of his brother as they cried out the misery together, both trying to make room for all the happiness to come. All of those memories would serve him well to block out the anguish of the past. Now, here he was, standing in the church two months later, ready to put Nathan Morris to rest and begin life as Nathan Nash, a new man. ",
        "The door to the dressing room creaked open and Seth slipped in. \"We're almost ready, Nate. The music has started.\"\n\n\"Gotcha.\" He stood up and gave Seth a wicked grin. \"You're looking pretty studly in that tux, brother.\"\n\nSeth laughed. \"Imagine Brandon's surprise when he sees I'm not wearing that puffy pink dress he ordered for me.\"\n\n\"Yeah, well, no one ever said Brandon didn't have a sick sense of humor.\" Nate tugged at his bow tie. \"Have you got the ring?\"\n\n\"Yes and no.\"\n\n\"What do you mean 'yes and no'? Seth, this has to be perfect. I--\"\n\nSeth came over to where Nate stood and put his hands on his shoulders. \"Calm down, Nathan. I know how important this is to you. Do you really think I'd do anything to screw it up?\"\n\nNate took a deep, calming breath. \"No, of course not. I just need everything to go right today. Sorry, Seth but I'm a nervous wreck.\"\n\n\"So what else is new?\" He punched Nate lightly on the arm. \"Lucky for you, to have such an understanding brother.\"\n\nNate rolled his eyes. \"Yeah, yeah. You still haven't told me what you meant by 'yes and no.'\"\n\nSeth's eyes softened. \"I do have a ring, but it isn't the one you bought for Brandon at the jewelry store. I thought maybe you'd like Brandon to have this one instead.\" He pulled a worn velvet bag from his pocket and pressed it into Nate's upturned palm.\n\nNate's fingers caressed the velvet, his fingertips finding the threadbare spots almost from memory. He didn't need to open it to know what was inside, but he found himself loosening the strings and working the bag open, anyway, as he'd done so many times before. The gleam of the overhead lights picked up the sparkle from the sole diamond stationed at the center of the wide gold band. It was a little bigger than he remembered, having been sized up to fit Brandon's larger finger, but there was no mistaking whose ring it was. He looked up from the treasure in his hand to stare at his brother. \"How did you get Grandpa's ring?\"\n\nSeth shrugged. \"It was no big deal. I remembered Grandma Morris showing it to us when we were kids, and I thought maybe you'd like to have it for Brandon. The ring you bought him was great, but I thought maybe this one would mean a little more to you both.\"\n\nNate nodded. \"You know it does. Grandma Morris bought this ring for Grandpa when the two of them barely had two nickels to rub together. She made enough money to buy it by taking in mending work from the neighbors. That was before his business took off, of course.\" He smiled. \"When she found out I was gay, Grandma told me I could have the ring to pass on to my own husband some day. Then she died, and all her personal effects went to Dad.\" He looked at his brother again. \"How did you get it, Seth?\"\n\n\"I went to see Dad a few days ago, Nate.\" Nate started to say something, but Seth stopped him. \"Before you get all riled up, let me explain. When you told me you were getting married the first weekend in January, instead of the day before Thanksgiving like you'd planned, I didn't like it, but I understood. To tell you the truth, I was afraid you would end up feeling guilty about what happened with Mother and postpone it even longer. What with the funeral and Mike's arraignment, I understood that you couldn't go ahead with the wedding as planned, but it still irked me that you and Brandon had to suffer yet again because of what those people did to you. I wanted this day to be as special for you as possible. I figured the ring might help. I remembered the way you always liked to hold it and try it on when we were kids. So, I went to Dad and told him I wanted it. I told him why, too.\"\n\nNate snorted. \"Bet that went over well.\"\n\nSeth grinned. \"Actually, I think he was more surprised to see me standing on his doorstep than anything else. He and I haven't said word one to each other since that day at the sheriff's office. He didn't even look at either one of us at Mother's funeral. I told him what I wanted and why. I told him he owed it to you.\"\n\n\"What did he say to that?\"\n\n\"Not a word. He left me standing there, and went to get the ring. He placed it in my hand, and shut the door in my face. That was it. I took the ring to the same jewelry store where you bought the new one for Brandon, and had it sized.\" He patted his pocket. \"I have the one you ordered too, just in case you'd rather give it to him, instead.\"\n\nNate grabbed Seth and pulled him into a fierce hug. \"You know I don't. Thanks, Seth. I love you.\"\n\nSeth pulled back and cuffed Nate gently on the cheek. \"Right back at you. Now, time to get you hitched.\"\n\n#\n\nIf there was one thing Nate hated, it was being the center of attention. He thought sure he'd be self-conscious as he walked down the isle, knowing everyone was staring at him. But as soon as he saw Brandon waiting for him at the altar, all the other people in the room ceased to exist.\n\nPastor Oakley smiled as Nate took his place beside Brandon. He pulled a small prayer book from the folds of his robes and asked Bran and Nate to face each other.\n\n\"We're assembled here today, as the friends and family of Brandon and Nathan, to witness the joining of two lives, two hearts, and two souls becoming as one.\"\n\n\"Love is not to be taken lightly, but to be savored, cherished. Life is ripe with uncertainty, but the love of a good partner is an anchor to us during times of chaos and doubt. As we are told in the First Epistle of John, chapter four, verse eighteen, 'There is no fear in love; but perfect love casteth out fear. . .' Brandon and Nathan stand before you in love and ask you to rejoice with them as they seek the blessings of Almighty God on their union.\"\n\nThe vows came next, and though he tried to capture every word, Nate could recall very little of the actual dialogue later on. What he did remember was Brandon's face as he slid his ring on Nate's finger, and also the look of pure joy in his eyes when Nate returned the favor.\n\nPastor Oakley closed his prayer book and addressed the congregation. \"It is with great pleasure that I declare Brandon and Nathan joined in the sight of God. May all his blessings be upon you.\"\n\nNate thought his heart would burst, such were the feelings of completeness. Then Brandon leaned forward to kiss him, and Nate lost the ability to think at all.\n\n#\n\nBrandon shivered as Nate licked the icing from his fingers. When it was Nate's turn to feed him, he opened his mouth and allowed Nate to ease a small bite of cake between his lips. Nate groaned as Brandon flicked his tongue across the pad of Nate's index finger.\n\n\"Do you think we can make our exit now?\"\n\nBrandon laughed. \"Don't you want to finish your cake first?\"\n\nThe glow in Nate's eyes was so seductive, Brandon's face flushed. Nate said, \"I'm hungry, but not for cake.\"\n\nBrandon grinned. \"I think maybe we could get away with cutting out early.\" He took Nate's hand and the two of them slipped away from the reception. They'd almost made it to the door when they came face to face with Gale and Grandma Taylor.\n\nThe two women exchanged knowing smiles. Gale said, \"Looks like we've got a couple of deserters on our hands, Mom.\"\n\nGrandma Taylor nodded. \"I should certainly hope so. I'd be worried about this marriage if the desire to be alone together had already waned. They've only been married for four hours.\" She gave them each a tight hug. \"I'd better go find Grandpa. Too much champagne gives him gas.\"\n\nGale shook her head at her mother's retreating back. \"That woman does have a way with words.\" She turned back to Brandon and Nate. \"Okay, you two fugitives. If you're going to leave, we need to do this right. Oh, before I forget, did you get the package from Grandpa and Grandma Nash?\"\n\nBrandon nodded, \"Yes, ma'am, and the card. I know they were pretty upset about not being able to come up for the ceremony, but Grandma's arthritis was acting up again. We understood.\"\n\n\"I know, sweetie.\" She patted his cheek and then looked down at her watch. \"Give the boys fifteen minutes to finish up with the car, and then we'll announce your departure so everyone can line up and throw birdseed at you.\"\n\nBrandon sighed. \"Whatever you think, Mom. I--\" He realized what she'd said. \"Car? What car? My car? Oh, God, what are they doing to my Camaro?\"\n\nGale just laughed and said, \"You'll see.\" Then she sauntered down the hall to gather the well wishers.\n\nAlone in the hallway, Brandon pulled Nate into his arms and rested his forehead against Nate's. \"They're violating my car.\"\n\nNate chuckled. \"It's your own fault, you know. You're the one who insisted on driving the Camaro today instead of my sensible new Buick.\"\n\n\"I know, I know. I should have guessed our brothers would do something like this.\" He kissed Nate's cheek. \"Do you miss the Ford?\"\n\n\"No. After what happened with Mike, I don't think I'd ever be able to enjoy it again. It was nice of Cain to take it back without billing me for the damage.\"\n\nBrandon's eyes darkened. \"It could have been so much worse.\" Just thinking about it was enough to make him feel ill.\n\nNate didn't say anything. He simply held Brandon until the worry left his face.\n\n#\n\nNate reached over and brushed the birdseed out of Brandon's hair. \"Well, that wasn't too bad, now was it?\" \n\n\"Have you actually looked at, my car, Nate?\"\n\nNate snickered. \"Well, I thought the 'Just Married' sign stretched across the rear bumper was a nice touch.\"\n\n\"That was the only nice part. Sixteen condoms filled with whipped cream and attached to the car with magnets. The words, 'Brandon's Gonna Score' written on the windows with white shoe polish. And lets not forget the exciting array of old shoes and tin cans tied to the bumper. When we get to the courthouse, I'm going to un-decorate while you file your paperwork. Then we'll swing by our place to change and then head to the airport.\"\n\nNate was only half listening. He patted his jacket to make certain his papers were still inside. In just a few minutes, Nathan Morris would no longer exist. He'd be Nathan Nash for the rest of his life.\n\nBrandon pulled up to the courthouse and cut the engine. \"You sure you want to do this? No doubts?\"\n\n\"None. Your family is already more like family to me than my own ever was, Seth excluded, of course.\"\n\nBrandon leaned over and kissed his cheek. \"Want me to come in with you? I can un-decorate later if you do.\"\n\n\"Nah. You go ahead and start on the car. I'll be right back.\"\n\nAnd he was. For such a life-changing event, the actual paperwork consisted of little more than handing over the documents and getting a receipt. After being promised he would get confirmation in four to six weeks, Nate was done.\n\nAs he stepped from the dimly lit courthouse to the bright January sunshine flooding the parking lot, Nate wondered why he didn't feel sadness, even the tiniest twinge at leaving his old life behind. He thought of all he'd lost in the five months since his ordeal began, and, except for his beloved Amy, he grieved none of it. No matter how much Dr. Carson assured him that his lack of feeling over loosing his parents was normal under the circumstances, in the back of his mind, he'd wondered if it really was. Then he caught sight of the tall man in the tux, bent over the hood of his car with inflated condoms in hand, and it all became clear to him.\n\nHe didn't grieve his family because Brandon was all the family Nate would ever need. The rest of the crazy Nash clan was just an amazing bonus.\n\nBrandon caught his gaze, and Nate started walking towards him. Towards home.\n\nThe End"
    ],
    "authorname": "wavyscribe",
    "tags": [
        "grandma taylor",
        "grandpa taylor",
        "grandma morris",
        "time phase",
        "weeks nate",
        "prayer book",
        "nate started",
        "nathan nash",
        "feel brandon",
        "brandon leaned"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/the-magic-in-your-touch-ch-17"
}
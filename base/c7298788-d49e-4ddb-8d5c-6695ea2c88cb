{
    "title": "Home for Horny Monsters Ch. 79",
    "pages": [
        "Hi all! Annabelle Hawthorne here with the first chapter of book 6!\n\nReal life has been busy for me, but I should be able to return to my regular posting schedule for a bit. I keep the schedule in my bio, so pop on over and check it to see when you should start anxiously hitting refresh. \n\nNew reader? Welcome! If you are adamant about starting here, this is probably a good place to begin. I try to write the first couple chapters with reminders about past events, so it may help.\n\nReturning reader? Welcome back! We're about to go full throttle into some uncharted territory involving a mythos many of us are well versed in. I'm super excited for the events in this one, and I hope it shows in the words ahead!\n\nThanks to everyone who still comes by to see these words and read these stories. Mike and the girls appreciate it almost as much as I do. Don't forget to throw me some stars when you're done, because it really does help others find this story.\n\nI won't keep you any longer. I'm excited to begin the new year with you, and here's hoping that nothing but good things are coming to all of us!\n\nT'was the Night before Christmas\n\nThe crisp morning air of late December filled Mike Radley's lungs with a chill that was tough to contain. He had to fight the urge to cough, and the stray hair sticking out of his scarf that kept tickling his ear wasn't helping matters. Kneeling down in the snow, he contemplated the small map of his front yard that he had drawn with a gloved finger.\n\n\"Tink think pincer move still best attack.\" The goblin across from him was bundled up in a thick winter jacket that she had altered for herself. Her voice was muffled by the yellow gaiter across her face. Between the magical goggles and the aviator hat she wore, only a small patch of green flesh could be seen along the bridge of her nose. \"Surround invaders, bust heads.\"\n\n\"It won't work,\" Kisa growled. \"There's too many of them.\" The catgirl wore white ski pants and a dark red sweater with a black vest. Her tail twitched behind her as if tuned in to a demented metronome.\n\n\"We need to succeed.\" Mike looked up at them from behind a pair of ski goggles. His eyes had long ago adjusted to the blueish tint. \"The consequences if we fail...\" He shook his head in disgust.\n\n\"You can't hide forever.\" The woman's voice had a mocking tone and came from several different places at once. \"We already found your pet rock, by the way. She's down for the count.\"\n\n\"Dammit!\" Mike smashed his map with a fist. Abella had been hiding in the hedge maze, ready to spring an ambush once the intruders moved past her. Right now, he was hiding in a gap beneath the gazebo, a structure in the center of the maze.\n\n\"Caretaker...\" A masculine voice with a low growl taunted him. \"I'm going to find you.\"\n\n\"Not if I find you first,\" Mike muttered, then looked over at Tink. \"They're in the maze. No pincer attacks. There were four of them left at last count. Are you up for this?\"\n\n\"Tink show no mercy!\" She saluted him so hard that her red braids bobbed across her chest, and then she picked up a thick, wooden club and ducked out the hole.\n\n\"I'll see what I can do,\" Kisa added. \"I don't know how they keep spotting me, though. I think they've found a way to counteract my magic.\" The catgirl had a natural gift for being forgotten, even in plain sight.\n\nHe reached out and put one hand on each of theirs. \"Be careful out there. If we lose...nevermind. C'mon, let's go.\" Mike got on his belly and slid out of the hole. Around them, the frozen hedge maze had formed icy trenches that they now used for defense. Tink and Kisa were short enough that they could hunch over and run without being spotted, but Mike had to crouch to remain hidden.\n\nHeavy footfalls to his left had him holding still while Kisa ran ahead. Mike tilted his head to peek through a gap in the bushes, but was startled to see a large pair of eyes looking back.\n\n\"Found ye!\" The figure leapt over the hedges with little effort, landing in a crouch with the buckles on his leather outfit jingling. Thin wisps of black smoke drifted from the gap in his neck as he threw a pair of snowballs at Mike.\n\nMike's magic surged forward, leaping from his outstretched hands to cause both of the snowballs to explode in mid-air. His precognition triggered, and he leapt hard to the left as a massive snowball crashed down where he had been crouching moments ago.\n\n\"Nice trick!\" He grabbed a double handful of snow and tossed it into the air, his magic striking it with miniature bolts of lightning. The snow vaporized and then froze in the air, the icy mist hovering like fog as he ducked around the corner and then dove over the top of another hedge.\n\n\"Ye can't run forever, Caretaker!\" Suly called to him, but Mike ignored it. He needed distance right now, and the only way to get it was\u2014\n\nTurning a corner, he saw Asterion standing there with a large snow shovel full of snow. The minotaur was wearing a thick black scarf and winter pants. His torso was bare with little flakes of snow catching on the edges of his exposed body hair.\n\nAsterion bellowed and swung the shovel, launching the massive amount of snow. Mike slid under it, but lost his footing when his boot got caught in the branches of a nearby shrub.\n\n\"Shit,\" he muttered as he tried to free himself without losing his boot.\n\nAsterion shoveled some more snow and held it high, ready to dump it. Kisa leapt from between the shrubs and pulled off her hat, which she pushed over Asterion's eyes.\n\n\"Save yours\u2014\" she managed before Asterion accidentally dumped the load of snow on himself and Kisa. Both of them went down with a thud.\n\n\"Asterion, Kisa, you're out!\" Yuki sat on top of an ornamental throne of ice by the front door of the house. She held a steaming cup of hot chocolate in one hand as she surveyed the grounds and acted as the referee.\n\nMike cursed, then moved away from the spot. He moved through the hedges until he came upon a massive pile of snow with a pair of stony wings sticking out of the top.\n\n\"Abella?\" He scraped away the snow from where he thought the gargoyle's face would be. When he got to her, she spat out some snow and frowned. \"Who did this to you?\" he asked.\n\n\"I would hate to ruin the surprise,\" she told him with an emotional smile. \"Also, Suly is right behind you.\"\n\nMike grabbed a handful of snow and threw it as he turned. The dullahan leaned sideways and allowed his head to drop to the side so that the snowball missed. Suly's gloved hand grabbed tightly onto his hair as he threw a snowball with his free hand. The snowball struck Mike in the leg, but didn't count for an elimination.\n\n\"You missed,\" Sulyvahn declared with a grin as his head swung like a pendulum.\n\n\"Maybe,\" Mike replied. \"But she won't.\"\n\nSulyvahn's body turned just as Tink leapt on top of the nearby bushes, her club held low. She swung it as hard as she could, firing a packed snowball from the scoop she had carved into the top. Her aim was amplified by the magical goggles on her head, and she hit Sulyvahn between the eyes hard enough that he dropped his head in the snow. His body spasmed dramatically and fell backward into a drift.\n\n\"Suly is out!\" Yuki declared.\n\n\"Tink crush enemies!\" she yelled while packing her club with more snow. \"No have mercy!\"\n\nA massive snowball almost a foot across shot through the air, smashing into Tink so hard that she vanished, her hat and gloves ripped free by the shrubs as she fell. Mike got to his feet to see Bigfoot standing on the other side of Abella's snow pile.\n\n\"Tink's out!\" Yuki shouted.\n\n\"That was a little overboard, wasn't it?\" he asked, knowing that Tink was okay. The goblin was tough as nails, and he could already hear her swearing from the other side of the hedge.\n\n\"Little booger can take it,\" Bigfoot told him as he scooped up another massive snowball. \"As for you? Let's find out.\"\n\nWhen Bigfoot lifted the snowball over his head with both hands, Mike unzipped his jacket and pulled it open. Strapped to his chest was an antique doll with eerie features. The air filled with maniacal laughter as the snowball Bigfoot held smashed onto his head.\n\n\"Maybe if you were a yeti, these things wouldn't happen to you.\" Mike winked.\n\nBigfoot responded by flipping off Mike with both hands before falling over backward dramatically which sent a cloud of powdered snow up into the air.\n\n\"Bigfoot is down,\" Yuki declared with a grin. \"It's one against one, folks!\" At the base of her throne, the fairy quartet watched eagerly, all of them cheering in delight. At the windows of the house, several rats spectated the event, including Reggie. They had already put together small flags with the letter B on them that they waved excitedly.\n\n\"Technically, it's two against one.\" Beth's voice came from two separate directions. \"Cheating with a doll! Have you no shame?\"\n\n\"We will not go quietly into the night!\" Mike declared dramatically as he scrambled over the hedge and found Tink. He put her hat back on and handed her back her gloves as she pulled off her goggles.\n\n\"Get big revenge for Tink,\" she told him with a wink.\n\n\"You know it.\" He pulled off his ski mask and slid the goggles over his face. The stark whiteness of the world immediately mellowed as several tiny lenses flicked out of hidden locations and dropped down over his eyes. With the goggles on, he could see the most recent tracks in the snow with ease, but that wasn't the best part.\n\nHe scooped up a generous handful of snow and packed it. Holding it in his hand, he cocked his arm back and watched the trajectory line form in front of him. It took some getting used to, but it would give him an important edge against his foe.\n\nHis magic warned him of inbound danger, and he ducked under a volley of snow that came from behind. Months of training had enabled him to fine tune his danger sense, and being able to convince his magic that losing a snowball fight was bad showed just how far he had come. He dodged forward as more snow missiles came from the front, and then did a small cartwheel to the side to avoid yet another volley. It wasn't just his magic that he had trained. If not for spending the last several months training his body to move, he would have been hit.\n\nAnd how was Beth throwing snowballs from several directions at once? Unless she had unlocked some magical ability he was unaware of, it shouldn't be possible. It was almost as if Jenny was attacking him...\n\n\"Jenny?\" He pulled the doll out of her harness. \"Are you secretly a double agent?\"\n\nThe doll blew a psychic raspberry at him, so he planted her head down in a nearby snowdrift. It didn't surprise him at all that she had played both sides.\n\n\"I guess Jenny is out,\" Yuki declared as Mike pulled Jenny free and then ran for cover. The rules for elimination required that snow touch someone's head or face, and he didn't dare risk her wrath by leaving her buried.\n\n\"Now it's one on one,\" Beth declared from multiple directions. However, Mike caught movement from the corner of his eye and threw a snowball in a beautiful arc toward Beth. She ducked behind a hedge and the snowball exploded into powder.\n\n\"It's over,\" Mike asserted. \"You may as well come out and\u2014shit!\"\n\nThe air over Beth's head filled with spiraling balls of snow that rocketed toward him. He crouched behind the hedge and watched them all smack into the Abella pile.\n\n\"That's how she got me,\" Abella informed him. \"Sheer quantity.\"\n\n\"Quality over quantity,\" he declared, then picked up some snow and formed it into a sphere. He watched for movement again and saw the top of Beth's hat. Standing up, he threw the snowball and used his magic to push it out of his hands as fast as possible. It smashed into Beth's head, revealing that she had stuck her hat on a stick.\n\n\"Ah, shit,\" he muttered as Beth stood up to his right. She whirled her hands around dramatically, pulling moisture from the air and forming it into several snowballs all at once.\n\nHe dodged the attack, his magic shattering the few that would have struck him. Beth kept moving forward, her gloved hands glowing as she kept him pinned down. It was only a matter of time until she made a mistake, and he saw his opportunity when she tripped on a root buried beneath the snow.\n\nHe ran toward her, scooping a handful of snow as he went. Realizing she was in a tight spot, Beth summoned snowballs above him that fell as he slid to one side and readied his own snowball.\n\nWith a grunt, he pitched the snowball at Beth's face. She responded by summoning another ball of snow in front of her, and the two balls collided in an icy explosion which filled the air with snowflakes. Beth dove through the cloud of frost, a snowball held tightly in her hand as she tackled Mike to the ground.\n\n\"It ends now, Caretaker!\" She went to smash the ball in his face, but he caught her by the wrist. Beth maneuvered herself so that she was sitting on him, her ass pressing directly into his crotch.\n\n\"N...never!\" he stammered, distracted by the feel of her weight on his body. His magic swirled through him, making him hard, but he imagined the sensation was damperen by the fact that they were both wearing snow pants.\n\nBeth grunted as she tried to shove the snowball into his face. Her dark eyes were wide, revealing the golden flecks that had appeared in her pupils over the last couple of months. They were a result of the magic she had gained, and he wondered what else about her was now different. \"Never...underestimate...a woman...who...doesn't want to do the dishes!\"\n\nAs they fought, her ass rubbed against him hard enough that his magic started to activate. Beth's eyes sparkled as if she was casting a spell, and his concentration finally slipped. She smashed the snowball into his face, sending a chill through his whole body.\n\n\"Victory for team Beth!\" she declared, sitting up and holding her arms in the air. As she pumped her arms, her hips gyrated against his, and he gritted his teeth as he commanded his magic to calm the fuck down.\n\nWith the others in the house, getting zapped by his magic wouldn't be that big of a deal. While he could now use it for defense, its primary function was for transferring sexual energy. But he and Beth didn't have the same relationship that he did with the other women. With the others, he could sense their intent and motives like it was second nature, and it was just easier somehow. With her, he was always in the dark, as if there was a mental block.\n\nIf he was still in therapy, it would definitely be a hot topic.\n\n\"Looks like you're doing the dinner dishes,\" she declared moments before she was bombarded by snowballs from the side.\n\n\"The game is over, Jenny,\" Yuki warned, then leaned to one side to dodge a snowball that slammed into her throne.\n\nBut I'm the house champion! Jenny stood waist-deep in the snow, her arms raised as chunks of snow ripped free from the ground and targeted everyone. The fairies screamed in panic as they fled the scene.\n\n\"Okay, you,\" Bigfoot said as he stood, but an icy maelstrom frosted him from head to toe. He wiped slush out of his eyes and blinked, his dark eyes buried beneath thick fur.\n\nFreeze, freeze all of you! Jenny's laughter filled the air as everyone ran for cover. It wasn't uncommon for Jenny to take things too far, and Mike leaned around the corner of a hedge to help pull Beth to safety.\n\n\"You realize she's getting coal for Christmas?\" Beth wiped the snow off her face. \"Giant sack of it.\"\n\n\"How about a dream car? I find that giving Jenny anything flammable in large quantities is a terrible idea.\" Mike grinned, then handed Beth his hat. \"Temporary truce?\"\n\nBeth smiled, then put his hat on her head. \"Truce. But you're still doing dishes tonight.\"\n\nThe front yard filled with playful screams as everyone moved to safety from the impending ice storm. Yuki descended from her perch and landed next to Jenny, her tails swishing behind her.\n\n\"We may as well do this right,\" she declared, then summoned a fortress of ice that was six feet tall. She plucked Jenny off the ground and set her on the upper walls. \"There, now you can see them.\"\n\n\"Yuki!\" Mike stared at the kitsune through a gap in the hedges. \"You're siding with her?\"\n\n\"Indeed.\" She held her hands over her head and summoned flurries from the sky. \"After all, you guys wouldn't let me play earlier. May as well get in on the action.\"\n\n\"So it's treason, then.\" Mike looked at Beth, then over his shoulder where Tink had appeared. \"Gather the others!\" he yelled with a smile. \"It's time to take down the snow queen, and her little doll, too!\"\n\n<center>\ud83c\udfe0\ud83c\udfe0\ud83c\udfe0</center>\n\nMike pushed open the door to his bedroom, his cheeks bright red from the cold. He peeled off his soaking wet pants and walked through the bathroom to throw them in the closet hamper. Tink had stripped her wet clothes off in the living room and taken them straight to the dryer while the others dispersed to change in their respective rooms.\n\n\"Having a good time, lover?\" Naia was sitting in the tub, her breasts on display. Steam rose from the surface of the water, blotting out the windows.\n\n\"Indeed I am.\" He stripped down until he was naked and put the rest of his clothes in the laundry. The edge of the tub was warm to the touch as he stepped into the warm water. \"Thanks for getting it hot for me.\"\n\n\"It's not the only thing that's hot.\" She winked at him as he sat down next to her. \"Maybe you need something more than a bath?\"\n\n\"I...uh...\" He laughed. \"Sorry, I was trying to think of a clever response. All the blood must have rushed somewhere else.\"\n\n\"I know how it is,\" she told him as she moved above him. \"Someone gets you all bothered and you can't think straight for days.\"\n\n\"That obvious?\"\n\n\"It is.\" Her groin was pressing against his, the shaft of his cock laying along her labia. \"I can feel your magic all knotted up inside. I'm curious how that came about.\"\n\n\"Gee, I don't know. Do you really want me to talk about how hot and bothered a certain friend of mine gets me?\" He touched her face then brushed some hair out of her eyes. \"What if you get jealous?\"\n\n\"It just means I have to work that much harder to hold your interest.\" She moved her pelvis against his, and his cock grew hard. It almost felt like the heat of the water was being pushed into his body. \"Would hate to find out I'm second best,\" she said with a fake pout.\n\n\"You're second to no one,\" he told her. \"And this is, by far, way better than warming up with hot cocoa.\"\n\n\"Is that what the others are doing?\" She winked at him. \"There's plenty of room in here if anyone else wants to join us.\"\n\n\"Oh, I kind of snuck away. Beth convinced the others to come join her at the hot springs, and...\" His voice trailed off as he shook his head sadly. It had been a special place for him and Velvet, and he still couldn't bring himself to go see it. Beth had arranged for a pair of portal sheds in Oregon to connect the springs to the cabin.\n\n\"It's okay,\" she told him, laying her head on his chest. \"You don't have to talk about it if you don't want to. But I'm here to listen if you need me.\"\n\n\"Thanks.\" He held Naia against his body and inhaled her scent. It was the smell of the ocean in his dreams, a private island populated by the women he had swapped soul fragments with. He ran his fingers through her air, curling the thick blue strands with his fingers. It was like petting silk, and due to her aqueous nature, he never had to worry about tangling it.\n\n\"It's not something I'm trying to avoid. On the contrary, I've spent a lot of time confronting it.\" In a way, he had to. He and Velvet had produced an egg from their union, and it would hatch some time next year. But taking care of the future was a separate beast than dealing with the past. \"The last time I was at the springs, I was there with her. If I picture them in my mind, she's there automatically. It's like I've saved that special moment and filed it away for a rainy day.\"",
        "\"But if you see it without her, it's like letting her go one more time.\"\n\nMike smiled, then rubbed a tear from his eye. \"I couldn't have put it better. It's something I want to hold onto, if not for a little while longer.\" And when he finally did confront that magical meeting place, he definitely didn't want to do it in front of everyone and possibly ruin their good mood.\n\n\"You've been through a lot this year, but that was definitely the worst of it.\" Naia leaned away from him and traced the scar tissue on his right arm. \"Speaking of, has this been hurting lately?\"\n\n\"Only if I overdo it while practicing magic.\" He had channeled enough magic through his arm to shatter the bones, and it was sore on occasion. Some people had old football injuries, he had an old magic one. \"Oh, before you make me forget, Ratu wanted me to tell you that she thinks Opal will be ready to come home in a month or so.\"\n\n\"That's great news!\" Opal was a slime girl who had been injured in a fight with an angel. Over the course of several weeks, she had lived in Naia's bathtub while Mike had fed her magic in an attempt to help her regain her proper shape. Eventually, Ratu and Tink had built a special containment unit in the Labyrinth for further treatment. Opal was one of a kind, a being created from the raw elements that angels and demons had been forged from.\n\nMike hadn't understood the process itself, but once Ratu was finished, Opal would gain her independence. In the meantime, he had made sure to stop by every couple of days to visit both women and make sure they had everything they needed.\n\n\"Yeah, I thought so, too. I'm not sure about sleeping arrangements, but that's just because she turns into a puddle when she sleeps. I feel bad buying her a giant bucket as a bedroom set, you know?\" He slid his hands along Naia's thighs, sending tiny streamers of energy into her body. Naia sighed in pleasure, then resumed grinding her pussy on his cock.\n\nThey took their time, sharing tender kisses as she pressed against his throbbing shaft. He grabbed her by the hips and adjusted her aim so that he could penetrate her on the next thrust, then let out a moan of delight as he sank into her warm depths.\n\n\"I'm not in a rush to finish,\" he told her. \"Slow and easy sounds really nice tonight.\" It would also take his mind off of Velvet. Though time was capable of healing all wounds, grief was often an unwelcome visitor.\n\nNaia smiled demurely as she rode him, her hips undulating slowly above his. Her vagina swirled around his cock in a maelstrom of sexual energy, teasing him with its suction. Able to manipulate her innards, Naia's inner folds shifted in stages as her exterior went still. To an outside observer, it would look as if nothing was happening, but Mike was experiencing the best parts of a blowjob while buried deep inside Naia.\n\nShe kissed him as she ran her hands over his chest, pausing to tease his nipples. His hands went to her breasts, and he gave them a playful squeeze. He closed his eyes and buried his face in the crook of her neck, a small orgasm building up inside his body. His magic demanded to be released, but he held back.\n\nSometimes it was nice to take things slow.\n\n\"Ahem.\"\n\nMike opened his eyes to see Yuki standing there, her gaze to the side. He tried to ignore the burning sensation in his cheeks. It wasn't uncommon for the others to spot him having sex with someone else, but they rarely spoke up about it unless they wanted to join in.\n\nNaia turned her head around so far that if she had bones, they would have broken.\n\n\"Hello, Yuki. Are you here to join us?\"\n\nIt was the kitsune's turn to blush. \"Um, no. I knocked, but nobody answered. I thought I heard something, but it was so quiet, I thought that maybe I was wrong.\"\n\n\"We're just taking it slow tonight.\" Naia's calm voice was antithetical to the sensation of fingers and tongues suddenly teasing the head of his cock. The nymph could tell he was close, and was using his embarrassment to her advantage. \"What's on your mind?\"\n\n\"I can come back,\" she said.\n\n\"Nonsense. Mike doesn't mind, don't you?\" She turned to face him and smiled coyly. Her pussy clamped down on his shaft, and he couldn't remember what the question was about.\n\n\"Uh...no?\" His heart pounded in his chest as he was stealth-fucked in front of Yuki. What was the etiquette for such a situation? Naia had given the invite and been declined. Was he supposed to pull out?\n\nAs if sensing his distraction, Naia gripped him tightly with her thighs and pulled him even further inside of her.\n\n\"I was hoping I could use your bath tonight.\" Yuki took a step backward toward the door. \"After...after you are done.\"\n\n\"Um, yeah. Yeah, okay.\" Mike fought to keep his voice steady as Naia buzzed all around him. Something was tugging at his balls and teasing the sensitive skin just below them.\n\n\"Oh, we won't be long.\" Naia winked at him. \"Will we?\"\n\n\"No?\" His eyelid was twitching, but he wasn't sure if anyone could see it.\n\n\"Thank you, I'll just...wait in my room.\" Yuki moved toward the door and paused for a second, as if about to ask something else. Shaking her head, she turned and left.\n\n\"What was that about, do you suppose?\" A naughty grin fixed itself on Naia's face as she lifted her ass and slammed it down onto his thighs, sending a burst of water up the sides of the tub. He didn't worry about the potential mess\u2014Naia pulled any spills back into the tub with little more than a thought.\n\n\"Don't...know...\" Mike grabbed her by the hips and channeled a surge of energy through her body. \"But that was very naughty. Santa might not leave you any presents.\"\n\n\"There's only one thing I want coming down my chimney tonight.\" Naia tilted her head back far enough that he could feel the tips of her hair brush against his thighs. Her pussy squeezed him so hard that he groaned. \"I'm just worried about how such a massive thing will fit through it!\"\n\nMike really wanted to make a joke about opening his package, but it was too late. Naia's pussy was squeezing him in stages, and he blew a massive load deep inside of her. Her eyes lit up from within as she came in response, her whole body rippling in delight as she clung to his body and moaned his name in his ear.\n\nThey sat this way for several minutes, her pussy milking every last drop of cum out of his body. He sighed as all the tension left his muscles, then relaxed completely as she shifted her weight off of him.\n\n\"I should probably clean you up,\" she told him with a grin as she kissed her way down his chest.\n\n\"You're made of water,\" he pointed out. \"I'm already clean.\"\n\n\"I'll double check just to be sure.\" She winked, then slid down his torso and took his still rigid cock in her mouth.\n\n\"Definitely want to be sure,\" he muttered, closing his eyes and leaning back. Naia made cute little mewling sounds as she sucked him hard once more.\n\n<center>\ud83c\udfe0\ud83c\udfe0\ud83c\udfe0</center>\n\nThe elevator ride to the top of the sixty-four floor Manhattan building was long, but Lily endured it. The man standing in front of her winked over his shoulder as he tucked his security card into a pocket.\n\n\"We'll get some food in your belly soon enough,\" he told her. \"You can make it another minute or two.\"\n\n\"Thank you so much, mister.\" She hid a smile. The man, Anton Lee Dalles, was watching her in the reflection of the doors. She clutched the snow-dusted blanket tighter around her body. \"I thought I might freeze to death out there.\"\n\n\"And you might have,\" he replied. \"It's supposed to dip into the single digits tonight. I'm surprised you weren't at one of the shelters.\"\n\n\"There was someone there I would prefer to avoid.\" She gazed adoringly at Anton's back, knowing the man was watching her every movement. \"But I didn't expect it to get so cold.\"\n\nHe licked his lips, and she noticed the fingers of his left hand flexing. He shifted it out of sight, but he couldn't hide his desires from her.\n\nThe elevator doors opened, revealing a small lobby with some chairs and a set of double doors. He pulled a key out of his pocket and unlocked the doors and pushed them open.\n\n\"Thank you,\" she said as she walked in, making sure to drip extra snow on the floor. The suite was enormous, and a large tree had been decorated by the window overlooking the city. Down below, the world had been blanketed in snow. If not for the last minute rush for gifts, the streets would have been largely deserted. \"Wow, you must be loaded, mister!\"\n\n\"I do well enough for myself,\" he told her as he walked over to a mini-bar. \"Would you like something to drink?\"\n\nLily shook her head, allowing thick auburn curls to tumble free of her blanket. \"I'm only nineteen,\" she told him. \"I don't want to cause you any trouble.\"\n\nAnton chuckled, pouring two glasses of scotch. \"This is the penthouse suite,\" he told her. \"Anything that happens here will stay between us.\"\n\nLily crossed the room and accepted the drink with a gloved hand. The fingertips were gone, and she sniffed the scotch. \"Wow, it smells so strong!\"\n\n\"It's fifty years old,\" he told her, then sipped. She mimicked him, letting the liquid fire roll across her tongue. When she swallowed, she coughed dramatically, and he took the glass from her with a smile.\n\n\"It can be an acquired taste,\" he said, then gestured to the kitchen. \"Are you hungry? I could fix you something.\"\n\nLily nodded, allowing him to go through his nice guy act. He spent almost forty minutes preparing her an amazing meal as the sun vanished behind the nearest buildings. It was a gourmet soup made from pork broth with plenty of fresh vegetables chopped up in it. He encouraged her to try some more scotch, and she obliged. A warm buzz filled her body as she allowed the alcohol to combine with whatever he had spiked the soup with.\n\n\"You have such a lovely home,\" she told him as she finished up her meal. \"Are you sure I can stay the night? I would hate to get it dirty with these clothes.\"\n\n\"It isn't a problem,\" he told her with a smile. \"If you're worried about it, you can take a quick shower and change. I have some clothes your size that you can wear.\"\n\n\"Um...\" Lily played coy, crossing her arms. \"Why do you have women's clothes?\"\n\nHe chuckled as he picked up her dishes. \"They belonged to my daughter. She's all grown up now, they're left over from when she lived here. I never got around to re-doing her bedroom is all. I'm always busy with other stuff.\" His voice was reassuring, but she could practically smell his arousal.\n\n\"Is there real soap?\" she asked, making her voice as hopeful as possible.\n\n\"Of course. The maid refills everything, and it isn't like anyone uses that bathroom anymore.\" He gestured down the hall. \"It's the one at the end on the left.\"\n\n\"Thank you.\" Lily stood and giggled as she walked down the hall. It was hard to tell what he had spiked her food with, but it wouldn't matter in the long run. It was easier to let the drugs work on her and play along then try to fake it.\n\nOnce in the bedroom, she stripped out of her clothes and took a shower, making sure to ignore the pinhole camera in the showerhead. She put on a pretty good show of looking pathetic while washing grime out of her hair, knowing that Anton was watching her right now. If he had been watching closely, he would have noticed the small seam along her calves that revealed she wore a pair of boots that were the same color as her skin. The one limitation of her shapeshifting was her inability to hide her cloven feet, but this trick was simply a scaled up version of a magician's fake thumb tip. By the time she was naked, nobody seemed to care about the sudden rigidity of the skin around her ankles.\n\nWhen she came out of the shower, she picked up her dirty clothes and tossed them into the laundry hamper before looking through the rest of the closet. There were plenty of full outfits next to each other, but she picked the blue Christmas dress that had been put in the front. She picked out white tights and pulled them on slowly in view of the camera that had been installed in the nightstand clock. In total, she had noticed three cameras in the room itself by the infrared sensors on them. Demons could see outside the visible spectrum, which helped them immensely when it came to hunting. She wondered if the cameras had been installed before Anton's daughter had moved out, but figured she would know soon enough.\n\nThe bedroom itself was pristine, as if Anton's daughter had left for college one day and never returned. Maybe it was a time capsule to another age, or perhaps something he had staged. She would know more once she was inside his mind.\n\nAfter she left the bedroom, the waif's clothes in the hamper evaporated beneath the lid and turned back into demonic essence before returning unseen to her body.\n\n\"Wow,\" Anton told her, a big smile on his face. \"Anyone ever told you that you clean up well?\"\n\nLily smiled demurely, then accepted some hot cocoa from him. \"I almost feel human again,\" she told him as she sat on one of his leather couches.\n\n\"I bet.\" He drank from his own mug, so she did the same. He had spiked this one with something else. \"But that's what Christmas is about, right? Being kind to your fellow man?\"\n\n\"Or woman.\" She smiled weakly, the muscles in her face going numb.\n\n\"I agree.\" He moved to sit next to her. \"Bet you're feeling sleepy, aren't you?\"\n\n\"A little bit,\" she admitted. \"I think it's all the food I ate. My tummy hasn't been so full in a while. You've been so nice to me, I don't know how I can thank you.\" Her whole body was flooded with heat as the chemical cocktail pushed her brain into overdrive. Was it some type of Ecstasy? It was a signature blend, that was for certain. Her mind was easily able to disconnect from her body, allowing the drugs to do their work without her cognitive functions being impacted.\n\nAnton reached over her shoulders and gave her arm a squeeze. It was gentle at first, but she could feel the iron teeth of a predator behind it.\n\n\"If I'm being honest, I'm just grateful to have company for Christmas Eve.\" He sipped at his cocoa, then set it down on the glass table. He picked up a remote and clicked a button, causing the nearby fireplace to turn on. Mechanical gears whirred as curtains drew themselves across the large windows. \"And you even look a little bit like my daughter, so it's a bonus for me.\"\n\nLily laughed, her lips sloppy as they didn't move quite right. \"Was she daddy's little girl?\" she asked, her voice slightly slurred.\n\n\"Very much,\" he replied, his voice tender.\n\n\"I have daddy issues,\" she blurted out, letting tears flow. \"We had a big fight, I haven't seen him in a very long time. I wish I could show him how much I loved him.\"\n\nAnton squeezed her against him, and she gave him a token resistance at first before giving in. As she leaned her head on his shoulder, she manifested her tail and stabbed him in the neck.\n\nThe descent into the Dreamscape was almost instantaneous for her. While his soul struggled to piece together the world, she guided it into place. It was a carbon copy of his penthouse, and she guided its completion to mimic how it had been in the real world. It was an almost seamless transition\u2014she felt him tense up for a moment, as if suspecting the change, then relax when she leaned into him.\n\nIn the real world, she unzipped his pants to expose his cock.\n\n\"So you miss your father?\" He placed a hand on the back of her head and ran his fingers through her hair.\n\n\"What are you doing?\" she asked, keeping up the act.\n\n\"Sorry, I guess you remind me of my daughter. I forgot myself.\" He removed his hand, but she could feel the tension in his soul. It was a simple matter to flit through his memories, to see exactly what he had planned for her. Lily smiled in the real world as she sucked his cock into her mouth and bobbed up and down.\n\n\"It's okay,\" she told him in a meek voice. \"It makes me feel like I'm home. When things weren't bad.\"\n\nHe grinned, his soul blazing in triumph. His thoughts floated in the background of her mind, and she altered the dream to match. The straps of her dress slipped down, revealing her shoulder, and she pushed her arms together so that he got an eyeful of cleavage when he looked down at her. It was easy enough to add a small freckle on the inside of her left breast. His daughter had one, and she could feel his pulse quicken when he noticed it.\n\nIn the Dreamscape, her body went limp from the drugs he had slipped her. In the real world, her wings extended behind her as she purged her body of toxins while blowing Anton on his couch, eager to harvest both his seed and his soul.\n\nAnton guided Lily to the couch, listening to her incoherent mumbling as he pulled up her skirt to reveal faded white panties. Lily watched with disinterest from a different point of view as he ripped the clothes off of her and put himself between her legs.\n\n\"So what do we have here?\" Mike stood in the kitchen now, sniffing the pot that the soup had been cooked in. It wasn't actually Mike, but rather a fragment of his soul that lived and grew inside her.\n\n\"Serial killer,\" Lily replied, joining him at the counter. Anton was taking his time with her body on the couch, undressing her in stages as he snapped pictures with his phone. \"The bastard kills and rapes women who look like his daughter.\"\n\nMike paused, a deep frown on his face. \"Don't you mean rapes and kills?\"\n\nShe shrugged. \"According to his memories, it's interchangeable.\"\n\n\"Disgusting.\" Mike swirled the pot around, summoning up a fresh batch of soup. \"Decent chef, though. So why his daughter?\"\n\n\"Repressed sexual whatever. The why doesn't really matter, I give him two minutes tops in the real world.\" As she spoke to Mike in the Dreamscape, she could sense the beginning of Anton's orgasm in the real world. \"But Christmas Eve is special. He finds a homeless girl or a hooker who reminds him of his daughter, spends all night with her here at his home, then dumps the body in the river on his way to spend Christmas Day with his daughter and her family. It's pretty disgusting.\"\n\n\"Agreed.\" Mike poured himself a bowl of soup, then made one for Lily. \"How did you find him?\"\n\n\"A predator's instincts.\" She accepted the soup and sat with him. \"I was on the hunt, and so was he. Was curious what his vice was, and now here we are.\"\n\n\"Horrible. He deserves what's coming.\" He ate his meal, ignoring Anton's actions in the background. Mike's soul fragment was almost always present in the Dreamscape now, and had witnessed some pretty terrible things from her choice in prey. Ever since Mike had become her master, she could only feed on the wicked.\n\nNot that she minded. It was far preferable to the innocents she had been forced to prey upon for the last few centuries.\n\nAnton had posed Lily a dozen different ways, snapping pictures the entire time. Though seconds had passed in the real world, it had been a few hours in the Dreamscape. He was stroking himself while taking pictures, the muscles on his abdomen flexing as he blew his first load on Lily's chest. In the real world, Lily began swallowing Anton's load, pulling his soul with it.\n\n\"That's my cue.\" Lily stepped away from the counter and hopped back into her dream body. She fast-forwarded the dream until it was almost sunrise. Anton, thinking he had spent an evening violating his prey, was ready to seal the deal by strangling her.\n\nHe put on a pair of black gloves and squeezed Lily by the neck. She took a few wheezing breaths, then opened her eyes and seized him by the throat. When she squeezed, his eyes bulged in his head at the sheer strength of her grip.\n\n\"Wh...what?\" Anton struggled for air as the lithe thing beneath him cut off the oxygen to his brain. He stood, and Lily followed, wrapping her legs around his waist so that he couldn't escape. Anton was strong from years of preparation, working out to ensure he could dump a body without getting exhausted.",
        "But this was the Dreamscape, and Lily was fully in charge. No amount of Cross Fit would help him here. Anton flung Lily around helplessly, unable to knock her off or escape as she continued to squeeze him by the throat.\n\n\"Are you gonna rip off his balls?\" Mike asked.\n\n\"Nah,\" she replied casually. Anton couldn't hear her when she spoke, all he could see was the face of his own daughter as Lily transformed the rest of the way into her. \"I've got something better planned for him. It is Christmas, after all.\"\n\nAnton managed to break Lily's grip by slamming her into a chair and fled for the lobby. She gave chase with no intent to catch him, delighting in seeing the relief in his eyes as he got into the elevator and managed to close the doors before she could get there. A dial appeared over the elevator with a number at the top.\n\n\"Is that for my benefit?\" Mike asked as he sat on one of the couches.\n\n\"Nah, he'll spot it eventually.\" The number was 666, and the dial slowly did a full rotation before settling at the top once more. Lily waved her hand, transforming the private area into the lobby of the building.\n\nWith a loud ding, the elevator doors opened, and Anton stumbled out.\n\n\"Help me! Somebody help!\" His face was covered in scratches as he ran for the revolving door. It was snowing outside, and as he pushed his way through the door, the world transformed into his apartment.\n\n\"Ooh, clever.\" Mike watched with interest as Anton sprinted back into the lobby so fast that he tripped and fell, landing on his face. A lobby attendant appeared from behind the desk, and she ran over to assist him.\n\n\"Sir, are you okay?\" she asked.\n\n\"Please, help me, I...\" his eyes widened when he recognized the lobby attendant.\n\n\"Sure, I'll help you.\" The attendant herself was one of the thousands of souls Lily had consumed, forced to do her bidding for all eternity. The soul was wearing the face of a young woman named Michelle who had been murdered by Anton almost twenty years ago. He had gone through his collection enough times that all of his victims were burned into his brain. What he had considered a treasure trove of memories was about to become the arsenal that undid him.\n\nAnton shrieked in horror and crawled free before Michelle could do anything to him. He made it into the stairwell and let out a primal scream.\n\n\"What's in there?\" Mike asked.\n\n\"He's back in his apartment.\" Lily licked her lips as her mind flitted to the real world. Anton's soul stretched like a rubber band from his body to her mouth, then snapped free so she could consume it. Over the days ahead, she would strip him bare, consuming his very identity until his soul was little more than a tortured husk that would do her bidding. \"Only this time, he's a girl, and I'm going to make him relive each of his murders from the woman's point of view.\"\n\n\"Fitting.\" Mike screwed up his face in contemplation. \"But is it enough?\"\n\nShe shrugged. \"What is true justice? If I steal twenty dollars from someone, I could be forced to give it back. It undoes the deed, but not the harm itself. But when it comes to a life, what then? Does killing this man undo the harm he's caused to the girls he murdered? Do their relatives miraculously feel better? An eternity in Hell is, for most people, the best they can ever hope for.\"\n\nHe shrugged. \"I guess not. It's probably a question for someone higher up.\"\n\n\"Yeah, well they aren't talking to anyone.\" Lily stepped out of the Dreamscape and back into the real world. Anton lay reclined on his couch, his eyes locked on the ceiling as his body continued to live on without him. Doctors would be puzzled, and experts would be brought in to evaluate his condition. His daughter, wherever she was, would probably spend her life savings keeping the man alive.\n\nAfter consuming a soul, she became privy to all its secrets. Sifting through Anton's memories revealed that he had been a devoted father with demented tastes. He had shown nothing but care and kindness for his offspring, and his eventual decline would cause no small amount of worry and financial destruction.\n\n\"But not if we pull the band-aid off,\" Lily muttered. She wandered through Anton's home until she found his collection. It was hidden behind a plate in the back of his closet that was held shut by magnetic locks. Inside the hole was a small box with several solid state drives, each one labeled with the initials of the woman he had murdered.\n\nAnton's daughter would no doubt come looking for her dad once he failed to show up for Christmas. Based on Anton's warped memories, Lily couldn't be certain whether his daughter would do the right thing and attempt to bring closure to the families of the murdered women.\n\n\"Damnit, Romeo, you're making me soft.\" She reached into her corset and pulled out a small clamshell phone. She typed out a quick message as she stacked the drives next to Anton's laptop, then set the phone next to them.\n\nEulalie would know what to do with all of this. After hitting send, Eulalie would have one of the rats chew a portal to Anton's apartment to retrieve the computer and the drives within the hour. It wasn't the first time they'd done this\u2014in fact, it had become part of Lily's routine to try and out the murderous people she consumed. Since Lily knew all of Anton's passwords, Eulalie wouldn't even need to break into his files. Any digital evidence of Lily's intrusion would be erased, and the rest would be turned over to the authorities.\n\nEventually, the police would know who the murdered girls were, which might bring closure to their families. Satisfied that she had done her part, Lily sauntered back into Anton's living room and contemplated the man on the couch. She straddled his body and grabbed his head with both hands.\n\nShe twisted his head around hard enough that it faced backward. His poor daughter would be horrified to discover Anton had been murdered, but now the poor girl wouldn't go broke trying to fix the piece of shit.\n\nThe deed committed, she wandered over to the mini-bar and contemplated the selection. There were some very fine spirits here, and she picked up an unopened bottle of whiskey.\n\n\"Pappy Van Winkle\" she read aloud. From Anton's memory, the shit was expensive, and would probably be a decent present for Mike. Of course, she was looking forward to giving him his real present later. He had always been very careful not to ask her to shapeshift during sex, so she was curious what kink he would have her enact.\n\nSatisfied that her work was done, she walked over to the curtains and pulled them open to reveal the city. Down below, the world kept moving as it always had, the inhabitants of New York unaware that she had cauterized an unseen cancer from it.\n\n\"Merry Christmas, you worthless bastards. You're fucking welcome!\" she yelled as she smacked her hand against the glass. Smiling, she contemplated opening the whiskey and drinking some of it. After all, she had done her good deed for the holiday. Smirking, she sank into the Dreamscape to check on Anton and make certain he was adequately miserable.\n\nHis soul cried out in agony as if on fire, and she slowed time in the Dreamscape to a crawl. Minutes in the real world would become days in here, which meant that Anton would experience a lifetime of torment before Lily finished feasting on him. Satisfied that his demise wouldn't be quick, she stayed to watch as he experienced the murder of Michelle from her point of view. Hours passed as Anton was eventually strangled by a copy of himself, and Lily smirked as the dream faded and he was escorted in again by his clone. His second victim had taken hours to die from strangulation, and she couldn't wait to watch as Anton gasped for breath while hanging in his own bedroom closet.\n\nA powerful cramp formed inside of her physical body, causing her to drop the bottle of whiskey. It fell in slow motion, then shattered in a burst of glass on the cold marble at her feet. With her mind half in the Dreamscape, she watched as the falling snow outside slowed to a crawl. Down below, moving cars froze in place on the streets, as if someone had hit pause on a movie.\n\nWas she under attack? What was going on? If not for her accelerated state of mind, she doubted she would have even had time to respond to whatever was happening. Her thoughts were muddy as she dug deep into her core and activated the magic that would take her directly to Mike. The world outside went still as Anton's apartment disappeared in a puff of smoke.\n\n<center>\ud83c\udfe0\ud83c\udfe0\ud83c\udfe0</center>\n\nThe fire crackled in the fireplace as Mike sat in his new recliner. It had been an early gift from Eulalie, who was spending a quiet evening with Bigfoot. It was her first Christmas without her father and her sister, and she had decided that a quiet evening with her uncle at the cabin was the best course of action.\n\nThe house was quiet. Sofia had dropped by long enough to make dinner for everyone, then went back to the Library while Mike, Tink, and Kisa started working on the dishes. There was apparently a rush on new stories being published right before Christmas and she was already behind in cataloging them.\n\nKisa and Tink shared hot cocoa by the hearth, both of them wearing package bows that they had stuck to each other. The Christmas tree was packed with presents underneath, most of them from Mike to the others. Even though many of the members of the house didn't celebrate the holiday, Mike had gone ahead and bought them gifts anyway. To him, it had always been more about giving than receiving.\n\n\"Do you think we'll see Santa tonight?\" Death sat in a recliner of his own. It was far narrower than Mike's and made of black leather. He had a plate of biscuits in his lap and would occasionally toss one into Tick Tock's mouth. The mimic was currently imitating a large present with green wrapping paper, and would lick its lips with a ribbon-shaped tongue.\n\n\"I don't know. You might fall asleep too soon.\" Mike tried to hide his smile.\n\n\"You know that I do not sleep, Mike Radley.\" Death turned his gaze back to the fireplace. \"Though do you suppose that I'm a liability? Perhaps he will know that I'm awake, and choose not to descend down our chimney tonight. Mike Radley, this was mentioned in one of your Christmas songs!\"\n\n\"Those songs are for children.\" Yuki walked into the living room with a towel wrapped around her head. She was wearing a thick white bathrobe that matched the bushy tips of her tails. \"The whole holiday is a scam.\"\n\nMike frowned. Yuki struggled with Christmas, but he didn't blame her. The few Christmases she had celebrated with Emily had been poisoned by later deeds. Last year, she had locked herself in her room and refused to come out. He had been extremely happy when she offered to judge the snowball fight earlier while Sofia finished up Christmas dinner for everyone, and even more so when she had joined Jenny in the free-for-all that had frozen him half to death afterward.\n\n\"It is not a scam,\" Death replied. \"Surely the whole world isn't in on the same conspiracy!\"\n\nYuki rolled her eyes. \"Look, you all have fun sucking on candy canes, but I'm going to bed.\" She looked over at Mike and gave him a small bow. \"Thanks for letting me use the bath tonight.\"\n\n\"No problem.\" He gave her a smile. \"You sure you don't want to join us?\"\n\nThe kitsune's eyes scanned the room, then settled on the tree. She snorted, then shook her head. \"I'm good. Guess I'll see you all in the morning.\"\n\n\"Goodnight, then.\" He watched as she ascended the stairs, then waited until he heard the tell-tale click of her bedroom door above. \"Wish she enjoyed the holiday like we do.\"\n\n\"Ah, but if everyone was the same, then nobody would be different!\" Death chuckled to himself, then sat forward. \"But perhaps you can enlighten me on why she called Christmas a scam?\"\n\n\"Tink, maybe ease up on the booze,\" he said, desperate to change the subject. Tink giggled by the fireplace, then poured some more alcohol from a flask into her hot cocoa before offering some to Kisa. The goblin's cheeks were flush, and her eyelids drooping.\n\nKisa abstained. Her cat biology didn't pair well with alcohol.\n\n\"Christmas is Tink's favorite holiday!\" Tink declared while waving her mug around. \"Get big presents, sometimes eat too many cookies and get big sick.\"\n\nAt the mention of cookies, Kisa grabbed the nearby plate and moved it somewhere else. The pom pom on her Santa hat hung over her shoulders, bouncing along her collar bone as she stuck her head under the tree and rearranged a few of the presents.\n\n\"Boo!\" Cecilia appeared from the tree, her ethereal body passing through its branches. Kisa hissed and scrambled backwards, her hair standing on end. The banshee waved her hands around menacingly over the catgirl. \"I'm the ghost of Christmas past!\"\n\n\"Fuck you,\" Kisa replied, then ripped off her hat and threw it at Cecilia. The banshee caught the hat and stuck it on her head. While adjusting it, the red streak in her hair poked out from beneath, and she swept it behind one ear. Tink cackled where she sat, spilling some of her hot cocoa.\n\n\"Are we playing A Christmas Carol?\" Death tossed the last of the biscuits to Tick Tock, then leaned forward in his chair. He let out a raspy breath as he pointed dramatically at Kisa.\n\n\"Ew, stop that shit.\" Kisa hopped into Mike's lap and put her head on his shoulder. \"If you don't protect me, I'll bite you.\"\n\nHe hugged her tight. \"Okay, everyone, lay off. That goes double for you, Tink.\"\n\nTink bared her fangs at him. \"Husband kiss Tink's butt. Maybe kiss something else, too.\" She turned around and bent over, revealing her bare ass.\n\nMike hoped nobody bought Tink underwear. If so, it was money wasted. Cecilia leaned down to kiss Mike on the cheek, then gave Kisa her hat back. With a wink, she faded from sight.\n\n\"I think Christmas may be my favorite holiday.\" Death sat back in his chair and stared at the ceiling. \"I think it's all the bright lights that people put out. I'm rather surprised you didn't put any up.\"\n\n\"You can blame Quetzalli for that,\" Mike responded. By some twist of fate, Tink and the storm dragon had discovered that sticking a plug in Quetzalli's nostrils would allow her to power the lights. This had led to an experiment to see how many lights Quetzalli could power, which had eventually resulted in the destruction of thousands of LED lights. There was a shortage now, and he had been unable to find suitable replacements in time.\n\n\"Is that why she isn't here tonight?\" Death had spent most of his time the last week wandering the city to look at decorations. Most people couldn't see him, and the few who did often turned away and forgot. The visage of Death was rarely a welcome sight, doubly so right before Christmas.\n\n\"No. Dana wanted to reconnect with her family and took Quetzalli with her for emotional support. She's posing as the new girlfriend to account for all the time she's been missing, which will probably cause problems.\"\n\n\"Because of her horn?\" Death asked.\n\nMike shook his head. \"Ratu enchanted a napkin ring to hide it. As long as Quetzalli doesn't headbutt somebody, it'll stay hidden. It's the fact that she looks like she's twice Dana's age that could rile Dana's parents up.\" When Quetzalli had been transformed into a human by the Fairy Queen, she had been given the form of a woman in her mid-to-late forties.\n\n\"I am uncertain why her parents would mind,\" Death replied. \"Even though the relationship is a farce, wouldn't they appreciate that their daughter has found somebody with wisdom and maturity like their own?\"\n\n\"I think, for most people, it's the fear that the wisdom and maturity are being used to manipulate the younger partner. Think about when you first arrived at the house. There were so many things for you to learn, you probably would have believed anything we told you.\"\n\nDeath nodded in understanding. \"Not anything, but yes, I think I see your point. I would have been easy to manipulate.\"\n\n\"You still are,\" Kisa grumbled. \"Have you found the Krampus yet?\"\n\n\"What?\" Mike looked at Kisa. \"What are you talking about?\"\n\nDeath frowned, then set down his tea and folded his hands. \"Tinker Radley informed me that the Krampus was a demon who would steal toys from children. I regret that I have been unable to find him these last few days.\"\n\n\"Tink!\" Mike leaned forward far enough in his chair that Kisa had to slide out. \"Did you tell Death he had to save Christmas by sending him on a snipe hunt?\"\n\n\"I was unable to find the snipe this summer,\" Death added. \"But luckily, it never ate all the roses in our garden.\"\n\nTink cackled so hard that she fell over on her back. \"Bone face try so hard to save Christmas, scare way more kids in the process!\"\n\n\"Scared children? How?\" Mike looked up at Death. \"What did you do?\"\n\n\"Tinker Radley told me that the Krampus preyed on vulnerable children.\" Death nodded sagely. \"So she suggested I look at the Children's Hospital, and so many of the kids there could see me, and\u2014\"\n\nMike was out of his chair, ready to grab the troublesome goblin, but she saw him coming and scurried under the tree.\n\n\"Too far, Tink! Too far!\" He crouched down and pushed some presents out of the way. Tink had pressed herself against the back wall beneath the tree, and was just out of reach. She blew a raspberry at Mike and tried to stand up behind the tree.\n\nThe back door slammed, and Beth walked into the living room with a bundle of packages under her arms. Behind her, Suly carried in several more, both of his arms full.\n\n\"Sorry 'bout the door,\" he said. \"Gettin' right windy out there, can hardly see.\"\n\nMike looked up at Suly, then cursed when Tink bolted from behind the tree and disappeared up the stairs.\n\n\"Is there room under that tree?\" Beth sat down with her knees folded beneath her and handed Mike the gifts. He couldn't help but notice the cream-colored tights under her burgundy sweater dress.\n\n\"Uh, yeah.\" He shifted packages around and helped Beth place hers. They were meticulously wrapped with shimmering bows on each. He paused when he got to a bright silver one with yellow stripes. It had his son's name on it, but Zel's foal had been terrified of Mike every time he had come to visit. Apparently, only having two legs was akin to being the monster under the bed for some centaur children, and his son was only a few months old. Centaur infants were more like human three-year olds, which meant that logic and reason didn't always line up as they should.\n\nHe hoped the gift would thaw the ice a bit, but turned his thoughts toward the woman in front of him. Dwelling on being his son's personal boogie man would only bring everyone else down. \"Looks like you went all out.\"\n\n\"Only a bit. It's hard to buy gifts for people who don't really believe in physical possessions.\" She lowered her voice to a whisper. \"Most of it is candy and treats.\"\n\nHe nodded. It wasn't a bad strategy. His gifts were mostly practical, like a new pair of shears for Suly to use, or some new drill bits for Tink. Truthfully, he could have blown thousands of dollars on each person, but Beth was right about them not really caring about things. It was experiences that mattered, and if he could give them something that would make their day-to-day lives easier, it was a no-brainer.\n\n\"So does that mean I got candy, too?\" he asked, seeing the gift with his name on it. He picked it up and gave it a shake, but Beth snatched it away.\n\n\"No snooping,\" she told him, then stuck it somewhere else. \"Unless you'll let me shake what you have for me.\"\n\nKisa snorted hard enough to startle him. Beth's cheeks turned red as she restrained a laugh. Mike tried to keep his face neutral as he picked up an oblong package hidden tucked far beneath the tree and handed it to her.\n\n\"Go for it.\" He handed the gift over. \"Shake it all day, you won't guess.\"",
        "The golden flecks in her eyes sparkled as she shook the box up and down. He could sense her magic now, hovering around her like a perfume. Not sure what sort of spell she was using to see inside a box, he put his middle finger beneath his thumb to summon a tiny spark, then flicked it in front of her face where it sparkled like a tiny firecracker. Distracted, her magic disappeared and she nearly dropped the gift in surprise.\n\n\"No cheating,\" he told her.\n\n\"How did you know that wouldn't hit me?\" she asked, her tone suddenly serious.\n\n\"Because you have my full attention,\" he responded. The air in the room suddenly felt hotter than usual. \"I mean, uh, I'm not distracted. I'm in control. That's what I mean.\"\n\nBeth bit her lip for a moment, as if contemplating his answer. It almost looked like those gold flecks of hers were moving. \"What if I said I wanted it to?\"\n\n\"I'm gonna check in on me sister,\" Suly announced. \"I can sense her out front. Maybe sit with her awhile and watch the flurries fall.\" With that, he left through the front door, letting in a cold blast of air that ruffled Beth's hair.\n\n\"Let's go find Tink.\" Kisa grabbed Death by the hand and pulled him out of his seat.\n\n\"But I wish to stay by the fire,\" Death protested.\n\n\"I'll let you open a present early.\"\n\n\"Then my hand shall not be stayed!\" Death slammed the rest of his tea and stood, the tinsel garland around his neck shimmering in the firelight. He practically dragged Kisa out of the room as her stockinged feet slid on the smooth wooden floor.\n\nMike couldn't help but notice that everyone had vacated the room, and felt his pulse quicken. Beth sat across from him, her eyes glittering with liquid gold. Magic had changed her in so many ways , and he wondered how many of them were similar to his own. If there was anything Beth had been good at, it was exuding confidence. It was a trait he felt lacking in himself, and though the attraction had always been there, it was kind of a relief that she was making the first move.\n\n\"You...do know what would happen if it did, right?\"\n\nBeth smirked, leaning in close. \"Oh, I'm aware. If not for the geas, the whole neighborhood would be aware.\"\n\n\"I...\" He chuckled, amazed at how awkward he felt. \"I have to admit something, first.\"\n\n\"Oh?\"\n\n\"I've always thought you were pretty. Even before, well, all of this.\" He gestured around him, referring to not only the house, but everything that had happened. \"When we first met, I was kind of a nervous mess around you. Maybe that carried forward, I don't know.\"\n\n\"You don't say.\" Beth arched an eyebrow.\n\nHe laughed. \"Yeah, I'm sorry about that. It's just, for me, I always worried that I might be crossing a line. I'm aware of my effect on people, and I never wanted to take advantage of that, especially not with you. But you're different now, so maybe it wouldn't be an issue, but...\"\n\n\"You sure do talk a lot for a man who's about to get laid.\" She moved toward him and he put a hand up to stop her.\n\n\"Lily, I swear to god, if that's you, I'm going to be so pissed,\" he whispered. Beth had never been this direct, and the succubus had mocked him endlessly over his inability to move on his attraction to Beth. On numerous occasions, she had even offered to turn into the beautiful lawyer during sex, but he had always declined.\n\nBeth pushed his hand away. \"I've had a lot of time to think about the things I want. And I've decided that one of them is you, and I'm tired of waiting for it. If I need to throw a shout-out to Jesus or God while I'm riding you to make this happen, then so be it.\"\n\nMike's mouth went dry at the realization that this was the real deal. Lily was well known for her dislike of the divine to the point that she abhorred even the mention of God.\n\n\"Why now?\" he asked, his voice barely audible.\n\n\"I always felt like you were so far ahead of me,\" she replied in a whisper. \"But now, I've finally caught up.\"\n\nShe leaned forward into him, her lips pressing into his. The magic inside him swelled up and washed over both of them, hissing as streamers formed along his skin. He closed his eyes and allowed the magic to carry him away, savoring the soft touch of her lips.\n\nBeth held perfectly still. He tried to part her lips with his tongue, but was puzzled when she held them firmly together. Opening his eyes, he saw that her own eyes were closed, but she was frozen in place.\n\n\"Um...\" He backed away, wondering what went wrong, then noticed that Beth still hadn't moved. Her lips were frozen in mid-pucker, with a slight gap in the middle. \"Beth? Are you okay?\"\n\nWorried that his magic had done something weird, he stood and backed away. The temperature in the air dropped, and a low rumbling sound filled the air. It became louder, making the whole house shake.\n\n\"Hey!\" He fell backward into his chair, but Beth remained motionless, as if glued to the floor. The ornaments on the tree didn't even sway as Mike fought to regain his footing.\n\nThe fireplace groaned, as if about to burst from the heat. The bricks of the hearth glowed from within as if superheated, and the flames changed colors and shot sparks into the living room.\n\n\"Tink! Kisa! Someone!\" He tried to move toward Beth to pull her to safety, but when he grabbed her by the wrist, he couldn't budge her. The world tilted sideways and he fell away from the hearth as the flames in the fireplace exploded in intensity. A loud scream filled the air as a massive object shot out from the flames, barely missing Beth and destroying the living room table along the way. It slid through the room and slammed into the doorway of the office, cracking the plaster around the frame.\n\nMike rose to his feet, the air crackling around him as he summoned his magic. Something had just violently invaded his home, and he wasn't about to let it start trouble.\n\nThe object was red, with gold and silver runners on the side. It was far too massive to have fit through the fireplace, and he grabbed the poker from the fireplace and used the hook end to grab the runner and pull on it.\n\n\"Mike Radley, what is going on?\" Death stood on the second floor, his hands clasped around Tink's ankles. The goblin tried to kick him, but paused when she saw the object blocking the office. Her skirt had fallen down to reveal her ass and bare pussy. If not for her tail, her dress would be over her face.\n\n\"Get ready for a fight,\" he told them as he yanked on the runner. The wooden object creaked as it tipped over, revealing an ornate sleigh covered in silver bells that emitted no sound when it struck the ground. In the back of the sleigh was a giant red bag tied shut with a golden rope.\n\nA tiny figure stood, her red hat knocked sideways. Long blonde braids hung behind pointy ears, and her hair and shoulders were covered in snow. She tried to stand, but fell over the front of the sleigh and landed hard on her butt. Her red dress was rimmed with white velvet, and she wore candy-cane tights above curly-toed shoes. Shaking her head, she squinted up the stairs.\n\n\"Tinker?\" Her high-pitched voice was filled with both recognition and hope. Her bright green eyes flitted to the dark figure holding the goblin, then back to Tink, her pupils widening as she gasped. The pale skin of her cheek looked as if it had been brushed with golden glitter, and she raised a gloved hand to her mouth. \"Oh my Santa.\"\n\nHer eyelids fluttered as she fainted, her head thunking against the sled and knocking off her hat. She went limp on the floor, her splayed out limbs making her look like a large doll.\n\n\"Tink? You know this person?\" Mike looked up the stairs. Kisa had appeared from the hallway, her mouth agape as she gazed at the scene.\n\n\"Tink don't know,\" she replied, still upside down. \"Maybe familiar? Can't remember.\"\n\nThe stench of sulfur filled the air, and a pair of hands wrapped protectively around him from behind.\n\n\"Romeo, something's wrong, I...\" Lily went silent, and he turned to look at her. She was glaring at the scene before them, her lip twitching. Different emotions crossed her face, but chief among them was puzzlement. \"What the hell is this?\"\n\n\"You know as much as we do,\" he told her, waving his hand at the sleigh. The whole scene was unbelievable, but maybe he should have expected it. If Bigfoot, the fae, and the Jersey Devil were all real, then why not one of Santa's elves?\n\nDeath dropped Tink on the ground with a thud and put both hands on his cheekbones while doing a little dance.\n\n\"Mike Radley! Do you know what this means?\" Death's eyes blazed with unholy fire. \"We are going to meet Santa Claus!\"\n\n<center>\ud83c\udfe0\ud83c\udfe0\ud83c\udfe0</center>\n\nOh man, oh man, oh man, I wish I could see everyone's faces right now!\n\nThat's right, dear readers, Christmas is about to become hornier than ever! There will be plenty of fun and surprises along the way, because this is the story that you won't see on the Hallmark channel!\n\nThanks again for being one of my readers. Believe it or not, I've been planning this outing for some time, and even though you may think this is just a Christmas tale, it promises to tie another bow on the Radley mythos in ways you definitely won't expect.\n\nUntil next time, monster-family. Take care of yourself!\n\n~Annabelle Hawthorne"
    ],
    "authorname": "writerannabelle",
    "tags": [
        "monstergirls",
        "harem",
        "bathtub sex",
        "light foreplay",
        "epic snowball fight",
        "beth makes her move",
        "lily on the prowl",
        "twas the night before christmas",
        "tink is naughty"
    ],
    "category": "NonHuman",
    "url": "https://www.literotica.com/s/home-for-horny-monsters-ch-79"
}
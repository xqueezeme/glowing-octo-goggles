{
    "title": "Christian College Sex Comedy Ch. 13",
    "pages": [
        "*We make the friends we have, not the ones we want, because they are people, not tools*\n\n(Thanks to Frontma for chipping away at the rough edges of what I write)\n\n(While there is playful sexual contact there is no hardcore sex this episode -- sorry)\n\n(Yes, this tale is supposed to be somewhat humorous and outrageous too. While not always comedic I'd like to think it is mostly a good-natured romp.) \n\n*\n\n\"Zane,\" Barbie Lynn whispered to me as she shook my shoulder. I swear I only got to sleep ten minutes ago. I blearily looked around me. Brigitte was face down on my left snoring softly, her black hair splayed everywhere. Hudson was asleep on my right, an innocent smile on her lips visible because her head was turned toward me.\n\nThen there was Barbie Lynn who looked both amused and nervous as she was trying to wake me up without disturbing the two professional women to either side.\n\n\"You need to get up,\" she continued to hiss. \"I don't want you to miss your shower.\"\n\nYes, I had already had a shower recently, but I'd also been milked of every last ounce of energy in the interim.\n\nGingerly I climbed over Hudson, but half way there she stirred and started to wake.\n\n\"Go back to sleep,\" I murmured to her. I kissed her on the cheek; she grinned, wiggled beneath me and then went still. My cock had been resting on her butt when this happened and sprang to life in one last suicidal effort at manhood.\n\nBarbie Lynn grabbed a towel and my shower kit and led me by the hand down the stairs. When we stepped out into the hall she wrapped the towel around me, stroking my hard-on.\n\n\"If you like,\" she purred, \"I'll take care of that for you.\" She had no idea why I started to sob uncontrollably. She put an arm around my shoulder and led me to the showers in silence.\n\nMy cadre of shower-buddies was already there when I arrived. I nodded a few greetings then walked straight into a cold spray of water, hanging my head and letting the chill push me back toward consciousness.\n\n\"What's wrong with him?\" Opal asked Barbie Lynn.\n\n\"He was arrested last night,\" she told the assembled group.\n\n\"You go, Boy!\" Rio exulted. She's a freak.\n\n\"He was on a date with Hope and Chastity,\" Iona spoke up. \"I'll find out what they know.\"\n\n\"Anyway, I went up to find him and there he was with all those bites and scratches all over his body, plus he had Ms. Lane and some other woman I don't know in bed with him...asleep.\"\n\n\"Ms. Lane...the school lawyer?\" Brandi babbled.\n\n\"The very one,\" Barbie Lynn affirmed.\n\n\"I suppose it is too much to hope for that they had clothes on?\" Iona sighed.\n\n\"Sorry, no. Naked as the day they were born with that freshly and thoroughly fucked glow all about them,\" Barbie Lynn giggled.\n\n\"Well, who is going to ask him what happened?\" Opal demanded.\n\n\"I don't know,\" Brandi intervened. \"He looks like he's about to die.\"\n\n\"Nah, I know that look,\" Rio snickered. \"He's past the 'about to die' phase. Right now, he's at the 'praying for death' phase.\"\n\nThe water warmed up and I decided it was time to actually get clean so I poured out some shampoo and worked it in. Signs of life on my part quieted the conversation and quickened the girls to finish up their own cleaning functions. Later Opal insisted on shaving me while Brandi began cataloging the sexual details the women had left on my body.\n\n\"Whoa, the bite marks on his shoulders are smaller than the ones on his butt,\" Brandi enlightened the remaining girls. Iona and Rio had already beaten a hasty exit and had I been more alert, I would have been terribly worried. As it was, Barbie Lynn guided me back to my door and let me go up alone.\n\n\"Mmmm, hey, Zane,\" murmured Hudson as I began getting dressed. She had rolled over and was looking at me as I zipped up my pants.\n\n\"Good Morning, Hudson. Barbie Lynn Masters was up here earlier, reminding me to use the shower, and she saw both of you,\" I informed her.\n\n\"Oh, God...where am I? Oh, God, what have I done?\" moaned Brigitte into her pillow. I walked to her side of the bed and sat down. I let my hand rub her shoulder blades and brushed her hair away from her neck.\n\n\"You didn't do anything immoral or illegal,\" Hudson said. \"Technically, Zane was never your client but a person of interest to your client. We are all of legal age.\"\n\n\"I'm in some teenage boy's dorm room,\" she muttered. \"I had hopes of making partner one day too.\"\n\n\"How do you feel?\" I asked.\n\n\"I'm beat,\" she sighed. I kissed her on the back of the neck. \"Don't.\" I kissed her lower, where the neck flows into the shoulders. \"Don't...\" another kiss along the top of the left shoulder blade, \"Ooohhh...\" a final kiss to the top of the shoulder. \"Damn,\" she moaned.\n\n\"I hope you had a good time because I certainly did,\" I whispered into her ear.\n\n\"I did,\" she admitted. \"I'm...still thrumming inside. That last orgasm...\" she couldn't put it into words, though I was sure Hudson was feeling very self-satisfied right then.\n\n\"Don't worry about anything. Stay in my room until 9:00 then slip over to Ms. Lane's office while we are at Assembly, then make a public showing of leaving from there and heading out. Everything will be okay,\" I assured her.\n\n\"I'll look after her, Zane,\" Hudson Lane told me.\n\n\"How about I set the alarm clock and you two get some sleep?\" I suggested. Hudson pouted, then let it turn into a knowing grin.\n\n\"Okay, but what about you?\" Hudson noted. \"You look like Death warmed over.\"\n\n\"Thanks,\" I joked through the fatigue. \"How come only women are allowed to look even more desirable after sex, while men simply look worn out?\"\n\nBrigitte rolled onto her side and stared at me.\n\n\"Is he for real?\" she wondered to Hudson.\n\n\"Absolutely,\" she chuckled back. \"Look at his pants if you don't believe me.\" Damn it, I was hard again.\n\n\"Zane, have you ever thought about interning at a law firm?\" Brigitte asked.\n\n\"I'm in Pre-Med,\" I answered.\n\n\"Change majors,\" she commanded. Hudson laughed.\n\n\"Be careful, Sophia Brigitte Messier, there are at least a dozen young ladies on this campus who will deeply resent you poaching their favorite freshman,\" Hudson snickered.\n\nBrigitte looked at me with a twinge of sadness and regret.\n\n\"Hudson knows how to reach me if you ever have need of me,\" I told her. \"Please understand that while what we did was very pleasurable, I am here to graduate with a degree in something.\"\n\n\"Yes, that whole being eighteen and all,\" Brigitte sighed. \"I understand.\"\n\n\"Zane,\" Hudson huffed, \"do you want to see Brigitte again?\"\n\n\"Absolutely; there is something to be said for her tight swimmer's body,\" I replied,\" and she's definitely got spirit.\"\n\n\"I'm not another one of your college co-eds,\" she chastised me, but with a smile on her face.\n\n\"Why not? You are as wild and vigorous as any eighteen-year-old I know,\" I responded. Brigitte's mouth fell open in shock.\n\n\"I...well, because I'm a graduate of Georgetown Law School; third in my class,\" she stammered.\n\n\"One never stops being young; you merely forget how,\" I quoted someone from somewhere, but I was too tired to remember the specifics. \"I hope that if any job opportunity every stops you from being as sexy as you are now, you turn it down.\"\n\n\"Imagine what he's like when he's actually trying to seduce you,\" Hudson smiled.\n\n\"I repeat my earlier question: are you sure you want to unleash this boy...man on an all-girls campus?\" Brigitte grinned.\n\n\"I swear, the next girl I get to seduce here will be the first,\" I groaned. \"They rarely give me the chance or the time before...well, things happen. Frankly, I've only romanced one girl here and she's not too interested.\"\n\n\"Who is that?\" Hudson inquired.\n\n\"Christina Buchanan,\" I shrugged, \"a beautiful, intelligent senior who seems to have enough sense to not get too involved with me.\" Brigitte shook her head and chuckled.\n\n\"She's my employer. She hired me to get you out of jail.\"\n\nI wasn't sure how long I stood there digesting that news because the next thing I recalled was Hudson calling my name.\n\n\"Zane? Zane? Are you okay?\"\n\n\"Huh?\" I muttered.\n\n\"You zoned out there for a minute. You really need some sleep,\" she observed.\n\n\"I won't argue with that, but it doesn't seem likely,\" I noted.\n\n\"I am going to call Ms. Goodswell and ask her to get you half the day off,\" Hudson stated.\n\n\"You aren't going to hear me argue,\" I grinned as I flopped down on the bed. I assumed she called but I was out before she reached her phone.\n\nGETTING THROUGH THE DAY\n\nI slept through a nice little struggle between Rhaine and Barbie Lynn. Rhaine had been sent promptly at 7:00 to deliver me to the Chancellor. Barbie Lynn had been warned of the visit, and my condition, by Virginia Goodswell, and held her off long enough for Dr. Larson to get there and defuse the situation.\n\nBy the time the Chancellor made a second run at me, Hudson and Brigitte had made their exit and Ms. Lane was able to cover for me and my 'condition'. At 11:30 I received a call from Lane to 'remind' me that I had to bring by the papers she'd 'left' with me when she escorted me from the jail the night before.\n\nI found the paperwork that Brigitte had wanted me to sign last night, read it over, and then signed them. After that, I grabbed my stuff and headed for the Dining Hall. For a nice change, I was one of the early arrivals, getting my food and grabbing my spot in peace. I had started working on my salad when I spotted Iona running right at me.\n\n\"Zane!\" she cried out as she hugged me. \"I was so worried about you.\"\n\n\"I was a little exhausted, Iona,\" I squeezed her back. \"There was nothing to worry about.\"\n\n\"You were in jail, Silly,\" she lectured me. \"A really prisoner could have hurt you.\" Iona was missing the fact that I put two people in the hospital. Mentioning that I threatened two bikers over a bench to sleep on would definitely be unwise.\n\n\"I was in no real danger. They didn't put me in with any bad people; mainly drunks and minor drug charges,\" I embellished the facts. She rested her head on my shoulder (I was still sitting) and sighed.\n\n\"Well, Rio and I were still worried,\" she murmured. No sooner had Iona headed off to get food than Rio came up.\n\n\"Hey, little brother, we have got to get you a prison tattoo now,\" she laughed.\n\n\"Rio, I was in County lock-up for four hours. I didn't even get to use the communal toilet,\" I joked back.\n\n\"So, how many hotties did you bang? Quick, tell me before Iona gets back,\" Rio grinned.\n\n\"They don't house men and women together,\" I pointed out.\n\n\"Oh, like concrete walls and iron bars are going to slow you down,\" she teased.\n\n\"Fine, I swear I did not have sex with any female -- or male -- inmates,\" I pledged.\n\n\"Damn...\" she frowned for a second, then she brightened up. \"You nailed a cop!\" I lowered my head with embarrassment.\n\n\"Well, fuck,\" she crowed, \"you nailed two? More?\" I pointed to the lunch line.\n\n\"Go get some food, damn it!\" I growled. She skipped off, overly pleased with herself, and all I could do was shake my head. Before Iona returned, a dozen more of my friends stopped by to see if I was okay, if I was molested in prison (they are weird friends), and to confirm that I'd really put two guys in the hospital for threatening two FFU girls.\n\nIona and Rio were sitting down with me when Raven came up, looking conflicted.\n\n\"Well, I don't imagine you made any progress on our project,\" she asked.\n\n\"No. I said I'd get stuff this weekend so we could start Monday,\" I assured her.\n\n\"Fine; try to stay out of jail and not fight anybody...and get some sleep,\" she stated.\n\nRaven gave me a curt nod, turned and left.\n\n\"Zane,\" Rio sighed, \"you've gotten another one into your orbit.\"\n\n\"No,\" I insisted, \"we are studying together; that's all.\"\n\n\"So she came over here to ask totally irrelevant questions she already knew the answers too?\" Iona mused. God is laughing at me and trying to drive me crazy.\n\nChastity and Hope came walking up next, looking less pleased than I hoped they would.\n\n\"We need a moment outside,\" Chastity cautioned me. I stuffed as much food as possible into my cheeks before getting up and following them out; I'd missed breakfast after all. The trail led outside where Christina, Faith, and Heaven waited.\n\nIn a strange reversal of events, Heaven looked fearful for me and Christina looked like she wanted to bite my head off. Even Faith held some sympathy toward me. I got to them, tried to smile, but Christina cut me off.\n\n\"Can you try to not fuck everyone in sight?\" Christina snarled.\n\n\"Honestly, all I wanted to do was get back to my room and get some sleep,\" I swore.\n\n\"What did he do?\" Chastity asked.\n\n\"He had sex with two female Deputies...for over an hour,\" she snapped once more.\n\n\"That should have been us,\" Hope told Chastity with clear jealousy.\n\n\"In my defense, they did take me out of the holding cell to an interrogation room where, for the most of it, I was under the impression I would be going to prison,\" I related.\n\n\"Zane, you screwed my lawyer,\" Christina seethed.\n\n\"Who told you that?\" I grumbled. The woman's career was on the line.\n\n\"She did...in her report she submitted, Zane. Do you want me to go into the details of your encounter?\" Christina threatened me.\n\n\"I'd like to hear what went on,\" Heaven suggested.\n\n\"Well, Zane didn't give us up,\" Chastity offered, \"and if he had, he would have gotten out earlier.\"\n\n\"Actually, what did Ms. Messier say...write?\" I wondered.\n\n\"She reports that she and Ms. Lane spent six hours in consultation with you this morning: 3:00 to 9:00 a.m.\" Christina accused me.\n\n\"Yeah, he had sex with them,\" Hope sighed.\n\n\"How were they?\" Heaven perked up.\n\n\"Before that, he was 'interrogated' for an hour by two female Deputies,\" Christina glared at me.\n\n\"Yum, I like cops,\" Heaven added.\n\n\"Zane, you had sex with four women last night,\" growled Christina. \"Here we were worried sick about you and you were...living it up.\"\n\n\"I confess to nothing...\" I started to defend myself.\n\n\"Barbie Lynn says you were so worn down, you refused to have sex with her this morning,\" Faith piled on. Oh, I was so busted now. I lowered my head and struggled to get ahead of events.\n\n\"Christina, first off, thank you for getting an attorney for me. She was really helpful in getting my early release,\" I lead off.\n\n\"Second, in my defense, I was woken from a sound sleep on a bench and led to an interrogation room. I'm not saying I wasn't an eager participant once things took off, but I didn't want to be there in the first place; I wanted to sleep, for the love of God,\" I pleaded.\n\n\"And the two lawyers?\" Christina kept coming.\n\n\"I owe Ms. Lane for having my back since I got here, from that very first day when you were trying to have me thrown out,\" I countered, \"remember?\" I let that sink in. \"So, she had an interest in Ms. Messier but was clearly getting nowhere so I helped out. They got what they wanted and I got ten more minutes of sleep.\"\n\n\"I believe him,\" Heaven stated.\n\n\"So do I,\" Chastity chimed in. \"If it was anyone but Zane, I'd laugh in their face, but come on...this is Zane we are talking about. As far as I know, you and Tawny are the only two girls who haven't tried to have sex with him.\"\n\n\"There is Raven,\" I interjected. The five women stared at me as if I was utterly clueless.\n\n\"And he turned down sex with Barbie Lynn,\" Faith reiterated. \n\n\"It is hard to argue with that,\" Hope said. \"He had clearly been used and abused.\"\n\n\"We should send coal to the Devil,\" Chastity joked. \"Clearly he is freezing his ass off -- Zane turning down sex.\"\n\n\"Maybe that is a sign of the End Times?\" Faith got in on the fun.\n\n\"Let's hope not,\" Hope joked. \"Zane has us an invitation to a block party next weekend.\"\n\n\"Zane,\" Christina said after a long pause, \"could you please try to keep to Heaven and one or two others?\"\n\nHeaven stepped up and place a hand on the center of my chest, leaned in and took a deep whiff of my body soap, after shave, and general...manliness.\n\n\"Don't worry, Christina, I'll train him to say 'No',\" she smiled at her friend then turned and looked up at me, \"and if you ever say that to me,\" she smiled lovingly, \"I'll break one of your arms or legs.\"\n\n\"I love you too, Babe,\" I smiled back at her while stroking her upper arm.\n\n\"Rhaine!\" Hope hissed. Sure enough, it was my buddies Rhaine, Joy, and Mercy coming my way, and they looked unhappy.\n\n\"Sorry, ladies,\" I spoke up, \"my 1:00 o'clock orgy is here. I have to go.\"\n\n\"The Chancellor wants to see you,\" Rhaine announced, clearly not appreciating the orgy comment. I wondered why the woman didn't call or text me, but then I remembered that I almost never answer my phone and all my texts are forwarded to Iona -- whoops.\n\n\"Zane, don't forget there is a Soccer game tomorrow at 10:00 -- first game of the season,\" Christina reminded me.\n\n\"Sure thing; I'll be there,\" I called out as I turned and started walking off with Rhaine's group. After we'd traveled a ways, I put my arms over the shoulders of Rhaine and Joy.\n\n\"So, who brought the whipped cream and who brought the chocolate syrup? Because I have a jar full of cherries and I'm ready to play some 'Ice Cream Shop'.\"\n\n\"Stop that,\" Rhaine tried to shrug me off pretty unconvincingly. \"What we did is never going to happen again.\" I looked to Mercy, then back to Joy.\n\n\"How about his; we do it one more time and I promise never to bring it up ever again?\" At this point in time I really deserved to be killed by a falling piece of space debris for being such a dumbass with an uncontrollable sex urge.\n\nAnd better yet, I could see the three women sending silent signals back and forth as they clearly considered my offer. I should have let Christina castrate me when she was prepared to do so.\n\n\"Stop joking around,\" Joy said with a tremble in her voice.\n\n\"I'm just saying, whatever happens after 'lights out'...no one is sure what is really going on; no one to blame, no one to know for sure,\" I suggested. They exchanged more looks.\n\n\"No, we couldn't,\" Rhaine declared, but destroyed that statement by then saying, \"Besides, how would we get past your locked door?\"\n\n\"There is no chasm so deep, or lock so strong, that the mind of man cannot conquer it,\" I recited. \"It is a simple matter of knowing who has a key and getting it from them.\"\n\n\"I could get a key,\" Mercy volunteered. The other two stared wide-eyed at her. \"If we ever...needed one.\"\n\n\"There you go, Mercy; live without fear,\" I applauded her.\n\n\"That's why the Chancellor wants you gone,\" Rhaine spat. \"You are evil.\"\n\n\"No, evil is making someone doing something they don't want to do. All I'm doing is teasing you, and it isn't like this would be the first time you had a key to my room,\" I pointed out. \"Seriously, if you want to stop me from annoying you and reminding you that you are pretty, all you have to do is stop hanging around me. It is not like I've ever hunted you ladies down.\"\n\n\"You are still a pervert,\" Rhaine declared. There was a silence while we walked that lasted until Rhaine looked at me for some sort of denial.\n\n\"Oh, sorry,\" I apologized. \"Was I supposed to deny that? By your definition I am a pervert. I like sex, women's bodies, and simply spending time with women.\"\n\n\"Most of all, I like listening to a woman and getting her opinion,\" I added. \"Being with a woman is being with a partner, which makes every time with a woman unique to me. I'm not getting one-up on anybody. That would kind of defeat my point for living. You see me as evil, but all you are seeing is my desire to live free on my own terms.\"\n\n\"We Christians live in communities,\" Joy jumped in.\n\n\"I'm going to school, I'm in four clubs, and I've been doing the whole Handmaiden's Duty thing. I walked around for two days on my knees because I wanted to be part of this school, so please don't preach to me about community,\" I bantered back.",
        "\"All that proves is that you are too stupid to know you are not wanted here,\" Rhaine spat.\n\n\"Who are you trying convince, Rhaine? I'm not alone and I have been welcomed by enough of the student body that the Chancellor is worried,\" I corrected her. \"I think you should be asking yourself why they actually give a damn and you don't.\"\n\nOur arrival at the Chancellor's office ended that conversation.\n\n\"I've got it from here,\" I joked to the ladies and the secretary. \"I know the way.\"\n\nI walked into the room, up to the Chancellor's desk, and bowed to Dr. Bass.\n\n\"Good afternoon, Dr. Bass,\" I grinned.\n\n\"Good afternoon, Mr. Braxton,\" she replied in a stony voice. \"Is there a reason why you are trying to make my job easier?\"\n\n\"You are over-worked and under-appreciated and I only want to help?\" I suggested.\n\n\"Mmmhhh,\" she rumbled, \"I was referring to you getting in a brawl and arrested last night.\"\n\n\"Technically, it was an ass-whooping, not a brawl. A brawl insinuates they actually had a chance against me,\" I joked. \"I would hope my actions would have shown that your students know how to defend themselves and fight for the honor of our school,\" I added.\n\n\"I should have made that distinction when I sent the formal letters of academic probation to Hope Song's and Chastity's Adams' parents,\" the Chancellor gloated. \"Your aunt received a notification as well.\"\n\nI felt there was no need to ask how she knew who my companions were last night. I was going to know that soon enough.\n\n\"Cool. Is there anything else you need to tell me?\" I grinned, which did nothing for her disposition.\n\n\"I wanted you to know that you are dragging more and more people down with you,\" she countered.\n\n\"Hmmm...\" I stroked my chin. \"I'm not sure what I'm on probation for but I'm definitely sure Chastity and Hope didn't break any laws or school rules; but knock yourself out.\"\n\n\"Any action that puts the school in a bad light, or actions of an immoral nature -- as defined by me -- are grounds for academic probation,\" the Chancellor quoted.\n\n\"Oh, well, if you are just going to make this shit up as you go along, why am I even here?\" I wondered.\n\n\"I want you to keep up-to-date with the wreckage you create in the women's lives who have chosen to support you,\" she told me.\n\n\"Oh, please,\" I sighed. \"You are a sadist, and a bitchy one at that. Your updates are pointless because we both know they didn't do anything and I'm not going to feel guilty because of your lack of principles.\"\n\n\"If you have finished wasting my time, I've got important things to do, Chancellor Bass,\" I said in a bored voice.\n\n\"You find this amusing, do you, Zane?\" she responded with a sinister smile.\n\n\"No, but I'd rather not have to listen to you pretend you're clever or listen to you delude yourself that you are getting one up on me,\" I explained.\n\n\"Get out of my office, Mr. Braxton,\" she snapped.\n\n\"Have a nice weekend, Chancellor,\" I quipped, then turned and left. Rhaine, Joy, and Mercy were waiting for me when I got out.\n\n\"Well?\" Rhaine asked.\n\n\"Academic probation,\" I shrugged.\n\n\"You can challenge that,\" Joy blurted out, then looked highly embarrassed.\n\n\"Thanks, Joy,\" I smiled at her. \"How does that work?\" Joy continued to look worried.\n\n\"An Academic Review Board goes over the conditions of your punishment to see if the situation justifies it,\" Rhaine informed me. \"They are appointed by the Chancellor.\"\n\n\"Let me get this straight,\" I chuckled, \"the Chancellor picks the people whose job it is to tell her she's done something improper or not? That's rich.\" The girls shrugged and we moved on. After that piece of news, I wasn't sure how to react, and I was still mulling things over when I got to Archery Club. I tried to apologize to Chastity but she laughed it off. I still owed her a date, or so she claimed.\n\nPainless Acts and Re-enactments\n\nKarate Club was a bit different this time; I was actually asked to instruct part of the class. After stretches and warm-ups, Coach Gorman asked me to help her recreate my fight of the previous day. I got to play Me, Gorman was 'the Talker', Wilhelmina was 'the Weasel' and Cappadocia got to be 'the Shy Guy'.\n\n\"Okay, girls, after Mr. Braxton put down Mercy Chaplain in ten seconds, I began to accept that while I was teaching you the fundamentals of the art of Karate, you might also need some practical experience in defending yourselves,\" Dana Gorman began.\n\n\"As most of you know, Mr. Braxton -- Zane -- was in a fight last night involving him and three opponents. He put two in the hospital overnight.\"\n\n\"Why did you do it, Zane?\" Evangeline asked abruptly.\n\n\"Mr. Braxton was defending two fellow students,\" Dana answered for me. I'm not sure what inspired her to alter the retelling of events. \"That really isn't relevant; what is important is that he was confronted with three opponents but won.\"\n\n\"Now, Zane, what was the situation,\" Dana asked.\n\n\"Okay, they followed us to the parking lot so we were fighting on asphalt. Our lead antagonist was about here,\" I positioned the Coach, \"the toughest fighter was here,\" I positioned Willy, \"and the third guy, who never got into the fight, was here,\" I set Cappy in place.\n\n\"How did things begin?\" Coach led off.\n\n\"Once I knew there was going to be a fight...\" I started.\n\n\"What made you decide that?\" Dana interrupted.\n\n\"Umm...ah...\" I looked to Dana for confirmation and she nodded. \"They said they would sexually assault my two companions, then hunt down a few other women I knew. I took that threat to be credible.\"\n\n\"Then?\" Coach prodded me.\n\n\"I noted their positions and aggressiveness. Cappy was not making eye contact or talking and I viewed him to be the weakest threat. I asked if he knew the name of the local hospital,\" I continued. \"When I noticed Willy moving to the left, I switched from defense to offense.\"\n\n\"Two things,\" Coach noted: \"Don't underestimate your ability to intimidate; don't use fists when words will do. Also, don't let numbers deter you, because skill and initiative count for more. Zane?\"\n\n\"I struck Coach first with a blow to the chest,\" I related, as I mimicked the blow.\n\n\"Why that blow?\" Dana led me on. She held my comment with a hand.\n\n\"I would have hit him in the gut,\" one student stated.\n\n\"Understandable, but now he is folding toward you,\" Dana responded. \"Zane is fighting for space, so he hits him in the chest to give him some distance. That is why the initial moves by Willy were so important. While he moved to flank Zane, he also moved himself out of range to support the man in the middle. Know your place in a fight. Zane, continue.\"\n\n\"I face Willy in time to intercept her wide right swing, which sets up the blow to the jaw, stunning him.\" Willy and I went through the motions but I don't recall the Weasel grinning at me the way she did. \"This allowed me to do a set-up blow, then a kick to Coach's chest now that I had the room and the time.\"\n\n\"Let's go over that; we all know the importance of recovery after an attack. The Weasel hadn't learned that lesson and we all saw what happened -- a blow to the head,\" Coach lectured us. \"Cappy is standing out of the fight because of intimidation; now Willy has been stunned so Zane can concentrate on me. I'm only now recovering from the chest blow when the kick catches me in the chest and that is because Zane set me up with that first strike.\"\n\n\"Remember,\" Dana lectured, \"that is why we teach you not to think about the next move, but three moves down the line. Control the fight and you win; it is that simple. Zane assessed the opposition, reduced his odds, then took the initiative. Next.\"\n\n\"I turned back to Willy, blocked another swing, trapped his arm, and began driving my knee into his midsection until he went limp,\" I completed the story with Willy obediently falling down.\n\n\"Now we don't normally practice Zane's finishing move so what would we do?\" Coach asked.\n\n\"I would have used the arm hold to flip him and finish him with a strike to the head,\" Cappy volunteered. The suggestions that followed were in that general theme. At the end of class one girl did finally ask,\n\n\"Zane, why didn't you get the other two girls to fight too, to even out the odds?\"\n\n\"Fighting is forbidden by school policy,\" I told them, \"virtually no exceptions.\"\n\n\"What is going to happen to you, then?\" Cappadocia inquired.\n\n\"I'm under academic probation,\" I informed them. For the first time most of the class was sorry for me.\n\nWhen I got out of the shower and went to exit the gym, Coach ambushed me.\n\n\"Good job, Zane,\" she told me.\n\n\"No problem; I am doing my part to make this school a better place,\" I grinned.\n\n\"I'm going to miss you when you are gone,\" she said with some sadness.\n\n\"Don't sweat it, Teach; you are only doing your job and I'm not gone yet,\" I winked as I left.\n\n~~~\n\nRio and I walked up to the Kappa Sigma House. Since it was between 5:00 and 6:00, I was hoping most of the girls would be there. A pledge whose name I think was Allison answered.\n\n\"Hi, I'm Za- ...\" was all I got out before she jumped me and gave me a deep hug.\n\n\"Of course I know who you are,\" she giggled. \"Come on in. I'll go get Leigh.\"\n\n\"Hi, I'm Rio,\" my buddy muttered darkly as she followed me inside, \"I'm the girl standing next to the guy you just mugged.\" Allison went pounding up the stairs and I was left to a chorus of 'Hi, Zane', and we even got a few 'Hey, Metal Girl' greetings (Rio had all fourteen of her piercings back in).\n\nRight as Leigh, dressed in super-tight jeans and a pink bra, and Allison came down the stairs, Tawny came from the direction of the kitchen.\n\n\"Zane,\" Leigh and Tawny said one right after the other, but Tawny's carried the greater weight.\n\n\"Zane, we need to talk,\" Tawny demanded. Rio growled menacingly. \"I apologize. Hello, Rio.\"\n\nThere was a hush in the room and even Leigh looked contrite.\n\n\"Zane, Kappa Sigma does not condone violence of any kind. If you ever thought we wanted you fighting our battles for us, you were sorely mistaken,\" Tawny explained. \"Are we clear?\"\n\n\"Okay, I understand, but...how did you know? I didn't tell anyone anything about what was said,\" I wondered.\n\n\"You should have never put your neck out for these Sorority bitches,\" Rio snapped.\n\n\"Hang on, Rio. I did what I did for my own reasons, not for them,\" I calmed my friend. Rio was clearly not making friends but Tawny held up her hands for peace.\n\n\"You didn't even tell her, your best friend, did you?\" Tawny smiled with surprised satisfaction. \"Christina knows, but that is understandable and she's told no one except me.\"\n\nI looked at her for some explanation.\n\n\"It seems two co-eds from the University thought you might be in trouble and followed you. They covered your exit from the building, the argument, and the fight that followed,\" Tawny grinned. \"They posted it on their site. By 10:00 this morning, everyone knew.\"\n\n\"Except for us idiots with limited internet access,\" groaned Rio.\n\n\"My fellow Kappa Sigma presidents wanted to make sure everyone knew that we had nothing to do with your actions,\" she completed. \"That being said,\" she stepped up and hugged me, \"Thank you.\" I received a round of applause from the gathered sisters.\n\n\"Fine. Would someone tell me what my idiot friend did?\" Rio griped.\n\n\"Rio,\" Leigh snickered as she snuck to my side and wrapped an arm around me, \"those three assholes called the Kappa Sigma House a bunch of whores and then told him they were going to rape Chastity and Hope, then come and rape Paris and me when they were done.\"\n\nAnd that's when Rio hit me. \"Moron, why couldn't you tell the police this? They don't put you in jail for defending women under imminent threat,\" Rio snapped.\n\n\"I think that was the point,\" Tawny sighed at Rio. \"He didn't want to drag us into what was essentially his choice; just like he kept Chastity and Hope out of things.\"\n\n\"Because he's a dumb-shit,\" Rio declared.\n\n\"Rio,\" Tawny groaned, \"be happy Zane has personality to spare, because you work really hard at having no other friends. I put up with your crap because Zane thinks the world of you and he's not been wrong about a person yet.\"\n\n\"Wow...Tawny, I'm so touched,\" Rio sneered sarcastically. Before anything else could happen I grabbed Rio by her nipple chain and elevated it rapidly.\n\n\"Ow, ow, ow...\" whimpered Rio. \"That hurts!\"\n\n\"It supposed to,\" I glowered. \"You are acting crazy. The Kappa Sigs are being nice and all you are doing is burning through the weekend time I've devoted to you.\" I let go and her hands flew up to her offended flesh.\n\n\"You had better kiss them and make them better,\" Rio glared at me while cupping her nipples.\n\n\"I promise,\" I pledged.\n\n\"Fine. Tawny...all you Kappa Sigs, I apologize for being...unfriendly,\" Rio ground out.\n\n\"Okay,\" Tawny allowed. \"Now, Zane, what brings you here tonight?\"\n\n\"Zane came here to see me,\" Leigh grinned, as she started tugging me toward the stairs.\n\n\"Leigh,\" Paris questioned, \"don't you have a date tonight?\" Leigh looked guilty.\n\n\"Zane, why are you here?\" Tawny asked again.\n\n\"Actually, I need help with my English term paper. I'm doing it on Edmund Burke and I was hoping to use the UV library,\" I told her.\n\n\"Of course,\" Tawny nodded. \"I'll get the pledges to figure what books and archival material we have on Burke and I'm sure we can find a few volunteers to check out what you need.\"\n\n\"Thanks, Tawny. And on that note, I do really have to get going. I promised Aunt Jill we'd help with dinner,\" I smiled. Tawny grinned in response and waved me away. A series of 'bye's followed, after which Rio and I made our way back home.\n\n\"So, are you upset that I didn't tell you what happened?\" I inquired.\n\n\"Nah,\" Rio shrugged. \"I imagine you were trying to avoid the beating I would have given you had I found out this morning.\"\n\n\"Thank you for understanding,\" I commented.\n\n\"No problem; you are my bro,\" she snorted.\n\n\"Do you still want me to work over your nipples?\" I asked.\n\n\"Is the Pope Catholic?\" Rio smirked.\n\nPassing the Night in Confusion\n\nI sat at one end of the sofa, Rio stretched out with her head in my lap as we digested our dinners. Jill sat on the chair closest to me, watching TV but stealing an overprotective glance my way from time to time. My aunt and I had a serious argument earlier about where Rio would sleep. She had insisted that Rio sleep in the guest room Barbie Lynn had used last weekend. I had held adamant to the fact that it didn't matter where we put her, Rio would end up in bed with me. I swore on the Bible that I wouldn't have sex with her if Jill relented and let Rio stay in my bed over the weekend instead. I won out through persistence and because I went down on my knees and begged.\n\nTo add to the weirdness, Rio was downright affectionate. No, she was not feeling me up or attempting to arouse me; she snuggled against me and would occasionally rub my knee while I stroked her hair, ear, and jawline gently. At 10:00 we agreed to call it a day. Rio was kind enough to only shed her jeans once we were in my room.\n\nRio draped an arm over my stomach and her thigh over my thigh as we drifted off to sleep. It was wonderful contact because the sexual elements were submerged to keep the moment uncomplicated. It was so special that I was disappointed when I woke up hours later with Rio lying on top of my body and my cock had, of course, responded. Damn it.\n\n\"Zane, there is someone at the window,\" she whispered to me. It then occurred to me that Rio had been crawling over me to get to my window, which was over a trellis. It was the route Leigh had used last week too. We both scooted off the bed and went to the window. It was Paris, not Leigh.\n\n\"Zane, Leigh needs you,\" Paris pleaded softly once we opened the window for her to get in.\n\n\"Let me get dressed,\" I responded quietly, this being necessary because I sleep in the nude.\n\n\"I'm coming too,\" Rio hissed. We quickly got on some jeans and I put on a shirt before we snuck through the house and out the front door. Bare-footed, we crossed over to the Kappa Sigma house and up to Leigh and Paris' room.\n\nLeigh was curled up on her bed, a pillow hugged to her chest and her back to the door. Paris stepped aside and let me in. I padded up to Leigh's bed and sat beside her. Paris and Rio fidgeted by the door a bit before migrating toward Paris' bed where they could keep an eye on us.\n\n\"You don't need to be here,\" Leigh mumbled. She'd been crying.\n\n\"I heard a rumor that you needed someone to talk to,\" I teased her. She didn't comment for a bit.\n\n\"Zane, I'm sorry,\" she sobbed.\n\n\"About what?\" I asked as I moved her so she was facing me on her side.\n\n\"The video; I didn't think about how badly it could impact your life -- what people would think of you,\" she muttered.\n\n\"Don't worry about it; I'll cope,\" I assured her. \n\n\"I'm not sure I can,\" she simpered. \n\n\"Tell me what happened,\" I encouraged. \n\n\"There was this guy on campus I knew since last semester. Tuesday he asked me out. We went out on a date but he forgot his wallet so I paid for dinner, and we went back to his apartment to get it before heading out to a club,\" she told me.\n\n\"The thing was, he had two friends over and while he went to his room to get his wallet, they began talking about me...about you and me. I wanted to bolt but he convinced me to stay and have a drink. When I tried to leave they got physical, and only when I started screaming did they let me get out of there,\" she related.\n\n\"Who is he?\" I asked calmly.\n\n\"No,\" Leigh sighed, \"I don't want you to hurt him. It is my fault for not thinking that everyone would see me as a slut.\"\n\n\"You are not a slut and anyone who thinks so is an insecure ass and not worth your time. That video was a single snapshot of your life; it doesn't define you,\" I stated.\n\n\"But all those girls now treat you...\" she murmured.\n\n\"If they treat me like crap, I move on. Listen Leigh, don't let a few people who could never look past your cup size ruin what was a good time for you, Paris, and I. We don't need them because we still have each other; right?\" I insisted.\n\nLeigh snuggled into me and sighed away some of her tension.\n\n\"Can you stay awhile?\" Leigh asked softly.\n\n\"You have to ask Rio; this is her weekend after all,\" I reminded Leigh.\n\n\"Sure, he can stay,\" grumbled Rio playfully, \"but scoot over; I'm joining you two.\"\n\nI was on the outside, Leigh was tight up against me, her head pressed into my neck, and Rio was against the wall, her front pressed into Leigh's back and her arm over both of us.\n\n\"Zane, what am I going to do on Monday? What are they going to say now?\" Leigh whispered.\n\n\"Laugh; laugh against the darkness, because while we can laugh, we cannot be defeated,\" I told her. \"When someone asks about it, tell them he was such a disappointment you left.\"\n\n\"I was going to say, call him a psycho-rapist scumbag,\" Rio snarled, \"but if you feel nice, listen to what Zane said.\" Leigh gave a weary snicker.\n\n\"Thanks, Paris,\" she called over to her roommate.\n\n\"You are welcome, Sister,\" Paris responded.\n\nI set Leigh's alarm for four in the morning and settled in for a short night's rest. When the buzzing woke the three of us up, I rolled out of bed, Rio climbed out over Leigh, and we kissed Leigh goodbye. On the way down the stairs we stumbled across Tawny sitting by the pool.\n\n\"Hey, Zane, Rio,\" she said.\n\n\"Good morning, Tawny,\" I responded. Rio was silent.\n\n\"Zane, if she had given you his name, would you have gone and kicked his ass?\" she questioned.\n\n\"No; that wouldn't have done Leigh any good. I'd have found another way to get at him, but I'd have taken my time,\" I replied. \"I'd like to think I occasionally learn something.\"\n\n\"Thank you, Zane, for the answer and coming to help Leigh; you too, Rio,\" Tawny smirked.\n\n\"You know me,\" Rio chuckled, \"I'll never pass up a chance to grab some of that cheap Sorority tail.\"",
        "\"Rio, you have a good friend in Zane; don't lose him,\" Tawny advised her.\n\n\"I know; I'm getting a dog collar and leash for Christmas so I can keep him in line,\" Rio beamed to Tawny. Tawny chuckled and shook her head in amusement.\n\n\"Just for that, you get to sleep on the floor for the rest of the morning,\" I grumbled to Rio.\n\n\"You try that, Jungle-Boy,\" Rio snapped playfully as we made our way to the property line.\n\n\"I'm going to staple-gun your bra to the floor,\" I explained.\n\n\"I'm not wearing a bra,\" Rio snorted.\n\n\"Yeah, wrestling you into one is going to be half the fun,\" I teased her. Rio laughed and took off running. We were still snickering over events when we snuck back into my room.\n\n~~~\n\nAunt Jill was curled up on my side of the bed asleep in her nightgown. Rio looked at me questioningly and all I could do was shrug. I walked over to the bell and knelt beside Jill.\n\n\"Zane...I came in to check on you and you two were gone,\" she yawned.\n\n\"Leigh had a bad date and Paris asked me to go over and have a talk with her,\" I related.\n\n\"Did you...have sex with her?\" Jill asked as he propped herself up on one elbow. Her breasts nearly spilled out of the partially buttoned top. I tried not to ogle.\n\n\"No,\" Rio interjected. \"He held her hand and let her rest her head on his shoulder until she fell asleep. Trust me; I kept an eye on them the entire time.\"\n\n\"Yes,\" I confirmed Rio's statement, \"she had been treated shabbily and needed to talk to a guy.\"\n\n\"Zane, do you really want to be sneaking into young women's bedrooms well past midnight?\" Jill inquired, somewhat exasperated. My initial answer would be 'Yes', but that certainly wouldn't be the correct one for right now.\n\n\"Jill, it would have been unchristian to have ignored a neighbor's request for aid,\" I suggested. \"After all, it was Leigh that saw to it that I didn't totally screw up your new clothes collection.\" Jill digested that bit of news with conflicted emotions.\n\n\"Let's go to bed,\" I yawned. Jill stared at me, so I stepped over her and collapsed on the bed.\n\nRio winked at me and walked around to the far side of the bed, wiggled out of her jeans and climbed in on her side of the bed. I was still in my jeans mainly because I didn't have underwear on.\n\n\"Night, Aunt Jill,\" I muttered before dropping off.\n\nIt was inevitable that bedroom dynamics would push me to the edge of the bed. Rio has the habit of wrapping herself around her bed partner while she sleeps -- it is a body-heat issue. It seems that Jill does the same thing, so as the skyline went from night to grey, the heat of their combined bodies woke me up.\n\nFor a moment I thought I was the only one awake but I felt Rio's hand run along my thigh to my crotch. She moved her hand up and down over it for a few moments when I felt her head tilt and her look at me. Our eyes locked and a wicked glint came into her eyes. Her hand wandered over my hip to Jill's thigh that was resting there.\n\nI incrementally shook my head but Rio flexed her eyebrows in amusement, refusing my warning. Instead, she inched Jill's gown up and began tracing a finger along its length. Jill stirred but fell silent in a moment.\n\n\"Don't!\" I hissed. Rio gave me a toothy grin in response.\n\nI couldn't move my arm that was pinned by Jill but I could maneuver the one next to Rio. I wiggled my arm between her legs and she ground against me, trying to press me too tight to get free. Upping her game, Rio reached up and scooped up Jill's right breast. Jill stirred and we both froze.\n\n\"Stop it!\" I hissed.\n\n\"Her nipple is so hard in my hand,\" she taunted me. Jill shifted, causing her gown to shift up to her hips when her leg moved, and dropping her hand on my abdomen while pressing her groin against my wrist. When she went still, Rio went back to massaging her breast. First came the moans, then Jill's hips gently pumped against me, and finally her eyes sleepily opened.\n\nRio and I had shut our eyes barely a second ago but it seemed enough to make her believe we were still asleep. It took her another second to figure out where Rio's hand was, then another to figure out that pressure between her legs was my wrist and hand. She stiffened and held her breath. Slowly she started to untangle herself but I felt Rio's hand flex.\n\n\"Ah,\" Jill gasped. Her hand flattened against my stomach and her body trembled. Jill kept very still for several moments and I figured she'd take the opportunity to slip out of bed and let me settle down for some more sleep. She did move; her head rose and I'm sure she was looking over me and Rio for signs of life. \n\nShe slowly put her head back down and moved her hand around in slow circles on my stomach. Jill kissed my shoulder softly but I elected to stir anyway, causing her to feign sleep as well. Rio couldn't let things go, though. She gave Jill's breast a squeeze, then another, followed by a low moan on my friend's part. I really needed to kick Rio.\n\nJill began to rub her crotch along my arm while flitting her hand down to the zipper on my jeans. Reflexively my hand stroked her thigh just below the panty line. For over a minute Jill kept her tempo against me slow but steady.\n\n\"Zane?\" groaned Rio, pretending to just be awakened.\n\nJill slowly withdrew. Rio gave Jill's breast one last feel.\n\n\"That's not Zane,\" Rio whispered for dramatic effect, then louder, \"Jill?\"\n\n\"Oh...what? Huh?\" Jill stammered. \"Uhmmm...is that your hand?\"\n\n\"Oh,\" Rio mused, then gave yet another squeeze, \"Whoops; that would be me. Sorry.\"\n\n\"I...what are you doing?\" Jill whispered.\n\n\"I was having this sweet dream,\" Rio grinned back.\n\n\"I...you...my,\" Jill questioned. I took that moment to stir and open my eyes.\n\n\"What's going on?\" I yawned.\n\n\"Nothing,\" Jill declared abruptly. \"I should get up and make breakfast.\"\n\n\"Jill, it is still dark outside,\" I smiled. \"Let's go back to bed.\"\n\n\"I'll go to my bed, Zane. You get back to sleep and I'll wake you at 7:00,\" Jill assured me. She backed out of bed and quickly made for the door.\n\n\"You are going to pay for this,\" I grumbled to Rio. She rolled onto her stomach.\n\n\"That's right, Big Daddy, spank my bottom and call me a bad girl,\" she giggled.\n\n\"Oh, God!\" I groaned to the ceiling. \"You are incorrigible.\"\n\n\"If it is any consolation, I wuv you,\" Rio batted her eyelashes. I swatted her panty-covered bottom; she giggled and I willed myself back to sleep."
    ],
    "authorname": "FinalStand",
    "tags": [
        "college",
        "humor",
        "lawyers",
        "sorority",
        "spanking",
        "aunt"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/christian-college-sex-comedy-ch-13"
}
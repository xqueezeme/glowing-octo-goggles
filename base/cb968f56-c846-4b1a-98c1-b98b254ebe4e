{
    "title": "Lori Ch. 02",
    "pages": [
        "I woke up with the sunrise. Lori was pressed up against me; my arm was under her breasts. I lay there soaking in the feeling of her body. I rolled my hand to cup her breast and marveled at the feeling; soft but firm. I gently squeezed and felt her nipple harden. Lori let out a sigh \"What a way to wake up.\" I had to agree.\n\nI let my hand caress her body from neck to navel remembering the night before. Lori wiggled back against me and I became very aware that I was pressed against her butt; the memories and the movement causing the expected reaction. Lori smiled and pressed back even harder, rubbing me and encouraging my erection. I reached up and pinched her nipple causing her to yelp and finally open her eyes. \"What was that for?\" \n\nLaughing, \"I thought you might like it.\" I said innocently, following it up with another pinch.\n\n\"Hey! Don't start something you won't finish!\" and reached back to slap my thigh. I leaned down and kissed her, pinching again. If she could spend the day teasing me I could damn well pinch her nipples. Besides, they looked great when they were erect.\n\n\"I can finish anything you can start.\" and casually thrust my hips forward.\n\n\"Oh yeah?\" and she ground back at me. \"After last night you better be able to. However, shower first!\" and with that she jumped out of bed. \n\nI made a grab for her but she danced away. I lay back and watched her walk to the door. \"Besides, you need to brush your teeth! Morning breath! UGH!\"\n\nI laughed and got out of bed. She stood in the doorway watching me with a quirk on her lips as I approached. \"You need to put that away.\" pointing at my very hard dick.\n\n\"I had planned to then you left me there.\"\n\n\"Well, still, you need to be careful. You could put my eye out with that thing.\"\n\n\"Only if you're lucky!\" It was incredible how comfortable we were after one night.\n\nLori reached out wrapped her fingers around me. The sight of her hand full of my dick caused it to swell. \"Whoa! Big boy! Breath first. Then shower. Then we're having a 'talk'. I've got an extra toothbrush somewhere....I'll meet you in the shower. Get the water going.\" walking off to her bathroom. \n\nIt still felt odd to be naked in her house but it was also kind of a thrill. I imagined that's what drew Lori to walking outside naked; the forbiddenness of it. I quickly took care of morning stuff and had the water on and hot when Lori walked in. \"Here.\" I took the toothbrush and did the right things and found Lori already in the shower rinsing her hair. \n\n\"Hey, that's my job.\" I told her.\n\n\"Nope. Today I get to wash you.\" she proceeded to push me against the wall. Grabbing a bar of soap she attacked my chest. She wasn't being sensual at all. Lathering my chest, she moved to my shoulder, armpit, elbow, forearm, hand, fingers: repeat. Then she knelt in front of me and studiously avoided looking at my erection even though it kept bobbing and waving to get her attention. Toes, ankles, calves, knees, thighs. She stood. \"Turn around and spread your feet.\" She commanded. I complied. Shampoo; scrub head. Neck, shoulders, arms, back. Rinse. \n\nIt was all very clinical yet strangely erotic and while she had washed most of me she hadn't 'touched' me yet. Lori began massaging my back and shoulders, working her way down to the small of my back. She leaned in and whispered \"You have a cute ass.\" I could feel her nipples digging into my arm. \"I think I missed a couple of places when I washed you.\" Grabbing the soap, she began washing my cheeks. I found out that I was a little ticklish down there and Lori loved it. She would rub and caress then run her nails across the bottoms of my cheeks causing me to squirm. Suddenly Lori ran a finger down my crack and firmly began rubbing my anus. I think I grew 5 inched taller in shock!\n\n\"WHOA!\"\n\nLori continued circling, rubbing, pressing and giggled \"What? You don't like that?\"\n\nI had only been touched 'there' when I had a physical and that was always a frown-and-bear-it situation; the less said or thought the better. Lori was definitely not a wrinkly old doctor and she never actually penetrated so I surprised myself when I answered \"Yeah...uh...well, it's...it feels weird.\"\n\n\"Bad weird or good weird? Do you want me to stop?\"\n\nEmbarrassed, I replied \"It feels kinda good.\"\n\nLori kissed my shoulder and replied \"Good. I want to make you feel good.\" moving her other hand to my abs. With small circles she began edging her way down. When she reached my pubic hair she said \"EWWW! We're going to have to do something about that.\" and ran her fingernails back and forth through it. \"Some other time.\" then she moved down and cupped my balls. I tensed because she wasn't gentle but it didn't hurt either. \"Sorry\"\n\n\"It's OK,\" I replied. \"Just be careful\"\n\n\"I wouldn't want to hurt you\" she muttered kissing my arm and shoulder. She had stopped her rubbing of my butt, her fingers were still there but she seemed focused on what her other hand was doing. She moved the hand holding my balls up and hesitantly encircled my shaft. Her hand felt so small but incredible as she tried to hold it. \n\n\"It feels so strong!\" she whispered. \"It scared me last night.\" Her hand began to slowly move up and down. \"I saw it in the headlights and I couldn't imaging there was any way it would be able to fit in me.\" Her hand moved to the head where she rubbed then back down the shaft. At the base she gripped it tightly and began giving it short strokes. \"When you tried to put it in, I knew it was going to rip me apart but you went slow.\" She kissed my shoulder. \"It burned, at first. Then it...I...just felt so full. You were so deep inside of me.\" Her hand kept its short strokes but was speeding up. \"When you pulled out, I was so empty until you pushed back in.\" she began rubbing herself against my thigh and groaned. \"When I came...I've never felt anything like it. Then it happened again! Twice!\"\n\nI could feel my excitement build as she kept jerking and her dialog about how good it felt pushing me closer to the edge. \"Lori,\" I gasped, \"you're going to make me cum if you keep this up.\"\n\nShe stopped stroking. \"No. Not yet.\" releasing me. \"Rinse.\" she commanded and stepped back. I turned into the water and made sure that all the soap was gone. Lori turned me around and made sure I was clear of soap. \"Turn off the water.\"\n\nI turned it off then back to Lori. She was on her knees in front of me. \"I wanted to do this last night. I planned to. Then things just...\" she reached up and took my dick in her hand and slowly jerked it. I leaned back against the shower wall. Lori pushed my dick up flat against my stomach and began inspecting every inch of it and my balls; gently at first then more aggressively. She used her fingers, her nails, her whole hand to rub, scratch and pull. I winced as a rouge fingernail poked the wrong way and she let go. \"Oh my God! I'm so sorry. I didn't mean to hurt you.\"\n\n\"No, it's OK.\" I reassured her. \"It was...keep doing what you want. It feels good.\"\n\nWith an intent look on her face she put a hand under my balls. Lifting them, she leaned forward whispering something before giving them each a kiss. \n\n\"What was that?\"\n\n\"Never mind.\" she responded pulling my dick down and continuing her inspection, studying it. Leaning forward again she hesitated before letting her tongue give me a slow lick, all around the head. It felt wonderful! Pulling back she considered it then leaned in, repeating her lick. She looked up; flashing me a smile \"It's not what I expected. I...I'm not sure but\" she gave me a longer lick. \"I think I like it!\" and gave me a huge grin.\n\n\"Yeah\" I managed. \"I do to.\"\n\n\"I'll bet. This is what you want, isn't it? You want me sucking your cock? On my knees, in front of you, with your hard thing in my mouth.\" Opening her mouth, she slowly took the head inside. It was a strain not to just thrust forward, into her mouth. Lori closed her lips around me and I felt her tongue swirl around the tip a couple of times before finally flicking the tip. I moaned in ecstasy.\n\nI had heard about blowjobs from my older brother and even seen a couple watching porn but nothing prepared me for how great it would actually be.\n\nLori pulled back with a smack and teased \"You like that?\"\n\n\"God, yes!\"\n\nLori stared me in the eyes then winked before devouring me. Placing her hands on my thighs, she leaned in, taking me deeper. Locking her lips around my shaft she used her tongue to tease the underside. Slowly bobbing her head, never breaking eye contact, she tried pushing herself further down my dick but at the half way point she kind of gagged and pulled off. \"Sorry...you're just so big in my mouth.\" I muttered that it was no problem. \"How am I doing?\n\nI laughed and said \"If you keep it up I'm going to cum in you dirty little mouth.\" I felt weird to say that to Lori but by the gleam in her eyes it was the right thing to say.\n\n\"Promise?\"\n\n\"Yeah.\"\n\n\"Good.\" taking me back in. She moved her hands to the base of my dick and held them there with a light grip as she bobbed slowly on my shaft. I could feel my cum building as I watched her. \n\nInstinctively, I placed my hands on her head as she worked. Lori moaned in approval. Pulling off one last time she smiled begging \"Give me your sperm. Shoot it in my mouth. Make me swallow it all!\" and resumed her sucking. \n\n\"Oh my God! Lori! Get ready!\" I warned. I could feel my load rising. Lori just looked up at me and smiled, well, as much as she could with a dick in her mouth. Suddenly it was there. My cum began shooting into her mouth and Lori's eyes got HUGE as the first shot exploded across her tongue. The second blast apparently hit the back of her throat causing her to gag again. She pulled off, coughing, but I kept firing. The third shot landed on the top of her head before she looked up and began using her hands to jerk the rest out onto her face, neck and chest until I finished spurting.\n\nLori looked up at me with a stunned look. She was covered in my cum! Hell, I was stunned too! I'm not sure I've ever had that volume of cum before. I was suddenly scared that Lori was freaked out. I mean, it was our first blowjob and I had coated her with an incredibly large amount of cum. I quickly knelt down as Lori began to shake. \"Lori? Are you all right?\" \n\nShe burst out laughing and flung her arms around me. \"That was SOOO AWESOME! I mean YOU were so AWESOME. I mean...WOW!!\" She was hugging me and started to lean in for a kiss then realized that she was covered in cum and stopped, wide eyed. \n\nIt was my stuff covering her, she had been willing to do that for me....I pulled her to me and kissed her. She was hesitant at first then all but attacked my mouth. It was very weird kissing her with my cum on her face and it was even more weird to taste myself but her passion overwhelmed me. We made out on the shower floor until we finally fell over where the cold floor and water snapped us out of it. We lay there and caught our breath. \n\n\"I'm sorry.\" she said timidly. \"It surprised me. I heard you call my name then you seemed to swell up...my mouth was so full! There was SO MUCH!!\" rubbing my chest she continued, \"I tried to swallow it but...\" she trailed off.\n\n\"I'm surprised, too\" I replied. \"I don't think I've ever cum so much. You were incredible! You are incredible.\" I leaned down and kissing her, again.\n\n\"I think it's going to take a little getting used to the taste, too. It turns me on to do that for you. I liked it when you held my head. You made me feel...I don't know, but I really liked it.\" She paused \"You surprised me. You keep surprising me.\"\n\n\"How?\"\n\n\"You were so concerned about me then you kissed me with, you know, your stuff on me. \n\n\"Well, I mean, I kinda caused the mess.\" I joked.\n\n\"Yeah. You sure did!\" she laughed. \"It's just that I thought...most guys would be....you know, grossed out to kiss a girl after she...you know.\"\n\n\"I can see that. But you, uh, had it in your, mouth.\"\n\nLori giggled. \"I sure did! And my face! And all over my tits!\" She reached up and felt her head. \"You got it in my hair, too!\"\n\n\"Yeah, well, you ducked. I didn't really have an option of aiming.\"\n\n\"I'm not complaining!\" she exclaimed. \"I've talked about it with, well...the guys she's done it to made her wash their mouths out and chew gum before they would kiss them...Jack wouldn't even kiss...her...afterwards.\"\n\n\"I'm not Jack.\" And to prove the point I gave her a deep kiss. \"I can't say I like the taste but if you're going to do that to me, I'm going to kiss you, if I want.\n\n\"We need to get up and get clean again.\" Lori rolled off me and I struggled to me feet. I offered her a hand and held her as I turned on the water. \n\nI washed her this time. Not wanting to get side tracked by her body, I made it quick and only copped a feel a few times. I had something I wanted to do but we needed to be out of the shower. I hoped Lori would be up for it.\n\nDried and wrapped in a towel, I led her to her room. I guided her to her bed and took the towel away and lay down next to her. \n\nIt began with me lightly kissing her face and neck. I slowly moved my hand down to massage her chest and around her breasts, never actually touching them. I stroked her hard and flat stomach and discovered that she was very ticklish in her bellybutton. Moving lower, I gently rubbed at the top of her pubic area. Lori moaned and sighed as my hand moved across her body. \n\nShifting my hand to her thigh, I paused until she parted her legs, allowing me greater access. Moving to the inside of her knee, Lori gasped as I applied a firm grip urging her legs wider. Glancing at her face, I saw she had closed her eyes; her lips were slightly parted. I moved my hand higher and squeezed. Lori tilted her head back a little and her breathing grew a little faster. Slowly, I inched my hand up until I could feel the heat she was exuding and latched my hand to her thigh. Lori gasped and her hips tilted up. I left my hand where it was and continued to squeeze. Lori moaned softly and I think I heard a soft \"Please.\"\n\n\"Lori?\"\n\n\"Yeah?\"\n\n\"I want you to do something for me.\"\n\n\"Anything!\"\n\nI smiled. \"I want you to touch yourself. I want to see you masturbate.\"\n\nHer eyes flashed open. \"Wha...? I. No. I...\" she shook her head.\n\n\"Lori?\" I thought she might have reservations. \"Do you remember our call the other night?\"\n\n\"Yeah.\"\n\n\"Do you remember what you told me?\" I moved my hand so that I just touched the top of her thigh.\n\n\"Uh-huh.\"\n\n\"Do you remember how you told me how you walked naked across your yard?\"\n\nHer lips curved into a smile. \"Yeah.\"\n\n\"How you walked around the barn and saw the truck? Imagining it was me driving?\"\n\nHer smile grew. \"Yes. I remember.\"\n\n\"Do you remember what you told me you did?\"\n\nHer eyes found mine and she smiled broadly. \"Yeah.\"\n\n\"What did you do?\" I asked.\n\nShe hesitated. I moved my hand a fraction of an inch higher and squeezed again. \"That feels so good.\"\n\n\"What did you do?\" I repeated.\n\nShe blushed \"I...\"\n\n\"Lori?\"\n\n\"Yeah?\"\n\n\"Tell me what you did.\" Her eyebrows rose and she gave me a pleading look. \"Tell me.\"\n\n\"Kiss me first.\" she begged. I leaned down until our lips met. We both kept our eyes open as we kissed. Our tongues played tag until I broke away. \n\n\"Tell me.\"\n\nLori closed her eyes and whispered \"I touched my pussy.\"\n\n\"What?\"\n\n\"Why?\" almost pleading.\n\n\"Because you want this.\"\n\nShe looked at me again, shaking her head, \"No, I...\" and stopped. She swallowed before quite clearly saying \"I touched my pussy. I masturbated, right out there in the open. I put my fingers inside then rubbed my clit until I came. The whole time I thought of you watching me and I came harder imagining you were watching me do it. Happy?\"\n\nI grinned. \"Oh yeah. You're such a dirty girl.\" I gave her a quick peck on the cheek. \"You're MY Dirty Girl.\"\n\nLori pulled me to her and hugging and kissing me deeply. Lying back, \"Do you really want me to?\"\n\n\"To what?\" I teased.\n\nPausing, \"You like it when I talk naughty.\" as if she just put it together.\n\n\"Yeah.\" I grinned.\n\n\"Say it.\" She was trying to turn it around but I wasn't going to let her this time. She had teased me mercilessly yesterday. Now it was my turn.\n\n\"No.\"\n\n\"Why? Can't you say 'pussy'?\" she taunted.\n\n\"I can.\"\n\n\"Come on. Say 'Lori, I want to watch you finger your pussy.'\"\n\nI almost caved. Instead I removed my hand.\n\n\"Wait!\"\n\n\"Lori. It's my turn.\"\n\nHer eyes searched my face then her hand slowly moved to her thigh. \"I've never had anyone watch before.\"\n\n\"I know, but I want to. And you want me to.\"\n\nShe laughed. \"Yeah. I do.\" closing her eyes.\n\n\"Lori? I still have that picture. The one you sent me.\"\n\n\"What!?!\" her eyes flew open in shock. \"You said you deleted it. I checked your phone!\"\n\n\"True but I saw it. The sight of you, naked; fingers buried in your\" I paused and met her eyes, \"pussy, is the hottest thing I have ever seen. It's burned into my mind. You can't delete that.\"\n\n\"Really? You liked that?\" she asked innocently.\n\n\"You know I did.\" Her hand had drifted down so that her fingers rested on her pubic area. \"The sight of your perfect body made me cum harder than I had ever cum before. I mean except since I've been with you.\"\n\n\"I knew you were jerking off while we were talking.\" Her hand moved lower. \"I was so scared when I took those pictures.\" Pictures? \"Then I had a hard time choosing which one to send.\"\n\n\"I think a picture of you leaning against the wall, naked, would be hot.\"\n\n\"I had one of those. Well, almost. I was wearing a lacy white bra and the panties I gave you at school.\"\n\nHer hand moved a little lower and I could see her fingers moving, slightly.\n\n\"I still can't believe you did that. When I read that note I almost had to excuse myself to go relieve myself in the bathroom.\"\n\n\"Yeah. 'Relieve yourself'.\" she giggled. \"You mean jerk that massive cock!\"\n\nI don't think I had ever gone soft after I came in the shower but hearing Lori say 'cock' made me throb even more. Her fingers were more active and her other arm had crept up to cup her breasts, pushing them up higher. I resisted the urge to lean in. I added that to my lengthy list of things I needed to do to her.\n\nLori had closed her eyes as we talked. \"When Mr. Kimber sent me to the nurse's office, I was so embarrassed. I know she knew what was wrong.\"\n\n\"I about fell out of my chair laughing, watching you walk out of the room hunched over.\"\n\n\"I heard.\"\n\n\"I don't think anyone else had any idea what was going on. Well, maybe Vanessa. But she's cool.\"\n\n\"Yeah.\"\n\nLori's hand began moving in little circles as she rubbed herself, her breathing was becoming deeper.\n\n\"What do you think Vanessa would say if she saw you earlier, in the shower?\" I asked.\n\nShe shuddered and gasped, \"She would have been so jealous. I'm the luckiest girl in the world. I have a man with a big dick and lots of cum. There's no way I'm sharing you.\" Her hand kept moving, sometimes in large circles, sometimes in small. Her hips were moving in small thrusts, in time with her fingers. \"I can't believe I'm doing this.\" she whispered.\n\n\"Did she know you didn't have panties on yesterday?\"\n\n\"No. No one knew but you.\"\n\n\"I thought for sure the whole world would have known when you went to town. The way the wind was blowing, I knew you would have been exposed to all of Main Street.\"\n\nLori smiled at that and a groan escaped. \"No. I was a little disappointed that I didn't flash anyone but it didn't happen. Except...\"\n\n\"Yeah?\" I prompted.\n\n\"I think Mr. Jules saw me.\"\n\n\"How'd that happen?\"\n\n\"He gave us a pop quiz at the start of class. You know how much I hate Geometry.\" I knew but she was still getting an 'A'. \"I was really focused on the quiz and you know how I wrap my feet around the chair legs when I'm working on something? I was doing that so my knees were spread and I only noticed that my skirt had ridden up a little after I finished the quiz. I looked around to make sure that nobody had seen and I saw Mr. Jules looking. I mean, I'm not sure he saw but...\"",
        "She gasped, I saw her hips were really moving up and down; her fingers were plunging in and out. I was sorely tempted to touch her, to climb on and sink into her but I held back. I wanted Lori to get herself off and she looked close. Her eyes were closed tight and she stopped talking. Her breaths were getting shallow and her other hand had moved from cupping her tits to grasping them.\n\n\"No, I KNOW he saw my pussy.\" Her moans were getting louder. \"My wet pussy. I was so hot yesterday. Thinking of you.\"\n\n\"Lori?\" She was lost in her pleasure. \"Lori?\" I repeated.\n\n\"Huh?\" she gasped. She was close.\n\n\"Lori. I want you to open your eyes and look at me. Look at me when you cum.\" I commanded.\n\n\"Wha..?\" her eyes flickered open and she focused on me. I almost think she had forgotten I was there, being so focused on her task. She immediately flushed bright red as her eyes met mine.\n\n\"You're about to cum, aren't you?\"\n\n\"Uh-huh.\"\n\n\"You're rubbing your pussy in front of me.\"\n\nNodding vigorously, \"Oh God, I am.\"\n\n\"You're such a dirty girl.\"\n\n\"YESSSSS!\" she hissed. \"I'm ssssssoo fucking dirty.\"\n\n\"You're my little slut.\" I told her.\n\nShe nodded frantically \"YES! I am! I'm you dirty little SLUT!\" she cried. \"OH FUCK! MIKE!\" her orgasm slamming into her. \"ohmygodmygodmygod.......FUCK!\" she yelled! Her body began thrashing around on the bed then she suddenly sat up and froze. Both of her hands were buried in her crotch and she was rubbing frantically. Her body started to shudder as her head fell back. Suddenly, Lori let out a wordless shriek and stopped moving for several seconds before she collapsed on the bed. Laying there gasping, her chest heaved with each breath. Her left hand was still between her thighs gently rubbing causing her hips to occasional twitch. \n\nIt was the single most....anything! I had ever seen. I watched as her climax ended and she slowly recovered. Her head was tilted towards me and I think I said something like 'fuck me!\" in disbelief. \n\nHer eyes opened and she smiled weakly at me.\n\nI was almost afraid to touch her but she solved that by reaching up and stroking my face. \"That was...\" I was at a loss for words. She nodded. \n\n\"You called me your slut.\" she whispered.\n\nI hesitated then nodded. \"I did.\"\n\n\"Did you mean that?\" \n\nI was a little uncertain how to respond. I had been caught up in the moment and was trying to push her over the edge. \"Yeah.\"\n\nShe nodded and kept staring at me. I was a little uncomfortable and started to say something but she interrupted, saying \"I'm thirsty. Can you get me something to drink?\"\n\nI stared at her as my stomach dropped. I had fucked up. This wonderful woman had given me something and I had thrown it away. \"Lori?\" I began.\n\n\"Orange juice, please.\" I nodded and got up. My dick had wilted and I trudged off to get her juice. I kept trying to think of something to say, some was to apologize but I didn't know how. \n\nLori was still in bed when I walked back into her room. She was leaning back against the headboard looking out her window with a sheet pulled across her. I glanced at the clock and realized it was just after 7am. So much had happened since we woke up that it seemed that it should be later. I stood in the doorway with her juice until she finally glanced my way.\n\n\"That's pathetic.\" she stated.\n\n\"Lori...\" I tried again but she interrupted me.\n\n\"I like him hard.\"\n\n\"....uh.\" I was confused.\n\n\"How are you ever going to fuck me, your dirty little slut, with a limp dick?\"\n\n\"um.\"\n\nGetting up, she walked over to me. Her naked body was perfect, breasts swaying just right as she walked. Taking the juice, she drank half the glass and handed me the rest. \"Drink up. You're going to need your energy, if you can get it up.\"\n\nIt was slowly dawning on me that she wasn't upset. My mouth was only slightly faster than my brain. \"You're not pissed at me for calling you a slut?\"\n\nLori was surprised. \"What? Why would I be? It's what I am? At least for you.\"\n\n\"I thought you were angry, that's why you sent me away.\" relief was coursing though me.\n\nLori took the glass of orange juice from me and set it on desk next to us. Putting her arms around my neck, she pulled me to her. Again, my body knew before my mind did what she was saying. I felt my dick start to harden and press into her. \"Mmmmmmm. That's more like it.\" Then she leaned in and said distinctly into my ear \"Can you hear me?\" I nodded. Then she pulled back to look me in the eyes. \"How about now?\"\n\n\"Yeah.\"\n\n\"You're sure?\" \n\n\"Yes, I can hear you.\"\n\n\"Last Saturday, after I decided that I really did want you and to be yours is when I got naked. After. That's why I needed to get naked. I wanted you so bad, right then that it scared me. It still does.\" I saw it in her eyes. \"But I was so hot, I had to do something. Do you know how long I have been trying to get you to see me for ME? Not your sister or your best friend. When you called me YOUR slut...\"\n\nI stepped away and a look of concern flashed across her face. Holding her at arms length, I looked at her. Deliberately. Making sure I studied her. I noticed how her left breast, her left tit, was ever so slightly larger than her right. Her belly was flat, I remember how it felt: hard. I worked my way down and saw the scar she had on her right side, just under her ribcage, from when she fell out of the tree. I looked at her hips, how they flared out slightly. Her legs were so long and her toes were painted the same pink as her fingernails. I walked around her and looked at her ass. It was high and firm and perfect and so tight. It sat above her thighs with no evidence of sagging. Her back was smooth with a few freckles near her shoulders. Her dark hair hung to just below those tall straight shoulders. \n\nI turned her around and met her questioning eyes. \"You're right. I didn't look at you. I just accepted you. You were 'Lori'. Then you....what you did. I've never seen anything like I saw watching you. You're still 'Lori' but you're my Dirty Girl too...my slut, if you want to be.\"\n\nShe jumped into my arms and nearly knocked me over and crying \"YES!\" She leaned back and I saw the tears that had been in her eyes, the fear was gone. Hugging me, she wiggled around until I did stumble back to her bed and finally fell onto it. She began kissing my face, neck, and shoulders, her naked body writhing on me and I was extremely aware of everywhere we were touching. My dick was buried in the cleft of her ass and Lori was rubbing against it with abandon. \n\nI rolled us over so that I was on top and grabbed her hands, pinning them near her shoulders. She struggled a little, a token resistance, before asking \"Ok. You've caught me. Now what are you going to do to me?\" 'To' not 'with' I caught that.\n\nGrinning, I looked down at her nipples. They were rock hard, dark brown, and delicious looking. I bent down and blew on her right nipple. I glanced up to see Lori was watching me intently. I returned my attention to her breast. I bent, kissing her chest, working my way down between her wondrous globes. I kissed my way to her navel then released her arms. Lori's hands entangled themselves in my hair and tried to push and pull me where she wanted me too go. I pulled away, grabbing her hands and placed them near her shoulders and said \"Leave them there.\"\n\n\"What'll you do if I don't? Tie me up?\" \n\nI grinned and said \"No. Maybe next time.\"\n\nLicking her lips, \"Promise?\"\n\nI shook my head and repeated \"Leave them there.\" adding, \"Let me have my fun.\"\n\nShe stuck her tongue out and said \"You better make it fun for me too.\"\n\n\"That is the plan.\" and resumed my kissing around her navel. I worked my way back up and kissed around her breasts. When I kissed the area on her sides, just under her arms she wiggled and giggled. I filed that away, too. \n\nI took a deep breath and began working on her breasts, they tasted delicious. I kissed and licked my way around her nipples until she was almost begging me to kiss them. Again, I chose the right one. Flashing her a smile, I latched onto the nipple. I ran my tongue over and around it, feeling the bumps, wrinkles, and ridges. I savored the texture as I suckled on it. These were my tits now. They were big. Beautiful. Firm. Guys would drool over them but only I would get to touch them. I told her so. Lori shivered. Turning my attention to the left, I tried to repeat what I had done but gave up and began lightly chewing on her nipple. Lori's hands shot to my head and pulled it closer \"That feels so good!\"\n\n\"Tastes good, too\" I replied.\n\n\"Don't talk!\"\n\n\"Hands.\" I reminded.\n\n\"GRRRR! OK.\" dropping her hands to her sides, she began grabbing the sheets. I grinned and began gnawing my way around her tits. Biting hard enough from time to time to cause a gasp but not leave a mark. However, as much as I was enjoying that, I had other plans and began kissing my way down. I kissed and nibbled my way to her waist. \"OH MY GOD! Are you going to...I mean...\"she cut herself off.\n\n\"What?\"\n\nIn a shy voice she said \"Are you going to....you know?\"\n\n\"I'm not sure.\" I teased. \"Could you be a little more clear?\"\n\nSitting up, Lori grabbed some pillows and put them behind her. With glee in her voice she said \"You're gonna eat my pussy, aren't you?\"\n\n\"Yeah.\"\n\n\"I'm gonna watch.\" she said with excitement. \"I have dreamed of this!\"\n\nOk. No pressure. \"In that case, if I do something wrong, let me know. Otherwise lay back and shut up.\"\n\nI hadn't really thought about what to do. Kissing her pubic area, I stopped. Looking up at Lori, I saw she was staring at me intently. Right. No pressure. \n\nI had seen a vagina in Sex Ed but that's really not what this was. They talked about the parts and how babies were made and all of that 'important' stuff. I think I missed the day they covered 'Oral Sex and You'. Of course, I watched porn but I usually skipped that part. Ok. I knew that part there was the major, or was it the minor? And that's where that went. And there's her...\n\n\"Need some help?\"\n\nI blushed. \"No. I've just never looked at a, uh....\"\n\n\"Pussy?\" she offered.\n\n\"Heh, yeah.\" \n\nIt seemed like it was her turn. \"Say it.\"\n\n\"Pussy. Lori's pussy.\"\n\n\"Your pussy.\" she corrected.\n\n\"Yeah.\" I noticed that her lips were a bright pink and looked slightly swollen. It was beautiful. Leaning in, I ran my tongue up one side then the other. Lori gasped at the contact.\n\nI flattened my tongue and pressed against her lips; curling the tip, I worked it between, tasting her, savoring her. I had been a little afraid but sighed with pleasure at her flavor. Tracing her lips, I explored all her parts. When I flicked my tongue into and around her tiny opening, I was as amazed as Lori that I had fit. For her part, Lori moaned and gasped as I licked. \n\nPulling back, I sucked on her lips. She seemed to like that. When I finally moved up to her clit, I paused. Glancing up I saw that Lori had her eyes closed. I blew on her button and her hips rocked. I brushed against it and she groaned. Placing my mouth over her clit, I sucked, Lori's hands shot to my head \"There!\" \n\nClosing my eyes to better focus, I continued to suck and lick her. I paid attention to how she moved and the sounds she made. As her breathing became deeper, I pushed her legs wider and licked the length of her slit. \"Mike!\" she grabbed my hair and pulled me back to her clit. I stayed there as she came. Her orgasm small but to me it was a huge accomplishment. \n\nLori tried to pull me up but I resisted. I was determined to do better. Avoiding her clit, I kept sucking on her lips. I recalled what caused her to moan, what caused her hips to tilt and concentrated on repeating it. The second time she came, it was a little stronger. \n\nI refused to be budged as Lori tried to drag me up. \n\nHer third orgasm was quick and fast. Lori had stopped trying to move me and lay back moaning.\n\nWorking until my jaw was sore, I finally felt I had a good idea of where and how to lick. Her fourth orgasm took me by surprise in its intensity. Lori's legs snapped shut and her hands grabbed my head, not to move it but to hold it in place. \"SHIT!\" she screamed. I shifted to her clit and rubbed my chin against her lips. She went nuts! Rocking back and forth and her legs locked around my neck. I could still hear her shrieking wordlessly as she came and suddenly my face was drenched in her cum. I licked, lapped, and sucked as she flooded my mouth with her juices until her hands and legs fell away. \n\nPanting, \"Mike? Please stop.\" she pleaded. \n\nClimbing up so that I was over her again, she pulled me in to a kiss. \"Hmmmm. Thank you!\" she said with a smile. Licking her lips she said \"I didn't know what to expect.\"\n\n\"What?\"\n\n\"I didn't know what I would taste like. I've never...\" She kissed me again. \"I hope you liked it because we're going to do that again, too.\" She looked at me as innocently as she could and said \"This sex thing is kinda fun.\"\n\nI burst out laughing \"Yeah. Yeah it is. Speaking of sex.\" I nodded down between us to indicate my hard dick. \"Think we can do something about that?\"\n\n\"You mean that huge dick poking into my stomach? What did you have in mind?\"\n\n\"I'm thinking I need to stick this big dick in your little pussy.\" I declared boldly.\n\nStruggling to keep a straight face, Lori asked \"You want to fuck me?\" putting on a shocked expression. \"Whatever would my parents think? Treating me like a cheap slut?\"\n\nPulling back, I lined up with her opening and nudged forward. \"I'm not asking to fuck your parents.\" And pushed in until the head disappeared. \n\nLori tried to keep up the banter \"uh....yeah. My dad's not your type.\"\n\n\"Maybe your mom is.\" pushing a little more in, her heat enveloped me. \n\n\"I'm not sharing you...God your cock feels good. If I had known it felt so good...OH!\" the last in response to me shoving a couple of more inches in. Lori reached down and grabbed the remaining few inches of my shaft \"There's so much more!\" I pulled out a little, \"NO!\" until I pushed back in. \"Yesssss! Fuck me!\"\n\nI did what I could. I worked my whole dick deep inside her and as my pelvis pressed against hers I just rocked back and forth. Lori wrapped her legs around my waist and held me tight as her first orgasm rolled through. \"So full. I can't believe I have room for you.\" \n\nI began with short thrusts and it felt incredible! Her pussy seemed to ripple and grip my shaft as I moved. As her second hit, I found I couldn't move. I was stuck as her muscles milked me. Lifting up, I almost drug her with me; her sheath would not let me go! Then it was as if her muscles relaxed and I almost slid all the way out. \"I don't know if I can take another one. Give me a minute.\" She pleaded.\n\nWith a wicked grin I replied \"Sorry. But I'm going to fuck you now.\" slamming back in. \"AAAAAHHH!\" she cried out as I began thrusting in and out. Last night I had been worried about hurting her but today I knew I wouldn't. Besides, I knew there was no way I was going to last with her pussy clenching and spasming around me. \"OH MY GOD! IT'S TOO MUCH!\" I knew I wasn't hurting her but I figured that if I could hold out until her third, then I could let go as well. It was going to be close!\n\nI lost myself in the rhythm, sliding in and out. It wasn't long before I had that feeling of my impending explosion. \"Lori...\" I panted \"I'm close!\" I don't think she heard me. She was just emitting the random groans and grunts as we thrust together. I felt her pussy spasm and tighten. \n\nHer eyes were squeezed shut and she was moaning louder and louder and muttering \"Fuck me fuck me fuck me.\" I was there! With a final thrust, I buried myself into her and let loose with what cum I had left. Lori reacted by wrapping her arms and legs around me, pulling herself tight against me. Merged together, she whispered \"Cum in me! Fill me up! Oh God, I can feel it shooting in me!\" she let out a final wailing moan and fell limp. \n\nHer pussy released me and we fell apart. I rolled to my side panting. Lori lay there, limp and breathing deeply. I thought she was asleep until she turned her head to me. Her lips moved but I couldn't hear her. I shook my head and she blew me a kiss. We lay there for a while just enjoying each other. \n\nThe phone woke me up. Lori and I were entwined. I brushed her hair back and kissed her awake. \"I don't want to but I need to go.\" Lori looked concerned. \"Mom and Dad must be freaked. I didn't call or text last night.\" I sighed. \"I need to take a quick shower and get home.\" I felt horrible telling her I had to leave but I figured I was going to be grounded until school ended and I didn't want to make it worse. Getting out of her bed was the hardest thing I had ever done.\n\nLori crawled out of bed, God she was beautiful, and standing before me, \"I want to go with you.\" \n\nI started to say 'no' but I couldn't. I nodded and she gave me that smile that I was beginning to look forward to. \"We need another shower but this time we need to get clean.\"\n\nAfterwards, as we were drying off, Lori snorted and said \"Did you forget anything?\"\n\nI thought for a minute but nothing came to mind. \"No, what?\"\n\n\"Where are our clothes?\"\n\n\"Crap!\" We had left them in my truck."
    ],
    "authorname": "LoriisaDirtyGirl",
    "tags": [
        "dirty",
        "18-year-old",
        "first date"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/lori-ch-02-1"
}
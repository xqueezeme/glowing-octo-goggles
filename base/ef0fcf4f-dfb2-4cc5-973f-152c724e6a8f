{
    "title": "M Club Ch. 03",
    "pages": [
        "The first rule of M Club is: You don't talk about M Club. The second rule of M Club is: You don't talk about M Club. Third rule of M Club: No touching anyone but yourself. Fourth rule: No recording devices. Fifth rule: No clothing below the waist. Sixth rule: If this is your first time at M Club, you must masturbate. \n\n***\n\nSean, on returning home from dropping off Denby, was immediately sent out to the store to pick up a few things while his mom stayed home with his sick brother. He was glad for the shopping list his mom had provided, because his mind was completely lost in happily reliving his experiences the last couple days with his girlfriend. He'd have never imagined things would go there, nor had he realized just what a turn on it was to jerk off for an audience. The first time he admitted to Denby that he played with himself while thinking of her, he'd been nearly mortified with embarrassment. Then she told him she did the same and suddenly it had been okay to talk about openly. Well, at least a little bit.\n\nNow his masturbation fantasies would undoubtedly include performing for Denby. Of course, he hoped that she would soon be joining him. After today, he suspected that day might not be far off. He wasn't going to push it, though. Better to let her initiate on her own rather than feel pressured.\n\nWhile walking through the aisles of the grocery store, he remembered that he was supposed to call Andy. He fished out his phone and dialed up his friend.\n\n\"Yo,\" Andy said on the other end. \"'Sup?\"\n\n\"Hey man. Just wondering what you were up to tonight. See if you wanted to do anything.\"\n\n\"Can't. I'm already halfway to Smithville for Cassie's soccer tournament.\" \n\nSean remembered that Andy had told him about the weekend trip. Moaned about it, really, since his parents hadn't allowed him to stay home alone in spite of him being eighteen. Something about them all meeting up with some old family friends in addition to the soccer tournament, otherwise he probably could have stayed back.\n\n\"Ouch, sorry, forgot about that.\"\n\n\"It's cool. Maybe next weekend. You got any plans? Why aren't you doing anything with Den?\"\n\n\"She's got Lisa coming over for a sleepover tonight,\" he said. \"I, or we, are invited to go over to watch a movie or something.\"\n\n\"Oh, now that sounds like fun. Thanks for rubbing salt in the wound.\"\n\n\"Well, with Lisa there, it probably won't be as much fun as this afternoon was.\"\n\nThere was a brief pause on the other end. Then, in a quieter voice, Andy said, \"What happened? Did she change her mind?\"\n\n\"No, no. Not that.\" Sean reconsidered whether he really wanted to divulge quite such detailed information about his intimacy with Denby. \"Let's just say that she, uh, likes to watch.\"\n\n\"Oh really?\" Andy sounded very interested in that. \"And I take it you...showed?\"\n\nSean looked around to make sure he was still alone in the aisle. \"She was only wearing a thong and asked nicely. What do you think?\"\n\n\"You dog! Okay, tell me more about it later. Parental units are coming back now, so I think the rest break is over.\"\n\n\"Right. Catch ya later and have fun.\"\n\n\"Yeah. Sure. Later man.\"\n\nHe ended the call and then shot Denby a quick text saying Andy was busy and he could come over for a movie if it was still okay.\n\nYup, come on over. Maybe 10'ish?\n\nHe replied that he would be there. It'd be hard to see Denby and not want to get into a half (or fully) naked make-out session, but he figured he could survive. Better than sitting at home listening to his brother being sick in the bathroom across the hall from his room.\n\n***\n\nSean knocked softly on Denby's front door after texting to let her know he was almost there. He didn't want to risk waking anyone, even though it wasn't that late for a Friday night. Denby opened it and he immediately saw her parents sitting together on the living room couch, watching television, so he needn't have worried. They were nice enough and seemed to like him, best he could tell. Older than his own parents by nearly a decade, so it just felt differently than being around his parents. \n\nHe greeted them and they said hello before going back to their show. Denby took him by the hand and led him down to the basement, pausing on the steps to give him a long, tongue-infused kiss. \"They said you can stay until midnight,\" she said after they broke their lip-lock. \"And mom will probably be listening for the front door, so we'd better stick to that.\"\n\n\"Fair enough,\" he said, not too bothered by it. \"Got a movie picked out?\"\n\n\"Nah, we didn't get that far,\" she said, pulling him the rest of the way down the stairs and into the family room where the bigger television and more comfortable couches were. \n\nLisa was sprawled out on one of the couches, looking cute in gray yoga pants and baggy t-shirt with a picture of Princess Leia on it. Denby was in casual cotton shorts that barely covered her butt and a tight-fitting pink tank top. He now realized that she wasn't wearing a bra -- the fabric was just thick enough to obscure the color of the aureole but not hide the bump of nipple. He glanced back at Lisa and it was less clear if she was similarly \"casual.\" \n\n\"Hey Lisa,\" he said, settling in on the middle of the other couch, spreading his arms across the back. \"You girls been staying out of trouble?\"\n\nLisa gave him a wry grin. \"Less trouble than you and Den, apparently.\"\n\nSean felt the heat rise in his face. He knew Denby and Lisa were tight and probably shared a lot. Had Denby really shared all of that, though? How much detail? He was even more shocked that Lisa wasn't afraid to mention it to his face. She was a sweet girl, cute and usually pretty quiet. Denby had assured him that she wasn't quite as innocent as she appeared on the outside, though.\n\n\"I don't know what you're talking about,\" Sean said, in a tone that clearly meant he did.\n\n\"Oh?\" Lisa made the gesture for male masturbation, all while watching his reaction. Sean felt himself blush more furiously.\n\n\"Lisa!\" Denby glared at her friend, while sitting beside Sean and snuggling in to his side. \"Really?\"\n\nLisa shrugged. \"It's not like it's anything we don't all do. So what?\"\n\n\"You don't have to be so...\"\n\n\"Blunt?\" Lisa offered.\n\nDenby sighed. \"That.\"\n\n\"Sean doesn't mind, do ya?\"\n\nSean did, but only a little. It was somewhat refreshing to not completely hide around the details of his relationship with Denby. Still, talking about it with Lisa felt a little out of bounds.\n\n\"Not a big deal,\" he said.\n\n\"See?\" Lisa winked. \"He doesn't mind. Besides, after what you told me, he's got nothing to be ashamed of.\"\n\nSean restrained a groan and just let his head fall back onto the couch cushion.\n\n\"Okay, I think that's enough embarrassing him for tonight,\" Denby said. Sean heard just a hint of amusement in her voice rather than mortification at Lisa's candor.\n\n\"It's a sleepover,\" Lisa said. \"We're supposed to embarrass each other and share secrets.\"\n\n\"Sean's just a guest,\" Denby countered. \"He's not sleeping over.\"\n\n\"All the more reason to give him shit.\"\n\nSean looked back up, eyes wide at Lisa's salty language. He'd never heard that out of her before.\n\n\"I'm a big boy,\" he said. \"I can take it.\"\n\nLisa said, \"I know. Otherwise I wouldn't be dishing it.\"\n\nDenby snuggled in to Sean's side, curling up against him in their now-familiar television watching position. He wrapped one arm around her. Meanwhile, she flicked through the menu on the television, looking for something they could watch other than the late-night talk show that was quietly droning in the background. \n\n\"So, have you ever done that for anyone else before?\" Lisa pinned Sean with her eyes as she asked. There was nothing devious in her tone -- it was as if she was asking whether he preferred chocolate or vanilla.\n\n\"Lisa, geez!\" Denby pointed the remote at her friend and punched a button. \"C'mon, mute already.\"\n\n\"Just curious,\" Lisa said. \"And just because you won't ask him doesn't mean I can't.\"\n\nSean glanced down at Denby. Was she worried he'd jerked off for another girl before? He didn't think she was jealous of previous girlfriends, since he'd done a good job of assuring her that none of those relationships had been as involved as the one he had with her.\n\n\"It doesn't mean you need to ask at all,\" Denby said, sighing.\n\nSean shook his head. \"For the record, no, I've never done anything like that with anyone before.\" He felt Denby snuggle in a little bit closer.\n\n\"That's cool,\" Lisa said and then turned her attention back to the television.\n\nDenby had apparently settled on some movie Sean didn't recognize. They all watched in silence for a while and Sean found himself bored by the film -- some romance or other. He knew what he liked and this wasn't it, but he kept quiet since he was with his girlfriend and she was enjoying it. That one of the leads in the movie was smoking hot didn't hurt, either.\n\nWhen the movie reached a point where the guy and the girl finally get through their differences and kiss, Denby turned her head and kissed Sean on the cheek. He turned to her and met her lips in a long, lingering kiss. Sean felt himself swelling in his shorts. If not for Lisa sitting a handful of feet away, this would have been the point where they stopped paying attention to the movie and started making out in earnest. \n\nThey finally, reluctantly, broke off the kiss. \"Don't stop on my account,\" Lisa said with a friendly smirk.\n\n\"Ugh!\" Denby rolled her eyes. \"You'd like that, wouldn't you?\"\n\n\"Perhaps.\" Lisa winked, and Sean was pretty sure it was directed at him. \"If Sean wanted to put on a show, I definitely wouldn't mind.\"\n\nSean felt himself blush again. He was embarrassed by the teasing, but a tiny part of him wondered if she wasn't being serious.\n\nDenby grumbled, but clearly more for drama than out of any real annoyance. \"Geez, get a boyfriend already.\"\n\n\"Oh, like you wouldn't like it, too,\" Lisa countered.\n\nDenby opened her mouth to say something, but swallowed it. Sean realized she was blushing as well. He felt a flutter of nerves and excitement at the notion of his girlfriend wanting to share him on some level with her friend.\n\n\"Yeah, I'm right, aren't I?\" Lisa crossed her arms under her ample chest.\n\n\"Sean's not just going to whip it out for us,\" Denby said. \"And we're not going to embarrass him any further by suggesting he should.\"\n\nLisa pouted her lips. \"Doesn't he get to speak for himself?\"\n\nSean suddenly felt the weight of both girls' eyes on him. It would be easy enough to back down, since that's what most people would do. If he said he would, might that adversely affect his relationship with Denby? He didn't know if she'd feel threatened, thinking he was interested in Lisa. He didn't even really know if he wanted to do it. It had been hard enough to gather the courage to do it in front of Denby that first time.\n\nAn idea came that might help him save face. \"Tell you what. I'll put on a...show...if both of you join me.\"\n\nHe was practically shaking with nerves as the words left his mouth, but he knew it was the right path. Lisa would have to put up or shut up, and he was confident Denby would want no part since she still hadn't gone that far when it was just the two of them.\n\n\"What-?\" Denby tried to get out before Lisa talked over her.\n\n\"Deal!\"\n\n\"Whoa, whoa, whoa!\" Denby said, sitting upright and staring at her friend. \"Just whoa.\"\n\n\"What?\" Lisa gave a perplexed look that didn't quite work behind her huge grin. \"That's fair.\"\n\nSean cut back in, trying to give Denby a little more cover by which she could refuse if she wanted. \"I'm not just talking hands in or on top of the panties, mind. All garments out of the way.\"\n\nLisa seemed to pause, considering. Sean figured he might have pushed her back out of her comfort zone. If she could be made to retreat, then it would be easier on Denby.\n\n\"Shirts, too,\" he said.\n\nRather than just accept, Lisa turned her attention to Denby. \"Steep terms. What do you think?\"\n\nDenby shook her head. \"I think you're nuts.\"\n\nLisa turned back to Sean. \"Would you mind running upstairs to get us some drinks? And give us a couple minutes. I'll take a Coke.\"\n\nDenby opened and then closed her mouth. Then she opened it again, looking at Sean, and said, \"La Croix for me.\"\n\nSean looked between the two girls and their inscrutable expressions, then extricated himself from the couch. \"Sure thing. Back in a few.\"\n\nHe found himself alone up on the main floor of the house, Denby's parents apparently having retreated to their bedroom upstairs. His thoughts were a jumbled mess, unable to find a happy balance between indulging his hormones and fantasies and that fear of screwing things up with Denby and possibly her friendship with Lisa. Things could go very badly if they went down this path, but they could also be a lot of fun.\n\nSean fished the girls' requests out of the fridge and grabbed a bottle of water for himself. He set them all on the counter while making a point of giving the girls a little extra time to hash things out. The dynamic between them seemed to be one where Lisa was the leader or instigator, which was the opposite of how he'd previously perceived things. Maybe it was just a matter of Lisa being a bit more relaxed around him. He concluded it was probably best not to try to read too much into any of it and just follow Denby's lead.\n\nFiguring he'd given them enough time, Sean took a deep breath, gathered up the drinks, and headed back down the stairs, making sure to close the door firmly behind him. The girls had been talking quietly and stopped when he entered the family room. Both still sat where he'd left them and they were smiling, so at least things hadn't gotten testy between them. He handed each her drink and then sat back beside Denby.\n\n\"Has common sense prevailed?\" he said.\n\nDenby took a deep breath, but Lisa cut her off. \"We accept your terms.\"\n\nSean, even having considered this unlikely outcome, was dumbfounded. Holy fuck, they actually want to go through with this. Together.\n\n\"With a couple extra rules,\" Denby said. She hooked an arm around him and cuddled up close. \n\n\"Okay.\"\n\n\"First,\" said Denby, \"no touching.\"\n\n\"Except for yourself,\" Lisa said, clarifying. \"Obviously.\"\n\nDenby nodded. \"Right. No touching anyone else. That includes you and me, at least while Lisa's here.\"\n\nSean figured Denby was uncomfortable with the idea of Lisa watching them make-out, or she just didn't want to share. Fair enough.\n\n\"Agreed,\" he said. \"What else?\"\n\nHe looked to Denby, but she just blushed. Lisa spoke up, \"No making a mess on the carpet or furniture.\"\n\nSean felt a little heat rise in his own face and he could tell that even Lisa was a little embarrassed to bring it up. Her grin suggested that she enjoyed making him just a little uncomfortable, though.\n\n\"Tissues are on the end table,\" Denby said, finally recovering herself enough to speak.\n\n\"Got it, thanks,\" he said. \"Anything else?\"\n\n\"I think that about covers it,\" said Lisa. \"Ready to start? You two have to separate a bit, of course.\"\n\nSean considered it and then stood. \"How about I take your couch and you two sit over here. That way you can both have a clear view of me and I have a clear view of both of you.\"\n\nLisa's couch was arranged perpendicular to the larger one on which he and Denby had been sitting. They wouldn't be facing straight on, but it was close enough. And, for him, it would keep him from having to turn his head from side to side and risk missing anything or dwelling too long on one of the girls over the other.\n\nLisa stood and traded spots, with her and Denby retreating to opposite ends of the bigger couch. He settled in and they all looked at one another. How was this going to start? He was nervous enough that he was completely limp at the moment -- not exactly how he wanted to kick things off.\n\n\"Everyone's certain about this, right?\" he said.\n\nThe girls looked at each other and nodded. To his relief, Denby appeared more excited than reluctant.\n\n\"And your parents?\" Sean glanced up at the ceiling.\n\n\"I heard them go upstairs,\" Denby said. \"The stairs are pretty squeaky, so I should be able to tell if they come down from their room. Won't be able to sneak up on us and they won't hear as long as no one's too noisy.\" She glanced at Lisa when she said that, making Sean wonder if there was some level of personal knowledge between the two of them he wasn't privy to.\n\n\"So how do we start?\" Lisa said, then bit her lower lip.\n\nSean almost wished they had some porn or something to help break the ice, but he wasn't about to suggest it now. \"Get undressed, I guess.\"\n\nHe pulled his shirt up and over his head in one smooth motion, and immediately felt the eyes of both girls scoping him out. For not the first time, he was glad that he was in good shape. Their attention got him feeling a bit more comfortable with this entirely surreal situation.\n\n\"Okay, I guess if we're gonna do this...\" Denby, whose tight shirt did little to hide the shape of her breasts nor the state of her arousal, removed her top. Sean appreciated the now familiar sight, finding it even more arousing under the circumstances.\n\nLisa watched her friend, clearly looking while trying not to stare. Sean thought she might be having second thoughts right about now. She didn't have much experience with boys, after all. To her credit, though, she hesitated only a moment before she pulled her baggy sleepshirt over and off.\n\nWhere Denby's breasts were a nice, perky handful, Lisa's were large enough to hang under their own weight. The areolas were correspondingly larger, yet with less color contrast to the surrounding skin, and the erect nipples were a bit smaller than Denby's. Still, they were very beautiful, and Sean appreciated the side by side differences. Lisa blushed when she met his gaze, but set aside her shirt rather than try to hide anything.\n\n\"You two are amazing,\" he said, finding his voice through his dry throat.\n\n\"Thanks,\" Lisa said, quietly. \"This is the first time a guy has seen...my girls.\"\n\n\"On behalf of all guys everywhere, I hope it's the first of many times,\" Sean said. It was apparently the right thing to say, given the smile it brought to her lips.\n\n\"I just wish I had tits like hers,\" Denby said, eying up her friend. \"All the boys like em big.\"\n\n\"Boys have lots of different tastes,\" Sean quickly said. \"And most like them all.\"\n\nSean prayed that she wouldn't ask whose he liked better. If he was honest, he preferred Denby's, but he didn't want to have to defend it or risk hurting Lisa's feelings. He thought they were both wonderful.\n\n\"Alright, big guy,\" Lisa said, finding a bit of her confidence again. \"Show us the goods.\"\n\nSean, having been presented with two topless beauties, felt his arousal rising in his shorts. It wasn't full staff, but at least he'd look respectable when he undressed. Denby knew what he looked like, but he secretly was excited to reveal himself to Lisa.\n\n\"Fair enough.\" \n\nSean stood and gave Denby a quick smile before turning his attention to Lisa to see her reaction. She was oblivious, her eyes already on his tented shorts. He unzipped and pulled both shorts and underwear down in one motion, feeling his half-erection pop out and bob in its newfound freedom.\n\n\"Wow,\" Lisa said, though Sean wasn't sure she meant it to come out aloud.\n\nSean stepped out of his clothes and wrapped a hand around his cock, giving it a quick tug. He still wasn't fully hard, but he was getting close with the attention. Denby gave him a knowing smile and Lisa just stared openly, biting her lower lip. He liked the effect he had on the girls.\n\n\"Not bad, right?\" Denby said.\n\n\"Not bad at all,\" Lisa said. \"No wonder you guys play with them all the time. I would too.\"\n\nSean chuckled. \"It is kinda fun. Now, how about you two get caught up.\"",
        "\"Bombs away!\" Denby shimmied out of her tight little athletic shorts, leaving only a tiny pink thong behind. She was clearly relaxing and perhaps even enjoying the moment, adding a touch of showmanship to the disrobing.\n\nShe looked Sean in the eye. \"Even you haven't seen this much,\" she said, suggestively, hooking her thumbs in the waistband. With a gratuitous wiggle of her hips, she worked the wisp of fabric down and kicked it from around her ankles. \n\nRevealed was a thin strip of groomed, auburn fuzz, clearly trimmed short. Underneath, Sean could just see a hint of the cleavage of her pussy lips. He could feel his cock throb at the thought of getting a better look at her hidden treasure.\n\n\"Very nice,\" he said.\n\nDenby took a deep breath and then seemed to relax, whatever tension that might have been left in her body disappearing with her clothing.\n\n\"Thanks,\" she said. \"I still can't believe I'm doing this, but it feels kinda nice. I'm just glad it's with you two.\"\n\nDenby's attention turned to Lisa, who still stood there in her gray yoga pants. Sean followed suit, eager to see their redheaded instigator fully naked.\n\n\"Guess it's my turn, then, huh?\" She sounded nervous, but Sean could clearly see that glint of excitement in her eye.\n\nSean said, \"We won't bite.\"\n\n\"Save that for later,\" Denby said, earning a chuckle from everyone.\n\n\"Okay, here goes,\" Lisa said. She peeled her yoga pants down her legs, taking her panties along with it. Unlike Denby, there was no show to it -- she just pulled it down and off each leg. Naked, she set aside the clothing and stood upright, facing Sean. Her pubes matched the red atop her head and were far less groomed, if at all. Sean felt his cock throb again.\n\n\"Beautiful,\" Sean said. \"Good for you.\"\n\nLisa nodded in shy acknowledgement. \"If I'd known I was going to be showing off, I'd have tidied up a bit.\" She glanced toward her friend's crotch.\n\n\"You can wear it however you like,\" Denby said. \n\n\"Well, I know it's a bit of a mess. I'm just lazy until swimsuit season.\"\n\n\"Shaving's a pain.\" Denby said with a sigh.\n\n\"Looks nice, though. And I could at least do a bit of trimming. Even Sean seems to.\"\n\nSean nodded. \"Just keeping it short. Not ready to try the bald look, yet.\"\n\n\"Yet?\" Denby arched an eyebrow.\n\nSean shrugged. \"Well, if you ever asked nicely, I'd consider it.\"\n\nDenby chuckled. \"Noted.\"\n\nThere was still a hint of tension, that unspoken acknowledgement of the big leap that still remained from getting naked together to openly masturbating before one another. Sean, being the only \"experienced\" one, sensed it was falling on him to take the lead.\n\n\"Shall we?\" he said, sitting back down and leaning back on the cushions such that he was face on with the girls.\n\nLisa and Denby quickly followed suit. Both, he noted, kept their legs closed, as if uncertain about being obscenely on display before him. He didn't call either on it. It was an uncomfortable thing at first. It had been for him. He also remembered how quickly he got over it, though, once he saw how much Den enjoyed watching.\n\nWith his gaze alternating between the two girls, appreciating their beauty and their differences, Sean began to stroke his cock. He used little pressure, just sliding slowly up and down in a loose grip. It was the sort of technique he often started with -- just enough to get himself hard without any chance of reaching climax. The entire thing, masturbating in front of two naked girls, was surreal and he still had trouble believing this was anything more than a very intense, very realistic dream.\n\nDenby was the first of the girls to move. Her eyes were locked on Sean, shifting only between his cock and his eyes. When their eyes met, she raised her hands to cup her breasts. She ran her fingers over her nipples and then pinched both between thumb and index finger. Her breathing became noticeably heavier.\n\nLisa, who had also been watching Sean, shifted her attention to Denby. She must have decided breast play was a safe way to start, because she was soon mirroring her friend's actions. Her breasts were much fuller, and had a correspondingly greater range of motion -- squeezed together, flattened, lifted and then relaxed. She fingered her nipples as well, though they seemed a little less suckable in Sean's opinion. Not that he wouldn't mind the opportunity.\n\nDenby cast a brief glance at her friend and gave her a quick smile. Then she closed her eyes and slid a hand down between her legs. Sean caught the briefest of glimpses of her pussy as her legs parted just enough to allow access to her hand. It was enough to cause Sean's cock to throb a bit harder as he imagined his own hand, or hopefully one day his lips, would get to explore those depths.\n\nHe continued to watch on as his girlfriend was clearly working her fingers around, making mental notes of how she liked to pleasure herself. Her hand moved slowly, taking its time in sliding along the length of her slit. He couldn't be certain, but he was pretty sure she was avoiding direct contact with her clit -- rather stimulating the areas around it. \n\nLisa's attention at some point had turned back to Sean and he caught her staring at his cock with unabashed interest. She smiled when his attention turned back to her and she spread her legs until her knees were nearly a foot apart, and then slouched a bit on the couch so her hips were closer to the edge. Unlike Denby, she was putting herself fully on display for him. Underneath the tangle of red curls, Lisa's pussy glistened with its own moisture. The swollen lips had parted, revealing nearly everything to his hungry eyes.\n\nHe glanced back at Denby, but her eyes were still closed and she appeared lost in her own little world. Knowing he wouldn't be seen as ignoring her, he turned his attention back to Lisa who had a pleased grin on her face. There was definitely an exhibitionist streak to her, surprising him given her negligible experience with boys.\n\nLisa, having given him a long, unobstructed look, slid one hand down from her breasts to her pussy and ran her fingers playfully up and down. Making sure he was watching, she slid her middle finger deep inside her pussy and then withdrew it slowly. Using the moistened digit, she proceeded to rub herself up and down along the inner edge of her labia until finally settling in around her clit. She ran the lone finger in slow, lazy circles, her breath deepening the longer she went on.\n\nSean slowly increased the pressure on his cock, increasing the stimulation while still maintaining a slow build. He was as hard as he could remember having ever been, and if he really went at it he knew he'd blow in a minute or less. It was a pleasant form of torture to hold back while watching the girls begin their own slow rhythms.\n\nDenby drew his attention with a soft moan. She still had a hand between her legs, largely hidden from view, but her other hand was very aggressively playing with her nipples. She would circle one and then pinch and pull it, almost violently, and then switch to the other for a while. In their make-outs, she had expressed great pleasure in the attention he paid to her nipples, so he figured she was especially sensitive there. Lisa, by contrast, had discontinued all breast play and now had her second hand helping hold her legs wide, massaging her inner thigh just a whisper away from the outer labia.\n\n\"I never, ever, thought I'd do something like this,\" Denby said, her voice low. She cracked her eyes and smiled at Sean before glancing toward her friend. Her eyes opened wider on seeing how exposed Lisa was to Sean's eyes.\n\n\"I think that makes three of us,\" Sean said.\n\n\"Speak for yourselves,\" Lisa said, following it with a pleased moan.\n\n\"You what?\" Denby kept rubbing herself, but seemed to have come out of her blissful fugue. \n\n\"Well, not necessarily with you two,\" said Lisa. \"Just, showing off. I guess a lot of my fantasies have revolved around exhibitionism. Sex in public, being naked in public, playing for cameras, that sort of thing.\"\n\n\"Oh really?\" Sean chuckled. \"So, is reality as good as the fantasy?\"\n\n\"Better.\"\n\nEveryone continued masturbating, eyes wandering back and forth unabashedly. Denby, after her brief distraction, settled back into a groove and Sean was pretty sure her movements were increasingly focused around her clit. With Lisa, it was plainly clear that she was homing in on her clit, now by rubbing several fingers quickly back and forth across the little nub. \n\n\"I'll admit, it's a lot more intense than doing it alone,\" Denby said, her voice distant.\n\nThey stopped talking as the sounds of breathing, moaning, and rubbed flesh took on a life of its own. Lisa, by far the most aggressive of the three, was the first to begin approaching a climax. She was moaning openly, loud enough that Sean hoped neither of Denby's parents had come down from their second-floor bedroom. Denby, outwardly nowhere near as close to orgasm, slowed her own masturbating while turning her attention on her friend.\n\n\"Almost,\" Lisa said, the word drawn out like a moan and gasp all in one. Her fingers were flying back and forth across her clit so fast as to become a blur. Somewhere along the way, she'd worked her other hand down to her pussy and hooked a pair of fingers inside. She had also hooked one knee over the arm of the couch, aiding the spreading of herself wide for her audience.\n\nSean felt the electricity in the air, and stroked himself even a bit harder, knowing he was close to the edge himself. He didn't want to miss a moment of Lisa's orgasm, though, nor did he want to climax simultaneous with Lisa and leave Denby out of it.\n\n\"Oh, oh, oh.\" Lisa's legs went taut and her fingers finally stopped moving, only pressing hard to her clit as she gasped for breath. Her orgasm dragged out over ten or fifteen seconds, maybe longer, and then her body slowly began to collapse in spent exhaustion.\n\n\"Damn,\" Denby said in open admiration. \"Yours are a little more intense than mine.\"\n\n\"Best. Orgasm. Ever.\" Lisa muttered between heavy breaths. Her grin was ear-to-ear and her entire body was flushed red.\n\n\"Incredible,\" Sean said. It was, by far, the hottest thing he'd witnessed in person. He was just wary of heaping too much praise on her for fear Denby would take it the wrong way.\n\nLisa said, \"Thanks. Now, if you don't mind, I'm just gonna watch and catch my breath for a bit.\"\n\nSean turned his attention to Denby, who'd clearly re-doubled her efforts. Still, she seemed unwilling to expose herself too fully, but her legs had spread a little bit. She retained her single-handed approach while working over her nipples with the other.\n\n\"Don't wait on me,\" Denby said, looking at Sean. \"If you're ready, go for it. I'm still a good ways off.\"\n\nSean felt a little guilty at the thought of finishing up and leaving her as the only focus of attention. On the other hand, she'd urged him on and he was already having trouble holding off.\n\n\"I'm close,\" he said.\n\nWith both girls' eyes on him, Sean upped his pace just a notch further and could feel that familiar build up. He liked the attention, liked being open and sharing, liked the hungry looks. He vaguely remembered Denby's insistence that he not make a mess on anything. Ordinarily, he'd just cum into a tissue and be done with it, and tissues were within arm reach on the end table. He had a feeling the girls, Lisa in particular, wanted to see him squirt, though.\n\nTrying to accommodate both, he snagged a tissue and then slouched back on the couch. His stroking reached a fevered pitch and that magical, fleeting moment of sheer bliss struck like a thunderbolt. He managed to aim himself upwards such that each shot landed on his chest and stomach.\n\nShaking from the rush, Sean slowly squeezed out the last few drops. He looked up at the girls and found Lisa had leaned forward, her bottom barely still on the edge of her own couch. The look on her face was priceless -- entranced, awed, and giddy. Denby, meanwhile, was still playing with herself casually while giving him an approving nod and smile.\n\n\"Damn,\" Lisa said. \"That was so cool. I didn't expect...quite so much.\"\n\nSean glanced down and noted that he really hadn't cum all that much, probably on account of having already done so a few hours earlier for Denby. He decided not to pass that along, though, and simply nodded at her approval.\n\n\"You should see when he's going for distance,\" Denby said.\n\n\"Next time,\" Lisa said.\n\nSean, already starting to wipe up his mess, glanced up at that. \"Next time?\"\n\nLisa looked a little embarrassed, turning to Denby. \"Well, if there is a next time. Guess I shouldn't jump to any conclusions.\"\n\nDenby simply smiled. \"We can do this again,\" she said, her voice dreamy as if in a trance. \"I kinda like sharing with my two favorite people.\"\n\nSean was a little surprised, but pleasantly so. He wondered where this could end up going if they regularly masturbated together. Would it eventually be okay for he and Denby to make out in front of Lisa? Would she eventually join in? What about after graduation and Denby's no-sex promise expired? Threesomes? A small part of him knew there could be problems, but the bigger part immediately started fantasizing about the possibilities.\n\n\"You're so sweet,\" Lisa said. \"Now let's see you get off.\"\n\nDenby frowned a bit and actually stopped rubbing herself, prompting Lisa to look mortified.\n\nLisa said, \"No, don't stop! I didn't mean to put you on the spot like that.\"\n\nDenby reached out and grabbed Lisa by the hand. \"Chill. Geez. No, I'm just...not that close. It's not because of anything you said, or you two watching. It's just, well, I don't usually get myself off this way.\"\n\nSean remembered she had mentioned something about this a little while back. \"You're a vibrator kind of girl.\"\n\nDenby blushed slightly and nodded. \"It's upstairs in my bedroom. And no, I'm not going to go get it now.\"\n\nLisa's eyes grew wider. \"You never told me that!\"\n\nDenby grinned. \"Guess I still have a secret or two.\"\n\nLisa chuckled. \"Not as many as a few minutes ago.\"\n\n\"I just can't believe I knew something about Den that you didn't know,\" Sean said, smiling. He knew they were close and talked about sex, and was genuinely surprised that this hadn't come up.\n\n\"I know,\" Lisa gave a mock pout at Denby. \"We're gonna have to have words later, after Sean's gone.\"\n\n\"Whatever.\" Denby rolled her eyes, but smiled broadly. Sean couldn't remember having seen her in quite such a good mood, which was a great relief to him.\n\nHe then noticed that, after removing her hand from between her legs, Denby hadn't clamped them back up tight. Granted, her legs weren't spread wide like Lisa's had been, but there was enough of a gap to catch a glimpse of her heretofore mysterious pussy. Denby must have caught him looking. \"Oh, geez. Just come take a look already and get it out of your system.\"\n\nSean blushed at having been called out, but he wasn't going to pass on the opportunity. When she spread her legs just a little wider and beckoned him over with a curled finger, he hopped up off his couch and knelt down between her legs. The entire slit, clearly visible under the short-trimmed dark hairs, glistened with her moisture. The labia was swollen and her clit, nestled up at the top, beckoned him.\n\n\"Boys,\" Lisa said, though Sean was fairly certain she was watching over his shoulder.\n\nThe smell was unlike anything in his experience -- stronger than he'd expected, a little pungent, and very enticing. Something about it went straight from his nose, bypassed his brain, and triggered a little throb in his deflated cock. He wanted so badly to reach out and touch her, or lick her. The rules were on very thin ice.\n\n\"Okay, that's enough,\" Denby said, giving him a gentle shove back on the shoulder. \"You look like a starving lion stalking a gazelle.\"\n\nSean sighed, sitting back on the floor a couple feet away. \"How many days until graduation?\"\n\n\"Fifty-five,\" Denby said without missing a beat.\n\nLisa laughed. \"You're counting?\"\n\nDenby gave a sly smile. \"Don't think for a second I don't want it. Or that I'm waiting an hour longer than needed to meet the letter of the law.\"\n\nSean knew she wanted to have sex, to explore everything with him. They'd talked about it several times before, but usually via text chatting late at night while doing homework. He'd never heard or seen the conviction in her. He wondered if she might not want it more than he did. In fifty-five days, God help anyone who got between the two of them.\n\nLisa said, \"Well, maybe you two can both go to graduation naked under your robes and nip out behind the school for a quickie after the caps are tossed.\"\n\nDenby grinned. \"Not a bad idea.\"\n\nLisa looked to Sean. \"I think Sean thinks you're actually considering it.\"\n\n\"Who said I'm not?\" Denby gave Sean a wink. He believed she was joking, but he wasn't one hundred percent certain.\n\nLisa shook her head. \"I don't know how you two are going to make it that long. There's so much sexual tension in this room, I'm ready to fuck anything that looks remotely phallic.\"\n\nDenby caught Lisa's glance at Sean. \"Oh no you don't. Hands off my man.\"\n\nSean grinned at both the notion of Lisa wanting to jump him as well as at Denby's possessiveness. It was all fun and games as long as they kept it friendly. For a while, they just chatted about the usual things -- school, friends, television -- all while lounging around naked. None of them seemed to be in any particular rush to get dressed or to make any big deal out of what they'd just done. Sean wouldn't believe how casual and relaxed he could be under such circumstances. A lot of it probably had to do with having already climaxed, taking the edge off. It wasn't like he was unaware of the girls' bodies. On some level, he thought he was beginning to understand how some people can adopt a clothing free lifestyle.\n\n\"Crap, it's almost midnight!\" Denby hopped up from the couch and looked pointedly at Sean. \"Gotta get you out of here.\"\n\nSean sighed, knowing their good thing was going to have to end eventually. Reluctantly, he retrieved his clothes and began to dress. The girls did so as well, though Lisa appeared to be in no particular hurry as she took her sweet time getting her yoga pants turned right-side out.\n\nOnce they were dressed, Lisa came up to Sean and gave him a big hug -- a first for them. \n\n\"Thanks for being a good sport, Sean,\" she said as she separated from him. \"I'm sorry if I put you on the spot like that. I don't know what came over me.\"\n\n\"No apologies needed,\" he said. \"I had a blast and I'm glad you...nudged us along. I guess this is the sort of thing a lot of people would like to do but are too afraid to ever say it.\"\n\nLisa nodded. \"Yeah. Maybe we can try it again sometime?\"\n\nSean looked to Denby, who immediately chimed in. \"I'm busy with the family tomorrow, but maybe Monday after school?\"\n\nSean was surprised at Denby's eagerness to have another round with Lisa involved. He thought it might slide back into awkwardness after the fact, but perhaps not. \"I'm free. Just not at my house.\"\n\n\"Or here,\" Denby said.\n\nLisa also shook her head. \"Monday's fine, but my brother's usually home after school.\"\n\n\"The spot in the woods, then?\" Denby looked to Sean. \n\n\"Sure,\" he said. \"Weather's supposed to be good, I think.\"\n\nLisa chuckled. \"Listen to us. It's like a secret masturbation club. Who'd have ever pictured people like us doing that?\"\n\nDenby said, \"I know, right?\"\n\n\"M Club,\" Sean said. \"To maintain secrecy.\"\n\nThe girls both nodded and all three put their hands together. \"M Club.\" Then they burst into giggles.\n\n\"Okay,\" Denby said, grabbing Sean by the hand and dragging him toward the stairs. \"You. Out. Or I'll be grounded and miss Monday's meeting.\"\n\nSean waved goodbye to Lisa and followed his girlfriend upstairs and out the front door. She hugged him and kissed him fiercely, pressing her body hard against him. Sean felt his cock swell almost instantly and he happily pressed it back into her to let her know what effect she had on him. He couldn't remember her ever being so aggressive with him.",
        "\"God, that was so hot,\" she said in a breathy whisper after finally breaking off their kiss. \"I still can't believe we actually did that.\"\n\n\"I know. I'm just glad no one freaked out. You sure you're okay with all this?\"\n\n\"Yeah, I'm good. I may change my mind in the morning, but I don't think so. It's weird, but I'm totally not jealous of sharing a little bit of you with Lisa.\"\n\nSean kissed her and ran a hand up underneath her shirt to find a rock-hard nipple. She moaned under his touch and, surprisingly given their exposure standing on her front porch, didn't immediately push him away.\n\n\"Well, she just gets to look. I'm all yours.\"\n\n\"I know. Thanks for waiting.\"\n\n\"You're making it easier. Kinda.\"\n\nShe finally, reluctantly, nudged him to remove his hand.\n\n\"I know. Relief, and yet it's only making me want more. Just a little longer.\"\n\nSean nodded and gave her one last lingering kiss. \"Monday?\"\n\n\"Monday.\" "
    ],
    "authorname": "WatchingCloud",
    "tags": [
        "masturbation",
        "group",
        "exhibitionist",
        "voyeur",
        "teen",
        "sleepover",
        "slumber party",
        "mutual masturbation",
        "sharing"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/m-club-ch-03"
}
{
    "title": "My Only Talent Ch. 41A",
    "pages": [
        "In politics, stupidity is seldom a handicap. \n\nNote: The descriptions and accounts in these stories are fictional and do not portray any actual people or events \n\n+++++++++++++++++++ \n\nBoth girls stared at me, then spoke simultaneously. \"Why?\" \n\nMy heartbeat sounded loudly again. I looked them both in the eye for a moment. There was no way to avoid discussing this now. \"Because Nora is pregnant.\" \n\nTheir faces froze, their Suzie Signals halted, and my heart stopped. \n\nNora's face turned grey -- almost the same color as her platinum hair, but without the luster. Lara's was white -- all the blood had drained out. Then an almost identical and very skeptical look crossed both their faces -- the kind of look I had often seen before somebody shouted \"Bullshit!\" at me. \n\nFinally, Lara said \"How can you even think that? She's protected, and besides she hasn't been with anyone else since you've been gone, so it's been at least six weeks since...\" She paused and looked briefly at Lara for confirmation. \"So, unless it just happened, then...\" Her eyes got even bigger. \n\nNora asked, \"Robbie, how can you possibly know that? Can you, I mean is it possible that you can...\" \n\nI nodded solemnly. \"It's a boy.\" \n\n\"Jesus!\" \n\nI couldn't resist. \"No, just our son.\" \n\nSeveral emotions played across Lara's face. \"This changes everything!\" No shit. \n\nNora was lost in thought. Then she hinted at a smile. \"We have some planning to do, then. We must be adaptable!\" \n\nI could almost see the wheels spinning in Nora's head. She held her mouth funny for a minute, then said, \"I assume that you also want Lara to be...\" \n\n\"Yes!\" I completed her thought. \"But it doesn't have to be right away. We can move things around and be ... adaptable.\" \n\nNora stood up, hands on hips, now officially running the meeting. \"We have a little time to plan, and start things moving. First, we need to talk to your mother about how her pregnancy went. Any idiosyncrasies, problems, cravings, anything else that might be tied to your 'talent'.\" \n\nI supposed that this would not be a good time to talk to them about my idiot cousin Mikey, the Klingon speaker, lest she think stupidity runs in the family. \n\nShe paced back and forth, eyes flashing, ticking things off on her fingers. \"Second, we need to go over your early childhood. Milestones, growth curve, how early did you talk, walk, everything!\" \n\nMy mother had told me about this, interminably. Talk very early, walk late, puberty very late. \n\nBut Lara was on to her next item. It went on for quite a while. I think her final point reached number 19. Lara was not only following; she was taking notes. I tried to remember my action items, most of which could not be addressed until I returned from England and was back in school for the fall semester. \n\nThen, Lara got a funny look on her face, as if she was staring off into the far distance. \"I guess Suzanne was right, after all, wasn't she, Nora?\" \n\nMy heart stopped again at the mention of Suzanne, and a sort of chill passed through me. Nora tilted her head, and then looked at me. \"Suzanne said you were going to want children, and she knew she did not.\" \n\nDamn, these girls really did talk about everything. Even if it was true, it didn't really help. Well, maybe a little. \n\nLuckily, they were determined to distract me in other ways. \n\n+++++++++++++++++++ \n\nWe had a very tearful goodbye. Mostly mine. I found that leaving Nora alone with my boy in her belly struck fear deep in my heart that something awful would happen and I would not be there to help. Lara, however, seemed to adopt the persona of momma bear protecting her cub, and I would be back in Austin just before Lara had to leave for Pennsylvania, and Nora for Massachusetts. \n\nAnother PERT chart appeared in my head -- a nine-month plan. One of my action items was to find a work assignment for the spring semester that would place me near the Harvard B school. I made a note to self to contact all my faculty advisors and all the potential employers that I had previously interviewed with to find a possible situation. Still dangling was what happened after that. \n\nI barely made it onto the plane at DFW. I didn't sleep, despite the long flight. Might have had nightmares, anyway. No sign of Elizabeth Ashcroft Knowles on the flight. Not sure I could have handled it if she had been there, wonderful as she was. My mind raced with a thousand scenarios, none of which were satisfactorily resolved in my thoughts. Life is an adventure, right? \n\n+++++++++++++++++++ \n\nSummer was waiting for me when I arrived at Terminal 3 at Heathrow. Seeing her snapped me out of one world and into another. Back in the USA, there were responsibilities, duties, schedules, and soon to be children. In jolly old England, there was a very hot and muscular woman blazing with desire. She circled her arms around my hips, grabbed my buttocks and planted a kiss on me that made all the airport onlookers embarrassed. It made me horny. I realized my face was red, despite most of my circulatory resources suddenly moving just below my belt. \n\nI'm not sure how long it took us to get the parking area where she had left her van, but I was on cloud nine the whole time. Summer was mine for the next few weeks, ready, willing and able. I was going to cut loose, just before I had to cut her loose, and I was going to make sure neither of us ever forgot our fleeting English Summertime together. \n\nThe ride back to Summer's house seemed to take a long time -- I was anxious to arrive. Mallory greeted me with a reproachful glare, then finally presented her ears for a rub. That was all the attention she got for a while, as Summer and I lurched toward the big four poster bed like a big four-legged spider. I didn't know where to start, but I supposed the order did not matter, as I wanted it all. \n\nSummer's hands flew over me like a hyperactive child. I loved it. \n\n+++++++++++++++++++ \n\nLara had always enjoyed her counseling sessions with Dr. Asa Weltschmerz, M.D., PhD, but now she had a whole new level of pressing issues to discuss with him. Asa was the only one she could trust to completely keep her confidences, plus he could answer some of the medical questions that were running through her head. \n\nAsa seemed surprised that Robbie had revealed so much to her and Nora and was incredibly curious about the baby. He explained the need for keeping certain medical information private, and offered intensive and personal exams for Nora, along with an OB he could trust, and explained he would need to talk to Robbie too about how to keep things close to the vest. He told her most of what was \"special\" about Robbie's talent apparently did not show up until a child was approaching adolescence, and that they would all be learning as they went along. \n\nAfter Lara left, Asa was thankful for two things. First, that he had been there to discover and learn about Robbie's talent. Second, that Suzanne had never learned more about it. \n\n+++++++++++++++++++ \n\nWhen the second Monday in July finally rolled around, I was back in the Eurotunnel office and ready for our first meeting with the dildoes of Downing Street, as Oliver Hastings Harrison so aptly dubbed them. I had thought they would have a chauffeur and a Rolls befitting their self-perceived exalted status, but they took the train from London and still arrived in Folkestone with noses in the air and loaded for bear. They filed into the room defiantly. I picked out the mousiest looking guy and introduced myself. \n\n\"I'm Robbie Roberts! You must be Digby. Pleased to meet you!\" \n\nDigby was actually the guy behind him, but my purpose was still served. OHH took control, using his admiral's command voice to herd everyone into their seats. Digby looked very uncomfortable. I liked it. \n\nDrummond McFadden smiled shyly and let the dog collar he had crafted for me show out from under his notebook. Bloody bastard! \n\nOHH continued -- laying out the agenda. It was just as I had pronounced over that contentious conference call -- shared goals and agreed to measures to establish that those goals had been met. Digby sat through it all, and at one point literally sat on his hands. \n\nOn cue, two of the underlings began an obvious and well-rehearsed back and forth presentation about why we should return to their original, infeasible and budget busting plan. They looked very surprised when Digby cut them off and threw them under the bus, saying there were other forces at play and that the more moderate and workable plan that OHH had proposed would be the best choice. I could see Tessa and whoever she was working with had made quite an impression on someone, even beyond my talk with Richard Paul at topless night. Drummond gave a very amazed and impressed look and put the dog collar away. OHH smiled contentedly. \n\n+++++++++++++++++++ \n\nJay and Millie Kincaid began their honeymoon in Iowa with little fanfare, but soon noticed they were being followed. The first contingent was local yokel newscasters, usually on their first job out of J school, looking for anything of moderate local interest. Millie was extremely photogenic, and Jay looked better than most of the locals involved in car crashes or armed robberies, so they got a lot of mentions on the evening news. Even the most cursory research led to stories about the fancy wedding in Texas, and that made the story stand out a bit. They popped up so often on local station's newscasts that the regional reporters for the national channels noticed them and began to use their smiling faces waving to the folks when they arrived in a new town as \"B roll\" video for stories about the upcoming election cycle. \n\nMinor market radio stations began asking them for interviews to fill otherwise dead air, and their audiences liked them, and called in to talk about them. TV stations followed suit, and soon they were being covered with amazing regularity. \n\n\"Told you so!\" bragged Little Lionel \"Choo Choo\" Soso, a political consultant who specialized in GOP candidates and Hispanic voters. He had been hired by Cactus Jake Warner and was following in the footsteps of his much more famous consultant father, to shepherd Jay's early exposure. He had a plan, and it was working. He wanted to make Jay Kincaid one of the youngest candidates ever considered for VP, and he was all in on making it happen. \n\nSomebody else had a plan too. Ashley Armstrong was a recent graduate of USC, majoring in film and journalism. She was one of the poorest kids in her class, and she had to hustle to get into the school and hustle to stay in. They called it the University of Spoiled Children, and Ashley had experienced it firsthand, always being a second-class citizen and outsider. Despite her very camera-friendly looks and smooth announcer voice, she did not have any family pull, so as her classmates got choice internships at Hollywood studios or major network newsrooms, Ashley ended up taking a first job as the second banana evening newscaster at the lowest rated local TV station in Cedar Rapids, Iowa. \n\nBut Ashley was determined to be more than a newsreader. She wanted to be a featured investigative reporter, finding the stories that would make a big splash and get her noticed for a better job. She had worked out her own branding scheme and developed a series of background tunes and Chiron tags featuring \"Ashley Armstrong Asks\" -- hopefully highly embarrassing questions to very important people. She knew that nothing got ratings like exposing nasty sex or sanctimonious hypocrisy and she was hoping that Jay Kincaid and his hot wife would provide both. She was determined to keep after them until the truth was exposed. \n\n+++++++++++++++++++ \n\nAlexander Walton's first few weeks in the West Wing were a blur. He almost wished he was Dwight the Dweeb Boy again, when he was last completely comfortable in his own skin. Ambassador Pliskin, now National Security Advisor Pliskin, threw everything at him, hoping perhaps to burn him out. Somedays he felt like he did during his first few weeks at MIT, an overwhelmed kid, sandblasted by the fast flow of data, granular with detail, and unable to tell which datum was trivial and what was key information. \n\n\"That's the job, kid!\" Pliskin seemed to love being in the heat of things, and he thrived while Alexander struggled. \"It's a fuck load better than being on the outside, not knowing what is going on and wondering how bad the previous bunch of Bozos was screwing it all up! It's never boring. Boring is what scares me.\" \n\nAlexander was never bored. He was either working as hard and as fast as he could, or he was catching a few hours of sleep. Even his dreams were mostly alternate scenarios from work playing out in his mind. He got to his coat closet sized office at 6 AM, ran ragged all day prepping for and attending meetings, and rarely left before 10 PM. He used to envy the people \"in the know\" that got the PDB; now he contributed to it and was anxious about the follow up questions POTUS or cabinet members would ask, which usually generated a lot of work for Alexander to research, synthesize and summarize the available data. He wasn't shy about walking around and asking people to explain things to him, meeting a lot of them who did not know him and did not believe he had clearance to hear their answers. But the Ambassador always endorsed his requests, and nobody ever froze him out twice. \n\nCarmencita was proud of his new job, even though she wasn't supposed to talk about it, and very pleased with his new salary, but she was getting tired of spending so much time at home without him. She threw herself into her job, and her reputation for spectacular rehab success continued to grow within the agency. They were cautious about discussing their workdays with each other. Dwight was cleared for hearing about the activity of most of the people she worked on, but compartmentation was the order of the day. She was not cleared for what he worked on. \n\nShe became a compulsive exerciser, trying out all the new stuff from her rehab journals as her exercise routines while watching Netflix or network TV each night. She was in great shape, and when Alexander got home, usually during the 10 PM newscast, he worshipped her body properly. That kept her sane, and happy. Barely. \n\nHe was walking into Pliskin's office to drop off some of the one-page issue summaries with wide margins for annotation that Pliskin and POTUS both favored, when a familiar voice caused him to pause outside the open door. The Ambassador waved him in. \n\n\"Come in Alexander. I believe you know my daughter Suzanne?\" \n\nSuzanne smiled warmly, in an almost predatory way, and crooned, \"Hello, Dwi...\" \n\nHer father interrupted. \"Ixnay on the Ightdway, there Suz! I suppose I should formally introduce you to Alexander Walton, my new deputy.\" \n\nNo one else called her \"Suz\" and lived to tell about it. But her father had always called her that. She felt sympathy for Dwight, er, ah, Alexander. Her father burned through deputies and assistants the way a carpenter's nail gun went through nails. But she knew this one was tougher and smarter than most, and very memorable. \n\nDwight was frozen in thought, suddenly transported back to that Austin hospital room where he was trussed up after his injury and at Suzanne's tender mercy. He had a big involuntary erection and a small confused smile on his face. \n\nThe Ambassador filled the silence. \"Suzanne has a new position as an assistant professor at GWU, and she is also going to be doing some consulting work for the administration on developing economies in the third world.\" \n\nAlexander's instincts for self-preservation finally kicked in. \"Perhaps you should meet my wife, Carmencita, in the near future?\" \n\nSuzanne's smile faded. \"Perhaps.\" \n\n+++++++++++++++++++ \n\nThe trip to Torquay was designed to treat my recent Summer Mawn withdrawal symptoms, sort of a self-indulgent prelude to properly training her to reach her sexual potential and carry on without me after I returned to Austin. I had a plan for that, a rather good one I thought, but it was overcome by events quite quickly. What started as a dalliance in Devon became a very unexpected and wild experience for Summer, jump starting her final training in ways I could not have devised. \n\nOur choices for places to stay on the \"British Riviera\" were limited somewhat by our finances and the desire to bring Mallory along with us. I had never been to the French Riviera, but I had been to the \"Redneck Riviera\" in Alabama and Mississippi, and the \"Texas Riviera\" in Port Aransas and Port Isabel, and the dog friendly choices were about the same. We booked ahead and I even got a discount when I supplied my father's frequent flyer number. It's a big data global village now. Summer swapped shifts with other firefighters and I prevailed upon OHH to give me a few extra days off, so we were clear for a Thursday through Thursday vacay. \n\nInstead of tents or sleeping in the van at what I would call a campground for campers and Summer called a caravan park, we had booked a room in an old but still serviceable hotel well past its prime, and several blocks from the water. It didn't quite achieve its former Victorian splendor but was at least affordable and clean. \n\nOnce we had stored our stuff in the room, and Mallory had sniffed and approved the area and settled in her double-locked crate for a while, we headed for an early dinner in the dining room, which had a reputation much loftier than the hotel alone. The restaurant was full of locals in addition to tourists like us. The food was surprisingly good, and Summer, a very discerning culinary customer indeed, announced we should come back, in addition to trying some of the other places she had researched. \n\nWe went up to our room, took Mallory out for a walk, then returned and shed our clothes. Although Summer and I had been going at it several times each evening since I got back from Texas, my thirst for her juices had returned, and for desert I feasted between her thunder thighs and listened happily to the sweet Suzie music she played as I did so. After her second and surprisingly short refractory period, I turned her over and did her doggie style while her doggie watched. I slammed into her with abandon, and as she got into the rhythm, a stray image popped up on her Suzie carrier. Drummond McFadden, in the romanticized flesh! Shirtless, with hair a foot long and atop a big black horse, no less. \n\nWell, truth is truth, I suppose, my ego notwithstanding. Where is Asa Weltschmerz when you need him? My only available psychoanalyst was always the persona of my mother that I carried with me, and I could hear her now. What is the worst thing that could happen? I would lose Summer to Drummond? I was going to lose her anyway, and Drummond was a good guy, and I know he liked her, too. Perhaps I'll have to modify my plan for Summer a bit. \n\nBut if I wasn't careful, I might lose my erection. I looked down on Summer's wonderous backside, and thankfully John Henry the pile drivin' man soon joined in, steeling me to my task. Perhaps it was a little burst of testosterone that prompted my next thought. \n\n\"Summer, you slut, before I leave for Texas, you are going to have to show me you can take on two men at once, you know.\" \n\nHer heavy breathing stopped, she grunted, and came, hard. The Suzie signal image of Drummond dismounted the horse and walked purposefully towards her mouth. Then she took in a giant, gasping breath. I was on a roll. \n\n\"Not just in your mouth, either!\" I pulled out of her pussy and dramatically entered her perfect pucker. So tight and so right! She began keening, and I grabbed her hair and pulled her head back, hard. She came again, just as I finished off too. What a woman. \n\nIt took us both a good five minutes to stop the heavy breathing. Summer spoke first, of course. ",
        "\"You are getting into desperately dangerous territory, Robbie. I can't believe you talk to me about such things!\" \n\n\"You will have to believe it when it happens, beautiful, and it's not your choice, it's mine. You will serve as directed, perhaps serving several of my friends, with or without a blindfold. Do you read me, slut?\" \n\nShe shivered. After a few minutes of silence, she whispered, \"what about a woman?\" \n\nThere's nothing like an English Summer, is there? \n\n+++++++++++++++++++ \n\nAs she walked back to her car, Suzanne Pliskin was reflecting on her strong and very visceral reaction to seeing Dwight, scratch that, Alexander. Back in Austin, she had her way with him, just the way she liked it, and he responded beautifully, and she responded to him. Part of it was the tension and the power play. She knew how well he was trained, and if he were not in traction and tied down, he could have tied her in knots and killed her without leaving a mark. \n\nAlexander, as he was now called, was fully recovered, and he looked good. Better than ever, in fact. If he survived a full year with her father, he would be a major DC power player in his own right and know all the right people. Mike, unfortunately, was not a power player right now, in the bedroom or anywhere else. \n\nAfter his miraculous emergence from a long coma, he had struggled badly with his rehab and was on the brink of sinking into a deep depression. Suzanne's father had prevailed on someone to get Mike connected with a wunderkind rehab doc that did work for one the three letter agencies, and she hoped Mike's strength and range of motion would soon improve, along with his attitude and interest in Suzanne's neglected body. \n\nShe decided that Alexander might be able to provide her with some very needed physical therapy of her own until Mike recovered. Although no longer restrained by a body cast, perhaps he would be constrained by his position working for her father, and he might find it hard to refuse her demands. With his work schedule, he was probably stressed out and in need of some quick release himself. She suddenly remembered a line from an old videotape football movie she used to watch as a teenager while marooned in Morocco. A big ugly football lineman professed his undying affection for a petite and comely cheerleader by telling her \"As long as I have a face, you have a place to sit.\" \n\nSuzanne was sure she would look good sitting on Alexander's face. Maybe she could make his new wife watch! \n\n+++++++++++++++++++ \n\nMallory turned out to be a real acrobat and accomplished frisbee catching dog. Tireless, too. We spent a long time each day walking up and down from our place to Corbyn Beach and exploring the area. We even made a long trek to Hope's Nose, and for a moment I was afraid Mallory had found a tunnel and gone in to clear it out. Her energy was unbounded. Luckily, she didn't seem to mind other dogs. She pretty much ignored them, and there was no trouble. She always knew where Summer and I were and stayed religiously between us and any strangers that might approach. \n\nMallory's favorite spot was Paignton Pier, where she delighted in looking at and sniffing all the passersby. I suppose it was her version of people watching at a fair. She didn't kill anybody, but one fellow who looked like he might have been a pickpocket skedaddled when Mallory made just a little noise in her throat. Probably wise. We left Mallory in her crate and Summer posed with me next to the Heaviside marker on the Blue Plaque Heritage Trail, but Summer was much more interested in the literary types. I took a picture of the Singer plaque for my mother to put on the wall near her sewing machine back in Dallas. \n\nOn our next to the last day of the trip, we ventured to a highly recommended dining establishment on Cliff Road. It had a nice view of the marina, and lots of well-heeled patrons, albeit not nearly the crowd that might have been here on the weekend. Summer got some appreciative looks as we were seated and seemed to be enjoying the attention. When I saw a classy looking woman seated across the patio from us, I realized my plans for Summer could be accelerated and highly intensified. \n\n\"Summer, do you see that woman seated by herself over against the west wall?\" \n\n\"Do you mean the one with the blue skirt and yellow blouse?\" I nodded, and she continued. \"The one with the Burberry coat and scarf perfectly draped over the side chair, with the perfect hair, perfect makeup, perfect nails, perfect skin, and the perfect Botega Venetta tote?\" \n\nI supposed she had noticed. \n\n\"Yep, that's the one. What do you think of her?\" \n\n\"She looks like she just stepped out of the society photos in the Tattler and is having an evening cocktail after lunching with the royals. She probably owns the restaurant, a yacht in the harbor, and perhaps half the town.\" \n\n\"Well, I think she is feeling a bit randy, and you, my little sub, are about to walk over and proposition her, suggesting she join us in our room for the rest of the evening.\" \n\nSummer's face froze. I heard no Suzie note at all. It would be more accurate to say that her skin became transparent, as if all the blood just left her face. I could see the purple veins under her skin like an anatomical model. Her jaw dropped, and her pulse, so often visible in her lovely neck when she was excited, was so still I was momentarily worried about cardiac arrest. \n\nHer face portrayed shock and humiliation. It was like the feeling I got from Lara when she first kneeled before Suzanne. I realized that Summer was looking at a one-woman proxy of all the people she imagined and dreaded dancing naked in front of in her desperately dirty dancing nightmare dreams -- about the sexual things she did not think she could bring herself to do. I could hear the humiliation burn and fester, like previously sunburned flesh suddenly exposed to strong hot sunlight. \n\nShe took a big breath, and I went for the close. I leaned into Summer and told her exactly what she was to propose to this woman. \n\n\"You will tell her that you and your short-term lover and Master, me, are completely honest with each other about our sexual desires, and that I have told you that want a classy babe like her to blow me while you watch. If she does it well, and pleases me totally, then she will be allowed to eat your pussy while I watch.\" \n\nSummer stopped breathing again. \"But Robbie, what is she just tells me to go away?\" \n\n\"She might. You will experience the agony and uncertainty that men may endure every day when they ask a woman out and might be rejected. Perhaps you will get lucky. You must do everything possible to convince her to spend the night with us.\" \n\nI took her phone out, dialed my number, and locked the microphone open, so I could hear what she said. \n\n\"Off you go, slut! I'll be listening.\" \n\nI was not sure she could stand up. Slowly she rose, wobbly on her legs like a clumsy young horse. She was a little less unsteady as she made her way across the outdoor decking. The woman looked up from her book with a very slight smile, and Summer stopped, frozen in her tracks. I was afraid she might bolt and run for the van. \n\n+++++++++++++++++++ \n\nSummer somehow felt like she was an observer, looking on from outside her own body, walking toward one of the most intimidating women she could imagine. She appeared even more intimidating in closeup. She looked to be almost thirty years old. Her makeup was perfect, but so was the skin on her neck. Her arms were toned and muscular, her posture perfect, like a lioness about to spring into action. Her eyes were alighted with fire and mischief. \n\nWhen she realized that Summer was going to stop at her table, she put her book all the way down and examined Summer from head to toe, her eyes slowly moving over her body, and in Summer's mind finding and cataloging every imperfection. Summer shivered in shame, but forged ahead, not even sure what drove her. The little fat girl deep inside was going to get dissed again, she was sure. \n\nHer voice quavered as she forced herself to say what Robbie had demanded of her. Somehow, she had completely relinquished control -- this was Robbie saying these things with her mouth, but not her. It wasn't really her fault. She could just accept whatever happened. She would get rejected and ridiculed and then retreat into her shell like a scalded clam. Then life would go on again like it always had before. \n\nThis most intimidating woman smiled a very tight and funny little smile, and then looked Summer over again, up and down, slowly, appraisingly, and then spoke in the most perfectly modulated upper, upper class English accent Summer had ever heard.  \n\n\"What is your name dear?\" \n\nSummer gulped, very loudly, she was afraid. \"Summer. Summer Mawn.\" \n\n\"I am flattered by your offer dear, but I would have to insist on a few provisos of my own. First, we should go to my rental house instead of your hotel. We would have much more room and would not disturb your immediate neighbors.\" \n\nSummer could not breathe. Was this woman truly considering this? She could not move or speak. The woman apparently took this as acquiescence to the first proviso of her counteroffer and continued. \n\n\"Second, I would have to insist on complete discretion from both you and your lover. No mention whatsoever of this to anyone else, ever!\" \n\nSummer lowered her head to gulp and try to take a breath. It must have looked like a nod of assent, because the woman went on. \n\n\"Third, after the initial activities you described, you must agree to serve me in any way I desire for the remainder of the night and the next day. Anything I want, and anyway I want it, you will do it for me. Do you understand?\" \n\nThe floor dropped out from under Summer, and she almost fainted. What would this woman want? But Robbie had said she must do everything possible to get this woman to agree. Her face burned, she could not feel her legs, the room was about to spin, but she forced out her answer. \n\n\"Yes\" \n\n\"Yes, what?\" \n\n\"Yes, I will do what you tell me? \n\n\"Yes, you will do what I tell you, what?\" \n\nSummer's embarrassment somehow doubled. Her humiliation spiked, but so did her excitement. This was really going to happen. She made herself say it. \n\n\"Yes, I will do anything you want, Mistress!\" \n\nThe woman's smile changed. It got wider, bolder, and her posture changed a little. She looked away from Summer for a moment and made eye contact with Robbie, who was watching intently, and listening with his phone held up to his ear. \n\n\"You certainly will, you little slut, and you will be amazed at what you can do for me! \n\nSummer shivered again. This was real. It was deeply, darkly, desperately, dirty, dirty, dirty and she had just agreed to do it. She didn't even know exactly what she had agreed to do. The woman leaned back in her chair, revealing some muscular and shapely legs as her skirt rode up. She noticed that Summer's eyes were now glued to her and smiled again. \n\n\"One fourth and final proviso. I insist that you bring your dog to my place. I don't want to be cruel and leave her in her crate too long.\" \n\nSummer was startled. How could this woman possibly know that Mallory was here? Or that Mallory was female? What the hell was happening? Nevertheless, she knew she should answer promptly. \n\n\"Yes, Mistress!\" \n\nThe woman rose and took Summer's hand, kissed her lightly on the cheek, and then whispered in her ear. \n\n\"If you serve me very well, I might let you call me Elizabeth.\" \n\n+++++++++++++++++++ \n\nRobbie's timing could not have been better, as far as Elizabeth Ashcroft Knowles was concerned. He didn't know that, of course. He didn't even know that she would be on holiday here until about 30 minutes ago. But he had reacted well and seized an opportunity perfectly. \n\nElizabeth had spent the last 4 months undercover in Croatia; a beautiful county, but their prisons were not nearly as appealing as their castles and countryside. Elizabeth had been supplied a legend as a con artist and financial scammer and had been installed as an accountant's cell mate at Po\u017eega. Elizabeth had protected her from the cruelty of other prisoners and guards, and won her trust, convincing her to tell HQ all about her international client's accounts, comm system, and illicit money moving activity in return for a pardon and a fresh new identify and life, in Canada. \n\nElizabeth had been going stir crazy, on guard every moment and never able to relax the entire time she was there. Back in England on a short leave for a while, one of her bots had pinged her when Robbie booked the hotel, and she had arranged to spend some time off here. She planned to spend some time getting herself off and doing the same for Robbie and his very interesting lady friend. Sometimes, a girl had a duty to do whatever it takes to relieve job stress in order to be fully effective in her next assignment, didn't she? Robbie's little improvisation had given her a prompt to begin this lesson, but she was going to teach Summer Mawn a few things that Robbie never could. \n\n+++++++++++++++++++ \n\nI almost lost it when I saw Elizabeth sitting at that table, but sometimes you have to adapt to change. We went back to our hotel and picked up Mallory and her kennel, and at Elizabeth's insistence, grab all our other stuff and check out of the room. We then followed her up into the hills about half a kilometer or so to a big one-story house surrounded by stone walls and trees, with lots of white and pink lilac growing around it. \n\nThere were four bedrooms and three baths, and Elizbeth installed us in a lovely suite near the back garden, complete with tile floors and a big water bowl for Mallory. I was a little worried about Mallory's reaction to Elizabeth, but she just sniffed her a little and then relaxed. She found a cool spot on the tile floor where she could see us, and the front and back doors, and curled up, watching us with her chin on the floor. Summer did not relax. She paced like the proverbial cat on a hot tin roof. \n\nElizabeth did her hostess thing. \"Let's sit on the couches for a few minutes and get to know each other a little.\" \n\nShe smiled languidly at Summer. \"Before we get to know each other a lot!\" \n\nSummer gulped. \n\n\"How about something to drink?\" \n\nSummer almost shouted. \"May I please have a double vodka on the rocks?\" \n\nI had never seen Summer have more than one drink in less than an hour, but maybe she needed something to calm her nerves this evening. Elizabeth made her a triple and let her fingertips linger on Summer's arm when she gave it to her. \n\n\"Mineral water for me please.\" I said. I wanted to stay well hydrated. I didn't know when or how we were going to disclose to Summer our previous relationship, but I decided to let Elizabeth take the lead on that. \n\nElizabeth give me an amazing, hungry look and then turned back to Summer. \"Are you quite comfortable, dear?\" \n\nSummer seemed surprised by the question but smiled. \"Yes, thank you.\" \n\n\"Good. I'd like my audience to be comfortable. Please hold your applause until I have finished!\" \n\nWith that, she stood and walked over in front of me, crooking her finger for me to stand up. I stood up, and so did my dick. Elizabeth looked at Summer and licked her lips. Summer drew a big breath. Me too. \n\n+++++++++++++++++++ \n\nAshley Armstrong had learned the Kincaid's routine well by now. They did tourist things, such as they were in Iowa, during the day, and had dinner with political power brokers, usually at supper clubs or country clubs. They usually got back to their hotel room about 10 PM and stayed in after that. \n\nAshley dropped a few dollars on the maid, bellman, and parking attendants, and learned that no one else had been observed going in or out of their room. The bellman who listened outside their door at Ashley's behest said he heard plenty of heavy breathing and little cries at night, but he also heard something like spanking. The maid confirmed that the sheets were always twisted and turned in the morning, and had plenty of dried fluids on them, but one night they had a little blood on them, too. She also said they never took anything from the mini-bar, and the room was always clean and picked up, but sometimes there were wooden clothespins left on the nightstand. \n\nAshley was getting discouraged, but she continued to have one of the cameramen follow them while she was on the air. \n\n+++++++++++++++++++ \n\nElizabeth did a slow strip tease in front of me, in stark contrast to her swift disrobing act on the deck of Adnan's yacht. I only thought I was hard before. She worked it, revealing that amazing Tai Chi body and photogenic tan step by tantalizing step, as much for Summer's amazement as my excitement. She made eye contact with Summer as often as she did with me, and each time I looked at Summer she was staring slack jawed. \n\nElizabeth was enjoying herself, too, as her nipples were little hard bullets and goose bumps covered her upper body. Summer looked embarrassed, as I am sure she had never been a live audience for a blow job before. Finally, Elizabeth kneeled and posed for Summer with her face about an inch from my straining erection, portraying some kind of wild selfie, captioned, 'look what I did on vacation' or 'guess who'. \n\nI was proud to be her model and offer my selfie stick. When she touched me, Summer made more noise that I did. But she could not have enjoyed it as much as I did. Elizabeth began by gently kissing my cock with closed lips, all over, accompanied by a lot of warm and showy exhalations. My lizard brain wanted to grab her head and fuck her mouth, but I waited for her to set the pace. She then put her tongue under my dick and lifted it up and down, like she was using it as a weight to exercise her tongue muscles, cutting her eyes over to Summer when it was at perigee and looking up at me when it was at apogee. This was surely my favorite kind of orbital mechanics exercise. \n\nSummer groaned lowly as Elizabeth began to tongue my balls, and then slowly sucked then into her mouth, pulling them down and away from my body. She alternated between the left and right, and I lost all touch with reality. Then she quickly engulfed me and swallowed my entire length in a single motion. Summer made a noise that sounded like a muffled cough. One hand played with my balls while the other grasped the back of my thigh and pulled me into her. Her head began to twist left and right, and I felt the tide already beginning to turn. \n\nAt this point, Summer leaned forward on the couch and stared openly at us. Elizabeth glanced over at her and her eyes smiled, and then she began taking me even deeper and tonguing me with a flourish on each stroke. Summer's breathing began to synchronize with Elizabeth's motions. I felt a wave flowing and suddenly I knew could not hold back. I groaned, bent my knees slightly, and let loose. Somewhere, in the back of my mind, I thought about wasting sperm. What's up with that? \n\nElizabeth apparently did not consider it a waste, and she made a real show of sucking me dry. She put both hands on my buttocks and pulled me all the way in for a final milking, then released me with a resounding plop. I glanced over at Summer, and she looked very thoughtful. \n\n+++++++++++++++++++ \n\nAfter his office interaction with Suzanne Pliskin, Alexander Walton left the West Wing early for a change and headed for home, perhaps to assuage his guilt over spending less time with Carmencita. In the car on the way home, he made reservations at a French place on Pennsylvania Ave that she had expressed an interest in. Not for tonight, but for their six-month anniversary. He did text Carmencita that he was coming home early and could pick up dinner on the way home. She sent a happy emoticon and suggested Sweet Greens. ",
        "When he got home, they dug into their salad bowls, and talked about their workdays, or at least Carmencita talked about hers. \n\n\"You'll never guess who I got as a new patient today!\" \n\nAlexander had just taken a big bite so he mumbled and nodded, indicating that she should go on. \n\n\"None other than Ambassador Pliskin's son-in-law!\" \n\nHe almost spit out his Shroomami. Carmencita got a funny look on her face. \n\n\"Why the strong reaction, honey?\" \n\nHe quickly swallowed, clearing his mouth to speak. \"Well, his daughter was in the Ambassador's office today. She is going to be doing some consulting for the administration. But I don't know much about her husband.\" \n\nCarmencita looked suspicious. \"Oh, he was in all my journals and lots of the popular press. He woke up after more than two years in a coma, after a devastating automobile accident and fire.\" \n\n\"I've heard of that guy. I didn't realize he was Suzanne's husband.\" \n\n\"She married him after he woke up, but apparently they were dating before he was injured. His name in Mike. He has a long tough road ahead of him. My boss asked me to take him on as a favor to the Ambassador. He was not making much progress with his previous therapist.\" \n\nAlexander tried not to look guilty. They finished up their bowls and cleaned up the kitchen table. She noticed he had an erection when he stood up. \n\n\"Hey, tiger, let's go to bed early, huh?\" \n\nHe smiled, then spoke his mind without thinking. \"How about I pretend to be paralyzed and then you have your way with me?\" \n\nShe looked at him sideways. Whoops. \n\n+++++++++++++++++++ \n\nAshley's cameraman texted her to come by immediately after the newscast, and she was at the hotel by 11. He said that Jay Kincaid had come home alone from a dinner at Mo Brady's, and his wife had taken another cab from the steakhouse and had not come home with him. So far, Millie Kincaid had not made it back to the hotel. Ashley sent the cameraman home and resolved to watch all night if she had to. \n\nA few minutes later, a taxi slowly cruised by the front entrance of the hotel and went around to the door near the self-parking area. Ashley started her car and drove around the corner so she could see. She was amazed to see a very tall and garishly dressed woman emerge from the taxi, with six-inch heels, black thigh high boots, and a red sequined miniskirt that set off her bright red hair. It was the most over the top Halloween hooker costume Ashley had ever seen, outdoing even those worn by co-eds at the wildest USC frat parties. \n\nAshley pulled out her Sony Alpha that was pre-set for low light and fired off a string of shots just as the woman went through the door. She dialed up her bellman informant but got no answer, leaving a message for him to call ASAP whatever the time. She pulled around to a parking spot that allowed her to see both side and front entrances and settled in to watch. She fell asleep about two hours later and stayed out until honking horns from the morning traffic awakened her. Cursing, she looked at the photos from last night. She had several good shots of the woman's back and crazy outfit, but none of her face. Damn. \n\n+++++++++++++++++++ \n\nElizabeth stretched and yawned. \"Wow, I really enjoyed that. Would you two hold on here for just a minute? I'll be right back.\" \n\nI sat down, temporarily spent, on the couch next to Summer. Elizabeth disappeared into the big kitchen area and we heard some banging of pots and pans, followed by muted popping noises. She returned with a cold can of Spindrift water, and a wooden bowl of popcorn, both of which she handed to me. \n\n\"You are now our audience.\" \n\nShe turned to Summer. \"I want you up on the coffee table, dear.\" \n\nShe grabbed Summer by the wrist and positioned her on the coffee table in front of me, facing me, and began to remove her clothes. When she had removed her relatively daring red panties, she began to gently caress Summer. Summer jumped at her first touch, and a Suzie impulse spiked out, like a static electricity spark on a cold, dry winter day. \n\nBut there was nothing cold or dry about what was about to happen. Summer at first looked like a little girl caught with her hand in the cookie jar. But soon thereafter she was the cookie jar, and Elizabeth was opening the jar by removing the red panties, and obviously preparing to eat the cookies. A thousand expressions rapidly flew across Summer's countenance, and most of them were, I was sure, brand new to her. Surprise, astonishment, embarrassment, amazement, and a dozen others flew by like shuffling cards. Elizabeth took her time, slowly and inexorably touching Summer everywhere it was possible to do so, first with her fingertips, and then with her lips. \n\nSummer's breathing became ragged, and so did Elizabeth's. I was sure that neither of them knew I was there. I certainly knew they were there. Despite Elizabeth's very recent and very effective efforts on my orgasmic behalf, I was standing at full attention, even though I knew it would be sometime before they would pay any further attention to me. I had to content myself with playing a little game of voyeur detective, inferring what I could not see from the facial expressions and slurping noises. I was instantly convinced that Summer would not consider this a crime. \n\nSuddenly, Elizabeth reached up and spread Summer's buttocks and buried her face in the backside of her pussy. Summer's expression became other worldly. Pleasure on the edge of pain, perhaps. Summer's breathing began to accelerate -- the little engine that could -- come. Suddenly, she did, gasping. Elizabeth pulled back, drew a big breath, and then dove back in. I was amazed. I'm pretty sure both girls were too. Elizabeth brought her off twice more, then rolled over on the floor to catch her breath. Summer did the same, splayed across the coffee table. I just watched them move air. \n\nMallory trotted over to me, with her leash in her mouth, and her nostrils flaring from all the wild and hormonal scents in the room. I suppose some things must be taken care of no matter what the circumstances. I pulled on my pants, slipped into my shoes and took Mallory out into the back garden. Summer kept some doggie bags in a little pouch attached to the leash, so I was prepared for any canine eventuality. \n\n+++++++++++++++++++ \n\nAshley followed Jay and Millie Kincaid every day, hoping to record something scandalous. On their final night, another woman entered via the side entrance, late at night as before. She also had on super high heels, but with white boots, and a white leather outfit, with bouffant style blonde hair. Ashley snapped lots of photos, but none captured an identifiable face shot. Looks like golden boy Jay Kincaid has a penchant for working girls. How could she follow them when they left Iowa? She had to get video of Jay with a hooker! \n\n+++++++++++++++++++ \n\nBy the time Mallory and I came back in, Summer and Elizabeth were seated together on the leather couch, having what seemed like a very conventional conversation, save for them being starkers naked. They could have been talking about the weather, but they decidedly were not. I couldn't make out their words until I got closer. \n\n\"That really was your first time with another woman?\" \n\nSummer turned red. \"Well, one of my uni roomies kissed me once, but it didn't go very far. You went all the way. All the way! I've never felt anything like that before. What's your secret?\" \n\n\"It's no secret dear, and it is something I will demand that you learn and apply over the next 24 hours. You simply devote yourself completely to someone else's pleasure. Give them everything you can think of, with all your heart, and enjoy how much you please them!\" \n\n\"You certainly pleased me. I pledge to my best for you.\" \n\n\"You certainly will. When I ask for something, throw yourself into it without reservation. Be as nasty as you can. I will tell you what I want you to do, and you must do it enthusiastically, instantly and without hesitation. I too am just learning to let myself have what I really want, to ask for it as soon as it occurs to me.\" \n\nSummer turned to me with an earnest glance. \"Do you have something to tell me about Elizabeth, Robbie?\" \n\nI looked at them both, then focused on Summer. \"She's a lovely young lady, and I'm proud to call her my friend.\" \n\n\"That sounds very familiar. Almost as if by rote.\" \n\nElizabeth stretched, smugly. \"That is all I would ever want him to say, isn't it? That's all he ever will say, which is perfect. You will be doing some amazing things for me very soon, but that is all I will ever say about you.\" \n\nSummer looked back and forth between us, then took a very deep, very slow breath. \"I'm ready.\" \n\n+++++++++++++++++++ \n\nAshley Armstrong literally hated the idea of calling Binky Bleriot, but she really didn't have any choice. Binky was the queen bitch of the KKG house while Ashley was at USC. Binky was too cool for school and let everyone know it. Binky's stepdad was some sort of Hollywood talent agent, and Binky thus name-dropped celebrities like some people shed flakes of dandruff. Not that Binky had dandruff. Binky's hair was always perfect -- she had it done at the studio by one of the hairstylists to the stars that her stepdad knew. \n\nBinky choose a journalism major because it was so totally woke, and you didn't have to take much math. Ashley was not really sure how Binky got into USC. Binky was strictly bottom of the bottom quartile in every class she took, and she paid Ashley to tutor her and write all the papers for the required history and government classes. For a journalism major, Binky was a terrible writer, but she was a popular 'food blogger' which meant she kept a three hour no class gap midday so she could go to a trendy restaurant for lunch each day and post a photo of her plate. Ashley learned she could get a free meal if she arranged her tutoring sessions around noon, so she would ride to lunch in Binky's bright green Nissan Leaf electric, which just so happened to get the best electric vehicle charging only parking space near the sorority house. \n\nDespite all this Binky somehow passed all her classes, got a degree, and got the best job of anyone that graduated in Ashley's J school class -- the Dallas regional stringer for a national chain of TV stations. She got invited to all the right parties, and could get interviews with all the right stars, so she did celebrity reporting and added some 'investigative' stories, mostly about consumer rip-offs and medical malpractice cases, especially those involving plastic surgery. Binky had a cameraman, a producer, and a researcher -- a lot more resources than Ashley did. Ashley didn't think Binky would steal all the credit if she shared her suspicions and story idea -- because Binky would die if people found out someone else wrote her school papers. \n\nSo Binky was on the Kincaid case -- setting off her researcher to prepare a backgrounder on Jay, and dig up dirt on Millie; having her cameraman scout locations they frequented and follow them when he could, and having her producer come up with ideas to spectacularly reveal and enflame the inevitable scandal on the air. \n\n+++++++++++++++++++ \n\nElizabeth remained silent and just leaned back on the couch and spread her legs, with a very pointed look at Summer. Summer gulped. I sat back to watch. Summer got off the couch and got down on her knees in front of Elizabeth, with an expression on her face like she was not sure what was about to happen. I pretty much knew. Summer started slowly, tentatively and then rapidly accelerated her ministrations. \n\nElizabeth smirked at me, then her eyes rolled up a bit as Summer found one of her sweet spots and bore in like a dog on a hunt, or pawg on a cunt, or whatever. Elizabeth's expression changed almost to one of alarm, then relaxation, then amazement. Summer had natural talent, I knew, and now someone besides me, and with very different anatomical features, was experiencing it. \n\nBoth girls breathing became faster and louder. Elizabeth almost looked like she was in pain, but then made a little yipping cry, closed her eyes, and threw her head back. She grunted and then sobbed a little. Summer made a noise somewhat like a villain laughing evilly in an old melodrama, but it was muffled and distorted by the fact that her mouth was buried in Elizabeth's bush. \n\nSummer pushed her chin in even farther, and Elizabeth spread her legs even wider and pushed her hips forward toward the front of the couch. Looks like they both wanted more. The dance changed to Elizabeth thrusting her hips forward and Summer pushing her chin and then tongue toward Elizabeth. The both had the rhythm. One didn't need a Suzie receiver to discern the excitement in the room, the smells were quite enough. Elizabeth cried out a third time. \n\nElizabeth seemed to relax for a moment just to catch her breath. But Summer was in the zone, and she was trying for some extra credit, to please her teacher. Summer grabbed Elizabeth's left leg and moved it up and over and across, turning her around so that she was facing the couch, and then Summer proceeded to devour Elizabeth's amazing ass. I had to bite a knuckle to keep from laughing. As requested, Summer was certainly doing it enthusiastically and without hesitation, in fact, she hadn't even been told to. From the noises Elizabeth was making, I felt certain she was not going to tell her to stop. When Summer added two fingers into Elizabeth's sopping snatch, the noises they were making were like someone speaking in tongues. I was hoping they'd move on the snake handling next. My snake, please. \n\n+++++++++++++++++++ \n\nBinky got back the reports on Jay and Millie. Binky totally hated Millie. Not only was her historic Texas family even more famous and more liberal than Binky's California clan, but they had more money, and by marrying Jay, Millie would have ten times as much money as Binky. But what really frosted Binky was the fact that Millie was much better looking. \n\nBinky was going to find a way to bring that bitch down! If Jay Kincaid's budding political career was ruined, so much the better. Binky was a journalist! She had a right to the truth and a duty to her readers to publish it. She knew what the truth was. Jay and Millie Kincaid were evil, probably child molesters or worse. She was going to get the goods on them! She would dig in and follow them and do whatever it took to get the evidence. \n\nShe reorganized her schedule around surveilling them. She followed all their social media accounts. She called a hacker she knew who could get into their devices and track their movements, and perhaps see what dating apps they had been on in school. Maybe they had a video doorbell or home monitor she could get into. That would be sweet. She also was going to call a 'sex worker' that she had interviewed a few weeks ago and ask her about those clothespins and the blood on the sheets that Ashley Armstrong mentioned. She could smell the Pulitzer prize already. \n\n+++++++++++++++++++ \n\nElizabeth finally asked for a break, and Summer relented, sitting on the floor and gasping for air, but looking longingly at Elizabeth's backside. I understood completely. Elizabeth tottered into the kitchen again and returned with three more cans of cold Spindrift, and another big wooden bowl filled with black grapes. Perfect. \n\nThey both sat silently on the couch for a while, then exchanged glances and giggled like schoolgirls. \n\n\"I'm really glad you invited us over, Elizabeth. I'm having a really good time. Your home and your pussy are lovely.\" More giggles. \n\n\"You are welcome to both, dear!\" \n\nWe polished off the grapes, the girls finished the popcorn I had not, and we all drained our waters. Elizabeth stood, arms akimbo, and motioned me towards her. \n\n\"Robbie, would you please sit here on the couch. I've just had an idea.\" \n\nI sat, stretching my legs out in front of me. My erection had only subsided a fraction, and Elizabeth's gentile fingertip touch soon restored it fully. She matter-of-factly moved over me and sat on it, sinking it all the way into her wet and ready pussy in a single smooth move. Her weight was fully on my thighs. She put her legs just inside mine, and then spread them, like she was using Saskia's outer thigh machine back at Belmont Hall at ESU. Legs fully spread, she put two fingers of one hand between her legs and used them to spread her vulva, exposing her inner lips and clitoris to Summer's gaze. She then made the kind of exaggerated kissing sound that my grandmother often used to call the dogs to supper. \n\nSummer did look a bit like an eager puppy as she dove off the couch and put her lips just where Elizabeth's fingers had created a space. Elizabeth began to move too, and I did my best to summon my inner John Henry and be a pile drivin' man. Summer's attentions were sloppily enthusiastic, covering both of us with wet kisses. Elizabeth began to narrate my thrusts and Summer's efforts, modulated by quick exhalations and grunts. \n\n\"Ohhhhh, yes! Unhhhhh, yeah! Ewwwww, fuck!\" Then she made a noise that sounded a little bit like someone yodeling, and I felt her clamp down on me like a pair of pliers. Wonderful, warm, strong, pink pliers. I managed not to come, and Elizabeth stopped moving. \n\nThen she began a rocking motion again, releasing me for the downstroke and gripping me briefly at the bottom of her motion. It felt like her pussy had fingers and fine motor control. \n\nSummer just watched for a second, and then Elizabeth spoke, snapping her out of it. \"Suck on his balls, slut, and make him come. I want to feel it shoot!\" \n\nDamn. Summer muttered \"dirty, dirty\" under her breath and began to tongue my balls. Wow. Then she turned her head the other way, ducked under a little, and ran her tongue along a line between my scrotum and my rectum. Can't take that for long. \n\nNow I was the one making funny noises, modulated on a per squirt basis: Ohh! Uhh! Ohh! Uhh! Oh. Uh. ahhhhhhhhhh. \n\nElizabeth giggled again and squeezed the rest out of me. Then she leaned over, and made eye contact with Summer, then cleared her throat. Summer looked up, dazed and confused. Elizabeth pushed herself up enough to release my dick, and then kneeled slightly again, moving closer to Summer. \n\nShe giggled again. \"Attention Sainsbury shoppers! I need a very wet clean up on aisle one! Taste the Difference!\" \n\nSummer's eyes glazed over and she froze. Elizabeth reached out and put a hand on the back on her head and pulled her toward her very personal aisle one. Summer took a deep breath, and muttered, \"Dirty, deeply, darkly, desperately, dirty!\" and dove in. \n\nSummer made slurping and sucking noises, and Elizabeth just cooed and then said \"That's it. That's what I wanted. Get it all nasty girl.\" \n\nI believe she did. I believe she was. I believe they both were. England's finest! \n\nWhen I could finally stand, Mallory had to go out again. \n\n+++++++++++++++++++ \n\nBinky's sex worker contact told her about several things to do with clothespins that she had never heard of before. But it made her a little hot in a kinky sort of way. If she could get video of the Kincaids doing that stuff it would be golden. She visited a couple of the websites that her contact told her about, just for research of course. They had a strange effect on her. Maybe she would pick up some clothespins on the way home. Where does one get clothespins, anyway? Not Neiman's! Ross? Target? \n\nHer team was frustrated because following the Kincaids was almost impossible. They spent a lot of time at the Warner Ranch, at the end of a private road and behind a closed gate, where nobody else could get in. Come September, they would go back to Austin so Jay could attend classes at ESU. Austin. Maybe that was the ticket? Tap into the sorority gossip mill and find out about what the Kincaids were really like. First stop: the Kappa house on University Boulevard. ",
        "+++++++++++++++++++ \n\nThe next 12 hours or so were a blur. A very sexual blur, and wonderful, but it all kind of blended together in a mishmash of positions, motions, and sensations. Asa Weltschmerz would have ascribed it to neurotransmitter exhaustion, but I just thought of it as comfortably numb. I slept fitfully, the three of us together on the huge bed in the master bedroom of Elizabeth's VRB, sometimes unable to differentiate a dream state from a waking state. All were very pleasant. \n\nBut I jolted full awake when I realized something through the fog. I had not heard a single Suzie signal from the either girl since we had been together here! WTF? Was the water here like Kryptonite for my Suzie receiver? I thought back frantically. When was the last time I heard the signals? \n\nI recall hearing the absence of the signals from both Lara and Nora when I told them I knew Nora was pregnant. Their signals had frozen as if they were in shock. I thought it was them reacting to the news. But what if it wasn't? What it wasn't them, but me? Oh Shit. \n\nI racked my brain. I remembered the strong and unusual Suzie signals from both of them when they cried on my tux at Jay's wedding. I couldn't think of another instance. Wait, I saw Summer's Suzie signal images of Drummond McFadden. Why did I see only that since I had been back in England? Reflexively, I slipped on my pants and grabbed my phone. I think better when I am walking. \n\nElizabeth and Summer both stirred. \"Where are you going?\" \n\nMallory jumped up from the foot of the bed with her leash, providing an excuse. \n\n\"I'm taking Mallory out again.\" I needed to think. I really needed to think."
    ],
    "authorname": "conanthe",
    "tags": [
        "bdsm",
        "english",
        "fraternity",
        "oral",
        "sorority",
        "threesome",
        "mind control"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/my-only-talent-ch-41a"
}
{
    "title": "Living with Omega Theta Pi Ch. 02",
    "pages": [
        "This story was inspired by the Japanese movie Tsubaki. It's also a sequel to \"Living with Omega Theta Pi.\" You really, really should read the first story as the current one picks up right where the last one ended. You will have an inadequate understanding of central aspects of the plot if the prior story is not read first (e.g., Albert living within a sorority house of purity girls; the background to the characters of Shelley, Albert, and Miss Wormer). The current story includes a number of themes, such as reluctance (spanking), exhibitionism, voyeurism, and mature. However, it most comfortably fits within the theme of First Time. All of the characters in this story are at least eighteen years old.\n\n- - - - - - - - - - - - - - - - - - -\n\nShelley and Albert were peacefully lying together in Albert's small twin bed, enjoying the blissful state of mind that so nicely follows fulfilling orgasms, although enjoying even more perhaps the presence of each other's company, the shared intimacy of snuggling together within a comfy, cozy bed. Albert wondered if this was in fact love, although maybe such a feeling is rather common right after sex. It wasn't like he really knew Shelley that well, but he was definitely feeling awfully close to her, as well as very, very fond of her.\n\nShelley finally broke the silence to say, \"Wouldn't it be nice to just stay here all night long? Together?\"\n\nIt would indeed, although most definitely not a realistic possibility. In fact, they both suddenly heard the steps of Miss Wormer, coming down the hall.\n\nThey at first just froze, processing the sound in their minds, trying to convince themselves that it wasn't her, that it was something or someone else. But, it really couldn't be anyone or anything other than Miss Wormer at this time of the night. Plus, the tell-tale sounds of her heels on the hard wood floor were unmistakable, and she was getting closer and closer to Albert's door!\n\nAlbert grabbed his PJ bottoms and frantically pulled them on.\n\nAt the same time Shelley quickly slipped under the covers and pushed Albert to turn onto his right side, his back to her, facing the door, thereby providing some cover for her, hiding behind him beneath the blankets.\n\nAs he shifted Albert noticed Shelley's PJ bottoms still lying on the covers. He reached for them and handed them back to her just as the door to his room sprung open, a large swath of light sweeping into the room, very shortly followed by the sorority Housemother.\n\n\"Miss Wormer!\" Albert exclaimed, rubbing his eyes, trying to pretend that she had suddenly awoken him. He didn't act terribly surprised by her presence though as this was not the first time she had executed a nighttime surprise inspection.\n\nShe stood in the light of the hall, her arms crossed beneath her prominent, full breasts, her eyes studying the young man, trying to read the expression on his face. Her piercing gaze narrowed. She felt she could detect a sense of guilt within his eyes.\n\n\"Albert, have you been abusing yourself?\"\n\n\"What? No!\" He was surprised by the question. Normally she just took a quick look at him and left. The purpose of these visits was primarily prevention rather than detection. She was just letting him know that she was keeping an eye on him in case he had any thoughts of violating the house rule, specifically the rule against self-abuse.\n\nShe found his denial to be unconvincing, perhaps expressed too strongly. \"If I were to pull back the covers I wouldn't find you with an erection, would I?\"\n\nAlbert's heart skipped a beat, a look of panic sweeping across his face. She wouldn't find an erection but she would most definitely finding something far worse.\n\nShelley cowered behind him, pressing her body up tightly against his, trying to make herself as small as possible and remain perfectly still.\n\nAlbert though moved quickly. \"Oh no, Miss Wormer, here, I'll show you.\" He pulled back the covers enough to reveal just the front of his body, piling the blankets behind him. It was actually useful in further hiding Shelley, as she was now beneath a good pile of cover. He unbuttoned the front of his PJ bottoms and pulled out his limp penis. It was a little moist still but hopefully she would not detect that. He held it out for her. \"See, it's okay.\" It was rather weird to be showing the Housemother his penis like this, but the alternative of her throwing back the bed covers was far, far worse.\n\nMiss Wormer was rather surprised by the boy so quickly and willingly presenting his penis to her. She hadn't been expecting that and it kind of took her off guard. Plus, she could feel her disappointment. A part of her had wanted him to be erect, to see his stiffness, and not simply in order to catch him in the act (see \"Living with Omega Theta Pi\"). \"Yes, well, alright then, you can put it back.\"\n\n\"Okay, Miss Wormer.\" He slipped his penis back into his pajamas and pulled the covers over him, although not as far or as much as before.\n\nMiss Wormer, however, did not immediately leave. There was something that just seemed wrong here. She even felt she detected the scent of sex within the room. \"You know that all of this is for your own good, young man.\"\n\n\"Oh yes, Miss Wormer, I certainly do.\"\n\n\"It's a very slippery slope once you start abusing yourself. You do understand that, don't you, Albert?\"\n\n\"Oh I do, Miss Wormer. I really do.\"\n\n\"You may not realize it, but I do recognize that it's more difficult for a young man to control himself, his urges, than it is for a girl.\"\n\n\"Oh, yes, of course, certainly.\"\n\n\"Did you masturbate frequently before you came here?\"\n\n\"What?\"\n\nShe knew he had heard her correctly, but she recognized that the question was a bit awkward, even for her to ask. She asked him again, \"Did you masturbate frequently before you moved in here?\" She wished that she had asked Albert that question when she had interviewed him for the room. She would be sure to do that for all the young men next semester, assuming of course that the application to rent rooms to male students was approved by the Panhellenic Council.\n\nThe question was indeed very awkward for Albert, particularly with Shelley listening in. \"Oh, no, no, Miss Wormer, definitely not.\" He felt he really shouldn't, couldn't, be honest about it.\n\n\"Now Albert, you can be honest with me. Many young men do masturbate, and some quite frequently.\"\n\nAlbert wondered if men who wore purity rings really didn't masturbate. \"Oh, I know, Miss Wormer.\"\n\n\"Well, how often did you masturbate before you came here? I'm just wondering, of course, if the change was difficult for you.\"\n\nShelley struggled not to giggle. What had started out being a reason for panic was now a reason to laugh. She knew that Albert must be getting awfully embarrassed at having her be able to hear this conversation.\n\n\"Oh, I'm not sure, Miss Wormer. I wasn't really keeping track, you know.\" There was simply no way he was going to provide a specific number,\n\n\"Now Albert, I'm sure if you gave it some thought you could easily come up with an answer. I mean, if it was quite frequent I might be able to discuss with you an arrangement, you know. I can understand that it could be difficult to quit cold turkey,,,and everything.\"\n\nShelley snuggled her face (and breasts) into Albert's back. It was really so difficult not to laugh.\n\n\"Oh, it's no problem at all, Miss Wormer,\" Albert asserted. He could feel his face reddening.\n\n\"Yes, well, if you had been doing it every day, well gracious. I understand that suddenly stopping could well, you know, result in some discomfort, you know...\" This was becoming a bit more difficult for her as well. She added, more softly, \"within your testicles.\"\n\n\"Oh yes, yes, I understand, yes.\"\n\n\"Are you experiencing any discomfort within your testicles?\"\n\nAlbert's cheeks felt so warm. \"Oh no, no, Miss Wormer. They're fine, really.\" He certainly hoped that she wouldn't ask to inspect them. She wouldn't want to do that, would she?\n\nMiss Wormer wondered if perhaps she should, or could, inspect the young man's testicles, for any signs of tenderness. \"Yes, well, of course if you had been masturbating every day then that itself would be a problem. That would be much too frequent, you know...to be normal.\" She had no idea what would in fact be normal, but she had to assume doing it every day would be abnormal, wouldn't it? \n\n\"Oh, I wasn't doing it that often, Miss Wormer. I would remember if I was doing it that often.\"\n\n\"Yes, well, I just mean, that, well, if you are finding it difficult, and I can understand that could be the case for a young man, not used to the expectations, the moral standards, of an Omega Theta Pi resident, well, we could make an arrangement.\"\n\nAlbert was understandably puzzled. \"An arrangement?\"\n\n\"Yes, well...\" Miss Wormer was not sure herself what she meant by that, or intended. She hadn't thought it through herself, and was in fact developing the idea as she spoke. \"Yes, yes, well, perhaps we could agree that at certain times, on a certain day, or days, well, probably just one day, at a certain time, um, you could take care of, um, your business.\"\n\nShelley couldn't restrain herself any longer. She very, very carefully, slipped her left hand over Albert's waist and down to the front of his pajamas.\n\nAlbert's eyes widened as he felt Shelley's hand make it's way around his body. She was taking a very, very big chance here. He glanced down and to his horror could see her hand moving along beneath the blanket. He quickly slid his own hand down beneath the covers to ostensibly scratch his hip, making lots of obvious movements to cover hers. \"Oh, that's, um, well, I don't think that will be necessary, Miss Wormer.\"\n\nShelley lightly, but firmly, cupped Albert's penis and testicles within her hand, gently fondling and caressing them with the tips of her fingers.\n\nAlbert considered using his hand to pull hers away, as this was really dangerous, but it would be even more dangerous to do that. He hardly wanted Miss Wormer to see his hand go there.\n\n\"Well,\" Miss Wormer continued, \"I don't want to require something of you that is unrealistic. We could, of course, hang a sign on your door that you're not to be disturbed.\"\n\nAlbert would admit that it would be nice to be allowed to freely masturbate, but he hardly wanted each occasion to be announced to the entire sorority. Imagine the crowd of girls that would gather outside the door, giggling as he jerked himself off. Of course, it would be nice if at each session a different sorority sister had to take care of him. That would be a nice arrangement. He could feel his penis swelling at that thought, and at the feel of Shelley's soft, caressing fingers, but somehow he felt that wasn't what Miss Wormer had in mind. \"Honestly, Miss Wormer, I don't think it's really necessary.\"\n\nShelley though was not making a good case for his lack of need, as his cock was quickly swelling to full strength. One might think that the presence of Miss Wormer, coupled with having recently ejaculated, would make it difficult for Albert to develop another erection so quickly, but he was a healthy young man who had in fact masturbated most every evening (a couple times even twice in one evening, although those were rather special occasions) and he was also experiencing for the first time in his life the loving, seductive touch of a girl's fingers on his cock. There was simply no way he was not going to respond.\n\nMiss Wormer realized that a sign on the door would probably draw some unnecessary attention, but it was against house rules to have any bedroom locked and she certainly didn't want one of the young ladies to inadvertently walk in on Albert while he was doing his business, as she had done herself. That could be very, very traumatizing. \"Or, you know, if you wish, you could, um...\" She hesitated in making this additional offer but then finally added,\"Come to my office.\"\n\n\"What?!\"\n\nShelley felt Albert's cock twitch at that suggestion. She would have to tease him about that later, or perhaps scold him. She wasn't too sure how she felt about it.\n\n\"Well, you know, um, you would have more privacy there. You wouldn't be disturbed. You could even lock the door.\"\n\nAlbert's cock had twitched with nervousness, not arousal, at the thought of masturbating in Miss Wormer's office. This did not sound at all appealing but one wouldn't know it if one could see, or feel, his cock, as Shelley was doing. She now had it at full strength beneath the blankets, so much enjoying the fact that she had gotten him all excited, almost literally right beneath the nose of Miss Wormer. It was indeed a very risky and dangerous thing to do, but that's also what made it all the more fun. She wondered how cool it would be if she could in fact make him cum, right in his pajamas, while talking to Miss Wormer! She began to work more vigorously on his hard dick, firmly gripping him through his pajamas and more forcefully stroking him.\n\n\"Well, that's, um, awfully nice of...you, Miss Wormer.\" Albert was finding it a bit difficult to concentrate on what she, and he, were saying.\n\nIt was though fortunate that Albert had already cum just minutes earlier as he would very well have cum pretty quickly now, given the wonderful uniqueness and inherent joy in being stroked by Shelley, her soft breasts pressing against his back, her firm nipples poking him. He also appreciated how befitting and just it would be to ejaculate right in the presence of the prim, proper, and intolerant Miss Wormer.\n\n\"Well, excellent, Albert. When would you like to come down, um, to, uh, have your...\" She again lowered her voice, \"ejaculation?\"\n\n\"What?\" He had only intended on thanking her for the offer. He wasn't really intending or wanting to accept the offer.\n\n\"Will Thursdays be good for you? What classes do you have on Thursday? I think it would be good to schedule it during the day, when there are fewer girls around. Would you prefer morning or afternoon?\"\n\nEven the fact that he was now so intensely aroused, feeling himself again building toward an ejaculation, didn't make the idea sound, or feel, any better. How weird would it be to go to Miss Wormer's office for the purpose of masturbating! But, what could he do now? \"Um, afternoon?\"\n\nMiss Wormer smiled. \"Would 3:00 PM be good for you?\"\n\n\"Uh, uh.\" He was having so much difficulty keeping a straight face. He now wanted to agree just to end this conversation, realizing that he really shouldn't cum in his pajamas, although it would feel so, so good. But the problem would be the mess. The sheets would get wet, leaving rather compelling evidence for Miss Wormer the next day. \"Yeah, sure, that's fine.\"\n\nMiss Wormer, however, noticed what appeared to be some kind of rapid movement beneath the blankets, in a very significant location. \"Albert! Are you playing with yourself right now!? While I'm speaking with you?!\"\n\nShelley's hand instantly froze in mid-stroke, a look of panic swept over her face, her heart raced.\n\n\"What? No, no, Miss Wormer! Of course not.\"\n\nMiss Wormer was pretty sure what she had seen, and she noticed as well the flustered and confused look on the young man's face. Just the thought of coming to her office to masturbate had apparently excited him that much? This was one randy young man.\n\nBut, she decided not to make an issue of it. It would be taken care of Thursday. Something private in her office would be better than another public disciplinary session. On the other hand, Thursday was a distance away. She stepped closer to the bed and said, in her most sympathetic tone, \"Son, perhaps you would like to take care of it right now?\"\n\n\"Oh gosh! Um, really, no, no, Miss Wormer! Honestly, I was, um...\" He couldn't offer to let her see his limp penis, as it was very far from being limp, although beginning to shrink now. \"I just had this, um, itch. I'm, um, having this sort of problem, you know, um...from sports.\"\n\n\"Oh,\" Miss Wormer replied. \"Yes, I see.\" That was perhaps credible, but she was pretty good at reading guilty faces and she didn't really believe him. But, for whatever reason, he apparently didn't want to take care of his business right now and perhaps that's understandable. \"Yes, well, um, put some medicated powder on it and, um, well, use a hair dryer to make sure it's real dry after your shower. Okay?\"\n\n\"Oh yes, thank you Miss Wormer. That's very good advice. I'll do that.\"\n\nShe thought it funny how he apparently wasn't embarrassed talking about jock itch, yet had so much difficulty discussing his masturbation habits. \"Well, um, I'll uh let you get your sleep. I know you have to get up early tomorrow.\" He had access to the shower room only between 5 and 5:30AM. \"You be sure to control yourself until Thursday. Do we have an understanding, young man?\"\n\n\"Yes, Miss Wormer. I understand.\"\n\n\"Well, alright then.\" She turned and left the room, closing the door, turning the room back into darkness.\n\nShelley could finally giggle out loud. She teasingly asked, \"Do you think Miss Wormer will masturbate you on Thursday?\"\n\n\"Shut up!\" Albert responded. That was a bizarre thought.\n\nShe let go of his cock, which was still at half-strength. \"Actually, I don't know how I should feel about this, another woman masturbating you.\"\n\nAlbert rolled over to face Shelley. \"Believe me,\" he said, looking into her eyes, \"She is not going to do that. Don't be ridiculous.\"\n\n\"Well, it sounds kind of weird.\"\n\n\"No fooling.\"\n\n\"Then why did you agree to it?\"\n\n\"What was I going to say? And, it's not like you were giving me much help.\"\n\nShelley smiled. Well, that was true. She tossed the blankets off her and Albert to get her PJ bottoms on. \"Well, I better get back to my room. This is probably a good time to sneak back.\" As she crawled off the bed she reached back to give his dick a little final squeeze and added, \"She might come back to see if you need any help.\"\n\n\"Shut up!\"\n\nShelley was feeling a little funny about Albert going to Miss Wormer's office to masturbate. If Miss Wormer had been a girl her own age she'd feel real, real upset about it. Imagine a boy scheduling a masturbation date right in front of you! Miss Wormer though was an older woman, and so it shouldn't really count, although she was a pretty darned attractive woman, and one with much bigger breasts than her. Still, she knew she shouldn't feel jealous and perhaps he didn't have a whole lot of choice in the matter. Plus, most importantly of all, it wasn't really a masturbation date as Miss Wormer wasn't actually going to be there. He was just going to use her office. She stepped back up to Albert lying on the bed, his stiff dick sticking out his PJ bottoms. She leaned over and gave his swollen knob a kiss right on the tip.\n\n\"Maybe I should come to the office to help you.\"\n\nAlbert smiled. That would be very, very nice, having a girl who was always available on a certain day and time to get you off. But, he knew that would be even more dangerous than sneaking into his room. Still, it would be helpful if she at least finished what she had started. He reached down and, surprising himself with his boldness, said, \"What about me right now?\"\n\nShelley smiled back at him as she made her way to his door. \"Maybe you should give Miss Wormer a call,\" and slipped out the door.\n\n- - - - - - - - - - - - - - - - -\n\nAlbert had wondered if Shelley was mad about something. Did he say something wrong? She was smiling when she left, but he was disappointed that she left him there with an erection, one that she had created. It wasn't easy figuring girls out. He eventually decided that he was probably just worrying about nothing.\n\nShelley wasn't actually mad at Albert, and she let him know that at dinner the next day.\n\nShe sat right next to him at the table, for which Albert was grateful and pleased. She asked, \"You're not mad at me, are you, Albert?\"",
        "\"Me?! Why would I be mad at you?\"\n\nShe lowered her voice, \"You know, for leaving you like that. It wasn't very considerate of me.\"\n\nAlbert blushed, and glanced around, making sure that nobody was noticing their conversation. The dining room table was quite long, and at least half of it was empty due to the diminished sorority enrollment. They could not, however, sit alone together as Miss Wormer encouraged collegiality and conversation during dinner. Shelley was sitting to Albert's left, Stacie Adams to his right. They were though much closer to the empty chairs to their left than to Miss Wormer, who always sat at the head of the table, to Albert's far right.\n\nAlbert reassured Shelley. Shaking his head he said, \"It's alright, really. We really shouldn't have taken any more chances. Goodness, I wouldn't have been surprised if she did in fact come back with a bunch more questions.\"\n\nShelley giggled at the memory of Miss Wormer questioning Albert about his masturbation schedule. It had been pretty funny. She reached under the table to rest her hand on his thigh, looking him in the eye with her most sweet, affectionate expression. \n\nHe smiled at her. It was nice having her touching him like that. He felt an impulse to kiss her but knew that was most definitely forbidden. \"I really did enjoy your visit,\" he whispered.\n\nShelley smiled and whispered back, \"Did you take care of yourself after I left?\"\n\nAlbert's face reddened a bit. He shook his head. \"I was fine, and she really might have come back.\"\n\n\"You poor boy. You must be very uncomfortable.\" She shifted her hand over to his crotch. She couldn't feel much there right now but perhaps she would in awhile. \"Would you like me to take care of it?\"\n\n\"Shelley!\" Albert loudly whispered, again glancing around, especially at Stacie to his right. Nobody could see Shelley's hand as it was effectively hidden by the white table cloth that hung far down over the edge of the table. Albert though did inch his chair in closer to the table, leaving little to no space between his upper body and the table's edge. He turned to Shelley, a clear look of concern and anxiety on his face, whispering quite emphatically, \"Shelley, what are you doing?\"\n\nShelley looked into his eyes, hers conveying a mischievous playfulness. \"I'm just trying to make up for last night, Albert,\" she said, her fingers dancing around the front of his pants, trying to get a rise out of him, in more ways than one.\n\nAlbert reached down with his left hand and took hold of hers. He tried to push it away but she resisted. He was fully capable of physically overcoming her but it would be difficult to keep the struggle from becoming noticeable. So he just clamped his hand on hers, trying to minimize the use of her fingers, but he was also then effectively pressing her hand tighter into his crotch. \n\nHe looked up toward the head of the table. Fortunately Miss Wormer appeared to be engaged within an intense conversation with Kari Ann, who was sitting to her right. Stacie to his immediate right was the greatest risk but she appeared to be focused on her bowl of soup, perhaps intentionally keeping her eyes averted from Albert. He wasn't too surprised at that, as some of the girls had felt awkward around him ever since his disciplinary session with Miss Wormer.\n\nHe turned his attention back to Shelley, although continuing to spoon his own soup, not actually looking at her as he spoke. \"Shelley, please,\" he whispered.\n\nShelley leaned into him and whispered back, \"I just want to play with him a bit, that's all. Don't be mean.\"\n\nAlbert let go of her hand. Nobody would likely suspect that she had her hand in his lap, and it did look right now that they were possibly holding hands. Persons could be suspicious of that, as most persons had both hands on the table (albeit no elbows; that was forbidden).\n\nFortunately Shelley was left-handed and so it was natural that she would use that one to eat with and it was not inconsistent with good etiquette to have the other hand resting in her lap when not in use. So, it didn't look so bad for her right hand to be out of sight. She quietly giggled as she enjoyed her tasty split pea soup as she wriggled and squirmed her fingers around in Albert's lap, and then smiling with delight as she felt the tell-tale signs of his natural reaction. It was just so cool to make a boy's penis grow like that and this was such a naughty place and time to do it. It was again right under the nose of Miss Wormer, and all of the other sorority sisters as well.\n\nAlbert was initially quite nervous about this, clearly more so than Shelley, but once he felt himself becoming aroused he became more enthusiastic. Budding erections do tend to have that kind of an effect on guys. Her fingers exploring around in his lap felt so, so nice. The more erect he became the more enthusiastic.\n\nHe even got into the spirit of the fun of having a girl surreptitiously play with his erect cock beneath a dinner table, unbeknownst to the large gathering of pretty, chattering, purity girls. He smiled at the girl sitting across from him as his cock swelled further within his pants.\n\n\"Ooooooh,\" Shelley quietly whispered, seemingly to nobody in particular, \"he's getting real, real big.\"\n\nAlbert smiled. Shelley was turning out to be quite the little minx, and rather impressively so given her purity ring.\n\nShe even took hold of Albert's zipper and pulled it down. It didn't go down easily as she wasn't real experienced at getting boys' zippers down, plus she had to use her right hand underneath the table. It was an awkward maneuver.\n\nAlbert at first lurched as she pulled on the zipper. He considered helping her. That would have been the gentlemanly thing to do. But, he didn't want to draw any undue attention to what was going on down there. He figured it was best to just keep his hands on the table. He even started up a chat with the girl across the table, Kathy Emerson. It was all just small talk, but it was useful in conveying the impression that nothing untoward was going on as Shelley worked his zipper down.\n\nOnce it was down she slipped her hand into his slacks. Fortunately, his erection was pointing a bit to the right, which made it easier for her to get to it. His erections were usually to the right side of his pants as his penis typically started off in that direction, naturally resting that way. Albert once wondered which direction most penises rested, to the right or to the left, and whether it had anything to do with being right or left handed. In any case, Shelley soon had his stiff dick clasped within her fingers. It was still through his boxers but it seemed like an exponential improvement with the slacks out of the way.\n\nA girl's fingers on one's hard cock is really so nice, and quite the special treat during dinner. Shelley softly clenched the shaft with her fingers as her thumb circled around and around the knob. It did somehow make Albert's courteous conversation with the girl in front of him so much more delightful, amusing, and even rather exciting. They were talking about the Livingston Renaissance Faire (see \"The Renaissance Faire\"). Albert was explaining that he would have liked to have gone but he was working all that day (he worked at Livingston Mall Gold Star Chili). \"You really won the blue ribbon?\"\n\n\"Oh yes, for my bourbelier of wild pig.\" Kathy smiled proudly, as well she should.\n\n\"Wow, that's really impressive,\" Albert said, although having no idea what bourbelier meant.\n\n\"Yes,\" Shelley added, joining the conversation as her thumb continued to caress and massage Albert's swollen knob through his thin boxers, \"it was really very, very impressive she won as it was so terribly, terribly big.\" She gave Albert's dick a hefty squeeze.\n\nKathy gave her a funny look. It was a big pig, but size wasn't what made it good.\n\nShelley added, \"I so much like a big thick juicy sausage. They just taste so, so good in my mouth.\"\n\nA trace of a grin perched on Albert's lips.\n\nKathy was finding Shelley's remarks to be rather odd. \"Well Albert,\" she said, keeping her attention on him, \"Shelley, of course, participated in the fair as well.\" Kathy smiled mischievously.\n\nAlbert turned to Shelley. \"You did? What did you do? I wish I had gone.\" He was indeed quite curious given her passing allusion to it the other night.\n\nShelley scowled at Kathy. Kathy can sometimes be so arrogant and competitive. She should be proud of winning the blue ribbon. Nobody can cook a wild pig like Kathy, but it wasn't nice to draw Albert's attention to her own less than successful competition. \"I didn't do much,\" she replied.\n\n\"Now, don't be so modest, Shelley.\" She informed Albert, \"She was in the beauty contest.\"\n\n\"Really?!\" Albert was indeed impressed, very impressed. His cock swelled within her fingers. His stiff dick was being fondled by a beauty contestant? Now, that was pretty cool.\n\n\"Yeah,\" Shelley softly added, \"but I didn't win.\" It was best for her to say it before Kathy made a big deal out of it.\n\n\"You didn't win! Really? Gosh, but you have such pretty eyes.\" It just came out. He didn't usually say such a thing to a girl, but it just came out without first thinking about it. Perhaps it was because of her hand on his dick that made him so disinhibited. But, of course, it was also so very true.\n\nShelley could feel blood rushing to her face. \"Well, Albert, that's so sweet of you.\" She smiled at him appreciatively, slipping her hand now into his boxers, giving his cock an affectionate squeeze and tug, and then giving Kathy a triumphant smile. She turned back to Albert. \"Do you really think they're pretty?\" She looked longingly into his eyes with her large round brown eyes, the lashes fluttering a bit as she slid her fingers up and down his shaft.\n\n\"Well, yeah, sure, sure I do,\" he replied, a bit breathlessly, unclear if his sudden difficulty with his breathing was due to her fingers or her eyes. Probably a bit of both.\n\nShelley grinned, her dimples appearing. She lightly traced the tips of her fingers around and around and all over his knob.\n\nKathy could see that something was going on between them, or at least for Shelley. It looked to her that she was being a bit flirtatious with Albert, smiling at him like that, asking about her eyes. Kathy wasn't so sure she much liked it. \"Yeah, well, she was also in \"Dunk-a-Wench,\" her mischievous grin returning.\n\n\"Kathy!\" Shelley complained.\n\n\"You were?\" Simply, holding hands with Shelley would have been real nice during dinner. This kind of holding was definitely much, much better. \"Wow, you were really involved in lots of stuff. I really do wish I was there.\"\n\nKathy giggled. \"Well, that one didn't turn out too good either. She got dunked.\"\n\n\"Oh,\" Albert smiled, not yet realizing how much worse it was than just that.\n\n\"Yes,\" Kathy continued, \"and her boobies just popped right out.\"\n\n\"Kathy, shut up.\"\n\n\"Well, they did!\"\n\n\"I know, but you didn't have to tell Albert that.\"\n\nAlbert's first impulse was to say that he most definitely now really wished he had been there, as he would have liked to have seen that. He would have meant it as a compliment. But, he had enough judgment and self-control, despite his dick being stroked, to inhibit that remark. He said instead, \"Wow, that must've been pretty embarrassing,\" trying to keep his eyes from drifting down to Shelley's breasts, imagining them popping out.\n\nShelley though could see some potential in this. \"Well, it wasn't so bad,\" she lied. \"And, they didn't really pop out,\" she explained. \"It was more like they slipped out,\" she added, as she slipped his cock out from his pants through his fly.\n\nAlbert in panic quickly glanced around, particularly at Stacie, who caught his eye, a shy grin on her face. Her expression spoke of something but it didn't seem to be a recognition that his stiff dick was sticking out of his pants. It was still effectively hidden beneath the hanging table cloth, but this little game was clearly taking a dangerous turn. He would probably get into a bit of trouble if he got caught with an exposed erection during a sorority dinner.\n\nStacie shyly looked away, turning her attention back to her soup.\n\n\"What's wrong with you, Albert,\" Kathy asked. \"You look like you just saw a ghost.\"\n\n\"Oh,\" Shelley explained, \"I just think our talk is kind of embarrassing him.\" Shelley reassured him, \"You don't have to be embarrassed,\" sliding her fist up and down his shaft beneath the table, being careful to keep her shoulder still so that Kathy, nor anybody else, would notice what she was doing.\n\nAlbert looked back at Kathy and Shelley, a look of concern on his face, as well as excitement. It was quite the mix of emotions.\n\n\"My dress in fact came all the way off, till I was wearing only my panties.\" She let go of the shaft to play with just the knob, softly squeezing and caressing it.\n\nAlbert was getting so, so excited. \"Um, well, uh, was the water real cold?\" He didn't know what to say. He was imagining Shelley floundering around in just her panties, while she softly tickled the knob of his cock.\n\n\"Oh yes, it was. My nipples got real, real stiff. They were just sticking up so hard.\"\n\n\"Shelley!\" It was Kathy's turn to protest. This was going beyond just a little girlish flirtation.\n\n\"Well, they did!\"\n\nKathy turned her attention to the girl to her left. It was clear that her effort at embarrassing Shelley had backfired and she didn't really want to remain a part of what was becoming a rather inappropriate conversation.\n\nStacie though had been listening. When the topic of the Renaissance Faire came up her ears had perked up. She turned to Albert. \"I was in the fair too, Albert.\"\n\nHe turned to Stacie, finding it a bit awkward to be speaking to her with his cock sticking out of his pants. \"You were?\"\n\n\"Oh yes. I was in the kissing booth.\"\n\nAlbert's dick twitched again, a tell he hoped Shelley had not noticed, and then he recognized Stacie. She was one of the girls in the front row during his disciplinary session. For the most part he had kept his eyes averted from the girls sitting out among the rows of seats, not wanting the embarrassment of any eye contact as Miss Wormer discussed the benefits of careful hygiene when cleaning a penis. However, at the end, when he was squirting all over the girls, he did indeed enjoy the view, and he now recognized Stacie. His face turned red.\n\n\"Oh yes,\" Shelley added. \"Stacie made lots and lots of money for the sorority,\" saying it loud enough for Kathy to hear. Kathy had made pretty good money, but Stacie and Pamela did even better; far better.\n\n\"It wasn't that much money,\" Stacie modestly replied.\n\n\"Oh yes it was. Goodness, I couldn't imagine making that much money just giving out kisses.\"\n\nIt was Stacie's turn for her face to redden.\n\n\"You know, Stacie,\" Albert said quietly to her. \"I do want to apologize, for the other night, you know, when, um...Miss Wormer.\" He didn't finish the sentence. He hoped that wasn't necessary.\n\nStacie looked down, feeling a bit self-conscious talking about it. \"Oh that's alright. I didn't mind.\" She brought her hand over to him, beneath the table, resting it on his knee.\n\nAlbert could feel his heart rate accelerating. Her hand was now just inches from his exposed cock.\n\nIt was a bit forward for Stacie to do something like that, to actually touch the boy, but ever since she worked the kissing booth she had grown to feel a bit more comfortable making physical contact. She said to him, as quietly as possible. \"I actually kind of liked it.\" She looked in his eyes to gauge his reaction.\n\nShelley was smiling but wondering if perhaps she should feel a bit jealous. Was Stacie flirting with Albert?\n\nAlbert didn't know what to say. What do you say at a moment like this? One girl is telling you that she liked it when you inadvertently squirted your cum on her face, while another is playing with your stiff dick beneath the table. Shelley was in fact gripping it rather tightly at the moment, and it wasn't like she was trying to get him further excited. It was more like she was just holding on real tight to him, letting him know she was the one who had him. \"Um, yeah, well, uh, that's good,\" he awkwardly replied.\n\nStacie could see that Albert felt rather self-conscious about it too, and it made her feel more relaxed, less defensive. \"It was a little embarrassing, though.\"\n\n\"Well, it sure was for me,\" Albert reassured her.\n\n\"Yeah, you got some of it right on the tip of my nose. It kind of tickled.\"\n\nShelley was feeling even more concerned. She knew she shouldn't, as Stacie had a boyfriend, Jack. But, maybe there was something about that relationship she didn't know. Maybe they were breaking up, or maybe Stacie was looking elsewhere, and Shelley most definitely didn't like where she was looking.\n\nStacie added, \"I licked it off.\"\n\nAlbert so wished that Shelley would resume her stroking..\n\nShelley was wondering if perhaps she should let Stacie in on the fact that she and Albert had done some things too and were in fact in a very close and intimate relationship, even as they spoke. That would make it clear that Albert was not to be approached. It was very clear within the Omega Theta Pi guidebook that you did not interfere with any sorority sister's relationships with a boy. You couldn't even date an ex-boyfriend for at least two months after the break-up. There are some things that are truly sacrosanct.\n\nStacie leaned in closer to Albert, her shoulder touching his arm. She whispered to both of them as she squeezed his knee, \"Can you guys keep a secret?\" She was about to reveal one, demonstrating that apparently she couldn't keep a secret.\n\n\"Sure,\" Shelley whispered back, sliding her chair closer to Albert's, not entirely certain she wanted to hear the secret but most definitely certain she didn't want to be left out.\n\nStacie slid her chair over closer to Albert as well, effectively pinning the boy in between them.\n\nStacie hesitated. It was a pretty big secret, but she knew that Shelley could keep a secret (as if that was true for any of the sorority girls) and, more importantly though, she just wanted Albert to hear it. Stacie whispered, as quietly as she could but hopefully loud enough so that Shelley could hear. \"I did more than just kiss a boy in the booth.\"\n\nShelley's eyes widened with excited curiosity. \"You did?\"\n\nStacie nodded.\n\nShelley wanted further details. \"What did you do?\"\n\nStacie looked over at Shelley. \"You won't tell anyone, Shelley?\"\n\n\"Oh no, I promise.\"\n\n\"Especially Jack.\"\n\nShelley nodded, feeling a bit reassured by that admonition.\n\nAlbert was feeling understandably nervous and confused by these two girls leaning in tightly against him on either side, one with her hand on his knee, the other holding his stiff cock poking out of his pants.\n\nStacie hesitated again. It was a pretty big secret, but a secret is really no fun unless you tell someone. She leaned in closer to Shelley. \"Jeffrey Jones took his thing out when he was in the booth.\"\n\n\"No!\" Shelley replied, resuming her stroking of Albert.\n\n\"Oh yes, yes he did.\"\n\n\"Oh my goodness! Were you scared? What did you do?\" She stroked a bit faster.\n\nAlbert didn't know what to feel. His heart raced for so many reasons.\n\nStacie giggled. \"I played with it.\"\n\nShelley's mouth opened wide in shock. Perhaps she shouldn't really be so startled as her right hand was still gripping Albert's cock, but it was still surprising to hear such a thing from Stacie.\n\nShe glanced down at Miss Wormer who didn't seem to be noticing their intense conversation. She leaned forward again to ask, \"Did you make Jeffrey ejaculate?\"\n\n\"Yeah, yeah I did. He in fact squirted it all over the front of my dress.\"\n\n\"Oh my goodness. You must have been so upset!\"\n\nIt was such a surreal conversation to be listening to, and Albert really couldn't figure what contribution he could make to the discussion, at least verbally.",
        "\"Well, it was kind of my fault,\" Stacie admitted.\n\n\"What did it look like? I mean, you know, his, um, his penis. Was it bigger than Albert's?\"\n\nAlbert turned to Shelley, a look of concern on his face. Didn't she realize that he was sitting right there! He wasn't so sure he wanted to hear the answer, not wanting to burst any bubbles for Shelley, nor feel the embarrassment of being the smaller guy. \n\nAlbert's though was an obvious point of comparison as both girls had clearly seen his. And, besides, Shelley was confident in the answer. She figured that Albert just had to be bigger, and she liked the idea of letting Stacie know that her guy's penis was bigger than Stacie's. Of course, it wasn't really clear that Albert was her guy.\n\n\"Well, I don't know,\" Stacie said. She glanced at Albert and blushed. \"I didn't get a real close look at Albert's.\"\n\n\"Hey, come on, girls,\" Albert protested. Up until this point he was very much enjoying the conversation, but it was now taking a rather uncomfortable turn.\n\n\"We have a secret too, Stacie,\" Shelley whispered.\n\n\"You do?\" One is always very curious about a secret and this one sounded like it could be pretty good, given that it apparently was comparable to her own.\n\n\"Shelley,\" Albert whispered, not being too sure they should tell Stacie about this.\n\nBut, it was clear to Shelley that Stacie wasn't going to get offended or upset, after what she had just told them. Plus, she knew that Stacie could keep a secret (again, the contradiction in such a belief was rather telling). And, most importantly, she wanted Stacie to know that Albert was already taken. She whispered, very, very softly, \"Give me your hand.\"\n\nAlbert could feel his heart racing.\n\nStacie looked confused but slid her hand toward Shelley, beneath the table, thinking that Shelley was going to hand her something, which she sort of did.\n\nStacie's eyes opened wide as soon as she made contact with Albert's naked stiff dick, as well as Shelley's fingers.\n\nShelley did not let go to make room for Stacie. She wanted to make sure that Stacie knew full well who possessed this cock.\n\nStacie whispered, a bit loudly, \"What are you guys doing?!\"\n\n\"Shhhh,\" Shelley warned her. She then let go, having made her point and said, \"Here, you can touch it,\" thereby making it clear that it was her decision whether Stacie could in fact touch it.\n\nStacie glanced back at Miss Wormer, who did appear to be looking down at them, but she also seemed to be more interested in her soup. Stacie wrapped her fingers around Albert's stiff shaft, suppressing a smile. She looked back at Shelley. \"Are you guys going out?\"\n\n\"Well, yeah, sort of,\" Shelley replied.\n\n\"You better not let Miss Wormer find out.\" Dating the male resident of the house was very strictly forbidden, for quite obvious reasons.\n\nIt was the first time Albert had heard that they were going out, \"sort of.\" He was though glad to hear it. He had been thinking of asking Shelley out, but he knew the rule against it. Miss Wormer had made that very, very clear during the application. Plus, what if Shelley said no? That would be rather embarrassing, to say the least. He would be seeing her virtually every day since then, always being reminded of his rejection. Plus, a girl wants to play with your penis but doesn't want to go on a date? That would seem to be the ultimate rejection. He looked over at Shelley and smiled.\n\nAs Stacie softly stroked him Shelley reached back over and fondled his plum with her fingers and thumb, smiling in return at Albert as she did so.\n\n\"Albert?\" she whispered.\n\nHe turned to her, his breathing become so accelerated, his mind clouding. \"Yes?\"\n\n\"Can I see it again? I want to show it to Stacie.\" It was only natural that a girl wants to show off her guy to a sister within the sorority, but this was clearly going much, much too far.\n\n\"Oh yes,\" Stacie whispered, \"let me see what it looks like.\"\n\n\"Is there some sort of secret you two girls would like to share with the rest of the table?\" Miss Wormer said loudly for everyone to hear, looking quite suspiciously down at them from the head of the table.\n\nStacie immediately let go of Albert's cock. Both of them quickly shifted their hands to the table, although that gesture alone was rather suspicious. \"Oh no, Miss Wormer,\" Shelley said. \"We were just talking.\"\n\nMiss Wormer wondered if they had been passing notes beneath the table. \"Yes, I see, and what about? Perhaps we would all like to be in on the conversation. You two seemed to be so very intently absorbed in your little private discussion.\"\n\n\"Oh, um, well, you know, we were just talking about the Renaissance Faire,\" Shelley attempted to explain, \"You know, how I didn't do so well and how much money Stacie managed to raise for the sorority.\"\n\nKathy smiled, wondering if perhaps she should share with Miss Wormer the specific nipple details that Shelley had shared with Albert. But, an unspoken rule in the sorority is that the sisters don't squeal on one another, particularly about matters concerning boys, unless, of course, one girl is seeing a sister's boyfriend behind her back. That was a very, very serious violation that most definitely had to be exposed and addressed.\n\nIt was in any case a good ruse for Shelley to offer Miss Wormer, as Stacie had earned quite a few points with the Housemother as a result of the fair. Miss Wormer was willing to overlook a few indiscretions on the part of Stacie, at least for awhile. \"Yes, well, Albert, why don't you help Penny and Wanda bring in the main course.\"\n\n\"I'll get it!\" Shelley instantly volunteered and before Miss Wormer could object she stood up and made her way to the kitchen, hoping against hope that the Housemother would not tell her to sit back down, insisting that Albert get the food.\n\nShe didn't. It was fine with her that one of the two girls left the table. It would at least stop their whispering.\n\nMiss Wormer pushed away her empty soup bowl and turned her attention back to Kari Ann.\n\nAs soon as her head turned Stacie's hand returned to Albert's cock. She looked over at him and smiled.\n\n\"I guess I shouldn't be playing with this, if you and Shelley are going out. But, I do think I should keep it hard for her. You wouldn't want it to be all soft and limp when she returns, would you?\"\n\nAlbert's eyes were on Miss Wormer, keeping an eye out for her. \"Uh, yeah, um...\"\n\nMiss Wormer glanced over at them and he turned his attention to his soup. Miss Wormer didn't like it when you didn't finish a course, and he had not been paying much attention to his soup at all.\n\nIt was a bit odd though to be eating soup while your stiff dick was being stroked beneath the dining room table.\n\n\"Mmmmmmm,\" Stacie said, returning some of her attention to her soup as well, still fondling Albert's cock though with her hand. \"This soup is good, don't you think, Albert?\"\n\n\"Yeah sure, sure.\"\n\nKeeping her face over her bowl and her soft fingers fondling his cock Stacie tilted her face toward Albert and added, \"I kind of liked your's better.\"\n\nHe glanced at her. \"What?\"\n\n\"I do so like how a boy's stuff tastes.\"\n\nAlbert's face reddened. His heart accelerated. \"Um, well...\" What do you say to a girl in response to that? \"Thanks,\" was all he could muster, but quickly realized how odd that was, as she hadn't actually tasted his. He was apparently thanking her on behalf of all men? He could have said that he likes how a girl's tastes as well, but that seemed awfully forward, and perhaps revealing something that should be kept private between himself and Shelley.\n\nAs Stacie took another spoonful, her thumb caressing his knob, she asked with a little grin on her face, \"Has Shelley tasted your stuff yet?\"\n\nShould you answer such a question? Wouldn't that be a violation of trust? But, it was difficult to refuse a girl who was playing with his erection, and she wasn't being as subtle or reserved as Shelley. It felt like she was trying to get him to cum before Shelley got back, as she was now stroking him rather hard, demonstrating pretty good dexterity with her two hands: one spooning soup, the other stroking cock, like when you try to pat your head with one hand while circling the other around and around your stomach. \"Stacie,\" he whispered, \"wait a second,\" and he reached down with his hand to grab hers, in case she didn't get the message.\n\nFortunately Shelley was not gone for long. She had in fact asked Penny, her best friend, to hand her whatever tray was ready because she wanted to get back in there as soon as possible. She didn't like leaving Albert alone in there too long with Stacie, particularly with her hand likely back on his erection.\n\nStacie removed her hand from Albert's lap as Shelley re-entered the dining room, carrying a serving tray of the entree: crockpot chicken with an Italian cream sauce. She took it up to Miss Wormer who had to first approve it, and then laid it down to be passed around the table. Penny followed with an additional tray of the tasty chicken dish. She stopped off to serve the dish to those sitting farthest away from the head of the table, which included Albert, Stacie, among others. Wanda followed behind with a tray with mashed potatoes and pees, and then returned back to get more.\n\nShelley returned quickly to her seat beside Albert, sliding it right up against him. \"Did you miss me?\" she whispered.\n\nHe turned to her and said, \"Yes, yes I did.\"\n\n\"That's so sweet,\" she replied and immediately slipped her hand beneath the tablecloth to find his penis. \"Oooooooh,\" she softly cooed, \"you stayed stiff and hard for me all that time?\" She was impressed and pleased, taking it as a very clear sign of his evident attraction. He was clearly thinking about her a lot while she was gone.\n\nAlbert didn't tell her about Stacie pitching in. It was information that she really didn't need. He just smiled at her.\n\n\"I bet he was feeling very impatient for his girl to return,\" and then her face flushed as she realized that she had said, 'his girl,' presumptively implying that she was his girl when they hadn't even talked about any such thing. They hadn't even gone out on a date.\n\n\"Hey, Shelley,\" he whispered. \"I was kind of wondering if, well, you know, um, if you would, you know, like to...go out...some time.\"\n\nShelley smiled, those cute little dimples again appearing. She squeezed his cock with her fist as she tickled and caressed the underside of his knob with her thumb, where he was particularly very sensitive. \"On a date?\"\n\n\"Uh, well...yeah, yeah, um....if that's alright.\"\n\n\"Albert, you know that's against the rules,\" but she was so very, very flattered, and relieved, that he did ask.\n\n\"Yeah, but it's not like we're not kind of bending the rules already.\"\n\nThat was a pretty good point. Shelley stroked his cock a bit more assertively, sliding her fist up and down the shaft. She was feeling pretty good about it, about Albert, and going out with him. \"What if we got caught?\"\n\nIt seemed a bit odd to be worried about that while she was jerking him off beneath the table, but there was probably a greater risk of being seen on a date.\n\n\"Shelley, please,\" Albert gasped, feeling himself getting very close.\n\n\"I'd love to go on a date with you, Albert,\" Shelley whispered to him, as she urgently stroked his dick.\n\n\"Good, good,\" he gasped, trying to concentrate on the chicken heading his way.\n\n\"But, you won't try to take advantage of me, will you?\"\n\nHe turned to her. \"Oh no, no, of course not.\" He thought she was being serious, concerned that he might try to make her go all the way or something. Jerking him off like this could be giving him the wrong idea of how far she would be willing to go. \"I wouldn't do anything like that,\" he promised.\n\n\"I mean, you're not going to try to make me give you a handjob or anything like that, will you,\" she quietly teased, showing him her big dimpled smile.\n\nStacie passed the entree to Albert.\n\n\"Oh Shelley, wait, wait...\"\n\nStacie could hear, and see, what was happening and to help avoid an accident she quickly reached beneath the table, snatched Albert's napkin and draped it over the head of his cock, just as a big glob of cum spurted forth, quickly soaking it through.\n\n\"Is the chicken to your liking Albert?\" Miss Wormer had again noticed a rather intense dialogue between Shelley, Albert, and Stacie.\n\n\"Oh yes, yes, Miss Wormer,\" Albert gasped with considerable enthusiasm. In fact, much more than she really would have expected. \"Very, very nice,\" he gasped as his orgasm washed over his body, his dick squirting and spitting cum into his cloth napkin, albeit some of it dripping back down onto Shelley's fingers.\n\n\"I really like the cream, Miss Wormer,\" Shelley added, working hard to suppress a giggle as she felt Albert's dick twitch and gush within her hand. \"It's so thick and tasty.\"\n\nStacie wrapped the napkin around the head of Albert's cock, making sure that he didn't make a mess anywhere else. \"I think I spilled some of it on my napkin, though, Miss Wormer,\" she noted.\n\nMiss Wormer found all their remarks a bit odd. These kids were clearly up to something but she couldn't put her finger on it. \"Well, be more careful, dear.\"\n\n\"Oh yes, Miss Wormer. I made sure that none of it got on my skirt or Albert's pants or anything.\"\n\n\"Yes, well, that's, um, good, dear.\"\n\nAlbert would have had a hard time suppressing a laugh if not for the fact that he was so overwhelmed by much stronger, more compelling sensations, his body and mind wracked by the throes of his climax, and grateful that the two girls had distracted Miss Wormer away from him. He had never tried to have a conversation with someone while climaxing at the same time. He probably could have done it but it was so much better to just give into it, to simply bask and bathe within its bliss. He bent forward, as if he was intently studying his cream chicken, feeling himself blasting and gushing into his napkin while Shelley continued her milking.\n\nWhen he was done Shelley carefully squeezed out any remaining drops while Stacie held the napkin in place. Shelley then took the napkin from her.\n\nStacie didn't fight Shelley over possession of the cum soaked napkin. She could perhaps lay claim to it as she was purportedly the one with the napkin with spilled cream, but she did appreciate that it should probably go to the girlfriend of the boy who squirted all over it.\n\nShelley handed her own clean napkin to Albert, who finished his cleaning as he carefully slipped his slackening penis back into his boxers and zipped up his slacks.\n\nShelley brought the cum soaked napkin to the table and smiled as she pondered it. She could smell the fresh fruity aroma of Albert's cum drifting up to her nostrils. She brought it up even closer, ostensibly to politely dab her lips, but instead enjoying the deep scent and even the taste of his cream within the napkin.\n\n\"Shelley,\" Albert whispered, feeling that she was again taking too big of a risk.\n\nStacie noticed it as well but just giggled, feeling a little jealous. She so missed the kissing booth.\n\nShelley then laid the napkin on the table and clumsily knocked over her glass of milk, soaking the napkin through.\n\nIt was a good move as it effectively negated anyone becoming suspicious of the strange milky fluid on her napkin. It did though earn Shelley a couple of demerits from Miss Wormer for her clumsy, ill-mannered behavior at the dinner table.\n\nShelley didn't object as she did certainly deserve them.\n\n- - - - - - - - - - - - - - -\n\nShelley and Albert had a very wonderful date, although it was an unusual first date. They couldn't really go to a restaurant, movie theater, sporting event, or club, or most anywhere else that would be a typical place for a date as any one of those could be frequented by someone who knew them. So, Albert took Shelley rock hunting. Albert's forte was geology (see \"Living with Omega Theta Pi\") and he knew a real good place to hunt for all kinds of rocks. Most importantly, there was little chance they would run into anyone who knew Shelley.\n\nShelley had been more than apprehensive about such an excursion. Maybe all the girls were right about Albert, that he really was a nerd. But, it turned out to be rather fun, getting out there in nature, and she brought home all sorts of pretty rocks, like red stained quartz, pink quartzite, black shiny coal, pure white marble, bubble holed red and black scoria, yellow tiger's eye, red jasper, rose quartz, and pink and green unakite. They provided really nice decoration for the pot of lavender viola on her bedroom window sill, as well as serving to help keep the soil from drying.\n\nPenny, her roommate, teased her about having rocks in her head over her new boyfriend. Shelley giggled over that, and admitted that she did kind of like Albert. Shelley obtained a most serious pledge from Penny to keep the date secret.\n\nOn Thursday Albert had his \"date\" with Miss Wormer. He dutifully arrived at 3:00 PM, just as he had promised. The door to Miss Wormer's office was open but he still knocked and waited for permission to enter. \"Miss Wormer, I'm, uh, here, for my...appointment?\"\n\n\"Oh yes! Very good, Albert. I have been expecting you.\" She got up from her desk and waved him in. \"Excellent. Please, come on in.\" She suggested, \"Why don't you sit right there on the couch,\" as she stepped passed him to close the door. \"Or would you prefer to stand?\" She realized that she shouldn't assume she knew his preferred position.\n\n\"What?\"\n\nShe locked the door and turned back to face him. He was standing in the middle of her office, a look of anxious confusion on his face. She stood by the door, waiting patiently. Nobody said anything for awhile.\n\n\"Yes, well, Albert, why don't you get on with it now. I have other appointments, you know.\"\n\n\"You're going to be here?\" Shelley had again suggested that she come to the office to help Albert, finding the idea of jerking him off in Miss Wormer's office to be rather intriguing. He had fortunately talked her out of it, as he had suspected that Miss Wormer would be waiting right outside while he did \"his business.\" He had no idea that she would be staying inside her office!\n\n\"Well, of course, son, naturally. I need to be sure that you do actually perform the act, not that I don't trust you and, well, gracious, it is my office. I don't want you to, well, you know...mess things up.\" She clapped her hands impatiently. \"Come come now!\" She hesitated as she realized her unintended pun. \"Yes, well, let's not dilly dally. Did you bring with you any of your girlie magazines?\"\n\n\"What?! No! No.\" He asserted as strongly as he could, \"I, uh, don't have anything like that.\"\n\nMiss Wormer just smiled. No boy is without dirty magazines, although it was true that she had searched his room a number of times and couldn't find any. \"Yes, well, um, do you have a handkerchief or a rag in which to, well...ejaculate?\"\n\nAlbert could feel his face redden. He shook his head. His eyes wide with anxiety.\n\nMiss Wormer sighed deeply. What is it with young men? \"Were you just planning on squirting your, your, your...ejaculation right onto my nice rug?\" His impudence was quite astonishing.\n\n\"Um, well, no ma'am, no, of course not.\" The fact was that he had brought with him one of his socks. It was in his pocket. But, he really didn't want to admit to her that he used his socks.\n\n\"Yes, well, um, I suppose when the time comes you can use some of my tissues. Alright then.\" She waved her hand. \"Proceed.\"\n\nAlbert could feel the blood flowing to his face rather than his penis. He couldn't believe this was really happening. He reached down to undo his belt and pants button, and then pulled down the zipper. This just felt so weird, so wrong.\n\nMiss Wormer was feeling a little nervous herself, or was it excitement. Her heart rate had most definitely accelerated, along with her breathing. Her mouth felt dry. She strode over to her desk, walking past Albert, trying to maintain a nonchalant and dispassionate demeanor. She poured herself a glass of water, watching Albert out of the corner of her eye, suppressing an intense urge to smile.",
        "Albert pulled his pants down to his ankles. He was about to step out of them when Miss Wormer stopped him.\n\n\"No, no, um, just leave them there.\"\n\n\"What?\"\n\n\"Just leave them at your ankles. That way, um.\" She took a sip of water, giving her some time to come up with a good reason. \"If somebody arrives that I have to speak with, you know, like a Dean, you can quickly get them back up. Yes...that would be preferable.\" The likelihood of anyone like a Dean coming to a sorority Housemother's office was pretty darned low and, besides, Miss Wormer had no intention of answering the door if anyone knocked. She just felt that Albert looked cuter with his pants at his ankles. Her heart seemed to flutter as she gazed at his tight briefs. She could see a little bulge where his penis and testicles were tucked in.\n\n\"Yes, ma'am,\" Albert softly replied and slipped his thumbs into the waistband of his briefs. He was glad that he had worn a fresh, new pair of briefs. His mother had often told him to always have a new pair of briefs available, in case he had to go see a doctor or something. He otherwise wore his underwear long after they became torn and frayed. He apparently had known somewhere in his mind that a fresh pair of briefs was the appropriate dress for today. He pulled them down to his ankles, so wishing that Miss Wormer wasn't standing there like that, staring at him. Once they were all the way to the floor he took a deep breath and stood back up straight, his limp penis coming into view, resting comfortably against his testicles, like a sleeping baby.\n\nMiss Wormer smiled. She just couldn't help herself. Albert looked so adorable standing there, his underwear and pants at his ankles, his little boyish penis looking so timid and nervous. She pondered the fun of having a number of boys staying at the sorority, each of them having to come to her office at various times during the week to do their business. It would, of course, be for the purpose of protecting the sisters from their unnatural and wanton urges, but she couldn't help but feel a little warmth within her thighs just thinking about it. Yes, having young men rent rooms here could be a very, very good idea.\n\n\"Albert, wait a second,\" she suggested. \"If you don't mind, I probably should perform an inspection.\"\n\n\"What?!\"\n\nMiss Wormer strode up to Albert and crouched down in front of him, her round womanly bottom stretching out the back of her business skirt. \"As I said the other night, if this has been a serious change in your masturbation routine your testicles might be experiencing some discomfort.\" She gently cupped them on the tips of her fingers while she tenderly explored their soft pliancy with her thumb.\n\nAlbert squirmed a bit. A doctor once does this during an examination. Well, he didn't handle them so softly, so solicitously. But, in any case, it had been awkward then. It was much worse now, to say the least. He concentrated on not getting an erection, which wasn't really that hard as he felt so darned nervous.\n\n\"Any pain, any discomfort, Albert, when I do this?\" She gently gave him a little squeeze.\n\n\"Um, no, no, ma'am. It's fine...um really.\"\n\nShe continued to explore, manipulate, and fondle the young man's testicles. It would be important not to miss anything. She even picked up his limp penis with her thumb and index finger so she could pull it aside to get a closer look. She leaned in real, real close.\n\nAlbert could feel her soft breaths on the tip of his penis. He kept his eyes averted as he might in fact swell up in her fingers, seeing the pretty bespectacled eyes of Miss Wormer so close to his dick. Of course, he was going to need to have an erection pretty soon. Perhaps he could just let it happen now?\n\nMiss Wormer smiled, and with considerable regret she released the young man's penis and testicles. \"Yes, well, they appear to be fine.\" She stood back up and stepped back to give him room for his masturbation. \"You can go ahead now.\"\n\nAlbert reached for his penis and began to work on it, stroking it with just his thumb and couple of fingers, trying to get it to grow. He looked away from Miss Wormer, trying to get out of his mind the fact that she was standing there impatiently, watching him, studying him. It was just so odd, so weird, to be ordered to masturbate in front of the stern and imposing Housemother.\n\nHowever, she was an attractive woman. Heck, he had looked away when she was inspecting his penis out of fear of getting an erection. Why look away now? He turned his face back and looked right at her. She really was rather attractive. She had quite shapely legs, a wonderful figure, prominent breasts, luscious red lips, red rosy cheeks, and alluring green eyes beneath those large spectacles. Perhaps if he imagined her without her clothes? His eyes fixed on the Housemother's breasts.\n\nMiss Wormer readily perceived where the young man's eyes were staring. Don't boys realize that where they were looking was so very obvious? She found it rather disconcerting, if not insulting, for the boy to be staring at her bosom. Well, maybe it wasn't really insulting. \"Albert, are you having some difficulty?\"\n\nHe raised his eyes to look into hers. \"Um, well, no...a little. It's just, you know, kind of an unusual situation. I'm not used to doing it, you know, like this.\"\n\n\"Well, you didn't seem to be having any problems the other night.\"\n\n\"What?\"\n\n\"In your bedroom. You were playing with yourself while I was speaking with you. Don't think that I didn't notice. I most definitely saw your hand moving beneath the blankets.\"\n\nIt was, of course, Stacie's hand but he most definitely could not admit to that. His face reddened. \"Um, I know, but, um, well, that was in bed.\"\n\n\"Well, perhaps you should have brought some of your magazines.\"\n\nAlbert wanted to remind her that he didn't have any. He did when he was living in the dorm, but he didn't dare try to hide any within his Omega room. He relied solely now on his computer, which at times was a problem because the free sites were so riddled with viruses.\"Yes, ma'am,\" he softly replied.\n\nMiss Wormer considered the situation, pondering what to do. She knew what she was contemplating was rather bold. She didn't know if she dared. Still, she also knew she really, really wanted to. \"Well,\" Miss Wormer finally said, quite sternly and impatiently, tapping her foot on the floor. \"We really can't have you just wasting our time.\" She glanced over at the door, reassuring herself that it was indeed locked, and then proceeded to undo the buttons of her suit jacket.\n\nAlbert's eyes widened with shock. What was she doing! He dare not ask. He just stared with wonder.\n\nMiss Wormer maintained her authoritative, dispassionate expression as she undid the buttons and then removed her jacket. She was wearing beneath her jacket a very nice white silk frilly blouse that hugged well the curves of her full, thrusting breasts.\n\nBut, she didn't even stop there. She began to undo its buttons as well, her eyes remaining fixed on Albert's.\n\nA little trace of a smile could be seen on the corners of her mouth as she saw in Albert's eyes the effect of her undressing. This was kind of fun, stimulating the young man. Actually, it was more than kind of fun. She asked him, \"Is this the first time you've seen a lady undo her blouse, Albert?\"\n\n\"What?\" With considerable reluctance he tore his eyes away from the front of Miss Wormer's blouse. He had to think fast. What was the correct answer here? It was unlikely to be the honest answer. \"Um, yeah.\" In fact, that was the honest answer. He just wasn't sure at the time. The only naked breasts he had seen so far were those of Shelley's, and only briefly when she had come out of the shower. And, technically that didn't count, as she was a girl his age, not a \"lady\" as Miss Wormer had asked. Plus, equally important, at least technically, Shelley had not been undoing her blouse. Well, actually, there was also Theresa when he was peeking into her bedroom. That probably didn't count either. In any case, when he had applied for the room he had told Miss Wormer, correctly, that he was a virgin . He was not about to change her impression of him now.\n\nMiss Wormer smiled. This was actually very nice, undressing for a boy who would be witnessing his very first breasts. It really wasn't such a bad thing to do, as he was an innocent young man. She was just helping him with his growth, his maturation, as well as with his self-control. Once all the buttons were undone she hesitated for a moment, enjoying his breathless anticipation, his excited eyes, and then she opened up her blouse to reveal her full, lusciously round breasts, so very nicely encased within a push-up, deep cleavage, bright red lace brassiere, jutting out from beneath her cultured pearl solitaire necklace.\n\nAlbert responded instantly, like Pavlov's dog, his penis swelling without him even touching it. Miss Wormer was indeed a very, very attractive woman. He most definitely could see and appreciate that now. Her breasts were just so strikingly gorgeous, like big wondrous red lacy hillocks that a boy would so love to climb.\n\n\"Well,\" Miss Wormer observed, \"I do believe I have been helpful.\"\n\n\"Yes, ma'am,\" Albert comfortably agreed. He didn't even return his hand to his penis. He just let it grow and expand on its own, so happy and excited it was to be witnessing such treasures.\n\nIt was also quite a sight for Miss Wormer. It was like his penis had a life of its own, growing, swelling, and stiffening right before her eyes, like a balloon inflating with air, but a very hard, stiff, and now rigid balloon, pointing right at her with its big shiny red tip. She bit her lower lip as she contemplated it.\n\n\"Yes, well,\" she said, her voice a bit breathless and uncertain. \"We must be sure that it doesn't lose any of its strength.\" She slowly leaned forward, the cleavage of her brassiere opening up for Albert's transfixed eyes, hers now fixed on the young man's stiff dick. She reached for the hem of her business skirt, and slowly pulled it up.\n\nAlbert's stiff cock twitched. He licked his lips as his eyes followed the path of Miss Wormer's hands or, more accurately, the path of her rising skirt.\n\nMiss Wormer had some difficulty with her skirt, as it was rather tight. She had to wiggle and squirm a bit when she got to her thighs. But, she had dressed well for the occasion, wearing thigh high red nylons. When she reached the top of her nylons she paused, not out of any ambivalence or uncertainty, but just to let the young man admire for a moment her shapely legs. It had been quite awhile since any man, young or old, had done so, and she did feel that she had very nice long legs that were usually well hidden beneath her long business skirts.\n\nShe continued further, past the bottom of her matching red garter belt straps, and then to her bright red lace bikini panties.\n\nAlbert now wanted to grasp his cock so, so badly. Miss Wormer was fucking hot! He had never imagined her wearing such sexy undies. She always just seemed so sexless and cold. Well, one can never judge a book by its cover, and what was beneath Miss Wormer's stern, authoritative demeanor and business suits was a very sexy woman indeed. His eyes now fixed on the soft rise of her cunnie mound between her thighs.\n\nMiss Wormer was enjoying immensely Albert's mesmerized fascination, but she was also now feeling a little self-conscious about it, as he was staring so hungrily, like a lustful animal poised to attack. \"Alright then, Albert,\" she said, her voice a little shaky, \"perhaps you should resume your, um...masturbation.\"\n\n\"Oh yes, ma'am, absolutely.\" He didn't look down at his dick. He just kept his eyes fixed on her so very enticing panties as he reached for his cock and resumed his stroking, now with a more natural ease and pleasure. He no longer felt the least bit self-conscious. This will be a very good standing appointment indeed.\n\nMiss Wormer felt a little awkward to be just standing there, holding up her skirt, her blouse open, as if she was just a picture in one of his girlie magazines. That thought though was itself actually kind of titillating. Imagine posing for such a magazine! She wouldn't mind, at least doing it just once, if it was for the good of the sorority, and anonymous. It would in fact be an innocently naughty little dalliance. She turned around and bent over, resting her hands and elbows on her desk, thrusting her bottom out toward Albert. She looked back at him to ask, \"Is this how they pose in your magazine?\"\n\nAlbert just nodded, realizing though that he was now effectively admitting to having such a magazine. Well, it hadn't been that long since he tossed his collection to move into the sorority. He continued to stroke his cock, but taking his time in doing so. He really wanted this to last as long as possible, and Miss Wormer was not going to make that easy.\n\nMiss Wormer wiggled her bottom back and forth. \"Of course, in your magazine they can't move like this, can they Albert.\"\n\n\"No ma'am.\" He thought it best not to point out that they did that and much more in his collection of internet porn. Fortunately, she did not know the password to his computer.\n\nMiss Wormer's heart was racing. She knew she was in rather dangerous territory, but it was also so very exciting, so very arousing. She reached back with her hands to take hold of the waistband of her panties and, while looking back at Albert stroking that so very stiff and hard cock, she asked, \"Have you ever seen a naked woman's bottom before, Albert?\"\n\nIt was again a tricky question. He had most definitely seen Shelley's, and much more than just her bottom. \"Well, I did see Shelley's.\"\n\nMiss Wormer's fingers paused and her eyes widened with concern. \"Excuse me?\"\n\n\"When she was being disciplined...by you.\"\n\nMiss Wormer smiled. Well, of course, Albert had seen her bottom then. She pulled her panties down just a bit, just far enough so he could see the beginning of her crack. \"Did that excite you, Albert?\"\n\nNow that was most definitely a very, very tricky question. How could a young man really deny that, and what would it imply now? \"Um, well...\" His voice grew quieter. \"A little, I guess.\"\n\nMiss Wormer again wiggled her bottom for the boy. \"Now, don't feel ashamed about that, Albert. It's perfectly natural to find the soft round curves of a lady's derriere to be attractive.\" She pulled her panties all the way off her womanly behind. \"Do you find mine to be attractive?\" She parked her panties at her thighs,\n\n\"Oh yes, ma'am,\" he replied, feeling his balls churning, his cock yearning, as his eyes feasted upon the sight of Miss Wormer's naked ass coming into view.\n\nAnd, Miss Wormer really did have a very, very gorgeous ass: so white, and now looking so big and round, thrusting back at him. She spread her legs a bit, not only to keep her panties up but to also let him see a bit more.\n\n\"Oh my gosh, Miss Wormer,\" Albert exclaimed as his eyes witnessed her lusciously full feminine lips peeking out from between her thighs. He even detected a bit of glistening moisture. She was wet? She was aroused? Miss Wormer wanted him to fuck her? That couldn't possibly be true!\n\nMiss Wormer considered what to do. She knew what she so very much wanted to do, and it would probably go far in helping to restrain Albert's impulses with the girls in the house. But, she also knew what she so very much shouldn't do. She said softly, \"Albert, would you like to have intercourse with Miss Wormer, with...me?\" If Albert was having sex with her, then he really wouldn't want to have sex with any of the sisters. Yes, this would be the best thing to do.\n\n'Absolutely!' Albert thought. But, as soon as he opened his mouth to speak, he knew he shouldn't. A few days ago he most certainly would have, but not now. It really wouldn't be right, for Shelley. \"Oh, I don't think I should, Miss Wormer.\"\n\nMiss Wormer arched her back, trying to entice him further, showing him her womanly cunt like a mare in heat. \"Albert, it's alright, this will help you control yourself with the girls. You have my full permission to do so.\" She added, with a twinkle in her eyes and a wiggle in her hips, \"I won't give you any demerits at all for it.\"\n\nAlbert smiled back, but what to say? He couldn't tell her about Shelley. He could make up a girl, outside of the house, but she probably wouldn't believe him, plus a very tangled web of deceit was likely to be woven if he went down that path. \"I just don't think it's right, Miss Wormer, to do it before I'm married. I want to save myself for marriage.\"\n\nMiss Wormer smiled. She was quite surprised, to say the least, but also very pleased. One might suppose that a woman would be pretty darned disappointed, and perhaps even insulted, to be turned down when offering herself like this, panties at her thighs. But, she was in fact quite proud of Albert. She looked back at him. \"Albert, I'm so impressed. You are really embracing the values, even the vows, of Omega Theta Pi.\" She felt now terribly reassured about his behavior with the sisters, despite his moment of indiscretion.\n\nShe considered telling him that she had only just been testing him, and that he had passed with flying colors. That would offset any embarrassment at being so rejected. But, he probably wouldn't believe her and, besides, maybe he would change his mind later. \"Well, at least come over here and given Miss Wormer a hug.\"\n\n\"Well, yeah, sure,\" he replied and made his way over to her, which was rather awkward to do with his briefs and slacks tangled around his ankles. He almost tripped a couple of times.\n\nMiss Wormer watched with amusement as he clumsily approached her, his stiff penis bobbing and wagging as he struggled across the floor.\n\nShe didn't get up to hug him. When he arrived she was still bent over the desk, her naked bottom thrusting back. \"Come here,\" she said, reaching back for him, \"snuggle up to your Housemother and give her a nice big warm hug.\"\n\nIt seemed rather obvious what she wanted him to do, but this isn't the time you wanted a miscommunication. Did she really want him to press his cock against her butt?\n\nHis last couple of steps were quite tentative, and he braced for her reaction when the tip of his knob touched the soft curve of her ass.\n\nShe reached back and grasped hold of him by the waist and pulled him, and his cock, in tight against her, enveloping his shaft within her soft, warm butt cheeks. Her panties fell the rest of the way to her ankles.\n\n\"There you go,\" she said, like a teacher encouraging a young student, \"he deserves a very special hug for being such a good boy.\" She let go of his hips and pressed her cheeks together around his stiffness, capturing it tightly within her womanly buns, giving it a nice warm, soft embrace. \"Does that feel nice, Albert?\"\n\n\"Yes, ma'am,\" he gasped. It did feel real, real nice.\n\n\"You hold it in there, okay?\"\n\n\"Oh yeah, sure, sorry,\" Albert apologized. It was perhaps inconsiderate of him to assume that she would be holding her bottom cheeks for him. And, besides, he was quite happy to do so, smiling as he took hold of Miss Wormer's soft pliant womanly cheeks and squeezed them together around his cock. He slowly, gently, slid his dick up and down inside.\n\n\"Mmmmmm,\" Miss Wormer sighed. She whispered, \"That's nice, Albert.\"\n\nShe rested her cheek against her hands and basked in the feel of Albert's young stiff cock sliding up and down the crack of her ass. \"Lean down over me, son,\" she suggested. \"Reach around and give Miss Wormer's breasts a hug as well.\" She wanted to feel once again a young man's hands upon her breasts.\n\nHe very gladly did so, leaning down over her body and slipping his hands beneath her to grasp hold of those full soft boobs, giving them a real big squeeze.\n\nThese were in fact the first boobs that he had held, as he hadn't yet touched Shelley's, a poignant fact that dawned on him as soon as his hands grasped Miss Wormer's. It was rather nice to start off with such full womanly breasts. He did though feel a pang of guilt. Would he consider Shelley's to be as good? Bigger is better, isn't it? Well, he doubted that he would feel that way, if he did indeed get the chance to feel hers. Still, the first ones are perhaps the best ones, and these were just so large and squishy. His cock swelled against her ass. \"Miss Wormer,\" he gasped as he groped her heaving boobs with his hands and humped her bare butt with his stiff dick.",
        "\"Albert\" Miss Wormer groaned, \"your hands feel so nice.\" She squirmed her ass against his cock, like a skilled stripper providing a fifty dollar dance.\n\nAlbert wouldn't know anything about what a stripper's lap dance would be like, but if he did he would be spending lots of his hard earned Gold Star Chili salary if they were half as good as Miss Wormer. He knew he wasn't too long away from cumming.\n\nMiss Wormer took hold of the boy's left hand and squeezed it against her breasts, right over her stiffened nipple, and then took hold of his right and brought it down to her crotch, to her cunnie, and more precisely, to her clit. \"Rub this spot real, real hard, Albert. Girls like that very, very much.\"\n\n\"Thank you, Miss Wormer,\" he replied. He already knew that, but it didn't hurt to pretend like he was grateful for her education.\n\nShe did though realize one important qualification. She looked back over her shoulder and added, \"But, of course, don't you do this with any of your Omega sisters.\"\n\n\"Oh no, no, Miss Wormer, I promise.\" He would most definitely not diddle Shelley's clit while dry humping her bare ass. Well, maybe he would sometime in the future, but not over Miss Wormer's desk, at least not likely. He did as she instructed, and she quickly responded.\n\n\"Oh, Albert, yes, yes, that's so, so nice,\" she sighed, and increased the wriggling and squirming of her ass against his dick, as well as now her stiff, excited nub against his fingers.\n\n\"That's so fucking hot, Miss Wormer,\" he gasped.\n\n\"Fuck my ass, Albert,\" she moaned. \"Fuck me like a dirty, filthy fucking slut!\"\n\nHe was sorely tempted to in fact truly fuck her, perhaps even right up her ass, but he knew he shouldn't. He had to stay committed to his vow of purity, and so he settled for \"just\" rutting his hard stiff throbbing dick against the soft squishy pillows of Miss Wormer's derriere while he frenetically diddled her clit.\n\n\"Oh my goodness!\" Miss Wormer, gasped, \"oh my, oh my, oh my!\" She shoved books and papers off her desk as she tried to find something to grip, to grasp hold of, and then reached back to grab hold of Albert's buttocks, pressing him even tighter against her.\n\n\"Fuck, Miss Wormer,\" Albert groaned.\n\n\"Fuck me,\" she gasped, and then felt her body suddenly shuddering and shivering with her orgasm, overwhelming her in paroxysms of blissful tides sweeping through her body. She only very, very rarely masturbated, finding it such a distastefully shameful act, and she could not recall a more powerful, satisfying orgasm. She pressed her butt tightly against his cock.\n\n\"Oh no, Miss Wormer! Let go!\" Albert exclaimed, feeling his own impending climax about to overtake him.\n\nBut, she just held onto his ass even more tightly, not wanting his fingers to escape her clit, his dick to escape her butt, and then smiled as she felt his cock suddenly twitch within the crack of her wantonly shuddering womanly derriere and squirt out a big thick sloppy, gloppy load of cum.\n\n\"Miss Wormer, I'm sorry, I'm sorry,\" Albert kept exclaiming as he collapsed onto her back and released his cum down in between her butt cheeks. His heart pounded and his breathing came in gasps as he felt that so very wonderful primitively libidinal waves of pleasure course through his body as his dick squirted and spewed globs of cum into the Housemother's butt crack.\n\nShe felt a small river of fresh warm cum flowing down her crack, across her anus, and down even further to her cunnie. He was making quite a mess, but she just giggled through the throes of her climax, and not just because the cum was tickling her anus.\n\nShe did though eventually let go, as quite a bit of it was dripping down her thighs. But, releasing him just allowed him to pull back enough to squirt some of it onto her cheeks.\n\nAlbert appreciated the opportunity to watch his last few squirts unleash onto Miss Wormer's bottom. It's always nice being able to watch it shoot off, particularly when it's onto such a sexy sight as the Housemother's naked bare butt. He only wished he had his camera as nobody was likely to ever believe this.\n\nWhen he was done he squeezed out the remaining few drops and then reached for the box of tissues. \"Here, let me clean you off,\" he politely offered. Miss Wormer, however, had knocked the tissue box off her desk.\n\nShe was still a bit breathless, perhaps not having the endurance and strength possessed by the young man, but she nevertheless said, \"No, no, that will be fine. I'll take care of it myself. You just get your pants on and run along.\"\n\n\"Oh, yeah, sure, sure, Miss Wormer.\" He bent over, getting one last good close-up look at Miss Wormer's butthole and cunnie, both soaked with his cum, and then pulled up has briefs and slacks. He zipped, buttoned, and redid his belt as he headed for the door.\n\nJust as he reached the door he turned back to see that she was still leaning over the desk, her panties still at her ankles, her cum soaked bare butt still poking out at him. \"Um, next Thursday at three still good, Miss Wormer?\"\n\nShe waved a hand back at him without turning her head and responded, \"Yes, yes, that's fine, Albert. That will be just fine.\"\n\n\"Well, okay then, and, um, thank you, ma'am.\" He felt he should say that, if not at least give her some flowers or something.\n\n\"Yes, yes, run along now.\"\n\n\"Alright then, ma'am.\" He unlocked the door and carefully pulled it open just enough to let himself out. He then quietly shut it, hoping that she realized that it was no longer locked.\n\nHe didn't have to remind her though. As soon as he left she pushed her body off the desk and stood up straight, still feeling a little shaky and light headed but also so satisfied, so much at peace. She had wanted Albert to leave quickly in part because she didn't really want to clean herself off. She bent over and pulled her panties up, intending on enjoying the feel of the young man's cum within her undies, against her bottom, anus, and cunnie, for the rest of the day.\n\n- - - - - - - - - - - - - - - - - - - -\n\nShelley was a little upset when Albert told her that Miss Wormer had stayed with him to \"supervise\" his masturbation, particularly when he gave her all the details. She realized that he didn't have a whole lot of choice in the matter, but it was apparent that she now had some competition. She would have to do something to keep Albert's attention properly focused, including more secret dates with him.\n\nShe went to a stamp collector's exhibit with him, a place where nobody who knew Shelley would likely go. She was again surprised at how much fun she had. There were just so many different types of stamps, some of which were really quite pretty. He even bought her a mint set of the 1960's US commemorative stamps celebrating campfire girls. Shelley had been a campfire girl. He also got her the 2008 all heart love series. She thought that was real sweet. She got both of them framed for her room, much to Penny's amusement, at least with respect to the heart stamps.\n\nShelley also went to see him play chess. Much to his embarrassment, he lost. But, she was very reassuring about it. She told him that she saw his opponent getting suggestions from the coach, which gave him an unfair advantage (it wasn't true but it did help assuage the loss).\n\nShe took him to a Victoria's Secret store. That had been a little risky, but she figured there was no way that an Omega girl, or Miss Wormer, would go into a store like that. She had done it largely to just tease and embarrass Albert, which it did very, very well. The saleswomen all thought it was so cute to see the young man blush as he tried to avoid looking at any of the naughty attire, which was impossible as it was everywhere one looked.\n\nShelley even called him back to a dressing room to see if he liked what she had picked out.\n\nWhen he pulled back the curtain he was greeted by the sight of Shelley standing there, her hands demurely clasped behind her back, wearing only a light blue diaphanous baby doll, with matching light blue lace bikini panties. \"Do you think this is a nice one?\"\n\nThe answer was immediately evident by the swelling within his pants, although not to Shelley as he was wearing pretty tight briefs. What to wear was at times a difficult decision for Albert. Loose boxers and slacks were good if he had an expectation of some \"activity\" by Shelley, but tight briefs and jeans were good if he was concerned about embarrassing erections. He had known that today he was going to join her while she shopped so he opted for briefs and jeans. Sometimes just being around Shelley gave him an erection and it wouldn't be good to be struggling with that while walking through a mall. Well, at the moment, it was apparent that briefs and jeans were a very good decision. Albert quickly slipped into the booth and shut the curtain behind him. \"Oh my gosh, Shelley!\"\n\n\"So, you think it's okay?\"\n\nIt was a lot more than okay. He had not seen her in an outfit like this before. Such apparel was forbidden by Miss Wormer, and Shelley looked simply stunning. Does a girl actually look better in a sexy baby doll than she would entirely naked? Perhaps she would, as it was sort of like wearing make-up that helped you look so much prettier and sexier, and she looked every bit both. Shelley was a naturally pretty girl, but with her lovely round titties peeking out from beneath the light blue haze she just looked so, so hot. Albert had only briefly seen them before, when her towel fell down. Now he could just stand there and admire them for their wonderfulness. They were so round, so perky, so darling, and the stiff little nips poking out through the seductively sheer fabric were so fucking enticing. He wanted so much to squeeze his cock. \"Yeah, yeah, I think it's great,\" he said quietly, feeling a little speechless.\n\n\"You don't think the panties are too tight?\" She pulled on the waistband to help accentuate her point.\n\nHis eyes drifted down. There was a fucking camel toe! He could actually see the outline of her cunnie slit through the tight, clinging, thin fabric. He didn't think he had ever seen anything more sexier than this. \"Oh, Shelley, you just look really, really good in this. You have to get it, you really do.\" Why did she have to be a purity girl? He wanted to fuck her so bad right now. He glanced behind him, making sure the curtain was fully closed.\n\n\"Oh don't be silly, Albert, it's much too expensive. Look at the price tag.\" She held out the tag that was attached to the hem of the top.\n\nAlbert stepped up close to her, closer to those luscious little tits. It took all of his moral strength not to grab hold of them, clutch those soft jiggly mounds of pure delight in his hands. But, his hand reached instead for the price tag.\n\nWhoa! It was really expensive. \"I'll pay for it,\" he immediately offered.\n\n\"Albert, that's so sweet.\" She got up on her toes to give him a little affectionate peck on the cheek, her nipples briefly brushing against his chest. \"But, Miss Wormer would never let me have something like this in the house. Now you get out of here before the saleswomen get suspicious.\" She pushed him toward the drapes.\n\nAlbert almost stumbled out of the booth, his face going a deep red when he noticed what appeared to be the entire female staff all looking at him, smiling, knowing that he had been admiring his girlfriend in one of their outfits. He smiled sheepishly in response and made his way over to a display table where he could hide his erection, but then felt really awkward just standing there, looking down at an array of sexy panties.\n\nIt went on like this for sometime, with Albert's balls getting more and more filled with a yearning, churning desire for relief.\n\nShelley had not intended on actually buying anything. As she had said, the apparel was too expensive and would not meet with the approval of Miss Wormer.\n\nAlbert though insisted on buying her at least one pair of panties. How would the saleswomen feel about Shelley trying on so many things for Albert and then never buy anything.\n\nShelley let him pick them out.\n\nHe chose pink cotton bikini panties with little flirty ruffles along the hem and a red chiffon flower on the left front waistband. He figured that perhaps Miss Wormer wouldn't object as they weren't lacy or sheer. He liked them because they really captured her cunnie mound and slit so, so well. He got hard just thinking about it.\n\nAnd, they weren't terribly expensive.\n\nShelley though then needed a matching brassiere. Albert didn't want the stress, if not the trauma of having to figure that out so he let Shelley choose the brassiere. She picked a soft, stretchy pink cotton demi bra sprinkled throughout with little red flowers. It was clearly a very good choice.\n\nAlbert couldn't wait to see her with both of them on.\n\nShelley though got into quite a bit of trouble that week at the sorority house, much to the surprise of Miss Wormer. It just seemed like she couldn't do anything right, or follow any instructions. By the end of the week she had accumulated more than enough demerits for a disciplinary spanking.\n\nIt was almost like she wanted a spanking, but that couldn't really be true. Miss Wormer at times had that concern about Pamela. She had been spanked far more than any other sorority sister (hence her selection to represent the sorority in the Wench-in-the-Docks at the Renaissance Faire), but she brushed that thought aside. No girl actually wants to be spanked!\n\nBut, everyone had been behaving so well since the last spanking of a girl, which was in fact Shelley! Miss Wormer had been uncertain about the wisdom of having Albert attend Shelley's first spanking, as any Housemother should, but it turned out to be an excellent decision. None of the girls wanted Albert to witness their spanking and Miss Wormer was quite pleased to see how so well behaved everyone became. It's not like they were rapscallions and hellions prior to Shelley's spanking. The girls of Omega Theta Pi were the best behaved and morally pure young ladies on campus, but they appeared to raise the bar even higher after witnessing Shelley's embarrassment at being spanked in front of Albert.\n\nWell, apparently though it didn't take for Shelley. The final straw had been when Miss Wormer discovered the panties. They were clearly panties for the purpose of enticing a young man, and they simply could not be tolerated. Shelley was going to have to get another spanking. Miss Wormer was disappointed in her, naturally so. But, a second dose of this experience would also be helpful for the entire sorority. It could only help. And, to maximize its benefits she would this time have Albert sit in the front row, so that Shelley fully appreciated the shame of his presence.\n\nIt was a difficult week for Shelley. Breaking all those rules was just not in her nature, and she felt quite bad about it. But, it would only be this once. After this spanking she would be a good girl again. Well, she would at least no longer make any of the household mistakes. It was just that she really, really wanted one more spanking.\n\nSunday evening, before the sorority meeting was to begin, she handed Albert a little device. It was about half the size of a cell phone.\n\n\"What is it?\" Albert naturally asked.\n\n\"It's a remote control.\"\n\n\"Well, it's not a very big one. You would easily lose it and, heck, it's got only one channel. What the heck is it used for?\"\n\nShelley smiled. Albert can be so naive sometimes, but that just added to his charm. He was such a cute, even innocent boy. She stepped up to him and whispered in his ear, \"It's for me, silly.\" She stepped back and opened up her hand, just enough so that only he could see what was in it.\n\nHe studied it for awhile. It was this plastic rounded tube sort of thing, sort of like a partially squashed egg. He still didn't get it. He looked at her quizzically.\n\n\"Turn on the switch.\"\n\nHe did, and then he saw it vibrating, shivering, and making a very, very soft buzzing noise. \"Oh my goodness,\" he said. He quickly glanced around to be sure nobody else had noticed it.\n\nShelley clasped her hand shut, enveloping it within her palm and fingers. She could still feel it buzzing around in her fist, but they couldn't hear it anymore. Her face flushed as she explained, \"I'm going to wear it tonight. You can turn it on any time you want.\"\n\nAlbert now knew precisely what she meant. But, he wanted to be sure that he understood completely and, even more so, he just wanted to hear her say it. \"Wear it where?\"\n\n\"Albert,\" Shelley whispered, \"Shut-up. You know where.\"\n\nHe smiled. \"Tell me.\"\n\nShelley rolled her eyes. She knew he was just teasing her, but she was willing to play along. She said very, very softly, \"In my vagina, while I'm getting spanked.\"\n\nAlbert could feel his dick hardening within his pants. He would have to wear his tightest briefs tonight. He turned off the switch and smiled again.\n\nThe sorority meeting began with the usual routine, going through, for instance, the report from the treasurer. Appreciation was expressed to Albert for his contribution to the sorority's coffers, although it would not be until they rented out more rooms to boys that their financial state would be stabilized. There was also a discussion of forthcoming holiday decorations and the costume party. The girls were particularly excited about that. Miss Wormer expressed concern over the increasing volume of crumbs and wrappers left in the library. There was quite a bit of other business discussed, much to the boredom and impatience of Albert. But, the meeting did eventually reach the final item on the agenda: Shelley's punishment.\n\n\"Once again, girls...and Albert, I regret to say that we do have a sister who is in need of guidance and discipline, Shelley Darlington.\" She paused for the bad news to sink in, but it was old news as the demerit list is posted each morning. Everyone knew that Shelley was in for a spanking. Still, it did have some effect as everyone also knew how embarrassing it had been for her to be spanked in front of Albert the first time, and now he was in fact even sitting in the front row, center seat, with a bit of a smile or even perhaps a smirk.\n\nMiss Wormer called Shelley up to the stage to take her seat in the metal folding chair, next to her own cushioned easy chair.\n\nShelley made her way slowly there, apparently very reluctant to do so, her face focused on her steps, avoiding any eye contact with any of her sisters or Miss Wormer, who waited impatiently for her.\n\nShe stepped onto the slightly raised stage and took her seat, still keeping her eyes focused on the ground.\n\nMiss Wormer then read through some of Shelley misdeeds: the spilling of the milk, an unmade bed, shampoo left in the shower, snacks taken from the kitchen after 10PM. None of them were terribly severe by themselves. But, the accumulation of so many minor infractions did become itself a major offense. It was suggesting a true deterioration in appropriate decorum, deportment, and good etiquette. Miss Wormer in fact wondered if the past week had been a \"cry for help,\" a wish to be punished to be saved from a life teetering on the verge of delinquency.\n\nAnd, the kicker had been the panties. She held them up for all the girls to see.\n\nGasps could be heard throughout the rows of girls, most of whom though admiring how pretty and sexy they were. They so wished they had panties like that. They even felt a bit jealous of Shelley, as she must have felt so pretty and sexy wearing them. Still, they did wonder for whom she had bought them. One doesn't buy panties like that just for oneself. They were rather aghast to think that perhaps she had let some guy see them.\n\nMiss Wormer made sure that Albert could see them, and in fact displayed them precisely for his eyes.\n\n\"Miss Wormer, please,\" Shelley exclaimed with apparent shame and embarrassment. \"Don't let Albert see those!\"",
        "\"You don't feel so proud of them now, do you, young lady,\" she exclaimed, continuing to hold them up for Albert to ogle.\n\n\"No, ma'am,\" Shelley quietly replied, \"no, I don't.\"\n\nAlbert though wasn't really ogling them. He had seen them before, with Shelley in fact wearing them. That was when he was ogling them. Now he was just feeling a bit annoyed at the fact that he hadn't even been able to see her in them since the afternoon at the store, and apparently would no longer see them again. He wondered what Miss Wormer did with all of her confiscated underwear. Perhaps they were in her office somewhere? He wondered if any of the panties would fit her.\n\n\"Well,\" Miss Wormer said, stuffing the panties into her purse, \"Shelley, would you please stand up?\"\n\n\"Yes, ma'am,\" she softly replied, nervously wringing her clasped hands. She looked over at Miss Wormer and said, \"I really am truly sincerely sorry, Miss Wormer. It was just a very unusual and difficult week for me. If you could please just excuse me this one time I promise, I guarantee, that I will never do any one of those things again.\"\n\nMiss Wormer pursed her lips and furrowed her brow in annoyance. She had never allowed a sorority sister to avoid being punished at this stage through simply an apology and a promise. It would set a very problematic precedent for the future. \"Shelley, you should know better than to ask for that. Now, if you would, turn your chair around and bend over.\"\n\n\"But, goodness gracious, Miss Wormer...\" She lowered her voice, as if only the two of them could hear, but it was more of a stage whisper that pretty much everyone still could hear. \"Albert is sitting right there.\"\n\n\"He was here, Shelley, the last time you were spanked. Apparently that fact has not provided sufficient motivation for you to behave properly this past week. I don't see any reason he should be asked to leave now.\" Plus, if he got a little excited then that might make his Thursday appointment with her all the more enjoyable. She wondered if perhaps she might even purchase a similar pair of panties for his \"session.\"\n\n\"Well, at least make him sit in the back row, or something, like he did last time.\"\n\n\"No, no, I in fact ordered him precisely to sit in the front row so that he would be able to see more clearly.\"\n\nShelley's raised her voice. \"But, Miss Wormer, he's a boy and he's going to see my little cunnie lips and everything!\"\n\nThe room went dead silent for a moment after that remark. Even Miss Wormer was taken aback at Shelley's explicit reference to her vaginal lips.\n\nAlbert's dick swelled within his tight briefs. He was though well prepared. The briefs were tight and he had carefully positioned his penis so that when it did swell it would be able to do so in a relatively comfortable manner. He rested his hands within his lap, just to be sure that it was indeed hidden, as well as to be able to provide surreptitious contact with a thumb or finger. \n\n\"Well,\" Miss Wormer finally said, \"recall that point next week when you again think of misbehaving, which you really should have been thinking about this past week.\"\n\nIt was a very good point and Shelley could not agree more, which is precisely why she misbehaved so frequently last week. But, she wasn't about to tell Miss Wormer that. She replied instead in a very timid, soft voice, \"Yes, ma'am.\"\n\n\"Now, turn that chair around and bend over.\"\n\n\"Yes, ma'am,\" Shelley replied, but before she did so she turned and scowled at Albert and said, \"You better not look!\"\n\n\"Shelley!\" Miss Wormer angrily exclaimed. \"Now, we will have none of that. Frankly, I am tempted to have Albert come right up here on the stage so that he can have a real close look.\"\n\n\"Oh no! No! Don't do that, Miss Wormer! I'm sorry, I am.\" Shelley actually didn't want Albert on the stage, as his ability to use the remote might be constrained. Plus, she imagined that he would have some difficulty hiding his erection, which would only get him in trouble as well. Although, it might be kind of fun for the two of them to be spanked together. Perhaps Miss Wormer would make her hold onto his erection while he stuck a finger up her cunnie? She was feeling so warm between her thighs.\n\n\"Well, you should apologize to Albert, not me. He isn't doing anything that I didn't tell him to do.\" Miss Wormer though was reassured on one point. She now realized that apparently she had very little to worry about with respect to something going on between Shelley and Albert. She had been a little suspicious but if they were up to some form of hanky panky there was little reason for Shelley to feel so terribly embarrassed. He would most likely have seen everything already.\n\nShelley turned to Albert sitting below her in the front row. \"I'm sorry, Albert. I shouldn't have said that.\"\n\nMiss Wormer felt that was not enough. \"What should you have said instead?\"\n\nShelley turned her face away from Miss Wormer and rolled her eyes, then turned back to Albert and said, without much sincerity, \"I don't mind if you look at my pussy lips, Albert,\" but as she was saying that she had to struggle to stifle a grin.\n\nMiss Wormer, however, did smile. She felt that small additional act of contrition would go far in helping make this disciplinary session be effective in helping the young lady develop better self-control and discipline. Her sessions were not about the pain of the spanking, it was more about the public spectacle, the shame and embarrassment of the open confession and chastisement.\n\nIt certainly was having that effect on the other sisters within the room. Shelley was not blushing out of embarrassment in having to say such a thing to Albert but they were certainly doing so, finding the whole experience vicariously mortifying. They could not imagine having to say such a thing to a boy, and in front of everyone! They felt so sorry for Shelley, and vowed to do their best to behave like good girls in the future.\n\nPenny though, Shelley's best friend and roommate, knew the truth. There were no secrets between them. She was sitting in the back row and had to stifle a giggle with her hand.\n\nAlbert smiled. He slipped his right hand into his pocket. It was quite a sacrifice to remove it from his lap, but it had something better to do than to hide his stiff dick.\n\nShelley saw Albert's hand slip into his pocket and she knew the meaning of that. She turned her back to the audience and smiled as she turned the chair around and leaned over its back to grasp the seat with her hands, thrusting her bottom out to the audience.\n\nShelley was wearing a very light, thin, pastel skirt that draped delicately across her bottom. It seemed to compliment and accent the sweet curves of her derriere more than really hide them. In fact, it didn't hide them at all. It just made her round perky tush all the more delightful to admire.\n\nMiss Wormer stepped over to Shelley, leaned over, took the hem of her skirt within her hands and draped it over the girl's back. It was so long that it effectively hid Shelley's face from view, allowing her to more comfortably, safely smile.\n\nShelley was wearing one of her favorite panties. They were perfectly fine with respect to the standards of Omega Theta Pi, but they did still have their own special appeal. They were tight pastel pink bikini panties that matched her dress. They hugged her cunnie mound particularly tightly.\n\nAlbert certainly appreciated them. \n\nMany of the girls in the audience squirmed a bit when Shelley's panties came into view, particularly the appearance of her tightly wrapped cunnie mound. They wondered how Albert was reacting, imagining that he must be developing a boner, and then blushing at such a thought, feeling so bad for Shelley.\n\nMiss Wormer did not leave the girl's panties on for very long to admire. She tucked her fingers in the waistband and pulled them all the way down to Shelley's ankles, opening to everyone's view Shelley's very cute, perky, round little tush. It was a really precious, adorable lily white behind, split by a crack within which the skin began to darken somewhat, giving the impression that there was something mysterious deeper down within that hidden valley.\n\nAnd, of course, also clearly evident was her sweet femininity, shyly peeking out from between her thighs. It was such a soft pale white mound, lightly speckled by a thin growth of delicate hairs, and parted by such a deliciously graceful cleft. It was simple yet wondrously erotic.\n\nAlbert pressed the fingers of his left hand against the knob of his erection as the fingers of his right switched on the vibrator.\n\nShelley lurched a bit, then sighed with pleasure as she felt the little plastic obelisk vibrate deep within her cunnie. Her bottom squirmed in a manner that appeared rather overtly licentious for anyone looking, and everyone was. They assumed, however, that the squirming was out of discomforting embarrassment and nervousness, and the girls felt even more sorry for Shelley, as she probably didn't appreciate how naughty and lewd her bottom appeared to be behaving.\n\nIt made Miss Wormer as well a little uncomfortable. She had no real interest in provoking Albert. Well, perhaps she did as it would make him all the more excited for his next appointment with her, but she wouldn't want him to become so aroused that he couldn't wait until then, and would seek relief with some other sorority girl. It was indeed a rather delicate balance. \"You hold your bottom still, girl, so that I can give you a proper spanking.\"\n\n\"Yes, Miss Wormer,\" Shelley dutifully replied from beneath her skirt.\n\nAlbert turned off the vibrator.\n\nSmack!\n\n\"Yipe!\" Shelley squealed, her bottom lurching in response to the sharp stinging slap. It wasn't real hard. It was tolerable, but the first one is often a big surprise.\n\nSmack! Smack! Smack!\n\nShelley's bottom resumed its prancing, but this time for a more acceptable or at least normal reason: she was being spanked. It wasn't as overtly licentious as the earlier squirming but it was still a rather provocatively delightful dance.\n\nShelley was also being a bit more melodramatic in the wiggling of her bottom, enjoying the fact that she was putting on quite a show for Albert. She imagined doing this on the bed for him: squirming and wriggling her upraised naked bottom, like a stripper might do at one of those dirty men's clubs. Would a girlfriend do this for her boyfriend? She would think she would, or at least should, if she really loved him. But, it did seem terribly, terribly naughty. She stuck her bottom way far out.\n\nMiss Wormer appreciated Shelley giving her such an easy, prominent target.\n\nThe girls though wondered if Shelley appreciated how her cheeks spread open when she stuck her butt out so far. Albert could even see her little bottom hole!\n\nSmack!!\n\n\"Yeow! Miss Wormer, please.\" Shelley pulled her bottom back, scrunched her cheeks and sphincter, and swung her fanny left and right. That had been a particularly stingy smack.\n\nAlbert switched the vibrator back on.\n\nShelley closed her eyes, and sighed with pleasure.\n\nSmack! Smack! Smack!\n\nShelley didn't prance or dance her bottom in protest. She just squirmed her bottom around and around, delighting in the feel of the deep vibration.\n\nSmack! Smack! Smack!\n\nIt wasn't the kind of squirming that one normally saw in response to a spanking. It was, frankly, more like one would see from a girl who was mounted on a boy's cock, and was trying to squirrel and squirm his cock all around within her cunnie, feeling it press, rub, and dig all over and around within her tight, twisting cunt. Frankly, it was rather obscene looking.\n\nSmack!! Smack!! Smack!! \n\nMiss Wormer spanked the young lady a bit harder, finding her obscene gyration to be rather disconcerting, if not troubling.\n\nBut, the spanking didn't seem to be having the desired effect. Shelley smiled blissfully beneath the skirt tossed over her head, enjoying the stinging slaps accompanied by the vibrating egg, knowing that all the while she was treating Albert to a very enjoyable, enticing show. She arched her back even more and poked up her bottom, looking as if she wanted Miss Wormer to actually mount her, although clearly having someone else in mind.\n\nMiss Wormer's eyes widened in shock. She had not ever seen one of the girls behave like this!\n\nSmack!! Smack!! Smack!! \n\nShelley even started to, ever so slightly, ever so subtly, act if she was humping something, thrusting her hips as if she was, well, fucking something, feeling herself getting so, so excited. She could even feel the moisture gathering on her cunnie, wondering if Albert was noticing.\n\nAlbert was indeed, as Shelley's cunt appeared to be glistening in the light of the den. He was now more urgently rubbing the swollen knob of his cock with his thumb, wondering if perhaps he could get away with cumming within his pants right in the room. He knew he couldn't though, and vowed next time to somehow have his dick tucked within something, perhaps a sock, or something, that could absorb all the moisture, or perhaps instead wear a sweater or something that would effectively hide the front of the pants. He wanted to cum so, so bad.\n\nSmack!! Smack!! Smack!! \n\nMiss Wormer could feel herself getting a bit excited as well. A spanking session had never been really so sexual, yet she could not escape the perception, the feeling. The very air seemed to be flooded with the scent of lust.\n\nShelley could feel herself getting so, so close. Wouldn't it be so nice, so appropriate, so wonderful to climax right in the middle of a spanking, being blissfully swept away by the deep waves of pleasure as her bottom continued to be stung and smacked, climaxing right under the nose of Miss Wormer and under the gaze of her sorority sisters and Albert. She smiled, and clenched her squirming thighs together so, so tightly.\n\nSmack!! Smack!! Smack!! \n\nMiss Wormer glanced over at Albert, whose eyes seemed to be half closed, yet so focused on the sight of Shelley's squirming, humping reddening bottom, his left hand in his lap, his thumb moving around and around, his right hand in his pants pocket. She wondered if he might he have cut a hole in the pocket. She wouldn't put it past the dirty little boy. She so wished that today was Thursday. She squeezed her thighs together.\n\nAlbert could feel himself getting very, very close, but then noticed Miss Wormer's eyes fixed on his. Was she suspicious? Did she notice something? He kept his left hand still and turned off the switch.\n\nShelley groaned in disappointment. She had been getting so terribly close. She relaxed her thighs.\n\nSmack!! Smack!! Smack!! \n\nYet she smiled at the feel of the stinging spanks.\n\nMiss Wormer could see that the squirming and gyrating had suddenly stopped. She eased off on the spanks. Apparently the escalation in spanking had finally worked?\n\nSmack! Smack! Smack!\n\nYet, Miss Wormer also then realized that Shelley had not been at all vocal for sometime, had not been protesting the spanking, had not been pleading for it to stop.\n\nSmack! Smack! Smack!\n\nIn fact, the whole room seemed to be strangely silent and still, with the exception of one distinct sound:\n\nSmack! Smack! Smack!\n\nShe finally stopped. \"Yes, well, I guess that's enough.\" Frankly, it had been a bit more than the usual disciplinary dosage, yet without any protest or complaint by the girl. \"I um, well, gave you a few more, dear, as this had been your second session in a row.\" She stepped away, rubbing the palm of her right hand with her left. \"I hope this was a very good lesson for you. You can pull your panties back up now, if you wish.\"\n\nShelley didn't really wish to do so. She actually wanted the spanking to continue, particularly if Albert turned the vibrator back on. But, no girl had ever asked for more spanking. She backed away from the chair, a bit awkwardly with her panties around her ankles. When she had sufficient room she then bent all the way over, and very slowly, reached down for her panties.\n\nMany of the sorority sisters gasped with surprise. Most girls quickly pulled up their panties once the spanking had ended, wanting to end the embarrassment as fast as possible. None stepped back from the chair in order to bend over real, real far, providing an even more open view of her cunnie and butt hole. It looked very, very obscene indeed.\n\nAlbert felt he could even detect a bit of Shelley's moisture sliding down a thigh.\n\nShelley very deliberately, leisurely, worked her pastel pink bikini panties up her ankles, over her knees, up her thighs, to finally cover her very apple-colored derriere, and then giving them a tight pull so they fit very snugly to her equally apple-shaped fanny.\n\nOnce her panties were finally fully secured she let her light pastel skirt fall back over her bottom, the curtain effectively closed. She turned to face Miss Wormer, her face a bit flushed, her eyes a bit glazed.\n\nMiss Wormer asked, \"Well, have you learned your lesson, young lady?\" She crossed her arms beneath her full breasts.\n\nAlbert turned on the vibrator.\n\nShelley softly gasped and said, \"Oh yes, Miss Wormer,\" her voice a bit breathless, her bottom and hips squirming again beneath her skirt. \"I will be a very good girl now.\"\n\nMiss Wormer could see that perhaps she had gone a bit too far with Shelley, as she was even having difficulty keeping her bottom still, it must sting so badly. Perhaps she should check on her later tonight? Just to see if her bottom was feeling better. \"Yes, well, I'm sure you will. You can go back to your seat now, Shelley.\"\n\n\"Thank you, Miss Wormer,\" Shelley replied, and even gave her a curtsy, wanting to do anything that involved shifting her thighs and bottom. She then made her way off the stage, back to her seat, keeping her eyes away from Albert's, as she knew she might in fact climax on the way back to her seat simply by looking at him, and the bulge in his pants.\n\n- - - - - - - - - - - - - - - - - - -\n\n\"Albert, Albert, are you asleep?\" Shelley softly whispered, pushing forcefully on his shoulder to wake him up.\n\n\"What?\" He groggily responded, rubbing the sleep out of his eyes, but this time he knew precisely who it was, and was very, very glad to see her.\n\nShelley had avoided Albert for the remainder of the day, wanting to maintain the ruse that there was nothing going on between them. But, she wasn't about to wait all through the night, and so had once again snuck down the hall after lights out to be with him. \"Oh, thank goodness you're still awake. I didn't want to disturb your sleep.\"\n\nAlbert smiled at Shelley's pretense that he wasn't yet asleep, as well as how pretty she looked standing beside his bed in her pink cotton PJs sprinkled with sleeping kittens, puppies, bunnies, and teddy bears. She looked so adorably cute. His dick swelled up in his own pajama bottoms. \"No, no, I'm fine. Is there something wrong?\" . She smiled down at him, her dimples coming into view. \"Did you like my spanking?\"\n\nHe smiled back. \"Yes, I did,\" he admitted. He pulled back the blankets, reached down, and extracted his swelling cock from the half-opened flap of his PJ bottoms. \"See?\"\n\n\"Albert!\" Shelley exclaimed in protest, but with a big smile on her face. \"Put that back! Oh my goodness.\"\n\nAlbert grinned but he did pull a blanket over himself to cover it up.\n\nBut, as one curtain is drawn another is at times opened. Shelley turned around, pulled down her PJ bottoms, and thrust her naked bottom out over the bed, right into Albert's face. \"Is it still pink?\"\n\nAlbert slid his left hand down under the covers to grasp hold of his stiffened dick. Shelley's bottom was no longer pink but it was nevertheless wondrous to behold. Shelley had such a fascinating little tush, at least to Albert. He could look at it for hours. It was just so perky, so round, so cute and adorable, yet so very naughty. A bottom like this really should be spanked.",
        "Plus, peeking out from between those precious hillocks was a little puckered pink hole. Now, there was something that was truly naughty and dirty. Albert squeezed his dick as he imagined giving it a little tickle. No girl, however, probably wants you to do that. Shelley probably wouldn't even want him to acknowledge he was looking at it.\n\nAnd besides, below that, was an even more delicious sight: Shelley's lilliputian feminine cleft. It looked like it was trying to hide behind her lily white thighs but nevertheless was clearly evident, and so erotically precious.\n\n\"No, no,\" he finally managed to say, \"it's fine now,\" rather understating his true feelings.\n\n\"Well, I think maybe it needs a little kiss. Miss Wormer was not very nice to it.\" She gave her bottom a little wiggle to emphasize her point.\n\nAlbert slid over in his bed, although he didn't have to go more than an inch or so to make contact, and he gave Shelley's soft little bum cheek an affectionate kiss. He briefly wondered why \"kiss my ass\" was a mean, insulting, or angry thing to say. It seemed to him to be a very sweet and fun thing to do.\n\nHe lifted his head up, propped himself up on his right elbow, and proceeded to plant kisses all over and around Shelley's feminine perky tush.\n\n\"Ooooooh,\" Shelley cooed, \"that's making it feel much, much better.\"\n\nAlbert briefly pulled back, \"Well, that's what a boyfriend should do, make his girl feel all better.\"\n\n'Oops,' he thought. He just referred to himself as her boyfriend, and Shelley as his girl. They had gone out, but that hardly constituted being boyfriend-girlfriend.\n\nShelley heard the references, but she was not upset. On the contrary, she looked back at him, at the concern in his eyes, and said, with a teasing smile on her face, \"Oh, am I your girlfriend, Albert?\"\n\n\"Um, well...uh.\" He could feel his face reddening.\n\nShelley had already been thinking of Albert as her boyfriend. She pressed her fanny back farther so that it bumped him in the face. \"Well, would you give your girlfriend more kisses, Albert? She just loves to be kissed.\"\n\nAlbert smiled and resumed his kissing, as well as caressing her soft rounded cheeks with his lips. He even slipped his fingers between her thighs to softly touch the warm, wet lips of her cunnie.\n\n\"Oh, Albert,\" Shelley quietly sighed. She pressed her lips more firmly against his fingers. His fingers felt so nice, so good. Maybe it was sex, but she felt such a need, such a yearning. The spanking had made her so, so excited.\n\nAlbert's cock was straining within its skin, wanting so much to be handled, to be stroked, but he felt he dared not do so. He was a little uncomfortable jerking off in front of Shelley. She probably would not object but it wasn't something you just spring on a girl, right after you agree to be boyfriend and girlfriend. More importantly though he just wasn't so sure that he would be able to control himself. It just felt so, so hot to be feeling around and within Shelley's warm, wet, fidgety pussy lips.\n\nShe looked so fucking hot, her butt sticking back at him, wriggling and squirming around as he explored her drippy wet cunt. He made sure that he paid good attention to her little stiff clit, just as Miss Wormer had suggested. He found it so curious, its nubby hardness contrasting so much with her otherwise squishy softness. He pressed hard against it as he matched her wriggling with his circling around and around and around.\n\nShelley knew she must look like an awfully obscene sight, thrusting her naked butt back at Albert as he diddled her clit from behind. But her lustful urging and yearning were trumping any sense of Miss Manner's proper decorum and ladylike behavior. And, besides, isn't this what a boyfriend should do for his girl? She bent over further and thrust her ass back farther. \"Oh Albert,\" she gasped, \"you make me feel so, so good. Stick a finger in me, would you please, please, please.\"\n\nWell, she did say please, and so he brought his left hand in as well and slipped his middle finger into the wet swollen cleft of her cunnie, sliding up and down her slit until he found the tight, clenched entrance into her cunt. He pressed his finger against it and then pushed and screwed inside as he continued to massage and diddle her clit.\n\n\"Oh gosh, oh my,\" Shelley gasped as she felt Albert using the fingers of both hands on her cunnie, one working hard on her clit while the other worked its way up into her tight, virginal hole. This was not precisely how she imagined the first time would be with a boy, fingering her from behind as she stuck her cunt back at him. She had figured that it would be on her wedding night, or at most at the reception: a little flirtatious play before the big night. But it just felt so, so good, and so, so right.\n\nHer hole was so fucking tight. Albert could not imagine getting his cock in there. Actually, he was in fact imagining precisely that. It just seemed like there would be no possible way it could in fact fit. It wasn't that his cock was especially big, but Shelley's cunt hole was so, so, fucking small and tight, and really, really, wonderfully squishy and wet. He screwed and worked his finger all the way up it could possibly go, which wasn't really that far, but at the time it felt really, really deep.\n\nHe smiled lustfully, licentiously, realizing that he was actually fingering a girl, that he had a finger up a girl's cunt, his girl's cunt. There is so much that a girlfriend can provide to you: companionship, affection, sympathy, support, dedication and, of course, love. But, this was awfully fucking good as well. He wriggled, squirmed, and flickered his finger in her hole as he pressed the fingers of his other hard against her clit. Her cunt was even making little squishy sloshing noises as he worked his wriggling finger in and out of her clenching cunt.\n\nShelley suddenly pulled away, Albert's finger slipping out of her cunt with a big slurp. She stood up straight, her pajama top falling back down over her butt.\n\nAlbert wondered if they had gone too far. He knew that Shelley was a purity girl.\n\nShelley stepped out of her pajama bottoms and turned around to face Albert, the front of her PJ top hiding her cunnie. She looked intently, deeply, into Albert's eyes and, keeping her eyes fixed on his, she took off her purity ring and laid it on his bedside table. She whispered, \"I want something bigger inside.\"\n\nShe climbed onto the bed, onto her hands and knees.\n\nAlbert pulled his feet up to make room on the lower half of the bed.\n\nWith her eyes still fixed on his she lowered her head to the bed, getting down onto her elbows as she raised up her bottom, her butt and cunt sticking out over the edge. She repeated softly, \"I want something bigger inside. Won't you please make me happy, Albert?\"\n\nAlbert slipped out of bed, the front of his PJ bottom revealing a very, very large protuberance. He pulled out the elastic waistband of his PJ bottoms over his erection and let the pajama fall to the floor.\n\n\"Oh my,\" Shelley gasped as she looked back at the imposing size of Albert's stiff cock. It wasn't big if one compared him to all other hard cocks, but at the moment it looked awfully big to her. Nothing that large had been up there before, not even her little women's helper that Miss Wormer had previously found.\n\nAlbert stepped out of his PJ bottom and stepped over to Shelley, to her upraised, thrusting butt and cunt. \"Are you sure you want to do this?\"\n\nShe nodded, although clearly looking a little apprehensive, a little fearful. \"You won't think I'm a slut or anything, will you?\"\n\nAlbert smiled reassuringly, \"Shelley,\" he said as he leaned over her bottom, \"you are as good and virtuous as any girl I've ever known,\" and gave her bottom a few kisses of respect and admiration.\n\nShelley giggled, and then reached back with her left hand. She asked, \"Hold my hand?\"\n\nHe smiled and took her hand in his as stepped up in between her feet sticking out beyond the edge of the bed.\n\nShe spread open her thighs a bit farther to give him more room.\n\nAlbert used his right hand to help lodge the head of his dick against the entrance to her cunt. Just placing the sensitive swollen knob against her wet, warm crevice was exhilarating. The aroma of her lust drifted up to his nostrils.\n\n\"Be careful,\" Shelley whispered.\n\nHe let go of his cock to brace himself with a hand on her hips and pressed forward, attempting to drive his dick down into her cunt, but it just slipped out of position. She was so slippery and tight.\n\nHe placed it again against her cunt hole and this time kept it more firmly lodged by holding onto it with his fist, not letting it slip away, and then pressed forward.\n\n\"Ungh,\" Shelley grunted as she felt him try to force it inside. She squeezed on his hand, did her best to relax, and then felt it slip a bit inside.\n\nIt hadn't gone in far, but it did go in a bit. He pulled back, making sure that he did not pull all the way out, and then pushed again. It seemed to go in a bit further.\n\nHe continued his careful, tentative thrusts, slowly getting in deeper and deeper with each push, each one so tantalizingly exhilarating, as every nerve of his knob was being so tightly hugged, massaged, and squeezed.\n\nShelley kept her bottom perfectly still. She felt an impulse to help get it inside by pushing back but she was afraid that she might just make it pop back out, not being entirely in sync with Albert. This was perhaps the man's job, and she let him do the work.\n\nAlbert then felt the knob suddenly slip deep inside, becoming tightly ensconced within the slippery soft confines of Shelley's cunt. She felt so terribly, terribly tight, like her cunnie was a series of thousands of lips, all firmly kissing his cock. It was just so fucking good. He squeezed her hand, with appreciation, with lust, and with affection.\n\nHe pressed forward, slowly forcing his cock deeper and deeper and deeper down within her cunt, meeting the most wonderful resistance all the way in, engulfing, gripping his cock in such a tight, loving embrace, the soft wet walls of her cunt molding, squeezing, and caressing every inch, every centimeter.\n\n\"Oh Albert,\" Shelley moaned, \"you're just so big.\"\n\nHe provided fuller, lengthier thrusts. Shelley closed her eyes and moaned with deep, fundamental pleasure, grasping even more tightly on his hand as her cunt did likewise with his cock. This was not the way she had expected to be fucked the first time, from behind, her butt up in the air, but it was perhaps so appropriate, so right, as it was this way that she so often had been presenting herself to him.\n\nBefore too long though he was all the way in, and it had been well worth the effort. He had never felt a more lovely home for his cock. \n\nShelley sighed, \"Oh Albert, you feel so good, so, so, so big inside me.\" She wasn't saying that to be nice, as she had tried to sooth him after his losing chess match. Perhaps a lot of girls do just say that, but Shelley was being quite honest. To her virginal cunt Albert felt like a bull.\n\nAnd her saying so made Albert feel like one, a very proud, satisfied, and lustfully excited bull. He smiled to himself. No, he openly smiled and thrust even harder, slapping his abdomen against her butt, jarring her body as he pounded his big, large, monstrous bull cock deep down inside her, thrusting again and again and again.\n\n\"Hmmph, hmmph, hmmph,\" Shelley groaned with each pounding plunge, at times altering with a quiet little whimpering as her cunnie was being so thoroughly serviced, pumped, and pounded. She spread her thighs wider, wanting to let him in as far as he could possibly go. Yes, this was much, much better than his finger. She used the fingers of her free hand to reach back between her thighs to diddle her clit as he plunged his cock in and out of her gripping, clenching cunt.\n\nAlbert suddenly fell down over Shelley's back, shifting their held hands up higher on the bed, their fingers now intertwining as he used his free hand to reach around her body to take hold of her right breast.\n\nHe gasped with wonder as his hand grasped her boob. How very strange that this was in fact the first time he had in fact held or even touched her breast. This was virgin territory as well, and its softness, its roundness, just felt so amazingly cool. He squeezed and pawed her boob, feeling the erect nipple pressing against his palm.\n\nShelley now returned his thrusts with her own frantic humping. Her prize bull could not escape its stall now and she gave herself over to an obscene bucking of her hips, knowing that she would not last very long. She briefly wondered if that was wrong, to let herself cum before he did, but it had been such a long, long day of sustained and frustrated stimulation. She had almost cum on the stage, with Albert making the vibrator shimmy in her cunnie while Miss Wormer gave her the public spanking, and then almost again while she was thrusting her naked butt back at Albert while he finger fucked her cunnie and diddled her clit. But, she would not be denied now and she suddenly felt herself swept away by her climax, surging over her body like a tsunami of blissful engulfing enchantment, taking her away with its encompassing, absorbing tide. \"Oh Albert,\" she sighed, feeling her knees trembling, her legs going weak.\n\nAlbert felt Shelley's cunt suddenly quiver and shiver around his cock, convulsing in little spasms of lust, of joy, and he too felt his orgasm quickly announce its arrival by that sense of an inevitable eruption from deep within his loins. He squeezed hard on her boob.\n\n\"On my bottom,\" Shelley gasped, somehow sensing through the cloud of her own climax that he was about to explode his load.\n\nAlbert dutifully pulled out, and just in time as his dick suddenly twitched, releasing a big large sloppy jet of cum across the back of her pajama top and then across the lily white cheeks of her ass. He let go of her breast to take hold of his cock to keep it well aimed on Shelley's cute little perky quivering bum.\n\n\"Oh Albert,\" Shelley sighed, lost within the bliss of the waves of her own climax, \"that's so nice, so nice, dear,\" as she felt the torrents and sprays of his cum splash down across her pinkish derriere. It was really quite appropriate that he provide his soothing balm of cum on her recently spanked bottom. She smiled with deep satisfaction into the blanket as she felt him coat her tush with his thick, creamy gism.\n\nAlbert smiled as well, watching his dick unleash its furious load of spunk, repeatedly jerking and lurching in his fist as it continued to squirt and spurt globs and ropes of spunk along Shelley's soft, sweet cupcake derriere. The feel of an orgasm is great enough, but when accompanied by such a fetching sight it was so, so wondrous.\n\nHe smiled with pleasure and pride as he thoroughly drenched her round pink hillocks with his rain of jizz. When he was finally done he squeezed out the remaining drops into the deep crack of her ass and then fell down beside her, never letting go of her left hand.\n\nHe rolled onto his back and pulled her onto him, where she buried herself into his arms, snuggling her face into the crook of his neck.\n\nHe reached down with his right hand and softly worked the soothing warm pools and globs of cum into the tender, soft skin of her round, warm, pinkish tush.\n\n- - - - - - - - - - - - - - - - - - - - -\n\nI hope you liked it! I really enjoyed writing it and I am considering a follow-up. I am very, very open to suggestions and ideas. In any case, please do take the time to leave a reinforcing vote. The votes are really very helpful and encouraging! "
    ],
    "authorname": "Charles Petersunn",
    "tags": [
        "first time",
        "exhibitionism",
        "reluctance",
        "spanking",
        "mature"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/living-with-omega-theta-pi-ch-02"
}
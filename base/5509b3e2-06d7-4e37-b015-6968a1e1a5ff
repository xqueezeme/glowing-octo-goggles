{
    "title": "My Little Ventrue Pt. 08 Ch. 07",
    "pages": [
        "~~Jack~~\n\nNot much longer until sunrise. God, he was starving. Strong as the curse was, it wasn't invincible, and it'd used a lot of his available vitae to fight that creature.\n\nFought, and won. Don't forget that.\n\nJack silenced his thoughts as best he could, and waited, but the curse said nothing. Just as Jack had noticed throughout the battle with the azlu, and S\u00e1ndor's Horror before that, and the attack on the hospital before that, the curse had trouble maintaining control after expending a lot of vitae. It, or he, was connected to the Beast in a way not dissimilar to Jack.\n\nThat meant, while Jack starved, became weak, and felt his Beast instincts kick into overdrive, the curse itself went quiet, growing weak as well. A flaw in the curse? A weakness. Despite how the Beast grew louder and louder inside Jack's head and chest as his blood lust increased, the curse said nothing. If the curse was simply the Beast given voice, it'd have an easier time taking over him when he was hungry, not a harder time.\n\nThe Strix curse wasn't the Beast then, but something that infected it, imbued it with power, indirectly imbued Jack with power, and... what, created another personality in his head? Without a power source, of the 'essence of life' as it put it, the curse was weak. Jack became weak too. The Beast did not.\n\nFeed. Feed. Feed. Find something with a heartbeat and drain it. Get blood. Get the essence of life. Devour. Fill. Blood. Blood. His Beast sounded like that, and now his Beast was insanely powerful, but that wasn't the voice of the curse. Or maybe, instead of thinking of the curse as the power given to his Beast and the voice of the curse, he needed to start thinking of them as separate things? His Beast was now absurdly powerful, so was he, and so was... this other entity, now inside him?\n\nHe chuckled, and let his head sag. It'd been a long time since he'd been starving like this, truly hungry, to the point he could feel a frenzy under his skin, ready to break free and take over. But the Prince had him locked up tight. An elder Daeva or Nosferatu might be able to break the chains with pure strength. A Gangrel could probably transform into something that let them slip free. A Mekhet would probably be screwed, and so was he. But that was good. If he frenzied, no one would get hurt, and someone would feed him some blood come the morning.\n\nThe last time he was this hungry, it'd been his first night as a vampire. He'd frenzied, appetite surprising even his sire, and he'd killed someone. Mrs. Pavala.\n\nMrs. Pavala. God, he was happy he didn't run into her ghost. The guilt would have ripped him in half.\n\nIt made him wonder, though. What were the requirements for becoming a ghost? It must have had something to do with the emotional and mental state of the person. Sabrina was so devoted to her sire, that dying in a skirmish with Carthians left her utterly unable to accept the reality. Mary apparently unlocked the memories Jack had suppressed inside her; suppressed, not wiped, evidently. And that had driven her into such a rage that she didn't move on either.\n\nClara had said to ask the hunters. Good idea.\n\nJack. A tiny whisper pushed through Jack's thoughts.\n\nStill with me?\n\nI'm here. You'll never be rid of me.\n\nYeah, we'll see about that.\n\nWhy do you hate me so much?\n\nWhy? Why? Are you fucking serious? You snuck into my thoughts for months, years! You planted your claws in my brain and my personality, my instincts and desires, and twisted them. It wasn't until I freed you that I could even think clearly anymore.\n\nI gave you strength.\n\nYou gave me a guilt complex. Christ, I've been through fucking hell, and it could have been so much better, and smoother, if you hadn't--\n\nHadn't what? Gave you the strength to Dominate the hunters when they first kidnapped you? Or gave you the strength to Dominate Damien's mind, and save your lover? So many times, you tapped into my strength, and so many times, I pushed it on you so you could save yourself. You dragged yourself out of that fire you created to kill your grandsire, cut in half face to crotch, and you lived because of me. You got revenge because of me! Angela is dead because of me! You have a mansion. You have power and money. You have the Prince--\n\nNothing. Nothing about what you have done, is why Antoinette and I are an item. If anything, it's in spite of your presence that I found such an amazing woman, a woman who likes who and what I am, and vice versa.\n\nAnd if it wasn't for me, she'd be in her basement, crying her silly, ancient tears, over her dead lover.\n\nYou were just saving yourself.\n\nExactly. Saving me. Saving you.\n\nDon't talk about us like we're the same person.\n\nI am you!\n\nNo! You can't have me!\n\nHa ha ha.\n\nJack sighed and let his head droop. The lights were still on in the room, since it didn't matter to a Kindred how many lights were on, when dawn came. He looked up at his wrists, and how the wounds on his hands were healed. The memory of barbed wire cutting through his palms was vivid, and he gazed at them.\n\nGod, he was starving.\n\nJack. Don't trust her.\n\nWho?\n\nElaine.\n\nFuck you. She's Antoinette's friend. She trusts her, and I trust the Prince's judgment more than my own.\n\nElders are blind to the past, Jack. Think. Would Elaine really help her, just to help her, and you? What Kindred is so thoughtful of others?\n\nJulias was. You know, my sire? Her grandchilde?\n\nDon't be a fool. The Strix curse was created with a sacrifice.\n\nYeah, and? That was centuries ago. What does--\n\nThink about it. Just... think.\n\nThe curse went silent, and Jack sighed relief. The curse needed blood to run, and now that Jack was starving, it couldn't keep it up. If the Beast inside Kindred grew louder and louder the hungrier the vampire became, why did the curse grow quieter? The more details he could put together, the more he had to work with with Elaine.\n\nThe curse, it, he, was Jack, in a way. He hadn't been lying. Somehow the curse had latched onto him and created an entirely new personality, something that existed parallel inside Jack, and shared his body with the Beast. It wasn't Jack fighting against his Beast. It was Jack and the curse, fighting for control of his mind, while the curse had also inflated his Beast's power to the extreme.\n\nIt was such a disgusting problem. If he could get rid of the curse, he'd be free of his influence, but so much weaker. Given the chance, he'd happily become weak, if it meant having this thing in his head gone. The curse was sick, and horrible.\n\nAnd he had a point. Not about helping Jack out a lot, fuck that. Power wasn't worth having this abomination fighting for his god damn body. He had a point about Elaine.\n\nJack laughed, and smiled at the floor as he pieced together some memories. Not once had Antoinette left him alone with Elaine. Either she was around, or the sheriff was around. They didn't trust her either, not completely.\n\nThen again, Jack had spent almost every night for a while now with some part of his body on her breasts. Head, back, chest, usually his dick. Antoinette really, really, really really got off on getting him off, and was more than happy to use Elaine to indulge her kink. And, of course, he was happy to go along with whatever Antoinette wanted. Thankfully, that was usually something he wanted, too.\n\nEach time he met Elaine's eyes, he definitely saw an edge in them, something violent, something deadly, and some awareness lurking within. She was as old as Antoinette, and it'd be stupid to think that she couldn't fight the Prince if it came to it. And still, despite all that, Antoinette felt comfortable having sex with her, and smooshing Jack between their boobs like he was sliced meat in desperate need of being sandwiched.\n\nMaybe it was because she was a Ventrue? Daeva were fast and strong, and very, very good at melee confrontations. Ventrue were not. Ventrue were generals, meant to give orders. Maybe Antoinette figured she'd be able to handle anything Elaine could throw at her in such close proximity?\n\nNo, that wasn't it. Antoinette trusted her. Antoinette legitimately trusted her. What sort of friendship did they have, for a secret as absurd as the curse, something Elaine used to have, to not break Antoinette's faith?\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n~~Eric~~\n\nThe moment they were inside his apartment, Jessy started to strip.\n\n\"Uh, again?\" he said. \"We went just a little while ago.\"\n\n\"Yeah, but I'm always horny after a successful mission.\"\n\nHe paused and thought about that. It was true, mission successful. They'd showed up, saved their friends, and killed the azlu. Not all of them, since a few spiders were apparently wandering around, not a part of the greater hybrid monster thing, but Caleb and Noah insisted the few that remained would not be a threat for a long time.\n\n\"What if I don't want to have sex?\" he said, and folded his arms across his chest.\n\nShirtless but still in her bra, she turned around and looked at him, hands behind her back and ready to unclasp the infamous barrier. But she didn't.\n\n\"I'd call you a liar.\"\n\nHe laughed, and leaned against the closet wall near his front door. \"Oh?\"\n\n\"Yeah! I am a mighty gorgeous piece of ass, and you are a werewolf with an endless libido.\" Grinning, she came up to him, and pressed her hands against his chest lightly, before getting in closer and pressing her bra and breasts into his chest.\n\nHe took a deep breath, and told his libido to shut up for a moment. \"Come on, you know what I want to talk about.\"\n\nShe frowned, stepped back, jumped onto the couch, and bounced a few times before settling. \"Do... do we have to?\"\n\n\"You don't want to?\"\n\n\"I don't like doing the talking thing. I like doing the action stuff, the kissing and fucking, even the cuddling, I like that stuff. Talking about our... feelings, and stuff, it's not fun.\" That was telling, especially how she looked away when she said it.\n\nHe sat down on the couch beside her, eyes down as he struggled to find a way to word this. He was not eloquent. He was a dumb motherfucker.\n\nKat hopped up onto his lap, and sniffed him several times. Considering the shit he'd gone through, and all the weird blood he'd gotten on him, she was probably smelling some of that. The spider blood disappeared when he transformed, and he was thankful for that; suit remained intact too. But he could still smell it, and Kat frowned up at him, smelling it too and not happy about it.\n\n\"Sorry girl.\"\n\nSighing, Jessy reached over, scooped up Kat the cat, and smooshed her into her bra as she hugged her. Eric doubted Kat cared about boobs, but she did care about soft things, and she rubbed her cheek into Jessy's chest with the hug. Jessy smelled strange too, but Kat didn't seem to care when it came to her.\n\n\"As you may have already guessed,\" Jessy said, \"I was, in fact, involved in a relationship once.\"\n\nThat wasn't what she'd told him before, but he nodded and rolled with it.\n\n\"With your cat?\"\n\nShe laughed and nodded. \"The cat, too. But, I mean with a person. A human, when I was just a teenager.\"\n\n\"Oh? Want to... talk about it?\" He slid in a little closer to her, hooked his arm over her shoulders, and leaned back on the couch. Without comment, she snuggled into the nook of his arm, let Kat settle on her lap, and kept her eyes down as well.\n\n\"It was dumb. Just kid love, you know? It end badly.\"\n\n\"How'd it end?\"\n\n\"Told him I loved him.\"\n\n\"How old were you?\"\n\n\"Sixteen.\"\n\n\"Ouch.\"\n\nShe laughed, and scratched Kat around the ears until the dumbass was purring like a motor. \"No shit. He dumped me on the spot, practically running away.\"\n\n\"Did this guy... have tattoos, and piercings, and smoked, and whatnot?\" This would have been the sixties, after all. \"Maybe drove a motorcycle he really wasn't old enough to handle?\"\n\nShe laughed again. \"Yeap, exactly. I fell for a bad boy, like every teenager girl does. When I told him how I felt, he bolted in the other direction.\"\n\n\"Rough way to learn that lesson.\"\n\n\"Yeap. And ever since then, it left an impression.\"\n\nHe leaned in, kissed the top of her head, and rubbed her further shoulder as he gently hugged her. \"I don't think you can blame your view of romance on that single event. Don't give the guy so much credit.\"\n\n\"I know I know. But, I'd be lying if I said it didn't affect me at all. After that, I found it easier to keep people at a distance, you know? And by then I was completely addicted to sex, so it wasn't like I was going to stop fucking any time soon.\"\n\nHe nodded, as if it was perfectly normal. Most people didn't give into their desires with such passion, but Jessy did, and had the rough-and-tough personality to stay afloat in her world despite it. It was strangely charming. Her life could be written as some sort of coming-of-age story for aggressive women.\n\n\"Well,\" he said, \"I'm no psychologist, but my last marriage taught me one very important lesson.\"\n\n\"Don't marry money?\"\n\nHe choked on a snorting laugh; her jab had been a mix of hilarious and painful. \"I was the money in that relationship, remember?\"\n\nShe shrugged and beamed up at him.\n\n\"The lesson,\" he continued, \"was just... talk to each other. It can be strange, awkward, and even painful. It might feel cheesy or stupid, to try and put life shit into words. But, you have to do it, because it's a thousand times worse when you don't.\"\n\nSighing, she turned her head up to him, and nudged her forehead into his neck. \"How wise you are, old one.\"\n\nHe turned his head to rest his cheek on her hair, and squeezed her further shoulder toward him. \"I love you.\" Off like a band-aid, and his heart rate skyrocketed the moment the words were out of his mouth.\n\nShe shivered when he said it, like she'd just heard a balloon pop near her head, or a gunshot.\n\n\"Say... say more things.\"\n\nHe breathed a sigh of relief. That was a lot better an answer than 'I don't.'\n\n\"You're a lot more honest than I figured any woman could be. You're passionate, and you know what you like. You're smarter than you realize. You're genuinely fun to talk to and be with. You're the reason I'm happy to wake up every day.\"\n\n\"Plus the money.\"\n\n\"Yeap, I do appreciate the money, too.\"\n\n\"And I'm fucking gorgeous.\" She managed to put some of her usual attitude into the comment, but her voice wavered with nervousness as she said it.\n\nHe laughed. \"You're gorgeous and you cum more easily than a single mother testing her new high powered vibrator.\" Well, if she was going to go there, he could too.\n\nThat earned some laughs from her, and she resumed petting Kat, while at the same time nudging her head into his neck some more.\n\n\"I... I love you too, ok?\" She shivered again when she said it. \"Ugh, I sound like a trashy dime store romance novel.\"\n\nHe shook his head, and hugged her closer. \"No, you don't. Really. I... I don't want that sorta shit to ever make you think you shouldn't say something, ok? Presentation and shit, I know vampires are into that, Invictus especially apparently. But that ruined my last relationship, like it was fucking poison. And since we're both in do-or-die vocations, last thing I want is for us to ruin shit because we don't communicate.\"\n\n\"But, miscommunication and stupid decisions are the cornerstone of romance plots!\" They both gagged at the same time. And then they laughed. \"Ok, now we're definitely having sex.\"\n\n\"Say what?\"\n\n\"First 'I love yous'? Definitely need sex. Slow, tender, romantic, lovey dovey sex.\" She set Kat on the back of the couch, and crawled onto his lap. Wearing only her suit pants and a black bra, she looked damn good. Smelled a bit weird, though. \"Because you love me. Loove me? Looooove me.\"\n\nHe blinked, and looked left and right as if trying to escape. Which earned a punch from the woman, right in the shoulder.\n\n\"Sorry,\" he said between wince and groan. \"Just, didn't expect you to be so...\"\n\n\"You awakened the little girl inside me! My heart is bursting!\" She laughed again, shrugged, and leaned in close so she could hug him. \"But seriously, I... I'm fucking glad, ok? Really fucking glad. It's damn hard for me to say shit like this.\" She kissed his neck, sank her knees into the couch around him, and pushed her hips forward. \"I love you. And... it's... exciting to say.\"\n\n\"It is pretty exciting. And... soothing.\"\n\n\"Fucking right. I... god, it feels like I can finally...\"\n\n\"Breathe?\" he said.\n\n\"Vampire.\"\n\n\"Oh, right.\"\n\nShe shrugged again, and hugged him tighter, burying her face in his neck. \"So you... really love me?\"\n\nWhen she lifted her head, they met eyes, and Eric found himself staring; gazing, really. Something about her was so much easier to sync with, to be comfortable around, to not feel like she was looking for a way to stab him in the back, compared to the other women he'd been with. Funny, considering she was a vampire, and Sheryl was just your everyday human. Sheryl and him had had trouble looking each other in the eyes, unless it was sexual. With Jessy, he could meet her eyes, and they could look at each other without issue. They did it now, watched each other, gazed at each other, and it felt soothing.\n\nOf course, soothing slowly turned into heat, as Jessy inched in closer, and nudged her lips into his. After a moment, he turned it into a kiss, set his hands on her hips, and pulled her as close as her body could go.\n\n\"So, uh,\" she said between kisses, \"how do, um, couples normally fuck, after their 'I love yous'?\"\n\n\"You had it right, I think. Slow, tender, lovey dovey sex. Maybe some candles. Maybe in the tub?\" Half for quality romantic sex, half to get clean.\n\nLaughing, she slipped off his lap, stood up, and put her hands on her hips as she looked around in contemplation. \"Do they really?\"\n\n\"Probably not. Sheryl and I fucked in the back of the limousine.\" Drunk.\n\n\"Ha. Sounds to me like you need proper I-love-yous sex. Candles -- you handle the candles -- and hot tub sound great. And I'll get the lube.\"\n\n\"Lube?\"\n\nNodding, she tossed off her bra as she marched toward his bathroom. \"Gonna have some nice, long, drawn out sex. Water sex requires lube.\"\n\n\"Right, right.\"\n\n\"And anal.\"\n\n\"Right, right.\"\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n~~Beatrice~~\n\nTriss and Jen returned from their outing. Both fed, leaving a couple hours before sunrise, and that was usually a good time to head back home. It didn't take a vampire very long to cross the city, but more than one vampire had died to sunlight because shit happened on the way home. It paid to be cautious.\n\nThe two vamps crawled through the tiny entrance of the Circle's cave, and were greeted by the usual sounds of Othello fucking someone. The dumbass Daeva was a master of Majesty, and often had one or two or seven women gobbling his cock, though he didn't usually bring meals back to the cave, except for his ghoul Madison. She only knew about the seven-on-one orgy because she found him at Bloodlust one time, with seven girls fighting for room to get on him. But then again, he probably didn't need Majesty to make that happen, not in Dolareido, and not with a body like his.\n\nAnd, as per usual, Othello didn't bother to close the hanging fur over his alcove, which meant Jen and Triss both got to see him and Madison having a good time. Tonight, Othello sat against the curved wall of the entrance to his alcove, so half of him wasn't even inside it. Soon he'd be fucking the middle of the cave, if someone didn't tell him to back the fuck up.\n\nTriss marched over to him, black combat boots making a hilarious amount of noise against the stone.\n\n\"Othello, dude, what the fuck?\"\n\n\"Beatrice. Been looking to talk.\" The gorgeous man looked up at her with his usual half-glazed look, and smiled in pleasure. He always looked like he'd just taken a drag of something, despite how that didn't work for Kindred, but at least this time he had reason for his blazed look: Madison sat on her butt beside him, her ass pointed toward his alcove, while she leaned over his lap, and had his dick in her mouth.",
        "Triss did her best to ignore the sight, but it was hard. Madison was a beautiful woman, black with very dark skin, super short curly hair, and very, very curvy. She wasn't chubby, but she had some meat on her bones, with a huge ass and big, heavy tits that rested against Othello's leg while she sucked on his cock. Othello, with right hand down against the cave floor, had his left hand in her hair, and combed it encouragingly as she worked to get his huge dick down her throat. She succeeded, and Triss had to force her eyes up.\n\nBut, god damn, Othello was a beautiful fucker. The huge bodybuilder build would have looked too extreme on most people, but on Othello, it looked like a perfect counterpart to his laid-back personality. His brown eyes, long dark hair, and dark tan skin, highlighted his muscles just right, and Triss found her eyes drifting back down his chest, his abs, and down onto where Madison eased her head back up off his dick. She smiled up at Triss as she set a few kisses on the swollen head of her man's length, earning a thick drop of precum she licked up.\n\nFuck, what did he say? Right, talk, he wanted to talk.\n\n\"About what?\"\n\n\"You've been going out every night with Jen, and from the looks on your faces, it isn't to fuck. What's up?\"\n\nJen slid up beside Triss, close enough to touch shoulder to shoulder. \"It's private.\"\n\n\"Private? We're all witches and warlocks here.\"\n\nTriss snorted, and bumped her hip with Jen as she gestured down at the man currently getting fellatio. \"Yeah, we are, but some things should be private. Catch my drift?\"\n\nHe just smiled in that dumbass, 'I'm too high to care' way, leaned his head back against the wall of stone behind him, and smiled at her. \"What, don't like Madison?\"\n\n\"It's not Madison I'm annoyed with. It's you.\"\n\n\"Well, if you've got a problem, come down here and do something about it.\" The threat was not a threat, from the playfulness in his voice, and the glint in his eyes. It was an invitation to have sex. \"Come on, it's been months since--\"\n\nJen stepped in and sliced the air with her hand. \"Don't even, Othello.\"\n\nRealizing his mistake, he quickly put up his hands in surrender. \"Sorry, sorry. My bad.\" He was going to say it'd been months since Julias died, the dumbass.\n\nJen snorted and walked off to her alcove. Triss watched her for a moment before looking back down at Othello, and his proceeding blowjob. She doubted she'd ever have sex with him; way too dumb a man. But honestly, after everything she'd been through, it felt kinda nice to have someone not tiptoe around her about Julias anymore. The only person who normally didn't give two shits about her dead lover was Jacob, and as infuriating conversations with her boss were, they were also liberating.\n\nIf Othello felt comfortable enough with her to invite her into his bed, again, she could feel comfortable enough to laugh at him, and appreciate the compliment.\n\n\"Can you just... I mean, don't actually start fucking in the middle of the cave, ok?\"\n\n\"No worries, not gonna happen.\" He gave her a lazy salute, and slipped his left hand back into Madison's hair, earning a happy purr from her. A guiding grip eased the woman's head back down, and she had to lean in while lifting her back to create the straight angle needed to get him to the base. But she managed it, mouth opened wide and lips spread around his girth, with a few licks sneaking in there. Othello had evidently trained her into a deepthroating pro.\n\n\"But, I guess I am being a stick in the mud,\" Triss said. \"Can you blame me?\"\n\n\"Nope,\" he said. \"But, we are witches of the Circle, you know. We're not Invictus, or Carthians, or Sanctified, and we're definitely not dragons. We're a small, seriously fucked up family.\"\n\nThat, was damn nice of him to say, and she smiled at him for saying it.\n\n\"You just want a piece of my ass.\"\n\n\"Ha, me? Madison here wants that ass just as much.\" The hand in his ghoul's hair slipped down her neck, down her naked back, and down to her ass. He gave it a slap, and used his right hand to keep Madison from lifting her head when she tried. Her ass rippled, and Triss licked a fang as she watched. Softer than Triss's ass, but that didn't change that it had the perfect shape and--\n\n\"Triss?\" Jen said, head poking out from her alcove. Their shared alcove, really, since Triss and Jen slept together every dawn, these days.\n\n\"Wha? Ah, sorry, just... distracted.\"\n\nChuckling like she'd caught a kid with the cookie jar, Jen stepped out of the alcove and walked over to them. Except now she was naked, and everyone turned to watch the drop-dead gorgeous woman come join them. A woman of average height and tiny waist should not be allowed to have as many curves as Jen did. Her big tits and ass might not have been as big as Madison's, but Jen was quite thin, giving her an almost Barbie doll look. Everyone had to watch when she decided to flaunt it. Though, when Madison tried to lift her head so she could gawk at Jen too, Othello forced her head back down onto him, balls deep. And from the shiver that went through Madison's body, Triss could see the woman really got off on being dominated by her master.\n\nJen stopped beside Triss again, a bit closer to Othello, and gave him a gentle kick in the side. \"Come on, leave Triss alone. She's not like us.\"\n\nOthello grinned as he looked the naked Jen up and down several times. \"Us? Been a while since you've been with your ghouls, Jen. Longer, since you've been with mine.\"\n\nJen shrugged, squatted down beside the man, and smirked at Othello from only a foot away. Being naked in front of him meant nothing to her, except for maybe a fun game. The two of them were fucking bombshells, and they knew it.\n\n\"No, I haven't, because I was...\" Jen looked down, a bit of confusion on her face as she dug through some thoughts. But it faded after a while, hidden behind her poker face. She reached out, and flicked Othello in his big hard chest, causing him to wince and let go of Madison's head, who took the opportunity to lift it and get a breath in. Which gave Jen the opportunity to reach out, and flick the man in his big hard dick.\n\n\"Hey, ow.\" Othello frowned, but it only lasted for a moment before he laughed. They all laughed, a warm and oddly gentle sound. Even Madison laughed, and she leaned in, gave his dick a kiss like she was tending a booboo, before she took his length into her mouth again.\n\n\"Such a slut,\" Jen said between chuckles. \"Typical Daeva. Just wants to be the center of attention.\"\n\nJen stood up, and the two women watched as Othello, still chuckling, leaned his head back against the alcove entrance wall, closed his eyes, and came in his ghoul's mouth. The few shudders of his body were subtle, but the way the underside of his cock flexed with each gush of his cum pouring into his ghoul's throat wasn't. And, despite herself, Triss watched, eyes locked onto the man's cock, or at least, the tiny sliver of it she could see under Madison's lips.\n\nHe really did like being the center of attention. Hell, the man looked perfectly relaxed, content, and downright happy to be watched as Madison drank him. He really jived on the whole 'family with benefits' vibe the Circle liked to put out. And, maybe in another life, Triss would have thrown herself into the same orgy mindset. She loved being watched, and loved being the center of attention, too. Just, maybe not by a crowd of strangers.\n\nJen and Triss both gave Madison tiny finger waves, and went back to their alcove. Jen slipped under the furs, and Triss joined her, though she only took off her pants and boots. Not because she felt uncomfortable being naked with Jen or anything, just a habit. If her merger with the witches continued, maybe she'd end up like Othello, fucking her ghouls out in the open, and then falling asleep out in the open.\n\nOr maybe she'd end up like Jacob, lost in an obsession with the occult. If she had to pick from the two, she'd probably go with the orgy mindset.\n\n\"So, what're you gonna do?\" Jen asked. Without looking for permission, or needing to be asked, Jen pushed her butt into Triss's body, looking to spoon. And Triss spooned with her, because it was how they'd slept for weeks now, since Julias died.\n\n\"About Othello? I mean, I don't really care--\"\n\n\"Not about him.\" Laughing, she turned to face Triss, and nudged their noses together. \"I mean about, you know, what Black Blood asked.\"\n\n\"I... don't know. It sounds like a good deal.\"\n\n\"It sounds like you'll become another Jacob.\"\n\nShe snorted, half between chuckle and groan. \"Yeah, it does, doesn't it? Think BB's told him about the proposal?\"\n\n\"Did... did you just call him BB?\"\n\n\"He's not around. Besides, you heard him.\" She shrugged. \"He likes it when I'm frank with him.\"\n\n\"Still, I don't have the courage to insult a thing like... Black Blood.\"\n\n\"Not an insult. Nick name.\" She shrugged again, rolled Jen back over, and cuddled up against her naked back. \"Will you run off if I... become another Jacob?\"\n\nJen reached behind her and set a hand on Triss's hip. \"No. You know that.\"\n\n\"Yeah. I do.\" Sighing, Triss propped up her head with her right arm and elbow, and her left arm drifted down Jen's body. She had promised her that she'd engage in sex again, and honestly, seeing Othello and Madison casually enjoying themselves sparked something in Beatrice. More than that, it was how casually Othello had decided to sit down in the open, and enjoy a blowjob. It was freedom, total freedom, and a strange sense of camaraderie that allowed Othello to feel comfortable enough to do that.\n\nShe didn't know why that sounded so great, total freedom, a complete lack of borders. Maybe it was a Carthian thing; she used to be one. Maybe it was just her running from her pain, or maybe it was because she loved her friend in a strange way only witches of the Circle would understand. Maybe she was permanently scarred from losing a man she loved, and would never be able to have that sort of relationship again. Or, maybe, she was just sad, and hurting, and these witches were happy to use sex to help her with that.\n\nAn orgy with the witches, heh. Legs locked, with ghouls and thralls piled on or under them, fangs locked onto necks and wrists, dicks and pussies everywhere. She snorted as she thought of herself fucking Othello. Sure, it'd be really hot physically, but the man was too dumb. Aaron was a lot sexier, but so vanilla it was painful. Jacob? That, was a strange thought.\n\nThen, of course, there was Jennifer.\n\nA mewl from Madison, the telltale sign that sex had commenced, broke Beatrice. She could only listen to the mewls and whimpers of Othello's ghoul for so long, before she had to give in.\n\nWith an annoyed sigh, Triss sat up, and pulled off her tank top. Jen sat up with her, eyebrow raised, but when Triss also started removing her underwear, Jen's confused expression slowly replaced with an evil smile.\n\n\"We just fed, and listening to this is driving me nuts, ok?\" Othello was a gorgeous hunk, and his ghoul was a beauty with a great ass, an ass Othello was undoubtedly taking advantage of right now.\n\nJennifer smiled at her, a touch of knowing in her eyes. Yeah, she understood, she got that Triss was finally feeling good enough that she could fuck again, or at least, fuck her again. She also understood that if she talked about it, she was liable to ruin the first time Triss actually felt good enough to want to fuck, in a god damn while.\n\nAlready naked, Jennifer let out a happy sigh, counter to Triss's annoyed one, as she Blushed Life. She moved the furs aside, sat back against the curve of the wall with a fur behind her, spread her legs, and got comfortable. Comfortable for Jennifer meant with right hand between her legs, teasing her clitoris with soft caresses, while her left hand teased along her left breast, caressing her nipple with the same light touch.\n\nRolling her eyes, Triss crawled over to Jennifer. She knew that's what her friend wanted, to have her be the one to engage, and to watch her body as she did so. Damn woman was obsessed with her ass, and crawling like a cat definitely showed off the ass.\n\nTriss crawled onto her, and melted onto her. Jennifer caught her in a hug, and smiled into the following kiss, her eyes closing as their lips met. The Blush told their fake heartbeats to kick up, and with how squashed their chests were, breasts between each other's, they could both feel it.\n\n\"I've been dying to feel that tongue inside me again,\" Jennifer said between kisses.\n\n\"Ah, right, that's what this was about all along. My tongue.\"\n\n\"Not just that.\" Her friend's hands drifted down Triss's back, clutched her ass, and kneaded the meat of her buttocks.\n\nLaughing, Triss inched her knees back along the furs. She stopped only a foot back though, and gazed down at Jennifer's tits. Big, perfect tits that the whole damn city had seen. Well, that didn't mean much anymore, considering Triss had been half naked at the last ball, just like her.\n\nShe set both hands around Jen's breasts, and squeezed. Not hard or anything, not the time for rough sex, but hard enough to feel the softness of them overflow her fingers. And her hard nipples demanded to be touched. Triss leaned in, and while still holding one of the supple tits, ran her long tongue up, down, and around it, using its extra length to coat and tease it.\n\nJennifer groaned, though judging from the look in her eyes, it was mostly in anticipation of having the tongue somewhere else.\n\nTriss kept her mouth open, including the extra teeth on her cheek. She must have looked like a strange monster, half perfectly human, half scary and freaky, with the crocodile cheeks opened up so her long tongue could hang and move freely. It had a slightly pointed tip, thickened out to normal human tongue shape after the first few inches, and then continued for nearly a fucking foot. She'd used it on Jen before, to great effect, and she had a lot of lost time to make up for.\n\nLetting her tongue hang and drag down Jen's shivering body, Triss slowly inched herself back further and further along the blankets, leaving a wet trail down Jen's flat stomach, down her smooth mons, and then onto her swollen clitoris. Instant shivers from Jen, and she moved her hand out of the way to set it on Triss's shoulders. But Triss didn't give it to her yet. She hovered over her friend's pussy, and gently rubbed her tongue up and down her clit. They still had plenty of time before sunrise, no need to rush things.\n\nOnce it was obvious Jen was dripping with anticipation, Triss got down onto her elbows and stomach between Jen's legs, leaned in, and pressed her lips against her friend's cunt. As she did, she slowly pushed her tongue into Jennifer's body, fighting against the boiling hot, soaked insides, and pressing up toward Jen's belly with each inch she managed to push in.\n\n\"Oh! God, finally.\" Jennifer slid a hand through Triss's hair before she set her left hand onto the furs beside her, and right onto her own right breast, content to tease and play with her body, and watch Triss do all the work.\n\nTriss managed a chuckle. Bitch wouldn't be relaxing once Triss got her prepped.\n\nShe set her lip snug to Jen's clitoris, and bathed it in massaging kisses, as she eased another inch of her tongue into Jen's clenching snatch, and then another. And then another. Jen wouldn't be able to see anything more than a perfectly normal looking upper lip beneath a set of snake eyes, kissing her pussy, but she could doubtlessly feel a huge appendage fill her more and more. And Triss made sure to press up against the front wall of Jen's pussy again and again with a curling wave of her powerful tongue.\n\nJen closed her eyes, and came. Her hands reached out and grabbed Triss's shoulders, and held as the pleasure tremors worked through her. Her cunt squeezed, and fresh drops of juices trickled down onto Triss's tongue as her friend quivered. Husky moans filled the alcove, mixing with Madison's, even matching pitch; probably something Jennifer did on purpose.\n\nWhen Jennifer's body calmed down, Triss lowered her jaw, snake style, keeping her upper lip on Jen's clit, but sliding her jaw down and down along her ass, so she could push in more of her tongue. A lot, lot, lot more.\n\n\"Oh fuck!\" Jen pushed herself up onto her elbows, and stared down at Triss, as enough muscle forced its way into her clenching slit and into her quivering depths, to start stretching her inward. With the thickest, heaviest part of her tongue jammed into her friend's pussy, Triss had the leverage to start rolling her tongue really, really hard, forcing the tip against Jen's deepspot hard enough to push it into her by several deep, stretching inches, before the length of the tongue pressed upward in a wave.\n\nHer friend stared down at the small distension that moved along her flat, smooth stomach, showing where Triss's tongue pressed up against it. When she got in close like this, and opened her mouth wide, Triss had the leverage and angle to jam the whole damn thing into Jen's tight little pussy, and Triss was a vampire after all. No reason she couldn't put in a little extra strength into it, to make sure it could bend and twist inside Jen's snatch, no matter how hard she clamped down.\n\nThe Ventrue set one of her hands on her stomach, just below her navel, and groaned as Triss's tongue pushed a shallow bulge of flesh up against it. Her mouth opened, and her groans doubled in volume and pitch. Now, she sounded like an animal in heat, and she squirmed and wriggled as Triss's rolling tongue fought against her cunt's spasms. More wet heat dripped from Triss's tongue, and Jennifer's hands gripped the furs around her, desperate to hold on, as Triss forced her to cum again. And again. Wow, she really was pent up.\n\nTriss spent a few more minutes on Jen, working out those saved up orgasms like popping bubble wrap. It was a pretty awesome sight, too, Jen sitting back relaxing on the furs, legs spread, body trembling, big tits jiggling, and a bulge moving back and forth along her belly where Triss tongue-fucked her. Hypnotic. And when Jen reached out and pushed against Triss's forehead, Triss grabbed her wrists and pinned them against the furs. No way girl, get your comeuppance.\n\nJen stared at the rolling distension working along her belly and reaching her navel, before her eyes finally rolled back and closed as she went limp against the furs and cave wall. More of her juices came out of her, not with the squirting force Triss had a habit of doing, but still, plenty. Beatrice stopped licking, and slowly removed her tongue, letting Jen enjoy her orgasm aftershocks as Triss's tongue lightly rubbed and pressed upward against her g-spot on the retreat.\n\n\"There, that oughta satisfy you for a few minutes, you slut.\" Laughing, Triss lay on the fur beside Jen, and watched her as she recovered.\n\nDespite obviously still being in the throes of post-orgasm tingles, Jen sat up, trembly and wobbly, and crawled out of the alcove. \"Be right back.\"\n\nTriss raised a brow, and scooted across the furs enough so she could peek out from the hanging fur of the alcove. It kept her body hidden, allowing her to watch Jen without Othello seeing her. But Othello was way too busy fucking poor Madison into a coma to notice Triss, or notice when Jen grabbed his lube. She walked past, swaying with each step, and stepped past Triss's fur barrier with an evil grin, before sitting down at Triss's legs.\n\nTriss rolled her eyes, but spread her legs enough for Jen to kneel between them.\n\n\"I really meant to just have a quickie, you know?\" she said.\n\nJen shrugged, leaned down, and planted a slow, gentle kiss on Triss's pierced clit hood. Instant electricity shot out from the sensitive nub beneath it, and Triss shivered as her body screamed its need. She'd denied it for so long, and a belly full of blood made it so fucking easy to light up every arousal signal she had.",
        "\"We can do quick.\" Nodding, Jen continued to kiss her clitoris, trapping it between her lips and burying it in full heavy licks of her tongue. Triss sucked in a breath at the sudden explosion of pleasure, and managed to smile down at her friend as Jen got comfortable on her knees. A moment later, Triss shuddered as Jen pressed wet, lubricated fingers against her ass.\n\nMaybe Jen wanted revenge for what Triss had just done to her. Maybe she wanted to make Triss cum her brains for the pure sexual enjoyment of it. Triss was tempted to tell her to ease off, and keep this little bout of purely physical, meaningless sex to just a quick clit orgasm. But she didn't. She shut up, and let her friend slowly massage her asshole open, working lube into it as she did. She didn't mean for things to get this crazy tonight, but, god damn, she couldn't deny that she wanted it.\n\nJen sank two fingers into her ass to the last knuckle, and pressed them up toward her belly, all the while kissing, licking, and suckling on her clit. The familiar sparks of pleasure spread out from Triss's insides, from where her rings of muscle clenched around Jen's fingers, from where Jen's lips played with her clit, and from where the two fingers kept driving up into her g-spot through her ass. Not even a minute later, Triss's head fell back as she felt the explosion of climax rip through her.\n\nAs her muscles clamped down, Triss reached out to the fur beside her, and pulled it aside just enough to peek out. Yeap, Othello was still fucking Madison. He was sitting, legs spread, back against the curved entrance of his alcove, body facing Beatrice's alcove. Madison sat in his lap, also facing Beatrice, and she had her legs spread even wider, hooking the outside of Othello's. Her body was limp, leaning back onto Othello's chest, and her head rested back against his shoulder, also limp. Her arms dangled at her sides, completely useless.\n\nOthello had Kissed her, and was now fucking her near-comatose body. She was still awake, but barely, and in that hyper sensitive state that left her defenseless against any kind of stimulation. Othello lifted her by the hips, and lowered her in a delicious rhythm, and poor Madison mewled as her body shook, and a tiny squirt of her juices splashed onto the cave's stone floor.\n\nTriss looked back to Jen, and choked on a laugh. Jen was grinning at her, and juices dripped from her chin, and neck.\n\n\"Enjoying their show?\" she said.\n\n\"I... I kinda am, yeah. That dumbass is just so... laid back, and happy, and...\" Triss groaned, and looked down at Jen's hand as it disappeared into Triss's body. \"Fuuuuck... you didn't--\" Jen pushed her fist in, and Triss groaned again as she felt her rings of muscle squeeze around Jen's wrist.\n\nAnd then Jen really did start getting payback. She pushed her fist up toward Triss's belly, and with her other hand, squashed Triss's lower abdomen down against the small distension her fist created along Triss's abs.\n\n\"Go on, keep watching them.\"\n\nTriss managed a weak smile. Damn it, even now, her friend was just trying to help her get over Julias in the only way she knew how: total overwhelming sexual stimulation. Sighing, Triss nudged the furs aside again, just enough to see Othello, and she licked her lips as she watched the man fuck his poor, defenseless ghoul in the ass. Madison had thoroughly soaked the stone between his thighs in her juices, but had stopped cumming for the moment as Othello gave her a break, hugging her with one arm, and fondling her huge tits with the other.\n\nBut after Madison started breathing normally again, Othello grabbed her hips, turned her around, and laid her on her back on the floor. He sat up on his knees, hands still around her hips so her ass followed him up a foot in the air, legs dangling around his hips, and her tits collapsed toward her shoulders with gravity. He fucked her hard then, and Triss watched, hypnotized by the sight. Othello was facing Triss, but his eyes were totally locked onto his ghoul. And from this angle, Triss could see Madison's breasts bouncing around, her thighs rippling with the impact, and splashes of juices as the ghoul soaked Othello. Poor girl was cumming hard, and Othello showed no signs of slowing down, causing her cum to splash more and soak both their pelvises, until it was trickling down her stomach and onto her jiggling tits.\n\nTriss watched, and kept her own moan quiet, as she came again. Jen's deep fisting hit her insides in that super deep way, that 'oh god how's it getting so deep' kinda way that pressed up toward the belly, and made her insides feel like they were going to burst. It was wonderful. It was powerful. It was enough that Triss had to turn and watch as Jen's tits bounced around with how much she was moving her fist inside Triss's body. And a moment later, those tits were drowned in a squirt of Triss's cum, as a crashing wave of pleasure spread up from Triss's insides, and started to roll up and down through her, head to toes.\n\n\"You squirt even harder than Madison,\" Jen said.\n\nBefore Triss could respond, Jen began fisting her again, fist pushing up toward her depths and abs, the other hand spreading flat along her stomach and pressing down against the fist. She pumped her arm back and forth, and Triss looked down to watch as her best friend drove her to another anal orgasm, hard, earning another hard squirt from her that shot out and splashed over Jen's hanging, heavy breasts. And then another, and another. The waves of pleasure were overwhelming, and Triss struggled to keep her eyes open so she could see what Jen was doing to her. It was insanely hot to see her squirts hit Jen in her chest and soak her jiggling tits, no lie. No wonder men were obsessed with it.\n\nWhen Jen was done, Triss let her head fall back as the tingly waves of climax danced up and down her body. She pulled the fur closed completely again, and collapsed, exhausted. The Ventrue had a perfect opportunity to tease her then, but didn't. She slid her hand out of Triss's insides, climbed onto her, and hugged her. Of course the bitch knew her body was literally dripping in Triss's cum, and that Triss was currently way too tingly to push her off, so she squished her fat tits right on top of her. So wet. The girl was supposed to get back into spooning position, not this.\n\nSighing and rolling her eyes, Triss hugged her, nice and tight, and melted into the sensation. Post orgasm always got her feeling clingy, and Jen knew it.\n\n\"Thanks,\" Jen said, her face hidden in Triss's neck. \"Feel better, too?\"\n\n\"Yeah. Yeah, I... I think I do.\"\n\n\"No pressure for more. But, I do think you'd be happier if you let us in.\"\n\n\"Us?\"\n\nJen laughed and shrugged, and set a kiss on Triss's nose. \"The Circle. And I don't mean Jacob's occult stuff, I mean the family. Julias... Julias is gone, but we're not.\" She sighed, hit by something painful, sympathy pain maybe, and sank her head back onto Triss's neck and shoulder. \"It hurts me when you're sad.\"\n\nTriss hugged her, nice and tight. Jen was covering up how sad she was about Julias, and that was fine. Besides, Jen might have had a point about the Circle.\n\n\"I'm not going to become Jacob,\" Triss said. \"Gimme a century and I'm sure I'll be banging everyone in the circle, and every ghoul too. Full orgies and everything, k?\"\n\nJen chuckled, but it had a somber sound to it. She knew Triss was just making jokes to put the pain at bay, and because she knew what Triss was doing with Black Blood and Elen. But, that was fine. This was progress.\n\n\"What about S\u00e1ndor?\"\n\n\"What about him?\" Triss asked. \"Dude is totally not interested.\"\n\n\"He does seem resistant. Maybe...\" Jen slid her body up and down Triss's a few inches, just enough for her wet breasts and stomach to rub into her. She spread her legs too, and nudged her pussy along Triss's leg. Good god this woman, worse than that Invictus bitch Jessy. \"Maybe someone else?\"\n\n\"Ha, who else would want to date a couple witches? One with a crocodile mouth and snake eyes?\"\n\nShe planted her elbows on the furs around her and looked up, thinking. \"Maybe--\"\n\n\"Maybe we should stop trying to replace Julias, yeah? He's dead, and it fucking sucks, and it still kills me. But... but he's gone, and the more you try and replace him, the more it hurts.\"\n\nMaybe that was too harsh. Jen had loved Julias too, in her own strange way, and she was obviously trying to rebuild the trio dynamic she'd helped create. Jen frowned down at her, but it faded as she collapsed onto her side, and rolled to face away from her.\n\nTriss didn't let her get far. She reached out and pulled Jen snug, turning her into the little spoon once again.\n\n\"Then what do I do?\" the Ventrue said.\n\n\"What you're doing is fine. Really. Keep trying to convince me to have sex in more circumstances, I don't mind. And I'm sure sometimes I'll give in.\" Cause, if the amount she'd soaked Jen was any indicator, her buried sex drive had just waiting for an opportunity to let loose.\n\n\"And if I think S\u00e1ndor would help with some sexual healing?\" Jen turned her head enough to look over her shoulder and grin at her.\n\nTriss laughed. \"Well, I mean, I'm pretty sure he's impervious to seduction, but uh, maybe? For a fling, maybe in the future? Just, don't try and force it, you know? Don't try and force someone into that...\" That Julias-shaped hole in her heart and guts.\n\nJen nodded, and pushed her body closer. \"Maybe some day in the future, we could have fun with one of our meals? Those hunters looked pretty tasty, and I know they're still in the city.\"\n\n\"Heh, maybe. But Isabella looked like she was laying claim.\"\n\n\"Isabella is nothing, and I doubt the hunters can be swayed by such pretty, shallow eyes.\"\n\nIsabella was a babe, that was for sure. But like many Daeva, she was only concerned with a hopeless pursuit of artistic expression, to the point it consumed her. Her dedication to her play, her actors and actresses, it was definitely a passionate endeavor, but she and it were slaves to her blood's Daeva obsession curse.\n\n\"Well,\" Triss continued, \"just... don't worry about it for now, ok? I'm happy with the way things went tonight. This was good. I want to do it again.\"\n\nJen reached over her hip, took Triss's hand, and set it on her stomach. \"Even watching Othello fuck Madison?\"\n\n\"Ha, even that. It's good porn. That moron is fucking pretty.\"\n\nThey laughed. It felt good to laugh. It felt good to be happy. It felt good to maybe even be a little excited. Cause maybe, just fucking maybe, if Black Blood and her could work together and find something that worked, she could bring Julias back.\n\nSome more laughter filled the cave, laughter she didn't recognize, and Triss and Jen both looked at each other, confused. They both turned over, turning Jen into the big spoon, and Triss pulled the fur curtain aside enough so they could peek into the cave.\n\nMaybe it was Aaron, finally showing the Circle his girlfriend? That'd be interesting. Maybe--\n\nMaybe it'd be fucking Jacob, and holy shit, that was Samantha. Jacob wore a suit, a regal sort of thing, rich purple that no one else would have been able to pull off, but combined with a black bandage tied nicely around his eyes, he looked like god damn royalty. Even the god damn shoes looked amazing, and utterly fucking dapper.\n\nSamantha wore something a lot sluttier than Triss imagined the young vampire would wear. Well, she was Daeva. Just a matter of time. It was a pretty dress though, white, and while the skirt was long, it had a couple splits that went way way up, showing the hip of the white thong she had underneath. Open back, with nothing but a flimsy strap around the neck to keep the form-fitting chest snug to her tits.\n\nSamantha was a milf. The short-ish wavy brown hair was cute, and her gentle face and expression were fucking adorable. Combined with the slutty dress and tight waist, she definitely gave off milf vibes. Plus, she had the dopey, content gaze of a vampire who'd just gorged themselves. A vampire with a full belly was a horny vampire, if they Blushed Life.\n\nJacob and Samantha stopped by Othello, who'd taken to fucking Madison in a gentle way now. He sat on his ass, back to the cave wall, legs spread, and Madison lay between his thighs on her back, her arms over her head and limp on the cave floor. Her legs were spread around his hips, but they weren't hooked on; they were too limp. Poor girl was still conscious, from the whimpers she made, but Othello had just fed on her, filled his belly up, and could probably fuck her for another hour.\n\n\"Othello, can't you control yourself?\" Jacob said, Samantha's arm hooked in his own. He tried to walk past the dumbass, but Samantha took a second to respond.\n\nTriss grinned as she saw it. Yeap, that was the look. Triss didn't get a good angle on it, being a good hundred feet from her and looking at her from her side, but it was hard to miss when a woman looked at something with 'I want to be fucked like that' eyes.\n\n\"Sorry boss,\" Othello said, but even as he said it, he kept his hands on Madison's hips, and gently pulled her back and forth along the stone, onto his dick. Nice and slow, just enough for the ghoul's big tits to ripple back and forth along her chest. \"Hey, Samantha right? Jack's mom, Prince's childe?\" He looked her up and down, and winked at her. \"Looking good.\"\n\nTriss and Jen both choked on their laughter. It was so bad, cheesy, and dumb, but on a beautiful dumbass like Othello, idiocy and directness worked together to be strangely charming.\n\nIt worked on Samantha, that was for sure, but she managed to recompose herself a bit when Jacob gave Othello a kick in the foot.\n\n\"Don't flirt with my date, you moron.\"\n\n\"Sorry boss.\"\n\nJacob laughed, a hearty, warm thing, and he slowly walked toward the alcove that led to his room. Slowly, because he knew Samantha still had her eyes on Othello. Judging from where her eyes lingered, she was more interested in looking at the man than the woman, but that didn't stop her from licking her lips when Madison shuddered. Despite the ghoul's near comatose state, she mewled, quivered, and though Triss couldn't see from her angle, she probably squirted right onto Othello's pelvis and cock, with how she was still lying on the floor tits up, legs spread wide and pussy pointed right at the man.\n\nSamantha squeaked, and Triss and Jen both struggled to keep from laughing. Well, Othello was gorgeous, and was obviously giving Madison a good time. Considering the fucker only ever fucked the ghoul in the ass, it was a good thing he was at least fucking her gently now. Either way, it was clearly doing something for Samantha.\n\nMaybe she had an anal kink too? Pretty common among vampires, gay and bi dudes included, considering it was clean twenty-four-seven. But from the look in the woman's eye, it wasn't the anal doing it for her, it was the sight of a strong man fucking a woman into toe-curling heaven, over and over, that had caught her attention.\n\nJacob was a bit taller than Othello, and a lot leaner, but Triss had a sneaking suspicion the man was built like a fucking Olympic acrobat under his suit. Not as big or brawny as Othello, but drop dead gorgeous nonetheless, with defined muscle and abs and the works. Combined with his older look, and the salt and pepper hair, he definitely had that unusually sexy older man thing going on. Combined with the suit, he nailed the sexy older very very rich guy look.\n\nSamantha looked Triss's way, and she gasped as she realized Triss and Jen were watching her from behind their dangling fur, only their heads visible. They both laughed, raised a hand, and finger waved at her. Once the shock of being spied on, and having been caught leering at a naked man passed, she managed to return the wave with a very awkward smile.\n\nJacob threw them a grin, and gave Samantha a small tug. \"Ignore those sluts too. That's all anyone ever does here, have sex.\"\n\n\"Sounds, uh, relaxing?\" Samantha said.\n\n\"The world could be collapsing around us, and these kids would celebrate with an orgy.\" Tilting his head back with a small roll as if rolling his hidden eyes, he guided Samantha into his alcove. But before she disappeared down its tunnel entrance, she managed a glance over her shoulder at Triss and Jen again, and a little Daeva grin showed itself.\n\n\"Well, uh, I think he's going to get lucky tonight,\" Jen whispered into her ear.\n\n\"Him? She's the one getting lucky.\"\n\n\"Heh, you think?\"\n\n\"Totally. Samantha has Fifty Shades lover written all over her. If we snuck in there, guaranteed we'd find her naked with her arms tied up while Jacob does a bunch of dirty things to her.\"\n\nJen giggled, kissed her ear, kissed her neck, kissed her lips, and snuggled into her as she got comfortable on the fur. Still a while before sunrise, but it was nice to just hang. No dire emergencies hanging over their head, they could rest, and think. And Triss had to think. Black Blood's proposal was scary, scary as fuck, but he was looking for a witch to teach, and she needed his power.\n\nThirty minutes later, some feminine, labored moans drifted out of Jacob's alcove. Twenty minutes after that, they got loud.\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n~~Antoinette~~\n\nThe next night, come sunset, she prepared a glass of blood, and opened the door to her love's cell. Both Elaine and Daniel were with her, and Antoinette carried the crimson liquid in a wine glass. Jack raised his eyes, and managed a petite smile for her, an expression that told her that it was indeed Jack, and not the curse lurking beneath his skin.\n\n\"Good evening my love,\" she said, and she helped him drink. He guzzled it down, obviously starving, and the glass of blood would suppress his large appetite for an hour or two at most.\n\n\"Good evening,\" he said, voice soft, calm, though his eyes glanced to Elaine twice. Once would have been natural Kindred instinct for analyzing their surroundings. Twice likely meant the boy had a thought on his mind, something that earned a tinge of concern or interest; in this case, it seemed concern.\n\nAntoinette undid his chains. \"How do you feel?\"\n\n\"Healed, but, tired, and... still starving.\"\n\n\"Oui, I can imagine. The wounds you sustained were extreme, and would have rendered any Kindred on the brink of frenzy for healing them through the day.\"\n\n\"I think I'm clear of frenzy, for now. But... yeah, I need a meal.\"\n\n\"Then you shall have it. Ashely and Julee are still recovering from our last tryst, but perhaps one of my prisoners?\"\n\nThe boy shook his head, and rubbed his wrists where the shackles once held him. \"Uh, actually, can we go on a hunt?\"\n\n\"Oh? It has been some time since we have hunted.\" She tapped her chin, entertaining the idea. Jack did not enjoy the reality that she kept prisoners, and her precious pets were already drained. \"Will you discuss your predicament with us, young one? Your... dilemma?\"\n\nWithout hesitation, the boy nodded. \"Yeah. We should talk. You, me... and Elaine.\"\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nElaine and Antoinette dressed up for the outing. It had been ages since she and her friend had legitimately gone hunting in the wild together; Antoinette, as all Daeva, grew far too attached to their ghouls to feed on strange, random kine. But such an idiosyncrasy did not control Ventrue, and Antoinette was delighted to join her friend, and her lover, on the prowl.\n\nThey could have hunted the shadows as Kindred often did, but such methods were simply too blas\u00e9 for elders. For young Kindred learning to navigate their nightly trials, actual hunts were often required. For elders, prey came to them, and asked to be devoured. Sometimes she wondered if it would be better to let Jack perform his hunts alone, instead of being spoiled by her, but now with the power of the curse at his disposal, she was more worried he would cause a ruckus; as he once told her, his new strength lacked control.",
        "Antoinette and Elaine both wore sleeveless, plunging dresses, with all the typical flair of a nightclub dress meant to accent sexuality to the extreme. Antoinette wore black. Elaine wore red. Both went with loose chest straps, to insure that any who looked their way would be hypnotized by the possibility of their skin becoming exposed by roving fabric. Such a simple trick for distracting wandering eyes, timeless, and useful.\n\nAnd, despite the years she and Jack had been together, she still delighted in dressing up for him, and stirring lust and awe in his honest gaze.\n\nThey went to Bloodlust.\n\nElaine smiled with predatory eyes as she looked at the kine that drifted within. Bloodlust did not have half what the usual nightclub of its size would have in activity, though that did not stop dozens of people congregating on the dance floor to grind their half naked bodies together. The smell of sex, of hunger, of drugs and alcohol, it mixed with the pulsing light and beating bass of the music, creating a concoction of stimulus that would drive the most saintly nun to wanton acts of rebellion and sin.\n\n\"This place has not changed,\" Elaine said with a smile as she looked over Jack's head to her. \"Well, the music and fashion has, a bit.\"\n\n\"Ben non. It changes as the kine change, and they have not changed much in the past fifty years.\"\n\n\"True.\"\n\nThey chuckled. Jack looked up at the two of them, perhaps a touch confused from how he raised a brow, and the two women laughed again. The boy likely felt humanity had changed drastically in half a century. It had, but only on the surface.\n\nAs Elaine and Antoinette walked, they made sure to keep Jack between them. It was an interesting game, to see how the kine reacted to the short, handsome man in his expensive suit, with two tall, curvaceous goddesses at his sides. Men looked at him as if he must have hired two very expensive prostitutes that were clearly out of his league, though the more observant ones realized the flaw in that reasoning, and found themselves staring in confusion, and desire. Women realized far more swiftly that Elaine and Antoinette were not prostitutes, and they also stared in confusion, though after a moment, they looked down at Jack with intrigue.\n\nAntoinette would make sure every kine knew that Jack was here with them as her date, and that they were quite sexually compatible. And, that both she and Jack indulged their beautiful friend in their sexual adventures. To show off for her love was an endless delight. To show off for the admiring crowd was a Daeva compulsion she had long ceased trying to suppress.\n\nBut, perhaps such tomfoolery could wait. Jack had looked dreadfully serious in her cell, and the fact she had locked him in a cell for the day had been plenty cause for concern. The matter was serious, and as much as enjoying a date with her lover with Elaine in tow naturally had her seeking outlets for a growing need to play and tease, she had to focus. Such a task was never easy with Elaine, who brought out such joyful memories from the haze of her past.\n\nFocus. The curse. It affected her lover in ways she had not considered, and Jack wished to speak of it after eating, to her and to Elaine. She had been tempted to invite her sheriff, but she was confident she could handle whatever situation arose. Perhaps she was a fool.\n\nThe three started up the stairs, Jack first, and Antoinette noticed the lingering gaze of a young man, a kine who looked at them with envy instead of confusion. Elaine noticed her noticing, noticed the young man, and promptly slipped one of her red straps aside to show the stranger one of her heavy breasts in its entirety. She waited for his jaw to drop before she grinned, redressed, and followed after Jack. Perhaps a meal for later, or a meal in the immediate, if the kine was brave enough to follow them.\n\nHe was not. Understandable. Antoinette and Elaine radiated an aura of power and control even kine could sense. And now, so did Jack.\n\nThe three of them sat in the largest booth, furthest back upon the second floor, and Jack sat between them. Elaine and Antoinette made sure to sit close enough for their thighs to touch the boy's, naturally, and such proximity drew the eye of a few kine that sat upstairs as well. But as Antoinette and her company settled into the darkness of the booth, observing kine returned to their own social groups.\n\nOne young couple were obviously celebrating their marriage, giggling themselves silly with alcohol pouring through their veins. One man entertained two women, and it was obvious at a glance that they were, indeed, prostitutes. They looked well paid, and happy to be there. In another booth, one woman entertained two men, who were obviously fighting for her affection. And in another booth, two women and two men were engaged in a game of truth or dare. It had turned sexual, as such games always did with such players, and one woman was kissing the exposed breasts of the other. From how the men were watching, it seemed they were enjoying the show their girlfriends were putting on for them. And from how the girls' hands were roaming, they were enjoying it as well.\n\nNot her eyes, nor her Kindred senses, found any other presence in Bloodlust. No other Kindred, no Uratha or Begotten, and her network told her the three hunters, still under orders to not leave the city, were currently in one of the apartment buildings.\n\n\"I believe you are free to speak,\" she said.\n\nHe nodded in agreement. \"Yeah. I guess.\" Sighing, he looked between them, and then down at the table, as if an anchor were latched around his head. \"I... I think I need something to drink, before I get into this.\"\n\nElaine nodded, slipped out of the booth, and walked down the stairs. A moment later, she returned with the man she had teased before, and from the neutral, empty look in his eyes, the man had been Dominated. Antoinette would have found a woman for Jack to feast upon, knowing his preference, but it was not a sexual situation, and a male would do fine.\n\nAfter a shuffle, a rather quick feeding from Jack, and then a moment from Elaine to set the unconscious man at the end of the booth, they returned to their original positions. Jack looked considerably better, and he relaxed back into the seat as he looked up.\n\n\"Thank you, Elaine.\"\n\n\"You are most welcome, great grandchilde.\"\n\n\"I almost didn't want a meal. With a full belly, I... I can tell the curse is stronger, too.\"\n\nAntoinette leaned forward and set her elbows upon the table as she looked to her lover. \"You spoke of it as if it were conscious.\"\n\n\"It is conscious.\"\n\nElaine raised a brow, and looked over Jack's head to her again, before she too leaned forward, elbows on the table. \"Explain.\"\n\n\"When... when things get rough and difficult, it talks in my head. You've talked to it before, when it was in control.\"\n\nAntoinette sighed and nodded with the painful memory. \"I had assumed it was something that intoxicated your mind.\"\n\n\"It's not. It's got its own mind. Its own desires.\" He shivered as he leaned forward as well, placing the three of them close, heads within inches of each other over the booth. \"And last night, it almost attacked Damien, just because Damien finished off that azlu monster. It wanted a fight, wanted to win the fight, and Damien got the kill.\"\n\nThat was an absurd reason to become irate. This curse, this voice that plagued her little Ventrue, was not mature or wise. The wise and intelligent were dangerous, but so were the stupid if they had too much power, not unlike an unstable explosive. And Jack was now carrying such an explosive.\n\n\"I do not remember the curse ever speaking to me,\" Elaine said.\n\n\"You wouldn't unless you freed it. Before, it was trying to change me, get its claws into me and alter me. But now that it's free, it's just... in there, in my head, aware.\"\n\nAntoinette shook her head. \"But you have never shown any sign of its presence.\"\n\n\"It's normally sleeping, or shut away or something. Sometimes it... he... says some things, but mostly he's dormant. Normal stuff doesn't awaken him. It's when things get interesting that he comes up.\"\n\nCalling it 'he' did not sit well with Antoinette, but Jack knew the situation better than she.\n\n\"Interesting?\" she said.\n\n\"Just what I said before, when things get tough. He's never said a thing when you and I are together, romantically, or anything like that. But, when I had to beat the hunters, or when fighting that azlu, or when... when Julias died, he awakens.\"\n\n\"It... he takes control?\" Elaine asked.\n\n\"No, he asks for it. Taking control back is... difficult. I guess taking it from me would be difficult for him.\"\n\nAntoinette sighed, slid in closer, and slipped her arm around Jack's shoulders. The first time Jack had broken free of its grasp, it was the sight of his mother, unconscious and dying, that had given him the strength to break free. The second time, Antoinette had had to remind the boy that Athalia was a mother, undoubtedly calling up memories of his own. The third time, Damien had simply staked the boy, and had likely only managed such a feat due to the boy's solo battle with an absurdly strong, arachnid monstrosity.\n\n\"He has a survival instinct,\" he said. \"I... that's not all of it. He has a desire to live.\" And with that, the boy looked at Elaine.\n\n\"He... is aware, of what we are trying to do?\"\n\nHe nodded. \"Yeah. We need to get to work, and now. No more waiting. I want this thing gone. The hunters are dead, so's Angela, so's Jeremiah, so I don't need him anymore. Him or his power.\"\n\nElaine grimaced, a subtle expression that guided her eyes down onto the desk. \"Alright. When would you like to begin?\"\n\n\"Tomorrow night, if you can?\"\n\nElaine nodded, and looked to Antoinette. She nodded as well. The sooner they dealt with this infection, the better for everyone. She did not want this explosive in her city for any longer than it had to be.\n\n\"Did you have plans tonight, my love?\"\n\nJack smiled up at Antoinette, and leaned his head against her shoulder. \"Need to check up on the Begotten. They wanted to talk to S\u00e1ndor, and I want to see how that went.\"\n\n\"Your mother would like to speak with you, little Ventrue. Perhaps tomorrow? I distract her with tasks of study, and of learning to control her Kindred abilities, but she aches to know what trials her son suffers.\"\n\nThat earned several different pitches of moan from the boy, and he lowered his head onto the table. \"I don't know what to tell her about this... this whole fucking problem.\"\n\nAntoinette pat the boy on his back, and kissed his cheek. \"Neither do I.\"\n\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe curse spoke to Jack. An unnerving bit of knowledge, and she was not sure she wished she knew it. She was quite thankful that it remained silent during her romantic time with the boy; if it did not, it would have tainted past, and future encounters. But he insisted that it did, and she believed him.\n\nJack had departed to speak with Azamel and the other Begotten, while Elaine dug through her old, digitally record and photographed records, in search of information that could help the boy. Antoinette would check on their progress later, but for now, she wished to speak with her childe.\n\nSamantha came back from her outing, and Antoinette met her in the lobby of her great tower. The woman was still dressed to kill, and considering she had not come home to the tower before dawn as she was meant to, she had spent the day elsewhere. And, considering who Antoinette had seen her childe speak with on multiple occasions, it was obvious with whom she had spent the night.\n\nThe guilty expression on the soft woman's face sealed it.\n\n\"I trust you enjoyed your night with Jacob?\" she said, with an obvious smile that announced to Samantha the subtext.\n\n\"I... I... how did you know?\"\n\nAntoinette laughed, and motioned for her childe to follow her. She did, eyes downcast once the shock dispersed, replaced with more guilt and shame.\n\n\"You and your son are similar in many ways, my childe. Honest to a fault, betrayed by your green eyes.\" She gestured to the woman's dress, while Antoinette wore a suit. \"And, of course, you walk with shame as if this were Halloween, and you had indulged the advances of a stranger interested in your seductive nurse fa\u00e7ade.\"\n\n\"Oh god, the walk of shame.\" She buried her face in her hands, earning more laughter from Antoinette, who slipped an arm around the woman's shoulders as she guided her.\n\n\"Do not concern yourself with shame, my childe. You are Kindred. Such concerns are for kine.\"\n\n\"I... I guess.\"\n\n\"Though, I was serious with my question, if you would be willing to share.\"\n\n\"Girl talk?\"\n\nAntoinette rolled her eyes, but nodded. \"Oui, though such a demeaning term does not fully describe what I thought we could engage in. I speak to a very few of romantic topics, Samantha Terry, and I thought to include you in that petite circle. You are my childe, after all, not my daughter.\"\n\nTheir shoes clacked along the marble floor as they descended, and Samantha considered her words. Reframing their relationship as sire and childe was important. Much could be shared between Kindred family, that could not be shared between blood family.\n\n\"Perhaps,\" Antoinette continued, \"I was too blunt. My apologies. Elaine's attitude can be contagious. I should have asked, how did your night out with Jacob fair, dear Samantha? It has been ages since I have talked of him with another in your circumstance.\" Not since Minerva.\n\n\"Um, well, we went to see one of Isabella's plays. That was... spicy. Then we went back to his cave, cause I was curious about the Circle of the Crone, and occult stuff.\" Judging from the rising energy in her voice, Samantha likely enjoyed suspense motion pictures that indulged occult fiction. \"And, um... one of his warlocks, uh, Othello, was...\"\n\n\"Having sex with Madison in the open, I assume?\"\n\nSamantha gasped and looked up at her. \"You don't think Jacob asked him to--\"\n\n\"Non, I am sure it was coincidence. Othello routinely engages with his ghoul in public, often with a host of enthralled kine to pleasure them. Visit Bloodlust with enough frequency, and you will doubtlessly find the lovely man and Madison, having anal -- always anal with that man -- sex, while several kine... well, fill her completely.\"\n\nSamantha stared at her, eyes wide, and Antoinette had to nudge her to continue their walk.\n\n\"Um, well... he was having sex with Madison, in the open, like you said. She was really... really enjoying it.\" Samantha shook her head and covered her cheeks with her hands. If she Blushed Life, doubtless she would have exploded. \"So, uh, I'd eaten, at the play, so when Jacob took me back to his room to show me all his cool artifacts, I kinda...\"\n\n\"Threw yourself at him?\"\n\n\"Yes!\" She squeaked and hid her face again. \"And before I knew it, we were naked, and... and... that man looks really, really good naked. I knew he was fit, but... wow.\"\n\nAh, there it was, the sexual fascination in Samantha's eyes that would allow her to grow past her timidness.\n\n\"Kindred usually groom potential childer, and for good reason. Several years of misery and hard work from a kine, for an eternity of perfect physique? A worthy endeavor.\"\n\nSamantha licked her lips, and looked left and right, checking for any who might be listening, before she leaned in closer to Antoinette and whispered. \"And, he... he uh... he knew what kind of things I'd like. I didn't even have to ask. He just... did them to me.\"\n\nAntoinette smiled warmly down at her childe. So naive, the young woman. Jacob had centuries of experience, and could easily read a young vampire's desires, especially one with as open a soul as Samantha. No doubt Samantha would want the man to start gentle, to tease and caress with soft touches, to settle her. But once arousal pumped through her undead veins, Samantha would want a man to take her, grab her, hold her down, and make her do things. The sort of woman who, when in the throes of lust, wanted to be treated like a harlot. She wanted to be bound with hands behind her, and to be forced to give her lover pleasure. She wanted to be spanked, and penetrated with enough force to make her tender. She wanted a man to whisper into her ear that she was a dirty whore, and then have his hand tighten around her throat, as she soaked him in her arousal.\n\nSo terribly sweet and naive. She likely thought her desires taboo and uncommon. Little did she know how common her tastes were.\n\n\"And after we were done,\" she continued, \"we started talking. I talked about... Mary. And... he talked about his life, too.\"\n\nThis, Antoinette had hoped for. Her gambit had succeeded. Now, to see if Jacob was manipulating Samantha, or being honest with her.\n\n\"Please, dear childe, continue.\""
    ],
    "authorname": "NovusAnimus",
    "tags": [
        "suspense",
        "slow",
        "violent",
        "paranormal romance",
        "vampires",
        "werewolves"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/my-little-ventrue-pt-08-ch-07"
}
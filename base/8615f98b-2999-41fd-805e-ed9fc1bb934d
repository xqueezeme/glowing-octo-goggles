{
    "title": "14 Hours Pt. 09",
    "pages": [
        "--Will--\n\nKori has asked that we stop investigating my black out, and I agree and disagree at the same time. I agree because what do I have left to accomplish by pursuing this? All I seem to be doing by dragging this on is hurting my girlfriend with every new shocking revelation that she has to attempt to forgive and forget like she promised she would. A promise that is getting harder to keep. \n\nI disagree because I'm actually having a lot of fun. If I had left it at Kori, I doubt we'd be friends Samantha and I severely doubt I'd ever have a threesome in my life. There is a good chance I wouldn't have met my birth mother again, or have stripped for Kori on stage to an audience of cheering women. Let's not forget the IOU a blowjob from Chloe I can still cash in, but probably won't in the near future. \n\nIs a tube of chapstick I found in my pocket really worth looking into? It is the only unexplained clue left, and the least interesting. I still have seven hours unaccounted for after I left Samantha's, and there is a good chance all of that might just be me sleeping. In the end, I chose to let it go. Kori is enough.\n\n---\n\n--Samantha--\n\nWill is being insufferably nice again. I want those seven hours figured out. We're halfway there, let's just end it. How much worse can it get? \n\nThey're normal and boring now. All they do is go on normal dates to movies and shit. Slim chance she'd be okay with doubling down again, as fun as that was, but now I have to be her supportive friend and respect their boundaries. \n\nGreat, now I sound like the jealous bitch who just got friend zoned. I don't even know who's friend zone I'm in. \n\n--Kori--\n\nWe've been dating for nearly two months now, and this is the first time it's started to feel normal. I have a boyfriend. That is officially part of my life. \n\nSamantha does something that was unexpected as well. I walk passed her during lunch and she says hi and asks me to sit with her cheerleader friends. I assumed our friendship was supposed to be secret, but she didn't go that route. \n\n\"Kori, take a seat,\" Samantha says as I walk passed them.\n\n\"Who's she?\" one of them asks, with a tone that I couldn't identify. \n\n\"Kori, she's been helping me study. She's so badass she even kicked cancers ass,\" Samantha said, her friends all looking at me as I placed my tray on the table. \"Show em.\"\n\nI undo two buttons on my blouse and carefully pull back the collar of my shirt to show them the scar of where my cancer was cut out. \n\n\"Skin cancer?\" One of the them asked and I nod in reply, \"That's a badass scar.\"\n\nI've always been alone at school. Never had any real friends, so I had no expectation for Samantha to be one. I was wrong about her. I've continuously been wrong about her. \n\n\"Where is Will going to college?\" Samantha asks me as I button my blouse back up.\n\n\"I don't know if he's even applied,\" I say and pick up my fork to start eating. \"You get anything back?\"\n\n\"State accepted me. Couldn't quite join you at Harvard.\"\n\n\"Harvard, you got into Harvard!?\" One of her friends exclaimed.\n\n\"She's going pre-med. She's going to cure cancer,\" Samantha says with a smile toward me that I return. \n\nWhat is Will doing? I had almost forgotten to ask him until Samantha brought it up. Today seemed as good a time as any. We meet up after school at my locker as we had been doing for the last week. I see him enter my peripheral as I close my locker.\n\n\"I haven't asked yet,\" I say as I put my bag on my shoulder, \"Where have you applied for college?\"\n\n\"I haven't,\" Will responds, and I feel myself having a small panic attack. Why the hell not? \n\n\"Why?\" I barely even manage to ask. I wanted that to be an angry scream, but I managed to control it to a single word question.\n\n\"Let me show you what I want to do,\" Will says and extends his hand to take mine. I take it and he leads me to the other end of the school and down the stairs in the basement shop classes. I knew he had a shop class, I wasn't sure which one because I never asked. Does that make me a bad girlfriend?\n\nWill takes me into the woodshop that smells like oil and sawdust, which is actually a fairly pleasant aroma. He leads me passed the shop class and into a room that connects to the loading dock and the back of the school. In the corner of this room is a six feet tall project beneath a white sheet that he pulls off, revealing an impressively decorated china cabinet. \n\nIn the center of the bottom were three draws, next to the drawers were two doors that opened with shelved behind them. The top were two doors, each divided into three sheets of glass. The legs were styled in coiled spirals while the top started at the ends and remained flat until they rose and met in the center. It all had a cherry finish and was sealed and protected.\n\n\"This s beautiful. I heard the shop final was something like this. Groups of three or four build something like this,\" I say, tracing my finger along the edge and opening the drawers that slide out smoothly without getting stuck even slightly. \n\n\"Shop final we build a shed. I've been doing this by myself the entire school year. I finished it last week\" Will says and smiles at his work.\n\n\"You did this? This is amazing Will. I'm not kidding, people would buy this,\" I say, walking around and examining it further. I press against it, and it's not off balance or anything. It's a masterpiece. \n\n\"This is what I want to do,\" Will says.\n\n\"You can. There are apprenticeships, trade schools. You'd be incredible.\"\n\n\"Only problem is, my parents,\" Will says and picks up the sheet to cover it again. \"You know my parents have unrealistic expectations for me. Rhode Scholarship, Oxford. You've helped me study, you know that's not me.\"\n\n\"Show them this,\" I say and gesture to the china cabinet, \"This is art Will.\"\n\nWill throws the sheet over the top of the cabinet and tucks his hands into his pockets. We exit through the loading dock and walk around the school to student parking lot. We arrive at my car before I hear his name get called and I turn to see the last person in the world I want to see. \n\n---\n\n--Lili--\n\nThis is not where I wanted to find myself before graduating college. The fact I've obsessively and aggressively pursued a guy because he said no is bad enough. I think what makes it worse is that I know it is bad. The fact he's nearly jail bait is worse.\n\nI cannot even explain why he's so deep under my skin. It is true he is the first guy to leave me. That was a new experience. Do I feel inclined to prove to him leaving me was the worst thing he ever did? Part of me thinks everything I've done since only serves to vindicate his initial decision. Psycho bitch. \n\nTurns out I had a better excuse than even I originally thought. It's been over a month since I pushed his girlfriend and threatened to steal him with something too good to pass up. I guess too important to walk away from counts as well.\n\nI wait for him at his school parking lot. The same high school I graduated from a few years ago. I see them approaching her car from the back of the school. They must have just had sex in the shop class bathrooms. This school hasn't changed a bit. \n\n\"Will,\" I say, them both turning as I approach them.\n\n\"Lili?\" Will asks, Kori walking in front of him.\n\n\"Leave him alone,\" Kori says, and I stop walking.\n\n\"I need to talk to you,\" I say, Kori staring me down with dagger eyes. Do not even pretend you'd win this fight bitch.\n\n\"You heard her, fuck off,\" I hear another voice say and I turn to see a girl walking over to them. I don't recognized her, but she's a lot hotter than Kori that's for damn sure. \n\n\"I come in peace, but I no shit seriously need to talk to you,\" I say, and Will steps around Kori and looks at her.\n\n\"I'll take care of this real quick, I'll meet you later,\" Will says, and I can tell she wants to fight that decision, but sighs and gets into her car with her friend and pulls away, them both eye balling me the entire time they're moving.\n\n\"What is it?\" He asks and I open my purse and pull out the picture that has been killing me for the last few days. I extend it out to him, him taking it and looking at it. It's the ultrasound of our baby.\n\n\"I'm pregnant,\" I say, and he stares at the picture for nearly a full very quiet minute. I let him process it before he finally looks up and hands it back.\n\n\"You know I have a lot of reasons to not believe you,\" He says as I put it back in my purse. \n\n\"I know and I've done that to myself. I'm about nine weeks, and you're the only guy I've slept with in the last twelve. If you want a paternity test, we can do that too, but I promise you the baby is yours.\" \"You thought about an abortion?\" \"We wouldn't be having this conversation if that was an option to me,\" I say while crossing my arms over my chest, \"There is already enough consequence avoidance in our generation, and I don't wish to add to it. I'm owning this fuck up, with or without you. Whether you get on board is up to you.\"\n\nWill is silent, unsure of what to say or do. I'm not holding my breath on whether or not this kid will man up. Adult, yes, but that's only because a law says he is. We act like an eighteen year old is all grown up, yet they still need to raise their hand to ask for permission to go to the bathroom. I can see it on him. He's a scared shitless kid. \n\n\"I'm not looking for a decision now, but if you ignore me, I'll assume that's your answer,\" I say and turn to walk away. I hesitate for moment before I turn around again and hand him the picture of the ultrasound. \"You hold onto it.\"\n\nWill takes the ultrasound and looks at it again before I turn around and walk away without looking back. I sit in my car and start the engine, taking a deep breath and exhaling slowly. As I'm about to put it into drive, I jump from a knock on my window. Will is standing behind it, hunched over to be equal with me. \n\n\"When is your next appointment,\" he asks, and I'm too shocked to answer immediately. I have to ask him to repeat the question just to make sure I heard that right. \n\n\"Next Thursday,\" I say, and he looks at the picture again then back at me.\n\n\"Just tell me where and I'll be there,\" WIll says, and I'm legitimately surprised. He's already manning up. I give him the information and he leaves without another word. "
    ],
    "authorname": "CaffeineFetish",
    "tags": [
        "drama",
        "high school",
        "relationship",
        "redhead",
        "series",
        "love"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/14-hours-pt-09"
}
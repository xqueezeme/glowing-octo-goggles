{
    "title": "The Wood Knot Warrior",
    "pages": [
        "Author's Notes:\n\nThe Wood Know Warrior is my contribution to the .\n\nDipping my toe into the epic world of fantasy lore, desperately hoping not to abuse it too greatly.\n\nAll characters engaging in sexual relationships or activities are 18 years old or older.\n\n********\n\nTales of Leinyere - The Wood Knot Warrior\n\n********\n\nPrologue\n\nIn the lush and enchanting Mistveil Woods on the western coast of Leinyere lived a lovely and young Wood Elf girl. While some might not consider fifty-eight years of age to be young, Wood Elves measured their lives in centuries and took their time with everything, including reaching adulthood.\n\nShe was born in a small, simple coastal village and wasn't particularly curious about the wonders of the world around her, so she remained na\u00efve and immature well into her fifties, which displeased her parents very much.\n\nShe wasn't from a wealthy or socially significant family, but as she reached these young adult years, she blossomed with a rare beauty. It is said, there were no finer or more symmetrical features to be found on any Wood Elf.\n\nWhile their race was deeply in tune with the natural world around them with all its random and chaotic wonder, Wood Elves had a particular desire for order and symmetry when it came to appearance.\n\nThis singular attribute drew many suitors to her, but she quickly became bored of hearing their sweet but empty words.\n\nWorse, she began to believe them.\n\nAs a goddess of love, she decided that only the best deserved her attention. She soon developed a cruel streak and delighted in manipulating those who tried to woo her. She enjoyed seeing just how far her suitors would go before she broke their spirits, making them give up.\n\nTwo of her suitors were made of stronger stuff and were determined to have her. Both were handsome males from families of good standing in their communities, but beyond that, they couldn't have been more different.\n\nThe first candidate was a Wood Elf from their capital city, a brilliant and serious young male of one-hundred-and-thirty years. Vigilant in his studies and incredibly gifted, he appeared destined to be a Master Druid well before his two hundredth year. His ability to control nature's power brought him respect and admiration amongst his peers and community. His skills grew quickly, signifying he would soon be working with the most powerful magics known. Hearing of her ethereal beauty, he traveled to the coast, fell in love with her at first sight, and began his efforts to woo her.\n\nChallenging the Druid for the beauty's eye was a bold and brash young Human. At twenty-eight years of age, he had an almost supernatural athleticism, which allowed him to excel in his efforts to become the greatest warrior ever. There wasn't a weapon he hadn't mastered, and he rarely lost a sparring match. Traveling on one of his family's trading vessels, he spotted the beauty while in port and instantly knew he must have her for his wife.\n\nBoth suitors escalated their efforts to impress her as she, in turn, skillfully played them both against each other.\n\nThey'd dueled a few times but discovered their distinct skill sets were evenly matched. Neither could best the other. Their determination to end the interference of the other grew with their frustration.\n\nWatching their efforts from the sidelines was a Dwarf who'd made the mistake of indicating his interest to the fair Elvish maiden himself. Her humiliating laughter and scornful words burned in his mind, so he'd vowed to get his revenge.\n\nUnbeknownst to the spoiled maiden, she'd spurned not just a brilliant and highly sought-after metal artisan, but secretly, a powerful sorcerer, highly skilled in the arts of dark magic.\n\nOn separate occasions, he whispered into the ears of her two main suitors, offering to provide them with a weapon that would give them a distinct edge over their foe. Both had reached their mental limit with the ongoing stalemate and eagerly expressed their intense interest.\n\nThe Dwarf told them they needed their beloved to give them an object to show her favor. They would then give him the items, and he would infuse her favor into the weapons he would create for them.\n\nA few days later, the Wood Elf returned with a silk scarf. The following day, the Human gave him one of her toe rings.\n\nThe Dwarf used his consummate skills to craft a magnificent sword for the Human Warrior, incorporating the ring into the pommel.\n\nFor the Elf, he added ornate, silk-wrapped metal bands to a powerful Druid staff.\n\nMeeting them separately and secretly, he informed them that the new weapons would ensure victory against their rivals. Both were dazzled by the craftsmanship and beauty of their new possessions, each finding the weight and balance to be perfect. The Dwarf was a master craftsman, after all.\n\nWhat the Dwarf hadn't told them was that he'd placed a curse upon their weapons. Once battle commenced, they'd be compelled to fight to the death. The weapons would absorb and amplify their skills while consuming their life force. Additionally, both weapons would simultaneously absorb the life force of the beautiful but cruel female at twice the rate. She would not survive their dual, and at least one of the suitors was destined to die as well.\n\nThe Druid met the Warrior outside the home of the female they both desperately wanted. He loudly challenged the Human to another duel. This drew the Elvish female outside to watch with a satisfied smile on her lips. That smile quickly faded when the contest began as she felt herself rapidly weakening. She watched in terror as her suitors fought with a ferocity they had never shown before. They snarled and screamed as they launched attack after attack on each other.\n\nTheir weapons picked up the effort to maintain the battle's ferocity as they weakened.\n\nThe Human was down on one knee when it was over, gasping in pain from his terrible lightning burns. Half of his body was paralyzed, and his heart was struggling to keep beating, but he'd won.\n\nHe rested his hands on the pommel of the sword, which he'd driven through the chest of his enemy. Looking toward the steps where his beloved had watched, he froze in shock at the sight of her desiccated husk.\n\nStanding over her, gloating, was the Dwarf.\n\nThe warrior suddenly realized that they'd been tricked. The Dwarf had killed them all.\n\nThe Human knew he was dying, but with the last of his strength, he pulled the sword from the Wood Elf and threw it mightily at the Dwarf, pinning him to the wall of the home like a bug. The warrior died, and the last of his essence was drawn into the sword. The curse was complete for both the Warrior and the Druid.\n\nShocked and outraged that his revenge would lead to his own death, the Dwarf poured his hatred for Humans and Elves into a new curse he placed upon the weapons, damning both races to eternal bloodshed. So powerful was his curse that black flames exploded around him, consuming his body as he screamed in rage, fear, and pain. This dark energy split and sank into the sword and staff.\n\nWhen the bodies were found, accusations were made by the Wood Elves that the Human was responsible for the massacre while the Humans saw his burns and the dried-up husk of the female and claimed the Wood Elf had used forbidden magics to punish the two lovers. The arguments flared until an enraged Human pulled the glorious sword from the wall, and a Wood Elf took up the magnificent staff. Another battle exploded into being.\n\nTwo wise elders were present, a Wood Elf wizard and a retired Human warrior. They quickly recognized the two now wielding the spectacular weapons were fighting far beyond their natural abilities. This made them suspicious.\n\nThe others gathered were getting caught up in the bloodlust and drew their own weapons, so the wizard bathed the area in a stun spell, excluding himself and the old warrior.\n\nThe two seniors carefully separated the men from the dazzling sword and magnificent staff, wrapped the dangerous items in heavy cloth, and hid them away. When the men awoke, they were confused about their earlier outburst. This confirmed for the elders that the men had been affected by a curse.\n\nThey tried to destroy the weapons, but they were somehow protected from burning or blunt force damage. The wizard determined that even being near them was dangerous, so they sealed them in crates and separated them.\n\nThe chest with the sword went on a ship with instructions to sink it at sea. The staff was buried in a secret location deep in the Mistveil Woods.\n\nOne hundred years passed before the sword was discovered during the estate sale of a bankrupt merchant in Portoa. It seems the ship's captain had a change of heart and decided to make a little extra profit by selling the weapon instead of honoring his promise to sink it.\n\nIn the deceased merchant's collection of weapons being auctioned off, the cursed weapon fetched a high price and found a home on the hip of a wealthy timber baron.\n\nThe man already had a grievance with the Wood Elves over their protection of the old-growth forest on a peninsula nearest to Portoa. His confidence boosted by the sword, he started felling the trees on the northern side of the peninsula, and by the time he reached the middle, the Wood Elves were in a full rage. One of their Druids discovered the crate containing the cursed staff entwined in the roots of a tree which had fallen during the night. He led the Wood Elf warriors against the Humans with the Druid staff in his hands. They attacked and almost destroyed Grennesh, only driven off when the Dwarves joined the Humans in protecting their interests. Then the Elvish warriors met the Timber Baron's army on the northern peninsula. The war was vicious and bloody and only ended when wiser heads, aware of the ancient curse, captured the weapons, sealing them away once more and sending them in opposite directions.\n\nThe sword went on a caravan destined for the Windscour Desert on the far side of the world, while the staff went south to be dropped into a crevasse in the far away icy realm.\n\nThree centuries passed without a sign of the cursed weapons. Relations between the Humans and the Mistveil Wood Elves returned to the pre-war levels of distrust and dislike. Day-to-day lives went back to normal as people just... forgot.\n\nBut the burning hate bound to the sword and staff never did.\n\nChapter 1\n\n\"No, I want baby potatoes. Ten large sacks, like these, but filled with baby potatoes,\" Dell insisted.\n\nThe farmer looked up at him in confusion. \"But... you get the same amount of potato out of a large bag of regular potatoes as you would from a large bag of baby ones.\"\n\nA weary voice broke into their argument. \"Husband! You're as dense as an Orc. He needs the baby potatoes as he's making his pot pies for the Wood Knot Inn!\"\n\nThe man spun his head to gape at his wife, then whipped it back to stare at Dell. \"You're the cook who makes the pies?\"\n\nDell nodded as he looked at the farmer's wife.\n\n\"Don't worry. We have sufficient baby potatoes for your order. I'll have him deliver them this morning,\" the woman said with a genuine smile. Dell nodded and paid for his order. She handed him a receipt, and he ignored her wandering eyes.\n\nAs he walked away, his sharp hearing picked up the husband grumbling to his wife. \"How was I to know he's the cook. Look at the size of him! He's a brute! Besides, you know Halflings never amount to anything!\"\n\nDell kept walking, ignoring the slurs. He'd heard them his entire life.\n\nWith his deeply tanned skin, dark, intense eyes, long straight black hair, and the pointed ears poking up out of it, he looked very much like a Wood Elf, if a little taller than most. These features were gifts from his Wood Elf mother. They were also the things that made Humans uncomfortable around him.\n\nHis Human father's gifts were a large frame with broad shoulders to carry the heavy muscles none of the Elven race had. These were the attributes that made the Wood Elves uncomfortable around him. The combination seemed to be a red flag for everyone as few respected Halflings.\n\nAt least, that was his experience.\n\nDell didn't resent his parents for creating him. His father had spoken of his mother with such love in his voice, he couldn't blame him for being with her. Unfortunately, she died during his birth, so Dell never got a chance to meet her and experience the phenomenal amount of love his mother contained.\n\nHe shook the sad thoughts from his head and turned his eyes back to the list of ingredients he was shopping for.\n\nWith the purchase of the baby potatoes, he had all the necessary vegetables. He added the latest receipt to the ones for the sweet peas, carrots, corn, mushrooms, herbs, and spices.\n\nHe scanned the dawn Farmer's market with his eyes and listened to the voices of the merchants, mostly Human farmers, and the few early morning customers haggling for a deal. He'd been one of the first to walk through the gates this morning, targeting the farmers who he knew could get past their prejudice sufficiently to sell to him.\n\nHe'd purchased the mushrooms from a Wood Elf merchant who collected them in areas no Human was welcome. They were the most flavorful, so Dell wanted them for his creations. The Wood Elf wasn't pleased to do business with him, but as fewer customers would approach his stall, he couldn't be so picky. The size of Dell's order eased much of his discomfort.\n\nAs Dell made his way to the exit, he contemplated his last purchase. He was off to see a butcher to order the cubed meat. He had to use a particular shop as the proprietor knew his father, Karter du Krane, and wouldn't cheat him by substituting the selected cuts of meat with something inferior. The Wood Knot Inn had an excellent reputation and was well respected by the Grennesh city officials. No one fucked with that.\n\nThat didn't mean the man running the butcher shop showed Dell any respect. While he loved the food Dell made, he was a rude bastard to deal with.\n\nHe sighed as he set course for the meat-packing district. Only one more shop, then he could get back to his beloved kitchen.\n\nComing around a corner, he almost walked into a small group of Grennesh Guardsmen leaning up against a shop's wall, enjoying a mug of something hot and... he sniffed, alcoholic.\n\n\"What's this?\" one of them blurted boldly as he held out his short staff to block Dell's way.\n\nDell cast a weary look at the faces of the four uniformed Humans and waited.\n\n\"You're bigger than any Wood Elf I've ever seen. You part Orc?\" the clever one said. The others chuckled.\n\n\"Human. My father's Karter du Krane.\"\n\nFour excited expressions suddenly turned sour as they couldn't interfere with a respected business. But the clever one wasn't finished. The guards would be quite justified in defending themselves if he attacked them. \"So, your mother was a Wood Elf whore?\"\n\nDell stiffened slightly but showed no other sign of taking offense.\n\n\"Sorry for interfering with your morning drink. I'm rather busy this morning on inn business, but please visit us tonight to discuss my mother. Then you can truly demonstrate your bravery.\" He gave the four a small smile and stepped around the man's arm to continue on his way.\n\nHe doubted he would see them tonight as their authority ended at the city walls. The Wood Knot Inn was a five-minute ride further down the hill. If they showed up, they'd be civilians and fair game in an honor battle.\n\nDell refrained from fighting whenever possible, but he could handle himself if it came to that.\n\nHe'd spent his childhood running around the dark alleys of Grennesh, and he'd given and taken his fair share of beatings. On the fast track to becoming a delinquent, his father had finally had enough and put him in the inn's kitchen to learn a trade.\n\nIt was the smartest decision the man ever made.\n\nDell shook off the last of his tension and got on with his task.\n\nHe had cooking to do today!\n\nChapter 2\n\nEryllis struggled to keep her temper from fraying as she hunted through the deep woods for precious herbs and roots. She worked for her grandmother with six other young Wood Elf females, preparing potions and learning the craft from the older female.\n\nNormally she found this work to be calming and deeply satisfying, but today, the other ladies were in full gossip mode, and their noise was destroying her peace and serenity.\n\n\"Could you possibly perform your work without engaging your mouths for vapid commentary?\" she snapped.\n\nSix pairs of eyes turned her way, and she felt their hate and loathing. They all believed she got special treatment at the shop because of her familial relationship with the owner, Haleth. That couldn't have been further from the truth. Her grandmother showed absolutely no favoritism, and truth be told, she may have been more critical of her because of the blood they shared.\n\nThe shop they worked for in the village of Ghelli'Talesh wasn't a joyful place for Eryllis. With her grandmother's constant criticism and being treated like a pariah by her coworkers, some mornings, it took every bit of her willpower just to get out of bed.\n\nIt didn't make things easier for her that she had a wicked temper and little control over it or her tongue.\n\nOf course, this was what her grandmother was most critical of.\n\n\"Could you possibly perform your work elsewhere?\" Lyyrall snipped back at her, and her friends snickered gleefully.\n\n\"Rude cow,\" Jorina muttered loudly enough for her to overhear.\n\nThe other workers in the shop were all tall, slim, and lovely in their own ways as the Wood Elf people were. Eryllis was equally slender but a little more than a hand-span taller than the others. She was also strikingly lovely with unique violet eyes. Of course, her grandmother told her that her beauty was marred by the intensity of her gaze, a slightly bold nose, and the downturn of her slightly oversized upper lip. The old female was always ready to criticize the slightest feature of her granddaughter's looks.\n\nIf the woman's comments about her height, nose, or lips weren't enough to shatter her self-confidence, Eryllis also carried a little extra when it came to her breasts. While the others had svelte figures and felt no discomfort when running through the forest, Eryllis was curvy up top and bounced when she ran.\n\nShe'd tried binding them down, but that was too uncomfortable, and the pain made her irritable. So, she wore a special sling under her garments that supported the extra weight. This also lifted her breasts up, displaying more cleavage than most Elves had to show off.\n\nNaturally, her coworkers called her a cow.\n\nShe felt her temper flaring once more, but she took deep breaths to contain it. The forest was not a place for loud words or hostile actions unless you were hunting. Inattention was never a smart idea here.\n\nIt was also not a place to wander around on your own. There was an excellent reason collectors worked as a group.\n\nThe forest gave them so much! Their homes, daily food, and livelihoods came from their environment.\n\nBut the forest could also take. Unwary travelers had been known to disappear. There were strange and dangerous lifeforms hiding in the shadows and mists which consumed the inattentive or even the solitary. They weren't evil, just a necessary balance to weed out the weak.\n\nEryllis glared at the others, knowing full well she couldn't work elsewhere.\n\nThe females giggled and went back to their inane chattering as they carefully looked for the mushrooms, flower buds, and roots they were charged with bringing back. If anything, their voices were just a bit louder and more grating on her nerves. Their favorite topic of the males who pursued them romantically was particularly painful for Eryllis, who had yet to experience so much as a friendly smile from a Wood Elf male.",
        "Then there was the vast gulf between what her coworkers found intellectually stimulating and what she did, which just increased her feelings of isolation. Her voracious mind couldn't focus on trivialities and needed broader stimulus, not found in the company of these lightweights.\n\nShe pushed all that aside and returned her focus to the task at hand. Eryllis' basket was almost full as she was the best collector in the group. This was another cause for their dislike.\n\nEryllis suddenly spotted the telltale orange and brown banding of a rare and valuable tuber as they moved forward. These were delicate and difficult to harvest.\n\n\"I need silence as I've found a Hissing Root,\" she said firmly.\n\nThe others burst into muted curses and sounds of frustration at her outrageous fortune. Several went so far as to assert that she was always given the best path on their hunts. As the ladies' paths were always completely random, there was no merit to the complaints, but that didn't stop the others from agreeing.\n\nShe scowled at them, and they fell silent. The technique for tracing the banded root back to the tuber required utmost concentration and sharp ears. A delicate tap on the side of the root produced an almost silent hiss that moved in the direction of the tuber. The roots could be quite long as they gathered different nutrients back to their source. The longer the path, the larger the reward.\n\nShe moved her ear closer to the orange and brown and tapped it with the flat of her knife. The sound went forward and to the right. She moved her basket and cleared away the leaves and mulch to expose the next bit of the root. She tapped it again and heard it curving off to the right once more.\n\nShe repeated this again, then once more, but the root just continued on.\n\nThe others were now fully engaged with her effort as they'd never seen anyone find such a long root. The tuber at the end was beginning to grow to mammoth proportions in their minds. While some continued to hold a grudge for her luck, none could deny their excitement at the hunt.\n\nEryllis was amazed when the root guided her through a row of trees toward the cliffs above the surf. The ocean below was a drop of probably three times her height, so she was naturally careful not to get too close to the edge. The water was hidden below a low fog, but she could hear it crashing against the rocks. The sound made it more difficult to hear the hiss when she tapped the root, but if she was correct, the tuber was just ahead under the thick wet grasses at the edge.\n\nShe used her knife to clear the grasses and soil away from the root, and her eyes widened when she saw the top of the mammoth tuber. She looked back at the others in excitement and saw them at the treeline, staring back with wide, frightened eyes.\n\nBefore she had time to turn, a thick fog enveloped her. It had slipped up the cliff face to cover the edge. She suddenly realized she could no longer hear the surf, so she couldn't tell which way she was facing.\n\n\"Hessia! Lyyrall! Jorina!\" she called out but heard no reply. \"Garis! Pheo! Ivalis!\" Nothing.\n\nShe looked down at her feet and could no longer see the hole she dug to expose the tuber.\n\nThen she heard it. A low rumble, almost too quiet for ears to pick up. It was coming from ahead of her. She was too frightened to move as she didn't know where the cliff's edge was, but she assumed it wasn't forward as that's where the noise was coming from. When she could get her muscles to work again, she took a cautious step to the side, gingerly pressing her foot down to confirm it was solid ground. Then she took a second step, and it was good too. The noise suddenly got louder, and she quickly stepped sideways, but her foot met no resistance.\n\nShe was falling.\n\nShe grabbed at the edge as she passed, but the grasses slipped through her fingers.\n\nThen pain... darkness... and nothing.\n\n-=-\n\nVoices whispered above her in frightened tones.\n\nEryllis cracked her eyes open, but all she could see was mist. She was still in the fog?\n\n\"Do you think she's dead?\"\n\nThat voice belonged to Jorina. She wanted to respond, but she felt a terrible lethargy, and her head hurt.\n\n\"Do you want to climb all the way down there and search for her body?\"\n\nLyyrall. That was Lyyrall. They couldn't see her?\n\n\"Do you see the size of this Hissing Root tuber? I've never seen one so large!\" Ivalis said in awe.\n\n\"Eryllis' basket is here. We could fill our baskets from hers and head back early,\" Hessia suggested. \"We're going to have to report she was taken by the fog, anyway. We might as well get a head start on that.\"\n\nEryllis opened her mouth to scream at them to rescue her, but a wave of dizziness washed over her.\n\nGaris snorted. \"If we bring this tuber back, Haleth probably won't even notice Eryllis didn't return with us.\"\n\n\"Let's divide the basket up between us,\" Lyyrall said. \"We're going to have to create a sling to carry the tuber back.\"\n\n\"It's too bad Eryllis didn't drop the support she uses for her fat tits before she fell into the ocean,\" Jorina snorted, and the others all laughed.\n\nEryllis ground her teeth together as her rage suddenly exploded. She wanted to kill them all!\n\nAs she bathed in an inferno of hate for these bitches, she felt something answer that desire.\n\n\"Let's get back to the shop. I can't wait to see the look on Haleth's face when we tell her that her darling granddaughter stupidly fell off a cliff into the ocean!\" Lyyrall giggled, starting the others as well. Their voices quickly faded as they rushed away.\n\nEryllis' jaw dropped open as she desperately wanted to scream curses after the fleeing females, but she was too injured to make more than a quiet croak.\n\nThe need to act was building steadily, and once more, she felt something answering. Turning her eyes to the left, she could see a bundle of driftwood wedged between the rocks she'd fallen on. One... one of them seemed to glow faintly.\n\nHer left arm was badly bruised, but she could move it. Unfortunately, she discovered this caused pain in her chest as something inside was broken. Still, she inched her hand closer to the glow, stifling her gasps as sharp pains went through her chest.\n\nFinally, she managed to get a fingertip on the smooth surface. Images of her crushing those snide faces under her foot flashed into her mind, and she gasped as she wrapped her fingers around the polished piece of driftwood. Her anger was spinning out of control, but she was still too injured to do anything about it.\n\n\"mine.\"\n\nShe didn't know who said that, but she felt a presence telling her to simply ask for help. It wanted to help, but she had to instigate.\n\n\"Heal me...\" she gasped, almost silently.\n\nPower rushed down her arm and filled her body. The damage inside her body, every fractured bone, torn ligament, bruise, cut, tear, and scrape suddenly flashed red with heat, and she screamed, the sound echoing throughout the forest.\n\nShe lost consciousness once more.\n\n-=-\n\nFine raindrops fell on Eryllis' cheeks, cooling her skin, and she gasped awake. The memory of her pain sent a shock through her, but it was already fading. She sat up and saw she was sitting on the grasses atop the cliff.\n\nSomehow, she'd climbed up from the rocks below, but she had no memory of how she did it. She looked down to her left, and there was a gorgeous Druid's staff. She recognized the design from the magic users who passed through her village. None of them had carried such a grand-looking staff. She picked it up, admired the workmanship that went into its construction, and ran her fingers along its polished surface. There were silk-wrapped rings of metal at intervals down the shaft.\n\nAs she held it in her grip, she realized she wasn't going to give it up. It was hers!\n\nShe had no formal training in Druid magic, but she wasn't unfamiliar with the principles as she read every book she could get her hands on. She'd also discovered she had a better-than-average aptitude for magic. However, her grandmother refused to teach her anything above the basics needed for her work. She kept her too busy collecting ingredients and preparing potions to spend time on training and honing her neglected skills.\n\nIt felt like the woman was intentionally holding her back from her destiny as one of the greatest mages Leinyere had ever seen!\n\nA rush went through her body as she came to this epiphany. She could see her life plan laid out before her, and she knew it was up to her to make it happen! She just needed to break free from her grandmother's prison first.\n\nShe pushed herself to her feet and smiled at how good she felt physically and mentally, now that it seemed like she was seeing clearly for the first time in her life.\n\nShe needed to go home and pack. It was time to leave the small dead-end village and see the world.\n\nBefore she left, though, those evil bitches needed a lesson in who not to fuck with.\n\nShe smiled as she picked up her now empty basket with her right hand and walked back into the forest to head back home. With the magnificent staff held in her left hand, she felt absolutely no fear of being in the woods alone. It was like the forest was holding its breath to see what she would do!\n\nWhat a heady feeling!\n\n-=-\n\nEryllis made it back to Ghelli'Talesh and the shop without being seen and slipped inside and up to her room unnoticed. She hid the staff in her room as there was no way she would let anyone take it from her.\n\nMaking her way back downstairs, she spotted her grandmother.\n\n\"Where were you? These idiots returned, claiming you'd been eaten by the fog!\" Haleth snapped, then her eyes landed on Eryllis' empty basket. \"And you have nothing to show for your time out gathering? At least each of them returned with full baskets! And--\"\n\n\"An enormous Hissing Root?\" Eryllis offered as her temper simmered.\n\nHaleth stopped and narrowed her eyes at her granddaughter.\n\n\"I filled my basket, and yes, I found the root. I was about to dig it up at the cliff's edge when I was suddenly swallowed up in a fog and slipped over the edge.\" She couldn't tell her what really happened, so a truncated version would have to do. Keep it simple. \"I was stuck,\" she gestured to her torn clothes. \"But I didn't die. They made no effort to find me but divided the spoils instead.\"\n\nHaleth watched the younger woman for a moment as something felt off.\n\n\"And you have proof of these charges?\" Haleth demanded.\n\nEryllis gaped at her grandmother in shock. She didn't believe her? She'd never lied to the woman, and now she was doubting her word?\n\n\"That's what I thought. Go to the forest's edge and bring back what little you can find. You need to control that temper of yours and follow my instructions, or you're of no use to me!\" the grandmother snapped.\n\nIn a daze, her anger threatening to blind her, Eryllis left the shop, hearing the giggles of the bitches as the door closed. She discovered the staff was in her right hand as she began to walk toward the edge of town. So, it wouldn't stay behind. She nodded with a smile and moved on.\n\nOn the far edge of town were some simple accommodations built for visitors who were not welcome within the center of the village. A small roadhouse had been constructed next to the basic cottages to serve the needs of these visitors. As she passed by, she noticed four Human guardsmen sitting outside. They were likely the escort for some important visitor who could enter the village. They'd wait here until their client was ready to head back.\n\nThe four males spotted Eryllis and called out to her, offering to accompany her into the woods to protect her. The ones who'd had too much beer made less polite suggestions.\n\nShe saw their uniforms and her memories flashed back to the Human who raped her long ago. Her mind filled with a flash of red.\n\nWhen she continued on, the four men were on the ground, being violently ill from both ends.\n\nShe walked on in a daze, the adrenaline from her sudden rage giving her the shakes. She calmed down and slipped into the woods, the guardsmen forgotten.\n\nEryllis scowled at her basket's empty state. She felt the staff tugging her, so she followed the pull and came across a hidden cluster of rare mushrooms. Smiling with glee, she used her little hand spade to dig up the treasures and filled her basket.\n\nShe took a different route home and collected some rare flowers to decorate the carrier. Slipping back inside the shop's back door, she hid the staff once more in her room, then brought the bounty to Haleth, dropping it on her desk.\n\nThe woman stared at the rare flowers and mushrooms in surprise.\n\n\"Here's proof of who's the better collector,\" Eryllis said, then gave the other workers a wintry smile. She then returned to her room.\n\nShe examined the staff once more and felt strong with it in her hands. She smiled as she suddenly recalled how she punished the soldiers who showed her such disrespect tonight.\n\nJust as quickly, her mind filled with the face of the man who raped her. Once she recovered from her shock, she smiled once more as she realized she now had the means to get her revenge against him.\n\nThe night it happened, she'd been so horrified that she'd fled all the way home in the dark, sticking to the road for the limited safety it gave travelers, but the dark woods surrounding her offered no terrors greater than what filled her mind. She collapsed from exhaustion the next morning and slept for hours on the side of the road. When she woke, she continued on until she finally reached home. She hid in her room for months. Her grandmother couldn't get her to speak of what caused this, but her rage exploded again and again during those nights. Finally, her grandmother said enough and sent her away to receive mental care. The treatment she received only calmed her nightmares. The rage persisted.\n\nShe imagined him now, years later, laughing with his friends, enjoying the benefits of being one of the city guardsmen, and seeking other victims.\n\nNo more. In the morning, she would begin her journey to Grennesh to deal with him once and for all.\n\nChapter 3\n\nPerris la Blayne rode his mount through the tall grasses of the plains with his eyes always on his final destination.\n\nFor months he'd ridden west, toward the mountains of his home, a place he was no longer welcome.\n\nWelcome or not, he was headed there to finish some long-unsettled business. The man who stole his home and future from him was going to pay this debt with his life.\n\nPerris had once been a promising young officer in the Grennesh Guardsmen, fast-tracking to be the next Captain of the Guard. He was well liked by his peers and admired by the ladies. He had more than his share of companions to keep his bed warm at night.\n\nIt didn't hurt that he was tall, dark, and handsome, with a strong jaw, a dazzling smile, and piercing blue eyes. He exercised his muscles diligently to be the strongest fighter and had the body to back up that claim. Training hard with the best swordsmen he could find, his skills were honed until he was one of, if not the most skilled swordsman in the guard.\n\nAs one of Grennesh's elite guardsmen, they had certain unspoken privileges. When they blew off a little steam after a long day, the on-duty guards always looked the other way if they pushed the boundaries of the law, as one day, it might be them.\n\nPerris had been celebrating his birthday, of all things, the day his privileges should have guaranteed him free rein to bust loose.\n\nHe'd become jaded with the city's offering of bed warmers and was hungry for something new.\n\nAs he and two of his best mates were leaving a tavern, they came across a female Wood Elf with surprisingly full breasts.\n\nPerris had never had one of the tall, dark-skinned beauties, so he decided he wanted this one as his birthday gift to himself.\n\nThey pulled her into an alley, and Perris had only begun to enjoy himself when he was blindsided by someone with one hell of a right cross. He struck his head as he fell, so he was out of the fight. His mates took off, leaving him to take the fall on his own.\n\nAgain, normally such indiscretions would have been swept under the rug, but the man who came to the rescue of the Wood Elf had connections and insisted on a proper trial for the transgression against a member of the Wood Elf community. His little bit of fun suddenly became a huge political nightmare, and the city and city guard leaders had no choice but to charge him with rape and a number of other lesser crimes. It was a forgone conclusion that he would be found guilty, and it was only his stellar record and the remaining friends he had on the inside that reduced his sentence from thirty years imprisonment to losing his commission and being exiled.\n\nThe hate he felt in his heart for that self-righteous bastard could not be denied. He vowed on the day he rode from the city gates that he would be back to get his vengeance.\n\nIn the years he'd been away, he sought out trainers in new fighting techniques to improve his skills even further. He'd also honed his sword-fighting skills by apprenticing with several sword masters until he became one of the deadliest men to hold a blade.\n\nTo earn his keep, he worked as a mercenary, and his latest contract was working security for a caravan that skirted the Windscour Desert. He personally dispatched over a dozen bandits on that journey, and the caravan master offered him a permanent position with them.\n\nBut Perris had a different destiny in mind.\n\nAs they returned to their home base, they came across a nomadic tribe who offered to trade with them. The patriarch and chief of the nomads had once been a big man, but time and the fierce conditions of living in the desert had slowly drained his strength. His piercing pale blue gaze told Perris that the man had seen things in his life no one should carry in their memories.\n\nPerris noted the old one wore a unique scabbard comprised of intricately woven leather strips on his hip. The sword's pommel caught his eye, and when Perris asked him about it, the old man's eyes locked on his for long seconds before he answered. He claimed the sword was cursed. He'd discovered it buried in the sands deep in the desert when he was just a youth. It had been guarded by a dozen dead mercenaries. He said it brought grief to those trapped by its call.\n\nWhile Perris' father had told him the story of a cursed but undefeatable blade that had been cast far into the desert, he'd thought it was just a myth. Using every bit of his charm at his disposal, he was finally able to convince the old man to draw the sword. Once he saw the exquisite craftsmanship, Perris was convinced he was looking at the genuine article. He knew this weapon was the key to taking his life back. With it in his hand, no one could stand in his way.\n\nHe offered the chief a small fortune for the weapon, but the old man slid the blade back into its scabbard with a fierce shake of his head. He said he would not sell it. As he walked away, he said he would protect the world from the curse for as long as he still had breath in his body.\n\nThe man had honor.\n\nUnfortunately for the chief, Perris did not.\n\nHe would not be denied his grand future. He pulled his own sword and charged at the man. He saw a look of shock and dismay cross the man's face when he discovered he couldn't pull the cursed blade free from its sheath. Perris' sword caught the man across his throat, and he watched the chief fall.\n\nStanding over the dying man, he saw fear, sadness, then finally pity in those pale eyes before life left them. He took a brief moment to wonder what that meant.\n\nHearing the thump of running feet, Perris grabbed the grip of the cursed blade, and it smoothly slipped free of its scabbard. The old man's two sons burst into the tent and drew their swords, but Perris quickly killed them both, wielding two swords at once. The two younger nomads bled out on the carpeted floor as he stared in amazement at his new weapon. He'd never dual-wielded in his life, yet it felt completely natural to him. His father's stories about the blade had failed to mention how good it felt to use it.",
        "Taking the scabbard from the old man's corpse, he rushed back to the caravan, gathered his belongings, and rode off into the darkness. He set his course for home and never looked back.\n\nTonight, he would return to Grennesh and make them all pay. From the city officials who turned their back on him and hung him out to dry, his commanding officers who promised to protect him then offered him up as a sacrifice, right down to the man who forced the court to make an example of him. He kept one hand on the hilt of the sword and felt his confidence swell.\n\nThey wouldn't know what hit them, and they'd be sorry for betraying him.\n\nHe smirked. When he was done with them, maybe he'd look up that dark-skinned bitch and finish what he'd started.\n\nShe was his birthday present, after all.\n\nChapter 4\n\nDell sighed happily.\n\nHe'd spent the entire day preparing ingredients for the pies he'd begin making tomorrow. The kitchen staff were all tired but satisfied as they knew they'd done good work today, and the next few days were going to be busy but also fulfilling. They'd all be earning bonuses if this batch of pies turned out to be as popular as the previous times. That was almost guaranteed. They'd also get to take home some pies for their families.\n\nWhile they'd worked on prepping the veggies, Maggie kept them entertained with her stories, and the kitchen had been filled with laughter. They were quieter when they worked on their regular duties preparing and serving the inn's customers their daily meals or breakfast and dinner.\n\nBetween the two regular meal times, Dell worked side by side with the ladies in the kitchen, ensuring all the vegetables were worthy of being added to his pies. He'd prepared the cubed meat and had them soaking in his secret marinade. No one had been able to get him to give up his recipe yet.\n\nThe ingredients were all carefully stored in the large cold cellar in the Inn's basement. A preserving spell on the room ensured they would remain fresh until he was ready to use them. The magic kept pests from the room as well.\n\nDell finished carrying the last bowls of cut vegetables downstairs and sealed the room. He stretched his back muscles in relief as it had been a long day. He listened to the shuffle of feet above on the floorboards as the last customers made their way to the exit.\n\nHe heard a woman scream and a man shout soon after, followed by the crash of something heavy striking the floor.\n\n\"Shit!\" Dell raced for the steps.\n\nWhen he arrived in the main bar area, he could see several older customers backing away from a large man facing off against them with his sword drawn. Dell stepped into the room, and relief flashed across the faces of the old men. He ignored them as he got closer to the swordsman. There was something familiar about him.\n\nHe was large, with long black hair worn loose and a thick black beard. When the man looked into his eyes, recognition struck for Dell. Piercing blue eyes and a wide white smile. It was the rapist! But he'd been exiled!\n\n\"We meet again, Halfling. You seem... bigger than before. Do you freaks ever stop growing?\" Perris chuckled.\n\n\"Why did you return? You know you're not welcome here anymore. No one wants a rapist in their community. The guardsmen have orders to execute you if you show your ugly face.\"\n\nPerris snorted. \"Ugly? Says the freakish mixed breed.\" When he didn't get a rise out of Dell, he got a crafty look in his eye. \"If you must know, I came back to deal with some unfinished business.\" He moved slightly to the left, and Dell could see two people on the floor against the wall next to the kitchen door.\n\nMaggie was lying back in the arms of his father, a red stain growing on the front of her dress. She was dying. Dell's eyes went to Karter and saw his father was panting and wincing in pain. His side was red with his blood. He'd been stabbed too.\n\n\"No... Dell... run...\" his father gasped out.\n\n\"Shut up, old man,\" Perris taunted with a grin as his eyes never left Dell's face. \"I'll finish you off as soon as I carve some of this brute's height away. Just a head's worth should do it.\"\n\nDell couldn't hear Perris anymore over the thunder of his blood. He could only see the limp body of the bubbly kitchen maid, the red splotch on her stomach, the pale, sweaty face of his father, and the desperate fear in his eyes.\n\nThis piece of shit rapist threatened to take away the only parent Dell had left. His brain stopped forming rational thoughts as the rage he fought against every day erupted.\n\n\"RRRRRRRRAAAAAAAAAAHHHHHHHHHHH!!!\" Dell roared at Perris, and everyone leaned away, fear shooting through their limbs, a primal reaction to discovering they were suddenly facing an alpha predator.\n\nPerris' smile quickly faded as he felt his confidence slipping away. He glanced at the sword, but he could no longer feel its support. He had to act before he lost his nerve entirely. His answering battle cry wobbled, but he surged forward with a mighty swing to lop the head from the beast before him.\n\nDell surged forward and caught Perris by surprise as he had twice the man's speed. He seized the swordsman's weapon hand as his other hand grabbed Perris' free hand. Then he suddenly squeezed both with crushing force.\n\nBones splintered as Perris screamed in agony, and Dell's grip tightened further, grinding the splinters into shards. Then Dell quickly twisted his grip, shattering the man's wrists, too.\n\nBut crippling him wasn't enough. The man needed to die.\n\n-=-\n\nPerris felt his shock washing over him, numbing his mind and slowing his thoughts. But it couldn't diminish his outrage and disbelief.\n\nThis couldn't be happening! It was impossible! All his training and all those painful days before so many highly skilled teachers, honing himself to be the deadliest killer. Outside of those classrooms, he'd proven time after time, no one could best him in combat.\n\nHe'd fought Orcs, Elves, Dwarves, and so many Humans and knew the strengths and weaknesses of each race. He knew how to counter all of their abilities, and none had been able to beat him.\n\nA Halfling. Being defeated by a creature so low in the pecking order made his humiliation complete.\n\nWhen Dell released his hands, the sword fell to the floor, and Perris dropped to his knees, fighting the agony to remain conscious. The brute grabbed him by the throat with one hand and lifted him into the air like he was nothing. Perris stared into rage-filled black eyes and saw his death there as the big hand slowly tightened, squeezing his throat closed. He struck at the monster with his crippled hands, but that just sent more agony through him, cutting his remaining strength away.\n\nWhat a disappointing way to die.\n\n-=-\n\n\"NO!\"\n\nThe deep bellow broke through Dell's fugue, and he glanced over at the pasty face of his father. He saw the stern expression in his eyes. His strength was returning. A good sign.\n\nSnarling, Dell threw Perris across the room, where he bounced off a tabletop to crash to the floor beyond it limply.\n\nSucking in deep breaths to fight back the inferno raging inside him, Dell glanced down and saw the sword. He shook his head as he heard something, then bent down to pick it up. The moment he stood and looked at the intricate design, a bright flash exploded outwards from the weapon.\n\n\"MINE!\"\n\nThe word echoed through Dell's mind, but he couldn't tell where it had come from. He felt his rage building once more, and it threatened to overwhelm him. He opened his eyes and saw the tables nearest to him had been blown over. The few remaining customers were staring at him in fear. He grit his teeth to hold back another roar, but he was losing control. He looked over at his father and saw the man watching him, worry now on his face. He tipped his chin toward the door.\n\nHe had to protect him. \"GET A HEALER!\" he snarled at the three old men nearest to the door, and they jumped to their feet and rushed outside. He closed his eyes, but he felt his muscles vibrating with the need to do something. The sword was vibrating in sympathy as if it wanted action as well.\n\nFinally, his father's gesture sank in, and he ran straight out the front door and into the street. But he didn't turn toward Grennesh. He felt a tug and turned the other way.\n\nDown the hillside he went, his feet pounding against the soft track as the inn disappeared behind him. The light was growing dim as night set in, but his Wood Elf vision had no issues with running at night.\n\nWhen he finally reached the main trade route, he felt the tug once more, and it felt like it was coming from the sword! It pulled him to the right to take the road toward the Mistveil Woods.\n\nDell's father called him many things, but one thing that came up frequently was stubborn. He wasn't going to let the sword push him into visiting a place where everyone despised him for looking different.\n\nHis rage surged once more, pushing him to go right, but he used that energy to fight back and turned left instead. He needed to drain his anger of its power, so he continued running along the dark trade route, fighting the urge to turn around.\n\nHe lost track of how long he'd been running when he came around a bend in the road and faced a battle between five Orc warriors. Torches were scattered on the ground, most likely dropped by those who were now fighting.\n\nAfter a quick glance, he saw four males attacking one female who seemed to be holding her own, but she was fighting desperately.\n\nThe Orc closest to Dell turned, saw the sword, and immediately launched an attack against him. Dell's rage flared again, grateful to have a target, and he waded in with a mighty roar. This caused a second Orc to turn toward him.\n\nDell had never held a sword before, much less fought with one, but he felt his body flowing into the pattern of battle. Ducking beneath the first warrior's ax swing, he swept his sword arm upward, opening the Orc's torso from groin to neck. The second warrior was blocked by the falling body of the first, so Dell drove his fist into the male's face, taking him completely off his feet, knocking him out.\n\nBy now, the remaining Orcs were aware of him. A third moved away from the female to engage with him. The hulking brute wielded his club with great skill and managed a few glancing blows.\n\nDell's fury surged, and he felt the sword take control once more.\n\nHe swept the sword in a vicious, lightning-fast figure eight, cleanly severing the warrior's arms. As the big Orc stared at him in horror, Dell spun and took the Orc's head clean off his body.\n\nThe female Orc Warrior cleaved in two the chest of her last opponent with her battle-ax, then threw a small hand ax into the forehead of the Orc who'd woken and was sneaking up on Dell.\n\nBreathing hard, Dell slammed the sword point into the chest of his beheaded opponent's body and roared to release his remaining anger. The female Orc watched him nervously as he gasped for breath while keeping an eye on her. When she made no move to attack him, he did his breathing exercises and finally managed to push the last of the bloodlust into the back of his mind.\n\n\"Why... why were... they attacking you?\" he finally managed to gasp out.\n\nShe snorted as she grinned at him. \"I was hunting them, but they set a trap for me. There used to be eight of them, but I picked them off one by one, driving them before me. They knew I'd eventually kill them all, so they ambushed me, forcing me to face the remaining four together.\"\n\nDell watched her cautiously as she sounded dangerous.\n\nShe nodded, then her voice softened, and he heard her pain. \"They killed my family, so I vowed to kill them all.\" She pointed to the one she killed with her battle-ax and smiled. \"He was their leader, so I'm grateful you didn't kill him. His life was mine to take. I would have welcomed killing the one you cut into pieces, but I'm grateful for your help.\"\n\nShe tilted her head as she took in his strange garb. She seemed confused by what he was wearing, and he glanced down at his blood-splattered apron. He supposed it wasn't typical warrior armor.\n\n\"I am Kharza. Last of my village whose name is now lost in the wind.\"\n\n\"I'm Dell, and I'm the cook from the Wood Knot Inn, just outside Grennesh.\n\nShe blinked in surprise and laughed. \"That is a good joke!\" she said as she continued to chuckle.\n\nHe wearily pulled the blade from the corpse and found himself skillfully spinning it to flick away the blood. A leather-wrapped scabbard suddenly appeared on his hip, hanging from a belt that also hadn't been there a moment before. His hands continued to move on their own to slide the blade home as he stared down at it in surprise.\n\nKharza scowled at him. \"You are a sorcerer as well?\" She had no love for those who bent the laws of nature to their own will.\n\n\"I'm not! I'm just a cook! I know nothing about magic, and until tonight I'd never held a sword before in my life!\" he insisted.\n\n\"Why do you lie? I have eyes in my head to see the things you do!\" she growled.\n\nDell shook his head in frustration. \"Tonight, a man attacked my family at the Inn. He had this sword, but I took it from him. There was a... big explosion of light, and the next thing I knew, I could feel the sword trying to get control over me. I left before I hurt anyone... else. I could feel the sword pushing me to fight, so I pushed back. Then I stumbled into your battle. The sword wanted blood.\"\n\nKharza was quiet for a moment as she watched his face in the flickering firelight, deciding if he was telling the truth. \"Were the mighty battle cries from the sword as well?\"\n\nHe frowned. \"No. I... I have a temper issue. I need to keep tight control on it, or I might hurt someone.\"\n\nKharza suddenly laughed and gestured to the corpses. \"I'm grateful you didn't control it tonight.\" With another smile, she seemed to decide he wasn't a risk, so she turned away.\n\nShe began to collect items from the fallen Orcs and smiled to herself as she saw how much coin she now had. She looked up at Dell. \"You may have half.\"\n\n\"No. You keep it. I don't want it,\" he said, unsettled by the death before him. Deaths he'd caused. He'd beaten men with his fists and knocked many of them unconscious, but this was the first time he'd actually killed someone. He felt a little ill.\n\nHe turned to look back the way he'd come but realized he was too tired to run home tonight. His father seemed like he was going to be okay. He just hoped they got the healer to the inn in time to save Maggie.\n\nKharza smiled to herself as she found the necklace she made for her daughter in the pocket of the Orc she'd killed with her hand ax. She collected the weapon as well.\n\nOnce she had everything she wanted, she looked at Dell, who was making no effort to collect anything but seemed to be fussing with the sword and belt.\n\nDell was becoming very frustrated as every time he thought of offering the sword to this female Orc warrior, he felt resistance from the weapon to the point where it interfered with his hands, preventing him from undoing the belt.\n\nKharza moved around Dell to face him. \"What is wrong?\n\nHe glanced up at her with a frown. \"I'm trying to give you the sword, but it won't let me.\"\n\nThe Orc's eyebrows rose. \"I don't want a sword that doesn't obey me!\"\n\n\"Well, I don't want a sword at all! I'm a cook! You're a warrior, aren't you?\" he insisted.\n\nShe nodded. \"But I still don't want the sword. There must be magic in it if it has a mind of its own. You need to speak to someone who knows magic.\" She watched Dell, who took a deep breath, then nodded in resignation. She gave him a kind smile. \"I can offer you a meal and a dry place to sleep tonight in thanks for coming to my aid.\"\n\nDell looked at the female and nodded with a weary smile. \"Thank you. That would be welcome.\" He finally noticed that all she was wearing was a wide strip of leather across her breasts and a small skirt that barely reached the middle of her thick, muscular thighs. He felt his face warm up.\n\nKharza gathered some of the fallen torches and handed one to Dell. \"It's this way,\" she said as she led him onto a side trail that headed upward. They left the corpses for the scavengers who'd pick their bones clean by morning.\n\nTwenty minutes of walking through narrow forest paths brought them to her campsite.\n\nComfortable that she no longer had to hide her presence, she made a fire and showed Dell the two birds she'd snared.\n\n\"I can cook these if you'd like,\" he offered. \"It's what I do.\"\n\nKharza grinned at him. \"Let's see what skills you have, Master Warrior Cook.\"\n\nHe gave her a weary look, then nodded. \"Make the fire twice as big. I need to collect some ingredients.\"\n\nDell walked back into the woods, foraged up some mushrooms, a few wild potatoes, and collected herbs. He also picked some broad leaves and short sections of tough vines. He returned to the campsite, calling out before entering the clearing to let her know it was him.\n\nHer campsite was situated a short distance from a good-sized stream, so he washed his collected items before returning to settle down next to the fire. He prepared the birds with his belt knife over the broad leaves. He mixed in the mushrooms, potatoes, and herb, then wrapped them in the leaves, bound by tough strips he pulled from the vines. He buried these next to the fire, then moved the burning wood over top. Adding more wood to the blaze, he stepped back to smile at her. \"It won't take too long.\"\n\nWith the bird blood on his hands, Orc blood on his clothes, and sweat on his body from all the running he'd done, he realized he stank. He went back to the stream and saw it was deep enough to immerse himself. Removing the sword for the purpose of getting clean seemed to be acceptable, so he set it down on the grass and undid the apron he'd worn all day in the kitchen. This went on top of the sword and scabbard. Next, he quickly undressed, and as he was intensely aware of Kharza behind him, he remained facing away. He used sand to scrub away the worst of the blood stains and sweat, dunked himself repeatedly, and soon he felt refreshed. Then he washed the blood spots and streaks from the apron and his clothes, too.\n\nHearing footsteps, he glanced back to see Kharza approaching. She was now naked as well and looked at him with an appreciative smile on her lips.\n\n\"You are unlike any Wood Elf I've ever seen, though I haven't seen many,\" she remarked frankly.\n\nDell nodded self-consciously, trying to keep his eyes from leaving hers. \"I'm only half Wood Elf, as my father is Human.\"\n\n\"Hmmph. Should we have sex now or after the meal?\"\n\nHis jaw dropped as he stood to face her in surprise. \"We're going to have sex?\"\n\nKharza gave him a puzzled look. \"You were the one who undressed and washed in plain sight of me. It's my understanding that this is typical of non-Orc foreplay.\"\n\nShe took a good look at his body. \"You are not ugly, and you have a good-sized cock. Sex should be good, and I'm interested.\"\n\nDell was stunned and took a second to respond. \"I'm not sure you'd enjoy sex with me.\"\n\nShe looked into his eyes. \"Do you not want to have sex because you think I am ugly?\"\n\nDell immediately shook his head as his eyes finally traveled over her body. It was true that she was powerfully muscled, scarred, and green-skinned at that, but she had large, firm breasts and a killer ass. Her features were also pleasing once he got past the tusks jutting up from her lower jaw. Her eyes were especially lovely, and her lips were--he felt himself stiffening.\n\nHer smile returned as she saw this sign of his attraction to her.\n\nHe sighed as he knew she deserved the truth. \"I've never had sex before. I'm not going to be very good at it.\"\n\nShe looked at him in surprise, then grinned. \"I can decide that for myself.\" She pushed him down on the grass and straddled his body, pinning his cock between them with her pussy. He gasped as that felt very good. She smiled as she stretched out over him, and he moaned a little as her breasts were squeezed against his chest. Then she kissed him aggressively, which was a novel experience, too.",
        "\"Put your hands on my body, and don't be gentle,\" she told him. He grabbed her hips and ground her against his cock in circles.\n\nIt was her turn to moan as she enjoyed the feel of his powerful hands on her. It reminded her of her mate. He slid them down to her ass, and she liked that even more. She was impatient to feel him inside her, but she knew his first time would be too quick for her to reach her peak. She sat up, surprising him, then she moved down his legs until her face was over his cock. She took him into her mouth, and he cried out in surprise, then bliss as she sucked and licked him aggressively. As she suspected, he came quickly. Smiling, she swallowed what he gave and then looked at him with a grin.\n\n\"That was... incredible! But it couldn't have been as good for you,\" he said with concern.\n\nShe chuckled. \"We just needed to get past your first one, so the second will take longer.\" He blinked at her as he wasn't expecting there to be a second. She laughed at his expression. \"Don't worry, you'll be hard again soon.\"\n\nDell could see she was still excited, and he wanted to do something for her. \"May I do the same for you?\" he asked. It was her turn to look surprised as no one had ever done that for her. Dell took her pleased smile and silence for acceptance as he rolled her over onto her back and moved his face down to her pussy. He began with kissing her inner thighs, and she made surprisingly sweet moan sounds. He roughly stroked his tongue over her pussy, and she jolted with the intensity. He looked up at her, and she grinned at him, so he did it again, then his tongue dipped deep inside. She grabbed his head to pull his face tighter against her.\n\nHe was a complete novice at this, so he tried different things. The things she didn't react to, he didn't repeat, but the stuff that made her scream in bliss, thrash around and pull his hair, he did until he got it exactly as she liked it. Her cries grew louder.\n\nFinally, Kharza couldn't wait any longer, so she pulled him up her body. She needed him inside her now! His cock was stiff as iron once more, so she guided the head against her opening, and he slammed himself deep inside her. She howled with joy as she clung to him, enjoying the feeling of being so full. He pulled out to the head, then slammed deep once more. She moaned and growled, clinging to him as she did, and it felt so intensely good. Dell went faster and faster, brutally slapping her body with his at the bottom of each stroke.\n\nWhen she reached her climax, she howled and pulled him tight against her with her heels locked behind his ass. Dell roared as his own orgasm ripped through him. It was even better than when she'd taken him in her mouth.\n\nWhen they were finally done, he flopped down over her body, and they remained that way until they both got their breathing under control and his cock relaxed.\n\nEnjoying the sensation of his hard body pressing down on hers and the wonderful memories it gave her, she smiled. \"You are a very good fuck... for Orc females.\"\n\nDell lifted his face to look into her eyes questioningly.\n\n\"You were rough with strength and enthusiasm, just what I wanted. Humans and Elves would not enjoy such rough play as they are so weak.\"\n\nDell thought about that and realized she was once more just giving him an honest assessment, so he nodded. \"Thank you.\" She had an uncompromising honesty about her, and he appreciated it.\n\nHe pulled his body from hers, and they smiled at each other before Dell went back to the stream to dunk himself once more.\n\nKharza watched him with a grin. \"We'll just get sweaty again when we fuck after dinner.\" She laughed at his pleased and surprised expression.\n\nOnce clean and relatively dry, Dell moved the fire back to its original position and cleared the embers to dig up his bundles. He checked the food, and it was ready. Gesturing to Kharza to seat herself, he placed a broad leaf on the ground before her and poured the steaming meat and veggies onto it. He poured out his own, then sat facing her. They ate with their knives, and Kharza looked at Dell, seriously impressed.\n\n\"Is all of your cooking this good?\" she asked.\n\nHe nodded with a satisfied smile, and they enjoyed their meal.\n\nAfter dinner, Dell noticed the sword and scabbard were leaning against the tent. He glanced back toward the stream where he'd left it. His clothes were still there.\n\n\"Did you move the sword?\" he asked Kharza. She frowned at it and shook her head.\n\nPutting the damned sword out of his mind, Dell collected his clothes, cleaned up the site, and burned the garbage.\n\nThen Kharza pulled him into her tent as she wanted more fucking.\n\nNot surprisingly, so did he.\n\n-=-\n\nThe next morning, Dell took a brisk bath then dressed. Once Kharza had completed her morning routine as well, they packed up the tent and her belongings. He gave her a curious look.\n\n\"What are your plans now that you've avenged your family?\" Dell asked.\n\nKharza seemed a little lost. Then she saw the sword, which was magically back on his hip. \"I think I might stick around to see how you deal with the magic sword.\" She shrugged. \"Maybe I'll pick up some mercenary work in Grennesh. I've never been this far west.\" She looked at Dell to see if he objected, but he just nodded.\n\n\"I'll get us breakfast as we make our way back to the road,\" he offered. \"It'll be cold, but it'll fill our stomachs for the walk.\"\n\nKharza nodded with a smile and hoisted her pack.\n\nDell's keen eyes spotted the forage as they wove their way back through the woods to the trade route. They ate sweet apples and mushrooms that tasted like fresh bread, and he got lucky with some honey. It wasn't a big meal, but it would power their muscles for the walk back to the Inn at least.\n\nAfter walking for a little over an hour, Kharza looked at Dell curiously. \"Where were you running to last night that you got this far from your home?\"\n\nDell glanced at her in embarrassment. \"I didn't have a destination in mind as long as it was the opposite of what the sword wanted. I was just trying to wear myself out so the sword's control would weaken.\"\n\nKharza looked at him thoughtfully, then looked at the road ahead. \"This is not a very well-traveled route. We've not met anyone.\"\n\nDell nodded. \"In this direction, the path leads to the Mistveil Woods, and only the Wood Elves go there for the most part. They aren't keen on visitors. Especially ones who look like me.\" Kharza caught his sour expression as his mind dredged up uncomfortable memories. He pushed them down and forced a smile back onto his face. \"We're not far from the crossroads where the road to Grennesh meets this trade route. We'll turn there, and it shouldn't take long to reach the inn. Grennesh is only a short distance beyond.\"\n\n\"Why isn't the inn inside the city walls?\" Kharza asked.\n\nDell smiled. \"The Wood Knot Inn is neutral territory. There has to be a place where all races can meet to work out armistice agreements, territory disputes, and such. My father has been the arbiter for a number of these meetings, and he's been successful in every case.\"\n\n\"Will you take over for him when he passes?\" Kharza asked.\n\nHe glanced at her sharply but saw she was just curious and hadn't meant to offend. He took a deep breath. \"No. No one would listen to a Halfling. The best I can hope for is to be allowed to keep working in the kitchen.\" He sighed. \"I also work as the bouncer for the bar at night. Fighting inside the building is forbidden. I escort anyone trying to start a fight outside.\"\n\n\"Escort?\" she asked with a skeptical smile.\n\nHe nodded, then shrugged. \"I pin their arms so they can't fight back, carry them out the front door, and launch them from the top step of the front porch. How much effort I put into the throw depends entirely on how belligerent they were inside the bar.\"\n\n\"This man who attacked your family at the inn broke the neutral territory rule,\" Kharza acknowledged.\n\n\"Yes, he did. But he was already facing execution for returning after being exiled,\" Dell explained.\n\nKharza's eyebrows rose. \"What did he do to earn himself that?\"\n\n\"He raped a Wood Elf in an alley in Grennesh or started to. My father was in the city for a dinner meeting. I knew he'd be drinking, so I met him on his way home, and we saw the rapist and his friends drag the female off the street. I ran ahead, caught up to them, and stopped the man, but he'd begun. The female fled, and we never got her name, but my father pushed the city councilors to try the man for rape.\"\n\nThey reached the turn, and Kharza looked at the signpost. \"The Wood Knot Inn seems almost as important as Grennesh on this sign.\"\n\nDell chuckled. \"Yes, much to the annoyance of the leaders of Grennesh.\"\n\nIt didn't take much longer to reach the inn, and Dell ran the last little bit to greet his father, who met him on the porch.\n\n\"You're well?\" he asked. \"Maggie?\"\n\nKarter smiled in relief. \"Yes, I'm fine thanks to you, and the healer got to her in time. She lost a lot of blood, so she's going to be bedridden for a week.\"\n\nHis father looked past Dell to the tall Orc female smiling up at him from the ground at the base of the stairs.\n\nDell turned and gestured for Kharza to come up.\n\n\"This is my father, Karter du Krane. Father, this is Kharza. I ran into her battling four Orc warriors last night as I ran along the trade route road. I-I had to kill two of them with the sword.\"\n\nKarter blinked at his son's upset expression. Then he spotted the scabbard that he'd witnessed disappear from Perris' hip the night before. \"How did you know how to use it? I certainly gave you no training.\"\n\n\"Why wouldn't you give your son the skills he needs to survive?\" Kharza asked in surprise.\n\nKarter looked at her in annoyance. \"He was already getting into enough trouble without learning how to swing a sword! Besides, he wants to be a cook!\"\n\nKharza snorted and grinned at the man. \"Even without your training, Dell proved he was a Master Warrior Cook last night when he diced a large Orc warrior into four pieces!\"\n\nKarter stared at Dell in shock.\n\nDell sighed. \"The sword has a mind of its own, and when I lost my temper, it got control,\" he said grudgingly. He saw the question in Karter's eyes. \"We didn't eat the Orc. Ignore the stupid title she gave me.\"\n\nKarter shook his head and put his hand on his son's shoulder as he looked into his eyes.\n\n\"What you did last night frightened everyone in the bar. They saw you lose control, the flash of light, tables were flying, and you ran off with a sword in your hand. The stories that reached Grennesh have everyone talking, and the Grennesh Guardsmen want to speak with you. You need to speak with the Commander and let him know it was because of your worry for Maggie and me.\"\n\n\"What else could it have been! He was going to kill you, and it looked like he'd already killed her! Of course I was upset!\" Dell argued.\n\nKarter just nodded. \"That's what you need to explain to him. Take the sword with you.\"\n\nDell frowned. \"I just want to make pot pies today.\"\n\n\"Tomorrow,\" Karter said and pointed up the road.\n\nGrumbling, Dell handed his father the apron he'd carried back. Then he turned to the stairs.\n\n\"I will keep an eye on him. Can you watch my pack?\" Kharza asked.\n\nKarter looked at her, then back to Dell, who nodded to him. \"Sure. Fine.\"\n\nHe collected the heavy pack and grunted under the load. She grinned at him as she climbed back down the stairs to follow Dell, her battle-ax strapped to her back.\n\nWhen they reached the city's main gate, the guardsmen surrounded them. The captain stepped forward. He eyed the big Halfling with suspicion, and his thin mustache trembled, giving away how nervous he was.\n\n\"That's far enough. Hand over the sword.\"\n\nDell frowned at the man, then reached for the belt clasp, but his hands stopped and trembled. He could feel the sword resisting him, and his temper swelled. He lowered his hands and slowed his breathing.\n\n\"I can't.\"\n\nThe ends of the captain's mustache were visibly vibrating now. \"You mean you won't? Don't be stupid, Halfling. Drop the belt and step back!\" he snapped.\n\nDell's hand went to the hilt as his temper surged.\n\nKharza watched Dell struggle to remain calm, so she looked to the nervous soldiers around them and crossed her arms, making no move to reach for her own weapon. She chuckled, and the sound made everyone twitch.\n\n\"I suggest you allow Dell to go speak to your Commander peacefully, as the Orc Warrior he carved into pieces last night would have easily crushed all of your skulls with his club.\"\n\nDell turned his glower on her.\n\nAs Kharza was delivering her warning, the commander of the Grennesh Guardsmen arrived on his mount and looked at her. She nodded to him. The man knew of Dell through Karter and caught a pleading look in Dell's eye.\n\n\"Stand down, everyone. I will speak with him,\" he shouted, and the guardsmen visibly relaxed as they moved back. The captain nodded stiffly to the commander and ordered his men back to their posts.\n\nDell closed his eyes and concentrated on his breathing to calm himself, pulling his hand back from the hilt.\n\nThe commander dismounted and handed the reins to one of the nearby guards. He approached Dell and Kharza. \"I'm Commander Falco. You're Karter's boy?\"\n\nDell nodded. \"I'm Dell, and this is Kharza, a friend I met last night who's... helping me,\" Dell finished awkwardly, making her smile.\n\nThe Commander guided Dell and Kharza through the gate and into the guard house to speak privately. It wasn't a large structure, just a single room with a wood burner in the corner, a table, and four chairs, but it would suit their purposes. They sat and looked at each other.\n\n\"You have Perris in custody?\" Dell asked, and the man locked eyes with him for a moment.\n\n\"Yes. Some of my men escorted the Healer to the Inn last night and took Perris prisoner once the Healer finished with him. It was reported that there was too much damage to the bones in his hands and wrists for the Healer to repair. The man's going to have trouble holding a spoon, much less a sword, but considering he'll likely be executed for returning, his hands are the least of his concerns,\" Falco said. \"Can you tell me what happened last night?\"\n\nDell took a deep breath and nodded. He described being in the cellar and hearing the scream. How he arrived to see Maggie looking like she was dying or dead on the floor, with his father also on the floor, injured, facing Perris.\n\n\"I was convinced Perris was going to kill my father,\" Dell insisted, and the commander nodded.\n\n\"The witnesses said you roared at him. One customer stated he lost his bowel control, he was so frightened,\" Falco suggested.\n\nDell nodded wearily. \"That was probably Tanka. He and some of our older customers have that issue when they sneeze.\"\n\nFalco grinned, then forced it down. \"Continue, please.\"\n\nDell nodded. \"I grabbed his hands and broke them to make him drop his weapon and take him out of the fight. Then I threw him across the room. Something made me pick up the sword. There was a tremendous flash of light... and noise. I heard something... like someone yelling?\" He shook his head at the fuzzy memory. \"My father told me to leave, so I did. I started running and ran all the way to the trade route down the hill. The sword... I could feel it in my mind, controlling me through my rage. It wanted me to go to the right, to Mistveil Woods. I turned left instead and kept running until I came upon Kharza being attacked by four male Orc Warriors. I cut down two, and she got the others.\" Dell locked eyes with Falco. \"Until last night, I'd never held a sword.\"\n\nThe Commander frowned. \"You were able to defeat these Orc warriors without knowing how to use the sword?\"\n\n\"That's just it. I could feel myself moving like it was second nature, but it wasn't coming from me. The sword was the one fighting,\" Dell insisted.\n\nKharza addressed the commander. \"Powerful magic must be involved. Once the fight was over, the sword's scabbard suddenly appeared out of thin air on Dell's hip, hanging from a belt. Dell should speak with your most experienced magic-user,\" Kharza said.\n\nFalco frowned and shook his head. \"Unfortunately, Grennesh's resident master wizard, Morgan Ducane, left to visit his counterpart in the Wood Elf kingdom a week ago and won't be back for another week. You could go there to speak with him.\"\n\nDell recalled the sword wanting him to go there the previous night, but he didn't trust it. He knew he'd be received with hostility, and if he lost control...\n\n\"I'm not welcome there.\" Dell left it at that.\n\nThe Commander frowned, but he wouldn't force the big man to go. He respected Karter, but he couldn't allow this large man to wander around Grennesh carrying such a dangerous weapon. Without the sword, he'd already proven to be a threat. Some hotheads under his command were eager to lock him away for that alone.\n\nDell sighed. \"I just want to go back to the Inn and prepare the pot pies.\"\n\nSmiling in surprise at the solution presented to him, Falco nodded. \"You should do this exact thing until the wizard returns. Remain at the inn making your delicious meals.\"\n\nDell smiled in relief and shook the man's hand as they stood. Kharza shook the man's hand as well and caught him eyeballing her significant cleavage. She smiled as he looked away in embarrassment.\n\nThe moment they were outside, they saw a crowd had gathered.\n\n\"What's this?\" the Commander asked the closest civilian.\n\nSomeone in the crowd yelled out, \"The Halfling has the Cursed Sword!\" This caused a lot of grumbling.\n\nDell shared a look with Kharza as this was the first time he'd heard of a curse.\n\nFalco scowled at the crowd. \"When he returns from his visit to the Mistveil Woods, the wizard will be the one making such assessments regarding the weapon Perris la Blayne returned to Grennesh with. If you have any quarrel, it's with that convicted rapist!\"\n\n\"The Halfling killed him!\" someone yelled.\n\nFalco glared in the voice's direction. \"Perris is alive and in prison, waiting for his sentencing. He ignored his order of exile and will probably be executed.\" He stared down the unruly group. \"Dell du Krane is returning to the Wood Knot Inn to prepare his delicious pot pies.\" He stressed the family name to ensure people understood the boy came from a respected family.\n\n\"Pot pies! YAY!\" yelled another voice from the back, and the mood lightened slightly as chuckles rippled through the gathering.\n\nDell could still see a lot of nervous eyes looking his way. At a gesture from the Commander, Dell turned and walked back toward the city gate with Kharza following.\n\nSomeone threw a large melon at the back of Dell's head, but Kharza was ready for this and caught it. She shook her head at the crowd as she cracked the melon open between her hands and took a bite of the juicy flesh inside. Once she passed through the gate, she turned and followed Dell.\n\nThey walked without speaking as Dell's mind spun with the additional burden he'd been forced to bear. The people of Grennesh already distrusted him because of his Halfling nature. Now he was carrying a cursed sword that seemed bound to him? Dammit!\n\nClimbing the steps of the inn, Dell felt some of that load ease from his shoulders. This was his home. He felt safe here. Today, he had work to do, which he enjoyed.\n\nHe turned to face Kharza. \"I'm going upstairs to clean up, then I'm going to the kitchen. I'll be there all day. You should probably speak to my father. He'll likely be in the office at the end of the hall. Knock on the door,\" he hastened to add, not wanting her to start off on bad footing with Karter.\n\nShe nodded and headed for the office as Dell entered a door identified as private to climb the stairs to the upper floor. His room was at the end of the hall. Once inside, he undressed and leaned the sword and scabbard against the room's wall. He made his intentions clear to the sword, which seemed to work as it remained in place. He quickly bathed with water in the basin and put on clean clothes. Looking at the sword, he sighed. \"I'm just going to be downstairs in the kitchen. You don't need to follow me.\" He felt stupid talking to the weapon.",
        "He left his room and went back downstairs. When he reached the kitchen, he saw the remaining kitchen staff, but Maggie was missing, of course.\n\n\"Good day, ladies,\" he said gently.\n\n\"Ah! You're back!\" Hildy gasped, and some timid smiles were aimed his way. She was second in charge next to Maggie, and the others looked to her for guidance.\n\n\"Uh, yes. I'm sorry I wasn't here this morning. I was dealing with... other issues. I heard from my father that Maggie is recovering. That's good new--\"\n\nCecily yelped and dropped some firewood she was carrying. Everyone looked at her. \"It just appeared! All sudden like!\"\n\nDell looked to the corner where she was pointing, and leaning up against the wall was the sword in its scabbard.\n\n\"Shit!\" Dell snapped, and eyes locked on him. He quickly calmed his expression. \"I'm sorry about that. This was the issue I've been dealing with since last night. The... thing follows me.\" He'd been about to call it the damned sword, but that might be too accurate and frightening for the ladies. \"Just ignore it. It seems to want to be close at hand. Not sure how helpful it's going to be with making the pot pies today.\"\n\nThat got some weak smiles from the kitchen staff.\n\nHe rubbed his hands together and took a calming breath. \"Let's make pies!\"\n\n-=-\n\nAs Dell requested, Kharza knocked on the door and heard a voice calling out for her to enter. She went inside and closed the door behind her.\n\n\"How did it go with the Commander?\" Karter immediately asked.\n\nShe nodded. \"This man was far less excitable than his underlings. I thought we might have to fight our way back before he arrived. These city guardsmen were like frightened children.\"\n\n\"Damn,\" Karter cursed quietly.\n\nKharza continued. \"The Commander suggested Dell remain here until the wizard returns from his trip to the Mistveil Woods. He first suggested we travel there--\"\n\n\"No. Dell can't go there,\" Karter immediately said.\n\n\"Why?\" Kharza asked.\n\nThe man stared at her for a moment. \"His mother was shunned when she married me. She fully accepted that her people would no longer accept her. What we didn't know was that shunning would include her child.\"\n\nKarter looked closer at Kharza. \"How did you come to be fighting four Orc warriors so far from home?\"\n\nShe nodded. \"They killed my family. They were part of a war band that wiped out my entire village. I was hunting this group down, one by one, driving them west. These four finally had enough and ambushed me. I might not have survived if it weren't for Dell's help last night. I am grateful.\"\n\n\"You understand, he's not a warrior and should never try to be,\" Karter said.\n\n\"Why?\" Kharza asked.\n\nKarter frowned. \"The prejudice against Halflings. Too many people fear him already. He's so bloody big and stronger than most. Then there's his temper. He's been dealing with that his whole life. He got into a lot of trouble when he was young and would have ended up dead or imprisoned if I hadn't put him to work in the kitchen. He discovered he enjoyed it, and now he's almost at a master's level in there. You should watch him. It's inspiring!\"\n\nKharza nodded as she saw love and respect in the man's eyes. That brought up another question for her. \"Why didn't you get your son laid when he was of age?\"\n\nKarter snorted explosively at the unexpected question, then stared at the female. \"I tried to arrange for Dell to have this experience, but he's too dense to recognize the signs of interest. I'm worried he isn't interested in sex.\"\n\nKharza laughed. \"You no longer need to worry. Dell enjoyed sex very much and is even developing some skills!\" She saw Karter admiring her tits. She thought he was attractive enough and seemed confident in himself. He might be fun. \"Would you like to fuck?\"\n\nKarter looked at her in surprise as he realized that's how she'd approached his son. The blunt and direct method had finally clued his son in. He nodded to her and went to lock his door.\n\nShe bent over his desk and looked back at him. \"Do you know how to pleasure a woman with your mouth? Dell is most skilled at that.\" Karter balked, and she snorted derisively. She turned to face him. \"You're not stuffing a dry cock into me.\" She knelt, pulled his pants down, then took his erection into her mouth.\n\nKarter was nervous about her tusks, but she quickly brought him to full strength while making him sloppy wet in the process.\n\nShe returned to her position, bent over his desk, and he stepped behind her. He pushed his cock inside, and she grunted. He began to pump.\n\n\"Harder,\" she said.\n\nHe sped up, slapping her ass with his hips.\n\n\"Yes, do it harder,\" she grunted.\n\nSoon, she began to moan, and Karter was becoming a sweaty mess, trying to hammer her harder without breaking himself in two in the process. She finally came, and he quickly followed. He slumped exhausted over her back, panting to catch his breath.\n\n\"You were pretty good, but Dell was better. His cock is longer and thicker. He's stronger, and he also used his mouth on me--\"\n\n\"Enough!\" Karter gasped in dismay, pushing himself up and away from her body, holding his hands up to stop her critique of his performance. He realized her brutal honesty wasn't always welcome. \"Thanks for the fun and for keeping an eye on Dell.\"\n\n\"Do you have any work for me?\" Kharza asked.\n\nKarter considered that and realized he could no longer allow Dell to work as a bouncer. Not while he carried the sword. \"You can be security for the bar until Dell can get rid of the sword. The pay isn't very good, two silvers a month plus room and board.\"\n\n\"It is enough,\" she said with a smile.\n\n\"Speak to Dell. Tell him I gave you his bouncer job. He'll show you how we do it. Do you know about the inn's neutral territory state?\"\n\nKharza nodded with a smile. \"No fighting in the Inn.\"\n\n\"Right. Dell will also show you where you can sleep.\" He gestured to her pack by the door.\n\n\"Thank you.\" She collected her gear and left his office.\n\nKarter flopped back in his chair, exhausted. Having sex with an Orc was an interesting experience, but he was glad it was now off his bucket list.\n\nHis ego had taken enough of a beating.\n\n-=-\n\nKharza found Dell in the kitchen and stood leaning against the doorway, admiring his concentration and the movements of his hands as he prepared a series of pot pies. She spotted the sword and scabbard leaning against the far wall.\n\nOne of the ladies working with him glanced back toward her and screamed.\n\nDell spun in place with a spatula in his hand, then relaxed when he saw her. \"Cecily, there's no need to be frightened.\" He looked at the others and saw they were all staring at the big green Orc female in the doorway. \"This is Kharza. She's a friend I met last night.\" He looked at her. \"Did you speak to my father?\"\n\nShe grinned at him. \"Yes. He told me to tell you I'm going to be taking over your bouncer duties.\"\n\nDell considered that for a moment, then nodded.\n\n\"He said you'd show me how it's done here at the inn.\"\n\nHe nodded and looked at Hildy. \"I'll be right back.\"\n\nHe guided Kharza to the bar and walked her through her responsibilities and how they dealt with unwelcome guests. \"The official policy is no fighting within the building. You're allowed to throw the rowdy guests out the front door into the street, but while inside the building, we are polite but firm.\" She nodded, and he guided her from the bar to step out the front door onto the wrap-around porch. He demonstrated tossing a drunk. The sword and scabbard suddenly appeared on his hip. He frowned down at it, then stepped back inside with a sigh.\n\n\"I understand the job. It seems easy enough to me, and I can be polite but firm,\" she said, and Dell smiled. \"Where do you sleep as I'll share your bed. You are much better at sex than your father.\"\n\nDell held up his hands. \"I didn't need to know that... but thanks.\" He knew he could get used to her bold nature and realized he had no objections to sharing his bed with her. He pointed to the private door. \"This leads upstairs to the owner's personal bedrooms. Mine is at the end of the hall.\" With a nod, he headed back to the kitchen, unbuckling the belt for the scabbard on the way.\n\nKharza carried her pack upstairs and put it in Dell's room. She looked around and found it comfortable enough. The bed would easily fit them both.\n\nShe went back downstairs and settled herself on a chair on the porch to relax, content for the first time in a long time.\n\nShe missed her daughter and her mate and likely would for the rest of her days. But now, for the first time since that awful morning she woke under the dead bodies of her friends and family, she could see a future.\n\nChapter 5\n\nGhelli'Talesh's village doctor, Nerell, knelt by the four soldiers who were in a terrible state. They'd spent the night lying in their sick and waste on the lawn of the roadhouse and had only been discovered by the owner when he opened the doors at dawn. He'd immediately sent a runner to fetch the doctor.\n\nNow that he'd assessed them, all he'd been able to determine was that they were weakening, but he couldn't detect anything natural about the symptoms. He turned to the runner.\n\n\"Fetch Wizard Lerrisen and his guest from Grennesh.\" The youth rushed away.\n\nThere was nothing the doctor could do for these Humans.\n\n-=-\n\nWizard Lerrisen caught the look Nerell cast as he compared the two wizards as they approached. He was quickly getting used to this as it was the same everywhere he took his Human counterpart in the village. His people were comfortable with him as he looked like the epitome of a wise Wood Elf elder with his tall slim frame, long limbs, and graceful hands. His long white hair was intricately braided at his temples to keep his hairless face free from stray locks. The wizard robes he wore were made of the same cloth the people wore, so he blended in.\n\nMorgan Ducane was not what the Wood Elves expected a wizard to look like. He was much shorter than Lerrisen and broad-shouldered with the denser musculature of his race. He almost looked like a warrior rather than a wielder of magic. The Human's long black hair was also braided at his temples like his was, but the lower half of his face was covered by a dense black beard. His eyes were a lively, deep blue, constantly assessing his surroundings. Everyone could see the sharp intelligence in those eyes, which was a trait of wizards no matter the race.\n\nThe moment they arrived, they quickly consulted with the doctor, heard his assessment, then went to see the dire condition of the four men.\n\n\"It's a curse and a particularly nasty one,\" Morgan asserted in his gravelly voice and received a nod from Lerrisen.\n\nHe cast his own assessment spell over the four and identified the source. \"It's old magic. I haven't seen anyone use one of these in a very long time because its use was banned. I can counter it.\" He paused as he prepared the canceling spell. Surveying his target, he cast the spell, and they heard a subtle snap as the curse dissipated.\n\nLerrisen continued. \"The men will recover, but they'll be bedridden for at least a week. That will delay your return to Grennesh, my friend. The soldiers are unconscious and will probably remain this way for a day or so. Unfortunately, we won't be able to question them about who placed the curse on them until their recovery reaches a state of lucidity.\"\n\nHe turned to the owner of the roadhouse, Kraphlee. \"Please get them cleaned up and put into their beds. They'll need to be fed light broth for two days. Then bread and thin stews.\"\n\nThe older male didn't look very happy. \"I don't have the staff to assign as nurses for these soldiers.\"\n\nLerrisen gestured toward the road leading to the village. \"Haleth has the potion shop not far from here. Let her know I'm calling in a favor and asking for four of her workers to assist you, but not Eryllis.\"\n\nThe owner nodded and left to speak with his closest neighboring business.\n\nMorgan looked at Lerrisen. \"Something wrong with this Eryllis?\" he asked curiously.\n\nThe wizard sighed. \"She has anger management issues.\"\n\nMorgan gestured to his guards and raised a bushy eyebrow, but the Wood Elf wizard shook his head.\n\n\"This curse hasn't been used in centuries. She's too young to know it, and her grandmother and I have an agreement she won't be taught magic. With her rage problem, that would lead to a road of ruin.\"\n\nMorgan nodded as he agreed. Rage issues and magic use always led to trouble.\n\nIt looked like he would get to spend an extra week with his friend. He didn't have any pressing duties at home he was aware of, so he'd just appreciate the time away.\n\n-=-\n\nEryllis packed a travel kit as the walk to Grennesh would take her two or three days. She wasn't concerned for her safety now that she had the staff. First things first, though.\n\nShe left her bedroom and went down to the ground floor to find her grandmother in her office. The other workers were in the next room and within earshot, but she knew her grandmother would refuse to shut her office door.\n\n\"I'm going to take some time off to work on my anger issues,\" she said to the old female, who eyed her critically. Eryllis knew this excuse would work since it was something her grandmother couldn't refuse. It was exactly what she wanted Eryllis to do, after all.\n\n\"How long will you be gone? You're aware, this is our busiest season,\" the female growled.\n\n\"I can't say. Besides, you have all these collectors you were so pleased with yesterday. They'll obviously continue to impress you,\" she responded hotly.\n\n\"Get out. You're no use to me in this state. Come back when you learn how to keep a civil tongue in your head,\" Haleth snapped in frustration.\n\nEryllis spun and marched back upstairs, ignoring the glares from the workers. They didn't matter anymore.\n\n-=-\n\nLyyrall gestured for the others to follow and quickly rushed to the back door, slipping outside.\n\nOnce they were gathered where Haleth couldn't overhear them, Lyyrall began. \"The cow is finally leaving but, on her way, she's set us up for failure. That huge windfall she handed to us yesterday! She must have planned the entire thing! You heard her. Now the old woman will expect us to deliver the same results every time!\"\n\nJorina gasped at the scale of Eryllis' plotting! \"She faked falling off the cliff! She goaded us into taking the items from her basket and probably planted that enormous Hissing Root! It's diabolical how sneaky she is!\" Lyyrall nodded with wide eyes.\n\n\"We can't let her get away with this!\" Hessia hissed.\n\nPheo looked doubtful. \"You really think she's smart enough to do all that?\"\n\n\"She's leaving! That's a good thing, right?\" Ivalis said, backing Pheo's intent to avoid further difficulties.\n\nLyyrall scowled. \"It would be if she hadn't poisoned Haleth's mind to us. Hessia's right. We can't let her get away unpunished.\"\n\nGaris chuckled, and the others looked at her oddly. She shook her head. \"I know where there's a batch of Stench Horn mushrooms.\"\n\nLyyrall, Jorina, and Hessia gasped in delight as they quickly picked up the idea.\n\nPheo looked nervous. \"I'm allergic to Stench Horn.\"\n\nLyyrall frowned and saw the hesitation on her and Ivalis' faces. \"You two stay here and cover for us in case Haleth comes looking.\"\n\n\"Which direction do you think she'll go?\" Jorina asked.\n\n\"East,\" Lyyrall said definitely.\n\nThe others looked at her in surprise.\n\n\"No self-respecting Wood Elf male would want to mate with a cow. She'll find no lovers here. She has to be hunting for cock amongst the Humans. That means Grennesh,\" Lyyrall explained.\n\nHessia covered her mouth to stifle her giggles, and Lyyrall shot her a grateful smile.\n\nGaris was impatient to move. \"Come on! She'll be going soon, and we still need to collect the Stench Horn and set up our ambush!\n\nThe four rushed away as Pheo and Ivalis sagged in relief. They didn't like Eryllis but were satisfied with not having to face her sharp tongue anymore. She always made them feel so stupid!\n\nBefore they stepped inside, they saw Kraphlee, the roadhouse owner, walking toward the shop. He had a grim look on his long face, which didn't bode well. The two females looked at each other and wondered if they should have stayed with their friends. They went inside and heard the final shouts as Haleth cursed at her granddaughter, who slammed the door on her way out.\n\nDamn, Haleth was in a bad mood.\n\nPheo took a deep breath and moved forward to address the old female.\n\n\"We have a visitor coming,\" she said, and Haleth whipped her head around to glare at her.\n\n\"Who?\"\n\n\"Kraphlee, the owner of the roadhouse. He's almost here,\" Pheo responded.\n\nHaleth pulled herself together and nodded. She walked to the front door and opened it just as the lanky Wood Elf reached it.\n\n\"Good morning, Kraphlee.\"\n\n\"I wish I could say it was, Haleth, but I come bearing a request for a favor from the Wizard Lerrisen. The four Human soldier guides for the Human wizard were found in a retched state this morning on my front lawn. Close to death, they were. Lerrisen claimed it was a curse and cured them of that, but they're a mess. He's told me to ask you for four of your workers to tend to the sick for a week until they're healed enough to leave.\"\n\n\"Four! That won't leave me enough to complete my orders! My ungrateful granddaughter left me this morning as well!\" Haleth shrieked in dismay.\n\nThe tall male shrugged. \"I'm sorry, Haleth, but it's just my wife and me running the roadhouse, and she's not so well these days. I can't ask her to take on this work as well as her cooking and cleaning.\"\n\nHaleth fretted as her reputation would be damaged from the orders she failed to complete. She'd have to do the collecting herself with the remaining workers she had. She bit her tongue to keep herself from cursing her granddaughter again. Nothing but trouble from that one. So willful, unlike her docile mother.\n\nShe turned and saw Pheo and Ivalis, who were staring at her nervously. She frowned at their fear. \"Where are the others?\"\n\n\"Collecting,\" Pheo blurted.\n\n\"Dammit!\" Haleth snapped, then nodded. \"You two go with Kraphlee now, and I'll send two others when they get back.\"\n\nThe roadhouse owner nodded and turned to walk home without a glance back. Pheo and Ivalis glanced once more at Haleth, then scurried after the male.\n\nTheir day wasn't looking up after all.\n\n-=-\n\nThe Stench Horn mushrooms were exactly where Garis said they'd be. But of course they were, as no person or creature would willingly disturb the foul-smelling gourd-shaped plants which contained a sticky sap, the source of that odor.\n\nEach of the four ladies carried one of them very carefully. They found cover, two to a side of the path leading into the forest, and waited for their target.\n\nThey didn't have to wait for very long before Eryllis walked into view.\n\nLyyrall frowned as she didn't recall ever seeing Eryllis carrying a walking stick before. No matter. She looked across the road at Jorina, who grinned and nodded. She was ready. Lyyrall hoped Hessia and Garis were prepared as well.\n\nThe moment Eryllis stepped between the four trees the ladies hid behind, they stepped out and threw their weapons. Two of them hit their mark, splashing the foul-smelling goo over the woman. One struck the road by her feet, and one struck the ground a mere arms-length from Hessia's position. The idiot couldn't throw.\n\nStill, their victim was well covered with the sticky sap. She looked up from her destroyed dress and glared murderously at Lyyrall, who forced steel into her spine to not back down from the rage she saw in those eyes. She and the other three took one step closer but avoided the sticky splashes on the roadway.\n\n\"We're tired of having to deal with your foul attitude and ugly temper. You are no longer welcome here in the Mistveil Woods. Leave and never return!\" she said boldly with a forced smile. The others threw in their own comments about her leaving and never returning.",
        "Maybe she'd finally get the message this time.\n\n-=-\n\nEryllis was quickly losing control over her rage. She felt the white-hot waves scouring her rational mind, and all she could see was how much these creatures needed to die.\n\nThat thought gave her a moment's pause. To kill them was a step further than she was willing to go. That said, they needed to be punished.\n\nShe got her voice to work, and it shook the ground slightly with the power contained within it.\n\n\"I may have an ugly temper, but you are ugly right down to your cores.\"\n\nShe raised the staff and slammed it down against the road. A wave of magic force exploded outwards and tossed the four back against the trees. Bones broke, skin tore, and screams echoed through the woods as they lay crumpled against the base of the trees.\n\n\"You will never speak to me again, and you will never say my name!\" she snapped, looking into the eyes of the four injured females. They screamed in pain and terror as she seemed to peer into their minds.\n\nIt was too much, and they fainted\n\n-=-\n\nEryllis took deep breaths to calm the inferno within her. She'd lost control before, but now it felt worse. Much, much worse. She gazed at the crumpled forms and nodded stiffly as she was sure they understood her orders. None were fatally injured, that she could tell.\n\nShe looked at herself and realized her dress was ruined. She needed to find a spot to clean up.\n\nWalking away from the scene of carnage, she missed seeing Hessia wake and begin to crawl back towards the village.\n\nEryllis walked for half an hour before finding a stream crossing under the roadway at a small bridge. She turned downstream and followed the waterway until she could no longer see the road. She leaned the staff against a tree and was grateful to see it had escaped being splashed with the sticky sap.\n\nShe removed her pack, seeing only a few tiny droplets of the sticky stuff on it, and set it next to the staff.\n\nBefore she proceeded, she looked in all directions and listened carefully to ensure she was alone. Seeing and hearing nothing but the forest itself, she carefully removed her dress. The fabric was ruined, but there were a few spots where the sap missed, so she tore those free to use as rags. Stripping off her undergarments, she waded into the frigid water. Scrubbing herself with sand, she got the sap off but not before scraping her skin raw.\n\nCursing the bitches for their cruelty, she dried herself with the rags as best she could and pulled her underwear back on. Pulling another dress from her pack, she slipped that on and hissed at how the fabric stung against the spots she'd scrubbed raw.\n\nThe pack went onto her back, and she lifted the staff in her hand once more as she walked back along the stream to the road. She checked to see if anyone else was hiding to attack her, then an idea came to her. She pointed the staff at the road leading to the village and muttered something even she couldn't hear, and a mist began forming over the road. She turned and quick-walked over the small bridge, then slowed to a normal walking pace when she got to the other side.\n\nThere was still plenty of sunlight left in the day, so she wanted to make a good start on her trip to Grennesh.\n\n-=-\n\nDell was humming quietly to himself as he loaded the next batch of pies into the oven. The previous set joined the first on the cooling trays on the countertop, and the kitchen was filled with the mouth-watering scent of the baked, flaky crust and delicious filling.\n\nHe'd gotten up early to make the pies as they had to be ready for the lunch hour. His father sent runners up to Grennesh to spread the word that today was the day.\n\nDell had a process, and the kitchen crew knew when to give him space and when to ensure the ingredients were brought up from the cellar for the next series of pies. It didn't take long before they had the pies ready for their first customers and more baking for the second wave.\n\nBy ten AM, there was a line of people waiting outside the restaurant.\n\nKharza came inside from the porch to find Karter.\n\n\"You have a large line of people outside who look like they're starving,\" she said in concern. He followed her out, then smiled at her before explaining.\n\n\"The runners we sent out this morning went to the wealthy merchants first. They hire street rats to act as placeholders. You can see each of them is carrying a small plaque with a house sigil imprint. When the lunch hour approaches, the Merchants will arrive and take the spots their placeholders got for them.\" He gestured to the rough-looking group. \"What you're seeing are the poorest members of Grennesh society. They'll get a few coins for spending hours standing out here in whatever the weather happens to be. They'd never be able to afford a pie of their own, and if you gave them one, the others would tear them to pieces to get it.\" He wasn't smiling any longer as he turned and walked back inside.\n\nKharza realized Grennesh had its own form of savagery. She did a rough count and realized that close to fifty of these street rats were peacefully standing in the line.\n\nAt twenty minutes to the hour, the ladies from the kitchen rushed outside with trays laden with pie slices wrapped in broad leaves to contain the filling. The women quickly walked up the line dispensing these to the placeholders, who wasted no time in consuming the delicious, if small, meal.\n\nAs they finished, they licked the waxy leaf's surface to get every drop of the gravy.\n\nKharza watched the joy on their faces and how grateful they all seemed. From the largest to the smallest, each of them received their slice, and she noticed each portion was exactly the same size! Kharza was surprised to see the larger brutes weren't bullying their smaller counterparts for their pieces. That seemed to defy the nature of the people in the line and contradicted what Karter suggested earlier.\n\nShe was confused.\n\nThen she saw Dell was standing next to her, watching the line. He wasn't smiling or frowning. He just watched. The street rats began to notice he was there, and soon they were all looking up at him, but Kharza couldn't grasp what their expressions meant.\n\nThen it dawned on her. It was respect.\n\nWhen the last of them had received their slice, Dell looked up the road and called out for the ladies to hurry back. With a glance at Kharza, he followed them inside.\n\nShe scanned the street rats in line and saw they were all wiping their faces and eating any loose crumbs from their clothes they might have missed. Then, each one gave the next in line a quick visual inspection to ensure they hadn't missed any evidence they'd just eaten.\n\nMoments later, the first of the merchants began to arrive. They quickly found their sigil and stepped in line as the placeholder handed them their plaque, accepted some coins, and rushed away, back to Grennesh.\n\nIt didn't take long before the line was completely replaced by the far wealthier citizens from the city up the hill.\n\nKharza snorted with disgust as she saw these businessmen and women jostling for position and being surly about it. The street rats had been far more civil.\n\nDisgusted by what she saw, she made her way inside to find Dell in the kitchen. He was busy loading the next batch of pies into the ovens. These would be the last ones made for the lunch hour.\n\n\"The slices of pie you gave to those waiting, were they discards? Like broken or burnt pies?\" she asked.\n\nDell looked to the enchanted one-way window into the dining room Karter had installed in the kitchen, but the guests weren't being seated yet. Then he locked eyes with the Orc. \"Never mention they are given pie within the hearing of anyone. No one is to know.\"\n\nKharza's eyes widened as the ladies from the kitchen rushed out to bring their customers inside.\n\n\"I don't break or burn my creations. They get slices from the same quality pies the wealthy bastards entering the dining room will get.\"\n\nThey heard some raised voices and sharp words, so Dell stepped into the doorway leading into the dining room and cast a curious gaze over the people fighting over a table. The chubby merchants froze when they saw him, and he nodded to another table. The closest merchant nodded in return and took a seat as Dell moved back into the kitchen, rubbing his temple with a grimace.\n\nKharza watched Dell inspect the pies that would be sent out and nod to himself. His smile had returned.\n\nThe ladies rushed inside and began collecting the plates and garnishing them before hustling back out to deliver them.\n\n\"Watch their expressions,\" Dell said to Kharza over his shoulder as he worked.\n\nShe glanced through the window and saw the two chubby merchants trying to pretend they weren't savoring each bite.\n\n\"Why are they pretending not to enjoy it?\" she asked in confusion.\n\nDell shook his head. \"Because they're idiots. Image is more important to them than honesty.\"\n\n\"You bad-mouthing our best customers?\" Karter said with a grin as he stepped into the kitchen.\n\n\"Perish the thought,\" Dell said dryly as he continued to work.\n\nKharza saw the affection between the two men as they weren't hiding it. She settled herself in the room's corner and waited until the last of the customers had been served. Then she walked over to hand Dell a glass of cool water. He drank it all, then nodded his thanks.\n\nShe asked the question that had been on her mind since before the lunch rush. \"You could make more money selling those pies you cut up for the street rats, but you don't. Why?\"\n\nDell looked at her for a moment, then nodded and walked to the back door with her following. Once they were outside in the cooler air, he stretched and ran his fingers through his hair.\n\n\"I spent most of my childhood running the streets with some of the people you saw in that line. No one else would make friends with a Halfling. It wasn't all laughter and fun. I learned some hard lessons under the fists and heels of some real monsters, but there was an honesty you can't easily find in the higher elements of society. Once I found my place there, a lonely young male found friendship and acceptance. I repay that kindness forward.\"\n\nHe took some deep breaths as his brow furrowed. He rubbed his temples as he struggled with something. \"It helps keep the anger at bay, as well.\"\n\nLeaning back against the building, he sighed. \"Tonight, the city leaders and the wealthiest citizens will come for their turn.\" He shook his head. \"They're worse than the merchants. I wouldn't trust any of them at my back. Tomorrow we'll start seeing the regular townsfolk coming down. We'll have two days of them, then we'll be done.\"\n\n\"The merchants and the rich don't show up during those days?\" Kharza asked.\n\nDell shook his head, then paused. \"Well, not to the same degree. Some won't deny themselves any pleasure, but they don't get preferential seating on those days. They sit with the common people who aren't afraid to show their joy.\"\n\nThey went back inside as Dell had more pies to prepare. Kharza walked back to the front porch and took a seat to watch the last of the merchants waddle outside. Two stopped to stare at her as if considering her sellable value. She raised an eyebrow at them, and they quickly left.\n\nThe arrival of the town officials began hours later and was a procession of carriages. They didn't use placeholders but arrived in a predetermined order they'd worked out amongst themselves.\n\nKarter greeted each one at the Inn's door, and they were guided to their seats. Once they'd been brought their drinks, their meals were served.\n\nKharza watched the faces of these wealthy and important citizens. They were less resistant to displaying their enjoyment, but she was surprised when a table finished and left without paying.\n\n\"The wealthiest citizens don't pay for their meal?\" she asked Karter as he stepped into the kitchen.\n\nHe glanced at her in annoyance. \"We have an agreement.\"\n\nShe turned away with a frown and went back to watching the faces of these freeloading guests. She noted that while they looked genuinely happy, it wasn't the same. She looked at Dell. \"Their expressions aren't half as joyful as the ones I saw on the street rats, and they only received a small slice each.\"\n\nDell nodded and smiled. \"Watch the faces of the guests tomorrow when the regular people of Grennesh come by.\" He turned back to making pies.\n\nWhen the dinner rush was over, it was the kitchen staff's time for dinner. Each of the ladies was given two pies. One to eat and one to bring home for their families. Some chose to only enjoy a slice and brought the rest home. They had larger families.\n\nKharza had been smelling them all day and her mouth watered as she faced the one presented to her.\n\nAfter her first bite, she stopped and slowly savored the delicious flavors. She smiled at Dell gratefully. \"You are a master chef! How hasn't one of these wealthy families hired you away?\"\n\nKarter laughed as he heard this comment on his way into the kitchen. \"Believe me, they try. Every time we host one of his meals, they try. It gives me great joy to see their disappointment when he tells them no.\"\n\nKharza grinned. \"This is your payment for their agreement?\"\n\nKarter paused, then nodded with a small smile.\n\nShe took another bite. \"This is the best thing I've ever eaten, next to the roasted bird Dell made for me the night we met.\"\n\nOne of the ladies sighed. \"Oh yes, his wild cock is divine!\" The others burst into giggles at her slip of the tongue as her expression flashed to embarrassment.\n\nDell smiled at her as he finished up his own dinner. He was the first to be done and immediately began cleaning the kitchen. The others quickly finished up and assisted him.\n\nKharza watched how happy everyone seemed, and it drew her mind back to her village after a feast. Everyone was content with food in their bellies and relaxed. The children were drowsy, and soon they would all be sleeping peacefully.\n\nOn such a night, her tribe was attacked and wiped out, leaving her alone to carry out her vengeance.\n\nShe wiped away a tear and finished her wonderful meal in silence.\n\nLater, she might get the privilege of throwing some drunken fool from the porch onto his belly.\n\nThat thought returned the smile to her face.\n\n-=-\n\nIt was late in the day when Hessia crawled to the edge of town and was spotted by Pheo, who was taking a moment to catch her breath outside the roadhouse.\n\nShe screamed and ran over to investigate but stopped short when she saw the pockmarks and oozing pustules on her friend's skin. She turned and ran to get the doctor instead as he was still within the main building.\n\nWhen a group led by Nerell returned to Hessia, he took one look and sent a runner to collect the wizards. He kept everyone back but tried to speak with the female.\n\n\"Hessia, where are the others?\" he asked as Pheo told him there was a group out gathering.\n\nHer voice was weak and cracked, but she could whisper. \"Back. On the road. Injured like me.\"\n\n\"Who did this?\" he asked.\n\nShe screamed until she passed out.\n\nThe doctor moved back and waited for the wizards. This was no normal disease to strike so quickly, and that scream spoke of darker magic at work. Besides, she smelled like Stench Horn.\n\nOnce more, Lerrisen and Morgan arrived, shocked at what they found.\n\nMorgan took one look and paled. \"I haven't seen a pox like this for decades!\"\n\n\"Yes,\" Lerrisen agreed. \"Once more, it's an ancient disease and driven by dark magic. I can cancel the curse, but the pox will need to be treated with conventional medicine. Can you set up a containment spell around her once I break the curse?\" he asked, and Morgan nodded, preparing the spell.\n\nLerrisen closed his eyes, pulled up the old memory of the spell he needed, and cast it over the female. He was surprised by how the curse resisted him before his will broke it. The previous curse had been far easier to collapse. That spoke of a strength increase in the caster, or perhaps they weren't prepared on the first one. It was concerning how much strength was in the second, nonetheless.\n\nMorgan's containment spell surrounded the injured female so the pox would not spread. Lerrisen looked to Nerell. \"She is safe to touch now. You may treat her injuries and begin a course of treatment for the pox. It will take considerable effort to cure the disease, but she can be saved.\"\n\nNerell looked to Lerrisen. \"She spoke of three more up the road, also injured and likely suffering from the same disease.\"\n\nThe Wood Elf wizard shared a look with his Human counterpart, then knelt next to the unconscious female. He willed her to consciousness, and she blinked at him in confusion. \"You are safe now. We will treat your injuries. Who did this to you?\"\n\nHessia screamed in terror and pain, making him lean away. \"Rest,\" he said and willed her back to sleep. He looked at Morgan once more.\n\n\"That's a powerful compulsion. More dark magic,\" the Human said, and Lerrisen nodded.\n\n\"It's too deep for me to remove without damaging her mind.\" He looked to the people gathering and saw Kraphlee standing with a group of males who'd arrived from the village with his runner. The wizard spoke to them. \"We must find the others quickly before the pox spreads.\"\n\nThey set off as the doctor moved to examine Hessia's injuries.\n\nAs they walked, the two wizards spoke softly to each other to not frighten the others.\n\nMorgan was frowning with concern. \"That's two examples of dark sorcery and ancient spells at that. We need to find the culprit behind these attacks immediately!\"\n\n\"From the strength behind the second curse, we may be facing another master-level mage,\" Lerrisen replied.\n\nAs they approached a slight bend in the road, the Wood Elf wizard suddenly threw his arms wide, forming a dome around the group. Outside the dome was a grey mist. A fog suddenly surrounded them, and the forest was gone.\n\n\"This is Druid magic?\" Morgan said in confusion.\n\nLerrisen nodded with a stiff expression as his lips moved silently. The mist slowly split and moved away to either side of the road and dissipated into the forest.\n\n\"You know Druid magic?\" Morgan asked him quietly.\n\n\"A little. Just enough to protect myself from the creatures of the woods. Maintaining such a broad dome was pushing my limits,\" he admitted.\n\nThey moved forward cautiously and found the three females on the ground amongst splashed patches of Stench Horn sap. All three were unconscious but alive. Their injuries were worse than Hessia's, and they all showed signs of the pox. Lerrisen broke the curse, and Morgan enclosed each with a containment spell.\n\nOne of the males was staring at the ladies with a sad expression.\n\n\"What is it?\" Morgan asked him.\n\n\"They all worked at Haleth's potion shop, and they used to be so pretty. I've seen what the pox does as my grandmother had it. It ravished her skin and left her with scars. These ladies seem to have it worse than she did.\"\n\nThe wizards shared a look and helped create some rudimentary stretchers to carry the three females back to the roadhouse.\n\nWhen they were on their way back, Lerrisen leaned a little closer to Morgan. \"We need to go speak with the potions shop owner for answers.\" Morgan nodded.\n\n-=-\n\nHaleth was fretting over the incomplete orders and silently cursing her willful and disobedient granddaughter. The problem was, and she would never tell her this as she needed to remain in the dark about the cause, Eryllis was her best collector. She had an innate ability to find the freshest and most potent ingredients. Haleth had come to depend on her as much as that galled her.\n\nThe old female would have been quite content to continue using her granddaughter for her useful skills if she hadn't chosen to leave. She knew this skill was tied to her natural-born proficiency with magic, but she'd promised Lerrisen she'd keep magic out of her hands. That suited her just fine as she needed someone to perform the mundane tasks in her shop, and she was the best collector."
    ],
    "authorname": "BurntRedstone",
    "tags": [
        "first time",
        "fantasy",
        "elves",
        "orcs",
        "leinyere",
        "tales of leinyere"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/the-wood-knot-warrior"
}
{
    "title": "Joel and Carrie Ch. 01",
    "pages": [
        "\"Carrie, this is a mistake,\" I said, kicking myself the whole time. Most guys would take advantage of the situation, but not me. I was being a nice guy again. I hated it when I did that! \"You're mad at Jimmy. I can understand that. But do you really want to do this?\"\n\nCarrie was the hottest girl in school. Her boyfriend Jimmy was the coolest guy. They weren't just part of the in crowd, they led it. She was also mad enough to spit fire. Jimmy had gone and cheated on her, again. What a jerk!\n\n\"You're right, I am mad at Jimmy,\" she replied. \"But not half as much as I'm furious with myself. I swore I wouldn't take him back this last time and I did it anyway. My friends warned me. I knew he was a liar, but I let him convince me that he'd changed when I knew deep down that it wasn't so.\"\n\n\"I can understand all that,\" I said calmly. \"But how did that lead to this? Why am I here?\"\n\n\"Well, because you delivered the pizza,\" she grinned. It was the truth. I had a part time job at a pizzeria to save up for college next year. It wasn't a lot of money, but every little bit helped.\n\n\"That's not what I mean and you know it!\" I snapped in annoyance.\n\n\"You're talking about the kiss?\" she asked with mischief in her eyes.\n\n\"Yes! Of course I'm talking about the kiss! Do you always kiss the pizza delivery guy?\"\n\n\"Think of it as your tip,\" she joked.\n\n\"I will,\" I said, suddenly unable to stop from laughing. \"And it was certainly the best tip I ever received, but...\"\n\n\"Why, thank you,\" she interjected with a smile.\n\n\"...You're welcome,\" I said, and then shook my head, trying to remember what I was about to say before she interrupted. Carrie's smile had that affect on guys and she knew it. She was playing with me and I would have been annoyed if I wasn't enjoying it almost as much as her.\n\n\"Look, you're the most beautiful girl in school. Every guy would love to have you looking at them the way you're looking at me...\"\n\n\"And yet you keep trying to slip out the door,\" she grinned as she leaned against the door to stop my escape.\n\n\"Only because it's not real,\" I sighed. \"You're only doing this for two reason. First, your mad at Jimmy and second, you're drunk.\"\n\n\"So?\" she shrugged as she took another drink from her wine glass. \"My parents aren't expected back for a couple of hours. Loosen up a little!\"\n\n\"I'm not going to take advantage of a drunk just because she's my fantasy girl,\" I said, half explaining and half convincing myself.\n\n\"Your fantasy girl, am I?\" she grinned.\n\n\"Carrie, you're every guys fantasy girl,\" I said with a shake of my head. \"And if I thought for a minute that you really liked me, I take advantage of the situation whether you were drunk or not, but you don't.\"\n\n\"How do you know?\"\n\n\"Carrie, what's my name?\" I sighed.\n\n\"It's Joe,\" she replied. I shook my head. She frowned and said, \"Jack?\"\n\n\"I think I've made my point,\" I grinned, although it did hurt a little that she couldn't remember my name. Our senior class was large at over five hundred, but still, we spent fours years together.\n\n\"You know, you're way too serious,\" Carrie said as she leaned in and kissed me again. Her long blond hair smelled freshly washed. There was nothing I wanted more than to take her in my arms and kiss her back, but it would be wrong.\n\n\"Look, I'll see you in school tomorrow,\" I said pushing her gently away from the door.\n\n\"You're really going to leave?\" she asked, sounding surprised.\n\n\"I have to,\" I replied. \"Or I'll do something we'll both probably regret in the morning.\"\n\n\"I'll just call someone else as soon as you're gone,\" she said in annoyance. \"I want to get back at Jimmy!\"\n\n\"Please don't. That's just the alcohol talking,\" I said, pausing briefly before adding, \"Actually, promise me you won't.\"\n\n\"Why should I?\"\n\n\"Because if you end up being with someone else tonight, I may have to kill myself,\" I said, half serious. \"I'm already planning on going home, taking a cold shower and yelling at my father for teaching me right from wrong. Finding out someone else took my place would be...well, you understand.\" She looked at me oddly.\n\n\"I promise,\" she finally said. \"You know, I wish I could remember your name.\"\n\n\"Me too,\" I said, smiling sadly. \"Goodbye.\"\n\n**********\n\n'You stupid bastard!' I thought angrily.\n\n\"Is something wrong, Mr. Harmon?\"\n\n\"No,\" I answered quickly. Ms. Kafka was not one of my favorite teachers. She was boring and had the ability to tell when someone's mind was wandering. It was a lethal combination!\n\nNot that it mattered today. I spent half the morning cursing my stupidity. How could I possibly pass up a chance with Carrie? The worse part was that I couldn't talk to anyone about it. It wasn't that I was noble or anything. I'd tell my friends in a heartbeat if I weren't so afraid of their reaction. The guys would make fun of me and the girls would tell me how nice I was. I couldn't decide which was worse. The bell rang and I sighed loudly. It was finally lunchtime. \n\n\"Let's hope you're a little more focused tomorrow, Mr. Harmon,\" Ms. Kafka said pointedly.\n\n\"Sorry Ms. Kafka,\" I said, trying hard not to blush as I rushed out of the room. I knew I had to stop dwelling on what happened, but it didn't help that Carrie shared the same lunch period. Instead of waiting for my friends by our lockers as usual I went into the cafeteria and bought my lunch quickly. I decided to eat quickly and escape outside as soon as possible.\n\nRobbie and Tina, my best friends since grade school, found me and asked what was bothering me. I ignored them. They shrugged at each other as I raced through my food. I needn't have bothered. Carrie came by before I was half done and sat across from me. Robbie and Tina looked stunned. The table with the in crowd was on the other side of the room.\n\n\"Can we help you?\" Tina asked with a frown.\n\n\"No,\" Carrie replied. \"I just wanted to try a change today. You don't mind if I sit with you guys?\"\n\n\"No!\" Robbie cried, almost stuttering.\n\n\"Put your tongue back in your mouth,\" Tina said to him, still frowning. She then turned back to Carrie and asked, \"So, what's the joke?\"\n\n\"No joke,\" Carrie sighed. \"I'm just looking for a change of scenery today.\"\n\n\"Carrie, if you hang out with us,\" I said carefully. \"You're likely to lose your spot with the in crowd.\"\n\n\"Joel,\" she said with a confident smile. \"If I hang out with you, you will be the in crowd.\"\n\n\"I see you know my name now.\"\n\n\"I was close!\" she said, sounding annoyed.\n\n\"Tina, I think we're missing something?\" Robbie said.\n\n\"You think?\" Tina asked sarcastically.\n\n\"You mean you didn't tell them?\" Carrie asked in surprise.\n\n\"What's to tell?\" I said carefully.\n\n\"What are you two talking about?\" Tina asked.\n\n\"Last night, Joel delivered pizza to my house. I was drunk and angry with Jimmy,\" Carrie explained.\n\n\"And?\" Robbie asked, looking at me.\n\n\"We talked,\" I shrugged.\n\n\"We did more than talk,\" Carrie snorted. \"But not as much as I would have. I was really drunk.\"\n\n\"You mean you...\" Robbie began. I cut him off.\n\n\"Let it alone. She was drunk and nothing happened.\"\n\n\"Aw! That's so sweet!\" Tina cried.\n\n\"Thanks,\" I said sarcastically to Carrie. She laughed.\n\n\"We did kiss,\" Carrie put in helpfully.\n\n\"Wow!\" Robbie said in awe.\n\n\"It's time to go,\" Tina said to him as she stood and picked up her tray. She was smiling for the first time.\n\n\"But...\"\n\n\"They obviously want to be alone,\" she said, cutting short Robbie's protest. He stood and they both moved to another table. It was then that I noticed all the odd looks we were getting from just about everyone in the cafeteria.\n\n\"Carrie, why did you sit here?\" I asked.\n\n\"Well, I really do feel like a change,\" she said, but I wasn't buying it. She looked at my expression and laughed again.\n\n\"Tell me the truth.\"\n\n\"Maybe later,\" she shrugged. \"But first, tell me something. Do you regret leaving last night?\" \n\n\"Are you kidding?\" I said, shaking my head. \"I've been beating myself up over it ever since!\" Carrie smiled.\n\n\"Would you do it again?\" I looked at her and couldn't tell what answer she was expecting or even wanted. I was tempted to tell her that I would stay if I had it all over to do again. Yet, deep down I knew it wasn't the truth. I might beat myself up for my choice, but it was the right thing to do.\n\n\"Yes,\" I finally answered. She looked at me in silence.\n\n\"You know, I believe you would,\" she said, sounding amazed.\n\n\"Hey Carrie, what are you doing sitting over here?\"\n\nI looked up at the voice and saw Jimmy standing there. I buried my face in my tray and tried to stay out of it.\n\n\"I'm talking to a friend,\" Carrie said in an icy tone.\n\n\"Come on,\" Jimmy frowned. \"Let's go back to our table.\"\n\n\"It's your table now,\" she replied. \"I'm not sitting there anymore.\"\n\n\"Why?\"\n\n\"Because you are,\" Carrie answered succinctly.\n\n\"What's this all about?\"\n\n\"Jennifer Madden.\"\n\n\"Who's she?\" Jimmy asked. I shook my head. You had to give the guy credit. He really looked like he had no idea who she was. The fact that half the cheerleaders saw him with her at a party Friday night didn't seem to matter to him at all.\n\n\"Goodbye, Jimmy,\" Carrie said pointedly.\n\n\"Don't be that way. Come on, let's talk about it?\" he asked, but Carrie refused to even look at him, much less talk to him anymore.\n\n\"Do you have anything to do with this?\" Jimmy asked, giving me a nasty look. I raised my hands and gave my best innocent look. He stared at me a moment longer before turning and stomping away.\n\n\"Are you okay?\" I asked Carrie softly. She nodded. There were tears in her eyes, but she refused to let them drop. We ate in silence for a couple of minutes.\n\n\"Hey Carrie!\" Jill Jackson said as she sat down next to Carrie. She was the captain of the cheerleader squad. Jill was an athletic black girl who could do some pretty wicked back flips. Obviously, she was part of the in crowd. \"Can you believe Jimmy?\"\n\n\"I'm glad you dumped him again,\" Tara Dalton said as she sat on Carrie's other side. \"He is such a jerk!\" Tara was a talented actress and a dance rat. She had the lead in this year's school musical. It was a big hit. I had dreams about her for weeks afterward.\n\n\"Hi,\" Tara said to me with a warm smile.\n\n\"Hello,\" Jill added, smiling as well.\n\n\"Jill, Tara, this is my friend Joel,\" Carrie said, introducing me.\n\n\"Ladies, it's a pleasure to meet you,\" I grinned. \"You do realize that this has to be one of the most surreal moments in my life?\"\n\n\"Why?\" Tara asked.\n\n\"You're kidding, right?\" I asked. Carrie was smiling at me. She knew what I meant, but the others seemed clueless.\n\n\"Tara and Jill are not typical for the in crowd. They think of themselves as normal everyday people. It's one of the reasons why I like them so much.\"\n\n\"We are normal everyday people,\" Jill said with a shrug. \n\n\"Hell!\" Tara grinned. \"I wasn't even part of the in crowd before we became friends.\" I was about to argue both of their points when we were visited by another one of Carrie's friends.\n\n\"Hey ladies!\" Samantha Garret said as she walked up. Carrie nodded, but didn't look thrilled as Samantha sat with us. Samantha was one of the 'Rich People'. She threw one ritzy party each semester at her house. It was for invitees only. I'd never been there, but to be fair very few had. \"Carrie, is it true? Have you and Jimmy broke up again?\"\n\n\"Yep,\" Carrie said. \"He's all yours.\"\n\n\"I don't want him!\" Samantha said too quickly. Carrie didn't introduce us and Samantha didn't seem to notice my presence even though she was sitting right next to me.\n\n\"Carrie, can we talk?\" Bette Jacobs said as she walked up and sat on my other side. She also ignored me. The table was getting crowded.\n\n\"About what?\"\n\n\"Jimmy is awfully sorry about Jennifer,\" Bette said. \"Can't you find it in your heart to forgive him?\"\n\n\"Again?\" I asked in disbelief.\n\n\"Mind your own business!\" Bette snapped at me. My eyebrows rose in surprise. \"And just what are you doing sitting with us anyway?\"\n\n\"I was a bit curious about that myself,\" Samantha added. \n\n\"I was here first,\" I said, hearing myself and suddenly finding it hard not to laugh.\n\n\"Well, get lost!\" Bette snapped. I looked at her and shook my head.\n\n\"She's serious, isn't she?\"\n\n\"Of course I am,\" Bette answered. \"Go sit with your friends.\"\n\n\"Bette, stop being such a bitch!\" Jill sighed.\n\n\"Amen to that!\" Tara put in.\n\n\"Joel is a friend of mine,\" Carrie finally said. \"I sat here to talk to him. If you don't like it, you're welcome to leave.\"\n\n\"Is he the reason why you decided to break up with Jimmy?\" Bette asked.\n\n\"I decided to break up with Jimmy because he's a cheating, no good, son of a bitch!\" Carrie snapped, and then took a deep breath to calm down. \"Joel is just a guy who treated me nice.\"\n\n\"So he is the reason!\" Bette cried.\n\n\"Wow!\" I said, suddenly standing. \"You guys can have the table.\"\n\n\"Gives you a whole new prospective of the in crowd, doesn't it?\" Carrie asked, understanding my desire to leave. I just nodded. She grinned and added, \"I'll see you at lunch tomorrow.\"\n\n\"Don't take it personal,\" I sighed. \"But do me a favor, lose your friends or go sit somewhere else.\"\n\n\"What a jerk!\" Samantha snapped.\n\n\"I'm going to enjoy watching what Jimmy does to you,\" Bette added.\n\n\"Bette, Jimmy's not going to do anything to Joel! He had nothing to do with the breakup,\" Carrie said. I watched Bette's eyes and shook my head. I'd have to watch out for Jimmy.\n\n\"Tara, Jill, it was nice to meet you both,\" I said with a smile. \"You too are welcome at my table anytime.\"\n\n\"We were wondering,\" Jill grinned. I rolled my eyes and she laughed.\n\n\"We'll be seeing you around,\" Tara added.\n\n**********\n\n\"I can't believe you got into a fight!\" my father snapped as he walked into the office. Boy was he steaming!\n\n\"Mr. Harmon, it wasn't your son's fault,\" vice principal Tagli said. \"All the witnesses agree. The other boys jumped Joel during recess.\"\n\n\"If it wasn't his fault then why was I called out of work?\" my father asked, and then the rest of the vice principal's words sunk in. \"Boys? As in plural? How many boys?\"\n\n\"There were three of them,\" vice principal Tagli, shaking his.\n\n\"You didn't do any serious damage to them?\" my father asked me.\n\n\"No,\" I said, shaking my head. \"Jimmy probably lost two teeth, but that's the worst of it.\"\n\n\"Where did your son learn to fight?\" the vice principal asked, honestly curious. \n\n\"His grandfather,\" my father replied.\n\n\"He used to box when he was my age,\" I put in helpfully. It wasn't the complete truth. My father also taught me some, but he didn't like to talk about it. He never liked to remember his years in the army. That didn't stop him from teaching me to defend myself. The men in our family learned how to protect themselves early.\n\n\"And just what was this fight about?\" my father asked, refocusing the conversion.\n\n'Oh boy! Here it comes!' I thought, readying for the storm.\n\n\"Well, it seems that one of the boys thought that your son had something to do with his girlfriend breaking up with him,\" the vice principal explained.\n\n\"But I didn't!\" I added quickly. It was no use.\n\n\"A girl! You got in a fight over a girl!\"\n\nMaybe I should explain. My father was madly in love with my mother. She left him when I was just a baby. He pretty much hates all women now. Not a unique story really, but rare or not, I was in for it.\n\n\"Mr. Harmon, I've spoken to the girl in question and she agrees that your son had nothing to do with the break up. It seems the other boy was cheating on her,\" vice principal Tagli said quickly when he saw my father's reaction. It did seem to calm my father slightly.\n\n\"So, if my boy didn't start it and he didn't do anything wrong, why again am I here?\" \n\n\"School policy,\" the vice principal shrugged. \"Anyone involved in a fight is automatically suspended for three days minimally.\"\n\n\"That's a stupid rule!\" my father snapped. I received the distinct impression that Mr. Tagli agreed, but he couldn't say that.\n\n\"I'm sorry, those are the rules.\"\n\n\"Fine,\" my father said. \"Let's go.\"\n\nThe ride home and the rest of the night were not particularly fun. My father was stressed about work and his having to leave early to come get me only made it worse. I tried apologizing, but it was pointless. \n\nPop was gone by the time I woke up the next morning. I was relieved. He left a list of chores for me to do, but none of them were all that difficult. I finished them before he got home. That night was a little better. My father was already asleep when the phone rang. I frowned. No one normally called this late.\n\n\"Hello?\" I said.\n\n\"Come outside,\" Carrie's voice said over the line. I opened the front door to find her, Tara and Jill sitting on my porch. Carrie smiled and closed her cell phone.\n\n\"What brings you ladies here on this rather unpleasant night?\" I asked.\n\n\"I wanted to apologize,\" Carrie answered. \"Sitting with you at lunch probably wasn't the smartest thing to do while I broke up with Jimmy.\"\n\n\"No need,\" I shrugged. \"You tried to tell him that I had nothing to do with it.\"\n\n\"At least you beat the tar out of Jimmy and his goons,\" Jill grinned.\n\n\"Beat the tar out of?\" I asked. She laughed.\n\n\"It's one of my grandmother's sayings.\"\n\n\"Along with quite a few other gems,\" Tara grinned. She was around the same height as Carrie, but she was thinner and her hair was almost black. Her eyes were actually a paler shade of blue as well. They were the type that drew you to them.\n\n\"It's cold out here!\" Carrie said, rubbing her arms.\n\n\"Look, I'd invite you in, but my father is already asleep and he's not really in a good mood these days,\" I said.\n\n\"What are you doing tomorrow?\" Carrie asked.\n\n\"I'm still suspended,\" I shrugged. \"I'm not doing anything. Why?\"\n\n\"Well, the three of us are thinking about playing hooky,\" she grinned. \"You want to hang out?\"\n\n\"Depends,\" I replied. \"I'm not much of a shopper.\"\n\n\"Me neither,\" Jill laughed. \"My mother picks all my clothes.\"\n\n\"We're taking a room at a local hotel for the day,\" Tara said. \"My uncle owns the place. We do it every once in a while.\"\n\n\"It's a blast!\" Carrie grinned. \"We bring wine and some movies. The rooms have DVD players in them.\"\n\n\"And your uncle won't mind me being along?\" I asked in disbelief.\n\n\"Oh, he'd be mad as hell,\" Tara giggled. \"That's why we have to sneak you in.\"\n\n\"Thanks, but no thanks,\" I said. \"My father's already mad at me. If I get caught there is no telling what he'd do.\"\n\n\"Did I mention that there is a hot tub?\" she grinned.\n\n\"We always bring our skimpiest bathing suites,\" Jill added. I shook my head.\n\n\"So, will you come?\" Carrie asked again.\n\n\"Of course I'll come,\" I said. \"Do you mind if I bring a camera?\"\n\n\"What for?\" she asked, rather lewdly.\n\n\"Well, I was going to say because my friends will never believe me without pictures, but if you ladies have any other ideas...\" They laughed as they stood to go.\n\n\"Forget the camera,\" Carrie answered. \"We use these cut days to relax and unwind.\"\n\n\"But don't forget to bring your bathing suite,\" Jill added. \"Unless of course you'd rather share the hot tub nude?\"\n\n\"I don't think I'd survive seeing all three of you nude,\" I joked. \"In a bathing suite is going to be hard enough.\" \n\n\"We can only hope!\" Tara grinned.\n\n\"We'll pick you up at around nine,\" Carrie said before I could say anything else. They waved goodbye and turned to leave. I watched three of the best asses in school sashay their way back to the car. Carrie turned and caught me staring. She smiled and waved once more.\n\n\"Oh brother,\" I said to no one in particular. The next day promised to be interesting indeed.\n\n**********\n\n\"Any problems sneaking up?\" Carrie asked as I entered the suite. I shook my head.\n\n\"Wow, this is some hotel room!\" I said as I looked around.\n",
        "\"It's one of the more expensive suites, but they don't go this time of the year, so my uncle lets me have one for free,\" Tara explained.\n\n\"There's wine when you're ready,\" Jill said.\n\n\"I brought this,\" I said, holding up a bag.\n\n\"What is it?\" Carrie asked. I pulled one of the two bottles out.\n\n\"Champagne! I love champagne!\" Tara cried. \"Put it on ice and we'll have it later.\"\n\n\"You're now her new best friend,\" Jill joked.\n\n\"Do you want me to fill the hot tub?\" I joked back. \"I can't wait to see you ladies in your bathing suites.\"\n\n\"And Carrie told us that you were such a nice guy,\" Jill replied.\n\n\"Nice, not gay!\"\n\nTara started coughing and gasped out, \"You made me choke on my wine!\" It didn't sound too bad.\n\n\"Sorry.\"\n\n\"The hot tub is for later,\" Carrie said. \n\nWe finished a bottle of wine while we watched the first movie. Thankfully one of the ladies brought stuff for us to eat. The movie was a tearjerker, but I kept making comments that made them laugh.\n\n\"Men!\" Carrie snapped after one particular mushy scene where I made fun of the actor.\n\nThere was only one bed in the room. It was king sized so we could all fit if we squeezed, but I sat on the floor to make it more comfortable. It was also to stop me from getting any crazy ideas. I wasn't sure why they decided to invite me, but I wasn't going to blow it by trying something stupid. \n\nThe movie ended and we all stood, stretched and took turns using the bathroom. Jill selected another movie when we were ready. Tara opened one of the bottles of champagne while Carrie grabbed more munchies. I sat back on the floor as the movie started.\n\n\"Hey, chicken little!\" Jill joked. \"There really is plenty of room up on the bed. Are you going to stay on the floor all day?\"\n\n\"I think it's safer down here,\" I joked back.\n\n\"You've got that right!\"\n\n\"Here,\" Carrie said as she sat on the floor next to me and handed over some cheese and crackers.\n\n\"Thanks.\"\n\n\"I bet your wondering why we decided to invite you?\" she said softly.\n\n\"I figured an orgy was planned,\" I teased.\n\n\"Think you can handle all three of us?\" she joked back.\n\n\"Probably not, but I would sure love to try!\"\n\n\"Don't count on it,\" she laughed. \"We're not like that.\" I wasn't really disappointed because I knew something like that could never happen to me. Okay, maybe I was a little let down, but mostly because of all the flirting they were doing.\n\n\"So then, why did you invite me?\"\n\n\"Well, for a couple of reasons,\" Carrie answered, suddenly uncomfortable. I felt a piece of cheese hit me on top of my head. Tara and Jill were looking down from the edger of the bed. Both were grinning.\n\n\"Carrie likes you,\" Tara said.\n\n\"Now shut up and let us hear the movie,\" Jill put in.\n\n\"Some friends!\" Carrie grumbled as she blushed.\n\n\"Any time,\" they laughed as their heads disappeared. Carrie was watching me for my reaction.\n\n\"You don't really know me,\" I sighed.\n\n\"You'd be surprised,\" she grinned. \"I might not have gotten your name completely right, but I remember you.\"\n\n\"Bull,\" I said in disbelief.\n\n\"You were in my freshman biology class,\" she said. \"You sat with your friend Robbie and had a thing for the girl in front of you.\" Becky was the first girl I dated in high school.\n\n\"That's pretty good,\" I said, surprised she remembered.\n\n\"I also remember you helping Mr. Roberson in computer class last year.\"\n\n\"The poor man is really all thumbs,\" I said. \"If I didn't help, he would likely have burned down the school.\"\n\n\"And you tutored Tiny during football season,\" Carrie added. Tiny, as you probably guesses, was the size of a small mountain. \n\n\"He was actually pretty bright,\" I shrugged. \"He just had problems with Spanish.\"\n\n\"Do you remember...\" she began, but I cut her off.\n\n\"Okay, I get the point,\" I interjected. \"You do remember a couple of instances where our paths crossed.\"\n\n\"I remember a lot more than that,\" Carrie argued.\n\n\"In that case, do you remember when Tommy Hadley broke his arm in gym class?\" I asked.\n\n\"Sure,\" she replied. \"He was climbing the rope and fell. I came in just after it happened.\"\n\n\"Actually, you came in and caused it to happen,\" I grinned. \"Tommy saw you in those pink sweats you used to wear with the word \"Soccer\" across the ass and fell.\"\n\n\"Really?\" she asked with a laugh. I nodded. \n\n\"Can you blame him? You have one hell of an ass!\" I said, rather daringly I thought. Once again I felt a piece of cheese hit me in the head. This time it was only Jill looking down at us.\n\n\"Will you two please shut up!\" she snapped. \"I can't hear a thing!\"\n\n\"Sorry,\" Carrie and I said in unison. Jill shook her head and disappeared again. We sat quietly, but I wasn't really interested in the movie. Instead, I found myself looking at Carrie.\n\n\"You're staring,\" she whispered after a while.\n\n\"I'm sure you're used to it,\" I shrugged. She shook her head, but kept watching the movie. That was fine with me. I kept watching her.\n\n\"Do I have something on my face?\" she joked, obviously a little uncomfortable with me looking at her.\n\n\"Yes,\" I said, surprising us both, me probably more than her. \"Two lips I want to kiss again.\" She looked at me and smiled as I slowly moved toward her. Our lips touched and it was much better than the first night. She didn't just want to kiss. She wanted to kiss me. It probably didn't hurt that I wasn't freaked out this time either.\n\nCarrie tasted spectacular and I let my tongue brush against her lips tentatively. I wasn't sure how she would react and I didn't want to cause a scene, not with Tara and Jill in the room. I didn't have to worry. Carrie's mouth opened slightly. I took advantage and worked my tongue along her lips. I heard her stifle a moan just before her tongue touched mine. \n\nI'm not sure how long we kissed liked that, but somewhere in the middle I moved my right hand and grazed the side of her left breast. She didn't react so I rested my hand on it and started rubbing in small circles. Carrie caught my hand in both of hers and pulled it away. She stopped kissing and looked at me. I could see her surprise, but also her desire. I sat there staring into her eyes waiting for her to make a decision. Slowly, she smiled and put my hand back on her breast.\n\nI leaned forward and started kissing her again as I felt her nipple harden under my touch. Carrie had nice size breasts, not too big and not to small. Playing with them made my cock stiffen considerably. My jeans were getting uncomfortable. I took a moment to adjust myself. Carrie noticed what I was doing and smiled. She saw the lump in my pants and raised an eyebrow. I shrugged and went back to kissing and fondling her breasts.\n\nI was so enmeshed in the feel of her breasts under her sweater that it took me a moment to realize that she was resting her hand on my hard on. I moaned into her mouth softly. She pulled back from our kissing and looked into my eyes as she used her finger to map the outline of my cock through my jeans. We were both panting by now.\n\n\"Why don't you two take it to the other room? There's a pull out couch,\" I heard Tara say. Carrie and I both jumped and pulled away from each other in surprise.\n\n\"Tara, you're such a spoilsport!\" Jill complained. \"I was enjoying their show a lot better than the movie we picked!\" They were once again looking down at us from the edge of the bed.\n\n\"I think it's time for the hot tub,\" Carrie grinned.\n\n\"Maybe even a cold shower first,\" Tara joked.\n\n\"I may need one,\" I put in, only half in jest. I had no intention of getting up until I calmed down. \"Why don't you three get changed first?\"\n\n\"Having problems?\" Jill asked with a knowing grin.\n\n\"I wouldn't call it a problem,\" I smiled, but I was blushing as well.\n\n\"Let's go ladies,\" Carrie said. \"We'll get changed in the other room.\"\n\n\"Now who's being the spoilsport?\" Tara grinned.\n\n\"Joel, you get changed and start the hot tub,\" Carrie said, ignoring Tara's comment. I nodded and the three left. I caught myself staring at their asses again. As soon as the door closed I heard giggling.\n\nI changed quickly and put on the water to the hot tub. I took another sip of my drink as I waited for the ladies to return. They took a while and I could hear them giggling every so often. I didn't mind the wait. It gave me time to calm down.\n\n\"I hope this isn't all a dream,\" I sighed to myself. I finished my drink and refilled all of our glasses.\n\n\"Are you ready?\" Jill called from the other room.\n\n\"Sure!\" I called back, not sure exactly what she meant.\n\n\"Here we come!\" Tara laughed. The door opened and the three ladies walked in. They were all wearing robes. Tara was the first to take hers off. My mouth fell open and I didn't even bother to try and hide my almost instant erection.\n\n\"I'd say he likes what he sees,\" Jill grinned. I nodded dumbly. They weren't kidding when they said they'd be wearing their skimpiest bathing suits.\n\n\"You like?\" Tara smiled, spinning about slowly. Her skin was pale. It went well with her dark hair and suit. I knew she had a nice ass, but even I didn't realize just how nice it would look uncovered! Her bathing suit wasn't quite a thong, but it was close.\n\n\"You look amazing!\" I finally got out.\n\n\"How about me?\" Jill asked, as she dropped her robe and spun around. Her muscles were even more defined then I thought, but they weren't masculine looking. She was wearing a thong. Her suit was yellow and orange and fit her personality. Her ass was just as attractive as Tara's, but in a totally different way.\n\n\"Joel, you're drooling,\" Carrie teased.\n\n\"Not yet,\" I smiled. \"Take off that robe.\" She grinned and added her robe to the others on the floor.\n\n\"Now he's drooling!\" Tara laughed. I wasn't, but it was close. Carrie was very tan and it went well with her hair. Her breasts filled out the top of the suit nicely. Her golden tan made her heart shaped ass extremely tantalizing. The bathing suit was a string bikini, leaving nothing to the imagination.\n\n\"Our turn to take a look!\" Jill said. \"Joel, stand up.\"\n\n\"Um...\" I began, clearly embarrassed.\n\n\"Just think of it as a way of showing us how much you appreciate how hot we look,\" Carrie grinned. I shrugged and stood self-consciously. \n\n\"I'd say that's some appreciation,\" Tara said, her eyes flashing lustfully.\n\n\"Damn!\" Jill cried with a shake of her head. \"Carrie, you lucky bitch!\"\n\n\"You can say that again!\" Carrie laughed as she walked up and gave me a hug. If anything, my cock hardened more. She rubbed up against it mercilessly. \n\n\"Not yet!\" Tara giggled, pulling Carrie away from me. \"It's time for the tub.\"\n\n\"I wouldn't mind another drink,\" Jill put in. I gave them their refilled glasses.\n\n\"Trying to get us drunk?\" Tara asked.\n\n\"Like you ladies need it!\" I snorted.\n\n\"You know,\" Jill grinned. \"We should invite guys more often. It's a whole new experience!\"\n\n\"I'll say!\" Tara laughed.\n\n\"I wouldn't mind Joel coming with us again,\" Carrie put in.\n\n\"You wouldn't mind Joel doing quite a few things,\" Jill retorted.\n\n\"Ladies, let's get into the tub,\" I said. \"I can't take much more of this talk.\" They giggled. \n\nTara was the first in the tub, followed by Jill and then Carrie. I went last and Carrie gestured to the place next to her. I happily complied. It was a big tub, but it was cozy with the four of us in it.\n\n\"Now what?\" I asked.\n\n\"We gossip!\" Jill replied. I moaned.\n\n\"Oh brother!\" \n\n\"It's fun!\" Tara laughed. \"For instance, wait until you hear who's dating Mr. Henk.\"\n\n\"The track coach?\" I asked in surprise. \n\n\"Not one of the students?\" Jill added.\n\n\"Not this year's student,\" Tara replied meaningfully. \"But I hear that Gina Davies from last year may actually be moving in with him.\"\n\n\"It makes sense,\" Carrie said. \"She was on the track team.\"\n\n\"I thought she had better taste,\" Jill frowned. \"Mr. Henk is such a letch!\"\n\n\"I wouldn't be too quick to judge,\" Tara said. \"What about your and Mr. Seafer?\" \n\n\"You slept with Mr. Seafer?\" I asked in awe. \n\n\"Leave him out of this!\" Jill snapped at Tara, and then turned to me and said, \"I did not sleep with him.\"\n\n\"What about the kiss?\" Carrie asked knowingly.\n\n\"It was one kiss!\" Jill cried. \"In fact it was a birthday kiss.\"\n\n\"Teachers don't normally kiss students on their birthdays,\" I snorted, thinking about how wrong I was about Mr. Seafer. I always thought he was a good guy.\n\n\"Oh, it wasn't my birthday,\" Jill smiled slightly. \"It was his.\"\n\n\"Huh?\" I asked intelligently. \n\n\"Look, it's really no big deal,\" Jill said, no longer smiling. \"I was leaving work one night in the fall when he stumbled out of a nearby bar. He was pretty drunk so I gave him a ride home. It turns out his wife dumped him the week before. He was miserable. I was feeling pretty bad for him, so I helped him to his front door and gave him a birthday kiss.\"\n\n\"Wasn't there some tongue action involved on his part?\" Tara prompted. Jill sighed.\n\n\"Yes, but I don't think he realized what he was doing,\" Jill admitted. \"Like I said, he was drunk.\"\n\n\"What happened the next day?\" I found myself asking.\n\n\"Are you kidding?\" Carrie asked. \"Poor Mr. Seafer damn near quit and turned himself in to the school board.\"\n\n\"It took quite some time to convince him to forget it ever happened,\" Jill sighed. \"He's a nice guy. He never tried anything else with me.\"\n\n\"That's some story,\" I said with a shake of my head. \n\n\"Yes, it is,\" Jill sighed. \"And if I ever hear that you told someone it, I'll hunt you down and kill you.\"\n\n\"Not to worry,\" I smiled. \"I can keep a secret.\"\n\n\"Prove it,\" Carrie said.\n\n\"Okay,\" I frowned. \"Did you guys know that Franky Collins is gay?\"\n\n\"Really?\" Tara asked in surprise.\n\n\"Of course not!\" I said between laughs. \"I can't tell you any secrets I'm keeping. That would be breaking my word.\"\n\n\"Bastard!\" Tara snapped, splashing water at me. Carrie and Jill laughed along with me. I buried my face in Carrie's shoulder to protect my eyes. It gave me one hell of a view of her breasts.\n\n\"Naughty, naughty,\" Carrie whispered in my ear. She knew where I was looking. In answer I brushed one of my hands along her thigh under the water. She retaliated by squeezing my cock. Carrie was certainly not shy! I forgot about everything else for a moment and kissed her.\n\n\"Wow!\" Jill said. \"That looks like one hell of a kiss!\" I broke away from Carrie and blushed.\n\n\"He is a good kisser,\" Carrie admitted.\n\n\"Better than Roy Tolver?\" Tara asked.\n\n\"Yes.\"\n\n\"Bull!\" Jill put in. \"I kissed Roy sophomore year. No one kisses like him!\"\n\n\"Who is this guy Roy?\" I asked.\n\n\"He's from Millton Academy,\" Carrie answered. \"It's an all boys school.\"\n\n\"We always get invited to their dances,\" Tara put in. \"Roy is just one of the guys there.\"\n\n\"And all three of you kissed him?\" I asked in amazement.\n\n\"Not on the same day!\" Carrie laughed.\n\n\"Not even the same year,\" Tara put in.\n\n\"Now I'm jealous of a guy I've never met!\"\n\n\"I can fix that!\" Jill laughed and moved toward me. It was obvious what she planned.\n\n\"Hey!\" I cried in surprise, my eyes darting between Carrie and Jill for a moment.\n\n\"It's okay,\" Carrie said. \"You can kiss her if you want.\"\n\n\"I thought you said you three weren't like that?\" I asked in confusion, not quite grasping what was happening.\n\n\"I lied,\" Carrie grinned, but Tara shook her head.\n\n\"We aren't really,\" she put in, moving closer as well. Her eyes promised things that sent a chill right through me.\n\n\"The truth is,\" Carrie said, smiling. \"That two months ago we came here to celebrate Tara's eighteenth birthday.\"\n\n\"She's the youngest,\" Jill put in helpfully.\n\n\"She'd just broken up with her boyfriend and Jill refused to date high school boys anymore after the fiasco with Todd last semester,\" Carrie said, slipping her hand past the band of my bathing suit. \n\nHer hand quickly found my cock. She squeezed it once before grabbing hold and starting to work it back and forth. I moaned. Carrie certainly knew what she was doing. The weirdest part was she didn't even bother stopping her explanation. \"I was dating Jimmy and as usual, we were fighting.\"\n\n\"I decided to have some fun and brought a couple of porn movies I found in my brother's closet,\" Jill said, taking over the explanation. \"I figured we watch them, make fun and have a great time.\"\n\n\"Which is exactly what we did,\" Tara added. \"The only problem was that the movies also made us extremely hot. There was one with a crazy sorority lesbian scene.\"\n\n\"Jill was always the horniest out of us,\" Carrie grinned. \"I suggested that we use the hot tub. Jill said we should try it nude.\"\n\n\"Which we did,\" Tara giggled. \"And the night got even better after that!\"\n\n\"We've met a couple of times since, but you're the first person we invited to join us,\" Jill smiled as she leaned forward and parted her lips. I looked at Carrie one more time. She nodded to let me know it was real, but for some reason I still hesitated.\n\n\"Maybe he needs a little push,\" Tara said, moving close to Carrie.\n\n\"Joel, you're not dreaming,\" Carrie laughed. It was almost as if she were reading my mind. I let out a long slow breath. She suddenly winked at me saucily and kissed Tara right in front of me. I sat there momentarily stunned. I could see their tongues working in and out of each other's mouths.\n\n\"Are you ready for this?\" Jill asked me, drawing my attention back to her. She licked her lips sexily. I looked at her and nodded slowly. Jill was very dark skinned. It was quite a turn on. I leaned forward and kissed her full lips. Her tongue thrust into my mouth and I met it with my own. We continued for a couple of minutes.\n\n\"He is a better kisser than Roy!\" Jill sighed when we finally broke apart.\n\n\"I've never kissed a black girl before,\" I admitted. \"I like it a lot.\"\n\n\"Good,\" she smiled. \"If you're lucky, maybe we'll have some fun later and you can satisfy a couple more firsts with a black woman.\"\n\n\"Come here,\" Tara demanded as she broke away from Carrie and stood. \"It's my turn.\" I stood willingly. She had the most beautiful eyes I'd ever seen. They were even more amazing filled with lust. Her lips were nothing like Jill's, but the kiss was just as fulfilling.\n\n\"Holy shit!\" I cried when I felt two sets of hands pull down my bathing suit. I glanced down and saw Carrie's mouth only inches away from my cock.\n\n\"Just remember,\" she said. \"This is between the four of us. You said you could keep a secret.\"\n\n\"Who would believe me if I told them?\" I asked. Carrie laughed briefly before taking my cock into her mouth. I pulled Jill up next to Tara.\n\n\"Kiss each other,\" I said. \"I want to watch.\"\n\n\"Sounds good to me!\" Jill laughed. Tara didn't bother to speak. She just grabbed hold of Jill's neck and pulled the black woman's mouth to her own. I looked down and saw Carrie really working my cock. I shook my head once.\n\n\"Mind if I join you?\" I asked Jill and Tara. They didn't respond with words, however Jill shifted to one side. I pulled them closer and thrust my tongue into their mouths. The kiss quickly developed into a sloppy three-way affair.\n\n\"I'm getting cold,\" Tara said a few minutes later. \"Lets get back in the water.\"\n\n\"Not yet!\" I groaned. \"Carrie's got me close!\"\n\n\"You're going to fall when you...well you know,\" Jill said with a shake of her head. \"You can sit over there.\" She was pointing at the ledge of the tub. There was a spot that looked perfect for what was happening. I nodded once and made my way over. I sat and sighed happily as Carrie once again fell on my cock.\n\n\"I wonder how many guys have sat in the same place, getting the same type of attention,\" Tara grinned as she settled into the water.\n\n\"Probably quite a few,\" Jill smiled as she joined the dark haired girl.\n\n\"Yeah, but none of them were lucky enough to be here with you three!\" I groaned. Tara and Jill looked at each other and started laughing, but it was short lived. They fell into another passionate kiss. Tara pushed Jill's bathing suit aside and pinched the black girl's nipples. I couldn't see Tara's hands, but I knew they were busy under the water. I watched them as Carrie continued to focus on my cock. It wasn't long before I started cumming.",
        "\"Yes!\" Carrie cried, drawing the attention of the other two ladies to my orgasm. Carrie took some of my cum into her mouth, but the bulk of it landed on her bathing suit and chest. Toward the end she freed her breasts and let the last few jets on my cum cover her nipples.\n\n\"Wow! That's a lot of cum.\" Jill said as she stared at Carrie breasts. \"I want some!\"\n\n\"Me too!\" Jill added lustfully. They moved to Carrie and fell on her breasts, licking as much of my cum as they could reach. They both seemed to take a long time at Carrie's nipples. I groaned and felt my softening cock come back to life despite my recent orgasm.\n\nI pulled Carrie away from the others when her breasts were clean and sat her on the ledge in my place. I got between her legs, moved her bathing suit to one side and buried my face in her pussy. Carrie gasped out and grabbed my head, directing my tongue. I went with it.\n\n\"Shit!\" Carrie finally gasped out. \"If you think he's a good kisser, you should feel how good he is at this!\"\n\n\"Better than Tara?\" Jill asked as she sat next to Carrie. Tara grinned and fell between the black girl's legs.\n\n\"I'm not sure,\" Carrie panted. \"We'll have to see.\"\n\nTara and I continued to lick the other two, who were both obviously enjoying what we were doing. I used the hand closest to Tara to reach under her and push under her bathing suit. I gently rub her pussy.\n\n\"Thanks!\" she cried.\n\n\"What's he doing?\" Carrie asked.\n\n\"Rubbing me. His fingers seem to know just the right places to touch!\"\n\nI silently thanked my last girlfriend. She was a virgin when we met, but that didn't last very long. Connie wasn't my first, but she was the demanding sort and by far the best once we got serious, at least until now. It was too bad her father got transferred across country. I'm sure she would have loved a situation like this, or at least I certainly would have.\n\n\"Oh wow!\" Carrie cried as I drove my tongue deep into her and then pulled out and concentrated on her clit. She tensed up and came in no time. I continued to lick her until she was done. Afterward I fell back into a seat to enjoy the hot water while I watched Tara and Jill. Carrie joined my once she was able to focus again.\n\n\"You seem to be enjoying yourself,\" she said with a smile as she settled next to me.\n\n\"I am,\" I shrugged. \"What guy wouldn't?\"\n\n\"You know, despite all this,\" she said carefully. \"I really do like you.\" This surprised me for some reason. I took a moment to work it out.\n\n\"But didn't you dump Jimmy for sleeping with other women?\" I finally asked. Carrie shook her head.\n\n\"No, not really,\" she replied. \"I dumped Jimmy for being a lying ass and cheating on me. If he had asked me, I might have let him have his fun.\"\n\n\"Really?\" I asked in disbelief.\n\n\"Well, maybe if he let me join in,\" Carrie admitted with a smile. I shook my head and she burst out laughing.\n\n\"Let's dry off and get something to drink,\" I finally said. \"It's really hot in here.\"\n\n\"And...\" Carrie asked knowingly.\n\n\"Well, there is that king size bed just waiting for someone to use,\" I admitted. Carrie giggled and stood.\n\n\"Sounds good to me.\"\n\n\"Wait!\" I cried before she could climb out. I untied her bathing suit top. It was all disheveled anyway. \"Let's leave this here.\" Carrie smiled and pulled off her bottoms. I gave her body a long look before getting out of the tub. I helped Carrie over the edge. I was tempted to grab her ass, but was afraid of her reaction. That didn't stop me from looking.\n\nWe kissed briefly and then started drying each other. Carrie grinned and started stroking my cock through the towel. I didn't mind. I was busy making sure her breasts were really, really dry. It wasn't long before I took her hand and led her to the bed.\n\n\"What about our drinks?\" Carrie asked.\n\n\"Later,\" I nearly grunted. \"I want you now.\"\n\n\"I'm all yours,\" Carrie said as she lay on the bed. Her eyes flashed with her excitement. She held her arms open to me. I hugged her and kissed her passionately. Carrie reached between us and directed my cock to her pussy. We were both clearly ready. I pushed in with one long stroke. Carrie gasped.\n\n\"Wow!\" I said once I was all the way in. \"So this is what this feels like!\"\n\n\"What?\" Carrie asked as she fought for her breath.\n\n\"Being in the hottest girl in school,\" I smiled. Carrie rolled her eyes, but I knew she liked the complement. I started moving in and out of her slowly at first.\n\n\"Oh my!\" she cried between strokes. \"You're definitely bigger than Jimmy!\"\n\n\"How about compared to the other guys you've been with?\" I asked, honestly curious. I knew I was big based on what some of my old girlfriends told me, but not really how big in comparison to other guys.\n\n\"There were no others!\" Carrie gasped. \"Now shut up!\"\n\nI was surprised by her admission at first, but then I remembered that she and Jimmy had been dating on and off again for years. I leaned forward and kissed Carrie as I continued to push in and out. I picked up the pace and she moaned.\n\nCarrie was really wet and we made an amazing sound with each of my thrusts. It wasn't long before we were both nearing an orgasm.\n\n\"Joel!\" she finally gasped. \"I'm so close!\"\n\n\"Not yet!\" I panted and pushed two of my fingers into her mouth in an attempt to distract her. I wanted us to cum together. Carrie sucked them in and started working them like a cock. It was an incredible sight! Her face was filled with such passion and desire! I pulled my fingers free when I was ready. Carries eyes snapped open and she looked ready to complain.\n\n\"Now!\" I cried before she could say anything. I leaned forward and thrust my tongue into her mouth while my hips started blurring as I moved as fast as I could.\n\n\"Oh yes!\" Carrie cried. \"I'm almost there! Don't stop! Here...I...cum!\" I slammed into her one last time and we both came together. Carrie shivered and shook under me as I grunted and pumped as much cum as I could into her.\n\n\"That was amazing,\" Carrie said afterward as we lay panting side by side.\n\n\"Yes, it was,\" I smiled.\n\n\"We agree!\" Jill said.\n\n\"And how!\" Tara put in. They were both standing on the side of the bed. They were nude and dry.\n\n\"Did you enjoyed the show?\" I asked with a grin. They obviously were watching for quite a while.\n\n\"Of course,\" Jill replied as she sat on the side of the bed. Tara joined her.\n\n\"We thought about joining in,\" she said. \"But decided to give you two your first time alone, so to speak.\"\n\n\"Thanks,\" Carrie said, obviously meaning it. I nodded in agreement.\n\n\"You're welcome,\" Jill smiled.\n\n\"Now spread your legs,\" Tara said to Carrie without preamble. \"I like the taste of his cum!\"\n\n\"There is quite a bit of my own down there,\" Carrie said with a smirk.\n\n\"Good! Let see how they taste mixed!\"\n\n\"You are such a slut!\" Jill laughed as Carrie spread her legs and Tara got between them.\n\n\"You're just mad because I thought of it first!\" Tara giggled.\n\n\"True,\" Jill admitted with a sigh. \"I'll go get us all something to drink in the other room.\"\n\n\"I'll see you later,\" I said to Carrie giving her a kiss. \"I'm going to help Jill.\" She knew what I meant.\n\n\"Just be sure to come back,\" Carrie answered. \n\n\"Don't worry, I will,\" I smiled.\n\n\"I don't know,\" Tara teased. \"You know the old saying, 'Once you go black, you never go back.'\"\n\n\"Hey!\" Carrie cried. I laughed and kissed her again.\n\n\"Don't worry,\" I said softly. \"I have plans for us.\" She smiled warmly. It was at that moment that Tara dipped her tongue into Carrie's sticky pussy. Carries eyes flashed from warmth to lust instantly. I shook my head and added, \"Just be sure Tara doesn't turn you into a lesbian or something.\"\n\n\"Not likely,\" Carrie laughed. \"Don't worry. I have plans for us as well.\" I smiled and nodded before turning and leaving the bedroom.\n\n\"I couldn't wait,\" Jill said as I entered the other room. She was lying on her stomach on one arm of the couch. Her ass was in the air and she was using one hand to play with her pussy. The pink opening was in stark contrast to her ebony skin.\n\n\"Sorry I'm late,\" I grinned, moving toward her.\n\n\"Make me cum half as hard as you did Carrie, and all is forgiven.\"\n\n\"Deal!\" I laughed, and then bent forward and thrust my tongue into her pink opening. I was tempted to kiss her ass, but decided not to push my luck. I wasn't going to blow my chance at fucking a black girl just because I was a perverted son of a bitch who liked asses.\n\n\"Oh yeah!\" Jill cried. \"You are very good with your tongue!\"\n\n\"Well, if you like that,\" I said. \"You're going to love this!\" I stood and pushed my cock into her pussy from behind.\n\n\"Fuck! Yeah!\" Jill cried. I was barely all the way in before she came the first time. There was no way I was stopping so I continued to stroke in and out of her until she was ready again.\n\n\"This looks incredible!\" I said, watching my white cock pushing in and out of her black pussy as I neared my orgasm. She was my first black woman. Her dark ass shook with each thrust, turning me on even more!\n\n\"It feels even better!\" she gasped out. I grabbed hold of her hips and start seriously riding her. \"Oh yeah! Stuff me with that big white cock of yours!\" Jill was pinching her nipples with one hand while the other slipped under her and started massaging her clit. Her head rested against the top of the couch. She had positioned herself so that sofa was holding her in position.\n\n\"I'm going to cum!\" I grunted. \n\n\"Good!\" Jill cried. \"Because I'm going to orgasm too!\" I held off as long as I could. Jill surprised me by gasping out, \"Come on! Be the first white guy to fill me with his cum!\"\n\n\"Go ahead,\" I heard Carrie say. I glanced up and saw her watching. I held out my hand until she took it. I pulled Carrie into a hot and messy kiss. She returned it and then pulled away.\n\n\"Finish me!\" Jill cried.\n\n\"Do it,\" Carrie said once again. \"It's my turn to taste your cum mixed with a woman's.\" I took hold of Jill's hips and rammed my cock in and out of her three or four times as hard as I could before finally cumming. The black beauty under me was only a few seconds behind me.\n\n\"Tara's waiting for you in the bedroom,\" Carrie said to me once we were done. \"I promised I'd send you to her with Jill's cum still dripping from your cock. Go ahead. I'll take care of Jill.\"\n\n\"Promise?\" Jill sighed. She hadn't moved from her position on the couch. Carrie winked at me before giving the black girl her full attention.\n\n\"You better believe it!\" Carrie laughed and took my place behind Jill. I watched as she licked around the edges of Jill's pussy. She knew I was watching. Carrie smiled and met my gaze as she slowly pushed her tongue deep. I reached out, gave her breasts one last squeeze and then forced myself to go the bedroom and Tara.\n\n\"How's Jill?\" Tara asked from the bed.\n\n\"Busy,\" I smiled as I walked over and lay next to her. \"Carrie is doing what you were doing to her as we left.\"\n\n\"You mean she's eating your cum out of Jill's pussy?\" Tara smiled. She saw my expression and laughed. \"I like talking dirty.\"\n\n\"I gather so.\"\n\n\"Does it bother you?\" Tara asked. I looked into her blue eyes and shrugged. She smiled and added, \"In that case, take that big cock on yours and fuck me until I beg you to stop!\"\n\n\"If you insist,\" I smiled. \"But first you'll need to revive it. I'm pretty spent.\"\n\n\"Think I can do it?\" she grinned as she moved off the bed.\n\n\"I wouldn't bet against you.\"\n\n\"Smart man,\" she said. \"Now come sit on the edge of the bed.\"\n\nI went where she directed. Tara sank to her knees on the floor in front of me. She smiled up into my face before leaning forward and sucking the head of my cock into her mouth. Her startling blue eyes never left mine.\n\n\"You taste like Jill's pussy!\" she said softly, her hot breath caressing my cock. \"Don't you just love the contrast between her dark skin and pink pussy?\"\n\n\"It was nice,\" I admitted. Tara smiled knowingly and went back to my dick for a while.\n\n\"Do you like your balls played with?\" she asked suddenly. My cock jumped at the question and she laughed, adding, \"I'll take that as a yes.\" Her tongue slipped to my balls. \n\n\"You like my eyes?\" she asked after she had me hard once again. I nodded again. \"My last boyfriend said that they're my best feature.\"\n\n\"They're strikingly beautiful,\" I said honestly.\n\n\"Thanks,\" she said. \"But don't you think my ass is even better?\"\n\n\"Well,\" I said, not believing the conversation I was having with Tara despite everything that had already happened. \"It is very nicely shaped from all that dancing you do, but your eyes...\"\n\n\"Wait, don't judge yet!\" she said, interrupting me as she stood and spun until her back was facing me. \"You need to get a good look at my ass to be fair.\"\n\nI shook my head as Tara stood on her tiptoes and damn near thrust her ass into my face. I was in heaven! The blue-eyed beauty was giving me perfect access to the body part I liked best in women. Unable to resist, I leaned forward and kissed it.\n\n\"I told you I had a great ass!\" she laughed.\n\n\"It is that,\" I admitted.\n\n\"How would you like to have it?\"\n\n\"You're serious?\" I asked in disbelief. Tara turned and faced me.\n\n\"Joel,\" she said carefully. \"I know it's crazy, but I'm still a virgin, at least technically. I'd like to remain that way until I meet the man of my dreams.\"\n\n\"I'm not him?\" I teased, stalling for time. As I said before, I love asses, but no one ever offered me hers before. I tried to bring it up with two of my ex girlfriends. The first left and dumped me the next day. Connie wasn't as cold, but she didn't like to even talk about it.\n\n\"Please!\" Tara said sarcastically. \"If anything, you're the man of Carrie's dreams.\"\n\n\"You think so?\" I asked in surprise.\n\n\"Maybe,\" she admitted. \"She really does like you. But that's for you two to work out later. Right now we're talking about us.\"\n\n\"Tara, I understand,\" I sighed. \"Come here.\"\n\n\"So, you're okay with this?\" she asked tentatively. \n\n\"I'll let you know when we're done,\" I shrugged. \"I've never done this before, but it's been my biggest fantasy for as long as I can remember.\"\n\n\"Oh, you're going to love this if you have an open enough mind!\" she promised as she climbed into the bed. She thrust her ass toward me and added, \"Come and get it!\"\n\n\"You're crazy!\" I laughed as I move between her legs. I licked her pussy for a while and then let my tongue drift up to her ass tentatively. It didn't taste bad at all. In fact I liked the taste!\n\n\"Oh yeah!\" Tara cried. \"Eat my ass! Get it ready for that big fat cock of yours!\" I did just that. My face was buried between her ass cheeks for quite a while as I rimmed out her ass. The smell was more intoxicating than anything else! Tara seemed to love every moment of it.\n\n\"Are you ready?\" I asked.\n\n\"More than ready!\" she replied, reaching back and holding her ass cheeks wide. I rubbed my cock up and down her crack before directing the head to her pink rosebud. I push until the head popped past her opening. She cried \"Slowly!\"\n\nIt took some time to work my cock into her, but I was patient and Tara was willing to put up with at least a little pain. Eventually I was all the way in.\n\n\"That feels incredible!\" she sighed loudly when she felt my hips touch her ass. \"Now start fucking! Fill my ass!\" I shook my head, shrugged and then started moving. It wasn't long before I was slamming in and out of her ass.\n\n\"That looks painful!\" Jill said from one side of the bed.\n\n\"It is,\" Tara admitted between groans. \"But in a good way. Now shut up and don't distract us! I want to feel his cum fill my ass!\"\n\n\"You really are one sick little bitch,\" Carrie said from the other side of the bed. I looked at her nervously. She saw me and smiled into my eyes before adding, \"Maybe we'll try that later.\"\n\n\"I would like that,\" I grinned, relaxing visibly. \"Now why don't you help Tara reach her orgasm?\"\n\n\"With pleasure!\" Carrie giggled, and then climbed onto the bed and slipped under the dark haired girl. \n\n\"Oh yes!\" Tara cried. \"What could be better than a dick in your ass and someone nibbling on your clit?\"\n\n\"How about a nice chocolate pussy to eat at the same time?\" Jill asked as she climbed onto the bed as well. Tara helped her get comfortable. I could see the blue-eyed girl's tongue dart into Jill's ebony depths. I also felt Carrie tongue brush against my balls.\n\n\"Oh yeah!\" I cried. \"You three are going to be the death of me!\" They giggled. \n\nI continued to watch Tara eat Jill's pussy as I fucked the pale skinned girl's ass. I was even able to reach over and use my fingers on Carrie's pussy. I heard her groan. I smiled and closing my eyes briefly, enjoying what was going on with my other senses.\n\nMy fingers at Carrie's pussy were already sticky with her juices. Tara had finally gotten used to the size of my cock. I could feel the smoothness of each stroke. I loved the sound and feel of my hips slapping against her ass. Occasionally one of the ladies would moan, sending a thrill though me. I could hear Tara and Carrie's sloppy kisses as they took care of their friends. The smell was the most intoxicating of all. I'd never smelled a room so full of sex! \n\n\"Tara! Cut that out!\" Jill cried, causing me to open my eyes. I looked up and saw Tara driving her tongue in the black girls' ass. Tara also had two fingers up Jill's pussy.\n\n\"Not until one of us cums!\" Tara panted.\n\n\"But it's so sick!\" Jill cried.\n\n\"That's your brain thinking. Shut it off and just enjoy the feeling.\"\n\n\"Is that what you do?\" Jill asked.\n\n\"No,\" Tara laughed. \"I've a twisted mind. I like thinking about it!\"\n\nI picked up the pace and she fell silent. It wasn't long before she started cumming. I couldn't blame her. Not with her face pressed up against Jill's dark ass, Carrie's tongue teasing her clit and my cock buried in her ass. The only problem was that I wasn't ready to join her yet.\n\n\"Don't stop!\" Tara cried as I pulled out, but I ignored her.\n\n\"What are you doing?\" Jill said nervously as I pulled her to the side of the bed and laid her on her stomach with her hips hanging over the edge. Her pussy and ass were soaked. I pushed into her pussy for a couple of strokes before pulling out and pushing my cock into her black ass. She gasped, but didn't stop me.\n\n\"He's fucking my ass!\" Jill said, sounding amazed.\n\n\"And doing quite a job of it,\" Tara grinned as she moved to watch. She looked at me and added, \"I should be mad at you for not cumming in my ass, but I'll forgive you considering the show you're giving!\" I didn't bother answering.\n\n\"He's the first guy to fuck me there!\" Jill cried, stating the obvious.\n\n\"Another first,\" I joked as I picked up the pace. Carrie moved and stood next to me. I pulled her into a kiss. It was a bit rough because of my mental state, but she didn't seem to mind.\n\n\"Thanks for sharing your friends with me,\" I said.\n\n\"Maybe one day you can return the favor?\"\n\n\"Maybe,\" I replied seriously. \"I'd love to see how Robbie and Tina would handle the opportunity.\"\n\n\"Hey! I was just kidding!\" Carrie said.\n\n\"You're call,\" I shrugged. \"But I'm up for it.\"\n\n\"You'd share me with another guy?\" Carrie asked in surprise.\n\n\"Like the idea of two cocks in you at the same time?\" I asked in reply. She surprised me by blushing.\n\n\"We'll talk about it later,\" I promised.\n\n\"Good!\" Jill panted. \"Now will you please focus on fucking my ass? I can't take much more of this!\"\n\n\"Go ahead,\" Carrie grinned. \"Fuck the captain of the cheerleader's big, black ass! You know you want to!\"\n\n\"Are you taking lessons in talking dirty from Tara?\" I grunted as I grabbed hold of Jill's hips and started picking up the pace once again.\n\n\"Who do you think taught her?\"\n\n\"You're killing me,\" I groaned. \"Now go kiss Jill.\"\n\n\"Yes, master,\" she teased.\n\n\"Oh fuck!\" I panted. \"If you go there I think I really will die!\"",
        "\"Maybe another time,\" she laughed as she climbed onto the bed and started making out with Jill. I saw that Tara had her hand under the black girl. She was obviously playing with Jill's pussy.\n\n\"I'm going to cum soon!\" I cried not long after. Tara started slapping Jill's clit with two fingers.\n\n\"Oh shit!\" Jill cried. Carrie pulled the black girl's face between her breasts. Jill kissed and licked wildly before tensing up in orgasm.\n\n\"I'm cumming!\" I cried, but before I could let loose, Tara pushed me back until my cock popped out of Jill's ass.\n\n\"I told you before! I love the taste of your cum!\" she said as she directed my cock to her mouth. \n\n\"Then get ready!\" I gasped. \"Because...here...I...cum!\"\n\n\"Oh yeah!\" Tara cried as she drank down my orgasm.\n\nI crawled onto the bed, pulled Carrie into a hug and damn near passed out afterward. We kissed for a while before falling asleep briefly in each other's arms. I woke up to an empty room. I blinked twice and looked around. All three ladies were gone. I frowned and wondered briefly if it was a dream. I smiled. The room still stank of sex. It wasn't a dream.\n\n\"Hello,\" Carrie said as she walked in the room from the bathroom. \"Jill and Tara went down to the pool.\"\n\n\"In those bathing suits?\" I asked, remembering just how provocative their suits were.\n\n\"No!\" Carrie laughed. \"They brought others just in case they wanted to go for a swim.\"\n\n\"How come you didn't join them?\" I asked.\n\n\"Because I wanted to be here when you woke up,\" she replied, sitting on the bed. She was still naked, but for the moment, sex was the last thing on my mind. Okay, maybe not the last, but down the list because I was worried about what Carrie was going to say. Her expression was not relaxed.\n\n\"Are you okay with what happened?\" I asked.\n\n\"That's what I was going to ask you.\"\n\n\"I'm fine,\" I replied. \"Honestly, better than fine. This was a dream come true. There's only one thing that could ruin it.\" \n\n\"What?\" Carrie asked.\n\n\"Well, I hope this hasn't destroyed my chances with you.\"\n\n\"You've already had me,\" Carrie snorted.\n\n\"That's not what I mean and you know it,\" I said. Carrie sat there silently, so I added, \"Why don't you tell me what you're thinking?\"\n\n\"I'm not sure,\" Carrie said with a shrug. \"We joked about this happening when we invited you to play hooky with us, but I'm not sure anyone really though that it would happened, or at least I didn't.\"\n\n\"Are you upset about it?\"\n\n\"That's the funny part,\" she replied. \"I'm not. I had a fantastic time. Being with Tara and Jill these last few months gave me the strength to finally dump Jimmy for good. They are my closest friends in the world and I really didn't mind sharing you with them.\"\n\n\"So then, what's the problem?\"\n\n\"I'm not sure if I can handle what I'm feeling for you so soon after Jimmy,\" she finally admitted.\n\n\"It could just be a rebound thing,\" I offered, not liking the sound of it, but trying to be honest.\n\n\"I've thought about that,\" she sighed. \"I've also thought that perhaps I'm getting the love I feel for Tara and Jill confused with my feelings for you.\"\n\n\"It's possible,\" I admitted. \"But I sincerely hope it's not true.\"\n\n\"Why?\" Carrie asked.\n\n\"Well,\" I said, swallowing hard. \"Just like every guy in the school, I've been half in love with you forever. Knowing you has just made it worse.\"\n\n\"You're getting love confused with lust,\" Carrie said in denial.\n\n\"Maybe on the other guys' part, but not mine,\" I said softly. She looked at me oddly. I met her gaze until she shook her head slowly.\n\n\"You have such honest and open eyes,\" she said. \"I could fall for you.\"\n\n\"So then, why hesitate?\" I asked. \"Unless of course it's because I'm not popular enough.\"\n\n\"Please,\" Carrie said with a roll of her eyes. \"I'm done with dating the popular guys. They're a waste of time.\" She then grinned and added, \"Besides, I told you before. If you hang out with me, you will be a popular guy.\"\n\n\"True,\" I laughed, and then grew serious and added, \"Why don't we just give it time and see what happens?\"\n\n\"I'd like that,\" she smiled.\n\n\"Me too,\" I replied. \"Now please come here and kiss me.\"\n\n\"That bed is a mess,\" Carrie said pointedly.\n\n\"You did your sharing of making it that way.\"\n\n\"Oh, okay,\" she sighed and moved next to me.\n\n\"Here, I have an idea,\" I said, rolling her on top of me. \"Now you're not touching the bed.\"\n\n\"Yes, but I'm getting poked in the stomach instead,\" Carrie said with a sexy smile.\n\n\"Hey, everything comes with a price.\"\n\n\"What's your price?\" she asked, her eyes lit with humor and lust. She looked so enticing that I grabbed her ass and squeezed, pulling her against my hardening cock. She kissed me soundly before laughing and adding, \"Deal! Who knew you were such an ass man?\"\n\nIt took me a moment to realize that she thought my action was an answer to her question. I opened my mouth to clarify, but then quickly snapped it shut. It she was willing to give me her ass, who was I to stop her? \n\nCarrie started sliding up and down the length of my cock, which was trapped between us. We kissed and I lost track of time. Her pussy soon leaked her fluids all over my cock. It wasn't long before she was sliding smoothly and taking longer strokes. \n\nI wasn't surprised when she moved so far up that the head of my cock slipped into her soaked pussy. I was a little taken aback when it didn't even cause her to hesitate. Carrie just slid down, her pussy engulfing my entire length.\n\n\"I love being inside of you!\" I said between kisses.\n\n\"It does feel amazing!\" Carrie panted as she rested her hands on my chest and pushed herself up. Her legs straddled my hips as she continued to ride my cock. I reached up and massaged her breasts with both hands. \n\nCarrie smiled down at me lustfully. She pulled one of my hands from her breasts and moved it to her mouth. I smiled and watched as she took two of my fingers in her mouth and started sucking them like a cock. She picked up the pace.\n\n\"Imaging that my fingers are another cock?\" I asked, my voice filled with lust. Carrie refused to pull my fingers free to answer, but I saw her nod slightly so I added, \"Just say the word and I can make it a reality.\" She moaned around my fingers and slammed down hard on my cock as she let loose a torrent of cum over my cock and balls. She rolled off of me when she was done.\n\n\"Maybe we will find out how your friend Robbie handles the opportunity to share me,\" Carrie said smiling contently.\n\n\"And Tina?\" I asked. Carrie looked at me and laughed gently.\n\n\"Why not? She seemed like a nice girl,\" she said.\n\n\"And she has a really tight ass,\" I mused. \"I've always thought about what it would look like without clothes.\"\n\n\"There you go about asses again!\"\n\n\"Speaking of which,\" I said, moving between Carrie's legs.\n\n\"Let me roll over onto my stomach,\" she laughed.\n\n\"Maybe later,\" I replied, kissing her still hot and sticky pussy. Carrie sighed contently and let her legs falls open. I licked and kissed her pussy for a while before letting my tongue drift down to her ass.\n\n\"That feels weird,\" she said when I started rimming her asshole.\n\n\"Do you want me to stop?\" I asked, almost holding my breath.\n\n\"I said weird, not bad,\" Carrie replied. \"Keep going. I'll tell you if and when I want you to stop.\"\n\nI wrapped one arm around her leg and used to the fingers of that hand to flick her clit as I ate her. I used the fingers of my other hand to stroke in and out of her pussy at the same time.\n\n\"Oh wow!\" Carrie cried. \"That feels great!\" I smiled to myself while I continued working around the edges of her asshole. It wasn't long before I was thrusting my tongue in and out of her ass. Carrie was moaning almost nonstop by now.\n\n\"Does it still feel weird?\" I took a moment to ask.\n\n\"No!\" she panted. \"It might be nasty and sick, but I love it!\" \n\nI pulled my fingers from her pussy when I thought she was close to being ready and reached up and feed them into Carrie's mouth. She sucked my soaked fingers into her mouth.\n\n\"Suck Robbie's cock clean!\" I cried.\n\n\"Oh yeah!\" Carrie nearly growled as she worked my fingers in and out of her mouth. I unwrapped my other arm from her leg and pushed the index finger of that hand slowly into her tight ass. Carrie grunted, but was silent otherwise. I pushed a second finger it once she got used to the first one.\n\n\"How does that feel?\" I asked, starting to lose my patience. I desperately wanted to fuck Carrie's ass, but I knew it would go badly if she wasn't ready. She pulled my fingers from her mouth to answer.\n\n\"I'm ready!\" she smiled. I was tempted to take her at her word, but I had a pretty thick cock.\n\n\"Soon,\" I said, pushing a third finger up her ass.\n\n\"Hey!\" Carrie cried in surprise. I silenced her by thrusting the fingers of my other hand back into her mouth. She grinned and directed a third finger of that hand between her lips.\n\n\"I doubt Robbie is that thick,\" I teased. \n\n\"Maybe he's the one fucking my ass while you're the one in my mouth,\" she joked back. She was holding my finger only about an inch from her mouth.\n\n\"Or maybe it's not Robbie,\" I said, unwilling to lose this point. \"Maybe it's some horse dicked guy we picked up.\"\n\n\"Like Jill's brother Alex?\"\n\n\"This Alex has a big dick?\" I asked in reply.\n\n\"I'm not sure,\" she replied. \"But it fills his bathing suit well when we going swimming at her house.\"\n\n\"Well then,\" I smiled. \"Picture Alex's long, thick, ebony pole stuffed down your throat as I fuck your ass.\" Carrie groaned loudly and took my fingers back into her mouth. She was definitely ready now!\n\nI moved up and lifted her legs onto my shoulders. Her eyes grew big as I directed my cock to her ass. It was slow going despite everything I did to stretch her ass, but she seemed to like how it felt. Carrie never once stopped sucking wildly on my fingers.\n\n\"Whose cock are you sucking now?\" I teased once I was all the way in.\n\n\"Whose do you want it to be?\" she asked as she finally pulled my fingers from her mouth.\n\n\"No one,\" I admitted. \"I want it to be just the two of us for the time being.\"\n\n\"Sounds good to me,\" she grinned. \"But then what am I going to do with my mouth?\" I leaned forward and kissed her once, but I knew I couldn't stay in that position, not with Carrie's legs on my shoulder.\n\n\"Tell me what you feel?\" I asked.\n\n\"I feel like someone is shoving a pole up my ass!\" she laughed, but then gasped in pain as I pushed deep. \"Not that I mind!\" she added, despite the pain.\n\n\"I can't believe that it was Tara who turned us on to this!\" Carrie continued. \"She was always the sweetest and most innocent seeming of the three of us.\"\n\n\"It makes sense in a way,\" I said. \"She's saving herself for the man she loves.\"\n\n\"Oh come on!\" Carrie grunted. \"She might be a virgin technically, but I can tell you from personal experience that she's had some pretty long object in her pussy!\"\n\n\"So then, go ahead and tell me,\" I grinned.\n\n\"Maybe later,\" she said. \"Right now I want to focus on how good your cock feels stuffed up my ass!\"\n\n\"You're a perverted bitch!\" I snapped.\n\n\"Oh yeah!\" she cried, reaching between her legs and rubbing her clit. I picked up the pace until I was slamming in and out of her. Carrie eyes grew bigger as she added, \"Whoa! I'm...going...to...cum!\" I nodded as the fingers rubbing her clit dove deeply into her pussy. Carrie cried out and came. \n\nHer ass was like a vice on my cock! She pulled her fingers from her pussy and a jet of cum sprayed into the air! I grunted and shoved my cock as deep into her ass as it would go.\n\n\"Oh fuck!\" Carrie cried as another orgasm hit. This time I joined her and filled her ass with my cum. We both lay there shivering and shaking for a while.\n\n\"You've finally done it,\" I sighed a few minutes later. \"I'm dead.\" Carrie laughed softly. I joined her.\n\n\"We'd better get up and get showered,\" Carrie said a few minutes later. I was nearly asleep once more. \"Tara and Jill will be back soon and we have to leave.\" I groaned, but forced myself to move.\n\n\"Do you want to come over and study tomorrow after school?\" I asked, suddenly nervous.\n\n\"Why don't we talk about it at lunch?\" she smiled.\n\n\"Well, for one thing I still have one day of suspension left,\" I answered.\n\n\"They didn't count the first day you went home?\" she asked with a frown.\n\n\"Nope,\" I shrugged.\n\n\"Good!\" she said, suddenly smiling widely. \"Maybe I'll take another day off tomorrow.\"\n\n\"I'd like that,\" I admitted. \"You can come to my house.\"\n\n\"Sounds good to me,\" she smiled. It looked like she was going to say more, but she stopped herself.\n\n\"What is it?\" I asked.\n\n\"Well, Tara and Jill won't be with us tomorrow, and I was wondering if you serious about sharing me with another guy?\" I thought about what she was saying carefully. She looked nervous at my hesitation. \"It's not that I don't want to be alone with you. It's just that you kept bringing it up and I've always been curious.\"\n\n\"Can I pick the guy?\" I finally asked.\n\n\"Sure,\" she answered. \"But I was thinking about your friend Robbie, if you think he can keep his mouth shut.\"\n\n\"Oh, he can do that,\" I replied. \"But he and Tina are a couple and I don't think it's right to invite one without the other.\"\n\n\"Still trying to get at her tight little ass?\" Carrie asked knowingly.\n\n\"It only seems fair if Robbie gets yours.\"\n\n\"Okay,\" Carrie laughed, and then added, \"Are you sure they can keep a secret? Also, do you think you can convince them to cut?\"\n\n\"Definitely yes for the first, but I'm not sure of the second,\" I replied. \"Not without telling them why. In fact, I'm not sure they'll go for it even then. You know, they may come over and not be into what we're suggesting at all.\"\n\n\"You just leave that to me,\" Carrie smiled sexily. \"All you need to do is get them to your house. Actually, tell them to meet you at my house. We have a hot tub and tomorrow's the day my mother spends shopping and eating lunch with some friends. She's never back before dinner.\" \n\n\"I'll try,\" I said.\n\n\"Don't forget to tell them to bring their bathing suits,\" she added.\n\n\"Are you going to wear the one you wore before?\"\n\n\"Most definitely!\" she grinned.\n\n\"Poor Robbie!\" I laughed. \"If this doesn't work out he's going to burst.\"\n\n\"It will work out,\" Carrie promised. \"I might even convince Tina to try some new things.\"\n\n\"You are such a slut!\" I said with a shake of my head.\n\n\"I wasn't really until Tara's birthday and today,\" Carrie said. \"Does it bother you?\"\n\n\"Not as long as you're my slut,\" I laughed.\n\n\"We'll see,\" she teased and ran to the bathroom.\n\n\"Bitch!\" I cried and followed her.\n\n\"We don't have time for this!\" she argued as I pulled her toward the shower. We were both laughing.\n\n\"Are you my slut?\" I asked. Carrie nodded her head, but I wasn't satisfied, so I tickled her and added, \"Come on, say it.\"\n\n\"Yes, I'm your slut,\" Carrie said after a moment's hesitation. She then smiled and added, \"I'll be anything you want me to be as long as you keep giving me such intense orgasms.\" \n\n\"My girlfriend?\" I found myself asking. This startled me almost as much as Carrie. He answer was just as shocking to me.\n\n\"Yes,\" she said with a warm smile. A girlfriend was a lot more serious than a slut, at least in my book.\n\n\"What exactly does that mean to you?\" I asked.\n\n\"It means that I won't sleep around on you,\" she answered, and then grinned and added, \"At least not without your permission.\"\n\n\"Sounds fair,\" I grinned.\n\n\"You know, it means the same thing for you,\" she said pointedly.\n\n\"Deal,\" I shrugged. That was the easy part.\n\n\"It also means that I think I care for you more than I'm willing to admit at this time,\" Carrie added.\n\n\"Good,\" I said, smiling gently. \"I feel the same way.\"\n\n\"Good,\" she replied.\n\n\"Oh, by the way,\" I said. \"You have my permission to enjoy Tara and Jill's company any time. Only, I wouldn't mind hearing about it and I sure as hell would like to join in occasionally.\"\n\n\"Deal,\" she said, aping my earlier reply. \n\n\"In that case, don't you think we can find the time to enjoy ourselves one more time before we leave?\" I asked.\n\n\"I thought you were dead?\" Carrie joked. I pulled her to me, grabbed her ass and rubbed my hardening cock against her.\n\n\"You're revived me,\" I said, kissing her passionately. \n\n\"Okay,\" she gave in. \"I just hope the cleaning lady doesn't walk in on us.\"\n\n\"She won't,\" Jill said as she walked into the bathroom. \"I put the 'do not disturb' sign up.\"\n\n\"But we've got to be out of here in an hour,\" Tara added as she arrived as well. \"I don't want news of this to get back to my uncle.\" They were both wearing different, far more conservative bathing suits, but they looked just as hot as ever. I looked at Carrie with a question in my eyes. She nodded in agreement.\n\n\"Ladies,\" I grinned. \"Care to join us?\"\n\n\"Is it okay with you?\" Tara asked Carrie. My girlfriend smiled and nodded.\n\n\"In that case, we'd be glad to!\" Jill said as she pulled off her bathing suit. Tara followed right behind her. It wasn't long before the four of us were sharing the shower. It was a big one with a glass door, but still, the only way we all fit was to rub up against each other. I was in heaven!\n\nJill kissed Carrie passionately and then started kissing her neck. She also had two fingers stuffed up my new girlfriend's pussy. Carrie eyes were open as she bit her lip and moaned. She saw me looking. I winked at her and she forced back a laugh.\n\n\"I'm still waiting for you to fill my ass with your cum,\" Tara said, kissing me.\n\n\"I'm a little spent. I just did that to Carrie's ass,\" I admitted.\n\n\"You did!\" Jill cried and then spun Carrie around and leaned her against one of the walls. Carrie knew what the black girl wanted so she thrust her ass out. Jill's tongue found her puckered little asshole and dove deep.\n\n\"Come on!\" Tara said, obviously turned on by what she was seeing. The dark haired girl moved next to Carrie and pushed her ass into the air. I grabbed hold and pushed my cock in. Tara was a lot looser than Carrie. I'm sure it had partly to do with experience.\n\n\"How does it feel to have my boyfriend fucking your ass?\" Carrie asked Tara.\n\n\"Amazing!\" Tara replied.\n\n\"He is that!\" Carrie said, looking over her shoulder and winking at me. I shook my head and drove deep into Tara's ass.\n\n\"Oh yeah!\" Tara cried.\n\n\"Oh fuck!\" Carrie suddenly added.\n\n\"What?\" I asked.\n\n\"Jill's got her fingers up my ass and pussy!\" Carrie gasped. I looked over and saw that Jill was really going to town on Carrie. She was using both hands! It wasn't long before Carrie cried out in orgasm. I grunted and came deep in Tara's ass right afterward. The blue-eyed girl joined me.\n\n\"There's more cum in Tara's ass,\" I said to Jill as I pulled her away from Carrie. The black girl was happy to move over. I turned Carrie around and hugged her.\n\n\"I'm spent,\" I said seriously. \"I need time to recuperate for tomorrow's little adventure.\"\n\n\"Why don't you go get dressed,\" she said. \"I'll be with you in a couple of minutes.\" I saw her looking at Jill's pussy and ass.\n\n\"You feeling bad for Jill?\" I asked knowingly. \n\n\"Well, she is due an orgasm,\" Carrie grinned. I shook my head and smiled.\n\n\"Take your time. I've got to sneak out anyway,\" said. \"Just make sure you don't burn yourself out for tomorrow.\"\n\n\"I won't,\" she said kissing me. \"And thanks!\"\n\n\"Thank you,\" I said seriously as I left the shower. I dried myself in the other room because I knew that I'd end up rejoining them if I stayed in the bathroom. \n\nIt took me a while to get dressed. I was exhausted. I did peak in the bathroom before I left to say goodbye, but in the end I didn't bother. Carrie was standing facing the shower door. Tara and Jill were each sucking one of her breasts. My new girlfriend looked like a sex goddess!\n\nCarrie saw me and waved silently. I waved back and left, wondering how I was going to convince Tina and Robbie to cut school tomorrow. It promised to be an interesting day if I could pull it off. "
    ],
    "authorname": "JoeDreamer",
    "tags": [
        "anal",
        "interracial anal",
        "lesbian",
        "three women one man",
        "foursome"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/joel-and-carrie-ch-01"
}
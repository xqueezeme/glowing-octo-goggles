{
    "title": "The One Hour Escape Ch. 03",
    "pages": [
        "Simon Says:\n\nFinal chapter for now. Same tags -- exhibitionism, romance, erotic couplings, mature (older woman).\n\nThanks for reading :)\n\n+++++\n\nSeveral clear things came out of our drive home:\n\nFirst, that we both were attracted to each other. That was obvious but it was good that we both admitted it out loud. I mean we had spent hours together naked bringing each other to orgasms, admitting we were attracted to each other proved quite easy.\n\nSecond, that we both were interested in dating each other. Or at least trying.\n\nThird, we recognized that we had inadvertently done things backwards as compared to how both of us preferred for things to go normally -- we had become somewhat friends, then had an orgasmic naked massage fest, and now I was officially asking her out. Our friendship and relationship should be the solid foundation. The physical was amazing but a little less important as I was not a player. And neither was she.\n\nSo fourth, we were going to put a pin in going any further physically for a little bit. We decided we could still massage each other, naked even, but we would date for a bit before proceeding.\n\nOver the next two weeks, things ran as normal. I did not offer Yoni massages, or Lingam either, to my clients (and neither did Katie), but at some point Susan was going to be curious about the seminar. And she was coming in two Fridays after the weekend of the seminar.\n\nKatie brought up how she thought we should deal with it. In our few dates out -- standard dinner dates, a few times at Carole-Ann's caf\u00e9 two doors down, and a hiking trip -- we had grown closer. And I could see something exclusive there. So Katie suggested that I should do the normal Susan massage and offer to do a Yoni massage once it was done.\n\nThis felt a little wrong with me now dating Katie and Susan being seemingly happily married. But Katie really argued that I wasn't going to be having sex with her and that I really was just offering a service.\n\nSo with Susan already naked in front of me that Friday, having just rubbed every inch of her body except her labia, I found myself uncomfortably bringing up the topic.\n\n\"Susan, I think I am finished with the standard massage, but we never did get a chance to talk about the seminar you sent Katie and I to a few weeks back.\"\n\nSusan laid naked on her back, her head set comfortably on a little pillow. She didn't bother covering up at all anymore, and so she proudly displayed her mid-50-ish year old body in front me, curves and all. She maintained a small neatly groomed tuft of blond hair below her tummy. And having just finished massaging her, her body shined with the massage oil spread everywhere.\n\n\"Oh yes, how did that go?\"\n\nI laughed, \"well we went in a little blind, so we didn't know what to expect. I probably should have done a little more research on it.\"\n\nShe propped up on her elbows, her naked body for the moment taking on a rather sexy and flattering pose.\n\n\"Oh no. I didn't screw up did I?\"\n\n\"No, it is great. After spending that day together, Katie and I decided to start going out. Brought us quite closer together.\" I smiled and she returned it.\n\n\"Whew. I was afraid she had gotten uncomfortable. I honestly didn't think it all the way through. Just thought it sounded sexy and fun and wanted . . . \" She paused, seemingly censoring herself.\n\n\"You wanted to see if Katie or I would do some of that with you?\"\n\nShe blushed. Nodded. \"Sorry Carter. So wrong of me. I think it was an impulsive thing on my part.\" Then she laughed, finally putting the two together, \"especially now that you are dating Katie!\"\n\nI laughed, \"Susan, Katie suggested I massage you. We can go as far as you like with that. I have massaged every inch of you except one spot, and this would involve that place.\"\n\nShe nodded, still propped up on her arms. She seemed to be thinking.\n\n\"Susan? Can I come in?\" Katie cracked the door open, but not enough to see in.\n\nI glanced at Susan and then reached for a towel to offer to her. She held my wrist, stopping me, shaking her head silently at me.\n\n\"Come on in, Katie.\"\n\nSusan remained propped up as Katie entered. She stopped next to me.\n\n\"Holy shit, Susan, you are like a goddess. You are so gorgeous!\" Susan blushed, \"thanks sweetie. That's likely not true, but really nice to hear.\"\n\n\"Well I happen to know that Carter REALLY enjoys your sessions, so two of us think it.\" Susan smiled appreciatively at Katie, who suddenly remembered why she entered the room.\n\n\"Oh right. Listen Susan, I knew Carter was going to offer to do the Yoni thing, so I was listening out for when you started chatting. In case you are in doubt, I really want Carter to do this for you. Well, that's if you are comfy with him doing it. I mean if you are not or think your hubby would disapprove, then that's cool. Just know that I am in support.\"\n\nShe smiled at Susan. \"Honestly, you really need to experience it. Kinda mind-blowing really.\"\n\nSusan seemed to be thinking again.\n\n\"And while you are considering, and I haven't really talked to Carter about this but I want you both to know that I am fine with the full treatment.\"\n\nKatie looked at me. I returned her glance with my own confused look.\n\nShe sighed, \"you know, the one where you are more participatory?\" She rubbed her hands together horizontally, as if that would clear it up.\n\nSusan studied our faces trying to understand as it all began to connect with me. At least I thought so. \n\nWith my understanding only somewhat evident, Katie continued, focusing on Susan, \"basically, you have some choices . . .\"\n\nShe smiled and began listing as if she was a waitress explaining a menu.\n\n\"Package A involves Carter as he is right now, with the benefits of some VERY skilled hands and specifically fingers exploring every part of your body. You leave somewhat satisfied, relaxed, but likely ready to go home and jump and ravish your husband because it will just leave you in that sorta mood craving for something more.\"\n\nSusan giggled, her blush forming a little on her face. \"That sounds lovely, and my husband would likely be very appreciative.\"\n\n\"I imagine he would! But wait, there's more!\" Susan feigned excitement with a small clap. So odd with curvy naked Susan seemingly so comfortable with all of this.\n\n\"Package B is just like Package A, but Carter would lose his shirt!\"\n\n\"I would?\"\n\n\"Damned right you would. It's a very sexy look and Susan deserves it if she wants it.\" I caught Susan's eyes, and she was grinning.\n\nBefore either could comment, she continued.\n\n\"Package C. Same as Package B, Carter's exposed torso and all, but this time the outcome would involve Carter's VERY skilled hands and specifically his fingers exploring every part of your body, focusing skillfully on a certain region, leaving you COMPLETELY satisfied, somewhat spent, and maybe even wobbly. You may want a second round with your husband but might not have the ability until tomorrow!\"\n\n\"Oh my!\"\n\n\"Oh my is right. And since I have enjoyed Package D, which includes Package C, I can guarantee complete satisfaction!\"\n\nMore collective giggling. I smiled in amusement. Katie was artfully being both cute and reassuring to Susan. I really liked that girl.\n\n\"But . . . you mentioned a Package D?\"\n\n\"Oh the lady wants to hear about the platinum package, does she? Well, of course it includes ALL of the fun, satisfaction, excitement, and mind blowing-ness of Package C, with the added bonus of Carter losing the rest of his clothes and providing a highly stimulating skin-on-skin full body massage.\" Here she rubbed her hands horizontally, making it clear what she meant before. \n\n\"Now this package would only be available if Carter wants to offer it. But it should be noted that fingers are the only thing being . . . uh . . . inserted anywhere. Yeah.\" \n\nA small uncomfortable silence followed, letting that sink in. \n\nThen Susan spoke, \"mind giving me a moment to call my husband?\"\n\nWe both nodded. Katie grabbed my hand and pulled me out of the room.\n\n\"Sorry for that surprise there, Carter. You have full veto power on Package D, but not on losing the shirt.\" She waggled her eyebrows.\n\n\"Are you sure you are ok with me sliding my naked body up and down Susan's?\"\n\nShe paused, then nodded, \"I think it would be crazy hot. I am not into watching my boyfriend 'do' other girls or anything, but with Susan I am ok with it. Probably because she isn't a threat and I think it would blow her mind.\" She grinned, \"plus she is so singularly responsible for the success of this place, we owe her. And she has always lusted after you, so it is kinda a gift on my part.\"\n\nBut then she got serious,\" but really, you get full choice on that one. It's not like you are a gigolo. You can say no. Ok?\"\n\nShe searched my eyes. I nodded.\n\n\"Katie and Carter!\"\n\nWe went back in the room. Susan, still naked, was sitting on the table waiting for us.\n\n\"Ok, Robert is ok with it. Whatever I choose.\" She smiled, \"I think he isn't as worried as he knows your girlfriend will be right here. Or something. Might also be because I indicated it would probably kick my libido into overdrive.\"\n\n\"Yay. That's fantastic! So what package did you want?\"\n\nShe hesitated.\n\n\"Katie, are you sure?\"\n\n\"Yep.\"\n\n\"Carter? Wanna make any packages unavailable?\"\n\nI paused for a moment, glanced at Katie with eyebrows raised, registered her nod of approval, then turned back to Susan and shook my head.\n\n\"Then, I think the fourth package would be . . . um . . . desirable.\" She looked so unsure of herself, her face red, her eyes down. Katie grinned.\n\n\"Katie,\" she turned to the girl smiling from ear-to-ear, \"part of me wants you to stay in here and part of me wants you not here. It likely will be a bit embarrassing for me to have you see me in that state, but part of me likes you to be here to make it OK. Your presence isn't necessarily sensual or sexual, just comforting maybe. Make sense?\"\n\nKatie nodded her head, slipped out for a moment, then returned. \"We just closed down for the next hour.\"\n\nSusan looked even more uncomfortable as she didn't know what to do. We had a little routine for normal massages, but then this was proving to be far from normal.\n\nKatie broke the tension by stepping in front of me and grabbing the hem of my shirt.\n\nI smiled and lifted my arms. About 60 seconds later, I stood naked in front of my naked realtor and my completely clothed girlfriend. Then Katie fixed that imbalance by stripping down.\n\n\"I am joining you like this because it kinda puts us all on the same playing field, but I am slipping quietly into this corner. You will likely only occasionally remember I am here, but not notice me at all.\"\n\nWith that, she took a pillow, set it on the floor, and sat cross legged up against the wall in the corner somewhat in the shadows.\n\nI turned my attention back to Susan, who was rather unashamedly checking me out.\n\n\"Sorry Carter,\" she mumbled, the deep crimson coloring still covering her cheeks.\n\n\"It's ok. Seems only fair with how many times I have seen you.\"\n\n\"Fair point,\" she briefly smiled, but then returned to being serious, \"so how do we, uh . . .\" \n\n\"Right. Ok, with Package D it makes the most sense for us to be on the floor. Hold on one second.\" I grabbed several pillow-top covers that we used for the tables and laid them on the floor. I then grabbed some pillows and scattered them.\n\n\"Make yourself comfortable please.\"\n\nI grabbed a few candles as Susan laid down, placing them around the cushions. I then sat next to her as she finally situated herself on the pillows.\n\n\"Ok?\"\n\nShe nodded.\n\n\"Just like our regular sessions, please let me know if you feel uncomfortable at any point.\" I paused, \"my lovely assistant indicated this package came with complete satisfaction.\" I heard some small voice say \"got that right!\" behind me. I continued, \"I am happy to help with . . . that . . . but if you are not comfortable with anything at all at any point then just let me know. That isn't the goal here. The only goal is sensual relaxation. OK?\"\n\nShe nodded again.\n\nSo then we proceeded. I sat in front of her and got her to match my position, facing me. We went with much of what Amy had showed us -- breathing for a bit, brief touching, creating that bubble of relaxation. We didn't have hours to spare here, so I abbreviated some elements, but we did focus on the beginning helping her become more relaxed.\n\nOnce we moved back into an actual massage, I focused again on both her front and back. She had already gotten this treatment, but now with both completely naked, it felt a bit more erotic. \n\nHer eyes were closed for some of the time, but I caught her watching me several times. Before she could look away embarrassed, I reassured her with a small smile. This was all about her.\n\nHer breathing gave me a clear indication that she had come to really relax and enjoy the experience. \n\nI then moved into the new territory with her. With her on her stomach, I moved to a sitting position on her thighs. I heard an intake of breath as she responded to my legs and butt connecting with her skin. Well and my dick nestled against her bottom.\n\n\"Ok?\"\n\n\"Mmhmm.\"\n\nI then rubbed the oil on my front and leaned forward, my chest against her back, my thighs with hers, and my semi-hard dick pressing up against her bottom.\n\n\"Oh,\" is all I heard from her as I began to slide down. My chest moved along her lower back and across her bottom, my eyes following her skin. She breathed in deeply, maybe in trying to control herself, maybe in anticipation.\n\nI then moved back up her body, my harder dick eventually moving back to rest against her ass cheeks. It nestled between her cheeks briefly before I moved back down. A few minutes later of sliding up and down I was completely hard and she was breathing heavily.\n\nI glanced at Katie to make sure she was ok. I caught one hand between her thighs and the other on her breast, holding it. She looked a little embarrassed as our eyes met, but she did not stop. I guess she was ok with it all.\n\n\"Did you want me to do the front?\" I whispered into her ear, my hard dick now resting completely between her cheeks.\n\n\"Yes, please.\"\n\nI lifted myself up off of her, almost like a push up. \"Flip over please.\"\n\nShe followed my direction, her hip and then her stomach brushing against my hard dangling dick as I rose onto my knees to allow her to flip.\n\nOnce settled on her back, her eyes locked on mine for a moment, her cheeks red with embarrassment, or maybe pleasure, or maybe both.\n\nI sat up on her thighs and grabbed the oil, rubbing my chest and thighs again. Her eyes watched my hands. I am not sure what inspired me, but I finished by rubbing oil on my cock, small jolts of pleasure shot through me as I found myself briefly stroking my dick in front of her. Her eyes locked on my hand movements.\n\nI placed the oil to the side and then lowered myself on top of her. \n\nShe usually kept her eyes closed during massages, but in this case, they were wide open and watching my face closely.\n\nI began to slide down.\n\nMy eyes moved to her ample breasts as I passed, her stomach, down to her shaven pussy lips, and then back up.\n\nI carefully kept myself from entering her as my cock slid up between her closed upper thighs. It would not take much maneuvering to really begin to fuck her, but none of the three of us were ok with that happening. A few of us may have wanted it, but we all knew it was a bad idea.\n\nI slid up and down her body for a few minutes, my hard cock applying oil to her skin as much as the rest of my body. If I applied a little more pressure, I am sure I could have cum on her.\n\nFinally, I stopped and moved down between her thighs. She looked a bit embarrassed as I situated her thighs apart , but as my fingers started gliding up and down her thighs, she seemed to be getting back into it. She could see what was coming next.\n\nHer breathing shifted, indicating her anticipation and excitement. Her fingers tightly grasped the covering.\n\nFinally, my fingers reached the very top of her thighs. I spent a minute longer on her lower stomach and circling her labia before my fingers finally connected.\n\nShe let out a gasp as my fingers slid down her labia. My eyes went to hers. She looked a little shocked, but more of the in-a-moment-of-lust variety. I then remembered Katie was in the corner and was glad she was there.\n\nMy dick had grown to return to just about full-mast for the last fifteen minutes as I watched her squirm under my more sensual touch and then massaged her entire body with mine, but I anticipated it to get painfully hard in the next few.\n\nI was not wrong.\n\nMy fingers gently pinched her clitoris, rolling it between thumb and finger. She moaned in response.\n\nThe wetness of the oil mixed in with her own natural lubrication. Her stomach fluttered as she responded to my stimulation. My dick grew completely and so painfully hard, and that feeling of being a foot away from plunging my cock into her returned to my mind. \n\nI felt her orgasm three times during our time together, easily seen by the pulsing and throbbing of her vagina and even her stomach. The first was small and happened when I first began massaging her clitoris. The second happened about five minutes later as I finally slid my fingers inside. The third was due to my stimulation of her 'sacred spot' -- her g-spot. That one proved to be the biggest, accompanied by a very loud moan and a few explicatives. \n\nWhen she began cumming the final time, she literally grabbed my wrist and held me inside of her. I could feel the pulsing around my fingers. My dick actually began to ache at that point as it was very sexy.\n\nMy eyes met hers as her moaning and the pulsing began to subside -- her expression was one of lost-in-the-moment.\n\n\"Hold her, Carter,\" I heard the whisper across the room. I slid my fingers out and brought her body towards mine in a hug. Unfortunately my erection pressed against her stomach, her hard nipples against my chest, my hands cupping the top of her ass. This was not the way I saw this friendship going when I first started to try to find a place with her.\n\n\"Oh my god . . . \" she finally whispered into my shoulder.\n\nShe leaned back a little and stared at me. \"Katie, can I give him a kiss on the lips?\"\n\n\"Yes,\" the voice quietly said.\n\nAnd so she did. It was not a passionate tongue-shoved-between-lips kiss. Instead, it was more tender and sweeter. And just a short kiss.\n\n\"Carter, sweetheart, that was amazing. I am not sure how embarrassed I will be when we next see each other clothed, but it was completely worth it.\" She breathed out, \"I am going to get dressed now as if I stay like this longer instead of going back home to my husband, I am not sure how this will go.\"\n\nI nodded, and quickly stood up. I pulled on my pants and walked quickly to the door. Katie appeared next to me, wearing her pants and crop top.\n\nAs soon as we stepped outside, I grabbed her face and kissed her. This one was of the passionate tongue-shoved-between-lips type. I held her against me. She didn't let up either.\n\nFinally, I held her cheeks, \"are you ok?\"\n\nShe smiled and nodded, \"I am not gonna lie, that was both really odd and sexy as fuck.\" \n\nI paused, then nodded, \"I think that captures my feelings too. Bothered at all?\"\n\nShe paused, \"a little bit at times, more towards the beginning, but mostly just REALLY turned on. Maybe I like watching you with someone else a little after all.\"\n\nI raised my eyebrows, \"don't get excited. Not exactly into the full thing, just a bit turned on. Well really really really turned on.\"\n\nWe looked at each other for a moment. Quiet. Waiting for Susan to finally leave, which she quietly did about two minutes later.\n\nAt this point, no words were necessary for Katie and myself. We both knew what we needed to do. Desperately even.",
        "Katie and I kept the shop closed and returned to the massage room. The urgency was there. Moments later she was naked underneath me. Moments after I was kissing her deeply. And then a few moments later I found myself plunging my dick deep inside a very hot and soaking wet pussy.\n\nI am guessing we both recognized that the Susan Yoni massage was serious foreplay. My dick never stopped being hard from between stopping Susan's massage and beginning to fuck Katie.\n\nI began kissing her as I pumped my dick inside of her. Our mouths locked and we kept kissing, non-stop, all the way through.\n\nIt was a frantic fuck. Deep thrusts, fast, hard. Her moaning was powerfully loud. Unabashed. Mine was deep and guttural.\n\nHer legs wrapped around my waist, pulling me into her. Her fingers dug into my back, the oil keeping her from getting a good grip. \n\nIt didn't take long for either of us, her pulsating pussy sending me over the edge as we orgasmed together. There was no way for me to cum except for inside of her, as she held me tight there. \n\nWe moaned into each other's mouths, tongue against tongue, fingers digging into each other's skin.\n\nI softened a little inside of her as we continued to kiss deeply. Maybe we should have had the standard fifth-date-equals-inviting-in-for-drink-and-staying-the-night formula, but then our relationship had been anything but formulaic.\n\nI then just held her for a bit. I could feel her breathing. We naturally got into sync again. Maybe we had developed a protective bubble.\n\nHer leg draped across my thigh, my now semi-flaccid cock laying against her thigh. She drew patterns casually on my chest with her fingertip, her cheek resting against my shoulder.\n\n\"So glad we finally did that,\" she whispered.\n\n\"Me too,\" I kissed her forehead.\n\n\"I am especially glad, because I want to do it again,\" she continued. I chuckled, bringing her closer. \"But when we do it again in a few minutes . . .\" she began.\n\n\"A few minutes?\" I interrupted her.\n\n\"Yup. Now shush and don't interrupt. Anyhoo, when we do it again, I want to take our time. I needed that urgent one, but I really want to spend some serious time together next time.\" She looked at her watch, \"and please note, 'next time' begins in five minutes.\"\n\nThe 'next time' which really did begin five minutes later, was slower. Exploring each other's bodies. Pleasuring each other with hands and mouths, which incidentally she was fantastic at doing. The slow gentle deep fuck proved very different from our first time, but just as enjoyable.\n\n+++++\n\nSusan used my Platinum Package service a few more times over the next month, as the rest of our business grew by leaps and bounds. We discovered that each time Susan enjoyed a bit of a Yoni massage, Katie would get quite turned on. She still did not necessarily want to watch me with other women but watching me do that to Susan apparently really got her going.\n\nWithin that next week, I discovered Katie and Amy had been texting, mostly I discovered it because Katie told me that Amy was coming by to see her. And so one Thursday, Amy showed up to whisk Katie away to Carol-Anne's caf\u00e9. An hour or so later, Amy returned with Katie, where she came up silently and gave me a long hug and then left.\n\nI questioned Katie and she just replied, \"she is working on some stuff. You are helping.\"\n\nAmy came a few more times, each time to grab lunch with Katie at Carol-Anne's and then return. The fourth time, Amy hugged me but stayed.\n\nBoth women looked at me quietly for a moment. I probably looked confused, as I was used to her scooting away.\n\n\"So how is it going, Amy?\"\n\nShe smiled, \"pretty good, Carter.\"\n\n\"Would you like to hang with us a bit here? Not terribly exciting but still you are most welcome.\"\n\n\"Sure. Thanks.\" She hopped up on the counter as Katie slipped up next to me and held my hand. Amy watched us together, as if she expected this to happen.\n\n\"Listen Carter, Amy and I have been talking. We both would like you to give Amy a massage.\" \n\nI didn't respond right away as this seemed to not be congruent with what I knew about Amy's past experiences and her very real emotional challenges with men. This request seemed to move in the wrong direction -- me putting my hands on her, her feeling threatened.\n\n\"Is this what you want?\" I asked Amy directly.\n\nShe nodded thoughtfully. \"Carter, let's call this an experiment. We think I will be ok, but we want to see.\" She paused, and then added, \"Katie and I have been talking through things, and we want to see how I feel during this.\"\n\n\"Did you want Katie to be in there?\"\n\nShe shook her head. \"Not initially, no. Let's see how it goes.\" She paused, \"Carter, I have not felt threatened by you. Each time I have seen you, I have hugged you. You holding me felt . . . fine. No anxiety. That is different. I want to take a second step, if you are willing.\"\n\nI nodded. This was not expected, but it made sense.\n\nI let her get undressed before I entered the room. I found her sitting with a towel wrapped around her. She seemed to be at least topless. I had seen all of her for quite a while before, so I imagine taking off some clothes here would not be a big deal. On the other hand, thinking about the sexual violence she suffered under, I would imagine clothes provide some sense of security.\n\nNo idea.\n\n\"Ok Amy. I am leaving all of this in your hands. What would you like me to massage? I want to go as slow and as carefully as I can with you.\"\n\nShe smiled appreciatively and nodded, \"thank you. That's why this will work. You are making it very clear that you are concerned for me. Sweet and so appreciated.\" She nodded again, \"so I think let's do the standard thing. Neck, shoulders, back, sides, thighs, legs, arms, hands, feet. Then we can see?\"\n\nI nodded.\n\nShe unwrapped the towel, exposing her breasts briefly as she laid down on the table. She also appeared to be not wearing any underwear, showing her bare hip as she got situated on the table.\n\nI rubbed oil into my hands, warming them up and then began to gently massage her shoulders.\n\n\"Please be very vocal about how you are feeling. I think it would help me and you for you to voice how you are being impacted as we do this.\"\n\nShe barely nodded, then added, \"ok, I like how your hands feel on my back. Strong fingers, but comforting and gentle. I love how your thumbs are rubbing into my shoulders. Feels really good. And no anxiety so far.\" She never opened her eyes during her narration.\n\nAdmittedly I liked hearing what I usually guessed was a woman's thoughts or feelings. Hearing a beautiful woman tell me my fingers were strong but gentle and pleasing gave me a tiny jolt.\n\nI moved to her back.\n\n\"I would appreciate it if you moved towards the center some . . . oh . . . there. Yes, that's really nice.\"\n\nI used my thumbs to press some into her upper spine. Her shoulders rolled in response.\n\nMy fingers slide down her sides and up the center of her back.\n\n\"Sooo nice. Keep doing that.\"\n\nFrom my angle, I could see her toes wiggle as my hands slid up and down her body. \n\nAfter a bit, I moved to her sides and hips, pressing thumbs and fingers into the skin. She moaned a little there.\n\n\"Oooo. No problem here,\" she whispered.\n\nI felt a little guilt when I noticed her full bottom moving beneath the towel.\n\nI continued down to the outsides of her legs, her calves, her feet. She seemed to really enjoy the foot massage, maybe not as much as Katie, but close. Then back up to her thighs.\n\nShe lost words for a bit, just letting me know all was ok with some moans and closed eyes with accompanying smiling expressions.\n\nI stopped short of the towel line on her thighs. She had given me little snippets of commentary, decreasingly so over the last fifteen minutes as she seemed to get more relaxed.\n\n\"Anywhere you want me to return to on your back?\" I wasn't about to slide my hands up under the towel, or even remove the towel, without her asking. And I didn't really want to ask either as it felt like it would make her uncomfortable.\n\nAs if she could read my mind, \"you can remove the towel, Carter. I would like you to massage my butt too.\"\n\nI hesitated. \"Feeling ok, Amy?\"\n\n\"Absolutely. No wonder you have a line of women here.\" She smiled, her eyes remaining closed.\n\nI gently removed the towel, rubbed oil between my hands again, and then prepared to place them on her butt cheeks.\n\nBefore I could, I sensed movement to my left, and caught Katie sneaking towards me. We locked eyes for a moment, she smiled pleased, seeing my hands poised above Amy's bare ass.\n\nShe continued towards me, stopping right behind me. She gave me a quick hug around the waist, and then started pulling my shirt up. I guess it was no big deal, so I let her pull it over my head as I briefly paused the massage. I felt her arms wrap around my waist again, her lips gently kissing my shoulder.\n\nShe then slipped away.\n\nShe probably was still in the room, knowing her.\n\nI am guessing Amy didn't care about me being shirtless, except I hoped she wouldn't assume I was trying to do something inappropriate. But then with Katie theoretically outside the door, I would be a complete idiot, which of course is not out of the realm of possibilities.\n\nI returned my focus to Amy's lovely ass, my fingers kneading into the muscled behind. I loved how the oil made my fingers slide across her skin.\n\nAs I shifted to full sweeping across her skin with my hands, she seemed to come out of her state of relaxation, \"oh sorry, I didn't give you my feelings update.\" She cleared her throat, \"I feel like I am in heaven and not a single bit of panic at all,\" she briefly paused. \"Am I flipping over?\"\n\n\"All up to you, Amy. I am happy to continue if you are comfortable.\"\n\n\" I believe I am.\"\n\nI reached for the towel, but Amy's hand grabbed mine, \"no need Carter. You and I have seen everything. Modesty is not necessary.\" \n\nShe turned over and smirked at me as she laid on her back, her eyes closing again, \"I see that Katie stole your shirt,\" she paused. \"Please do not misunderstand, I am full in support of that.\"\n\nI got the sneaking suspicion that some of this was planned. I was fine with that as it certainly did not hurt me at all, and it may even be helpful to Amy.\n\nI began on her shoulders. Her breasts moved a little with each rub. Her nipples actually stood erect, which of course made me happy.\n\nI didn't plan on doing anything to make her upset, but I did want to make her feel good. Just walking the line, really.\n\nShoulders, arms, sides. I stayed away from touching her breasts, even if I enjoyed watching their movement. I moved across her stomach.\n\n\"You really are very good, Carter. Love how you are touching me.\"\n\n\"Glad you are enjoying it, Amy,\" I moved my hands down her sides to her hips and her thighs. Her beautiful skin looked lovely in the soft candlelight of the room.\n\n\"Oh, please focus on my upper thighs, that's it,\" she murmured. \n\nI had moved up pretty high on her right thigh at that point, so I kept moving my thumbs on either side, inches away from her bare pussy. She moved her legs a little further apart, her shining lips on display. It honestly turned me on. I am a dude, there is no way not to be turned on.\n\nShe moaned a little more. \"That's so good, Carter.\"\n\nYep, I was getting hard. But I refocused my mind -- this was about Amy. This was about her feeling safe, enjoying herself, and not being perved on by a friend's boyfriend.\n\n\"You skipped my breasts, Carter,\" she whispered as I continued to moved my fingered very high on her thighs.\n\n\"You would like me to massage them?\"\n\n\"God yes,\" Amy whispered.\n\nThings were starting to feel a little sexual. Ok, becoming rather sexual. And I suppose this was possible considering the situation, but I kept thinking that this massage experiment was about her being touched by a dude, not arousal. But she seemed very aroused.\n\nI slid my hands back up and gently cupped the sides of her breasts. She let out a sigh of relief maybe. Anticipation can do that. I started off gentler than I did with Susan, making sure she was still in control at some level. \n\nHer nipples stood completely erect. When I glanced at her face, her eyes briefly met mine. Yep. Arousal.\n\nI gently massaged her breast with my thumbs, digging a little. Her body began to squirm a little.\n\n\"Please Carter.\" She didn't say it loud, but I was pretty comfortable with my interpretation.\n\nI gently rolled my thumbs across her nipples. She let out a moan that mixed with the words \"oh my God.\" Her hand shot out and grabbed my hip, her thumb on my skin, her fingers on my pants.\n\nThe oil helped in my fingers easily sliding around her nipples. Her eyes locked on my face as I did it.\n\nI felt uncomfortable as I felt like this was moving into such a sexual situation. With Susan I knew the general limits, even with me rubbing my naked body on her. Yes, I helped her orgasm. Yes, she saw my hard dick. Yes, it rubbed against her skin. But Susan was happily married and Katie kinda got off on me helping Susan. It just felt safer than this.\n\nWith Amy, she was close to my age, she was single, and I was the first guy who had done anything remotely like this with her in several years.\n\nI started looking around the room and unsurprisingly found Katie sitting there. She wasn't smiling, but she didn't look upset. She looked turned on again.\n\nBut I wanted no regrets. I wanted no one to be upset.\n\nI stopped.\n\nAmy actually seemed to be breathing harder as she looked at me quizzically.\n\n\"All ok, Carter?\"\n\n\"I . . . \" I didn't want to hurt her feelings in any way. She seemed like she was enjoying this progress, but I was walking a very fine line -- yes Amy I enjoy rubbing my hands all over you and bringing you towards sensual bliss but I don't want to make a mistake and hurt my girlfriend, who is not too secretly watching from the corner.\n\nI glanced at Katie. This must have made all clear at that point as Katie walked over, \"Carter, do not worry, you are doing great. I am very happy that you are giving such pleasure to Amy.\" She cupped my cheek and kissed me.\n\n\"If you want to stop . . . \" Amy added.\n\n\"No, I just didn't want to cross lines.\"\n\nAmy interestingly had not removed her hand from my hip the entire time. It didn't bother me really, and Katie just confirmed that she was fine with it all.\n\nKatie and Amy shared a few silent looks, seemingly communicating, then Katie raised her eyebrows and Amy responded with a nod.\n\n\"Carter, I want you to give the 'platinum package' to Amy. Before you doubt any of this, let me make it clear that not only am I fine with you doing it, but I actually will also enjoy watching you do that. And of course, we believe Amy will benefit. You of course can choose not to do it.\"\n\nKatie looked sincere. Amy seemed to be completely informed as she just watched my eyes, seemingly waiting for my decision.\n\nIt felt like two of the three people in the room had a plan and the third, me, was just now seeing it unfold. I of course was attracted to Amy and to do this would be absolutely enjoyable. And my girlfriend wanted me to do it. And even more importantly, it might be helpful for Amy.\n\nI smiled at Katie and Amy as I started to lay out some pillows on the floor for a more Yoni friendly experience. \n\nAmy laid down and got comfortable as Katie undid my pants and pulled them down. \n\nI gave her a quick kiss as if to leave her to join Amy, but Katie held my arm. \"One moment, Carter. Let me help get you ready.\" Katie went back towards the table.\n\nI glanced at Amy. She had shifted to laying on your side, the curve of her hip seductively on display, as if to loungingly watch our little show.\n\nKatie returned with the bottle of oil. She spread the oil on her hand. \n\nKatie's one hand cupped my balls as the other began massaging my shaft. Apparently there actually was going to be a show.\n\nSurprised, I let out a small moan. It took moments for me to get completely hard. Her hand slightly gripped my shaft as she slipped it up and down, rubbing oil everywhere, pausing to rub her thumb underneath, stimulating the ride of my head, my tip. I found myself moving my hips a little, encouraging her. The sensual nature of her doing this in front of Amy was just intoxicating.\n\nI looked at Amy. Her eyes looked longingly at Katie's hand and my hard dick. I could easily cum at that moment, except I mustered as much will as I could to avoid it.\n\n\"I knew she would enjoy seeing this,\" Katie whispered into my ear before kissing my neck. She finished by rubbing the oil up my stomach and chest, and back down my thighs, always taking advantage of stroking me in between.\n\nHaving gotten my dick completely hard, and theoretically sufficiently oiled, she finally moved her fingers away and stepped aside.\n\nI kneeled down next to Amy, my hard cock pointing directly at her. Maybe because this was nothing like her semi-odd sensual massage seminar where she had to be mostly professional for the entire time, she actually stared at it as I got settled.\n\nHer eyes finally came up to look at me.\n\n\"All ok, Amy?\"\n\nShe nodded, \"I am very ready, Carter.\"\n\nShe laid down, positioning herself on her stomach. I took her cue and sat on her upper thighs. I leaned forward, my hard dick immediately finding its place between the well-rounded cheeks of her bottom. \n\nI pressed my chest against her back, my dick resting against her. I swear I felt her clinch her butt cheeks with my dick between. It felt great.\n\nI then began to slide down her body. Again, I could have easily cum right there but I did not want to cut this short, and even more importantly this was about her and not me and my sexual drive. I wanted her to be comfortable, first and foremost, so therefore needed to keep my hard oiled up dick and its need to be rubbing against her somewhat in check.\n\nBut then she had to moan as my dick slid down her body. Good lord.\n\nI glanced at Katie, who was openly masturbating as she watched me. She didn't even go shy on me, she just smiled at me as she circled her clit with her fingers. So fucking hot.\n\nI slid back up Amy's body, my dick sliding along the back of her calves, then her thigh, between her ass cheeks, and finally so that my face was near hers again. A few more sliding up and down, and finally she whispered, \"I'd like to turn over.\"\n\nI lifted up. She flipped her body, her hip and then stomach touching with my dick as it dangled freely below my body.\n\nOnce she settled, I sat back down, this time on the fronts of her thighs. My dick rested hard right on top of her vagina. I started to move, but she grabbed my thighs and held me in place.\n\nI looked her in the eyes -- no fear, no anxiety, just lust and desire. I felt the same. And Katie, just feet away, was jilling herself frantically. \n\nI raised my eyebrow and she nodded. I then leaned forward and came face to face with her, her breasts pressed against my chest, my dick pressed harder against her pussy. I felt the shape of her lips under my shaft.\n\nI paused. My eyes so close to hers. I felt this burning desire to kiss her, but this was all about her, about safety, about comfort. She took a breath, her breasts pressing more against my chest, her hard nipples almost digging into my skin.\n\nI slid down. My eyes enjoying the slow movement down her chest, her flat stomach. I went even further down to bring my face so close to her pussy.\n\nAs I moved back up, she moved her legs apart just a little. My dick actually slid down between her legs, the oil and friction making it very hard to not get lost in the moment.\n\nMy dick moved further up, between her thighs, until I literally felt the tip of my dick pressing against her pussy lips. A few inches further and I would be inside her.\n\nI locked my gaze on hers. She was biting her lip, her hips barely rolling underneath me, her pussy lips shifting on the tip of my dick.",
        "I saw Amy glance to the side, towards Katie. As I looked over, Katie with her fingers now deep inside of her pussy, her other hand pinching her nipple, she just nodded her head.\n\nI felt movement underneath me. My eyes found Amy's again, she intensely looked at me.\n\n\"Carter, please fuck me.\" I felt the pressure of the orgasm just at those words.\n\nI heard Katie whisper, her voice ragged, \"do it Carter. Fuck her. Please.\"\n\nI checked her eyes one more time. She nodded, holding her breath.\n\nIn one quick motion, I pressed my dick forward, deep inside of her. I felt this flash of pleasure, her walls tight around my hard dick, my balls pressed underneath her, her very wet very warm pussy pulling me in, and the oil intensifying all of that.\n\nI began pumping hard, but I kept looking at her face for anything -- the anxiety, the pain, the stress, the revulsion. If I wasn't so already turned on, the feeling of concern about what I might be doing to her would have caused some serious performance issues.\n\nBut then I was so turned on. By her, by the situation, by my girlfriend watching, by my girlfriend pleasuring herself. My girlfriend. I glanced over and she was frantically pleasuring herself.\n\nI checked on Amy. Her eyes at times closed, at times locked on mine. Her moaning and grunting at each thrust sounded so beautiful, real, raw. She dug her fingernails into my ass cheeks, pulling me into her, her legs spread, her feet bouncing in the air at each thrust. I felt her breasts press against me, our faces close.\n\nI then felt this urge, and for the first time did not check with her first. I kissed her. Deeply. She moaned into my mouth as I held her face with my hands, my tongue pressing against hers.\n\nI felt Amy's orgasm, the walls throbbing around my shaft. I kept going, and the way her body pulled me in I didn't think she wanted me to stop. She moaned loudly into my mouth as she came, her body shaking as I kept pounding into her.\n\n\"Fuck!\" I heard Katie exclaim from her corner. She had slowed her masturbating, but she continued as she watched.\n\nAmy seemed to be completely into this, no issues, so I decided to mix it up for her. I wanted her to have the time of her life. And frankly, I wanted it anyway.\n\nI stopped, slowly pulling out. She looked at me, confused but still very much in lust.\n\n\"Turn over,\" I whispered to her.\n\nShe briefly smiled and immediately flipped her body over, her stomach flat against the floor.\n\nI wasted no time, spreading her ass cheeks a little, pulling her butt up a little I positioned my cock at her pussy again, and began to fuck her again.\n\nShe let out a groan, her fingers tightly grabbing the cushions in front of her. I moved faster and faster, my cock entering her completely and then nearly exiting. Each thrust felt fucking amazing.\n\nI suddenly felt a hand on my chest as Katie slid her body up behind me, her nipples against my back. I turned my head and kissed her lips as I fucked Amy from behind.\n\nCloser and closer. I felt Amy's pussy walls throb a second time with another groan. I frantically pumped, harder and faster.\n\n\"Inside baby,\" Katie whispered in my ear, her hand around the base of my dick as I got closer and closer to an explosion.\n\nAnd then it happened. I let out a long moan as I unloaded inside of Amy.\n\nAmy reached behind her and held my thighs, keeping my at first pulsing, but then softening dick inside of her.\n\nAll three of us, breathing heavily, still locked in our little three person chain, me inside of Amy while Katie held my dick and hugged me tight from behind.\n\nFinally Amy's hands released, and I saw her back move. She looked like she was taking sharp breaths. Her face was mostly pointed away from me.\n\nI got scared. What if it all was catching up with her. What if the panic attacks were beginning.\n\nI immediately slid off of her, what little hardness left in my dick immediately disappearing.\n\nKatie moved in front of me very quickly, touching Amy's shoulder.\n\nYes, Amy was crying. Hard. Her sobs shaking her body. Her breathing ragged.\n\n\"Oh my God, Amy, I am so sorry.\"\n\nI slipped far away, giving her plenty of space.\n\nFinally she sat up, letting Katie hug her from the side. She sobbed a few more times, but then looked at me.\n\nShe wiped her eyes, \"Carter, don't worry, not feeling anxiety, just shit loads of emotions.\"\n\nKatie smiled at me and nodded, apparently understanding much better than I did.\n\nI didn't dare move. I still didn't quite get it, but with both of them seemingly ok I guess I didn't hurt her. At least I hoped so.\n\nFinally, wiping her eyes again, \"Carter, come here and hold me please.\"\n\nStill confused, I only nodded and slid next to her. She then was sandwiched between me, wrapping my arms around her, and Katie gently rubbing her back.\n\nThe sweat mixed with the oil for all three of us. I had never felt anything like this before.\n\nFinally, we began to settle down. \n\n\"Sorry I lost control,\" Amy whispered, \"just was so emotional, you know?\"\n\nKatie nodded her head, \"It's ok.\"\n\n\"I realized I wasn't scared, and then things got so intense, and I was so happy but then I was . . . something else . . . but not sad or scared.\"\n\nKatie nodded again, rubbing Amy's back. I just continued to be her oversized pillow as she laid on me. I was just glad that I hadn't caused distress.\n\nThen Amy looked up at me, \"thank you, Carter.\" She touched my face, \"you and Katie have given me such an amazing gift.\" She paused, her voice cracking again, \"I kinda have some hope now.\"\n\nShe held on tight, so did we. The next half hour was just one long hug.\n\nFinally, Amy got dressed and said goodbye to us. She wanted to head home and process some more, but she thought that she had just experienced a pretty big breakthrough. Or at least a big step forward on a path to some healing.\n\nWe watched Amy drive away, Katie's arms wrapped tightly around my waist.\n\n\"Ok dude, please note, I am not into watching you have sex with anyone. Amy was special. And I hoped that what happened would actually happen.\" She paused, \"so you can make our matron Susan happy, and who knows about Amy, but that's it.\"\n\nShe then added, \"I think.\"\n\n+++++\n\nAnd that was it. I kept giving Susan regular massages, and occasionally a \"premium package\" one. Her husband continued to be fine with the situation as it apparently really did rekindle a sex life for them.\n\nAmy visited a few more times. And while I intimately massaged her, with Katie present, we didn't have sex again. She indicated that she had befriended a guy, that things were going ok, and with some careful steps thought it would maybe be ok.\n\nShe told him her own back story once things looked like they could get serious. And he was one of those rare ones who was willing to go as slowly as she needed. Sounded like a keeper.\n\nMy part in her story was mostly done. I had played a role in determining if there was hope, and at the end of a few orgasms, there was. She could be intimate. She could conquer fear and embrace happiness.\n\nNow, I wouldn't say our friendship was unchanged. So when I saw her, she would intimately embrace me, often briefly kiss my cheeks, and of course she preferred if we were all naked when she got a massage from us. She also actually continued to \"train\" Katie in massaging me.\n\nKatie and I talked a bit more after the crazy night with Amy. We actually came out the other end even better than before. Honestly, we pretty much had done one of the craziest things ever together, and we were still together, so we decided to be open about everything.\n\nI had really fallen for her. She proved to be the perfect girl and I couldn't be happier.\n\nThe business really took off. Our demographic expanded a bit from college-aged all the way up to retirees. We even saw some new male clients too. Even so, our most common customers fell in the middle aged woman demographic.\n\nEven Gina and Kerry from Amy's seminar came to see us. That actually ended up being our first couple's massage, with Kerry happily being massaged by Katie and Gina under my care.\n\nThings were going very well indeed.\n\n\"Let's grab some fancy coffee on the way out,\" Katie smiled at me as she locked the register. We had developed a great predictable routine and the two of us had fallen into our roles for the business.\n\nI nodded, we grabbed our bags, shut off the lights and locked the door, and headed down to Carol-Anne's.\n\nShe greeted us with a smile as we opened the door, causing her little bell to ring.\n\n\"How are my two favorite people doing?\"\n\n\"Hungry for pie, thirsty for coffee, but otherwise fantastic!\" Katie smiled at her.\n\nWe had become regulars at the cafe, so she Carol-Anne just got to work prepping what we always ordered.\n\nA few minutes later, Carol-Anne brought out three specialty coffees and three pieces of pecan pie. She then joined us.\n\nShe sometimes came and sat with us when there wasn't anyone else around, which was the case today.\n\n\"So two women came by with a coupon from you,\" Katie smiled at Carol-Anne, \"thanks for the referrals!\"\n\n\"Right back atcha,\" Carole-Anne smiled at us, and then added, \"honestly, I think you two saved my caf\u00e9 with the traffic you are generating,\" \n\nShe shrugged, \"well you two and Susan.\"\n\nKatie giggled, \"yeah, she has really been responsible for all of it.\"\n\nWe ate in silence for a few more beats, but then Carol-Anne broke the silence, \"I have been meaning to ask you though . . . \"\n\nBoth Katie and I looked up at her. She seemed slightly hesitant.\n\n\"I saw Susan come in last week,\" she began, \"and she looked like she was . . . well she was simply glowing.\"\n\nIt didn't take but a moment to calculate what probably caused that state of being as that probably followed one of her special massage visits.\n\n\"Now, I have seen women that glow like that for two reasons -- one, because she is pregnant, or two, because she has experienced a . . .,\" she paused looking down at her pie, obviously a little embarrassed but maybe too curious to not continue, 'like a . . . well an orgasm.\"\n\nBefore we could answer she continued, \"well I am guessing you are not impregnating women over there?\" she smirked at us.\n\nKatie giggled, \"nope!\"\n\n\"So, your massages must be sooooooo amazing that, well, um, you know,\" she trailed off. \"I mean no offense, Katie,\" she smiled, \"but maybe Carter's hands are that good.\"\n\nKatie didn't respond. I guessed what was going through her mind because it started going through mine too. Was Katie going to present the same deal to Carol-Anne that had been given to Susan? Would I suddenly find myself massaging two older women, and by massaging I mean rubbing my naked body all over hers?\n\n\"Oh, I made both of you uncomfortable,\" Carol-Anne jumped in after the silence went on a little too long, \"I was just curious and I . . . \"\n\n\"No, you didn't, it's fine,\" Katie cut her off, \"I am guessing both Carter and I are sitting here trying to figure out what to say here.\" Katie looked at me, \"I vote to tell her everything.\"\n\nI raised my eyebrow, just to be sure. She grinned for a moment but then turned serious, \"now it's Carol-Anne and Susan. No more!\"\n\nI nodded.\n\n\"Now it's me with regard to what?\" Carol-Anne had just been watching this exchange in complete confusion.\n\n\"Carol-Anne, congratulations, you now have the option of being in the Platinum Package Club!\" Carol-Anne continued to look at the two of us as if we were speaking a different language..\n\n\"Don't worry, I will explain.\" Katie began, \"let me start off by telling you about a seminar Carter and I attended one Saturday morning.\""
    ],
    "authorname": "SimonO",
    "tags": [],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/the-one-hour-escape-ch-03"
}
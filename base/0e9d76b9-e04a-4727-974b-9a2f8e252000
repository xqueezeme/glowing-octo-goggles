{
    "title": "Murder Mystery Weekend Pt. 05",
    "pages": [
        "There is no sex scene in this chapter. But the treasure hunt and the murder mystery are advanced, setting up the Big Reveal. Thanks for your support and positive comments. \n\n*************** \n\nWhen I awoke, Sheila was gone. People were already up, bustling around the kitchen. The shower would likely be occupied, so I put on my shorts and decided to brave the lake one more time. It was cold enough to shock me awake. But the skies were clear, and the day promised to be a mild one. \n\nI was out of the water, wrapping myself in my towel, when I saw Eric come out of the boathouse. He jumped when I called out to him. \n\n- \"You're up early.\" I said. \"Can't remember ever seeing you up this early.\" \n\n- \"You slept in.\" he replied. \"But yeah - I got up earlier. Kept thinking about those clues - the letters - all night. I had a theory.\" \n\n- \"What's your theory?\" \n\nEric shrugged. \"I don't know. Just that Teresa had to hide the treasure, right? Probably when most of us weren't here yet. But I thought she might have hidden it outside of the house. Now I'm not so sure.\" \n\n- \"We'll figure it out.\" I told him. \n\n- \"Yeah - Hey, can I see the Bible again?\" \n\nI had hidden it in the den, so Eric and I went back inside. Claire was having pancakes for breakfast, with an attentive Craig fussing over her. They were both smiling. Unless I missed my guess, there had been some new developments on that front last night. \n\nEliza, Lena and Teresa were also up, and Leo was in the kitchen. I closed the door to the den. Eric perused the Bible while I got dressed. His face was screwed up in a frown. \n\n- \"Problem?\" I asked. \n\n- \"It has to be simple.\" he said. \"Teresa knows that none of us are Sherlock Holmes, so she would keep the puzzles easy. I think.\" \n\nWe had a leisurely breakfast. Nobody was in any particular hurry. Ben eventually came down, but we didn't see Barbara or Sheila until almost noon. Sheila gave me a playful smack on the head as she walked past. I took that to mean that things weren't going to be too weird between us. \n\nTeresa was very patient. She let the late risers have breakfast while the rest of us cleaned up. Only then did she ask everyone to dress in costume once more. \n\nWhen everyone had returned to the main deck, Teresa handed us all an envelope. \n\n- \"These are your final clues.\" she announced. \"Everything will be resolved today. Sometime around 8 or 9 o'clock, we will have the 'Big Reveal', where you can all guess at the identity of the murderer, and the location of the treasure. There are no duty stations today, so you can associate with whoever you like, and freely go wherever you wish. Good luck, everybody!\" \n\nI wasn't the only one who wanted a little privacy to read my final clues. We all dispersed. It was time for me to pay a little more attention to the murder part of the mystery. I suppose I had been too busy worrying about Ben and Barbara, or concentrating on the treasure. I went out on to the balcony to open my envelope. \n\nFINAL CLUES \n\n- CRAIG IS A PIRATE, BUT ELIZA IS NOT \n\n- THERE ARE THREE WORDS IN THE TREASURE CODE \n\nYOU are the murderer. Ned Mulligan could never rest easy while Redbeard was alive. When you realized that members of his crew could be aboard the Retribution, you feared that they would organize a rescue. To foil their attempt, you decided to end his life. \n\nWhile everyone was busy preparing dinner, you went down into the hold. Redbeard was asleep, or passed out on his bunk, his head facing the iron cell door. His food bowl was on the floor, and there was vomit on his clothing. You realized that the sound of a pistol would not carry to the busy main deck, so you drew your weapon, and shot him in the head at close range. \n\nIf they find out, his former crew will want revenge. Also, the authorities may not be pleased that you cheated the hangman. Good luck, Ned. \n\nI read the last paragraphs in disbelief. How could I be the murderer? Then I remembered Teresa sending me into the basement on Friday night, to get the cooler. She had made sure to provide me with the opportunity, and now she had written down my motive. I had to smile. Clever girl. By waiting so long to tell me, Teresa made sure that I couldn't give myself away on Friday or Saturday. \n\nIf you had asked me, a few minutes earlier, who I thought the murderer was, I would not have known. I would have liked to pin it on Ben, because he had a pistol. But if he was the Scar, as I believed he was, then he had no motive. Leo had a pistol, too, but no motive that I could see. Now I would have to find a credible suspect (or suspects), to deflect attention away from myself. If you are the murderer in one of these mystery games, you don't want everyone else to be able to guess your identity. \n\nI could see Teresa talking to Lena, just below me on the patio. Why, I wondered, had she given me the part of the murderer? Was it a random act? No - I didn't believe that. Teresa didn't leave things to chance very often. Did that mean that she saw me as a central character? Or did she simply give me a big part, so that I would enjoy the whole weekend just that little bit more? \n\nThe murder victim was a bloodthirsty pirate. I could still see myself as one of the 'good guys'. Lena and Leo seemed to be on the side of the angels, and probably Eric, too. Eliza and Sheila might be a little 'greyer', but they weren't villains like the Falcon and the Scar. Could that mean that Teresa saw me as a good guy, at least sub-consciously? \n\n- \"Daydreaming?\" asked Eliza, as she walked up behind me. \n\nI had just enough time to fold the piece of paper which identified me as the murderer. \"Sort of.\" I admitted. \"Just trying to figure out who the killer is.\" \n\n- \"Do you have a pistol?\" she asked. \n\n- \"I do.\" I admitted. \"But so do Leo, Ben, and maybe others. How about you?\" \n\nEliza smiled. \"Just a knife. Listen, Colin: I thought over your offer. I'm interested. If you guys still want my help, that is.\" \n\n- \"How about Sheila?\" \n\n- \"Dunno.\" said Eliza. \"I'll talk to her, and try to bring her over.\" \n\n- \"Sounds good. I'll talk to the others.\" I told her. \n\nEric, Leo, and Lena were waiting for me outside. Lena gave me a big smile. I should have been used to it by now, but every time I came near her I was struck anew by how freaking tall she was - and by the exotic beauty of her facial features. \n\n- \"Safer outside.\" said Leo. \"They can't sneak up on us, and they can't hear us, either.\" \n\nI relayed Eliza's offer to them. \"She's not a pirate, either. That was one of my clues this morning.\" \n\n- \"Can we trust her?\" asked Eric. \n\nI shrugged at exactly the same moment as Leo said \"Yeah.\" We looked at each other. He said \"You don't?\" at precisely the same moment as I said \"You do?\". \n\n- \"That's a ringing endorsement.\" muttered Eric. Then we had to explain to Lena what Eric had said. We were all smiling by the time we had finished. \n\n- \"Question is, do we share the treasure with them?\" I said. \"That's assuming that we can find it on our own. Would they be able to help us?\" \n\n- \"Two more letters could be a big deal.\" said Leo. \n\n- \"Eliza has a knife. I don't know if Sheila is armed, but she might be.\" I added. \n\n- \"I might be close to a solution.\" said Eric. \"Bring out the Bible, Colin.\" \n\nI produced the worn little piece of paper. We re-read it together. \n\nYEA, VERILY, THE FIRST SHALL BE LAST, AND THE LAST SHALL BE FIRST: \n\n\" KNOW THIS, MY BRETHREN - BLESSED ARE YOU \n\nIF YOU CAN DO UNTO OTHERS \n\nBEFORE THEY DO UNTO YOU\" \n\n\"We know that there are 12 letters, in three words.\" said Eric. \"There are 10 of us, each with a letter, if we exclude the Captain - Teresa - and I think we should. She's given us repeated clues that the Bible is connected to the treasure.\" \n\n- \"Yes, she say it is part of treasure code.\" said Lena. \n\n- \"She also said that it had two uses.\" I pointed out. \n\n- \"Let's start with the first one. Look at the Bible clue. What if the two missing letters are right here?\" said Eric. \n\n- \"In the verse?\" asked Leo. \n\n- \"It's not a real biblical quotation.\" continued Eric. \"So why would she make one up?\" \n\nJust then, I finally had a little flash of insight, and I saw it, too. \n\n- \"'The first shall be last ...'\" I repeated. \"What if the first letter of her quotation is the last letter of our treasure code?\" \n\nEric nodded, and grinned. It took Leo another few seconds to see it. Lena saw it, too. \"And last letter of quotation is first of code!\" she said, with a big smile. \n\n- \"What would that give us?\" asked Leo. \n\nEric produced the sheet of paper we had been writing on yesterday. When he took the first letter of her quotation - 'K' - and put it at the end, and then took the last letter of her quotation - 'U' - and placed it first, the whole thing looked like this: \n\nFIRST LETTER? U \n\n1. CLAIRE \n\n2. ELIZA \n\n3. LEO E \n\n4. CRAIG \n\n5. BARBARA \n\n6. BEN \n\n7. ERIC E \n\n8. SHEILA \n\n9. LENA O \n\n10. COLIN C \n\nLAST LETTER? K \n\n- \"Holy shit.\" breathed Leo. \"Is that enough?\" \n\nI looked at Eric. \"How many four letter words end in O-C-K?\" I started running through them in my head. Rock. Cock - better not to say that one aloud. Go alphabetically: Bock. Cock. Dock. \n\n- \"Dock.\" said Eric. \"But don't look at it!\" Instinctively, we had started to turn our heads. After all, we were standing less than 20 yards away from it. \"Just in case - they may be watching us.\" \n\n- \"What about the rest of the letters?\" asked Leo. \n\n- \"We know that one of the words is 'THE'. If we're right about the Bible clue, then 'THE' can't be the first word. It would have to be in the middle. So Barb's and Ben's letters must be 'T' and 'H'. Sheila's letter must be a 'D'.\" \n\n- \"What is first word?\" asked Lena. \n\nEric just grinned. Scrabble was just a hobby with him, but crossword puzzles were a passion. \"Five letter word, beginning with 'U'. 'UNDER' fits perfectly.\" \n\n- \"Holy shit.\" said Leo. \"We did it.\" \n\n- \"We have treasure?\" Lena asked. She was smiling at me, as If I was the one who had found it. \n\n- \"So we don't need Ee and Sheila.\" said Leo. He didn't sound entirely happy about it, though. \n\n- \"Let's not jump too soon.\" I suggested. \"It would be nice to find out if both them have the letter 'D'. That would make it 100% sure. But don't forget the rest of the game.\" \n\n- \"Meaning?\" \n\n- \"Meaning we have to protect the treasure if we find it.\" \n\n- \"Couldn't we just move it?\" asked Leo. \n\n- \"We wouldn't want them to see us.\" I said. \"I asked Teresa if she would have let Barb and Ben 'kill' me - in the game. She said 'They're pirates'. That means we have to stay alive to enjoy the treasure.\" \n\nEric had another thought. \"If we cut Eliza and Sheila out of a share, what's to stop them joining up with the other four? We'd be outnumbered, and probably outgunned.\" \n\n- \"That makes me wonder.\" I said. \"Put yourself in their shoes. Ben and Barb, I mean. Or Craig and Claire. What will they do now? Originally, I thought they were on the ship to rescue Redbeard. But he's dead. Then there's the treasure. I don't think they can figure out the code. Not without the Bible.\" \n\n- \"Do they know about the 'French tea' clue?\" asked Eric. \n\n- \"I don't know. Maybe they have a clue that we don't. But Teresa must have meant for them to have the Bible. If Claire had kept it, they would have had six of the twelve letters.\" I said. \n\n- \"Hey!\" said Leo. \"We would only have had four. That's not fair.\" \n\n- \"Maybe she meant for us to ally with Eliza and Sheila. There must be a reason why those two haven't joined with the other four.\" I wondered aloud. \"But now I'm thinking about what Redbeard's crew will do. No rescue, no treasure - unless they ambush us for it.\" \n\nLena spoke up. \"The Scar - he will force me to marry.\" \n\n- \"That's right.\" I said. \"We want to prevent that.\" I did not fail to remember that Scar wanted me dead, too. \n\n- \"How?\" asked Leo. \"Kill him?\" \n\n- \"There might be another way.\" said Eric. He was rubbing his chin. \n\n- \"Really?\" asked Lena. She seemed quite excited by this news. \n\n- \"Well ...\" \n\n- \"Out with it, Eric.\" I said. \"Don't keep the lady waiting.\" \n\nHe gave in. \"Alright, I guess. My character was a pirate, but then he ran away and became a minister.\" \n\n- \"Shit!\" said Leo. \"You're Tom Hook?\" \n\n- \"How did you know?\" \n\n- \"I didn't.\" said Leo. \"I mean, I knew he was aboard, but I didn't know he was you.\" \n\nLena and I just looked at each other. Neither one of us had the slightest clue what they were talking about. She just shrugged, and smiled. \n\n- \"OK then, Mr. Hook. What's this other way?\" \n\n- \"Well, like I say - I'm a clergyman, so ... so I could marry Miss Lena here to somebody else. As long as I had a Bible. And look at that: we just happen to have one.\" \n\n- \"Can't the Captain of a ship marry people?\" I asked. \n\n- \"She could.\" agreed Eric. \"She would need a Bible, of course. And then you would have to tell her your real names. The secret ones. With me, your secrets are safe.\" \n\n- \"What do you think, Lena? Do you want to get married?\" I asked. \n\nLena looked a little perplexed. \"Who do I marry? You?\" She was talking to me. \n\nWhy not? Eric was needed to perform the ceremony. And if she married Leo ... the difference between their respective heights was even more ridiculous. \"Sure.\" I said. \"I would be happy to.\" \n\nLena smiled, but she still seemed worried. \"But ... if you are killed? If I am widow, can Scar force me? Still?\" \n\n- \"I don't think so.\" said Eric. \"As a widow, you would have to observe a proper mourning period. No Minister would marry you again so quickly. Not one aboard the ship, anyway.\" \n\n- \"There you go, Lena. Even if they kill me afterwards, you're still safe.\" I dropped to one knee, and reached up - way up - for her hand. \"Lena - will you marry me?\" \n\nMy bride to be suddenly shed her shyness. She bent over, put her other hand behind my head, and planted a kiss one each of my cheeks. When I say a kiss, I don't mean a brush of the lips, or a quick smack. Lena full-on kissed each cheek, with moist lips and a full second of delicious pressure. \n\nIt should be pretty clear by now that I am basically a horndog. I was quite pleased with myself, having slept with three beautiful women over a span of little more than 24 hours, in this (so far) legendary weekend. But as I looked up, into the lovely face and shining eyes of this exotic girl from a quarter of the way around the world, I realized something: if Lena was willing, I would gladly sleep with her, too. \n\nI had no idea what Teresa would say. On the one hand, she had specifically told me to go out and have fun this weekend, and sleep around as much as I could. But did this include her protege from Slovenia? \n\nWorries for another time, I told myself. I wasn't being asked to have sex with Lena. I only had to 'pretend' marry her. But that was where my issues began. I didn't want to marry Claire, or Barbara, or Sheila, and I was pretty sure that they didn't want to marry me. But Lena looked so innocent, so shy, that I wanted to protect her, take care of her ... \n\nI had daydreamed for far too long. Leo was poking me in the arm. \n\n- \"Earth to Colin.\" he repeated. \n\n- \"What?\" I said. \n\n- \"Where do we do this? And do we include Eliza? And Sheila?\" he asked. \n\nWe had a quick vote. Leo was sure that we had solved the treasure puzzle, and that we didn't need them. He probably wanted to invite Eliza to join us, but then he would have no good reason for refusing Sheila. Eric was undecided. My gut feeling was that we should ask them to join us, if only to prevent them from joining our opponents. \n\n- \"It's up to you, Lena.\" I said. \"What do you think?\" \n\nShe didn't hesitate. \"We can share treasure.\" \n\nWe found Eliza and Sheila in the kitchen, whispering. \n\n- \"Where are the others?\" asked Leo. \n\n- \"Downstairs. They're being very quiet.\" said Eliza. \n\n- \"OK. Here's the deal: we know where the treasure is, and we're willing to share it with you. If you tell us your letters, that will only confirm what we're already pretty sure of. But the guys downstairs will probably try to steal it from us, so we need to make an alliance. And if you join with us, then you can also attend the wedding.\" \n\n- \"Who's getting married?\" asked Sheila. \n\nI took Lena's hand. \"This lovely lady and I are about to get hitched.\" \n\n- \"Lucky Colin!\" said Sheila, with a grin. Considering that we had slept together the night before, she seemed genuinely happy that I was getting pretend-married. \"I'm in.\" \n\n- \"Alright. Me too.\" said Eliza. \"Can I be the maid of honour?\" \n\nWe chose the master bedroom as our site, the only room large enough and private enough for our purposes. We could also lock the door. The six of us went in. I stood facing Lena, holding both of her hands. It was just a joke, a little play-acting to move the game along. But the way Lena was smiling at me, the warmth of her hands, and her bright eyes ... those made it feel semi-real. Plus I had a hard-on throughout. \n\nEric hammed it up, with some 'Dearly Beloveds', and a 'We are gathered here today' thrown in to his otherwise incomprehensible patter. I think he was imitating the priest from 'Princess Bride'; it was either that, or Elmer Fudd. The others seemed to enjoy the nonsense he was spouting. Some of it was a bit crude; I hoped that Lena couldn't understand those parts. Then Eric called for a ring. I had one. It was my father's high school ring. I had started wearing it when he passed away, almost eight years ago. I pulled it off, and slipped it onto Lena's finger. \n\n- \"I now pwonounce you husband and wife. You may kiss the bwide.\" intoned Eric. \n\nI stood up on tiptoes, and Lena bowed her head slightly to meet me halfway. I meant to just give her a quick kiss, but there was considerably more lip pressure and moistness than I had expected. Lena smiled shyly at me. The others were razzing me with mock cheers, but Sheila leaned in close to Lena and said \"He's a great guy. I hope you'll both be very happy.\" \n\n- \"Thanks, Sheila.\" I said. \n\n- \"This calls for a drink.\" said Eric. \n\n- \"We should get the treasure first.\" suggested Leo. \n\nLeo got the most votes, so we went outside. Eliza kept watch, in case the villains emerged from the basement, while the rest of us went outside. Sheila wanted a blow-by-blow explanation of how we had figured out the code, which Eric and I promised to give her afterwards. She and Eliza had told us their letters: both were 'Ds'. \n\nIt was child's play to lift one end of the dock. Leo stuck his head underneath, said \"Ah-hah!\", and then emerged holding an envelope. \n\nWe all watched as he opened it, and pulled out a card, on which Teresa had written \n\nRedbeard's Treasure \n\ngold and jewels to the value of 10,000 Spanish doubloons \n\n- \"Sweet!\" yelled Leo. \n\nEric was grinning, and Sheila was nodding her head, obviously delighted. I was surprised to find that Lena was holding my hand. I looked up at her. \n\n- \"What now?\" she asked me. \n\n- \"What do you mean?\" I asked in return. \n\n- \"Should we ask Teresa to join with us?\" she said. \n\n- \"That may not be a good idea.\" I answered. \"She's a Royal Navy Captain. She may believe that the treasure belongs to the Crown - the government.\" \n\n- \"But she has pistol.\" said Lena, with an eloquent raise of her eyebrows. \n\n- \"Good point.\" \n\nWe shared this question with the others. Most were agreed that it would be better to have the Captain on our side. \n\n- \"Do we have to tell her about the treasure?\" asked Eric. We all agreed that Teresa didn't need to know that we had found it - yet. \n\nWe entered the house, as a group, just as the 'bad guys' were coming up the stairs. Teresa was with them. That's when I noticed that Barbara had her finger pressed into Teresa's ribs. And Ben had his thumb up, with his index finger pointing straight out. ",
        "- \"Pistols!\" I hissed, reaching for my little piece of paper. \"Get your weapons out!\" \n\nBoth groups reacted simultaneously. Within two seconds, there were five people with arms extended, fingers pointed and thumbs cocked. It was quite ludicrous, really, but nobody laughed. In fact, everyone was role-playing to the hilt. I could have sworn that Ben wanted to shoot me. My pistol was aimed right at him. Craig and Leo both had pistols, and so did Sheila. \n\n\"Stalemate!\" said Ben.\" \n\n- \"I don't think so, Scar.\" I replied. \"We have three pistols to your two. You want to challenge those odds?\" \n\n- \"We have the Captain.\" said Barbara. \"If you don't back off, I'll stick her.\" \n\n- \"So stick her.\" said Eric, calmly. \"We don't need her to sail the ship.\" \n\nLeo couldn't help himself. \"You brought a knife - to a gunfight?\" \n\nWe looked at each other for a moment. Maybe it was a stalemate. \n\n- \"How do we resolve this?\" I asked Teresa. \n\n- \"Well,\" said our Captain, \"everybody gets a drink, and then we sit down at the dining room table. We'll act this out, and decide what happens.\" \n\nA few minutes later, we had pulled up extra chairs, and sat facing each other again, this time across the table. There weren't quite enough chairs, so I let Lena sit and stood next to her. Craig did the same with Claire. \n\nTeresa took charge. \"We need to decide who acts first. Everyone will get a chance to act, in order. You can hold your action, or choose to act after someone else, or you can pass altogether.\" \n\nShe produced a bag of large red dice with white pips. \"Everyone will roll 2 dice. The highest roll goes first, and then we progress in order, based on your rolls. It's a bit unrealistic, but it's fair. Does anyone object?\"  \n\nNobody did. \"Let's roll.\" The reaction rolls came out like this: \n\nLEO 12 CLAIRE 9 BARBARA 8 BEN 8 \n\nCRAIG 6 SHEILA 6 COLIN (ME) 6 \n\nELIZA 5 LENA 4 ERIC 3 \n\n- \"Boxcars!\" shouted Leo. \n\n- \"Don't you roll, Teresa?\" asked Eliza. \n\n- \"No - Barbara has a knife pressed into my ribs. I'm a hostage.\" she answered. \"Alright: Leo is first to act.\" \n\nHe looked over at me. I just shrugged; I didn't want to tell him what to do. \n\n- \"I hold my action. For now.\" he said. \n\nClaire was next highest. She was unarmed, and had no idea what to do. It took her a minute to figure out that she should simply do as Leo had done. \"Hold my action.\" \n\n- \"Barbara and Ben.\" said Teresa. \n\nBarbara spoke first. \"I keep my knife on the Captain, but I turn her body, so that I can use her as a shield.\" \n\nTeresa nodded, as did a few others; it was a smart thing to do. \n\n- \"Ben?\" \n\n- \"I shoot Colin.\" he said. \n\nPandemonium broke out, with everyone talking or reacting at once. \"Can he do that?\" \"Whaaat?\", and so on. Barbara slapped him on the arm. Leo shouted \"I shoot him! I shoot Ben!\" \n\nEventually, everybody calmed down enough to let Teresa make a ruling. \n\n- \"You can try to shoot Colin if you want, Ben. Leo - you can act immediately after Ben, if you wish.\" \n\n- \"Why?\" asked Barbara, plainly annoyed with Ben. \n\n- \"He's Ned Mulligan. I win if I kill him. This might be my only chance.\" he said. \"So, how do I do this?\" \n\nTeresa passed him a single die. \"You roll this. On a roll of '1', your pistol misfires. The weapons of that era were notoriously unreliable. On a roll of '2', you miss him entirely.\" \n\n- \"What? No way!\" protested Ben. \"It's point blank range!\" \n\nTeresa was unfazed. \"Those pistols were also notoriously inaccurate. They're smoothbores - no rifling inside the barrel. And they're single shot weapons - it takes quite a bit of time to reload. That's my ruling. On a roll of 3 or higher, you hit him. 3 is a minor wound, 4 is serious, and 5 will incapacitate him. He'll die if he doesn't get immediate help.\" \n\n- \"And a 6?\" he asked, even though everybody already knew the answer. \n\nTeresa looked at me. \"Dead. Killed on the spot.\" \n\nBen grinned at me. He started rolling the die around in his hand. \n\n- \"Whenever you're ready.\" said Teresa. \n\nBen made me wait - the prick. I didn't let him get to me. Nothing I could do would alter the number that was coming up. After trying to torture me for a bit, Ben let it fly. Everybody leaned forward or craned their necks to see what he rolled. \n\nIt was a '2'. \n\n- \"FUUUUCK!\" screamed Ben. \n\nLaughter erupted around the table. Ben got some helpful advice, and a lot of razzing. I felt something on my leg, and looked down. It was Lena's hand. She gave my thigh a squeeze, and smiled at me. \n\n- \"I can't fucking believe I missed!\" shouted Ben. \"Fuuuck! What are the odds?\" \n\n- \"One in six.\" said Eric, with a perfectly straight face. \n\n- \"My turn.\" said Leo, grabbing a die. \"I shoot Ben! No - wait. Better if I shoot Craig. Can I shoot him before he fires at us? Yes? Then I shoot Craig.\" With a theatrical flourish, Leo threw it halfway down the table. It bounced, and kept on going, right off the end of the table. \n\nI saw it land, and never lost sight of it. The die came up a '5'. \n\nTeresa had seen it, too. \"Roll it again, Leo. It has to land on the table.\" She glanced quickly at me, but I didn't protest. I understood that she wanted to give Craig a chance. Besides, had she let it stand, the 'bad guys' might have felt hard done by. \n\nLeo re-rolled it, a little less dramatically this time. It stayed on the table. A '5', again. \n\n- \"Craig falls down, critically wounded.\" declared Teresa. \n\n- \"No!\" The word just burst from Claire's lips. We were all a bit startled by her vehemence. \"Will he die?\" she asked Teresa. \n\n- \"Not if he receives prompt medical attention.\" was the answer. \n\nClaire looked thoughtful for a moment. Then she asked, with surprising decisiveness: \"Can I take my action now?\" \n\n- \"Of course.\" \n\n- \"Then I pick up Craig's pistol, and I shoot Leo.\" \n\n- \"What the fuck?\" said Leo. I glanced at Sheila. Realistically, either of us could have fired before Claire had time to pick up Craig's pistol and use it. But Teresa was in charge, and neither of us wanted to start a squabble over the rules. Besides - she wasn't shooting at us. \n\nClaire didn't hesitate. She picked up a die, and rolled it. \n\nIt came up a '6'. \n\nThere was uproar around the table. It was just perfect. No one had missed the budding romance, or the fact that Craig and Claire had disappeared together a few times. They weren't particularly subtle about the longing glances they gave each other, either. For Claire to leap to his defence - against her own brother, no less - was worthy of one of those old black and white pirate movies, with Errol Flynn, or Douglas Fairbanks. \n\n- \"My own sister kills me?\" moaned Leo. \"Unfuckingbelievable.\" He made it sound like one word. \"I need another drink.\" \n\n- \"Next highest rolls.\" said Teresa. \"Colin and Sheila.\" \n\n- \"I will go stand beside Colin.\" said Sheila. \"But I'll hold my action. What do you want to do?\" she asked me. We were in a great position: the 'bad guys' had fired both of their shots, and we still had two loaded pistols. I was really tempted to shoot Ben. But if this was real, Ned Mulligan might have wanted the Scar to hang. Also, it would have been a little over the top. Leo's 'death' was dramatic, and yet comical at the same time. Shooting an unarmed Ben would be unsportsmanlike conduct. Besides, I could use him as leverage to get Barbara to release Teresa. \n\n- \"I point my pistol at Ben.\" I said. \"Barbara - or should I call you Falcon? You let the Captain go.\" \n\nThen Sheila spoke. \"Teresa - I'll take my action now, okay? I put my pistol right here.\" Sheila put her finger just to the left side of my spine. \"Right behind his heart. And if Colin even flinches, I will shoot him.\" \n\nI froze. Somebody may have gasped. Sheila was betraying me? \n\n- \"If I shot him like this, would my odds be different?\" Sheila asked. \n\n- \"Yes.\" agreed Teresa, quite calmly. \"A roll of '1' would still be a misfire, but you could not miss. A 2 or a 3 would be a critical injury. A roll of 4, 5 or 6 would kill him.\" \n\n- \"That sounds good.\" said Sheila. \n\n- \"Not to me.\" I retorted. \n\nSheila began issuing orders. \"Everybody else on Colin's side, drop your knives. Eliza will collect them. Claire, you do the same. Barbara - you can keep yours, and the Captain. Speaking of the Captain - where is your pistol, Teresa?\" \n\n- \"In my cabin.\" \n\n- \"Is it hidden?\" \n\n- \"No.\" said Teresa. \n\n- \"Eliza, would you get that? Meanwhile, Colin, you're going to move your finger far away from the trigger, and then you're going to put the barrel of your own pistol under your chin. Then I'm going to reach around and take it from you. If it goes off accidentally ... well, you know.\" Sheila was very calm. \n\n- \"So you're the Falcon.\" I said. \n\n- \"No.\" said Sheila. \"You were right the first time. I think it's Barb. But I am a pirate.\" She took my pistol. When Eliza returned from the Captain's cabin with a piece of paper, the two of them had the only three loaded weapons. \n\n- \"The treasure paper is on Leo's dead body.\" said Eliza. \"Can we assume that I take it from him?\" she asked. \n\n- \"Done.\" said Teresa. \"Unless anyone wants to interfere.\" \n\n- \"No thanks.\" said Eric. \n\n- \"I'm good.\" said Barb. \n\n- \"You fooled me completely.\" I told Sheila. \"You too, Eliza.\" \n\n- \"We should have cut them out of the treasure completely.\" said Leo. \"That's what we get for being nice.\" \n\n- \"If you had cut us out, we would have joined the other side.\" replied Eliza. \"In any case, you can't complain: you're dead.\" \n\n- \"We take the three loaded pistols, the two empty ones, and the treasure.\" Sheila told Teresa - and the rest of us. \"We take the ship's boat, or the lifeboat - whatever it's called. We'll leave a couple of knives, just to balance things out.\" \n\n- \"Does anyone try to stop them?\" asked Teresa. Nobody said anything. \"Then you successfully escape with the treasure.\" \n\nSheila and Eliza gave a whoop, high-fived each other, and then embraced. \n\n- \"Wait a minute!\" said Barb. \"How do they escape? In a little boat?\" \n\nSheila was happy to explain. \"I'm Kathleen Bonny, a pirate Captain in my own right. My ship, the Devilfish, has been following this ship ever since we left Jamaica.\" \n\n- \"Well played.\" said Eric. \"Well played.\" He started to clap his hands. I had to join in. Then everybody else did, and the two back-stabbing thieves got a round of applause. Sheila and Eliza took a bow. \n\n- \"What happens to us?\" asked Barbara. \n\n- \"I don't really know.\" admitted Teresa. \"You have a knife on me, but Sheila and Eliza left two knives for the other side. Claire is tending to Craig's wound, so that leaves just Ben, unarmed, against three of them, with two knives.\" \n\nI looked at Eric and Lena. \"What do you want to do?\" \n\n- \"We must save Teresa.\" said Lena. \n\n- \"That's not a bad idea.\" said Eric. \"We could benefit from a royal pardon. Worst case scenario, she doesn't know about our past, so we just go on to Barbados.\" \n\n- \"I can't believe you lost the treasure.\" moaned Leo. \n\n- \"Shut up, Leo - you're dead.\" I told him. \"Alright, Captain. Is there another boat? What if we let Barbara and her accomplices escape, as long as they release you?\" \n\n- \"There is a second boat.\" said Teresa. \n\nIt took a while to work out the details, but eventually, we got it settled. Barb and Ben got the second boat, with food and water. Claire chose to stay, to look after Craig. Teresa was released, and Eric, Lena and I were still alive. \n\n- \"And that means ... that we are done.\" said Teresa. \"All except for the big reveal - when we find out who the murderer is - which we can do after dinner.\" \n\nI drew barbecue duty again, with Leo. We were having baby back ribs, and a variety of salads, including Eliza's famous potato salad. \n\n- \"I don't see why I should have to cook.\" complained Leo. \"After all, I'm dead.\" \n\n- \"Dead men don't need to eat. Or drink.\" I said. \"Besides, Claire shooting you was just classic. You'll be telling your grandkids about it.\" \n\n- \"Yeah, probably. If I ever have any.\" \n\n- \"Have you talked to Eliza?\" I asked him. \n\n- \"About what?\" said Leo. \n\n- \"Alright, be that way. But one of these days, you have to tell her how you feel. For your own sanity. And mine.\" \n\nTeresa was approaching, carrying a tray full of ribs. \n\n- \"Keep it down.\" hissed Leo. \n\n- \"Why?\" I said, quietly. \"She already knows.\" \n\n- \"Already knows what?\" asked Teresa. \n\n- \"That you did a fantastic job, Teresa. With everything.\" I said, quickly. \n\n- \"Yeah.\" agreed Leo. \"It was awesome. Even though I 'died'. The whole thing with the treasure code was really cool, too. Where did you get all those ideas?\" \n\n- \"Old movies.\" said Teresa. \"Cheap old paperbacks. You know.\" \n\n- \"No way I could have done that. Seriously. I'm really impressed.\" \n\nTeresa gave him a kiss on the cheek. \"Thank you, Sir.\" \n\nDinner was excellent: the ribs were great, and the drinks flowed freely. So did the conversation. Everyone was discussing Sheila and Eliza's devious moves. But people were also asking questions, sometimes shrewd, sometimes not. There was one more competition to be resolved: who could unmask the murderer? \n\nI figured that if nobody guessed that it was me, that counted as a win. So I asked questions, launched veiled accusations, and watched faces, just like everyone else was doing. \n\nClaire and Craig were never far apart. They kept looking at each other, and brushing fingertips. After dinner, they gave up any pretence and just held hands. \n\nBen hovered around Barbara, sometimes reaching out to touch her arm, or her back. But for her part, Lady Falcon appeared remarkably uninterested. She frequently moved away from him, obviously more intent on solving the mystery than on him. \n\nAs for me, I was very busy. While I pursued my campaign of disinformation, I was also reviewing the higher points of the weekend in my head. Scorching hot sex with Claire, in the boathouse: that would have to remain a secret. Barbara on the bunk bed: hot, hot, hot. And then a long, friendly fuck with Sheila, which I hoped would not damage our friendship. All in all, an absolutely epic weekend for me, which I would never, ever forget. When I was old and gray, I would be able to look back and remember this as the pinnacle of my sexual career. \n\nLittle did I know - the weekend wasn't over yet. \n\nP.S. Ben really did roll a '2' \n\nP.P.S. Leo really did roll a '5' - twice. And Claire really did roll a '6'."
    ],
    "authorname": "AspernEssling",
    "tags": [
        "costumes",
        "friends",
        "mystery",
        "party",
        "role-playing",
        "cottage"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/murder-mystery-weekend-pt-05-1"
}
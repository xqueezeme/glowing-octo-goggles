{
    "title": "Vresas the Demoness",
    "pages": [
        "Vresas the Demoness\n\n(Futanari Demon Stories)\n\n1\n\nIranon, Pennsylvania, 1923\n\n\"He's so. . . handsome.\"\n\n\"And he's rich. His father is the owner of how many mills? Seven?\"\n\n\"Yes, seven.\"\n\nIt was a typical Saturday afternoon. Emily and her sister Anna were doing the dishes and discussing boys. Anna had her eye on James Louis Armond\u2014the heir to the Frakes &amp; Kingston Law firm\u2014and Emily had her eye on Galen Amano. His father owned seven mills.\n\nNeither one of them had any chance. Both were poor peasant girls. They had only seen these men from afar, gathering what they knew from gossip\u2014not hard to acquire, considering they went to the same Church. True, both girls were beautiful, but beauty in those days meant nothing without family connections. And Emily and Anna's family\u2014the Scofield clan\u2014were the poorest of the poor. Their father was in prison and their mother had remarried their uncle. Together they all lived in a cramped three-story house on the end of Briar's Lane, gifted to them by their great aunt, Matilda. Both of the sisters appeared destined for spinsterdom or marrying low-caste men\u2014in either case, a life of drudgery awaited them, just like all in their family.\n\nBut, for now, they had their dreams.\n\n\"What would you do with all that money?\" Anna asked.\n\n\"Buy a larger wardrobe. Some horses. Maybe a ranch.\"\n\n\"These dishes never end.\"\n\n\"No, they never do.\"\n\n\"What would you do with the money?\"\n\n\"I would hope to travel.\"\n\nThough separated by a year, Emily and Anna had little in common in terms of personality. Emily, 23, was shy, reclusive and melancholy. Anna, 24, was gregarious, adventurous, active and almost always cheery. Physically, they were also quite different: Emily was small, frail, thin and pale, with long black hair and big dark eyes. Anna was taller, plumper and blonde like her father. Despite this, they got along well. They had no one else\u2014most in the town shunned them for their poverty and the sinful ways of their family line.\n\nAfter the dishes were done, Anna went to the market and Emily retired to her room to read a book. While Anna enjoyed being out and about, Emily's preferred to read. Books gave her something nothing else did\u2014books and the occasional game of Chess with her sister. Luckily, Iranon had a fine library, and when Emily had her fill of books there, she could always find more obscure works at the University.\n\nOn that fateful August evening, Emily had five books at the ready:\n\nGodsea: Legend of the Gilded Ausprey\n\nConfessions of St. Augustine\n\nTales of a Time and Place\n\nThe Book of Black Magic and of Pacts\n\nThe Maiden, Lyra\n\nShe didn't expect anything grand from them. She had once tried to read the Confessions of St. Augustine but found it too terribly boring. Perhaps I'll use it as a sleep aid, she laughed to herself. The others merely had interesting titles. In any case, her schedule was filled till supper. And after supper, she planned to read more. To read herself to sleep was one of her favorite activities, though she needed to be careful not leave the candle burning.\n\nShe looked over the four volumes, not knowing on which to start. She knew it wouldn't be The Confessions. Closing her eyes, she picked one at random\u2014Tales of a Time and Place. She then plopped into her chair and began reading.\n\n2\n\nAn hour later, there was a knock at the door.\n\n\"Emily? Emily are you in there?\"\n\nIt was her mother.\n\n\"Yes, mother. I'm here.\"\n\nEmily got from out of her chair and unlocked the door.\n\n\"Emily,\" her mother said, exasperated, \"I am making roast tonight and I can't find the the large black bowl. Where is it?\"\n\nEmily thought a moment. \"I don't remember us washing that. When was the last time you used it?\"\n\n\"Oh, you're right. I left it at Martha's house on Wednesday. I should have known.\"\n\nEmily rolled her eyes.\n\nHer mother left.\n\nEmily returned to her book. The distraction had made her lose her place and, in any case, Tales of a Time and Place was proving to be quite boring. She wanted something a little more exciting.\n\nShe picked up The Book of Black Magic and of Pacts\u2014a book she had read many times before, but always enjoyed reading again. Magic was a topic that intrigued her since she was young, and though she knew it was forbidden by the Church, she still read the occasional book on the subject. She figured it was harmless, and she only went to Church for her mother's sake, anyway.\n\nAs she opened the book, she noticed a slip of paper tucked away in its middle. It was folded like a bookmark\u2014and the library never removed bookmarks, for some odd reason\u2014and the paper looked quite old. It was yellowing, brittle and creased in odd ways.\n\n\"Curious,\" Emily said. She held the paper up to the window. There was writing on it. It looked to be two pages, actually. Not wanting to tear it, Emily walked over to her desk and spread it out flat. It was English writing\u2014excellent penmanship. The second page also had a strange seal\u2014a seal which looked quite similar to what she had seen before in books of magic, akin to the symbols used to designate demons.\n\nShe felt a twinge of fear. Then fascination.\n\nI should make some tea before I read it, she thought. Savor the moment.\n\nShe left her room, went downstairs and put on a pot of tea. Her mind was already racing with possibility\u2014someone, or some thing, had taken the time to write a two-page note, composed or transcribe a demonic seal, and leave it in a library book. Perhaps it was intentional \u2014the book was on the same subject, after all. She could barely contain her excitement.\n\nHer mother was also in the kitchen. \"You look odd,\" she said. \"Smiling like that.\"\n\n\"Sorry,\" Emily said.\n\n\"I wonder if your sister will remember to get some eggs.\"\n\n\"I'm sure she will.\"\n\n\"I need eggs for the biscuits.\"\n\n\"Right.\"\n\nAfter the tea was done, Emily poured herself a cup and returned to her room. She had work to do.\n\n3\n\nBefore reading the strange paper, Emily looked at the handwriting again. Though excellent, she noticed a few oddities: the s was a little lower than the other letters, and the t would be crossed twice. She wondered where in the country people wrote like that. It certainly wasn't local.\n\nThe text read, \"For the summoning of Vresas, demoness of lust, know that her day is the fifteenth mansion of the moon. She must be summoned at the midnight hour, or before dawn, and the Karcist must observe chastity for three days prior. On virgin parchment, draw her sigil by the light of two candles, and speak her enn in a low voice. Her enn is thus:\n\n\"mira Vresas arncalavi xen xen rencarna\n\n\"This should be said with a prayerful heart. Know that she comes when she wishes and may not appear at the time of summoning. She will grant whatever the Karcist wishes in matters of lust, but only by pact.\n\n\"Do not regard her many forms with fear. They are temporary.\"\n\nAt the end, there was a signature, though Emily could not make out the letters.\n\nFrom her studies prior, Emily knew that Karcist was an ancient word for sorcerer, but she could not recall what an enn was. From the text, it appeared to be a prayer. She had read similar words before in The Book of Black Magic and of Pacts\u2014words which were said as part of the litany to an angel, demon or spirit.\n\nThe ritual was simple. Elegant, even. Emily was used to more elaborate instructions\u2014special incenses and robes, swords consecrated with abstract designs and symbols, seals which were required to be engraved in metal. This ritual only required candles, a short prayer or enn, paper and pen.\n\n\"Curious,\" Emily said. She often considered that the common instructions given in grimoires might be needless, assuming they truly worked. Simple instructions such as these could be applied to any angel or demon, provided its seal, name and office were known.\n\nShe sipped her tea and felt a warm swell in her heart. The seal was so elegant, so unalike the crude seals given in grimoires like The Lesser Key of Solomon, The Sworn Book of Honorius and The Grimorium Verum.\n\n\"Vresas,\" she intoned. The name, too, was beautiful. Evocative. \"demoness of lust\". It was all very fascinating to her.\n\nFor a brief moment, she thought of Galen Ameno. Tall, brown-haired, blue-eyed. Strappingly handsome. Rich. She wondered what Vresas, demoness of lust, would do if she summoned her and asked her for Galen's affections.\n\nThen she recalled the words only by pact. She knew what \"pact\" meant\u2014other grimoires explained. But each pact was potentially different. Vresas would want something\u2014but what?\n\n\"Silliness,\" Emily whispered. She took another sip of tea and went to her next book: Godsea: Legend of the Gilded Ausprey. A fantasy novel, over 1,000 pages long. A nice title. A bit gaudy, but nice.\n\nShe began reading.\n\n4\n\n\"What would you be willing to part with, if it meant the man of your dreams?\"\n\n\"Oh, I don't know. Why do you ask?\"\n\nThough Emily was hesitant to admit it\u2014even to herself\u2014the two pages of strange magic were starting to obsess her. It wasn't just the prospect of them coming true. The instructions felt true. They felt like real magic. And though Emily doubted the veracity of magic, she was curious. She wanted to know. Perhaps the spell contained in that small, yellowing paper could show her.\n\n\"Just curious,\" Emily said.\n\nChurch was over. Emily and Anna were at home, playing their usual game of Three-Handed Escra. Anna was losing.\n\n\"I wouldn't want to part with my eyes. Or my health.\" Anna said, eyeing her cards. \"I would part with this three, though.\"\n\nShe slapped down the three.\n\nEmily grinned, slapping down a nine.\n\n\"What about you?\" Anna asked.\n\n\"I don't know. I think, yes, I wouldn't part with my eyes or my health. But for Galen Amano\u2014well. . . it is a hard question.\"\n\n\"Yes,\" Anna replied, placing a five by the nine. \"I might be willing to give up a lot.\"\n\nEmily set down another nine.\n\n\"Damn!\" Anna said. \"You've got me.\"\n\n\"As usual.\"\n\n\"I think that's all I'm playing.\" Anna got up from the table. \"I've got some knitting to do, anyway. I should get to it.\"\n\n\"Right,\" Emily said. \"By the way, I forgot to ask you\u2014are lunar calendars hard to find?\"\n\n\"Lunar calendars? What do you need that for?\"\n\n\"Just curious.\"\n\n\"I don't even know what they are. I'd say check the library.\"\n\n\"Right. Maybe a book on astrology.\"\n\n\"Maybe.\"\n\nEmily felt almost certain that she would try the spell. She would need to prepare, though. Not knowing what lunar day it was, she realized it might take as long as a month before she could. The idea of waiting bothered her\u2014she wanted to try it as soon as possible.\n\n\"Actually,\" Anna said, \"I may have a book that will tell. Wait here.\"\n\n\"Alright.\" Anna went up to her room and came back with a small volume, bound in leather.\n\n\"Church Holidays. Some are based on the moon. Maybe in the Appendix it will explain how it works. Why do you want to know, again?\"\n\n\"Just curious.\"\n\n\"Sure. Well, put the book on my bed when you're done. I'm leaving.\"\n\nAnna left.\n\nEmily opened the book.\n\nIt didn't take long for Emily to find what she needed to know. Though the full calendar wasn't given, it told her that the 15th day simply meant the full moon.\n\nThe instructions could have easily said so Emily thought. She doubted its efficacy even more. Still, she would try.\n\nShe went to her calendar and saw that the full moon would arrive in six days. Being unmarried, she had no trouble at all with keeping chastity. Just to be sure, she decided to refrain from masturbating, also. Six days would be fine\u2014she had gone much longer in the past.\n\nAlright then, she thought to herself, I'll mark the calendar. Then when the day comes, I'll do it. I'll make sure.\n\nShe didn't know how to feel about what she soon would be doing. Part of her thought it was silly. Another part thought it was at least worth a try. And yet another part felt terribly guilty\u2014using magic to get a lover. How would the world work if everyone did so?\n\nStill, part of her didn't care at all.\n\n5\n\nThe day for the ritual arrived.\n\nEmily had studiously observed chastity, banishing even slight sexual thoughts. She also kept her interactions to a minimum, knowing that this was recommended in other texts. She was excited, though still didn't entirely believe it would work. And, if it did, she had no idea what she would actually do. She wanted Galen Amano, of course\u2014his undying affection, his sweet marriage proposal on bended knee, a ring, a wedding, a lifetime of happiness, seven or eight children, etc.\u2014but she also knew that pacts with demons were often difficult affairs. A demon wouldn't just offer its services for nothing\u2014it would want payment. And while the traditional lore often depicted the demon as requesting a soul, or some form of continual servitude, Emily doubted that would be the case. But if it was, would she accept?\n\nGalen was handsome.\n\nAnd rich.\n\nAnd his family was even richer.\n\nIt would be a difficult decision.\n\nEmily had a sense of foreboding all that day. She awoke feeling uneasy, and the feeling only got more pronounced as the day progressed. Her mother noticed that she was unusually quiet.\n\n\"What's wrong?\" she asked. \"Are you coming down with a fever?\"\n\n\"No,\" Emily said.\n\n\"Alright. Well, if you are, tell me. I'll make soup.\"\n\n\"Thank you.\"\n\nAfter that brief encounter, Emily spent most of the day in her room, reading. She chose light topics\u2014fairy tales, mostly, and a book on deciduous shrubs. She didn't want to add to her anxiety. She didn't bother eating supper with the family, either, preferring to eat alone. There were only twelve times a year she could perform the ritual\u2014she didn't want to make a mistake.\n\nSoon, night fell.\n\nShe looked out her window. The moon was full, the sky cloudless. The neighborhood looked particularly haunting\u2014pale blue moonlight covering every exposed surfaces, dramatic black shadows beneath.\n\nShe waited until midnight. Then, with bated breath, she began the ritual.\n\nAs instructed, she lit two candles and placed them at opposite sides of a white, unused sheet of paper. Looking at the seal given in the original text, she then carefully re-drew it, making sure it was as close as possible to the original. Once finished, she closed her eyes and repeated the enn from memory.\n\n\"mira Vresas arncalavi xen xen rencarna . . .\n\n\"mira Vresas arncalavi xen xen rencarna . . .\"\n\nShe gazed intently at the seal, waiting for an effect to occur. The text had said, \"Do not regard her many forms with fear. They are temporary.\" This implied that Vresas would show herself in some way. From other grimoires, Emily knew this was the expected next step\u2014spectral visions. Haunting images. Ghostly apparitions.\n\nShe waited.\n\nShe felt nothing.\n\nStaring at the seal once more, she again intoned the enn.\n\nNothing.\n\nWell, she thought, as I suspected. It's just silliness.\n\nSighing, she put away the paper, snuffed the candles and got into bed. She didn't know whether to feel disappointed or relieved\u2014after all, she may have actually bartered her soul for Galen Amano's love, and what would one do without a soul. It was also comforting to be in a world where magic possibly didn't even exist\u2014it meant no demons, no specters, no wraiths, no shades, no imps, goblins or Wendigos. Not a bad world to be in, all things considered.\n\nHer eyes soon grew heavy and she fell asleep. Tomorrow was another day.\n\n6\n\nA week passed.\n\nEmily had almost forgotten the ritual entirely. It didn't work, in her estimation, and she was embarrassed she even tried. Thankfully, no one saw it.\n\nOr so she thought.\n\nLife went on as normal, lulling her into a false sense of security. No visions, no paranormal phenomena\u2014not the slightest hint that something strange was on the horizon. She resigned herself to the idea that Galen was out of reach. Pining for him and fantasizing was fun, but nothing would come of it. She would probably marry a dullard or drunkard, as was common to her caste. Life would go on in its normal, boring way. She'd forget the silliness of magic and move on like she always did.\n\nPart of her, however, was greatly disappointed. She also wanted to believe in magic. It was a source of great conflict\u2014the desire for familiarity and the hunger for the unexpected. Living in a world full of knowns was boring\u2014the unknown, always, was far sexier. Still, the known was rarely frightening. It rarely caused problems. It was comfortable. And why did Emily seek Galen Amano, if not for a life of splendid comfort?\n\nThen one evening she awoke to a hand\u2014warm and smooth\u2014caressing her face.\n\nShe didn't think much of it at first. It could've been a dream, or her mother or sister. It was still dark and she was terribly tired. She brushed the hand away and turned over, sinking her head deeper into the pillow.\n\n\"Wake up, Emily\" she heard a voice say, melodiously. \"Wake up, my dear.\"\n\nShe had never heard the voice before.\n\nVresas!\n\nEmily jolted up, panic-stricken, fear spreading through her body like a wildfire.\n\n\"Who's there?\" she gasped.\n\nShe immediately turned to the window. There, standing in the moonlight, was a figure. A woman.\n\nEmily's heart pounded in her chest. Her entire body felt hot. She began to sweat.\n\n\"W-who? Anna?\"\n\n\"Not Anna,\" the figure said. \"I think you know who I am.\"\n\nEmily did. She knew exactly who it was\u2014and she knew all the implications of what she had done. She felt like she might pass out from the shock.\n\nThe demoness had arrived.\n\nParalyzed in fright, breathing heavily, her body wracked with tension, Emily watched as the demoness slowly drew closer to her, inch by elegant inch. Despite her fear, she admired how feminine and perfect the demoness's body looked\u2014as if it were hewn from some universal template of ideal womanhood. It radiated pure sex. Emily gulped.\n\n\"Emily,\" the voice said, \"I've come.\"\n\nEmily said nothing, unable to speak. A subtle sense of electricity filled the room and a scent of dark and heavy spices permeated the air\u2014the fragrance of lust. Her sex ached, despite her fear. Her wrists trembled as she clutched the sheets tight.\n\n\"Perhaps you need a little more light,\" the demoness said. She sauntered over to Emily's table and lit two candles, then sat in the chair. The candle's amber light filled the room, revealing more of the demoness's form. Emily was enthralled: her eyes were piercing, intelligent and dark. Her lips were full and luscious\u2014the color of blood. Her face exuded as much wanton sexuality as her body\u2014her soft, blemishless skin was as pale as the moon. She wore only a skimpy black dress, covering only her midsection and leaving her long, sultry legs and eminently kissable shoulders and neck exposed. She looked like a Goddess.\n\n\"Better?\" she asked.\n\nEmily nodded. She felt herself growing calmer, more collected. She didn't know if it was just the demoness's voice and appearance or if she was using some form of magic on her. Either way, Emily didn't really care\u2014she was glad to not feel so panicked.\n\n\"H-hi,\" she whispered.\n\n\"Hello,\" the demoness said with a grin. \"Now, let's talk.\"\n\n7\n\n\"M-my parents. . . won't they hear us?\"\n\n\"No,\" the demoness said, \"they're in a trance. Out cold. Your sister, too.\"\n\n\"Okay.\"\n\n\"Galen Amano. You want him, yes?\"\n\nEmily nodded.\n\nThe demoness grinned. \"Good. You're a lustful girl. I can tell. I've seen the fantasies you have about him\u2014his sweaty, lean body on top of yours in a big, gaudy bed. Pumping away at you, deep in your sex, straining away with his hard cock. You think about it very often\u2014more often than you even consciously admit to yourself. You've fixated on him. And, until you met me, it was a terrible move on your part. You'd never get him in a million years.\"",
        "Emily felt offended but said nothing. She noticed her fear was entirely gone, though it had no reason to depart\u2014a demoness was in her room. Now it was insulting her. She felt offense, but not fear. How strange.\n\n\"Sorry,\" demoness said wryly. \"I know you would prefer not to hear that. It is true, though. Let's not deceive ourselves. Desperate times call for desperate measures. Or desperate desires, rather. . .\"\n\n\"You can help me have him, though?\"\n\n\"Yes. If you still want him.\"\n\n\"Still want him? What do you mean?\"\n\nThe demoness raised out of her chair, slowly and seductively, then stretched out her arms. Though Emily had never seen her before, her beauty was captivating\u2014intoxicating. She knew she was probably being enchanted somehow, under the demoness's spell, but she didn't care. She was too curious to see what might happen next.\n\n\"I mean,\" the demoness continued, walking closer to Emily and crouching by her bedside, \"we're going to make a pact. And I'm going to take what I want from you. And if you still want Galen Amano, afterwards, then you can have him. But you'll always really belong to me. Double duties, you might say.\"\n\n\"You mean. . . I will be your wife, also?\"\n\n\"Something like that,\" the demoness said. \"I know you. I've watched you all this past week. I've sank deep into your thoughts\u2014I've heard the thoughts you didn't even know you had. I've listened to every whisper of your heart. I know it all\u2014all of it. In a sense, you already belong to me, but I haven't yet tasted you. But I will.\"\n\nEmily gulped. She felt a twinge of fear return but, more than that, she felt aroused. Everything about the demoness\u2014the way she talked, the way she moved, the way she smelled\u2014dripped sensuality. Emily could barely think straight in her presence. She knew she was being seduced. Even when the demoness insulted her, Emily loved it. She could be insulted\u2014scolded\u2014by that wicked, sultry voice all night.\n\nThe demoness moved in closer. Emily could feel her hot breath against her cheek.\n\n\"I don't want to taste all who summon me,\" she whispered. \"Only a few. Only those who were made to submit. To be conquered. Girls like you.\"\n\nEmily felt a dark chill race through her small frame. Those words were too accurate\u2014beneath the surface of Emily's common longings was a deeper, more primal desire. A desire to be dominated\u2014to surrender to someone stronger. To make the surrender complete. To be used for their pleasure, however they wished. Sometimes, in her masturbations, she would go farther in her fantasies than her conscious mind would allow. Normal sex scenes with Galen would give way to scenes of more ferocious lust\u2014quite improper for a girl like her to desire and imagine. But it couldn't be helped. She saw herself in all manner of subjugated poses, nude, before a myriad of lovers\u2014women and men. She envisioned how they used her for their pleasure, ravishing her mouth, her pussy, her entire body with their own. Any way they wanted\u2014as much, and as little, as they wanted. She would enter a place of supreme powerlessness, helpless before their cruel and artful caresses, her body becoming almost selfless and empty in the way it fulfilled their every whim. And these fantasies always had one, grand result: powerful, wet orgasms, spraying and gyrating and spasming as she cried out, her cheeks flush with desire. She always worried her mother or sister would barge in at the worst moment and see what she was doing\u2014but they never did.\n\n\"Don't worry,\" the demoness said. \"I won't take you too far. Yet.\"\n\nEmily shivered as the demoness then kissed her cheek, giving it a sultry, long lick. Her hot tongue against her flesh felt even better than she imagined. She wanted that tongue for herself\u2014to suck it, to feel it sliding over her aching skin.\n\n\"We're just starting,\" the demoness said.\n\nEmily shivered with delight. Her sex ached and yearned at those words\u2014her mouth watered. Take me her mind whispered.\n\n\"Here is how it works:\" the demoness continued, \"you will belong to him, but also to me. Anytime I want, you will be mine. I will get all the pleasure I want from you, whenever I want. Don't worry\u2014I am fair. I'm not greedy. But you will submit to me, as my own, and do whatever I ask. And I will have many tasks for you\u2014not only ones of a lustful nature. This is how the pact works. You may read in your books that a demon or demoness wants a particular thing in exchange\u2014like a soul\u2014but possessing a soul isn't like possessing a gem or jewel. And it is not like stepping into someone else's body. No\u2014it is always about having one's way, completely. This is what we are and this is what we do. Do you understand?\"\n\nEmily nodded.\n\n\"Good. And you accept?\"\n\n\"Yes,\" she whispered.\n\nOh God, she immediately thought. Did I really just agree to this? But the deed was done. She knew enough from demon lore to know that there was no turning back\u2014as soon as the words escaped her lips, the pact was sealed. Forever. She belonged, now, to a demoness. She would have her Galen, and the life she wanted. All her dreams would come true. But all at a price\u2014a price that could never be fully paid.\n\nThe demoness smiled. \"Wise choice.\"\n\n8\n\nEmily's eyes thinned to slits as she looked up toward the demoness. Somehow she appeared even more beautiful than before\u2014incandescent, shimmering with lust. Emily licked her lips in anticipation. Despite her usual shyness, she was ready.\n\nThe demoness moved closer till she stood at the edge of Emily's bed. Emily could feel her body heat radiating off her skin. The demoness then looked downward at her own crotch. To Emily's astonishment, a large, thick cock rose up in between the demoness's legs. It looked just like a man's\u2014veined, massive, straining to be touched.\n\nEmily looked at the demoness, questioningly. She only smiled.\n\nHungrily, Emily returned her gaze to the demoness's cock. It was perfectly entrancing\u2014so thick and hard. So massive. Emily lowered her head towards it, kissing the tip ever so gently. A small bead of pre-cum oozed out from the end. Emily licked it, loving its salty, infernal flavor. The demoness exhaled hard\u2014almost as if in pain. She needed more.\n\n\"Wait,\" the demoness said. In one swift gesture, her dress fell to the floor, revealing her painfully sexy body. Emily gasped. The demoness was as beautiful as a painting\u2014exquisitely curved hips, long, sultry legs, perfectly rounded breasts, a slim belly adorned with a red jewel in the center.\n\n\"Oh no,\" she whispered. It felt as though the very form of the demoness was seeping into her mind, tearing down all its inhibitions and uncertainties with cruel, brutal lust. Emily wanted so desperately to be fucked\u2014to be broken and spread and ravished like a maiden taken by her captor. At that moment, she would do anything for the demoness\u2014anything. She surrendered. It was done.\n\nEmily dove forward, embracing the cock with her aching mouth, swirling her tongue over its tip and drawing it deeper inside with her lips. Her body shuddered with desire as its hard warmth and flavor engulfed her mouth. The sides of her cheeks watered\u2014her tongue spontaneously slid back and forth against the cock's warm underside. It flexed, then relaxed, yet remained hard. Emily pushed forward even further. The demoness gasped.\n\nEmily could sense her desire, somehow\u2014wild, ruthless, untamed. The heat, the hardness, told her. As Emily's mouth clamped down, and as she licked with wild abandon, the demoness trembled in delight, whimpering faintly then sighing again, hard. She cried out gently. Emily's body felt hot all over\u2014her sex clenched. She looked again into the demoness's eyes as she slowly and carefully moved her head forward, letting the cock slide further inside her sopping wet mouth and into her quivering throat.\n\n\"Yes!\" the demoness hissed.\n\nEmboldened, Emily sucked on it harder, then released, then sucked again, each time coating it with more of her saliva, twisting her tongue below its tip as more pre-cum leaked out. It tasted so good\u2014warm, thick, salty, dark and full. Emily felt it hardening in her mouth, then relaxing again. She could taste the demoness's heart beating through it.\n\n\"Ugh!\" the demoness exhaled, instinctively pushing her hips forward. Yearning for more, Emily thrust her head forward then back, fucking the demoness's cock with her face. The demoness thrust back and forth in rhythm. Emily moaned and gasped\u2014mouth full of cock, saliva spilling out the sides, dripping down her chin. She wanted to be naked\u2014she quickly unbuttoned her shirt then threw it off, exposing her small breasts to the moonlight. The demoness, panting, greedily caressed Emily's dark, sweaty hair as she thrust, then slid her hands over Emily's sweat-covered shoulders. Emily's skin felt hot all over as her sex surged with arousal\u2014nothing in the world mattered but the demoness. There was nothing else.\n\n9\n\nEmily pulled her face off the demoness's cock, then slowly licked up and down its sides. The demoness arched her hips forward, gasping. Emboldened, Emily took the demoness's cock into her mouth again, squeezing down around with magnificent pressure. \"Fuck!\" the demoness exclaimed. A tremor of pleasure roared through Emily\u2014she wanted to engulf the demoness's cock. To devastate it with an even greater pleasure than she felt. She wanted its hot, white cum shooting into her mouth and spilling out the sides. She wanted to make the demoness cum.\n\nUnable to contain herself any longer, the demoness grabbed Emily's head and began to thrust even more vigorously than before, pumping her cock in and out of Emily's mouth. Emily relaxed and surrendered herself, letting her mouth become a perfect fuck-toy for the demoness. Saliva dripped and splashed down her chin\u2014her eyes watered.\n\nFuck me, she thought.\n\nFuck my mouth.\n\nFuck my mouth till you cum.\n\nEmily gripped tight on the demoness's buttocks\u2014warm, smooth, glistening with sweat. The demoness's sack slapped against Emily's chin as her nostrils filled with her the demoness's sweet musk. Her sex ached and clenched\u2014she wanted to rub her clit, but refrained.\n\n\"Agh!\" the demoness groaned. \"God!\"\n\nEmily could tell the demoness was lost in pleasure now. Each thrust and each pump almost hurt. Raw. Brutal. Primal. Emily loved it\u2014to be fucked, helplessly in the mouth by a demon girl with a cock. To be dominated and conquered and claimed and overpowered by a demoness's hard, thick, long sex. Emily wished she'd soon do the same thing to her pussy\u2014penetrating her, ravaging her insides, battering the walls of her sex as thrill after thrill of dark pleasure surged throughout her writhing, naked flesh.\n\n\"Fuck!\" the demoness moaned.\n\nEmily closed her eyes as the demoness's thrusts slowed down and then, all of a sudden, the demoness's cock flexed and spasmed. She grabbed hard onto the back of Emily's head, shoving her cock deeper down Emily's throat.\n\nMore, Emily's mind screamed. More.\n\nThe demoness gasped then cried out as her hot white cum erupted into Emily's mouth. Emily felt an erotic tremor roll through her small, sweaty body. A warm flood of the demoness's cum coated her tongue and throat in spurts. Her sex spasmed\u2014she was aroused beyond words. Seed once inside a demoness was now inside her. She trembled in shattering ecstasy, quickly sliding her finger down over her clit then into her wet hole as the cum lingered in a hot little pool upon her tongue.\n\nThe demoness pulled away, her cock glistening and satisfied. Emily gazed into her eyes. She wanted to see the demoness's disheveled face when she swallowed.\n\nThe demoness looked down at her, panting.\n\nEmily loved the way she stared at her. She grinned and swallowed. The cum felt hot and good as it slid down her throat and into her belly.\n\n\"My girl,\" the demoness said, her eyes glassy and far away, yet perfectly intimate. She reached her hand down and caressed Emily's cheek. Emily knew she did well. And more was on the way.\n\n10\n\nThe demoness stared down at Emily, a look of hunger in her eyes. Emily could tell she wanted more. She wasn't even close to finished.\n\nEmily scooted up on the bed then quickly began shuffling out of her undergarments as the demoness looked on. \"Not so fast,\" the demoness said. She crept up on the bed close to Emily then slowly and seductively slid her panties down. Emily's sex was drenched\u2014the demoness spread her legs, licking each thigh, sending a shiver through her body. She then spread Emily's legs, gazing hungrily at her sex. Emily shivered in anticipation\u2014soon the same cock that was in her mouth would be buried deep inside her, hard as steel, thrusting away.\n\nThe demoness grinned. \"You're ready, aren't you?\"\n\nEmily nodded, biting her lip.\n\nRaising up, the demoness arched her back, showing off her immaculate figure. Emily's mouth watered. She wanted nothing more than to feel that body collapse upon her own, surging its hard cock deep inside her as she wrapped her arms around its sweaty back. Listening to the demoness's gasps and moans in her ear\u2014knowing the pleasure she was giving and taking.\n\nThen, in a single motion, the demoness did just that\u2014fall on top of Emily, embracing her, breast to breast, hot mouth to hot mouth, the sweet weight of her body overwhelming Emily's skin, her cock penetrating her with a single, thick jab. The demoness then let the cock linger inside, motionlessly, filling her, then kissed Emily hard and long, her tongue twisting and writhing against Emily's, overpowering her completely. Bold and hesitant all at once, Emily surrendered, kissing and licking the demoness in return as her hands slid up and down the demoness's hard back, now wet with sweat. Her sex hummed with pleasure and need, lost in the feel of the demoness's cock as it filled and stretched her insides.\n\nFuck her mind cried out.\n\nHer clit, fully engorged, gently brushed up against the demoness's skin, engulfed in the ecstasy of the trembling friction that arises as two naked bodies shift upon one another. Emily moaned into the demoness's mouth\u2014she instinctively pushed her hips down, pushing the demoness's cock further up inside her body. She whimpered as it slid it, sending a thrill of dark pleasure surging through her body.\n\nMore.\n\nI want more.\n\nFuck me.\n\nKnowing Emily's thoughts, no longer able to restrain herself, the demoness arched back then began to thrust\u2014slow and powerful at first, dragging out the raw pleasure from Emily's sex by force. Emily gasped, gripping the sheets, shutting her eyes as hot sensation filled her being. Thrust after slow, powerful thrust\u2014thick, strong pumps, sliding into her hot flesh\u2014opening her, filling her, dominating her.\n\nThe demoness leaned down again, cupping Emily's left breast and giving it a hard suck. \"Oh!\" Emily cried. The demoness silenced her with a kiss, letting her teeth drag over Emily's bottom lip, sending another thrill into her brain.\n\n\"Oh God\" Emily moaned.\n\nThe demoness thrust harder, quickening her pace, taking what now belonged to her, her swollen cock pitilessly conquering the writhing girl beneath her.\n\nFuck me Emily's mind cried out. Don't stop. \n\nThe demoness groaned\u2014the warm, tight feel of Emily's wet sex against her weakening her last bit of resolve. Instinctually, burning in lust's clear fire, she plunged and stabbed her thick cock deeper inside, faster, gasping for more. In unison, both were sliding towards the edge\u2014the demoness would allow nothing less.\n\n\"Fuck!\" Emily cried, her whole body surrendering to the demoness's unrelenting force. She moaned as the demoness clasped her hands against her writhing hips, sinking her cock even deeper, shoving it in and out at a frantic pace. The demoness's full sack slapped against Emily's squirming buttocks. She screamed.\n\nThe demoness cried out\u2014sweat dripped from her brow and onto Emily's writhing, naked breasts. Emily could no longer think\u2014her mind was gone, shattered and dashed at the approach of climax. All the elements of her being centered on the glowing burn of her sole desire: for all this movement to break her down, to explode into a heaven of relief, shattering her core.\n\nTo cum. To cum powerfully, fully. To cum on a demoness's cock\u2014with it buried inside, spilling its molten semen into her body. To be filled with the demoness's seed\u2014for the same hot, sticky semen that once drenched her mouth to conquer her insides, mingling liquid to liquid, juice to juice. Warmth to warmth.\n\nEmily cried out once more, panting as her entire body erupted with tension. Completely vulnerable, perfectly conquered, Emily's sex clenched and spasmed on the demoness's cock, her insides sucking and quivering for the ensuing explosion of cum.\n\nBut the demoness wasn't ready\u2014with a sexual majesty and diabolical intelligence, she shoved her hand into Emily's begging mouth with one hand and teased her swollen clit with the other, pushing Emily further into her erotic abyss.\n\nIt was too much\u2014Emily, her mouth full of the demoness's smooth, warm fingers, salty from sexual sweat, reeled as her poor sex ached and squeeze with even greater pre-orgasmic contractions, howling in ecstasy as the demoness battered the walls of her sex. She didn't care who heard\u2014the world no longer existed for her. Everything was far away and gone. Only the moment mattered. Her eyes rolled back into her skull as she howled and screamed and wailed, impaled over and over again by the demoness's throbbing, vibrating cock. Then in a flash of punishing ecstasy, she came\u2014hard, powerful, toes curling, spraying the demoness with her hot juice. As the orgasms raced through her entire body, her mind collapsed in on itself. It became a trembling diamond of sheer pleasure then exploding outward, devastating every corner of her mind, leaving nothing but the hot landscape of exposed sensation that was her wet, quivering body.\n\nAll things vanished in sexual oblivion\u2014sweat, bodies, minds, fluids, gasps, dreams, everything.\n\nUnable to resist further, the demoness groaned, her body and cock tightening into a perfect, strained motionlessness as her hot white seed shot inside Emily's quivering pink sex. It belonged to her\u2014the pact was made. Ejaculation after ejaculation of cum erupted forth, ensconced in Emily's warmth. Emily, a whimpering mess, bit into the pillow.\n\n11\n\nThe demoness pulled out slowly and staggered up, her sweat-drenched body panting for air.\n\nEmily, her cheeks wet with her tears, writhed backward and stretched out her arms as all former tension drained away. Eyes still shut, she caught her breath, then she smiled evilly as she felt the demoness's warm cum leaking from her sex and onto the bed. Nothing in her life had felt better.\n\nNothing.\n\nShe grinned and opened her eyes again.\n\n\"Oh God that was wonderful\" she exclaimed. She turned to look at the demoness, their bodies both glistening with moonlight and sweat. The demoness gave a knowing grin.\n\n\"Now,\" she asked wryly, \"what was the name of that boy again?\"\n\n\"I don't even care,\" Emily replied with a giggle.\n\nThe demoness, pleased with her answer, crawled back into Emily's arms. Emily nuzzled and kissed her warm neck, licking her delicious sweat.\n\n\"Precious girl,\" the demoness cooed. \"All mine now.\"\n\n\"Yes, always,\" Emily said.\n\nThe demoness hadn't lied\u2014Emily couldn't even bear to think about Galen Amano, now. Or his riches. She had something far better\u2014she belonged to Vresas, her demoness. Body and soul, heart and mind. All was hers. And there was no surrender sweeter than that.\n\nShe kissed the demoness, taking her sweet tongue deep into her mouth. Outside, the moon continued to shine, galaxies continued to swirl, and the infernal world counted another girl lost to the darkness.",
        "fin"
    ],
    "authorname": "zinanova",
    "tags": [
        "futanari",
        "transgender",
        "futa",
        "futa on female",
        "dick girl",
        "demon girl",
        "demoness",
        "succubus",
        "succubi",
        "hermaphrodite"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/vresas-the-demoness"
}
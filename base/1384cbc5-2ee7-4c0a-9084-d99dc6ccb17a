{
    "title": "Tucker's Studio Ch. 28",
    "pages": [
        "All people and places are fictional. All characters are over eighteen.\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nAn Old Friend\n\n\n\nTucker had been wanting to turn Marsha and Liz on to the world of live blues, but each time there was a good show at his favorite honky-tonk something came up and they couldn't go. Finally, after two months of trying, the stars aligned and the three of them were up close and personal with Alligator Al and the Rockin' Reptiles, a hot, up-and-coming blues guitarist on his first national tour.\n\nThe band was already playing when they got there, and the bar was four deep waiting for drinks, so Liz didn't get to meet Kat and Lori until things thinned out a bit right before the second set. She'd heard plenty about them, mostly from Marsha, and was intrigued that Tucker kept the whiskey bottle with the black roses on his desk. She was anxious to meet the girl who captured his sentimentality in that way.\n\nShe wasn't disappointed. All she could do was smile when she saw the two bartenders work the bar \u2014 Lori, with her long, straight hair, bohemian peasant blouse and tight jeans, and Kat, dressed for maximum tips in short, cut-off jean shorts and a lace-up black leather bustier. The leather was so thin and well-worn it had actually molded around her nipples, adding to the tip-worthy effect.\n\nThe two girls controlled the action in a way that fascinated Liz \u2014 every man in the place seemed to be right in the palm of their hands, and she could tell right away why Tucker was so smitten with them, especially Kat.\n\n\"Hey you guys!\" Kat said when they finally found a spot at the bar. \"How's my favorite...business people. Oh my God, I almost blurted it out!\" she chuckled.\n\n\"Hi Kat. This is our friend Liz,\" Tucker said.\n\n\"Hi Liz. Do you work with these guys?\"\n\n\"No,\" Liz said, suddenly embarrassed.\n\n\"She's our...\" Tucker said, looking at Marsha and Liz. \"...what are we anyway?\"\n\n\"Say no more,\" Kat said. She'd seen everything at the bar, and knew from the looks on their faces what Tucker was getting at. \"Nice to meet you Liz,\" she smiled. \"Lori, look who's here!\"\n\nLori got a free minute and walked over to say hi.\n\n\"Dave and Molly come in now and then. Lori's been hangin' out with them,\" Kat said. Lori looked embarrassed. \"You can tell 'em,\" Kat said to her. \"They're doin' it too.\" Kat winked at Lori, but Lori didn't want to fill in the details. She shook her head at her partner and went to take care of a customer. \"She's so cute when she's shy,\" Kat smiled.\n\nA woman walked in alone during the set-break and made a bee-line for an empty stool down the bar a ways. Marsha had a strong feeling she knew the woman, an old high school classmate she thought, but it had been twelve years so she couldn't be sure. Adding to the doubt was the woman's tired, sad demeanor; it was just the opposite of the way Marsha remembered her.\n\nThe band started playing again and Tucker, Marsha and Liz made their way up near the stage.\n\n\"Andrea, right? I'm Marsha,\" Marsha yelled above the loud music when the woman forced her way through what was left of the crowd. It took a moment for it to register.\n\n\"Oh my God! Marsha! Hi!\" Andrea said. She'd had a drink too many wherever she'd been before, and was a little tipsy.\n\nThe two women tried to have a conversation to catch up on things, but the music was too loud so they retreated to a booth at the back of the room.\n\n\"So what's up with you? How's life?\" Marsha asked.\n\n\"It sucks,\" Andrea said sadly. \"A real shit storm lately. How 'bout you?\"\n\nMarsha hated to say how wonderful things had been with Tucker and Liz, so she threw the bad stuff out there first.\n\n\"Fresh divorce. The ink's still wet on the final paperwork.\"\n\n\"Really? Me too,\" Andrea said. \"Is yours as big a prick as mine? I'd love to fuck with his head somehow.\"\n\nMarsha smiled, remembering how Andrea used to get in trouble at school for swearing.\n\n\"Who's the guy?\" Andrea asked, glancing toward Tucker. \"That's not your brother is it?\"\n\n\"No. You remember Donnie?\"\n\n\"Hell yeah! You probably don't know this, but he fucked Rica. Remember my friend Erica, everybody called her Rica? Freshman year. Donnie was a senior.\"\n\n\"Wow,\" Marsha said, processing the thought. \"My brother was screwing freshman? I wonder how much of that was going on?\"\n\n\"Maybe I shouldn't tell you.\"\n\n\"No, that's okay. But no, that's not Donnie. That's my boyfriend Tucker. He's my boss too.\"\n\nMarsha felt a little odd saying that, like she was doing something wrong sleeping with the boss. It also felt odd when the realization hit her that Tucker did in fact look a little bit like her brother. More than a little bit.\n\n\"Dating your boss huh? That's cool. What do you guys do?\"\n\n\"We, uh, we're in video production,\" Marsha said, wondering if she'd ever feel comfortable blurting out \"porn\".\n\n\"Oh, cool. Like commercials and stuff?\"\n\n\"No...um...adult...entertainment?\" Marsha said. After the words came out she wondered why she'd said it like a question. Own it girl, she said to herself. Don't be embarrassed.\n\nAndrea looked at Marsha with a blank stare as she put two and two together.\n\n\"What do you mean?\" she said, her expression slowly changing. \"Like...dirty stuff?\"\n\n\"Do me a favor and don't tell everyone all right?\"\n\n\"Wow! Marsha! How'd you get into that? Do you...oh my God are you...\"\n\n\"I'm part of the crew. I do hair and makeup and wardrobe and that kind of thing.\"\n\n\"Yeah, I knew you wanted to get into cuttin' hair. Fuuuck Meee! So is it like...real porn shit? Where the fuck do you do it?\"\n\n\"Right downtown. It's crazy, I know.\"\n\n\"No! Are you kiddin' me? That's the coolest job I've ever heard of!\"\n\n\"Maybe,\" Marsha chuckled. \"I guess it is.\"\n\n\"I'm buyin' shots. I gotta get you to talk,\" Andrea said as she slid out of the booth. The back end of the bar was pretty quiet so she got served by Kat right away.\n\n\"Jager,\" Andrea said as she slid back into the booth. \"Remember we all used to drink this in high school?\"\n\n\"I got so sick on it I haven't had it since,\" Marsha chuckled.\n\n\"Bottoms up,\" Andrea said, and she drained the plastic cup into her mouth. \"I shoulda got doubles,\" she said, and started to move out of the booth again.\n\n\"No, wait,\" Marsha said. \"I can't drink like that any more.\"\n\n\"You guys are missin' a great show,\" Tucker said as he breezed by on his way to the men's room.\n\n\"Ooo, I like!\" Andrea said, checking out his ass before he disappeared around a corner. \"So how long have you guys been together?\"\n\n\"Six months or so I guess.\"\n\n\"God that's loud,\" Liz said, rubbing her ears as she approached. She slid into the booth next to Marsha. \"I need earplugs next time.\"\n\n\"Liz, this is an old friend from high school, Andrea,\" Marsha said. \"Liz and I are...oh, fuck...how do we do this?\"\n\nThe shot of Jager on top of her earlier drinks had temporarily screwed up Marsha's thinking. She'd already blurted out more than she wanted to.\n\n\"Are you an actor?\" Andrea asked Liz, her eyes big with curiosity.\n\n\"A what?\" Liz asked.\n\n\"She wants to know if you're a porn star,\" Marsha said, starting to giggle.\n\n\"Oh my God!\" Liz said quietly, wondering if the answer was yes. Marsha giggled some more.\n\n\"You guys don't like the show?\" Tucker asked when he returned.\n\n\"I ran into an old friend,\" Marsha said. \"Tucker, this is Andrea, from high school.\"\n\n\"Oh cool,\" he said. \"I see the whole class was sexy.\"\n\n\"Hey Mr. Flirt! Cool your jets,\" Marsha said.\n\n\"I'm feeding Marsha shots, trying to get her to spill the beans on your operation,\" Andrea said.\n\n\"Work you mean? Oh, yeah, it's kinda fun,\" Tucker said. \"What are we doin' for shots?\"\n\n\"Jager,\" Andrea said.\n\n\"I'm on it,\" Tucker said. He ordered four doubles from Kat and walked back to the booth with the cups, slipping in next to Andrea.\n\n\"Do they say bottoms up where you work?\" Andrea asked Tucker, her eyes twinkling mischievously.\n\n\"Bottoms up, tits out, cocks ready,\" Tucker said, smirking. \"Yeah, all that stuff.\"\n\nAndrea laughed. It was the first good laugh she'd had in weeks. \"I'm so glad I ran into you,\" she said to Marsha. \"It's been rough lately.\"\n\n\"Andrea's a free woman,\" Marsha said. \"We're celebrating.\"\n\n\"Here's to divorce,\" Andrea whooped, and she gulped her Jagermeister.\n\n\"You're not drivin' are ya honey?\" Tucker asked.\n\n\"Nope. A friend dropped me. I always take a cab home from here. I've seen you ya know. I come down for the good bands sometimes.\"\n\n\"Oh yeah? I love it here,\" Tucker said. \"It's Lizzie's first time.\"\n\n\"Yeah? You a virgin Lizzie?\" Andrea asked, her voice starting to slur a little.\n\n\"Hardly,\" Marsha said, provoking a glare from Liz. The liquor almost let out a description of Liz's twelve boy gang-bang at Kelsey's party, but Marsha thought better of it at the last instant. A giggle rolled out of her mouth instead, and Tucker chuckled.\n\n\"Looks like cabs for all of us tonight,\" he said. \"So Andrea, what do you do for a living?\" \n\n\"I work at an industrial laundry. It's the shits really. Repair and press uniforms, put those name tags on 'em, stuff like that.\"\n\n\"Any cute guys there?\" Marsha asked.\n\n\"Yeah, a couple. Young though.\"\n\n\"They've got the best cocks,\" Marsha said. She tried to stifle a laugh. \"Sorry honey,\" she said to Tucker.\n\n\"Hey, it's probably true. You guys got more experience at that than I do,\" he said.\n\nLiz couldn't believe the conversation they were into, in public, with a woman she'd just met, but the liquor buzz seemed to make it all uncontrollable.\n\n\"What the fuck!\" Andrea said. \"You guys fuck around with the...like with the...actors?\" She was looking at Marsha and Liz, whose faces were pretty easy to read. \"Fuck, I gotta get me a job down there! How young are they?\"\n\n\"Our eighteen-year-old is nineteen now, so no, not too young,\" Marsha said. She burst out laughing at the absurdity of it all. \"Can you fuckin' believe it? You won't tell anybody, right?\"\n\nWine at dinner, two margaritas at the bar, and three shots of Jagermeister had rendered Marsha loopy. Liz was right there with her even though she hadn't finished her last shot yet.\n\n\"You need to come do a scene,\" Marsha said to Andrea. \"Those boys are whhhhoossshh.\" It was an odd sound effect, but Andrea got the idea.\n\n\"Yeah right!\" Andrea said. \"Me?\"\n\n\"I hope you don't take this the wrong way, but your perfect,\" Tucker said. \"We specialize in the amateur stuff, girls just like you. It's totally up to you though. If it sounds cool to you, we'd love to have you.\"\n\nAndrea made a sound effect too, a long farting noise, with her lips flapping together.\n\n\"Whoo boy! I think I must be drunk,\" she said. \n\n\"When you sober up tomorrow, check out the website. This password'll get you in,\" Tucker said as he wrote it on the back of his business card. \"And then, if you want to, as a divorce present I'll do a boudoir photo shoot for you, no charge. I've got a great photographer. You better watch out though, you'll probably turn him on so much he'll wanna fuck you.\"\n\nAndrea felt like she was dreaming. Thirty years old isn't as bad as forty to get divorced, but she'd still been feeling as old as the hills lately and not the least bit attractive. She didn't know if Tucker was drunk too, or if the look of appreciation he had in his eyes was real. She hadn't had a man look her over like that in a while, and certainly not with a sexy twinkle in his eyes like Tucker.\n\nMarsha's eyes were a different story. They weren't quite glaring at Tucker, but he could tell she wanted to question him. She felt a bit like she was dreaming too, not quite believing the situation she was in, with her boyfriend recruiting her high school friend for porn. Marsha knew how he worked \u2014 the photo shoot would lead to more, and pretty soon her high school reunion would be an embarrassing debacle. Either that or it'd turn into a huge orgy that caused a scandal, one she'd have to take the blame for.\n\n\"Whaddaya think Marsha, she'd be great in front of the cameras, right?\" Tucker asked.\n\n\"Oh. Yeah. Of course,\" Marsha said. She knew the kind of vulnerability Andrea was going through, and had to think quick to say the right thing. \"You'd be great honey, but, think it through, okay?\"\n\n\"Have you done it?\" Andrea asked Liz. Her instincts told her that Liz's silence and the look in her eyes was hiding something.\n\nThere was a pregnant pause at the table as everyone waited to hear what Liz would say.\n\n\"Yes,\" she said quietly. She figured Andrea would see her on the website, and the alcohol in her helped the truth come out. \"I really didn't have a chance to think about it like you. A friend sort of...well, we got sort of swept up in it.\"\n\n\"And?\" Andrea asked. \"Let me put it this way...are you glad you did it?\"\n\nLiz was horrified that Andrea had worded it that way, because there was no way out. She was forced to tell the truth, and she was sure the truth would make her sound like a slut.\n\n\"Yeah, I am,\" she said, glancing at Tucker, and then Marsha. \"It was...life changing.\"\n\nAndrea was stunned by the answer. Everything she was in the middle of at that moment was mind-blowing. The alcohol was undoubtedly amplifying the feelings, but she suddenly saw her future, and it involved cameras and big cocks. It was surreal, and not what she expected that night when she walked into the bar.\n\n\"A photo shoot, huh?\" Andrea said to no one in particular as she read the front of Tucker's business card. \"Like...lingerie or something?\"\n\n\"Sure,\" Tucker said. \"My photographer's great, you'll like him.\"\n\n\"His name's Jamar,\" Marsha said, her sexy little smirk catching Andrea's eye. \"He's really talented. A jack-of-all-trades I guess you could say. If you really wanna do this, and I think you should think it over carefully, but if you want to, you should have him model with you. I think you'd like it.\"\n\n\"Sure, great idea. I'll shoot the pictures if we go that route,\" Tucker said.\n\nAndrea was intrigued by the look on Marsha's face. Had she been with Jamar? Tucker's her boyfriend...just what is going on down at T.S. Productions? \n\n\"I don't suppose you're open tonight?\" Andrea said. \"I don't know if I'll have the courage tomorrow.\"\n\nTucker looked at his phone to see what time it was. \"It's just midnight,\" he said to Marsha, shrugging his shoulders a little. \"He always tells me he's up for anything anytime. Should I text him?\"\n\n\"I don't think we should take advantage of Andrea when she's been drinking,\" Marsha said.\n\n\"Hey, this is pretty much my normal state these days. And I'd kinda love to be taken advantage of tonight.\"\n\n\"I'll see if he's around,\" Tucker said, knocking out a quick text to Jamar.\n\n\u2014\n\n\"I always thought you had pretty hair,\" Marsha said as she brushed out Andrea's bottle blonde tresses.\n\n\"I can't believe the set-up you've got here,\" Andrea said. \"It's nicer than the salon I go to.\"\n\n\"Tucker likes to keep things nice. I'm gonna spritz this and make it a little bed-heady, is that okay?\"\n\n\"You're the expert. Anything you can do'll be better than what I normally look like.\"\n\n\"Are you kidding? You look great. I saw Jeanie from school a while back. I hate to say it but, overweight and...she just gave up. You look kinda fantastic.\"\n\n\"Yeah, if you like big asses.\"\n\n\"I happen to know Jamar is kinda partial to 'em. You better watch out.\" Marsha winked at Andrea in the mirror as she spritzed and fingered her hair into sexy clumps. She could she Andrea's mind working, trying to process things.\n\n\"Is he...black?\" Andrea asked, her eyes widening.\n\n\"Yup. Super sexy. Tall and slim. He's from Jamaica. His smile'll melt those clothes right off of you.\"\n\nAndrea wondered for a moment if Marsha had set it up on purpose, because of what had happened all those years ago, but then she remembered that it was Tucker who had first mentioned Jamar.\n\n\"You don't remember, do you?\" Andrea asked as Marsha pulled some makeup out of a drawer.\n\n\"Remember what honey?\"\n\n\"Middle school. Eighth grade.\" Andrea let the words hang there, sure that Marsha would remember. After a moment Marsha did.\n\n\"Oh,\" she said quietly, looking into Andrea's eyes in the mirror. \"Oh shit.\"\n\nThere was a quiet scandal that year, their last year in middle school before heading to the high school down the road. Two boys from the football team were expelled from the school after allegedly having sex with a girl in the locker room. It was all very hush hush, but rumors spread, and Andrea was the target. The boys were black, big and muscular, and Andrea was a waif-like blonde, as milky white as a girl can get. The school and parents all put clamps on the rumors, and it all died down pretty quickly. Kids that age don't dwell on things.\n\n\"I lost my virginity to them. I wasn't a slut you know, but I wanted it to happen. It was consensual.\" Andrea said.\n\n\"No, I...I never thought...\" Marsha said, wondering for a moment if she had thought Andrea was a slut. \"You know, we can all go home if you want. Tucker'll understand.\"\n\n\"Are you kidding? My shrink back then, she tried to tell me I needed to put color out of my mind, but I never could. I've had this...fetish, I guess you'd call it, ever since. Black men make me crazy. I haven't been with one, since those boys, but it's not because I haven't dreamt about it.\"\n\n\"We get quite a few women in here that feel the same way,\" Marsha said.\n\n\"Really? Why is it so...it shouldn't affect me this way, I know. I mean we're all just people. They're just men.\"\n\n\"Hey, some guys got a thing for blondes,\" Marsha said. \"It's not that much different. Tall dark and handsome is tall dark and handsome, I say. It's funny, I never think much about Jamar being black. It's his accent and his smile that get me.\"\n\n\"You don't think he'll mind my...\" Andrea's hand went to the side of her full hips and she looked down at the way they spread in the barber chair.\n\n\"Are you kidding? You look great. Hold still...\" Marsha applied some eyeliner that made Andrea's pale blue eyes come alive, and some mascara. \"Let's pick an outfit before we decide on a lipstick. Black lace with red lips might look hot on you.\"\n\nAndrea picked a bra, pantie and garter belt set, sheer black with frilly lace outlines. Very see-through. Marsha was a little surprised \u2014 it was racy stuff for a nervous first-timer to parade out in, but they were all a little drunk and judgment was skewed a bit. Red lipstick set it all off, and Marsha gave Andrea's blonde hair a quick fluff.\n\n\"Damn!\" Marsha said as they admired the look in the big full-length mirror. \"You look good. Turn...\" She spun Andrea around and their eyes went to her ass, smooth and round and super sexy under the see-through panties. \"I hope you don't mind me sayin' this, but that...that looks good enough to lick.\"\n\nAndrea giggled. She was glad the alcohol still had a firm grip on her, because she'd never show herself like that to strangers otherwise. She glanced up at Marsha in the mirror and was fascinated by the look on her face. Did she like women too, Andrea wondered? Is this place that wild?\n\n\"All right, lets take some pictures,\" Marsha said. \"Did you decide whether you want to do it solo or not?\"\n\n\"Oh. No. I mean, I don't think I'd be good at that. Do you? I mean, wouldn't it be better for me to...Jamar's done it before, right? He can, sort of guide me.\"\n\n\"Sure. Yeah, he's an old pro. I'll warn you though, once you get started with him...well, let me put it this way...he's hard to resist.\"\n\n\"I'm so fuckin' horny I wasn't really thinking of resisting.\"\n\n\"Well you've come to the right place then, Just remember, it's going on the website. Right? You still cool with that?\"\n\n\"Yeah,\" Andrea said, her whole body suddenly flush with heat. \"It'll fuck with my ex's head. I kinda love that idea.\"\n\n\"All right girlfriend. Let's do it,\" Marsha said.",
        "The big old warehouse that was Tucker's studio was dark and foreboding as Andrea followed Marsha toward a well-lit bedroom set. Tucker was there and Jamar was sitting on the bed. They were chatting and laughing as the girls came into view. Andrea suddenly felt little more than naked, probably because that's what she was. Her nipples were hard and her lovely pinkish areolas were on view through the wispy sheer black bra, and her trimmed but still fury pussy was clearly visible through the little panties. It was the first time she'd been in a garter belt since early in her marriage, and she felt like she was walking oddly because of it. Every little sensation felt like a big deal to her \u2014 the pull of the garter belt, the jiggle of her tits, the air moving past her bare belly and thighs as she walked. The sensations were almost overwhelming.\n\n\"You must be Andrea!\" Jamar said, standing up to greet her like a gentleman. He extended his hand. \"I'm Jamar.\"\n\n\"I am...yes...\" Andrea said, instantly lost in the Jamaican accent and the sight of Jamar, tall dark and handsome, just like Marsha had promised.\n\n\"I hope you don't mind me saying so, but you look spectacular!\" he said.\n\n\"Why would I mind?\" Andreas said. A smile spread across her face, and Jamar smiled too.\n\n\"Wow Andrea,\" Tucker said. \"You should dress like that all the time.\"\n\n\"Think they'd let me in the bar in this?\" she said, looking down at herself. She was shocked at how 'out there' her tits looked in full nipple mode, but didn't say anything. \n\n\"So whaddya think sweetheart?\" Tucker asked. \"Is Jamar your photographer or your modeling partner tonight?\"\n\n\"My partner,\" she said. She sounded confident, but when she said it another wave of heat flushed ever inch of her.\n\n\"How you want me boss?\" Jamar asked Tucker. \"Underwear?\"\n\n\"Let's start with you fully clothed,\" Tucker said. \"Looks like you planned it that way, with all the blacks.\"\n\n\"I know!\" Marsha said, eyeing how Jamar's black jeans and black t-shirt complimented Andrea's pale white skin and her black lingerie ensemble. \"I'm glad we went with that shade of red lipstick. It really pops with you guys.\"\n\n\"Yeah, I'll definitely catch that,\" Tucker said as he adjusted his camera. \"So, we're in the bedroom, obviously,\" he said to Andrea. \"We're not big on formal posing here. Just let things flow. Do what people do in bedrooms, and I'll try and capture it. Okay sweetheart?\"\n\nAndrea felt like her lungs collapsed. Do what people do in bedrooms? Dressed like this? With that gorgeous, smiling man?\n\n\"Okay,\" she said feebly. \n\n\"Don't worry, Jamar's good at this,\" Tucker said.\n\n\"You okay honey?\" Marsha asked. \n\n\"Right as rain,\" Andrea said. \"I wish I had a drink.\"\n\n\"What's you pleasure?\" Tucker asked.\n\n\"Shots. Something strong.\"\n\nMarsha went for a bottle. Jack Daniels seemed up Andrea's alley, so she brought that and four plastic cups.\n\n\"Party time!\" Jamar said. \"Hey boss, I ever tell you I love my job?\"\n\nTucker smiled and took a cup as Marsha handed them out. They all drank and Marsha refilled Andrea's and Jamar's cups.\n\n\"Whoo!\" the nearly naked blonde said when she downed the second generous shot. It was just what she needed to get over the wild case of nerves she'd had since she saw Jamar. Marsha gathered the empties.\n\n\"All right, let's ease into this,\" Tucker said.\n\nAndrea looked at Jamar just as a powerful whiskey rush hit her. She reached around him and pulled him to her open mouth, kissing him furiously.\n\n\"Or we can just jump in,\" Tucker said, smiling as he brought the camera to his eye.\n\n\"People fuck here, right?\" Andrea breathed, her red lips still nuzzling Jamar's soft mouth after the sloppy wet kiss.\n\n\"Yes,\" he answered. \n\nHe was barely audible, but loud and clear to Andrea. She reached for the crotch of his jeans, well fitted but loose enough for his big cock to grow. A breathy \"Ohhhh!\" floated from her mouth when she felt the size of him. \"Yeesss!\" she softly hissed.\n\nAndrea wasn't quite sure what she had her hands on. Jamar couldn't possibly be that big, could he? She was dying to know, so she dropped to her knees by the side of the bed and unfastened his pants. For a quick moment she wondered how slutty she must have looked, diving in head first the way she was, but she didn't really care.\n\n\"Goood Godddd!\" she said quietly when she saw the full size and shape of the big cock, clearly outlined under thin, silky boxer shorts.\n\nMarsha smiled in the shadows behind Tucker. She knew just how it felt to discover Jamar's nine inch shaft for the first time. The look on Andrea's face was wonderful, her eyes wide and sparkling, her open, amazed mouth slowly curling up into a delicious smile.\n\n\"Fffuck!\" Andrea said, in nothing more than a sexy whisper.\n\nShe surprised everyone by going in up the leg, sliding her slim fingers up Jamar's thigh, under the thin silk to find the hot, hard flesh. Jamar was surprised too, and loved it.\n\n\"Oh baby that's nice,\" he said, squirming a bit as her fingers wrapped around him.\n\nHer eyes grew even bigger and more expressive as she got the feel of things, sizing things up, as it were.\n\nTucker was taking photographs. Slowly circling, crouching, moving closer and falling back. \"Nice sweetheart,\" he said as the camera clicked. \"Real nice.\"\n\n\"Oh fffuuck yeah!\" Andrea said, her voice low and reverent as her small hand stroked the full length for the first time. Jamar's heat warmed her fingers and she had a little orgasm. Just a small one, with a full body tingle that washed over her like a warm wave.\n\n\"Lovin' the goosebumps sweetheart,\" Tucker said, circling to find an angle where the lights accentuated them. He clicked off a flurry of shots. \"You look sexy as hell.\"\n\nHow am I gonna a look when I'm fuckin' this thing, Andrea wondered? Oh, yeah, I'm definitely doin' it. And I'm gonna fuckin' suck on it too.\n\nShe pulled the wispy boxers down Jamar's long legs, took nine dark brown inches in her two hands and teased the swollen, bulbous tip of the big cock with her red lips.\n\n\"Stay with that for a minute,\" Tucker said, scrambling to get the right view.\n\nAndrea kissed and nibbled at the warhead end of the fleshy missile, breathing hot breath onto it. Her tongue extended and licked, the corners of her mouth turning up into that sexy smile again as she listened to the camera clicking.\n\nShe glanced at Tucker, wondering if she should continue or move on. He nodded and twirled his finger. She took that as a 'go' signal, and she was more than ready to go.\n\nOne hand came off the long shaft and she took four inches into her mouth. Her moan as it slipped in was wonderful \u2014 deep and dark, yet oh so feminine. \n\n\"Ohhh, fuck baby!\" Jamar sighed.\n\nHis big hand reached for the back of Andrea's head, wide spread fingers raking through the sexy blonde clumps, gently pulling her to him. She followed his lead and swallowed the huge cock as deep as she could.\n\nShe gagged at first, not used to cock swallowing. She'd gotten halfway decent at it when she was first married, but that was a decade ago and her skills fell off with the slow, ten year decline of the marriage. And she had never tried it with a cock anything like Jamar's!\n\n\"Yeah, baby, that's it!\" Jamar groaned. \"Fuck yeah!\"\n\nThe sight was too much for Marsha. Her body tingled and her knees went weak. It wasn't often she had a half an orgasm from just watching something at the studio, but Andrea and Jamar got to her.\n\nAndrea sucked the slippery shaft for quite a while, sitting relaxed on the edge of the bed with Jamar standing between her legs. Her hands explored and caressed his long legs and his tight, muscular ass as all her memories of cock sucking flooded back. The inside of her warm, wet mouth seemed to have memory buds as well as taste buds. The taste and the feel triggered all kinds of wonderful feelings.\n\nShe moaned when Jamar's hands gathered up her head again, his fingers engulfed in her long hair. They slipped down through the tresses onto her shoulders, and then down to the clasp on the sheer black bra. His practiced hands made short work of it, and he flicked the skinny straps off of her shoulders. Andrea scooped it off of her arms and dropped it on the floor, all the while sucking, licking, slurping on the big cock.\n\nShe saw Tucker working, and heard the camera clicking, but her nervousness was gone. She felt like she'd slipped into an altered reality, one where her near naked sluttiness didn't seem odd at all.\n\nJamar knew Tucker had more than enough blowjob pictures, so he pulled off his black t-shirt and let his cock slip out of Andrea's beautiful smile, so he could strip off his pants.\n\nAndrea sat and watched, transfixed by the sight. Jamar was the most beautiful man she'd ever seen.\n\nStill on the edge of the bed, Jamar pushed her back and swept her panties off in one smooth move. His big hands on her stocking-covered knees spread her wide. She moaned as her head fell back onto the mattress. Jamar's open mouth kissed her pussy, her eyes fluttered, and the lights went blurry.\n\n\"Oh shit!\" she sighed. \"Shit!\"\n\nJamar's long tongue cleaved her slippery slit, opening her up even more than she was. He moaned into her, and she erupted in goosebumps.\n\n\"Ohhh God!\" she moaned, her breath short and choppy. \"Hit that spot!...Oh yeah!...Hit that spot!\"\n\nJamar didn't need any instruction. He knew how to make a woman cum as well as any man at the studio.\n\n\"Fuck! Andrea shrieked.\n\nIt was her last word before she was rendered speechless, reduced to the age old language of guttural sex sounds, the sounds of a woman losing herself in ecstasy.\n\nHer eyes opened wide when the climax neared, her body writhing uncontrollably, the photography lights seeming to swirl psychedelically around the dark warehouse ceiling. It was a big orgasm.\n\nMarsha had been silent, used to that protocol during the video shoots, but Andrea's beautiful orgasmic release deserved praise.\n\n\"Fuck girlfriend! That was nice!\"\n\nAndrea, still wide eyed and shell-shocked, started to giggle. Having someone comment on the proceedings struck her funny. Jamar, still gently licking up her juices, agreed with Marsha.\n\n\"That was so nice,\" he said. \"You a sexy girl.\"\n\nAnother big lick up through her snatch turned her giggle to a groan. She reached for Jamar. She wanted to feel his nine brown inches inside her.\n\n\"Fuck me baby,\" she sighed.\n\nJamar stood and folded her legs against her, nearly to her armpits. Her meaty thighs and ass looked spectacular, and her pussy was wide.\n\n\"You a sexy girl,\" Jamar said again.\n\nHe lined up his rock-hard ram and watched Andrea's juicy pussy swallow it, inch after glorious inch.\n\n\"Oh, fuck baby!\" Jamar moaned. Andrea's inside was every bit as sexy as her outside, and his cock was loving it. \"Oh you feel good!\"\n\nAndrea would have said the same thing, but it would have been the understatement of the century, and she couldn't speak anyway. She'd never been filled up that much before. It felt like the big cock snaked all the way through her gut to her throat.\n\nShe grunted when Jamar bottomed out, and he did too. Not all girls could take all of him. Andrea's grunts were low down and dirty, downright primitive sounding, and her face had a look of extreme determination. Staring deep into Jamar's eyes, her own big blues were dark and fiery. \n\n\"Yeah!...Do it!\" she grunted through clenched teeth when Jamar started to thrust. \"Fuck me!\"\n\nJamar knew the wild look. She was ready for something serious, not just photo shoot poses. Girl wants some big-time fuckin'!\n\nJamar gave it to her.\n\nYeah!...Tear that shit up!\" Andrea grunted when Jamar was up to speed, fucking her hard. Her voice was downright devilish. \"Mess me up!\"\n\nThe big bed looked like it might collapse, so mighty were Jamar's pounding thrusts. Wild grunts and groans echoed though the old studio. Tucker circled, zoomed, pulled back...clicking, clicking, clicking.\n\n\"Fuck me!\" Andrea shrieked. \"Fuck me harder!\"\n\nJamar was giving all he had. All he could do was hang on and hope he'd outlast the wild woman.\n\nHe did. Andrea suddenly erupted in wildly writhing spasms, her singing shriek muted by the full-body intensity of it all. She rode the massive wave for all it was worth.\n\n\"Holy shit!\" Marsha said from the sidelines. \"That's hot.\"\n\nAndrea heard her, but was still lost in the swirling wonderment. She'd just been fucked by the best, with a cock worthy of a God, and she wanted to revel in it, to swim around in the glorious feeling while the big tool was still deep inside of her.\n\n\"You cum nice baby,\" Jamar sighed, trying to catch his breath after the epic pounding. His pelvis was still thrusting \u2014 slow, gentle strokes, balls deep in the sexy blonde.\n\nAndrea slowly emerged from the psychedelic intoxication, her legs unfolding, ankles high in the air. Jamar caressed them as he fucked her slow and deep, his hands gliding from shin to shapely thigh. She suddenly wanted to taste his cock again.\n\nShe pushed on his tight, rippling abs, and lowered her legs as inch after inch of slippery cock pulled out of her. She slithered off the edge of the bed and swallowed the gooey shaft, moaning as it slid into her hungry mouth.\n\nThe taste was rich and womanly. Greasy cream that came from so far inside of her. She devoured it.\n\n\"Oh fuck yeah!\" Jamar moaned when she swallowed almost all of him. \"Clean me off good.\"\n\n\"Did you get enough pictures,\" Marsha asked Tucker, her voice breathy and light as air. Tucker knew the look on her face. Her hand went to his crotch, rubbing the hard lump that she'd been keeping her eye on.\n\n\"Yeah, I think we're good,\" he said, smirking at his girl. \n\nTheir lips met and clothes were shed. Moments later they were on the bed and Marsha was sucking his cock, keeping a respectful distance from Andrea.\n\nFor Andrea it was confirmation of her first dirty thoughts at the bar \u2014 the studio was one wild orgy after another. Meeting up with her old high school classmate was the best thing that had happened to her in years. \n\nShe crawled onto the bed next to Marsha and dropped her shoulders to the mattress. Jamar wasted no time sinking into her, balls deep again.\n\n\"Oh yeah, that's a sexy ass baby,\" he said as his thrusts made her flesh jiggle.\n\nAndrea eye's rolled as she reached for Marsha's hand. She was in heaven.\n\nThe fourway action that night was a revelation to Andrea. It was the first group sex she'd been involved in since that fateful day in the school locker room all those years ago. She wouldn't wait that long again."
    ],
    "authorname": "riverboy",
    "tags": [
        "porn",
        "black man",
        "white woman",
        "blonde",
        "exhibitionist",
        "group sex",
        "big cock",
        "bbc"
    ],
    "category": "Interracial Love",
    "url": "https://www.literotica.com/s/tuckers-studio-ch-28"
}
{
    "title": "The Drive-In Pt. 02",
    "pages": [
        "Please read this series of stories in order for character development and continuity.\n\nThe ending of Part 1:\n\nWe got out of the car and walked the girls to the door. As we were going up the stairs, I stopped and said, \"You know, there are a lot of things we didn't....\"\n\n\"Yeah,\" she said quickly, \"I want to do all of them with you. I want to feel everything. I want to make love with you. I have a feeling this is going to be a great summer.\"\n\nPart 2:\n\nI hesitated. Looking carefully into my eyes, she asked \"You are okay with that, with what we...\"\n\n\"Uh, yea, I want to do all that too. I'm looking forward to seeing a lot more of you. Oh Jeez, bad pun- I'm sorry.\"\n\nLisa giggled. \"I was just thinking that I don't have your phone number or even know where you live,\" I observed.\n\n\"Oh, I live at the end of the next street on the left- that way. Our house is on the right side of the cul-de-sac. It's got brick down low, and the rest is painted kind of a dark orange color with white trim.\"\n\n\"Our phone number is 4611.\" Back then, in small towns, everybody had the same area code and the first 3 digits of their number so you could actually dial a neighbor with just the last 4 digits.\n\n\"That's kinda weird, ours is 4614.\" I said.\n\nI saw her eyebrows shoot up. \"That should be easy to remember.\"\n\nLisa looked down at her hands and said, \"What are you doing Sunday afternoon?\n\nMy folks will be at my grandparent's house in Norwood for a barbeque.\" Looking up she added, \"I could say I was too busy and stay home.\"\n\n\"I could probably get there around 3-ish.\"\n\n\"Great, I want to show you something.\"\n\nIt was my turn for upturned eyebrows. \"No, not that- well maybe- if you're lucky,\" she clarified.\n\nWe both looked up the stairs toward the house as Carla said, \"Guys, it's been fun, but my folks could be back at any time. Wrap it up Lisa.\"\n\n\"It's a date,\" I said just before giving her another deep but gentle, unhurried kiss. It felt so good.\n\nIn the car, my first comment was, \"Well, that seemed to have gone well for us all.\"\n\n\"Jesus, Carla is hot,\" Bert started, \"We couldn't get enough of each other. She suggested we come over to her house for a pool party next Saturday.\"\n\n\"I've got swim practice in the morning, but I could probably get away.\"\n\n\"Wow did that just happen?\" he asked, shaking his head. \"Lisa looked pretty happy before we left too.\"\n\n\"We've got a date Sunday afternoon.\"\n\n\"Good for you. We've got nothing up until next weekend.\"\n\nWe said our goodbyes at the curb, and I walked up the driveway to the house. My mom was still up, sitting on the couch reading a book. \"Good movie?\" she asked.\n\n\"It was okay,\" I answered and, to deflect the question, I added \"I like Bert. We've never really hung out before, but he's recently joined the Bridge group and I've played with him several times.\" In my defense, all of that was true.\n\nA few of the students, including myself, had started playing Bridge during lunch and study halls, and just about any free time we had. At first there were 4 of us, then 8. We each had learned it from our parents or grandparents at some point.\n\nSome of the other students saw us having fun and joined in. There were always lessons for those who wanted to learn. Eventually, we would have 10 or so games going on most of the time. The school administrators couldn't figure out how to respond. On the one hand the kids were all playing cards at school- and that couldn't be good- but on the other hand, it WAS Bridge- a very socially acceptable game. In the end, the principal decided it was good for our brains and left us alone.\n\nA couple of the teachers even joined in occasionally.\n\nMy mom said, \"That's good dear. I like it when you make new friends. I'm going to bed here in a minute, but I want to finish this chapter first. Good night.\"\n\nOn the way up the stairs, I went over tonight's events in my mind. I sniffed my fingers and my cock started tingling and feeling heavier in my shorts. I closed my bedroom door, stripped off my clothes- all of them- and started fondling my stuff. I cupped my balls and stroked my shaft and thought of the sliding my finger in and out of Lisa's pussy as she stroked my cock with her lips. All I could dimly see was the back of her head, but my imagination was working overtime filling in the rest.\n\n\"That's probably why they call it head\", I observed silently. She had given me my first blowjob, and she had wanted to do it.\n\nI took my hand off my cock long enough to smell my fingers again. I was close. Too keep my spunk from spraying across the room, I grabbed a tissue and held it over the end of my cock. Even though I had come twice that evening already, a sizeable volume of jism filled the tissue as my eyes rolled back in pleasure.\n\nThe next morning, I had swim practice. I had been a competitive swimmer since I'd lost my first race back in 4th grade. I hadn't lost a race since then. Some of the parents and my coach had big plans for my swimming career, but I wasn't sure I wanted to work that hard for as long as it would take. I was a naturally strong swimmer with a powerful kick, but to get to the next level would take a real commitment.\n\nAfter lunch I started my homework for the weekend, but all I could think of was Lisa. I contemplated going back up to my room for another go, decided not to, and then 15 minutes later decided the pressure was too much. After my much-needed wank, I did some of the chores I had been assigned. Before I knew it, it was time for dinner.\n\nSunday morning, my folks went to church and took my two younger siblings to Sunday School. At 18, I'd been excused from attending, but I still went once in a while to make my mom happy. Religion, I just didn't get it. For years, I had driven my Sunday School teachers crazy by asking never-ending, highly logical questions about their doctrine. Each \"answer\" I got would bring up another question, etc., until I was inevitably told \"You've got to have faith.\" I never got past that. It was the end of the discussion. They had nothing more. To me that was the stupidest answer I had ever heard. They were in essence saying, \"In order to believe, you have to have believe.\"\n\nI had so many questions for Lisa I couldn't even keep track, including- was she religious.\n\nWhile they were gone, I finished my homework, made a sandwich, watched some TV, and shot some hoops out on the driveway.\n\nAt two thirty, my mom had gone shopping or something, so I left a note saying, \"Gone out, back for dinner.\"\n\nI'd been thinking about how best to get to Lisa's house, and I figured I could go down to the end of our neighborhood and cut across the woods near the High School to her part of town. There was a hill that I could skirt and a boggy area I could walk around on the way. I got a little lost, but I'd left early so I rang her doorbell right at 3.\n\nThe door flew open, and she showed me her beautiful white teeth through a smile. She leaned out, grabbed my hand, and pulled me inside. In the entryway, she stood on tiptoe and gave me a kiss. I pulled her to me, and we held each other for a few seconds. She felt good in my arms.\n\nShe was wearing a tee shirt and running shorts. It was a nice warm afternoon and it seemed appropriate. I must admit that I was also thinking how easy it would be to get into, under, and around those unsubstantial coverings.\n\n\"I want to show you something. Come with me.\"\n\nShe took my hand and led me to the back door. We walked across the back yard to the back gate and started up the hill, still holding hands. At one point, I realized it was near where I had gone cross country to get to her house.\n\nThe first house built in Medfield is still there. It's called the Peak House and has an historic marker on it saying, \"built in 1609\". Back then, New England was mostly forest so settlers would cut down the forest to build their homes and clear their fields of stumps and rocks to facilitate planting. The soil was very rocky, so it took decades to move the rocks with the equipment available to them.\n\nOne of the things they did with the rocks was to build walls. Walls to delineate property lines and walls to separate fields.\n\nToday, even though most of the small farms have disappeared, and the forest has regrown, it is very common to find a long, beautiful rock wall making its way across a wooded area for no apparent reason.\n\nWe were now walking along beside one of these walls as we climbed the hill. It didn't quite make the top of the hill before starting back down the other side. She hoisted herself up, sat on the wall, and motioned for me to join her. From our vantage point, we could see over the trees below us and see all the way to downtown and out toward the river to the West. There were plenty of trees at the top of the hill offering their shade. A hundred yards below us someone had begun clearing trees to put in a new road, but the nearest houses I could see were a quarter mile away on the other side of the boggy area.\n\nThere would be lots of mosquitos here later in the summer, but this early in the season we just had a few gnats hovering in little columns in the sunshine. It was sunny and warm.\n\n\"This is my favorite place,\" she admitted. \"We've lived here since I was little, and this has always been my safe place. Sometimes I do my homework up here, sometimes I play my guitar. It's even a great place to take a nap- see right here\", she indicated the area behind the wall where pine needles had been falling from several big trees for years and formed a thick mat. \"Its amazing how infrequently I see anyone up here.\"\n\nWe turned to each other and moved together for a kiss. I looked and this time she had closed her eyes. It was exciting and completely natural at the same time.\n\n\"I didn't know you played the guitar.\"\n\n\"Since I was 10. I'm pretty good. I like playing classical and flamenco, but I know most of the pop songs too.\"\n\n\"I'd like to hear it.\", I said. \"I play the piano. I've been working on some ragtime stuff- Scott Joplin. It's nearly impossible for my brain to figure out with the two hands doing such different things.\"\n\n\"I also meant to ask, is your family religious?\"\n\nShe smiled, \"Not really. We're technically Catholic but we don't go to church very often. Three of four times a year. When I was little, I loved all the showmanship, but since then I've not had much use for it.\n\n\"Are you?\"\n\n\"I'm really not. My folks go to church- Christian Scientist- and I went to Sunday School as a kid, but I never saw the point. Sounds like we're pretty compatible there.\"\n\n\"You said you're planning on going to Amherst. Why there?\"\n\n\"Grampa, my mom's dad, went there. My parents met there and my brother's graduating next month. I'm considered a legacy. Never really thought about going anywhere else. It's a beautiful campus but it does get cold in the winter. I guess that's better for studying.\"\n\n\"My dad went to UCLA, and I really liked the campus when I went to visit. The weather's great and it's near the beach- so much for studying.\"\n\n\"Look, I love talking, but I want to do more than talk.\"\n\nLisa swung her legs around and hopped off the wall on the uphill side. I followed her. She fished a blanket out from under a bush and laid it down on the pine needles. I liked the way her mind worked.\n\n\"You don't think we're going too fast, do you?\" she asked. \"I mean, normally people don't just jump in like this. Actually, I have no idea, maybe they do, but I don't want to scare you off.\"\n\n\"I think we should go at whatever pace you feel comfortable with. I'm just as happy sitting and talking, well maybe not JUST as happy, but I really am enjoying being with you.\"\n\nShe knelt on the blanket, held out her hand and looked up at me with imploring eyes that burned like green fire. I knelt next to her and kissed her. We very quickly sat down then laid down snogging like the teenagers we were.\n\nIt felt so good that we continued for probably 15 minutes. We were getting comfortable with each other. I caressed her breasts. She had worn a brassiere this time. I worked my knee up between her legs pressing on her sex. Our breathing got faster and heavier.\n\n\"Wait, wait,\" she said, and stood up. She went over to the wall's edge and peered over.\n\n\"All clear\", she declared. \"I heard some kids, but they're over on the other side of the pond. You know I fell through the ice into that pond when I was little. Only went in up to my knees but I lost my boots in the mud and ran all the way home barefoot. I hope never to be that cold again.\"\n\nShe came back and knelt again. She reached out and stroked by cock through my pants then leaned over and pulled my shoes off. She reached for the snap on my pants, pulled down the zipper, grabbed the legs of my pants and pulled. \"It's funny, but I feel perfectly comfortable undressing you like this.\" I lifted my butt and the pants slid right off.\n\nAfter a few more seconds, I was laying there in my Jockeys. I reached over to her, but she stopped me. \"My turn first this time,\" she announced.\n\nThe head of my cock had worked its way up past the waistband of my underwear. There was a bead of precum glistening on it. Lisa reached out and rested her hand on me. \"What are you thinking?\", she asked.\n\n\"What... Oh, umm, I'm thinking two, no, three things.\" I replied. \"First, I was thinking that this is a moment that guys- me specifically- think, no, dream about.\" \"A beautiful girl about to stroke my penis is about as great as it gets.\"\n\n\"I'm gonna let you in on a secret, girls- me specifically- dream about it too. We think a lot about sex, but we've been drilled for years about how dangerous it is for us because of the enormous consequences of doing it wrong and getting pregnant.\"\n\n\"We get that warning too, but it's always kind of theoretical danger- not as immediate as it is for you.\"\n\n\"The other thing I was thinking,\" I said as Lisa started rubbing the tip of my cock with her thumb making it hard to concentrate, \"was you said you trusted me. That's a lot of responsibility, but you won't know if I'm worthy of it until we've been together for a while. I want you to know I'm thinking about it too and I'm taking it seriously.\"\n\nWith that, she reached in and pulled my cock out of my Jockey's. \"Thank you, I appreciate it, more than you know.\"\n\n\"The third thing I was thinking was, and this is a little embarrassing, is what do you want to call, er, our parts?\"\n\n\"What,\" she asked, looking up.\n\n\"That thing that's in your hand- just between us- what do you want to call it? Penis? Cock? Dick?, Schlong? Pecker? Something else? I always hated the term Penis. Just now when I said it, I cringed a little.\"\n\n\"I know,\" she laughed, \"vagina is a horrible word too. Sounds technical like we're in Biology class. And it just describes one of the many parts. Carla and I call ours 'Pussies' or 'our Kitties'. That covers the whole thing in one term.\"\n\n\"I don't know, what do you call your 'Penis'?\"\n\n\"I usually don't refer to it at all, but I guess 'Dick' is better than 'Penis'.\"\n\n\"Oh god no, I have an Uncle Dick, my dad's brother. That would be way too weird. I like 'Cock',\" she said. \"Simple, one syllable, sounds sexy and just a little dirty. I say we go with 'Cock' and 'Pussy'.\n\nShe giggled as if she'd remembered a joke. \"By the way, I went to some of your swim meets last year because I liked watching the boys- you specifically- in your Speedo's. It doesn't seem possible that you get your nice ass, and that beautiful \"Cock\" all in a little bag of nylon. Girls- me specifically- get all tingly watching your cock through the thin material, especially when it gets wet.\"\n\n\"Stop talking and let me get on with it,\" she said as she lowered her face to her work.\n\nI just couldn't help myself and I started fondling her breasts up under her shirt. Lisa stopped long enough to remove her bra for my convenience. She did that thing girls do to remove it without taking off their shirt, snaking it out through the arm hole. Seemed to me like it violated some pretty basic laws of physics.\n\n\"You know that girls, women, are self-conscious about their tits, or breasts- we haven't talked about that one yet, but I vote for tits. Anyway, there are so many shapes and sizes out there. A lot of guys seem like big tits. Are you disappointed?\"\n\n\"Honey, your tits are beautiful. Huge ones look like they'd be exhausting to haul around. Yours are all any man could hope for. If anyone ever tells you otherwise, they're either gay or they're a jackass.\"\n\nI was fascinated by how soft her breasts were. I was fascinated by how she squirmed when I lightly brushed her nipples. I was fascinated by how good it felt to have my very rigid cock in her mouth. I was paying close attention to everything.\n\nMy memory of that afternoon is very good. I may have embellished the details in the years since, but I remember all the details very well.\n\nAfter a couple of minutes, I just had to have more. I asked, \"Do you trust me?\"\n\nA wet slurping noise, then \"A little late for that, isn't it?\"\n\n\"No, I mean yes, but I, I want to try something.\"\n\nLisa stopped what she was doing and watched me as I reached for her shorts. I pulled them down and pulled off her panties. They momentarily got hung up on her shoes, which I had not removed. I admired her strong, athletic bottom. I noticed she had a \"shorts tan\" but no bathing suit tan lines yet. After a little fumbling around, I positioned myself so our we both faced each other's sex. I tilted my pelvis upward and bent my knee so she'd have a better angle and I lifted her top leg (her left) up and over my left arm so I could get a better view of her pussy. I was in hyper-observant mode right now. I was aware I'd never have another first time to do this. Time seemed to grind to a halt as I noticed every detail. Her skin against mine felt impossibly good.\n\nShe had a very sparse bush of light blonde pubic hair in front tapering down to almost none further back. Her outer lips were full and soft to the touch. I could see where each hair attached to the skin at what looked like goose bumps. At first her lips stayed mostly closed- open only about 1/4 inch, and I could see the deeply pink, wetly juicy, glistening parts just below the surface in her slit. Her fragrance was rich and sweet and animal. It was a pheromone that locked onto a hidden part of my brain and wouldn't let go.\n\nI noticed the skin around her ass pucker was a shade or two darker than elsewhere and I watched it expand and contract a little every few seconds. I knew it was time to DO something, but I was mesmerized by the beauty in front of me. I was overwhelmed by the amount of trust she was giving me to treat her well, to do it right, to be both a lover and a friend. I desperately wanted to give this woman, my woman, pleasure.\n\nI rubbed with my thumbs and opened her labia. Low-pitched moans came during each of her exhalations. She had been quiet at the drive-in but was loosening up now that we were alone. It looked and smelled so enticing that I poked my tongue out and into her slit, licking along her length. More moans. More confident now, I flattened my tongue and did a big sweep from front to back. She jerked a little when I rubbed over her clit. That was fun so I did it again just to watch her jerk again. She came off my cock to say, \"Not on my clitoris yet. Too sensitive right now- it almost hurts. I'll tell you when.\"\n\nAfter a little adjustment, we fell into a rhythm. I couldn't believe how natural this position felt and how natural it felt to be tasting her. Continued moaning told me I was doing okay.\n\nAfter another minute I got another idea. Pulling her leg all the way over me and settling down on my back, I was looking directly up at her pussy. From that moment to today, this has been my favorite position in sex. It's like having the most succulent, ripest, and juiciest peach dangling just an inch above your upturned lips.",
        "From this position, I could easily fondle her butt and open and close her girl parts with my fingers for better access with my tongue.\n\nThis also gave Lisa a perfect angle where she was in complete control of my cock.\n\nWe went on for another few minutes and \"Mmmmph, mmmmph, slurp, mmmmph,\" was all I could hear from her end. I was incredibly aroused and wanted the pleasure to continue forever. I didn't want to come yet, but I was getting close. The chemicals in my brain were begging me to let go and push over the edge. I could feel the tingle.\n\n\"Lisa,\" I said, \"Could you let up for a minute. I want this to last but I have to calm down a little or it won't.\"\n\nMy cock slipped out of her mouth as she lifted herself and looked down between us to see me. She said, \"What do you want me to do?\"\n\n\"Just sit back and enjoy what I'm doing to you. Is there anything you'd like me to do different?\"\n\n\"Actually, I'd love it if you'd put a finger in and do my clitoris harder. I'm ready to come too.\"\n\nShe lowered herself back onto my face again and I inserted my thumb from above as asked. I found her nub and licked and sucked directly. I built the speed and pressure slowly and her arousal became evident. She was wiggling her butt up and down riding my nose and tongue.\n\n\"Aaaagh, aaaagh, aaaagh\", leading to \"Unghhh, unghhh, unghhh,\" as she came. I watched her pussy spasm in time with her grunts. I pulled my thumb out and watched. Her vaginal opening was bright pink and I could momentarily see all the way inside her before it closed up. Her pussy wetly pulsed in and out in time with her butt rosebud.\n\n\"Jee hee heesus,\" she panted, \"Please... stop for... a minute... while I come back... to earth.\" I gave her a break, but it wasn't even a minute before she started licking me again and I took that as a sign I could continue.\n\nI have no idea how long we kept at it, maybe half an hour, but it was long enough for Lisa to have 3 similar orgasms and I was able to have a mind-blowing release.\n\nThis time, she took part of my come in her mouth but pulled off too soon letting the last part to squirt onto her cheek. \"Wow, that was intense,\" she panted.\n\nIt took a full five minutes for her to recover from her 3rd orgasm. She just laid on me, sweaty skin on sweaty skin, legs lewdly spread above my face. At one point, I think she even fell asleep for a minute or so. I kept quiet and allowed her.\n\nWhen she stirred, she turned around until we were face to face and we held each other for a while. I looked into her eyes and wiped her cheek with the edge of the blanket.\n\n\"I liked that\", she said. \"I liked the talking, I liked the kissing, and I liked the way you make me feel.\"\n\n\"Me too,\" I agreed. It's going to be tough with school and track practice, but I'll see you at homeroom and breaks. When I do, I'm going to give you a kiss- is that okay?\"\n\n\"I'd be disappointed if you didn't.\"\n\n\"I've been thinking that we should go on a standard 'date', so I can properly meet your parents. I want to show up at your house, dressed a little too nice- like I'm nervous about making a good impression- and chat with your parents. I want them to like me, and I think I can win them over.\"\n\n\"I'm sure you can, \"she replied, \"but my dad can be pretty direct, watch out.\"\n\n\"I can handle it. How about next Saturday?\" I asked.\n\n\"I'll tell my folks about you, and you do the same, just to prepare them. Not too much detail though.\"\n\nShe hesitated and looked down at the ground. Looking up quickly she blurted, \"Do you want me to go on the pill?\"\n\n\"Huh?\", I said like a doofus.\n\n\"Birth control. There's a clinic over in Millis and I can get them pretty cheap since I'm 18 and I don't need a note from my mom or anything. The Pope probably won't like it, but I don't really care.\"\n\n\"Wow, yeah, thinking ahead is great. It would be great not to have to worry. I'm keen on going further, although I have no idea how it could be any better than this. I was going to get some condoms just in case.\"\n\n\"Yeah, it takes like a week before the pills become effective.\"\n\n\"Okay, now I'm embarrassed for some reason.\"\n\nShe kissed me gently and quietly said, \"Don't be. Remember, I want to be with you. I want to be on the pill so we can make love. I'm enjoying this. I'm enjoying you.\"\n\n\"I've got to take a piss,\" I abruptly announced, standing up.\n\nShe bounded up, saying \"Oh, oh, can I do it, can I?\"\n\n\"Do what?\"\n\n\"Can I hold it while you pee. I've seen my brother do it outside over the years, but I've always wondered what it felt like to hold it.\"\n\n\"Uh, sure,\" was all I could muster, but I figured anything that included her holding my cock was probably a good thing.\n\nI stepped toward the woods behind us and she moved behind me. With two hands, she controlled the stream while peaking around me to see her work. She seemed very happy. \"You could probably write your initials in the snow with this thing.\"\n\n\"If you only knew the number of times I've done just that,\" I chuckled.\n\nShe giggled.\n\n\"Now give it two quick shakes to get off any pee still on the head.\"\n\n\"I'll do one better,\" wiping it off with her hand, and smelling, then licking it. \"Interesting,\" she observed.\n\n\"I think I have to pee too,\" she said.\n\n\"Can I watch?\"\n\nShe squatted down, feet and knees apart, and pee began squirting out. The stream looked the same as mine. It was fascinating. When she was done, I reached in and wiped off a drop or two that was clinging to her labia and touched my fingers to my lips. It wasn't unpleasant at all, in fact it had almost no taste at all.\n\nShe stared at me in open mouthed wonder. \"Interesting,\" I said mimicking her.\n\nAfter we got dressed, she kissed me and said, \"See you in the morning.\"\n\nAll I remember about that week was that it seemed like everyone on campus knew about Lisa and I being a couple within seconds. They all looked at me differently. I gave Lisa a kiss- no tongue- every time I saw her. I even went the long way around the corridors so I could run into her between classes.\n\nAt lunch I saw Bert and Carla in the corner holding hands and chatting animatedly. He waved me over and said, \"Pool party at Carla's next Saturday afternoon. Her folks won't be home. Bring Lisa.\" It was like a command.\n\n\"I'll do my best.\"\n\nMy dad was a documentary film maker, so he was gone a lot. He was in Africa that week filming the Masai tribe, so I told my mom about Lisa- well some of it- and told her about our upcoming date. She said I could use the car- as I didn't have my own yet.\n\nActually, I had purchased a car the previous summer, but it had turned out to be such a piece of shit that I ended up selling it to a wrecking yard for scrap after the engine died.\n\nI had told Lisa to expect me around 6:30 for our date. I arrived about 15 minutes early but parked down the street for a while so I wouldn't seem too anxious.\n\nI was nervous when I rang the doorbell. Mrs. Archer answered the door all smiles. I introduced myself and shook her hand. She invited me in and called up the stairs to Lisa. \"She'll be right down, I'm sure,\" she said.\n\nMr. Archer appeared at the door to what appeared to be a study. He had a cocktail in his hand. \"Hi Chris, Lisa appears to be looking forward to your date this evening. Is it true your lockers have been next to each other for 4 years?\"\n\n\"That is very true, sir. We've been in Homeroom and typing class together too.\"\n\nWhere are you taking my little girl this evening?\"\n\n\"Nice to meet you, sir,\" I started, \"I have reservations at an Italian place called Bartoli's in Norwood. I've been there with my folks- it's pretty good. We could have gone to Carlo's here in town, but I thought it would be better to not have so many local people there so we could relax a little.\"\n\nSmiling, Mrs. Archer said, \"I'll go check on Lisa,\" as she turned and made for the stairs.\n\n\"Would you like a beer, Chris?\", Mr. Archer offered.\n\nI hesitated, \"I don't really like beer sir, and you know I'm just 18.\"\n\n\"Just a test, Chris,\" he chuckled. \"Trying to get into Lisa's pants, are you?\"\n\nI was caught off balance. Lisa had told me he could be direct, but this was way more than I had anticipated. I started thinking fast. Of course, I could deny it, but that would come off as a weak lie. Of course, I was trying to get into her pants, but I couldn't say that either.\n\nI thought of a third way just as the pause was becoming awkwardly long.\n\n\"Mr. Archer, first, I have a kid sister named Kim who is almost 11 years younger than I am. I've been very involved in her life, and I love her dearly. I feel sorry for the young man who arrives to take her on her first date if I'm in the house.\"\n\nLooking directly at him, I said \"Second, I thought I'd see if I could get into Lisa's heart first.\" I was on a roll, but the big gamble was coming next. Should I risk it? What the hell. \"If, after that, she invites me into her pants, then that will be a situation that's just between she and I- and nobody else.\"\n\nSilence.\n\nMr. Archers face had gone slack as he stared at me.\n\n\"You have a beautiful home here, sir.\" I observed, looking around, obviously changing the subject.\n\nFive more seconds and he started to chuckle. A smile appeared. His eyes softened.\n\n\"A very, very good answer young man. Not at all what I was expecting, but very good.\"\n\nLisa started down the stairs as Mrs. Archer stayed behind.\n\n\"I like this one Lisa, try not to scare him away.\"\n\n\"Daddy,\" she said with a touch of reproof in her voice.\n\nLisa was wearing a light green knee length dress that matched her eyes. \"You look very nice,\" I said.\n\n\"Why thank you, you look much nicer than in school too.\"\n\n\"Good night daddy,\" Lisa said as we moved toward the door.\n\n\"I'll have her home by 10.\" I said to Mr. Archer, again looking straight into his eyes.\n\n\"She's not on a curfew. Eleven or even midnight would be fine. You two have fun.\"\n\n\"G'night Mrs. Archer,\" I called.\n\nWe held hands and giggled all the way to the car- just like teenagers on a date.\n\nMy mom's car was a Chevy II wagon and it had a bench seat in the front. Lisa sat right next to me in the car, thighs touching, with her hand on my knee as we headed down her street. \"Why did my dad say he liked you?\"\n\nI proceeded to tell her what her father had asked me. She held her hands up to her face, \"Noooo, he didn't. I'm sorry. I can't believe he did that to you. I'm gonna kill him.\"\n\n\"No, don't bother, I think I came up with the perfect answer- that's probably why he said he liked me.\"\n\n\"What could you say to a question like that?\"\n\nI repeated my words and when I got to, \"I'm trying to figure out how to get in her heart,\" she squeezed my thigh and kissed me on the cheek. \"Wait, there's more.\" I continued.\n\n\"When I invite you into my pants? You seriously didn't say that to my dad.\"\n\n\"Yep. Seemed to do the trick. He was being kind of a bully and my dad told me once that the only way to deal with bullies is to come back as strong as they are. As long as you're right, they almost always back down.\"\n\n\"I can just imagine the conversation at breakfast tomorrow. I'm sure he told my mom about it. But then, I guess I did invite you into my pants at the Drive-In.\"\n\n\"You weren't even wearing any pants at the time, as I recall.\"\n\n\"I'm gonna do it again, I promise, but not tonight.\"\n\n\"Why not tonight?\"\n\n\"I started my period this morning, so we'll have to figure out something else.\"\n\n\"I'm sure we can think of something.\"\n\n\"Bert and Carla are out on a date tonight too. He's taking her to a movie at a real theater. They're 'an item' too. Carla's so happy she's glowing. She invited us to her house for a pool party tomorrow afternoon. She said her folks will be gone again so we'll have the place to ourselves. Say you'll come, please.\"\n\n\"He told me about it yesterday at lunch. I'll work it out. About 3'ish?\"\n\n\"Goodie.\"\n\nAt Bartoli's, we sat across from each other at a table. She ordered the Fettuccini Alfredo, and I ordered the lasagna. Both came with Caesar Salad, and we got some hot bread sticks for the table. I ordered a club soda with a lemon, and she said, \"Ooooh, that sounds good, I'll have the same.\"\n\nI picked up one of the bread sticks and said, \"You like garlic?\"\n\n\"I do, but you can't eat garlic on a date.\"\n\n\"If we both do, then it cancels out. Let's be the Italian, garlic-breath couple.\"\n\nLisa giggled, kicked me under the table and grabbed a bread stick. They were warm and delicious, and we ate the whole basket during our meal. I broke the last one in two to make it come out even.\n\nWe talked about our graduation and her brother David's upcoming one. Her family was driving to Western Massachusetts the weekend after our high school graduation to attend his. The plans had been made for months. They'd be gone for 5 days.\n\nI ordered Stromboli for dessert as they took away our entr\u00e9e dishes. \"You must have liked the Alfredo sauce,\" I said. \"For me, the first three bites are great, but I lose interest and have a hard time finishing.\"\n\n\"For our real dessert, I figured we'd go somewhere to make out,\" I offered.\n\n\"Mmmmm, sounds yummy- even with garlic breath,\" she replied.\n\nOn the way home, I pulled into the high school parking lot and went to the back corner. It was dark in the corner, and I figured we were very inconspicuous. We started kissing in earnest and I worked my way under her dress. She said, it was okay because she had a tampon. Rubbing was fine, but nothing more. I was fine with that. Her odor was a little different tonight, probably because of her period, I thought.\n\nAfter 10 minutes or so, a car came into the lot and started shining its spotlight around. \"Cops,\", I exclaimed. We pulled our clothes together as the cruiser came over to us. An officer got out with his flashlight and approached the car. I rolled down the window and greeted him, \"Good evening officer.\"\n\n\"Good evening,\" he responded, \"Can I see your license and registration sir? Your ID too, miss.\"\n\nAfter going back to his car for a minute, he came back and asked us to move along as he returned our papers. \"I'm all for young love, but it's my job to keep this parking lot clear during off hours.\"\n\n\"I get it, thanks for the warning.\"\n\n\"You take care now,\" he said with a smile.\n\n\"Oh my god,\" Lisa squealed, as we drove away. \"He wanted to know that I was 18. If I hadn't been, that could have been a mess. I'm an adult now and I can go parking with my boyfriend any time I want- just not at the high school.\"\n\nI drove to the local supermarket, Fernandes, and parked near the outermost cars in the lot. There was quite a bit of light, but no one paid us any attention. We were able to make out for half an hour or so with no further worries. I noticed that her nipples were very sensitive tonight, probably because that's about all I had access to. I sucked on them, pinched them, rolled them, lightly bit them and she responded like it was her favorite thing.\n\nWhen I dropped her off, just a little after 10:30, I walked her to the door like a nice boy would do on a first date. By the orange glow of the porch light, we chatted a little about how nice dinner had been, just in case someone was listening in. I leaned in for a kiss and we made it a nice, chaste, but not altogether silent, one. \"Good night,\" I said as I turned away, convinced that someone inside had overheard.\n\nI had swim practice the next morning. Coach made us do two miles. It was a grueling workout, and even though I knew it was good for me, that was 140 laps of a 25-yard swimming pool. I thought about Lisa the whole time and I was exhausted when it was done.\n\nI told my mom about the pool party, and she had a few chores for me to do before going. I dragged myself through them.\n\nWhen I got to Carla's just before 3:00, I heard voices from the back yard, so I went around to the side gate and let myself in. They were all there. The BBQ was belching smoke as the burgers cooked. A big cooler of lemonade and sodas was on the edge of the pool.\n\nLisa was wearing a yellow bikini with little black polka dots. Its cut was modest, but it displayed everything that needed displaying nicely. Carla was wearing a black bikini with red and yellow flowers on it. Her larger breasts were fighting with the thin straps holding up her top. Bert wore some dark blue board shorts that came down almost to his knees.\n\n\"Hey, I'm starving,\" I announced as I kicked the beach ball back into the pool.\n\nAs I came up the stairs, I saw they had a Jacuzzi type hot tub near the BBQ. \"Nice setup Carla.\"\n\n\"Yeah, my dad built all this when we were just kids. They wanted all the kids from the neighborhood to come over here where he could watch us rather than let us wander around getting in trouble. It worked really well. All the local kids were here most of the summer. Lisa was here, what, 4 days a week?\"\n\n\"At least,\" Lisa laughed.\n\nI took Lisa in my arms and kissed her a couple of times. \"She says you're a good kisser. I can see why,\" Lisa observed.\n\n\"I'm learning.\"\n\nI ate two burgers like a wolf and drank a lemonade. Lisa had Coke and half a burger. We talked about our new relationships and about our dates. Carla got a kick out of the story about the cop at the school parking lot.\n\nApparently, Carla's parents were at a BBQ at her grandmother's house in Framingham. They wouldn't be home for hours.\n\n\"Where do I get changed?\" I asked.\n\n\"That's a changing room next to the jacuzzi.\"\n\nI had a surprise, but I was nervous. Might it be too much? Again, one of my little demons said, \"What the hell,\" in my ear.\n\nI skimmed off my shoes and pants and pulled myself into my suit. I wrapped a towel around my waist and stepped out. Everyone looked up, but there was nothing really to see so Bert and Carla went back to their chatting. Lisa kept looking at me with a question in her eyes.\n\nI felt my cock beginning to swell as I loosened the towel and pulled it off. \"You didn't,\" Lisa laughed.\n\nBert and Carla looked up and Carla said, \"Wow, Lisa says she likes that suit- and now I see why.\"\n\n\"I feel overdressed,\" Bert said, looking down at his suit.\n\n\"I have a feeling we can do something about that in a bit,\" Carla said.\n\nStill feeling a little self-conscious, I ran to the pool and dove in. It was the shallow end so I did a racing dive and swam the length of the pool underwater.\n\nBert did the same and the girls walked to the stairs and slowly descended. They were both beautiful women and one of them was soon to be all wet and in my arms.\n\nThe water was comfortably warm- obviously heated, which did nothing to appease the semi-erection that was in plain view as it strained to get out of my Speedo. The girls breast stroked to the deep end where we were waiting. We swam around each other for a while then I guided us up toward a depth where we could both stand comfortably.\n\nI brought my hands up and cupped her breasts, uh, I mean tits. As I massaged, she put her arms around me and kissed my neck. I slid my hands up under her top and squeezed some more. I spent some time lightly brushing her nipples with my fingertips and she closed her eyes with pleasure.\n\n\"You know, my tits have always been sensitive, but this is a new level for me. If you want to know how to 'get me going', this is it.\n\nI glanced over and the other two were in a similar embrace.\n\n\"What the hell, it's my house, I should be the first,\" she said as she reached back and untied her top. It landed on the pool deck with a wet splat. \"I hope you're not offended Chris.\" Her breasts were still below the water level, but I raised my head to make it look like I was looking.\n\n\"Offended? Not in the slightest.\"\n\n\"I'm not comfortable with that yet,\" Lisa said quietly in my ear.\n\n\"No pressure. I'm enjoying you just like this. You're still having your period, right?",
        "\"Yeah, they last about 5 days usually, but I changed my tampon just before you got here so I should be good for a couple of hours.\"\n\n\"You know, I really don't need all that information, but I'm happy to hear it if you want to tell me.\" I reached down and caressed her pussy with my hand, cupping, applying pressure and moving back and forth a little.\n\nI snuck my middle finger up under the edge of her bottoms at the crotch. I slid my finger, then fingers, back and forth a little. I spent much of my time near her clitoris, but gently. I could feel the string that was attached to the tampon.\n\n\"Hmmm, that's nice, but remember don't put your fingers inside\", she warned.\n\nI caressed her for several minutes. Her eyes were closed, and her mouth open just a little. The longer I rubbed her, the more she wiggled her bottom back and forth.\n\n\"Do you trust me?\" I asked.\n\n\"Again, a little late for that.\"\n\nI know you told me last week to not get any ideas,\" I said as I slid my fingers back over her pucker, \"but ideas seem to be all I have these days.\"\n\nShe opened her eyes and stared at me. \"No, not here.\"\n\n\"Why not? This is a perfect place. I promise I'll stop if you don't like it.\"\n\n\"I've heard about this from some other Catholic girls I know. it's a way to have sex and not get pregnant or lose your virginity, but I've never tried it- even at home. Kinda gross, isn't it?\"\n\n\"I don't think you could be gross, even if you tried. I kissed you even with garlic breath, remember?\"\n\nI lined up my middle fingertip with her opening, which was the opposite of open, and pushed inward. \"We're never going to get anywhere unless I relax a little. Go slowly please.\"\n\nI switched to rubbing her clitoris then back to her rosebud. Slowly back and forth, back and forth, until I felt her soften the muscles around her sphincter a little. I pushed and got one knuckle in. She sucked in her breath and made a funny face. I didn't see pain in it, just surprise.\n\nI pulled my finger out and put it back several times. The funny face went away and was replaced with a small smile. \"Go in a little more. Now that the initial weirdness is gone, I'm curious to see how it feels.\"\n\nI easily pushed in another knuckle. She was quite soft back there. I tried to push in all the way but she stopped me and said, \"Give me a minute.\"\n\nI wiggled my finger around a little and she gave a small groan of what sounded like pleasure. I pulled out and plunged back in slowly for a while and my finger inevitably slid in all the way as I worked it.\n\nLisa's began gasping for breath. I could tell our pool mates could hear her but she was oblivious, lost in the sensation.\n\n\"That's it,\" Carla said, \"I'm getting in the Jacuzzi. Join me, Bert?\"\n\nLisa's eyes snapped open, and I pulled out my finger.\n\nCarla's tits, at least a C-cup with large dark areolae and large dark brown nipples, floated to the surface as she walked, and they bounced hypnotically all the way to the hot tub. Bert followed her like a puppy expecting a treat.\n\nI maneuvered us over toward the stairs, leaned down and removed her bottoms. She looked over at the other couple, but they were lost in their own world of giggles and moans.\n\nWe experimented with several positions until we found one that was comfortable. She laid on her side on my lap, facing me, with one leg up allowing me better access to continue what I had started. I went slowly again but soon I was thrusting in and out at speed. Her breath became ragged, and she went rigid, mouth open in a silent scream as she plunged over the edge.\n\nAfter another 30 seconds or so, she said, \"You can take your finger out now. It's weird, everything I do with you feels good. Those Catholic girls were right.\"\n\n\"I enjoy pleasuring you, my lady.\"\n\n\"I'm a lucky girl.\"\n\n\"You okay to talk for a little?\"\n\n\"Of course.\"\n\n\"There's a word that's been bouncing around in my brain since, well, since we went up the hill behind your house last week. I have absolutely no experience with it and have no idea what I'm talking about, but this word doesn't seem to want to go away.\"\n\n\"What word?\" she asked.\n\n\"Oh god, I don't want to scare you, maybe I shouldn't.\"\n\n\"You said you'd tell me what you were thinking. I'm counting on you to be honest.\"\n\n\"Okay, okay, the word is...\" finishing the sentence after a pause, \"love.\" I looked up into her eyes for a reaction.\n\nShe smiled. \"The same word has been bothering me too.\"\n\nI continued, \"I mean, we've just started seeing each other and we're having fun and its exactly the sort of thing we should be doing... but how do you know? How do you know when passion and lust and fun turn into something else?\"\n\nLisa started quickly, \"I've been in love with you since 9th grade. I was in love with the idea of you, with the idea that you could find me attractive and love me. Now it's me saying I don't want to scare you off... but that's the truth.\" It sounded almost like she'd rehearsed it.\n\n\"I'm afraid I didn't have romantic notions like that back then. You were so shy I couldn't get more than 3 words out of you at a time.\"\n\n\"I was, wasn't I? I was skinny and had braces and pimples. Some of the girls were getting tits, but not me. I was a mess, but still I fantasized about you. When we turned 18, Carla finally got sick of my talking about it, so she devised the drive-in date. I probably never woulda....\"\n\nShe continued after a short break, \"Thanks for telling me, thanks for being honest with your feelings. That is the important question and I think we're learning how to figure out an answer to it. The best suggestion I have is that we keep on with what we're doing and wait until a buzzer goes off or something.\" She was very funny too.\n\nAbout this time, it was obvious that the other couple were in the throws of some type of passion. The jacuzzi was on a higher level of the back yard so we couldn't see, but by the noises they were making, we could guess.\n\nWhen they had finished, I handed Lisa her bottoms. She pulled them up her legs and over her butt. I stood and led her up the stairs to the jacuzzi. \"Mind if we join you?\" I asked.\n\nThey were sprawled against each other, There was a lot of water on the deck behind them as if there had been waves. Bert's arm around Carla and her head on his chest still breathing heavily. Her breasts, at least the one we could see, floated on the surface. Bert's board shorts and the rest of Carla's bikini were in a pile behind them.\n\n\"The hot water is great. I've got to pee though. Lisa, join me?\" Carla stood up and completely revealed her nakedness. Her full bush was the same color the hair on her head and her tits sagged just a little. She was so confident and didn't appear to have a trace of self-consciousness. \"We'll be right back boys,\" she said as she leaned down and scooped up her bottoms. Lisa shrugged and followed.\n\nWe both watched them go. \"Can they really not go pee without each other? You want something to drink?\", I asked as I was standing near the sodas.\n\n\"Sure, lemonade. Not that I mind, but that Carla's going to kill me with her appetites.\"\n\n\"What's weird is that our whole society is so freaked out about nudity, but when a woman wants a guy, they're so comfortable with their bodies that they don't even appear to notice that they're naked and you're touching them in places that their parents have spent years telling them not to.\" I stepped down into the tub.\n\n\"Personally, I like it a lot, but I get what you're saying. What do you guys talk about?\"\n\n\"We talk about everything. She trusts me and I trust her so nothing, yeah, I guess nothing is off limits. I'm really enjoying getting to know her. She's my first girl 'friend'.\"\n\n\"Carla's dad is pretty cool. She has 2 older sisters and an older brother. They've already been through just about everything with the older ones. They kinda broke in the parents for her. They figure Carla can take care of herself, and from what I've seen, I agree.\"\n\n\"I like Lisa's folks too. Mr. Archer put me to the test early, but we get along fine now.\" I told him the story and he clapped when I told him the way I stood up to Lisa's dad.\n\nThe girls came back out. Carla had replaced her bottoms but was still topless. Lisa was fully dressed, or as fully dressed as she had been before- still a lot of skin showing. They got in the tub and Lisa sat on my lap, straddling my hips, and facing me. She put her arms around my neck and kissed me.\n\nIn this position, her face was about an inch higher than mine and I was leaning back a bit, so I had to lean up to kiss just a little. Carla and Bert were talking quietly but I was paying no attention.\n\nLisa whispered, \"You know I'm no expert, but I want to thank you for being such a wonderful lover. Everything we do feels so good I want it to go on and on. The only problem I see is that I seem to be getting a lot more out of all this than you are. What more can I do?\"\n\n\"I'm sure we'll figure out lots of things, but you should know that giving you pleasure is very pleasurable for me as well. I do not feel slighted in any way. Speaking of that, I have an idea.\"\n\n\"More?\"\n\n\"Absolutely.\"\n\nI reached out and gently cupped her breasts that were just under the water. I squeezed lightly and Lisa closed her eyes. I rubbed and pinched and squeezed and everything else I could think of.\n\nI slid my fingers under the cups and did the same, paying more attention to gently stimulating her nipples, which were very hard. She stared into my eyes as she rubbed herself against my cock straining in my Speedos, and her breathing rate increased.\n\nShe scooted back just a little and reached down for my cock. I said \"Let's concentrate on you for right now. Like I said, I have an idea.\"\n\nI was increasing the pace and pressure at a very slow rate. \"Do you trust me?\"\n\n\"What do I have to do to prove,\" she started.\n\n\"Okay, okay, just go with me here.\" I said as I reached back and undid the back strap of her top.\n\n\"Not here,\" she hissed.\n\n\"Trust me. If you really don't like it, we'll stop.\" I slipped the shoulder straps off, leaving it attached only around her neck. I now had truly unfettered access to her breasts.\n\nI alternated between flicking and pinching and twisting her nipples and lightly squeezing the entire breast. I alternated soft with firm. I even stopped completely occasionally, causing her to groan.\n\nWhen she was really worked up and breathing hard, I lifted her up a little and put my lips to her nipples.\n\n\"Oh my god, I think I'm going to cum,\" she panted. I was sure that our hot tub companions could hear her, but we were both past caring. I lifted her bikini top up and off her neck with no complaint. She was leaning back giving me complete access to her blushing pink chest.\n\n\"Oh, Unnnngh, oh, unnnngh, unnnngh, she blurted out as if surprised. Her body jerked back and forth, and I held on tight. Both Carla and Bert turned toward us smiling.\n\nWhen she was done, she put her weight forward onto me, head on my shoulder. \"That word we were talking about is back in my thoughts.\" she offered.\n\n\"Me too.\"\n\nStill breathing hard, Lisa slid off and sat down next to me, breasts unashamedly revealed to our friends.\n\n\"That sounded nice,\" Carla observed, \"I'm taking Bert inside for a few minutes.\" We watched as they disappeared.\n\n\"Do you trust me?\" Lisa asked.\n\n\"Did you have an idea?\"\n\n\"Sit up here,\" she instructed, slapping the deck with her hand.\n\nI looked toward the house and saw no one and complied.\n\nLisa faced me on her knees and reached for my cock. \"Nice,\" she observed as she squeezed and rubbed my erection through the black nylon.\n\n\"Gimme,\" she demanded as she curled her fingers over the waist of my trunks and began to pull. I had to reach inside and untie the waist drawstring to allow their removal. I lifted my butt to let her complete her task.\n\nI spread my legs and slid close to the edge to allow her a better view. She licked, then kissed the head and said, \"Please tell me if I can do anything better for you.\"\n\n\"It's a deal,\" I said, watching as my cockhead disappeared between her lips and dreaming about blowjobs to come.\n\nPlease rate this story if you liked it and maybe drop a comment. It helps the creative juices."
    ],
    "authorname": "EarthlyDelights",
    "tags": [
        "first time sex",
        "summer of love",
        "nipple orgasm",
        "pool party",
        "blow job",
        "eating pussy",
        "fingering ass"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/the-drive-in-pt-02"
}
{
    "title": "My Submissive Teacher: 3 Hole Slut",
    "pages": [
        "My Submissive Teacher: 3 Hole Slut\n\nSummary: Student has best night of his life with ex-teacher in Mexico.\n\nNote 1: This is a Summer 2015 Contest Story so please vote.\n\nNote 2: This is dedicated to all you sweet dedicated teachers like myself who fantasize about letting out their inner slut for just one night (Well maybe two or three...LOL). It is also dedicated to all the students who have fantasized about fucking their sweet teachers into submission.\n\nNote 3: Thanks to goamz86, Robert, and Wayne for editing.\n\nMy Submissive Teacher: 3 Hole Slut\n\nMrs. Harper was the nicest teacher I had in my senior year. When I say nice it isn't really a compliment. I mean nice in the 'you-can-easily-play-her-to-get-extensions-nice, the teacher you can easily manipulate. She never raised her voice, she never got angry or annoyed and she always, always had a smile in her face.\n\nHer big tits, which she couldn't even hide in her conservative attire, often had me drooling...being a tits guy. Based on her pleasing personality, I imagined her being rather similar in the bedroom...a submissive who was eager to please. At least when I jerked off to thoughts of her that was how I imagined ending up banging her.\n\nShe was cute in an I-just-turned-forty-I-had-kids-and-never-completely-lost-all-the-baby-weight sort of way. She had very pretty blue eyes, blonde hair and adorable dimples. I imagine she was very hot in her high school years.\n\nThen three months in, rumours galore hit that Mrs. Harper caught her husband having an affair with his secretary. I knew the rumour was obviously true based on the fact that when I walked into class when she had returned a few days later. She looked sad, lost; her smile was forced and her lively energetic persona was gone.\n\nAfter Christmas holidays, though, she returned a different woman. She went back to her maiden name, Ms. Champlin. She had a new hairdo, wore make-up and looked slimmer. She had shifted from sweet and cute, to sexy and hot as hell as the rest of the year progressed. I didn't have her second semester, having passed with a 55, my usual just get by grade, but she continued to get thinner and hotter as the year went on. Her outfits got tighter, as instead of hiding her voluptuous tits, she showcased them and her skirts got shorter as her heels got higher. It was a beautiful transition.\n\nIt was three weeks into summer holidays when I first saw her in a bikini and decided I was going to fuck her.\n\nIt was all very serendipitous. I was in Mexico at an all exclusive resort for a week with two buddies I graduated with, and who is the first person I see by the pool...Ms. Champlin.\n\nMy cock hardened as I saw her long legs and voluptuous breasts in a very skimpy, looking for attention, bikini.\n\nI said to my boys, \"That's Ms. Champlin.\"\n\n\"Fuck off,\" Brian said.\n\n\"Shit, she looks MILF-a-Licious,\" Adam added.\n\n\"I have wanted to see those tits since junior year,\" Brian added.\n\n\"Shot slut,\" I called out.\n\n\"Fuck off, Brian cursed, his most common response to most things.\n\n\"I called her,\" I pointed out. The rule started in high school when we decided to see who could bed the most girls. Like calling shotgun for who gets the passenger seat, 'shot slut' gave you first crack at a chick. But you could only call it once a day for obvious reasons.\n\nAdam laughed, \"That I would love to see.\"\n\n\"Is that a challenge?\" I questioned, loving a challenge. I had bedded four different cheerleaders that year (they definitely talk!); I had scored the intern teacher just a couple weeks ago, once the school year was done, and I took the virginity of the biggest nerd in our school. I wasn't drop dead handsome, but had the bad boy look and charm that made it easy to get the ladies. The thought of scoring Ms. Champlin...a teacher...was too appetizing a challenge not to try.\n\n\"Of course,\" Adam nodded, glancing over for a lengthy stare at our ex-teacher.\n\n\"Challenge accepted,\" I confidently responded, although I wasn't convinced this was one I could complete. I reminisced back to the past school year and her do-anything-for-someone personality and wondered if she was submissive. I also was curious who she was here with.\n\n\"This is going to be epic... an epic fail... Joey finally will fail,\" Brian said.\n\n\"You mean like you did in Math?\" I shot back, Brian not actually graduating after failing math.\n\n\"Fuck you,\" he shot back.\n\n\"You're not my type,\" I quipped back.\n\n\"Well go and fuck Ms. Champlin,\" Adam said slyly, clearly not believing I was going to succeed, always the one to get us back on track when things went Mano-o-Mano.\n\n\"Game on,\" I nodded, turning around and looking at my former teacher sipping on a cocktail.\n\nI went to the bar, asked the bartender what Ms. Champlin was having; he pointed me to the waiter who told me. I ordered another one for her and a rum for me and sauntered over with not much of a real plan in mind. I had found that pick-up lines seldom worked, but authentic conversation, on the other hand, was very effective.\n\nReaching her, I sat beside her as she read a book, and opened, \"Fancy meeting a woman like you in a place like this.\"\n\nShe looked up and stammered, clearly surprised, \"J-J-Joey, what are you doing here?\"\n\n\"A last boy's trip before college,\" I answered. \"What about you?\"\n\n\"A get the hell out of Dodge trip,\" she answered, surprisingly bluntly.\n\nI handed her a drink, \"I think I owe you at least one of these.\"\n\n\"Oh, you owe me more than that,\" she laughed.\n\n\"Fair enough,\" I shrugged.\n\n\"You know students like you always drive me nuts,\" she said, sipping from her drink.\n\n\"Why so?\" I asked, keeping my charming smile on.\n\n\"Kids who don't live up to their potential,\" she said.\n\n\"I'm going to college,\" I countered.\n\n\"On a football scholarship,\" she countered back.\n\n\"That's bad?\" I asked.\n\n\"Of course not, I'm very proud of you,\" she said, suddenly realizing she was critiquing me, and added, \"but you were capable of so much more in my class.\"\n\n\"Fair enough,\" I nodded. \"But enough about school. Who are you here with Ms. Champlin?\"\n\n\"Just myself,\" she shrugged, trying to hide her loneliness.\n\n\"Why?\" I asked, knowing asking questions was a great way to build trust in women, especially in women who don't trust you.\n\nShe shrugged, \"Just wanted some time alone.\" That said, her tone implied something else.\n\n\"A little self-discovery,\" I asked.\n\n\"I suppose,\" she said, changing the subject after downing half her drink, \"So who else is here with you?\"\n\n\"Brian and Adam,\" I replied.\n\n\"And where are they?\" She asked, looking around.\n\n\"I have no idea,\" I shrugged. \"We often split up.\"\n\n\"Hunting for girls?\" She asked, smiling. Man her smile was sexy.\n\n\"Sometimes,\" I shrugged, before adding, being flirtatious for the first time, \"although I like women.\"\n\n\"Is that so?\" She said, raising an eyebrow, sensing I was hitting on her.\n\n\"I like a woman with experience,\" I replied, sensing that I had a chance based on her reactions so far.\n\nAs she finished her drink, \"Well, I hope you find such a woman.\"\n\nI grabbed the suntan lotion sitting beside her and said, \"You look like you need another coat.\"\n\n\"Are you my cabana boy now?\" she asked, her tone not one of a teacher, but of a sexy woman flirting.\n\n\"I'll be whatever you want me to be,\" I replied, flirting right back, as I poured lotion into my hands and moved to her legs before she could tell me to stop.\n\nShe didn't stop me, nor did she say anything. Instead, she returned to the book she was reading. I slathered we up both legs and feet and then asked, \"Do you want your back done?\"\n\nShe looked up at me, put her book down and asked, \"What about my belly, neck and shoulders?\"\n\nMy stiff cock flinched in my trunks. I think she noticed as a wide grin crossed her face.\n\nI nodded, trying to act cool and not like the horny teenager I was, \"Of course.\"\n\nI put more lube on her and did her firm belly, and front of her neck, my hands so close to her voluptuous tempting breasts.\n\nShe wordlessly moved up so I could go behind her and I did her shoulders and back of her neck. Although I generously lathered her with lotion, I also gave her a quick shoulder massage, which turned into a longer one as she moaned, ever so softly, \"That feels good.\"\n\nSo I continued massaging her shoulders, my cock iron stiff and ever-so-slightly poking her back.\n\nShe then laid down on her belly and suggested, \"You better get the rest of my back and my legs too.\"\n\n\"Yes, Ms. Champlin,\" I nodded, even though she couldn't see me.\n\n\"You can call me Ruth,\" she offered, as I lotioned up her back while staring at her amazing ass covered by the thinnest of material.\n\nI wanted to fuck her then and there. Of course, I couldn't. I needed to play this perfectly.\n\nI asked, \"Do you want me to untie your bikini top Ruth? I'd hate for you to have a tan line there.\"\n\n\"I bet you would,\" she retorted, before giving me permission, \"But it's probably a good idea.\"\n\nMy hands trembled as I was shocked with the permission. I undid it and the strings fell to her sides. Man I wanted to see those breasts.\n\nBut for the time being, I played it as cool as I could. I massaged lotion all over her back and right to where her bikini bottom began.\n\nMy hands lingered there for a moment, temptation an evil seductress, before I moved down to the back of her legs.\n\nI took my time, deciding I was going to do this as long as she was going to allow me to.\n\nI did her feet, her ankles, her calves, and up to her thighs... excitingly close to her pussy.\n\nShe finally spoke, \"That's good, Joey. Thank you.\"\n\n\"You're welcome, Ruth,\" I complimented, resisting the urge to give a firm squeeze to her tight ass.\n\nAfter a pause, I asked, \"What're you doing for supper tonight?\"\n\nShe didn't move, remaining on her stomach, \"Are you asking me out for dinner, Joey?\"\n\n\"Only if the answer is yes,\" I replied.\n\n\"That's very generous at an all-inclusive hotel,\" she said slyly.\n\n\"You deserve the best,\" I joked, sitting on the edge of the lawn chair.\n\n\"My husband sure didn't think that,\" she sarcastically responded.\n\n\"He was obviously an idiot,\" I replied, and meaning it, before deciding to put my left hand on her ass.\n\nAs I hoped, she didn't demand I move it, instead she asked, \"Do you always put your hand on your teacher's ass?\"\n\n\"You'd be the first,\" I admitted, before I added, \"And now we are both consenting adults.\"\n\n\"So I should be flattered?\" She questioned, ignoring the 'consenting adults' comment.\n\n\"You're a very beautiful woman,\" I replied.\n\n\"And old enough to be your mother,\" she countered.\n\n\"I told you,\" I continued, my cock dying for release, in awe that the conversation was going this way. I gave her ass a firm squeeze and added, \"I like my women older.\"\n\nShe didn't say anything and for a minute there was silence. She then asked, \"Could you please do my straps back up?\"\n\n\"Sure,\" I nodded, wondering if I had somehow gone too far, even though I didn't think I had.\n\nI did it back up, although a little loose.\n\nShe sat up and I asked, trying to keep the momentum going, \"So, dinner - is it a yes?\"\n\nShe reached down, grabbed her bag, and stood up.\n\nFuck, I blew it.\n\nI stood up too.\n\nShe looked directly at me, looking teacher serious, and asked, \"Were you thinking sausage for me and fish for you?\"\n\nI gasped.\n\nShe continued, \"I do like a nice thick long sausage,\" as she slyly reached forward and squeezed my throbbing dick. She purred, moving her hand away just as quickly, \"Mmmmmmm, nice sausage.\"\n\nI was speechless, which was new for me.\n\n\"I want a date for salsa dancing tonight at a club in town,\" she continued, \"and I'm told it's not safe for a pretty woman to be going out and about alone. Do you want to go with me?\"\n\n\"Y-y-yeah,\" I nodded, barely able to speak, even though my plan was working.\n\n\"Good,\" she nodded, \"come to my room at 7:00. We'll have a late dinner and then go out.\"\n\n\"Sounds good,\" I agreed, trying to sound casual, even though my voice actually broke a bit.\n\nShe smiled, \"Room 1212.\"\n\n\"Got it,\" I nodded.\n\n\"By the way, I don't fuck on the first date. She then leaned in, squeezing my cock again, added, \"But I definitely suck on the first date.\" She tugged on my ear, my whole body quivering at her touch.\n\nShe moved away and said, \"See you tonight, Joey,\" and walked away.\n\nI didn't move as I watched her walk away from behind, my cock pointing directly at her through my trunks.\n\nOnce she was out of view, I smiled. My plan had worked. I had a date with her.\n\nAs I went to find the boys, it occurred to me to wonder, 'Had I played her, or had she just played me?'\n\n.....\n\nWhen I found my buddies a few minutes later, Adam said, \"Looks like you did better than we anticipated.\"\n\n\"I'm taking her salsa dancing tonight,\" I replied, still in awe of what just happened.\n\n\"So you're in,\" Adam said.\n\n\"Like Flynn,\" Brian added, a joke we had been using throughout our senior year.\n\n\"I think so,\" I nodded, distracted.\n\n\"What's wrong?\" Adam asked, \"You got your in?\"\n\nThe truth was, something had changed during our brief flirtation. I couldn't explain what it was, but I felt a strange connection to Ruth, unlike I did to all the teen girls or MILF's I had fucked.\n\nSex had become a game where I just tallied up notches on a bedpost, but somehow this seemed different. Yet, it shouldn't be. She was twice my age, and a teacher, it wasn't like we were going to be in a relationship.\n\nI nodded, trying to be my normal self. \"Yeah, I'm in and I'm going to be all in tonight.\"\n\nBrian laughed, high fiving me, \"Yeah, you are.\"\n\nOddly, even though we all competed for the ladies and the most pussies, we also lived vicariously through each other's triumphs... a sexual band of brothers.\n\nWe bullshitted some more, mostly in awe of how I was going to 'bang', their words, Ms. Champlin, as I told an abridged version of our conversation.\n\nAnyway, that night I went to her room, which was on the top floor, dressed to the nines, a mixture of excitement and trepidation coursing through me.\n\nI knocked on the door and my already stiff cock flinched in my trousers as she opened the door and was dressed showcasing every asset she had. She was in a super sexy, super tight black and red Mexican dress that didn't remotely hide her voluptuous breasts or her firm legs which were encased in shiny beige pantyhose. Her hair was down, her lips were bright red and her entire look said, \"Fuck me now!\"\n\nI complimented, \"You look beautiful.\"\n\n\"You look handsome yourself,\" she greeted back, as she slid into red high heels that looked to be four inches high.\n\n\"Are you going to be able to dance in those?\" I asked.\n\n\"I can do anything in these,\" she replied, although her sultry tone implied sex.\n\n\"Good to know,\" I nodded, desperately trying to be casual.\n\nShe asked, \"Would you like a quick cocktail before we leave?\"\n\n\"Sure,\" I nodded, the surreal evening overwhelming me.\n\nI expected her to go and grab a drink in the massive room she had, but she instead dropped to her knees and fished out my cock.\n\nI gasped... paralyzed.\n\nShe asked, her hand on my completely stiff rod, \"Is this hard because of me?\"\n\n\"Y-y-yes,\" I stammered, in complete awe of what was happening.\n\n\"Very impressive,\" she nodded, as she opened her mouth and took my cock in between her beautiful, red lips.\n\nI groaned, \"Holy shit,\" as she began bobbing on my seven inch cock.\n\nUnlike most girls who sucked me, she didn't go slow or take breaks every few seconds. No, she bobbed hungrily on my cock taking all seven inches in her mouth. Only one MILF, who I met at a bar I got into while underage, had ever taken all my cock in her mouth before today.\n\nI just watched and enjoyed the amazing pleasure my former teacher gave me.\n\nNot surprisingly, in only a couple of minutes, I was near eruption. I warned, \"I'm going to come soon, Ms. Champlin.\"\n\nShe kept sucking, somehow even faster, and I deposited my load down her throat a few bobs later. Only a few girls had swallowed and only a couple willingly, so this too was amazing.\n\nShe milked every last drop out of my cock, before finally allowing my cock to slip out of her mouth. She stood back up and smiled, \"Very yummy,\" before leaning forward and kissing me.\n\nWhen she broke the kiss, I said, likely sounding like the teen I was, \"That was the most amazing blow job I have ever had.\"\n\n\"I bet you say that to all the girls who blow you,\" she smiled, turning around and grabbing her purse.\n\nI noticed then that her pantyhose had seams going up the back of them that made her outfit even hotter.\n\nI replied, \"True, but this time I mean it.\"\n\n\"Just wanted to get the awkward 'is this going to end in sex or not out' of the way,\" she smiled, before adding, \"you probably should put that away before we leave.\"\n\nAs I put my dick back in my pants, she added, \"So that was date one, now we are on date two.\"\n\nI asked, my confidence swelling after the blow job, \"And what do you do on date two?\"\n\n\"Anything you want,\" she answered, as she walked by me and left me standing there bewildered.\n\nHoly fuck! I had hit the mother load!\n\nI followed after her, closing the door, and took her hand in mine.\n\nShe asked, \"Do you want to be seen with a woman twice your age in public holding hands? There will be a lot of young Mexican skanks out and about willing and ready to devour you whole.\"\n\nI smiled, as I gave her hand a squeeze, \"Tonight, I only have eyes for you.\"\n\n\"Keep saying things like that and you are going to get very, very lucky tonight,\" she replied.\n\n\"I'm already very lucky,\" I replied. Always being good at turning on the charm.\n\n\"Oh, you have no idea just how lucky you may still get,\" she said back, just as the elevator opened.\n\nOnce inside, the door closed, she asked, \"Are you a tits guy?\"\n\n\"I'm an everything guy,\" I replied, which was true. I loved everything about women. I loved tits, pussy, ass and legs. But I also loved their smiles, eyes and moans.\n\n\"Did you ever fantasize about these tits in my class?\" She asked, pulling down her dress to reveal the huge tits that were apparently not being held up by a bra.\n\n\"Oh, God,\" I gasped, staring at the round perfection.\n\n\"Is that a yes?\" She asked, as she pulled her dress back over her breasts and very erect nipples.\n\n\"A million times yes,\" I replied, moving my gaze reluctantly back to her eyes, like a gentleman would do.\n\n\"I've always wondered what horny teenage boys thought of me,\" she said.\n\n\"They all wanted to suck on your breasts,\" I answered.\n\n\"Anything else?\" She asked, as the elevator slowed down.\n\n\"Your legs are amazing too,\" I said, before adding, \"especially in nylons.\"\n\n\"My loser of an ex-husband loved nylons on me,\" she replied, as we got out of the elevator. \"And now I wear them to showcase my legs to men.\"\n\n\"My win,\" I nodded, as we walked out to one of the already waiting taxis.\n\n\"After you,\" I offered.\n\n\"Such a gentleman,\" she smiled.\n\nDeciding it was my turn to shock. I quipped, \"Until I shoot a load all over your face.\"\n\nShe didn't miss a beat as she challenged, \"Promises, promises.\"\n\nDuring the short taxi ride, she leaned into me, her hand on my leg.\n\nAt the restaurant, Ruth was very blunt as we chatted during our meal.\n\nI learned that she married her high school sweetheart, and that she was pregnant by nineteen and by twenty-one she had already had both their children.\n\nShe didn't get her degree until she was twenty-nine and although she was furious about being cheated on, she considered it a blessing in disguise.\n\nBoth her children were in college. Her daughter Suzanne going into her third year at Oxford in the fall and her son, who I vaguely knew because he was in my graduating class but we didn't hang in the same circles, was going to MIT for computer programming.",
        "When she left Mexico in three days, she would be flying to Paris to meet up with both her kids for a three week trip throughout Europe.\n\nI had to ask. \"Why a blessing in disguise?\"\n\nShe asked, completely ignoring my question, \"How many girls have you slept with?\"\n\n\"Pardon?\" I asked, surprised by the question.\n\n\"How many girls have you fucked with that big dick of yours?\" She rephrased bluntly. Hearing such hot language from a teacher was surreal and had my cock again looking for action.\n\nI considered rounding down, yet sensed she wanted the truth. I answered, again brimming with confidence, \"You'll be 25.\"\n\n\"Wow,\" she said, not judging, but seemingly in awe. After a pause, she said, shocking me again, that is twenty-four more than me.\"\n\n\"No way,\" I gasped.\n\n\"He was my first and until later tonight my only,\" she admitted.\n\n\"You're shitting me,\" I questioned. I couldn't fathom no one trying to bed her since her makeover.\n\n\"I've had a few chances since the cheating, but I just wasn't ready, plus the town isn't big enough to keep secrets,\" she explained.\n\nI was still in awe that she had only had sex with one man and was clearly planning to double her history with me.\n\nI asked, \"But you have been so aggressive today.\"\n\nShe smiled, a sexy smile, \"I decided that I was going to 'slut it up', as my sister called it, while here. And since I'm not returning to Walkerton ever again, you're my stud.\"\n\n\"You're not going back to Walkerton?\" I asked, as I felt her foot go to my crotch.\n\n\"Nope,\" she said, as her foot rubbed my cock, \"got a job out west in San Diego. No more long cold winters.\"\n\n\"Congrats,\" I moaned, her foot teasing me.\n\n\"So how many of your twenty-four do I know?\" she asked, as he finished her second drink.\n\n\"A few,\" I shrugged, deciding I was going to make her work for the information.\n\n\"Do tell,\" she said, raising an eyebrow.\n\n\"After you do a tequila shot with me,\" I offered.\n\n\"You know I'm already a sure thing,\" she smiled, more pressure on my cock from her foot.\n\n\"A little liquid courage never hurts,\" I countered, as I waved over our waiter and ordered two shots.\n\n\"I should warn you,\" she smiled, \"I get a bit wild when I'm drunk.\"\n\n\"Wilder than sucking me in your room, showing your tits in the elevator and rubbing your foot on my cock right now?\" I asked.\n\n\"What the fuck?\" She shrugged. \"I only live once.\"\n\n\"Don't we all,\" I smiled, curious where she was going with this.\n\nThe shots arrived and she toasted, \"To a crazy night.\"\n\n\"Indeed,\" I agreed, as we both downed our shots.\n\nShe made a hilarious face. I asked, \"Not a tequila drinker?\"\n\n\"It burns,\" she explained, before adding for shock value, \"like cum in the eye.\"\n\n\"I wouldn't know,\" I shrugged, before adding, going tit-for-tat in the sexual word play, \"make sure to close your eyes when I shoot my load all over your face tonight.\"\n\nShe retorted back, \"Is that before or after you fuck my pussy and ass?\"\n\n\"Cheque!\" I called out.\n\nShe laughed as she put extra pressure on my dick with her foot, \"So how do you like the fantasy playing out so far?\"\n\n\"Reality is a lot better,\" I replied.\n\n\"So true,\" she purred, before asking again, \"So, who have you fucked that I would know?\"\n\n\"I feel bad fucking and telling,\" I said, which wasn't really true at all.\n\n\"You can tell your friends exactly what we do tonight,\" she said.\n\n\"Really?\" I asked.\n\n\"Why not?\" She shrugged. \"I'm never going to see them again.\"\n\n\"Fair enough,\" I nodded, still in awe of how casual and sexy this formally kind of uptight teacher was.\n\n\"So, tell me,\" she said.\n\n\"Well, Becky, of course,\" I began.\n\n\"You fucked your cheerleader girlfriend?\" She mock gasped.\n\n\"She was a shitty fuck,\" I nodded.\n\n\"You better not say that about me,\" she said, raising an eyebrow.\n\n\"If that pussy of yours is anywhere near as hot as that mouth of yours I'm pretty confident I'll be starting a Ms. Champlin can fuck fan club.\"\n\n\"Hmmmm, it would be a pretty exclusive club,\" she pondered, before adding, \"Who else?\"\n\nWell, there was Sherry,\" I started, wanting to shock her.\n\n\"Reverend Victor's daughter Sherry?\" she asked, looking as shocked as I expected her to be.\n\n\"The one and only,\" I admitted.\n\n\"How?\" She asked, intrigued.\n\n\"It started with spin the bottle. That led to seven minutes in heaven and that led to me eating her out. I have long learned the way to a woman's heart is through pussy munching,\" I answered.\n\n\"What a great porn movie title,\" she joked.\n\n\"Or a self-help book,\" I added.\n\n\"A reality TV series,\" she said.\n\n\"I took her virginity a week later in the basement of the church,\" he admitted.\n\n\"You sinner,\" she teased.\n\nI shrugged, \"I figured it was blessed.\"\n\n\"Who else?\"\n\n\"Amanda,\" I revealed next, who was Becky's older sister.\n\n\"Not while you were dating Becky,\" she asked.\n\n\"Before and after,\" I shrugged, \"I don't cheat.\"\n\n\"It's good that a slut like you has morals,\" she quipped.\n\n\"Um, in today's society,\" I countered, \"I'm a stud and you're a slut. Unfair, but true.\"\n\nShe shrugged, \"If I am, I am.\" Sanding up. As she stretched, her tits showcased gloriously, she said, \"Time to dance.\"\n\n\"In my pants,\" I joked, just as the waiter came with the bill.\n\nShe insisted on paying, after I offered three times, she said, \"Today you're my gigolo.\"\n\n\"Gigolo's get paid to fuck,\" I pointed out.\n\n\"Name your price,\" she quipped, her hand squeezing my cock again.\n\n\"I may do this as a charitable donation,\" I smiled.\n\n\"You will be making at least a couple more deposits,\" she countered, taking my hand and leading me out of the restaurant.\n\n\"That's all?\" I questioned.\n\n\"You better be able to back up your talk with long, hard action,\" she quipped back as she led me down towards the beach.\n\nI asked, \"Is this where the dancing is?\"\n\n\"No,\" she said, \"but this is where the fucking is.\"\n\n\"It's not dark enough,\" I pointed out, even though I was willing to fuck her anytime and anywhere.\n\nShe said, \"Trust me.\"\n\n\"Just as long as we don't get arrested,\" I joked. \"I'm too pretty to end up in a Mexican jail.\"\n\n\"That you are,\" she agreed, as she led me around the high rocks.\n\n\"Where are you taking me?\" I asked.\n\n\"To my secret love cave,\" she replied, before adding, \"I found this yesterday as I walked around the beach.\"\n\n\"You were hunting for a secret sex cave?\" I asked.\n\n\"I wasn't then,\" she shrugged, as she led me into a secluded spot. \"But it sure worked out that way.\"\n\nI followed her for a few more minutes and then we were at the entrance of a small cave.\n\n\"Ready for deposit number two?\" She asked.\n\n\"Ready for orgasm number one?\" I countered.\n\n\"That wasn't a singular offer?\" She asked raising her eyebrow.\n\n\"Let me rephrase, the first of many,\" I smiled, leaning in and kissing her.\n\nWe kissed for a minute before she pulled me into the darkness.\n\nI laughed, \"I can't see you.\"\n\n\"But can you feel me?\" She questioned.\n\n\"God, yes,\" I replied, as we tumbled to the ground.\n\n\"Fuck me now,\" she demanded.\n\nI wanted to. But I also wanted to be a gentleman and show her that I do give oral too. I moved between her legs, and went to pull down her panties, as I realized her pantyhose were actually thigh high stockings.\n\nShe giggled, \"I went commando for easy access, baby.\"\n\n\"You are literally too good to be true,\" I replied.\n\n\"Now shove that big dick of yours in me,\" she ordered.\n\nInstead, I buried my face in her wetness.\n\n\"Oh my,\" she moaned, surprised by my eager tongue on her completely shaved pussy. After a moment, she added, \"I'm happy I got that Brazilian before I flew here.\"\n\nI couldn't agree more. Her pussy was already wet and I only wished I could see it. But, her moans were telling me she was enjoying my eager tongue.\n\n\"Oh, God, I haven't had my pussy licked in years,\" she moaned.\n\nI asked, \"Your husband didn't lick you out?\"\n\n\"Never,\" she admitted, as I kept licking, \"He said it was unsanitary.\"\n\n\"But, let me guess, he expected you to blow him?\" I questioned.\n\n\"Every day,\" she admitted.\n\n\"Well, tonight I'm your sexual terminator... made to serve you,\" I replied, sounding corny.\n\n\"Stop talking and keep licking,\" she demanded, as her breathing increased.\n\nI obeyed, loving hearing her moans increasing. I loved women. I loved getting head. But, I equally loved licking pussy. It was intimate and showed a complete vulnerability in the woman that intercourse didn't. Plus, women loved a man who went down on them.\n\n\"Oh fuck, yes, suck my clit,\" she begged.\n\nI obeyed again, taking her swollen clit between my lips and tugging.\n\nShe put her hands on the back of my head, lifted up her ass and screamed, \"Fuck!\"\n\nInstantly, my face was coated in her cum as it flooded out of her like a dam breaking after years of holding back the inevitable flood.\n\nI hungrily lapped up her sweet cum as she continued holding my head.\n\n\"Oh sweet Lord,\" she whimpered once she let go of my head and collapsed onto her back.\n\n\"Your cum is like holy water then,\" I smiled, as I pulled my pants down to my ankles and in one swift move slid my cock in her still quivering cunt.\n\n\"Holy fuck,\" she screamed, \"I'm not even done coming yet.\"\n\n\"The Lord giveth, the Lord taketh,\" I quipped, as I began fucking her.\n\nShe laughed, \"Who knew the big dicked, lazy ass student could quote from the Bible?\"\n\n\"Who knew my prim and proper teacher was a submissive, cock hungry slut,\" I countered, as I slammed hard into her.\n\n\"Touch\u00e9,\" she moaned, as she wrapped her nylon-clad legs around me.\n\nI fucked her hard and deep as she talked dirty to me, which was amazing to hear from my ex-English teacher.\n\n\"Oh yes, fuck my cunt,\" and \"Oh, I never want this to end,\" and \"Drill me, baby,\" and \"That's it, fuck your teacher like a dirty cum bucket,\" and \"Holy shit, I'm going to come again.\"\n\nI demanded, knowing my orgasm was close too, \"Come for me, teacher slut, come like the filthy whore you are tonight. A cum bucket who lives to serve teen cock.\"\n\n\"Oh fuck, yes, keep talking,\" she moaned, bucking her ass up to meet my hard thrusts.\n\nI wish I could have seen her facial expressions. There is something undeniably sexy about a woman in the heat of rapture.\n\nI continued, \"Imagine all your advanced English students watching you get pounded like a cum slut,\" and \"Just a horny MILF who will do anything for teen cock,\" and finally, \"Come now, my teacher slave, now or I pull out and find some Mexican cum slut.\"\n\n\"Don't you dare,\" she threatened and then seconds later had her second orgasm. \"Mother fucker.\"\n\n\"That I am,\" I quipped, \"Edwin's mother fucker.\"\n\n\"Oh fuck, shit, fuck,\" she babbled.\n\nI quipped, \"I don't think that was a proper sentence.\"\n\n\"Just keep fucking,\" she demanded.\n\nI did.\n\nPounding her throughout her orgasm.\n\nFinally, my own orgasm was bubbling and, deciding to test just how obedient she would be, I pulled out and ordered, \"Knees, teacher slut.\"\n\nShe quickly moved and searched for my cock in the dark.\n\nFinding it, she devoured it and began sucking furiously.\n\nI loved how eager of a cocksucker she was and enjoyed the blow job for a minute or so. And then, my balls erupting, I pulled out at the very last second, immediately splattering my teacher's face with my load.\n\nI wish I could have seen the look on her face when I came on her face, but I just shot four ropes on her.\n\n\"You bad boy,\" she purred, as she took my cock back in her mouth.\n\n\"Just some baptism by cum,\" I joked, returning to the strange religious sexual word play we had going.\n\nShe sucked me slowly for about a minute before saying, \"You shoot a lot of cum.\"\n\n\"You flood out a lot of cum yourself,\" I pointed out.\n\n\"Help me up,\" she requested, as she put her hands on my chest.\n\nI pulled her up and said, trying to see how serious she was about her earlier words, \"Two holes down and one to go.\"\n\nShe responded, her tone sly, \"You have only deposited in one of them, actually.\"\n\n\"I wanted to keep my facial promise,\" I replied, leading her out of the cave.\n\n\"That you did,\" she replied, as we finally returned to the daylight, which was fading.\n\nI turned to her, my cum all over her face, but particularly on her right cheek and chin, and said, \"I can't deny it, you look really hot with your face coated in cum.\"\n\n\"You look pretty sexy too with your face having a nice sheen,\" she countered.\n\n\"Now where?\" I asked.\n\n\"To dance,\" she answered, opening her purse.\n\n\"What are you doing?\" I asked, even though I knew the answer.\n\n\"Getting some tissue for my face,\" she answered.\n\n\"Leave it on,\" I ordered.\n\nShe looked at me surprised, but then shrugged, \"What the hell, I don't know anyone here and you know the saying.\"\n\n\"What saying?\" I questioned.\n\n\"What happens in Mexico when you bump into a sexy ex-student and decide to be his complete three hole cum bucket fuck toy stays in Mexico,\" she said, her nasty tongue the sexiest thing I had ever heard. Add the cum coated on her face, the two sexual encounters and the promise of anal later and this was, without a doubt, the best night of my life.\n\nI laughed, \"No, I hadn't heard that, but I must admit it is a pretty good saying.\"\n\nShe took my hand and said, adding yet another level of kink to the night, \"Lead the way, Master.\"\n\nMy cock flinched at the new term, as I led her out of the secluded area.\n\n\"So, who else have you fucked that I know?\" She asked, a moment later.\n\n\"You really are persistent,\" I said.\n\n\"Enquiring sluts want to know,\" she quipped, \"and so far your reveals have been very... revealing.\"\n\n\"Oh, nice,\" I laughed, \"Not exciting stories but Kimberly, Sarah and Brittany.\"\n\n\"Predictable,\" she nodded.\n\n\"How so?\" I asked.\n\n\"They are all vapid girls who use sex to hide their insecurities,\" she said.\n\n\"Thanks, Freud,\" I quipped, \"and am I a tail chasing stud because of my childhood?\"\n\n\"No,\" she answered, \"because you're good looking and women are shallow.\"\n\n\"Ouch,\" he said.\n\n\"I didn't mean it that way,\" she said, \"but if I can be so blunt.\"\n\n\"I just fucked your cunt,\" I quipped, before adding, \"rhyming couplet.\"\n\n\"And so elegant,\" she laughed. \"Truth is you got by school on personality and sports, not academics, and that is a shame.\"\n\n\"Is this the ol' 'you can do so much better' speech?\" I asked, something I had heard many times.\n\n\"Well, we know that you can excel at things you enjoy,\" she smiled coyly.\n\n\"I do like to fuck,\" I nodded.\n\n\"And have box lunches,\" she added.\n\n\"That's a new one,\" I laughed. \"But yes, I do love a boxed lunch.\"\n\n\"And I hope when you find what you are passionate about for a career you do it with the same ambition, pride and enthusiasm,\" she said.\n\n\"Me too,\" I nodded, surprised at how the conversation had turned so quickly into real territory.\n\n\"But enough teacher advice,\" she said, as we reached the beach and were about to pass the first people since fucking. \"Tonight I'm not a teacher, or a motherly figure.\"\n\n\"Yes, you're my cum slut,\" I declared.\n\n\"And ass slut,\" she added, loud enough for the two teenagers passing us to hear.\n\nI laughed, looking at the guys all confident, \"You mean three hole cum slut.\"\n\n\"Maybe even all at once,\" she added, smiling at the guys around my age as they passed.\n\nInstantly, I wondered what the possibilities of having a gangbang with the boys and her were. Yet, I just as quickly pushed the thought out of my head. This was my night and I sure as hell wasn't sharing it with anyone.\n\n\"I think they both just came in their pants,\" she giggled.\n\n\"What a waste of cum for a cum slut,\" I retorted.\n\n\"So true,\" she said, turning around.\n\nI pulled her back. \"Whoa, Nelly. I need to protect you from bad decisions.\"\n\n\"And who will protect you?\" She asked, turning around so we were face to face.\n\n\"God,\" I answered, with a straight face.\n\nShe burst out laughing. \"We are both going to hell.\"\n\n\"Well it is hot down there,\" I quipped.\n\n\"Want to hear something hilarious based on this night so far?\" She asked.\n\n\"Very much so,\" I answered.\n\n\"I taught Sunday school for years,\" she revealed.\n\n\"Is that cum on her face?\" a female voice asked from behind me.\n\nMy sexy ex-teacher responded, \"A full load.\"\n\n\"Holy shit,\" a guy's voice gasped.\n\n\"Slut,\" the female said.\n\nRuth countered, \"Actually, I'm a cum slut. Get it right.\"\n\nI laughed, turning around, and saw two middle aged people staring at us.\n\nThe female said, \"Is he even legal?\"\n\n\"Are you?\" Ruth asked, suddenly looking serious at me.\n\n\"Is fifteen legal?\" I responded.\n\n\"Fucking disgusting,\" the female said, yanking her man away. \"Sick perverts.\"\n\n\"So is that a no to a foursome?\" Ruth called out, before breaking into laughter.\n\n\"I wouldn't mind having a foursome with you, but if you are going to munch pussy I want someone a lot hotter,\" I joked.\n\n\"Yes, Master,\" she nodded.\n\nMy eyes went big. Was she serious? Would she have a threesome or more with me?\n\nShe added, slipping her arm in mine, \"Fifteen. Now she thinks I'm a pedophile.\"\n\n\"Sorry,\" I shrugged, \"I just wanted to verbally slap the pretentious look off her face.\"\n\n\"I'm not sure it worked,\" she shrugged.\n\nI took her hand again and said, \"Maybe we should get the cum off your face.\"\n\n\"Your decision,\" she shrugged. \"Tonight I am one hundred percent at your sexual mercy.\"\n\n\"I think I just died and went to heaven,\" I said.\n\n\"Then wait till your cock gets in my ass,\" she said, \"It's so fucking tight you will think you are in me for life.\"\n\n\"Now there is a visual I can live with,\" I joked, as we began getting into the more populated areas.\n\nA few people gave second looks, but no one else said anything about her cum coated face that was now drying.\n\n\"There is the club,\" she pointed.\n\n\"When we get inside you have permission to wash off my cum,\" I generously offered.\n\n\"Is it still obvious?\" She asked.\n\n\"Not as much and before,\" I answered.\n\nShe stopped a Mexican man on the street and asked, \"Can you see anything on my face, se\u00f1or?\"\n\n\"A little, Se\u00f1orita,\" he nodded.\n\n\"Can you tell what it is?\" She asked.\n\n\"Not really, Se\u00f1orita,\" he answered, looking completely confused by the conversation.\n\n\"Cool,\" she nodded, before adding, \"it's cum, by the way.\"\n\nShe turned back to me and said, \"I think I'll keep it on my face as a memento of the night.\"\n\n\"In that case,\" I quipped, \"I have an unlimited amount of mementos for you.\"\n\n\"You better,\" she smiled, squeezing my hand and leading me into the crowded dance club.\n\nFor the couple of hours, we drank and danced. It was amazing to see yet another side of my formally uptight teacher.\n\nShe downed shots like a champ.\n\nShe danced up a storm and looked fucking hot doing it.\n\nShe flirted with the boys.\n\nShe even did a dirty dance with a very hot Dominican who looked a lot like Jennifer Lopez.\n\nShe asked me, as we sat at a table a few drinks later, now quite drunk, \"Do you want to see me make out with a girl?\"\n\n\"Every guy here would,\" I answered. I had watched a few girls make out at parties and it was always cock-hardening hot.\n\n\"Which girl should I try to kiss?\" she asked, looking around the room.\n\n\"Have you ever kissed a girl before?\" I asked.\n\n\"Never,\" she said, \"but you know the saying. When in Mexico and being a submissive slut for an ex-student you should at the very least make out with one Mexican or Latino chick.\"\n\n\"I hadn't heard that one,\" I smiled, \"but I wonder if it shouldn't include munching a Latino or Mexican cunt as well.\"\n\n\"First, I want to add fucking in public to my slut list,\" she said, before adding, \"Plus, I'm fucking horny.\" She fished out my cock and began to straddle me.\n\n\"Here?\" I asked, surprised.\n\n\"No better place than the present,\" she shrugged, as she lowered herself on my already stiff cock impressively smoothly considering her intoxicated state.\n\n\"Fuck, I love how quickly you recover. My ex was one and done.\"",
        "\"I love how big a slut you are,\" I groaned, as my cock disappeared into her cunt.\n\n\"And I love how big your dick is and how fucking good it feels in me,\" she moaned, as she slowly began grinding on my cock in a packed bar.\n\nI was thankful we had a corner table, it gave us some privacy, but not enough for anyone walking by.\n\nI moaned, \"We may get kicked out of here.\"\n\n\"I don't care,\" she moaned back, \"All I want right now is dick.\"\n\n\"So eloquent,\" I quipped.\n\n\"Cum sluts are not eloquent,\" she countered, grinding her cunt on my cock now. This was something I had never felt before, it was a sly milking of my cock and made it way less obvious that we were in the middle of fucking.\n\nI groaned, \"This is new.\"\n\n\"Like it?\" She asked, continuing to grind.\n\n\"Are you a slut?\" I replied as an answer.\n\n\"Tonight I am,\" she moaned.\n\n\"And tomorrow too,\" I added, taking a risk, trying to take complete control and also have her for more than just tonight, \"you're my bimbo fuck toy until you get on that plane.\"\n\n\"Yes, Master,\" she moaned, \"I'll obey every order.\"\n\n\"You'll eat cunt?\" I asked, giddy with the possibility of a couple more nights with her.\n\n\"Hmmmm, yes, whatever you want your cum slut teacher to do,\" she moaned, before adding, \"another fantasy I haven't fulfilled.\"\n\n\"You'll take it in the ass?\" I questioned.\n\n\"Here?\" She asked.\n\n\"No that is for the grand finale back in your hotel room,\" I replied, wanting to really enjoy that.\n\n\"Mmmmmm, maybe in the jacuzzi,\" she moaned, grinding faster.\n\n\"How about a gangbang with Brian and Adam?\" I questioned, not sure I wanted to share her with them, but curious just how far she would be willing to go.\n\n\"My three cum holes are yours to use as you wish, Master,\" she purred, sounding like a complete sex bimbo.\n\nShe then added, \"Getting triple penetrated or, what did I read about online yesterday while I masturbated, airtight.\"\n\n\"What's airtight?\" I asked, a term I hadn't heard.\n\n\"Dicks in all three holes,\" she answered, grinding faster now, and, in turn, becoming a little less discrete about what we were doing.\n\n\"I think I'm in love with you, Ruth,\" I moaned, as I looked and saw a few people now watching the show we were apparently putting on.\n\n\"I'm in love with your cock,\" she moaned, grinding faster.\n\n\"We have an audience,\" I warned.\n\nShe moaned, \"I don't care. I'm too close to stop.\"\n\n\"Me too,\" I groaned, seconds before I deposited a load deep in her cunt.\n\n\"Oh yes,\" she moaned, \"it's been so long since I felt cum shoot in me.\"\n\nFiguring fuck it, I wanted to get her off quickly, I lifted her up slightly and began ramming her cunt.\n\n\"Oh fuck,\" she screamed, as I slammed into her, a crowd growing as she leaned forward onto the table. \"Harder.\"\n\nA few hard deep thrusts was all it took and she screamed, \"Yes, fuck!\" as she came.\n\nPeople began clapping and she moaned, trying to bow, \"Thank you, thank you.\"\n\nI waved, feeling awkward and yet alive.\n\nShe move off me and said, \"Fuck, I need to pee.\"\n\n\"Be careful,\" I said, \"some of the guys here are drooling.\"\n\n\"Thankfully, its right beside us,\" she said, getting up and pushing her dress back down.\n\n\"Se\u00f1orita, that was hot,\" a young Mexican complimented.\n\nShe smiled, reaching for his cock, \"Is that because of me?\"\n\n\"Yes, Se\u00f1orita,\" he nodded, his eyes showing his shock.\n\n\"Cool,\" she smiled, before going to the bathroom.\n\nI sensed being stared at as I slyly put my cock away.\n\nWhen she returned five minutes later, just when I was beginning to get worried about her, she said, as she sat back beside me, \"I should probably wear panties if I'm going to let you come in me. I couldn't stop leaking.\"\n\n\"We should go,\" I suggested.\n\n\"Anal already?\" She questioned, \"You really are insatiable.\"\n\n\"Just thinking another bar,\" I said.\n\n\"Sure,\" she nodded.\n\nI led her out, feeling uncomfortable with a few men who were staring at her. Fucking in a public place in Mexico was not our most intelligent idea.\n\nOnce outside, as we walked down the street, I looked back and was relieved to not see anyone following us.\n\n\"Oh my God, look,\" she said excited, as she pointed up.\n\n\"Cool,\" I nodded, looking up and seeing what looked like a bar on a roof top.\n\n\"Let's go there,\" said, pulling me across the street.\n\n\"Sure,\" I nodded, not that I had a choice, eager to get out of the street and into another location.\n\nOnce on the roof, she said, \"Dance with me?\"\n\n\"If I have to,\" I replied, teasingly.\n\n\"You do,\" she responded, pulling me onto the dance floor.\n\nA dozen songs later, both of us sweating profusely, we grabbed drinks, and moved to a spot where we could see around the city.\n\n\"It's beautiful,\" she said.\n\n\"You sure are,\" I quipped.\n\n\"You can stop sucking up, I'm already yours,\" she replied.\n\n\"But I mean it,\" I replied.\n\nShe turned to me, tears suddenly forming in her eyes. \"I haven't been told that in a long time.\"\n\n\"Ruth,\" I said, taking her hands in mine. \"Even though I have enjoyed this night more than any other in my life, I want you to know I think you're completely beautiful.\"\n\nShe looked up at me with a vulnerability that surprised me, especially after all we had done.\n\n\"And sexy,\" I added.\n\n\"Really?\" She asked, her husband obviously having really done a number on her confidence.\n\n\"Do you have any idea how many of your students jerk off thinking about you?\" I asked, before adding, \"even before your transformation.\"\n\n\"Three,\" she answered, with a smile.\n\n\"Three hundred,\" I replied. \"You are pretty, have a great body, a sexy smile, intoxicating eyes and luscious lips.\"\n\n\"Don't forget my big tits, tight ass and shaved cunt,\" she added, back to her normal self.\n\n\"I never will,\" I promised, before adding, \"although the tight ass thing I will have to take your word for.\"\n\nShe downed her drink, and said, \"Wanna find out?\"\n\n\"Not here,\" I said wearily.\n\n\"No, let's go back to the hotel,\" she said. \"I could use a nice long sit in the jacuzzi and your lap?\"\n\n\"I don't know,\" I replied, \"I'm kinda tired.\"\n\nShe grabbed my hand and said, \"I may be your cum slut tonight, but you're also my gigolo.\"\n\n\"Yes, ma'am,\" I quipped back.\n\n\"Good boy,\" she smiled.\n\n\"Woof!\" I joked.\n\nWe both downed our drinks and headed back out hand in hand. As we returned to the street, she asked, \"Did you really fantasize about me before I changed my look?\"\n\n\"Truthfully, Yes I did,\" I nodded. \"I wanted to see those tits and I was curious if you were submissive.\"\n\n\"Why?\" she asked, looking surprised by my answer.\n\n\"Because you have huge tits,\" I replied, even though I knew she was talking about the submissive part.\n\n\"Smart ass,\" she said, slapping me playfully.\n\n\"I don't know,\" I shrugged. \"Just your personality. You were always a people pleaser and, in my fantasies, I took advantage of that to fuck you.\"\n\n\"So fantasy did become reality,\" she said.\n\n\"In so many ways,\" I nodded. \"This is every fantasy of mine wrapped into one.\"\n\n\"Mine too,\" she said. \"I mean, I never fantasized about my students. But, as soon as I heard your voice and saw you all tanned and buff, well I wondered about living out my fantasy.\"\n\n\"Which was?\" I asked.\n\n\"To be a complete submissive slut to a stranger for a night,\" she answered.\n\n\"How about three?\" I questioned.\n\n\"Even better,\" she smiled.\n\n\"What other fantasies do you have?\" I asked.\n\n\"Too many to keep track of,\" she answered.\n\n\"Tell me five,\" I insisted, hoping to help her make some true.\n\n\"I don't know,\" she hesitated.\n\n\"I demand it, slut,\" I ordered, sensing she would definitely obey me.\n\n\"I want to be with a woman,\" she answered.\n\n\"Maybe that will be tomorrows' task,\" I replied.\n\n\"You own me,\" she replied.\n\n\"So if I ordered you to go and offer to eat the cunt of that Se\u00f1orita over there you would?\" I asked.\n\n\"Order me to,\" she said.\n\n\"God, you're so hot,\" I groaned, before adding, \"we will save that for tomorrow. Tonight is just you and me.\"\n\nShe added, all her kinky fantasies suddenly coming out, \"And being gangbanged, being bound, being spanked, being fisted, fucking a girl with a strap-on, having sex with a she-male, going to a glory hole, getting a dozen facials, just to name a few.\"\n\n\"Holy fuck,\" I laughed, as I imagined her with a she-male or a strap-on cock, \"who would have thought all that when you were discussing Ophelia and Hamlet's love.\"\n\nRuth smiled, \"Let's be honest, Ophelia was a cum slut for Hamlet.\"\n\n\"Probably took it in the ass too,\" I added, thinking this would be a lot better version.\n\n\"So tonight, I'm Ophelia and you're Hamlet,\" she smiled, as we reached the hotel.\n\n\"Thou tempt me to the bent,\" I quipped, trying to remember Hamlet.\n\n\"Not even close,\" she laughed, before adding, \"To fuck me in the ass or not to fuck me in the ass, that is the question.\"\n\nI laughed, \"That would be a lot better version to teach.\"\n\n\"Let's go and make the porn version,\" she added, as we reached the elevator.\n\n\"Chicka-chicka-wow-wow,\" I joked, trying to make porn movie sounds.\n\nOnce in the elevator, we began making out like crazy. Our tongues explored each other's mouths, our hands explored each other's bodies.\n\nWe didn't stop until the elevator stopped. We quickly moved to the hotel room door, got inside after struggling to get the key to work and resumed making out.\n\nEventually, she said, \"Get naked and meet me in the jacuzzi.\"\n\n\"Yes, ma'am,\" I nodded.\n\nI quickly got undressed, and got into the jacuzzi. I waited a couple of minutes before she returned, completely naked, with what looked like lube in her hand.\n\nI stared at her perfect body.\n\nShe asked, as she joined me in the jacuzzi,\"You like?\"\n\n\"I love,\" I said, trying not to drool. \"If I was Michelangelo, you would be my David.\"\n\n\"And you would be my John Holmes,\" she countered.\n\n\"Who is that?\" I asked.\n\n\"Fuck I'm old,\" she sighed, as she moved to me.\n\n\"Who is he?\" I asked again.\n\n\"A famous porn star from the old days,\" she replied.\n\n\"Aaaaaaah,\" I nodded, before shifting to role play, as I sat up on the edge of the Jacuzzi, \"Get sucking Ophelia.\"\n\nShe smiled, moved to me, lowered herself, and purred, \"Yes, Master Hamlet.\"\n\nShe took my cock in her mouth again.\n\nI watched her suck my cock. This time she took her time, getting it nice and ready for her.\n\nAs I did, I still couldn't believe this was happening. This whole day had been so surreal.\n\nAfter a good four or five minutes of her slowly sucking my cock, I ordered, \"Ready to give me that ass, Ophelia?\"\n\n\"Yes, Master Hamlet,\" she nodded, standing up, turning around and moving her ass to me.\n\n\"No lube?\" I asked.\n\n\"Oh shit, yes,\" she giggled, reaching for the lube she had put on the edge before she went down on me.\n\nShe poured some on her ass and I watched as she then slid a finger inside her asshole and started fingering herself.\n\nI stroked my completely erect cock, watching this beautiful woman finger her ass as she prepared it for me.\n\n\"I'm ready, Master,\" she moaned, as she pulled her finger out and moved back to me.\n\nI aimed at her perfect ass and watched as she backed up onto it.\n\nI groaned as my cock disappeared between her ass cheeks.\n\n\"Fuck,\" she moaned, \"so much bigger than my small dicked ex.\"\n\n\"So fucking tight,\" I moaned back.\n\n\"Tear it apart, Master,\" she said, as she surprised me and suddenly slammed her body back onto mine. \"Fuck!\" she screamed, as she impaled herself on my seven inch dick.\n\n\"Ride my cock, slut,\" I demanded, taking control.\n\n\"Yes, Master,\" she moaned, as she began bouncing back on me.\n\n\"That's it, baby,\" I moaned, as I sat back and enjoyed the pleasure.\n\nShe rode my cock for a few minutes, her moans getting louder. Having come three times already tonight, I knew I was in for the long ride.\n\nI asked, \"Can you have an orgasm getting ass fucked?\"\n\n\"Yes,\" she moaned, continuing to bounce on my dick. \"I love your big hard dick in my ass.\"\n\n\"You are perfection, slut,\" I groaned, her ass so tight and her moans so hot, I sensed her orgasm was close.\n\n\"Your slut,\" she moaned.\n\n\"Come for me, teacher slut,\" I demanded, \"come from getting your ass impaled.\"\n\n\"So close,\" she admitted, continuing to take all my cock deep in her ass.\n\n\"Now slut,\" I demanded.\n\nHer hand went to her clit and she began rubbing herself frantically while simultaneously bouncing on my dick.\n\n\"Tell me your plans for me, Master,\" she moaned.\n\nI smiled. She was such a sexy enigma. I said, \"I plan to make as many fantasies come true as possible. Brian, Adam and I are going to fuck all three of your holes at once; we are going to shoot every load all over your face; I'm going to fist you to orgasm; I'm going to find a sweet Latino and have you munch her cunt.\"\n\n\"Oh mother fucker,\" she screamed as she came, \"I love your big fucking dick in my shit hole.\"\n\nShe remained sitting on my dick as her orgasm coursed through her.\n\nI allowed her to enjoy her orgasm, before I lifted her up, bent her over the end of the Jacuzzi and slammed back into her ass.\n\n\"Oh yes, baby, fuck my ass until you shoot your load in my last hole,\" she moaned.\n\nI had never come in a woman's ass before and I suddenly wanted nothing more.\n\nI fucked her as hard as I could, her moans never stopping.\n\n\"Harder, Master,\" she demanded, \"ream my ass harder.\"\n\nI couldn't do it any harder than I was, sweat pouring down my brow.\n\n\"Fill my asshole with your cum,\" she demanded, her nasty tongue so fucking sexy.\n\nA few more hard deep thrusts and I grunted, spewing my cum inside her tight ass.\n\n\"Yes,\" she moaned, her ass somehow getting tighter, \"fill my shit hole.\"\n\nI kept pumping until I was completely spent, before falling backwards into the Jacuzzi.\n\n\"God that was amazing,\" I muttered, completely spent, as she too sat in the Jacuzzi.\n\n\"I'm exhausted,\" she said.\n\n\"We fucked each other to utter exhaustion,\" I said.\n\n\"I've never been fucked so thoroughly in my life,\" she admitted.\n\n\"I hope not,\" I laughed.\n\nShe moved to me and kissed me with tenderness. After all the intense fucking, this was a complete turn of events... so intimate.\n\nThe kiss lasted a couple of minutes before she broke it and said, \"Sorry, I need to pee.\"\n\nI smiled, \"I probably should too.\"\n\nShe got out of the Jacuzzi and went to the bathroom. I watched her naked body, from behind, until she disappeared.\n\nI got out, grabbed a towel and dried off.\n\nWhen she came out, now in a robe, she walked to me and asked, \"Want to stay the night?\"\n\n\"You probably wore me out too much to walk home,\" I joked.\n\n\"Good,\" she nodded. Leaning in and kissing me again. \"Go clean up and come join me in bed.\"\n\n\"I just realized that is the one place we haven't been yet,\" I smiled.\n\n\"Hurry up,\" she said, with one last kiss.\n\n\"Yes, Ms. Champlin,\" I smiled.\n\n\"Good boy,\" she quipped back, slapping my ass as I headed to the washroom.\n\nI went pee, washed up and returned to her.\n\nI smiled.\n\nShe was already asleep.\n\nI got under the covers, slid myself against her and draped my arm over her.\n\nAs I too drifted into slumber I wondered if she could keep to her word and be my slut for the rest of her time here.\n\nI hoped so.\n\nEither way, the past few hours were the most amazing in my life.\n\nShe surprised me when she turned around and looked me in the eyes. \"I can't believe I fucked a student.\"\n\n\"I can't believe I fucked a teacher,\" I responded, before adding, \"you're my first, if you don't count Ms. April.\"\n\n\"You fucked the engaged intern?\" she asked.\n\nI asked, \"She's engaged?\"\n\n\"She was,\" she replied.\n\n\"Didn't seem to be when she was sucking my cock in the bathroom at a college party,\" I shrugged.\n\n\"I never liked her,\" she said.\n\n\"Trust me,\" I smiled, \"you are way hotter than her.\"\n\n\"And sluttier,\" she smiled.\n\n\"And indeed sluttier,\" I nodded.\n\nShe yawned. \"Sorry, I'm falling asleep.\"\n\n\"I fucked you to exhaustion,\" I said, as she moved her head to my arm, cuddling in to me.\n\n\"You did,\" she nodded. After a pause, she said, \"Even though I got a little drunk, I meant everything I said.\"\n\nI smiled, \"Ms. Champlin, don't worry, until you get on that plane you are my submissive.\"\n\nAnother yawn. \"I'm completely yours, Joey.\"\n\nI promised, \"Tomorrow you get gang banged or experience your first cunt.\"\n\n\"Why not both?\" she asked.\n\n\"You really are an insatiable slut,\" I laughed softly.\n\n\"For two more days anyway,\" she smiled, closing her eyes.\n\n\"Get some rest, my pet,\" I whispered, \"tomorrow is going to be a great day.\"\n\n\"Yes, Master\" she mumbled, already fading.\n\nI closed my eyes too, looking forward to tomorrow as I tried to recall all her fantasies.\n\nI would try to make her gangbang fantasy come true. I would spank her, something I had never wanted to do, yet wondered what it would be like to have her over my knee. Finding a girl for a lesbian encounter could be a challenge, although I loved a challenge and the idea of watching her eating pussy was motivation enough.\n\nI would have to look into glory holes in the area, and the odds of finding a she-male probably wasn't overly likely, although fuck that would be hot.\n\nWhat else was there?\n\nChrist, I couldn't remember all of her fantasies, but I was going to try and make as many as possible come true.\n\nShit... my dick was growing again.\n\nDown boy!\n\nWe still have two more full days....\n\nTHE END\n\nThat could be the end of the story, or it could be a three part story.\n\nPotential further chapters:\n\nMy Submissive Teacher: Gangbang\n\nMy Submissive Teacher: Kinky Stuff\n\nMy Submissive Teacher: Lesbian 3some\n\nMy Submissive Teacher: Orgy\n\nJasmine 2015 "
    ],
    "authorname": "silkstockingslover",
    "tags": [
        "teacher",
        "student",
        "anal",
        "milf",
        "submissive",
        "stockings",
        "oral",
        "voyeuristic",
        "fantasy",
        "wild"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/my-submissive-teacher-3-hole-slut"
}
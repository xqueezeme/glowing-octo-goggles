{
    "title": "Unforgivable",
    "pages": [
        "Tallahassee, Florida\n\n\"Bianca? Honey. I'm sorry, but the answer is 'no',\" her mother said, doing her best not to let the irritation show.\n\n\"Dad would let me go!\" her 12-year old daughter threw back in her mother's face in a very snotty tone of voice.\n\nColby Delaney was 35, and after getting married just a month after turning 21 and staying with her ex-husband for 10 long years, she'd been single and on her own for the last four. She'd been pregnant when her then-boyfriend, Cole Delaney, offered to 'do the right thing' and marry her. Confused and feeling completely alone, she said 'yes'.\n\nIt wasn't for a lack of effort on her part that they'd ended up getting divorced. It was more Cole's need to be with other women. He, too, had been just 20 years old when Colby got pregnant, and he'd only been with one other girl before her. Colby had never been with anyone else, and as curious as she often was, in her mind, the words 'til death do us part' meant something. They obviously meant something else to her ex-husband.\n\nOver the last several months Colby strongly suspected that Cole was doing drugs. If it was 'only' marijuana, she'd still be concerned because of Bianca, but her gut told her this was much more serious. She had no proof, and Colby wasn't going to spend the small amount of free time she had following her ex-husband around looking for it. Still, she couldn't help being more than a little concerned every time he came by to take their daughter for the weekend.\n\nShe did her best to never, ever criticize him in front of Bianca, but she'd 'let 'er rip' behind closed doors with him several times in the last year. The reason was simple. As serious as his revolving door of women was, and Colby's suspicions of drug use, the one thing she knew he was doing was letting their 12-year old daughter go places with a friend her age that neither of them had any business going. \n\nColby hadn't been a model child herself, but even she would have never thought of going to a party where alcohol was available until she was 16. That didn't make her some paragon of virtue, and she had, after all, 'gotten knocked up' because a very cute, very dangerous-looking boy had proved to be too much of a temptation to resist. Even so, she'd never resented a single day of being a mother; even like this one where Bianca was doing her best to guilt her mom into letting her go out with just one other friend and no adult supervision.\n\n\"Honey? You know the rules. Sara can come over here or you can go to her house, the place where her parents will also be, but you cannot go out by yourself or...\"\n\n\"I won't be going by myself!\" her daughter nearly yelled before Colby could finish talking.\n\n\"Or with a friend your age.\"\n\n\"But why not?\" her daughter demanded to know.\n\nColby hated using 'because I said so' as a reason, so she tried again to explain, hoping that this time she might get through.\n\n\"There are too many things that can happen that you're not ready for, okay?\" her mother gently said. \"You just have to trust me on...\"\n\n\"I'm not a child!\" her 12-year old child insisted.\n\nFirmly but still politely, Colby told her daughter that wasn't going to happen.\n\n\"Fine! Then when Dad comes to pick me up, I'll just ask him, and he'll let me go, because HE loves me!\" Bianca shot back.\n\nIt was Cole's weekend to have their daughter, and as much as Colby wished she could keep him out of Bianca's life, he had a legal right to see her. Colby had no proof that he'd let their daughter go to a party with high-schoolers the previous weekend, but she was almost certain it had happened. \n\nSo when he came to pick up Bianca the following evening, Colby let her go out to his car then shut the door.\n\n\"Cole?\" she began.\n\n\"Save it,\" he told her, cutting her off at the knees. \"I don't need another lecture from you on how to be a good parent. Got it?\"\n\nColby took a deep breath to help her remain calm then said, \"Evidently you do because good parents do NOT let 12-year old girls go to 'keggers'. Ever!\"\n\n\"Jesus Christ, Colby! Lighten the fuck up already,\" he snarled. \"It's not like we didn't drink when we were kids.\"\n\n\"Listen to yourself, Cole. You just equated what we did at 16 or 17 with something a 12-year old might do. You can't possibly believe that's okay!\"\n\n\"Bianca didn't even drink, for Christ's sake! So get off my case!\" he told her, the anger rising inside him.\n\n\"Let me put it this way then. If that, or anything like it, ever happens again, I will get the police involved and I will sue for sole custody. I'm not threatening you, Cole. I'm making a promise,\" she said as calmly as she could.\n\nHer ex-husband just shook his head and said, \"Don't ever threaten me, you bi...\"\n\nBianca opened the door to ask what was taking so long and her father's facial expression changed completely.\n\n\"Oh, hey there! Your mother and I were just talking, sweetie pie. I'll be right out, okay?\"\n\n\"Fine! Just hurry up, okay?\" his daughter replied before slamming the door.\n\n\"This behavior just recently started, Cole. And it started when you let her go to a place she had no business going to. You opened Pandora's Box and now I'm paying the price for your unwillingness to tell our daughter 'no'. So I'm pleading with you to start being a parent and stop trying to be her BFF. Please?\"\n\n\"Pandora's Box? Oh, that's rich! There you go gettin' all high and mighty now that you got yourself a...college education!\" he spat.\n\nColby was on the verge of having put herself through school by taking online courses at night after working all day.\n\n\"Cole. Please?\" she asked again as nicely as she could.\n\n\"You know what your problem is?\" he said. \"You need to get laid.\"\n\nThis time it was Colby who shook her head.\n\n\"Just do the right thing, Cole. Please?\"\n\nHer ex didn't bother replying. He just snorted then turned around and left. \n\nColby walked to the front of the house and looked outside, and sitting in the front seat of his car was a woman who looked like she might be 19. She was smoking...in the car...and that's when Colby grabbed her phone and got as much on video as she could. Nothing she saw was illegal or grounds to reduce Cole's visitations, but it was a start.\n\nAs the car drove away, Cole's final words really hit home as Colby tried to remember the last time she'd gotten la...made love...with a man.\n\nBut between working full-time, going to school, and raising a daughter, she didn't have time for such things. She could count on one hand the number of dates she'd had in the last year, and none of them had resulted in a second date let alone anything even close to lovemaking.\n\nAs badly as she wanted to find someone to love her, there simply wasn't any time. But with just two weeks left until her last set of finals, Colby could finally see a light at the end of the tunnel.\n\n\"Please, dear Lord, don't let that light be a freight train,\" she said to herself as Cole's tires squealed, sending a shiver through the now-frightened young mother.\n\nAs she got ready for bed around midnight, she looked at herself in the mirror, and thought she still looked okay for a woman of 35 who'd been under so much stress for so long. And if getting flirted with was any indication of her desirability, she had to be at least reasonably attractive as men regularly did so or even outright hit on her at work.\n\nThen again, the quality of patrons at the local IHOP wasn't necessarily reflective of the kind of men she was interested in, but it did feel good to know she was at least still considered attractive enough for that to happen.\n\nHer shoulder-length hair was a very dark brown, bordering on black, and her blue eyes and beautiful smile still attracted a lot of attention. She did her best to take care of her figure, and although she wasn't the size 4 she'd been before getting pregnant, she still wore a size 8 very comfortably. \n\nHer tummy was nearly flat, her C-cup boobs were still holding their own, and although her legs weren't what they once were, they were still shapely and didn't have a trace of cellulite, something she dreaded like a disease; one whose infection turned legs into a disgusting kind of 'cottage cheese'.\n\nColby shivered at the thought of having to wear pants or floor-length dresses to hide something like that, then sighed heavily as she wondered if she ever would meet anyone even close to the kind of man she often dreamed about. \n\nShe didn't have any kind of checklist, nor did she expect perfection. Any man who was at least attractive enough (to her) who was otherwise kind, gentle, and hardworking\u2014and who would willingly take on a soon-to-be-teenage daughter\u2014would be more than adequate. It wasn't that she was looking to settle for 'adequate', it was more an awareness that she wasn't 25 anymore, so finding someone close to her age with even those reasonable 'qualifications' was likely going to prove to be a real challenge.\n\nAs she brushed out her hair, she soon forgot about her social woes and began thinking and then worrying about her daughter. It took her nearly an hour to fall asleep, and she had to be up at 6am in order to get to IHOP by seven. Saturdays were her best tip days, and that was especially true during the morning when retired senior citizens who tipped well went to breakfast.\n\n*****\n\nSaturday Morning just across town.\n\n\"What can I make you for breakfast, sweetheart?\" his mother asked cheerfully.\n\n\"I'm good, Mom. I'm gonna finish this cup of coffee then go for a run.\"\n\n\"With nothing else on your stomach?\" she asked with great concern.\n\nHe tried not to laugh as he explained yet again how he never ate before a run, and that eating first made him queasy.\n\n\"I'll be fine, Mom. I promise,\" he told her.\n\nDrew Gillis was 24 and had just finished Air Force flight school and was now a basically qualified F-22 Raptor pilot. He was home on 30 days leave pending his first assignment to Hickam Air Force Base in Hawaii, and spending some time relaxing with his parents back home in Tallahassee, Florida.\n\nHis dad was legally his step-father, but Drew had never once referred to him as anything but his dad. His biological father had been abusive and an alcoholic, and when Drew was in the first grade, his father moved out leaving the boy heartbroken and inconsolable.\n\nToo young to understand, Drew Barnes's (his name at the time) ability to focus had been severely impacted, and as a result, he'd been held back a year. But the following year his mother met then married Martin Gillis, the man Drew not only called Dad but who'd willingly adopted him and turned his life around by giving the young boy more love and attention that first year than he'd received in his previous eight.\n\nIt wasn't until Drew was around 18 and looking through an old family album that he realized how much more attractive his mother was than his dad. Drew had been a very smart kid and finished high school with a 3.81GPA and a still-resectable 3.67 at the University of Florida where he was an ROTC student all four years. But it didn't take being a genius to know that his mom had been the actual genius. \n\nShe'd seen in Martin Gillis something much more valuable than his looks. He wasn't 'un' attractive, but his mother, Sybil, was a very beautiful woman, and Drew had been the lucky inheritor of her genetic gift. Even now, all these years later, Sybil still loved her husband dearly, and Drew had also been the recipient of all that came with that in terms of being raised in a loving, stable home.\n\nAs he sat there paging through the album, he realized he must have at least been subconsciously aware of that as he thought about how the prettiest girls in school had rarely ever caught his eye. Well, unless there was something else about them that he liked, and Drew liked girls who were studious, smart, and able to carry on a conversation. His friends ribbed him about it a lot, but he took it all in stride and often answered as though he were Popeye.\n\n\"Hey, I yam what I yam, alright?\" he'd say before trying to do the Popeye laugh.\n\nWhether or that was the reason why, Drew would gladly trade looks for brains (up to a point) any day. He had nothing against the 'hotties', but if they were hot and empty-headed, there was no way they'd ever turn his head, and that had held true all the way through college where he'd gone out with girls who were shocked when he asked them. And in a few cases, they'd been even more surprised when he'd said 'yes' as they jokingly suggested they should go out sometime.\n\nWith flight school now behind him, he wasn't necessarily looking for a life partner yet, but he was in a place where, should he meet the female equivalent of someone like his dad, he wouldn't pass her up simply because he was too young. One of the many things his dad had taught him was that love came around how and when it came, and while choice was involved, it often seemed like a kind of mystery with a will of its own that did its thing without regard to anything else.\n\nIt was then that his dad walked in and poured himself a cup of coffee and asked Drew if his mom was giving him a hard time about running on an empty stomach again.\n\nDrew watched his mother's reaction and only smiled.\n\n\"I see no reason to stand here and be insulted by the men I love,\" she said as though she were pouting. And yet she kissed one of those men before leaving the kitchen.\n\n\"You excited about getting to your first squadron?\" his dad asked as he took a sip of coffee.\n\n\"Yeah. I'm really looking forward to it. It just seems like there's still so much left to learn, you know? You spend all that time mastering the basics only to find out you have more to learn than learned the entire time you were in flight school.\"\n\n\"Well, even flight school is a kind of basic training, right? And basic training only...\"\n\nMarty leaned over and said, \"Wait for it...trains people to a...basic...level of proficiency.\"\n\n\"Okay, Dad. Way to state the obvious,\" Drew said with a laugh.\n\n\"All I know is I'd have given my right n...\"\n\nHe stopped, smiled, then said, \"My right arm to fly.\"\n\n\"Yeah, but you did four years in the Army and spent most of that time in Ranger regiments. I'd say that's nothing to scoff at.\"\n\n\"Oh, definitely. I'm very proud of my service, Drew,\" his dad replied. \"And yours, by the way. I'd just have loved to be able to go to college and then maybe OCS...sorry. That's OTS to you...and then flight school. Back then, there was no such thing as an F-22 or F-35, but we still had F-14s, F-15s, F-16s, and F-18s, and oh how I'd have loved to be a Top Gun!\"\n\n\"Well, not everyone is fortunate enough to have a great dad like me who's worked so hard to make sure his son could go to college.\"\n\nMartin's parents had been very poor, and he'd used the Army to qualify for the GI Bill then put himself through college while working part-time, as well. Since then, he'd done very well, and thought it was a privilege to help his son get a college degree. \n\n\"I appreciate that, son, but you did all the hard work. You got through high school, college, ROTC, and flight school. All I did was write checks.\"\n\nHis dad laughed, but Drew didn't.\n\n\"Without those checks I'd have had to work almost full-time, and I don't know if I could have hacked it.\"\n\n\"Ah, come on. You'd have found a way,\" his dad told him, knowing how proud his son was of him, too.\n\n\"Regardless, I'm very grateful, Dad, and now I'm gonna go hit the bricks,\" Drew announced as he finished his coffee. \n\nThen he leaned a little closer and said, \"As soon as I see a man about a horse.\"\n\nHis dad laughed then said, \"Don't forget to use that spray your mom puts in there, because while you may not believe this, your shit really does stink!\"\n\nDrew then laughed even louder just as his mom came walking back in.\n\n\"I heard that, Martin Gillis,\" she told him.\n\n\"Well, it's true,\" he said in his defense.\n\n\"Don't believe a word your father tells you, honey,\" his mom said with a smile. \n\nWhen her husband gave her the eye, she smiled at him and said, \"Even if he is occasionally correct.\"\n\nAs Drew went to 'take care of business' he once again thought about how lucky he'd been. There was no doubt in his mind he'd won the lottery, and now his early, chaotic past was nothing but a blur he rarely ever thought about. To some degree, his dad was right. He had worked hard, but without the two people in the kitchen, none of it would have been possible. \n\nDrew didn't bother turning around to check, he knew his mom was sitting on his dad's lap, and there was a very good chance they were canoodling as usual.\n\nJust before he turned the corner to go down the hallway, he heard his mom say, \"Martin! Stop that!\" with a laugh.\n\n\"That is exactly what I want,\" he said to himself with a smile of recognition just before opening the bathroom door and locking it behind him.\n\nDuring dinner that evening, Drew's dad asked him if he had any big plans his first night back seeing how it was the weekend.\n\n\"Plans. Ha! Now that's funny!\" he said, knowing exactly how his dad would finish the thought.\n\n\"I don't care WHO you are!\" came the expected reply.\n\nHis mom dutifully laughed, and Drew just smiled and shook his head.\n\n\"If you're staying in, I should probably warn you the neighbor boy's been having parties when he's parents are out of town for awhile now.\"\n\n\"Timmy? Little Timmy is hosting parties?\"\n\n\"He's not so little anymore, Drew,\" his mother said. \"He's 18 and a senior in high school.\"\n\n\"No kidding. I don't know why that surprises me so much,\" Drew replied.\n\n\"Probably because you've been away at college and flight school while 'little Timmy' grew up,\" she said.\n\n\"Do his parents know or maybe just not care?\" Drew asked.\n\n\"To tell you the truth, we're not really sure. Your mother and I think there's 'big trouble in little China town' next door.\"\n\nDrew laughed at the reference to the old Kurt Russell movie then shook his head.\n\n\"Not everyone's as lucky as I am, right?\" he told his parents with a smile.\n\nHis mom reached over for her husband's hand and said, \"We're all very fortunate, aren't we?\"\n\nLater that evening Drew was upstairs in his childhood bedroom reading a hardcover book. He'd always loved to read, but even in college he'd been forced to read things that were required for class, and flight school had been very demanding. So reading for pleasure was a simple joy he really missed, and while he was home, he planned to take advantage of the opportunity to read several books on his long list while reviewing unclassified, online tech manuals he could access at home.\n\nBut a few minutes after ten o'clock, the unmistakable sound of a bass subwoofer began thumping. At first, Drew just laughed and thought back to his time in high school and college. \n\nHe'd gone to parties but rarely drank, and even then it was never more than two beers. With one exception. He'd gotten blind drunk once and ended up on his knees 'praying to the Porcelain God'. When he awoke the next morning on his face in his own vomit, that had been the end of his binge drinking days.\n\nAt 11pm, the volume increased, and Drew was wondering why his dad hadn't called the police. He was still awake, so he went downstairs to discuss it with him.\n\n\"I just don't want to be 'one of those people,\" his dad told him. \"They usually wind down a little after midnight, so I think we can tough it out for another hour or two. But if bothers you, you can give the police a call.\"\n\n\"Nah. I think I'll just go crash the party and see if I can talk to Little...to Tim...one on one.\"\n\n\"Good luck,\" his dad said with a chuckle. \"He's not a bad kid, he just needs some mentoring.\"\n\nThere were high school kids sitting out on the porch smoking and...smoking...and all of them had red cups full of beer in hand. Drew was going to knock, but the door was open, and there was too much noise to be heard, so he pulled on the screen door and walked inside.",
        "\"Ah, the bad old days,\" Drew said to himself as he looked around at the familiar scene that played out all across the fruited plain week in and week out. \n\nIt didn't take long to find 'little Timmy' who was now as tall as he was.\n\n\"Drew? What the hell, bro!\" the host, who now went by Tim or 'T-dog' hollered out. \"I thought you were in the Air Force or something, man.\"\n\n\"I am,\" Drew loudly replied. \"I'm just home on leave for a few weeks until I go to my first duty station.\"\n\n\"Cool, bro! Hey, you wanna beer?\"\n\n\"No. No, thanks. But could you and I maybe talk somewhere a little quieter?\"\n\n\"Uh, yeah. Sure. Let's go out back,\" Tim suggested.\n\nThe noise was still loud, but they could at least talk there.\n\n\"So...what up, homie?\" Tim asked as he took a huge swig from his cup then belched loudly.\n\n\"Look. I hate to be...\"\n\nHe thought of his dad's comment then said, \"One of those people, but I can't even hear myself think up in my room.\"\n\nDrew pointed to his bedroom window, and Tim looked up and understood.\n\n\"Oh, dude! I am like SO sorry. Hold on, bro. I'll go turn it down.\"\n\n\"Thanks...bro!\" Drew told him feeling very good about his 'negotiating skills'.\n\nAs he turned around, he saw something that not only seemed out of place, it was just wrong. There was a girl on the back porch who clearly didn't belong there. In fact, she looked like she probably wasn't even a teenager yet. Drew knew 'T-Dog' was an only child, so there was no way this was his little sister, and whoever she might be, this was somewhere she did not need to be.\n\nAs he walked over, he heard the girl laughing and talking to two older boys who looked to be Tim's age.\n\n\"Yo. What up, dawg?\" one of them said. \"You one of T-Dog's bros?\"\n\n\"Um...no. Not exactly,\" Drew told him. \"I'm Drew Gillis. I live next door.\"\n\nThe high school senior looked at him then said, \"You ain't in high school, are you, bro?\"\n\n\"Not for five years or so,\" Drew told him. \"And I don't think this young lady is, either, but for a very different reason.\"\n\n\"You're not a cop, are you, man?\" the other boy asked.\n\n\"No. Just a concerned neighbor,\" Drew told him as the noise level dropped and Tim came back outside.\n\n\"So, Tim. Who is your very, very young visitor?\" Drew asked as he put an arm around 'T-Dog's' shoulder.\n\n\"Oh. Um...she's um...\"\n\n\"My name is Bianca, and you can't tell me what to do,\" the girl announced with an attitude.\n\n\"You're right. I can't. But I can call the police, and they can tell you what to do,\" Drew said in as non-threatening a way as he could.\n\nThe first two guys bolted after one said, \"No way, man. I cannot get busted! My dad will kill me!\"\n\nBianca changed her tune at the mention of the police.\n\n\"Please don't call the cops,\" she pleaded. \n\n\"Okay. Tell you what then. You call your mom and dad and I'll wait here with you until they come pick you up.\"\n\nWhen Bianca hesitated, Drew said, \"Or I'll call the police myself.\"\n\n\"Dude. Chill!\" Tim tried telling him.\n\n\"Tim? I know you're a senior and all that, but this is not...cool. So I'll tell you what. You shut this party down, and Bianca here calls her parents, and no police? Deal?\"\n\nEven half-drunk Tim knew the jig was up.\n\n\"Yeah. Sure thing, bro. That's cool,\" he said before hollering, \"Okay, everybody, that's it. Shut it down! Go home!\"\n\nOnce the music was off and the grumbling from the peanut gallery subsided, Drew said to Bianca, \"I'm assuming you have a phone.\"\n\n\"Yes,\" the girl said in a much more respectful tone.\n\n\"So?\"\n\n\"Okay, fine. I'll call my dad.\"\n\nShe punched the phone then held it up to her ear.\n\n\"Uh-uh. I need you to put it on speaker. You know, so I can be sure your dad actually answers you,\" he said with a smile.\n\nBianca made a face then hung up and called another number. Drew heard it go to voicemail so he asked her to call her mom's number, having no idea she lived somewhere else.\n\n\"No! My mom will KILL me!\" she said as tears welled up in her eyes.\n\nDrew asked the young girl to sit down then gently said to her, \"Listen. I know you won't believe me, but I was your age once, and 'T-Dog's' age, too, for that matter, so I know what it's like to want to have fun. But you're way too young to be at a party where there's alcohol.\"\n\n\"But I haven't been drinking! I promise,\" she said, as though that was the only issue.\n\nDrew was close enough to her that he'd have known if she was lying, and there was no hint of beer on her breath.\n\n\"I'm glad. But you still have to call your mom or...\"\n\nHe pulled his phone out then said, \"I call 911.\"\n\n\"No! Please don't do that!\" Bianca begged, now on the verge of tears.\n\n\"Okay. Then you make the call to your mom. And...leave it on speaker, okay?\"\n\n\"Okay. Fine!\" she said, the attitude back.\n\n\"Bianca? What's wrong?\" Drew heard a concerned female voice say. \n\n\"I'm not in trouble,\" her daughter said even as she looked at Drew with hopeful eyes.\n\n\"Where are you? Where's your father and why are you calling me at...?\"\n\nColby glanced at her clock and saw the time then got even more concerned.\n\n\"I'm...at...Tim's house,\" Bianca said.\n\n\"Tim? Who is Tim?\" an increasingly-worried mother asked with no small amount of irritation.\n\nBianca looked at Drew with pleading eyes, so he held out his hand until she gave him the phone.\n\n\"Ma'am? Hi. My name is Drew Gillis. Your daughter is at a party where...\"\n\n\"Oh, my God! Are you a police officer? Is my baby okay?\" Colby, who was quickly getting out of bed asked, the distress in her voice almost palpable.\n\n\"She's fine, and no, I'm not a police officer. I live next door, and the music got so loud I came over to talk to...Tim...and...\"\n\n\"Wait? Who is this Tim and how old is he?\" she demanded to know as she started pulling her clothes on.\n\n\"Ma'am? Could we maybe discuss all of this when you get here?\"\n\n\"Exactly where is 'here'?\" Colby asked with an edge to her voice.\n\n\"I am SO grounded for life,\" Bianca said quietly as she sat with her arms folded.\n\nDrew gave her the address and told her they'd be out front waiting.\n\n\"That's...that's only a few blocks from where my ex-husband lives,\" Colby said when Drew told her.\n\nHe looked at Bianca who finally told him, \"I walked. Okay?\"\n\nColby heard that then said, \"Will you stay on the line with me, please?\"\n\n\"Of course. I'd be happy, too.\"\n\n\"And what did you say your name was again?\" she asked.\n\nHe repeated his first and last names, and she told him, \"Mine's Colby, and I should be there in less than 10 minutes.\"\n\n\"Sure. And please be careful. Your daughter really is safe, okay?\" he said, wondering whether Colby was a first or last name.\n\nColby calmed down a little then remembered to thank him.\n\n\"I'm just glad I could help,\" Drew said.\n\nHe heard the sound of doors opening and closing just before Colby said, \"Okay, I'm in the car now and on my way.\"\n\nOnce she was out of the driveway she asked Drew if he had children.\n\n\"Oh, no. I'm not even married,\" he told her with a laugh.\n\n\"Oh. I'm sorry. You sounded older and very mature. No, wait. That came out wrong,\" she said almost with a laugh. \"Older doesn't mean you have to be married. I'm just a little rattled right now.\"\n\nDrew laughed politely and told her she had every right to be as he motioned for Bianca to follow him around to the front of the house.\n\nIt was warm and humid, typical for the middle of May, and Bianca was swatting gnats with her hands as they walked.\n\n\"I'm two weeks away from finally finishing college, I work full-time, and my 12-year old daughter is giving me fits,\" Colby said, forgetting the phone was on speaker.\n\n\"I heard that, Mom!\" her daughter called out.\n\n\"I'll take us off speaker,\" Drew said as he tried not to laugh. \n\nHe put the phone up to his ear then said, \"You really have you hands full.\"\n\n\"And Bianca's father, my ex, is a child himself. I don't know exactly what's going on, but I'd bet everything I own he's behind this somehow,\" she said.\n\nWhen Drew didn't reply, Colby realized what she was doing and apologized.\n\n\"Please forgive me, Drew. You're doing me this huge favor, and I'm complaining like we're old friends or something.\"\n\nHe chuckled quietly then told her that was fine.\n\n\"I talk when I get nervous, and my stomach is in knots right now,\" she admitted. \n\n\"For what it's worth, don't give up. My biological father was a real piece of work himself. He was a drunk and he used to slap my mom around, but she found the greatest man I've ever known, and he's been my dad and best friend ever since.\"\n\nNow it was Drew thinking he'd said too much. He had no idea Colby was tearing up and couldn't talk.\n\n\"Sorry. I had no business saying that.\"\n\n\"No. I...I'm glad you did,\" she replied as she wiped the tears from her eyes with her free hand. \"I'd give anything to find someone like that. I...I think hearing you say that just made me feel so...sorry for myself. Again, I really am sorry, Drew.\"\n\n\"No. Please. I just thought I might have offended you.\"\n\n\"Not at all. I'm just a little sensitive about my life and the way it's affecting my daughter. I know most of this isn't my fault, but I'm still her mother, and I'd...well, if anything happened to her...\"\n\n\"I understand. And for what it's worth, you sound like a great mom. I think Bianca's lucky to have you.\"\n\nBianca heard and rolled her eyes as she continued swatting bugs.\n\n\"Okay, I'm turning down your street now,\" Colby told him a couple of minutes later. \"I can't believe how little traffic there is out here.\"\n\n\"I see headlights,\" Drew said.\n\nColby flashed her brights and he said to Bianca, \"Your mom's here.\"\n\n\"Oh, great,\" the 12-year old said sarcastically.\n\nColby pulled up to the curb, shut the car off, and literally ran to her daughter.\n\n\"You scared me half to death!\" she said as she hugged her the way frantic mom's often do.\n\n\"Mom! Stop! You're embarrassing me!\" her daughter said, more embarrassed to have been caught than to be seen hugging her mom.\n\nShe looked over then let go and said, \"You must be Drew.\"\n\nShe stuck her hand out and Drew shook it.\n\n\"Yes. Hi. Sorry to meet under these circumstances,\" he said with a smile.\n\n\"I cannot thank you enough,\" Colby told him. \n\nDrew smiled as he looked at Bianca whose arms were folded again and said, \"I don't think your daughter is as happy to know me as you are, but as long as nothing happened I can live with that.\"\n\nTim was looking out of the front window, and Colby saw him.\n\n\"Is that the boy who's responsible?\" she asked.\n\n\"Um...yes. That would Tim. AKA...T-Dog.\"\n\nColby took off like shot, and Bianca started begging her mom not to.\n\n\"Mom! PLEASE!\"\n\n\"Get out here...T-DOG!\" she hollered loudly enough that Drew noticed his parents out on their front porch.\n\n\"Is everything okay?\" his dad called out.\n\n\"Well, if this young lady's mom doesn't kill Little Timmy then, yes!\" he called back.\n\n\"You need any backup?\" Martin asked.\n\n\"I don't think so, Dad. But I'll come get you if I do, okay?\"\n\n\"All right,\" came the reply before his parents disappeared back inside.\n\nColby was reading 'T-Dog' the riot act. Drew heard every word, and so did most of the neighborhood as she threatened to call the police, sue his parents, then rip his head off and...\n\nDrew grabbed Bianca and turned her around and asked her a question to keep her from hearing the worst of it as her mom finished venting her spleen.\n\n\"And if I EVER hear your name again...T-Dog, you'll wish to God I never had! Do you understand me?\"\n\nDrew bit his lip to keep from laughing when the boy said, \"Yeah, sure, lady. Just...chill, okay?\"\n\nHis teenage reply brought on one more round of scathing rebuke before Colby came back to get her daughter.\n\n\"So...is there anything else I can do?\" Drew asked.\n\nColby took two long, deep breaths then tried to smile.\n\n\"Not unless your dad has a younger brother you could send my way,\" she said as she tried to smile.\n\nBianca made a 'what does that mean' face while Drew chuckled again.\n\n\"No, sorry. He's a one-of-a-kind.\"\n\nHe saw the way Colby was looking at him, and asked if everything was really okay.\n\n\"Oh, sure. Yes. We're fine,\" she told him. \"I just need to find out what my ex was thinking and...\"\n\nShe stopped then snidely said, \"Him thinking. Yeah, right.\"\n\nDrew managed not to laugh when Colby thanked him again and opened her arms to hug him. Drew smiled and accepted the offer.\n\n\"Thank you so much! I can't tell you how grateful I am.\"\n\n\"I'm just glad Bianca is okay,\" he quietly told her.\n\nAs Colby pulled away, he looked at her daughter then said, \"As you told me earlier, I can't make you do anything, but you have a really amazing mom who obviously loves you a lot, and I think you should try appreciating her and maybe even listening a little more, okay?\"\n\nIt was said gently and with a smile, and to Colby's total surprise her daughter not only didn't come back with a smart-alecky reply, she quietly said, \"Okay.\"\n\n\"Well, I'm gonna go back home and continue my reading,\" Drew said as Colby put her arm around her daughter.\n\n\"It's none of my business, but why on earth is a handsome, single guy your age sitting at home reading on a Saturday night?\" Colby asked with a smile.\n\nIt was the first time Drew really looked at her, and even with just the street lights, he could tell she was a nice-looking woman. Not gorgeous or even beautiful, but she was definitely pretty.\n\n\"It's a long story,\" he said with a little laugh. \"If we ever bump into one another again maybe I'll share it with you.\"\n\n\"I...I think I'd like that,\" she said with a smile of her own before looking at Bianca and asking her, \"You ready to face the music?\"\n\n\"I guess,\" came the subdued reply.\n\nBianca then surprised her mother again when she looked at Drew and said, \"Sorry I messed up your Saturday night.\"\n\n\"It's okay, sweetie. I was glad to help.\"\n\nA third surprise, even a shock, came when Bianca ran the three steps to Drew and put her arms around him.\n\n\"And thank you SO much for not calling the police,\" she said very quietly.\n\n\"Just listen to your mom, okay? She's a lot smarter than you think.\"\n\nDrew couldn't see Colby tearing up (again), nor did her daughter. As they walked away, she just waved to the very handsome young man who'd been so helpful, and Drew smiled when Bianca put her arm around her mom as they walked to their car.\n\nWhen he got home, Drew explained what happened, and his mom hugged him and told him how proud she was of him.\n\n\"You're just like your father,\" she said without so much as a thought about Martin's true relation to her son.\n\n\"Thanks, Mom. That's about the best compliment I've ever received.\"\n\nHis dad only winked before saying, \"Goodnight, son.\"\n\n\"Goodnight, Dad,\" Drew told him before going back up to his room.\n\nIt was about 10:30 on Sunday morning when Drew heard a knock at the front door. His mom answered it, and the next thing he heard was, \"That's my son. Let me get him for you.\"\n\nDrew was already up and on the way, and as he looked through the open door he saw two uniformed police officers.\n\n\"Good morning, officers,\" he said to them.\n\n\"Good morning. We were wondering if you could spare a little time to come with us and answer some questions about last night.\"\n\nSybil Martin was already worried and asked what was going on.\n\n\"Your son isn't in any trouble, ma'am. We just need to get some information from him, and that'll be easier to do at the station.\"\n\n\"Let me just put my shoes on and grab my wallet,\" Drew told them.\n\nHis mother followed him and he assured her this was just routine. Satisfied, she made him promise to call, and when he did he couldn't help but remember that moms would always see their sons as their 'little boys' no matter how old they were.\n\nDrew kissed her cheek then asked her to let Dad know where he was going.\n\nAs they drove, one of the officers told him the Delaney woman was getting a restraining order against her former husband.\n\n\"Who?\" Drew asked.\n\n\"Delaney. Colby Delaney.\"\n\n\"Oh, okay. I didn't know her last name. Thanks.\"\n\n\"Yeah. I guess her ex was strung out on doin' meth so the juvenile went out her bedroom window and walked to the party,\" the other officer explained. \"We just need you to confirm as much of this as you can for us.\"\n\n\"Wow. I didn't know any of that, but sure, I'm happy to answer any questions you have.\"\n\n\"It won't be us, but there'll be a detective there to take your statement,\" the first cop told him.\n\nOne of the officers led him to a room and let him inside where he saw both Colby and Bianca sitting across from a man in a shirt and tie.\n\n\"Drew. Hi,\" Colby said as she smiled and stood up to shake his hand again.\n\n\"Good morning. And good morning to you, too,\" he said to Bianca.\n\nThe detective introduced himself then explained in detail what the officer had only mentioned.\n\n\"Oh, my gosh. Your ex was smoking meth with Bianca in the house?\" Drew asked after hearing the story from the detective.\n\n\"We went there after we left your...T-Dog's place,\" Colby explained. \"I couldn't get anyone to answer the door, so Bianca went back in thought the window she left open and let me in.\"\n\nHer mom gave her daughter the eye then finished telling him what she found.\n\n\"We arrested Mrs. Delaney's former husband and girlfriend. He's being charged with possession, use, and endangering a child. And he had an unregistered firearm in the house to boot.\"\n\nDrew glanced at Bianca who was crying because she knew her father was going to jail.\n\n\"It's not his first offense,\" Colby said quietly as she tried to comfort her daughter.\n\n\"It's not FAIR!\" Bianca said. \"Now I'll never get to see my dad again!\"\n\nNot sure what to say, Drew asked the detective how he could help.\n\n\"I just need you to give me your written statement about everything that happened last night concerning Miss Delaney here and you'll be free to leave. We can give you a ride back if you'd like. Oh, and I'll need to see some ID. Just for verification purposes.\"\n\n\"Or I could take you,\" Colby offered as Drew fished out his wallet.\n\nDrew looked over at her and thanked her and noticed she was actually very pretty. She was nicely dressed and wearing makeup, and her hair was also styled in a way that really added to her overall beauty. She was a far cry from the woman who showed up in shorts and tee-shirt with her frazzled hair in a ponytail some 12 hours earlier.\n\nDrew wrote down everything he could remember, signed it, then handed it to the detective.\n\n\"Okay, thank you, Mr. Gillis,\" the older man said as he shook drew's hand. \"Or should I say...Lieutenant Gillis.\"\n\n\"Lieutenant?\" Colby asked.\n\n\"Yes. This good-lookin' young guy here is an officer in the U.S. Air Force. A first lieutenant to be specific,\" the detective told her.\n\n\"I had no idea,\" Colby replied, even though there was no reason she should.\n\n\"I just finished flight school, and I'll be heading to my first duty station in just under a month from now,\" he told her.\n\n\"Oh, my. Wow. Where? Where are you going?\" she asked with a smile.\n\n\"Hickam.\"\n\n\"What?\" Colby asked.\n\n\"Hickam Air Force Base in Hawaii.\"\n\n\"Hawaii?\" Bianca said, her eyes wide with wonder and surprise.\n\n\"Yeah, it's a tough job, but someone's gotta do it, right?\" Drew said with a laugh.\n\nColby laughed, too, and Bianca asked if she could go with him.\n\n\"I don't think your mom would approve,\" he told her with a smile.\n\n\"Well, you guys could get married, and then we could all...\"\n\n\"Bianca Marie! What is wrong with you?\" her distressed mother asked, cutting her off before she could further embarrass her.\n\n\"Are you married?\" Bianca asked with a normal, 12-year-old-girl smile.\n\n\"No. I'm not married,\" Drew told her.\n\n\"And now I'll just go slither out of the room,\" Colby said, her eyes now open wide as she looked at Drew apologetically.",
        "\"No, it's fine,\" he assured her. \"I mean, who wouldn't want to go to Hawaii, right?\"\n\n\"See, Mom?\" Bianca said.\n\nThe excited look on her face didn't last long when her mom looked down at her.\n\n\"Okay! Fine!\" she replied in her huffy voice. \"I'll stay in boring Tallahassee.\"\n\nThe detective thanked them all, shook Drew's hand, wished him the best of luck and thanked him for his service.\n\n\"You, too, Detective,\" he told the older man who held the door open for all of them.\n\nWhen they got to Colby's car, Bianca asked if he could ride with her in back. Her mother almost answered for Drew but held her tongue.\n\n\"It's okay with me if your mom doesn't mind,\" he told her.\n\n\"Yes! Can he, Mom? Please?\" she asked, nearly begging.\n\n\"Are you sure?\" Colby asked him.\n\n\"Sure. Bianca looks like she could use some company.\"\n\nColby laughed then quietly said, \"After last night she could probably use a friend, too, and that would not be me quite yet!\"\n\n\"Just give her time,\" Drew replied just as quietly before waiting to open Colby's door.\n\n\"Well, thank you very much, kind sir!\" she told him. \"Or should I say...Lieutenant?\"\n\nHe did the same for Bianca whose eyes lit up as a man opened her door for the first time.\n\n\"What do we say, honey?\" her mom reminded her.\n\n\"Sorry. Thank you!\"\n\n\"My pleasure...ladies,\" he told them both as Bianca slid in and scooted over.\n\nColby barely got a word in edgewise on the ride back as Bianca peppered Drew with endless questions about what plane he flew and what Hawaii was like and why he didn't have a girlfriend.\n\nHe did his best to answer them all truthfully and told her, \"As to a girlfriend, well, I just haven't met the right...girl...yet.\"\n\n\"You're too old for girls!\" she told him.\n\nColby was all smiles watching her daughter smiling and interacting with Drew.\n\n\"If she gets too annoying, Drew, just let me know,\" Colby said at one point.\n\n\"Never! This girl isn't annoying at all. She's just a...jibber-jabberer!\" he answered while looking at Bianca with 'crazy eyes' who giggled.\n\nColby teared up almost instantly knowing it had been months since the last time her daughter had giggled.\n\nAs they pulled up to the house, Drew thanked Colby for bringing him back. \n\n\"I thought it might be nicer than riding in a squad car,\" she told him with a smile.\n\n\"Yeah, and I got to hang out with this munchkin,\" Drew said before going in for a tickle, hoping Bianca wasn't too old for such things.\n\nHer shrieks of laughter only added to her mother's tears who was looking for a tissue in her purse.\n\n\"Mom! What's wrong?\" Bianca asked when she noticed.\n\n\"Nothing, honey. I...I think I just got some mascara in my eye. That's all.\"\n\n\"Both of them?\" her daughter asked.\n\n\"Okay, fine. I'm just so happy to see you being your old self again, okay?\"\n\n\"I uh, I should probably get out,\" Drew said, suddenly feeling very out of place.\n\n\"I'm sorry, Drew. You've been nothing but helpful, and I'm once again exposing you to all this family drama,\" Colby told him.\n\n\"I don't remember much about it, but I do know what real drama is, and trust me, this isn't even close,\" he said in the kindest way possible.\n\nHe opened the door, said goodbye, then shut it and waved.\n\nThe car moved then stopped, so Drew went to see what was wrong.\n\nThe front window came down, and Colby looked up and smiled.\n\n\"Everything okay?\" he asked.\n\n\"I...well, I...we...we were wondering if you...would you maybe like to...\"\n\n\"Have dinner with us?\" Bianca called out.\n\n\"Bianca!\" her again-embarrassed mother said.\n\nDrew chuckled, poked his head back in then said, \"You know what? That actually sounds very nice. When are we talking about?\"\n\n\"Is...tonight okay?\" Colby asked with a little wince. \"I have to work tomorrow morning and I have finals to study for, so...\"\n\n\"Sure. That sounds great. What time and where?\" Drew asked as Bianca balled up her fist and said, \"YES!\"\n\nA very-relieved Colby gave him her address and suggested six o'clock.\n\n\"I'll be there, and what can I bring?\" he asked.\n\n\"Nothing. We're just both, you know, so grateful and...thankful...and...\"\n\nColby was more nervous than she could remember being in years, and she knew the reason why. Drew was even nicer than he was handsome, and in spite of his age, she found herself very attracted to him. She'd nearly stepped on the gas again after stopping, but now that she'd asked him to dinner and received a 'yes' in reply, she was slightly less nervous.\n\n\"My pleasure,\" he said again with a smile before quickly poking his head back in and making eye contact with Bianca.\n\n\"And you back there! Be nice to this pretty lady, okay?\"\n\n\"I will! I promise!\" Bianca said with a happy smile.\n\n\"Pretty lady. We need to get your eyes checked,\" Colby said, her tummy all aflutter.\n\n\"No, sorry. I have 20/15 vision, so that's not gonna um...fly,\" the new pilot told her.\n\nIt wasn't all that funny, but Colby laughed more than was called for then said, \"Thank you yet again, Drew, and we'll see you this evening.\"\n\n\"Yes, you will,\" he told her before doing the quick look thing one more time and saying, \"and so will you!\" to Bianca.\n\nDrew waved goodbye and even laughed when Bianca made a face after putting hers right up to the glass. He did the same and both of them made another face and laughed even more.\n\n\"Drew is really nice, huh, Mom?\" her daughter said as they drove away.\n\n\"Oh, yes. I...I suppose he is,\" her mom replied as she tried to catch a glimpse of the handsome, young Air Force pilot as he walked up the sidewalk of his parents' home.\n\n\"And he's really tall, huh?\" Bianca added.\n\nColby didn't say anything, but Bianca kept going.\n\n\"Drew is like SO handsome, too.\"\n\nColby smile but only said, \"You need his permission to call him by his first name, okay?\"\n\n\"I bet he'll let me. I think he really likes me. Do you like him, Mom?\" came the barrage of questions.\n\n\"I don't even know him, BB,\" her mom said. \"Besides, he's much too young for me, and he's leaving for Hawaii, remember?\"\n\nBianca got very quiet and didn't say another word on the ride home and went straight to her room when they got there.\n\nColby had to figure out what to make\u2014and what to wear\u2014and didn't have time to sit and talk. It was obvious her daughter had some kind of crush on Drew, and although her mother would never admit it, she was very aware of how attractive he was. And yes, he was also tall and nice and...still going to Hawaii.\n\nNow it Colby who suddenly seemed sullen as she looked in her refrigerator and groaned. The only thing she had was a package of hamburger meat. She had pickles, mayo, and mustard and some nearly-stale buns. There was no money to buy anything else until payday, so even ordering pizza was out of the question.\n\nSo with the issue of what to have for dinner resolved, Colby went and knocked on her daughter's bedroom door and asked if she could come in.\n\nIt took awhile to get Bianca to open up, but an hour and many tears later, Bianca told her mom she loved her for the first time in much too long, and Colby held her daughter tight and told her she loved her very much, too.\n\n\"You wanna help me decide what to wear?\" Colby asked when she stood up.\n\n\"Is this like a date or something?\" Bianca asked.\n\n\"What? No. Of course not. I...I just thought I'd, you know, wear something a little nicer. That's all.\"\n\nBianca smiled then surprised her mom yet again when she said, \"Okay! But you have to help me choose, too, okay?\"\n\n\"Deal!\" her mother said, a happy smile on her face and warmth in her heart.\n\nAt the Martin home, Drew's mother noticed something almost immediately.\n\n\"Someone's in a good mood,\" she told her son.\n\n\"Yeah, I kinda am.\"\n\n\"So I guess you weren't charged with any crimes then,\" his mom said, which he knew was code for 'tell me everything'.\n\nDrew laughed then explained what happened.\n\n\"Oh. She sounds like a very nice lady with a girl on the crossroads of how her life will unfold.\"\n\nDrew laughed again then said, \"I'm still amazed at how smart you've become since I was Bianca's age.\"\n\nSybil laughed, too, and told him it was funny how that happened before asking, \"So this is just a 'thank you' kind of thing?\"\n\n\"Dinner?\"\n\nIt was so obvious his mom didn't reply.\n\n\"Yeah. Colby is just really grateful.\"\n\n\"Well, she should be. Lord only knows what could have happened had you not intervened. And the behavior of her ex-husband is just...unforgivable. I don't know the man, but if everything you told me is true, he belongs in jail.\"\n\n\"I can't disagree, Mom. And while I'm no bleeding heart, I can't help but wonder if he'd have a dad like mine, then maybe his life would have turned out very differently.\"\n\nDrew's dad walked in and asked, \"How come my ears are burning?\"\n\nSybil laughed, kissed him, then said, \"They should be. Drew was just mentioning what an amazing father you are.\"\n\nMartin bowed slightly and said, \"Martin Gillis. At your service!\"\n\nDrew laughed and Sybil said, \"Pfft!\" before laughing herself.\n\n\"Hey! I've never had any complaints about my service before,\" he told his wife who faux gasped.\n\n\"Okay, you two. I'd say 'get a room' but for you guys, 'give it a rest', is the better choice.\"\n\n\"You're mom is hot, Drew. What can I say?\"\n\n\"You got me there, Dad. Mom is beautiful.\"\n\nSybil kissed her son on the cheek and thanked him before telling her husband about their son's big date.\n\n\"Oh?\"\n\n\"It isn't a date, Dad. It's just dinner.\"\n\n\"She's an older woman,\" Sybil whispered loudly enough for Drew to hear. \"With a 12-year old daughter.\"\n\n\"Ah, yes. Okay, I saw her on the lawn. Well, kind of anyway, and now all of the pieces of this puzzle are coming together.\"\n\n\"There aren't any pieces and there isn't any puzzle, Dad.\"\n\n\"Okay. If you say so,\" his dad replied with a wink to his wife who smiled and asked if he needed anything.\n\n\"No. I just came in to see my beautiful wife,\" he told her before giving her a kiss.\n\nHe turned to leave then stopped and turned back around.\n\n\"So...how much older?\" he asked.\n\n\"Bye, Dad!\" Drew told him.\n\n\"Okay, okay. I'll mind my own business.\"\n\nAs he walked away, both Drew and his mother said, \"Yeah. Right!\"\n\n\"I heard that!\" Martin called back.\n\nSuddenly, Drew needed to ask a question.\n\n\"Mom? Did you think Dad was handsome when you first met him?\"\n\n\"What kind of question is that?\" she asked.\n\n\"I don't know. Just curious.\"\n\nShe sat down at the table with him then told him, \"I saw nothing but good in your father from the first time we talked. He was everything I'd ever dreamed of in a man, and once I saw the way he interacted with you, I fell in love with him.\"\n\n\"He rescued us both, didn't he?\"\n\nHis mom smiled then put her hand on Drew's. \n\n\"I was even more emotionally scared than you were, sweetheart. The man I was married to back then was...evil.\"\n\nHe saw his mom tearing up and regretted having asked the question.\n\n\"Mom. It's okay.\"\n\n\"I know. It's okay because of the man sitting in the den playing Texas Hold 'Em online. He quite literally saved me, and yes, he rescued us both, and I love him more than life itself. But to answer your question, I never really even noticed how handsome he was because he had such a beautiful soul.\"\n\nShe squeezed his hand then asked whether or not that answered his question.\n\n\"It did. Thanks, Mom,\" he said as he stood up before bending over to give her a kiss on the cheek.\n\n\"So what are you going to wear?\" his mom asked.\n\nDrew only raised an eyebrow and his mother backed down.\n\n\"Okay. Sorry. I get it. It's none of my business!\" she told him with a smile that said much more than her words.\n\n\"It's just dinner, Mom,\" he said again the way people do to reinforce a point.\n\n\"Okay. Have fun!\" she told him. \"But don't forget that love sometimes moves in mysterious ways its wonders to perform!\"\n\n\"Someone's Bible knowledge needs a lot of work!\" was the last thing she heard before he went upstairs.\n\nBy the time Drew showed up at Colby's, she was still wearing the same thing she'd worn to the police station. In the end, she didn't have a lot of nice things, and what she was wearing was just about her best. So she'd helped Bianca choose, and she was now wearing a pink top and black stretch pants, and her mom told her she looked very cute.\n\n\"Am I too young to be pretty?\" Bianca asked after thanking her mother for the compliment.\n\n\"Well, no, but it's just that 'pretty' has a different meaning.\"\n\n\"What kind of different meaning?\" \n\nColby thought for a moment or two then said, \"I'm almost a college graduate, and yet I can't answer a simple question like that. So, I guess 'I'm not sure' will have to do.\"\n\nSatisfied, Bianca let her off the hook with one word. \"Okay.\"\n\nAt 5:30, she opened the pack of hamburger, and when she went to press out the first patty, Colby nearly gagged.\n\n\"Oh, no. This is not good,\" she said, knowing there wasn't enough to salvage to make three burgers. She could make one normal patty or two small ones, but those were her only choices as she threw away the spoiled meat after carefully separating it from the good.\n\nThere were celery stalks and peanut butter in the refrigerator and enough cereal for Bianca in the morning, and it was also payday, so Colby knew they'd get by again. Just barely, but they would make it.\n\nJust before the doorbell rang, Colby put the patties on the bottom half of a bun just to see, and as she expected, they looked like silver dollars rather than hamburger patties. Bianca ran to answer it while her mother stood there on the verge of crying as panic and then bitter acceptance washed over her.\n\n\"Hey, there!\" she heard Drew saw to her daughter.\n\n\"Can I call you Drew?\" she asked, causing her mother to cringe as she walked toward the door.\n\n\"What my daughter meant to say was, \"Hi. It's very nice to see you again. Won't you please come in?\"\n\nBianca blushed for the first time in quite some time as her mom said, \"And it really is good to see you again, Drew.\"\n\n\"Thank you, and you, too.\"\n\nHe looked down at Bianca and told her, \"You, too, and yes, you may call me Drew.\"\n\nHe bent down then said, as though it was a secret, \"Besides? What else would you call me since Drew is my name?\"\n\nBianca laughed and said, \"I don't know!\"\n\nHe stood up then moved closer to Colby and stopped.\n\n\"Hi,\" he said again.\n\n\"Hi,\" she said back.\n\nThey looked at one another then almost shook hands before Colby laughed and extended her arms.\n\n\"That was awkward,\" Drew said as he hugged her briefly.\n\n\"Not as awkward as dinner is going to be,\" Colby told him. \"Such as it is.\"\n\n\"It smells good,\" Drew told her as she led him to the kitchen with Bianca staying right by his side.\n\n\"Feast your eyes on...the feast!\" Colby said, trying to laugh and avoid crying.\n\n\"Oh,\" Drew said in a nonjudgmental way.\n\n\"Mom? Is this dinner?\" Bianca asked as she lifted up the tiny little patty on the bun in front of her.\n\n\"I'm afraid so, honey,\" she said before explaining what happened.\n\n\"All right! That's it. We're going out!\" Drew said in his 'I'm in charge' voice as he pointed toward the front door.\n\n\"Yes!\" Bianca said as she grabbed Drew's hand.\n\nColby was so surprised she didn't notice and said, \"What? No. We...we can't ask you to do that. Besides, I can't afford...\"\n\nToo embarrassed to finish her sentence, she just stopped talking.\n\n\"What kind of guy would suggest going out then expect the beautiful ladies he's taking with him to pay?\" Drew said with a serious tilt of his head and one eyebrow raised high.\n\nBianca giggled again then said, \"Yeah, Mom. Who would even do that?\"\n\n\"Not me!\" Drew said, holding his one free hand up as if to say 'I'm not guilty of that heinous crime'.\n\nColby actually laughed then said, her face showing deep concern, \"Are you sure?\"\n\n\"I'm beyond sure. I'm positive. I'm certain. I'm...\"\n\n\"Okay. If you'll stop, we'll say 'yes',\" she told him, a smile appearing on her pretty face.\n\n\"Did you hear that?\" Drew asked Bianca as he bent down. \"Your mom said 'yes'!\"\n\n\"Mom? Can we go to Burger King? Please?\" Bianca started in on her with.\n\n\"Um...who's paying?\" she replied.\n\n\"Oh,\" a briefly-embarrassed Bianca said.\n\n\"How about we go someplace a little nicer than Burger King?\" Drew suggested.\n\n\"But that's where we always go except when we go to McDonalds or Wendys,\" the 12-year old told him.\n\n\"That's because we can't afford to go anywhere else, honey. And we don't go there very often, do we?\"\n\n\"No,\" Bianca quietly replied.\n\n\"Have you heard of Sage?\" Drew asked Colby.\n\n\"It's very expensive,\" came her immediate reply as Bianca gave him a confused look.\n\n\"Not really, and they make everything from scratch,\" Drew informed her with a smile.\n\n\"I don't want you to spend a lot of money, Drew,\" Colby told him sincerely. \"Remember, this was my idea, and you're supposed to eating our food for free.\"\n\nFor the first time, Drew gently touched Colby's forearm, smiled, then said, \"I really enjoy your company, so please let me do this, okay?\"\n\nBianca had big puppy dog eyes that were begging her mom to say 'yes'.\n\n\"Okay. If you're sure.\"\n\nThis time it was Drew who said, \"Yes!\"with a fist pump then asked Bianca for a high five.\n\n\"Is Sage like Burger King?\" the pre-teen asked as they drove there.\n\n\"Not exactly,\" Drew said. \"But you'll be able to find several things you like, okay?\"\n\n\"Neither one of us are picky eaters,\" Colby told him. \"We can't really afford to be.\"\n\nRather than say anything else about money, Drew asked her what she was majoring in.\n\n\"Finance and accounting,\" she told him.\n\n\"Oh, wow. You're a glutton for punishment, aren't you?\" Drew teased.\n\nShe playfully pushed his arm and said, \"Stop that! I like working with numbers.\"\n\n\"Well that makes one of us,\" Drew said as though she was crazy.\n\n\"My mom is really smart,\" Bianca said.\n\n\"I could tell,\" Drew replied.\n\n\"How? How did you know?\" she asked.\n\n\"It's something you get a feel for,\" Drew told her. \"You can just tell when someone is well educated. It doesn't make them better than other people, but they tend to talk differently.\"\n\n\"Oh,\" Bianca said, having no idea whether or not that was true or even why if it was.\n\n\"Do you really think I'm smart?\" Colby asked, knowing Drew was.\n\n\"Yes. And while I'm thinking about it, I also happen to think you're very attractive,\" he told her almost matter of factly.\n\n\"Oh, my gosh. Thank you, Drew,\" she replied sincerely. \"That's so nice of you to say.\"\n\n\"My mom thinks you're really handsome,\" Bianca said as her mother reeled in horror.\n\nDrew was trying to keep from laughing when he saw the look on Colby's face. Her eyes were open so wide she looked hilarious.\n\n\"I...that is not...at no time did I say...\"\n\n\"You said he was handsome, Mom,\" her daughter insisted.\n\n\"Okay, you said he was good looking and I agreed with you, but I never...\"\n\n\"Wait. You think I'm good looking?\" Drew asked, his hand again touching her forearm as he did his best to again keep from laughing.\n\n\"Maybe. A little,\" she said almost defensively as she looked at his hand on her arm.\n\n\"Sorry,\" he said as he pulled it away.\n\n\"I...I didn't mind,\" Colby heard herself saying before she could keep from saying it.\n\nThere was a moment of silence before Colby asked Drew what kind of plane he flew.\n\n\"The F-22 Raptor, the most sophisticated jet in the world.\"\n\nHe didn't bother mentioning that other pilots felt their aircraft were superior whether it was the Russian-made Sukhoi Su-57 or the Chinese-built Chengdu j-20 or the US F-35 Lightning. Some even felt the F-15 Strike Eagle was a better all-around platform, and Drew was still too inexperienced to know firsthand. \n\nWhat he did know was that the F-22 was a fifth-generation fighter that was the first fighter jet to combine super-cruise, super-maneuverability, stealth and sensor fusion all in one. He didn't say any of that, he just gave her a brief introduction to its capabilities in layman's terms.",
        "\"That sounds so amazing!\" Colby said with genuine admiration, even though most of it went right over her head.\n\n\"I'm not bragging or anything, but it really is. I still can't believe I fly Raptors. I could have ended up flying any airplane in the Air Force inventory, and yet I got my first choice, and yes, they are very cool.\"\n\n\"How fast can you go in one of those?\" Bianca asked.\n\n\"Would you believe 1,498 miles per hour?\" Drew said with a smile as he looked at her in the rearview mirror.\n\n\"That's like a race car, right?\"\n\nEven Colby laughed at that.\n\n\"What's so funny?\" \n\n\"Nothing, honey,\" her mom said as she looked at Drew who smiled, causing her to laugh.\n\n\"It's not that funny,\" Bianca insisted.\n\n\"My plane is just a whole lot faster than the fastest race car. That's all,\" Drew told her in a fatherly kind of way. \"We weren't being mean, okay?\"\n\n\"Okay!\" Bianca said as the sign for Sage came into view. \"Hey! There's the Sage place!\"\n\n\"Yes indeed,\" Drew replied as he put on his turn signal.\n\nColby noticed and said, \"Thank you for using your blinker. I can't stand it when people don't.\"\n\n\"Oh, don't get me started!\" Drew agreed. \"They just start slowing down, and boom!\"\n\n\"I know! That drives me crazy!\" Colby agreed back as they both laughed.\n\nThere was a short wait for a table, and as they sat waiting in the lobby, Colby asked Drew if he was excited about going to Hawaii.\n\n\"I want to go to Hawaii!\" Bianca said again.\n\n\"Bianca? Please,\" her mom said as nicely as she could and got a genuine 'sorry' in return.\n\n\"I am. I mean, they have F-22s at Tyndall here in northwest Florida, but I didn't join the Air Force to see the world only to end up back home.\"\n\nHe thought about explaining how the base had basically been obliterated by Hurricane Irma, and that F-22s were only kinda-sorta back. Tyndall was an option, but it wasn't Drew's first (or even second or third) choice. In fact, one of his best friends from flight school wanted Hickam so bad he offered Drew a thousand dollars to swap orders with him. Drew never seriously even thought about it, because, who would give up Hawaii for anything?\n\n\"Table for Gillis?\" a female voice called out interrupting their conversation.\n\nDrew helped Bianca get seated first so she wouldn't jump into a chair before he could offer his help, then he did the same for her mother. Bianca remembered to thank him this time, and her mom did the same as Drew went to sit down across from them.\n\nColby no sooner opened the menu than she gasped.\n\n\"Drew? These prices are...\"\n\nShe looked around then 'loudly whispered', \"Insane!\"\n\nHe smiled and only said, \"Please order anything you like, and don't even look at the price, okay?\"\n\n\"I...I can't not look,\" Colby said as she looked again and shook her head.\n\nJust a burger cost $13, more than she spent for her and her daughter at a fast food joint for everything.\n\n\"We'll just get the burgers,\" she said without even looking.\n\n\"What? No, you will not!\" Drew said with another smile. \n\nHe slid into the chair next to her, and started pointing to the entrees.\n\n\"Look. This Iron-Seared Shrimp and Scallop plate looks delicious,\" he suggested.\n\n\"It looks very expensive,\" Colby countered.\n\n\"Okay, how about the seared salmon or the spice-rubbed tenderloin?\"\n\n\"Money and more money,\" Colby replied.\n\nDrew grabbed the menu without being 'grabby', shut it, then said, \"I'm ordering for you.\"\n\n\"Drew! You can't...\"\n\n\"Ah! Shhh!\" he said as he moved away. \"We'll get three entrees, and Bianca will surely find something she likes among all that.\"\n\n\"What are we getting, Mom?\" her very excited daughter asked as she looked up at her mom's face that seemed frozen and expressionless.\n\n\"A fortune in food,\" she quietly replied.\n\nTheir server came over and introduced herself and asked if they'd decided.\n\nDrew said he had and ordered the shrimp & scallops, the pork tenderloin, and the quajillo half chicken along with a bottle of white wine.\n\n\"And what would you like to drink, Bianca?\" he asked without even looking at her mom.\n\n\"Coke, please!\" she said.\n\n\"Any appetizers?\" she asked in a chipper tone of voice.\n\n\"No. No appetizers,\" Colby told her without looking at Drew.\n\n\"Three bowls of Soupe a L'Oignon,\" he said with a smile, not looking at Colby whose jaw was hanging down slack.\n\n\"Very good. I'll be right back with your soup and your drinks!\" she happily replied.\n\nDrew knew Colby could take anything they didn't eat back with her, but he wasn't about to mention he knew they needed it. He just insisted it was a great way to expose Bianca to new things.\n\n\"Like...the national debt,\" Colby said, knowing her daughter wouldn't understand.\n\nDrew, of course, did get it, and he only laughed.\n\n\"If you can tell me you're not hungry, I'll cancel one of the entrees,\" he said with a big smile on his face.\n\nColby wasn't just hungry, she was nearly shaking from not having eaten anything since breakfast, and that had been a sticky donut at the precinct.\n\nSo the only thing she said was, \"Thank you, Drew.\"\n\n\"My pleasure,\" he replied as he winked at Bianca who tried to wink back.\n\n\"I can never get that!\" she said as she tried holding one eye open while closing the other.\n\nDrew winked each eye several times real fast, and Bianca giggled again, and that helped Colby relax. She even laughed, and when she did, Drew winked at her. And that sent a kind of chill through her body as she realized again how incredibly handsome he was before looking away.\n\nColby knew she wasn't unattractive, but Drew was so far out of her league in terms of looks, that even the age difference didn't let her feel like she was his equal. Of course, this wasn't a date, and there never would be a date, but she found it very hard not to stare at him throughout the course of their meal.\n\nWhen the soup arrived, Bianca very gingerly stuck the tip of her tongue on the soup in her spoon. Expecting an 'eew!', Colby was shocked when her daughter said, \"Mmmm. Yummy!\"\n\nHer mom then took a taste of it, and rolled her eyes heavenward. \n\n\"Oh, my gosh! This is SO good!\"\n\n\"I know, right?\" Drew replied as he got ready to take a second 'bite'.\n\n\"That was a meal itself, \"Colby said as she slurped up the last of it. She wanted to tip the bowl and drain every drop but left a little in the bottom that she couldn't get on her spoon.\n\n\"So what do you like to do, young lady?\" Drew asked Bianca just before their entrees arrived.\n\nJust a year ago, she'd have said, \"Jump rope, play with my friends, and play games on the computer.\"\n\nBut now she said, \"Well, I kind of like boys...\"\n\nShe was grinning when she looked at her mom who was giving her the 'you've got to be kidding' look.\n\n\"Well, I do, Mom,\" she insisted before telling Drew that she liked makeup and clothes.\n\n\"Not school?\" he asked as though he was extremely hurt.\n\n\"I like school,\" Bianca said. \"Kind of. I just don't like the school I go to.\"\n\nColby ran her fingers through her daughter's hair and said, \"She's had a tough time this last year or so.\"\n\nWhen Bianca got a sad look on her face, her mom said, \"But I'm so proud of her.\"\n\nAnd just like that, the smile was back, and Colby was rewarding with Bianca leaning her head on her arm and also squeezing it.\n\nNot wanting to get into a discussion about her ex-husband, Drew noticed their server bringing their food.\n\n\"Here we go!\" he said as everyone set up straight.\n\n\"Okay, three entrees and empty plates so we can pick and choose,\" the young girl said, repeating what Drew had told her when he placed the order.\n\n\"Colby? Would you like a glass of wine?\" he asked.\n\n\"Oh. Um, sure. Yes, thank you. That sounds nice,\" she said. It had been many months since she'd had a glass of wine, and since it was already paid for, she decided to go ahead.\n\nDrew poured it then did the same for himself, then said, \"Cheers!\" but before he could take a sip, Bianca asked if they were going to do a toast thingy.\n\n\"Ah, yes. The toast thingy,\" Drew said with a smile. \n\n\"Colby?\" he asked.\n\n\"I don't have any idea,\" she told him, suddenly feeling 'stupid'.\n\n\"Okay. Um...to...fate. Bringing us together,\" Drew suggested.\n\nColby smile happily and said, \"I'll drink to that!\"\n\n\"Me, too!\" Bianca said as she offered her soda glass to clink with the adults' wine glasses.\n\n\"To fate!\" they all said.\n\n\"Oh, my. That's very good, too!\" Colby said after taking a decent-sized first sip.\n\n\"I'm glad you like it,\" Drew told her. \"I don't drink very often anymore, but when I do, I enjoy a really good glass of wine or champagne.\"\n\nWithin minutes, all three of them had sampled each of the three entrees and announced their favorite. Bianca loved the pork but decided the scallops were too 'fishy'. Her mom told her those were her favorite while Drew cut off a large chunk of chicken and said, \"Mmmm!\" each time he took a bite, getting a laugh from Bianca every single time.\n\nColby let Drew pour her a second glass, but she barely touched it knowing she had to get up early to go to work then start getting serious about her final finals.\n\n\"So what do you want to do once you get your degree?\" Drew asked after everyone was full and the leftovers were being boxed up.\n\n\"Anything that pays better than waitressing at IHOP,\" she told him with a warm smile. Just the one glass of wine on a mostly empty stomach had really hit her, and she felt even better than she had just sitting across from such an attractive man; even a much-younger one.\n\n\"And how about you, Miss Bianca? What do you want to be when you grow up?\"\n\n\"Well...I want to be a makeup artist,\" she announced.\n\n\"Oh?\" her mother replied.\n\n\"Well, yeah. I mean, I love makeup, and that way I could do it all the time and make lots of money!\"\n\n\"Oh, I see,\" her mom replied, not wanting to burst her daughter's bubble.\n\n\"Do you like math and science?\" Drew asked.\n\n\"Not really,\" Bianca told him.\n\nWithout getting preachy, Drew explained why those things were so important.\n\n\"So you mean I could fly a really fast plane like you do?\" she asked, not sure she believed that was possible.\n\n\"Yep. We had two women in my flight school class, and both of them graduated with me. One of them finished at the top of our class, and she's a better pilot than I am,\" he admitted.\n\n\"Cool!\" Bianca said, loving that a woman was better at something.\n\n\"Not that cool,\" Drew said in a way that made Colby laugh.\n\n\"You're so good with her,\" Colby said with genuine sincerity.\n\n\"I didn't get into the details, but I mentioned how my dad turned my life around, and I've always had a special place in my heart for kids who have a...person in their lives...like the man whose DNA I share.\"\n\nHe smiled at Bianca then said, \"Especially silly ones who sneak out of the house and night and go to parties with high school boys.\"\n\nHer pretty face turned red again as she looked up at her mom then said, \"Sorry?\"\n\nColby put her arm around her daughter and told her how much she loved her.\n\n\"I love you too, Mom.\"\n\nDrew watched Colby's eyes get glassy then saw her reach for a napkin. He could tell she was embarrassed and quietly told her, \"I get it. I really do.\"\n\n\"I just worry so much about this one, you know?\" she told him while glancing at her daughter.\n\n\"She won't ever do that again. Right, Bianca?\" Drew asked with a warm, friendly smile.\n\n\"No. I won't. I promise,\" she told him.\n\n\"Does anyone want dessert?\" he asked, hoping to lighten the mood.\n\n\"Me!\" Bianca said immediately.\n\n\"Um...I think we've had more than enough,\" her mom quietly told her.\n\n\"It's not my decision, but I can so see your mom eating a piece of...\"\n\nDrew picked up the dessert menu then said, \"Candy Bar Tort.\"\n\nBefore Colby could respond, Drew read, \"Made with roasted pecans and vanilla ice cream.\"\n\n\"Yum! Can we, Mom?\" Bianca asked.\n\n\"Honey, we've already spent a fortune of Drew's money, so...\"\n\nDrew caught their server's eye and motioned for her.\n\n\"Three candy bar torts, please,\" he told her as Colby just stared at him.\n\nAs an accounting geek, she was keeping track of every dollar and knew they were well over $100 without the dessert or the tip.\n\n\"What? Who eats a meal without dessert?\" Drew said pretending to be defensive.\n\n\"We do!\" Bianca told him. \"We never have dessert.\"\n\n\"We do, too,\" her mom replied. \"Sometimes.\"\n\n\"Mom, a Reese's peanut butter cup isn't dessert,\" her daughter informed her.\n\n\"It is when that's all you...\"\n\nShe stopped then looked at Drew.\n\n\"Sorry. I don't mean to be a Debby Downer. We just don't ever do anything like this.\"\n\n\"Then I'm just that much happier that we came here tonight,\" he told her.\n\nThe way he said those words coupled with what he said sent another wave of something through Colby, and after holding his stare for several seconds she had to look away again.\n\n\"Any plans for summer vacation?\" Drew asked Bianca without thinking.\n\n\"I'm always spend a month with my...\"\n\nBianca realized she wouldn't be spending any time with her father for several years and got very quiet.\n\nTo his, and her mother's great relief, the dessert arrived just in the nick of time.\n\nDrew watched Colby and then Bianca take a bite, and the expressions on their faces told him all he needed to know.\n\n\"This is SO good!\" Colby said as the flavor exploded on her taste buds.\n\n\"Mmmm! I LOVE this ice cream!\" Bianca said after tasting the rich dessert.\n\nEveryone was beyond full when they left, and each of them was carrying a box of leftovers as they went outside.\n\nVery little was said as they headed home. Colby knew this was the end, and even Bianca seemed to understand they would never see Drew Gillis again. When they pulled into the driveway, Drew asked if he could help them carry anything inside.\n\nColby said 'no thank you' but asked Bianca to tell Drew thank you and say good night and take a box with her.\n\n\"I'll be right in, okay?\" she told her daughter.\n\nBianca did what she was told and even tried to give Drew a hug the best she could from the back seat.\n\n\"Night, pretty girl,\" he told her before she got out.\n\n\"Is something wrong?\" he asked Colby once Bianca was safely inside.\n\n\"No. I...I just wanted to thank you. That's all.\"\n\n\"You're very welcome,\" he told her.\n\nShe almost started to open her door but hesitated.\n\n\"You know I'm not gonna let you do that yourself, right?\" Drew told her before opening his in order to come around.\n\n\"Wait,\" Colby said.\n\nDrew closed the door then waited.\n\n\"I...I was just wondering. Why are you being so nice to us, Drew? It's obvious you're a really great guy, but you didn't need to do any of this.\"\n\nDrew sat there for a moment then looked over at Colby and said, \"Okay, I told myself I wouldn't say this, but I feel like I have to.\"\n\n\"Oh, okay,\" she said, expecting something terrible.\n\n\"Initially, I was just doing the right thing. When I saw Bianca at the party, there was no way I could go home and pretend I didn't see her there.\"\n\nHe waited again then spoke.\n\n\"But when I saw you, the two of you at the police station this morning, I don't really know how to explain this, but I had this...this feeling or...\"\n\nDrew laughed then said, \"Wow. I was about to say 'premonition'.\"\n\n\"Premonition?\" Colby asked, still waiting for the 'other shoe to drop'.\n\n\"I'm not some kind of New Ager or anything, so I don't know where this is coming from, but I couldn't shake this feeling that...\"\n\n\"What?\" she asked very quietly.\n\n\"Promise me you won't laugh.\"\n\n\"I promise. Just tell me. Please.\"\n\n\"I...it felt like you and me... No. The three of us. It was like...we belonged together. Or something like that.\"\n\nHe looked right at Colby then asked, \"How weird is that?\"\n\n\"I don't know,\" she replied just as quietly as before. \"How weird does it seem to you?\"\n\n\"The really crazy thing is...it doesn't. At all.\"\n\n\"Drew,\" Colby said. \"You're quite possibly the best-looking guy I've ever seen.\"\n\nShe tried to laugh then said, \"Including actors on TV.\"\n\nDrew laughed, too, but let her go on.\n\n\"And I'm, well, I'm not. That good looking. I'm not even close. And then there's this other little issue of me having a 12-year old daughter, and gee, um...I'm 35 years old. So...that's what makes it weird. To me. Okay?\"\n\nHe sat there and tried to see her in the dim light then finally said, \"So you don't feel anything for me? At all?\"\n\n\"What?\" Colby replied with a nervous laugh. \"What do you even mean? Like in your premonition kind of way?\"\n\n\"Yes. Or...any other way. Am I so bad...I am someone you wouldn't even consider dating?\"\n\n\"Dating? Drew, are you serious?\" she asked, almost unable to believe what she was hearing.\n\n\"I'm trying to be, but you keep asking me questions rather than answering mine,\" he told her with a warm smile.\n\nShe looked back at him then said, \"I'm extremely confused right now.\"\n\n\"Maybe if I were more direct that would help,\" Drew said.\n\n\"Yes, that would be nice,\" Colby said until he started leaning her way. She tried to ask what he was doing, but when his mouth ended up on hers, it made speaking very difficult. Even worse, after a second of quasi-protest, she kissed him back.\n\n\"So, did that help?\" he quietly asked.\n\n\"You just kissed me,\" she nearly whispered. \"Why would you do that?\"\n\n\"Maybe I was wrong,\" Drew replied.\n\n\"Huh?\"\n\nHe laughed then told her he was attracted to smart women.\n\n\"And because I thought you were smart, I found myself attracted to you. And that's why I kissed you. But you don't seem to feel the same way, and that's why I said 'maybe I was wrong'. So...does that help?\"\n\n\"Drew, you're going to Hawaii in less than a month,\" Colby said without answering another of his questions.\n\n\"So you have no feelings for me at all?\" he asked again in a slightly different way, ignoring what she just said.\n\n\"Like you? I...I've had this schoolgirl crush on you since you walked into the police station and smiled at me. And I never have crushes. Ever.\"\n\n\"I want to see you again, Colby,\" he said he reached over and gently brushed her hair back.\n\n\"Bianca must be getting worried,\" she told him as she tried to turn away.\n\n\"Okay. If this isn't working for you, I understand. I just really like you, Colby, and I guess I was hoping against hope you might feel that way about me. But since you don't...\"\n\nDrew stopped talking, turned around, then went to reach for the doorhandles again when Colby grabbed his arm and said, \"Wait!\"\n\n\"Again?\" Drew said with a chuckle as he stopped. Again.\n\nAs he went to turn around, Colby nearly fell on top of him as she nearly climbed over over the gear shift and not only kissed him but almost smothered him.\n\n\"So you do like me,\" Drew said with a smile when she finally let him go.\n\n\"I really, really do,\" she finally admitted. \"But for the life of me I can't understand why you like me.\"\n\n\"If you'll agree to see me again, I'll tell you why? Deal?\"\n\n\"Okay. Yes,\" Colby said very quietly before Drew leaned her way and kissed her one more time. \n\n\"Now let me come get your door and I'll walk you to the porch.\"\n\nColby's heart was racing so fast she thought she might actually die of a heart attack as she watched him go around the front of the car. But she not only didn't, she made it to her front porch where she and Drew kissed one more time for several seconds before she finally went inside.\n\nTo her very great relief, Bianca hadn't been watching. But no sooner did her mom walk in when she started talking about what a great time she had. With Drew. \n\nEverything was 'Drew this' and 'Drew that'. And because her mother was so smitten with this gorgeous, younger man, all she could do was agree with everything her daughter said.\n\nThe problem for Colby that evening wasn't confusion. It was time. She had virtually no free time whatsoever. And blowing off finals wasn't an option. Nor was taking a day off work. She already had more student debt than she could bear to think of, there was a second mortgage on her modest home, and she needed an actual, well-paying job in the very near future. ",
        "So her dilemma was finding time to see Drew, and then there was the tiny little issue of him going to Hawaii in just 28 more days.\n\nThe morning after their first kiss, Drew was up early and out for a run even before his mom was awake. When she offered to make breakfast for him, he gave her a hug and told her he had plans.\n\n\"I hope your plans include eating something!\" she told him, her motherly worry coming through loud and clear.\n\n\"As a matter of fact, it does,\" her son told her with a smile that made her wonder what he was up to.\n\nWhat he was up to was getting to IHOP before Colby. When he pulled in, the parking lot was nearly empty, so he just sat there and waited until he saw her pull in. She saw his car almost immediately and pulled up right beside him and nearly leapt out of her 2012 Nissan Sentra.\n\n\"Drew? What are you doing here at this hour?\" she said as she came around to meet him.\n\n\"This,\" he said as he put his arms around her and kissed her.\n\n\"Oh. Well, in that case, I'm glad you came,\" Colby said with a very happy smile on her face.\n\n\"You look cute in IHOP,\" Drew told her once he saw her uniform.\n\n\"It's what all the girls are wearing this year,\" she said as she pretended she was modeling.\n\n\"Come on. I'll walk you in,\" Drew said as he held out his hand.\n\nColby took it and told him how happy she was to see him and what an unexpected surprise this was.\n\n\"I couldn't wait to see you again. Literally,\" Drew said as he opened the door.\n\nOne of Colby's coworkers and her best friend at the restaurant saw them in the parking lot as the sun was already up, heating the capitol city of Florida.\n\n\"And who might this be?\" her friend, whose name was Ellen, asked with a huge smile.\n\n\"This is Drew. Drew, this is my IHOP BFF, Ellen.\"\n\nThey shook hands and Ellen said, the smile on her face even bigger, \"It is such a pleasure to meet you.\"\n\nShe then looked at Colby and mouthed the word, \"WOW!\"\n\nColby laughed then mouthed back, \"I know, right?\"\n\n\"So what does a guy have to do to get some service around here?\" Drew jokingly asked.\n\n\"In your case, just ask,\" Ellen said, making sure Colby knew she wasn't actually flirting.\n\nEllen was Colby's age, but she didn't look anything like her BFF. She was heavyset, hand short, tousled hair, and a face that was well, less than symmetrical. Even so, were she smart and polite, Drew would have been happy to go out with her. She wasn't someone he'd ever marry, but he would gladly spend time with her under different circumstances.\n\n\"Well then. I'm asking,\" Drew replied, harmlessly flirting.\n\nColby not only wasn't jealous, she loved seeing him be so nice to her friend. Other customers had been downright rude over the time they'd been there together with some making snorting noises or asking her if she knew what a diet was.\n\n\"You go clock in. I'll take care of your new boyfriend's order,\" Ellen told Colby.\n\n\"Oh. Drew and I...were just...\"\n\n\"Crazy about each other,\" Drew said finishing Colby's sentence who had yet another one of those emotional rushes.\n\nAs Drew placed his order, Colby punched the time-clock then went back out to take her first order of the day. But having Drew there proved to be extremely distracting as she either glanced his way or smiled at him every time she walked on or off the main floor.\n\nShe didn't botch anything too badly, but she was having trouble remembering who ordered what at each table. After delivering her third order, and with no one else waiting, she went over to Drew and asked how long he was planning on being there.\n\n\"Trying to get rid of me already?\" he teased. \"Oh, I know. Your boyfriend is showing up and you need me to go, huh?\"\n\n\"Ha! Yes. That's it. And then he'll need to be out by noon so my other boyfriend can show up,\" Colby teased back.\n\n\"I won't stay once I'm finished. I just needed to let you know I'm really serious about wanting to see you, Colby.\"\n\nShe almost mentioned Hawaii, but she was so taken with Drew she couldn't bring it up. Not yet, anyway, even though it would be harder to do so with each passing day. All 28 of them.\n\n\"I'm glad you did. It was an incredibly pleasant surprise,\" she told him.\n\nDrew knew he thought she was attractive, but the more time he spent with her, the more beautiful she became to him. It didn't matter that he could easily find many other women a lot better looking than Colby Delaney. What mattered was the way she made him feel every time he looked at her. The old saying about beauty being in the eye of the beholder was very true, and as he sat there beholding her, Drew thought she was as beautiful as any woman he'd ever known.\n\n\"I really need to get back to work,\" she said as an older couple walked in.\n\n\"What can I do to help?\" Drew asked.\n\n\"Huh?\" Colby replied as she told the seniors she'd be right with them.\n\n\"What can I do? Pick up Bianca from school? Help you study? I know your time is limited, so if I can make more of it so we can spend it together, just let me know, okay?\"\n\n\"Gimme a sec, okay?\" she said before leading the man and his wife to a table where she took their order.\n\nOn her way back, she poured them both a cup of coffee then topped Drew off and said, \"I have a huge paper due in my accounting 401 class. If you could review for grammar errors, that would save an hour or so.\"\n\n\"Yeah. Sure. Just help me log in,\" Drew said.\n\nColby took his phone, found the website, then entered her username and password then opened the document. \n\n\"The editing tools are self-explanatory, but let me know if you can't figure something out.\"\n\n\"You got it, beautiful,\" he told her. \"Now back to work!\"\n\nColby smiled then said, \"You have no idea how much I want to kiss you right now.\"\n\n\"Oh, I think I might,\" Drew told her with a smile.\n\n\"Okay. See you soon,\" she said, still wondering why a guy that good looking was so into her. She didn't believe in magic, and she had no money for anyone to swindle her out of, so all she could do was trust that Drew really did like her.\n\n\"But why?\" she asked herself again before picking up and order of bacon, eggs, and toast.\n\nDrew carefully proof read every word, and checked her calculations. He was very impressed by her writing ability, and although he was no math (or accounting major) he was able to understand what she was doing. By the time he finished, he'd found only two small errors and was even more impressed with her intellectual abilities.\n\nAs he watched her coming and going, Drew was picturing her in a business suit working in an office where she could earn enough to support her daughter without spending 16-18 hours a day doing it.\n\nBut an even more appealing image was one of Colby waiting for him to come home each day where they and Bianca would spend the evening having dinner, talking, and being a family. That he was even thinking that way said a whole lot about the kind of woman Colby was, because this was the first time in his life he'd ever felt this way about anyone, and the truth was, he really barely even knew her. But even so...\n\nWhen she had another free moment, she stopped by to ask how it looked. Drew told her what he found, and also let her know how sexy 'smart' was. \n\n\"So you are very sexy to me,\" he said with a smile that nearly caused a moisture issue in a certain part of her body.\n\n\"It's funny, but as a kid I didn't like school all that much. But at some point I realized I was either going to have to get myself in gear or...marry a really rich guy.\"\n\nShe smiled, but Drew knew she could never do that even before she said it.\n\n\"But I'd never even go out with a guy just because he had money let alone marry him, so going to school online seemed like my only way up and out of the mess I got myself into. Not that Bianca is a mess.\"\n\nDrew laughed and told her he understood then asked if he could do anything else to help.\n\nShe wanted to say, \"Yes. Stay in Tallahassee,\" but knew that wasn't possible.\n\n\"No. And you've done so much already. Not just the paper, but little stuff like keeping my daughter from doing something she might never recover from.\"\n\nDrew put $20 on the table for a $10 meal then stood up.\n\n\"Will you get fired if I kiss you before I go?\" he asked.\n\n\"Maybe, but it'll be so worth it,\" Colby said with a happy smile as he leaned in and kissed her softly.\n\n\"Can I see you tonight? Maybe to just help you study?\"\n\n\"Drew, you don't have to do that,\" she said, knowing she wanted to see him at least as much as he did her.\n\n\"Tell you what. I'll pick up something for us to eat, and stop by around six. Will that work?\"\n\n\"Yes, but you still owe me an explanation,\" Colby reminded him.\n\n\"I thought I already provided it.\"\n\n\"How? When?\" she asked.\n\n\"When I told you 'smart is sexy'.\"\n\n\"Wait. That's it?\"\n\n\"Well, you are very attractive, but if you weren't smart, you wouldn't be sexy no matter how beautiful you were,\" he told her as though he was stating a fact anyone should know.\n\n\"Colby? Table five over here!\" a younger man called out.\n\n\"Oops. Gotta go. Can't afford to lose this job\u2014or the golden parachute that comes with it,\" she said, smiling happily.\n\n\"See you around six?\" Drew said as she walked away.\n\n\"I'd like that very much, and so would a 12-year old girl I know!\" she called back.\n\nFor the rest of that week, Drew did almost exactly the same thing each day with the exception of reviewing a paper. Everything else was a matter of prepping for finals, and he did his best to quiz Colby once he understood what she needed to know. Each time she got an answer right, she also got a nice, long kiss to go with it. But if she got one wrong, her 'punishment' was 'having' to give Drew one making learning more fun than she ever thought possible.\n\nWith Sunday being the only day Colby had free, the three of them spent the next one together from early in the morning until late at night. Bianca was in bed by 9pm, her pleas for extra time having fallen on deaf ears.\n\nBy ten, Drew was in Colby's locked bedroom and in her bed making love to her for the first time. She'd asked to turn the light out, because as much as she wanted to be with him and look at his gorgeous body, she was afraid of having him see hers.\n\nBut when he assured her she was perfect just the way she was, she relented. Then when he continually told her how each part of her body was beautiful she nearly cried. And when he finally made love to her after bringing her to two shuddering, mind-blowing orgasms with his fingers and tongue, she did.\n\n\"Hey, what's going on? Does it hurt?\" he asked after going very slow at first.\n\n\"No. It's amazing,\" she told him as her tears fell.\n\n\"Then what is it?\" Drew asked as he ran the back of his hand along her cheek.\n\n\"I...it's...you're...\"\n\nWhen she began sobbing, Drew stopped and sat up next to her.\n\n\"Please tell me what's going on here, okay?\"\n\n\"I'm afraid to say it,\" she told him as she tried not to make any noise that Bianca might hear.\n\n\"Afraid? Of me?\" Drew asked as he stroked her long, silky hair.\n\n\"What? NO! Of course not.\"\n\nHe kissed her softly, smiled, then said, \"Tell me, Colby. Please?\"\n\nShe looked away, took a long, slow deep breath, then said, \"Hawaii.\"\n\nThe answer was so obvious it made him feel like an idiot when she said it. He was well aware that he was leaving, and it was on his mind all the time now. But Colby's life was here in Tallahassee, and no sane woman would uproot her life\u2014and her child's\u2014to follow some guy she'd only known for a month halfway around the world.\n\nKnowing there was nothing he could do or say to assuage her fears, Drew lay down next to her and just held her.\n\n\"I'm sorry,\" she said a minute or so later. \"We have three weeks left, and I'm ruining that by freaking out about what might or might not happen after that.\"\n\n\"I'm sorry, too,\" Drew told her. \"I never intended to hurt you, Colby.\"\n\n\"I know. I know,\" she said immediately as she tried to smile. \"I'm a big girl, and I'm here with you by choice. I...I guess I just didn't realize I could fall this hard this fast for someone.\"\n\n\"Same here. I never once thought I'd meet anyone when I was home let alone...fall in love with her,\" he told her, knowing that would only make things worse.\n\n\"What? Drew...you can't mean that,\" she said in the nicest way.\n\n\"Yes, I can, Colby. I know it's supposed to take months or years to really fall in love, but I can't change the way I feel about you.\"\n\n\"And I thought I was the only fool here,\" Colby said very sweetly as she tried not to start crying again.\n\n\"Do you want me to leave?\" Drew asked as he ran his finger across her lips.\n\n\"No. I'd much rather you to finish what you started,\" she said with a different kind of smile. \"Just go slow, okay, because, in case you didn't know it, you are really big.\"\n\n\"Well, you are really beautiful,\" he told her as Mr. Happy began to grow again.\n\nMoments later he was back inside her and within minutes, Colby had to stifle a loud scream as she came yet again as he loved her completely, his thick shaft raising up and pushing against her love button on each stroke in and out.\n\n\"That...was...amazing!\" she quietly gasped as he lay on top of her still inside her.\n\n\"You are amazing,\" Drew told her as he kissed her softly.\n\n\"Do you maybe want to take a shower before you go?\" Colby asked hopefully.\n\n\"Is it big enough for two?\" Drew asked as he wriggled his eyebrows up and down.\n\nColby laughed loudly then said, \"Shhh! Shhh!\" even though Drew wasn't making any noise.\n\nShe got up then took his hand and said, \"Come with me!\"\n\nHe did, and he also came with her again a half an hour later.\n\nOn the ride home, Drew's mind was racing, and then, out of the blue, the answer hit him. Or at least a potential answer.\n\nIt was only 2100 or 9pm in California where one of his best friends from flight school was home on leave with his family.\n\nHe got out his phone, found the name, then hit dial.\n\n\"Jeremy. Drew Gillis.\"\n\n\"Drew! What's going on in sunny Florida?\" his fellow Air Force lieutenant and Raptor pilot asked.\n\n\"A lot, actually,\" Drew replied. \"Listen, you still interested in Hickam?\"\n\n\"Is the Pope Catholic? Does the big bear...\"\n\n\"Yes, and yes,\" Drew said cutting his friend off with a laugh.\n\n\"And?\" Jeremy asked.\n\n\"And we need to both make a call tomorrow. Together.\"\n\n\"Wait. You want my orders to Tyndall?\" his friend asked, not sure he was hearing correctly.\n\n\"In a bad way.\"\n\n\"Jesus. Who is she?\" he asked with a laugh.\n\n\"Her name's Colby, and I got it bad for her.\"\n\n\"Halla-freain'-lou-yah!\" Jeremy hollered out. \"You know what, Gillis? You're alright. I don't care what our flight instructors said about you!\"\n\nDrew laughed then wondered what kind of chance there was of getting the swap. Jeremy was also single, so it was really just a matter of the guy (or gal) with the authority to make the decision being willing to change their orders. No money had been spent, so this should be an easy fix with 'should be' being the key words.\n\nThe following morning, Drew went to IHOP and spent what little time he could with Colby but didn't mention his 'grand plan' knowing it might get shot down.\n\nAround noon, he called Jeremy, and they agreed Drew would call Air Force personnel and begin the hunt for that one person with the power to change their fate. Once he had him or her on the line, Drew would bring Jeremy in on a conference call.\n\n\"Just don't say we were involved in a three-way. Ever,\" Jeremy 'warned' his friend with a laugh.\n\nIt took less than 15 minutes of being transferred around with most of that time spent explaining and re-explaining what he was trying to do. But after getting the right person on the phone, Drew was shocked when he said, \"It's no skin off anyone's back. Just get the other officer on the phone to tell me that's what he wants, too, and I can fix this in a few minutes.\"\n\nJeremy came on seconds later and confirmed that he wanted Hickam more than he'd wanted Raptors. That comment brought a snort, but it was followed by, \"Okay. That's it. Your news orders will be available online no later than tomorrow.\"\n\n\"That's it?\" both of the young officers said.\n\n\"I don't I believe I stuttered,\" came the reply with a chuckle.\n\nBoth of them thanked this mysterious, all-powerful administrator profusely before they terminated his end of the call.\n\n\"Dude, I SO owe you!\" Jeremy told him. \"I'm talking grass skirts, luaus, and white, sandy beaches!\"\n\n\"And I'm talking about having some time to see if this woman is as amazing as I think she is.\"\n\nIn the end, both of them were extremely satisfied with the change in orders, just for very different reasons.\n\nThat night, Drew insisted that Colby make time to go to dinner with him, and after protesting about how much he'd already spent on her and her daughter, she gave in.\n\n\"I can't seem to say 'no' to you, can I?\" she said very sweetly.\n\nDrew laughed then told her he was glad that was true, and hinted that he had some very important news to share.\n\n\"You're going to make me wait, aren't you?\" she playfully pouted.\n\n\"It'll be worth the wait. I promise,\" he told her without giving her any additional information.\n\nBack home, and before dinner, Drew's dad mentioned he thought things seemed to be getting serious with this new, older woman in his son's life.\n\n\"They are, Dad. In fact, I have some news so share with you and Mom.\"\n\nWhen Sybil came in, Drew told them he was staying in Florida.\n\nHis mom nearly cried as she started hugging him, but his dad just stood there and waited.\n\n\"So how is that happening?\" the former Ranger asked.\n\nDrew explained the process, and having served in the military, that made sense to him.\n\n\"Well, I can't say I'm disappointed you'll be close to home,\" Martin told him.\n\n\"Does this have anything to do with the nice, young lady we saw in the neighbor's yard?\" his mom asked with a twinkle in her eye.\n\n\"It does, Mom,\" Drew admitted. \"It kind of has everything to do with that.\"\n\nFor the next several minutes, the three of them discussed what was going on, and in the end, both of his parents agreed this was their son's life, and his decision to make.\n\n\"Just don't rush into anything,\" his dad warned. \n\nMartin laughed then said, \"Then again, the fact that you went to the trouble of getting your orders changed tells me you're looking for the time you need to avoid rushing into anything.\"\n\nDrew only smiled as his mom said, \"As long as I can see my son every month, I'm VERY happy about this! And should I end up being a grandmother to a sweet, 12-year old girl, well, that would just be icing on the cake!\"\n\nDrew almost said something about the word 'sweet' where Bianca was concerned, but in all honestly, he'd seen nothing but that quality in her since 'The Episode' as he and Colby had been calling her late-night excursion.\n\n\"She's a really sweet girl, Mom. She just needs some love and mentoring. You know, like a certain eight-year boy did not that long ago.\"\n\nWhen he said that, Sybil reached for her husband's hand, kissed it, then said, \"Best decision I ever made.\"\n\n\"Me, too, honey,\" Martin told her before leaning over and kissing her.\n\n\"Okay. I'm outta here!\" Drew said. \"You two are incorrigible!\"\n\nHis parents laughed, and Drew knew his mom had scooted onto his dad's lap when he heard that familiar giggle, and that only reinforced his desire to get to know Colby and Bianca even better.\n\nWhen Drew showed up with Chinese takeout, Colby thanked him as she always did, and felt no small amount of guilt even though she knew Drew loved doing things for her and her daughter.\n\n\"So are you going to make me wait until after dinner to tell me this big news?\" she asked after hugging him. They still hadn't kissed in front of Bianca even though she was sure they had.\n\n\"Let's sit down and then we'll talk, okay?\" he suggested after giving Bianca a hug who asked what news her mom was talking about.",
        "\"Well, it looks like we'll both find out together,\" Colby said as they went to sit down.\n\n\"This is good!\" Bianca announced after trying Kung Pao Chicken for the first time ever.\n\n\"That's my favorite,\" Drew told her.\n\n\"Okay, so...spill it!\" Colby finally said, unable to wait another minute.\n\n\"Well, you know about Hawaii, right?\"\n\n\"Drew! Of course I know about Hawaii,\" Colby said.\n\n\"And you know that's not the only place that has F-22s.\"\n\n\"Uh-huh. And your point would be?\"\n\n\"Well, Tyndall also has Raptors. And it's only about two hours away.\"\n\nColby's heart started beating fast as she said, \"And?\"\n\n\"And a friend of mine from flight school, a guy who's wanted orders to Hawaii more than anything...\"\n\n\"Drew!\" she said again.\n\n\"He and I made some phone calls today, and since I want to stay here now, we uh, we kind of swapped.\"\n\n\"Wait. You're not going to Hawaii?\" Colby asked, barely able to breathe.\n\n\"Nope.\"\n\n\"And you're going to Tyndall?\"\n\n\"Yep!\"\n\n\"Oh, my...\"\n\nJust like in the car, only worse, Colby launch herself at Drew. This time, the chair, with both of them in it, went over backwards and when it hit the floor, Colby freaked out.\n\n\"Are you okay? Please tell me you're okay?\" she said as Drew opened one eye and then the other.\n\n\"I...think so,\" he said.\n\nHe then smiled at her and the moment he did, she started kissing him. It wasn't for 3-4 seconds that she realized Bianca was watching and suddenly stopped.\n\nWhen she looked over her shoulder her daughter was standing up, her hand over her mouth, and she was laughing so hard it made Colby laugh. That made Drew laugh and that cause Bianca to come over and join them on the floor where they all kept laughing until they couldn't laugh anymore.\n\n\"So you're okay with that?\" Drew asked once Colby slid off of him and he could breathe again.\n\nShe gave him the skunk eye then started laughing again.\n\n\"I can probably live with it,\" she told him, as though it was no big deal, before kissing the younger man she'd fallen in love with again.\n\n\"Yeah?\" he asked as Bianca sat there smiling from ear to ear.\n\n\"Uh-huh,\" Colby told him with the best smile Drew had ever seen.\n\n\"Well. Then let's finish eating!\" he said before getting up then sitting back down.\n\n\"I want more Kung Pao Chicken!\" Bianca said the way she used to talk before things went south in her life.\n\nColby was on the verge of crying again, but those would have been tears of joy as she realized the significance of this news. The man she loved was staying in the local area, and she was almost finished with college. And perhaps most importantly, it seemed like Bianca had been pulled back from the precipice of disaster before getting too close to the edge.\n\nColby passed all of her finals, and Drew was there with Bianca for her graduation; a graduation that took place with people Colby had never seen before with one or two exceptions she'd met on test or lab days. \n\nDrew not only wasn't surprised when the older woman he was falling in love with was announced as a 'cum laude' graduate, as she received her diploma, he stood up and hollered out, \"We love you, Colby!\" with Bianca hollering along with him and waving like fools.\n\n\"I love you, too!\" she called back as she held up her long-awaited-for diploma.\n\n\"So what now?\" Colby asked after going out for a celebratory dinner, courtesy of her new boyfriend.\n\n\"We spend every minute we can together before I have to report in, then we see each other as often as possible after that.\"\n\n\"You know, with my degree, I could work anywhere,\" she casually threw out.\n\n\"Oh. Like say...Panama City?\" \n\nPanama City was right next door to Tyndall, and Drew smiled at her and said, \"Hmmm. I kind of like that idea.\"\n\n\"Just...kind of?\" Colby asked with a smile.\n\n\"I'll never try and tell you what to do, Colby. But nothing would make me happier if we were together.\"\n\n\"As in...together together? Like maybe in the same apartment? In Panama City?\"\n\n\"Bianca has the summer off now, right?\" Drew reminded her.\n\n\"Wait. What are you guys talking about?\" Bianca asked, suddenly aware it might be something important.\n\n\"Nothing. At least not yet,\" her very happy mom replied.\n\n\"Are you guys like in love or something?\"\n\n\"Or something, right, Drew?\" Colby said with a smile.\n\n\"Or maybe something not just...something?\" Drew suggested, knowing it made very little sense and not caring at all.\n\n\"We shall see!\" his girlfriend replied before leaning over and kissing him.\n\nA week later, the two of them having kept their word to spend every possible moment together, Colby was looking at city, county, and federal jobs in the Panama City area.\n\n\"How much does a GS-7 make?\" she asked Drew during one such search.\n\n\"I don't know, but it's easy to find out.\"\n\nWithin seconds, they found the GS pay scale, and that gave them both a pretty good idea.\n\n\"With what I make, we could really do quite well on that. For that matter, we'd do just fine on my money alone,\" Drew mentioned.\n\n\"Wait. I thought people in the military lived on food stamps,\" Colby told him.\n\n\"Seriously?\" Drew replied before realizing some people had no idea how much anyone made. They heard reports on TV about very junior enlisted folks with several kids and assumed that applied to nearly everyone.\n\nWhen he showed her the DFAS website with the military pay scale, she said, \"That's way more than a GS-7 makes.\"\n\n\"And that's just my base pay. Here, let me show you.\"\n\nAfter explaining housing allowances, food allowances, flight pay, etc., Colby was stunned.\n\n\"I...I had NO idea,\" she said very quietly.\n\n\"And yet you loved me when you thought I lived on food stamps,\" Drew teased.\n\n\"I never even thought about it. Ever,\" she admitted. \"But if I had, I'd have just assumed I would have to work for us to even get by.\"\n\n\"I like the sound of 'us', by the way,\" Drew told her.\n\nWhen Colby smiled, he kissed her, and she said, \"Yeah. Me, too.\"\n\n\"So, have you decided where you might want to live and/or work?\" he asked.\n\n\"Drew, if I did move, I'd want an apartment off-base. Just in case.\"\n\nDrew didn't laugh as he explained there was no housing allowance unless they were married, and on-base housing was also only for married personnel. Plus, Irma had damaged so much of the base, there might not be much housing, if any, even left there.\n\n\"Oh, I never thought of that,\" she said. \"But I'm more than willing to relocate so we can be together. My family lives up in Michigan, so there's nothing here to tie me down, and it's not like we're moving to, I don't know, Hawaii.\"\n\nDrew laughed, kissed her again then said, \"Then let's go find an apartment.\"\n\n\"We just need to get my house cleaned up and rent it out. And if things work out like I think they will, we can sell it down the road.\"\n\n\"Do you know how sexy smart is?\" Drew asked before kissing her again.\n\n\"I may never understand why you like me so much, but I've learned to accept it.\"\n\nDrew got serious then sat down in front of her.\n\n\"Colby? I do like you. A lot. But well, the truth is I've fallen in love with you.\"\n\nTears welled up in her eyes so fast it surprised Drew.\n\n\"I love you, too, Drew,\" she told him before sliding over on his lap to hug him.\n\n\"I know another couple that does this all the time. In fact, I think it's time you and Bianca met them.\"\n\n\"Will they like me?\" a now-worried, 35-year old Colby asked.\n\n\"They will. I promise you that. And they're going to love Bianca, too.\"\n\nThe following evening, Colby and Bianca met Martin and Sybil for the first time, and by the end of dinner, it felt like they'd all known each other for years. They discussed their plans when Bianca was watching something on TV, and after getting nods of approval they sat down with her and told her what they'd be doing.\n\n\"Really? I get to leave my crummy old school?\" she said, surprising them both.\n\n\"Well, yes. You'd be going to a new school somewhere near Panama City,\" her mom told her.\n\n\"Then let's go!\" Bianca said as she hugged her mom and Drew.\n\nOn the ride home, Bianca surprised them again when she asked Drew a question.\n\n\"Drew? Will you be my new dad?\"\n\nThe question had two possible meanings, so he gently probed to see which one she meant.\n\n\"Well, since my dad is going to be in prison for a long time, and since you're like the nicest man I've ever known, and since you love my mom, would you be my dad?\"\n\n\"I want you to know that I love you, too, Bianca,\" Drew told her first.\n\nHe saw her smiling in the mirror then said, \"And nothing would make me happier, honey.\"\n\nWhen they got home, Bianca asked if she could hug him again, and he told her she could do that anytime for any reason.\n\n\"Okay,\" she said with a sweet smile before hugging him tight.\n\n\"Drew?\" she said when she let go of him.\n\n\"Yes?\"\n\n\"Before you, you know, saw me at the party? I was so sad and unhappy all the time.\"\n\nHe didn't say anything. He and Colby just listened.\n\n\"Well, ever since, I feel happy again. I mean, I'm sad about my dad, but I don't think he really even loves me.\"\n\nShe wasn't sad this time, she was just explaining how she felt.\n\n\"But I know you love me, because of the nice things you do and the way you talk to me. And that makes me really happy.\"\n\nFor the first time since he was a little boy, Drew Gillis teared up.\n\n\"Wow. That may just be the nicest thing anyone has ever said to me, sweetheart,\" Drew told her as he dried his eyes.\n\n\"Don't be sad!\" Bianca told him. \"My mom and I both love you, right, Mom?\"\n\n\"Yes, we do, sweetie. Very much. And Drew and I love you even more, okay?\"\n\n\"See, this is why I'm happy all of the time now,\" she told them as they all hugged each other.\n\nBy the time Drew had to report in, he and Colby had found a very nice, furnished, three-bedroom apartment they leased for six months. She quit her job at IHOP so they could get her house ready to rent, and while Drew was in-processing to his unit, Colby started getting serious about finding a job. But because Bianca was out of school and still too young to be left alone all day, it took her mom awhile to find something she could do from home.\n\nShe found a part-time job she could do using her laptop that paid $20 an hour. It was only 20 hours a week, but it was ideal for their new situation. It let her work when she wanted, spend time with her daughter as needed, and still have dinner ready by the time Drew got home.\n\nThe first time Colby saw him in a flight suit, she nearly swooned. \n\n\"You look so masculine and handsome!\" she told him before whispering, \"I want to rip this thing off you and...\"\n\n\"Patience, Grasshopper,\" he told her with a smile as Bianca tried to figure out what they were doing.\n\nBy the end of July, Drew was established in a fairly normal routine in his squadron, one he really enjoyed being part of, and flying the Raptor was a dream come true. But so was coming home to Colby who was genuinely excited to see him each and every day. \n\nAs much as Drew enjoyed both of those things, and he really, really enjoyed them, watching Bianca become a polite, well-mannered young lady was perhaps his favorite thing in life. Like his own dad, Drew knew he would never be her father, but each time he saw some positive change in her, he mentioned it then praised her and made sure to hug her, as well. Bianca, in turn ate up the positive reinforcement she'd so desperately needed from a male role model, and Drew Gillis provided that in spades.\n\nBianca went back to school, a school where she felt safe and where she able to focus. Her grades came back up and she made several new friends who were also thoughtful, conscientious young girls who loved coming over to have dinner or even spend the night.\n\nWith her daughter back in school, Bianca was able to take a full-time job that paid about the same as she making part-time, and get home just two hours after Bianca, who could now be trusted to be by herself for that amount of time. Colby loved coming home to a clean house where her daughter had taken care of things or seeing her in her room studying or just listening to music.\n\nAs she thought about how their lives had been just a few short months before, it nearly brought tears to her eyes to see the dramatic difference. And no small part of that difference was the way she felt. She had never been so in love or so happy in her entire life, and she found it hard to imagine being any happier.\n\nThat was true until Thanksgiving Day when, after having dinner with Drew's mom and dad, he proposed to her surrounded by the people they loved the most. Colby tried not to cry when Shelby started, but it was a losing battle as she happily said 'yes' to the very handsome, younger man she so dearly loved.\n\nColby only visited her ex-husband once while he was in prison. And it was then that she asked him to let Drew adopt their daughter. He was now sober and realized the best thing for Bianca was a stable, loving family; something he knew he could never provide. He not only signed away his parental rights, he even apologized to his former wife and told her he wished he could have been a better husband and father.\n\n\"What I did was unforgivable,\" he told her with tears in his eyes.\n\nIt was, and yet Colby forgave him and thanked him for being so understanding, and she even cried when she left. But that was a chapter of her life she needed to permanently close, and now all that remained was presenting this option to Bianca.\n\n\"So my last name would be the same as Drew's?\" she asked.\n\n\"Yes. And so will mine once we're married,\" her mother explained. \"You don't have to do this, honey. It's 100% your call.\"\n\nDrew never tried to influence her, but there was no need to do that. Bianca took one look at him and said, \"I would love to be Bianca Gillis. On one condition.\"\n\n\"What's that?\" her mother asked, so happy she was about to burst.\n\n\"Can I call you 'Dad' now? Please?\" she asked Drew.\n\n\"Come here, sweetie,\" he said to his beautiful daughter who would turn 13 in another month.\n\n\"Nothing would make me happier, Bianca,\" he told her as he held her hands.\n\n\"Me, either, Dad,\" she said as she put her arms around him.\n\nColby's parents came to visit over Christmas and fell in love with the warm weather. And truth be told, they loved Drew almost as much as their daughter and granddaughter did after seeing the way he treated them both.\n\nThey flew back down the following April for their wedding, and a year later when Colby gave birth to a second baby girl.\n\nAs she lay there holding her precious baby, she looked around at her mom and dad, Drew's parents, and Bianca, and realized this was the way life was meant to be. Had her husband done something so unforgivable, none of this would have ever happened. But he had, and this was now her new reality. A life with a loving husband, a teenage daughter who was a pleasure to be with, and a beautiful new baby who would always be loved by everyone standing there 'oohing' and 'awwing'.\n\nColby's thoughts were interrupted when Martin said, \"Okay, everybody! Group photo!\"\n\nHe'd grabbed one of the nurses to take same happy snaps as everyone took turns getting near little Ava Michelle Gillis, who'd stolen the show.\n\nJust five short years later, and orders to Hickam Air Force Base in Hawaii, Captain Drew Gillis and his beautiful wife and little Ava, flew to Colorado Springs, Colorado, together to leave their other beautiful daughter, Bianca Gillis, in the hands of the United States Air Force Academy with a dream of one day flying the F-22 Raptor just like her dad, the man who'd turned her life around, and her mother's as well."
    ],
    "authorname": "komrad1156",
    "tags": [
        "mature"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/unforgivable"
}
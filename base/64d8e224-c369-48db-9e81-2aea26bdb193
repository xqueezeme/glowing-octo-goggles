{
    "title": "Gods and Crowbars Ch. 04",
    "pages": [
        "This story is part of an ongoing series. The chronological order of my stories is now listed in WifeWatchman's biography.\n\nFeedback and constructive criticism is very much appreciated, and I encourage feedback for ideas.\n\nThis story contains graphic scenes, language and actions that might be extremely offensive to some people. These scenes, words and actions are used only for the literary purposes of this story. The author does not condone murder, racial language, violence, rape or violence against women, and any depictions of any of these in this story should not be construed as acceptance of the above.\n\nPart 16 - Come To Jesus (continued)\n\n\"Oh my God.\" Melina finally gasped. The enormity of her situation was hitting her; she had processed fully the depths of her problems in just seconds.\n\n\"Who is he?\" Laura repeated, her eyes relentless as they bore into her younger sister.\n\n\"His name is...\" Melina started, then said \"... well, his name is like your old mother's: it can't be mentioned out loud even if we knew what it was. I only knew him as 'Mr. C.'. He was my cell leader until recently.\"\n\n\"What was his cell's mission?\" asked Laura.\n\n\"It was supposedly an inter-agency cell, with people from the CIA, FBI, NSA, working on direct security threats. My group, the ones I knew of, we were all snipers. 'Wet boys'.\" said Melina. \"I'll make no bones about it, I joined the cell so that I could kill black subversives trying to overthrow the Government using ginned-up protests and riots. But I was not asked to do any of that. At least not yet.\"\n\n\"What is your current cell and it's mission?\" Laura asked.\n\n\"Still what I do best: sniper.\" said Melina. \"But this one is pure CIA, and I'm only sent against foreign or international agents that try to penetrate the USA. Counterintelligence Directorate.\"\n\n\"And 'Darkwave'?\" asked Laura.\n\nMelina said \"I'm not sure, but what I heard is that 'Darkwave' was allegedly sent to kill Don, but as I said before, she never did it, and so Mr. C. 'disavowed' her.\"\n\nLaura nodded. \"And you don't know his name.\" she said.\n\n\"No.\" said Melina. \"How... how did you get a picture of him?\"\n\nLaura locked her eyes with her sister's. \"This man was behind the torture of my husband, which by the Grace of God failed. And may God have mercy upon this man when Don finds him. But my problem right now is you. Does your husband know you're in the Company?\"\n\n\"Yes.\" Melina said. \"I told him when I went active.\"\n\n\"You need to talk with him.\" Laura said. \"You and he and your children are in danger now. You also need to decide what you're going to do: stay in the Company, or get out.\"\n\n\"You're not 'disavowing' me?\"\n\n\"No.\" said Laura. \"It's not in my power to do that, and I'm not convinced it's the right thing to do, anyway. So, let's figure out what we can do to keep you both useful and alive\"...\n\n* * * * * * * * * * * * * * * *\n\n\"So that's it.\" Laura said. \"Melina didn't outright say it, but this 'Mr. C.' was forming a cell that seemed dedicated to helping annihilate any black insurrections in the country. That can be looked at in one of two ways... they're legitimately working to defeat the Fascists that are manipulating blacks, or they're suppressing blacks to enforce white supremacy.\"\n\nWe were sitting in the Mountain Nest, me in the rocking chair with a lap full of cocker spaniel (Buddy), while Bowser gave aid and comfort to a distressed Laura.\n\n\"From what we know of this man,\" I said, \"it's probably the latter, though Melina might not know it. She didn't know that Ferrell was part of the man's group?\"\n\n\"She said she only knew a few others, some of them being her own recruits.\" Laura said. \"One of those, Agent 'Darkwave', was 'disavowed' by Mr. C. right at the time you rescued Becca and Cindy and took George Aurus into custody.\"\n\n\"She's probably the one that blew the electrical panel that night.\" I said. \"And may be the person Cindy almost caught hanging around Leonard Lotz... who I suspect is with her and with the person who took Agent 'Darkwave' away from Melina. And most importantly... this 'Darkwave' and her new handler, so to speak, are the ones that exterminated that son of a bitch pointing rifles at you and my daughter's heads...\"\n\n\"Melina denies any and all knowledge in that.\" said Laura.\n\n\"And I believe her.\" I replied. \"So, are you going have Melina try to get more info on this Mr. C.?\" I asked.\n\n\"No. That would be way too dangerous.\" Laura said. \"Mr. C. is like Westboro, a spider in the center of a web. He would know.\" I agreed with that.\n\n\"By the way,\" Laura said, \"I asked Melina if she knew of anyone named 'Paulsen'. She said the name was familiar, but she didn't know who he was.\"\n\n\"That's okay.\" I said. \"I think I do...\"\n\nPart 17 - Profile In Courage\n\n\"This is Bettina Wurtzburg, KXTC Channel Two News!\" shouted the lovely redheaded reporterette at 7:00am, Wednesday, April 19th, from in front of the Courthouse building. \"As we reported yesterday, Leonard Sharples was found 'guilty' on all counts yesterday, including murder with aggravating circumstances and attempted murder of a Police Officer with aggravating circumstances!\"\n\n\"Legal experts were surprised at the totality of the victory by ADA Paulina Patterson and State Attorney Jenna Stiles.\" continued Bettina. \"But they also say that the Defense counsel from the firm of Chase, Lynch, & Berry, P.C., may not have provided as energetic a defense as they possibly could have, once they could not impeach the devastating testimony of Police Commander Donald Troy.\"\n\n\"The death penalty phase of the trial now begins,\" said Bettina, \"and experts tell Channel Two News that getting a death penalty has become extremely difficult in the past several years...\"\n\n* * * * * * * * * * * * * * * *\n\nCindy Ross came into the Witness Room of the Court where the Death Penalty phase of Leonard Sharples's trial was occurring, where Paulina was talking to nine-year-old Susie Haskins, cousin of the late Scrawny Haskins. Susie was about to take the stand.\n\n\"How are you feeling, Susie?\" Cindy asked as she sat down by Susie.\n\n\"Kinda... kinda scared.\" said Susie.\n\n\"I understand.\" said Cindy. \"It's not easy for grownups like me to get on a stand and testify, either. But don't worry, the lawyer can't hurt you, even if he's trying to yell at you.\"\n\n\"I know.\" said Susie. \"But all those people... will be looking at me.\"\n\nCindy smiled. \"You know my dad, Dr. Eckhart?\" Susie nodded. Cindy said \"He gets in front of thousands of people at a time. He says he's scared, too, but you know how he overcomes it? He just stays himself, and he doesn't worry about them looking at him.\"\n\n\"It's... still kind of hard.\" Susie said, and Cindy could sense her fear.\n\n\"Susie, courage is acting in spite of your fear.\" Cindy said. \"Do you know who was the most courageous person I ever knew? Mrs. Veasley.\"\n\nSusie's eyes lit up a bit, and Cindy reached into her pocket and brought out something in a small plastic baggie. \"This is Mrs. Veasley's Bronze Star ribbon. She was a very brave person in the Army, and evacuated a military hospital that was under fire. She lost the use of her legs, but never stopped trying to save others' lives, either as a nurse, or an Army Officer, or at First Baptist Church.\"\n\nCindy put the ribbon in a pocket on Susie's dress. \"Mrs. Veasley would want you to carry this with you today. If you get scared or nervous, just think of Mrs. Veasley and her Bronze Star, and you be brave like she was.\"\n\n\"Yes ma'am, I will.\" Susie said resolutely, her young face beginning to set into determined purpose.\n\n* * * * * * * * * * * * * * * *\n\n\"The People call Susie Haskins to the stand.\" announced Jenna Stiles.\n\nThe doors to the Courtroom were opened by the bailiffs, and in walked Susie Haskins. She walked down the aisle with her head held high, exhibiting no outward fear. She made a very impressive first impression.\n\nThe Bailiff swore her in, and she sat in the witness chair, on a raised cushion.\n\n\"Susie,\" asked Jenna, \"who was Scrawny Haskins?\"\n\n\"He was my cousin.\" said Susie.\n\n\"Did you ever talk to Scrawny?\" said Jenna.\n\n\"Not much.\" Susie replied. \"He was in jail a lot.\"\n\n\"So how did he communicate with you?\" Jenna asked.\n\n\"He would send me cards at Christmas.\" said Susie. \"He would tell me to be good, and to read books, and to study... and to not mess up like he did.\"\n\nJenna went to the prosecution table, picked up a bundle of cards, and said \"Your Honor, I'd like to place these into evidence.\"\n\n\"Objection!\" started Lynch, but Folsom was having none of it.\n\n\"Overruled. The evidence is entered.\" said the Judge. He directed that the Christmas cards be shown to the Jury.\n\n\"Did you get a Christmas card last year?\" Jenna asked.\n\n\"No ma'am.\" said Susie. \"Scrawny was killed by a bad man. So I don't get any more cards telling me not to mess up like he did.\"\n\nMembers of the Jury had tears in their eyes as they read the messages from Scrawny to his young cousin, his words reaching out from the grave.\n\n\"No more questions.\" said Jenna.\n\n\"So, young lady.\" H.J. Lynch said loudly. \"Your cousin was a bad person, wasn't he?\"\n\n\"Not to me.\" said Susie. \"He wanted me to do better, and be a better person than he was.\"\n\n\"So why did he mess up? What was wrong with him?\" asked Lynch.\n\n\"I don't know.\" said Susie, almost defiantly. \"He was good to me. He wanted me to do better with my chances then he did with his. He may have messed up, but he was not a bad person. He didn't... he didn't deserve to die.\" Susie fought to stay brave.\n\n\"You would still be good and do well, no matter if he'd sent you those Christmas cards or not, isn't that right?\" barked Lynch. The Jury's reaction to him was not positive.\n\n\"I don't know.\" said Susie. \"But when it's time to do homework or reading, I think of him telling me to do better than he did, so I get it done.\"\n\nLynch was getting nowhere. He could not break down a nine-year-old child, not knowing that a cousin's love and the bravery of an Army Nurse were too much for him.\n\n\"No more questions.\" said Lynch.\n\n\"Thank you, Susie.\" said Judge Folsom. \"You may step down.\"\n\nSusie got off the witness stand and walked down the aisle, trying not to break into a run to get out of there. As the doors opened for her to leave, she saw Cindy outside, kneeling. Susie ran into Cindy's arms and burst out crying. Bravery was a hard thing to do.\n\n\"You did great, Susie.\" Cindy said, hugging Susie tightly. \"You did very, very well. Mrs. Veasley and Scrawny are watching us from Heaven, and they are very proud of you right now.\"\n\n\"Why is Justice so hard for good people?\" Susie asked between sobs.\n\n\"Anything good is hard, Susie.\" Cindy said. \"Freedom is hard, and soldiers like Mrs. Veasley and the Iron Crowbar worked hard to protect our Freedom. Justice is hard, but Justice is always inevitable. Even if it doesn't come from us, it will come. But anything worth having, whether it's Freedom, or Justice, or being with the person we love, or whatever we want in life, it's hard, but it's worth working for, okay?\"\n\n\"Okay.\" said Susie.\n\nCallie Carrington was also there, watching with admiration at how Cindy comforted Susie, was so good helping the young girl. Cindy had a lot of love to give to a lot of people, Callie thought to herself. And being a police officer was honorable and good, but Cindy had it in her to do much, much more...\n\nAnd yes, Callie had heard Cindy's words about being with the person she loved...\n\nIt would take a few more minutes for Susie to regain her composure. Her parents took her home, Mrs. Veasley's ribbon still in her pocket. She would one day return it to Cindy at a time when Cindy would need it most... but that is a story for the far-flung future.\n\nPart 18 - Profile in Crowbars\n\n\"So,\" said the DepDirector as he met with me, Laura, and Jack Muscone in the FBI offices in the Federal Building, \"your sister is staying with her current cell?\"\n\n\"For now.\" said Laura. \"I've asked the CIA Director for her to take a leave of absence to assist me in some of my Company-related work, and he's granted it. So she's off to the side for the moment, and hopefully out of danger.\"\n\n\"Good.\" said the DepDirector. \"So... this is big. Why is your sister such a racist?\" He was looking at Laura. Laura looked at me.\n\n\"Very bad childhood experience. Her mother was brutalized by black thugs.\" I said. \"Sometimes those experiences shape a person's thinking. Wouldn't you agree, Mr. Director?\"\n\nThe DepDirector looked at me in shock. His own experience was the mirror-image of Melina's, and he realized exactly what I was conveying to him.\n\n\"Okay, I can understand that.\" said the DepDirector with a huge amount of understatement. \"So, where does this leave us?\"\n\n\"I'm not sure.\" I said. \"Taking Benny Brighton out of California and sending him here suggests Mr. C. may be having a hard time keeping recruits. We've taken quite a few of his people into custody. They keep making dry runs, like the mothballs and the power station attack, but the 'big one' hasn't come yet.\"\n\n\"Jack, do we have any leads on what's going on? What might happen?\" asked the DepDirector.\n\n\"We know 'Stormbringer' is the codename for their plan,\" said Jack, \"but we have no idea what it is.\"\n\n\"Yes we do.\" I said. \"It's a variation of the 'Providence Springs' plan. 'Providence Springs' was too fast, too big, too ambitious. Their plan was to rid Fillmore County of all blacks, create a White Utopia, then expand it to the next county and to the next. They were going to see how well their plan worked with Providence Springs, see what the reaction to wiping it out was. If no one did anything; great, they win. If there was an outcry about it; great, they learn from it and try again. What they did not expect was to be interdicted on the way to making it happen.\"\n\n\"But they haven't tried again, have they?\" asked the DepDirector.\n\n\"I don't know.\" I said. \"I am wondering more and more about the Pine Valley project... and maybe even Valley Villages to our south. Unfortunately for them, an extremely vile, unscrupulous man was so greedy for green dollar bills that he covered up contamination on the site, which would've killed the White Utopians and their eugenics-created progeny. Nothing like lead poisoning to defeat genetics experiments, eh?\"\n\n\"Oh my goodness.\" said Muscone. \"You think all that was related?\"\n\n\"I don't know.\" I said. \"But I had a lot of time to think very clearly while lying in a hospital bed, with no morphine to dull my mind.\"\n\n\"Ahhh,\" said my wife, \"so that's why you refused the morphine.\"\n\n\"That was part of it.\" I said. \"But I digress. In my little mind palace, I'm taking ingredients from all over the place: Providence Springs, BigPharmaCorp, Millwakee, the Federal facility northwest of the City, Pine Valley, a corrupt US Senator, several members of the BigPharmaCorp board...\"\n\nI continued, almost heedless of my surroundings: \"They started out trying to take over a county, and would try to take over more. Now they're just looking for a safe haven to retreat to, to breed their new superior race, while they launch their own version of Helter Skelter, violent race wars that will look like demonstrations, riots, and assassinations of police officers. Then after all the blacks are annihilated, and a few to-them-useless whites and other ethnicities as well, they expand out of their little havens to take over the world.\"\n\n\"And how do we stop them?\" asked the DepDirector.\n\n\"The same way Hercules defeated the multi-headed Hydra.\" I said. \"We cut the body away from the heads. You also have to understand, Mr. Director, that this is war... race war, eugenics war, or whatever you want to call it... but it's war. And one does not make 'arrests' in war. One annihilates the Enemy. I'm prepared to do that. Are you?\"\n\nThe DepDirector shook his head. \"I don't care to destroy the Constitution in the process of saving it. So no bloodbaths. Keep things as legal as you can.\"\n\n\"I yam what I yam, but I will try.\" I said, in a brilliant imitation of the legendary Popeye.\n\n* * * * * * * * * * * * * * * *\n\nGetting back from my meeting with the FBI, I went to the Crime Lab building on the other side of the parking lot from Police Headquarters, and went in through the 'back door'. In the back left corner of the building from the front door, to my right as I entered, was a small room. with a couple of long lab bench tables. On one of these tables, Joanne had laid out the evidence from the Rutledge murder.\n\n\"This clear plastic, sir,\" said Joanne, who was in the company of Christina Cho and Jerome Davis, \"looks like it's from a 2-liter soda bottle.\"\n\n\"It's beginning to degrade in a consistent manner with that kind of plastic, Commander.\" said Christina. \"After 10 years in a landfill, it would be broken down more.\"\n\n\"So these bottles degrade more than one thinks, or the activists say they degrade.\" I inquired.\n\n\"Yes sir.\" said Christina. \"It's not a fast process, but that's why survivalists can't store water in these types of containers nor gallon jugs for too many years. They degrade, spring leaks...\"\n\n\"Okay.\" I said, \"so what about the cardboard?\"\n\n\"They didn't run much testing on it ten years ago.\" said Joanne. \"But they ran a gunpowder residue test the other day, and got a match of breakdown products.\" She showed me the mass spec tests.\n\n\"Excellent!\" I said. \"So, what does this mean?\"\n\n\"Sir,\" said Joanne, \"as a hunter, I know a little bit about using silencers, especially on .22 WMR rifles when squirrel hunting. I think this is a very crudely made silencer. Attached to the end of a pistol, the perp fired the shot, which hit Rutledge in the chest, and the exploding bottle of cardboard pieces, maybe soaked in water, went all over the place.\"\n\nI nodded and smiled happily. \"Damn. This is simply outstanding work, guys. Outstanding! Okay, are you ready to go visit a crime scene?\"\n\n* * * * * * * * * * * * * * * *\n\nI was driving my Police SUV, whose driver seat had good lumbar support, towards County High School. Joanne Warner was riding shotgun, and Jerome Davis was in the backseat. Cindy was still at the Courthouse, and so would miss all the fun.\n\n\"We got very little from all the people we contacted.\" said Joanne as we drove. \"Some of the women who were Jennifer Amberton's crowd said they thought Jimmy was acting strangely and suspiciously. Some others said they left early because there was tremendous tension between Jimmy and his wife, and between Jimmy and Jason and Kevin. One person said when he heard about the murder the next morning, he thought Jimmy was the one that was dead.\"\n\n\"Interesting.\" I said. \"Did anyone contradict what they said ten years go?\"\n\n\"No sir.\" said Joanne. \"That's what I was looking for, to see if anyone said something different. Most people said they could no longer remember, and the ones that said anything pretty much said the same thing they said ten years ago.\"\n\nWe arrived at the County High School's sports complex. One of the coaches was there to greet us.\n\n\"Hi, Coach.\" I said, shaking his hand. \"Any more Slender Man sightings, lately?\"\n\nThe coach laughed. \"No, but we've sure had a lot of tourists come around wanting to know where the sighting was. A lot of them were from England, and are young people, but we also had a Biology professor from the University took soil samples at the right field foul pole, near where Slender Man was seen.\"\n\n\"Interesting.\" I said. \"So the Baseball fields used to be a practice field, right?\"\n\n\"Yes.\" said the coach. \"Behind our left shoulders is the back of the home stands of the football field. The fieldhouses are behind your right shoulder, off the end of the endzone, and they've been there for decades. The Baseball field was built about five years ago.\"",
        "I looked at Joanne and Jerome to see if they had questions, but they said nothing, so I said \"So Coach, when they built the baseball field, did they do any digging, or raze the surface to level it?\"\n\n\"They plowed up the ground some, then laid down a soil base that would drain water better. Then they built up from that. There's extensive work done for the pitcher's mound, and some work done on the infield.\" He explained some of the layering done underneath.\n\n\"Well, guys,\" I said to Jerome and Joanne, \"what do you think of that?\"\n\nJoanne finally got it. \"Nothing buried under the topsoil, sir. As in a weapon.\"\n\n\"No, we didn't find anything, not that I remember.\" said the coach.\n\n\"Okay, thanks Coach.\" I said. \"I'll lock the gate behind us.\" The coach went back towards the school buildings.\n\n\"Okay,\" I said, \"you can see the road that runs off the side of right field, there.\" I said. \"That road was there at the time of the murder.\"\n\n\"It's pretty far off, sir.\" said Jerome. \"And the murder was done fairly close to the football stadium.\"\n\n\"That patch of pine trees behind the fieldhouses was there at the time of the murder, too.\" I said. \"There used to be some trails through there, and homeless people camped out in there until Chief Griswold sent the Police in to clean up that trash. Too close to the School for his comfort.\"\n\n\"Anyway, you can imagine when this was an empty field.\" I continued. The football stadium lights were on, giving some illumination to the area, but from the endzone, where the tents were, the line of sight is not all that great. So definitely someone could come down here, confront Rutledge, kill him, and go back without being seen.\"\n\n\"Or...\" Joanne said, \"... come from the road and never have been seen by anyone at the reunion.\"\n\nFinally, I thought to myself, some brains were being used. Then I caught myself. Have patience, have patience, have patience, I thought to myself.\n\n\"There is one question I have not yet heard asked.\" I said. \"And it would be relevant if some outsider came to kill Jason Rutledge here.\"\n\n\"Ohhhh, I see.\" said Jerome Davis. \"How would an outsider be able to lure Jason down to the practice field?\"\n\n\"By texting him?\" Joanne asked. \"Oh, wait... the Police report said his cellphone was in his car, charging up. So he couldn't have gotten a message on it.\"\n\n\"Ahhhh!\" I said in a falsetto voice, then added in my normal voice: \"Now we're getting somewhere.\"\n\nAs Joanne and Jermaine looked around, obviously trying to think about the case, I said \"I'm going to go sit down in those stadium bleachers. Take all the time you need looking around.\"\n\nAs I sat in the football stadium bleachers, I remembered the football game between County High and Booker T. Washington High, and the near disaster that had been. And now, I knew that forces were coming into play that would make that near-riot a small thing by comparison. I let my mind wander over everything, as I had done while in the hospital, and enjoying the sunny weather and the warmth of the beautiful Spring day...\n\nPart 19 - Life Or Death Decision\n\nWednesday, April 19th. At 3:00pm, the Jury entered the Courtroom. I was sitting up front, right behind Paulina and Jenna, wearing my semi-formal Uniform jacket with ribbons, white shirt and tie (and armor, brace, and girdle) underneath. Sitting beside me was Captain Cindy Ross, and to her other side was Chief Griswold, wearing his ribbon-clad Uniform jacket, as well.\n\n\"On the issue of the sentence of the convicted defendant,\" asked the Judge, \"how do you find?\"\n\n\"We the Jury find that Leonard Sharples should be executed by the State in a lawfully prescribed manner, Your Honor.\"\n\nThe Defense counsel's head sagged, his chin almost on his chest. Jenna and Paulina tried to remain looking solemn, but their eyes were bright with their victory. Leonard 'Sergeant' Sharples face remained unperturbed through it all. \n\nThen he looked over at me. Our eyes locked. He had tried to kill me; he was now going to be the one put to death. But his eyes were completely devoid of emotion.\n\n\"Very well.\" said Judge Folsom. \"Leonard Sharples, you are sentenced to be executed by the State. By law, you are allowed to choose the method of your execution within the bounds of the lawful methods. Do you have a choice?\"\n\n\"I'd prefer to be shot.\" said Sharples.\n\n\"Very well.\" said the Judge. \"You are sentenced to die by firing squad at Jacksonville State Prison on or before August 31st of this year. This Court is adjourned.\" Folsom banged his gavel, the Bailiff called out \"All rise!\" and the Judge left. The Jury was led out, and was excused outside. \n\n* * * * * * * * * * * * * * * *\n\nThe Irish Pub, a.k.a. the Cop Bar, was a place of celebration this night, but a strangely subdued one. Fire Chief Quinlin was there, talking with Police Chiefs Moynahan and Griswold, and with Sheriff Department Chief of Staff Charles T. Oswald. I had stopped by their table for a few minutes of discussion, but when Paulina Patterson came in with Tasha, I excused myself and went onto the outside patio deck with them.\n\nJoining us at the back table was Jenna Stiles, Teresa Croyle and Todd Burke. At another table, closer to the front, was Joanne Warner, Jerome Davis, Theo Washington and Teddy Parker.\n\n\"You guys did a great job.\" I said as I held Tasha. \"Bettina's 'experts' were saying you wouldn't even get convictions.\"\n\n\"I'm sure if she had her way, we would not have.\" said Paulina. \"But it was actually pretty easy to get a conviction because of the repeating patterns. It was the death penalty I didn't know if we'd get.\"\n\n\"Susie Haskins is the one who did that.\" said Jenna, a bit quietly. \"The Jury was crying as they read those Christmas cards to her from her cousin Scrawny. And she held up so well against Lynch. He's such a fucking bastard.\"\n\n\"No doubt about that.\" I said.\n\nJust then, three people walked out onto the deck. They were Molly Ross Evans, Cindy Ross, and Callie Carrington.\n\n\"Aw, you brought Tasha!\" said Molly enthusiastically. \"Hey Tasha!\" Tasha looked up at Molly and smiled. I'm not sure Tasha's mother was as enthusiastic.\n\n\"Everyone, this is my friend Callie.\" announced Cindy. \"Callie, this is ADA Paulina Patterson... and this is State Attorney Jenna Stiles.\" \n\n\"Ah, nice to meet you.\" said Paulina as I handed Tasha to Molly for a moment. \"Welcome back to Town, Callie.\" She remembered Callie from the Porno Set Mystery case.\n\n\"Hello.\" said Jenna, very simply, shaking hands with Callie.\n\nCallie and Cindy went over to the empty table on the edge of the patio. \"I guess I can go join them.\" said Molly. She handed Tasha back to me and went over to her sister's table.\n\n\"When was the last time Tasha saw Molly's boys, Tasha's brothers?\" I asked Paulina.\n\n\"It's been a while.\" said Paulina, getting my hint. \"I'll bring Tasha to the Cabin this weekend, how's that?\"\n\n\"Works for me.\" I said. \"And if you want to take a weekend away after all your work on this case, we'll have plenty of babysitters.\"\n\n\"Including us.\" said Teresa. \"We'll bring Doug, little Todd, and Jack.\"\n\n\"And we'll keep Jack and Bowser separated.\" said Todd. \"By the way, is Bowser going to get a medal?\"\n\n\"I'm working on it.\" I said. \"A K-9 Commendation Medal is assured, but the Chief and I are pushing to get him a Lifesaving Medal.\"\n\n\"No disrespect intended,\" said Jenna, \"but he's a dog. Will he even care about that?\"\n\n\"Bowser has become a national sensation.\" I said. \"Fox News's national broadcast talked about him, and Fox News Midtown is sending a crew up to the May 1st ceremonies. So Bowser is probably going to want to go hide in a corner and have a bowl of dog food. It's us humans that think it's a big deal.\"\n\n\"Bowser is awesome.\" said Teresa. \"And so is Buddy.\"\n\n\"Yes, yes they are.\" I said. I noticed that Jenna was trying to not look over at Cindy and Callie, but was looking over that way... and her face showed that it was hitting her that Cindy had moved on.\n\nAnd to add to it, a moment later Callie came over to our table. \"May I hold this beautiful baby for a moment?\" she asked Paulina.\n\n\"You'll have to take her from her dad.\" said Paulina as Callie sat down beside me.\n\n\"Sure.\" I said. \"Hey Tasha, say hello to Callie.\" I handed my daughter to Callie, and Tasha seemed to like the beautiful blonde.\n\n\"By the way, \" said Callie, \"you should've seen Cindy with Susie Haskins. Kept her calm, then after Susie was done and was crying, Cindy hugged her and really helped her calm down and feel better. She is really good with kids.\"\n\n\"Cindy takes after her father, for sure.\" I said.\n\nJenna turned to me and Teresa and said \"Well, I think I'll be going. We did our jobs, but the death penalty is not something I really want to celebrate.\"\n\n\"I understand.\" I said. \"But you did very well getting the convictions, and on behalf of my Police Force, I thank you for that.\"\n\n\"Hear hear.\" said Teresa. Jenna nodded to us all and went back into the Cop Bar, not saying goodnight to Cindy and Molly.\n\n\"Is she okay?\" asked Callie, having seen the looks on Jenna's face, but not understanding.\n\n\"Jenna was engaged to Cindy before you came along.\" Teresa said.\n\n\"Ohhhhh...\" Callie said. \"So that's who she is... I didn't realize it.\"\n\n\"Don't sweat it.\" I said. \"It was bound to happen, sooner or later. This Town is not that big.\"\n\n* * * * * * * * * * * * * * * *\n\nI went back inside the Cop Bar, and saw that Sheriff Allgood was with the other top Fire and Police Officers. Chief Moynahan waved me over. I first brought a full pitcher of beer, which was immediately poured into several glasses.\n\n\"How are you feeling, Don?\" asked Daniel Allgood.\n\n\"Pretty good, my back is healing up nicely and there's not much pain.\" I said. \"Beer helps, of course.\" Everyone laughed.\n\n\"You did a great job, helping the FBI nail Jerry Morelli.\" said Deputy Charles Oswald. \"The FBI was after him for years.\"\n\n\"They had the wrong guy chasing him.\" I said. \"They put Muscone on it, and now Morelli is in Federal prison.\"\n\n\"Speaking of prison,\" said Chief Moynahan, \"Ferrell is being moved to City Hospital. They say they have more security there while he recovers.\"\n\n\"And that may well be true.\" I said. \"I've been trying for years to beef up security at our University Hospital, ever since my nephew Ned escaped from there twice. But I'm still not satisfied with their progress, or lack of it. As to Ferrell... well, he's now going to learn what it's like to be the one in a wheelchair. Can't say I feel anything about that.\"\n\n\"I'm glad you were actually in Court when that happened.\" said Sheriff Allgood. \"The Press was actually angry when they found out you had an airtight alibi over that.\"\n\n\"Fuck the Press.\" I said quietly, then quaffed my beer. Another pitcher was brought over, and the mugs refilled.\n\n\"I heard some talk,\" growled Chief Griswold, \"that the Bureau of Prisons is looking at converting the medical portion of The Asylum into a prison hospital, so that people like Ferrell can be treated in a secure facility.\" I knew that the Chief was simply floating a trial balloon on behalf of his friend, the Governor himself.\n\n\"I dunno about that, Chief.\" I said. \"I know I would never allow my wife to go in there, for any reason. I'm sure a lot of other doctors won't want to go in there, either.\"\n\n\"That's a thought.\" said Griswold.\n\nJust then a group of people came in from the patio and surrounded us, particularly me, led by two Angels posing as Police Captains.\n\n\"Dr. Fredricson just called.\" said Cindy. \"She mentioned her husband. She mentioned his back. She mentioned early bedtime. She mentioned Angels bringing her husband home.\"\n\n\"You are outnumbered, Crowbar.\" growled Chief Griswold, his mustaches twitching merrily.\n\n\"And under orders from my boss... my real boss.\" I replied, then stood up slowly. \"Have a good evening, gentlemen...\"\n\nPart 20 - Cold(er) Case\n\n\"This is Bettina Wurtzburg, KXTC Channel Two News!\" shouted the redheaded reporterette from the Courthouse complex at 7:00am, Thursday, April 20th. \"In a shocking development, convicted murderer and former TCPD Detective Leonard Sharples was sentenced to death by the Jury in his murder trial!\"\n\nBettina went on: \"Legal experts are surprised that the Jury reached a unanimous decision to have former Detective Sharples executed by the State, citing the circumstantial nature of the evidence and a general attitude of the Public to move away from State-sanctioned executions. Also, the horrible death of Lance Priemus during the last execution in this State has been cited in cases brought to the Courts to stop all executions in the Nation...\"\n\n* * * * * * * * * * * * * * * *\n\n\"Who are these 'experts' ov vich shee speeeks?\" I asked out loud as we drank coffee in MCD.\n\n\"That's a real bee in your bonnet, isn't it, sir?\" asked Joanne Warner.\n\n\"You betcha.\" I said. \"And one day, they'll cross the line by quoting 'anonymous sources' that don't actually exist, and citing memos that they never saw but were read to them over the phone, and then don't seem to exist when asked for... or subpoenaed.\" \n\n\"You really hate the Press, don't you sir?\" asked Theo Washington. \"But don't we have to have a Free Press to preserve our rights and freedoms?\"\n\n\"You better believe I hate them.\" I said. \"I don't think it's going too far to say the Press is the ultimate enemy of the Constitution of the United States. Their lies, distortions, misrepresentations, and their agenda-driven propaganda is going to destroy the very First Amendment that protects them. They're protected by the First Amendment, but they abuse that right. And one day they're going to get what they want... and by then, it will be too late for them.\"\n\n\"All right, all right.\" said Chief Moynahan, coming into MCD. As Cindy poured him a cup of coffee, he said \"I bee-lieeeve we need to cut down on the political chatter. We have different philosophies in our heads, but we have to work together as a team. And some of your rights end where those badges on your chests begin, if you get my drift.\"\n\n\"Yes sir.\" I said, on behalf of everyone else, who nodded to various degrees.\n\n\"Commander, if I can see you in my office, please... and refill your coffee cup on the way.\" I obeyed those orders.\n\n* * * * * * * * * * * * * * * *\n\n\"Have a seat.\" said the Chief as he sat down behind his desk. I sat down in the chair in front of the desk.\n\n\"What I called you in about,\" said the Chief, \"is that Commander Harlow came to me yesterday and complained about Detective Parker's comments yesterday morning, as well as your emphatic defense of him. She said she considered his comments about illegal persons to be racist, and she believes Mr. Parker is a racist.\"\n\n\"Are you kidding me?\" I blurted out, then remembered my manner and said \"...sir?\"\n\n\"I asked if she thought you were a racist,\" said the Chief, \"and she said no, that she thought you were just taking up for your Detective. So she's a hypocrite already on it.\"\n\nThe Chief went on: \"I told her that Mr. Parker did not mention any ethnicities in his comments, and that technically what he said is true: someone here illegally is illegal, period... as you said. I also said that no one has ever reported hearing Mr. Parker say anything of a racist nature, and that he works well with his black colleagues. I might have mentioned that he is dating Janice Holloway, who is part-Hispanic.\"\n\nI nodded. \"So, is it formal?\" I asked.\n\n\"Not yet.\" said the Chief. \"And after my discussion with her, it may not get to that. But if she goes to the Inspector General with a formal complaint, we'll have to address it. In the meantime, reinforce what I just said in MCD about no more political chatter, and therefore nothing that can be... misconstruuuuued.\"\n\n\"Yes sir.\" I said.\n\n\"Okayyyyy,\" said the Chief, \"tell me what's going on in my Police Department...\"\n\n* * * * * * * * * * * * * * * *\n\nI went into MCD to relay the Chief's message, and saw a congregation of Detectives around the whiteboards on the far side of the room. Going closer, I saw that they were discussing the cold case.\n\n\"Don't mind me.\" I said as they turned around and peered at me. \"Please, carry on.\"\n\n\"Sir,\" said Joanne Warner, \"we're all talking about this case. We think there are three possible suspects: Jimmy Amberton, Jennifer Green Amberton, and now we've added Susan Gurley.\"\n\n\"What about Kevin Arnett?\" I asked.\n\n\"He was in sight of someone pretty much the whole time.\" said Jerome Davis.\n\n\"That, and no obvious motive to kill his friend Jason.\"said Theo Washington. I nodded.\n\n\"So,\" said Joanne, \"based upon the facts we know, let's name our key suspects. I'll go first. I think it's Jimmy Amberton. He was humiliated the night before by the cool crowd people. Jason Rutledge was Jennifer's lover in high school, and likely impregnated Jennifer a couple of months before the reunion. Someone says something the night before, or Jimmy knew already. So, being an acoustics engineer, he devises that soda bottle and cardboard to be a crude silencer, somehow gets Jason out to that field, and shoots Jason. He disassembles the gun, throws pieces all over the place, maybe flushes some down the toilets in the fieldhouse.\"\n\n\"I'm kind of thinking Jennifer.\" said Theo Washington. \"She had better financial motive to kill Jason before he could change his mind on the trust fund he'd created for her unborn child that he'd fathered. Killing him also keeps him from telling anyone about fathering her child. She's also an engineer, and could've created that crude silencer... and you know, she could've done that with the idea of framing Jimmy. He gets put in jail, she can try to tap into that trust fund early...\"\n\n\"All of that could be said for Susan Gurley.\" said Jerome. \"Except she's not an engineer. But what if she seduced Jimmy, got him to do that for her? She pretends to help Jimmy while actually setting him up.\"\n\n\"Teddy?\" I asked. \"You want to add to this... mess?\" My words had Cindy's ice blue eyes flashing with barely concealed amusement. The other Detectives looked a bit crestfallen.\n\n\"No sir.\" Teddy said quietly. I peered at him, noticing he was introspective.\n\n\"How did they do, Commander?\" asked Captain Ross, partially to distract me from Teddy, and part to get me talking about this case.\n\n\"You all had some very good points, and some not-so-good ones.\" I said, addressing the Detectives. \"For example, it was a great observation of Detective Warner to understand that there are two engineers there that would know how to make a crude silencer out of a coke bottle and cardboard. But let's take to the other side... there was no record of Jimmy or Jennifer owning a .40 cal pistol, so either would have had to buy one within the past 24 hours -or- have transported it from Nevada. And they'd have had to make that crude silencer in that time. Very fast time to plot revenge. My point here is that I believe this murder was planned well ahead, was premeditated, and not quickly-done act of passion.\"\n\n\"To that point,\" I added, \"someone is going to look silly carrying a 2-liter soda bottle around all night. So it had to be somewhere on the premises, likely secreted on or near the practice field. That in itself bespeaks premeditation.\"\n\n\"I also note that it was Kevin, not Jason, that physically harassed Jimmy the night before.\" I said. \"Of course Jason could've gotten Kevin to do the dirty work for him, but I simply mention that Jimmy's active tormentor, Kevin, is not the one lured out and killed.\"\n\n\"Another point I'll make,\" I said, \"is that you've mentioned all the suspects singly, and that's good. And there was a mention that Susan might've enticed Jimmy into a discretion, though from all accounts she hated his guts. But what about others? Could Jennifer or Susan have conspired with Kevin? Could Jennifer have conspired with her friend from school, Susan, and perhaps others? And most importantly, what if Jimmy and Jennifer were colluding, as a couple, to kill Jason?\"",
        "\"Even if we figure this out, we'll never get a conviction.\" said Joanne forlornly. \"Too much reasonable doubt.\"\n\n\"Unfortunately, I agree.\" I said. \"So you're going to need something much, much stronger. By the way, I'm going to help you guys out and dig into why the Ambertons were fired from BigAerospaceCorp. Something strange in the way their clearances were revoked and they were canned like they were, and I have Federal resources that I can put to use, there.\"\n\n\"We would appreciate that, sir.\" said Joanne.\n\n\"There is one other clue that I haven't heard mentioned.\" I said. \"I'm not surprised some of you haven't thought about it, but Tanya Perlman saw it in a heartbeat, all those years ago.\"\n\n\"Oh.\" said Cindy. \"He died with a hard-on.\"\n\n\"Yes. Yes he did.\" I replied. \"Hell of a way to go. But it's a cluuuuue.\"\n\nPart 21 - Dirty Pool\n\n\"This is Bettina Wurtzburg, KXTC Channel Two News!\" shouted the lovely redheaded reporterette at 7:00am on Monday, April 24th. \"Channel Two News has learned that the Town & County Police have opened registration for their famous Police Boxing Matches!\"\n\nBettina went on: \"The Police claim that the Boxing Matches teach defensive skills, taking down criminals in weaponless combat, and encourage a competitive spirit and esprit de corps. There is an actual Boxing Division, but the Freestyle Division, based upon the hand-to-hand combat of the Marine Corps Basic Training program, is where the excitement is. Last year's champion, Commander Donald Troy, has announced that he will be unable to defend his title due to his recent back surgery, and sources tell Channel Two News that the Commander is 'distraught' at being unable to compete...\"\n\n* * * * * * * * * * * * * * * *\n\nI noticed that Teddy Parker was looking very down at the coffee klatch. I asked Cindy to bring him to my office.\n\nOnce seated, I said \"Teddy, I'm considered to be pretty decent at observation and deduction, and I can see that something is bothering you. So if it's personal, you can tell me so, but this is your chance to talk about it 'off the record'.\" To emphasize the point, I put my badge down on my desk.\n\n\"Yes sir.\" said Parker. \"Janice broke up with me over the weekend. She said she was told by Commander Harlow that I'd made racist statements. I told her that was b.s., and she could ask anyone I work with. I know I'm from Mississippi, sir, but I'm no racist, and everyone knows it. It's an insult.\"\n\n\"I agree.\" I said. \"What did Janice say? if I may ask.\"\n\n\"She said she believed me, but that Commander Harlow was her boss, and had all but said out loud that she did not want Janice seeing me anymore.\" said Parker.\n\nMy eyes locked with Cindy's for a moment, and we both saw the fire in each other's eyes.\n\n\"Teddy,\" I said, \"has Commander Harlow attempted to say anything to you since that morning we 'discussed' illegal persons?\"\n\n\"If I may, sir.\" said Cindy. She then said \"Commander Harlow did come into MCD when she thought Parker was alone in there. She didn't see me, and I got between her and Parker, and told her to come through me if she had a problem with one of my Detectives. I then took it to Chief Moynahan, and he said he told her to not speak to Parker again on any 'political' issues, but only on business matters.\"\n\n\"Wow.\" I said, shaking my head. My back started hurting, too.\n\n\"Well, sir,\" said Cindy, \"Janice doesn't realize what she's just given up. If she's that shallow, then Teddy is better off and will find better.\" She then said to Teddy \"I know that doesn't make you feel better now, Teddy, but I believe it to be true.\"\n\n\"Yes ma'am.\" Teddy said.\n\n\"Teddy,\" I said, picking up my badge from the desk, \"I appreciate your candor, and I understand you're hurting. But to be honest, I'm more worried about your career than your love life. If anyone at all gives you any shit, or if you're told you're under investigation for making racist comments, you let me know immediately. You also have a right to Union representation if you are accused of anything like that. Meanwhile, keep driving on, and be circumspect in anything you say. Even friendly banter can now be misconstrued, and definitely don't talk political things.\"\n\n\"Yes sir.\" said Teddy. I dismissed him. After he left, I looked at Cindy.\n\n\"That was dirty pool on Della's part.\" I said. \"Glad you stood up to her, ranks notwithstanding.\"\n\n\"Hell, I told off the Police Chief after you were called a racist by that SDOJ bitch.\" said Cindy. \"I'll stand up for my people. Anyway, I know Della's a Liberal. She was very angry that Governor Jared won re-election, and I think she's not in alignment with you and the Chief.\"\n\n\"What about you?\" I asked. I'd never asked before, and I caught Cindy by surprise. But she only showed that for a second, and recovered quickly.\n\n\"I have the unique perspective of seeing America from a Canadian point of view, and greatly appreciating what America is.\" she said with alacrity, and pride. \"I also am a lesbian, and while I am not ashamed of that in any way, I do feel I've had to suppress some thoughts and feelings in the service of the Police Force. One reason Jenna and I broke up is because I would not be as out front and political as she is about things.\"\n\nI nodded. \"It must be tough. Brownlee was calling you a 'dyke' all the time just to get you, and all of us, riled up.\"\n\n\"My family's objections to my orientation hurt far worse.\" said Cindy. \"And speaking of that... I have never figured out how you knew, when you called me into your basement office that time.\"\n\n\"Oh, that was simple.\" I said as casually as I could make my voice sound. \"Observation, deduction, and knowledge.\" \n\nA green crowbar was waved in my general direction.\n\nPart 22 - The Letter\n\nOn Friday, April 28th, I was called to the front desk. A tall, thin man in a brown suit, curly brown hair, and gold-rimmed glasses was in the lobby.\n\n\"Commander Troy,\" he said, \"I am William Farnsworth, of Succup & Payne, P.C. I have this letter for you.\" He handed me a sealed envelope.\n\n\"This is from Leonard Sharples.\" he said. \"He instructed me to give it to you if he died or was put in a position where he could not reasonably talk to you in private. His conviction created that scenario.\"\n\n\"Okay, thanks.\" I said skeptically. I signed for the letter. I then went and got Cindy, and we walked to the Crime Lab.\n\n\"I need to make sure this letter is safe to open.\" I told Christina Cho. She ran it through infrared and ultraviolet lights, then exposed it to a high-radiation source like an x-ray machine to kill any anthrax spores that might be there. Then she opened it inside a sealed hood, using the glove inserts.\n\n\"Nothing dangerous, Commander.\" she said. I took the letter and read it. It said:\n\n\"Commander Troy,\n\nIf you are reading this, I am dead or in prison and cannot talk to you. You once asked me to continue the investigation into Jonas Oldeeds and his organization, and their child trafficking activities. You should be able to solve this code with your abilities and the help of your teams. It will lead you to evidence that you can follow to destroy the Oldeeds Organization as I was never able to. Good luck. Sergeant Sharples.\n\nThere followed blocks of letters in groups of five, obviously a code of some kind. There was nothing else in the envelope, and no clue as to how to solve the code. This would be a stern test of the Iron Crowbar's abilities...\n\nPart 22 - Epilogue\n\nSunday, April 30th. The Orange Order dinner was held at the back room of The Steakhouse. With Cindy Ross making arrangements, we were going to eat at a place with good food!\n\nBecause it was not the February or August promotions times, there were no promotions, only a few pay grade raises for Patrol Officers. The big deal was medals.\n\nI did notice Della Harlow and Janice Holloway sitting together at the opposite end of the room from me, Cindy, and Chief Griswold.\n\n\"Commander,\" said Corporal Kirkpatrick, \"I'm hearing rumors that Bowser is going to be elected into the Orange Order next fall.\" Those of us who heard him laughed.\n\n\"He'd be a great mascot for us.\" I replied. \"But his owner might not appreciate sharing him.\" When Kirkpatrick peered at me, I said \"My daughter, Corporal. Despite rumors to the contrary, I'm not Bowser's owner. My daughter is, and if you don't believe me, just ask her and she'll tell you.\"\n\n\"Har!\" growled Chief Griswold. \"But one thing is true: that little girl does not love that dog more than you do, Crowbar!\"\n\n\"That...\" I said, \"... is very true.\"\n\n* * * * * * * * * * * * * * * *\n\nMay 1st. The weather was good; beautiful and sunny, and still fairly cool. The Police Force was assembled in the bleachers behind the Police Headquarters building. The Press were there with their cameras, including Meredith Peller of Fox Midtown. I gave her a short sit-down interview in the Press Interview room, which irritated Priya and righteously pissed off Bettina. Tough shit, I thought to myself.\n\nAmong the awards given, an Achievement Medal was presented to Christina Cho, who helped handle the frozen mothballs that proved to be so dangerous. I used this Awards Day as an opportunity to get Myron and Mary Mahoney Milton Commendation Medals for their service in data mining, and Lainie and Sonali got Achievement Medals. A few other Patrol Officers received Achievement Medals for various things, presented by their Precinct Captains.\n\nAs always, the final awards were Purple Orders, and we had one this time. As Chief Moynahan read the citation, I pinned a Purple Order with four, count them four, oak leaf clusters upon the Uniform jacket of Captain Teresa Croyle.\n\nAnd then with some degree of humor about it, Chief Moynahan read the citation as Captain Croyle pinned a Purple Order with one oak leaf cluster onto my uniform, with a whispered commentary about desk duty forever. My allies on the Council had won the battle against the Haters, but even the citation was not clear on exactly which incident the Purple Order was for: the helicopter crash or the gunshot to the girdle. It didn't matter: I would now be wearing a gold-framed purple rectangle on my uniforms.\n\nAnd last, the pi\u00e8ce de r\u00e9sistance. Bowser was wearing his Police bandana and his badge on his collar, and looking exceptionally handsome. He was also wearing a body harness and a leash, which he really did not need. He led the way, escorted by Carole and Marie, who had huge grins on their little faces as they proudly came up with Bowser to me. I was sitting down in a chair that was brought out. Bowser sat down right in front of me, Carole and Marie behind him.\n\nI did not allow the pain in my back to stop my presentation of this award. As Chief Moynahan read the citation, Bowser became the first of our great K-9 Corps to be awarded the K-9 Lifesaving Medal, which I pinned upon his collar.\n\nI had never taught Bowser to 'shake hands', but as the Police Officers clapped and cheered, Bowser raised his right front paw, which I took into my right hand. Just at that second, the Police Photographer snapped a photograph, which would show me shaking hands with Bowser, and Carole and Marie smiling brightly. \n\nI obtained three copies of that photo and put them in black frames. One stayed in my office, then was moved to my personal office in The Cabin. Carole and Marie got the other two, and would keep and display that photo for the rest of their lives.\n\n* * * * * * * * * * * * * * * *\n\nI was later sent a DVD of that evening's national Fox News 'Special Report' broadcast. It ran:\n\n\"And finally tonight,\" said the host, \"some months ago, we brought you the story of hero dog Bowser, who led Police to a little girl in a ditch suffering from acute hypothermia, thus saving her life. Our Fox News Midtown affiliate reports that the Police honored Bowser with their Lifesaving Medal today.\"\n\nThe screen showed the picture of me shaking hands with Bowser, with Carole and Marie attending, as the host said \"The little blonde girl in the photo is the girl that Bowser saved on that very cold night. The other little girl is the dog's owner. And would you look at the smiles on their little faces! The presentation was made by Police Commander Donald Troy, no stranger to heroism himself with two Police Department Medals of Valor.\"\n\nThe other reporters on the panel did the requisite ooh-ing and aah-ing, then the host said \"A hero we can all look up to.\" before signing off...\n\nFinis."
    ],
    "authorname": "WifeWatchman",
    "tags": [
        "mystery",
        "police drama",
        "crime drama",
        "iron crowbar"
    ],
    "category": "Non-Erotic",
    "url": "https://www.literotica.com/s/gods-and-crowbars-ch-04"
}
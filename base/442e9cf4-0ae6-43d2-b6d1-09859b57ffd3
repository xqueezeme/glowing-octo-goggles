{
    "title": "Adventures of Hollywood Jim Ch. 40",
    "pages": [
        "\"The Days of Rage\" had been a long-gestating film project in tinsel town. The spy thriller had gone through numerous writers, directors and actresses. It was originally envisioned as a project for Angelina Jolie, but she'd dropped out, saying she was tired of playing the gun-toting chick in film after film. Then Penelope Cruz signed on, and then dropped out. Somebody at the studio must've realized that putting a Spanish girl in a film set in London about American spy activity just didn't work. Kate Hudson now seemed a perfect fit for the film. And she'd expressed her excitement when we met at John McDonald's house not long ago. But now she dropped out after accepting a chance to work with her mom in a different film. \n\nNow word came from Hollywood Pictures that \"Days\" was back on schedule. John McDonald would still be directing, but the new star would be Jennifer Aniston. When I heard that, I thought \"interesting choice\". Filming would be in London, and it had been quite awhile since we'd been there. And we'd be there for 2 months of principal photography, not a bad gig. It had been quite awhile since I'd seen Jennifer, but I doubted she'd recognize me anyway. Chris would be with me for this gig for a change, we were both suckers for big trips like this. London had been very good for both of us and we hoped that magic would be there again. \n\nIn \"The Days of Rage\", Jennifer played an American lawyer sent to London to settle the estate of her estranged father, a former Military intelligence officer who has made her the sole heir to his estate. When his death is ruled a murder, she starts her own investigation, which leads her down several dark alleys of danger. It sounded pretty average as far as spy thrillers go (I was a Bond man, myself) but hey, London is London. \n\nWe arrived in London amidst a steady drizzle. A normal director would've cursed the elements, but John was ecstatic. He was hoping that he'd have a murky atmosphere to match the story and he was getting it. I only wished I could've brought a better raincoat than what I had, which was nothing. The first few days would be exterior shots mostly designed for atmosphere, and Jennifer wasn't due to arrive for her scenes for another day or two as she was shooting a guest spot on \"30 Rock\" back in the states.\n\nWe spent the better part of two days filming exterior scenes with other actors outside of different London landmarks. The sound would be looped in later. Chris and I got some good \"behind the scenes\" shots amidst this. Remembering how John had chewed him out on \"Dreamer\", he kept his distance from John and his cameras out of sight.\n\nFinally we got word that Jennifer had arrived and we'd be shooting her scenes the next day. Jennifer had a cute assistant named Beth working with her whom she'd known since she filmed episodes of \"Friends\" there and she was a lowly \"gofer\" for the production company. Beth was a London girl and got on the studios good side by offering to share her London flat with Jen, thus saving them money on hotels. And she got on my good side when we met. She was a perky blonde I could tell had great legs, even when clad in denim jeans and a wool pea coat.\n\nWe were gathering our gear for the day's shoot when we saw her.\n\n\"Morning!\" she said with a perky tone \"I'm Beth, Jennifer's assistant. You must be the photographers?\"\n\n\"Yes, how ya doin' love?\" Chris said in his fast talking style \"I'm Chris, that's Jim, East Coast Image, that's us.\"\n\n(Always the consummate salesman, he could've sold used cars this way too)\n\n\"Pleasure, Jennifer's eager to see your work. She heard about your work on other films.\" She replied.\n\n\"Well, we do our best, right Hollywood?\" he said turning to me.\n\n(Uh-oh, there's that name again)\n\n\"Oh, yes! Absolutely\" I quickly replied.\n\n\"Wonderful, I'll tell Jen you're here.\" She said as she walked away, then turned around.\n\n\"Did he call you Hollywood?\" she said looking confused.\n\nChris looked at me with a smirk.\n\n\"Uh, yes, it's a long story\" I said trying to wave off any further questioning.\n\n\"I'd love to hear it.\" Beth said as she walked away.\n\nOnce she was out of sight, Chris turned to me.\n\n\"I'd love to hear it...did he call you Hollywood?\" He said mocking Beth's voice\n\n\"Aw, knock it off, man.\"\n\n\"You never seem to embrace that name do you? Face it man, you're a star.\"\n\n\"Well, if we're stars, how come we're dashing after the crew van that's leaving without us.\" I said as we dashed off to get seats on the van going to the shooting location.\n\nThis days' shooting would take place at a country estate called Quarterdeck that was owned by a former British Navy Admiral. It looked very classy, and perfect for the home of a naval officer Jennifer was meeting in the film. As the cameras rolled, Jennifer made her entrance driving her character's classic green Jaguar XKE. There were small clusters of fans looking to catch a glimpse of the \"Friends\" star. Chris went to meet with one of the crane operators about some overhead shots and I headed for the coffee trucks. I heard Beth's voice and someone else's.\n\n\"Oh! Jim, glad I found you I wanted to introduce you to Jennifer...\"\n\n\"Hi, I'm Jen...Wait a minute! I remember you!\" she said with a finger slightly pointed for emphasis.\n\n\"Yes, I think we met in New York.\" I replied to her.\n\nJennifer looked great in her character's stone gray trench coat that was belted tightly at the waist. Black slacks were seen below. \n\n\"Yes, Mr. Hot shot!\" She said with a big smile.\n\nBeth looked at her with a quizzical expression.\n\n\"So what're you doing out here? Working?\" she asked.\n\n\"Oh, yes, can't turn down a great chance like this.\"\n\nJennifer was called away by a production assistant to meet with John. \n\n\"Hey, we gotta catch up soon!\" she said as she walked away.\n\n\"So you've met before?\" Beth asked.\n\n\"Yeah, we did the photos for Rhianna's tour and I got her tickets.\" I said, trying not to brag.\n\n\"Give her anything else?\" Beth now asked.\n\n\"Huh?\" I was confused.\n\n\"Oh, just a thought. See you later Mr. Hollywood.\" And she walked away.\n\nOh brother, what's happening here?\n\nOnce we wrapped, we were all exhausted as we dragged ourselves to the crew van. Chris had disappeared with some studio honchos and I was stuck carrying the bulk of our gear and hoping I could get a decent seat with enough space for me as well. Then I heard Beth's voice calling to me.\n\n\"Jim! Jim! Come ride with me!\" she said as she dashed up to me.\n\n\"Oh, uh, that's OK. The van will be fine.\" I said\n\n\"Aw, come on Jim, go with her!\" I heard one of the crew guys say, noticing how much better Beth would be as a traveling companion.\n\n\"Guess that settles it. Lead on, Beth.\" I said.\n\nBeth's car was a sleek, black Range Rover.\n\n\"Wow, nice wheels!\" I said as I loaded my bags into the back.\n\n\"Hey, hot shot.\" I heard as I slid into the back seat.\n\nJennifer was riding up front with Beth.\n\n\"Oh my, um, great to see you again.\" I said, feeling pretty dumb.\n\n\"We didn't get to talk all day. It's been a long time.\" Jennifer said with a big smile as we headed onto the highway towards London.\n\nJennifer eagerly listened as I told her about the Triple Threat Tour, but I could tell she was thinking about the fun we'd had in her hotel room. Her eyes told the real story.\n\n\"Hey, you wanna hit a pub, Jen?\" Beth said.\n\n\"Oh! Great idea! What's a good one, Beth?\" she said excitedly.\n\n\"There's one that's like a block away from my flat.\"\n\n\"Perfect, we can have a few pints.\" She said with a cockney accent that made Beth laugh. \"And if we got loaded we don't have far to stumble, do we mate?\"\n\nRosie Ryan's was a great pub in town that Beth knew well. It was suitably dim in just the right areas and light in others. The owners' knew Beth's client and quietly shuttled us to a private part of the bar where we wouldn't be disturbed by fans. But Jen was eager to mix with the locals for a bit. We talked and drank several pints of Guinness. It had been a long time since I'd had British beer and it really hit me fast. Beth seemed to be an expert and Jen was no slouch either. Soon I was getting a little unsteady in my movements. Beth and Jen were giggling like schoolgirls at my condition. I was chuckling too.\n\n\"I think someone's a little tipsy.\" Beth said with a smile.\n\n\"Hey, easier to take advantage of.\" Jen said with a smirk, making us laugh all the more.\n\n\"Oh, yeah, that's it, take advantage of the American.\" I said.\n\nWe'd all lost track of how many beers we'd had, it was well after 10PM, possibly even later (I couldn't remember if I'd set my watch for London time or LA time).\n\n\"OK, mates...let's head home.\" Beth said.\n\nBeth, Jennifer and I stumbled out of the pub. The night air was cool and even with the evening traffic, relatively quiet. I think Jen was happy that there were no photographers tracking her. Jen was sticking close to me, almost hanging onto me so she wouldn't totally stumble on the winding sidewalks. I was doing the same. \n\nBeth's flat was indeed close to the pub, just as she'd said.\n\nWe stumbled inside the cozy flat. Beth and Jen went upstairs and changed into sweatpants. Beth poured glasses of brandy and the drinks flowed again, along with the laughs and flirtation from all. Jennifer was sitting close to me and I felt her hand on my leg. Her head was soon resting on my shoulder as Beth had turned on the TV and clicked through the channels. Her hair smelled so beautiful. Soon, Jennifer was asleep on my shoulder, I was fading fast too. I looked over at Beth and her eyes were closed too. I wondered if I should try to make a quiet exit. I saw Beth awaken.\n\n\"Oh my...must've dozed off there.\" She said rubbing her eyes.\n\n\"Yeah, I think all that beer's hitting me.\" I said.\n\n\"I've got a spare room upstairs, you can spend the night if you'd like.\"\n\n\"Oh, no...um maybe I should see about a cab.\"\n\n\"You'll never get one this late, plus you're pretty far away too.\"\n\n\"Uh, OK I'll stay.\" I said.\n\n\"Great, come on.\"\n\nI carefully moved Jennifer onto a more comfortable spot on the couch, pulled a quilt over her and followed Beth upstairs. Her spare room was small with a foldout couch. Once we were setup, Beth went to her room and I was quickly asleep. I was awakened by some movement in the dark room. Then a soft voice;\n\n\"Jim? Hey baby...\" \n\nI slowly turned over.\n\n\"Jennifer?\"\n\n\"Hi...\" she said.\n\n\"What're you doing?\"\n\nJennifer slowly climbed into bed with me\n\n\"I wanted to see you...I missed you, it's been a long time.\" She said as she came in close to me and we kissed. She had a heavenly scent about her, even in the darkness. I could feel her fingers on my cheek as she kissed me again.\n\n\"Hi, hot shot.\" She said with a soft voice that must've been accompanied by a smile.\n\n\"Hi back.\" I replied.\n\nMy hands were under the covers and I slowly caressed her shoulders and as they drifted down her back, I realized something.\n\n\"You seem to be, um...\" I started to say.\n\n\"Topless? Of course...\" she replied \"Something else too...\"\n\nI felt her take my hand and it felt more bare skin further down. She was naked, alright.\n\n\"Like what you feel?\" she said\n\n\"Yes, I do. Maybe...I should be the same.\"\n\n\"Oh, yes...please do.\"\n\nI quickly got my t-shirt off and underwear off and we were soon touching each other's naked bodies and kissing. Jennifer felt just as soft as I'd remembered and her little sounds of passion were so hot. Her hand went down to my quickly growing dick and she began to slowly caress it.\n\n\"Oh my god...I missed this so much.\" She whispered.\n\n\"I missed you too...\" I replied.\n\nMy hands went for her tits and her cute little nipples, making them erect the more I touched them. Jennifer's breathing was getting even more pronounced. I knew she was feeling my touch throughout her body.\n\n\"Oh baby...uh-huh...yes...\" she said with a passionate whisper in my ear.\n\nShe gently pulled me over so I was on top of her.\n\n\"Please...I've missed you...missed how you feel...\" she said. \"Don't worry about anything...just do it...just do it baby...\"\n\nI knew just what she meant.\n\nMy dick slid into her pussy, I forgot how good she felt too.\n\nI heard Jennifer gasp, but I could tell, even in the darkened room, she was smiling widely at me.\n\nAnd I began to fuck Jennifer Aniston, loving the warm feeling of my dick in her sweet pussy and how it gripped me in return. I was groaning somewhat at the feel of this lady, and she loved ever second of it.\n\n\"Oh Jim...ooooooyes baby...uh-huh...oh yeah...oh!\" she said with another little gasp \"Mmmm keep doing that Jim...keep doing that.\"\n\n\"Oh yeah Jen...so hot...\" I was now saying.\n\nI stopped fucking her and let my hard dick sit inside her as I kissed her deeply, my arms wrapped tightly around her.\n\n\"Hey let's try something...\" she said.\n\nJennifer began to sit up, I leaned back and she had me wrap my legs around her and she did the same to me, I don't know what position this would be, it's been a long time since I read (no, make that never read) the Kama sutra. But she knew what she was doing. And it was very hot. Must be all the yoga she did.\n\nWe were now facing one another. The only light streaming in was from the streetlamps outside but I could still see her beautiful tits. In this position I could wrap my arms around her better and pull her close. \n\nAll the better to fuck her with!\n\nI got a good rhythm going with her now and she had tilted her head back. Her sexy breaths had now become loud moans that only got louder as our fucking increased.\n\n\"Oh god Jim! Oh baby....uh-huh! Oh GODDDD...I'm coming!!!\" she cried out as she gripped me closer than ever to her. Her gasping breaths were so sexy. They came out of her quickly, then slowly faded out. I hadn't cum yet but wasn't rushing things with her, she was enjoying every minute with me.\n\nWe kissed some more, our tongues mixing with one another. \n\n\"I wonder if Beth heard us?\" Jen whispered.\n\nWe both giggled silently.\n\n\"Your turn baby...\" she now said as she removed herself from my dick.\n\n\"Lay back.\" She said.\n\nMy dick was still super hard and now slick with her pussy juices. Jennifer lay beside me and held my dick. \n\n\"Mmmm...nice.\" She whispered as she moved down and slowly took me into her mouth. Her lips encircled the head and I felt her tongue dance along the tip. Then she slid all the way down its length.\n\n\"Oh you taste so good, Jim.\" She said\n\nShe continued to slowly bob up and down the length, jerking me with her hand too, for added effect. Even in the darkness, it looked so sexy, and felt even better. She came off it and held it softly as she let it trace the outline of her mouth.\n\n\"Like that baby?\" she said\n\nI could only nod in response, then croak out a weak-sounding \"yes\".\n\nI could see her smile a little.\n\n\"I heard that...you're such a sweetheart, baby.\"\n\nJennifer slid my dick back into her mouth and I really felt her lips and tongue now. And I could hold back no longer.\n\n\"Jennifer...UHYEAHHH!\" I said as I exploded into her mouth.\n\nShe swallowed every bit of me, and continued to jerk what was left out of me. Then I felt her slowly crawl up the bed so we were lying close together. \n\n\"Pretty good, hot shot.\" She said before kissing me on my cheek.\n\nWe pulled the bedcovers up over us and went to sleep.\n\nI turned slightly and looked at my silver Timex watch, it read 8:15AM. We were lucky to have a day off as John planned to spend the day reviewing dailies and planning the interior shots we'd be doing at another studio in London. Jennifer had wrapped her naked body around me as we'd slept, and she still had the same heavenly scent about her. I could hear water running in the bathroom next door. \"Good,\" I thought. I carefully got up from the bed and looked around for my shirt and underwear, hoping I could find some coffee downstairs and maybe make a few phone calls. I heard Jennifer breathe in and slowly awaken.\n\n\"Mmmm...hey baby.\" She said sleepily.\n\n\"Hi, I'm gonna see if Beth's got any coffee.\" \n\nShe looked at me and smiled\n\n\"OK, I'll be down later.\" She whispered.\n\nI gave Jennifer a soft kiss on her forehead as she turned over and went back to sleep. I had just my underwear and blue t-shirt from last night on as I went downstairs, then suddenly heard sounds in the kitchen. Uh-oh, not good, but I don't have much choice now, hope whomever's there has an open mind, I thought. Just hope it's not somebody's mother. Or father for that matter!\n\nA petite blonde was at the stove and was wearing an oversized gray t-shirt that barely covered her ass. \n\n\"Hi, um...morning.\" I said, somewhat confused at who this person was. \n\n\"Mornin' luv.\" She said with a smile as she turned around. \n\nThe front of her shirt had the faded logo of the Manchester United soccer team and definitely showed there was a nice set of tits underneath.\n\n\"Dream on, Jim\" I thought to myself.\n\n\"Sleep good?\" she asked\n\n\"Uh, yes...um, who are you?\" I replied\n\n\"Oh, I'm Sophie, Beth's sister.\" She said as she extended her hand. \"Beth lets me sleep here when I have business in town. Better than having to drive all the way home and all. You must be Jim, Beth said you were here with Jennifer.\"\n\n\"Yes, hi...where's Beth, in the shower?\"\n\n\"Uh-huh.\" She replied.\n\nSophie was just as blonde and just as cute as Beth. I was hoping I didn't get an instant hard-on just by seeing her like this, especially since I didn't know who she was until a few seconds ago. Now, I was intrigued.\n\n\"So is Jen still asleep?\" she asked\n\n\"Yes, she...wait a minute, why ask me?\" I was a little confused.\n\n\"Well, she's not on the couch, and her room is empty... so, I think I know where she slept.\" she said nonchalantly.\n\nI wasn't sure what to say at this moment.\n\n\"Oh come on, I know where she slept...and I think she's sleeping good too.\" She said with a sly smile now.\n\n\"Uh, why do you say that?\" I asked.\n\nThen it hit me how she might've known.\n\n\"Well...the walls here aren't all that thick...and I'm not a very sound sleeper sometimes.\" She started to say.\n\nThen she leaned back on her elbows against the kitchen counter and the way her shirt had ridden up it seemed like she had no underwear on.\n\n\"...and I heard everything you two were doing.\"\n\nI was speechless now.\n\n\"Everything?\" I asked \n\nA rather stupid, no really stupid question, now that I thought about it.\n\n\"Oh yes...I heard it all.\" She said smiling now. \"And um...I really liked it.\"\n\nWe were staring at one another now. I knew what was on her mind.\n\nI stepped over to the counter and started to make a cup for myself.\n\n\"So, did you and Jen have fun?\" she asked\n\n\"Uh, yes...\" I said hesitantly\n\n\"She's got a nice body doesn't she?\"\n\n\"Y-yes.\"\n\n\"You fancy her don't you? I can tell, she said you were a great guy.\"\n\n\"We only met once before.\"\n\n\"Well, Beth and I have known her a long time and I know when she's really into a guy.\"\n\n\"You do, huh?\"\n\n\"Uh-huh...and she knows the same about me.\"\n\n\"Well, that's good to know, I guess.\" I said while stirring my coffee.\n\nSophie had been standing next to me the whole time, leaning back against the counter and trying to get my attention. Her shirt had ridden up further and I tried not to look at her pussy which could be clearly seen now.\n\n\"Did you know we've shared guys before?\"\n\n\"Oh...uh...really?\" I said as my coffee spoon rattled.\n\n\"Got your attention didn't I?\" she said with a laugh.\n\n\"Yes, you did.\"\n\n\"Don't be so nervous, Jim. I like you.\" She said in a more reassuring tone.\n\n\"We just met, how do you know how great a guy I am?\" I said with a bit of sarcasm as I went over and sat down at the table and she went back to her cooking.\n\n\"So...what was Jennifer like in bed?\" she casually asked without even looking at me.\n\nOh, boy. Here we go again.\n\nShe now looked at me with this sneaky smile.",
        "\"Wow, you never give up do you?\" I said.\n\n\"Of course not! I wanna know! I always wondered what guys think of her in bed, she's certainly not gonna tell me!\"\n\nI didn't know what to say next, I was really getting roped into a sexy truth or dare game with this Sophie, and she was looking to win at all costs.\n\n\"She's got nice boobs, doesn't she?\" she said.\n\n\"OK, yes...yes she does.\" I replied, with a bit of mock aggravation thrown in.\n\n\"Better than mine?\" she said.\n\nAnd without hesitation, she pulled her shirt up for emphasis.\n\nI now saw that Sophie was completely naked under her shirt, and looked great too! She had gorgeous B cup size tits, tipped with pink nipples that she tweaked for added effect. It was like she wanted me to see how turned on she must be. Needless to say I was dumbstruck at what to say now. She had a great toned belly that lead down to a totally bare pussy, she could've been a Playmate back home with no problem. And she was right in front of me.\n\n\"Well? Better than Jen's?\" she now asked, breaking the silence.\n\nI bit my lip slightly, wondering what I should say to this naked beauty.\n\n\"Yes...better than Jen's.\" I said\n\n\"Good...glad you like them.\" She said in a seductive voice as she let the shirt drop to the floor. \"I can really tell you like them.\"\n\nSophie slowly came over to me and leaned over so were face to face with one another.\n\n\"Oh...how can you tell?\" I asked softly.\n\n\"Because...\" she said as she softly kissed my cheek and whispered in my ear \"I can see your, um, thingy.\"\n\nOh shit! I was definitely getting hard thanks to her seductive ways, and she could see it, mainly because it was causing a nice tent pole effect in my underwear. Sure she was coming on to me and all, but I would've liked to have some control of my own!\n\n\"Oh, um, sorry.\" I now said\n\nGreat, another great thing to say at this moment!\n\n\"Why are you sorry?\" she said as she touched my underwear and it grew even more visible \"I like it.\"\n\nShe now reached inside and it popped out, causing her to smile and giggle.\n\n\"Oh my...it's beautiful...and big.\" She said slowly.\n\nWe kissed now, with much tongue action on her part as she caressed my dick. I couldn't help but look at those beauties dangling just slightly in front of me. I now reached out to touch them and she immediately reacted with a soft moan.\n\n\"Ohhh baby...that's soooo nice...\" she purred. \"Touch my pussy, Jim.\"\n\nI reached down and she was very wet, my finger easily sliding down the middle and just slightly penetrating her, making her breathe in slightly.\n\n\"Oh yessss...that feels so good.\" She whispered as she continued to kiss me.\n\nSophie's hands felt so nice on my dick as she continued to caress and slowly jerk it.\n\n\"Why don't you slide those off?\" she asked\n\nI slid my underwear off and she knelt down, looking up at me as she held my dick closer to her mouth, letting it trace around her lips.\n\n\"Ohhh... this is gonna be nice, baby\" she said as it slowly entered her hot mouth. Sophie's lips encircled my dick now and I felt her tongue caress its entire length inside. She kept her eyes on me and I quickly felt a rush of ecstasy as she began to bob her head up and down on it. This was too strange. But she didn't seem to mind as she got my dick slippery with her lips and tongue. She slowly came off my dick and slowly rubbed her hands up my chest to my face.\n\n\"Nice...\" she whispered.\n\nSophie began to ease my shirt up and off of me, once it was off she straddled my lap and we kissed. My dick was rubbing, but not penetrating her pussy and her little moans showed she was getting off on the feel of being unconsciously teased by me. As we continued to kiss, my hands began to caress her tits, they felt so smooth. Sophie also had a sweet smell about her too.\n\n\"Oh my god Jim...wow.\" She said softly.\n\nJust then I heard footsteps.\n\nBeth walked in and gasped suddenly.\n\n\"Sophie! What the fuck are you doing?\" she said with a gasp.\n\n\"Having a bit of fun.\" She said with a smile as she hugged me.\n\nBeth quickly looked around.\n\n\"It's one thing to share guys but couldn't you do it in the bedroom?\" she said in a somewhat serious tone.\n\n\"Jim doesn't seem to mind.\" Sophie replied as she held my face close to her beautiful chest.\n\nBeth looked at us, then around the corner and up the stairs. Then had a look of \"should I?\" on her face. \n\nThen she untied her bathrobe.\n\nBeth looked quite stunning. She had similar tits as her sister and her pussy was clean too, in more ways than one since she'd been the one in the shower.\n\n\"I think I should have some fun too, since I saw him first.\" Beth said as she now walked over to where we were and kissed her sister's cheek. Then mine and offered her equally pretty tits for me to suck on. \n\n\"Sophie's such a naughty girl sometimes, you know.\" Beth said.\n\n\"You're no angel either!\" Sophie replied with a giggle as she continued to rub against my hard dick.\n\n\"Let me see what he's got.\" Beth said\n\nSophie slowly rose off my lap and Beth smiled as she saw the full picture.\n\n\"Wow...Jen's a lucky girl!\" she said.\n\n\"I thought so too, but he wouldn't tell me what she was like.\" Sophie replied.\n\nThe two sisters now looked at this desired (me?) man who sat before them.\n\n\"I guess I'll find out.\" Beth said with a lusty smile.\n\nSophie smiled with equal lust as her sister now straddled me and worked my dick inside her pussy. She let out a slow, gasping series of \"oh's!\" as it went inside her. Sophie watched with fascination. Beth was incredibly tight, for a moment I wondered if I really was as big as I'd heard other ladies say to me at this moment.\n\nNah, not me!\n\n\"Uhhhh god...\" Beth finally said once her gasps had subsided.\n\n(But then again)\n\nSophie was rubbing my head as Beth began to slowly rock back and forth on me. I held her waist and began to pull her back and forth as well. Beth's moans were super-sexy and her sister seemed to moaning too. I could feel her pussy gripping me tighter the more we fucked. I turned slightly and saw Sophie rubbing herself with a look of lust on her face as her sister was getting fucked.\n\n\"Oh my godddd...fuck me baby....uhyeahhh!\" she cried as her head dropped back.\n\n\"Mmmmm...do her...do her...do it...\" Sophie said softly as her hand caressed her pussy.\n\nBeth's moans grew louder and more passionate.\n\n\"Baby....oh god...oh my god...gonna cum!!! OHHHFUCKKKK!!!\" she cried\n\nThen she suddenly sat up and a burst of liquid shot out of her that stunned me.\n\n\"Ohhhhhhyessssss!\" she gasped \"You made me squirt!\" she said\n\nSophie gasped too, then sounded just as excited to see this.\n\n\"Wow!\" she said \"You OK?\"\n\nI now pulled Beth close to me and licked her pretty nipples that were super-erect, she caressed my head as I did this, then leaned back and let out a long slow moan.\n\n\"Oh my god...that's incredible\" she finally said as she leaned forward again and kissed me. \"I feel wonderful...\" she said as she kissed me again.\n\nBeth slowly rose up off my lap and my dick was a candy coated glaze with her climax, Sophie and Beth both looked on with excitement.\n\n\"Your turn, Sophie.\" Beth said slowly.\n\nSophie smiled as she felt my dick, slick from her sister's climax.\n\nIf Sophie was anything like her sister, I'd better have something stronger than a kitchen chair. I stood up now and we held one another loosely. Sophie kissed me and bent over the counter, her ass looked so pretty. She looked over her shoulder at me with a sly smile.\n\n\"Oh, you naughty girl.\" Beth said, still sounding exhausted.\n\nI got up behind Sophie and held her hips softly.\n\n\"You okay?\" I asked Sophie.\n\nShe nodded.\n\n\"She'll be fine, baby.\" Beth said\n\nSophie's ass cheeks felt so nice and my dick slid into her pussy effortlessly.\n\n\"Ohhhhhhhyesssss...\" she hissed \"Oh my god he feels great!\"\n\n\"Do her nice Jim...the way you did me...\" Beth said as she stood next to me and watched my dick go in and out of her sister.\n\n\"The way you did Jennifer....\" Sophie said \"Oh god...fuck!\"\n\n\"Oh yeah...wow you're hot!\" I finally said\n\nSophie's hot ass felt great to fuck. It was just as hot and tight as Beth's. \n\n\"Feelin' good Sophie?\" I asked her, knowing the answer\n\n\"Oh god yes!\" she said with gusto.\n\n\"Yeah, fuck her good Jim\" Beth said as she stuck close to me \"fuck my sister good\"\n\n\"Mmmm yeah...bend over Beth.\" I said\n\nShe quickly assumed the same position as Sophie and I was quickly buried in Beth now.\n\n\"I wanna make you squirt again...\" I said as I fucked her\n\n\"Oh god...you will...oh god\" she gasped\n\nSophie eagerly watched her sister getting fucked again.\n\n\"Do her Jim...make her cum!\"\n\nBeth let out another gasp and I heard a dribble of liquid hit the floor as she went limp in my arms as I pulled her close to me and we kissed.\n\n\"My turn.\" Sophie said\n\nSophie faced me now and I eased my dick into her pussy, this time I could watch her face as she smiled and gasped as we fucked. \n\nI didn't last long though.\n\nAll my fucking of these sisters had pushed me as far as I could go and I knew I'd be the one exploding, and fast.\n\n\"Oh god...I'm gonna cum now!\" I said quickly\n\nI pulled out of Sophie with just enough time to explode on her belly.\n\n\"Oh yeah!\" she cried \"Wow!\"\n\n\"Oh...nice Jim...so nice...\" Beth said lovingly as jerked the last bits out of me.\n\nNot much later, Jennifer came downstairs and found us at the breakfast table. The girls were sipping coffee and I was reading the newspaper.\n\n\"Hey, morning...sorry I slept so late.\" She said\n\n\"Oh, don't worry about it, we got a day off.\" Beth said\n\n\"So what do you think of Sophie, Jim?\" Jen asked as she poured herself a cup.\n\n\"Oh, uh, she's really great.\" I replied.\n\n\"You two get to know each other?\" she said\n\nBeth and Sophie smiled at me.\n\n\"Oh yes, we did.\" I replied."
    ],
    "authorname": "hollywoodjim",
    "tags": [
        "jennifer",
        "london",
        "blondes",
        "sisters",
        "oral sex",
        "totally shaved"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/adventures-of-hollywood-jim-ch-40"
}
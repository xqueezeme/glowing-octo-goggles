{
    "title": "Goodbye, La La Land",
    "pages": [
        "Author's Note: The following story and the characters within it are purely products of my imagination. They are meant to be enjoyed only as a fantasy. Any similarity to real people or events is unintentional.\n\nThis story is about characters who are over eighteen years of age.\n\nReproduction of this story in any form without express written permission from the author is prohibited.\n\n\"You know who I like?\" said Brett. \"That girl who wears those sleeveless sweaters. Wendy. God, it's like she was born to wear those things.\"\n\n\"Doesn't she seem kinda stuck up, though?\" Gary said.\n\n\"Nah, I don't think so. Anyway, what if she was?\" he grinned playfully. \"I'd happily take the job of fixing her attitude. Who knows, maybe all she needs is a good licking.\" Brett stuck his tongue out, smiling.\n\n\"Oh, for the love of God.\" Gary rolled his eyes, knowing Brett was just making fun of him.\n\n\"No doubt, dude,\" said the one they called T. \"But sweaters? Are you crazy? You ever been to a football game?\"\n\n\"Football? Come on, gimmie a break, T.,\" said Brett.\n\n\"No seriously, dude. Who cares about sweaters? That cheerleader, Diane. What I wouldn't give to pull up that skirt, and dick her right under the fucking bleachers!\"\n\n\"Would you guys please stop?\" Gary laughed nervously--his face hot.\n\n\"What do you think, Jim?\" said Brett, clearly enjoying how Gary squirmed at the way they were talking.\n\n\"Kelly Granger,\" nodded Jim, as if his mind was long made up.\n\n\"Fuckin' A!\" T. agreed.\n\n\"I don't get you guys,\" said Brett. \"What is it about her that everyone likes?\"\n\n\"Tits, dude! What kind of stupid-ass question is that?\" countered T. \"Don't you want to just sit on top of her and squeeze those things around your--\"\n\n\"Shhh. Jesus, T.,\" Gary whispered as the rest of the guys snickered around the table.\n\n\"You know the coolest part though,\" Jim ignored Gary. \"She'd probably be totally up for it!\"\n\n\"I know!\" said T. \"I'm tellin' ya--one of these days, dude! Did you see her the other day, wearing that tank top and those shorts? Shit, man!\"\n\n\"What, do you think I'm blind?\" said Jim. \"Her locker's right next to mine, dude.\"\n\n\"Alright, so Gary.\" said T. rubbing his hands together in anticipation. \"Who would you like to fuck?\"\n\n\"I can't believe you guys.\" Gary shook his head.\n\n\"Oh come on, lighten up, Gar,\" said T.\n\n\"You know who Gary likes?\" said Brett excitedly.\n\n\"No.\" Gary looked threateningly at a smiling Brett. \"No! Don't, man.\"\n\n\"Oh, come on. This is great. You know who he thinks is cute? That girl, Kathleen.\"\n\nThe others stared at him blankly while Gary looked around and felt anxious perspiration forming on his forehead. He reached out to touch Brett's arm in an attempt to get him to stop. \n\n\"She's in Polson's English class. Dark hair, kinda plain lookin', sits in the corner, you know?\"\n\n\"You don't mean that really short girl?\" Jim asked.\n\n\"Right, right!\"\n\n\"Wait, wait, wait, wait.\" T. held up his hands and stopped everything. \"Why haven't I heard about this? You think that girl is hot?\"\n\nGary shifted in his chair, uncomfortable that Kathleen was being brought up in this conversation. \"I don't know. I like her smile,\" Gary said, his voice impatient with embarrassment.\n\n\"She's a bean-pole, dude!\" blurted T., followed by another round of hushed laughter.\n\n\"How would you know with those giant grandma sweaters she wears?\" joked Brett. He looked over at his friend's red face and saw how upset he was. \"He's kinda got a point about her smile, though.\"\n\n\"I'd like to see her with her hair down, actually.\" Jim affirmed.\n\n\"You got a sweater fetish, or something, Brett? And you.\" T. knocked Jim's shoulder. \"You and chicks' hair, man. I swear to God. Are you guys all on crack? She's just so. . . I don't know. Blah.\"\n\n\"No,\" Gary said, shaking his head. \"I don't think she's 'blah' at all.\" His spare, matter-of-fact way of speaking always had a way of making his friends listen. \"I kinda like the way she looks. You know?\"\n\n\"No, dude,\" said T. \"I don't know. Totally unfuckable, man.\"\n\n\"Not to me.\" Gary's quietly sincere admission penetrated their flippancy like a silent arrow, and a hush settled over the table.\n\n\"Hm.\" said Jim. \n\n\"That's cool,\" said T. \"Hey, you should ask her out.\"\n\nThey all looked with unspoken hopefulness at their shy friend.\n\n\"No, no,\" said Gary quietly. \"Come on, let's just. . .\" He waved his arms in circles in front of him, indicating the pile of books on the table. \"You know.\"\n\n\"Gentlemen,\" said Mr. Sark, the librarian, who seemed to enjoy patrolling the back corners of his domain in search of mischief. \"You boys are in here to study aren't you?\" he groused, shaking his head almost humorously. \"Come on, now. Let's get back to work.\"\n\nThe boys hushed quickly, when a sudden loud bump interrupted them. The vibrations traveled through the wood of their built in seats. It seemed to come from the other side of the study partition they were all huddled in.\n\n\"What the hell was that?\" T. stood up and looked on the other side of the half wall. \"Hm. Weird.\" He surveyed the area quizzically.\n\n\"What was it?\" asked Brett.\n\n\"I don't know; nothin' I guess.\" T. sat back down. \"One of you guys fuckin' with me?\" \n\nJim raised his eyes in a spooky searching motion and wiggled his fingers, \"Woo Ooo Ooo.\" They all laughed. \"So who are you inviting to your Halloween party, T.?\"\n\n\"Well, not you, smart ass!\"\n\n<center>* * * * * * * * *</center>\n\n\"Ouch,\" whispered Kathleen, rubbing her sore shoulder, now safely out of sight in the opposite corner of the library. A stupid, inexplicable panic had prompted her to jump out of that booth as soon as possible, and now her shoulder was paying the price. She felt like an idiot. Still, she was grateful that she had been able to slip behind one of the nearby bookshelves before that T. guy saw her.\n\nKathleen loved listening to guy talk, and opportunities like that were rare. She still couldn't believe they were talking about her. Gary? Gary Bennett? He was in her Chemistry class, but she remembered him from a few classes she had shared with him over the last couple years. She couldn't understand it. Gary had always seemed so stand off-ish to her. He usually talked in grunts to everyone but his friends, and he hardly ever made eye contact with anyone. Her practical side scoffed at the rising feelings of giddiness in her stomach. As much as his words stung, Kathleen was more inclined to believe T.\n\nEven so, their dirty talk had turned her on. She couldn't help it. She was strangely anxious to get a good, fresh look at Gary when she got the chance. The voice she'd heard on the other side of the wall had seemed so sincere. She blushed to herself, embarrassed at her chronic, overactive imaginings of what could be. \n\n- - - -\n\nKathleen evaluated herself in the full-length mirror on the bathroom door. T. had it right, she thought. \"Blah\" was a pretty dead-on description. She sighed and turned sideways, seeing her dark hair trickle in strands behind her shoulders. She could barely make out that she had breasts at all underneath her oversized t-shirt and the thick cardigan sweater she wore over it. Her butt was similarly nonexistent underneath the loose jeans that lay in bunched folds down her legs. \n\nShe leaned toward the mirror to try to get a fresh look at her face, and grimaced at that stupid freckle on her cheek. With an optimistic impulse, she tried out a smile, and was immediately sorry she did. She looked like she did in the family pictures--as if being forced to smile at a live cat-skinning--and just shook her head, groaning. She even tried pretending she was laughing at something, and then had to look away to prevent having to see her face turn red on top of it all. It was awful. She somehow felt less hideous without the smile. What was that Gary guy thinking? \n\nMaybe they knew somehow that she was listening, and were just playing games with her. Still, that crew could be annoying, but they never had the reputation of being malicious. It was a small high school, and those guys were almost inseparable, especially Gary and T. Two more opposite people she couldn't think of, and yet their friendship was obvious. She wondered what it would be like to have friends like that.\n\nShe stood silently, still in conflict with her imagination between what was and what could be. Her practicality surrendered with a resigned exhale, as she removed her sweater and unbuttoned her jeans. She bent over, her hair slipping off her shoulder and behind her head as she turned to watch the denim slide down her legs on to the bathroom floor. She stepped out of them, and turned to face herself in the mirror, noticing how her white panties peeked out underneath the hem of her baggy t-shirt. She crooked her head inquisitively, trying to see herself through Gary's eyes.\n\nPressing on, she lifted her T-shirt up across her flat tummy and over her head, tossing it onto the floor with her jeans. They had mentioned Kelly Granger. Kathleen was so far the opposite of Kelly that the comparison prompted a hopeless chuckle at the image in the mirror. She wished she were more like her. Kelly had boobs that turned heads, an ass that no one could ignore, and on top of it all, she had a kind of sexy confidence that Kathleen really admired.\n\nWhat if Gary looked at her the way the rest of the guys looked at Kelly. Was that even possible? The mere fantasy of such a thing made her shoulders shrug in a shiver of excitement. Her mind was playing games with her again. For a moment, she ignored those ugly taunts of self-consciousness and wrapped her hands back to unhook her bra, pretending she was stripping for a phantom, entranced Gary. She pretended she was the sexiest girl in the world, trying to mimic the look of the models she'd seen in her sister's fashion magazines. Her face turned a hot red as she slipped the bra strap off her arm and pulled the garment away from her breasts. No matter how wild her imagination, they just couldn't play the part, and she finally dropped her bra, along with her stupid delusion, onto the floor.\n\nAfter a silent moment, feeling her skin exposed to the cool, still air of the bathroom, her thoughts of inadequacy slowly succumbed to her more overpowering instincts. Her fingers automatically took their place on her nipples. Although still technically a virgin, she was brought up not to be ashamed of sex. She had stimulated herself to orgasm so many times that her routine was second nature. Her hair tickled across her shoulder, as her nipples slid into the sharp curves separating her fingers. She pinched them lightly, and rubbed them until they were little peaks poking out toward the mirror.\n\nHer hands slipped along her thin waist and her thumbs hooked around the waistband of her panties, finally sliding them down and letting them drop around her ankles. She stepped out of them, and brushed her hair away from her face.\n\nNow finally naked in front of the mirror, she felt so insignificant, so little--like she was the runt of the litter. The tiny freckles on her forearms, the bruise she'd gotten the other day on the inside of her calf from that damn kitchen chair, her plain face, and her small boobs--they all just seemed the antithesis to what guys wanted. Her sister was so gorgeous; she sometimes wished she had been born with one tenth her looks. Thank God her body's reflection had nothing to do with how good it could feel. She was a sexual creature, and she knew it--probably more so than most girls her age--even those that actually had sex. \n\nShe glanced at the tiny patch of hair that remained between her legs. She bit her lip, pretending once again that Gary was looking at it. A lot of guys apparently liked girls who shaved. Ever since she'd tried out her sister's vibrator--one of the more embarrassing private moments of her life--she had started down an ever-widening road of experimentation. The silver dildo, which after some persistence and a little pain had given her the best orgasm of her life, was only the beginning. Kathleen had a love-hate relationship with her sexual imagination, which seemed boundless, and she had given shaving a try in hopes that that it might further increase her sensitivity to the toy. She was right. She suspected she was a bit of a masturbation junkie, and even now, a familiar ache grew inside her pussy.\n\nShe became steadily aware of her breathing, and let her fingers slip down and tickle the tiny curls above her clit. She pretended to look into the eyes of the phantom guy who was watching her--trying again to believe that she was turning him on, this time because of the way she felt, rather than the way she looked.\n\nA shaky sigh escaped her lips as she marveled at how intense her eyes looked. Her finger started to instinctively slide lower just as she had a tantalizing thought. She sucked her lips inside her teeth and bit down, listening for any commotion outside the bathroom. As far as she knew, her mom was still making dinner, and her dad hadn't arrived home yet. A fresh surge of excitement rushed through her body at the idea of watching herself cum in the mirror.\n\nKathleen awkwardly bent her legs and rested her bottom on the tile in front of the door. She felt a strange, exciting rush as she spread her thighs for the mirror, and reached her arm behind her to support her body. Her pussy lips reflected back at her--exposed and vulnerable below her tiny patch of dark hair. \n\nHer breathing shortened even more in her growing urgency. She leaned forward and spread herself open with one hand as the other finally teased along the nub of her pleading clit. God, it felt good--blatantly showing off her most private parts to her imaginary voyeur.\n\nHer fingers played along the outer lips of her pussy, feeling her slick warmth starting to seep out from inside. Her toes stretched apart and dug into the cold tile. Her unsteady knees shivered in response to the taut muscles in her thighs while her finger tortured her impossibly sensitive clit.\n\n\"Ohh.\" Her eyes closed instinctively. \"Wait wait,\" she whispered--reminding herself to be patient.\n\nHer eyes flung open with renewed purpose. Her breath whisked in through her teeth as she urgently slid her feet toward her and rested her weight on them, lifting her bottom and squatting on the floor. Her hair lay along one ear down the front of her shoulder as she looked into her own brown eyes as if they were Gary's, and stuffed a finger inside herself.\n\n\"Oh, my God.\"\n\nHer spread legs almost buckled underneath her, reacting to her ravenous pussy's acceptance of her impatient fingers. She looked at her stretched lips, now wrapped tightly around two of her knuckles. She flexed her fingertips and pushed against the soaked inner walls, wrapping them up underneath her pubis. It created a wet, slurping sound that reverberated within her confined space between the bathroom counter and the wall next to her. \n\n\"Ohh.\"\n\nShe basked in her body's blatant, unashamed reaction to the stimulation. When she withdrew her fingers, they glistened with her juice under the intensely focused parabolic light recessed into the bathroom ceiling, and she raised them to her face, smelling the deep musk of her own cunt. She touched her fingertip along the bottom ridge of her nose, wiping a tiny bit of her pussy's lubricant against it. She breathed it deeply, and the unapologetic sexual aroma seemed to travel directly into her fantasies. She wondered hungrily what Gary might smell like.\n\nShe needed to cum. Her hands went to work in earnest on her demanding cunt. She became aware of the thin layer of sweat that was covering her body when she noticed the strands of her mussed hair sticking to her forehead in the mirror.\n\n\"You want me to cum, Gary?\" she whispered to herself, feeling her face burn with embarrassed excitement even as she said the words. Her thighs started to shiver and weaken. Images of him entered her mind, and her sex clouded imagination revealed him in a way she'd never thought of before.\n\nShe wondered at the mystery behind his deep-set green eyes, and she imagined what his hands might feel like if they touched her. Would his tongue feel cold on her nipples? Would she be able to feel his cock throbbing with blood as he pumped it in and out of her soaked pussy? Would he pull out and squirt on her tummy if she asked him to? What would his cum smell like? God, what would it taste like? She wished she could try it all.\n\nHer mind flooded with lusciously dirty images, and her fingers fucked against the soft flesh inside her cunt. Her legs strained to keep her small body upright, and she pretended she was doing it for Gary's benefit--to get him off. In her own way, she was making herself work for it. \n\nShe stifled a moan that just ached to escape her lips. She felt a tear roll down her cheek, and her voice cracked toward the mirror timidly--intensely quiet, \"Ohhh, Guuhhod. Just watch. Just be quiet and w-w-watch.\"\n\nThe inevitable buzzing of her building orgasm rose from her lower thighs. It crackled inside her like a disappearing fuse as she fingered her clit deliberately, and without patience. Her upper arm brushed against her nipple. Her other hand grabbed the bathroom counter to steady her shaky body. She gasped in breaths of air, blinking in blurry determination to keep her eyes open--fighting not to scream out.\n\nFinally, the torrent of release washed over her like a violent ocean wave. Her self-conscious feelings had long since melted away as she struggled to focus on her sweaty, pleasure racked body in the mirror. Her reflection and the arousal in her eyes at that moment, in contrast to the plain, tiny girl she'd seen earlier, was something she found inexplicably sexy--even beautiful.\n\n\"Ooohh. Oh.\" Her violent, shaky whispers escaped her parted lips as she looked through the mirror into her glazed eyes. In her blurry haze of lost awareness, her body almost toppled and she had to reach her arm back to catch herself from falling. Her bottom rested on the floor, and she let her legs relax against the seams in the door leaking light from the hallway outside the bathroom. \n\nOnce again, she evaluated herself, wondering what it would be like to look through her imaginary lover's eyes at that moment--beautifully oversexed, naked, exposed. Her soaked pussy had that insatiable look of impermanent satisfaction, and a thin sheen of perspiration reflected off her small breasts. \n\nShe shrugged her shoulders--breaking her fantasy with a sort of \"I am what I am\" embarrassment--and breathed in the intoxicating mixture of scents her body had just created. As the last remnants of her beautiful orgasm faded into memory, she suddenly caught a glimpse of that genuine smile she'd tried so hard to reproduce earlier. \n\nShe wondered bashfully whether Gary would've liked it.\n\n<center>~ ~ ~ ~ ~ ~ ~ ~ ~</center>\n\n\"So, wait. Explain your fucked up theory to me again.\"\n\n\"They aren't theories, T. They're observations.\" Gary said with a sly grin, convinced that his best friend just deliberately refused to understand them. \"Which one?\"\n\n\"The women thing.\"\n\nGary rolled his eyes with a smirk. It figured. He unwrapped his sandwich and pulled the apple out of his lunch bag, pursing his lips as if T. wasn't worthy of yet another explanation.\n\n\"Come on, freak, just tell me,\" said T., his voice rising above the lunchroom din.\n\n\"Okay, but are you listening this time?\"\n\n\"Don't make me come over there and kick your ass.\"\n\n\"Ooo, All the way over here? Alright, the basic premise is that both men and women exist in two worlds simultaneously. One world is called 'La La Land' and the other is called 'Real Life'. You--you live in 'La La Land' most of the time.\" Gary smiled.\n\n\"Hardy har har.\"\n\n\"They're both pretty self explanatory. 'La La Land' is a magical place populated with pop stars, actresses, and models. It's total fantasy--all based on image. 'Real Life' is, well, real life.\"",
        "\"Uh-huh, alright.\"\n\n\"Anyway, in both 'La La Land' and 'Real Life', women can be broken down into two separate categories: 'Obtainable Women' and 'Unobtainable Women', although most of 'La La Land''s population is 'Unobtainable'.\"\n\n\"Okay, so who in 'La La Land' is 'Obtainable'?\"\n\n\"I can't think of anyone, actually. I'm just hedging my bets there.\" Gary smirked.\n\n\"Dude, you're so fuckin' crazy analytical. Okay, just tell me, who do you consider an 'Obtainable Woman' in 'Real Life'?\" T. mocked Gary by using his fingers to put virtual air-quotes around all Gary's terms.\n\nGary felt that tinge of frustrating excitement at the question. It always seemed to be a special kind of torture talking about girls in 'Real Life'. Whenever he tried to actually talk to them instead, he was usually a miserable, awkward failure. With a couple gut wrenching \"let's be friends\" talks resulting from his only attempts to alter the trend, he had almost convinced himself that 'La La Land's' slick promise of happiness was a sham. Admitting to his friends that he liked anyone simply made his inevitable failure that much more painful. He knew where his best friend's questions were leading. Why the fuck had he said anything to Brett about Kathleen in the first place? He'd harbored a growing infatuation for her since the beginning of the semester. He wished he had more control over these things. He wished he could just ignore it.\n\n\"I don't know,\" he said finally.\n\n\"Yes you do. What about that girl? Kathleen? Why didn't you tell me you liked her, dude?\"\n\n\"I don't know. What does it matter? I don't know her. How can I even really like her?\"\n\n\"You tell me.\"\n\nGary sighed, frustrated that T. wasn't going to let him off the hook. \"I don't know. Have you ever just watched her?\"\n\nT. smirked.\n\n\"Of course you haven't. I love the way she looks at people. It's so cool. She just seems so happy just to sit there and watch everyone--doodling or something in her notebook.\"\n\n\"Doodling?\" T. looked sideways at Gary.\n\n\"Yeah, well I guess that's what she's doing.\" He sighed, knowing he wasn't being very convincing. \"I can't explain it. I love how her jeans are way too big for her legs, and the way she pulls up the sleeves of her sweater. And then. . .\"\n\n\"What?\"\n\nT. wasn't going to get this. \"Well--she takes off her shoes.\"\n\nT. raised his eyebrows and crooked his head as if Gary was on crack.\n\nGary shrugged. \"I don't know. She takes them off and then plays with them with her feet. I don't even know if she realizes it.\" Gary didn't know why it fascinated him so much. It was--sexy. She was sexy. He shrugged helplessly and let himself smile. \"I just think she's cool, that's all.\"\n\n\"Hm.\"\n\n\"Eh. What's the difference? Nothing's ever going to happen.\"\n\nT. grinned faintly at his friend, and as if blurting out the inevitable, \"You really need to get laid, you know that?\"\n\n\"Shhh, T. Jesus.\" Sometimes Gary still couldn't believe T.'s bluntness. \"Man, no one's going to 'lay' me. You'll think it's stupid, but at this point I just think it would be cool to hold a girl's hand, you know?\"\n\n\"You're right. I do think it's stupid.\" T. smiled mockingly. \"Sex isn't like it is in the movies, Gar. You need to get over it.\"\n\n\"Yeah,\" Gary sighed ironically. \"I can imagine. That's why the movies are called 'La La Land'. Remember that porno you made me watch last year? That's an hour and a half I'll never get back again--thanks a lot.\"\n\nT. grinned proudly as he aggressively chewed on his food.\n\nGary lowered his voice. \"That's the perfect example, actually. Some gorgeous girl, screaming her way through ten orgasms while the ugly old geezer just uses her any way he wants. On the surface, it's total 'La La Land' bullshit--totally for men. Underneath, though, it's just so sad. She's acting, T. Hell, she's hating it. I mean, God. Tell me there's more to it than that.\" He shook his head back and forth. \"Sex in 'Real Life'--I just can't imagine what it would be like.\" He threw his hands up. \"I have no idea.\"\n\n\"That's exactly why you need to get laid.\" T. chuckled. \"It's just sex, dude. Trust me, you just need to relax. Look, obviously porn isn't real, but if you're thinkin' that women don't enjoy sex, you're living in the stone ages.\"  \n\n\"It's not that. I mean, I know women enjoy sex. It's just that. . . I can't imagine them enjoying it with me. I just don't want to be the old geezer. You know what I mean?\n\nT. pursed his lips and furrowed his brow as if Gary was a perpetually unsolvable riddle. He crooked his head in an impatiently empathetic expression. \"Why don't you just ask her out?\"\n\nGary's stomach leapt at just the thought of it, but he knew that feeling all too well. He'd tasted disappointment too many times. \"I hardly even know her, man. I can't just ask someone out I don't know.\"\n\n\"I could invite her to the party. You can dress up and pretend you're not such a freak for once.\"\n\n\"You do and I'll kick your ass. I can take care of myself, man.\"\n\nT. shook his head in exasperation. \"'Unobtainable' then, eh?\"\n\nGary nodded with half a smile. \"Exactly.\"\n\n- - - -\n\n\"All right, everybody,\" said Mr. Litten, the Chemistry teacher. \"First lab today--finally--and it's an easy one. I figure you guys are capable of choosing your own partners, so go to it. Just make it quick.\"\n\nGary still didn't really know anyone in this class. None of his friends had wanted to take Chemistry--they all went for that joke of a physics class with Miss Adams. His eyes jumped around the room nervously as everyone else seemed to pair off and find partners without so much as an eye blink. Meeting new people was a nerve racking process for him. He carefully snuck a glance at the one person he wished he had the courage to ask. She was standing beside her desk, absent-mindedly grabbing at her leather sandals with her bare toes and looking almost as unsure as he did. He watched her survey the room, and then her eyes dropped to the floor, as if she was deliberately contemplating something. She was so strange. He loved watching her. All of a sudden, her focus shifted directly from the floor to his face, and he quickly turned away, trying to give off the illusion that his gaze was just passing in her direction on its way somewhere else. He wanted to kick himself.\n\n\"Dammit,\" he whispered, and stood up from his chair, trying to get back to the task at hand--frustrated as his seeming inability to keep his eyes off of her. She was looking exceptionally sexy today--he couldn't understand why the other guys didn't see it. It was one of those rare days when she didn't have a sweater on, so he had gotten a great view of her slender arms. Her hair was back in a ponytail and he loved the way it tickled the rim of her t-shirt's neckline--a shirt that wasn't quite as loose fitting as those she usually wore. His stomach was anxious with defeated frustration. What could they possibly have in common? He wished he had the courage to ask her to be his partner.\n\n\"Uhm. You wanna be my partner?\"\n\nGary looked over and saw Kathleen staring back at him with her gorgeous brown eyes.\n\nHe couldn't believe it.\n\n\"Yeah, uhm,\" he stammered. \"I'm not. . .\" his defense mechanism was on autopilot, already working to come up with some self-effacing excuse as to why she would not want to work with him. Why was he so terribly nervous? He remembered some of T.'s words earlier, and took a deep breath. \"Okay.\"\n\nHer eyebrows furrowed with doubt. \"Oh. Did you want to partner with someone else?\"\n\n\"No, no.\" He just didn't want her to think he was staring. He looked around the room for a lab station at which they could settle. \"Here, let's go over there.\"\n\nGary grabbed his backpack and they walked over to the station. He set it down and immediately zipped it open to begin fiddling with his notebooks and pens inside. The pressure was on. He felt the terrible silence stretching forever. He wanted to be easy-going. He wanted her to be comfortable. What could he say to her?\n\n\"So, you're Gary right?\"\n\n\"Yeah,\" he said, keeping his eyes down. He could at least pretend he didn't know exactly who she was. \"You're Kathleen?\"\n\n\"Yeah,\" she said. He tilted his head up from his focused notebook and pen organization and caught her eyes studying him. A hint of that smile he loved so much barely escaped the corner of her mouth. \"Are you sure you don't want to work with someone else? It's really okay.\"\n\nGod, she was something. Her voice was so friendly, her eyes seemed to see right into him, and the optimistic uncertainty of her smile just made his heart melt. He was absolutely sure. \"No. I mean yes. Yes, I'm sure.\"\n\n\"Okay, good,\" she said simply, and dropped her notebook on the desk--leaving what he felt was another painful silence between them. She opened the notebook, and as she absently flipped through it to find a blank page, Gary noticed that all the white space around her notes was covered with hand drawn sketches, but she was too quick for him to really see anything. Her tiny fingers were limber and gentle with the pages. Almost as if to fill the silence, Kathleen looked up and added, \"You're one of the smart ones.\" Her eyes squinted as the rest of her smile washed over her face. \n\nNow having been able to see it up close, Gary was even more amazed by her smile. In an instant she could transform her face from that of a focused, serious looking girl, into someone of pure, light-hearted optimism. It just took over everything, from the crinkling of her eyes and temples to the tentative revelation of her pretty teeth. She seemed to forget herself in it, and the way it invaded his soul just made him want to understand the mystery behind it--to get to know her, and get closer to her.\n\n\"What are we supposed to do?\" she was saying.\n\nGary was still working to stop himself from blushing at her nice compliment. He'd made so many mistakes in the past by scaring girls off with the intensity of his gaze. He was afraid they thought he wanted something from them. He tried to stay focused. \"We're supposed to write down our observations of a candle. Everything we can think of. It's kind of an exercise to teach us the basics of scientific method.\" Gary's eyes wandered down and noticed her bare feet, remembering that she'd been wandering around the classroom without her shoes on. Somehow their absence made his heart quicken, but he thought she might have forgotten them. \"Did you need to get your shoes?\"\n\n\"Oh yeah.\" She looked concerned, and glanced toward her desk where they lay. \"Okay.\" She quickly pranced over and retrieved them. She slipped her feet in without strapping them on, and they flopped against her soles on the walk over. She plopped down next to Gary. \"Got 'em,\" she smiled. As soon as she said it, her shoes slipped from her feet to the floor below, and her toes playfully tugged at the leather straps.\n\nGary had to look away to hide his giddy smile.\n\n\"Well the lab sounds pretty easy, huh?\" \n\n\"Yeah, I'm not sure why we have to do it, it's all pretty basic stuff.\" Gary lit the candle and readied his pen.\n\n\"Look, it's fluttery,\" she said thoughtfully. \"Is there a breeze somewhere?\" She looked upward, twisting her head around on her shoulders with her mouth absently hanging open. \"There's a vent up there; that's probably why, huh?\" Gary smiled at her enthusiasm and took advantage of the opportunity to look at the tiny, delicate ridges of her ear before her head snapped back and looked at him inquisitively.\n\n\"Probably.\" He cupped his hands around the flame and they both saw it straighten out. It started bouncing around the wick again when he pulled his hand back. \"Looks like it, but we don't want to draw conclusions, just make observations.\"\n\n\"Oh, right. I like how when the air hits it, there's this sort of blue finger hanging on for dear life at the edge--before it gets blown away forever. And it makes that papery noise, like it's yelling for help.\" She looked up into his eyes as if studying him more than the candle. Listening to her easy words, for the first time he felt comfortable looking back at her. Her face read his and she slunk her head into her shoulders with a sheepish smile. \"Is that stupid?\" He wondered with impossible anticipation what it would be like to run his fingers through her hair.\n\n\"No.\" He snapped himself out of it. He had lingered too long again. Damn! \"No. I think it's great.\" He rolled his eyes to himself, vowing to quit staring at her, and tried to find a more scientifically appropriate way to write down her observation.\n\n\"Look, it's doing a little fork thing on top. Why does it do that?\"\n\nGary instantly felt at ease again--she didn't seem intimidated by his quiet, intense demeanor. He enjoyed the fresh way her eyes looked at the flame, and he concentrated more on the expressions on her face than on his assignment. \"I don't know.\" Her face was like a magnet for his eyes. \"You're really good at this though.\"\n\nHer head shifted to face him, and she raised her eyebrows in playful defensiveness. \"You're just making fun of me now.\"\n\n\"No, no, no.\" He offered a nervous laugh to hide his growing frustration with himself for trying too hard. \n\n\"I'm just kidding! What do you see?\" she asked earnestly.\n\nAs they continued their work, he found the debilitating tension in his shoulders slowly melting away, and his constant worry about what to say was quickly replaced with an unexpected ease. Ultimately, she found much more beauty and complexity in the flame than he'd ever thought to look for, but she seemed grateful for his ability to translate her thoughts into more scientific terms.\n\nKathleen inevitably seemed to get bored with the candle. \"You know what would be good right now? A hamburger on the barbeque.\" She groaned rapturously. \"I always get hungry this time of day. They should have two lunches,\" she joked. \"One at 11:00am and then another one at like 2:00pm.\" Almost as an afterthought, \"And they should have barbeques.\" She smiled like it was the best idea in the world. \"Don't you think?\"\n\n\"Yeah, I usually get hungry during this class too. I could use some salt.\"\n\n\"No no. Hamburger. Hamburger! Try to keep up. Salt on the barbee? What's the matter with you?\" she seemed to enjoy poking fun at him.\n\nGary's mind was increasingly pre-occupied. He imagined what it might be like to touch the skin hiding under the clean white t-shirt hugging her shoulders, or run his finger along the tiny vein that ran down the corner of her neck next to her taut hairline. Just the smell of her clothes, so different from that of his own, brought a flash of hard feeling inside his pants, and made him have to shift in his chair. It wasn't right. He was sure she would be disgusted if she knew what he was thinking, but, God, she was even prettier than he had thought. \n\n\"No,\" he continued. \"It's just my way of saying something salty, or something snacky, like I say 'Sugar' for something sweet, you know?\"\n\n\"'Sugar' for something sweet?\"\n\n\"Well, okay, the way I see it, there are three major food groups.\"\n\n\"I thought there were like, five food groups though.\"\n\n\"Well, yeah that's what the nutritionists say. To me it all boils down to 'Salt', 'Sugar', and 'Coke'.\"\n\nShe smiled, trying to stifle a laugh--a common reaction. \"You're kidding right?\" Even when she was ribbing him, she had an attentive look of genuine interest about her that made his stomach ache with even more of what he was sure was an unrequited excitement.\n\n\"No. Well, I mean it's not a set of rules I'm saying people should follow, I'm just saying it's how I look at things. It's like Aristotle's 'Poetics': guidelines for great tragedy based on observations of the best examples and the human condition.\" Already he knew he must sound like a total nut-job.\n\n\"Ah. Tragedy,\" she nodded, teasing him. \"Gotcha.\"\n\nHe looked at her sarcastic smile and broke out laughing. She was right. It was crazy. \"You're laughing at me now,\" he said giddily.\n\nKathleen reached out and placed her hand on his leg. God, what was she doing? \"No, no! I've never heard anyone put it quite that way before. Is there more?\"\n\n\"Oh yeah.\" He nodded, matter-of-factly as if there was no limit to his insanity. \"Actually, 'Salt' is substantial food. Your hamburger, for example--that would be part of the 'Salt' food group. 'Sugar' is sugary to the taste, like a candy bar. And 'Coke' isn't necessarily Coca-cola specifically, it's anything like that. Root beer would be part of the 'Coke' food group.\"\n\n\"Okay, so what else is in the 'Coke' food group?\" She used virtual quotation marks like T. had.\n\n\"Cut that out!\" he laughed, and surprised himself when he reached out and playfully pulled her hands out of the air. They were small in his, and surrendered to his fingers with no resistance. He pulled back with a strong mixture of excitement and worry that he'd overstepped his bounds. His hands rested awkwardly on his lap, even as she carried on with her infectious laugh. \"Well,\" he continued, clinging dutifully to his explanation in progress. \"First of all there are sub-categories. There are 'Foods' and there are 'Substances'.\"\n\n\"Okay, wait.\" Her hand lightly rested on his leg again. She seemed to have no fear of that kind of thing. It was probably nothing to her, but he felt her hand's weight--its warmth. His breathing shallowed; he hoped it wasn't obvious. \"What's the difference?\" Her bare feet swung playfully underneath her. \n\n\"It's best to go by example. A 'Food' is anything that belongs in a particular food group that can't be used to make any 'Foods' in another group. For example, hamburger is a 'Salt Food'.\" Her beautiful hand was still there. God! \"A 'Substance' is anything that can be used to make a 'Food' in another group, but when eaten by itself is considered a 'Food' of the group to which it belongs. For example, eggs are a 'Salt Substance.\"\n\n\"Okay, Professor,\" she giggled.\n\n\"Oh, sorry.\" Gary was embarrassed, and growing ever more nervous.  He wanted to take her offered hand in his. He wanted to squeeze it and feel her fingers--to run his palm up the tendons in her forearm. Why was she doing this to him?\n\n\"No, you can't stop now! So why are eggs a 'Salt Substance'? You don't fry an egg up and put sugar on it, do you?\" A look of horror washed over her face. \"Oh God. Do you?\"\n\nGary closed his eyes in mock impatience, and her horror instantly turned to laughter. He tried not to give her the satisfaction of his self-deprecating smile as he said simply, \"Cookies.\" His cheekbones were starting to ache. He hadn't felt this way in a long time, but a budding sadness lingered within him. It wasn't good for him to get this excited.\n\n\"Of course! Cookies!\" Kathleen laughed, and finally took her hand away. \"Oh my God. Did you come up with all this yourself?\"\n\n\"Sure, why not? I'm kind of a freak that way.\" He had to admit it, he was.\n\n\"No no no.\" She grasped his arm lightly. He was terrified that his inability to breathe in response to her every touch was a blaring beacon. He wished these tactile interactions didn't mean this much to him. \"I'm not laughing at you, I think it's so cool. Okay, so root beer is a 'Coke Substance' because of root beer floats then?\"\n\n\"Exactly.\"\n\n\"Ok, I think I've got it. So how does this help you figure out what to eat?\"\n\n\"Well, it doesn't really, but if I'm hungry, I always have to have 'Salt' before 'Sugar'. And I always have to have 'Coke' with 'Salt', but I can never have 'Coke' with 'Sugar'\"\n\n\"So you can never just sit down and have a candy bar? You have to have potato chips and a cola beforehand?\"\n\n\"Exactly. I figure if I'm hungry I should eat something substantial first, then treat myself to the 'Sugar' only if I still want it afterward.\" Gary chuckled at himself trying to fight off his tight nerves. \"It helps me keep my trim figure.\"\n\nHer eye's squinted at him in an expression of beautiful dumbfounded-ness. \"I can't believe I'm saying this, but that actually makes sense. Are there any other food rules I should know about? I mean, you're changing my life here, Aristotle.\" She giggled earnestly.",
        "\"Well, actually--\"\n\n\"Ladies and gentlemen,\" said Mr. Litten at the front of the room. \"I think we better go over some of your observations before we finish today. Who would like to start?\" The two of them shared a tiny moment of disappointment and turned to face the front amid the shuffling of papers and murmurs throughout the rest of the classroom. Gary's heart was alternately jumping on air, and then sinking into the floor. He'd made her laugh, and that was the best feeling in the world, but he was sure it couldn't last. He felt her hand again--this time pushing playfully against his shoulder. When he looked over she was smiling at him.\n\nShe whispered with her glinty, expressive eyes, \"You're a wacko you know that?\"\n\nHe shrugged and cracked a smile. \"I know.\"\n\n<center>* * * * * * * * *</center>\n\n\"Has it ever occurred to you that some guys might actually like girls who don't have tits the size of bowling balls?\" Adrienne was not one to mince words--especially when it came to sex.\n\nKathleen laughed into the phone receiver. Her sister always had a way of making her do that. \"You could'a fooled me.\"\n\n\"Seriously. You actually talked to this guy? Wow, that's great Kath! It's about time. I mean, obviously he likes you. Is he cute?\"\n\n\"Oh, man, Ree.\" She surprised herself with her gushing response. He really was. \"I didn't really realize it until now, though. He's kinda crazy, but really smart. I like it. He's very,\" she mocked Gary's clinical, matter-of-fact way of speaking in a low voice of authority, \"'Well, Kathleen, it's like Aristotle's modern-day food tragedy. Ruh-rah ruh-rah ruh-rah.' It's so funny! I don't think he really likes me too much, though. He's so serious, you know?\"\n\n\"That's so cool! I've never heard you talk like this. You actually think he doesn't like you? What's not to like? He looks at you when he thinks you don't see him right?\"\n\n\"I don't know.\"\n\n\"Yes you do. He does. Kath, I can tell he likes you from here, and I'm not even in the same state! Three food groups huh? If I ate like he does I'd. . . . Wait that kind of does make sense, doesn't it?\"\n\n\"I told you!\"\n\n\"Anyway, trust me, he likes you. Plus it's high time you saw a guy naked--I mean a real one.\"\n\n\"Ree!\" Kathleen blurted into the phone receiver with an embarrassed giggle.\n\n\"Kath!\" Adrienne mocked her little sister. \"What? Seriously! You're eighteen, you're sexy, you're funny. You need to get out of your head. You oughta feel him out. Lord knows this guy isn't going to make the first move. Maybe you should give him a thrill. You might learn something.\"\n\n\"What do you mean?\"\n\n\"Show him how pretty you are! You have no idea what kind of power you have. You have a knack for flying under the radar, but if you wanted to you could fuck all those guys silly and have them begging for more--even that 'T' guy.\"\n\nKathleen was sometimes embarrassed by how well her sister knew her. She just knew she would love sex if she tried it. Her fantasies had always been vivid with ideas of joyful, easy, crazy sex of all kinds--sometimes the perversity of her sexual utopia even surprised her. \"No way.\"\n\n\"Yes way! Look, you don't have to do anything. Maybe Gary's just an idiot and doesn't deserve you. But don't you dare waste the first time you have sex by being all passive and doe-eyed about it. You deserve better.\" \n\nKathleen took Adrienne's words in silently. She felt tears welling in her eyes.\n\n\"Kath?\"\n\n\"Yeah. I guess,\" she said weakly.\n\n\"No, no. I know. Sweety, you don't have to take my word for it. Hell, just wear some shorts and a tight t-shirt one day and see how he reacts. You'll see what I mean.\" Adrienne giggled naughtily. \"He sounds like he's the shy type; sometimes they're the best, Kath.\"\n\nWhat was she trying to do, torture her? Gary had such a tall, quiet strength about him. Thoughts of him leaning his sweaty, naked body over her--fucking her--assaulted her psyche. What if she did have the power to get a reaction like that out of him? The mere fantasy sent a familiar rush into the depths of her pussy. She suspected she'd be pulling out her vibrator tonight for one of her extended sessions.\n\n\"Wow. I don't know.\"\n\n\"Well, you make up your own mind. Just make sure that you go after what you want, not just what you can get. You'll get it. I promise. Do something wild!\" \n\nKathleen really did admire her sister. \"I miss you, Ree.\"\n\n\"I miss you too, sweety. I know you really like to watch people, but you're missin' out, Kath. You remember what I said. Your terms. Stay safe, but have some fun for cryin' out loud. It's just sex.\"\n\n- - - -\n\nKathleen had had to dig deep through her dresser to find a T-shirt that actually hugged her body, and the one she found was embarrassingly tight. She had almost changed when she looked in the mirror and saw how much her small boobs stuck out and stretched against the material. She felt like a wannabe sex-pot. Her legs felt strangely vulnerable and cold without jeans on, but it was still warm enough to justify the shorts she wore. A powerful rush of empowerment and nervousness filled her body. The second chemistry lab was today.\n\nShe sensed the reactions to her attire the minute she started walking down the hallway that morning. Her new level of exposure had her breathing in shallow puffs unless she concentrated and forced herself to relax. She caught guys staring down at her legs, and more attention than ever before was paid to her chest. She got an electric thrill out of it; her fantasies were playing out for real. Why hadn't she tried this before? She wanted to turn them all on, but one in particular was her target. The idea of her soaked pussy seeping its juice into her panties all day, and the thought that Gary might even smell her as she sat next to him that afternoon drove her crazy.\n\nAt lunch, while eating her home packed turkey sandwich and a soda from the vending machine, Kathleen smiled at the thought of Gary's three food groups, especially when she realized that her normal routine would be to revisit the vending machines after she ate and pick up a bit of after-'Salt' 'Sugar' in the form of a candy bar. She couldn't wait to see his face when she laid the latest head-scratcher she'd come up with on him.\n\nAfter eating, she found herself too filled with nervous energy to stay still for very long. She decided to burn some it off by taking a walk around campus. As she wandered by the basketball courts, she caught sight of Gary and his group of friends playing a pick up game. Seeing T. with his flamboyant and downright obnoxious antics on the court in contrast to Gary's more low-key brand of sportsmanship had her shaking her head in wonder at how those two could have become such good friends. They were practically inseparable at school, except when their class schedules didn't match. She wished she understood guys' friendships better. Inspiration struck her, and she quickly dropped her bag on the ground, sat down and then pulled out her notebook. A grin slowly formed across her face, stretching into a smile of hopeful affection as she began sketching.\n\nHer pencil moved quickly and confidently over the page, and she soon found herself whole-heartedly engrossed in her new project. She sat quietly in the grass, her knees raised to support her notebook--studying his muscles, watching the way he loved his friends more than the game, sketching the hidden fire behind his eyes--deeply and comfortably ensconced in her familiar role as the invisible watcher. She couldn't wait for later this afternoon, when she would try her hand again at being a participant.\n\n\"Tofu! Ha! How about that?\" Kathleen sprung it on him with glee.\n\n\"Well,\" Gary said matter-of-factly, \"I would classify tofu as a 'Salt Substance'.\"\n\nKathleen opened her mouth and exhaled sharply. She was annoyed by his seemingly perfectly prepared reply, but more by the fact that he seemed to give no reaction to her specially engineered attire. He kept not looking at her. \"You're just cheating now! Cheater!\" She reached her perpetually bare foot out and kicked him playfully in the calf.\n\n\"Ouch!\" Gary laughed--not the reaction she had wanted either.\n\n\"Oop, sorry.\" Her instinct was to reach down and pull his leg up. She wanted to squeeze and massage his calf under the auspices of apology. She wanted to feel his hands against the material of the t-shirt stretched over her breasts. She was already getting herself more excited than she should. If only he would just look at her.\n\n\"No no, it didn't hurt.\" Gary's eyes wandered away, focusing on the pages of her open notebook, and then they opened wide.\n\n\"Geez, did you draw these?\" Gary leaned over and touched the page, studying some of her sketches in the margin of her notes.\n\n\"Yeah.\" Her eyes lowered to the floor. Maybe she wasn't sexy after all. Maybe she'd never be sexy.\n\n\"Wow, these are. . . ,\" Gary stared silently at a particularly large sketch she'd drawn a few days ago. \"Is that?\" Gary smiled at the sketch. \"Is that Kelly Granger?\" He whispered.\n\nThat did it. Not one look. Not one single look at her legs, or the breasts that seemed to her to be popping off her chest. And now he was looking at some stupid drawing she'd done of big-titted Kelly instead of her. She felt so stupid.\n\n\"Can you just leave that alone? Okay?\" She quietly snapped the notebook away from him, deflated.\n\nGary's smile drained away as quickly as hers did. His eyes shifted uncertainly, but she was too disappointed with herself to try to make him feel better.\n\nThey awkwardly went back to work on their lab, recording their observations and drawing some conclusions.\n\n\"I'm sorry.\" Gary finally said, inexplicably as they finished up. His eyes were so earnest and sad.\n\n\"What? Why?\" Wait, what was he just looking at?\n\n\"I don't know. Maybe I said something wrong before?\" She saw it again; his eyes were lingering on her forearm, and then on her feet, and then away. Kathleen looked down and squinted at the sparse freckles on her arm and wondered what he could possibly be interested in.\n\n\"No, no, it's okay,\" she said absently, trying figure out what was happening.\n\nIn a rush, she realized it. He had been checking her out. He was so sneaky about it. It was so different from the way the boys in the hall had been watching her. He was sneaking peeks, not at her breasts, but at her hair. She caught him looking at her tummy, and when she looked down, she realized the hem of her tight shirt had ridden just slightly above her belly button. He wasn't looking at the obvious places--maybe he was just afraid to--but he was looking. A newfound excitement surged into her body. She playfully pulled her shirt down and felt her fingers against her navel, wondering what it would be like to feel the tiny whiskers of his chin against her tummy. She wanted him to not be afraid. She imagined him lusting over her, drinking in the flesh of her body until he could no longer control himself. Her eyes squinted as she tried to suppress a growing smile in the corner of her mouth while she watched him.\n\n\"What?\" He looked down at himself, and felt around his face for anything out of place. \"What'd I do?\"\n\nShe simply smiled and shook her head. \"Nothing.\" She caught him doing it again. When she saw it, her chest fluttered with innocent lust. She saw the veins in his arms, fresh from the exertions of playing basketball with his friends, and smelled the lingering aroma of his body's perspiration--proof of his manhood hiding behind a strange and gentle mind. He was so much taller than she was, and she loved the fantasy of making his knees buckle by giving him a blowjob. When she looked up, she caught his eyes locked onto her legs. It was only an instant before he pulled his gaze away, but she saw clearly the hungry, glazed expression on his face. She imagined what his reaction might be if she spread her legs under the lab counter, unzipped her shorts for him and fingered her seeping cunt until she came right there in the classroom. Excitement splashed over her like hot water, cooled only by the memory of how bitchy she had been to him earlier.\n\n\"Oh,\" she said, forcing herself back into reality and reaching to open her notebook. \"Yeah, I'm sorry. I just get. . . I don't know. I don't let too many people look at my drawings.\" She looked up, wanting to make sure she wasn't pushing them onto him. \"Did you want to see more?\"\n\n\"Can I? Those are really something.\"\n\nKathleen shook her head. \"No. They aren't, but I think we've clearly established that you're insane,\" she quipped, mocking Gary's own speech patterns. She tentatively opened the book to the sketch of Kelly. \"I don't know. I like to draw people.\"\n\n\"Damn, that's incredible.\" The sketch showed as good a representation of Kelly as Kathleen could draw. She had accentuated everything sexual about Kelly's looks that Kathleen loved, and that she felt Kelly was so good at accentuating herself. \n\n\"I think she's so cool,\" said Kathleen absently as she studied the articulate power of Gary's fingers, and the veins that spidered over the back of his hands. She wanted so badly to know what those strong fingers would feel like inside her.\n\n\"Kelly? Really? Why?\" Gary seemed surprised.\n\n\"Have you really watched her?\" She touched her fingers to the page so that they were right next to his, uncomfortable at sharing her own incessantly sexual thoughts about people. She was scared she was going to say more than she should, but she wanted so much to be close to someone other than her sister for once, and Gary had a quietly understanding quality about him. \"Kelly loves guys. I mean, I don't know her or anything, but you can see it in the way she acts. She doesn't just tolerate them, or. . . or tease them. She loves them. And she's so pretty.\" She looked at him nervously, \"Sexy--you know? I just think that's so cool.\" She was afraid to continue. \n\nShe often wondered what Kelly's sex life was like. She imagined Kelly as always in control--not taking any crap, even from the sleazy guys--but at the same time not being afraid of them, or even put off by them either. It was an idea that Kathleen admired--an idea she would aspire to if only she had the desirability that Kelly had. Kathleen liked people who found the best in other people, and Kelly clearly did. She was such a beautiful person to watch--her subtle communications, and intense sexuality. She wished she could share all that with Gary without frightening him away. \"Sounds stupid, huh?\"\n\nWatching him looking not at the drawing, but at her, with those deep green eyes, she felt a sheen of sweat starting to form on her skin. \"No.\" he said softly. \"I think it's amazing.\"\n\nFor a brief moment, Kathleen didn't have to imagine what it was like to be Kelly anymore.\n\n\"I've never,\" he said, carefully choosing his words, and pulling his eyes away from her in order to flip through more pages of her sketches. \"I don't understand people like you do.\"\n\nKathleen blushed slightly even as her hands grasped the seat of her chair tightly in an effort to resist her fantastic sexual ache. \"Eh. It's nothing really. I don't understand food like you do, so we're even,\" she smiled. He must be able to see right through her.\n\nHe stopped on the page she'd filled earlier that morning. Kathleen held her breath with the worry that it might hurt his feelings, but she wanted him to see it. It was a drawing of Gary and his friend T. in a purely imaginary moment--both of them walking side-by side with their arms playfully around each other's necks. Gary had a smile of contemplation while his friend's mouth opened wide in a frozen moment of animated discussion. Kathleen nervously watched Gary take the drawing in.\n\nHe placed his finger on it, silently.\n\n\"Do you like it?\" Kathleen timidly ventured.\n\nHe looked up at her, open mouthed. \"That's me and T., isn't it?\"\n\n\"Well, yeah. It's just a sketch I did this morning. Cleaned it up a little last class. Is it bad?\"\n\n\"Is it bad? Are you kidding?\" he said with wide eyed incredulity. \"It's. . . Why did you do that?\"\n\n\"I don't know,\" she shrugged bashfully. Her nerves were hypersensitive with apprehension, giving her trust to him. Her toes played absently with her sandal straps, and she had even caught him watching them. Her pussy was soaked. She could feel it--it was embarrassing, and liberating. When he wasn't looking, her eyes found his crotch--and she wished she could see through his pants.\n\n\"It's incredible, Kathleen.\" He trailed off thoughtfully. \"It's. . . It's like we're walking down to the pearly gates, except that T. doesn't realize he's not gonna make it that far.\" He raised his eyebrows to himself. \"'Course, I probably won't make the cut either.\"\n\nKathleen laughed and wished she had control over her dirty imagination.\n\n\"T.'s kind of a pain in the ass.\" He looked up at her with a smirk. \"Nicely captured, by the way.\"\n\nThey both laughed again.\n\n\"But he is my best friend. I'm not sure how much of him I'll see after we graduate. I don't think he's going to go to college.\" As if he was having a conversation with himself he suddenly had a look of conviction on his face. \"I should really just go to his damn party.\"\n\n\"What party?\"\n\n\"T.'s having a Halloween party on Saturday. I hate those things, but,\" he paused again. \"I should go.\" He looked at the picture again. \"This is really beautiful, Kathleen.\"\n\n\"Kath.\" \n\n\"Kath? Okay.\" For the first time, he looked straight into her eyes. There was a fire within him, but also a quiet frustration in his eyes that she didn't know how to interpret. They shared a tenuous moment of silence, and it seemed to her that he might want to say something more, when, as if on cue:\n\n\"Okay folks, let's talk about what you guys came up with.\" There was Mr. Litten up front, wanting to talk about the stupid lab.\n\nShe needed to find out more about this party, but first she needed to get to a bathroom--pronto.\n\n<center>~ ~ ~ ~ ~ ~ ~ ~ ~</center>\n\nGary tried in vain to talk himself down on his way home, but the uncontrollable energy of anticipation in his body refused to cooperate. He was riding an all too familiar roller coaster of emotions. The excitement and ballooning affection he felt for Kathleen battled with his sobering feelings of stupidity when he reminded himself how little it probably all meant to her. She liked him as a friend, just like all the others had. It was him who always took it a step too far--the Valentine's card that said a tiny bit too much, or the birthday gift that was a little too expensive.\n\nHe was trying to learn from his mistakes, and he was terrified that asking her to T.'s Halloween party would be just that. He didn't want to see Kathleen look at him with the same \"poor Gary\" eyes that the others had, or see her shut down all those flirty, fun things about her in the interest of saving his feelings in the long run. It would be so much easier if he could just turn off this aching need he had to love someone.\n\nHe was already afraid that he might have gone too far. He felt terrible for upsetting her when he peeked over at her drawings, but they were all just so beautiful. Every time he saw her, Kathleen seemed more and more sexy to him.  It was all he could do not to keep his eyes from staring like a mindless lecher at the tight breasts pressing against her shirt, or her bare legs and her toes as they playfully wrapped around the steel base of her lab chair. There was so much in Kathleen's description of Kelly that Gary loved about Kathleen. He wished he had had the guts to tell her that.\n\nT. just had to have it wrong. Gary was convinced that having sex with someone like that, with Kathleen, couldn't help but be an incredible experience. The overwhelming feelings in his body even now were enough to convince him that the reality might just give him a sublime heart attack.\n\nAfter pacing the house most of the night, sick with the idea of actually eating any dinner, he said goodnight to his parents and went to his room.",
        "The images of her face, her ponytail, and her smile flooded his mind. The smell of her body lingered in his nose. What would it be like to really be close to her? He wished he had T's confidence. \n\nHe nervously pulled off his t-shirt and jeans, and then let his briefs drop to the floor so he could step out of them. He opened the drawer in his bedside table and pulled out one of the pieces of material that he'd cut from the latest downy soft t-shirt that he'd bought for this specific purpose. He didn't know how to feel, allowing himself the hopeless luxury of fantasizing about a girl in 'Real Life', but his cock grew hard with his thoughts of ridiculous possibility.\n\nHe laid the material on the bed, smoothing it out with his hands. With a nervous sigh, he rested his body on his stomach so that his cock was pressed flat against the folded shirt scrap. He laid his head on his ear, his arms straight down his sides, and his hands squeezed under his hips to give his crotch leverage. His body started moving against the soft cock blanket, and his cock grew even more as the friction of the soft material massaged it. His mind was alive with beautiful, impossible images.\n\nHe ventured ideas of touching Kathleen's delicate arms. He wanted to know what it was like to feel the weight of her head laying on his chest. He imagined her allowing him to bury his nose in her hair and run his hand up her back. The thoughts made his body shiver involuntarily as he eased his crotch up and down against the bed.\n\nHis mind saw her face drawing nearer to his. He imagined what his breath would be like--heavy, shaky, uncontrollable. He longed to know what it would feel like to penetrate the wet boundary of her mouth with his tongue and touch her own. Chills shot up his spine, and a violent intake of breath filled his lungs. Drool was collecting at the bottom corner of his mouth. His cock was hard, but his body was far too overwhelmed with adrenaline to separate the excitement of the possibility with the sexual need between his legs. His body thrust unsteadily, firmly willing his quaking muscles to do his bidding rather than allowing them to convulse out of his control.\n\nThe thought of touching his mouth to hers seemed almost mythical. He had no frame of reference as to what that would feel like, what it would taste like. It was simply enough to imagine her willingness to kiss him, but he wanted more.\n\nHe raised his body off the bed and onto his knees--looking down at his engorged shaft. It seemed to be bigger now than he'd ever seen it before. He slowly wrapped his hands around the base of it, imagining what Kathleen's fingers might feel like. He wondered if she would be tentative and scared, or if she'd been with a man before and would laugh at his inexperience. \n\nHe slowly rubbed up and down, balancing the gentle friction with the pressure of his hand against the sensitive head. He tried to envision what Kathleen might look like naked, even as he felt he was somehow violating her privacy with his mind. It was vividly exciting. His hand gained speed, and he imagined sliding his cock into her pussy. Would it hurt her? Would she like it? He wanted to bury it in her and feel her tightness--to finally feel that place that was meant to take a man's cock. He longed to know how differently the sensation would compare to that of his awkward fist. He leaned his head down and allowed his spit to drip down across the tip of his cock. He wondered whether Kathleen's pussy would be wet. Would she enjoy the feelings she gave him? Would he make her feel just as good? God, he wanted to.\n\n\"Ooh.\" His trembling voice choked quietly into the room. His fist tightened, envisioning Kahtleen's tender pussy squeezing him inside her. Could girls. . . could women do that? His forehead flushed with guilty sweat, his legs tightened with effort. He wanted to feel the strain of her own legs underneath him--spread open, inviting his hard cock to push between her sweaty thighs and erupt its cum inside her. Fucking her. Filling her.\n\n\"Oh. Ohhh.\" His fist frantically pumped several powerful squirts of white cum out of his cock. His thighs were tightly spasming and his legs buckled weakly beneath him. He was filled with vivid pleasure, and his mind washed with isolated pictures--the curve of Kathleen's calves, the fantasy of her soft breasts and taut nipples, her bare belly button, and what it might feel like to hold her naked body so tightly to him that their hearts touched.\n\nWhen it was over, leaving the fantasy behind and coming back to the dark loneliness of his bedroom, his eyes started to swell with tears. He felt so stupid. His hand and cock were slick and messy with the mixture of saliva and sperm. He shouldn't be thinking about her this way, it wasn't right. More than that, though, he was just torturing himself with false hopes. He unfolded his nearly cramped legs from underneath him, feeling the cool air wash against the sheen of sweat that formed in the crooks of his knees. He lay against the headboard, lifting his unsoiled hand to his face. His throat constricted with his effort to preempt his tears, and his mind had switched gears from the pleasure of freewheeling anticipation to the despair of reality.\n\n\"Stop it. Stop it. Every time you do this,\" he scolded himself. \"Every fucking time.\" He wiped a wet tear away from his eye. This is exactly why he preferred the fantasies of 'La La Land', especially when he masturbated. Associating sexual thoughts with 'Real Life' girls like Kathleen was so much more exciting, but it always carried a painful reminder of how impossible it all seemed for him.\n\nDeep down, rationally, he knew he was okay. He still harbored faith that it would all work out one day, somehow. He just wished he could enjoy what he had with her, and stop himself and his hopes from driving her away. After cleaning up his mess, Gary finally slipped off to sleep, wishing, just for once, that he could share with Kathleen those feelings that no one else seemed willing to accept from him.\n\n- - - -\n\n\"What the fuck are you wearing, man?\" T. announced himself, his sabre dangling noisily from his thick belt, and his larger-than-life leather boots flapping across his calves. He loafed out of his front door wearing an over-the-top buccaneer costume.\n\n\"It's my costume,\" Gary smirked with mock cynicism. He still wore his Nike T-shirt and blue-jeans from earlier in the day. It served T. right for the badgering him into coming.\n\n\"Jesus, man,\" he rolled his eyes--and his entire head went along with them. \"It's a Halloween party. You're such a pain in the ass sometimes.\"\n\n\"That's me--\"\n\n\"You know what would be nice!\" yelled T. to the world--raising his voice skyward and lifting both his billowy shirt-sleeves in a grand gesture of hyperbole as he turned around in a circle.\n\nGary tilted his head and pursed his lips in a patient smile. There was no point in trying to shut him up.\n\nT.'s red head-scarf flapped in the brisk October breeze as he continued his pirate's prayer. \"I have a dream that Gary--freakazoid, pussy-ass loser that he is--would for just one night pretend like he's not Gary.\" He stopped in mid-circle and looked longingly skyward--finishing with a dramatic stage-whisper. \"Is that too much to ask?\"\n\n\"Are you finish--\"\n\n\"Dude,\" T. snapped his head down and strode over to his friend--wrapping his flamboyant arm across Gary's shoulders and leading him inside. \"Let me acquaint you with a little thing I like to call,\" he nodded silently and closed his eyes as if introducing a new concept, \"Fun.\"\n\n\"T., will you--?\"\n\n\"Sh. Sh. Believe it or not, I was expecting you to pull something like this. Just come on.\"\n\nBy the time the other guests started arriving, Gary was beginning to get used to his new costume. At least he didn't have to wear a mask. Even without it he didn't feel like himself. The loose button-up shirt, suit pants and trench coat from T.'s father's closet didn't fit him very well, but when he had looked in the mirror with the fedora hat on his head to complete the picture of an old style private eye character, he could almost imagine himself in another world--relaxed, confident, even charming. It was ridiculous, he knew, but maybe T. had a point.\n\nGary watched the growing parade of witches, vampires, winged fairies, and serving wenches, and for a while did his best to play the part. He participated in his own way by smiling at their light hearted, meaningless conversations. He watched them drink and laugh at themselves. He watched the French maid make good on the Spiderman's dare to unzip the Godfather's fly with her teeth while the mobster lifted up her tiny skirt with the barrel of his Tommy gun, and although his disbelieving cock wished fervently that he was the Godfather, his preoccupied heart knew that it was all just an illusion. The more he watched people the less he felt like he understood them. The wilder things got the more detached he felt from what was going on, and the more his mind kept drifting back to the only place he really wanted to be: in Chemistry lab talking to Kathleen. He finally found an empty couch corner to sit on and cursed himself for not having had the courage to invite her.\n\n\"Hey, wake up!\" T. blurted as he kicked Gary's foot off of his knee. \"What's the matter with you, man? This is supposed to be fun.\"\n\n\"Yeah, that's what they tell me.\" Gary smiled apologetically. \"Sorry, man.\"\n\n\"I think Diane is warming up to me. Might be able to get her behind the bleachers yet,\" he winked with a smirk. \"You look like you could use a drink, for Chris'ake. Keg's downstairs. You could at least pretend to. . . Hello.\"\n\nGary followed T.'s eyes and saw a girl who'd just come in from outside. She handed her coat over to the hands of Obi-Wan Kanobe, who had eagerly sheathed his plastic light saber to help her out. She was wearing a pink harem-girl costume with a veil that dutifully obscured her face, and low hipped, puffy pants that were cinched around her ankles, but slitted down the sides of her calves. Her belly was bare up to the small top that covered her breasts and shoulders. \n\n\"Whoa,\" said T. \"Who the hell is that?\"\n\nGary's heart pounded as if he had just jumped out of an airplane. He had practically memorized those arms and that playful dark hair. He smiled with giddy affection the minute she removed her shoes and stuffed them into her coat pocket before Obi-Wan took it away. Gary knew exactly who that was.\n\n\"'Scuze me.\" T. whipped his head around and bounded across the room to play the good host. Gary was paralyzed with a mixture of happy excitement and intimidated fear. Jesus, she looked gorgeous. Had T. invited her despite his objections? As he watched T. greet her in his usual, callously charming way, he was convinced that he hadn't. T. had a sense of honor, and would not be approaching her like that if he knew who she was. Gary could sense the smile behind the pink veil she wore, and he felt like a fidgety, useless little kid. She seemed more intent on conversing with Obi-Wan than with T., and eventually T. backed off. Gary watched all the attention she was receiving from the other guys--most of them discovering her for the first time, and his heart sunk with the knowledge that he could never compete with that.\n\nAfter he'd lost sight of her when she went off down the hallway, he considered going home to end this ridiculous torture--hating himself for not having enough courage to face the risk of a \"let's be friends\" talk for the slight chance of something he didn't have the experience to imagine.\n\n\"So, are you just going to sit there all night?\"\n\nHe couldn't get enough breath into his lungs. He turned around and there she was. Her dark ponytail, held up high by a gold embroidered hair tie that accentuated her delicate costume, flipped to the side of her head. He felt the breeze of her shampoo rushing into his nose and his filthy mind was grateful for the loose material of his suit-pants.\n\n\"Uhm.\" He couldn't think what to say. He forgot to pretend that he didn't know who she was. \"Yeah, I guess.\" \n\nKathleen cocked her head at him. He couldn't see her expression behind her veil, but he was positive it was one of her disapproving smirks. As if simply to tease him, she plopped her body down next to him. He shifted on the couch in response to his uncomfortably growing cock. She was so close to it. The slit in her pants allowed the skin of her thigh to rub against his pant leg. His terrible excitement would not bow to his sense of decency.\n\n\"I like your costume.\" She touched the fabric of his trench coat and rubbed it between her fingers. Her eyes lazily wandered up and focused on his head, then on the hat in his hands that he had dejectedly removed earlier. \"Why aren't you wearing your hat?\"\n\nHer bare toes absently flexed, grabbing at the material of his pants down at his ankles. God, did she realize she was doing that? He couldn't breathe. \"I don't know. T. made me wear this. I actually was just going to wear jeans and a t-shirt.\"\n\n\"But it's a costume party.\" She shook her head with playful exasperation. \"I met T. a little while ago, by the way. He actually seems,\" she blinked almost incredulously, \"Nice.\"\n\n\"Oh, I don't know about that.\" Gary grinned in playful warning, instantly rediscovering that wonderful ease he'd had with her in class. \"You mean he didn't try to hit on you?\" Unbelievable! What was he, blind?\n\n\"Oh, he did.\" Her eyes squinted in what was no doubt one of her smiles. \"It was fun--I don't think he knew who I was.\"\n\nGary laughed nervously. He just felt so out of his league. \"Don't let him fool you with his act. He really isn't what he seems to be.\"\n\n\"Yeah,\" she nodded, thoughtfully. \"I can see that. My sister's kinda like that, too.\"\n\n\"So, do you know someone here?\" \n\n\"Yeah. I know you.\" Kathleen shrugged--her body language revealing that nervous optimism he was growing to savor.\n\nHearing her say that almost made him laugh with pure, breathless adrenaline. He was afraid to let his eyes linger on her, and he looked toward the crowds, trying to hide his red face. \"I hate Halloween.\"\n\nHer eyes flew skyward and she emitted a playful groan. \"Okay.\" She folded her legs underneath her so that she sat on her knees facing him, leaning sideways against the couch. \"Why?\"\n\nGary felt strange talking to a veil, but started in on his practiced explanation. \"Well, I have a hard enough time understanding people as it is. Then they add the costumes and the makeup and the drinking, and. . .\" He sighed in mild frustration, and saw something in her soft eyes that made him stop. \"I guess I'm just not one for pretending.\"\n\n\"Hm,\" she said. \"I think it's kind of fun to pretend sometimes.\"\n\nHe didn't know what to say, he just wanted to see her pretty face. He snuck a peek of her bare knee poking out from the slit in her pants, and a shudder centered in his lower back. He shifted on the couch out of pure nervous anxiety. He didn't care about the consequences anymore. He just wanted to share a tiny bit of what he was feeling inside.\n\n\"I like your costume.\"\n\n\"Really?\" he could practically hear her smile, and the relief in her voice. Had she worn it for him? \"I don't know. I guess I look a little stupid.\"\n\n\"Oh, no.\" He shook his head with as much heartfelt earnestness as he could muster. He wanted so desperately to reach out and draw her veil back for her. He lifted his hand and caught himself just in time to pull back and rub his chin. \"I just. . . Can I see your face?\"\n\n\"Oh,\" she looked around with a nervous laugh. \"Well, they might throw me out. I wasn't really invited.\"\n\nGary felt so guilty. He should have invited her. Damn it. \"This is T.'s party. He won't throw you out. I promise.\" He looked at her apprehensive eyes and knew that she was trying to be someone else tonight. \"How 'bout this. I'll make you a deal.\"\n\n\"Okay.\"\n\n\"I'll put on my hat, if you'll take off your veil.\"\n\n\"Hm.\"\n\nGiddy anticipation pounded in Gary's heart--for the first time with a sense of true hope behind it. His anxious cock raged out of pure excitement.\n\n\"Lemme see first,\" she teased, snatching his fedora out of his hands and plopping it on top of his head. \n\nHe did his best to playfully pose the part for her, raising his chin and sitting up--whipping the flap of his trench coat over his torso.\n\nHer eyes crinkled behind her mask.\n\n\"See, now you're just laughing at me, again.\"\n\nShe shook her head back and forth, slowly. \"Nuh-uh.\" As if to prove it, she pulled her veil away and revealed that bashful smile he'd been longing to see all evening. He breathed an inaudible sigh as his heart jumped in his chest.\n\n\"So,\" said Gary, \"I guess you like costume parties then?\"\n\n\"Eh,\" she shrugged with a sweet smile of irony. Her eyes told him that she had a hard time pretending too.\n\n\"I'm really glad you came.\"\n\n\"Me too.\"\n\nJust then, a smattering of voices from the direction of the front door interrupted them. They both turned to look and Gary saw a group of girls enter the house. He recognized one that stood out from crowd. She was wearing fishnet stockings, a black miniskirt and a green tank top that stretched tightly over her ample breasts. She looked to be dressed as an 80's hooker, complete with a collection of neon plastic bracelets blanketing her arms and her hair scrunchied into a curly, blonde handle on top of her head.\n\n\"Kelly!\" T. announced the new arrival and motioned her to come over to the small family room bar where he was mixing drinks for some of the guys.\n\nKelly Granger looked over and gave T. a huge, beautiful smile. \"Hi, baby!\" She eagerly left her girlfriends to their own devices, and clicked her way over to the boys on her high heels. They cleared a seat for her at the bar and she looked more at home there than she had with the girls she came in with.\n\nThey both watched Kelly teasing T. as he drooled theatrically over her. She reached out and playfully covered his eyes with his head scarf.\n\n\"See what I mean?\" said Kathleen with a kind of admiring smile.\n\nGary turned to look at Kathleen and the way her tiny ear curved out from the gentle line of her neck. Watching her watch Kelly, he couldn't help but see exactly what she meant. \"Yeah.\"\n\n\"So, Mickey Spillane,\" Kathleen whipped her head around to look at him again. \"Are you ever going to ask me to dance?\"\n\nDid she just say that? \"Well.\" He panicked. \"You know, Mickey Spillane was actually the author, Mike Hammer was the character.\"\n\nShe pursed her lips in a grin, sensing him avoiding the question.\n\n\"I. . . I really don't dance,\" he stuttered.\n\n\"Oh, come on,\" she groaned with amused disbelief.\n\n\"Well, dancing is just--\"\n\n\"No, no.\" She wasn't hearing any of it. \"It's part of the deal. Mickey! Come on.\" She grabbed his hand and stood up, pulling him to his feet. The trench coat draped around his torso, and the brim of his hat just curved down into his eye line. He could do this.\n\nHer soft, insistent hands grasped his as she led him through the crowd. The density of the onlookers thickened and the slow ballad playing on the stereo swelled in volume; her fingers squeezed his reassuringly as she threaded him through the mass of disguised bodies dancing in the living room. Gary saw T. break off his conversation with Kelly for a moment--finally seeming to recognize Kathleen. T. raised his head in a nod of delicate encouragement to Gary--he always somehow knew when to back off, and just be Gary's friend. Gary was so terrified.\n\n\"No, I can't.\" Gary pulled away from her.\n\n\"Oh, please? Wait, I know.\" She guided him down the relatively empty hallway. \"Where is. . .?\" She looked through the doorways in the hall. \"Where is your friend's room?\"\n\nGary was in a daze. \"It's right there, but Kathleen, wait.\"\n\n\"No, this way no one has to see.\" They both stepped into the room--the slow music washing in through the open door.",
        "\"Here.\" She grabbed his wrists and pulled them back so that his hands met around her back, and she wrapped her arms behind his neck. His heart was ready to pound out of his chest. He was so close to her, and he didn't know what to do with his hands. Her bare skin just above her hips was practically unavoidable, but he was afraid to touch it. It was too intimate, to delicate. He separated his hands and held them together by clutching the very end of his pinky. She was so warm, and the weight of her arms around his neck made him feel awkwardly powerful.\n\nShe led him gently as they circled each other in tiny steps, absorbing the slow rhythm of the music. Gary's hands were frozen and stiff around her waist; he was fearful of making a move, and didn't want to do anything to ruin the impossibly tenuous moment. His arms felt living breath expanding and contracting within her small body, and he no longer noticed the stares of the party transients walking through the hallway. The tender music guided them on their way, and Gary looked at her face--feeling more desirable and anxious than he ever had in his life. He wanted to tell her what he'd so far been terrified to express. He could barely hear his own voice.\n\n\"I think you're so pretty.\" \n\nHer brown eyes met his and glistened. When she blinked, a tear dropped onto her delicate cheek. \"Really?\"\n\nShe had heard him. \"Oh my God, yes, but I don't want anything. I don't,\" he paused, repeating himself, \"Want anything. I just wanted to tell you that.\"\n\nHer lips thinned as a spurt of breath escaped through her nose in a sudden laugh. She shook her head silently, smiling at him.\n\n\"I'm sorry.\" He felt so stupid.\n\nNot looking away from his eyes, one of her arms slipped off his shoulder and reached back to touch one of his hands. She pulled her body closer to his and rested her head on his shoulder. Pulling his arm around in front of her, she pressed his fingers against the bare skin of her stomach. He flinched away instinctively, with a fearful, incoherent mumble. He was afraid that his touch would give away how physically out of control she made him feel. He didn't want her to feel like that's all he wanted.\n\n\"Shhh,\" she breathed gently into his ear. The hard urge in his pants gave him no rest, and she insistently guided his reluctant hand back to her tummy. The tight muscles reacting underneath her vulnerable flesh was the sexiest thing he'd ever felt. The two of them moved in tiny steps together, silently allowing their shaky breaths to synchronize through the beginning of a second song. Her hair tickled along the base of his neck, and he couldn't believe it when she slowly slid her hand under his coat and pulled up on his shirt in the back, freeing it from his belt until he felt her silky arm wrap up around his bare shoulder blades. Feeling her warm body so close to him was overwhelming, and she was responding to him with a sensual reaction he'd never imagined he'd have the power to elicit.\n\n\"Wow,\" Gary breathed almost inaudibly. His knees felt ready to buckle underneath him. Kathleen lowered her other hand and slipped it under his coat, around his back, hugging him to her.\n\nThis wasn't him. This wasn't who he was, but as he slid his palm around her bare waist, he thought of her quiet optimism. He thought of the hidden playfulness that she'd allowed him to see and her quirky, honest love of the people around her, and just wanted to lose himself with her. He knew he should stop. It couldn't last. Did she know how she was making him feel? Why was she doing this?\n\nHe tried to step back--feeling the pull of reality--but she quickly reacted by squeezing her hands and arms around his shoulder blades and insistently hugged him against her small body.\n\n\"The song isn't over,\" she said simply. He'd never felt so physically close to another person in his life. He could barely breathe.\n\nThe music finally transitioned to a faster song, but Gary didn't want this feeling to end. At the same time, he wanted to step back. He felt like he had no control over his own body in her presence, but she had been so reactive to him. Her arms were pulling around him with so much force. His mind, stubbornly hardened by rejections past, simply wouldn't let down its defenses. She couldn't mean it, could she? He felt beautifully lost, somewhere between lust, guilt, affection, and confusion.\n\nShe simply pulled him closer and kept dancing as if the music hadn't changed. Gary felt his whole body start to shake uncontrollably. Adrenaline pumped through him, and he couldn't will himself to stop shivering in her arms. \n\n<center>* ~ * ~ * ~ * ~ * ~ *</center>\n\nKathleen's fingers pressed into the muscles of Gary's tense back. She couldn't believe she'd taken things this far. She'd never expected or intended to be encouraging his fingers to play along her skin when she came here, and yet his touch had been almost magical--nothing like she had thought it would be. She sensed both his excitement and his hesitancy while they were dancing. Why was he so afraid? In all her fantasies she'd never imagined the depth of feeling she now saw behind his eyes, and she wanted to keep going. The warm ache in her insatiable pussy was almost unbearable. She felt her erect nipples poking against his chest. Her breathing had almost stopped when she felt the bulge between his legs pressed against her tummy. There it was--warm, alive, and incredibly hard.\n\n\"I think,\" Gary stammered. \"I think I should go.\" He felt like he wasn't thinking straight--out of his mind. His cock throbbed. God, she must have felt it. He longed to touch so much more than her tummy. He honestly wasn't sure if he could control himself.\n\n\"Oh. No, don't go.\" She snatched his hands and arrested his retreat. She was afraid she had pushed him too far, but she could see the conflict in his eyes. She knew the contact they had shared had meant so much to him, and she longed to see what his hard cock looked like.\n\n\"No, I think I should go. I'm so sorry.\" He didn't know why. \"I. . . I don't know.\" He looked at her desperately, shaking his head, but aching to believe that she meant what she was doing. He wanted to smell her hair. He wanted to slip his tongue into her mouth, and run his fingers along the swell of her breasts--but he wanted her to want it too.\n\n\"What? Sorry? Are you crazy?\" She grabbed his arms again and pulled him toward her, realizing how badly he was shaking. \"It's okay. Hey. It's okay. We don't have to. We don't have to do anything. I'm the one who's sorry.\" She had pushed him too far, but her body screamed for his touch; his mouth; his tongue tasting hers--now more than ever.\n\n\"No, no. It's not that.\" Gary shook his head in the crook of her shoulder, and felt so out of control--his cock embarrassingly pressing against her soft belly button, his body shaking so badly he could hardly stand up. He finally wrapped his hands around her bare waist and hugged her; he just wanted to give her everything he had. \"Is this okay?\"\n\n\"Of course it is.\" It felt so good. The curls of his brown hair wrapped around his ear, and the strength in his arms as they pressed her to him made her muscles go weak. So much meaning, she thought. She so badly wanted to explore more of these feelings with him. She didn't know what to do, exactly. All she knew was that feeling his vulnerability and the shyness with which he handled her body made her want him to touch her all that much more. She was terrified that if she let go of him, her chance would be gone. \"Come here.\" She led him over to the bed.\n\nGary shakily sat down, his breath shivering uncontrollably. He felt that his heart might explode, but the urge to kiss her--to show her how he felt and to feel her soft lips against his--was all consuming. She sat on the bed next to him, her eyes at once concerned and sparkling with excitement. He tentatively reached out and touched her sleek forearm, leaning toward her. He tried to ignore the involuntary twitches of his legs and shoulders that signaled the mad emotional eruption within his body. In slow motion, he sensed her breathing; her face seemed like a beautiful, impossible lure. Finally, their lips touched. \n\nKathleen tentatively brushed her tongue against Gary's lips--wetting them with her saliva. He was so gentle, so unassuming. It made her want to give herself over to him. She snaked her tongue into his mouth and touched his tongue. His hand rubbed absently down her forearm--bending the tiny hairs back, and tracing along the line of her wrist. She instinctually lifted her hand back and interlocked her fingers with his as they exchanged unsteady breaths and explored each other's mouths.\n\nShe smelled so good. She tasted even better She was so bold, and so vulnerable at once. He felt hard and empowered with adrenaline rushing into his taut muscles, and leaned in further to taste the wetness of her fruity mouth--tilting his head and meshing his open lips with hers. He heard her moan, and he felt like he was in a dream.\n\nKathleen softly broke off the kiss, and the breath whispered out of her lungs. \"Oh, my God.\" Her eyes locked with his for a long second, before she tentatively removed Gary's hat and laid it at the foot of the bed. She kissed him again and stood up. Feeling more confident than ever, she surprised herself when she quietly but purposefully closed the door to the bedroom and locked it. She studied his breathless expression, and suddenly felt very nervous. She had to ask. It wouldn't be right if she didn't, but she didn't know what she would do if he said no. \"Do you. . . Do you want to stop?\"\n\nGary didn't want these addictive feelings coursing through him to stop, ever. \"No,\" he whispered shakily. \"I just. I'm not sure what to do.\" God, she really did want this. Memories of his dad's dirty magazines, of the movies he'd seen, of the conversations he'd had with T.--none of it seemed to help him.\n\nBiting down on her lips, trying to think of how to start, she knelt down on the carpet beside his closed legs, and then reached up and slid her hand under his coat and now somewhat disheveled shirt. She felt so bold as her hands traced the outline of the ribs along his hairless chest, and she sensed his short breaths through her fingers. She always loved the way her hands felt on her nipples. Maybe he'd like it too.\n\nGary felt her cool fingers sliding up his shirt, finally finding his sensitive nipples. When she brushed against them he took a sharp, cold breath. Her fingers tickled them as her eyes excitedly studied his reaction. He felt vulnerable to her light touch, and waves of uncomfortable chills washed over him as his cock continued to rage even harder out of his control. \"Hohh,\" he sighed.\n\nKathleen pressed and rubbed her fingers into his hard chest as she imagined the prospect of freeing her own breasts so she could feel his touch. His hands reached up, and she felt them squeezing hers over the material of his shirt. Her panties were wet. She had felt it when she knelt down beside him. She fought her instinctive urge to reach down and surrender to her familiar routine of immediate gratification. Looking at the deep affection in his eyes, she started to understand that there was something much more meaningful in what was happening than she ever expected. \"You're so beautiful.\"\n\nHe leaned forward--delicately kissing her forehead and deeply inhaling the scent of her hair. He pulled back with a breath, and his eyes traced the playful tendril curling across her smooth forehead. \"You're the one who's beautiful.\"\n\nShe loved the way he said things like that--as if suddenly after so much fear and apprehension, he couldn't be more sure of anything if he tried. She believed him--through the sheer force of his own will.\n\n\"I want. . .\" Gary's own instincts were taking hold. \"I want to touch you again.\"\n\nHe didn't have to say it twice. She unsteadily fumbled her greedy hands out from under his shirt and stood up. Trying to conquer her own bashful demons while battling her shivering impatience, she reached back and released the tie that held her pink top snug around her torso. Her fingers slipped the costume's elastic straps off her shoulders and she finally exposed her breasts to him.\n\nGary took in the sight of where the soft skin of her stomach swelled into gorgeous round peaks. Her vulnerable nipples stuck straight out toward him, and the taut skin around them just called to his tongue. The look on her face was at once inquisitive but confident, and he tentatively reached his hand out to touch her tummy again--savoring its softness and somehow associating it with the most vulnerable aspect of her gentle soul.\n\nKathleen rubbed her fingers along his forearm until her hand covered his. She hooked her fingers into his palm and pulled his hand upward, resting his fingers against the line of her breast. She shivered with sublime torture. She'd never been this wet in her life.\n\nGary felt the powerful excitement of unquenchable lust filling his cock. Her nipple felt so hard. It was hers; it was natural, and animal, and beautiful, and she was allowing him to touch it. He was careful, slow, exploring. The muted music combined with their whispery breaths drowned him in an intimate world of silky skin and unspoken hunger. He touched the light, firm flesh of her breast, reminding himself that he hardly knew her, yet feeling like he knew her so well.\n\n\"So do you have theories about sex, too?\" Kathleen asked with a bashful grin. He was so serious. This was supposed to be fun. She reached out and threaded her fingers through his thick brown hair.\n\nHe sighed shakily--feeling her small fingers massaging his scalp. \"Well, I used to.\" He saw her smile and they both started laughing. She had such a way of making him feel comfortable, and his stubborn cock was growing ever tighter with the aching desire to continue exploring her body.\n\nKathleen took his hands, pulling him up off the bed. She reached up and pressed her lips to his, exploring his mouth with her tongue as she encouraged his fingers to brush and pinch her erect nipples. Although his touch was restrained, somehow the fact that those fingers belonged to Gary more than made up for it. She raised her hands under the shoulders of his coat and prompted him to take it off. After he did, she unbuttoned his shirt and did the same. Kathleen's tongue began learning Gary's kiss--rubbing and licking his mouth and feeling the insatiable hunger in his lips at beautiful odds with his outer shyness. She gingerly guided his hand down her belly and rested it against the heat between her thighs.\n\nGary's petrified hands played along the fine, netty texture of Kathleen's pink pants. She pushed his fingers against her, and he felt her warmth. Her eyes encouraged him by fluttering closed at his touch, and he took her in--feeling aching admiration for her quiet expressiveness.\n\n\"Do you want to take them off?\" Kathleen wanted to feel his hands freeing her shivering legs from the confines of her costume.\n\nGary's fingers hinted along the elastic of her pants. \"Are you sure?\"\n\n\"Yes.\"\n\nGary knelt down and, careful not to scratch her silky skin with his fingernails, pulled Kathleen's costume pants down her legs, revealing a pair of matching pink panties. He breathed in her powerful scent as fresh blood poured into his ravenous cock. He hadn't understood, before her musk entered his nostrils, what sexual creatures women were. The tense muscles in her thighs and wet spot that seeped through her panties spoke to a primal instinct within him, and he was struck with the thought that perhaps sex was far less complicated than he had imagined. In a flash of unrestrained instinct, he leaned forward and pressed his lips on the material just below the waistband of her panties--cuddling his face against her generous warmth. He felt that his thighs might collapse.\n\nCool air rushed around Kathleen's legs, and her body shivered with the excitement and embarrassment of her exposure to him. She felt him kiss her, and felt his hot breath against her soaked panties. She didn't want to make him do anything he didn't want to, but she wondered desperately what his tongue might feel like, and how the tiny whiskers on his chin might tickle against her shaved lips. Gary surprised her when his eager eyes snapped up to look at her.\n\n\"I want to taste. . . you.\" He felt awkward in his giddy excitement. \"Is that okay?\"\n\nKathleen bit her lip in a smile--trying not to make him self-conscious with her elation. Her nervous breath jerked inward even has her brazen fingers traveled down her waist and carefully peeled her panties away from her soaked pussy. She stepped out of them and was naked, for the first time in front of a boy--a man. She fought the urge to cover herself with her hands, but the way he worshipped her with his affectionate eyes made her feel beautiful and natural. She crawled onto the bed and laid her heated body on the cool material of the comforter. Her voice was smaller than she intended it. \"Come here.\"\n\nGod, she was beautiful. Her bold actions and quiet humor were proof of that confidence in her body that he so admired, even while her expressive toes curled and stretched, betraying her tiny hints of nervousness. He took in her short, sleek legs and savored the tiny imperfections on her skin. Her pussy glistened, and her small nipples poked confidently upward, speaking of her own excitement. He could see the trust she had in him through her optimistic eyes. He wanted to be a part of that. He wanted to feel what she felt, and to share how she was making him feel. He inhaled with the realization that she might be feeling like she was on display. \"Hold on.\"\n\nShe watched his hands fumble to unfasten his pants and he pushed them, along with his underwear, down his legs. She could tell that he was embarrassed, but Kathleen hungrily drunk in the sight of his full cock. It was beautiful. She loved the life in it--the veins that pumped blood around it--the sparse, brown wisps of hair that curled from the soft folds of skin that held his balls. She even thought she saw a freckle or two on the tight shaft. It didn't look weird to her. It looked just perfect.\n\nHe pulled off his shoes and sat down on the bed. He was here. He was actually going to do this. Would she be disappointed?\n\n\"Gary? Are you ok?\"\n\n\"I just. . . I just want to make you feel good.\"\n\nHe had so much feeling in him, so much bottled up affection. She was seeing it start to pour out and it was so powerful, she stopped breathing. Sex was supposed to be easy wasn't it? Easy for Adrienne maybe. \"Hey,\" she whispered. \"Look at me.\"\n\nHe turned his head, once again taking in the sight of her beautiful, naked body.\n\n\"No matter what you do, you're going to make me feel good.\" She traced the curve of his neck with her eyes, down along the muscles in his shoulders. She took in his smile and ached to feel his touch again. \"Here.\"  She reached out her hand for him to take.\n\nGary put his hand in hers. She pulled it back and downward until it rested on her naked thigh, just below her pussy, and her leg shifted unsteadily while air whispered out of her lungs. She was incredible to touch, and even more incredible to watch.\n\nThe shivers ran up and down her body as his entranced eyes seemed to consume her. She slipped her hand off of his and finally touched her long neglected clit. She was practically on the edge already, and the intimate sensation of his fingers against her skin shot tiny needles of energy through her thighs. The thrill was intensified when Gary leaned over on his side, lowering his face so that it rested where his hand had been--tantalizingly close, she felt his breath on her pussy. \"Oh, my gosh.\" She bent her knee, spreading her thighs and further exposing herself for him.\n\nGary breathed through his open mouth, watching her delicate finger rub and tug at the apex of her wet lips. He was feeling more and more excited, and savored the warmth of her shuddering body against his cheek. He breathed deep the strong scent that emanated from her shaved folds, and the thought suddenly occurred to him that she might have much more experience than he had thought.",
        "\"Kath?\"\n\n\"Yes?\" She loved hearing him say her name.\n\n\"Are you a. . .?\" This was so awkward. \"I mean, have you ever. . .?\"\n\n\"No. Have you?\"\n\nHe lifted his head and looked at her, stifling a chuckle.\n\n\"What?\" she smiled at his smile, her finger on automatic pilot--her body lingering precipitously on the edge of orgasm.\n\n\"Isn't it obvious?\"\n\nKathleen shrugged bashfully and smiled again. \"I don't know.\"\n\nHe didn't know if this was the right time to bring it up. \"I have a condom in my wallet.\"\n\nHer smile brightened at his awkward, childlike honesty. \"Good.\"\n\nHe rested his cheek back on her leg. She was so cool. This had been nothing like he expected. It had almost been easy, no big deal. She had made it that way, and as he watched her finger move more urgently and felt her unsteady breathing turn into sharp gasps, a deep sense of breathless affection and excitement washed over him.\n\n\"Put your tongue right here.\" Kathleen felt her selfish body taking control. He had said he wanted to taste her, and she wanted to feel his tongue--now. She pointed with her finger to a spot on her smooth pussy lips, just below her clit.\n\nGary's heart pounded; the tension in his legs and stomach was almost too much for him to take. He could see her stretch her neck back into the pillow as her mouth opened in a sigh. God, she was amazing. Lightly at first he touched his tongue to her private flesh, and her juice washed into his mouth. It was light, and salty and every bit as gently powerful as her scent had been. His own thighs shuddered at the taste of it as his cock absently rubbed against the comforter and his precum wetted the material. He managed to prevent his own orgasm only by watching the inexplicably beautiful expressions adorning Kathleen's face. Her legs twitched underneath him as he wiggled the tip of his hungry tongue below her finger--more confidently sliding between her folds and into her silky wetness. Her sighs became infused with voice.\n\n\"Oooh. Oh.\" Kathleen let loose quiet, crying moans, each more intense than the last. His wet tongue against her pussy lips was an intimate, welcome invasion that sent her heated body over the edge.\n\nKathleen's restrained moans were at beautiful odds with the strong, violent shudders of her small frame. He hoped she might be having an orgasm, and even as his tongue more brazenly licked at her pussy, he couldn't slow his racing heart as he simply absorbed her climax with her. The incredible rush of helping Kathleen cum was better than any orgasm he had ever had.\n\n\"Ohh, God.\" Kathleen couldn't hold back her tears as they streamed down her face. She'd never expected to feel like this. Tingly waves and trembles of aftershock swept through her body. She felt more drained than after even her longest masturbation session, and more powerfully energized than after her best night's sleep. She couldn't make sense of it all. She could barely speak; her quiet voice wept, \"Oh, my God. Gary.\" \n\nHad he misinterpreted? He wasn't sure it was pleasure in her voice. \"Are you okay?\" He snapped his head up. \"Kathleen?\"\n\n\"Ohhh,\" she breathed with a shaky voice. \"Come here.\" She spread her arms, aching from her core for him to fill them.\n\nHe rubbed his cheek upward against her warm body--wanting to be as close to her as possible--and laid his head on her naked chest, hearing her rapid heart, cuddling into her small frame. \"Are you ok?\" His voice was filled with genuine concern.\n\n\"Oh, yes. I'm sorry. I'm sorry.\" Kathleen couldn't stop crying. It had just felt so good. He had felt so good in her heart--more all consuming than she'd ever imagined it would be. All she could think of was her burning desire to feel all of him inside her.\n\nHe looked up at her face. \"Sorry for what?\"\n\n\"I'm sorry I'm crying. It's not what I mean.\"\n\n\"Did it feel good?\" He was worried that he had done something terribly wrong.\n\n\"Oh my God, yes. No I just. I don't know. I can't help it.\" Her voice broke and she hugged him deeply into her chest, feeling so lucky that she had shared this with him. \"Thank you.\" \n\nHe sighed audibly with relief, and pressed the side of his head against her chest as hard as he could. He just couldn't get close enough. His erection was softer now with all the intensity of her release. \n\nShe felt sudden pangs of guilt. \"I'm sorry I attacked you like that.\"\n\n\"Attacked me? God, that was the most amazing thing I've ever seen.\"\n\nKathleen tried to calm herself. \"Wait, wait. I want to feel you. Do you want to?\"\n\n\"I. . .\" Gary had no words. God, he wanted to. \"Do you? I mean, didn't you already come?\"\n\nKathleen's eyes opened wide, amazed that he had missed it. \"You were right there, weren't you? Of course I did! Please? I really want to.\"\n\n\"Are you sure?\"\n\n\"Oh, God yes. Please?\"\n\nGary's cock was ready again; it was more than ready. He was shaking all over with the bleary excitement of what it would feel like to be inside her. If he wasn't careful, he wouldn't make it that far. \"Ok. Wow.\" He couldn't believe what he was about to do. \"Ok.\"\n\nKathleen suppressed a little giggle through her rapidly waning tears, hoping he wouldn't notice.\n\nHe sat up and fumbled to reach his pants. He pulled out his wallet and extricated that blessed condom that T. insisted he carry \"just in case\". Sometimes T.'s nagging about it even angered him, but he couldn't feel anything but gratitude for his best friend just now. He was probably outside, standing by the door to ensure no one so much as knocked. Gary was embarrassed, but he was beginning to realize that T. was much wiser in the ways of the world than he sometimes gave him credit for.\n\nKathleen watched his broad shoulder blades working as he pulled the condom out of his wallet. God, he was sexy, and she loved his awkward affection. She wanted him to let go of all that restrained power he was holding inside. She wanted him to know without a doubt that he could have her, that she wanted him to fuck her, but her growing tenderness for him made her think that maybe he was right to take it one step at a time. She sat up and bit her lip, unsure whether she should ask. \"Can I. . . Can I put it on?\"\n\n\"I. . . If you put it on, I don't think I'll make it.\"\n\n\"Ok, sorry.\" Kathleen was tickled at his quirky honesty.\n\n\"No, no. I. . .\" his voice trailed off as he fumbled with his nervous fingers to open the damn wrapper. \"Fuckin' thing,\" he muttered under his ragged breath.\n\nShe laughed silently--giddily--watching him awkwardly roll the latex down so that it tightly encased his beautifully rigid cock. \"Are you ready?\"\n\nHe looked at her and let his eyes linger down to her gorgeous, visibly slick pussy. He felt awkward--not knowing where to begin. Kathleen seemed to sense it.\n\n\"Come here. Lay down with me.\"\n\nHe cuddled into her sweaty body unreservedly, feeling comforted by her arms. His lips once again found hers and he kissed her; he thought he could never get enough of tasting her receptive mouth. Those awful shakes had returned, and he wished he had more control over them. She reacted to them with a simple whisper:\n\n\"Come here.\" Kathleen nudged his arm over and spread her legs--prompted him to plant his knees between them and suspend his body over hers. \"Go ahead.\"\n\n\"Where do I?\" His cock along with his mind raged with the chaos of anticipation. He just wanted to get it right.\n\nShe spread her legs wider for him, and reached down to touch his cock for the first time. The tip was both rigid and forgiving, and she tried to focus while tentatively helping to guide him inside of her. \"Little lower. Lower.\" She felt it. It was at the very threshold. \"There. Oh yes, yes; there. Go ahead.\"\n\nAll he felt was her inviting warmth touching against the tip of his penis. He took in the sight of her small body underneath him. He ached to be inside her. He pushed tentatively, studying her face carefully. Was she sure? \"There?\"\n\n\"Uh-huh,\" She nodded, smiling and flushed with chilly, beautiful sensation. \"Uh-huh.\"\n\nHe pushed a bit harder, and suddenly felt her smooth folds give way to him. Her warmth slowly eased around the tip of his shaft--washing it with the slickness of that same delicious juice he could still taste in his mouth. He pushed forward, willing himself not to explode before he'd even had a chance to start. She wasn't making it any easier.\n\n\"Oh my God; oh my God.\" Kathleen's neck stretched back as she closed her eyes. He felt so warm and alive inside her--nothing like the initial shiver of her cold dildo at home. His entire body and his erupting affection seemed an equal part of the sensation as she felt his shaky muscles on the edge of his control--easing his hard shaft further into her aching pussy. \"Yeah yeah. Come here, come'ere, come'ere,\" she whispered frantically wrapping her arms around him and pulling his torso toward her.\n\nGary's cock pushed slowly the rest of the way into her--feeling her flesh tightly wrapping around his length. She gave no resistance, no indication that she was in pain, and before he even had a chance to register what was happening, his pubic hairs were gently pressed against her silky skin--his cock completely buried inside her body. She was sharing herself with him completely--the beautiful euphoria of it was almost exactly like he had always hoped it would be.\n\nThe beautiful euphoria she felt was almost nothing like she thought it would be. She looked at his face and was full with his cock. When his eyes caught hers, they both froze--simply feeling each other and allowing those fragments of soul to pass between their gazes.\n\nShe pulled him closer and he rested his head beside hers--smelling her gorgeous hair, and feeling the ridges of her small ear against his nose. He pressed his lips gently to her ear lobe and kissed it silently.\n\nGary started moving in and out slowly--her pussy juice further easing the passage of his cock. She was stretched comfortably and completely. His movement was nothing like she had ever experienced. His cock massaged inside her, pulling on her, and pressing into the walls of her pussy--creating subtleties of unfamiliar, addictive sensation. She felt his body shaking above her, and she wanted this feeling to last forever.\n\nGary knew this feeling couldn't last forever. God, she was incredible. He wanted to pump his body into her with all his weight. He wanted to bury himself into her tight folds and never come out. He wanted to fuck her until he was exhausted. His body peaked in a quaking orgasm inside Kathleen. \"Oooohh. Ohh. Ahh.\" Gary's moans into her ear were joyful and liberating. He wanted her to know how she made him feel. Her fingers squeezed the flesh of his back as he felt his cum emptying out of him in draining, bliss-fueled bursts. His mind filled with filthy thoughts of ceaseless, outrageous fucking, alongside giddy memories of her optimism, her humor, and the way her sparkling eyes looked when she smiled at him. He was buried inside her generous body--feeling a primal connection with her that, no matter what happened, he thought he would remember forever. Tears welled in his eyes, and the aftershocks of his exhausting orgasm washed over his body. He collapsed onto her, overwhelmed. \"Ohhhhh, my God.\"\n\n\n\"Oh, my God.\" Kathleen could feel Gary's cock ever so slightly squeezing and relaxing within her. She reacted by squeezing her pussy muscles around him, and that seemed to elicit even more of his tiny grunts into her ear. She hugged him hard and savored the feeling of his sweaty skin slipping against hers. Why had she waited so long to do this? She knew her life was only really just beginning, and yet she never expected this moment to mean so much to her. \"Are you ok?\"\n\nGary, unable to stop his tears, reached his hands under her--squeezing them between her back and the bed and just hugged her tight. \"Thank you for being so wonderful.\"\n\nShe simply hugged him back, not knowing what to say. The words of her sister kept running through her mind. They had always seemed comforting to her somehow, and she found herself repeating them to Gary: \n\n\"Hey, hey,\" she said. \"It's just sex, right?\"\n\nImmediately, she felt even more confused. That's not how she felt at all. Wasn't that how she was supposed to feel, though? Isn't that what guys wanted? Isn't that what she wanted?\n\nHer words hit him with a crushing blow of reality. T. had pounded those words into him like a mantra, and he never wanted to believe them--especially now, feeling Kathleen's warm, silky body in his arms. Had it all just been in his head? Did what they had just shared not mean anything to her? As the waves of orgasmic bliss finally abandon his drained body completely, he finally sensed the hard truth in her words. He felt more stupid than he'd ever felt in his life. His tears of release had suddenly turned into something much darker and more familiar to him. \"Was. . . was it?\"\n\n\"No, no. Wait, wait, wait.\" She could only imagine what was going through his mind as he breathed in and out, trying to control the obvious hurt she had just caused him. \"Gary?\" His cock was still inside her, but he wouldn't look at her. \"That's not what I meant. Gary?\" What had she done?\n\nGary lifted his body, and pulled out of her, not knowing how he should feel, but so upset that his eyes were almost blind with tears. He stood up, desperately fighting the weakness in his legs. \"Yeah.\" He choked. \"Just sex. Ok.\" He tried to tell himself that he could handle it. This was the real world. He had to get out of that room. He couldn't let her see him like this. Who knew that sex could make you feel so fulfilled one second, and so hopelessly empty the next? Why did she say that?\n\nGod, why did she say that? \"Gary?\" She sat up, desperate to do something--to comfort him, to fix what she had callously broken. She watched him standing there with so much disappointment in his eyes and wondered just how she had ever come to believe that sex could just be sex. \"Gary, I'm sorry. That's not what I meant.\" She was so confused. \n\nGary blurrily fumbled his underwear and pants back over his legs. He couldn't look at her--it would hurt too much. It wasn't her fault.\n\n\"Gary, wait. Please?\"\n\n\"It's ok,\" he shook his head back and forth--trying to act as if nothing was wrong. If he could convince her, perhaps he could convince himself too. If only he could just stop crying. \"It's ok.\"\n\nKathleen's stomach knotted in pure panic. \"No. . . no,\" she shook her head and jumped off the bed, blocking the door with her naked body, and looking up at him with tears in her eyes. \"Please don't go. Don't go. I'm so sorry. I didn't mean it. Let me fix it.\"\n\nGary's face was soaked with tears. He could barely see her face through them. Her tiny, naked body, blocking his retreat, made his heart ache for her that much more. He managed to force out the question, \"Did it really not mean anything?\"\n\nKathleen longed to take him in her arms--to show him what she was really feeling, but was afraid of making things worse. \"Of course it did,\" she pled as her own tears washed down her cheeks. His expression softened at her obvious distress, and it was all the invitation she needed. She opened her arms to him, pulling him into her. \"Of course it did. I don't know why I said that. I'm so, so sorry.  Please don't go.\"\n\nGary was still torn between wanting to lose himself in her arms, and retreating away from her to protect himself. Why was this hurting so much? It was so stupid. Maybe sex really was what T. had told him it was. \"I. . . I mean, I don't expect anything. I don't know what'll happen. I just. This was just. It was amazing. Wasn't it?\" He pulled his head around her shoulder and looked into her eyes. \"Wasn't it?\"\n\nKathleen cried right along with him, and nodded--finally understanding how incredibly special it was, to both of them. \"Yes.\" She whispered faintly. \"I'm sorry.\" She hugged him hard. \"I'm so sorry. I don't even know how to describe it. I guess. . . I don't know.\" She released her grip on him a bit and looked toward the floor, trying to decipher her feelings. \"My sister says that all the time. 'It's just sex, Kath.' She says it all the time. I don't know.\" She looked up into his handsome, troubled face. \"I guess it is just sex, really. I mean, you know?\" She shrugged wishing she could express herself better. \"But it was. It was beautiful,\" she cried through her tensely uncooperative mouth, feeling the truth in her words. \"It's not what I expected.\" She smiled, feeling like she was digging herself into a hole. \"It was amazing,\" she nodded simply.\n\n\"Really?\"\n\n\"Really.\"\n\nGary found inexplicable comfort and truth in Kathleen's gentle words. The deed was done, and still her arms were around him in a tight embrace that made him feel better than any orgasm could. He sniffed, and just then a thought came into his head that made him laugh through his tears. \"It sounds like your sister and T. should get together.\"\n\nKathleen's arms hooked around his neck, and she felt a huge wave of relief and happiness when she saw his smile. \"Why?\"\n\nHer face was so beautiful. Her body was simply, comfortably naked in front of him. \"They could be the 'It's just sex' twins,\" he said.\n\nKathleen laughed, and reached up to wipe a new tear from Gary's face. They looked at each other silently.\n\n\"So.\" His mind was suddenly alive with questions. Was this love? Is this what relationships were? What did all this mean? \"Are we? How? Uhm.\" He smiled at his own incoherence as he watched her patiently attentive face.\n\nKathleen smiled, seeing his mind always working in the background--always wondering, always analyzing. \"What is it, Aristotle?\" It was too bad, maybe she could coax \"Mickey\" out again later.\n\nGary smiled with a giddy heart. \"I don't. . .\" He shrugged hopelessly. He wanted so much more, but he didn't know what. Finally, he found the words he was looking for. \"What do we do now?\"\n\nKathleen shrugged her shoulders in an honest smile. \"I don't know.\" \n\nThey found each other's eyes and Gary lost himself in her beautiful face. \n\nKathleen bit her lip and grabbed his hands, pulling him back toward the bed. \"How 'bout cuddling with me?\" She raised her chin at him and squinted her eyes with a bright smile, elated to see his comfortable laughter return. They sat down together, then leaned back and she rested her head on Gary's chest. She felt his heart pumping regularly, calmly in her ear. Her fingers spread against his ribs, and her thigh lay along the top of his legs as his arm wrapped around her shoulders. \n\nA long moment of shared warmth and silent breathing nurtured an uncertain optimism growing in their collective thoughts.\n\n\"Kath?\"\n\n\"Yes?\"\n\n\"This is amazing too.\"\n\n\"Yeah.\"\n\n<center>---THE END---</center>\n\n For my wife, J.\n\nThanks to my friends, Varian P, Blackshanglan, Carsonshepherd, G_G, and 'Rain for their invaluable reactions and thoughts over the course of this story's very personal process."
    ],
    "authorname": "MLyons",
    "tags": [
        "damn party",
        "stop gary",
        "eyes squinted",
        "tiny patch",
        "god kathleen",
        "gently ear",
        "life beginning",
        "condom wallet",
        "tiny steps",
        "afraid touch"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/goodbye-la-la-land"
}
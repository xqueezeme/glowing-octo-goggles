{
    "title": "Guns and Dust Ch. 10",
    "pages": [
        "<p align=\"center\">****</p>\n\n<p align=\"center\">Hello fans of Guns and Dust! It's been a while. Life gets in the way of writing sometimes and this little thing called a pandemic has certainly gotten in the way as well. But I'm back with some new chapters that will hopefully fire up your imaginations!</p>\n\n<p align=\"center\">Chapter ten takes place immediately on the heels of chapter nine, so it may be helpful to read (or reread!) chapter nine so that the emotions and events are fresh.</p>\n\n<p align=\"center\">Thank you so much for your continued support!</p>\n\n<p align=\"center\">****</p>\n\n<p align=\"center\">Guns and Dust</p>\n\n<p align=\"center\">- chapter ten-</p>\n\nAdina rolled the bearcat to a stop on the outskirts of the slave camp. The brake pedal felt strangely heavy and hard under her foot as she stepped down on it to stop the big machine. Miles of dark, empty landscape sliding past the big truck's windows drifted through her mind. And there were the bearcat's tracks she'd followed to get back. She squinted, her eyes flicking between gauges in front of her as she tried to make sense of the muddy, undefined smear of events that were her trip back to camp. A glimmer was just starting on the horizon as she turned her attention to the abstract, sharp black silhouettes of tents and structures. More vague images of the trip back flicked by.\n\nAnd then the terrified faces of the Ghost Eyes she'd killed were there again... everywhere she looked, wide-eyed, bloody and mangled faces stared back.\n\nShe shifted the bearcat out of gear. It took what felt like all her strength to set the brakes. Idling there, she stared at the strangely orange light coming through the windshield. It painted bars in the dusty air of the interior.\n\nThe door was yanked open. And Asher was suddenly there, pulling himself up the step to her level.\n\n\"What were you thinking!\" he snarled, his mask spattered with drying blood. Then he stopped. From the other side of the lenses, she watched his lapis blue eyes travel over her blood-stained clothes, sagging shoulders and hollow-eyed expression. They moved to the passenger seat of the bearcat. She followed his gaze. The heavy lug wrench was propped there, the gory head resting on the seat, the long handle against the armored door.\n\n\"I...\" Adina swallowed. She clutched the steering wheel trying to steady herself. The ghost eyes cries and howls of mad fury or agony mixed with the young woman's screams. The moment one of them was going to rape her. The moment before Adina had plunged her knife into his neck. The body of the raider who'd been trapped in the burning car was there, arms thrown out of the vehicle's crushed window. Flames and smoke boiled around the corpse making him seem to move.\n\nShe felt like a poor puppeteer trying to make the unfamiliar marionette of her mouth work. \"I killed them all.\"\n\nAsher watched her for another moment, then pulled off his helmet and mask steadying himself in the open door. \"It's alright.\" He reached across her, turned off the engine, then laid a gloved hand on her arm.\n\nEven his touch felt strange, sort of numb. Adina didn't lean into him. She wanted to, but everything just felt so disconnected.\n\n\"You did the right thing.\" He held her arm for a moment, then pried her hands from the steering wheel. Her fingers snapped closed with the spasm of gripping the wheel so tightly. He gently put her fists to her chest and enfolded her in his arms. \"It's alright.\"\n\nThe light on the horizon had changed from a low line in the distance to a broad glow before a voice from outside pulled Asher's attention away. Adina couldn't make out who it was or what they'd said. It was just murky background noise. She felt Asher nod. He squeezed her tightly and descended a step, then stood and waited. When she finally turned to him, his eyes searched hers.\n\n\"We found Nat. He's here and he's okay.\"\n\nThoughts of the boy from the quarry who'd been captured had fled completely from her mind. Everything else had disappeared after the Ghost Eye Bulla had pulled the young woman screaming from the cage. She knew Asher's words were important, but they were lost in the fog holding everything hostage inside her. She nodded.\n\nAsher watched her for another moment, then climbed down. Adina could see people moving in the camp, hear their voices, but they didn't seem to connect to anything. When Asher reappeared at the foot of the step, Nat was clinging desperately to him. Asher looked at Nat's face and then pointed up.\n\n\"Look Nat, it's Adina.\"\n\nNat's little boy eyes were dark and haunted. His expression was terrible; bereft and vacant. His face was filthy, his dirty cheeks marked with long streaks from tears.\n\nPain like a hammer hit Adina in the chest when she saw the bright red chafe marks on his wrists. Everything inside her felt like it was suddenly breaking apart. Asher boosted Nat up, then stepped up behind him to steady him. \"Do you want to hold onto him?\" Asher ran a bloody, gloved hand over Nat's hair. \"He's still pretty scared.\"\n\nAdina pulled Nat into her arms. There hadn't been a thought, it was automatic, instinctive. And as the little boy pressed himself against her, it was too much. Which of them started it she didn't know, but they were both suddenly bawling. Nat clung to her desperately, shuddering with the force of his sobs. Asher just watched them for several moments, then stepped up and kissed her dirty, smoke drenched hair. He held his lips there. \"I love you, Adina.\" The words she'd longed to hear him say were caught in the disconnected mist that seemed to shroud everything. She heard them, but they just didn't seem to touch her. He gave her another kiss, climbed down, and closed the door.\n\nAdina blinked as the bright light of the sunrise seemed to suddenly stream in through the bearcat's windows. Maybe it was sudden; the sun just rising above the horizon, or maybe she only just noticed it. The sky looked like it was on fire, filled with glorious pinks, purples and oranges as the sun's warm rays fell across her.\n\nAnd in the spreading sun, she could see people moving in groups outside, appearing and disappeared like abstract phantoms between sunlit areas and long shadows.\n\nShe shaded her eyes. What looked like confusion was really more like organized chaos. The fierce black woman who'd led the slaves in the fight was directing people, many of whom were working with purpose. Squinting against the brightness, Adina saw Asher. He was shepherding a group of slaves to one of the large shade structures.\n\nAnd in one of the long, angular shadows, bodies were laid out in a row - dead Ghost Eyes. Some were naked, others still clothed, everything useful stripped from them.\n\nNat had stopped crying. It was only when Adina noticed he'd stopped that she realized she'd stopped too. Seeing the work going on outside; something so familiar, so normal, her pain eased like a muscle cramp letting go. A wave of calm rolled through her as she watched people go about the reassuringly simple tasks.\n\nThe intensity of her rage, fear and pain, all seemed to drain away, leaving her just feeling tired. Her hunched shoulders dropped, and she could finally take full breaths again.\n\nOnly now...\n\nShe looked into the rising sun, squinting against its brilliance and taking in the colors that seemed suddenly, shockingly bright.\n\nCan't change what's happened. Don't know what will happen.\n\nShe looked down at Nat. He was still staring blankly into space.\n\nThere's only now.\n\nAdina squeezed him and pointed to the sunrise. \"It's pretty isn't it?\" It took her pointing a few more times before he turned and looked. He nodded mechanically. As she relaxed, she felt him relax too.\n\nShe squeezed him again. \"There's work that needs to get done. Should we go and help?\" Nat didn't say anything. He just clung to her. She shifted toward the door. \"Okay, we're going to go help.\" She unlatched the door and looked down at him. \"You're going to have to help me climb down, okay?\" She canted her head to see his face. \"I'm not as strong as Asher. I can't climb down and carry you at the same time, okay?\" Nat watched her eyes for a long moment, then finally released the death grip he'd had on her.\n\nAdina caught up with Asher as he talked with the tall, fierce black woman. Nat was glued to her hip. Asher's eyes traveled between them, then rested on hers for a moment before he gestured to the other woman. \"Adina, this is Zara.\" Then he indicated her. \"Zara, this is Adina.\" Zara looked her up and down with a hard, assessing gaze.\n\n\"You killed those men in the tent and then chased those others out into the desert by yourself last night.\" It wasn't a question, more an establishing of facts. Zara neither seemed impressed, or disappointed. Her expression remained resolute and controlled. She pointed her chin out toward the wastes, her eyes never leaving Adina's face. \"I hope you gave them the death they deserved.\"\n\nZara was taller than Adina, with intensely black skin and lighter brown eyes. Her hair was a mass of tight braids that must have taken hours to do at some point. They had gone toward dreadlocks from lack of maintenance, surrounding her face like a jet-black lion's mane. Zara's features were hard; deep creases under her cheekbones made her look even more severe. She might have been pretty if her expression wasn't cabled and carved the way it was. Zara's bare arms were muscular, but not big. She looked like a fighter but didn't have the battle scars Adina would have expected. There were thin horizontal scarification lines just below her eyes as well as light-colored curving tattoos that stood out starkly against the dark skin of her arms and the right side of her neck. Adina had never seen such precise, light-colored tattoos before. Asher's tattoos were amazingly detailed, but the white tattoos against Zara's dark skin were striking.\n\nAdina instinctively pulled herself up straighter at Zara's fierce assessing gaze. She could see Asher watching their interaction out of the corner of her eye.\n\n\"I did.\" Adina stuck out her hand. \"I'm pleased to meet you, Zara.\"\n\nZara cocked her head. It was a hawkish sort of motion. Adina's impression was that Zara was used to people being cowed by her. Adina was done with being intimidated - by anyone. Least of all someone whose life they had just saved. Zara watched her eyes, then took her hand. Zara's grip was firm, but there was no competition in the strength there. Zara nodded.\n\n\"And you.\"\n\n\"Ooh ooh!\" a voice called in the way of a greeting and when Adina turned, she thought she was seeing some kind of psychedelic apparition. A very tall, thin-framed man was approaching them. He was wearing the most outrageous attire she could have imagined. It would have been striking anywhere, but with dead Ghost Eyes only a few yards away and surrounded by brutalized slaves, he looked like something that had fallen from another planet. She heard an unmistakably disdainful exhalation from Zara.\n\nAsher turned to her again and gestured to the flamboyantly dressed man. \"Adina this is Lew-Lew.\" He pointed from the astoundingly dressed man to her. \"Lew-Lew, this is Adina.\"\n\nThe man flounced to her with the most unimaginable gait, crossing one foot in front of the other in a strange strut that made Adina's eyebrows climb up. Lew-Lew was as filthy as all the other slaves, but he walked like he was on a stage that no one else could see. He threw an arm up over his head, his wrist bent most decorously. \"Here I am!\" He was wearing what Adina could only think of as a tutu in an unnatural shade of pink with close fitting particolored trousers underneath it. He wore a vest in faded, and now torn turmeric yellow fabric with a short coat thrown over it. The coat was a shade of green that reminded Adina of a warning sign for toxic chemicals or radiation. And he was wearing makeup. There were dark circles around his eyes from where it had run and faded, and his cheeks were smeared with fading red. Adina had seen traveling storiers who were far less... expressively dressed. Seeing her obvious gawk, he stopped a few feet away and twirled. It was only then that she saw the gigantic, filthy blue bow that apparently tied the tutu around his waist. His pirouette finished; he threw his head to the side dramatically.\n\n\"Well, if you're going to stare darling, I thought I might as well give you the whole show!\" He pointed skyward. \"If they can't see how fabulous I am from orbit, why bother!\"\n\nAdina couldn't speak. She was taken so off guard by the wildly flamboyant man in the grim setting that she could only stare at him. Lew-Lew ignored her obvious derailment, stepped to Nat and bent at the waist. \"And how are you now? Feeling better?\"\n\nAdina looked from Lew-Lew to Nat and back again.\n\nAsher pointed between them. \"Lew-Lew was looking after Nat when we got here.\"\n\nNat still didn't say anything, but he nodded to Lew-Lew.\n\n\"Good!\" Lew-Lew smiled and stood up, looking at Adina directly. \"Have you recovered yet, hun?\" He stuck out his hand, once again with a most decorous bend in his wrist. \"Say hi. You're just standing there.\"\n\nAdina couldn't help the sudden grin the pulled her mouth wide. Lew-Lew was so... unexpected among everything else that it was the only expression her confused body seemed able to come up with. \"You're... amazing,\" Adina stammered, taking his hand.\n\n\"Thank you, darling!\" Lew-Lew cried effusively, putting his other hand on hers in a most elegant gesture.\n\n\"What is it, Lew-Lew?\" Zara demanded.\n\nLew-Lew threw his eyes skyward. \"She's so gruff!\" He let go of her hand, then turning to Zara and Asher. \"We should have all the tentage we want down in the next two hours. We're separating usable scrap from what's not worth taking. It should be...\" He made an elaborate gesture as if checking a pocket watch. \"Three hours before we know what we have. And we have all the sick and injured under cover. Food and water are being distributed.\" He waved a hand. \"We're not telling anyone what the food is of course.\" He turned and peered at Adina with a conspiratorial gaze. \"They are hungry enough that it doesn't matter anyway. We are well stocked on water, at least ten days' worth without rationing.\"\n\nAdina's head was spinning at the clash between how Lew-Lew looked and his certain and utterly self-possessed report about the goings on in the camp.\n\n\"We have thirteen vehicles,\" Lew-Lew continued. \"One is being worked on. It may or may not be usable. We need to decide one way or the other in the next hour to give us time to strip what we can from it if we want to be gone by nightfall.\"\n\nLew-Lew flicked his eyes to Adina dramatically. \"I know. I am so much more than just a pretty face!\"\n\nWhen Adina finally sat down in the open side door of the bearcat, the sun was halfway to its zenith. She took a long drink from her canteen. Nat wasn't physically attached to her anymore, but he was never more than a few feet away.\n\nEverything in the camp was being stripped, even the slave cages were being broken down and loaded onto the remaining raider vehicles.\n\nAsher approached the bearcat, Zara at his heel.\n\n\"As soon as we've got everything useful loaded, we'll follow you,\" Zara announced, shading her eyes and gesturing out into the desert.\n\nAsher took the canteen Adina offered. \"We need to get moving as soon as possible. We can't risk the Ghost Eyes finding us.\"\n\nAdina offered Zara a separate water flask. Even though she and Asher had their masks off, they were still cautious about contamination.\n\nZara nodded a thank you to Adina and drank deeply. She handed the flask back and jerked her head out and away from the camp. \"And you think these people at the quarry will take us in?\"\n\nAsher shrugged. \"I don't know. But if the Ghost Eyes razed your towns, what else are you going to do?\"\n\nAdina hadn't heard anything about where Zara and the rest had come from. It hadn't been a priority up to now. \"You're taking them to the quarry?\"\n\nAsher gave her a resigned nod. \"Yes, the quarry needs bodies. Zara and the rest of the survivors need someplace place to go.\" He turned back to Zara. \"But I can't guarantee what they will say.\" He nodded to the slave cages that were being taken apart. \"But if you bring them that much quality steel, it will certainly be an offer in your favor.\"\n\nZara's expression darkened. \"And the injured?\" She glanced back to the rest of the camp. \"Some are too weak or wounded to make any kind of journey. But others... I don't know. They might survive.\"\n\nAsher turned fully to her. His demeanor was sympathetic, even if the deep furrow between his eyebrows made him look severe. \"That's your decision, Zara. I can't make it for you. The people in camp follow what you say. Whether you want it or not, that makes you their leader as far as I can tell. These are your people.\"\n\nZara's demeanor turned brusque and immediate. Adina had only known her for a few hours in an awful situation, but everything about Zara seemed hard. She wasn't someone Adina wanted to be on the wrong side of.\n\nZara blew out a breath. \"I'll take care of it.\" She glanced at Asher. \"You don't have anything that we could use to kill them painlessly, do you?\"\n\nZara's all too direct and unvarnished statement felt like it knocked pins loose somewhere inside Adina. She knew as well as anyone that leaving people to die of dehydration, or worse, to be found by the Ghost Eyes would be cruel. Ending their lives was the least cruel thing they could do. But Zara's directness was.... Unsettling.\n\nAsher shook his head. \"No, I wish we had something to help you. And we also can't spare bullets to help in that way either. I'm sorry, Zara.\" Asher's words were also direct. And while what they meant was harsh, unlike Zara, there was regret in his voice. Adina could feel his anguish, even if Zara couldn't.\n\nZara's hard features creased even deeper. \"It is the wastes. We do what we have to.\" She turned back to the activity in the camp.\n\nNat pressed against Adina again and she put an arm around him. He hadn't said a word since Asher had put him into her arms in the bearcat.\n\nZara just watched the camp for a long moment and then walked away without another word. Asher settled down next to Adina on the step of the bearcat's open side door. He took another long drink from the canteen watching Zara's receding back. \"I don't envy her.\" Then he turned to her. \"Are you alright?\"\n\nAdina nodded and leaned against him. \"I think so. I'm sorry I was so... out of it.\"\n\nHe put an arm around she and Nat, pulling them against him and gave her a kiss on the hair, then rested his cheek there. \"It's alright. Last night was hard. You went through a lot.\"\n\nShe snuggled against him, feeling more herself. She relaxed more, reveling in the feeling of his security. \"What are we going to do with them all? How many are there?\" she finally asked, glancing at the work going on. Tents were being pulled down, shades rolled up, poles, posts and rigging being disassembled.\n\n\"Sixty give or take. It depends on how many Zara thinks can make the trip. We'll take them out in the desert, make it hard for our trail to be followed, maybe a day or two and make camp.\" He pushed her up so he could look her in the face. \"Then you're going to take the bearcat back to the quarry with Nat.\"\n\nAdina sat up fully. \"What? Without you? What are you talking about?\"\n\n\"I need to stay with them in case something happens.\" He glanced out at the camp again, speaking more quietly. \"And make sure no one follows you.\" He indicated the camp with a sweeping point of his chin. \"These people are desperate. We don't know what they might do. We can't risk them finding the quarry until you talk to Priav and Rafi. They need to be ready if they are going to allow these people in.\"",
        "\"I can't talk on behalf of all these people!\" Adina's heart was thumping madly in her chest again. \"I wouldn't know where to start!\"\n\nAsher just watched her eyes, his lapis eyes so assured. \"Of course, you can. You know the situation here, Priav and Rafi trust you. I trust you.\" He nodded out into the camp. \"These people need help - a chance.\" He smiled and pushed a sweaty lock of hair out of her face. \"And you can give it to them.\"\n\nIt was almost dark when the ragged caravan headed out into the wastes from the slave camp. Every vehicle was festooned with supplies and salvage. Several of them were so loaded that the passengers had to sit on top of the load. As they pulled away, Adina looked back at the slave camp. It had only been a day since they'd first come upon it. And so much had happened since then.\n\nAdina had killed her first person. With a knife. Then she'd killed fourteen more. The Adina that Asher had saved from the raiders was dead now too, as dead as the Ghost Eyes in the tent or strewn in the empty desert.\n\nShe tried not to think about the people who were left behind, or their friends. Zara had decided the swiftest, least cruel way to end their lives was by using guns taken from the Ghost Eyes. One bullet in each of their heads. The way she had killed the sleeping Ghost Eyes. But Zara's shots weren't silenced, and their sharp reports were surrounded by the cries of friends and families. Adina's heart felt like a rough piece of trail that had been driven over again and again, the rocks and stones driven deep, some left embedded that would fester for a long time.\n\nBut fifty-two people had survived, and they were moving now.\n\nHopefully out of danger at least. Maybe even to something better.\n\nAdina tried to console herself with the good news, but it was hard. Lew-Lew had been cheering everyone on with seemingly limitless energy, cajoling and encouraging in equal measure, seeming immune to what was happening around him.\n\nA huge dust cloud now followed them. The last vehicle in the caravan was dragging an assembly of pipes, wires and chains that obscured their tire tracks as they wended this way and that doing everything they could to leave no trail for the Ghost Eyes to follow. They drove for hours into the night trying to put as much distance between themselves and the slave camp as possible before the sun came up. Nat sat in her lap, staring mute out into the darkness. She kept trying to get him to sleep, but he seemed immune; staring, saying nothing.\n\nThe moon was past its zenith, shining against the blanket of stars when Asher climbed the bearcat up an incline and stopped on top of the broad mesa.\n\n\"This is a pretty good spot, I think,\" he said as he peered outside, then turned to her. \"What do you think?\"\n\nThe mesa was only one or two hundred feet taller than the surrounding desert but gave them a good vantage to watch the landscape around them. And there were large boulders and stones that would help hide the vehicles silhouettes.\n\nAdina nodded. \"Yeah, I think it's good.\" She turned and looked out the side window, scanning the wastes. \"Probably the best we're going to find. Especially if they have to stay here for a few days.\"\n\nAsher nodded. \"Okay, I'll let everyone know.\" He moved the bearcat in next to a large boulder that was just taller than the bearcat on one side. It would be easy to climb on top of the rock from the truck. He turned to her. \"Why don't you set up someplace for him to sleep.\" He leaned across the console and ran a hand over Nat's hair. \"You're going to sleep in the bearcat with us tonight. Is that alright?\"\n\nNat looked at him. Adina could see there was a spark of interest, but it was suffused under the blanket that seemed to lay over all of his emotions.\n\nIt took more than an hour to get the caravan's vehicles settled and almost as long before Nat was finally asleep. He was exhausted but trying to calm him down enough for his exhaustion to overcome his anxiety took time. Now he was out, wrapped in a dirty blanket on top of piled tarps and canvas they'd salvaged from the camp.\n\nAdina lay against Asher's side, leaning into the security of his strong arm. Each time she drifted toward sleep, dead Ghost Eyes were waiting, watching her. And when she opened her eyes, their ghostly white painted faces stared back at her from the shadows. She ran her fingers over Asher's scars, trying to forget the tactile memory of the wrench handle in her hands. But it was like she was wearing rough, sticky gloves that blunted the sensation of his skin.\n\nShe put her face against his neck. \"I want you.\" She wasn't aroused yet but needed to feel him; his hard body against hers, inside her, to drive the images and sensations away. She stroked his cheek, pulling on his shoulder. As he turned to her, she pulled her shirt up over her head and wiggled out of her pants. He ran a hand over her naked hip and up her side. Everything inside her suddenly leapt into a tumult of confusion and arousal. The feeling that the dead Ghost Eyes were watching them set fire to a sudden, needy ache for him.\n\n\"Are you alrig...\"\n\nShe kissed him. \"Please.\"\n\nWhen he pushed inside, she pulled herself hard against him, the storm inside her now raging. She closed her eyes and bit her lip, holding back her body's desperate need to release. It was all she could do to wait until he was fully inside her before letting go. Her orgasm wasn't the violent, pitching, wild sort she had so often with him. It was a soul searing unleashing of tension. She grasped his back as everything inside her clamped onto his thick cock. She explored his scars with her fingers, but still could still only feel the rough, heavy handle of the wrench as she brought it down over and over on the Ghost Eye. She grasped at him trying to feel him. She started to cry.\n\n\"Adina?\"\n\n\"Please.... Please don't stop,\" she begged, hooking her ankles around his strong hips and pulling herself onto him, her body trembling as she wept, suddenly sweating. \"I just want to feel you.\"\n\nShe clutched at him, biting him in frustration as the Ghost Eyes continued to watch her. \"More,\" she begged and pushed on his shoulder to get him to roll onto his back. She kept her eyes closed, focusing on the feeling of him inside her and his hands on her as she plunged herself down onto his cock. The slapping of their bodies filled her ears and senses, his fingers or mouth on her breasts, rolling and sucking her nipples almost overwhelming as she rode him. But even as she panted, her belly trembling, she couldn't break the images. The Ghost Eyes were still there. \"Get behind me.\" She turned over and pushed her hips back, pushing against his hardness, then guided his slippery shaft over her vagina and then up onto her tight anus. She pushed back.\n\n\"Are you sure?\"\n\nShe didn't say anything, suddenly so aroused that all she could do was nod her head. Her breath caught as his penis pushed in, just a bit, her fingers reaching back and clawing at his hip. The pain was so exciting. He pulled back and ran his penis over her wet vagina again, while gathering her wetness on his hand and using it to lubricate her. She breathed, \"Yes... Please...\" And he was inside her again. The burning pain of him pushing into her blasted everything else away. Her belly cramped with animal lust and pain and as she gripped the blanket. The feeling of the wrench in her hand was gone. All she could feel was Asher pushing deeper into her, her body stretching to accept him and pain that was so... She came again, hard this time, bucking and kicking. \"Don't stop!\" She bit the blankets, clawing at them as he pushed her down, his weight on her and his penis driving in deeper. She filled her mouth with the blanket to stifle her screams. She reached down running her fingers over her hard, sensitive clit as he drove into her, pushing her hard into the mattress. She could feel his arousal in the way he gripped her hips, making everything that much more intense as he pleasured himself on her. She pulled the blanket out of her mouth. \"Fill me, Asher, I want to feel you cum!\" She was close again, ready, but wanted to cum with him. She felt the whole length of him as he pulled back and filled her again, pounding fast and hard. He stiffened and groaned. \"I'm gonna cum!\"\n\nHe rammed in deep, and she felt the hot explosion in her ass. And her body responded, thrashing, her legs kicking, held down helpless under him as he arched, pushing his cock in as far as he could. She was rigid for long seconds, trembling and frozen by the powerful orgasm before finally collapsing onto the blankets panting. A moment later his relaxed weight was on her, his breath on the back of her neck.\n\nAdina woke up feeling Asher's fingers lightly brushing her cheek. She was tucked up against him under the blanket. It was still dark in the Bearcat. His fingers reminded her of how it had been after their first time together. The hot springs that felt like they were a lifetime ago.\n\n\"Are you alright?\" he whispered in the darkness. She could feel his whiskers against her cheek.\n\nShe nodded. The faces of the dead Ghost Eyes were gone.\n\nAdina woke to orange morning light streaming in through the bearcat's windows. She squinted and lifted her head. Asher's expression was relaxed. He was still asleep. Her heart thudded hard in her chest. He'd been so gentle with her last night - so careful with her, even as their lovemaking turned hard... Her body suddenly remembered last night with a pang of pain. She was sore; and in a way she'd never been before. She dropped her lips onto his chest, a grin pulling her cheeks wide as she remembered desperately grabbing at him behind her, biting the blanket as he filled her ass. And then her fiery orgasms. She kissed one of his scars, marveling at how the man she'd watched cut down Ghost Eyes with such relentless brutality and the man who'd been so gentle with her when she needed it most both lived in the same body. Images of the fighting returned. Bodies moving, just silhouettes in the darkness, screams and... He knew what she was capable of. He'd seen it and had still been so gentle... \"I love you.\" She kissed him. \"I love you.\"\n\nHe opened his eyes and watched hers in the golden light. A corner of his mouth came up. But he didn't say anything. He just watched hers as if there was nothing else in the world. A red trail on his chest drew her eyes. It led to a red bite mark. Adina's eyes went wide.\n\n\"Did I do that?\"\n\nAsher glanced down and smirked. \"You were very... enthusiastic, last night.\"\n\nShe covered her mouth with both hands her eyes shifting from the bite mark to his face and back again. His smirk forced a tickle in her belly, and she started to giggle. \"Stop looking at me that way!\"\n\nThe smirk widened. \"What way?\"\n\nShe couldn't help the laugh that rolled up as she gingerly inspected the wound. It looked like she'd scraped the top layer of skin off, it wasn't deep. She grabbed the canteen and carefully wiped the blood away. \"I was... I don't know - scared, I think. I've never done anything like... that; what I did to the Ghost Eyes... before.\" He nodded, just listening. The scrape was already healing. She wiped away the blood, then met his eyes. \"Thank you for being so gentle last night.\" She gave him a soft kiss.\n\nHe smiled back at her, taking the damp cloth and pointing at her chest. There was a streak of his dried blood. He wiped it away, drawing the cloth lightly over her skin. \"One of us had to be.\" He smirked again and kissed her nipple. It sent electric shocks through her and she hissed in arousal. Then he sat up. \"Hold that thought.\" He slid a hand over her suddenly aching mound. \"We have work to do.\" He closed his hand, squeezing and she curled around it, a lusty groan escaping. He grinned, watching her expression then let go and pulled on his shirt. \"Let's go.\"\n\nShe narrowed her eyes at his playful expression, her body feeling like it was on fire. \"Bastard.\"\n\nHours had passed as Adina and Asher finalized the details of the plan with Zara, Lew-Lew and the rest of the survivors. The rest of the camp was busy setting things up for their stay while Asher helped Adina prepare the bearcat for her solo journey.\n\nAdina watched as Asher pointed to the gear driven mechanical dials and wheels behind a panel under the passenger side console. \"You remember me talking about the 'bug', right?\" She nodded to him.\n\nHe was on his side in the passenger foot well, his legs hanging out the door, his undershirt stretched tight across his chest as he twisted to show here the mechanism. She couldn't help her eyes wandering along is muscular torso. She looked where he pointed, trying to get her mind back on track. But their sex from the night before filled every corner of her brain and her soreness was a constant reminder of it. \"It records bearings, speeds and other information that allows us to determine locations from a fixed point.\" She nodded again. \"It's time for you to learn how to use it. That's how you'll find the quarry, and then find us again.\" He smiled at her. A little boy sort of naughtiness seemed to tug the corner of his mouth up as if he could see right into her head and watch what was playing out there. He let his head settle onto his brawny bicep, just watching her.\n\nShe flushed with the idea of him seeing what was in her head, feeling strange about the moment of embarrassment. It's not like he wasn't -- there...\n\n\"You look very pretty this morning.\"\n\nThe simple statement couldn't have had more impact if he'd hit her over the head with the huge wrench which now sat, clean in its normal bracket. Her face felt like it caught fire, then her chest, and other places she didn't want to think too much about for fear of being entirely derailed from the task ahead. She just grinned. The expression felt stupid, uncoordinated, her facial muscles seemed as distracted as the rest of him, his all too tight undershirt, and the simple words.\n\n\"Uh, thanks.\" She pushed a strand of long, dark hair behind her ear. \"You too. Not pretty... I mean...\" she stammered and sucked in a breath leaning forward to hopefully hide the fact that her nipples were standing out at attention. \"You look... handsome...\"\n\nHis eyes narrowed just a bit, playfully, and the boyish lift at the corner of his mouth turned to a smile. He pushed up, putting his face close to hers. \"I had fun last night too.\" He gave her a kiss and when he leaned back, his expression was more serious, only slightly, but it was a sharp contrast to the moment before. \"I was worried.\" He ran fingers over her temple and cheek, and she leaned into his hand. She took it and kissed his palm.\n\n\"I'm okay now.\" The natural smile that followed as she watched his eyes was easy, and not clumsy at all. He kissed her again. It was firm, but not hard, just holding their lips together for a long time, moving his over hers. She smiled in the middle of it. \"That's not fair! We're going to be apart for days.\"\n\nHe smiled back, his lips on hers. \"I know. I just want to have this to hold onto while you're gone.\"\n\nShe held his head with both hands, kissing him deeply before pulling back. \"Me too.\"\n\nRolling away from the temporary camp, Adina's insides were a mess. Fear mingled with unmet lust that Asher had only continued to fan in the hours before they left. Worry meshed with pride at his confidence, his certainty in her abilities. He'd put all he owned, everything that would allow him to get him back home, into her hands, with nothing more than his certainty that she could bring them back to him. She looked back. In the harsh midday sun, everything was a stark contrast. The vehicles were clumped together into various shades of cooler colors below the awnings strung between them, their upper surfaces blasted all but white by the blazing sun. Every face in the camp was watching her, hands raised to shade their eyes. Lew-Lew stood out, of course. The unbelievably bright colors of his outrageous attire were bleached by the light. Asher stood apart from everyone else. He just watched her. The pang in Adina's chest made her blink back tears. Then the camp vanished behind the edge of the mesa as she drove down onto the baked flats following the mental map Asher had given her.\n\nShe swallowed hard and looked to Nat, sitting in the passenger seat. He was watching behind them to where the camp had disappeared. \"Okay, Nat. We're on our way home.\" He turned and watched her uncertainly. She smiled at him. \"A day or two and you'll see your mom again.\" He pulled his knees up and turned away, staring out the passenger side window into the wastes.\n\nAdina stood on top of the Bearcat scanning the horizon through the binoculars. It had been a day and a half since they'd left the makeshift encampment. Adina would never have considered going out into the wastes alone before meeting Asher. And even now, the idea of being out here without him was intimidating. But here she was, standing on top of the armored behemoth, armed, trained; and on her own. Adina shook her head thinking about what her life had been like only a scant few weeks ago. What it would still be if the raiders hadn't razed the settlement. She squinted into the binoculars. A faint, dark line climbed upward near the horizon. That's it... She turned to Nat who was standing in the open cupola of the bearcat. \"I think that's it. We're almost home, Nat.\" He still hadn't said anything. She gestured him to her, squatting and pointing. He squinted into the distance. \"Right there.\" She held the binoculars for him and adjusted them. He looked through them then back to her. \"I know, it's not much to see from here.\" She ran a reassuring hand down his back. \"But we're nearly there.\" He looked through the binoculars again and watched for a long time. When he looked back at her, his expression seemed minutely more hopeful.\n\nThe booming voice of Omar, the big captain of the quarry's defenses rumbled over the dry ground as Adina climbed down out of the Bearcat. \"You're back!\" His eyes searched beyond her and as soon as Nat appeared from the driver's side door, he bent at the waist, putting his hands on his knees, his head dropping. \"Thank the sky!\" Then he stood up and turned, booming back toward the rest of the camp. \"Tell Devon...\"\n\n\"NAT!\" Devon's cry brought everyone's heads around. She was sprinting from the other side of the gate. As soon as she saw Nat step down off the ladder, she skidded to a halt, staring, frozen in place. There was a long moment where no one moved or even seemed to breathe. Devon stared at her son and Nat just stood, his spirit seeming to have momentarily fled his body. Tears welled in Adina's eyes, and she swallowed hard to push down the lump in her throat. She gently put a hand on Nat's shoulder and bent to look him in the face.\n\n\"It's...\" Adina had to clear her throat before she could get another word out. \"It's okay, Nat. We're home.\" Adina took his hand led him gently forward a few steps. He suddenly broke away from her and raced toward his mother at a dead run.\n\nHe collided with Devon nearly knocking her over, wrapping his arms around her. \"MOM!\"\n\nAdina was suddenly sobbing. So were Devon and others who'd gathered. Omar stood, his burly arms crossed, sniffing defiantly against the tears brimming in his eyes. Adina walked to him and put a hand on his thick forearm. \"He's been through a lot.\" She wiped her tears with the back of her hand, watching Devon go between hugging Nat tightly and looking him over for injuries. \"I need to talk to Priav and Rafi.\" Adina heaved a breath to try and get her tears under control.\n\nHer tone pulled Omar's eyes to her and the tears subsided. He looked at the bearcat. \"Where's Asher? He's not...\" Omar didn't finish the thought. Adina could see the concern in his eyes.",
        "\"No, he's fine. But Nat wasn't the only one we found. That's what I need to talk to Priav and Rafi about.\"\n\nOmar craned his head back, understanding dawning on his thick features. \"I'll let them know.\" A cry was already starting throughout the camp. Omar sighed. \"Well, I guess they'll know everything before I get there.\" He nodded to the bearcat. \"Bring it inside the perimeter and I'll tell them you're coming.\"\n\nAdina held his eyes. \"Fifty-two people, Omar. They need a safe place.\"\n\nHis eyes narrowed and his head cocked a few degrees as he scrutinized her for a long time. \"And you think they belong here?\"\n\nAdina shook her head. \"I don't know, Omar. But I think you need them as much as they need you.\"\n\n<p align=\"center\">****</p>\n\n<p align=\"center\">Thank you for reading Guns and Dust Chapter 10! In case you are unaware, reader ratings drive everything for writers here on Literotica, so please rate my story (hopefully 5 stars!), follow me, and tell your friends about Guns and Dust!</p>\n\n<p align=\"center\">****</p>"
    ],
    "authorname": "Kieran_Lancaster",
    "tags": [
        "dystopia",
        "female orgasm",
        "multiple orgasm",
        "love",
        "older man",
        "post-apocalyptic",
        "sci-fi",
        "younger woman"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/guns-and-dust-ch-10"
}
{
    "title": "Life after the Lottery Ch. 65",
    "pages": [
        "Copyright LATL, 2019. No part of this shall be reproduced or re-posted on any other website. It is for the exclusive use of Literotica.com This one is a little long. I didn't want to break it up.\n\nLife after the Lottery, Ch. 65\n\nWhat the girls did for my birthday\n\nTuesday morning, Amy and Samantha took off to school early. Dawn was taking some clothes from her suitcase from her trip to the laundry room while I sat on the bed talking to her.\n\n\"I made Linda tell me about the party you have planned,\" I said.\n\n\"What party?\"\n\n\"My birthday party.\"\n\n\"No, you didn't,\" Dawn said as she picked up an armload of clothes. \"There isn't any party.\"\n\nShe left the bedroom to walk down the hall to the upstairs laundry room. \n\n\"I keep telling you there is no party,\" Dawn said, walking back into the bedroom.\n\n\"Promise?\"\n\n\"James...I am not planning any party. As far as I know, the girls are not either. But, if they have some things planned for you...just shut the fuck up and go with it!\" Dawn said, smiling at me. \"You are like a two-year-old!\"\n\nDawn sorted through some more clothes and left the bedroom again.\n\n\"Oh, Linda emailed me and said she wants the girls and me to come to her office Friday to go over the final design plans for the stores. I told her that it was okay because the girls are out of school on Friday,\" Dawn said when she came back.\n\n\"Okay.\"\n\n\"We will probably be gone all day. I think she wants to take us out to lunch and shopping.\"\n\nDawn took her clothes and left the room again, then came back. We spent the morning doing laundry and cleaning up the house.\n\n*****\n\n\"I have got to run to the school tomorrow. I have meetings all day,\" Dawn said after we had lunch.\n\nSamantha and Amy came in about 2:00 and headed upstairs to study. Dawn and I were sitting in the den. I took Dawn's hand.\n\n\"Come with me,\" I told her.\n\nI took her to her newly redecorated studio.\n\n\"Take your clothes off,\" I told Dawn. She gladly stripped off her sweats and got up on the new all-white bed.\n\n\"Now what?\" Dawn asked.\n\n\"I want you to pose on the bed. I want to play with my new camera.\"\n\n\"I'm not ready for pictures!\"\n\n\"I just want to look and play with the lights.\"\n\nI got behind my new 4\" X 5\" camera and under the black cloth. I looked through it and focused on Dawn. Her being upside down on the back glass just made it more fun.\n\n\"Get up on your knees,\" I told her.\n\nDawn got up on her knees, and I played with the camera. She looked hot with the afternoon sunlight coming through the windows behind her. I would have to remember how the light looked for later.\n\n\"I may have your first customer,\" Dawn said.\n\n\"Who would that be?\"\n\n\"I'm still working on it. This will be a free one. The pictures will get us some business.\"\n\nDawn had become the de facto marketing department for our new photo business.\n\n\"For who?\"\n\n\"Let me finish working it out,\" Dawn said.\n\nDawn placed her hands in her hair and lifted it. I laughed.\n\n\"What's funny?\"\n\n\"In the camera when you do that, it looks like your hair is dangling because you are upside down,\" I told her.\n\nI got out from under the black cloth and walked over to Dawn. She had laid back on the pretty white lace spread she bought for the bed. I walked toward her pulling off my shirt and crawled up on the bed next to her.\n\n\"If you are involved in this birthday thing, there will be payback,\" I told Dawn as I slid my hand up between her legs.\n\n\"James, I am just supplying the money.\"\n\n\"That may be enough to get you in trouble.\"\n\n\"Come on now. We surprised the two of them, let them have their fun,\" Dawn said.\n\nI slipped my fingers into Dawn's pussy.\n\n\"No, you don't! Not on this new bedspread!\" Dawn yelled.\n\nDawn started crawling back away from me. I grabbed her legs and held her as she tried to pull away. I pulled her legs back to me and spread them.\n\n\"James! Doooon't!\"\n\nI got between her legs and kissed her pussy.\n\n\"James! Please! You will make me come all over this new spread!\"\n\n\"I guess you better not come all over the bed then.\"\n\n\"Oh, god!\"\n\nI went to work on Dawn's pussy. I knew if I tongued and sucked on her clit, she would go crazy and come everywhere. I licked and tongued her for a while.\n\n\"James...pleeeeease...\"\n\nI spread her legs apart, and placed my mouth over her pussy and drove my tongue in deep.\n\n\"Oh, god...\"\n\nI kept up my attack on Dawn. I could feel her squirming, trying to keep her cool. I started sucking hard on her clit.\n\n\"Noooooo!!\"\n\nI knew, and Dawn knew that the longer she held back, the more she would squirt and gush.\n\n\"Mmmmmmmmm!!\"\n\nDawn was struggling as I drove my tongue into her clit over and over.\n\n\"James! Stop! Please!\"\n\nI pulled my mouth off Dawn's pussy and stood and grabbed her feet and pulled her to the edge of the bed. I scooped her up in my arms, and carried her to the bedroom next door and threw her on the bed. I pulled her legs up and pushed them back on her and drove my tongue back into her pussy.\n\n\"Ahhhhhhhh!!\" Dawn screamed and started squirting. I sat up and watched as she squirted and gushed her juices all over the bed. \"Damn it!!\"\n\nI got off the bed and left the bedroom.\n\n\"You get your ass back in here and fuck me!!\"\n\nI walked to the kitchen and got a beer out of the fridge and waited.\n\n\"James!! Get your ass back here and finish what you started!!\" Dawn screamed, standing in the hall looking at me.\n\n\"What's going on?!\" Amy yelled from the balcony.\n\n\"James!!\"\n\nI set my beer down and started walking toward Dawn. I stopped about 10 feet from her, and dropped my sweat pants and stepped out of them.\n\n\"Get in here!\" Dawn said.\n\nI walked up to Dawn and grabbed her around her waist and picked her up. She wrapped her legs around my waist, and I let her down. She grabbed my cock and started it into her pussy, then wrapped her arms around my neck.\n\n\"Oh, fuck!\" Dawn yelled as I lowered her down and slid my cock all the way into her.\n\n\"You want me to fuck you?!\"\n\n\"You better!!\"\n\nI turned Dawn toward the wall, and slammed her back into it and drove my cock in deep. The pictures on the wall rattled.\n\n\"Ahh!!\" Dawn yelled.\n\nI shoved my cock into Dawn hard again.\n\n\"Ahh!! Yes!!\"\n\nI held Dawn's ass and kept jamming into her and bouncing her off the wall.\n\n\"Fuck me!!\" Dawn yelled.\n\nShe was grabbing my head and kissing me as I kept driving into her. The pictures were rattling on the wall as I shoved into her repeatedly.\n\n\"Fuck me!!\" Dawn kept screaming.\n\nI slammed into Dawn repeatedly for about 15 minutes. She started screaming; she was coming. I jammed her into the wall one last time and started filling her pussy full of cum.\n\n\"Oh, fuck, yes!!\"\n\nDawn wrapped her arms around my neck and held on.\n\n\"Ohhhhh, fuck!\" Dawn got out.\n\nI started to lift Dawn off my cock.\n\n\"Not yet.\" She squeezed me with her legs. \n\n\"What are you two doing!?\" Amy said, standing next to us with Samantha. \"Dawn, are you okay?\"\n\n\"Oh, yes.\"\n\nI could feel Dawn's juices and cum running down my legs.\n\n\"We thought you two were tearing the house apart!\" Amy said.\n\n\"We're good,\" I told Amy.\n\n\"Then be quiet! We are trying to study!\" Samantha exclaimed.\n\nAmy and Samantha walked off, giggling.\n\n\"James? Are they gone?\"\n\n\"Yes.\"\n\n\"Carry me to the bedroom. You hurt me.\"\n\nI carried her down to the bedroom and sat her on the edge of the bed.\n\n\"Honey, I'm sorry.\"\n\n\"Look at my back, something stuck me,\" Dawn told me.\n\nI sat next to her, and turned her and looked at her back. She had several scratches that were bleeding.\n\n\"Honey, I'm sorry, let me get something to clean it.\"\n\nI went to the bathroom, and got some alcohol and went back and cleaned the scratches. She had two scratches about an inch long. I wiped the blood away and got them to stop bleeding.\n\n\"Let me get some ointment and some Band-Aids.\" \n\nI went back to the bathroom and grabbed the first-aid supplies. I spread some anti-biotic ointment on the scratches and put a bandage on each one.\n\n\"What scratched you?\" I asked.\n\n\"I don't know. You were the one bouncing me off the wall!\"\n\n\"I'm sorry.\"\n\n\"You better get my sweats, or you will never hear the end of it if they see it.\"\n\nI went down the hall and got her sweats and went back. Dawn slipped them on and got up. We walked out to the hall to look. There was a small picture lying on the floor. I looked and saw a small nail that had been holding it; it was what had scratched Dawn.\n\n\"Hang it back up!\" Dawn said. \"The next time you want to bounce me off a wall like that, do it in the shower!\"\n\n\"I'm sorry I hurt you... but you loved it!\"\n\n\"I did!\" \n\nWe walked back to the kitchen. I got Dawn a beer and picked mine up.\n\n\"Why did you do that?\" Dawn asked.\n\n\"Because you are an accessory.\"\n\n\"I have to strip the bed now. We can't have sex on the new white bed. I have to have that spread dry cleaned.\"\n\nDawn went back down the hall; then I went upstairs to check on the girls. They were each in their own room. I stopped at Amy's.\n\n\"Do you have a lot to do this week?\" I asked.\n\n\"Starting a paper. What were you two doing?\"\n\n\"We just got carried away.\"\n\n\"It sounded like it.\"\n\n\"I'll leave you to study.\"\n\nI walked down to Samantha's room; I found her dozing with her book lying on her chest. I sat down on the bed.\n\n\"I thought you were studying!\"\n\n\"What?\" Samantha said, waking up. \"Oh, I am.\"\n\n\"Not sleeping, you're not.\"\n\n\"I just dozed off.\"\n\n\"You have been staying up too late studying for the MCAT. Do you want some coffee or a soda?\" I asked.\n\n\"I'm good. What was going on with you and Dawn?\"\n\n\"She was being punished for helping you two.\"\n\n\"It didn't look like she was being punished.\"\n\n\"She was before you saw us.\"\n\n\"Would you punish me like that sometime?\"\n\n\"I'll see. What is happening tomorrow?\" I asked.\n\n\"My test starts at 9:00.\"\n\n\"What about your morning class?\"\n\n\"I will have to cut out 30 minutes early, but the teacher said okay.\"\n\n\"Why don't you come down to the den so you will stay awake?\" I suggested.\n\nI pulled Samantha up, and we went downstairs. I parked her on the sofa, and got her a soda and left her there.\n\n\"You made a mess of the bedspread,\" I heard Dawn say from the hall.\n\n\"I wasn't the one squirting everywhere.\"\n\n\"Well, your studio is off-limits for having sex on the bed,\" Dawn said. \"Sam, will you take the spread out when the washer stops and put it in the dryer, I need to go and do some shopping.\"\n\n\"Sure, how long are you going to be gone?\"\n\n\"About an hour or so. I'll bring back some pizzas for dinner.\"\n\n\"Can I go with you? I need a break,\" Samantha asked.\n\n\"Go put some clothes on. I need to change too. James, listen for the washer,\" Dawn said. The two of them headed upstairs.\n\nOnce the two of them were dressed and gone, I went up to see Amy.\n\n\"Amy, it's just the two of us in the house for an hour,\" I told her.\n\n\"I have to study all the surgical instruments in this book. I can't keep them all in my head.\"\n\n\"You just have to figure out what all of them are used for, that will help you remember.\"\n\n\"It would be easier if I had them to look at.\"\n\n\"Okay, I will leave you to study,\" I told her.\n\nI went down to the basement. I knew Dawn had a big bag with a bunch of the surgical instruments in it she had collected over the years. I rummaged around about 20 minutes then found a big black leather bag that had the instruments in it. I picked it up and went back to Amy's room.\n\n\"This might help,\" I told her.\n\n\"What is that?\"\n\n\"Dawn's collection of surgical instruments. Maybe some visual aids will help.\"\n\nAmy put her book down and opened the bag.\n\n\"Damn, it looks like she has everything in here!\"\n\n\"She probably does, except for some of the big things. These are old ones that were going to be thrown out. You study them and your book, and I will teach you how to recognize them like I taught Dawn how to recognize bones. Once you have them all memorized, let me know.\" I told her.\n\n\"I think I know all the bones,\" Amy said.\n\n\"We'll see. Dawn has a bag of bones too. I will leave you to study.\"\n\nI decided to go sit in the hot tub outside. I had been there for about 10 minutes when the phone rang. I had learned a long time ago to take the phone with me because it always rang when we were in the hot tub.\n\n\"Hello.\"\n\n\"James?\" A female voice questioned.\n\n\"That's me.\"\n\n\"Hi! This is Lieke.\"\n\n\"Hey! How are you doing?\" I asked.\n\n\"Doing well. I just wanted to ask if we were still on for Christmas?\"\n\n\"Of course. When can you come?\"\n\n\"Well, the fall semester ends on the 10th of December and starts back up on January 12th.\"\n\n\"The girls will be in Hawaii part of that time. You want to stay as long as you can?\"\n\n\"I was hoping to do that...if that is okay?\"\n\n\"We have plenty of room. You will be stuck with just me for a week.\"\n\n\"That's okay, isn't it?\"\n\n\"Sure. We will find you a place to go snow skiing, how about that?\"\n\n\"I would love that!\" Lieke yelled.\n\n\"Let me pull my calendar up on my phone.\"\n\nI pulled it up and found December.\n\n\"Can you fly out that Saturday, the 11th and fly back on the 8th?\"\n\n\"If you will have me that long. What kind of clothes do I need to bring?\"\n\n\"Bring some warm clothes, if you have any. Jeans, sweats, and a jacket. If you need anything else, I'm sure the girls have some things that will fit you.\"\n\n\"Okay, anything else?\"\n\n\"We'll take care of anything else. I'll make arrangements for the tickets, and we will pick you up at the airport.\"\n\n\"Okay!\"\n\n\"I will email you the details. Do you have a passport?\"\n\n\"Yes, I use it to go to some of the places I sell into.\"\n\n\"Bring it. We may have to go to Canada to find you some snow.\"\n\n\"Okay.\"\n\n\"Listen, Lieke, call, and email us. Dawn and the girls are in school now.\"\n\n\"They did go back to school?\"\n\n\"Yes, and Samantha lives with us now.\"\n\n\"Great! I can't wait.\"\n\n\"It won't be long.\"\n\n\"James...thank you.\"\n\n\"Lieke, you are welcome. I will call you back. Is this number good?\"\n\n\"Yes, this is my cell phone.\"\n\n\"Then I will talk to you later.\"\n\n\"Okay, bye!\"\n\n\"Bye.\"\n\nNow things were looking up. I had been afraid she was not coming. I sent a text to Linda to call me when she could then went back to soaking in the hot tub.\n\n\"I'm finished studying for a while, may I join you?\" Amy asked.\n\n\"If you will go and grab us a couple of beers.\"\n\nAmy ran back in the house and was back in a flash. She handed me the beers and pulled off her long T-shirt and got in the hot tub.\n\n\"Lieke just called,\" I told her.\n\n\"Is she coming?\"\n\n\"Yes. She will be here for about a month. Your three will miss her for a week, but she is staying until January the 8th.\"\n\n\"We will make up for it!\"\n\n\"I have her number so you can call her.\"\n\n\"Good!\"\n\n\"I promised her I would take her skiing so we may take a trip for a weekend.\"\n\n\"I have never done that. Sam hasn't either,\" Amy said.\n\n\"I will put that on our list of things to teach you two.\"\n\nAmy slid around the hot tub and sat next to me as we drank our beers.\n\n\"James...are you still going to let us go to that NLP school next summer?\"\n\n\"Probably. It is about a month-long, can you two handle that?\"\n\n\"I'm sure we can. Where is it?\"\n\n\"I haven't decided. One is in Canada, and the other is in California. Probably Canada. Are you not taking any courses next summer?\"\n\n\"Not if I am doing that.\"\n\n\"I think you two would get into less trouble in Canada,\" I told Amy. \"If I remember right, the Practitioner and Master Course are all of August.\"\n\n\"Is that where you and Dawn went?\"\n\n\"Yes. We took a month off and went. I'll check on it. Ask Samantha if she is ready to do that for a month,\" I told Amy.\n\nAmy leaned over and kissed me as she ran her hand down to my cock.\n\n\"I think I need to study this for a while,\" she said.\n\nAmy got up and straddled my legs so she could rub my cock.\n\n\"Amy, you are 28 now, how are you feeling about that?\" I asked.\n\n\"I feel much younger.\"\n\n\"I know, but I just wanted to know how you feel about getting a little older.\"\n\n\"You know, they say a woman doesn't reach her sexual prime until after 30, you better watch out. Why are you asking?\"\n\n\"I just wondered. We haven't talked much since Labor Day and the ceremony.\"\n\nAmy stopped rubbing my cock.\n\n\"James, that was the most important and special thing you and Dawn could have done. I know I am now a part of your family in many different ways. We all have an unusual relationship now, are you okay with it?\" Amy asked.\n\n\"Amy, I love you, and Dawn loves you. We had the ceremony to let you two know that. We wanted all of our friends to understand it also. Dawn and I thought you two would understand better how we feel about you.\"\n\n\"We do.\"\n\nI reached down and found her pussy lips, and worked my fingers between them.\n\n\"James...do you feel like you have three wives?\" Amy asked.\n\n\"Yes, I do. Do you feel like you have to share me?\" I asked.\n\n\"No.\"\n\nPlaying with Amy's pussy was making my cock grow harder. Amy always looked so nice when she was wet. I kept playing with her pussy as she held me. Several minutes later, I grabbed her ass with one hand and guided my cock into her with the other; she wiggled until I was all the way in. It always seemed that as hot as the water was in the hot tub, the inside of the girls' pussies were hotter.\n\n\"Emmm, this feels so good,\" Amy said as she kissed me.\n\nI grabbed Amy's hips and slipped her slowly up and down on my cock. She held on and moaned. We kept going for about 15 minutes; Amy was quiet as she rode my cock.\n\n\"This feels so good, but I want something else,\" Amy said and stood up, slipping my cock from her pussy.\n\nAmy got on her knees on the seat next to me and leaned over and placed her tits on the cold patio. I got up behind her and slipped my cock back into her pussy.\n\n\"Oh, this feels good. Hot and cold at the same time!\" Amy said.\n\nI held Amy's hips and started thrusting in and out of her with nice long strokes. She repeatedly moaned as I slipped in all the way. We kept this up for a while until she came hard.\n\n\"Oh, yes! Oh, you feel so good, James! I want to try something.\"\n\nI slipped my cock out of Amy, and she pushed up on her arms and looked at me with a sensuous smile.\n\n\"What do you want to try?\" I asked.\n\n\"Give me a minute.\"\n\nAmy worked around until she was sitting on her ass on the patio. She laid on her back with her head hanging into the hot tub. She had to move around several times to get just right; then I figured out what she was doing.\n\n\"You know what to do now,\" Amy said as she laid on the patio with her head hanging back over the edge of the hot tub. \n\nI knew what to do. I eased forward, and she opened her mouth. I slipped my cock into her mouth and down her throat as she smiled at me. This was a first for Amy and me.\n\nI slid my cock in and out of her throat for a minute.\n\n\"I am going to put my hand on your stomach. When I push back, let me breathe,\" Amy said. \"I want you to fuck my throat.\"\n\nAmy and I went on this way for a long time. I could see my cock sliding down her throat as she looked up; it was a huge turn on. Occasionally she would let me know to back out. We must have kept this up for at least half an hour before I came in a huge gush down her throat. Amy sucked all the cum from my cock then rolled over on her stomach.\n\n\"How was that?\" She asked, propped up on her elbows.\n\n\"Incredible!\"\n\n\"I thought you would like that.\"\n\n\"Oh, I did.\"\n\n\"We will do that more often. I liked it too,\" she said.\n\nAmy climbed back into the hot tub with me. I grabbed her and kissed her for a while. We had been sitting for about 10 minutes when Dawn and Samantha came back. They came out to the hot tub.\n\n\"You two look satisfied,\" Dawn said.\n\n\"We are!\" Amy replied.\n\nI helped Amy out of the hot tub as Dawn and Samantha went inside. I took Amy in my arms and kissed her.",
        "\"You just keep surprising me,\" I told her.\n\nWe dried each other off and went inside. Samantha was sitting at the bar while Dawn put the pizzas in the oven. Amy sat next to her, and Samantha whispered in her ear. The two of them got up and went upstairs.\n\n\"Well honey, whatever secret Samantha was supposed to keep to herself, she is telling Amy,\" I told Dawn.\n\n\"James, just leave them alone!\"\n\n\"You three are up to no good. All of you were gone all day last Friday and came home giggling. Now you and Samantha are sneaking out.\"\n\n\"Don't you ever talk about me being bad about secrets!\" Dawn yelled at me. \"Go put some clothes on!\"\n\nI left Dawn alone before I got into trouble and went upstairs to get some sweats. After that, I went to find the girls; they were in Samantha's room lying on the bed. When I walked in, they stopped talking. I crawled on the bed with them.\n\n\"What's up?\" I asked.\n\n\"Nothing,\" Samantha said.\n\n\"Where did you two go?\"\n\n\"I just went with Dawn to pick something up, I needed a break,\" Samantha told me. Amy was still naked.\n\nI got up and straddled Amy's stomach.\n\n\"Samantha, I know you are not that ticklish, but your sister is.\"\n\n\"You better not!!\" Amy screamed. \"James, please don't!!\"\n\n\"Where did you stop, Samantha?\" I asked.\n\n\"Sam! Don't you tell!\" Amy said.\n\nI placed my hands on Amy's ribs.\n\n\"James, please don't!\" Amy pleaded.\n\nI kissed Amy then got up and went back downstairs.\n\n\"Did you and Amy have a good time while we were gone?\"\n\n\"She came down after a while and joined me in the hot tub. I found your bag of surgical instruments to help her study. You might ask her if she needs any help.\"\n\nAmy and Samantha came down to wait for the pizzas.\n\n\"James, the weather is getting cooler at night, when will you turn the heat on in the pool?\" Samantha asked.\n\n\"If the water has gotten cold, I will do it.\"\n\n\"Thank you.\"\n\n\"The pool will probably be warm by tomorrow evening.\"\n\n\"Good, my morning swims were getting cold.\" \n\nSamantha had been getting up early some mornings and swimming. Occasionally Dawn would join her.\n\n\"Dawn, James said he had a special way he helped teach you to tell all the bones apart. He said he would do it with the surgical instruments. What did he do?\" Amy asked. Dawn giggled.\n\n\"When I was studying for that test, he put them all in a bag and made me sit down. He would take one out of the bag at a time and throw it across the room in front of me. That was how long I had to determine which bone it was. It was nerve-racking, but it worked.\" Dawn laughed.\n\n\"Oh shit!\" Amy said.\n\n\"Sam, it will be good for you too,\" Dawn told her. \"You can start learning now.\"\n\nWe ate dinner, and Samantha went back up to study.\n\nAmy, Dawn and I watched TV until 10:00. When we went up to the bedroom, we found Samantha sleeping with her books and computer. I woke her up and put her to bed.\n\n*****\n\nWednesday morning, Dawn and I got up about 5:30. I found Samantha already up and studying again.\n\n\"I think you have studied enough, come to breakfast,\" I said.\n\nDawn and I talked to Samantha while we made breakfast so she would relax some. Amy came down about the time the food was ready, and we all ate. After that, Samantha went upstairs to get ready.\n\n\"I'm heading to class early,\" Samantha said about 7:00.\n\n\"Good luck. You will do well,\" Dawn said.\n\n\"You will do fine, honey,\" I said.\n\nWe kissed her, and she left.\n\nAmy left about 30 minutes later.\n\n*****\n\nAbout 1:00, Dawn came to my study.\n\n\"I need to run to the school and drop off some notes for my advisor. I won't be gone long.\"\n\n\"What time will Samantha be finished with her test?\"\n\n\"It takes eight hours, plus lunch, so 6:00.\"\n\n\"How long to get the results?\"\n\n\"About six weeks. She will do great. I am going to take her to meet with the med school advisors soon so she can get her classes changed before next fall.\"\n\n\"You think she can do this?\" I ask.\n\n\"I have no doubt she can do it. She will make a great doctor.\"\n\n\"I'm happy we can do this for her.\"\n\n\"I am too. It will be nice to have a doctor in the family,\" Dawn said.\n\nDawn left, and I kept working on a few things. I had called Walt and talked to him about coming in with his wife soon to look for a house. He had also sent me some numbers for inventory.\n\nAmy came in about 3:00 and checked on me.\n\n\"Did you see your sister?\" I asked.\n\n\"I had lunch with her. She was very happy because she was doing well on the test.\"\n\n\"Great.\"\n\n\"James, thank you for making this all possible. She had always wished she could be a doctor.\"\n\n\"I am happy she is pursuing it. Amy, is there anything else you want to pursue like that?\"\n\n\"Now I am thinking about working on my NP too. I am going to talk to Gregg about it.\"\n\n\"I am sure you will do well.\"\n\nDawn got home about 4:00. I finished what I was working on and went to the kitchen about 5:30. Dawn and Amy were busy.\n\n\"It smells good,\" I said.\n\n\"We are making Sam a nice dinner to celebrate,\" Dawn said.\n\n\"What can I do?\"\n\n\"Set the table in the dining room.\"\n\nI had the table ready by 6:00. Samantha came in about 6:30.\n\n\"How did it go?\" I asked.\n\n\"I'm stressed out,\" she said as she sat on my sofa in the study.\n\n\"Did you do well?\"\n\n\"I did, but I am wiped out.\"\n\n\"You can relax now and just wait to get the results.\"\n\n\"Something smells good.\"\n\n\"They are making you a nice dinner to celebrate,\" I told her.\n\n*****\n\nAfter we ate, I was sitting in the den with Samantha.\n\n\"Now you can have some fun Friday looking over the store designs and shopping with Linda.\"\n\n\"What?\"\n\n\"Dawn said Linda wanted the three of you to come and see the final store designs, and then she was taking all of you to lunch and shopping.\"\n\n\"Oh...oh yeah, Friday. I forgot. I'm going to change my clothes.\"\n\nShe left, and I watched TV while I worked on my portable.\n\nAbout 8:00 my email notifier popped up. It was from Linda.\n\n'I forgot to tell you that Dawn and the girls are coming to my office on Friday. I want them to look over the final store designs and give us some feedback. I think I will take them to lunch and maybe go shopping.\n\nLinda'\n\n\"Really,\" I said to myself after I read the message. \"Sounds familiar.\"\n\nSamantha came back down in her long T-shirt and sat with me.\n\n\"I don't have anything to do Friday, I may go with you all to look over the store designs,\" I said.\n\n\"Oh...I don't think it will take that long...then we are going to lunch with Linda and Rachel then shopping. You don't want to go shopping with us.\"\n\n\"You're right. I'll find something else to do.\"\n\n\"Good.\"\n\nShe picked up her computer and went to work on it. I smelled a rat.\n\nI went to the kitchen to check on Amy.\n\n\"Sis, don't forget we are going to see Linda Friday,\" Samantha said from the den.\n\n\"I remember.\"\n\n\"What are you all doing Friday?\" I asked.\n\n\"Linda wants the three of us to come to her office and look over the final designs for the store so we can give her some input. Then we are going to lunch and probably shopping,\" Amy said. I had heard this before.\n\n\"That sounds good.\"\n\nAmy took her soda and went and sat with her sister. I went upstairs. Dawn was putting away clothes in the closet.\n\n\"Linda asked me last week what I wanted for my birthday. I told her nothing. Since you are going shopping with her Friday, will you make sure she doesn't get me anything.\"\n\n\"I'll try,\" Dawn said, putting some clothes in a drawer. \"But, if she does, I had nothing to do with it.\"\n\n\"Just remind her Friday.\"\n\n\"Okay.\"\n\n\"If you three are going shopping with her, let me know when you will be home, and I will make dinner,\" I said.\n\n\"Oh...don't worry about it. I'm not sure when we will get back.\"\n\n\"If it looks like it will be late, send me a text or call.\"\n\n\"Okay...I will.\"\n\nDawn kept putting things away.\n\nDawn was good at a lot of things, but trying to keep a story straight wasn't one of them. She always got quiet and gave me short answers when she was trying to hide something. Now I knew they were up to something, and it sounded like Linda was in on it. \n\nI headed back downstairs. I saw Samantha and Amy whispering to each other.\n\n\"Sam?\"\n\n\"What!\" She exclaimed and jumped.\n\n\"I just wanted to know what time you would be home tomorrow. Why are you so jumpy?\"\n\n\"I...I told you I was stressed out.\"\n\n\"Well, if you don't calm down, do you want me to hypnotize you? We could work on whatever is stressing you out?\"\n\n\"No...that's okay.\"\n\n\"James, where have Sherri and Brenda been?\" Amy asked.\n\n\"They are working from home on some marketing ideas.\"\n\n\"When are they going to start interviewing for sales positions? They wanted us to ask around school.\"\n\n\"Email one of them and find out.\"\n\nThe girls were quiet through dinner. Samantha crashed on the sofa and fell asleep about 8:00. The rest of the night, Dawn was avoiding me. By the time we all went to bed none of them had said much of anything else.\n\n*****\n\nThursday morning, I ran into town to the camera store and picked up the rest of the equipment I had ordered for my darkroom. I spent a few hours in the camera store talking to the owner. After I loaded it all in the Escalade, I went over to Sam's store. I was walking through the store toward his office when Johnny stopped me.\n\n\"Hi, Dr. Smith. Can I help you find something?\"\n\n\"I was in town and thought I would drop by and see Sam.\"\n\n\"Oh...he's not here right now. Can I help?\"\n\n\"I saw his car out front. I just thought I would stop in.\"\n\n\"He...uh...went out with one of the installers. I don't think he will be back for a while.\"\n\n\"Okay. Tell him I stopped by.\"\n\n\"Will do, Dr. Smith.\"\n\nI went back out and got in the SUV and headed home. When I got there, only Amy was home. She helped me carry some boxes in and down to my darkroom.\n\n\"What is all this?\" She asked.\n\n\"I had to order some more equipment to make prints from the new camera. Since it uses a larger negative, I needed a bigger enlarger and a few things.\"\n\n\"Show me how to do all this one day.\"\n\n\"Okay. Once I get all the new equipment set up, I'll let you help me test it.\"\n\n\"Okay!\"\n\n\"Where are Dawn and your sister?\"\n\n\"Oh, Dawn was going into town when sis and I got home. She said she needed some supplies for her computer, so sis went with Dawn.\"\n\n\"Oh...okay. I was just...never mind.\"\n\nWe carried in a few remaining boxes. Amy wanted me to show her a few things in the darkroom.\n\nAmy and I were sitting in the den when Dawn and Samantha came in about 3:30. They came and sat with us.\n\n\"Did you two get what you needed?\" I asked.\n\n\"Yes,\" Dawn said.\n\nMore short answers until dinner.\n\n*****\n\nSamantha had left for her evening lab, and I was eating with Dawn and Amy.\n\n\"I picked up the rest of my new darkroom equipment today.\"\n\n\"Did he have everything?\" Dawn asked.\n\n\"Just about. I am still waiting on two more things, and then I can make prints.\"\n\n\"Great.\"\n\n\"I stopped by Sam's store on the way home. I was going to get him to ask Olivia when she could come so I could practice taking some pictures of her...but Sam wasn't there,\" I said.\n\n\"Just send them an email,\" Dawn said.\n\n\"I guess. I stopped about 2:30. He is usually there. I saw his car, but Johnny said he was out on an install.\"\n\n\"Oh,\" was all Dawn said as she ate.\n\n\"Amy said you and Samantha were going to pick up something for her computer. I must have just missed you.\"\n\n\"Must have.\"\n\nSo Sam was in on it too. I knew I could get it out of him.\n\nI went down to my darkroom after dinner to assemble some new equipment. I was down there until about 9:30.\n\n*****\n\nFriday morning we were all eating breakfast about 7:30. \n\n\"You two get ready to go. Linda wanted us there early so we can finish and go to lunch,\" Dawn said.\n\nWhen Amy and Samantha finished eating, they ran up the stairs while Dawn and I cleaned up.\n\n\"I need to go get ready, can you finish cleaning up?\" Dawn asked.\n\n\"No problem.\"\n\nDawn headed upstairs. \n\nWhen I went up to the bedroom to put some clothes on, Dawn was already dressed and ready to go.\n\n\"We'll see what Linda wants us to look at then we are going out to lunch...\"\n\n\"I know, then shopping.\"\n\n\"Yes. We may not be back until late.\"\n\n\"Okay. Let me know when you will be home, and I will start dinner.\"\n\n\"Okay. See you later,\" Dawn said and kissed me.\n\n\"Girls!\" She yelled in the hall.\n\n\"Coming!\"\n\nI heard all of them going down the stairs and out to the garage.\n\n*****\n\nAbout 10:30, I called Linda's cell. I got her voicemail.\n\nI was in my study eating a sandwich at noon and called Sam a the store.\n\n\"Hey, Sam.\"\n\n\"Hi, James.\"\n\n\"Dawn was supposed to pick up a toner cartridge for me the other day when she stopped by, but she forgot.\"\n\n\"Oh...oh, yes. She left it on the counter.\"\n\n\"I'll swing by and pick it up,\" I said.\n\n\"Okay. Bye.\"\n\nHmmm, Sam was in on it. What could he be up to with them?\n\nAbout 1:00, I called Rachel's cell.\n\n\"Hi, James,\" she said.\n\n\"Hi. Have you and Linda decided if you are going to come to our meeting the last weekend of the month?\"\n\n\"Not yet.\"\n\n\"Well, keep working on Linda. You two need to get out.\"\n\n\"I will.\"\n\n\"Hey, where are you at?\" I asked.\n\n\"At the office. Why?\"\n\n\"I was just wondering if you and Linda were going to start the weekend early?\"\n\n\"You know better than that. She will be here until 6:00 or later as usual,\" Rachel said.\n\n\"Make her get out of there early. Tell her I called.\"\n\n\"I will.\"\n\n\"Bye, Rachel.\"\n\n\"Bye.\"\n\nThey had forgotten to recruit Rachel into their plans.\n\nI spent a few hours doing some online shopping for some camera gear until 3:30. My cell rang; I looked, and it was Linda.\n\n\"Hey, Linda.\"\n\n\"James...\"\n\n\"Yes?\"\n\n\"Don't get me in trouble,\" Linda said.\n\n\"How am I going to get you into trouble?\"\n\n\"You know how. Dawn is right. You are worse than a two-year-old.\"\n\n\"Just for future reference, Dawn is not very good at keeping her stories straight, Linda.\"\n\n\"Just don't get me in trouble.\"\n\n\"I won't, we never talked.\"\n\n\"No, we didn't. What do you want for your birthday?\"\n\n\"Nothing.\"\n\n\"If you leave it up to me it will be something very expensive!\"\n\n\"Please don't.\"\n\n\"I'll see. Bye.\"\n\n\"Bye.\"\n\nI got a text from Dawn about 6:00, saying they would be home soon. I went to the kitchen and started working on dinner.\n\nI heard Dawn's Jag pull into the garage about 6:45. I waited in the kitchen for them to come in. When they came in the door from the garage, they were laughing and giggling. They walked into the house and actually had some bags from some of the women's stores in town.\n\n\"Did you all have a good girls' day out?\" I asked.\n\n\"Oh, yes! We shopped all afternoon,\" Dawn said.\n\nThey headed to the den. Dawn sat her bags on the sofa and started up the stairs with Amy and Samantha.\n\n\"I have started some spaghetti. It will be ready in a bit,\" I said.\n\n\"Great. Thanks,\" Dawn said. \"I need to get out of these clothes.\"\n\nDawn headed up the stairs; I went to the den to look through her bags. There were some new clothes in them, so I kept digging until I found the receipt. When I did, I looked at it. It was dated two days earlier. I put it back in the bag.\n\nThey were good, but not that good. Their story had holes in it!\n\n*****\n\nDuring dinner, the three of them were all giggles. They were hiding a secret, and I knew it.\n\nAbout 8:30, we were in the den sipping some wine after dinner. Samantha picked up the remote and turned on the TV.\n\n\"Let's watch some dirty movies!\" She giggled.\n\nShe surfed through our porn collection on the computer for a few minutes before she started a movie.\n\n\"We can watch some of James' favorites,\" Samantha added.\n\nShe had selected a movie that was part of the My Friends Hot Mom series that Brandi Love starred in.\n\n\"I think she is your favorite porn star,\" Samantha teased me.\n\nShe was mostly right. I had always liked Brandi Love's body, and her playing a hot MILF was usually pretty steamy.\n\nWe watched movies for an hour or so then went to bed. The girls got silly, and Samantha ended up on top.\n\n\"James, maybe you could start shooting porn videos in your new bedroom studio,\" Samantha said.\n\n\"I plan on shooting some photos of plenty of naked women.\"\n\n\"Maybe you could do some videos of wives for their husbands!\"\n\n\"Sam...\" Dawn said.\n\n\"Just an idea...\"\n\n\"Maybe we could bring in some porn stars to do the wives, and they could give the movie to their husbands,\" I said and laughed.\n\nThey all made sure they rode me an got off before we finally went to sleep.\n\n*****\n\nWe got up late Saturday morning.\n\n\"I invited a girl from one of my classes over to swim today,\" Samantha said.\n\n\"What time?\" Dawn asked.\n\n\"I told her to come for lunch.\"\n\n\"Okay. I'm going to the store this morning, does anyone need anything?\" Dawn asked.\n\n\"I'll go with you, I need to get out of the house,\" I said.\n\nDawn and I went to the grocery store until about noon.\n\nWhen Dawn and I took the first load of groceries to the kitchen, we heard Amy and Samantha outside laughing. I looked out the back window, and they were sitting in the recliners with someone. We went back to get more groceries.\n\n\"Do you need any help?\" Samantha asked, standing in the back doorway when we walked into the kitchen.\n\n\"We got it,\" I said.\n\nDawn and I headed back out.\n\n\"I'm surprised, she has a bikini on,\" Dawn said as we walked out the front door.\n\n\"Give her a chance!\" I said, laughing.\n\nWe walked back in and saw Amy getting drinks from the fridge, and Samantha was looking in one of the sacks.\n\n\"What are you looking for?\" Dawn asked.\n\n\"Some snacks. There aren't any.\"\n\n\"You ate all of them!\"\n\nSamantha reached in the sack and pulled out a bag of chips, and she and Amy ran out the door.\n\n\"I wish I could eat like she does,\" Dawn said.\n\nAfter Dawn and I got everything in and put away, we grabbed a beer and went out to the pool. I was a little shocked when I saw a younger girl that could pass for 15, except for the huge tits. She had on a skimpy bikini that barely covered her incredible breasts.\n\n\"This is Beth,\" Samantha said.\n\n\"Hi, Beth,\" Dawn said.\n\n\"She is in my Biology class.\"\n\n\"Hi,\" Beth said.\n\n\"Beth, are you a Sophomore too?\" I asked.\n\n\"Yes. Just started my second year.\"\n\n\"How is it going?\" I asked.\n\n\"Great. I am excited that Sam is going to go to med school now.\"\n\n\"We are too,\" Dawn said.\n\n\"You three don't get burned,\" I said as I looked over the teenager's pale body that went with her blonde hair.\n\nDawn and I went back into the house.\n\n\"How old do you think Beth is?\" I asked Dawn.\n\n\"I thought about 16, but she is a sophomore.\"\n\nDawn and I sat at the bar to finish our beer. A few minutes later, the three of them came inside.\n\n\"We are going to shower off all the suntan lotion,\" Samatha said as they all headed toward the stairs.\n\n\"Sam!\" Dawn said. She stopped and turned around.\n\n\"Come here a minute.\"\n\nSamanta walked to us as Amy and Beth headed up the stairs.\n\n\"Sam, how old is she?\"\n\n\"19.\"\n\n\"Are you sure?\"\n\n\"Yes. She is just small.\"\n\n\"Tiny would be a better word for it,\" Dawn said. \"She can't be five feet tall.\"\n\n\"She's cool.\" Samantha turned and headed up the stairs.\n\n\"I can't believe she is nineteen,\" Dawn said.\n\n\"I wouldn't think so except for the rack,\" I said.\n\nWe finished our beers and went to the den. Dawn picked up her computer and soon had her head buried in it.\n\n\"You seem to be awfully interested in something lately,\" I said.\n\n\"Just researching some ideas.\"\n\nI picked up the remote and turned on the TV. \n\n\"James!\" Dawn scolded me when she looked and saw I was watching the three of them in the shower.\"\n\n\"What?\"\n\n\"You don't know her that well!\"\n\n\"Just curious.\"\n\nI looked at the TV and saw Amy and Samantha in the shower with Beth, laughing and giggling.\n",
        "\"That may be kiddie porn!\" Dawn said and laughed.\n\nI was still looking. If Beth weighed 85 pounds, I would have been surprised.\n\n\"Turn it off,\" Dawn said.\n\nI turned the TV to a football game. Dawn was quiet for a long time while I watched. Then we heard a lot of laughter from upstairs.\n\n\"What are they doing now?\" I said.\n\n\"Don't worry about it.\"\n\nI watched the game as I listened to laughter on and off for a while.\n\n\"Ohhh, yes!\"\n\n\"That was Sam,\" Dawn said.\n\n\"Can I look now?\"\n\nI put the TV on the camera in Amy's room.\n\n\"Damn,\" came from Dawn as she looked.\n\nWe could see the three of them on the bed naked, and Beth had her entire hand inside of Samantha's pussy working it.\n\n\"Ohhh, wow!\" Came from Samantha.\n\n\"That looks like fun,\" Dawn said.\n\nWe kept watching for a while until Samantha came in a loud orgasm. Samantha laid back, and Beth straddled her mouth. Beth looked like a little girl. It didn't take us long to see she wasn't; she was working her pussy on Samantha's mouth hard.\n\nAmy straddled her sister's and reached around Beth and began to finger her pussy. Beth got into it for some time until she started coming.\n\n\"Ahhhhh! Fuck! Oh, fuck! Oh, fuck!\" She screamed as she jerked.\n\nI felt like I was watching a thirteen-year-old girl getting off. She screamed a few more times then fell back into Amy's arms. Amy kissed her on the neck for a minute, and then she sat up.\n\n\"Are you sure this okay with them downstairs?\" Beth asked.\n\n\"I told you it was,\" Samantha said.\n\n\"You are going to have to explain your relationship with them more,\" Beth said.\n\nAmy moved and laid Beth on her back, then moved between her legs. Samantha licked on Beth's tits as Amy went down on her. Dawn and I watched in silence. Samantha finally straddled Beth's head. Dawn and I sat and watched for about 45 minutes as the three of them got each other off.\n\n\"She sure acts like she is nineteen,\" Dawn said.\n\n\"Or thirty,\" I said and laughed.\n\nThe three of them were lying on the bed, laughing. I looked at Beth's tiny body, and she appeared to be nicely shaved.\n\n\"That was fun,\" Beth said.\n\n\"It was. I hope you can come back,\" Samantha said.\n\n\"Sure, anytime.\"\n\nI jumped when I felt Dawn grab my crotch.\n\n\"Hmmm,\" came from Dawn as she felt my hard cock. \"Pervert.\"\n\nDawn went back to her computer as I watched the TV.\n\n\"Now what?\" Beth said.\n\n\"Hey...can you stay until tonight? I'll invite Rick over. You want to join us?\" Samantha asked.\n\n\"Isn't that her lab partner?\" Dawn asked.\n\n\"Yes.\"\n\n\"Did you know he was coming tonight?\" Dawn asked.\n\n\"She doesn't have to ask,\" I said.\n\n\"Sure, if he will be cool about it,\" Beth said.\n\n\"He will.\"\n\n\"Will you be here?\" Beth asked Amy.\n\n\"I guess.\"\n\n\"Sam, are you sure it is okay if all of us are up here fucking. I mean with your...your husband downstairs?\"\n\n\"I said it was okay. Don't worry about it.\"\n\n\"Well, if it is okay then, why don't I call Luke. He will come over,\" Beth said.\n\n\"Good idea! We can all fuck all weekend!\" Samantha exclaimed.\n\n\"I'm not sure about this,\" Dawn said.\n\n\"Why not?\" I asked.\n\n\"Now what?\" Beth said.\n\n\"What do you want to do?\" Samantha asked.\n\n\"What about...you know,\" Beth said.\n\n\"Are you sure you want to do that?\" Samantha asked.\n\n\"You said he would. Did you ask him?\" Beth said.\n\n\"Not yet.\"\n\n\"I don't think she is going to be able to get Rick to come if we are home,\" Dawn said.\n\n\"Well, go ask him,\" Beth said.\n\n\"Are you sure?\"\n\n\"Yes...if he will do it,\" Beth replied.\n\nSamantha got out of bed.\n\n\"I'll tell Samantha to tell him it is okay,\" I said to Dawn.\n\nDawn turned back to her computer.\n\n\"Hey, honey?\" We heard from the balcony.\n\nWe both looked up, and Samantha was leaning over the railing.\n\n\"Will you come up here?\" Samantha asked.\n\n\"Oh, no!\" Dawn exclaimed. \"No, you don't, James!\"\n\n\"Why not?\" Samantha asked.\n\n\"Sam!\" Dawn exclaimed. She came down the stairs and walked up to us.\n\n\"Why not?\"\n\n\"Because!\"\n\n\"Because what?\"\n\n\"Sam! James is not having sex with that...girl,\" Dawn said.\n\n\"Why not?\"\n\n\"Sam, it would be like him having sex with a little girl, that's why!\"\n\n\"I know!\" Samantha said and giggled.\n\n\"Sam, no!\" Dawn replied.\n\n\"You're invited too.\"\n\n\"Sam!\"\n\nI laughed.\n\n\"What are you laughing at!\" Dawn exclaimed.\n\nI reached over and rubbed one of Dawn's swollen nipples that was protruding through her T-shirt.\n\n\"Stop...\"\n\n\"Young looking women appeal to you too, I see,\" I said, and Samantha giggled.\n\n\"Sam, I don't believe she is nineteen! I hope you are not in trouble!\" Dawn said.\n\nSamantha walked over to the other chair and dug through Beth's bag. She came back with her billfold.\n\n\"Look,\" Samanta said, showing us her driver's license.\n\nI looked closely. Beth was two months older than Samantha, 4 foot 10, 81 pounds.\n\n\"With tits like that, you don't think she is nineteen?\" Samantha asked.\n\n\"I don't care,\" Dawn said.\n\n\"Why?\" Samantha moaned.\n\n\"It's just...just...she looks so young,\" Dawn said.\n\n\"I already told her it wouldn't be a problem,\" Samantha said.\n\n\"Sam, James would tear her apart,\" Dawn replied.\n\n\"That is what she wants to find out! She likes big cocks.\"\n\n\"Sam! Dawn exclaimed. \"What are you laughing at you pervert!\" She said to me as I laughed.\n\nI kept laughing. Samantha started laughing.\n\n\"Come on. She is a lot of fun.\"\n\n\"It looked like it,\" I said.\n\n\"Sam, I don't think this is a good idea.\"\n\n\"Come on...if you don't she won't let me join her and her boyfriend,\" Samantha pleaded.\n\n\"You are becoming a regular tramp,\" I said to Samantha.\n\n\"I know!\"\n\n\"Sam, is Rick and her boyfriend really going come over for the night?\" Dawn asked.\n\n\"If it is ok?\"\n\n\"Honey, of course, it is okay. This is your house too,\" Dawn said.\n\n\"I'll do it if you will let your lab partner fuck Dawn,\" I said.\n\n\"James!\" Dawn exclaimed, and Samantha and I laughed.\n\n\"Deal!\" \n\n\"You two stop it!\" Dawn exclaimed.\n\n\"Come on, Dawn. You are no fun,\" I said.\n\n\"You are a pervert!\" Dawn said to me.\n\n\"I know!\"\n\nDawn looked at us for a minute.\n\n\"Don't hurt her,\" Dawn said.\n\n\"Yes!\" Came from Samantha.\n\nSamantha grabbed my hand and pulled me up.\n\n\"Come on, Dawn,\" Samantha said.\n\n\"Maybe later.\"\n\nSamantha led me up the stairs to Amy's room. When I walked in, Beth and Amy were facing each other talking.\n\n\"What took so long?\" Amy asked.\n\n\"Dawn. Beth, are you ready?\" Samantha asked.\n\n\"Always!\"\n\nSamanta started taking off my clothes. She finally pulled my underwear down.\n\n\"Ohh!\" Came from Beth.\n\n\"Get on the bed,\" Samantha said.\n\nI crawled onto the bed between Beth and Amy.\n\n\"Wow,\" Beth said as she looked.\n\n\"Luke is not that big, is he?\" Samantha asked.\n\n\"Not that big,\" Beth said as she moved toward my cock.\n\nSamantha sat on the end of the bed as I watched Beth wrap one hand then the other around my hard cock.\n\n\"Wow.\"\n\nShe began to slowly slide her hands up and down. Amy and Samanth were watching her closely. Beth stroked my cock slowly for a few minutes then I watched her get on her hands and knees and place her mouth over the end. We all watched as she slowly worked her mouth on my cock for a few minutes.\n\n\"Can you do it?\" Samantha asked.\n\n\"I don't know,\" Beth said, taking her mouth from my cock.\n\nShe slid her mouth back on my cock, and I watched her work for a while. She moved between my legs, and I watched as she began to force her mouth down further.\n\n\"That's it,\" Samantha said.\n\nI was surprised that Beth was getting as much of my cock into her mouth as she was, but she kept going. I would feel the end of my cock press against her throat then she would come back up. I looked over at Amy, and she had her legs up and spread; she fingered her pussy while she watched.\n\nBeth went down again. I felt pressure on the end of my cock; then the end slipped into her throat.\n\n\"Ahh...\" escaped from me as I watched.\n\n\"That's it!\" Samantha exclaimed.\n\nI watched Beth as she pushed harder, and more of my cock slipped into her throat. She held it there a moment then slid her mouth up and off.\n\n\"I think I can do it,\" she said.\n\nShe moved around a little then slid her mouth back onto my cock. I watched as she slid my cock deep into her mouth. I felt the end slip into her tight throat, and she kept pushing. I held my breath as my cock slid into her mouth.\n\n\"That's it!\" Samanta exclaimed.\n\nShe stopped about two inches from the base and held it, then slowly slid my cock from her mouth. Her small but large tits looked fantastic.\n\n\"Wow!\" She said.\n\nShe took a few deep breaths then slid her mouth down my cock again, this time I watched as she slid all of it down her throat. Samantha started clapping her hands. Beth held it then worked my cock in her tight throat a few times and slowly slid off.\n\n\"You did it!!\" Samantha exclaimed.\n\n\"Ahhhh!\" Came from Amy.\n\n\"I did!\"\n\nBeth sat up on her legs. I looked at her tiny body and her large tits and big nipples.\n\n\"Did you like that, honey?\" Samantha asked me.\n\n\"I always do.\"\n\nBeth smiled at me.\n\n\"Go ahead, Beth,\" Samantha said.\n\n\"It's okay?\"\n\n\"It is now!\"\n\nBeth smiled at me as she moved and straddled my hips. She grabbed my cock with both hands and stroked it for a minute then held it in place and moved her pussy over it. Even on her knees, she had to lift herself up. She lowered herself down and rubbed the end between her dripping pussy lips for a minute. She held my cock and pushed down. I watched as the head of my cock split her pussy lips.\n\n\"Emmmmm.\"\n\nBeth worked the end gently between her pussy lips for a minute as she held my cock. I wasn't sure how far she was going to get, but I was going to watch closely. She pushed down harder, and the end of my cock slipped between her pussy lips.\n\n\"Emmmmmm.\"\n\nShe had about three inches inside of her, and she was tight. We all watched as she worked what she had in and out for a while. She got comfortable with that and pushed down hard again.\n\n\"Ahhhhhhhhh...\" came from her as a few more inches slid into her.\n\nShe had worked about half my cock into her tight pussy now. I looked up at her, and she had her eyes closed as she wiggled.\n\n\"Can you do it?\" Samantha asked.\n\n\"Oh, yes!\"\n\nBeth wiggled for a few minutes then began to push down hard again. As tight as she was, I was sure it was hurting her.\n\n\"Beth, don't hurt yourself,\" I said.\n\n\"Oh, no! I love the feeling!\"\n\nShe pushed down, and a few more inches slowly slid into her.\n\n\"Ahhhhhh...yes...that's it!\"\n\nBeth held what she had then started working her pussy up and down. She was so tight it almost hurt me. I knew it was wrong, but she looked so hot. We all watched as she worked her pussy for a while. She paused, then started pushing down hard.\n\n\"Ahhhhhhh!!\"\n\nI had already bottomed her out, but she kept jamming my cock in deeper. She had about two or three inches to go. She pushed but no more was going inside of her.\n\n\"Ahhhhhhh! I want all of it!\"\n\nBeth moved around until she had her legs out from under her and her feet next to me. I felt even more pressure on my cock as her weight settled.\n\n\"All of it! I want all of it!\"\n\nShe used her weight to push down harder. The pressure on my cock was a lot as it pried her apart. I was going to tell her to stop, but she seemed to be getting off on it. She moaned now that she had all but about an inch or more inside of her.\n\n\"I want it!\"\n\nBeth put her hands behind her on my legs and leaned back a little. Then I watched as she lifted her feet off the bed. My cock was holding her about an inch up in the air.\n\n\"Ahhhhhhh!!\"\n\nBeth wiggled as she screamed and my cock slowly slid the rest of the way in her, and she was sitting on my crotch.\n\n\"Yes!!\"\n\nI suddenly found myself struggling not to come in her.\n\nShe put her feet back on the bed and turned her body from side to side, making sure I was in her as far as I would go. I looked up at her face, and she was looking at me, smiling.\n\n\"Are you okay?\" I asked.\n\n\"Ohhhh...yes!\"\n\nBeth sat for a while then began to slowly work my cock in her pussy. I couldn't believe how tight she was, but she kept going.\n\nI heard Samanta moaning and looked, and she was now working her fingers into her pussy as she watched. Samantha and Amy were getting themselves off as they watched Beth. After about ten more minutes, Beth was working her pussy up and down on my cock.\n\n\"Oh, this wonderful!\"\n\nBeth worked a few more minutes.\n\n\"Ohhhh, I'm coming!!\" She screamed.\n\nBeth jerked as she gushed all over me.\n\n\"Ahhhhhhh!! Yes!!\"\n\nShe kept working her pussy up and down on my cock. I heard Samantha and Amy moaning then they got off.\n\nBeth was like a little machine. She just kept fucking my cock. I reached up and rubbed her nipples, and she placed her hands over mine as I rubbed. Beth kept working her pussy as she moaned and went at it for a long time.\n\n\"Ohhhhh, fuck!! I'm coming!! Fill me full of your hot cum!!\"\n\nShe bounced for a minute, then screamed. I thrust up and lifted her high off the bed.\n\n\"Yeeesssss!!\"\n\nShe started coming hard, and I started pumping cum into her tight little pussy.\n\n\"Yes!!\"\n\nWe both jerked for a few minutes then collapsed.\n\n\"Oh, fuck!\" Beth exclaimed.\n\nI had heard Amy and Samantha get off several times also.\n\nBeth sat and worked at catching her breath.\n\n\"That was fantastic,\" she said.\n\nI looked between her legs, and cum was running out of her.\n\n\"Beth, you are hot little fuck,\" I told her.\n\n\"All the guys say that!\"\n\n\"I'm sure they enjoy looking at your cute little body.\"\n\n\"Oh, I think they have some pretty good fantasies!\"\n\nI was sure they did.\n\nBeth worked her pussy on my still hard cock.\n\n\"Ohh! You are still nice and hard!\"\n\n\"Hot women have that effect on me.\"\n\n\"Can I fuck you again?\"\n\n\"How about I fuck you this time?\"\n\n\"Deal!\"\n\nI pushed myself up and grabbed Beth and held her as she sat in my lap.\n\n\"Beth, you want to have some fun?\" I asked.\n\n\"Of course!\"\n\nI held her tight and turned and sat on the edge of the bed with her. I slowly stood and held her small body as it was impaled on my cock.\n\n\"Oh! You can do this!\" She exclaimed.\n\n\"He does us that way all the time,\" Samantha said.\n\nBeth wrapped her arms around my neck as she smiled at me. I slid my hands down and cupped her ass and began to work her pussy on my cock.\n\n\"Oh, this is fun!\"\n\nBeth laughed as I worked her on my cock. She got into it and used her legs to pull her pussy down hard each time. She was having fun as she laughed. I heard the girls laughing as we kept it up for a long time.\n\n\"Ohhh! I'm coming again!!\"\n\nBeth squeeze me tight with her legs as she came hard.\n\n\"Ahhhhhh!!\"\n\nI held her for a minute as she caught her breath.\n\n\"Oh...hi, Mrs. Smith,\" Beth said, looking over my shoulder.\n\n\"Sounds like you are having fun,\" I heard Dawn say.\n\n\"Is this okay?\"\n\n\"Of course.\"\n\nBeth hesitated then started working her pussy up and down on my cock. I held her as she bounced up and down for a while. Her tight pussy was still squeezing my cock hard. She began to moan loudly as I felt her orgasm growing.\n\n\"Ahhhh! Ahhh! Fuck! I'm going to come again!!\" She screamed.\n\nShe began to work her pussy on my cock faster.\n\n\"Ahhhh!!\"\n\nI grabbed her ass and jammed her down onto my cock.\n\n\"Ohh!!\"\n\nI pulled her down hard as I pumped cum into her again.\n\n\"Fuck!! Fuck me!!\"\n\nWe came together for a few minutes.\n\n\"Oh, my. That was incredible,\" Beth said.\n\nI turned and leaned over and laid her on the bed and slid my cock from her pussy. When I stood, I looked at her tiny body and her big tits. She looked like a doll with the wrong proportions.\n\n\"Have you three had lunch?\" Dawn asked.\n\n\"Not yet,\" Amy said.\n\n\"Well, if you plan on inviting boys over and fucking all evening, I better fix us all something.\"\n\nDawn left.\n\n\"Are you sure it is okay if we do that?\" Beth asked me.\n\n\"Beth, Amy and Samantha can do whatever they want. You three just need to make sure your boyfriends don't tell anyone about it,\" I said.\n\n\"Oh, they won't,\" Beth said.\n\n\"You three get cleaned up and come down for lunch.\"\n\nI left and went down to the kitchen. \n\n\"She is hot,\" I said.\n\n\"And cute,\" Dawn replied as she walked to me.\n\nDawn eased down onto her knees and sucked my partially hard cock into her mouth for a minute.\n\n\"She tastes good too.\"\n\nI watched Dawn as she cleaned my cock off. She stood and pulled me down and kissed me.\n\n\"You will like her taste.\"\n\n\"I'm sure I will.\"\n\nI sat at the bar and talked to Dawn while she made some lunch.\n\nI heard giggles behind me. I looked, and the three of them were walking up naked with wet hair. Amy went to help Dawn, and Samantha and Beth sat with me at the bar. I was looking at Beth's tits. They were firm with pert nipples.\n\n\"She said she wants you to fuck them,\" Samantha said.\n\n\"What?\" I asked Samantha.\n\n\"She wants you to fuck her tits with your big cock.\" Beth was smiling at me.\n\n\"Beth, I think you like to have a lot of fun,\" Dawn said.\n\n\"Oh, I do. All the boys like fucking me because I look so young.\"\n\n\"What kind of nurse are you going to be?\" Dawn asked.\n\n\"Pediatric probably.\"\n\n\"Go call Luke,\" Samantha said.\n\n\"Are you sure?\"\n\n\"Yes.\"\n\n\"What do I tell him?\"\n\n\"Tell him to eat before he comes, and we are going to have a pool party about 6:00.\"\n\n\"Do I tell him we are all going to fuck him!\"\n\n\"I wouldn't!\" Amy exclaimed, and they all laughed.\n\nBeth got up and went to get her phone.\n\n\"You two make sure they don't talk,\" I said.\n\n\"I don't know, James. Dawn may have to fuck both of them so they won't talk,\" Samantha said.\n\n\"Sam...\" Dawn said.\n\n\"You would like Rick.\"\n\n\"Just make sure they understand,\" Dawn said as she worked.\n\n\"It's okay if they stay tonight, isn't it?\"\n\n\"Yes.\"\n\n\"He said he would be here at 6:00,\" Beth said as she climbed back on the barstool. \"Now, you call Rick.\"\n\nSamantha picked up the house phone and dialed.\n\n\"Hey, Rick, it's Sam.\"\n\n\"Would you like to come to the house for a pool party tonight?\"\n\n\"Yes, it's okay.\"\n\n\"That's okay too. My sister will be here too.\"\n\n\"That was the idea, Rick.\"\n\n\"Eat before you come, you will need your energy.\"\n\n\"Okay.\"\n\nShe hung up.\n\n\"He is coming.\"\n\n*****\n\nIt was about 3:00 by the time we all finished eating. \n\n\"Mrs. Smith, I think you are overdressed,\" Beth said as we all finished cleaning up.\n\n\"Okay. I'm going for a swim anyway.\"\n\nDawn went upstairs. We all went outside and sat around the pool.\n\n\"Your pool is beautiful,\" Beth said as she lay back in a recliner.\n\n\"Dawn designed it,\" Amy said.\n\n\"Beth, you and your friends, need to remember Dawn is a Dean at the school,\" I said.\n\n\"We know.\"\n\nDawn walked out of the house naked. I watched as Beth looked her over.\n\n\"Mrs. Smith, you have a hot body,\" Beth said.\n\n\"You may as well call me Dawn.\"\n\nDawn sat on a recliner and leaned back in the sun. Beth kept looking at her.\n\nWe all sat in the sun for a while. I saw Beth get up and move and sit on the edge of Dawn's recliner. Dawn looked at her as Beth ran her hand between Dawn's legs. Dawn pulled her legs up and spread them.\n\nAmy and Samantha were watching as Dawn smiled at Beth. We could tell Beth was playing with Dawn's pussy. After some time Dawn pulled her legs up further.\n\n\"Ahhhhhhhh...\" came from Dawn.\n\nI sat up and looked, and Beth was working her entire hand into Dawn's pussy.\n\n\"Oh, my...\" came from Dawn.\n\nWe kept watching for a few minutes.\n\n\"Emmmm, that's it. That feels wonderful...\" Dawn moaned.\n\nDawn pulled up on her recliner and laid all the way back. We could all see Beth working her fist inside of Dawn's pussy. Dawn was in heaven.\n\nWe watched Beth as she kept working. Dawn was moaning as we all watched her enjoy what was happening for a while.\n\n\"Ahhhhh!!\" Came from Dawn and she thrust her hips up. \"Fuck!!\"",
        "Dawn was coming hard.\n\n\"Oh, my!\" Came from Beth as she watched Dawn squirt all over her.\n\n\"Ahhhhhh!!\" Dawn screamed and kept thrusting her hips up.\n\nDawn collapsed down onto the recliner.\n\n\"You like that?\" Beth asked.\n\n\"Oh, yes. Keep going.\"\n\nWe watched for a few more minutes then Beth began to work her fist in Dawn's pussy hard and fast.\n\n\"Oh, my god!!\"\n\nBeth kept working her fist hard.\n\n\"Ahhhhhh!! Fuck!! That's it!!\" Dawn screamed. Dawn lifted her hips up and held them up. Beth pushed her hand in deep and hard.\n\n\"Wow,\" Amy said as she watched.\n\n\"Ahhhhhh!!\" Dawn screamed.\n\nDawn kept screaming as she came over and over as Beth tortured her pussy.\n\n\"Fuck!!\" Dawn screamed.\n\nBeth slowly pulled her fist from Dawn's pussy.\n\n\"Ohhhhh...wow. Beth, you are my new best friend!\" Dawn said. We all laughed.\n\n\"Most of the girls I know enjoy that,\" Beth said.\n\n\"I'm sure they do. Your hands are so small that feels great.\"\n\n\"Dawn, would you like for me to try both hands?\"\n\n\"Oh, my. Not this time...\"\n\nBeth stood and put her knees on the end of Dawn's recliner and got between Dawn's legs and placed her mouth over her pussy.\n\n\"Emmm.\"\n\nBeth worked on Dawn for a while until she came again.\n\n\"Oh, Beth, Get up here,\" Dawn said.\n\nBeth got up and moved over Dawn's head. Dawn pulled Beth's pussy down to her mouth, and Beth leaned over and placed her mouth back over Dawn's pussy. The girls and I watched for about half an hour as Dawn and Beth laughed as they pleased each other.\n\nBeth was laughing as she stood and removed her pussy from Dawn's mouth.\n\n\"You are a lot of fun,\" Beth said.\n\n\"We try to have fun,\" Dawn replied.\n\nBeth laid down on a recliner.\n\n\"I need to rest. You all have worn me out,\" she said.\n\n\"You need to get in shape if you are going to hang out with us,\" Samantha told her.\n\n\"I can rest while he fucks my tits.\"\n\nBeth was smiling at me as she looked. I didn't waste any time straddling her and placing my hard cock between her tits. Beth pressed her tits together and started working my cock between them.\n\n\"Dawn, will you let Rick fuck you?\" I heard Samantha ask.\n\n\"Honey, he is your friend. You and your sister can keep him happy.\"\n\n\"He can fuck all night. He will want to do you once he meets you.\"\n\n\"I don't think it would be a good idea.\"\n\nI was watching my cock slip between Beth's tits as they talked. I pushed all the way between them, and Beth opened her mouth, and the end went between her lips. She was so small.\n\n\"Have you met Luke?\" I heard Dawn ask.\n\n\"Not yet,\" Samantha said.\n\n\"You three treat them nice then,\" Dawn said.\n\nI was working my cock between her tits and slipping the end in and out of her mouth. Beth was having a good time and laughing. Dawn and the girls talked while I had fun with Beth.\n\n\"Come on me,\" Beth said.\n\n\"My pleasure.\"\n\nI sped up as Beth mashed her tits together harder. She held her mouth open as I pumped her tits. I went for a few more minutes, then started coming.\n\n\"Ahhh!\" I let out as I watched cum spray Beth's face.\n\nI kept coming until her face and tits were covered. Beth started laughing.\n\n\"That was fun! The guys love doing that, but your big cock makes it fun!\"\n\nI slid my cock from between her tits and laughed at her. She was covered in cum.\n\n\"My turn,\" I heard Samantha say. \"Get up.\"\n\nI stood, and Samantha laid on top of Beth. She started licking cum off her tits. After a few minutes, Amy came over and sat on the patio and started licking cum off Beth's face. The three of them laughed and had some fun for a long time; then they went into the house.\n\nI had been lying on a recliner when Dawn came over.\n\n\"I think they had fun,\" Dawn said.\n\n\"I know Beth did.\"\n\nDawn straddled my legs and wrapped a hand around my hard cock.\n\n\"You always like watching,\" Dawn said.\n\n\"Did you enjoy Beth's talented hand?\"\n\n\"Oh, god. That was so good. I know some other women that would enjoy that.\"\n\n\"I'm sure they would. If she can get both hands inside of you, I want pictures.\"\n\n\"You know what! She would make a great model for you! If we could use her on the website, she would look so hot!\" Dawn said.\n\n\"I wonder if I can get her to work in the store. She would draw a lot of attention,\" I said.\n\n\"She would! But, I don't think you will have lingerie that small.\"\n\n\"II will get here some! I'll get Samantha to ask her about it.\"\n\nDawn stroked my cock until it was nice and hard and then worked it into her pussy.\n\nBy the time they all came back, Dawn was fucking my cock hard. The three of them sat and watched.\n\n\"Ahhhhh!! I'm coming!!\" Dawn screamed.\n\nI lifted her up, and she kept working her pussy hard.\n\n\"Ahhhhhhhh!!\"\n\nThe two of us came together as Dawn screamed.\n\nWe sat there as Dawn caught her breath.\n\n\"That was hot,\" Beth said.\n\n\"It always is,\" Amy added.\n\n\"Beth, have you ever done any modeling?\" Dawn asked as she sat on my cock.\n\n\"Kids clothes, until my tits got big.\"\n\n\"What would you think about modeling some lingerie?\"\n\n\"That would be cool.\"\n\n\"James and I just started a photography business. We are going to do lingerie shots.\"\n\n\"That sounds cool.\"\n\n\"If you will model for us and let us use the pictures on our website, we will do the photos for free.\"\n\n\"Sure! That would be great!\"\n\n\"Good. Give us a few months.\"\n\n\"No problem!\"\n\n\"You would be okay with people seeing you in lingerie?\" Samantha ask.\n\n\"I don't care.\"\n\n\"Hmmmm,\" came from Samantha. \"Can I tell her?\"\n\n\"Sure,\" I said.\n\n\"Beth would you like a part-time job starting in February?\" Samantha asked.\n\n\"What kind of job?\"\n\n\"You can't tell anyone about it.\"\n\n\"Okay.\"\n\n\"There is a new lingerie store opening in February, and they are going to have the salesladies work in lingerie.\"\n\n\"You mean work in the store while they wear lingerie?\"\n\n\"That's the plan.\"\n\n\"That's crazy!\"\n\n\"We know. We hope it is a big success,\" Amy said. \"We will also be selling swimwear.\"\n\n\"Who is we?\" Beth asked.\n\n\"Well, we own the store,\" Samantha said. \"It is going to be a big fancy store.\"\n\n\"Will it pay well?\"\n\n\"It will pay a great commission,\" I said. \"It will be high-end and very expensive lingerie.\"\n\n\"That sounds like fun. I could use the money,\" Beth said.\n\n\"Beth, if you will let us put up photo's of you in the store wearing our lingerie, I'll pay you for it,\" I said.\n\n\"Sure!\"\n\n\"You're hired!\" Samantha exclaimed, and we all laughed.\n\n\"It's almost 5:30, we all better get ready,\" Dawn said as she stood.\n\n\"We have to get dressed?\" Samantha said.\n\n\"Why don't you three start that way,\" Dawn told them.\n\nDawn went into the house. I followed all the girls inside.\n\n*****\n\nJust before 6:00, we were all sitting in the den. The girls had on shorts and T-shirts.\n\n\"No alcohol,\" I reminded them.\n\n\"We know,\" Amy said.\n\nAbout 6:00, the intercom buzzed.\n\n\"I'll get it,\" Samantha said.\n\nShe went to the intercom and let someone in.\n\n\"It's Rick,\" she said.\n\nShe went to the door and waited.\n\n\"Hi, Rick. Come on in!\"\n\nSamantha walked her lab partner into the house.\n\n\"Rick, that is my sister Amy, our friend Beth, and that is my wife Dawn and my husband James, I told you about.\"\n\n\"Hi,\" he said.\n\n\"Hi, Rick,\" I said.\n\nEven Rick took a long look at Beth.\n\n\"Rick, Beth's boyfriend, is going to be here too,\" Samantha said.\n\n\"Really?\"\n\n\"That's okay, isn't it?\"\n\n\"I guess. I thought we were...\"\n\n\"We are,\" Samantha said. \"You want a soda?\"\n\n\"Please.\"\n\nSamantha walked to the kitchen, and Rick followed. I could see him whispering to Samantha. They came back with him carrying his soda.\n\n\"...yes it is okay, I told you that,\" Samantha said.\n\nThe intercom buzzed again.\n\n\"Come on, Beth.\"\n\nShe and Samantha went and let someone else in the gate, and then they went to the door.\n\n\"Hi, Luke,\" Beth said.\n\n\"What a house,\" we heard him say.\n\n\"Come on in. This is my friend, Samantha. It is her house.\"\n\n\"Hi, Luke.\"\n\n\"Hi.\"\n\nLuke looked to be about 6'3\" and muscular. Beth was holding his arm as they walked toward us. Samantha went through introductions again. Luke wasn't sure what to say when Samantha said, wife and husband.\n\nThey walked him to the kitchen to get him a soda. More whispering.\n\n\"You two ready to go swimming?\" Samantha asked.\n\n\"Sure,\" Rick said.\n\n\"Come on.\"\n\nThey all went outside.\n\n\"Beth sure looks funny next to him,\" Dawn said.\n\n\"Be careful,\" I said.\n\n\"I'm not that short!\" I laughed at Dawn.\n\nDawn and I stayed inside and watched TV. About 7:00, we heard all of them laughing. We looked out the window, and they were all naked now.\n\n\"Kids,\" Dawn said.\n\n\"You can join them.\" Dawn rolled her eyes at me.\n\nAbout 8:00, a movie was coming on as Dawn, and I watched.\n\n\"No! Come on!\" We heard Samantha exclaim. \"It's okay.\"\n\nWe looked, and Samantha was leading all of them into the house naked.\n\n\"Come on. They are cool.\"\n\nSamantha and Beth were giggling as they all went up the stairs.\n\nWe started watching the movie.\n\n*****\n\nAbout 9:30, we heard screams of ecstasy coming from upstairs.\n\n\"Sounds like they are having a good time,\" I said.\n\nWe listened to more screams until the movie went off at 10:00.\n\n\"You want to go to bed?\" I asked.\n\n\"Yes, I'm horny from all the screaming.\"\n\nI took Dawn up the stairs. We ran into Beth and Samantha going to the kitchen.\n\n\"Don't stay up all night,\" I said. They laughed and kept going.\n\nDawn and I got ready for bed and got on it.\n\n\"Goodnight!\" We heard Samantha yell as she went by the door, laughing.\n\nI turned the lights down, and Dawn and I listened to the giggling. After it got quiet and the giggles turned to moans, Dawn started sucking my cock.\n\n\"The girls are having a good time,\" Dawn said.\n\n\"You can tell?\"\n\n\"Oh, yes.\"\n\nDawn went back to sucking my cock. She got into it for about 15 minutes then straddled me and worked my cock into her dripping pussy. Dawn had her eyes closed as she wiggled. I know she was feeling what the girls were feeling.\n\nDawn worked her pussy on my cock until she came hard.\n\n\"Emmm, they switched boys,\" Dawn said. \"Fuck me.\"\n\nDawn moved off me and laid on her back and pulled her legs up. I got between then and slowly slid my cock inside of her.\n\n\"Emmmm.\"\n\nI was working my cock in Dawn nice and slow when I saw the red light on the remote come on.\n\n\"One of them turned the camera on,\" I told Dawn.\n\n\"I don't care. Fuck me hard.\"\n\nI fucked Dawn hard for a long time. She was getting off with everything she was sensing.\n\n\"Ohhh! Fuck me harder!!\"\n\nI jammed my cock into Dawn over and over.\n\n\"Ahhhhh!! I'm coming!! Harder!!\"\n\nDawn jerked beneath me as she came in a huge orgasm.\n\n\"Ahhhhhhh!! Yes!!\"\n\nI pushed in and held it while Dawn calmed down.\n\n\"Are they still watching?\" Dawn whispered.\n\n\"Yes.\"\n\n\"My turn.\"\n\nI rolled off of Dawn. She straddled me, facing away and worked my cock back into her pussy. She put her legs in front of her and her hands behind her. She knew they would have a great view now. Dawn started working her pussy up and down on my cock.\n\n\"Tease,\" I whispered.\n\nDawn worked her pussy on my cock and cried out for about 15 minutes before she came again.\n\n\"Ohhh! Fuck me!!\" She screamed.\n\nDawn jerked several times then I felt her juices landing on my legs.\n\n\"Ahhhhhhhh!!\"\n\nI started thrusting up into Dawn as we both came.\n\n\"Ahhhh!! Fill me full of cum!!\" Dawn screamed.\n\nWe both collapsed after a few more minutes. Dawn was lying on top of me with her legs spread and my cock in her.\n\n\"You should let those two boys fuck you.\"\n\n\"Emmmm.\"\n\nDawn kept laying on me as I turned on the TV so we could see them.\n\nRick was behind Beth driving his cock into her. Amy was riding Luke while Samantha sat on his mouth. We lay and watched them for about an hour until they all fell asleep.\n\n*****\n\nWhen I woke up, the TV was still on. I was a looking at all the naked bodies on Samantha's bed. Dawn was still asleep. Amy came out of the shower a few minutes later and woke the rest of them up. They were lying there laughing.\n\n\"Emmm, I am going to shower,\" Dawn said and got up.\n\nShe went into the bathroom. I got up and went to Samantha's room.\n\n\"You two guys come with me,\" I said.\n\nThey looked for a minute.\n\n\"Go on,\" Amy said.\n\nThe followed me back to my bedroom.\n\n\"You two join my wife in the shower,\" I told them.\n\n\"Are you sure?\" Rick asked.\n\n\"Go ahead.\"\n\nThe two of them went into the bathroom, and I went back to Samantha's room. Amy was lying on the bed watching the TV.\n\n\"Where did Beth go?\" I asked.\n\n\"Shower.\"\n\nI laid on the bed next to Amy. I looked up, and Rick and Luke were soaping up Dawn. The two of us watched for a while as they took their time. Dawn was smiling and having a good time.\n\n\"Oh, wow!\" Beth said as she looked at the TV.\n\nBeth sat on the edge of the bed as Samantha lay next to me. We kept watching as Dawn got on her knees and took turns sucking their cocks.\n\n\"They will enjoy that,\" Samantha said.\n\nWe watched for a while longer. I was looking at Beth as she slowly rubbed her pussy.\n\n\"Beth, can I take care of that for you?\" I asked. She looked at me.\n\n\"Sure!\"\n\n\"Up here,\" I told her.\n\nBeth crawled over Amy and straddled my mouth so she could watch. I pulled her pussy down and slid my tongue into her. I tongued her small pussy for a long time until she came in a gush into my mouth.\n\n\"Ahhhh!\"\n\nBeth pushed herself up and worked her way down to my cock. She was watching the TV as she started my cock into her pussy once more.\n\nI looked at the TV and Dawn was back in the bedroom. She had Rick on his back and was sucking his cock while Luke fucked her from behind.\n\n\"Are you sure that is okay with you, James?\" Beth asked.\n\n\"Beth, Dawn does as she pleases.\"\n\nI felt Beth sliding her tight pussy down on my cock. Once she was down, she worked her pussy slowly as she watched her boyfriend fuck Dawn.\n\n\"Dawn is having a good time!\" Samantha said.\n\nWe watched until Dawn had them trade places. She was now sucking Luke's cock while Rick fucked her from behind. Amy had turned up the volume so we could hear Dawn moaning as she worked.\n\n\"Luke has a big cock,\" Amy said. \"I liked it. I know Dawn will.\"\n\nBeth was working her pussy on my cock as she watched.\n\n\"Beth, do you like watching?\" I asked.\n\n\"Yes, this is hot. Oh, I guess we shouldn't have watched you two last night.\"\n\n\"Did you enjoy watching?\"\n\n\"It was hot. I got off while I watched.\"\n\n\"Oh, stop a minute,\" we heard Dawn say.\n\nWe watched as Dawn sat up on her knees. She moved over Luke and lowered her pussy down and slid his cock into her. Rick watched as she fucked Luke for a long time. She had to be keeping him from coming.\n\n\"Ahhhh! Fuck! I'm coming!!\" Dawn screamed.\n\nShe had a huge orgasm, then laid on top of Luke.\n\n\"Emmm, that was nice, Luke.\"\n\n\"Yes, it was!\"\n\n\"Luke, is it okay if Rick fucks my ass while you fuck my pussy some more?\" Dawn asked.\n\n\"Sure!\" He exclaimed.\n\n\"Rick, can you do that?\" Dawn asked.\n\n\"No problem!\"\n\nWe watched Rick get behind Dawn and work his cock into her ass.\n\n\"I don't believe this!\" Rick said.\n\n\"After a few minutes, they were fucking Dawn hard. Beth had sped up and was fucking my cock hard.\n\n\"Beth, have you tried that?\" Amy asked.\n\n\"No!\" She exclaimed as she worked harder.\n\n\"You need to.\"\n\n\"Ahhhhh!\"\n\nI couldn't imagine one of them being in her tiny ass.\n\n\"You want to try it later?\" Amy asked.\n\n\"Yes!! Ahhhh!! I'm coming!!\" Beth screamed.\n\nShe jerked on my cock as she screamed and came. She stopped and kept watching. We could hear Dawn moaning as they fucked her hard.\n\n\"She is doing it,\" Samantha said.\n\n\"Doing what?\" Beth asked.\n\n\"Nothing.\"\n\nRick was slamming his cock into Dawn's ass.\n\n\"I have never had a cock in my ass,\" Beth said.\n\n\"You'll love it,\" Samantha said. Beth looked over at her.\n\n\"Can you get his in your ass?\" She asked.\n\n\"Oh, yes, and I love it.\"\n\n\"Can I see?\"\n\n\"Sure!\"\n\nBeth pushed up and off my cock. Samanta quickly straddled me so she could keep watching. She lifted her ass up and grabbed my slick cock. I watched as she slid down and started my cock into her ass. Beth was between her legs watching. Samantha slowly slid all the way down.\n\n\"Emmmmmm,\" came from Samantha.\n\n\"That feels good?\" Beth asked.\n\n\"Oh, yes.\"\n\n\"I'll have to try that!\"\n\n\"Beth, there is no way you can get his cock in your ass!\" Amy said.\n\n\"Are you sure?\"\n\n\"Oh, yes. Rick would be good for the first time.\"\n\n\"Okay!\"\n\nWe listened to Dawn scream she was coming. We also heard the guys grunting as they came and filled her full of cum.\n\n\"Damn, Sam,\" Beth said as she looked.\n\nSamantha was working my cock in her ass slowly. She leaned back with her hands behind her and worked her ass up and down for a few minutes.\n\n\"Oh, Beth!\" Samantha exclaimed. I realized Beth had placed her mouth over Samantha's clit.\n\nAmy rolled to me and kissed me for a minute.\n\n\"Get up here,\" I told her.\n\nAmy smiled and straddled my mouth.\n\nSamantha kept going as I got Amy off. I heard Samantha scream several times.\n\n\"Ohh, my,\" Amy said as she moved from my mouth.\n\nSamantha laid back on top of me and let Beth work on her clit.\n\n\"Ahhhhh! Beth!\"\n\nSamantha humped her pussy up and started coming.\n\n\"Ahhhhhhhh!!\"\n\nSamantha came hard until Beth stopped.\n\n\"Ahhh, fuck!\"\n\nSamantha stayed where she was. I looked up, and Dawn had both of the boys on their backs and was working at sucking both of them until they were hard again.\n\n\"Sam, are you okay?\" I heard Beth ask.\n\n\"I'm perfect. Beth, you want to try something?\"\n\n\"What?\"\n\n\"Let me eat your pussy.\"\n\n\"Are you sure?\"\n\n\"Yes. This will be fun!\"\n\nBeth got on the bed and stood and laughed. She moved and straddled Samantha's head as I looked up at her. She slowly lowered her pussy down to Samantha's mouth as they laughed. She sat so she could see the TV. Samantha held Beth's tiny body as she worked on her pussy.\n\n\"She is fucking them again!\" Beth said.\n\n\"She will be for a while,\" Amy said.\n\nI wanted to laugh as I watched. I could hear Dawn moaning again as Beth worked her pussy on Samantha's mouth. A few minutes later, Beth was coming.\n\n\"Ahhhhh!\"\n\nBeth trembled, then I saw her lean over so she could work on Samantha's clit again. I looked over at Amy, and she was giggling. She smiled at me then slid the end of her finger between Beth's crack. Amy took her finger and held it over my mouth, I opened, and she stuck it in, and I sucked on it and got it wet.\n\n\"That will work,\" Amy said.\n\nShe took her finger and placed the tip on Beth's asshole and pushed gently.\n\n\"Emmmmm,\" came from Beth.\n\nAmy kept pushing until her finger began to slide into Beth.\n\n\"Ahhhh!\" Came from Beth.\n\nAmy pushed her finger in all the way as Beth moaned.\n\n\"See, that feels good,\" Amy said.\n\n\"It does.\"\n\nBeth went back to work on Samantha's pussy as Amy began to slowly slide her finger in and out of Beth's ass. I could hear Beth moaning loudly. The more Beth moaned the harder Amy worked her finger in her ass.\n\nThey all kept this up until Samantha and Beth came in screaming orgasms. Beth fell off the top fo Samantha.\n\nSamantha pushed herself up and started working her ass hard on my cock. She kept going until we both came, and I filled her ass full of cum.\n\n\"What is Dawn doing?\" I asked.\n\n\"She fucked Rick again and is fucking Luke now,\" Amy said.\n\n\"Why don't you three join them. I'm going to shower,\" I said.\n\n*****\n\nAfter I dried off, I went to my bedroom. Dawn was lying back on the bed, slowly rubbing her pussy.\n\n\"Where did they go?\" I asked.\n\n\"To cook breakfast.\"\n\n\"Did you have a good time?\" I asked.\n\n\"Yes.\"\n\nDawn pulled her legs up and spread them. I watched as she spread her pussy lips with her fingers. I crawled on the bed and over her and started kissing her. While I was kissing her, she started rubbing my cock.",
        "\"Did you like those two young boys fucking you?\"\n\n\"Emmmm, yes. But I need you to fuck me now.\"\n\nI kissed Dawn as she stroked my cock until it was hard. She grabbed it and pulled me into her. I slowly slid into her hot pussy.\n\n\"You are hot,\" I said.\n\n\"I know. Fuck my hot pussy hard, please.\"\n\n*****\n\nDawn dried off from her shower as I watched. The two of us headed down to the kitchen for breakfast. We found all them sitting at the table eating. We got some food and joined them.\n\n\"Rick and Luke, I expect you two not to talk,\" Dawn said.\n\n\"We won't,\" they said.\n\n\"Good.\"\n\nWe all ate and talked and laughed. Amy and Samantha got up to take the plates back to the kitchen; Luke and Rick followed them.\n\n\"Beth, I know you won't talk either,\" Dawn said.\n\n\"Oh, no...can I come back?\"\n\n\"Sure. I'm sure Sam will enjoy you spending the night with her.\"\n\n\"And all this is okay with you two? I mean, Sam says all of you are married.\"\n\n\"It's all fine, as long as it is kept quiet,\" I said.\n\nThe others came back laughing.\n\n\"Come on, Beth. We are going out to the pool,\" Samantha said.\n\nBeth got up and went with them.\n\nDawn and I finished cleaning up then went outside. We sat and watched all them play in the pool.\n\n\"I think Sam needs to hang out with some people her age,\" Dawn said.\n\n\"Thirty-five?\" Dawn laughed.\n\n\"She still needs to be a teenager.\"\n\nAfter about an hour, they all got out of the pool and dried off.\n\n\"Come on!\" Samantha said, and they all went inside.\n\nDawn and I lay in the sun for a while until we heard screams. I turned and looked in the windows. I couldn't see them, so I stood. Beth was getting fucked in both holes.\n\n\"You want to see this,\" I said. \"They got the idea from you.\"\n\nDawn stood, and we walked to the window. Rick was behind Beth working his cock in Beth's ass as she rode Luke. We stood and watched and listened to Beth screaming over and over she was coming until they were all spent.\n\n\"I think she enjoyed that,\" Dawn said.\n\nWe went back to lying in the sun.\n\n*****\n\nAmy and Samantha came out with Beth about an hour later.\n\n\"Where are the guys?\" I asked.\n\n\"They had to go,\" Samantha said.\n\nThe three of them found recliners to lay in the sun.\n\n\"Beth, did you enjoy that?\" Dawn asked.\n\n\"Oh, yes! I see why you like it!\"\n\n\"Did it hurt?\"\n\n\"Oh, no! It felt great! I can't wait to do it again!\"\n\n\"Was Luke okay with sharing you?\" I asked.\n\n\"He had a good time.\"\n\n\"Did he have a good time because he was having sex with other women, or because you were having fun?\" Dawn asked.\n\n\"He told me he was happy I had a good time,\" Beth said.\n\n\"Good. Make sure he wants you to have a good time as well as him.\"\n\n\"Sam is going to come to my apartment soon.\"\n\n\"Beth, can you come back for a Saturday and let me take some pictures?\" I asked.\n\n\"Sure, just let me know when.\"\n\n\"Can I take some of you naked?\"\n\n\"Sure.\"\n\n\"Can I take some of you having sex?\"\n\n\"For what?\"\n\n\"For my collection.\"\n\n\"Sure. Just don't put them on the internet.\"\n\n\"I wouldn't.\"\n\nWe spent the rest of the morning outside. Dawn and I went in and fixed lunch while they played in the pool. They all came in about 1:00, and we ate.\n\n\"Dawn, thanks for sharing,\" Beth said.\n\n\"I'm happy you had a good time, Beth.\"\n\n\"I did. I wish I could have more fun like this.\"\n\n\"With or without Luke?\" Dawn asked.\n\n\"Without! Luke is just my current fuck.\"\n\n\"Maybe you can have more fun then.\"\n\n\"That would be great! I have enjoyed your husband's big cock this weekend. Thanks.\"\n\n\"I'm sure he has enjoyed you also.\"\n\n\"I hope he can enjoy me again before I leave!\" They all laughed.\n\nLater we were all in the den and Amy was showing Beth some of our photo albums from Hawaii.\n\n\"Who is the Hawaiian girl?\" Beth asked.\n\n\"That is Lieke, she is going to spend Christmas with us,\" Samantha said.\n\n\"She looks like fun!\"\n\n\"She is!\"\n\n\"I need to go soon,\" Beth said.\n\n\"If you want to enjoy his cock again, you better get started,\" Dawn told her.\n\nBeth stood up, smiling, and walked to me. She got down on the floor between my legs and started playing with my cock. It didn't take long for her to have it in her mouth and down her throat again as we all watched.\n\n\"That should do it,\" Beth said as she stood.\n\nShe put her hands on my shoulders and placed a knee on each side of me.\n\n\"I like it this way,\" she said.\n\nI was looking at her firm little tits as she rubbed her pussy on my cock.\n\nShe reached between us and grabbed my cock and placed the end at her pussy then pushed down hard, and the end slipped inside of her.\n\n\"Beth, I am amazed you can get all of that inside of you,\" Dawn said.\n\n\"I am too, but it fits nice and tight!\"\n\n\"Yes, it does,\" I said.\n\nI like them big, but they are hard to find.\"\n\nBeth worked up and down for a few minutes as she lowered herself down onto my cock.\n\n\"This is nice,\" she said.\n\nI was holding her, still turned on by how small she was. She worked her pussy all the way down onto my cock.\n\n\"Oh...my...\" she moaned.\n\nBeth just sat with my cock deep inside of her. After a few minutes, she began to bounce up and down. I watched her tits as they bounced.\n\n\"Ah...ah...ah!!\" Kept coming from her as she bounced.\n\nI grabbed her ass and helped her work my cock inside of her.\n\n\"Ahhh! Ahhhh!\"\n\nShe kept doing this for a long time as I helped her.\n\n\"I...am...going...to...come!!\" She screamed.\n\nI heard her pussy gush and felt her juices.\n\n\"Ahhhhhh!!\"\n\nShe slid all the way down and sat.\n\n\"Oh, that is so good.\"\n\nBeth smiled at me as she sat for a few minutes. She slowly eased up and pulled my cock from her pussy. She reached behind her and grabbed it. Before I knew what she was doing, I felt the tip pressing against her asshole.\n\n\"Beth, no! I'm too big!\" I yelled at her.\n\n\"Let me try, at least!\"\n\n\"Beth, he is too big for your ass,\" Dawn warned.\n\nBeth pushed down with all her weight, bending my cock.\n\n\"Ahhh!!\" She yelled when the end popped into her ass.\n\n\"Beth, you are going to hurt yourself!\" Amy exclaimed.\n\nBeth was looking at me as she bit her lower lip. She started to push down again. I could feel my cock sliding into her very tight ass.\n\n\"Ahhhhhhhhhh...\"\n\n\"Beth?\" I asked.\n\n\"I'm okay...\"\n\nShe paused for a minute. I could actually feel her blood pounding against my cock. She began to use her weight to push down more. I felt more of my cock slide into her. Her insides were hot and tight.\n\n\"Wow!\" She exclaimed.\n\n\"Beth, are you okay?\" Dawn asked.\n\n\"I think so.\"\n\nBeth used all her weight to push. I felt my cock slowly sliding deep into her ass.\n\n\"Ahhhhhhhhhh!\"\n\nShe stopped about halfway down.\n\n\"Oh, Dawn. I see why you like this, you too Sam.\"\n\n\"How does it feel?\" Samantha asked.\n\n\"Wonderful!\"\n\n\"Good for you,\" Dawn said.\n\n\"Rick felt really good in my ass, but this is incredible!\"\n\nBeth worked for a minute; then I felt her sliding down again. I held my breath as she kept going.\n\n\"Oh, wow!\" She exclaimed as she slid.\n\nBeth kept going. I thought I was going to come from this.\n\n\"Oh, yes!\" She exclaimed and pushed down hard.\n\nWhen I felt her ass sitting on my legs, I couldn't believe it.\n\n\"Oh, my, god!\" Beth exclaimed. \"Is that all of it?\"\n\n\"Yes,\" I told her.\n\n\"Wow! What a feeling!\"\n\n\"Beth, you are one of the lucky women that like a cock in their ass,\" Dawn told her.\n\n\"I am going to do this more often!\"\n\n\"Your guy friends will love you,\" Amy said.\n\n\"Now, what do I do?\" She asked.\n\n\"Whatever you feel comfortable doing,\" Dawn explained.\n\nBeth sat with her eyes closed for a while. She opened them and smiled. I couldn't believe it when she started working up and down on my cock.\n\n\"Yes!!\" She exclaimed.\n\nWe all watched as she slowly worked up and down on my cock for a long time.\n\n\"I really like this!\"\n\nBeth worked up and down for a bit longer.\n\n\"Ohhhh, fuck! I think I am going to come!!\"\n\nBeth started jerking hard on my cock.\n\n\"Ahhhhhh!! Fuck, yes!!\"\n\nShe jerked several more times as I felt a huge orgasm ripping through her.\n\n\"Ahhhhhhh!!\"\n\nBeth just collapsed in my arms for a few minutes.\n\n\"Oh my god. That was incredible.\"\n\n\"You are one of the special ones,\" Dawn said.\n\n\"Why?\" Beth asked.\n\n\"Most women don't get off from being fucked in the ass,\" Dawn said.\n\n\"Why not! This feels incredible!\"\n\n\"You just enjoy it, honey,\" Dawn told her.\n\nBeth started working her ass on my cock again. I held her as she worked. A few minutes later, she was screaming she was coming again. Then she collapsed in my arms again.\n\n\"Emmmmm.\"\n\nShe looked up at me and smiled.\n\n\"WiIl you come in my ass?\"\n\n\"Are you ready for that?\" I asked.\n\n\"Oh, yes.\"\n\n\"Wrap your arms around my neck.\"\n\nBeth wrapped her arms around my neck. I placed my hands on her sides and held her and lifted her up, then lowered her back down.\n\n\"Oh, my!\"\n\nI began to lift her up and down, working her ass on my cock. She got into it as I lifted her almost off then slid her back down.\n\n\"Oh...fuck...yes!!\"\n\nI kept doing this with her for a long time as she screamed.\n\n\"Fuck!! I'm going to come again!!\"\n\nI worked her up and down until she started coming hard. I jammed her down on my cock and began pumping cum deep inside of her.\n\n\"Ahhhhhhhh!! Damn!! That feels so fucking hot!!\n\nI held her as I pumped cum into her until she stopped shaking. She pulled herself to me and held me. I listened to her moaning softly.\n\n\"Are you okay?\" I asked.\n\n\"...perfect...\"\n\nI let her sit for a long time. She slowly raised her head and looked up at me. I kissed her on the lips, and she smiled.\n\n\"Your cum felt so hot. I came again from that.\"\n\n\"You are going to be sore,\" Dawn told her.\n\n\"That's okay.\"\n\n\"You want me to lift you off?\" I asked.\n\n\"Please...my legs are shot.\"\n\nI slowly lifted her up to the end of my cock. I held her a moment then lifted her off.\n\n\"Ouch!\"\n\nI sat her on my legs and looked her over. She was spent.\n\n\"Sit there until you can get up,\" I told her.\n\nShe held me as she sat. \n\nAfter some time, she tried to stand.\n\n\"Samantha help her to the bedroom,\" I said.\n\nSamantha got up and helped Beth stand. She helped her slowly walk to the downstairs bedroom.\n\n\"I can't believe she did that,\" Amy said.\n\n\"Me either,\" Dawn added.\n\n\"She is as insatiable as Samantha is,\" I said.\n\nI got up and went down the hall to the other bathroom to clean up.\n\n*****\n\nSamantha came back to the den a while later without Beth.\n\n\"She is asleep,\" Samantha said.\n\n\"Let her sleep,\" Dawn said.\n\n\"Amy, you two find out what size lingerie she wears and make sure we have it and swimwear,\" I said.\n\n\"We won't be selling anything that small,\" Amy said.\n\n\"Get with Sherri and get her what she needs.\"\n\n\"Okay.\"\n\n*****\n\nWhile we were making dinner about 6:30, Beth came to the kitchen.\n\n\"What time is it?\" She asked.\n\n\"6:30. We let you sleep,\" Dawn said.\n\n\"Sorry.\"\n\n\"That's fine. Dinner will be ready soon.\"\n\nWe fed Beth, and Amy and Samantha found out what size lingerie and swimwear she wore. About 8:00, Beth left.\n\n\"Sam, make sure she is in your Biology class in the morning,\" Dawn said.\n\n\"I will.\"\n\nWe all slept well Sunday night.\n\n*****\n\nWhen I woke up Monday morning, Dawn was coming from the bathroom wrapped in a towel.\n\n\"What time is?\" I asked.\n\n\"6:30. I let you sleep.\"\n\nDawn sat on the side of the bed and rubbed my morning hard-on.\n\n\"Sore?\" Dawn asked.\n\n\"You know what, I am.\" Dawn smiled.\n\n\"I bet Beth is sore. I'll make sure Sam checks on her.\"\n\nDawn stood and worked at drying her hair.\n\n\"What are you doing today?\" Dawn asked.\n\n\"Why?\"\n\n\"I just want to know.\"\n\n\"I need to run to the school. Jeez.\"\n\n\"I am going to finish setting up my darkroom,\" I told Dawn.\n\n\"Okay. I should be home by the middle of the afternoon. I have meetings all day.\"\n\nDawn left a few minutes later. Samantha and Amy left with her.\n\nI went down to my darkroom and worked on setting up the new equipment for about an hour. The intercom buzzed, and I went to it.\n\n\"Yes?\"\n\n\"I have a delivery for James Smith.\"\n\n\"Okay. I'll open the gate. Leave at the front door.\"\n\nI pushed the button to open the gate then went back to work. A few minutes later, I heard the doorbell.\n\n\"Shit. I said, leave it at the door.\"\n\nI went up the stairs and walked to the front door as the bell rang again.\n\nI pulled the door open.\n\n\"I said, leave it at the door...\"\n\n\"Hi, James! Happy Birthday!\"\n\nStacey was standing there naked.\n\n\"Stacey, what are you doing here?\"\n\n\"Can I come in!\"\n\n\"Of course!\"\n\nShe came into the house.\n\n\"Dawn said your birthday is this week! Happy Birthday!\"\n\n\"Where is Mark?\"\n\n\"He dropped me off.\"\n\nStacey walked up to me and started rubbing my cock through my pants.\n\n\"How old are you?\" She asked.\n\n\"Old enough.\"\n\nI looked Stacey over. I couldn't believe Mark had dropped her off naked at my front door, but Mark did like to pimp her out.\n\n\"Mark said to make sure he got a copy of the video,\" Stacey said.\n\nShe rubbed my cock for a few minutes, then moved to the floor on her knees and pulled my pants down. I watched Stacey give me a blowjob for a while before she finally stood.\n\n\"Stacey, would you like to do some modeling for me?\"\n\n\"Sure!\"\n\n\"Could I take some pictures of you in lingerie and use them in some advertisements?\"\n\n\"Sure!\"\n\nI took her hand and led her to the bedroom downstairs.\n\n\"What are the advertisements for?\" She asked.\n\n\"Dawn and I are starting a studio shooting lingerie pictures.\"\n\n\"Oh, cool! Nudes too?\"\n\n\"If you want to.\"\n\n\"Sure!\"\n\n\"You wouldn't mind them being on the internet?\"\n\n\"Of course not.\"\n\n\"Even nude?\"\n\n\"Sure. What do you want for your birthday?\"\n\n\"I want to eat you.\"\n\n\"Sure!\"\n\nStacey moved to the bed and leaned back. I crawled between her legs and went to work on her pussy. I always enjoyed going down on Stacey because she screamed so much.\n\nI spent about an hour driving her to as many orgasms as I could. She would scream at the top of her lungs when she would come, but she never asked me to stop.\n\n\"Let me get you something to drink,\" I told her as she lay there panting.\n\nI went to the kitchen and poured her a glass of wine. She sat up on the bed, sipping her wine.\n\n\"What are you doing for your birthday?\" She asked.\n\n\"Nothing, I hope.\"\n\n\"You are supposed to do me.\"\n\n\"Who put you up to this?\"\n\n\"Uhh, Mark just told me what to do.\"\n\n\"I see.\"\n\nStacey moved to me and grabbed my cock.\n\n\"Now this,\" she said.\n\n\"You must be in a hurry.\"\n\n\"No.\"\n\n\"We have all morning,\" I told her.\n\n\"Okay!\"\n\n\"Come with me.\"\n\nI took Stacey's hand and walked her to the den and sat her on the sofa.\n\n\"You want some more wine?\"\n\n\"I'm good. What do you want, James?\"\n\n\"I want to watch you get yourself off, please.\"\n\n\"Okay!\"\n\nStacey pulled her legs up and spread them as I watched. I watched her finger her pussy for a long time as she got off several times.\n\n\"Is that what you wanted?\" She asked.\n\n\"Oh, yes. You look hot doing that.\"\n\n\"Thanks.\"\n\nStacey stood and moved and sat next to me. She pulled my short of then she got down on the floor and slid her mouth over my hard cock. I watched her for a long time.\n\n\"Is that enough?\" She asked, looking up.\n\n\"Oh, yes.\"\n\nStacey stood and straddled my legs and put her knees up on the sofa. She grabbed my cock and worked it into her pussy and slid all the way down slowly.\n\n\"Happy Birthday!\"\n\nI squeezed her large tits as she worked her pussy on my cock. Stacey didn't care how she got off, as long as she got off, many times.\n\nShe fucked my cock for a long time as she moaned. She would place her hands over mine and help me squeeze her tits.\n\n\"I'm coming!!\" She screamed.\n\nShe drove her pussy onto my cock as she came and screamed.\n\n\"Oh, that was good. Ready for more?\" She asked.\n\n\"Sure.\"\n\nStacey went back to work, thrusting her pussy on my cock. I was twisting her nipples as she worked her pussy.\n\n\"Harder!\"\n\nI pinched her nipples hard and twisted.\n\n\"Ahhh! Yes!\"\n\nStacey fucked my cock until she came again, screaming.\n\n\"Oh, yes! That was great!\"\n\n\"You want something to eat?\" I asked.\n\n\"That would be good.\"\n\nStacey climbed off my cock and stood. I got up and walked her to the kitchen and got her some more wine and got out some fruit. While we were snacking the phone rang.\n\n\"Hello?\"\n\n\"Dr. Smith?\"\n\n\"Yes.\"\n\n\"Hey, this is Bob at the camera store.\"\n\n\"Hey, Bob.\"\n\n\"I just got that lenses for you enlarger that was left out of the order.\"\n\n\"Good. I'll stop by and get it.\"\n\n\"Well, my son is coming out that way, I thought I would just have him drop it off, so you don't have to make a trip.\"\n\n\"That would be okay.\"\n\n\"How about an hour?\" Bob asked.\n\n\"Fine.\"\n\n\"I'll tell him.'\n\n\"Hey, Bob? Is this your older son?\"\n\n\"Yes. The one in college.\"\n\n\"Okay, just tell him to buzz me from the gate.\"\n\nI hung up.\n\n\"Someone coming?\" Stacey asked.\n\n\"Delivery.\"\n\nWe snacked for a bit longer.\n\n\"What would you like for me to do now?\" Stacey asked.\n\n\"I have always wanted to tie you up, Stacey.\"\n\n\"Cool!\"\n\n\"Can I?\"\n\n\"Sure!\"\n\n\"Come with me.\"\n\nI led Stacey back to the big bedroom downstairs. I went to the closet and got out some silk scarfs that we rarely used. Stacey was smiling as she laid back on the bed.\n\nI took my time tieing her arms and legs to the corners of the bed.\n\n\"This is fun!\"\n\n\"Does Mark tie you up?\"\n\n\"All the time.\"\n\n\"Then what does he do?\"\n\n\"He just ties me up and fucks me. Sometimes he leaves me tied up for a long time.\"\n\n\"Are you still fucking his clients?\"\n\n\"Oh, yes.\"\n\n\"You like that?\"\n\n\"All I can get, you know that, James.\"\n\n\"Dawn won't let me tie her up.\"\n\n\"That's too bad.\"\n\n\"Can I blindfold you?\"\n\n\"Sure!\"\n\nI took a black scarf and blindfolded Stacey.\n\n\"I'll be right back, Stacey. I am going to get my camera.\n\n\"Cool!\"\n\nI went to my study and grabbed my camera. I went back to the bedroom and took some pictures of Stacey tied up. After that, I got between her legs and slid my cock into her.\n\n\"Ahhh, yes!\"\n\nI took my time slowly fucking Stacey until she came several times. She seemed to be getting off on being tied up.\n\nThe intercom buzzed.\n\n\"Be right back, Stacey.\"\n\nI went to the intercom and let Bob's son in. I grabbed a robe from the closet and waited at the door. He pulled up and got out with a box and came to the door.\n\n\"Dad said you needed this,\" he said.\n\n\"Thanks for bringing it.\"\n\n\"No problem.\"\n\n\"Do you need to get back?\" I asked.\n\n\"No, I was heading home.\"\n\n\"If you have a few minutes, can I get you to do something for me?\"\n\n\"I guess.\"\n\n\"I have my wife tied up on the bed...\"\n\n\"Oh, sorry, I didn't mean to interrupt.\"\n\n\"No, that's okay. She really likes for me to tie her up and blindfold her. She just told me one of her fantasies was to have some stranger fuck her while she is tied up.\"\n\nI paused to measure his response.\n\n\"Really?\" He asked.\n\n\"Yes. She is into kinky shit like that. Since you are here, would you like to do it?\"\n\n\"Your wife!\"\n\n\"Sure...if you don't mind if I watch?\"\n\n\"Seriously?\"\n\n\"Oh, it was just an idea. Thanks for bringing this...\"\n\n\"No...wait! Are you sure she is good with this?\"\n\n\"She is. She can't ever get enough cock. Maybe you can give it to her for a long time.\"\n\n\"That's all you want me to do?\"\n\n\"Just fuck her hard and long.\"\n\n\"Anything else?\"\n\n\"Don't talk to her. I want to see how long it takes for her to figure out it is not me.\"\n\n\"I guess.\"\n\n\"Come on in. I'll let you look first.\"\n\nI closed the door behind him and walked him to the bedroom. Stacey looked inviting with her big tits, now that she was tied to the bed.\n\n\"Are you back?\" Stacey asked.\n\n\"I'm back.\"\n\n\"Good!\"\n\nI looked at Bob's son and nodded toward Stacey. He smiled at me and started taking off his close. Once he was naked, I was happy to see he had a large cock. He climbed on the bed and ran his hands over Stacey's body for a few minutes. He leaned over and sucked on her nipples for a few minutes as she moaned.",
        "He sat up and grabbed his cock and leaned into Stacey and started it into her.\n\n\"Oh, yes! Fuck me now!\"\n\nHe slid all the way into her and started working his cock. I stood and watched as he took his time sliding his cock in and out of Stacey as she moaned. He sucked on her nipples while he kept going for a long time.\n\n\"Ohhh! I'm coming!!\" Stacey screamed and jerked under the guy. \"Fuck, me!! Fuck, me!!\"\n\nHe sped up and started driving his cock into Stacey.\n\n\"Yes!! Fuck me harder!!\"\n\nHe did. He kept driving his cock into Stacey as she screamed. She came again, and he kept going.\n\n\"Oh, fuck me more!! More!! More!!\"\n\nHe kept driving into Stacey. I was happy to see that he could please her.\n\n\"Oh, yes!! James!! Fuck me!! Fuck me!! Fuck me!!\"\n\nStacey came again, and he drove his cock in and held it.\n\n\"Of, fuck, James!! Come in me!!\"\n\nWhile he held his cock in her and rested, I got on my knees next to the bed by Stacey's head.\n\n\"Hey, Stacey...I'm not the one fucking you,\" I whispered in her ear.\n\n\"What! Oh, fuck, James!! What is happening!!\"\n\n\"You are getting fucked by a stranger.\"\n\n\"Oh, my god!!\"\n\nHe started driving his cock into her again.\n\n\"Oh, fuck, James!! This is so fucking hot!! Oh, fuck, yes!!\"\n\nHe kept driving into her as I stood. I picked up my camera and took several pictures.\n\n\"Ahhhh!! This is so fucking hot!!\" Stacey screamed.\n\nI watched him fuck her for about 15 more minutes. Stacey kept screaming as she came over and over.\n\n\"Fuck!! I'm coming again!! Come in me!!\"\n\nStacey started bucking her hips, and I heard him groan. He drove his cock into her and pumped her full of cum.\n\n\"Yes!! Yes!! Yes!!\" Stacey screamed.\n\nHe collapsed on top of her for a minute then pushed himself up.\n\n\"Thanks, you know where the door is,\" I said.\n\nHe left the bedroom.\n\nI untied the blindfold and took it off.\n\n\"Oh, James! Was that really a stranger!!\"\n\n\"Yes. Did you enjoy it?\"\n\n\"Oh, fuck, yes!! I have asked Mark to do that so many times!!\"\n\nI got between Stacey's legs and fed my cock into her cum filled pussy.\n\n\"Ohhhh, fuck!! Yes!!\"\n\nI worked my cock in Stacey hard and fast for a long time. She screamed she was coming three times as she thrust up into me.\n\n\"Ohhhh, James!! I'm coming!! Come in me, pleeeease!!\"\n\nStacey started jerking again. I jammed my cock in hard and pumped more cum into her.\n\n\"Ahhhhhh, yes!!\"\n\nI collapsed on top of Stacey as she moaned.\n\n\"Oh, that was fantastic.\"\n\nI pushed myself up and untied her. She jumped up and wrapped her arms around me and kissed me hard.\n\n\"Thank you, James!\"\n\n\"I think you liked that, Stacey.\"\n\n\"I have asked Mark to do that for a long time.\"\n\n\"Why hasn't he done it?\"\n\n\"He only wants to watch me fuck his friends and clients.\"\n\n\"That's too bad. You seemed to enjoy it so much.\"\n\n\"I did! I did! Who was it?\"\n\n\"I don't know, some delivery guy. I told him you were my wife.\"\n\n\"Oh, my god!\"\n\nShe hugged me again.\n\nI finally got her to the shower, and we cleaned up. We went to the kitchen, and I fixed her some lunch.\n\n\"James, don't tell Mark about this.\"\n\n\"I think you should.\"\n\n\"No. I want to keep this just for me.\"\n\n\"I'll see.\"\n\n\"James, will you have me come over and do this again sometime?\"\n\n\"I will if you tell Mark.\"\n\n\"I don't know. This was so much fun.\"\n\nWe ate lunch as Stacey kept asking me if I would do it again.\n\n\"How long are you staying?\" I asked.\n\n\"Mark said he would pick me up about 4:00. We have time for you to fuck me some more.\"\n\nWe ended up in bed again, and Stacey was deep throating me as I watched her. She sucked my cock for about 45 minutes before I filled her mouth full of cum. After that, we lay in the bed, talking and laughing.\n\nI had gotten her some more wine about 3:00, and we were drinking it.\n\n\"James, make me a video of that guy fucking me, and I will give it to Mark. Maybe he will let me do it again.\"\n\n\"I think he will, Stacey.\"\n\n\"That was so hot.\"\n\nWe sat and drank our wine and talked for about thirty minutes.\n\n\"Mark will be here in about thirty minutes,\" I said.\n\n\"Tie me up again, so he can fuck me that way...but...I want him to see your cum dripping out of me.\"\n\n\"I like that idea.\"\n\nI took Stacey back to the bedroom and tied her to the bed again. I was hoping Dawn would come home soon and see how much I liked doing this.\n\n\"James...will you invite me over again and maybe...find a couple of strangers?\"\n\n\"If that is what you want, Stacey.\"\n\n\"That would be so fucking hot!!\"\n\n\"How about a strange woman?\"\n\n\"How about both! At the same time!\"\n\n\"I'll see what I can do.\"\n\nI played with Stacey's tits for a few minutes then started playing with her pussy. I was fingering her clit hard when the intercom buzzed again.\n\n\"What is that?\" Stacey asked.\n\n\"Someone at the gate. I'll be back. It is probably Mark.\"\n\n\"He has the code.\"\n\nI went to the intercom in the den.\n\n\"Yes?\"\n\n\"UPS.\"\n\n\"Okay, can you bring it up to the house?\"\n\n\"Sure, Dr. Smith.\"\n\nI buzzed him through the gate.\n\n\"Stacey, I'll be right back! It's UPS!\"\n\n\"James! See if he will fuck me!\" Stacey yelled.\n\nI grabbed my robe again and opened the door and waited as the truck drove up. He jumped out, walked to the door.\n\n\"Hey, Todd,\" I said.\n\n\"Hey, Dr. Smith. It is for Dawn, it is one of her packages from some other country,\" he said, handing me the small box.\n\n\"Thanks.\"\n\n\"Did I wake you up?\" He asked.\n\n\"No, I was fucking someone.\"\n\n\"Oh, tell Dawn I'm sorry.\"\n\n\"It's not Dawn. It's one of her friends.\" Todd knew about Samantha and Amy.\n\n\"Really?\"\n\n\"Yes. Is this the end of your route as usual?\"\n\n\"Yes, you are the last house.\"\n\n\"Hey, Todd. Her friend is a little crazy. She likes to be tied up and have strange guys fuck her.\"\n\n\"Seriously!\"\n\n\"Yes. I just tied her up and was about to fuck her. I bet she would get off on you doing it.\"\n\n\"What?\"\n\n\"Come on in. You can fuck her.\"\n\n\"Dr. Smith, is your wife here?\"\n\n\"No, you are not going to get to see her naked again, Todd.\"\n\n\"She knows you are doing this?\"\n\n\"Yes, Dawn had her come over.\"\n\n\"That must be nice.\"\n\n\"If you are finished for the day, come on in.\"\n\n\"Are you sure?\"\n\n\"Yes. She will really get off on it.\"\n\n\"Maybe,\" Todd said.\n\nDawn and the girls had teased Todd plenty going to the door naked when he dropped off things.\n\n\"Come on in.\"\n\nTodd finally came into the house, and I closed the door.\n\n\"Is he going to do it!\" Stacey yelled.\n\n\"If you can talk him into it!\"\n\n\"I can!\"\n\n\"Come on,\" I told Todd.\n\nI walked him to the bedroom. He stood and looked at Stacey tied to the bed.\n\n\"You want to fuck me?\" Stacey asked.\n\n\"Sure!\"\n\nTodd didn't waste any time taking off his brown uniform. He stood and looked at Stacey as she smiled at him.\n\n\"And this okay?\" He asked again.\n\n\"Only if you fuck me hard!\" Stacey said.\n\nTodd got between her legs and slid his cock into her.\n\n\"You better fuck me nice and hard!\" Stacey yelled.\n\nI watched Todd fuck Stacey for a while. She was getting into it again.\n\nI heard the doorbell. I walked back to the front door and opened it.\n\n\"Hi, Mark.\"\n\n\"Did you enjoy your birthday present!\" He asked, laughing.\n\n\"Oh, several times. Thanks.\"\n\n\"Is she ready to go?\"\n\n\"Not right now. The UPS guy is fucking her.\"\n\n\"What?\"\n\n\"He was dropping off something for Dawn, and I asked him if he wanted to fuck your wife.\"\n\n\"Seriously?\"\n\n\"Hey, it's my birthday. I wanted to watch your wife being fucked for my birthday.\"\n\n\"Damn, James!\"\n\nI led him to the bedroom. He stood and watched Todd drive his cock into Stacey.\n\n\"Your wife seems to be having a good time.\"\n\nWe stood and listened to Stacey scream through several orgasms as Todd thrust into her.\n\n\"That's hot,\" I heard Mark mumble.\n\nWe stood until Stacey screamed several more time.\n\n\"Come in me!! I'm coming!!\"\n\nWe heard Todd groan, and he jammed his cock into Stacey.\n\n\"Ahhh!! Yes!!\"\n\nTodd collapsed on top of Stacey.\n\n\"Oh, hi, honey,\" Stacey said, looking over at Mark.\n\n\"Are you having a good time?\" He asked.\n\n\"Oh, yes!\"\n\nTodd turned and looked behind him.\n\n\"What are you all looking at?\" I heard Dawn ask.\n\nShe looked around Mark.\n\n\"Hey, Todd,\" Dawn said. \"You two are perverts.\"\n\nTodd pushed himself up and off of Stacey. He got off the bed and stood looking.\n\n\"I was going to fuck her now, Mark, but you can,\" I said.\n\nMark started taking off his clothes. Todd was picking up his uniform when Mark got between Stacey's legs.\n\n\"That's her husband?\" Todd asked.\n\n\"Yes, fucked up, isn't it,\" I said and laughed.\n\nTodd and I stood and watched Mark fuck Stacey for a while.\n\n\"What are you watching now?\" Dawn said.\n\n\"Mark.\"\n\n\"Todd, would you like something to drink?\" Dawn asked.\n\n\"Oh, sure.\" He tried to put his pants on.\n\n\"Don't worry about the clothes,\" Dawn said as she walked off.\n\nTodd held his clothes, and he and I walk to the den.\n\nDawn was walking back with a soda.\n\n\"That was supposed to be your birthday present,\" Dawn said.\n\n\"Oh, it was. Several times,\" I said.\n\nDawn shook her head and walked back to the kitchen. Todd and I walked to the bar and sat down. Dawn handed me a beer.\n\n\"My birthday, I'll get what I want,\" I said.\n\n\"Oh, really,\" Dawn said.\n\n\"Who's car, and why is the UPS truck parked out front?\" We heard Amy say. \"Oh...\"\n\n\"Your husband was sharing his birthday present with Todd,\" Dawn said.\n\n\"Oh!\" Samantha exclaimed. \"Well Todd, did you enjoy it?\"\n\n\"Oh, yes.\"\n\nThe girls came to the bar and looked at Todd and smiled.\n\n\"Is that Mark fucking her now?\" Amy asked.\n\n\"Yes.\"\n\n\"Your husband seems to think he can do what he wants on his birthday,\" Dawn said.\n\n\"That's okay,\" Samantha said as she sat next to Todd. \"What else do you want for your birthday?\"\n\n\"I'm in a sharing mood today, so you three take your clothes off.\"\n\nSamantha smiled at me.\n\n\"James...\" Dawn moaned. I looked at her. \"Okay!\"\n\nDawn started taking off her clothes as Todd watched.\n\n\"Oh, fuck!! I'm coming!!\" We heard Stacey scream.\n\nSamantha didn' waste anytime taking off her clothes.\n\n\"What are you all doing?\" Amy said from the bedroom door.\n\n\"James wants us to take off our clothes!\" Samantha exclaimed and laughed.\n\nI turned and watched Amy take off her clothes. Once she was naked, she went into the bedroom.\n\n\"Okay, smartass, what do you want for your birthday now?\" Dawn asked as she stood there naked.\n\nTodd was looking her over closely while he had the chance.\n\n\"I'm still in a sharing mood so you can suck Todd's cock, honey.\"\n\nDawn smiled.\n\n\"Oh, wait, I don't know about this,\" Todd said.\n\nDawn kept smiling as she walked around the bar and stood next to Todd. Dawn took his hand and made him stand. She then got down on her knees and stroked his hard cock as he watched. Samantha giggled.\n\nI watched Dawn for a minute, then she looked up and me and slid her lips over his cock.\n\n\"Oh, wow!\" Todd exclaimed.\n\nI sat and watched Dawn suck Todd's cock for a few minutes. She was working her mouth all the way down as Todd watched.\n\n\"Ahh...\" Came from Todd.\n\nDawn sucked on his cock for a long time as I watched. She slid her mouth off and looked up at me.\n\n\"Is that all you want me to do, honey?\" Dawn asked.\n\n\"You know what? I would like to watch you fuck him, honey.\"\n\n\"What!\" Came from Todd.\n\nDawn stood as she smiled. She took Todd's hand and walked him to the den. I watched as she had him sit on the sofa. Dawn then straddled his legs and worked her pussy over his cock.\n\n\"What do I get to do for you?\" Samantha asked.\n\nI smiled at her.\n\n\"Are you going to come and watch?\" Dawn asked from the den.\n\nI got up and went to the den. I sat next to Todd on the sofa. Dawn grabbed his cock and worked the end into her pussy as she looked at me. She slowly lowered herself all the way down as I watched her smile at me.\n\n\"Like this?\" She asked.\n\n\"Yes, honey, but I want to watch you fuck him for a very long time.\"\n\n\"I see. I think I can do that.\"\n\nDawn worked her pussy on Todd's cock and settled. I watched Samantha sit on Todd's other side.\n\nDawn began to slowly work her pussy as we watched. Stacey screamed a few more times.\n\n\"Like this, honey?\"\n\n\"Just like that.\"\n\nDawn returned her attention and focus to Todd. She slowly worked her pussy as he looked at her tits. Dawn reached for Todd's hands and took them and placed them on her tits.\n\nSamantha and I watched Dawn fuck Todd for a long time. Stacey had gotten quiet. Todd was squeezing Dawn's tits when she pushed on into his mouth, then looked at me and smiled.\n\n\"What happened to Stacey?\" I heard Samantha ask.\n\nI looked up, and Mark was standing there watching.\n\n\"Amy is sitting on her mouth,\" he said.\n\nMark stood and watched Dawn fuck Todd for a while.\n\n\"I thought it was your birthday?\" Mark said.\n\n\"I'm sharing,\" I said.\n\n\"I hope you share with me.\"\n\n\"That would only be fair after you shared your wife.\"\n\nMark had always enjoyed fucking Dawn.\n\nDawn was getting into fucking Todd, and I knew she would make sure he didn't come. We all watched Dawn as she wiggled her sexy body.\n\n\"Oh, fuck, yes!!\" We heard Amy scream.\n\n\"Oh...fuck...yes...\" came from Dawn.\n\nShe jerked several times, then came hard.\n\n\"Ahhhhhhhh!!\"\n\nDawn kept working her pussy as Todd sucked on her nipples. She grabbed his head and pulled him to her breast hard.\n\n\"Emmmmmmm.\"\n\nDawn looked at me and winked.\n\nWe all watched Dawn. Amy finally walked out of the bedroom.\n\n\"Where is Stacey?\" I asked.\n\n\"Tied up.\"\n\nDawn was now driving her pussy onto Todd. She kept going hard as she held Todd's mouth on her nipple.\n\n\"Oh, fuck!! Yes!!\" Dawn cried out and came again.\n\nShe kept thrusting her pussy onto his cock hard.\n\nDawn had her eyes closed and was getting into it, I could feel her.\n\n\"Ahhhhhhh!! Fuck!! Come in me, Todd!!\" Dawn screamed and pulled him off her tit.\n\n\"Ahhhhhh!!\" Todd screamed and tried to drive his cock into Dawn.\n\n\"Yes!! Fill me full of cum!!\" Dawn screamed.\n\nTodd and Dawn both screamed.\n\nDawn settled and looked at Todd. He was breathing very hard.\n\n\"Was that good, Todd?\" Dawn asked.\n\n\"...yes...\"\n\nDawn sat on his lap for a few minutes before she stood.\n\n\"Todd, you better lay down,\" Dawn said.\n\nTodd fell to his side.\n\n\"We better check on Stacey,\" Dawn said as she walked toward the bedroom.\n\nI looked at Samantha and winked at her, and she smiled.\n\nI went with Dawn and Mark to check on Stacey.\n\nDawn crawled up on the bed and looked at Stacey.\n\n\"Are you okay?\" Dawn asked as she held herself up on her hands and knees.\n\n\"Oh, I'm perfect.\"\n\n\"Do you want us to untie you?\"\n\n\"If everyone is finished with me,\" Stacey said. We all laughed.\n\nI looked at Mark, and he was looking at Dawn's ass as all the cum ran out of her pussy. \n\n\"Do it, Mark,\" I said.\n\nHe quickly got on the bed behind Dawn and grabbed his hard cock and slid it into Dawn.\n\n\"Ahhh!\" Came from Dawn as she looked behind her.\n\nMark grabbed Dawn's ass and started working his cock in her hard.\n\nDawn looked at me and rolled her eyes and smiled.\n\nAmy and I watched Mark fuck Dawn for a while.\n\n\"We better go and check on your sister,\" I said.\n\nWe walked back to the den, and Samantha had Todd on his back and was working her pussy on his mouth. Dawn had done a number on him because his cock was sticking straight up.\n\n\"Is it my turn?\" Amy asked me.\n\n\"Sure, honey.\"\n\nAmy straddled Todd's hips and grabbed his cock. I watched as she slid it into her pussy and settled down.\n\n\"You two enjoy,\" I said.\n\nI went back to the bedroom. Mark was driving his cock into Dawn. Dawn was moaning as Mark fucked her.\n\nI got on my knees in front of Dawn. She looked up and smiled, then slid her mouth over my cock. \n\n\"Wow!\" Stacey said.\n\nDawn deep throated me as Mark shoved. My cock would go down her throat each time Mark pushed. We had a good time for a while until Mark screamed and pumped Dawn full of cum. He then collapsed behind her. \n\n\"I guess we better get cleaned up and go,\" Mark said.\n\n\"You may as well stay for dinner,\" Dawn said, taking a break.\n\nMark untied Stacey, and they headed to the bathroom.\n\nDawn laid on her back and pulled her legs up. I got between her legs and slid my cock into her slippery pussy. Dawn wrapped legs behind my back and her arms around my neck.\n\n\"I like your birthday so far,\" she said.\n\nI kissed her a minute then started driving my cock into her.\n\n\"You are horny,\" I said.\n\n\"You know I get off on how you feel when you watch.\"\n\nDawn moaned and groaned for about half an hour as I drove my cock into her. Her energy felt wonderful and intense. I would kiss her more and thrust into her.\n\n\"Oh, god, yes...more, honey.\"\n\nDawn and I were connected and enjoying each other's energy Dawn was looking into my eyes, and we were lost in our own time.\n\n\"Fuck!! I'm coming!!\" Dawn screamed.\n\nI felt her rush of energy\n\n\"Ahhhhhh!!\" We both screamed and started coming.\n\nI filled Dawn fill of cum and fell on top of her as she held me.\n\n\"Emmmmm...I love you,\" Dawn said.\n\n\"I love you too.\"\n\nI kissed Dawn then rolled next to her.\n\n\"Smells like they are cooking,\" I said.\n\n\"Let's get cleaned up.\"\n\n*****\n\nMark and Stacey were sitting at the bar, talking to Samantha and Amy as they cooked. Dawn and I walked to the kitchen.\n\n\"What happened to Todd?\" Dawn asked.\n\n\"We killed him,\" Samantha said and laughed.\n\n\"He left,\" Amy said.\n\n\"James, did you really let two strange guys fuck Stacey?\" Mark asked.\n\n\"Yes, and she enjoyed it. You need to let her do that.\"\n\nStacey hugged Mark.\n\nWe all talked and laughed until after dinner.\n\nMark took Stacey with him, and they left.\n\n\"Did you like your birthday present?\" Samantha asked.\n\n\"So far,\" I said.\n\nWe all went to our bed later.\n\n*****\n\nThey were still teasing me about Stacey at breakfast.\n\n\"You three are going to get into trouble,\" I told them, and they laughed.\n\n\"I am heading to my Chemistry class,\" Samantha said. \"James, stay out of trouble today!\"\n\n\"Say hi to Rick,\" Dawn said.\n\nI helped Amy and Dawn clean up after breakfast.\n\n\"I have got to go to the store, we are out of everything,\" Dawn said.\n\n\"How long will you be gone?\" Amy asked.\n\n\"Two or three hours.\"\n\n\"I'll go with you.\"\n\nThe two of them put some clothes on and left in the Escalade. \n\nSince I hadn't gotten anything done yesterday, I headed back down to my darkroom. By 9:30, I had the new enlarger set up. I took a break and went upstairs to grab a soda.\n\n\"There you are,\" I heard.\n\nI looked in the den, and Katrina was lying on the sofa, naked sipping wine.\n\n\"When did you come in?\"\n\n\"A while ago. I have been waiting for you.\"\n\n\"Let me guess. The girls had you do this?\"\n\n\"I just heard your birthday was tomorrow,\" she said as she got up and walked to me. \"You said I could come by anytime.\"\n\n\"I did.\"\n\nI was always happy to see Katrina, especially naked.\n\n\"When are you going to do my photos?\" She asked.\n\n\"I wanted to wait until the leaves started falling off the trees so we can shoot some outside. How about the weekend before Thanksgiving?\"\n\n\"Sounds good. Will you get me some more wine, please?\"\n\nI poured Katrina another glass of wine as she sat at the bar. I looked at her long, auburn hair and perfect tits.\n\n\"What are the girls doing for your birthday?\"\n\n\"I'm sure you know more about that than I do, Katrina.\"\n\nKatrina smiled and sipped her wine.\n\n\"Now why would I know anything about that?\"\n\nI poured myself a glass of wine, and we sat and talked until we finished the glass. Katrina stood and took my hand and led me up to my bedroom.\n\n\"How is it going with the girls?\" She asked.\n\n\"It is going well.\"\n\nKatrina stood and removed all of my clothes. She kissed me, and we moved to the bed.\n\n\"Take your time with me,\" Katrina said.\n\n\"I always do, but you let me know what you want.\""
    ],
    "authorname": "drmac100",
    "tags": [
        "dawn",
        "james",
        "lottery",
        "redheads",
        "samantha"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/life-after-the-lottery-ch-65"
}
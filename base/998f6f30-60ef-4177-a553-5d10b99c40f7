{
    "title": "Perfect Stranger, Strangely Perfect Ch. 03",
    "pages": [
        "Hi there! All of my stories are written to provide a slow but satisfying build. If you are looking for hot sex, straight out of the traps, this is probably not for you :-)\n\n---------\n\nTrudy was awoken by a loud dawn chorus the following morning and realised that any further sleep was highly unlikely. She hadn't been sleeping well since her break-up with Simon and now her brother's strong, safe, comforting presence was no longer in the house, she doubted that she'd ever sleep well again.\n\nHaving wrapped herself tightly in a fleecy dressing gown, she wandered into the kitchen to be immediately confronted by memories of Eddie; both the scrap of paper displaying his telephone number and his embroidered handkerchief still lay on the table. Trudy smiled at the memory of their evening together and what a thoroughly nice man he had turned out to be. It was so rare to find somebody on your exact wavelength who found the same things as funny as you did and in whose company you could completely relax. Picking up her mobile phone, Trudy stored Eddie's number in her contacts and contemplated whether to text him. On reflection, she decided that she would, knowing that nothing would happen between them for two reasons. Firstly, her heart was broken and she vaguely remembered making half-hearted comments last night about becoming celibate and steering clear of men in the future, which probably wasn't a classic seduction technique. Secondly, Eddie was one of the sexiest men she had ever laid eyes on and, despite apparently being heterosexual, there was no way he'd ever be interested in her; plain old Trudy.\n\nFlicking her phone open, she typed out a short message.\n\n\"Thank you so much for last night. I had a great time. I hope you got home safely. Trudy x\". There, simple and to the point she thought to herself.\n\nPutting her phone down on the table, she flicked the switch on the kettle and then went to have a shower. It was only when she had washed, dressed and returned to the kitchen for breakfast that she noticed her phone flashing at her. Heart leaping, she grabbed it, scrolling quickly through to the messages.\n\n\"Good morning Trudy Williams! As it's Sunday, you don't happen to be free do you? I was going to take a drive down to the coast and wondered if you'd like to join me for a day out? Eddie x\"\n\nTrudy felt her face flush in pleasure and expectation. Her sweating hands typed back a short reply in the affirmative and within the hour, his battered Landrover was once again sitting outside her front door. Grabbing her keys and bag, Trudy locked up the house and made her way towards Eddie, a huge grin plastered across her face.\n\n'Good morning,' said Trudy shyly.\n\n'Good morning to you,' grinned Eddie, holding the passenger door open for her. As she settled herself in, Eddie hopped back into the driver's seat, strapped on his seatbelt and they pulled away. Trudy acknowledged how he looked much more casual today, although no less attractive, in Levi jeans, Timberland boots, a T-shirt and a fleece. It wasn't dissimilar to what she was wearing herself; she was an outdoor girl at heart and flouncing around in a bridesmaid dress yesterday had been well outside her comfort zone.\n\n'So, are you ready for a fun day out, Trudy?' he grinned, casting a quick, appreciative glance at her, before his eyes returned to the road ahead.\n\n'Definitely,' nodded Trudy. 'What's the plan?'\n\n'Well, on our way to the coast, a mate of mine has an off-road Landrover trail,' explained Eddie. 'If you'd like, we could drop in there and you could have a go at driving this contraption off-road?'\n\n'Really?' asked an excited Trudy. 'That sounds awesome!'\n\n'It is,' laughed Eddie, delighted by her enthusiasm. 'And then I thought we'd head on down to the coast for a fish and chips lunch followed by a nice walk along the beach.'\n\n'That sounds perfect,' smiled Trudy, pleasurably inhaling the summer air, permeating through the open windows.\n\n'I haven't finished yet!' complained Eddie. 'Then we've got to hit the arcades.'\n\n'I haven't been on the penny machines for years!' giggled Trudy. 'Oh, this is going to be the best day ever!'\n\n'Then, if you're up for it, there's an outdoor activity centre in the New Forest, which has zip lines, rope swings and tree climbing which I've always fancied trying. Afterwards, we'll find somewhere nice for dinner and then I'll drive you back home. Okay, I've finished now,' grinned Eddie.\n\n'Thank you, Eddie,' said Trudy seriously. 'If you're doing this to cheer me up, you've already succeeded.'\n\n'I'm not doing it to cheer you up,' replied Eddie. 'I thought we both deserved a fun day out together. We're young and free and I thought it was about time we acted like it!'\n\n'Taking one day out of our mundane lives?' giggled Trudy.\n\n'Something like that,' agreed Eddie. 'Do you see your life as mundane then?'\n\n'Yeah, sometimes,' sighed Trudy. 'Most of the time actually, if I'm honest. I seem to be on a permanent treadmill yet achieving very little.'\n\n'Well, not today,' ordered Eddie. 'Today, you are going to be extraordinary.'\n\n--------\n\n'Thank you again,' smiled Trudy many hours later. They had been off-roading, swung from trees, walked along the pier, enjoyed ice creams and candy floss, built sandcastles on the beach, walked along a cliff edge trying to spot different types of seabird and chatted continuously. Trudy now found herself in a restaurant which she was quite surprised they were even permitted to sit down in, given their rather scruffy clothing. Their jeans and fleeces certainly stood out in sharp contrast to the suits and dresses which surrounded them, but Eddie seemed oblivious to it and so Trudy followed his lead.\n\n'Any time,' said Eddie seriously as a waiter came up to their table. 'Just the bill, please,' he requested.\n\n'Certainly, Sir.'\n\n'Please let me pay for this,' begged Trudy, reaching for her bag and only hoping it wouldn't completely clear out her spare funds for the month. 'You've paid for everything today.'\n\n'No, Trudy. I insist. This is on me.'\n\n'Eddie...'\n\n'How about you pay next time?' he suggested, as the waiter returned and Eddie typed his pin number into the credit card machine. She nodded happily, thrilled that there would be a \"next time\". As the waiter handed the card back to Eddie, Trudy tried, without success, to read his full name but all she managed to see was a quick glimpse of a shiny gold bank card.\n\n'Deal. Thank you,' she agreed, once the waiter had left them.\n\n'You're welcome, Sweetheart. Come on, let's get you back home.'\n\n--------\n\nLater that evening, the two of them were curled up at opposite ends of Trudy's sofa, chatting contentedly. There was a pause in conversation and Trudy, gathering all of her courage, looked up into Eddie's eyes.\n\n'Eddie, please may I have another cuddle?' He hesitated for a moment.\n\n'Here?'\n\n'Yes, here,' confirmed Trudy.\n\n'Of course,' he replied, opening his arms. Trudy shuffled her way across to him, lay her body beside his and placed her head on his chest. Pleasure flooded through her at the feel of his warmth, the rise and fall of his chest and the slow, steady beat of his heart. Wrapping her arms around Eddie's strong, muscled form, she closed her eyes in utter contentment. After the busy, activity-packed day they had experienced, it wasn't long before they were both falling asleep.\n\nLater, Trudy woke with a start, knocking Eddie out of his slumber at the same time. Glancing at the clock, she could see it was nearly midnight.\n\n'Mmmm,' groaned Eddie, arching his back. 'We must have dozed off.'\n\n'Yes,' sighed Trudy, snuggling up closer to his body. Daringly, she moved her head to face him, his features cast in shadow by the dim light of the room.\n\n'Everything alright?' asked Eddie, reaching out to gently stroke a strand of Trudy's hair behind her ear.\n\n'Uh-huh,' she murmured, reaching out to run her fingers gently down his stubbly face.\n\n'Trudy,' said Eddie in a warning tone. \n\n'Yes,' she sighed, wriggling up so their faces were at the same level.\n\n'Whatever you're thinking, it isn't a good idea.'\n\n'You don't know what I'm thinking. It could be an amazing idea.'\n\n'I know exactly what you're thinking and seducing me is not a good idea,' said Eddie, shaking his head.\n\n'Why not?' asked Trudy breathily.\n\n'For one thing, you agreed that in the future, you wanted to take time to be friends first, before anything else happened.'\n\n'You are my friend,' argued Trudy.\n\n'Yes, but only since yesterday,' smiled Eddie kindly.\n\n'Any other reason?'\n\n'You're still hurting from your ex. That is a very bad place to begin a new relationship from,' explained Eddie. 'For both of us. I don't want to be used as a rebound.'\n\n'How do you mean?'\n\n'When I'm with you, I can see flashes of a strong, independent woman whose confidence has taken a knock. You need to concentrate on getting her back first, before you worry about any kind of relationship with anybody else. Then, if something happens between us in the future, I can be more confident that it's really me you want.'\n\n'You just don't fancy me,' said Trudy dejectedly. 'It's fine. There's no reason you should.'\n\n'Don't say that. Please,' requested Eddie. 'Can't we just enjoy each other's company, have some fun together, and see how things go?'\n\n'Sure,' agreed Trudy quietly. A silence fell between them.\n\n'Trudy,' murmured Eddie eventually. 'Do you really think I'm not attracted to you?'\n\n'In my mind,' sighed Trudy. 'If somebody fancies you, they don't reject your advances.'\n\n'But you've told me that you've experienced a host of losers up until now. They might jump you, the second you show the slightest bit of interest, but that's not how I operate. I'm different.'\n\n'So, what is your reason for rejecting me?' asked Trudy sadly.\n\n'Firstly, I can assure you that I'm not rejecting you. Secondly, my concern is that if I started to kiss you, I don't think I'd ever be able to stop,' sighed Eddie, his eyes boring into Trudy's. 'And I don't want to rush us into anything.'\n\n'Oh,' she said in shock, her mouth forming a perfect O. By this point, adrenaline was surging around Trudy's body and she was aware of a heavy pulse beating between her legs. Time stopped as their gazes became aligned, penetrating deep into the other's soul.\n\n'Perhaps, if we make a pact?' murmured Eddie, shifting his body around to face Trudy properly. 'We can kiss, but absolutely nothing else happens.'\n\n'Until when?' groaned Trudy, desperate to feel his tongue slide against hers and his undoubtedly capable hands stroking her body.\n\n'Until we both agree,' sighed Eddie, scrunching his fingers through Trudy's short hair, pulling gently and causing her to quiver in his arms.\n\n'Deal,' croaked Trudy.\n\n'But what about your vow of celibacy?' smiled Eddie, blowing gently on her neck. 'And your plan to steer clear of men altogether in the future?'\n\n'Just a working hypothesis that I've since rejected,' whispered Trudy, overcome by the delicious sensations he was already causing in her body, without even touching her.\n\n'Okay, deal,' he groaned, bowing his head and gently kissing across her collar bone to the edge of her exposed shoulder. Trudy exhaled a deep, breathy sigh which she had no control over. Tracing a path of delicate butterfly kisses up her neck, Eddie then moved across to her ear lobe and pulled it into his mouth, gently biting down with his teeth. Trudy's body, already on high alert, flinched with desire at the incredible feelings he was creating within her. Heat rushed simultaneously to her breasts and core as she reacted to his gentle touch. When Eddie's long fingers wound around the back of her neck, he gently stroked until she groaned with uncontrolled longing.\n\nKissing a path up her cheek, across her forehead and over her eyes, murmuring endearments as he went, Trudy suddenly felt like the most adored person on the planet. Annoyingly, she could feel tears welling up in her eyes at the raw emotion Eddie was encouraging her to feel. Clocking one of the tears, Eddie wiped it away with the ball of his thumb, leant back and looked tenderly into Trudy's eyes.'We should stop,' he said quietly.\n\n'God, please, no,' she begged.\n\n'Why are you crying?'\n\n'I've never felt like this before,' she replied shyly. 'I didn't realise I could feel like this. Like I'm the most special girl in the world.'\n\n'You are. But you need time,' he stated.\n\n'Eddie, please,' begged Trudy, silent tears starting to flow in earnest across her flushed cheeks.\n\n'No, Sweetheart,' insisted Eddie, pulling her into a huge bear hug. 'I know you don't agree, but I can see that you're still hurting and very vulnerable.'\n\n'Please will you stay with me tonight?' asked Trudy quietly, desperately trying to stem the flow of tears and suppress her overwhelming feeling of disappointment.\n\n'I have to start work ridiculously early tomorrow,' sighed Eddie. 'I have a flight to catch.'\n\n'I don't care,' replied Trudy. 'Please can you just stay as long as you are able to?'\n\n'Yes, okay,' smiled Eddie. 'If Tom has some pyjama bottoms I can borrow?'\n\n--------\n\nTrudy lay waiting in her double bed in nervous anticipation. As Eddie's footsteps made their way up the corridor and her bedroom door squeaked open, she realised she was holding her breath. Wearing nothing on his top half, Trudy saw for the first time the delightfully toned, well-muscled body Eddie had been hiding beneath his layers of clothing, rounded off with a spattering of downy hair on his chest. His hair was tousled and he had a slightly twisted smile on his face, apparently aware of what thoughts were racing through Trudy's mind as her wide eyes drank in the sight of him. Lowering himself under the covers, he set the alarm on his phone, turned off the bedside light and shuffled towards Trudy. As Trudy snuggled back against his body she sighed with happiness.\n\n'Trudy,' growled Eddie, turning around to switch the light back on. 'What the hell do you think you're wearing?'\n\n'My nightclothes,' replied Trudy. Granted, it was the shortest, sexiest, silkiest item she owned. Trudy had worn it with the express purpose of trying to make Eddie change his mind about the strict rules he had previously enforced.\n\n'Go and change please?'\n\n'Into what?'\n\n'Where are your other nightclothes? Show me what else you've got.'\n\n'OK,' sighed Trudy, dragging herself out of bed and making her way across the room. She pulled several options out of a drawer.\n\n'Those,' instructed Eddie, pointing at a pair of baggy pyjama bottoms and a top which buttoned up like shirt.\n\n'Those are the scruffiest, oldest, most unattractive pyjamas I've got,' replied Trudy. 'I think they might once have belonged to my brother!'\n\n'Perfect! Please go and change now,' he requested with a no-nonsense tone. 'And button them right up to the neck.' Trudy stomped out of the room and returned a minute later wearing her replacement nightwear.\n\n'Thank you,' he smiled as she returned to bed and the light was switched off once more. Eddie shuffled himself alongside Trudy once more. He found her lying on her back, staring through the darkness towards the ceiling.\n\n'I might as well be wearing a dustbin bag! I just wanted to feel nice,' complained Trudy.\n\n'You do feel nice,' countered Eddie, leaning up on one elbow and stroking his hand down the side of her face.\n\n'You know what I mean!'\n\n'Trudy, you seem to be intent on testing me to my limits,' sighed Eddie. 'If you think, for a moment, that I'd be able to lay next to you all night and fall asleep whilst you wear a black silk teddy that leaves almost nothing to the imagination, then you're utterly deluded.'\n\n'I just wanted to be attractive to you,' admitted Trudy sadly.\n\n'You're too attractive to me,' explained Eddie. 'That's the problem. Now, I'm going to kiss you goodnight, then I want to cuddle you tightly until we fall asleep, okay?'\n\n'I suppose,' sighed Trudy at length. Today really hadn't worked out as she'd hoped.\n\n'Thank you for demonstrating such willing co-operation,' grinned Eddie.\n\n'You're welcome,' chuckled Trudy at his teasing tone and obvious amusement. She seemed unable to stay cross at him for even a moment.\n\nIn the darkness, Trudy could hear Eddie slightly re-position himself and with a thrill, suddenly realised that his face was now directly over hers. Her heartbeat suddenly became very slow and strong as he dropped his head and pulled Trudy's upper lip gently into his mouth. She let out a deep-throated groan from the intensity of the moment; he smelt clean, minty and masculine and his proximity was sending all of Trudy's senses into complete disarray. Lying with her eyes wide open in shock, her body shuddered as she felt Eddie's tongue drift slowly and easily across her mouth, nudging the underside of her top lip. Unconsciously, Trudy's arms automatically snaked their way across his shoulders and into his soft hair, gently pulling him into her.\n\nAfter nibbling and teasing her mouth for some time, Eddie slowly increased the pressure and encouraged a shell-shocked Trudy to open her mouth and submit to him. The glorious feeling when their tongues finally slid against each other was one which Trudy knew she would never forget. Inhaling deeply through her nose, she would have given her body and soul to him at that moment, had he asked for it. But, true to his word, after the most exquisite kiss that Trudy had ever imagined, yet alone experienced, Eddie slowly moved his mouth away from hers, dropped a kiss on the end of her nose and then rolled them both over so that he was spooning her back. As an ecstatic Trudy relaxed her head into the soft pillow, a wide grin plastered across her face, she became aware of Eddie's substantial erection digging in against her ass.\n\n'Do you need any help with that?' she grinned, rocking her hips back slightly, feeling that he wasn't unaffected by what they had just shared.\n\n'No thanks,' chuckled Eddie. 'But ask me again someday soon and my answer will definitely be different.'\n\n--------\n\nAfter only a couple of hours sleep, from a far-away place, Trudy heard the gentle sound of music.\n\n'Stay in bed,' whispered Eddie's voice through the darkness, as he dropped a brief, soft kiss on her head. 'I'll see you again soon.'\n\nAlthough it felt like they had conversed fully, in reality all Trudy achieved was a groan from the depths of her semi-slumber, before falling straight back to sleep again.\n\nShe woke later that morning, amazed to find herself refreshed and energised enough to face the world. Despite their late night and Eddie's exceptionally early start, Trudy had slept pretty well and felt so much more positive. The only downer was that she had to go to work, which she could really have done without, but at least she had some wonderful memories from the night before, to get her through the monotony of the week ahead. \n\nTrudy refused to let the fact that she didn't know when, or if, she'd see Eddie again get her down. She'd failed miserably to quiz him on where he was flying to this morning and how long before he returned. Gazing at her phone, she kept willing it to receive an incoming text. It didn't. She knew she mustn't be overly keen; she wouldn't hunt any of her other friends down in a manner akin to stalking, so she mustn't start to do it with Eddie. Talking of friends, it was high time she caught up with Emma, so instead of obsessing about Eddie, Trudy sent a quick text to her best friend suggesting she popped over after work.\n\n--------\n\n'Hey you!' smiled Trudy, hugging her friend tightly.\n\n'Hi Trude,' said Emma. 'How's the Dragon Lady been today?'\n\n'Oh, you know,' grinned Trudy. 'Breathing fire as usual. Are you okay? What's up?'\n\n'I don't feel great,' grimaced Emma.\n\n'Oh, no. Are you coming down with something, or perhaps it was too much alcohol at the wedding?'",
        "'Ha ha. No, it wasn't, thank you!' smiled Emma. 'Now, talking about the wedding, who drove you home? You were very vague at the time. Something about an axe murderer?' Trudy's face immediately split into a wide grin which told everything Emma needed to know.\n\n'His name's Eddie,' replied Trudy. She couldn't even think about him without feeling a surge of excitement pass through her.\n\n'And?' encouraged Emma.\n\n'And he's seriously lovely,' sighed Trudy. 'And I mean seriously.'\n\n'So, did anything happen?'\n\n'Not really. We kissed once, last night.'\n\n'Last night? But the wedding was the night before.'\n\n'I know. We spent yesterday together and then he stayed over.'\n\n'He stayed over and you only kissed once?' queried Emma. This didn't sound very Trudy-like behaviour at all.\n\n'It's a long story,' smiled Trudy. 'But I promise that you'd approve of him. He seems to have my best interests at heart. He doesn't want to rush me.'\n\n'Good,' said Emma cautiously. 'I don't want to see you being messed about again. So, what's his surname? Do I know him?'\n\n'Um...I don't know what his surname is,' admitted Trudy, embarrassed that she hadn't even found out such a simple piece of information.\n\n'Oh, what does he do then?'\n\n'I actually don't know that either,' she replied. Emma looked surprised. 'I do have his mobile number,' offered Trudy, pulling her phone out of her pocket, as it started to vibrate.\n\n'Is that him?' smiled Emma teasingly. \n\n'No,' scowled Trudy. 'It's Simon. Telling me he misses me. Again.'\n\n'Tosser,' said Emma scathingly. 'Tell him to piss off!'\n\n'I'm just ignoring him,' sighed Trudy deleting the message and putting her phone away. 'Hopefully he'll get the hint soon.'\n\n'Hmphh! It's a pity your brother and Kimberley are away on their honeymoon. They'd be able to help identify Eddie and give you all the goss.'\n\n'You make it sound like an identification parade,' complained Trudy.\n\n'It's just unlike you not to have beaten all the information out of a potential suitor,' smiled Emma. Trudy snorted.\n\n'A potential suitor? Who are you? Jane Austen?'\n\n'Shut up!' giggled Emma, nudging her friend with her elbow. Suddenly, Emma sat stock still and raised her hand to her mouth. 'I'm so sorry Trudy, but I need the bathroom.'\n\n'Are you alright,' asked a concerned Trudy.\n\n'Yes, but do you mind if we catch up another time?' asked Emma, already on her feet and heading out the door. 'I might be a while. Can you let yourself out?'\n\n--------\n\nLater that evening, Trudy was sitting on her sofa, wrapped up in a fleece blanket for the purposes of comfort rather than warmth, watching a slushy, romantic film on the television. She was just contemplating heading to bed, when a buzz on the coffee table informed her of an incoming text. Trudy had purposefully not texted Eddie all day; she really didn't want to be seen as desperate and overbearing. Plus, there was nothing more demoralising than having to do all the chasing; she needed to know that he wanted her, somewhere near as much as she wanted him. And that was a pretty tall order, given the amount she wanted him. Grabbing her phone, she navigated through to the messages.\n\n\"Good evening gorgeous girl. Sorry it's taken me all day to contact you. My time has not been my own and I didn't want to message you without giving you my full attention. How has your day been? E x\"\n\nA warm, comforted feeling filled Trudy's brain and yet she suddenly longed for Eddie to be there in person so much that her chest ached. She replied almost immediately.\n\n\"Hey Eddie. I've had a good day thanks. I should have asked where you were flying to? I guess something must have distracted me! And please can I hop on a plane and join you? I would so love to be holding you right now. Trudy xx\"\n\nTrudy held on tightly to her phone, waiting for his reply.\n\n\"Ha ha. Yes, you might have encountered the odd small distraction. I'm in the Scottish Highlands, back at the end of the week. I've got next Monday free though. Any chance you could take a sickie and we could go out for the day? E x\"\n\nTrudy smiled. She was owed some leave from work, so that was definitely do-able. It would really just depend on whether her manager felt inclined to be a total and utter bitch or not.\n\n\"Let me request the day off and I'll let you know? But if the answer from work is positive, I'd love to spend Monday with you. Trudy xx\"\n\nAgain, Eddie's response was almost instant.\n\n\"Brilliant. Can't wait. Sleep tight Sweetheart. E x\"\n\n--------\n\nIt was a couple of minutes to nine on Monday morning and Trudy stood nervously in her hallway, listening to the approaching rumble of a Landrover. Having managed to take the day off work, she was now very unsure how she should react upon seeing Eddie again? It had been a week since they last met and Trudy hadn't actually laid eyes on him since before their first, heart-stopping kiss, although she'd thought of little else since. The engine had stopped now and she could hear bold footsteps approaching her door. There was no time left to worry about it she realised, as the doorbell rang briefly. In the end, Eddie made it very easy for her.\n\n'Hey you,' smiled Eddie, as Trudy pulled open the front door. He crossed the threshold confidently and dropped a soft kiss on Trudy's cheek. 'You look exceptionally tasty in those jodhpurs! Are you ready to make a move?'\n\nShe wasn't sure if it was his delicious smell, or the tone of his voice, or the sight of his sexy, masculine body back in her house, but Trudy found herself temporarily star struck. Nodding, she grabbed her riding hat and followed Eddie to the Landrover, the passenger door of which he held open for her. In the texts they'd shared, Eddie had suggested going horse-riding; an activity which Trudy used to regularly enjoy with Emma although they hadn't found the time recently. As they pulled away, amidst a flurry of exhaust fumes from the wheezing Landrover, Trudy discovered the ability to talk again.\n\n'So, are you a good rider?' asked Trudy innocently. Eddie flashed a quick grin loaded with sexual innuendo in her direction before returning his eyes to the road.'\n\n'I'd like to think so,' he laughed. 'I've certainly never had any complaints.'\n\n'Oh, stop it!' giggled Trudy, realising what she'd said and blushing in response. 'Have you been riding long? Horse riding,' she clarified.\n\n'Yes, all my life, really,' smiled Eddie. 'You?'\n\n'Well, the same, I guess. Not that regularly, but my family and friends have always been horse-mad, so I guess some of its rubbed off onto me.'\n\n'I'm lucky enough to have access to a local yard. My plan is to box up a couple of the horses there and drive to the coast. Then we can then ride along the beach, if you fancy that?'\n\n'That sounds completely amazing,' grinned Trudy.\n\n--------\n\n'Ah brilliant,' said Eddie, pulling up into an immaculate yard with barely a straw out of place. 'It looks as though Sally has done all the hard work for us; the nags are ready to travel. How very kind.' Trudy and Eddie jumped out of the Landrover and walked towards a blonde woman holding two beautifully turned out horses, already tacked and rugged up.\n\n'Good morning, Sir,' said Sally formally.\n\n'Hello Sally. Thanks very much for getting them ready for us.'\n\n'No problem, Sir. The horsebox is ready to go, if you'd like me to lead them round?' Eddie nodded and then held out his hand to indicate to Trudy that she should lead the way.\n\nOnce the horses had been loaded up, Trudy climbed up into the cab of the horsebox, watching Sally and Eddie exchange a few words in the reflection of the over-sized wing mirror. Moments later, Eddie jumped up into the cab, started the engine and they were off. As they pulled away, Trudy's curiosity got the better of her.\n\n'Why did Sally call you Sir?'\n\n'She used to work in a hunting yard,' said Eddie. 'Calling everybody Sir is expected there and I guess old habits die hard.'\n\n'The waiter called you Sir the other day,' added Trudy.\n\n'When you go to expensive restaurants, the waiters are paid to be polite to you,' smiled Eddie. 'Even if they think you're actually a total prick.' Trudy giggled. \n\n--------\n\n'Wow!' exclaimed Trudy, gradually pulling her puffing horse back to a walk and wiping the salt spray from her face. 'That was awesome!'\n\n'Wasn't it?' grinned Eddie, still standing up in his stirrups. 'I haven't been down here and galloped along the beach in way too long. I reckon you're a good influence on me, young Trudy!'\n\n'I'm not sure if you're a good influence on me yet,' giggled Trudy.\n\n'I hope, in time, to be an exceptionally bad influence on you,' grinned Eddie, nudging his lower leg against hers as their horses walked side by side along the golden sands. \n\n'I'm also fairly sure I'm not young any more,' she smiled. 'Thirty-three feels old.'\n\n'Oh dear. That makes me positively ancient then,' said Eddie with a lopsided grin.\n\n'How ancient?' asked Trudy, her eyebrows raised questioningly.\n\n'Thirty-seven years and five months ancient,' Eddie replied.\n\n'Yeah, you're right,' agreed Trudy cheekily. 'That's properly ancient. Have you applied for your bus pass yet?'\n\n'I was just about to say that I'm really glad you managed to get the day off work to join me today. But now, I'm not so sure I will,' chuckled Eddie.\n\n'I'm pleased I could join you too,' agreed Trudy. 'I must have caught the Dragon on a good day!'\n\n'Is it really that bad?' asked Eddie concerned.\n\n'It's bearable,' grimaced Trudy.\n\n'Tell me about it?'\n\nAs their horses walked back along the sands, Eddie listened attentively to Trudy as she shared her problems and concerns about work; the improvements she felt could be made, how the staff could be made to feel more valued, how productivity could be increased in her work area and the absence of staff development or training opportunities.\n\n'The Charleswood Estate is owned by the Duke and Duchess of Sussex,' Trudy went on to explain. 'You probably know that, given you live in one of their properties?' she added.\n\n'Yes,' nodded Eddie. 'I am aware of that.'\n\n'Well, I've worked there for three years and I've never even met them. I'm not sure I've ever actually seen them. That's not good for morale,' added Trudy. 'Develops a very \"them\" and \"us\" atmosphere.'\n\n'Mmm, I could see how that might not be seen in a positive light.'\n\n'I guess, being multi-millionaires, they don't feel the need to get down on a level with the common man. Or common woman,' smiled Trudy. Eddie looked thoughtful but didn't reply. A companionable silence fell over them as the horses strode contentedly side by side.\n\n'So, if you were a multi-millionaire,' said Eddie softly. 'What would you want?'\n\n'What I want is unaffected by money,' smiled Trudy.\n\n'How do you mean?' queried Eddie.\n\n'Money is transient. It can't be relied upon. You can have it one minute and see it gone the next,' explained Trudy. 'So, none of my dreams rely on money.'\n\n'What are your dreams?'\n\n'Simple really,' laughed Trudy. 'Although given my life experience to date, maybe simple in theory but not in practice! I want to have a family with a husband who loves me. Whether I have money or not won't prevent me loving my husband and children with all of my heart.'\n\n'You're a lovely girl,' murmured Eddie. 'Has anybody ever told you that?'\n\n'Yes, usually just before they want something,' smiled Trudy.\n\n'Ah, now I'm glad you mentioned that,' grinned Eddie. 'As a matter of fact, I do want something. You know the pub we parked the horsebox at? Please will you join me for some lunch there, before we head back?'\n\n'Do they offer discounted rates for senior citizens, then,' giggled Trudy. 'Is that why you want to eat there?'\n\n'Bloody cheek!' laughed Eddie. 'I can see I'm going to get a lot of satisfaction from screwing you into submission.' A jolt of desire shot straight through Trudy's body. She immediately fell silent, her neck and cheeks flushing, shocked by the completely out of context comment Eddie had just made.\n\n'You can't say that!' she breathed. Her eyes darted towards his face and immediately away again, when she saw the teasing look in his dark eyes.\n\n'I just did,' grinned Eddie. 'I meant it too. So, with less of your backchat, what about going to the pub for lunch? Do you fancy it?'\n\n'On one condition,' replied Trudy. 'I pay. No arguments.' Eddie was silent for a moment.\n\n'No woman has ever picked up the bill for my meal before,' he said quietly.\n\n'Well then, you've clearly been spending time with some really crap women,' giggled Trudy. 'Consider my entrance into your life as the equivalent of turning over a new leaf.'\n\n'I might just do that,' said Eddie seriously.\n\n--------\n\n'I've had the best day. Again,' said Trudy. 'Thank you, Eddie.'\n\n'You're more than welcome, Sweetheart,' he replied. 'But it's not over yet.' They had enjoyed a traditional English pub lunch, sitting outside at a picnic table in the warm sunshine, whilst their horses grazed contentedly beside them. Having returned the horses safely back to their stables, Trudy now found herself back in Eddie's Landrover and silently praying that their day together wasn't almost over.\n\n'What could possibly make it any better?' smiled Trudy teasingly. 'Are you taking me back to yours?'\n\n'Don't tempt me,' said Eddie, shooting a sideways glance at her. 'What would you normally do, when spending the evening with a friend? What might you plan to do if Emma was coming over?'\n\n'Oooh, film, takeaway, chocolate and wine usually,' listed Trudy without even having to think. 'And lots of chat and giggling.'\n\n'Sounds perfect to me,' grinned Eddie. 'If you're willing?'\n\n'You serious?' smiled Trudy. 'That sounds brilliant!'\n\n'I'm serious,' replied Eddie, as he swung the Landrover round a group of cyclists hogging the carriageway. 'Film genre?'\n\n'Usually romance, occasionally action.'\n\n'Sounds like we need one of each,' suggested Eddie. 'Conversation topics?'\n\n'Umm, general stuff really, I suppose.'\n\n'Such as?' queried Eddie. 'For example, when you last caught up with Emma, what did you talk about.' Trudy blushed.\n\n'Trudy?' pressed Eddie. 'How am I supposed to be your friend if you won't share your thoughts with me?'\n\n'Truthfully?' murmured Trudy. Eddie nodded encouragingly. 'We talked about my crap love life, what we need in bed... and handcuffs,' muttered Trudy, beyond embarrassed. Eddie roared with laughter.\n\n'I literally can't wait!' he beamed. 'Let's grab some bits from the supermarket and head back to yours. We can get a takeaway delivered later on this evening.'\n\n--------\n\nThe remnants of a Chinese takeaway littered the kitchen table, at which the two of them sat, contentedly sipping red wine.\n\n'How long do you normally wait before you break open the after-dinner treats?' enquired Eddie, eyeing the bars of chocolate longingly.\n\n'Longer than three minutes!' giggled Trudy, looking at her watch pointedly. 'Even Emma and I aren't that bad!'\n\n'Pity,' smiled Eddie. 'In that case, perhaps we can have a chat whilst we wait for the requisite time period to pass. So, what was the first subject? Your crap love life?'\n\n'Not just mine,' said Trudy strictly. 'It's a two-sided conversation.'\n\n'Fair enough,' agreed Eddie. 'What do you want to know?'\n\n'Number of women you've shagged, number of women you've been in serious relationships with, have you ever cheated on any of them and what are you looking for?'\n\n'Wow. You're straight out of the blocks, aren't you?' smiled Eddie. 'Very well. Number of women I've slept with. Fifteen. Number of serious relationships. Four. I have never cheated in a relationship. And what I'm looking for? Is it way too corny to say I think I've spent my life looking for you?'\n\n'Very corny,' murmured Trudy, blushing furiously.\n\n'Well, I'd better not say it then, had I?' grinned Eddie. 'I'll just put it in my little book instead. So, how about you?'\n\n'Okay,' she grimaced. Number of women I've shagged. None...'\n\n'Oi!' complained Eddie. 'Play the game!'\n\n'Bossy!'\n\n'I like to think of it as authoritative. And, believe me, Trudy,' he added, dropping his voice. 'I can be extremely authoritative when the occasion demands it.' The sexy glance he shot in Trudy's direction caused her blood pressure to rocket to dangerous levels.\n\n'Really,' croaked Trudy. Maintaining eye contact, Eddie nodded slowly.\n\n'Really,' he murmured.\n\n'Well, um... Back to the question. Five men. One serious relationship. Never cheated...'\n\n'Hang on! So, this dickhead who messed you around,' interrupted Eddie. 'He was your first long-term relationship?'\n\n'Uh-huh,' nodded Trudy.\n\n'I'm sorry,' he sighed. 'No wonder you've been so cut up.'\n\n'It's fine,' said Trudy. 'And you're right, he is a dickhead. But it's only when I look at him from a distance, rather than being caught up in the eye of the storm, that I'm able to fully appreciate just how much of a dickhead he actually is.'\n\n'That's my girl,' smiled Eddie gently, leaning forward and squeezing Trudy's hand momentarily. 'With a comment like that, I think you've just earned yourself a special goodnight kiss.'\n\n'What does that involve?' asked Trudy nervously.\n\n'Wait and find out,' grinned Eddie. 'I wouldn't want to spoil the surprise.'\n\n'Can you stay over again tonight?' asked Trudy, trying not to show how much she wanted him to say yes.\n\n'I might just be able to if you're very good,' he confirmed, matching an equally wide grin on Trudy's face. 'Although I'm afraid I do need to leave early again in the morning for work.'\n\n'You seem to work a lot, outside office hours. What do you do, Eddie?'\n\n'Do you mind if I don't go into details? I'd rather not...'\n\n'Oh my God, you're a spy!' gasped Trudy, her hand flying up to cover her mouth.\n\n'Nothing even a hundredth as exciting as that,' chuckled Eddie. 'Let's just say, I'm starting to take over the running of an established business.'\n\n'I guess that explains why you're willing to put yourself out and work all hours.'\n\n'Precisely. So, what was the next conversation topic? Ah yes,' he said, sipping his glass of red wine. 'What you need in bed?'\n\n'Stop it,' giggled Trudy. 'I am not having this conversation with you.'\n\n'Why ever not?' grinned Eddie. 'I've been really looking forward to it.'\n\n'Because I fancy you way too much,' she replied quietly.\n\n'In return, you get to know what I need in bed,' he teased, his head cocked to one side. 'Surely, you'd be interested to know that, wouldn't you? You might find the information exceptionally useful in the near future.' Trudy stared at him, her mouth opening and closing like a goldfish, unable to respond.\n\n'Let's return to that question another time,' smiled Eddie, 'and move straight onto handcuffs.'\n\n'Oh God,' she groaned, shaking her head. 'I can't talk about this with you either.'\n\n'This is what friends talk about, remember?' he said cheekily. 'So, have you ever been restrained in bed, Trudy?'\n\n'No,' she replied in a whisper, her pulse suddenly sounding awfully loud in her ears.\n\n'Do you want to be?' he asked seriously. A long silence ensued. 'Well?'\n\n'I think I like the thought of it,' admitted Trudy, a blush spreading across her entire upper body.\n\n'Mmmm, do you now?' grinned Eddie. 'Well, that is good news.'\n\n'Why?' she muttered.\n\n'Because I've had some very explicit thoughts about that over-sized armchair in your lounge, which I'd like to re-enact one day,' murmured Eddie, looking directly into Trudy's eyes and locking her into his gaze.\n\n'What thoughts?' she croaked, barely wanting to know the answer.\n\n'You're sitting in the armchair, naked,' said Eddie, slowly rising up from his chair and walking around to Trudy's side of the table. Standing behind her, he wrapped his hands around each of her wrists and lifted them into the air, above her head. Trudy felt herself physically tremble.",
        "'I use a long scarf to tie your wrists together,' he murmured, wrapping a clean tea towel from a nearby work surface firmly around her wrists and clamping them tightly together. Trudy whimpered as his slow, hypnotic words enraptured her; his voice so sexy and refined that it made her melt. 'And I tie them off behind the sofa so you're trapped.'\n\nAs he pulled her bound arms backwards so they leant against his chest, Trudy could do nothing more than close her eyes and groan at the imagined scenario. The position Eddie was holding her in suddenly made her very aware of her breasts swaying in front of her. She felt vulnerable but incredibly sexy.\n\n'Then I kneel in front of you, hooking each of your legs up and over the arms of the chair, so that you are completely open to me. I can now take my sweet time, running my tongue through your soft, velvet folds, teasing your clit until you scream with longing and burying my tongue deep inside of you,' Eddie whispered, as though the image was almost too much for even him to cope with.'\n\n'Fucking hell,' sighed Trudy.\n\n'I only have one aspect that I'm not sure about.'\n\n'What's that?' she croaked.\n\n'To blindfold, or not to blindfold? That is the question.'\n\n'Not,' sighed Trudy. 'I can't think of a bigger turn on than seeing that it's you doing such amazing things to my body.'\n\n'Perhaps. Although I can assure you that I wouldn't let you forget about me, even if you were blindfolded. Anyway, something to look forward to in the future,' said Eddie, slowly releasing Trudy from her restraints and allowing her arms to fall back into her lap. Walking across to the work surface, he picked up the chocolate bars and then grabbed his glass of wine from the table. Turning to look at Trudy, he couldn't help but smile at the dazed, vacant expression in her eyes and the deep red flush colouring her face, neck and chest. 'Time for a shed load of chocolate and film number two, me thinks?'\n\n--------\n\nTrudy didn't think she'd ever get used to the dramatic changes her body went through when spending time with Eddie. One moment, they were getting along as friends, then the next, he would say something suggestive that put her body on high alert, crying out in desperation for his touch. As they lay beside each other on the sofa, engrossed in the second film, Trudy's pulse remained relatively stable. Her head lay across Eddie's chest whilst his arm was wrapped companionably around her, hugging her gently. However, as soon as the credits began to roll, Trudy could feel her heart pumping blood around her body more vigorously than normal, in delicious expectation of what might follow.\n\n'Bed time, young lady,' whispered Eddie, gently squeezing her shoulder. They both shuffled stiffly into an upright sitting position and Trudy flicked off the television with the remote control.\n\n'Do you still want that special goodnight kiss you earned earlier?' murmured Eddie. 'And before you answer, be warned that it will mean we have to temporarily suspend our agreement that nothing except kissing will happen between us.'\n\nTrudy nodded shyly, a shot of adrenalin coursing through her body.\n\n'In that case, wear whatever you want tonight,' he smiled.\n\nFeeling a lot less confident than the last time Eddie stayed over, as though the safety net of their pact had been whisked away, Trudy opted for a plain, thigh-length nightshirt with buttons all the way down the front. She quickly jumped into bed and pulled the covers up to her chin, massively apprehensive about what would happen next. The more time she spent with Eddie, the more she found herself falling for him but, when it came to the crunch, might she and her limited experience be a massive disappointment to him? Was there a risk that Eddie would back away, resulting in their friendship being lost? With a start, Trudy realised that Eddie's companionship was actually more important to her than adding a potential sexual element to their relationship. Her musings were cut short by the sound of footsteps approaching her room.\n\nAs the door swung open and he walked towards her bed wearing just a pair of cotton boxer shorts and a smile, Trudy felt her stomach all but disappear. Eddie was simply the sexiest man she had ever set eyes on. It was almost impossible to believe she wasn't dreaming this scenario in her head and that he was actually here in her bedroom, preparing to do goodness knows what to her body. Slipping under the covers, Eddie propped himself up on his elbow and gazed at her.\n\n'Is everything okay, Sweetheart?' he murmured, clocking Trudy's worried expression.\n\n'Everything's fine,' she replied, trying to sound like she meant it.\n\n'I'm not entirely sure I believe you,' he said, tucking a stray strand of hair behind her ear.\n\n'I'm just having a minor dip in self-belief,' smiled Trudy.\n\n'Well, we definitely can't have that,' replied Eddie. 'Fortunately, I have enough belief in you for both of us.'\n\n'Do you really?' replied Trudy shyly. 'What if taking things further damages the friendship we have?'\n\n'That's never going to happen, my love,' sighed Eddie. 'Please stop worrying.' \n\nTaking her hand, he dropped his soft, firm lips to her skin, producing a fluttering sensation inside her chest. When Eddie progressed to gently sweeping his tongue in a circle around the palm of Trudy's hand, the fluttering became a surge of energy which travelled directly down through her core. Kissing slowly up her arm, Eddie arrived at her neck, where he gently tended to her delicate skin. Trudy couldn't contain the groan in her throat, caused by the amazing thrill Eddie's touch inspired within her body. As he kissed across her face and his mouth covered hers, she noticed her breasts felt constricted and heavier. Meanwhile, she was hyper-aware of blood pumping into her pussy lips, overcome by a desperate need for him to slide deep inside her.\n\nTheir kiss was unhurried, measured and languorous. Trudy loved the way Eddie made her feel; as though he had all the time in the world and that they were the only two people in existence. During their kiss, Eddie had migrated from lying beside Trudy to holding himself above her. Gently, he allowed some of his weight to rest on her body, trapping Trudy exquisitely in place beneath him. She could feel his heavy erection resting between their bodies and was reminded of the clear intent of his unconscious, if not his conscious, mind.\n\nSlowly, Eddie broke their kiss and dropping his knees either side of Trudy's legs, he began to nuzzle down her neck, until he reached the barrier of her nightshirt. Leaning over her, he moved his hand to her top button and easily sprang it open. Trudy gasped in shock and excitement as his lips and tongue began to explore the newly accessible part of her body that his action had uncovered.\n\nIn time, her second button was undone and Eddie was able to reach the skin just above Trudy's sensitive nipples. To know he was so near, but unable to touch them was unbearable. Trudy arched her back and groaned in frustration.\n\n'I love teasing you,' murmured Eddie. 'Just imagine what my lips will feel like around your hard nipples... and then the sensation of my teeth closing around them.'\n\n'Oh God, Eddie!' groaned Trudy loudly, with barely contained longing.\n\nWith that, Eddie's hand moved further down Trudy's body and freed the third button from its confinement. Without touching her with his hands, Eddie pushed the material of Trudy's nightshirt underneath each of her breasts, so that she was fully exposed to him. Looking down, he admired her body at length.\n\n'You are absolutely beautiful,' he sighed. Trudy smiled shyly, no longer caring that she was unable to do anything except pant noisily. She had never felt so turned on in her life. Never wanted another human being more than she wanted Eddie right now. With his hands on either side of her shoulders, Eddie gently dipped his head to her chest and began to blow gently across her exposed skin and kiss his way around her nipples, never once coming into contact with the areas of Trudy's body that were silently screaming out for his caress.\n\n'Please,' begged Trudy.\n\nSmiling, Eddie gently ran his tongue with a feather-light touch over each nipple, causing Trudy to groan whilst her body contracted with desire. After teasing her a little longer, Eddie tenderly wrapped his lips around one of Trudy's nipples and gently sucked, tugging the delicate flesh into his mouth.\n\n'Aaahhhh!' Trudy sighed, throwing back her head and submitting to the incredible feelings being inflicted on her willing, quivering body. A strong pulse ricocheted through her body, heading directly to her swollen pussy lips. When Trudy eventually felt Eddie's teeth gently scrape across her delicate skin, before clamping down more firmly, the desperate need she felt became uncontrollable.\n\n'Fuck,' she cried, her body flinching with pure, unadulterated longing. When Eddie's damp thumb and forefinger gently pinched and rolled her other nipple at the same time, she was lost.\n\n'Trudy,' murmured Eddie to the shaking woman lying underneath him. 'Do you want me to stop there?'\n\n'No, don't stop,' begged Trudy. 'Please.'\n\n'You need to know that if I continue, you may end up feeling seriously frustrated,' explained Eddie. 'Because I'm not going to make love to you tonight, whatever happens. I still think it's too soon.'\n\n'I don't care,' cried Trudy. 'Just touch me. Please touch me. I'm begging you.' Eddie nodded, stood up and walked towards Trudy's wardrobe. She sighed in frustration as his warm body left hers.\n\n'What are you looking for?' she murmured, barely caring, as he opened and closed numerous drawers.\n\n'These,' replied Eddie, holding up a number of scarves. 'They'll do.'\n\n'What do you want those for?' stuttered Trudy, barely daring to imagine that one of her long-held secret sexual fantasies was about to be played out for the first time in her life.\n\n'You're an intelligent woman, Trudy. What do you think?' said Eddie with a lopsided smile. Making a loop in the material, he fed Trudy's wrist through the noose and then attached the scarf to the bedpost at the top of her bed, raising her arm aloft. Maintaining eye contact with her at all times, he walked around the bed and repeated with her other wrist. With her mouth open in astonishment, Trudy was caught like a rabbit in the headlights, unable to look at anything but the achingly sexy man who was tying her to the bed for his pleasure. And for her pleasure, of course. Trudy was suddenly painfully aware of the liquid pooling between her legs and her breasts now swaying in front of her, entirely unable to prevent his touch. Running a third scarf through his fingers, he looked at her meditatively.\n\n'I'm not convinced you made the right decision about the blindfold, Trudy.'\n\n'No!' she breathed.\n\n'Yes,' countered Eddie. 'I think so,' he said, leaning towards her and wrapping the scarf around her eyes to entirely block her vision. Trudy immediately pulled down against her restraints but to no avail. 'I'm convinced the blindfold will make what is about to be done to you, all the more intense.'\n\nEddie returned to the bed and recommenced his slow unbuttoning of Trudy's nightshirt, interspersed with kissing her body. Trudy's groans grew more and more desperate until finally the last button was undone and her nightshirt fell open.\n\n'Beautiful,' sighed Eddie, stroking reverently across her breasts, down her rib cage and across her stomach. 'Just beautiful.' Trudy gasped, unable to second guess the direction of Eddie's hand and unable to see either. 'I'm desperate to go down on you, Trudy,' murmured Eddie. 'Would you like to come?'\n\nTrudy gasped at his confident tone and unexpected audacity.\n\n'Answer me,' he instructed, clamping his damp thumb and forefinger around her nipple and pulling gently.\n\n'Oh God!' she cried. 'Yes. Yes please.'\n\nRunning his teasing fingers down the entire length of her body, he ended up with his hand gently circling Trudy's ankle. Lifting it up, he pulled her leg out so she began to open up to him. Settling his body at the base of the bed, Eddie then gently blew on the inside of Trudy's other thigh.\n\n'Open yourself to me,' he murmured, blowing once more on her thigh. Slowly, Trudy opened her legs to offer her pussy to him, almost embarrassed about how ridiculously wet she could feel she'd become. She could feel her arousal running across her ass, pooling on the sheet below.\n\n'Wider,' he murmured, blowing again. Trudy glanced down but, because of her blindfold saw nothing. Despite feeling incredibly vulnerable, she trusted him implicitly and opened herself as wide as she could.\n\n'Mmmm, much better. Good girl,' groaned Eddie, positioning his body between her legs, forcing her to remain open to him. 'You're wonderfully flexible. If we were in a four-poster bed, I can assure you that your hands wouldn't be the only thing tied up right now.'\n\nMoving his mouth to the inside of her knee, Eddie slowly ran his tongue up the inside of her thigh, straight across her quivering pussy lips and back along the opposite thigh to Trudy's other knee. As his slippery tongue made contact with her most intimate area for the briefest moment, she cried out in frustration. Repeating this several times, Eddie revelled in the desperate sounds this gorgeous woman was making.\n\nEddie began to run the ball of his thumb up and down the outer lips of Trudy's wide-open pussy, making her moan with frustration as he never quite gave her what she needed. What she desired the most.\n\n'Please touch me,' begged Trudy. 'Don't tease me.'\n\n'Tell me why you reckon you've had a crap love life up to this point,' said Eddie. Trudy's hips unexpectedly lurched as Eddie moved his thumbs to gently massage her inner lips, slick with desire, with tiny circular movements.\n\n'I don't know,' she panted.\n\n'Shall I tell you why?' asked Eddie. 'It's because those men took what they wanted, instead of giving you what you needed.'\n\n'I guess,' groaned Trudy.\n\n'No guessing about it,' said Eddie. 'And teasing you. Playing with your body. Making you beg for me. Forcing you to wait and then driving you to orgasm,' he listed in a low growl. 'That is what you need. By lucky chance, it's also what I want.' With that, Eddie leant into her body and ran his tongue ever so slowly through her warm, wet folds.\n\n'Oh my God!' cried Trudy, able to feel each tiny movement of Eddie's very talented tongue nudging its way through the centre of her swollen pussy lips.\n\nSlowly, his mouth moved up her body to lazily sample her nipples once more before progressing onto her mouth for a slow, languorous kiss. Once satisfied, Eddie sank back down her body, allowing his tongue to nudge around her tight, desperate entrance and break through the dam of her juices.\n\n'Please, please,' panted Trudy, pulling down against her restraints once again.\n\n'If you insist, I'll stop teasing you and let you come,' said Eddie softly. 'Although to be honest, I'd much rather hold you near the point of orgasm and play with your body all night.' Trudy inhaled sharply at the thought.\n\n'So, whilst I'm trying to gently persuade your body to climax, I need you to try and hold back and control what you're feeling for me,' directed Eddie. 'Just breathe deeply for as long as you can and I promise the wait will be more than worth your while.'\n\nUnable to believe Eddie was turning out to be even sexier than she'd first imagined, Trudy held her breath in nervous expectation, unable to speak.\n\n'We're going to go really slow, okay?' he said. 'And remember to breathe.' \n\nWithout giving Trudy any time to prepare, he ran his tongue tenderly up her soft folds until he reached the base of her clit. Once there, he let his tongue rest, nudging gently and placing exquisite pressure against her until Trudy's loud cries became increasingly uncontrolled. As if reminding her, without removing his mouth, Eddie's hand gently stroked her stomach in a reassuring way. Trudy took a couple of deep breaths and her cries reduced back down to groans.\n\nSlowly, Eddie migrated his fingers to Trudy's tight, wet entrance, where they hovered teasingly over her. At the same time, he gradually moved his tongue up, until it clamped firmly down on the whole of her clit, sliding against her with perfect precision. A much more guttural groan came from Trudy's throat and her entire body seemed to clench. His hand immediately stroked her stomach once more, to relax her, before continuing with his tender torture. And there Eddie held her, edging Trudy lovingly across the void that lay between consciousness and ecstasy, challenging her endurance for as long as he dared. \n\nPlacing the gentlest pressure against her with his two fingers, he provided a cheeky reminder of what was soon to follow. When his lips finally wrapped around her clit and attentively sucked, Trudy thought she would explode with longing. The cry which was emitted from her throat physically hurt. When, at the same time, Eddie's tongue began to gently glide in waves across her, Trudy was lost. No amount of attempting to control herself was ever going to work now and she rapidly scaled the heights of a frighteningly powerful orgasm. As Trudy took her final breath before plunging into the abyss, Eddie slowly pushed those two teasing fingers deep inside her body. Forcing her body to expand and accept him, they glided easily forwards. At the same time, his thumb moved up to put exquisite pressure at the base of Trudy's clit and with a shuddering gasp, she came louder, harder and more violently than she had ever known before in her life. \n\nHer internal muscles desperately contracted in waves around his fingers as she ground herself against his mouth and hand. As he relentlessly pushed her onwards, she skipped from one climax to the next, barely able to distinguish between them. Holding her in a perfect state of extended orgasm, Eddie maintained impeccable pressure and control over her body until he felt that she could give no more. Only then did he slowly remove his lips and fingers from her quivering, exhausted body, migrated up to Trudy's mouth and kissed her on and on. Without breaking their kiss, he gently removed her blindfold and unbound her hands. Although she barely had the energy to reciprocate, Trudy wrapped her arms around her incredible lover and pulled him towards her, deepening their kiss.\n\nEventually, Eddie pulled away from Trudy, smiling affectionately at her.\n\n'I was going to button up your nightshirt,' he explained. 'But if I touch you again, I can't account for my actions. I would probably have to make love to you all night, and I'd like to hold off for now... so would you mind doing your own buttons up please?'\n\n'OK,' murmured Trudy smiling. She did so, whilst Eddie straightened the bedcovers and turned out the light.\n\n'Good night my beautiful girl,' sighed Eddie happily, pulling Trudy towards his body.\n\n'Good night, my bona fide sex God,' grinned Trudy. 'You are un-bloody-believable.'\n\n'I'll take that,' smiled Eddie contentedly, his eyes sliding closed. 'I'll take that any day.'\n\n---------\n\nAs always, thank you very much for taking the time to comment and vote."
    ],
    "authorname": "FenellaAshworth",
    "tags": [
        "english",
        "fingering",
        "horse-riding",
        "humor",
        "lust",
        "millionnaire",
        "restraints",
        "romance",
        "teasing"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/perfect-stranger-strangely-perfect-ch-03"
}
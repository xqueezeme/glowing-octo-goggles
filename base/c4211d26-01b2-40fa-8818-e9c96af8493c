{
    "title": "What The Cat Dragged In Ch. 23",
    "pages": [
        "Hi everyone,\n\nKelly is physically recovering, but is just beginning a psychological recovery. Because of her highly traumatized state, she may misinterpret the meanings of words and the intentions of others. \n\nThank you all for reading and commenting. Seeing that the story resonates with you makes my day!\n\nEnjoy!\n\npsyche b.\n\n23. ...and Barters\n\nThe blue doctor watched Victor walk out the door, then he smiled at Kelly. \"I don't need tests to see that you're doing well.\" He set the clipboard down.\n\nKelly smiled a little. \"The ache in my bones is mostly gone. My head is better. I can barely see the incision on my side. I'm kinda tired, but Victor told me that healing takes energy, so I guess feeling tired is normal.\"\n\nHe nodded. \"It is. Could I have a look at the incision?\"\n\n\"Sure.\" \n\n\"If you'll open the ties on your gown and lay on your side. I'll cover the window and give you a few minutes to arrange your clothing.\"\n\nKelly waited until he had the window covered, then she arranged herself so that he could see the long incision. The robe was around her waist like a blanket, protecting her modesty. He knocked a few minutes later, then came in and pulled on a pair of latex gloves. \"Let me know if you have any pain.\" He stretched the skin along the edges of the wound, then applied a little pressure along its length. Kelly groaned as he reached the front of the wound.\n\n\"Pain?\"\n\n\"It just feels too tight. Like there are stitches there, but I can see there aren't. Most of the time I don't feel it. Just when I move certain ways.\"\n\n\"There are several layers of tissue that are healing. Your skin is healing faster than the underlying muscle. I can't really say how long it'll take because I'm not completely certain how fast your healing factor works, but I'll recommend that you be careful for another few days.\" He pulled the gown back down. \"I'm going to give you a list of words to remember, and I'll ask you for them later.\"\n\n\"Okay.\"\n\n\"House, pencil, blue, donkey.\"\n\nKelly nodded. \"Got it.\"\n\n\"You look like you were walking confidently. Any dizziness?\" He took off the gloves and started making notes on the clipboard.\n\n\"No.\" Kelly arranged the gown around herself and sat up. \n\n\"Trouble finding words?\"\n\n\"No.\"\n\n\"Do you know where you are?\"\n\nKelly wasn't sure how to answer at first. \"I thought it was a hospital at first. Victor told me it was a school and he told me the name, but I don't remember it all. His sweatshirt said something about Xavier's school.\"\n\nHe smiled. \"Close enough. The day of the week?\"\n\n\"No one told me what day it was yesterday, but if I had been here eight days then I'll guess that today is Tuesday.\"\n\nAnother small smile. \"Yes it is.\"\n\n\"Thinking about those sweats, you wouldn't happen to have a set in my size would you? I feel strange sitting around like this.\"\n\nHe nodded. \"I want to get the cheek swab first and then I'll bring you something to change into. What were the words I asked you to remember earlier?\"\n\n\"House, pencil, blue, donkey.\" Kelly answered without hesitation.\n\nHe nodded and made another note, then he pulled on a fresh pair of gloves. He took a package out of the pocket of his lab coat. \"This is just a sterile swab.\" He opened the package. \"I'll have you open your mouth and I'll rub it along the inside of your cheek to pick up a few epithelial cells.\"\n\n\"Straight out of C.S.I., huh?\" She smiled a little and opened her mouth. \n\nHe laughed while he ran the cotton end of the swab over her left cheek. \"Something like that. They look for the presence of certain genes. I'll be able to develop a profile that shows how your genes are functioning.\" He slid a plastic cover over the cotton tip of the swab. \"Alright. I'll get you some clothes and then we can talk more.\"\n\nKelly's eyes narrowed. \"Talk about what?\"\n\nHe looked at her for a long moment, as if weighing his options. \"The experience you've had-\"\n\n\"No.\" Her voice was firm. Tension rippled through her muscles.\n\nHe sat down. \"Kelly, keeping silent about this-\"\n\n\"It's none of your business.\" Kelly's voice rose. She gripped the edge of the robe tightly.\n\nHe studied her with a direct gaze. She recognized the look as something that was supposed to inspire uncertainty in a younger person. Kelly had been through too much for that to work. She stared back.\n\n\"You're not going to change my mind. I appreciate the fact that without you I would have died. I can't thank you enough for that. If you want to tell me more about how I went from death's doorstep to waking up feeling pretty much okay with a new healing factor, I would love to listen. As to the rest, I don't know you, I don't trust you, and I'm not telling you anything.\"\n\nHe was silent a moment longer, then he got up. \"I'll get you some clothes.\"\n\n*~*~*~*~*~*\n\nKelly curled up in the chair in front of McCoy's desk. Her chin rested on top of her knee as she listened to his explanation of genes and methyl molecules and histones and other things that she'd never heard of. When she cut through the jargon, the basic concept of genes becoming active or silent depending on experience made some sense to her. It sparked an idea too. She spent the last few minutes of his explanation deciding how to phrase it.\n\n\"So, if I had siblings, would they have the same dormant mutant genes?\"\n\nShe caught the slight narrowing in his eyes. \"It's possible, but each sibling would have a unique complement of them. Even within the same family, children have different experiences which activate and silence different genes. Why?\"\n\n\"If someone gave one of those siblings the same IV I got, would it make him or her sick?\"\n\n\"It stresses the body in very specific ways and that, in turn, accelerates methylation. A healthy person probably wouldn't notice anything other than the inconvenience of being hooked up to an IV for several days. If the person was already ill, or injured, the risk is slightly increased. No matter the situation, seeing results is highly unusual. Do you ask because of your brother?\"\n\nKelly's fingers bit into her leg. \"Who said I have a brother?\"\n\nHe sat back. \"Your stepfather has a fondness for television appearances, and for using his personal tragedies as a rallying cry for the anti-mutant community.\" For a moment he was silent. \"He speaks a great deal about your murder.\"\n\nKelly was certain she heard a threat in his voice. It made her stomach clench. She was on her feet and backing away, heart pounding, mind racing with no other thought than self-preservation. \"Where's Victor?\"\n\nHe stood slowly. \"Kelly-\"\n\n\"If Stan finds me again, he'll kill me!\" She held onto her arms, trying to keep from trembling.\n\n\"And you think Victor won't?\"\n\nShe stared at him for a moment. \"What's that supposed to mean?\"\n\nHe walked around the desk. \"There is a body that's been officially identified as yours. Of course it was a visual identification because there were no teeth, no hands, and the DNA was destroyed by heat. It's either a stunning coincidence or Victor attempted to set the scene.\"\n\nKelly met his eyes. \"So what if he did?\"\n\nSurprise flickered over his face. \"Whoever she was, she didn't deserve that.\"\n\n\"And I didn't deserve what Stan put me through. Life is profoundly unfair on so many levels.\" She could feel the anger constricting her chest, making it hard to breathe. \n\n\"That doesn't give him the right to kill an innocent woman-\"\n\n\"I don't care if it was one woman or a hundred.\" Her eyes were on his.\n\n\"You can't mean that.\"\n\nOne finger tapped angrily against her bicep. \"What do you want? You want me to lie and say my heart breaks every time I think about it? That I can't sleep at night because of the guilt? I'm glad to be alive and I intend to stay that way. No matter what.\"\n\n\"What did it buy you?\" He was looking down his nose at her.\n\nKelly dug her nails into her palms. \"Time enough for Victor to be there when Stan made his move. Are we done or do you want to try and make me feel guilty awhile longer?\"\n\nHe leaned back against the desk. \"I'm wondering if you're trusting someone who doesn't deserve it.\"\n\n\"Oh, so you want to read back a litany of every terrible thing Victor has ever done.\" Kelly was shaking now.\n\n\"Kelly-\"\n\n\"You're a little late. M\u00fcller already did that, when he wasn't taking breaks so that his assistants could beat the hell out of me. If you're going to do it again I think I'd like to sit down. My head was kinda foggy but it seems like it took quite awhile.\"\n\n\"You have other options.\" There was a genuine concern in his eyes.\n\nKelly felt some of the tension leave her body. \"I don't need other options.\"\n\n\"Are you certain of that?\"\n\nKelly looked away. \"I see how everyone here looks at him. Nothing I say is going to be enough.\"\n\n\"Tell me something I don't know about him.\"\n\nKelly shrugged. There seemed to be too many things to list. \"He found my grandparents for me. I hadn't seen them since my mother married Stan. I talked to them just about every day before all this happened. We even spent time in Ohio with them.\"\n\n\"We?\"\n\n\"Victor and I. And before you ask, they're still alive and well.\"\n\nHe smiled slightly. \"That is something I didn't know.\"\n\nShe looked up at him. \"Am I okay? Are we finished?\"\n\n\"The treatment was very experimental, but you're on the mend.\"\n\n*~*~*~*~*~*\n\nThe phone call to Conlon took no more than five minutes. He found out that the kid's condition hadn't changed all that much. With head injuries and humans, that was probably a good thing. The other mutant could be at the gate in fifteen minutes. Creed told him he'd call when the frail was ready to go. \n\n\"She's alright then?\"\n\nThe question pissed him off. \"What the fuck kind of a question is that? You saw that place. You saw the kind of state she was in.\" Jimmy walked in and lingered across the room. He was doing his best to look like he wasn't paying attention, but Creed didn't buy that.\n\n\"She's alive though.\"\n\nHe watched Jimmy. \"Fucking lucky for you that she is too.\"\n\n\"I didn't-\"\n\n\"You keep telling yourself that. Be ready to leave when I call back.\" He ended the call. Jimmy looked up. Creed was watching him. \"Get an earful, Runt?\"\n\nThe runt smirked. \"Sleep well?\"\n\n\"You spying on me now?\" It pissed him off, but Creed couldn't say that he was surprised.\n\nJimmy shrugged. \"I remember how you were when we shared space on a regular basis-\"\n\n\"Was that before or after you decided I wasn't worthy of your company?\"\n\nJimmy growled, but went on. \"When we shared space, you got pissed off if I so much as breathed too loud.\"\n\n\"What's your point?\"\n\n\"I was curious.\"\n\n\"You were jealous.\"\n\n\"You wish.\"\n\n\"I have what you don't and whether you admit it or not, it's eating you up inside.\" Creed grinned. \"But it was a damn sight nicer laying next to her than sitting there with you staring at me. Where's the coat I had her wrapped up in when we got here?\"\n\n\"How the hell should I know?\" \n\n\"I need to find it and then I need to see your boss.\"\n\n\"He wants to see you too.\"\n\nCreed started to look around the large room. \"Well don't that just make things convenient.\" He finally found a red plastic bag sealed with tape with \"Biohazard\" printed on it. Even through the plastic he could still smell the frail's fear and the rotting blood of her captors. The image of her on the floor, bleeding and broken, flashed before his eyes. The low growl was out before he could stop it.\n\nJimmy appeared by his side. \"Look-\"\n\n\"Shut the fuck up.\" Goddamn runt felt sorry for him. He could hear it in the smaller man's voice. Creed couldn't meet his eyes. \"We goin' to see the old man or not?\"\n\nJimmy didn't move. \"It sticks with you. Just like the wars and all the other shit, you can't unsee it and you can't change it.\"\n\nCreed stepped close to his brother, his eyes clashing with the other man's. \"I don't know what the fuck you're talking about, and I ain't got time to stand here and listen to you spew your nonsense.\" A warning growl permeated his statement. \n\nJimmy's anger flashed, but the other feral stepped away. \"You know exactly what I'm talking about; you're just too fucking stubborn to admit it. Come on.\"\n\nCreed clutched the plastic-covered package and followed his brother across a mostly silent foyer. The runt was right. Just the flash of that image renewed all the anger at himself, all the pain seeing her cringe away from him, the palpable fear of losing her. He shoved all that aside and willed himself to think of anything else.\n\nJimmy knocked, but Creed didn't wait, he opened the door. The kid the old man was sitting with jumped.\n\n\"We'll talk again tomorrow, and I expect that assignment will be complete by then.\"\n\nThe child nodded, but he kept his eyes on Creed. Creed smirked, showing just a hint of fang.\n\n\"Do you understand?\" The old man prompted.\n\n\"Yes.\" The boy picked up his books and trotted past Creed. The old man waited until the door was closed.\n\n\"You could have waited to be acknowledged.\" He said.\n\n\"I could have.\" Creed sat down. He sliced through the red plastic with one claw. \"But I wanted to get this over so we could get outta here. How much?\"\n\n\"How much?\" \n\nCreed felt a flutter against his mind. He growled low and dangerous. \"I told you to stay the fuck outta my head.\" \n\nHe nodded. \"Forgive me, your question confused me. How much for what?\"\n\n\"Treatment for the frail.\" He dug through the gore-stiffened fabric. \n\n\"I didn't do this with any expectation of-\" \n\n\"I don't need your charity and I sure as hell don't wanna owe you anything.\" He found the hidden compartment in the lining of the coat. He tossed four thick bundles of cash onto the old man's desk. Some of the edges were stained reddish brown. \"You tell me how much, take this off the top and tell me where to wire the rest. You'll have it in twenty-four hours.\"\n\nThe old man stared at the cash. Creed thought he saw disgust flicker across his face. He looked away from the stained money. \"You're certain that leaving is the best idea for Kelly?\"\n\nCreed stared into those cool eyes for a long moment. \"What the fuck is that supposed to mean?\"\n\n\"I was just wondering if you've considered her needs when making your plans.\" Cool, cultured voice. Absolutely controlled, detached and positively maddening.\n\nCreed did his best to suppress the deep growl that rose in his chest. He didn't want to give the old man the satisfaction. He glanced over at Jimmy. His brother looked away. Creed wasn't sure what that meant yet. \"Still waiting for you to tell me what that's supposed to mean.\"\n\n\"You know the ordeal she's been through.\"\n\n\"Better than you do.\"\n\nThe old man nodded slightly. \"Then you know recovery will be a long process. I'm offering her the ability to recover in safety, to finish her education-\"\n\nCreed's claws bit into the leather arms of the chair. \"As long as I'm outta the picture.\"\n\n\"A time without distractions would be-\"\n\n\"I ain't a distraction, I'm her fucking mate! 'F you don't know what that means you can ask Jimmy. Be interesting to see if he remembers.\"\n\n\"I will not allow you or anyone else to use my school as a base of operations for wholesale murder.\"\n\n\"Wholesale?\" Creed smirked. \"Trust me, ain't nobody gettin' it wholesale from me.\"\n\nAnger flickered over the old man's face. \"Severe trauma like the kind Kelly's been through can play havoc with a young woman's emotional state. She may form intense but unhealthy attachments with-\"\n\n\"Her captor.\" Creed finished with a barely concealed growl. \"You think she's developed an attachment to me because it's safer for her. She keeps me happy, she stays alive. In the beginning you figure she was just doing it until she could figure a way out. Course as time went on and I didn't kill her, she started to really identify with me, to rely on me for pretty much everything. To believe that I was being good to her when all I was really doing was not hurting her too bad.\" The old man sat back in his chair. \"You ain't the only one who's ever read a psychology textbook.\"\n\n\"Then you should understand the fragile state that Kelly is in.\" The old man gave a small smile, as if he were making progress.\n\n\"So to fix all this shit you want me to leave her where she doesn't want to be with people she doesn't know and doesn't want to be with, but who are pretty fucking invested in keeping her here.\" Creed watched the old man's eyes narrow slightly. \"Who would she be forced to rely on then?\" \n\nJimmy covered a laugh with a cough.\n\n\"There's no comparison between the two situations.\" Controlled anger laced the old man's voice.\n\n\"In your opinion. It's gettin' late. You got any other arguments?\"\n\nHe took a deep breath. \"And if she isn't ready to go?\"\n\n\"Didn't we just go through that?\"\n\n\"I mean physically. You know how much energy healing takes and you know how serious her internal injuries were. Her bruises and skin has healed. The rest will require time.\"\n\nHe knew alright. The ape had gone down the list and that didn't even include the surgery. Beyond being physically exhausted, Creed knew that the frail needed time to start to process some of it. He'd decided to give her a day of traveling and see how she was. They could hide out for a few days if she needed to get her bearings. \"She'll sleep on the way. You decided how much yet?\"\n\n*~*~*~*~*~*\n\nAs soon as Kelly stepped out of Hank's office, she looked around for Victor. When she didn't see him, panic started to rise in her chest. \"Professor Xavier wanted to meet with him.\" Hank said. \"I'm sure he'll still be there when we get there.\"\n\nKelly stopped and looked up into his eyes, studying his face. A muscle tensed and relaxed in his jaw. \"You think he's gone.\"\n\n\"I didn't say that.\"\n\n\"You didn't have to.\" Anger at him and fear that he was right wrestled in her chest. She fought to control it. \"Where is this office?\"\n\n\"This way.\" He led her through the foyer and down another hallway. The place looked more like an opulent manor house than a school. She glanced over at Hank, he was smiling at her. \"Quite something, isn't it?\"\n\nA smile tugged at Kelly's lips. \"I'd hate to have to polish it.\"\n\nHe laughed and turned down another hallway. This one looked more like a school. A very upscale school. A blond girl trotted around another corner. She stopped in the middle of the hall and stared. Kelly looked away. \n\n\"Do I look that awful?\" She murmured.\n\n\"Of course not-\"\n\n\"Kelly?\" The girl was still staring. At the mention of her name Kelly stopped and stared back. There was something familiar about her. \"Kelly Demmer?\" She walked closer. Kelly stood still.\n\nHank stepped forward. \"You're late for third period, aren't you?\"\n\nThe shade of her hair, the way she clutched a black and white marbled notebook to her chest. When she shifted it, Kelly could see that the edges of the pages were colored with intricate designs. It triggered the memory. \"Cassie?\" Kelly moved forward so that she was peeking out around the blue doctor's body.\n\nThe girl nodded. She dropped the notebook and ran toward Kelly. Kelly brushed past Hank and met her halfway, catching her in a tight embrace.\n\n*~*~*~*~*~*\n\nCreed walked out of the office with Jimmy and the old man rolling along behind them. \"Look, you can take the money or burn it or set up the fucking Victor Creed Scholarship Fund.\" He grinned a little bit at that thought. \"I don't really give a shit. I'm taking my frail and getting the hell outta here.\" \n\nWhen he rounded the corner he stopped short. The frail was smiling and chattering with some girl while the ape tried to shoo the stranger away. He had a flash of white-hot fear, then crushed it with anger. \n\nHe turned to the old man. \"You did this.\" His growl was low and dangerous, his claws lengthened. Jimmy stepped in front of him, his muscles tense.\n\n\"What the hell are you talking about?\" Jimmy asked.",
        "\"The girl!\" His voice was a low growl.\n\n\"We've been keeping Kelly's identity secret. I had no idea that Kelly knew anyone here.\" The old man looked as surprised as Creed felt. Normally, that wouldn't mean a goddamn thing but he got the whiff of surprise from him too.\n\nCreed looked over at the two girls. \"Lemme guess, the blond does something with electricity.\"\n\nSome of the tension went out of Jimmy's muscles. \"Yeah. How'd you know?\"\n\nCreed's claws retracted. \"Me and the frail do more than fuck. Once in awhile we talk to each other. Course I'm sure that idea never occurred to either one of you.\" He couldn't take his eyes off the frail. He'd seen her smile like that when she looked at him and when she looked at her grandfather. She also looked completely exhausted. \"If she stays, I stay with her.\"\n\n\"Out of the question.\" The old man shook his head. \"I will not allow you to make this school your base of operations, nor will I expose my students to you. Of course, if you wanted to give her a chance at recuperation-\"\n\n\"You been on vacation for the last week?\" Jimmy asked. Creed was beginning to smell his brother's anger lacing the air between them. \"All he's done is sit with her, just waiting for her to wake up. You ever hear of him doing anything like that?\"\n\n\"I'll admit, I haven't, though I'm sure-\"\n\n\"You're sure of what? He's a cold-hearted, manipulative, murderous bastard who never showed anybody the slightest bit of mercy let alone tried to comfort or care for anyone or anything other than himself.\"\n\n\"Well thanks a lot, Jimmy. I ever need an endorsement, I'll know just who to call.\" Creed turned back to watching the frail.\n\nJimmy growled. \"Shut up and let me finish. He never gave a shit about anybody, except that girl. I don't know why, I don't know how and I sure as hell don't know what brought it on. I can see it in his eyes when he talks about her though.\" Creed glanced at his brother. \"Could see it in the way he held her when she woke up and the way she held on to him last night. That's his mate, and unless you want a bigger fight than you know what to do with, you don't try and separate them.\"\n\nThe old man was silent for a long moment, his eyes flicked from Creed to Jimmy and back again. \"This school is not a base of operations for your deadly enterprises.\"\n\nCreed smirked. \"Bein' a murderous bastard has its perks; the pay is good and you get to set your own schedule.\"\n\n\"With conditions, this might be acceptable.\" The old man said. \n\nCreed rolled his eyes. \"How long is this gonna take? I told you I wasn't interested in your little freaks, what more do you want?\" Creed said. \n\n\"I can't allow you into the mansion without an escort and I have to have daily contact with Kelly, to assure myself of her well-being.\" The old man said.\n\nCreed growled. \"You wanna treat me like I'm shit, that's fine. I wouldn't expect anything else. I ain't gonna let you treat her that way too. If she wants to see you, that's up to her.\"\n\n\"And I'm sure you'll let her make her own decision.\" Maddening sarcasm laced that cultured voice.\n\nCreed bent down and stared directly into the old man's eyes. \"She's not my prisoner. She's not a job. She don't stay because she's scared or because she has no place else to go. She does what she wants, when she wants. Get used to it.\" He stood up again.\n\n\"How long?\" Jimmy asked.\n\n\"Two weeks. Give her a chance to get her feet under her, give her a chance to get reacquainted with whoever that is.\" Creed caught the look of surprise in the old man's eyes. He smirked. \"Told you I didn't keep her locked up.\"\n\n\"Wouldn't put it past you.\" Jimmy said.\n\n\"Yeah, 'cause I'm the big bad 'captor'. And don't think I don't know what you're doing.\" \n\n\"What-\"\n\n\"This was all too easy. You want her here so bad you're practically drooling.\" He walked away from the two of them. \n\nThe two girls were still giggling, but when the ape saw him approaching he hustled the blond girl toward a classroom. Neither one was willing to let go of the other though. \"Here's my cell number.\" The frail wrote something on the other girl's hand. \"Call me.\"\n\n\"Now Cassandra.\" There was an air of authority in the ape's voice. \n\nThey let go of each other and Kelly turned toward Victor. She smiled, but he could see the deep exhaustion etched on her face. He stroked her cheek. She put her hand on his wrist and kissed the heel of his hand. In spite of the ape's angry glare, he pulled the frail against his chest. He felt her relax against him, her arms around him, her hands stroking his back. For the first time in days, her scent sweetened and stayed that way for more than a few seconds.\n\n\"Are we leaving?\" She murmured.\n\n\"Not yet, frail.\"\n\nShe looked up at him. He couldn't miss the terror in her eyes. \"Why not? You said it was safer in-\" She glanced over her shoulder at the ape. \"Safer away from here.\"\n\nHe shrugged and led her back toward Jimmy and the old man, his body between her and the following ape. \"They got a hell of a system, nobody is gonna get to either one of us. 'Sides, you look like you ain't slept in about a month. A couple weeks' rest'll do you good.\"\n\n*~*~*~*~*~*\n\nKelly recognized one of the men they were approaching as Jimmy. His gaze was every bit as intense as it had been the night before. She held his eyes for a moment and then looked to the older man in a wheelchair. A small, kind smile curled the corners of his lips. His eyes were sharply appraising.\n\n\"You met Jimmy last night.\" Victor said.\n\n\"Logan.\" The other man corrected. \n\nKelly simply nodded. She would figure it out later.\n\n\"I'm Professor Charles Xavier. I'm pleased to see you looking so well.\" His smile widened.\n\nKelly managed a small smile, but she didn't move away from Victor. His hand rested on her waist.\n\n\"You got fifteen minutes,\" Victor said. Even though she was tired, Kelly knew he wasn't speaking to her.\n\n\"And if that isn't what Kelly wants?\" Hank said. She couldn't miss the venom in his eyes.\n\n\"Kelly can still hear you and she doesn't like being discussed as if she were a piece of furniture.\" She glared at the blue doctor. \n\nHe nodded. \"I apologize.\"\n\nThe professor watched her curiously. \n\nKelly gave a tiny smile to the doctor, then looked back at the professor. \"Frankly, I'm not sure how long I'm going to be able to hold an intelligent conversation, but I did want to thank you for letting us come here. I know I would have died otherwise.\"\n\nHe smiled warmly. \"You're quite welcome, Miss Demmer. I'd like to get to know you better, but you look as though you could use some rest.\"\n\nShe nodded. \"I'm sorry, I shouldn't be this tired.\"\n\n\"Yeah, you should.\" Victor said. She stroked the back of his hand. \"You gonna keep her standing here all day?\"\n\n\"There's an empty room on the second floor. You can rest there while the guest house is being prepared.\" He smiled again. Kelly looked up at Victor. He nodded.\n\nKelly didn't follow the conversation as Jimmy led them up stairways and through hallways that all looked much the same. She was certain that if she was left to herself, she would get lost within ten minutes.\n\n*~*~*~*~*~*\n\nCreed left the frail sleeping in a comfortable but bland room. She must have been exhausted; she was asleep as soon as her head hit the pillow. He stayed for awhile to make sure she wasn't going to wake up, then he forced himself to leave her long enough to call Conlon and make arrangements to get their luggage. He had every intention of cutting Conlon loose for the moment, but he figured that was something that could wait. It was pretty fucking obvious he didn't have a damn thing to do with what happened to the frail. Didn't make it alright, but it meant that Conlon might still be useful for awhile.\n\nWhen he got back to the quiet room, he opened the door to find the rumpled bed empty and the thick scent of terror in the air. He walked in slowly, scenting the air as he went, isolating the deepest pool of those pheromones. It took him only a moment to figure out that it was coming from under the bed. For a moment, the pain in his chest meant that he couldn't breathe. He pushed the feeling aside and shut the door. Didn't mean he had a goddamn idea what to do about it. He set their bags down, then he walked around the other side of the bed and sat on the floor.\n\n\"Just me frail.\" The scent of fear dissipated and shifted to something else more along the lines of humiliation. Nothing stirred at first, then she squirmed out from under the bed.\n\n\"I'm such an idiot.\" She tried to move past him.\n\nHe grasped her wrist, keeping her from escaping. \"You know what an air raid is?\"\n\nFor a moment, she tried to pull away. The struggle didn't last long, and she shrugged a little. \"When planes drop bombs.\"\n\nHe pulled her closer. This time she didn't resist, but she still didn't look him in the eyes. She snuggled against his chest. \"I'm guessing you never been in one.\"\n\n\"No.\" \n\nHe could feel her starting to relax. \"I was stationed in Europe during World War Two so I been through plenty of 'em.\" He started trailing his claws through her hair. \"Before anything exploded though, they'd set off these sirens to warn people to take cover. I hated those fucking sirens. Half the time I was shut up in a dark hole with a bunch of other assholes. Half the time I was behind enemy lines and then when the damn things went off it was worse.\"\n\nHer arm slid around his waist. \"Worse how?\" For the first time, her eyes flicked up at him.\n\n\"That ain't important. Point is, those fucking sirens made my life a living hell. When I got back to the states, I figured I'd left all that over there. Decided I wanted to live off the base for a change, so I got an apartment in town. Went okay for a week. Then in the middle of the night one of those fucking sirens went off again. Before I could think about where I was or whether or not it made sense, I was under the goddamn bed listening for bombs to start falling. Took me twenty minutes to realize that the war was over and that like a dumbass I'd moved in down the street from a fire station.\"\n\nShe was relaxed enough to look at him, but she didn't and he was grateful for that. She drew little circles on his stomach. \"How'd you get over it?\"\n\nHe shrugged. \"I moved.\"\n\nThis time she did look up at him. \"And?\"\n\n\"And what? I moved, no more siren. Eventually, they stopped blowing 'em at every fire.\"\n\nHe felt her tense, the scent of her anger started to tickle his sensitive nose. \"I can't move away from doors. Does that mean I'm going to be cowering for the rest of my life?\"\n\n\"I dunno.\" He rubbed the back of her neck and felt her relax again. \"I know this shit is like an infection in your brain though. Starts out fucking up one thing and if you avoid that one thing you're okay for awhile. Course it spreads and pretty soon something else is fucked up and it goes on like that until you're always running from something.\"\n\n\"So how do I fix it?\"\n\nHow the hell was he supposed to answer that? \"Hell if I know.\"\n\nShe looked up at him for a long moment, then she looked away and let her hair fall over her face. \"Whenever they would take me out of the cell, they'd shock me with something.\" Her voice was soft, almost inaudible. Didn't really matter, he had no fucking idea what he was going to say to her anyway. He stayed quiet and she went on. \"I don't know how long I had been there the first time, but the door hadn't really opened since I got there and then all of a sudden there were these men rushing in. I was too surprised to do anything but they shocked me with something. I don't know what they expected me to do. I hadn't eaten in awhile, hadn't really slept and there were always two or three of them. After that, every time they opened the door they'd shock me.\" He felt her start to tremble, then he caught the scent of her tears. \"At first I tried to rush past them somehow, even though I knew that would never work. Then I tried to be compliant, but that didn't work either. Hearing that lock turn...I got so scared. Toward the end I would try to hide or protect myself somehow. I guess I know that was stupid too.\"\n\nHe held back the growl that was forming in his chest. \"It was a tactic. They thought it'd soften you up and make you more willing to answer questions. Didn't work, so you fucked them over again.\"\n\nShe gave a short laugh. \"That's not how it felt at the time.\"\n\nHe took a handful of her hair and lifted her head so he could look into her eyes. \"Trust me frail, you won.\"\n\n\"Because you were there.\"\n\nHe shrugged. \"Course I was. You're my mate.\"\n\nShe looked at him curiously, a little smile tugged at her lips. \"Is that different than being yours?\"\n\nHe looked down at her hand resting on his stomach. Dumbass thing to say it that way. She'd reject him when she had a minute to process what he was saying. \"Mine is just until I say you're not. Mate's permanent.\" \n\nShe was silent and that silence was killing him. This was a bad idea. What the fuck did he know about this kind of emotional shit anyway? For all he knew, the old man could have been right and she was just trying to keep him happy so she wouldn't get hurt. He'd tell her he changed his mind. That he had a job and had to leave. Jimmy'd make sure she was taken care of-\n\nShe stroked his cheek and he looked at her. She was smiling wider, but tears were collecting in the corners of her eyes again. \"So 'mate' is definitely better.\"\n\nHe grinned and kissed her hard, his whole body aching for her.\n\n*~*~*~*~*~*\n\nKelly moaned into his mouth, her body arched against him. For a moment, the kiss was a passionate struggle between them, each wanting more of the other than mouths and hands could offer. His claws bit into her thigh hard enough to draw a whimper from Kelly. It fed her need and she surrendered. A fang grazed her inner lip. She pulled back just enough to graze his lower lip with her teeth. A growl and a groan got tangled in his throat. \n\nKelly smiled. \"Does that door lock?\"\n\n\"Fuck yes.\" A lusty growl laced his words.\n\nKelly wasn't certain how he sliced through her clothing or how she ended up on her back, but a moment later he was grinning down at her. \n\n\"This is not fair.\" She sat up enough to slide her hands under his shirt. He tugged it off and pushed her back down.\n\n\"You still thinkin' I gotta be fair?\" His lips teased her peaked nipples while one knuckle moved between her lower lips to tease her entrance. Kelly's fingers bit into his shoulders. \"Funny,\" the rough side of his tongue dragged across her nipple, then he sat up. He brought his finger to his mouth and licked her juices from it. \"You don't taste so outraged.\"\n\nNeedy as she was, Kelly blushed. She sat up again and stroked his thick erection through his sweats. \"You're not exactly uninterested yourself.\" \n\nHe growled deep in his chest. Kelly recognized the sound as pure pleasure. \"How d'you plan to fix that, frail?\"\n\nKelly pushed the pants over his hips, freeing the organ that was the focus of her attention. Both hands stroked its length. She couldn't resist a little smirk. \"Who said I was going to fix it? I thought I might just tease you for awhile.\"\n\nHe pushed her back. \"Think again, little girl. Offer me what's mine.\" A hungry grin was on his face. \n\nKelly opened herself wide and he grasped her thighs, spreading her wider. She reached between them guiding him to her entrance. For a long moment he stayed still, looking down into her eyes. She saw something akin to uncertainty flicker across his face. \"I need to feel you inside me.\" The intensity in her voice was not masked by the soft tone.\n\nHe didn't hesitate any longer. He was deep inside her in one swift movement that made Kelly cry out. She arched her back, pushing up against him hungrily. At first, she met his movements, but Victor's aggression soon outstripped hers. Again she surrendered. To him, to his need and to the rapidly cresting pleasure that he so skillfully drew from her body."
    ],
    "authorname": "psyche_b_mused",
    "tags": [
        "victor creed",
        "mutant",
        "human",
        "recovery"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/what-the-cat-dragged-in-ch-23"
}
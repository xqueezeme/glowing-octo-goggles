{
    "title": "Her Governess Ch. 05",
    "pages": [
        "Author's Note:\n\nWow - almost 70,000 words later, we've come to the end of this tale! I couldn't have done it without the feedback and encouragement of my readers. I don't have an editor or any friends in the \"writing business\", so you readers were my lifelines as I pushed myself to meet some pretty aggressive writing deadlines. Thank you a thousand times for your kind words, your constructive criticisms, your generous votes and plentiful emails. I'm more grateful that you can imagine.\n\nThis is the final chapter in the fictional story of a D/s relationship between consenting adult women. As always, I welcome and crave your feedback and participation.\n\np.s. also, I REALLY enjoyed all the creative ideas for what should happen to Chad!\n\n*\n\nThere was a knock at the apartment door. Jaycee had arrived, ostensibly to help Ashley get dressed and made up for the collaring ceremony. \n\nShe'd visited several times since the MAMM party, usually when her husband John was working the overnight shift at the police station. Ash had spent a couple of afternoons at the Sato residence as well, and the two young women had gone out to dinner and bowling together. It gave Kara real satisfaction to see the close, playful friendship the two of them had developed\n\n\"May I be excused to answer the door, Mistress?\" Ashley said, and the eagerness in her voice was impossible to conceal. \n\nThey were in the living room. Her slave was sitting on a low stool in front of the couch. She wore black bikini briefs and a gauzy charcoal-coloured scarf that was wrapped over her breasts and knotted at her back. Her 'house uniform'. \n\nKara's feet rested on a soft blanket in Ash's lap as the young woman carefully painted her nails a brilliant red. The left foot was finished, and the right foot half-done. The pedicure had taken the better part of an hour - Ashley had wanted to give Kara the full spa treatment, complete with a soak in the warm, vibrating foot basin that the younger woman had bought with her own money. It was only the third time Ash had tried the pedicure, and already Kara was impressed by her technique. She was skilled with her hands.\n\nKara nodded and Ashley stood and gently set Kara's feet on the stool, then hurried to the door. Out of sight of the living room, there were squeals of delight as Ash and Jaycee greeted.\n\n\"Woo, sexy,\" Jaycee said, the tease in her voice obvious.\n\n\"Jealous?\" Ashley shot back. \n\nThe first time Jaycee had visited, Ashley had been a little shy about wearing only panties and a semi-transparent top, but time and familiarity had erased any modesty she felt around Jaycee. She'd even shown Jaycee her unsightly tattoos - a sure sign of emerging trust and confidence.\n\nThe two submissives entered the living room. Jaycee was slim and graceful in yoga pants and a loose, airy drape shirt worn over a tight, white athletic tank. She carried a leafy fern in a white ceramic pot.\n\n\"Good afternoon, Mrs. Meadows. Thank you for having me in your home,\" she said, making a low, formal bow as she spoke.\n\n\"Hey, Jaycee. Sorry for not getting up, and for my...informal...dress,\" Kara said, gesturing at her white bathrobe. She'd had a steamy shower and hadn't bothered to dress before Ash's pedicure. \"Thank you for the beautiful fern.\"\n\n\"I know you didn't want gifts, but we had to get you SOMETHING to commemorate the occasion. Are you ready for the big event?\" Jaycee asked. Ash took the fern from her and found a spot for it next to a sunny window.\n\n\"Just about. I'm really looking forward to the ceremony.\"\n\n\"Master John sends his regrets at not being able to attend. He's working the overnight and won't be off until three in the morning.\"\n\n\"Well, at least his better half will be there,\" Kara said with a wink. Jaycee responded with a cheerful smile. Kara gestured to a nearby loveseat and their guest sat down.\n\n\"I'm sorry for the interruption, Mistress. May I please continue?\" Ash asked.\n\n\"Please do.\"\n\nAshley resumed her seat and continued applying the nail polish to Kara's toes, and for a while there was a comfortable silence. \n\n\"It's been ages since I had a pedicure,\" Jaycee said, with a longing gaze at Kara's feet.\n\n\"Would John be interested in learning? Ash could teach him.\"\n\nJaycee laughed. \"I suppose it wouldn't hurt to ask him, right?\"\n\n\"So what have you got in store for my pretty slave girl this afternoon?\" Kara asked. She noted the faint, pink blush on Ashley's cheeks. The younger woman was still getting used to compliments.\n\n\"Well, with your permission, ma'am, I'm thinking a French braid. I'd also like to paint her fingernails and toenails. What else were you thinking? Master John has put me at your disposal for the afternoon.\"\n\n\"I'd like to go light on the makeup,\" Kara said, leaning forward and stroking Ashley's face with her palm. Her slave paused the pedicure long enough to close her eyes and sigh at the contact. \"She's already got lovely skin, and I don't want to draw attention away from those heavenly eyes.\"\n\n\"Thank you, Mistress,\" Ashley said. Her blush deepened.\n\n\"It's not fair, Ash,\" Jaycee said with an exaggerated pout. \"Do you know how hard I have to fish for a compliment at home? And here your Mistress is just giving them out for free!\"\n\n\"Maybe Mistress Kara could let Mr. Sato know you were complaining about it,\" Ash said lightly. \"I'm sure he'd give you plenty of...attention...after that.\"\n\n\"Mmm. Maybe he would,\" Jaycee agreed with a mischievous wink.\n\nA few minutes later, the pedicure was complete and Ashley packed up her supplies and stored them in the bathroom cabinet, then returned to the living room.\n\n\"Mistress, may I please be excused so I can show Jaycee my dress and start getting ready for the ceremony?\" she asked.\n\n\"Please bring me a coffee first. After that, the rest of the afternoon is yours.\"\n\n\"Thank you, Mistress.\"\n\n*\n\n\"What are you doing?\" Ashley shrieked. Her gleeful voice was loud even through the closed bathroom door.\n\n\"Don't be such a prude. I'm just scrubbing your back. It's traditional, back home,\" Jaycee said.\n\n\"Hey! That's NOT my back!\" Ash yelled in mock outrage.\n\n\"Sorry...my hand slipped.\" Jaycee laughed.\n\n\"Yeah, I'm sure,\" Ash said, breaking into a fit of giggles, soon followed by another squeal.\n\n\"Do you want to be clean for your collaring, or not?\"\n\n\"That tickles!\"\n\n\"You're such a big baby...\"\n\nSitting on the couch in the living room, Kara couldn't suppress a chuckle of her own. Ashley was almost twenty-two and Jaycee twenty-nine, but when the two of them started goofing around they became a couple of ten year-olds. \n\nThe sound of Ash's silly, uninhibited laughter always brought a smile. Kara had never evoked that kind of laugh from her young slave, and she was thrilled that Jaycee was the kind of friend that could draw those delighted sounds out of her.\n\nThe shrieking and giddy noises continued for ten more minutes before Kara decided to put a stop to it - she didn't want complaints from the neighbors, after all. Plus, they had to be at Bev's for the collaring in a few hours and at the rate things were going, Ash wouldn't be ready in time.\n\nShe stepped into the steamy bathroom. Through the frosted glass door of the shower stall she saw two blurry, naked bodies. Both Ash and Jaycee were slim and had long, black hair. Ash's skin was lighter and Jaycee was an inch taller, but they could easily have passed for twin sisters through the shower door.\n\n\"Ash, I want to see you standing in your bedroom in ten minutes, ready for an Inspection,\" Kara said in her best Domme voice. \"And Jaycee, let's have you out of the shower now. Leave the poor girl alone.\"\n\n\"Yes, Mistress.\"\n\n\"Yes, Mrs. Meadows.\"\n\nKara briefly considered staying to watch Jaycee emerge and dry off, but she decided to give her some privacy. She'd seen the young submissive undressed a few times already during MAMM events; Jaycee usually ended up bare-bottomed and bent over Master John's knee at least once per party. Kara got the sense that Jaycee enjoyed playing the brat, and enjoyed suffering the consequences even more!\n\nKara brought her empty coffee cup to the kitchen and gave it a quick rinse. Jaycee met her there a few minutes later, fully dressed and running a towel over her beautiful, black hair.\n\n\"Sorry about that, ma'am. We get a bit carried away, I guess.\"\n\n\"Don't apologize. It's wonderful to hear the two of you getting along so well,\" Kara said.\n\nJaycee was quiet for a moment. \"You know, I have a ton of friends. Some I've known for years, some I even grew up with. But...I only have one friend like Ash. I don't giggle like that with my other friends. I don't frolic in the shower with them, either.\"\n\n\"She's special, that's for sure.\"\n\n\"I hope I'm not out of line when I say this, but she practically worships you. When she's over at our house, you're all she talks about.\"\n\n\"I adore her,\" Kara said, then gave a mischievous smile. \"And I enjoy frolicking in the shower with her, too!\"\n\nJaycee laughed, and there was another pause that didn't feel uncomfortable.\n\n\"So what's it like, ma'am? A former submissive, crossing over to the other side?\"\n\n\"It's...different. I used to think it would be easy to be the one in charge, but it's harder than it looks. It's fun and rewarding, though. Especially with a partner like Ashley.\"\n\nJaycee smiled at that. \"You know, when I would see you at the MAMM parties with Master Peter, I always felt a little jealous of you. Not in a bad way - not resentful or anything. It's just...you're beautiful, and have a lovely figure, and you were so graceful, and so loving with him. I was envious of how natural your submission looked, and how you and Master Peter seemed to 'flow' together effortlessly. You were a role model for me, to be honest.\"\n\nKara nodded, feeling both flattered and suddenly nostalgic for those sweet moments with her husband and Master. She lingered for a while in the memories of those happy times.\n\nJaycee met Kara's eyes and held them warmly. \"And now, when I hear Ash rave about the amazing Mistress Kara, I find myself getting a little jealous again...of Ashley!\"\n\n\"That's a lovely thing to say, Jaycee. Thank you,\" Kara said, reaching out and squeezing the younger woman's hand. \"I didn't know you were so sentimental!\"\n\n\"It's a sentimental day for you. I thought it would be a good time to say it.\"\n\n\"Mistress, I'm ready for Inspection,\" Ashley called from her bedroom.\n\n\"Inspection?\" Jaycee asked, her lips already turning up into a delighted grin.\n\nKara just winked and led the way to Ashley's bedroom.\n\nHer slave was naked but for her collar, hair still damp, standing straight with her feet apart and her wrists crossed at the small of her back. She blushed an adorable pink when she saw Jaycee lingering in the doorway.\n\n\"Will Jaycee be watching, Mistress?\"\n\n\"I haven't decided,\" Kara said, making a slow circle around the naked young woman. \"Did you have a preference?\"\n\nTwo months ago Kara would never have considered allowing an audience when Ashley was naked and serving. But over time, Ash had found her voice, and now Kara trusted her to speak up or even safeword if she got too uncomfortable. It was that trust that allowed Kara the freedom to experiment, to push Ash's limits and explore different avenues of pleasure and submission for her. \n\nPlus, the two young submissives were no strangers to seeing each other naked...\n\n\"No, Mistress. I don't have a preference.\" The younger woman went an even deeper pink.\n\n\"Then since she's already here, I suppose I'll allow her to stay,\" Kara said, then aimed a meaningful look at Jaycee. \"Assuming she's quiet and well-behaved, of course.\"\n\n\"Yes, Mrs. Meadows. I promise.\" Jaycee said, not even trying to conceal her gleeful, almost evil smile.\n\nKara stopped in front of her slave. \"Teeth,\" she said in a soft-yet-commanding tone.\n\nAshley clenched her jaw and pulled her lips back in an exaggerated smile, exposing her teeth. \n\n\"Open.\"\n\nThe younger woman opened wide and tilted her head back to give her owner a clear view of the inside of her mouth.\n\n\"That's good. Breathe.\"\n\nAshley exhaled slowly and Kara sniffed. Her slave had brushed, flossed and rinsed with mouthwash, as expected.\n\n\"What should I be smelling?\" Kara asked, more for Jaycee's benefit.\n\n\"Toothpaste and mouthwash, Mistress.\"\n\nKara nodded, then gripped Ash's chin gently between thumb and forefinger and used her hold to turn her head left and right to inspect the inside of her ears. Satisfied, she took a moment to gaze into her slave's pretty eyes, and stroked her cheek with light fingertips. The touch brought an immediate smile.\n\nThe 'Inspection' was something original that Kara had come up with herself almost a month ago, and she was secretly proud of how well it worked. It was intimate and loving, it strongly demonstrated her dominance of Ash, and it put her slave into a deeply submissive - and highly aroused - state. She didn't Inspect her slave every day, but used it a couple of times per week to reinforce their respective roles. Master Peter would have been proud of her innovation.\n\n\"Arms up,\" Kara ordered.\n\nAshley raised her arms straight up over her head.\n\nKara ran her fingertips gently over Ashley's left armpit, pressing just hard enough not to tickle, feeling for stubble or any missed hairs. She took her time, exploring the area from the side of Ash's petite breast up to her bicep and back down again. The skin was smooth and soft and warm.\n\nFinally satisfied the area was perfectly shaved, she stopped the caress, lowered her nose to the armpit and inhaled deeply. Ash had an enticing smell - soap mingled with her own unique, delicate fragrance.\n\n\"How should you smell?\"\n\n\"Faintly of soap, Mistress.\"\n\nKara moved to the right armpit and repeated the leisurely caress and the sniff test. When she pulled back, Ashley's blush had spread down her neck to her collarbone and she was breathing through her mouth.\n\n\"Well done. Hands down now.\"\n\nAshley again crossed her wrists behind her.\n\nKara ran her warm palms over Ashley's shoulders, her collarbone, then down to her breasts. She cupped them and gave a gentle squeeze, then tweaked her stiff nipples between thumb and forefinger, pulling an involuntary sigh from the younger woman. Kara ran her hands further down, over her rib cage, her belly, then her hips.\n\n\"Spread,\" Kara commanded.\n\nAshley widened her stance just a little, darting a shy glance at Jaycee, who was leaning in the doorway wearing a broad grin.\n\n\"Where are your eyes?\" Kara asked, putting an edge into the question.\n\nAsh's gaze snapped back to her owner' face. \"I'm sorry, Mistress.\"\n\n\"You were told to spread.\"\n\n\"Yes, Mistress. I apologize.\" She moved her feet far apart - twice her shoulder width.\n\nKara ran her fingertips over the soft skin below Ashley's navel, then lower to her pubic mound, probing for any sign of sloppy shaving habits. The area was perfectly smooth, so Kara explored further, stroking Ash's sensitive labia, down to her perineum, then back up. She felt her young slave quiver at the contact, and knew she was resisting the urge to roll her hips forward to press against the feather touches.\n\nShe continued to stroke, teasing now more than inspecting, and lowered her voice to a whisper that only Ashley could hear.\n\n\"Two long weeks, my horny slave girl. Are you feeling it?\"\n\nAsh nodded. Her face was red, and the flush had spread down her chest to the tops of her breasts. It had been two weeks since Kara had allowed her slave to orgasm - she'd wanted the night of Ashley's collaring to be especially 'memorable'.\n\n\"Show me what a good girl you can be, and tonight...maybe...\" Kara whispered, then pulled her hand away, ending the caress.\n\nThe younger woman gave a quiet moan, then went an even deeper red when she realized it had been loud enough for Jaycee to hear.\n\nKara crouched in front of the naked slave, brought her nose close to her pussy, and inhaled. When she exhaled, she made sure to bathe Ashley's thighs with hot breath.\n\n\"How should you smell?\"\n\nAsh hesitated before replying. \"Clean and...wet, Mistress.\"\n\nKara stood and walked slowly behind her slave. She gave a quick look at Jaycee and found her smile had faded and she was staring intently at the scene in front of her, transfixed. Kara fought to suppress a smile when she noted that Jaycee was breathing through her mouth, too - Jaycee and Ash were more alike than Kara had realized!\n\nWhen she was directly behind Ashley, Kara paused a for couple of beats to let the tension build. It was a trick Peter had used to great effect, and Kara had adopted it as well.\n\n\"Spread.\"\n\nThere was no hesitation now; Ash reached behind her with both hands, pulled her cheeks apart as wide as they would go and arched her back to present her rear pucker lewdly.\n\nKara crouched and brought her nose down to Ashley's widespread buttocks and inhaled. She was sure to buffet her slave's tight bum hole with hot air when she breathed out. \n\n\"How should you smell?\" Kara asked.\n\n\"Faintly of soap, Mistress.\" Ash's voice was low and coarse with lust.\n\nThe sweet scent of the younger woman's soaking pussy was all Kara could smell. It was usually that way during an Inspection. She stood up again.\n\n\"How deeply did you clean?\"\n\n\"To...to the second knuckle, Mistress.\"\n\nKara reached around and slid her right index finger into Ashley's warm mouth. Her slave girl immediately sealed her lips around it and lashed it hungrily with her tongue. Kara didn't know if Ash's eyes were closed, or whether they were locked on to Jaycee's. \n\nWhen the finger was sufficiently wet, Kara stroked it over her Ashley's tight anal ring, as much to sensitize it as to lubricate it, then slowly penetrated her. Ash gave another low moan, louder this time.\n\nKara didn't go deep, just to the second knuckle, then worked her finger in and out gently.\n\n\"Well done. Perfectly clean,\" she said, stimulating her young slave for another moment, then withdrawing. Ash returned her hands to the small of her back automatically.\n\n\"Thank you, Mistress.\" Ashley's breathing was audible in the quiet room.\n\nKara crouched and grasped Ash's right ankle between her palms, ran her hands up her leg to the tops of her thighs, making sure to graze her labia with the side of her hand at the top of the stroke, then ran her hands back down to the ankle again. She did this a couple of times, slowly, then switched to the left leg.\n\n\"You missed a spot,\" Kara said, tapping a tiny patch of stubble on the far side of Ashley's left thigh - a tricky spot for a right-handed woman to reach with the razor. It was a nit-picky complaint, but that was the whole point of an Inspection.\n\nWith her hands on Ashley's leg she could feel the excited quiver run through the younger woman's body.\n\n\"I'm very sorry, Mistress. Can I please fetch the paddle for you?\" The eagerness in her slave's voice pleased her. Far from being terrified by the breast paddle, Ashley seemed to crave it, when she was properly heated up.\n\nKara pretended to think about it for several long moments.\n\n\"I don't want to mark you up before the collaring ceremony,\" she said at last. \"But when we get back, remind me you have some strokes coming.\"\n\n\"Yes, Mistress. Thank you.\"\n\nKara stood up and walked around to look into Ashley's pretty eyes again. \"You pass the Inspection, with one demerit.\" She bent and pressed a kiss against her slave's forehead.\n\n\"Thank you for taking the time to Inspect me, Mistress.\"\n\nKara turned to face Jaycee, whose expression was one of undisguised lust.\n\n\"So, what did you think?\" she asked, lightly.\n\nJaycee realized she was staring and gave up a lovely blush, then an excited smile.\n\n\"Mrs. Meadows, could you PLEASE tell Master John how to do that?\"\n\nKara laughed, then put on a semi-serious expression.",
        "\"Ashley needs her hair and nails done, then she needs to get dressed.\" Kara turned back to face her naked, flushed slave girl. \"I expect you dressed and made up within the hour. Then you may practice your vows. Is that clear?\"\n\n\"Yes, Mistress. Very clear.\"\n\n*\n\n\"The guests are assembling downstairs,\" Kara said. \"Looks like it's almost a full house.\"\n\n\"I guess it's almost time,\" Ashley said, and her weak smile betrayed a little nervousness.\n\nKara had dressed her slave in a simple white, cotton sundress with spaghetti straps. She liked how it was form-fitting around Ash's narrow waist but flared out just a little as it draped to her knees. She was barefoot, but Jaycee had done a good job filing and painting Ashley's toenails a glittering white, and also putting Ash's hair into a tight, neat French braid that tapered off between Ashley's shoulder blades. A heavy dose of makeup had covered up the ugly tattoo on the back of her neck.\n\nAsh still wore her black, leather collar with the silver buckle, but only for a few minutes longer. She'd be getting a permanent one before the evening ended.\n\nThe two of them were waiting in a guest bedroom in Bev Flannigan's expansive house, preparing to make their 'grand entrance'.\n\n\"Take a deep breath,\" Kara said. \"Always breathe.\"\n\nAshley obeyed, then exhaled slowly. \"I hope I remember my vows.\"\n\n\"If you forget, just make something up.\"\n\n\"Mistress! I couldn't - not for something this important!\"\n\n\"What's important is what's in your heart. You'll do fine.\" Kara caressed the younger woman's face with her palm. Ash leaned in, enjoying the contact.\n\n\"Were you nervous before your collaring ceremony?\"\n\n\"A little. It was a mix of excitement and nervousness, I think. It was hard to feel truly anxious when Peter was around - his presence was very reassuring. Plus, he looked so handsome in his suit. He even wore a tie.\"\n\nAshley grinned, and some of her nervousness disappeared. \"Well, I think you've got him beat. You look incredible - like some kind of Greek goddess.\"\n\nKara had fallen in love with her long, flowing, toga-style dress at first sight. Pure white, it left one shoulder bare, gathered under the bust and then flowed loosely to her ankles. Twin slits ran up either side to mid-thigh. It was light and breezy. It felt sexy to wear it - without a bra, her breasts bounced and quivered with each step. She'd chosen low, white heels to go with it.\n\n\"Thanks. You look absolutely lovely, too. Jaycee did a great job on your hair and nails...eventually,\" Kara said, putting emphasis on the last word. The two slaves had spent more time giggling than dressing.\n\n\"It's not my fault! She kept tickling me,\" Ash said, though her toothy smile made a lie of her protests.\n\n\"Uh-huh.\" Kara didn't pursue the matter further. \n\nThen there was a quiet knock on the door, and Bev poked her head inside the room.\n\n\"We're all ready down there,\" she said. \"Oh, you both look so lovely! Jaycee's ready to take lots of pictures, and I've got the video camera up on the tripod.\"\n\n\"Thank you, Bev, for everything. We'll be right down,\" Kara said. \n\nThe older woman left, and Kara turned back to Ashley.\n\n\"Show time. Are you ready?\"\n\n\"Yeah. I hope so.\"\n\nKara stepped close and pressed a slow, soft kiss to Ashley's lips, and felt the younger woman yield to the gentle touch. When Kara stepped back, Ash looked stronger. \n\nKara picked the leash up off the bedspread and deftly clipped it to the ring on Ash's collar. \n\n\"Okay, just like we rehearsed.\"\n\n\"Yes, Mistress.\"\n\nKara led her barefoot slave out of the guest room by the leash and slowly down the winding staircase.\n\nBev's living room was a huge, open-concept area with rich, brown hardwood; thick tan-leather couches; gorgeous floor-to-ceiling windows and a tile-and-brick fireplace. They'd moved the furniture to the sides of the room, leaving only a padded armchair in the centre with a white pillow on the floor in front of it. White flowers were arranged throughout the room - roses, irises and carnations. \n\nTen formally-dressed MAMM couples had shown up and stood at the front of the room. Kara's sister and her husband had been invited but had politely declined; they needed a little more time to acclimatize to the 'new' Kara. And that was fine.\n\nHarold Sachs and his thin, dark-haired partner Phil were there too, in matching white, sequinned tuxedos. Kara couldn't suppress a grin upon seeing her oldest friend - who but Harold could affect such a dignified expression while wearing an outlandish getup like that? \n\nChoosing him as the MC of the ceremony had been a calculated risk - he was a dear, long-standing friend, but his irrepressible sense of humour could easily shred any sense of solemnity for the evening. She'd made him promise to rein it in a little, at least until the vows were finished.\n\nKara led her leashed slave girl into the room. There was a muted murmur of approval from their gathered friends. Jaycee was snapping pics with her camera. Kara sat in the armchair, and Ashley knelt on the pillow at her feet, spreading her dress out over her legs. The younger woman's beautiful eyes never left Kara's face as she knelt.\n\nKara had been to five or six collaring ceremonies in her time with Peter. Each of them had been different and meaningful in their own way. A couple of them had been wedding-calibre events, with long, formal vows and a catered dinner afterwards. Some had been simple affairs. One had a heavy sadomasochistic theme, complete with ceremonial whipping and an exchange of blood via pin-pricked fingers. One of them had been so 'vanilla' that a casual onlooker might not have realized the participants were Mistress and slave. \n\nFor Ashley's collaring, Kara wanted a ceremony that reflected their relationship and set the tone for their future together. The leash featured prominently in the ceremony because it was a regular part of their playtime together. \n\nAsh, for her part, had been content to let Kara make the decisions and shape the ceremony. That, too, was part of who they were as a couple. Ashley was comfortable speaking up to express her likes and dislikes, but preferred her Mistress to do most of the heavy lifting, decision-wise. \n\nHarold stepped forward, coming to the side of Kara's chair, facing the assembled guests.\n\n\"We're here today to witness the collaring of slave Ashley by Mistress Kara,\" he said in a deep, formal-sounding voice. \"So if you were expecting a Tupperware party, you've come to the wrong address.\"\n\nThe deadpan joke got a good laugh from the small crowd.\n\n\"Harold...\" Kara said quietly, but with a note of warning. \n\n\"Yes, yes, sorry,\" he said, waving the joke aside with his hand, then resumed his remarks. \"I've known Kara for years. I was there when she'd just met Peter, and I watched them fall in love. I was at Kara's collaring ceremony and her wedding. I've seen her grow and blossom; seen her get stronger and more beautiful with every passing year. I was at Peter's funeral. And I was there at the Masquerade when, despite the depth of her own pain and grief, Kara summoned the courage and strength to save the life of our young Ashley.\"\n\nKara felt tears welling at the lovely words. She didn't want to cry so early in the ceremony! Ashley's eyes were watery, too.\n\n\"It was the bravest, most remarkable thing I've seen in all my thirty-two years on this earth.\"\n\nAnother gale of laughter erupted at the septuagenarian's joke. Even Kara chuckled, before she could think to stop herself.\n\n\"And now, my beautiful Kara has come full circle, and will collar a slave of her own. I've come to know Ashley well - she's a frequent visitor at my coffee shop, Bean Naughty, down on Eighth and Green. Open till three in the morning. Don't forget to ask about our dessert specials!\"\n\n\"Harold...\" Kara growled, to the crowd's general amusement.\n\n\"Right, right,\" he said, then continued. \"I've seen Ashley grow, too. At first she was uncertain and jumpy, but still eager to serve; earnest and exuberant. Each time she would visit, she'd be more graceful, more comfortable, and more confident. It was obvious she had strong feelings for Kara, and equally obvious that Kara had quickly come to reciprocate those feelings. Ashley's kind heart and genuine love were slowly healing Kara's deep wounds, and my soul warmed a little more each time I saw them together.\"\n\nAshley was close to crying as she gazed up at her Mistress, and that triggered a welling of emotion inside Kara as well. Harold had them see-sawing between laughter and tears!\n\nHe cleared his throat. \"Does anyone here know any reason why Mistress Kara should not collar her girl Ashley?\"\n\nNo one said anything.\n\n\"Well, then, I'll pass it over to Kara.\" Harold patted Kara's bare shoulder gently, then returned to Phil's side, among the MAMM invitees.\n\nThe room was quiet.\n\nKara raised her left foot, and Ashley took it in her hands, then un-strapped and removed the white, low-heeled shoe. With a cute, pink blush, she raised Kara's bare foot to her lips and kissed the tops of her toes, her gaze never leaving her Mistress' face. Ash's hands felt a little cold and clammy, but when she started the massage, her touch was skillful and confident.\n\nKara took a moment to steady herself, and to bring to mind what she wanted to say. She looked down into Ashley's eyes.\n\n\"When Peter died, I was lost. I didn't know who I was anymore, or what my purpose was. I had lived for him, and with his passing, I had nothing to live for. I was trapped in a gloomy existence and there didn't seem to be any way out.\" The tears came then, but she didn't try to stop them, only took a moment to calm her voice.\n\nShe reached down and stroked Ashley's cheek. \"You fixed all that, Ashley. You gave me a purpose. You gave me a reason to live. You filled my life with energy, emotion and intimacy. You challenged me with a new role and helped me to grow. And through my relationship with you, I forged an even deeper connection with my departed husband and Master.\"\n\nAshley was crying now too, silently. Her hands were warmer now on Kara's feet.\n\n\"You're a beautiful woman with an unbreakable spirit and a heart free of malice and deception. Thank you for trusting me. Thank you for being patient with me as I learned and made mistakes. Thank you for serving me with such devotion. Thank you for loving me, and making it so easy to love you back. Thank you for accepting my collar this evening.\"\n\nThere was silence after Kara finished. She sniffed and wiped her eyes. Thank God for waterproof makeup.\n\nAshley sniffed back tears as well. She raised Kara's left foot and gave it another slow kiss, then rested it in her lap. She removed Kara's right shoe, kissed her toes reverently, and began to rub and knead her foot expertly.\n\nA moment later, she spoke.\n\n\"You saved my life, for real. I'd be dead if not for you. I'd have died at the Masquerade, or maybe froze to death after I ran away from Chad. You took me in and gave me someplace to stay, and you were so nice...it was like meeting an angel. That's how it felt to me, anyway. And you said you could get me back to that warm, submissive place inside me and...you did! Like, for three years I suffered and struggled and hoped, but as soon as you became my Governess, you got me there right away.\"\n\nAshley raised Kara's foot and gave it another long kiss, which wasn't part of the ceremony but seemed to be something she needed right then.\n\n\"And even though you used to be a submissive, I could see you were working hard to be a great Dominant. Working so hard, just for me. And you became, like, the most awesome Mistress ever. When you take control...and your Domme voice...it does crazy things to me! I can't get enough of you. And you're calm and so smart; I can trust you to know what's right. I know when I put myself in your hands, it's going to be great. Never scary or anything like that.\"\n\nAshley raised Kara's foot and gently rubbed her tear-streaked cheek over it.\n\n\"So, thank you for all those things. Thanks for letting me be who I'm really supposed to be. Thanks for showing me all sorts of stuff, and making me feel happy all the time. I love you and I want to serve you forever.\"\n\nAshley planted another soft kiss on Kara's right foot, then lowered it to her lap and started to put the white heels back on her Mistress' bare feet. There was only silence in the room.\n\nHarold stepped forward again, this time holding a small silk-wrapped bundle. He handed it to Kara, then faced the guests.\n\n\"A collar is a symbol of ownership, representing both the slave's desire to be owned, and the Mistress' desire to claim the one being collared. It's a pact; a long-term commitment. It's serious and meaningful. We'll now begin the vows and collaring.\"\n\nHarold stepped back and Kara rested the silk bundle on her lap. She leaned forward and gently unbuckled Ashley's leather collar, then removed it entirely and detached the leash. It was easy to read the conflicted look in her slave's lovely eyes - she'd been emotionally attached to that collar since the afternoon Kara had given it to her. Kara could empathize with the feeling.\n\nKara stroked Ash's face again before speaking.\n\n\"Ashley Mallory, I desire to claim you as my slave. I pledge to love you, protect you, guide you and nurture you. I will rule your body, mind and heart. I will set high standards for you, discipline you if you falter, and encourage you to improve yourself for the future. And I will do everything in my power to help you achieve your highest potential and reach your dreams. Do you accept my collar?\"\n\nAshley's emerald eyes overflowed, and it was a few moments before she could compose herself enough to speak her vows.\n\n\"Kara Meadows, I accept your collar and acknowledge you as my Mistress. I freely yield to you my body, mind and heart. I pledge to submit to your will, obey your words and devote myself to your well-being and pleasure.\"\n\nKara couldn't help a big grin; Ashley had remembered - and spoken - her lines perfectly.\n\nKara unwrapped the new collar from the silk covering and showed it to Ashley for the first time. \n\nAn inch-wide band of high-gloss, stainless steel with an inset o-ring at the front; the collar was beautiful without being flashy or ostentatious. Much like Ashley herself. Best of all, the Allen-key screws were tucked away on the \"skin side\" of the collar; from the outside it appeared to be a smooth, shiny, unbroken band of steel. It was a 24/7 collar, and could be worn in bed and in the shower, wouldn't be damaged by water or sweat and wouldn't be abrasive or allergenic against her slave girl's soft skin.\n\nKara kissed the collar, then fastened it around Ashley's neck. The measurements had been perfect - Kara knew her slave liked the collar a little on the 'tight' side and had allowed just enough room between the collar and her neck to allow for proper washing. It took a minute to tighten the twin screws with the Allen key, then she sat back in the armchair.\n\nAshley fingered the smooth, metal strip. Her eyes were wide and wet.\n\nAt last, Kara picked up the leash and looked deeply into Ash's eyes. \n\n\"I now claim you, Ashley. You are my slave, now and forever,\" she said. The leash clicked into place around the o-ring on her slave's new collar, and Kara used the thin chain to draw Ashley in for a soft, slow, deep kiss. Her young slave returned it happily.\n\nThe guests clapped and cheered and wolf-whistled. Harold stepped forward to speak again.\n\n\"I will now read the seven Articles in the Mistress-slave contract. After each Article, Mistress Kara and her slave Ashley will indicate their acceptance of the terms. With the verbal agreements in place, both Mistress Kara and her slave will sign the contract, with myself and the lovely Mrs. Flannigan as witnesses,\" Harold announced, holding up the single-page contract.\n\nKara stood up, leash in hand, as Ashley knelt on the cushion beside her. \n\nHarold cleared his throat and adjusted the glasses on his nose. Kara uttered a silent prayer that he would read the Articles without undue comedy.\n\n\"First, the Article of Exclusivity: Mistress Kara will not have other submissives, nor will Ashley serve other dominants except in the presence of Mistress Kara.\"\n\n\"I accept,\" Kara and Ashley spoke in unison.\n\n\"Second, the Article of Dominance: Mistress Kara accepts her authority over Ashley, and shall exercise this authority in a manner that prioritizes Ashley's safety, security, health and emotional well-being.\"\n\n\"I accept.\"\n\n\"Third, the Article of Submission: Ashley accepts Mistress Kara's authority over her, including her Mistress' right to set and strictly enforce rules, administer discipline, and to make decisions regarding Ashley's behaviour, dress, sexual activity and lifestyle. As of January 1, Mistress Kara will additionally assume control of Ashley's career, financial affairs and long-term best interests.\"\n\n\"I accept.\" The final sentence had been the result of long discussion with her over-eager slave. Kara hadn't wanted control of Ash's finances, but in the end they'd agreed to 'phase in' that language at the beginning of the next year. It was still a huge responsibility, and Kara hoped she'd be ready for it when the new year rolled around.\n\n\"Fourth, the Article of Obedience: Ashley will obey Mistress Kara at all times. Ashley reserves the right to safeword at any time.\"\n\n\"I accept.\"\n\n\"Fifth, the Article of Honesty: both Mistress Kara and Ashley will communicate honestly and avoid deception.\"\n\n\"I accept.\"\n\n\"Sixth, the Article of Diligence: both Mistress Kara and Ashley will execute their roles and responsibilities to the best of their ability.\"\n\n\"I accept.\"\n\n\"Seventh, the Article of Openness: both Mistress Kara and Ashley Kara will embrace experimentation, learning and understanding. They will continue to grow in their respective roles and in the relationship they share.\"\n\n\"I accept.\"\n\n\"Ladies and gentlemen, both Mistress Kara and her slave Ashley have accepted the Articles in the agreement. We are all witness to the oath they've taken this evening. And with that, I declare the ceremony complete. Ashley shall now be recognized by all as the slave of Mistress Kara.\"\n\nThere was clapping and cheers. Harold leaned over and gave Kara an affectionate peck on the cheek and patted Ashley's shoulder. The other guests crowded around, offering kisses, handshakes and well-wishes. Kara tugged up gently on the leash, bringing Ashley to her feet to receive the congratulations.\n\n\"Folks,\" Kara called, raising her voice above the din. \"There are drinks, sandwiches and snacks in the kitchen. We'll mingle for an hour or so, and then I'd like to invite everyone back to the living room for a very...unique... guestbook signing.\"\n\nThe guests slowly filed past, and Kara and Ashley spent several minutes shaking hands and expressing their thanks.\n\n\"You guys did great!\" Jaycee said, wiping away tears as she approached.\n\n\"I was sure I'd forget my lines,\" Ash said, beaming with mixed pride and relief.\n\n\"Your collar is so beautiful!\"\n\nAshley was absently running her fingertips over the smooth steel. She looked up at Kara. \"This is beyond amazing. Thank you, Mistress, for everything.\"\n\n\"It never needs to come off,\" Kara said, pressing kiss to Ash's forehead. \"Everyone will know you're properly owned now. We're officially 'out' as Mistress and slave.\"\n\n\"It's like a dream.\"\n\nKara shared another embrace with her happy slave girl. \n\nThey went with Harold and Bev to the dining room. Kara signed the Mistress-slave agreement, then handed the pen to Ashley.\n\n\"Once you sign, there's no going back. You're mine for good,\" she said.\n\nAshley touched the pen to the page, then paused and closed her eyes as though savouring the moment. When she opened them again, they were bright and eager.",
        "\"I'll hold you to that,\" Ash said, then signed her name with a flourish.\n\nKara hugged Ashley again as Bev and then Harold signed the agreement as witnesses. The contract held no legal weight, but the formality and ritual of it lent authenticity to the proceedings.\n\nJaycee found them in the dining room and hurried up to talk to them.\n\n\"Mrs. Meadows, may I please borrow Ash for a little while? Artie said he'd show us the bondage wheel he bought for Mrs. Flannigan's dungeon.\"\n\nThe young slave wife was most of the way done a big glass of white wine, and had a reckless, mischievous glint in her eye.\n\nKara wrapped the leash around her hand a few times to take in some slack. \"Oh, no. Once you two get going, I'll never get her back again. Maybe after the guestbook signing.\"\n\nJaycee sighed. \"Yes, Mrs. Meadows.\"\n\nKara gave her a mysterious smile. \"Besides, I guarantee you'll want to sign the guestbook.\"\n\nJaycee caught the smile, then glanced at the suddenly-blushing cheeks of Kara's newly-collared slave.\n\nHer face broke into a wide grin. \"Oh, this is going to be good!\"\n\nThey ate, drank and mingled for the next hour. Kara made the rounds with her barefoot slave accompanying her on the leash. Ashley looked comfortable - happy to engage in small talk, eager to enjoy the food and drink and quick to laugh at most of Harold's jokes. \n\n\"Are you just about ready?\" Kara whispered to her, when they had a rare moment alone.\n\n\"Yes, Mistress.\"\n\n\"No second thoughts?\"\n\nAsh shook her head. \"It's weird. It's going to be super-embarrassing, but...I'm kind of eager for it.\"\n\n\"It's supposed to be sexy and fun. If you find you're hating it, you'll let me know, right?\"\n\n\"Yes, Mistress. Always.\"\n\nKara gave her another kiss, then raised her voice to address the room. \"Please assemble in the living room for the signing of the guestbook.\"\n\nAs the guests made their way to the living room, Kara hurried to the hall to fetch the coloured body pens from her purse.\n\nLeash in hand, she led Ashley into the crowded room and stood her facing the assembled guests.\n\n\"I hope each of you will do us the honour of signing the guestbook to commemorate this occasion,\" she said, then grasped the right spaghetti strap of Ashley's dress and slowly slid it off her shoulder, letting it hang. \n\nThere were good-natured hoots from the crowd. Ashley was already flushing an alluring, deep pink.\n\n\"One by one, I'll ask you to come up and select a coloured pen.\" She held up her handful of body markers, then casually slid the other strap off Ash's left shoulder. She walked behind the blushing young woman.\n\n\"Please don't feel that you all have to pick the same colour - we have eight to choose from.\" \n\nKara took the top of Ashley's sundress and slowly peeled it down, baring Ash's small breasts, rib cage and flat belly. Kara had put an adhesive bandage over each of the younger woman's nipples, barely concealing them, and didn't pull the top of the dress down far enough to reveal the tattoos. Ash was sensitive about them and Kara didn't want to truly humiliate her freshly-collared slave girl.\n\nThe sudden semi-nudity caused another chorus of cheers and whistles.\n\n\"I'd also like to remind everyone that when you're signing, please touch with the pen only; hands, fingers, lips, tongues and other 'appendages' are strictly off-limits.\" Kara said it jokingly, but the underlying message was clear to everyone. Games like this weren't uncommon among the MAMMs and limits were always meticulously respected.\n\n\"Mrs. Meadows, are we allowed to sign your 'guestbook' anywhere?\" Jaycee asked, grinning ear-to-ear.\n\nAshley's audible groan caused a ripple of amusement to roll through the guests.\n\n\"Below the neck and above the navel, please,\" Kara said. \"Would you like to get us started off, Jaycee?\"\n\n\"Oh, thank you, Mrs. Meadows. I would LOVE to!\" the young woman said.\n\nShe walked over and selected a pink marker, then regarded Ash with a devious smile.\n\n\"Arms up, please.\"\n\nAshley hesitated, then raised both arms above her head, exposing her smooth armpits. Jaycee popped the cap on the marker, then pressed the felt tip lightly to Ash's left underarm.\n\nThe younger woman squealed, dropped her arms and flinched away at the ticklish contact. Her breasts shook with the sudden movement, causing an amused uproar from the group. Kara found herself chuckling and was thrilled to hear Ash giggle too, red-faced though she was.\n\n\"Mrs. Meadows!\" Jaycee said in mock consternation. \"Slave Ashley seems to have broken posture without permission.\"\n\n\"Oh, you'll get yours!\" Ashley vowed, then raised her arms a second time.\n\nJaycee brought the marker close to Ash's defenseless armpit again, then paused. \"May I please sign my full name, Mrs. Meadows?\"\n\n\"Of course,\" Kara said.\n\n\"Thank you, ma'am.\" Jaycee turned back to Ashley with an evil grin. \"Jaycee Elizabeth Constance Sato.\"\n\nAshley's pitiful whimper could be heard by all.\n\n*\n\n\"That's totally not her name,\" Ashley said with a grudging smile. \"I bet she just chose the longest names she could think of.\" She lifted her left arm and tried to make out the pink writing in the unreliable light from the oncoming headlights as they passed.\n\nThe two of them were in the car, a few minutes away from their apartment. It was after midnight; the streets were dark and the traffic sparse on the way back from Bev's house.\n\nKara laughed. \"I'm sure Mr. Sato would want to be informed if his slave wife had shown dishonesty. I understand he's pretty strict about that.\"\n\nAshley's grin betrayed a vengeful glee. \"Yeah...I should probably let him know, the next time I visit. Honesty is one of the Five Principles, after all.\"\n\n\"And now one of the seven Articles.\"\n\n\"Yes, Mistress. Oh! You remembered my old collar, right?\"\n\n\"It's in my purse. I hope the new one's not uncomfortable?\"\n\n\"It's not that. I love my permanent one! It's just...I don't want to lose the leather one. It's special.\"\n\n\"You never forget your first collar,\" Kara said with a wistful sigh.\n\n\"Never. That's the collar that saved me. I'm going to keep it forever.\"\n\nKara nodded. \"I felt the same way, until I met someone who needed it more.\"\n\nAshley reached over and ran her hand along her owner's arm. \"I love you, Mistress.\"\n\n\"I love you too.\"\n\nThey arrived, Kara parked in the underground lot and they rode the elevator up to the apartment. Kara let them in the door and flicked on the lights.\n\n\"May I speak, Mistress?\"\n\n\"Of course.\"\n\nAshley gracefully knelt on the hardwood floor in the hall.\n\n\"May I please be allowed to lick your beautiful pussy before bed? I really want to make you feel good, especially tonight.\"\n\n\"Mmm. I think that sounds lovely.\"\n\n\"Thank you Mistress. Also, may I please have the strokes I earned from my demerit during the Inspection?\"\n\nKara paused to consider. \"Take off your clothes.\"\n\n\"Yes, Mistress. Right here in the hall?\"\n\nKara nodded and Ashley stood up and eagerly pushed the straps off her shoulders, wiggled out of the sundress, then peeled her white thong down and off.\n\n\"Just leave it on the floor for now. And remove the bandages from your nipples.\"\n\nAsh set the clothing aside. Scrawled across her armpits, chest and stomach were twenty-four signatures in a rainbow of bright colours. The ink from the body markers was non-toxic and temporary - the signatures would fade over the next three days or so.\n\n\"You're the prettiest guestbook I've ever seen,\" Kara said, then fished around in her purse for her phone.\n\n\"Thank you, Mistress. It tickled so much! I almost peed myself.\"\n\n\"Are you comfortable if I take some pictures for our private collection?\"\n\n\"If they're for you, I'd love it.\"\n\nKara raised her phone. The light in the hall was excellent, and she clicked a couple of pictures of Ash's full torso, then began taking some close-ups to capture the individual signatures, including a few with Ash's arms up over her head.\n\n\"What do you think?\" Kara asked, handing the phone to her slave girl.\n\nAshley took a few moments to swipe through the pictures, then giggled.\n\n\"It's something I'll never forget, that's for sure. The whole evening was crazy! Crazy...and wonderful.\" She impulsively wrapped Kara up in a tight hug, and Kara squeezed her back just as hard.\n\nAfter a minute, Kara stepped back.\n\n\"Remove my dress,\" she said; a command.\n\n\"Yes, Mistress.\" Ashley went behind her and unzipped the dress, then slid it down her Mistress' body and knelt while Kara stepped out of it, leaving her in just a pair of white panties and her low, white heels.\n\n\"Crawl to the living room, then wait for me at Inspect.\"\n\nAshley crawled over the hardwood on all fours. Kara admired her bum from behind, and enjoyed the teasing peeks of her labia between her thin thighs as she moved. Her slave seemed to enjoy crawling, and absolutely loved being on the leash. Kara made a mental note to add 'pet play' to the list of kinks she and Ashley would try together. It was becoming a long list. But then, they had lots of time.\n\nShe stopped by the kitchen and selected a hard, plastic spatula from a drawer next to the stove. She swung it through the air a few times. It was a lot lighter than an oak paddle; it would produce a good sting and some nice colour, but probably not much bruising. Perfect.\n\nWhen she got to the living room, Ashley was already standing with her feet apart and her wrists crossed behind her back. Kara stepped in front of her and pressed a soft kiss to her lips, savoured it for a few seconds, then stepped back. She reached down and began a slow, feather-light fingernail tease of Ashley's smooth pussy.\n\n\"Wider,\" she said. Ashley moved her feet further apart immediately. The hunger in her eyes was obvious; two weeks of unfulfilled lust were reflected in her beautiful, emerald gaze.\n\n\"This officially belongs to me now.\" Kara lightly pinched Ash's smooth labia between her thumb and index finger.\n\n\"Yes, Mistress. My pussy and everything else. All yours.\"\n\n\"How did it feel to go the extra week with no release?\"\n\nAsh started breathing through parted lips. \"I wanted it so bad, especially the second week - it was a really urgent need. But...I could feel your control so strongly, and you were always in my thoughts, especially when my pussy was throbbing. I loved that part.\"\n\n\"Hmm. Maybe once every two weeks from now on?\" her voice was low and teasing as her fingernails tormented Ash's pussy lips.\n\nKara expected a protest, but her slave surprised her by smiling. \"I freely yield to you my body, mind and heart, Mistress. I'll always accept whatever you decide.\"\n\n\"It's no fun if you're so agreeable,\" Kara said, then gave her another long kiss, withdrew her hand and stepped back.\n\n\"Touch your clit. I want you riding your edge.\"\n\n\"Yes, Mistress. Thank you.\" Ashley brought her right hand around front, wet her fingertips between her pussy lips and started rubbing her clit in slow, tight circles.\n\nKara looked down into her slave's eyes and watched the hunger grow into desperation. Ashley's breathing was fast now. Her cheeks were pink, and a flush slowly spread down her neck and upper chest. The scent of her arousal was faint in the air.\n\n\"I'm...there, Mistress.\"\n\n\"Mmm. Don't you dare come.\"\n\n\"Never, until you say.\"\n\nKara slowly walked around behind her slave girl, then lightly tapped her right buttock with the spatula. Ash unconsciously pushed her bum out a little further.\n\n\"It's time to address your demerit,\" Kara said, slowly rubbing the flat of the spatula over both the pale, soft cheeks. \"You will continue to edge as I deliver each set of three strokes. Remember to breathe.\"\n\n\"Yes, Mistress. Thank you.\"\n\nKara tapped the right buttock to signal the start, then whacked it three times. The spatula made a satisfying smacking sound. Ash's fleshy cheek rippled, shook and clenched with each blow, then immediately bloomed pink. \n\nAshley moaned quietly, then breathed deeply. Her fingers were busy between her legs the whole time.\n\n\"Good?\" Kara asked; a quick check-in.\n\n\"Oh, yes. It's perfect.\"\n\nKara patted Ashley's left buttock, then delivered three stinging slaps that brought a gasp from the younger woman, followed by a slow breath.\n\n\"Please may I pause, Mistress? It's getting away from me...\" Ash's voice was desperate.\n\n\"Work your nipples with both hands.\"\n\nAshley's hands immediately went to her breasts. \"Thank you, Mistress.\"\n\n\"Pinch hard; don't be lazy.\"\n\nAnother deep groan was the only response.\n\n\"Three more,\" Kara said, then tapped the spatula against the right buttock again. She hit harder this time, knowing Ash's increasing arousal would welcome the added sting. And she was right; her slave girl pushed her ass back against each blow, seeking contact rather than flinching away.\n\n\"Yes...ooooh yesss,\" she said, her voice almost a sigh. \n\n\"Fingers on your clit again.\"\n\n\"Yes, Mistress. Thank you.\" Ashley's hand dropped down between her legs again.\n\nKara signaled, then spanked Ash's left cheek three times. The young slave's legs were visibly quivering with the effort of holding back her orgasm. Her ass cheeks were a lovely deep pink, verging on red. \n\nKara tossed the spatula onto the couch, then made a slow half-circle around the younger woman before facing her again.\n\n\"Hands on your head.\"\n\n\"Yes, Mistress.\" Ashley stacked her hands on top of her head.\n\nKara reached out with both hands and grabbed Ash's nipples, then pinched hard and began to roll them between thumb and forefinger. Ashley moaned and arched her back, pressing her breasts into Kara's hands.\n\n\"These belong to me, too.\"\n\n\"Oh, yes. All yours, Mistress.\"\n\n\"Ask me to pinch harder.\"\n\n\"Oh, God...please pinch harder, Mistress. Hurt my nipples.\"\n\nInstead, Kara released them. \"Show me. Show me how you like to hurt them.\"\n\nAshley took a nipple in each hand and pinched them almost flat, then pulled them away from her chest and rolled them.\n\nKara found her slave girl's swollen clit and continued to look deep into her green eyes as she rubbed it gently. Ash was barely able to control her hips; she knew she wasn't to move while her Mistress enjoyed her.\n\n\"Nipples hurt?\"\n\nAshley nodded. Her eyes were unfocused and dreamy.\n\n\"Want to stop?\"\n\n\"No...never.\"\n\n\"Go harder, then.\"\n\n\"Yesssss. Thank you, Mistress.\" \n\n\"They're going to be sore all night. They're going to throb and ache.\"\n\n\"Oh, yeah,\" she breathed. \"Can I come, Mistress? Please?\"\n\n\"No. Your Mistress comes first. Always.\"\n\nAshley groaned but nodded.\n\n\"Would you like to remove my panties?\"\n\n\"Yes, please.\"\n\n\"Do it without using your hands. Rub your clit the whole time.\"\n\nAsh lowered herself to her knees on the hardwood as her fingertips went to work on her slippery, engorged clitoris. She pressed her face against the front of Kara's white panties, and it took a couple of tries to get the waistband between her teeth. She bent lower, trying to tug the tight elastic down but it snagged on Kara's wide hips. She groaned her need and frustration as her fingers kept her on the edge of a long-denied climax. Ash shifted to her right and carefully bit down on the panty waistband on Kara's left hip. She was able to tug it down a few inches. She urgently repeated her success on Kara's right side, and in less than a minute the panties were pooled around her white shoes.\n\nKara grabbed the top of the French braid in Ashley's hair and roughly pulled her slave's face against her smooth pussy.\n\n\"Mouth closed. Breathe deeply,\" Kara commanded. \"Work your clit harder.\"\n\nAshley sucked in air through her nose, then exhaled and took in a second lung full. \n\n\"Do you smell how wet I am?\"\n\nAsh have a long, low moan, then inhaled again. \"Yes, Mistress. You smell so good.\"\n\n\"Whose job is it to keep my pussy wet from now on?\"\n\n\"My job.\"\n\n\"I want to hear you say it.\"\n\nAshley took another long sniff. \"It's my job to keep your beautiful pussy wet, Mistress.\"\n\n\"You're my pussy slave?\"\n\n\"Yes, Mistress. I love being your pussy slave. Please...can I lick you? Your beautiful pussy?\"\n\nKara stepped out of her panties. \n\n\"Pick those up and crawl into my bedroom.\"\n\nAshley lowered her head and grasped the panties gently between her teeth, then turned and crawled towards the bedroom. Kara walked behind her, heart pounding, a powerful, throbbing need between her legs. She could see the glistening wetness on Ashley's smooth pussy lips as she crawled.\n\nWhen they got to the bedroom Kara left Ashley on her hands and knees, white panties still held between her lips, while Kara stripped the comforter off the bed.\n\nShe made a quick trip to the closet and spread a towel out on the bed sheet; things were going to get messy and no one wanted to sleep in a puddle. Once the bed was ready, she took the panties from Ashley and tossed them in the hamper.\n\nKara lay on her back in bed. \n\n\"Time to please your Mistress, my pretty slave. Come up here.\"\n\nAshley stood, and Kara was treated to the sigh of her beautiful lover, naked but for the gleaming, steel collar permanently affixed around her neck, her gaze hungry, her nipples stiff and red, her smooth pussy wet, pouting and available.\n\n\"I want your mouth on my beautiful pussy, and your hips above my face.\"\n\n\"Yes, Mistress. Thank you.\"\n\nAshley crawled onto the bed and carefully swung one leg over so her knees were on either side of Kara's shoulders. The sweet scent of her slave's arousal suffused the air around her, and Kara breathed it in, enjoying the strong, familiar aroma.\n\n\"May I begin, Mistress?\" Ash asked, her head poised between Kara's parted thighs, her voice low and rough with need.\n\n\"Mmm. Please begin. Nice and slow. We have all night.\"\n\n\"All night and every night,\" Ash agreed.\n\nAshley's tongue was hot, slippery and unhurried as she dragged it down Kara's outer labia, first on the right and then again on the left. Never rushing, focused on making each stroke perfect even as her own arousal threatened to tip out of control.\n\nKara pulled Ash's hips lower, then began to kiss her slave's inner thighs and pussy lips, deliberately avoiding her clitoris. At the same time, she stroked her fingers over Ashley's tight anal ring, not seeking to penetrate, just giving a gentle caress. \n\n\"I need you so bad,\" Ashley gasped. Her hot tongue continued to coax Kara ever closer to an orgasm. Her pussy slave was well-trained indeed!\n\n\"Soon. Don't rush it. Let it build.\"\n\n\"Yes, Mistress.\"\n\nAshley's patient strokes quickly brought Kara to a boil, and soon she was lifting her hips to meet every lick. She held out for a few more minutes, denying herself the quick release her pleasure-seeking pussy desired, but her slave's skillful mouth soon wore down her resistance.\n\n\"I'm ready,\" Kara whispered.\n\nAshley moved her focus to her Mistress' clit, enveloping it in her soft, warm lips and lightly bathing it with her tongue.\n\nKara grabbed Ash's buttocks and pulled the younger woman's hips down hard against her mouth, sucking her slave's clit gently. The sounds of Ash's appreciative whimper drove her own lust to its peak.\n\nKara's orgasm came from deep down and locked the muscles in her hips, thighs and belly for a few moments. As pleasure blasted through her she bucked her hips and ground her clit into Ashley's practiced tongue, drawing out the pleasure for as long as she could.\n\n\"Mistress...please...can I...?\"\n\n\"Yes...come for me.\" Kara doubled her effort, trapping Ashley's sensitive bud between her teeth and lashing it with a soft, slippery tongue.\n\nAsh came almost instantly, mewing in her throat and rolling her hips forward, pressing down urgently on Kara's mouth. Two weeks' worth of pent-up need squirted out over Kara's forehead and nose. She closed her eyes against the mini-torrent while lapping away at the wet pussy above her, loving the taste and the erotic sensation of being showered in her young slave's hot, long-denied climax.",
        "Ashley's spasms and aftershocks seemed to continue for a long time, then her body sagged down on top of Kara's, Ash's damp forehead resting on Kara's thigh. Kara continued to lick her slave's outer labia gently. \n\nA quiet, shared euphoria settled in as Mistress and slave rode the post-orgasm endorphin high that flooded their bodies.\n\n\"Mistress...I think I'm in heaven,\" Ash panted.\n\n\"It felt incredible. Thank you, my slave girl.\"\n\n\"I love how that sounds. I love being yours.\"\n\n\"Good, because that collar is never coming off.\"\n\n\"Never. I'm yours forever. I love you more than you can imagine.\"\n\nThey didn't shower and slept naked, pressed tightly together, savouring the warmth, the strong scents, the sweaty, sticky dampness and the sound of laboured breathing that gradually became deep and steady. \n\n**\n\nEpilogue:\n\nThe paddle smacked into Ashley's defenseless bum. The thin, tight yoga pants she wore didn't provide much protection from an oak paddle. Especially without underwear.\n\nBehind her, the crowd cheered. \n\nAshley did her breathing and felt the sting slowly dissolve into a pulsing warmth. It hadn't been a hard spank; more for effect than pain. And it had been one of the smaller butt paddles. Still, it carried a bit of a bite.\n\nShe was on her stomach, neck and wrists locked in the wooden stocks. Her bum was pointed towards the crowd so she didn't even know how many people were witnessing the spanking. Her face was red with embarrassment. Embarrassment...and a fair bit of lust. It was Saturday, after all, and after almost a full year as Mistress Kara's slave, her body and mind were primed for the orgasm that Saturdays usually delivered.\n\n\"Now that fellow was strictly a butt paddle,\" Mistress Kara said in a voice loud enough to rise over the noisy crowd. \"You'd never use him on softer tissues like breasts or thighs. Even though the buttocks have more padding, that paddle delivers a pretty nice bite. Wiggle for me if you agree, Ash.\"\n\nOn cue, Ashley wagged her bum from side to side. The crowd roared its approval. \n\nHer pussy was soaked.\n\nPart of her wished her Mistress would yank down her yoga pants and give her overheated sex some attention, crowd or no crowd, but she knew it wasn't going to happen. The Masquerade was strict about the 'no genital exposure or contact' rule - it was even printed on the tickets. And besides, she and her Mistress were there on business, not pleasure - although somehow her pulsing pussy didn't know the difference.\n\nMistress Kara continued the presentation with the biggest paddle. \"Now these 'big boys' are serious business. If you whack someone's ass with one of these, they're going to feel it for a few hours, and the bruising might last for a day or two. I'll demonstrate on my lovely assistant here. Ash, wiggle for me if you want a hard whack from the big boy.\"\n\nAshley held her hips still, as rehearsed. The crowd erupted into laughter, and there was even clapping. It made her chuckle despite her flushed cheeks.\n\n\"Come on, Ash, where's your sense of adventure? Just a little wiggle?\" Mistress Kara pleaded, theatrically.\n\nAshley remained still. The crowd ate it up, clapping and cheering, and a male voice shouted 'Come on, Ash, take one for the team!'.\n\n\"Ah, well. Looks like Ash's cute, little bum has had enough,\" her owner said, raising her voice to the crowd. Ashley felt the latch on the stocks being released, and the top half lifted up, freeing her. Mistress Kara held her arm as she got up, ever watchful for light-headedness, even while playing to the audience.\n\n\"Let's give her a big hand!\" her Mistress said. The crowd - maybe thirty people - broke into loud applause and whistles. Ashley and her Mistress took a bow, then spent the next forty-five minutes answering questions and ringing through credit card purchases from their little booth in the enormous pavilion where the Masquerade was held.\n\nMistress Kara was dressed the same way she'd been when she'd saved Ashley's life the previous year - a beautiful, white dress with a corset top, long, white gloves and a white, sequinned mask. She said she'd considered changing it up this year but decided to stick with the costume that had 'brought her luck' the previous year. Plus, it had been dry-cleaned and didn't smell like puke anymore.\n\nAshley was in black yoga pants and a tight, black crop top that left her bare from her lower rib cage down to below her navel. She wore her pant waistline low to display her flat stomach and abdomen, and wore her hair up to show off her shiny collar. Chad's tattoos had been removed, so she was comfortable showing a lot more skin, and Mistress Kara enjoyed dressing her a little sexy. Ashley had started the evening with a feathery, black mask but the feathers were tickling her so her face was bare now.\n\n\"Mistress, why don't I grab us some drinks? The line at the bar looks to be thinning out a bit,\" Ashley suggested when things had calmed down.\n\n\"Great idea - I'd love half a glass of white.\" Her owner removed her purse from the lockable compartment in the booth and fished out a few bills. \"Make sure you get yourself something to eat, if you're hungry.\"\n\nMistress Kara had assumed control of Ashley's finances a month ago and it felt just perfect. Ashley didn't have to think about money or worry about expenses; she could focus all her attention on her Mistress and on whatever tasks had been assigned. Mistress Kara insisted that she was maintaining a separate bank account for her and depositing money every week, and while Ashley appreciated the fair-minded gesture, she was content to leave all that stuff up to her owner, just like they'd agreed in the Articles. \n\n\"Okay, I'll be back in a sec.\"\n\n\"No rush - it's quiet here right now. Why don't you wander around and have a look at the exhibits?\"\n\n\"Thank you, Mistress. I think I might do that.\"\n\n\"And say 'hi' to Harold and Phil if you cross paths.\"\n\n\"Yes, Mistress.\"\n\nAshley popped into the washroom first to pee, and was washing her hands afterwards when the door flew open and a young woman stormed in, crying, with dark lines of mascara running down both cheeks. She was really pretty, dressed in pink and orange silks with her midriff bare - she looked like a belly dancer or something like that. Lots of folks at the Masquerade dressed up. \n\nThe woman slammed her purse onto the counter and began rooting around in it, sobbing.\n\n\"Um...are you okay?\"\n\nThe woman seemed to notice Ashley for the first time, then shook her head and made a dismissive gesture with her hands. She found a tissue in her purse, wet it in the sink and began dabbing away the mascara on her cheeks\n\n\"This is such bullshit,\" the woman muttered, then sniffled. \"Not what I wanted at all. It's just pain and frustration.\"\n\n\"Are you hurt?\"\n\n\"I'm more stupid than hurt. Stupid for believing in all this 'submissive' stuff.\"\n\n\"You're a submissive too?\" \n\nThe woman's eyes darted to take in Ashley's steel collar.\n\n\"Not any more. I'm done with this shit. It's just an excuse for guys to hit you and call it 'discipline', and make you do anal because that's what good slaves do, right?\" The woman blushed when she realized she'd shared too much, then sobbed again and resumed cleaning up her face.\n\n\"It's pretty scary, if you get the wrong guy,\" Ashley conceded. \n\n\"They're ALL the wrong guy.\"\n\n\"The Dominant shouldn't hit you if you didn't agree to it. Or at least you should have a safeword.\"\n\n\"He says safewords are for posers. He doesn't want to do 'play-acting'.\"\n\n\"Well...maybe he's not the right guy. But there are some good Dominants out there. My slave sister has a Master who's a police officer. He's super-nice, and when he spanks her, it's because she's totally asking for it. She's sort of a brat.\"\n\n\"Slave sister?\"\n\n\"Well, not 'officially'. But it's what we call each other. She's my best friend.\"\n\n\"Does you Master hit you?\"\n\n\"Mistress. And yeah, sometimes. But not, like, randomly. Only if I break a rule. And we talk about it first, and I always have a safeword. Plus...I usually kind of like it,\" Ashley said, feeling a blush come on at her own intimate confession. \n\nIt felt weird to have a conversation like this with a stranger in a bathroom, of all places. But the other woman had stopped crying and seemed to be interested. Ashley knew it wasn't easy to be a submissive, and wanted to help if she could.\n\n\"You seem to know a lot about these things,\" the woman said.\n\n\"I mostly learned it from Mistress Kara. She's super-smart and she has tons of experience. Hey - why not come and meet her? She'll be able to help you, I'm sure of it.\"\n\nThe woman hesitated, and Ashley could see in her eyes the struggle inside her. Doubt fighting with hope. She knew how that felt.\n\n\"Well...we'd just be talking, right?\"\n\n\"Yeah. We're vendors here at the Masquerade, so we can't leave for a few hours anyway.\"\n\nThe woman slowly nodded. \"Sure. Why not? I mean, I already paid for my ticket. I'd hate for the whole evening to be a waste just because my stupid Master walked out on me.\"\n\n\"Cool. My name's Ashley, by the way.\"\n\n\"I'm Tanya.\"\n\n\"We have to stop by the bar first. Mistress Kara wanted a white wine...\"\n\nTanya gathered her purse, and the two of them left the bathroom, Ashley leading the way...\n\n*\n\nThe End"
    ],
    "authorname": "GobLean",
    "tags": [
        "collaring",
        "consensual",
        "female dominant",
        "female submissive",
        "leash",
        "oral sex",
        "romance",
        "spanking",
        "bdsm"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/her-governess-ch-05"
}
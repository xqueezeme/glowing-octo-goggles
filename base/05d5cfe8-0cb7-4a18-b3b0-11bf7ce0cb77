{
    "title": "Grace Ch. 07",
    "pages": [
        "Lindsey's body was warm against mine as she lay on top of me. Her robe had spread out to cover both of us like a blanket, and she laid her head on my chest, her hands on my shoulders. My own hands were wrapped gently around her waist beneath the robe, still cradling her ass. My cock had softened somewhat while I was concentrating on Lindsey's pleasure, but having a warm, naked woman pressed against me was restoring its vigor. Soon it was pressing up against the towel and nudging her thigh.\n\nLindsey turned her head so that her chin rested on my sternum. Her eyes were half-closed as she basked in our shared body heat and her own post-orgasmic flush.\n\n\"Can you reach your towel? It's kinda in the way right now,\" she murmured.\n\nI grinned and let go of her ass. Tugging from both sides separated the spot where I'd tucked it into itself, and I was able to pull the soft fabric from between us. Lindsey spread her legs just enough to straddle my thighs. My cock now lay between us, trapped against her mound. Then she did one of my favorite things. This is going to sound stupid, but hopefully someone will understand what I mean! It would have been simple for one of us to reach down and direct my cock into her eager pussy. Instead, a tiny furrow of concentration creased her brow and Lindsey rocked her hips into me. Her hips moved up my body a little bit until my cock slipped past her mound and pointed itself up at a 45 degree angle. Then she inched herself down, shifting from side to side in tiny increments, until I felt her slick opening trap the head. Her expression shifted to one of satisfaction and she aligned her body to guide me in. Her mouth fell open as she lowered herself onto me; she was so slippery from her orgasm that I went in effortlessly and we both moaned in unison as I bottomed out inside her. I can't tell you why I find that hands-free coupling move so sexy, but it always gives me a thrill!\n\nOnce she had me where she wanted me, Lindsey lay her head back on my chest.\n\n\"God, that feels so good!\" she groaned, her breath warm against me.\n\nI kissed the top of her head and murmured my agreement. We lay like that for several minutes, not thrusting into each other, just letting the natural movements of our bodies provide stimulation. My hands returned to her ass and kneaded gently.\n\n\"Steve?\" she whispered. \"Can I ask you a question?\"\n\n\"Mmm?\"\n\n\"If you do fuck Grace, are you going to stop fucking me?\"\n\nShe sounded so serious that I let go of her ass and moved my hands to her shoulders, pulling her torso up a little bit. She looked down at me through strands of dark hair. Like her daughter, she had the ability to throw me curve balls at the most inopportune moments!\n\n\"Linds,\" I said softly, \"I love being with you. You're smart and funny and sexy as hell. I never expected to find myself in bed with you, but it's been an amazing month and I don't see any reason to stop. And I told Grace she doesn't have to do that--or anything else--to say thank you for all the tutoring.\"\n\n\"You didn't answer my question,\" she observed quietly.\n\n\"The answer is no. If something happens with Grace, it happens. That doesn't change anything between you and me.\"\n\n\"Good. Because I don't want to stop what we have going on. Even if you're not tutoring Grace, I could really get used to having THIS in my life!\"\n\nWhen she said \"this,\" she gave me a tight squeeze with her pelvic floor. My cock throbbed in response and I grinned up at her.\n\n\"Now let's try to focus on what we're doing here, okay, lady?\"\n\nHer lips came down on mine and her hips began to move. First they rocked back and forth, then she moved them up and down. Each different motion stimulated a different angle for both of us and I closed my eyes in reverent bliss. My hands returned to her ass and I happily started to knead her cheeks as she moved on top of me.\n\nAfter a few minutes, the friction between our bodies had created a slippery sheen of sweat. Letting go of her ass reluctantly, I slid my hands up her back and pushed the robe off her shoulders. She rocked from one side to the other and let it fall off each arm in turn, leaving her bare body open to my touch. My hands roamed from the backs of her thighs to her shoulders, caressing every inch. Her hips kept up their relentless motion, but I noticed her speed increasing and her breathing growing shallower.\n\nWith a sudden moan, Lindsey wrenched herself up and planted her hands on the raised head of the chaise above me. She started raising herself straight up with her thighs and dropping back down onto me--clearly, that was what she needed to push herself over the edge again.\n\n\"My tits--play with my tits!\" she gasped urgently.\n\nHer eyes were closed and her head hung forward, otherwise she would have seen me grin. My hands came up and gripped her bouncing breasts firmly, squeezing them hard enough to draw a gasp. Then I eased up and stroked the undersides with my thumbs. Lindsey's relentless up and down grew faster, almost feverish, as she impaled herself again and again on my cock. When I saw the tell-tale flush creep across her chest, I pinched her nipples and pulled them down, letting her final ups and downs add pressure. That did it. Her back went rigid and her weight fell down on me fully, filling her completely with my cock. I glanced down between our bodies and saw her lips spread wide apart against me as she held herself perfectly still, trembling hard as waves of pleasure washed through her slim body. At some point, I released her nipples and simply held her by the waist, giving her space to come down on her own.\n\nSlowly, as if by simple gravity, her arms relaxed and her body came down against mine again. My arms went around her back and held her close as I kissed the top of her head. She nestled into me and brought her hands back to my shoulders, turning her head just enough periodically to kiss my chest.\n\nWhen I shifted one leg to distribute her weight more comfortably, Lindsey seemed to snap back to reality. Maybe it was the hard cock still inside her. She turned her face up to me and kissed my chin, a guilty look in her eyes.\n\n\"Sorry about that!\" she murmured happily. \"I kinda got lost in my own thing there!\"\n\nI chuckled. \"Not a problem...I love watching you get off!\"\n\n\"Well I seem to be doing that a lot, but it's got to be YOUR turn now.\"\n\n\"What did you have in mind?\" I asked, still smiling.\n\n\"Remember I said I had a surprise for you?\"\n\n\"I do, but I thought this here was a pretty damn good surprise already!\"\n\n\"Just wait, teacher man. It gets better!\"\n\n\"Like I said, I'm all yours.\"\n\n\"Good,\" she said in a playful voice. \"Don't get mad, but we have to move.\"\n\nMatching actions to words, she lifted her knee and rolled off me, letting my cock slide out of her. It smacked obscenely against my stomach again, slick with her juices and throbbing with need. Did she care? Apparently not!\n\n\"Poor baby!\" she pouted. \"Can you keep that thing ready for a minute?\"\n\n\"Umm...sure?\" I said in puzzlement.\n\n\"Good. Grab your towel and follow me!\"\n\nQuick as a flash, Lindsey stood up and recovered her robe. She didn't put it on, though--she just folded it over her arm and walked quickly toward the door. I was annoyed but very horny and willing to play along, so I threw my towel over my shoulder, grabbed both wine glasses, and crossed the room behind her. She turned back along the hall to one of the doors we had passed earlier and stopped. There was a small table next to the door that had a framed picture--a very young Grace smiling in the snow. Lindsey turned to face me in the dim light, took the wine glasses out of my hand and set them on the table. Then she stepped close, wrapped one hand around my cock, and stroked the thick bottom ridge with her thumb. Her other hand reached down to cup my balls and she smiled wickedly. Then she stepped closer and kissed me fiercely, her tongue darting into my mouth and wrapping around mine. Then she broke away.\n\n\"Are you ready?\" she asked teasingly, squeezing my cock for emphasis.\n\n\"Hell, yes!\" I answered with urgency.\n\nStill grinning, Lindsey turned away from me but kept a tight grip on my cock. Her other hand opened the door beside us and she led me in. There were clothes on the floor. Posters on the way. Makeup scattered across the glass top of a very modern vanity table. A four-poster bed with rumpled covers. And there were pictures everywhere. Pictures of Grace.\n\nThen the smell hit me. Grace's shampoo. The perfume she had been wearing when she left. This was Grace's room. Oh, fuck...she wanted to....\n\n\"That's right, teacher man. I want you to fuck me right here on Grace's bed!\"\n\n\"Lindsey,\" I stammered. \"Holy shit.\"\n\n\"I know,\" she said ruefully. \"It's messed up. We can talk about that later. Right now, though, I'm going to lay back on that bed and you're going to climb on top of me and I'm going to spread my legs and you're going to fuck me as hard as you want and cum as hard as I just did.\"\n\nThe twists and turns of her mind were impossible to follow at that point. As much as I knew it was messed up, I was SO ready to fuck her, and the idea of doing it on Grace's bed made me so damn horny that I couldn't ignore my need.\n\nIn a serious voice, I did say one thing before I caved entirely: \"As long as you know that it's YOU I'm fucking, not Grace.\"\n\n\"Damn, that was a good answer!\" she laughed.\n\nThen she let go of my cock, dropped her robe, and threw back the dark green comforter with both hands. Then she snatched my towel off my arm and set it on the bedside table. As quick as a wink, she leapt into the middle of the mattress and lay back against the soft flannel sheets. I noticed inanely that they were decorated with pine trees and crossed skis before I followed her.\n\nAs I knelt on the side of the bed, Lindsey bent her knees and spread her legs as promised. Her arms reached out to me, her lips curled into an inviting smile, and her breasts rose and fell as she lay ready for me.\n\n\"Come on, Steve...I need you inside me again. I need to feel you cumming.\"\n\nMy cock throbbed at the idea, and I quickly levered myself into position. My knees rested solidly in the dense foam of the mattress, and my hands were planted on either side of her torso. She reached down, swiped her fingers around the crown of my cock to spread my precum, and then guided me to her beckoning pussy. Now it was my turn.\n\nWith one hard thrust, I buried myself inside her. Lindsey's back arched at the sudden intrusion and her hands leapt up to clench my triceps. I held still for a long moment, then pulled back all the way until the tip of my cock almost slipped out of position, then slammed back in.\n\n\"Oh, fuck yes!\" Lindsey groaned. \"Fuck me hard!\"\n\nThe buildup had been going on for too long. Grace's kiss. The bathtub. The taste of Lindsey's pussy. The cowgirl orgasm she gave herself. It was all me now, and I took full advantage. Instead of pausing at each end, I simply pistoned myself into her, striving for my own pleasure.\n\nStill, a small part of my mind remembered where I was. I could smell Grace's body. Grace's hair. She slept here. Images of her in pajamas, in sweats, in her panties, and totally naked flickered across my mind as I fucked her mom. In her bed. Oh, god help me, in her bed!\n\nWherever my mind was, my strokes were relentless. I could feel myself approaching a shattering orgasm as I pumped Lindsey's supple body as hard as I could. Each thrust sent a slap of contact and an obscene slick sound echoing around the room. Lindsey was bucking her hips up into me with each push, a sexy smile on her face as she watched me drive myself along. Finally, I could take no more.\n\n\"Fuck, Linds...I'm gonna cum!\" I gasped.\n\n\"Yess!\" she moaned encouragingly.\n\nTo give me a final nudge, Lindsey locked her heels together in the small of my back and lifted her knees up as far and as wide as she could. That left me pumping almost straight down and gave me an extra depth of penetration. My cock bumped into her cervix at the bottom of my thrusts and she grunted with each one.\n\nThat extra sensation was what pushed me over the edge. My toes dug into the mattress top as I rammed myself down into her one last time, my cock throbbing wildly as I spurted streams of cum into her. I collapsed down to my elbows, my chest hairs just brushing her nipples, and rested my forehead on her shoulder as my body pulsed with pleasure. Lindsey cooed encouragement as I shuddered above her.\n\n\"That's it, Steve...give me all of your cum. I fucking love it. It feels so hot inside me!\"\n\nAs my pleasure waned, my muscles relaxed and I settled onto Lindsey's body. She unlocked her ankles and let her knees fall wide again, creating a wonderful landing spot for me. Her arms went around my sides and she stroked my back peacefully.\n\nWhen I could focus again, I lifted my head and saw a smile of satisfaction on her lips. I kissed them softly and gratefully.\n\n\"That was amazing,\" I murmured against her lips.\n\n\"I'm glad you liked it!\" she whispered back.\n\n\"You're a very sexy, very twisted mom, ya know?\"\n\n\"I can live with that!\" she giggled, kissing me again. \"Now reach me that towel before we leave all this evidence behind!\""
    ],
    "authorname": "outdoorhorny",
    "tags": [
        "mf",
        "creampie"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/grace-ch-07-1"
}
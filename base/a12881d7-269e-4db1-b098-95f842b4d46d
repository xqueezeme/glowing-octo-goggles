{
    "title": "Meara and Oakley Ch. 02",
    "pages": [
        "*The following is an original work of fiction. All characters belong to the author and any likenesses to real people or places is purely coincidental. Please do not copy or repose any part or portion of this work to any other website. \n\nCopyrighted by Eris Jade*\n\n*****\n\nMy little sister is the Queen of Fucking Shit Up. From the moment my parents brought her whining, crying behind home from the hospital, she has been fucking shit up. \n\nShe is currently standing in my kitchen, sipping coffee from a Starbucks cup, eyeing me up and down, no doubt wondering if she can overtake me long enough to slip upstairs and see who is sleeping in my bedroom. \n\nWe were supposed to meet the previous morning to go over any last minute details regarding our parents anniversary party this upcoming weekend. However, as per usual, Ella confused the days and is close to ruining my morning. \n\nAs much as she annoys me, I love her. When we were growing up, she was my shadow. I'd introduce her as ''My Ella\" so often that people actually thought that was her name.\n\nWe look a lot alike. We share the smooth brow skin, the same catlike deep brown eyes, and the same playful smile. Yet, that's where the resemblances end. Where Ella is tall and lean, built like a swimmer, I am barely over average height, not skinny, but not fat, either. Ella is quite optimistic, even in the morning, while my moods vary between slightly irritated and overly happy. \n\n\"So,\" Ella is saying now, one thin finger tracing along the bottom edge of her cup. \"There's a motorcycle parked in front of your house.\"\n\nI tighten my robe around my waist and fold my arms over my chest. \"I'm aware of this.\"\n\n\"Whose is it?\" she asks innocently, her voice taking on a sing song quality. \n\nI bite the inside of my cheek in attempt not to laugh. As much as she annoys me, I find her extremely funny most days.\n\n\"None of your damn business.\"\n\nShe releases an exasperated breath as she sets her cup on a nearby counter. \"Aw, come on, Meara! You haven't dated anyone in 2 years, and I come over to find you holed up with some guy - some guy who obviously spent the night.\" She gives my disheveled appearance a pointed once-over. \"This is a big deal! Why can't I meet him?\"\n\nThe aroma of Ella's coffee, sweet and enticing, is on the verge of short-circuiting my brain. Though I'd much rather be curled up against Oakley right now, I move to the coffee pot and set about making my own. \n\nMy sister is right, in a certain sense - this is a big deal. I haven't dated anyone in a long time, and I definitely hadn't allowed anyone in my bed during that time, but the situation between Oakley and I is different. Namely, we aren't dating, and I'm not even 100% certain 'Oakley' is his real name. Whatever we have, it's simple, uncomplicated and, save for the blond bimbo I'd seen hanging all over him, there is no stress to it. I'm not averse to keeping it that way.\n\n\"Ella,\" I sigh, watching as the coffee begins to drip into the pot. The sound fills the kitchen, spices the air with its dark aroma, and my mouth begins to water a bit. \"It's really not that big of a deal. We're friends.\" I think. \n\nWhen Ella speaks, I don't have to turn to know that a frown mars her pretty features. \n\n\"You're being ridiculous.\"\n\n\"And you're being a nosey little pest. We're even.\"\n\nShe snatches up her coffee cup and takes a few steps toward me, though she keeps a relatively safe distance between us. She knows better. \n\n\"I'm sure mom and dad would be interested to know that you're finally coming out of your shell.\" \n\nShe says it absently, as if the thought hasn't completely formed in her brain, but I know exactly what she's doing. \n\nI turn more fully toward her. \"Ella, I swear on everything I love, including you, that if you breathe one word of this to Mom or Dad, I'll come to your house and I'll kill you in your sleep. Then, I'll hire our brother to represent me in court. And he'll get my charges dropped. You know why? Because he likes me better than you.\"\n\nElla throws up her hands, groaning in frustration. \"You are such a freaking drama queen,\" she says as I pour my coffee. \"You said yourself this isn't such a big deal. I just want to know who's responsible for making my big sister glow!\"\n\nI whip around, ready to throw the spoon I'd been using to stir sugar into my coffee at her, but I notice Oakley standing in the doorway, and a staticky sort of panic flits through my system. \n\nElla follows my gaze and a tiny squeak escapes her.\n\n\"Good morning,\" Oakley says, the remnants of sleep making his already panty-dropping voice even sexier. He's leaning one shoulder against the door frame. He is shirtless, and the tattoos stand out even more starkly over his broad chest and thick arms in the early morning light. His jeans hang tantalizing low on his lean hips. His eyes move slowly between my sister and me.\n\nElla clears her throat and plasters on a bright smile. His affect is not lost on her. \n\n\"Good morning,\" she chirps. \"I'm Meara's sister, Ella.\"\n\nHe offers a slight nod. A hank of hair shifts over his cheek.\n\n\"Oakley.\"\n\nShe giggles, her eyes flicking to me momentarily. I, again, consider throwing the spoon at her. It's easy to want to melt under Oakley's gaze; however I don't like that she is.\n\nSilence fills the kitchen, and we stand for a long time merely staring at one another. \n\nI had assumed Oakley would remain upstairs. His appearance while my sister is here, though satisfying for Ella, confuses me. I wonder if this has been done on purpose. I wonder how much of our conversation he's overheard.\n\nHe is the first to move, sauntering across the kitchen as if he belongs here, as if our current interaction is the most normal thing in the world. He pours himself a cup of coffee, adding sugar but no cream, and then stands as if waiting to see what will happen next. \n\n\"Ella was just leaving,\" I say, and stare at her pointedly. \n\nShe stares right back, narrowing her pretty eyes at me before returning her attention to Oakley. \n\n\"Yeah, sorry to interrupt. I'll just be on my way. It was nice to meet you, Mr. Oakley.\"\n\n\"Just Oakley,\" he responds before taking a sip of coffee. \n\n\"Just Oakley,\" she says a bit too breathily.\n\n\"Goodbye, Ella!\" I make a shooing motion with my hand and her lip curls menacingly at me.\n\n\"Ok, I'm going.\" She swipes her purse from the kitchen table and slings it over her shoulder. \"Meara, I'll call you later so we can take care of those last minute details.\" She turns to leave, but stops abruptly. When her eyes settle on Oakley again, I know exactly what she's about to do, but I'm too mortified to stop her.\n\n\"By the way,\" she says airily, \"We're throwing an anniversary party for our parents. It's on Saturday, at 7, at Meara's bar. If you're not doing anything, we'd love to have you.\"\n\nHer smile is far too bright, her eyes gleaming in the sunlight. I want to strangle her. \n\nOakley nods, just a simple tilt of his head, and takes another sip of his coffee.\n\nElla twirls around and walks out of the kitchen. Her heels click faintly down the hall and when the door shuts behind her, I let out a breath I hadn't been aware of holding. \n\nA long moment passes before I turn my gaze to Oakley. He's still drinking his coffee, humor glinting in his gaze. He's watching me closely, and there's a hint of something in the air, something sharp and electric. \n\n\"How much did you hear?\" I ask, narrowing my eyes at him.\n\n\"Enough.\"\n\nHe settles back, resting his lean hips against the counter. \n\nI almost expect him to start asking questions, but he doesn't.\n\n\"She seems nice.\"\n\n\"She's a pain in my ass, is what she is.\"\n\nI take a sip of my own coffee and briefly close my eyes, allowing its warmth and the caffeine to work its magic on me. It's relatively quiet, and I realize it's not the uncomfortable kind of quiet. Oakley and I are usually cuddled up at this time of the morning, or engaging in some sort of delicious morning after sex before he slips away... to do God knows what. We have never shared a moment like this, this easy domesticity. It's not unpleasant, but I'm uncertain how to proceed with it. Should I offer him breakfast?\n\n\"You threatened to kill her, and told her your brother likes you better.\"\n\nIt's a statement, not a question. His voice is low, and when I look up at him, there is amusement in his eyes again. He quirks one dark eyebrow at me speculatively.\n\nI put on my innocent smile, the one I'd learned to use while growing up and my parents had caught me doing exactly what Oakley had caught me doing - threatening my sister' life.\n\nHe laughs, a low grumble of sound that fills my kitchen. A breeze wafts through the open window, causing the curtains to skitter on their mounts and bringing with it the smell of sunshine and freshly cut grass. The distant sound of a car passing on the road beyond the treeline reaches my ears and, despite the coffee, I realize how early it is, how tired I am. I'm very tempted to head back to bed. And drag Oakley with me. We had been quite comfortable before Ella's unexpected intrusion.\n\nA question is out of my mouth before I've had time to even think of the consequences. \n\n\"Do you have any siblings?\"\n\nOakley doesn't respond immediately. He looks at me, and the look is one of mild curiosity. His gaze lingers for a few brief seconds. He does this a lot, merely watches me, taking his time to answer, as if he's weighing what he's about to say in his mind.\n\nMy heart stutters mildy. This isn't our routine; this isn't our way - having coffee in the kitchen in the bright early morning sunlight, inquiring about the personal life of the other. Perhaps I've overstepped. \n\n\"One,\" he finally answers, turning to pour his coffee down the drain. \"Younger. About your age.\"\n\nMy age? Shit! How old is this man?\n\nI watch him rinse out his mug and turn it upside down in the basin. His hands curl around the edge of the counter and he does a sort of push up against it, his back rigid and shoulders taut, as if there is some energy in him that he's wanting to expend.\n\n\"It's too early. I want to go back to bed. Are you coming?\"\n\nAnd, just like that, we're back to the familiar. I nod, pour my own coffee down the sink and walk ahead of him out of the kitchen. I can feel him at my back as we move through the house, large and warm. Our relationship, or whatever it is, is definitely unconventional. Yet, one thing is certain, I've always felt safe with this man in my house. He's not an overly large man, but there's something about him that seems to take up a great deal of space. I like that, too.\n\nNothing more passes between us. We rid ourselves of the small bit of clothing we're wearing and settle into the bed. my body instinctively presses in against his. His hand finds my bare hip and he squeezes lightly. I'm aware of the soft line of tension that goes through him but, as he drifts off to sleep, it melts away, and I'm left with only the warmth and solid feel of him.\n\nHis name is Oakley and he has a younger brother. This is more than I've learned about him in the entire 6 months we've been performing this dance. I know there is a great deal more knowledge about him I'm missing, and I'm only slightly curious to find out, to add a few more pieces to the puzzle that makes up my bedmate. \n\nHis fingers trail lightly up my spine, then splay across the center of my back, pulling me closer, tighter, as he sleeps. The action is enough to stop me from wondering. If only for now.\n\nDamn Ella and her nosey ass.\n\n_____________________________________________________\n\n**6 Months Ago**\n\n\"Come on, Meara. Quit playing hard to get. You know you want me.\"\n\nCarter Ludlow has been after my ass for almost a year now, and he's beginning to work on my nerves. At first, his mild flirtations had been cute, endearing even - a wink here and there, a lingering look which held the clumsy makings of desire and want. In truth, I had been flattered. Now, I'm annoyed.\n\nHe reaches across the bar and curls his thick fingers around my wrist, stopping my hand in mid-motion. His skin is cool and clammy, and my own fingers curl reflexively into the dish towel I'd been using to clean off the bar top. \n\nAs politely as I can, I extricate myself from his grasp and he lets out a low, knowing laugh. There's something about the sound that causes me to look up and I'm startled by the darkness I see floating in the depths of his brown eyes. There's something going on with him, I can tell, and I'm in no mood to deal with it tonight.\n\n\"Carter, drink your beer, hon. It's getting warm.\"\n\nI turn to drop the towel in the sink and, even over the music playing from the jukebox, I can hear the poison in his voice when he speaks.\n\n\"It's a lot warmer than you are, that's for sure.\"\n\nI've had it. I turn sharply and narrow my eyes at him.\n\n\"Excuse me? What the fuck did you say?\"\n\nHe's unfazed by my tone, the sharpness of my words. He takes a sip of his beer, then shuffles it between his wide, clumsy palms.\n\n\"You know, you're something else, Meara Kincaide. Walking around here like your shit don't stink. Like you're too good for guys like me.\" His tone is harsh. Hard. I don't know Carter all that well, outside of what I'd known about him in high school, but this trash he's spewing is new to me. \n\nI blink at him, taken aback for only a moment, but the anger quickly rises in me and I take a step toward him.\n\n\"So, what, you come in here, drink up half my stock, make a few lewd, ungraceful remarks about getting me into bed, and what? I'm supposed to fall all over myself to get to you.\"\n\nI shouldn't be this mad, however my 'bullshit' tank is overflowing tonight. My ex had called earlier in the evening. The conversation had started out in its normal fashion - he'd asked for money, demanded it really, feeling as if I owed him something after all the chaos and destruction he'd put me through. After I'd told him 'no' for the fifth time, he'd finally lashed out, calling me every name in the book, as well as a few others I hadn't heard before. I was wound tight, bitter and angry, and now Carter Ludlow was in my bar, behaving as if I owed him something.\n\n\"You're a bitch,\" he hisses, shoving his beer at me across the bar top. It tips over the edge and shatters on the floor, spraying my pant legs with warm, foamy liquid. A few patrons turn at the sound. They are more curious than concerned\n\nFury flashes through me and, just as I'm about to lunge across the bar at him, a heavy hand comes down on Carter's shoulder. He startles and turns sharply in his seat.\n\n\"That's enough. Time for you to go. Now.\"\n\nThe voice alone would have done it for me. It's deep and powerful. Rich. I can easily imagine it whispering dirty things to me, growling with hunger in my ear. \n\nThat thought alone gives me pause.\n\nAs my eyes take in the guy towering over Carter, I feel my mouth grow dry. He's tall, his dark hair falling in thick waves over his shoulders, shoulders which are encased in leather. A biker jacket, from the looks of it. In the dim light of the bar, his green eyes are stormy, full of promising menace.\n\nApparently as drunk as he is, Carter can't fathom that his life's in danger.\n\n\"Who the fuck are you?\"\n\nThe guys' hand tightens on Carter's shoulder and he takes a small step forward, effectively invading Carter's personal space, giving him little to no room to move.\n\n\"The guy who's gonna throw you out. The lady asked you to leave her alone. She obviously doesn't want to be bothered by you.\"\n\nCarter laughs again, trying and failing to get up out of his seat. The guys' big hand keeps him in place.\n\nCarter looks over his shoulder at me, and then back at the biker. \n\n\"Fuck her, and fuck you, too, pal!\" he spits, the alcohol he's already imbibed adding a comical slur to his words.\n\nThe biker turns emerald eyes to me, and the question in them is clear.\n\nMay I?\n\nI feel my lips curling into a satisfied smile. \"If you would be so kind,\" I say, pouring on the sweetness, throwing Carter a teasing wink just before the biker yanks him out of his seat and shoves him in the direction of the front door.\n\nCatcalls and applause follow them. Apparently, I'm not the only one tired of Carter's shit. \n\nI grab the towel I'd been using to clean up and bend down to gather up the broken pieces of the beer bottle. Evelyn, one of my waitresses, appears next to me with a broom and long-handled dustpan. \n\n\"Holy shit! What was that about?\" She nudges my side with her knee, urging me out of the way. \n\nI stand up and lift my arms above my head to stretch out a kink which has been forming in my lower back all night. I watch her smooth movements as shoves the remnants of the broken bottle into the dustpan. The lean muscles in her brown arms flex gently as she sweeps.\n\n\"I'd had enough of Carter and his bullshit. I told him as much. Guess he didn't like it.\"\n\nShe chuckles, blows a bubble with the piece of gum she's currently chewing, then pops it. She bobs her head in the direction of the front door, where the biker has just re-entered. He stops to say something to a table full of guys dressed in identical leather jackets, then makes his way back to me.\n\n\"Guess you owe that hottie a couple rounds on the house.\"\n\nI'm tempted to tell her to mind her own damn business, that I don't need her to tell me what to do, but I know I'm just being catty and mean. Besides, the so-called hottie is back and, to her credit, Evelyn shuffles off and back to her waitressing duties, her dark ponytail swaying as she moves.\n\nThe biker rights Carter's stool, which managed to get knocked over during the minor scuffle, and settles down onto it. He watches me for a long moment, his green eyes unreadable.\n\nI open my mouth to say 'thank you', but he speaks before I can.\n\n\"You should have kicked out that asshole a long time ago.\"\n\nHis tone is not chiding or accusing. In fact, he's telling me something of which I'm already aware.\n\nI shift my weight to my hip and rest my fist on it. \n\n\"Are you going to be an ass, now, too?\"\n\nHe doesn't reply, just sits there staring at me as if I'm something he's never seen up close before. The weight of his gaze stirs up a bit of heat in my chest, especially when those sharp green eyes begin to move over my body, cool and assessing. \n\nA blast of laughter sounds from a back corner and it's enough to jolt me out of the hazy cloud of sexual tension rising around me.\n\n\"Thank you for taking care of Carter. You and your friends can drink on me tonight.\"\n\n\"My friends? They didn't do anything.\"\n\nI laugh. And, it feels good.\n\n\"You're right. Just you, then. What are you having?\"\n\nI can see Evelyn just beyond the bikers shoulder. She gives me a thumbs up sign, wiggling her eyebrows in a suggestive, if not cartoonish, manner. I want to give her the finger. What the hell is wrong with everyone tonight?\n\n\"What time are you finished here?\"\n\nThere is no accounting for the flicker of desire that swirls through my stomach at his question. I don't want to be attracted to this guy. Aside from being utterly not my type, he's a bit too high-handed for my liking. But, shit, if I'm not drawn to the fullness of his lips, even now when they're set in a hard, pensive line. His shoulders are broad, strong, and he's wearing the hell out of that jacket.\n\nI mentally shake myself. I do not need to get involved with this guy. With any guy for that matter.\n\n\"Didn't you just throw someone out for hitting on me?\" I ask. \n\nThose eyes rake over me again, even more slowly, if that were possible, drinking in every line and slope of my body, and I feel myself getting wet from his perusal. \n\nWithout another word, he slides off the barstool and heads back to his friends. I am not ashamed to say I checked out his ass, and it looks as delicious as every other part of him. No harm in looking, right?.",
        "I try to ignore him for the rest of the night. It's pretty difficult. I can feel him watching me, but every time I turn to try to catch him, he's turned away, immersed in conversation with one of his biker buddies.\n\nI think perhaps I misinterpreted his words, his heated gaze. He was just trying to help. At least, that's what I keep telling myself. \n\nAt 230 am., when the patrons are gone and cleanup is completed, I lock up and head out to my car. I'm exhausted, as usual, my body one huge knot of tension, both from work and the energy it took to fight off the constant, unbidden thoughts of a certain green-eyed biker.\n\nI hadn't necessarily sworn off men. After my divorce, it just seemed so much safer and more productive to focus on the bar. I didn't have it in me to deal with anything else; I had no desire to deal with any more emotionally stunted, greedy, needy men. My heart, my body and my bed remained empty. I had grown to like it. Until tonight, it seemed. My libido had other things in mind.\n\nI'm surprised to find the biker waiting for me. He's leaning against the driver's door of my car. In the dim wash of wavering yellow light thrown over the parking lot, he is breathtaking. His arms are folded over his broad chest, his long, jean-clad legs crossed at the ankles. He looks at ease, as if he hasn't a care in the world, but when he lifts his gaze to me, I know he's been watching, waiting. There's a light in his eyes which speaks of awareness. \n\nFear tickles along the skin of my arms at the thought of being alone, in a dark parking lot, with this man. And something else, something which ignites my insides, setting them to a slow burn. \n\n\"What are you doing?\"\n\nA beat passes before he uncurls his body from its position, his movements putting me in mind of some large jungle cat slinking out of the darkness. He steps to the side and my eyes zero in on my window, which is open, though I'm sure I'd put it up just before I went into the bar that afternoon. A few steps closer and I see evidence of what used to be my window littering the driver's seat. Large chunks of glass sparkle like sharp diamonds against the leather interior. And the front driver's side tire is very obviously flat.\n\n\"This is why I asked what time you were finished,\" the biker says. \"Guys like your friend Carter never take rejection too well.\"\n\nUnderstanding dawns in my brain and whatever I had been feeling a moment ago bleeds away, turning to rage and bringing with it memories I'd just as soon forget.\n\n\"One of my buddies saw him shuffling around the lot. Didn't catch him in the act though. Sorry.\"\n\nMy fingers curl into fists and I tamp down on the irrational urge to kick something. \n\n\"That limp-dicked, cock-sucking, no neck piece of shit!\"\n\nMy voice cuts through the night, a flash of red-hot anger. My chest tightens. \n\nI know where Carter lives. I could slash his tires, bust out a couple of the front windows of his house with a few precisely aimed rocks. Then I could climb through one of those windows and stab him in the balls with his own kitchen knife. \n\nThe idea is tempting, I can see it playing out in bright technicolor in my minds eyes. \n\n\"I'll take you home.\"\n\nMy head snaps up sharply and the biker is standing beside me, watching me. \n\nI think of being on the back of his bike, my arms wrapped tightly around his waist and my breasts pressed against his back, and some of my ire melts away.\n\n\"Uh, no. Thank you. I can call someone to come for me.\"\n\nHe cocks his head to the side. \n\n\"It's almost 3 am. That doesn't make any sense. I'm here. I'll take you home.\" \n\nHe pauses, then raises his eyebrow at me.\n\nMy heart stutters, the saliva drying up in my mouth. This guy is dangerous, I know it. I can feel it. But, not in the way that makes me think I might end up in a ditch somewhere. No. It's what happens when he speaks, when he looks at me. And the thought of being so close to him... He makes me wonder what those strong hands would feel like gliding over my skin, skin that has grown hot and itchy with anticipation. \n\nHe doesn't wait for my response. He steps close and lightly fits his big hand against the small of my back, guiding me away from my car. His scent drifts around me, clean and sharp, leather and wind on a clear spring afternoon. \n\nHis bike is parked at the edge of the bar, its chrome glittering beautifully in the light. I've never been on a motorcycle before, and it's a little intimidating.\n\n\"I'll take it easy,\" he says, obviously reading the line of tension that has rocketed through my body.\n\n\"I'm fine,\" I lie. \"I just ... I'm going to text my brother. He's a lawyer. I'll let him know what happened.\"\n\nThe biker nods, stands staring at me through a set of long, dark lashes. He is strikingly handsome, both dark and light, with a strong jawline and lips that are neither thin nor overly full. Kissable. Soft.\n\n\"Good call.\"\n\nHe watches me fumble my phone out of my purse. My palms are sweaty as I type a hasty message to not only my brother but my sister as well.\n\nMe: Carter Ludlow busted a window out my car. Flattened a tire. Getting a ride home from a patron. Will text when I get back to the house. \n\nI don't expect an immediate response from my siblings, not at such a late hour. Yet, I stand gazing down at my phone's screen, in need of something to distract me from this rising cloud of ... hell, I don't even know what to call it. I am uncomfortable, uncertain, my stomach fluttering nervously. Something about this man calls to me, tempts me toward thoughts I haven't entertained in quite a long time.\n\n\"Ready?\"\n\nI jump at the sound of his voice, nearly dropping and shattering my phone on the pavement. A glance upward reveals a thin, amused look on the biker's face. But it's only a glimpse. Gone before it's fully formed.\n\nI watch him swing one long, jean clad leg over the seat of the bike. He gives me brief instructions on mounting behind him and I stand staring at him a long moment. My apparent attraction to this man, combined with my anxiety about getting on the bike make me feel slightly nauseated. There is a fine tremor in my legs. I entertain the thought of walking home. However, a 5 mile hike in the dead of night is not overly appealing either.\n\nHe's watching me closely. His green eyes glitter faintly in the dim light falling over us.\n\n\"My name is Meara,\" I say, searching for something, anything, to prolong this moment, to keep my feet planted firmly on the ground. A distant part of me thinks this may not be just a ride home from a kind stranger after a late night. Something tugs at my insides, something soft and strange and distantly familiar.\n\nHe nods once. \"Oakley. Get on the bike, Meara.\"\n\nNo assurances, no pleasantries. Simple. Straightforward.\n\nAnother minute passes before I move. I do as he has instructed, thinking that I probably look extremely awkward. I settle behind him, my thighs bracketing his waist. It feels weird, the breadth of the seat and the warmth of his body between my legs, though not altogether unpleasant.\n\n\"Wrap your arms around my waist.\" he says over his shoulder. Maybe I'm going crazy, but it sounds as if his voice has taken on a darker tone. Perhaps he's just as affected as I am. I try not to think about that and, instead, try to focus on his words. \"Pay attention to the way I move. Lean with me, but not too much, or we'll both fall.\"\n\nI nod, making note of these additional instructions, and manage to stammer out my address. \n\nI jump when he engages the ignition. The bike is so loud, the noise of it cutting through the night and displacing every other usual nighttime noise. \n\nHe gives me a few moments to get situated, to get accustomed to the throb and growl of the machine beneath me. I can feel it in my bones and it almost feels good.\n\nThen we're off, turning left out of the lot, heading west toward my house.\n\nAt first, I'm terrified. Neither one of us is wearing a helmet. I have no idea what I'm doing. I'm plastered to the back of a stranger, speeding through the night as if it were all the most normal thing in the world. \n\nAnd, then, suddenly, it all changes and I'm enjoying myself - the bite of the wind in my face, the rumble of the engine beneath me, the solid warmth of the man in front of me. Without thinking, I close my eyes and press my cheek into the his shoulder. \n\nMy mind is empty, clear, and it feels so fucking good.\n\nHowever, all too soon Oakley is pulling up in front of my house. The two story structure looms in the darkness, the only source of light coming from the overhead on the front porch.\n\nOakley cuts the engine and, while my mind is telling me to \"get off\", I sit motionless, reveling in the remembered feel of the wind on my face, the exhilaration of the ride itself and being pressed against this big man. \n\nHe shifts in the seat and, taking this as a sign of discomfort, I scramble off the bike. \n\nMy body immediately, strangely, misses the feel of him. I watch him dismount, his movements unbelievably fluid and graceful, and he is, once again, staring down at me.\n\n\"Thank you.\" I sound breathless. The tremor that had started in my legs is a vibration now, a low hum that envelops my thighs. I can feel it in the pit of my stomach. My core. I pull my bag tighter against my side.\n\n\"You enjoyed that.\" \n\nHe sounds surprised and pleased. It makes me smile, forces a hiccuping laugh out of me.\n\n\"I did!\" \n\nAnd it's the truth. Oakley is a stranger, one to whom I'm undeniably attracted; I let him put me on the back of his back, and the experience was incredible. \n\n\"Maybe we can do it again sometime,\" he offers.\n\nHe is watching me closely, perhaps gauging my reaction and, suddenly, all the good feelings I had been having before revert back to anxiety. My spine lengthens and I stare back at him.\n\nHe seems like a good guy. I mean, he kicked a patron out for harassing me, waited around for me to shut down the bar, and even gave me a ride home after Carter damaged my car. He hasn't said more than a few words to me, none of which include the many and various ways he'd like to get into my pants. It's nice. It's refreshing. Almost more intimate than anything I've ever known. \n\nMy mouth is moving even before I've made the decision to do so, surprising both of us, I think.\n\n\"I'd... like that.\"\n\nOakley's body shifts then, his broad shoulder relaxing just the tiniest bit, as if he'd been holding his breath. His jaw ticks and he gives me one of those single nods again.\n\n\"Good night.\"\n\nHe's seated on his bike before I can thank him.\n\n\"You're welcome.\" He says before starting the ignition. And, just like that, he's gone, the roaring rumble of his back fading swiftly into the night.\n\nHe's waiting for me nearly every night after that. On the rainy nights, he shows up in a pick-up truck, an aged, hulking thing that suits him completely. On the clear nights, he's riding his bike.\n\nHe follows me home and stays just a bit longer than the time before, until night turns into morning, and the birds are singing their cheerful greetings. \n\nWe don't talk much; the silence is oddly comfortable and very welcome. Eventually, the beers from the night before are exchanged for coffee and, sometimes, I wonder where he goes, what he does, when he's not with me. Does he have a wife, a girlfriend, a family, waiting up for him? But, I don't ask, and he doesn't offer, and I merely take it for what it is - quiet company in the darkness. \n\nOn one of those lightening early mornings, he kisses me, sliding his hard body up against mine, and I'm done for, melting under the hot feel of his mouth, the wet glide of his tongue. And, it's just as I thought, his big hands feel fucking amazing on my skin.\n\n\"We're not doing this if you're just looking for a little something on the side,\" I manage when he's got me pressed into the front door. I'd never invited him inside. \n\n\"There's no one,\" he murmurs, his voice gruff in my ear, his teeth dragging down the sensitive line of my neck. My body damn near convulses. He's got his leg wedged between my thighs, his hands on my hips, as he urges me to grind over it. He kisses me hungrily, swallowing up the moans I pant into his mouth. \n\nThat first time is incredible. His hands move me, push and pull me, leave me a hot quivering mess. His cock claims me, drives me higher and higher, gives me no other choice but to come for him, over and over again. \n\nI don't wonder at his experience, or his certainty. I am fucking grateful for it, if I'm honest.\n\nI'm not sure when, but he manages to plug his number into my cell phone. He starts texting before he shows up - tells me he's coming over instead of asking if I'm free. He knows I am, and there's always a measure of excitement that thrills through me at the sight of him.\n\nTime passes and the rhythm solidifies itself. I don't know what we are, but I like it. It's effortless, and easy, and deliciously uncomplicated, on the complete opposite end of the spectrum from everything I had known previously.\n\nUntil the bike bunny.\n\nUntil Ella and her nosey, destructive ass."
    ],
    "authorname": "Erisjade16",
    "tags": [
        "black woman",
        "white man",
        "interracial erotica",
        "interracial romance",
        "bwwm",
        "romance",
        "biker",
        "love"
    ],
    "category": "Interracial Love",
    "url": "https://www.literotica.com/s/meara-and-oakley-ch-02"
}
{
    "title": "Ain't Budging Ch. 03",
    "pages": [
        "Rhett lazily weaved across the wide stretch of road, his dirty overalls still on, and an even dirtier smile written across his face. It was evening, and he could hear the crickets strum their twittering chorus in the background, as he considered Theresa. He figured that whilst the sun sunk and left darkness in its place, then there was little chance that Theresa would want to catch the night bus to San Francisco, which meant there was a good chance of them fooling around together more. In the back part of his mind that was actually the front of his mind he imagined Theresa tied up, blind folded, with her legs spread as she smiled in anticipation....his heart beat fast, and his dick stirred like a lazy snake.\n\nHe revved up the accelerator, tailgating his thoughts.\n\n-------------------\n\nWhen Rhett arrived home he hesitated, remembering that there was a good probability that Theresa wouldn't appreciate being told that he was going to pick up groceries for only twenty minutes, only to leave her for half a day. He hoped she wasn't angry. He couldn't see her throwing anything too heavy at him, but he couldn't forget her stabbing that trucker with a comb.\n\n\"Theresa baby, I'm home. Sorry-\"\n\nThen he caught a glimpse of the hastily scrawled note on his table, in Curly's own chaotic handwriting.\n\n\"Gone Fishing!\" \n\nRhett picked up the note, and irately screwed the paper up into a small ball.\n\n\"Gone Fishing\" was the brothers code for picking up girls to sleep with. With Theresa being absent and the brothers having visited while he had been at work, he put two and two together quicker than Brer Rabbit with his ass on fire. \n\n-------------------\n\nEarlier that morning Theresa had found herself stuck to the door in fright as five bikers parked round the front of the house, confidently swinging off their bikes. Theresa hugged herself and blinking, forced herself to smile a strained smile and straighten her back. Her Aunty Cecilia always told her that if ever she was in a troublesome situation with men, to straighten her back and be bold. The men were well-built, and like Rhett, they had beards and hair; lots of it. They wore similar jackets to Rhett. She guessed in a split second these were the biker brothers he referred to.\n\nSensing that a verbal offense was the best form of defense, she cocked her head back and croaked out, \"Hey, you here for Rhett?\" \n\nOne of the bikers had blond hair with dirty curls. He looked at her oddly and grinned, exposing a broken mosaic of teeth, \"So you the one Rhett's been hiding? Some shame.\" He drawled lecherously. \n\nTheresa's heart hitched up the pace and ran, she took some deep breaths through her nostrils, \"Rhett's gone out to get some groceries from the store, apparently.\"\n\nShe turned round, and nearly had a heart attack when she felt her wrist being grabbed, \"Oh we know where Rhett is alright baby. But the thing is, we hear that there is a free and easy colored chick in town. Want some milk and sugar in your coffee baby?\"\n\nTheresa nearly retched and her anger superseded her fear, \"I'm bullshit intolerant, so won't be having anything you have to offer.\" She snapped.\n\nThe guy pulled her towards him roughly, Theresa cried in surprise, \"Now you listen here-\"\n\nThe other guys who had been watching silently approached. A chubby one with a sad looking face and bright blond frizzy hair put a hand on his shoulder, \"That's enough Curly, Billy told you she was Rhett's guest, not a sheep or easy broad. Don't think Rhett will much like to hear you manhandling his guest. Now Theresa we thought we'd show you around, especially with Rhett being busy. Sometimes it's nice to keep the company of someone who's a little, uh, different. Right Curly?\"\n\nCurly and Theresa shot each other mutually disdainful glares, \"Sometimes a little different needs to know when to step into line Fritz old boy.\"\n\n\"Curly dude, listen to you, talking like a cop. No one needs to step into line, just need to stop getting so worked up over nothing. Let's just take the girl down to Moe's, and show her a good time.\", Fritz said grinning, \"and you know Marlene's on the pole tonight Curly, she was pretty wild last week, bet she's gonna show us some hot stuff tonight too.\"\n\n\"Yeah come on guys, let's hit the road.\"\n\n\"Hey where you going Curly?\"\n\n\"Leaving Rhett a note, so he knows where we're at.\", Curly swung open the door that Theresa had left opened and sauntered into Rhett's living room.\n\nTheresa really didn't want to go anywhere with the bikers, Curly made her particularly weary. In her heart the seed of dread and foreboding grew. Fuck knew what these guys wanted from her, she only hoped that they didn't know what they wanted from her either. \n\n-------------------\n\nTheresa should have been having great old time, she was in a bar that resembled a hunting lodge on acid, a jukebox was kicking out some rock music. Distorted guitar hummed in the air and there were some seriously intoxicated bikers and their girlfriends or hangers-on slouched about the place. In front of her there was a circular platform with a pole, a barely-dressed stripper sat slouched on the edge of the platform, drinking a cocktail and swinging her legs. \n\nIt was a new scene and therefore a new experience, she just wished she could enjoy it, except for a variety of reasons, she could not. This was because somewhere along the line the repulsive Curly had picked her up and placed her on his lap, snatching every moment to unashamedly attempt to stuff his hands down her pants. She tried to fidget away from the grasping pair of hands, but apparently, he had developed the art of evading a woman's evasions. Whilst engaging in his annoying form of torment, he chatted casually with the other biker brethren, mostly telling them about some pathetic broad who would spend three hours daily cleaning his bike whilst he slept through the afternoon. \n\n\"That's the way to do it partner. Too many women round here are damn useless, can't cook, can't do nothing much. Shoot, the least they can do is polish up the Harley nice.\", Billy said in agreement.\n\nThe chubby blond guy named Fritz shook his head slowly in disagreement, \"No, who wants a woman like that, without a head on her shoulders, I want my woman like for like, who can make me feel excitement. Not just some sheep, or puppet. Pass me the ash tray, thanks.\"\n\nCurly leant in towards her, the whiskers of his moustache scratching her cheek. Theresa felt horror well up all over as Curly licked her earlobe like a thirsty gecko, \"Now can you believe this Theresa? Fritz here, wants himself a bold fiery girl with a good head on her shoulders. Fritz, listen Fritz, who was that Chinese gal you had in Vietnam?\"\n\nFritz visibly gnashed his teeth, \"She was not a Chinese girl in Vietnam, she was a Vietnamese girl in Vietnam.\"\n\n\"Yeah whatever, they're all the same right? Now listen, what was her job again? You can whisper it if you like.\", Curly drawled mockingly.\n\n\"She was a bar girl.\"\n\n\"Yeah, that's right, she was a whore.\"\n\n\"No, she weren't no whore. She was a bar girl, and you had better stop that because you knew nothing 'bout La'nh. For a start, if anyone dared call her a whore-\", Fritz bit his lip, like he was self-censoring something, and then his shoulders slumped, \"Fuck it. Just fuck it. Hey Marlene, when's the show gonna start?\"\n\nThe stripper on the stage, a stony-eyed blond, threw Fritz a disregarding look, and unenthusiastically shrugged, \"Gimme time folks, gimme time. I ain't even finished this here iced tea.\"\n\n\"Oh come on Marlene! Put down that drink now girl and get those titties swinging baby! You're keeping your fans waiting.\", Billy barked. He grinned like an idiot then turned to look at Theresa like she was a sympathetic fan who had been kept waiting. Theresa smiled back politely.\n\nMarlene replied gruffly, \"I ain't on for another seven minutes, and I ain't showing nothing any sooner than I need to. Anyway, where's Rhett? He never misses a show.\", Marlene's scouted the room. Theresa felt a sting of jealousy, wandering what Marlene and Rhett shared. \n\n\"Rhett? Rhett will be down from work soon baby. But see here, why don't you get things a little warmed up for him on this here stage? Show us some of your sass.\", Billy suggested, patting his crotch.\n\n\"Hey, Marlene, you met Theresa? She's come all the way from the city.\", Fritz nodded to indicate at Theresa.\n\n\"You come all the way from the city? For what?\", Marlene looked at her suspiciously.\n\n\"Mardi Gras, kind of got stuck here.\"\n\n\"And how come you're fraternizing with these here gentleman?\", Marlene screwed her lips up.\n\n\"Oh hey now, I don't think anyone can accuse us of being gentleman.\", Billy interjected.\n\n\"Was hitchhiking, nearly got attacked by some trucker.\", Theresa responded, sensing Marlene's naked hostility.\n\n\"Oh yeah? Which white knight gone saved you're behind?\", Marlene enquired roughly.\n\nBilly responded, \"Rhett picked her up, she stayed with him last night Marlene.\"\n\nMarlene looked at Theresa so hard that her blue eyes nearly turned green from envy, \"Mighty good for you. Excuse me.\", Marlene slid off the stage and then quickly stampeded towards what Theresa guessed was the bathroom. \n\n\"What you have to go and say something like that to her Billy? You know Marlene has the hots for Rhett? Man! I hope she'll still come out and dance tonight.\" a biker called Luke said anxiously.\n\nCurly smiled heartily, \"Oh she will, and I bet if anything, she'll swing her titties extra hard tonight. Knock you out of the ring with 'em Theresa. Yeah, knock you out with her titties real good.\"\n\nTheresa looked at Curly disdainfully, \"Never thought a dancer's bosom could be compared to Muhammed Ali's left hook.\"\n\nSome of the bikers chuckled, Curly didn't, \"A stripper like Muhammed Ali? Shoot! I ain't no faggot, specially not for some negro man, I ain't no faggot.\"\n\nTheresa finally caved into her disgust for Curly, \"Excuse me, I need the bathroom, real bad.\"\n\nCurly smiled about as sleazily as they come, and let his arms slide off, \"Well, come back to papa sugar, my laps already feeling cold.\"\n\nTheresa smiled and nodded politely, she looked at the clock on the wall; time was running slower than molasses.\n\n-------------------\n\nTheresa opened the door to the ladies bathroom, and no sooner had it swung behind her, she came face to face with displeasure of Marlene the stripper.\n\nHands on hips, Marlene, her face streaked with tears stomped out of nowhere, \"You sleeping with him?\"\n\nTheresa looked at Marlene, dumbfounded, \"You mean Rhett? No, no. Anyway, I'm leaving this place tomorrow. \"\n\nTheresa tried to nudge past Marlene. Marlene grabbed her upper arm, her hands were strong. \n\nWow, maybe Muhammed Ali and Marlene the stripper do have something in common.\n\n\"Well good, because I am sure you're a nice gal and everything, but I know Rhett. I know him more than any girl will ever know Rhett, maybe even more than Rhett himself knows himself.\"\n\nTheresa shot back, \"That's quite some insight you have there, bordering omniscient. Can you loosen your grip please?\"\n\nMarlene scowled so meanly that Theresa could almost see the hoodoo storm clouds gathering, \"There you are throwing some college words around, smug, real smug. But you know what honey, sure you're pretty for what you are, sure you've got yourself some education, but you're colored. No white man in his right mind will ever take you seriously, except to sleep with you. And I know Rhett, he sure do like novelty, especially fucking it, as do all these bikers when they get bored or playing their silly ol' games.\"\n\nThat stung, but Theresa was not going to lose her cool, \"Some chicks, though evidentially, not all, can tell the difference between getting laid and getting married. But thank you for tip.\"\n\nMarlene's frowned and pursed her lips, \"No such thing as a woman who just wants sex from a guy. Most women want to be taken something serious.\"\n\nTheresa coolly shrugged, \"I like to be liberated and free, just, let my hair down.\"\n\n\"Or up! Let your hair up with that big ol' afro of yours, hahaha! Ha ha ha!\"\n\nTheresa sighed as Marlene doubled over in mirth at her own joke, \"Yeah that's great, anyway, why you lecturing me about being taken seriously? I ain't the one who likes to boogie on down without clothes on.\"\n\nTension crackled in the air. Marlene's fingers dug into Theresa a little deeper, but then looking at her sternly, she let go.\n\nMarlene said gruffly, \"I been dancing naked long before Rhett came on the scene. Enjoy it too, like the attention, and money. Men never used to pay much attention to me before I danced, my mamma always said I was too rough otherwise.\"\n\nMarlene visually appraised Theresa's skimpy attire with new approval, \"I know you screwed Rhett, can just tell it, but that's okay, as long as we all know where we stand. Rhett screws a lot of girls, a lot of girls, but he always comes back to me.\"\n\nA regular carousel of love. Theresa grimaced to herself at the thought , and then slid towards one of the cubicles, feeling it would be safe to do so without setting off the volatile Marlene.\n\nAs Theresa locked herself in, she could hear Marlene leaving, \"Hey we should dance together, the guys would go crazy and all cream themselves.\"\n\nTheresa muttered sardonically, \"Nice.\"\n\n\"Yeah it sure would be, I'll even split the tips, man, the tips will really be something special if we dance together. Anyway see ya in their baby, gotta get grooving.\", Marlene uncouthly banged the door to a close.\n\nTheresa grimaced to herself as the door slammed. She looked down at her white platform shoes, wishing they were red slippers and she could click them together to get home pronto.\n\n-------------------\n\nRhett took some deep breaths, letting the anger drain out of him like steam. He bet his bottom dollar that it was Curly who came up with this plan to take Theresa. Curly had turned into the world's biggest asshole since being elected group leader for the year, something that the group, with a silent concurrence, had done really out of sympathy for Curly landing his own sorry ass in jail for two years when he got caught dealing methamphetamine. Curly before he had been in prison had been a reckless dare-devil, but good to his brethren, since being in jail, and been given the remotest degree of power within the gang, he cut the sad figure of someone who even got a rise from causing his own friends trouble. \n\nRhett adjusted his jacket, and squaring his shoulders a little, strode towards the bar, greeting some bikers that were sitting outside sharing a joint together.\n\n\"How you Rhett? You know Marlene's about to dance inside. Bet you'd like that huh?\", Lashley said, wrapping his arms round his girlfriend, Polly, who, dressed in a black beret and polo-neck looked like a loved-up beat poet.\n\nShe looked at her boyfriend and chastised him sweetly, \"Oh Lashley, you don't ever seem to listen to me when I talk about the subjugation of women as a form of phalliocentric capitalist oppression, that's just what her dancing is, wish you'd listen.\"\n\n\"Oh I hear you alright, ain't phalliocentric mean penis?\"\n\nRhett laughed.\n\nPolly shot Lashley a weary look, before turning her attentions to Rhett,\"Uh huh. Rhett, there is the most beautiful black chick in there, though not that it matters to you cause I guess she ain't your type. Anyway Curly's taken some weird liking to her, so she's probably off limits unless he plans to pass her around.\"\n\nRhett grimaced visibly, Lashley looked at Rhett with playful interest, \"Yeah, Polly, the negro chick is staying with Rhett.\"\n\nPolly nodded in approval, and gazed at Rhett with newfound admiration, \"Cool, I didn't realize you were open-minded like that Rhett, you always seemed, you know, I wouldn't say an out-and-out racist, like card carrying or anything but uh...well, never mind. Don't take this personal, but kind of makes me like you, I mean, like you more.\"\n\n\"Thanks.\", Rhett mumbled unconvincingly.\n\nLashley elbowed Polly playfully, \"So if I bought home a colored gal, you'd like me more?\"\n\nPolly shot Lashley an evil look and shook her head with deliberate slowness. \n\nLashley chuckled, \"Damn well, can't blame a guy for trying.\"\n\nRhett muttered, \"Great to see you guys, I better go inside catch up with the brothers, make sure Theresa is alright.\"\n\nLashley's relationship with Polly hit a good note, even though the two of them barely had anything in common, they had an enviable spark between them. He once nearly had something like that before he went to Vietnam, but it hadn't lasted through the war. Theresa flashed into his head, he felt a sudden pang, the kind you get when you're thirsty.\n\nHe weren't going to dwell on it, it was all just thoughts and feelings, and sometimes thoughts and feelings could be a man's worst enemy.\n\n-------------------\n\nTheresa was sat next to Fritz's side as they watched Curly induce Billy to do something stupid, just as Rhett was striding towards them from the far end of the bar. Fritz shot a raised eyebrow at Theresa. Theresa shot one back.\n\n\"Hey Billy....you drink this-\" Curly pushed out his glass with beer, tipped the ash tray into it, and then got some old gum stuck to the surface of the table and threw that in too, \", \"drink that my friend, I will buy you all the rounds you want for tonight.'\n\nBilly licked his lips greedily, he looked round at the brothers for support, a few of them grimaced, but one of them growled enthusiastically, \"Do it Bro! Get all that there drink down your pipe. \"\n\nBilly like a puppy dog wagged his head stupidly then grabbing the glass, tipped the disgusting concoction down his throat. Glug, glug, glug it went down. Down, then back up.\n\nBilly coughed it all over the table and then ran to the toilets, with howls of laughter dogging him. Theresa pursed her lips together; she really didn't understand how they could find what they were seeing fun. \n\nRhett wove between the bikers, greeting old friends casually, and having small banter with their old ladies or mammas.\n\nBilly returned, his face a certain shade of green. He brushed past Rhett.\n\nCurly said smugly, \"Now Billy boy, that was just a dumb ass thing to do. You still want beer? All night? I bet my bottom dollar that's a no.\" \n\nBilly shook his head meekly, \"Naw. I think I'm gonna rest a minute. That hurt my stomach, think the gum's lodged down my throat still. Can't get it out.\" To demonstrate he shoved his finger down his throat, allowing everyone to see his rotting teeth and diseased gums.\n\nFritz sighed, \"Billy, my brother,' bout time you saw the dentist.\"\n\n\"Don't believe in dentists and all that bull. Any money I'm paying going straight into the chopper.\"\n\n\"Hey, guys, how you all keeping?\"\n\nTheresa turned towards Rhett's voice; then her body did something weird; just looking at him made her heart beat faster and her skin heat up. He looked at her too, his eyes crinkled in concern, but his face relaxed into an assured smile, \"Good to see you here Theresa, hope these guys been treating you fine. You been treating her fine, boys, Curly?\"\n\nCurly shrugged, \"why you single me out?\"\n\n\"'Cause, I got your note Curly, and listen, come here.\", Rhett beckoned Curly outside the circle, so they were a little secluded. Rhett could see Theresa giving them a funny look.\n\n\"Don't think I don't know what you're thinking Curly. And the answer is 'no', you freaking touch her, I will break your arms off. Both of 'em. You hear me?\"\n\n\"I hear you. I hear you alright, how you been pussy whipped by a negro chick into threatening your leader. Now as you're the treasurer, and the guys like and respect you, I am going to let it slide. Just this time though, just this time.\"\n\nRhett could just about feel his fists itching at the sight of Curly when he heard some of the kinds roar in approval. He turned round.",
        "Suddenly \"OD'd on Life Itself\" by Blue Oyster Cult, one of Marlene's favorite bands, started blaring out. Rhett turned round and Marlene was on stage, swinging about the pole, her fierce blue eyes fixed on him like a hawk.\n\nPolly and Lashley came in, Lashley stood their coolly whilst Polly began to dance like a wild thing. \n\n\"Woo! Woo! Got to hand it to Marlene, she knows a good tune. Dance with me Lashley.\"\n\n\"No, don't dig dancing.\" Lashley responded gruffly.\n\n\"Come on! Dance with me! It's fun! Woo! Look at Marlene, she looks so pretty, dancing there. Don't I look pretty when I dance?\" Polly grabbed Lashley's sleeves and forced him into a dance.\n\n\"Goddamit woman, this is humiliating.\"\n\n\"Hey I'll dance with you Polly.\", Billy got up, and started to swing his hips to an imaginary rhythm that didn't quite match the music as he approached Polly.\n\n\"See Billy will dance, won't you Billy?\", Polly chuckled mischievously, dancing merrily between her reluctant boyfriend, and Billy.\n\nTheresa turned round, but her eyes widened and Rhett could see her muttering, \"Oh my\" as Billy turned round and felt Polly's tits whilst Lashley groped her bottom. Polly smiled wider than a boat as the two men clumsily ground against her. Theresa averted her gaze quickly.\n\nRhett, made his way over, feeling a sense of relief that Theresa was sat next to Fritz, who had a good way with women. He had almost forgotten that Marlene was on stage when he saw Marlene, her pale creamy tits swinging all over the place beckon Theresa. Theresa shook her head in resistance. But this was no deterrence to Marlene, who elicited some whoops from the crowd as she crawled towards Theresa, flicking her tongue out crudely. Theresa smiled shyly, averting her gaze with discomfort. Fritz leant over and whispered something in Theresa's ear. Rhett felt his jaw clench jealously. Fritz had never cut any bones about being the sort of open-minded fellow Polly admired. Rhett bet anything that he knew what Fritz was thinking. Given that Fritz's gaze had dropped to Theresa's cleavage, Rhett didn't have to be much of a telepath to read it.\n\nMarlene lithely slunk to the floor, and Rhett could not help but chuckle sadistically as Theresa looked more worried than he had ever seen her, her large almond eyes downcast. She had every right to be worried, Marlene was jiggling her breasts towards Theresa with great enthusiasm. Then, after a couple of blinks, Marlene was doing a snaky lap dance for Theresa. A roar of laughter erupted amongst the mostly male audience as Theresa frowned at Marlene's undulating derriere with an almost academic disdain. \n\nCurly cackled behind Rhett as Rhett watched Marlene began to lap dance for Theresa, \"Billy told her 'bout Marlene. Pissed Marlene off to high heaven when she heard Theresa was staying with you. She's trying to knock Theresa out of the ring with her titties. Knock her out solid. Bam!\" Curly did a swinging punching motion with his hands.\n\nRhett shook his head and sticking his hands in his Levi pockets shrugged, \"Marlene don't own me, just cause we screwed a few times. Man, I just wish girls could just relax, like Theresa. Maybe San Francisco girls are just more with the times.\"\n\n\"Yeah those San Francisco girls sure know something about having a good time, like your girl there.\", Curly chuckled darkly.\n\nTheresa had got up and was dancing around with Marlene.Theresa's hands were on Marlene's shoulders keeping them a safe distance apart, and she shimmied up and down smiling shyly. Her smile emphasized her high cheekbones and generous plump lips. Theresa winked playfully at Marlene as she parted her thighs suggestively, gently rotating her hips. The crowd went wild.\n\nSome guy shouted, \"Strip! Strip! Strip!\", and was soon joined by a chorus of others.\n\nRhett felt himself grow worried. Looking around the room, some of the men, with their tongues hanging out and tails wagging, had turned to wolves. Theresa had probably stirred more attention than one woman could handle.\n\nSome primal part of his brain snapped, he marched over, and then to a chorus of boos swung her over his shoulder. Theresa squealed in surprise as he walked across the bar.\n\n\"Oh come on Rhett! The show's only just started.\" Hank protested in annoyance.\n\nRhett fired back gruffly, \"You want a show, Marlene will give you a show, that's her job.\"\n\nHe heard a few boos, but soon their attentions were fixed back on Marlene.\n\nRhett said nothing as he took her to the bar, and sat her down on a bar stool, \"Theresa, be careful, you nearly got yourself into a situation there, you need to be less naive girl.\"\n\nTheresa gazed dangerously at Rhett, \"Naive? Uh no, I don't think so, but thank you all the same Mr Morality Policeman.\"\n\nRhett looked at the barman, indicating he wanted to be served, \"Just looking out for a ditz from out of town. Clearly you don't appreciate that. Paul-hey, can we get two beers, Olympia please. Thanks dude.\"\n\nTheresa arched a brow, \"Wow, thank you Rhett, you read my mind.\"\n\n\"Really?\"\n\n\"No, I hate beer. It's like drinking carpet.\"\n\n\"Well, someone's being petulant tonight, just thought I'd help you out. Since your senses are comatose somewhere under a rock, thought you'd appreciate it.\", Rhett propped his elbow against the bar.\n\n\"What are you talking about Rhett?\"\n\n\"Just about every guy there had a hard on. And there you were, like you know-\"\n\nTheresa screwed up her face derisively,\"-a tramp? A whore? A lamp post? What was I like? Fuck you, I should be the one mad at you, I got a class to teach Monday, books to mark, lesson plans to write, and I am still here, and oh, I wonder why. Could it be because someone did a little disappearing act this morning?\"\n\nRhett lent back and smiled to himself, despite herself and how mad she was at him, she could feel her anger evaporate, \"Hell, now there's a guess I would never have made right. A teacher you say? Now that is something.\"\n\nTheresa pouted her lips, \"It's not that funny. I can look like a teacher you know-\"\n\n\"I'd like to see that. You in a blouse and tight skirt...heels...stockings...\"\n\nTheresa raised a brow, \"I'm a little more demure.\"\n\nRhett drank down some of the beer and then lent over, whispering in her ear, \"Of course you are. Sweet, demure, slutty Theresa. Running around demurely in those leopard hot pants that make your ass cheeks look like peaches waiting to be bitten.\"\n\nTheresa felt Rhett's hand on her shoulder. It scorched through the cloth, like he was trying to burn her clothes off with his mind, \"Your hands are hot.\" she said huskily.\n\n\"Theresa, Theresa, Theresa...I just want to fuck you. Right now, I'm thinking of fucking you on the bar, your thighs spread wide, wrapped around me.\", He traced a light path across her jaw with his finger as his blue eyes assessed her dark beauty.\n\n\"With people watching?\"\n\n\"Would you like that Theresa, with all those people, men watching, but would I start by playing with your pussy with my fingers and tongue, or by giving you a rough fuck so that they could hear you moan my name as you came around my cock, where you belong.\", Rhett's said, his voice gravelly from desire. He dropped his gaze to the prominent outline of Theresa's nipples, his cock thickening at the invitation of her sweet curvy body.\n\nThe sweet spot of Theresa's pussy tingled from his words. She looked at him entranced. If he did want to take her on the bar, in public, she was not sure if she could say no to him.\n\nBut then Rhett withdrew his hands from her jaw and looked surprised, like something had only just occurred to him, and then his eyes went cold and lips straightened, \"Listen to me, getting all possessed with you. Sort of stupid for two people that only want to screw around.\"\n\nHis words, the avoidance of eye contact, poured over her like ice water. Theresa exhaled impatiently and then swung round to face him, \"Yeah that is stupid, because I don't need anything from you or any man, especially you. Excuse me.\"\n\nTheresa, angry slid off the bar stool and grabbing her beer, more for comfort than anything else, sauntered out towards the doors. Rhett turned round and heard some whoops. He watched briefly as Marlene grabbed a beer bottle and ran it between her exposed tits. She looked at him and winked. He could wait, Marlene was always an option, but that thought left him feeling unexcited. Now Theresa on the other hand, interested him immensely.\n\n-------------------\n\nTheresa lent against the wall outside the bar trying not to cry; her confusion over Rhett swamped her like the warm breeze of the night.\n\nThat's what happens when you fuck a man and lose your senses Theresa, makes you pathetic and stupid. You don't even know him. \n\nA strange irrational sense of guilt descended, she exhaled and closed her eyes, trying to think of nothing.\n\n\"There you are.\" She opened her eyes and saw Rhett approaching. Her eyelids were rimmed wet with the promise of tears.\n\nRhett closed in on her, his face drawn in concern, \"Hey what's all this, you been crying?\"\n\n\"No. Why would I cry over you? Even your beard needs a comb.\" She looked at him with mustered contempt, her eyes glimmering. She felt strangely both relieved and annoyed when he smiled at her and chuckled, placing his hands on her shoulders. From the touch of him palm, anticipation radiated through her body.\n\n\"I don't know, maybe you're feeling all sad that you can't have me. Don't blame you sugar.\"\n\nTheresa looked at him, aghast at his nerve. He broke out a mischievous grin, his blue eyes twinkling.\n\nShe slapped his arm and tried to shift past, \"You are an arrogant son of a-\"\n\nHe used his body to pin her against the wall and his thigh to spread apart her legs. Then he lent in, \"You can have me, every hard inch of me. Understand? \"\n\nHe slid his hands round the dark nape of her neck making her whimper from the sensation of his skin against her own. Theresa's pussy throbbed with arousal.\n\nTheresa closed her eyes and murmured, \"Who says I want a single inch of you?\"\n\n\"You don't need to say anything Theresa.\" to reinforce his point his nudged his thigh further up, grinding it against her pussy so that she moaned. He chuckled drily and then slid his knuckles against her cheek.\n\nTheresa felt Rhett kiss the tip of her nose before saying assuredly, \"Open your eyes and look at me.\"\n\nTheresa opened her eyes and looked at him fiercely, a hot red lust burning into him; she said nothing as her body melted against his, her pussy moistened as she was pinned against the wall. She moaned in frustration; her hunger for him burned her body with arousal so badly did she want to experience his skin against her skin. As if reading her thoughts she felt his hands on her hips.\n\nRhett's heart thumped and dick hardened as she looked at him, assessing him through her dark almond eyes. His hands slid down the womanly curve of Theresa's hips feeling the hem of her hot pants and slid under the material, feeling her silky chocolate skin. His breathing grew heavier as he sought to control himself, stop himself from ripping her clothes off and fucking her then and there.\n\nRhett saw her squirm a little, \"If you don't keep still...\"\n\nTheresa swayed her hip towards him challengingly, \"You'll do what? Make me cum? All the pity for me.\"\n\nRhett chuckled sadistically, \"Oh even worse baby, I won't let you cum at all.\"\n\nTheresa looked at him puzzled, Rhett then swung her over her shoulder, like a caveman who had kidnapped a chick from a neighboring tribe. Rhett walked round the back of the bar, into a grassy opening with a log cabin at the back. Theresa just clung on for dear life.\n\n\"Where are you taking me?\"\n\n\"Somewhere with all the equipment I will ever need to make you cry out my name, or try to.\"\n\n\"Now you're just scaring me.\" \n\nRhett patted her bottom reassuringly, \"You scared? I doubt that. Here we are.\"\n\nRhett flipped her off his shoulder and led her by the hand towards the small log cabin. She twirled a lock of her afro dubiously and frowned, \"Nice, a love suite, for undiscerning horndogs.\"\n\n\"Hey, I don't bring every chick back here.\" Rhett wrapped his hands round her waist and walked towards the log cabin.\n\n\"Okay, a love suite for partially discerning horndogs.\" Theresa sighed as Rhett opened the creaky handle and let the door, with a grinding whine at its hinges, swing open. Rhett reached in and flicked a switch. Light reluctantly splattered across the room, revealing plenty of gardening equipment, and a beam across the ceiling, with dried plants hanging upside down.\n\nTheresa squinted at the plants, they looked oddly familiar, but she couldn't place a name on what they were, \"Wow, pot pourri anyone?\"\n\n\"More 'pot' than 'pourri'.\", Rhett gripped her hand and led her in. He kicked the door so that it shut with a bang; Theresa just about jumped out of her skin. \n\nRhett looked at Theresa hungrily and sauntered towards her, Theresa playfully backed against the wall, \"Ah, now I see, you didn't want those guys getting down with me because you want to get down.\"\n\n\"I won't lie to you Theresa, you make me a jealous man.\", Rhett's hand caressed her neck as he kissed her jaw, her earlobes, her lips. He loved the feel of her soft dusky skin against his lips, like black satin. He inhaled her scent, as if he were trying to capture her essence to remember her by. Theresa wrapped her hands around his shoulders and pulled him in closer, sighing. Both melted into one another, craving the other's attention.\n\nRhett squeezed Theresa's bottom firmly, getting a little harder when she moaned and pressed her hips against his own. He broke the kiss and drawled, \"Grab that twine, throw it here baby.\"\n\nTheresa saw the ball of twine on the table behind her out of the corner of her gaze, her slender brown fingers danced over it before caressing into her grasp, \"Twine? You're planning to garden me into being a good girl?\"\n\nRhett smiled, his teeth glinting, hinting at the red hot blood pumping fast through his veins, \"Something like that.\"\n\nTheresa boldly shrugged her shoulders back and blinked coquettishly, \"Something like-\"\n\nRhett moved in quickly, his hot breath meeting her lips before his brutal kiss did. His tongue slipped silkily between her lips. He tugged the ball of twine from her hands until it was within his grasp. Rhett nudged forward, forcing Theresa to move back against the table. He then lifted Theresa onto the table and pried her soft thighs apart. Grabbing her afro hair he carefully pulled her hair back so she was looking at him, and kissed her plump lips again. Rhett's other hand found her breast and squeezed it and flicked his thumb across a distended nipple; she moaned responsively.\n\n\"Take of your T-shirt and bra baby.\", Rhett demanded hoarsely.\n\nTheresa silently peeled off her top and bra, and neatly folded them. She could see Rhett tense up. She dropped her gaze to the bulge in his trousers and allowed her attentions to linger at his prominent bulge.\n\n\"Good girl, look at your nipples, plump as berries, you wet too Theresa?\" As if to elicit a response, Rhett squeezed a nipple, Theresa squirmed as she became aware of her swollen pussy, her moistened panties.\n\nShe averted her gaze by dropping it to the wooden floor. In response he squeezed both nipples extra hard. Pain and pleasure shot threw her sensitive buds, \"Ow!\"\n\nRhett stepped a few steps back and then removed his jacket and t-shirt hastily then drawled, \"I asked you a question slut.\"\n\n\"I am feeling, uh, good.\" she felt her face flush with heat as her heart thumped. \n\n\"That's not what I asked.\" Rhett's gaze lewdly surveyed her body, he stroked his beard thoughtfully.\n\n\"Bully.\", Theresa teased.\n\nRhett chuckled, \"I'll take that as a compliment. God your body was just made for a man to play with.\" Rhett bent over and bit a dark nipple, tugging it with his white teeth. Theresa cried out and tilted her eager hips towards him.\n\nRhett released her wet nipple from his gentle bite and kissed Theresa again, brushing his parted lips against her own, before slipping his tongue in, squeezing her sweetly sore nipple roughly as he did so. Theresa whimpered, dazed in arousal, and ran her fingers through Rhett's hair. She felt more wetness trickle between the slit of her cunt, priming her to be fucked.\n\nShe reluctantly broke the kiss.\n\n\"You can take me now.\" Theresa meekly suggested her voice a whisper and her body turning to jello.\n\n\"Oh I don't think so, as I said, you were made to be played with. Wrists out Theresa.\"\n\nTheresa ran her feet along his inside leg, she could see a twitch of his jaw and his eyes glow even more intense. \n\n\"Mm you can do whatever you like to my hands, I still got my feet remember.\", Theresa taunted him by stretching out her legs and wriggling her toes.\n\n\"Good point. I guess I better tie those too.\", Rhett said huskily.\n\n\"If you insist.\", Theresa hopped off the table and rapidly shed her hot pants before hopping back on. She spread her legs wide, revealing the gleaming contours of her sex lips. \n\nRhett squatted, gently kissing the calf of her leg, and then tied her lithe dark ankles to each end of the table leg with the twine. He tried not to do it too tight. He rubbed the balls of her feet reassuringly.\n\n\"You okay with this Theresa?\" Rhett rubbed her dusky thighs slowly.\n\n\"Um.\", Theresa bit her full lower lip as Rhett's thick fingers began rubbing her slick pussy folds, finding the nub end of her clit, and gently flicked, back and forth. Theresa panted in frustration, the muscles in her thighs straining as she subconsciously tried to close them.\n\n\"Theresa.\"Rhett drawled, his beard tickling her face as he drew closer. He swiftly removed his jacket and T-shirt, and chucked them across the room.\n\n\"Yes?\" Theresa said throatily.\n\n\"Kiss me again.\"\n\nTheresa wanted to wrap her arms around him, but as they were bound she leant forward instead, her lips pressing on his. Rhett's kiss was hard and sensuous, his tongue drove into her mouth possessing her, as she felt his hand caress the gentle arch of her spine, his fingers drew feathery paths downwards, until he was squeezing the plump flesh of her butt, hard. She groaned despite the kiss.\n\nThen his hands were back to her pussy, his fingers parted her cunt lips, and then, finding her clit he squeezed it; Theresa flinched.\n\n\"Oh God.\"\n\n\"Uh huh...\"\n\n\"Please untie me so I can touch you?\"\n\nHe lent in and groaned, \"No, patience baby.\"\n\nTheresa sighed in frustration.\n\nRhett kept his eyes on her as he unzipped his trousers and boxers, and clambered out of them quick. He stood their naked, his erection hard and wanting. Theresa's admired his lean defined physique, catching a little of the violent tattoo on his back when he turned slightly. Her eyes then fixed at his erection, impressive and ready.\n\n\"You really are so fine Rhett.\", Theresa said, not so much as a praise but pleading him with her flattery for more attention, more of his touch.\n\n\"Fine enough for you to beg for it?\" Rhett drawled.\n\n\"You're asking me to beg? I'm not begging for you.\" Theresa wriggled, her moistness growing as her clit grew swollen.\n\nRhett gritted his teeth trying to resist the urge to ram his cock into Theresa. But the fragrant musk of her pussy drew him in.\n\nHe could not resist her any longer. So instead he inched closer, until the tip of his cock touched the warm flesh of Theresa's loins. Then Rhett ventured further in, leaving a silver trail of precum on her dark thighs as his cock came into contact with her cunt. \n\nTheresa moaned encouragingly as Rhett rubbed his pale cock assuredly across her rubescent clit, teasing her. As her legs were tied to the table, she could not move, close her dusky thighs, she could only moan, wriggle and feel deliciously helpless as she anticipated his next move. \n\n\"Beg for my cock.\", Rhett gently tugged one of Theresa's swollen nipples.",
        "\"No.\", Theresa whispered even as her body yearned for more. Rhett roughly twisted her nipple, kissing her so deeply he left lightly gasping for breath.\n\n\"Beg for me.\" Rhett released her deliciously-sore nipple. Theresa's breath grew more ragged.\n\n\"Rhett.\", Theresa moaned. \n\nShe felt his hand travel down her belly, until they were at her spread cunt. Rough fingers parted her engorged, inner lips and grazed the aching tip of her clit, eliciting a shudder. Then a large finger plunged into her pussy. Theresa rocked against his hand.\n\nRhett couldn't believe the self-control he was exerting. Feeling her pussy, hot, wet, clench around his fingers made his dick throb. But seeing her so sweetly tormented, each emotion, etched across her beautiful dark face, heightened his excitement. Rhett replaced his fingers with his cock. He lazily rubbed his hardness liberally between her swollen dark velvet pussy lips. She parted her lips, looking at him, \"Oh...\"\n\nHe then plunged in, deep and mercilessly, into her little cunt, his skin slapping against her own, her pussy wet, yet squeezing against his velvety cock flesh like a fist tugging the fire from his loins. His face met hers, the tips of their noses momentarily touched before his lips pressed against her own, consuming her with a wet kiss. \n\nHe then slowed right down, rotating his hips, to tease her, taunt her tied body. She tried to catch breath as his cock swiveled inside her wet tight pussy.\n\n\"Your cunt, so sweet...\"Rhett groaned, closing his eyes momentarily.\n\nHe placed each hand resolutely on her butt cheeks, driving further into her pink opening. \n\nTheresa felt the euphoria gather its roots into her sex, digging like his tanned fingers into the ebony skin of her butt. She felt so close to an orgasm, the sensation became an increasingly overwhelming fireball, stoking, igniting. But yet his dick pushed into her like steel against velvet, his balls slapped against her, beating her towards the tipping point like a drum. \n\nRhett could feel Theresa succumbing to the pounding rhythm of his cock. He watched each conflicting emotion of uncomfortable pleasure, and pleasurable discomfort, scrawled across the arch of her back, the bounce of her tits, the flutter of her eyelids. It aroused him. With her pussy tightening around his cock like a leash, he fought to stay in control.\n\nHe dove in, slipped his hands in the soft wiriness of her afro, and tugged her head back, kissing the delicate spot in the crook of her long neck, his beard tickling her sensitive mahogany skin.\n\nTheir bodies spoke to each other, as they both fucked, communicating their needs, feelings, with animalistic grunts.\n\nThen it happened, her clit began to throb sweetly, and then with one more slap of his groin against her own, her clit was ignited. \n\nShe cried out, \"Oh yes, yes, don't stop.\" \n\nRhett, placed his thumb into her mouth, she suckled it desperately as she was sucked into the vacuum of her own pleasure. Rhett felt his dick throb as Theresa's pussy clamped down on him hard, his balls tightened; feeling heavy like hot marble. Lost in a haze of mutual sensation, he felt his cum squirt into her warm pussy; releasing the sweet pressure that had built up. \n\nThey stilled, their breath like a muted music as his dick twitched and then calmed within her.\n\nHe looked at her, her skin glowing and shiny from sex; beautiful and black in her luminescence like the clear night's sky. He withdrew his cock, watching his own cum drip from between her ravished cunt and pooling onto table.\n\nHe smiled at her, strangely pleased with himself for being responsible for her ravished appearance. He stooped down to untie her.\n\nTheresa looked at him silently as he craned over and quickly undid the knots. She kicked her feet a little once they were free, rotating them. Straightening his back, he gently took her bound hands and undid the knots, they unraveled quickly.\n\nSilently they dressed, neither meeting the others gaze.\n\nShe quickly got dressed, her back to him.\n\nThen she said quietly, \"I am really tired, can we go home so I can get some rest for tomorrow?\"\n\nRhett ran his hands through his dark locks in exasperation, \"You could at least fake the pillow talk, wouldn't hurt you some.\"\n\nTheresa turned round on the heel of her platform shoes, \"Chill out baby. We've had good times together, two turned-on curious adults trying new stuff, exploring each other's bodies. It's been really really...um.\"\n\nRhett approached her just a few steps, his face dropping in disappointment, \"Way to make me feel like a handbag.\"\n\nTheresa's eyes softened, \"That's not it. I am just trying to make things as easy. Don't you want the same thing?\"\n\nRhett looked at her hard, \"Sure, anyway, like you said, why make things complicated? You're not even my type.\" he looked at her, hoping that saying it would make it true, but instead he felt the jarring discomfort of a person who had just lied to themselves.\n\nTheresa looked at him in pure annoyance, \"Well better send that memo to your dick.\" She then swung the door open to leave, but then felt it hit something. She heard a resounding \"oomph!\"\n\n\"Fritz? What the hell?\" Theresa saw the biker, friendly sweet Fritz, standing behind the door with trousers round his ankles and his semi-stiff dick hanging out. A fragrance of marijuana hung around him like a cloud.\n\n\"Was just going there to roll up, and chill, heard a rumor Lan'h's got a kid by me. Made me happy and made me sad all at the same time, so I need something to chill me, as I, you know, think if there is anything I can do about it. But uh, you know, saw you guys through the window and it's been a while for me too.\"\n\nRhett pulled his T-shirt on and stepped outside, \"Dude. You could have joined, Theresa here is a good time girl don't care who she's having a good time with either, right Theresa?\"\n\nTheresa resolved herself not to get angry, she glared at Rhett challengingly, and he glared back. Fritz looked at them both uneasily, feeling the firecracker tension between them. Almost in response at the frosty atmosphere, Fritz finally pulled up his trousers, and buckled up.\n\n\"Cool, well let me just uh, grab some supplies from in there, and hey, maybe we can go back to the bar. I don't usually smoke Theresa, but boy am I excited about Lan'h and the kid. Just wished I was there, or she was here, you know.\"\n\nFritz dived quickly into the hut, yanked a bouquet of dried marijuana from the beam and sauntered out with the dozy smile. They started walking towards the bar, a stone cold silence wedged between Rhett and Theresa as they followed Fritz who was talking about some book he was reading called Jonathan Livingston Seagull and how it had totally blown his mind and he was pretty sure he was the seagull.\n\nThey heard the sound of people approaching the back lawn, the whole gang from inside the bar was approaching, but there was no brotherly excited chatter. Something wasn't right; their's was the low murmurs of predators circling, not wishing to alert their prey. Rhett turned and saw Curly approach, flanked by a group of bikers.\n\n\"Hey Rhett, we want to talk with you.\"\n\nWhat the hell do they want with me? Rhett thought curiously. \n\nRhett felt a little nervous. So he stopped in his tracks, as did Theresa and Fritz. He pulled out a cigarette and lit it up, \"What's the matter brother?\"\n\n\"You pretending you didn't get the message. So the real question is, what's the matter with you brother? Ain't up for some fishing with the fellas?\" Curly sneered at Rhett, his gaze flicking at Theresa.\n\nTheresa grew extremely uneasy, she had a feeling these men were not talking about their passion for angling.\n\n\"Curly, it's not going to happen, okay? So why not go to the bar, and get with one of your typical easy lays.\"\n\nCurly squared his shoulders and tipped his chin back, \"Nah, why tread a path that's been beat? Come on dude, nothing wrong with passing a little something around.\"\n\nTheresa looked fearfully at Rhett, her voice quivering, \"Rhett, they talking about me?\"\n\nRhett felt his heart thump. He couldn't tell the consequence of the decisions he would make in a minute, the consequences in an hour, or the consequences in a day. \n\nWhy defend a woman who thinks so low of you? And she acts like sex don't matter. Hell maybe she really is happy to fuck anyone. Your brothers will always be there for you, always have been, but this chica won't be. He thought bitterly.\n\nHe flicked the cigarette he was smoking away, \"Curly and goons, you can go shove your dicks up your asses for all you're gonna get. Theresa is not your property, and given the prospect of doing the dirty with you guys makes her look as happy as a vegan in an abattoir, I think not. Sorry brothers.\"\n\nCurly smiled broadly, \"Don't say sorry, see, if you were gonna say no, then it's my job as chief to make sure, diplomacy or no-diplomacy, we get what we came for.\"\n\nRhett saw a glint out of the corner of his eye, Curly had a knife, it looked like a kitchen knife. A moment passed, that was between terror and serenity when he thought, Jeez, he's gonna try and really get me.\n\nRhett had nothing like a weapon, as he never considered that he would ever be turned on by one of his own. But he did have something else Curly didn't have; instinctively, he had been waiting for someone to jump him since the war. He just never really thought it would happen. \n\nThus, with a guttural roar he dove in to Curly's unarmed left side and dug his elbow into Curly's stomach. Curly cried out in surprise, losing his footing. Rhett rooted his feet to the grass like two tree trunks. He punched the side of Curly's head, hearing a cry as the men around cheered, spoiling for a fight. \n\n\"Careful Rhett, he's still up.\", cried Theresa. \n\nCurly stumbled and turned, the grip on his knife less sure, but still he lunged clumsily, and managed to nick Rhett's forearm, drawing blood. Adrenaline burned through Rhett like a white hot furnace so he didn't really feel it, it wasn't a deep enough cut. He grabbed Curly's knife-wielding wrist roughly and pulled Curly down by the sleeve so that he lost his balance. Curly dropped his knife but then regained his composure.\n\n\"Kill him! Kill him! Kill him!\", shouted someone from the jeering crowd, which side that person was taking, or whether he was taking a side Rhett did not know.\n\nRemembering what he had learnt in the army from some dude who dabbled in martial arts, Rhett turned to face Curly, and then rushing into him, punching Curly on both sides of his neck. Curly passed out as the carotid blood supply was cut off. His faint was oddly delicate, like a pastiche of a woman who had worn a corset too tight.\n\nRhett, looked at Curly, his breath coming thick and fast as Curly lay looking strangely angelic on the ground.\n\n\"Damn fool. Anyone else want to fight? \"\n\nThe crowd were quiet, he then heard Billy say, \"Sorry man, we just thought we would give Curly the benefit of the doubt as he's the chief.\"\n\n\"Chief or no chief, he got you guys acting like horny sheep?\"\n\nHank cleared his throat, \"Nah, it weren't just because we were horny, you know what Moe says, if we can get a black chick, a latin chick, a -\"\n\n\"Stop, you were prepared to kill me, force yourselves onto a girl from out of town, put your asses in prison, for some free beers at Moe's? Jeesuz! Come on Theresa, let's go before these Einsteins experience another genius moment.\"\n\nRhett grabbed Theresa's hand firmly and protectively, both of them shaking slightly. \n\nHe heard a lowly muttering from the crowd gathered behind.\n\nLashley and Polly chased after them, \"Hey, we're sorry, we didn't think we could do much but watch.\"\n\n\"Sorry don't cut it. Don't any of you guys have guts and minds of your own?\"\n\nPolly looked angrily at Rhett, \"Well, look who's grown a conscious, at least some of us don't have blood on our hands. Come on Lashley.\"\n\nLashley looked at Rhett, then at Polly, then at Rhett, \"Boy, oh boy. I'm sure she didn't mean that man.\" Lashley then shrugged pitifully, and chased after Polly.\n\nRhett stopped, and lowered his head, feeling tired and weighed down . He closed his eyes, not wanting to open them, even if it looked curious. He didn't care, he just wanted pure darkness.\n\n\"Blood? But you didn't hurt Curly that way? \"Theresa asked inquisitively.\n\n\"The war. That's what Polly means.\" Fritz whispered. Rhett opened his eyes.\n\nVietnam. He was in Vietnam. Theresa thought, her heart dropping, reassessing everything. She felt incredibility guilty. She had been so self-absorbed, about her own needs, protecting herself, she had never cared to ask what his story was.\n\nFritz put a hand on Rhett's shoulder, \"Dude ignore Polly, when she say's that, she also means me, Hank, Taylor, and a damn near half of us in the club. Lashley is weak not to reign in his woman.\"\n\nRhett looked silently, angrily at Fritz, and then at Theresa. At that moment, he felt a million miles away from them even though they were within meters of each other.\n\n\"I think you'd better stay with Fritz tonight Theresa, now's not a great time.\" Rhett said sadly, but calmly as he touched the bleeding gash on his forearm\n\nTheresa shook her head and gazed intently at the hurt man, in more ways than one, that stood in front of her , \"I would rather stay with you., I could sleep on the sofa.\"\n\nRhett shrugged, \"Like I am really going to make you stay on the sofa, but I'm not going to be much fun to be around.\"\n\n\"That's okay.\" \n\nTheresa reached out and touched Rhett's shoulder.\n\nHe looked back, his body alive, mind numb, eyes hard, untranslatable.\n\nFritz looked uncomfortable, \"Cool, well, adios brother. It's been a real pleasure to meet you Theresa, a real pleasure.\" he tipped his head at her.\n\n\"You too, bye Fritz.\"\n\nRhett and Theresa glided home on Rhett's bike, each cloaked under the swaddle of night. Theresa hugged her body close to his. When they got back to the cabin, Rhett acted like a stranger, washing his arm of the blood, dressing it, not looking at her.\n\nShe tried to break the ice, \"Rhett, I'm sorry, I've really messed things up for you.\"\n\nRhett snorted, \"Not really, see, I really thought those guys were my friends. We're supposed to kill for each other, not actually kill each other. They're my brothers, or I thought they were.\"\n\nTheresa sat on the sofa, \"Well, men go a little crazy when they form groups, get a little power, seen it happen before where I live.\"\n\nRhett shook his head, \"Naw, don't believe that- it's nice to have friends who have your back. Anyway, didn't used to be like this, it's got worse since Curly became leader. He brought in some bad blood. Moe who owns the bar we been to used to be our leader and he played it just right. But he bought the bar and didn't really have the time to do so much organizing. Curly don't really do nothing apart from getting us together in the bar and getting us into some trouble with other clubs.\"\n\nRhett looked at Theresa, Pretty. Just pretty. Rhett tried to remain stoic, he wasn't the fluffy emotions type, but what he felt wasn't fluffy, it was almost painful- just thinking about Theresa leaving him made him feel a sinking sense of loss. \n\nRhett stroked his beard pensively, \"You know, I weren't expecting to meet a girl like you. You're something else. \"\n\nTheresa didn't want him to elaborate on his ambiguous comment as it didn't sound particularly flattering. She sighed in annoyance.\n\nRhett caught her expression, feeling hurt she had rebuffed his compliment. He shrugged silently and began shaving around his side burns to get some definition. From the corner of his mirror he saw Theresa walk away from his view, and into the bedroom, her curvy, sexy silhouette passing by like a whisper.\n\nI should follow her. \n\nRhett should have followed her, but he did not, instead he got dressed in his pajamas and fell asleep on the couch. But he didn't sleep properly, he kept dreaming someone was watching over him, a sinister cold presence. Rhett opened his eyes in fear and confusion, but there was no one there.\n\nHe didn't think too much, he padded into his bedroom, dazed and seduced by the certainty of human warmth. So he slipped in next to Theresa, and flung an arm around her naked waist, spooning her curvy bottom. She smiled contently, momentarily roused from sleep. \n\nShe was pretending to sleep when she heard him say, \"I wish I could keep you here longer, if I had planned it better, hell, I'd even kidnap you.\"\n\nThat should have worried Theresa and have her running for the hills, but more worrying was that in it's especially skewered way, it was the sweetest thing Theresa had ever heard. \n\nShe felt a mixture of happiness to have Rhett close, and sadness, knowing in less than eight hours they would make their separate ways through life.\n\n-------------------\n\nThe next morning they made idle small talk over breakfast. Rhett kept his Ray-Bans on as he drove her to the coach station because he could feel his eyes stinging.\n\nAt the coach station, there was a strange discomfort as Rhett looked at Theresa and Theresa looked at Rhett, awkwardness clung around them. Some little old ladies and a group of teenagers were waiting by the bus stop, staring curiously at the black disco chick and the white biker.\n\n\"Thanks Rhett.\", Theresa said coolly suddenly aware of the audience. She heard a clucking of disapproval.\n\n\"Tut tut tut, that just ain't right, them being like that.\", said one of the old ladies to her friends.\n\nIt made Theresa uncomfortable, so she stepped back from Rhett and wrapped her arms around herself more tightly.\n\nRhett looked at the cluckee, the little old lady and with his bearded chin jutting out chided loudly, \"Don't tell me you got all those damned wrinkles and learnt not a jot about good manners Grandma.\"\n\n\"Well!\", said the old lady, her face pruning up in displeasure.\n\nRhett stepped further towards Theresa, who stepped back again, \"You can keep stepping backwards Theresa, but it's only going to turn this into a game.\"\n\nHe took long strides towards her. From the corner of his eye he saw, beyond the haze dancing off the road, the coach.\n\nAll you have is now, and then she's gone.\n\nRhett wrapped his hands behind Theresa's waist, and then tugging her in, he kissed her, his lips pressed against her own. His tongue pried between her soft lips and caressed her own tongue. He let his hands drop to the top of Theresa's bottom.\n\nThe coach stopped, opened.\n\nTheresa felt yearning all of a sudden and she couldn't help but say it, \"I'd be lying if I said I wouldn't miss you. Maybe in another life things could have got more interesting.\"\n\nShe kissed his cheek and got on the bus, looking back on him, like someone pausing to wonder if she was about to make a mistake.\n\n\"Bye Theresa.\"\n\n\"Bye Rhett.\"\n\nAs Theresa got on the bus, disapproving looks following her all the way to her seat, she remembered what she had forgotten.\n\nAs did Rhett.\n\nNeither of them knew how to contact the other. \n\n\"Damn.\"\n\n\"Fuck.\"\n\n-------------------\n\nThe Mistake- two months later.\n\nMaybe I should. Maybe I shouldn't. Theresa looked at the address of Moe's bar frowning. If she thought it was a good idea to write to Rhett, she would have done so one month back when she first had the idea or writing to Moe's bar.\n\nShe wanted to write many things, of the 'thank you', 'you were a great fuck' and 'are you okay?' variety. Most importantly of all, she wanted to write to him, so that he would write back, because as difficult it was to admit, she missed him. Rhett had been right, every time she closed her eyes she could hear the demanding growl of his voice, feel a memory of his fingertips on her thighs, her belly. Thinking of him made her heart beat faster. But the memory was fading, and that was making her sad.",
        "When she first returned home from Arizona, her grandmother had been suspicious.\n\n\"A girl goes missing for two days, won't tell her ma what she's been doing, won't tell her grandma what she's been doing. What happened to you child? Meet the devil in the desert?\" Theresa had just bitten her tongue, until the buzz of curiosity died down.\n\nShe fingered the torn piece of notepaper. If she wrote to him and he did not respond, she wondered how she would feel. Foolish perhaps; he had clearly seen her as the easy fuck he had taunted her for being. Maybe he wouldn't even receive it, perhaps he had been cast out of Moe's bar since the fight. She would still feel foolish.\n\nBut if she wrote to him and he did respond, the ramifications were potentially worse than feeling foolish. An interstate-relationship was unrealistic, especially one based on a glorified series on one night stands. And an interracial relationship, especially with a southern boy whose leather clad exterior was bound to give her grandma the heart murmurs was a no-no. So it wasn't going to happen.\n\nMaybe we could keep it a sex thing, nothing wrong with that in these modern times. Interstate motels, quick flings, then our separate ways.\n\nBut then Theresa thought of her teaching career. Not only was she the first real career girl in her family, she had also been the first one to go to college, with her mother, grandmother and aunties helping her, financially and otherwise, like little lights on an airplane runway. She had a good reputation in her community which she wanted to keep, not just for herself, but for her family. No, she was going to do the responsible thing, the expected thing, and whatever that was, it involved not trying to get with Rhett.\n\nSo reluctantly, she put that idea to sleep, and wrote another letter to the Smithsonian, organizing a school trip for her students, and put it amongst the other letters she had written.\n\n-------------------\n\n\"Hey Rhett, you got a letter. See, now everybody thinks you live here.\", Moe the barman said, stroking his grizzled grey beard whilst holding out the sleek letter.\n\nRhett took the letter, and threw a few too many dollars on the bar as tip. He felt guilty towards Moe. Moe had taken a side, Rhett's side, and had seen his custom trickle out as the motorcycle club had been divided, with most of the guys sticking with Curly and a few being with Rhett. Moe had even put up with the antics of Curly's gang, such as when Billy accidentally set himself on fire trying to burn a cross at the front of Moe's bar, apparently on Curly's orders. As things stood, with Billy in hospital for his self-inflicted burns, the venom between the newly divided club became more potent. \n\nHe tore open the letter with care as it looked like something official.\n\n\"Dear Sirs,\n\nI would like to arrange a four day history trip to Washington DC for thirty three of my students and was wondering if it would be possible-\"\n\nRhett grinned deviously. Theresa wasn't much for arranging school trips, but road trips however...\n\n-------------------\n\nTheresa walked the last of her junior high school 'homework club' students, Rhonda, back home.\n\n\"Thank you Mrs Hall.\", said the short chubby student, standing on her stoop where her cousins were also sat.\n\n\"No problem Rhonda. Have a good weekend.\"\n\n\"Will do Ma'am.\"\n\nIt was five o'clock and a Friday. Theresa started to walk back to the home she shared with her mother, grandmother and younger siblings.\n\nThe neighborhood was jiving, and some of the young guys were already clustering, getting ready to hit the bars and discos.\n\n\"Ooh baby, baby, you are dy-no-mite!\", said one guy excitedly as she passed, pulling up the sheep skin lined collar of his coat and tapping his sharp shoes.\n\nTheresa smiled politely at the over-exuberant guy, \"Hold your tongue now. Respect a lady.\"\n\n\"Mm girl, and let me show you just how much I respect you.\"\n\n\"Ssh, don't say that, that's my sister's new history teacher. \", said his friend who wore a leisure suit three sizes too big.\n\n\"Really? Sorry Miss!\", the guy looked worried all of a sudden, like her jurisdiction to hand out detentions extended to the streets.\n\nTheresa smiled, \"That's okay, have a good evening gentlemen.\"\n\n\"Good evening Miss!\"\n\nTheresa smiled, she walked home, the sun still out and bright though the days were growing darker.\n\nThe streets actually grew a bit quiet, it was a fifteen minute walk home. She smiled to herself, satisfied with her life, though a little bored.\n\nReally bored actually. Rhett was the last exciting thing she did.\n\nAnd boy was he a fun thing to do. Theresa smiled, but grimaced again. He had been an out-of-town fling. That was it. She sometimes had reveries about what if they got together, and everything was sweet, but even as she conjured these thoughts she recognized them for what they were, delusions.\n\nShe heard a weird engine purr behind her, the hairs on the back of her neck stood up. She kept walking, but the purr followed her, like a creepy Cheshire cat.\n\nCouldn't be. He doesn't know-\n\n\"Mrs Hall, I need you to explain something to me.\", a southern drawl. Theresa stopped, her heart thumping.\n\n\"How did you-\", Theresa said, turning round.\n\nRhett nudged up his Ray-Bans and slid them over his head and on top of his hair, \"-You wrote to me, apparently against your own will, which is quite some achievement. But that isn't the issue here, explain to me how a bold, sassy girl was too chicken shit to contact me even when she figured out how?\"\n\nTheresa could not help but be affected by him, he was wearing little but a black T-shirt, his chorded muscled arms showing. His back was straight and defiant and his already handsome face had lost the beard, revealing a beautiful sensuous mouth.\n\nShe smiled and despite herself ran up to him, \"It's so good to see you. I've missed you!\"\n\nHe stopped his bike by the sidewalk, swung off it and opened his arms, receptive to her hug.\n\n\"Missed me that bad, then you should have written to me, naughty girl.\", he patted her bottom.\n\nTheresa looked around in mild panic and tried to draw out of the hug, \"Don't Rhett, people might see.\"\n\nRhett looked at her in exasperation, \"I kinda guessed that's what it's all about. You're afraid of what folks might think of you cavorting with a gringo?\" \n\nTheresa swung her head slightly, like she was swinging between two decisions, \"Hmm, I live with my family you know. Still not allowed boys in the bedroom so I hope you didn't come down here just to chase tail. \"\n\nRhett raised an eyebrow and grinned roguishly, \"I am here for work. Got my chopper shop two blocks away from here with Fritz. The tail chasing is just incidental.\"\n\n\"What? Don't tell me you're crazy? You're now living here, with Fritz? What if you had bought the shop and in turned out I didn't even live here?\", Theresa looked at him incredulously, though her heart was secretly bursting in joy.\n\nHe shrugged with deliberate casualness, \"Didn't really think that far ahead, just wanted the change of scene. Figured I might eventually bump into you sometime too.\" Rhett sounded hopeful, this worried Theresa. She looked around to see if anyone was watching her, a group of kids were pointing at her.\n\n\"Well that's really nice, but, I don't think anything will work between us Rhett.\", Theresa was trying to be sensible, responsible, not a fantasist of Pollyanna proportions.\n\nRhett looked a bit disappointed, but resolute, \"That's cool, because the last thing I am looking for is to get tied down.\"\n\n\"So why are you here?\", Theresa assessed Rhett curiously.\n\n\"Was just passing through on my way to my new business. Thought, why not stop over, and have a little fun, with Theresa.\", his eyes grazing up and down, over her curvy body. \n\nTheresa shuddered at the attention, \"If I said no?\"\n\nRhett took a step closer, \"Would you say no?\"\n\nHe captured her hand; he just needed to touch her.\n\nHer stubbornness melted as she felt his thumb caress her palm, \"Okay only for a little while, just for fun, and we can't tell anyone.\"\n\n-------------------\n\n15 years later\n\n\"Did you really have to tell the kids that, that we met in a coffee shop? What's wrong with how we really met? \" The older white guy, with a tidy trimmed beard and a balding head of hair gazed keenly at his black wife, a little plumper than when he first met her, but just as beautiful, whilst flipping through the newspaper.\n\nTheresa looked at Rhett, tilting her braided hair, \"Hm let's see now, what is wrong with our love story? Attacked by trucker, check. Saved up by coarse biker, check. Have a fling with biker, definitely check that. Biker fights to protect me, uh huh, done that, so check. Biker moves to San Franscisco on a crazy whim, yup. Biker gets disowned by family members because they don't like his girlfriend being black, check. Marry said biker in Las Vegas. Definitely check. Not exactly a dinner time love story baby.\"\n\nRhett looked at Theresa who was cutting sandwiches for the kids to take to school the next morning, \"I don't know. I think you just listed all the reasons why we should tell our kids how we met.\"\n\nTheresa smiled, \"I never meant to fall in love with you, you know that right? I don't know how you tied me down.\"\n\nRhett smiled, \"Handcuffs and rope. Like you didn't know that would be my answer.\""
    ],
    "authorname": "Midnight_Flux",
    "tags": [
        "black woman",
        "white man",
        "bf/wm",
        "biker",
        "interracial",
        "seventies",
        "bondage",
        "black female",
        "white male"
    ],
    "category": "Interracial Love",
    "url": "https://www.literotica.com/s/aint-budging-ch-03"
}
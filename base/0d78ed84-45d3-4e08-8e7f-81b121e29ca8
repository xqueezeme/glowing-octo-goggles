{
    "title": "Hobson's Choice Ch. 03",
    "pages": [
        "Sunday, May 12, 6:00 am \n\n\"John, John, - are you awake?\" I came out of my deep sleep slowly. I felt someone kissing me, and a hand gently caressing my cock under the covers. I opened one eye, and looked into Sandy's smiling and excited face. \"Come on, John, - it's morning and it's tomorrow!\"\n\n\"What time is it?\" I mumbled, still groggy.\n\n\"I don't know, but the sun is up,\" said Sandy. \"That means it's tomorrow.\" \n\n\"What are you talking about?\" I said, and suddenly realized what Sandy meant. Her face fell. \"Did you forget already?\" she said in a small voice. \"You promised me last night, and you forgot already!\" \n\nI reached up and hugged her tight. \"No, silly, - I didn't forget. Today is the day, right?\" She lit up again. \"Oh yes, please! I am the last one and I can't wait any longer. It's tomorrow now, right?\"\n\n\"Yes, my little soon-to-be-ex-virgin! It is now tomorrow!\" I threw off the cover, reached up and pulled her taut, naked body down on top of mine. She melted into me, moulding every curve to as tight a fit as she could. \n\n\"I have hardly slept all night,\" she whispered in my ear. \"I have been in here to look at you at least ten times. You are so beautiful! I looked at you under the cover, too, and even gave your penis a little kiss once.\" \n\n\"You mean my dick?\" \n\n\"Yes,\" she said with a happy laugh. \"Your dick, your cock, your wang, prick, schlong, shaft, cunt-driller...\" She ran out of words... \n\n\"You know, we don't use those words hardly at all, even between us girls. It feels good to just say them and know they are just words describing something enjoyable.\" \n\nI smiled, - \"that's my girl.\" I kissed her and slowly we settled into some serious kissing. This was not a new activity for Sandy, she was a terrific kisser, gentle, erotic, with a growing urgency. She squirmed on top of me, making my cock slowly stiffen and grow under her. It was starting to press against her pussy, and Sandy's legs slowly divided and slipped down along my sides. My prick nestled softly in between her cunt-lips as they opened. I reached down to her ass and grasped her firm globes. I squeezed them and rubbed them, and then started to pull them apart, opening the crack to the air. \n\nSandy curved her back, moving her ass up to meet my hands. My dick slid along her pussy as she did so, hitting her stiffening clit in the process. Sandy gave a small shudder of pleasure, and reversed her movement. Soon she was humping me slowly and rhythmically, sliding her pussy along the whole length of my dick, ending with her spread ass cheeks sticking up in the air, and allowing my hands free access as far as I could reach. Her mouth never left mine, and her breasts stayed pressed against my chest during the whole movement, causing her hard little nipples to get their own share of stimulation.\n\nI felt as if I was being given a full body massage, and Sandy obviously enjoyed it as well, since her breathing became rapid and her pulse started to race. My dick was now hard as rock and gave her pussy and clit an impeccably placed massage as well, as she slid back and forth. Her first orgasm came on her without warning, - she suddenly gasped, held her breath and squeezed down hard on my dick. I could feel her pussy contracting, trying to grasp me as I lay snug in her now very wet valley. \n\nShe lifted her head and smiled happily. \"That was nice, John, - I didn't even know it was happening, and suddenly I just came and came.\" She lay still for a second, but as I made a small hip movement, she started her sliding again. This time she scooted up towards my chest just a few inches and dropped her legs fully down on each side of me. She reached back and fondled my balls and the small part of my dick she could reach. \n\n\"Is this good for you too?\" she asked timidly. \"I want it to be special for you too!\" \n\n\"Oh yes,\" I replied truthfully. \"t feels very very nice indeed!'. She made a small twist with her hips and suddenly my dick slid inside her just a little, instead of sliding past and up her stomach. \"Oooh,\" she said. \"It's inside me.\" \n\n\"Weeeell,\" I said. \"Not quite, but it's a good start.\"\n\nShe repeated her move and started moving me further and further inside. She was incredibly tight, - I could feel the walls of her pussy resisting the invasion. \"Relax,\" I said. \"Let's just take it easy and work our way up to it slowly. That way it will last longer, it won't hurt much and you'll have much more fun.\" Sandy grunted something, fully focused on the slow progress of my dick into her tight pussy. Little by little her pussy expanded and each slow stroke bought me another millimetre inside. Sandy made one careless move, and I slipped out again, sliding up to hit her clit once more. Her face contorted, trying to express regret and excitement at the same time. \n\nShe quickly scooted up and got him back inside her again. \"It feels so good inside,\" she panted, \"but I am too tight for you, this will take forever...\" \n\n\"Do you mind?\" I asked, tongue in cheek. \n\nShe buried her face in my neck \"No no no no no,\" she mumbled, \"just don't stop!\"\n\nWe went back to our previous rhythm, steadily worming inward. It felt like a fuck now, I had a good inch and a half inside and some of my prick was clasped in the warm moist space between my belly and Sandy's pussy lips. It was very hard to stay still and let her set the pace. She was struggling with it as well, I could tell. We realized at the same time that we had reached the main obstacle. \n\n\"I can't get any further,\" said Sandy, \"I guess this is when it will start to be rally painful, right?\" \n\n\"We'll see,\" I replied with a smile, \"but I don't think so, - not if we do it right. Sit up straight.\" \n\nSandy straightened up and the movement put her weight on my prick. Her face was a study in delight and astonishment when she suddenly slipped part way down my prick to sit on my legs. The flicker of discomfort was almost too brief to notice, and her joy was so intense. She let out a whoop that would have done Geronimo proud. \"Whooooooooeee that's fantastic, - Oh God, I'm so full. It's a little bit like the last time when you fucked my ass, but very different. Oh Wow this is so good!\" She was so lost in her revelation that she totally forgot to move. She was just sitting there, beaming and focusing inward on every sensation.\n\nWe heard laughter from both the bedrooms. \"Way to go, Sandy!\" \"Good one John!\" \"Go girl!\" Sandy grinned mischievously and happily and whooped again. I lunged up just as she started the whoop and it came to an abrupt end as her eyes widened. Her breath caught in her throat and she sputtered incoherently. \"STOP!\" she shouted, \"I can't..\" \n\nI withdrew slightly, and her face went almost panicky. \"NO DON\"T STOP!\" she shouted again and pressed herself down on my throbbing dick. \"I didn't mean stop, just...\" Her breath came in ragged gasps and she exploded in another orgasm. Her breasts heaved and her head was thrown back, making her neck muscles stand out in relief. I started caressing her lower belly with my fingers and her skin contracted involuntarily. I slid my hands up her hips and stomach until I held her breasts, with her nipples caught in a gentle grip in my fingers. She was contracting her vaginal muscles and held me as in a vice. She was tight from before, but this was on the edge of real pain. I squeezed her nipples hard and her face went blank.\n\nSlowly she came down from her high and her pussy started to let go of my dick. As soon as could move again, I started to gently slide in and out, just a few inches at a time. She clamped down again, but relented when I grimaced. \"Oh, John, I'm sorry. I'll try not to do that.\" \n\nI smiled. \"I don't think you always have control over it, but you are very tight, and you have very strong muscles in there, so if you try to keep it in mind, I would appreciate it.\"\n\n\"How about this much?\" she said and tightened a little again. The feeling was incredible, like an internal hand massaging me I felt the urge to come boiling up and gasped \n\n\"STOP!\"\n\nSandy laughed triumphantly. \"So now the tables are turned are they? \n\n\"I guess we can both be too much for one another at times,\" I grinned. \"It felt incredibly good, but one more second and our session would have been over.\" \n\n\"I'll just keep that one in reserve, then,\" she replied laughingly. \"I might need it some day.\" \n\n\"That lucky guy won't know what hit him,\" I said enviously, \"but he'll enjoy the hell out of it.\"\n\nSandy started moving again, lifting herself up and slipping down again, experimenting with the stroke length and speed. The lubrication and relaxation from her last orgasm had made movement much easier, and we were soon fucking lustily, out bellies slapping together in perfect time with our grunts and moans. I could feel Sandy having mini-cums over and over without slowing down. She clasped my head and kissed me while we fucked on. Breathing became very awkward, but we persisted and enjoyed the process tremendously. She couldn't resist squeezing me with her pussy muscles from time to time, but I managed to keep control.. I used my hands to manipulate her breasts and her clitoris, and Sandy took it all in with complete abandon.\n\nAt one point I had to stop, to regain some control again. Sandy looked puzzled, but quickly understood, and grinned. \"What's the matter, old man?\" she said mischievously. \"Can't keep up with us young girls?\" \n\n\"That's not the problem,\" I gasped, \"as you well know. I have to stop to keep it down!\"\n\n\"Oh poor John. It's not fair that men only have one bullet in the gun. I have been firing and firing and firing.\" She sounded genuinely regretful now, but with a smile lurking behind her eyes. I didn't respond, just flipped her over on her back with one heave, and started ploughing in earnest. \n\nHer eyes went wide again, and she joined in with every ounce on muscle in her body. \"Aah! Ah! Ah! Ah! Ah,\" she panted rhythmically, in time with our increasing pace. I grasped her legs and bent them back to her shoulders, throwing her pelvis up into my thrusts. She was limited in her movements now, almost completely my captive as I struck into her very depth again and again. I held her ankles with one hand and moved the other down her body, pinching her stiff nipples and stroking her belly on my way to the target. \n\nI laid my thumb gently on her clitoris and a finger on her asshole and pushed. Her muscles spasmed again, and this time it was all over. We came together in an explosion of sensations. My prick was hosing down her interior in great gushing spurts, with her strong muscles milking me dry as quickly as she could. I let go of her legs and she came back to a lying position under me, pressing herself tightly against me.\n\nWe lay there for several minutes, not talking, just revelling in our ebbing sensations and the feeling of love and caring. Finally I raised my head and looked tenderly at Sandy's face. She was crying silently, but her expression wasn't sad. I kissed her tears away. \"There, there, my little dove,\" I said. \"Let me kiss it all better.\"\n\n\"Oh John! It can't get better! That was the best it will ever be, and I'm so happy it happened like this, - with you. How can I ever thank you?\"\n\n\"Remembering this and remembering you is the best thanks I could ever get,\" I said, \"and I am the one who is thankful for such a wonderful gift.\"\n\nSunday, May 12, 8:30 am\n\nThere was a timid knock on the door, and Alya stuck her head in. \"Is it really over this time, she said smilingly. \"We thought you were done three times already, but then you started up again... Do you guys want some breakfast.\"\n\n\"Shower first, then breakfast,\" I said \"Oh goody,\" said Alya, we were hoping you would say that\". \n\nSo in the shower we trooped again, all five of us, but this time Sandy and I were both centers of attention, getting cleaned thoroughly by the other three. \"Well, there is no doubt now\" said Karen as she washed the faint streaks of blood off my dick. \"No more virgins in this neck of the woods!\" She gave it a good kiss and suck, and came up grinning. \"There was some left in there, - delicious!.\" \n\n\"There is more here,\" said Alex, scooping my cum from Sandy and licking it off her fingers. Alya and Alex both bent down and their tongues competed for the new supply of cum oozing from Sandy's well-fucked pussy. \n\n\"Easy,\" said Sandy, - \"I'm a bit tender down there.\" They kissed her pussy more softly, but kept going until there was no more left. Sandy leaded back against the wall of the shower and spread her legs as much as she could. \n\n\"Oh yes,\" she said, \"That feels sooo good.\" She came again, to her complete disbelief, clutching the heads of her two friends to her crotch. \"Oh Wow, oh wow!\"\n\nKaren had a go at getting me back up, but I knew it was a lost cause, so we stood there caressing each other, watching the three others enjoy themselves. Karen shuddered and leaned back on my shoulder. \"Thank you,\" she whispered. \n\nBreakfast was another meal 'au natural'. It seemed silly to get dressed somehow. Everyone felt very comfortable, and enjoyed keeping a mildly erotic mood, with an occasional stroke or kiss, or a coquettish display. It was a beautiful day, warm for the time of year, and we decided to go to the lake for a spell. I made everyone put suntan lotion on, they would have been burned in no time without it. That too became a sexy process, everyone volunteering to do everyone else. I certainly got my share, and my trusty dick will never get a sunburn again, after all those layers, lovingly rubbed in. \n\nThe sun was nice and warm, and we laid ourself out on the small dock by the boatshed. The sun was baking down and soon the sweat was running freely. \"This feels great,\" exclaimed Alya. \n\n\"Fantastic,\" chimed in Karen \u2013 'and I'm finally going to get some sun on these big white things.\" She held out her breasts for inspection. We all had a very good look, much to Karen's enjoyment. \n\n\"They really are amazing, Karen,\" said Alya. \"I feel inadequate next to you.\" She too cupped her more modest breasts and held them up for inspection as well. \n\n\"Mine aren't small, said Sandy, but they're nowhere as big as yours, Karen.\" Another pair was presented to the audience for inspection. Everyone looked at Alex. \"Oh well,\" she said, lifting and holding up her breasts, full and heavy. \"These are OK I guess, but I wish they would stand up some more.\"\n\nThey all looked at me. \"What do you think, John?\" said Alya with a glint in her eye. \n\n\"Whoa there\", I protested. \"We've been here before, and I couldn't decide then, if you remember.\" \n\n\"Yes, but you are , - uh \u2013 more familiar with them now,\" said Karen, also smiling.\n\n\"You girls work this out yourselves,\" I said firmly. \"Decide on the judging criteria and do your own comparison.\" I lay back and relaxed again, leaving them to it.\n\nThey broke out in a lively discussion, which I followed only in parts. \"Size,\" said Sandy. \"Shape,\" said Alya. \"Firmness,\" \"Weight,\" \"Responsiveness\"; - the suggestions were coming thick and fast. \"Nipple length,\" \"nipple hardness,\" \"pain response\" That one made me sit up and take notice I could see Alya blushing at the reaction to her suggestion. \"Suckability.\" \u2013 the last one was mine and got an uncertain frown from the girls. The girls were having a ball with the discussion, which was much more fun than they had imagined. The list was discussed extensively and finally agreed upon, with a point score system and a judging methodology. They had to go get paper and pens as well, it became way to complicated to keep straight in their heads. \n\n\"John?\" said Karen.\n\n\"No, I responded firmly. \"Absolutely not! I'll just watch.\" \n\nAlex got the last word. \"OK, but you have to be the tie breaker. And one of us will be right here at all times to make sure you are paying attention. With that she plonked herself down on a cushion next to me and started playing gently with my dick. That got my attention all right, and the girls took an interest as well. \n\nFor the next half hour I laid there as they tried out every suggestion in every permutation of girls. Boy, when these girls decided on something, they were going to get it done, come hell or high water. Actually, neither hell not high water came, but I am sure the girls did a few times, and I was kept on a knife's edge for the full 30 minutes. \n\nThe girls soon decided that in order for the breasts to be properly evaluated, they had to be excited, and since we were all stark naked, the opportunities quickly presented themselves. What a view I had, like an Arabian nights potentate watching his harem preen and compete for his attention. The girls took their turns keeping me just under the boiling point, and despite begging for release, they loved the control they had over me and refused to let it happen. \n\n\"We have a winner!\" declared Karen, after they had carefully tallied all their numbers.\n\n\"No, it's another tie!\" Sandy was quick to protest. \"We need the tiebreaker.\" It didn't take Karen but a second to understand and agree that yes, she had made a mistake and it was a tie \u2013 again, - surprise, surprise! I was of course asked to do the tiebreaking. And to make sure I stayed comfortably in my prone position, they decided that the only reasonable approach was for each girl to sit on me while I did the testing. They lined up, and one by one they lowered themselves on my steel rod and presented their breasts for my inspection.\n\nI have no idea how I got through the process. Their pussies were fascinatingly different, - and by now I think I could have told them apart blindfolded, even without the added information from fondling, squeezing, nibbling, and sucking on those luscious breasts. I managed them all without coming, which led to an immediate second round of testing, then another....\n\nIn the end it was Sandy's internal muscle control that got her the win. When she did her squeeze play I was a goner. I erupted in the loudest, most intense orgasm I can remember. Sandy didn't get much time to enjoy her triumph, she was summarily lifted of so everyone could watch me shoot in the air, - and get their share of the spoils.\n\nSunday, May 12, 12:30 pm \n\nKaren was the first to move. \"This looks like a scene from an orgy,\" she said with a laugh, as she sat up and looked around. Sandy was lying half on top of me, still clutching my dick in a firm grip, her pussy read and open, with my cum leaking down her thigh. My dick was crusted with dry juices from myself and four pussies. Alex and Alya were lying side by side, their hands holding each other's well-fucked pussies. \n\nKaren looked down at herself. \" Yep, Kilroy was here too,\" she said smugly. \"This is going to be hard to top! Who's for a shower?\"\n\nWe dressed for lunch. We had done everything else, so we thought that might be fun. The girls would have been beautiful in whatever they decided to wear \u2013 or not, and they still managed to give me tantalizing glimpses of themselves. The no underwear rule seemed to still apply, even if we were back in normal attire otherwise. And just to make sure I was perpetually aroused, they once again took turns fondling me.\n\nSuddenly, we heard a car in the driveway. The girls jumped up and looked at each other anxiously, hastily checking that we were all looking decent. I was as surprised as the girls, - I certainly wasn't expecting anyone. We trooped outside as a big sedan came around the last bend and pulled up in front of the house. \n\n\"Dad!\" exclaimed Karen. \"What are you doing here?\" \n\n\"Mom!\" \u2013 Alex this time.\n\nIn the end one dad and three moms emerged from the car, each going to embrace their daughter and checking them out to make sure they were all ok. The girls were fending off endless questions and subjecting themselves to hugs and scolding alternately. In the end they looked at each other with exasperation. Karen became the spokesperson.",
        "\"So are you quite finished embarrassing John, - and us?\" she said in an aggrieved tone of voice. \"We know you are all concerned, but you obviously don't have much confidence in any one of us, do you? You each talked to us, and to John, and you were all in agreement with what was going to happen, and now this, - this, - invasion!\" \n\nThey all looked shocked at her reaction, and started talking all at once. \"I only wanted..\" \"But Alex\"... \"Karen, - don't take that tone..\" \"but you're my daughter\"...\n\nI was as proud of them as if they were my daughters. They stood their ground and made their parents back down and admit that they had been silly, overimaginative and insensitive. They were all contrite in the end, even George, to whom humility didn't come easy, and hastened to apologize to me for whatever they thought they could apologize for, including mistrusting me. I wondered what they would have said if they knew what had been happening. \n\nIntroductions were finally made, even if I had of course long since figured out who was who. And since I couldn't very well call them all 'mom', their names were handy to know. Laura, - Alex's mom was obviously the source of Alex's looks. Soft and willowy, same generous figure and the same stunning red hair. Anita was Sandy's mom, and was also a blonde. She had probably also been trim and fit in her youth, but she was the 'cuddliest' of the three, but although she had let herself go a bit, she was still very attractive. Dia, Alya's mother, stood out amongst the rest. Her skin was darker than Alya's but she had the same slender grace. She had blonde streaks in her dark hair , wore a tight top and skirt and looked very hot! She gave me the eye as soon as she took my hand. \"So you are the man who rescued my daughter?\" she said in a silky voice. \" Not a bad choice of rescuer, if I may say so myself.\"\n\n\"Mom! You're embarrassing him \u2013 and me!\" Alya was exasperated, but you could tell she had plenty of experience with her forward mother.\n\nWe all calmed down eventually, and the hugs were genuine this time. I got my share of them, and thanks for looking after the girls so well in this difficult situation. We duly inspected the car, the road and the accident site, the cabin, the sleeping arrangement... I had a brief moment of panic, wondering if the beds still showed signs of passion, but they were nicely made and everything was innocence itself.\n\nEveryone expressed amazement at the cabin and the property, and good will was exuded by all in generous measure. We brought out some more food, - the visitors were hungry. George didn't waste much time getting to business. He grabbed me and we went for a walk down to the lake as he proceeded, first into fact-finding, then some internal calculation, then to negotiations. He was aggressive, but so am I, and I knew he wanted what I had. In a remarkably short time, we came to an agreement on the basics, subject to validation of a whole lot of numbers, but we both felt good about it.\n\n\"There you are, - I should have guessed!\" Karen came around the corner of the cabin, followed by the rest of them. \"So, dad, - was it as good a tip as I said?\"\n\n\"You were very good to let me know about this, little one! I owe you for this, - big time!\" \n\n\"How about giving us girls a commission, then?, Karen replied mischievously. You would have given a commission to anyone else that arranged this contact for you.\" She said it with a smile, but there was a serious note in her voice. \n\n\"Yes, George,\" chipped in Laura, Alex's mother. \" don't be such a cheapskate, give the girls their due.\n\nI had to laugh, - George was caught and he knew it. \"Why not?\" I said. \"She's right, - you would give it to anyone else who put you onto this. Make it 0.05% of the buying price, contingent on a successful conclusion. I know you will want to argue, but forget that she's your daughter and that they're just college girls, and do it..\" \n\n\"I don't want to sound ungrateful, but 0.05% doesn't sound like much,\" said Alex. \"Why so little?\" \n\nKaren laughed. \"Oh, I think we could settle for that little pittance.\" She grinned conspiratorially at me. \"About how much do you think our fee would come to, John?\" \n\n\"Oh, that depends on how the numbers pan out, but my guess would be something between 25 and \u2013 what, George, - 50?\" \n\nHe nodded, - \"maybe a bit more.\" \n\n\"We won't go far on 50 dollars, split 4 ways,\" laughed Sandy. \n\n\"He means $50,000,\" said Karen. \"It's not called big business for nothing.\"\n\nTheir jaws dropped. I could see the mental calculators working furiously. \n\n\"Twelve and a half thousand each!?\" Sandy was incredulous. \n\n\"That means you'll get $5 to $10 million,\" gasped Alya, getting the other end of the equation. \"You ARE rich.\" \n\n\"Add another zero,\" said Karen. Big numbers were nothing new to her, that was obvious. \n\n\"How can you say you aren't rich when you have $100 million coming,\" stuttered Sandy. \n\n\"I don't have it yet,\" I said. \"and I have quite a few people to share with. But even then, I guess I'll be in very good shape.\" \n\n\"I should say so\", chuckled George, \"and it's a fair price at that. OK, sweetheart, you girls have got a deal, - but your agent here should get a cut as well, although it's not as if he will need it.\n\nKaren was obviously very pleased with herself, but more with her success than with the money, - I could tell. She gave me a big hug, and put a bit more enthusiasm in it than I would have thought prudent under the circumstances. George's eyebrows went up, but he said nothing. \n\nThe afternoon passed quickly, with everyone in a convivial mood. We talked about anything and nothing. The girls' mothers were very nice, open and enthusiastic and clearly anxious that their 'little girls' should have as bright a future as possible. \n\n\"Was it fun to have four lovely girls staying here with you for the past two days, John?\" It was Dia, - of course, and her voice had that edge of a provocative tone again. \n\n\"It was fun, actually,\" I said light-heartedly, - \"I am not used to such youthful energy around the house. Good thing I was well supplied with food and drink.\" \n\n\"Yes I did notice a few empty bottles in the kitchen,\" said Dia again, still in a teasing voice. The girls were looking a little apprehensive now, but did their best to act innocently.\n\n\"Oh, oh, - you found me out,\" I said with a laugh. \"I guess I shouldn't have let them have anything to drink, but I thought I'd let them decide for themselves, and they were very responsible about everything.\" I was quite pleased with how I worded that. \n\nThe girls sniggered, - \"sorry dad, sorry mom\". Very insincere! The parents all laughed. \"We don't have any illusions that you have never had a drink, they said in turn, and we certainly trust you to act responsibly.\" I couldn't have put it better myself. \n\nWe'd better think of getting to our motel,\" George said \"It's getting late, and I think it's quite a way to get there. Everyone agreed that it was time to go, but when the girls understood that they were expected to go as well, the agreement fell apart completely. To put it mildly, they flat refused to go. Their parents first commanded, then pleaded, then looked in vain to me for support, and finally they made the mistake of reasoning with them. I was hoping it would get to that, because I had absolutely no doubt that the girls would win. So the parents left by themselves, still grumbling and with very mixed emotions, but with no rational argument left. They waved goodbye, with promises to be back first thing with a second rental car, so the girls could continue their trip while George's car was being fixed.\n\nThe girls were triumphant when the car disappeared round the bend and we were alone once again, but went suddenly quiet . \"Why didn't you take our side in this discussion, John?\" asked Sandy, clearly speaking for everyone. \"You just stood there and said 'it's OK with me either way', like you didn't care, and would just as soon get rid of us.\"\n\n\"Think!\" I said and turned and went into the kitchen. They followed, suddenly uncertain of my mood and intentions. \n\n\"Shit, - of course you had to do that,\" said Karen, brightening with her newfound insight. \"If you had wanted us to stay, our parents would have had a much harder time with it\"\n\n\"Bingo\"\n\n\"So you do want us to stay'\" said Alex, still not convinced\n\n\"Well, D'ooh\" Sandy wasn't impressed with Alex's lack of understanding. The light went on for all of them, and we were all hugging and kissing. You have never seen five people undress so fast, but then again, no underwear makes for a short process. We looked at each other, not quite sure what to do next. The girls wanted to do something, but they hadn't got to 'what' yet.\n\n\"What now?\" Sandy was the first to voice our common thoughts. We looked at each other some again, - no one said anything. \"What do you think, John?\" asked Karen eventually. They all turned to me.\n\n\"Oh, come on, ladies,\" I said teasingly. \"Don't tell me your legendary organizational talent is failing you at last.\" \n\n\"John's right,\" said Alex in a determined voice. \"We can do this.\" They decided to each say what they had liked best so far, and what they would like to do that they hadn't already done. It became a mental replay of the whole weekend, each talking wistfully about this event or that. I replayed each in my mind as they talked. They all agreed that losing their virginity was the most significant thing that had happened, and something they would never forget.\n\n\"The rest of the squad are going to be sooo envious,\" said Alya. Most of them have horror stories about it, and even the ones that aren't complaining think it was no big deal, just something that happened.\n\n\"No big deal!?\" Karen was incredulous. It was the most unbelievable pleasure I have ever felt, and happiness too!\" \n\n\"Alex gave her a hug. \"I now exactly what you mean,\" she said. \"I was right there, remember?\" \n\n\"Was that the best for all of you\" asked Alya. They all nodded and smiled with remembered happiness. \"I wish he had gotten mine, too\". Alya said wistfully.\n\nWhat was the best for you then, Alya?\" \n\nAlya's face lit up with the memory. \"When John had me for lunch,\" she said with a blush. \"I had waited for it so long. But the first night he was done after Sandy, and the next morning you all interrupted us, and I was sooo ready it was scary. And then he was so gentle and he just kept going and going at the same steady pace, and I came and came and he still kept at it and I wanted him to fuck me hard and he just kept on drilling at the same slow pace and then he started fucking me but good and it was like Christmas and New Year all at once...\" She ran out of words. Her hand was between her legs by that point, pleasuring herself openly.\n\n\"God, that's so hot! I don't think you missed out on much..\" Sandy smiled, reliving her similar experience, also starting to breathe hard and stroking her nipples.. Alex and Karen were also showing signs of arousal, their legs spreading slowly and their unbelievable breasts heaving and flushed.\n\n\"What was the biggest surprise you had?\" asked Karen. They thought about it in silence for a minute. \"I think for me it was how easily we all just slid right into the whole sex thing. I was so scared of sex before I came here, - all kinds of mixed up emotions about wanting it and worried about how it would be and would it hurt and what would the boys think and all that. And when we came here, it all sort of just happened.\"\n\n\"My biggest surprise was John's penis\". Alex blushed at the thought. \"You mean his cock?\" said Sandy mischievously, with a wink to me. \"What about it, other than it's so big and hard?\"\n\n\"Yeah it sure was \u2013 eh \u2013 is!\" Alex looked at it wistfully. But it is so beautiful, not at all like I thought. It's warm and silky soft and the way the skin moves when you stroke it, and how incredible it feels in your mouth.\" \n\n\"The taste, too, Alex! Don't forget the taste..\" Karen put her two bits worth in.\n\n\"As if I could ever forget that!, said Alex, looking at me again, then reached out with a happy smile, captured a few drops of fluid from the top of my dick and licked her fingers. \"Mmmmm, - delicious\".\n\n\"I couldn't believe how much I enjoyed having my ass tickled and probed,\" said Alya. \"I always thought it was a dirty place that I was actually a bit ashamed of. And when John touched be there I just melted.\" \n\n\" Yeah, me too\" ( Karen and Alex both). They all looked at Sandy. \"How about you, Sandy? What did you think of your anal experience?\" Sandy looked first uncomfortable, then thoughtful, then aroused, in rapid succession.\n\n\"I was so scared\", she said slowly, \"and it wasn't very comfortable at first. But I was so horny and John wouldn't take my virginity, and I had to have him one way or another. Then it started feeling very good and soon it was just outrageously fine. It was like losing my virginity without actually doing it, I guess. The real thing was better, - I think, but there is a totally special feeling of being filled up. I loved it! I did, I really did.\"\n\nThe girls looked thoughtful, - I could see it coming. \"John?\" said Alya slowly. \n\n\"Of course I will,\" I said with a laugh. You don't think I could pass up such an opportunity, do you? But let's not rush into this, it takes a good long build-up to feel really nice and not painful.\" \n\n\"My scariest moment was when we first got up to dance for John,\" said Alex. \"You were all so confident up there and looked so hot, and I was just terrified. I am amazed now that I actually did it. But I think you guys had got me just a little bit hot, too, so I just closed my eyes and did it! And then it was topless and I was petrified all over again. But then that too just happened, and I wasn't scared any more, just curious and somehow wanting to do things, - you know...\"\n\nI was scared when I got John to come in and take our cherries,\" said Karen quietly. I knew he cared for us, and I knew he had fucked Alya, but he didn't want to do it to Sandy, and I was scared that he wouldn't want to do it to me, either. And then it turned out better that I ever would have imagined!\"\n\n\"How about the way we kinda slipped into being with each other?\" Sandy looked amazed as she thought about it. \"I thought only lesbians did that, and I am certainly not that! But it was so natural and felt so good\". \n\nKaren chimed in: \"I would never have believed I would suck the cum from another woman's pussy and get her to come, - and I enjoyed it so much!\" She looked form one to the other. \"What an amazing weekend! I am so glad we had the accident!\"\n\n\"I wish we could do it all over again,\" said Alya\n\n\"Well -, \" I said. \"We couldn't do it all in the time between now and tomorrow morning, but maybe we could do a selection of favourite themes from this long opera.\" \n\nThe girls lit up! \"Where do we begin?\"\n\n\"Let's see, - we can skip the accident and the checking out for damage, enjoyable as that was\". I had this crystal clear in my mind by now, and I wanted this to be MY show. \"Let's dispense with the preliminary rounds of evening gown and swimsuit competition, and go straight to the final round. But ladies, - unless you want this to be a very short performance, you know what you must avoid?\"\n\n\"Yes, Yes, - no coming for you until the end, we know!\"\n\n\"OK ladies, put your shorts on and take your positions\".\n\nI sat in my chair and the girls got up and stood side by side in front of me, my old shorts hanging loose from their hips. I looked at them with the eyes of the first night, marvelling again at their youth and beauty and how incredibly lucky I was to have had this experience.\n\nI lifted my hands like an orchestra conductor and brought them down. The shorts dropped in unison, and their expression showed that the girls were clearly reliving the emotions of that first experience, blushing and breathing hard. I looked at them for a long time, my knowledge of their personalities and the memories of all that had happened blending with the vision of erotic innocence of the eight breasts and four pussies before me. \n\nI spread my legs a little, - they mimicked my every move. I twirled my hand in the air and they turned, just as before. Once again I stopped them facing away from me and made them bend over. God, what a view! It would be burned in my mind for a long time. I let them back up and facing me. As soon as I took hold of my dick, they started masturbating in front of me, the plot vivid in their memories. It didn't take long before they were shaking and gasping in their first orgasm of the evening.\n\nThey came over to me, and knelt down before me, reaching for my prick. \"Careful, girls'\" I reminded them. Once again they shared me around, stroking and sucking, taking me as deep as they could. This time I was watching them more closely, and saw how they also pleased each other at the same time. My hands wandered around their pussies and asses, lingering here, probing there, tickling everywhere. They came again, - individually this time, as their bodies went over the top. I finally called a stop.\n\n\"That was fun!\" \"What's next\" \"I loved it when\"...\n\nI had to think. \"Next was dinner, I think, then Sandy, - but we will leave the Sandy thing to last, don't you think ladies?\" \n\n\"To hell with dinner, what was after Sandy, asked Alex, impatiently.\"\n\n\"OK, I said, - act 2 starts in my bedroom\". Sandy and Alya lit up. The scurried into my bed, face to face and pulled the blankets back, waiting for me to take my place behind Alya. \n\n\"No blankets\", protested Karen. \"This time we want to see what happened.\" I got in and snuggled up. Sandy's hand burrowed back underneath us, grasping my dick and stroking Alya's dripping pussy at the same time. I held Alya's breast and pinched her nipples, while Alya held her hands in the air. \"look, - no hands\" she said, remembering the first morning better that I did.\n\n\"We can't see,\" protested Alex, and she and Karen got right down close and lifter my leg and Alya's to get a good look. Karen couldn't resist; she bent down and licked my dick and Alya's clit. Alex did the same, not wanting to be left out.\n\n\"That wasn't how it was\", Sandy protested half-heartedly. \" But I guess it was how it could have been, so be my guest.\" A few licks later, I called the next play.\n\n\"I take to hell with breakfast as well, then?\" I said, - \"let me see, it was kind of a boring morning, career discussions, calling parents..\"\n\n\"Anyone for calling the parents?\" quipped Sandy. To pillows over her head cut short that discission.\n\n\"Let me see, - are we skipping lunch again?\" \n\n\"NO WAY!\" Alya was outraged. We all had to laugh at her, she was so intent on having her scene that she glared at us. \"Don't even think about it!\"\n\nI wasn't going to skip that meal for anything. \" I think you had your snack first, Alya,\" I reminded her' standing up in front of the bed. She lit up and reached for her first course. If anything she had gotten better at it, - slow lingering licks and gentle suction, stroking all the while, and not ignoring my balls either. One hand crept behind me and probed gently. I disconnected her and put her on the bed, and started my own meal. The slow methodical process from her lips, down her chocolaty soft skin, over her red-tipped breasts, down her body and to her pussy had her writhing just like before. Again she came at the first touch of her bright red clit, this time loud and boisterous. \n\nI grinned at her. \"Attagirl!\" The others were gathered closely around the bed, watching every move intently. They had their own version of touching down the lane, but never taking their eyes off Alya and me. Alya reached for me, pulling me to her. I gently slid into her She was already wide open and dripping, no need for slow entry today. Still, I slid in fully and started fucking her with a slow and steady pace.",
        "\"Here he goes again,\" gasped Alya. \"Do you see what he's doing to me?\" She came, grabbing me hard to her. I kept going. She came again, louder. More of the same. \n\nSandy couldn't stand it any more. After a particularly strong orgasm from Alya she flopped down beside her, spread her legs and pulled me violently off Alya. \"Do me now!\" she stuttered. \"That was incredible.\" The spell on the others was broken. Karen and Alex helped me enter Sandy, while Alya was just lying there like a rag. \n\nI got into the same rhythm. I was like a fucking machine, aroused and rock hard, but with no danger of coming. Thrust, thrust, thrust, come. Thrust thrust, thrust, thrust, come. Sandy's orgasms were loud and joyful, not quite as frequent as Alya's but every bit as strong. \n\nKaren pushed Alya out of bed and took her place. I knew what was expected of me, even if this wasn't how it had been the first time. I moved over to Karen. Alex was helpful once again got a few strokes of her own in before she put me in Karen's heated cunt. Back to the slow fucking. Karen held out well, - she was clearly determined for this to last. Panting like a dog, she met my every thrust with vigour, her athletic body responding to the challenge like a racehorse. \n\nI cheated. I caught Alex's eye and motioned her to get down to where we were joined. Her eyes lit up and the next thing I felt was a soft tongue licking our joined bodies. The nibbling on her clit sent Karen over the edge. \"No Fair!: she grunted with a contorted face and came like a train. \n\nSandy had already made space for Alex, who quickly scurried into position. Alya and Sandy both helped our placement, one opening Alex's pussy, one guiding me in. Alex was into this approach now. She knew what to expect and how to respond. She did a Karen, responding lustfully to every stroke, but never getting the frantic impatience of the others. We kept going. Alex came once, with a tight internal grip on my dick. Then again a few minutes later. Those grips were getting to me. I was starting to worry about holding out. \n\nKaren got her own back, burrowing in and licking us. Alex's clit and my dick got our share, but when she brought her tongue up to my asshole it was all over. \"Karen, - don't!\" I hissed, but it was already too late. I erupted in Alex, who went off at the same time. We spasmed over and over again, both of us, and lay like the dead when it was all over. \n\n\"Wow!\" \"I wish that were me!\" My God!\" \"Unbelievable!\" The last one was me. I smiled down at Alex, then at Karen. \"What did you do to me girls?\" You have plumb wore me out, now\"\n\n\"You mean no more reruns?\" Sandy said with disappointment written all over her. The others had similar expressions. \"But what about...\" They looked so dejected that I had to smile. Let's have some of that food now, and then we'll see. Even if we skip the erotic hike, we still have the dual defloration, the quintuple shower and the breast judgement left, not to speak of the anal experience.\n\n\"We can't leave out all that, and we still have \u2013 let's see, - 8 hours to go. That should be a safe margin. And we do need some sleep too, we can't all look like night owls for your parents in the morning, or they'll smell a rat for sure.\"\n\nWe wandered into the living kitchen, somewhat in a daze, and started preparing some food. The girls sat me down in a chair, while they did the food. They decided that I needed a companion to start the recovery process and keep it on track, so at all times one of the girls was kissing and fondling me here and there, especially there.\n\nThe meal was delicious once again, the girls had made a frittata from the leftovers that was to die for. Light and fluffy, with the most amazing combination of ingredients and a distinctly exotic flavour. \"Who came up with this?\" I asked incredulously. \" It's phenomenal!\" \n\nAlya smiled proudly. My Jamaican heritage,\" she explained. \"Is there anything else you would like me to come up with? The girls all laughed, - her hand was busy trying to come up with my dick at the time.\n\n\"You know, - this is so different from the first time,\" said Alex thoughtfully. \"I know what's coming..\" \n\n\"Yeah, mostly you!\" quipped Sandy.\n\n\"Oh Sandy! I mean, we did it all before, but it feels different and sort of like the first time too at the same time.\"\n\n\"And we all get to do all of it this time,\" said Karen happily \"That's awesome! We don't have to listed at the door and try to guess what you're doing.\" \n\nMy dick was definitely feeling friskier, and I decided it was time to finish the program. \"What's the sequence going to be?\" We agreed to leave the anal experience for last, right?\" \n\n\"Right, - but maybe we should do the quintuple shower last\" \"No the shower has to be before something. We have to be excited about what's coming, otherwise we'll just be washing each other.\"\n\n\"OK, Shower and then anal last. So should we start with the dual defloration or the breast test?\" I shook my head in disbelief. They could have been talking about what channel to watch. Were these the same four innocent girls that had come here only two days ago? \n\nWith such a straightforward choice, there wasn't much to argue about, so they went for the defloration, followed by the breast test. Off we trooped to the guest bedroom. This dispassionate conversation had somewhat diminished my ardour, and the girls looked at my wilted leek in dismay. As one they reached for it to try to rub him back to life, making the damage even worse in the process.\n\n\"Girls, girls! Haven't you learned anything this weekend? You're scaring him to death! Gently, gently. Remember; sexy is all in the mind. Only later is it the body's turn. Karen smiled slyly. She put me down on the bed, sat astride my hips and bent down. She kissed me slowly and sensuously, her huge breasts tickling my chest. I tried to lift my hands to hold them, but found that they were trapped beneath a pussy each. Alya knelt at my feet and started playing gently with my limp dick.\n\n\"Doesn't this feel nice?\" Karen whispered in my ear. \" You are going to take my virginity now, and Alex's too, at the same time. You are going to kiss our pussies side by side, then fuck both our cunts at the same time. Alya and Sandy are going to watch us. Maybe you can do all four of us at the same time. And then you get to fuck us in the ass, John. All four of us, side by side, would you like that? Can you feel how wet my pussy is, John? It's dripping all over Alya's hand. Are Alex's and Sandy's pussies as wet as mine is? I think Alex's clit is the biggest, don't' you John? Her whispering was punctuated with licks in my ear and the occasional probing kiss. That girl had certainly learned something this weekend!\n\nWhen I suddenly grabbed her and pushed my hips upwards it was obvious to them all that we were back in business. That girl could get a mummy erect, I swear.\n\nKaren and Alex laid their bodies side by side, with Karen's leg across Alex's hips. This is a good place to start, don't you think, John?\" asked Alex mischievously. I leant over them and started kissing, alternating hand action and kisses, just like before. What was different was that this time I had Alya and Sandy sharing the other end of me, kissing and sucking, making sure my newfound hardness didn't subside. Alex and Karen came on schedule and wanted to get on with the real thing. Sandy and Alya watched the three of us get in position, with the two girls' hip one on top of the other and me on top, with my dick sticking down and sliding along the two wide open pussies. \n\n\"That doesn't look so comfortable,: said Sandy critically.\n\n\"It feels great,\" panted Alex. \"Yes but I don't think John is comfortable,\" protested Alya. \"How about we do it this way?\". \n\nShe placed be in the middle of the bed, then Alex and Karen one on each, their hips on top of mine, legs scissored and trapping my dick between their pussy lips. Sandi was next straddling my legs, then Alya straddling my stomach, all legs scissored and all four pussies touching y dick. \n\n\"So far so good,\" I huffed, squeezed under their combined weight, \"but how do you see the next move?\" It was a good question: when I tried to thrust upwards, the whole thing fell apart, as well as straining my back. We tried a few more suggestions for having us all involved. The most successful was me on the bottom, two girls legs scissored from my sides as before, one on my mouth and one satisfying herself sitting on the part of my dick still sticking out at the top. Changing places became way too cumbersome, and in the end we gave it up.\n\n\"That was fun,\" said Sandy and Alya both, \"but maybe a bit time consuming for a rerun. Let's move on to the breast test.\" I liked that idea, it gave me some time to get my strength back.\n\n\"Do we really have to do the whole test?\" asked Karen, or should we go straight to the tie breaker?\" \n\n\"I liked the test,\" said Alex somewhat bashfully. \"It felt really good when you all were playing with my breasts, and I liked doing yours as well.\"\n\n\"OK, but let's do the abbreviated version\". The girls thoroughly enjoyed pleasing each other. The breasts got the majority of their attention, but there was no shortage of fondling, licking and nibbling on other body parts either. I was watching as per the script, with one of the girls masturbating me slowly and carefully during the whole process.\n\nThe tiebreaker was just as exciting as the first time, - had it really only been that morning? It's an indescribable feeling to have four cunts descend on your dick in rapid rotation, over and over. This time it just petered out, we were all to conscious of the dangers of premature ejaculation. \n\n\"OK Girls, - now for the shower. And may I recommend that you pay special attention to our next target of opportunity?\" We knew the drill well and got into formation. The warm water fel good after our sweaty exercises. I demonstrated the proper cleaning technique to the girls, using Sandy as the experienced subject. With soapy hands I separated the globes of her ass, revealing and washing her brown puckered opening. Alya took over the separation job and I carefully inserted the first finger in Sandy's ass. I probed and cleaned, bringing my finger out and in again, widening the opening with each stroke. Two fingers went in, still working on the opening. \n\n\"Relax, Sandy, you know that will make it easier.\" The third finger went in, and Sandy gasped. The girls were watching, mesmerized. \n\n\"Doesn't it hurt, Sandy?\" asked Alex timidly. \"No it feels good, said Sandy breathlessly, wiggling her ass as if to prove a point.\n\n\"Ok, girls, your turn now. Do each other.\" As usual, they worked out a system. One would spread her ass, another would probe. Their facial expressions were something to behold: Apprehension, delight, discomfort, acceptance and lust all flitted across their faces. Then they turned on me. Karen kissed me and held me, Alex and Alya spread my cheeks and Sandy unceremoniously stuck her finger in my ass.\n\n\"Wait, You don't need to do me!\" I said. \" Oh yes we do, you're going to get it too. What's good for the goose...\"\n\nI actually enjoyed it a lot, particularly as they got a bit more gentle. Having one of them suck my dick while they probed didn't hurt either. I had to slow them down in the end., and turn the water off.\n\n\"That feels strange back there,\" said Alex hesitatingly. \"like I'm going but not going, if you know what I mean\". \"I sure do,\" said Karen. \"Very strange.\"\n\nWe went into my bedroom for the re-enactment. \"Let me make sure you are all ready for this,\" I said with an internal grin from ear to ear. Bend over by the bed and spread you cheeks. They obeyed and with great delight I did the inspection. I had brought some hand cream and put a good dollop on each of them, then slowly pushed three fingers inside. I also put the fingers of the other hand on their cunt lips and probed lightly, flicking each clitoris in the process. It turn they jumped and settled down again. I pumped some more and each one of them started pushing back. They were ready.\n\nSandy jumped into bed and waited for me to begin. The rest crowded around. I licked Sandy's pussy and pinched her clit lightly. She was so excited that she came almost instantaneously, her juices running down to her already open and lubricated asshole. \n\n\"Put it in! I need you in me!\" she panted, remembering her lines to perfection. It was much more comfortable for both of us this time. She was nowhere near as tight and accommodated me in one slick buttery move to her innermost entrails. We fucked lustily and noisily. \"Oh yessss, that's so good, - I remember now! Oh fuck me, fuck me!\"\n\nSandy didn't take long to come again, and with a sigh of regret she gave up her position to Karen. \"Please be gentle!\" she pleaded. \"I am scared of this. I just know it is going to hurt, - you're to big for me.\" \n\nI kissed her, kissed her pussy and proceeded to feed my dick into her tight and clutching rectum. No way was it going in. \"Karen, you have to relax your muscles,\" I pleaded. Nothing will get in there unless you do.\" She made an effort to relax. One finger went in easily and the familiar sensation made her relax enough for two fingers, then three. Sandy took over the finger job and slipped her fingers out as she inserted my dick in their place. \n\nBefore Karen could get scared again I was in. Once past the sphincter, it was easy going, and Karen gave a confused gasp of surprise and pleasure. \"Oh my god!, you're filling me up, _ I have never...\" I kept pushing in until I was balls to the wall, then slid back out, out, out slowly. Karen grasped at me as if to hold me in, and I reversed again, fucking her ass in earnest now. She exploded and collapsed, my dick slipping out with a pop. Sandy grinned at the sudden memory of her own 'pop'.\n\nAlex climbed on next. \"Relax. OK,\" I said. \"You saw what happened with Karen. Alex nodded, her face a study in concentration. No problem this time, I slid in as if we had done this a hundred times. \"Oh John, - it feels so good, I had no idea\" These girls ere taking to this pretty well, I thought. Alex too came and went, then Alya. \n\nI want it like this, she said, getting on her knees and swaying her back, putting her ass in my face. I kissed her pussy and her winking asshole briefly, then entered my last virginal orifice of the weekend. This was an Alya I hadn't seen before. Always energetic, she became a tigress with my dick in her ass. The girls and I all watched in awe as she impaled herself on my dick I was hanging on for dear life for the first few minutes, before I got into her syncopated rhythm. Then we went at it like there was no tomorrow. I rammed my dick deep in her ass again and again, grabbing her tits and twisting and pinching her nipples. Just as I was about to admit defeat she threw her head back, her muscles taut as hawsers in her neck and came. And came. Still fucking she came again, then collapsed.\n\nI looked around at the girls. They were stunned and envious, big eyes looking from me to Alya and back to my dick again. The juices were running out of Alya. \"Did you come in her?\" asked Sandy timidly. \n\n\"No, that's all her,\" I replied \n\n\"Fuck me like that,\" said Sandy suddenly and bent over the bed, ass in the air. \n\n\" Me too,\" said Karen bending over next to Sandy. \n\n\"Me too\". Alex was next to line up\n\n\"Me too'\" croaked an dishevelled Alya, determined not to miss out on anything.\n\nI took my time, this was too good to rush. Methodically going from one ass to the next I ploughed my field of four furrows. Dip stroke, dip stroke, dip stroke. I started speeding up: the girls and I were all getting impatient. Soon I was ramming them all in the same frantic pace and manic strength they had seen with Alya. It was as if they all knew this was it, the last hurrah, and they threw all their impressive energy and stamina into it. I grabbed each set of breasts and hurt them mercilessly and they loved it; pushing back for more. Finally I came, but I kept ploughing, depositing squirts in each ass until I had no more to give. Each squirt was a trigger for the recipient. Only Alya was too spent to come again. The others shuddered and cried and collapsed on the bed. I fell somewhere in the middle of them and the lights went out.\n\nMonday 5:30 am\n\nThere were bodies everywhere. I was sweaty and hot and sticky. My face was between a firm pair of breasts and a wet pussy was wedged over my arm. A soft body was draped over my legs, and the smell of sex was overpowering. As I started to extricate myself, the girls stirred and gathered their limbs in some sort of order. Tousled heads lifted weakly, bleary eyes cracking open. \"Are we dead? asked a weak voice. \"Did you fuck us to death, John. I swear you fucked us to death!\" \n\n\"No such luck,\" I replied, equally croaky. \"You are all still alive, and your parents will be here in a few hours. I think it would be ill advised to let them find us like this.\" Groaningly, they stirred themselves enough to get up and go to the bathroom. Oohs, and Ouch's came in short order as they surveyed the damage to their bodies. \"Where is the rest of the army that fucked us?\" asked Alex in a bewildered voice. \"I must have had at least a dozen of them all by myself.\"\n\nI felt better already. \n\nWe got going, no one wanted there to be any visible sign of our evening activities. By 7:30 we were more or less presentable. The shower was a bittersweet affair, more washing than sex play, lovers that had had their last tryst, knowing it was all over. \n\nI inspected them once again before their panties went on, front and back. Everything was clean and tasted fresh. We all looked at each other, suddenly aware that it was all but over. \"John...\", said Karen hesitantly. \"This time here...\" She trailed off again, unable to find the right words.\n\n\"I know, Karen,\" I smiled wistfully. \"I feel that way, too. Life will be pretty tame up here without you four.\" \n\n\"You know, we are going to say goodbye with our parents right there\", said Alex, suddenly unhappy. \"I can't even kiss you goodbye properly. I am going to say goodbye now!\" She reached out and took my hand, snuggled closed and looked up into my eyes. \"Thank you for everything, John,\"she said, her eyes misting over. \"You have been so wonderful to us, - to me. I, - I... I love you!\" She threw her arms around my neck and hung on for dear life. \n\nI held her close and kissed her head. \"I love you too, Alex,\" I said softly, \"but you will find someone to be 'in love' with, and then you will understand the difference.\" \n\nThe other three came close as well, each of them kissing me softly in turn. We all hugged close, in an embrace full of love and caring and respect. I felt so close to each of them at that time, - it was somehow more intimate than even our most intense lovemaking. That had been mingled with healthy doses of lust, this was somehow pure and clean.\n\n\"I love you, John!\" \"I love you, Karen.\" \n\n\"I love you so much, John.\" I love you too, Sandy.\" \n\nI love you John, - you are one hot dude\". I laughed. \"I love you too, Alya, - you're quite a firecracker yourself.\" \n\nWe stood there quietly holding each other for a little longer, then with a sigh, we broke up, the ritual completed, the play over, the book read and put down.\n\nWe were having breakfast when the two cars pulled up outside. \"Did you have a good night's sleep, girls?\" George was full of bonhomie and in command of the situation. The girls were impeccable. \"Oh yes, dad. We have slept so well here every night\" Butter wouldn't melt in her mouth. George was no dummy, though, he suspected, oh yes he suspected, but he kept his mouth shut. \"I have a lot to thank you for, John,\" he said. What you have done for my daughter and I, is something I will always remember. She seems so much more grown up. Thanks you for giving her the patience and caring to let her become herself\".",
        "Jesus! He knows! I thought, hoping I hadn't gone pale.\n\nWe started loading the rented car, exchanged information like addresses and phone numbers and instructions for the car. The girls would stop by on the way back from camp, stay the night, drop off the rental and drive their own car home. I was all for that plan.\n\nDia pulled me aside. You have been very good for these girls, John,\" she said seriously, but with a little smile lurking in her eyes. They seem so close now, like sisters. And they think the world of you, that's obvious.\" I hemmed and hawed and shuffled my feet. \"Oh shucks, maam, 'twas nothing.\" She grinned. You don't fool me, John Hobson! My daughter doesn't look at anyone like that over 'nothing', you know\"\n\nThe other two mothers joined us. \"This is a great place, John,\" said Laura with a smile. But it must have been crowded with four girls here. I fell right in it, hook line and sinker.\n\n\"No that was no problem,\" I said cheerfully. There is plenty of sleeping space for the girls, and I was quite comfortable on the sofa bed.\" \n\nSo no sense of being invaded, then?\" Anita chipped in. \"None at all, - it was fun to have some company for a change\" Deeper and deeper I went. \"Would you do it again, then?\" asked Dia. Now I saw the pit opening before me, but it was already too late. \"Sure\", I said with false bravado, - \"Why?\"\n\n\"George needs to get back, but we were going to ask if we could stay here a few days, said Laura, with a glint in her eye. \" Get to know you a bit better, and try some of the things our daughters did when they were here...\" "
    ],
    "authorname": "Alan D",
    "tags": [],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/hobsons-choice-ch-03"
}
{
    "title": "Milking Assistant",
    "pages": [
        "Milking Assistant\n\nJack walked through the large glass doors of the office building, swiped his access card and called the elevator. He scrunched his face up as he sipped at his coffee; he was still trying to find a decent caf\u00e9 close to work.\n\nJack had moved to the city just over two months ago, taking a well paying I.T job with Trig-Corp. It wasn't anything glamourous, but it paid a lot better than his last position and gave him the freedom to explore a new city.\n\nHis shy personality wasn't particularly conducive to making new friends, but the office had slowly warmed to him, inviting him out to drinks on a regular basis. He'd made new friends; he enjoyed the work.\n\nHe just couldn't find a decent coffee.\n\n\"Jacky-boy!\" A voice called from behind him, just as the elevator door opened. \"How was your weekend?\"\n\nVince had become a good friend to him. He was loud and energetic, but he had a certain charisma that drew people to him.\n\n\"You know the wicked witch of the west is back today, yeah?\" Vince said, putting a hand on his shoulder.\n\nTheir boss, Jessica, had been on maternity leave the entire time that Jack had been working for the company. He'd never met her, but from all reports, she ruled the office with an iron fist. Jack had worked for some pretty tough bosses in the past, he usually just kept his head down and completed his work, staying out of office politics as much as possible.\n\n\"Well, rest in peace, buddy.\" Vince said, slapping him on the back as the doors opened.\n\nJack stepped off the elevator and walked in the opposite direction to Vince, dropping his lunch into the fridge on the way to his desk. He sat down and booted his laptop up before noticing that no one else was sitting in his area. Jack stood up and saw that almost the entire office was congregated at the opposite end of the building, chatting and laughing away.\n\nJack immediately assumed that they were all welcoming Jessica back, and even though they had never met, he should probably show his face and welcome her too. Jack stood and walked the length of the office, joining the group at the back.\n\n\"Well, we are all happy to have you back.\" A voice said, a few halfhearted claps followed.\n\n\"It's nice to be back, now let's all get to work.\"\n\nThe crowd began dispersing, Jack let them pass, knowing that he should stay and introduce himself to the woman that signed his paychecks.\n\nAs the rest of the workers shuffled past, Jack got his first glimpse of the woman that was so feared around the office. Jessica was taller than average, her long legs covered in nylon, poking out from under a tight pencil skirt. Her blonde hair cascaded over her shoulders, coming to rest at the top of her plentiful breasts, the buttons of her white shirt straining to contain their volume.\n\nJessica pivoted and looked in his direction. Jack quickly snapped his vision away from her curves and lifted a hand to gesture hello.\n\n\"You must be Jack.\" She said, walking towards him, hand outstretched.\n\n\"That's me, nice to finally meet you, Jessica.\"\n\nJack took her hand and shook it, immediately shocked by the strength in her grip.\n\n\"Call me Jess, please.\"\n\n\"Nice to meet you, Jess.\"\n\n\"You too, management tells me you've settled in perfectly. I saw the work you did on the Craig file, keep up the good work.\"\n\nJack was taken aback, from all reports, Jess was supposed to be terrifying. She'd been described as an office dictator, but from first impressions, she seemed lovely, professional, and absolutely gorgeous.\n\n\"Back to it.\" Jess said, turning and walking to her office, closing the door behind her.\n\nJack returned to his desk, slightly more optimistic about his future with the company now that he had met Jess. He had told himself that he would play it by ear until she returned from maternity leave, and if they clashed, he would simply quit and move back home.\n\nNow his future suddenly seemed much simpler.\n\nThe need to find a decent coffee place grew more urgent, however.\n\nJack plugged his headphones in and started listening to music, working away on his new portfolio until his alarm went off. He had developed a bad habit of getting lost in his work and missing his meal breaks, his phone was now in charge of reminding him to eat.\n\nJack walked to the kitchen to heat up his leftover pizza, signaling to the world that he was indeed a single man. Vince sat at a table, chatting with a few colleagues, he motioned for Jack to join them.\n\n\"Jacky-boy. Did you meet the ice-queen yet?\" He asked, chuckling away.\n\n\"I did, she didn't seem so bad.\" Jack said, diplomatically.\n\n\"She always seems like that at first, you just wait.\"\n\nJack didn't respond, he didn't like talking about people behind their backs, especially not in a workplace.\n\n\"She gets more breaks than the rest of us too, did you know that?\" Vince asked, addressing no one in particular. \"She closes the blinds in her office and pumps milk out. Whenever she wants, isn't that unfair?\"\n\nJack grabbed his pizza from the microwave and walked out of the kitchen, not wanting to get involved in the drama.\n\n\"Where are you going, Jacky-boy?\" Vince called.\n\n\"Work, Vince, I'm flat-out today.\" He called back.\n\nIt wasn't a lie, he was busy today, but mostly he just didn't want to sit listening to people gossip. He returned to his desk, put his headphones in again and slowly munched away on his rubbery pizza.\n\nAbout an hour later an email from Jess came through. It outlined some improvements that he could make, constructive criticism and suggestions. The email had a small picture of Jess in the top corner. Jack saw that she had brown hair in the photo, it must have been from a while ago.\n\nHe then noticed how small her breasts were in the photo, having a child must have tripled her size, possibly even more. Jack was amazed at just how much difference between the woman in the photo and the one he met today.\n\nJack felt a stirring in his pants when he thought about the size of her breasts. He thought about her in her office, blinds closed, pumping milk out from her huge tits.\n\nJack shook his head and took a mouthful of water, trying to expel the images from his mind. The last thing he needed was to be known as the new guy, who got a boner at his desk.\n\nHe put his head down and started working again, telling himself that the faster he got his work done, the faster he could get home and jerk off to relieve the pressure.\n\nHe focused on a large project and put his mind to work. It wasn't until his stomach started growling that he realised the sun had set. Jack looked around the office and saw that everyone had left for the day. Feeling pretty stupid, he packed his desk up and headed for the elevator.\n\nJust as he was about to press the button, he heard a voice coming from across the office.\n\n\"Just fucking work!\"\n\nJack recognized Jess' voice straight away. It was full of frustration, rasping at the end of each word. He reached for the button again but stopped just short. Part of him just wanted to leave, but if there was something that he could help Jess with, he wanted to show his value.\n\nJack put his bag down and began walking, the light coming from Jess' office acting as a beacon.\n\n\"Fucking piece of shit!\" Jess shouted, followed by a bang.\n\n\"Jess?\" He called out as he arrived at the half open door.\n\n\"Who's that?\" Her voice called back.\n\n\"It's Jack, the new guy, are you okay?\"\n\nJack heard Jess let out a breathy sigh, clearly upset with something. He was starting to wish that he had just left the building.\n\n\"Yes, Jack, I'm okay. You can come in.\"\n\nJack pushed the door open the rest of the way and entered her office. Jess looked flustered, something had made her angry and Jack was hopeful that it wasn't him.\n\n\"Why are you still here? It's past eight o'clock.\" She asked, her frustration audible.\n\n\"Sorry, I get carried away sometimes.\"\n\n\"Your wife must be a very patient woman.\" Jess said, smirking.\n\n\"Oh, I'm not married, it's just me and the T.V at home.\" Jack replied, trying to lift the mood.\n\n\"Still, you shouldn't work so late, it's not healthy.\"\n\n\"Well, you're here late too.\" Jack said, jokingly.\n\n\"That's different.\" She said, her smile fading slightly.\n\nJack wasn't exactly sure what was going on with Jess, he decided that he would offer his help and try and get into her good books.\n\n\"I heard you yelling, is there something I can help with?\"\n\nJess looked embarrassed, she clearly thought that the office was empty when she had shouted earlier. Her head turned to a small, yellow object, laying on the ground at the opposite end of the room.\n\n\"If you must know, my breast pump stopped working.\" Jess said.\n\n\"Oh, right.\" Jack said, now convinced that he should have taken the elevator and gone home.\n\n\"It takes me nearly two hours to get home and I'm already engorged.\" Jess said, her hands gently rubbing across the top of her voluptuous breasts. \"So now I have two options; ride the train home in pain, leaking the whole way. Or sit here, manually expressing myself for another hour before I can leave.\"\n\nJack stood in the doorway, completely stunned by Jess' frank words. He felt a stirring in his pants, his cock reacting to the image of her manually expressing in her office. He needed to leave as fast as possible to avoid Jess seeing him get a full-blown erection.\n\n\"Damn, that sounds horrible. I'll head off so you can have some privacy.\" Jack said, turning towards the door.\n\n\"Wait.\" Jess called, stopping Jack in his tracks. \"Wait, there is one other option.\"\n\n\"What's that?\"\n\n\"Well, you said you're single right?\" Jess asked.\n\n\"Uh, yeah.\" Jack replied, confused.\n\n\"Well, maybe, you could help me out with this?\" Jess said, her hand moving under her heavy tits.\n\n\"Help you out?\" Jack replied, trying his best not to imply anything that would get him fired.\n\n\"Look, I wouldn't ask if I wasn't desperate. I'm sore here.\" Jess said, her eyes pleading with him. \"It would be just between us. Never mentioned again.\"\n\nJack took a step back, completely shocked by what she was asking him.\n\n\"Wait, you want me to...\" Jack's words trailed off.\n\n\"You don't have to; it would just help me out a lot.\" Jess said.\n\nJack's brain was busy with different scenarios, most of them ended with him getting fired for trying to grope his new manager. But, as per usual, his cock was telling him that this might be his one chance to do this.\n\nHe hadn't been with a woman in nearly a year, the stress of looking for a new job and moving cities took the fun out of dating for him. In front of him was an absolutely stunning woman, practically begging him to touch her breasts, and he was considering turning down her advances. He had to decide if it was potentially worth his job.\n\n\"So, you want me to...milk you?\"\n\n\"Well, Jesus, I'm not a cow, Jack.\" She replied sternly. \"I want you to help me express.\"\n\n\"I've no idea how to do that.\" Jack said, wanting to be perfectly honest.\n\n\"It's not hard, you just suck, Jack.\"\n\n\"Suck!?\" Jack repeated. Up until now, he assumed he would be using his hands to help her.\n\nHis cock started swelling in his pants, letting him know what it thought of the conundrum.\n\n\"Yes, suck, Jack.\"\n\n\"What about your husband?\" Jack asked.\n\n\"I'm not married, I'm a single mother.\" Jess said, wincing as she rubbed the top of her breasts. \"Now I need you to make a decision here, Jack. If you're not going to help, then I need to get started on my own.\"\n\nJack was shocked to hear that such a beautiful woman was single, and a working mother too, Jess continued to impress him. He was becoming more convinced by his cock with every passing second and had basically made up his mind to help her already.\n\n\"Okay, but this stays between us, right?\" he asked.\n\n\"Absolutely.\" She assured him.\n\n\"Okay, how do we do it then?\"\n\nJess immediately stood from behind her desk and approached Jack. Her right hand unbuttoning her top as she walked.\n\n\"Quickly follow me.\" She said.\n\nJack followed her as she led him to a meeting room around the corner and walked to a long couch inside. She sat at one end and unbuttoned the rest of her shirt, exposing her white bra to Jack, his cock instantly springing to life. Jess unclasped a small hook nestled in her cleavage and let her engorged breasts fall free, swaying gently as they came to a rest. Her light brown nipples stood firm, small white drops of milk forming at the end then rolling down her tits.\n\n\"Lie down here.\" Jess said.\n\n\"Lie down?\"\n\n\"That's the only position I know how to do this in. Now hurry, I'm sore.\" Jess pleaded.\n\nJack didn't hesitate, he approached the couch and laid down on his side, facing Jess. His head fell into her lap naturally and he looked up at the gorgeous sight above him. He could smell her perfume now that he was closer to her, his cock making a tent in his pants as he absorbed her in with all of his senses.\n\n\"Okay, open your mouth.\" Jess said.\n\nShe put one hand on the back of his head and leaned forward, placing her hard nipple into his mouth. Jack took the breast between his lips and sucked, immediately receiving a gush of milk into his mouth. It didn't taste like regular milk, it was sweeter with a slightly metallic aftertaste, but definitely wasn't offensive.\n\n\"Ahh, that's it.\" Jess said. \"You're going to trigger my let down, keep going.\"\n\nJack wasn't exactly sure what she meant until a stream of breast milk hit the back of his throat. He spluttered a bit and pulled away from the nipple, only for jets of milk to shoot him in the face. He quickly put the breast back in his mouth, not wanting to be completely covered in breast milk and continued sucking.\n\n\"That's my let down, you're doing great.\" Jess said, encouraging him.\n\nJack's cock was growing uncomfortably hard in his pants, the situation far more arousing than he had expected. He knew that lactation porn was a thing, but he'd never had any interest in the genre. Now, within a few minutes of sucking at Jess' nipple, he knew why it was such a popular kink. It was incredibly erotic; there was something so feminine about the way Jess held the back of his head. He knew that their friendship, and their working life, would be changed completely by this.\n\n\"Are you ok?\" Jess asked.\n\nJack nodded his head, not wanting to take his mouth off her tit.\n\n\"Good, you're doing great, that one already feels so much better.\" She said, leaning her head back against the couch. \"A few more minutes and we can change sides.\"\n\nJack looked up at her, captivated by the way she controlled the situation. She was stern, but kind, gently guiding him through this new experience.\n\nHe continued to suck her for a little while longer before she let go of his head and started pulling her breast away.\n\n\"Okay, stand up. I'll move to the other end of the couch and you can do the other one.\"\n\nJack hesitated for a moment realizing that he had no way of hiding his raging erection from his new boss. He quickly decided that he had no real choice in the matter and stood up.\n\nJess noticed the bulge in his work pants immediately.\n\n\"Oh, well, I guess that makes sense.\" She said.\n\n\"Sorry.\" Jack apologized.\n\n\"Don't be, I won't tell a soul.\" She replied, moving down the couch.\n\nJack laid back down, her hand guiding his head to the fresh breast.\n\n\"That's it, drain me, Jack.\" Jess said, her voice hushed and breathy.\n\nJack suckled at her nipple, trying to savor every drop. His cock ached in his pants, wanting to be set free and touched, but he didn't want to ruin what he had going for him.\n\nJess' head fell back against the couch as her hand ran through Jack's hair. He watched as her breath quickened, a slight moan escaping her lips.\n\n\"She's enjoying this.\" Jack thought to himself, as he increased the pressure behind his suction.\n\nJess gently played with his hair, moaning gently, in a trance like state. Jack took a mental picture of this moment, not knowing if he'd ever have this chance again, with anyone.\n\n\"Nearly there. Just a minute longer.\" Jess said in a whisper.\n\nWithout realizing what he was doing, Jack lifted his hand and gently held the side of her breast. He felt the weight of it in his hand, the soft skin sliding under his fingers. Jess looked down at him, her eyes initially confused, before letting her head fall back into position on the couch, a smile on her face.\n\nJack gently groped her breast as he sucked firmly, rolling his tongue across her hard nipple. Jess shuddered, goosebumps forming across her chest, before she suddenly sat forward, taking her nipple out of his mouth.\n\nJack watched as milk dripped from her nipple, now twice as long as when he had started sucking.\n\n\"Okay, gosh. That is probably enough for tonight.\" She said, using the inside of her bra to wipe at the excess milk dripping from her breast. \"Thank you so much, Jack. You really helped me out.\"\n\nJack got to his feet, his erection still bulging out the front of his pants. Jess was arranging her bra when she looked up and saw his predicament. She looked at her watch and pondered for a moment.\n\n\"I've got about five minutes before I need to leave and catch my train.\" She said. \"If you can finish in that time, you can look at them while you take care of that.\"\n\nJack took a moment to comprehend what she was offering, but as soon as he had grasped the concept, he started undoing his belt. He let his pants drop to the floor and pulled his cock from his pants. His raging erection pointing directly at Jess.\n\n\"Well then.\" She said, looking at his cock. \"It's always the ones you don't expect that have the big packages.\"\n\nJack had always been happy with his cock size, it wasn't porn star massive, but he'd never had any complaints about it.\n\nJack began stroking his cock with ferocity. Not only was he incredibly horny after draining Jess' milk, but he was also on a time limit. Jess lifted her huge breasts, pushing them together for Jack to view as he stroked his cock.\n\n\"This is a one-time deal, so take them in.\" Jess said.\n\nJack could see white drops forming at the end of her delicious nipples as she pressed them together.\n\nIt took only a few moments and he could feel his balls swelling, getting ready to come. Jess smiled her beautifully white teeth at him as they made eye contact, sexuality emanating from her. That was enough to push him over the edge.\n\nJack took a step back, his balls contracting as his rock-hard cock erupted with cum. He hadn't thought about where he was going to ejaculate, he just let the thick white ropes of cum fall onto the floor between them. His abdomen convulsed as pleasure ran through his body, his eyes clenched shut.\n\nHe stood there for a few moments, basking in the afterglow of his orgasm, until Jess interrupted him.\n\n\"Well, you're cleaning that up.\" She said.\n\nJack opened his eyes and saw her buttoning up her shirt, her breast hidden from his view again. She stood up and straightened her skirt, pulling her stockings up her legs a few inches.\n\n\"Thank you very much, Jack, but I need to make my train.\" She said, walking to the door. \"And remember, not a word of this to anyone.\"\n\n\"No, of course not.\" He replied.\n\n\"Good.\" She said walking out of the office. \"You've got a lovely cock, Jack, but clean up that mess before you leave.\"\n\nJack stood alone, his pants around his ankles, trying to come to terms with what had just happened. If it weren't for the taste of Jess' milk in his mouth, he would have thought that he had dreamed the whole thing. He reached down and pulled his pants up, tucking his still firm cock into his pants.\n\nJack found some paper towel from the kitchen and wiped his load of cum from the office floor, disposing of the towel in the bin on the way to the elevator.\n\nJack left the building and walked to his car. He spent the whole trip home reminiscing about what they had done, how her breasts felt in his mouth, the sweet taste of her milk. As soon as he got through the front door of his apartment, he took his pants off and sat on the couch.",
        "He opened his phone and immediately searched for \"lactation porn\", finding thousands of results. He watched them for the better part of an hour, stroking his cock again as he watched women squirt milk from their nipples.\n\nSome drank their own milk, others poured glasses and fed them to men. He especially liked watching women lactate while they were orgasming, there was something so sensual about it. Just as he was about to finish himself off, a notification came through on his phone.\n\nIt was a text from an unknown number.\n\nJack, this is Jess. Just wanted to thank you again. I got home without any pain thanks to you. See you at work tomorrow.\n\nJack smiled at his screen, pleased that he was able to help her out so much. He began typing another message to her when Jess sent a picture through to him.\n\nJack's jaw dropped, his cock springing to life. Jess sent a picture of herself, completely topless, milk dripping out from both of her breasts.\n\nThis is to show my thanks.\n\nJack started stroking his cock again, looking at Jess' massive tits. He couldn't believe that he had been sucking on them just hours ago. He felt the familiar sensation of his balls tightening up, preparing to come, before leaning back and spraying his work shirt with cum. It wasn't a huge load like the one earlier, but it was more than he expected.\n\nJack slowly recovered from his orgasm and removed his cum covered shirt, before picking his phone up and replying to Jess.\n\nThank you! You look amazing in that photo. See you at work.\n\nJack laid back on the couch and slowly drifted to sleep, completely exhausted by his day.\n\nHe was slightly concerned about how tomorrow would go; he didn't know if it would be awkward between them or if it would just be fine. Her sending him a picture of her breasts was probably a good indicator that everything would be fine.\n\nJack fell asleep thinking about Jess' nipple rolling across his tongue.\n\n*\n\nJack walked through the doors of Trig-Corp, swiped his access card, and pressed the button for the elevator. He sipped at his coffee and was pleasantly surprised, it was pretty decent. He wasn't sure if it was the new caf\u00e9 he had tried or if he was just in a good mood.\n\n\"Jacky-boy!\" Vince called out. \"Ready for another day of fulfilling work?\"\n\nVince slapped him on the back, laughing loudly at his own joke. Jack was beginning to wonder if being friends with Vince was more effort than it was worth.\n\n\"You know it.\" Jack mumbled as the elevator opened, the two walking in opposite directions.\n\nJack approached his desk and began setting up, saying hello to his colleagues before heading to the kitchen to put his lunch in the fridge. Just as he was about to enter the kitchen, Jess appeared in the doorway. She was wearing a white top again, this time with black lace around the collar, a blue skirt covering her stockings. Jack's cock started to stir in his pants, just at the sight of her.\n\n\"Oh, hi, Jack.\" She said. \"I sent you an email that I need you to take a look at first thing this morning.\"\n\n\"Oh, Sure thing.\" He replied.\n\nJess walked past him, leaving him to put his lunch in the fridge. Jack was shocked at how professional she had acted after what had happened last night, but he was also thankful that there wasn't any awkwardness between them.\n\nIt was a one-time thing, just like she had said. He helped her in a time of need, and he was rewarded with a picture of her amazing breasts. Now their relationship had returned to a completely professional one.\n\nJack sat back at his desk, a little deflated by the knowledge that their fun was over, but also thankful that he experienced it, and had gained a new fetish to watch online.\n\nJack opened his email and clicked on the urgent mail from Jess.\n\nHis eyes opened wide as he read the message, his cock becoming hard in his pants instantly.\n\nJack, this project is taking longer than expected. I'm going to need you to work late every day this week.\n\nThanks for reading.\n\nBelle"
    ],
    "authorname": "annabellelace",
    "tags": [
        "lactation",
        "femdom",
        "work",
        "office"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/milking-assistant"
}
{
    "title": "Mike & Karen Ch. 21",
    "pages": [
        "A certain dorm room, March 1987...\n\nKaren was humming and singing to herself as she glided around the dorm room, not just tidying up, but making things even prettier than they were before. She didn't take any particular notice of the door opening and her friends coming in.\n\n\"Ooh, someone looks like she's on Cloud Nine,\" Mona said in a sly tone, smirking as she watched her good friend dance almost balletically around the dorm room.\n\n\"Cloud Ten, maybe,\" Karen replied, her lovely, lyrical voice a joy for them to hear.\n\n\"Did you get laid really good or something?\" Janet asked as she leaned against the wall and just watched in amusement, her arms crossed.\n\n\"Forgive me for dropping into the demotic, but no, I did not get laid really good,\" the bronze-haired beauty said, adjusting a vase with flowers that sat on a dresser she shared with Lisa. \"Something better, in fact.\"\n\n\"Y'going to Maui for the break?\" Lisa asked as she put down her bag and sat on her bed, watching her roomie.\n\n\"No, I'll be right here,\" Karen almost sang as she turned and smiled at them all warmly. \"I'll be right here and getting a visit from my dearest and most beloved friend from boarding school - Lady Jennifer Penrose, the heiress to the title of Greymoor...\"\n\nMike &amp; Karen\n\nNOTE: If you follow my stories, this chapter contains many teasers and spoilers for Freja &amp; Jeanie chapter 4, which was published alongside it, and is intertwined. There's context to be had.\n\nDisclaimer: All characters are 18 years of age or older while actively engaging in sexual activity. This story is a prequel/sequel (sprequel?) to my other work, Alex &amp; Alexa. As always, many thanks and gratuitous panty shots from Freja and Jeanie to my long-suffering editor and beta-reader for their assistance in polishing up and improving this work. Reviews are welcome; flames will be snickered at and deleted with extreme prejudice. Enjoy!\n\nPlease Note: There are incest themes with a secondary couple in this story. Just a forewarning.\n\nChapter XXI- Her Bright Smile Haunts Me Still\n\nBlackwell Manor, the present...\n\n\"So lemme get this straight,\" Alexa said as she eased herself into a comfy chair in the main library, sitting with her nephew-husband Alex, her older sister Karen, and her brother-in-law Mike. Fixing drinks nearby was Valentina Prospero, one of the Manor's two housekeepers, and with whom Mike and Karen had an understanding. Alexa thought it was cute. \"Fre and Jeanie went down to L.A. to try and sell that kinetic makeup, totally bunged the whole thing up, and now need our help?\"\n\n\"That is the short version of it, yes,\" Karen said, smiling and nodding at Valentina as she handed her mistress a martini. Valentina was wearing her preferred attire, which was a very well-made but highly scandalous French maid outfit. The black skirt fluttered around her hips, occasionally flashing her panties underneath, while the bodice top enhanced her cleavage delightfully. She worse a black lace choker with a glittering stone fixed on the front around her neck, a symbol of her devotion to her employers. \"But before I expend any energy on explanation, I wanted to know if you two could spend the break doing something other than studying without compromising your grades.\"\n\nAlex shrugged. \"The profs're constantly reminding us they're thankful for all that work last summer; we really saved their bacon, apparently. They've been giving us extra lessons and help. They'd probably give us our diplomas if they could, because we're that far ahead. I'd have to miss a whole semester before I could flunk it.\"\n\nAlexa nodded at her nephew. \"What McWordy said. I can take a week away from the books without blinking.\"\n\n\"Karen and I have discussed it, and since Freja and Jeanie are in need of help, we thought you two should come along, as their best friends,\" Mike continued, accepting a single-malt Scotch on the rocks from Val and nodding his head to her. She smiled almost worshipfully at the giant man and went back to her cart, preparing drinks for Alex and Alexa. \"We'll likely be there for the entire break, and it would probably mean the world to them if you were there as well.\"\n\n\"Not like we haven't pulled their asses out of the fire before,\" Alexa quipped, smirking at the memories from the month prior, when she'd 'loaned' Alex to Jeanie to pretend to be her husband while her overbearing and bigoted grandparents visited. \"And I've never been to California.\"\n\n\"This will be good for your Blackwell training, then,\" Karen mused, sipping at her martini. Valentina was learning quickly; it was surprisingly good. \"While we're at it, we'll visit the wineries that our family owns; it's been a while since I have been down and inspected.\"\n\n\"Jeez, I keep forgetting we own wineries down there, but I remember mom telling me,\" Alexa breathed, shaking her head. \"I dunno how you do it, Kar, keeping all this stuff in line and also doing your own thing at the uni.\"\n\n\"It's called delegating and paying people well, Alli, you'll get the hang of it one day,\" Mike said simply. \"Now if we're going to do this, we need to go tomorrow morning, because the girls are panicking. Make sure you get your animals looked after and any other appointments are postponed, for at least a week. That way, we're covered.\"\n\n\"Well, okay, how're we getting down there? Can we catch a flight on such short notice?\" Alexa queried as she accepted her screwdriver from Valentina.\n\nKaren shook her head. \"In days gone by, we would have just taken the Challenger.\"\n\nAlexa made a wry face. \"We own a Dodge? I'm not one to quibble, but even if we all take turns driving nonstop and pee in bottles, isn't it still gonna take us at least two days each way?\"\n\n\"I, no, Alli...\" Karen said, given pause by her little sister's mistake while Mike and Alex both restrained themselves from laughing. \"I mean our father purchased a Bombardier Challenger 350, a corporate jet.\"\n\nAlexa paused mid-sip, her eyes growing wide. \"We own a fucking jet?\"\n\n\"Blackwell Enterprises does,\" Karen replied, shrugging. \"As chair and CEO, I can appropriate it as necessary. I keep it here in Toronto, at Downsview, just to tick off Roddy, since he has to come to it now.\"\n\n\"We own a jet?\" Alexa asked again, still in disbelief. Alex was giving his wife a look, worried that she was stuck on repeat. \"Like, one of those annoying zillionaire jets?\"\n\n\"I wouldn't say annoying, or zillionaire, but if that's how you care to frame the situation, then, yes,\" her sister said, hoping her little millennial sibling worked through her outrage quickly. They didn't have long. \"It used to be a Challenger, but our progenitor traded it back a few years ago for a larger and more comfy Global 6000. It seats ten comfortably and can get us to California in one jump. We'll take it to Napa and then meet the girls.\"\n\n\"It's not called the Thunderhawk, is it?\" Alexa asked suspiciously.\n\n\"And it's time that we all got a move on,\" Mike announced, standing up since he'd finished his drink and patently avoiding the question posed. Alex followed suit, as did Karen, followed by a reluctant Alexa. \"You two go get your things ready for tomorrow morning and make your pet arrangements. Kar and I will talk to Tatyana. Go.\"\n\nAlex pulled his wife out of the room, with Alexa still muttering to herself. Once they were gone, Mike turned to look at the other person in the room. \"Miss Prospero?\"\n\nDespite standing nearby, Valentina squeaked and stood up straight, her hands folded in front of herself at the sound of his booming voice. She curtsied, making sure she got low enough to show her cleavage. \"Master?\"\n\nKaren smiled. \"We have some questions for you, my dear. Are you enjoying your current position, and all of its considerations?\"\n\nValentina blushed, but also seemed flustered. \"I... Mistress, I...\"\n\n\"Breathe, darling,\" Karen almost giggled, stepping forward and taking the brunette girl's hands in hers and smiling warmly. \"Just answer with complete honesty. Do you like how things are right now?\"\n\nShe was almost flushing crimson, but Valentina swallowed and forced herself to answer with the answers they were actually looking for. \"Yes, Mistress, I... I loved my job before you and your husband became intimate with me, and my... my Master and Mistress. It's only been about a week and change with this understanding, but... it's Heaven.\"\n\n\"Good,\" Karen said, nodding. \"Because you should come with us.\"\n\nValentina blinked. \"I should?\"\n\nHer mistress shrugged. \"Under these circumstances, it might not be a bad thing to have along a personal assistant, if you will.\"\n\n\"What... what will I be doing?\" asked the servant girl. Because that's what she wanted to consider herself, to call herself- their servant. Not just an employee, but something more... personal. She almost craved it.\n\n\"I don't know just yet, but it's better than to be safe than sorry,\" Karen mused. \"Alex and Alli are very likely to be spending a lot of time holding Freja and Jeanie's hands, and it wouldn't be fair to keep pulling them away to take care of things for us, would it?\"\n\nValentina didn't seem to know what to say.\n\n\"There's no wrong answer here, darling,\" Karen said quietly, in a soothing voice that made her servant's knees weak. \"All we want to know is if you want to accompany us to California for a week. If you would rather attend to matters here, that is fine as well. But we thought we would-\"\n\n\"I'll go!\" Valentina blurted, interrupting Karen before blushing furiously and putting her fingers over her mouth. \"Sorry!\"\n\n\"You're fine, Miss Prospero,\" Karen laughed, her voice tinkling like crystalline rain. \"While Michael packs for he and I, I'll get Glenda to take us to a few boutiques to get you some suitable clothes, oui?\"\n\nThe servant girl blinked. \"New clothes?\"\n\n\"Well we can't have you wearing that around in public, can we?\" pointed out her mistress, looking down at the kinky outfit she was almost stuffed into. \"You need clothing that will speak to your assigned purpose. Now if you intend to accompany us, go get into some street clothes and we'll be off. Spit-spot!\"\n\nShe popped Valentina on the behind and the girl squeaked and trotted off quickly to go back to her room and get changed. Mike chuckled and shook his head. \"Think you'll be able to give her up when the time comes?\"\n\nKaren sighed. \"Reluctantly, but isn't that the way of all things? It will be her choice. Until then, I think we can keep her happy.\"\n\n\"Anyone who chooses to move on from you, Gordon, is clinically insane,\" Mike rumbled, pulling her into his arms and hugging her. Karen sighed in deep contentment as she snuggled in close, feeling the world fall away as she was surrounded by his strength. \"God knows, I couldn't do it.\"\n\n\"Then thank God for your weakness,\" she murmured. \"Never go anywhere, Michael DeBourne.\"\n\nHe smiled as he stroked her shining bronze hair and looked down at her. \"You've been thinking about Jenny, haven't you?\"\n\nKaren looked up at him, pretending to frown. \"Why would you say that?\"\n\n\"It's the anniversary of her visiting you on campus,\" he said, caressing her cheek and looking into those bewitching golden-amber eyes.\n\nKaren thought about that. \"Is it really that obvious?\"\n\nHer husband shook his head. \"No, but I am well aware that every March, you tend to think back and remember things in a whimsical way.\"\n\nHis wife blushed and looked at his chest.\n\n\"Kar, you two were so very in love,\" Mike said cheerfully. \"I've never required that you forget everything and everyone else once you chose to spend your life with me.\"\n\n\"I had a choice with Jenny,\" Karen said in a quiet, contemplative voice. \"I had no choice with you, Michael.\"\n\nHe nodded. \"I didn't either, Gordon. And I'm all the happier for it.\"\n\n\"I am too, I couldn't be happier,\" she said. \"I guess we both have someone in our past that could have been, hm?\"\n\n\"That may be, but I have no regrets,\" Mike assured her, not that he needed to. They both knew and understood how deep their devotion to one another was, and how unbreakable it had always proven, even before they could readily admit it. \"And no regrets about the past that brought me to you, or you to me. I'm fully aware that I am happier with you than I could have been with anyone else. I hope you look back on it all as fondly as I do.\"\n\nKaren snuggled in tighter, closing her eyes and speaking with every bit of love that sung in her heart for this remarkable man she had the privilege of being married to.\n\n\"I promise you, I do...\"\n\n***\n\nSt. George Campus, 1987...\n\n\"So, like, she's a real, live countess?\" Lisa asked as she watched Karen moving around the room methodically, checking on things many times over. The redhead was sitting on her bed, feet pressed together and bouncing her knees, as was her habit when she was curious about something she was observing. Her normally supremely in-control roomie seemed to be almost... fussing. \"Are you okay?\"\n\n\"Were you expecting a fake, dead countess? You could lend a hand, instead of leaving me scurryfunging about on my own,\" Karen replied, moving a vase containing fresh orchids in them a millimeter to the left on top of a small table. \"And yes, she is the heiress to the title of Greymoor. Her proper name is Lady Jennifer Penrose. One day, she will be the countess of Devonshire, although right now she's studying business and property management in Perth. After she's done there, Oxford, no doubt. She's a whiz at those subjects; her family's legacy and fortunes will be in good hands with her at the helm.\"\n\n\"I don't think I've ever met a real noble before,\" the girl mused, forgetting to help. \"So, like, do I have to curtsy and stuff when she talks to me, or I talk with her?\"\n\n\"There's a mental image,\" Karen almost laughed. \"Did I ever tell you that if the eldest branch of my family had not emigrated to the colonies, I would probably be a marchioness now, along with several other annoying titles, like countess and baroness?\"\n\n\"Huh, kinda not surprised, really,\" Lisa said, shrugging. \"I mean, you certainly seem like an aristocrat. Is Jenny all princess-y like you?\"\n\nKaren smirked. \"She can be, but she was much more given to flippancy and misbehaviour than I ever was when we were younger. Getting far away from her family allowed her to rebel quite a bit, as long as the school never told on her, which was thankfully rarely. I'm rather convinced you'll all quite like her, she's a gem.\"\n\n\"She must be, since you've been polishing that same spot on the vanity mirror for nearly thirty seconds now,\" Lisa pointed out, giggling. \"Nervous much, Kar?\"\n\n\"I'm not exactly nervous, I'm just very excited to see my Jenny again,\" replied the bronze-haired girl, but she stopped wiping the spot all the same. \"We weren't just best friends, we were a team, an absolute force to be reckoned with, all the years we were together at boarding school. During breaks, she would sometimes come and stay with me at the Manor, and other times, I was allowed to go with her back to Devonshire, to her ancestral home, Heatherly Hall.\"\n\nLisa whistled. \"Tough life. And you said, she's just showin' up here? No fanfare or long cavalcade of cars or anything?\"\n\n\"No, darling,\" Karen laughed. \"Jenny is very spontaneous, and she wanted to just show up here from the airport and see me in my natural environs, if you will.\"\n\n\"These are hardly your 'natural environs,' Kar,\" her roomie almost snorted. \"But I'm glad you like 'em, because without you, I wouldn't even be here, y'know?\"\n\n\"Providence just allowed me to do a good deed, and in return, I got a roomie, a dear friend, and a lover,\" Karen said warmly, smiling at Lisa. \"I think Jenny will be crazy about all three of you, you're her type of people.\"\n\n\"A promiscuous law student, a kooky animator, and a neurotic Jewish lesbian activist?\" queried the redhead.\n\n\"Like I said, her kind of people,\" Karen replied simply as the door opened, allowing Janet and Mona to come in. \"Speak of the deadly sins...\"\n\n\"Sorry, I was back in me room, practicing me Monty Python peasant English,\" Janet quipped, making an overly dramatic bow and speaking in an absurd accent. \"'ow do I sound?\"\n\n\"Like you had a stroke, dumbass,\" Mona said, popping her friend on the butt and making her fall forward on her hands and knees while Lisa and Karen laughed. \"Any idea when her royal highness is due?\"\n\nKaren shrugged. \"Any second now, really. She called from the airport, saying she was jumping into a cab and heading downtown to campus; that was two hours ago. She'll wander until she finds her way up to the room. I'm reasonably certain they'll give her my room number, she's hard to say no to.\"\n\n\"Well, for you, maybe,\" Janet sniffed, looking smug as she stood up and dusted off her sleeves. \"Some of us aren't impressed by titles or titties, y'know.\"\n\n\"Really,\" Karen mused, sauntering forward and standing in front of Janet, her hands on her hips as she smirked. \"Would you care to make a wager on that, Remington?\"\n\nJanet swallowed and shook her head. The last bet she'd lost with Karen ended with her teaching a skinny freshman virgin how to fuck a girl in the ass, with herself as the demonstration dummy. \"Nuh-uh, no way. If you're willing to bet on it, then forget it. She must be a charmer.\"\n\nThere was a light knock at the door. All four girls looked at it.\n\n\"I guess you're about to find out, aren't you?\" Karen said quietly, her golden-amber eyes lighting up. Janet, Mona and Lisa all stood side-by-side and watched as their friend went over to the door and pulled it open.\n\n\"Kat, darling!\" Jennifer Penrose exclaimed as the two girls immediately swept one another into a big hug. They spun in a slow circle, moving into the room, giggling and hugging. The three girls just watched silently as they made squeaking sounds of delight. Mona moved her foot out and nudged the door closed. \"Ohhhh, goodness, it's been too long!\"\n\n\"Three and a half years!\" Karen replied, still keeping her death grip on Jenny. \"And it might as well have been three thousand!\"\n\n\"I know,\" Jenny said as they finally broke the hug but still held hands, standing close and looking into each other's eyes. Mona, Janet and Lisa could see Jenny now, and they had to admit, Karen had been right about her friend, she was wonderful to look at. \"I feel so very awful for being pulled away.\"\n\nJennifer Penrose was tall, nearly as tall as Karen, maybe an inch shorter. She wore her blonde hair up in a carefully done chignon and her light brown eyes danced with delight. She had a graceful face, with patrician cheekbones and a delicate chin. Her short brown coat had a white fur trim on it, and it was open, revealing a snug cashmere sweater over a large bust. She was wearing expensive form-fitting jeans that showed off her hips and shapely legs. Calf leather boots that tapered just over her ankles completed her look.\n\nNo doubt about it, this was a remarkably attractive young woman.\n\n\"I cannot believe you live here on campus!\" Jenny breathed, her voice calming down so that they could hear how she actually spoke. She had what Lisa could only describe as a posh English accent, like Mary Poppins or what she figured the Queen sounded like, if she paid attention to that sort of thing. \"You must have so much more freedom here than you would back at Blackshack!\"\n\nBlackshack? Mona wondered. Oh, she must have meant Blackwell Manor, a name Jenny and Karen had no doubt given the place. Fair enough.\n\n\"I cannot begin to tell you how much more,\" Karen said jubilantly, trying not to bounce and still holding Jenny's hands. \"Nor could I begin to tell you how wonderful it is to hear Received Pronunciation again.\"\n\n\"With any luck, you've missed it as much as I've missed hearing rhotacisms unmarred by Devonian carrot-crunching,\" Jenny replied, squeezing Karen's hands, her eyes shining.",
        "\"Hmmm, is that all you've missed about me, is my rhotacisms?\" Karen asked, smiling slyly, her body edging closer to her friend's.\n\n\"Oh, not even close, lovey...\" Jenny purred as they lapsed back into a very sensual embrace and their lips pressed together in a deep kiss. There was a burgeoning silence for several seconds, punctuated only by the wet sounds of Karen and Jenny's tongues finding one another and the two girls moaning gently.\n\nMona, Janet, and Lisa all just watched, rather at a loss as the reunited friends continued their deepening kiss, bodies pressed together and their hands wandering down to gently clasp one another's behind. Whatever Karen might have told them about Jenny, they hadn't really expected this.\n\nThen again, this was Karen they were dealing with, so maybe they should have expected something exactly along these lines. They had no excuse.\n\n\"Mmmp,\" Jenny finally murmured, ending the kiss and stepping back slightly, turning to look at the other three girls in the room and blushing somewhat. \"Forgive me, ladies,\" she said quietly, wiping at the corner of her mouth with her finger. \"Kat has a way of bringing out the badly behaved girl in me, and she always has.\"\n\n\"Kat?\" Janet asked, tilting her head slightly.\n\n\"Yes, darling,\" Jenny said, nodding and gesturing to Karen, who was now standing beside her and trying not to smile, like a girl who had just done something deliciously wrong. \"Her name is Ekaterina, after all, hence, Kat.\"\n\nMona gave Karen a wry look. \"Y'mean we should've been calling you Kat all this time?\"\n\n\"You do and I'll mop the floor with you,\" Karen said in a firm tone, causing Mona to drop the query.\n\nJenny smiled. \"I take it you three are allowed to call her 'Karen', is that it?\"\n\nLisa shrugged. \"She gets called Princess more than anything.\"\n\n\"I'm delighted to hear that, because that is exactly what we all called her back in school!\" Jenny laughed, clasping her hands together. \"But where are my manners? Forgive me, ladies! I am Jennifer Penrose.\"\n\nShe stood in front of Mona and took her hands in hers. \"Mona Bresciani, yes? You're studying to be an animator.\"\n\nMona nodded, trying to not look surprised. \"I... yes?\"\n\n\"I'm sure you're every bit as good as Kat says you are,\" Jenny replied, pulling Mona into a hug. Mona's eyes widened for a split-second, but then she hugged back, loving how genuine and warm Jenny was. The blonde then turned to Janet, smiling slyly. \"The lawyer, Janet Remington. Kat told me to talk to you only sparingly, or I'll have no morals left.\"\n\nJanet favoured Karen with a sour look. \"Thanks, Princess.\"\n\n\"Worry not, love, I would need to have morals before you could drive them from me!\" Jenny laughed as she pulled Janet into a hug. The brunette laughed and hugged her back readily. This girl was already so much fun to be around.\n\nJenny now turned and smiled warmly. \"Lisa Heyman, my dear girl. Activist, feminist, and champion of the downtrodden... can it be that you might make friends with a member of the stodgy elite, like myself?\"\n\nLisa flushed slightly. \"Do I... do I have to curtsy to you when we speak?\"\n\nJenny tilted her head at Karen. \"Do you when you talk to Kat?\"\n\n\"Well, no,\" Lisa replied, frowning.\n\n\"Then I insist on no treatment you do not already give to her,\" Jenny announced, nodding regally. \"Most certainly you do not need to curtsy.\"\n\n\"Oh, good, because I'm a total klutz and I'd just fall over constantly,\" Lisa said, causing the British girl to laugh gaily and pull her into a warm hug. Lisa tried not to notice how big Jenny's breasts were, squashed to her this way.\n\nOh, jeez, Lisa thought to herself. If I feel these tits on me much longer, I'm gonna need to visit the showers with the detachable heads...\n\n\"But I simply must find out more about all of you,\" Jenny exclaimed, stepping back to stand next to Karen and looking at them all joyously. \"We should all go and have dinner somewhere, somewhere posh! Kat is buying!\"\n\n\"Hey now,\" Karen said, giving her friend a look. \"Me?\"\n\n\"Well, you are my host, it is only proper,\" Jenny pointed out, winking at Karen. \"And these three girls deserve great honours if they are going to be putting up with the two of us for the next week.\"\n\n\"Well, no argument there,\" Karen sighed, nodding. \"Ladies, get dressed to go somewhere nice. Jenny and I will meet you in the foyer in fifteen. Off with you.\"\n\nJanet and Mona both hugged Jenny again before hurrying out, followed quickly by Lisa, who grabbed her favourite dress out of the closet, along with her makeup kit and coat. She hugged both girls and then was gone, closing the door behind her, leaving Karen and Jenny along in the room.\n\nAfter some seconds, the two turned and looked at each other, standing close. They could feel their hearts pounding, saw the look in one another's eyes.\n\n\"Your breath, it smells like roses,\" the blonde murmured, thrilled that her Kat still ate rose-scented pastilles. \"How on earth do I keep my hands off you for the entire time that we're out?\" Jenny asked quietly, feeling her fingers tremble. \"Kat, it's... it's been three years, Australia is so far away, and I've never stopped... I've never stopped loving you.\"\n\nKaren stepped closer still, so that their faces were inches apart, her golden-amber eyes shining. \"I've never stopped loving you,\" she breathed. \"I don't know if I even could if I tried.\"\n\nHer hand gently cupped Jenny's cheek, and the blonde shivered, her eyes glassy.\n\n\"And tonight...\" Karen said softly. \"... tonight, I'll show you exactly how much I've missed you, and how much I still love you.\"\n\nThey kissed one another then, and the past three years apart just melted away as they found themselves in each other.\n\n***\n\nBlackwell Manor, the following morning, present day...\n\nThe entire staff was lined up on the landing, bidding a formal (if only temporary) farewell to their employers, not to mention one of their own.\n\n\"Now don't forget, Tril,\" Valentina said, holding her co-worker (and hostage bestie) by the hands. \"Y'gotta get right up under Lady Thunderhawk's boobs with the shammy duster, because she can get buildup under there quickly. And in Mr. DeBourne's and Ms. Blackwell's suite, there's the-\"\n\n\"I remember, Bubbles, we've been over this like six times already,\" Trilby sighed, smiling wanly. \"I promise, I've got you covered.\"\n\n\"Eeeee, I'm gonna have fun, but it'll be great to get back to you!\" Val squealed as she gave the hippie girl a squishy hug. Trilby's eyes widened somewhat, but she returned the gesture, knowing the hug was unlikely to end until she did. She also somehow managed to keep from snaking her hands down and clasping Valentina's pert, wiggling butt.\n\n\"There's no particular instructions that are out of the ordinary, so we'll just keep in touch,\" Mike said to Tatyana, whom he towered over. He was glad that the disparity in their size didn't seem to bother her. \"Just inform us of any visitors and progress on Jordan's cottage. I think it means even more to my wife than it does to him.\"\n\nThe seneschal nodded dutifully. \"I promise you, sir, upon your return, everything will be as you left it, if not somehow better.\"\n\n\"What more could a man ask for?\" Mike laughed.\n\n\"Okay, so here's his list,\" Alexa said, showing Theresa the menu she'd prepared for her cat, Morgenmuffel. \"It's sorta based on the food he seemed to like at the shelter, but I'm trying to put some weight on him, so tuna and pork belly mixed into his melange is a good start, not to mention the omega-3's are good for putting a shine on his coat.\"\n\n\"I'll try to put a few kilotons on him in your absence, dear,\" the chef said cheerfully before looking at Alex. \"And for your boys, sir? Blurgle and Grundle?\"\n\nAlex considered. \"Just give 'em a tablespoon of finely minced veggie table scraps once a day, and maybe some peanut butter. If you think they deserve a treat, drop it on the floor and scrape it up first.\"\n\n\"Gross, Alex,\" Alexa giggled. \"Why would you do that to them?\"\n\nHe shrugged. \"They're hermit crabs, they probably don't even have taste buds.\"\n\n\"I promise you, my dear, I shall keep an eye open for your new owl friend, Annwyl,\" Jordan assured Karen, nodding as he kept his hands on her shoulders. \"I shall send pictures and video, now that you have shown me how to use one of those infernal cellphone devices.\"\n\n\"I hope so, Jordan, I am so excited to know that Ty's line has continued,\" Karen said, smiling. \"It means so much to me after all these years.\"\n\n\"Let's go, lords and ladies,\" Glenda called out from the curb, where she was standing in front of the Maybach at the driver's door. Dressed in her smart but form-fitting dark grey suit, and her little cap worn over her honey-blonde hair, she looked every bit the dynamic chauffeuse that fit the family's image and style. \"California has this thing called earthquakes; you never quite know if it'll be there when you arrive.\"\n\nEveryone laughed and said their final goodbyes before the family headed down the white stone steps toward the waiting car. Glenda opened the doors for the ladies, allowing Karen and Alexa to get in first, which had been her instructions from Mr. DeBourne: at all times, the girls first. She then allowed Mike and Alex in, closing their doors before bringing Val around to ride shotgun, up front with her.\n\n\"Mio Dio,\" Val breathed as she slipped into the incredibly cosseting passenger's seat. \"I've been carted around in a few limos before with some employers, but nothing this posh. This seat is like butter.\"\n\n\"I've been waiting to try this bad boy out, and now I have the opportunity,\" Glenda said to her co-worker before turning her head to speak to her passengers. \"We're on our way. Do you want me to put the screen down, sir? Ma'am?\"\n\n\"Only if you two need to gossip, we can always use the comm,\" Karen said pleasantly. She and Mike were sitting in the farther back seats, facing the front, while Alex and Alexa faced them. Alex was dutifully taking a bottle of champagne out of the chiller, along with some glasses, since Glenda had put them there earlier.\n\n\"And Glenda?\" Mike added, getting her attention. \"No rush, take your time. After all, we'll be gaining three hours when we get into Napa.\"\n\n\"Yes, sir. We'll be in touch!\" Glenda said before activating the privacy screen. Once it was up, she sighed happily and pulled around in the circular driveway. \"That was really nice of them.\"\n\n\"Well, whatever it is they did, I'm sure you're right...\" Val replied, shrugging. \"... what did they do?\"\n\n\"Mr. DeBourne is letting me drive the big car and enjoy it, saying they're in no hurry to get to the airport. If I wanted to get there, it could happen in twenty minutes. If they're not in a rush, we'll take an hour, which'll let me get a feel for her.\"\n\n\"Huh, I should've brought some mineral water with me, then,\" Val mused.\n\n\"Open the top of the island between us, hun,\" Glenda said as she pulled onto the Bridle Path, patting the soft leather with her hand. Val did as instructed, and was rewarded with finding a few bottles of sparkling water. She squeaked happily and opened one for herself and another for Glenda.\n\n\"That's a good look on you, by the way,\" the chauffeuse mentioned, referring to Val's attire. The brown-haired girl was wearing all black clothing, the pants having a slimming effect that made her legs look longer, and a black cashmere sweater that fit snugly over her bust. Black pumps encased her feet and she was carrying a smart-looking attach\u00e9 case. Around her neck, she'd retained her black lace choker with the glittering stone, a subtle sign of her station. The rest of the clothes she's bought earlier with her mistress were in a suitcase in the trunk.\n\n\"Oh, uh, thanks,\" she said, blushing a little. \"Mrs. DeBourne certainly has an eye, doesn't she?\"\n\n\"That's become apparent recently,\" Glenda said, winking at her co-worker. \"Congratulations on your promotion, by the way...\"\n\nNow Val really blushed. \"It's not... it's not like that, y'know that, right?\"\n\n\"Honey, relax, I'm teasing,\" Glenda cooed. \"Everyone has it figured out, and nobody cares. If you're happy, we're happy.\"\n\n\"The important thing is if they're happy,\" Valentina said.\n\nGlenda almost snickered. \"Val, let me tell you a great truth about our employers: if Karen and Michael DeBourne are unhappy about something, you'll know it.\"\n\nVal couldn't help but giggle.\n\n***\n\n\"Champagne in a fully decked-out limousine, on my way to an airport where my family's privately owned business jet is taking me to California on a moment's notice,\" Alexa sighed as Alex filled her crystal champagne flute. He smirked when he noticed that Glenda had grabbed a few bottles of Krug Clos. Thankfully, his mother was less uptight about these issues nowadays. \"I am the world's worst proletarian.\"\n\n\"Where did you even get a notion to try and become one?\" Karen asked, looking at her younger sister and sipping her bubbly. Hmmm, Krug Clos. Nice. \"You certainly didn't from mom.\"\n\nAlexa shook her head. \"I have no idea how she pulled it off, Kar. She was such an activist and this bohemian hippie-type, but she was so elegant and posh when it suited her, y'know? She could fight for people's rights in a baroque ballgown and no one would've thought it was weird.\"\n\n\"Well, I get that from her,\" the older sister pointed out. \"I'm assuming your Doctor Kropotkin leanings are the result of peer pressure.\"\n\n\"Hey now,\" Alexa protested, making a wry face. \"I was always the trendsetter, thank you, and above peer pressure.\"\n\n\"Then we're back to square one,\" Karen pointed out. \"So explain your proletarian sympathies. I can explain mine; look at my giant peasant husband.\"\n\n\"I can't, this is all still new to me,\" the blonde goddess sighed, sipping her absurdly expensive glass of champagne and trying to regret enjoying the taste but failing miserably. \"I have a suite of rooms, I have a boudoir, I own cars, wineries, a jet...\"\n\n\"Better not tell her about the yacht,\" Mike whispered to Karen.\n\nAlexa's eyes flicked over to her brother-in-law and she seemed shocked. \"A fucking yacht?!\"\n\n\"Thank you, Hagrid,\" Karen said dryly to her husband. \"Now we'll have to smear jam on her nose to calm her down.\"\n\n\"I thought you didn't know anything about Harry Potter,\" Alexa said suspiciously, looking at her sister.\n\n\"No, you assumed that I didn't, that's a different thing,\" Karen replied. \"A terminal flaw in the millennial psyche, thinking nothing interesting happened before 1982, and nobody had a brain.\"\n\nAlexa leaned back in her seat and took another sip of her distressingly delicious champagne. \"Good thing you told Glenda to take it slow, I'm gonna want a few glasses of this stuff...\"\n\n***\n\nBack at the Manor...\n\nTatyana addressed the stuff, who were all standing in a line in the foyer. \"So, we possibly have a week, but five days at a minimum. What can each of you do to make this place even more perfect than when our employers left?\"\n\nAndrea shrugged. \"I could continue to OCD rig my new pipes in the basements. It won't make a difference up here, but it'll cut down on the amount of time I spend futzing with things, so there's an efficiency.\"\n\nDave spoke next. \"The ground is soft enough in plot six that Tunde and I can get the wooden forms into place and start getting the gardens around Mr. Winson's cottage readied. We're also installing new charcoal filters in the vents out of a certain greenhouse.\"\n\nSeveral of the staff members chuckled at that statement.\n\nTatyana looked at the young cyberguru next. \"Mr. Jaffe?\"\n\nAri considered. \"I send nightly reports to Mr. and Mrs. DeBourne about the security links, so I'm not likely to surprise them with anything. But if I pull off any optimizations, I'll let you know.\"\n\nMarie spoke next. \"The Z\u00e9phirine Drouhin roses are starting to grow, and I can begin shaping them for climbing on the trellises that David and Tunde are building. Madame DeBourne's irises are coming into a healthy bloom, so I shall have vases with cuttings placed around before they return.\"\n\nTatyana now glanced at her chef. Theresa smiled. \"And I'm phasing out the winter menu items and herbs in favour of a spring selection. Maybe we can welcome them back with a special spread? Until then, I suggest you all help me in disposing of the winter stock, and what's left can be composted. Hopefully Mr. Morgenmuffel will have gained some weight upon Miss Blackwell's return.\"\n\n\"And the Brothers Cruncheon?\"\n\nTheresa sighed. \"I'll go start smearing peanut butter on the floor, per the young master's instructions.\"\n\nMore laughing.\n\nTrilby was last to speak, and she shrugged. \"Bubbles'n I had this place pretty spotless before they took off, so I'm pretty sure I can keep it that way. I dunno how to improve on spotless.\"\n\n\"With the possible exception of Andrea, this sounds like a very easy week,\" Tatyana mused, her hands folded in front of her, as was her habit. She was wearing her customary two-tone grey skirt suit. \"Enjoy yourselves, but do not become lax, because even in their absence, you never know when we might have a visitor to impress. Dismissed.\"\n\nThe staff members all went their various ways, and Tatyana began wandering the main level casually, looking for something. It was in a smaller reading room that she found Jordan comfortably ensconced in a plush antique chair, reading an old book and listening to quiet music.\n\n\"Do not stand, sir, please,\" she said, holding up a hand as Jordan made to rise upon seeing her. \"It is not necessary. You are part of the family, we both know it.\"\n\n\"As you will, my dear,\" Jordan said, relaxing back into his chair. \"I hope you can forgive my abrupt disappearance once they had departed, these old bones need to sit after a long day.\"\n\nTatyana smiled. \"It has been a long day for you already, sir, getting them ready like that. But it speaks well of their character that they are willing to just drop pretty much everything to go and help their friends personally.\"\n\nJordan nodded. \"They have always been that way, and I do not see it changing as the generations progress. I wish I still had it in me to be quite so helpful these days.\"\n\n\"Mrs. DeBourne mentioned that you have put on weight since Theresa began feeding you,\" Tatyana pointed out. \"Before long, you will need to be exercising to get all the fat off.\"\n\n\"I have always been on the thinner side, my dear. I doubt even Ms. Martin's excellent food will do more than hide my bones.\"\n\n\"Might I offer an objective observation, Mr. Winson?\"\n\nJordan nodded.\n\n\"We are all very thankful that you are a part of this family, sir, even if you're not a blood relative of these remarkable people.\"\n\nHe smiled. \"That makes all of us, Ms. Orlova.\"\n\n\"And we all think that what they are doing for you, giving you that splendid little cottage to call your own, is so very generous. But... since the staff has been hired and you have stepped back from instructing me about what I am to do here, well... for lack of better words, you just seem to be rattling around.\"\n\nJordan said nothing.\n\n\"And when you move into your marvellous little cottage, I fear you might just rattle around there, too,\" she continued. \"And based on what I know of you, via observation and what I have been told, this would not suit you, even in trying to enjoy your golden years. Some people are just not meant to sit contentedly in a rocking chair.\"\n\n\"While I appreciate the concern and the sentiment, my dear, I find it unlikely that I could be employed at my age,\" Jordan said. \"And there is precious little for me to do here, I fear. At least, from a productive point of view.\"\n\nThe seneschal shrugged. \"Come the season, you will have whatever gardens you wish. Mrs. DeBourne mentioned to me that you had something of a green thumb. And while I am not positing that this would be enough, it is a start.\"",
        "\"Perhaps,\" he allowed.\n\n\"And you must have hobbies,\" Tatyana reasoned. \"You have time to devote to those, whatever they may be. The lady of the house mentioned you might write an autobiography, which would be quite fascinating, given your experiences. And we both know that you will doubtless receive visitors, with Mrs. DeBourne on the list every day.\"\n\nJordan smiled at the thought. Tea and cocoa, just like old times, with the young woman who had meant almost everything to him.\n\n\"And who knows,\" she ventured. \"Maybe you will have the opportunity to find a significant other.\"\n\nJordan raised an eyebrow.\n\n\"You know, a girlfriend,\" Tatyana said. \"Or a boyfriend, if that is your preference.\"\n\n\"And what, exactly, would an eighty-seven-year-old goat like myself have to offer a partner?\"\n\nTatyana looked around the richly-appointed study for a moment and smirked. \"Mr. Winson, there are no eighty-seven year-old goats like yourself, given your circumstances. If people as wonderful as the DeBournes are so very devoted to you, then you must be a seasoned catch. You own a wonderful little cottage, and the resources of the Blackwell empire are at your beck and call. If I asked Mrs. DeBourne what she owed you, she would say everything.\"\n\nJordan was silent.\n\n\"What if she's telling the truth?\" Tatyana asked quietly.\n\nShe nodded respectfully, turned, and walked out of the study. Jordan sat quietly, thinking about everything that she'd said. Could there really be more than just rattling around? Even though he was surrounded by loved ones, was he really just meant to exist comfortably until his time had come?\n\nA sweetheart?\n\nJordan smiled and nodded to himself. Well, why the Hell not? he mused cheerfully.\n\nIt felt good to be alive.\n\n***\n\nAfter dinner, a pub just off campus, 1987...\n\nThe girls were sitting around a table in a dark corner, laughing riotously as Jenny regaled them with tales of her escapades with Karen back in boarding school. Karen had her habitual absinthe drink, while Jenny was drinking a brown English beer. Mona was sipping her champagne, and Janet had a cosmopolitan. Lisa, ever finicky, simply had a glass of cabernet.\n\n\"No, I am not kidding,\" Jenny replied, her hand slapping lightly on the table, her brown eyes dancing. \"No sooner had I run the principal's knickers up the flagpole than half the faculty came charging around the corner, looking for the culprit!\"\n\n\"Omigod,\" Mona giggle-gasped, her hands on her face. \"So you and Kar got caught?\"\n\n\"Oh, no no no,\" Jenny said, shaking her head. \"They somehow all managed to miss seeing Kat there and her involvement. I was due for a good stiff punishment, and even my dear Kat's intervention was not enough to prevent it.\"\n\n\"What did you do?\" Janet asked, looking at Karen.\n\n\"I insisted that I had been a partner in the caper, but nobody believed me,\" Karen said, shrugging. \"They thought I was just trying to stick up for my friend.\"\n\n\"So Jenny got punished and you didn't?\" Janet queried. \"Hardly seems fair.\"\n\n\"Oh, Kat got punished,\" Jenny answered, smirking at Karen. \"She was punished for lying, got two day's solitary.\"\n\n\"Oh, Jesus,\" Mona laughed. \"And you?\"\n\n\"Oh, just the usual caning,\" Jenny said mildly, shrugging. \"By then, it was almost a kink for me. You have no idea how hard it was after each crack across my bum not to say in a breathy voice 'Harder, mummy...', just to drive them crazy.\"\n\nThe three girls burst out laughing, and even Karen tittered behind her hand at the memory. They'd been here for almost an hour now, and they were having the time of their lives, just sitting and enjoying laughing and talking. It had always been like this when the two of them were together. They played off one another and made everything merry. She'd missed it.\n\n\"You must've gotten more beatings than just about anyone else from the sound of it,\" Lisa posited, holding up her empty glass for the waitress to see and indicating another.\n\n\"Possibly, except for maybe Kristen Pullman,\" Jenny mused, swirling her dark beer around in the mug she was holding. \"But I was one of the more hated girls in school, and not merely because I was attached at the hip to \u00e9toile, here.\"\n\n\"Whassat mean, anyway?\" Lisa asked, trading her empty glass for her new drink. She could have as many as she liked, since Karen was paying, according to Jenny.\n\n\"It means 'star', dopey,\" Mona said, giving the redhead a wry look. \"It's French, how do you not know that?\"\n\n\"I know it's French, and I know what the word means,\" Lisa shot back. \"I was askin' how it was used in this context. Why did Kar get called \u00e9toile?\"\n\n\"Because that's what the best student at St. Evangeline's Academy For Young Women was called,\" Jenny explained before Karen could somehow downplay it. \"If you had the best marks, participated in extracurriculars, and were a model lady, then you were \u00e9toile, the pride and joy of the school. And the most hated, envied, and beloved girl on campus, all at once. Kat was \u00e9toile every single year she attended.\"\n\n\"There's a big surprise,\" Janet muttered. \"So basically nothin's changed.\"\n\n\"Seemingly not,\" Jenny laughed. \"Oh, I yearned to be as popular as Kat, but alas, she was the best at everything. Academics, dance, sport, etiquette... I think only I ever loved her without also hating her.\"\n\n\"Don't let Jen fool you,\" Karen interjected, pointing with her absinthe glass. \"She was a very close second in just about every subject. Had I not been there, she would have been \u00e9toile, without question.\"\n\n\"So despite all the misbehaviour, you still excelled,\" Mona mused.\n\n\"Well, I couldn't let Mary Poppins here be hated all on her own now, could I?\" Jenny giggled. \"Yes, I was rather hated too. The girls all knew of my background of course, and in the manner of privileged young women everywhere, twisted my title into a horrible moniker. They called me 'the Cuntess'.\"\n\nLisa spasmed and spit her wine on the table as she began laughing hysterically, which led to Janet, Mona, and Jenny laughing at her. Karen just smiled, rolled her eyes, and shook her head. She couldn't imagine not treasuring these memories so very far in the future, and hoped to have many, many more like them.\n\n\"They stuck me with Kat, of course, hoping that her excellence and good behaviour would rub off on me,\" Jenny continued, putting a dainty finger in the air and ordering another brown beer. \"And while she often enabled my wayward actions, she did have a somewhat moderating effect on my vices.\"\n\n\"Here we go with this again,\" Karen sighed, shaking her head.\n\n\"Do you know what she did? What I gave up for her?\" Jenny said, leaning forward. \"When we were in grade ten, I decided to take up smoking. I thought it would be cool. But Kat put a stop to that instantly.\"\n\n\"Oh my God, you too?!\" Janet blurted, her eyes widening.\n\n\"Just so,\" Jenny confirmed, nodding. \"She told me to cease and desist at once, or she would never kiss me again. If I intended to taste like some Devonian ashtray, she would not find out.\"\n\n\"Did you tell her to get lost?\" Janet asked rather intently, looking for validation.\n\n\"No, I folded like a house of cards,\" the blonde admitted. \"I may have wanted to smoke, but I would have died without those kisses, ladies.\"\n\n\"Dammit,\" Janet muttered, folding her arms and scowling at the table before looking at Karen, her hopes dashed. \"Princess, you're such a control freak. Seriously, can't you let someone smoke?\"\n\n\"By all means, just not around me,\" Karen said simply. \"I didn't make her stop, I simply gave her a choice. I happen to think she made the right one.\"\n\n\"Oh, I know I did that, lovey,\" Jenny purred as she sidled into Karen and kissed her, the two girls closing their eyes. Janet, Lisa, and Mona waited for several seconds, watching quietly before Mona cleared her throat, which cause the two girls to break apart reluctantly.\n\n\"Could you two save some of that for when I have my sketch pad handy?\" Mona said, her chin resting on her hand. \"It'd make good source material for my Frank Frazetta-style art... or maybe Wally Wood.\"\n\n\"She has a point,\" Karen sighed. \"We may be in a dark corner, but roving eyes can still-\"\n\n\"Awriiiiight!\" said a rather drunken male student, leering as he staggered up to the table. \"Li'l lezzie action is awesome! How 'bout we-\"\n\nHe didn't finish the sentence before Jenny had stood up and slapped him across the face, a loud crack that caused everyone nearby to look suddenly. Mona, Janet, and Lisa all looked shocked at what their new friend had done. Only Karen didn't seem surprised.\n\n\"Insolent boy!\" Jenny said harshly, her brown eyes flashing. \"How dare you?!\"\n\n\"Whu-? wha-?\" the guy stammered, his cheek turning red and his confusion growing. What had just happened?\n\n\"I am the Countess of Greymoor, and you have insulted me!\" Jenny hissed, glaring daggers at him. Except for the music over the speakers, everything had gone silent across the pub. \"Give me one reason to not hang your head from the walls of Heatherly Hall! Or on a pike!\"\n\nThe boy's mouth was moving, but no sound came out.\n\n\"Speak, you wretched peasant!\" Jenny almost shouted.\n\nBefore he could say anything, Jenny had grabbed him by the shirt, bunching it in her fist, and pulled him close, almost nose-to-nose with him.\n\n\"Let me be clear, little boy,\" she said in a quiet but deadly tone. \"You have exactly three seconds to exit this pub and never darken my life again, or I will knee you in the clankers so hard that you'll be tasting them for a month. Am I achieving clarity?\"\n\nPale with fright, the student nodded.\n\nJenny shoved him away roughly, sending him spinning toward the door. \"Get thee gone and take due thy place!\"\n\nThe student staggered out the door in a hurry. Everything was still silent as the entire population of the pub stared at Jenny. She didn't seem bothered by it. She simply shrugged. \"Sorry for the disturbance, folks. I am indeed the Countess of Greymoor, and to make up for my outburst, my friend Kat here will buy everyone's next round. Have at it!\"\n\nA general cheer went up from the patrons as Jenny sat back down, looking very pleased with herself.\n\n\"And that, ladies, is how you deal with cretins when you do not have piercing golden eyes in your arsenal,\" she said as she resumed drinking her beer. \"Not so bad, what?\"\n\n\"Holy shit, Jen,\" Janet breathed. \"You're nearly as scary as Princess when you're pissed off.\"\n\n\"And now you know why we were such a force to be reckoned with at school,\" Jenny agreed. \"I can think of maybe three occasions during my time at Saint Evangeline where Kat resorted to physical force to solve an issue. I was more of the 'three times a week' sort of girl.\"\n\n\"And despite this, you somehow always managed to bribe people using my money,\" Karen sighed. \"Like your own family isn't loaded.\"\n\n\"Oh, but wire transfers are such a hassle, Kat,\" Jenny pretended to whine. \"Your money was so much closer...\"\n\n\"And I can see things haven't changed,\" replied the bronze-haired goddess, poking her friend on the nose and making Jenny giggle and try to bite the finger.\n\n\"I may die from saccharine overdose,\" Janet muttered, shaking her head as she watched them before looking at Lisa, sitting quietly next to her. \"You okay, Red?\"\n\n\"I'll be fine,\" Lisa said, nodding and taking deep breaths while keeping her eyes closed. \"I just... y'know how I get when boys are being icky.\"\n\n\"Oh dear,\" Jenny said, looking at Lisa curiously. \"Do we have to rub jam on her nose to calm her down?\"\n\n\"Beats knockin' her out with a matzo ball,\" Janet replied, shrugging. \"Who knows, she may like it.\"\n\n\"I gotta remember how that looked so I can sketch it when I get back to my room,\" Mona said, frowning at the table and committing Jenny's outburst to memory.\n\n\"So you were basically number one and number two are Saint Eve's?\" Lisa asked, having recovered from her close encounter with an icky boy. \"Were you ever competition for one another? Like rivals?\"\n\nKaren and Jenny looked at one another and then shook their heads. \"No, we were far too compatible to be at odds that way,\" Karen replied. \"We fit together so seamlessly that it began to scare the faculty.\"\n\n\"Wow, a time in Princess' life where she didn't have a rival,\" Janet laughed. \"Must've been terrible for her!\"\n\n\"It's hard to imagine my brilliant Kat having any meaningful kind of rival,\" the blonde girl said, clasping Karen's hand in hers and smiling. \"Am I to understand that there are those at this learned institution who would dare to-\"\n\n\"It's March Break, ladies, I would prefer to not think on the pedestrian matters of school, and instead focus on showing Miss Penrose the best of times,\" Karen interrupted. \"Hopefully, that is not too much to ask.\"\n\n\"Don't worry, we'll give you two plenty of alone time to 'catch up,'\" Janet quipped, smirking and making both Lisa and Mona giggle.\n\n\"Not the least of which is explaining how on earth you have managed to survive Australia without becoming psychotic,\" Karen added, looking at the table and shaking her head. \"I told my parents your family moved to Perth, and they thought it was somewhat bizarre as well. The prestigious Jenny Penrose, trapped in a penal colony.\"\n\n\"They did always like me, as opposed to all those trollops and hussies you normally paraded around,\" Jenny teased, winking at Karen. \"They were no doubt delighted when you made friends with a classy trollop like my own self.\"\n\n\"Ecstatic, I assure, you,\" Karen said, rolling her eyes. \"I've managed to keep my nude modeling for the art department a secret from my father so far, not to mention my personal modeling for Mona and her courses.\"\n\n\"Yes, Kat mentioned that you are also practicing erotic art, as well as your primary field of animation,\" Jenny mentioned, giving Mona a wicked smile. \"I've no doubt that over the course of the week, Kat and I can provide you with endless source material.\"\n\n\"I shudder to think how my dear father would react if he saw those pictures,\" Karen sighed, shaking her head. \"Jordan would be trying frantically to resuscitate him.\"\n\n\"I always did have a soft spot for that man, your seneschal,\" Jenny said wistfully. \"So much more personality than my own father's mutton-head, Reginald. The man has all the warmth of a Coke machine. But Jordan was always such a dear.\"\n\n\"Yeah, we all love Smithers too,\" Janet added, causing another round of snickering among her friends, barring Karen. \"He's so devoted to Princess here. Have you ever seen him completely trashed?\"\n\nJenny's eyes widened slightly. \"Oh, my goodness, no!\"\n\n\"Well we have,\" Janet said almost proudly. \"He was convinced the end of the world had happened and got absolutely hammered, like, sloppy, falling-down drunk. I had to carry him to bed so that Veronica Lodge here didn't kill him.\"\n\n\"I'm not sure my reality could handle a drunk Jordan,\" Jenny laughed. \"That would upset my sense of all that is right with the universe, akin to Kat getting a tattoo!\"\n\n\"I think it's time we three made our way back to the dorms,\" Mona announced, standing up, smirking. \"Those two just keep inching closer and closer together, ladies. I think they need some time alone.\"\n\n\"But I was just getting to know you,\" Jenny protested as the three girls all stood.\n\n\"There's always tomorrow,\" Janet said, shrugging. \"And how much attention are you gonna be paying to what we say when you have your hands wedged against the crotch of each other's pants?\"\n\nKaren and Jenny both withdrew their hands, blushing and looking slightly chastened.\n\n\"C'mon, Red, you can stay with me tonight,\" Mona said to Lisa, smiling. \"At least you'll get some sleep this way.\"\n\nLisa looked at her roomie and her old 'acquaintance'. \"Any idea when we can expect to see you two tomorrow?\"\n\nKaren and Jenny looked at each other and then shook their heads.\n\n\"See ya when we see ya, then!\" Janet announced, waving at them as she turned and headed toward the door, followed by her two friends, laughing gaily. It had been a great night. They were still laughing when they crossed the road and headed back through campus toward the women's dorm.\n\n\"Gawd, I hope they're not loud,\" Janet sighed as they walked into the dorm, shedding their coats. \"It'd really suck to be across the entire length of the building and down a floor and still hear them lezzing it up.\"\n\n\"Dunno what the big deal is,\" Mona said, shaking her head. \"Everyone hears you screaming yourself hoarse every time DeBourne visits your room, or you visit his.\"\n\n\"That's different,\" Janet sniffed. \"He's literally forcing the air out of my lungs by battering them from below.\"\n\n\"Where is our brainy Nephilim, anyway?\" Lisa asked, frowning suddenly. \"I don't think I've seen him since the day before yesterday.\"\n\n\"Back up in the Great White North, of course,\" Janet answered, shrugging. \"Y'know he goes home every chance he gets.\"\n\n\"I'm kinda surprised that you didn't ask to go with him,\" Mona teased. \"Just so you didn't have to do without.\"\n\n\"Not a chance,\" snorted Janet. \"Not even for his dick. They haven't even heard of Madonna or Duran Duran up there yet. They still think the Bee Gees are in vogue.\"\n\n\"Oh, yuck,\" Mona laughed. \"Count me out if they're not even past disco yet! But he hates disco. How does he survive it?\"\n\n\"Search me,\" Janet said, shrugging. \"Probably by eating the person stupid enough to play it in his presence.\"\n\n\"What about his little brother, Josh?\" Lisa asked. \"Doesn't Mike think he's gay?\"\n\n\"Gay as a bag of popcorn,\" said her friend. \"And so the whole family's lobbying to get gay rights and marriage legalized. Hard to imagine it happening up in Kapuskasing, of all places.\"\n\n\"Maybe you should go fight for gay rights,\" Mona suggested, smirking. \"That'd be a big win on your r\u00e9sum\u00e9.\"\n\n\"Gay marriage is probably a lot easier to get public support for if both chicks are hot,\" Janet sighed.\n\n***\n\nBack at the pub...\n\nThey'd slipped inside the little washroom with the 'Out of Order' sign on it, thinking they were very likely to be left alone. They both ignored the rank smell as they kissed feverishly, pressed into one another, tongues plunging and snaking around hungrily. They'd unbuttoned each other's pants and slid a hand down inside, shivering and moaning in delight to find that neither of them was wearing panties.\n\nBoth girls paused as they felt something they hadn't initially expected. Slowly, they withdrew their hands, each of them holding a small, folded note of delicate paper between their fingers. They gazed at the paper for a few moments and began giggling. Of course they'd both done that! When had they ever not prepared little love notes for one another?\n\nBut they would be read later. The notes were inserted in pockets. Then the taller, stronger Karen had Jenny pressed up against the wall, her one fist bunched in the blonde's hair as she massaged Jenny's tonsils with her tongue. Jenny whimpered in pleasure, her free hand squeezing Karen's ass cheek through her snug jeans as the first slipped back inside her lover's jeans. It had been so long...\n\nThe girls moaned into each other's mouths as slender fingers found and teased clits before sliding inside the moist folds of each other's pussies. Karen pushed against Jenny harder, humping her hips against Jenny's hand, trapping it. Her fingernails grazed along Jenny's scalp, knowing her English lover was helpless against the sensation. She was so glad that hadn't changed about her.\n\nThat Jenny hadn't.\n\nThey pushed their fingers deep inside one another while their tongues wrestled wetly, the open-mouthed kiss glistening on their lips and lower faces. It was like no time at all had passed between them. Hips squirmed and humped as they kissed heatedly.",
        "\"Kat...\" Jenny murmured through the kiss.\n\nThey pulled their mouths apart, panting as they stared into one another's eyes, seeing the need there. They withdrew their hands from inside each other's pants and brought them up, spreading and showing the glistening fingers. Slowly, they pressed their palms together and caressed their wet fingers, mingling their essences before leaning in and beginning to kiss and lick them with an ease born of practice and familiarity, a ritual between them that they craved after all this time.\n\n\"We can't stay in here,\" Karen said, her lips brushing against Jenny's as she spoke. \"I need to get you back to my room.\"\n\nJenny nodded, her nose barely touching Karen's. \"I need you to get me there, Kat.\"\n\nThey did their clothes back up with trembling hands, somehow resisting the urge to ravage one another. Without touching again, lest their willpower crumble, they exited the tiny bathroom and walked as normally as they could through the pub, Karen leading Jenny by her hand.\n\nOut in the night, the cold March air washed over them. They both shivered and laughed before running across College Street, delighting in the misdemeanour of jaywalking. They entered the campus, still holding hands as they tried to make it back to Karen's dorm. They began pressing close, not just against the chill of night, but also because they needed to feel one another, the closeness they'd shared and been missing for almost four years now.\n\nThey didn't quite make it back, with Karen pulling Jenny into a narrow laneway between two campus buildings and almost slamming her up against the wall of one and kissing her lover ferociously. Jenny grappled onto Karen, kissing her back with everything she had. They hadn't buttoned their short coats, and their large breasts now pressed together through their sweaters, making them both moan.\n\nThey kissed and fondled each other's breasts, a thrill and relief in feeling them again. They slipped a leg in between each other and began grinding on the proffered thigh. Tongues dueled wetly, steam escaping from their open mouths beneath the pale moonlight above.\n\nSated for mere seconds, they moved out of the laneway and walked as quickly as they could without looking like they were in some desperate hurry. Karen's hand was almost shaking as she pressed on the dark, wrought-iron latch handle that opened the door into the dorm, and then led Jenny inside. There were few people in the hallways, and those who were there saw Karen Gordon leading a very attractive blonde woman along by the hand. If they had questions, they knew better than to ask and just left the matter alone.\n\nThey made to it to the third floor, and down the hall to Karen's room. Jenny waited behind her dear friend, trying not to press into her as Karen worked the tiny key into her door and opened it. Without a word, she pulled Jenny into the room and locked the door behind them. Jackets were flung off as they attacked one another, grappling and kissing almost desperately.\n\nAfter some minutes of kissing, a deep need to feel one another's affection welled up again, and they slowly pulled their lips away from one another and stepped back slowly. They looked into one another's eyes and held each other's gaze as they slowly began to undress. Karen couldn't believe how much her hands were trembling as she removed her light sweater and then her pants, until she was wearing only her shoes. She slipped out of these, setting them aside.\n\nShe stood up, having stepped out of the puddle of her pants, and gazed at Jenny. The blonde had also just stood, having removed her own clothes as well. Silently they looked at each other, before their eyes began to roam up and down one another's fully exposed bodies. Neither woman was truly prepared for what they saw, even though they had dreamed of it for almost four years now.\n\n\"My God, Kat...\" Jenny said in a voice barely more than a whisper. \"You're perfect.\"\n\n\"And your body has become everything I prayed it would,\" Karen breathed, her heart thumping in her chest. Jenny's breasts were almost as large as her own, round and succulent, capped with light brown nipples, a contrast to the dusky pink of her own. Her waist was still trim, and her hips had curved outward in a womanly fashion. Jenny had always worried they would remain somewhat narrow, although Karen never saw the issue.\n\nJenny shaved her pussy smooth, as opposed to Karen, who kept a single, thin strip of coppery-bronze hair just above it. Otherwise, she too was completely hairless. Jenny's tight behind flowed into long legs, strong and supple from playing field hockey and her lifetime of riding horses. Her slender ankles and delicately arched feet were just how Karen remembered them.\n\nShe was so thankful Jenny hadn't gotten the little tattoo on her calf that she'd always talked about.\n\n\"So now what?\" Jenny asked, smiling. \"Do you take me over to that lovely bed of yours and ravage me until dawn?\"\n\nKaren nodded. \"But first... I'm going to draw you into me, and I'm going to kiss you, Jen. Because I must feel that body against mine. I have waited so long.\"\n\nJenny bit her lip and nodded. Karen took her dear friend's hand and slowly pulled her close, not hurrying. They both shivered as their nipples kissed, pausing to savour the sensation. It was so very familiar, and yet so new somehow. Was it simply from their time apart? Was it because of the changes in their bodies since they'd last seen one another?\n\nKaren and Jenny had both been large-breasted while at boarding school, but now those same breasts were somehow even more magnificent still. They moved in closer still, pressing their breasts together, sighing at the delicious, silken-soft warmth. Their flat stomachs touched, and their hips, and then they put their hands on each other's backs, slowly moving them down to their shapely behinds and keeping them there, clasping the cheeks gently.\n\nThey leaned in and their lips met again, kissing each other longingly and pulling closer, yearning to feel one another. They moaned in relief and growing lust as their tongues met once more. Their fingers flexed on the soft, taut cheeks, hips trembling as they pressed close. They could feel each other's hearts beating through their breasts.\n\nOne of Karen's hands glided up Jenny's back and into her hair. Deftly, she loosened two clasp pins and her lover's blonde hair tumbled down in waves, stopping just below her shoulder blades. Jenny moaned as Karen ran her fingers trough her hair, caressing her scalp, still knowing where to touch her to make her delirious with passion and need.\n\nThese were no longer the bodies of girls, exploring and learning how to make love - these were now the bodies of women, and their desires were very well known to each other, despite their time apart. This seemed like the fulfillment of some promise made long ago, and they could now keep it for one another.\n\nKaren turned Jenny slowly, carefully but gracefully, and the two young women moved their legs together in time, walking Jenny backward toward the bed. The back of the blonde's knees pressed to the mattress before she was ready and bent, even while Karen still moved forward. The kiss broke as Jenny tumbled backward with a squeak onto her back, the fall broken gently by the huge, plush mattress. She looked up at Karen and giggled, who was looked back down at her, smirking, and with a hand on her hip.\n\n\"You tart,\" Jenny said in delight. \"You love it when I'm flat on my back, don't you?\"\n\n\"Your natural posture, it has been said,\" Karen replied. \"But I have come over a tad peckish. What should I do about that?\"\n\nJenny smiled slyly and slowly parted her legs, exposing her smooth pussy to her bronze-haired goddess. Her knees were still bent over the side of the mattress.\n\n\"Maybe a little English pudding would do the trick for my lovely Kat,\" Jenny lilted, giving Karen a wink.\n\nKaren knelt now between Jenny's legs, drawing in a breath as she gazed in wonder. She remembered this so very well, and yet it all felt new to her somehow. She could hear Jenny breathing, the anticipation in it. Her heart was thundering in her chest, her naked body warmer with each passing moment.\n\n\"Don't tease me, Kat,\" Jenny murmured, her brown eyes glazed with need. \"Please don't make me wait...\"\n\nKaren took hold of her friend's knees and moved in close, beginning to kiss along her inner thighs. Jenny shivered and laid her head back on the bed, sighing. Karen nipped at the soft skin, remembering how she'd bring Jenny to the brink of desperation before rewarding her. Her fingers gripped the English girl's squirming thighs. She could feel the heat of Jenny's pussy, and see that it was already glistening. A heady aroma she had missed filled her senses.\n\nThe taste of Jenny's creamy skin...\n\nShe couldn't help herself and she suddenly pushed her mouth against Jenny's mons without any warning, desperately needing to taste her, to pleasure her, to make her scream. Jenny shook violently and made a choked gasping sound as Karen's tongue pushed through her folds and deep inside her. Her shaking hands gripped Karen's head and pulled her in closer while she ground her hips shamelessly.\n\n\"Gnnn! Kat!\" she wailed, her whole body writhing now.\n\nJenny's thighs had locked on Karen's shoulders, and the bronze-haired girl put her fingers to good use - they found Jenny's netherlips and spread them, giving the blonde a delicious, stinging stretch while Karen's tongue ventured deeper still. Jenny keened at the welcome sensation.\n\nKaren lapped hungrily, her mind whirling as she realized exactly how much she had missed this. The remarkable bond between them, beyond mere lust or sexual attraction, and beyond friendship... something more primal, deeper, and beyond easy articulation.\n\nShe remembered this taste, but it was also different, more... earthy, somehow. The sweet scent and tang of Jenny's pussy was still there, but there was a deeper, womanly aspect she had known in it before. It reminded her of her female teachers with whom she'd been sexual at Saint Evangeline's. That was it, there was a womanly quality now.\n\nJenny's arousal was wet and cloying on her eager tongue, and her deep moans were all Karen could hear. She withdrew her tongue from inside and snaked it around the blonde's clit, making Jenny shudder as a shockwave of pleasure jolted through her. Karen's long, slender middle finger slid inside the pink pussy while her tongue massaged the throbbing nub just above.\n\nShe tightened her own legs against each other, aware of just how wet she was, feeling it on her inner thighs. She probed harder.\n\n\"Kat... Kat, oh, God, Kat...\" Jenny gasped, her core muscles bunching up and causing her to almost sit up. Her skin was shining now, a rosy pink complexion to it. Her eyes were squeezed shut and her fingers were gripping in Karen's hair, flexing and shaking. \"Oh God, Kat, I'm...\"\n\nShe threw herself back on the bed, her back arching as she pressed her pussy and hips against Karen's face in desperation. She grabbed a plush pillow and jammed it down onto her face before she shrieked in ecstasy, her whole body juddering as the massive orgasm crashed over her.\n\nKaren was relentless, pushing another finger inside Jenny's clenching, throbbing pussy while she massaged her lover's clit with her tongue. Jenny bathed her face in her cum, leading to Karen shuddering and climaxing herself as the taste and aroma flooded her senses. Jenny rocked and gyrated, still screaming into the pillow, bucking wildly.\n\nKaren instinctively knew the moment to stop, and Jenny's legs collapsed around her as she pulled her tongue away from her clit, and her fingers out of her pulsing womanhood. Karen rose as Jenny removed the pillow, gasping for air, and her eyes were glistening, tears on her cheeks from the rapture of orgasm, but also from the sheer wonder and joy of being reunited with the girl she'd loved.\n\nKaren had clambered onto the bed over Jenny in a smooth motion and then laid atop her, their bodies squashing and fitting together perfectly. The two girls wrapped their arms around one another and kissed deeply, both moaning and panting, tongues deep inside each other's mouths. Jenny's legs wrapped around Karen's hips, locking at the ankles, as if she never intended to let go, ever again.\n\nNever again.\n\n***\n\nDown one floor and across the dorm...\n\nLisa was lying on her side on the bed, staring at the wall, wearing her long shirt that she used as her bed clothing. Janet was in the bed as well, lying on her side and facing in the other direction. She'd agreed to keep a tiny light on across the room, since it helped Lisa sleep at night.\n\nThe redhead quietly reached out and pressed her finger against the wall right next to her, drawing the pad of her index finger around it in silent patterns. They didn't mean anything, they were just meant to occupy her mind while she-\n\n\"You're thinkin' about them goin' at it up there, aren't you?\" Janet said quietly, still facing away. \"I can tell, you've slept in this bed with me before, and your breathing is a lot deeper when you're asleep. Not to mention that absurd peeping snore of yours...\"\n\nLisa sighed. There was no point in pretending, obviously. \"Yeah, I guess I am. Or maybe I'm trying to avoid thinking about it. If I go to sleep, I'll end up dreaming about it.\"\n\n\"And you're a lucid dreamer too, so that'd be really inconvenient,\" Janet mused, turning over and facing into Lisa's back now. \"You worried that you're jealous?\"\n\nLisa frowned a little at the wall. \"I... no, I don't think so, I'm just... curious.\"\n\n\"What, like you're wondering what they look like when they're getting all hot 'n' heavy?\" Janet teased now, patting Lisa's bum. \"Betcha they scissor real nice.\"\n\nLisa's frown became a scowl. \"No, perv. That's not it. At least, not entirely. I just... I'm wondering what kinda woman you have to be for Karen Gordon to fall in love with you.\"\n\nJanet thought about that for a moment. \"Y'gotta be Jenny Penrose, apparently. And let's face it, she's kinda awesome.\"\n\n\"Yeah, she is,\" Lisa murmured. \"I'm not upset, and I'm not jealous. I mean, I broke up with Kar before I knew Jenny even existed, and I did it because I knew I couldn't make her happy, y'know?\"\n\nThis drew a snicker from Janet, who then snuggled closer and put her arm over Lisa for comfort. \"Same reason I dumped DeBourne. Yeah, I mean, I said that we just weren't compatible, and that he'd drive me nuts with his nerd things and big brain, but I realized early on that I wasn't being fair, pretending to be his girlfriend. I don't measure up, not in the way he needs. I'm not ready for where life's gonna take him.\"\n\nLisa looked back at her friend. \"That's... kinda insightful and really big of you, y'know? You're the laid-back and 'too cool for school' girl in our little posse, so for you to say that, it...\"\n\n\"I do have some depth to me, thank you,\" Janet protested, giggling. \"Y'make me sound like I'm as deep as a rain slick.\"\n\n\"Oh, y'know I don't mean it like that, you cow,\" Lisa sighed, turning over now and facing into Janet. She put her arm over her friend and they just held one another for some time, lost in their thoughts. Lisa looked up at Janet finally. \"D'you think it's hot to watch?\"\n\n\"Why're you asking me? You're the lezbo,\" Janet laughed, giving Lisa a little shake. \"You'd need to tell me if it's hot. D'you think it's hot when DeBourne is bruising my brainstem with that monster dick of his?\"\n\n\"Fair point,\" Lisa admitted, considering. \"I guess I just am biased and assuming everyone thinks pussy is gorgeous the way I do.\"\n\n\"Pretty sure Princess and the Cuntess agree with you,\" Janet quipped, winking at her friend.\n\nThey both burst into giggles before settling in and falling asleep, still hugging one another.\n\n***\n\nBack upstairs...\n\nKaren and Jenny were lying on their sides, facing down one another's bodies. They both had their legs parted and were kicking and sucking hungrily on each other's pussies, panting and moaning loudly. Karen was sliding her tongue in and out of Jenny's slit while her middle finger was pushing back and forth inside Jenny's puckered knot just behind. Jenny was trembling and whimpering, loving the welcome intrusion, having missed it for so long.\n\nJenny was pleasuring her beloved Karen in a similar manner, snaking her tongue around Karen's throbbing clit before pushing it back inside her tight, wet tunnel. Her finger was also busy, exploring Karen's behind, wiggling and massaging just how she remembered Karen liking it. Her mind spun as she sank in deep enough that when she pressed up with her finger, she could feel the motion with her tongue.\n\nThey couldn't say anything, since their mouths were full of one another, but they didn't need to- the familiar moans and gasps told them everything they needed to know. They writhed and pumped against each other, having fallen back into an old rhythm between them that was as natural as the rising and the setting of the sun.\n\nThe pair pushed deeper and sucked harder, manipulating one another skillfully, a practiced ease between them even as they discovered new delights about each other, brought on by the full blossoming of womanhood, and how their bodies reacted and responded. Lithe forms glistened with sweat from their exertions, limbs trembling as they sought to cum together.\n\nAnd they did, as they knew they would. Their movements became more intense, legs writhing as hips pumped against tongues and fingers. Before long, they both shook violently, screaming into one another's pussies and bathing each other's faces in their sticky, glistening essence. But this did not signal the end of their need for one another.\n\nKaren rolled Jenny onto her back and then scrambled over her, pinning her wrists to the bed and looking down into her brown eyes as she pushed her legs across her lover's. She sank down and pressed their slippery pussies together and they both moaned in relief. They felt their clits kissing and their gooey lips mingling and sliding by one another as they began to undulate, using their core muscles to girl-fuck one another.\n\nJenny stared up into those enchanting golden-amber eyes, like nothing she'd ever seen before. They held her spellbound, they always had. Even as she pumped her hips, she was lost in those eyes. She cursed circumstances for taking her away these last three, almost four years, thinking about how much time they'd missed together, what might have been.\n\nWhat they might have become.\n\nKaren was looking down into Jenny's eyes as she slithered her pussy against her lover's, and she couldn't believe how much she'd missed this, and needed it. She stretched one leg down the bed behind herself, opening her hips more and increasing the friction as she rubbed against Jenny. They both gasped as she leaned down, her large breasts pressing into the blonde's, squashing and jiggling together. Her face was just above Jenny's now, their eyes locked, lost in those beloved depths.\n\nKaren kissed Jenny, both moaning and letting their tongues wrestle and massage, even as their pussies slithered and mingled, the wet, sticky sucking sounds intoxicating to them both. They pumped against one another in a strong rhythm, kissing and moaning in pleasure.\n\nAlmost as if on cue, Karen released Jenny's wrists, and the blonde's arms wrapped possessively around her lover. Karen clasped under Jenny's shoulders, holding her tight as well while they kissed greedily. The pumping action between them was becoming stronger and stronger, neither woman trying to stave off the onrushing climax.\n\nThey kissed one another hard as the mind-shattering orgasm crashed over them both, screaming into each other's mouths and crushing themselves together tightly enough to leave welts on tender skin. Hips juddered and bucked, their pussies slathering each other in cum. They ground and humped as if they were trying to push themselves inside one another, a full minute passing before the rapturous bliss at last began to ebb.",
        "Karen slowly rolled onto her side, but they stayed wrapped up in one another, kissing deeply, legs still locked, and pussies pressed to the point of fusion. Hands wandered and caressed over weary, trembling forms, comforting and loving. The kiss ended and their eyes finally opened, gazing deep into one another's soul as their foreheads pressed together.\n\n\"Welcome back, Jen,\" Karen whispered.\n\n\"Don't you mean 'welcome home', Kat?\" Jenny asked quietly, smiling.\n\nKaren returned the smile, her eyes shining. \"I love you, Penrose.\"\n\n\"And I love you, Ekaterina Gordon...\" Jenny sighed as they kissed again, still not letting go of one another.\n\nThey had no intention of letting go, ever again.\n\n***\n\nDownsview Airport, the present...\n\n\"Yyyyyup,\" Alexa sighed, grimacing as she looked out the window. \"We own a jet.\"\n\n\"Well, technically speaking, as I have already reminded you, the family does,\" Karen corrected, amused by her younger sister's desperate refusal to let go of her outrage. But she'd acclimated to the limo readily enough (not to mention living in a giant Edwardian mansion), and she would do the same with the jet once she was on it. \"It's a Bombardier Global 6000, specifically. With a full tank, it can get us to Los Angeles from Toronto, to Hawaii from L.A., and to Heathrow from Toronto.\"\n\n\"Wish I'd known all this when I first came back, would've spared me a trip on Aeroflot Canada,\" the blonde girl muttered as Glenda drove them closer to the gleaming black jet. They'd passed through security checkpoints easily, listing five passengers heading to Los Angeles. Pilots who were familiar with the Blackwell family had been engaged for this run. They pulled up alongside the terminal, where their final inspections would take place.\n\nAlexa kept staring back at the jet while their effects were inspected since they were heading to another country. She finally turned to look at her family, her hands on her hips.\n\n\"Just so you guys know,\" she said, trying to scowl. \"If we own a submarine, I'm outta here.\"\n\n\"Mom, dad, remember when grandpa got it in his head that he should buy one of the decommissioned submarines from the West Edmonton Mall back in 2012?\" Alex asked, nudging his father.\n\n\"Oh, Lord, don't remind me,\" Karen sighed, shaking her head. \"I'm so glad we talked him out of that in one of his lucid moments.\"\n\nAlexa just hung her head and sighed in despair.\n\nOnce Glenda had departed, they had all their baggage checked and put aboard the storage area, and then the steps were lowered, allowing them to board, with Mike leading the way.\n\n\"I'm not kidding, you two,\" Karen warned as she brought up the rear, accompanied by Valentina. \"Do not ask if you can fly the plane.\"\n\n\"Yes, dear...\" Mike and Alex both mumbled as the stairs creaked and the plane lurched toward them slightly under father and son's combined weight.\n\n\"Oh, wow...\" Alexa breathed as she turned right at the top of the steps and went into the first passenger cabin, gazing at the interior. \"And I thought the limo was fancy.\"\n\n\"Yeah, definitely don't mention the yacht,\" Mike said quietly to Alex, who stifled a snicker.\n\n\"Jeez, you have to tilt your head to stand up in this thing?\" Alexa asked as she watched Mike walk through to the second passenger cabin, to the seats that he and Karen habitually used were, in the spacious middle. He was indeed tilting his head slightly down to the right, instead of ducking.\n\n\"The cabin is two-hundred and three centimeters tall (six feet, eight inches) at its tallest, exactly my height,\" Mike replied as he stopped near his chair and waited for his wife. \"Without shoes, I just fit. It's true, I fit better into planes that I'm supposed to jump out of.\"\n\nAlexa looked at her husband. \"No need for you to grow too much more, 'kay? I don't wanna have to make adjustments to this thing down the road.\"\n\n\"I'll try to refrain, your highness,\" Alex chuckled.\n\n\"Right then, I've spoken with the pilots, they know our itinerary,\" Karen announced as she came aft, followed by Val. \"Once we're in the air, we are looking at a six-hour flight to Napa, assuming no complications. We will be taking off in about fifteen minutes.\"\n\nAlex had not been in this plane often, only two other times, in fact. His grandfather had purchased it for the company the year before he'd died, to replace an earlier model they'd been using. He gestured to the seats or the long couch. \"Where d'you want to sit?\"\n\nAlexa looked back and forth before deciding finally on some comfy-looking seats, two of them, just up and across from Mike and Karen. It felt nice and private to her.\n\n\"Yeah, these things normally have up to sixteen seats, but we removed six to give everyone a lot more room,\" Alex explained, enjoying himself as Alexa gaped at everything. \"We put in that long couch, just in case people were feeling sociable. Last time I was on here, mom let me bring my Seagull on and I got to play and entertain everyone while we headed to Maui. I sat here on the couch with a few cousins and we had fun while the grownups were huddled around in their chairs, conspiring about world domination.\"\n\n\"We were doing no such thing, Alex, stop filling my baby sister's head with your nonsense,\" Karen said loudly enough to be heard, even though she was already ensconced in her window seat and looking out at the tarmac. Mike was sitting across from her, still having plenty of leg room, while Valentina sat in a chair just across from her employers at the other window.\n\nShe turned her attention to the brown-haired girl now. \"Miss Prospero, once we are airborne and given the all-clear, there is a galley just up in front of the first passenger cabin. It has been fully stocked, and you'll be able to make light refreshments for everyone, oui?\"\n\n\"Yes, Mistress,\" Val said, nodding respectfully. She knew that Mike and Karen didn't expect her to stand every time they addressed her, especially at moments like this. \"I will make sure everything is seen to.\"\n\n\"And here, check this out...\" Alex said, pulling Alexa by the hand through the cabin his parents were sitting in and through a sliding door to the back. They emerged into what was clearly a contained media and entertainment room. \"Big enough for five or six people who like each other to sit and watch a big-screen TV.\"\n\n\"Skidegod,\" Alexa said, lapsing into Danish out of habit, gazing around the cabin. There was a couch along one side, and two comfy chairs set on angles, and then a large OLED panel set on an angle into the opposite side, facing all the viewers. While the space was compact, barely longer than eight feet, it didn't feel that way. It felt surprisingly roomy. \"So... we could totally close that door, fire up some porn on the screen, and join the Mile High Club?\"\n\nAlex shrugged. \"We didn't get a chance to do it on the trip back from Paris, did we?\"\n\nShe blushed and shook her head. \"No, guess we didn't, it was a busy flight...\" She looked at him and smiled slyly. \"Have you ever joined the Mile High Club?\"\n\nAlex looked at the floor, frowning and making a show of thinking.\n\n\"Alex!\" his wife hissed, swatting him and smirking. \"Answer me!\"\n\n\"I was just going through the cousins list,\" he protested, laughing. \"No, Alexa, I am not a member.\"\n\n\"Well, we'll be changing that on this trip, big boy...\" she purred, gliding up to him and pressing her body to his. \"Best believe it.\"\n\n\"Back in your seats, Peter and Wendy,\" Karen called out, predictably wrecking the moment. \"We're about to take off.\"\n\n\"C'mon, before Milady de Winter has us ejected from thirty thousand feet,\" Alexa sighed shaking her head. The young couple returned to the compartment they'd decided on, and once the luggage they'd brought was loaded, the pilots instructed everyone to buckle up.\n\n\"I've never been to California before,\" Val mused as she sat in her chair and made sure her belt was secure. \"I've visited family in Modena, Italy, but never really been anywhere else outside the country, otherwise.\"\n\n\"We have a lot to do once we're there, but I promise you a good time as well, Miss Prospero,\" Karen assured her, smiling at the girl.\n\n\"I never doubt anything you tell me, Mistress,\" Val sighed before turning to look out at the runway they were beginning to taxi down.\n\n***\n\nSt. George Campus, some decades earlier...\n\n\"Good morning, ladies,\" Karen said airily as she joined her three friends in the cafeteria, where they were seated around a table and already breakfasting. Mona was powering through a bowl of muesli, while Janet had bought two little boxes of junk cereal, popped them open and poured her milk inside. She was eating with a plastic spoon, patently ignoring the wry expression Karen was giving her gustatory infraction. Lisa was happily masticating on her wedges of pink grapefruit. \"How did everyone sleep?\"\n\n\"Not too bad, actually, given how hard it is for me to sleep in new surroundings,\" Lisa replied, digging out another squishy wedge of grapefruit with her serrated spoon.\n\nJanet grunted. \"Easy for you to say; you weren't getting sleep-groped all night by some little redheaded Jewish lesbian.\"\n\nLisa looked up and scowled. \"Hey, I'm the little redheaded Jewish lesbian! And I can't sleep-grope myself!\"\n\n\"As your roommate, I beg to differ,\" Karen sniffed, causing Mona to break down snickering. \"Of course, I shan't be eating here, but I do find the coffee to be barely passable, so I shall join you with a cup of that.\"\n\n\"Where's Jenny?\" Mona asked, looking around once she'd recovered from her laughing fit. \"Kinda expected you two to be attached at the hip.\"\n\n\"More like at the cunt,\" Janet said quietly, causing Lisa to giggle.\n\n\"I heard that, Remington,\" Karen said dismissively. \"As has always been her habit, the Lady Penrose is still fast asleep, determined, if at all possible, to miss the entire morning. She doesn't believe they exist, because she's almost never awake to experience one.\"\n\n\"Ah, is she a real bear if you wake her up before noon?\" Mona asked, wondering what Jenny Penrose, Countess of Greymoor, looked like with bedhead. That had to be funny.\n\n\"Not at all, she just prefers to keep as much distance between herself and mornings where possible,\" Karen said simply. \"And to be fair, I probably did exhaust her last night.\"\n\n\"Well, I can identify with that,\" Lisa agreed, nodding and licking her spoon for spare juice. \"You certainly know how to put me in a coma.\"\n\n\"I didn't give her anything like the twenty orgasms I gave you a few weeks ago to make you behave yourself, but she was decidedly tired afterward,\" her roommate said, smirking. \"Excuse me, ladies, while I grab some hot black bean water...\"\n\nKaren was off to the beverages line, and Mona leaned in to whisper to the other two. \"Did you see that? Princess didn't even bother slagging on Janet's shitty breakfast.\"\n\n\"Yeah, I feel left out,\" admitted the brunette, dragging her plastic spoon through the discoloured milk in one of the boxes she'd been eating from. \"I was kind of enjoying being the thing that irked her first every morning.\"\n\n\"At least as long as Heyman hasn't been eating blintzes,\" Mona mentioned, making Janet giggle and Lisa blush.\n\n\"Can I help it if I'm lactose-intolerant?\" the redhead protested.\n\n\"Didn't the Israelites call their home 'the land of milk and honey'? Must've been the fartiest place in the ancient world,\" Janet quipped, drawing yet another giggle from Mona.\n\n\"Nem zich a vaneh...\" muttered the redhead under her breath.\n\n\"So, you must all have a million questions,\" Karen said as she sat down next to Mona. \"Trust me, we have at least an hour before Lady Penrose is stirring.\"\n\n\"Well, I'll ask the obvious one,\" Mona replied, taking a slurp from her own coffee. Well, it was more cream and sugar with a little coffee added for flavour. She never understood how people like Karen could drink it straight black; they were probably psychotic. \"Is it going as well as you'd hoped?\"\n\nKaren actually blushed as she smiled at the table. \"Every bit as well as I'd hoped, if not somehow better. She's as beautiful, talented, funny, and sensual as I remember. I didn't build her up in my head during our time apart. I'm thankful for that.\"\n\n\"So when's the wedding?\" Janet asked, giving her friend a saucy wink.\n\n\"Janet!\" Lisa hissed, elbowing her friend in the ribs, but not too hard. \"Zey shtil, you cow!\"\n\nKaren just shook her head, smiling. \"I'm rather certain that's a long way off, ladies. It's not legal anywhere, yet, and neither of our families would approve, with the likely exception of my mother.\"\n\n\"Her family really stuffy?\" Janet asked.\n\n\"They're very stereotypically British aristocracy, if that's what you're asking,\" replied Karen, shrugging. \"Nice people, if you're the right type of people.\"\n\n\"Count me out,\" Janet said.\n\n\"Me too,\" Lisa sighed. \"I doubt gassy little neurotic Jewish lesbian activist redheads qualify.\"\n\n\"Gnothi seauton,\" Karen laughed, a sound they all loved, and didn't hear often enough. It wasn't that Karen never laughed, but she seemed almost lighter than air now. It was wondrous to behold.\n\n\"I think I'm gonna go get changed,\" Mona decided, standing up. \"I'm gonna finish up a quick assignment so that I can harass you and Jenny for the rest of the day. Then I've gotta go see my mom tomorrow. She says she's lonely, but I think she's actually enjoying the empty nest. Apparently she plays euchre with her lady friends and has a grand ol' time. I'll be as quick as I can.\"\n\nShe leaned over Karen and gave her a kiss on the cheek. \"Say hello to the cuntess for me, I'll see you both this in a while.\"\n\nShe did the same to Janet and then Lisa, but not without giving her a tiny raspberry that sounded like a fart near her ear. The redhead yelped and squirmed away, scowling while Janet burst out laughing and Karen tittered behind her hand. Then their friend swished out the cafeteria door to collect her things.\n\n\"How 'bout you, Red?\" Janet asked, glancing at Lisa, who was sitting beside her and wiping at her ear as if trying to get the raspberry sound out. \"You visiting the 'rents?\"\n\n\"Nah,\" Lisa answered, shaking her head. \"I dodged Purim and mom's still pissed at me about it. She can deal with having a lesbian daughter, but a lazy agnostic? It's a Jewish miracle she's still talking to me. I'm gonna catch up on a few courses since Princess won't be molesting me constantly. I mean, I'll be available for mischief on campus, but since Kar's perverted attention is elsewhere, I may get some real studying in, y'know?\"\n\n\"Yes, your life is so very tragic, a lesbian surrounded by sex goddesses,\" Karen said dryly, making the redhead giggle before looking at Janet. \"How about you, Remington Any plans to head home?\"\n\nJanet made a face. \"Going home means going to Oshawa, so that's a big no for me. And I think we all kinda wanna hang around and get to know Jenny, to be honest. We've never seen you so happy. And you have run of the entire sciences department for a week, with no real competition, so that's a plus for you.\"\n\n\"I can think of other things I should be doing,\" Karen mused, smiling.\n\n\"Well, yeah, but... Princess, the labs're gonna be free of interference from Gargantua, so you'd best-\"\n\n\"I will not devote this week to academic matters, thank you,\" Karen said in a kindly but firm tone. \"My focus will be on Jenny.\"\n\n\"Hey, whatever,\" Janet said, holding up her hands. \"I'm just stating the obvious- you not working on your science-y things might knock the universe out of alignment. And then the only thing more out of alignment would be the front end of my car.\"\n\n\"I've offered to have that fixed, you may recall,\" Karen pointed out.\n\n\"Can't buy me love, Princess,\" Janet replied, winking. \"I'll have Mongo do it when he gets back. I'm gonna jet, gonna see if I can find a few books I need at the store. Behave, you two!\"\n\nJanet picked up the remnants of her garbage cereals and was gone. Lisa looked at Karen and seemed unsure what to say. The bronze-haired girl smiled. \"You only clam up when something is amiss, and you don't know how to address it. Speak your mind, darling.\"\n\nLisa sighed and looked at her hands, clasped on the table. \"I... I know you're having a great time with Jenny, and I don't... well, I don't want our past to, I dunno, hinder that, y'know?\"\n\n\"Okay,\" Karen said, nodding.\n\n\"What, just like that?\" Lisa asked, trying to sound irked. \"That's all you have to say after almost two years?\"\n\nKaren giggled. \"First, I might remind you that you broke up with me, Lisa Ruthelyn Heyman. Secondly, by mutual agreement, we were never exclusive. I may have been more sexually active outside of our bedroom, but even you have had a tryst or two.\"\n\n\"Hey, just because I broke up with you doesn't mean you shouldn't feel a little bit of remorse,\" Lisa groused, sulking. \"No fair using logic. It's by far your worst trait.\"\n\n\"A cross I'll simply have to bear,\" Karen said, nodding as she rose. She came around the table and hugged her dispossessed friend from behind. When she was certain nobody was looking, she put her finger gently on Lisa's cheek and turned her face to kiss her lovingly on the lips. Lisa's eyes went wide for a moment but then closed as she let the warm, sensual and familiar kiss ripple through her.\n\n\"And I still do love you, silly,\" Karen whispered. \"That will never change.\"\n\nShe stood and sauntered out of the cafeteria, whistling 'John Barleycorn' to herself. Lisa sat still for several seconds, staring at the empty table while people passed her by.\n\n\"Well,\" she sighed, standing up slowly and talking to herself. \"Guess I'll go find a secluded corner and fart and grope myself. Seems to be all I'm good for...\"\n\n***\n\n45,000 feet over the Midwest...\n\n\"I will admit that I enjoy the comfort of this plane more than I should,\" Karen sighed as she settled back in her seat while Mike sat across from her. Valentina was in the galley up front, making some drinks and light canapes. Alex and Alexa had disappeared into the media cabin behind them and were doing only God knew what.\n\nHer husband shrugged his massive shoulders. \"It's not like the Maybach or the jet have a Jacuzzi, so I don't think we're being terribly excessive.\"\n\n\"Even though we brought a sex servant with us?\" Karen asked, smirking.\n\n\"You tell her that we're being excessive in bringing her along,\" he replied, tilting his head at the galley behind him.\n\n\"Oh, heavens, no,\" Karen said, shaking her head. \"She'd be crushed, I couldn't do that to her. And, to be honest, I think she will prove to be of no small utility on this sojourn.\"\n\n\"As long as any shopping sprees you and Alli go on don't get too excessive,\" Mike chuckled as he moved into the seat next to her and turned his wife sideways. She already had her heels off and laid her feet in his lap. His powerful hands began to massage her feet and toes, sending her into a state of languid bliss, her eyes fluttering shut. \"Even Alex and I have a hard time lugging all that plunder around. Remember Christmas?\"\n\n\"Not when you do that thing to my toes, I don't,\" Karen sighed, almost melting into a puddle. \"I can barely remember my own name when you do it. But don't stop, good sir, I implore thee.\"\n\n\"Your drinks, Master, Mistress,\" Valentina said, coming up and setting the drinks she'd prepared down on a small, swing-out surface before giving them a curtsy. She was wearing pants, but that didn't seem to stop her. It didn't matter, she was happy. She'd made a mimosa with the juice of a blood orange in it for Karen, and a whiskey Old Fashioned for Mike. \"I still need to fix drinks to take to Master Alex and Mistress Alexa.\"\n\n\"Just be prepared for whatever you might walk in on,\" Karen mumbled, still luxuriating in the massage her husband had given her feet. His powerful hands could work magic in under a minute that most people would need thirty minutes for. \"We don't need you throwing yourself out the hatch, clutching your eyes and screaming.\"",
        "\"Unlikely, Mistress,\" Valentina said, smirking. \"But I am enjoying the ride. As I mentioned, none of my former employers owned a jet before, I don't think. Not even the Duncolms.\"\n\n\"You'll never see Patricia Duncolm up this high without a broom between her legs,\" Mike grunted. Val burst into giggles, almost doubling over, while even Karen tittered prettily behind her hand. Count on her husband to always know exactly what to say to make a light mood feel even lighter.\n\nVal curtsied again and then returned to prepare drinks for Alex and Alexa. The galley was just a prepared space between the cockpit and the cabin where freezers, coolers, food storage units, and a small oven and microwave were built into the walls. It might be cramped if Mike had to get by her, but the fact that the jet had any facilities like this at all was impressive. The chilling unit held crystal champagne flutes and brandy snifters, and since the jaunts the plane made were rarely more than eight hours, large elaborate meals were hardly ever called for. Light meals and drinks were the norm, and she could absolutely work with that.\n\nShe walked back through the first two compartments, smiling to herself because Mrs. DeBourne had sat up and was speaking with her husband while sipping at her drink. She'd made a Bijou for the young lady, and a 'Romulan Ale' for Alex. Granted, he'd had how to tell her how to make it, but it was simple enough, and fun to concoct- especially since it seemed to smoke or steam because of the dry ice.\n\n\"Room service!\" she chimed as she slid open the door to the rearmost compartment with one hand while carrying the two drinks on a small tray in the other. \"I hope you'll- oh!\"\n\nAs predicted by Karen, Valentina had walked in on something.\n\nThat something was a very naked Alexa bouncing up and down on Alex's lap, facing the television on the wall, which was playing video of a foursome composed of their friends Freja, Jeanie, and the two of them.\n\nAlex was equally naked as he sat beneath her, reaching up and massaging his aunt's large, jiggling breasts while his massive cock speared up inside her.\n\nNeither of them showed any intention of stopping, despite her sudden presence.\n\n\"You'd probably better close the door behind you, Miss Prospero,\" Alex managed to say, still groping Alexa's huge breasts. She was clenching her teeth and willing herself not to scream while Alex battered her insides into pudding.\n\n\"Oh, um... okay...\" Val said rather uncertainly as she looked at her tray. \"But shouldn't I put your drinks down somewhere first?\"\n\n\"Just close the door behind you and stay in here,\" Alexa managed to pant, her glorious body glistening with sweat. Val felt her mouth grow dry at the sight and was acutely aware of her own heartbeat.\n\nShe closed the door quietly and then daintily wiggled by the superimposed pair to set the drinks down on a small table. Then she stood up straight, cleared her throat lightly and remained still, looking straight back at the door with her hands folded in front of her.\n\nAlex and Alexa seemed to have forgotten about her for the moment, though, as Alexa had turned her head and pressed her mouth against her husband's, kissing him feverishly. Her long, golden blonde hair was damp from their erotic exertions, and still she kept gyrating on him. Valentina's eyes kept flicking over, stealing glances at the wondrous sight before her.\n\nMy God, she couldn't help but think. Like father, like son. And she is definitely my Mistress' sister...\n\nTheir tongues tangled and plunged hungrily, her hand stroking along his strong jawline as she kissed him. One of his hands still mauled her breasts while the other snaked down her flat, undulating stomach and began massaging her clit while he fucked her. It was hard to imagine they were paying attention to anything happening on the screen, which was a shame because Val thought it looked really hot.\n\nThe kiss finally ended, and Alexa looked over at Val now, her sapphire eyes glassy with pleasure and lust. The smaller girl swallowed involuntarily.\n\n\"Val,\" Alexa managed to say. \"My camera is right there, could you- gnnnnn, Alex! That's cheating!- could you... could you put it on video mode and then record this? We kinda got going and I totes forgot to turn it on.\"\n\nIt's about the only thing in here you haven't turned on... Val muttered inside her head, noticing the growing tingle between her legs. \"I... yes, I can do that, Mistress. I'm happy to help.\"\n\nShe was, she guessed, and this was hardly the first time she'd seen the younger pair going at it some place unusual. But she'd been telling herself for weeks now to get used to sexy, erotic, and weird around the Blackwell Manor and the DeBourne family. It just seemed to come with the territory.\n\nAnd she loved it.\n\nShe worked out the camera quickly enough, and then knelt near the couple, bringing it up to eye-level and then starting to record. With any luck, the technical aspect of keeping this running would slow down her pulse, and her libido, since she was getting decidedly horny. The cabin smelled like hot sex, like a man and a woman making love, their bodies moving and grinding together as they-\n\nDammit.\n\nIt was going to be a long trip to California.\n\n***\n\n1987...\n\n\"Well, look at you,\" Karen mused as she came into her dorm room and smiled. \"Up at the crack of noon.\"\n\n\"Oh, Heavens to Gimbels, Kat, you know full well I have never voluntarily done mornings,\" the still-naked Jenny replied, sitting on the edge of the bed now. She yawned and stretched her arms over her head, pushing her lovely, large breasts forward. Jenny never got bedhead, at least, not without partying very hard the night before. She just looked like a beautiful blonde woman whose hair was a sexy tangle from much lovemaking before she'd gone to sleep. Karen couldn't believe how pretty she was. \"Especially after what you put me through last night. I haven't had sex or orgasms like that in nearly four years, you vixen.\"\n\n\"How terrible for you, Lady Penrose, to be ravished and transported to heights of bliss against your will,\" Karen said with mock sympathy, smirking.\n\n\"Besides,\" the countess sighed, lowering her arms and smiling at her beloved as she crossed one leg over the other while leaning back on the bed. \"You've always been more than awake and alert for the two of us. Look at you- all ready to take on the world, despite the fact that you're on break. Smart, chic, elegant... without even trying, I am willing to bet.\"\n\n\"P'raps, but I have already seen the girls off to get their days over with, so that we can do more with them this afternoon and tonight,\" Karen mentioned. \"But, in the meantime...\"\n\nShe reached over to her jeans from the night before, slung over the back of a chair, along with Jenny's pants. Karen smiled and handed her jeans to her lover, sitting to face into her again. They both blushed as they fished the little folded notes out of the pockets and looked at them. The material was vellum, just as it always had been.\n\n\"Mmm,\" Jenny said, bringing it to her nose and taking a breath. \"Kat, it smells like you. They all did, and this one reminds me of them.\"\n\n\"I was about to say the same thing,\" Karen said dreamily, her beloved Jenny's scent in her nose, giving her a tingle. \"That heavenly scent, Jen.\"\n\nJenny gave her a naughty smile. \"I had written it back in Heatherly, but I folded it up and snuck it into my pants just before I came up to your room. So maybe three hours of it sitting next to my puss, waiting for you to find it.\"\n\nKaren giggled. \"I slipped mine into my pants while I was in the closet, getting ready for you; that way Red didn't see me.\"\n\nIt had been a tradition between them almost as long as they'd known one another, and certainly was one of their favourite methods of expressing how in love they were with each other. They would write little notes on vellum and keep them in their panties for some time, scenting each note before leaving it under the other's pillow for them to find.\n\nJenny unfolded her little note and began to read aloud, causing Karen to blush. \"How came we to be next to each other in the night, where the stars show us to our love inevitable, outside the leaves flame in darkness and rain falls cool and blessed on your holy flesh. My eyes waiting on your womanly mirage. I am amazed by peace, this blessing of you asleep, and the song of your breathing on the quiet air.\"\n\nThe blonde trembled and smiled, pressing the vellum to her lips and kissing it gently. She then looked at the little note in Karen's hand, drew a breath and nodded. They weren't accustomed to reading them to one another, but today, this reunion, was an exception.\n\nKaren opened the note and began to read, her voice like crystalline notes of rain in Jenny's ears, like nothing she'd even been blessed to hear before. \"When my lips open, it means I wish to eat you alive; to say 'touch me' without all the hesitance. My words tumble across your waist like honey butter, something to warm my mouth in even deepest winter. A kiss, the taste of you like heaven, erupting on my tongue like a raptured applause. I listen. For your love, and your taste, all I can do is hunger.\"\n\nThe two girls set down their notes in their laps and hugged one another, restraining tears. They kissed lovingly, renewing their deep bonds and feelings, leaving no doubt for the other. The kiss finally ended, and they leaned into each other, pressing their foreheads together. \"How about we go and avail ourselves of the showers, my love?\" Karen asked. \"Yes, I have already finished my ablutions, but I would absolutely do so again with you as an excuse.\"\n\nJenny giggled and tried to look scandalized. \"Kat, it in the public showers? What if we cannot keep our hands off one another?\"\n\nKaren shrugged. \"How would that be any different from our showers at Saint Eve's, Jen? How many times were we caught?\"\n\n\"True,\" Jenny admitted and then sighed and nodded. \"Very well, I cede to your logic, my love. But only if you promise to fuck me in the showers and if we stand a good chance of getting caught. For old times' sake, of course.\"\n\n\"But of course. For old times' sake...\" Karen whispered as they pressed their lips together and kissed again.\n\n***\n\nThe present, a small airport in Napa County, California...\n\nThey had finally taxied onto the runway and come to a halt. Everyone stayed seated until the pilots gave the word that they could stand. Mike and Karen both seemed refreshed and ready to go, while Valentina looked a little uptight. A few seconds after the all-clear had come through, the door to the back cabin opened and Alex and Alexa walked out, both looking somewhat dishevelled.\n\n\"Very nice,\" Karen said dryly as her younger sister walked by her, rather flushed still and trying to tie her damp, messy blonde hair in a ponytail while looking dignified. \"If you two have stained that upholstery, it's coming out of your allowance, Alex.\"\n\nMike led the way up to the front and waited patiently at the door, with Alex and Alexa behind him, Karen, and Val bringing up the rear. Neither Alexa or Valentina had been to California before, so this would be new for them, and they were excited.\n\n\"Miss Prospero,\" Karen said, smiling at the younger woman.\n\n\"Yes, Mistress?\" Val asked.\n\nKaren's gaze flicked up to the top of the brunette's head. \"Kitty ears.\"\n\nValentina tried to look up at the top of her own head for a moment and then squeaked and hastily took her little lace kitten ears off. She'd totally forgotten about them since they'd left the Manor! Why had no one told her? She tossed them on the counter of the galley as the door unlocked and opened, letting the bright sun in. Mike led the little troupe down the steps, stopping and waiting for his wife before they continued on toward the little terminal.\n\n\"Wow,\" Alexa said out loud as she walked beside Alex toward the building that was the terminal. \"It kinda looks like a bus station, doesn't it? I was expecting it to be a lot more fancy, because you think about Napa Valley and big executives going on wine tours, right?\"\n\nAlex shrugged. \"I guess mom, dad and I're just used to it being what it is. We don't come here to look at the airport, but apparently they're looking to expand and make it more luxury-oriented starting in the next couple of years.\"\n\nThey'd reached the building by the time what little luggage they'd brought was unloaded and went through customs. During all this, they could see Freja and Jeanie, on the other side of the small terminal, separated from them only by some dividers. The pair were spending their time looking at their newly arrived friends, looking out at the jet they'd taxied up in, and then back at the five in bewilderment.\n\n\"Don't ask, slut, I just found out myself this morning,\" Alexa stated in Danish, pre-empting Freja's question as she walked up and gave her best friend and soulmate a close hug. Freja sighed in loud relief, so very thankful that the cavalry had arrived. Jeanie was already hugging Alex and trying not to cry. Whatever had happened to the two of them, it had really put them through the emotional wringer.\n\n\"Hey now, it's fine,\" Mike said, hugging both girls to him gently, his huge arms giving them both a sense of safety every girl there could relate to. \"What's happened has happened, and now we're going help you girls fix it.\"\n\n\"I ams not so sure it can be fixed,\" Freja rasped, composing herself as she hugged Karen.\n\n\"Oh, of course it can,\" Valentina said soothingly as she hugged the pair next. \"I know you two now, you've got this. You just needed some backup, that's all. And who better than your best friends, right?\"\n\nFreja and Jeanie both looked at her with glassy eyes and nodded, still trying to smile.\n\n\"You are right, Miss Prospero, of course,\" Freja replied. \"We are just very tired and... what is the phrasing... dragged out.\"\n\n\"Yeah,\" Jeanie sighed. \"Pardon my French, but I feel like cat shit on linoleum. We really screwed up, guys. And to make it worse, we are so very completely flat broke. I think we have about ten bucks in our bank account, after sinking everything into this little adventure.\"\n\n\"Wow, you blew through all your camgirl money already?\" Alexa asked, giving them a wry look. \"That's impressive.\"\n\n\"It was not just this that blew through the money,\" Freja pointed out while they all began walking toward the exit, as the two wives kept occasionally glanced back at the plane. \"There was Christmas and we have been doing the splurging because our spirits were so high. We did not think this could fail.\"\n\n\"And it won't,\" Karen assured her. \"You just had a false start, darling. We're here and we will see this through with you.\"\n\n\"Thank you, Karen,\" Jeanie said warmly, hugging the woman she admired most in the world.\n\n\"So then,\" Mike announced, stopping everyone on the sidewalk under some trees while he ordered some transportation and waited on the luggage. \"We will begin strategizing the day after tomorrow. We are in no rush. In the meantime, I am willing to bet that everyone, especially Freja and Jeanie, could use some relaxation and a chance to unwind.\"\n\n\"This is sounding good,\" Freja agreed. \"If you had not come down in your mystery plane, we might have been sleeping on the streets of Los Angeles tonight. We spent our last cash to come meet you here in Napa, it was a nine-hour drive with bad traffic. Yes, we are rather tired.\"\n\n\"For the rest of this little adventure, you have no expenses to worry about,\" Mike said firmly. \"Kar and I will handle that. Your job is to relax, recover, psych yourselves up, and get ready for round two, understand?\"\n\nThe girls nodded. They were almost trembling with relief, now that their friends were here.\n\n\"Excellent,\" Mike said as Karen received the luggage and tipped the porter. \"We've reserved four rooms as the Hotel Arquero for tonight before we head on to other business.\"\n\n\"Mistress?\" Val asked quietly, moving in close to speak to Karen. \"Did he say four rooms?\"\n\nKaren nodded. \"Yes, darling. One for Freja and Jeanie, who are absolutely exhausted and demoralized, one for my son and my little sister, one for Michael and I, and one for you.\"\n\nValentina blushed. \"Mistress, not that I object, per se, to the idea of my own room, but wouldn't it be something of a waste? Couldn't I just sleep on a fold-out couch in your room?\"\n\nThe bronze-haired goddess smiled warmly. \"First, I doubt the Arquero has fold-out furniture, my dear. It is too high-end for that. Secondly, since I can write this trip off by visiting and doing some business at the wineries, it means I need to account for expenses versus number of people who came along. And since you came along, my accountants and family would expect me to make sure you were roomed properly.\"\n\nVal seemed somewhat confused. \"They would rather you spend money than save money?\"\n\n\"Appearances are everything with my family sometimes, Miss Prospero, to my eternal regret,\" Karen sighed. \"If I'm going to bring you as an assistant, I'm expected to provide for you as such. Not to mention the fact that if you stayed in Michael's and my room with us, questions would be asked about our proclivities and relationship with you. I only just got the jackals to accept Alex and Alli's romance last October, so I'd rather spend the money on a bedroom for you than have them sniffing around about us.\"\n\n\"Okay, that's totally fair,\" Val said, understanding. \"Do I have a nice room?\"\n\n\"Very nice, no doubt,\" Karen lilted, winking. \"It probably won't have a Jacuzzi in it, so you'll just have to join Michael and I in ours next door.\"\n\n\"What is it with you people and Jacuzzis?\" Val sighed, shaking her head.\n\n***\n\nIn the dorm showers, some decades earlier...\n\nThere were some privacy stalls in the dorm, along with open showers for those not so inclined to modesty and preferring expediency. Karen and Jenny were now wedged into a stall together, the thin, green vinyl curtain drawn shut, and had not yet made any attempts at actually showering. As the thin, yet noisy and rather sharp streams of water inundated them, Karen was sitting crabbed up against the wall of the stall, her legs spread wide, and trying not to grunt loudly. Jenny was somehow on her side, but with her lower half almost riding up the tiled back wall, her face between her lover's legs as she sucked hungrily on Karen's pussy.\n\nKaren's hands were tangling in Jenny's wet blonde hair, kneading and flexing while her hips pumped against the blonde's face. Tingling heat blossomed through her body and she strained in the confined space, her teeth clenched as she fought off a scream, while Jenny's wicked tongue drove her wild.\n\nJenny almost choked as Karen crammed her face against her pussy, cumming hard, squirting in her lover's mouth and down her throat. Jenny ignored her windpipe seizing up and kept sucking and licking, trying to make Karen scream. Karen ground against her with fiendish strength for an alarming amount of time before collapsing back against the stall's partition wall, panting heavily. Jenny pulled away from Karen's blossoming cunt, trying to get her breath back without hacking and coughing in an unladylike manner.\n\nTheir eyes met as they both breathed, chests heaving. Jenny's face glistened with cum, despite the water cascading down on her. Her mouth was open, like Karen's, and her weary tongue hung out, so she could get air into her lungs. Slowly, the blonde shuffled forward, and Karen pulled her in, kissing her deeply. She tasted herself on Jenny's mouth and they moaned through their kiss, not caring now if anyone heard them. Jenny settled into Karen, their wet, slippery bodies fitting together perfectly as they expressed their deep needs.",
        "Finally the blonde giggled.\n\n\"We are not very good at this whole 'getting clean' thing, are we?\" she quipped, wiggling against Karen.\n\nKaren smiled at her and shrugged. \"How many times did we go to class not actually clean because we got in the shower and ended up fucking instead of getting the night's excesses off our skin?\"\n\n\"Not enough,\" Jenny purred, kissing her again, their tongues wrestling in their mouths. She shuffled and squirmed around until they were sitting into one another, legs wrapped each other's waist. Their ample breasts squashed together and their pussies slithered into an erotic union while they kissed and fondled.\n\nAnd then the water began to cool, indicating that it might be time for them to actually shower. Giggling, they shimmied up the walls together, trying not to slip and break their cute bottoms in a tumble. They somehow conjured the willpower to clean themselves (and each other) before exiting the stall, laughing and giggling as they wrapped towels around their gloriously wet and naked bodies. A mad dash down the hall to Karen's room followed, and Karen leaned against the door, closing it behind them after they tumbled in.\n\n\"Kat, we are so bad!\" Jenny breathed, her hand against her chest, elated with their misbehaviour.\n\n\"Odd, I don't recall this being a problem for you before,\" Karen mused, smirking at her friend before standing and shedding her towel. They could have used her plush robes, of course, but coming back to her room wearing only towels was much more naughty. It almost constituted streaking, or at least felt that way. Jenny made everything feel naughty. \"You haven't gone soft on me, have you?\"\n\n\"Do these feel soft to you?\" Jenny purred, coming up to her and rubbing her tits against Karen's before turning around and undulating her ass against her lover's hips and pussy. \"How about this?\"\n\n\"That's cheating and you know it, you royal harlot,\" Karen quipped, making Jenny giggle again. \"But, now that I have you back here, I should warn you that we are doubtless going to be interrupted if we try to misbehave. The girls have by no means had enough of your charming self, and that means they'll be prowling.\"\n\nJenny considered. \"So do we crawl into bed and fuck for however long it takes until they catch us?\"\n\nKaren snickered, causing Jenny to squeal in delight, since it happened so rarely, and she loved being the cause of it. Karen shook her head. \"I have been caught by them on more than a few occasions.\"\n\n\"That does put a damper on any plans I have for letting you fuck me stupid constantly, if it were to traumatize them,\" Jenny admitted. \"Should we just read the Bible until their inevitable arrival?\"\n\nKaren smirked. \"I don't know which would burst into flames quicker, my Bible from you opening it, or you from touching it. Either way, I do not care for the mess I'd be left to clean up. What does one use to cancel out the odour of crispy patrician harlot? Is it patchouli?\"\n\n\"Gods, I hope not, I hate that smell,\" the blonde replied, wrinkling her nose. \"Let's let the girls find us going at it and then see who can tell more embarrassing stories about the other, you or myself.\"\n\nKaren considered. \"I suppose Mona would forgive us for traumatizing her, if we agree to pose for her later.\"\n\nJenny smirked and stood now, standing close to Karen, their nipples gently kissing. \"So you're saying we have time for have time for a quick shag, my love?\"\n\nThe bronze-haired girl rolled her eyes. Jenny knew that Karen despised that term. \"Do I ever say no to you, you incorrigible wench?\" she replied as they tumbled onto the bed, giggling, kissing, and fondling.\n\nIt was like they'd never been apart.\n\n***\n\nThe present: the Hotel Arquero, First Street, downtown Napa...\n\nKaren sighed as she relaxed in the hot tub, sitting next to her young sister. Alexa seemed similarly soothed after a very busy day that had begun with last-minute preparations for an impromptu trip to California on a private family jet she hadn't known about. And the day had only been made longer by gaining three hours in heading west.\n\n\"Mmmm, and to think that the house back in Kleinburg only had one hot tub,\" the blonde girl murmured, her head resting against a cushioned headrest while she stared through the steam at the ceiling. Her large breasts just broke the surface of the water, like her sister's did. \"And before that, I never had one at all.\"\n\nKaren turned her head slightly, looking at Alexa curiously. \"Mom never had a Jacuzzi in any of the places you lived? Anywhere? That does not sound like her in the least. She was as big a whore for Jacuzzis as the two of us, easily.\"\n\nAlexa shrugged her shoulders, but only barely. \"Meh, we had access to them, we just never owned one. Mom usually knew someone who owned one, which guaranteed us access. You know mom and her charms.\"\n\nKaren smiled. \"I only saw mom's bohemian side rarely, and usually when dad wasn't around. I bet she would seem like almost a completely different person to me when she was living over there with you.\"\n\nThe blonde nodded. \"Her patrician side came through in some ways, sure, but I think she needed to be someone else, y'know? The Miranda Gordon she might've been if she hadn't married dad and had all those obligations.\"\n\n\"Must have been a sight to behold.\"\n\nNow Alexa smiled. \"I think her libertine side came out, the one you get to express when we're not around our Blackwell family, and the way I was allowed to grow up. She always loved dad, to her dying day, Kar. But she knew that those days were over, and she had to fill in that part of her life with something new, something... fulfilling. She had all sorts of lovers, sometimes more than a few at once.\"\n\nKaren nodded. \"I can see that. I got that trait from her, as did you.\"\n\n\"Weird, though, she never expressed any interest in women,\" the blonde mused. \"But you and I are so very, very bi. Hell, I'm probably a little more lez than straight, y'know?\"\n\n\"I'm the same way,\" Karen agreed. \"I had always preferred women for relationships, until I realized I was in love with Michael. After that, there was no question who had my heart. But I still prefer women outside of that paradigm.\"\n\n\"Same with Alex and me,\" Alexa said. \"I could've been happy with Fre, but it isn't on the same scale as what I feel for Alex, at all. It's stunning to me what a difference there is.\"\n\n\"Did mom ever tell you about Jenny?\" queried the older sister. \"I don't think I've ever brought her up to you. I try not to think on her too much, but Michael always knows when I am and then talks with me about it.\"\n\nAlexa smiled. \"Mom told me about her. Not much, but that you had a very dear friend, a countess named Jenny, who was English, and she was pretty sure you were in love.\"\n\n\"We were,\" Karen said, nodding. \"Goodness, we were so in love.\"\n\n\"I'm glad things worked out the way they did, Kar,\" Alexa said softly, sitting up and turning to smile warmly at her sister. \"I mean, maybe I'd've still been born, but if you hadn't married Mike, there'd be no Alex, and I wouldn't have the man I'm so desperately in love with.\"\n\n\"I'm glad things worked out the way they did as well, Alli,\" Karen replied, reaching up and caressing her sister's lovely face. \"I wouldn't change a thing if I could have things the way they are now.\"\n\nThey leaned in and kissed lovingly, breasts pressing together as their tongues met. Their eyes were closed as they just expressed their love for one another.\n\nThe door opened and someone walked through the suite toward them before there was a squeak of surprise.\n\nKaren and Alexa both opened one eye to look, seeing Valentina looking at them, going somewhat red in the face.\n\n\"Mistress, I...\" she faltered, trying to gather her thoughts and averting her gaze. \"Oh, I...\"\n\n\"Miss Prospero,\" Karen said cheerfully. \"You're back earlier than expected.\"\n\n\"I...\" the brunette said, still blushing and looking away. \"We finished the itinerary, and your husband decided that... that...\"\n\nAlexa giggled. \"Oh, Kar, she's gonna die. Haven't you told her?\"\n\nKaren sighed. \"Miss Prospero.\"\n\nVal stood up straight, her hands folded in front of herself, although she was still going progressively redder.\n\nKaren's golden-amber eyes held hers. \"Undress, please.\"\n\nVal swallowed but complied, without question. She removed her clothing, soon standing naked in front of the sisters. She almost put her hands in front of herself again, but she was determined to never cover herself when her Mistress had said she was to be naked. She put her hands behind her back, holding them there. The only thing she was still wearing was her black lace choker with the pretty, glittering crystal on the front.\n\n\"Join us,\" Karen said, gesturing to the other side of the tub.\n\nValentina came forward, acutely aware of both the inhumanly beautiful sisters looking at her as she approached. She gingerly got into the steaming water, trying not to squeak as she did so. Once she had settled in, she remembered that she was considerably shorter than either woman, and she could see their breasts above the surface of the bubbling water, while they could barely see her shoulders. Despite her embarrassment, it felt unfair. She considered finding a way to sit on her knees, but then decided against it, since Mrs. DeBourne had probably not asked her to come into the hot tub to look at her breasts.\n\n\"Do you trust me?\" Karen asked.\n\nVal nodded. \"Yes, Mistress. Implicitly.\"\n\n\"Very well,\" said her Mistress. \"Yes, Alli and I are casual lovers. We have been since late last fall. Yes, both the boys know, and no, they don't care. They don't care about my physical intimacy with my little sister any more than Michael cares about my trysts with you.\"\n\n\"I believe you, Mistress,\" Valentina breathed, relaxing visibly. \"Grazie Dio, I am so relieved. And for the record, I am not at all bothered by you and your sister.\"\n\n\"You cannot seem to be bothered by anything I do,\" Karen mused, smirking and making Val blush again.\n\n\"But...\" Val said, looking at the water and considering something. \"For the record, you and your son don't-\"\n\nKaren shook her head. \"No, darling. Never and ever.\"\n\nVal looked at Alexa, who also smiled and shook her head. \"Mike scares me to death, Val.\"\n\nVal's eyes widened for a moment as something occurred to her. \"And the guys, they... they don't...\"\n\nThe sisters burst out laughing. \"Omigod, gross, Val! No!\" Alexa cackled. \"Nonononono! I'm pretty sure Kar'd be having sex with Alex and I'd be boffing Mike before that ever happened.\"\n\n\"I'm pretty sure I'd rather have sex with Alex than see that happen,\" Karen managed to say before the sisters began laughing again. Val looked back and forth between them like they'd gone crazy. There were some champagne glasses near them, yes, but they couldn't have been that drunk yet.\n\nKaren finally composed herself and smiled at the girl who called herself her servant. \"So seeing Alli and I kissing caught you off-guard, yes?\"\n\nVal considered. \"I think it was more the suddenness of it than the act itself, Mistress. When we were all posing together for pictures the other week and you and Mistress Blackwell seemed-\"\n\n\"Oh, jeez, no,\" Alexa interrupted, shaking her head. \"Val, I'm sorry, but that 'Mistress' stuff's gotta go. Maybe calling my big sissy that gives you a tingle, and that's fine. But it'll drive me bonkers. Just call me Alexa when we're not around people outside our little family, okay? And if you must, call me Ms. Blackwell in public.\"\n\n\"Yes, ma'am,\" Val said, nodding obediently before looking at Karen again. \"To be honest, Mistress, when I saw you and your sister together during the photo shoots, you were surprisingly comfortable physically with one another, pressing your breasts together without any hesitation, whispering to one another, and so on. The thought had occurred to me back then, I admit, but our own understanding became a thing, and I... forgot.\"\n\n\"Fair enough,\" Karen said easily. \"I am glad you're fine with it.\"\n\n\"More than, Mistress,\" Val said, blushing as she nodded.\n\n\"Good Lord, she'll be spying on you and I next,\" Karen sighed, smiling. \"Yes, Miss Prospero, Michael and I know, and we don't care.\"\n\n\"Oh, uh... good,\" Val said uncertainly. \"Guess I'm not as sneaky as I thought.\"\n\n\"I wasn't either,\" Alexa said, shrugging. \"I watched my sissy getting boned by her hubby all the time when I got back, and I thought they didn't know. Guess we were both wrong, eh?\"\n\n\"What if I had been carrying on an illicit affair with my little sister behind my husband's back?\" Karen queried, looking curious. \"There is no wrong answer, I just expect an honest one.\"\n\nValentina thought about that, drawing a deep breath. \"Mistress, I am very devoted to you, and I am to your husband as well. If I thought you were cheating on him, with anyone, I would tell him. Not just because I think he deserves to know, but... well... I expect better of you. I hope you understand what I mean.\"\n\nKaren smiled warmly. \"There might not be a wrong answer, but clearly there is a perfect answer, Miss Prospero, and you gave it. Always tattle on me to Michael if I'm misbehaving. He is the great moral force in my life, and I live every day trying to not disappoint him. Now then, my dear... relax and enjoy the tub.\"\n\nVal nodded and settled in, sighing as the hot, churning water helped bleed away her tensions. She had to appreciate the addiction this family had to jacuzzis. \"Yessssss, Mistress...\"\n\n\"Am I right in assuming the boys dropped you off and are still out finding nerd things to do?\" Karen asked while she caressed her fingers through her younger sister's wet, golden hair.\n\n\"Uh-huh...\" Val murmured, looking at the ceiling. \"They found an arcade'r something...\"\n\nKaren pondered the information. While she didn't doubt that she'd get laid tonight, her husband was probably letting loose now, in case the rest of the trip proved work-intensive. It made sense. Karen and Alexa had already seen Freja and Jeanie off to bed in their suite. The girls were emotionally overwrought and exhausted. Karen had given them their own room and space, so that they could lie down as a married couple, crying and sharing their hurt. They weren't alone down here anymore, they just needed a quiet night of sleep.\n\nKaren looked over at Alexa and winked before rising slowly, water cascading off her glorious body. She held up a staying hand as Val noticed and made to stand up, indicating she was to stay put. The brunette slowly settled back into the soothing water.\n\n\"I think I'll go for a stroll,\" Karen mused, slipping on a plush robe. \"I want to see if Napa air smells the way I remember it. You two enjoy yourselves.\"\n\n\"Can do, Kar,\" Alexa said lazily, watching her sister wiggle out of the room, twirling the ends of the tie for her robe. She'd been gone for a little while before Alexa looked at the tub's other occupant. \"So, Val...\"\n\nValentina's eyes flicked up and she sat up slightly. \"Yes, ma'am?\"\n\nThe blonde giggled. \"We're alone, Val. Call me Alexa.\"\n\nVal cleared her throat and nodded. \"Yes, ma- Alexa.\"\n\n\"And relax.\"\n\nVal took a deep breath and relaxed.\n\n\"I'm glad you're enjoying working for us,\" Alexa mentioned, smiling and using a palm to cascade some water over her delightfully visible breasts. \"What, if anything, could improve it?\"\n\nVal had been staring at Alexa's tits, but blinked as she heard the question and shook herself out of her reverie. \"Oh... I... goodness, Alexa, I don't rightly know. I get paid well, I have all the food and fun I need... my job is easy, as long as I'm attentive to it...\"\n\n\"Not to mention other benefits,\" Alexa said, winking.\n\n\"Yes, I rather enjoy those,\" the brunette admitted, blushing. \"Good thing I don't have to declare those on my taxes.\"\n\n\"True,\" Alexa giggled. \"But in case I need to spell it out, Kar left so that we could find out if you wanted to expand your benefits package.\"\n\nValentina thought about what the blonde goddess was saying and her eyes widened slightly. \"Y- y'mean... like... you and me...\"\n\n\"And Alex, if you're interested.\"\n\n\"Ow, wow...\" Val said in a tiny voice. \"Is... is Alex...\"\n\n\"His father's son?\" Alexa suggested, completing the question. \"In all ways that count, yes. You saw him in the media cabin on the jet.\"\n\n\"And it... it wouldn't be weird if the four of you were all, y'know... intimate with me?\" the girl asked.\n\nAlexa shrugged. \"We already share Fre and Jeanie, but I think you probably knew that, or at least suspected. Question is, are you interested?\"\n\nVal thought hard. \"It's not cheating on my bosses?\"\n\nAlexa smiled dazzlingly, and Valentina could feel herself getting wet, even though she was already submerged in churning water. \"She left us alone so that we could find out, silly. And besides, I suppose technically, Alex and I are your employers too. We're just... junior partners.\"\n\n\"Oh, well that doesn't sound so bad, then,\" reasoned Val, pursing her lips and shrugging slightly. \"I'm just... looking after my employers, right?\"\n\n\"That's the spirit,\" Alexa agreed. She held out her arms. \"Come take a seat, we'll talk.\"\n\nSlowly, Valentina stood and moved across the small tub to the gorgeous blonde, her heart pounding. She opened her legs enough to sidle forward and settle down onto Alexa's lap, facing into her. Alexa's hands found her back and pulled her in closer gently, their slippery breasts pressing together. Val shivered, remembering the feel of those amazing breasts pressed to hers the week before when they were taking pictures before the paintball game.\n\n\"So,\" Alexa lilted, smiling at her. \"Are you interested in this new position?\"\n\n\"I'm really thinking so...\" Val breathed, squirming her breasts against Alexa's and kissing her.\n\n***\n\nA certain dorm room, decades earlier...\n\n\"Might've known,\" Janet sighed, shutting the door to the room behind herself while Lisa just stared dumbly at the bed on the other side of the space. Lying on said bed, Karen and Jenny were in a very sweaty, naked tangle, arms and legs wrapped around each other, making out. \"But I guess it's my fault for not knockin', right?\"\n\nThe lovers had paused in their Sapphic activity and were staring at the intruders. Jenny looked at Karen. \"This happens a lot, doesn't it?\"\n\n\"More often than you can possibly imagine,\" Karen muttered, her eyes narrowing at her two friends. \"Remington, how many times have you walked in on Red and I flagranting the delicto? And with that in mind, what makes you think things would be any different with Jenny?\"\n\n\"I've never seen a naked countess before,\" Lisa murmured, still staring at the pair.\n\n\"Well, then,\" Jenny said, smiling and disentangling herself from her beloved before turning and sliding her legs off the bed. She then stood, her hands on her hips and one knee crooked slightly in front of the other. \"Now's your chance, my dear. What say you?\"\n\nLisa swallowed, her eyes wide, and her mouth suddenly dry. Even Janet was gaping.\n\n\"Granted, I'm not quite as stacked as Kat, but I think I've been gifted in the right areas,\" Jenny purred, raising her arms and running her hands through her blonde hair while slowly swaying her breasts side to side.\n\n\"No, complaints from me,\" Lisa managed to say, her throat rasping. \"No wonder Kar's crazy about you.\"\n\n\"So articulate of you, Heyman,\" Karen said dryly, now standing next to Jenny and letting the girls drink in the sight of the two of them completely naked. Lisa looked like she might faint.\n\n\"Damn,\" Janet breathed. \"That is so much not fair, all in one image. Y'know who's gonna say not fair, though? M, because she's not here to sketch this moment because she's not back just yet from the Art Gallery, catching up on an assignment.\""
    ],
    "authorname": "BiscuitHammer",
    "tags": [
        "romance",
        "humour",
        "music",
        "incest theme",
        "lesbian",
        "alcohol",
        "flashbacks",
        "group scenes"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/mike-and-karen-ch-21"
}
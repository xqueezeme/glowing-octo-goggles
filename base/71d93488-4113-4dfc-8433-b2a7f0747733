{
    "title": "McKayla's Miracle Ch. 03",
    "pages": [
        "This is the conclusion to \"McKayla's Miracle\". It picks up right where the previous chapter left off, so if you're interested in the story, you should probably read the previous parts. Enjoy! \n\n*********************** \n\nI came home early. I was eight months pregnant and wasn't feeling up to a full day's work. I could have quit my job or at least gone on bedrest, but I knew that being around the house all day would drive me batty.\n\nMcKayla told me she had a meeting that afternoon and had driven separately. I called her before leaving work, but it rolled into her voice mail. That was no surprise. I left her a message and told her to call me when she got a chance.\n\nAs soon as I got home, I immediately knew something was wrong. I parked my new car in the garage and went in to the kitchen. There were a few things missing, nothing like a burglary or anything, but a couple of pictures off the refrigerator and McKayla's favourite coffee mug were gone.\n\nMy frown turned to dread when I saw a stack of papers on the kitchen table and a card with my name on it.\n\nI waddled over and picked it up. With a dread-filled sigh, I opened the envelope.\n\nAmberle,\n\nI thought I could do this but I can't. It's not anything you did. It's all me.\n\nThe house is yours. Everything I have is for you and the baby. \n\nYou made me happier than I have ever been, but something came up and I can't be with you any longer.\n\nI'm sorry,\n\nMcKayla\n\nI sat there for a long time, reading the words over and over. After a few minutes, I flipped through the papers. Sure enough, she had left everything to me. Her name was taken off the house and all our accounts. On the things I needed to sign for, there were instructions to go to a lawyer and they would take care of the rest.\n\nAs the shock wore off, it turned to confusion, despair and then finally, anger.\n\nShe had made me a promise! What had I done? What the hell was she thinking?\n\nI stormed through the house. Most everything was still where it had been when I left for work in the morning. She took her clothes, some of her jewelry, a few books and her client files, but everything else was in its place.\n\nMcKayla wasn't answering her phone. No one picked up at her parents's house.\n\nThe tears came. I sobbed and sobbed. I wondered if the past eight months had been a lie. If I had been had.\n\nIt may have been the hormones. It may have been the rage. I needed to talk to her. I needed more than a break-up via Hallmark. I needed to slap some sense into McKayla. I needed to hear the words from her mouth telling me that she didn't love me.\n\nOnly I didn't know where to go.\n\nI figured the only place she could be was her parents's house. That was about four hours away, but I didn't know where they lived. They had always come to visit us.\n\nAfter a few minutes of searching, I remembered that we had ordered some books for them at Christmas. I found the shipping address stored in our Amazon.com account, Mapquested directions, got in my car and drove off without even packing anything.\n\nThe drive was miserable. I cursed and screamed at other drivers. I whipped myself into a fury. More than once, I had to pull over and cry.\n\nAll the while, I could only wonder one thing: Why?\n\nIt was dark by the time I got there. Don and Suzie lived in an exclusive suburban neighbourhood. You know the kind: the houses start at three quarters of a million dollars and all look the same. Four thousand square feet, brick fa&ccedil;ade cookie-cutter homes.\n\nI pulled into the driveway next to McKayla's BMW and got out. The lights were on inside.\n\nWiping the tears from my eyes, I went to the door. I knocked and rang the doorbell and pounded on the frame.\n\nSuzie came down the hallway. When she saw me, there was a puzzled look on her face.\n\n\"Amberle, what are you doing here?\" she asked.\n\n\"Where's McKayla?\" I demanded, the frustration coming out.\n\n\"I don't think this is a good time for you to be here,\" Suzie said in a firm voice. \"I think she's hurt enough.\"\n\n\"She's hurt!?!?!\" I nearly exploded. I don't usually cuss at people I love and respect, but my emotions were out of control. \"What the fuck are you talking about? McKayla's the one who left me!\"\n\n\"Amberle&mdash;\"\n\n\"I need to talk to her!\" I pleaded. \"I need to hear her say she doesn't love me anymore.\"\n\n\"What do you mean?\" Suzie had a cross look on her face. \"She said you . . .\"\n\nAs her voice trailed off, the light came on for her. McKayla's mother sighed. A deep, regretful sigh. There was a flash of anger in her eyes, as if she had been deceived, which quickly turned to sorrow. She reached for me and pulled me into a hug.\n\nI burst into tears again. I buried my face in her shoulder and sobbed some more.\n\n\"She didn't tell you, did she?\" Suzie whispered. She stroked my hair, trying to comfort me.\n\n\"Tell me what?\" I asked, gasping for breath.\n\n\"Come in, Amberle. You deserve to know. She's back in one of the guest rooms.\"\n\nDon came out to see what the noise was all about. I barely saw him through my tear-blurred vision, but he had a shocked look on his face, too. Suzie shook her head, warning him not to say anything.\n\nSuzie led me to their living room. She called for McKayla.\n\nMy love was standing in a doorway. Her eyes got wide. Time seemed to stand still. No one moved.\n\nMcKayla's eyes welled up with tears and then she was in motion.\n\nShe fled down the hallway. I tried to follow her, but she was too quick for me. After all, I was the one who was eight months along, not her. She retreated into one of the bedrooms and slammed the door shut.\n\n\"Goddammit, McKayla, open the door!\" I shouted, pounding away. \"Why? Why did you fucking leave me? You couldn't even break up with me face to face. You left me a goddam card! What the fuck is wrong with you?\"\n\nKicking didn't work. Nor did slamming my shoulder against the door. All of the anger I had built up over the past few hours was channeled into the heavy oak. I screamed and yelled, trying to get some explanation for her abrupt departure.\n\nFat lot of good it did me.\n\nI finally collapsed on to my knees, tears streaming down my cheeks.\n\n\"Why?\" I wailed. \"Why, McKayla . . .\"\n\nSpent, all I could do was choke for breath between sobs. I felt Don's strong hands on my shoulders. He pulled me to my feet and led me back to the living room. \n\nI fell on to the couch with Suzie. Don brought me glass of water while his wife held me in her arms. She was crying, too.\n\nThe rage passed. It was replaced by emptiness and silence. I was numb. \n\nMy head was in Suzie's lap. I curled up in the fetal position, still shaking. She stroked my hair and told me everything would be fine.\n\nHow can things be fine? I screamed on the inside. I was scared. I was angry. I felt deserted. For the first time in forever, I felt alone.\n\nIt took a while, but my breathing became calm. It wasn't regular, but I wasn't short of breath anymore. \n\n\"Amberle deserves to know,\" Suzie said after a while. \"You need to tell her.\"\n\n\"I know, Mom.\" McKayla's voice seemed small, like a scared little girl. \n\nSuzie patted me on the shoulder and helped me sit up. She gave me a hug and then got up and left the room.\n\nI looked over at McKayla, nothing but hurt in my eyes.\n\n\"Why?\" I whispered.\n\nIt took her a second. I saw her draw in a deep breath, as if she were steeling her courage. She sat down next to me and took my hands in hers.\n\n\"Amberle, I've got a disease,\" she said softly. \"No, it's not AIDS or anything you can get. It's called Huntington's Disease. It's a degenerative neurological condition. Think of all the worst symptoms of Alzheimer's and Parkinson's, put them together and that's what I've got.\"\n\n\"Is there a cure?\"<br>\n\n\"No, honey,\" she shook her head bitterly. \"Not yet. I've got some options for therapy, but it's going to kill me. I don't have any symptoms yet, but they're coming. I could live for five years more years or I could live for forty.\"\n\n\"How . . .\"\n\n\"It's a genetic condition,\" she said. \"I got it from my dad. I knew there was a possibility that I'd have it, but I didn't go and get tested until last month. I came back positive for the gene. I just got the results yesterday.\"\n\n\"But surely that's only a pre-disposition . . . like alcoholism.\"\n\n\"Not with this one,\" McKayla said, looking away. \"If you've got the gene, you're going to develop the disease. It's just a matter of time.\"\n\n\"We can get through this,\" I told her. I desperately did not want to let the woman that I loved go. Not like this.\n\n\"I don't want to put you through Hell, Amberle,\" she said, putting on a brave face. \"Like with Alzheimer's, I'm going to lose my memories and my personality. I'm going to forget you. I'm not going to remember who I am. My body is going to fail me. I'm going to have involuntary muscle spasms like with Parkinson's. People with these diseases don't suffer. It's their loved ones around them who do.\"\n\nShe gave me a heartbroken look.\n\n\"I'm not going to be a burden for you,\" she said quietly.\n\n\"Don't I get a say in this?\" I asked. \"Don't I get a choice? I love you, McKayla. You mean too much to me. We'll work this out. We'll find a way.\"\n\n\"There's no way to make this work.\"\n\n\"Sweetheart,\" I turned her face so she was looking directly in to my eyes. \"What are you always telling me? 'God will provide; we just need to have faith.' We will get through this. Have some faith.\"\n\n\"I can't ask you to give up your life for me.\"\n\n\"I'm not going to give anything up for you,\" I said sternly. \"I'm going to give up everything for us. You wanted us to work. That means we stick together through thick and thin. Good times and bad.\"\n\nTears fell out of the corners of her eyes.\n\n\"If you don't love me,\" I said. \"I'll walk away. I'll get back in my car and go home. Otherwise you're stuck with me. I promised you a long time ago that I would never leave you and I don't intend on ever breaking that promise. You made the same promise to me, McKayla. And I'm not letting you out of it. I love you too much.\"\n\n\"I know you do,\" McKayla whispered and she started to cry. \"I love you, Amberle. I love you and that's what hurts the worst. I'm going to wake up one day and I'm not going to recognise you. I'm not going to love you. And I'm not even going to realise it.\"\n\n\"We'll worry about that day when it comes.\"\n\nWith that, I took her in my arms and cradled her to me. We sat there on the couch for a long time, the three of us&mdash;McKayla, the baby and me&mdash;wondering what the future held but knowing we were in it together.\n\n*********************** \n\nOur baby was born three weeks later. \n\nWe named her Maureen Rene and gave her my last name, Goin. We toyed with the idea of naming her Christa or Talya (the female equivalent of Jesus, meaning \"lamb of God\") because of her \"immaculate\" conception to two lesbians, but instead decided to name her Maureen, a derivative of Mary (as in the Virgin), and Rene after my mother. She was healthy and the most beautiful thing either of us had ever seen. I toyed with the idea of quitting my job, but my boss talked me out of it. \n\nHe knew I was involved with another woman, but that didn't matter to him.\n\n\"You're a good employee, Amberle,\" he told me. \"You get your work done, the guys in the warehouse like you and I don't have to tell you anything twice. I don't care who you're sleeping with or anything like that. If any of the guys give you any shit about it, let me know and I'll get rid of them.\"\n\nAnd that was that. I know a couple of the guys were uncomfortable having a full-blown lesbian working in their office, but that was their problem. \n\n\"Listen, Amberle,\" my boss said one afternoon. \"They liked you before they knew you were a lesbian. Now that they know, a couple of them are questioning whether what their preachers have told them is wrong. After all, you're not a monster who's trying to turn their children gay. Having a face to put on 'the enemy' really puts a crimp in some of these fundy Christians. I think a couple of the guys are also pissed that you won't go out with them now, but a few of the others are thinking about how hot you and your girlfriend are together.\"\n\nI wished I had told him earlier because it would have saved me a whole lot of stress. He hired an assistant for me and even let me work some from home when I went back.\n\nWhy did I go back? \n\nPart of it was because I needed something to do. I love my daughter but I wanted an identity that was more than just as \"Maureen's Mom\". I also wanted to give McKayla a chance to be the mommy, too. That had been her dream since she had been little and I wasn't about to take that away from her.\n\nAfter I recovered and felt up to going back to work, McKayla took her maternity time off under the Family and Medical Leave Act. I don't know if she was entitled to the leave, but her boss gave it to her anyway. She did all the mommy things around the house, and almost never called me wondering what to do with the baby. The only thing she couldn't do was nurse; in every other way, it was as if Maureen was her very own.\n\nWe promised one another that the little girl was our daughter, not mine. We knew that one day we'd have to explain to her why she had two mommies, but we'd cross that bridge when we got to it. When I look back now, I realise that the 12 weeks she took off were the happiest I had ever seen her. McKayla worked a little bit with some of her high-profile clients, but most of the time, she just stayed home. She glowed and only grew more beautiful in my eyes.\n\nWhen the baby was six months old, McKayla and I got married. Not actually married, but it was close enough for us.\n\nOnce the baby had settled into a regular sleep schedule, McKayla and I spent the next several months planning the wedding. Let me say this: if you can plan a wedding with another woman and don't want to strangle her by the time it's all over, your relationship is in very good shape.\n\nAt dawn on a warm September morning, we stood on the beach behind our house and said our vows as the sun rose. All of our family came in. Brin stood next to me and Uncle Bill gave me away. Allyson was McKayla's maid of honour and Don escorted her to my side.\n\nWe both wore elegant wedding dresses that were just short enough that they didn't get wet as the ocean washed over our toes.\n\nEach of us wrote our own vows. We promised to love and cherish each other forever. I think McKayla wanted to get married in the Church, but we knew that would never happen, so we settled for the next best thing: right in the midst of God's glorious creation, just before daybreak, with the sounds of the ocean around us and surrounded by the people who loved us the most.\n\nAfter saying our vows, exchanging rings and taking some pictures, we went inside and began an all-day party. We had brunch for everyone who got up before dawn and then things got cooking later. Using the baby as an excuse, we had a little bit of time to catch a quick nap (read: post-nuptial nookie) around noon and then went out.\n\nWe spent the day with our families; we had an afternoon tea, then Brin and Ander snuck me away before dinner. McKayla and the baby were off with Don and Suzie.\n\nWhen we arrived at the country club, I saw McKayla holding Maureen in her arms. She was back in her wedding dress because she thought I was putting mine back on. She looked radiant. Her smile stretched from ear to ear. I stared at her for a minute. She hadn't seen me yet. I watched her move around the room, greeting each of our guests. \n\nMy lover . . . my best friend . . . my wife . . . she looked so alive. So animated. So vibrant.\n\nBretlynn was with McKayla and pointed over towards me. Our eyes met. Time seemed to stand still for a moment. Everyone else in the room faded away and all I could see was my wife and my daughter, the two people I loved more than life itself.\n\nMcKayla walked over to me and we stood there for a second. The room fell silent.\n\nIn unplanned unison, we each curtsied, holding our skirts out and bowing our heads slightly. McKayla's eyes twinkled. \n\nI was wearing one of my mother's old SCA outfits. It was a two-piece skirt set that had a double-lacing bodice with elegant silver and black jacquard trim over a long-sleeve white cotton blouse. The skirt had alternate panels of kelly green and royal blue that matched the bodice, and it flared out from the waist.\n\nMy brother, sister and I had gone through our parents's things and found the outfit. It must have been one of Mom's favourite outfits because Dad kept several pictures of her in it around the house.\n\nFlowers were woven into my hair, which was pulled back into a tight braid.\n\nMcKayla shifted Maureen out of the way and pulled me into her embrace. I put my arms around her and we kissed. It was a long, hard, sloppy kiss. Her tongue entered my mouth and for a moment we were oblivious to everyone else around us, even our daughter. Finally, I pulled away, worried that either our friends would tell us to get a room or I would give in to the temptation to tear her clothes off and take her right there.\n\n\"You look stunning, Elven Princess,\" McKayla said softly. There was an edge to her voice, part amused, part longing. Her hand caressed my cheek. I turned my head so she could get a good look.\n\nOn the tips of my ears, under gobs of glue and flesh-coloured make-up were movie-quality latex points. Ander had found them on the internet at some Lord of the Rings costume site. Brin put them on and made sure they looked like they were my real ears.\n\n\"As do you, m'lady,\" I replied gently. I kissed her again, this time for just a moment, but I could taste the hunger on her lips.\n\nI slipped my hand into the crook of her arm and we continued to mingle about the room. \n\nWe sat down for dinner a little bit later and after that, things got crazy. There was a lot of drinking involved (not by me; I was still nursing), some dancing, some karaoke and some more drinking. Allyson and McKayla ended up singing some gawd-awful rendition of \"Don't Come Home a Drinkin' With Lovin' On Your Mind\" that was fall-on-the-floor hilarious. Allyson was blitzed and my wife was on her way. Suzie wouldn't put Maureen down so we made her the front of the congo line.\n\nEveryone had a good time and that's what we wanted more than anything. For our friends and family, the people we loved most in this world, to be together. The fact that it was to celebrate the commitment McKayla and I were making was just the icing on the cake.\n\nOh yeah, there was lots of cake, too. We did the bouquet toss and the garter belt thing (twice). And McKayla found out that somewhere along the way, my panties had mysteriously disappeared . . . \n\nI dragged McKayla out of the banquet room a little after 9:30. Don and Suzie were keeping the baby at our house and I wanted to have my bride on our wedding night before she passed out.\n\nWe went back to the Breakers, and this time we had the honeymoon suite. We already had our keys and went straight up to the room. The night bellhops gave us a couple of raised eyebrows, but we didn't care.\n\nRight after Maureen was born, I decided I didn't give a damn what other people thought about McKayla and I. If they didn't like seeing two women in love holding hands, then they can go to Hell. Life is too short to not have the person you love at your side at all times. I wasn't going to worry about how other people looked at us. \n\nMcKayla's disease was going to take her from me. I knew that, and I dreaded thinking about it. I dreaded the talks we had about living wills and institutional care once she got to the point when I could not longer care for her at home. I dreaded thinking about the day when I would have to explain to our daughter why her mommy doesn't remember her name. I dreaded thinking about the day when the most beautiful woman in the world wouldn't know that she was the center of my life.",
        "All I thought about was being in that moment. Being a bride and having a dream wedding. Knowing that the person in my arms would fight for me, would die for me, would love me no matter what.\n\nWe held hands and raced down the hall way. \n\nMcKayla was trying to get the magnetic strip key into the slot and I was already trying to get her out of her dress.\n\nWe stumbled through the door. McKayla kicked her shoes off into some corner of the room. I groped at her perfect breasts as her strapless wedding dress came unzipped and fell to the floor.\n\nShe steered me towards the bed. There were no lights on. Instead the room was filled with candles. Rose petals were on the floor and bed. The sheets were turned down.\n\nUnderneath her dress, McKayla wore a white corset with garters holding up a pair of thigh-highs and some white lace panties.\n\nI pulled her to me, my hands under her shapely backside. She started to grind against me. \n\nOur tongues were dueling. My teeth raked her lips. Her hands groped my swollen breasts.\n\n\"Have I told you how much I love you, Elven Princess?\" my wife asked.\n\n\"Only about a zillion times today,\" I smiled back.\n\n\"Well make that a zillion and one.\" She kissed me but had made no move to undress me. I think the whole medieval elfmaid thing was turning her on. At least that was the message her nipples sent me.\n\nIf I had been wearing panties, they would have been soaked. As it was, my excitement was almost dripping down my legs.\n\nWe were standing next to the bed. I tried to maneuver her on to the bed, but she was stronger than me.\n\nSpinning me around, McKayla pushed me face down on the bed and then she pounced on top of me. I felt her hand push my hair to the side and then her lips were on the back of my neck.\n\nHad I been standing up, my knees would have turned to jelly, so it was a good thing I was already down. I half-heartedly tried to roll over, but she kept me pinned down.\n\nLately, McKayla had become very aggressive in bed. I didn't mind. In fact, I really liked it.\n\nFor her, though, I think it was more about control. She knew that there were factors in her life that were beyond her control. Her disease was out of her hands. Our daughter was dictating our lives. And so to be able to feel in control while we were in bed was something I think she needed.\n\nAnd I was more than happy to give that to her.\n\nMcKayla kissed her way across my shoulders and down the sides of my neck. I practically melted into the bed. I turned my head and she bit behind my ear, being careful not to get too close to the faux point.\n\nI moaned out loud.\n\nAs she continued to kiss the back of my neck, I craned my head around, so she could get to all the sensitive spots. \n\n\"Damn, that feels good,\" I whispered.\n\n\"You taste good,\" she replied, and I could tell she was smiling mischievously. \"I am going to claim you as my own tonight, Elven Princess.\"\n\n\"I am yours, my lady. I have been yours since the day I first laid my eyes upon you.\"\n\nWith that she flipped me over on my back. Her hands clamped down on my wrists and pressed me back into the bed. \n\nOur lips met and she violently thrust her tongue into my mouth. I was eager to kiss her back. \n\nOh, how I wanted to throw my arms around her!\n\nBut she was stronger than me. I pulled against her grasp, but to no avail. She was straddling my hips.\n\nThe white corset glowed in the flickering candlelight. Her hair glistened and her eyes sparkled. McKayla kissed me again and again. Her lips brushed mine. Her teeth raked my neck.\n\n\"Take me, my love!\" I cried out.\n\nShe didn't reply. Instead, she pinned both of my hands above my head. Then she threw her legs over my shoulders, so that her covered pussy was above my mouth.\n\nI inhaled her heavenly scent. She started to grind her hips against me. I tried to nibble at her through the panties and I could taste her excitement. Even her panties were sopping wet.\n\nAfter a moment, she climbed off me and pulled me from the bed. She forced me down on my knees in front of her. I felt her hand on the back of my head, pulling me into her.\n\n\"Take them off,\" she commanded, and I was quick to obey.\n\nLifting her hips only to let me slide the lace down her thighs, McKayla than pulled me into her freshly shaven pussy. I attacked her with my tongue.\n\n\"Fuck, yes,\" she hissed through clenched teeth. \"That's it, Amberle . . . That feels so fucking good, baby!\"\n\nLapping at her pussy, I pressed my tongue into her folds. I could have eaten her out for hours.\n\nShe spread her legs wide for me. I put my hands under her ass, lifting her off the bed so I could get a better angle.\n\nA glorious string of obscenities escaped her lips as I made love to her clit with my tongue. I entered her pussy with two fingers at first . . . then three. She let out a loud moan and nearly fell back on to the bed.\n\nI looked up at her and our eyes met. Hers were hooded over with pleasure. \n\nThose big brown orbs were hypnotic and promised great things later in the night. Her breaths came in short bursts. She bit her lip as I pressed my tongue flat against her swollen clit and then swiped at her forcefully.\n\n\"That's it . . . eat that pussy,\" McKayla moaned. \"Fuck . . . fuck . . . fuckfuckfuck . . .\"\n\nHer pussy clenched around my fingers. I pressed them further inside her even as my mouth worked her clit over.\n\nMcKayla's arms collapsed and she fell back on to the bed. I felt her pussy fill with juices and I sucked them all down.\n\nShe came and came and came.\n\nSoon she was a quivering mass on the bed. She was mumbling something, but I couldn't hear her clearly.\n\nI slowly let her down from the climax until my lips were only kissing her labia, which were puffy and red. Then I slowly began kissing my way up her body, until I noticed she was crying.\n\nTaking McKayla in my arms, I held her for a long time. I cradled her to my breast.\n\n\"I love you . . . I love you, McKayla,\" I repeated softly in her ear, over and over.\n\nShe wiped the tears from her eyes and pulled me to her. \"And I love you, Amberle. I thank God every day for bringing you into my life. I don't know where I would be without you.\"\n\nI looked into her eyes and just held her.\n\n\"Thank you for not giving up on me,\" she whispered.\n\nWe kissed again before I spoke. \"And thank you for not running out on me and the baby. You're the best mommy I could ever want for my daughter and you're the only person I would ever want to be my bride.\"\n\nShe started to say something, but stopped herself. McKayla choked back more tears before closing her eyes and taking a deep breath. As she exhaled, I saw a peaceful look come over her face. She smiled contentedly.\n\nWhen she opened her eyes, her gaze bored straight into me. I melted into her arms.\n\n\"You are the most beautiful woman in the world, Amberle,\" she said. \"And now I'm going to fuck you.\"\n\n\"I am yours, my queen,\" I said rolling on to my back and pulling McKayla on top of me.\n\nDesire filled her kiss. It took my breath away.\n\n\"Are you wet?\" she asked.\n\nI nodded. \n\n\"Prove it. Touch yourself.\"\n\nPulling my skirt up, I reached down between my legs. My fingers were instantly covered by my excitement. My eyes rolled back into my head as I indulgently fondled my pussy.\n\nWhen I was covered with juices, I brought my hand to my lover's mouth. She took my two fingers in her mouth and sucked on them slowly, taking just a little at first and then working down, knuckle by knuckle, sampling the taste of my pussy.\n\nShe reached between us and pushed my skirt up, so that I was exposed to her from the waist down. My thighs and bald pussy glistened in the soft glow of the candles.\n\n\"Fuck me, McKayla,\" I begged. \"Please . . .\"\n\n\"How do you want me?\" she asked, the command slowly creeping back into her voice.\n\n\"You can do anything you want to me!\" I said. \"I just need to have you.\"\n\nMcKayla smiled once again and my heart melted for her. The look in her eye was the one that old me how much she desired me. How much she loved me.\n\nHer fingers went inside the elastic band of her panties. Seductively, she pushed them down past her curvy hips and then kicked them across the room. Still wearing only the corset and her stockings, McKayla moved me into the center of the bed.\n\nI lay on my back and spread my legs in anticipation. McKayla pressed her body against me and we kissed hungrily. She tasted of sweet wine and desire.\n\nReaching around, I gripped her bare ass in my hands and pulled her to me. Her hips started to grind against me. I bucked against her, meeting her thrusts.\n\n\"I love you,\" she said softly. Desperately.\n\n\"Then fuck me,\" I replied. \"I need you McKayla.\"\n\nShe threw her head back, tossing her hair aside. Her big brown eyes shone in the candlelight. \"And I need you, Amberle. I need you to love me.\"\n\nI tried to smile through the tears that came to my eyes. \"You are the mother of my baby and the love of my life. I cannot imagine being without you. I love to hold you. I love to kiss you. I love waking up next to you every morning.\"\n\n\"I know,\" she whispered. \"I hate that . . . one day I'm not going&mdash;\"\n\n\"Shhhhhhh.\" I put my finger over her lips before she could continue. \"No, not now. Not on our wedding night.\"\n\nMy hand brushed the tears off her cheeks.\n\n\"Make love to me, McKayla. Be mine forever.\"\n\nIn response, she leaned over and kissed me. Gently this time. Her earlier rough playfulness was gone.\n\nOur hands roamed each other's bodies. We undressed each other slowly, as if unwrapping the other.\n\nOnce we were both nude, we lay together, kissing each other softly. My hands caressed her soft skin. Her mouth made my spine tingle.\n\nMcKayla's hands cupped my swollen breasts. Maureen was still breast feeding and they were tender, but my love knew how to handle them just right.\n\nI tilted my head to the side as McKayla kissed her way over to my neck. Her teeth raked my skin and she bit my ear lobe, being careful not to take the latex covering off.\n\nGasping, I responded by pulling her to me and kissing the underside of her chin and down to her clavicle. She moaned softly and lifted her chest enough to let me suckle on her breasts.\n\nI took each of her nipples in my mouth and bit on them gently. They were hardened into little points. I pulled on each with my lips and then let them spring back.\n\nMcKayla's eyes were closed. As I kissed my way into the valley between her breasts, I wedged one of my knees between hers and forced them apart.\n\nOur legs crossed and we began grinding in a slow, easy rhythm. We had both shaved earlier in the day.\n\nMy clit was swollen and slick. I pressed my sex against her. She pressed back against me.\n\n\"That feels so good,\" she purred, her eyes never opening.\n\nReaching around her neck, I pulled her down and kissed her eagerly. Our hips moved in time.\n\nThe pace was slow, but intense. My toes were already beginning to tingle.\n\nShe pressed down on me harder. I began to grind faster.\n\nHer breasts were mashed flat against mine. I spread my legs as wide as I could.\n\nWhen she turned her hips just slightly to the side, a jolt shot through my body. I arched my back and cried out.\n\n\"Like that?\" she asked.\n\n\"Yesssss,\" I slurred.\n\nI love having her right after she is freshly shaved. Her bare pussy was smooth as a grape and felt so good against me. I could feel the heat radiating from between her legs. \n\nWe were both slick with sweat and excitement.\n\nFaster.\n\nShe cupped one of my breasts and squeezed gently.\n\nHarder.\n\nMy hands went to her ass and I pulled her into me on each thrust.\n\nThe tingling spread. I could hear the blood pounding through my veins. McKayla's heart raced along with mine.\n\n\"Fuck me, McKayla,\" I managed to say.\n\n\"Are you going to cum?\"\n\n\"Yes . . .\" My insides were on fire.\n\n\"What?\"\n\n\"YES!\" I was so close.\n\nHer eyes were open now. She met my gaze, the intensity of her gaze only fueling the fire within me.\n\n\"Say it!\"\n\n\"I'm going to cum!\" my voice was a plaintive wail, caught somewhere between desperation and exhilaration.\n\n\"Cum for me, Amberle.\" Her voice was strained. I could see the veins in her neck.\n\nOur hips were a blur.\n\n\"Cum with me,\" she whispered.\n\nI threw my head back and screamed. There was an explosion of pleasure that started between my legs and spread to the rest of me.\n\nMy fingernails dug into her back. She cried out with surprise and pleasure.\n\nThe orgasm seemed to go on and on. Waves of bliss wracked my body.\n\nMcKayla collapsed on top of me, spent. I kissed her neck the sweet taste of perspiration on her skin.\n\nI held her close, never wanting to be without her touch. We lay together for a long time. My fingers traced circles on her back. Her hands ran up and down my arms, making my skin crawl.\n\nFinally, she rolled over on to her back. I settled into the crook of her arm, my head on her shoulder.\n\n\"Promise me you'll love me forever.\" \n\n\"I promise.\" \n\n*********************** \n\nWhen McKayla told me about her disease, the conventional wisdom was that she would probably live for at least twenty more years and could possibly live for another fifty. The disease affected people at different rates and there simply wasn't enough research to predict how long we had together.\n\nIt turns out we got twelve more years together. And irony of ironies, it wasn't the Huntington's that got her. \n\nAfter our wedding, we spent the next year in denial about her disease. We knew the symptoms probably wouldn't appear for several more years, so we lived from day to day, always in the moment.\n\nThe first thing we did was go to visit a lawyer. We drew up wills and a custody agreement. We assigned each other medical power of attorney and spent a lot of time, energy and money doing everything we could to become so legally entwined that we may as well have been married. It was important to both of us that the vows we took before God were also binding in an earthly sense. \n\nIf only you straight people knew how easy you have it by just signing a marriage license!\n\nMeanwhile, our daughter grew and grew. She started walking and talking. I stopped breast feeding when Maureen began eating solid foods, and soon she started going to day care a couple of days a week. We settled into a nice domestic routine, made even nicer by the fact that we both knew that we had enough money saved up that we could both retire and live very comfortably if that's what we wanted.\n\nBut there was still something we had to come to terms with, and neither of us wanted to think about it. I always felt like I was on eggshells with the subject of McKayla's disease. I never wanted to bring it up, and neither did she.\n\nFinally, one day we went to see her doctors and got the full scoop. We educated ourselves as best we could and sought out the best advice that was available. We joined support groups, mailing lists and discussion boards.\n\nThey physical symptoms would come first. They would start slowly, gradual involuntary jerky movements. Then they would become more frequent and spread throughout her body. She would lose weight as her body would constantly be in motion. Ever so slowly, she was going to lose control over her body.\n\nThen her memory would start to fade. First her short-term memory. We would have to write things down. She would tell the same story over and over. Sometimes, I was going to have to give her directions three and four (or more) times. \n\nAnd then it would get worse.\n\nOnly once did McKayla ever ask if I was sure I knew what I was signing on for. I looked her in the eyes. My voice was firm and direct. \n\n\"My love,\" I told her. \"I will never leave your side. I promised before God and all our witnesses that I was going to love you forever and nothing on this Earth is going to stop me from fulfilling that promise.\"\n\nThe look in her eyes was heartbreaking, but we both knew what we were getting in to after that night I tried to break the door down at her parents's house.\n\nAs is often the case when people get out of college, start working and have kids, the next few years flew by for us.\n\nMaureen became the one constant delight in our lives. She may not share a single strand of DNA with McKayla, but she is definitely my wife's daughter.\n\nThey walk and talk the same way. Our daughter mimics McKayla's mannerisms. They have the same temperament. And they're both the two smartest people I know.\n\nLike her (other) mother, Maureen is a voracious reader. We buy her books and she blows through them. When she started kindergarten, she was reading at a first grade level. When she started first grade, she was almost to third grade level. Sometimes, she's too smart for her own good, but we don't mind.\n\nI never told Travis about his daughter, and I don't intend to. She has never asked about him, and I hope she never does. Maureen has two mommies and knows we love her more than life itself.\n\nWhen our daughter was three, McKayla came home one afternoon and told me that she had quit her job. I stared at her in stunned disbelief when she asked me to quit my job, too.\n\n\"What the hell are you talking about?\" I said.\n\n\"You don't need to work at the warehouse anymore,\" McKayla said. \"Let's go into business together.\"\n\n\"Doing what?\" I asked. \"Don't tell me you want to open a bar with a bunch of your friends, because only guys do that and boys are stupid.\"\n\n\"No, silly,\" she replied with a smirk. \"Think about it this way: How much of my commission does the bank take off the top of my accounts?\"\n\nI shrugged.\n\n\"About twenty percent.\" She reached into her briefcase and laid a pad down on the table. I looked into the other room where Maureen was playing with one of her little friends from daycare to make sure everything was alright. \"What if we got to keep that twenty percent?\"\n\nShe turned the pad around so I could read the figures at the bottom. My jaw dropped.\n\n\"Think of it as a 25% pay increase,\" she winked. \"We can both work from home and be here full time for Maureen.\"\n\nThe only thing I worried about was whether she would be able to keep all her clients. She said she would lose some of the people who wanted to stay with the bank, but her reputation was strong enough that most of them would stay with her, and she was working to pick up a few more.\n\nAfter a little bit more persuasion, I agreed, went in to work the next day and tendered my resignation. My boss told me he was surprised I stuck around as long as I did and he told me I was welcome back any time. The other guys at the warehouse threw me a big going-away party and McKayla and I started on a new chapter in our lives.\n\nLike everything else, McKayla jumped into the new business feet first. We incorporated ourselves and started working. I knew nothing about financial advising, but I was a pretty good office manager. She handled the accounts, I made sure she knew where everything was.\n\nOur first \"clients\" were some old friends, Allyson and her new husband J.B. She married into some money and they were very happy together. At our first \"business meeting\" (a cookout on the back deck), McKayla showed her some of our new custom-printed stationary.\n\n\"How do you like our new letterhead?\" she asked.\n\n\"It's nice,\" Allyson replied, taking a long pull from her margarita.\n\n\"It is, isn't it? My secretary made it up,\" McKayla said with a wink. She leaned in as if to let our friend in on a secret. \"And just between you and me . . . I'm sleeping with her.\"\n\nThey giggled and I rolled my eyes.\n\nBusiness was good for another couple of years and the time seemed to fly on by. Maureen was an honour student in school. My lover only became more beautiful. We were making money, but that wasn't really important to us. After all, we had enough already, but we were together and doing something we both truly enjoyed.\n\nI took lots of pictures and video of our time together. I think I wanted to make sure that if . . . no, when . . . McKayla started to forget, there would always be reminders of our love for each other and for our daughter.",
        "She didn't want me to know about them, but I found out McKayla was recording messages for Maureen. She told our daughter how much she loved her and how proud she was of her. My heart broke when I accidentally came up on the DVD she had hidden in Maureen's baby book. I watched two of the files, then couldn't bring myself to see my wife face the fact that she knew she was going to be lost to us one day.\n\nThe day after Maureen turned seven, we got the kind of phone call no one should ever have to take.\n\nIt was McKayla's doctor. Her memory was fine and there were no traces of the \"shakes\" as we began calling them. Both of us knew that it was only a matter of time before the symptoms of McKayla's disease would manifest themselves.\n\nThere was an uncomfortable gravity in her doctor's voice as he told us he wanted her to come in and run some more tests after finding something \"funny\" in her blood work.\n\nAfter a second batch of tests, McKayla came back with colon cancer. The doctor thought they had caught it early and after a round of chemotherapy, she had surgery, and then another round of chemotherapy.\n\nShe faced this new challenge just as she had faced every other one in her life: head-on, with a steely determination and me at her side. I think the cancer was harder on me than it was on her. At least that was the impression I got.\n\nWe didn't tell Maureen right away, but she figured it out anyway.\n\n\"It's okay, Mommy,\" she told me with the kind of certainty only seven year-olds have. \"Jesus will look out for Mom.\"\n\nSo we prayed together. I put on a strong face, but there was no doubt in our daughter's mind that her mother was going to get through this. I guess faith was another thing Maureen got from McKayla, because God knows, she didn't get it from me.\n\nAfter the second round of chemo, the doctors declared her cancer-free. McKayla had lost a little bit of weight, but otherwise seemed healthy.\n\nWe continued on with our lives. After all, what choice did we have?\n\nAs we got older, I found myself in church a lot more. Maybe it was because McKayla and I both wanted our daughter to be raised in a Christian environment, but when we first were together, I went because McKayla did. \n\nNow, when I was in church, I talked to God. Not out loud (only crazy people do that), but I prayed. Sometimes I was angry. Angry because God had given the most wonderful woman in the world a disease He did not provide a cure for. Angry because she had done nothing to deserve it. Angry because He was going to take her from me and our daughter.\n\nSometimes I was introspective. What was the purpose of faith? Why did He put us on earth? \n\nAnd sometimes I was simply thankful. Despite all of the bitching I did, the fact of the matter was that I had found my soulmate, we didn't lack for anything and our daughter was healthy, smart and would one day have the world at her feet.\n\nIt's easy to fall into the trap of prayer. I think sometimes we convince ourselves that if we only prayed harder, God will answer them in the way we want. Of course, it doesn't work that way. He only answers prayers in the way He wants.\n\nMany nights, I found myself praying to St. Peregrine, the patron saint of cancer victims, but McKayla only laughed teasingly at me.\n\n\"You don't pray to saints,\" she said one night. \"You pray with saints. You ask them to intercede on your behalf with God.\"\n\n\"Do you pray with them?\" I asked.\n\n\"I don't ask for intercession anymore,\" she told me.\n\n\"Why not?\"\n\n\"Because God has already provided everything I need,\" McKayla said, taking me in her arms. \"I have a wife and parents who love me. Doctors who know what they're doing. A wonderful daughter and enough money that I don't ever have to worry about providing for my family.\"\n\n\"Don't you wish for a cure?\"\n\n\"Every day,\" my wife said, a wistfulness in her voice. Her raven-black hair had some streaks of gray in it and she refused to colour it out. There were some more lines around her eyes, but she was still the most beautiful woman in the world. \"But I know that God won't wave His hand and make my diseases go away. He has a plan for me. He has a plan for you. He has a plan for Maureen and everyone else. We just don't know what it is. That is why we have faith. We have to trust in His will and that when it is done, it will be for the best.\"\n\nShe smiled sardonically, \"Even if it doesn't seem that way at the time.\"\n\nI continued to pray, with St. Peregrine now, but the miracle I wanted never appeared. Or did it?\n\nHer cancer was gone. Her annual check-ups all came back clean. There was no sign of the Huntington's Disease.\n\nWe celebrated our 10<sup>th</sup> wedding anniversary and everything seemed to be going our way. Business was booming. Our little start-up company had grown into a successful niche enterprise. We couldn't compete with the larger firms, but that was okay. Our emphasis was on personal service and we excelled. We soon outgrew the small office in the back of the house and set up shop in a new facility right up the road. We hired a staff accountant, a secretary and two associates in addition to McKayla and I.\n\nAll the while, our family also blossomed. We traveled a lot and made sure Maureen had every opportunity available to her. For a little girl who could have been spoiled rotten, she was surprisingly grounded. She took nothing for granted, she never acted like she was entitled to anything and somehow found the inner motivation to be better at everything than we expected of her. I'm sure she got that from McKayla.\n\nThat night, she went to stay with Nanna and Papaw, leaving my wife and I alone at home. We sat on our favourite spot on the beach. McKayla was behind me on one of the dunes. I leaned back into her arms and we watched the world go by.\n\n\"They started,\" she said softly. \"Last week.\"\n\nI only nodded. Of course I had noticed, but I wanted her to bring it up. Her hands were starting to twitch. Nothing major, and only for short spurts, but the early symptoms of her disease were appearing. \n\n\"What are we going to do?\" I asked after a long time.\n\nShe took a deep breath. \"We're going to fight it. Tooth and nail; I'm not going to let this thing beat me.\"\n\nTurning my head, I kissed her gently. Her voice was defiant, but her tears betrayed the fear she felt.\n\nWe went inside and I took her to our bed. We made love all night until we were exhausted. Then we held one another, knowing that now it was just a matter of time. \n\n*********************** \n\n\"Moms,\" Maureen told us one day after school. \"You'd better sit down.\"\n\n\"What is it, honey?\" McKayla said, joining me and our daughter on the couch. The view out the big bay window was still breathtaking. We had the French doors open letting in a warm ocean breeze. The sound of the waves crashing against the shore was the soundtrack of our lives.\n\n\"I've got something to tell you and I want you to promise me that you won't be angry.\" \n\nMcKayla looked over at me and shot me the do-you-know-what-this-is-about look. I shrugged.\n\n\"I know that you two are always telling me that it's okay to be different and that God loves all kinds of people,\" Maureen continued, making her voice small and meek. If she sounded grown up, it was because even for eleven, she was much too smart for her own good. She took a deep breath for dramatic effect. \"I like a boy. His name is Trevor. We've been eating lunch together.\"\n\nThere was a shocked silence between the three of us.\n\n\"Amberle, is this how we raised our daughter?\" McKayla's brow furrowed up in mock anger. I nearly burst out laughing. \"I thought we taught her better than that.\"\n\n\"But, Mom!\" our daughter cried out, her grin from ear to ear. \"You said you just wanted me to be happy. Why can't you accept the fact that I like boys?\"\n\n\"I'm sure it's just a phase,\" I tried not to giggle, but it didn't work. \"She'll out grow it.\"\n\n\"Yeah, but she won't out grow this,\" McKayla reached across me and pulled Maureen to her, tickling her. The two of them collapsed on to the floor, both laughing for no reason other than sheer joy.\n\nI watched them for a long time, happy that even when we knew that things weren't going to get better, sometimes it's the little moments that are the most precious. If there is one thing that I am thankful for every year on Turkey Day it is the laughter of children. There's just something so innocent about a child who isn't marred by cynicism or pain, doubled over in a fit of exuberance. \n\nThe three of us laughed a lot, sometimes because it was the only thing that didn't hurt.\n\nSoon, we were sitting down for dinner. Maureen said the blessing and then we dug into one of McKayla's favourite meals, chicken and dumplings. Even so, neither my wife nor I ate much; we just picked at our food.\n\n\"So what's he like?\" I asked between bites.\n\n\"He's cute,\" Maureen replied. \"You know that guy you don't like from Channel Eight?\"\n\n\"Who?\" McKayla asked, \"The guy with no chin?\"\n\n\"No, the other one.\"\n\n\"You mean the one who looks like Uncle Ander? Only chunkier?\"\n\n\"Taller, too. That's the one,\" Maureen replied. \"He's Trevor's dad.\"\n\n\"I hope you didn't tell Trevor I don't like his dad,\" McKayla said.\n\n\"I didn't,\" our daughter replied. \"I told him you didn't like that funky thing he does with his eyebrows when reporting the weather.\"\n\nThe rest of the conversation turned to other things at school. We never tried to be Maureen's friend; we were her parents, after all. But we always communicated, even in the moments when we didn't like each other.\n\nAfter dinner, McKayla and I told our daughter that we needed to talk about something serious. I think at first she thought we were getting a divorce, which was a pretty rational thought considering that most of her friends either lived with single parents or were stepchildren to someone.\n\nWe broke the news to her about McKayla's disease and what we knew. She took it quite well, certainly better than I expected. She asked a lot of smart questions. We all cried. \n\nMaureen had figured something was up; she had noticed McKayla's hands shaking, but didn't quite know what to make of it. We told her that there was no chance she would get this disease and that it wasn't going to affect us for many more years. \n\nI was so proud of our daughter for the way she handled herself. She was so mature, a gift from her mother (and I don't mean me). And her faith sustained her. We prayed together that night for God's will to be done, for healing, for comfort, for strength and of course, for world peace.\n\nLife went on for us. We saw doctors for treatments. They put is in contact with some research groups who were experimenting with medications. They told us the best way to stave of her memory loss was to stay mentally active. That meant lots of reading, puzzles and other things McKayla did anyway.\n\nWe cut back on our work, and after a couple of months, sold our business to McKayla's associates for a tidy sum, further securing our financial stability.\n\nNow that we no longer had to go in to an office, McKayla and I began volunteering and campaigning for stem cell research, foundations that focused on degenerative neurological conditions and gay rights groups. \n\nOur families supported us every step of the way. Don and Suzie introduced us to their sizeable network of well-placed friends who had deep pockets and were always quick to write checks for our causes. Ander and Brin, both of whom were married with children of their own, came by to see us often, making sure that Aunt McKayla got lots of time being around the babies she loved so dearly.\n\nOur twelfth wedding anniversary came and then our world changed. Again. \n\n*********************** \n\n\"Are you wearing your present?\" she asked me.\n\n\"Of course.\"\n\n\"Prove it.\"\n\nI spun around and flipped up my skirt. The plug was uncomfortable, yet stimulating at the same time. It was making me wet.\n\n\"Let's go eat.\"\n\nShe led me to the car and we took off down the familiar highway. We lived in the same house. Some of the neighbours changed, but for the most part, it was still the same place I had moved in to over a decade earlier. Of course, its value had gone through the roof and if we ever sold the place, I'm sure we could have bought a small South American country.\n\nWe went to the same place where we had our first date. It was still owned by the same family and they knew us as frequent visitors.\n\nI looked over the table at my lover. She was the same woman I had fallen in love with all those years ago. McKayla was just as beautiful and still took my breath away.\n\nThe two of us talked about the usual stuff married people talk about. Our daughter. What we were doing the next day. Our summer vacation to the Grand Tetons.\n\n\"Why did you ask me out?\" McKayla said, even though she already knew the answer.\n\nI smiled and took her hands in mine. They were shaking, a little more every day. \"Because I was in love with you. Because you are so hot you can make a straight girl go gay.\"\n\n\"I love you, Elven Princess,\" she whispered. \"Don't you ever forget that.\"\n\n\"That is one thing I could never forget, my love,\" I replied, leaning across the table to kiss her. We still get some stares when we're out in public, but you know what? I don't give a damn.\n\nAfter dinner, we went home and took a long walk up the beach, our arms around each other. I kissed her and told her to take me to bed.\n\nWhen we were through the back door, McKayla began peeling my clothes off. I pulled at hers, too, and we left a trail of skirts and bras and blouses and panties all the way to the bedroom.\n\n\"I am so going to fuck your brains out tonight,\" I vowed, pressing my lips against McKayla's. \"This goddam thing in my ass has been driving me crazy all night.\"\n\n\"That was the idea.\" \n\nShe grabbed a handful of my hair and pulled my head back, exposing my throat. Her teeth went to the soft underside of my neck. I shivered with pleasure.\n\nMy hands groped her still-magnificent breasts. We lay on the bed, desperately pressing our bodies together. \n\nHer fingers pinched my nipples. I fingered her clit until she my hand was slick.\n\n\"I want you to ride me tonight,\" McKayla whispered in my ear.\n\nShe rolled me over on my back and reached over to the side of the bed. With practiced efficiency, we fit the strap-on around her and McKayla lay back. I didn't need any lube and slid down on to her thick cock.\n\nA satisfied moan escaped my lips. The windows were open but no one around would hear us. Maureen and a friend were spending the night with Nanna and Papaw so we didn't have to worry about being interrupted.\n\nMcKayla filled me up. Between the dildo in my pussy and the plug up my ass, I was full.\n\nI sat back, knowing that she liked to see my face when we did this. I arched my back, giving her a nice view of my breasts. \n\nBetween my legs, I felt her thumb rubbing the nub of my clit. My hips began to move slowly, as I stretched to accommodate her girth.\n\n\"You are so fucking hot, Amberle,\" she said softly.\n\n\"I'll bet you say that to all the girls,\" I teased.\n\n\"I do,\" she replied with a slight smirk. \"But I you're the only one I want to wake up with.\"\n\n\"Do you remember our first date?\" I asked. I slowed my rhythm, just moving my hips a little bit from side to side.\n\n\"Like it was yesterday.\"\n\n\"Why didn't you come in when I invited you?\"\n\nMcKayla closed her eyes for a second. She smiled at the pleasant memory. Her eyes opened and her gaze softened. \"I wanted to so badly. . . . You don't know how hard it was to say no . . .\"\n\nHer voice trailed off. She took a deep breath.\n\n\"I wanted . . . I needed to take it slow with you,\" her voice was barely audible. \"I knew if I jumped into bed with you, I would just use you . . . I'd fuck you and leave you . . . like I had done so many times before. . . and I . . . I felt guilty.\"\n\nI gave her a quizzical look. \"Guilty? For what?\"\n\nShe wouldn't meet my gaze. She looked ashamed.\n\n\"Do you remember your birthday?\"\n\n\"Yes,\" I said, not sure where this was going.\n\n\"Do you remember what happened between us that night?\"\n\nI smiled. We had talked about this before some years ago. She often teased me about that drunken kiss. \"I tried to make out with you.\"\n\nI stopped moving, forgetting about the toys inside me. McKayla chewed on her lip for a moment. \"After that.\"\n\n\"What happened?\" I searched back through thirteen years of memories to that night that was hazy at best and blank in large spots.\n\n\"Amberle,\" McKayla said, her voice heavy. \"I have a confession to make.\"\n\nHer hands absently caressed my leg. I looked down at her, very curious about anything she might have to say about that night.\n\n\"I took advantage of you,\" she said softly. \"You were passed out in my bed . . .\"\n\n\"And?\" I asked, trying to draw the rest of the story out of her.\n\n\"When we brought you back here, do you wonder why you were in my bed and not in one of the guest rooms with Allyson or Bretlynn?\"\n\nThe thought had never really crossed my mind until now.\n\n\"I . . . I undressed you,\" her face flushed. \"I felt you up and touched you. I wanted you so badly . . . you just can't know, Amberle. I thought you were too far gone, but I kissed you. You kissed me back and then you tried to feel me up before you passed out again.\"\n\nStunned, I could only look down at her.\n\n\"I didn't do anything else, but I stayed in bed with you until dawn.\" Her eyes welled up. \"It felt so good to hold you . . . I had wanted you for so long . . . since that first night Allyson brought me along with you guys.\"\n\nMy hand brushed her tears away.\n\n\"After I took you home the next morning, I came back here and lay in the bed. I could still smell you on the pillows. I masturbated every night that week, thinking about you . . . and having you in my bed.\"\n\nShe tried to smile. \"I'm sorry . . . I should have told you earlier.\"\n\nI leaned over and kissed her gently. \"So in other words, you cheated when you turned me into a lesbian.\"\n\n\"I . . . I guess so.\"\n\nWith an exasperated fake sigh, I shook my head mockingly. \"And I thought I was just switching sides because you girls had cookies.\"\n\nThat made McKayla laugh. \"I love you, Amberle. I have loved you since the day I first saw you. I was just too scared to let myself fall for you.\"\n\n\"I'm glad you did,\" I said reassuringly. \"You have made me so happy. You are the best mother I could want for my daughter. You are my best friend. And you're the best lover I have ever had. . . . And I'm glad you only said no one other time.\"\n\nShe sighed. \"I'm never going to live that down, am I?\"\n\n\"Hell, no,\" I grinned. \"Now you can make it up to me by fucking me until I cum all over you.\"\n\n\"That would be my pleasure.\"\n\n\"No,\" the teasing tone was back in my voice. \"It's going to be my pleasure.\"\n\nWe kissed again, our breasts pressing together and I began moving my hips again.\n\nShe thrust up into me. After years of practice, we knew how to get each other going. Our rhythm was perfect. \n\nWe moved in unison. I cupped her breasts in my hands and leaned forward so she could suck on my nipples.\n\nI straightened out my legs so I was laying on top of her. I started to grind my clit against the top of the dildo. The plug in my ass shifted ever so slightly every time I moved, only deepening the pleasure I felt.\n\nMcKayla's hands were on my ass, pulling me down on top of her. \n\nThrowing my head back, I let loose a feral scream. My vision was blurred but I saw my wife gazing up at me, love in her eyes.\n\nI kissed her again. Hungrily. \n\nMy hips moved faster. \n\nShe thrust harder.\n\n\"Oh, fuck,\" I cried out. \n\nHer hand slapped one of my tits.\n\n\"Oh, McKayla,\" I corrected myself.\n\n\"I'm about to cum,\" my voice was barely a whisper. \n\n\"Yes, Amberle,\" she commanded. \"Cum for me.\"",
        "Arching my back, I came down on her one more time, then my body seemed to burst with pleasure. I threw my head back, knowing McKayla liked to watch my face when the cum hit me.\n\nMy sex pulsed for a long time. The orgasm seemed to go on. \n\nI continued to move my hips, trying desperately to prolong the bliss, until I finally fell into McKayla's embrace.\n\nThe room was still spinning. But as always, McKayla was there to catch me. Her comforting touch surrounded me, and I felt as safe as I always did with her.\n\nLater that night, I made her faint. We drifted off to sleep, not wanting the morning to come. Not wanting to face the hard realities we woke up to every day.\n\n*********************** \n\nWe all stared at the CT scan images: McKayla, me and the doctor.\n\n\"It's about the size of a golf ball,\" he told us. \"And based on what we found in your blood work, it's aggressive, too.\"\n\nMcKayla shook her head and let out a deep, bitter sigh. I tried not to break down right there. Things had been going so well lately.\n\nShe was taking part in a medical study that was testing not-yet-FDA-approved drugs and the shakes were almost completely gone. Her brain was showing no symptoms of memory loss and otherwise she was in good health. And now this.\n\nThe rest of the afternoon was a blur for me. I don't remember half of it. They didn't quite ask, \"What have you had to eat in the last 24 hours?\" but it was close to it.\n\nA couple of days after that visit to the oncologist, McKayla had surgery to remove the lump from her pancreas and we prayed for a speedy recovery. She was put on an aggressive chemotherapy and it appeared to be working for a little while. \n\nBut after another month, they found more cancer. This time it had returned to her colon and was spreading. They tried everything: a different mix of chemo, radiation. We contemplated more surgery.\n\nFinally, when her doctors found it in her spinal fluid and said the next stop was her brain, we knew her time was almost up. I pleaded with her to continue with the treatments, but McKayla firmly told me that she didn't want any more. \n\n\"If I go through all that&mdash;the surgery, the chemo, the radiation&mdash;what's that going to get me?\" she asked through teary eyes. \"Another month? Two? And for what? Feeling like shit after taking a handful of pills or throwing up for two days after the radiation. No, Amberle, I want to die with dignity. I just want to be comfortable and spend as much time as I can with you and our daughter.\"\n\nThe doctors had done all they could, and she resigned herself to the fact that this would mean her death.\n\nI took her home. She was a shell of her former self. She had lost a lot of weight, and her glorious mane of raven-black hair was just now growing back. She seemed so frail, so weak. So unlike the vibrant woman I was used to seeing.\n\nBut her smile never changed. The look in her eyes told me how much she loved me.\n\nFor a while, she tried to function around the house, but she quickly got worse. As the cancer spread, so did the terrible pain. Her body was often hunched over and she had to fight to smile, something that used to come so naturally to her.\n\nAt first, we gave her drugs to numb her, but they made her sleepy and prone to blackouts. She said she didn't want to spend the last weeks of her life in an opium-like haze, so she had her doctor reduce the dosages. She was lucid, but every movement cut her like a knife. I don't know how she could tolerate it.\n\nWe put a hospital bed in our room and soon McKayla was spending more and more time in it, until she became too weak to get up. Four months had passed since they re-discovered her cancer.\n\nMaureen took it well, I think. She kept a blog that we checked regularly. We talked all the time. I think she tried to put on a brave face for McKayla but it was tearing her apart inside. Just like it did to me.\n\nOne day, she came to me and said, \"I want to do something for Mom.\"\n\n\"Anything,\" I told her. \n\nSo we spent the next few days meeting with a lawyer and trying to get our case expedited before McKayla died.\n\nI was sitting in my chair next to McKayla when Maureen came in. My wife had the bed elevated, her legs were propped up in the most comfortable position possible. Maureen was holding an envelope.\n\nShe sat down on the bed, next to her mom and pulled out a stack of papers. She handed them to McKayla. Her eyes got wide and then teared up when she saw the court order.\n\n\"Maureen Rene Goin-Perry,\" McKayla whispered. After we got married, McKayla and I took each other's last names, but never changed Maureen's name. This she asked to do on her own.\n\n\"Has a nice ring to it, don't you think?\" our daughter said.\n\n\"Yes, it does,\" my wife said softly. \"I love you. I always will.\"\n\n\"I know, Mom. I love you, too,\" Maureen replied, slipping into the bed. I watched the two of them cuddle and had to choke back tears. \n\nWhy would You do this to her? I asked in my mind. Why would You take that little girl's mother away from her? Take me instead!\n\nOf course, God didn't answer. He never does.\n\nMcKayla's condition deteriorated over the next few days. Father Stimson came to see us regularly and at McKayla's request, he heard a final confession and administered the last rites.\n\nA couple of nights later, we were sitting up late at night. McKayla had been drifting in and out of consciousness. She looked so frail.\n\nI was reading a book, thinking she was asleep.\n\n\"Amberle,\" her voice was barely more than a whisper. I looked up and saw her brown eyes open. Her lids were heavy, partly from the drugs, partly from exhaustion.\n\n\"Yes, my love?\"\n\n\"I had a dream last night,\" she said, a slight smile coming to her lips. \"It was about our first night together.\"\n\nReaching out, I took her hand in mine.\n\n\"I love you, Elven Princess,\" she told me.\n\nAll I could do was try to smile. \n\n\"Do you remember that night?\" she asked.\n\n\"Like it was yesterday.\"\n\n\"Do you remember how it ended?\"\n\n\"I do.\"\n\n\"You were in my arms. Your head was on my shoulder,\" her hand squeezed mine weakly. \"Your breath felt so good on my skin. Your touch was so soft. I never wanted that night to end.\"\n\nTears rolled unchecked down her cheeks. Mine, too.\n\n\"You slept so peacefully that night,\" she continued.\n\n\"Only because I was with you, McKayla.\" I wiped her tears away.\n\n\"Will you hold me now?\" her voice was strained. \n\n\"Of course,\" I reclined the bed a little and then slipped in under the sheets. I took her in my arms and cradled her to me.\n\n\"I'm glad I'm not going to forget you,\" McKayla whispered. \"That was the worst part for me. Knowing that one day I was going to forget how much I loved you.\"\n\nI kissed her forehead and pulled her in. \"I love you, McKayla.\"\n\nShe put her arm around me. \"And I will always love you, Elven Princess. You mean the world to me. You and Maureen. Tell her that every day for me.\"\n\n\"You can tell her in the morning before she goes to school,\" I said, trying not to let her hear my voice break.\n\nMcKayla fell asleep in my arms not too much later. I held her and drifted off myself.\n\nSometime around three, I got up and went to get a drink of water. When I came back, McKayla's breathing was shallow. I sat down on the edge of the bed and felt her pulse. It was weak.\n\nShe took a string of three or four short breaths, then she inhaled sharply.\n\nHer chest rose one final time and then slowly deflated. \n\nFor the first time in months, all of the muscles in her body relaxed. The pain all went away. She had a slight smile. Her eyes were closed. Her head fell to the side.\n\nMcKayla looked like she was finally at peace. Unmarred by the diseases and demons which had chased her for all these years, she looked so beautiful. \n\nI leaned over and kissed her still-warm lips one more time. \n\n\"Good-bye, my love.\"\n\n*********************** \n\n\"Are you sure you don't need anything else, Amberle?\" Suzie asked.\n\nI shook my head. \"No, you guys have been wonderful.\"\n\nThe week after McKayla died was one big blank spot in my life with only a couple of memories in between. Maureen said I handled everything well. In truth, there wasn't much I had to do. \n\nBefore she died, my wife had pretty much planned out her memorial service and had made all the arrangements. I think she knew there were so many things that were out of her hands, she wanted to take control of the things she could.\n\nAll of our family came in. Most had been in before McKayla died, but everyone came for the funeral. She wanted to be cremated and we did so before the service. She said she didn't want people to see her body as it was after the cancer was through with her. \n\nThe church was packed with the people who loved her: family and friends.\n\nI was grateful for the way the parish reached out to me. Over the years, I found out that even though the official stance of the Roman Catholic Church opposed homosexuality, the congregation we were in did not. They included us as they did anyone else, and the way they supported McKayla and I was not lost on us.\n\nThe one thing I remember about the service was that people laughed a lot. Don told a handful of funny stories about McKayla from her childhood. Father Stimson shared a slide show he and McKayla had put together about herself and some of the other people in the audience. The service truly was about celebrating her life, not mourning her death.\n\nMaureen spoke, too. I couldn't believe that for someone who was just shy of thirteen, she could be so wise. And I could see so much of her mother in her. I was so proud of my little girl. She was so strong, so eloquent. I knew that even though McKayla was gone, her spirit lived on in our daughter, whom she had raised to be her own.\n\nAnder and Brin stayed for a couple of days. \n\nDon and Suzie for a bit longer. The three of us sat at the kitchen table. Maureen had just left for school.\n\nThe worst part for me was coming up. The past week had been filled with visitors and people whose shoulders I could lean (and cry) on. There were things for me to do, places to go, stuff to take care of. Now it would just be me and my daughter, alone for the first time.\n\nHer parents had brought some of McKayla's things with them. Things they said we should have. Pictures, old dolls, that sort of stuff.\n\n\"I don't think you really know how much you meant to McKayla,\" Suzie said. \n\nAll I could do was force a smile. People had been saying stuff like that to me for a week.\n\n\"No, really, Amberle, you saved her life,\" she said.\n\n\"I wish I could have,\" I replied blankly. \"I wish all this had happened to me, not her. I wish there had been some miracle for her . . .\"\n\nSuzie squeezed my hand sympathetically. \"There was a miracle.\"\n\nI looked up at her blankly.\n\n\"Did you know that when she was in college, McKayla tried to kill herself once?\"\n\nBlinking in surprise, I shook my head.\n\n\"She had just 'come out' and I think she was feeling lonely and depressed. Somehow she got her hands on some pills and took a handful. Her RA found her; they pumped her stomach and saved her,\" Suzie looked over at Don, who had a dark look on his face. \"McKayla was miserable for so long. She was looking for acceptance, for love. I think that's why she had so many one-night stands. . . . Yes, we knew. . . . She wanted someone to love her and maybe confused that with sex . . .\"\n\n\"She was also afraid of relationships because she knew she might have the same disease as her dad,\" Don said, picking up where his wife left off. \"We never told her, but I think she knew this: her dad didn't die in a hunting accident. He went out in the woods and shot himself right after he started getting the first symptoms. He saw how his mother had suffered and didn't want to go through the same thing.\"\n\nI stared at him in disbelief. McKayla had never told me this.\n\n\"Some of his friends found him a little while later and one of them was a deputy sheriff who got the coroner to declare it an accident, not a suicide,\" he continued. \"We told her that she might have the disease but she never wanted to know. I think she avoided commitment because she didn't want to break anyone's heart.\"\n\nThen why me? I wondered inwardly.\n\n\"When you two started seeing each other,\" Suzie continued. \"She was so happy. She told us that you were the best thing that ever happened to her. And she was so excited about the baby . . .\"\n\nI smiled unconsciously, remembering those first happy months we had together.\n\n\"But she knew there was this cloud hanging over her, something she needed to find out. And so she did. I think she was afraid to tell you about it and thought you'd leave her.\" Suzie reached out to Don, needing his support. \n\n\"When she came home that night, the night she left you, we prayed,\" Suzie continued. \"That was the only time we ever prayed directly for a miracle. We prayed for healing. We prayed for guidance. We prayed for strength.\"\n\n\"Then why didn't God answer,\" I shook my head bitterly. \"Why didn't He provide?\"\n\nSuzie smiled warmly. She understood why I was so angry. She was hurt, too. However, she had something I didn't: faith. \n\n\"God did provide,\" she said. \"God gave you the means to take care of her. You don't want for money. Neither of you had to work unless you wanted to. Sometimes the answers to our prayers are already here. You got her the best medical treatments. The healing we ask for doesn't always take the form of a miraculous recovery; it's the doctors at the hospital or the nurses from Hospice.\"\n\n\"Why would He do this to her?\" my voice broke. \"Why would He do this to us? Why would He deny her miracle?\"\n\nI felt Suzie's arms around me as I sobbed. She pulled me to her and let me cry.\n\n\"God gave McKayla a miracle,\" Suzie said gently. \"He sent her you. You loved her. You cared for her. You gave her the child she always wanted. You were at her side in the good times and the bad. You tried to kick her door down because you loved her so much you wouldn't give up on her. I think without you, she would have died a long time ago.\"\n\nMy body convulsed as she held me.\n\n\"These last thirteen years were McKayla's miracle,\" Suzie said. \"None of us wanted things to happen this way, but that's not for us to decide. God put each of us on this earth for a reason, and we thank Him every day that He brought you into McKayla's life. You saved our daughter and gave us the granddaughter McKayla couldn't have on her own. You were the answer to her prayers. And to ours.\" "
    ],
    "authorname": "HLD",
    "tags": [
        "romance",
        "huntington's disease",
        "pregnant"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/mckaylas-miracle-ch-03"
}
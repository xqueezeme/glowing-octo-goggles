{
    "title": "Nanny Sarah Pt. 02",
    "pages": [
        "This is an edited version of Nanny Sarah Pt. 02. Thanks again to my proofreader, Bi_Cathy.\n\nThis is the second part of a two part story. YOu'll need to read that first or you'll be lost. All characters involved in explicit scenes are over 18. Comments and constructive criticism are greatly appreciated.\n\n*******\n\nIt was a grey Tuesday morning, one of those wet, low forties days we get here in December. I was just sitting at my desk, staring at one of my mom's glass snow globes. I'd brought a couple in to liven up my workspace. My phone buzzed, and then it did it again. Someone was actually calling me.\n\nI half expected it to be a telemarketer, but when I turned it over I saw Sarah's face on the screen. My brow furrowed slightly. She didn't usually call me at work. I'd get texts from her throughout the day, whenever she took Heidi somewhere, or when they got home from school. \n\nI pressed the green 'accept' icon. \"Hello?\"\n\n\"Mommy?\"\n\nThat sat me up straight. \"Heidi? Honey, why do you have Nanny Sarah's phone?\"\n\n\"Mommy, something bad happened.\" Her voice was halting, like when she was trying to settle down from a tantrum. \"Nanny Sarah's crying.\"\n\nI could feel my heart pounding. \"Where is she, honey?\"\n\n\"On the couch, by the front door.\"\n\n\"Did she hurt herself?\"\n\n\"No. Someone called her and she started crying.\"\n\nI took a deep and steadying breath. Sarah wasn't hurt; Heidi wasn't hurt. But something was going on. \"Okay, honey, take Nanny Sarah the phone.\"\n\n\"Okay.\" I heard the sound of little feet walking, and after a moment I could hear heavy breathing and sniffling, as well as voices in the background. \"Nanny Sarah, it's mommy.\"\n\n\"Heidi? What? ... Oh, honey.\" The phone changed hands. \"Hello?\"\n\n\"Sarah?\"\n\n\"Oh, Connie, I'm sorry, I....\" She broke down again, and I could hear Heidi crying in the background.\n\n\"Sarah, what's wrong? You're scaring me. Are you okay?\" Stupid thing to ask. It was quite obvious she was not okay.\n\n\"My brother called. My dad had a heart attack. He's gone.\"\n\nI felt a hole open up in my stomach, and my heart dropped through. The terrible memories of the night my own father died came rushing forward. \"I'll be home as soon as I can.\"\n\n\"Thank you.\"\n\n\"Of course. Let me talk to Heidi.\"\n\n\"Mommy?\"\n\n\"Honey, everything's going to be okay. I'm coming home. Be very good until I get there.\"\n\n\"Yes, mommy. Mommy? Does Nanny Sarah need a hug?\"\n\nMy heart swelled at my daughter's spirit. \"Yeah, honey, I think that would be wonderful.\"\n\nI disconnected the call, brought up my contacts and scanned for Joan's name.\n\n\"Hello?\"\n\n\"Joan, it's Connie. Are you home?\"\n\n\"Well, you called my landline, dear, so yes. What's wrong?\"\n\n\"Sarah's father had a heart attack.\"\n\n\"Oh, sweet Jesus, is he...?\"\n\n\"He passed away. She needs to go home. I can't be home until...\" I looked at my schedule. I had a conference call at eleven that I had to be here for, but my afternoon was clear. \"Probably a little after twelve.\"\n\n\"Okay, I'll head over. Be safe.\"\n\nLuckily my boss and the rest of my team were very understanding, and I pulled into my garage at around twelve-thirty. Sarah's Kia was still there as I rushed inside. The scene was surreally calm. Joan and Heidi were in the kitchen baking cookies, the whole downstairs smelling of molasses and brown sugar. I gave Heidi a hug as I looked questioningly at Joan, who nodded towards the stairs.\n\n\"She's in her room, getting packed up. Go on, I think she'd want to see you.\"\n\nAs I crested the stairs I noticed her door was open, which was odd. I stood in the doorway, listening to the rummaging sound emanating from the little closet. A suitcase sat on the bed, clothes neatly packed inside, which amazed me. If I'd been packing under these circumstances they would have been strewn everywhere.\n\nI knocked gently, which brought no response. \"Sarah?\"\n\nShe came out of the closet holding a conservative black dress. I could see the tear lines on her cheeks, but she'd pulled up an emotional wall, and her voice was steady and strong.\n\n\"Hi. I'll be ready in another ten minutes or so.\" She began to fold the dress.\n\n\"Wait just a second.\" I ran to my room and returned with a garment bag. \"Hate to see it get wrinkled.\" I walked around the bed and laid it next to her suitcase.\n\n\"Thanks.\" Sarah picked it up and unzipped it, sliding the dress inside with the hanger poking through the top. She didn't even look at me while she did it.\n\n\"Sarah?\"\n\n\"I'll try to be back as soon as I can.\" Her tone was formal and crisp, but I could hear the pain behind it.\n\n\"It's fine, take as much time as you need.\"\n\n\"Thank you.\"\n\n\"I'm so sorry, Sarah.\" I reached out to put my hand on her shoulder, but she pulled away.\n\n\"Connie, I really need to get this done.\"\n\nI felt like she'd kicked me in the gut. I had to remind myself that this wasn't about me. \"Okay, I'll be downstairs if you need anything.\"\n\nSarah jerked her head in acknowledgement and disappeared into her bathroom. I backed slowly through the door, gently pulling it shut behind me. I leaned against the wall, fighting back tears. All the way home I'd imagined holding her as she cried, letting her know she was loved and cherished. But she didn't want that. She didn't want to be loved by us, by me. And dear god that hurt.\n\nMy composure finally reasserted itself and I made my way back downstairs. Joan looked up at me, and I just shook my head. \n\n\"Is Nanny Sarah okay, mommy?\" Heidi's eyes were shining with tears.\n\n\"She's very sad, honey. But she's trying to be brave.\" \n\nSoon the thump-thump of a suitcase coming downstairs could be heard, and Sarah entered. \n\n\"I need to get going.\"\n\nI nodded, not trusting myself to speak. Heidi climbed down off her stepstool and ran to her, arms outstretched. Sarah went down to a knee and hugged her tight.\n\n\"I love you, Nanny Sarah.\"\n\n\"I love you, too, munchkin. I'll be back soon, I promise.\" I saw Sarah's barrier crack slightly, but she held it as she stood. \"Bye, everyone.\" She was still avoiding my eyes. \"I'll text when I get there, and when I know anything timing-wise.\"\n\n\"Safe trip.\" It was all I could manage. Sarah looked at me for a moment, and I could see her mask start to crack. She pulled her gaze away quickly, thanking Joan for everything, and she was out the door. \n\nI wandered into the sitting room, watching as Sarah's little Kia backed down the driveway and onto the street. I stood in stunned silence, suddenly feeling so alone.\n\nA motherly arm slid around my shoulders. \"She'll be okay, Connie.\" \n\n\"Yeah.\" I drew a shaky breath. \"She's the strongest, most together person I know.\"\n\n\"You care for her, don't you?\"\n\n\"Of course I do. She's so good with Heidi. She's kind and sweet ... she's wonderful.\" My voice was a whisper as I finished.\n\n\"Oh, child, you're in love with her, aren't you?\"\n\nI couldn't hold back the sob that jerked from my chest. My head dropped, staring intently at the floor as I nodded yes. \"Do you hate me?\"\n\nI felt myself pulled into a hug. \"No sweetheart. You're like my own daughter. I've seen you grow up, I've watched you, and I am not a stupid woman.\"\n\n\"How does everyone know this but me?\" I laughed, wiping a tear from my eye as we separated.\n\n\"Come on.\" Joan led me by the hand over to the sofa. \"You know, your parents weren't stupid either, and it didn't escape their notice you were never terribly interested in boys. They'd discussed this possibility, and I can tell you for a fact they would have supported you no matter what.\"\n\n\"Really?\"\n\n\"Of course. You have a little girl. Is there anything she could do...?\"\n\n\"No, of course not.\"\n\n\"That's right. They loved you, and they were proud of you.\" Joan reached out and put her hand on my knee. \"And they would have loved Sarah. But the real question is how does Sarah feel?\"\n\n\"If I could answer that....\"\n\n\"I know. There's only one way to find out, you know.\"\n\nI nodded. She was right. Thinking over the last months, we'd gotten so close. She'd only been gone a few minutes, and already the house just felt empty without her. The little touches when we passed each other, cuddling on the couch under our afghan, the kiss we'd almost shared at Thanksgiving. I couldn't be misreading those, could I? No. I wasn't. That moment on the couch, that had been real, and it had been mutual.\n\nBut why had she been so cold just now? I thought back to when my mom died. I'd pushed everyone I cared about away. I remember feeling so numb, but with all that grief in the back, pounding away like a monster in a closet. I'd felt like if I'd let someone comfort me, the monster would break free and I might dissolve. But I'd needed them. The fact they were there, that they cared, it had meant everything, even when I'd hated them for it. In a moment I knew what I needed to do.\n\nBetween Joan, the daycare at work and my boss I worked out the rest of the week's childcare. Sarah eventually texted.\n\nSarah -- Got here OK. Services Sat., Meeting on Mon w/ lawyer for reading dad's will. Told them I wasn't sure if I could stay?\n\nMe -- Of course you can stay.\n\nSarah -- Thanks. Home Mon. PM\n\nMe -- OK. We miss you.\n\nSarah -- I miss you, too. Give Heidi my love.\n\nI responded that I would before pulling up the Calvin College Website. Dr. Theodore Peters's death was the banner headline, along with a picture of Ted smiling behind his ginger beard. Reading down I saw they were having an eleven AM visitation with a memorial service at two PM. There was a gravesite service for family only to follow. I sent a text to Lauren to call me as soon as she could, and a little after nine-thirty my phone sounded.\n\n\"Hey.\"\n\n\"Hey, yourself. Plugging my phone in for the night when I saw your text. What's up?\"\n\n\"Sarah's dad died this morning.\"\n\nLauren gasped. Rick's voice sounded in the background and Lauren relayed the information.\n\n\"They live in Michigan, right? Are you going up?\"\n\n\"That's actually why I was calling. Services are Saturday. I'd like to go, but I don't want to take Heidi. It's a long way and I don't know how she'd do with a funeral.\"\n\n\"Do you want us to take her this weekend?\"\n\n\"Pleeeease?\"\n\nShe pulled the phone away from her cheek. \"Honey, can Heidi stay with us Saturday and Sunday? Connie wants to go up for the funeral.\"\n\n\"Of course.\"\n\n\"Sure, sweetie, just bring her over. And good luck.\"\n\nThe tension inside me ratcheted up as the last barrier I had for going fell away. We talked for a few more minutes, discussing the particulars. It was a four plus hour drive, so I'd have to drop Heidi off around seven AM. That segued into dinner and a sleepover invitation for Friday night. Lauren lived further north than I did, so that was perfect. \n\n***\n\nFriday night found us at Rick and Lauren's. Heidi was terribly excited about spending a whole weekend with Sylvia at Aunt Lauren's house, which, of course, was way cooler than our boring old homestead. She'd originally wanted to come see Nanny Sarah with me, but a promised Saturday trip to Christmas at the Zoo changed her mind. Kids are so fickle. \n\nI sat contentedly on the sofa, trying to digest the incredible homemade lasagna I'd had too much of. I was also holding little Joseph while Rick had a tea party on the floor with the girls. Lauren was on my left, reveling in a moment of calm. She took a sip from her mug of hot buttered rum. \n\n\"Have you heard from Sarah yet?\"\n\n\"I texted with her some last night. She seemed pretty wrung out. I get the feeling that her brother and sister are letting her handle everything.\"\n\n\"That's not fair.\"\n\n\"No, but they all have families, so short straw.\"\n\nLauren took another sip. It smelled amazing, I was going to have to get some when I put Joseph down, but I didn't want to do that yet. I might throw some real rum in mine. \n\n\"Did you tell her you're coming up?\"\n\n\"No, I don't want her to worry over me, which she would.\"\n\n***\n\nI have to admit I questioned that decision often on the drive up. It turned out to be a dry, crisp wintery morning, with temperatures just above freezing as I left. A few hours later a few pockets of white began appearing as I approached Michigan, solidifying into a uniform blanket of snow as I came near the lake. \n\nMy sunglasses went on as the glare from the crystal white covering made me squint, but the roads were clear and I found myself in Grand Rapids before eleven. \n\nLuckily my hotel offered early check-in, so I was able to change and apply my make-up before heading down to the chapel at the college. The woman in the mirror looked nervous. I ran my hands over my long, slightly shabby black overcoat. Underneath was one of my best presentation suits, black slacks and jacket with a ruffled blouse. It's what I wear when I want to look serious. I left my dark hair down, though, falling in my natural waves just to my shoulders. I'd thought about putting it up, but that seemed too severe for the occasion.\n\nI found the campus easily. It was beautiful, bare trees under a blanket of recent snow. Christmas decorations were everywhere, and the place just seemed alive, despite the sixteen-degree weather. The roads and sidewalks were clear, as were the signs leading me to the chapel. It was a round building, set up on a hill, with a central spire reaching towards heaven. And it was packed. \n\nI had to park a good distance away. As I got out of my warm SUV I pulled my worn out hood up against the cold December wind as I made my way to the entrance, along with at least a dozen others hurrying to beat the chill. As I entered, a silver haired man in an impeccable black suit handed me a bulletin.\n\nTed's face smiled out from the cover, cherub cheeks red above his ginger beard. It was a kind, intelligent face. I remembered it laughing at my jokes, or trying to cool down after a mouthful of horseradish covered shrimp.\n\nThose entering were ushered up the left staircase where the receiving line stretched out the door of the sanctuary itself. I took my place in the queue, quelling my nervous energy by chatting with the older woman and her husband in front of me. A few minutes later we entered the sanctuary. People were everywhere, the soft murmur of voices in respectful conversation, punctuated oddly by the running feet or peeling laughter of a small child. \n\nThe casket was set in the center of the room, the top half of the lid completely removed so the deceased could be seen from all angles, since the chapel was built in the round. Flowers surrounded the stage and lined the outside walls. Somewhere among them were the ones that I had sent, but I had no idea which ones.\n\nI could see Maggie clearly as she stood next to her husband's body. She was dressed head to toe in black, with a small hat and veil. Her arm was linked through one of a younger man at her side, whom I recognized from photos as Sarah's brother Matthew. He had his father's pleasing face, if not his red hair. A shorter, plump woman stood next to him, which marked the limit of my view from the top row of seats. That was Linda, Matthew's wife.\n\nAs we turned the corner to start descending I caught my first glimpse of Sarah, standing to Linda's left. She hadn't seen me yet, so I took a moment to look at her. Her walls were up, tight as she could hold them, but they were under assault. For as much as she held her no nonsense, all business face, those eyes betrayed the pain and grief battering against her. It broke my heart.\n\nI'd been there, all too recently. Get through another handshake, another hug, another banal platitude, pass them off to whomever was standing to your left. Turn to the next and do it again. \n\nSo intense was her focus that she didn't see me until I was only about fifteen feet away. She glanced up at the line, taking in its length before looking away. Her eyes widened and she turned slowly back, gaze locked on mine. A million butterflies erupted in my stomach as I desperately prayed this was okay. And then her walls crumbled. She covered her mouth with her hand, jaw trembling behind it. Her eyes shone with tears as she took a step forward, barely keeping her balance.\n\nShe reached out with both hands and I stepped out of line. She staggered towards me, sobs shaking loose from her chest. I closed the distance between us and gathered her into my arms, holding her close as she wept bitter tears. I rocked her gently. \"Let it go, let it all go.\"\n\nI imagine people were staring, but I didn't care. A primal part of me growled in defiance, understanding only that my beloved was in pain, and dared anyone to try to hurt her again.\n\nSarah cried for nearly five minutes, as I simply supported her. Knowing her as I did, I guessed this was the first time she'd let herself grieve since she'd gotten that phone call. \n\n\"C'mon, let's go sit down.\" She didn't answer or let go of me, but she turned her hips so I could walk over to the first row of seats. I lowered us down carefully and Sarah pulled away slightly.\n\n\"Oh, I ruined your coat.\"\n\nI chuckled through my own tears. \"Stop it, you did not. It's just a little wet and snotsy. I'm a mom, I'm used to snotsy.\" Sarah laughed, a shy smile forming that warmed my heart. I reached into my purse and pulled out a pack of Kleenex, taking a tissue and dabbing at her cheeks a little. Sarah put her head back on my shoulder and a few more tears seeped out. \"What now? What do I do now?\"\n\n\"You go on. You wake up tomorrow and live your life, even though it hurts like hell. But you do it, because there are still people who love you and need you.\"\n\nSarah moved against my shoulder, looking up. \"You practice that speech?\"\n\n\"It's not mine. It's what Joan said to me at my dad's funeral. I hated her for it at the time. But she was right, as usual.\"\n\n\"Yeah.\" Sarah sat up. \"Don't take this the wrong way, but how are you even here?\"\n\n\"Well, I knew my four-wheel-drive SUV would be no match for a Michigan winter, so I hitched several of the local dogs to Heidi's plastic sled and yelled 'Mush!'\n\nSarah smiled, a real smile. She arched her eyebrow at me.\n\n\"Really. Mrs. Freeney's Yorkie was a surprisingly good lead dog until Sean Callaghan's Newfoundland ate her.\"\n\nThat earned a laugh, followed by a shaky sigh.\n\nI let my eyes get serious for a second. \"I wanted to be here for you, in case you needed me. I couldn't imagine being anywhere else.\"\n\n\"I wanted you here so badly. When you were in my room while I was packing I was mad at you, 'cause you weren't coming. I'm sorry, it was stupid of me.\" Sarah took a deep breath and looked back at the receiving line. \"I need to get back.\" She stood up, taking my hand. \"Come on, let me introduce you.\"\n\nWe slid into line just behind a young man shaking Sarah's mom's hand. As he moved away Maggie looked at me. Her expression was cold and hollow as I expressed my condolences.\n\n\"Good of you to come, Ms. Walker.\"\n\n\"Anything for Sarah.\"\n\nA glint in her eye told me she didn't like that answer at all, and she turned to the next person in line. I wasn't going to judge her, though, not here. The tall, broad shouldered man standing next to her was a different story. I recognized his father's kind, intelligent gaze as Sarah introduced her brother Matthew. He shook my hand warmly as I told him how sorry I was. \n\n\"Thank you. It's a pleasure to meet you, Connie, but I wish it were under different circumstances.\" He, in turn, introduced his wife Linda, who was soft spoken and shy. But that didn't imply weak. I could see the mama bear lurking behind her softly rounded features. \n\nWe waited a moment as the line moved on, and suddenly I was standing in front of one of the most beautiful women I'd ever seen. Rebecca, Sarah's younger sister, was several inches taller with bright, copper red hair. Her figure was slimmer than her sister's, with pale, porcelain skin. She had her father's keen look, but without the warmth and humor. As I shook her hand in I noted the sharp contrast between her cold hand and Sarah's warmth. As beautiful as she was, I knew which one I preferred. ",
        "Rebecca introduced her husband Jonathan, who looked like he'd just stepped off the cover of GQ. They were friendly enough, though, and too soon I had to leave Sarah to sit down. I stayed in sight as the rest of the mourners filed past, and for the next hour I watched Sarah as she dealt stoically with all comers. She glanced at me frequently, hopefully taking strength from my presence.\n\nFinally the line ended, the funeral director standing at the back, turning some well-wishers away. He announced over a wireless microphone that services would begin in twenty minutes' time.\n\nAs the last of the queue finished Sarah made her way over to me, the warmth in her eyes contrasting sharply with the cold stares I was getting from her mother.\n\n\"Hi.\" I gave Sarah a warm hug.\n\n\"Connie, will you sit with me during the service?\"\n\n\"Of course.\" I tried to hide my surprise, but Sarah's steady eyes told me she was serious. \"Are you sure? I don't want people to....\"\n\n\"I don't care. I'm going to need a shoulder. I want it to be yours.\"\n\nI just nodded, looking deep into her emerald green eyes. She'd made her decision, as she always did, and a great swell of love rose up in my heart. Sarah took my hand and lead me to the family section, where I sat between her and Jonathan. She never let go of my hand.\n\nThe service lasted just shy of an hour. The college choir provided the music, which was beautiful. There were several speakers, each extolling the virtues of the deceased. Matthew spoke at the end, admirably holding back his tears until he was finished. \n\n\"My father was never afraid of love. He knew when love needed to be tough, and when it needed to be soft. He was never shy with discipline, for to him it was a form of love. Just as God disciplines those he loves, so too did my father. But he also said the words, even to a rebellious teenage boy so angry with him he couldn't see straight. And so I take these lessons from a man who spent his life teaching. Take the time to get to know the people you love. It sounds obvious, but it isn't. Study them. Work out how they need to be loved. And do those things. Nothing will ever bring you closer. And also, never be afraid to tell those you love how you feel. No matter what other people say, and even if you think they already know. Dad, I love you, and I miss you, and I promise to take your lessons to heart. What better tribute is there?\"\n\nSarah's hand slowly tightened in mine, and her tears were flowing again. As I handed her a tissue she leaned her head against my shoulder. Is it wrong to be happy at a funeral? I was pretty sure Ted would have been happy for me, so I gave myself a pass. Besides, I was only doing hat he'd asked.\n\nAs things concluded the funeral director stepped up and thanked everyone for coming. He called the family forward to say their goodbyes.\n\nSarah linked her arm in mine as I lead her forward to the casket. My heart broke for her as she spoke softly to her father for the last time, and I made my own silent promise to him to care for her for as long as she would let me.\n\nSarah leaned heavily on me as we walked out. A woman from the funeral home asked our names before handing over a magnetic purple funeral flag for the car. I made eye contact with Matthew, wordlessly letting him know I'd get Sarah to the gravesite. Linda brought me Sarah's coat from the rack, and we stepped out and made our way to my Escalade. \n\nAs I pulled into line I could see the casket being loaded, and we were off. We drove away, Sarah taking my hand.\n\n\"Thank you.\"\n\n\"Of course. Anything.\" \n\nThe procession consisted of about a dozen vehicles, far fewer than would have been necessary for everyone who had come. We still had a police escort, though, and the cemetery was not far away.\n\nAfter arriving, we parked along the narrow lane near the grave, and I ran around to help Sarah out of her seat. Matthew and the other pallbearers were carrying the coffin over the wide matt walkway that had been laid over the snow, which lead to the canopy covering the site.\n\nThe crisp winter morning had given way to a dreary afternoon, and the wind bit through my old overcoat. Luckily the canopy had sides that could be dropped, and it was far more comfortable when that was done. The failing December light forced the service to be brief, and after a few words from the minister and a verse of 'Amazing Grace', Sarah's father was lowered to his final rest. \n\nI've been to too many funerals. Three grandparents, two parents, even a friend from college. They didn't get any easier. My eyes began to burn with tears, and without thinking I slid my arm around Sarah's shoulders. That got a sidelong glance from Maggie, but Sarah just leaned into me and returned the gesture, and we held each other as the coffin descended. \n\nIt was a little after five and the sun was down when we arrived at the Peters' church, where a dinner had been prepared. I sat down with a plate of pasta and salad, across from Matthew and Linda and their children. Matthew was as charming and friendly as I'd imagined, bragging gently on his three kids and, especially, his wife, but without any air of pomposity, and he listened intently to my own stories about Heidi. Sarah and Rebecca were making rounds, going from table to table to thank people for coming. \n\nEventually they made their way over us, while Maggie stayed away, sitting with several older couples Matthew identified as his aunts and uncles. \n\nAfter some conversation I found myself warming to Rebecca and Jonathan, who were far more down to earth than their cover model looks had led me to believe. Rebecca, especially, carried that practiced confidence you see in doctors and lawyers, but she spoke kindly and her eyes always softened when she looked at or spoke about her husband or baby.\n\nSarah and Jonathan stood up to go get plates, Sarah putting her hand on my shoulder. \"Do you want anything?\"\n\n\"No, thank you. Go get some dinner.\"\n\nAs they left Rebecca fixed me with that lawyer's gaze they must teach in law school. \"It meant a lot to Sarah that you came.\"\n\n\"She means a lot to me, and Heidi. I couldn't imagine not being here.\"\n\nRebecca nodded. \"Yeah, she talks about you all the time, you know. You seem more like best friends than employer/employee.\"\n\n\"I think of her as a friend first. We've gotten close.\" \n\n\"How close?\"\n\n\"Becca!\" Matthew leaned forward in his chair. \"I'm sorry.\"\n\n\"No, It's okay. Not as close as you're implying. Why? Would that bother you?\" Might as well see what I'm up against. \n\nRebecca glanced over to be sure Sarah wasn't back yet. \"No, it wouldn't. I love my sister. We both do. She's the kindest, most giving, most selfless person I've ever known. But she's lonely, always on the outside of a family, looking in, be it ours, or the people she works for. A lot of that loneliness has been missing these last few months. She's happy, in a way I've not seen for a long time. But I don't want her to get hurt.\"\n\nJonathan appeared at her shoulder with a plate for his wife. Sarah came around the table and slid in beside me.\n\n\"What were you guys talking about?\"\n\n\"You, funnily enough.\" Sarah's cheeks colored. God, she was adorable.\n\n\"What about me?\"\n\n\"Your siblings were just telling me how amazing you are. I was agreeing with them.\"\n\nSarah reddened further. \"Oh, stop it.\"\n\nI leaned in and whispered in her ear. \"Never.\"\n\n***\n\nWhen the dinner wrapped up I headed back to the hotel. It'd been a long day and I wanted to FaceTime with Heidi before I crashed. \n\nI took off my make-up and threw on a t-shirt and jeans before lying down on the bed and calling Lauren. A minute later my precious baby's bright face filled the screen, excitedly telling me about her adventures at the zoo. I waved to Sylvia in the background to cries of 'Hi, Auntie Connie!'\n\nI spoke briefly with Lauren, telling her a little about the day before tossing my phone on the bed stand and settling my head into the pillow. \n\nI was just considering flipping on the tube when my phone rang. I figured it was Heidi calling to say good night, so I answered without looking. \n\n\"Hello?\"\n\n\"Connie?\" Sarah's voice was trembling, and I sat bolt upright. \n\n\"Sarah? What's wrong?\"\n\n\"Are you at your hotel?\"\n\n\"Yeah, of course.\"\n\n\"Can I come over, please?\"\n\n\"Sure. Are you okay? Do you want me to come get you?\" She was obviously fighting back tears.\n\n\"No, I ... I can make it.\" Sarah disconnected and I sent her a text with the hotel name and my room number. Less than fifteen minutes later there was a knock at my door. Sarah looked miserable. She was still wearing her black dress from the funeral, tear tracks staining her cheeks. \n\n\"Oh, honey.\" I pulled her to me, holding her as she cried. I led her over to the bed and sat her down before fishing some Kleenex out of my bag. \"What happened?\"\n\n\"Mom and I got into a fight.\"\n\n\"About what?\"\n\nSarah stared down at her knees as I sat next to her. I put my arm around her and she took a breath. \"About you.\"\n\n\"Me? What? Was she upset I came?\"\n\n\"No, it was me. I ... God, this is stupid.\" She sniffled and put her head on my shoulder. \"She yelled at me for making a scene, for embarrassing her with a woman like some kind of lesbian.\"\n\n\"I'm sorry, I just...\"\n\n\"No! No, don't ever be sorry. I needed you today, and you were there. I couldn't have done it without you.\" She put her hand on mine and looked me in the eye, her voice a whisper. \"It's what I was doing when I saw you in line, wishing you'd just appear. I was imagining you holding me, and then you were there. Thank you.\" \n\nHer voice broke with emotion. I couldn't say anything, so I just pulled her to me.\n\n\"Can I stay here tonight?\"\n\n\"Of course.\" I felt my pulse race. A quick mental survey of the small room told me she couldn't possibly mean anywhere but the one king size bed. \"Did you bring anything?\"\n\nSarah chuckled dryly. \"No, I ran out of the house in this.\" She spread her arms indicating her dress. \"I called you from the front seat of my car. I drove straight over.\"\n\n\"Ok, let's see what we have.\" I hopped off the bed and opened my travel bag, pulling out my nightgown and the old, comfy t-shirt I'd planned on driving home in tomorrow. I held the latter out to Sarah. \"Will this do?\" \n\n\"It's perfect, thanks.\" \n\nI tossed it too her. \"My toiletry bag is by the sink, help yourself. There's an unopened complimentary toothbrush in the drawer there.\"\n\nSarah disappeared into the bathroom, and I quickly peeled off my shirt and bra before throwing on my nightgown. Once covered, I finished undressing and packed away my dirty clothes before sliding under the covers. \n\nA few minutes later the bathroom door opened and Sarah emerged, holding her folded dress under her breasts. She had to reach up to hang it in the closet, which caused my gray T-shirt to rise up, revealing her perfectly shaped behind snuggly confined in a pair of black boy-short undies. Her perfect legs were equally mesmerizing and completely bare, so I had to force myself to look away, grabbing the TV remote and pressing power. While Sarah finished hanging her dress I located TBS, which was showing an episode of 'The Big Bang Theory'.\n\nSarah walked over, pulling back the covers and climbing into bed. I spent about one second cursing the size of the bed before she began to scoot over. In moments she was right next to me, linking her arms in mine and laying her head on my shoulder. \n\n\"This is a good one.\"\n\nI nodded my agreement, although the only thing I could think about was the fact that her breast was leaning against my arm.\n\nDespite how much she may have liked the show, Sarah was asleep in inside fifteen minutes. I turned off the TV and the light, and began to slip down from my sitting position, and Sarah sleepily mirrored my movements. She was lying next to me, facing away. I kept a respectful distance, but she reached behind her, searching for me. I put my hand in hers and she pulled it around her. \"Hold me.\"\n\nMy hand went to her lower shoulder, forearm nestling between her soft breasts. The other arm slid under her head, supporting her. My body pressed against hers, reveling in the lingering, familiar, fruity scent of her shampoo. Her bare feet caressed against mine, pulling one of my legs between hers. Then she was asleep again, and I thought I'd never be able to say the same. Five minutes later I was dead to the world. \n\n***\n\nI woke up alone. A glance at the digital clock told me it was four twenty-three AM. Had it been a dream? I ran my hand over the other side of the bed. Warm, but empty. A million thoughts immediately trampled through my sleep-addled mind, all variations on Sarah realizing this was a huge mistake and hating me forever. I was just about to bury my head in my pillow for a good scream when I heard movement from the bathroom. A second later the toilet flushed and the sink ran for a moment.\n\nI quietly resumed my sleeping posture, one eye cracked to watch her. My heart was thumping. Was she coming back to bed, or was she leaving? And why did my whole life feel like it hinged on the answer?\n\nSarah made no move toward the door. Instead she padded quickly back and slid in under the covers. I closed my eyes tight, but I could feel her watching me. An intense moment passed, me holding my breath, and then she settled next to me. Sarah lifted my hand and spooned against me, just like we'd first fallen asleep. She pulled my arm gently around her, her thumb turning gentle circles over the back of my hand. My skin was humming everywhere she touched. And then, oh, so softly, I felt her lips press against the inside of my wrist. \n\nShe kissed me for just a moment before resting her check on my hand. A tear rolled down my face. I couldn't take it anymore. I needed her, this beautiful creature wrapped in my arms. I inhaled the scent of her, leaned forward, and pressed my lips to the back of her head. \n\nI felt her stiffen, and a cold wash of panic rushed through me. But then she slowly pulled my hand back to her mouth and kissed me again, this time on my palm. I could feel her shaking. Oh my god, she was as nervous as I was. Why? I was hers completely. But she didn't know that.\n\nI pulled her lovely auburn hair away from her ear, gently kissing the exposed skin. A sigh escaped her lips as I did, and she began to turn. Her head first, looking back at me with a mix of fear, wonder, and desperate, unreasoning hope.\n\nI leaned forward as the rest of her body came around, pulling her tight to me as I kissed her again, this time softly on the forehead. I moved away, and we gazed into each other's eyes. I saw the pleading there, the disbelief that this was happening, each of us begging the other for this to be real. Any doubt as to how she felt fled in that moment. Inevitably I drew close and pressed my lips to hers. \n\nI've felt the world stop moving four times in my life. The first was when the nurse first laid Heidi in my arms, and I finally got to look into my daughter's face. The second, you, my dear reader, were there for, the day I met Sarah. This was the third. The fourth was still coming.\n\nI remember my kiss with Lauren, my fingers and toes tingling, along with other sensations which I didn't understand at the time. I'd been unknowingly seeking that feeling ever since. \n\nThat had been like getting a static shock from a woolen sweater. This was like getting struck by lightning.\n\nEvery nerve in my body lit up like a firecracker, and I literally saw explosions of color behind my closed eyes. Clich\u00e9d, I know, but sometimes clich\u00e9s can be wonderful. Sarah's mouth was soft and warm. I applied gentle suction to her bottom lip, earning a small moan. Her hand ran up over my back, while her other twined through my hair.\n\nI licked Sarah's lower lip. Her mouth opened and our tongues met, caressing and teasing and wonderful.\n\nI don't know how long we stayed like that, just holding each other, kissing gently and enjoying the realization of a dream. Finally we disengaged, and I just stared into those incredible green eyes, watching a beatific smile spread on her face.\n\n\"Hi.\"\n\n\"Hello.\" I ran a finger gently over her cheek. \"I've wanted to do that for a long time.\"\n\n\"I was getting tired of waiting.\" Sarah leaned in and kissed me again. \"A girl can only send so many signals.\"\n\nI hadn't been expecting that. \"I'm sorry, I didn't...\" I stammered for a second, and Sarah brought her hand up, running her fingers through my hair. She pulled me close, and I found my voice again. \"I didn't know what was happening. I never thought of myself....\"\n\n\"As a lesbian?\" I nodded, embarrassed that I'd stumbled over the word. \"And now?\"\n\n\"I've never been as attracted to anyone as I am to you, ever.\" Her expression didn't change, but the light in her eyes dimmed slightly. I kissed her shoulder and tried to gather my thoughts. I had to do better. \"But that's just a part of it. Sarah, being near you is unbelievable. I want so much. I imagine going to sleep with you every night, and waking up with you in my arms every morning. Coming home to you each day. I want to raise my daughter with you.\" I swallowed hard. \"I'm in love with you, Sarah. I am in love with a beautiful, intelligent, strong woman. If that makes me a lesbian I'm fine with that.\"\n\nSarah's eyes were shining now, and she pulled me back in for another kiss. No hesitancy, no fear, just total enjoyment of the intimacy of the moment. I let my hand run over her body, feeling the smooth contours of her leg and hip, the warmth of her under my old T-shirt.\n\nWhen we separated Sarah finally spoke. \"I love you too, Connie. For a long time.\"\n\n\"Really?\"\n\n\"Of course. You mean I didn't snuggle up with you enough every night? I was trying to.\"\n\nI shook my head and kissed her again. Oh, God, that felt amazing. \"So what do we do now? I mean, we already live together. Do I start taking you out on dates? What do we tell Heidi? How do I act around you?\" I was starting to panic just a little, but Sarah giggled and put her hand on my cheek, and I felt all the anxiety settle down.\n\n\"Mmm, dates would be nice. We'll figure it out. Just act natural. If you want to touch me or kiss me, just do it. And when she asks questions we answer them honestly.\"\n\nI grinned and shook my head. \"How do you always know what to do with her?\"\n\n\"Honesty's always best with kids. I wish it were that easy with adults.\"\n\n\"What are you going to tell your family?\"\n\n\"Truth, finally. I've been hiding since I was fifteen, and I'm sick of it. This is too important. You are too important.\"\n\n\"Do you want me to come with?\"\n\nSarah snuggled in close, her voice dropping to a whisper. \"Will you?\"\n\n\"Of course, sweetheart.\"\n\nI felt her shiver against me. \"Mmm, say that again.\"\n\nI gave a little smile. \"Of course I'll come.\"\n\n\"No, not that. The last bit.\"\n\n\"Sweetheart?\"\n\n\"Yeah.\" \n\nI chuckled inside, and kissed her gently on the forehead. \"Sweetheart.\" I could sense her relax as I said it, and it made me feel wonderful. \"Honey.\" A kiss on the temple. \"Darling.\" One on her cheek. I moved my lips just above hers. \"My love.\" Sarah whimpered softly at the word, and I pressed my lips to hers, pouring everything I was feeling into it. Beyond all probability, somehow I'd found my precious one, and I was never going to give her up.\n\nEventually, sunlight began streaming through the window, which in December in Michigan, means the morning was rapidly moving on. Neither of us wanted our first time together to be a rushed tumble in a hotel, which meant we needed to get up.\n\nI let Sarah go, hesitantly sliding to the edge of the bed. Sarah gave a moan of disappointment and reached out and took my hand. I gave it a squeeze and stood. \"Sweetie, we have to get going.\" Sarah grunted and rolled over, pulling the covers over her head. \"Okay, sleepyhead, I'm going to go get a shower.\"",
        "I turned on the water and stepped away to let it heat up, looking at my reflection in the mirror. Still the same old Connie, but the smile on her face was new. It looked good. Steam started rising from behind the curtain, and as I reached down to pull off my nightgown the door opened and a pink, auburn-haired blur dashed into my shower.\n\n\"Hey!\" \n\nA hand extended from inside the tub, its index finger repeatedly curling up, beckoning me inside. My mouth went dry, my heart instantly jumping into my throat. My nightgown went up over my head, almost in slow motion. Wearing nothing underneath, I stepped forward, taking the offered hand.\n\nSarah drew me in, the water and steam wrapping me in warmth. My lover's face wore a soft, beautiful smile and I let my eyes run over the length of her body. My God, she was beautiful. She pulled me close, and my lips found hers. We pressed together, the length of her legs sliding against mine, my hands running over her wet skin.\n\nThe sparse hair of her mound tickled against my thigh, and the swell of her hip pressed into my sex. The wetness there was from a completely different source, and I slid easily against her. Our breasts molded together, and Sarah's mouth moved to my neck. \n\nI gasped as she suckled the tender flesh there. I'd never been kissed on the neck like this, and it was so exquisite I could barely stay standing. Sarah ran her hand over my side, running from my breast down to my hip. The capacity for rational thought was rapidly dribbling from my brain as we touched each other. Sarah bent slightly away, making room for her fingers to skim over my belly and dip down between my legs.\n\nI clutched at her and moaned as her fingers ran a slow circle over and around my clit. She continued to massage me as her mouth moved up to my ear, nibbling for a moment before she began to whisper huskily. \n\n\"This is just a taste. Tomorrow, when I get home, after we put the munchkin to bed, we're going to do this right. I love you.\"\n\nIt was the most erotic moment of my life. Like a dream, but you didn't feel like this in dreams. Her words seemed to stream directly into my pussy, where her fingers soon reduced me to a shuddering, orgasmic mess. I don't know long I just shook against her, or how many times I repeated those three little words. After an extended, languid kiss, Sarah placed a bottle in my hands.\n\n\"Wash my hair?\"\n\nHer head was already soaked, so I poured a generous amount into my hand as she turned her back to me. She tilted her head back, water cascading down her chest and over her perfect breasts. I pulled her hair up, working the shampoo deep into it. Sarah sighed and leaned back against me. My left hand snaked around her middle, resting just under her soft breasts, while my right continued to massage her scalp.\n\nWhen I was finished I let both my palms slide over her tummy then up to the perfect swells of her breasts.\n\n\"These are so beautiful.\"\n\nShe sighed as I caressed them, drawing in a sharp breath as I tweaked a hard nipple. \"You can keep doing that.\" Her head lolled back onto my shoulder, and I took advantage by feasting on her exposed neck. \n\n\"It's time for your taste, I think.\"\n\nSarah shuddered. \"Ok.\"\n\nMy right hand trailed slowly down her flat belly, as I imagined how beautiful it would look swelling with our child. Plenty of time for that, though, right now I had far more pressing matters, like making the precious creature in my arms tremble with bliss.\n\nMy hand glided down her body while I continued to hold her and suckle on her neck. My fingers trailed through her soft pubic hair and into her slit. Her opening was still tight and almost virginal. I teased and circled, but did not penetrate. The soft sounds of her pleasure, little gasps and moans, reverberated through me. \n\nI drew my middle digit back up, finding that little nub which caused her to whimper and press down into my hand. She turned her head and kissed me as I began to work her clit. Little sighs and moans passed directly into my mouth. I pinched her nipple and she broke the kiss, her head falling opened-mouth back against my shoulder, her body rising and falling as I stroked her sex.\n\nMy fingers caressed her, traveling around, under, over, savoring the difference between the wetness of her skin from the shower and the silky coating of her sex, completely self-produced. \n\nI continued to softly roll her nipple while my mouth when back to her neck. Her breath began to come in gasps and shudders, and I bore down on her nub. Soon she was crying out, jerking and spasming in my arms as she rode her orgasm.\n\nThe moment she recovered Sarah spun in my arms and kissed me. Hips, legs, tummies and breasts pressed together as our tongues caressed each other. \n\nWhen we separated I put my forehead against hers. \"Just a taste?\"\n\n\"It gets better from here. I promise.\"\n\n\"I don't know how much better I can take. This was pretty amazing.\"\n\n\"Yeah it was.\" She laid her head on my shoulder. \"I love you.\"\n\n\"I love you, too. And I love that I finally get to tell you.\"\n\n\"Mmm, you can say it as much as you want.\"\n\n\"I will, promise.\"\n\nWe took our time washing each other, but somehow refrained from any more 'tastes'. When we finally climbed out it was well after nine. Luckily the cheap hotel hair dryer under the sink worked well enough, as god knows I hadn't brought one.\n\nWe packed up and had a quick cold breakfast in the lobby. Sarah looked odd in her black dress, but no one said anything. She was too nervous to notice anyway, I think. Best she could do was pick at a bowl of cereal.\n\nI let her dither around for a few minutes before speaking up. \"Alright, let's get this over with.\"\n\nAfter I went to check out, Sarah texted me her parent's address. It wasn't far, of course, given how quickly she'd made it to the hotel last night. I pulled into the driveway next to Sarah, which already boasted a minivan and black sedan.\n\nSarah climbed out of her Kia and waited for me. I took her hand as we went up the shoveled walk. When we reached the front Sarah rang the bell, which I thought was odd, but I didn't say anything. \n\nRebecca opened the door. \"Oh my God!\" She rushed out and hugged her sister. \"Are you okay? What happened? We were worried sick.\"\n\n\"I know, I'm sorry.\" Sarah disengaged and took my hand again. \"Can I come in? I need to talk to everyone.\" \n\nI saw Rebecca's eyes flick down to our handclasp. \"I see that.\" She cocked her head towards the door. We came inside and entered the living room, beautifully furnished in a comfortable rustic style, with a large stone fireplace crackling away at the far end. Maggie was in an armchair, holding little Dara, while the others were scattered around the house.\n\n\"Auntie Sarah!\" Little six-year-old Mindy was the first to notice, and soon all three of Matthew and Linda's children came rushing for a hug. Their parents came in from the kitchen, and soon the whole Peters clan was gathered around the room. The little ones were staring at me, the stranger in their midst. Maggie had given me only a brief glance, and was busily pretending I wasn't there.\n\nSarah stayed standing, and spoke in a loud voice. \"I need to talk to everyone. I think dad would've wanted me to. Mom, you need to listen.\"\n\nHer mother gave a great, put upon sigh, and looked up. \"Say what you have to say, Sarah.\"\n\nSarah looked at the kids, and then at Linda, who smiled warmly. \"Go ahead, they can handle it.\"\n\nSarah nodded and took a deep breath. \"You've all met Connie. And, as you all saw yesterday, she is much more than a friend to me. And now that we've all had a chance to calm down, I want to finish that conversation from last night.\"\n\nSarah pulled me gently over to the couch and we sat down. Jonah, Matthew's youngest at three years old, climbed up on his aunt's lap. Sarah gave him a hug and continued.\n\n\"No, mom, I'm not interested in men. I never have been, and I never will be. I am gay, a lesbian, whatever label you want to put on it, and I have been hiding that from you all for a very long time.\" Sarah's voice cracked as she finished, her eyes shining with tears. I put my arm around her.\n\nSarah wiped her eyes. \"And I'm tired of it. She deserves better. I deserve better, and I won't do it anymore.\"\n\n\"But Sarah, what about your family?\" Maggie looked around. \"This selfishness will hurt your brother and sister!\"\n\n\"Mother!\" Matthew stepped up behind her and put a hand on her shoulder. \"This isn't going to hurt us. One of the ladies in my office is a lesbian. No one cares, or if they do they keep it to themselves.\"\n\nMaggie looked to Rebecca for support, but she just shook her head. \"Mom, one of our junior partners is gay, and at least two of our paralegals. It's not a big deal. Besides, this isn't a surprise to me or Matthew. And it wouldn't have been a surprise to dad, either.\"\n\nMatthew smiled. \"Storming man, never could get anything past him.\"\n\n\"Yeah.\" I blushed as everyone looked at me. \"Some of the things he said to me, looking back, I think he could tell how we felt about each other. Even if we hadn't admitted it yet.\" Maggie looked daggers at me, and I returned her gaze with as little vitriol as I could manage.\n\n\"How, why did you do this to my daughter?\"\n\n\"Mom!\" Both Rebecca and Matthew spoke at once.\n\nSarah's voice stayed firm and calm. \"She didn't do anything. I've known I was different since I was thirteen, maybe sooner. When I was in high school I knew I wanted a family, but when all my friends were discovering boys, I was discovering them instead. They'd talk about their crushes, how cute Martin Sullivan was, or their dreams about Mr. Arbaugh. I knew what they meant, of course, because I was having those feelings, too, but they were for Miss Steiner, or Molly Hoffman, my senior buddy when I was a freshman. My friends would talk about kissing boys, I dreamed of kissing Molly, or maybe just holding her hand.\n\n\"I wondered what was wrong with me, and I was so scared. I wasn't going to have a family if I kept going that way, and that killed me. I tried to like boys, tried to date. And I hated it. \n\n\"There was another girl at school, and she got outed, and the other kids, including my friends, tortured her. So I hid. In college it was better. I had a serious girlfriend. It was wonderful, but I still had to hide. I couldn't bring her home, or talk about her, tell you how happy I was. I had to be miserable because I was happy. Do you know how sick that is? What it does to you? And then I had to hide again, because if you're a nanny, even a rumor you're gay and you'd be out on the street, never work again.\n\n\"But now, I'm happy again. Happier than I've ever been. And I refuse to hide it, not this time. I've found someone special, and she loves me. And she...and we have a beautiful little girl, whom I adore. And I won't give them up. Not for anything. I'll fight for them, because you fight for your family. You taught me that.\n\n\"Please don't make me choose, mom. Because I'll choose her, even if it breaks my heart.\" Tears were rolling down her face. In fact I don't think there was a dry eye in the room. I pulled out a few tissues and dabbed at Sarah's eyes, and she put her arms around me. \n\n\"You'd pick this over your own mother.\"\n\n\"Yes. Because she's not making me choose.\"\n\nMaggie stood up and handed her youngest grandchild to Jonathan without looking at anyone. \n\nRebecca slid in next to Sarah, who let me go to embrace her sister. I stood up shakily, and found myself quickly enveloped in a hug from Matthew. \"Thank you for making Sarah happy. Welcome to the family.\"\n\n\"Thank you.\" I let him go, and Linda hugged me next. \n\n\"We'll expect you at Christmas, now, and we want to meet Heidi, too.\"\n\nMatthew joined his sisters on the couch for a group hug, followed by his children, with multiple versions of \"We love you, Auntie Sarah.\" I could see the peace on her face as her family surrounded her. \n\nMy phone told me it was nearing noon, and I needed to get going. I politely declined Matthew's invitation to stay for lunch.\n\nSarah pulled away from her family. \"I'll walk you out.\" She took my hand and walked me to the door. As I turned I noticed a shelf with pictures. There were two large eight by ten photos, one with Rebecca and Jonathan and the other featuring Matthew and Linda. Grandkids filled in the spaces, except for one photo of a young Sarah in a cap and gown stashed over to the side.\n\n\"Yes, the bragging shelf. It's where mom takes her guests to boast about her kids. College graduations, weddings. Apparently graduating from high school was my last significant accomplishment, so, little photo.\"\n\nI shook my head and kept walking, Sarah followed me out onto the front patio. As soon as the door closed I pulled her to me and kissed her soundly, embracing her when it ended. This was right, kissing her, holding her, loving her, knowing she loved me. It was as if my entire thirty-one years to this point had been some strange shadow life, and only now it had become real.\n\n\"I love you.\"\n\nSarah smiled up at me. \"I love you, too. Thank you for everything. I'll call you tomorrow when I'm on my way home.\"\n\n\"You're going to be okay?\"\n\nSarah glanced back inside. \"Yeah, I will. I'll see you tomorrow.\"\n\nI climbed into my Escalade and after a quick text to Lauren I was on the road. It was an interesting four and a half hours, alone with my thoughts and insecurities. What can I say? Now that it was real it was scary. But every time those doubts crept in I would think about what Sarah had just done. My practical, always together girl had laid her heart on the line, and she'd done it for us, and what we could be. And my heart swelled with love each time it replayed in my mind. \n\nThat had taken real strength. What was I worried about? I wasn't going to lose any family. My brother wasn't going to care. At work we had several out and proud homosexuals of both genders, and my boss had always made it clear that any sort of harassment or discrimination would not be tolerated. Maybe the loss of a friend? A cross-eyed glare from an old man at the grocery store?\n\nThe more I thought on it, I realized I wasn't scared of anything exterior. I was scared of me. What if I wasn't good enough for her? What if she risked everything for me, and I screwed it up? \n\nI remembered many conversations with myself when I was pregnant. What if I dropped my daughter on her head? What if I caused her be so messed up she couldn't function? What if, what if, what if?\n\nFinally one day my dad had wormed out what was bothering me. He told me he'd felt the same way before I'd been born. \"Just do your best. Accept you'll make mistakes and learn from them. And be committed to being better every day.\"\n\nBy the time I got back to town I was feeling better, and I was really looking forward to Sarah being home. I got to Lauren's a little after four, and was immediately attacked by two little girls and a Scottish terrier. Heidi cleaved herself to my hip, arms wrapped around my neck, and I gave Lauren a one-arm hug.\n\n\"And how are you doing?\"\n\n\"Good.\" I couldn't help but blush.\n\nLauren's eyes narrowed. \"How good?\"\n\nI chuckled. \"Really, really good.\"\n\n\"Okay, you're staying for dinner, and we're going to talk.\"\n\nI gratefully accepted her invitation. If I'd gone home then it would have been fast food for sure. Also, I could smell the crock-pot of what turned out to be white chicken chili bubbling away in the kitchen.\n\nAfter dinner Rick took the girls in the other room and fired up 'Elf'. Joseph was swinging in his rocker, happy as a clam, and Lauren and I were finishing up the dishes.\n\n\"So, what happened?\"\n\n\"Umm, stuff.\" I grinned wickedly. \"Good stuff.\"\n\nLauren gave me a good stare and stamped her foot. \"Constance Walker you spill right now, or you can find yourself a new best friend.\"\n\nBlushing crimson, I gave her a brief version of what had brought Sarah after I'd said 'Good Night' to Heidi yesterday.\n\n\"So, I woke up at like four a.m. and she was in the bathroom, so I pretended to be asleep when she came back to bed. She pulled my arm around her and kissed me on the wrist.\"\n\nLauren's eyes went wide. \"So I kissed her on the back of the head, then she rolled over and, well....\"\n\n\"Well what?!\"\n\n\"I kissed her. I totally lost my head. Or maybe I found it. I don't know.\"\n\n\"And?\" I could see her trying not to stamp her foot again.\n\n\"It was amazing. I told her how I felt. She asked what had taken me so long.\" My cheeks were literally aching from smiling. Lauren squealed and wrapped her arms around my neck.\n\n\"Sweetie, I'm so happy for you.\" She kissed my cheek and let me go. \"So what happens now?\"\n\nI shrugged. \"She comes home tomorrow, and we try to figure out our new normal. I mean, we already live together and we have a routine. The only thing that'll change is what room she sleeps in.\"\n\nLauren cocked her head at the naivety of my remark. \"You said her mother didn't like you. How's that going to go?\"\n\n\"Oh, God, I forgot.\" I gave a quick recounting of what had happened at her mother's house. \"The things she said, Lauren, I didn't believe anyone could say them about me. I was so happy. I want this so badly. I want to be an 'us', like you and Rick. But you said it before. I've never been in a long-term relationship, not with anyone. How do I not screw this up? I can't screw this up.\"\n\n\"Oh, sweetheart.\" Lauren pulled me into a hug. \"You'll do fine. Better than fine.\" She looked me in the eye and wiped away the tear running down my cheek. \"You have an incredible capacity to love, Connie. And there's no secret, no trick to it. It's just love, and commitment, and hard work. But if you're willing to do the work, it can be wonderful.\"\n\n***\n\nI'd taken Monday off as well, just in case. Heidi and I had a quick breakfast before I took her to school, which I completely screwed up. Apparently dropping a four-year-old off at preschool requires more training than landing a fighter jet on an aircraft carrier. I was in totally the wrong lane and I had monitors and other parents yelling at me. Even my own daughter scolded me. \"No, mommy, you're 'posed to go the other way.\"\n\nI had to shake it off, though. I had something else to accomplish before I had to go back and get her at noon. My little dalliance with Sarah in the shower had reminded me forcibly that since Heidi had come along I'd completely neglected a certain area of personal hygiene. And if tonight was going to be everything I was hoping it would be, I wanted to get it taken care of, before my undressing began to resemble an episode of Wild Kingdom, if you get my drift.\n\nThere was a spa nearby with a shop attached, and I headed there. I needed guidance, and some part of me cringed at the thought of buying bikini-waxing supplies.\n\nThe salesgirl behind the counter was young, pretty, and way too perky for a Monday morning. She smiled brightly as I entered. \"Welcome! Is there anything I can help you find?\"\n\n\"Um, yeah, I, uh....\" I felt my cheeks burning as I stared at her. \"I need to, um....\" Good God, Constance, you're a grown woman. Pull it together.\n\nThe sales girl, whose tag said her name was Dani, cocked her head at me. \"Sweetie, whatever it is I've heard it before.\"\n\nI took a deep breath. \"I need to do a bikini wax.\" Whew. \n\nI waited for Dani to laugh at me, but she stayed absolutely professional, just nodding her head. \"We can help with that.\" She looked at me seriously. \"Now, is this the first time you've done this?\"\n\nMy cheeks were burning red as I managed a smile, \"How could you tell?\"\n\n\"Just a hunch. Now I'm going to ask you a few questions, okay?\"\n\nI nodded, steeling myself to answer truthfully. And I did. Twenty minutes later I left with a jar of wax, applicators, a wax warmer, aloe for after, and a men's beard trimmer. I also had a pamphlet with step-by-step instructions as to what to do. ",
        "Back at home, I started trimming while I waited for the wax to heat up. Dani had said they made trimmers for women, but they weren't much different and cost a lot more.\n\n\"Don't worry, I use my boyfriend's for this all the time.\" \n\nAnd she was right. It even had a dial for length. I picked one in the middle and went for it, sitting on a beach towel on my bathroom floor, my little makeup mirror situated between my legs. That part went pretty smoothly. I checked the wax, which seemed to be ready. I rinsed myself with isopropyl alcohol, and wished I'd had the foresight to have a glass of the real stuff handy, too. I did my best to follow the instructions in the pamphlet, starting on my left thigh and labia. I spread on the wax, waited until it hardened, and then, oh my god, and then. Let's just say that, on a scale of one to ten, it was truly horrific.\n\nI always thought of myself as having a high pain tolerance. I didn't cry much when I fell off my bike, or the time I got stung by a wasp at the park when I was ten. I'd had Heidi naturally. Eight hours of agony, but I got through it.\n\nI can't truly say this was worse, but the big difference was that I had to actually do it myself, instead of it just happening, like with labor. But, once the wax was on, there was only one way to get it off. By the end I was biting on a hand towel like a civil war soldier having a leg amputated. At least he wouldn't have had to use the bone saw on himself. \n\nI forced myself to tweeze away the strays, which also fell into the category of 'not fun'. I couldn't get the aloe balm on fast enough, and it did help a lot. I just laid there on the floor for probably half an hour, legs spread lewdly open to the cool air.\n\n***\n\n\"Mommy, why are you walking funny?\"\n\n\"Never mind, sweetie. Let's go.\"\n\nGetting dressed and hobbling out to the car had been painful, but it was going away quickly, and by the time we got into the mall I felt I was starting to move normally again. I also felt amazing down there, and I totally got why women put up with that torture. I also completely understood why they wouldn't. I couldn't wait for Sarah to see. Oh, god, she was going to see. I couldn't decide if I were more excited or terrified. \n\nThis was also my last, best chance to Christmas shop for Sarah, and if you have to go to the mall in December, Monday afternoon is the time to do it. \n\nWe emerged from Bath and Body Works with bath goodies, which would ostensibly be from Heidi. As we drove away Heidi was happily chomping on part of an Auntie Anne's pretzel, one of the few high points about having to be at the mall.\n\n\"We have one more store to go to, honey.\"\n\n\"What store, mommy?\"\n\n\"It's a jewelry store. It's very fancy, so you have to be really good. You can look at everything, but don't touch the glass. Okay?\"\n\n\"Yes, mommy.\"\n\nNow don't freak out all of you. I was not going to buy ring. Not that the thought didn't cross my mind. But I did want something special. We pulled into Barrington Jewelers. It's where my dad had bought me a beautiful diamond necklace with matching earrings when I'd graduated college. It was a local place, medium to high end in a lovely faux marble building with a green awning and an elegant but comfortable interior. I loved it, especially since I'd had to buy my own jewelry ever since.\n\nHeidi had never been inside, and she gasped at the sparklies behind the glass. I hadn't been there in years myself, but the sights brought everything back. The store was empty, save for the saleswoman, a handsome middle-aged woman with lustrous black-brown hair and caramel colored skin. \n\n\"Good afternoon.\" She smiled warmly at me. \"Can I help you find something?\"\n\nI couldn't place her accent, but her voice was warm and welcoming. Nonetheless, I felt the hair on my arms stiffening as I responded.\n\n\"I'm looking for something for Christmas for my partner.\" I couldn't keep a bit of challenge out of my voice as I said it. Her eyes widened slightly in surprise, but the warmth never left her face.\n\n\"Of course. What were you picturing?\"\n\n\"Umm....\" I realized I had no idea what she liked. She never wore jewelry during the day, par for the course for someone in childcare, I'd imagine. I remembered simple garnet studs and a matching necklace from Heidi's party. And what had she been wearing to her dad's funeral? Anything? Maybe a simple silver chain? I was so bad at this. \n\nThe saleswoman was obviously sensing my discomfort, and she gave me a knowing look. \"This is a new relationship?\"\n\n\"Am I that obvious?\"\n\nThe woman smiled warmly. \"I have been doing this a long time. Granted, it is usually on the face of young men.\" She shrugged, eyes twinkling. \"But I recognize the look. Why don't you tell me a bit about her, and we'll see if we can't figure something out. Would you like some coffee? Tea?\"\n\n\"Mmm, tea sounds lovely. Thank you.\"\n\nLess than an hour later I walked out with a large, flat, blue velvet clamshell box, and I was very happy with what was inside. Heidi was happily sipping from a juice box the saleswoman had given her. She'd actually turned out to be the owner, along with her husband, and she kept some treats in the back for her grandkids when they came by.\n\nIt was just after three. I hadn't heard from Sarah, which I thought was odd, so I pulled up my text strings. Sure enough, I'd missed one while Heidi had been playing with it at Barrington's. It'd been sent just after two.\n\nSarah -- Headed home, everything went well. Be there around 6. I love you.\n\nAs I read those last three words, it felt like someone had poured hot, delicious tomato soup directly into my soul, and I felt the warmth spread through my whole body. I resisted texting her back. She was driving after all.\n\nWhen I got home I started checking the clock religiously, as well as my Find a Friend app. I tried to distract myself by playing with my daughter, but she was every bit as anxious for Nanny Sarah to get home as I was, so it didn't help much.\n\nBy five fifteen she was just this side of Kokomo, so I set to dinner, BBQ grilled chicken on the Foreman with rice and mixed veggies. Unfortunately, in my nervous haste I overestimated the cooking time, and she was still twenty minutes away when I finished. A panicked phone call to Joan later, I had the chicken wrapped in foil and in the oven at 180 degrees, with the sides as well.\n\nMy heart leapt into my throat as I heard the garage door open, almost dropping the plate I was carrying to the table. I tried to take a deep breath and finish what I was doing.\n\nHeidi went scampering into the mudroom as soon as the door opened. \n\n\"Nanny Sarah!\"\n\n\"Hi munchkin!\" Sarah's voice sent a tingle through me. I walked out of the dining room, where Sarah had Heidi lifted up on her hip, arms wrapped around her.\n\nMy love saw me finally, her cheeks spreading into a beautiful smile. My voice caught in my throat for a second before I managed to stammer something out. \n\n\"Hi. I, uh, I made dinner.\" God, I'm an idiot. I wanted to fly into her arms. I wanted to kiss her so badly my lips were literally tingling, but all I could do was stand there like a dope.\n\n\"Thank you, sweetie.\" Sarah set Heidi down and crossed the distance between us. I sighed as we hugged, all the tension draining away at her touch. I held her close, whispering in her ear. \n\n\"I'm so glad you're home, sweetheart.\" She purred into my shoulder at the endearment.\n\nHeidi was tugging at Nanny Sarah's hand. \"Okay, sweetie, let's go wash up while your mommy finishes dinner.\"\n\nMy chicken came out pretty well, if I do say so myself. Heidi dominated the conversation, regaling Sarah with her weekend adventures with Sylvia at the zoo. I went through two large glasses of water, as my mouth would go dry every time Sarah would glance at me. \n\nAfter dinner I let Heidi have a couple of cookies and a glass of milk, supervised by Sarah, while I started the dishwasher. When I was finished they were both on the couch, and Sarah scooted over so I could sit next to her. My arm slid around her as I lowered myself down, and she adjusted herself deeper into my embrace.\n\nHeidi nattered on adorably, and I looked at my family, whole at last. Not complete. There would be more. Sarah was born to be a mother, and with her beside me, more children sounded wonderful. \n\nAfter a few games it was eight o'clock and time for bed. A bath was drawn with only minor complaining, and soon, when teeth and hair were brushed, we headed into the bedroom. Sarah had been there. Pink Aurora pajamas were laid out and the bed was turned down. \n\n\"What book do you want?\"\n\n\"Umm....\" She looked over her shelf and pulled out a Dr. Seuss, 'Oh, The Places You'll Go.' She climbed under her covers and I began to read.\n\nShe was out in less than ten minutes, and I slid the book back onto its shelf. Off went the bed lamp and on came her nightlight. I closed the door gently behind me, my heart hammering in my chest. \n\nMaybe Sarah had changed her mind. Had she gone to her room? Should I go see? I stood there stupidly for a moment before noticing my bedroom door was slightly open. As I turned I could hear music, soft and beautiful, coming from inside. I took a great, shuddering breath and walked forward, almost in a trance. \n\nThere was definitely light coming through the crack in the door. I put my hand on the knob and pushed it open, stepping into a wonderland.\n\nCandles burned on my dresser and nightstand, as well as a couple other places around the room. The smell of berries filled the air.\n\nI closed the door behind me\n\n\"Do you like it?\"\n\nI nodded dumbly, finally taking in the vision before me. She stood next to the bed, eyes dancing in the candlelight. She wore a deep green negligee, laced with silver and white across the bust. The silky material flowed like water over her body, bringing to life the feminine curve of her stomach, the womanly fullness of her hips. It stopped at the top her thigh, and her long, perfect legs were bare. She was breathtaking, literally, and I tried to find my voice.\n\n\"Oh, Sarah.\"\n\n\"I wanted to wear something special. I hope you like it.\" Her head cocked shyly to the side, her auburn hair gleaming. \n\n\"You are the most beautiful thing I have ever seen.\" My voice cracked with emotion as I said it, a tear threatening to break free from my eye. \n\nSarah stepped towards me. \"Don't cry, darling.\" She put her hands on my shoulders, slowly sliding them down the lengths of my arms until she was holding both of my hands. My whole body was tingling at her touch, my arousal already seeping into my panties. She swayed slowly from side to side. \n\n\"Are you nervous?\"\n\nI nodded, trying to breath. \"Terrified. I just ... I want to make you happy.\" With that my tear finally broke free.\n\n\"Oh, Connie.\" She reached up and brushed it away with her thumb. \"You will. You do.\" Her hand curled around to the back of my head, fingers running through my hair, and drew me down for a kiss. Our lips met, fire running through my body at the contact. The world began to fade away, taking my anxieties with it.\n\nOur mouths melded together, made for each other, our tongues meeting as the kiss deepened. I'm not sure how long we stood there, but eventually the kiss broke and Sarah gazed up at me.\n\n\"I love your eyes.\"\n\nI gave a nervous chuckle. \"They're just a dirty brown. I never liked them.\"\n\n\"Brown, maybe, but they have these little flecks of gold. I know, because they sparkle when you look at me. Only at me.\"\n\nLove and desire swelled up inside me, and I kissed her again. \n\nShe pulled away after a moment. \"Darling?\"\n\n\"Yes?\"\n\n\"It's time for bed.\"\n\n\"Yes, my love.\" I'm not sure what got into me, but I scooped her up in my arms. I hadn't thought that through, but with the adrenaline of the moment I managed the three steps to the bed and laid her gently down.\n\nShe rose up onto her knees and kissed me, her hands untying the neck of my blouse. It fell open, and she grabbed the hem. Our mouths separated and I raised my arms as she lifted the garment over my head.\n\nAs soon as it was gone our mouths met again for a moment, before she began to kiss along my jaw line. Her hands moved to my sides, slowly caressing up my back as she began to nibble on my ear. I sighed heavily as her hand found the clasp of my nude colored bra, and it sprang free. My arms dropped to my sides as the straps fell away, exposing my breasts.\n\nMy small tan nipples were rock hard, almost aching. Sarah pulled away so she could see, one finger lazily running around my areola, making me shudder.\n\n\"You are so beautiful.\" Normally this is where I'd disparage myself a little, but I couldn't. The sincerity in Sarah's voice, the intensity in her green eyes, the deliciously soft touch of her hand. She meant it. She loved me, and I was beautiful to her, and for one perfect moment the world's opinion didn't matter. \n\nShe lay back, pulling me onto the bed. I crawled to her on my hands and knees, letting my breasts sway beneath me as I did. Sarah rolled me onto my back and took one of my nipples into her mouth.\n\n\"Oh, my god, Sarah, mmm.\" I moaned as her teeth nipped and tongue swirled around my teat. She switched sides, a free hand keeping stimulation on the other. Electric shocks were reverberating through my body, and I could feel every caress from head to toe to deep in my sex.\n\nSarah straddled me, pulling her negligee up over her hips. She reached to her sides and untied the two bows that had been cinching the waist. Slowly she pulled the material up over her body. Her thighs, tummy, breasts, she gradually revealed each delicious portion of her anatomy. My eyes were wide as saucers, almost aching in their desire to see more.\n\nSarah reached out and ran a slow finger from my neck down between my breasts and over my stomach, making me tremble from head to toe. \"I finally have you right where I want you.\"\n\nI sat up, sliding Sarah down into my lap, her legs wrapping around my waist. \"You do, huh?\"\n\n\"Yeah.\" She leaned forward, lips finding my neck, fingers scratching gently over my back as I held her to me. My head lolled to the side, giving her better access. She pulled my hair away from my ear and began to nibble.\n\nHer lips on my ear, fingers tracing electric lines of pleasure on my back, her soft breasts pressed against mine, it was overwhelming. Reality started to fade and there was nothing in the world but her, precious, priceless her, and I was filled with a desperate need to show my love how much I cherished her.\n\nI turned, rolling her gently onto her back. I kissed her shoulder and my lips traced a path over her collarbone and up her neck. A lovely sigh escaped her body, making me shiver in pleasure. My mouth found hers, and she pulled my hand to her as we kissed. But I had so much more of her to worship, so much more to explore that I only held the kiss for a moment.\n\nI moved back down her neck, my hands coming around to cup her breasts. So soft and warm, just more than a handful. Sarah stretched and moaned as I gave them a gentle squeeze, her back arcing up for more contact. My mouth slid lower, running my tongue over the delicate spot where they began to rise, bringing another delicious soft sound from my lover. I pulled away to look at them, running a finger over her large areolas, so pale pink they almost disappeared into her skin. They crinkled at my touch, her nipples standing proudly, begging to be suckled.\n\nI lowered my head and pulled one of the little nubs into my mouth, bathing it with my tongue, while I caressed and pinched the other. \n\n\"Oh, darling, that's so nice, mmm.\"\n\nAs soon as the soft sounds she was making slowed, I switched to the other side. But as much as I loved them, I wanted to continue my exploration. I moved down, running my tongue over the crease where her breasts rejoined the rest of her. \n\nI could feel her abs tense and relax as I nibbled and kissed along her flat stomach, earning a shiver and an \"Oh, god!\" as I ran my tongue around her navel. I moved down, to where the slight swell of her belly gave way. I stopped at the top of her panties, green silk lace that matched her negligee. I slid my hands, hooking the waistband and hesitating a moment before I began to draw them off.\n\n\"Are you okay, darling?\"\n\nI kissed her tummy before looking into those beautiful green eyes, which were shinning with love and concern.\n\n\"Oh, yeah. I just ... I've never done this before.\"\n\n\"Darling, it's going to be wonderful. I trust you and I love you.\" Her eyes twinkled. \"Now make me scream.\"\n\nA deep growl rumbled up from my chest, and she closed her legs and lifted her hips as I tore off those panties. I pushed her knees apart, taking a good, long look at my prize. A trimmed patch of auburn hair sat above her slit. There were puffy, thick outer lips that hid the deeper portions of her, but as she spread her legs her sex seemed to blossom before me, glistening from her little pink pearl down to her core. Her smell filled me, musky and sweet, drawing me in as I leaned down.\n\nI blew lightly over her flower, causing her to shudder and jerk. \"Oh, god, Connie. Don't tease me.\" I didn't respond, instead turning my head to the left and kissing the impossibly soft flesh of her inner thigh. \"Ungh!\" she threw her head back and moaned. That was a good sound. I wanted to hear more of that. I turned toward her center, but skipped over it to do the same on the other side.\n\n\"Please, darling, please.\" Sarah's whimpers were growing more and more insistent, and I could feel her trying to shift her hips to bring my mouth in line with where she wanted it. I kept teasing her a moment longer before driving my tongue in as deeply as I could. She gasped and pushed her hips up off the bed. I gave one long, broad lick from her opening up to her clit, which was still hiding inside its hood.\n\nI knew what I smelled like, but I'd been worried I wouldn't like the taste of someone else. I'd told myself I'd soldier on, no matter what. I shouldn't have worried. Sarah's flavor wasn't good. It was exquisite. Sweet and tangy, just a little earthy, it tasted like her. Excitedly, I dove back in running my tongue around her delicate folds, savoring as much of her nectar as I could find.\n\nAs I continued I realized it wasn't just the flavor. I loved the silkiness of her sex, the way my lips and tongue glided over it. I loved the way her body moved under me, undulating slower, then faster as her excitement built. But what I loved the most was the soft sound of pleasure emanating from the top of the bed. Little gasps and sighs and moans, signs the woman I loved was happy, and that I was doing well.\n\nAs I continued those sounds became louder. Her little nubbin had emerged from its hood, and I stopped my exploration to focus my attentions there. Given the increase in the volume of Sarah's moaning, she seemed okay with that course of action. \n\nI was very gentle at first, every time I made contact Sarah would jerk and gasp. I pulled the whole hood into my mouth and gently caressed underneath with my tongue before softly licking up and over. Sarah cried out in pleasure, so I repeated the action to her delight a few times before starting to lash her clit with more intensity. I varied the speed and angle until she let me know exactly how to proceed. \n\n\"Right there, like that. Oh darling, please don't stop, please.\"\n\nI had no intention of stopping. My arms were wrapped around her legs, palms resting on her stomach. Sarah reached down and grabbed one, pulling it up to her breast, which I began to squeeze and pinch.\n\nThis was the trigger, apparently, as seconds later all sound stopped coming from Sarah's mouth and her body tensed under me. For a delicious moment all was still except my flicking tongue, then she detonated against me. She cried out, moans matching the rhythm of her spasming muscles. Her thighs clamped around my head, holding me in place while I desperately tried to drink up the fresh flood of her nectar. I stayed on her, using my tongue to draw out the moment as long as possible.",
        "Finally her orgasm subsided and her legs relaxed, releasing my head. I nuzzled against her sex, gently licking and teasing as my lover tried to catch her breath. A giddiness swept over me. I'd done it; I'd given Sarah an orgasm, and a good one, I think. I flicked her clit one more time.\n\n\"Oh! Oh, sweetie, come here.\" I looked up into her incredible green eyes and smiling face. Her hand reached out to take mine, and I crawled up to her.\n\n\"I did okay?\"\n\nSarah answered me with a searing kiss; the taste of her mouth combined with that of her sex was heady and erotic. \"You were amazing, Connie. That was so good.\"\n\n\"So I can do it again?\"\n\nSarah was still wearing that a silly grin on her face. \"Mmm, any time.\"\n\n\"Okay.\" I started to scoot back down the bed, my mouth watering at the thought of tasting that lovely bit of flesh between my lover's legs again.\n\nSarah reached down and grabbed me under my arms, pulling me back up. \"Oh, no, you don't.\"\n\nI tried to squirm free, but she stopped me with a spine tingling kiss, leaving me completely under her power. She broke away, rolling me over onto my back, our foreheads still touching as we looked deep into each other's eyes. Sarah's voice was a husky whisper. \n\n\"My turn. I've wanted to lick that pussy, to see you come since the moment I met you.\" She kissed along my neck, her breasts caressing over mine, before moving up and rimming my ear. I trembled from head to foot. \"And I'm tired of waiting.\"\n\nSarah's mouth moved down, finding the pulse point on my neck and suckling there for a minute. It was exquisite pleasure, so soft but all consuming. I squirmed under her touch, one hand gripping the sheets, the other gently caressing her head. She moved further down, over my collarbone, lips feathering over my skin to where my breasts began to rise.\n\nShe slowly crested that mountain, well, my smallish mountain, where my nipples were so hard they were literally aching. She pulled one into her mouth, the coolness of her saliva contrasting with the heat of her body. I moaned loudly as she began to suck, flick and nibble my tip.\n\nI'd always thought my breasts weren't that sensitive. I mean, I liked playing with them when I masturbated, which I didn't think counted, but I had never gotten much out of my admittedly limited experience with others touching them. I'd been so wrong.\n\nSarah was wringing pleasure out of them I didn't know was possible. My back arched, trying to push them deeper into her mouth. Her hand went to the other, rolling my nipple between her thumb and middle finger, making me gasp and moan. Just as the sensation started to get stale Sarah's hand and lips switched sides, and I was sent reeling again.\n\nI knew sounds were coming out of my mouth, and at least some of them were Sarah's name. After an unknown amount of blissful time Sarah began to move down again. Her tongue ran lazy circles around my belly button while her finger traced the skin just under the waistband of my jeans. \n\n\"It's very wrong that you're still wearing these.\"\n\n\"Uh-huh.\" I lifted my hips as she unfastened the button and pulled the denim off of me. When they were gone Sarah turned back to my sodden panties, which were plastered to my bare skin.\n\nHer eyes went wide and a smile stretched across her beautiful face.\n\n\"Oh, my god.\" She reached down and touched my depilated mons through the cotton fabric. A moment later she pealed them off and was quietly caressing the bare skin she'd found.\n\nShe shimmied down onto her belly so her face was inches from my sex. Her warm breath was making me tremble. My sex was aching to be touched, but Sarah just stared, fingers softly exploring.\n\n\"Did you do this for me?\"\n\nI nodded. \"Yeah, I wanted ... do you like it?\"\n\nSarah pushed my legs further apart, exposing me fully to her. \"Darling you are so beautiful.\"\n\nIf I hadn't been so ridiculously turned on I would have laughed. I had rather large inner lips that stuck out past my outer labia, and my clit was well above average and overly prominent as well. Having a child had spread things further, making it worse.\n\nJust as I began to feel self-conscious Sarah leaned in and wiped all thought from my brain, pressing her tongue into the skin just below my vagina and licking broadly upwards, through to the top of my slit. I moaned loudly and flopped back into my pillow. God, this was really happening.\n\nSarah began to explore in earnest now, and I lifted my head to watch in disbelief as my recurrent fantasy from the last five months came true before my eyes. And it was exquisite. I'd had guys go down on me in the past. Well, twice, to be exact. Anyway, I could tell they didn't enjoy it, which meant I hadn't either. But Sarah was going at it with gusto. She pushed her tongue deep into my vagina over and over, which felt divine. This continued for maybe thirty seconds of bliss before pulling away to take a deep breath.\n\n\"God, Connie, you taste amazing.\"\n\nBefore I could respond she was back at it. She took a few more passes on my vagina before moving up to my inner lips. She began running her tongue along one side then down the other, occasionally pulling one into her mouth for a more intimate caress.\n\n\"Oh, Sarah, that feels, oh, that's so nice.\"\n\n\"Mmm, you like?\"\n\n\"Uh-huh.\"\n\n\"How about up here?\" Her tongue glided to the top of my pussy, giving my clit a lick.\"\n\n\"God!\" My head slammed back and my hips bucked, trying to push themselves against her mouth.\n\nSarah giggled. \"That was fun.\" She did it again, making me cry out. Then again, and again. I was shaking from head to toe. Lick, lick, lick. Perfect, intoxicating pleasure thrummed through my body. She began to circle my clit before sucking it into her mouth. \n\n\"Oh, oh, Sarah, please don't stop, don't stop, please.\" I was babbling semi-coherently.\n\nSuddenly Sarah pulled away for a moment. I let out a disappointed whine. Sarah ran two fingers over my sex, fully coating them in my juices before sliding them inside me. They found my G-spot and began tapping and caressing as Sarah's mouth latched fully around my clit, sweetly assaulting it with her tongue.\n\nI'd never felt pleasure like this. My mind, body, and soul screamed with love and lust. Incoherent sounds streamed from my lips, and nothing existed but Sarah and the ecstasy she was giving me. I rose higher and higher before finally my body tensed and the world exploded in joy.\n\nMy orgasm pulsed through every part of my body. I stopped making any sounds, my breath caught deep in my chest. My toes curled and my hands had the bed sheets in a death grip. I was trembling everywhere as each spasm seized me and relaxed before taking me again. Spots crackled and popped behind my eyelids. Somewhere, I felt Sarah's mouth, tongue, and fingers continuing to work at driving my bliss forward. But even this heaven couldn't last forever, and I began floating back down to earth. But just like a falling leaf, every little gust sent me spinning back into the air. \n\nWith every gentle movement Sarah made aftershocks shudder through me. I was finally able to draw breath. Sarah's fingers slipped out of me, leaving a bit of an empty feeling. Her mouth kissed its way up over my mound and up to my belly, and I reached out and touched her head.\n\nShe rested her chin on my stomach and looked up at me, her fingers lazily tracing the faint stretch marks from my pregnancy. \"Did you like?\"\n\nI growled in response, taking her hand and pulling her up to me. I kissed her deeply, and tasted both myself and her. Finally there were no barriers between us as our nakedness pressed against each other.\n\nSarah broke the kiss, gazing deeply into my eyes. \"I'll take that as a yes.\"\n\nI nodded and stretched languorously, throwing my arms and legs around Sarah as I finished. \"Mmm, yes.\"\n\n\"Good.\" Sarah nestled her head in the crook of my arm. \"I wanted you to like it.\" \n\n\"Sarah, that was amazing. I didn't know it could be like that.\" I took a deep breath, a blush burning across my cheeks. \"Is it always? I mean, like that?\"\n\nSarah smiled impishly. \"Oh, no, it'll get way better.\" \n\n\"Wha...?\" My eyes widened as she pressed a finger to my lips.\n\n\"Darling, I'm just learning about you, what you like, what you love, what makes you crazy. I'm hoping it'll be a lifelong study, with lots of practice.\"\n\nShe was right, I'd already been thinking about what I wanted to do differently next time. Primarily I'd totally missed that Sarah was about to come. I know, given the chance, I could have made it last longer. And I wanted longer.\n\n\"Me, too. I want that, too. I want to make you happy.\" I ran my fingers through her lovely hair. \"My beautiful girl.\"\n\nWe kissed deeply, sweetly. I was never going to get over how good her lips felt on mine. We finally broke apart, just gazing at each other.\n\n\"I love you, Sarah.\"\n\nShe cracked that adorable smile. \"When?\"\n\n\"Hmm?\"\n\n\"When did you start loving me?\" She snuggled into my embrace and ran a finger over my breast. \"Was it love at first sight? Or did I have to win you over?\"\n\n\"Alright, Miss Bennett, I'll tell you.\"\n\n\"What?\" \n\nHer face was confused, so it was my turn to grin at her. \"It's from 'Pride and Prejudice'. There's a chapter where Elizabeth makes Darcy account for his falling in love with her. It's one of my favorite parts of the book, and it never gets put into the movies.\"\n\nSarah nestled in closer. \"Yup, just like that, then.\"\n\n\"When I opened the door, I couldn't move. I'd never felt like that before, about anyone.\"\n\n\"Really?\"\n\n\"It took me awhile to realize what I was feeling.\"\n\n\"When did you? Realize it?\"\"\n\n\"That night you came home from Grand Rapids, and I gave you that back rub.\"\n\n\"Mmm, that was nice.\"\n\nMy voice was a whisper as the memory played out in my mind. \"You fell asleep in my arms, and I held you close. I'd never seen anything more lovely. That's when I stopped fighting it.\"\n\n\"God, you could have had me right there on that couch after that.\"\n\nI kissed her temple, my legs sliding against hers. \"I'll remember that. Now, your turn.\"\n\n\"Oh, God.\" Closing her eyes, Sarah tried to nuzzle into my neck. I was within a hair's breadth from letting, but I managed to push her away.\n\n\"Huh-uh, no distractions.\"\n\nShe pulled away a little, bringing a hand up and running a finger between my breasts. \"During our interview, I thought you might be gay, the way you were looking at me. It's why I took the job. Maybe I wouldn't have to hide here, with you.\n\n\"I knew you were beautiful, and being near you made my heart race. But then I saw what a wonderful mother you are.\"\n\n\"No, I'm not, I...\"\n\n\"Yes you are. You should see the things I've seen, the things other nannies I know see. Kids that are practically neglected by their wealthy parents. But not you. You play with her, you read to her. That night, coming back from the park, when you talked about what it was to be a parent, I knew then, I wanted a family with you. You're everything I've ever dreamed of.\" She grinned. \"If only I could make you love me.\"\n\nI pulled her to me, tears welling in my eyes, and kissed her with everything I was. \"So, what do we do now? Do we get married? Are we girlfriends? Partners? I don't know how this works, and I want this to work. I want those things with you, too. I love you so much.\"\n\nShe smiled up at me. \"I love you, too, and the thought of being your wife makes me ridiculously happy. But I don't want to rush this, so here's my plan. One year. We take one year to just be us. And then, next Christmas, if you still feel the same way, you can ask me to marry you.\"\n\nGod I loved this woman, still looking out for us, doing what's right. \"Okay. One year. Will you at least move in here with me now?\"\n\nSarah snuggled against me. \"Would I get to use your Jacuzzi?\"\n\nI sighed in mock resignation. \"I guess.\"\n\n\"Then I accept.\"\n\n***\n\nIt was almost five-thirty when I awoke. My sense immediately detected someone next to me, and for an instant I thought that Heidi climbed into bed with me during the night. But then the sleep fog began to clear and I realized who it was. I propped myself up so I could see her better. She was sleeping on her side facing me, hair all tousled up. Her mouth was open slightly and she'd drooled a bit on the pillow. She was adorable.\n\nI watched a moment longer before her eyes fluttered open. Her body stretched under the covers. \"Mmm, good morning.\" \n\n\"Hi. Sleep well?\"\n\n\"Yeah.\" She reached up and touched the wetness by her mouth. \"Oh, that's embarrassing.\" Her hand traveled up to her hair. \"I must look like a mess.\"\n\n\"You are still the most beautiful thing I have ever seen.\" I leaned over and kissed her.\n\nShe smiled up at me. \"This is a nice way to wake up. But we have to get out of bed, don't we?\"\n\nI nodded. \"Yeah.\" I went down for a half an hour on the stationary bike while Sarah headed into the shower. By the time I came back upstairs Sarah was in Heidi's room helping her get dressed. I stopped and listened for a moment as they discussed what they were going to do today, what shirt to wear and such. Heidi's voice was happy, and there was a calmness in Sarah's replies that warmed my heart. I forced myself away and into the shower.\n\nBy the time I was dressed and arrived downstairs Heidi was in her chair at the kitchen table munching on some green grapes while Sarah stood at the stove, eggs and sausage sizzling in the skillet.\n\n\"Morning, mommy!\"\n\n\"Hi, sweetheart. Did you sleep well?\"\n\nHeidi nodded, popping another grape into her mouth.\n\nSarah glanced over her shoulder. \"Hey, you.\"\n\n\"Hi.\" I checked the clock. \"I've got to get going.\"\n\n\"I know, give me just a second.\" At that moment the toaster popped up and Sarah deftly plucked out two halves of an English muffin. Sarah slid an egg onto one, along with a dash of Cajun seasoning. She added a piece of sausage and some cheese, wrapping it in wax paper. Suddenly I had a homemade breakfast sandwich. \n\nI kissed Heidi on the cheek and said goodbye. I slung my work folio over my shoulder, grabbed my purse and turned back toward Sarah, who was holding my lunch bag, which she'd also prepared, and a little sack with my muffin sandwich. God, I was spoiled. \n\nI took the bags in one hand and her free hand in the other. She shifted imperceptibly closer, but I knew Heidi was watching and I self-consciously pulled away. The change in Sarah's eyes was immediate. They fell slightly, her smile dipping just a little, but they stoically held, wordlessly letting me know it was okay. But it wasn't and I knew it. We were less than three days into this new relationship, and I'd already hurt her.\n\nSomething inside me steeled as she started to back away.\n\n\"Well, I...\"\n\nI didn't let her finish, pulling her close and kissing her soundly. She sighed, and as we embraced the tension I'd caused a moment ago just flowed out of her.\n\nWhen we broke apart her real smile was back, and her eyes were dancing. \"Have a \n\ngreat day, Sarah. I love you.\"\n\nShe squeezed my hand. \"I love you, too. Hurry home.\"\n\nI nodded and turned back to Heidi, who was staring open mouthed, still clutching a grape. I covered the distance in two steps, kissing her on the forehand. \"Bye, munchkin. Be good.\"\n\nShe nodded, eyes still wide, as I walked out to the garage. I could hear Sarah behind me. \"Okay, kiddo, you want some eggs?\" There was music in her voice. As I climbed in and started my car I made myself a vow that I would never be ashamed of our relationship, ever.\n\nWorking at an ad agency meant we had plenty of high quality printers, and while personal use was technically a no-no, as long as it wasn't excessive no one cared. I'd had Sarah send me that picture of her and Heidi from their first day together, so it was easy to get it into my company email and print it out on photo paper. I'd gotten a frame in a random gift exchange years ago that was collecting dust in my bottom drawer. So a few minutes for the ink to dry and voila! A picture of my girls up on my desk.\n\nI didn't have many pictures. One of my parents from before mom got sick, one of my brother's college graduation, and a couple of Heidi, her first baby picture and the one from her school a few months ago. \n\nI leaned back in my chair, almost daring someone to walk into my office. My desk sat in a corner, so everyone could see anything I put on it. I wasn't sure what I was going to say, but I was ready to try. No one disturbed me for about an hour, and I'd finally started to get my mind back on the account I was working on, when there was a knock on my open door.\n\nIt's one thing when you look over your shoulder and see the teacher watching you. It's another thing entirely when it's the principal. \n\n\"Mr. Auriemma! Please come in. How can I ...\"\n\nRonaldo Auriemma, CEO, founder of my firm, and general god of my work universe, just held up his hand with a smile.\n\n\"No, Connie, I don't want to interrupt, much, but, ... oh, is that for the new Honda dealership spots?\"\n\nI blushed. \"Umm, yeah. It's just something I'm playing with. If I have to see one more ad with the owner standing in front of a blue-screened glamour shot of his lot I'm going to scream.\"\n\nHe stepped closer and I showed him what I was doing. He nodded. \"Keep working on it. Looks good.\" He reached out and picked up Heidi's school picture. \"And how is the little one? Heidi, right?\"\n\n\"Yeah, she's wonderful. Just turned four on me. She's in preschool, if you can believe it.\"\n\n\"It goes fast. Don't blink.\" He and his wife had seven children, all grown, with an untold number of grandkids. He was a devout Catholic and devoted family man. I remember him coming to see me when I had to tell my boss I was pregnant. He'd sat me down and told me that he and his company were fully supportive, and if I needed anything just to ask. I'd felt very safe.\n\nHis eyes slid over to the new picture, and I was still nervous.\n\n\"And who is this?\" He picked up the photo of Sarah while I took a deep breath. \n\n\"That is my girlfriend, Sarah.\"\n\nHis eyes widened slightly. \"Really? I didn't know you dated women.\"\n\n\"Neither did I, until I met her.\" Well, in for a penny. \"I've only known her for five months, but I've never been this close to anyone. Heidi adores her, and now everything just works. I think she's the one.\"\n\n\"I understand, and I'm happy for you. I remember when I realized how badly I needed my Maria. To my shame, it was many years after our marriage, when I almost lost her to an accident.\" He took a deep breath, and brightened his voice. \"That does remind me the reason I stopped by, after all. Maria's putting on her little party Friday night.\" My mouth crooked up into a little one sided smile. There was nothing 'little' about the boss's Christmas party. There'd be expensive catering, free champagne, valet parking, etc. \"Just wanted to invite you, and please bring, uh, Sarah, right?\"\n\nI nodded. \"We'll try.\"\n\nHe gave me a fatherly pat on the shoulder. \"Good. I'd very much like to meet the woman who melted Constance Walker's heart.\" With that he made his exit, and I heaved an inward sigh. With everything going on I'd forgotten all about the party. I'd talk to Sarah tonight and gauge how she felt about it.\n\nThe day dragged by, including a mind-numbing brainstorming meeting and a ninety-minute conference call with my least favorite client.\n\nThe house smelled like garlic and lemon. I inhaled deeply as I walked in and heard Heidi's voice from the living room. It was halting and unsure. G-gh-O-S-T. G-ghost. It's ghost!\"\n\n\"That's right sweetie, good job.\"\n\nI walked into the living room, where Heidi was on Sarah's lap, a phonics book open in front of them.\n\n\"Hi, guys!\"\n\n\"Mommy! Look! This says ghost.\" She pointed intently at the large word on the page.\n\n\"I'm proud of you sweetie, that's great.\" I slid in behind Sarah, putting my arm around her. She turned her head for a kiss, and I obliged without hesitation.",
        "\"Hi.\"\n\n\"Hi, I'm glad you're home.\"\n\nI pressed my forehead against hers. \"Me, too.\" I pressed my lips to hers again, and I could feel the heat in body starting to rise as she sighed. \n\nA giggle from the munchkin broke the spell.\n\n\"You're kissing Nanny Sarah again.\" \n\nI looked at her without releasing Sarah from my embrace. \"I'll be doing that a lot from now on.\" Just as I finished the timer on the stove began dinging.\n\n\"Oh, dinner!\" Sarah stood up and ran into the kitchen, and Heidi scooted over toward me and I wrapped her in a hug. \"What do you think about me kissing Nanny Sarah?\"\n\n\"But she's a girl. Don't girls usually kiss boys?\"\n\nI shrugged. \"Most of the time, but not always.\"\n\n\"Oh. She gets happy when you come home.\"\n\n\"What?\"\n\n\"When Nanny Sarah knows you're coming home she always starts smiling more. And you smile more when she's around. I like it. I hope she never leaves.\"\n\n\"Me too, Heidi.\" My insides were melting.\n\n\"Con? Would you set the table?\" Sara's voice sounded from the kitchen, and my daughter and I jumped to obey.\n\n***\n\nAs I closed the door to Heidi's room. I could see light coming from the bedroom. Sarah wasn't there, but as soon as I entered I could smell lavender in the humid air.\n\nI poked my head into the bathroom, where a very relaxed Sarah was luxuriating in my, I mean our, Jacuzzi. She smiled innocently up at me through her pretty lashes while her finger trailed lazily through the water. \"You know, there's lots of room.\"\n\n\"Gimme just a sec.\" I stepped back into the bedroom with alacrity and had to force myself not to rip my clothes off. Once undressed, I sauntered back into the bathroom. Sarah pursed her lips in appreciation and held out a hand, but I let it slide past, instead going to the mirror and slowly taking off my makeup. \n\nFacing away from the tub, I let my behind sway back and forth, earning a deep-throated growl from my love. \"You are an evil woman, Constance Walker.\"\n\n\"Whatever do you mean?\" I clasped my hands behind my back and stretched my shoulders, deliberately pushing my breasts towards the mirror. Sarah's emerald eyes went wide.\n\n\"Get in this tub now!\"\n\nI turned, leaning against the sink and trying to look coquettish, but Sarah was sticking her tongue out at me, and my giggling stripped away any pretenses of sexiness on my part. The pristine bell of her laughter sounded, a dazzling smile spreading across her face. She leaned forward, crossing her arms on the edge of the tub, shoulders glistening. God, how I wanted her.\n\nA moment later I'd climbed into the water. Sarah turned, her back pressing against my chest, giving my hands the freedom to roam over her smooth, wet body, warm and soft to the touch. She rested her head against me, and our mouths found each other, melding into one as our tongues danced and caressed each other. Fire raced through my core as we kissed. Our legs moved against each other's, and I could feel the length of her body pressing against me. We fit together so perfectly.\n\nMy right hand was cupping her breast, absentmindedly rubbing her pert nipple between my thumb and forefinger. I let it go and drifted south, circling a digit around her belly button before sliding down past the flat of her tummy and through the small patch of curly hair on her mound.\n\nHer legs shifted, spreading to welcome my advance. She broke our kiss, sighing as she nuzzled her face into the crook of my neck. She softly kissed my skin, as my middle finger glided through her pussy, coating itself with her own very different wetness. \n\nShe shuddered as I explored her, eyes shut tight against the pleasure. My fingers swirled around her core, then up to where her little nub still hid beneath its hood, then back down and up again slowly. I was in no rush, just basking in the joy of holding Sarah and giving her pleasure.\n\nSarah wrapped an arm up and around my neck, her hips starting to move against my hand. Her breath was hot on my neck, coming now in gasps. Her clit was fully aroused now, but I avoided it for the most part, giving only occasional, gentle touches. She moved to try for more contact, whimpering slightly into my neck.\n\nI scissored two fingers around her hood and clit, massaging gently up and down. Sarah quietly matched my rhythm and I could feel her getting closer. More direct contact with her nub caused her to start to moan into my skin, her arm pulling me tighter, and I felt her stating to clench.\n\nI moved my lips to her ear. \"Come for me, sweetheart.\" Sarah began to shake in my arms, her lovely face twisted in ecstasy. As wave after wave pulsed through her, I whispered that I loved her over and over. \n\nAs her orgasm receded, she pulled my arms around her. \"That was nice.\"\n\n\"I'm glad you liked it.\" I took a breath and kissed her on the temple. \"I'm sorry about this morning.\"\n\n\"Hmm? Oh, it's okay. You did fine.\"\n\n\"I just, I don't want you to think I'm embarrassed about us.\"\n\n\"Darling, this is all very new to you, and to me too, being out to anyone. I mean, assuming that's what you want.\"\n\n\"It is, very much.\" I pulled her tight. \"I, uh, even put your picture on my desk.\"\n\nShe looked back at me, her eyes dancing. \"Really?\" I nodded. \"Did anyone say anything?\"\n\n\"Oh, God, yes.\" I gave her a brief overview of my encounter with my uber boss. \"That does remind me though. If you really want to be out, you should come to my office Christmas party Friday. You were invited specifically.\"\n\n\"Do you want me to come?\"\n\n\"Yeah, I really do. Besides, there will be dancing.\" I caressed her side, leaning close. \"And I so want to dance with you.\"\n\nSarah giggled and pressed herself against me. \"Okay, now the question is, what shall I wear?\" \n\nWe cuddled there, our bodies resting together. How could I feel this close to someone so soon? Whenever I was with her, my life just made sense. Preparing dinner, playing with Heidi, making love, it was right, in a way I'd never experienced before. I almost teared up at the intimacy and purity of the moment. (I'm a crier. You haven't figured this out yet?) We were together and that made it all perfect. \n\nEventually we had to climb out of the tub, drying each other with soft fresh towels. Sarah linked her arm in mine and walked me slowly to our bed. She pulled me up onto the mattress with her before putting a hand on my chest and pushing me back onto the pillows. Her gaze was soft and adoring, making my heart swell. I reached out to touch her, but she intercepted my hand and kissed the palm.\n\n\"Connie?\" Her eyes flashed at me, and I somehow I husked out a response.\n\n\"Yes?\"\n\n\"Do you know how much I love you?\" She kissed my wrist, and continued softly up my forearm, her eyes never leaving mine. Lost in her, I couldn't say anything. I drew a shuddering breath and nodded.\n\nShe shifted, her hanging breasts trailing lazily over my tummy and then melding with their smaller counterparts, her face directly above mine. \"Will you let me show you?\"\n\nI lifted my hand and touched the side of her face. \"Oh, Sarah.\" She smiled and I had one brief moment to drink in her beauty before she lowered her mouth to my neck. \n\nI tilted my head to the side, giving her better access as she suckled there. My fingernails traced gently down her back, causing her to hum in pleasure. I drew and let go a deep breath; the joy of Sarah's kisses radiating out to my fingers and toes as I did. And then, something magical happened. For the first time in my life, I gave myself to my lover.\n\nThere'd always been a sense of fear in sex, at least for me. Was I pretty enough? Skinny enough? Would I be any good? Especially the last one, as I didn't do it very often. Even last night, with Sarah, I'd heard those demons whispering to me. But this time, I don't know. Maybe because it was our second time, or maybe it was the way she'd looked at me, but tonight there was no fear. It was just intimacy, joy in Sarah's presence, and wonder in feeling my love for her flower.\n\nI sighed in pleasure as her mouth found one of nipples, luxuriating in her attentions, my fingers running gently through her soft auburn hair as she loved me.\n\nEvery nip of her teeth and swipe of her tongue ignited me, heat rising in my core as my sex dampened in anticipation of its turn for Sarah's attention.\n\nI was breathing heavily, soft moans escaping every other intake of air. Sarah worshipped my breasts, one then the other. My whole body trembled as she finally began to kiss over my stomach. My legs opened as my lover settled between them. Her fingers traced over my inner thighs, making me quiver in anticipation. \n\nHer breath was hot on my pussy, driving me insane. \"Please, Sarah, sweetie, please, please.\"\n\nHer tongue finally dipped into my sensitive folds, and my head slammed back into the pillow, hips lifting toward that heavenly mouth. \"Oh, God!\"\n\nShe worked me slowly, and pleasure thrummed through every part of me. She was giving me a gift, one I'd be able to reciprocate. She gave it because she loved me, just as I loved her. She pulled my clit into her mouth, caressing it with her tongue. I let her set the pace. She was holding me off, and I wanted more, but I was in her hands. I was safe there.\n\nMy hips rolled with her rhythm. Her tongue continued, from my nub down to my core and back, swirling round and around. Softly, slowly, I was building; headed inexorably toward a place I'd never been before. \n\nA finger slipped inside me, and my pleasure shifted a gear. Her tongue lashed at me, her fingers working in harmony from within. My orgasm teetered for a moment before crashing over me. I cried out over and over with each spasm of joy. The world started to fuzz out, but eventually I was able to breathe again.\n\nShaking, I looked down at my love, who was still teasing me from between my legs. She was smiling at me, and I reached down and caressed her hand. Her eyes closed and she leaned into my hand before bending back to my sex, where she began again. \n\n\"Oh, Sarah.\" My eyes closed as the pleasure began again. I don't know how many times she brought me to bliss that night. When she finally crawled back into my arms and we slid under the covers, I couldn't stop kissing and touching her.\n\nShe looked deep into my eyes. \"That was fun. I love the way you taste.\"\n\n\"You are beyond wonderful. Thank you.\"\n\n\"Oh, darling, you never have to thank me for loving you. \"\n\nI grinned at her. \"I like that, 'darling'. You always call me that.\"\n\nSarah smiled. \"I know it's old fashioned. But it's what my dad's mom always called my grandpa.\" My lover blushed a little. \"It was always so sweet, the way she said it. When I'd imagine having a family, I always imagined calling my partner darling.\" \n\n\"So it's what you call your girlfriends?\"\n\n\"No, just you.\"\n\nMy heart swelled as I pulled her closer as she snuggled into me. I wondered how deeply I could fall in love with her.\n\n***\n\nFriday eventually came. I'd gotten a number of comments regarding Sarah's picture on my desk, with plenty of variations on 'Can't wait to meet her.' The surprise was evident on many faces, but there was no negativity, at least not to my face. People were in a pretty jovial mood, considering the week and a half off we were all about to receive.\n\nI got home just before five, having snuck out of the office a little early (along with at least half of my colleagues.) An email had popped into my inbox around lunchtime from Mr. Auriemma. \"Looking forward to seeing you at my little party, and meeting your Sarah.\" I sent back that we would be there, butterflies starting to tingle in my stomach. \n\nWhen I came in through the garage Joan was already there, Heidi impressing her with her improving reading skills.\n\nHeidi dropped her book and ran to give me my hug, which I returned with joy. \"Where's Nanny Sarah, sweetie?\"\n\n\"Upstairs. You're not 'posed to peek.\"\n\n\"She's in her old room, told us to tell you to not go snooping until she's ready.\" Joan's eyes twinkled with devilish light, and I knew better than to press.\n\n\"Fine. I have to get ready myself, anyway.\" I looked at Heidi. \"Are you okay with Miss Joan?\" Heidi nodded. \"Okay, be good.\"\n\n\"Yes, mommy.\" As Heidi made her way to Joan's grandmotherly lap I set my bags down and headed upstairs. I could hear movement from the guest room, but I resisted and made my way into my en suite to shower.\n\nThat accomplished and my hair in rollers I went to my closet. A chill went up my spine as I thought about my dress. I'd bought it the year before Heidi was born, for this very party.\n\nI pulled it out from the back and unzipped the garment bag, drawing out the royal blue fabric. I remembered trying it on, how elegant it had looked in the tri-fold mirror at the boutique. I'd felt beautiful, which was rare for me. The year after it didn't fit any more. I'd put it back in the bag, and there it had sat. But now I was near twelve pounds lighter than when I'd last tried it on.\n\nI ran my fingers over the silver beadwork, which not only graced the waist, but also ran in a starburst over the dual neckline, a sweetheart base overlaid with a lace bateau.\n\nI laid out the dress gently on the bed and pulled out a pair of matching thigh-highs with a panty-garter combo. I had to dig for the three-inch pumps I'd bought to go with the dress. \n\nI spent extra time on my make-up, my mother's voice ringing through my mind. \"You're already a pretty girl, Constance. Remember, less is more.\" Just some foundation, muted eye shadow, and coral lipstick. A touch of mascara, and I was done.\n\nThe moment of truth was upon me, and I lifted the gown and let it slide over me. My fingers found the little hidden zipper and pulled up, while I resisted the urge to suck in.\n\nIt fit like a glove. I stared at myself in the mirror, and for the first time in so long I felt beautiful. And I knew that feeling was in no small part due the woman who loved me. I grabbed my jewelry, diamond studs and a silver bracelet, along with a black clutch and I walked out the door. \n\nThere she was, hand on the banister next to the stairs. Her gown was emerald green, making her eyes shine and her hair burn copper. The halter-top accentuated her full breasts. Cinching in tight at the waist, chiffon folds flowing down to her ankles. A single, round cut red gem glittered on a gold chain around her neck, with two smaller ones on her ears.\n\nShe was a vision. She just ... glowed. I forced my mouth to move. \"You are so gorgeous. I'm going to be the envy of every guy, and a lot of the gals tonight.\" Sarah blushed and walked towards me, looking deep in my eyes and taking my hand.\n\n\"But you get to take me home.\" She raised my hand and kissed it. \"And take my dress off.\" Her tongue flicked out and licked my wrist. \"And have your way with me.\"\n\nI was shivering from head to toe, and the results of my arousal were threatening to make the rest of the night uncomfortable between my legs.\n\nSarah pulled away slightly. \"But first, I want to dance with you, my beautiful Connie.\"\n\n\"You think I'm...\"\n\n\"Darling you're stunning. I'm just glad everyone gets to see you like this. It's how I always do. There's never been one time I've looked at you when you haven't been the most beautiful thing in the world.\"\n\nI felt tears burn in my eyes.\n\n\"No, no, don't mess up your make-up.\" Sarah rose up and pecked me on the lips. \"Now let's go say goodbye to Heidi.\"\n\nSarah took my arm and we walked down the stairs. Heidi's eyes went wide at our entrance. \"Mommy, you look so pretty. So does Nanny Sarah.\"\n\n\"Thank you, sweetie.\"\n\nJoan had clapped both her hands over her mouth, her eyes shining. \"I want a picture.\" She reached out and grabbed her phone. \"Go stand by the tree.\"\n\nWe spent a few minutes letting Joan position us and take pictures. She promised to send us the best ones, and we were out the door. \n\nAs we entered one of the ritzier areas of Meridian Hills, I could feel Sarah's tension rising.\n\n\"Nervous?\"\n\n\"A little. This is a first for me.\"\n\n\"Me too. But I'll be okay. You're here.\"\n\nWe pulled up to the massive house, queuing up behind three or four other cars. Sarah leaned forward in her seat. \"Is there valet parking?\" \n\n\"Yeah, has to be, and they spare no expense for this thing.\" A few minutes later it was our turn. A young man in a black vest opened Sarah's door, while one in red came to the driver's side. After handing over my keys and getting a ticket I headed around, where Sarah linked her arm in mine, still staring at the entryway, where Doric columns flanked the door, all glittering in blue and white lights. \n\nWe walked along a red carpet through the marble foyer, which was larger than my first apartment, to the back of the house. The glass doors were flung wide, giving access to Mr. Auriemma's 'party room'. At least that's what he called it. The rest of the world would call it a ballroom, which was far more accurate. The vaulted ceiling was at least thirty feet, with floor to ceiling windows throughout. A double string quartet with an accompanying piano was playing 'Let it Snow' on a stage at one end.\n\nThere were a number of people in a line just inside the door, and we joined up for the chance to greet out host and hostess. Eventually we made our way to the front where my boss was standing with his wife.\n\n\"Ms. Walker.\" He took my hand and held it warmly in both of his, leaning forward and giving me a little air kiss on the cheek. \"You look beautiful this evening.\"\n\n\"Thank you.\" I looked around the room. \"You've really outdone yourselves this year.\"\n\nHis eyes twinkled as he glanced at his wife. \"It's all Maria's doing. I think she spends all year making sure it's perfect.\"\n\nI gave the little Italian woman at his side a quick hug before stepping back. \"And this is my girlfriend, Sarah Peters. Sarah, this is Ronaldo and Maria Auriemma, the owners of my agency.\"\n\nSarah was wearing her most charming smile. \"Thank you for inviting me. Your home is beautiful.\" \n\nMr. Auriemma took her hand and lifted it to his mouth, giving the back a gentle kiss. \"You are most welcome, my dear. I've heard from several people how much happier our Connie has seemed these last few months.\" Sarah's cheeks reddened slightly at the compliment. \"I understand why now. Please enjoy the party.\"\n\nSarah shook Maria's hand as well and we moved away into the huge room. We found space at one of the large tables ringing the dance floor. I held Sarah's hand as she sat down.\n\n\"You want a glass of champagne? Or something else?\" I nodded toward the far side of the room. \"There's a full bar.\"\n\n\"Champagne sounds lovely.\"\n\n\"You'll be okay?\"\n\nShe kissed the back of my hand and tilted her head, those big gorgeous green eyes lifted up at me. \"Of course, but hurry back.\"\n\nSuddenly I had an intense urge not to go anywhere, but my lady had asked for a drink, and I know I needed one myself if I was going to attempt to dance in front of anyone I was going to have to ever see again.\n\nI got stopped multiple times for hellos on my way to the bar, so it was almost ten minutes before I made it back to the table with our drinks. As I approached I saw Sarah being chatted up by Evan and Carter, two of the ad men on a different team. Carter had his foot up on a chair, leaning over his knee while Sarah tried to lean away without being rude. Jealousy spiked in my brain for a second, before rationality tamped it down by realizing neither of those two self-declared mack daddies had any chance with my girl.\n\nAs I approached I picked up on the conversation from Carter. \"Come on, it'd be criminal for us to let a beautiful girl sit here alone.\"\n\n\"She's not alone.\" I slid into the seat next to Sarah and set down out drinks. \"Hi, sweetheart, sorry it took so long.\" Our hands interlocked, Sarah putting her other palm on my elbow for emphasis.\n\n\"That's okay. These two nice young men were keeping me company.\"",
        "Carter was wearing a dumbfounded look on his face. I think he really believed he'd been making headway. Evan looked like he couldn't wait to take the mickey out of his friend. \n\nI turned to them. \"On the prowl again, I see? Finally give up on Taylor?\" Our new receptionist was quite pretty, but also quite devoted to her boyfriend, much to the chagrin of the duo present.\n\nI took a sip from my champagne flute. \"I promised my girlfriend a dance. Shall we?\"\n\nI stood and held Sarah's hand as she rose to her feet. \"Good night, boys. It was nice to meet you.\"\n\nFingers intertwined, we made our way to the dance floor. While I'd been on my way to the bar had several of my coworkers had made me promise I would introduce them to my new flame, but that could wait. First, I wanted to dance with Sarah.\n\nAs we approached the music stopped, causing the couples to break apart followed by a smattering of applause. The leader of the group leaned into the microphone. \n\n\"Thank you. And now, a lover's waltz.\"\n\nI knew from past years there'd be a number of couples who actually knew how to waltz, but they would be moving around the outside of the sizeable dance floor. \n\nAs the music started I led Sarah to the center, where we wouldn't be in anyone's way.\n\nShe looked at me with those lovely green eyes, a mischievous grin playing across her features. \"So, can you waltz?\"\n\n\"Not a clue.\"\n\n\"Me neither.\" She wrapped her arms around my neck. \"I guess we'll have to make it up as we go, huh?\"\n\nI nodded, sliding my hands around her waist. The music flowed around us, sealing away the outside world. She laid her head on my shoulder as we moved together. No spins or dips, just the good old high school two-step, where you swayed back and forth with your sweetheart.\n\nFor two numbers we stayed like that, arms around each other, alternating between cuddling together, gentle kisses, and just looking into each other's eyes. I could sense myself falling deeper in love every moment on that dance floor. \n\nI remembered being on that couch, when I'd finally admitted to myself how I felt about Sarah. Those feelings had deepened so many times in just the four months since. And now it was happening again. As I held her I wondered how deeply it was possible to love someone. In a way it was like cresting the first hill of a roller coaster, terrifying and exhilarating. How far could I fall?\n\nEventually we made our way off the floor, and I began introducing her around. The hot button question was, of course, 'how did you meet'? I hadn't even considered that. I know Sarah's occupation was a sore spot with her family, or her mother at least, but strangers? I wasn't sure.\n\nThe first test came from my team manager, Dan Edwardson, who was sitting at a nearby table with his wife.\n\nHe stood as we approached and shook my hand. \"Connie, you look wonderful. You know my wife Michelle?\"\n\n\"Of course. You don't clean up so bad yourself, Dan. Guys, this is my girlfriend, Sarah.\" I introduced Dan, who gallantly kissed the back of her hand.\"\n\n\"So you are the reason we catch Connie staring off into space and smiling so often recently.\"\n\nSarah smiled and looked aside at me. \"I better be.\"\n\nDan gestured to two open chairs. \"Join us.\" I took a moment to snap up a couple pieces of bruschetta from a passing hors d'oeuvres tray, setting one in front of my love.\n\nDan took a piece of the tomato and onion covered bread as well. \"These are better than last year's.\"\n\nI'd just began to take a bite when Michelle asked 'The Question'. \"So how did you two meet?\" My mind raced as I chewed, thinking I'd royally screwed up when Sarah's voice answered.\n\n\"Actually, she's paying me to be here.\"\n\nI almost spit the bread out of my mouth. I swallowed hastily. \"I am not! You're off the clock and you know it.\" \n\nDan and Michelle's bemused expressions were priceless. When Sarah finished laughing she explained. \"I'm her daughter's nanny. It only took me a few months to figure out I really liked taking care of both of them.\" She put her hand on mine and gave me a sweet look that made me melt inside.\n\n\"Ohhh!\" Apparently Sarah's look melted more hearts than mine. Michelle was holding her hands over her mouth. \"You guys are adorable. Dan, you remember when we looked at each other like that?\"\n\n\"Well, why don't we go dance and you can remind me?\" They bade us goodnight and moved to the dance floor.\n\nWe recounted the story several more times that night, with Sarah being unerringly charming with my coworkers. We danced more and had a few more hors d'oeuvres. Finally, while swaying to the music, the most beautiful face in the world looked up at me.\n\n\"Darling? Take me home.\"\n\nI kissed her. \"Yes, my love,\" and we walked out hand in hand.\n\nIt was a little past midnight when we got home. Joan was sleeping on the couch under my afghan, while Roger sat in a chair next to her watching Jimmy Kimmel. \n\n\"Joan was right, you both look beautiful.\"\n\nI gave him a warm smile. \"I'm sorry we're so late. We lost track of time.\"\n\n\"Bah, I've been young. Brought Joan home at two a.m. once, we'd fallen asleep in my parents' living room. That conversation with her father was not pretty.\"\n\nJoan started to stir, and soon I'd seen them out with hugs and kisses, and a promise from Sarah for a thank you dinner on Sunday.\n\nWe walked up the stairs still holding hands. Matter of fact, except for getting in and out of the car, we'd been that way since that dance ended. We quietly opened Heidi's door.\n\n\"Mommy?\"\n\n\"Why are you still up?\" I eased into the room and bent over to kiss my daughter's cheek. \"Good night, sweetheart. Love you.\" \n\n\"G'night, love you too. Is Nanny Sarah here?\"\n\n\"Yes, Honey, I'm right here.\" Sarah stepped to my side as Heidi held out her arms. Another good night kiss and an exchange of 'I love you's' that made my heart melt. Heidi's head nestled back into her pillow as I ran my hand through her light brown curls before bending down and kissing her head.\n\nWe closed the door gently behind us, Heidi's breathing already slow and even. I wondered if she'd even remember this is in the morning. I took Sarah into my arms and kissed her.\n\n\"Can I put you to bed now, too?\"\n\n\"You go on, I'll be in in a minute.\" She gave me another kiss and headed to her old room, while I stumbled dreamily to our shared bedroom. I quickly took off my make-up and gown, walking back in only my lingerie. I sat down on the edge of the bed and reached back to unfasten my backless bra, giving my boob a scratch where the underwire had been irritating my skin. \n\n\"That's so sexy.\"\n\nI fully intended to give her a dirty look, but the sight of my beloved in a pink baby doll wiped all thoughts from my brain, changing my expression into the gap mouthed look of someone recently hit over the head with a mallet. \n\nSarah leaned against the doorjamb, one hand fiddling with the decorative bow between her breasts. She cocked her head to the side. \"Do you like?\"\n\nI nodded, dumbly. Sarah closed the door behind her, reach each intentional step towards me making her hips sway. She sat on my lap, legs straddling my waist. I looked up into her eyes, a novel experience, but I liked it. Our lips found each other, and we kissed deeply, her left hand caressing my neck while the other ran through my hair. I broke from her mouth and moved down her throat reveling in her warmth and softness, when a huge yawn escaped my chest.\n\n\"Are you bored of me already?\"\n\n\"No, honey, I'm just ...\" Another yawn broke free. \"I'm sorry.\"\n\nSarah giggled. \"I think we need to put you to bed.\" She slid to her knees in front of me, running her hands down my sides to my garter belt.\n\n\"Leg up.\" I lifted my right so she could undo the clasps, then the other side. Next came my stockings, which she rolled down each leg, kissing the exposed skin as she went. Despite my exhaustion, I could feel that delicious tingle building under my panties. That'd happened a lot in the last few hours.\n\nI heard Sarah inhale deeply before reaching out and a running a finger over my lacy thong, which made me shudder.\n\n\"Oh, you're all excited.\"\n\n\"Sarah, sweetie. I've been excited since I first saw you in that dress.\"\n\nSarah smiled, her voice becoming playfully stern. \"Well, you can't go to bed like that. Lift up your butt.\"\n\nI complied, and she peeled off my sodden undies. Rising up on her knees she pushed me back before spreading my thighs. \"Now just relax; let me take care of you.\"\n\nI did as instructed, my entire body humming in anticipation of what was coming. Her mouth enveloped my sex, and I floated along in the ecstasy she was creating in me. She was gentle but insistent, and soon the orgasm that had been building in me all evening shook my body.\n\nWhen I regained my senses I looked down, where Sarah was beaming up at me from between my legs. I pulled her to me, tasting myself on her lips.\n\nSarah broke our kiss and touched my nose. \"You need to put on a nightgown, just in case you know who decides to wake us up in the morning.\"\n\n\"Yeah.\" I stood up, one hand on my nightstand for balance, and made my way to my dresser. I could see Sarah turning down the bed in the mirror. I pulled on a nightgown, a long one. No panties tonight, the little lady needed to breath. I crawled between the sheets. The sheets were cool, my lover was warm, and it was heaven. \n\nSarah snuggled into my embrace, and we shared little kisses, reveling in the closeness. I stroked her hair and gazed into her eyes. \"Did you have a good evening?\"\n\n\"Mmm, yeah. Fanciest party I've ever been to. At least as a guest.\" A touch of pink colored her cheeks. \"I just liked being with you. Hearing you call me your girlfriend.\"\n\n\"Me telling everyone how amazing you are.\"\n\nHer blush deepened. \"Yeah, that too.\"\n\n\"You are, you know.\"\n\n\"Hmm?\"\n\n\"Amazing.\" I kissed her on the forehead, my nails running over the exposed skin on her shoulders, earning a sigh. \"Beautiful.\" My hand ran down the lace of her teddy and over the swell of her hip, and pulling he leg over mine. \"Perfect.\"\n\nI pushed my thigh against her sex. Her sharp intake of breath told me she was as excited as I'd been earlier. I was going to take care of my girl.\n\n\"My girlfriend, partner, the woman I love, my precious girl.\" I continued a stream of sweet nothings. In the week we'd been together, I'd found this drove her crazy. Nothing obscene or suggestive, just gentle reminders that she was cared for, cherished, beloved.\n\nAs the words came I slipped my right hand under her baby doll top and onto her flat soft, stomach, rolling her gently onto her back, her head still cradled in my left arm. Her eyes gazed up at me wide and wanting, but with such love and joy it shattered me.\n\nMy fingers played over the silken fabric of her tiny panties, reveling in her heat before sliding beneath the waistband and burying themselves in her.\n\n\"Oh, God!\"\n\nMy fingertips curled up, working against that special spot, my thumb gently caressing her rapidly swelling nub. Our gaze never left each other, the pure surrender in Sarah's green eyes taking my breath away. It was the look of a woman that needed to come, surely, but it went so much deeper than that. She had given herself to me, fully. Not just her body, her heart, mind, and spirit as well. They were mine to religiously cherish or soullessly crush.\n\nAnd my Sarah was not one act in haste. She was an Elinor, not a Marianne. I couldn't imagine what it would be like for her. She'd risked everything for us, and I swore to myself, not for the first time, that I'd be worthy of that trust.\n\nThe immediate concern though, was bringing my beloved to bliss. I kissed her gently as my fingers continued to work inside her while my thumb teased out her clit. A few minutes later, she began to tremble in my arms, a sure sign she was getting close. Normally I'd try to draw things out, but it was really late, so I pushed forward.\n\n\"Come for me, baby. I love you so much.\" Her lovely green eyes closed, her mouth parting in pleasure, letting go a long moan. Her walls clamped down around my fingers, releasing and tightening again and again. She rode wave after wave, until she finally relaxed and I pulled my fingers away, cleaning her essence from them with my mouth. \n\nHer eyelids fluttered open, and we kissed, long and slow and beautiful. Eventually she nuzzled into my neck and we whispered soft 'I love you's' as we fell asleep, wrapped in each other's arms.\n\n*******\n\nThis was an emotional part for me, as there's a lot of personal experience here. I hope you enjoyed it."
    ],
    "authorname": "JCMcNeilly",
    "tags": [
        "lesbian romance",
        "romance",
        "drama",
        "lesbian drama"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/nanny-sarah-pt-02"
}
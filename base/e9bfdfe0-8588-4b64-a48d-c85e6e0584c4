{
    "title": "Two Hundred Dollars More Ch. 01",
    "pages": [
        "Note: this story takes place immediately after the end of Chapter 29 of Two Hundred Dollars. You're going to miss a lot if you haven't read that one through.\n\nXavier.\n\nDay 1\n\nLaura's face flushed red, her eyes still brimming with tears she hadn't had time to shed, and she looked over with a hopeful half smile at her friend. Bailey returned the shy smile and nodded.\n\nOn the white board at Kent's back, the two girl's had made six tick marks, indicating exactly that to which they had consented.\n\n\"You're really going to take spankings for me?\" Laura asked.\n\n\"You put your butt on the line to help pay off my debt,\" Bailey reminded her. \"This seems fair.\"\n\nBailey smiled more broadly at Kent.\n\nYeah, Bai, he thought. I hope this works, too.\n\nThey'd spent some ten weeks burning through a debt of two hundred dollars Bailey had owed Kent. Short on cash, she'd offered him the chance to spank her, at ten spankings per dollar, until the debt disappeared. In time, she'd taken off more and more clothing to get a better ratio in spankings to dollars. In more time, Laura had joined, helping the debt reduction and turning up the creativity to score a few extra dollars here and there.\n\n\"Bare asses?\" Laura asked Bailey, who nodded.\n\nThe word still sounded odd on Laura's puritanical tongue, but they'd had an agreement that Bailey couldn't swear and Laura couldn't use baby words. Kent had set the price of such mistakes low enough, but both wanted to avoid such errors.\n\nLaura didn't waste a second unbuttoning her pants, nearly tripping and falling as she attempted to get out of them.\n\n\"You alright, Laur?\" Kent cautioned.\n\nShe nodded, bracing herself with one hand on his bed as she kicked off her pants.\n\n\"You can take a second, you know?\" Kent reminded her.\n\nBut Laura had had other reasons than just friendship for helping Bailey out all this time. Laura hadn't done it just for kicks, or because she felt sorry for her friend. Laura had issues about her own sexual pleasure.\n\n\"Can't,\" Laura whispered, bending over the bed and lifting her hips in his direction. \"Please, just spank me.\"\n\nPoor thing, Kent realized. She thought she'd never get it again and now she's rushing.\n\nWhen the debt had run out, and Bailey and Kent realized they had a relationship, they had started having sex. But the piquancy of spanking had run out with the debt, and they thought they'd lost it forever. But Laura had come back, trying to wish them well, knowing she'd find herself excluded from whatever followed.\n\nBut, somehow, Laura had found a way back in, a way to make spankings matter once more. They didn't count towards debt anymore, but somehow counted Laura's guilt at enjoying her body. If Kent spanked her enough, made her cheeks sufficiently red, he effectively pounded away her guilt.\n\n\"Alright,\" Kent told Laura. He then pointed to a spot on the bed to Laura's left. \"Bai, get over there beside her.\"\n\nIn a moment, the two pairs of panty-clad cheeks were lined up, side by side, with Bailey's right cheek touching Laura's left.\n\nKent took a moment and lined up for Laura's first spanking, his fingers tracing down her spine and settling on her right cheek. She inhaled, a jerky, desperate motion making her whole body twitch.\n\nHe pulled back his hand and laid his first smack dead centre on the fleshiest part of her cheek, watching her muscles reverberate with the impact.\n\nWaiting for her to count, Kent slid his hand across Laura's left cheek to Bailey's right.\n\n\"Kent,\" Laura whispered.\n\n\"Yes?\"\n\n\"I-\" she stammered.\n\n\"What's wrong?\"\n\nLaura moaned, \"O-o-oh.\"\n\n\"What?\" Bailey turned to ask her.\n\n\"Ke-ent,\" she whined.\n\nKent knew when to use patience, his hand busying itself squeezing Bailey's right cheek while he waited.\n\n\"That doesn't count,\" Laura complained.\n\n\"Why not?\"\n\nLaura gasped for breath, \"Not hard enough.\"\n\n\"You need a harder spanking?\" Kent asked, wondering if he'd lost his touch over the brief intermission in their adventures.\n\nLaura nodded, burying her embarrassed face in his mattress, and raised her cheeks up higher, getting up on her toes.\n\n\"Alright,\" Kent replied, returning his hand to her right cheek. \"One extra hard spanking coming up.\"\n\nHe struck her cheek again, in the same spot, cranking up the force.\n\nLaura moaned into the bed, but still didn't count, so he left his hand in place.\n\n\"Harder,\" she begged.\n\nKent wound up a third time and gave her as hard a smack as he dared. Laura screeched into his bed sheets, letting the mattress muffle the sound. After a moment, she turned her head aside, away from Bailey, and muttered, with relief, \"One.\"\n\nBailey turned to look over her shoulder at Kent, then looked at her own, pale white cheek. Kent raised an eyebrow, wondering what she wanted. He had to know if she expected her spankings that hard, too. And what if Laura can hear the difference between her spankings and Bailey's? Will that upset her? Throw off the game?\n\n\"Is that what punishment spankings are like?\" Bailey asked.\n\nLaura turned to face Bailey and looked her in the eyes with their noses almost touching. Laura nodded.\n\n\"Okay,\" Bailey winced.\n\nShe looked over her shoulder at Kent again and ticked her chin at her right cheek, assenting to the new game.\n\nStraight away, without giving her time to think about it, he wound up and struck her cheek with the same pounding he'd just given Laura. Bailey kept herself facing Laura, so both she and Kent could see her pained expression as she absorbed the shock.\n\n\"Ho, fuck,\" Bailey whispered. \"Two.\"\n\nUp until now, the spankings had centred around paying Kent the money Bailey owed him. Now that they worked towards Laura's needs, the spankings reoriented themselves around Laura's inability to feel good about her orgasms unless she felt she'd received enough punishment to deserve sexual pleasure.\n\nKent went back to Laura and landed another hard strike on her left cheek.\n\nLaura whimpered out a hissing, \"Yes.\" and followed it up with, \"Three.\"\n\nWarily, Kent shifted back over to Bailey's cheeks, unsure if she wanted to continue the new spanking game with its higher difficulty level.\n\nBailey only wiggled her cheeks at him, keeping her eyes focused on Laura's.\n\nAlright, then.\n\nHe struck Bailey's left cheek, centring his strike as best he could to where her butt offered the most flesh. Bailey winced as the sound of his palm on her skin echoed around the room.\n\n\"Four,\" she offered.\n\nKent return to Laura's ass and swatted her on her right cheek, a bit lower but just as hard. If they wanted to get through this, he'd have to spread it around.\n\n\"Five,\" Laura moaned.\n\n\"That's one tick mark, one dollar,\" Kent pointed out. \"Are you both going to be able to handle five more dollars?\"\n\nThe original agreement said that a tick mark meant one dollar paid off and ten spankings over top of their pants. With their pants off, however, they only needed five spankings. Kent knew the spankings stung a lot more, plus he got to see their nearly naked asses.\n\nLaura and Bailey shared a look, with Laura still desperate and Bailey worried about either Laura or the spankings.\n\n\"Yes,\" Bailey said. \"But no panties?\"\n\n\"No panties,\" Laura agreed.\n\nKent saw the logic in that. The frail fabric hardly protected them from anything and losing it would reduce their five-count to a four-count. Neither girl moved however, and Kent realized they expected him to strip them.\n\nDeciding to make things awkward, he pulled their panties down only far enough to bare their asses, leaving the waistband in place well enough that the underwear stayed at about the level of their crotches.\n\n\"Do two more dollars right now,\" Bailey insisted. \"Two hands, though.\"\n\nLaura, still facing her friend, looked back at Kent and nodded agreement, shaking her naked rear at him.\n\nKent placed both his hands on Laura's cheeks and let her have his most devastating double strike ever.\n\nLaura turned her face to the mattress and groaned out her pain before turning back to face Bailey.\n\n\"Six, seven.\"\n\nHe swatted Bailey, too, hard and high.\n\n\"Eight,\" Bailey inhaled through her nose, \"And nine.\"\n\n\"That's two dollars,\" Kent reminded them, returning to Laura's cheeks.\n\nAnother double crack echoed and Laura cried out, forgetting to muffle her voice. \"Ten, eleven!\"\n\nKent delivered his last double strike to Bailey's much skinnier butt.\n\n\"Dammit!\" Bailey shouted, standing up. \"Twelve and thirteen.\"\n\n\"I think we need a break before we do more,\" Kent insisted.\n\nLaura nodded and turned to face Kent, sitting down rather abruptly on her reddened cheeks, keeping her knees together because her panties were only half way down her thighs. Bailey, seeing Laura like this, sat in a similar fashion. All eyes turned to Laura, who kept her eyes down.\n\n\"You okay, Laura?\" Kent asked.\n\n\"I will be once we're done,\" she promised.\n\n\"This isn't too hard?\" Kent prodded.\n\nLaura shook her head and raised her eyes to meet his, \"This is what I need to feel okay again.\"\n\nShe wiggled her hips, grinding her flesh against his mattress, and winced as her sore spots rubbed against the fabric.\n\nTurning to Bailey, Laura spoke, \"Are you okay?\"\n\nBailey nodded warily, \"I can take it.\"\n\n\"You're way skinnier than mine.\"\n\n\"Hey!\" Bailey protested. \"I've taken way more spankings through this whole thing than you have. I'm fine.\"\n\nLaura smiled, \"And Kent is spreading them around. My whole ass will be sore when we're done.\"\n\nAs Laura's eyes turned gratefully to Kent, Bailey's eyes widened with foreshadow.\n\n\"Is there any other way you want to be punished?\" Kent offered.\n\n\"Like what?\" Laura asked, her lips twisting in confusion.\n\n\"Remember when you lied to me?\" Kent prodded.\n\nThat brought a flash back to Laura's expression. Kent could almost see the thoughts flashing through her brain, the images popping up in the reflections of her eyes as she remembered the time she'd kissed Bailey's nipples, rubbed their breasts together, spanked each other.\n\nLaura gulped, \"Those were for you, though.\"\n\n\"For me?\"\n\n\"Because we'd wronged you,\" Laura clarified. \"When we lied to you, I mean. Getting spanked by you, though. It's more like you're a... an instrument for the punishment I deserve.\"\n\n\"So kissing Bailey's nipples...\"\n\nLaura shrugged, \"...wouldn't feel like I'm getting punished right.\"\n\nDarn, Kent thought, I'll have to find some other way to get them to do that again.\n\n\"And spanking each other?\" Bailey prodded. \"That's still spanking, right?\"\n\nThese spankings are really hard, Kent noted, so hard that Bailey is looking for alternatives, including delving out some of the spankings herself, which she had really wanted to avoid.\n\nKent realized he'd have to consider subtly turning down the power.\n\nLaura looked over at Bailey, \"We could try it next time. But I really need Kent this time.\"\n\nBailey controlled her expression, keeping it neutral, \"Okay.\"\n\nAt least Laura is open to some alternative for Bailey, some way to trade some of the harshness for humiliation. If we can switch her over a little, Bailey can enjoy it more, too. But both Bai and I want the spankings back, and Laura is the only way to make them fun.\n\n\"Three dollars left,\" Kent reminded them.\n\nBailey acknowledged this and turned back to Laura, \"Can we do them naked?\"\n\nLaura thought about this and said, \"It's up to you how you do yours. Is it okay if I put my panties back on even though you're naked?\"\n\n\"That would be different,\" Kent pointed out. \"More embarrassing for you, Bai.\"\n\nFewer spankings, Kent thought, knowing complete nudity would reduce her spankings to three per tick mark, but she'll be the only naked one.\n\n\"I'll take it,\" Bailey said instantly.\n\nHe watched as Bailey stripped out of her shirt, unlatched her bra to reveal her small, perky breast and laid both pieces of clothing aside. Kent marvelled at Bailey's casual nudity and how much things had changed since they'd reached the end of her debt and started having sex. Laura, meanwhile, grabbed up her panties but didn't put them back on.\n\n\"You want more spankings, do you?\" Kent mocked her.\n\n\"I need them,\" Laura said, holding up her underwear. \"The panties don't protect me much, but you'll spank me more.\"\n\n\"How do you want to do them?\" Bailey asked.\n\n\"I'll do two of the dollars,\" Laura said, \"And you can do one, okay?\"\n\n\"Sure, Laur,\" Bailey sounded relieved.\n\n\"Kent?\" Laura asked, \"Can you doubles again, but on the sides of my cheeks?\"\n\n\"Okay.\"\n\nLaura got up, again completely unaware of her nudity, and stood up on the stool, facing Kent. Without turning around, she bent her knees and pulled her panties on, almost encouraging Kent to look at her before she covered herself.\n\nShe still wants the humiliation of being naked in front of me, but she wants the extra spankings that are required by wearing her underwear.\n\nWith a breath, Laura turned around and put her hands on her knees. Elevated as she'd made herself, she'd put her cheeks perfectly in the swinging arc of his hands.\n\n\"Do all ten, okay?\" she asked over her shoulder..\n\nKent nodded and caught Bailey's eye as she sat, naked, waiting her turn on the bed. Bailey merely leaned back on her hands, spreading her legs slightly in his direction, and smirked a casual glance down at the bulge in his pants.\n\nGripping her cheeks, Kent dug his thumbs into her flesh and worked them into her reddened skin, forcing Laura to tense up and then roll her hips in response. He swung his arms wide and brought them in, cracking both palms off her stretched out muscles.\n\n\"Ke-ent,\" she complained.\n\n\"What's the matter?\"\n\n\"Harder,\" Laura demanded. \"Like before.\"\n\nRight.\n\nHe wound up again and smacked her, two strikes nice and high on the outside of her cheeks.\n\n\"Oh!\" she cried. \"Fourteen and fifteen.\"\n\nKent moved his hands lower and struck again.\n\n\"Sixteen,\" Laura winced out. \"Seventeen.\"\n\nWith the redness spreading outward from every point of impact, Kent saw himself running out of room very quickly. He moved lower.\n\n\"Eighteen! Nineteen!\"\n\nHe had no choice at that point, and moved back to the middle of her cheeks. Though already reddened, Laura packed the most fleshy protection there and Kent figure it for the best spot to strike her.\n\n\"Twent-y-y!\" Laura moaned. \"Twenty one.\"\n\nKent decided to finish with a surprise, and brought his last two strokes of punishment downwards on the top of her ass, generating a delightful undulation and a surprised yelp of pain.\n\n\"Twenty two and three,\" Laura breathed out, then added a soft, \"Ow.\"\n\nKent watched as she reached back to rub her rear, but thought better of it and first pushed her panties down.\n\n\"Am I really red?\" she asked, rubbing her cheeks in gentle circles.\n\n\"Very,\" Kent replied. \"Do you feel better now? With your ass all sore?\"\n\nLaura nodded, letting her panties drop to the stool before she stepped off it. With a long, slow exhalation, she moved over to the right end of the bed and leaned over it.\n\n\"Not done?\" Bailey asked. \"It's my turn now, isn't it?\"\n\n\"I'm done,\" Laura answered quickly. Her voice went strangely shy, \"I'm just going to, um, stay like this.\"\n\nKent observed Laura's body, exposed for his examination as if she had to prove something to him.\n\n\"That's a well punished ass, for sure,\" he intoned before turning to Bailey. \"Three more for you?\"\n\n\"Uh-huh,\" Bailey quirked an eyebrow and laid herself on her side, her head nearest Laura's end of the bed and her naked body facing Kent.\n\nShe invited Kent to spank her with a jerk of her head down her body.\n\nLaid on her left side, it left her right cheek facing up. Kent walked over to her and pulled her right leg forward a bit while laying his right hand on the side of her exposed cheek.\n\n\"Ready?\" he asked.\n\nWhen Bailey nodded, he raised his hand high and brought it soaring down to strike the pale flesh of the untouched outside of her cheek.\n\nBailey hissed through her teeth before counting out, \"Twenty two.\"\n\nShe rolled over to the face toward the wall, turning her hips slightly to present her left cheek, which he promptly swiped at.\n\n\"Twenty three-ee,\" she said, as if in warning.\n\nFor the last one, she lay on her stomach and raised her hips, clenching her leg muscles tightly together. Kent laid his hand squarely on the lowest part of both cheeks, indicating his intention to strike them both at once. Bailey wiggled her approval in his grasp.\n\nHe struck low and hard, a delicious echo through the room, and Bailey yelped.\n\n\"Twenty four,\" she whispered. \"Wow.\"\n\nLaura, the whole time, had stood there with her bare rear pointed at Kent. Seeing this, Bailey to up off the bed took up the same position.\n\n\"What are we doing?\" Bailey asked.\n\nLaura shrugged.\n\n\"C'mon, Laur,\" Kent prodded. \"Explain yourself.\"\n\nLaura took a deep breath, \"I need the spankings, okay?\"\n\n\"Okay,\" Kent agreed.\n\n\"It's sort of like, I need,\" Laura trailed off. \"I need to show that I've paid my due.\"\n\n\"You need to prove you've been punished?\" Kent said. \"Surely the soreness proves that.\"\n\nLaura inhaled through her nose in frustration, clearly wishing someone would get her vibe without her having to explain it.\n\n\"I just wanna be naked and embarrassed, okay!\" she shouted out finally. \"By I wanted more spankings, so I had to put my panties back on.\"\n\n\"And now they're off,\" Kent said. \"So you got a lot of spankings, and a lot of redness, and now you get to feel naked and exposed.\"\n\n\"Yes,\" Laura said, still facing the wall.\n\nKent tilted his head thoughtfully, then spoke, \"Spread your legs.\"\n\n\"What?\"\n\n\"Your thighs are really close together,\" he told her. \"I want to see more of you.\"\n\n\"Oh,\" Laura sounded surprised. \"Alright.\"\n\nShe moved her feet to about shoulder width.\n\n\"A little more,\" Kent instructed, \"let me see a bit more of your hair.\"\n\nDid she gulp? Kent thought so. But she spread her legs.\n\n\"Can you see enough now?\" she asked, her voice softening shyly.\n\n\"Yes, much better.\"\n\nKent quietly observed the two naked asses before him, letting them gain whatever enjoyment they did from it.\n\n\"Did you always want your spankings this hard?\" Kent wondered aloud. \"And I've been going too easy on you?\"\n\n\"At the beginning it was okay,\" Laura explained. \"It hurt a bit and it was really embarrassing and fun. But it got way more intense and frequent lately. And then I got tougher, I guess.\"\n\n\"So it is important that you be embarrassed?\" Kent clarified.\n\n\"Yeah, I guess so,\" Laura admitted. \"But I still need the spankings. If it were just, you know, weird stuff-\" she glanced over at her completely nude friend \"-it wouldn't be enough.\"\n\nKent considered this as he hummed a confirmation. If he wanted the girls to do 'weird stuff' he'd have to take this into account. As much as Laura might focus on the spankings, a lot of the action and arousal depended on keeping things fresh for all three of them.\n\nWell, if I have to, I can make this work for everyone, he decided. I've been winging it basically day by day so far, no reason not to continue.\n\nLaura sighed, \"So.\"\n\n\"So?\" Bailey turned to look at Laura, but Laura kept her eyes on the wall.\n\n\"You guys,\" Laura said, \"You're like, doing it?\"\n\n\"Having sex?\" Bailey clarified. Her voice lilted towards maternal and chiding, \"Use your grown-up words, Laura.\"\n\nLaura's body convulsed in shyness, \"Yes. Having sex.\"\n\n\"Yes, we are,\" Kent sat down, trying to relax with a raging erection, wondering where Laura was going.\n\n\"You're not going to, like, do it front of me, are you?\" she asked.\n\n\"Do you want us to?\" Bailey quirked an eyebrow. She looked worriedly over her shoulder at Kent, wondering what he thought of that.",
        "\"No,\" Laura whispered, defensively, looking towards the door. \"It's just that I'm in the way, then.\"\n\nI see the problem, Kent thought, she's afraid that if we know she doesn't want to watch, then we'll just be waiting for her to leave.\n\n\"You're okay with Bai grinding on me, right?\" Kent said. \"Like I did to you?\"\n\nLaura nodded, a faint mutter of assent escaping her throat.\n\n\"Alright, then,\" Kent let his voice go soft and easy, letting her know she hadn't asked too much.\n\n\"Really?\" Laura now turned her head, gazing at Kent over her reddened cheeks. \"You'd do that instead of the real thing?\"\n\nKent shrugged and Laura turned to Bailey.\n\n\"Variety is good,\" Bailey said.\n\n\"You guys are sweet,\" Laura acknowledged, inhaled deeply and closed her eyes.\n\nShe turned her face away from Bailey and Kent, but not before they both noticed her flushing redder than her backside.\n\nKent stood and crept up behind her, laying a hand on her left cheek. Smoothly, his palm cupped the underside of her tense muscles and then slid across to the right side. Laura spread her legs farther in response. Carefully, with Bailey smirking and watching over her shoulder, Kent let his fingertips trace between Laura's thighs, gently grazing her hair.\n\nLaura moaned and stood up, panting.\n\n\"Just a sec,\" she said.\n\nWith a curious look on his face, Kent watched Laura walk past him to the whiteboard and make two more marks on it. Her eyes bleary, she turned back to face him.\n\n\"Okay,\" she added, almost breathless. \"Now it's okay.\"\n\nShe walked past him to bend over his bed again and Kent and Bailey made eye contact, an \"oh\" of realization on both their lips. Kent shifted so his left hand could slide between Laura's leg, slipping between her wet lips.\n\n\"Yes,\" Laura hissed, wiggling back against him until her vulva met his palm. \"There...\"\n\nThe optimal angle for Kent put him off to Laura's right side, half sitting on the bad with his left hand under her body, finger between her lips, tickling at her clitoris. He placed his right hand across her back over her left cheek, trying to decide which side he'd have a better time slapping.\n\nIn all the time they'd played their games, he'd never used his fingers on her like this. Laura had always wanted his erection rubbing against her, simulating the wooden arm of the chair she humped at home when she got horny.\n\n\"Start spanking,\" Laura breathed in a panic.\n\n\"Right.\"\n\nDesperation had brought her to the edge quickly and she started shoving her hips back against him. Under her body, both of her hands slipped along the fabric to push down on his fingers, guiding Kent to exactly what she wanted.\n\nMakes it easy for me, he thought, I just need to land the spankings right.\n\nKent chose the left cheek first, driving down hard on the gyrating flesh.\n\n\"Twenty five,\" she muttered. \"Please hurry.\"\n\nRight cheek next, Kent hammered the only part he could really slap properly, the thickest, highest part.\n\n\"Twenty six,\" she answered that slap.\n\nRealizing her proximity to orgasm from her breathlessness, Kent brought two more hard strikes down on her left cheek.\n\n\"Twenty seven... eight.\"\n\nLaura inhaled in short, desperate bursts and Kent struck her right cheek twice.\n\n\"Twenty eight and ni-i-i-ine.\"\n\nHer hips started jerking side to side and Kent attempted to the strike the right again, but his fingers grazed the side of her cheek.\n\n\"Missed,\" she mewed out miserably. \"Doesn't count.\"\n\nBailey, still naked, had shifted to seated position, cross legged and watching avidly. She nibbled on one side of her lip as Laura got more excited.\n\nKent raised his hand and struck Laura's left cheek.\n\n\"Thirty-y,\" Laura said, her ominous tone indicating what everyone knew -- that with her panties off, only one spanking remained.\n\n\"Oh, oh, oh!\" she crooned out, her hips thrusting forward into the bed as her thighs clenched Kent's wrist and her hands trapped his fingers against her vulva.\n\nKent felt her whole body twitching, even the pulses from her vaginal muscles spasming against his partially embedded palm. Eyeing her hardened ass cheeks made suddenly available by her stretched out position, he brought his hand across the bottoms of both cheeks as hard as he could.\n\n\"Ah!\" Laura shrieked, pleasure mixing with pain and her body shook itself.\n\nUnable to do anything else, given that he'd used up the tick marks already, Kent left his hand over her tailbone until her orgasm subsided.\n\n\"Oh, wow,\" Laura muttered. \"Thirty-one\"\n\n\"Yeah,\" Bailey agreed, breathing hard, \"Wow. You really needed that, huh?\"\n\nLaura relaxed, released Kent's hand from its triangular imprisonment, and nodded, \"All of it.\"\n\n\"All of it?\" Kent asked.\n\n\"The spankings,\" she said. \"The orgasm... the more spankings.\"\n\n\"More spankings?\" Bailey asked, her eyes widening.\n\n\"Are you... are you, um...?\" Laura trailed off, her eyes ticking toward Bailey's genitals and then embarrassingly away.\n\n\"What?\" Bailey asked, looking down at her openly displayed pubic hair.\n\n\"You and Kent gonna...?\"\n\n\"I hope so,\" Bailey smirked. She looked away a moment, toward the floor, \"I didn't realize what that did to me.\"\n\n\"What did what?\" Laura asked.\n\n\"Watching Kent spank you,\" Bailey put her thighs together, squirming a bit as she sat on the edge of the bed and put her feet on the floor.\n\n\"Turns you on,\" Laura pointed out. She turned to look at Kent over her shoulder, \"Even I knew that. Didn't you?\"\n\n\"I think so,\" Kent said.\n\nLaura nodded and stood up again, rubbing her cheeks in front of Kent. She let out what he took for an exaggerated grunt of complaint, putting on her little show of discomfort.\n\n\"That was a really good one, though,\" Laura said with worry in her voice.\n\n\"Did I spank too hard?\" he asked.\n\n\"No, that was fine,\" she shook her head, immediately taking her hands away from her flesh. \"I mean the, um, orgasm. I'll probably feel bad about it later.\"\n\n\"Even after all this?\" Bailey's shock seemed sincere.\n\nLaura turned to face Kent, letting him see her if he wanted, and walked to the white board once more.\n\nTick, tick, went the marker.\n\nShe walked back to the bed and nodded at Bailey, still squirming slightly.\n\n\"You gonna grind on her?\" Laura asked of Kent.\n\nBailey nodded vigorously and spread her legs toward Kent, gasping out, \"He'd better.\"\n\nKent moved forward, unbuttoning and unzipping his jeans. With a shake of his hips, he dropped them to the floor and his erection tented against his shorts. Seeing Bailey on full display, he didn't want to waste any time, shedding his boxers and lining up his erection along her lips.\n\n\"Whoa,\" Laura breathed out, \"you're ready, too. Perfect.\"\n\nWith that, she brought the stool over to the bed and stood on it before bending over next to Bailey. It meant that Bailey had to pull her legs up higher, but Kent could get his right hand on Laura's cheek without too much trouble.\n\n\"The first four for Bailey,\" Laura said to Kent. \"The last ones for you, okay?\"\n\nKent started pushing against Bailey, his erection sliding easily along through the moistness of her lips.\n\n\"Yes,\" she hissed.\n\nKent's lowered his gaze, focusing on Bailey's slit eyes, \"How's your ass feel?\"\n\nBailey whimpered and Kent pushed into her, burying half the width of his shaft between her lips.\n\n\"The first four?\" Kent asked, laying a hand on Laura's cheek.\n\nLaura nodded while Bailey, half awkwardly, hooked her right leg around Kent's back to pull him in. He resisted, just a little, enough that she had to use a bit of her strength to keep him in place, locking her heel against the small of his back. Bailey's left leg had to remain in the air, pulled back, so Kent's right arm remained free towards Laura.\n\n\"Bai?\" he whispered.\n\n\"Yeah?\" she breathed back, her eyes glazing over.\n\n\"Say when,\" Kent told her.\n\n\"When what?\" Bailey blinked in confusion.\n\n\"When to spank Laura,\" he clarified.\n\n\"Oh!\" Bailey's eyes widened and she looked over at Laura.\n\nLaura, meeting her gaze with a narrow eyed enthusiasm, nodded.\n\nBailey's face reddened and she shook her head, \"Laura...\"\n\n\"Tell him, Bailey,\" Laura egged her on, their faces inches away from each other.\n\nBailey looked up at the ceiling, her hips gyrating against Kent.\n\n\"C'mon Bai,\" Kent added, \"Laura's been a bad gi-irl.\"\n\n\"Mm,\" Bailey muttered, turning her head away in denial. She then turned on Kent suddenly, her voice breaking, \"Now!\"\n\nWithout a second thought, and hearing the panic in Bailey's voice, Kent lashed out with sudden fury, eliciting a squeak of painful dismay from Laura.\n\n\"Wow!\" Laura protested. \"Thirty two.\"\n\n\"Felt that?\" Bailey gritted her teeth at Laura.\n\n\"Uh-huh,\" Laura gasped.\n\nKent watched as the two breathless girls glared at each, taking a moment to look down at his swelling erection, thrusting along Bailey's lips. He hoped she didn't take too much longer and tried not to imagine how she would look if he lost control right then.\n\n\"Again!\" Bailey demanded, and Kent struck Laura's left cheek.\n\n\"Oh, thirty three!\"\n\nBailey thrust up against Kent, twisting her hips and lifting her body against his.\n\n\"Again!\"\n\nKent's palm came across Laura's flesh again, eliciting another shriek and, \"Thirty four...\"\n\nThat warning tone registered with Bailey, who now locked both of her legs around Kent's back. This position, though better for her, meant that she'd put her knee in the way of Kent's back swing.\n\nLaura, always on the ball, noticed this immediately, and got up on the bed on her knees, sticking her butt high enough up in the air that Kent could reach her over top of Bailey's knee.\n\nHuffing madly away, Bailey humped against Kent's body, squeezing his shaft against her clitoris, his testicles wetting themselves against her vagina.\n\nKent watched in amazement, for her orgasms always amazed him, as Bailey's face froze with her mouth open, unable to breathe, unable to speak even a word or mumble. She didn't need to say anything, because Kent already knew what to do.\n\nLaura received her last spanking, a delicious snap echoing through the room, at the same time that Bailey's orgasm finally broke, a shriek of anguish drowning out Laura's protest at the harshness of her punishment.\n\n\"Thirty fi-ive,\" Laura pouted, dropping her feet back to the ground. \"My goodness.\"\n\nBailey shuddered against Kent and a soft, contented almost-smile came to her face.\n\n\"That was good, wasn't it?\" Laura leaned in close.\n\nBailey nodded, turning her eyes down from Laura's penetrating stare.\n\n\"You liked telling him, didn't you?\"\n\nSheepishly, Bailey nodded again, and turned to look up at Laura, \"Thank you.\"\n\nLaura nodded and stood up straight, rubbing her cheeks again.\n\nShe wants to feel a part of things, Kent realized, and now she's found at least one place she fits.\n\nHis erection throbbed as Bailey relented of her death's grip pressure on it, letting it softly rest against her vulva.\n\nBailey reached down and gently rolled her fingers around his wet and swollen tip.\n\n\"Now you,\" she whispered, inching down so she could get both hands on him.\n\nSteadying himself, Kent placed his right hand on Laura's hip.\n\n\"Ooh,\" Laura cooed, \"how do you want me?\"\n\nKent inhaled in a gasp, warding off his orgasm against the sound of Laura's utter willingness to please him. A thousand options ought to have occurred to him, but the blood had drained from his brain about twenty spankings back.\n\n\"Lie on your side,\" he muttered, \"Facing Bailey.\"\n\nQuirking an eyebrow, Laura got back on the bed on Kent's right, turning her body sideways against Bailey. With Bailey's legs down, Kent directed and pulled Laura's left leg over Bailey, her thigh lying across her friend's waist. Bailey reached over Laura's thigh and continued to jerk on Kent's erection.\n\nLaura wiggled her hips, turning just enough to expose her left cheek, \"Ooh, fancy.\"\n\nAs Bailey's ministrations sped up, Kent gulped and whispered, \"Gonna be fast...\"\n\n\"Uh-huh,\" Laura nodded, her face next to Bailey's.\n\n\"And messy,\" Bailey encouraged.\n\n\"God,\" Kent muttered, and raised his hand off Laura's cheek.\n\nLaura tensed, waiting, and Kent hammered her left cheek three times in rapid succession, far faster that Laura could count.\n\n\"Thirty six, seven, eight,\" she sputtered, cringing.\n\nA delay of several seconds, or perhaps an eternity, ensued in which three people panted. Bailey exhausted herself with the effort of forcing Kent to ejaculate, while Kent exerted himself equally to stave off said orgasm and Laura... Laura waited for the last burst of pain that would warrant all of the pleasure she'd endured today.\n\n\"Gah!\" Kent roared, bringing his right palm down on the thickest part of Laura's cheek, the undulations spreading down her thigh as she shrieked and the first volley of his semen launched out.\n\nA string of white, separating into droplets, stretched out over Laura's thigh, splattering a straight line from between Bailey's breasts up to her nose and into her hair.\n\n\"Ah!\" Laura screamed in either pain or the surprise of seeing the white fluid inches from her own face.\n\n\"Whoa!\" Bailey shrieked in fright, trying to turn Kent's tide aside.\n\nKent only grunted and twisted as his second volley, still poorly controlled, splattered from side to side to dot both Bailey's breasts and parts of Laura's shirt. The longest range shots having finished, Bailey continued to jerk out the remains of his orgasm, carefully dripped upon Laura's thigh and down onto Bailey's stomach.\n\n\"What a mess?\" Laura cried out, adding quietly, \"Thirty nine.\"\n\n\"You're complaining about the mess?\" Bailey waved at her own naked body as she wiped semen off her nose. \"I'll need a shower to get it out of my hair.\"\n\n\"But it's on my shirt,\" Laura pouted.\n\n\"Next time, take it off,\" Kent laughed. \"You wanted to pay for your sins, and you did, one way or the other.\"\n\nHe grabbed a box of tissue from the dresser and laid it beside Bailey so she could draw several sheets and carefully wipe her face off. From the floor, Kent took his shorts and wiped down the length of his shaft where delving into Bailey's vulva had wet it, and the tip which still oozed a little white drip. Laura seized his shorts from him and wiped her thigh down, mostly sliding it off herself to drip down into the puddle on Bailey's stomach.\n\n\"Thanks!\" Bailey's hard-edged sarcasm bit at her.\n\nLaura shrugged and smiled, standing up once she felt herself no threat to the carpet.\n\n\"Those were hard,\" she told Kent as she faced him, hands on her hips.\n\nHe looked back at her, trying to detect any note of accusation, but didn't find anything but satisfaction in her voice.\n\n\"You're welcome?\" he replied, experimentally.\n\nLaura nodded again, her left hand rubbing her left cheek.\n\n\"Ugh,\" Bailey muttered, touching a sticky spot in her short, red-brown hair, \"I need to wash up.\"\n\nBailey looked at Laura, then at Kent.\n\n\"It's okay, Bai,\" Laura said, \"I'm done and so is Kent.\"\n\nKent nodded agreement and Bailey darted out of the room into the hallway, only opening the door wide enough to slip out.\n\nLaura, meanwhile, stayed half naked and sat on Kent's bed, her thighs together and her ankles crossed.\n\n\"Comfy?\" he wondered aloud.\n\nShe squirmed a little, rubbing her cheeks against the mattress and wincing, \"Yeah.\"\n\n\"So you're happy with this?\" he asked.\n\nLaura nodded immediately, \"You like it, right? And I think Bai did, too.\"\n\n\"You have a place,\" he said. \"And I guess we just won't, y'know, stick it in while you're here.\"\n\n\"Thanks,\" Laura said, a heartfelt moment amid all the joking. \"For letting me in again, I mean.\"\n\n\"It's not the same without you,\" Kent said. \"The spanking especially.\"\n\n\"Really?\" she brightened.\n\n\"Yeah,\" Kent shrugged. \"It needed... meaning. And you bring it meaning.\"\n\nLaura smiled and turned to lay herself out on her stomach, her head to Kent's left.\n\n\"Showing off?\"\n\n\"Mm-hm,\" she nodded. \"You're going to rub it better when Bai gets back, aren't you?\"\n\n\"Sure,\" Kent promised."
    ],
    "authorname": "xtorch",
    "tags": [
        "spank",
        "punishment",
        "guilt",
        "debt",
        "humiliation",
        "facial",
        "ejaculation",
        "orgasm"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/two-hundred-dollars-more-ch-01"
}
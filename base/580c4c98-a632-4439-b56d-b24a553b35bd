{
    "title": "Thank You for the Days",
    "pages": [
        "This is a selfish story, and was only written so that I could finally get it out of my system. It has no entertainment value whatsoever, and I really can't recommend anyone reading it. For those who found my holiday story a tad depressing, well, you haven't seen anything yet.\n\nI wish I had never written it, but I couldn't find it in me not to.\n\nFor Cathy.\n\n***\n\nWe were a perfect couple, I didn't have a pot to piss in, and Cathy didn't have a window to throw it out of. We met at the insistence of a couple of friends and immediately hit it off, to our mutual surprise and delight. These pairings set up by matchmakers were usually disasters, on that both Cathy and I agreed.\n\nWe found that we had a lot of common interests, as well as a number of things that we mutually loathed. We both had very cryptic senses of humor and Cathy had a manical laugh that would inevitably crack me up as well.\n\nI had met Cathy on the week before Valentine's Day, 1975. For the day itself, I made Cathy a card with crude artwork and lame poetry, and I signed it with an explanation that I wasn't prepared to shell out thirty five cents for a card unless I was positive the relationship would last. By the end of March we had moved in together.\n\nWe got an apartment in Troy, New York, an absolutely dismal one bedroom flat in a neighborhood that, if it had seen better days, was doing its best to disguise even that distant memory. The neighbors were a mixed lot, but most seemed to be either stoned, drunk or fighting much of the time, which meant we weren't all that out of place there.\n\nI was just out of college, with a liberal arts degree that held the same value then as it seems to hold now. I was working in a warehouse on an assembly line filling orders for health and beauty aids. Our customers were small grocery stores that would buy three bottles of Prell at our inflated prices, and then pass the financial pain on to their clientele. Clearly, I was making the most of my education.\n\nCathy had dropped out of college in her freshman year and had gotten an entry level state job as a typist. No dough, but at least some benefits. She hated her job as much as I did mine.\n\nOur apartment was in a building that defied logic. Doors wouldn't open, windows wouldn't stay shut and the lights had a disturbing tendency to dim periodically when you walked down the hall. The same walls that allowed the heat to flow in freely in from the outside during the summer, graciously permitted the arctic breezes to whistle in unabated in the winter.\n\nWe would amuse ourselves by lighting a votive candle and betting on how long it would take to get blown out, this despite the fact that the place was closed up as tight as we could manage. All this for a hundred bucks a month plus utilities. \n\nOur furniture was borderline garbage, we didn't have a car and our prospects for improvement in the near future were not overly positive. We had nothing at all worth mentioning, except each other. That made everything else bearable.\n\nThe time we spent together was usually filled with laughter, and we always found time to make fun of the world, the people around us and especially each other.\n\n\"Every time I think I've hit rock bottom and there's no hope\" Cathy would say, \"I look at you and I'm know I'm right!\"\n\nI would counter with something equally snotty, and invariably within minutes we would have torn each other's clothes off and be making love wherever we happened to end up at that time. \n\nCathy and I made love with an intensity and passion that must have come from the knowing that it was all we had of any value. No one could take that away from us. There was nothing I wouldn't do for her and her for me. \n\nThe only arguments I remember were over the stereo, and what got played on it. We would claim turntable rights depending on who got home first, and the loser would gripe and criticize the selections. Finally, we worked out a system where we would take turns playing album sides, which gave us peace at last.\n\nI found myself more willing to listen to a side of Workingman's Dead when I knew I could follow it with the second side of Abbey Road. Cathy would put up with twenty minutes of Miles Davis because she knew that she would throw on some Joni Mitchell.\n\nWhen we first moved in together, our record collections were so different that we only had a couple of duplications. After a few months of listening to each other's music, it was a lot tougher to figure out what belonged to who in many cases. We had expanded each other's musical horizons without even knowing it.\n\nI gave Cathy steady doses of The Kink Kronkiles, and I began to notice her starting to hum and sing along on a lot of the songs. I mentioned that to Cathy one day, very pleased that I had made a convert.\n\n\"I think you wore me down\" Cathy said with a laugh. \"I do really love 'She's Got Everything'. It makes me feel so happy.\"\n\n\"I love most of the album\" I said, \"but I really love the song 'Days'.\"\n\n\"Too depressing\" Cathy announced. \"Saying goodbye is a downer, and if I need to be brought down all I have to do is look around this dump.\"\n\n\"Its not depressing\" I insisted. \"It's an expression of appreciation, of telling someone how much they meant to you. Goodbyes don't have to be bitter.\"\n\nCathy would have none of that, as she was just as tenacious as she was adorable, so I would play the rest of the album, avoid 'Days', and consider it a victory at that.\n\nOur social life, such as it was, consisted of going to a local bar that had bands on the weekends. No transportation and low funds made the selection an easy one. There was another couple that we hung out with, and we would nurse forty cent beers and shoot the breeze until the band would start.\n\nCathy loved to dance and would always prod me to get up and join her. I avoided it as much as possible and would only occassionally get up when sufficiently medicated, and hopefully go through the motions without being noticed.\n\nOne weekend, there was a band playing that had a guitar player that I used to play with when I thought I was a musician. I introduced Cathy to Rick as they were setting up and caught up with old times. Rick threatened to have me come up and sit in on bass later, and I assured him that it would never get that late.\n\nUsually I would bust on the bands that played there, but I didn't that night. One reason was that I knew the guy, and the second reason was they were good. They played the stuff you had to play to get gigs, like Proud Mary and Jumpin' Jack Flash, but they snuck in some things that you wouldn't expect. I certainly didn't expect it when the lead singer started their next song.\n\n'I got a girl who's oh so good, she's got everything'\n\n\"DAVE!!!\" Cathy screamed even louder than the band that crashed in after that unaccompanied opening, and with that I was dragged out onto the dance floor and tried to keep up with my obviously deranged girlfriend.\n\nI guess it was going to be our song, and who was I to complain? An obscure track from an obscure compilation album would certainly make sense as far as we were concerned. Besides, it rocked, and I loved to watch Cathy bounce around the dance floor.\n\nShe screamed when it ended, and insisted on going up to talk to my friend at the end of the set, making an appeal to play 'She's Got Everything' again, and again. Rick promised they would later, when some new drunks replaced the ones presently there.\n\nCathy was content with that, and so we went back and nursed a few more beers until well past midnight, when they snuck it in again. I was much more inebriated than before, so I went willingly this time and did my best imitation of dancing, which made Cathy even happier.\n\nRick's group became sort of the house band at the bar, and we became the couple in the corner who were there each night they played. They started opening their set with it, when there were relatively few people there, and thus were able to squeeze it in again later without many knowing.\n\n\"It's great for them to do this for us\" Cathy exclaimed as we left the floor exhausted from another 'She's Got Everything' workout.\n\nWell, when you play in a bar band, you're happy that anybody comes to see you at all rather than just falling into the bar by accident. Still and all, I agreed they were the most magnificent men in show business to accomodate our wishes. \n\nGetting so much practice at this, I came up with a dance of sorts for these sessions. Cathy soon learned what I was doing, and soon we had a fairly good routine going. If people were watching they must have thought it was rehearsed, but it was just a strange alcohol fueled inspiration.\n\nPart frug, part monkey, part jerk and mixed with other unknown dances of the last ten years, even laced with liberal doses of the Bat-tusi, we ruled the dance floor for those four minute segments each weekend. It was our song, and it made all the sense in the world to us.\n\n'All of the guys just stand and stare\nshe's got everything\nI ain't got a dime but she don't care\nI got everything'\n\nIt fit like a glove.\n\n***\n\nIt all went bad very fast. I felt Cathy start to act different. She wasn't the bubbly and bouncing girl I had become so close to. For whatever reason, I feared that I was about to be dumped, and the feeling made me nauseous.\n\n\"No Dave honey, it's not you\" Cathy said. \"I'm just coming down with something, I think.\"\n\nA little more time passed and Cathy was not feeling any better so she went to the doctor. The doctor ran a few tests and had Cathy come back the next week. I had to work, so she was already home when I got there.\n\n\"What the good word sweetie?\" I asked cheerfully, and when I saw Cathy sitting at the kitchen table with a stunned expression on her face, it hit me that the word was not going to be a good one.\n\nThe word was leukemia. We held each other in the middle of that drafty room, and it wasn't the cold making us shake. This just could not be happening. Cathy was twenty three years old, for chrissakes! She was full of life, and ran rings around me all the time. It had to be a mistake.\n\nThere was no mistake, and there was no time either it seemed. It had spread through her central nervous system and there was nothing that could be done to stop it.\n\nThey tried things, but nothing worked. Not that there is such a thing as a good time, but late 1976 was no time to be coming down with acute lymphoblastic leukemia. Cathy grew weaker and soon had to go to the hospital.\n\nI spent most of everyday there with her, trying to put on a brave face and attempting to keep her spirits up, probably failing on both counts. I brought in my acoustic guitar and tried to play \"She's Got Everything', and my inepititude at least made her laugh.\n\nI looked at the shell of this woman I cared so much about, and tried to remember the rosy cheeks and laughing eyes of just a few months ago, replaced by the dark sunken eyes and drawn features. Gone, and never coming back. She was even having trouble walking now.\n\nOne day, I came to visit her early Saturday and I couldn't believe my eyes. Cathy looked great! If not great, then at least a whole lot better than she had. \n\n\"Take me out of here David\" Cathy said firmly.\n\nI didn't believe what I had heard, but there was no mistaking the tone or the urgency in her voice.\n\n\"I want to get out of this place David. I need to, please.\"\n\nI went looking for a nurse or a doctor, someone to either talk some sense into Cathy or to tell me how I could take her out of here for a while. The nurse I talked to told me that it was out of the question, and that her doctor would visit her when he came in.\n\nI went back to Cathy's room to give her the bad news, but Cathy was already dressed and was reaching for her coat when I got there.\n\n\"Help me with my coat, would you honey\" Cathy said. \n\nI helped Cathy on with her coat, which now was absurdly large on her, realizing that there was no stopping her. I figured that taking her outside wouldn't hurt. We got out to the hallway and I spotted a wheelchair.\n\n\"Here, hop on and save your strength honey\" I said, and after she did we went down the hallway and onto the elevator. It was a bitter afternoon and when we got outside the cold almost took my breath away. I looked at Cathy who was climbing out of the chair.\n\n\"What now honey?\" I asked tenatively as she stood up.\n\n\"Unless you got a car in the last week or so, I think we need a cab\" Cathy announced and waved at a salt covered taxi waiting out in front. \n\nCathy got to the car with a bounce in her step that amazed me. I barely got to open the door for her, she got there so fast. We climbed into the stinking taxi and I looked at Cathy, asking where we were going.\n\n\"Home\" Cathy said.\n\nWe took the cab to our apartment, and when we got inside Cathy complimented me on my housekeeping. The place was in decent enough shape, in part because I was a fairly neat person but mostly because I had been spending most of my time at the hospital. Cathy went over and sat at the kitchen table.\n\nI quickly grabbed the letter I had gotten from the unemployment office before Cathy could see it. I had become unemployed recently, having had the audacity to ask for some time off from my warehouse job so that could be with my girlfriend in the hospital. \n\nThey said that I could take all the time that I wanted, since I was now no longer working there. Apparently the demand for Preparation H, Prell, and all the other items in my section was such that there could be no waiting around for my problems to settle themselves.\n\nI made Cathy a bowl of soup and she ate it with surprising enthusiasm. It was then that I sensed that there was a miracle happening here. Doctors make mistakes just like anybody else, and sometimes things happen that you can't explain.\nI felt a rush of happiness, and a sense that things were going to be alright.\n\nWe went to bed and lay under the covers, just holding each other and saying how much we loved each other. There was so little physical resemblance to the woman I used to hold in my arms. Well, Cathy had always wanted to lose weight anyway, though I had always insisted that she was beautiful just the way she was.\n\nWhen I awoke, Cathy was no longer laying in my arms, and I squinted in the dark to see what time it was. Ten o'clock. I went out to the kitchen and found Cathy on the phone, ending a call.\n\n\"Get dressed Dave, we're going out on the town!\" Cathy said. \n\nI thought that she might be rushing things a bit, since she now seemed a little less vibrant than she had been. The decision was made, however, and our friends were coming over to pick us up.\n\nCathy tried to find something that would fit her without falling off of her as I helped as best I could. Outside a horn sounded and we bundled up to face the winter's fury.\n\nOur friends had visited Cathy regularly in the hospital so they were not surprised when they saw her. When we got to our hangout and people came up to greet Cathy, I could see the shock and barely disgused horror on the faces of these acquaintances when they saw the toll the last couple of months had taken.\n\nWe found our usual corner and I finally got Cathy over to sit down while everyone surrounded her. Cathy was smiling and having a wonderful time, but it seemd like the excitement was taking its toll as she began to look a little fatigued. I wondered how much longer I dared keep her out.\n\nOver the din of the group that surrounded our table, I heard the clatter of the band getting ready to play again. I heard somebody say something from the stage about Cathy which got a rousing cheer from the people around us. I asked someone what the guy just said but couldn't hear the answer.\n\n'I've got a girl who's oh so good she's got everything.'\n\nCathy got up a trifle unsteadily but I knew better than to even try to stop her. We didn't even attempt to go out to the dance floor, and just stood next to the table as we did what was only a pale imitation of our usual routine.\n\nCathy bravely made it about halfway through the song, even managing a couple of our old moves before I began to see the message in her eyes. The message was that there were no miracles forthcoming, and that the party was almost over. I reached forward and grabbed her, holding her close to me before she gently collapsed into my arms.\n\n\"Sorry Dave... I'm just a little... tired\" Cathy whispered in my ear. \"I want to dance.\"\n\nWe finished the song in each other's arms, and after it was over I motioned for our friends to help me put her coat on and get her out of there. We went directly to the hospital and I got Cathy up to her room.\n\nI got reamed out by the nurses on duty as they got her undressed and back into her bed. I was more concerned about Cathy than what they were saying, and took it as best I could.\n\nI left Cathy as she was already falling asleep, and got seranaded by a particularly bitchy nurse who seemed to be running the show.\n\n\"Don't you realize that taking her out like that could have killed her?\" she screeched at me as I headed for the elevator. \"Don't you care anything about her?\"\n\n\"Shut up you dumb bitch! She's dead already. This was the only day she had left in her!\" I snapped at her with a ferocity that startled both of us. Not one of my most eloquent moments, and certainly not something I'm proud of, but...\n\n***\n\nCathy died on February 17th, \"living\" another week and a half before mercifully passing away with me by her side. On Valentine's Day I brought in the card that I had made for her two years earlier.\n\nHer eyes lit up and I held it up for her to read again, and when the tears started trickling down her face any measure of self-control left me and I went to pieces along with her.\n\n\"When you gave me that card\" Cathy said with considerable effort \"I knew that you were they man I wanted to spend the rest of my life with.\"\n\nThank you for the days, Cathy.\n\n*\n\n'She's Got Everything' written by Raymond Douglas Davies."
    ],
    "authorname": "davidwatts",
    "tags": [
        "love story",
        "tragedy",
        "true love",
        "valentines day"
    ],
    "category": "Non-Erotic",
    "url": "https://www.literotica.com/s/thank-you-for-the-days"
}
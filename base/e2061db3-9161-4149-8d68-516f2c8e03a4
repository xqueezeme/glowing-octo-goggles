{
    "title": "The Big Tits Club Ch. 29-30",
    "pages": [
        "-- CHAPTER 29: Medley --\n\n****\n\n\"Two... drifters... off to see the world. There's such a lot of world... to see...\"\n\nStill singing quietly to herself, Zofi almost absentmindedly did a slow pirouette, balancing up on her toes for a moment at the peak before setting back down and dragging her left foot around in a graceful arc across the carpet of the family room.\n\nThe six of us had finished watching Breakfast at Tiffany's a few minutes earlier. Alice and Mari were packing up to head home. Belle was chatting with both of them. Zofi was doing her little daydream dance. And Naimh, unfortunately, had missed the movie to head home to her parents before dinnertime. While they allowed her to hang out with her friends every day after school, they still kept her on lockdown on the weekends with the understanding that her friends could still come visit her, the way Alice did fairly often. Indeed, Zofi planned to go keep her company tomorrow and then Mari and Belle were going to join Alice on Sunday. At least we'd enjoyed our Friday afternoon together as a group.\n\nSam sidled up to me where I leaned against the wall, watching Zofi dance, even if the brunette was in her own world dancing like nobody was watching. When I felt Sam's presence beside me, I nodded forward with my chin and said quietly, \"She has an old Hollywood grace to her, doesn't she?\"\n\n\"Yeah... she does,\" Sam agreed with me, a little smile on her face.\n\n\"Even reminds me of Audrey a little bit,\" I added.\n\n\"Well...\" Sam began thoughtfully before nodding with a wider smile. \"Okay, I can see what you mean.\"\n\nI glanced down at Sam's smiling face. Good lord she was freaking beautiful. Even though we weren't \"together\", formally or informally, it still felt completely natural to lean down and give Sam a sweet kiss. I didn't linger long, and she narrowed her eyes at me when I pulled away. She'd told me quite explicitly to try and cut back on these little romantic moments, and how important it was to her that we maintain a strictly \"fuck buddies\" relationship that wouldn't make her pine for something emotionally deeper. But at the same time, I already knew she'd let this one slide.\n\nShe let ALL of them slide.\n\nSecretly, I knew she still loved having them. If anything, absence would make her heart grow fonder. Still, I wouldn't push her, and I folded my arms across my chest while returning my attention to Zofi.\n\nPresently, the tall, lissome brunette finished her last spin and stopped abruptly when she realized Sam and I were both watching her. She blushed cutely, and deciding to just go with it, Zofi sketched a dramatic curtsy as if she'd completed a stage performance.\n\nSam and I started up a round of applause, which drew the attention of the others. But we didn't keep clapping for long, as Zofi came up to hug both of us. \"You guyyyys...\" she muttered in a little embarrassment.\n\n\"You were beautiful,\" I reassured her.\n\nShe sighed. \"I just love that movie.\"\n\n\"Anyways, time to get going,\" Sam interjected. She leaned over and gave me a quick peck on the cheek and a pat on the butt. \"See you Monday.\"\n\nI nodded.\n\nZofi gave me a stronger kiss straight on the lips. \"See you Sunday?\"\n\nI smiled. \"Wouldn't miss it.\" I'd already been invited to watch the Super Bowl with Zofi and her father. Since none of our other friends cared, nor did Mother, it would be a lot more enjoyable to watch the game with my \"girlfriend\" than watching home alone like usual. A couple of years, Alice had joined me, but just for the commercials. Even Belle's dad had never really cared.\n\nIn the end, all of our friends headed out the door. Belle then took me by the hand, drew me close, and got up on her tiptoes to kiss me. Knowing that she would get to spend the night, she'd deferred most of the afternoon's activities to the other girls, especially Naimh. But now she had me all to herself.\n\n\"Take me to bed, lover,\" she whispered softly from inches away.\n\nI smiled warmly at her. \"Anytime.\"\n\n****\n\n\"Ungh, ungh, ungh,\" Belle groaned every time my cockhead bumped ever so gently against her cervix.\n\n\"Hmph, hmph, hmph,\" I grunted from the exertion of fucking through her tight channel.\n\n\"Soooo fucking goooood, Matty...\" Belle moaned as the water sprayed all around us. She clamped her legs a little tighter around my waist and clutched my neck for dear life, hugging me like a Koala bear while I pinned her against the shower wall and steadily pumped in and out of her pussy.\n\nShower sex had become a familiar part of our routine lately, at least ever since we started using an oil-based lube. Belle was so light that it was easy to hold her up in this position against the wall. I mean, we fucked this way against other walls of the house as well, but there was something unique about doing it in the shower that made us keep coming back for more.\n\nOf course, we only needed to get into the shower after getting pretty messy in other ways first. We had started, as usual, with me carrying my little Annabelle up the stairs in my arms like she was my wedding bride and I her proud husband. I set her on my bed, peeled her out of her clothing, and went down on her to taste her sweet nectar and stretch her out with a few fingers too. From there, the script varied from day to day. Sometimes I climbed aboard missionary style. Sometimes she pulled me into a sixty-nine. Other times she rolled me over and mounted me cowgirl style.\n\nTonight, she'd wanted to take another crack at anal sex. She wasn't competitive about it like the others, but after watching both Mari and Naimh get sodomized on the couch this afternoon, she'd gone upstairs before the movie and inserted the third of the four butt plugs from the set she'd purchased with Sam.\n\nWe'd tried fitting me into her ass once before, with plenty of lube on Thursday while Mari played cheerleader in a sixty-nine position trying to distract Belle by eating her out. But perhaps still traumatized from the pain of her deflowering what felt like ages ago (even though it had been less than three months), the instant I'd started pushing through her dilated sphincter she'd tensed up and declared \"Nuh-uh. Not happening today.\"\n\nUnfortunately, tonight hadn't gone any better. Well, from one point of view one could say we were more successful, but from another point of view one could say the whole thing was a disaster.\n\nIt started off well enough. Belle had been a lot more determined to see this through and seemed to be mentally prepared. She wanted to try her anal insertion flat on her back while holding her own knees to draw her legs up and out of the way. I made sure she and I were both plenty lubed up. I ate her to a screaming orgasm to ensure she was as relaxed as she could get, pulled the butt plug, and swiftly replaced it with my cock.\n\nI actually got through her anus and pushed about two or three inches of cock inside before she clamped up like crazy and started shaking her head rather violently, grimacing in agony and yelping, \"Nope-nope-nope-nope-nope!\"\n\nYou bet I pulled out of her fast and held her while she sobbed in my arms whimpering about how much it hurt. Two minutes later, she was crying while apologizing to me as if the whole thing were her fault. I shushed her and kissed her and reassured her that I was perfectly fine whether or not she was ever able to have anal sex with me. By the time she stopped crying, the determined and stubborn Belle attitude was back as she declared she simply needed to train with the biggest butt plug for a while.\n\nWe got into the shower to clean up and rinse away all the regular lube while applying the oil-based lube to her pussy. I picked her up, parked her against the wall, slid smoothly inside, and started pumping. I pounded her to a squealing orgasm before she had me turn off the shower, hump her little body until I was ready to blow, and then park her on her knees so I could cover her face with my creamy load. Matty's Little Cumslut licked up what she could, we turned the shower back on to clean up again, and we finally dried off to change into our pajamas.\n\nWe were downstairs cuddling on the big couch browsing cable channels when Mother came home. She and Belle had a quick conversation before Mother excused herself. After finishing a random episode of some TV show I can't remember anymore, we returned to my bedroom, peeled back out of our pajamas, and made love. Ten minutes later, I asked her, \"In or out?\"\n\nMy Annabelle sighed, kissed me sweetly, and murmured, \"In.\"\n\n****\n\nOn Saturday, Alice showed up in a cute skirt and spaghetti-strap tank top that showed off her tits quite well. Her hair had been freshly brushed and pulled back with a pink headband. She had a smattering of makeup on, nothing heavy but definitely more than usual. It transformed her face from \"pretty\" to \"eye-catching\", and I had no idea how to react except gape at her with my jaw dropped.\n\nHad she asked me, \"What do you think?\" or \"Do you like it?\" or anything remotely like that, I would have complimented her and probably tried to start something sexual. But she made absolutely no mention of her attire and walked past me as if nothing were out of the ordinary, which made me do my best to act as if everything were normal. I couldn't tell if she was waiting for me to compliment her on my own or prove I could treat her as the same old \"buddy Alice\" she'd always been. The noble part of me wanted her to understand a change in clothing wouldn't change our friendship. Like, I didn't want to treat her as a sex object or in any way make her believe my valuation of her was somehow dependent on how feminine her clothing.\n\nThe end result was that I kept sneaking glances at her tits while she stared forward at the TV screen, all her attention on playing the game. The distraction proved quite effective as she pretty much wiped the floor with me for over an hour.\n\nFinally, Alice switched off the console after her latest dominating victory, gently took the controller out of my hand, and climbed into my lap. Wrapping her arms around my neck, she wordlessly started a makeout session, which I was quite happy to return. Having stared at the cleavage of her D-cup melons in that tank top all afternoon, my boner was quick to make itself quite apparent in my gym shorts. When she discovered it pressing against her mound, she shifted slightly so that she could grind herself against the bulge, started kissing me a little harder, and moaned into my mouth.\n\nFinally, she broke the kiss, panted at me from inches away, and had a rather impish grin on her face. \"Like the outfit?\" she asked coquettishly.\n\n\"I'd like to see you take it off, actually,\" I replied breathlessly.\n\nAlice grinned, the light blue eyeshadow and purplish lipstick giving her an otherworldly quality that made her look both undeniably familiar and yet exotically sexy. \"Good answer.\"\n\nI'd later discover that Naimh had taken her shopping during the week, with a few more new outfits still to be revealed. This outfit, despite my reply, she didn't actually take off. Instead, she pulled the front of the tank top down below her nipples along with the cups of her bra, so that the material squished her big tits together and elevated them up beneath my chin. Alice sat up straighter to give me access, and I was quick to duck my head and devour her nipples. At the same time, she helped me yank my gym shorts down to my ankles while I hopped on the couch cushion to create a little room. And rather than remove the skirt, she flipped up the front, pulled the strap of her panties to the side, and started dry humping her soaking wet pussy against my upright erection where it was trapped between our two bellies.\n\nI wondered if today would be the day she finally let me inside, and that electric anticipation (fear?) of the unknown had me on edge the entire time we were together.\n\nSpoiler Alert: She didn't. By all outward appearances, she seemed ready. She was certainly horny enough, and it would only have taken a shift of a couple of inches to bury my entire throbbing dick deep inside her. But for whatever reasons, she held back.\n\nInstead, Alice dry-humped her pussy against my cock until she squealed and climaxed. You know, the term \"dry humping\" is a complete misnomer when her pussy gets so wet that it feels like there's a puddle smeared against your midsection and trickling into your lap. Not that I was complaining, of course. When she was done, Alice dismounted, knelt in front of me, and sucked my dick pretty powerfully for two minutes until I started jetting thick wads of sperm straight into her mouth.\n\nI still didn't know when, or even if, Alice would eventually want me to take her virginity. But for now I was perfectly content to let her set her own pace.\n\n****\n\nSaturday night, Mari had another \"sleepover\" with Belle. I warned her not to push her luck with her parents, but figured as long as they didn't make it three weekends in a row we might be able to get away with it.\n\nThe girls wanted to go on another \"date\", but this time just to get fast food instead of dressing up for a fancy dinner. Then Mari saw our local mini-golf center on the way home, and we wound up spending a couple of hours on the course, in the arcade, and even did a little laser tag. By the time we got to my house, the three of us were actually a little bit tired, so the ensuing threesome wasn't some epic bout of awe-inspiring lovemaking. The girls did a little bit of sixty-nining with Belle on top. By the end of it, Mari somehow ended up on top, and I filled her pussy to overflowing where Belle could lick up my spending from below.\n\nIn the morning, I woke up spooned around Mari. She really made for such a plush teddy bear kind of feeling and I simply had a great night's sleep whenever I got to hold her. I also woke up with a throbbing erection, and doing my best not to wake her, I wound up notching my cockhead into her folds from behind and ever so slowly sinking myself inside of her.\n\nMy lovely Latina lover inhaled sharply and came awake to find three-quarters of my dick pulsing deep inside her, and she swore in Spanish before giggling and twisting her face back to stare at me.\n\n\"Surpriiiise,\" I greeted warmly, and she giggled again before kissing me. Then, rejuvenated from a great night's sleep, she started to really fuck herself back, a motion which eventually caused enough vibrations on the mattress to wake up Belle on the other side of me.\n\nIn the end, Mari went for a ride reverse-cowgirl while Belle licked at our joining from between our legs. But when it was time for me to blow, Mari popped off so Belle could swallow my load directly from the source.\n\nThe three of us got dressed and joined Mother for Sunday brunch. The ladies of the house chatted amiably, although quite thankfully none of them felt inclined to describe our sexual activities this weekend. Then Belle and Mari left to go visit Naimh, and I prepared to visit Zofi for the Super Bowl.\n\n****\n\nZofi greeted me at the door with a warm kiss that was more familiar than excited, which when I thought about it, seemed much more natural for a couple that had been seeing each other since the beginning of the year. My \"girlfriend\", her dad, and I all wore our jerseys again and settled in front of the TV. Her mom had gone all out with the food this time, with such a variety it made me wish I hadn't eaten brunch. Zofi's dad also offered me a beer, and since Zofi was already drinking one, I told him I'd take one but then stop after that since I'd have to drive home later.\n\nWe had a good time, I bonded with her father a bit, and the evening ended up much the same as the way it ended after the game the previous week, minus the whole freaking out about Sam going out with some other guy, and with one important distinction.\n\nZofi and I ended up cuddling in her bedroom while her dad stayed outside watching the trophy presentation. We started a little makeout session, but before we really got into it, Zofi shot up like she'd just remembered something. She rolled away from me, grabbed the phone on her nightstand, and started dialing. Twenty seconds later, she started talking to Naimh's dad. Thirty seconds after that, Zofi handed me the phone so I could have another cryptically subtle conversation with my girlfriend.\n\nOf course, Zofi chose that moment to slide her hand into my shorts and start jacking me. A minute later she had my shorts down while she bobbed her head up and down my erection. I certainly never expected to have a phone call with one girlfriend while my other girlfriend gave me a blowjob, but here we were.\n\nAt least Naimh's dad wasn't standing right behind her in the kitchen. But at the same time, Naimh told me she was in the living room where she and her parents could still see each other. She was paranoid that if she went to her own bedroom, her dad would hit the speakerphone button somewhere else in the house to listen in.\n\n\"What's going on?\" Naimh asked. \"You sound funny.\"\n\n\"Uhhh, Zofi's... she's... uhhh... she's giving me a blowjob.\"\n\n\"Ohmigawd!\" The line abruptly went silent, although I heard the muffling of the receiver being placed against something soft like her chest. But when I could hear the other side again, Naimh was still laughing long and loud before she sighed and said, \"I wish I could see that.\"\n\n\"You will next time the three of us are together,\" I promised.\n\n\"Well you make sure to return the favor.\"\n\n\"Uh, yeah, I can do that.\" I shook my head in disbelief again, somehow still surprised at how willing my girlfriend was to share me, not only being happy at the idea of another girl blowing me while she was trapped at home, but also encouraging me to reciprocate. I was indeed quite grateful Naimh and Zofi got along so well.\n\nThat said, Zofi apologized and said she'd started her period when I offered to go down on her, or at least turn things into a sixty-nine. So we left things at a blowjob, and I didn't quite keep a lid on my moaning when I finally spurted into the exquisitely beautiful brunette's sucking mouth. I was pretty sure her mom could hear me if she happened to be listening outside the door.\n\nAnd from the look she gave me after we finally emerged, I rather thought she had.\n\nBut that didn't stop her from bidding me a perfectly cordial goodbye before I left. Zofi's dad shook my hand and hoped I could still visit even if there weren't any more football games. And Zofi of course gave me a big kiss before I left.\n\nBut she also walked me down to the minivan to see me off. And after giving me one more big kiss by the front door of the van, she leaned in close to my ear and whispered, \"We're there now, darling.\"\n\nIt took me a second to understand her meaning. My eyes got big, and Zofi smiled broadly.\n\n\"I took my first pill yesterday morning. As soon as my period is finished, I want you to finally make me a woman.\"\n\nI took her into my arms and gave her a searing hot kiss that took her breath away. When we broke apart, I set my forehead against hers, and while both of us were panting, I finally replied, \"You're already an incredible woman. But I'll be honored to be your first.\"\n\n****\n\nAlice was waiting for me and Belle at the parking lot and came over to us as soon as we stepped onto the curb. To my surprise, she was back in her usual jeans and baggy t-shirt attire with no makeup and her hair in a functional ponytail. I met her with a fist bump, she chatted with me and Belle until it was time to go to our first periods, and the three of us then went our separate ways. I was a little surprised Naimh wasn't waiting for me at the gate the way she'd done the previous Monday. But I knew I'd be seeing her soon enough anyway.\n\nSam gave me a warm smile when I came in the door for our shared first period, and I actually had a minute to walk over to her. She gave me a quick peck on the lips, making me blush, and then asked casually, \"What's up?\"",
        "\"Has Zofi talked to you yet?\"\n\nSam's eyebrows popped and she glanced around the room. \"Not a conversation for the classroom, but yes, she has.\"\n\n\"Can we talk later?\"\n\nSam nodded and smiled. \"I have an idea you're gonna LOVE.\"\n\nShe was right; I loved it. Actually, it gave me an even better idea, one that we refined together. But we wouldn't be able to put it into action for at least another week.\n\n****\n\nNaimh was all over me at recess. We didn't have enough time to run out to my minivan in the parking lot, but the way she straddled my lap and made out with me until thirty seconds AFTER the bell rang warning us to get to third period left me in no doubt that my girlfriend once again wasn't going to wait until after school.\n\nStill, she took me by surprise.\n\nOur two classrooms before lunch weren't too far apart, and we'd made a habit of meeting in the middle to walk together to the BTC's regular lunch table even before we'd started officially dating. Last Monday, my horny girlfriend had practically dragged me out to the parking lot. This Monday turned out quite differently.\n\nShe dragged me to a janitor's closet.\n\n\"How in the world did you get a key?\" I asked, flabbergasted after she pulled me inside.\n\n\"The world is full of mysteries,\" she replied quite charmingly in her perfect Irish lilt.\n\n\"And you realize two dozen kids just watched us sneak in here.\"\n\n\"What?\" she scoffed. \"You think someone's gonna run and tell the principal?\"\n\n\"No, it's just...\"\n\nMy girlfriend looked at me expectantly.\n\nI rolled my eyes, grabbed her hips, and spun her around to face the metal shelves. I gave my ridonkulously hot freckled redhead girlfriend a smack on the ass before dragging her tight leggings down to her ankles, bringing her panties with them. I shoved my face into her pussy from behind and started licking while she moaned gutturally, \"NOW you've got the right idea.\"\n\nAfter spending thirty seconds licking her clit from behind, I worked my way higher up her happy trail to start rimming her ass. Naimh squealed and started wriggling around so much that I had to hold her in place so she didn't dislodge me. And after that, I was ready to go and dropped my cargo pants down to my ankles.\n\nMoments later, both of us groaned as I began feeding inch after inch of thick cockmeat into her sweet snatch. My girlfriend slid her hands up the vertical poles of the shelving, one each on either side of her, and her head lolled backward as if my insertion had suddenly rendered her spineless. I stopped when I was fully imbedded to savor the sensations, and she let her head fall forward again, hanging in the gap between one shelf and the next. Cleaning solution in gallon-sized jugs were on the shelf just to her right (as opposed to Naimh's gallon-sized jugs that filled my meaty paws). Boxes of rolled up trash bags were to her left. The scent of solvents filled the air, drowning out the musk of a girl's pussy in heat.\n\n\"Oooh, Matty...\" Naimh groaned gutturally as I shifted my stance a few inches further out to the sides, giving myself a strong base. I adjusted my grip to her hip bones to either side. And then she gasped as I withdrew until I was almost all the way out and rammed all the way back inside.\n\nShe gasped again when I repeated the maneuver.\n\nAnd again.\n\nAnd again.\n\nAnd again.\n\nThe gasps turned into whimpers as I sped up, starting to savagely fuck her in earnest. I let go of her hips and slid my hands up her slender body, underneath her blouse, past her ribcage, and beneath the bottom of her bra. Gripping her big Double-D tits in my hands, I pressed my chest against her back so that we were practically spooned together. And I continued fucking her, my motions a bit shorter and more grinding in this position instead of the long-dicking thrusts of before.\n\nI nibbled on Naimh's neck while she crooned my name in lustful glee. Her fingers were white-knuckled as she struggled to hold onto the metal shelving poles. Every now and again, she would shudder in pleasure hard enough to shake the shelves and make the jugs or boxes rattle just a bit. And suddenly she started screaming as an orgasm tore through her body.\n\nI yanked my hands off her tits and covered her gaping mouth with my left hand to muffle her scream. My right hand wrapped around to rub her clit, strumming it all through her climax. She bit down on my hand in her passion, not quite hard enough to draw blood, and I reacted by fucking her just a little harder for a couple of thrusts.\n\nWhen she came down from her high, Naimh twisted her head to look back at me, a wordless hunger in her eyes. I knew what she wanted from that single look, although I was a little astonished that she wanted it here. Still, I wanted what she wanted too much to really question it. Relocating my hands back down to her hips, I withdrew my rock-hard erection from her still-quivering quim, notched the angry purple head at the entrance to her anus, and started pushing.\n\nMy girlfriend groaned at the penetration, spinelessly hanging her head forward again as she tried to relax and allow my entrance without lube. I was pretty slick from her pussy juices, and we had done this a few times by now, so I knew she could take it. But it still took a while to get me fully buried in her ass.\n\nOnce again, I stopped when I hit full depth to really savor the sensations. Exhaling slowly from the exertion, I caught my breath and let my hands roam inside her blouse to tweak her nipples, cup her massive tits, and slide along the bare skin of her back. I also took two healthy swats at her buttcheeks, making her tense up and clench up with each impact while she squealed and stared back at me, hungry for even more. So I spanked her three more times, and after that, I really began to the fuck the hell out of her.\n\nOver and over again I cornholed my girlfriend's tight colon. At first, I had only been able to slow-dick her asshole while it got used to being so completely filled. But once I got her stretched out I was able to pick up the pace. Soon enough, the metal shelves started rattling like crazy from the way her whole body shuddered against them. But we were both beyond caring now as I repeatedly violated her tight anal chute.\n\nShe climaxed again, her screams echoing through the close confines of the janitor's closet. I reamed her out even harder.\n\nShe kept screaming. I started groaning out loud as well.\n\nShe started cumming AGAIN, and this time the way her colon clenched around my cock in the throes of ecstatic climax drew my own orgasm out as well. I grunted into her ear that I was going to blow, and abruptly she yanked her body forward, spun herself around, and dropped to her knees. I gawked at my girlfriend in utter shock as she swallowed my dick right down to the root, straight out of her ass. And right when her lips touched down against the very base of my dick, I felt my cockhead open up and begin shooting sperm straight into Naimh's stomach.\n\nOver and over again I fired, my bodaciously beautiful and buxom girlfriend taking every drop of spunk I had to give her. She stared up at me with those brilliant emerald eyes, looking insanely gorgeous with my spurting dick in her mouth. I had never been more in love with her than in this moment, or was it lust? Whatever it really was, I was thrilled beyond belief to have such an amazing and NAUGHTY little vixen to call my own.\n\nShe didn't swallow the last of my load, and after pulling off my deflating dick she opened her mouth to show me her collected pool of creamy jism. With a wink, she then gulped it all down and beamed up at me before standing and hugging me tightly.\n\nI hugged her back, patted her ass, and briefly checked my watch. We'd burned up most of our lunchtime, but could still rejoin the others and hurriedly eat our food. She kissed my neck and sighed rapturously, \"I love you so much, Matty. I really missed you.\"\n\nI squeezed her tight and murmured in reply, \"I love you, too.\"\n\n****\n\nI hadn't really noticed it as it was happening, but when I stopped to think about it, I realized that the frequency of my booty calls with the BTC girls had slowly been dropping ever since Naimh and I became a romantic couple. After that first week during which my girlfriend and I had gone out of her way to ensure each of the other girls felt prioritized, things had gone... well... the phrase \"downhill from there\" has too much of a negative connotation, but it would be an accurate graphical representation of booty call frequency over time.\n\n\"Study breaks\" were coming fewer and farther between, with more time actually spent, you know, studying in the afternoons. Sam once again declined to join us Monday afternoon, nor did she come over to the house in the evening. Zofi was on her period and skipped her usual Wednesday altogether. And even Belle hadn't come over after dinner in weeks, seemingly satisfied with her weekend overnights.\n\nThat's not to say I didn't get individual time with each of the girls at all. All six of them wanted a Matty-produced orgasm at least once a week, in addition to the Friday seven-way afternoon orgies that had become our staple method of unwinding after the school week.\n\nBut overall, the novelty of what we were doing was starting to wear off, and the girls' sex drives were returning to what most people would think of as \"normal\" levels for people who had lives to lead, with hobbies and interests that didn't require the use of my penis. Mari and Belle spent more time baking and looking up recipes together. Sam liked to spend her time reading of all things, on top of everything else she did. And Zofi was on her period.\n\nNot that I was going without or anything like that. One Matty-produced orgasm per girl plus the Friday afternoon orgy still added up to a lot of sexual activity. And you'll notice that I didn't include Alice or Naimh in that list of declining frequency. Alice was happy to pick up the slack as she further explored her burgeoning sexuality. And my randy redheaded girlfriend wanted my dick thrusting into one of her three holes or between her tits as much as humanly possible, and she easily made up for the decreased BTC booty calls all on her own.\n\nShe fucked the shit out of me Monday afternoon at home so that even IF Sam had come over at night, I wouldn't have much left to give.\n\nTuesdays had always been Naimh and Alice Tuesdays. Alice told me she and Naimh had been spending time together on the weekends talking about cosplay, something that blended Alice's interest in video games and comic books with Naimh's artsy costume projects. Then Alice decided to show me a new trick she'd learned when she (A) lay back and let me watch my girlfriend go down on her and then (B) got between Naimh's spread legs and ate my girlfriend to an orgasm. Since both of them were naked at the time I could barely resist grabbing Alice's athletically firm ass from behind and ramming myself into her virgin snatch. It was especially difficult since Alice said they were working on making Alice a Mai Shiranui costume, and I'd already been fantasizing about her for an hour.\n\nWednesday, Sam skipped studying again. Zofi was on her period, but she still came over so she could do her homework with me and Naimh. Once we got all that squared away though, she did join us for a hot threesome, happy to go down on Naimh and suck my dick so I could have both of my \"girlfriends\" crawling all over lucky me, even if she kept her panties on the whole time.\n\nThursday was supposed to be Mari and Belle time, but both of them declared themselves good after Saturday night's \"sleepover\", and they studied together at Belle's house while Naimh and I holed up together in my bedroom all afternoon.\n\nAnd then came Friday.\n\n****\n\n\"You look exhausted,\" Belle drawled as she came around the edge of the couch and flopped down beside me. I opened my right arm, and she quickly pulled her legs up beneath her while leaning over to pillow her head on my shoulder and cuddle against my side.\n\n\"I am exhausted.\"\n\n\"You've had about three hours to rest between dinner and the movie,\" she commented without looking up at me. Reaching into my lap, she massaged my package with her hand through my gym shorts, but just for a moment. Picking her head up, she gave me a teasing look. \"But if that's not enough time and you're not up to doing your duty, maybe I should call one of the girls to come back here and take care of me.\"\n\n\"Now don't go talking crazy here. I'll be ready to go when you need me,\" I assured her quite cockily, if a bit wearily.\n\nShe giggled and set her head back down on my shoulder. \"Relax a bit. I know you will. Goodness knows the girls really put you through the wringer this afternoon. Sam especially.\"\n\n\"Mmm-hmm.\"\n\n\"Ooh, I felt a twitch there.\" Belle still had her hand on my package, not massaging but just sort of resting on it. \"Which part are you thinking about right now?\"\n\n\"Too many great parts to think of.\"\n\n\"Alice going down on Neevie?\"\n\n\"Actually, they did that on Tuesday,\" I explained. \"Not saying it wasn't amazing to watch, but I at least wasn't taken by surprise like the rest of you.\"\n\n\"Oh, duhhhh!\" Belle actually smacked herself on the forehead. \"Sam, Neevie, and Mari all lined up in a row and bent over the couch with lubed assholes.\"\n\nI chuckled and nodded. \"Yes. DEFINITELY a fond memory.\"\n\nBelle giggled and rubbed my package, which had stirred once again. \"I can tell. A bit obvious perhaps, but I'm glad Neevie thought of it.\"\n\n\"The daisy chain was novel,\" I added. \"Also Neevie's idea.\"\n\n\"Mmm, but we should change up the order next time. Or even make it a complete circle the next time nobody's on their period.\"\n\nI nodded. With Zofi keeping her panties on, she was at one end eating out Mari, who was eating out Belle, who was eating out Sam, who was eating out Naimh, who was eating out Alice, who was giving me a blowjob. \"I don't want to push the girls past their limits. Mari's comfortable doing lesbian stuff like going down on you, and Alice is comfortable with Naimh. Maybe in time as they get used to it they'll be more receptive to going down on new partners.\n\n\"And then there was Neevie's idea to start bringing a strap-on dildo to these hangouts.\" Belle tittered cutely. \"I have to admit, I'm rather curious to find out what it's like for one of the other girls to fuck me. And vice versa.\"\n\nI smirked. \"Don't take it for granted. Thrusting is hard work.\"\n\n\"Mmm, your girlfriend has the BEST ideas.\"\n\nI paused for a moment and looked down at Belle. She looked back at me curiously, not understanding my expression. I smirked and explained, \"Zofi says that a lot. Word-for-word.\"\n\nBelle shrugged. \"Well Neevie does. That girl turned out to be a FREAK. Lucky you.\"\n\nI grinned and agreed, \"Lucky me.\"\n\nBelle sighed, a regretful tone in her voice that took me a little by surprise given how chipper she'd been five seconds earlier.\n\nI glanced down to see her lost in thought, and I squeezed her against my side to jostle her loose while asking, \"Hey, what's wrong?\"\n\n\"Hmm? Nothing. Nothing's wrong.\"\n\nI arched an eyebrow and stared at her silently, waiting for her to crack.\n\nThree, two, one...\n\n\"Okay well maybe it's not nothing. Maybe I'm a little jealous she gets to be your girlfriend and I can't.\"\n\nI blinked twice and frowned. \"Wait, what?\"\n\nBelle screwed up her face, frowned, and finally shook her head. Without another word, she slipped out of my arms onto the floor in front of me and started pulling down my gym shorts.\n\n\"Hey, wait,\" I interrupted, grabbing onto my waistband and not letting her yank them down. \"What are you doing?\"\n\nShe stared up at me as if I were the dumbest cow on Earth. \"What does it LOOK like I'm doing?\"\n\n\"It looks like you're trying to give me a blowjob to distract me from the fact that you don't want to talk about feeling jealous of Neevie.\"\n\nBelle pursed her lips and sighed, staring at my crotch without actually staring at my crotch. She sat back on her heels, her shoulders sagged, and after taking a deep breath, she looked up at me with moisture in her pale green eyes. And in a quiet voice, she mumbled, \"It should've been me who was your girlfriend.\"\n\nI cocked my head. \"I thought you didn't--\"\n\n\"I didn't,\" she interjected.\n\n\"You were the one who got me and Neevie together.\"\n\n\"I was,\" she agreed.\n\n\"Then?\"\n\nBelle sighed. \"I love my friends; I really do. I love seeing them happy and satisfied. I love that none of them have to worry about all the emotional angst of dating or get into the rumor mill about what boys they like and which boys like them like so many other high schoolers. And I love... I mean LOVE watching you plow the shit out them.\"\n\nI arched an eyebrow.\n\nBelle smirked and muttered, \"I know, I know, you smell a 'but' coming.\"\n\nI shrugged wordlessly.\n\nShe sighed again. Folding her arms across my lap, she set her chin down on them and then let her head loll to the side on one cheek. \"In some ways, nothing's changed since last year. I still find myself lying awake at night in bed, fingering myself while wishing you were next to me.\"\n\n\"You DO get to have me next to you tonight,\" I pointed out. \"Nobody else gets consistent overnights with me, as much as they may want them.\"\n\n\"And I LOVE that change, too. And yet...\" She had looked up at me for a moment, but now went back to sighing and laying her cheek down across her arms. \"If I told my dad I was your girlfriend, he'd probably let me sleep here every night. I mean, he wouldn't be happy about it, but he wouldn't stop me, either.\"\n\nI thought about cuddling my little Annabelle in bed EVERY night. I thought about the feel of her warm body beside mine EVERY night, not just twice a week. Sure, Mari's body was better built for cuddling, but I didn't have the same feelings for her as I did for Belle. And with a sigh, I said softly, \"I'd like that, too.\"\n\nExhaling slowly, Belle got off the floor and crawled into my lap. Wrapping her arms around my head, she at first merely pressed our foreheads together and breathed deeply with her eyes closed. I cuddled her body close and let my hand rub up and down her spine. Eventually, she gave me a quick peck, rubbed my lips with her thumb, and then gave me another kiss, this one lasting a few seconds before she pulled away. Almost experimentally, she tilted her head to kiss me one way before tilting her head the other way. After three or four different attempts, she seemed to settle on angling her face at a ninety-degree angle to mine, really mashing our mouths while our tongues twisted together in-between.\n\nSuddenly, she stopped and shivered in my grasp. I held her upper arms, the goosebumps on her skin pebbly beneath my touch. Her lower lip quivered, and the first tear rolled down her cheek. She looked so impossibly sad that I yearned for nothing more than to do ANYTHING humanly possible to make her smile again. And with a sob and a shudder, she muttered quietly, \"What if I'm missing out on the greatest love of my life out of fear?\"\n\n\"I'm right here.\"\n\n\"I'm not your girlfriend.\"\n\n\"You don't need to be. You're my Annabelle. Now and forever.\"\n\n\"I love you, Matty.\"\n\n\"I love you, too.\"\n\n\"I'll always love you.\"\n\n\"And I'll always love you.\"\n\n\"I hate Neevie's fucking guts right now.\"\n\nI jerked my head, taken aback by the vehemence in Belle's tone, and my eyes went wide.\n\nShe clenched her eyes shut, immediately embarrassed as she pointed her face away from mine. \"I didn't mean that.\"\n\nRaising both eyebrows, I gave her a serious look even though she couldn't see it. \"Yes, you did,\" I murmured softly.\n\nTaking a deep breath, Belle sagged. \"If I was your girlfriend, the others would be going out of their way to give ME extra time to fuck your brains out.\"\n\n\"You said yourself you enjoy watching them all fuck me. Neevie included.\"",
        "\"I do but...\"\n\n\"So join us for more threesomes,\" I suggested. \"You get to watch, she gets to show off, she gets a playmate during the downtimes when I need to recharge, and--\"\n\n\"And what? I still have to defer to her and let her get plowed when I would rather get plowed myself?\" Belle scoffed. \"Seriously, dude, when a girl tells you she wants to be primary, don't tell her to join you and your girlfriend to be the third wheel.\"\n\nMy jaw dropped. \"I... uhhh...\"\n\nRubbing her forehead, Belle sighed and shook her head. \"No, you're right. I mean, you're pulling a classic male response from Intro to Psych, giving me solutions instead of support.\"\n\nI winced. \"Right. Support.\"\n\nBelle rolled her eyes. \"Nevermind.\"\n\n\"I DO want to support you, B.\"\n\n\"I know you do.\"\n\n\"Did you want me to break up with Neevie to be with you instead?\"\n\n\"Would you?\"\n\n\"I... uhhh...\"\n\n\"Nevermind.\"\n\n\"Belle--\"\n\n\"No, that wasn't a fair question.\"\n\n\"No, it wasn't. You know I wasn't being serious.\"\n\n\"Even though you once told me you'd leave the BTC to be with me.\"\n\n\"And you said you'd never break up the BTC. Forcing me to dump Neevie to be with you would definitely wreck the club.\"\n\n\"You wouldn't leave her anyway. She's too fucking good in the sack and you've wanted this relationship forever.\"\n\nI sighed. Belle still wasn't looking at me, but I gently reached up to turn her face to mine. \"I love you. I love you more than I love Neevie, quite frankly. She's my girlfriend. But you... you're my Annabelle.\"\n\nShe pursed her lips and narrowed her eyes, debating whether or not to believe me.\n\nI gave her a serious look. \"Neevie and I never spent hours just holding each other having conversations like this. Quite frankly, we just fuck each other's brains out and then go our separate ways. This thing she has with her parents not letting her out on weekends or evenings... whatever it is... really prevents us from having the kind of intimate relationship we both thought we'd get to have. I haven't even taken her out on a date since Santa Cruz.\"\n\n\"But that will change. I know the two of you will figure out how to get more time together. I mean, at SOME point you have to stop fucking each other's brains out and sit down to just have a conversation.\"\n\n\"Yeah, eventually, I suppose.\" I chuckled. \"But the point is that regardless of what title you want to apply to our relationship, you have to believe I'm still closer to you. And doesn't that count for something?\"\n\nBelle set her forehead against mine and sighed again. \"Yeah...\"\n\nI rubbed the back of her neck and pecked her nose. \"Okay, I was about to start coming up with solutions to make you feel better and get us more time together, but if you want support, I'm going to do muddle through figuring that out. I'm on your side, B. Alice had always been my video game buddy and best friend, but at this point in our lives you know how close we've become. You're the one person I can't live without. If the BTC imploded tomorrow and I had to choose just one of the girls to stay with for the rest of my life and lose all the others, you know I'm choosing you.\"\n\nBelle pulled her head back. \"Not your girlfriend?\"\n\n\"I love Neevie, and I love the relationship that we have. Apart from the lack of quality time together, she's everything I ever dreamed of and more. But it's still new and I'm not sure if we're built for the long run yet. Maybe we'll get to that next level beyond infatuation and physical compatibility... Maybe not. But you're here right now and I know you'll be there for me forever. I meant it before and I mean it now: if it came down to it, I'd choose you over the entire BTC. Isn't that what you basically wanted to know when you asked if I'd break up with her for you?\"\n\nMy pixie blushed, averted her eyes, and looked guilty. But she still nodded 'yes'.\n\n\"Now granted, I don't actually WANT to break up with her, but if I had to, I would. I love you, Annabelle.\"\n\n\"And I love you too, Matty.\" She kissed me quickly again. \"But as reassuring as your support is, I still can't help but feel like I'm missing out not being your girlfriend. Heck, even Zofi gets to be your girlfriend more than I am.\"\n\n\"Zofi's not really my girlfriend and you know it.\"\n\n\"She definitely gets a kick out of calling you 'boyfriend' all the time, though. And don't think I've forgotten your big date tomorrow. When do -I- get to have a big date with you?\"\n\n\"Is that what you really want? You were the one who said we couldn't get together because I can't be your one and only. If we got together now, we'd have to break up so you could grow up and explore the world or something, right?\"\n\n\"Well what if I WANT you to be my one and only now? Lots of people marry their high school sweethearts, or otherwise live perfectly normal, happy lives with only one lover.\"\n\nI smirked. \"Well, you've basically hooked up with every other girl in the BTC now, so that's at least six lovers.\"\n\n\"I mean MALE lovers. And I haven't actually messed around with Alice yet.\"\n\nI popped my eyebrows salaciously. \"Yet...\"\n\nBelle giggled and kissed me again. But she held my head and set her forehead against mine and sighed. \"I'm torn.\"\n\n\"I can tell.\"\n\n\"I want to be with you so badly my teeth hurt.\"\n\n\"You already ARE with me. Look around you. Who else is in this house but you? Who else gets to spend the night with me? Not my girlfriend. Just you.\"\n\n\"I know, but...\"\n\n\"The word 'girlfriend' is just that: a word. Even if we got 'together' it wouldn't change the way I feel about you. I already love you to the ends of the earth. I'll love you for the rest of my life. I'll love you even if we end up at colleges on opposite sides of the country and you end up dating some rugby jock who can beat me up with one arm tied behind his back. You're the single most important thing in my life. I've loved you since before I was twelve, and I'll love you until the day I die. You're my Annabelle.\"\n\n\"I'm Matty's Little Cumslut,\" she said with a giggle, an extra edge creeping into her voice.\n\nI grinned. \"That too.\"\n\nShe kissed me then, moaning into our embrace and pressing against me with enough force that I found myself bent over the top of the backrest while she made love to me with her mouth. Moments later, she started fumbling with the buttons to her blouse and crooned beneath her breath, \"I need you in me now, Matty. Now!\"\n\nNodding, I ripped my shirt over my head and started shoving my gym shorts down, having to hop on the couch cushions until Belle shifted over to the side. She had to get her shorts off as well. But less than a minute later we were both naked as she climbed right back into my lap, only this time she squatted down with my cockhead spearing up into her tight pussy. Entry was getting easier the more often we did this, and since I'd already fucked her a few times earlier in the afternoon and she'd had a half-dozen orgasms, she was actually pretty slick inside. And soon enough we were fully joined together and happily celebrating the physical side of our love.\n\nBelle rode me to a quick climax, quicker than I would've expected given the heavy nature of our conversation. But I suppose being told she meant more to me than all of the other BTC girls had a positive effect on her level of arousal. After that, we flipped around so I could pound her into the couch instead, curling up my little pixie into a ball with her knees bent back beside her own head until she screamed again.\n\nFinally, I bent her over an armrest, blasting my pelvis into her cute little heinie from behind. The way she was bent over, her feet didn't even touch the floor, so she was particularly helpless to resist the royal pounding I was giving her. And finally at my limit, I grunted, \"In or out?\"\n\n\"Ungh! Ungh! Ungh!\" she groaned, unable to react coherently. I could tell she was close to cumming, and sure enough three strokes later she threw her head back and howled, \"AAAAAAAAAUUUUUUUUGGGGGGHHHHH!!!\"\n\nHer clenching cunt pulled the sperm out of me. Figuring we were due to take a shower anyway, I impulsively pulled out at the last second and grabbed my little Belle's buttcheeks, spreading them apart. Notching my cockhead between her buns, I then let go and stroked my own shaft to pump out wave after wave of man goo right against Belle's butthole, eventually retracting back far enough to paint lines of creamy jism across both cheeks and even a little bit across her lower back.\n\nWhen I was done, I lay my dick into the cleft of her butt-cleavage and slid my shaft through the messy puddle I'd made. I figured if I got my dick coated in enough of my sperm, Matty's Little Cumslut would be happy to lick it off me.\n\nBut while I was still hot-dogging Belle's buns, a new voice broke in. \"Seriously, Matthew. You DO have a bedroom.\"\n\nI whipped my head around in shock while Belle spasmed, twisted, and fell onto the floor.\n\nMother sighed, arms folded across her chest as she surveyed the family room and briefly stared down at my still-hard pecker covered in my own cum. Shaking her head, she turned and walked away, heading for the stairs, muttering, \"Kids...\"\n\nBelle looked up at me from the floor, eyes still wide. Blinking in shock, she remarked, \"Well THAT'S a first.\"\n\nI grimaced. \"Uhhh... actually...\"\n\n****\n\n-- CHAPTER 30: Zofia --\n\n****\n\nSomething tickled my balls, and with a start, I jerked awake.\n\n\"Mmph!\" somebody grunted, and as I sat up, I realized I'd just shoved my dick an inch into a girl's throat. She gagged a little but didn't quite pull her head off. Continuing to suck my mushroom head and twisting her hands around the base of my cock, she pumped them together up and down the length of my shaft until she recovered enough to push her face back down.\n\nMy eyes fluttered for a brief second, giving me just enough time to see the strawberry-blonde head bobbing up and down in my lap. Belle looked up at me, her pale green eyes piercing in their gaze as she recognized I'd awakened. And she stopped to smile around a mouthful of meat while continuing to pump my shaft with both hands.\n\n\"Mmm, morning Annabelle,\" I greeted warmly. I glanced at the alarm clock that I'd set for 7am, which was an ungodly hour to wake up on a Saturday morning, but I had plans today. And yet it was only 6:52. \"You're early.\"\n\nThe impish pixie shrugged without removing my dick from her mouth. A few sucks later, she pulled off and smirked at me. \"What can I say? I woke up horny. And I figured I should get this going before you leave me for another woman.\"\n\nBy way of answer, I bent forward and hooked my hands beneath Belle's armpits, physically hauling her up and onto my torso. She'd worn one of my t-shirts as a pajama top and apparently no panties, since once she whipped the t-shirt off I found that she was already gloriously naked. Rather than try to insert my thick cock right away, she laid the furrow of her pussy along the length of my rod, pressing it down between us so she could ride it like a rail. This also made her bend over my face, putting her exceptionally firm D-cups within reach of my mouth if I craned my head a bit. Instead, I cupped my hands behind her shoulders and pulled her down low enough so I could suckle away to my heart's content while she slowly slid her light body back and forth. I soon felt her liquid arousal seeping out of her tight pussy, coating my shaft in her essence. And when I judged the time to be right, I used my left hand to hold her from sliding back, adjusted the angle of my prick with my right hand, and then let go with my left so that she could ever so slowly back herself up inch by inch, feeding more and more of my cock inside her warm body.\n\nI stopped suckling then, relocating my hands to her hips to help tug her body down against the tight friction of her heavenly canal. She stopped and shivered halfway down, one hand rubbing her own clit while she felt her body stretch around my invading prod. And after a minute or two, she finally hit bottom and let out a long exhalation of relief, sweat dotting her forehead.\n\n\"Fucking A you're big, Matty,\" Belle groaned.\n\n\"You wouldn't have it any other way.\"\n\n\"Nuh-uh.\"\n\nI smiled and sat upright. With our height differential, we were basically face-to-face as I took her head in my hands and started sweetly kissing her. And neither of us needed to move for a long while as we simply made out with each other like the teenaged lovers we were as if our loins weren't already intimately joined together.\n\nOf course, we didn't stay like that forever. Belle crossed her legs behind my lower back, using her feet and muscles to help propel herself up and down my shaft while I planted my left hand on the mattress to help myself hump up into her hot little body. She rode me to a quick orgasm before I picked her up in my arms and started walking around the room just because I could. She clung to my neck like a little monkey and rabbit-humped herself up and down the whole time. Finally, I sat her on the edge of my desk and hammered the hell out of her until she screamed her joyous release loud enough to wake Mother down the hall. I joined her soon after by pumping her hot little pussy full of wriggling sperm, and remained inside her to plug up the leak while we stayed on the desk making out again like we had all the time in the world.\n\nOf course, we didn't have all the time in the world, and I needed to start getting ready for my day's activities. So after I got about halfway deflated, I finally pulled out of Belle's sodden snatch, and she quickly pulled on her panties to trap my spending inside.\n\nI arched an eyebrow. \"You're not going to scoop it all out?\"\n\nMy impish pixie winked. \"Oh, I wanna feel it leaking out of me all day, and I'm gonna keep dipping my fingers in there to lick up your flavor whenever I find myself missing you for too long.\"\n\nWell of course I had to walk over, picked her up in my arms, and start kissing her again. But finally I had to pull away and get dressed.\n\nI didn't want to be late.\n\n****\n\nI parked the minivan in the driveway at 7:59am and met my \"accomplice\" just outside the front door. She let me in silently, gave me a mysterious smile, and then drove away. The house was otherwise empty.\n\nI made my way up to her room and let myself in as silently as possible. The exquisitely beautiful brunette was still asleep, as expected, her silky locks spread across the pillow behind her, with only her head and shoulders exposed above the blanket. Black spaghetti straps of what appeared to be a slinky negligee were the only things interrupting her porcelain smooth skin, and she looked so angelic in her slumber that I didn't have the heart to wake her.\n\nThat was alright. My early arrival had been intended to ensure my presence before she awoke. With that mission accomplished, I settled onto my knees beside the bed, folding my arms atop the mattress and setting my chin down atop them. I smiled to myself as I drank in her beauty, wanting to memorize this moment forever. She had a hint of a half-smile herself, her expression that of peaceful contentment and serenity. With time to spare, I let myself idly imagine what life would be like waking up next to this gorgeous face every morning, and it was a pleasant thought indeed.\n\nHer cute nose wrinkled, and for a moment I wondered if she could smell my presence. She took in a deep breath, wrinkled her brow, and started mumbling to herself. I couldn't quite make out the words, but I thought I heard her say the word \"Niners\".\n\nA minute later, I was pretty sure she mumbled, \"Jeff Garcia.\"\n\n\"I dunno,\" I muttered impulsively. \"He's CFL material, not NFL.\"\n\nZofi frowned and sighed, \"Depends on whether he and T.O. can get along.\"\n\n\"Maybe. I think I've been spoiled by Joe and Steve. Maybe let him play for a year, but they'd better draft a QB in the later rounds.\"\n\n\"Don't be a hater.\" Zofi's eyelids rose halfway, closed again, and remained down for two seconds before blinking slowly as she took in a deep breath and sighed, \"A true Niners fan has faith.\"\n\nI smiled broadly. \"I have faith, but I think it also pays to be prepared.\"\n\nZofi's bright blue eyes fully opened. She didn't look surprised by my presence, neither happy nor sad, but merely curious. She breathed in and out slowly, her brain still sluggish. But after about a minute of just sort of staring at me, the light of awareness finally came into her eyes as she stated, \"You're in my bedroom, Matty.\"\n\nI grinned and now lifted the bouquet of flowers. \"Good morning, darling. Would you like to go out with me today?\"\n\nZofi's eyes narrowed, and she took several more deep breaths. Eventually, she spoke, \"I think it only really works when I call you 'darling'. You'll have to come up with your own nickname for me.\"\n\nI thought about it briefly and raised the bouquet once more. \"I think I have something.\"\n\n\"Really?\" Zofi asked her interest piqued.\n\n\"Yes, but I'm going to save it for later. Until then, would you please join me for an outing, fair lady?\"\n\n\"Why yes, kind sir. I'd love to,\" she replied, beaming at me from inches away. She gave me a warm, welcoming smile, raised her arm out from under the covers, and reached for me. I leaned in and let her hold my head as I kissed her sweetly.\n\nI grinned and sat back. Setting the flowers atop her desk, I gestured to her closet and asked, \"May I?\"\n\nGiving me a curious look, Zofi nevertheless nodded. I flipped through her hangars for a bit, but when I saw the simple white button-down blouse I immediately knew. I found a nice pleated skirt in pastel blue and a wide belt. Finally, I asked if she had any scarves, and Zofi directed me to a drawer, where I found a small satin scarf with a striped pattern.\n\nI laid the items out across Zofi's bed while she sat up, revealing the rest of her slinky black negligee. With a bit of a wolfish grin, I moved around to sit down in her desk chair and looked at her expectantly. Zofi's eyes went big, and she actually blushed rather cutely. I was a bit surprised that after everything we'd already done together she could actually get embarrassed at the idea of changing clothes in front of me.\n\nTaking a deep breath, she slid off the bed and stood up only two feet away from me. I drank in her slender form, eyes gravitating to the way her big, unfettered breasts dented out the front of her negligee, her erect nipples making their presence known through the sheer material. For a few seconds, she stood there and watched me staring at her. I remembered what she'd said before about having the urge to see the look on my face whenever she did something sexy, and I made sure she knew how much I appreciated this moment. After taking another deep breath, she slowly slipped the spaghetti straps off her shoulders. Her boobs were big enough that the negligee didn't actually drop, getting stuck on her protruding bosom. But when she tugged down on the hem, the black satin finally fell away to puddle around her ankles.\n\nClad only in a pair of sheer bikini cut panties, Zofi posed prettily by flexing on knee and shifting her hips a little. Her cheeks were pink and she pointedly looked away from me, momentarily unable to meet my gaze. I'd seen her naked before, of course, many times. But there was something quite different about stripping down during a \"study break\" with her friends around and posing by herself, unmoving, like a Greek statue, to let my eyes roam all over her perfect, uncovered skin. She breathed heavily while I suddenly found myself wishing to be that Greek sculptor so I could immortalize her forever. But eventually, she broke the spell by turning her head and smiling at the hungry expression on my face.\n\nImpulsively, I reached out and caressed her naked breast. I was tempted, just for a moment, to tackle her onto the bed, yank aside the strap of her panties, and seize her virginity right then and there.",
        "From the way she bit her lip, leaned into my palm, and rubbed her inner thighs together, for a moment, she seemed of the same mind. But then reaching to my chin, she rubbed it gently and murmured, \"Not yet, darling.\" Then she pivoted back to the bed and picked up the white blouse.\n\nStaring at the simple shirt, Zofi frowned and glanced back at me over her shoulder. Setting the shirt back down, she walked over to her closet and returned with a nude-colored bra.\n\nAbashed, I muttered, \"Uh, I didn't forget that on purpose.\"\n\nSmirking, Zofi replied, \"Sure you didn't.\" She put on the bra, then the blouse, pulled up the skirt, and fastened on the belt. Unsure why I wanted the scarf, I stood up to tie it around her neck and then rolled up the short sleeves of her blouse. Finally, I had her put her hair up, and after pronouncing her perfect, I gave her a quick kiss and then invited her out.\n\n\"Where are we going?\" Zofi asked when I walked her out to the minivan.\n\n\"You'll see,\" I replied mysteriously. We climbed in and started the moderately long drive up to the city. Keeping an eye on the clock, I realized we were just a little bit behind schedule and sped up to make up the time. While I refused to give away anything about the day's plans, we happily chatted about everything else for the drive. I asked what she really thought about Jeff Garcia, and as it turned out, she had no memory of talking about the 49ers with me. The first thing she could recall of this morning was her statement that I was in her bedroom.\n\nWe made it into San Francisco and got coffee and pastries from a small bakery I knew. We walked a few blocks together before arriving at Tiffany & Co. a few minutes after 10am, but we didn't go inside yet. When I stopped to eat our breakfast outside the display windows, Zofi laughed, hugged me, and happily continued our conversation while we chatted.\n\nAfter breakfast, we did go inside to look at all the jewelry. Giggling, Zofi told me, \"I think it would be tacky to wear diamonds before I'm forty.\"\n\nI laughed, and we continued out for our walk.\n\nZofi figured out we were recreating Breakfast at Tiffany's when we stopped at the public library. The card catalog didn't exist anymore, but we logged into the library computers and searched for \"Varjak, Paul\". No results.\n\n\"How about 'Nine Lives'?\" Zofi suggested.\n\n\"Worth a shot.\"\n\nI watched her enter in the search and the computer spat out a variety of matches. On a whim, Zofi picked one and we headed into the stacks to try and find it. Amusingly, neither of us realized we didn't actually have a library card valid for the San Francisco Public Library system.\n\n\"Honestly we forgot,\" she apologized to the checkout librarian. \"Cross my heart and kiss my elbow!\"\n\nThe matronly librarian stared at Zofi, not getting the reference. In the end, Zofi applied for and was granted a library card. Only then did we leave, book in hand. I think she may have even read it before returning the book a few weeks later.\n\nOur next stop was the local pharmacy store. We found some plastic masks, but I drew the line at actually shoplifting them.\n\n\"C'mon, don't be chicken!\" Zofi whined.\n\n\"My sense of fun would be severely curtailed if we got caught and hauled off to the local police precinct. They didn't have security cameras in the 60's,\" I explained, pointing to one of the overhead cams that happened to be pointed in our general vicinity.\n\nInstead, I bought a box of Cracker Jack, and Zofi hopped nervously in place just outside the store hoping for a plastic ring inside. Instead, the prize turned out to be a green whistle in the shape of a baseball field. Without a second thought, Zofi popped the whistle into her mouth and blew a shrill shriek that drew the attention of everyone within a hundred yards.\n\nZofi laughed, jumped into my arms, and spun me around. But almost as suddenly as she'd leaped, she dropped her feet and took two steps past me, a frown on her face.\n\n\"What is it?\"\n\n\"I thought I saw...\" She glanced back at me with furrowed eyebrows. \"Nevermind.\"\n\nI simply shrugged.\n\nEventually we ended up in front of the waterfall at Yerba Buena Gardens. Snacking on a pretzel, we got to chatting about life after high school, at which point Zofi started to get a little sad.\n\n\"My whole life has been spent with this group of girls... and one special guy,\" she explained. \"The thought of us going our separate ways in a few months... it's scary.\"\n\n\"I genuinely believe the seven of us will be friends for the rest of our lives,\" I told her.\n\nA melancholy expression on her face, she stared across the garden and shook her head. \"Everyone always says they'll still be friends. But then almost everyone I talk to who's older says they never see their high school buddies. People make new friends wherever they happen to be, whether that's at college or whichever city their new job is.\"\n\n\"Well you never know. I mean, a lot of us are applying to the same Bay Area schools.\"\n\n\"Doesn't mean we'll all get into the same ones. And even if we did, doesn't mean we'd all CHOOSE the same one.\" She sighed. \"What if the best school is somewhere across the country?\"\n\nI frowned at the tone in Zofi's voice. \"Have YOU already chosen a school across the country?\"\n\nShe blinked and glanced back at me. \"You know I flew out to New England with my parents back in September to go look at colleges. Princeton is beautiful.\"\n\n\"Would you go if you got in?\"\n\nShe shrugged. \"I wouldn't have flown all the way out there if I didn't at least consider it.\"\n\nI sighed and felt quite sad inside at the thought of not seeing Zofi anymore. True, the two of us had never been the closest friends within the BTC, but even my sixth-closest friend in the BTC was light-years ahead of everyone outside of it. It was especially saddening given how much closer we'd become recently, even beyond the sex stuff.\n\nExhaling slowly, Zofi picked her head up and shook it slowly. \"Sam did Early Decision and she already got into Stanford. If I get in too, she'll be expecting us to get an apartment near there and be roommates for the next four years. Plus, it's not like I would be settling. Stanford is Stanford.\"\n\n\"Then why don't you sound so sure?\"\n\nI couldn't read Zofi's face right away. She stared off with a model-esque blankness for about a minute. But then with an enigmatic smile, she turned, leaned into me, and gave me a very sweet, very tender kiss.\n\nAt first, I was prepared for something sweet and light, and that she'd pull away a few seconds later the way she'd done throughout the day. But this time she flowed into me, and I wrapped my arms around her automatically. She hummed and pressed even closer, parting my lips with her tongue until we were full-on making out on a park bench. She pivoted to slide sideways into my lap, holding me close while we kissed and kissed and kissed. And only when I felt my lungs screaming for oxygen did she finally disengage and pant for breath herself, grinning goofily.\n\n\"I love you, Matty,\" she stated sincerely, a world of wonder in her eyes. \"I'm not in love with you, not like some of the others. But I cherish our relationship. And other than Sam, if I did leave to go to school all the way across the country, I'd miss you the most.\"\n\nThat took me a little by surprise, but rather than try to put my feelings into words, I simply brushed her hair back behind one ear and murmured, \"I love you, too.\" And then I kissed her again.\n\nEventually, we sat there with our foreheads pressed together, each catching our breath. I realized the moment was getting a little heavier than either of us really wanted, so thinking back to my script for our date, I picked my head up and said brightly, \"Okay, time for each of us to think of something we've never done before and get it accomplished by the end of the day.\"\n\nZofi immediately gave me a skeptical look and asked, \"You mean besides the obvious?\"\n\nI blushed, held up both hands, and stammered, \"I- I- I was going with the scenes from the movie! I didn't mean--\"\n\n\"Relax, darling,\" she cut me off by leaning into me and giving me a sweet kiss. \"We're not there yet, but we will be by tonight.\"\n\nMy heart in my throat, I pulled her close and kissed her again.\n\nImmediately after, Zofi told me she'd never walked through a waterfall before. So after getting me to take off my shoes with her, we hopped into the pond at the base of the falls and splashed around for a little bit. The air was cool and my feet were freezing, but Zofi was having such a good time I felt like I could walk on air.\n\nIt was my turn, and I told her, \"Well, I've never gotten a blowjob next to a waterfall before.\" I gave her an exaggerated overly-hopeful expression.\n\nZofi rolled her eyes and immediately smacked me.\n\nI chuckled and nodded, feeling much better now that the mood wasn't so somber anymore. More seriously, I explained, \"Believe it or not, I've never been inside MOMA before.\" I pointed to the nearby San Francisco Museum of Modern Art and then held up two tickets.\n\n\"Me, neither,\" Zofi replied, wrapping both of her arms around my elbow. \"So that's a 'something I've never done before' for both of us!\"\n\nGesturing with my head, I asked, \"Shall we?\"\n\nShe didn't answer verbally. She just gave me another kiss, sighed happily, and said, \"I really love kissing you, Matty.\"\n\n\"I really love kissing you. And to think this all started when we got caught kissing so long ago.\"\n\nZofi beamed and kissed me again. She was so joyously happy that she bounced on her feet. And with a sudden thought, I slid away from her so that we were no longer pressed together, although I still held her hand in mine.\n\n\"You know, I've never skipped down the sidewalk with a beautiful girl holding my hand.\"\n\nZofi grinned and we started skipping.\n\n****\n\nWhile I enjoyed the museum art, I found myself surreptitiously watching the people who would glance back at me and Zofi. Hanging out with Sam and Naimh, I was used to guys' jaws dropping at the sight of my sex-bomb companions, but the attention Zofi attracted was quite different. There was less of an 'I wanna tap that' look on their faces and more of a 'She's what I always wanted but never knew'. Even other women seemed to appreciate Zofi's soft, feminine beauty.\n\nDinner was at the Cliff House with a spectacular view of the sun setting across the Pacific Ocean. At one point, Zofi stared out the window, the orange and red hues of the sky casting her face in similar colors, and I found myself feeling the same feeling. I was sad it had taken me this long to finally discover more about the girl who had always been nearby and yet so unknown. And now that I was getting to know her better, in another few months she would be taken away, most likely off to Princeton or some other Ivy League school.\n\nI found myself distracted throughout dinner, not keeping up my end of the conversation as well as I should have. Fortunately, the need to eat filled in some of the gaps. But towards the end of the meal, Zofi placed her hand on top of mine and asked, \"Hey, aren't I supposed to be the nervous one?\"\n\nI blinked. \"Huh?\"\n\nShe gave me a look and explained, \"Or maybe it's not nervousness. You're distracted.\"\n\nI furrowed my eyebrows and flipped my hand over so I could hold hers. \"I was just thinking how much I'm going to miss you.\"\n\nShe looked at me sadly, popped her eyebrows, and said, \"I haven't gone anywhere yet. For all you know, the seven of us could still be together next year.\"\n\nI smiled and nodded. \"Who knows?\"\n\nEventually, I paid the check and we got up to return to the minivan. Holding me close, Zofi leaned up to peck my cheek as we walked outside. The air had turned quite chilly, and I escorted her straight to the passenger door, opening it for her. But instead of hopping in immediately, Zofi leaned in, kissed me quickly, and said the words I'd been waiting a long time for.\n\n\"I'm ready, darling.\"\n\n****\n\nIt was still a relatively long drive back. We drove in silence, my mind still occupied by the specter of our unknown future. Zofi tried to break the tension a couple of times, but I wasn't a very good conversation partner and the topics died quickly, thus leaving long stretches of silence between us as I concentrated on the road in front of me illuminated by my headlights.\n\nWe arrived back at her empty house. The gods of serendipity had sent Zofi's parents on their anniversary trip for the weekend. I shut off the engine and turned to my soon-to-be lover, finding that the once elegant, graceful woman who had accompanied me all day had disappeared, replaced by a trembling teenage girl.\n\nI cursed my selfishness. Here I was concerned about losing my friends and I'd abandoned one of them to get lost in her own head just before what was a major milestone in her life - a milestone she'd spent months working up to being emotionally prepared for. The progress of our romantic date had been reversed by my inattention to her needs. I thought of offering to call the whole thing off then and there, and at that moment, she very well might have sent me home.\n\nBut no, she was nervous and I'd been unforgivably negligent of her needs, but I was still confident that this was what Zofi wanted. She trusted me, and sometimes trust means that you have faith that the other person has your best interests at heart when they push you.\n\nI reached over and brushed a strand of hair out of her eye before leaning in for a brief kiss. Pulling back, I told her gently, \"Please wait,\" and exited the vehicle. Walking around to open the passenger door for her, I helped her down and took her by the elbow as I escorted her to her home. Zofi struggled with her keys for a moment, her hand trembling, but let us into the house and we silently walked up the stairs to her bedroom.\n\nBy now, her nervousness was threatening to dissolve into panic, the steps taking on more of gallows' air. I don't know what she thought would happen, perhaps that I would strip her down and take the shivering girl's innocence with little care. But we had all night and if she needed a guide more than a Lothario for these first steps, I wanted to be that man for her.\n\nSo, entering her childhood bedroom with her, I let go of her elbow. She looked down as we turned to each other, but I tilted her chin up gently so she would look me in the eye. I tried to convey with my eyes that she was safe - that we'd get through this together - but when I went to caress her upper arm, she drew back.\n\nThe action surprised Zofi and jolted her out of her near-panic state as she realized that she'd just rejected my touch. I don't know exactly what was going through her head at that very moment, likely some concern for what I might think of her. She'd invited me into her home with the express promise of sex, and now she wouldn't let me touch her. Even strong, confident Zofi, the member of the BTC who I'd come to realize felt most at home in her body and secure in not allowing pressure from the other girls to accelerate her timeline for when she would be ready, would feel like a cock tease if she didn't perform tonight.\n\nObligation wasn't the right frame of mind I wanted her in either, so when she began her humiliated apology with, \"Matty, I--,\" I put a finger to her lips and kissed the top of her head, pulling her into me for a hug.\n\n\"Don't apologize,\" I whispered into her ear. I held her for a moment longer and let go. Stepping back, I saw that Zofi had come back to herself. But while the abject fear appeared to have passed, it was only replaced by awkwardness.\n\n\"What now?\" she asked.\n\nI raised my hands to her neck, and slowly began untying her scarf. \"Now,\" I told her, \"I think I'd like to give my date a massage.\"\n\nZofi swallowed and nodded her assent. My plan was evident to both of us as I took on the role of \"Safe Matty\" to make her again comfortable with my touch. She let me undo the first button in her blouse before stepping back to complete the task herself. In the dim light cast by her desk lamp, the only light she'd turned on, she began disrobing for me. Once her blouse was open from throat to tails, I stepped forward and pulled the two halves apart and off her shoulders myself, and Zofi held her arms back to let gravity slowly pull down the cotton fabric until it fell to the ground of its own accord. As she continued undressing, I briefly left the room to retrieve a few fluffy white towels from the linen closet. When I returned, Zofi had stripped to the bra and bikini-cut panties that had enticed me this morning right here in this room.\n\nOpening one of the towels, I spread it in front of myself and averted my gaze, blocking my view of her body and allowing her a bit of modesty behind my makeshift privacy screen while she unhooked her bra and bent down to step out of her panties. \"Lie face-down across the bed, but with your head at the edge,\" I told her.\n\nShe nodded obediently and took the towel from me, hugging it to her chest as she walked to the bed and lay on her stomach. This allowed me a tantalizing view of her shapely bottom, but only for a moment as I obscured my own view by placing another of the folded fluffy towels over it, leaving her naked back and legs ready for my ministrations.\n\nAt first, she folded her arms beneath her chin, but I gently repositioned her arms back along her sides and tugged her forward until her eyes and nose were over the edge so she could breathe. Pulling the desk chair around, I sat down and began to massage her neck. Once she got the idea, she settled down and moaned as I went to work.\n\nAfter starting on her neck and shoulders, I stripped down to my shorts and undershirt before climbing onto the bed. Straddling her legs just behind Zofi's tight ass I proceeded to do my level best to turn her into a puddle of relaxed goo. I massaged her back, her scalp, her spine, both arms, and even her fingers. I made her so relaxed that she nearly fell asleep.\n\nHer dozing state was disturbed as my hands slid past her butt and down to her legs. When I finished her lower extremities, I found her shaking her tushie in invitation to continue the massage there as well. I removed the towel and kneaded her assflesh for both her pleasure and mine. With implicit permission restored, I let my fingers crawl back up her body to play with the sideboobs spilling out as she lay flat on the bed.\n\nZofi started to turn over, but I had her remain as she was. She was breathing slowly, and her thighs had parted enough for me to catch a glimpse of her gates to heaven from behind. My dick throbbed in my shorts at the vision of naked loveliness beneath me, and I felt the urge to drop my shorts and push myself in right then and there. But I ordered myself to be patient and truly make her first time something special.\n\nTo that end, the sexual subtext of my massage morphed into straight text. I spent more time slowly molesting her exposed genitals as her legs spread further apart in welcome. She shivered, and I thought I might have felt small tremors within as I first dipped my finger into her honeypot in search of lubrication to begin manipulating her clit.\n\n\"Did you just cum, m\u00f3j skarbie?\"\n\n\"Yes, darling,\" she breathed, her voice trembling.\n\nHaving broken through her tension, my own breathing became a little easier and I started prepping her for a proper orgasm. I didn't forget the rest of her body, but time and again I returned to her sex. Lightly, I caressed her and manipulated her to a slow boil.\n\nI paced myself, reading her cues to tease and titillate without quite pushing her over the edge. Along the way, I removed my shirt and shorts, my turgid rod occasionally caressing Zofi at her entrance, teasing that I might make her a woman at any second. Her fear was now buried under a tense desire, although one time when I lined myself up to tease her, she mistook my torment for the real thing and warned me, \"Not yet, darling,\" and I backed away.",
        "Twice, she came close to cumming, and only by withdrawing my touch and clamping down on her legs with my hands did I draw enough sensation away from her crotch that her momentum didn't carry her over the edge on its own.\n\nEventually, I felt her approaching the point of no return. She'd begun humping the bed seeking any stimulation beyond my light caresses and would take herself over the edge soon if I tarried any longer. I might have finished her off with simple cunnilingus, but I didn't have the best angle. What I did have easy access to, however, was that beautiful winking anus. It called to me, the perfect method for bringing her to a screaming boil. Slowly, I leaned in, flattening my tongue in preparation for a lick followed by rigid penetration.\n\nJust as I was about to take my first swipe, a hand blocked my path. Above me, Zofi had turned to her side, almost, but not quite lifting her breasts to full view, suddenly clear-eyed as she cupped her anus protectively.\n\n\"You do that, darling,\" she began, placing hard emphasis on the endearment, \"and I'm not kissing you again until you've brushed your teeth and washed your mouth out. And, no, you can't borrow my toothbrush.\"\n\nI couldn't help but laugh as I apologized. That was a lot of hard work put into one failed almost-orgasm. Regardless, the imperious Zofi staring back at me with a mixture of stern good humor was immediately recognizable as the sophisticated lady I'd spent all day with, so mission accomplished.\n\nZofi's expression softened and she rolled over and stood off the bed to secure her towel in place, treating me to a brief flash of full nudity before sitting back down next to me and leaning her head on my shoulder. \"Thank you, you're being very patient.\"\n\n\"You're worth it, m\u00f3j skarbie.\"\n\n\"That's the second time you've called me that, what does it mean?\"\n\nI raised an eyebrow at her, \"You don't know any Polish?\"\n\nZofi shrugged, \"I was born in California. My parents managed to leave Cold War Poland in the 70s as teenagers. Their memories of their birthplace aren't the happiest. You might have noticed, they assimilated enthusiastically.\" She gestured around her bedroom filled not only with Niners paraphernalia, but also a patriotic red, white, and blue color scheme I hadn't noticed - before a teenage Zofi had begun supplanting it with her own detritus. It also hadn't occurred to me to question how an immigrant had become such a die-hard American football fan, but now it made sense. \"My parents,\" Zofi continued, \"never felt a need to teach me their native language or send me to any Polish schools.\"\n\n\"That's too bad.\"\n\nZofi shrugged. \"I always regretted it a bit, but never enough to study the language on my own. But we're getting off-topic, what does m\u00f3j skirbie mean?\"\n\n\"M\u00f3j skarbie,\" I corrected. \"I'm told it can be translated as 'my darling' or 'my treasure'. I'm rather partial to the latter.\"\n\nShe smiled up at me, \"I like it, darling.\" She rewarded me with a quick kiss, her eyes shining with affection. I leaned back in and kissed her again - not the type of hot kiss that serves as a prelude to passionate sex, but the romantic kind of kiss that served as its own form of lovemaking. Together we explored each other's mouth, sometimes deviating to caress the other's neck or chest before inevitably returning lip-to-lip. The pleasure built inside me -- inside both of us -- from the way the intensity climbed the heat intensified until it almost felt like we were experiencing a simultaneous orgasm without even really touching each other.\n\nWe pulled back, I think both of us a little proud of the reaction we'd gotten out of each other. Zofi breathed deeply and mimed fanning her face. My own heart pounded as I gasped, \"Wow.\"\n\nShe blushed prettily and averted her eyes for the first time in several minutes. It was then that she noticed it. \"Hey, what's this?\" she asked, pointing to an envelope that sat conspicuous in the middle of the desktop.\n\nI leaned back against the wall, a goofy grin on my face. \"I was wondering when you were going to notice that.\"\n\nZofi frowned. \"It wasn't here this morning, I know it.\"\n\nI shrugged, trying to not give anything away.\n\nRetrieving the envelope, Zofi opened it and gasped at the contents. Inside were dozens of 4x6 photographs, and Zofi turned to sit down next to me on the bed while she fished the stack of photos out from the envelope. With a mouth gaping open in surprise, she started going through them one-by-one, lingering on some of them for only a few moments, but up to thirty seconds on others.\n\nAll were long-distance shots taken by someone with a zoom lens on a high-end SLR camera. I knew, because I knew the photographer. Most of the photos were of Zofi, although I was in a couple of the pictures. There were photos in front of Tiffany's at 10am, and one while we were inside the store. There were photos in the library, at the pharmacy store, and outside while Zofi blew on the green whistle.\n\n\"I KNEW someone was watching us!\" Zofi exclaimed when she stopped at the green whistle photo. \"Who was it? No, I already know. There's only one other person who could get a key to my house and let you in this morning, or to drop off the envelope before we got home.\"\n\nI shrugged, again trying to not give anything away.\n\nZofi suddenly clapped her hands over her mouth. \"Roman Holiday! THAT'S the outfit you had me in!\"\n\nI grinned. \"I knew you'd figure out Breakfast at Tiffany's right away so I didn't bother trying to hide it. I wasn't sure if you'd figure out Roman Holiday.\"\n\n\"Holy shit, you guys! Where's Sam? She's not hiding in the closet, is she?\"\n\nI chuckled and shook my head. \"No. At least, I don't think so.\" We both looked around half-expecting Sam to pop out, although she didn't.\n\nZofi smiled and sighed happily. \"Even with her crazy busy schedule, she burned a whole day just to do this for me.\"\n\nI nodded. \"She didn't even hesitate when I asked her to do it. She just said she was happy she could be part of our date. Breakfast at Tiffany's was her idea. Roman Holiday was mine. I wanted to give you something to remember the day. Maybe you can make a collage.\"\n\n\"I look so happy.\"\n\n\"You were.\"\n\nZofi leafed through the remaining photos, from the Yerba Buena garden waterfall to skipping down the sidewalk hand-in-hand. But she paused and looked a little closer at some of the MOMA art museum ones, including one in particular where she was standing by an upper-level window just looking outside. I stood three feet behind her, staring with an expression of wonder as I ignored the world around me, my eyes only on her.\n\nShe was beautiful.\n\nThe next photo was a close-up, the back of my head blurry in the foreground left, and Zofi's exquisite face filled the rest of the frame as she gazed at me with complete adoration. I realized then what was different about the way people were staring at us: When I was out with Sam or Naimh, guys stared with an 'I wanna tap that' expression. But today, all those people had been staring at Zofi AND me, believing they were looking at a couple in love.\n\n\"Do I really look like this?\" she asked demurely, holding up the photo.\n\nI smiled warmly and replied, \"It's how I see you every day.\"\n\nSetting the photos aside, Zofi held both of my cheeks in her hands as she kissed me again. I returned the kiss and held her eyes as I unhooked the corner of towel that was keeping it up. It fell in a puddle around her, and she gently nudged me backwards into the pillows. One long kiss turned into a makeout session. Zofi was in no hurry, but her end goal was now quite clear.\n\nSeeing the light at the end of the tunnel, I rolled us over so that I was on top. Again, my lips left hers to explore other parts of her body, but this time I didn't stop at her neck or chest - I kissed down her body to finish what I'd begun earlier. She opened herself to me as I took long, languid licks along her slit and teased her protruding clit. I pressed two fingers inside her moist velvet pussy and tickled her g-spot. I scratched her ribcage with my fingernails. I traced my thumbs along her underboob. And I even massaged her arms when I pushed her too far and had to calm her back down from the brink.\n\nAnd then it was finally time. She had waited long enough, and the moment had come. I had my tongue wrapped around her clit while sucking powerfully. I had two fingers inside her slit, curling them to scrape my fingertips against her g-spot. She felt me teasing her right up to the precipice of orgasm, and perhaps knew I was going to pull her back from the edge once more. But at last she'd had enough of the teasing, and her hands were suddenly on my head, yanking my hair up by the roots and moaning, \"Now, darling! Now!\"\n\nI scrambled up in a hurry, notching my cockhead into her open petals. Zofi's blue eyes blazed brilliantly as she stared straight at my face, wanting to memorize the way I looked at her as I entered her body for the first time.\n\n\"Now, darling, please!\" she crooned, gripping my forearms where my hands were planted to either side of her head. And then she gasped, her mouth gaping wide open as she felt her virgin pussy being slowly filled with my dick for the very first time.\n\nZofi shuddered abruptly, a jerk that nearly dislodged me since I only had the first two inches in. But then smoothly, I pushed forward until I was buried all the way in to the hilt. And then... only then... I felt her orgasm begin as a small ripple deep within the very center of her being.\n\nOne ripple became two. Two ripples became four, and then eight, and then sixteen, and by then the escalation was inevitable. Like a low rumbling timpani drumroll, her orgasm built in a crescendo from deep within until her hips and shoulders started shaking, then her knees and elbows, finally her feet and hands, and at last it erupted out from her gaping mouth.\n\n\"AAAAAAAAAAAAAUUUUUUUUUUUUGGGGGGHHHHHHHHHH!!!!!!!\" Zofi screamed.\n\n\"AAAAAAAAAAAAAUUUUUUUUUUUUGGGGGGHHHHHHHHHH!!!!!!!\" she screamed again.\n\n\"AAAAAAAAAAAAAUUUUUUUUUUUUGGGGGGHHHHHHHHHH!!!!!!!\" I was surprised the neighbors didn't call 911.\n\nZofi's world ended. Everything about her exploded outward like a supernova until nothing was left but a tiny pebble at her center.\n\nAnd for a little while, the universe was filled with light.\n\n****\n\nWhen the light faded away and her world began anew, Zofi blinked her eyes open to find me kissing her softly. Her arms held me close, our naked bodies pressed chest to chest. She clutched my shoulders, breathing deeply and still trembling as she fought to recover from the greatest orgasm of her life.\n\n\"Matty?\" she rasped, her voice cracking.\n\n\"Welcome back to Earth, m\u00f3j skarbie,\" I greeted with a smile.\n\n\"Wha--? What happened?\"\n\nI chuckled. \"I think you came.\"\n\nZofi blinked up at me as her brain rebooted, trying to assimilate memories of the past two minutes of ecstasy beyond anything she'd experienced. \"I don't... I...\" Closing her eyes, she concentrated before groaning, \"I'm so fucking FULL.\"\n\nI chuckled again. \"Yeah. Can't imagine why,\" I deadpanned.\n\nZofi clenched her inner muscles around my cock, muttering, \"So this is what all the fuss is about.\"\n\n\"Yep.\"\n\nShe shook her head like I didn't understand. \"Sam's pushed dildoes in there before. She popped my cherry last year. But this is so... different... especially holding you on top of me. It feels... intimate. Like a warm hug, but... on the inside.\" She hugged me with her pussy muscles again for emphasis.\n\nI hugged her back with all four limbs.\n\nLooking up at me, Zofi searched my eyes with her bright blue ones. \"I remember you pushing in, but after that the memories get a bit fuzzy,\" she said with a frown.\n\n\"Well you started cumming pretty hard. Here...\" I pulled myself all the way out, feeling her tight pussy walls squeezing me the entire way. Her labia partially closed again after my exit, not yet used to being stretched in this manner. So re-entry was almost the same as the initial push, having to slowly pry apart her pink walls and burrow deep inside.\n\n\"Oooh,\" Zofi sighed, as inch after inch of Matty cock penetrated her virgin canal. \"Do that again.\"\n\nSo I did it again. And again. And again.\n\nBy the fourth repetition, I no longer pulled all the way out, withdrawing until my mushroom head was still inside and then smoothly driving back in deep. Zofi stared at my face the whole time, concentrated on the expressions on my face and the way I looked at her, my enjoyment of her body quite obvious.\n\nWe started making out again. For a relationship that had started years ago with an illicit makeout session that prompted the creation of The Rule, we had come full circle, passionately Frenching but now as a part of making love. Zofi moaned beneath me, stroking my shoulders and caressing my cheeks in between kisses. And all the while I continued to pump myself back and forth through her tight tunnel, the pleasure amplifying the emotions we felt for each other.\n\nAt one point, I braced my forehead against the side of the mattress beside her. She clutched me close and listened to me grunting as I repeatedly fucked her nubile body. Apart from those first two minutes of going completely out of her mind, she was a quiet lover, whimpering softly and moaning but not screaming nor shouting obscenities for me to fuck her harder. Instead, she repeated over and over again, \"Darling... darling... darling...\"\n\nThe nickname kept me grounded. Every time the urge to grab her and fuck the shit out of her welled up inside me, her whimpered \"darling\" reminded me to be tender. I wrapped up her thin body in my arms, squeezing her tightly while our bodies sinuously writhed together in harmony. She intertwined her long, lithe legs around mine so that our ankles were hooked together. I used my leg muscles to help me drive myself into her, and she kissed my neck and whimpered her pleasure all the while.\n\nDesperate to make her cum again, I slipped a leg between hers and started grinding down on her clit as if we were tribbing (albeit with my dick in her cunt), and that's when Zofi really came alive. She started fucking back at me, grabbing my ass and practically masturbating herself with my pelvic bone. Her moans increased in volume and she started kissing me a little more ferociously. And when her next climax arrived, her inner muscles squeezing and hugging my cock so intimately inside her, she crooned into my ear, \"You're making me cum, darling! You're making me cum!\"\n\nHer words drove me to drive into her even harder.\n\nEventually, Zofi kicked her leg over so that we were now in a spooning position. Our feet were still tangled to help us lock together, and I wrapped an arm around to palm her breast for leverage while I pounded away at her firm little rump. My cock pistoned smoothly in and out of her still-tight pussy, and as I felt the tingle in my balls, I groaned, \"I'm gonna cum, Zofi. I'm gonna cum in your virgin pussy.\"\n\n\"Yessss...\" she hissed. \"Cum in me, darling. Fill me with your seed.\"\n\n\"I'm gonna cum! I'm gonna fill you!\"\n\n\"Fill me! Flood my womb and fill me! Cum, darling, cum!\"\n\n\"Nnnnnggaaaahhh!!!\" I groaned as I felt my balls come to a boil. Wrapping both arms around her bosom, I pinned Zofi against my chest and slammed my hips forward one final time. Over and over again, I spurted great gobs of sperm into the exquisite brunette's beautiful body.\n\nAnd all the while she moaned, \"Cum in me, darling! Cum, darling, cummmm!!!\"\n\nSo I came.\n\nAnd then we rested.\n\n****\n\nMy \"girlfriend\" and I stayed spooned together for a long while, both of us awash in the afterglow. I was coming down from blowing my brains out through my penis, and she was lost in thought while slowly rubbing her clit and scratching the base of my cock where it protruded out from her. The ticklish sensation of her manicured fingernails was enough to keep me hard a little longer than usual, but eventually my cock shrank and I slipped out.\n\nZofi glanced down at the trickle of cream oozing out of her and grinned. \"Too bad Sam isn't here to suck out my first creampie.\"\n\nI groaned. \"That can be arranged for next time if you're interested.\"\n\nInstead, Zofi scooped out a thick glob on her fingertips and held them up so I could see her digits glistening in the angled light coming from the desk lamp. Then she popped them into her mouth, sucking my semen with relish while delighting in the look on my face.\n\nShe repeated the maneuver once more, but with diminishing returns from my expressions, she stopped after that and got up to grab a few tissues. After blotting up the rest of my spending, she tossed the tissues in the trash and reached over to her desk to retrieve her little digital camera, the same one she'd brought to Tahoe. Handing me the camera, she asked me to take pictures of her.\n\nI arched an eyebrow. \"You sure? You're the one who said 'maybe a polaroid, not digital'.\"\n\n\"I'm sure. I wanna remember everything about today.\" Zofi grinned. \"Maybe I can show my mom a photo of your cum leaking out of me.\"\n\nI shot her a look.\n\nZofi laughed, saying, \"I'm kidding, I'm kidding.\"\n\n\"Maybe you should just hang your bloody bedsheets out the window like a flag,\" I drawled.\n\n\"Well maybe if I still had a hymen. I suppose I could let your spunk leak out into my panties and then leave them somewhere she'll find them.\"\n\n\"Zo-fi.\"\n\n\"Fine, fine. I'll think of something less vulgar.\"\n\nI sighed.\n\n\"C'mon. Picture time.\"\n\nI held up the camera. \"Just remember, I'm an amateur at this.\"\n\n\"How hard can it be? I look pretty, you click the button.\"\n\nI chuckled. \"Well when you put it that way.\"\n\nOne thing I definitely like about digital is that you can delete bad photos. Out of habit from a film camera, I kept waiting and waiting trying to get the perfect shot, and Zofi had to keep reminding me to just keep snapping and she'd delete them later.\n\nI was trying to keep things tasteful -- more Playboy and less Penthouse, if you know what I mean. Zofi made it really easy. She seemed incapable of looking trashy. One of my favorites had her reclining on her left side propped up with a pillow and her left elbow. She kept her head erect, silky dark hair draped over her right eye and right shoulder. Two fingers of her right hand covered her nipple while the left nipple was obscured by the pillow. And the bedsheets were bunched up between her thighs just enough to cover her pussy.\n\nMost shots were like that. I artfully covered her with the bedsheets or pillows. I had her adjust her arm positions and hands, and she could cross her legs to cover her crotch. Of course, her nipples and pussy couldn't be obscured in every shot. Sometimes she was half-covered, sometimes not, but never really lewd. There were some photos I would personally keep in my mental spank bank, and in a few of them, you could even see my cum leaking out of her pussy if you looked hard enough. I actually didn't see that myself the first night. But Zofi let the BTC see the photos later on, and Belle pointed it out to me.\n\nEven in hindsight, looking back at the photos days after they were taken, I was struck by how relaxed and content Zofi looked. I've often described her as \"model-esque\" or various versions of that to express her beauty and figure, but she really was a natural model. She was so relaxed in front of the camera, pleased to be part of the process. She had her insecurities like so many other girls her age, and yet was completely at ease showing off the beauty of her own form even sans clothing.\n\nThe two of us had loaded the pictures onto her computer and gone through them on the big screen instead of the tiny display on the back of her camera. Staring at shot after erotically-charged shot of Zofi's gorgeous naked body had me pretty hard again, and once we finished I was eager to start a fresh makeout session. But Zofi broke away and said, \"Sam told me we just HAD to try it in the shower.\"",
        "We did. Zofi is REALLY flexible - have I ever told you that? She was able to brace herself with one hand against the wall and do a full vertical split with one foot straight up in the air, like a true ballerina. It made entry quite easy, and I fucked the hell out of her that way. This time, she wanted to me to cum in her mouth as not to leak anything out overnight. I was happy to see her exquisite face sucking my schlong beneath the shower's spray as she swallowed every last drop of my sperm.\n\nFinally, we crawled into Zofi's bed and spooned together, happily sated and clean. She'd even let me borrow her toothbrush. As I kissed the back of her neck and fondled her naked breast, I realized I'd finally had a first time with one of the girls that hadn't been a disaster.\n\nSam taking my virginity had been an ill-thought impulse that lasted only seventeen seconds and involved quite a lot of crying. Belle's deflowering had ended in abject misery and resulted in her walking funny for a week. Oh yeah, and more crying. Mari's date had gone comically wrong in the beginning, although it ended pretty well (tearful confession notwithstanding). And my first time with Naimh had resulted in Alice storming out and leaving the BTC for a month.\n\nBut today?\n\nToday had been AMAZING.\n\nFlush with that afterglow, I turned Zofi so she could pillow her head on my chest and asked, \"How are you feeling?\"\n\nWith a serene smile of utter contentment, she looked up at me with large, liquid blue eyes. Rubbing my chest, she murmured, \"I've realized two things.\"\n\nI wasn't expecting an answer like that, and I glanced down at her. \"What do you mean?\"\n\nTaking a deep breath, she furrowed her eyebrows and stated evenly, \"I'm going to Princeton if I get in.\"\n\nHer words were like a hammer to my heart. I was surprised to feel it hit me that hard. I'd long known the BTC would more than likely break up eventually, but Zofi's pronouncement was the first confirmation from one of the girls that they would move away. I mean, she hadn't gotten in yet or anything, but I knew how smart she was, and she was a legacy applicant through her father, so the odds were good. I wasn't in love with Zofi or anything, but I did love her. And to realize that this very dear young woman with whom I'd shared such a special day would be leaving...\n\nI mean, in all likelihood, Zofi would be drifting out of my life in just a few short months. I would MISS her. And I resolved to get a copy of that one close-up photo from the museum, the one with her looking at me with complete adoration.\n\nI swallowed to fight back the emotions rising up my throat, and blinked away the moisture forming in my eyes. Taking a deep breath, I asked, \"What's the second thing you realized?\"\n\nZofi tilted her head up to search my eyes. And in a quiet but quietly certain voice, she stated seriously, \"If you're willing, I want to have your baby.\""
    ],
    "authorname": "bluedragonauthor",
    "tags": [
        "virgin",
        "first time",
        "18-year-old",
        "teenagers",
        "anal sex",
        "harem",
        "busty",
        "high school",
        "romantic",
        "audrey hepburn"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/the-big-tits-club-ch-29-30"
}
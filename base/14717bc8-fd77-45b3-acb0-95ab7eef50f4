{
    "title": "Foot Fetish Fridays Ch. 02",
    "pages": [
        "On Monday morning, as I went to work, I was curious as to how AJ would react. We had a great date, I had indulged his strong foot fetish, but after I had taken his virginity, I was worried he might expect too much. Even though he was at least ten years older than my 22 years, I didn't want him to be clingy. I knew that I still loved having him at my feet and wanted to continue that teasing dominance over him. He was very sweet and I knew it would make both of us happy. I was aroused with the control I had over this shy man. \n\nI was wearing my pleated plaid skirt, along with my knee high brown leather buckle boots overtop nude hose. I knew AJ loved the nylons so I was going to do anything in my power to drive him wild. My outfit was topped off with a tight, low cut blouse with a stylish half jacket. Because I was running late, I sat my purse down at my desk, hurried to the bathroom to put my hair in a messy bun and touched up my lipstick. \n\nThe morning went on as usual and AJ was busy helping with some tech problems in another department. The first time I saw him was just before lunch as he walked past my desk with his head down. I thought we were way past the point of being shy but I also knew he was that way by nature and I liked to play off that. \n\nI wasn't going to allow him to get away from facing me that easily as I quickly perked up, \"Hi AJ. How was your weekend?\" Before seductively giggling under my breath at my own rhetorical question. \n\nHe snapped a quick, \"Fine,\" before scampering past me. I had an idea, I knew he would have to come back through so I quickly slipped off my boot, pretending to have an itch on my nylon clad foot. As I slowly and gently scratched, careful not to put a run in my hose, AJ returned but this time he slowed down and watched my actions. \n\nI then blurted out as I raised my foot and wiggled my toes in the cool air, \"Oh, I see. Now you stop to say hi. You like what you see? I'm wearing pantyhose and my feet are looking very cute today.\"\n\nAJ looked horrified as two cute coworkers, Starla and Tina looked up at us after I had made the comment. It was the first time I had exposed his foot fetish in front of the other girls and I could see a wry confusion on their faces. AJ's face turned bright red, he looked at me and then put his head down and stormed out. I felt a little bad for him but I needed to show him who was boss but I also knew it was driving him wild. \n\nStarla had been working at the office about the same time as me. Her hair was long and was what I would call a light auburn color. Her cheeks were full and she had a very cute smile. She looked like the \"girl next door,\" with her good looks. Starla was built like me with her 120 pound frame but Tina was a little shorter and more curvy. We would always joke that her big boobs and bubble ass made her look voluptuous. Tina's hair was more blonde than mine and she had the most amazing green eyes. She was very outspoken and was one to never pass on a dare. \n\nOnce AJ had walked past, Tina first looked at Starla, then back at me before asking, \"What in the world was that all about?\" \n\n\"Girls, follow me to the bathroom and I will tell you,\" I responded trying to keep my voice down.\n\nOnce we entered, I looked around to see if anyone was in the stalls before whispering, \"It seems as though our tech guy has a pretty strong foot fetish.\" \n\nStarla smiled in her shy manner, \"How do you know that?\" \n\nI continued, \"I caught him...well...how can I say this...in a compromising position the other day and I have been having so much fun with him ever since. I have been staying late every Friday so we can play.\"\n\nTina interrupted, \"Fun? What do you mean?\" \n\n\"You know how shy AJ is, don't you? Shoot, he barely speaks when he is fixing our computers. The guy is so introverted but went out on a date this past weekend. He took me to a hotel,\" I divulged with a wink.\n\nTina's eyes widened, \"Really? What did you guys do?\" \n\nI giggled, \"Let's just say, our sweet, innocent AJ is no longer very innocent.\" \n\nStarla chimed in, \"Did you guys...do it?\" \n\nI smiled, \"Yes and he was so sweet. I showed him a thing or two and you know he was actually very good. I couldn't believe how he knew his stuff when it comes to making love. I think once I involved my feet, his lust and passion skyrocketed and he just went to town. He came so much for me and he stayed so hard!\" \n\nTina showed that mischievous grin, \"Wow! Who would have thought he comes out of his shell by girls' feet.\"\n\nI added, \"Well, not just feet. He loves to be seduced by them. He is very particular but if you take control and expose his fetish, he is putty in your hands. He claims he can cum at least seven times in one session by just the smell alone. I would have to see that, to believe it.\" \n\nTina asked, \"Really? Just from a foot fetish?\" \n\n\"Don't get me wrong, he loves all cute, pretty feet but if you dress them up perfectly, he will melt. He loves tan or nude hose, he loves boots but he really loses his mind if your feet are nice and musky,\" I informed the two listening girls. \n\nTina bluntly asked, \"Musky, what the hell does musky mean?\"\n\nI chuckled, \"Musky is a tactful term for a strong aroma, not necessarily stinking but in that ballpark. He gets off if your feet have been trapping that pungent musky smell. If he smells them, he will shoot his load high in the air.\" \n\nTina looked at Starla and waved her hand in front of her face, \"Well honey, he will love you then. When you take those boots off, we all know it. He can get all the musky aroma he craves.\" \n\nTina leaned in like we were in a football huddle, \"I want in on this action. You can't hog him all to yourself.\" She then looked at Starla, \"What do you think? You ready to show a little dominance and get that shyness out?\" \n\nStarla squinted her eyes, \"I don't know. He is so sweet and shy. Why do that to him? I don't want to upset him.\" \n\nI jumped in, \"Girl, you will not upset him. For AJ, it's like he is torn. He just wants to scream on the inside from the teasing but he also loves it. It's hard to explain. He feels trapped in the fact he loves it so much but yet he can't get close enough, so therefore he wants to lash out internally. I say, let's fan the flame of that desire.\"\n\nBoth girls had an amazed look in their eyes before Tina spoke for both of them, \"Really. I had no idea. It seems as though our little shy IT guy has a different side. I think this could be very, very fun. Starla, are you in?\"\n\nStarla was still hesitant but then relinquished, \"You know he is cute. It could be fun.\" \n\nTina's mind was thinking, \"So Britt, what are some of the things you have been doing to the poor guy?\" \n\n\"Whatever comes to mind that day. I plan what I'm going to wear but when it comes to teasing, I just know I love making him worship my feet. I let him know his place and where he belongs. I bring out the belief in him that he was put on this earth to serve at women's' feet and he loves it,\" I informed. \n\nI continued, \"Once you have him hypnotized by your feet, then you can play with his meaty uncut cock. His foreskin is thick and I love it. And let me tell you, I have never had a lover leak more precum than AJ. He is like a faucet and it has this sweet taste to it. I can't get enough of it. If you wear nylons and get your feet really sweaty, he could fill up a cup with it.\" \n\nThe girls stepped back and that even made Starla gasp, \"Oh wow. I have to see this. I'm definitely in.\" \n\nI added, \"There is one last thing I want to tell you. AJ is really sensitive. He likes to be dominated and humiliated but not in a demeaning way. I call it a sincere humiliation and not a humiliation like you are laughing or thinking he is a joke because he isn't. The type of humiliation I'm referring to is how you control him with your feet and how you speak to him. Do not make him feel you are doing this to belittle because then you shouldn't do it.\" \n\nTina chimed in, \"You know us better than that. We would never hurt someone's feelings.\" \n\nI looked at both girls like we were devising a game plan and asked, \"Friday, wear what you think your feet will smell the strongest after wearing them. We all have that one pair of shoes that does it and you know what I'm talking about. Are you ready? Then let's have some fun!\" \n\nAll week we teased AJ with our feet. You name it, we did it. Shoe dangling, shoe fall off, wearing no shoes at all, and me rubbing Tina's feet in front of him among others. We had no shame but our plan was to excite and build him up all week long and I think it worked. \n\nThat Friday, I was wearing my sexy pinstripe outfit with a pair of strappy lace up heels. My toes were freshly painted red and looking sharp. I was the first of us three girls to arrive and when Starla walked in, she had this big smile across her face. \n\nShe held her leg out at my desk and showed me she was wearing shimmering tan hose with a pair of blingy Ugg boots and a mauve skirt, \"Lookie what I found in the back of my drawer,\" referring to the hose. \"I used to wear these when I was on the dance team in high school. I can't believe I still have them. Even when they are washed, that smell is embedded inside the feet. I remember what you were telling me about AJ and he will go nuts over these because these boots make my feet sweat more than any shoes I own. As a matter of fact, they're sweating right now and it's only 8:30 in the morning!\" \n\nI chuckled, \"You got that right girl! He is going to flip out. What until Tina shows up and we can get a plan together.\" \n\nAbout 10 minutes later, Tina walked in wearing a very fashionable dark professional pant suit with nude hose and slip on flats when she said, \"Good morning everyone.\" \n\nBefore sitting her things down at her desk, she leaned in and whispered to me, \"Is AJ here yet? Is everything a go?\" \n\nI giggled, \"Of course, look,\" I said as I lifted up my leg and pointed my toe in her direction.\n\nTina had a confused look on her face when she asked, \"Wait a minute. I thought you said AJ loves hose. Why aren't you wearing any?\"\n\nI smiled, \"Because he also likes musky feet. You see these shoes? They have a leather pad for footing and my feet sweat and stick to these and create strong smell. I want him to know it when he gets a whiff of these.\" \n\nTina laughed, \"I see. Well I chose these flats and these knee highs because my feet get just as bad in these. One day last year, I had to walk in the rain and they got soaked. Ever since then, they make my feet stink.\" She then looked over at Starla and she smiled while holding her Ugg boot covered feet straight out as if to show us she was ready as well.\n\nWe had a plan. Shy AJ was going to get the surprise of his life and he didn't even know it. About 5 minutes later, he walked in with his head down but as he walked by, his head began to turn and follow Starla's feet and almost bumped into another coworker. From a side angle, I watched the entire scene unfold and Tina looked at me and smiled. \n\nI yelled out, \"AJ! Starla has been having trouble with her computer. Would you mind taking a look real quick? Her email has been blocking some messages. I'm sure it won't take a minute.\"\n\nHe looked up with those puppy dog eyes and responded, \"Sure. Let me see. I can fix it right up for you.\"\n\nI knew he wouldn't turn down an opportunity to get close to her feet. Starla stood up and AJ replaced her in her chair. After a couple of clicks he was looking for something. Tina glanced at me, gave me an evil grin and rolled her chair to the opposite side of Starla's desk. Using her left foot, she slipped the shoe off her right one. Lifted her nylon covered foot and placed it directly on AJ's crotch. \n\nI had a great view as my mouth opened when AJ's eyes widened as big as saucers. Tina was bold and she was going to see AJ's reaction. The clicking stopped and he kind of swallowed under his breath. I could see her toes wiggle on his bulge. If he could have seen that hosed foot working its magic, he would have cum in his pants right then and there. \n\nWhen Tina began moving her entire foot up and down on his crotch, he clicked two more times and quickly jumped up and said to Starla, \"I don't see anything wrong. I think everything is working properly.\"\n\nTina snickered, \"I'll say. It definitely felt like everything was working properly.\" \n\nAJ scurried to his office. We all huddled when Tina whispered, \"Oh my god! His cock was soooo hard.\" \n\n\"Didn't I tell you? If he hadn't jumped up, there would have been a mess in his pants but we want to save that don't we?\" I rhetorically asked.\n\nStarla chimed in, \"Now I want to feel it.\"\n\nI reminded her, \"At lunch you will get your chance. We all will.\" \n\nAs the morning hours continued, we knew that AJ liked to find a quiet spot in the warehouse to eat his lunch because he knew if he stayed in his office, he would be interrupted several times with technical problems. There was a little place back in the left side corner behind some stocked clothing hanging in a long row. Back there was a small stool and tiny round table where he would eat and check things on his phone. \n\nSure enough, at noon, there he went down the steps, headed to the basement warehouse. I group texted the girls that it was almost time. \n\nStarla's text came back, \"R U sure this will work? My feet are soaked in sweat. He won't find it gross?\" \n\nI gave the thumbs up emoji and assured her, \"Trust me. That is a GOOD thing!\" \n\nWe three girls headed down stairs with me leading the way. We arrived in the corner and AJ was sitting there about to open his wrapped sandwich. He was slightly startled when we whipped the racked line of clothing out of the way in a peek-a-boo manner. \n\nTina seductively cooed, \"Whatcha doin, there AJ? You eating lunch?\"\n\nI chimed in, \"I think he is eating the wrong thing.\" I lifted my leg up and placed my open toed high heel covered foot on the small table, then added, \"I think this is what you really want. Starla, would you agree?\" \n\nJust a resounding, \"Umm hummm,\" escaped Starla's lips. \n\nI grabbed AJ by the face and planted a long, slow open mouthed kiss on his lips, not forgetting to probe the inside of his mouth with my tongue. Tina and Starla, each took one arm and helped him out of the chair while we kissed. As soon as I had stopped sucking his face, they both led him down on the floor. Tina was unbuckling his pants while Starla and I pulled on his pant legs until they slid off exposing his boxers, which had a tent pitched in them by now.\n\nI giggled, \"Let's take these off. You need to let that thing breathe.\" \n\nAs we pulled his boxers down, his hard thick cock snapped against his belly with a loud thud. AJ's cock was about 6 inches long but since it was uncut, it had thick, meaty foreskin surrounding the shaft. The head was already sticking out like a turtle coming out of its shell. \n\nTina said, \"Wow, look at all that foreskin. It looks like a fat cock wrapped with salami.\" \n\nI kicked off my high heel then put my musky bare foot in AJ's face and rubbed it all around. He groaned in pleasure. When I put it on his mouth and under his nose, he shivered as the first sign of precum leakage become evident. \n\nStarla spoke up and commented like she had spotted a lost object, \"Look he is leaking already!\"\n\nI smiled, \"You haven't seen anything yet. He leaks like a dripping faucet when he smells feet.\"\n\nTina had already kicked off both her flats when she added, \"Well I guess he needs a little more then.\" \n\nShe lifted her nylon covered foot on his face beside mine. We were rubbing and he was inhaling deeply. The little space in the basement was already starting to smell of stale feet and I knew AJ was loving every second of it. Every time one of us would put the bottom of our feet under his nose, another glob of precum would ooze down his head and coagulate inside his foreskin before running slowly down his veiny shaft. \n\nI gave him his order, \"AJ, I know Tina's feet are really sweaty and smell really strong but I think it's time you start licking them. They need cleaned so I want you to clean her nylons up for her. Ok, baby?\" \n\nAJ was speechless but he gladly started licking Tina's feet and even sucked her big toe through the nylon just before I stooped down ready to feast on his sweet nectar. \n\nStarla asked, \"Can he smell mine now? Mine are stronger than both of you girls.\" \n\n\"No not yet,\" I responded. \"You come down here with me and taste this delicious fluid. Tina, you make sure he keeps smelling your feet so he can give us plenty.\" \n\nStarla knelt down with me and I took hold of AJ's cock and pointed it upward. It was now looking like a melting ice cream cone. I took my tongue and stuck the tip just under the head and inside his foreskin. I slurped it out. Starla leaned in and her cheek was touching mine as she slurped the other side.\n\nStarla looked up with a long string of precum hanging down from the tip of her tongue and I smiled before I caught it in my mouth, following the trail up to her tongue before sucking the end of it. We actually French kissed for a moment before our heads went back down. Both of us were gently chewing and nipping at his fleshy sheeth. We moaned as we would lightly bite it before slurping up that sweet precum. He must have eaten lots of fruit because of how sweet it tasted. \n\nI turned my head to Starla, \"Take off your boots.\" \n\nShe sat back and pulled them off and right away I could smell her hosed feet with the worn stains on the bottom and within seconds Tina could smell them from a standing position. \n\nTina waved her hand in front of her face, \"Wow Starla! Your feet stink! Look at AJ, he is smiling. He is in heaven!\" \n\nI instructed Starla, \"Stand up but don't put your feet in his face until I tell you to. Understand? I mean it. When I say now, put your foot in his face and let him smell how pungent your foot is from being trapped in those boots all morning.\" \n\nTina was still rubbing AJ's cheeks with her feet and I wrapped my mouth around his purple head that had completely sprung free from its meat home. I started sucking his dick and I could already feel the twitches. I knew it wouldn't be long. \n\nI looked up and gave Starla her final command, \"As soon as I go back to sucking his dick, I want you to count to five and then give him that foot. Let him inhale it deeply. Got it?\" \n\nHolding up my finger as to say wait, I went back to sucking AJ's cock. I was bobbing up and down when I pointed to Starla, she began her silent count. I was ready and knew what was going to happen. I was sucking and trying to count silently along with her. Just then Starla lifted her overly musky hosed foot and placed it on AJ's nostril openings. \n\nSimultaneously, I heard a loud, AAAGHHHHHHH!\" and his cum shot hit the back of my throat like a bullet. I could actually hear him sniffing and his cock kept spurting and spurting. I was amazed by how much cum he produced. We could all smell Starla's feet but it was like fuel to AJ's sexual fire. \n\nFinally when AJ had stopped unloading in my mouth, I pulled up, tilted my head back and showed the girls how much slime he had actually released. \n\nStarla giggled, \"Oh wow, I can't believe my stinky feet caused all that. That is a lot of cum!\" She then looked down at AJ, \"You really love stinky feet, don't ya sweetie? Who would have thought they would have ever been good for something.\" \n\nAJ could only shake his head yes because Tina was now sitting in his stool above him and rubbing both her strong nude nylon clad feet on his face. \n\nStarla then noticed AJ's cock was just as hard even after he blew his first load. I swallowed his thick cum and it was definitely more than any guy I had ever sucked off. \n\nI stood up and took off my pants and panties before telling Starla to switch places with Tina. Starla sat down above AJ and put her feet in his face while I sat down on his hard cock, guiding it in my pussy as I descended. ",
        "I began to bounce up and down on it while I started in on my dirty talk with him, \"Oh AJ, can you smell those strong feet? I can smell them all the way up here. You like that, don't you baby. Those feet have been sweating and trapped in those furry Ugg boots all morning. How can you stand the smell? Shoo wee!\" \n\nI was riding so hard that my ass was bouncing off his balls. He couldn't talk with a mouth full of one of Starla's feet and his nose covered with the other one. Heck, he could hardly breathe. AJ hadn't lost any stamina. I was building to my own orgasm. Soon after, I cried out, \"Ohhhhhhh, Yesssssss!\" as my pussy clenched and spasmed around his hard on. Just as I finished, AJ let out a stifled grunt and began shooting his second load up me. It felt so warm and nice inside my pussy. \n\nTina and Starla were impressed, \"I have never seen a guy cum twice that quickly. Oh, my!\" Tina said in a stunned fashion.\n\nI giggled, \"That's nothing. He just came inside me and guess what? He's still hard!\" \n\n\"No way!\" Starla gasped. \n\nI smiled, \"We are going to see how many times we can make him cum so we might as well tell the boss we are taking a power lunch.\" \n\nI stood up and AJ's sperm was already starting to drip out of me and run down my inner thigh. Starla had pulled her feet out of his face and he was just lying there on his back with the three off us staring down at him. \n\nThe quiet Starla said, \"My turn.\" \n\nWhen Starla lifted up her skirt, we were surprised she was just wearing the pantyhose without panties and we could see the outline of her pussy lips trapped inside the tan nylon. I commanded AJ to get up on his knees. After he followed my instructions, I flipped Starla's skirt up after I also instructed her to get on her knees as well. Her pantyhose were so old, they were slightly dry rotted so it was no trouble for me to tear a slight hole just behind her crotch. I could see AJ's eyes widen and the excitement was evident across his face. \n\nI verbally led the action, \"AJ, I want you to fuck Starla doggie style while she wears her hose and Tina, slide that stool over here so he can smell your feet while he does it. AJ, prepare to mount!\" \n\nAs soon as AJ heard that, his cock actually made a twitch and began to leak once again. Starla giggled and slid her nylon clad ass back toward AJ and wiggled it like a dog waiting to be bred. He scooted forward and slipped his cock inside her wet slit through the torn opening. While holding her hips at first, he began thrusting really slow. He wanted to see her ass even more so he flipped the skirt up where it rested on her lower back. \n\nWhen Tina had the chair in place, she sat down, pointed her feet right under AJ's nose. It gave him a burst of energy and he slipped his hands off Starla's hips, down to her legs, down to her ankles, then he held her upside down feet in his hands. I was watching and rubbing my clit and soon Tina followed suit. We also would alternate slipping our fingers inside ourselves. AJ was now pumping Starla very strongly while he grunted and she moaned with every thrust. I could see his thumbs rubbing the bottoms of her hosed feet. The smell of Tina's feet were getting AJ worked up. He was an animal! He was a jackhammer! The slapping sound was also ringing in the air. \n\nAJ gave a throaty, \"Oh fuck! I'm gonna cum. Starla baby, I'm gonna fill you up. Are you ready?\" \n\nStarla turned her head to look back at the now out of breath AJ and gave him permission, \"Do it baby! Squirt in me. If you shoot in me hard, I promise I will let you smell my feet for hours!\" \n\nJust then, AJ let loose a growl that sounded bearlike, \"Aaaghhhhh! There it is! Your pussy feels soooooo goooood!\" \n\nAJ had just shot his third load but I was determined it would not be his last. He was shivering his post orgasm comedown while staying inside Starla. She crawled away from him, only to see his seed plop to the floor. Tina and I couldn't believe he still had that much built up sperm in his balls. He sat down with a bit of sweat across his forehead.\n\nTina stood up and then sat on the floor between AJ's legs. She leaned down and took his juice covered cock in her mouth. Tasting a mixture of his cum and Starla's pussy, Tina hummed as she sucked. After Tina had completely cleaned off his shaft, she sat back up and took AJ's cock in her hand. She was keeping eye contact with him as she slowly began stroking it. \n\nI looked at Starla and smiled. She understood my nonverbal command and moved the stool beside AJ. She lifted her nylon covered musky feet toward AJ's face. Tina kept a nice jerking rhythm. She was beating him off and I knew when Starla's smelly feet got into his face, it was going to be all over once again! Tina was using AJ's precum for lube. I loved watching that foreskin slide up and down with Tina's hand. \n\nI moved over and held Starla's feet up for her before speaking to AJ, \"Ok baby, here they come. You want these don't you? You want to inhale these feet that have been trapped in that dark, sweaty place inside those boots, don't you? Beg for em! You hear me foot boy, beg for em.\" \n\nAJ was nearly panting when he responded, \"Oh please, stop the torture. I need 'em. I want them so bad. I'm so hot for them. Oh my God, I will do anything. Bring them to me. Please Britt!\"\n\nTina was still giving AJ an amazing handjob when I lifted Starla's cute feet upward into his face. He began to shake like a person having a seizure. His ass lifted upward, went back down, and then jerked upward, shooting his first shot of cum, up over his head, striking the wall behind him. It actually startled Tina who momentarily stopped but after regaining her composure, jerked his cock while it spurted seed all over his own chest. AJ was inhaling Starla's feet so much, it sounded like he was trying to breathe through a gas mask. \n\nWhen she pulled her feet away, AJ was gasping for air. He was seemingly wearing down or so we thought. Tina began removing her pants and thong but kept her knee highs on for AJ. Tina and Starla both stood on the hard floor with their hose covered feet pressed against the concrete. \n\nI ordered the shy guy, \"Lay on your back. No, flat on your back. Yes, just like that.\" \n\nAJ was lying there and his cock was actually about half hard and leaking profusely even though the foreskin was starting to sneak back overtop his cock head. I thought maybe he might be finished after 4 amazing orgasms. I moved the stool down by his crotch. I took my leather smelling bare feet and wrapped them around his cock, trying to bring it back to life. I stroked and slid it between my arches as it began to grow and harden once again. I winked at the girls and they knew what to do. \n\nStarla stood over AJ, lifted one foot and began to rub his face with it. His cock immediately sprang into action. I was sliding that foreskin up and down. It felt so meaty between my arches. Little Tina, surprised me and actually stood up on AJ's chest. He is a strong guy so it didn't bother him at all to have the 5 foot girl stand on him. While Starla, used her foot to rub his face and nose, Tina used her nylon clad toes to wiggle in his mouth. \n\nHe was sucking them like a starving baby. The man was submersed in feet and enjoying his utopia! I was setting a great tempo with my footjob. AJ's breathing became shallow and his body began to squirm. I loved feeling those cum surges march up his shaft with the soles of my feet. Any minute, I knew my toes were going to be covered in warm spunk. \n\nOut of nowhere, the shy Starla began to speak, \"You love our smelly feet don't you baby? Suck the smell off Tina's toes. I know you love it you little foot slave.\" \n\nThat did it! Just hearing Starla join in the dirty talk, which was so out of the norm for her, caused AJ's cock to start erupting. His cum shot up and landed on my feet which then began to run out like lava, coagulating all over my toes and the sides of both feet. AJ laid there as his legs were shaking in ecstasy!\n\nTina was amazed, \"How many times has he cum? He is superman!\" \n\nI was thinking and counting on my fingers, \"Five. I think we better leave the poor boy alone now.\" \n\n\"Hell no,\" Tina responded, then added, \"He fucked both of you, now he is going to fuck me.\"\n\nShe laid down on her back with her legs in the air. AJ, moved on top of her ready to perform by jerking his cock, trying to get him to spring back to life. Starla was sitting in the stool with her legs crossed and her nylon foot just dangling in the air.  \n\nI sang his name, A...J...lookie what I'm doing,\" as I took hold of Starla's suspended foot and put my head down to it. \n\nI took a huge sniff of the top of her foot and taunted him, \"Oh my, they are so musky. I bet you wish this was you. I think I'm going to kiss on them. They are very sexy aren't they baby?\" \n\nWhen I began kissing her warm, moist hosed foot, AJ's cock immediately straightened out and he lowered himself on top of Tina. After finding its mark, he plunged into her wet pussy. He was driven by his fetish once again. His ass was humping up and down. Tina was moaning and her hosed feet were jiggling overtop AJ's shoulders. I thought he was going to hurt her tiny body as he drove his cock into her like a freight train. With all his previous orgasms, AJ was displaying some great stamina. \n\nTina's head was thrashing back and forth while caught up in multiple orgasms and verbally spewing, \"Oh yes, AJ! Fuck me harder! I'm cummin! Aaghhhhhh! Don't you dare stop! Ohhhhhhhhh! Keep pounding my pussy like you own it!\" Then she lifted her top, yanked her bra up, causing her boobs to flop out and while in the throes of pleasure, commanded, \"Suck my tits! Suck em hard!\" \n\nHis face dove right in as he latched onto Tina's nipple. He was sucking her boob like a starving infant. He would suck it for a minute before switching back and forth to the other one. He even squeezed them together and tried to suck both simultaneously. Starla and I got up and knelt down behind AJ's pumping ass. We could see his balls slam into Tina's ass with every thrust. AJ knew it was time. He was loving Tina's pussy but her feet were dangling over his shoulders. I knew what he wanted so I helped him along.\n\n\"Look at her hosed feet just waiting for you AJ. They want loved on. Go ahead, kiss on them while you fuck her. Go on now,\" I coaxed. \n\nAJ didn't have to be told twice. He moved his body more in an upright position, placed Tina's legs together which naturally put her feet together. He planted his face, square in the middle of the soles of her nylon clad feet like a pie in the face. He continued humping and pumping but was now in the midst of his own heaven. He was smelling, kissing and even lightly biting on the bottoms. Tina kept cumming and now AJ was getting close. He had sweat dripping off the end of his nose and Starla and I began lightly smacking his ass for encouragement. \n\nThe more daring Starla was now taking the role from me with verbal taunts, \"Oooo, AJ, smell Tina's feet. If you are a good boy and cum in her, then I will let you smell mine again and maybe even cum all over them.\" \n\nHis pace sped up. He was fucking Tina so fast and hard, you would have thought he was a rabbit. He used his hands behind the front of Tina's hosed feet and held them, licking her soles, like he was cleaning the bottom of a bowl. \n\nAJ let out a large muffled bellow, \"Aunghhhhhhh! Auhgnnnnnnahh! Eeeeeehhhnnnnghhhh!\" \n\nHe was blowing his load deep inside her vagina. Tina was twitching again which meant they were sharing an orgasm. We continued smacking AJ's ass, even after the thrusting stopped. He was so exhausted that he pulled out and collapsed on his back trying to catch his breath. His legs were twitching like a doggie getting his belly scratched. \n\nI winked at the other girls and had one last idea. We stood side by side with our six feet forming a semicircle pressed on the hard floor. Starla was in the middle with her shimmer tan covered feet with Tina to his left with her nude hose covered feet and I stood to his right with my musky bare feet. \n\nWhile AJ was finally catching his breath, I giggled, \"AJ, lookie what we have here. I think it is time for you to show us you are a perfect little foot boy. Get over here and feast on these piggies.\" \n\nWhen he turned over on his side to look, all three of us began wiggling our toes and Tina encouraged, \"Get over here. Down on your knees. You need to show all three of us you are the best foot slave ever. I want to see you kneel before us.\"\n\nWe weren't really sure if AJ had enough in him to go one more time but we did know if anything could do it, it would be his love for our feet. He staying on his hands and knees and crawled to us. He was in a perfect submissive position as he put his face all the way down until his lips touched the top of my toes. He kissed and sniffed before moving his head to the side, stopping with Starla and then Tina. He would go back and forth like that same doggie trying to pick up the perfect scent. With him scrunched down, we couldn't see his cock and had no idea if he was becoming erect once again. Since Tina and Starla were wearing hose, they would spread their toes apart, allowing AJ to smell and even nibble the nylon webbing. \n\nI spoke softly and seductively, \"AJ, keep kissing our pretty feet. Smell the musk rising up from the tops. You must be hard aren't you baby? Why don't you go ahead and jack it off for us. Give our feet the ultimate tribute. C'mon now...pleeeeeease?\" \n\nHis hand disappeared under his belly and we could tell right away he was jerking his cock. It was so naughty that he was trying to show us one last time how hot he was for all of us. We were loving it and each of us girls began playing with our own pussies. We were rubbing and moaning while AJ, furiously jerked himself. \n\n\"Please give it to me, AJ. Cum on my feet. I want it so bad,\" begged Tina.\n\nStarla also pleaded, \"I want to feel it so bad on my feet. I know you love how strong they smell so could you please show me how much you love it? I want you to spunk on my toes.\" \n\nI smiled, \"Just think girls, just last week, our AJ here was a shy little virgin and now look at him. He is worshipping the feet of three girls in the basement of his work and he is going to give us lucky 7.\" \n\nI continued as his sniffs transformed into full blown inhales. He was using the smell of our feet to get himself over the edge. He was now a bloodhound and looking for the scent he was trained to follow. \n\nI added, \"Go on baby. Mark your territory with your seed. Show our feet how much you love them. Don't be shy, let it go. These are now your feet and you must show them your love. Give them your jizz to show it.\" \n\nAJ started moaning and then his upper body began to shiver. He was beating that thick, beautiful, uncut meat. He raised up and in his animalistic fashion, let out a huge war cry, \"Auughhhhhhhh!\"\n\nThen cum flew from the tip of his cock, landing on all three of our feet. He was like a wartime machine gunner, rotating his hips so not to neglect any of us girls with his cum. He didn't produce near as much as he had done his previous loads but for being his seventh one, the amount was still impressive. \n\nAJ was exhausted and once again collapsed on the floor. He was trying to comprehend what had just happened as were we. Two hours had passed and we all knew we were going to have to stay an extra hour just to make up the time. All of us needed to get back to work so we didn't have time to clean AJ's DNA off our feet so we just slipped our shoes on overtop it and started toward the steps before being halted by AJ.\n\n\"Before you go, I want to thank all three of you Goddesses. Please allow me to show my gratitude by kissing your hands like the queens you are,\" he requested.\n\nThat was so sweet so we came back toward him and he gave each of us a soft kiss on the top of our hands, one at a time to show his respectful appreciation. \n\nEven though his balls may have been drained for the time being, that extra hour after work might be another adventure for all of us. We were giggling because we were so excited to have a foot boy to play with and AJ would have no problem with filling that role."
    ],
    "authorname": "Brittni4u",
    "tags": [
        "bare feet",
        "nylon feet",
        "feet smelling",
        "foot fetish",
        "cum on feet",
        "footjob",
        "creampie",
        "doggie style",
        "feet kissing",
        "pantyhose"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/foot-fetish-fridays-ch-02"
}
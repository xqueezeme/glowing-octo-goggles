{
    "title": "Just a Little Magic Ch. 12",
    "pages": [
        "JUST A LITTLE MAGIC Chapter 12\n\n1. BREANNA Atlanta, Georgia January 9, 2001 January 14, 2028\n\n2. ELODIE Brugges, Belgium February 8 February 13\n\n3. VICKY Singapore March 9 March 13\n\n4. SOPHIE Montreal, Quebec April 7 April 12\n\n5. IRENE Limassol, Cyprus May 7 May 11\n\n6. SANDRA Taipei (Taiwan) June 5 June 10\n\n7. ASHLEY Chicago, Illinois July 5 July 9\n\n8. MIRELLA Sao Paulo, Brazil August 4 August 8\n\n9. KAVIA Vadodara, Gujarat September 2 September 6\n\n10. ESTHER Johannesburg, S.A. October 2 October 6\n\n11. TAMARA Tampa, Florida November 1 November 5\n\n12. RI Osaka, Japan November 30 December 1\n\n13. JANINE Toronto, Ontario December 30 December 31\n\n*****\n\n#2 Elodie Brugges, Belgium\n\nLillian had assured me that Elodie wasn't married, and that she didn't have a boyfriend. Quite true - and completely meaningless. Elodie was gay. Her roommate, Christiane, was her girlfriend - as in, lover. Life partner.\n\nThey were shocked to see Janine and me in their usual breakfast spot. Both girls were staring at Janine. That gave me a chance to recover my balance.\n\n- \"Elodie!\" I said. \"What a pleasant surprise!\"\n\n- \"You remember my name?\" She was duly impressed.\n\nJanine invited them to join us. Both Elodie and Christiane seemed slightly star-struck by Janine. That was something positive, I suppose; I just wasn't sure where it left me.\n\nWhen in doubt, be nice. It couldn't hurt.\n\nWe had a pleasant conversation with them, and promised to look them up if we were ever in their neighbourhood again. I'm sure that they both considered this a bit insincere - the way you say 'Let's do lunch' to someone that you hope to never see again.\n\nBack at the hotel, we broke the news to Lillian.\n\n- \"What?\" The colour drained from her face. I'd never seen Lillian this way. She appeared to be absolutely devastated.\n\n- \"We can fix this.\" said Janine. \"We'll think of something. Maybe we could ... get her to dump Christiane.\"\n\nThat just sounded wrong to me. \"No ... that's ...\"\n\n- \"Whatever it takes.\" said Lillian. \"This is about saving her life, Peter. What's more important - her girlfriend, or her life?\"\n\n- \"I don't know.\" I said. \"They seem to be really in love. This could hurt her deeply. And if was to happen now, it would be a heartbreak that she'd always associate with seeing our show - with me.\"\n\nJanine frowned. \"You might actually have a point there.\" she said.\n\nLillian snapped her fingers. \"That's it. Peter - you have to seduce them both.\"\n\n- \"What? you think I can get two lesbians to have sex with me?\"\n\n- \"No. We'll encourage their relationship. We'll also plant the seed of an idea ...\"\n\n- \"What idea?\"\n\nJanine laughed out loud. \"That they should have a child together. That's brilliant!\"\n\nIt took me a moment to catch up.\n\n- \"They're in love. They're both earthy, natural women. So if they decided to start a family, they'd want to do it naturally ... and who would make a better father than a wealthy, charming, and intelligent man that they've come to know and like, but who also lives far away, so that he won't be tempted to interfere with their child ...?\"\n\nLillian had that 1,000 yard stare, as if she was seeing something in another dimension.\n\nWait - had she called me intelligent?\n\n***\n\n- \"Build a relationship with them.\" said Lillian.\n\nBrugges isn't that big a city, and the two young women were pedestrians - there were only so many places they could be. I managed to 'run into' them every day, for the better part of a week.\n\nThey were pleased that I liked their city so much, and that I (and Janine, once or twice) wanted to spend our free time with them. I made it clear that we were far from jet-setters - that I preferred the company of 'real' people. If either of them found it strange that I was seeking them out, neither one said anything.\n\nElodie was the shyer of the two; Christiane was curious about our career in magic, our travels, and my relationship with Janine.\n\nThe person who didn't understand was Sammy. We cancelled a show because Janine suddenly came down with a flu. Even so, he had a hard time believing that we should stay in Brugges.\n\nFinally, there came a time when we couldn't delay any more. Paris beckoned.\n\nWe did a reasonably successful show, after which Lillian called a council of war in her room. She made me repeat everything I could remember of what the two Belgian girls had said or done. I don't know that we gained any valuable new insights, but she seemed satisfied.\n\n- \"Alright.\" she said. \"You two wait here. I have to check on something.\" With that, she left us alone.\n\n- \"You okay?\" said Janine. She pointed at my drink. \"Want a refill?\"\n\n- \"No - I'm good, thanks.\"\n\nShe excused herself for a moment. I started thinking about my next email to Sophie.\n\nWhen Janine returned, she was wearing the earrings she'd had on at my prom, a pair of high heels, a thong ... and a filmy little nightie that hid absolutely ... nothing.\n\nMy lips suddenly felt very dry.\n\n- \"We've been touring so much ...\" she said. \"You've been seducing all of these exotic women ... having incredible sex ... but nothing for poor Janine.\"\n\n- \"It hasn't all been incredible.\" I said. Honestly, sometimes my brain just doesn't work right.\n\n- \"I've been so lonely, Pete ...\"\n\nHer hair was perfect - just slightly disordered. Her makeup was perfect. Her breasts were ... what's better than perfect? Janine slipped her thumb under the string of her thong.\n\nI stood up.\n\n- \"I'm sorry, Janine. I can't.\" I heard myself say.\n\n- \"You can't?\"\n\n- \"I'm not going to cheat on Sophie.\"\n\n- \"What? What are you talking about? You're literally fucking women all around the world.\"\n\n- \"That's ... something I have to do. You, of all people, should understand.\"\n\n- \"What? Peter - we're going to be doing it next year. No matter what.\"\n\n- \"I know. But this would be different - it just ... feels wrong.\" I took a few steps toward the door. \"I'm sorry, Janine.\"\n\n- \"Aargh! What the fuck?\"\n\nI left before she decided to throw something.\n\nThe next morning, Janine was still furious. Even Sammy noticed when she snarled in my direction and went to sit at another table in the breakfast room.\n\n- \"Wow.\" said Sammy. \"Who peed in her corn flakes?\"\n\n- \"Uh ... I think I did.\"\n\n- \"You? What did you do?\"\n\n- \"Well ... she wanted to have sex last night, and I kind of ... turned her down.\"\n\n- \"You turned Janine down?\"\n\n- \"Yeah.\"\n\nSammy laid a hand on my shoulder. \"Dude, I am so proud of you. You grew a pair the size of Texas. What did you tell her?\"\n\n- \"Just ... that I didn't want to cheat on Sophie.\"\n\nSammy nodded. \"Really proud of you.\"\n\nI wish I could have been as proud of myself.\n\nJanine snatched a quick breakfast, and then stalked out like a wounded panther. Sammy decided to linger over his second coffee, so I headed back to my room.\n\nAs I was passing through the lobby, I heard some unexpected words.\n\n- \"Bom Dia, Peter.\"\n\nBom Dia means 'Good day', or 'Good Morning' - in Portuguese.\n\nJust as my sluggish brain made the translation, I turned to see a face I recognized.\n\n- \"Mirella?\"\n\n***\n\nThere she was. In the flesh. Mauricio, her agent, and Cousin Carla were there, too. Somehow, I managed to keep my cool. I kissed her on the cheek.\n\n- \"What a wonderful surprise.\" I said. \"What brings you to Paris?\"\n\n- \"I have a fashion shoot.\" she said. \"You know that I speak French, don't you? But of course I accepted the offer when I checked your schedule, and found that you would be here, too.\"\n\n\"I've missed you, Peter Grey. I love receiving your messages - but I miss the real man. Tell me that you're not angry that I've surprised you.\"\n\n- \"Angry? I'm delighted. Now I can tell you all of the things I was going to write - but in person.\"\n\nMirellas's eyes flickered past me. I turned, to find Sammy standing there.\n\n- \"Mirella, this is my best friend and business partner. Sammy - meet Mirella, Brazilian super-model and soap-opera star.\"\n\nMauricio and Cousin Carla came over at that point, so that I had more introductions to make. It kept my mouth busy, so that I couldn't put my foot in it.\n\n- \"Where is the beautiful Janine?\" asked Mauricio.\n\n- \"Oh, she's here. No doubt eager to renew your acquaintance.\"\n\n- \"Are you free for dinner, Peter?\" asked Mirella.\n\n- \"Of course. Absolutely.\"\n\nWe made plans, and then I excused myself so that they could check in. Sammy and I walked to the elevators.\n\n- \"Dude ...\"\n\n- \"I know.\"\n\n- \"Dude ... she might be hotter than Janine. How do you know her?\"\n\n- \"She was at one of our shows. Janine saw her, and called her up as a volunteer.\"\n\n- \"Holy shit!\"\n\n- \"Yeah - she was quite the sensation. Her agent - Mauricio - thought that we could collaborate on something. The more publicity for Mirella, the better, I guess. Plus I think he has the hots for Janine.\"\n\n- \"With Mirella around? Is the guy nuts?\"\n\nLillian was on top of her game. Janine would go for dinner with Mauricio, with Sammy to oversee any business propositions. Meanwhile, Lillian and I would go out with Mirella and her cousin.\n\n- \"Why can't we all eat together?\" asked Sammy. I thought it was a reasonable question.\n\n- \"That's not how they do business, Sam.\" said Lillian. \"How many big deals get made with seven people at the table?\"\n\nI didn't know the answer; neither did Sammy.\n\nAs you may have guessed, Lillian and Cousin Carla were conspicuously absent from my dinner with Mirella.\n\n- \"I really did miss you.\" she said. \"I don't understand why - but now that I'm here, I'm glad that I came.\"\n\n- \"I can't believe that you're here. It's ... unreal.\"\n\nMirella wasn't all that hungry. She finished off her dinner in a very short time, and then declined dessert or coffee. She took me back to her room.\n\nI couldn't refuse. I didn't want to refuse. When she revealed her incredible body, I practically forgot my own name. Fortunately, though, I remembered all of the lessons Janine had drilled into me. I went down on Mirella, and teased her with my lips and tongue, and my fingers.\n\nAfter her first orgasm, Mirella pushed me onto my back, and began to talk to my cock.\n\n- \"I've missed you, too.\" she said, as she stroked my erection. \"I know you've missed me.\"\n\nShe rocked my world, just as she had in Brazil. I did my best to keep up.\n\nSometime around 4:30, I made my way back to my own room. Thankfully, Sammy was out cold.\n\n***\n\n- \"How did your dinner go?\" I asked Sam.\n\n- \"Dude - that guy Mauricio was full of shit. He was just trying to get into Janine's pants.\"\n\n- \"That's partly why you were there, Sam.\"\n\n- \"Me - defending Janine's virtue. What's the world coming to? And she's still ticked off. Maybe it was having to put up with Mauricio, but I don't think you're her favourite person either, right about now.\"\n\n- \"Sorry about that.\"\n\n- \"Pete - don't apologize to me. After all the shit she put you through? I'm lovin' this!\" he said. \"What about your dinner? Mauricio didn't talk much business - I think he mostly just wanted to get rid of me. But Janine let me know that my ass would be grass if I left her alone with him.\"\n\n\"So - how did yours go?\"\n\n- \"Lillian seems to think that it wouldn't hurt if we did some appearances, or posed for publicity photos with Mirella. That's what they want, anyway.\"\n\n- \"Cool.\"\n\nI wasn't exactly lying to Sammy. Lillian had said those things - just not last night at dinner. I wasn't happy with myself, but I couldn't tell my buddy the whole truth.\n\nHe wasn't surprised, then, when I took the afternoon off for a photo shoot. Cousin Carla took the pictures, in Mirella's hotel room - after which she immediately disappeared.\n\n- \"Mirella - I have to do a show tonight ...\"\n\n- \"And you will. I will be there watching you. And waiting for you, after the show. But I was hoping that you and I could have a performance of our own, this afternoon ...\"\n\n***\n\n#5 Irene Cyprus\n\nI survived. Somehow, I kept Mirella happy, and managed to keep it a secret from Sammy. Lillian made Janine responsible for keeping Mauricio busy, and Sammy distracted. She truly wasn't very pleased with me.\n\nThree more shows in Southern France. Four in Italy (after which, Janine began to speak to me again). Then we flew to Athens.\n\nIrene was a lovely woman. She had long, wavy blonde hair, and a very pretty face. We called her up as a volunteer. She seemed to enjoy the experience, watching carefully and trying hard to figure out how Janine and I were doing it.\n\nShe was at the show with her girlfriend (not that type of girlfriend). They didn't linger after the show. That was fine, because Lillian had organized a very complicated plan to keep Sammy busy, and to allow me to meet Irene again.\n\nPart one: Lillian fell ill. She didn't need to be hospitalized, but she did want to get home as quickly as possible (we have a health care system). Lillian wasn't quite well enough to travel alone, but Janine and I had another show to do. Sammy was good enough to volunteer to fly home with Lillian.\n\nJanine and I said goodbye to them at the airport, and then did our second show in Athens. The next morning, I was at the airport early, for my flight to Cyprus.\n\nAs serendipity (or Lillian) would have it, I was seated directly across the aisle from Irene. Next to her, in the window seat, was her friend Anna. Both women were astonished when I sat down.\n\n- \"Irene?\"\n\n- \"You remember my name?\"\n\n- \"How could I not?\" Irene blushed prettily at that.\n\nThe flight from Athens to Limassol is under 2 hours. But for that time, I had the undivided attention of my two neighbours. They were stunned to discover that I was going to Cyprus. Why? For how long?\n\n- \"I've always wanted to go. I only have a week or so, but ... unless I'm mistaken, it won't be my last visit.\"\n\nBoth women had plenty of advice for me: what to see, what to eat, how to get around.\n\n- \"But where are you staying?\" asked Anna.\n\n- \"In Limassol?\" I named the hotel Lillian had found for me. It was old, and overpriced.\n\n- \"Oh - you can't stay there!\" said Irene.\n\n- \"No!\" agreed Anna. \"That's a terrible place.\"\n\n- \"Oh.\" I said.\n\nThe two girls were silent for just about 3 full seconds.\n\n- \"You should ...\" Irene began - then she stopped, appalled at her own forwardness.\n\n- \"Stay with one of us!\" said Anna, finishing the thought that Irene couldn't.\n\n- \"Oh, I couldn't ...\"\n\n- \"Of course you could!\" insisted Anna.\n\nLimassol is the second-biggest city in the Greek half of the island (the other half is Turkish). But there are still only 100,000 people there. Both Anna and Irene had old-fashioned instincts when it came to hospitality and welcoming strangers. I don't know for sure, but I wouldn't be surprised if hospitality is a Greek word.\n\n- \"I don't know ...\" I said.\n\nOnce they'd broached the idea, they weren't going to let it go.\n\n\"That's too generous. I wouldn't want ...\"\n\n- \"You wouldn't be a burden, Peter.\" said Anna. \"We would be happy to show you the city, or the best places to eat. We could do it together, or take turns ...\"\n\n- \"Yes, exactly.\" said Irene. Her friend Anna was normally not the more talkative or the more forceful of the two. But Irene was labouring under the effects of Lillian's spell. She wanted me to stay with her - it just went against her nature to openly say so.\n\nThey'd been talking about me after the show. Irene was smitten, and her friend knew it. Anna was actively trying to help, because Irene needed this. I wasn't sure what that meant, but all three of us wanted me to take Irene's offer of hospitality.\n\nI pulled a deck of cards from my jacket pocket. I handed it to Irene.\n\n- \"You're both very kind. I don't want to take advantage of you. But I'll trust the cards. Today is the 11th ... Irene, would you take the 11th card?\"\n\nShe did.\n\n\"If the card is black, I'll stay at my hotel. If it's red, I'll accept your offer.\"\n\nIrene smiled, and revealed the Queen of Diamonds. Anna actually clapped her hands.\n\n- \"Yes! But which of us will you stay with?\"\n\n- \"Irene - cut the deck, and take a card. Then let Anna do the same.\"\n\nThey did. Both women carefully looked at their cards.\n\n\"There are three of us.\" I said. \"Shall we say ... closest to the number three?\"\n\nAnna snorted, and revealed her nine of Clubs. Irene hesitated, and then slowly turned over her two of Hearts.\n\nIrene looked at me. She suspected that I'd pulled some kind of trick - she wasn't about to complain, though, because she was happy with the result. Nervous ... but happy.\n\n***\n\nIrene had a lovely apartment. It was the entire second storey of a house, just off the main square. Anna came with us, to make her friend feel more comfortable about taking a stranger into her home.\n\nWe dropped our bags, and then went out to eat. I insisted on treating - both resisted, but I wouldn't hear otherwise.\n\nIn the course of our time together, I learned a number of things from talking to them, and quite a bit more by mind reading.\n\nIrene was a successful lawyer, and something of a local celebrity in Limassol, for her brains as well as her beauty. But she was also well-known for the tragic breakup of her long-term relationship. Her fianc\u00e9 had been caught in flagrante delicto with a notorious skank. No one could understand why he would cheat on such a wonderful woman - and with such an ugly slut, to boot.\n\nIrene was devastated, as you might imagine. Anna had been a tower of strength, supporting her friend, but Irene's confidence was still fragile.\n\nThe three of us stayed up late, finishing two bottles of wine. I expressed my gratitude - and my amazement - half a dozen times.\n\nAnna went to her own home the next day. Irene and I had lunch at a lovely little sidewalk cafe.\n\n- \"I'll leave, if you want me to.\" I said.\n\n- \"Why would I want that?\"\n\n- \"Because you know that I used a card trick - on the plane - to make sure that I would be staying with you, rather than Anna.\"\n\nIrene was a bright girl. She didn't react right away. Instead, she thought about what I'd said. She suspected that I'd 'cheated' - but she didn't know how - or why.\n\n- \"Why?\" she asked.\n\n- \"You have no idea,\" I said, \"how I felt when I walked onto that plane and found myself sitting directly across from you.\"\n\nI looked into her eyes. \"I'm no more superstitious than the next person, but ... I felt a connection with you the moment you came onstage in Athens. It's not a simple matter of attraction. You're a lovely woman, Irene. But I ... I can't quite explain it.\"\n\nGiven that Irene herself was dealing with feelings that she couldn't understand, my words resonated with her. She was frightened by the intensity of her own feelings, and by the strange circumstances that had brought us together.\n\n- \"Can you really read minds?\" she asked.\n\nI shook my head. She was far too intelligent to believe in magic.\n\n- \"Not really. It's a combination of parlour tricks and micro-psychology.\" I said. \"I don't understand what's going on between us any more than you do.\"\n\nThat reassured her. She liked me; she respected me, and felt the mutual attraction between us. Irene was comforted to learn that I was just as baffled by what was happening.\n\nOn my third night with her, Irene sat a little closer to me than she had before. When she turned her head, to look me in the eye, I understood the invitation she was making.\n\nOur first kiss was like a precursor for our relationship: a little bit shy, a little bit moist, gentle and unassuming. Irene was somewhat passive, accustomed to being adored and pampered.\n\nShe let me carry her to bed, where I gave her ample proof of my devotion. She was completely silent during our lovemaking, and let me take the lead in every way.",
        "It wasn't a lack of passion on her part, but she was only accustomed to a couple of standard positions. Adventurous she was not. She had sex for the sense of security, and for the confirmation that she was loved and desired.\n\nWarm. Comfortable. Reassuring.\n\nIrene grew warmer when she realized that I was sincere about returning to Cyprus. This didn't have to be a mere fling; the potential was there for something more.\n\nAfter a lovely week in her arms, I began the first of my connecting flights home.\n\n***\n\nI had far too much time to think, waiting in airports, and on the planes.\n\nHow was I even doing this? I was genuinely in love with a wonderful woman; I had no doubts about my feelings for Sophie. But I was simultaneously building relationships with 11 other women - eight of whom I'd had sex with.\n\nThat made absolutely zero sense. Yes - I was trying to save their lives. By lying and deceiving them? When Sammy and I were kids, we would often ask ourselves: what would Batman have done in this situation? I considered that question, on the flight from Athens to Frankfurt.\n\nIt didn't help.\n\nSometimes, we would picture ourselves as superheroes, with unique powers, or an unusual combination of powers. What was I, now? Seductive Man? Super Gigolo? It was Lillian's spells that made these women fall for me, aided by some sneaky tricks to make it seem that the connection between us was fated, or pre-ordained.\n\nThe only one that actually liked me for myself was Sophie. Or was her affection for me just another of Lillian's spells? No - I was pretty sure that we'd met before Lillian had begun casting her enchantments.\n\nAll I managed to do with these questions was to give myself a massive headache. I'm not great at sleeping on planes anyway, but I was a wreck by the time we landed in Germany. Then I had to face another layover, followed by another long flight - to Montreal.\n\nThat was the only bright spot: I was going to see Sophie. But it also became my biggest worry - how could I face her? Sure, I'd lied to her before ... but now I felt like I was unravelling.\n\nSophie met me at the airport.\n\nThere she was - my beautiful girlfriend, with her big, expressive eyes, and her close-mouthed grin, revealing all of her dimples.\n\nI felt tears in my eyes as we embraced. I must have held her extra close, or squeezed her extra tight - Sophie pulled back a little, and looked at me closely.\n\n- \"Oh, Sweetie ...\" she said, as she reached up to wipe away my tears. \"Oh - you look exhausted.\"\n\nShe took me home, and sent me straight to bed.\n\nI was exhausted: physically, mentally, and emotionally. Sophie recognized it, and immediately set about looking after me. I woke late the next morning, to find her whole apartment smelling of homemade chicken soup.\n\n- \"You're an angel.\" I told her.\n\n- \"Well ... your angel, maybe.\" she said, with a smile. \"But only yours ...\"\n\nThat just about did me in right there. The tears began to flow once again.\n\n\"Oh, Pete - what's wrong, sweetheart?\"\n\nI decided then and there that I was going to tell her. I was going to tell her everything. All of the women in question deserved to know that they were in danger, and that we were trying to save them. But Sophie, first and foremost, deserved the truth from me.\n\nI was about to tell her. I actually opened my mouth to say the first words. That's when I vomited all over myself. And all over her.\n\n***\n\nSophie took me to the hospital. I had a serious fever, and couldn't stop vomiting. Those wonderful symptoms were accompanied by a violent migraine - I just couldn't seem to connect two consecutive thoughts.\n\nA doctor diagnosed severe food poisoning. That, and a national health care system, gets you sent home with a couple of extra-strength Tylenols.\n\nSophie nursed me. I think that she took a couple of days off work. She watched me, worried about me, and cleaned up my vomit (I don't know if that means anything to most of you, but if someone other than your mother cleans up your puke, they must really love you).\n\nShe was unfailingly cheerful about the whole thing.\n\n- \"I can't believe you.\" I said weakly. \"You're incredible.\"\n\n- \"You did the same for me. Remember?\"\n\n- \"You weren't puking all over the place.\"\n\nSophie just smiled again. \"Tell me that if the roles were reversed, that you wouldn't be here looking after me.\"\n\nI couldn't tell her that. But I also couldn't tell her the truth. Every time I even tried to begin, I brought up everything in my stomach.\n\nI was sick and weak for the better part of a week. Once she saw that I was a little better, Sophie went back to work. By the following weekend, I was out of bed, preparing a meal for her. I couldn't tell her what I wanted to, but I could do other things to show her how much I cared about her.\n\n***\n\nA week later, I was back in Toronto. I had a reunion with Sammy, dinner with Mom and Bill. It was several days before I got together with Lillian and Janine for a 'strategy session'.\n\nThey were pleased to hear that I'd 'closed the deal' with Irene. But they seemed genuinely concerned to learn that I'd suffered a breakdown of sorts upon arrival in Montreal.\n\nLillian quizzed me relentlessly about my symptoms; Janine wanted to know what I'd said to Sophie, and what she'd said to me.\n\n- \"You're exhausted, Peter.\" said Lillian. \"Poor boy - we've put so much strain on you. So much pressure. You must be feeling it.\"\n\nShe asked me a few more questions. I answered as best I could - without admitting that I'd been about to tell Sophie everything. Lillian was very sympathetic.\n\n\"It's been so difficult for you.\" she said. \"We should've seen this coming.\"\n\n- \"What can we do?\" asked Janine. She sounded concerned.\n\n- \"I could ... Peter, I could use magic therapy to help you.\"\n\n- \"Magical therapy?\"\n\nLillian nodded. \"It's somewhat like a therapeutic massage - but on the inside. It relieves pain, soothes tired muscles, and reduces anxiety. Do you remember the first time I hypnotized you?\"\n\n- \"Yes. I think so.\" I'd been 18 at the time; Lillian had been teaching magic.\n\n- \"It's a bit like that.\" she said. \"It doesn't hurt at all. Shall we try it?\"\n\n- \"Umm ...\"\n\n- \"You trust me, don't you, Pete?\"\n\n- \"Of course I trust you.\"\n\n- \"Alright, then.\"\n\nLillian hypnotized me again. I didn't feel all that different when I woke up. But I didn't have another migraine for quite a while.\n\n***\n\nMaintaining a relationship is a lot of work, if you're doing it right. Maintaining 12 at the same time is ridiculous. If I'd thought about it for just a moment before all of this started, I would've realized that it just wasn't possible.\n\nJanine helped me keep to a schedule, but I was the one who had to compose the sincere, heartfelt messages. Lillian picked out gifts, and arranged their delivery by priority post, but I was the one who had to make the phone calls.\n\nOr answer them - which was a lot harder. It might be the middle of the day, and my 'special' phone would ring (I had two phones now - one for my real life, and one for the 11).\n\n- \"Pete!\"\n\n- \"Hey ... Tamara!\"\n\n- \"I was just thinking of you - felt like I should call.\"\n\n- \"I'm so glad you did.\"\n\nEach woman had her own particular rhythms and needs, preferences and worries.\n\nAshley (Chicago) was sure that I had other women. She just wanted to know that she was special to me, and that I was still interested in her.\n\nBreanna (Atlanta) wanted my attention. She kept asking when she was going to meet 'my friends' in Atlanta. Gifts made her happy - but only for a limited time.\n\nTamara (Tampa) had mixed feelings about having sex with me. She'd enjoyed it, but she needed reassurance that she'd made the right decision.\n\nMirella (Brazil) was a beautiful, confident woman. I was something completely out her experience. She really didn't know what to make of me - except that she wanted more. That, and also the answer to the question: why did she want more of me?\n\nEsther (Johannesburg) answered my letters. She didn't have access to a computer. I sent her a cell phone, with the contract paid up, just so that I could call and speak to her.\n\nKavia (Gujarat)... well, I tried to avoid Kavia. She called me weekly, texted, emailed ... and sent me pictures. Nude pictures. And suggestions.\n\nVicky (Singapore) would answer - oh so briefly - if I contacted her.\n\nSandra (Taiwan) called me weekly. She was fun, sometimes flirty, and sometimes NSFW.\n\nRi (Osaka) would immediately answer my calls, and responded almost instantly if I texted or messaged her. She never initiated contact, though.\n\nElodie (Brugges) and her girlfriend Christiane replied to my every message. I kept it light-hearted, but occasionally let slip that I missed them.\n\nIrene (Cyprus) answered every call, and replied to every email.\n\nSomehow, I kept up with my social media obligations. Janine made sure that I never missed a birthday, or any special occasion.\n\nI wasn't as anxious, I suppose, but I still had my worries.\n\n- \"What happens if some of these women - once they're pregnant - decide to sue me for child support? I mean - paternity tests. What are the laws in some of these countries? What if each one sues me for half of my earnings? What's one half divided eleven times?\"\n\n- \"You don't need to worry about that.\" said Janine.\n\n- \"They won't sue.\" said Lillian.\n\n- \"But how can you be sure?\"\n\nIn between all of my worrying, Janine and I worked on new elements for our act. It's not always necessary to reinvent the wheel; sometimes you just need to give the old tricks a new spin. Then Sammy came up with a brainwave.\n\n- \"Remember that stuff you used to do when we first started?\" he said.\n\nI could've kissed him. That little seed of an idea grew into one of our signature routines. I would let one volunteer choose two numbers for a book: the first would correspond to a page, the second to a word. 92-14 would be the 14th word on page 92.\n\nThe twist - and I thought it was brilliant - was that we invited the audience to bring a book to our show. When Janine was calling for a volunteer, she would ask if anyone had a book with them. People would raise their hands, showing the books they'd brought.\n\nSammy publicized the idea on our website, and included footage from some of our test shows in Toronto and Montreal. One girl brought 'Green Eggs and Ham' by Dr. Seuss; another brought 'Harry Potter and the Philosopher's Stone'.\n\nFans got very creative: one brought a dictionary, another a coloring book. We got Tolkien, Nietzsche, A Hitch Hiker's Guide to the Galaxy ... it got to be so popular that I would stay after the show, doing five or six more books, for fans who'd come a long way, or brought their favourite books.\n\nPenn and Teller didn't invite us onto their show again, but they did have us open for them in their own theatre.\n\nLillian was able to convince Sammy that he no longer needed to come on tour with us. She could handle the arrangements on location, while Sammy manned the phone and managed our website at home. Truth be told, I think that he was relieved; he really didn't want to be away from Trish for so many months.\n\nI had a minor brainwave, which Janine didn't like, but Lillian fully approved of: I called Mirella and invited her to come to Vegas.\n\nShe was one of the most demanding of the 11 (except for Kavia), and was ready and able to travel. She immediately organized some sort of photo shoot in Vegas, to give herself a plausible excuse for making the trip (other than coming just to see me).\n\nMirella came to our Penn and Teller show - which she absolutely loved.\n\n- \"This idea with the books - it is very clever.\"\n\nShe asked me to accompany her to her photo shoot. How could I refuse, after she'd come to see my performance. Watch Mirella model a series of bikinis? Oh, the horror!\n\nThere was an added bonus to this little adventure, something I hadn't anticipated. The shoot was to take place next to a pool (logical enough, for bikini shots). Mirella was changing into the first swim suit, and Cousin Carla was with her. I was out by the pool, where the photographer was setting up reflectors, and humming to himself.\n\nI was curious. I listened in. Okay, I read his mind.\n\n- \"Money, money money - lots of lovely money ...\"\n\nThat made me even more curious. I read more of his thoughts.\n\nWhen Mirella emerged from the dressing room, she had a towel wrapped her shoulders. I immediately walked over to her, and blocked her way.\n\n- \"Mirella - don't do this.\" I said.\n\n- \"What? It's only a bikini.\" she said.\n\n- \"This guy is a crook. He's planning to sell the photos to many different people.\"\n\n- \"He can't.\" she said, her eyes flashing angrily. \"I will own the photos.\"\n\n- \"Are you sure? Ask to see the contract.\"\n\n- \"Peter - what is this about? Are you jealous? What's going on?\"\n\n- \"Mirella - please. Ask to see the contract. His copy.\"\n\nShe took a good long look at me. The she instructed the photographer to bring out his copy of their contract.\n\n- \"You already have a copy.\" he said.\n\n- \"Not with me.\" said Mirella. \"I want to see yours.\"\n\n- \"I don't think I have it here ...\"\n\nMirella shrugged. \"No contract, no shoot.\"\n\nThe photographer was torn. No shoot, no money. 'She won't notice' he told himself, as he went to get the contract.\n\nOf course, he'd carefully altered his own copy. Just one paragraph - the paragraph dealing with who owned the photos after the shoot.\n\nMirella was furious. She actually pushed the photographer into the pool. Cousin Carla threw all of the guy's equipment in after him. We kept the adulterated copy of the contract, and left.\n\nIt was hours later, as we had dinner at Le Cirque, that Mirella thanked me.\n\n- \"How did you know?\"\n\nI told her that the guy looked shady, that I'd heard him whispering to himself ...\n\n\"So you read his mind?\" she said.\n\n- \"Yes.\" I smiled, trying to make light of it.\n\n- \"You really can read minds, can't you?\"\n\n- \"Umm ...\"\n\n- \"Don't lie to me, Peter.\"\n\n- \"Yes. Yes, Mirella. I can read your mind.\"\n\n- \"What am I thinking - right now?\"\n\nI sighed. \"You really want ...?\"\n\n- \"Tell me - what am I thinking?\"\n\n- \"You're thinking that our waiter needs to go on a diet. His clothes no longer fit him very well. You're also questioning how you could possibly have fallen in love with me, when I'm nothing like your ideal man. But you're also wondering how I could make you so happy ...\"\n\n- \"My God.\"\n\n- \"I'm sorry. I shouldn't have said those last parts.\"\n\n- \"But you heard my thoughts. You can control my mind?\"\n\n- \"No, Mirella. I can read minds - but I can't control or change your thoughts. I can't make you think or feel a certain way.\" I was being a little disingenuous there - because it was Lillian who'd cast the spell.\n\nMirella was perhaps the most beautiful woman I'd ever been near. Top three, certainly, with Sophie and Janine. I would have been the first to admit, though, that my ranking of Sophie was more subjective.\n\nWere it not for Lillian's spell, Mirella would never have given me the time of day. She would've enjoyed my show, and then forgot about it a few days later. I wasn't handsome enough, or sexy enough to have caught her attention.\n\nYet here we were. She was infatuated with me, and still couldn't figure out why.\n\n- \"I don't think I want dessert.\" she said.\n\n- \"Nor do I. Can you guess what I'm thinking, Mirella?\"\n\n- \"That's too easy.\" she said.\n\nA lot happened in Vegas, that night. It stays in Vegas.\n\n***\n\nChicago. Ashley rolled over, and pressed her massive breasts against my chest. Her hand went up to my shoulder. Her eyes were wide open.\n\n- \"You ... you really like me, don't you?\"\n\nI'd just eaten her to one orgasm, and then fucked her to a second. Wasn't the answer to that question already self-evident?\n\n- \"You know that I do.\"\n\nAshley bit her lip. \"You have other women, though, right? I mean ... I know you do. I'm okay with that. But ... I just wanted you to know ... I haven't been with anyone else since the last time you were here.\"\n\nThis was ... odd - coming from a girl who'd been ridden hard and put away wet much too often. Yet ... I liked her. Ashley was uncomplicated.\n\n- \"I keep coming back for you, Ashley.\"\n\nShe smiled. \"Yeah, you do.\"\n\n***\n\nAtlanta. Breanna was easy to deal with. Compliment her, flatter her - and then reap the rewards.\n\nShe'd been practicing a bit: she made me sit down and watch as she performed an incredible striptease for me. She'd even learned to extend her tongue and lick her own nipples.\n\n- \"So when can I meet your friends in Atlanta?\" she asked - more than once.\n\nShe would have recognized Janine immediately. So Lillian stood in as my 'friend', apologizing that her husband was away on business.\n\n- \"You know, you look a little familiar.\" said Breanna.\n\n- \"Do you go to Wal-Mart?\" said Lillian.\n\nBreanna was thrilled to learn that I was thinking of relocating to Atlanta - that was something Lillian let slip. I wouldn't have said such a thing, but it had quite an effect on Breanna.\n\nWe did quite a bit of reaping and sowing that weekend. And some threshing, too.\n\n***\n\nTampa. Tamara had gotten a make-over. She'd had her hair styled, and her bikini line waxed. She'd also had some help with her makeup.\n\n- \"You look fantastic.\" I told her. \"You know, though - you didn't have to go changing for me. I was hooked the first time I saw you.\"\n\nShe liked that, because it echoed the way she'd felt. Tamara wanted contact. We made love - tenderly, gently, with just a little suppressed passion. But what she really needed were the hugs, the hand holding, and especially the cuddling in bed.\n\n***\n\nBrugges. Elodie and Christiane seemed really happy to see me. It was almost like a reunion with old high school friends.\n\nThey'd been following my web page, and attended the new show. Elodie loved the book routine. I read her mind, of course. It was ... unsettling. She loved Christiane - absolutely, and irrevocably. Yet she had these little stirrings ... she couldn't help wondering what it would be like with me ... how it would feel, and how I would go about pleasing her (because she knew that I would).\n\nChristiane didn't have those kinds of thoughts about me. Instead, she was off in a completely different direction. She loved the fact that she and Elodie could share a new friendship that had begun simultaneously for them. It wasn't like most of their other friends, who'd been close to Christiane before they met Elodie.\n\n***\n\nAthens. Irene met me on the isle of Rhodes. Fantastic place, lovely woman.\n\n- \"I can't believe that you came back.\" she said.\n\n- \"You doubted me? Irene - you're my Penelope. Except that it won't take me ten years to come back to you. Look in a mirror, please - see what I do.\"\n\nShe was such a beautiful woman, but she couldn't seem to get over her boyfriend's betrayal. All the reassurance, all of the positive reinforcement I gave her seemed to barely move the needle. It was like standing at the gas station, filling your tank - except that after 15 minutes, the tank was still only 1/8 full.\n\nWe made love - and it was very sweet. Emotional, and wonderful. And yet she worried that I didn't care for her as much as she did for me.\n\n***\n\nOsaka. Ri was sad. Her hours at the dentist's office had been cut back, and the loss of income was cutting into her purchases of new clothing.\n\nI didn't know how she'd take it if I offered her cash. She wasn't too proud to accept a gift from me, though; I took her on a shopping spree, and picked up the tab. That cheered her up quite a bit.\n\nShe decided to thank me by dressing up in her most expensive outfit. It was a traditional kimono - light blue, with red and pink flowers all over it. The wide belt, or sash (called an obi) was gold-coloured.",
        "Ri had fixed up her hair, with a top knot, and she'd gone all out with the makeup (which, to be honest, I didn't care for all that much). But she was making a special effort for me, so I made appreciative noises.\n\nShe served me tea, kneeling on her carpet at my feet (that, I have to admit, was a bit of a turn-on). When she fiddled with the top of her kimono, loosening it just a little, I got the hint. I leaned over and took her in my arms. Then I kissed her.\n\nRi turned her head, trying to avoid my kiss - which surprised the hell out of me, because she was broadcasting arousal on every frequency.\n\nI pulled back, and concentrated on reading her. Shit - she had a rape fantasy. To be more accurate, it was a reluctance fantasy. She wanted to be overpowered, forced against her will to enjoy being ravished.\n\nThat was definitely not one of my fantasies. But if it was going to work for Ri ... I grabbed her head, and forced her to kiss me. She tried to squirm away, and started making her little 'Eep!' noises.\n\nI wrenched open the top of her kimono, popping out her pretty little boobies. She turned her head (in shame?) as I roughly squeezed and played with her tits. Ri's arousal was though the roof - this was exactly what she'd been hoping for.\n\nThe kimono came loose in several key areas, but remained held in place by the obi - the wide belt. She was tangled up in the folds of her kimono - trapped, a prisoner. Yet 90% of her naked body was exposed to my sight - and to my attentions.\n\nShe chirped, and squealed, and came like a freight train as I entered her. She was having the time of her life (her only regret was that she hadn't thought to videotape the whole thing).\n\nFucking a woman tangled up in her own kimono wasn't exactly my idea of a good time, but I gave her my best. Ri writhed about on her bed, as I tried to nail her to the mattress. I didn't want to stain her beautiful clothes, so I came inside her, which sent her right over the edge. She was near tears as she hugged me.\n\n- \"So good.\" she said. \"So good.\"\n\nShe came to my hotel the following night, wearing a karate gi with an orange belt (another of her fantasies? Or just some costume play?). I'd given considerable thought to her little cries (which made me feel like I was violating her), and how to avoid them.\n\nI made her shower with me, first, to wash off the excessive makeup she'd put on. Then I went down on her in the shower. I couldn't hear most of her vocalizations over the running water.\n\nAfter we'd dried off, I sat in a chair, and pulled her onto my lap. She was impaled on my cock, with her little boobs and ass available to my wandering hands, while I kissed her - stopping her mouth with my tongue. It was a highly satisfactory fuck, by my estimation.\n\n***\n\nTaiwan. Sandra hadn't changed: she was talkative, and funny. When we got around to fucking, she was just as aggressive. But there was something else - a little bit of affection.\n\nWhen I licked and sucked on her nipple, she gently cradled my head. It was a very loving gesture. And when I entered her, in the missionary position, her eyes were on my face the whole time, as she tried to read my feelings through the expression on my face.\n\nShe was afraid, and highly vulnerable - a new experience for her. Sandra wanted to confess her own feelings ... so I did it first.\n\n- \"You're a beautiful woman, Sandra.\" I told her. \"We have fantastic sex together. I don't want to spoil it, but ... I think I'm falling in love with you ...\"\n\nShe didn't cry (thought it was close, for a few moments). Instead, she opened up, and told me about her medical history. Some people just get shitty cards dealt to them in life. Sandra had been poked and prodded, tested and re-tested, ever since she'd been a little girl.\n\nThe loud, cynical front she put on was just that: a front. She was afraid. The doctors and specialists all had their own pet theories; the truth was, they just didn't know what was wrong with her. One 'specialist' suggested that she should keep researching her own illness on the internet, in case new treatments, or a possible cure came about.\n\nI held her close. That night, we became closer than we would have after half a dozen spectacular fucks.\n\n***\n\nSingapore. Vicky was absolutely amazed when I ended up in her 1st-class section.\n\n- \"I can't believe it!\" she said. \"Again?\"\n\nOnce again, for several hours, I had nothing to do but read her mind as she worked. She was ready. Vicky knew that I was just as obsessed with her as she was with me. The uncanny coincidences of our encounters had finally convinced her that we were fated to be together.\n\nShe felt it - but she wasn't about to do anything. If something was going to happen between us, it wouldn't be on her initiative.\n\nLillian had once again booked us into the same hotel. I asked Vicky to have dinner with me - she accepted. I didn't suggest dancing again; instead, I steered her back to my room.\n\nVicky wasn't a true submissive (I think). But she did prefer for the man to take charge. I did. Once I had her in my room, I happily stripped her of all her clothing. I was already infatuated with her beautiful face. Her body was a revelation.\n\nShe had high, unusually-shaped breasts: they were soft, and saggy, but with large dark-brown areolas. Her skin was flawless. She had a flat stomach, and powerful thighs that made me think of a boa constrictor.\n\nShe was the ultimate canvas. Vicky let me take the lead - and then totally relinquished control. She gave herself to me - entirely. Her trust in me was absolute - and a little frightening. If I'd been a bad man, I could have hurt her.\n\nFortunately, Vicky hadn't made a mistake. She chose to surrender herself to someone who had only her best interests at heart. I kissed her, played with her intriguing nipples, and went down on her. She had one orgasm that way, and another as I fingered her.\n\nShe was melting, like soft ice cream, by the time I finally penetrated her. I had three excellent orgasms; I lost count of how many she had.\n\nThe next morning, Vicky surprised me by taking charge of our agenda for the day. She took me to her home, in Tuas - where I met her family.\n\nObviously, the consummation of our relationship meant something more to her. I met her parents, her brother and sister, 4 uncles, 5 aunts, and 17 cousins. There were other relatives, too - I just couldn't figure out the connections. Her family tree was more like a thorn bush.\n\nVicky was absolutely glowing. She had that 'freshly fucked and just thrilled about it' look to her. I couldn't imagine that any of her extended family were missing those signs.\n\nI did my best. Smile. Eat whatever they put in front of you. Drink whatever they give you. Join in on all the toasts.\n\nVicky didn't sleep in the same room as me - not with so many family members around. The following day, she brought me back to Singapore, and submitted to me all over again.\n\n***\n\nIndia. Kavia was severely pissed off at me. She refused to have sex with me for ... a good fifteen minutes. We fucked in my hotel room, showered, and set off for her family's home in Surat. She drove like a maniac.\n\n- \"Are you trying to kill us?\" I asked.\n\n- \"What's your point?\"\n\n- \"If there's a convenient spot to pull over, I'll gladly go down on you there. But I'd prefer to arrive alive - if that's okay with you.\"\n\nThat sounded like a challenge to her. She found a scenic spot to pull over. It was private enough that I was able to eat her, and then fuck her in the car. Forget mind reading - I should've studied becoming a contortionist.\n\nKavia was confused.\n\nShe was demanding. Jealous. She'd never had a real boyfriend. Or a long-term relationship. She'd dated several guys, who belonged to the right social circle, and then fucked a few, who might bring her some social status points.\n\nKavia moved on from those ... liaisons. She might occasionally reconnect with a guy, if there was something to be gained - a few more social points, perhaps. Or if a fellow was particularly good in bed, he might be worthy of a repeat performance.\n\nShe'd never met anyone like me, obviously. Primed by Lillian's spell, she'd come to me - only to find that I was nothing like any of the men of her acquaintance. Just like Mirella, Kavia had no idea what to make of me.\n\nShe resented it - and couldn't get enough of me, at the same time.\n\n***\n\nJohannesburg. Esther didn't quite know how to respond. I'd been writing her letters, and Lillian had sent gifts for her mother, and for little Sunny.\n\nShe let me take her to lunch, and then brought me to her home. I took this as an indication that we were making a serious step forward. She introduced me to her mother, and to her daughter..\n\n- \"Mam, this is Mister Peter. Sunny - this is the man who sent who sent you the puzzles.\"\n\n- \"Hello, Mr. Peter. I did the first one. All by myself. Do you want to help me with the second one?\"\n\n- \"With your permission, Gogo.\"\n\nGrandma smiled and nodded. Little Sunny and I worked on the puzzle together.\n\n\"I don't understand, Sunny. Why didn't you finish this one, too? You seem to be really good at puzzles.\"\n\n- \"I am. But Mama said I should wait until you were here so that we could this do this one together.\"\n\nI can't explain it. I have no idea why I started crying. The tears were literally flowing down my cheeks.\n\n\"Mama - Mr. Peter is crying.\" said Sunny.\n\nEsther started crying, too, which didn't help.\n\nAt the end of that evening, I asked Esther a question.\n\n- \"Can I come back - to see you?\"\n\nShe looked down.\n\n- \"I don't understand.\" she said. \"My old mother, my little girl. I don't understand what you want with us.\"\n\n- \"Esther. Your mother is a nice old lady. Sunny is an angel. But I didn't come back to see them. I came for you.. And I'll keep coming back to see you. I ... I just can't stay away.\"\n\nEsther understood. Her attraction to me made no sense - which was why she didn't trust it. But when I confessed that I couldn't stop myself from being interested in her, she could relate to my irrational fixation.\n\n- \"I'll be here.\" she said. \"But ...\"\n\n- \"But?\"\n\nEsther had the courage to look me straight in the eye.\n\n- \"I am attracted to you, Peter. I don't understand why you would want a dried-up old woman like me ... No - let me finish (I'd begun to protest). You are a wonderful man, and I find myself thinking about you all of the time. I even dream of you, at night.\"\n\n\"But I can't change my beliefs. I can't have sex with you, Peter - however much I might want to. I won't have sex outside of marriage.\"\n\n\"I hope that you can understand.\"\n\n*****\n\n<hr >\n\n Grandmother, in Zulu.\n\n \n"
    ],
    "authorname": "AspernEssling",
    "tags": [
        "magic",
        "magician",
        "travel",
        "seduction",
        "nerd"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/just-a-little-magic-ch-12"
}
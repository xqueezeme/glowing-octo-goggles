{
    "title": "Jessica",
    "pages": [
        "Jessie was your typical girl next door. At twenty-five she was working in the job of her dreams right out of college. She seemed to have everything going her way. Everyone liked her vivacious nature and outgoing personality. Well, everyone but her, that is.\n\nA bad breakup with her high school sweetheart during college had been the start. Following that, there had been several wild flings and even a group sex thing. The last had scared her. She had been too far out of control.\n\nAfter that, she went too far the other way, no dating, and no boyfriends. She had thrown herself into her studies. Her one sexual outlet was masturbation and she let her mind run wild and free. Her body became a fine instrument and she played it for everything she was worth.\n\nNow she was totally dependent on her toys and fingers. She had tried a few dates since she had graduated and even had sex with two different guys. Neither of them could come close to what she could do by herself.\n\nOver the years her toys had gotten bigger and bigger and wilder and wilder. Now her favorite one of all was made of milky white glass. It was only six inches tall but had a shape like an upside down child's top and a large round base with a stem between. It sat on her dresser like a piece of modern art.\n\nIts rounded point was a half an inch across but the widest place was nearly three inches. It had short black and purple wide twisted vanes running up from the base that felt so good when it was turned. The vanes added another half to three quarters of an inch to the diameter.\n\n*****\n\nJessie sat at her desk daydreaming about the toy and how she would sit on it when she got home. She had a low bench that was the perfect height and width. The bench would spread her legs just right for the toy to slowly stretch her vagina until she had that oh so good full feeling. Her thighs and sex tightened at the thought.\n\n\"Earth to Jessie, come in please.\"\n\n\"Huh!\" was Jessie's reply as she jerked back to the here and now. \"Uh, Sorry Carla, I was lost in thought.\"\n\n\"From that sexy dreamy look on your face, it was more like lost in lust,\" Carla said with a grin.\n\nWith a blush, Jessie nodded and then smiled shyly. \"Is there something I can do for you?\"\n\n\"Some of the girls are going out tonight and I wanted to invite you along. It'll just be drinks at one of the local watering holes but after this week at work we all need it.\"\n\nCarla was Jessie's department head and a nice lady. The invite was a first and she should take it but the thoughts about the toy earlier were still pulling on her mind and body. Carla was right about this week. It had been long, hard, and nerve wracking.\n\n\"I'd love to but...\" Jessie started and then let the sentence hang.\n\n\"Oh, you have a date. I should have known that, a pretty girl like you must have the guys lined up in rows.\"\n\n\"Uh, no, but I do have a date of sorts.\" \n\n\"Well, bring him along and let us meet him.\" Carla told her. \"I promise, we'll be on our good behavior. Well, I will, anyway. The rest of the girls can get a little wild.\"\n\nJessie blushed and shook her head. How was she going to explain this? \"Uh, it's not that kind of date. It's more like me, myself, and I.\"\n\nCarla did a double take and then giggled. \"I thought I was the only one with Friday nights like that. My toy box runith over,\" she added with a wink.\n\nJessie perked up at the mention of toys. \"Oh, you like toys too.\"\n\n\"I've been into toys for a very long time. Or is that the other way around?\" Carla giggled again.\n\nThis was a side of Carla that Jessie had never seen before. Carla was a larger woman and usually very serious and business like. She wore her hair up in a bun, long skirts, and always wore a suit coat. It was very odd to hear her giggly.\n\n\"I have quite a collection of toys myself,\" Jessica replied a little nervously.\n\n\"We'll have to compare notes sometimes,\" Carla said as she leaned over Jessica's desk. \"I love big toys, how about you?\" She whispered.\n\n\"Uh...\" Jessica said and then paused.\n\n\"Oh, maybe I shouldn't have asked that. It is quite private, I'm not usually this nosy, but I very seldom get to talk to someone who has a similar interest.\"\n\n\"I... Uh... I have never, uh, had anyone ask about my toys before. I kind of thought I was, uh, the only one who had an interest in them. Big toys, that is,\" Jessie finally got out with a deep blush.\n\nCarla grinned and shook her head. \"Not by a long shot dear. I could name two other women on this floor of the building besides me. I will not of course, it is all very secret. Some people don't understand the needs or reasons for big toys.\"\n\nIt dawned on Jessica that Carla was not being nosey, she was truly interested from a personal point of view. \"I don't understand it either, other than they feels so good and satisfy me like nothing else.\"\n\nCarla nodded and straightened up, a smile on her face. \"You have fun and don't worry about the partying. Maybe next Friday you can join us.\"\n\nAs she turned away, Jessie said, \"Uh, maybe I could join you.\" She paused to grin and then added, \"It's not like my \"date\" is going anywhere without me.\"\n\n\"We all meet in the lobby after work. I'll see you then,\" Carla said and then winked. \"After this week, I know a couple of my \"dates\" are going to get a work out.\"\n\nJessica watched the woman walk away and then grinned. Visions of Carla with two big toys stuck in her flashed like fire through her brain. With a shiver and a shake, Jessica turned back to her computer terminal and started to enter data rapidly to distract her dirty mind.\n\n*****\n\nThe night out with the girls had been just what everyone needed. By the time they left the club, everyone had a buzz on at the very least. Carla was plastered as was a girl named Vicky that worked in accounting. \n\nJessie had danced so much that she was almost sober. Seeing Carla and Vicky staggering across the parking lot she stopped them. \"You guys look like you need a ride.\"\n\nCarla giggled and nodded. \"I'd love someone to ride.\"\n\nVicky grinned a lopsided grin and nodded. \"I'll second that.\" She looked around the fast emptying parking lot and shrugged. \"But I think we're out of luck.\"\n\n\"I meant a ride home,\" Jessica said and then grinned. \"Neither one of you look in any shape to drive.\"\n\n\"I don't drive.\" Vicky replied as she took a step and then grabbed hold of Carla's shoulder. \"I rode with Carla.\"\n\nCarla looked at Vicky and then at Jessie. \"Well, Carla is drunk and we're riding with Jessica,\" Carla said as she closed one eye and staggered a couple of steps with Vicky hanging on.\n\n\"This is going to be fun,\" Jessie muttered as she led the way to her car.\n\n*****\n\nThey ended up sitting in the kitchen of Carla's home sipping coffee. That is when Jessie found out that Vicky lived there also. Vicky had wandered off when they arrived and returned to the kitchen wearing a t-shirt that looked like a dress on her short small frame.\n\nCarla looked up from her coffee and smiled as her eyes came to rest on the two little tents in the front of the t- shirt. \"My little Vicky is horny tonight.\" \n\nVicky gave her a hard look and then glanced over at Jessica as a light blush covered her pretty face. \"Carla, we have company.\"\n\n\"Jessie's a toy freak like us,\" Carla replied and then giggled. \"She likes them big like me.\"\n\n\"Big ain't the word for it,\" Vicky muttered.\n\nCarla laughed and said, \"I ain't ever heard you complain.\"\n\nVicky blushed again and squirmed on her chair. \n\nJessica looked from one woman to the other and back. What was the relationship here? Were they lovers or just good friends? Was it just the toys or something else? Maybe she should leave before she found out more than she really wanted to know.\n\n\"Uh, guys, uh, maybe I should head on home.\" \n\n\"See, you've scared our guest,\" Vicky said to Carla.\n\n\"No! No, I just feel you two would be, uh, you two might want to be alone,\" Jessie stammered.\n\nCarla laughed and stood up to get everyone a refill. \"We're fine, I just like to tease Vicky. She was in the closet about her toys for most of her life until she met me. I'm still trying to drag her out but it's kicking and screaming all the way.\"\n\n\"Just cause you like to show off doesn't mean I do,\" Vicky said and then giggled. \"Well, yes I do but only to you.\" \n\n\"That's only because we've never had the nerve to invite anyone else over,\" Carla said with a glance at Jessica. \"Until now of course.\"\n\nVicky giggled, and whispered, \"I'll show you mine, if you'll show me yours.\" \n\nWhen Jessica's eyes got big, Vicky giggled again and added, \"Toys dear, toys. Although, the idea of showing you how I use mine does appeal to me. I feel I can trust you.\"\n\nCarla looked at her friend and smiled. Turning to Jessica she whispered, \"Vicky has a real problem trusting people.\"\n\n\"Don't we all.\" Jessica replied and then grinned. \"I'm not too sure what you guy's relationship is or where this conversation is going but I'll take it on trust for the moment.\"\n\nCarla shrugged. \"We're friends and roommates first of all. We are into toys and showing off to each other. We are not lovers or lesbians if that is what you were thinking. Although, I have tried that in the past.\"\n\n\"I didn't know that,\" Vicky said. \"Why didn't you ever tell me?\" She paused to grin and winked at Jessica. \"I might have given it a try myself, God knows my luck with men sure sucks.\"\n\n\"I need more coffee,\" Carla said to no one in particular. \"And I need to keep my mouth shut when I'm drunk.\"\n\n\"I tried it once during college,\" Vicky blurted out in confession. \"I loved the company and the attention. The orgasms were great but I never could bring myself to give back, shall we say.\"\n\n\"I've never tried it but I have thought about it,\" Jessica confided.\n\nCarla laughed and said, \"The part time, kind of, sort of, lesbian leaning, no dating, toy ladies of Beckford insurance. That's us, in a nut shell.\"\n\nThey all three laughed.\n\nAfterwards, Vicky said, \"God, that was funny.\"\n\n\"Kind of sad though because it's so true,\" Jessica added.\n\nThe other two nodded.\n\n\"I can understand why Carla and I don't date but why don't you?\" Vicky suddenly asked Jessica.\n\n\"I have from time to time but I just haven't found anything as good as my toys,\" Jessica confessed with a slight blush. She figured she might as well be honest with these two.\n\nCarla nodded and Vicky giggled. \"Toys are so much fun.\"\n\n\"Why don't you go get the toy box while Jessica and I move the coffee to the living room,\" Carla said softly.\n\nVicky looked at Carla and then at Jessica as she took a deep shuddery breath. \"Does that mean I have to show off?\" She asked as she stood up.\n\n\"Only if you want to,\" Carla said and then grinned. \"But then again, you always want to show off to me.\" Looking over at Jessica she asked, \"Would you mind it terrible if Vicky showed off to both of us?\"\n\nJessica shrugged and replied, \"I've never watched anyone else use a toy, but I'm game.\"\n\n\"Has anyone ever watched you use a toy?\" Vicky asked.\n\n\"Uh, no, not really. I had a boyfriend once that always talked about it but for some reason it never happened.\"\n\n\"I was the same way until I met Carla. It was an accident that first time,\" Vicky said and then added, \"It really was!\" when Carla chuckled.\n\n\"Yes, I know it was dear,\" Carla whispered to her friend. \"I told you I was going to be gone all day and then I forgot my sunglasses.\"\n\n\"Yeah and I forgot to close my door. I was in such a hurry to get to my toys, it had been so long since I'd felt free enough to use them in your house,\" Vicky added.\n\n\"In a hurry isn't the word for it,\" Carla said with a laugh. \"I didn't even get out of the driveway good before I remembered my sunglasses were on the kitchen counter. I came back to get them and heard these funny noises from down the hall.\"\n\nVicky giggled and blushed as Carla went on, \"Your door was open, and you were laid out naked on your bed. You had that big black toy of yours stuffed in your pussy. The noise was the sound of it moving in and out of your wetness. Not to mention the soft whimpering moaning sounds you were making.\"\n\n\"I... uh... yeah,\" Vicky whispered. \"I opened my eyes and saw you looking at me. I wanted to yank the toy out and grab the covers but I couldn't. I was coming so hard that I could not move and your eyes on me made me come even harder. I was about to die.\"\n\n\"No dear, you were glorious,\" Carla reassured her.\n\nVicky gave a little shivery shake. \"Just remembering that morning makes my pussy even wetter than it was. Now I'll have to use that black toy tonight, won't I?\"\n\n\"If you want dear, it is a nice one and you do love it,\" Carla said standing up.\n\nVicky came around the end of the table and gave Carla a peck on the cheek. \"You always know just what to say. Thank you,\" she whispered before she hurried out the kitchen door. \n\nCarla watched her go and then sighed as she turned to look at Jessica. \"You really don't have to stay unless you want too. It would be nice though and Vicky will really get off with you being here to watch her.\"\n\nJessica stood up slowly and smiled at Carla. \"I'm enjoying myself and learning that I'm not as different as I thought I was. My mom nearly caught me once and it excited me far more than it scared me, so I know what she's talking about.\"\n\n\"The same here,\" Carla said with a nod. \"Let's take the coffee in the living room and enjoy Vicky's little show. Who knows, we might join in.\"\n\n*****\n\nCarla sat in a big overstuffed chair in the corner and Jessica was in the recliner. Vicky had a large ornately painted box open by the chaise lounge in front of the fireplace. Carla had lit the fire when they first brought the coffee tray in.\n\nVicky was nervously sorting through things in the box but had not taken anything out as of yet. Carla smiled and said softly, \"Vicky dear, you know you want the black one and I think I'll take Maxwell, just in case. I have no idea what Jessica might want.\"\n\n\"I'll be fine just watching for the moment,\" Jessica whispered and then blushed. \"I have an idea that my fingers will do a very quick job in any case if I feel the need.\"\n\n\"A toy would be much more fun than just your fingers,\" Vicky said as she pulled a ten inch black dildo out of the box and laid it on the chaise lounge. \n\nThe next thing she pulled out of the box made Jessica's mouth drop open. The thing must have been a foot long and six inches across the head. The shaft was heavily veined and at least five inches wide. If this was Maxwell then she understood the Max part. \n\nVicky hefted the large dildo and giggled. \"Mama likes them big.\" She took a bottle of lube out of the box and carried both items over to Carla.\n\n\"Thank you dear,\" Carla said as she took the items. Looking over at Jessica she asked, \"What type of toy was it that you were daydreaming about earlier today? Maybe we have something like it.\"\n\nJessica described the glass toy.\n\n\"We don't have anything like that,\" Vicky said. \"But we do have a very nice thick glass dildo that has a curve that hits some interesting spots.\"\n\nWhen Vicky pulled it out of the box, Jessica grinned and nodded. \"I have one almost like it at home only mine is milk glass and has a smaller head.\"\n\n\"Then you can use this one then,\" Vicky said as she brought it and a bottle of lube to Jessica. \"I ran it through the dishwasher last night so it's clean.\" She added with a grin.\n\nVicky went back to the toy box and rummaged around for a moment. \"What else do you want?\" Carla asked softly.\n\n\"Uh... Well...\" Vicky stammered and then stalled as she looked at Jessica.\n\n\"It's alright, you can say anything in front of her that you can say in front of me.\" Carla told her friend.\n\n\"Can I... Uh, that is... I want to...\" Vicky stumbled around trying to say what she wanted.\n\n\"Oh, you want to use the butt plug,\" Carla said with a grin. \"You really want to be a naughty girl don't you?\"\n\nVicky nodded and then giggled.\n\n\"Use the black one so it matches your black dildo,\" Carla whispered. \"Anyway the red one is a little big for you just yet.\"\n\nCarla winked at Jessica and said, \"The red one is mine for when I'm feeling really raunchy.\"\n\n\"I've uh, never tried one,\" Jessica admitted. \"I've thought about getting one but I never have.\"\n\nWith a big grin Carla admitted, \"I wear mine to work on special occasions and when I want to be on edge all day. By the time I get home I'm wired for sound and hornier than all get out.\"\n\n\"I can tell when you do from the way you walk and sit,\" Vicky said with a giggle. \"I'm going to try it one day if I can get my nerve up.\"\n\n\"You could always wear it in and then take it out in the restroom if it got to be too much,\" Jessica suggested.\n\nCarla and Vicky both laughed and then Carla explained, \"Putting it in isn't a problem. Taking it out in the restroom would be out of the question. Vicky yells her head off when it comes out and comes so hard that she can't hardly walk for an hour.\"\n\nVicky giggled and nodded. \"My ass is super sensitive. Just the thought of wearing it to the office with all those people around makes me shiver and tighten up. I'd be coming before I got to my cubical.\"\n\n\"Speaking of which, do you want me to put it in while Jessica watches?\" Carla whispered softly.\n\nVicky nodded and held up a small black butt plug about four inches long and an inch around at the largest. It was shaped like four balls molded together, with the smallest on the point and leading up to the biggest at the base. It had a short small t-shaped handle on the end.\n\nCarla got out of her chair and walked over to Vicky. \"Off with the t-shirt and on all fours, you know the drill.\"\n\nVicky gave a hard shiver and looked at Jessica. Jessica smiled and nodded. Vicky smiled back and slowly pulled the t-shirt off over her head. She was short and slender with small breasts and narrow hips. Jessica noticed that the small V of pale blonde hair on her mound matched her hair color.\n\nWhen she turned around Jessica also noticed that she had a cute little oval shaped ass. As she went to her knees on the chaise lounge, her sex came into view. It too was small and oval shaped, low down almost between her thighs. \n\n\"Do you want me to use lube or the natural stuff?\" Carla asked.\n\nVicky looked over her shoulder at Jessica and bit her lip for a second. \"Natural,\" she whispered, still looking at Jessica.\n\n\"Then spread your knees a little.\"\n\nVicky giggled and shifted her knees. \"I'm so wet with Jessica watching that I can feel myself squishing.\"\n\nCarla pressed the plug to Vicky's sex and it slid in easily. Vicky gave out with a soft moan and closed her eyes. \"Oh yes, you are nice and wet,\" Carla whispered as she worked the toy in and out slowly.\n\nJessica could see the balls spreading Vicky's sex as they went in one by one. As they came out, her opening clung to them. She would make a whimpering moan ever so often and her hips would flex up and back.\n\nA minute or so later, Carla asked, \"Are you ready?\"\n\nVicky bit her lip and nodded quickly.\n\nWhen Carla pressed the end of the butt plug to the puckered ring of Vicky's anus, Vicky groaned softly and flexed her hips quickly. The plug went in quicker than Jessica would have thought. Vicky groaned with pleasure the whole time.\n\nOnce the plug seated, Carla grinned and pulled it back out. Vicky yelled softly and wiggled her ass. Carla shoved it back in, which made Vicky gasp. Carla fucked her ass with the butt plug until Vicky yelled loudly and started to shake. \n\nThen she pressed it home and turned the little t-handle until it lined up in the cleft of Vicky's ass. She patted Vicky's ass and whispered, \"It's as snug as a bug in a rug or is that a plug in an ass?\"\n\nTurning to Jessica, Carla said, \"From now on, the more she gets turned on the tighter her ass will squeeze that plug. If I'm distracted and you see little Vicky just on the edge of an orgasm or even in the middle of one, jerk that plug out and stand back, she will go absolutely wild.\"",
        "Jessica nodded but her attention was on the plug in Vicky's ass. When her hips moved the handle on the plug moved slightly. Jessica was mentally trying to figure out how that would feel in her ass. She shivered and squirmed in the chair.\n\n\"It's working on your mind, isn't it?\" Carla asked.\n\nJessica nodded again. \"I've played back there with my finger and this one slender toy I have, but having that thing locked in place like it is...\" She let the sentence trail off.\n\n\"It is a very interesting feeling, believe me,\" Carla whispered as she returned to her chair. \n\nAll three women were quiet for a while and then Vicky came up on her arms and then on up onto her knees. She shivered and then sighed. \"Oh that feels so good,\" she whispered as she stood up.\n\nTurning around, she sat down gingerly and then laid back on the chaise lounge. Picking up the black dildo, she ran her hands all over it and then laid it on her chest. Opening the bottle of lube, she squirted some in her hand. As she spread the lube on the large toy, she looked from Jessica to Carla and back.\n\n\"Two sets of eyes are even better than one,\" Vicky whispered as she held the dildo with one hand and rubbed the lube on her pussy with the other. \"With just Carla, I can hold eye contact but with two of you, I can see one looking and I feel the other one.\"\n\nCarla stood up, hiked up her dress, slipped her panties off, and sat back down. She slid forward in the chair until her ass was on the very edge. Slowly she spread her knees. For such a large woman, her sex was long and very narrow. \n\nJessica wondered how she could even think about getting that monster of a dildo in that little pussy. The thought made a shiver run up and down her spine. From her own large toys, she knew it would hurt so good. It would be so filling. Suddenly she stood up, slipped off her panties, and sat back down. \n\n\"I see we have a third player,\" Carla said with a grin.\n\nVicky rubbed the big black dildo over her sex and in her slit but her eyes were on Jessica. \"Can I see?\" She asked breathily.\n\nJessica slid down in the chair as Carla had and slowly spread her knees. Her dress moved up her thighs as she did. Jessica had never done anything like this before and doing it excited her to no end. The cool air of the room added to the excitement and told her just how wet and hot she really was.\n\nWith a soft whimper, Jessica pulled the skirt up to her waist. She could feel the eyes of the other two women on her sex. It was almost breathtaking. She took a deep shuddery breath and blew it out slowly. She wanted to touch herself but did not quite have the nerve.\n\nA soft gasp from Vicky brought Jessica attention back to the woman on the chaise lounge. She had both feet up on the edge of the seat and her knees were spread as wide as they would go. The head of the large dildo was pressed to her sex tightly. Jessica did not think the thing would fit. \n\nTo her surprise, the head slowly entered. Vicky moaned and lifted her hips. An inch or so of the shaft disappeared. Jessica could see the skin around her opening pressed inward and her clit pulled down against the shaft.\n\nJessica's clit was high above her opening and she always had to angle a toy to get it to rub just the right way. Vicky's clit was right above her opening and pulled down against the toy as it went in. Jessica shivered as her hand moved to her own sex but it landed on her mound and stayed still.\n\nVicky worked the big black toy in and out in short jerky movements but Jessica noticed that it went in deeper as time went on. When about half the toy was inside her, Vicky arched her hips sharply and let go of the heavy toy. It bent downward and slowly began to slip out of her pussy. \n\nWith a shiver, Vicky whispered, \"Not yet, not yet, not yet,\" over and over again as the toy came out. The base of the toy touched the cushion under her and stopped moving. With a deep sigh, Vicky lowered her hips pushing the toy back inside. \n\nSomewhere along the line, Jessica had started to roll her clit around slowly with a light touch. As the big black dildo started back into Vicky's pussy, Jessica's finger slid down her slit and circled her opening. She was teasing herself and she knew it.  \n\nWhen Vicky's ass touched the cushion, way more than half the large toy was inside her. She sighed deeply and flexed her hips slowly. \"Oh yes, that feels so good,\" she whispered softly. Her eyes fluttered open and she was looking straight at Jessica's slowly circling finger. \n\nBoth women moaned softly at the same time. \n\n\"The toy, the toy, the toy,\" Vicky whispered softly as her hips flexed slowly.\n\nJessica shivered as her other hand found the toy and brought the head of it down to her opening. It was cold as it first slid up and down in her slit and over her clit. Her breathing got faster and shallower. She wanted to ram the glass toy in as deep as possible and fuck herself crazy but she held back, teasing herself and Vicky.\n\nA grunt from Carla drew Jessica's attention to the large woman. She had her heels up on the seat cushion next to her ass. She had a two handed grip on Maxwell as she worked the very large head against her opening. Her eyes were darting back and forth between the toy Jessica held and the toy in Vicky.\n\nWith a giggle, Vicky whispered, \"I think Maxwell is in trouble tonight, you're starting way early.\"\n\n\"It must be the company,\" Carla said and then groaned deeply as the large head pressed tightly against her opening spreading her outer lips.\n\nJessica's eyes got wide as the glistening head of the toy slowly disappeared into Carla. Carla's hips fluttered and then jerked as she pulled the toy out. Jessica could not believe that monster actually fit in anyone's pussy. With a groaning grunt from Carla, the head disappeared again. \n\nJessica echoed the groan as she stuffed the glass dildo deep into her vagina and worked it in and out rapidly. A gasp from Vicky drew Jessica's eyes that way. Vicky had sat up and now squatted on the big black toy. Her hips flexed as she worked the toy in her sex just as rapidly as the toy moved in Jessica's pussy.\n\nA snorting gasping groanfrom Carla made Jessica look that way. The base of Maxwell was on the floor and Carla knelt over it, the huge head was even deeper than before. Carla paused and whipped her dress off over her head. Her eyes were closed as she slowly bounced up and down on the toy. The toy was only moving a few inches either way but that seemed to be enough.\n\nJessica twisted the glass dildo as she fucked herself, wishing she had her big toy from home. It would feel so much better and fill her up so good. With a groan, she felt her hand bump against her swollen clit. Her eyes closed for a second and then snapped open as she heard a deep groan from Vicky.\n\nWhat had Carla said to do when Vicky came? The butt plug, pull the butt plug out, flashed through her mind. Jessica had to force her body to roll forward. She was very close to her own orgasm. When she went to her knees in front of the chair, Vicky was within arms reach but the butt plug was out of reach behind her.\n\nVicky held the black toy by the base with both hands as she bounced up and down on it with long sharp strokes. Jessica was close enough to see the slick shaft pulling and pushing on Vicky's opening and her clit rubbing up and down on the shaft. With a moan, Jessica spread her knees wider and fucked herself harder. Vicky's eyes were on her fast moving hands.\n\n\"Not yet,\" Carla moaned, \"Not yet.\"\n\nJessica glanced her way and gasped at the amount of the giant dildo that was out of sight. A shiver ran up and down her body as she wondered how that huge thing would feel in her own pussy. That thought put her over the edge and Jessica was coming her brains out. All thoughts of Vicky were swallowed up in the waves of pleasure coursing through Jessica's body. The feel of the glass dildo in her pussy and her fingers rolling her clit around took precedence over everything else in the world.\n\n*****\n\nA slow grunting sound with a thump at the end drew Jessica back to the here and now. She was lying on the floor. Her wrist was trapped between her tightly clenched thighs as she tried to curl up around the pleasure in her sex and lower belly. She opened her eyes to see Carla moving slowly toward Vicky. \n\nCarla groaned as she moved her knees forward and the thump was Maxwell as she moved him forward. The huge dildo was over halfway inside Carla. Jessica groaned as she though about all the places that monster must be rubbing. Jessica's eyes fluttered and tried to close as her pussy clamped down on the glass dildo.\n\nThen she noticed that Vicky had moved slightly on the chaise lounge. The big black dildo was now on the corner away from Jessica and Vicky held it in place as she fucked herself with long full strokes. Jessica could see the t-handle on the butt plug move up and then down as the dildo moved inside Vicky's vagina.\n\nJessica felt her anal muscles tighten and relax as the handle moved. She had to get her one of those, she though as a shiver ran up her spine. Just the though of that thing being held tightly by her ass made her pussy tingle and throb as it grabbed the glass toy.\n\nSuddenly Vicky started a soft wailing moan as she moved faster on the toy. \"Soon,\" Carla whispered from between clenched teeth, followed by a groan that was louder than before as she paused and rocked on Maxwell. A second or two later she added, \"For both of us.\"\n\nJessica turned on the floor, moving her upper body closer to the chaise lounge. Vicky's wailing moan was going up the scale in tone as well as volume. As Jessica wiggled forward, the glass dildo moved inside her. She paused to groan as her pussy tightened up around the large head. \n\nVicky's wailing moan seemed to have topped out in volume as she raised her ass up, almost pulling the large black dildo out of her pussy. Jessica made a lunge at the butt plug handle as Vickie's ass started down. The butt plug came free, Vickie impaled herself on the black dildo, and tumbled forward into Carla.\n\nJessica had expected a scream from the slender woman at the very least but that did not happen. Her eyes were very wide and her mouth was a perfect circle but she didn't make a sound. She had a death grip with both hands on the dildo in her sex and her hips were jerking and bucking so hard Jessica feared she would hurt herself.\n\nCarla had rocked back when Vickie collided with her. When she came back forward, she had groaned long and loud as her hips flexed back and forth and from side to side. Maxwell was being pulled one way and then the other as the large woman came long and hard.\n\nJessica lay sprawled out on the end of the chaise lounge and groaned softly as she watched the other two women come. She had a hold on the glass dildo with one hand and the butt plug with the other. Her eyes would move to the butt plug ever so often and then back to the scene in front of her. \n\n*****\n\nOver a period of time, Vickie stopped moving, as did Carla. Carla groaned softly, kind of melted over to the side, and then sprawled out flat on her back on the floor with her thigh tightly wrapped around Maxwell. Vickie soon joined her, the big black dildo still deep in her sex.\n\nJessica grinned and looked at the butt plug in her hand. Yeah, she needed to get her one of those. With a big shiver she pulled the glass dildo out of her pussy and shoved it back in. She groaned long and loud as the big head moved out and then back into her tightness. Her eyes closed and she sighed deeply as she relaxed sprawled out on the end of the chaise lounge.\n\nA few minutes later, Carla groaned and whispered, \"Holy shit!\"\n\n\"Uh huh,\" Vicky whispered a few minutes later.\n\nJessica giggled and moved the dildo out and back in. \"The next party is at my house so I have my favorite toy.\"\n\n\"Can we?\" Vicky asked Carla.\n\n\"I... I don't see why not,\" Carla replied. \"Have toys, will travel.\"\n\nVicky giggled. \"If you ride Maxwell, it might take us a while to get there.\"\n\nCarla groaned. \"I'd die before we reached the door. Going outside that is.\"\n\n\"I'll wear the butt plug on the way there,\" Vicky whispered and then groaned softly. \n\nJessica opened her eyes just in time to see the big black dildo pop out of Vicky's little pussy. As she watched, the opening slowly got smaller and smaller. She shivered hard and whimpered softly. \"Maybe I'll have a butt plug of my own by then.\"\n\n\"Can we be there to watch you put it in for the first time?\" Vicky asked softly.\n\n\"If I can wait long enough for you guys to get there,\" Jessica replied and then shivered hard as she realized what she had said. Having the two women watching her as that thing slid up her ass would get her off all by itself.\n\nThen she had another thought. \"Maybe I'll let one of you do the honors,\" she whispered and then groaned loudly as she pulled the dildo out and shoved it back in quickly.\n\n\"Me, me, me,\" Vicky said quickly.\n\nCarla groaned and then chuckled. \"Now you've done it. All I'll hear for the next week is, when are we going to Jessica's house?\"\n\nJessica groaned and then whimpered softly as her eyes opened and she looked at the black butt plug in her hand. Then she giggled and said, \"Do we have to wait until next weekend?\"\n\n\"The toy store is open tomorrow,\" Vicky said softly.\n\nCarla laughed and then groaned loudly as she slowly pulled Maxwell out of her sex. When it came free, she shivered hard and sighed deeply. \"I might sleep until noon.\"\n\n\"Jessica can sleep in my bed and I'll sleep on the chaise lounge,\" Vicky said quickly.\n\n\"I might sleep right here,\" Carla said as she opened one eye and looked at Jessica. \"Are you up for spending the night?\"\n\n\"It's either that or this dildo is going home with me. My pussy isn't ready to give it up yet,\" Jessica replied.\n\nVicky giggled. \"From the way you keep pulling it out and then jamming it back in, I'd say you wanted another orgasm or two.\"\n\n\"And the problem is?\" Carla asked with a chuckle.\n\n\"None that I know of,\" Vicky replied and then looked at Jessica.\n\nJessica pulled the glass dildo almost all the way out and then rammed it back home. The base of her hand slapped her clit and she groaned loudly. She moved the dildo again the same way with the same reaction. \n\n\"Get you some,\" Vicky said with a giggle.\n\nJessica was doing just that. She rolled over more on her stomach. Her knees were on the floor, her hands under her working the glass dildo in and out with sharp movements. She didn't see Vicky move to the toy box and take a toy out. She was far too distracted by the building orgasm.\n\nThe thought of having something in her ass and the two women watching her kept pushing things higher and higher. Her hips were flexing up and down as her hand spanked her clit. Suddenly there was something cool against her anus and then it was sliding inside her asshole. She gasped loudly as it seemed to get bigger, her sex grabbing at the glass dildo and her asshole grabbing at whatever was in there.\n\nWhen whatever was in her ass stepped up in size again, Jessica came unglued as her orgasm leaped to new heights and crashed over her in spinning lights and bright bursts of color. He sex had a death grip on the dildo but the thing in her ass was fucking her slowly, steadily. Her orgasm rolled on and on and on.\n\n*****\n\nJessica ended up sleeping on the chaise lounge, the glass dildo deep in her sex. Whatever had been in her ass was gone and there was a soft blanket over her. Vicky was asleep in the recliner and covered with another blanket. Carla was asleep flat on her back on the floor. There was a blanket over her.\n\nWith a soft moan, Jessica pulled the dildo out of her pussy but held the big ball head against her opening as she tried to decide whether to keep it out or push it back in. Pushing it back in, won out and she whimpered softly. It was halfway back inside when she stopped its movement. She shivered hard and sighed softly.\n\nHer mind was trying to sort out that last orgasm. The dildo sliding in and out, her hand slapping her clit. That is what had built the orgasm. Then she moaned long and loud as she remembered something slowly slipping into her asshole. That had blown her away totally. \n\nVicky giggled softly and Jessica looked that way. \"Are you at it again?\" Vicky asked in a soft whisper. Jessica felt the heat of a blush in her upper chest and face as she nodded. \"I had to put the butt plug back in after watching you have that last orgasm,\" Vicky whispered.\n\n\"Uh, who put, uh, what in my ass?\" Jessica asked quickly.\n\nVicky giggled and replied, \"I pushed a small anal ball dildo in there. If I come so hard from pulling something out, I figured you might do the same with something going in.\"\n\n\"You had that right,\" Jessica said as she moved the glass dildo faster and deeper in her wet sex.\n\nVicky giggled as she watched the blanket move next to Jessica's sex. \"Should I get it again?\"\n\nJessica groaned loudly and shook her head. \"Another orgasm like that last one and I'll sleep all day.\"\n\nVicky giggled again. \"I don't think so. Thinking about owning a nice new shiny butt plug will wake you up so you can go to the toy store.\"\n\nJessica took a long deep breath and shivered hard. \"I also want one of the toys that you fucked my ass with.\"\n\nVicky shivered and sighed deeply. \"It was my pleasure believe me.\"\n\nJessica found herself giggling. \"Not all your pleasure by a long shot.\"\n\nCarla made a grumbling sound and said, \"You two go to sleep.\"\n\nJessica smiled as Vicky giggled. It seems she had found her place in the world."
    ],
    "authorname": "TxRad",
    "tags": [
        "dildo",
        "exhibition",
        "large toys",
        "masturbation",
        "toys",
        "voyuer"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/jessica-32"
}
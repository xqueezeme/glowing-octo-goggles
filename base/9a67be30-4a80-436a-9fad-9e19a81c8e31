{
    "title": "Life after the Lottery Ch. 68",
    "pages": [
        "Thanksgiving, Part Deux\n\nWe were up early Thursday, so Dawn could get everything else ready to cook. She, Ann and my mom finished making the dressing to cook. My dad came into the kitchen at about 8:00, looking for coffee.\n\n\"You slept late,\" I said. \"Up late?\"\n\nHe got coffee and sat at the bar. Charlie came in a few minutes later, dragging.\n\n\"Were you all up late last night talking?\" Amy asked.\n\n\"Uh...yes.\"\n\nEveryone else came to the kitchen about 30 minutes later, freshly showered with wet hair. They all wanted coffee.\n\n\"You all are quiet. You must have been up late talking,\" Dawn said.\n\nDawn and I cooked as we looked at each other and smiled. We got everyone fed, and they all went to get dressed except my mom. She was sitting at the bar as I cleaned up while the girls went to get dressed.\n\n\"You know, don't you?\" Mom asked.\n\n\"You know I do.\"\n\n\"Does Dawn?\"\n\n\"Of course, she does.\"\n\n\"What did Dawn say?\" Mom asked.\n\n\"Nothing. You all are adults...I thought!\" I laughed.\n\n\"Hey, we are still young!\"\n\n\"Did you have a good time?\"\n\n\"Yes, but we were up late.\"\n\n\"I'm sure you were.\"\n\n\"I'll have to talk to Dawn.\"\n\n\"Not unless you are going to give her details!\"\n\n\"Smartass.\"\n\n\"Did you do Ann?\"\n\n\"Yes, I did.. Why?\"\n\n\"I would like to do her.\"\n\n\"Ask your dad for details!\"\n\nMom and I talked and laughed for a while, and then she went to get dressed, and I went upstairs.\n\n\"What did your mom say?\" Dawn asked.\n\n\"She had a good time.\"\n\n\"Looked like it. Your mom will know you know,\" I said.\n\n\"I can't wait!\"\n\nLater, everyone was back in the den. Charlie and my dad followed me into my study.\n\n\"What are they laughing about?\" Dad asked.\n\n\"I'm sure Dawn is asking her mom about all of you having sex last night,\" I said.\n\n\"What!\"\n\n\"Dad, Dawn will feel her mom hiding it. Ann can't.\"\n\n\"Well...\"\n\n\"Did you all have a good time?\"\n\n\"Yes!\" They both exclaimed and laughed at the same time.\n\n\"Do you care?\" Charlie asked.\n\n\"No! I would like to have watched!\" We laughed.\n\n\"Too bad we don't have pictures,\" dad said.\n\n\"I'll loan you a camera.\"\n\n\"Larry, would Sue let us do that?\" Charlie asked.\n\n\"Probably.\"\n\n\"James, can you process the film?\" Charlie asked.\n\n\"Sure. I have a great video camera now, also.\" They smiled.\n\n\"Would Dawn be okay with you making prints of us?\" Charlie asked.\n\n\"She wouldn't care.\"\n\nWe talked and laughed until Brian and Angie showed up about 10:30. Deb and Pete came in a few minutes later. We all visited and talked until everything was ready to eat at 1:00.\n\n\"Can I put Angie and Brian in the bedroom upstairs?\" Amy asked.\n\n\"I guess.\"\n\n\"What about Deb and Pete?\"\n\n\"Tell Pete they can watch porn on the big TV in the pool house. I don't want them downstairs.\"\n\nEveryone was talking when Amy came in from the pool house with Deb and Pete laughing. She came to get some wine in the kitchen while they went to the den.\n\n\"What were you laughing about?\" I asked.\n\n\"Deb was teasing Pete, asking him if he wanted to fuck me.\"\n\n\"What did he say?\"\n\n\"He didn't say anything, but Deb kept teasing him. I think I will do it.\"\n\n\"When?\"\n\n\"I'll sneak out to the pool house.\"\n\n\"Tramp.\"\n\n\"I really want to do Deb.\"\n\n\"Find out what happened this week,\" I said.\n\nSoon, everything was ready to eat, and we all carried food to the dining room, then sat to eat. I watched as Amy winked at Pete, teasing him.\n\nWe ate and talked for about an hour and a half. After everything was put away and cleaned up, everyone was moving around the house and talking. I had gone to my study to load one of my cameras with film to see if my dad would take some pictures.\n\n\"Hey, James?\" Charlie asked, coming in.\n\n\"Come on in. I am getting a camera for you all.\" He laughed.\n\n\"I just wanted to let you know that Amy was naked when I went up to her room yesterday.\"\n\n\"I know. I understand you got a nice show.\"\n\n\"Well...she let me play with her tits. Is that okay?\"\n\n\"I'm sure she was fine with it. Is that all you played with?\"\n\n\"Well...\"\n\n\"What else did she let you play with?\" I asked.\n\n\"Well...she got on the bed and spread her legs...and...she asked if I wanted to touch her.\"\n\n\"Her pussy?\"\n\n\"Uh...yes...\"\n\n\"Did you?\"\n\n\"Damn, James. I had too.\" I laughed.\n\n\"It is sweet,\" I said.\n\n\"Oh, my, god! It was so sweet. That red hair is hot as hell!\"\n\n\"Yes, it is. She lets hers grow.\"\n\n\"And it is hot.\"\n\n\"How did it feel.\"\n\n\"Well...I was just running my fingertips over it...and...and she grabbed my hand and pressed my fingers inside of her...\" I laughed at Ch.\n\n\"Charlie, Amy and her sister are serious teases.\"\n\n\"She used her fingers to push mine inside of her.\"\n\n\"I'm sure she didn't have to help much.\"\n\n\"James...I...didn't know what to do...\"\n\n\"But you kept playing with her pussy...\"\n\n\"I had to!\" We laughed some more.\n\n\"How did she taste?\" I asked.\n\n\"What?\"\n\n\"I'm sure she asked you to taste...your fingers, Charlie.\"\n\n\"Oh, my...she taste so sweet. James...she ask me if I wanted to eat her. I didn't know what to say.\"\n\n\"Say, yes.\"\n\n\"I couldn't do that!\"\n\n\"Sure, you could.\"\n\n\"Ann would kill me!\"\n\n\"Ask her if you can.\"\n\n\"Amy?\"\n\n\"No, Ann.\"\n\n\"No way!\"\n\n\"Come on, you pussy,\" I told him, and we left my study.\n\nSamantha and my mom were sitting on the sofa, talking and sipping wine, so we sat with them.\n\n\"Samantha was telling me about how you made it possible for her to go to med school,\" mom said.\n\n\"It was the only way we could get her to do it.\"\n\nThe four of us talked about that for a while. Mom and Charlie went to get more to drink.\n\n\"You know what your sister did?\" I asked.\n\n\"Yes.\"\n\n\"Don't try and top her, okay?\" All I got was a smile.\n\nMom came back with dad and sat with us.\n\n\"Dawn says you are busy,\" dad said.\n\n\"A little.\"\n\n\"Don't neglect your family,\" mom told me.\n\n\"I'm not. They are busy too.\"\n\n\"All of you make sure you take time for each other.\"\n\n\"We do, mom.\"\n\nThey wanted to talk about everything I was working on for a while until Pete and Brian came over, wanting to watch football. Mom went to the kitchen. Samantha stayed to watch football. During halftime, Brian and Pete went to the kitchen to get a beer.\n\n\"Have you bought any new weapons lately?\" Dad asked.\n\n\"I moved up from the custom Remington 700 for shooting a grand to a Chey Tec 408.\"\n\n\"What is that?\"\n\n\"It is built just for long-range shooting. It's the rifle used in the movie Shooter.\"\n\n\"Is that the big one in the special case in the safe?\" Samantha asked.\n\n\"Yes, I haven't had time to shoot it yet.\"\n\n\"I know where it is. You want to see it, Larry?\" Samantha asked.\n\n\"Sure.\"\n\nSamantha got up and walked my dad to the elevator, and they went down to the saferoom.\n\nBrian and Pete came back.\n\n\"Where did they go?\" Brian asked.\n\n\"To look at a new gun.\"\n\nIt was the end of the ballgame before I saw Samantha and my dad again. They came off the elevator, laughing.\n\n\"That is a serious piece of hardware,\" dad said.\n\n\"It should be. It's good out to a mile.\"\n\n\"Damn!\"\n\n\"I'll have to get it set up for 1000 yards first. I'll have to find somewhere I can shoot a mile.\"\n\nEveryone had eaten plenty at lunch, so we all just snacked until bedtime. Dawn and I were getting ready for bed when Amy came into the bedroom.\n\n\"Sis is sleeping with Brian and Angie. I'm going out to the pool house,\" Amy said.\n\n\"Okay. Keep it down,\" I said.\n\nDawn and I climbed in bed. Soon, Dawn was busy sucking my cock now that we were alone.\n\n\"Can I sleep in here?\" We heard Angie ask.\n\nWe looked up, and she was standing in the doorway naked.\n\n\"Sam is sitting on his head,\" Angie said.\n\n\"Get in bed, you can help,\" Dawn said.\n\nAngie crawled onto the bed next to Dawn. I watched as they laughed and giggled while they sucked my cock. When Angie got into deep throating me, Dawn was running her hand through Angie's hair as she worked her mouth up and down.\n\n\"Emmm...emmmm...emmmmmm\" was coming from Angie as she worked her mouth up and down for a while.\n\nAngie kept going as Dawn watched. I finally thrust up and pumped cum into her mouth.\n\n\"Emmmm...\"\n\nAngie moved and laid next to me. Dawn crawled over me and got between Angie's legs.\n\n\"Let me do you too,\" Angie said.\n\nThe two of them got in a 69 while I watched. I watched Angie as she worked on Dawn's pussy for a while.\n\n\"Ahhhhh! I'm coming!\" Came from Angie as she thrust her pussy into Dawn's mouth.\n\nAngie came hard as Dawn kept going until they both came.\n\n\"Oh, fuck...you are good,\" Angie said as Dawn rolled off her.\n\n\"I practice a lot,\" Dawn said.\n\n\"I want to,\" Angie replied.\n\nDawn sat up on the bed.\n\n\"Is Brian letting you?\" She asked.\n\n\"Some. He loves to watch me do a woman.\"\n\n\"Do you like eating pussy?\" I asked.\n\n\"It's fun.\"\n\n\"Ask Brian if he is okay with you having fun without him,\" Dawn said.\n\n\"With men or women?\" Angie replied.\n\n\"Both,\" I said.\n\n\"He would probably be okay with another woman. I don't think he would go for me fucking other guys if he wasn't there.\"\n\n\"He is fucking another woman right now, and you are not there,\" Dawn said.\n\n\"That's different,\" Angie said.\n\n\"No, it's not,\" Dawn replied.\n\nDawn moved and straddled Angie's mouth and lowered her pussy down. Angie went back to work. I grabbed several pillows and lifted Angie's ass up, and I slid them under her. Then I got between her legs and slid my cock into her pussy.\n\nAngie moaned and groaned as I fucked her while she ate Dawn. She kept going until Dawn filled her mouth, then moved off her head.\n\n\"Oh...James...fuck me...\"\n\nI held her hips up as I drove into her pussy until she came in a huge gush.\n\n\"Ohhhhhh, fuck, yes!! I wish you could teach your brother a few things.\"\n\n\"Angie, it is up to you to tell him what you want and like,\" Dawn said.\n\n\"I don't think he likes me doing that.\"\n\n\"Tough shit!\" Dawn said. \"Angie, what have you and Brian been up too, anything?\"\n\n\"Yes! There are two couples at the firm we spend time with now. Dawn, one of the guys has a cock as big as James'.\"\n\nI moved and laid on the bed so Angie could get on top.\n\n\"Angie, you better teach him to let you tell him,\" Dawn told her.\n\n\"It's good, just not like with James.\"\n\n\"Well, part of that is because you are fucking his brother.\"\n\n\"I know!\" She and Dawn laughed.\n\nAngie began to work her pussy slowly as Dawn lay there and watched. I grabbed Angie's firm tits and played with them while she kept slowly working her pussy.\n\n\"Dawn, this guy I was telling you about is bigger than James.\"\n\n\"Do you like it?\"\n\n\"Ohhh, being stretched a little is so different. It feels good.\"\n\n\"Why does it feel good, Angie?\" Dawn asked.\n\n\"Oh, my. He is bigger and longer...and it feels so good.\"\n\n\"Why?\"\n\n\"I love riding him like this, but he gets on top and takes his time and slides in as far as he can go, then slides out and back in.\"\n\n\"Doesn't Brian do that?\"\n\n\"Not like that. This guy slides into me, then he pushes hard and holds it for a minute, then does it again.\"\n\n\"You like that?\"\n\n\"I am learning to like it!\"\n\n\"What else?\"\n\n\"He will keep doing that until I come in a huge orgasm, then he drives me crazy by slowly sliding in and out until I come again.\"\n\n\"Sounds hot.\"\n\nI was watching Angie and feeling her getting turned on as she talked to Dawn.\n\n\"Then...after I come again...he starts jamming into me...hard!\"\n\n\"And fast?\"\n\n\"Oh, fuck, yes! He slams into me so hard and fast...I...I start coming and keep coming!\"\n\n\"Then what?\" Dawn asked.\n\n\"Sometimes after I come so hard...I mean...I scream over and over...then he will pull his cock out and straddle me and make me open my mouth. Then he jams his cock in it and pumps cum in my mouth until it is running out! It is so fucking hot!\"\n\nAngie didn't realize it, but she had sped up on my cock.\n\n\"You like that?\" Dawn asked.\n\n\"Oh, my, god! The cum will run out of my mouth...then he will pull his cock out and grab it and use the end to rub the cum all over my face and tits.\"\n\n\"Then what?\"\n\n\"I push him back on the bed and start licking his cock until he is hard again! Then I get on my hands and knees, and he does from behind until I scream!\"\n\nAngie was working her pussy faster on my cock. I pinched her nipples hard.\n\n\"Ahhhhh...I'm coming!!\" Angie screamed.\n\nAfter she gushed all over me, she sat for a minute.\n\n\"Angie, what does Brian have to say about all that?\" I asked.\n\n\"Oh...he is in the other room fucking the guy's wife. He doesn't see that.\"\n\n\"Why not?\" Dawn asked.\n\n\"Oh...we don't watch each other,\" Angie said.\n\n\"Then, you need to stop fucking other people!\" Dawn scolded her.\n\n\"Why?\"\n\n\"Angie...if you two do not enjoy watching each other being pleased, you shouldn't be doing it! I told you that!\" Dawn exclaimed.\n\n\"Well...it is a little embarrassing...\"\n\n\"Why!\"\n\n\"It just is.\"\n\nDawn was mad now.\n\n\"Angie, we both told you that if you share, you do it because you both enjoy watching each other being pleased,\" I told her.\n\n\"We...we...\"\n\n\"If you do not, or cannot, watch either other, then what you are doing is wrong. We told you that the best part of our experience is watching the other pleased.\"\n\n\"But...Dawn...if he is watching...don't you feel inhibited?\"\n\n\"Hell, no! I scream! I come! I scream some more, and I come some more! Angie, I know how much James enjoys me getting off and being pleased! Fuck! You don't listen!\"\n\n\"Angie, Dawn gets off, even more, knowing how much I enjoy watching her. Brian should too. Have you two ever watched each other?\"\n\n\"We have only done it three times.\"\n\n\"And you get off on this guy fucking you like that, and Brian doesn't know it! How is he supposed to learn!\" Dawn exclaimed. \"Is that why you didn't stay in there while he was eating Sam?\"\n\n\"Well...I didn't want him to think I was...weird.\"\n\n\"Weird? What do you mean weird?\" I asked.\n\n\"Well, he likes to watch me eat someone, but I thought he wouldn't understand me wanting to watch.\"\n\n\"Do you want to watch?\" I asked.\n\n\"Yes.\"\n\n\"Has he told you he doesn't want you watching?\"\n\n\"No.\"\n\n\"Have you fucked him while he was eating someone?\" Dawn asked.\n\n\"No.\"\n\n\"Why not?\"\n\n\"I didn't want to interrupt him.\" Dawn rolled her eyes.\n\n\"Come with me, and be quiet,\" Dawn told her and grabbed her hand and pulled her off my cock.\n\nI got up and followed them down to the room Brian and Samantha were in. Samantha was busy sitting on Brian's head so she could look down at him. Dawn made Angie stand while she got on the bed. Dawn straddled his cock and worked it into her and eased down.\n\nAngie and I watched as Samantha worked her pussy on his mouth, and Dawn worked her pussy on his cock for a long time. Samantha got off while Brian was jamming his cock up into Dawn and pumping her full of cum. Samantha lifted her pussy off his mouth.\n\n\"Oh, fuck! That was so hot, Angie!\" Brian said.\n\nSamantha giggled and moved off his head.\n\n\"Dawn!\"\n\n\"Yes?\"\n\n\"Oh...uhh...\"\n\n\"Did you enjoy being fucked while you ate pussy?\" Dawn asked.\n\n\"Fuck, yes!\"\n\n\"Then why in the hell are you not doing it with your wife and your friends!\"\n\n\"What?\"\n\n\"Brian, what did we tell you if you were going to share?\" Dawn asked.\n\n\"Uhhh...\"\n\n\"Why are you two not watching each other being pleased?\"\n\n\"Well...we...\"\n\n\"Don't you want to watch your wife being pleased!\" Dawn scolded Brian.\n\n\"Well...I...\"\n\n\"Yes, or no, Brian?\"\n\n\"I guess?\"\n\n\"Is there some reason you do not want to watch your wife being fucked, Brian?\"\n\n\"I think it would embarrass her.\"\n\n\"Really? Haven't you wondered what all the screaming was about?\"\n\n\"Well...I just...\"\n\n\"Didn't care?\"\n\n\"No! I care!\"\n\n\"Obviously, not! We both told you two that when you share, you watch. You watch because you want to see the other being pleased. You watch because you enjoy watching. And most of all, you watch to learn something!\" Dawn exclaimed as she sat on his cock.\n\nBrian wasn't sure what to say.\n\n\"Brian, are you sure you would enjoy watching Angie being fucked?\" Dawn asked.\n\n\"Well, sure...\"\n\n\"Let's find out, shall we?\"\n\nI guided Angie to the bed and pushed her down on her back next to Brian and Dawn. I grabbed her legs and spread them and pushed them up as far as they would go. Brian watched as I got between her legs and fed my cock into her pussy.\n\n\"Is that what you want to see, Brian?\" Dawn asked.\n\n\"I guess...\"\n\n\"You guess? You either do, or you don't! Is that what you want to see, Brian!\"\n\n\"Sure.\"\n\nI slid all the way into Angie as she looked up at me. I began to slide my cock in as far as it would go and push into Angie for a minute, then slide out and do it again.\n\n\"Isn't that hot, Brian?\"\n\n\"I guess.\"\n\n\"You guess?\"\n\n\"Sure, it's hot.\"\n\nDawn slowly worked her pussy as she questioned Brian while I did to Angie what she said the other guy did to her.\n\n\"Ohhhh...I'm coming!!\" Angie screamed.\n\nI shoved my cock in and held it.\n\n\"Ahhhhhhh!!\"\n\n\"Isn't that what you want Angie to do? Get off like that, Brian?\"\n\n\"Yes.\"\n\nI began to slowly slide in and out of Angie like she had told us about. She was still turned on and only lasted about 10 minutes.\n\n\"I'm coming again!!\" She screamed.\n\nAngie tried to thrust up as I kept slowly sliding in and out of her as she came.\n\n\"Ahhhhhh!!\"\n\nWhen Angie started screaming, I started slamming into her hard, deep, and fast.\n\n\"Ohhh!! Fuck!!\"\n\nDawn had sped up and was riding Brian hard.\n\n\"Isn't that hot, Brian!\"\n\n\"Yes!\"\n\n\"Is Angie enjoying it!\"\n\n\"Yes!\"\n\n\"Do you like watching!\"\n\n\"Yes!\"\n\nI kept slamming into Angie as she screamed.\n\n\"That is so fucking hot, isn't it, Brian!\"\n\n\"Yes!\"\n\n\"Why! Why, Brian!\" Dawn shouted at him.\n\n\"Because she is getting off on it!\"\n\n\"Yes, she is!!\"\n\n\"Ahhhhh!!\" Came from Angie as I jammed my cock into her harder.\n\n\"Does that make you horny, Brian!\" Dawn questioned.\n\n\"Yes!\"\n\nAngie kept screaming as I pounded her.\n\n\"Why does it make you horny, Brian!\"\n\n\"Because she is getting fucked!\"\n\n\"Yes, she is!\"\n\n\"Ahhhhhh!! I'm coming!!\" Angie screamed.\n\nAngie kept screaming as I kept thrusting into her. Dawn was jamming her pussy onto Brian's cock as he watched his wife.\n\nAngie collapsed, and I pulled my cock out and straddled her chest.\n\n\"Open your mouth,\" I said.\n\nAngie opened her mouth, and I jammed my cock in it and let go.\n\n\"Emmmmmm!\"\n\nI pumped cum into her mouth until it was running out.\n\n\"Ahhhhh!!\" Came from Brian as he thrust up into Dawn and erupted.\n\nI pulled my cock out of Angie's mouth and used the end to rub the cum on her face and tits.\n\n\"Ahh, fuck!!\" Came from Brian.\n\n\"Ahhhhhh!!\" Came from Dawn as she came hard.\n\nI slid the end of my cock back in Angie's mouth and worked it in and out as she looked over at Dawn. My cock was still hard when I moved off her.\n\nI grabbed Angie around the waist and rolled her over onto her stomach. I spread her legs and grabbed her hips and pulled her ass up, and slid my hard cock back into her.\n\n\"Ahhhhhh!! James!!\"\n\nI started working my cock in her as Brian watched. After a few minutes, Angie pushed herself up on to her hands and knees. I grabbed her ass and held it tight as I slammed into her.\n\n\"That is so hot, isn't it, Brian?\"\n\n\"Yes.\"\n\nAfter a few more minutes, Angie started crying out again.\n\n\"Ohhhh! Fuck me!!\"\n\nAngie was shoving her ass back each time I drove into her. I wasn't going to let her rest as I kept thrusting into her.\n\n\"I can feel you like that, Brian! Your cock is hard again!\"\n\nI looked at Dawn, and she was driving her pussy onto Brian's cock hard and fast as he watched his wife.\n\n\"Ohhhh, fuck!! I'm coming!!\" Angie screamed.\n\nAngie jerked and screamed for a minute. I slid my cock out and rubbed then end on her asshole.\n\n\"Yes!! Fuck my ass!! Fuck my ass!!\"\n\n\"Your turn, Brian,\" Dawn said as she moved off him, and I moved.",
        "My brother moved quickly behind his wife and jammed his cock in her ass.\n\n\"Yes!! Yes!!\"\n\nWhen Dawn and I were walking out, Brian was slamming into Angie as she screamed.\n\n\"Do you think they understand now?\" I asked.\n\n\"They better.\"\n\nWhen I laid on the bed, Dawn straddled me and worked my cock into her cum filled pussy. I rubbed her tits for a long time as she slowly fucked my cock until we both came.\n\n*****\n\nFriday morning, I woke up when I heard Dawn moaning. I looked, and Angie was between her legs.\n\n\"Good, you are awake,\" Dawn said. \"Angie has been waiting.\"\n\nAngie sat up and looked at me and smiled. She pulled the sheets back and grabbed my cock and stroked it for a few minutes before she straddled it and worked it into her pussy. Dawn smiled and got off the bed and left the bedroom.\n\nAngie slowly worked her pussy on my cock as I played with her tits.\n\n\"Angie, does it make sense now?\" I asked.\n\n\"Yes...thanks.\"\n\nShe slowly worked her pussy as I rubbed her perky tits.\n\n\"Have you let both of them do you?\" Dawn asked.\n\n\"At the same time?\"\n\n\"Yes.\"\n\n\"How?\"\n\n\"I'm sure they could find a way!\"\n\nI fingered Angie's clit for a while until she came in nice orgasm.\n\n\"Ohhh, that felt good,\" she said.\n\n\"Angie, do you talk to Brian about other guys fucking you?\"\n\n\"Some.\"\n\n\"While you fuck?\"\n\n\"Some.\"\n\n\"Do it more.\"\n\n\"Are you sure he will like that?\"\n\n\"If you do it right, he will.\"\n\n\"...are you sure?\" I heard Brian say as he walked into the bedroom with Dawn.\n\n\"Yes. Just do it,\" Dawn said.\n\n\"Hi, honey,\" Angie said. \"Did Dawn interrupt?\"\n\n\"I was fucking Samantha. Are you enjoying yourself?\"\n\n\"Oh, yes.\"\n\n\"Dawn, are you sure?\" Brian asked.\n\n\"I'm sure.\"\n\nAngie was smiling at me and working her pussy when Brian got behind her. I pulled her down on top of me.\n\n\"Wow! What are you doing!\" Angie exclaimed.\n\n\"Just do it, Brian,\" Dawn encourage him.\n\n\"Ohhh! Brian, stop!\"\n\nBrian was trying to slide his cock into Angie's ass.\n\n\"Ahhhhh! No, Brian! Ahhhh!!\"\n\nI felt my brother slide his cock into his wife.\n\n\"Ohhhhhhhh...fuck!!\"\n\nAngie was looking at me with her mouth hanging open.\n\n\"All the way, Brian,\" Dawn said.\n\n\"Ahhhhhhh...fuck...oh my!\"\n\n\"Are you okay, honey?\" Brian asked.\n\n\"Hold on a minute.\"\n\nAngie took a couple of deep breaths.\n\n\"Emmmmmmmmm...\" came from Angie as Brian slid all the way into her ass.\n\n\"Ahhhhh!!\"\n\n\"Angie, are you okay?\" Dawn asked.\n\n\"Is this what you meant?\" She asked.\n\n\"Yes,\" I told her.\n\n\"Have you done this, Dawn?\" Angie asked.\n\n\"Ohhh, yes.\"\n\nAngie began to rock on my cock slowly, and Brian began to slide in and out of her ass.\n\n\"Ohh, my...\"\n\n\"Do you like it?\" Brian asked.\n\n\"Yes...\"\n\nAfter a few more minutes, Brian and I were fucking Angie hard as she moaned.\n\n\"Oh, fuck, yes!!\" Angie screamed.\n\n\"Keep it down, honey,\" Brian said.\n\n\"I don't care!\"\n\nWe kept fucking Angie until she started coming.\n\n\"Oh, fuck!! I'm coming!!\"\n\n\"What are you all doing?\" Samantha asked as she came in. \"Ohhh...I'm next!\"\n\n\"Oh, my, god...fuck me!\"\n\nBrian and I kept fucking Angie. She was getting loud as she grew toward a huge orgasm.\n\n\"Ahhhhhh!! I'm coming!!\" Angie screamed.\n\nI jammed my cock up into her and started pumping cum into her.\n\n\"Come in me Brian!!\"\n\nBrian groaned and started filling her ass.\n\n\"Yes!! Oh, fuck, yes!!\"\n\nAngie shook and jerked as she came very hard, then she collapsed on top of me.\n\n\"...ohhhhhh...my...\"\n\nBrian slid his cock out and collapsed on the bed.\n\n\"Are you okay?\" He asked.\n\n\"I'm...fine...\"\n\n\"Now you and your new friend can do that,\" Dawn said.\n\n\"Oh, we will,\" Angie said.\n\n\"I wonder if Kathy will let us do that?\" Brian asked.\n\n\"She will after I tell her how great it felt.\"\n\nAngie rolled off of me. Dawn smiled at her, then picked her legs up and spread them as she got between them.\n\n\"Oh...Dawn...I don't know...\"\n\nWe all watched as Dawn drove Angie to several more screaming orgasms.\n\nAmy was in the room now, giggling. Brian and Angie finally got up and left.\n\nI went with the girls to shower then I went downstairs to start the coffee. My dad was already in the kitchen with his coffee.\n\n\"Was that Angie, I heard screaming?\" He asked.\n\n\"Yes, it was.\"\n\n\"I guess she and Brian were having a good time.\"\n\n\"Actually, Brian and I were fucking her at the same time.\"\n\n\"What? No, you weren't.\"\n\n\"Yes, we were.\"\n\n\"Are you fucking everyone in the family!\" Dad asked, laughing.\n\n\"I try too.\"\n\n\"You were both doing her at the same time? I have only seen that in porn.\"\n\n\"You and Charlie should do mom.\"\n\n\"I think she would enjoy it...if she would let us. Maybe we can do Ann or Amelia.\"\n\n\"Do all of them,\" I said.\n\n\"Now that is something I would like some pictures of.\"\n\n\"I'll loan you my camera. I can make the prints before you leave.\"\n\n\"I don't know if your mom would let us do that.\"\n\n\"You can get Amelia to take pictures. She seems a little kinky.\"\n\nDawn came down a few minutes later with the girls, and we started cooking as everyone else showed up.\n\n*****\n\nSamantha had followed me out to the hot tub; I needed to soak. She took off her clothes since no one was outside and got in with me.\n\n\"What were you all doing to Angie last night?\"\n\n\"She and Brian didn't understand they were supposed to be watching each other being pleased.\"\n\n\"Oh. I think they understand now!\" We laughed.\n\n\"If any of the men come out, keep your tits below the water.\"\n\n\"Why?\"\n\n\"Never mind...\"\n\n\"I already let your dad eat me.\"\n\n\"What!\"\n\n\"When I took him down to see your new rifle. I got him to eat me.\"\n\n\"Samantha! Mom will kill you!\"\n\n\"Probably not. He said he wants to watch her eat me.\"\n\n\"How did that happen?\"\n\n\"I asked him if he wanted to eat me.\"\n\n\"That's it?\"\n\n\"Well...I was naked.\" I laughed at her.\n\n\"Did he enjoy it?\"\n\n\"Oh, yes. I did too. It runs in your family!\"\n\nWe were laughing when Dawn came out to check on us.\n\n\"What are you two laughing about?\"\n\n\"Tell her,\" I said.\n\n\"Tell me what...Sam? What did you do?\"\n\n\"I got Larry to eat me.\"\n\n\"What! When!\"\n\nShe told Dawn about it, and she ended up laughing.\n\n\"Sue will kill you!\"\n\n\"I don't think so.\"\n\n\"Make sure you put something on before you go walking through the house, Sam,\" Dawn said.\n\nDawn went back into the house.\n\n\"How can I let Sue eat me while your dad watches?\"\n\n\"I'll let you figure that out.\"\n\nWe soaked for a while then got out.\n\n\"Stop taking your time,\" I told Samantha as she dried off slowly.\n\nWe got dressed and grabbed something to drink and went and sat in the den with our parents and Amelia.\n\n\"Where are Brian and Pete?\" I asked.\n\n\"They are all downstairs playing pool,\" Dawn said.\n\nI looked at my mom, and she was looking at Samantha, smiling. When Samantha looked at her, my mom winked.\n\nWe all talked and watched a ballgame until about 5:00.\n\n\"I'm going to cook. I'm sure everyone has had all the turkey they want,\" Dawn said.\n\n\"I'll help,\" Ann volunteered.\n\n\"You, too, Amy,\" Dawn said.\n\nThey all went to the kitchen, and I went with them to help for a little bit. I helped Ann and Dawn get things started then went back to the den. Samantha and my mom and dad were not there.\n\n\"Where did they go?\"\n\n\"Samantha wanted to show them something in her room,\" Amelia said and winked at me.\n\nI sat down, knowing Samantha was up to no good.\n\nWe heard Dawn and Ann and Amy laugh several times as they cooked.\n\n*****\n\nDawn told us it was time to eat. I went to the basement door and yelled at them. They came up the stairs later like I had caught them doing something. My parents came down with Samantha, and they were all giggling.\n\nAfter everyone had eaten, Dawn and I made Amy and Samantha help us clean up while everyone else left the dining room.\n\n\"Sam, what were you doing upstairs?\" I asked.\n\n\"Letting your mom eat me.\"\n\n\"Sam!\" Dawn exclaimed.\n\n\"You have to try it, Dawn. She is as good as James!\"\n\n\"Was that all that happened!\"\n\n\"Well...she wanted to watch Larry eat me.\"\n\n\"I don't believe you did that! Did he?\"\n\n\"Yes.\"\n\n\"Me either!\" Amy said, then laughed.\n\n\"Don't you get any ideas!\" Dawn said to Amy. I didn't think it would do any good.\n\nAfter we had cleaned up, we wanted to watch football in the den, but all the women were talking and laughing.\n\n\"You all go watch football in another room. We are having some girl talk,\" Ann said.\n\n\"Come on, we can go down to the theater,\" I said.\n\nAll the guys went down to the theater, and I turned on the game.\n\n\"What did the girls do for your birthday, son?\" Dad asked.\n\n\"You want to see what they did? I have a DVD.\"\n\n\"Sure.\"\n\nI smiled and stuck the DVD I had of fucking Brandi Love and started it.\n\n\"Oh, cool, they got you a Brandi Love DVD!\" Pete said when he saw her.\n\nIt was quiet for a few minutes until the part where they showed me helping with the lights.\n\n\"What? You got to watch?\" Pete asked.\n\nIt was quiet for the next hour as they watched until it went off.\n\n\"I wish Ann would get me something like that for my birthday,\" Charlie said.\n\nThat was all it took. I spent the next half hour telling them about making the video.\n\n\"Dawn let you fuck her?\" Pete said.\n\n\"You saw it.\"\n\n\"Damn!\"\n\n\"What did that cost?\" Dad asked.\n\n\"I didn't ask.\"\n\n\"Is that going to be on the internet?\" Pete asked.\n\n\"No, it was just for us.\"\n\n\"Can I have a copy?\" We all laughed.\n\nWe watched the game for a while, then Dawn came to the door and motioned for me to come. I walked over to see what she wanted.\n\n\"How much longer will you all be down here?\" She asked.\n\n\"Another a few hours or so.\"\n\n\"Okay. Keep them down here.\"\n\nDawn left, and I sat back down.\n\n*****\n\nThe game went off about 10:00.\n\n\"I guess it is time for bed,\" Charlie said.\n\nWe all got up and went up the stairs. We heard the women laughing and carrying on before we got to the top. They were all in the den drinking wine and laughing, now in their robes.\n\n\"What have you all been up to?\" I asked.\n\n\"Hot tub,\" Dawn said and winked. \"You all finished with football?\"\n\n\"Yes. Are you ready for bed?\"\n\n\"I guess.\"\n\nEveryone got up and headed for the bedrooms. The girls were giggling as we walked up the stairs.\n\n\"What are you all laughing at?\" Brian asked Angie. She just laughed more.\n\nI got my giggling bunch into the bedroom.\n\n\"Okay. What's up?\" I asked. They burst out laughing.\n\nIt took me a minute to get control again. I took my clothes off and headed to the shower. Dawn got in with me a minute later.\n\n\"Should I ask?\"\n\n\"Probably not!\" Dawn said.\n\n\"Well, the guys enjoyed my video of Brandi Love.\"\n\n\"You didn't show them that!\"\n\n\"Sure, did.\"\n\n\"Oh, my, god. You didn't show them our video did you?\"\n\n\"Of course not.\"\n\nI soaped up Dawn and rinsed her off. She started soaping me up and laughing.\n\n\"Okay...talk...\"\n\n\"Your mom is good at eating pussy,\" Dawn said as she soaped me up.\n\n\"Should I ask?\"\n\n\"Your mom told Sam she knew your dad went down on her. That started it. After that, your mom wanted to do Sam. We all watched her do Sam, then Ann and Amelia did Amy. It went downhill from there.\"\n\n\"Who did you do?\"\n\n\"Your mom.\"\n\n\"I'll have to ask her about it. Did you do your mom?\"\n\n\"No.\"\n\n\"Deb talked Angie into letting her do her.\"\n\n\"I'm surprised.\"\n\n\"Angie was too!\"\n\n\"Who else?\"\n\n\"That was it. We ran out of time.\"\n\nWe finished showering and dried off and headed to bed. Amy and Samantha were asleep. We got in bed and went to sleep.\n\n*****\n\n\"Are you okay with that?\" Dawn asked me Saturday morning as we lay in bed.\n\n\"I guess.\"\n\n\"The girls had fun.\"\n\n\"I'm sure they did.\"\n\n\"Are we going shopping?\" Amy moaned.\n\n\"I'll have to find out,\" Dawn replied.\n\nDawn got out of bed and grabbed a robe and left.\n\n\"Was Ann good?\" I asked.\n\n\"Yes! I was surprised.\"\n\n\"What else happened?\"\n\n\"I ate Amelia while she watched Ann.\"\n\n\"Anyone else?\"\n\n\"They wanted to watch sis and me, but we ran out of time.\"\n\n\"You two were pretty tired last night.\"\n\n\"Busy, day.\"\n\n\"I guess we are going shopping,\" Dawn said, coming back.\n\nAmy and Dawn went to shower while Samantha stayed with me.\n\nAfter everyone had breakfast, Dawn, Ann, Amy, and my mom headed to the Escalade.\n\n\"Are you going with them?\" I asked Amelia.\n\n\"I'm not big on all those crowds.\"\n\nThey took the Escalade and left. Amelia was sitting at the bar in a robe with a cup of coffee. My dad, Charlie, Brian, and Pete were in the den with Samantha. Samantha was letting her robe fall open so they could all look.\n\n\"I have got to go downstairs and find some more bags to put all the leftovers in,\" I said and headed down the stairs.\n\nI was looking through the cabinets for more plastic bags.\n\n\"I haven't seen down here,\" I heard Amelia say.\n\nI turned, and she was standing at the bottom of the stairs.\n\n\"You must have missed that part of the tour.\"\n\nAmelia walked up to me.\n\n\"You know your dad has been fucking me at night.\"\n\n\"How would I know that?\"\n\n\"Because Ann said that Dawn would know like she knows everything.\"\n\n\"Dawn does know things like that.\"\n\nAmelia reached inside my robe and found my cock.\n\n\"I'm sure you have a nice cock just like he does.\"\n\nI looked at Amelia while she played with my cock. She started stroking it, then took her other hand and untied my robe and pulled it open.\n\n\"Emmmm, that looks nice,\" she moaned.\n\nShe stroked my cock for a few minutes, then got down on her knees and sucked it into her mouth.\n\n\"Emmmmm...\"\n\nI watched her for a while.\n\n\"Amelia, let me show you one other room in the house.\"\n\nShe slid her mouth off my cock and stood. I took her over to the doors to the mirror room and opened them. The lights were dimmed, so I took her hand and led her in then closed the doors.\n\n\"Wow,\" she said as she looked around.\n\nI led her to the bed and had her sit and turned the lights up.\n\n\"Oh, my!\"\n\n\"This is a special room for us. It's soundproof.\"\n\nShe looked around a minute, then turned to me and pulled my robe off. I laid back on the bed, and she took her robe off and got on the bed and went back to work sucking my cock.\n\n\"Will Dawn know about this?\" Amelia asked after she slid her mouth off my cock.\n\n\"She will when I tell her.\"\n\nAmelia went back to sucking my cock. I watched her for a while and was impressed by how good she was. I pulled her around, and she straddled my head. We spent a long time in a nice 69 until she got off several times.\n\n\"Emmmm, you are good,\" she said as she moved off of me.\n\n\"I try to please.\"\n\n\"You do. Ann said that Dawn told her you were very good.\"\n\nShe climbed over me and grabbed my cock and started it into her pussy. I watched as she worked her way down and settled. Amelia had a tight hot body and some nice tits.\n\n\"You are bigger than your dad,\" she said as she wiggled a little.\n\nAmelia started working her pussy slowly on my cock. I took her tits in my hands and squeezed them as I watched her take her time.\n\n\"This room is a little kinky,\" she said as she looked around.\n\n\"It can be fun.\"\n\nAmelia slowly worked her pussy on my cock as she watched in the mirrors.\n\n\"Ohh, this is hot,\" she moaned. \"I have always liked watching in a mirror.\"\n\nAmelia was watching herself as she worked her pussy. She looked at the mirror behind my head and leaned back and worked her pussy up and down as she watched.\n\n\"Emmm, this is fun watching. I have been trying to talk Charlie into videoing us.\"\n\n\"Would you like for him to do that?\"\n\n\"Yes. I have videos of my husband and me fucking other people. I can't get Ann into it, even though they have watched them.\"\n\n\"Keep trying. She may like it like her daughter does.\"\n\n\"You have a lot of videos?\"\n\n\"Quite a few.\"\n\n\"Do you have some of all of your wives fucking other people?\"\n\n\"Quite a few.\"\n\n\"They would be hot to watch.\"\n\n\"I also have a new high-quality video camera, Amelia.\"\n\n\"Would you like some videos of your parents fucking us?\"\n\nI smiled to myself.\n\n\"The camera is easy to operate,\" I said. Amelia smiled.\n\nAmelia leaned back on her hands and worked her pussy up and down slowly. For her age, she was hot and sexy. She kept working for a long time as I watched my cock slide in and out of her pussy.\n\n\"Ahhh!! I'm coming!!\"\n\nAmelia struggled to keep going, but she did as she came several times.\n\n\"Oh, that is nice! I am enjoying that you can keep fucking for so long.\"\n\n\"So can my dad.\"\n\n\"I know.\"\n\nShe pushed herself back up and sat on my cock.\n\n\"It seems you and your dad can fuck a long time. How did you learn to do that?\"\n\n\"Amelia, I focus on pleasing a woman, not coming in her.\"\n\n\"Don't you get turned on and need to come?\"\n\n\"Of course, but my desire to please helps me keep going.\"\n\n\"And you do!\"\n\nAmelia began to wiggle and work her pussy harder on my cock. I was squeezing her tits as she got into it more. She kept going for about 20 minutes.\"\n\n\"Are you sure this room is soundproof!\"\n\n\"Yes!\"\n\n\"Ohhhhh!! Fuck!! I am coming!!\" Amelia screamed as she started jerking.\n\nI twisted her nipples hard as she jerked repeatedly.\n\n\"Fuck!! Fuck!! Twist my nipples!!\"\n\nAmelia's pussy was gushing over and over as she squeezed my cock.\n\n\"Ahhhhhhhh!!\"\n\nShe collapsed on top of me. I wrapped my arms around her and held her.\n\n\"Oh, my. I have not come like that in years.\"\n\n\"Would you like to come so more?\"\n\n\"Oh...my. Of course.\"\n\nAmelia pushed herself up on her knees and rubbed her pussy for a minute. I grabbed her thighs and pulled her toward my head. After a few minutes, she was straddling my head, and I was licking her pussy as she looked down at me.\n\n\"I always found this way so hot,\" she said.\n\nAmelia looked into my eyes and smiled as I worked my tongue in her pussy and on her clit. She threw her head back and began moaning as I worked.\n\n\"Ohhhhh...fuck...yes! This is so good after having a cock in me!\"\n\nShe kept moaning for a bit longer.\n\n\"Ahhhhhh! I'm coming again!\"\n\nShe tensed up, then filled my mouth with her tasty juices.\n\n\"Ohhh, my...that was so good,\" she said as she slid back and sat on my chest.\n\n\"I am glad you enjoyed it.\"\n\n\"Most guys won't eat a woman after they have had their cock in them.\"\n\n\"My dad will. Amelia, I eat my wives after I come in them. They seem to enjoy it.\"\n\n\"Oh, my, god! I'm sure they do! I have heard some very special men will do that. How did they get you to do it?\"\n\n\"Dawn asked one day. She came so hard from me doing it now I do it for all my wives.\"\n\n\"Wow.\"\n\n\"Maybe you an Ann just need to ask.\"\n\n\"James, guys just don't do that. They...\"\n\n\"They think it is gay, and that is too bad,\" I said.\n\n\"You're right. Wow. I wish Charlie would...\" Amelia said as she sat and thought.\n\n\"If you don't ask, you may never find out,\" I told her.\n\nAmelia moved off my chest and turned away from me and got on her hands and knees.\n\n\"One more time, please,\" she said, looking back at me.\n\nI got up on my knees behind her and took a few minutes to rub her tight ass. I grabbed my cock and slowly slid it into her pussy.\n\n\"Emmmm...James...fuck me.\"\n\nI started slowly until she began to moan. The more she got aroused, the more I sped up.\n\n\"Ohhhhh! Fuck me!!\"\n\nI held her hips tight and started driving into her hard and fast.\n\n\"Yes!! That's it!! Yes!!\"\n\nSoon I was driving into her as hard as I could. She was screaming, and our skin was slapping together.\n\n\"Yes!! Fuck me!! Fuck me!!\"\n\nShe continued to scream as I drove into her hard and deep.\n\n\"Ahhhh!! Fuck!! I'm coming!! I'm coming!!\"\n\nAmelia started coming hard then she collapsed face down on the bed. I rode her down and kept driving my cock into her.\n\n\"Ahhhhhhh!!\"\n\nI jammed in deep and held it and let go.\n\n\"Of fuck!! Come in me!!\"\n\nI kept pumping cum into Amelia as she lay there, then I laid on top of her.",
        "\"Oh my, that was fucking fabulous...thank you...thank you.\"\n\nI pushed myself up and laid next to her.\n\n\"That was hot...\" she moaned.\n\nAmelia rolled onto her back and lay there quietly.\n\n\"Ohhh, that was great. James, do you and Dawn fuck like that all the time?\"\n\n\"I please all my wives as best I can.\"\n\n\"You do a great job.\"\n\nAmelia rolled toward me.\n\n\"James, would you fuck Ann if you got the chance?\"\n\n\"Of course, I would.\"\n\n\"Would Dawn be okay with that?\"\n\n\"She would want to watch.\"\n\n\"You four surprise me,\" Amelia said.\n\n\"We just enjoy making each other happy.\"\n\n\"Your dad seems to enjoy making women happy.\"\n\n\"Did he make you happy?\"\n\n\"Oh...he did, and Ann.\"\n\n\"That is good to hear.\"\n\n\"Do you think your dad has fantasies of fucking a mom and her daughter?\"\n\n\"Are you asking if he would like to fuck Dawn?\"\n\n\"I am.\"\n\n\"Amelia, my dad has always thought Dawn was sexy.\"\n\n\"Would she let your dad do her?\"\n\n\"I'm not sure. You would have to ask her.\"\n\n\"Let me ask you then, would you like to watch your dad fuck your wife?\"\n\n\"Amelia, I enjoy watching any man fuck my wife because I know he is enjoying it, and my wife is enjoying it. I know my dad would enjoy it.\"\n\n\"I'm sure he would.\"\n\n\"Amelia...Ann will know about this too.\"\n\n\"Oh...\"\n\n\"You can decide what to tell her,\" I said as I rolled off the bed.\n\n\"James...would you like to fuck Ann?\"\n\n\"Of course, I would, but only if Charlie knows about it.\"\n\n\"I think after he watched your dad fucking me, he might like to watch. What would Dawn say about it?\"\n\n\"I guess it would depend on how Ann asked her.\"\n\nAfter we left the mirror room, I took Amelia to the bathroom downstairs so we could clean up.\n\nWhen we went back up the stairs, Charlie and my dad were with Brian and Pete, scrolling through the TV channels. Deb and Angie were in the kitchen with Samantha talking. Amelia grabbed a cup of coffee and went into the den as I put leftovers away.\n\nLater, I went upstairs and showered and was putting some clothes on.\n\n\"Did Amelia enjoy herself?\" Samantha asked, walking in.\n\n\"You know she did. What were you three talking about?\"\n\n\"I got Angie to tell us about the two couples they have been fucking.\"\n\n\"I hope Deb doesn't tell Pete.\"\n\n\"I don't think she will, but she told us about the two of them having sex with another couple this week.\"\n\n\"Did she seem excited about it?\"\n\n\"Oh, yes. She can't wait to do it again.\"\n\n\"Are you going to put any clothes on today, or spend the day in your robe?\"\n\n\"I think Larry and Charlie want me to spend the day in my robe.\"\n\n\"Why?\"\n\n\"They have been looking.\"\n\n\"Have you been letting them?\"\n\n\"Of course. Your dad loves looking between my legs.\"\n\n\"Honey, any man would love looking between your legs.\"\n\nI kissed Samantha.\n\n\"Should I let them keep looking?\"\n\n\"Put some clothes on,\" I said, and we went upstairs.\n\nI finished getting dressed and was heading to the stairs. Samantha came out of her room in a thin T-shirt and a baggy pair of gym shorts.\n\n\"Tramp.\"\n\n\"You know I am.\"\n\nWe sat with everyone else to watch football. I was sitting in the loveseat, and Samantha had turned sideways and put her legs over mine and the edge of the loveseat so she could see the TV. Every time one of the guys got up to go to the kitchen, they would look up her shorts.\n\nWhen the game ended, I made Samantha get up. I went to the kitchen for a beer, and Deb and Amelia were at the bar talking. I grabbed a beer, and when I turned, Deb winked at me.\n\n*****\n\nDuring a break in the football, I went to the kitchen to get another beer. \n\n\"Get me one too,\" Charlie said, walking up.\n\nI got out two beers and handed him one.\n\n\"James...Amelia told me she enjoyed you doing her this morning.\"\n\n\"I see...\"\n\n\"She surprised me when she told me, but I am not surprised. She always enjoys a good fuck.\"\n\n\"Charlie...are you okay with it?\"\n\n\"Oh, sure. She said you drove her crazy.\"\n\nWe stood sipping our beers.\n\n\"You know what she asked me?\" Charlie said.\n\n\"I'm afraid to ask.\"\n\n\"She asked me if I would be okay with you fucking Ann,\" Charlie said and looked at me as I sipped my beer.\n\n\"Charlie, I am sure Ann is an incredible fuck, just like her daughter.\"\n\n\"Oh, she is. Larry is sure trying not to look between Sam's legs in those shorts.\"\n\n\"She does have a sweet little pussy.\"\n\n\"It looks like it!\" We laughed.\n\nWe heard the football game come back on, and I started back to the den.\n\n\"You didn't answer me,\" Charlie said.\n\n\"If you are asking if I would like to fuck Ann, of course, I would,\" I said as I kept walking.\n\nWe sat with the guys and watched the football game. Pete and my dad kept looking between Samantha's legs as she sat in the loveseat. When the game ended, I headed to the kitchen to get some snacks and more beers.\n\n\"I'll help,\" Samantha said.\n\nWe put some munchies on a big tray and grabbed some beers.\n\n\"You are killing my dad.\"\n\n\"He likes to look.\"\n\n\"Of course, he does.\"\n\n\"You think he would like to watch me do Ann?\"\n\n\"As long as you are naked, he would like to watch you do anything.\"\n\nWe carried two trays back to the den. I went back to get one more.\n\n\"You know what Amelia asked me,\" Deb said from behind me.\n\n\"I'm afraid to ask,\" I said as I turned around.\n\n\"She asked me if I would let Dawn's dad fuck me.\"\n\n\"Interesting.\"\n\n\"She said she was sure Dawn's dad would like to fuck a mom and her daughter.\"\n\n\"I'm sure he would.\"\n\n\"What is it with you guys?\"\n\n\"I guess it is something all guys want to do.\"\n\n\"Did you know Charlie has already done mom?\"\n\n\"I think that happened the other night. Are you surprised?\"\n\n\"Not really.\"\n\n\"Maybe you and mom could do one of her friends,\" I said.\n\n\"I doubt it.\"\n\n\"Would you let Charlie fuck you?\"\n\n\"Pete would go crazy.\"\n\n\"Maybe we could talk him into it now,\" I said.\n\n\"You want to let Dawn's dad do me, and mom!\"\n\n\"Yes, and I want to watch!\" We laughed.\n\n\"I'm sure Pete would too.\"\n\nWe walked back to the den. A little while after the game started, Pete and Brian went downstairs with Angie and Deb to play pool.\n\n\"I hope the women don't spend all of our money,\" dad said.\n\n\"They probably will,\" Amelia said. \n\nWe watched football until the break at the end of the first quarter. I went and got the girls more wine, even though Amelia had probably had a little too much. I took the glasses back, and Amelia and Samantha were laughing as Amelia sat next to my dad on the sofa.\n\n\"But you are driving Larry and Charlie crazy, Sam!\" Amelia exclaimed as they laughed.\n\n\"I better not...\" Samantha said.\n\n\"What are all of you up to?\" I asked.\n\n\"Amelia wants me to take my clothes off so they can look!\"\n\n\"Don't encourage her,\" I said.\n\n\"Go ahead, Sam!\" Amelia teased her.\n\nSamantha stood up and grabbed the bottom of her T-shirt and pulled it off. My dad and Charlie were looking at her huge tits.\n\n\"Move!\" She told my dad.\n\nMy dad slid away from Charlie, and Samantha sat down between them as Amelia laughed. Both of them were looking at her tits. Samantha took one of their hands and placed it on a tit as Amelia laughed harder.\n\nI sat down in the loveseat and returned my attention to the game. It got quiet after some time, and Amelia moved to me in the loveseat.\n\n\"Slide over,\" she said.\n\nI slid over and looked where she had been sitting. My dad and Charlie had slid further apart. Samatha had her legs up over my dad's lap and was lying back in Charlie's lap. Charlie had leaned forward and was sucking on one of her nipples. My dad had worked his hand between Samantha's legs and was rubbing her pussy.\n\n\"Deb told me what you asked her,\" I said.\n\n\"What did she say?\"\n\n\"She didn't say no, but her husband may be a problem.\"\n\n\"He wouldn't want to watch?\"\n\n\"Not sure.\"\n\n\"Should I talk to him?\"\n\n\"He may take some convincing.\"\n\n\"Maybe I should go downstairs and talk to him.\"\n\n\"Be careful talking in front of my brother.\"\n\n\"Let's go see,\" Amelia said and stood.\n\nI got up and followed her to the stairs, and we headed down. I was surprised when I saw Deb and Angie with no tops on and just their bras.\n\n\"Are you four having a good time?\" I asked.\n\n\"We are playing strip pool!\" Deb said and laughed.\n\n\"Are you hustling Brian?\" I asked.\n\n\"Not yet!\"\n\n\"Can I play?\" Amelia asked.\n\nPete looked up at her.\n\n\"Sure,\" he said.\n\nI stayed and watched until they finished the game they were playing. Deb had won, and the guys took off their shirts, and Angie took off her jeans. Pete was looking closely at Angie in her bra and panties.\n\n\"I better sit this one out,\" Angie said as she sat down.\n\nAmelia picked up a cue, and they started again. I watched for a while as Amelia deliberately lost, and Brian won. Deb took her jeans off, and Pete took his jeans off. Amelia pulled her top off and didn't have a bra on. As they were starting another game, I went back upstairs.\n\nI was a little shocked when I saw my dad sliding off Samantha's shorts. Charlie was looking at Samantha as he rubbed her tits. I walked to the kitchen and got out my cell phone and sent Dawn a text.\n\n\"You may want to give Ann and mom a head's up. Their husbands have Samantha naked on the sofa.\"\n\nI hit send and turned to get another beer. I stood in the kitchen and sipped my beer as I watched. My phone beeped. I looked, and it was a text from Dawn.\n\n\"SEND PICTURES!!\"\n\nI laughed, then I walked to the den and took several pictures with my phone and sent them to Dawn. I sat in the loveseat and watched.\n\n\"Larry, are you just going to look?\" Samanta asked.\n\n\"I'm enjoying looking, Sam!\"\n\nMy dad finally slipped two fingers into Samantha and worked them in her pussy for a few minutes.\n\n\"I have a better idea,\" Samantha said as she sat up.\n\nShe leaned back into the sofa and spread her legs.\n\n\"Who's first?\" She asked.\n\n\"Oh, honey, we couldn't,\" dad said.\n\n\"Sure, you can.\"\n\nMy dad didn't hesitate too long before he got on the floor in front of Samantha and started licking her pussy as Charlie watched.\n\n\"Oh, eat me, Larry!\" Samantha exclaimed.\n\nMy dad pulled her to the edge of the sofa and went to work on her. Charlie was playing with her tits as I took a picture.\n\nI watched for a long time until Samantha came in a gush. My dad took his time licking up all her juices. My dad and Charlie were having fun. \n\n\"Are you ready, Charlie?\" Samantha asked.\n\n\"Oh, yes.\"\n\nSamantha surprised him when she got up and climbed on the sofa and stood next to him. She put one leg up on top and moved her pussy over Charlie's head. He leaned back, and she lowered it down to his mouth. They hadn't noticed me taking pictures with my phone.\n\nMy dad rubbed Samantha's ass as Charlie worked on her pussy. They kept this up for another half hour until Samantha came hard. My dad sat back and looked, then laughed. Samantha sat back down between them. \n\nMy phone beeped. I looked, and it was from Dawn.\n\n\"We will be home in a few hours.\"\n\n\"Take your time. Your dad and mine have been eating Samantha!!\"\n\n\"Are you kidding!!\" I got back.\n\nI sent her several pictures.\n\nA minute or two later, I got a text back.\n\n\"They think it is funny!!\"\n\n\"Good, because I am not sure how far this will go.\" I sent.\n\n\"Wait and see!!\" I got back.\n\nI looked over at them, and Samantha was unzipping Charlie's pants as he watched quietly. She worked his cock out and was slowly stroking it. She kept it up for a few minutes, then she got up on her hands and knees and started giving him a blowjob as my dad looked at her ass, now in his face.\n\nI sent Dawn another text.\n\n\"You better ask my mom and Ann if it is okay if their husbands fuck her?\"\n\nDawn sent a text back.\n\n\"They said sure!!\"\n\nI sent her back a text.\n\n\"Are you sure???????\"\n\nI waited until I got a reply.\n\n\"They think it is hilarious!! We will be there in about an hour, can you time it right????\"\n\nI sent back a reply.\n\n\"I'm sure I can!! You better not be lying to me!!\"\n\nI got a reply.\n\n\"I'm not!!\"\n\nThere was a picture attached. I opened it and looked. It was a picture of Ann and my mom with a thumbs up and smiling.\n\nSamantha's hot ass was just too tempting for my dad. He was working his fingers in her pussy as her head moved up and down. After a few minutes, my dad stood and dropped his pants and grabbed his cock. He got behind Samantha on the sofa as Charlie watched him work his cock into her. I took several pictures and sent them to Dawn.\n\nSamantha kept sucking, and my dad kept fucking her for a while.\n\n\"Ohhh, Larry! Fuck me!\"\n\nMy dad was driving his cock into Samantha as she held herself up. Charlie watched as he fucked her for about 20 minutes.\n\n\"Ohh!! I'm coming!! Come in me!!\"\n\nSamantha cried out and started coming, then my dad groaned and pumped cum into her.\n\n\"Ohhhh, yes!\"\n\nDad was holding his cock in her as he rubbed her ass and back.\n\n\"Emmmm, did you enjoy that, Larry?\" Samantha asked as she looked back at him.\n\n\"Oh, yes...but I am in trouble now,\" he said as he slid his cock out and sat.\n\n\"Charlie? Are you ready? You don't mind a little cum, do you?\" Samantha teased him as she turned around and held her ass in front of him.\n\nCharlie didn't waste any time getting up and dropping his pants. He got on his knees behind Samantha as she watched him work his cock into her.\n\nCharlie worked his cock in Samantha for a while as she wiggled her ass.\n\n\"Is this okay?\" My dad asked me.\n\n\"I guess. But you will have to ask mom.\"\n\nCharlie had sped up and was working his cock harder in Samantha. I got a message on my phone from the gate; it was Dawn. I grinned and laughed to myself.\n\nI waited a few minutes, then...\n\n\"We're back!\" My mom exclaimed as they came through the door.\n\n\"Oh, shit!\" Came from Charlie.\n\nThe women walked up to the sofa.\n\n\"What are you doing?\" Ann asked, and they all laughed.\n\n\"I'm fucking her sweet pussy!\"\n\n\"You two are in so much trouble,\" mom said.\n\nThe ladies stood and watched and giggled.\n\n\"Oh, Charlie! I'm coming!! Come in me!!\"\n\nCharlie groaned and started filling Samantha with more cum. He sat back on the arm of the sofa after he stopped. He looked at Ann, waiting for it. The women all walked to the kitchen as they laughed.\n\n\"That was good. We will have to do it again,\" Samantha said as she sat.\n\nMom walked to me and sat on the loveseat with me.\n\n\"Where is Amelia?\"\n\n\"Playing strip pool.\"\n\nAnn and Dawn sat in the other loveseat and sipped their wine. I felt my mom run her hand over my hard cock. She looked at me and smiled as she rubbed my cock through my pants. \n\n\"Sam, why would you let two old guys fuck you?\" Ann asked.\n\n\"Because it is better than one! They didn't fuck like old guys!\" We all laughed.\n\n\"You two are in so much trouble,\" Ann said.\n\n\"Sorry,\" Charlie said, and they all laughed.\n\nMy mom sat her glass of wine down and stood and then moved between Samantha's legs. Dad watched as mom spread Samantha's legs and pulled her to the edge of the sofa. She started to slowly lick up the cum running out of Samantha.\n\nWe watched as Samantha had several huge orgasms as she was eaten.\n\n\"Now I am horny,\" Ann said.\n\n\"Me too,\" my mom added.\n\nThey stood and started taking their clothes off. I laughed and got up and went to the stairs to see what was happening down there. I went down the stairs and stood at the bottom.\n\nDeb was lying back on the pool table as Amelia went down on her. Brian was behind Amelia, fucking her. I was very surprise when I saw Angie sitting on Pete's lap, fucking him.\n\n\"We lost,\" Deb said as she looked at me.\n\n\"Don't make a mess on my pool table.\"\n\nI watched for a bit then went back up the stairs. Dawn and the girls were in the kitchen getting wine. I looked, and Ann was fucking my dad, and my mom was fucking Charlie.\n\n\"Is everything okay?\" I asked.\n\n\"Seems to be,\" Dawn said. \"What is going on down there?\"\n\n\"The women lost,\" I said.\n\nThe four of us sat at the bar, and the girls were giggling.\n\n\"How did this start?\" Dawn asked.\n\n\"How do you think,\" I said.\n\n\"Dawn?\" Samantha asked.\n\n\"What?\"\n\n\"Since Larry is doing your mom...can he do you?\"\n\n\"I don't know about that, Sam.\"\n\n\"Mother and daughter,\" Amy said.\n\n\"You two are terrible!\"\n\n\"Maybe Deb will do Charlie,\" Samantha said.\n\n\"Doubt it,\" Dawn said. \"Pete wouldn't go for it.\"\n\n\"He is banging Angie right now,\" I replied.\n\n\"What?\" Came from Dawn.\n\n\"Brian is doing Amelia while she goes down on Deb.\"\n\n\"Well...\"\n\n\"What is for dinner?\" I asked.\n\n\"Leftovers,\" Dawn said as she went to the fridge.\n\nThe four of us got out all the leftovers and warmed things up and got them ready. We had heard Ann and my mom coming earlier, and they were now laughing.\n\n\"You all come and eat,\" I said to them.\n\nThey got up laughing and walked to the kitchen. I went down the stairs.\n\n\"Dinner is ready.\"\n\nDeb was on the floor between Angie's legs going down on her as everyone watched. I went back upstairs to a lot of laughter.\n\n\"Shopping was insane,\" Dawn said.\n\n\"You say that every year, yet you keep doing it.\"\n\nEveryone came up from downstairs later, wearing their clothes, trying to figure out what was going on as they looked at the naked bodies.\n\nAfter we all ate and laughed, Dawn took my hand.\n\n\"Come with me.\"\n\nI got up and followed her to my study.\n\n\"Did she enjoy it?\" Dawn asked.\n\n\"Oh, yes. Very much.\"\n\n\"You know my mom will know.\"\n\n\"I told her that.\"\n\n\"What did she say?\"\n\n\"She asked me if I wanted to fuck your mom.\"\n\n\"Do you?\"\n\n\"You know I do.\"\n\n\"Pervert.\"\n\n\"I'm sure your dad would like to watch.\"\n\n\"I guess he would.\"\n\n\"Amelia asked me if my dad would like to do a mom and her daughter.\"\n\n\"You guys are terrible!\"\n\n\"Would you?\" I asked.\n\n\"Only if you can talk Deb and your mom into letting my dad do them!\" Dawn said, laughing, knowing Deb wouldn't do it.\n\n\"I'll ask Deb.\"\n\n\"James!\"\n\nDawn smiled at me and pulled me down and kissed me, and we left the study.\n\nEveryone was gone from the kitchen except Samantha.\n\n\"Where did everyone go?\" I asked.\n\n\"To shower. Sis went with Deb and Pete,\" Samantha said.\n\nSamantha helped us clean up the kitchen.\n\n\"Would you do it, Dawn?\" Samantha asked. \"Would you let Larry do you?\"\n\n\"Sam!\"\n\n\"Would you?\" I asked.\n\n\"I don't think Larry would do it,\" Dawn said. \"Why? Do you want to watch?\"\n\n\"Oh, yes, he would,\" I said. Dawn shook her head.\n\n\"I bet Deb would do Charlie,\" Samantha said.\n\n\"You better go shower,\" Dawn told Samantha. She headed up the stairs.\n\n\"Would you really want to watch your dad fuck me?\"\n\n\"Fuck you, eat you, sure.\"\n\n\"Pervert!\"\n\nI kissed Dawn, and she picked up her glass of wine, and we sat at the bar.\n\n\"Did Amelia get all she wanted?\"\n\n\"That and more. She likes to scream...a lot,\" I said.\n\n\"Do you think your dad would really do me?\"\n\n\"If everyone agreed to it, I know he would.\"\n\n\"He would have to do mom and me!\"\n\n\"It only counts that way!\" We laughed.\n\n\"You would be okay with that?\"\n\n\"If you were okay with it. It would be interesting,\" I told Dawn.\n\n\"My mom will let you do her.\"\n\n\"Did she say that?\"\n\n\"Yes, while we were driving back. Your mom asked her.\"\n\nDawn and I talked and laughed about everything that had happened for a while.\n\nSamantha came down the stairs naked as she combed her wet hair.\n\n\"Did you forget anything?\" Dawn asked.\n\n\"No. What are we doing tonight?\" Samantha asked as she sat at the bar with us.\n\n\"Nothing, I guess. Why?\" I said.\n\n\"Deb says Pete is dying to do me.\"\n\n\"And?\"\n\n\"I told Deb I would sneak into the pool house tonight if she would let him fuck me.\"\n\n\"That is between you and Deb.\"\n\n\"Okay.\"\n\nSamantha poured herself a glass of wine.\n\n\"Just don't kill him,\" Dawn said.\n\nDeb walked out, naked, running a towel through her hair.\n\n\"Where is Amy?\" Dawn asked her.\n\n\"Blowing Pete.\"",
        "I poured her a glass of wine, and she sat with us.\n\n\"Deb, would you let Charlie fuck you?\" Samantha asked.\n\n\"That would probably be fun.\"\n\n\"I thought he might like to do a mom and daughter.\"\n\n\"I have a question for you, Dawn?\" Deb said.\n\n\"What is that?\"\n\n\"Would you let my dad do a mom and daughter?\"\n\n\"You and James are terrible!\"\n\n\"Would you let my dad do you?\" Deb asked again.\n\n\"I haven't decided yet.\"\n\n\"James, would you let dad do Dawn?\"\n\n\"It's not up to me.\"\n\n\"I don't think Ann would go for it anyway,\" Deb said.\n\n\"Ann is a little freaky,\" I told her.\n\n\"Seriously?\"\n\n\"Oh, yes.\"\n\n\"Would Pete let you do Charlie?\" Dawn asked.\n\n\"It's not up to him!\" We all laughed.\n\nEveryone started returning to the den. They either had robes hanging open or were wrapped in towels. We all sat and talked and laughed for a while.\n\n*****\n\nI was getting ready for bed with Amy and Samantha when Dawn walked in with Angie.\n\n\"I'll see you in the morning, I am sleeping with Angie and Brian,\" Dawn said.\n\n\"Don't kill him!\" Amy exclaimed.\n\nAngie and Dawn left, and we got in the bed.\n\n\"Are you okay that they fucked me?\" Samantha asked.\n\n\"If that is what you wanted to do, sure.\"\n\n\"It was fun. Sis, I guess you're next!\"\n\nWe were tired and went to sleep as we held each other.\n\n*****\n\nWhen I woke up early Sunday morning, I could feel Dawn fucking my brother. I slipped out of bed and walked down to their room. Dawn was on top of Brian, riding him as Angie watched. I walked to the end of the bed and crawled up and over Angie and started sucking on her nipples. Brian was squeezing Dawn's tits as he kept looking over at his wife.\n\nAngie wrapped her legs around my back and grabbed my cock and slid it into her.\n\n\"Emmmmm...fuck me, James.\"\n\nI took my time fucking Angie as Dawn took her time. After everyone got off, we left Angie and Brian fucking and went back to our bedroom. We heard the girls in the shower, so we joined them.\n\n\"Is Brian getting used to you fucking Angie?\" Amy asked.\n\n\"He seems to be. He is fucking her like crazy now.\"\n\nAfter we showered, we headed down to the kitchen. My mom and Amelia were in the kitchen, starting breakfast.\n\n\"Good morning, mom,\" I said as I kissed her.\n\n\"Good morning.\"\n\nWe were getting things out when Charlie came in and poured himself a cup of coffee and sat at the bar.\n\n\"Good morning, daddy.\"\n\n\"About yesterday...\" he started to say.\n\n\"What did mom have to say?\" Dawn asked.\n\n\"She thought it was funny.\"\n\n\"I bet she did.\"\n\n******\n\nI was sitting with the guys while we watched football just after 1:00.\n\n\"Where are the ladies?\" Charlie asked.\n\n\"In the sunroom...probably swapping stories,\" I said.\n\n\"What do you mean swapping stories?\" My dad asked.\n\n\"Sex stories. I'm sure they are all talking about you all having sex.\"\n\n\"Oh...well...\" then we laughed.\n\nMy dad and Charlie started talking about all the sex while we watched football.\n\n\"Who is winning?\" I heard Dawn ask from behind us.\n\n\"Dallas,\" I replied.\n\nDawn walked around the end of the sofa and sat next to me. Nothing unusual, but she was naked and her hair was partially wet. My dad and Pete were looking at her.\n\n\"What are all of you doing?\" I asked.\n\n\"Soaking in the hot tub.\"\n\n\"Anything else?\"\n\n\"I'm listening to our moms and Amelia talking about all the great sex they have been having. What are you three talking about?\"\n\n\"Same thing,\" I said and laughed.\n\nDawn got up and went to the kitchen and got a bottle of wine and went back down the hall to the sunroom.\n\n\"Maybe we should join them!\" My dad exclaimed.\n\n\"Hot tub is not that big,\" I told him.\n\nAbout an hour later, I hear giggles coming from the hallway.\n\n\"We are going to start lunch,\" I heard Dawn say.\n\nMy dad and Charlie turned to look.\n\n\"Damn,\" came from Charlie.\n\nI didn't have to look. I knew all of the women were naked. Samantha walked to us and sat between my dad and me.\n\n\"Are you three going to watch football all day?\" She asked.\n\n\"That is what you do after Thanksgiving,\" I replied. \"You like football too.\"\n\nSamantha sat with us and watched football for a few minutes, then Amelia came and sat with us.\n\n\"Ann ran me out of the kitchen,\" she said as she sat on the loveseat.\n\n\"I'm curious,\" I said. \"Why did all of you decide to run around the house naked?\"\n\n\"Why not?\" Samantha said. \"We usually do.\"\n\n\"Sure! Why not!\" My dad said and laughed, then we all laughed.\n\n\"I guess after we eat, we will have to get dressed.\"\n\n\"Why?\" Charlie jumped in quickly.\n\n\"Well...unless all of you decide to join us...there is no fun in it.\"\n\n\"We can fix that!\" Charlie exclaimed.\n\nHe got up and started taking his clothes off. \n\n\"You too,\" he said to the rest of us.\n\nPete was hesitant because he had a hard-on from looking.\n\n*****\n\nBefore we finished lunch, everyone was talking about all the people they had sex with. Even Dawn told them a little about our parties.\n\n\"See, it is not so uncommon,\" Ann said.\n\n\"It may be between in-laws,\" Charlie said.\n\n\"Probably not,\" Dawn replied.\n\nWe finally got up, and the ladies cleaned up after lunch while the three of us went back to watching football, sort of.\n\n\"James, do all of you really have sex with a lot of your friends?\" Charlie asked.\n\n\"Occasionally.\"\n\n\"And you are okay with Dawn...and Sam and Amy doing that?\"\n\n\"You are okay with Ann doing it, aren't you?\"\n\n\"Well, yes...but with a bunch of people watching?\"\n\n\"That is the best part. You can't tell me that you don't enjoy watching Ann having sex with other guys.\"\n\n\"Well...I don't...\"\n\n\"And, Dad, you enjoy watching mom have sex with other guys...right?\"\n\n\"Of course I do. I enjoyed watching Charlie fuck your mom...but we didn't get to watch you do Amelia,\" dad said.\n\n\"I would like to watch you do Amelia, James,\" Charlie said.\n\n\"What about mom?\" Dawn asked.\n\n\"Would you let him do your mom?\" Charlie asked.\n\n\"If mom wants to do that. Do you, mom?\"\n\n\"Of course I do,\" Ann said.\n\n\"Honey, you want to do my mom?\" Dawn asked.\n\n\"Sure,\" I said. \"But I have a question?\"\n\n\"What is that?\" \n\n\"Dad? Have you ever thought about doing Dawn?\"\n\n\"What?\"\n\n\"Have you?\"\n\n\"Son...Dawn is a beautiful woman.\"\n\n\"Now that you have done Ann, have you thought about doing Dawn?\"\n\n\"Son...I can't help but think about doing all your wives!\"\n\nWe all laughed, though they were nervous.\n\n\"James, is that what you want to do?\" Ann asked.\n\n\"Ann, you are just like Dawn, hot and sexy.\"\n\n\"Is that a yes?\"\n\n\"It would depend on Dawn and Charlie,\" I told her.\n\n\"Charlie wants to watch,\" Ann said.\n\n\"Charlie, you want to do my mom and Deb? Mother and daughter?\"\n\n\"What?\" Came from Pete.\n\nI looked at Dawn's sexy mother, with her long black hair and sexy body.\n\n\"Honey, would you be okay with it?\" Ann asked Dawn.\n\n\"I guess by now, I would be good with it.\"\n\nAnn smiled at her. \n\n\"But...if James gets to do you...then Larry has to do me,\" Dawn said.\n\n\"What?\" Came from my dad.\n\n\"Don't you want to do a mom and her daughter?\" Dawn asked. \"It seems to be something all guys want to do.\"\n\n\"Okay, we are not going to be doing this,\" my dad said.\n\n\"Why not?\" Ann asked.\n\n\"Ann, you would be okay with me doing your daughter?\" My dad asked.\n\n\"That is for Dawn to decide. If James is going to do me...then...\"\n\n\"If we are going to do this...I understand it only counts if the guy does the mom and daughter at the same time,\" Dawn said, smiling.\n\n\"Really?\" Ann said.\n\n\"Yes,\" Amy replied.\n\n\"Then we better do it right!\" Ann said and stood.\n\nShe reached out to me, and I took her hand and followed her to the bedroom.\n\n\"Dawn!\" She said. \"Are you coming?\"\n\nAnn crawled on the bed, and I laid next to her. Dawn walked in and looked, then Ann got on her knees and straddled my head. I looked up at her pussy and started licking it. I looked down, and Dawn was getting on the bed. I kept licking Ann's pussy as Dawn started sucking my cock. Ann lowered her pussy down, and I slid my tongue into her.\n\nI was enjoying Ann's pussy, and in many ways, I felt like I was doing Dawn. I took plenty of time and worked my tongue deep into Ann until I started to hear her moaning.\n\n\"Oh, god...he is good,\" I heard Ann moan.\n\n\"Hey!\" I heard Charlie exclaim and laugh.\n\n\"You know why my husband is so good, dad?\"\n\n\"Why?\"\n\n\"He lets women tell him what they want him to do. It is the only way you can learn,\" Dawn told him.\n\n\"Remember that, Charlie,\" I heard Ann say.\n\nI kept working on Ann's pussy as I felt Dawn suck my cock. Ann moaned and worked her pussy on my mouth hard for a long time.\n\n\"Oh, fuck...I'm coming!\" Ann pushed down hard and gushed into my mouth. \"Ahhhhhhh! Yes!!\"\n\nAnn just sat on my mouth. I felt Dawn slide her mouth off my cock, then Ann leaned forward and sucked my cock into her mouth. The two of us took our time pleasing each other. I was really enjoying finally doing Dawn's mom as we both took our time.\n\n\"Emmmmmmm!!\" Came from Ann as she started jerking and coming again.\n\nShe squirted into my mouth and kept gushing. I jammed my cock up into her mouth and filled it full of cum.\n\n\"Emmmmmmm!!\"\n\nWe were both spent as Ann rolled off of me.\n\n\"Damn...\" she moaned.\n\nI felt Dawn move over me and suck my still hard cock into her mouth. Ann lay and watched her for a while.\n\n\"Are you ready?\" Dawn asked her mom.\n\n\"Oh...well...yes...I guess.\"\n\n\"Then get up here,\" Dawn said.\n\nDawn moved, and Ann sat up and straddled my hips. She grabbed my cock and started it into her pussy. Everyone was watching as she slowly slid down.\n\n\"Ahhhhhhh...\"\n\nAnn settled on my cock for a few minutes.\n\n\"Everyone is okay with this?\" She asked.\n\n\"Do it, mom,\" Dawn told her.\n\nAnn began to wiggle and work her pussy. She was smiling at me as she placed her hands on my chest while she worked. Dawn sat up and whispered in her mother's ear. Ann smiled at me. Dawn looked at me and smiled, then straddled my head and lowered her pussy down to my mouth.\n\nSuddenly, I felt Dawn's energy running through me as she wiggled on my mouth. Then I felt something different. It took me a minute to figure out it was Ann's energy. I lay there and let them do what they wanted to do for a long time.\n\nDawn's energy changed, and she moaned.\n\n\"Ahhhhhh...\" I heard come from Ann. \"Oh, yes...yes...yes.\"\n\nA surge ran through me, and then I felt Ann jerking as she came hard.\n\n\"Ahhhhhhh!!\" Came from her and Dawn at the same time, and they both came hard.\n\n\"Oh...nice...\" came from Ann.\n\nDawn moved off my head so I could watch her mother. Ann smiled at me as she kept slowly working her pussy.\n\n\"Oh, he is good,\" Ann said.\n\n\"Yes, he is,\" Dawn replied.\n\n\"That's hot,\" Amy said as she sat on the end of the bed and watched.\n\nI looked, and Amelia was lying back in one of the chairs as Samantha went down on her. My mom was on her knees, sucking dad's cock as he watched. Charlie was just standing and watching.\n\nAnn kept working her pussy in a sexy way as I watched. She had a very nice movement that felt great. She kept smiling at me as she expertly fucked my cock. I grabbed her tits and squeezed them as Dawn laid next to me and rubbed my chest.\n\n\"Hold her,\" Dawn whispered in my ear.\n\nI placed my hands on Ann's thighs and felt. It was only a moment before I felt her energy. It was so much like Dawn's. I smiled at her and pushed.\n\n\"Ohhhhh!!\" Came from Ann.\n\nShe looked at me, stunned.\n\n\"Oh...my...\" came from Ann as she worked.\n\nAnn smiled, then I was hit by her energy.\n\n\"Ahhh...\" came from me as I felt the rush. She smiled at me.\n\nI was connected with Ann just like I did Dawn. Ann worked for a long time as she built to her orgasm as I felt her energy as it grew and grew.\n\n\"Ohhh...my...god!!\" Ann screamed.\n\nShe worked her pussy faster and harder for a few minutes. She started shaking as she peaked in her orgasm. I pushed hard and held her there.\n\n\"Ahhhhhhhhhhhh!!\"\n\nAnn was jerking and shaking as muscle spasms ran through her. I kept pushing and holding her, and then I realized Dawn was holding my arm and pushing through me.\n\n\"Fuuuuuuuuuuck!!\" Ann screamed as she jerked over and over.\n\nI was beginning to release Ann.\n\n\"No!\" Came from Dawn, and her energy surged through me.\n\n\"Ahhhhhhhhhhhhhhh!!\" Ann screamed as she jerked, and her pussy gushed over and over.\n\n\"Dawn!\" I exclaimed. She kept pushing.\n\nAnn's mouth was hanging open, and her eyes were beginning to roll back in her head.\n\nDawn pushed harder.\n\n\"Ahhhhhhh!!\" I screamed and started coming.\n\n\"Fuuuuuuck!!\" Ann screamed as she jerked.\n\nI was thrusting my cock up into her over and over and pumping cum into her for what seemed like forever. Then Dawn's energy went away, and we released Ann.\n\n\"Ahhhhhhhhhhhhhhhhh!!\" Ann screamed.\n\nI collapsed, and Ann collapsed on top of me.\n\n\"Fuck!\" I heard my mom say. I also heard Dawn giggling.\n\nMy head was spinning as Ann laid on me. It was quiet in the room.\n\n\"What happened?\" I heard my mom say.\n\n\"...ohhhhh...\" Ann moaned.\n\nI wrapped my arms around her and held her as she recovered. She felt good and slowly turned her head and looked at Dawn.\n\n\"Surprise...\" Dawn said.\n\n\"Damn...\" came from Ann.\n\nAnn finally pushed herself up and sat.\n\n\"That was a surprise,\" Ann said. \"You can do that?\"\n\n\"He has learned,\" Dawn said.\n\n\"What happened?\" My mom asked again.\n\n\"We'll have to explain it later,\" I mumbled.\n\nAmy handed Ann a bottle of water, and she sipped at it.\n\n\"I have never come like that,\" Ann said.\n\n\"No, you haven't,\" Charlie added.\n\n\"Dad, I'll explain it later.\"\n\nAnn finally laid between Dawn and me for a few minutes.\n\n\"You know what would be hot?\" My dad said.\n\n\"Yes, I do,\" Dawn said as she sat up.\n\nWe watched as Dawn laid on top of her mom and started licking cum from her pussy.\n\n\"Payback is a bitch,\" we heard Ann say as she pulled Dawn's pussy to her mouth.\n\nWe watched the two of them in a 69 until they both came several times.\n\n\"Ahhhhhh!!\" Dawn screamed as she shook and jerked over and over.\n\nI could feel Ann's energy running through Dawn. She was paying her back and holding her at the top of her orgasm.\n\n\"Ohhhhhhh!! Fuuuuuuuuuck!!\" Dawn screamed.\n\nWe could hear Dawn's pussy repeatedly gushing as she kept coming. Everyone was watching Dawn as she jerked.\n\nWe all heard Dawn's pussy gush again then she stopped jerking. They laid together for a few minutes until Dawn rolled off her mom.\n\n\"Fucking, hot,\" Samantha said.\n\n\"Ann, will you do me like that?\" My mom asked. Ann and Dawn laughed.\n\n\"That was so hot,\" Amy said.\n\n\"That was hot, Ann,\" my dad said.\n\nAmy rolled to her back and pulled her legs up and spread them. My dad looked at her, then got on the bed between her legs and worked his cock into her. Amy wrapped her legs around him and pulled him in as he worked his cock slowly.\n\n\"James, that was special. Thank you,\" Ann whispered to me.\n\nDawn got off the bed, and Ann sat up slowly. Everyone was watching my dad work his cock in Amy. Dawn left the bedroom, and I got up and followed her to the kitchen. We grabbed some water and looked around the den.\n\n\"Where are Pete and Deb?\" I asked. \"And Brian and Angie?\"\n\nWe didn't see them anywhere and went back to the bedroom. My dad was now on top of Samantha, working his cock in her. Mom took my arm and walked us out to the kitchen.\n\n\"Son, what happened with Ann?\" Mom asked. \"I have never seen a woman come like that.\"\n\n\"It is a little hard to explain. You know how Dawn and I feel each other. Dawn taught me how to...extend her orgasm...you could say.\"\n\n\"By touching her?\"\n\n\"Sort of.\"\n\n\"It looked wonderful.\"\n\n\"Dawn says it is.\"\n\n\"Where are your brother and sister?\" Mom asked, looking around.\n\n\"I haven't seen them.\"\n\n\"Maybe they are downstairs again. Did you enjoy doing Ann?\"\n\n\"Yes. I have thought about making love to her for a few years.\"\n\n\"I think she got off on it,\" mom said.\n\n\"She had some help.\"\n\nMom and I sat in the kitchen and talked for a long time. Eventually, everyone came out of the bedroom and headed to different bathrooms to clean up. After some time, they all came into the kitchen looking for some wine. Ann sat with me and my mom.\n\n\"James...that was wonderful,\" Ann said. \"Thank you for sharing.\"\n\n\"You are welcome.\"\n\nCharlie brought his beer to the bar and stood with us.\n\n\"What time is your flight tomorrow,\" I asked Charlie.\n\n\"It's is at 6:00PM. We get into Athens early about mid-day.\"\n\n\"You better get some sleep on the plane,\" Dawn said.\n\n\"We are flying first class, so I am sure we can.\"\n\nIt seemed all the craziness had died down. Brian and Pete had come in from the pool house with Angie and Deb. Everyone hung out in the den until Dawn and my Mom made dinner. After we all ate, Brian and Pete went home with their wives. Everyone else was talking and watching TV.\n\n\"I have something to work on in the computer room,\" I told Dawn.\n\n\"Don't stay in there all night.\"\n\nI made several sets of DVDs of our parents fucking. I made copies and labeled them. When I left the computer room, it was a little after 10:00, and it appeared everyone had gone to bed. I went on up to our bedroom and got in bed with the girls.\n\n*****\n\nMonday morning, I was sitting in the den with my mother sharing some wine and talking. Everyone else was out in the pool.\n\n\"What did Dawn say when you wanted Amy and Samantha to join you two?\" Mom asked.\n\n\"It was something we both decided. We just felt very close to them.\"\n\n\"Good.\"\n\n\"Dawn's great-grandfather told us all of our blood ran together, now we know why.\"\n\n\"He sounds like an interesting man. The story you told about Ms. Williams is pretty wild.\"\n\n\"What I saw on the reservation was pretty wild. That plus the ghost I saw really shocked me.\"\n\n\"And Dawn is okay with the relationship you have with Ms. Williams?\"\n\n\"Yes, she understands why we have the relationship.\"\n\n\"Things have sure changed for you this last year, son.\"\n\n\"Yes, they have.\"\n\n\"Are you two going to join us?\" Dawn asked, walking in the backdoor naked.\n\n\"Not right now,\" I said.\n\nDawn dried off and walked to us and sat.\n\n\"What are they doing?\" My mom asked.\n\n\"Teasing the girls and having some fun,\" Dawn answered.\n\n\"Mom, what kind of fun are you and dad having?\"\n\n\"Are you sure you want to know?\"\n\n\"I was just curious.\"\n\n\"You remember the Smithsons?\"\n\n\"Yes, you two play golf and tennis with them.\"\n\n\"We have been playing more than golf and tennis with them.\"\n\n\"How long?\"\n\n\"Four or five years.\"\n\n\"How did it start?\" Dawn asked.\n\n\"Like it always starts. Dinner at their house, too much wine.\"\n\n\"You weren't drunk, were you?\" I asked.\n\n\"No, just less inhibited. He had always flirted with me, and your dad flirted with her all the time while played golf. Your dad talked his wife into doing me. After they watched, we just swapped up. He is actually a good fuck.\"\n\n\"Anyone else...recently?\" I asked.\n\n\"Jane, from across the street, comes over once a week, and we do each other. Her husband will come over and fuck me occasionally.\"\n\n\"What does dad do?\"\n\n\"He goes over and fucks Jane while her husband is doing me.\"\n\n\"Do all of you get together?\" Dawn asked.\n\n\"About once a month,\" mom answered and sipped her wine.\n\n\"Sue...what lead you to teach James about sex?\"\n\n\"I just figured he should know what he is doing. We had always talked openly about sex. Does that bother you?\" Mom asked Dawn.\n\n\"No. I had an early introduction to sex. I can feel my mom having orgasms.\"\n\n\"That must have been a little weird. Did your mom know?\"\n\n\"Yes. It upset her until we talked about it.\"\n\n\"Dawn, do you feel things like that from everyone?\"\n\n\"Some people I do. James and the girls I do, but especially from my mom.\"\n\n\"Does she feel that from you?\" Mom asked.\n\n\"Yes. That was how I got caught after having sex after my prom. I went home, and she was up and knew I had had sex.\"",
        "\"That must have been interesting!\" Mom said and laughed.\n\n\"It made for an interesting conversation. One day, she was supposed to be gone, and I had a boy over, and we were having some serious sex. I had several orgasms before we finished. After he left, I found my mom in her bedroom very satisfied.\"\n\n\"She came home?\" My mom asked.\n\n\"Yes. Her bedroom was next to mine. She had orgasms when I did.\"\n\n\"You two must have an interesting relationship!\"\n\n\"Well, she didn't mind when I brought boys home to fuck. She would stay in her room!\"\n\nWe laughed.\n\n\"The first time James came home with me, and we had some incredible sex, we heard my mom moaning from her room. I had to explain everything to James after that.\"\n\n\"What happened then?\"\n\n\"Mom and dad let James spend the night. My mom would fuck my dad while James and I are fucking. When she told dad why she was getting off so much, he thought it was funny.\"\n\n\"I guess your parents were pretty open about sex with you then.\"\n\n\"Well, they had to be.\"\n\n\"So, you are okay with them and Amelia?\"\n\n\"I am now. And, I am okay with the five of you having sex with each other.\"\n\n\"James, are you?\" Mom asked.\n\n\"Of course.\"\n\n\"You actually feel that, Dawn?\"\n\n\"If I try hard...I can actually feel dad inside of her.\"\n\n\"Damn!\" Mom exclaimed. \"That must have been weird.\"\n\n\"Incest by proxy!\" Dawn said, and we laughed.\n\n\"Dawn, can your mom feel James inside of you?\"\n\n\"Oh, yes. We can feel everything between us.\"\n\n\"Wow. I guess you felt Larry fucking her!\"\n\n\"I guess you could say I have had sex with Larry!\"\n\nWe laughed some more.\n\n\"Dawn, is that something you want to do now?\" Mom asked.\n\n\"Have Larry fuck me?\"\n\n\"Yes, honey.\"\n\n\"I guess.\"\n\n\"Just don't do to him what you did to your mom. It would kill him!\" Mom said, laughing. \"Son, are you okay with that and them having sex with the girls?\"\n\n\"If that is what they want to do, I am.\"\n\n\"One of my friends let her daughter's husband do the two of them one night.\"\n\n\"Did the husband get to watch?\" I asked.\n\n\"Oddly enough, yes.\"\n\n\"Did she enjoy it?\" Dawn asked.\n\n\"She said it was pretty hot.\"\n\nDawn got up and went to the kitchen and got a glass and brought the bottle of wine back and refilled my mom's glass.\n\n\"Mom, did Deb ever ask you if one of her boyfriends could do you?\"\n\n\"Oh, no...\"\n\n\"That is not what she told me,\" Dawn said. My mom looked at her a moment, then smiled.\n\n\"When did she tell you that?\"\n\n\"Last Saturday. She came by, and we all watched James fuck her.\"\n\nDawn was being a tease now.\n\n\"Oh!\"\n\n\"We thought it would be hot to watch...and it was.\"\n\n\"It is. I always thought they were hot together,\" mom said. \"They seem to always enjoy each other so much.\"\n\n\"Mom, did you do one of Deb's boyfriends?\" I asked. Mom smiled.\n\n\"Yes!\" Mom exclaimed and giggled.\n\n\"Which one?\"\n\n\"You remember the guy she was dating her senior year...Gordon, I think?\"\n\n\"Yes.\"\n\n\"I came home one day, and they were fucking. I stood in the doorway and watched. When Deb saw me, she laughed. Before he left that afternoon, he did me.\"\n\n\"Did you tell dad?\" \n\n\"Sure.\"\n\n\"She never told me about it,\" I said.\n\n\"I wish she had brought him back! He was a good fuck.\"\n\n\"He stopped hooking up with her...after he and I did Deb.\"\n\n\"What! Did she tell him you were her brother?\"\n\n\"Not at that time, but he found out later.\"\n\n\"You two were terrible!\"\n\n\"Maybe you can let Pete fuck you!\" I exclaimed and teased my mom.\n\nDawn and mom sipped their wine for a minute as they laughed.\n\n\"Or maybe Charlie can do you and Deb?\"\n\n\"Sue, can I ask you something?\" Dawn said.\n\n\"I guess you can.\"\n\n\"If you got off when James went down on you...did you ever want him to fuck you?\"\n\nMom looked at her and smiled.\n\n\"Oh, sure.\"\n\n\"Why didn't you then?\" Dawn asked.\n\n\"That would have been a little too far.\"\n\n\"I don't know why,\" Dawn said.\n\n\"Would you let your dad fuck you?\" Mom asked.\n\n\"I don't know. Mom might have something to say about it. I'm sure Larry would have something to say about his son fucking you.\"\n\nMom smiled and sipped her wine.\n\n\"That was something James never asked to do,\" mom added.\n\n\"I'm surprised!\" Dawn said and laughed.\n\n\"Dawn, I need to ask you something?\" Samantha said from the door as she stood there naked.\n\n\"What?\"\n\n\"Come here.\"\n\nDawn got up and walked to Samantha.\n\n\"Was that something you wanted to do?\" Mom asked.\n\n\"What?\"\n\n\"Fuck me?\"\n\n\"Sure, I did. I think all guys have that thought at some point.\"\n\nWe heard Dawn laugh, and she turned to walk back to us as Samantha went back outside. She sat next to me on the sofa.\n\n\"I would like to watch my dad fucking you,\" Dawn said.\n\n\"You would?\"\n\n\"Me too,\" I said.\n\nMom looked at us.\n\n\"Why?\"\n\n\"I would enjoy knowing you were being pleased,\" I said.\n\nDawn smiled and sipped her wine.\n\n\"Dawn, do you want to watch Larry doing your mom?\" Mom asked.\n\n\"Sure.\"\n\nLittle did they know we had been watching them.\n\n\"I want to watch James do Amelia...again,\" Dawn said.\n\n\"Again!\" Mom exclaimed.\n\n\"Yes. He did her Friday.\"\n\n\"What! Ann will die!\"\n\n\"Sue, my mom knows. She knows like I know when James has had sex with another woman.\"\n\n\"Oh, my...she didn't say anything. Did Amelia enjoy it?\" Mom asked, smiling.\n\n\"Several times,\" I replied, and they laughed.\n\nWe sat and smiled for a few minutes.\n\n\"Sue...I would like to watch my husband go down on you,\" Dawn said.\n\n\"It has been a while.\"\n\n\"Could I watch?\"\n\n\"I wouldn't care if you and the girls watched...but...\"\n\n\"But what?\"\n\n\"I don't know about everyone else watching.\"\n\n\"We watched Dawn go down on her mom,\" I said.\n\n\"I know...and it was hot.\"\n\n\"It was,\" I said. \"Mom, I want to watch Dawn do you?\"\n\n\"Dawn...do you want to do that?\" Mom asked.\n\n\"Of course, I do.\"\n\n\"Can you make me come like you made your mother come?\"\n\n\"I don't know. You want to find out?\"\n\n\"I guess...\"\n\nDawn stood and took my mom's hand, and they walked toward the bedroom. I followed them.\n\n\"Let's do each other at the same time,\" mom said.\n\nMy mom and Dawn crawled on the bed. Mom laid back and spread her legs. Dawn straddled her head and lowered her pussy down and sat on her mouth.\n\n\"Can you do it?\" I asked.\n\n\"I'm not sure.\"\n\nDawn sat and worked her pussy on my mom's mouth. I know my mom was waiting for Dawn to go down on her.\n\n\"Oh, my...\" I heard Samantha say from behind me.\n\nShe must have felt the energy and came into the house.\n\nDawn worked her pussy on my mom's mouth for a few more minutes, then laid on her, and they got in a got 69 as Samantha, and I watched.\n\n\"Where is everyone?\" I asked Samantha.\n\n\"Outside. Messing around.\"\n\nI took Samantha to one of the big chairs, and we sat and watched. I looked at Samantha, and she had her eyes closed. I watched the two of them until they both came after some time.\n\n\"Emmmm,\" came from Samantha.\n\nI knew what Samantha was feeling because I could feel Dawn's energy. She was really enjoying herself.\n\n\"Oh, my,\" I heard dad say. He was standing in the doorway watching now.\n\nDawn and my mom kept going until they both came several more times.\n\n\"Oh, Dawn!\" I heard my mom exclaim.\n\nI could feel Dawn trying to push my mom.\n\n\"Oh, yes!!\"\n\nWe watched as mom moaned and cried out for a while.\n\nSamantha looked at me and smiled.\n\n\"Dawn! Dawn! Dawn!! Ahhhhhhhhhhh!!\"\n\nMom was moaning more now as Dawn kept going.\n\n\"Oh!! Oh!! Ohhhh!!\"\n\n\"She is holding her,\" Samantha whispered to me.\n\n\"I know.\"\n\n\"Ahhhhhh!!\" Kept coming from my mom in frustration as her orgasm built.\n\nWe watched as mom squirmed as she screamed.\n\n\"Dawn!!\"\n\nWe could see mom's body shaking as her orgasm held it's peak. She moaned and cried out.\n\n\"Ahhhhhhh!! Oh, god!!\"\n\nMom starting bucking beneath Dawn as she screamed. Dawn was holding on as mom thrust her pussy up over and over.\n\n\"Ahhhhhhhhhhhhh!!\"\n\nI felt a huge surge of energy as Dawn let her go.\n\n\"Ahhhhhhhhh!! Fuck!!\" Mom screamed as she jerked beneath Dawn. \"Fuuuuuck!!\"\n\nMom's back arched, and she pushed Dawn up as she screamed.\n\n\"Ahhhhhh!!\" She kept screaming as she jerked repeatedly.\n\nDawn lifted her head and giggled, then rolled off my mom. Mom was lying there, breathing very hard.\n\n\"Dawn, honey, she will expect me to live up to that now!\" My dad said, and we laughed.\n\n\"What did you do to me...\"\n\n\"Just a special something for mothers-in-law,\" Dawn said as she turned around on the bed.\n\n\"That was the best,\" mom said.\n\nI saw mom roll to Dawn and whisper to her.\n\n\"I guess,\" Dawn said.\n\n\"Larry, come here,\" mom said. \"And why are you naked?\"\n\n\"We were in the pool.\"\n\n\"I bet.\"\n\nDad sat on the end of the bed.\n\n\"Dawn was so good to me you owe her,\" mom said.\n\n\"What do you mean?\"\n\n\"Eat her.\"\n\n\"What? No.\"\n\nDawn pulled her legs up and spread them as my dad looked.\n\n\"Go ahead,\" mom said.\n\n\"I shouldn't.\"\n\n\"You better! You may never get the chance again!\" Mom exclaimed.\n\nDawn smiled at him. My dad hesitated, but got on the bed and laid between Dawn's spread legs and started licking her pussy.\n\n\"That's it,\" mom said.\n\nDawn looked over at me as my dad got into tonguing her pussy. Mom was watching closely as he got into it.\n\nDawn lay there and enjoyed for a long time. Samantha had reached over and was stroking my hard cock.\n\n\"That is so hot,\" Samantha said.\n\nDawn started to squirm as dad worked on her pussy. I watched as he moved a hand up between her legs.\n\n\"Ahhhhhhhh...\"\n\nDad was now tonguing her and working his fingers in Dawn. She kept moaning for a while, then reached down and pushed his head into her pussy.\n\n\"Ahhhhh!!\" Came from Dawn as she thrust her pussy.\n\nI could feel her coming hard and heard my dad slurping up her juices. Dawn kept pushing his head down.\n\n\"Eat me, Larry!\"\n\nDad kept going, and soon, Dawn was thrusting her pussy up over and over.\n\n\"Ohhhh fuck!! Eat me, Larry!!\"\n\nDawn drove her pussy up and came hard.\n\n\"Ahhhhhhh!! Fuck yes!! Eat me!!\"\n\nDawn kept thrusting her pussy up as she came again.\n\n\"Oh, fuck!\" She said and collapsed on the bed.\n\nDad lifted his head up and looked at Dawn, then looked at my mom.\n\n\"Not bad, honey,\" mom said.\n\nMy dad crawled on the bed and laid between them. Mom moved down and started sucking his hard cock as we watch.\n\nSamantha stood and turned and lowered herself down onto my lap. She grabbed my cock and started it in her dripping pussy, then slid down slowly.\n\nMom was working her mouth up and down as we all watched.\n\n\"Hey,\" Amy said as she walked in. \"Did he do her?\"\n\n\"He went down on her,\" Samantha whispered.\n\n\"I thought so.\"\n\nMom was deep throating him now as Dawn lay there and watched. Mom stopped and smiled at her while she stroked dad's cock. Dawn looked over at us and winked then moved down by my mom. Mom was slowly stroking dad's cock when Dawn slid her mouth down on it.\n\n\"Oh, my, god!\" Came from my dad.\n\nDawn and mom were swapped up in sucking, and deep throating him as we all watched. Dawn finally moved over him and wrapped his cock in her tits and worked it between them as my dad watched.\n\nDawned worked her tits up and down on his cock as mom smiled and watched. She kept going until my dad was groaning.\n\n\"Ahhhh!\" Came from dad, and we watched as he shot cum between Dawn's tits.\n\nDawn knew what I liked when I did that. She sat up on her knees and slowly rubbed the cum all over her tits as dad watched.\n\n\"I can't do that as well,\" mom said and laughed. \"You have nicer tits!\"\n\nDawn grabbed his cock and started stroking it, just like she would do me to keep my cock hard.\n\n\"Damn,\" Samantha said as she worked her pussy on my cock.\n\nDawn kept stroking for a while, then leaned over and started sucking again. My mom smiled.\n\nWe watched as Dawn worked her mouth on dad's cock as he watched her.\n\nDawn sat back up on her knees and stroked for a minute. Then she surprised us when she straddled his cock.\n\n\"Oh, Dawn, no...\" my dad said.\n\nShe held his cock up and started it in her pussy and eased down slowly.\n\n\"Dawn, we shouldn't...\"\n\n\"Shut up, Larry!\" Mom said as Dawn slid all the way down.\n\nSamantha was squeezing my cock with her pussy as she sat and watched.\n\nDawn began to work her pussy slowly. My dad was mesmerized as he watched her.\n\n\"Where did everyone go...oh,\" I heard Ann say.\n\nIt was quiet as we all watched. Dawn worked her pussy slowly and deliberately for a long time.\n\n\"Ohhhhhhh!\" Came from Dawn as she had one of her gentle orgasms.\n\nShe sped up now and was working her pussy harder and faster. She reached and took dad's hands and placed them on her tits. Dad played with Dawn's tits as she fucked his cock. \n\nSamantha slid off my cock and stood. She grabbed her sister, and they left the bedroom.\n\nDawn was working her pussy faster as my dad squeezed her tits.\n\n\"Oh, fuck, yes!\" Came from Dawn as she worked harder.\n\n\"She is?\" We heard Charlie say.\n\nWe looked, and Amy had brought him in.\n\nWe watched as Dawn worked her pussy faster. I knew she was keeping him from coming.\n\n\"Ahhhhhh!! Fuck yes!! I'm coming!!\"\n\nI could feel Dawn's orgasm running through her. She kept going as she worked harder. She was working hard as she jammed her pussy down over and over.\n\n\"Ohhhhhh!!\"\n\nDawn was getting off. She leaned forward and let her tits hang in front of dad's mouth.\n\n\"Suck it, Larry!\" Dawn said.\n\nDad didn't think about all his cum on her tits when he started sucking on her nipple.\n\n\"Ohhhh! Fuck!! Yes!!\" Dawn started jerking hard as she came in a huge orgasm. \"Ahhhh, yes!!\"\n\nDawn stopped momentarily as dad sucked on her nipple. She then sat up and pulled her legs from under her and put her feet up by my dad, and leaned back onto her arms. She began to work her pussy up and down on his cock. I knew my dad was enjoying this. \n\n\"Yes! Yes! Yes!\" Dawn kept exclaiming as she worked her pussy up and down.\n\nI knew my dad was hurting to come in her, but Dawn kept working her pussy up and down fast as we all watched.\n\n\"Oh, fuck!! I'm coming!! I'm coming!! Come with me!!\n\nI heard my dad groan hard. We watched as he thrust up into Dawn over and over as he filled her full of cum.\n\nDawn finally fell back exhausted. My mom leaned over and kissed Dawn. Dawn pushed herself up and slid his cock out of her.\n\n\"Dawn, I will never hear the end of this,\" mom said, laughing.\n\nDawn slowly got off the bed and came over to everyone standing around me.\n\n\"Your turn,\" she said to her mom as she walked out of the room.\n\n\"What?\" Ann said and followed her.\n\nWe watched as mom leaned over and licked and sucked all of the cum off of dad's cock.\n\n\"I'm not sure about that, honey,\" we heard Ann say.\n\nDawn came back with a bottle of water.\n\n\"You may not get another chance, mom.\"\n\n\"I don't know...\"\n\n\"Get on the bed, mom,\" Dawn told her.\n\nAnn slowly walked to the bed and sat on the end.\n\n\"You want James to do you, I know you do, mom.\"\n\nDad and mom got off the bed and sat in the other large chair.\n\n\"We are waiting, honey,\" Dawn said to me.\n\nI stood and walked to the bed. Ann slowly crawled back against the headboard. I got on the bed and moved to her and pulled her legs apart as she watched. I was going to have some fun.\n\nI lifted her knees up and spread her legs a little, then laid between them and started kissing up her thighs. I teased her when I got near her pussy by running my tongue up her leg to the edge fo her pussy, then moving to the other leg and starting over. I kept kissing and licking up the insides of her thighs until I could see her pussy dripping. The next time I ran my tongue all the way up and over her pussy lips.\n\n\"Ohhh!\"\n\nI kissed and licked on her mound, teasing her until I slowly kissed down to her clit and kissed her pussy lips for a minute.\n\n\"Ohhh!\"\n\nI started licking her pussy slowly in long, deliberate strokes.\n\n\"Ohhh my!\"\n\n\"James, don't do anything I will have to do later!\" I heard Charlie say, and everyone laughed.\n\n\"You may be surprised, dad!\" Dawn exclaimed.\n\nI slowly licked up between her pussy lips. When my tongue touched her clit, I stabbed it a few times.\n\n\"Ohhhhh!\"\n\nI placed my mouth over her pussy and worked my tongue inside of her.\n\n\"Ohhhhhhhhh! Damn!\"\n\nI worked my tongue in her for a long time then sucked on her pussy lips. I keep hearing Ohhhh! over and over.\n\nShe tasted so much like Dawn and reacted just like her. This was going to be fun.\n\nI wrapped my arms around her legs and pulled her down onto the bed and spread her legs.\n\n\"Ohhh!\"\n\nI placed my mouth over her pussy and worked my tongue deeper into her.\n\n\"Ahhhhhh!! Fuck!!\"\n\nI worked on her pussy harder as she moaned. I kept going until I could feel her building to an orgasm.\n\n\"Ohhhhhhhhh!!\" She cried up and thrust her pussy up.\n\nI placed my mouth over her pussy and sucked on her pussy lips.\n\n\"Ahhhhhhhhh!!\" Ann jerked and started gushing and squirting like Dawn did as I sucked up her juices. \"Oh, god!!\"\n\nAnn kept humping her pussy up as I sucked up her juices. I drove my tongue into her as she moaned and moved my hand up to her pussy and wondered if she had the same spots as Dawn did. I was licking her clit when I slid two fingers into her.\n\n\"Ahhhhhhh!\"\n\nI pushed my fingers in deep, hoping she had the same spot deep in her pussy as Dawn did. My fingers reached the place, and I put pressure on it.\n\n\"Ohhhh, fuck!!\" Ann screamed.\n\nI thought I heard Dawn laughing as I rubbed Ann's spot. She had at least one spot, just like Dawn. I tongued her clit hard as I rubbed her spot with the tips of my finger.\n\n\"Oh, fuck!! James!!\" Ann screamed.\n\nI knew I heard Dawn laughing.\n\n\"What are you laughing at!\" Ann yelled at Dawn.\n\nI sucked her clit into my mouth hard and worked my fingers faster.\n\n\"Ahhhhhhh!! Fuck!! Fuck!!\" Ann screamed and started thrusting her pussy up.\n\nShe gushed and squirted in my mouth again.\n\n\"Ahhhhhhhhh!! Damn!!\"\n\nAnn jerked hard and fell back to the bed. I worked my tongue back into her pussy as I worked my fingers slowly. Ann was moaning softly.\n\nI was sucking and licking her pussy lips as I listened to her moaning softly. I slid my fingers over to place on the left side of her pussy and hoped she was like Dawn because the spot drove Dawn crazy. I had my fingertips where I wanted them and began applying pressure as I rubbed.\n\n\"Oh! Oh! Oh! What!!\" Ann cried out.\n\nShe was reacting just like Dawn did. I sucked one of her lips in hard and pulled on it, and rubbed harder and faster.\n\n\"What! What!! Oh, shit!! What are you doing!!\"\n\nShe was trying to pull away from me, so I held onto her.\n\n\"James!! Oh, fuuuuck!!\"\n\nAnn started quivering as I sucked on her pussy lip hard and sped my fingers up.\n\n\"What are you doing to me!!\" \n\nDawn was laughing loudly.\n\n\"Dawn!! Shut up!!\" \n\nDawn burst out laughing.\n\n\"Mom! He has discovered you have the same sensitive places as I do!!\"\n\n\"Oh, James!! Stop!! I am going to come!!\"\n\nI rubbed harder and gently bit down on her tender pussy lip.\n\n\"Ahhh! Don't bite me!! Fuuuuuck!!\"\n\nAnn exploded and jerked for at least a minute as she came repeatedly.\n\n\"James!! Stooooooppp!!\"\n\nI released her pussy lip and stopped rubbing. She was lying there, gasping.\n\n\"Oh, fuck!\"\n\nI heard Amelia giggling now.\n\nI slowly ran my tongue up the length of Ann's body until I got to a nipple and started sucking. Ann rubbed my head while I tongued her nipple. I had to try for one more place. I kissed on her nipple and slowly kissed over to the side of her tit. Dawn had a spot where her tit touched her side. I made my way there and stuck out my tongue and started licking.\n\n\"Ahhhhh!! What are you doing now!!\"\n\nDawn was dying laughing. I ran my tongue over the spot again.\n\n\"James!! Stop!!\"\n\nI kissed my way up her neck and sucked on her earlobe.\n\n\"Nooooooo!!\"\n",
        "\"I'll stop...if you get on top,\" I whispered to her.\n\n\"Okay! Stop!\"\n\nI kissed Ann and laid on my back. I looked over at Dawn, and tears were running down her cheeks from laughing so hard.\n\n\"Asshole!\" Ann said as she straddled my cock.\n\nI smiled at Ann as she grabbed my cock and worked the end into her dripping pussy. She slowly lowered herself down until she was sitting with her weight on me.\n\n\"You are terrible!\" Ann said, and Dawn laughed. \"Shut up, Dawn!\" That only fueled Dawn's laughter.\n\nAnn finally got down to business and started working her pussy on my cock. She had the same sexy wiggle that Dawn did. Everyone was watching as my mother-in-law fucked my cock.\n\nI reached up and grabbed her tits and squeezed them for a few minutes. I ran my hand over to her spot and lightly ran the tips of my finger over it.\n\n\"Stop! No more of that!\"\n\nAnn sped up as I played with her nipples. She got serious about it and worked her pussy faster for a while. I stroked her tits softly as she closed her eyes and got more into working her pussy on my cock.\n\nI could feel her energy spilling out into mine, though I wasn't sure she knew it. I slid my hands slowly down to her thighs and left them there. I felt for her energy without pushing any of mine into her. She was as sexually aroused as Dawn got when she was doing this.\n\nI looked over at Dawn, and she winked at me. Ann had her eyes closed as she worked her pussy. I began to push my energy into her slowly. Ann sped up, and I felt her getting more aroused. I pushed a little harder.\n\n\"Ahhhh! Oh, wait!\" Ann exclaimed as she stopped. \"You can do that!\"\n\n\"Surprise!\" Dawn said.\n\nAnn looked at me, surprised for a moment, then smiled and started working her pussy again.\n\n\"What is he doing?\" I heard Charlie ask.\n\n\"Same thing he does to me,\" I heard Dawn reply.\n\nI kept pushing, and Ann absorbed my energy.\n\n\"Ohhhhhhhh...wow...\" Ann moaned as she worked her pussy faster.\n\nI started merging my energy with hers, just like I did Dawn.\n\n\"Ohhh, my, yes...\" Ann moaned as she sped up.\n\nI was connected with Ann now, and deep down, I could feel Dawn, now that she had stopped laughing.\n\n\"Oh, yes! Oh, yes! Ohhhhhh...yeeesss...\"\n\nAnn sped up and more.\n\n\"Ohhh, yes!! Yes!! Yes!!\"\n\nAnn started coming hard as she kept working her pussy.\n\n\"Ahhhhhhhhh!! Fuck, yes!!\"\n\nAnn stopped and trembled like Dawn does.\n\n\"Ahhhhhh!!\" She screamed, and everyone heard her pussy gushing. \"Fuck!!\"\n\nAnn sat and looked at me as she gasped for air.\n\n\"Damn, James...\" Ann moaned.\n\nI reached out and grabbed one of Ann's legs and pulled it out from under her, then the other leg. I winked at her, and she smiled. She began to work her pussy on my cock again as I looked at her. After a few minutes, she leaned back and held herself up and started working her pussy up and down. Just like I wanted her to do.\n\nShe was smiling at me as she slowly slid her pussy up and down on my cock. With all her long black hair hanging behind her, she was so sexy.\n\nAnn kept going for a long time as I watched my cock slide in and out of her pussy. As she sped up, I could feel her getting more aroused.\n\n\"Emmmmmmm!\"\n\nAnn was sliding her pussy up and down faster now and getting into the feeling.\n\n\"Ahhhhhh!\"\n\n\"Go for it, mom!\"\n\nAnn kept working her pussy faster.\n\n\"Oh, fuck! Ohhhh, fuuuuuck!!\"\n\nAnn kept going faster.\n\n\"Ahhhh!! Fuck, yes!!\" Ann screamed.\n\nShe kept going as she started coming and squirting everywhere.\n\n\"Fuck!! Yes!!\"\n\nAnn gushed several times as she came hard and squirted.\n\n\"Ahhhh!!\" Ann collapsed back onto the bed.\n\n\"Damn,\" I heard Charlie say.\n\nI didn't want Ann to rest very long. I slid back and got up on my knees between her legs. I lifted her legs up and pushed them back to her sides as far as I could. I grabbed my cock with one hand and fed it into her and push hard until I hit bottom.\n\n\"Ahhhhhh!! No!!\"\n\nI looked at Ann and smiled as she smiled at me. I held her legs back and worked my cock in her pussy.\n\n\"Emmmmmmm...\"\n\nI worked my cock in her a little faster, bottoming her out each time. I liked looking at her lying there with her tits bouncing as I thrust into her. Ann moaned softly for a while until I sped up.\n\n\"Ahhhhhh! Yes!!\"\n\nI was going to have some fun with Ann. I kept working into her harder and harder as I felt her arousal growing.\n\n\"Ohhhh! Fuck!!\"\n\nI was thrusting into her hard now as she cried out. I kept feeling for her arousal as I thrust.\n\n\"Ahhhhhh!! Oh, yes!!\" Ann cried out.\n\nI could feel her nearing her orgasm. I pushed my cock into her and held it.\n\n\"Ohh!! Don't stop!!\"\n\nI held my cock in her as she grew frustrated. I pushed myself up onto my knees and slid my cock out of her.\n\n\"No!!\"\n\nAnn had her legs up and spread. I held my cock and slid back between her pussy lips and in as far as I could.\n\n\"Ahhh!! Yes!!\"\n\nI pulled my cock out of her and paused.\n\n\"James!!\"\n\nI heard Dawn laughing again.\n\nI slid my cock back into her pussy as far as I could.\n\n\"Ahhhh!!\"\n\nThen slid it out.\n\n\"James!! You asshole!! Fuck me!!\"\n\nDawn was laughing hard again.\n\nI kept sliding my cock back between her pussy lips and in as far as I could then slide out. I kept doing this as Ann cried out in frustration.\n\n\"Stop doing that!! Fuck me!!\"\n\nI kept teasing Ann as I did it over and over.\n\n\"Oh, god!! Fuck me!! Fuck me, pleeeeease!! Make me come!!\"\n\n\"What do you want, Ann?\" I asked as I slid in and out.\n\n\"Fuck me!! Make me come!! You are driving me crazy!!\"\n\nI slid my cock back into Ann and pushed.\n\n\"Ahhhhh!! Yes!!\"\n\nI slid my cock back out.\n\n\"Stop doing that!! Finish me!!\"\n\n\"What do you want, Ann?\"\n\n\"I want you to fuck me with that big cock!!\"\n\nI slid in and pushed against her.\n\n\"If you pull it out again, I will kill you!! Make me come, damn it!!\"\n\nI leaned into Ann as she looked at me. Then I started jamming my cock in her hard and fast.\n\n\"Ahhhhh!! Yes!! Yes!! Make me come!!\"\n\nI kept slamming into Ann as hard and deep as I could.\n\n\"Oh, fuck!! Yes! Yes! Yes! Yeeessss!!\"\n\nI kept driving my cock in harder and faster as she started coming.\n\n\"Oh, my, god!! Yes!! I'm coming!!\"\n\nAnn kept jerking as she came over and over as I jammed into her.\n\n\"Oh, fuck!! Oh, fuck!! Yes!! Fuck me more!!\"\n\nAnn's stomach arched up as she jerked more while she came.\n\n\"Fuuuuuck yeeeeessss!!\"\n\nAnn kept screaming as she thrust her pussy up. I jammed into her as hard and deep as I could.\n\n\"Oh, fuck!! Yessss!!\"\n\nI started pumping cum into Ann.\n\n\"Oh, yes!! Your cum feels so good!! Cum in me!!\"\n\nAnn screamed like Dawn did. I was still pumping cum into her pussy as she screamed.\n\nI looked over at Dawn, and she was rubbing her pussy. She looked at me seriously, and I heard in my head...\"Do it. Eat her.\"\n\nI only did to women I loved, and I loved Ann.\n\nAnn was lying there gasping for air as I held my cock in her. I leaned down and kissed her, then kissed down her neck as I pulled my cock out. I slowly licked and kissed her nipples as she moaned. I kissed my way down over her stomach and began kissing her mound.\n\n\"Ohhhh...that feels so good.\"\n\nI licked her mound slowly, inching my way to her pussy.\n\n\"Emmmmm...\"\n\nI moved back and ran my tongue up the length of her pussy lips.\n\n\"Oh!! Wait!! What!!\" Ann yelled.\n\nI slid my tongue into her deep and placed my mouth over her pussy.\n\n\"Oh, my, god...\" I heard Mom moan. \"That is so hot...\"\n\n\"James!! What are you doing!!\" Ann cried out as she tried to pull away.\n\nI grabbed her legs and held her as I went to work on her pussy.\n\n\"Oh, no! No!! NoNoNoNo!!\" Ann screamed and thrust her pussy up.\n\n\"Damn,\" came from Amelia.\n\nI kept working on Ann's puss as she screamed over and over for me to stop. Then she thrust her pussy up and screamed.\n\n\"Fuuuuuck!! I'm coming!! I'm coming!!\"\n\nAnn squirted, gushed, and thrust over and over as she screamed.\n\n\"Oh, my, god!! I'm coming again!! Ahhhhhhhh!!\"\n\nAnn was jerking all over the bed as I held onto her and worked my tongue in her.\n\n\"Jaaaaaammssseeee!!\"\n\nI took my mouth off her pussy and moved between her legs quicky as I pushed her legs back hard. I grabbed my cock and found her asshole, and pushed hard.\n\n\"Ahhhhhhhhhh!! Fuck!! Not my ass!!\"\n\nI jammed my cock in deep and began to work it in and out.\n\n\"James!! Ahhhhhhhh!! Fuck!! Fuck...my ass!!\"\n\nI thrust into Ann's ass while she kept screaming. I had seen my dad do her ass, so I knew she could take it.\n\n\"Damn, honey!\" We head Charlie exclaim.\n\n\"Fuck me!! Fuck my ass harder!!\"\n\nI was jamming my cock into her ass as hard and fast as I could. Her tits were bouncing around as she screamed.\n\nShe reached up and wrapped her arms around my neck and pulled me down and kissed me hard.\n\n\"Fuuuck!! I'm coming again!!\"\n\nAnn jerked and bucked as I drove into her ass for a few minutes.\n\n\"Oh...oh...oh...oh...Ahhhhhh!!\" Ann screamed and started coming one more time.\n\nAnn was slamming her head into the mattress as I kept jamming my cock into her ass.\n\n\"Oh...fuck...\"\n\nI jammed in hard and deep and started pumping cum into her.\n\n\"Ohhh...ohhh...ohh...oh...oh...oh...ohhhh...\"\n\n\"James!\" Dawn shouted.\n\nAnn had passed out. I slid my cock out of her as Dawn ran to her.\n\n\"Damn it, James!\"\n\nDawn felt her pulse.\n\n\"You did that on purpose!\"\n\n\"She has never passed out from having sex with me,\" Charlie said.\n\n\"She is okay,\" Dawn said then giggled.\n\n\"Here,\" Amy said as she handed Dawn a bottle of cold water and a towel.\n\nDawn poured the water on the towel and rubbed her mom's face for a minute.\n\n\"Let me try,\" I said as I took the cold water from Dawn.\n\n\"James, don't!\"\n\nI held the bottle up and poured the water on Ann's tits, down to her pussy.\n\n\"...ahhhh...\"\n\n\"Mom? Mom?\"\n\n\"...ohhh...what happened?\"\n\n\"You passed out,\" Dawn said.\n\n\"What? I did?\"\n\n\"You came so many times you passed out.\"\n\n\"Oh. Oh!\"\n\nAnn looked up at me.\n\n\"You are in trouble,\" she said. Everyone started laughing.\n\nI pulled Ann up and wrapped my arms around her and held her. She felt good.\n\n\"Sorry.\"\n\n\"No, you're not. And that was wonderful. Thank you.\"\n\nI held Ann for several minutes.\n\n\"Come, I will dry you off,\" I said as I released her and took her hand.\n\nI walked Ann to the bathroom and picked up a towel.\n\n\"Damn, I have cum running down my legs. I need to shower.\"\n\nI turned on the shower and waited until it was hot and took Ann in it.\n\nShe stood as I soaped her up and rinsed her off. She even had cum in her hair. I wet her hair down and grabbed Dawn's shampoo, and started working on all her long black hair.\n\n\"Emmmm,\" Ann moaned. \"James, that was so special.\"\n\n\"That is only for the women I love.\"\n\n\"Oh, Charlie is going to hate you!\" We laughed.\n\n\"Just ask him, Ann.\"\n\nI took my time running my hands through the shampoo and her hair. I was soaping up the ends of it as it touched her ass.\n\nAnn turned around and looked at my hard cock.\n\n\"Dawn said you got off on shampooing their hair,\" she said as she wrapped her hand around my cock.\n\n\"Are you okay?\" I asked.\n\n\"Oh, yes. That was a first.\"\n\n\"You are just like your daughter.\"\n\n\"Does she pass out when you do that?\"\n\n\"Some times.\"\n\n\"How did she get you to do that to her?\"\n\n\"She asked me to do it.\"\n\nAnn smiled at me and turned and placed her hands on the wall to hold herself up.\n\n\"Take your time...this time,\" Ann said.\n\nI got behind her and slid my cock into her pussy.\n\n\"James, giving me your energy was very special. Thank you.\"\n\n\"Can Charlie do that?\"\n\n\"No, but he seems to feel mine.\"\n\nI took my time slowly working my cock in and out of Ann as she held herself up. I reached around her and squeezed her tits as the water ran over us.\n\n\"This is nice,\" she said.\n\n\"Ann, thank you.\"\n\n\"For what?\"\n\n\"Letting me make love to you.\"\n\n\"Was that what you were doing?\"\n\n\"Ann, Dawn enjoys as much sex as she can get. I think you are just like her.\"\n\n\"I enjoy sex with Charlie and Amelia a lot.\"\n\n\"Are you okay knowing that Dawn eats pussy?\"\n\n\"Sure.\"\n\n\"Are you okay knowing she gets fucked regularly by other guys?\"\n\n\"How regularly, James?\"\n\n\"Whenever she wants too. I let her have as much fun as she wants.\"\n\n\"I wish Charlie would let me do that.\"\n\n\"You want to fuck other guys when he is not with you?\"\n\n\"Sometimes...not all the time.\"\n\n\"And women?\"\n\n\"Yes.\"\n\n\"Have you asked him...and Amelia?\"\n\n\"Not exactly.\"\n\nI was working my cock in her pussy as I rubbed her tits.\n\n\"You won't know what you can get if you don't ask, Ann. I am sure as long as Charlie knows you are just having some fun, he will be okay with it.\"\n\n\"I don't think so, James. I'm pretty sure I won't be able to get him to eat me after he comes in me.\"\n\n\"Just ask him.\"\n\nI slid my hands down to her pussy and began to finger her clit.\n\n\"You two need to spend more time with couples your age. You had fun with my parents.\"\n\n\"That's different?\"\n\n\"Why?\"\n\n\"We know them.\"\n\n\"I'm sure you know plenty of other people.\"\n\n\"They wouldn't be into that.\"\n\n\"You never know.\"\n\nI fingered her clit faster as I worked my cock in her pussy.\n\n\"Emm, that feels good.\"\n\nI kept going.\n\n\"Ahhhhh, fuck!\" Ann exclaimed and came. \"Emmmmm, that felt good.\"\n\nAnn stood and pulled my cock from her pussy. She turned and stroked it a minute, then got down on her knees and slid her mouth over it. I watched her for a while then pumped her mouth full of cum.\n\n\"Emmmmm...that is so good,\" she moaned as she stood.\n\nI leaned over and kissed her and wrapped my arms around her and held her.\n\n\"You and Dawn are just alike.\"\n\nShe smiled at me.\n\nI rinsed her hair out and rinsed the cum off of her. We got out and dried off.\n\n\"Let's see what is going on,\" I told her as I took her hand.\n\nWe walked into the bedroom and saw Charlie behind Amy fucking her hard. Larry was on top of Samantha fucking her tits. I led Ann to the kitchen and poured her a glass of wine.\n\n\"Mom, are you okay?\" Dawn asked as she walked in and sat next to her at the bar.\n\n\"Oh, honey. After that, you know I am fine.\"\n\nAmelia came in and sat.\n\n\"James, I am next,\" she said.\n\n\"Honey, I am afraid he can't do that to you,\" Ann said.\n\n\"Why not?\"\n\n\"You have heard Dawn talk about how she and James can feel each other during sex?''\n\n\"Yes.\"\n\n\"Well, it is more than that. It's not just feeling their emotions. It goes much deeper than that. Dawn didn't tell me everything. James can connect with me too. What you saw happen was the two of us connecting on a...spiritual level...sort of.\"\n\n\"Is that what Dawn meant when she said surprise?\"\n\n\"Yes. I don't know how he does it, but he can do what Dawn does,\" Ann added.\n\n\"Can he do it to me?\"\n\n\"No, but he can fuck you senseless!\" We all laughed.\n\n\"That sounds pretty special,\" Amelia said.\n\n\"It is...it is very special.\"\n\n\"Can Charlie do it?\"\n\n\"No...he can't,\" Ann said and sipped her wine.\n\n\"I'm sorry,\" Amelia said.\n\n\"I am too. We will have to work on Charlie eating us after he fucks us!\"\n\nEveryone seemed spent by the time we got out something for a late lunch. After that, Dawn's parent's and Amelia went to pack. I went to the computer room and grabbed a set of DVDs. I went into their room.\n\n\"Here, I got you something to watch on the ship,\" I said as I handed Charlie the DVDs.\n\nOnce they were packed, I help load up their rental car.\n\n\"James...you know they will expect me to do that to them now,\" Charlie said as we closed the trunk.\n\n\"It won't kill you Charlie, and they will love it. It is just for the women you love.\"\n\nWe went into the house, and everyone sat and talked and laughed until about 3:00. We were sitting in the den sipping wine.\n\n\"When you all get back, we should get together and plan a vacation for all of us this summer,\" dad said.\n\n\"Maybe another cruise,\" mom replied.\n\n\"Perverts,\" Dawn said, and everyone laughed.\n\n\"Honey, do you think I can teach your dad how to do that?\" Ann asked.\n\n\"I don't know. James and I have always had a connection. Do you and dad?\"\n\n\"Some, but not like that.\"\n\n\"Maybe you need to practice more!\" Dawn said and laughed. \"It seems that once James and I knew we could feel each other, it grew. It was like his energy was turned on.\"\n\n\"We feel each other too,\" Samantha said.\n\n\"How?\" Amelia asked.\n\n\"I think it is because we share the same blood,\" Dawn said. \"When my people share the same blood, they pass on their energy.\"\n\n\"They are also descended from a witch!\" I exclaimed.\n\n\"Honey...you have always been much stronger than I am. I think you have the ability to connect with people and help them discover what they didn't know they had,\" Ann said.\n\n\"You just never practiced and learned, mom.\"\n\n\"No...your great-grandmother always said you were special. She told my mom and me that you would be the one with all the power. You have always been full of the spirit.\"\n\n\"Maybe. Once I learned I was half Cherokee, things seem to change. Mom, now that you know you are full Cherokee, things may change for you.\"\n\n\"I'm too old to learn.\"\n\n\"No, you're not.\"\n\n\"Maybe I could teach your dad, if he knew how to feel our energy.\"\n\n\"I'm sure you could.\"\n\n\"Dad, you must feel something from mom.\"\n\n\"I do, but not like you...and James do.\"\n\n\"I seem to have grown stronger now that Dawn is stronger. Once she tapped into my energy, it must have turned it on,\" I said.\n\n\"Mom, you just need to work with dad,\" Dawn said.\n\n\"Honey, I am not as powerful as you.\"\n\n\"Ann, we discovered it once we learned how to feel the love energy,\" Samantha said.\n\n\"It is the strongest,\" Ann said.\n\nThings got quiet as everyone sipped their wine.\n\n\"James, what you did with me was very special. Thank you,\" Ann said.\n\n\"Ann, it was so easy to feel your love energy. It was very special for me, too,\" I told her.\n\n\"I feel your dad's too, but he does not feel me like you feel Dawn.\"\n\n\"I didn't always feel it like I do now. Everything has changed over the last year or so.\"\n\n\"Hmmmm,\" came from Ann. \"Dawn, do you feel that your energy has grown a lot over the last year?\"\n\n\"Yes. I don't know why, but it is growing stronger.\"\n\n\"You need to talk to your great-grandmother about it,\" Ann said.\n\n\"Great-grandfather said I need to come to the reservation. I am going next month.\"\n\n\"Did he say why?\"\n\n\"He just said I needed to come. I am worried about him,\" Dawn said. \"I talked to grandmother, but she wouldn't tell me why?\"\n\n\"You just need to go...and keep an open mind,\" Ann said.\n\n\"Why?\"\n\n\"At your age, you just do.\"\n\nThat seemed to be all Dawn was going to get from Ann. I knew Dawn knew her mother was keeping something from her.\n\n\"What time are you leaving?\" Mom asked.\n\n\"We fly out at 6:00PM. I guess soon.\"\n\n\"Sounds like you are going to have a wonderful time.\"\n\n\"We have had a great time this week.\"\n\n\"We will have to do it again,\" mom said.\n\nAnn sipped her wine and looked at me.\n\n\"Sue, were you okay with James doing me?\" Ann asked.\n\nMom smiled and went to get a glass of wine.\n\n\"Do you have any regrets?\" Dawn asked.\n\n\"About this week?\" Her mom replied.\n\n\"Yes.\"\n\n\"None, none at all. Are you okay if we spend a vacation with your parents?\"\n\n\"Have fun,\" I said.\n\n\"Maybe all of you can come too?\" Dad said.\n\n\"You just want to fuck Amy and Samantha!\" Ann teased him.\n\n\"Where would be a good place to go?\" Ann asked.\n\n\"We know a nice place in Hawaii,\" I replied.\n\n\"That would be nice. We have never been to Hawaii.\"\n\n\"If all of you want to go, we can set it up,\" I said.\n\n\"That would be fun.\"\n\n\"Plan on staying a month. The house we rented goes by the month.\"\n\n\"Is that the mansion you all stayed at?\"\n\n\"Yes,\" Dawn replied.\n\n\"Can all of you come?\" Dad asked.\n\n\"I'm not sure. The girls are going to a class that is all of August,\" I told them.\n\n\"What about June and July?\"",
        "\"You all pick a month, and we will see if we can work it out,\" Dawn replied.\n\n\"Okay.\"\n\n\"Do it soon, so we can rent the house,\" I added. \"And, we'll arrange for a housekeeper.\"\n\n\"We should talk to Deb and Brian and see if they can go for a week or so,\" Dawn said.\n\n\"I think you are going to have a great trip,\" Amy said to them. \"How long will you be gone?\"\n\n\"Almost two weeks,\" Ann replied.\n\n\"When is your flight back home?\" Dawn asked.\n\n\"The 12th.\"\n\n\"We will all be heading out that day.\"\n\n\"I guess we better head to the airport. It will be crowded,\" Ann said.\n\nWe all walked them out to their car.\n\nAnn hugged me and kissed me.\n\n\"Thank you,\" she said.\n\nThey drove down the drive.\n\n*****\n\nWe were all snacking on the leftovers we still had. My cellphone rang. I looked, and it was Sherri.\n\n\"Hey, Sherri.\"\n\n\"Hey.\"\n\n\"Where are you?\"\n\n\"Italy. We have been here for a few days. We are starting to lose track of everything we have seen. Tell the girls to send us photos from Hawaii.\"\n\n\"I will, but if you can get some rest, you should fly there to see what they have.\"\n\n\"When are they leaving?\"\n\n\"The 12th.\"\n\n\"I guess I could go with them.\"\n\n\"If you are sure, I will tell them to get you a ticket and make arrangements.\"\n\n\"I'll plan on going with them then. We have decided we have seen enough to get us started. There will be a ton of marketing material coming to your house. I didn't know where else to send it.\"\n\n\"That's fine. What are your plans?\"\n\n\"We are flying out tomorrow. We need to get back and look over everything and make some decisions. It is getting down to the wire, and we need to finish orders.\"\n\n\"Sounds like a good idea.\"\n\n\"We have plenty to choose from. We have already made some large purchases in France.\"\n\n\"Okay. If you have all you need, come back.\"\n\n\"We will be back late tomorrow.\"\n\n\"Get some rest and get ready to go to work,\" I said.\n\n\"We are ready.\"\n\n\"Let me talk to Katrina.\"\n\n\"Hey, James,\" Katrina said.\n\n\"Will you be ready to do your photos next weekend?\"\n\n\"If I can get some rest.\"\n\n\"I am sure you picked up some sexy lingerie.\"\n\n\"I did.\"\n\n\"Call me after you get some rest. If you are ready, we can start Sunday and finish Monday. I have something to do Saturday.\"\n\n\"Okay. I will call you.\"\n\n\"Bye, Katrina.\"\n\n\"Bye.\"\n\n\"Are they heading back?\" Dawn asked.\n\n\"They will be in late tomorrow.\"\n\n\"It is only two months away,\" Dawn said.\n\n\"I know. They will need to get to work.\"\n\n\"You too,\" Dawn said.\n\n\"Is that the two ladies that will be running the store?\" Dad asked.\n\n\"Yes.\"\n\nWe talked about the store and the limo business until dinner time. We loaded up and went out to eat.\n\nMore talk when we got home until we all went to bed.\n\n****\n\n\"Are you all asleep yet?\" I heard my mom say from the door.\n\n\"No, come on in,\" Dawn told her.\n\nMom walked in, wrapped in a robe, and sat on the edge of the bed.\n\n\"What's up?\" I asked.\n\n\"I thought Dawn wanted to watch you go down on me,\" Mom said.\n\n\"Oh, yes!\" Came from Dawn.\n\n\"I thought that since we were leaving in the morning, this would be a good time.\"\n\n\"Where is dad?\"\n\n\"Downstairs.\"\n\n\"Does he know?\"\n\n\"He thought you all would feel more comfortable if he stayed downstairs.\"\n\n\"Sue, are you sure?\" Dawn asked.\n\n\"It has been a long time.\"\n\nMom sat on the bed next to Dawn, while the girls were on my other side. She got up and moved to my side and sat on the end of the bed. I watched as she got up and took off her robe and stood there naked. She pulled the sheet off of me and sat back down.\n\n\"This all started one day after his high school graduation when I caught him jerking off to some porn magazines,\" mom said as she rubbed my cock. \"We had always talked a lot about sex, so I told him to let me show him how to do it right.\"\n\n\"Sue, how did you end up showing him your pussy?\" Dawn asked.\n\n\"A month or so later, he came to me asked me how to get a girl off with his fingers. He seemed to have failed at doing it.\" They laughed.\n\n\"I wasn't that bad,\" I said.\n\n\"I told him I would teach him, but only if he would learn to get very good at all of it.\"\n\n\"Did it take him long to get good at it?\"\n\n\"He is a quick study,\" mom said as she stroked my cock now that it was getting hard.\n\n\"How did he end up going down on you the first time?\" Amy asked.\n\n\"I asked him if he wanted to learn how, and he did.\"\n\n\"What did Larry say about it?\" Dawn asked.\n\n\"He was okay with it. We had taught Deb how to suck a cock because she wanted to know how. It wasn't long before James and Deb were practicing on each other.\"\n\n\"Well, we need to thank you!\" Samantha said.\n\nMom got up on her hands and knees on the bed next to me and slid my cock into her mouth. We all watched as she slowly worked her mouth up and down. I watched her for a few minutes, then grabbed her legs and pulled her over my head. I pulled her down and started licking her pussy.\n\n\"Emmmmmm.\"\n\n\"Wow...\" came from Amy.\n\nI licked for a long time and then worked my tongue into her. She pushed her pussy down, and I slid my tongue in deeper.\n\n\"Emmmmmm...emmmmm...\"\n\nThere was something special going on between us as we pleased each other. We kept going for a long time until mom came and gushed in my mouth.\n\n\"Ahhhhhhh...you have gotten much better, son.\"\n\nShe pushed herself up and sat on my mouth as I drove my tongue up into her. She moaned as she worked her pussy on my mouth for a while.\n\n\"Emmmmm...I know now he is keeping you three very happy.\"\n\n\"Oh, he is,\" I heard Dawn say.\n\nMom was working her pussy harder on my mouth when I found her clit with my tongue.\n\n\"Emmmmmmmm...oh...my...\"\n\nMom sat and let me work on her clit. She was grinding into my mouth as she talked to the girls.\n\n\"Ohhh, honey! Oh, my! Ohhh, yes! Yes!!\"\n\nMom tensed up and jerked a few times as she came in my mouth.\n\n\"Ahhhhhhh!! Perfect!!\"\n\n\"Wow...\" came from Samantha.\n\n\"Ahhhhhhhhh! Oh, this is so good!\"\n\nShe sped up a little and kept going.\n\n\"Oh, my!! I'm coming again!! Ahhhhhh!! Yes!! Oh, god!! Yes!! Yes!!\"\n\n\"Sue, is it better than you remember?\" Dawn asked.\n\n\"Yes, it is. Much better.\"\n\nShe laid next to me.\n\n\"James, you should try,\" Dawn said.\n\nI got between mom's legs and placed my mouth over her pussy.\n\n\"Dawn, honey, you get up here,\" mom said.\n\nI watched as Dawn straddled her mouth.\n\nI placed my hands on my mom's stomach and concentrated as I worked on her clit. It was a few minutes before I felt Dawn's energy creeping into me. I concentrated as I tongued mom's clit. I could feel Dawn's energy running through me...then I realized I was feeling it as it came through my mom. I concentrated on what I felt from Dawn, and after a few minutes, I could feel my mom's energy building in me. I kept this up for a long time.\n\n\"Emmmmmm...\" came from my mom.\n\nI kept tonguing her pussy and clit as I felt for her orgasm.\n\n\"Oh, fuck! This is so hot!\" I heard Dawn exclaim. \"Ahhhhhh!\"\n\nI looked up, and Dawn was jerking as she came hard. I felt her energy rush into me.\n\n\"Ahhhhhhh! Fuck, yes!!\"\n\nDawn fell back against the headboard and off my mom's head. I worked harder at concentrating on mom's energy.\n\n\"Ahhhhhh! Fuck! I am going to come!!\" Mom screamed.\n\nShe began thrusting her pussy up into my mouth. It had been a long time, but I was enjoying it.\n\n\"Ahhhhhhh!!\" Her energy rushed through me as she came hard.\n\nI looked over her and saw Dawn with her hands on mom's tits, squeezing them. She winked at me.\n\nI went to work harder on mom's pussy for a few minutes.\n\n\"Oh!! Ohhhhh!!\"\n\nI was connected to her now. Her orgasm was growing as I pushed arousal into her.\n\n\"Ahhhhhh!! Fuuuck!!\"\n\nMom's body was trembling as she was about to come hard. I pushed all the energy I had into her to hold her at the top of her orgasm.\n\n\"Ahhhhhhhhh!! Fuuuuck!! I'm comiiiiiing!!\"\n\nMom was thrusting her hips up over and over as I sucked on her clit and pushed.\n\n\"Ahhhhhhhhhhhhhhhhhh!!\" Came out in a long scream as she jerked over and over.\n\n\"Now,\" Dawn said.\n\nI pushed all my energy into my mom.\n\n\"Fuuuuuuuuuuuck!!\"\n\nHer pussy began gushing over and over as I sucked up her juices.\n\n\"Ahhhhhhhhhhhh!! Fuuuuck!!\"\n\nShe stiffened and thrust her pussy up and held it for a bit, then collapsed.\n\n\"Stop, honey,\" Dawn said.\n\nI removed my mouth from her pussy and looked at her. She was gasping for air as she lay there with her eyes closed.\n\n\"Mom?\"\n\n\"Mom?\"\n\n\"...emmmmm...\"\n\n\"Are you okay?\"\n\n\"Perfect.\"\n\nWe all lay quietly for a while.\n\n\"Would dad like to do Angie?\" I asked.\n\n\"Yes, but not as bad as he had wanted to do Dawn,\" mom said. \"We hasn't stopped talking about it.\"\n\n\"Do you care, mom?\"\n\n\"Of course, not.\"\n\n\"Maybe by the time we all go to Hawaii, all of you could be fucking each other,\" I said, and they all laughed.\n\n\"That would be fun!\" Samantha added.\n\n\"Mom, I never asked, but has dad fucked Deb?\"\n\n\"No.\"\n\n\"Would he?\"\n\n\"He may now.\"\n\n\"Dawn, will you ever let your dad fuck you?\" Amy asked.\n\n\"I'm not sure.\"\n\n\"Sue, thanks for letting us watch,\" Dawn said.\n\n\"Yes, that was so hot,\" Amy said.\n\n\"I need to shower, come with me,\" mom said.\n\nI got up and followed her to the shower so we could wash up.\n\n\"Are you okay with this?\" She asked as we soaped each other up.\n\n\"As long as you are.\"\n\nI was soaping up her tits and the rest of her body as we talked.\n\n\"We haven't done this in a long time,\" mom said.\n\n\"No, we haven't.\"\n\n\"Son, were you okay doing that again?\"\n\n\"I was always okay doing that.\"\n\n\"I have never come like that before.\"\n\n\"You can thank Dawn for that.\"\n\nWe finished soaping each other up and rinsing off. I was rinsing mom's hair from the back. She placed her hands on the wall and leaned forward.\n\n\"You know what to do, son.\""
    ],
    "authorname": "drmac100",
    "tags": [
        "amy",
        "dawn",
        "james",
        "lottery",
        "redhead",
        "samantha"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/life-after-the-lottery-ch-68"
}
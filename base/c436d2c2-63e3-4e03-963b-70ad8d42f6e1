{
    "title": "The Shack: A Parable of Wolves",
    "pages": [
        "This is Angel's story from The Shack, I've been asked for her story several times, and I hope this is satisfactory. This is very much a companion piece to \"Shameless,\" and I strongly recommend reading that first. The time period starts just before \"Shameless\" and ends a year or so after \"Behind Blue Eyes.\" I don't typically write graphic sex in this story line and that remains true here. Special thanks to sbrooks103x and Ckcppr for editing and beta reading, and to No1specific for beta reading and Special Weapons advice. Any remaining errors are entirely mine -- probably added after their assistance. And, as always, thanks to everyone for the amazing encouragement and support.\n\nA Parable of Wolves\n\n\"\u0421 \u0432\u043e\u043b\u043a\u0430\u043c\u0438 \u0436\u0438\u0442\u044c - \u043f\u043e \u0432\u043e\u043b\u044c\u0447\u0438 \u0432\u044b\u0442\u044c\" \n\nLive with wolves, and you'll learn how to howl\n\n- Russian Proverb\n\n\"We want a story! Story! Story! Story!\"\n\nThree little blonde girls chanted at me from their beds.\n\nI leaned back in the rocking chair, twisted my mouth and made my accent a caricature, \"Do you vant 'Ve must find Moose und Sqvirrel'?\"\n\n\"Noooooo!!!!!\" That brought shrieks of laughter from Kisa and Lily. Amber, our smallest, laughed too, but mostly because her big sisters were laughing. She'd never even seen Rocky and Bullwinkle, much less understood my terrible \"Natasha\" imitation.\n\nKisa is named after me in a way; \"Kisa\" - \"Kitten\" - was my first husband's pet name for me, and I named Kisa that so I would always have a part of him. Lily is named after Thomas's first wife, a woman I shall always feel fond of, though we never had a chance to meet. Amber's name was suggested by Spooky, in a sad, hushed voice. I'm sure there is a reason for the name, though she's never shared it with us. Thomas and I find the name beautiful.\n\n\"The wolf story! The wolf story!\" \n\nThat's their favorite story. It's a long story and a sometimes sad story, but they love it.\n\nMaybe because I love it. I looked up at the dresser. The pictures of Piotr and Lillian looked down on me approvingly.\n\n\"Once upon a time, there was a beautiful dog, with long, shining, golden fur, a wonderful fluffy tail, long beautiful ears and fine, perfect teeth. She was pretty and carefree, and even though she was a little vain because of her beauty, she loved the sound of laughter and joy, and that made her try very hard to make everyone around her happy. One day she met a wonderful, upright and honest police dog. She fell in love with his honesty and laughter. They ran off together to live their lives in happiness with each other and the dream of having puppies.\"\n\n#### \n\nOnce upon a time, a frivolous, but very pretty university student met and married a junior detective in the Saint Petersburg Police department. \n\nIt started with a slip on the dirty grey winter ice, while I was going into a coffee shop. I'd always loved winter, loved the cold, and I loved to walk through the winter streets, sipping hot, sweet coffee. As I started in, I felt the ice slide under me and I started to fall. Someone caught me, pulling me upright; I slipped again, and caught myself on a pair of broad shoulders, pulling myself to him so we were nose to nose. He had laughing grey eyes and light brown hair and a smile that seemed so completely honest.\n\n\"Easy. We can't have pretty girls falling all over the street. It'd give the city a bad name.\"\n\nEven though I was used to flattery, I could feel my cheeks flush. \"I can't get my footing.\" Something about his smile made me laugh and I slipped more, holding on to him tighter to keep from falling.\n\nHis smile broadened as he caught my waist in firm hands. \"I'm supposed to say something clever, but I think I'll just stand here and let you hold on to me as long as you like.\"\n\nAnd I did. I decided at that instant to hold on to Piotr forever. It sounds silly, but I knew right then that we would laugh and live, raise our children, and grow old together. \n\nHe never had a chance of getting away from me. I'd been pursued and I knew all the tricks. The coffee shop girl told me his name and told me which police station he worked at. \n\nI showed up at his department with lunch the next day, pulled out a calendar and told him we had to choose our wedding date.\n\nHe laughed. \"I don't even know your name, how do you know we're even compatible?\"\n\n\"Because you told me I could hold on as long as I like. And I've decided on 'the rest of our lives'.\"\n\n\"I don't get a say in this?\"\n\n\"You get one chance. We go out and if you want to stop after two months, we stop and you get away. If not, we're together forever.\"\n\n\"Why would I agree to this?\"\n\n\"Because you said I'm pretty.\"\n\n\"And pretty girls get whatever they want?\"\n\n\"This pretty girl only wants one thing.\"\n\n \"I've been told to stay away from pretty girls, they can be a lot of trouble.\"\n\n\"I'll wear a mask for the rest of my life. You can be the only one who ever sees me.\" \n\nHe stared at me. \"You're serious.\" \n\n\"I've never chased after a guy in my life before today. Ever.\"\n\nHe agreed. I don't know how I knew it would happen, but it did. And it was everything I dreamed life could be -- every fairy tale, every \"happily ever after.\"\n\nTwo months passed, then three, then four. In six months we were married. We wanted lots of children and planned on starting to work on our family as soon as I graduated.\n\nThe only mar was an argument at our wedding -- not between Piotr and me, but between Piotr and his cousin Dmitri, a powerful man, covered in prison tattoos.\n\nPiotr, a man who never even lost his temper, even with drug addicts and thieves, knocked his cousin unconscious in the vestibule of the church. When I asked about it, all he would ever say was that his cousin wasn't welcome in our home. Ever. \n\n####\n\n\"Seeing them and their happiness, the awful, horrible underground Troll King who hated happiness sent terrible, terrible ogres to punish them for being honest and happy. They tried to force the police dog to become an ogre like them, but he was too honorable and true for that. So the ogres attacked the two dogs. There were simply too many ogres and while they fought bravely, eventually the ogres killed the police dog and dragged the beautiful dog away.\"\n\n####\n\nPiotr and I had been married for ten months; I'd graduated the University with a degree in languages and was working part time as an interpreter at the local telecomm office. Seven months pregnant and happier than even the prettiest girl could expect to be.\n\nPiotr's only worry was his family. His mother and father had died in a car accident, but he had an Uncle, a respected, wealthy man named Gregor Ivanovich. He always spoke down to me in a strange, condescending, way. I wrote it off to his generation and their attitude towards women. \n\nI learned very differently later.\n\nI learned that to him, women, like drugs and weapons, were nothing more than commodities to be bought and sold. \n\nGregor ran an enormous criminal empire. Guns to Africa and the Middle East, drugs to Western Europe and girls to pretty much everywhere. Piotr had wanted nothing to do with it, and his uncle had promised to leave him alone, leave him out of everything. And the one additional promise Piotr had demanded of his uncle, as a wedding gift was to never, ever, harm me.\n\nBut promises from such men are worse than useless because you can make the mistake of believing them...\n\nI was in the kitchen when it happened. I heard arguing at the front door. I came out of the kitchen, my seventh month of pregnancy making me awkward, although Piotr said that I was more beautiful to him than ever. \n\n\"Even if I wanted to, it's too damn late for that.\" Piotr's voice. \"The evidence is already moved.\"\n\nGregor's voice, calm and even. \"You'll just have to have them bring it back won't you?\"\n\n\"It doesn't work that way, and you know it. You'll have to use one of your pet judges to deal with it.\"\n\nJust as I rounded the corner, powerful hands grabbed me. \"Piotr!\"\n\nHe spun toward me. there were six men in the living room with us.\n\nA low hateful chuckle from Dmitri. \"Maybe he should see his wife with a real man. Maybe that will teach him to be more thoughtful for family matters.\"\n\nPiotr glared at him, then snarled at his uncle. \"You swore you'd never let her be harmed.\"\n\nGregor smiled. \"I did.\" I could feel Dmitri reluctantly begin to loosen his grip. Until Gregor curled his lip. \"But using women as they are meant to be used is hardly harmful.\" \n\nI fought, scratching and kicking, as Dmitri clamped down on me and began tearing at my dress. \n\nPiotr's hand pistoned out, shoving the man nearest him away as he drew his gun. His first shot went into the man he'd shoved and he twisted towards me, his gun coming up. I could see it all clearly. He couldn't kill them all, but he could try to save me. I tried to hold very still so he could.\n\nBut he failed, another gun went off just as he shot again, and his head jerked oddly to the side, then he began to sag. Piotr's final shot, instead of killing me, tore through Dmitri's left lung.\n\nHe couldn't save me from them. But at least I wouldn't be violated by Dmitri.\n\nI began to scream. And in some ways it would be years before I stopped.\n\n####\n\n\"The ogres mistreated her horribly and took her deep into the dark wilderness where they forced her to marry a nasty, evil creature of slime and mud, a creature they knew would treat her even worse. In exchange, the slime thing would keep a box of dark and evil magic for the terrible Troll King. \n\n\"Despite all the horrible things that happened, the dog had one perfect little puppy, a puppy so beautiful that even the slime creature was in awe. Still, he kept the puppy from her most of the time, and mistreated the poor dog even more, knowing she couldn't run away, because he knew that no good and faithful dog could ever leave her puppy. The slime monster, resenting her beauty, made her sleep in mud and stay covered in slime and filth. She was so very sad, but she learned that the slime monster fed on sadness and so, she kept her sadness hidden from him.\" \n\n####\n\nRobert Sandoval. That was my new owner's name. Although officially we were husband and wife, and while he was cleaner than the men that had used me at first, he was many times worse. While the others saw me as an object to use, he saw me as something to torture. A cruel little boy, pulling wings off of flies. Not so much physically, although he did that, but by humiliating me, forcing me to perform for other men and women. Sometimes in groups. Sometimes to get something he wanted, but most often just to \"keep me in line\" and enjoy my degradation.\n\nAnd he had the perfect way to force me. In a filthy, overheated shipping container, seasick and miserable, I went into labor and gave birth. Completely alone, in pain and darkness. But when my baby began to cry, I stopped wishing I was dead and understood that I had to live, to protect my baby. I could hear my Great Grandfather telling me, \"Whatever terrible things happen, Russians, true Russians, can endure pain and misery like no others.\" \n\nRobert saw my love for Kisa, and saw it as a weakness, a way to make me do anything he wanted. As long as it was for my baby, I realized I didn't care what happened to me, or how I was used. I was Shameless; after all, how could a mother be ashamed of doing anything, or everything, to protect her baby? \n\nI could endure.\n\n#### \n\n\"So every day, the poor dog, chained by love of her puppy, watched the woods, praying and hoping for a brave dog to come and save her. But all she saw were more ogres, and in the darkest corners of the woods, she could see the yellow-bright eyes of wolves. The wolves were always out there, and they seemed so strange with their pointed ears and long, shining teeth. And their eyes held all the wilderness of the world in them. She feared wolves as much or even more than the ogres, for she had heard all her life that wolves had no honor, no loyalty and no joy. Their mournful howls of despair made her tremble.\"\n\n####\n\nI didn't see them at first, the strange men, such peculiar men. They tended to stay away from the tourist end of the strip. Staying to themselves. But after a year or so, I began to notice them occasionally among the crowds of tourists and travelers. They seemed to have souls of steel and ice. They reminded me of my Great Grandfather, a man who had lived the hardest of lives, fighting through the Great Patriotic War. But they seemed to have none of his softness, none of his kindness. The tall white haired man and the short bald man looked at Robert -- and me -- with nothing but cold contempt. Utter and complete contempt for our degeneracy. I could tell that Robert feared them, maybe more than I did. Worst of them all were the half-demon man and his woman. She saw me with only disdain, and his one clear eye could see only death. I had nightmares about them sometimes. \n\n#### \n\n\"Every day she looked into the woods, feeling her hope fail and her spirits fall, hiding her sadness from the slime creature. Until one day she saw a pair of bright yellow eyes staring back at her. Day after day. The eyes got closer, brighter, until she could see it was a ragged, skinny wolf; the silliest and weakest of wolves she thought. A sad and tragic figure himself. He snuck up closer to her every day until he was eventually sitting facing her, just out of sight of the slime monster. She still feared wolves, but he seemed sad and harmless, the least of wolves. He rolled around and acted as a clown, a comical, silly wolf. He made her smile with his silliness, and even though she only had a sad, skinny, silly, wolf and the thought of her puppy, she didn't feel so alone anymore.\" \n\n#### \n\nHe was a scarecrow of a man. Dirty and ragged and skinny. His filthy hair was a shaggy mop and his untrimmed, ratty beard was worse. He was clearly an alcoholic -- I'd seen it all my life; alcoholism is rampant in Russia and I could see it eating him alive, as I'd seen it eat so many others. But he stared at me the way Piotr had. As if I was the only beauty in all the world. At first I was repulsed, but I began to see that he didn't see me like all the others; as an object, a thing to use and discard.\n\nHe did something I hadn't dared to even think to do. He sensed my hatred of Robert and began to gently tease me, making fun of Robert. Mockery has real power, it can make the unbearable, bearable. His mockery seemed to eat at Robert's power over me, his power to make me despair. \n\nRobert never noticed. And Robert never noticed that the man he called \"Grease\" was fighting his disease and winning. It even took me a while to notice, but he slowly became cleaner, gained weight, and I saw that he drank less and less. I was amazed. In all my life, I'd never seen anyone beat alcoholism. In my heart, I began to see him differently, without even knowing it at first. And when Robert gave me to him, he refused to use me as others had. So I gave myself to him. For the first time since Piotr, I was with someone I wanted. He introduced me to the others, the peculiar men with their special place. They accepted me, in their odd way.\n\nLeaving Thomas to go back to Robert was the second worst pain I'd ever known. I know it was hard on Thomas, but I had to protect Kisa. I had to endure. \n\nI tried to let him know how I felt. Even so, I could see his pain, a pain that echoed mine, and I began to wonder if, somehow, some way, I could find a way to flee with him, with my Kisa.\n\n####\n\n\"One day, the ogres came back for the box of dark magic, and ogres are terrible things so they decided to take the rest of the slime creature's treasures too. There was a terrible fight and the ogres killed the slime monster. They were so angry that the dog had some happiness left they decided to kill her and her puppy, but at that moment, the raggedy tattered wolf burst into the hut and dropped his disguise, revealing himself as a noble brave prince of wolves, and he slayed the most evil ogre with a single fierce bite. Then he called his pack to destroy the rest of the ogres and rescue her puppy.\"\n\n####\n\nChance is a strange and often terrible thing. Dmitri and his men showed up with no warning. I didn't know what he wanted from Robert -- I was locked in a closet while they \"dealt\" with Robert, and after I saw what they'd done to him, I was glad. For though I hated Robert, their cruelty was beyond comprehension. Dmitri made it clear that would be my fate as well, after they were finished using me. But my Thomas didn't let that happen.\n\nOne minute I was about to die, the next, Dmitri was dead and I was fleeing with Thomas. Dmitri's men, chasing us, ran right into a trap. They never realized they were going to die, that death incarnate, a real Monster, waited for them in that bar. \n\nWhen Kisa and I were wrapped in Thomas' arms, I knew that I had everything I needed. That I belonged with Thomas and his friends. After he took us to his boat, I watched him silently pour every bottle of alcohol into the sea, and I knew he did it for us. \n\n####\n\n\"Surrounded by wolves, she clung to him and her puppy, terribly fearful of the other wolves and their wildness. The wolves saw this and led her to the edge of a shining pond under the moonlight and they smiled at her. One said 'Look in the water, beautiful one. What do you see?' The dog looked into the mirror-bright water and saw herself. The mud and slime had fallen away. She still had her shining golden coat, but her ears were pointed and upright. Her teeth were different, they'd grown long and sharp. And her eyes held all of the wilderness in them. She raised her muzzle to the sky and howled, long and loud, for she knew the truth; she was a wolf like them, and she always had been. What she'd always believed was despair in their howls was a call of kinship. She was truly home. She would stay with them forever and have more puppies with her brave strong prince of wolves.\"\n\nI started to get up to leave the room.\n\nKisa gave me a dark scowl. \"Stop! What about the Troll King? He's MEAN, he CAN'T get away! What about the evil magic box?\" \n\nLily and Amber mirrored their older sister's scowl. For a moment, they all looked so very Russian. I sat back down, and couldn't stop my smile.\n\n\"Are you sure? It's getting late and I'm getting tired.\" I stretched and faked a yawn that turned into a real one.\n\n\"Mommy! Tell the whole story!\" \n\nI smiled. We did this every time. \"Okay. If you're sure. The wolf pack grew as wolves were drawn to a pack that was true and fierce, and they lived in peace and harmony in their forest. But while the wolves were content to live in peace, the Troll King was not. He sent more ogres to kill the golden wolf and her beautiful puppies and to bring the magic box back to him. But wolves are wild and wary creatures, and they saw the ogres sneaking into their forest. They hunted and killed the ogres and found the awful box.\"\n\n####\n\nFor years everything was beautiful. Thomas and I understood each other more deeply than I would have ever dreamed. We'd both lost our first loves painfully. We decided to keep their memories alive, keep their pictures in our home. I touched Lillian's picture every time I left the house, promising her silently that I would watch over Thomas and our children.\n\nMore joined our strange little family. Sometimes by choice, like Spooky, and sometimes not, like Evelyn. Monster's daughter, Danni, became my closest friend and I tried to let Gregor fade into the past even though it pained me that Piotr would never be avenged. But it was not to be.",
        "On a quiet night, well after dark, Thomas and I found ourselves sitting with Pogo, Howard, and Chief.\n\nPogo drummed his fingers on the table. \"We may have a problem. Wendy called.\"\n\nI'd never met Wendy, but I knew she was a very expensive smuggler of sorts. \n\nPogo continued. \"Somebody is shopping for transport. Three weeks from today. Six men and they'll be guarding a thousand pounds of uninspected cargo.\"\n\n\"Headed here?\" Howard cocked one eyebrow.\n\n\"That's the strange part. From here. To the Sudan.\"\n\n\"That doesn't make sense.\"\n\n\"That's why she called. Wanted to see if it was us using a Russian cover.\"\n\n\"Russian?\" Chief looked over at me. \n\nPogo nodded. \"That's what she said. I don't like it. Whatever it is has to be coming in by ship or plane.\" \n\nThomas gripped my hand. \"Or it's already here. Bobert might have cached weapons on one of the little islands.\"\n\nHoward looked thoughtful. \"Maybe MANPADS,\" he glanced at me and noticed my confusion, \"shoulder launched anti-aircraft missiles. They'd bring damn good money with some of those Middle Eastern groups. Not sure it would be enough to cover Wendy's prices. Even with a 'family discount,' she's damned expensive.\"\n\nChief grimaced. \"If something bad happens and a shipment gets tracked back to here, it'd be bad. Besides, this could be really bad, maybe a commercial airliner.\" \n\nA flash of pain washed over Howard's face. \"Grease, you and Angel need to make a list of every place Bobert could have put something, probably the size of a pallet container.\"\n\nI shook my head. \"I was only with Robert two weeks of the month; he could have put things anywhere when I wasn't around. The only place I ever stayed was at the house on Komi Key. Other than that, I was on the boat here.\"\n\n\"Who did you sell the Key to?\"\n\n\"Wing Ho Development. I don't think they've ever done anything with it, they just bought up a bunch of little islands for investment.\" \n\n\"Christ, I hope it isn't a PLA cover. I'm going to ask Evie to find a way to buy that island back through one of her front companies, just in case.\"\n\nWe'd made almost seven million dollars from the sale of the island, but for Evie, that would be like a normal person buying a candy bar. Even if it wasn't, she'd do it for Howard.\n\nChief pulled out his notebook and flipped it open, pulling out a chart that had the Key on it. \"Not much area to hide a pallet container on, really just the house and a couple small beaches. I'll have my guys keep an eye on it. We'll have to watch visitors. Six guys, probably mercenaries, won't be too hard to spot.\" \n\n####\n\nIt was two days less than three weeks when they showed up. \n\nI knew it was bad when I arrived at the Shack and found Chief wearing a gun. He never wore a gun, ever.\n\nHoward and Pogo looked grim.\n\n\"They arrived this morning. Spooky's been on them all day. They're looking for you, Angel. They have a couple old pictures. You and Bobert.\"\n\nI felt myself panicking. \"Thomas is out on a charter and the girls are at school.\"\n\nPogo smiled. \"The goons are hunting for you, but the first things you worry about are Thomas and the girls? That's why we love you Angel. Monster is headed over to the school to pick up the girls, and Chief already called Grease, sent a police boat over to keep an eye on him.\"\n\n\"They must have no idea we're here. Nobody who suspected we were here would be stupid enough to be this clumsy.\" Howard looked more bemused than anything.\n\nPogo shrugged. \"Probably Bobert's old playmates looking to tie up loose ends. They may not believe the report that Bobert died and think he killed Dmitri.\"\n\n\"Feels wrong, and it doesn't explain the shipment.\" Howard looked through the table, trying to see the logic.\n\n\"I guess we're going to have to ask them then. We could gauge their intentions, have someone tell them where Angel lives, and wait to see what they do.\"\n\n\"Make sure Monster knows we need one alive.\" I understood Howard's concerns. Monster's implacable one track logic; any threat to the children was a threat only until he made sure it wasn't.\n\nChief shrugged. \"I need to stay out of this. Some things are better off the record.\" His voice trailed off. \n\nThey came that night. Only Thomas and I were in the house, making the right noises, making the house look normal. But the six men would never come in. Pogo and Monster were waiting outside, flickering patches of living darkness. I'd seen Monster kill before, and I had no doubt what would happen.\n\nThomas and I heard nothing at all, but around midnight Pogo and Howard came in.\n\n\"We need to dump six bodies in the Deeps tonight. This really is about something Bobert had stored away. The one guy we talked to didn't know what it was, just that they had to pick it up from 'the house.' He really didn't know. He'd have told us if he did.\"\n\nPogo wouldn't look at me. \"First they were supposed to find out if Angel knew anything and get rid of her.\"\n\nShards of ice clipped up my spine. I knew how they \"questioned\" people, how they'd treated Robert. Though I doubted Monster was any gentler with the lone, temporary survivor. And I didn't feel bad about that at all.\n\nHoward \"It has to be the house at the Key. We need to head over there in the morning. I'll let Evie know.\" \n\n####\n\nAs we finished checking the rooms on the first floor, Pogo looked at me. \"What's the layout of the basement?\"\n\nI pointed up the stairs to the second floor. \"Kisa and I were kept up there. I was never in the basement and I just wanted away from here after that. I didn't want anything that Robert had.\"\n\n\"Pogo?\" Spooky's voice drifted up the stairs. She must have slipped down there earlier while everyone was looking through the ground floor. \"There's a damn big hollow spot in one of the walls.\"\n\nPogo and Thomas pulled sledgehammers from the boat and headed down.\n\n####\n\n\"The wolves gathered around the box and saw that the magic inside it was so terrible, so wicked that they could not stay in peace their forest and ignore the evil Troll King. But even though their pack had grown, they would need help to defeat him. They gathered at the top of a hill in the forest and began to howl, to call to other wolves.\" \n\n####\n\n\"Fuck.\" I felt a chill. Pogo's voice had a cold finality to it. I'd never seen Pogo genuinely angry or upset before. \n\n\"Is that what I think it is?\" Chief looked through the hole in the basement wall.\n\n\"Goddammit. They must be insane.\"\n\nHoward stared wordlessly for a minute, then echoed Pogo. \"Goddammit. Why couldn't it have been MANPADS?\"\n\nMy Thomas studied the odd barrel shaped thing. \"I'm afraid I can guess, but what exactly is it?\"\n\nPogo shook his head, trying to make something make sense. \"It's a MADM. A Russian copy of one, anyway. Probably stole the plans somewhere along the way. A Medium Atomic Demolition Munition. Yield could be anything up to the same size as the Hiroshima bomb, probably with a lot of fall out. Don't touch the fucking thing. It probably isn't armed, but the KGB and GRU used to put 'Lightning' booby-traps on important shit, things like this. Probably bring the house down and scatter radioactive shit all over the place. Jesus Christ.\"\n\nHoward nodded. \"I'm going to use the satellite phone from the boat. We have to bring in Maria. And Donna. Grease, I need you to radio Ex. Have her get Monster over here. Tell her to get the two footlockers in the supply room of the Shack marked 'water pump parts'. There are some heavier weapons in those and I'd be a lot more comfortable with them here.\"\n\nThe next hours were frantic. \n\n####\n\n\"Shadowy black wolves of the night, the bright grey strong wolves of the mountains, even the dark red wolves of the Troll's own kingdom gathered together. They held council under the moon and it was decided that the Troll would have to be brought down, no matter the cost, for he was a threat to all, a threat to everything.\"\n\n####\n\nIt was almost two days before Donna arrived, and she didn't come alone. It took all three of our charter boats to take her entourage to the little island. She had forty heavily armed men; they changed into Russian uniforms on the way. \n\nPogo was standing on the dock when we arrived. \"Tell your men to stay out of the house.\"\n\nShe glared at him. \"If it's what you say, we need to secure it immediately.\"\n\n\"Monster is in there with Howard, Donna. He's loaded for bear and not in a receptive mood. This is too goddamn close to home, too goddamn close to the kids. They'd probably take him down eventually, but you'd be burying a hell of a lot of your boys for no real reason. We don't need that.\"\n\n\"Goddammit.\" Donna signaled to one of the men. \"Secure the island but keep everyone away from the damn house. Unless I say different.\"\n\nHer soldiers sprinted in either direction to encircle the island, but four stayed with her.\n\n\"You should put him down, Poz. One of these days you're going to lose control of him.\"\n\n\"Where would I get a babysitter to replace him?\"\n\nDonna glared at him for a moment. \"What are you playing at?\"\n\n\"Nothing. We found a fucking nuke sitting in our back yard and we don't want anyone to do anything stupid. Monster may be a lot of things, but stupid isn't one of them. We'll deal with this, I just want everyone here first. Maria is on the way, she's catching a ride with Chief, so when she arrives try to make sure your men don't shoot her. And if anyone shoots up the boats, they get to swim back.\"\n\n\"So what's the plan?\"\n\n\"That's what we need to figure out. Maria is bringing a couple guests.\"\n\n\"Who?\"\n\nPogo shrugged. \"Don't know for sure, but I'm hoping one of them knows how to make sure the damned thing is disarmed.\" Pogo and Howard had told me more -- in fact that's why I was going to stay while Thomas took the SEA ANGEL back to reconfigure her. My heart twinged at the thought of being away from him, even for that little while.\n\nDonna looked darkly out over the ocean. \"You know, I had to use Wendy to get here. 'Hi, I'm Wendy, fly me.' Mercenary little bitch cost me an arm and a leg.\"\n\n\"It isn't your money Donna, and she's worth it. You want to move a platoon of infantry with weapons halfway around the world, with no notice, and do it discreetly? Nobody will hear a word from her.\"\n\n\"Still annoying.\"\n\nPogo grinned. \"I spent most of my childhood figuring out how to get under your skin. This is a win for me.\" He made a motion like a checkmark in the air with one finger.\n\n\"You're still a jerk.\" But she smiled a little at her brother, then looked over to me. \"Angel. If you have any more children, keep having girls. Little brothers are a pain in the butt.\"\n\n####\n\nMaria Hawthorne, Deputy Director, FBI, arrived with her guests; a tall, well-groomed man, clearly used to power, and a stooped older man in a cheap new suit who looked even more tired than his obvious years.\n\nDonna nodded a greeting to Maria then cocked her head to one side and walked straight toward the taller man, with a disconcertingly real smile.\n\n\"Yuri. I suspected you'd end up involved.\"\n\nHe shook his head, chuckling, and genuinely amused. \"Danika. I knew you'd be here when I saw the Russian uniforms on American soldiers. How is it, whenever there is trouble, you seem to pop up?\"\n\n\"Nature of our business, Yuri.\" She looked back to Maria. \"Good choice. He can make decisions, and he only answers to one man.\"\n\nMaria smiled pleasantly. \"I'm glad you two know each other, but we can all catch up later. I think we all need to know what we are dealing with.\"\n\n Maria introduced everyone and we waited in the living room, until the old stooped man -- Aleksei -- came back up the stairs, pale and shaken. I had to translate for him. Howard wanted to be sure nothing was misunderstood. On accident or on purpose. \n\n\"He says it's safe now. The device wasn't armed, but the links were in place and the 'Molniya' -- 'Lightning' - boobytrap was set. He says it was big enough to destroy the house and scatter the...\"I paused for a second looking for the right word, \"core.\"\n\nMaria shook her head. \"How many of these damn things are there out there, Yuri?\" \n\n\"We don't know. It was a special program, with very limited access, and the records were destroyed in the 90s. This is a fragment of madness from the Cold War. As far as I can tell, only Aleksei is left and he was just a technician. He was never even told the full scope of it. I'm afraid I have to force him out of retirement. He'll be very well paidthough.\"\n\nDonna looked over at the stairs to the basement. \"We have to be in on this, Yuri. As long as it was in Russia, it was yours; now it's everybody's problem. Maria, at least, has to be kept in the loop.\"\n\n\"We can do better. You know how protective President Putin is of our territory. But I talked with him before I left. He feels that stonewalling on this could irrevocably erode what trust we have left, especially if we miss something. I'm authorized to include you in everything we know, which, unhappily isn't much more than we have already discussed.\" He grimaced. \"We may have to cut a deal with Gregor Ivanovich to get the information we need to eliminate any further problems.\"\n\nI stared in shock. After all this, my Piotr would not be avenged. I felt the cold fury of winter boil through my veins.\n\n\"No.\" My voice sounded strange, as if it wasn't me speaking at all.\n\nHe looked over, really studying me for the first time. He must have thought I was just there to translate. \n\nI went on. \"No. Gregor Ivanovich suffers for the rest of his life. For this, and for murdering my husband.\"\n\n\"Young lady...\"His voice was condescending, as if speaking to a child. \n\n\"Don't you dare. I know you can make him talk if you want.\"\n\n\"We don't do that kind of thing these days.\"\n\nI laughed. Even to me, the laughter was mocking, hollow and cold. \"Don't tell me what people will and will not do. Piotr deserves justice. If you do not make that happen, I will. I'm not helpless or alone anymore.\"\n\nHoward leaned forward, expressionless. \"We're her family now. We will get to him. After what he did to her, we'll stack up so many bodies, you'll be able see them from orbit.\"\n\nHoward understood vengeance, he'd shaped his life around it. He was quite mad, in his own way. Over three decades of kidnapping, extortion, and murder as he hunted down everyone connected with his wife and child's death. I think that's only considered sane in Sicily. \n\nPogo stretched and smiled, the same way a tiger does when it sees something that might be tasty.\n\nDonna frowned. \"Trust me on this one, Yuri. They're not bluffing. They have far more resources than you'd think and no scruples at all. They'd even enjoy it. In any case, I suspect Mr. Ivanovich is involved a great many other things you don't want to give him a blanket pardon for.\" She went on to explain who I was and how I had ended up in the islands, asking me to clarify a few things.\n\nYuri glanced from Donna to me. \"What citizenship do you hold?\"\n\n\"When I married Thomas, I think they said it made me a dual citizen. Here and Russia.\" \n\n\"You're still technically a Russian citizen, we will also bring charges on your behalf, as long as you are willing to submit an affidavit on the murder of your husband...\" he paused, trying to remember. \n\n\"Detective Piotr Ivanovich. And, yes, I will.\"\n\n\"Piotr? And you said your maiden name was 'Volk'?\"\n\nI saw a twitch on the corner of his mouth, but he suppressed it well. I still felt pain at Piotr's loss, but he and I had laughed so often at the same thing that Yuri was trying hard to ignore. Donna had caught the twitch and raised an eyebrow.\n\nI smiled a little. \"Yes, Piotr.\" I looked at Donna. \"'Volk' means 'wolf' in English. So Piotr and I were 'Peter and the Wolf'.\" \n\nYuri nodded with a quiet chuckle, though Donna just gave a half-hearted tic of a smile. It's probably funnier in Russian. \n\n\"We have some details to clear up. I would like to remove the device from here and get it back to proper hands.\"\n\nMaria nodded. \"Giving you back the device is no problem -- if we kept it, sooner or later the question of where it came from would probably come up. Probably from some congressman who wanted to be in the news. And once it leaked that a nuke got loose, things could get of control diplomatically.\"\n\nHoward spoke up. \"Grease is fitting up the SEA ANGEL with extra tanks to give her extra legs; he can meet one of your ships or subs wherever you agree, as long as it doesn't head back in the direction of Fiji. Monster would have a problem with that. We don't want that.\"\n\nYuri looked thoughtful. Unlike most people, I could tell he'd recognized Monster for what he was instantly, not fooled at all by the fa\u00e7ade when Monster had escorted Aleksei down the stairs. \"That would be unfortunate and unnecessary. We can have a submarine in the area in a couple days. There's also the matter of the delivery point in the Sudan, I think we have a line on that -- it appears to be a mutual antagonist of our two countries. Although we don't know what the target was. And we still have no idea where this came from or if there are more. Unless Gregor Ivanovich can tell us.\"\n\n####\n\n\"The wolves ran through the night, pouring silently into the forest, more and more wolves of every kind. The ogre army never had a real chance, the soundless wolves leapt from darkness and tore them down relentlessly until not a single ogre was alive. Only the Troll King remained, sitting alone on his throne when the golden wolf who had been a dog arrived. She stood before him and pronounced his doom, giving him over to the red wolves of his own kingdom to bury away in darkness, forever.\" \n\n####\n\nOver the next several weeks, strange and terrible things happened. Warehouses burned in Moldova. There were police raids all over Europe. Quiet, ruthless men from the FBI and the FSB pursued leads and men relentlessly -- often together. \n\nA terrorist training camp in the Sudan was utterly destroyed, with no survivors, by two groups of men in Chinese uniforms, none of whom looked remotely Chinese. Pogo and Howard laughed about that for hours. It seems half showed up in PRC uniforms, and half in Taiwanese uniforms. Even Donna and Yuri apparently occasionally misunderstood each other in small ways. Or maybe they hadn't misunderstood each other at all.\n\nAnd Zascha Knight, formerly Zascha Sandoval, formerly Zascha Ivanovich nee Volk, flew to the cold winter of Russia and was very respectfully escorted to a country manor house by several very high-ranking members of the Russian Federal Security Service, the FSB. \n\nWhen we arrived, the door to the mansion was standing open, waiting as we crunched through the fresh white snow. A single light was burning in a room at the end of the entrance hall. Gregor Ivanovich was seated stiffly at his desk staring at us with his hands carefully spread out on the desk before him. Spooky and a number of stern-faced Russian internal security police officers stood off to the side, although their attention seemed as much focused on Spooky as on Gregor. Both Yuri and Donna had wanted insurance that Gregor would be taken alive; there was a chance that some powerful members of the government would be implicated. And there were still too many unanswered questions.",
        "A single empty chair sat facing him across the desk. I sat in it and pushed the fur-trimmed hood of my red wool cloak off. His eyes widened and he struggled to contain his shock. I could see Spooky's wicked smile.\n\n\"Uncle Gregor.\"\n\n\"Zascha, I...\"\n\n\"Shhh.\" I hushed him. The girl who'd married Piotr would never have dared to do that. \"You murdered my Piotr, your own nephew. You couldn't just leave us to be happy. And you didn't have the wisdom to kill me, because you thought I was too weak to be important. You found it amusing to torture me and pretend to keep your word that you wouldn't 'harm' me.\"\n\nI paused, studying the withered old man before me. \"You and I never really talked much, so I don't think I ever told you. My Great Grandfather was Siberian. I know I don't look it, but he really was. I was his favorite, his little Angel. He used to tell me stories. Of tigers. Of bears. Of wolves.\"\n\nI studied my gloves, reflecting for a second that living in the sun had made me soft, unused to the winter cold that never bothered me before. \"He used to say that of all of them, hunting wolves was the most dangerous. There are rules to hunting wolves, he'd say. There are always more wolves than you think, because for every wolf you see, there are ten more in the darkness. So, it isn't only the wolf you hunt that you should be worrying about. And more than any other animal, wolves are hunters; so as you hunt them, they hunt you. \"\n\nI felt the last of my fury draining away and a peaceful tide rise.\n\n\"You cast me out to land among wolves, and I learned to howl.\"\n\nI stood up, abruptly, suddenly realizing I was done with this, done with Gregor. I wanted to leave him to his fate. I wanted to be back in the sun, I wanted to just be Angel, with her Thomas, with her daughters. I gestured to my companions.\n\nYuri stepped to my side, as merciless and cold as winter itself. The scope of Gregor's treachery had surprised even him. \n\n\"I had more to say -- I thought about this for years. But now I realize it doesn't really matter, that you don't really matter. Not to me. But these men have many questions for you regarding treason, theft and murder. And especially the attempted sale of weapons to a terrorist organization. I think you will be answering those questions for the rest of your life. However short that might be.\"\n\nAs I turned to walk away with Spooky at my side, I heard the snarling red wolves closing in on the Troll King. \n\nPOST PRODUCTION NOTES:\n\nI tried to get the rhythm and feel of Russian folk tales in the story -- I'm not sure I succeeded. I think only a Russian could really tell. \n\nThe Russian Proverb \"Live with wolves, and you'll learn how to howl,\" is often taken to be the equivalent of \"When in Rome...\" but it really isn't. To Russians, the howl of a wolf is a howl of despair, and the proverb insinuates that if you live among wolves, you will learn to feel their pain and despair. In this case, I turned the meaning on its head. Angel experiences pain and despair and becomes a wolf.\n\nMADMs existed, but are all supposedly destroyed now. And the KGB/GRU \"Lightning\" booby-traps were real and very nearly killed several people in Berne, Switzerland."
    ],
    "authorname": "Todd172",
    "tags": [
        "shack",
        "shameless",
        "romance",
        "revenge",
        "violent",
        "espionage"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/the-shack-a-parable-of-wolves"
}
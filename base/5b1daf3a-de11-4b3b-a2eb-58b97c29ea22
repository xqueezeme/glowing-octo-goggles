{
    "title": "Tucker's Studio Ch. 20",
    "pages": [
        "All people and places are fictional. All characters are over eighteen.\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nRace Relations\n\nTucker's old college roommate was in town. Charles came back to visit at least once a year. He grew up in the city, and went to the University on a partial scholarship, the only way his family could afford such an expensive school. His business degree served him well, taking him to London, New York City, and finally Miami, where he lived an upscale bachelor's life. Whenever he visited his family he always made time for dinner and drinks with Tucker.\n\nCharles' sister Rhonda joined them at the restaurant, and Marsha did too. Marsha and Tucker where fast becoming an item. Her husband had already moved out of their house and moved in with the woman he had been having the long affair with, so Marsha had decided to give things a try with Tucker. It was casual, but fun. Neither of them wanted to rush anything.\n\nTucker had some history with Rhonda too. During the summer between sophomore and senior year at the University, Tucker and Rhonda had a fling. She was fresh out of high school and neither family liked the idea. Back in those days, the fact that Tucker was white and Rhonda was black was a big deal. Well, maybe not a big deal, but a bigger deal than it would be today, and neither family was terribly thrilled about what was happening. Charles was cool with it. He and Tucker had become fast friends, rooming together for three years. He even fixed up the first date. Rhonda often joined Tucker and Charles for their reunion dinners, whenever she could make it.\n\nAfter introductions and pleasantries, the four of them settled into a booth at a boisterous barbecue joint for some good food and conversation.\n\n\"Why you gettin' into all this Big Black Cock shit?\" Charles asked, his voice bristling with good-natured annoyment.\n\n\"Oh here we go!\" Rhonda said with amusement.\n\n\"Charles man! Nothin' like gettin' right to the point!\" Tucker laughed.\n\n\"Come on man,\" Charles said. \"You gotta know it's just a stereotype, and one that's not helpful to anybody.\"\n\n\"Those guys are popular man. I'm just tryin' to make a living. And before you ask, no, I did not come up with those names for those guys. They named themselves, before they ever got to me.\"\n\n\"Hey, I think they're sexy, if my vote counts,\" Rhonda said. \"Dante and Afreeka? Yeah baby! It's porn isn't it?\" she asked her brother.\n\n\"I know that. But it's not healthy when every white woman thinks a black man has a big cock. It's bad for society. It bothers me, and I've been wanting to say somethin' for a while.\n\n\"Hey man, I've seen you in the shower, so I know where you're comin' from,\" Tucker said, teasing his old friend.\n\n\"Hoo Hooo!\" Rhonda whooped. \"Did you just say that? Score one for Tucker!\"\n\n\"Hey man,\" Charles said to Tucker. \"That's not cool.\"\n\n\"You kinda brought it up,\" Rhonda said, smiling at her big brother.\n\n\"Yeah, well I'd just like to see a little balance. Show some black women with your white guys. Show some black men off the street, guys who aren't born to be porn stars. Show some black folks together for goodness sake.\"\n\n\"All right, yeah, I can see your point,\" Tucker said. \"So whaddya think Marsha? You see any attractive women of color here tonight we could give our card to?\"\n\n\"I see one,\" Marsha said, smiling at Rhonda.\n\n\"Fuck you Tucker!\" Charles said, with a big, friendly smile. \"You remember that time we got in a fight and I backed off so I didn't hurt you?\"\n\n\"I remember,\" Tucker smiled.\n\n\"You remember how much it would have hurt if I hadn't done that?\"\n\n\"Hey, we're all adults here,\" Tucker smiled. \"Rhonda doesn't get a say in this?\"\n\n\"Aren't you glad you brought up big cocks, sweet brother?\" Rhonda smiled. \"Speakin' of that, I see that delicious cameraman of yours is still with you.\"\n\n\"Oh, Jamar?\" Tucker said. \"Yeah, I hope he's with me forever.\"\n\n\"Honey, you coulda knocked me over with a feather when I saw him on the website,\" Rhonda said, clearly affected by seeing Jamar's performance. \"How'd you talk him into comin' out from behind those cameras?\"\n\n\"You know, that was all Molly,\" Tucker said. \"Did you see that first scene he did last year?\"\n\n\"You mean the older woman?\" Rhonda said. \"What's her name...Donna somethin'? Oh honey, I saw it. And I saw it and I saw it!\" she laughed. \"Too hot. Just too hot. I love it when girls her age get after it like that.\"\n\n\"How about you Charles?\" Tucker asked. \"Any of my ladies catch your eye lately?\"\n\n\"You mean other than that fiery little award winner of yours? I'll tell you what \u2014 her gettin' that trophy didn't surprise me one bit. She is somethin' else!\"\n\n\"Yeah,\" Tucker said. \"She's kinda...\"\n\n...magic,\" Marsha said, finishing Tucker's sentence with a faraway twinkle in her eye.\n\n\"Sounds like we've got the makings of exactly what you want right here at our table, my friend,\" Tucker said to Charles. \"An average black man off the street \u2014 I'll pair you up with any of my girls, and Rhonda sounds like she wouldn't mind some big black cock. We can balance the racial scales, at least a little.\"\n\n\"Not exactly what I was gettin' at you asshole,\" Charles said. He shook his head and smiled. \"I'm gonna have to give you that beatin, when we get done eatin'. Are the ribs as good as they used to be here?\"\n\n\"The best,\" Tucker smiled.\n\nHe pulled out his phone while everyone looked at their menus, and texted Jamar and Kelsey... \n\n\u2014 Private party at the studio at 10PM. Hope you can make it.\n\n\"You said you weren't gonna work tonight,\" Marsha said when she saw him texting.\n\n\"Just a couple loose ends,\" he said as he slipped the phone back in his pocket. \"Hey Charles, I picked up some sweet bottles of Single Malt a few days ago. Let's stop by the studio after dinner and have a glass.\"\n\n\"Ooo! You don't have to twist my arm for that!\" Charles said.\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nThe four of them walked through the dark studio toward the soundstage. Marsha wondered why Tucker was leading them to the big couch on the hotel room set instead of the couch in his office, but she didn't say anything. He stopped on the way and cranked the heat up.\n\n\"You know, I was thinking about Zuri the other day,\" he said as he poured a splash of Scotch in each person's glass. \"Do you ever hear from her?\"\n\nZuri was one of Charles' college girlfriends. A beautiful, exotic, brown skinned girl from Mozambique, working on her degree in sports communications.\n\n\"She was so nice,\" Rhonda said. \"You shoulda married that girl.\"\n\n\"Yeah, you're right,\" Charles said. \"Last I heard she was in France working for a soccer team. Damn she was fun, wasn't she?\"\n\n\"She got us all started on drugs,\" Tucker said to Marsha.\n\n\"Drugs! Oh my God!\" Marsha said, her eyes big with surprise.\n\n\"It wasn't bad or anything,\" Tucker said. \"It was just college, you know? It was the summer Rhonda and I were together. We all had some free time, so we rented a cabin for a week, up in the Adirondacks. We couldn't afford one on the water, so we got one out in the woods, near Indian Lake. You want me to tell this?\" he asked Charles and Rhonda.\n\n\"You're doin' fine,\" Rhonda smiled.\n\n\"So we all pile in my car \u2014 it was a big Lincoln Town Car that was a hand-me-down from my father, gettin' pretty rusty and ragged like they used to back then. Remember that maroon velour interior?\"\n\n\"I remember,\" Charles said, sipping on his Scotch, clearly enjoying the trip down memory lane.\n\n\"So we drive to Indian Lake, ask around and get directions, rattle our way down a long dirt road and pull up in front of this tiny little cabin. The owner was there to take our money and show us around. So here's the thing,\" Tucker said to Marsha. \"When I talked to the guy on the phone he said it slept four. I naturally assumed that meant in separate rooms...\"\n\n\"Naturally,\" Charles said sarcastically.\n\n\"...but it was a tiny little one-room cabin,\" Tucker continued, \"with two couches that opened up into double beds. They were on two walls of a corner, and when they were made up they were about two feet away from each other.\"\n\n\"Sounds cozy,\" Marsha smiled.\n\n\"We all assumed the week was gonna be romantic and sexy,\" Rhonda said, \"but doing it all in front of each other was not what we had in mind!\"\n\n\"I take it the drugs part of the story loosened your inhibitions?\" Marsha said.\n\n\"Oh boy, did it ever!\" Rhonda said.\n\n\"So we settled in...\" Tucker said.\n\n\"Tell about the owner. When he saw us,\" Charles said.\n\n\"Oh yeah,\" Tucker laughed. \"So we pull up in this huge Lincoln. It's like a pimp car. And out of it piles Charles and two gorgeous black girls in their skimpy summer clothes, and me, the white guy driving. The guy gave us a look that's still to this day the funniest thing I've ever seen in my life.\"\n\n\"Oh my god!\" Marsha laughed. \"I wish I could have seen that!\"\n\n\"Hilarious!\" Charles laughed.\n\n\"So we settled in, feeling uncomfortable about the night's sleeping arrangements,\" Tucker said. \"With Charles and Rhonda being brother and sister, we all kind of figured sex was off the table. He and I were already quietly discussing taking turns going for hikes during the day, so we could all have some private time in the cabin. And then there was Zuri.\"\n\n\"And then there was Zuri...\" Charles said wistfully.\n\n\"I don't remember exactly how it happened,\" Tucker said. \"We all had our back to her for a few minutes...\"\n\n\"The three of us were makin' margaritas at the little counter by the sink,\" Rhonda said.\n\n\"That right, yeah,\" Tucker remembered. \"Anyway, we turned around, and she's slouched on the couch, reading a paperback book, naked as the day she was born. We were speechless!\"\n\n\"Charles wasn't,\" Rhonda chuckled. What did you say? Jesus baby! or somethin' like that.\"\n\n\"She was like that when we were alone \u2014 never liked clothes much \u2014 but I never expected it in front of friends,\" Charles said. \"It was one of those moments that hits you upside the head like a big ol' hammer.\"\n\n\"I guess I can say this now,\" Tucker said, \"because enough time's gone past. Damn she was smokin' hot!\n\n\"If I didn't agree with you I'd be pissed that you said that,\" Rhonda said. \"but you're right. I wonder if she knows what you're up to here Tucker. She'd fit right in with your girls.\"\n\n\"Yeah, she would, wouldn't she?\" Tucker chuckled. \"I don't know if I've ever seen an ass like that to this day.\"\n\n\"It was fine!\" Charles said, losing himself in a daydream for a moment.\n\n\"So Charles talks to her quietly and she puts on her bra and panties,\" Tucker said, picking up the story, \"but it didn't change the sexiness quotient much, I gotta say.\"\n\n\"Girl was smokin',\" Rhonda said.\n\n\"Speakin' of smokin',\" Tucker said, \"a little while later she pulls a bag of weed and a pipe out of her purse, and then she tosses a baggie full of pills on the table. Ecstasy. I think Charles was just as surprised as we were.\"\n\n\"I'd smoked pot with her quite a bit, but yeah, the pills were new,\" he said.\n\n\"I can't speak for you guys,\" Tucker said, \"but I know I said to myself, No way. I'm never gonna do that!\"\n\nRhonda and Charles nodded in agreement, but the hint of a smirk on both their faces gave away the truth.\n\n\"I've heard that called the love drug,\" Marsha said.\n\n\"Oh baby!\" Rhonda said, nodding her head strongly in the affirmative.\n\n\"So we had some drinks and smoked some pot, which all of us had done before,\" Tucker said. \"Zuri takes four pills out of the bag \u2014 colorful little things \u2014 and sets them on the table. I remember sitting there with a nice little buzz, the four of us on the two couches, with some music going on a portable player we brought. We were feelin' no pain, just mellow and...really nice. Zuri swallows one of the pills and sits back. She closes her eyes and just sort of lays there, slouched back in her sexy underwear. Then Charles reaches for a pill and swallows it. Nobody's saying anything, it's just music. Talking Heads I think, wasn't it?\"\n\n\"Yup,\" Charles said. \"Remain in Light. I still play it once in a while.\"\n\n\"So he slouches back next to Zuri and closes his eyes too,\" Tucker said. \"I look at Rhonda. 'You want to?' she asks. I pick up the two pills and we each swallow one. She had this look of, Oh my God! Did we just do that? Neither one of us knew what to expect, so we followed Zuri's lead and leaned back with our eyes closed. I remember the music taking on a beautiful intensity, in a way I'd never experienced before. Time seemed to be a meaningless concept. I have no idea how long we had our eyes closed, do you?\" he asked Rhonda.\n\n\"Nope. No clue,\" she said. \"It was the closest I've ever been to being awake during a dream, that's all I know.\"\n\n\"So when I opened my eyes, Zuri was on top of Charles, sort of straddling him on her knees, kissing him. It was my first good look at that ass of hers, even though she still had her panties on. Maybe it was the drugs, but man oh man! She'll always have the ass of all asses in my mind.\"\n\n\"I watched her kiss Charles for a minute or two,\" Rhonda said. \"It was super sexy, like off the charts, and I got so horny! I mean ridiculous horny! I rolled onto Tucker and kissed him, and we were off to the races baby!\"\n\n\"Wow!\" Marsha said, sensing there was more to the story. \"Did you guys all...?\"\n\nRhonda looked sheepishly at Charles. She couldn't hold back a shy but beautiful smile.\n\n\"Wow!\" Marsha said quietly. \"That's hot!\"\n\n\"It was a one-time thing,\" Rhonda said, still looking at her brother lovingly. \"It made us a lot closer though. Before that we weren't the closest of siblings. But after that, even though we didn't...go there again...we just care so much more deeply for each other. It's almost like we're twins or something.\"\n\n\"It's a secret we haven't told anyone Marsha,\" Charles said. \"But I can tell you're special to Tucker, so...\"\n\n\"Thank you you Charles, and Rhonda. Your secret's safe. I can't tell you how happy I am to be a part of your close friendship with Tucker. He loves you guys. Talks about you all the time. That's the first I've heard about the Adirondack cabin though. My God, what a story! You were there for a week?\"\n\n\"It was pretty close to heaven on earth,\" Tucker said. \"And believe it or not, it's what gave me the inspiration to make porn. It was the first time I'd ever watched sex, up close and personal. Watching Charles with Rhonda and Zuri...this place grew out of that,\" he said, looking around at the big studio.\n\n\"Best week of my life I think,\" Rhonda said. \"I still dream about it.\" She glanced at her brother and looked away with another shy smile.\n\nTucker poured the remains of the Scotch into everyone's glasses. They'd killed the bottle telling the story.\n\n\"This is a special occasion,\" he said. \"I've got a 18 year-old Glenlivet in the liquor cabinet. Whaddaya say we crack it open?\"\n\n\"Sounds dirty!\" Rhonda said, her eyes flaring seductively. \"Do us girls get to put him in our mouth?\"\n\nTucker smiled, remembering how much he'd enjoyed her blowjobs all those years ago, the first he'd ever received. He went to his office for the bottle, and ran into Jamar and Kelsey as they were arriving.\n\n\"Hi boss! Party tonight? What's up?\" Jamar asked, his big smile beaming. \"I saw Kelsey outside, and she didn't know what's up either.\"\n\n\"Some old friends of mine are visiting, and Marsha's here,\" Tucker said quietly. \"I'm hoping to get everybody out of their clothes. I'm not sure it's gonna happen, but if you guys are game...\"\n\n\"Sure boss!\" Jamar said. \"Beats watchin' TV at home!\"\n\n\"You and Marsha and Jamar? You know I'm in,\" Kelsey said. \"What can we do to make it happen?\"\n\n\"My old college roommate Charles thinks your hot, and his sister thinks you're hot Jamar.\"\n\n\"Oh, I've met them!\" Jamar said. \"She's cute. What's her name?\"\n\n\"Rhonda.\"\n\n\"Yes. Rhonda! I like her! Didn't she used to be your girlfriend?\"\n\n\"Yeah, back in college. So I didn't tell them I invited you guys. I'm just gonna surprise them with you, okay?\"\n\n\"Lets' do it!\" Jamar smiled.\n\n\"Looky here!\" Tucker said, walking back to the gang with his arm around Kelsey and a bottle of Scotch in his hand. \"I found two eighteen year olds! And Jamar!\"\n\nCharles and Rhonda were both slack jawed and speechless.\n\n\"Well! It's our little award winner herself!\" Marsha said. \"Tucker? Would you care to explain? I guess I know who you were texting at the restaurant.\"\n\n\"Their names were both mentioned, and, well, it is a party, right?\" Tucker said.\n\n\"Hi you two, I'm Kelsey,\" the little redhead said with a smile. \"I hope you don't mind us crashing your party.\"\n\n\"How can you be even cuter in person?\" Rhonda said, amazed at the stunning young creature in their midst.\n\n\"Oh, thanks!\" Kelsey said, reaching for her hand. \"You must be Rhonda. And you,\" she said, turning to Charles, \"you must be Charles. It's so fun to meet Tucker's roommate!\"\n\n\"It's nice to meet you too Kelsey,\" Charles said. \"I've...admired your...uh...work.\"\n\n\"Smooth!\" Rhonda said, making fun of her brother.\n\n\"Miss Rhonda! So nice to see you again!\" Jamar said. She was a goner as soon as she heard that Caribbean accent and he beamed that bright smile at her.\n\n\"Yes,\" she fumbled as Jamar kissed her on the cheek. \"Me too.\"\n\n\"Smooth!\" Charles said to his little sister.\n\n\"Mr. Charles! Good to see you too!\" Jamar said.\n\n\"How are you Jamar?\" Charles said, shaking his hand firmly. \"Tucker's often saying what a valuable guy you are around here.\"\n\n\"He's the best boss I ever had, that's for sure.\"\n\n\"So, we're about to crack open some Scotch. You guys in?\" Tucker asked.\n\n\"Yeah! Let's do it!\" Kelsey said, her bubbly personality on full display.\n\n\"Oh how I miss having youthful enthusiasm,\" Rhonda said.\n\n\"Kelsey keeps us all young,\" Tucker said, smiling at his petite shooting star. \"So Kelsey, we were just talking about Charles' old college girlfriend Zuri. She used to looove being naked, just like you.\"\n\n\"Zuri? What a cool name! So was she a naturist?\"\n\n\"No. Just unofficial,\" Tucker said as he poured from the new bottle.\n\n\"An unofficial naturist,\" Kelsey laughed. \"That's funny.\"\n\n\"Kelsey's an official one,\" Tucker said.\n\n\"Really!\" Rhonda said. \"Did you grow up...are your parents...?\"\n\n\"Yup. They're swingers too,\" she said proudly.\n\n\"So you just got all this...like in your bones,\" Rhonda said. \"No wonder you look so natural at it all.\"\n\n\"Yeah I guess,\" she said, shrugging her shoulders. \"It seems funny to me when people think it's a big deal.\"\n\n\"The porn you mean?\" Rhonda asked.\n\n\"No. Just sex, you know? Do you guys think it's a big deal?\"\n\n\"Not as much as I used to I guess,\" Rhonda said. \"When you get older you kinda want it to happen. You feel like your time's runnin' out maybe, and you loosen up a little, let things happen a little easier maybe.\"\n\n\"Yeah, I can agree with that,\" Charles said.\n\n\"So you're an easy lay now Charles?\" Kelsey asked. \"You didn't used to be?\"\n\n\"Ha!\" he laughed. \"In certain circumstances I guess I am.\"\n\n\"In certain circumstances I think we all are!\" Jamar smiled.\n\n\"So how come we're on the hotel room set?\" Kelsey asked. \"We gonna shoot a scene?\"\n\n\"Ha!\" Marsha laughed. \"Tucker's got some sort of devious plan tonight I think.\"\n\n\"Maybe this is certain circumstances!\" Jamar said.\n\n\"Jamar my man, you win the prize!\" Tucker smiled.\n\nAn awkward silence fell over the group, all of them feeling they were barreling headlong into something exciting.\n\n\"See, this is what I mean,\" Kelsey said. \"It's no big deal you guys! I'll start.\" She set her glass down and whisked her little t-shirt off. \"Help me Marsh. I love the way your hands feel on my tits.\"\n\n\"Ooo! A little history between you two?\" Rhonda asked, looking intrigued. \"Marsha, you've never been on the website, have you?\"",
        "\"No. But I've...played a little bit,\" she said. \"It's hard to resist around here, I'll tell ya.\"\n\n\"Oh my God, I'd be the office slut if I worked here,\" Rhonda said. \"Not that there's anything wrong with that! I've always dreamt of being a slut.\"\n\n\"Really?\" Charles asked. He looked intrigued too.\n\n\"Yeah. I always wished I was sexier. Freer, you know?\"\n\n\"It's never too late Rhonda,\" Kelsey said while Marsha helped her slip the bra off of her arms. \"Ohhh Fuuuck!\" she purred, when Marsha's hands cupped her incredible tits from behind. \"I loooove bein' sexy in front of people I just met. It's sooo hot!\"\n\n\"She's kinda irresistible, isn't she?\" Marsha said. She kissed Kelsey's neck and gave her big tits a playful jiggle.\n\nCharles and Rhonda were mesmerized by the unfolding naughtiness. Just the sight of Kelsey's remarkable tits would be enough to mesmerize anybody, but seeing a woman's hands on them, and hearing Kelsey's tender moan, well, it was too much.\n\n\"Jamar honey, you feel like kissing a horny old woman?\" Rhonda asked.\n\n\"The only women I see here are young and beautiful!\" he said. He set his glass down and gave Rhonda a sexy, nibbling kiss.\n\n\"Looks like we're spectators old buddy,\" Tucker said to Charles. \"Another splash?\"\n\n\"Absolutely,\" Charles smiled, holding out his glass.\n\n\"No spectating allowed,\" Kelsey said. She was out of her jeans and landed like a fleshy grenade in Charles' lap, nearly knocking the bottle out of Tucker's hand.\n\n\"Careful girl! That's a hundred-and-twenty-dollar bottle!\" Tucker laughed.\n\nThe scolding fell on deaf ears \u2014 she already had her tongue deep in Charles' mouth. When she was in sex mode, nothing else mattered much.\n\n\"Come here you,\" Marsha said, beckoning Tucker with her finger. She had a little smile on her face, so he knew he wasn't in trouble. \"You're a bad boy tonight,\" she said when he sat next to her. \"Did you plan this all along?\"\n\n\"It just came to me at dinner,\" he smiled.\n\n\"Bad boy,\" she said. She kissed him and gave his cock a squeeze through his jeans. \"So what now?\" she whispered, nibbling on his ear. \"Do we become shameless orgy junkies?\" \n\n\"I can think of worse pursuits,\" Tucker whispered back, flicking his tongue into Marsha's ear.\n\n\"Fuck!\" she sighed, her horny switch firmly in the on position. She glanced around. Charles was sucking one of Kelsey's big tits, and Jamar had his hand up under Rhonda's thin summer sweater, their long kiss still burning on. \"There's a nice big bed over here,\" she said to everyone as she led Tucker to it.\n\nTucker stripped her to the waist and nibbled on her nipples. She dropped to her knees and loosed Tucker's cock. His nice groan when she inhaled it got everyone's attention.\n\n\"It's been a long time since I've heard that sound,\" Rhonda said, glancing at Tucker before getting back to the task at hand \u2014 opening Jamar's pants. \n\n\"Oh Jeez!\" she sighed when Jamar's length sprung out. \"Fuck!\" she said, looking up at a her smiling man as her hand wrapped around it. \"My brother's not gonna like it. He thinks big black cocks are bad for humanity.\"\n\n\"Don't be twistin' my words woman!\" Charles said.\n\n\"A cock's a cock isn't it?\" Kelsey said. \"They all feel good inside. Who cares what color it is.\"\n\n\"See, brother? The newer generation's got it straight,\" Rhonda said, right before she engulfed Jamar's monster.\n\nJamar groaned. The wet heat of Rhonda's mouth felt incredible. She was slouched a bit on the couch, and he was straddling her hips on his knees, thrusting gently between her red-lipsticked lips. Rhonda moaned like it was the best thing she'd tasted in a while.\n\nCharles was still fully clothed, but Kelsey had his cock out. He kind of wanted to watch his sister suck Jamar's big one, but Kelsey had other ideas. She stripped off her panties and reoriented herself, her lithe young body sixty-nining the sitting man, her thighs supported by his shoulders, the rest of her draping down so she could gobble up his throbbing hardness. Charles couldn't believe the sight in front of him \u2014 an ass every bit as irresistible as Zuri's, and a smoothly shaved pussy so young and juicy and beautiful. He put his hands around her tiny waist and pulled the succulent flesh to his mouth.\n\n\"That's it Charlie!\" she purred on his cock. \"Fuck yeah!\"\n\nHe nearly came instantly. He held off like a trooper \u2014 for about two minutes. Kelsey slurped up his spewing cream.\n\n\"Blue pills in my middle desk drawer buddy, if you want 'em,\" Tucker said.\n\n\"Damn right I want 'em,\" Charles said. \"I'll be back sweetheart. Don't move a muscle.\"\n\n\"I'll be here for ya Charlie,\" Kelsey cooed, sprawled out naked on the couch, her childlike fingers teasing her smooth pussy.\n\nMarsha was naked, just laying herself down on the big bed when Charles walked by. She felt slutty and wicked, being so wanton in front of Tucker's best friend. She knew it wasn't normal, but she kind of loved it, and she had a feeling she'd have Charles' cock in her before the night was over. Just the thought of it gave her a small, trembling orgasm when he walked by, his eyes taking in the suddenly heaving bosom on her recumbent body.\n\n\"Ohhh wowww!\" Tucker said quietly when he saw the unmistakable signs of Marsha's sexual tremor. \"My sweetie's excited!\"\n\nHe spread her legs and knelt between them, lowering his mouth to her waiting pussy. She was fully involved when Charles walked by again, her body writhing uncontrollably. She put her hand out toward him and he took it, their eyes meeting as she pulled him to her for a wet kiss. It surprised her, doing something like that. She didn't know Charles well. Being naked in front of him was a big enough deal, but there she was, holding his hand tight, kissing him deeply as she floated toward orgasmic bliss. Tucker watched them as his tongue worked it's magic, her pussy warm and wet, her clit extra sensitive. Charles gave her soft tit a squeeze and then broke off the steamy kiss, a string of saliva connecting them as his head rose and he took in the beauty of her writhing body. She had a lovely orgasm with him watching, holding her hand.\n\n\"God I love women,\" Charles said.\n\nMarsha smiled, her mind floating in a dream as he walked away.\n\n\"You're the only one with any clothes on you know,\" Kelsey said when Charles returned to her.\n\nHe glanced at his sister, the first time he'd seen her naked since that extraordinary week at the cabin all those years ago. She looked glorious, slouched low against the back of the couch, long legs spread wide with Jamar between, his long tongue making her squirm.\n\n\"She's really pretty,\" Kelsey said when she saw him looking. \"Such a sexy smile.\"\n\nKelsey's comment snapped Charles back into focus \u2014 a stunning little red-headed porn girl, ready to be taken. Good Lord, he thought to himself as his eyes drank her in again \u2014 could God himself even think up such a heavenly sex pot? Fuck! Thank you God, for pairing Tucker and me up in that dorm! Thank you! Thank you!\n\n\"Strip honey. I wanna watch,\" Kelsey said.\n\n\"I'm too old for that darlin'. Nothin fancy anyway.\"\n\nHe flung off his shirt and pants, almost stumbling to the floor as he pulled the pant legs off. Kelsey giggled. Rhonda watched. She was nearing her first orgasm when Charles' hard cock came into view. No, not a big black cock. An average black cock. A lot like Tucker's average white cock. Freshly fortified by the blue pill, it throbbed up and down a bit before Kelsey sucked it into her mouth, her hands squeezing Charles' nice ass as the length of him went down her throat.\n\nThat was all it took to put Rhonda over the edge. She exploded, cumming as hard as she could ever remember as she watched the little redhead deep-thoat her brother's dick. There was so much latent energy and desire in that orgasm, she nearly lost her mind.\n\n\"Miss Rhonda!\" Jamar said. He was fingering her pussy gently as she came back to earth. \"You a beautiful cummer!\"\n\nAn uncontrollable giggle came out of her, breathy and soft. She glanced at Charles again, and he at her. There was electricity in the air that night at the studio, that was for sure.\n\nMarsha was up in her favorite position, doggie style, with her shoulders down on the bed sheet. Tucker was fucking her nice and slow, and both of them were watching the action on the couch. Jamar heard the soft sounds she was making, took Rhonda's hand and led her to the big bed. Rhonda knelt next to Tucker and kissed him. Her hand was on his ass, feeling the flexing muscles as he thrust slowly into Marsha. \n\n\"It's been a long time Tucker,\" she purred when the hot kiss ended. The kiss felt familiar, even after the passing of so many years. The quickly escalating orgy, so reminiscent of the week in the cabin, felt dreamily familiar too.\n\n\"Fuck me Jamar,\" Marsha sighed, knowing Tucker and Rhonda had some more serious reminiscing to do. Jamar smiled, more than happy to feel the inside of Marsha again, and Tucker was quickly on his back, reaching for Rhonda.\n\n\"Oh God!\" Rhonda said, as she lowered herself down on her old boyfriend's hard shaft. She looked around \u2014 at her brother, up on his feet fucking the sexy little long-haired redhead, and at Jamar, sinking his long cock into Marsha's pussy, his hands on her nice round hips. \"Do you guys do this all the time?\" she asked Tucker.\n\n\"This is a special occasion,\" Tucker said. He grunted when Rhonda bottomed out. \"Very special.\"\n\n\"Fuck yeah!\" Kelsey yelled as Charles picked up speed, slapping loud into her perfect little ass. \"Fuck me Charlie!...Do it!...Do it!\"\n\nRhonda leaned down and spoke quietly into Tucker's ear as he started a lovely, slow up-thrust into her.\n\n\"He's always hated being called Charlie. I'm guessing he'll like it now,\" she giggled.\n\n\"Kelsey makes everyone like everything,\" Tucker smiled.\n\n\"God you feel good!\" Rhonda said. \"I'd forgotten how well we fit together.\"\n\n\"Me too,\" Tucker said. Their lips met and they were lost, halfway back in time and halfway in the now, a swirling dream that felt like heaven.\n\nIt didn't take long for the two couples on the bed to intermingle. Kisses were swapped and sexy parts were fondled by hands coming from who knows where. Rhonda found herself on her knees, with Jamar licking her asshole and juicy pussy.\n\n\"Oh Jesus!\" she said. And then she felt his cock poking around her pinkness. \"That thing's too fucking long Jamar. I've never had a guy so big.\"\n\n\"Don't worry Miss Rhonda. I think maybe you'll like it.\"\n\n\"Oooohhh-hoooe!\" she yelled when he sunk in balls deep, her sexy exclamation echoing through the big studio. Charles took notice. Her noises were lovely, and increasingly guttural as she absorbed Jamar's sweet fucking.\n\n\"Wanna join the party?\" Kelsey asked Charles. She was on her knees with his cock in her little hand, licking his balls. It was a reward for the nice orgasm he'd given her.\n\nShe could see the answer to her question in Charles' eyes, so she took his hand and led him to the bed. Rhonda saw them approaching and rose up on her elbows, the look on her face leaving no doubt she was lost in big cock bliss. Her wild, lusty eyes locked on Charles' wet cock, still hard, proudly bobbing in front of him as he walked. To Charles and Rhonda it all felt like slow-motion. It was as if the lust in her eyes was a tractor beam, and brother's cock went in sister's mouth. There was no stopping any of it \u2014 it was happening, and both of them groaned loudly when it did. \n\n\"Fuck!\" Kelsey said quietly as she climbed onto the bed with the others. \"This is so fuckin' hot! I wish I had a brother.\"\n\nRhonda was full at both ends for the first time in decades, and she was digging it. Big time. Charles and Jamar gave her what she'd been craving \u2014 a cock deeper in her fiery pussy than she thought possible, and her loving brother's slippery one in her mouth, still tasting of Kelsey no less! She flew off to magic land, and rode the wave like she never had before. The boys switched around and she flew off again. She opened her throat and let Jamar deep in that end too, a skill she hadn't practiced in many years.\n\n\"Fuck! She's wicked hot Tucker! Lookit! She swallowed all of Jamar!\" Kelsey said. She was climbing on her boss for a sixty-nine, with Marsha helping out at the blowjob end of things.\n\nIt was a beautiful orgy. Old friends, new friends and family all joining together, free and loving and full of buoyant spirit, just the way Kelsey liked things. Marsha did in fact have Charles in her that night. More than once in fact. Way before it was all over they'd all agreed to make the gathering an annual event, or more often if Charles could make it up from Miami more than once a year. The look on his face when Kelsey rode him, her extraordinary tits bouncing amidst her long red hair, gave everyone a pretty good idea they'd be getting together more than annually. Charles said he'd bring the scotch next time.\n\nWhen they'd all worn themselves out a memorable scene took shape. The three girls \u2014 tired and sweaty, their faces still lusty but content \u2014 all flat on their backs next to each other, holding hands. For the three men it was a stunning thing to behold, and Tucker was visibly moved.\n\nHere's the thing about Tucker. He's an aesthete. The way things look has always been important to him. He could very well have gone to art school instead of business \u2014 he was that in tune with the beauty of the physical world, right down to the little things, the details. A woman's breasts don't fall into the category of 'little things', even if they're small. No, to most men's eyes they're a big deal, but not all men pay attention to the details \u2014 the tiny movements and the specific curves of a natural breast, things that are lost when a plastic surgeon mucks up the works with the artificial. There's a time and a place for implants \u2014 reconstruction after cancer for example. Tucker had a woman do an amateur scene not long after recovering from cancer \u2014 'porn star for a day' was on her bucket list \u2014 and she was radiantly beautiful with her brand new tits, but nothing got Tucker's goat more than a healthy woman getting implants. He hated the growing trend, and the women in his employ clearly showed his preference. Jamar gave him a FAKE TITS SUCK bumper sticker for Christmas one year. Tucker would love to display it proudly on his car, but he doesn't want to make women feel bad about choices they've already made, even if he thinks they were horribly wrong.\n\nSo Tucker's a lover of natural tits. Everything from Alice's sleek small ones to Molly's soft, voluptuous ones with the big nipples, to his new part-timer Victoria, with her over-the-top big girl curves and humongous mammaries. He loves 'em all. But the sight on that big bed that night \u2014 three of his favorite girls in all the world, smiling and happy, all flat on their backs side by side, with gravity doing that extraordinary thing it does to big natural tits in that position, well, it was probably the best thing he'd ever seen in his life. Charles and Jamar thought so too.\n\n\"Good God almighty!\" Jamar smiled. \"All this beauty in one place!\"\n\n\"If that doesn't prove women are beautiful at every age, nothing else will,\" Charles said.\n\nKelsey giggled. Marsha did too. Rhonda was still swooning \u2014 quiet little moans still making their way out of her, her body still writhing almost imperceptibly, still smoldering orgasmically under the surface, like a house that's burned to the ground but is ready to spontaneously combust again when no one's watching.\n\nTucker snuck away for a moment and reappeared with a camera in hand.\n\n\"Don't worry,\" he said. \"Nobody'll see this picture but us. You girls are just too spectacular. I want this picture in the casket with me when you bury me.\"\n\nHe took a few frames of the smiling women. The three of them looked at each other when Tucker put the camera down, wondering if they should get up, wondering if the blissful night was coming to a close.\n\nKelsey could sense that Rhonda still had something left, some energy left inside that somehow hadn't been satiated.\n\n\"Rhonda wants more you guys,\" the little sprite said. She rolled onto her new girlfriend, her big breasts pressing softly against Rhonda's, and kissed her deeply. Rhonda moaned.\n\n\"Ha ha!\" Marsha giggled. \"You heard the girl. Nothin' but truth comes out of her mouth.\"\n\n\"Thank God there's room for cocks in it,\" Jamar smiled, gently stroking his tired one back to life.\n\nEveryone laughed softly. The party went on all night."
    ],
    "authorname": "riverboy",
    "tags": [
        "group sex",
        "black man",
        "bbc",
        "black woman",
        "redhead",
        "orgy"
    ],
    "category": "Interracial Love",
    "url": "https://www.literotica.com/s/tuckers-studio-ch-20"
}
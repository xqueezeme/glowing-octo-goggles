{
    "title": "There and Back Again Ch. 035-036",
    "pages": [
        "Chapter Thirty-Five: We're having a picnic...\n\nOnce finished with my personal morning details, I returned to the campfire. Alistair was about to stand up, no doubt to offer me his seat, but I shook my head, pushing down on his shoulder, and then just parked myself in his lap. I'd never have been brave enough to do that before, but I'd never been so utterly confident about how someone felt about me before. Besides, he had literally carried me in his arms for hours \u2013 I was pretty sure he could take my weight. Leliana shot me a grin as Alistair flushed bright red, and I giggled back. Once settled, I turned to her and Wynne, and Zevran who had just emerged from his tent as well.\n\n\"Alright. Out with it.\"\n\nThey looked at me, confused, and Leliana spoke. \"Out with what?\"\n\n\"The teasing. The 'I told you so's. The lewd comments. Get them out of your system, would you? Speak now or forever hold your peace.\"\n\nWynne rolled her eyes good-naturedly, and continued reading her book. Leliana rubbed her hands together gleefully, and Zevran sat nearby with a mischievous look on his face. Leli had just opened her mouth to speak when a voice from the tents behind me piped up.\n\n\"Wait! If it's a free-for-all teasing session for my sister, you can't get started without me!\" We all laughed as Aedan stumbled out of the tent we shared.\n\nSeeing me sitting in Alistair's lap, he drew up short, and I saw his eyes flash from me to Zevran and back. He paused, just for a moment, and then seemed to make a decision. Taking a deep breath, Aedan sat down beside Zevran, drew the shorter man's face towards himself, and kissed him. I think he thought everyone would gasp in surprise, because when he pulled out of the brief kiss, his eyes flew open and he examined each of us in turn. No one looked shocked, and in fact Leliana and Alistair both had pleased smiles on their faces. Aedan's eyes narrowed.\n\n\"You all knew?\"\n\nLeliana, Zevran, and Alistair all responded at once.\n\n\"We're not blind!\" \"Of course they knew, amore mio.\" \"How dumb do you think we are?\"\n\nI howled with laughter, and Zevran snickered in my direction. Aedan's face was sort of purple, and he shot me a nasty look.\n\n\"I didn't tell anyone! Don't look at me.\"\n\nWynne piped up. \"If you didn't want everyone to know, dear, you could have tried to be a little more... discreet.\"\n\nAedan shook his head, looking despondent. \"So we could have just...you wouldn't have cared?\"\n\n\"Well, we'd have teased you. Like we will now.\" Leliana looked smug, and we all laughed.\n\nThe good-natured banter continued all morning while we took a much-needed break. Even Sten didn't complain too much about the delay, and he and Shale wandered off to explore around the camp a bit. Aedan watched them go, his expression both speculative and disturbed. \n\nI laughed. \"I don't think so, brother. But then again, who knows?\" \n\nAedan shuddered and muttered under his breath. I couldn't hear the words, exactly, but the tone was obvious. I was quite certain he'd said \"Maker help us.\"\n\nReturning to the fire after a trip to the stream again, I found Alistair and Leliana talking together quietly, looking secretive. Alistair's face was red, and Leliana touched his arm and then said something that made him laugh. My jealousy flared, but I was able to squash it. I trusted them both. Nothing was going on. Seeing me, Alistair wandered over with a sweet smile on his handsome face. He held out his hand somewhat hesitantly, and I gave him mine, fingers intertwining instinctively. He had a bag over his shoulder, his sword and shield slung on his back.\n\n\"Come on.\" He tugged on my hand, and I followed him out of camp. We hit the stream and then followed it up a ways, until we found a little clearing right nearby. He let go of my hand, placed his shield and sword on a rock, and then started rummaging through the bag. \n\nHe pulled out a blanket, which he spread on the ground, and then sat down, patting the area beside him. \"Picnic?\"\n\nI smiled down at him and plopped down on the blanket. He pulled out some bread, some cheese, and the ubiquitous jerky.\n\n\"I wish I could have brought something special to eat, or at least some wine or something, but...\"\n\nI interrupted. \"It's perfect. Thank you, Alistair.\"\n\n\"I thought...we could spend some time together. Just us.\"\n\n\"I'd like that.\" \n\nWe sat on the blanket, eating lunch, talking about nothing much, until the last of our meal was cleaned up. Alistair reclined back on the blanket beside me, and I lay down beside him, shoulders just touching. Our hands found each other again.\n\n\"I thought you might be angry with me this morning.\"\n\n\"Why?\"\n\n\"The teasing? I thought you might be upset. I didn't say anything, didn't protect you.\"\n\n\"Oh, I didn't mind.\" I blushed a little bit. \"I kind of liked it, actually.\"\n\n\"You did?\" He rolled to his side, head propped on one arm, watching me.\n\nI nodded. \"I've never had anyone care enough about me to tease me, before now. I probably could have gone to school with no pants on by mistake, and no one would have noticed, never mind teased me about it. The teasing doesn't bother me \u2013 at least it means they care.\"\n\n\"They do. We do. There isn't a person back there who wouldn't put their life on the line to protect you, Sierra.\"\n\n\"I know.\" My blush deepened. \"And I feel the same way. I've never had a family before. I like it, even if it means I have to put up with some teasing.\"\n\n\"Well, I'm sorry anyway, for what that's worth.\"\n\n\"Oh, don't worry Alistair. You'll get your fair share. Just wait until Wynne tries to tell you where babies come from.\"\n\n\"Wha-? Babies?\"\n\n\"Wynne's right. You are cute when you're all red and mottled.\"\n\nAlistair flopped back down with an exasperated sigh. \"Maker, what is with you women?\"\n\nI giggled. \"Do you still like me?\" I went up onto my elbow to look down at him.\n\n\"No, Sierra. I don't like you. I love you.\"\n\n\"You're just hoping I'll kiss you.\"\n\n\"Not just...but I mean, if you wanted to-\"\n\nI leaned down and softly pressed my lips to his. It was interestingly different being able to look down on him, and I spent a few minutes teasing him, dropping tiny kisses on him quickly, then nibbling his lower lip for a brief moment before backing off again. Finally with a growl he grabbed me, and flipped us both over, so I was on my back and he leaned over me. He pressed me down and kissed me firmly, his tongue tasting my lip, and then, when I opened my mouth, plunging in to meet my own. I moaned, aroused and amused, letting him be in control, my hands fisting in his shirt.\n\nSomething occurred to me, and I nudged him to stop. \"Hey, you're wearing a shirt.\"\n\nHe panted softly, breath warm on my ear. \"Um, yeah...shouldn't I be?\"\n\n\"No, I just mean no armour.\"\n\n\"Ah, yes...Leliana convinced me that plate armour wasn't exactly romantic.\"\n\n\"Too bad she didn't say anything to me! I could have worn clothes too. Instead of armour.\"\n\n\"I don't mind. Your armour is...uh, well, it looks...nice on you.\"\n\n\"I'm gonna go with 'thanks', and not examine the rest of that statement too much.\"\n\n\"I appreciate that.\"\n\nHe kissed me again, and I didn't think for a while. After a bit, he rolled onto his back again beside me.\n\nHe spoke. \"So can I ask you something?\"\n\n\"Anything.\" I rolled over to my side again, admiring his profile.\n\n\"Really? Anything? Huh. I'll get back to that. But what I wanted to ask about was Zevran.\"\n\n\"That I wasn't expecting. What about him?\"\n\n\"I just don't understand. You seem to actually...like him.\"\n\nI laughed. \"I do. But it's because I understand him.\"\n\n\"How could anyone understand him? He's so aggressively...I don't know. Sexual. It's creepy. I mean I guess Aedan doesn't mind it because he actually wants to be seduced by him, but...how does it not drive you crazy?\"\n\n\"Hmm. How do I explain this? He's...he's like where I came from. You have to understand what life is like, there. It's so busy, everyone running around and working too much and not taking time to talk or even see others. They hide behind machines, even use them to communicate \u2013 I've seen two people sit side-by-side and use their machines to talk to each other instead of turning their heads and speaking. People are so...lost. They don't know who they are, or what they're supposed to be. They're in pain and they don't even know why. So some of them overcompensate. They go out at night to have anonymous sex because at least then they can feel something other than empty. They use sex to sell things, they sell their bodies without even thinking that they're doing it. Some of the women wear these incredibly revealing, skimpy clothes, just because someone might notice them, finally. Morrigan would fit right in. It's all a mask to hide what's really happening.\n\n\"Zevran is like that. He uses sex to protect his feelings, to avoid getting hurt. He makes everything a perverted amusement. Even the assassin stuff. It's a costume. And he does it for shock value; if you're so busy being horrified by what comes out his mouth, you're less likely to question his motives, notice his pain. So I can understand where it's coming from. Honestly, he wouldn't know what to do if a tenth of those he propositioned said yes...behind the mask, he's still that six year-old boy who grew up without a mother, who was bought and paid for by bastards who tried to steal his soul.\n\n\"You two aren't so different, Alistair. You use sarcasm to do the same thing he uses sex for. The difference is you were raised by people who, while they treated you abominably, had morals, and so do you. Zevran probably never even met anyone with morals until he met us.\n\n\"Besides, the suggestive stuff he does? It's not very over-the-top compared to people where I came from. If I went out on a weekend dancing, someone would do something far more inappropriate than what Zev tries to pull. So he doesn't shock me. It's actually kind of funny.\"\n\nHe was quiet for a bit, pensive, and I spent my time openly staring at Alistair. From his somehow always-perfect hair, to his ever-present stubble, strong jaw, and muscular body, he was a dream come true. He could make a nun think twice about her vow of chastity. And he had no idea.\n\n\"You said 'some women' dress scandalously and have casual sex. And...what about you?\"\n\n\"Oh, no. Not me. I uh...well, this body isn't quite like mine, back there. I was considered ugly, there. No one wanted to see me in skimpy clothes. I was always quite modest.\"\n\n\"This body? Your body there is different?\"\n\n\"Yeah, well...it's a much more sedentary existence. I looked sort of similar, but definitely had more insulation.\" I patted my smooth stomach.\n\n\"And that was enough for you to be considered ugly?\"\n\n\"Well...it changes how you look, when you're fat. Even my face looked different. And the standards of beauty there are very different than here. It's all about being skinny and wearing tight, revealing clothes. They don't even really care what your face looks like \u2013 it's easy enough to change that, between make-up and cosmetic surgery...\"\n\nHe looked disgusted. \"I think I'd hate where you come from. I don't care if you were twice as big around as you are now, you'd still be beautiful.\"\n\n\"You, sweet man, are biased.\" I leaned over and kissed his cheek softly. \"But thanks.\"\n\n\"So, if you weren't into the revealing clothes and anonymous sex, have you...ever...\"\n\n\"What? Have I ever...had a good pair of shoes? Seen a basilisk? Ate jellied ham? Licked a lamppost in winter?\"\n\n\"You know, it's really unfair that you know all my lines.\"\n\n\"I'm very sorry, love. But the answer is, yes I have. Once. It was...awkward.\"\n\n\"Can I ask?\"\n\n\"Are you sure you want to?\"\n\n\"I...yes, I think I am.\"\n\nI sat up, facing him, and reached out and took his hand again. \"It was nothing really to write home about. Honestly...I was a dumb kid, and so was he; we were friends, and I knew I was about to be forced to move again, because my foster-mother, the only one who'd ever cared about me, was ill. We were just...fumbling in the dark, really. And then I moved, and I never saw him again. My next home was...well, it was bad. I moved three times after that, until I left the foster system. And after that I was so busy, working to pay for my education, going to school, and then trying to pay off the debt I'd accrued during my schooling...\"\n\n\"I'm sorry, Sierra.\"\n\n\"Don't be. I honestly didn't feel like I was missing anything, until...well, you happened.\"\n\n\"I just can't imagine what it was like, to have grown up like that. I mean, Isolde hated me, and I hated the Chantry, but at least I wasn't blown about like a leaf in the wind.\"\n\n\"Sort of normal, there, though. Even for people with families. I like it here better. And...I get to have a new start with all that now. I never...I never thought I'd be with anyone, never mind someone like you.\"\n\n\"What does that mean?\"\n\n\"You know. You overheard me, yesterday...\"\n\n\"It never hurts to hear it again.\" He grinned up at me.\n\n\"Someone...kind. Sweet. Funny. Strong. A real-life hero. Gorgeous...you name it. Actually, this will tell you. Where I came from, you have a fan club. Several, actually.\"\n\n\"A what?\" He blushed.\n\n\"Yep. Thousands of women who get together and talk about how they wish you were real, and how they wish they could meet someone like you. If anyone back there figures out where I am, I'll probably be assassinated by some raving fan-girl on the off-chance that whoever kills me gets to take my place...\"\n\nHe was almost purple now. \"Tell me you're joking. Me? I'm not one to complain about ridiculously good fortune, but I don't deserve to be with you, never mind have a fan club.\"\n\n\"That's one of the things everyone loves, Alistair. You don't even know how desirable you are.\" \n\nI leaned in and kissed him again, hoping I could show him how I felt that way. I was suddenly very passionate, needing him to understand. Without breaking the kiss, I managed to find my way from my butt to my knees, leaning over him, reaching one hand around to hold him to me by the hair, the other stroking his cheek. His hands came up from underneath, one settling on my waist, the other crushing me down to his chest. Arousal poured down to my centre like little licks of flame and I moaned, helpless.\n\nFinally breaking away, we both panted for breath. I need to stop, or I'm going to rip his clothes off on the spot. Down girl! I concentrated on breathing, sitting up again to give myself some space. He looked dazed, a goofy grin plastered to his face, lips slightly swollen from our activities. My gaze travelled over his still form, eventually landing on the obvious bulge in his trousers. Not just me then. Good to know. I fought the urge to touch him, to beg him to touch me, and won. Part of me was disappointed.\n\n\"It is very, very\" hard \u2013 don't say hard \"difficult to keep my wits around me when I'm with you, Chantry boy.\"\n\n\"All part of my defense mechanism, my dear. If you're witless, you won't be able to get a plan together to ditch me.\" He grinned, laughing at his own joke, but it was obvious he wasn't entirely kidding. Really? How can he still be insecure?\n\n\"Alistair.\" I pulled him up so he was facing me, then knelt beside him so we were face to face. I put one hand on each cheek to make sure he was paying attention. \"I will never ditch you. Never on purpose. I don't know what will happen to either of us, and maybe this will end in heartbreak, but I'm not going to leave you if I have any say in the matter. You're stuck riding this tiger with me, buddy.\"\n\nHe leaned forward and kissed me breathless. \"I don't even know what to say. Except, I guess, I love you too. But um...what's 'riding a tiger' mean?\"\n\nI laughed. \"It's a saying from where I grew up. Are there tigers in Thedas? Huge, predatory cats? Fast, dexterous, fierce...been known to eat people? Anyway, the point is that riding a tiger, as challenging as that is, isn't the hard part. The hard part is that once you're on the tiger, you have no choice but to keep on riding, even if you don't like where it's headed, because if you try to get off, you get eaten.\"\n\n\"You plan on eating me if I try to get off? Did I seriously hear that correctly?\"\n\nI howled with laughter, and Alistair laughed with me. \"I'm not the tiger! Goof.\" I giggled again. \"Zevran would be so proud right now.\" I pulled myself together. \"Besides. If I were you, I wouldn't tease me about eating you.\" I put on my best, predatory evil grin, and licked my lips slowly just for effect. The look on his face was priceless \u2013 like a deer in headlights. A very aroused, very red-faced deer.\n\nI leaned in, eyes locked with his, and just before our lips met, I gently stroked his bottom lip with the very tip of my tongue. He groaned and crushed me to him, pulling me into his lap and attacking my lips. How long we sat like that, talking and giggling and making out like teenagers, I don't really know. It felt wonderful. We didn't really get past kissing \u2013 it was too new, too sweet, and though part of me truly did want to devour him, I didn't want to push it. So I moaned and wriggled on his lap and lost myself in Alistair. \n\nChapter Thirty-Six: Ambush and Aftermath\n\nWe wandered back to camp for supper, as we didn't have enough food in our picnic to stay away, and enjoyed more general teasing and banter while eating. Aedan and Zevran actually took the brunt of the teasing, much to my enjoyment. I didn't think I'd ever seen Aedan blush so red. I refused to budge from Alistair's lap, sitting with my back to his chest, his arms around me, and his chin on my shoulder. Periodically he would turn and kiss me on my cheek or whisper something in my ear, and that kept me so distracted I barely noticed any teasing that came our way. At bedtime, he walked me to my tent again, and it was less awkward this time; he kissed me deeply, leaving me breathless yet again. As I lay in my bedroll, frustrated and horny, I desperately hoped he would make a move soon, or my head might explode. At least this time I managed to pee and brush my teeth before bed!\n\nWe continued on to Denerim in the morning, but suddenly travelling was a whole new thing. I walked hand-in-hand with Alistair, and got to talk with him the entire time, instead of avoiding him like I usually did. He was hilarious, his 'witty one-liners' keeping me in stitches most of the time that we walked. It made the day pass faster, and the little rest we'd taken the day before meant we actually made better time than normal. We chatted with Aedan, Zevran, Leliana, and Wynne periodically as we walked, but never let go of each other's hand. It was a heady feeling. He's mine. I'm his. What did I do to deserve this?\n\nCamp got back to a semblance of normal, and I started sparring again with Aedan, with Zevran's help and advice. Alistair looked pretty tense until it became obvious that Aedan was pulling his punches, not allowing me to get hurt, and Zevran even kept his hands to himself. Will wonders never cease? After supper, Alistair and I decided to train a bit. I got my focus fast, was able to do the exercises he'd showed me, and his pleased smile was worth every ounce of concentration I'd spent and the headache I knew I'd have afterwards. It was a little more distracting trying to practice while holding Alistair's hand, sitting where I could feel the heat radiating off his body, but I managed not to jump him and called it a victory. After practice, we cuddled and kissed for a while before reluctantly parting to go to sleep.\n\nThe next day brought the ambush from Marjolaine's hired goons that I'd been waiting for. I huddled in a ball, frightened as usual, while the rest of my companions decimated the little group of mercenaries. We got the address to Marjolaine's hideout, and Alistair rushed over to me to make sure I was okay. Which, of course I was \u2013 it's hard to get hurt when you lay down and cry every time violence breaks out. I was embarrassed; he thought it was sweet. He'd have cuddled me, but his armour was covered in blood spatter and I had to look away until he'd cleaned up. Zevran rolled his eyes theatrically in my direction, but I noticed he hadn't wasted any time getting the gore off his own armour. I stuck my tongue out at him and earned myself a chuckle.",
        "As we walked, Alistair, holding my hand, slowed us until we were a dozen steps behind everyone, then pitched his voice low.\n\n\"I'm sorry, Sierra. I hate it when you see me like...that.\"\n\nI looked at him quizzically. \"Pardon? Like what?\"\n\n\"Well, I know the violence makes you sort of sick. I hate the thought of you associating me with that. I wish you didn't have to see me fighting. And stuff.\"\n\n\"Oh, honey. I'm not bothered by it. I may abhor the violence, but that doesn't mean I don't want you to defend us when we're attacked. I don't think you will turn into some sort of psycho and go murder people in their sleep, or anything. I don't have anything against self-defense. I'm just too much of a pansy to help out, which is disgusting, actually. I need to harden up a bit, I know that.\"\n\n\"Don't. Please.\" His expression was sincere, his hazel eyes piercing. \"You wouldn't be you if the bloodshed didn't bother you. I don't want you to become that cynical person who is immune to it. I wish I hadn't. It weighs on me, even when I know it's necessary to kill someone to defend us. I don't want you to live with it. Let us defend you.\"\n\nI pulled him down for a kiss, and felt his armoured arms wrap around my waist gently. \"So what you're saying is you have a thing for pansies?\" \n\n\"Just one.\"\n\nI gave him an Eskimo kiss, rubbing his nose with mine, which made him chuckle, and then took his hand again and pulled him along to catch up. \"I haven't agreed not to try to learn how to defend, just so we're clear.\"\n\nHe rolled his eyes. \"I'm aware.\"\n\nI actually skipped for most of the rest of the day, much to everyone's amusement. Alistair just grinned at me indulgently, which got him teased by Aedan and Zevran, but he didn't even seem to notice. And I certainly didn't care. I hadn't been that happy since...ever, actually. Even Morrigan's dirty look when I bounced around her at lunch couldn't dampen my mood, especially since I was half-convinced it was fake. And I was pretty sure the scorching kisses Alistair kept laying on me periodically when he thought no one was looking were causing dampening elsewhere...so inappropriate, Sierra!\n\nWe made decent time over the next couple of days, even if I got definitely insufficient sleep. Between staying up late cuddling and canoodling with Alistair, and then lying awake in my tent, horny and unable to do anything about it because of Aedan right next to me, I was strongly wishing for a Diet Coke to give me the caffeine boost I needed. Coffee had never been my thing, and the tea in Ferelden tasted largely like ass. Despite that, leaving my tent every morning to see Alistair waiting for me with a smile that could light up the night sky kept me energetic and perky. I guess love really is all you need. I had to admit I was jealous of the Grey Warden stamina though \u2013 Alistair didn't even look tired, though I assumed he'd been getting as little sleep as I. Maybe more though, if he was able to take care of the...oh, that's a mental image I don't need right now Sierra!\n\nWe hit one darkspawn patrol on our way to Denerim. Aedan and Alistair had been feeling a group of them slowly coming closer for hours, and realising we weren't going to be able to skirt around them, we decided to ambush them for once. Morrigan scouted around and found the darkspawn, then led us to a defensible position in the trees where we could wait for them. I was behind everyone, protected; Morrigan had changed into a spider in the trees somewhere, and Zev was hiding somewhere to hit them from behind. Alistair pulled me directly behind him; had it been practical, I think he'd have had me holding onto the back of his armour the entire time. It was sweet, but still frustrating.\n\nFinally the group of darkspawn emerged in front of us, somewhat shocked to see our entire group arrayed out waiting for them. They outnumbered us, but that wasn't uncommon, and didn't really concern me. What did concern me was a large group of archers in the back, and the aura of magic I could feel prickling my spine, even though I couldn't see the source. \n\n\"Emissary. Maybe more than one.\" I rubbed my arms, trying to settle the goose bumps that had formed. It was definitely a stronger aura than just Wynne by herself. \n\nLeliana immediately began picking off archers, while Wynne protected the group from their arrows. The front line smashed into the melee-weapon-wielding darkspawn, both genlocks and hurlocks, and Morrigan and Zevran came out of hiding to bite into their backs. Useless, frustrated, I scanned the field hoping to at least pinpoint the caster before he could throw any major offensive spells. Frustrated, I slipped out from between Alistair and Wynne, ignoring Alistair's hissed warning. I snuck into the bushes, watching closely for any signs that the darkspawn noticed my movements; it seemed they were still ignoring me. I crept forwards, past those engaging Alistair, past Zevran, and over towards the archers, where I could feel the aura emanating. \n\nLeliana had done a good job; only two archers remained, and one of them dropped with a well-placed arrow as I snuck around it. I pulled my daggers and slashed at the other archer, jumping out of the way and avoiding the spray of blood as it fell. I finally found the Emissary, huddled behind the body of one of the archers. I wasn't sure why it hadn't attacked, but it was casting something, chanting in a strange tongue, and I assumed it was either protecting itself or buffing its companions. It didn't seem to see me approach, and without even thinking, I reached out with my mind and seized its mana the way I had thought I had done previously with the Emissaries at Ostagar and with Uldred and friends. But instead of releasing it in an explosion accidentally, I continued to hold the mana as I pressed my dagger against the darkspawn's throat.\n\nThe creature hissed at me as its eyes widened in shock.\n\n\"Hello pretty.\" \n\nI forced it to stand, and, still holding its mana, I marched it back towards my companions at knife point. It tried to talk to me in its strange hissing voice, but I ignored it. I wanted to see if Alistair could do what I was doing, and without risking harm to one of our mage companions, this was the best way that suddenly presented itself.\n\nMy friends were mopping up the rest of the darkspawn as I approached with my hostage. Suddenly the creature, still without mana, was surrounded by half a dozen blades in addition to my own.\n\n\"Sierra!\" Alistair shouted, and I winced slightly. \"Andraste's flaming sword, what do you think you are doing?\"\n\n\"Look, yell at me later. I need to show you this. You asked me to train you if I figured out how to do what I do. Well, this is the only way I could come up with. Can you feel this?\" Somehow, I released a tiny trickle of mana back into the Emissary. Alistair's brow wrinkled as he concentrated on what I was doing.\n\n\"I can...how are you doing that?\" \n\nI pulled the tiny amount of mana back into myself as he paid attention, and then did it again. Surrounded as it was, the creature didn't even try to take advantage of the trickle of mana, but just sort of slumped its shoulders and stood still.\n\n\"Can you feel it? Can you try?\" I released a tiny amount of mana, and watched as Alistair was able to get a handle on it. Slowly I transferred more and more of the power, until we each held half. \n\nAlistair's eyes were wide, his mouth open in wonder. \"I don't think the Chantry knows about this ability.\" \n\nAedan snorted, and traded a grin with me. \"I vote we don't tell them.\"\n\n\"Okay, so...now what? What do you do with it, once you have it like this?\" Alistair still looked dumbfounded.\n\nI grimaced. \"That part I'm not totally clear on, to be honest. It's always been borne of necessity, so I never had a chance to see what I was doing. But after practicing with you, I thought I could do this on purpose to show you, and I was right.\"\n\n\"So what are we going to do with all this?\" Alistair gestured, helplessly, and I shrugged. \n\n\"No idea.\"\n\nAedan spoke. \"Kill it and then we don't have to worry about it?\"\n\nBefore anyone could even reply, Sten had swung his massive great sword over his head and decapitated the Emissary. He'd aimed well; not a drop of blood landed on any of us. I turned to wipe my blades off, when I was suddenly grabbed by two different sets of hands, one on each arm. I looked up to see Aedan on one side, Alistair on the other, both with very, very angry expressions.\n\nI tried to forestall the scolding. \"Hey! I'm probably safer not standing with you guys, okay? They can't see me, so my chances of being hit by a stray arrow go down. And we needed that Emissary dead.\"\n\nAedan ran one hand through his hair roughly, then started rubbing his temples like he had a headache. \n\n\"I can't even talk about this right now. But this conversation isn't over.\" \n\nHe turned and walked away, and Zevran fell into step beside him as they disappeared through the trees. Prince, oblivious to his master's distress, licked my hand with a bloody muzzle and then trotted away after them. Disgusted, I looked around for something to wipe the mess off my hand \u2013 and my daggers \u2013 when I met Alistair's eyes again.\n\nHis expression was haunted, and before I could do anything else, he grabbed me and crushed me to his chest. I relaxed into the hug and sighed, hugging him back despite the gore it smeared across my armour. His voice was hoarse when he finally spoke.\n\n\"For my sake \u2013 please, please don't do that again?\"\n\nI hugged him tighter. \"I can't promise that. But I can promise to try to stay safe. I wasn't in any danger. Less than you, anyway.\"\n\n\"You don't know that.\" He sighed. \"You're going to be the death of me, you know.\"\n\nI grinned up at him impishly. \"Then I guess we're even.\" He rolled his eyes ostentatiously. \"Now would you help me clean up? I wasn't even messy until you and Prince came along...\"\n\nWe found a couple of rags and quickly cleaned our weapons and armour. I poured some water from the water skin over my hands, and scrubbed at them as much as possible. Heading back to the road, Bodahn's wagon, and the rest of the crew, everyone agreed we could use a bath. Bodahn recommended a hot spring just off the road a few hours further along, and we all hurried somewhat, eager to reach it before nightfall. Aedan avoided me the entire walk, and I knew I was in trouble later. At one point when Aedan was distracted talking with Sten, Zevran approached me.\n\n\"Ah, cara mia, you do have a way of...how should I say...\"\n\n\"Pissing Aedan off?\"\n\n\"Colourful, and perhaps not quite the way I would describe it, but yes, in essence.\"\n\n\"So what do you think? Did I do something so horrendously stupid?\"\n\n\"Ah, I would not like to be in the middle of this particular conflict. But I think, perhaps, you both should wait to discuss it until cooler heads prevail, no?\"\n\nI sighed and nodded. Alistair squeezed my hand, and I was glad at least he had decided it wasn't worth the scolding. I've never had anyone scold me out of love before. Maybe it won't be so bad. I wasn't even able to convince myself of that.\n\nWe made the hot spring, and settled in to make camp. The girls decided to let the men go first, and then Leliana, Morrigan, Wynne, and I headed down and soaked in the hot spring until I finally felt almost human again. We passed around the soap and shampoo, and then just let the warm water ease the muscle aches that had become constant companions.\n\n\"This sleeping on the ground thing sucks.\"\n\n\"Well, Sierra, you could always try sleeping on the handsome templar...I'm sure he wouldn't mind being a comfortable mattress for you to rest upon.\"\n\nI splashed Leliana indignantly, and Wynne laughed while Morrigan just sniffed, but I saw a grin under her aloof fa\u00e7ade. That led to a long, rather embarrassing discussion with Wynne and Leliana about how Alistair and I had not progressed to that point yet, and yes I knew he was inexperienced, and yes I knew where babies come from.\n\n\"Wynne! You're supposed to have that discussion with Alistair, not me!\"\n\n\"Oh, now that does sound like fun.\" I arched an eyebrow at the evil grin on her face. \"Oh hush, let an old woman have her pleasures while she's still alive.\"\n\nThat earned her an eye roll and a splash from me, and we all laughed. We soaked a bit longer, before hearing someone crashing noisily through the bushes.\n\n\"It's just me,\" Zevran shouted, and all of us sank a little deeper into the water (though it occurred to me he could have crept up on us without anyone the wiser, had he really been trying to peek). \"I have my eyes covered.\" I looked up to see not very covered eyes, and a smug grin. \"My beautiful damsels, I have been sent to tell you that supper is ready. Or at least, so Alistair informs me.\"\n\nA chorus of groans went up at the news that Alistair had been allowed to cook, but after shooing Zevran away we all climbed reluctantly out of the water and dressed. I threw on my simple peasant dress \u2013 my armour was damp from me scrubbing it \u2013 and headed back up to camp. Grabbing a bowl of the grey mush Alistair claimed was food, I tucked myself onto a small upturned log beside Alistair and tried to convince myself to eat the grey lumps floating in the grey mush.\n\n\"Someday, love, I am going to teach you how to cook. Better than this, anyway.\" There was a general chorus of agreement as everyone reluctantly dug into the food. Aedan still avoided me, but I found him in our tent, waiting for me, after Alistair walked me there and kissed me a very sweet, very passionate goodnight that made my toes curl.\n\nI sighed and curled up on my bedroll. \"Aedan, I know you're angry with me. But listen. I'm not going to sit by and do nothing when I can help us all survive. And I really did need to get Alistair's opinion on a templar thing. And I was probably safer on my own than standing with you guys anyway. I really...\"\n\nHe interrupted me and dragged me into a tight hug. \"Just shut up, Sierra! I wasn't angry. I was scared.\"\n\n\"Aedan, I...\"\n\n\"No. I'm your brother. I'm allowed to be scared. I realise I can't stop you, that I probably shouldn't even if I could, but you have to realise that I'm going to go crazy every time it happens.\"\n\nI wrapped my arms around him, hugging him to me. \"I love you too, Aedan.\"\n\nWe curled up on our bedrolls and went to sleep holding hands. I woke in the night when my arm was suddenly pulled, somewhat violently. I opened my eyes to see Aedan's face, by moonlight, sweat rolling off his brow and his mouth open in what looked like horror. He was twitching, kicking and rolling around, but eerily silent. I crawled out of my bedroll and over to him, shaking his shoulder.\n\n\"Aedan. Wake up. It's just a dream! Aedan!\" I finally shook him hard enough that his eyes flew open, unseeing, and he shouted wordlessly. As his wits returned, I saw him focus on my face, hyperventilating, and then the tears started. I sat beside him, wrapping my arms around him, and he curled into me, ending up with his head and shoulders in my lap, his arms locked around my waist while he sobbed. I stroked his hair, murmuring soothing noises, and just let him shudder. I noticed a small earring in one ear lobe, and smiled as I knew what that meant. About time. Go Zev! When he calmed a little, I spoke.\n\n\"Darkspawn dreams?\"\n\nHe shook his head, a fresh round of shudders rolling through him. \"No. Those are horrible, but not like this. This...Mother and Father, and then...you were...oh, Maker, and I couldn't save you...\"\n\nI hushed him, holding him tighter to me, not particularly wanting to hear the details of how I'd been mutilated or killed in his dreams. With his history, I knew his imagination had more than enough fodder to come up with something truly horrific. I started humming, Billy Joel again since it was the only lullaby I knew, and after a while his shaking stopped and I heard the soft, regular breathing that I knew meant he was asleep. I wanted to be content to stay like that and let him sleep, but I was exhausted too, and the position wasn't exactly comfortable for me. I suffered through it until my bladder spasmed, and I knew I needed to move.\n\n\"Zevran? A little help?\" I hissed, hoping he'd heard Aedan's shout and was lurking within earshot. I was right, and it was only moments before I heard rustling at the tent flap.\n\n\"What do you need? Oh.\" Without further comment, he crawled in to the tent, gently disentangled Aedan from my lap, and eased him back onto his bedroll. His expression was shockingly tender, and I smiled at the surprisingly strong elf.\n\n\"Will you stay with him? I need to...uh...do something.\" He grinned at me and nodded. \"Actually, I think he could benefit from you staying all night, if you don't mind. I think he'd sleep better, you know, cuddled with someone. Would you?\"\n\nHe nodded again and squirmed into the tiny space behind Aedan, wrapping his arms around the bigger man. I pushed my bedroll up against him to give him a bit more space, covered them both with a blanket, and crawled out of the tent as quietly as I could. Sten was watching me with an unreadable look, as I staggered off into the woods to take care of business. When I returned, I sat down beside the big man at the fire.\n\n\"And where will you sleep, Kadan?\" I was ridiculously pleased at the honorific. I wouldn't have thought that a feeble girl would ever earn a Qunari warrior's respect.\n\n\"I guess I could go in Zevran's tent...he can't complain, since he's in mine...\" \n\nI reflected that it was past time that Aedan and Zevran shared a tent every night. I was going to need a better long-term solution to my sleep disorder. I had hoped that resolving things with Alistair \u2013 the good way, for once \u2013 might help, but so far no such luck. I was still afraid to sleep. As I pondered my options, Alistair walked up to the fire, startling me. He nodded at Sten, and I realised he must have been doing his two-hourly check for darkspawn. He sat down beside me and took my hand.\n\n\"I...maybe you wouldn't be comfortable with this, I don't know, but...you could share with me, for now, if you want. It's probably inappropriate, and your brother might murder me, but I swear I'll be a complete gentleman.\" I was almost disappointed. \"I know you don't like to sleep alone. I can make room...\"\n\nHe trailed off, his face beet red but completely earnest. I had to admit, there was strong appeal to sharing a tent with a gorgeous man \u2013 my gorgeous man \u2013 even if there wouldn't be any hanky panky. I studied his eyes, looking for any sign of reluctance or worry, and found none. And I certainly wasn't afraid of being alone with him \u2013 in fact, it might take a miracle for me to keep my hands to myself. I wondered if he'd mind, but then reminded myself that I was going to wait for him to come to me. I needed to be damn sure anything we did was his idea, not mine.\n\nAfter just a brief hesitation, I smiled and nodded.\n\n\"You sure that's okay?\"\n\n\"Yeah, I'm sure. What, you expect me to give up my chance to wake up beside you? No way.\"\n\n\"I'll just grab myself a blanket from Zev's tent then.\" \n\nHe smiled, looking genuinely pleased. He crawled into his tent as I grabbed two blankets from Zev's and then followed him in. He was lying on his back, on the ground, leaving the bedroll for me. I shook my head.\n\n\"If we're going to do this, we're both going to be at least vaguely comfortable. You lay on the bedroll. Squish to the side as much as you can. I...can we...that is, could we cuddle? It will just make this easier.\"\n\nHe nodded, looking amused. I stuck out my tongue and he laughed, then tried to comply with my instructions. Apparently someone Alistair's size has trouble squishing, but I used the extra blanket to pad the dirt along his side, and then carefully lay down beside him. I encouraged him to put one arm around me, and I put my head on his shoulder. It felt...perfect. I was beyond being surprised that we fit together so well. I hummed happily and he kissed the top of my head. I thought being so close to him might be distracting, keep me from sleeping, but no sooner had we covered ourselves with blankets, I was asleep."
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "fantasy",
        "fanfiction",
        "dragon age",
        "modern girl in thedas",
        "romance"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-35-36"
}
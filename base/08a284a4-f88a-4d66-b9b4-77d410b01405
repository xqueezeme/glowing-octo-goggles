{
    "title": "The Arete - Princess-Consort Ch. 04",
    "pages": [
        "Chapter Four: \n\nThe Benedict\n\nThe next three days passed much as the ones before, but Jelvix came to see me personally on the night before the wedding.\n\n\"For Caeli's sake,\" she greeted me at my door with a necklace of blue lapis set in silver and a pair of matching bracelets set with smaller stones. The gifts were nowhere near as fine as the bright purple spinels she wore set in rich gold, but were still far more august than anything I'd ever thought to own. \"She shouldn't be given to a woman wearing only a steel house pendant.\"\n\nFor all Jelvix seemed to regard her other grown sisters with indifference and Heoldax with open animosity, she regularly demonstrated sisterly fondness for Caeli.\n\n\"Thank you, Your Highness,\" I accepted the jewelry gratefully.\n\n\"You are welcome for Caeli's sake,\" she repeated. \"Where is your valet?\"\n\n\"I have none.\"\n\n\"Of course you don't,\" she huffed, \"Where is the ranking member of your household?\"\n\n\"Corporal Kemptrux,\" I gestured to the young soldier, who stood.\n\n\"A common guardswoman,\" Jelvix waved her hand dismissively, \"You at least must have a squire. You,\" she pointed at Vostiv.\n\n\"Yes, Your Highness.\" Poor Vostiv stood too quickly and knocked over her chair. Then she stooped even more gawkily to stand it back up.\n\nJelvix rolled her eyes. \"You will gather Ser Taiglox's things after she leaves for her wedding. Leave all the furniture and such, and bring the rest to the last door on the third passageway from here. The bride's majordoma will be there to assist you,\" done with my squire, she turned to me again, \"Given your situation, your apartments will be furnished in advance and Caeli will keep most of own her things even after the two of you are wed. Otherwise, the wedding and marriage will be wholly traditional in palatial style. You are familiar?\"\n\nOnly married women (and the betrothed) are allowed to attend noble weddings, so I'd never been. But I'd learned more or less what would happen from gossiping wives sat next to me at banquets while at my aunt's house and also from married officers I'd camped with while warring.\n\n\"Yes. I stand at the foot of a long rug. The ranking present house member-\"\n\n\"The Queen,\" Jelvix supplied.\n\n\"The Queen will formally bestow Princess Caeli and her care on me and my house. Princess Caeli will walk down the aisle to me and I'll tell her she's mine and wrap my cloak around her.\"\n\n\"Yes. Good,\" Jelvix approved, and continued with no change to her frank and business-like tone, \"Yonjax has made clear to you that we will brutally torture you to death if you in any way misuse our little sister once she's given to you? I want for there to be no ambiguity on that score.\"\n\nKemptrux looked as though she was quite sure she must have misheard, but had the good sense not to interrupt. Vostiv's eyes widened and her mouth gaped open as she looked back and forth betwixt Jelvix and me, not knowing how to react. Thankfully, Jelvix continued to ignore them both.\n\nIt occurred to me that neither young warrior had been aware of the previous death threats against me as their ser and ma'am respectively, and so were probably justified in their confused distress. I'd the benefit of having had a great deal of recent experience with threats against my life, and so was less bothered.\n\n\"Yes, Your Highness,\" I confirmed, \"I was told I'd be drawn and quartered were my execution to be public. And, alternately, that the torture would likely involve burning at least or at end should my cause of death be made to appear an accident.\"\n\n\"Probably a scold's bridle, breast ripper, and combing on a rack finished by brazen bull, so more cooking than burning really, but yes,\" Jelvix expounded dispassionately, \"Still, obviously, no one expects or hopes any such actions to be necessary. You've acted with great courtesy thus far. We only wish to ensure that you remain so behind closed doors.\"\n\n\"I understand, Your Highness,\" I confirmed simply.\n\n\"Back to the wedding,\" Jelvix reverted to her primary reason for visiting, \"Once Caeli is wrapped in your cloak, the Queen will dismiss you. You then take her directly to your apartments. The way will be cleared, aside from some guardswomen of course.\"\n\nI nodded.\n\n\"On your arrival, your honeymoon period will commence. Do you understand what that entails?\"\n\n\"Er, well, yes?\" I confirmed awkwardly. I wondered if she intended to give me a sex talk if I said no?\n\n\"Yes, that too, obviously. Consummation of the union is necessary. But I meant you understand that you and Caeli are required to remain in your apartments for six weeks thereafter?\"\n\n\"What about Savaran?\"\n\n\"What about what?\"\n\n\"My warhorse.\"\n\nJelvix spat anger, \"You are marrying a princess, you fucking provincial. Your damned squire can look after your horse.\"\n\n\"Understood, Your Highness.\" I hadn't intended to suggest that I'd neglect Caeli.\n\n\"I'll bring Savaran out where you can see him in the yard,\" Vostiv offered helpfully.\n\n\"Bring up the fucking horse again,\" Jelvix snapped, \"Any one of you idiots, bring up a fucking horse again while I speak of marriage into the highest level of the House Royal.\"\n\nVostiv looked like she wanted to die on the spot. Instinctively, I wanted to defend the well-meaning child, but decided placating the perfervid princess to be the wiser course.\n\n\"Apologies, Your Highness,\" I answered formally, \"I am acutely aware and extremely appreciative of the honor being bestowed on me and on my house.\"\n\n\"Very well,\" she seemed moderately mollified, but still miffed, \"Be at the throne room by 8 bells.\"\n\nVostiv immediately attempted to apologize, once Jelvix left.\n\n\"Don't worry yourself,\" I tried to reassure the hapless child, \"I don't think any of us knew what to say.\"\n\nKemptrux nodded in sympathetic agreement.\n\n\"But I ought to have,\" Vostiv lamented, \"that's part of what I'm here for.\"\n\n\"Just look after Savaran for me, and the both of you keep up your training and riding as you can,\" I laid a parental hand on Vostiv's shoulder and nodded back to Kemptrux, \"I'm marrying your dazzling cousin tomorrow. My horse can do without me for a few weeks.\"\n\nVostiv smiled in quiet thanks that I wasn't angry at her self-diagnosed failures.\n\n\"All the same,\" I smiled back, \"I can have one last ride tonight to say farewell for a while. The two of you should be off to sleep though.\"\n\n\"Ser,\" Vostiv queried fretfully, \"Yonjax didn't really threaten you?\"\n\nI frowned. Heoldax, Jelvix, and Yonjax threatening me with dire consequences for harming my beloved and vulnerable Caeli didn't offend me. There should be dire consequences for harming my beloved and vulnerable Caeli.\n\n\"She did, Vostiv, but she was right to do it,\" I tried to explain, \"Sometimes individuals are given opportunity to hurt people whom we cherish. It's important to deter those individuals by ensuring that they understand such a hurt will be answered ineluctably, ferociously, and pitilessly. In that way, it is better to safeguard people in our care before hurt than it is to seek vengeance for them after hurt.\"\n\nVostiv wrinkled her brow in new thought. Kemptrux nodded her head in experienced agreement.\n\n\"But it's late in the day for philosophizing,\" I reasoned and ordered, \"To bed with the pair of you. I'll have that last ride.\"\n\nI greeted Sanguine and Stygian, but only took Savaran from his stall and saddled him. \n\nNaturally, I'm not balmy enough to think my stallion understood that we'd be separated, but it was the only real length of time we'd been apart since I'd started campaigning. For my own sake, I wanted to part on a happy note for me to think on until I saw him again. \n\nFor his part, he'd been cramped up in the stables as I was cramped in my rooms, so we both relished a good galloping in the fresh night air, even if he didn't know it'd be our last for awhile.\n\nAnd so we did for a time, my hair and my great gray warhorse's mane flowing in the wind we created with our speed, until called to again by Meirbax. \n\nKnowing for whom she called, I smiled that time as I wheeled Savaran about.\n\n\"Well met, Meirbax!\" I shouted.\n\n\"Over to your right, ser!\" she shouted back, knowing also for whom I sought.\n\n\"Caeli,\" I still spoke loudly enough that she could hear me, but my voice always takes a softly reverent tone when addressing my gentle princess. I couldn't imagine a scenario in which my voice wouldn't be softer in speaking to Caeli than the soldierly voice I used with all other adults in my life.\n\n\"Hi, Tai.\"\n\n\"Hi.\"\n\n\"We're to be married tomorrow,\" she moved the conversation forward.\n\n\"Yes,\" I agreed fervently, \"I look forward eagerly.\" To this day, it's the only ceremony I've eagerly awaited. (If I'd but known,...but I didn't know and I didn't know that I didn't know.)\n\n\"Me, too,\" she faltered, \"I very much want to marry you, Tai, I...\" she trailed off.\n\n\"I do love you, dear Caeli,\" I confessed honestly and guessed rightly at what she wanted to say but feared would not be reciprocated.\n\n\"I love you too, Tai,\" she spoke more confidently. Better, I felt the emotion in her words. They warmed me.\n\nBut the hour was late and I hated the idea of our lovely rendezvous' magic spell being broken by chaperones telling us to part.\n\n\"Good night then, my love. Until we wed.\"\n\n\"Until we wed,\" Caeli waved as she retired to her apartments.\n\nI couldn't stop smiling as I put up Savaran and went to sleep.\n\nCome morning, I skipped riding, had a full breakfast, and dressed in my best. That was the same tunic, leggings, slippers, and cloak I'd worn to the ball with the addition of the fine necklace and bracelets of blue lapis set in silver that Jelvix gave me. \n\nAt 7 bells, I left for the throne room and so stood outside for the better part of an hour as various nobles passed. Some smiled, some winked, some didn't acknowledge me at all. By their colors, a few were also members of House Laerdya.\n\nI didn't readily recognize any of my higher born cousins, save one and only then by association. Yonjax walked in with a very attractive woman on her arm that I assumed to be Poumi.\n\nMy extremely soon-to-be sister-in-law stopped to shake my hand and introduce her wife to me. Poumi greeted me warmly and told me that Caeli and I would have to come over for dinner. Both chatted with me a little and made me feel more at my ease before they too walked into the throne room.\n\n8 bells rang and still I stood, growing even more anxious at the thought that perhaps I'd missed a cue to enter. But then a few young people came through the door going out, including the same page I'd met when I'd first arrived at the palace.\n\n\"Plinit, well met,\" I greeted her as she stopped to speak with me.\n\n\"Well met, my Lieutenant,\" she smiled back, apparently less frightened since I wore an outfit more familiar to her, \"You are to go inside and stand on the mat woven of cendr\u00e9e and azure.\"\n\n\"Thank you, Plinit.\"\n\n\"You are welcome, my Lieutenant,\" she bowed gracefully, \"And congratulations.\" With a few more flourishes, she scampered off to catch up with all the other squires and pages and such.\n\nI stepped into the throne room and for a few moments the eyes of hundreds of highly born nobles were upon me. Maintaining my military bearing, I walked directly to my place and stood looking forward at the Queen, who stood two hundred or so feet ahead of me and a few feet in front of her throne.\n\n\"Ser Taiglox of House Laerdya,\" she addressed me and all eyes moved to her, \"You are here today to receive the hand of my daughter, Princess Caeli. I am entrusting her to you, with full confidence in your honorable nature, good sense, and strong arm to make provision for her and my posterity borne by her in your marriage.\"\n\nThe Queen raised her left hand and Caeli entered into the throne room through the throne door, wearing only a thin white simple shift dress, wearing her beautiful dark hair down and completely loose, and wearing no cosmetics on her beautiful face. She walked to stand a few feet in front of her mother and smiled at me, radiant.\n\nReturning her smile was an understatement. My body remained rigidly at attention as a good soldier's should, but my face absolutely beamed.\n\nTo that point, everything was as I expected. The simple colorless dress with no flourishes, paints, or accessories symbolized that the bride was being relinquished wholly by her own house and in turn was relinquishing the wealth and protection of the house she was born to. \n\nBut I didn't know what \"the palatial style\" meant. I should have asked Jelvix what that meant and I didn't. That was my fault. I should have asked and I didn't.\n\n\"As she was given to me, so I give her to you,\" the Queen finished and stepped forward to Caeli, untying Caeli's dress so it fell to the floor before stepping back, allowing the assembled host of nobles a full view of the fully disrobed princess.\n\nCaeli clearly hadn't expected that either. Her beautiful face horror stricken, she collapsed into a ball, holding her knees tightly to her chest and burying her face in her flesh.\n\nTime stopped and raced at once. \n\nThe room filled with chatter. A few voices rose over the general din to urge Caeli to stand and walk as she was supposed to do, but most were indecipherable. \n\nIn the next seconds, there were also voices urging me to stop and go back.\n\nI sprinted to her, running with the same urgency and certainty as to a siege ladder under a rain of arrows. \n\nMy cloak and arms were around her before I realized I'd taken it off.\n\n\"Tai,\" Caeli whispered in shock. \"Tai. Tai.\"\n\n\"I'm here. I'm here, Caeli. I've got you.\" I reassured her, my self and my cloak covering her nakedness and offering her protection.\n\nThen I realized what I'd done. I'd flagrantly broken clear orders in a sacred ceremony presided over by the Queen herself. In front of the creme of the nobility. And I was now huddled over the Queen's naked daughter at her feet before the throne. \n\nKnowing I'd shamed myself, my house, and my commission, I left my cloak covering my terrified bride, then stood and faced the Queen in silence as everyone else clamored. There was nothing for me to say.\n\n\"Ser Taiglox, you must re-don your cloak and return to your place. The-\" An authoritative voice - the Master of Ceremonies I learned later - spoke out clearly over the increasingly more violently arguing voices.\n\nThe Queen raised her hand for quiet. Dead silence fell in an utterly motionless throne room.\n\nI tried to steel myself, expecting I might lose everything, but still not being able to regret rushing to Caeli's aid.\n\n\"My daughter is now hers to run to.\" In her grace, the Queen excused my trespass to the room at large and then ordered me, \"Ser Taiglox, in the sight of the crown you are married and your union has my blessing. Take your bride to your apartments and commence your honeymoon.\"\n\nI bowed in open gratitude to the Queen, made sure my cloak was wrapped well around my bride, and carried her down the aisle. Caeli, still terribly embarrassed, buried her face in my shoulder.\n\nThankfully, the way to our new apartments was clear as Jelvix had promised.\n\n\"I'm so sorry,\" Caeli whispered to the inside of my shoulder, \"I didn't know.\"\n\n\"It's okay. I really think it's okay,\" I tried to calm her, \"I didn't know either. But I think it'll be okay. Let's just get you inside and we'll get you dressed. Alright?\"\n\nShe nodded into my shoulder. Instinctively, I kissed the crown of her sweet head.\n\nArmed guardswomen stood outside our door, but pretended not to see us as one opened the door so I needn't set Caeli down. \n\n(Her name was Drakix and she was a poor rider and only a middling shot with a bow, but - had she been the finest soldier in the Queen's army - I couldn't have appreciated her more than I did for that small act of consideration.) \n\n\"This way, milady,\" a matronly woman in my colors directed me, leading me through the unknown floor plan of our new apartments to a large bedroom as three handmaidens followed us.\n\n\"Thank you, uh, er?\"\n\n\"Hevliun, milady,\" she introduced herself, \"I'm your majordomo.\"\n\n\"Well met,\" I set Caeli on the bed and stepped toward the closet.\n\n\"Milady, we'll do that,\" one of the handmaidens spoke up. \n\n\"Thank you, uh?\"\n\n\"Praden, Jekron, and Awhonam, milady,\" Praden answered for the three of them, who all curtsied before walking into the closet.\n\n\"You only have liveried servants, too?\" I asked my kindhearted bride.\n\nCaeli nodded.\n\n\"I knew I loved you,\" I kissed her lips, only a brushing peck.\n\nShe smiled again, only for a moment, but she smiled again.\n\nCourteously, I turned away. Technically, yes I'd seen her naked, but I'd only registered her traumatized face in that awful moment, not actually perceiving the rest of her beautiful form for the urgency I felt. And I could afford to let her reveal more of herself to me in her own time.\n\n\"You can turn now, milady,\" Hevliun reported.\n\nCaeli wore a lovely azure dress belted in cendr\u00e9e platinum set with moonstones. Breathtaking.\n\n\"Tell the truth,\" I gently teased my new wife, \"You asked to marry into my house because of how stunning you look in blue and grey?\"\n\nShe blushed at the compliment and everyone else discreetly left the room. \"I didn't. I didn't have any say. Really.\"\n\n\"Neither did I, but I couldn't be more pleased. And I want to please you, too.\" I opened the bedroom door and held out my hand to her, \"Maybe we can start with breakfast? Have you eaten?\"\n\n\"No,\" she took my hand with a smile and let me lead her to the dining room. Slightly awkwardly, I didn't yet know the location of the dining room, but I followed the sounds of my boisterous corporal and excited squire talking and laughing.\n\nKemptrux and Vostiv already sat at the long wooden table, finishing up their breakfast.\n\n\"Ma'am, you should have married sooner. This grub is amazing,\" Kemptrux spoke before she saw Caeli, then stood suddenly in embarrassed politeness, \"Your Highness.\"\n\n\"Please, sit,\" Caeli answered, \"We all live here. You don't have to stand for me.\"\n\n\"Thank you, Your Highness,\" Kemptrux resat herself.\n\n\"Hi Caeli,\" Vostiv greeted her close cousin, still sitting herself, \"it is nice to eat decent food again.\"\n\nOn the table were fresh eggs, milk, and fruits. Ham cooked that day instead of salted. Light honeyed cakes instead of hard black bread. Forks and spoons even, and cups made of metal instead of wood. \n\n\"Hey Vos,\" Caeli smiled small at seeing another familiar face, \"What are you up to today?\"\n\nVostiv did stand then, \"I have to be off to page training. I'll be back in an hour or so, though,\" a pensive look crossed her face, \"Are you...good, Caeli?\"\n\n\"Yes,\" she semi-lied, \"It's just been an overly exciting day.\"\n\n\"Do you want to talk about it?\"\n\n\"Maybe later.\"\n\n\"Okay,\" Vostiv nodded comfortingly and left.\n\nKemptrux glanced between Caeli and me and stood again just as suddenly, \"I have to go, too. Uh. Riding.\" My corporal left abruptly, displaying a lack of social grace that even I pitied.\n\n\"It seems I've cleared the room,\" Caeli noted sadly.\n\n\"Nonsense,\" I disagreed loyally, \"We're just being given some space as newlyweds.\"\n\n\"You're kind, Tai, but you're a terrible liar.\"\n\nI smiled wryly, \"So I've been told. But you have had an overly exciting morning, my love. A quiet breakfast and a day spent inside might be just the thing for us?\"\n\nWe ate pleasantly, but both of us picked at our food long after we were full. Truthfully, I wasn't sure what we should do next. We couldn't leave. After the morning she'd had, I didn't think she'd be ready to use our honeymoon as couples typically did. And we struggled to make small talk.\n\nThen it hit me, \"You wanted to learn to read?\" My treatises on war would be inappropriate, but she'd expressed interest in botany and astronomy, subjects which were covered to greater or lesser degrees in a few texts I had. And she might like one of the sections on armor smithing or horse breeding. ",
        "\"Yes!\" Open happiness finally graced her countenance and our day was set, \"Um, excuse me first for a few minutes?\"\n\n\"Of course.\"\n\nI took the opportunity to find Hevliun and inquire after Imogen and Miriam.\n\n\"Milady, you're kind to ask, but you needn't worry. I take good care of my girls. Imogen shows promise in sewing, so she'll train as a seamstress assistant. Miriam wants to learn to cook, so I'm setting her up in the kitchen for now. They'll both need to work hard, but they seem smart and dedicated. I'll look after them.\"\n\nPleased and contented, I was about to return to my bride when Hevliun did bring up a concern.\n\n\"Milady, I must ask though for some pecuniary resources for the household budget?\"\n\n\"Oh. Of course. I don't have much gold with me, but I've two years' wages saved with the Bank of Qwine?\"\n\n\"Meaning no offense, milady, but that would likely be insufficient for very long with costs here in the palace for a household of this size. Her Highness is also accustomed to certain luxuries that aren't common to career officers,\" my majordomo politely informed me of the pointlessness of my wages. \"Your marital annuity is now available, though. I can go and acquire sufficient funds, if you'll sign me access?\"\n\nShe held up a note and quill. I signed, grateful that my majordomo would act in good faith in my wife's interest in ways I didn't yet know how. (The next day, there was more gold bagged in my closet than I'd ever seen outside a paymaster's wagon.)\n\nMatters settled as far as I knew, I walked back to our bedroom and knocked on the door.\n\n\"I'm in here already,\" I heard Caeli's voice from another room.\n\n\"Hey,\" she greeted me, seated in a rich, umber, leather-upholstered chair with a matching chair next to it. \n\nShe also already had a book opened in her lap, but that was not the one I was awed by. \n\nThe largest collection of books I'd ever seen lined the wooden shelves of the spacious room. Spine after spine in rows upon rows, there must have been hundreds. Thousands maybe.\n\n\"Hey,\" I gazed about in wide wonder, \"Where did...? How did...? All the books?\"\n\n\"A wedding present from my mother,\" Caeli was smiling again, \"I told her that you were going to let me learn to read.\"\n\n\"I'll teach you myself, if you'll let me try,\" I took it a step further, \"and it looks like we'll have no lack of options to start with. What did you choose?\"\n\n\"I picked this one because it kind of looks like you and Savaran,\" she held up the glided book, displaying an armored knight astride a pale horse painted on the cover.\n\n\"The Story of Vertax and Gauqi. It looks like a romance. Great choice.\"\n\nWe delved into the book, enjoying the story for itself and getting Caeli into the basics of reading. In a few hours, she could recognize many common words. We broke for lunch, then I started teaching her the alphabet in the afternoon and evening. My wife is smart and she was motivated, so she learned fast.\n\nAfter dinner, we returned to reading the romance. 10 bells rang and she rubbed her tired eyes, so I convinced her to call it a night and walked her to our bedroom before kissing her goodnight outside our door.\n\n\"Milady, where are you going?\" Hevliun asked me, startling me a touch. She moves so quietly, always.\n\n\"To bed?\" I thought maybe she thought I was trying to leave the apartments.\n\n\"Where?\"\n\n\"A spare room,\" There were several dozen sleeping rooms of various sizes and configurations in our new apartments. And my household was still under forty people. Maybe fifty? Either way, there should have been plenty of empty space. \"Any will do fine, I'm sure.\"\n\n\"That is very irregular, milady. You should share your wife's room.\"\n\n\"She's had a stressful day.\"\n\n\"Your place, milady, is with your wife. I really must insist.\"\n\nI looked at her quizzically.\n\nShe sighed and clarified, \"I've been instructed to insist, milady.\"\n\n\"Oh. Ah, okay. But Caeli seemed fine with it.\"\n\n\"Not by the princess, milady.\"\n\n\"By whom, then?\"\n\nHevliun shook her head. Slight frustration crossed her face. I think she let it. \"By the woman who made you a princess-consort. So I must insist that you...consort.\"\n\nFrustrated, but always dutiful, I consented with a nod.\n\nMy concern in the moment was breaching Caeli's much needed serenity, but irritation flared in me also that - even in my home - I couldn't make what should be personal choices.\n\nI knocked on the bedroom door.\n\n\"Tai?\"\n\n\"Yes, dear Caeli. Can I come in?\"\n\n\"Yes.\"\n\nI opened the door and Praden and Jekron dashed out. \n\n\"I'll be right outside if you need anything, milady,\" Praden assured Caeli as she rushed by me.\n\nCaeli herself stood in a silvery-grey nightdress, looking at me with a mixture of apprehension and adoration. She wasn't ready for a night together-together yet, and I remained unwilling to take her before she was ready. \n\nPushing myself on her would be unquestionably wrong. At least it would be wrong so long as she gazed at me in the same manner as I'd gaze at a wild shewolf, admiring the majestic beast but fearing attack if I neared. \n\n\"I've been informed that I'm to sleep in here with you,\" I started, but held up my hand, \"so you get the bed and I'll get a couple blankets and a pillow from the closet.\"\n\n\"You don't have to sleep on the floor,\" she tilted her head in soft compassion.\n\n\"I've slept far worse on the march than on the plush carpets in a palace, dear Caeli,\" I assured the sweet girl, \"And I don't fully trust myself to not take some small advantage if we share a bed. Especially when you look so alluring in that nightdress.\"\n\nShe blushed, but she smiled too. \"I admit that I couldn't wait to wear all my new blue and grey clothes. I've my outfits picked out for the next whole week at least.\"\n\nI smiled back, \"I look forward to seeing them all. If you're that eager, you can model them each in turn for me in the morning?\"\n\n\"No. I want to keep reading. And it'll be a fun little surprise everyday, what I choose to wear.\"\n\n\"It will be.\"\n\nShe pulled back the covers and climbed into bed. I took a sleeveless nightshirt from the standing wardrobe. (All my clothing had been placed in it.) \n\nI changed clothes facing away from Caeli, but very aware of her eyes on my shoulders, back, ass, hamstrings, and calves.\n\n\"Do you prefer a few candles lit, my love?\"\n\n\"Yes, please.\"\n\nI put out about half of the open flaming candles, leaving enough light for her to comfortably see the room. Then I laid the pillow and blankets on the floor and curled up for the night at her bedside.\n\nOddly, I felt like I was being observed, even after the easy quiet measured breathing of a restful sleep sounded my overwrought bride's surrender to slumber. A good soldier, I attributed the groundless feeling to the same overwroughtedness on my own part and forced myself to sleep as well.\n\nAlways an early riser, I woke to her easy quiet measured breathing too. Not wanting to interrupt her rest and not sure when I should leave the room, I did some calisthenics. (With no hard riding or weapons training, I had to put in some work to ensure I stayed in fighting form at least physically.) Push ups, crunches, vees, leg raises, squats, and calf raises. Nothing that would make noise to wake her.\n\nNonetheless, during lunges, I felt her watching me from the bed. I let her watch, moving into a bridge, then a frog stand, each flag, and finally a plank.\n\n\"You are very strong, aren't you?\"\n\nI looked over at my lovely wife. \"Fairly strong, yes. Would you like to exercise with me?\"\n\n\"I thought maybe you'd join me instead? I've fantasized so often about falling asleep in your arms, and I'm still so sleepy.\"\n\nIt's exceedingly difficult to say no to my sweet Caeli. I only rarely make the effort.\n\nI rose and climbed into bed with her, taking her tenderly in my arms and holding her from behind. Her shoulders fit against my chest inside my shoulders, her butt against my lower abs, and her calves against my knees. She smelt of zanabaqs still and I took a long deep whiff of her as we cuddled in snugly together.\n\n\"Perfect,\" she sighed contentedly.\n\nYes, her lithe body was a beacon of temptation, but it also felt good to just lay in bed, being with her. I sighed in contentment too.\n\nWe drifted in a warm semi-slumber, happy together.\n\nVostiv knocked on our door, \"Yon's here,\" she warned as Yonjax sauntered in.\n\nI rolled away from Caeli, but she followed me and tucked her head into my shoulder.\n\n\"How are you?\" Yonjax addressed her close sister, mostly ignoring me.\n\n\"Really good,\" Caeli announced, \"I can read a little.\"\n\n\"Are you going to learn more?\" Yonjax asked indulgently.\n\nCaeli nuzzled in deeper, \"Yes, but later.\"\n\n\"Alright,\" Yonjax laughed, \"Come with me, Vos. We're going riding.\"\n\nSo as suddenly as she arrived, Yonjax left. We stayed snuggled up.\n\nKnowing we were now awake, an older woman ducked her head in. \"I'm Bakian, milady. Your cook. Would you like some breakfast brought in to you?\"\n\n\"I'm sure we can get up and eat at the table, Bakian,\" I demurred, uncomfortable enough with being served in general, but utterly displeased with the concept of being waited upon while lounging.\n\n\"Please, Tai?\" Caeli asked.\n\n\"Yes,\" I agreed to her want without any cogitation.\n\n\"Your breakfast will be in momentarily, milady,\" Caeli's cook smiled professionally and amusedly at once, and ducked back out.\n\n\"Thank you,\" Caeli whispered, \"Would you tell me 'yes' no matter what I asked?\"\n\n\"Seems likely,\" I admitted, stroking her long dark hair, \"to nearly anything.\"\n\n\"Stay here? Don't go off to war?\"\n\nI kissed her forehead, \"That would be one of the few 'nos,' my dear.\"\n\n\"Why?\"\n\n\"It would shame us both.\"\n\n\"Why?\"\n\n\"Because it would mean I didn't love you enough to value your security over my safety.\"\n\n\"Can't we both be here, safe and happy?\"\n\nA knock on the door mercifully interrupted what was sure to be a circular conversation, although not even I was foolish enough to believe the topic wouldn't come up again.\n\n\"Milady?\" I recognized Miriam's voice.\n\n\"Come in, Miriam.\"\n\nShe set a wooden tray on my knees. \n\n\"How are you settling in, Miriam?\"\n\n\"I love it here,\" she confessed cheerfully, \"I made the honeycakes.\"\n\nI tasted one reflexively, ready to tell the kind child how good it was even if it was ashes in my mouth. I was spared having to lie to spare her though. \"These are wonderful, Miriam,\" I articulated through my mouthful of light and sweet deliciousness.\n\nShe smiled in pure pride and curtsied as she left.\n\n\"I love you,\" Caeli confessed in turn as she tried a honeycake, \"and these are amazingly good.\"\n\n\"I love you, too,\" I answered just as reflexively and kept petting her head as we ate, making her fairly purr.\n\nStill it was a leisurely breakfast, taking the better part of an hour before I set the tray aside to play with her pretty hair with both hands. \n\nShe kissed the inside of my hand.\n\nI caressed the side of her face.\n\nShe kissed my neck.\n\nI kissed her properly, my lips sparking as they touched hers.\n\nHer mouth opened.\n\nI rolled onto her, letting my weight settle gently onto her smaller frame.\n\nShe rubbed my shoulders with rising urgency.\n\nMy kiss grew in intensity too.\n\n\"Tai,\" she moaned, \"Tai, I don't know.\"\n\n\"It's okay,\" I rose, only onto my elbows, and looked into her lovely dark eyes, \"We have six weeks together here. Here in this warm safe place. We can go slow,\" I kissed her languorously and deeply. \"Or we can go fast,\" I kissed her hard and bit her lower lip so that she whimpered just a little, but her hips jerked.\n\n\"Okay,\" she breathed.\n\nI rolled off her svelte body and pulled her on top of me, touching her long loose dark hair again as she straddled me. \"Want to read some more?\"\n\n\"Yes,\" she smiled down at me.\n\nI smiled back.\n\nBut she stopped me with her hands on mine when I tried to rise. \"Someone else can go get the book?\"\n\nResolutely, I lifted her from on top of me. \"I will be right back to cuddle up while we read,\" I promised.\n\nAs so I was. We read through the afternoon as I held her, stopping to makeout a few times. Then we snuggled in together to sleep. When she woke, she joined me for a less arduous version of my morning calisthenics. More physically romantic too, as I stretched and bent her graceful body with interested hands.\n\nA week passed with us that way; eating, sleeping, reading, exercising, and playing together. We even left our bedroom to read in the library or eat with Kemptrux and Vostiv occasionally. I think we went to other rooms of the apartments each day partially so that she could justify dressing in her prized new clothes.\n\nOddly, I am always strongly encouraged by my insistent little bride to leave the room whenever she dressed up fancily with her handmaidens' help, meaning whenever she'd don what were apparently higher quality dresses and whenever she'd apply cosmetics and detailed hair accessories. I'm allowed to see her before and after - naked or dressed - but not during the transitive process.\n\nThis peculiarity mystifies me, but Caeli is resolute in its enforcement. I worried at first that it might be an unusual insecurity rather than a common custom, but didn't know whom to ask. I've since come to accept that my darling wife simply needs privacy for some things, even from me.\n\nAnd the week rolled by happily by and large, with us each naturally discovering more of each others' quirks and caprices.\n\nThen one morning, after a set of diving push ups, Caeli put her hands on my bare (and slightly sweaty) shoulders. She requested shyly, \"Can you do that without your tunic? Will you?\"\n\nI smiled, a little vain but mostly pleased that I pleased her, and I stood. The welcome hunger in her eyes told me that she wanted more than my simply becoming naked in front of her, so I waited for a beat to give her time to ask more.\n\n\"Can I do it?\" she amended.\n\nI nodded and lifted my arms above my head. She took my tunic by the hem and slowly, tentatively, raised the fabric up my hard body as high as she could. I helped her with the last part and tossed the garment aside to stand before her naked.\n\nHer hands and eyes traveled over my shoulders, my chest, and further down. \"So strong,\" she said, mostly to my abs.\n\nI didn't mind that her comments were more directed to my body than to me in that moment.\n\nShe knelt, tracing my v-lines and then over my hips and down my thighs. She cupped my calves and tried to wrap her small hands around my ankles. Then she stepped behind me, ran those same soft hands over the back of my legs, caressed my ass, my lower back, my shoulders, my biceps, and my traps.\n\nMy military bearing held, but my muscles wanted to tremble at her touch.\n\nI took her hand, led her to the bed, and laid back. She followed me, climbed on top of me, and kissed me. I let her.\n\nAn aggressively wet kiss became licking my jaw and I groaned loudly.\n\n\"Ahem,\" the Queen's voice interrupted us. \n\nShe stood in our doorway, large as life and as imposing as herself. Thankfully, she'd left her hetaireias outside, but the Queen alone seeing me do things to her daughter...\n\nI swiftly guided Caeli off me, not roughly, and launched myself into a kneeling position on the carpeted floor. \"Your Majesty. We were only kissing. I swear.\"\n\n\"You are married, Ser Taiglox.\" The corners of the Queen's mouth twitched and I believe that only her queenly bearing kept her from laughing at me outright..\n\nTo be fair, I don't know that I'd ever felt more ridiculous. \"Yes, Your Majesty,\" I agreed with the fact as stated.\n\n\"Maybe you could step out and let me speak with my daughter, though?\"\n\n\"Yes, Your Majesty.\" I walked out quickly.\n\nOnce in my hallway naked, I realized I was in my hallway naked.\n\n\"Milady,\" Praden saw me and my consternation, \"perhaps in the corporal's room?\"\n\nI took the helpful suggestion with a quick bow of thanks, dashed into Kemptrux's room, and returned wearing one of her many blue tunics. The fit was ill, too tight across the chest and thighs as Kemptrux hadn't had as many years to develop her musculature, but it was still better than awaiting the Queen in the nude.\n\nThe wait was fairly long, about an hour I think. My mind didn't race though. One of the pleasant side-effects of loving Caeli and therefore treating her well was that she'd be unlikely to have many complaints. And she didn't.\n\n\"Your Majesty,\" I knelt again as she walked out.\n\n\"Stand, Ser Taiglox,\" she commanded, \"You've made my daughter very happy. As a result, I am very happy.\"\n\n\"I am glad, Your Majesty.\"\n\n\"You've not consummated your marriage yet.\"\n\n\"Er, no, Your Majesty.\"\n\n\"You have time yet, but I trust you won't put me in the awkward position of ordering you to take Caeli's virginity?\"\n\n\"No, Your Majesty,\" I affirmed. I intended to, certainly. When Caeli was ready.\n\nShe canted her head as she walked away, \"You're a good egg, Ser Taiglox. See that you continue to treat Caeli well.\"\n\n\"I will, Your Majesty,\" There's something to be said for the kind of natural legitimate supreme power that makes a casual compliment and familial extollation into a clear marching order and a simple death threat. Nothing menacing per se, just an open articulation of enduring commands with implied consequences that she'd never actually need to imply.\n\nAgain though, I didn't plan to hurt Caeli by word or deed. My intention was to only take actions that would make her proud of me and proud to be my wife.\n\n\"Hi, Tai,\" she frowned slightly as I walked back in, \"Whose tunic are you wearing?\"\n\n\"Kemptrux's. I thought it'd be best to be clothed for as much of the royal audience as possible.\"\n\n\"Yeah,\" she smiled in gentle amusement from the bed, \"but, can you be naked again? In here with me?\"\n\n\"Yes,\" The tunic was off and on the floor next to my own in an instant. I flexed as she watched me come to her in order to provide her with the best visual, but I slipped under the covers with her on reaching the bed.\n\nCaeli immediately drew near me as I laid on my back. Her uncalloused hands felt up my upper body, fingers splayed like she was trying to tactually take me all in at once.\n\nAnd, again, I let her. With my fingers interlaced behind my head, I relaxed into the plush bed as my charming little wife touched, licked, flicked, twisted, pinched, scratched, caressed, petted, fondled, squeezed, and stroked. \n\nTension built rapidly in my body even though her touches weren't studied or driven to arouse me particularly. She was rather more checking me out. Almost like a new warhorse.\n\nI nickered and sighed similarly as I was examined. But - with the same discipline as a seasoned warhorse being sat by a new rider - I remained still and calm with her hands on me, resisting my natural urge to toss my head, rear, and gallop.\n\nCaeli's hands slid under my shoulder blades in a kind of brooding hug. She huffed cutely, \"Tai, can you?\"\n\nTaking a small risk with little potential downside, I guessed at what she wanted, pretty sure she didn't know herself yet.\n\nWith unsurprising ease, I flipped us so that I laid across her. I interlaced our fingers together and pinned her down with my forearms. In addition to the pressure of my body weight on her slighter torso, I pressed a knee between hers so that she had something to squeeze.\n\nThen I resumed kissing my lovely wife unhurriedly. Her supple lips opened as her firm thighs closed. She moaned into my mouth, her breath escaping around my questing tongue and into my soon burning lungs.\n\nShe held out as long as she could, but needed air before I did. I gazed lovingly into my oh-so-innocent wife's dark eyes.\n\n\"Tai, my mother said we needed to become more...intimate, but I...\"\n\n\"She said the same to me,\" I smiled down at her, releasing her left hand so that I could caress her fair face and dark hair with my right. \"But she also said there was no rush. So how about we go have some breakfast?\"",
        "\"I think it's lunchtime,\" Caeli smiled back at my loving forbearance, her empyrean face lighting up even more.\n\n\"So it is,\" I released her, climbed out of bed, and held out a hand for her to do likewise, \"I will have to dress however.\"\n\n\"A shame,\" she giggled as she ogled me unabashedly, \"Maybe just this once?\"\n\n\"I will if you will,\" I teased her waggishly, forgetting for a moment her jarring last experience with public nudity.\n\n\"Tempting, but no deal,\" she joked back and I was relieved both that I hadn't revictimized the sensitive girl and that she seemed to be on the way to moving past it.\n\nWe had a nice meal, received a report from Kemptrux about her training program with the other guardswomen, listened to Vostiv's laments over struggling with mathematics, and whiled away the afternoon reading Liber Revelacionum Julyane. \n\nAt dinner, my little household was visited again by Yonjax, this time in company with her wife, my cousin Poumi, and the stunning hetaireia wearing the cordovan and onyx of House Chilandya whom I'd seen at the Queen's right during my knighting.\n\n\"Yon!\" Both Vostiv and Caeli greeted her happily. I formally hugged my cousin and shook hands with the hetaireia while inviting them all to join our table. I never asked how they knew exactly when to come.\n\n\"Ser Taiglox, this is Ser Lucax, fifteenthborn of Chilandya. She'll be joining your household,\" Yonjax explained the presence of my third guest, \"She's the Hetaireia Soma, the Queen's night bodyguard. Since her hours and duties are so...dissimilar from her fellow hetaireias, it's better that she reside outside the barracks. Additionally, she'll be joining the Queen in campaigning season, and so could use additional training ahorse.\"\n\n\"Ah, happy to oblige and happy to have you, Ser Lucax,\" I welcomed the newcomer. \"I'm a bit distracted with my honeymoon for the next few weeks, but you can train with Kemptrux and Vostiv in the meantime and I'll be back in the yard soon to help. Do you have tack and kit and a horse for cavalry training?\"\n\n\"No, Ser Taiglox,\" she answered, not rudely, but succinctly and smartly.\n\n\"Alright, you're of my household now and will be given the tools to be successful. There's a good armorer down on Iron Street named Hronir who can make you quality lamellar armor and I'll help you choose a warhorse once our honeymoon ends.\"\n\n\"Taiglox, you have special dispensation to go with Ser Lucax and select what she may need,\" Yonjax spoke up and surprised me with the special treatment being afforded for Ser Lucax's training, \"You and she will go tomorrow and the cost will be borne by House Royal. Be sure she gets the best.\"\n\n\"Of course,\" I took the surprising order simply, \"We'll head out after breakfast.\"\n\n\"Ser Lucax has hetaireia training for two hours after her shift ends at 8 bells, but you can leave after lunch,\" Yonjax amended.\n\n\"Good to go. How about 12 bells, Ser Lucax?\"\n\n\"Yes, ser,\" Lucax answered and also answered a second unspoken question. Both knights and both lieutenants, I honestly didn't know if I ranked my new household member. Cataphract or hetaireia didn't technically matter. And who knew if Princess-Consort trumped Hetaireia Soma? \n\n(Turns out, no one else knew whether personal bodyguard to the Queen outranked wife to the Queen's daughter either, except maybe some titular scholar somewhere. Lucax was simply recognizing that I graduated from the Academy and commissioned before she did.)\n\nA filling meal commenced with both Vostiv and Caeli proudly touting their recent scholarly achievements to our royal visitor's indulgent approval. Yonjax spoke of a trip she'd taken a season before to see their mothers' people and how the lands fared out there, to which Vostiv showed expected interest. Poumi spoke of the coming balls and fetes planned for the offseason, which greatly captured Caeli's attention. Lucax spoke little. \n\nI mostly enjoyed a break from needing to speak or empathize. Kemptrux seemed to enjoy the same reprieve, although she got to enjoy that particular form of freedom more often than not.\n\nWe finished a lovely dessert of flaky fruit pastries served with fresh milk and honeyed wine. Then Poumi took Caeli's arm, \"I'm sure these lot of ruffians you live with,\" she gestured broadly at Vostiv, Kemptrux, and me, \"can't properly appreciate fashion. Why don't you show me your new marriage wardrobe? I do sometimes miss the blue and gray options my natural house offers.\"\n\nAs my wife and hers left together, Yonjax turned to my fellow two \"ruffians\" and Lucax with a suggestion, \"Hadn't you three best go to the stables for your after dinner ride?\" she ordered politely.\n\n\"We don-\" Vostiv started to object.\n\nThe young corporal knew an order when she heard one though, however couched in pleasantry, \"Yes, Your Highness.\"\n\nThe trio left by the front door, but it was to the hallway and our wives where I glanced back in disquiet.\n\n\"You needn't worry,\" Yonjax read the concern on my face, \"Poumi's and my marital understanding doesn't extend to noble lovers. And she'd throw herself from a parapet before she touched a member of my house. Me hers either.\"\n\nI nodded, not understanding the distinctions myself, but accepting them.\n\n\"You however, you big wussy romantic, need to move things along.\"\n\nI understood that too, but disagreed. \"That...end part...of the marriage ceremony was a lot for her. I don't want to push her. She's fragile and she trusts me.\"\n\n\"Silly bear,\" Yonjax shook her head, \"The marriage ceremony is designed to create that reaction. To make your bride crave your protection and to make you feel protective of her in turn. But it worked too well on you two hopelessly sweet lambs and now you'll spend a lifetime of vanila cuddling if you're not careful.\"\n\n\"Hrm.\" I didn't want that. I like cuddling Caeli, but wanted more. When she was ready, I reaffirmed to myself.\n\n\"Jelvix was supposed to have talked to you and we all assumed the Queen's last wife would have talked to Caeli. At the risk of speaking ill of the dead, she was rather useless as anything beyond a broodmare, so we shouldn't have assumed in hindsight,\" Yonjax frowned, \"Even knowing in advance, the two of you turtledoves may have still found her public nakedness shocking enough to promote bonding.\"\n\nHad we both known, then yes, I probably could have held my position while Caeli raced up the aisle to me. The tradition still seemed dumb to me, but I kept that opinion and any others I had in the moment to myself.\n\n\"Poumi and I were on the other end of the spectrum in our 'palatial style' wedding.\" Yonjax grinned, \"I swear, your cousin straight sauntered to me, with all the warranted swagger of a whore who knew she commanded the best price in the city. No shame at all. I have to say, it was pretty hot to know that - to the envy of all gathered - that magnificently proud harlot was mine to fuck whenever I liked.\"\n\n\"You still...er...?\" I'd assumed since they both had lovers outside the marriage that they were not regularly intimate with each other.\n\n\"Yes. My whores and flings neither know nor care of course, but her 'harpist' hates it. I've even fucked the woman while she eats out my wife. Poumi likes it too, knowing she commands such devotion from her lover that the woman willingly gets plowed while orally pleasuring her, and simply because Poumi wants her to perform so.\"\n\n\"Oh,\" I'm sure there's a level of society that would be informed as to the correct verbal response to such a revelation. I do not and will likely never operate competently on that level. Yonjax's continued grin more than suggested that she knew that.\n\n\"Not that I'd expect such,\" she chuckled, \"'depravities' in your bedroom, Taiglox. Nor would I tolerate any depravities which might be unpleasant to Caeli. In fact, should you have offended her person in any way, I'd have dragged you from her room on your wedding night.\"\n\n\"We were being watched then?\" I remembered the feeling of eyes on me that I couldn't shake.\n\n\"Only the first night. Not even the whole first hour,\" she amended, \"After that, well...I'll still torture you to death if you abuse my little sister, but it seems extremely unlikely to happen.\"\n\n\"It won't.\"\n\n\"I believe you, but remember that you're more than a compact of fealty and a handy bodyguard. Nor are you a reading tutor or a riding instructor. You are a princess-consort and one of your many duties to my sister in that capacity is her physical satisfaction.\"\n\n\"Yes, Your Highness,\" I accepted yet another order regarding my own marriage bed.\n\n\"Enough on that though,\" Yonjax moved on, \"I'm sure you're wondering why Ser Lucax has been placed in your house?\"\n\nI wasn't. \"You told me why...?\"\n\nYonjax smiled at me the way she'd smile at a puppy running after a stick that she hadn't thrown. \"What I told you was the truth, but not the whole truth.\"\n\n\"Okay?\" I felt like that puppy, but I was tired of chasing phantom sticks. I waited instead.\n\n\"The Hetaireia Soma is traditionally assigned only to unmarried Queens. Ser Lucax absolutely qualified as a hetaireia as well - won tournaments and graduated at the top of her class for elite guards - but her other duties include being paramour to the Queen.\"\n\n\"She, rather, she...?\" I struggled to ask whether the duty of \"paramour\" was a choice without accusing my Queen of rape.\n\n\"It's fully voluntary, I assure you,\" Yonjax saved me the awkwardness of finishing my question, \"And a highly enthusiastically kept position. Pre-blessed by Chilandya for her fifteenthborn, too.\"\n\n\"Oh.\" I suppose that made sense. Marrying off your fifteenth middle child must be difficult and being the Queen's lover is probably as good or far better than any match she might have made.\n\n\"It's an open secret. The Queen won't remarry at this point of a certainty and can't be expected to remain celibate for life, but can't whore or take a mistress either, so the Hetaireia Soma is an acceptable...outlet. Still, the position creates jealousy amongst the other hetaireia in some quarters and - worse - competition from many quarters to see who else might seduce the Queen's lover.\"\n\nI shook my head. Palace life really is too complicated.\n\n\"Ser Lucax is loyal, but even the appearance of a dalliance could create royal embarrassment or the perception of royal weakness. If she resides with the Queen's darling daughter and the stoic princess-consort, such claims would be difficult to sell.\"\n\nThat was fair. No one would believe that I'd either sleep with the Queen's lover myself or allow such a tryst in my home.\n\n\"Further, she excelled as an elite guard, but she lacks cavalry and tactical skills that you can teach. My mother - having grown extremely fond of both her and of pillow talk with her - wishes to bring Ser Lucax on campaign, where she'll need horsemanship. Her Majesty would also prefer for their idle discussion of military options in the night to become more than one-way venting. In recompense, Ser Lucax will fulfill all the functional requirements of the valet you don't seem inclined to recruit. And provide some martial presence for you beyond the guards at your door.\"\n\nI thought back on Miriam's attempted kidnapping, and how quickly it would have been settled should the fierce noble hetaireia been woken by the frightened girl's return.\n\n\"Thank you,\" I averred honestly, \"That's a weight off my mind. And I'll do my part to offer a haven to Ser Lucax and to train her.\"\n\n\"Should you two get on well, you could do more than just work together. It'd be good for the both of you to have someone similar to confide in. A friend.\"\n\nThat wasn't a bad point either. I love Caeli, but there are points on which we won't really ever relate. In a different way, I loved Kemptrux and Vostiv too, but they worked for me. And the princesses would always be too high above me to befriend like equals.\n\n\"A friend would be nice.\"\n\n\"I know, Tai,\" Yonjax showed a rare moment of sympathy, but then stood. \"And you can tell Caeli everything I've told you. You'd probably break and tell her anyway as soon as you realize that she's jealous.\"\n\n\"Why would she be jealous?\"\n\nYonjax just laughed, \"Silly bear.\" \n\nNot waiting for my response, the princess stepped away to collect her wife and say goodbye to my princess before taking her leave.\n\nWalking back into our room, I found Caeli sitting on the edge of our bed. She seemed lost in thought.\n\nI took a seat in an armchair and waited for her to look up. Her dark eyes flickered between hope and fear when they met mine.\n\n\"Poumi spoke with me...about you,\" my wife blushed delicately.\n\n\"Oh. May I ask what she said?\" I had a guess that the unfaithful couple's conversation would be firmly in tandem.\n\n\"She said that you're big and strong and that even if you turn out to be clumsy, you'd probably be good at...\" Here, she blushed furiously.\n\nI stepped to my wife, scooped her into my arms, and sat back down in the armchair with her in my lap. \"I am big and strong. I am good at many things. What I want to be best at, is making you feel safe and loved.\"\n\n\"I do feel safe and loved,\" she confirmed, \"but...Do you think Ser Lucax is pretty?\"\n\nYonjax is always right. \n\nI immediately spilled everything I knew, in the most delicate terms I could find.\n\n\"I'm good,\" Caeli hugged me, fiercely. \"I love you, Tai.\"\n\nI wasn't totally convinced that everything was \"good\" yet, but I wasn't going to prod her either.\n\n\"I love you, too,\" I kissed her forehead, \"Let's to bed?\"\n\nBoth tired, we went straight to sleep with me fully undressed again. Her limbs tangled to me more than usual in the night, as though unconsciously trying to get more of her bare skin on mine.\n\nWe idled in bed until 11 bells, then ate a quick lunch before I took Lucax shopping. \n\nFor the Hetaireia Soma, we first selected a serene dun grulla warhorse with black legs, mane, and stripe, which Lucax named Seguidilla for his dancing hooves. Then we ordered fine lamellar armor and barding accented in her house colors. A new kopis, mace, bow, and lance finished out her needs as a budding part-time horsewoman.\n\n\"I promise, once my honeymoon is over, I'll take you into the yard and teach you to fight ahorse,\" I gave my word, \"Meanwhile, practice with Kemptrux and Vostiv. They can use it too.\"\n\n\"Thanks,\" she seemed honestly grateful, \"I never focused on riding in the Academy, but now I need...\"\n\n\"I know,\" I nodded, \"And, believe me, I know how life can put you where you don't expect and cause you to require skills you never thought would be useful.\"\n\nShe sighed, happy not to have to defend her choices or gossip about their ramifications to at least one person in her life.\n\nOn returning home, Awhonam warned me that Caeli was bathing and dressing.\n\n\"Very well,\" I answered, unsure of the import. Both Caeli and I regularly bathed and usually dressed.\n\n\"Er, milady, she asked that you specifically not disturb her during?\" Awhonam clarified haltingly. \"It may be a couple hours.\"\n\nI shrugged and agreed easily, \"As she wills, Awhonam. I'll be in the dining room or the library until she's ready to see me again.\"\n\nThe poor young handmaiden released her breath in clear relief. Certainly I'd never done anything overt to frighten the girl, but we hadn't interacted much directly. And I do stand over six feet tall with a thewiness hardened by years in training and fighting in heavy armor.\n\nSo when she scampered away in a hurry, I didn't take any offense or try to interfere. She and the rest of my new household would grow used to me over time.\n\n\"Well,\" I turned to Lucax, \"I suppose we have time to go over battle tactics, if you like?\"\n\n\"Actually, it may be more strategy than tactics\" Lucax suggested, \"but will you talk with me about the northern campaign? I know it's essentially been a single siege forever, but I know embarrassingly little more than that.\"\n\n\"It's a bit of an embarrassing stalemate really,\" I answered, \"And I'm honestly glad that it's been more of a siege problem than a cavalry push. Just one second though,\" I leaned out, \"Vostiv, report!\" I called for my squire.\n\nShe could stand to learn as well, so I sat her with us.\n\n\"So, eight years ago, our regular battlefronts to the east and west were quiet. There'd always been a bit of raiding on our northern border, complained of by the houses with lands there, but the raiders' land was rough, cold, and poor and so never a priority. With a free campaign season, our larger and more disciplined army swept their land with relative ease. Except for one fortress build into a mountainside.\"\n\n\"And that's the last hold out. We hold the rest of the land to the uninhabitable northern range?\"\n\n\"Yes and no. Technically we do, but, as I mentioned, we only bothered to conquer them to stop the annoying raiding. Much of the land on both sides of the former border remains fallow.\"\n\n\"Is there danger of it being retaken?\"\n\n\"Not so long as whatever remains of their army stays bottled up in the fortress.\"\n\n\"What remains?\"\n\n\"Impossible to tell. Best guess was around 500 or a 1000 adults at the beginning of the siege. They've had failed forays since then, but also seven years for new soldiers to come of age and old soldiers to die. The fortress can be held by less than 100, so it's not entirely a matter of numbers, especially since we can also keep them penned in with a few hundred.\"\n\n\"Why not just end the siege?\"\n\n\"Traditionally, there are three ways to end a siege. We could throw bodies at it, but the fortress is so well fortified that we'd lose thousands to gain an asset with little value. Sappers have looked for ways to tunnel in, but it's built into a frozen mountain, so a tunnel large enough to bring in enough soldiers at once would be prohibitively arduous for such a poor prize. So we've been employing the third method, waiting them out. For seven years.\"\n\n\"They were prepared for a seven year siege?\" Vostiv piped up.\n\n\"No,\" I explained, \"they were prepared for long winters so cold that thousands might be trapped within the fortress for warmth and prepared for summers so cold that every crop would freeze before harvest and they'd have to stave off famine. Both necessitate huge amounts of stored food, primarily grains for human and animal. We can surmise that they must be down to only grain by now, but we can't know how much.\"\n\nLucax looked at me curiously, \"You said 'traditionally' though?\"\n\n\"Well, yes. Usually sieges on towns last a few days or weeks. Even sieges on fortresses almost never last over a year. The trouble is, their nobles have everything to lose with the siege's end. Conversely, we have little to gain, while continuing the siege costs us a few hundred garrisoned soldiers at any given time and the lingering black eye of what is now technically a seven year campaign against a single fortress.\"\n\n\"What would you do?\"\n\n\"Leave them food.\"\n\n\"That seems... counter-intuitive,\" Lucax avoided calling me stupid.\n\n\"During the first year of a siege, sure,\" I reasoned, \"But now? It'd leave the nobility with the horrid options to either let their soldiers have fresh meat, fruit, and veg from the enemy after seven years of deprivation or to build resentment in the soldiery by hoarding or destroying the food. I think either would lead to a coup and surrender after a dozen deliveries or so.\"\n\n\"Huh,\" Lucax nodded, \"What about the west?\"\n\n\"Far more complex,\" I admitted and expanded. So we spent the afternoon discussing our military position with Vostiv and later Kemptrux joining in.\n\nLucax and I became rather fast friends, bonding over not just martial theory, but also our shared Academy experiences and the peculiarities of palace life. She's a good sort. \n\nWhile we debated the frustrations of a river border, Bakian came out and started supervising the laying of the table.\n\n\"I should check on Caeli,\" I told my lieutenant, corporal, and squire, wondering what my wife'd gotten up to.",
        "\"Oh. No, milady,\" Bakian dissuaded me cautiously, \"Her Highness intends to join dinner once it's served.\"\n\n\"As she wills, then,\" I heard myself saying again. \"We'll start dinner whenever she's ready.\"\n\nSure enough, my lovely bride entered after the steaming food had all been laid out. And -oh- what and entrance she made.\n\nShe wore a slate blue silken gown, dripping with platinum jewelry set with shiny stones of all shades of blue and gray. Her lustrous dark hair was bound in elaborate braids and platinum accessories. Her lovely face was expertly painted in very expensive cosmetics.\n\nMy wife was and is beautiful. While she's just as beautiful to me in a nightgown, even I could see the astounding level of effort that she'd put into her splendid appearance. For a simple household dinner?\n\nI stood and the table stood with me. \"Caeli, you are magnificent.\"\n\nShe smiled and went to sit, but I took her hand instead and led her from the room.\n\n\"What's going on, my love?\" I knit my brows at my dear Caeli with concern.\n\n\"You still find me attractive, even with Lucax here, right?\" she sought affirmation.\n\n\"Sweetheart, I've never met a woman as attractive as you, not anywhere in the world. I've told you that,\" I reassured her honestly and added self-deprecatingly, \"And you've told me what a terrible liar I am.\" \n\n\"I know, but it's different now that it was with just Vostiv and you. Lucax is so exquisite.\"\n\n\"Is my own wife calling me ugly?\" I teased, smiling down at my pampered princess.\n\n\"No. You know you're handsome, but it's different,\" she thwapped the inside of my shoulder with the back of her hand, \"She's pretty and she's a strong soldier like you. You two will always have more in common. I worry that you may come to like her better and want...\"\n\n\"Of course I won't, dear Caeli,\" I shook my head emphatically. \"I don't want another soldier,\" I caressed her smooth cheek, \"Another brawny soldier wouldn't be soft like you.\" And I hugged her. \"She wouldn't fit into my arms like you.\" I rested my face to her, \"I couldn't smell the crown of her head as I nuzzled into her hair like you.\" I pulled back a little, falling into her fathomless dark eyes. \"And, most importantly, she wouldn't gaze fondly up at me as her big, well-meaning, loving bear like you.\"\n\n\"You are well-meaning,\" Caeli agreed as she smiled back up at me.\n\n\"And I'm committed to you and to only you. Forever. I love you, Caeli. More, I like you and I like being with you.\"\n\n\"I love you too, Tai,\" she stood on her tippity toes and kissed my lips briefly. \"Okay. Let's go to dinner.\"\n\nKemptrux excused herself unsubtly after dinner to spend time with Imogen, but I kept my three noble household members back, thinking we could bond a bit over cards.\n\nTurns out, the only game all three of them knew and had decks for was Gwent, a new pastime to me, but apparently widely played in great houses.\n\nCaeli didn't befriend Lucax in just that one night, but she soon came around as we all spent some more time together as a group. Within a few days, she was scolding and teasing Lucax around the table just like she did Yonjax, Vostiv, and me. \n\nMy time alone behind closed doors with my dear Caeli was still better though. Far better. \n\nI spent most of those days fully naked with her and we fooled around for an ever greater portion of the time. We didn't go further though, not until she unwittingly prompted me to further action.\n\n\"You never press me?\" she asked during one of our few breaks to catch our breath.\n\n\"Would you like to be pressed?\" Again, my knee parted her legs, but I pushed suddenly instead of simply letting her squeeze as she felt the need. Not that she stopped squeezing. \n\n\"I want to know if you want me. No,\" she looked up at me boldly, \"I want to know that you want me.\"\n\nI maintained eye contact, \"I want you. I want you on your terms and in your time, but I absolutely want you. Have no doubt on that score.\"\n\n\"Maybe I'm ready?\"\n\n\"Let me know when you're sure.\"\n\nShe said nothing. I said nothing. I let the moment hang.\n\n\"I'm sure.\"\n\nShe wasn't.\n\nI touched her sweet face, kissed her delicate jaw and down her slender neck. With slightly trembling hands, I undid the tie of her nightdress and pulled it down over her elegant shoulders. I brushed my lips over her prominent collarbone. \n\nI'd seen her bare before, more of her cleavage than I'd exposed thus far even, but revealing the soft skin for myself and pressing my lips to that cleavage was far different.\n\nEyes up, I checked in. She nodded encouragingly. I pulled her dress down to her waist.\n\nI ran my hands along the outside of her pert breasts. I ran my tongue along the insides of her pert breasts.\n\nSomeday, I would bite and nip pleasurably, but at that time I didn't even nibble or graze. No teethwork. Only my lips and tongue on her velvet skin.\n\nShe moaned nonetheless, enjoying my fairly respectable technique and honest reverence for her and her gorgeous body.\n\nI took a puffy nipple in my warm wet mouth, feeling it harden as I sucked. My left hand on her other breast felt her heartbeat quicken. My right hand on her side felt her ribcage expand at her sharp intake of breath.\n\nAfter a time, I switched nipples. And again. And a third time. By the fourth time, her panting was making it physically difficult to ensure no teethwork.\n\nAnd then I had a choice to make. (Not on the teethwork, that was decided.) I'd never taken her so far before, always giving her a respite rather than risk taking her to a point where her lust might outweigh her other emotions. But now her sweet body wanted a release she didn't fully understand. And she wanted it more than she knew how to deal with in her limited carnal experience.\n\nWith reluctance, I quit the firm breasts that I'd already decided were the best on the earth. I licked down her form through the valley between her breasts and further to tongue her bellybutton. Working my way back up, I put tender kisses and gentle caresses on her hot skin until I reached her lovely face again.\n\nShe panted by my ear as I whispered in hers, \"I want to take you further. Can I touch you?\"\n\n\"Yes!\" Caeli agreed eagerly.\n\nThen I frowned, face buried in her zanabaq hair so she couldn't see it. I wasn't sure if she understood what I was asking. I wouldn't use vulgar terms to clarify, and couldn't be sure she'd understand my rude soldier's terms any better than my vague suggestion.\n\nCaeli was a healthy woman of twenty. Even if denied access to a romantic partner, surely she'd touched herself. At least in her teens. But I wouldn't embarrass her by asking after what she did alone in her darkened bedroom.\n\nI kissed her graceful neck as I caressed downward from her bellybutton, not stopping until my fingertips brushed over her downy pubes. \"Are you sure?\"\n\n\"Yes,\" her voice was breathier, lower. She was sure.\n\n\"Spread your legs more, my love,\" I advised her as I tickled my fingers through the fine hairs on her mound and over her pouting lips. Then between them, stroking the length of her virginal sex. \n\nCaeli was wet, very wet. No real surprise given that we'd been kissing and touching for hours - days, really - with no relief for her.\n\nSo I continued to kiss the tender skin betwixt her earlobe and her collarbone while two fingers slowly eked inside her. Moist and open, her slit allowed my fingers easy entrance. \n\nI remained ginger and slow though, knowing that no one else had touched her that way before and that - no matter how turned on she was - the new experience would engender a level of involuntary trepidation. \n\nI returned to kissing her sweet lips as I fingered her gently, patiently waiting for her inner muscles to relax enough that I could be sure I wouldn't hurt her.\n\nEventually, my thrusts met as little resistance as I could reasonably expect, so I found her g-spot hiding inside and touched lightly to confirm that she wouldn't be too sensitive to enjoy repeated contact.\n\n\"Tai!\" she shouted.\n\n\"You like?\"\n\n\"Yes!\" With the greater part of our honeymoon to this point having been spent in fun foreplay that was nonetheless aggravating to the libido, I knew my overstimulated princess wouldn't last very long.\n\nSo I built a pattern of internal tapping thrusts to near continuous yeses of approval. Those yeses grew even more in frequency and intensity as I found her excited clit out and proud with the ball of my thumb. \n\nFeather touches. Darling Caeli was already too overheated for more than feather touches.\n\n\"Tai!\" she screamed my name loud and long as she came in a watershed of physical and emotional release. I held my fingers deep within her as her inner muscles convulsed and clenched in pleasure.\n\nHer pretty body went suddenly limp, so I pulled my fingers free and immediately licked off her tantalizing juices.\n\nCaeli looked up at me in wide wonder, so I smiled back down, \"Have you never tasted yourself, my love?\"\n\n\"I have, yes,\" she blushed, \"but I never thought anyone else would want to.\"\n\nProbably at least seven eighths of the women in the palace would love to taste her, but I left that thought unsaid, \"I do, Caeli. You taste amazing and I'd like to try you from the source next time.\"\n\n\"You would?\" she smiled back.\n\n\"I would like to do all kinds of very sexual things to your gorgeous body, Caeli,\" I kissed the tip of her nose affectionately, \"If you'll let me.\" \n\n\"I'll let you,\" she agreed avidly. She tried to pull down her nightdress further, but the herculean effort was beyond her capability in her post-orgasmic state. \n\n\"Right now though,\" I gently restrained her questing hands and brought her into my powerful arms. I never feel quite so protective of her as when I've made her weak by making her cum, \"I'd like to cuddle you.\" \n\n\"That sounds nice,\" she murmured sleepily as she nuzzled into my shoulder.\n\nAs I snuggled my sweet girl, I marveled at how utterly nice things were with her. \n\nWith the fleeting nature of all my previous sexual relationships, there'd be a mad dash to try every carnal pleasure in the catalog available to me as quickly as possible before the fling ended. No time for rest.\n\nConversely, just watching and holding her sleeping form while she needed sleep filled me with a serene sense of rightness.\n\nAs I mooned lovingly over her adorable face, I noticed that our love-making session had caused her to become a bit sweaty. Or to glisten, rather. Chic ladies glisten, I suppose.\n\nBut, yeah, she was a bit sweaty. \n\nHaving not seen her exert herself so greatly previously, I'd not seen my wife sweat before. I found it cute and I kissed her adorably damp brow.\n\nJust another little detail that further humanized Caeli to me. There'll likely always be a small part of me that will never fully believe my luck that the ravishing and vivacious princess was really mine. A nagging voice forever declaring that she's far too high above me. She's so lovely.\n\nBut those little moments helped and each one served to deepen my ever growing affinity and affection for my charming wife.\n\nBy the time she stirred and woke naturally in my arms, I was feeling extraordinarily possessive of her.\n\n\"I'm hungry now,\" I whispered.\n\n\"Is it breakfast?\" she murmured back, \"I'm sure Bakian will give us some ham and honeycakes.\"\n\n\"Not the kind of honey your bear is hungry for, Caeli,\" I growled back as I rolled her onto her back.\n\n\"Oh!\" she agreed and wiggled on the bed to get comfortable. My announcement and positioning her rapidly raised her alertness.\n\nMore aggressively than previously, but still without actually biting her, I worked my way down her body.\n\nI did nip the inside of her thighs. Her warm, smooth, creamy, enticing thighs.\n\nIt was impossible not to nip the inside of her thighs, especially with the added accelerant of the little hitching noises made by her breath catching whenever I let my teeth close and apply just a tiny bit of real pressure.\n\nBut she hadn't been coherent and aroused long enough to wet the insides of her thighs yet and I wanted to taste. And I wanted to drink until I both sated her and was sated myself.\n\nI took a long, slow lick up her slit, gathering the sweet nectar I found greedily and following with more sweeps of my tongue through and throughout her puffy pinked lips.\n\nHungry bear that I was, I followed the flow to the source, using my long, agile tongue to draw honey from her warm honeypot.\n\nResting my hand gently on her hip to comfort her, I continued to tongue as far inside my tasty wife's channel as I could reach. My focus wasn't as entirely on her pleasure in the moment as it was on drinking as deeply of her font as possible.\n\nBut her groans rang in my ears, impressing me back into her service despite my new addiction. \n\nLetting my nose bump her clit repeatedly, I got into a better rhythm of licking her pretty pussy, curling my tongue up somewhat to to finish each up-nodding movement of my head with a tap with the tip.\n\nHer perturbed groans became delighted moans as the patterned movements agitating her sex flooded her pleasure centers.\n\nMy comforting hand on her hip turned into an armbar across her navel as her excited hips tried to pop and jerk.\n\nAs complimentary as those involuntary reactions were, I needed her to be somewhat still.\n\nIn fact, I didn't realize myself how irrationally irritating I found her rebellious hips until I heard her giggle and felt her shiver because I was growling vocalized vibrations into her wet snatch.\n\nCalming and focused, I consciously sped my patterned ministrations on her wondrous sex. Just as consciously, I listened for her breathing to change. Her cute, sporadic little pants for air consistently and more rapidly interrupted her near constant whimpering.\n\nI love that satisfying her beautiful body is now part of my arete.\n\nHer cries rose in volume and urgency. Her bucking became more exigent, although no more successful as my strong arm held her where I needed her to be.\n\nMy tongue still delving into her with measured strokes, I brought my free hand down past her mons venus to toy with her clit from above with my thumb as I consciously kept bumping her clit from below with my nose. I was intent on bringing her off quickly, because the desire in her voice had taken on a desperate timbre.\n\n\"Aaaaaahhh!\" she called out more loudly still as her dam broke under the pressure of pleasure.\n\nHer body simultaneously went rigid with orgasm. Then immediately relaxed fully in an afterglowing abatement of tension.\n\nI was duly rewarded with a fresh flow of sticky honey for my carnal efforts. I was extremely gentle - and yet entirely thorough - in lapping up my liquid spoils over the next minutes.\n\nFinally contented from my feasting, I crawled back up the bed and gathered Caeli's enervated body into my possessive embrace.\n\n\"That,\" my happy wife noted, \"is a very nice way to wake up.\"\n\n\"I'm glad you liked it,\" I agreed puckishly, \"because it's how I plan to put you to bed, too.\"\n\nAnd so I did. And when she roused from that round, I ate her out and cuddled her again. Our life became a cycle of primarily sex and cuddles, interspersed with food, sleep, reading, cards, and exercising.\n\nAfter a few days, she attempted to return the favor. Her first try was unsuccessful in bringing me to climax. As was her second, third, and fourth. Through those first four times, I was a patient and understanding lover. I'd argue that I was always an understanding lover, but I did lose my patience.\n\nCaeli was wriggling her tongue in my snatch as she rubbed my inner thighs. I'm not complaining. She enthusiastically licked and flicked. She had me afire. But it wasn't going anywhere and I began to need it to go somewhere more desperately than in our previous touchings.\n\n\"Caeli, love, come up here and kiss me?\" There was no need to be cruel. She'd learn. Probably. Even if she didn't, I wouldn't ever choose to be cruel with her.\n\n\"Now?\" She looked up at me, her lower face shining wetly in the candlelight.\n\n\"Please?\" I reached down my hand to her. \"I want to taste me from your lips.\"\n\nShe climbed up me at that. \n\nIf I've anything to say in my own defense, it's that I'd not had an orgasm since before we'd married and I'd spent weeks in my alluring princess' presence and ardor. \n\nAnd I hadn't lied entirely. Tasting her all wet with me got me even hotter.\n\nHer kisses landed mostly on my lips and chin. One of her hands braced herself against the wall behind the bed while the other tangled in my chestnut hair. \n\nI pressed one of my hands between our naked bodies to touch myself while I gripped a firm buttcheek with the other to keep her grinding against me.\n\n\"I love-\" I panted out between kisses, \"you, Caeli.\"\n\n\"Mm-hm,\" she couldn't be bothered to stop showering my face with kisses long enough to form actual words.\n\nInspired to self-satisfying despite my discipline by the provocative woman who laid undulating on top of me, I didn't hold out long. Mirroring the simple and effective technique I'd used on her, I found my own g-spot and and teased my own clit. \n\nI closed my eyes, but still pictured my beautiful bride as I sighed into a quiet climax that released all the pent up sexual puissance driving me.\n\nShe brushed the hair from my face and kissed me sweetly. Even satiated, her lips on mine are always pleasant and I didn't object.\n\n\"I'd like to do something?\" Caeli asked as she caressed my loosely fallen locks.\n\n\"Okay,\" I agreed happily, not knowing at all what I might be in for.\n\n\"Can I play with your hair?\"\n\n\"Aren't you currently?\"\n\n\"No. Or, yes. But I want to style your hair.\"\n\nI frowned and huffed a laugh in response.\n\n\"Please?\"\n\n\"Yes, dear Caeli.\"\n\nI forced myself to get up and kneel by our bedside as she sat behind me. \n\nThe first part was lovely as she massaged my scalp and ran her fingers through my tresses. But then the plaiting, braiding, twisting, tying, and pinning began and seemed never to end.\n\nShe held up a mirror for me when she finally finished. My hair was styled well, symmetrically and intricately. Still, I felt entirely silly.\n\nBut Caeli'd done a good job and was rightly proud, so I praised her efforts. And the sensation of her unbinding and shaking out my hair was nice. Not worth an hour of boredom to no useful purpose, but nice.\n\nSo I occasionally permitted her to play with my hair. (By occasionally, I of course mean whenever she asked.) Our days and nights were filled with sex, cuddles, sleep, food, reading, cards, exercise, and hair-styling.\n\nWe were in just that compromising position a few days later when the Crown Princess walked in.\n\n\"What are you doing, Taiglox?\" Heoldax chuckled, but in a pained way.\n\n\"I, er,\" I sort of gestured half-apologetically to Caeli behind me.\n\n\"Don't make her feel bad, Heo,\" Caeli rebuked her sister, \"She's doing it for me.\"\n\n\"Alright,\" the mirth left Heoldax's face, \"I should be thanking you, Taiglox. That's the first time I've smiled since I heard the news and will likely be the last for a good while.\"\n\n\"News, Your Highness?\"\n\n\"Horde building in Arashnia. It's recruited many tribes and conquered more. It's moving toward Tarvini and snowballing. Yonjax has the fortress. Jelvix will muster the army here. I'm rallying every woman-at-arms available now to gather at Proquian Rock.\"\n\n\"Caw,\" I cursed and called out, \"Corporal, squire, ready your tack and kit!\"\n\nI heard an \"Aye, ma'am,\" and an \"Aye, ser,\" from the hallway.\n\nAs I stood and loosed my silly hair, Caeli grabbed my hand.\n\n\"No!\" Caeli interjected vehemently at her sister, \"Taiglox can't go. No!\"\n\n\"Caeli,\" Heoldax didn't yell but her voice became harsh and angry. \"You shame yourself. You know very well that-\"\n\n\"Your Highness,\" I interrupted as politely but firmly as I could, \"My wife is mine to correct.\"",
        "\"So she is,\" Heoldax still shot Caeli a reproachful look, \"Courtyard, in the saddle on your warhorses, within the hour.\"\n\nI turned to Caeli and kissed the hand that still white-knuckled mine. \"I love you and I'll be back as soon as I can.\"\n\n\"No,\" she insisted.\n\n\"Caeli, Tarvini is less than 100 miles from the border and only a few towns from this fortress. We must stop the horde in its tracks.\"\n\n\"We'd be safe in the fortress though?\"\n\n\"You would have me cower behind walls while a horde ravages town and country?\"\n\n\"You're one soldier. You can't stop a... a horde.\"\n\n\"My love,\" I hugged her to me, \"Every one soldier must stand and fight or the tidal wave takes us all.\"\n\n\"No,\" she pounded her small fist on my chest, but the air was already out of her. \"You're mine. Mine. My sisters, they can't have you.\"\n\n\"I'm a soldier, dear Caeli. They have me by oath.\"\n\n\"You swore an oath to me too.\"\n\n\"On my commission and on my honor, so it's broken if I have neither.\"\n\n\"Don't go. I don't care about honor. I care about you,\" her little fist still pressed against my chest, but she laid her head there too.\n\n\"I love you,\" I repeated.\n\n\"I love you, too, Tai,\" she looked up at me, resigned but crying. \"So don't die.\"\n\n\"I'll do my best to get back to you alive, my love,\" I kissed her forehead, threw on soldier's garb, and left the room without letting myself look back. I stopped only in the side room to collect my armor, my tack and kit, and some bags of gold. \n\nWalking out on her while listening to her crying bitterly was the hardest thing I'd ever forced myself to do.\n\nLucax stopped me at my door, her cavalry armor half on and holding the rest of her tack and kit.\n\n\"Ser Lucax,\" I held up my hand, \"I assume your place remains here.\"\n\n\"It shouldn't,\" she disputed through gritted teeth and with shame in her eyes. It was an unwarranted shame, but also an undeniable shame. The same shame any fencible soldier would feel while watching another loyal soldier leave a shared relative safety to face an imminent threat that they'd both been trained to fight and both had sworn to fight.\n\n\"Nonetheless, it does.\" There was nothing comforting to be said about it and no time to say it, so I didn't stand and argue. \n\nLeaving or not leaving, neither seems right to a soldier with her love at home."
    ],
    "authorname": "LesbianChickLit",
    "tags": [
        "fingering",
        "historical fantasy",
        "knighthood",
        "lesbian",
        "lesbian drama",
        "lesbian oral",
        "lesbian romance",
        "love",
        "love story",
        "romantic"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/the-arete-princess-consort-ch-04"
}
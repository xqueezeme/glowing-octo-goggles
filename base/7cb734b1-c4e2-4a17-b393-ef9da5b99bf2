{
    "title": "Understanding Sonia",
    "pages": [
        "All of my writing is fiction. For this story, I've borrowed some things from the life of a friend who suffered from Borderline Personality Disorder. I'm not approaching it as a medical expert or a clinician, but rather as a historian based on what I saw and heard. I hope you enjoy it and, please take the time to rate it and comment. It helps greatly with my writing.\n\n***\n\nI didn't want to go to class.\n\nSo, what's new, right?\n\nI mean, I'm a junior now and nipping away at cum laude, but going to class often meant waking up before nine o'clock. That was the case today. I was working to keep my eyes open, only partially successfully, and my roommate was trying to help.\n\n\"It's the first day of classes, Arch. I told you that you needed to get a summer job. Three months away from this has kinda spoiled you.\"\n\nI heard through \"Three months,\" and then things got a little fuzzy.\n\n\"Archie, wake up,\" Willie said a little louder than usual. \"When's your first class?\"\n\nManaging to get one eye open, I said, \"Not until nine.\"\n\n\"Well, Mr. Not Until Nine, it's now eighteen before nine.\"\n\nThat woke me up quickly because, despite my distaste for early rising, my penchant for punctuality was a controlling influence in my life, and I was out the door almost before Willy finished saying \"nine.\"\n\nIt was a five-minute drive to the university, but lot number one was full, and parking in lot number two meant I'd be doing some running. Checking my watch as I ran told me I was just going to make it. I rounded the corner of Benton Hall when it happened.\n\nI stepped on something, heard a squeal, and watched her sprawl to the ground, books and papers flying.\n\n\"Are you okay?\" I grabbed a hand to help her stand. \"I'm so, so sorry.\"\n\n\"I'm all right, and it's my fault,\" she said, looking at me with the most beautiful blue eyes I'd ever seen. \"I was bloody stupid to wear flip-flops to school just for this reason.\"\n\nHer glorious English accent had my heart beating a little faster. And I was nearly eye-to-eye with those amazing blue eyes of hers--she had to be six feet tall. We both dropped to hands and knees, gathering up books and papers--and I was being assaulted by the enticing aroma of her perfume.\n\n\"I'll do that,\" she said. \"You need to get to your class.\"\n\n\"I caused this, and I'll stay till you have everything together.\"\n\nShe laughed, a delightful sound.\n\n\"It will take a lifetime for me to have everything together.\"\n\nIf she was inviting me to spend a lifetime with her, I was willing to give it a try. Silly boy.\n\n\"I have an English class, and I've heard the professor is usually late,\" she added.\n\n\"Seems you should have an American class, and I should have the English class, which I do, too. Can I help you carry some books or something?\"\n\n\"Thank you, but I have them now. Let's hurry to class.\"\n\nI held the door and followed her to the lecture hall, careful to avoid the flip-flops. We slipped through the door and noted that the lectern was unoccupied. I watched her eyes search the room. Finally spotting something or someone, she headed across the back of the lecture hall, me right behind as I planned to sit beside her if possible. Exhaling, she sat down, and I grabbed the empty seat beside her.\n\nBut she wasn't paying me a bit of attention, talking instead to the guy sitting on the other side. I could hear a little bit of the conversation--she was explaining why she was late to whoever he was. I debated about moving to another seat when he leaned forward and looked at me. At least he was smiling.\n\n\"I hear you knocked Sonia on her butt,\" he said with a laugh.\n\n\"Peter!\" she said, cheeks reddening. \"Don't be so cheeky.\"\n\n\"I'm so sorry. I was late and not paying attention, and...\"\n\n\"It was my flip-flops, Peter, not...\"\n\n\"Archie,\" I said, filling the void.\n\n\"...not Archie's fault.\"\n\nThe pink cheeks only seemed to enhance the blue eyes...and the blonde hair...and the devastating figure I'd just noticed while walking along behind her...and beside her. I was hoping that Sonia was about to introduce me to her brother, or cousin, or old family friend.\n\n\"I'm sorry, Archie. This is my boyfriend, Peter Trotter.\"\n\nMy whole world shriveled when I heard those six words. I extended my hand, though.\n\n\"Archer Doyle,\" I said, leaning across Sonia to shake hands with Peter, inhaling the scent of her perfume once again. Thank heaven the professor had arrived, and the lecture began.\n\nIt was quickly obvious that this English class could easily endanger my cum laude since it was nearly impossible to concentrate with Sonia so close. And even if she wasn't close, I knew I wouldn't be able to keep my eyes from searching her out. Twice she leaned toward me to whisper a funny remark about the lecture, the English-y sounds coupled with her warm breath tormenting me no end.\n\nI adjusted my position so that I couldn't see Peter, which, in my fantasy, meant that he wasn't there. I did notice a scraped place on the wrist closest to me and pointed to it. She leaned close again and whispered.\n\n\"Pfft,\" she said. \"I get lots more than that playing football or soccer.\"\n\nThe puff of warm breath that hit my ear made me close my eyes. This was ridiculous. She had a boyfriend sitting right next to her, and here I was, being tormented by every little thing she did. I told myself that boyfriends come, and then they go, and they weren't engaged or anything yet, so I kept my hopes alive, no matter how futile it seemed at the moment.\n\nClass ended, and we stood to leave; both Sonia and Peter off to their ten o'clock classes. Sonia took hold of my arm.\n\n\"Don't feel badly about what happened,\" she said. \"Because of it, I've made a new friend, so it wasn't bad at all.\"\n\nFortunately, I was free till eleven, so I could get a donut and cup of coffee and attempt to cool my jets a tiny bit--maybe a whole lot. I stopped at the bookstore on the way and bought a notebook and a pen since I'd run out of the house without grabbing the ones I already had.\n\nI munched, and sipped, and did a lot of thinking--actually arguing with myself--about Sonia. I'd had a girlfriend my freshman year and one my sophomore year and was looking forward to a junior year girl as well. I'd found the perfect one on the first day of classes, but there was an impediment that was going to make it difficult to have Sonia be that girl. Unfortunately, there wasn't much I could do about it either.\n\nI moped through the rest of my classes, keeping an eye out for Sonia, but with around fifty thousand students milling about on over fifteen thousand acres, I knew it wasn't likely to happen. Tomorrow's English class was probably my best hope.\n\nWillie, my roommate, was amazed when I was up and dressed early the next morning. I told him that I just wanted to get to class on time. Any discussion of Sonia would have to wait for...well, more progress, I guess, if more progress was possible.\n\nI was early and leaned against a wall, watching one of the doors to the lecture hall for Sonia's appearance. When it didn't happen, I stepped inside the hall and spotted her sitting by herself, with vacant seats on both sides of her.\n\n\"Mind if I sit with you?\" I asked.\n\n\"Oh, please do,\" she replied enthusiastically. \"I was hoping you'd be here so we could sit together and giggle about the lecture.\"\n\nBe still my heart.\n\n\"Is Peter late today?\"\n\n\"He's not taking this course. He was just here yesterday to keep me company. But you're here now,\" she added with a big smile, her teeth as flawless as the rest of her. She was nibbling a cookie and sipping a cup of coffee when the cookie suddenly crumbled and flew out of her hand.\n\n\"Oh, I'm sorry,\" she said. \"My biscuit has soiled your trousers, I'm afraid.\"\n\nI brushed the crumbs away and smiled. \"All good,\" I assured her.\n\nSo, I would have her all to myself for one hour each day. Not perfect, but better than it might be. Just the occasional whiff of her perfume was enough to keep me enthralled and oblivious to the lecture taking place. Occasionally Sonia would chuckle, then reach across and write something in my notebook.\n\n\"That's important, and you seemed to be daydreaming.\" she'd whisper, which immediately restored my attention but restored it to her and not the lecture. She even carefully lettered S-o-n-i-a M-a-r-t-e-l-l at the top of one of the pages. She was either flirting with me or just being very friendly. I prayed it was the former. I needed to find out more about Peter Trotter but didn't know how that might happen. Sonia offered a simple solution.\n\n\"Do you do anything special for lunch?\" she whispered near the end of the class.\n\nIf I'd been invited for lunch at the White House, I believe I'd have canceled in anticipation of what Sonia might ask next.\n\nTrying to be as cool as possible, I shrugged. \"Nothing special,\" I said. \"Why?\"\n\n\"Peter has a work-study thing he's doing this semester, so he's going to do it at eleven o'clock. Maybe we could get together for lunch.\"\n\nI tried to get a look at her face, but she had already turned back toward the lecturer, and I couldn't get a hint of what might be going through her mind. But it was my turn to whisper to her, my lips just an inch from her ear, which was hiding behind the blonde hair.\n\n\"Sounds good,\" I said as casually as possible. \"Where?\"\n\nWhen she turned her head before I had moved, we were nose to nose, just inches apart. She chuckled and moved her head.\n\n\"Student Union or Wendy's?\" she suggested.\n\n\"Which is closest to you?\"\n\n\"Wendy's.\"\n\n\"Noon, then?\" I asked as the bell rang.\n\n\"See you then.\" Another smile and whiff of perfume, and we parted.\n\nThings like this never went my way, as this seemed to be doing. I wondered what might happen to spoil it.\n\n***\n\nI was waiting outside Wendy's when I spotted Sonia about a block away, seemingly not aware of the stares she was drawing. She spotted me and smiled, picking up her pace.\n\n\"Hey,\" she said.\n\n\"That doesn't sound very English.\"\n\nShe laughed. \"I've managed a few things since I arrived.\"\n\nWe went inside, ordered, picked up our food, and found a vacant table. I felt like a prince just sitting at the table with Sonia.\n\n\"What kind of a work-study program is Peter doing?\"\n\nSonia took a bite of her Apple Pecan salad. \"Something to do with banking, I think. He's just getting started, so he doesn't know much about it yet.\" Another delicate nibble of salad.\n\n\"You known him a long time?\" I avoided looking at her as I asked that.\n\n\"Well,\" she began, carefully crunching a pecan, \"I said he was my boyfriend, but we've had only two dates, and I've known him about two weeks.\" She rolled her eyes up from the salad, licking her lips to clear a piece of lettuce.\n\nI wondered if she was innocently very sensual or was very aware of what she was doing. Either way, the effect I was experiencing was the same. Still, the two were nearly opposites and made me wonder.\n\n\"What's your major?\" I was venturing into more familiar territory now.\n\n\"Would you believe mechanical engineering?\" she asked as I attempted to interpret her grin.\n\n\"Um, kind of a stretch, I think.\" I raised my eyebrows.\n\n\"Didn't think you'd buy that. I'm studying English literature.\"\n\n\"Wait, you came to the US to study English literature?\"\n\n\"Not quite. I came to the US to be with my sister...and then decided to study English lit.\"\n\n\"Back to England when you graduate?\"\n\nShe sighed and took another bite of salad before answering.\n\n\"That's a possibility, but there are lots of others as well,\" she said, avoiding my eyes.\n\nI was sure that Peter was one of those possibilities, and I could only dream and hope that I might be one as well once Peter was out of the picture. But that was far off, and, right now, I was sitting here enjoying her company way beyond what I should be. And I was wondering why she avoided looking at me when she said that.\n\n\"Your fries will get cold,\" she said, looking at me once more. \"And see, there's another thing I've gotten used to, calling them fries instead of chips.\"\n\n\"Well done, and I was just thinking,\" I said, stuffing two of them in my mouth.\n\n\"Ah, care to share?\" she said, chuckling.\n\n\"Talking about what you might be doing just had me thinking about what I might be doing too. Lots of possibilities, I guess.\"\n\n\"I never asked about your major,\" Sonia said, a slightly guilty look on her face.\n\nI had to laugh because of what she'd said just a few minutes ago.\n\n\"Mechanical Engineering.\"\n\n\"Rubbish,\" she said, and it was her turn to laugh, those blue eyes sparkling. Seeing the look on my face, she continued. \"I'd never have guessed,\" she said. \"You don't seem like an engineer.\" As she finished, her cheeks began to turn pink.\n\nIt wasn't like I hadn't heard that or something similar in the past, and I accepted it as a compliment. But the way she looked at me and the tone of her voice had my blood heating dramatically. This all seemed to be going the way I hoped it would, even as I wasn't sure that was the way it should go.\n\nTrying to recover, she asked, \"What are you doing in that English class, then?\"\n\n\"Working to not be like an engineer,\" I said. \"How am I doing?\"\n\n\"You're cruel,\" she said, giggling, \"but I deserve it and need to make it up to you.\" One of those gorgeous blue eyes winked at me.\n\nWhere to go from here? It seemed she was inviting me to follow the path I was yearning to follow, but, like it or not, I could see an obstacle in that path, even if it appeared it might not be there. Of course, there was always the possibility that she was simply a mischievous tease, happy to torment me relentlessly. I hoped not.\n\n\"Do I get to make suggestions?\" Perhaps I could tease a little as well.\n\n\"That could be a little dangerous, couldn't it? Maybe I should make the suggestions.\" Another big grin from Sonia.\n\nBefore I could answer, her cell phone rang, and she fumbled in her big bag to find it. When she finally answered, she mouthed, \"My sister,\" and I looked away to give her some privacy. The conversation was short, and when she turned to me, she was smiling.\n\n\"Here's my suggestion,\" she began, and I was immediately alert. \"That was my sister on the phone, and she's on her way. Why don't you stay and meet her?\"\n\nI didn't have a class, so of course, I'd stay, not to meet sis, but just to be with Sonia. Maybe I'd see what I could discover.\n\n\"What's Peter's major?\"\n\nSonia surprised me with a half-hearted shrug.\n\n\"He's working on a master's in business--accounting.\"\n\nI knew that accountants could be in the same category as engineers on the \"most boring people\" list, perhaps explaining her shrug.\n\n\"So, he's a little older, then.\"\n\n\"Four years. He's the same age as Martina, my sister, who is coming through the door right now.\"\n\nMartina wasn't quite Sonia, but she was a fine-looking young lady. Blonde like her sister but several inches shorter, her eyes a different shade of blue than Sonia's, she was, nevertheless, beautiful.\n\nMartina smiled at me. \"Is this Peter?\"\n\nSonia snorted. \"No, no, this is Archie,\" she said, laughing, and took hold of my arm.\n\nI'm sure the smile that came onto my face was as wide as any that had previously been there. When I glanced at her, those blue eyes were looking right at me. Then, another surprise.\n\n\"I need to introduce you to Peter,\" she said to Martina. \"He's almost exactly your age.\"\n\n\"I'm game for that, but I have some bad news.\"\n\n\"Ugh. What's that?\"\n\n\"Mom called--\"\n\n\"--that's bad news in itself,\" Sonia interrupted, and the expression on her face changed drastically.\n\nIt was my turn to wonder.\n\n\"I know, but grampy Paul is sick...very sick. Mama thinks we should come home. She's booked tickets for us for tomorrow night.\"\n\n\"Just run home, the hell with school,\" Sonia grumbled.\n\n\"It's grampy Paul, and you know how much he's meant to us. When you ran away that time, where did you go?\"\n\n\"I didn't really run away; I just had to get away, and Grampy's was the only place to go.\"\n\nI felt like I was intruding on a family drama, but Sonia had a near death-grip on my arm, so I decided, based on the way she was holding me, that I needed to learn more about this fascinating blonde.\n\nMartina joined us, and the two of them talked more about what was happening, as I learned, in England. Sonia had released my arm when we sat down, but her hand was interlocked with mine under the table. I was beginning to forget about Peter.\n\nMartina sighed. \"Were you serious about introducing me to this Peter person?\"\n\n\"If you're interested, I sure can.\" Sonia looked directly at me. \"He and I just didn't hit it off...or maybe it was just me.\" My hand received a very pleasant squeeze.\n\nThen, one more time, Sonia's breath surrounded my ear. \"Would you think I was too brash,\" she whispered, \"if I asked you to take me out tonight before I go to England?\"\n\n\"No, I wouldn't, and yes, I'd love to.\"\n\n\"No whispering,\" Martina teased, \"but knowing you, I can guess what you said.\"\n\n\"Don't you have a class?\" Sonia was looking out for me.\n\n\"I do, but that's okay,\" I said, perfectly willing to cut a class in this situation.\n\n\"It's the second day of school; get to your class,\" Sonia said, giving me a mock severe look. \"Wait. Give me your cell number, and I'll ring you.\"\n\nShe wrote the number on her notebook.\n\n\"Now, get to class.\"\n\n\"Yes, ma'am.\" I got another squeeze and left the restaurant reluctantly. However, I was elated at what lay ahead for the rest of my day.\n\n***\n\nAt ten till four, my phone vibrated. Thermo class was nearly over, so I texted Sophia that I'd call after class. It was only five minutes but seemed much longer. Finally, outside, I called.\n\n\"Hi,\" she answered, and that pretty face was looking back at me from the phone.\n\n\"Hey. Could hardly wait to talk with you.\"\n\n\"I'm glad you didn't decide I was just too weird and would ignore my call.\"\n\nI laughed and wondered what kind of idiot would do that.\n\n\"No way. I want to find out everything that makes Sonia, Sonia.\"\n\n\"You might learn more than you want to know.\"\n\n\"I'll take my chances. So, where are we going on our first date?\"\n\nSonia laughed. \"I did the hard part. It's up to you to fill in the details.\"\n\nAs long as I was with Sonia, the details didn't matter. But before I could answer, she put some restrictions on the evening.\n\n\"Please don't spend lots of money on me. Let's do something simple, okay.\"\n\nI was smiling at my phone and at her. I'd met Sonia just yesterday, but it seemed we'd been good friends for much longer. I was thinking, though.\n\n\"It's still warm,\" I said.\n\n\"I beg your pardon. I'm from England, and it's hot.\" Her emphasis on the last word made it a very English-sounding, \"hawt.\"\n\nI chuckled. \"How about a picnic?\"\n\n\"You mean just go to a park together?\"\n\n\"Sure, and I'll have snacks.\"\n\nThere was a moment of silence. \"I'd like that,\" she said quietly.\n\n\"May I ask a personal question?\"\n\n\"Okay.\"\n\n\"How old are you?\"\n\n\"I'm twenty-one, and do I know why you asked that?\"\n\n\"Probably.\"\n\nSonia gave me her address, we waved to each other, and I was ready to head to the grocery store, unsure of what to get.\n\n***\n\nAll the way to the store, I debated about what to take to the picnic and my first date with Sonia. Once inside, I spotted a lady stocking shelves and wondered if she could help. I explained my situation, and she seemed eager to assist, telling me to pick the wine I wanted (I had decided to go with the wine) while she gathered the rest of the things I'd need.\n\nI paced through the wine isles, trying to decide which wine would be appropriate. A light went on in my head, and I grabbed my phone to text.\n\nred or white? A twenty second delay.\n\neither lol\n\nSticking to Sonia's instructions, I picked a bottle of inexpensive merlot, careful to get one with a screw top. When I found my shopper-helper, she had a basket full of picnic goodies. I shuffled through it to see what she'd picked.",
        "\"Special picnic?\" she asked with a smile.\n\n\"Yeah, first date, and thanks so much for your help.\"\n\n\"I enjoyed it, and I hope all goes well with your picnic.\"\n\n\"Thanks. Me too.\"\n\nI paid, grabbed the plastic bags, and headed to my place for a blanket and a few bottles of water for backup. Then, it was on to pick up the beautiful blonde.\n\nShe was sitting on the steps waiting for me and climbed into my car, glancing into the back seat at the plastic bags. Then those blue eyes held mine, accompanied by a serious look.\n\n\"I'm anxious,\" she said, biting her lower lip. \"This is, I think, my second picnic.\"\n\nAs what she said registered, I think my sense of amazement showed on my face. It seemed incredible that someone our age had only been on one picnic. I wasn't that familiar with English culture, but I was relatively sure they picnicked at least moderately.\n\n\"I'm not what you think I am,\" she said quietly.\n\n\"Sonia, I've known you for two days, and tomorrow you leave for who knows how long. Are you trying to scare me away?\" I chuckled.\n\n\"No. At least, I don't think so. I quite fancy you already.\" She was silent a moment. \"I'm sure of it,\" she finally said.\n\nShe pulled my hand off the steering wheel and squeezed it tightly between hers. Then she rubbed the back of my hand against her cheek.\n\n\"I wish I weren't going home...well, it's no longer my home, really. I wish I could stay here and get to know you and...\" She sighed. \"...and you could get some understanding of me as well.\"\n\nShe was certainly creating the impression that understanding her was not going to be a simple process. If she was trying to discourage me, it wasn't going to work. She was here, anxious to be with me, and that told me she wasn't trying to discourage me. Why then was she talking this way? Was she challenging me? If so, I was ready.\n\nWe were quickly at the park and found a quiet, grassy spot for the blanket. Even before we emptied the bags, I asked the question that had needed asking since the time it had happened.\n\n\"I'm curious as to why--\"\n\n\"--I asked you for this date? Something clicked after you stepped on my flip-flop and helped me gather up my things. I was excited when you followed me into the class and sat beside me. I wished Peter wasn't there so, well, you know.\"\n\n\"I'm glad,\" I answered and received a gorgeous smile.\n\nWe paused the serious conversation in order to snack on our picnic supplies and share a glass of wine.\n\n\"So,\" I said finally, \"this Grampy Paul must be very special to you since you're interrupting your classes to go to England.\"\n\n\"Oh my, yes. He's...he's...\"\n\nI received a look that tore at my heart.\n\n\"Forget that I said that, Sonia. I can see it's too personal.\"\n\n\"It is personal, but, from what you've said, I think you're anxious to learn about me, and I'm just as anxious and frightened to share with you.\"\n\nI couldn't imagine what could be so frightening, but she hadn't shared yet, and what she was about to share appeared to be very troubling. It seemed that she sincerely wanted me to know her secrets.\n\n\"When I was younger and would lock myself in my room, crying my eyes out, sometimes for days, Grampy Paul was the one who sat on the floor by the door, talking to me and just being there. Sometimes he would slide notes under the door. While everyone else was scolding and lamenting my bad behavior, he was the one who sympathized; and empathized, I guess. I didn't appreciate it till I was older. I just wanted to be alone, but he knew I needed someone to be there for me and with me.\n\n\"I should probably go back just a little. My father is a college professor, very organized, and very exacting in his requirements for my mother, my sister, and myself. My mother and Martina had learned to deal with it, but I never did. I was stubborn, obstinate, reckless in the things I did, and very unapologetic about all of it. My father was quite cutting when he tried to correct me, and it hurt. That's why I spent so much time in my early years in my room crying. Whenever I felt like I had failed at something, I ran to the only safe place--my room.\"\n\nI thought she might be ready to cry at this moment, her eyes sparkling in the bright light of the early evening. She seemed so, well, vulnerable, I guess, and I wanted to do something, but I wasn't sure what needed to be done. Still, I had to try. I held my hand out to her.\n\n\"I've known you two days, Sonia, but it's feeling like more than that with every passing minute. Come here and let me hold you while you talk.\n\n\"Archie, I don't know.\"\n\nI watched her hesitate, not sure of what to do, but I felt that something within her was telling her to do what I'd asked, and something else was holding her back. So, if the mountain won't come to Muhammad, then Muhammad will go to the mountain. I slid across the blanket till I was behind Sonia, spread my legs, and pulled her against my chest, the floral aroma from her hair nearly mesmerizing me. She didn't resist at all, resting, what seemed to be, very comfortably against me.\n\n\"I could sit like this and hold you for as long as you'd allow it. And if you want to talk more, I'm ready when you are.\" I gave her a gentle squeeze and felt her take a deep breath.\n\n\"I wanted Mother to help me, to support me and stand up to Dad, to tell him that I was different and wouldn't fit into the mold he'd created for me. But she wouldn't do it. I think she was afraid that it would cause a split, which was out of the question since their marriage was forever. I never forgave her for that. Is that wrong?\" She turned her head, so she was looking at me, those blue eyes waiting for an answer.\n\n\"It would be easy for me to say that was wrong of you,\" I began and felt her stiffen. \"But it would be wrong for me to say that too.\" She relaxed.\n\n\"I'm sorry,\" she said. \"It's not fair for me to ask that since you're normal and I'm not.\"\n\nI gave her a hard squeeze.\n\n\"Archie,\" she grunted.\n\n\"Every time you say something silly like that, I'll give you another hard squeeze.\"\n\n\"Ugh. Are you sure you want to hang around a mess like me?\"\n\n\"Sonia, you're beautiful, and I haven't seen the mess yet.\"\n\n\"I look in the mirror,\" she said, \"but the mess is between my ears.\"\n\nI chuckled. \"What's your GPA?\"\n\n\"That doesn't mean anything.\"\n\n\"Don't argue,\" I teased, \"just answer the question.\"\n\nI sensed a gentle \"humph,\" as she hesitated to answer my question, so I gave her another hard squeeze.\n\n\"Archie,\" she grunted again. \"It's a four-point, whatever that's worth,\" I couldn't believe that there was an almost disgusted tone to her voice as she said that.\n\n\"Um, Sonia, I would enjoy having a GPA like that.\"\n\n\"I understand that, Archie, I really do. But that part is easy. In a few years, I'll have a Ph.D. That's easy. It's the rest of life that's hard.\"\n\nI was pondering what she had said and what she hadn't said, the aroma of her shampoo filling my nose.\n\n\"Did you just kiss my head,\" she suddenly asked.\n\nHer question startled me. If she thought I had, I probably had. But how should I answer?\n\n\"Sonia, I may have, and if it offended you, I'm terribly sorry. But, I was thinking about what you were saying, and I think that was my natural response.\"\n\n\"It's a nice response,\" she said, squeezing my arm. \"And just so you know, both Martina and I are virgins.\" We'd gone quickly from a kiss on her head to virginity.\n\n\"Does that change anything?\" I asked, surprised by what she had just said.\n\nShe turned so she was facing me directly.\n\n\"Do you know that when you look at me with those blue eyes, I'm helpless?\" The smile that appeared only weakened me further.\n\n\"I'm glad I wore the flip-flops,\" she said, \"but you may be in over your head.\"\n\n\"If it seems like I'm drowning, I'll count on you to save me.\"\n\n\"You give me too much credit,\" she replied, \"but there's a reason that something clicked within me when I met you.\"\n\n\"I'm glad I decided to sit beside you, even though I was afraid you'd have been happier if I'd gone somewhere else.\" I chuckled. \"When you whispered in my ear, well...\"\n\n\"I'm going to England tomorrow to be with Grampy Paul, and I'll ignore my mother and father as much as I can.\" She sighed and rested her head against my chest. \"He's going to die, Archie, and that will tear me apart. When he's gone and the lectures from my father about purity, chastity, and perfection are over, I'll be coming home. It won't be pretty.\"\n\n\"Call and text all you can. I'll be happy to pay the extra charges.\"\n\n\"You're sweet, Archie, but my parents are wealthy. They own a huge house in London, a vacation house in Scotland, and raise horses and have a riding stable there too. Despite how much I, well, dislike them most of the time, I have more money than I really need. Money is easy. But thank you so much.\"\n\n\"I just want to keep talking with you while you're gone, particularly since you have no idea how long it will be.\"\n\n\"I will,\" she assured me. \"And keep good notes in the English class.\"\n\nI let go of her, and we finished the food and had another glass of wine. We packed up and headed back to her place, but the last thing I wanted to do was let go of her. I knew she could see the longing look on my face when I took her to her door.\n\nShe smiled. \"I often don't kiss on the first date, but under these circumstances, I want that more than anything right now.\" Her arms went around my neck, and I received the most wonderful and satisfying kiss I'd ever gotten. When we separated, she stayed inches from my face. \"You've known me for two days,\" she said, her eyes searching my face. And you've seen several 'Sonias' in those two days. The Sonia you'll see when I get back from England won't be like any you've seen so far, and...\"\n\nI interrupted her. \"Shush,\" I cautioned. \"That's the last thing you need to worry about. I'll be right here; in fact, I'll be at the airport to pick you up, and Martina too, because I'm anxious to get that second kiss.\"\n\nShe laughed. \"Martina will take us to the airport, but if you'd like to pick me up, I'd love that. Just beware.\" She leaned toward me, and I got kiss number two way before I'd expected it.\n\nI gave her a final hug, and she headed inside. I wondered what our next meeting might be like.\n\n***\n\nTexting began when she got to the airport and continued until her plane left. For the nine days she was there, we talked once each day and texted the rest of the time. I knew that she was doing her best to stay upbeat when we talked, but I could sense a daily change as her Grampy Paul's condition deteriorated. Plus, it wasn't like he might recover, so it was just a matter of watching him decline and finally die.\n\nOn the fifth day that she was away, I received a second call from Sonia, surprised to find it was Martina instead.\n\n\"I called you on Sonia's phone, so I could be sure you'd answer.\"\n\n\"Is everything okay?\" I was sure she could hear the desperation in my voice.\n\n\"As good as it can be. There's nothing unusual happening. I wanted to call you with a heads-up about my sister.\"\n\n\"Should I be worried about that?\"\n\n\"We talked a good bit on the plane,\" she said, not really answering my question. \"She feels a very special connection with you, after only two days. I've never seen her like this before.\"\n\n\"Is that a warning? If so, it's not needed since she's struck a chord with me too. She's a treasure.\"\n\n\"Not really a warning at all, but the Sonia that will be coming back will be different than the one who left, at least temporarily.\"\n\n\"She told me that too.\"\n\n\"It's only going to be a couple of days, and we'll get away as quickly as we can. Mum and Dad have been relentless, thinking they're being helpful and constructive but making us miserable. Sonia said you'd be picking her up at the airport. I'm glad since I think you can be very good for her. But be careful with her, okay.\"\n\n\"Wow. Martina, I don't know what I'm doing or what I'm getting into, but I'm ready for whatever. This is day seven or eight. I can't wait to get her back.\"\n\n\"It won't be long. We'll keep in touch.\"\n\nI spent hours thinking, anxious to be with Sonia, but also sure there were things I didn't know and needed to understand. I wished she would move in with me, but the way she'd told me she was still a virgin meant that probably wouldn't happen. Plus, moving in together after just a few days was a little unrealistic, even though these were unique circumstances.\n\nIt was difficult to concentrate on schoolwork, but I needed to do that to keep from becoming a nervous wreck. I took careful notes in the English class, things Martina had said periodically breaking in on the lecture. It was when I was leaving the class that my cell phone vibrated. It was Sonia.\n\n\"He's gone, Archie. I wish you were here, but you aren't.\" The face I was seeing had an agonized look but no tears.\n\n\"I'd give almost anything to be there right now. I don't even know the right questions to ask.\"\n\n\"Just seeing you there and knowing how you feel is doing more for me than you know. Just two more days, and we'll be coming home. That little flat is my home now, not this God-awful place with the constant haranguing and criticizing. Don't criticize me, okay, Archie?\"\n\nI forced a smile. \"No worries, Sonia. That won't happen. You'll have to be satisfied with compliments from me.\"\n\nHer face changed like she was attempting a smile, but the tragedy that was enveloping her wouldn't quite permit it. It wrenched at my heart, though.\n\n\"You'll be there to pick me up?\"\n\n\"Yes, just text the flight number.\"\n\n\"I will, or Martina will. Everything about me is jumbled right now. I need to go and sit with Grampy Paul for a while. Will text and call you tomorrow. Be there for me, okay?\"\n\n\"I will, Sonia. Count on it.\"\n\nWe texted, and she called the next day and the following day from the airport, and I got the flight number.\n\nI was at the airport two hours before she was scheduled to land as I was sure that something would happen that would delay me or keep me from being there altogether. I couldn't imagine how that might affect her, but I knew it would devastate me. The announcement came that her plane was landing, and I went to the baggage area to meet her.\n\nI'm here, are you?\" came to my phone.\n\nAt the baggage area, and hurry I replied.\n\nMy heart was pounding so hard I was certain that people standing close to me had to be able to hear it. Plus, it seemed that I was having trouble breathing. I stood at the bottom of the escalator from the arriving flight's area until I finally saw both her and Martina heading down toward me. When Sonia saw me, she smiled, a huge relief for me.\n\nShe stepped off the moving stairway and walked directly to me, not saying a thing as she laid her head against my chest and put her arms around my waist. Following her lead, I hugged her gently. Then those blue eyes looked up at me.\n\n\"Despite all that's happened, you can't imagine the happiness that filled my heart when I saw you waiting for me. It's absolutely senseless, but I was terrified you wouldn't be here.\"\n\nI hugged her again, doubly aware of the challenge facing me for the next few days and possibly much longer. Hopefully, much longer. I looked past Sonia and saw Martina, both hands raised with fingers crossed. I was sure she'd be a help and resource for the future.\n\nWe gathered Sonia's luggage and said goodbye to Martina, who gave me a big hug. We made our way to the parking garage, Sonia repeatedly thanking me for picking her up. In the car, she held onto my hand, and I don't think her eyes left my face the entire forty-five-minute drive. We carried the luggage inside, and I turned to her.\n\n\"You can't imagine how happy I am to see you again,\" I said, my voice nearly cracking. She took two steps, threw her arms around my neck, and immediately sobs were wracking her body. It continued for long minutes as she gasped for breath. It was something I'd never seen or experienced, and my heart ached for her, ached so much that my tears joined hers.\n\n\"I didn't cry there,\" she finally said, each word interrupted by a sharp sob. \"I wouldn't let them see that. I'm never going back.\" The sobs began again, and I helped her to the couch, where I held her against my chest, the tears leaving dark spots on my shirt. With a few gasping breaths, the tears at last stopped.\n\n\"Should you be in class?\" she asked, the first hint of a grin shaping her face.\n\n\"First, I would be here no matter what classes I had, and you'd better know that,\" I said with a chuckle, \" but today is Saturday, so no, I shouldn't be in class.\"\n\n\"I'm clueless,\" she said, and the simple chuckle that followed was priceless.\n\nI was still holding her against my chest and wasn't going to release her until she asked. Looking at that tear-stained face, the blue eyes, and those soft and inviting lips, I knew what would happen. Without a word, I put my hand behind her head and brought it toward mine. She wasn't resisting, and when our lips touched, she pressed hers against mine. It was a marvelous kiss, just lips but still filled with a warmth and passion I'd never experienced before. Two more quick and tender kisses followed.\n\n\"How many kisses is that?\"\n\n\"I'm not counting, just enjoying,\" I answered.\n\n\"This is our third day together, and I'm sure I've kissed you more than I've kissed anyone else.\"\n\nI wasn't going to say what I was thinking, that it seemed impossible that a gorgeous twenty-one-year-old could have done such a small amount of kissing. But, as long as she was willing to continue kissing me, I wouldn't complain.\n\nThe smile was disappearing from her face, and I wondered what might be coming next. She was biting her lower lip.\n\n\"I want and need to tell you things about the time I was away, but if we stay here...\" She paused and took a deep breath. \"But if I stay here, it will be more tears now that I'm with you. If we go out, like to our favorite Wendy's, something I don't understand will keep that from happening, and I can talk to you, or with you, as I'm sure you'll have questions.\n\n\"Wow. Okay, let's go to Wendy's then, if you're sure.\"\n\n\"I am, and it's my treat.\"\n\nI chuckled. \"Not needed,\" I countered.\n\n\"It's not much, but it's what I can do for you.\"\n\n\"Sonia...\" The look I was getting said, \"shut up,\" so I did.\n\nThe drive to Wendy's only took about three minutes, and she asked me about the English class and if I had good notes for her to review. I wasn't a four-pointer, but I took good notes, and I was sure they'd be very useful for her. I admitted to her that I'd had trouble concentrating on my other classes while she was away, but now things would be back to \"normal.\"\n\nAt Wendy's, we ordered, she paid, we got our food and found a table, away from everyone as best we could.\n\n\"It was horrible,\" she said, finally. \"Dad was Dad, which made it doubly bad. You need to realize that I'm not me; I'm what my dad has structured me to be. I've never been allowed to be who I really am. He wouldn't permit it. I had to be what he imagined and wanted me to be. But, inside, I wasn't that person, so I was constantly failing to be what he wanted. I couldn't handle failure, and that's when I retreated to my room, sometimes for days at a time. Grampy Paul would sit by my door and tell me I hadn't failed, but even if I had, I could learn from it.\n\n\"I would climb out my window and sit on the roof...and cry, and wonder why I didn't just jump off and end the torment. It was Grampy Paul's voice that kept me tied to this world. And now that voice is gone.\"\n\nThe pleading look on her face told me I had to be the best substitute for Grampy Paul that I could be. I wanted to be that and more. But could I?\n\n\"I told you about football, um, soccer for you. I played it in high school. I hold the school record for the mile run. And I played tennis some too. I paint and have three of my creations in galleries downtown. I was Julie Andrews when our school did The Sound of Music, and I danced in The Nutcracker at Christmas last year.\" When you're at my flat again, I'll play the piano for you.\"",
        "\"Sonia, I had no idea.\"\n\n\"But here's the clincher, Archie. Do you know what Borderline Personality Disorder is?\"\n\n\"Never heard of it, but is it like bipolar or something.\"\n\n\"Worse, and I would trade everything I have and can do, except you, to be rid of it.\"\n\nI looked at that beautiful face and, even though I didn't understand all of what she'd said, I was beginning to understand a little more.\n\n\"Look it up and read about it,\" she said and closed her eyes. \"If you want to forget about me and go another direction, just say so, and I'll understand. It wouldn't be the first time it's happened.\"\n\n\"Do you want me to go another direction?\"\n\n\"That's not a fair question because you haven't read about it yet.\"\n\n\"It is a fair question, and I want to know the answer.\"\n\nI thought she might be ready to cry again, but she didn't.\n\n\"No, I don't,\" she said quietly.\n\n\"Then I won't, no matter what.\"\n\nShe looked at me, those big blue eyes nearly melting my heart once again.\n\n\"In that case, you have to realize that I do things sometimes that I don't understand. They're totally out of character if there is such a thing. And after I do them, I wish I hadn't, but it's too late then.\"\n\n\"I guess I need to learn, and I'm counting on you to help that happen.\"\n\n\"I just don't want to lose you.\" She was clinging tightly to my hand.\n\nI had some reading to do, but I could tell this \"fear of losing me\" was a big part of what I was about to learn. I was anxious to find out about the rest of it.\n\n\"This is awkward, but let me say it anyway. If I could have my druthers, I'd have you move in with me, not so that I could, well, you know, but just so I could be with you as much as possible and learn about what's going on with you.\" I received a tiny smile.\n\n\"If I were me, that might happen. But I'm not me. I'm what's been installed in me by my father and mother, and that's nearly obliterated the real Sonia. I left England to be with Martina and hopefully recover who I am. So, some things, like being a virgin, are very important to me because it's been drummed into me for as long as I can remember. I don't know how many times I've heard my father say that the \"wedding bed sheets should be stained with blood.' Maybe I should rebel and just...\" She paused, and her cheeks turned very red.\n\n\"I don't think you need to do that,\" I ventured, not sure how to respond to what she'd almost said.\n\nShe seemed to grit her teeth. \"And I won't,\" she said decisively. She finished the last bite of her Apple Pecan salad, and held out her hand. \"Can you stay with me until, well, until it's time for you to leave?\"\n\n\"Sonia, you know I'll do that, or at least you should. And, if you wanted, I would spend the entire night with you.\" Her eyes widened. \"And, I could sleep with you without touching you.\" That would be as difficult as anything I'd ever done, but it was Sonia, and that made it possible.\n\n\"That would be a lot of trust,\" she said quietly. \"You're a very fit man, you know. I'd have to trust myself as well.\"\n\nIt wasn't till later that I found out what being a fit man meant to her.\n\nWe went to her place and talked a lot more. She played the piano and sang for me, apologizing afterward that she did it so poorly. I was totally enthralled by both as she played so easily and sang so beautifully, just another pair of talents from this multi-talented lady.\n\nAt midnight, I suggested I could leave, or I could stay the night. I was slightly surprised that she seemed to be debating about how to answer.\n\n\"Perhaps it's my father speaking,\" she said, \"but it's been far less than two weeks, and, even if, well, nothing happened...\" Her voice trailed off.\n\n\"Okay, but do I get a special sendoff?\"\n\nShe smiled, and our lips met, hers pressing hard against mine until I pulled her lower lips into my mouth and touched it with my tongue, accompanied by a soft moan from Sonia. She pulled away.\n\n\"Archie.\"\n\n\"I'm sorry, I just--\"\n\n\"--Don't apologize for doing something very natural,\" she interrupted. \"It was, well, wonderful. I'll ring you in the morning when I'm up and dressed.\"\n\nI smiled, probably a suggestive smile.\n\n\"Men are so bloody predictable,\" she said and led me to the door.\n\nAnother warm kiss, and I was on my way.\n\n***\n\nI was up until three, reading and trying to digest what I had read. It wasn't easy reading, particularly since I could relate at least a part of it to Sonia. According to what I was reading, there are nine signs and symptoms of Borderline Personality Disorder, and a person needs to have five of them to be considered a victim of the disorder. All of them sounded scary. And I wondered how many of them were a part of Sonia.\n\nMy phone sounded at a little after eight, rousing me from a very sound but troubled sleep. An unpleasant dream of me suffering from BPD and inflicting the symptoms on Sonia had me feeling depressed as I answered the phone. The sound of her voice swept away those thoughts.\n\n\"Hi,\" I answered sleepily.\n\n\"I woke you, didn't I?\"\n\nI chuckled. \"Something had to.\"\n\n\"Do you want to come over?\"\n\n\"I do, Sonia, very much so.\"\n\n\"Oh good,\" she said, sounding almost relieved.\n\nI bit my lip, recognizing the brief exchange and a couple of earlier ones as well.\n\n\"Give me twenty minutes,\"\n\n\"I'll be here.\"\n\nWe had a great day together, and I told her about what I had read. She asked about my reaction, and I explained that it had just made me want to be with her and understand her even more. I could tell she had some doubts, probably fueled by her experiences with other men. I offered to spend the night again, but she was reluctant, and I guessed she might be more concerned about her reaction than mine.\n\nWe met at school on Monday, had lunch together, and realized that we needed to study If we wanted to stay in school. When we were together, even though we vowed to only study, it just didn't work. We limited ourselves to an hour an evening, which always turned into an hour and a half. Saturday was a day we'd spend together.\n\nIt was nine o'clock when I parked in front of her building and knocked on her door. She let me in and hurried to the kitchen.\n\n\"Fixing breakfast,\" she called over her shoulder, maybe explaining the absence of the kiss I had expected. I began wandering around the apartment, just looking at things. In the eating area, there was a small buffet with little carved figures sitting around on it, rather randomly placed. My symmetrically synced brain forced me to rearrange them in neat groupings and...\n\n\"What are you doing?\" Sonia's voice was very sharp with an accusatory sound.\n\n\"Just rearranging these a little,\" I said, wary of what might be happening.\n\n\"You don't think I'm capable of arranging my own apartment? Do you want to change the furniture too? How about my kitchen cabinets or my closet? They may not suit your taste either.\" Hands on hips, she was an intimidating figure.\n\n\"Sonia, don't be silly; it was just...\"\n\n\"So, now I\"m silly too. What else is wrong with me, Arch? Go ahead, tell me.\"\n\n\"Sonia, there's nothing wrong with you.\"\n\n\"I can't arrange my apartment properly, and I'm silly, and who knows what other faults you might find with me. If I'm so bad, why don't you just leave?\"\n\n\"I don't want to leave; I came here to be with you.\" A part of me knew what was happening, but the rest of me was having trouble accepting it.\n\nSonia turned and ran into her bedroom, slamming the door behind her. I followed quickly and tapped on the door.\n\n\"Sonia, if you won't let me in, at least come out, and we can talk about this.\" Whatever \"this\" was.\n\nNo answer from the closed door.\n\n\"I'll just sit here and wait then.\"\n\n\"You're not Grampy Paul, so go away.\".\n\n\"Sonia.\"\n\n\"Go away.\"\n\nReluctantly I stood and left, the morning not going the way I hoped it would. It was to be the beginning of our weekend together, but it had gone dreadfully wrong. I drove home slowly, determined to do more reading about BPD, and hoping that might console me.\n\nI read, paced, and banged the wall several times, careful not to punch a hole in it, although that's what I felt I'd like to do. I went to McDonald's for lunch, then to the men's gym at school to play a little basketball, trying to drain the excess energy that had been building since I'd left Sonia's.\n\nThe reading told me that this was to be expected. I guess the fact that it was the first time I'd seen it made it more difficult to accept. I wondered what would happen next and how long would it take to happen.\n\nAt a little before six that evening, I got my answer. It was Sonia calling.\n\nI answered and could see a face that had clearly been crying.\n\n\"Hi,\" I said, not sure how to act and hoping she'd help me.\n\n\"Hi. I...I'm sorry. If you decide to...well...stay around, you may need to get used to hearing that.\"\n\n\"At least the staying around is a sure thing, Sonia.\"\n\n\"I mean, I wouldn't blame you at all--\"\n\nI interrupted. \"--no more talk of that. I'm here, and I'm going to stay here, no matter what.\"\n\n\"'No matter what' covers a lot of territory, Arch.\"\n\n\"I suppose it does, but I meant what I said.\"\n\nThere was a pause, and I could see her nibbling her lower lip.\n\n\"I've decided something,\" she said quietly.\n\n\"Oh?\"\n\n\"Would you consider coming back here this evening?\"\n\n\"Will take me ten minutes to get there.\"\n\n\"Bring a pair of pajamas,\" she said, the blue eyes looking right at me from the phone.\n\nMy mind was racing as I processed what she'd said. Did she mean simply that I was going to spend the night, or should I take it literally and bring a pair of pajamas. Was that her way of telling me we wouldn't be sleeping together nude? I decided that was probably it.\n\n\"I actually have a pair, and I hope they still fit,\" I responded.\n\n\"If they don't, you'll have to wear a pair of my sweat pants and shirt.\"\n\nThat certainly solidified the answer.\n\nAs I drove the short distance to her house, something filled my mind that probably had no business there. I remembered things from wedding vows I'd heard at family and friends' ceremonies. \"For better or for worse. In sickness and in health, for richer and for poorer.\" We weren't about to get married, and no one had even mentioned the \"L\" word yet, but all those words seemed to apply if I was going to dedicate myself to Sonia. There were nine things on that list I'd just reviewed, and I knew that at least five of them had to apply to Sonia. How much would the struggle increase if all nine of them applied?\n\nI knocked on her door, pajamas under my arm, and waited.\n\nThe door opened quickly to reveal a very questioning look from the beautiful blonde.\n\n\"May I get a hug?\" She spoke very quietly.\n\n\"You're going to get more than one,\" I said, but only if I can get a kiss.\"\n\nOur lips met, and our arms went around each other, squeezing hard. When I pulled her lower lip into my mouth and caressed it with my tongue, she surprised me; her tongue found its way between my lips, pressing against mine. The sound I heard was unexpected and came from somewhere within me. I pulled my head away before I did something I'd regret.\n\nSonia began squeezing me so hard I had to strain to get a breath. She turned me loose but held me with her eyes.\n\n\"How do you put up with this crazy English woman?\"\n\nI so wanted to use the \"L\" word but was afraid of her reaction. There was plenty of time.\n\n\"I don't have a choice,\" I answered. \"You're the only English woman I know.\"\n\n\"Then stay here with me.\"\n\nSomehow I heard that simple statement in two parts. First, she was asking me again to spend the night with her. But the second was a silent plea to not abandon her. So much more to learn and understand, and I prayed for wisdom and patience.\n\n\"I brought my pajamas,\" I said, answering the first part of her plea.\n\nSonia smiled. \"You're very brave. And I hope something else as well.\"\n\n\"Have you planned a full evening for us?\"\n\n\"Pink Panther,\" she replied.\n\nI knew of the Pink Panther movies--my parents loved them, but I'd never seen one. It would be light and funny and might make things easier for me (and her?) to handle. I hoped so since being with the tall blonde filled my mind with things I was anxious to do.\n\nSonia had chips, dip, soft drinks, and, of course, wine, which we would have to handle extra carefully. As far as I was concerned, this should be as near-perfect an evening as I could imagine. However, I'd already learned that she could be full of surprises.\n\nThe table in front of the couch was soon full of treats, we'd settled comfortably, and the TV was alive with Inspector Jacque Clouseau and his shenanigans. We laughed, nibbled, laughed some more, and Sonia poured two glasses of wine. Now we laughed and sipped and probably relaxed a little since the wine glasses were actually tumblers.\n\nWhen Sonia finished her second glass of wine, she snuggled against me, her head on my chest.\n\n\"This is a funny movie,\" she said, her words the tiniest bit slurred and her hand resting on my thigh--high on my thigh. Of course, this left my head resting against the wonderful aroma of her shampoo, and when she turned her head to look at me, a kiss was inevitable. I was about to nibble on her lower lip when her tongue was dancing with mine, and I was on my back, Sonia on top of me, her lips pressing hard against me, her tongue frantically probing. Suddenly she raised her head.\n\n\"What do you want?\" she asked, catching me totally off guard.\n\n\"Sonia, what--\"\n\nShe interrupted. \"--do you want these?\" She lifted her sweatshirt and displayed two large and perfectly shaped breasts.\n\nDid I want those glorious orbs in my hands, in my mouth, pressed against my chest? But should I have them? The answer to the first question was simple; the answer to the second more difficult.\n\nSonia was struggling against my hold, and before I knew it, her breasts were pressed against my face, her arms around my head, squeezing it against her. They were delicious, but I had to get it stopped.\n\nI pried her arms away from my head and her off me. Her face changed in an instant.\n\n\"See, you don't want to be with me.\" She tried to pull away, but I had her arms and decided it was time.\n\n\"Sonia, stop squirming and listen to me.\" She finally stopped and looked at me warily. \"I'm falling in love with you, and I'd like to be with you every second of every day...for the rest of my life.\" I'd said it, and I meant it. She immediately challenged me.\n\n\"Do you mean that?\" The look on her face was anything but challenging, though.\n\nMy smile formed slowly.\n\n\"You know I do.\" I hoped she did.\n\n\"Arch, you're so different from any bloke I've ever known. I'm still a little fuzzy from the wine, but I'm falling for you too, in love, I mean. It's just, oh God, just hug me.\"\n\nI hugged her hard.\n\n\"You want to know something else?\"\n\n\"What?\" she asked innocently, looking at me.\n\n\"Those are fantastic boobs.\"\n\nHer eyes closed as her cheeks began turning red. She bit her lower lip.\n\n\"Would you fancy seeing them again?\"\n\nIt seemed the wine had her reverting to her English roots, and yes, I fancied seeing them again. But maybe a change of pace was needed.\n\n\"How about we finish the movie, and when we go to bed, a little peek?\"\n\n\"The movie's over. Ready to go to bed.\"\n\n\"Oh,\" I answered, glancing at the blank TV screen. \"Ready then.\"\n\nAs we headed to the bedroom, I had a serious talk with myself. The two breasts I had seen were a little beyond what I had imagined, and I suspected the rest of her might be the same. I had to be able to contain myself. I told myself that if I really loved her, I could and would do it.\n\nThankfully, she changed in the bathroom, and I pulled on my pajamas in the bedroom. When she came to join me, as I had guessed, she had on a pair of short pajama pants, and that was all. It was a little bit more than a peek. At least I could see she had the top in her hand. She stood there smiling at me for five seconds, then slipped the top over her head.\n\n\"Let's get in bed,\" Sonia said, pulling back the covers and climbing in.\n\nShe was lying with her back toward me. Despite it possibly being the wiser choice, I didn't come to her place to sleep back to back. So, I climbed in and cuddled against her, and with her height, we fit together nearly perfectly. I carefully wrapped my arms around her waist, perfectly content with what was happening. She took hold of my wrist, lifted her shirt, and slid my arm under the thin material, pressing my hand against her warm and very soft breast. My contentment increased by about one thousand percent.\n\nOnce my hand closed on that smooth flesh, I knew what would happen--and it did. I slid my hips back a couple of inches so I wasn't pressing it against her. She moved her hips so they were pressing against me once more. I moved...and she moved.\n\n\"You're touching me; I should be able to touch you,\" she whispered, pressing against me. \"Now go to sleep.\"\n\nAfter running through at least two hundred fantasies, I did just that.\n\nSometime during the night, I awakened, the result of the wine I'd had earlier. We were still in the same position, and I was willing to endure a little discomfort to leave my hand on her breast. At last, not needing an unpleasant accident, I headed to the bathroom. Feeling much better when I returned, I found Sonia sitting on the edge of the bed.\n\n\"My turn.\"\n\nWhen she returned, she lay down right where she'd been and lifted the hem of her top. I resumed my position, and when I put my hand where it had been, a very erect and hard nipple pressed against my palm. She might be a virgin, but she wasn't immune to sexual feelings. Still, the very first personal thing I had learned about her was that she was a virgin. Its importance wasn't lost on me.\n\nWhen I awoke again, I felt very rested. Sleeping with Sonia obviously agreed with me. It wasn't long before she was awake too.\n\n\"Morning mouth,\" she said as she turned to face me.\n\nBefore she could move, I let her know that MM wasn't an issue. Her lips seemed even warmer and softer in the morning. It was the perfect way to start our day.\n\n***\n\nI almost didn't answer my phone when I saw the strange number on the screen.\n\n\"Hello,\" I answered cautiously.\n\n\"Hello, and glad you answered. This is Martina; I stole your number from Sonia's phone.\"\n\n\"Nothing's wrong that I don't know about, I hope.\"\n\n\"No, no. I wondered, after the time you've spent with Sonia, if you have questions I might be able to help with?\"\n\n\"You have to know that anyone who's around your sister has questions.\"\n\n\"That's why I called,\" she said, chuckling. \"Why don't we meet and talk?\"\n\n\"Sounds good to me.\"\n\nBoth of us were free, and we agreed to meet at Wendy's. I was ready with the first question.\n\n\"Haven't heard anything about you and Peter. Did you two get together?\"\n\nFrom the smile that crossed Martina's face and the rosiness that colored her cheeks, I decided that not only had they gotten together, but they had actually gotten together. No more questions regarding that.\n\n\"I did talk to Sonia yesterday, and she mentioned that you had said something very special to her.\"\n\n\"I told her I was falling in love with her and wanted to spend every moment with her I could...forever.\"\n\n\"That's quite a commitment, Archie. How much of Sonia have you actually seen?\"\n\n\"I honestly don't know, Martina. Probably not much. But I'm willing to do whatever it takes to make it work.\"\n\n\"She's been with two or three blokes in the past, but each of them ran after one of her 'episodes.' She loves you, you know.\"\n\n\"She said that.\"\n\n\"Do you know anything about what her 'episodes' might be like or how many there might be?\"\n\n\"Only from what I've seen, and that isn't much, I guess.\"\n\n\"Listen, I hope to love you as a brother-in-law one of these days, and if there's anything I can do to help that happen, please call on me.\"",
        "\"Thank you,\" I replied.\n\nWe hugged and went our separate ways, and I wondered what might be in store for my future. It took ten days to find out.\n\nI expected to meet Sonia in English class, but she wasn't there. I texted but received no answer, and after class, I called, but it went straight to voicemail. I debated about leaving school and going to find her but decided to give her time to, well, perhaps recover. After my Thermo class, I called again with the same result. I jumped in my car and headed to her apartment.\n\nI knocked, ready with my questions.\n\n\"Go away.\"\n\n\"Sonia, it's me. Open the door.\"\n\n\"Go away.\"\n\n\"I love you. Let me in, and we can talk about it.\"\n\n\"No. Just go away and leave me alone.\"\n\n\"Sonia.\"\n\nNo reply.\n\n\"Okay then, I'll just sit here by your door until you open it.\"\n\n\"No, just go away.\"\n\nI sat down and wondered. How long would this last? Was it a simple one hour of sitting by her door, or was it to be two or three days of torment and uncertainty? Maybe one more try.\n\n\"Sonia, open the door and let me in. I won't say a word and won't touch you. That's all I'm asking.\"\n\nWhen I finished, there was no \"go away,\" just continued silence. I wasn't sure what to do next when I heard the door unlatch but remain closed. I stood and slowly opened the door, stepping into the dark apartment. I was silent, felt my way to a chair, and sat down to wait. I held my breath in an effort to hear her breathing, unsuccessfully, but as my eyes became used to the near-darkness, I finally spotted her huddled on the couch.\n\nI yearned to run to her and hold her, telling her how much I loved her and how I could make everything okay. Instead, I sat quietly, watching the couch and waiting for some movement. This was going to be a test of my patience, my resolve, and my love of this beautiful but vulnerable woman.\n\nIt was two hours before I saw her move, saw her stand, and saw her walk toward me. She stopped three feet away.\n\n\"How can you not hate me?\" she said, sincerity in her voice. \"I hate myself.\"\n\n\"I suspect you just don't understand yourself, Sonia.\"\n\n\"Do you understand me?\"\n\n\"I'm learning a little each day. And loving you helps me learn.\"\n\n\"You keep saying that, but sometimes it's hard for me to believe it's true.\"\n\n\"I think that's probably true, Sonia, but what you believe doesn't make it true or not true.\"\n\n\"I think you're just trying to confuse me, and that's really easy to do right now. Why don't you just leave and give me time to think.\"\n\n\"You can think all you want, but I'll just stay here in the chair and won't say another word unless you ask me to.\"\n\nPlaying this kind of thing by ear was totally new to me, and I had no idea what I should be doing. The simple fact was that I loved her and wanted to be with her. I watched her return to the couch and sit down, not arguing about my staying there. I felt relieved since, had she asked me to leave, I'm not sure I could have done it.\n\nIt was forty-five minutes this time before she stood and walked to my chair, looking down at me. With a smile, I held out my arms, and Sonia lowered herself to my lap. We spent another thirty minutes in silence, holding each other. I'd found out a little more about Sonia and the things that helped define her and wondered how many more there might be.\n\n***\n\nThe winter's cold had passed, and the days were much warmer, and we were enjoying being able to spend more time outdoors. There had been both up and down days during winter, and I was getting much better able to handle them and understand that they were simply passing episodes and, at least for me, much more easily endured. I knew that BPD was a personality disorder and was always with her--it just seemed to manifest itself more pointedly on certain occasions. Sonia had more difficultly as, afterward, she always felt guilty for putting me through them. I think she was understanding now how deep my love for her was and was much better able to handle her guilt. Plus, I was constantly assuring her that, over time, it would get much better, and there'd be fewer episodes. At least that's what I'd read.\n\nIn the spring, she had a Shakespeare course, and I wondered if I couldn't arrange something. We'd gotten friendly with several of her classmates and spent a lot of time with them, even though \"Engineer Archie\" felt a little out of place. Sometimes though, I was able to entertain them with some science-y things.\n\nOn the sly, I talked with her professor, a wonderfully cooperative lady who seemed more excited than I did about what I had planned. On the fateful day, I dawdled about, making Sonia a tiny bit late for class, but giving the professor a couple of minutes to take care of her part of the plan.\n\nNear the end of the period, I knocked on the classroom door and stuck my head inside.\n\n\"Sir, this had better be important for you to interrupt the class.\" The professor sounded very stern and ready to thrash me.\n\n\"It is, it really is.\" I came inside and started toward Sonia.\n\n\"Archie, my God, what's wrong?\" She had a panicked look on her face.\n\n\"I'm about to take care of what's wrong,\" I said, kneeling in front of her chair.\n\nHer eyes were wide, her mouth open as she looked from face to face in the room.\n\n\"Look at me because I'm the one who loves you and wants to spend his life with you. Sonia, will you marry me?\"\n\nShe was breathing so hard, I was afraid she might pass out, but that didn't keep her arms from going around my neck as she said, \"I don't know why you want me, but yes, I'll marry you.\"\n\nApplause and cheering from the class as I winked a thank you to the professor.\n\n\"Better than Hamlet any day,\" her best friend called to more applause.\n\nIn the five minutes of the class still remaining, we were congratulated, hugged, and I got a special kiss from her best friend, who reddened my face when she said to Sonia, \"He's gorgeous, and I couldn't resist kissing him.\" That was a first.\n\nI'd made the commitment in my head, heart, and to her many months ago, but this was the final signing of the contract, and I was overjoyed that it was done.\n\nOutside the room, Sonia called her sister.\n\n\"I'm engaged,\" she yelled at the phone, and the look of sheer joy that filled her face nearly brought tears to my eyes. It was a look I didn't see often enough, and I hoped that would be changing in the future.\n\n***\n\nI'd like to report that the engagement was the medicine that cured Sonia's BPD, but it wasn't going to be that simple. I think it helped, and we had great times together, including sleeping together more and more often with the emphasis on \"sleeping.\" Preserving Sonia's virginity was getting to be more and more difficult, and several nights I had to jump up and get a drink of water in order to cool my passion. Remember that this was a gorgeous six-foot-tall blonde, with nearly perfect breasts and long, long legs, a little difficult to ignore when your heart is pounding, and your blood is ready to boil.\n\nWith summer and the warmer weather, Sonia's sleepwear grew skimpier with each passing day. Unfortunately, I was following her lead and trying to stay cool. Not surprisingly, our efforts to stay cool only succeeded in heating things up for both of us. Plus, if Sonia had a little extra to drink, it seemed as if it erased her sexual reticence, and she would \"come on\" to me, and we'd reverse roles with me fighting my very nature to help her keep what I knew in the morning would be as important to her as it had ever been.\n\nWe were working on planning our wedding, which would eliminate the issue. Our senior year had begun, and I was in my apartment working on a particularly tricky design problem when there was a knock on my door. I called for whoever it was to come in, not wanting to be distracted from my problem. When I did look up, Sonia was standing just inside the door, a somewhat blank look on her face.\n\n\"Hey babe, surprised to see you today.\" I was wary of the look but wasn't ready for what happened next.\n\nI watched her pull the engagement ring off her finger and throw it at me.\n\n\"There,\" she said, \"now you're free to find a woman you can be with for the rest of your life.\"\n\nThis was a more severe episode of things that had happened previously, and I wasn't quite sure how to handle it.\n\n\"I've found her already, Sonia.\"\n\n\"I can't allow you to have to put up with me, Archie. I'm going to leave; just forget about me.\"\n\nI didn't say anything or follow her since I knew this would pass away as the others had done. When seven days had passed and she wouldn't respond to texts, phone calls, or my knocking on her door and pleading to the silence I found, I called Martina, and she was unaware of what was happening but said she'd find out for me.\n\nIt was another four days before I heard back from Martina, and she was not a bit encouraging. She told me that Sonia felt that I was the most perfect man alive, and she loved me so much that she wouldn't be a burden to me for the rest of my life. Martina also told me that she had something that might change things based on her conversations with her sister and that I should not be surprised at anything that might happen. Just go along with it, she added.\n\nMartina didn't want to share anything additional until she knew a bit more, but I tried to listen to the words she didn't speak, and I heard optimism. I knew that's what I wanted to hear as the emptiness I was feeling was bordering on more than I could endure. I was sure I was \"good\" for Sonia, and we were making progress in our coping with BPD. I didn't want it to end.\n\nI was moping about the apartment a few days later, hoping my roommate might stay among the missing as he always asked about Sonia, and that simple act was like driving a dagger into my gut when there was a knock at the door. My heart leaped as I hoped it might be what seemed to be beyond hope, but when I opened the door, it wasn't a blonde but a redhead that I saw. She motioned for me to step outside.\n\n\"Hi,\" she said with a big smile. \"I'm Rochelle, a friend of Martina's, and she said she had warned you that something unusual might happen and to just go with it. I'm the unusual that's happening.\" Her giggle was captivating, as was everything else about her.\n\nI wondered what this might be about and hoped I might find out quickly.\n\n\"Martina has told me about you and her sister and what's happened recently. She says that her sister is adamant about giving you your freedom so you can find somebody \"worthy\" of you. She says that Sonia still loves you, and she's counting on that for what we've cooked up.\" She put her hand on my arm and leaned in like she was whispering. \"This is part of it; just go along with me, okay?\"\n\nRochelle was different than Sonia for sure but equally as beautiful in her own way. I was a little wary of what might be going to happen.\n\n\"I've spent some time with Sonia and her sister, and I always told her that if she ever got tired of you to let me know and I'd \"jump your bones\" before she'd finished saying it. I was trying to make her feel good about herself and...now I'm blushing, and I'm not here to \"jump your bones.\"\n\nI knew that getting my bones jumped by this beautiful redhead wouldn't be a bad thing, but at the moment, I was much more concerned about Sonia. Evidently, though, I had some look on my face that had her blushing even more.\n\n\"I'm sorry,\" I finally got out. \"Didn't mean to make you feel self-conscious since you're just trying to help.\"\n\n\"It's fine. But I wasn't kidding about what I said. I've seen you around with Sonia a few times and, while I want more than anything to get you two back together, it is nice to get to know you a little better.\"\n\n\"Back to business then. What's Martina's plan?\"\n\nWhen I'd finished asking that, she gave me a hard bump with her hip and laughed loudly.\n\n\"Figured it out yet,\" she asked, grabbing my hand.\n\nThe hip bang and the laugh caused a light to blink on.\n\n\"Jealousy?\" I asked simply.\n\n\"Yep. Martina told her sister I'd said I was going straight to your place, with a couple of embellishments I'm too embarrassed to mention.\n\n\"But they should be here for it to work.\"\n\n\"Oh, they are, don't worry. Marina is making sure of that. I think we've done what we need to do, so stand straight and tall while I get on my tiptoes and give you a kiss.\"\n\nI did as requested and received a little peck from Rochelle. Her last words were very loud.\n\n\"I'll call you, and we can get together later,\" she said, waving at me as she climbed into her Mercedes and zipped away.\n\nThis seemed like a desperate attempt by Martina to restore our relationship, and I prayed she knew Sonia's intricacies well enough that it would work. I wasn't brimming with confidence and was remembering the Mercedes driver who had just kissed me. I had settled down to one more lonely and desolate evening when there was a gentle knock on the apartment door. I knew Rochelle wouldn't knock that gently, but I had an idea who might. Heart pounding, I opened the door a crack and peeked out.\n\n\"I don't want to lose you,\" she said as quietly as she had knocked.\n\n\"You haven't,\" I assured her, opening the door wider.\n\n\"Is your roommate here?\"\n\n\"He went home for the weekend. Come on in.\"\n\nWe stood awkwardly looking at each other until I decided there was only one thing to do and opened my arms to her. She smiled and quickly settled against me.\n\n\"This is what people who love each other do,\" I said, squeezing her.\n\n\"They do more than this.\"\n\nWe'd certainly done more than just hug or kiss on many occasions, but had been careful not to tread too close to the edge. I took special care when we went somewhere that Sonia would be drinking--I didn't drink, and it saved us more than once. I assumed that wedding plans would keep moving now that things seemed resolved.\n\n\"I love you so much,\" Sonia said, \"but I still don't know how you put--\"\n\nMy hand over her mouth cut off her speech.\n\n\"Here's the answer to all those questions, forever. I love you.\n\nI knew that today she believed that with her whole heart, but I was sure there'd be days when I'd have to convince her one more time. But I was still thinking of what she'd said. They do more than this. Was she talking about more than the more we'd previously been doing? How was I to read that, or had I already exaggerated what she'd said? She was looking at me as though she knew what I was thinking.\n\n\"Arch, I'm sorry and thankful you love me the way you do.\" She was biting her lower lip. \"Martina told me that when Rochelle found out I'd, well, what I'd done, she was anxious to take my place. She'd teased me before that she wanted to 'jump your bones.' When I tried to picture that, it crushed my heart.\" Her face had a look of sadness, but her eyes were full of a new fire.\n\nI marveled at how well Martina knew her sister. But, even as I was thankful for that, I was puzzled by what I was seeing and what I thought I had heard.\n\n\"Sonia, what's happened? What have I missed?\" A big smile crossed her face.\n\n\"My head was clear for a change, and I wanted you beyond anything I'd felt before. And driving over here just now, I realized something else.\"\n\nI nodded, ready to hear what had suddenly changed.\n\n\"When we first started going out, do you remember me telling you I wasn't 'me,' I was what my parents had inserted in me. At home, I was rebellious, temperamental, and disruptive, just the opposite of Martina. And, of course, there was the BPD, which they never fully acknowledged, even though Father was a professor. He felt he was entitled to perfect children and wasn't willing to admit that wasn't the case.\n\n\"So, he stuffed me with values, lots of them that tortured me; they were so different from what I was meant to be. One, in particular, Arch. One, in particular.\" Now she was biting her lip in earnest. \"I want to get rid of that one, Arch, so badly.\"\n\nI think I was beginning to tremble as I realized what she was trying to say without saying it. It was the first thing I'd learned about her and been one of the controlling features of our relationship. Was she really ready to cast that aside and change what she was or, at least, what she had been? But standing here staring at those blue eyes, and at all the rest of her as well, I could feel my will beginning to waiver.\n\n\"Sonia, I don't know what...are you sure? I mean, well, you know.\" I received a big smile.\n\n\"I'm not going to let him win by making something happen that I don't want to happen. I mean, keeping something from happening that I want to happen. You love me and asked me to marry you. I love you and said yes, and soon we'll be married. It may seem like a small thing, but it's important to me.\"\n\n\"It's not a little thing, Sonia. It's huge. Tomorrow will come, and I don't want to, well, you know, make a mistake.\"\n\n\"Archer Doyle, if this day ends and I'm still a virgin, that will be the mistake.\"\n\nSomething occurred to me, not a small matter.\n\n\"Sonia, I don't have any kind of protection.\"\n\nShe stared at me, thinking.\n\n\"Arch, I know a little bit, and this is my safest time of the month. Plus, we'll be married soon and, well, I'd love to have our baby.\"\n\nThat sounded a little tenuous, and my brain was trying to rebel against the feelings that were tearing through my body. At this moment, though, it was as though my brain was fried and had no chance of winning the battle. It was as though two gates had been opened, and we were freed from the place that had constrained us for all this time. We leaped into each other's arms with a passion that had been held in check too long.\n\nWe kissed, a kiss like none before it, and I wanted my lips to taste every bit of the skin I had so longed for almost from the first day I had seen her. I ached to touch her, to caress her, to make every bit of her mine. Her lips were fire; her tongue felt red-hot as it touched mine. The sounds I was hearing were heating my blood, and her arms were squeezing me against her.\n\n\"Sonia, last time, are you sure?\" I was so overwhelmed by passion I was surprised I was even slightly coherent.\n\nGasping, she said, \"Archie, shut up and just tell me what to do.\"\n\nI didn't need to tell her much as she was doing pretty well without my instruction. Her blouse was halfway off as I was struggling with my shirt. When I looked again, she was topless, her beautiful breasts bouncing as she fought with her pants. When mine were off, I looked, and for the first time, saw a totally nude Sonia.\n\nMy breath caught in my throat. I'd been with Sonia a long time now, but this was different. Stunning came nowhere near describing her. And, best of all, she wanted me. The problem, if you could call it that, was that this was a total surprise. I wasn't a virgin, but I'd never made love to a virgin either, and this one was treasured beyond anything I had ever imagined. I ached for this to be fantastic for her.\n\nI knew that if I took her in my arms here, we'd never get out of the living room. Holding out my hand, I led the most beautiful woman in all of the world toward the bedroom. But she had her own thoughts.\n\n\"Stop,\" she said, \"and turn around.\"\n\nWhen I did, her eyes were fixed on my throbbing erection. Her hand moved tentatively until her fingers wrapped around it.\n\n\"It's so hot,\" she said, her hand moving gently, and I knew she had no idea I was working to keep my knees from buckling. She lifted her eyes to mine. \"That feels good, doesn't it?\" she added, reading my expression. Her hand moved a little faster, her eyes still locked with mine. I wanted to make this a great experience for her, but already, she had me ready to explode.\n\nI grabbed hold of her wrist, which caused a sudden look of uncertainty to cross her face.\n\n\"Where did you learn how to drive me crazy?\" I said, panting hard.",
        "\"That's just so fascinating,\" she answered.\n\n\"Come with me, and I'll show you something more fascinating than that.\"\n\nOnce in the bedroom, I grabbed her around the waist and tossed her on the bed. Instinctively, her legs were together, but I knew I'd change that eventually. I crawled up beside her and began kissing as much of that flawless skin as I could. I used my tongue as well on her breasts and my lips on her nipples, sucking them hard accompanied by long moans from Sonia. I kept kissing across her firm but soft tummy, pausing to roll my tongue around in her navel. Her body was moving in unison with my tongue and lips, and quickly, they were touching her trimmed and almost blond muff.\n\nAs I reveled in the touch and feel of her, my body temperature soaring, my mind was playing tricks on me. For so long, I had steeled myself to avoid what was happening now, and, despite her murmuring my name over and over, I felt I was treading on forbidden territory. I was where I longed to be, my nose being tickled by her muff as her hips moved from side to side. Despite her being a virgin, the musky aroma filling my nose told me she was ready for what we wanted to do.\n\nAs my brain wrestled with itself, I heard her voice.\n\n\"Archie, don't think, don't you dare stop, and don't even slow down. I'm where I want to be, and I know you are too.\"\n\nThe wrestling match was over as my lips softly kissed the very puffy labia hiding beneath the light fizz of her muff. Her rather loud and long, \"Yesssss,\" told me I'd understood correctly. I lightly pushed on her knees, and almost instantly, her legs spread wide, revealing that very wet and invitingly pink place that was my goal. I slipped between her legs, and the way she moved, I think she was expecting to feel my erection entering her immediately. That would come in time.\n\nWhen Sonia's legs spread, something else spread as well, and I looked at it longingly. The looking didn't last long as my lips were quickly kissing each labia, my teeth gently nibbling the soft, moist flesh. My tongue probed the pink and previously unprobed opening. The loud groan from Sonia let me know she was welcoming what I was doing. But there was a small and so far undisturbed nub that needed attention.\n\nI flicked it once with my tongue--she jerked and squealed. Two more flicks with the same result. I began alternating my tongue and lips, Sonia's body twisting and pressing against my face. I was hearing my name moaned over and over, and hearing it had me wanting more and to hear something else. My lips closed on her now very swollen clitoris, and I sucked hard, my tongue caressing the very tip.\n\nWhat I was doing was having the desired effect; her hands were now locked in my hair, her smooth and soft thighs holding my head in place. Her moans were getting shorter, breathy, and closer together until her back arched, her body began vibrating, and loud \"ohs\" filled my ears. I wasn't about to slow down or stop.\n\n\"Arch, please, please,\" she gasped, almost begging. I pressed her legs away from my head and lifted my it to look at her. She was panting and biting her lower lip, her blue eyes half-closed. She slowly shook her head. \"Why didn't you tell me this was so wonderful? And we're only halfway there.\"\n\n\"Halfway there,\" I repeated, smiling.\n\n\"I'm ready,\" she said, extending her arms to me.\n\n\"Sonia?\"\n\n\"Archie.\" The way she said my name scolded me for what I was thinking.\n\nI scooted toward her head, and we kissed. When we parted, Sonia licked her lips and smiled.\n\n\"You've tasted me quite well, haven't you? And now I've tasted myself as well.\" She smiled a shy smile. \"I've heard talk,\" she said. Her eyes turned away. \"It's my turn to...taste you.\"\n\n\"Sonia, do you know what you're saying?\"\n\n\"I've fantasized about it and pictured it over and over. And now it was going to happen, Archie. It's going to happen.\" She pushed me onto my back and moved between my legs, carefully grasping my erection with a look that said tell me if I'm doing something wrong which I didn't anticipate needing to do.\n\nShe spread the precum with her finger, kissed the head, then enveloped it with her lips. Her breasts rubbed against my legs as her lips moved up and down on my cock, as much of a heavenly feeling as I could imagine. But, if that special thing she wanted to happen was going to happen, something needed to change. I knew I could recover quickly, and everything would be fine. But I was selfish and wanted to share \"firsts\" with her.\n\n\"Sonia,\" I said, lifting her head.\n\nThe look on her face told me she understood, and she moved, so she was lying on her back beside me, slowly and sensually spreading her legs and looking at me in anticipation.\n\nI have to admit that all my doubts and questions had disappeared, and all I wanted was her. I was more than ready to make it happen.\n\nI moved between her legs once more, my heart pounding, my bare erection that I wished was covered, throbbing in time with my heart. I pressed it against her warm, wet, and slightly parted lips until the head slipped inside. She pulled my head down and kissed me as I hesitated, and then those blue eyes locked with mine, I began to enter her.\n\n\"Tell me if it hurts,\" I managed to say.\n\n\"It won't,\" she groaned as I pushed in further. She was hot, wet, and tight, and filling her for the first time was the most ecstatic feeling of my still young life. When my hips bumped against her, it was done and could never be undone. But the look from those eyes and the subtle movements of her hips wiped away all my foolish thoughts, and I pulled out slowly, then pushed back in again.\n\nI don't know what I was expecting, perhaps timidity or reluctance from Sonia despite her insistence that we have sex. But her body was beginning to glisten, her breathing was getting ragged, and her hips were rising to meet my thrusts. Her body was responding, and mine was in sync with hers. I was trying to control myself, to make this fantastic experience last as close to forever as possible, but I was losing the battle and losing it quickly. I was thrusting faster and faster, the slapping sounds of our joined bodies loud and clear in the bedroom, as well as the more subtle sound of my cock moving in and out of her wetness.\n\n\"Sonia, I'm going to come,\" I grunted. She threw her arms around my neck, lifting herself into a wild and passionate kiss, her tongue filling my mouth as my muscles began to tense, my stomach tightening as I filled her with stream after stream of hot liquid. She'd somehow wrapped her long legs around me, holding me in place. Too soon, I finished.\n\n\"I love you,\" she whispered.\n\n\"Sonia, if there's something more than love, that's what I have for you.\"\n\nI started to move, but her legs were locked together and wouldn't allow it.\n\n\"Don't you dare move; I want you right where you are. Arch, that was so amazing. If I'd had any idea what it was like, this would have happened a long time ago.\"\n\n\"You had to be ready for it to happen, Sonia.\"\n\n\"And I love you for waiting, for putting up with me, for loving me right back. I don't--\"\n\n\"--Be quiet about that,\" I interrupted. \"I love who and what you are right this minute, and that's all there is.\"\n\nWe lay together for I don't know how long until, finally, she unwrapped those long and beautiful legs and freed me. I rolled off her and onto my back.\n\n\"It doesn't look the same now,\" she chuckled, and I realized she had probably never seen my cock soft.\n\n\"It works better this way for everyday living,\" I answered.\n\n\"When you, um, came, I could feel it pulsing inside me, and I knew what it was doing, but...sometime I want to see what it was doing.\" Her face had turned a mite pink.\n\n\"I think we can arrange that, Sonia.\"\n\nAlthough I had had a first time, this was my first time with a first time, and if I'd had any idea of how amazing it could be, I might have been more reluctant to put off this first time as long as I did.\n\nWe dressed, went out for an amazing dinner, picked up a couple of things at the pharmacy, and, later that evening, I received the most rapturous hand job ever, and Sonia had a chance to view what had happened inside her earlier in the day.\n\nSonia called her sister to announce that she had finally defied her father and found something more precious than she could have imagined. I could hear Martina scream in glee over the phone, and she shooed me away so the two of them could compare details, I guess.\n\nWe graduated, married, and I went to work so I could support Sonia until she had her Ph.D. I wish I could say that everything was smooth and un-BPD-ish as our lives progressed, but that wasn't the case. I may share more of that story later, but we are still together, happily facing each new day of our lives. Love changes everything.\n\n***\n\nMy sincere thanks to vanmyers86, PertonMirabelle, and SisterJezebel for their reads and extremely helpful comments."
    ],
    "authorname": "PickFiction",
    "tags": [
        "personality disorder",
        "patience",
        "frustration",
        "discovering love"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/understanding-sonia"
}
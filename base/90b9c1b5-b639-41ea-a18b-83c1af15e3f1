{
    "title": "Rules",
    "pages": [
        "(Author's notes: In this work of fiction, nobody is worried about STDs. In real life, all non-monogamous sex should be practiced using accepted safe-sex precautions. \n\nThis story contains some rather dark memories of abuse and non-consensual sex. It all occurs in the past and is not the focus of the story, but is necessary background to understand the psyche of one of the characters. In this author's opinion, it is not enough to place the story in the Non-Consent category, but if you can't stand any non-consent, it would be best to skip this one.\n\nSpecial thanks to Rex Brookdale and Sidney43 for their time and effort in beta-reading/editing this story. They both offered key insight; this is a better story because of them.\n\nAll persons involved in sexual activity are at least 18 years old.)\n\n: : : : :\n\nIt was Friday night at Clifton's Barbecue. Clifton's has been known as the best barbecue in town for most of its sixty years, although it's not actually 'in town' -- it's about twenty minutes outside the city limits on a rural two-lane highway. \n\nIt was early for dinner, a few minutes after six, but there was already a line for a table. It wasn't just out the door, it stretched down the long side of the parking lot. That was probably bad news for me. Clifton's has a rule: once the wait for a table reaches an hour, they won't seat any parties of one. They pair you up with whoever is next on the list. We regulars understand that it's efficient use of table space when they're crowded, but that doesn't mean we like it.\n\nParty of one -- Friday night, that was me. Many people think eating alone is sad, and maybe sometimes it is. For me, though, it was by choice -- a 'guy's night out' for one. I was treating myself to my favorite barbecue, followed by a couple of my favorite drinks at a bar listening to my favorite band, a local roots-rock quintet called Sazerac Blast. No one to entertain or pay for but myself. \n\nWhile I waited, I passed the time admiring some lovely ladies, probably from the state college nearby. Several of them looked quite fine, but one in particular stood out. She had a deliciously curvy figure, a beautiful face, and long blonde hair. She looked relaxed, confident, and happy. \n\nHappy is underrated as a component of sexy, but to me it outscores pretty -- a plain girl with sparkling eyes and a shining smile is almost always sexier than a goddess who looks like she has something bitter stuck between her teeth. This girl was not only gorgeous and happy, her happiness seemed contagious. She struck up conversations with the people around her, who by their body language were strangers, and within minutes they were chatting and laughing like old friends.\n\nI noticed the hostess beginning to pair people up for sharing tables, and decided I would go elsewhere rather than make forced happy talk with a random stranger. Dang it, I really had a taste for some Clifton's. Sazerac Blast wasn't due to start playing for hours, so I hung around Clifton's a little longer, pondering which lesser restaurant to settle for, and admiring the blonde -- not necessarily in that order.\n\nShe looked to be my age, early twenties. Possibly, like me, attending the local state college -- I would graduate that fall if I didn't hit any bumps. She wore a man's oxford shirt, an extroverted plaid of yellow, white, baby blue, and red, over a navy tank top and a tiny pair of Daisy Duke shorts. The plaid shirt fit loosely, with the sleeves rolled up and the tails tied alluringly under her breasts. The tank top was short, showing a couple of inches of skin above the low-rise shorts. It was tight enough to highlight a delightfully curved waist and a wonderful tummy, almost flat with an ever-so-slight softness. In back, two soul-stirring sacral dimples peeked out above the shorts, hinting at how delightful the ass below them would be. Unfortunately, the oxford was loose enough to obscure what she had up top. There were mounds there; clearly she wasn't flat, although she didn't seem to be Dolly Parton, either. Between those extremes, she was a mystery... small, medium, or large?\n\nTo avoid getting caught staring, I forced myself to glance away from her for a long moment. When I looked back, I was startled to find her standing barely a foot in front of me. She looked me in the eye and said, \"Hi, what's your name?\"\n\nMy mind froze. This drop-dead gorgeous creature had approached me! \"Uh,\" I forced out, \"Hugh.\"\n\nShe smiled and said, \"Hi, 'uh Hugh.' If I asked you to share a table with me, would you assume that meant I'll be taking you home with me afterward?\" \n\nTurning on the charm, I cleverly said, \"Uh, no.\"\n\n\"Good,\" she chirped, turning and walking away. When she had gotten about five steps away she turned back and said, \"Come on -- our table is ready.\" \n\nThe ordering process at Clifton's is simple. All the sides are served family-style, and you choose your entr\u00e9e -- either brisket and sausage, or chicken pieces and sliced turkey. All are divinely hickory smoked. She asked what I was getting, and I said, \"The chicken and turkey is really good, but tonight I'm leaning toward the brisket and sausage.\"\n\n\"If I get the poultry and you get the red meat, maybe we could trade a little and both have some of everything?\"\n\n\"That would be perfect.\"\n\nOur plates arrived in barely a minute -- the only kitchen prep required is scooping the beans, cole slaw, potato salad, and barbecue sauce into serving bowls, placing rolls and corn bread into a basket, and slicing the meat.\n\nShe asked, \"How long have you been coming to Clifton's?\"\n\n\"Since I was five.\"\n\n\"It must have been quite different then.\"\n\n\"Not really.\" I gestured at the wall behind me. \"They added the second dining hall about ten years ago, and they always seem to be enlarging the parking lot. Other than that, it hasn't changed much. It used to seem further out in the country, but that's the city expanding outward. And you?\"\n\n\"I moved here for school. Some friends from my freshman dorm brought me here. I'm a junior now, and completely hooked.\" She smacked her lips. \"Damn this is good.\" \n\nI still hadn't gotten her name, but she was quicker with the next question than I was. \"Is Hugh short for anything?\"\n\n\"Yeah.\" I paused. \"Joseph.\"\n\nShe covered her mouth and laughed. \"Seriously?\" I nodded. \"Wouldn't that usually be 'Joe' or 'Joey'?\"\n\n\"Yeah, usually. For me, though, my dad is Joe, my uncle on my mom's side is Joey, and I have a cousin Joey.\" \n\nI almost always get swamped with questions at that point. She simply grinned and said, \"Fair enough.\"\n\nI finally got to ask her name. She hesitated, and said, \"Spencer.\"\n\n\"Seriously?\" She smiled that I repeated her word, nodded, and then waited. She clearly expected questions. I simply smiled and said, \"Nice.\"\n\nWe talked as we ate, discovering we had a lot in common. Neither of us watched much TV, but what shows we did were the same ones. She shared my love of live music, and Sazerac Blast was her favorite local band. We both supported ourselves with paid internships in our fields of study, working Tuesdays and Thursdays, with classes on Mondays, Wednesdays, and Fridays. And we both lived in apartments west of campus, although we didn't tell each other which ones.\n\nI asked, \"So how'd you choose me?\"\n\n\"What do you mean?\"\n\n\"Out of all the guys here, you offered to share your table with me.\"\n\n\"Oh, that. When they said they weren't seating any more singletons, I asked who else was by themselves.\" I was impressed -- it had never occurred to me to do that. \"You were the only guy younger than my parents.\"\n\n\"And I thought it was my irresistible good looks and sparkling personality.\"\n\nShe laughed and said, \"Well, obviously, that too.\" \n\nAs usual for Clifton's, it felt like I blinked and our food was gone, our separate checks were paid, and we were walking out to our cars. \n\n\"This is too soon,\" I said.\n\n\"What do you mean?\"\n\n\"I'm enjoying talking with you.\"\n\nShe stiffened slightly. I'm sure she got hit on regularly and found it quite tiresome. After a moment, though, her posture softened. \"Actually, I am too.\"\n\n\"Did you notice Sazerac Blast is playing tonight?\"\n\nShe hadn't. She looked deep in thought for a moment, I would guess wondering whether to trust me or not, then she admitted she didn't have plans for the rest of the evening. She'd be willing to join me, she said, if we took separate cars and ran separate tabs at the club. I understood; you can't be too cautious these days. When I explained where the club was, though, which was way across town from Clifton's, after another long thought, she agreed to ride together, as long as we took her car.\n\nShe followed me to my place. I parked out front, nowhere near my actual apartment, and slid into her passenger seat. \n\nI began to see how special she was in addition to her good looks -- we chatted comfortably and laughed frequently all the way to the club. She may have felt a similar attraction; as we neared the club, she rather hesitantly said, \"How about I pay our cover, and you buy the first round of drinks?\" \n\n\"I don't know, riding out here together is one thing, but that's a big commitment...\"\n\nHer face darkened until she checked my facial expression and realized I was teasing, then she gave me one of the bright easy smiles I admired earlier.\n\nWe found the perfect table, with a great view of the band, but not directly in front of any of their speakers -- I hate going home with my ears ringing. In honor of the band's name, I ordered the cocktail Sazerac. Its key ingredients are cognac and either absinthe or Pernod, and I offered to let her taste mine before she ordered, because not everyone likes it. She took a tiny, tentative sip, and her face bloomed into a glowing smile. \"Wow,\" she said, \"That's not what I expected.\" She took a bigger sip. \"This is amazing. I may need more than one!\" \n\nAs the band tuned up, she said, \"So, 'uh Hugh,' do you have a last name?\"\n\n\"Um, it's Bloe.\"\n\nShe paused, and I watched multiple expressions cross her face as she connected the dots. \"Your actual name is Joe Bloe?\" Her tone was playful rather than an accusation that I was fibbing. I fished out my driver's license, but she waved it away without looking. \"I believe you. I just never knew there actually was a genuine Joe Bloe, and now I'm lucky enough to have met him.\"\n\n\"That's another reason I go by 'Hugh.'\"\n\nShe nodded. \"Mine is Davis.\"\n\nIt was her turn to watch my face as I connected the dots. \"Your actual name is Spencer Davis?\" \n\nShe grinned that I quoted her from a moment ago, and nodded. \"I know, I know, Spencer Davis Group, famous sixties band, 'Gimme Some Lovin,' 'I'm A Man.'\"\n\n\"I've heard Sazerac Blast play both of those -- they're great songs.\" I stuck out my hand. \"Nice to meet you, Spencer Davis.\"\n\nShe took my hand and held it rather than shake it. \"Nice to meet you, Joe 'uh Hugh' Bloe.\" Her hand felt electric in mine. I began to hope this could be more than just a single evening out.\n\n: : : : :\n\nAs usual for Sazerac Blast, it felt like I blinked and the music was over, the club was closing, and we were walking back to her car. \"This is too soon,\" she said, echoing what I had said earlier.\n\nI picked up on the 'script.' \"What do you mean?\"\n\n\"I'm enjoying being with you.\" Her voice was very subdued, as if saying that made her uncomfortable. \n\nIgnoring her tentativeness, I smiled. \"I am too.\" \n\nWhen we arrived at my apartment complex, there wasn't an empty space near my car. She was a true gentleman: she found a spot, shut her car down, and walked me to mine. I would say I leaned in and kissed her, and I did, but in fact we met in the middle -- she also leaned in to kiss me. It was a deep, long one -- best kiss I'd had in months. Our lips dovetailed together perfectly, massaging each other comfortably like we'd been kissing each other for years. \n\nAs the kiss began winding down, a shiver passed through her body. She inhaled deeply, cradled the back of my head, and pulled my face more firmly onto hers. Her enthusiasm was refreshing -- it gets old initiating kisses and not being able to tell if they are actually enjoyed or merely tolerated. \n\nI lightly stroked the sweet inner curve of her waist, and felt her grip my ass. I cupped her Daisy Dukes, giving the delightful bum underneath a squeeze. She broke away from our kiss and said, \"Hey!\" \n\n\"Hey, what?\"\n\n\"Who said you could fondle my bottom?\"\n\n\"You did, when you groped mine.\"\n\n\"I didn't grope yours, I caressed it, and anyway, I'm a girl -- that's different.\"\n\n\"Not according to my rule.\"\n\nShe took a step back, eyes wide. \"You have rules?\"\n\n\"Only one: anything you get to do, I get to do.\"\n\nShe immediately grabbed where my tit would be if I had one -- testing my limits, I assumed. Never one to shrink from a dare, I cupped her tit in return. Using my minimal braille-reading skills, I discovered she wasn't wearing a bra, and I was right, she wasn't Dolly Parton, but what she had was a nice handful. Even through two shirts, I felt her nipple jump to attention.\n\nShe laughed. \"You should see the look on your face!\" \n\n\"I, um, I wasn't... uh, I didn't expect you to do that.\" \n\nShe stared into my eyes with a mysterious smile that could have been either consent or disapproval, I couldn't tell. Whatever it was, she let me enjoy her tit for a nice long time before she finally spoke. \"You can let go of my boob now.\"\n\n\"Oh, yeah, sure. Um, do I have to?\"\n\n\"Only if you want to follow me to my place.\"\n\nI released her tit like it was burning my hand.\n\n: : : : :\n\nWe sailed straight through her apartment to the bedroom. She unbuttoned my shirt, eased it off my shoulders, and let it fall to the floor. \n\n\"I need you to understand something,\" she said as I untied her yellow shirt, under the terms of 'whatever you get to do, I get to do.' I slipped it off her shoulders and dropped it on top of mine. \n\n\"I'm all ears.\"\n\n\"I never do this.\"\n\n\"Sure. I don't either.\"\n\n\"Joe...\"\n\n\"I'm Hugh.\"\n\n\"You'll be Joe when I'm mega-serious.\"\n\n\"Like when my parents used my middle name?\"\n\n\"Exactly. That serious.\" She paused, gathering her thoughts. Her face cycled through a series of emotions which I didn't know her well enough to read precisely, but they may have included fear, desire, sorrow, and/or hope. Her eyes showed a wet sheen they didn't have seconds ago. She practically whispered, \"You should know: my latest boyfriend... um, it started well, but it went bad... real bad... and it ended worse. That was a year ago. This is my, um, my first time since then.\"\n\nLooking rather deer-in-the-headlights, she crossed her arms, grasped the hem of her tank top, lifted an inch, then froze. \n\nI took her hands and pulled them away from her shirt. I whispered, \"Spencer,\" and waited. It took her a while to make eye contact. I pulled her hands to my chest and said, \"I like where this is going, I like it a lot. But let's not do anything you're not comfortable with. Or ready for.\"\n\nHer body relaxed -- I had said the right thing. I pulled her in for a soft hug. She began to quiver -- she was crying. \"No. I want this.\"\n\nI took a chance on making light of the heaviness of the moment and said, \"Yeah, I can tell.\"\n\nShe laughed her sweet musical laugh, then sniffled. \"But I want to be comfortable, I want to be ready...\"\n\n\"You can't force 'ready.' And unless this is a one-night stand, we have nothing to gain by rushing.\" \n\nShe gazed deep into my eyes, then lowered hers, and began softly crying again. She kicked off her shoes, led me to the bed, and after a brief hesitation, sat. She slid across to the other side and pulled me toward her. I slipped off my shoes and joined her, on top of the covers.\n\nShe leaned into me and I pulled her close. She tucked her face into my shoulder, and said, \"I can't believe you're seeing me this emotionally whacked out. You probably just want to run out of here screaming and pretend we never met. I promise I'm not always this fragile.\"\n\nI admit, I wondered what happened to the cheerful, confident girl at Clifton's, but I didn't say that, I just softly stroked her back. It seemed to relax her. Her breathing slowed and deepened, and at this late hour, I thought she might be falling asleep. \"It's a compliment,\" she said.\n\n\"How's that?\"\n\n\"I feel safe enough to let you see what a basket case I am.\" She leaned in for a kiss, which turned into another long, soul-stirring one. \n\n\"This is nice, you're a great hugger,\" she said. She bunched her hands under her chin, her elbows tucked tightly together, and snuggled deeper into my arms. Her breath warmed my chest.\n\nSoon she was asleep, and I was confused. Should I cuddle with her and stay, or ease out from her embrace and leave? Her bizarre jumble of extreme hot and cold signals created a tornado of confusion zig-zagging through my mind, uprooting random thoughts about her, about relationships, about life in general, and tossing them randomly across my mental landscape. \"It went bad,\" could mean many things, but it must have been intense if she was still this unsettled a year later. I gazed at her, her chest sweetly rising and falling. Her face, free of all the angst and stress, was enchanting. I couldn't help wondering, though, whether I was seeing the deep sleep of the innocent and pure, or of the irredeemably broken who would drag me down with her into an abyss of dysfunction.\n\n: : : : :\n\nDid you ever have an eerie feeling you were being stared at? I woke to that feeling. \n\nThe bedside clock said 4 a.m. She was lying on her side, raised up on her elbow, resting her cheek on her hand, gazing intently at my face. When she realized I was conscious, she looked embarrassed. She mumbled, \"You're beautiful when you sleep.\" She gently stroked my face.\n\nI rolled off the bed. Sounding stressed, she asked, \"Are you giving up on me?\" \n\n\"No. Gotta pee.\"\n\nWhen I climbed back onto the bed, she pulled me close. I asked, \"You okay?\"\n\n\"Yes,\" she said, pressing the side of her face into my shoulder. Then she shivered and whispered, \"No.\" She sighed. \"I'm sorry. I-\"\n\n\"You don't have to be sorry,\" I interrupted, \"I understa-\"\n\nShe interrupted me back. \"No, I want to say this. I didn't bring you here to tease you. I just... things got so ugly with Sam, he was so mean... he did so many terrible things... I've, I've been a sexual hermit... for an entire year. \n\n\"Talking to you at Clifton's, and in the car, and at the club, you're obviously a great guy. I thought coming here for hot sex would be the perfect end to a wonderful evening. Before Sam, that's how it would have gone. I want so much to be back to normal, but I guess I haven't healed as much as I thought.\n\n\"I've done tons of reading... I've seen a couple of counselors... I've worked my ass off. I thought I was past the hard part... I thought all I needed was to meet the right guy.\n\n\"I'm sorry... I overestimated myself... I probably fucked everything up. You must wish we'd never met.\"\n\nI couldn't see how all this self-loathing would help her. I thought the best thing to say would be something startling but reassuring. She had broken the f-word barrier, so I took a chance on using it for impact. \"You don't have to fuck me tonight for me to be interested in seeing you again.\" \n\nHer mouth dropped open and her eyes flared. I thought for a second I had overdone it, but her expression quickly softened, morphing into a smile and a brief laugh. \n\n\"If you're not ready yet, you're not ready. I've never forced myself on anybody, and I'm not starting now. It sounds like -- Sam, was it?\" She nodded. \"It sounds like Sam was a certifiable creep.\"\n\nShe nodded vigorously. \"Thank you,\" she whispered. \"A lesser guy would have bolted.\"\n\n\"I'm not bolting.\"\n\n\"I notice you're still here. You get a lot of credit for that.\" She smiled, her face regaining some of the happy glow I enjoyed at Clifton's. ",
        "I was ready to go back to sleep, but she placed my hands on the hem of her tank top. I scanned her face for a 'go ahead' cue. After a minute of uncertainty -- but no tears -- she gripped my hands with hers and together we pulled it over her head. I came face-to-face with the nicest breasts I had seen in a long, long time. \n\nI cradled them, one in each hand. My eyes feasted on them. \"So beautiful.\" I wasn't exaggerating. They were wonderfully firm, perfectly shaped, creamy smooth, and they rippled enticingly across their surface when they bounced. They were crowned with silver-dollar sized pink areolae. Her nipples were so swollen they looked like they would burst any second. I paid proper respects, gently kissing each one. \n\nShe began undoing my belt. I raised my eyes to hers, and said, \"Are you sure?\"\n\nShe answered by unzipping my shorts and pulling them off. She hadn't said anything about my rule being suspended, so now I was entitled to free her from her Daisy Dukes. They were so tight I had to wiggle them over her butt before they joined my shorts on the floor.\n\nShe hooked her thumbs in the elastic of my boxer briefs, and lifted her face to mine for another soul-stirring kiss. When our lips released, my underwear was on the floor, and my cock pointed at her navel. She gripped it and gulped. A range of emotions flashed across her face, but after a few moments it looked like cautious delight won out. She said, \"Nice,\" but I think it was more to reassure herself than to compliment me.\n\nIt was my turn to free her from her panties, some slinky, low-rise, lacy black ones. I approached the task with all due reverence. I kissed her tummy below her navel, and when she didn't stiffen, hooked the elastic with my fingertips. I slowly pulled them down in the back only.\n\n\"Still sure?\" I whispered. \n\nHer eyes looked unfocused, and she was so deep in thought she couldn't seem to breathe. She finally exhaled slowly and nodded. Slow as Christmas, I drew them down. What emerged in front was a complete surprise: she had a full bush, neatly trimmed so it wouldn't leak out of a bikini. I hadn't seen that in years -- every lady I had been with since I began college either had a narrow racing stripe or was shaved completely smooth.\n\nWhen I first became sexually active, all girls, at least the ones I knew, had full, natural, untamed bushes. The first time I encountered a lady who shaved, I nearly came on the spot just from looking. It was the sexiest thing I had ever seen. Lately, though, being shaved is common -- either shiny smooth or with half an inch of landing strip, an inch at most. Spencer's thatch was hypnotic. Face to face with it, all I wanted to do was stare. Now this was the sexiest thing in the world.\n\nHer nether hair was fine enough that her slit peeked out. It was visibly engorged, a screaming hot shade of pink, with cute little crinkles of inner lips peeking out from the outer ones. I kissed the smooth skin right above her pubes.\n\n\"Joe...\" she said, trembling, \"Stop. I, I'm not ready. I want to be, but... \"\n\n\"I understand,\" I said, partially telling the truth. Obviously I had much to learn before I could fully understand.\n\n\"I-\" she began, but I cut her off by pulling her in for a hug. She melted into it. She sat up, pushed the covers back, settled onto her pillow, and reached for me. \n\nThere are few gestures as honestly tender as being reached for. Words can be false, nakedness doesn't always indicate feelings of closeness, and there are so many ulterior motives for sex it is unreliable as a sign of affection. But I've never known being reached for to be anything but a pure, sweet statement of warmth. I reached for her as well. \n\nOnce again, she fell asleep, leaving me alone with my thoughts. They congealed into a minor revelation. Her bizarre combination of eagerly initiating things then fearfully shrinking from them made sense if I sorted the things she had told me into a linear story: she had been sexually traumatized, she aggressively wanted to be back to 'normal,' she had taken a year mentally working through things, tonight was her first time with a live guy since the abuse, and turning her mental recovery into practice was harder than she expected. Sleep came easier for me with a realistic hope that she was on a healthy course, hopefully near a breakthrough.\n\n: : : : :\n\nWe slept until mid-morning. She fixed us breakfast in bed, fresh fruit with a yogurt and honey sauce. We made a real date for the following Friday night, but didn't decide what we'd do -- she wanted me to surprise her. \n\nResting her head on my chest, she said, \"I'm embarrassed at how emotional I got.\" She struggled to find words. \"And I'm mortified that I didn't... couldn't... follow through... with actual... sex. I've worked so long, and so hard, I really thought I was over the damage Sam did to me. I guess not... I feel like an idiot... I'm a failure...\"\n\n\"You said this is your first time since him, right?\" She nodded. \"That doesn't make you a failure. Give yourself a break -- he obviously put you through hell. Anyone would struggle to overcome that. I can see how hard you're working.\"\n\nAt her door, she said, almost whispering, \"Please don't cancel on Friday.\" I promised I wouldn't, and kissed her. It was another great one.\n\nTo say I thought about her the rest of the day would be a laughable understatement. \n\n: : : : :\n\nThe apartments I live in are gated. That might sound ritzy and elite, but it's not. In this part of town, all but the very cheapest apartment complexes are. There are two ways to enter. The residents' lane has a keypad where we enter a personal passcode to raise the gate. Visitors drive up to a guardhouse and give their name and who they are visiting. The guard phones the resident to approve entry.\n\nImagine my surprise, then, when Sunday evening there was a knock on my door. I hadn't authorized anyone through the gate, and I never interacted with my neighbors. I looked through the peephole, and opened it as soon as I saw who it was. \"Spencer!\" \n\nShe looked incredibly nervous. I stood aside and said, \"Come in.\" \n\nShe looked around my apartment and saw it was relatively neat. Obviously, since I wasn't expecting her, I couldn't have straightened up on her behalf. She said, \"Wow. This how you keep your place?\"\n\nTurning on the charm, I said, \"Um, yeah.\" \n\n\"I'm impressed. Where are the empty pizza boxes and beer cans?\"\n\nI laughed, but I wondered many things, such as how she found my apartment, how she got past the gate, and what was on her mind. \n\n\"My apartment requires me to have a land line for the guard to call when there are visitors. I thought yours might, too, so I looked you up. Old school -- you're in the phone book. There are only two J. Bloes listed, and according to the GPS on my phone, the other one lives in a house on the far side of town.\"\n\nI nodded. She continued, \"And over the summer I had a part-time job delivering pizza.\" \n\nI didn't get it. She explained, \"There's a 'pizza code' for the gates -- all the apartments and all the pizza joints use the same number. The drivers don't get delayed, and the guards don't have to confirm multiple pizza deliveries every night.\"\n\n\"That makes sense,\" I said.\n\n\"So, what am I doing here?\" She was answering my questions in order - was she reading my mind? \"I have this sliver of a memory, from what feels like a long, long time ago. I remember these amazing hugs, and some world-class snuggling. It's a faint memory, though.\"\n\n\"Friday night does seem like a long time ago, doesn't it?\"\n\n\"Yes,\" she barely whispered. \n\nI drew a breath to offer her a seat and something to drink, but she was so nervous she couldn't stop talking. The more she said, the faster she spoke. \"I remember these amazing hugs, and this incredible snuggling, and I felt really safe with you, and I'm not used to feeling safe with guys, I mean I used to, but that really was a long time ago, and I've had a terrible time since then, and I really want to be able to feel safe again, and-\"\n\n\"Spencer...\" I interrupted softly but firmly, gripping her shoulders. For a second we both just awkwardly stood there. She looked panicked, and I hoped I hadn't spoken too harshly. I held out my arms, and she melted into them. \n\nShe trembled as I held her. I pushed her shoulders back from my chest to kiss the tears from her cheeks, but what I saw was a huge smile -- she was laughing. \"I babble when I'm nervous. You were perfect cutting me off -- firm, but gentle.\"\n\nShe leaned back into my chest. \"Yes,\" she said, squeezing me. \"This I what I remember. I wasn't sure if my memory was exaggerating, or if I really felt this comfortable. Mmmm, I was right -- this is heaven.\" \n\nI had DVR'd the latest episodes of a couple of the TV shows we both watch. We cuddled on the couch and watched them together. When they were over I said, \"I have an 8:00 class tomorrow.\"\n\n\"I do too.\"\n\n\"I see you brought a gym bag. Is that a change of clothes?\"\n\nVery shyly, she said, \"Yes.\"\n\n\"Would you like to stay?\"\n\nShe barely whispered, \"Yes.\"\n\nI stood and held out my hand. She took it, and I pulled her to her feet. When we got to the bedroom she didn't waste any time. \"Will you undress me?\"\n\nI began with her denim mini-skirt. I unbuttoned and unzipped it. I slowly eased it over her sweet hips half an inch at a time, revealing her panties -- lacy red this time. I dropped her skirt to the floor, and she stepped out of her shoes, kicking them and the skirt to the side.\n\nI repeated from Friday night, \"Are you sure?\"\n\n\"Yes,\" she said, not very convincingly. \"Pretty sure,\" she corrected.\n\nI kissed her. She responded enthusiastically. Good -- so far, no stress. \n\nHer top was like a t-shirt but nicer, with a wide neck surrounded by elegant stitching. I lifted her hands over her head and left them there, tracing my fingertips down to the hem of her shirt. Looking into her eyes I saw calm, so I lifted it past her tummy and bra, which was red to match her panties. As her face emerged from the neck I kissed her again. \n\nFreed from her shirt, she wrapped her arms around me, pulling me tight against her chest as our kiss reached new heights. I broke the kiss to say, \"You're the best kisser I've ever known,\" and she blushed. \n\nI reached under her panties and cupped her butt, and feeling no tension, worked my hands up to her bra and unhooked it. I eased the straps off her shoulders, and slouched my back to separate our chests slightly so I didn't have to break our kiss to drop the bra on the floor. \n\nI still had my shirt on, so I couldn't feel her breasts on my chest. I started to pull my shirt up, but she said, \"Nuh uh. If your rule is any kind of fair, then it should work both ways.\"\n\n\"Both ways?\"\n\n\"You get to undress me, I get to undress you.\" \n\nIt seemed like a wonderful idea. Leaving her panties on for the moment, I lifted my hands in the air. She slowly, teasingly, sensuously pulled my shirt over my head. She kissed each of my nipples briefly, distracting me from noticing that she was pulling my running shorts down. That was when she found my little 'in for the evening alone' secret. \"Oooh, commando!\" she squealed.\n\nInvoking my rule, I kissed each of her nipples. I knelt in front of her and kissed her tummy right above her navel. I could feel her breasts resting on my scalp. I gazed upward at her face, framed inspiringly between her boobs. I hooked my fingers in the elastic of her panties, and asked, \"Still sure?\"\n\nShe nodded.\n\nSlowly, slowly, slowly, I slid them down. Her bush surprised me again -- I had forgotten about it. It still looked sexy as hell. Her personal bits peeked out, more engorged and brighter pink than before. Little droplets of arousal clung to the nearest hairs. Whatever reluctance she was feeling, it was all psychological -- physically, she was freakin' ready to ride.\n\nI stood and took her by the hand. She stepped toward my bed, but I stopped her -- I had other plans first. I lifted her hand over her head and twirled her slowly in a circle, a partner-dance move done to an impossibly slow tempo. I blatantly checked out her body, front and rear, as she pirouetted. I found the moment, both of us naked, taking my time to study the fine details of her body, almost unbearably exciting. My dick felt like it was going to burst.\n\nHer breasts were perfect: large, round, and somehow soft and firm at the same time. Her waist curved elegantly down to her luscious hips, her tummy was both flat and soft, leading down to her sweet blonde triangle, and her ass was a soul-stirring, firm, round, succulent treasure. Its shape was perfect, its skin fabulously smooth. \"So beautiful...\" I said in a low voice that I hoped sounded sexy.\n\n\"Why Hugh, are you an ass man?\" she said teasingly.\n\n\"With you I am,\" I replied. She blushed. \"And a face man, and a breast man, and a waist man, and a quim man-\"\n\n\"Quim?\" She giggled. \"What kind of word is 'quim'?\"\n\n\"Somehow 'pussy' seems too crude to describe something so delicate and sweet.\"\n\nShe blushed again. \"'Quim' it is, then.\" Her laughter trailed off as I leaned in to kiss her again.\n\nCompliments always seemed to surprise her. I thought that more of them would be good for her psyche. As we eased onto the bed, I said, \"I have to say, I've never had this much fun just getting undressed with someone before -- you're amazing.\" She glowed in response.\n\nI nudged her onto her back and settled in beside her. I stroked her face and leaned in for another kiss, this one as light as I could make it -- lip barely brushing lip. She sighed into my mouth. I vowed to take my time and make this an exquisite experience for her... well, actually, for both of us.\n\nI kissed down her cheek, under her chin, and down her neck. I cupped a breast and lightly brushed the nipple with my fingertips. I kissed the other one, brushing my lips from side to side across it, feather-light. She moaned, very throaty, almost a purr.\n\nI continued teasing her nipple with my fingers, and began easing my mouth downward, kissing continuously. When I reached her navel I kissed a circle around it, flicking my tongue as I went. I massaged her hips with both hands, caressing her gentle curves. I began to kiss lower, down her tummy, and that's when the train came off the track. Her body stiffened and her thighs clamped tightly shut. She turned onto her side, her back to me, blocking me from any possibility of continuing to romance her lower body. She moaned again, this time in despair rather than pleasure. \n\nI slid up alongside her, and gently pulled her shoulder so she faced me. I was afraid she would push me away, but she pulled me in, and rested her forehead on my shoulder, clearly distraught. \n\n\"What did I do wrong?\"\n\nIt took her a moment to form an answer. \"Nothing,\" she murmured, \"nothing. I'm just, I'm just... shit, I don't know, I'm just fucked up. I'm damaged goods.\"\n\nUsing my gentlest tone, I stated the obvious. \"This has to do with Sam, right?\" She nodded. \"Obviously, he forced you to have sex even when you didn't want to.\"\n\nShe nodded. \n\n\"Did you know that's rape?\"\n\nHer eyes widened. She shook her head. \"He was my boyfriend. I was his girlfriend.\"\n\nI kept my voice soft and even. \"His girlfriend, Spencer, not his whore or his slave. Even if you had married him, if he forced you to have sex when you didn't want to, that's rape.\"\n\nShe nodded, almost imperceptibly. \"I'm lucky I didn't marry him. I mean, he never asked, I don't think marriage ever crossed his mind, but if he had asked, I, um... I probably would have said yes.\"\n\n\"That wouldn't have been pretty.\"\n\nShe nodded and began explaining. \"When I met him, things were fine, for months, until I moved in with him. Actually, things weren't fine, there were obvious clues that he wasn't the nicest person in the world, but I didn't notice. \n\n\"The second or third week I lived with him, he had his biker friends over for poker. He asked me to keep them set up with beers and snacks, and I was fine with that. Later in the evening, though, he demanded I serve them topless. I didn't want to, but he ripped my shirt and bra off.\n\n\"He was on a losing streak. I heard him raise the next bet, and some of the guys barked at him that he didn't have enough money.\" She took a deep breath. \"He said, 'If I lose the hand, Spencer will blow the winner.' I charged in and said, 'Not gonna happen!' He backhanded me, knocked me to the floor. By the time the evening was over, he had me blow them all.\"\n\nShe paused, staring at the floor, avoiding my eyes. \"Are you sure you want to hear this?\" I nodded.\n\n\"The next day, he didn't exactly apologize, but he sort of implied that maybe he might have gone too far. I should have left him then... duh! But I had no money, and nowhere to go. And I had no experience with anybody that abusive, so I had no idea how bad it could get.\"\n\nThe further she got into her story, the quieter she spoke, and the more monotone -- all the expressiveness left her voice.\n\n\"Next time he had them over, it was Monday Night Football. Blowjobs for all the guys again. No apology this time.\"\n\n\"Jeez, Spencer, you put up with that?\"\n\n\"What I've learned is, he was a classic manipulator/abuser. When his friends weren't around, he was kind, he was affectionate, he was generous, more than enough to string me along. The nice things he did -- always in private -- kept me from realizing how badly I needed to get out.\n\n\"The worst was another poker game. I refused to blow any of his friends, so he knocked me to the floor -- again -- and tied me to the bed, spread-eagle, with my head hanging off the side. He cut my clothes off while they stood around the bed cheering, and told them they could fuck me, anywhere they wanted -- 'no holes barred,' he said. Um... are you still sure you want to hear this?\" \n\nSoftly, I said, \"Tell me the whole story now, and you'll never have to tell me again.\"\n\n\"Most of them fucked my pussy, he had never let them go there before. Several of them, though, fucked my mouth, even though I had blown them before. This was different -- with my head hanging off the mattress, they could try to penetrate my throat. They laughed when I gagged, and with my face upside-down, they laughed when their balls bounced off my nose. \n\n\"One guy fucked my tits. He came all over my upper chest and neck. He gathered the blobs of goo on his fingers, and fed them into my mouth -- needless to say, I wasn't allowed to spit it out. A couple of them tried to fuck my ass, but Sam had tied me too tight to the bed to manage that. They did stick their fingers way up into me back there.\" She blinked back more tears. \"I moved out the next day.\"\n\n\"Did he come after you?\"\n\n\"I'm sure he would have, but he went on a motorcycle rally that weekend. He lost control of his bike and had massive head and chest injuries. He was in a coma for five days before he died.\"\n\n\"Jeez,\" I said, \"no wonder you stress over sex.\" I pulled her into a hug. \"I'm amazed you're as functional as you are.\" \n\nI held her for minutes upon minutes. Any words of comfort I could think of seemed hopelessly small and inadequate. All I came up with was simply to hold her some more. \n\nShe finally said, \"Uh, Hugh?\"\n\n\"Yeah?\"\n\n\"Can I have a rule, too?\"\n\n\"Of course.\"\n\nShe paused, deep in thought. \"Could you let me do the initiating? I mean sexually. Could I be the one to start things, each step of the way?\"\n\n\"Of course.\"\n\n\"Except kissing.\" I nodded. \"You can kiss me any time.\" \n\nI kissed her, and said, \"Good. I like that.\"\n\n\"And hugging. Hug me any time you want to.\"\n\nI hugged her. \"I like that too.\"\n\nShe smiled. \"But from undressing onward, let me initiate things? For now. Until I get better.\"\n\n\"Sure. That's a good idea.\"\n\n\"Are you sure it's okay?\"",
        "I said, softly, \"How about we try it? If it doesn't work, we'll change it.\"\n\nShe nodded, sleepily. I pulled her into a hug. \"Any time you want,\" she whispered.\n\nI kissed her cheeks. \"Any time,\" she said. \n\nI kissed her forehead. I kissed her eyelids. I kissed the bridge of her nose. I kissed her mouth, and she returned it. \"Any. Freaking. Time.\"\n\nAs we began to drift off she said, \"I don't want the night to end talking about Sam. Tell me how you became Hugh.\"\n\n\"When I was three or four, my uncle Joey -- my mom's brother -- was visiting. Apparently I heard him say the name 'Hugh' and it tickled me. I went around saying it over and over, laughing. Until then, my mom had called my dad Joe and me Joey, to keep us straight. With my uncle there, though, there were two Joeys. She would call out to me and he'd answer, and vice versa. \n\n\"Uncle Joey started calling me Hugh. He wasn't even trying to solve the 'too many Joeys' problem, he just thought it was cute that it always made me laugh. It stuck -- I've been Hugh ever since. It's been great. Over the years I've known several Joes and Joeys, but never another Hugh.\"\n\nShe smiled -- I loved seeing her tension melt away.\n\n\"Tell me about the name Spencer.\"\n\n\"My parents are from Latvia. When my mom was little, her aunt had a traditional Latvian name that my mom couldn't pronounce. It came out sounding something like 'Sbensar.' Her real name was Sabina-Sarma, which is sort of a Latvian version of Sue Ellen or Mary Jane. Imagine a three-year-old trying to say 'Sabina-Sarma' -- 'Sbensar' doesn't seem that far off. Everyone thought it was adorable, and it became her nickname for the rest of her life -- like you and 'Hugh.' \n\n\"My parents are intelligent people, but there are nuances of American culture that they've never mastered. They were delighted when they encountered the American name 'Spencer,' because it reminded them of 'Sbensar.' It escaped them that Spencer is a boy's name. When I came along, with all the love in the world they named me after my great aunt.\" \n\n\"Davis doesn't sound very Baltic.\"\n\n\"It's not. Wow, I'm impressed -- most people have never heard of Latvia, much less know that it's a Baltic country. It's a common story among immigrants: the agent who processed them into the United States couldn't make any sense out of their actual surname, Dzerins. 'Davis' was his idea of the Anglo equivalent, so that's what he wrote on their paperwork. When they became citizens they could have changed it back, but they believed the U.S. had bestowed the name Davis onto them, and out of respect for their adopted land, they kept it.\"\n\nHer eyes were at half-mast when she finished her story, her breathing deepening and slowing. She was asleep in no time, and a minute later I was too.\n\n: : : : :\n\nMonday morning, once again, I found myself wide awake before dawn, although this time she was asleep, her back spooned into my front. I draped my arm over her waist, slow and gentle so I wouldn't disturb her. She wasn't asleep, though. She took my hand, pulled my arm tight to her chest, nestling it between her boobs. \"Are you awake?\" she whispered.\n\n\"Yeah,\" I said. \"Obviously, you are too. Don't you want to try to go back to sleep?\"\n\n\"It's less than an hour until time to get up, so probably not.\" She turned over, and we cuddled, front to front. \"I've been awake for a while, thinking. Can I tell you something? It's kind of heavy...\"\n\nAfter everything she'd already told me? I braced myself. \"Sure.\"\n\n\"I, um, I just, uh... I just want to thank you for being so patient with me. I know I'm a mess. My emotions have been all over the map, and I realize I've left you high and dry -- twice. Not only have you not bailed, but you've been quite a gentleman. I want you to know, I've noticed, and I'm impressed.\"\n\n\"Not every guy is abusive pond-scum like Sam.\"\n\n\"I'm learning that, but not every guy is a prince like you, either.\"\n\nI kissed her forehead. \"I know we just met, and I'm not supposed to say anything like this yet, but I really like you, Spencer. I mean, it's early days, we have a lot to learn about each other, but I don't see 'damaged goods,' I see someone who was treated poorly, who is working hard to overcome it, and is really, really special.\"\n\nShe glowed. She barely whispered, \"I like you, too, Hugh.\" She giggled at her unintended rhyming. \n\nShe paused. \"I also want to thank you for accepting my rule. You've noticed, obviously, when I feel any expectation, even a little, to do something sexual, I freeze. So far, though, if I initiate it, I'm okay.\"\n\nI nodded.\n\n\"I've been worried I might never be able to enjoy sex again, but you're helping me see that I will. I know I'm just barely crawling at this point, but I'll be walking soon, and I won't quit until I'm running -- until I'm sprinting -- you'll see. We won't need this rule forever -- I can feel myself getting over the fear more every time we're together.\"\n\nI nodded again.\n\n\"It helps that I really like what you do to me.\" She pulled me in closer to her. \n\n\"I love, for example, how you kiss me.\" She kissed me, long, hard, and passionate. Tongue wrestled with tongue, lips massaged lips.\n\n\"And I love how you kiss down from my face to my chest.\" She kissed down my face, down my neck, across my upper chest.\n\n\"I love how you kiss my nipples.\" She kissed my nipples, sucking them into her mouth, circling them with her tongue, flicking her tongue rapidly over them -- much more than I ever did to her. Giving me a road map, perhaps?\n\n\"I love how you kiss my navel.\" She kissed down to my navel, romancing it and tonguing it like it was a miniature pussy.\n\n\"I love how you kiss my tummy.\" She moved downward, dragging her lips across my skin, punctuating her downward progress with several mini-licks and kisses.\n\n\"And I love how you suck my cock.\"\n\n\"WHAT?\"\n\n\"Ha!\" Her face melted into one huge smile -- she was quite proud of herself. \"Your rule, dude, right back atcha! You say totally unexpected things to me, so I get to say totally unexpected things to you. You startle me, I startle you. Learn to like it!\" \n\nI loved that she was relaxed enough to tease me about blowing me. I never, however, expected her to actually do the deed. I thought she just said it to shock me. \n\nI was amazed when she surrounded the tip of my cock with her lips. It began as merely an open-mouth kiss, but she drew me into her mouth, glacially slow, sucking continuously. Her mouth felt like molten velvet, soft, sensuous, and magnificently warm. She pulled an inch of me into her, an inch and a half, two inches, two and a half inches, three inches, all the while swirling her tongue. I moaned, low and guttural. After a long blissful moment, she began pulling off, as slowly as she had drawn me in. She reached the end, holding my glans between her lips, and let it pop free with an audible smack.\n\nAs good as this felt, I didn't want to trigger any panic. \"You're not pushing yourself too hard, are you?\"\n\n\"No. I'm pushing myself just right. I need to do this -- it's what I want. It's what I need.\"\n\n\"I wouldn't blame you if you never blew anybody again, ever.\" \n\n\"I refuse to be that girl. If that's how I end up, then I'm still his victim -- he wins. I want to do this. This is how I win. This is for me.\" She hesitated before continuing. \"Make no mistake, though, it's also for you. You've been so patient with me. I mean, you-\"\n\n\"Look, you don't have to-\"\n\n\"Shut up and enjoy having your dick sucked, you moron!\" she teased. \n\nThat was advice I could follow.\n\nShe drew me back into her mouth, not quite as slow as before, and a bit deeper. She pulled off, still sucking like crazy. It was heaven. \n\n\"When this is my idea, I like it. A lot. You taste good.\"\n\nUm, I liked it too.\n\nShe began to pick up speed. She seemed completely at ease, focused on my pleasure without a trace of lingering fear. Her mouth was almost electric in its warmth and moistness. She stroked me at a perfect pace. Before long, I could feel the inevitable building. I was about to warn her, and I worried about where to aim when I pulled out of her mouth, but she paused briefly and said, \"I can't wait to taste your cum,\" and resumed sucking.\n\nAny reservation I had about cumming in her mouth evaporated. I exploded, launching stream after stream of jizz into her throat. She moaned, she hummed, she sucked even harder -- she was magnificent. \n\nWhen I was through, she slowed down, but didn't stop until my body unwound completely. She kissed my tip a final time and slid up beside me, tucking her face into my shoulder. \n\nI kissed her passionately. When I was younger, I hated the taste of my own cum, but I eventually realized that avoiding a girl's mouth after cumming in it is a quick ticket to fewer blowjobs. Or no blowjobs. \n\nIt took Spencer a moment to realize I wasn't disgusted by the taste of her mouth. A chill rippled across her body and she leaned into our kiss for all she was worth. She tucked back into my shoulder. \n\n\"See, it's working. You let me drive, and I didn't panic -- not even a little.\"\n\n\"You're amazing.\"\n\n\"I am? I mean, yes, I am.\"\n\n\"Would it spook you if I told you it was a great blowjob?\"\n\nShe grinned. \"I don't know. Let's try.\"\n\n\"That was a great blowjob!\" Her face sparkled with pride.\n\nI was astonished how much progress she had made in such a short time. She was obviously working hard to overcome the damage that Sam and his friends did to her, and her work was paying off, rewarding her, but also rewarding me quite nicely.\n\n\"I'm proud of you,\" I said.\n\n\"I'm proud of me, too.\"\n\nWhen the alarm went off, we hit snooze several times and cuddled. For too long, it turned out; we both had to rush to be on time to our 8:00 classes. \n\nAs we hugged goodbye, she said, \"I think my rule is a good one.\"\n\nI did, too. \n\n: : : : :\n\nMonday I had classes. My internship required full workdays on Tuesdays and Thursdays, so I shouldered an entire semester's class load on Mondays, Wednesdays, and Fridays. It made for long days. Fortunately, at that point in the semester, I had minimal homework, enabling me to talk to Spencer on the phone Monday evening, for several hours -- we seemed to be able to talk forever. Tuesday was an extremely slow day at work, until about half an hour before quitting time, then a project came in, extremely urgent, of course. We worked until midnight to get it finished. At least I get paid overtime.\n\nWednesday, as I drove home after class, I thought about calling her after dinner. I hadn't even set my backpack down in my apartment when my phone rang. \"Have you eaten?\" she asked. \n\n\"Not yet.\" There was a knock on my door, so I said, \"Hold on a second.\" It was Spencer, holding her phone to her ear, a huge grin on her face, carrying my favorite pizza from my favorite joint. She hadn't asked -- turns out it was her favorite too. Neither of us had any homework so we watched a couple of episodes of 'our' shows on my DVR. \n\nI had a hard time concentrating on the TV. My mind kept drifting to how she looked naked, how her body felt snuggled into mine, how her breasts and bottom felt in my hands, how her lips felt pressed against mine, how her mouth felt surrounding my cock, how heavenly her pussy was going to taste, and how my cock was going to feel when I finally buried it in her. \n\nI would have to wonder a little longer. We kept our clothes on, and she didn't spend the night. \n\n: : : : :\n\nFriday -- at last! I took her to a hole-in-the-wall Italian place with exquisite food and an intimate atmosphere -- they only had six tables. She loved it. I introduced her to Prosecco, a dry sparkling white Italian wine. I had the bartender add a dash of Campari, a bittersweet Italian liqueur, giving the wine a rich crimson glow and an extra-deep flavor. She loved that, too. We must have looked quite enthralled with each other -- at the end of our meal the waiter brought cannoli, which we hadn't ordered. I pointed that out, and he nodded at one of the other tables. A much older couple smiled at us warmly, grasped each other's hands, and said \"With our compliments. You remind us of when we had just met.\" \n\nAfter dinner, I drove her to a hilltop on the outskirts of town with a beautiful panoramic view facing west. Nature was showing off that night, sunset was spectacular. I availed myself of the opportunity to kiss her 'any time.' Emerging from dusk on the horizon as the sun faded were lights from Clifton's. A little nearer, we saw an old-school traveling carnival, in town for the weekend, which is where we went next. It was pure, simple fun. We rode the Ferris wheel and the Tilt-A-Whirl, and shared a cotton candy. I dunked a clown by hitting a target with a baseball, and won her a stuffed unicorn at the ring toss.\n\nIt might have been the Italian food, the sunset, the carnival, the unicorn, or all of them combined, but something won me an invitation back to her place. Or, maybe she had planned all along to bring me home so we could continue working on her recovery. I know that breaking down barrier after barrier was hard work on her part. I like to think I made it a little easier by being empathetic, or maybe by simply being there without any physical or verbal abuse. \n\nOn the drive back to her apartment she had me stop at a liquor store, where she bought some Prosecco and Campari. This time we actually spent time in her living room. She brought out her 'wine glasses' -- they looked a lot like jelly jars. I dribbled a tablespoon of Campari into each glass, then filled them half-way with Prosecco. Again, the color was rich, sensuous, and inviting. After a couple of sips, I kissed her 'any time.' It was another long, sensuous, impressive one.\n\nWhen we came up for air, I paraphrased her from Sunday night. \"I have this sliver of a memory, from what feels like a long, long time ago. I remember some amazing, world-class kissing.\" I kissed her again, a brief but rich one. \"Mmmm, I was right. This is heaven.\"\n\nHer smile grew as she recognized her own words, blossoming into a radiant glow in response to the compliment. Looking quite eager, she had me stand. She led me through the sexiest -- but most unusual -- strip-tease I ever experienced. She stripped me. I was the one being undressed, but she did the undressing. And she was definitely the one being sexy. \n\nShe seemed to be pretending this was her first time ever, and everything she uncovered was the first one she had ever seen. She pulled my shoes off, then my socks, and was clearly fascinated, apparently experiencing the intimacy of a man's bare feet for the first time in her life. When she felt ready to proceed, she bravely unbuttoned my shirt, revealing the mystery of the male navel. She probed it with her fingertips, and brushed her lips and tongue across it as if her sense of taste might help solve the riddle. \n\nShe pulled my shirt open, uncovering an unfathomable wonder: male nipples. At first she just stared. She cautiously worked her fingertips over the surrounding flesh, moving slowly inward until she finally dared to touch them. She explored them in great detail, and when they didn't explode in her face, she cautiously, timidly kissed them.\n\nI was steel-hard, almost painfully aroused by this game of hers, but I summoned every ounce of self-control I had and let her take her time. It appeared to have a purifying effect on her. She actually seemed to be rebooting to an earlier, more innocent self, as if this really was her first encounter and Sam had never inflicted any cruelty upon her.\n\nShe slipped my shirt off, enthralled with what she found underneath. She circled me and thoroughly examined my shoulders, massaging them when sight alone didn't explain things. She returned to my front, re-exploring my nipples and navel, then working downward, leading to my pants and belt. Since it was her 'first time,' my belt buckle and zipper baffled her briefly, but she finally got my pants down and off, revealing the greatest mystery yet: boxer briefs. \n\nHer eyes and fingers thoroughly explored the front, taking in the seams, the elastic, the fly. She seemed most mystified by the underlying bulge, and used fingertips and palms to explore the barely-constrained shape. My cock pulsed in response to being touched, spooking her. She prodded again in the same area, and the same reaction startled her again, so she circled around to the back.\n\nShe fingered the bottoms of the legs, discovering the cloth could be pulled away from my skin. She slid her hands underneath and massaged my butt, only pulling out when things got too snug. She moved to the waistband and discovered that not only could it be pulled it away from my body, it could be pulled down, uncovering my ass. She stared at it, and touched it, but apparently sight and feel weren't enough, so she kissed the whole area. She had gotten all the way down to the crease between my cheeks and thighs when she discovered that the entire garment could be pulled down and off. She continued exploring my butt, and then slowly, cautiously, turned me around to face her.\n\nShe was fascinated by my hard-on, approaching it like a cat investigating a new toy. She leaned in to examine it closely. It twitched and that startled her, so she quickly pulled back to a safe distance. She leaned to one side to scrutinize it from a different angle, again leaning in for a closer view then abruptly pulling back, as if it might be a predator, coiled and ready to strike. She returned to her center view, then leaned in the other direction, exploring it from a three-quarter angle and then from the side. Whenever she got 'too close' she jerked back to safety, but each time she approached, she came a little nearer as her bravery and confidence built. \n\nShe returned to the center, and came near enough to lick it or take it between her lips, but she backed away, stood, and reached for my hand. Instead of leading me to the bedroom like I expected, she lifted my hand as far as she could reach. She turned me in a slow circle, a partner-dance move done to an impossibly slow tempo. She blatantly ogled my body front and rear as I pirouetted. I found the moment, me naked, her fully dressed and taking her time to study the fine details of my body, almost unbearably sensual. I felt like my dick was going to explode.\n\nShe sat on the sofa and placed me, still standing, with my feet between hers. My hard-on waved in the air, barely an inch in front of her face. She leaned forward and captured it with her mouth. She surrounded the tip with the lush softness of her lips, using such an intense combination of sucking and swirling her tongue on the underside that I nearly came on the spot. She eventually drew me in, little by little -- it took an agonizing fifteen seconds for my cock to reach the back of her throat.\n\nShe held me there, two thirds of my cock in her mouth, which felt almost unbearably soft and warm. She began pulling off me, as slowly as she had taken me in. Her next trip in and out was not quite as slow, and the one after it was slightly quicker. A few more trips in and out and she was now actually blowing me, still slowly, but with an identifiable rhythm. I have no idea how I avoided cumming yet. \n\nShe let my dick pop out of her mouth. \"This is fantastic,\" she said, \"I didn't know if I'd ever be able to suck cock again without feeling revulsion, or even hatred. You're amazing, how patient you've been with me, how you let me drive.\" \n\nShe went back to long-stroking me, taking me in all the way to the entrance to her throat. I didn't point out that she had initiated the sexual part of our date as quickly as any guy could ever hope, or that she was the one doing all the work, or that she was the one who was amazing.\n\nI was going to cum very soon, too soon. She was at the end of my cock, only the tip remaining in her mouth, and this trip was probably going to be the stroke that finished me. I cupped her head, holding her from plunging over me. She glanced up quickly, afraid that she had somehow displeased me. When she saw my facial expression, though, which had to be a mindless mixture of hedonistic contentment and wanton desire for more, I think she realized that she was doing great and I just needed a brief break if I was going to continue.",
        "She stood and led me to her bedroom. She sat me on the edge of her bed and stood in front of me. It was now my turn to undress her, and I took my time. As her body emerged from her clothes, it wasn't as fine as I remembered, it was finer. Much finer. This time her bra and panties were a regal purple, and this time her bush didn't surprise me. I gazed upon her, slowly turning her to enjoy the dorsal view along with the frontal, and simply said, \"So freaking beautiful.\" She glowed at the compliment.\n\nI reached to pull her onto the bed, but she swatted my hand away and sunk onto her knees. She pulled my cock into her mouth and resumed with full-length strokes from her lips to the back of her throat, all the while sucking and swirling her tongue on the underside. Its effect was immediate -- she had barely started, and I exploded into her mouth. She sucked all the jizz out of me, then slowed the stroking and swirling until I was soft. She kissed my tip over and over, lifted her eyes to mine, and whispered, \"Love it, love it, love it.\"\n\nI pulled her onto the bed, and we settled side by side. I took the opportunity to kiss her 'any time.' Once again, this kiss took on a life of its own, becoming another soul-stirring trip to timeless eternity. I was careful to stay within the boundaries of her rule, softly stroking her from the small of her back up to the nape of her neck, but she eagerly led me past those limits. She captured my hand and placed it at the upper edge of her bum, then slid it down over her ass. Thus approved, I cupped it and massaged it, her skin smooth and cool to the touch.\n\nShe pulled my hand up and across her waist and over her hip to her front. She lifted her upper knee, placed my hand on her inner thigh, and guided me upward until my fingers met her slit. I teased the wrinkles and folds, already gratifyingly moist and slick, drawing light circles around her opening. I cupped her mons and slid up and down, flexing my middle finger on the wet, warm crease in the middle. I slipped between the outer folds, and went a little deeper each trip.\n\nSoon my finger probed her fully, dipping deep and pulling out, while I brushed my thumb back and forth across her clit. She spread her legs wide, giving me deeper access. I slipped a second finger into her, below the first one, gave her several thrusts to adjust to it, then brought it up beside the first one, stretching her wider. My thumb kept her clit busy, and I curled my fingers against the underside of her opening, exploring the upper wall. When I found the spongy magic patch and very gently rubbed it, she arched her back and seemed to find breathing difficult. \n\nI located her nipple with my mouth, and following her road map from earlier, sucked it deep into my mouth. I flicked my tongue rapidly across it, and she exploded, lifting her ass off the bed as high as it would go, clamping my hand between her thighs. The mouth of her pussy pinched my fingers so tightly it felt like it was going to bite them off. She grabbed my head, pulling my lips tighter onto her tit.\n\nA deep, throaty groan escaped her, and I continued stroking her g-spot and clit while she trembled and quaked for what seemed like an hour. I slowed my fingers, shifted my mouth to her other nipple, sucking on it and flicking my tongue, slower and slower. She lowered her hips back down to the mattress, and I stopped rubbing her g-spot, although I left my fingers pressed against it. I continued to circle her nipple with my tongue as she relaxed.\n\n\"O-h. M-y. G-o-d,\" she rasped, \"What did you do to me?\"\n\nShe didn't wait for an answer, tugging my head up. I kissed her nipple once more, then joined her in yet another mind-blowing kiss. She broke it and pushed my face back down to her nipple, which I kissed and licked. She pulled me back up to her face, and we kissed some more. By now my fingers had slipped out of her pussy, so I drew circles around her clit, then slid up to draw larger, wet circles around her nipples.\n\nShe pulled my hand up to her mouth and kissed it. \"You have magic fingers.\" She pushed me back down to her chest for some more tongue action, purring, \"And a very talented mouth.\"\n\n\"It does more,\" I said. \n\nIt took her a minute to process that. I enjoyed watching her face morph from wondering what I meant, to hoping I meant what she thought, to understanding that was exactly what I meant. \n\n\"When you're ready,\" I added. \"No hurry.\" I suspected oral sex was something Sam never did for her, and I hoped I was giving her something exciting to look forward to. The dreamy smile on her face as she drifted off to sleep told me that was exactly how she took it.\n\n: : : : : \n\nI awoke Saturday morning, discouragingly early -- not even 8:00. She was in what was becoming a familiar position, on her side, her head resting on her forearm, gazing at me. The covers were down around her knees, and I caught sight of her breasts and bush through the narrow slits of my still-sleepy eyes. Her bare bits gave me a better wake-up jolt than any dose of caffeine, lifting me from morning coma all the way up to vaguely functional.\n\n\"G'morning, sunshine,\" I croaked, hoping to turn over for a couple of more hours of sleep, but realizing that wasn't going to happen.\n\nShe grinned at the word 'Sunshine,' then cut right to the chase, her voice alert and chipper. \"I'm ready.\"\n\nI didn't follow. \"Ready for what?\"\n\nShe softly said, \"You said your mouth can do more,\" then she barely whispered, \"I'm ready to find out what 'more' feels like.\"\n\nSuddenly, waking up seemed like a great idea. Her brow wrinkled, though. \"You don't have to do this. Are you sure you understand what I'm asking for?\"\n\n\"I'm positive,\" I answered. \"You're asking for my mouth on your pussy, my tongue on your clit. You're asking for an orgasm on my face. Not just any orgasm, a massive orgasm, a tyrranasorgasm rex, a supercalifragilistic-expealidorgasm.\"\n\nShe laughed, but then turned serious. \"You don't think putting your face 'down there' is disgusting?\"\n\n\"No. Because it's not. Did Sam tell you that?\"\n\nShe nodded. I sighed, letting her hear my exasperation. \"I'd say, bummer, it was his loss, but the sad thing is, it was your loss, too.\" I let that sink in. \"Sam didn't understand the concept of 'fair,' did he?\" She shook her head. \n\n\"Think of it this way: you're not asking me to do anything that you haven't already done.\" She looked unconvinced.\n\n\"Let me tell you about two of my favorite things in life. One is receiving oral sex.\" She quickly nodded. She obviously knew that guys love blowjobs. \n\n\"The other is giving oral sex.\" It took her several long seconds to process what was apparently an alien concept. \"I love being able to cause that much pleasure in another person.\" Her face flushed as she anticipated feeling 'that much pleasure' herself.\n\nI expected her to say something like \"that's different,\" but before she could, I kissed her. She resisted, but then kissed back. I let the kiss linger, then it was time to get busy. I don't usually feel pressure, but this time I did; from me, though, not from her. I wanted this literally to change her life.\n\nI centered her on the bed and eased a pillow behind her shoulders. I knelt between her knees, kissed her tummy, and lightly caressed the undersides of her boobs. She didn't tense up any, yet, but to be sure I didn't trigger any anxiety, I didn't head straight for her pussy. I kissed upward, between her breasts, and over to a nipple. I gave it the full deluxe treatment: kisses, drawing circles around it with my tongue, sliding my moist lips over it, vibrating my tongue over it, sucking it into my mouth.\n\nI kissed a trail over to the other tit. She lifted her hips off the bed, rubbing her bush on my stomach. Her slit felt so hot and moist, so ready, I had to remind myself that all this slow, leisurely foreplay was for a reason: to ensure a shatteringly great main event. I wanted this not only to be a mega-orgasm, I wanted the process of getting there to be unforgettable.\n\nI romanced her other nipple even more thoroughly than the first one, kissing, licking, sucking, writing her name on it in cursive, trying to read which of those things she liked best. As far as I could tell, she loved them all. She moaned in pleasure, somewhere between a purr and a growl. I took that as a sign that I had done enough with her breasts, but despite an overwhelming urge to rush, and dive straight into her pussy, I lingered there a bit longer. Her boobs were such magnificent creations, spending more time with them was its own reward.\n\nShe nudged my head, pressing it lightly downward. I kissed down her abs, pausing at her navel to give her a sample of what I was going to do to her pussy. Then I continued down her tummy, settling in, making myself comfortable. I slotted my shoulders into place below her thighs, and caressed the sweet outer curve of her hips. \n\nMy kisses reached the upper edge of her bush, and I dry-kissed further downward until I encountered heat and wetness. I pulled her slightly open with my thumbs and introduced my facial lips to her nether ones with a slow, open-mouth kiss. I traced the edges of her opening with my tongue, feeling electricity where her flesh met mine. She seemed to feel it too. She lifted her hips clear off the bed -- not to buck me off, but a seemingly involuntary reaction to how good what I was doing felt. \n\nShe was eager to cum, now. I could have easily made that happen, but I wanted to build up to something bigger than she expected. I continued slowly massaging her opening with my lips and tongue. Each time I traveled from bottom to top, I went slightly quicker, focusing on her outer lips, flexing the soft tissue of my tongue onto her wrinkles and folds. \n\nI settled into a slow but definite rhythm, and she rocked her hips in tempo with me. I pointed my tongue, adding a tiny amount of depth to the relentless stroking. I kept my antennae out for any sign of alarm, but sensing none, I deepened each pass. Soon I was licking as deeply into her channel as my tongue could reach.\n\nI began to speed up, and felt her legs flex as her toes curled. I slid my hands down to her knees and lifted her thighs, pressing them onto her chest. Her slit flexed further open, allowing me greater access to the soft tissue surrounding her clit. I added suction to the tongue action, and felt a trembling begin in her thighs. It started tiny, but it built from a whisper to a scream the more I sucked and tongued. I centered my mouth on her clit, sucked it out of its protective sheath, and slid the width of my tongue back and forth across it. She grasped the back of my head with both hands, pulling me tighter against her mound, and I changed my tongue on her clit from sliding back and forth to vibrating up and down. The tighter she pulled me, the faster I went.\n\nI took her hands and wrapped her arms together behind her knees, trapping her legs tightly against her chest. My hands now freed, I brought one up under my chin and slid two fingers into her slit, finding the spongy dot on the upper wall. That finished her off. She bucked, she writhed, she moaned, and she thrashed her head back and forth, her nether lips quaking mightily against my face. She crossed her ankles behind my neck and twisted me from side to side. I hung on, sucking and tonguing her clit, trilling my fingers against her g-spot.\n\nShe peaked and began decompressing in tiny stages, breath by breath, muscle by muscle, slowly softening from an ecstatic ball of muscular contractions to a gelatinous, boneless blob. I lightly kissed her outer lips. Once her breathing had nearly returned to normal, I slid up beside her. She rolled onto her side and draped an arm across me. Her breath wafted across my face, and I could see the artery in her neck pulsing, but other than that, she showed no signs of life. I took that as a sign of mission accomplished. In no time I joined her in deep, restful sleep.\n\n: : : : :\n\nI was becoming accustomed to waking before dawn to find her staring at me, and once again I found myself awake early. This time, though, it was not her eyes locked on mine. It was her lips on my cock. I must say, there may be no finer way to wake up. I was already three-quarters erect, and when my brain realized what she was doing, I snapped to steel hard. \n\nShe realized I was awake and pulled off, saying \"Good morning, Sunshine\" with a huge smile. She plunged back over me without waiting for a response. She held me full in her mouth, sucking and swirling her tongue -- she was learning what I like. \n\nI tried to say \"Good morning, Sunshine\" back at her, but being barely awake, and rather distracted by the sensations on my cock, it came out \"Mmmmormmm Zhumm-zmmm,\" more of a moan than anything intelligible. I felt a vibration on my dick that I think was her giggling at my mush-mouthed attempt to speak. \n\nShe began to stroke me, barely an inch at first. My dick glowed in the embracing warmth of her mouth. She slowly added more length to each stroke. By the time her strokes reached from my tip to where I bumped her tonsils, I was ready to pop. \n\n\"Gonna cum,\" I rasped.\n\n\"Umm hmmm,\" she responded without breaking rhythm. \n\nI came hard. She swallowed and continued stroking me, gradually slowing, perfectly easing me back to earth. She gave my glans a final kiss, slid up beside me, and tucked her face into my shoulder. I kissed her deeply, and we cuddled as I caught my breath. \n\nI was awestruck by Spencer, but not only because she was overcoming such major demons so amazingly quickly. I mean, she was, and that was fabulous, and I was elated for her. However, I'm not that altruistic. I was impressed because she was incredibly good at sucking cock. As in, the best I'd ever experienced. By far. Head and shoulders above the rest. No one else was even close.\n\nShe broke my reverie by saying, \"I meant to do that last night, but you wiped me out. I came so hard, all my intentions evaporated.\" \n\nI nodded, caressed her cheek, and managed to rasp, \"I know what you mean.\"\n\nShe recognized the compliment and smiled. \"That's three times I've blown you without panicking. Three times! The first couple, I have to admit I felt like I was sticking my middle finger straight up Sam's nose. 'You see, you asshole? You didn't ruin my life, motherfucker!'\" \n\nShe smiled, proud and defiant, but softened the moment by adding, \"Neener neener neener!\" \n\nWe shared a deep belly laugh, and held each other, enjoying each other's warmth.\n\nShe continued, \"But that time, that was 100% for you, Sam had nothing to do with it. I see what you mean about how great it is to give. Feeling the depth of your response and realizing 'I caused that!' is amazing.\"\n\n: : : : : \n\nWe spent Saturday together doing domestic things. We ran errands, went grocery shopping, and did laundry. We even did a load or two mixing her clothes with mine. \"This is quite a commitment,\" I said as I shut the washer door and started the machine. She grinned at the teasing without worrying if there was an embedded criticism -- another step of progress.\n\nAt the grocery store, they had some beautiful fresh local basil. I asked if she liked pesto, and she gushed, \"I love pesto.\" The best pesto contains pine nuts, which are expensive, but I sprung for them. That night I made pesto lasagna, and she continued the Italian theme by making a green salad with Cannellini beans, balsamic vinegar, thinly sliced Parmesan, and the rest of the basil. We opened more Prosecco, serving it with Campari, of course. On my college-guy budget, I can't afford wine with dinner very often, but since we were staying in, not having to pay for a date compensated. \n\nDinner was simple but delicious. As we began to clear the table, I said, \"I have some new episodes on the DVR.\" She smiled, shook her head, took my hand, and led me to the bedroom, leaving the dirty dishes where they sat.\n\nWe undressed each other, taking turns -- my shirt then her shirt, and so on. This time her bra and panties were an elegant champagne color. We fell onto the bed and into one of our deep kisses. I caressed her back, rubbing up to the nape of her neck and down to the small of her back. The third or fourth time, she grasped my hand and placed it on her ass. I didn't ask if she was sure, because the twinkle in her eyes told me I didn't need to.\n\nThat sparkle intensified, and she said, rather timidly, \"So that thing you did with your mouth, you know that 'more' thing?\" \n\nI nodded. \n\nBarely audibly, she said, \"Can you do it again?\"\n\n\"Yup.\"\n\n\"Are you sure? I mean, can you get the same result?\"\n\n\"I know how to find out.\"\n\nI barely had the will power not to dive straight into her pussy -- it was such a sweet thing, and it was so gratifying how she responded. I forced myself not to hurry; I wanted this time to be at least as good as the first time, preferably better.\n\nI kissed her tits all over, then concentrated on her nipples, applying my lips and tongue in multiple ways to see how they -- how she -- responded. \n\nMy plan to start leisurely and sensuously was scuttled by her eagerness. I had barely gotten started when she pushed my head downward, straight to her groin. \"Enough foreplay -- get busy,\" she croaked.\n\nShe pulled my face tight against her pussy. She was dripping wet. I locked my lips around her clit. I could tell she was very near cumming, but she was closer than I thought -- the instant my tongue contacted the engorged little bud she exploded.\n\nShe writhed, she thrashed, she rolled her head from side to side, she made an impressive series of animal noises. I held her clit between my lips, rolling it, sucking it from its hood, and vibrating my tongue over it mercilessly. She lifted her butt a foot off the mattress and her body went rigid, trapping my face between her thighs, her only remaining movement a quaking in her abdomen. \n\nAs her climax peaked and she began to float back to earth, I kept my lips and tongue on the wrinkles and folds surrounding her clit, pulsating a slow rhythm. She softly hummed, rocking her hips in sync with my pattern. She began to lean into it, pressing her sensitive bits harder onto my face. Could it be she wanted to go again? Outstanding -- her wish is my command!\n\nI began to long-stroke her channel, ending each trip with soft, wet suction on her clit. After a couple of passes, though, she pushed my forehead away. She closed her thighs and pulled me up alongside her. \"Nope,\" she said in a whispery, playful voice, \"Don't you dare start again.\" Good, it wasn't a panic attack. \"I'm barely going to be able to recover from one. I think another orgasm like that, right now, might be fatal.\"\n\nWorry darkened her face. \"Are you sure that's not disgusting?\" \n\n\"Do I seem disgusted in any way?\" \n\nShe shook her head and kissed me.\n\n\"Are you disgusted now?\" I asked.\n\n\"No, why?\" \n\nI paused while she realized she was kissing her own juices off my face. \n\nShe scrutinized my lips and cheeks closely and looked horrified. \"Your face!\" she squealed, \"It's drenched! I'm so sorry, I made a huge mess.\" She wiped my mouth, cheeks, and chin with a corner of the sheet, apologizing non-stop. When I could finally get a word in, I reassured her that not only was I fine, I was more than fine. She looked skeptical, but I insisted she tasted wonderful, and I loved -- loved -- her eager response. \n\nShe resumed kissing my face. \"So this is how I taste?\" \n\nI nodded. She looked unsure of herself. \"It's not so bad, is it?\"\n\n\"It's divine. That's why people call it 'honey,' or 'nectar.'\" \n\nShe stared at me, certain that I was joking, but rather than argue she rested her cheek on my shoulder. I wrapped my arms around her, holding her close. \n\nShe purred, \"If you couldn't tell, that was freaking amazing. You have an incredible talent.\" Her eyes sparkled and she sounded a bit impish as she said, \"But I'm still not convinced you can do that every time. I'll need more proof, on a regular basis. Daily, I think. Then I might start to believe it.\"",
        "I smiled, pleased at the compliment, but I was thrilled that her reaction to the sex was so upbeat and confident that she was able to tease about it, and that she could so comfortably ask for more. She had come so far in such a short time, it was like watching time-lapse video of a flower blooming in seconds instead of hours.\n\nWe cuddled for a nice long while, then she pushed me onto my back. She straddled my chest, way too high for cowgirl, but giving me an incredible view. My eyes began at the nexus of her thighs at her bush, with her naughty bits peeking out, still engorged from their tongue-lashing. I continued upward across her sweet tummy, somehow firm and soft at the same time, then up to her amazing boobs. \n\nWhen I first laid eyes on this gorgeous creature at Clifton's Barbecue, I never could have imagined I would have such an up-close-and-personal view of her charms eight short days later. My eyes finally made it up to her face, where I found an anxious look. \n\n\"Joe Bloe?\" she said, her voice rather stressed, a single tear rolling down her cheek.\n\n\"That's me,\" I gulped.\n\nShe bored holes in my eyes with hers. \"You've been such a prince. Sam taught me never to trust, but I feel empty without being close to someone. I feel incomplete without sharing my heartbeat with another soul, but it takes trust to do that.\" She paused until I nodded. \"I'm working my ass off to unlearn what he taught me, but it's harder than I ever imagined. You've been so patient with me.\" \n\nI took her hands in mine, and waited. This was her moment to release anything that she needed to. \n\nShe hesitated, the look on her face saying she feared what she was going to say next. I braced myself. \n\nShe finally whispered, \"I have another rule.\"\n\nI raised my eyebrows and twisted my face into a look of mock horror. \"Another rule?\" She nodded. \n\nImpersonating Billy Crystal's old Yiddish guy, I said, \"Again with the rules!\"\n\nShe laughed and said, \"It's a rule for me, not for you.\" She looked like she was gathering her thoughts. I gave her all the time she needed, holding her hands. \"I don't have 'amazing feelings' very often, but when I do, my rule is, I listen to them.\"\n\nI nodded, and she continued, \"Right now, I'm having this amazing feeling that you're not going to hurt me. Do I dare trust you?\"\n\nI nodded and said, \"Of course.\" \n\n\"Promise?\"\n\nI gave her a scout's honor salute, and said, \"Promise.\"\n\n\"You're going to have to be patient.\"\n\nI said, \"I can do that,\" and caressed her face, wiping away a tear. She nibbled nervously on her lower lip -- even upset, she was adorable.\n\nHer eyes stayed laser-locked on mine. \"I'm worth it.\"\n\nI started to say something reassuring but bland like, \"Spencer, you certainly are,\" but I realized what a huge step that simple statement represented. I recalled how she delighted in hearing her own words repeated, and her wonderful, musical laugh when I said something unexpected. I said, \"Promise?\"\n\nHer eyes flared in surprise, and she couldn't contain her laughter. Obviously, though, intense emotions were pinballing around inside her head, and her smile faded away while another tear leaked from her eye. I kissed it off her cheek, and her face noticeably relaxed.\n\nShe rolled off me, eased onto her back, and pulled me on top of her. She kissed me deeply and laced her legs around mine. She caressed the back of my head while we kissed, and with her other hand she guided the head of my cock to the warm, wet spot between her thighs. She slid my tip up and down between her outer lips, moistening it with her juices, and with only a tiny hesitation, centered it on her sweetest opening. She lifted her thighs up around my ribs, placed the soles of her feet on my butt, and slowly, gently, pulled me in, all the way to the hilt. \n\nHer pussy was the tightest, wettest, and hottest I had ever felt, and my dick had never felt so long, thick, and hard. We both held still, my dick completely buried in her. I had a brief extra-sensory moment where I glimpsed our future together: hot lust and pure love, both never-ending. I felt her eyes gazing into mine, and she seemed to share that image.\n\nShe began rolling her hips. \"Fuck me, 'uh Hugh.' Fuck me until you can't fuck me anymore.\"\n\nThis was going to be an amazing ride.\n\n: : : : :"
    ],
    "authorname": "TexRiffraff",
    "tags": [
        "party of one",
        "barbecue",
        "prosecco",
        "campari",
        "gated apartment",
        "pizza code",
        "cannoli",
        "carnival",
        "unicorn",
        "full bush"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/rules-5"
}
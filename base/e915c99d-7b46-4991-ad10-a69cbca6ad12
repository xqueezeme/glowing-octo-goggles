{
    "title": "There and Back Again Ch. 057-058",
    "pages": [
        "Chapter Fifty-Seven: Explanations \n\nAedan reached out and pulled me into a hug. A few more tears rolled down my cheek, but I refused to lose it again. I pulled away. \n\n\"Let's go see who's up.\" \n\nWe got ourselves dressed, in clothing, not armour, and then wandered out to the main room. Sten and Shale were there already, standing against various walls. Tomas, Dariel, Gorim, Wynne, Zev, and Levi were all sitting in a rough circle, gnawing on jerky. Leliana was in the room next to ours; her door was open, and I could hear her humming as she moved around. Morrigan was further down the hallway, and she came out when she heard Aedan saying good morning. \n\nThe only one I didn't see was Alistair, until I looked around some more; he was sitting on a bedroll, right beside the door to the room I shared with Aedan. His eyes were bloodshot, and I guessed he'd been there all night. His expression was neutral, but his hands shook slightly and I could tell it was taking quite an effort not to look at me or say anything. It might have been sweet, if I hadn't been so angry; as it was it just pissed me off. It occurred to me he probably heard everything Aedan and I had talked about. I took a deep breath and looked away. I wasn't going to get guilted into taking pity on him. I hadn't done anything wrong. \n\nI greeted everyone, and then joined the circle on the floor, with my back to Alistair. I could feel his gaze on my back; it was heavy, like a blanket. I was determined to ignore it. Leliana joined us, as did Aedan; I reached for Morrigan's hand and pulled her to sit by me as well. Sten and Shale stayed on the periphery, within hearing distance but not with us. \n\nI told them about my days with Avernus, avoiding talk of the Joining or Avernus' improved formula, but explaining his theory on my magic resistance leading to templar abilities. Wynne was fascinated, and asked permission to try something; when I nodded, I felt her cast a spell on me. I immediately felt a little more energetic, less sleepy, and I smiled. \n\n\"I think he might be right. How do you feel, dear?\" \n\n\"Good, Wynne, thanks. What was that?\" \n\n\"Just a little pick-me-up spell. Rejuvenation. But you should be positively overflowing with energy right now, not just feeling slightly better. I didn't notice it the couple of times I healed you, I wasn't looking for that, but you do resist magic. It's worse than casting on a dwarf.\" She shot Gorim an apologetic look, and he grinned. \n\nI told Alistair that his Calenhad bloodline could very well be the reason for his own impressive skills as a templar, and he flushed; I couldn't tell if he was irritated or pleased. \n\nI also told them his theory on me subconsciously wanting to go back to Earth being the trigger for my transitions. It led to a few nasty looks in Alistair's direction, and a lot of questions about various times when I'd disappeared. When we went through them, each time had at least some impetus. \n\n\"What about when we met up with everyone in the Wilds?\" Morrigan asked. \n\n\"I'd briefly wished I'd disappear and reappear with them so that I'd know they were okay. I guess it was a little delayed.\" \n\n\"What about in Redcliffe when we were all at the Tower?\" Leliana asked. \n\nI blushed. \"I had a...disagreement, with Theron.\" \n\n\"And what about after Denerim, the first time?\" Aedan asked. \n\nI laughed. \"It occurred to me that I wanted to see if I could bring my phone over and play some music for Leli.\" \n\nAfter a bit more laughter and discussion, we finally settled again. We decided that everyone needed a few days to recover from the strain of the last week, and Tomas wanted to explore the Keep. I told them that there were at least two secret caches I was aware of, and Zev and Leli immediately set off to search for them. I'd never made a deal with the Sophia demon, but I'd read there was a hiding spot with some money in it - Zev headed there to try to find out. Leliana decided to wander the Keep and see if she found any portraits, and I reminded her about speaking the Grey Warden oath. \n\nSten and Shale went off somewhere, Levi refused to leave the safety of the common area we were in, and Dariel and Gorim stayed put to keep him company. Wynne wanted to explore Avernus' library, so she and I accompanied Tomas, Aedan, and Alistair up to Avernus' area. I dragged Morrigan with me, hoping for a chance to talk to her about fertility. \n\nWynne peeled off to the library, the Grey Wardens headed in to Avernus' lab, and I stayed out with Morrigan. With a surreptitious look at Wynne, I pulled the witch into the little room I'd used and sat her down with me on the couch. \n\n\"Thanks for punching Alistair.\" \n\n\"You are quite welcome, though I did not do it for your thanks. The simpleton has no right to treat anyone like that. If he had not drained my mana, I would probably have done worse.\" \n\nI hugged her, and to my surprise she allowed it. \n\n\"I need a favour.\" I was a little nervous asking Morrigan for a favour, but she just smiled. \n\n\"What do you need, my friend?\" \n\n\"I need you to help Avernus with something. I've made a deal with him, and he's going to try to improve the Joining formula. He already knows how to do some of the improvements, but I've asked him to try to decrease the infertility it causes. He isn't familiar enough with fertility rituals, so he says.\" \n\n\"And you believe I am?\" \n\n\"Well, I hoped. Given the whole reason Flemeth sent you with us, I know you can somehow conceive with a Warden. I'm assuming part of that ritual ensures the fertility of the Warden, otherwise you couldn't guarantee conception.\" \n\n\"I see. I have to ask, though. Why do you wish this?\" \n\nI looked at her in surprise. \"Why wouldn't I? Anything that improves things for the Grey Wardens is a good thing.\" \n\n\"I had hoped you were done with the templar, after what he did.\" \n\n\"I am, Morrigan. Or rather, he's done with me.\" She gave me a dirty look. \"This has nothing to do with him.\" \n\n\"Does it not? Aedan swings for the other team,\" she grinned and I giggled at the mangled Earth terminology, \"Tomas is too old to worry about such things...whose fertility are you worried about, if not Alistair's?\" \n\n\"Mine. Among others.\" \n\nShe looked at me, eyes narrowed in suspicion. \"You said you made a deal. What was your end?\" \n\n\"What you expect. He wants me to take the Joining, and then take some of my blood to study.\" \n\n\"What?\" She jumped up off the couch and whirled towards me. \"You cannot seriously be considering this.\" \n\n\"If it saves people's lives? Keeps my brother with me for an extra twenty years? Boosts recruiting for the Grey Wardens? Damn right I'm considering it.\" \n\nShe paced back and forth, and I could practically see the wheels turning. She stopped after a bit, staring at my face. Finally she sighed and sat back down. \"This improved formula will really do that? Save people? Keep Aedan alive longer?\" I nodded. \"I'll never talk you out of it, in that case, will I?\" \n\n\"No.\" \n\n\"What do you need me to do?\" \n\n\"Just help Avernus figure out how to affect fertility. I'm sure he can tell you more than I. And maybe, when he's ready...maybe distract the boys so they don't try to stop me?\" \n\nHer expression was reluctant, and I carefully schooled my features to hide any doubt I felt. She finally agreed. We headed back out into the library, finding Wynne sitting at a table with a stack of books, taking notes on some parchment. We sat for a bit, and eventually Avernus came out with Aedan, Tomas, and Alistair in tow. Tomas was talking with Avernus, and I could only hear a few words of the conversation, however it was obvious he was telling Avernus not to use any more blood magic or human sacrifice for his research. Avernus, for his part, was acting very humble, but there was a smirk hiding underneath the fa\u00e7ade, and I could tell he wasn't seriously listening. If he hadn't already agreed to the terms with me, I might have been worried. \n\nAedan told me the bodies had been dealt with - I assumed they'd been burned by a fireball or some such from Avernus. They also informed Avernus in no uncertain terms that his lab was not off limits to myself or the Grey Wardens, and that he'd be watched while we remained at the Keep. His eyes flashed with irritation, but it looked more like righteous indignation than anything. I let it go. \n\nMorrigan spoke up and asked to speak with Avernus; I saw Wynne shoot a suspicious look at the witch's back, and even Aedan looked uncomfortable leaving the two apostates alone together. Before he could say anything, I volunteered to stay and keep an eye on them. Tomas wanted Aedan and Alistair to spend some time looking around, making lists for what would be needed to renovate the keep for eventual use, and the three men left to do that. Avernus volunteered to Wynne that she could take some herbs and vegetables out of his garden, and her frown eased. \n\nI followed Morrigan into Avernus' lab, curious to see it. The faint smell of cooking flesh remained, so I knew I was correct about how the bodies had been disposed of, but there was nothing objectionable remaining in the lab. I pulled up a chair and half listened as Morrigan and Avernus started talking shop about fertility and rituals, but with the greater portion of my brain power, I was thinking about my reaction to Alistair. \n\nI was still angry, obviously. But a small part of me just wanted to accept his apology and leap into his arms. At the same time, it was a good thing I wasn't a mage or I might have zapped him with something really nasty. \n\nOverall, I was stuck with one conclusion - nothing would be the same again, and the world was a lot sadder for that fact. \n\nI wondered if I'd ever be able to be friends with him, even. Given that we'd never exactly been friends before, that we varied between a hesitant truce and him thinking I was a whore, I doubted it. We didn't have anything to fall back on. \n\nMorrigan and Avernus worked late into the afternoon, and I paid attention only enough to realise they were making headway. Avernus promised to finish it off over the next day, and allow Morrigan to test it; the day after that would be my Joining.  \n\nWe met back with the group for supper. Wynne and I brought some fresh produce from the garden, and Leli made a lovely soup with them and some jerky and spices she'd bought in Denerim. Things weren't as lively during the meal as they had been before I disappeared, and I was sad for the loss of the easy camaraderie we had shared. I hadn't actually heard Alistair speak since the night before, when they'd first come through the door, and despite how angry I was, I missed his sense of humour. \n\nI insisted Aedan and Zev share a room for the night, and I bunked down with Prince, who seemed happy enough to accompany me. I cried a little, until the dog licked my face and made me laugh. I slept reasonably well, and woke feeling relatively refreshed. \n\nAlistair was asleep outside my door, again, when I got up in the morning. I almost said something scathing, but managed to hold my tongue. We all toured the Keep together after breakfast, and Zev and Leli got to show off their finds. The place was huge, easily big enough to hold hundreds of Wardens and their support staff. Each area in the living quarters was like the one we had been using - a shared central area and several bedrooms. It would make it easy to house squads together. There were even married quarters, for Wardens or staff I wasn't sure, but it gave me hope that with the changes Avernus promised, one day the Keep would be fully utilized again. I could almost close my eyes and picture the place, full of Wardens, servants scurrying everywhere trying to keep food on the table. I could see the same expression of hopeful longing on Tomas' face, and I knew he was picturing the same thing. \n\nI knew at some point I was going to have to have a conversation with Tomas about the Grey Wardens. Everything I'd seen or read indicated that the First Warden was a political figure, the true power behind the throne in the Anderfels, yet somehow the rest of the Wardens were supposed to stay out of politics. They were hiding secrets that really needed to be shared, and I got the impression they were more than happy to leave Ferelden for the Orlesian Wardens to manage, which wasn't helpful. Regardless of their intentions, Fereldans would never see anything but Orlesian influence when they looked at the Wardens if that continued. Something needed to change, and I hoped Tomas could be made to see that. I wondered what the First Warden would do if the Grey Wardens in Ferelden simply did their own thing. \n\nI put it off. I couldn't handle another fight, in case he disagreed. I wasn't entirely clear where he stood on the Wardens, whether he would go along with anything that came from his chain of command, or whether he would make his own decisions. I decided to wait to find out. \n\nLeliana claimed me for the afternoon, and we spent a while hauling and heating water before each having a bath. Once clean and dressed, we met in her room and she combed out my long, curly hair for me. She was respectful, but I knew she was hoping for information about Alistair and me. I'd have called it gossip, except that I knew she would keep anything I told her confidential. I didn't get into the details anyway - I was sick of crying - and she let me know that although she was disappointed that our love story had ended badly, she supported my decision not to be with him. She was angry on my behalf, which was sweet, and didn't want to see me hurt by him again. \n\nI was surprised - she was usually all for second chances - but she told me that though she would still hope something would work out, she wasn't going to expect it. In her words, he would have to earn it. I smiled sadly; I didn't even have enough hope in me to think that was possible. \n\nThat evening, I was lounging around the main room of our little wing of the keep when Alistair approached me. I was careful to keep my expression neutral, but I avoided eye contact. I couldn't bear to show how deeply I was hurt. \n\n\"Sierra?\" \n\n\"Yes?\" \n\n\"Can we talk?\" \n\nI paused to try to control the angry retort; I was successful, but even I cringed at the coldness of my tone when I replied. \"I think everything that needed to be said, already has been, don't you?\" \n\nIn my peripheral vision, I could see his face redden. To his credit, he didn't respond to my ire with venom, but kept his tone respectful. \"Please?\" \n\nI sighed and scrambled up from the floor, just as Aedan approached. \"Absolutely not! You're not going anywhere alone with him.\" \n\nI waved my hand restlessly. \"It's okay, Aedan. I'll be right back. I can handle this.\" His expression was unhappy and anxious; he watched me walk away with Alistair with narrow eyes. \n\nWe left the wing everyone was in and found a small nearby sitting room, also devoid of furniture. Alistair made a fruitless attempt to clear away some dust with just his hand, and finally gave it up as a bad job. I settled against a wall, facing sideways to him so I could continue to avoid meeting his gaze. \n\n\"I don't...I don't really know what to say,\" he started. \"I can see that you are angry and hurt, and I deserve that, I know, but...couples fight, don't they? Can't we, I don't know, talk about it? There's got to be a way to get past this. It seems like you're just giving up.\" \n\n\"A fight? That's how you see what happened?\" \n\n\"How do you see it? You kept something from me, and I was angry; I lashed out and hurt you. We are both to blame.\" \n\nMy hands clenched. \"I see it as a great, big sign that says that you are so self-absorbed that you refuse to look at anything from my perspective. You didn't ask why I didn't tell you earlier. You just made an assumption, without giving me any benefit of the doubt, and chose the worst possible motivation you could think of to run with. \n\n\"I don't regret not telling you. It wasn't a decision made to manipulate, but rather to avoid hurting Aedan. How did you think he'd react to learning he could just as easily have died in Highever? It didn't change anything, because the situation was what it was. Going over what might have been would only have hurt him. As it did, because I didn't think through the consequences of that damned video.\" \n\nHe looked thoughtful. \"I never thought about it like that.\" \n\n\"I know. That's my point. You are willing to assume that I would be that manipulative, that I would lie to you and hurt you on purpose. That's not love, Alistair. You can't love if you don't trust. I am well enough aware of my shortcomings to know that I have trust issues. I've spent a lifetime trying not to care about anyone so they couldn't hurt me. I never dreamed that I'd fall in love, I never felt worthy of love, and you've just completely cemented that for me. I should have listened to that inner doubt all along. It was right.\" \n\nHis expression was shocked, his face pale after my outburst. He looked dazed, actually, and incapable of speech. \n\nI turned towards him, hoping he would listen. \"You love the idea of love. You love that someone loved you. But you never trusted me, not really. Even at his worst moment, Aedan never believed that I kept information from him maliciously; he was angry at the implications of what he'd learned, but did not think I was trying to hurt him, to use him. He knows me well enough to know that I never could. You didn't trust me enough to believe I had my reasons. I know that some people would do what you accused me of - use information to manipulate feelings and accomplish a goal, but you should have known that I am not one of those people. You're supposed to know me better than anyone. To trust me. Why would you love someone you didn't trust? The answer is obvious. You didn't.\" \n\nHe didn't respond, and I muttered under my breath in the silence. \"No one ever has. I should have known. Instead, I trusted you. And look where that got me.\" \n\nHe ran his hands through his hair and rubbed his face. \"Are there other things you haven't told me?\" \n\n\"Yes. Some of them to protect you. Some of them because they don't matter; they will never come to pass as things stand currently. Some because, despite everything, I didn't think you capable of this sort of betrayal.\" \n\n\"Will you tell me? Please?\" \n\n\"No. I won't. There are reasons for me to keep some of the things I know to myself. Some of them are needlessly hurtful, to you or to others. Why bring up painful possibilities that we will never face? You aren't the only one whose feelings I have to consider.\" \n\n\"I...I need to think.\" \n\nI nodded and stood. \"You do that. Maybe next time you meet someone, she'll have better luck.\" \n\nHe flinched, and the guilt tried to overwhelm me; I fled before he could say anything else. I cried a bit, wandering the empty halls, struggling to put it behind me. After a while of mindless wandering, I found myself in Avernus' lab. He looked at my red eyes and tear-stained cheeks, but fortunately did not comment. I wasn't sure what I'd have done if he'd said anything. \n\n\"We are all ready to go for tomorrow morning,\" he informed me, and I nodded. \"You might want to bring your friend. I think she would be helpful if...well, if anything happened. And she can explain to the others, so they understand-\" \n\n\"And don't try to kill you for revenge? Yeah. I know.\" \n\n\"See you in the morning, then?\" \n\nI nodded and took my leave, suddenly exhausted. The toll of the emotional strain over the last week had taken a lot out of me, and I could barely keep my eyes open. I stumbled back to my room, not saying a word to anyone. Alistair was lying right outside my door, as usual, but he didn't look up when I walked by. Aedan followed me in as I collapsed onto my bedroll and closed the door. \n\n\"Are you okay?\" \n\nI wrapped my shaking arms around my knees, burying my face. \"I don't know. Maybe.\" ",
        "\"I was worried you'd do something stupid.\" \n\n\"Not me. Worry about Alistair. I'm a survivor. I will eventually be okay.\" \n\n\"Sierra...\" \n\n\"Aedan, do me a favour tomorrow? Distract him for me? Keep him away? He keeps following me around like a puppy that I've kicked. He's been sleeping beside my door. I can't take it anymore. Please? I just need one day. Can you and Tomas keep him away for one day, please?\" \n\n\"Fine. I'll take him down to the training grounds or something. Don't blame me if he ends up with another black eye.\" \n\n\"Oh, that reminds me.\" I struggled up, my limbs feeling like they were made of lead. I went out to the main room, then wandered into the room I knew Wynne had been sleeping in. \n\n\"Wynne?\" \n\n\"Come in, child.\" \n\n\"No, I'm heading to bed. But listen, would you do me a favour?\" \n\n\"Anything.\" \n\n\"Heal Alistair's eye? I'm flattered that you're so angry with him on my behalf, but we need him in fighting form. He can barely see out of that thing. I don't know why he didn't use a poultice.\" \n\n\"Because they don't work well on eyes, dear.\" She huffed. \"Fine, I'll do it. I don't normally approve of much that young woman does, but she certainly had my blessing for that.\" \n\nI grinned. \"Thanks, Wynne.\" \n\nI left her room and headed down the hall to where Morrigan was staying, separated from everyone by several empty rooms. She looked up in irritation when I entered, but her expression eased when she saw it was me. \"Do you need anything?\"  \n\nI nodded. \"Would you come with me, tomorrow? In the morning?\" \n\n\"I would be honoured.\" \n\n\"Thanks, Morrigan. Goodnight.\" \n\nI finally headed back to my room. Alistair's eye was no longer bruised and swollen, I noted as I passed. He must have known it was me that asked Wynne; he smiled at me gratefully. I looked away and went to bed. Prince slept with me again, but I was restless; upset, hurt and angry with Alistair, and nervous for my Joining in the morning. Not many, if any, Grey Wardens Joined knowing the risks, but I knew all too well. I cuddled Prince and tried not to think about it. \n\nIn the morning, after breakfast, true to his word, Aedan grabbed Alistair, Zev, and Tomas and convinced them to do some training. When she found out there was an archery range, Leli joined them. I waited until they left, and then Morrigan and I got up and left together to 'go for a walk'. \n\nWe headed up to Avernus' suite, and found the old mage already awake and ready to go. He had a chalice filled with God knows what - well, actually I had a good idea but I didn't want to think about it. First he made me drink another one of his blood-building tonics so he could take my blood immediately afterwards, and then we had to wait while he put the finishing touches on the Joining potion. \n\n\"Morrigan, you can't let them kill Avernus. If I die, you have to stop them until they promise. I entered into this freely, don't let them punish him for it.\" \n\n\"Die? Whatever are you talking about?\" \n\n\"Look, we don't have time. Suffice it to say that not everyone survives. Please, you have to promise me. I need to do this.\" \n\nShe studied my face for a while, then turned to Avernus. \"If she dies, I will try. But know that you will have made very important enemies with this bargain.\" He nodded. \n\nFinally ready, Avernus stood in front of me. \"You know how this goes. I will say the words, and then you will drink.\" \n\nI nodded, taking a deep breath. My last one as a normal person. I indicated that I was ready. \n\n\"Join us, sister. Join us in the shadows where we stand vigilant. Join us as we carry the duty that cannot be forsworn. And should you perish, know that your sacrifice will not be forgotten, and that one day, we will join you. \n\n\"Sierra, you are called upon to submit yourself to the taint. May the Maker have mercy on us both.\" \n\nWe heard noise out in the hallway; voices. Aedan's, and Tomas'. We were out of time. \n\n\"Hurry, Avernus.\" \n\nHe handed me the chalice, and I looked down. The smell of death and blood and corruption washed over me, and I struggled not to gag. \n\nThe door opened. Aedan, Tomas, and Alistair entered from the far end. I quickly turned to Morrigan. \n\n\"You have to stop them Morrigan. Remember your promise.\" \n\nShe nodded and turned to the doorway, muttering under her breath as a shimmery barrier blocked the men's progress. I turned back to the chalice, but I could still hear the men as they took in the scene, the gasp when they realised what I held. \n\nAedan cried out, \"Sierra! No!\" \n\nTomas might have said something, but I didn't even hear it. I locked gazes with Alistair, his expression horrified; I raised the chalice to my lips, tilted back my head, and drank. \n\nChapter Fifty-Eight: Architect of my Own Future \n\nI locked gazes with Alistair, his expression horrified; I raised the chalice to my lips, tilted back my head, and drank. \n\nPain was all I could think about; it took over my mind, blowing away my identity, my sanity, my everything in its wake. And then I dreamt. I could see darkspawn; dozens, hundreds, a whole horde of them, marching. I saw a dragon, enormous, purple, and malevolent, breathing purple flames. I heard murmuring, like a whole lot of people were talking too quietly to hear the words. Then I could hear some sort of music floating over it all, a faint melody and a rhythm that matched that of the murmuring, hauntingly lovely, teasing me. \n\nThe next thing I knew, it was quiet, and I was dreaming of somewhere dark. A small, dim light flared, and by the wavering illumination of a single candle, I could see a lone darkspawn. It was an Emissary, that much was clear by the once ornate headdress and the tattered robes, but it was a good deal less revolting looking than its brethren. Its face was almost human, though looking slightly melted, but its skin was grey and mottled, like the rest of the darkspawn. It had long, bony fingers tipped with black claws. It was sitting, which seemed strange, in an armchair, with a book in its lap. I stared at it for a moment in confusion, before it looked up. Our gazes locked, and it felt like I was zapped with a bolt of electricity. By the way it jerked in the chair, it felt the same connection. \n\nIt stared at me for a few moments in turn, and then finally spoke. \"Well isn't this interesting. You are not supposed to be here. I sent you away, did I not? Far, far away. And yet, here you are.\" \n\nI tried to speak, but couldn't. Talking darkspawn? Son of a... \n\nIt continued. \"No matter now; my reasons for wanting you gone have passed, but it is curious indeed that you found your way back here. Perhaps some visions cannot be changed.\" \n\nIt seemed to sigh, and then with a wave of its corrupted, spindly arm, my sight went dark. \n\n******** \n\nI opened my eyes to see my hospital room. My doctor was standing over me, looking haggard. Two nurses who looked terrified stood at his side. He noticed my open eyes, and leaned down to look into them. I tried to move, to sit up, but I couldn't even feel my body, never mind move it. \n\n\"Seizures again?\" He sounded so disappointed in me. \n\nI tried to shrug, to respond, but couldn't. All I could do, as my eyes drifted shut again, was think. Sorry... \n\n******** \n\nI couldn't see, but suddenly I could feel again. I could feel my throat burning, my mouth dry and vile-tasting. I could feel my head pounding, my muscles tensing rhythmically. One arm ached, and I could feel the cold stone floor beneath me as I flopped around. \n\nAnd then sound returned, and I could hear. There was a voice, one that seemed familiar, but it took a bit of struggle to swim through the haze and be able to make sense of the words I was hearing. \n\n\"...Why do you think, simpleton? She did it for you.\" The voice was higher pitched than normal, but I finally placed it. Morrigan. I felt ridiculously proud of that accomplishment. \"She wanted you to be able to have a life. A delay in your Calling, whatever that is. A return of fertility so that someday you might breed little bastard princes to carry on your precious line. And thanks to you, I must maintain this damnable ward instead of being able to check on her.\" Her tone sounded worried, almost cracking on the last words. I hoped she was okay. \n\nSomeone else said something, and I wasn't able to make out the words; they came from further away, and I could feel the rumble of them more than hear them. \n\n\"I must have your word that you will allow the mage to live. I promised her. Give me your word that he will survive, and I will drop the barrier.\" \n\nMore rumbling, and then I felt a soft hand on my forehead, and breath against my cheek. \"She lives.\" I felt Morrigan's magic flare, and something warm travelled through me. \"I cannot do anything for her.\" \n\nI finally identified Aedan's voice. \"But why is she convulsing? That didn't happen to me, did it?\" \n\nI felt a steady pressure on the sides of my head, and the pounding receded a little. \"I've never seen this before, and I've witnessed dozens of Joinings. Morrigan, please, we must see Avernus. We must know what he has done. Obviously something is wrong.\" That was Duncan. No, Tomas. I remember now. \n\n\"He said he did not know anything about this. You heard him. And he has his own ward up now, I cannot do anything about that.\" \n\n\"So what do we do?\" Aedan sounded frantic. \n\n\"We wait.\" Tomas' voice was thick with some sort of emotion. I wanted to comfort them, but I couldn't move. \n\n\"If she wakes up, I'm going to kill her,\" Aedan swore. \"She had no reason, and no right. I'll strangle her with my own hands.\" \n\nAlistair spoke. \"Um, from someone who's done something rash lately, can I suggest you wait and talk to her first? Maybe she had her reasons. Just because she didn't tell you doesn't mean there isn't an explanation. Assuming she wakes up, that is.\" \n\nI felt an entirely unwanted warmth towards Alistair in that moment. \n\n\"What about Wynne? Could she help?\" \n\n\"We must not tell her. It's bad enough Morrigan knows as much as she does. People are not supposed to know how dangerous the Joining is.\" Tomas sounded pained. I hoped he wouldn't get it into his head to try to kill Morrigan - or recruit her. \n\nMorrigan spoke. \"Sierra said...that one of the things Avernus was changing would save lives. I am guessing now that she meant the number who would die during the Joining. I believe she may have motivated him to find a way to make it safer.\" \n\n\"You said something about that before. What all did she have him change?\" \n\n\"I do not entirely know; she only involved me to help with one component, which was to decrease Grey Warden infertility. She said she thought if Grey Wardens could have families, children, that it would be less of a burden, and recruiting would be easier. I assume the same can be said for fewer deaths during the Joining.\" \n\nAlistair's voice finally joined the conversation. \"She's always trying to help. It's...I'm an idiot.\" \n\nAedan laughed sarcastically. \"You're just realising that now?\" \n\n\"That's enough. Now isn't the time.\" Tomas sounded like a strict parent. I'd have grinned if I had any control over my face. \"I don't...Aedan, Alistair, could you go over there for a moment?\" There was a brief pause. I got a mental image of Aedan giving Tomas a dirty look. \"Just for one moment. Not even out of line of sight. Please.\" \n\nI heard footsteps, and then another pause. \"That's...strange.\" \n\n\"What is it?\" Aedan asked from across the room. \n\n\"Stay there. I'm coming over. Morrigan, would you stay with her, please?\" \n\nMore footsteps. \"How many Grey Wardens can you sense in this room? Both of you.\" \n\nAnother pause, and then Aedan answered. \"I can feel Avernus over there somewhere, you, and Alistair.\" \n\n\"Alistair?\" \n\n\"Same. Avernus, you, and Aedan.\" \n\n\"Exactly. We cannot sense Sierra.\" \n\n\"Should we be able to already?\" Aedan sounded even more worried. \n\n\"I could sense you from about five seconds after you swallowed,\" said Alistair. \n\n\"What does that mean?\" \n\nI heard footsteps as they came towards me again. It felt like I was flopping less, and the pain was finally receding. \n\n\"I have no idea. Except for one thing. We cannot tell anyone, and I mean no one, that she is a Grey Warden.\" \n\n\"Why not?\" Alistair sounded offended. \n\n\"Because Weisshaupt will want to study her. To understand why she does not seem to bear the taint. They will become too interested in her origin. They have the authority and the ability to take her away and never let her leave. Believe me.\" Tomas sounded bitter and I knew he was thinking of Fiona. \"I must have your word. All of you. And we will convince her when she wakes.\" \n\nThe three agreed. Tomas said he'd speak to Avernus later. I'd stopped seizing, if the lack of flopping sensation was anything to go by. They tried to decide what to do with me. Morrigan told them about the room I'd slept in before with the little couch, and the next thing I knew, someone had lifted me. I could tell by how he cradled me it was Alistair - it felt as it always did when he carried me, and even in my confused half-asleep state, I was briefly nostalgic before the heartache came crashing back down on me. \n\nMy head was clearing and thinking seemed easier, but I still had no control over my body. I expected to be placed on the couch, but instead Alistair sat down and kept me in his lap. I felt hot, and nauseous, and cranky. \n\n\"She's sweating a lot, Tomas. I think she has a fever.\" \n\nAedan volunteered, \"I'll go get some water and get some of her clothes for when she wakes.\" The door creaked, and he was gone. \n\nTomas said, \"As much as possible, we must act as though nothing is wrong. No one can suspect. I think we should all go back to the others and go about our day; if anyone asks, just say Sierra is spending her day with Avernus.\" \n\n\"I'm not leaving her.\" Alistair briefly held me closer to his chest. \n\n\"Fine. But the rest of us must go.\" \n\nThere was a bunch more footsteps, and then quiet. After a few minutes, the door creaked again and Aedan was back, briefly. Alistair shifted me, then brought a cool, damp washcloth to my face and gently began wiping it, ridding me of the sweat I could feel on my cheeks and forehead. Aedan left again, and all was silence. Eventually I drifted off to sleep. \n\nI dreamt of darkspawn again; this time it was the horde, not the lone talking darkspawn. I woke with a start and realised that I was still in Alistair's arms. I concentrated and managed to open my eyes briefly. The room was dim, but I could just see his face. \n\n\"Alistair?\" My voice was hoarse, and cracked with use. He brought a waterskin to my lips, and I drank greedily. \"What...\" I briefly tried to struggle; all I succeeded in doing was wiggling slightly. \n\nHe cut me off. \"Look, you can hate me later all you want, just let me take care of you, okay?\" He wiped my face again with the cloth. \n\nI slumped back into his arms, too tired to fight it, and fell asleep again. \n\nWhen I woke, I was lying on the couch; I briefly missed being in Alistair's arms before berating myself for that sentiment. He's not mine anymore. Better get used to it. I was a little more awake, and I managed to keep my eyes open for more than a few seconds. \n\nI found Aedan sitting on the floor at my side, watching my face. \n\n\"Aedan?\" \n\n\"It's okay. You're safe. What do you remember?\" \n\n\"A lot, actually. I remember the Joining, and then the dreams, and then you were all talking about me while I had seizures, and then Alistair carried me in here.\" I looked around. \"Alistair?\" \n\n\"Sleeping. I finally had to drug his water. He wouldn't leave.\" \n\nI didn't want to think about that. \"How long have I been here?\" I struggled to sit up, and Aedan helped me until I could lean back on the arm of the couch. \n\n\"A day. A little more, maybe. Your Joining was yesterday.\" \n\n\"That sucked.\" \n\n\"Yeah, about that. What the hell were you thinking?\" He kept his tone more-or-less polite, but I could tell he was much angrier than he let on. \n\n\"I was thinking that I could get Avernus to delay your Calling, restore your fertility, and prevent unnecessary deaths from the Joining. The price was me becoming a Warden and allowing Avernus to take my blood.\" \n\n\"A price you shouldn't have agreed to pay. I didn't want this for you, Sierra! And you lied to me, yesterday. You used me. Asked me to keep Alistair away from you, but really you just didn't want me to find out.\" \n\n\"That was the second reason. The first was still true.\" \n\nHe growled, and I sighed. \"You would have tried to stop me. And you probably would have killed Avernus. Maybe Morrigan too.\" \n\n\"Damned right I would!\" \n\n\"Thus why I lied to you.\" \n\n\"I am going to kick your ass, Sierra.\" It seemed the Earth vernacular was going around. \n\n\"That wouldn't be very hard, given how crappy I feel at the moment. Wait, I remember now. You guys were talking about me being different.\" \n\n\"We can't sense you, like we can each other. Or darkspawn.\" \n\n\"But...does that mean the Joining failed?\" \n\n\"We don't know. Tomas has never heard of this, and neither had Avernus. And there's no reason you should have been having seizures, or unconscious for a day either.\" \n\n\"But wait. I had the dreams. Oh, Maker. Aedan, I need to talk to Tomas. Right away. Alistair too.\" \n\n\"Why? What's wrong?\" \n\n\"I think I met the Architect.\" \n\nIt took a few minutes for Aedan to find Tomas and wake Alistair; it was difficult to stay awake, but I managed. They needed to know. \n\nFinally they filed in. Aedan sat with me, and Tomas and Alistair sat on the floor. I told them about the ways I'd had Avernus alter the Joining formula. Tomas was intrigued, but worried that the changes were why it didn't work. Alistair was horrified that I'd risked myself to achieve those gains. Aedan already knew, but added in that Avernus had admitted to also including in his formula something that would increase strength, health, and stamina even more than normal, as well as the odd abilities mentioned in the downloadable content in game. I was likely more able to dodge, and could use my own tainted blood as a weapon coating. Assuming my blood was actually tainted. \n\nThen I told them about my dream. Tomas agreed that it seemed likely the Architect was involved. He had told Aedan and Alistair a little bit about the talking darkspawn, but not the details. We filled them in on the gist - he was a sentient darkspawn, somehow exempt from the Call of the Old Gods, and he sought to free his brethren as well in whatever way he could, regardless of the consequences for humans. \n\nTomas' expression was one of anger and disgust. \"It had a plan to force all humans through the Joining to become Grey Wardens, and my former Commander had been tricked into helping it. The fact that it would leave more than half of the population dead, the taint spreading everywhere, and the humans that survived all-but-completely infertile didn't seem like a negative side effect to it at all.\" \n\nI added, \"It also had a plan to find the Old Gods and kill them, so a blight could never happen again - which of course, is why we're having a blight. It succeeded in finding Urthemiel, but instead of killing it, they tainted it.\" \n\nI also told them about the events of Awakening, where he developed a new plan - to make the darkspawn undergo a Joining using Grey Warden blood. The facts that the results could be unstable - hence the Mother - and that it would take a river of Grey Warden blood to give every darkspawn the Joining were not a deterrent, as usual. \n\nTomas swore, which was unusual for him. \"I'd hoped it was dead. That was two decades ago. More. How long can that creature survive?\" \n\nI shrugged. \"No one ever said.\" \n\nTomas sighed. \"So, you think it caused you to be born on Earth?\" \n\n\"Seems that way. It said it sent me 'far far away'. It sounded like it had some sort of vision that I would ruin a plan of his.\" ",
        "\"But if you had darkspawn dreams, it would seem the Joining must have worked.\" \n\n\"And I've had more since then, just generic dreams about watching the horde, things like that.\" \n\n\"Perhaps something about how it sent you to Earth explains your reaction to the Joining?\" I shrugged helplessly. \"And maybe your repetitive transitions, as well. So despite us not being able to sense you, you are indeed a Grey Warden.\" \n\n\"I...think so?\" My stomach growled, as if to agree, and we all laughed. \n\nThe three men exchanged looks. Finally Aedan spoke. \n\n\"Sierra, we talked about it, and...\" \n\n\"You don't think we should tell anyone. I heard you.\" \n\n\"You don't look pleased, but you're not shouting at me. I don't know what to make of that.\" \n\nI stuck my tongue out at my brother. \"Look, I'm not stupid. I have no desire to be a lab rat in Weisshaupt.\" \n\n\"Lab rat?\" Tomas looked confused. \n\n\"Uh, yeah on Earth, if people are doing research on stuff, they try it on animals first to see how safe it is. Rats, frequently.\" He looked revolted, and I laughed. \"Yet you eat rabbit.\" \n\n\"So you don't want to be a lab rat...\" he prompted. \n\n\"That said, after everything, I'd like to just be a normal Grey Warden. I feel like the dirty little secret. It's not how I saw this being, if I survived.\" \n\n\"Sierra...\" \n\n\"Yeah, yeah. I know. I'll keep my mouth shut.\" \n\nTomas stood, reaching over to pat my shoulder. \"We know what you are, and that's what's important, isn't it?\" \n\nI sighed. \"Only if you take advantage of the improved formula.\" And let me fight. I'll keep that argument for another day. \n\nTomas appeared lost in thought. Aedan looked angry. To my surprise, Alistair just caved. \n\n\"I'll try it first.\" He must have seen the shock on my face. \"We would have to be stupid not to, wouldn't we? I can't say I was looking forward to going into the Deep Roads on my Calling. And if it can also make me more effective...why wouldn't I? That said, we should try one at a time, in case something goes wrong.\" \n\nAedan glared at him, but Tomas nodded slowly. \"Very well, but Alistair will go second. I will go first. I'm closer to my Calling, and living on borrowed time anyway. Assuming it works, you two will do it too.\" \n\nAlistair and Aedan both tried to object, for completely different reasons I was sure. Tomas just gave them a stern look, which silenced them both. He left, then, and came back a few minutes later carrying the chalice. The smell made my throat start to burn again. \n\nWith one last look at each of us, Tomas took a swig, then handed the chalice to Alistair. In mere seconds, he screamed, falling to his knees and holding his stomach as his eyes rolled back in his head. The screaming went on for an eternity, before finally ending. Tomas slumped down, his eyes returning to normal, and then slowly, painfully worked his way to his feet. \n\n\"Well, that was unpleasant. I'd almost forgotten that sensation.\" \n\nI tittered, slightly hysterical. He smiled at me. \"I'm alright. I don't know if I'm any stronger, but it doesn't seem to have done any lasting damage.\" \n\nAlistair sighed. \"My turn then.\" \n\nThe entire thing was repeated twice more, for Alistair and then for Aedan. While they both did the screaming and the creepy eye thing, they both recovered well. \n\nOnce we were done, we tried to decide what to do with me. I was still too weak to walk, and I couldn't be seen by anyone until I was more normal. When I asked what they'd told everyone the night before, Alistair's cheeks coloured. \n\n\"Aedan told them you were avoiding me, and that I was avoiding everyone else.\" \n\n\"Can we go with that again? Hopefully tomorrow I'll be better?\" \n\nAlistair sighed. \"Fine, whatever. Everyone is mad at me anyway.\" \n\nTomas put his hand on Alistair's shoulder apologetically. He just shrugged and turned to go. \n\n\"Alistair?\" \n\nHe paused, not looking back. \n\n\"Thank you. For staying with me.\" \n\nHe nodded uncomfortably and then took off. I let him go, and Tomas followed him out."
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "fantasy",
        "fanfiction",
        "dragon age",
        "modern girl in thedas",
        "romance"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-57-58"
}
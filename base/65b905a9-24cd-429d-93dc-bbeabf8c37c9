{
    "title": "A New Teacher's Welcoming Pt. 03",
    "pages": [
        "Apologies for the delay in getting part three out, but I was hung up on how to continue the sorry tale of our hero Julian. That has been overcome and I'm now back in the groove.\n\nFor new readers you don't need to read the other two parts, but it really will help.\n\nAs always I use Australian slang terms and spelling, except for when one character speaks I use 'ass instead of arse'. Deal with it.\n\nAlso pop us a message. We love to read them. Just don't be a cunt.\n\n---\n\nI know I'm in trouble.\n\nEver since I fucked Erin and Georgie and subsequently discovered that I'm a teacher at their school, I've been on borrowed time.\n\nThen in a state of horny mindlessness this morning I fucked an Asian house maid whose husband turns out to be somewhat of a violent chap.\n\nOn the upside though I know my head teacher is a swinger and, above all, the wife of the principal likes to be fucked by any number of men.\n\nAll up, on balance, my life might be crap, but by fuck I've been getting some nice pussy and I have quite a lot of information on my peers..\n\nNow as I enter the school grounds the sight of the aforementioned Georgie and Erin sends both a shiver of terror, and one of desire, through my core, for only minutes earlier Georgie had cupped my cock in her hand, and with a serious tone, made a threat of telling Lin's husband, who as I said likes to punch on, about our spontaneous fuck session just that morning.\n\nThen I see our lovely, god-fearing principal strolling nonchalantly across the playground and all I can think of is his wife, tattooed legs akimbo and being stuffed with cock. The sight of students disobeying the no mobile phone rule was of little concern to me as I focused my thoughts on why my shirt was left behind after the party.\n\nI had my excuse all planned out, and it worked.\n\n\"Oh there it is.\" I exclaimed excitingly, \"I love that shirt, I think it fell out of my car when I got changed for the swim.\" I held it up examining it for damage.\n\n\"Did you wash it?\" I asked, \"It must have got dirty on the driveway.\"\n\nSharon stared at me closely. Looking for any sign I was lying.\n\n\"I found it inside,\" she said.\n\n\"Really? Someone must have picked it up. I bought this in London three years ago...\" I trailed off my discourse to add a sense of loss and drama, and change the topic of the conversation from its loss, to its discovery.\n\n\"Were you with your girlfriend when you bought it?\"\n\nI delayed my response, again for effect. \"Yeah, ex-girlfriend you mean.\" That part was true at least.\n\n\"No news on that front then? She hasn't come around to the idea of moving?\"\n\n\"Not at all,\" I sighed. \"To be honest, it was pretty much dead in the water, this place just gave it the final dunking it needed.\"\n\nI genuinely choked up a bit when I said it. It worked a treat, the inquisition was over and I went on through the routine and rigours of the day.\n\nIt was only when the day was over and we had our usual chit chat that I introduced a couple of subjects that had been playing on my mind.\n\nRecalling the mention of a boat club when I was hiding in their house I crafted an open question of the staff room's occupants.\n\n\"Hey all you locals,\" I began, \"I've never done any freshwater fishing before, is there a fishing club in town or even a boat club I can hire a tinny from?\"\n\nWhereas most of them took it as a genuine question and gave me places where I could fish, Sharon once more gave me that long look of suspicion which I could see from the corner of my eye. I just took notes, avoided eye contact, and it wasn't until Kathy, the skinny brunette spoke, did I get any other tantalising information.\n\n\"There is a boat club in town,\" she said with a wry smile, \"But it's certainly not where you'd go for your fishing gear.\"\n\n'Kachinng' I thought, finally a lead.\n\n\"What do you mean? Do they just rent speed boats or something, not run-abouts?\"\n\n\"Neither, I think. It's just an old clubhouse building on the river that gets used for private functions.\"\n\n\"Right,\" I was in. \"Whereabouts? Upstream, downstream, in town?\"\n\n\"On McClure Road, about four k's west.\"\n\n\"I'm sure he's not interested in some old building,\" Sharon said, \"Although Tom was a member.\"\n\nThis was it. Confirmation, in a way, that my predecessor was involved in some sort of club that I suspected was all part of their swinger's lifestyles.\n\n\"So,\" I swung my chair around and faced them both. \"How do I join? I don't play golf so some boating would be good.\"\n\nSharon tapped her pen on the table as she pondered her response.\n\n\"You're staying at the pub, right?\"\n\n\"Sure am.\"\n\n\"I'll get someone to contact you later tonight.\"\n\n\"I could do it,\" Kathy said.\n\n\"No,\" Sharon immediately interjected. \"I'll find someone available. What's your phone number?\"\n\nI rattled off my number and caught a glimpse of Kathy writing down the number as well before giving me the up and down treatment and quickly turning back to her work.\n\nThe work conversation returned and soon enough we were all heading out the door as if all was normal.\n\n\"Marcus said to pop into the real estate agent, I think he may have a house for you,\" Sharon called out as she left. \"Tom's old place.\"\n\nNot only did I have this Tom guy's classes, desk and chair, but I was in line to get his house as well. At least the rent would be cheap.\n\nAs soon as I got back to the hotel I got changed and rode my bike down to the estate agent with only about 10 minutes to spare.\n\nHuffed and with a slight glimmer of sweat on my brow I opened the door and nearly fainted when I saw the tall slender woman, with a tattoo on her ankle, stand up to meet me.\n\n\"Ahh, we meet again,\" said Kelly, the principal's wife. \"Julian isn't it?\"\n\nImages of her ankle, filmed less than 24 hours earlier, were embedded in my brain, and indeed in the phone held securely in my hand.\n\n\"Yes, sorry,\" I was ready for Marcus, not for Kelly. \"Still trying to remember everyone I meet, it's been a bit confronting coming to a new town, and all that.\"\n\n\"I know exactly what you mean,\" she said. \"We moved here eight years ago, for only two years, or so the contract said, but we love it, everyone is very friendly.\"\n\n\"Uh, yeah, well,\" I commenced saying, but fortunately Marcus must have heard our discussion and was a delightful diversion for me.\n\n\"Hey bloke,\" he shook my hand and offered me a beer which I refused as politely as I could.\n\n\"I'm going for a ride after this, next time maybe?\"\n\n\"Yeah, no worries, you know where we live so pop out at any time. You could even ride that thing out if you wanted to,\" he gestured to my bike.\n\n\"I suppose I could.\"\n\n\"But for now mate, put it inside here and we'll lock up and drive you over to the teacher's housing for a look see.\"\n\nBeing a real estate agent in the country requires you to drive an all wheel drive of some description. In this case Marcus drove an Audi. Pretty much useless in most conditions, but by Christ it was comfortable.\n\n\"Nice ride,\" I said. \"Had it long?\"\n\n\"Few months now,\" he said. \"I got rid of the Range Rover once the warranty ran out.\"\n\nThe prick was loaded.\n\nWe meandered through what I could only ascertain was the dodgy part of town before we swung into a series of four 1970 era villas that I immediately took a dislike to.\n\n\"Have to say, they're not doing it for me. Why do they build teacher housing in such shitty locations?\"\n\nKelly chuckled. \"The land's cheap and you're right, they're nothing spectacular, but they're cheap.\"\n\n\"How much?\"\n\n\"$150 a week, plus expenses.\"\n\nI was tempted by that, but I figured running the air-con wouldn't be cheap and my bike would probably get nicked. \"Is there much else around for a bloke like me, you know, single and doesn't want to drive out here when he's had a few?\"\n\nKelly looked at Marcus and smiled.\n\n\"There're a few big houses in town but to be honest, they're overpriced,\" she said. \"The only real option if you want to stay in town is where your predecessor lived.\"\n\n\"What?\" I asked. \"I thought he lived here?\"\n\n\"Yeah he did,\" Marcus answered, \"For about a month in the first one just there.\" He pointed to one of the units with a torn fly screen window and a broken barbecue out the front.\n\n\"Then he moved into town into a granny flat out the back of a house on the river.\"\n\n\"Righto,\" I said, intrigued. \"Can we pop over now for a bit of a gander?\"\n\n\"I'll call Gill and see if she or Jack are home?\" She said.\n\n\"Jack and Jill?\" I chuckled. \"You're having me on.\"\n\nMarcus nodded, \"It's Gill with a G, so you know, not exactly a nursery rhyme.\"\n\n\"Gill,\" Kelly said enthusiastically. \"Are you home because I think we may have a new tenant for your granny flat.\"\n\nAll I could hear was the excited chatter of Gill on the phone and the affirmation of a visit within 10 minutes.\n\n\"It's out on West River Road so an easy bike ride or walk home if you cut through the forest or an even quicker drive on the highway, much closer than this shit hole to be honest,\" Marcus said.\n\n--\n\nThe house was indeed beautiful. An older style Australian colonial home that had been renovated and upgraded with all the mod-cons. As we walked up the drive Kelly received a message which directed us out the back.\n\n\"She's out near the pool,\" she said.\n\n\"A pool?\" I asked, \"How much is this place?\"\n\n\"That's negotiable, it will depend on what Gill thinks of you.\"\n\n\"Really? That's a bit random.\"\n\nMarcus turned to me and said. \"It's the country mate, we're much more relaxed out here.\"\n\nAs we wandered down the path I had visions of Jack and Gill being an old saggy retired couple but my expectations were jettisoned into space when I saw Gill.\n\nHere was a striking middle-aged woman in her mid to late 40's wearing a black bikini that most 20 year olds wouldn't have been able to pull off.\n\nRather than wrap the towel around herself as most people would do, Gill simply wiped the water from her face and walked towards us. I couldn't help but look, and she noticed it.\n\n\"Do you like what you see?\" she asked, immediately disarming me.\n\n\"I uhm, well, uhm.\"\n\n\"I mean the house and pool,\" she laughed.\n\nPathetically I shook my head. \"Well yes, not what I expected at all.\"\n\nShe toweled her short brunette hair as she looked me up and down as country people do, like she's checking out cattle.\n\nIn the pool was another much younger lad who I correctly assumed wasn't Jack.\n\n\"Raul, love. Could you grab the keys for the flat,\" she called out.\n\n\"Jack away again is he?\" Marcus asked with a knowing smile.\n\nGill simply raised an eyebrow to Marcus before once more fixing her eyes on me.\n\nI was finding it extremely difficult not to look at her tits.\n\n\"So what's your story?\" She asked.\n\nI immediately began the whole sorry tale of the reason why I was in Coolamein but she held her hand up once I got to the bit about staying at the pub.\n\n\"Enough,\" she laughed. \"The pub hey, interesting. But I get it, you want somewhere nice to stay and the pub just isn't it.\"\n\nI felt like saying it's okay because there are two young schoolgirl sluts staying there, but I resisted.\n\n\"It's a bit dingy, smells like stale smokes and spilt rum.\"\n\n\"Well Raul here is leaving next week to go back to Spain so you can move in after that if you like?\"\n\nI took the keys from the swarthy Spaniard who had a sly grin writ large across his face.\n\n\"It's a great place,\" he said. \"I wish that I could stay, but you know, visas are hard to make longer.\"\n\n\"Extend,\" I said, slipping into teacher mode. \"Visas are hard to extend.\"\n\n\"Yes,\" he laughed, \"Extend.\"\n\nI spun the keys around my index figure, pointed to the flat and just as I was about to say, \"I'll check it out then.\" Marcus's phone buzzed to life.\n\n\"Sharon,\" he said, grabbing my attention.\n\n\"Oh shit, sorry, fuck, I forgot,\" he said.\n\nThen his expression changed and he took a quick look at me before turning towards Kelly.\n\n\"Out at Gill's so..\" he trailed off. \"Yeah I suppose he could...his bikes in the office...yep ten minutes, max...righto, see ya.\"\n\n\"Dickhead here forgot another meeting, so Jules mate could you wander back into town, maybe get your bike tomorrow at school, Sharon will bring it in,\" he said to me.\n\n\"Really? I suppose so, should be alright.\" I was more worried about my bike than anything else.\n\n\"Good then, right Kel, let's get cracking.\"\n\nAs I wandered over to the flat the four of them began an earnest conversation that I couldn't hear, plus I was pondering the logistics of living on the edge of town and didn't really care.\n\nThere was a private carport and driveway access to the bangalow and the main living area and verandah looked out over the pool.\n\nI'm not sure why Gill asked for the keys because the door, like most in the country, wasn't even locked.\n\nThe interior was certainly fairly basic, but far better than what was probably on offer in teacher housing. The lounge was an L-shaped job with a gray fabric cover, the TV was large, and the kitchen adequate for my cooking skills.\n\nFrom the kitchen window I watched Marcus and Kelly drive off and Gill turn towards me. Raul was not with them.\n\nIndeed Raul must have been a neat bloke because there was not much sign of anyone living there at all.\n\nBehind the lounge room was one bedroom and the bathroom was adjacent to that. On the other side of the house was another bedroom in which lay the signs of Raul's existence, pungent aftershave, singlet tops, that sort of thing.\n\nI was looking out his window towards a yard full of cattle when I heard the front door open and close.\n\n\"So,\" I heard Gill call out. \"Do you like what you see?\"\n\n\"Very funny,\" I called back, \"Yes, I reckon I'll say yes. It just depends on the price.\"\n\nHer footsteps came closer and in a moment of sweet synchronisation, just as a bull mounted a cow in the paddock, I heard her once more say. \"I'm not going to ask again, but do you like what you see?\"\n\nWhen I turned towards her there she was, stark naked and looking drop-dead and gorgeous.\n\n\"Fucking hell,\" I muttered, \"Wow, I'm speechless.\"\n\n\"Speechless is good,\" she said, moving slowly and confidently towards me. With every step my cock grew larger. \"But pantsless is better.\"\n\nHer tits were perfectly formed, her nipples small and pointed, her pussy trimmed and damp from the pool.\n\nWithout a moment of thought I had my shirt off and she was kissing my chest as she hooked her thumbs around the elastic of my shorts.\n\n\"Let's see what sort of a discount you're going to get shall we?\"\n\nWith ease she rolled my shorts and undies down in one elegant sweep. My cock unfurled into a burgeoning pole and she groaned as it flicked up towards her.\n\n\"Yumm, that's a big discount, at least 50 per cent,\" she hornily said. \"Might get even bigger based on performance,\n\nWith that she took my cock in her hand and slowly stroked it to full hardness. Looking down at her gazing at my cock I realised that I was acting in a way that only weeks before would have been considered way out of character. I'm sure that this country life was changing me, for the better.\n\n\"Suck it, baby,\"I gamely said, \"Suck my cock.\"\n\n\"Ohhh, the demanding type hey?\" she said, \"I like it.\"\n\nAgain, this was well out of character for me. So, I stepped it up a notch.\n\n\"I bet you do, you just love cocks, I can tell.\"\n\nI grabbed my cock and waved it around her face, she was becoming increasingly horny as I taunted her. I slid it first across her forehead before drawing it down across her left cheek, across her nose, down her right cheek and eventually around to her outstretched tongue.\n\nA slight shock roiled up my back as she flicked her tongue over the underside of my knob. I could see a small leakage of pre-cum as she looked up at me, and she could taste it too.\n\n\"Entree?\" she asked before sinking her mouth down over my cock.\n\n\"Good lord,\" I moaned as her tongue moved around my cock, inside her mouth.\n\nWith a pop she exited her duties and looked up at me, smiled and then sunk all the way to the hilt. An experience that I'll never forget.\n\n\"You're right,\" she said \"I do like cock.\"\n\n\"I love this town,\" I said.\n\n\"There's plenty more for you to discover, I'm sure.\" she said before once more deep throating me.\n\nShe then began wanking my cock as she cupped my balls, trying to make it even bigger and harder than it's ever been before. I was nowhere near ready to cum, in fact I think I was so hard I'd caused a blockage. Indeed my balls were starting to ache.\n\nRaul's bed was the natural workbench for our fornication so in order to move things along I stepped away from Gill and held my hand up for the gorgeous naked brunette.\n\n\"Time to taste that cunt of yours,\" I said to her.\n\nQuickly she hopped onto the bed and spread her legs wide open, her perfect pink pussy parted like a Peony and marvelling at my own alliteration I slowly made my way along her left leg before sliding a finger across her swollen clit.\n\nShe shook as I stroked her and I moved close enough for her to grab my cock.\n\n\"Your discount is getting bigger,\" she said, with a slight increase in pitch as I slid a finger down into her wet snatch.\n\n\"I'm aiming for 100 per cent,\" I said, before I bent down and slid a tongue along her wet, salty cunt.\n\n\"Oh Jesus,\" she cried out, \"No one gets 100 per cent.\"\n\nI began a fervent fingering of her hole as I kissed, licked and fondled her wetness. Two fingers, three fingers and finally all four were inside her as I sucked on her clitoris.\n\n\"Oh for god's sake fuck me,\" she demanded, \"Fuck my cunt.\"\n\nI immediately withdrew my sticky fingers and climbed under her leg. Looking down on her I once again remarked to myself that I was one changed man. Fortune, they say, favours the brave, as does fucking.\n\nI rubbed my cock along her pussy lips and she began squeezing her nipples as I did so. When I slid my knob inside her folds she took a sharp intake of breath. When I plunged fully forward she exhaled slowly.\n\n\"Oh god that's good,\" she cried out. \"Fuck me, fuck me, fuck me.\"\n\nWith wild abandon I plowed into her, smacking my knob against her cervix as we started to fuck like wild animals. Her back arched, my back hurt, but I pounded on regardless and when I reached down and rubbed her clit, she exploded.\n\n\"Fuck, fuck, fuck,\" this debonnair little slut hollered out, her pussy flooding with juices. Her eyes kind of rolled back into her head as she collapsed from the intensity of her orgasm, she was addicted to fucking, that's for sure.\n\nI was about to flip her over and take her from behind, even slap her arse a bit, when I heard the familiar sound of the front door open. Previously, I would have been shocked by this event, would have probably slid off the bed and hidden in terror of discovery, but when Raul walked into his bedroom, none of us were surprised. In fact, in the back of my mind, I had expected it.\n\nAll I needed now was for Marcus and Kelly to hop up on the bed as well, but they weren't to be seen.\n\n\"So, you have found another lover already,\" he said.\n\nGill just smiled and winked at me.\n\nI looked around at him and he was already naked, his cock primed for action. He clambered up on his bed and it was as if this wasn't the first time that he'd entertained Gill in this way, and what he said next confirmed it.\n\n\"She loves to fuck out here,\" he said. \"Her husband Jack, he doesn't know. Every time he goes away, she wants to fuck.\"\n\nGill said nothing as she sucked and wanked his cock.\n\n\"Sometimes two or three times a day, she wants cock.\" I raised my eyebrows in surprise. \"How do you say, is it, can't be satisfied?\"\n\n\"Insatiable,\" I said.\n\n\"Yes, insatiable.\"\n\n\"But I love to fuck her, she loves feeling cock inside her ass too, often one in each,\" he said, using the two fingered prong to illustrate what I'd already assumed.\n\nEven though I wasn't shocked by his gesture, the thought of being that close to another man's dick did cause me some concern, although the idea of fucking her arse did seem like a nice idea.",
        "\"Fuck my arse,\" Gill asked of Raul, \"one last double fuck?\"\n\n\"Of course,\" he responded. He dived across his bed, pulled open his drawer and pulled out a small bottle of lube. I moved away from her as she twisted herself onto all fours, her perfect arse poking delightfully in the air. Raul squirted a line of lube down his cock and smeared it across its length. He'd clearly done this many times as the bottle was almost empty.\n\n\"You want my cock in your ass again,\" he asked, waiting for her lascivious response.\n\n\"Yes, fuck me, fuck me, fuck me,\" she begged. She turned her head towards me and beckoned me over. Not one to refuse I sat up next to her head and angled myself in towards her mouth. She grabbed my cock as if it was a pole upon which she needed to brace herself and buried her face in the pillow.\n\nRaul though was a seasoned arse fucker and he slowly slid his length deep down inside her.\n\n\"Oh fuck, fuck, fuck,' she moaned through the softness of the pillow. Her grip tightened around my cock as Raul quickened the pace, sliding his slippery length into her. Then as he got into the swing of things she lifted her red face from the down, and with a shuffle to the left, took my cock once more in her mouth.\n\n\"See,\" Raul said, \"She loves to fuck.\" He slapped her arse as he quickened the pace, causing her to flinch.\n\n\"I can see that,\" I replied. \"She loves it.\"\n\nGill slid her tongue along the underside of my cock, looked up at me and said. \"Fuck my pussy, fill me with cock.\"\n\nNever having experienced anything like a double penetration before I was both excited and hesitant about what was coming up.\n\n\"No wait, fuck her ass first,\" Raul demanded, \"You fuck ass before?\"\n\nI shook my head in the negative.\n\n\"Well,\" he slapped her arse cheeks again, \"Now you will.\"\n\nHe whipped his cock out and moved aside and I somewhat nervously took his place, squeezing some of the lube along my cock just as he'd done it only minutes before.\n\nI rested my cock on her used rose and poked the head in. Raul's early pounding had opened her up nicely and it was with little effort that I pushed the rest of the way into her tight backside.\n\n\"God, yes,\" Gill moaned as I began the interesting sensation of fucking her arse. As I banged into her Raul reached underneath and began rubbing her clit and pussy which had Gill twitching and grinding as she clearly orgasmed from the delights of her two partners.\n\nHer arse tightened around my cock and I was almost on the edge of an orgasm but I managed to keep control, I wasn't over yet. I lifted my right knee and anchored myself in. With the extra leverage I was really able to fuck her nice and hard.\n\nThe only sound in the room was her muffled groans as each time I buried myself into her arse and Raul rubbed her clit, she shook a little.\n\nI could feel the sweat running down my back and as fit as I am, I was beginning to tire.\n\nSlowly I pulled my cock out of her arse and marvelled once more at what I had become, and also at the sight of her arse open, waiting for more.\n\n\"Fucking crazy,\" I said out loud as I flipped onto my back next to Gill. \"This is fucking insane.\"\n\n\"You wait until you move in my friend,\" Raul said. \"My cock, it needs a rest.\"\n\n\"No rest now,\" Gill hoarsely said, \"Fuck me properly you two, fuck my pussy and arse.\"\n\n\"I have the ass,\" Raul demanded.\n\nI wasn't about to complain. I needed the rest and remained in place as Gill slowly threw a leg over my body and with little effort at all slid down onto my hard cock.\n\nEmitting a low moan as she began moving up and down Raul teased her by rubbing his cock around her arsehole.\n\n\"Go on fuck my arse, fuck my pussy and arse,\" she demanded of us both.\n\n\"Tell me what you want, slut, tell me what you want,\" Raul responded.\n\n\"Okay, okay, yes fuck my arse, yeah, go on fuck it, fuck it.\"\n\nWhen Raul finally slid in I was so unprepared for that sensation of his cock only being millimetres away from mine that I thought he was in the same hole as me.\n\nGill's reaction though suggested otherwise. From deep inside her erotic soul came an animalistic sound that left me wondering and worrying if she was actually alright.\n\nWith her head buried next to mine I could hear her softly saying 'Yes,yes,yes,\" over and over again as Raul stepped up the pace and really began a thorough and hard pounding of her anus.\n\n\"Yes you love the cock don't you? You'll miss this cock cumming in your arse, in your cunt, in your mouth.\" That was enough to flick that hair trigger of control that Gill had left and her torso tightened as her body succumbed to yet another massive orgasm.\n\n\"Yeeeeesssss,\" Raul cried out, \"Cum on our cocks as they fuck you. Cum, cum,cum.\"\n\nI was going to need to step up my dirty talk if I was to take his place. All I could summon at this point was to say 'fuck' and groan a lot.\n\nRaul began slapping her arse as she leaked pussy juice over my shaft. I was really starting to enjoy this wanton slut and her latin lover.\n\n\"Yeah come on fuck me harder,\" she hoarsely said. \"Cum for your bitch, cum in her arse.\"\n\n\"In your ass, hey?\" he slapped her as he said it. \"Want my cum in your fucking ass do you?\"\n\n\"Yes, yes, yes,\" she intoned, \"Shoot your fucking cum inside me.\"\n\n\"Yesssss,\" his face screwed up as he quickly took on the demeanour of a man shooting a massive load of cum deep into a woman's arse.\n\nHis body convulsed in a fit like state as I felt his cock expand and contract through the membrane that separated us.\n\nQuickly he withdrew and the sensation was removed as he ceremoniously pumped the remains of his ejaculate all over her arse and down onto my balls. A somewhat disconcerting sensation.\n\nGill lifted her head and smiled at me as she slowed her grinding down. \"Now for your last test,\" she said. \"The taste test.\"\n\nShe lifted her waist up and when my cock popped out it comically slapped on my stomach before springing back up towards her rapidly approaching mouth.\n\nRaul fell back exhausted on the bed as she began the process of licking up his jizz from my scrotum.\n\n\"So good,\" he said as he stroked his cock. \"I will miss these blow jobs too. I will miss all this.\"\n\nAnd by Gove it was a great blowjob. Her technique involved a melange of hand pumping, tongue action, ball squeezing and a lot of spit. In moments I could feel myself relax and the valve open enough for my baby makers to be released.\n\n\"Fhuck\" I softly said as I suffered a little death, my cock exploding in her mouth.\n\nHer lips were locked tight around my bell end and I watched in awe as she held what felt like a cup of jizz in her mouth. Then like she was rolling an elastic band off my knob she rolled her lips off, tipped her head back and swallowed the lot.\n\nWith a quick raise of her eyebrows she said, \"Not bad, not bad at all.\"\n\nRaul held his hand up for a high five so we both gave it a slap.\n\nWe all lay there in silence until my phone buzzed to life with the characteristic ding of a message.\n\nI didn't want to look at it but on hearing it Gill was lifted from her torpor and she leapt off the bed.\n\nI reached over to my phone and was surprised to see a message from a number I didn't recognise.\n\n'I probably shouldn't ask, but can you help out in the restaurant tonight? Big do on, need one more waiter. Erika.'\n\nI didn't immediately respond. I needed to process my thoughts.\n\n\"Life goes on boys,\" Gill said, standing there with the erotic glow of a horny woman, post fuck.\n\nI really hadn't had the time to really appreciate how tight her body was and minutes later when Raul and I had had a quick dip in the pool and Gill was back inside did everything once again go all tipsy turvy.\n\nWe were drying ourselves when he began the sorry tale.\n\n\"I'm sorry to go you know,\" he started.\n\n\"No more free pussy?\"\n\n\"No, I never got to fuck her daughter. Here for six months, no fuck her.\"\n\nI looked at him in shock. \"Gill has a daughter? Man she bounced back well.\"\n\n\"Many years ago my friend, many years. I see her here sometimes with her two friends, they are fucking hot too.\"\n\n\"Doesn't live here then?\"\n\n\"No, she saw us fucking one day. Then they had a fight and went to live with her friend for a while.\"\n\n\"Where does she work, her daughter?\"\n\n\"Work?\" he laughed. \"She doesn't work, she's still at school with her friends Georgie and Kim.\"\n\nThere it was again. That sense of fear and impending doom. I felt like a dog when it senses a storm coming. My stomach sunk. I was speechless, but I did manage to ask a question to ascertain that Erin was Gill's daughter.\n\n\"What's her daughter's name?\"\n\n\"Erin,\" Raul shook as he said it. \"I so wanted to fuck her. The man who gets to fuck them both is a man above men.\"\n\nFor a split second I wanted this latin lothario to know that I was that man, and had fucked Georgie as well, I really came close. But all I could muster was a simple, \"Interesting.\"\n\nThinking of them both triggered the memory of my earlier text from Erika, Georgie's sexy mother.\n\nThinking that I didn't want to be upstairs where the girls lived, I messaged back a quick 'Sure, what time?'\n\nThe answer was almost immediate. '6.30. Thanks so much.' Followed by a heart emoji.\n\n\"You want a lift back to your home? Where do you live?\"\n\nI didn't want him to know I was staying at the pub where Erin was living, so I just asked him to drop me off at the supermarket under the pretence of getting some groceries.\n\n\"I go on Saturday to Melbourne,\" he said as I eased myself out of the ute. \"I'd like my time to finish just with her.\"\n\nI just smiled, smacked the roof of the cabin and said, \"She's all yours, champ.\"\n\nAs soon as he was out of sight I turned towards the hotel and walked rapidly onwards to even more complexity than I had ever thought possible, and all the time with one nagging question.\n\nWho the fuck is Kim?\n\nTO BE CONTINUED - If you want."
    ],
    "authorname": "Friskee_cpl",
    "tags": [
        "threesome",
        "mfm",
        "mmf",
        "three way",
        "menage a trois"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/a-new-teachers-welcoming-pt-03"
}
{
    "title": "A Welcome Home Surprise",
    "pages": [
        "This is my first submission - hopefully more to come if it's enjoyed by readers!\n\n*****\n\nI get to the airport two hours early. I'm always a little off-kilter when David has been away - not in the way that one worries over the possibility of a plane crash or car accident, but just simply unaccustomed to the quiet of the house, the noises that suddenly seem so loud without his presence, the other side of the bed still cold come morning. I miss him during every business trip and am always eager for him to be home. Today I'm extra excited, my mind running over the plan I've been formulating in my head the last few days. David has no idea what he's in for tonight and I'm counting the minutes till I see him. \n\nIt's the \"just can't wait anymore\" feeling that gets me into the car much earlier than required, taking the half hour trip to the airport at about twice my normal slow-poking speed and finally into the terminal, checking the time board in the hope that maybe, just maybe, this flight has wound up saving time and will arrive early. \n\nNo such luck: it's 2 p.m. and the flight is scheduled to arrive at 4:15 p.m. I find a coffee shop (god bless Starbucks for being in every airport, in almost every country on the planet) and get something hot to drink. Finding an empty bench, I sit, sip and try not to watch the minute hand on the clock on the wall tick slowly by. \n\nDavid and I have been married for almost 10 years. We're a good pair, I think, even if in recent years our once steamy and frequent sex life has dwindled a little bit. Instead of all the time and anywhere we can sex, we're down to every few days, in the bed, and if we're feeling really wild, maybe the couch. \n\nI suppose you could say we've always been a pretty vanilla couple - we like all the usual things, the stuff you might see in a steamy romance or read about in a slightly more explicit novel. \n\nBut we've never explored very far beyond the basics. \n\nUntil now. \n\nDavid always closes up his laptop when he's done with it - partly just because he's a tidy and organized sort of person that way. But I've come up behind him a time or two, so quietly that he didn't realize, and spotted naughty photos or a video playing. I've never been wildly interested in it myself, but it doesn't bother me that he enjoys it from time to time. Still, over time, I've become increasingly curious as to what he's looking at - and, as our sex life went from steamy to not-so-steamy over the last couple of years, I've begun to wonder if there's something new we could try. Those conversations aren't always the easiest to have and any time I've brought it up, even humorously, he gets a bit shy and changes the topic. \n\nSo, when I realized he'd left his tablet on the bedside table and it was unlocked - and he was out of town on business - I confess my curiousity got the better of me. \n\nI was online and checking the browser history faster than you can say \"jackpot.\" \n\nHe'd obviously cleared the history a few days before he'd left, but there was a series of hits that stood out between the usual online banking and news sites. Hard not to notice XXX in a website name, after all. \n\nI hesitated a second, then touched the first one. It took me to a page of photos - very explicit photos. Then the next one took me to an erotic story. The third link was a video. Fourth, fifth, sixth, more videos. \n\nI was torn between shock and surprise - and feeling really goddamn aroused. \n\nEach one had the same theme: a wife using toys and strapons with her husband. \n\nAnd the husband in every single instance was loving it. \n\nIt had never occurred to me before that my shy, masculine, taller-than-six-foot husband might be curious about this kind of thing. Once, a very long time ago, after several drinks and a conversation with a friend about how she sometimes played with her husband with her finger while giving him a blowjob, I'd almost tried to tease his ass a little that way - but he moved away, obviously taken by surprise, and I never throught to try again. \n\nBut here, in these videos, the husbands were definitely not moving away: they were in ecstasy, their wives using fingers and various toys and their tongues. \n\nBy the time I had watched a handful of the videos, I was so worked up about the whole thing that I got out my vibrator and came in about 30 seconds flat. \n\nThen I got dressed, got in the car and drove downtown to the only sex shop I could think of in the vicinity. I browsed, asked questions and I left the store with several bags. \n\nThen I started counting the hours till David returned home. \n\nThe minutes pass slowly in the waiting lounge at the airport. I watch people come and go and let my mind wander. Under my skirt and top I'm already wearing the new outfit I bought for tonight: a maroon and black corset with garter straps, each leg strap sporting a small black bow. They're attached to lace topped stockings. No panties. I've never really done that before, going without panties, but tonight seemed like a good time to try. I get a second coffee and start to feel myself getting wired up - is it the caffeine or the nervous excitement? Hard to tell at this point. \n\nFinally, the time board announces that David's flight has arrived. I check the number of the baggage carousel and walk towards it, knowing that he will look there for me rather than at the gate. The carousel begins to spin and his luggage arrives before he does, so that by the time I see him coming, I've already got his suitcase ready to go and I'm standing smiling. \n\n\"Hi baby,\" he says, when he approaches. \"I missed you.\" \n\nHe kisses me, and his hand goes to my waist. He must feel the boning in the corset because I notice he pauses a second, runs his hand over it, but then obviously decides to say nothing. \n\n\"I missed you too, I'm so glad you're home,\" I reply, grinning. \n\nHe laughs. \n\n\"You look like you're in a very good mood,\" he says. \n\n\"Well, I am,\" I answer. Then I lean in close again and whisper: \"And I have a surprise for you, at home.\" \n\nHis eyebrows pop up. \n\n\"What is it?\" he says. \n\n\"Well, if I tell you then obviously it isn't a surprise,\" I laugh. \n\nWe start walking towards the car park, and he's teasing me for clues, but I keep saying, no, no, just wait. We get the luggage stowed in the back of the car and get in and buckled. \n\n\"Please,\" he begs. \"One clue!\" \n\n\"Ok, fine,\" I say. \"It's something I think you've wanted for a really long time and, if you like it, you get to have it over and over again.\" \n\nHe looks puzzled. \n\n\"I guess that could be ... a book?\" \n\nI laugh, and shake my head. \n\n\"So much better than a book, baby.\" \n\nWe begin the drive home and I turn the radio on to distract him. \n\nIt's past 5 p.m. when we get home, dusk, and our little house looks cozy and warm. I pulled all the curtains before I left, and turned on a few small lights here and there, to keep things intimate. \n\nJust as he's about to open the door, I put my hand on his and say: \"When we go in, I'd like you to go ahead to the bedroom. Get comfortable on the bed. I'll be there in a minute. You've had a long week and part of my surprise is that you get to be a little bit ... pampered tonight.\" \n\nAgain, his eyes shoot up, and he grins. \n\n\"Ok, sounds great baby.\" \n\nHe unlocks the door, steps inside, pushes the luggage to the side of the entry way and pulls off his jacket. \n\n\"Oh, yes, the rest of the clothes should go too,\" I say, grabbing on to his belt buckle. \"All of them. Then, on the bed.\" \n\nDavid grins, and heads down the hall at a near run. \n\nIt's been so long since we've done something new with each other, I'd forgotten how thrilling it could be, how exciting and new it would feel. \n\nI go to the kitchen, find the wine I purchased and two glasses, and set them on a tray. \n\nI breathe, slowly: I'm a little nervous now that it's come to it, but I can already feel my own wetness on the inside of my thighs. I'm as excited as he is. \n\nI take the tray in two hands, and head down the hall. \n\nWhen I get into the bedroom, one small light is on and David - as instructed - is naked, on the bed. \n\n\"Like this?\" he asks. \n\n\"Almost, yes,\" I reply. \n\nI hand him one of the wine glasses, then circle the room, lighting candles I put out earlier in the day and turn off the small light so it's dark with only candleglow around us. \n\n\"This is a great surprise,\" he says, smiling up at me. \n\n\"Oh, this isn't the surprise yet,\" I say, and grin wickedly. \n\nI take a gulp of the wine, set the glass to the side, and stand at the end of the bed: I step out of the skirt, my naked thighs framed by the lace of the stockings and the garter straps. \n\nDavid is instantly hard, his eyes right on the juncture of my legs. \n\nMy pussy is bare - shaved and no panties to cover me. \n\nI pull the sweater off over my head, and reveal the corset. \n\nI'm no waif - I haven't been a size small since childhood and my breasts and hips and ass are all curvy plus. The corset amplifies my shape, pulling me in more at the waist and making the roundness of my hips more obvious. My breasts are pushed up and together by the bust line, my nipples almost showing at the lacy edge. Any insecurity or worry I might have had over my changing body, this corset does wonders to ease it - that and David's reaction. \n\nHe is staring at me, eyes darting from legs to breasts to face and back down, trying to take it all in at once. \n\n\"Holy shit,\" he finally says. \"You look amazing.\" \n\n\"So do you,\" I reply. \"Now, time for you to finish your wine and stop talking. We're going to do something new tonight.\" \n\nI can see in his eyes that his brain is going a mile a minute trying to figure out what I mean. \n\n\"I'm serious, no talking. Just do what I say,\" I tell him. \n\nHis cock twitches at this, like he's enjoying me being a little bossy and it emboldens me to continue. \n\n\"Get on your tummy, and close your eyes.\" \n\nHe does, and I slowly climb up the bed, straddling over his ass. When I lower myself on his lower back, I know he can feel the wetness of my pussy by the way he gasps. I can't help moving a little on him, grinding, trying to ease the pressure that's already building. I moan a little and feel him pushing and squirming under me, as his erection grows, pinned. \n\nI take out some massage lotion and start rubbing his back, kneading over his shoulders, down his spine. As I get lower, I slowly move myself back so I'm straddling over his hips, then his upper thighs, and finally over his knees. My hands are stroking and squeezing his ass cheeks. I can feel him pushing down, as though pressing himself into the bed, and I know he must be hard as a rock. \n\nI keep massaging his ass cheeks and then, after a few minutes, I raise myself up off his legs and put my hand to the inside of one thigh and push outward, indicating for him to open his legs. He hesitates but then begins to move it. As he does, I lift my knee from the bed, and replace it inside his spread leg. Then I do the same on the other side, so that I'm kneeling between his spread legs, his ass in front of me, his eyes still closed, his chest to the bed. \n\nI return to massaging his ass. I can feel him clenching, and I know that in his head, he's thinking of all those videos he's watched, all the photos and stories, where at this point the wife would begin to tease the husband's asshole. \n\nI remove my hands from his cheeks, find the lube I put next to us on the bed, and squeeze some on to my finger tip. \n\n\"Baby,\" I say, just barely a whisper. \"I want to make you feel really good. I know you want me to. Reach back with both your hands and spread your ass cheeks for me.\" \n\nHe tenses, doesn't move. \n\n\"Baby, do it. Now.\" \n\nHe does, his big hands coming back and pulling himself open. He moans, so loudly that it almost surprises me. \n\n\"Fuck!\" he says. \"What ... why...\" \n\nI lean forward, so my face comes close to his ears. \n\n\"I watched your videos, on your tablet,\" I say, noticing that he squeezes his eyes - already closed - even tighter, like he's a little embarrassed. \"And the photos. And the stories, too. I watched those women fucking their men, and I wanted to do it to you so badly that I had to cum just thinking about it. Then I went to the store, and I bought some treats - some ... toys. For us to play with. So, I want you to relax, and I'm going to put my finger in your ass, and when I think you're ready, I'm going to get one of the new toys, and I'm going to fuck you. Ok?\" \n\nI lean back so I'm between his legs again, looking down at his ass, cheeks still spread by his own hands. \n\nDavid is silent. \n\n\"Ok baby?\" I ask again. \n\nAnd before he can answer, I put my lubed finger to his ass pucker, rubbing the lube up and down and around. \n\nI'm starting to get so wet and so aroused that I'm not sure I can last through the all the things I've just told him I'm going to do but to make this first time good, I know I have to. \n\nHis ass is clenching, squeezing, relaxing, squeezing. \n\nI put my fingertip right to his tight hole and push, gently. I am shocked by the strength of his ass on my finger, the muscle working. \n\nI start slowly moving it in and out, a little deeper each time. \n\nDavid is no longer silent. \n\nHe's moaning, groaning, practically begging. \n\n\"Fuck. Fuck! Jesus baby, fuck me,\" he says. \n\nI slide my finger all the way in, then all the way out, repositioning two finger tips against his asshole. When I push both in, he bucks, pushing back against me, and begins to pull himself up onto all fours. \n\nWhen he does, I can see his cock dangling between his open thighs - it's huge, so hard I can see the veins on it. I see one of his hands tuck under, obviously intending to touch himself. \n\n\"Don't! Don't touch, not yet. You're not going to cum yet, baby. I'm going to be fucking your ass when you cum, and not with just fingers.\" \n\nThe words feel foreign in my mouth, my voice sounds strange in my ears - but exciting and new too. And David is loving me being bossy and telling him what to do: he immediately stops reaching for his cock, puts his hand back down on the bed and groans loudly. \n\n\"Fuck baby, please,\" he says, his body swaying back and forth onto my hand. \n\nI slide my fingers out and tell him to stay where he is. \n\nI go over to the dresser and find the plug that I purchased at the store - a good \"intermediate\" toy, the clerk had suggested. \n\nI bring it back over, and hold it next to David's face. \n\n\"Open your eyes,\" I say, and wait until he does. \"I'm going to use this now.\" \n\nHis eyes go wide, and he whispers, \"fuck, please, fuck, oh my god.\" \n\nI get behind him again, lube the plug and then press the tip to his ass. \n\nIt has a narrow tip, then widens in the middle - thicker than two fingers for sure - then narrows again, with a small handle on the end. I hook my fingers around the handle and push the toy against him. \n\nFinally the tip slips in, and his pucker slowly stretches, stretches, stretches to accommodate the largest width of the toy. The rest slides in easily, right to the handle. \n\nDavid grunts, bucks. \n\nHis whole body is tense, waiting. \n\n\"Get on your back, David,\" I tell him. \n\nHe does, his eyes hooded and his hands clenching at the sheets. \n\nI crawl up next to him, kissing as I go ... his knee, his thigh, barest brush against his cock, his tummy, grazing his nipple, his neck, to his ear. \n\nI suck on his lobe for a minute, and finally whisper: \"I can't wait to fuck the hell out of you. But I think I need a little ... relief ... first.\" \n\nThen I quickly move over him, straddling his face, my stockinged thighs on either side of his head, my pussy directly over him, my hands holding the headboard in front of me. I can feel myself so wet I'm nearly dripping and I'm tempted to stay like that over him until the first drip falls onto him, but my pussy is desperate, needy and overrides any patience I have left. \n\nI lower myself right on to his mouth, and he's instantly licking, sucking, sliding his tongue up inside me, fucking me with his face. \n\nMy hips are thrusting now, rubbing my smooth pussy lips back and forth over his nose, his mouth, his chin. I'm so close to cumming. Suddenly I start talking, words pouring out of my mouth. \n\n\"You like me playing with your ass don't you, baby,\" I say, and he starts licking harder, moaning. \"You like me talking a little dirty don't you. You like my wet pussy on your face, you like that I'm fucking your mouth, you like my pussy juice covering you. You like knowing that after this, I'm going to put on a strap on and toy that's twice the size of that plug and I'm going to fuck you so hard you won't be able to move when I'm done. You like knowing that I'm going to spread your legs, and get my toy cock up inside you till you're dripping cum on yourself.\" \n\nThe more I talk, the harder and more furiously he licks. \n\nI'm so close to the edge when I suddenly feel his tongue concentrate on my clit, and he gets a hand between my legs, and slides two fingers up inside me. \n\n\"Oh god! God, god, god, god, god, fuck, fuck, fuck fuck!\" I keep screaming and swearing and moaning and bucking, his tongue flicking at my clit and his fingers deep in my pussy. I can hear how wet I am by the sound his fingers make sliding in and out, so wet that there's no resistance when he adds a third finger. \n\n\"FUCK!\" \n\nI cum so hard I can barely move. \n\n\"Keep licking,\" I tell him. \"Lick my pussy clean so I can fuck you.\" \n\nI've never spoken to him like this but I like it, a lot. So does he. He licks, and sucks, and twirls his tongue over me till I think I might cum again if he continues. \n\nI move myself off him, and over to the edge of the bed, then walk over to the dresser again. \n\nI open the top drawer, and find the harness and strapon dildo I purchased. I've tried it on a few times since I bought it, so it's an easy job to slip it on over the stockings and garter. I turn around to face him, one hand already stroking lube onto the dildo. \n\nHis eyes are no longer hooded and lustful - they are wide open, thrilled and shocked. \n\n\"Oh my god,\" he whispers. \n\nI stand at the foot of the bed, stroking the toy with lube. \n\n\"Move down here,\" I tell him. \"Get your ass right to the edge of the bed, and your legs up.\" \n\nHe does as I say. He knows what position I mean, we've often had sex like that with me on my back, legs up, at the edge of the bed, while he slides his cock into my pussy while standing. It's a high bed, and it lines up well. \n\nHe's holding his legs behind his knees so his legs are wide and back. His cock is rigid against his belly, his balls tight, and his ass is still plugged. \n\nI reach down, stroke over his thighs and ass cheeks. \n\nI push on the plug and he moans. \n\n\"Think you want more?\" I ask him.\n\n\"Yes, oh god, yes, yes, please.\" \n\nI reach to the plug's handle and slowly pull it out, easing it out, watching as his asshole stretches again over the widest part, noting that the dildo is wider again than even that, and much much longer. \n\nI'm suddenly champing at the bit to get this big toy inside him, to see what it does to him, to see what it looks like. I'm dripping wet again, the juice from my pussy starting to slide down past the harness straps on my inner thighs. \n\n\"Fuck, you look so good,\" he says to me, his eyes travelling up and down me. \n\nI reach down to the bust of the corset and undo the first five or six hook-and-eye clasps so that it opens enough for my tits to be out, knowing he loves my nipples. \n\n\"Jesus, fucking christ,\" he groans. \n\nI smile, move myself closer to him and use my hand to line the head of the toy cock up to his ass. \n\nHe's moaning before I've even done anything and I watch his face as I start to push, slowly, so slowly, letting the realistic head of the toy do what it's supposed to and stretch him wide open. I keep pressing my hips forward, until finally the head is in, his ass closing tight around it. ",
        "\"FUCK FUCK FUCK,\" he says, over and over and over again. \n\nI don't pause, but keep pushing forward slowly. His eyes clench up tight, and he's moaning. I notice a drip of cum on his cock, and then another and another, till there's a small puddle of cum on his belly. \n\nI keep pushing until he's taken the whole length of it, and my hips are nestled tight between his legs. \n\n\"You like, baby?\" I ask, smiling. \n\n\"Oh fuck, yes,\" he says. \n\n\"What should I do now?\" I ask, teasing. \n\n\"Fuck me. Fuck my ass, fuck me hard, fuck me baby.\" \n\nSo I do, I start stroking, slowly, in and out, adding a little lube to make him sloppy wet, stroking faster and faster. \n\nEventually I'm thrusting and pumping into him as hard and as fast as he would fuck my pussy if the roles were reversed. He looks so good under me, so aroused and excited and overwhelmed. I wish his cock could be inside me at the same time as I fuck his ass with the toy - an idea for next time maybe, I think to myself. \n\n\"I need to cum, I need to cum,\" he says. \n\nI reach forward between his legs, continuing to pump, and grab his cock in my hand. I stroke up once, twice, a third time and then he cums so hard and so suddenly that it shoots up to his chest, his neck, even onto his chin. \n\n\"OHHHHH FUUUUUCK!\" \n\nHe keeps cumming, longer than I've ever seen him cum before, and after a minute I slowly slide the toy out of his ass, undo the harness and step out of it. I climb up next to him on the bed, and lay next to him, smiling, while he catches his breath. \n\n\"Was it a good surprise?\" I ask. \n\n\"Holy shit. Yes, it was the best surprise ever,\" he says with a laugh. \n\n\"Good. So you won't mind if I try out a few more things that I saw in your video selections?\"\n\nI can see him suddenly trying to think back to what videos he might have looked at, and getting suddenly nervous.\n\n\"Like what things,\" he says. \n\n\"Oh, just this and that. Another time,\" I say. \"Now, I need to cum again ... help me out?\"\n\nWe laugh together, and he rolls over, his head dipping down between my legs. \n\n\"David, oh fuck David. I love you.\" \n\nI think he says \"I love you too\" but between my own moaning and the muffled sound of his words with his tongue in my pussy, I'm not entirely sure. I lay back, and let him slide his fingers inside me again."
    ],
    "authorname": "CarsonM",
    "tags": [
        "husband",
        "wife",
        "anal",
        "plug",
        "dildo",
        "strap-on",
        "submissive",
        "ass"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/a-welcome-home-surprise"
}
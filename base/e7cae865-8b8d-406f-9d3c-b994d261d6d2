{
    "title": "Three Square Meals Ch. 054",
    "pages": [
        "*We did it!* Alyssa cried out jubilantly to the girls.\n\nThe answering surge of joyful relief from all of them was wonderfully uplifting, and Alyssa's face lit up with a spectacular sparkling smile. She filled them in on everything that had happened, as John rose unsteadily to his feet and offered her his hand, helping her to stand too.\n\nHe stretched his weary muscles, and happened to glance across the room, spotting Edraele Valaden comatose on the bed. Her enormously swollen belly was fairly convincing proof that their relationship with the Valaden Matriarch was never going to be the same again.\n\n\"Any idea what happened?\" Alyssa asked him, as she saw where he was looking.\n\nHe shook his head, as he replied, \"The last thing I remember was Irillith going down on me, back on the Invictus.\"\n\nAlyssa couldn't help but giggle as she said, \"Well, you finally got some mother/daughter action.\"\n\nJohn frowned and said, \"This is serious. What on Terra do I say to Irillith?\"\n\nShe leaned up to kiss his cheek and said, \"Don't worry, I think she'll be able to handle it. She's actually been really great since you were out of action. She apologised to Dana and Rachel for the way she's behaved, and I wouldn't have been able to rescue you without her help. Progenitor-John ordered us to stay on the Invictus, but she managed to break out through force of will alone.\"\n\nJohn looked startled and said, \"Irillith must have extremely strong willpower to have pulled that off.\"\n\n\"Yeah she's got some real spirit to her. Once she was out, she goaded me into breaking free too,\" Alyssa told him with a grin on her face.\n\nJohn pondered this for a moment, while looking down at the unconscious Maliri Matriarch, and eventually said, \"I still think we should keep them apart, just until her mother wakes up. Then we can try to find out what happened between Edraele and Progenitor-John.\" \n\n\"Sure, you're the boss,\" Alyssa agreed, still jubilant that he was back to normal.\n\nJohn smiled at her and said wryly, \"Not any more.\"\n\nShe laughed and said, \"Don't be silly, of course you still rule the roost.\"\n\nJohn sat down on the bed, and explained carefully, \"That's not quite what I meant. After what happened with Progenitor-John, I didn't want you girls to be trapped, completely powerless like that again. Before we reconnected, I suddenly began to understand a bit more about the way we were linked, and I changed the nature of our bond. I removed the compulsion you girls had to obey me, so you're all completely free from any control I had over you before.\"\n\nShe followed his lead, sitting beside him, and crossed her legs as she gazed at him adoringly. Her bright blue eyes sparkled as she replied eagerly, \"I felt you change it! That's how I was able to double-up our connection.\"\n\nShe leaned in for a kiss, and when he responded, their lips brushed against each other. It felt like there was a tingle of electricity between them, and both their eyes opened wide at the sensation. \n\n\"If kissing's like that, I can't wait until you fuck me!\" she said enthusiastically.\n\nJohn looked equally eager, and he pulled her in for another kiss. They kissed more passionately this time, and he grinned at her when they finally separated, his lips still tingling. \n\n\"I didn't know that was going to happen,\" he said with a smile.\n\nShe stared into his eyes, and said earnestly, \"Thank you for changing the bond. That was really sweet.\"\n\nHe studied her face intently, and asked, \"Does it change the way you feel about me?\"\n\nShe shook her head fiercely and said, \"Of course not! I still love you with all my heart.\" Then she winked at him playfully and added, \"And I'll still be a good obedient girl for you.\"\n\nHe chuckled, and sagged back on the bed, feeling exhausted. Alyssa crawled over to lie by his side, and as she cuddled up next to him, their eyes were both drawn to Edraele as she slumbered peacefully.\n\n\"What a mess,\" John said with a sigh.\n\nAlyssa arched an eyebrow and said, \"I think everything actually worked out fantastically well! With the huge load you just fed Edraele, it looks like she's going to get her brain tumour healed, and I doubt she'll be thinking about double crossing us on the Maliri laser deal after that. We also got top-of-the-range Trankaran engines installed in the Invictus, so your ship's going to be one unholy beast when we've finished all the upgrades.\n\nWe made friends with the Trankaran Government, and Dana made the deal of a century, so you're even richer now than when we started this whole Maliri saga. We accidentally gained Faye, so now we've got a really helpful AI as a handy research assistant for Dana and Rachel. Then finally, you've acquired a smoking hot Maliri girl for the team, and you haven't even screwed her yet. Think how much fun that's going to be!\"\n\nHe smiled and said, \"Alright 'Miss silver lining', I get your point.\" His expression turned sombre as he said guiltily, \"But you girls have been through hell. Thinking that you were going to be enslaved to that monster must have been terrifying.\"\n\nAlyssa laughed, waving her hand dismissively as she said, \"He didn't like us in the end, and cut off our connection. I think you made us too feisty for his tastes.\" \n\nHe chuckled, but she saw that he wasn't convinced by her facetious jesting. She turned, and swung her lithe leg over his waist so that she could straddle him, settling her lissom young body over his. Her silky blonde hair fanned down like a golden curtain around their faces, shutting out the world so that it was just the two of them, and she leaned in and kissed him tenderly. They were both entranced when they parted, the exciting electricity passing between them making them feel like they were kissing each other for the first time.\n\nAlyssa gazed at him with her piercing cerulean eyes, and said, \"Don't worry about us. Honestly, all the girls are just ecstatic you're back to normal. Besides, it wasn't your fault. How were you to know you'd inadvertently created an evil tyrannical alter-ego, hell bent on galactic conquest and destruction?\" \n\nHe laughed heartily at that, and she grinned at him as she felt the rumbling laughter in his chest. Encircling her in his arms, he held her tightly and said, \"I don't know what I did to deserve someone as awesome as you, but I'm incredibly grateful I did.\"\n\nShe sighed at him happily, and snuggled down against his chest. \"You're starting to sound like Dana,\" she murmured with a giggle.\n\n\"What can I say? You girls all seem to have left your mark on me,\" he said to her affectionately as he stroked her back.\n\nThey lay there for a while, and John started thinking about how best to go about upgrading the Invictus. He glanced at Edraele, then thought about the vast shipyard House Valaden owned, and he decided to ask her if they could use it for a comprehensive refit when she woke up. He felt like he was being watched, and he glanced down curiously. Alyssa had her chin on her hands, as she rested on his broad chest, and was staring at him with an expression of pure delight on her face.\n\n\"You look exceptionally happy,\" he said to her, with a sense of relief.\n\nShe nodded and replied telepathically, *It's just so wonderful to be able to hear your inner voice again. After being shut out for weeks on end, I missed it so much.*\n\n*I won't keep you out ever again,* he promised. *No matter what.*\n\nAlyssa hugged him fiercely, and said, *I feel so happy, my heart feels like it's going to burst!*\n\nHe hugged her back and said, *I know exactly what you mean.*\n\n***\n\nBack on the Invictus, there were happy tears of relief as the girls hugged each other fiercely. They could scarcely believe that Alyssa had done it. Not only had she managed to defeat John's Progenitor-half, but more importantly, she'd rescued their John as well. They had all felt that otherworldly surge when Alyssa had re-bonded with him, and the connections linking them with their lovely blonde Matriarch had all throbbed with power.\n\n\"I feel like I could do anything!\" Dana said with excitement, and she leapt off the bed, bubbling with energy. \"I can't waste this. I'm going to get stuck into my research!\"\n\nRachel nodded eagerly, and said, \"I know just what you mean!\" She bounded over to join the redhead, and they grinned at the other two girls, waving them goodbye as they dashed out of the room.\n\nCalara and Jade had sat up on the bed, and they smiled as they watched the brunette and redhead run out the door. When they looked back at each other, they grinned, both sharing the same feeling of overwhelming confidence, and their senses tingled as though suddenly brought to life for the first time. \n\nJade looked at the Latina curiously and asked, \"How are you going to tap into this sudden burst of energy?\"\n\nCalara grinned at her excitedly and said, \"I feel like I've been missing something with the Dragon March traitors. I'll go and see what I can dig up!\"\n\nLooking pleased for her friend, Jade nodded encouragingly, but she felt a pang of sadness that she wasn't able to contribute in the same way as the other girls.\n\nCalara's eyes suddenly widened as she looked at the Nymph and said, \"Jade! Look at your arms!\"\n\nGazing at her lustrous dark-green skin, Jade looked closer at the lighter viridian lines highlighting the contours of her muscles, and saw that they had started to pulse with an eerie ethereal light. She stood up quickly, and peeling off her dress, she stepped clear of it when it pooled at her feet. She stared down at her nude body in amazement, as she was now shrouded in a throbbing verdant glow.\n\nClosing her eyes, she concentrated on one of her favourite forms, and pushed herself into it effortlessly. Crouching down as her body shimmered in a dark-green haze, she grew much larger, her body sprouting soft, dark-green fur, as she became the Jade Tiger.\n\nCalara had climbed off the bed, and watched the Nymph as she shifted shape, the green haze solidifying into her tiger form. She gaped at her, and said in a hushed voice, \"Look at your body!\"\n\nJade turned her heavy feline head, twisting with the flexibility of a great cat to examine herself to see what had drawn her friend's attention. The viridian stripes were pulsing brightly, as though Jade was throbbing with power, but she was more distracted by a tingling in her claws. Raising a hefty paw, she turned it over and flexed the tendons, exposing her lethal natural weapons. The six-inch-long razor-sharp claws were now glowing with an inner green radiance, and she stared at them in fascination. Suddenly, before her eyes, arcing ethereal lightning erupted from each claw, dancing along the curved edges, as though alive.\n\n\"Wow! That's incredible!\" Calara gasped in awe. \n\nJade gave her a wide feline grin, then bounded off down the corridor heading for the Cargo Bay, eager to see what other new tricks she might have developed.\n\n***\n\nJohn and Alyssa had sat up, and were just about to climb off the bed when John heard tentative footsteps heading down the corridor towards them. He concentrated, straining to hear, then glanced at Alyssa in alarm.\n\n\"It's Irillith, she's heading this way,\" he said to Alyssa, and they both sprang off the bed, and rushed over to the door. \n\nJohn got there first, and saw Irillith looking perplexed, as she walked briskly towards him. Three wary Maliri women prowled along behind her, glancing around cautiously as though expecting trouble.\n\n*Quick, cover Edraele!* he thought to Alyssa.\n\nShe dashed over to the bed, rolled the Maliri Matriarch on her side, then swiftly pulled the covers over her rounded stomach. John shot a quick glance her way, and satisfied with her efforts, stepped into the corridor with a smile on his face. The three Maliri girls behind Irillith hissed when they saw him, instantly drawing their blades and getting ready to pounce. \n\n\"Whoa!\" he said, raising his hands, palms up placatingly, \"I'm a friend, there's no need for a fight!\"\n\nIrillith rushed forward, and stood in front of him, turning to look at the lead Maliri as she said, \"You see, Luna! I told you everything was alright!\" She twisted to glance over her shoulder at him, and added, \"The shadow barrier suddenly disappeared, and I tried to convince them to stay back at the entrance, but they insisted on seeing for themselves.\"\n\nTwo of the Maliri girls looked to the third, and Luna stepped forward, speaking in a quiet, solemn voice, \"No disrespect intended Irillith, but we still work for Edraele. I must check to make sure my Matriarch is safe.\"\n\nJohn nodded, and said, \"That's very commendable, Luna. Come and take a look for yourself, she's just resting.\"\n\nThe other two Maliri assassins watched him cautiously as Luna glided forward, then looked into the bedroom. When she saw Edraele sleeping serenely, the tension left Luna's body, and she sheathed her sword in a smooth motion. The other two girls saw their leader relax, and they followed her example, putting away their weapons. Luna turned to walk away, but paused to stare at John for a moment. He saw her yellow eyes brighten with curiosity as she studied him, before she turned abruptly, and walked away. The other two girls fell into step behind her, and stole inquisitive glances at him as they left.\n\nRelieved that they had avoided a fight with the extremely dangerous Maliri women, John glanced to his left, and saw that Irillith was staring into the bedroom. Her angular violet eyes were fixated on her mother, and she stepped hesitantly into the room. He followed behind her, and Alyssa moved out of her way, letting Irillith approach uncontested.\n\n\"I've dreamt of a moment like this,\" Irillith murmured, her voice distant, and full of longing.\n\nJohn walked to her side and asked, \"What do you mean? Like what?\"\n\nIrillith turned her head slightly in his direction, but she couldn't pull her eyes away from Edraele. \"Her, vulnerable like this. Cutting her throat would be the easiest thing in the world,\" she said wistfully.\n\nAlyssa's eyes widened in alarm, but John glanced at her, and shook his head. He stepped closer to Irillith and asked, \"What's stopping you? You must have felt the change in our bond. Even if I order you not to, you won't have to obey me.\"\n\nShe closed her eyes and let out a sigh. When she opened them again, she was now looking in his direction, staring at him intently as she said, \"I won't do it, because you wouldn't want me to.\"\n\nJohn smiled at her, gathering her in his arms, and pulling her close. \"You are a good girl,\" he told her approvingly.\n\nIrillith's lovely violet eyes flared as he praised her, and she drew a sharp intake of breath. They were only inches apart, and she stared at him with longing, her full blue lips parting slightly in open invitation. Leaning in, he brushed his lips against hers, as he encircled her with his arms. She moaned with desire, moulding herself against him, her full breasts pressing against his chest. Their kissing grew more passionate until Irillith suddenly let out a startled gasp, pulling away from him and turning her head to look over her shoulder. Alyssa had leaned against her from behind, and was planting tender kisses on her neck.\n\n\"We fought too, remember?\" Alyssa whispered coyly, as Irillith turned to look at her.\n\nIrillith blushed, then staring into the blonde girl's bright blue eyes, murmured, \"We better kiss and make up then.\"\n\nJohn watched in fascination as he released Irillith from his embrace, and the two girls moved together. They stared into each other's eyes as they held each other, and Irillith was amazed at the difference she saw in Alyssa's piercing cerulean gaze. She had once found gazing into those bright blue eyes to be terrifying, but now she saw only warmth and love there, and wanted to lose herself in their enchanting depths. Irillith held her breath as they leaned in ever so slowly, her eyes sparkling with anticipation. \n\nWhen their lips finally touched, they closed their eyes and just focused on the soft tender kisses, exploring each other for the first time. He reached up, and ran his hands through their hair; golden-blonde on the left, and white-blonde on the right. Both of them moaned appreciatively as he caressed them, and their kissing intensified. When they eventually parted, Irillith was panting with lust, and she darted a wanton glance John's way. \n\nAlyssa grinned at him and said, \"You were right, she really is a good girl. Why don't you go and give her the fucking she deserves?\"\n\nIrillith flashed her a grateful smile, then held out her hand to John, her eyes smouldering with desire. He took her hand, then followed after her as she led him out of Edraele's bedroom, and down another corridor before guiding him into her own room. She sashayed elegantly over to the bed, and smiled at him as he moved to join her. He leaned down to kiss her again, and she raised a hand for a moment, causing him to pause.\n\n\"All those times when we were together, back on the ship,\" she began in a quiet voice. \"That was you, wasn't it? The real you I mean, not your Progenitor-half?\"\n\nJohn nodded, and said, \"You and I have had our differences in the past, but what he planned for you was horrible, and I had to intervene. I managed to work with Alyssa to protect your mind from him, keeping you safe from his influence. When he couldn't turn you into a mindless puppet, he lost interest, and I was able to take control for brief moments.\"\n\nShe listened to him spellbound, and said in a breathless whisper, \"I could tell. Staring into your eyes while I was on my knees, I could feel you protecting me.\"\n\nHe smiled at her, and she flung her arms around him, giving him a fierce hug in gratitude. John held her comfortingly, rubbing her back as she clung to him. When she finally drew back, she smiled up at him gratefully, and said, \"I think you deserve a reward.\"\n\nReleasing her from his arms, he watched her with interest as she glided over to one of the walls and pressed a hidden button. Panels opened out, revealing a wide variety of jewellery, and after searching through the pieces, she found what she was looking for. Her hands lifted to her neck, and she fastened a metal choker around her throat, which looked vaguely reminiscent of the collar that Dana had fashioned for her back on the Invictus. She had an excited sparkle in her eyes when she prowled over to join him, moving into his open arms. \n\nHis curiosity piqued, he raised his hand and gently brushed her throat and the metal choker encircling it, and asked, \"What's this about?\"\n\n\"I've watched days of video footage of you in bed with all the girls, and I know exactly how you'd be for our first time. You'd make love to me, being very tender and gentle,\" she said with a knowing smile.\n\nJohn ran his fingers along the exposed azure skin on her shoulders, and asked, \"Wouldn't you like that?\"\n\nIrillith stared into his eyes, and nodded solemnly as she replied, \"I'd love it. But we have some unfinished business between us first, and we need this out the way before we can move on to being like that with each other.\" \n\nHe was intrigued by this unpredictable woman, and had no idea what she had in mind. Her eyes suddenly narrowed, glinting dangerously, and she said, \"Just because you've collared me, doesn't mean I'll submit to you willingly.\"\n\nWith sudden understanding, he knew exactly what she was talking about. She tilted her head up proudly and stubbornly, a defiant challenge in her expression, and he stepped closer, looming over her. Irillith glared at him, staring into his eyes, and when she saw that he understood, her mouth twitched into a smile. After that momentary lapse, she sneered at him, back in character again. \n\n\"Of course you will,\" John replied confidently. He began to walk around her, nodding with appreciation at her stunning athletic figure. He raised his hand and flicked her long white-blonde hair off her shoulders and added, \"I know exactly what long hair means on a Maliri. I'll take you, and you'll love it.\"",
        "\"Arrogant, presumptuous fool,\" she snapped at him. \"I don't think you have the balls to even try it.\"\n\nJohn laughed for a moment, and said, \"You'll find that's one thing I've got plenty of.\"\n\nIrillith eyes sparkled as she bantered with him, but her ferocious scowl didn't leave her face. He stole a glance at her chest, and could see her nipples were creating firm little bumps in her dress, giving away her arousal. He reached out and brushed the backs of his fingers over one, causing her to gasp as she thrilled to his touch. \n\n\"How dare you touch me!\" she snarled, raising her arm back to slap his face.\n\nShe telegraphed the move so he knew it was coming, but when she whirled around giving him a stinging smack across the face, he was shocked that she hadn't pulled the blow. When he stared back at her in amazement, he could see the look in her eyes, urging him to punish her. He reached up, grabbing her long dress at the shoulders, and ripped it apart in a single savage move, causing it to tear loudly. Irillith's gasp of excitement brought his attention to her face, and he could see the fevered look in her expression as her dress fell to the floor in tatters, leaving her wonderfully exotic body deliciously nude. \n\nGrabbing her by the wrist, he pulled her over to the bed as he sat down, and hauled her over his knee. \"I think you've needed some firm discipline for a long time,\" he told her sternly. \n\nShe laughed contemptuously, and said, \"You've attempted to tame me before, but you smack like a girl. Pathetic excuse for a man.\"\n\nJohn knew exactly what she was asking him for, and he'd been feeding her cum for weeks now, making her strong and resilient. He held her down with his left hand, and raising his right brought it down with a weighty smack on her rump. She shrieked as he spanked her, her muscular blue cheeks reverberating with each impact as he punished her behind. Her cries turned to ones of arousal, and she began to moan excitedly, letting out breathy gasps as his hand tanned her bottom. Eventually it was glowing a nice dark blue, and standing up abruptly, he flung her onto the bed. \n\nShe glared at him, her violet eyes hooded with lust as she asked, \"What are you going to do now? Don't think for one moment I'll let you bring your ugly cock anywhere near me!\"\n\nJohn unbuttoned his shirt with slow deliberate movements, then threw it across the room, leaving him bare-chested. She stared at his muscles with eager anticipation, then watched him intently as his hands moved to his waist, unbuckling his belt. He pulled it clear then cracked it like a whip, making her draw in a sharp breath. He cast it aside, then undid his trousers, letting them fall to the floor. \n\nShe watched him warily as he climbed on the bed, moving towards her like a cat stalking its prey, but she made no move to try and escape. John grabbed her lithe legs, pulling them towards him, and spreading them roughly.\n\n\"You brute,\" she said angrily. \"You're much too big! That monster will never fit inside me, I'm far too tight.\"\n\nJohn crawled up the bed, covering her ravishing blue body with his own as he said, \"You'll take me just fine. All that cum you've been greedily filling your belly with has changed you. You'll stretch for me alright, and love every minute of it.\"\n\n\"Never!\" she spat, shaking her head in denial, but her mask slipped, and she grinned at him with delight.\n\nHe gathered her wrists in his hands, pinning her to the bed, then nuzzled the broad head of his cock against her pussy. He tilted his hips, pushing forward and she stared up at him, her angular eyes opening wide with wonder as he entered her for the first time.\n\n\"You're fucking huge,\" she groaned, as he slowly and steadily stuffed her full of cock.\n\nWhen he reached her cervix, he paused to let her adjust, and she panted breathily, her chest heaving underneath him.\n\n\"You're going to take me into your womb,\" he informed her, \"It's good for you to get used to having it stretched. I'll be breeding your hot little ass plenty of times in the future.\"\n\nIrillith whimpered with ecstasy, and brought her thighs up so her legs were crossed behind him. She pulled him towards her, urging him onwards. Seeing she was desperate to be fully penetrated, he increased the pressure with his hips, and her gorgeous body yielded for him, letting him invade her depths. He only stopped when his quad was resting on the glowing cheeks of her ass, his length buried to the hilt inside her.\n\n\"You win,\" she sighed rapturously. \"I submit to you.\"\n\n\"You want me to fill your womb with my cum?\" he asked her teasingly.\n\nShe nodded fervently and gasped, \"More than anything.\"\n\nLeaning down and kissing her, he began to move, slowly at first, then with greater vigour. He kept her wrists pinned to the bed, which made her arch her back, brushing her nipples across his chest as he fucked her with abandon. As he ground against her clit, she let out a keening wail of pleasure as she came, finally getting the release he'd been building her towards so spectacularly. John was merciless, and once she'd started cumming, he stroked her through one intense orgasm after another. \n\nHer eyes flared dangerously after the third, and she suddenly leaned forward and bit him on the shoulder as the fourth climax surged over her. John bucked and rammed himself up to the quad inside her, then roared out his own release, sending a long blast of cum inside her. He grabbed her hair, pulling her back from her grip on his shoulder, then stared into her eyes as he pumped her womb full of his sperm. Irillith tried to maintain that eye contact as long as she could, but she was too overwhelmed with sensation, and screwed her eyes shut as she shuddered through her final release.\n\nHis quad finally sated, John sagged against her, panting for breath. He could feel her chest rising and falling beneath him as she desperately sucked air into her lungs, and he carefully eased his weight off her enormously rounded tummy that was brushing against his stomach.\n\nIrillith gazed up at him adoringly, as she reached down and placed her hands on her swollen belly. \"I've needed that for weeks,\" she admitted, blushing slightly.\n\nJohn laughed, gently easing out of her and collapsing at her side. \"I was winging most of that. Was that what you had in mind?\" he asked, with a playful grin on his face.\n\n\"You were magnificent,\" she told him with a well-fucked grin on her face.\n\nMovement by the door momentarily drew their attention, and Alyssa glided in, smiling at them both approvingly. \"That was hot as hell,\" she purred giving Irillith an admiring glance.\n\nIrillith gave her a grateful smile and said, \"Thank you for letting me borrow your man.\"\n\nAlyssa quickly stripped off her clothes, and got into bed on Irillith's other side, as she said, \"Don't be silly, he's yours now too. Sharing is all part of the fun.\"\n\nThe two girls kissed lovingly, and Irillith let out a contented sigh as John and Alyssa began to stroke her heavily engorged tummy. She looked at the blonde girl hesitantly, then said in a quiet voice, \"I know you must be tired after that fight. Do you need topping up?\"\n\nAlyssa grinned at her, and replied, \"That's lovely of you to offer, and yes, that would be fantastic. We can wait though, there's no rush. Just enjoy the feeling of your womb being stretched for the moment, and you can imagine what it'll be like when you're pregnant.\"\n\nIrillith's expression softened, and her angular violet eyes were filled with longing as she glanced at John. He smiled at her and said, \"If you keep being a good girl, then definitely.\"\n\nThey cuddled her as she smiled at them both with wondrous gratitude on her face. Alyssa finally gave her another kiss, and when Irillith nodded, the mischievous Terran girl started trailing kisses down her azure body. John stroked her tummy tenderly as Alyssa began to lap away at her, and soon Irillith's breathy cries filled the room once more.\n\n***\n\nDana sat cross-legged in the middle of the holo-suite, enjoying the peace and tranquillity. Faye had gone to help Rachel, which left the redhead alone with her thoughts, centred in the huge darkened room, and surrounded by holographic images of the elements. She glanced at the incredibly complex crystal compound she had been building over the last few days, and frowned, realising in an inspired moment of brilliance that it looked wrong. It seemed discordant somehow, like something significant was missing.\n\nWith a dismissive wave of her hand, she deleted the chemical formula, and gazed out over all the known elements again. She took a deep breath, closing her eyes as she drew her mind inward, and a shiver ran down her spine as her skin felt like it was tingling with electricity. When she opened her eyes again, she felt focused and alert, and her senses came to life with a ringing sensation of clarity as she stared out over the holo-suite.\n\nReaching out with her hands, she began to reposition the elements around her in a vast sweeping semi-circle. Breathless with excitement, she began to see patterns and shapes that had eluded her before, and as she moved them around in a blur, it suddenly came to her in a perfect epiphany. There were elements missing! She could see the gaps in the tapestry, glaring and obvious to her now, and she marvelled with the sense of discovery.\n\nShe began adding protons and neutrons to the nucleus of an atom with one hand, and adding electrons to the valence shell with another. As the new atom grew in size and complexity, she began to add electrons to the inner subshells, her hands moving in a blur with her excitement. Finally she was done, and she stared at it in wonder as it floated before her eyes.\n\nCradling it in her hands, with an awed expression on her face, she slotted it into place in the web of elements that surrounded her. It fit perfectly, restoring order and balance to the glaring hole in her atomic vista. Turning back to the next gap, she saw the shape form in her mind, and the flawless perfection of that design made her heart skip a beat. She began to form another nucleus, but briefly paused, wondering if she should think of a name for the first element she had created. She shook her head and continued with her task. There were eighteen more to go, and she was far too busy to spend time trying to think of good names for them all as she went.\n\n***\n\nRachel sat on the floor of the Engineering Bay, looking up at the Trankaran genetic code. Formed of silicon rather than carbon, it was blocky and far more unwieldy, and for a Terran brought up with an intimate familiarity with carbon-based life, it was still unsettling to see. There were three genetic strands she was studying, and she stared up at them as they flashed before her eyes.\n\nFaye had been watching her curiously, and she stood next to her as she asked, \"What are you looking at?\"\n\nRachel turned, and smiled at the AI construct as she replied, \"The top two are from the Trankaran Forgemaster's assistants. The last one is from a sample I took from the Glowing Queen's head.\"\n\n\"Have you found out anything interesting so far?\" the purple sprite asked her, with a cute furrow of her tiny brow.\n\nRachel nodded, but sounding perplexed, she replied, \"The Trankarans were definitely created by the Progenitors. I've seen their fingerprints all over this code, but something's bothering me...\"\n\nFaye frowned, sad to see her friend looking troubled, and asked, \"What's wrong?\"\n\nRachel turned to gaze up at the flowing genetic code and replied, \"Even though the Trankarans are constructed from silicon, there's something familiar about the way their evolution has been guided.\"\n\n\"You mean the fingerprints are familiar?\" Faye asked in confusion, taking Rachel literally, and blinking at her with her trusting luminescent eyes.\n\nRachel's eyes went wide, and she gasped as she exclaimed, \"Faye! You're a genius!\"\n\n\"I am?\" Faye said, looking bewildered as she watched Rachel leap to her feet, and dash up the steps to the consoles on the Chief Engineer's podium. She rapidly tapped commands altering the holo-projectors, and the Trankaran genetic code suddenly shrank in size, then shifted upwards to make room for a dozen DNA molecules. When she hurried back to her previous spot on the floor, she stared up at the scrolling code in open-mouthed wonder.\n\n\"They sign their name on their creations...\" she whispered reverently.\n\n***\n\nCalara sat on the Bridge, gazing up at the sector map of the Dragon March. She had tracked all the recent fleet movements in the sector dating back to when the conflict began, along with the classified orders tagged next to each set of redeployments. There was a particular fleet engagement she'd been studying, and she knew without a doubt that the traitor in Terran Federation High Command had played a part in the disastrous outcome of that battle.\n\nShe narrowed her eyes in anger at the word 'Classified' highlighted in red next to each redacted set of orders. If she could only see who had given those spurious commands, she would know in an instant who had been responsible for the quite deliberate, and appalling loss of men and ships. It was subtle, the way the traitor had played their hand here. Unless you were specifically looking for exactly this kind of betrayal, it would seem like a perfect storm of terribly unlucky circumstances.\n\nCommodore Daniel Walker on the battleship \"Demeter\", had led a sizeable battlegroup in a fierce engagement against the Kintark Empire in the Delta-Leonis system, winning a stunning victory. The Kintark group of eight cruisers and supporting destroyers had been wiped out, in no small part due to the inspired Tactical acumen of Commodore Walker. He had managed to eliminate the entire Kintark fleet without losing a ship, but almost every vessel in his own fleet had sustained significant damage in the intense firefight.\n\nRecalled from the front lines, Commodore Walker had led his battered but triumphant task force to a staging point to refuel and rearm, before they would retire to the Olympus Shipyard for repairs. She played back the subsequent orders, her eyes starting to well up at the terrible betrayal of such an outstanding officer.\n\nThe picket fleet that guarded the approach to the staging point had been rotated out as per schedule, but at the last minute, their replacements had been diverted. A sudden raid led by a Kintark battleship in the Tau-Leonis system, had resulted in a frantic flurry of orders, with several nearby fleets ordered to interdict and shut down the raiders, before they could threaten Port Medea. In the face of it, a necessary and sensible precaution, but it was to have terrible consequences. \n\nThe raid was a feint that led the intercepting fleets away on a merry dance. While they were distracted, a second Kintark task force led by a battleship, and supported by two carriers, had fallen on Commodore Walker's staging point. Caught in the middle of refueling, the overwhelming waves of bombers had set upon the battleship Demeter, its six supporting cruisers, three frigates and twelve destroyers. The already damaged ships had been ripped apart by plasma torpedoes, with the loss of all hands, as well as the entire support fleet of tankers and maintenance crews.\n\nTo a casual observer, it appeared to be a tragic case of terrible timing and catastrophic bad luck, but Calara had immediately recognised it for what it was. A deliberate collaboration with Kintark forces, which led to the deaths of over five thousand personnel, dozens of ships, and one of the Terran Federation's most gifted officers.\n\nCalara heaved a sigh, desperately longing to know who out of the three Admirals in the sector had been responsible for this unforgivable treachery. Her list of suspects were Gabrielle Lynton, Leonard Norwood, and Ricardo Santini, and she wished she knew them better, so that should could make an accurate assessment of their characters.\n\nKnow them better...\n\nShe gasped, her dark brown eyes going wide as it suddenly came to her in a moment of inspiration. All the Fleet orders in the recent Dragon March conflict had been marked as classified, but not every order those Admirals had given over the rest of their careers. Her hands moved in a blur over her Tactical console, and the Sector map of the Dragon March fell away, to be replaced by a massive holographic overlay map of the Terran Federation. \n\nEvery fleet movement order each of those Admirals had given through their careers began to appear on the Empire map. From their initial forays as Rear Admirals, through their time as Vice Admirals, right through to the time since achieving full Admiral rank, she plotted everything any of them had ever ordered. The map became a bewildering patchwork of fleet movements, which to any normal person would be an unreadable mess. \n\nCalara relaxed, and just absorbed the data, getting a feel for the three minds behind those strategic manoeuvres. She began to see how they thought and reacted to situations, building up a detailed analysis of each of their distinctive styles. Lynton was cautious, always wary about over-committing her forces. Santini was bold, and liked the idea of a heroic final battle, luring the enemy into major fleet engagements. That left Norwood, who liked to deceive a foe with feints, hiding his vulnerable areas while springing devastating counter attacks. \n\nHer eyes widened as she recognised the hand of the traitor all over the tragedies plaguing the Terran Federation in the Dragon March conflict. Calara had identified the High Command traitor at long last. She knew it without a shadow of a doubt in her mind.\n\n***\n\nJohn and Alyssa lay in Irillith's comfortable bed, sleeping peacefully as they got some much needed rest. John was the first to wake, and it took him a moment to get his bearings as he looked around this strange bedroom, whilst trying not to disturb Alyssa who was still fast asleep. He suddenly remembered where he was, and that Irillith had kissed him goodbye as she went to check in with Luna.\n\nAlyssa woke up a moment later as though she didn't want to miss any time with him, and seeing her starting to stir, he stretched languidly. She sat up and stretched too, and he admired her spectacular bronzed body as she did so. \n\n\"As radiantly beautiful as ever,\" John told her as he admired her openly.\n\nShe smiled at him, enjoying the compliment, and posed her athletic figure for him enticingly. \"Are you trying to flatter me into bed?\" she asked him with a flirtatious smile.\n\nHe laughed and replied, \"I think we've probably been in bed quite a while already. It must have been at least a few hours for your tummy to go down.\"\n\nShe glanced down at her toned stomach and pouted as she replied, \"I wanted to savour being full up again, but I was so flaked out I fell asleep almost straight away.\"\n\nJohn grinned at her and said, \"Don't worry, I'm sure that won't be the last time...\"\n\nAlyssa let out a blissfully happy sigh, then lay down next to him, giving him a cuddle. After a quick telepathic conversation with all the girls, she looked startled for a moment, before she exclaimed, \"We've been asleep for nearly twelve hours! That battle must have really taken it out of us.\"\n\nHe hugged her tightly and said, \"I hate the idea of us fighting like that. What happened exactly?\"\n\nShe sat up and looked at him curiously as she replied, \"You really don't remember any of it?\"\n\n\"Not a thing. I only regained consciousness after you freed me at the end,\" John explained ruefully. He paused, then had a curious expression on his face as he asked, \"How did you manage to defeat my Progenitor side anyway? Or even know how to free me from that ethereal prison?\"\n\nAlyssa looked thoughtful for a while, before finally replying in a quiet voice, \"I don't know, but it was weird. It felt like I was being guided through the whole battle. Progenitor-John kept throwing psychic attacks at me, but I instinctively knew how to block or counter them.\"",
        "John look sombre as he thought about it, until he finally said, \"Rachel said that I gave you these powers when I modified your DNA, giving you that third helix. Maybe I subconsciously gave you some kind of built-in instruction manual at the same time?\"\n\nGiggling at the thought, Alyssa shrugged and said, \"Well, whatever it was, it saved my ass.\"\n\n\"It's a magnificent posterior, and well worth saving,\" he agreed, reaching down to have a quick feel. \n\nShe smiled at him, then turned more serious and said, \"In all honesty, the fight felt a bit one-sided. Progenitor-John seemed shocked to the core when I laid into him with some kind of crazy psychic blast that sent him flying. He had cut through our connection just before I got here, so he must have been low on power, and wouldn't have been able to get any more from the girls. Maybe that was the reason why I was able to beat him?\"\n\nJohn grinned as he said, \"Actually, we already stopped him from tapping you girls for power, which is probably why he cut off his connection to you. Don't you remember reinforcing their mental shields?\"\n\nLooking puzzled, Alyssa said, \"What do you mean? I didn't do anything...\"\n\nJohn stared at her in confusion, and they both looked equally bewildered for a moment. \n\n\"Oh! Talking about mental shields reminds me, I need to check on something!\" Alyssa said urgently. \"Sit up for a moment!\"\n\nWhen he did as she asked, she focused herself inwards, and then carefully peeled her spirit-form from her body. She could see John directly in front of her, and she was greatly relieved to see that his gleaming crown was back in place once more. It looked different now than before, sturdier somehow, and as she stared at it, she saw an intricate latticework covering every square inch of its surface. Scampering over the bed, she crawled around behind him to look at his shield from all angles, and the huge rent at the back was now completely fixed. Letting out a sigh of relief, she guided herself back into her body, and grinned at him with satisfaction.\n\n\"All safe and sound,\" she said with a satisfied smile.\n\n\"What were you checking?\" John asked her, intrigued.\n\nAlyssa let out a sigh, and replied, \"Edraele was trying to break through your mind-shield the first time we met her. I stopped her, but she damaged it somehow. I think the mental barrier was stopping Progenitor-John from taking control, but when she cracked it, it kind of let him... leak out.\"\n\nJohn's eyes went wide as he exclaimed, \"That must have been how he was able to start taking over for longer periods of time!\"\n\nShe nodded animatedly, and said, \"Edraele must have finished the job when you went to meet with her. When she broke her way in, it unleashed Progenitor-John.\"\n\n\"And I would have been permanently banished, if you hadn't saved me,\" John said grimly. \n\nAlyssa looked hopeful as she asked, \"Does that mean Progenitor-John is gone forever?\"\n\nJohn sighed as he replied, \"I don't think he's been destroyed. It felt like he swapped places with me, leaving him doomed to fall forever in a bottomless abyss.\"\n\n\"Let's hope that fucker stays there!\" Alyssa said with a flash of anger, before she leaned in to give him a reassuring hug.\n\nThey eventually parted, and John said, \"We probably should get up, and go check on Edraele. She'll be waking up soon.\"\n\nAlyssa nodded distractedly as Calara, Dana, Jade and Rachel all started chattering away to her excitedly. She suddenly sat up straight and said, \"We need to get back to the ship soon. The girls have been busy while we've been sleeping.\"\n\n\"What do you mean?\" John asked her looking intrigued.\n\nShe grinned at him as she vaulted out of bed, and said, \"I'll let them explain. Let's go check in on Edraele!\"\n\nThey dressed quickly, and left the bedroom, walking back to where they left Edraele sleeping. They found Irillith in her mother's bedroom, watching the Maliri Matriarch slumbering away peacefully. She looked up at them as they entered, and when she smiled at them warmly, her beautiful azure face lit up like a glorious summer sky.\n\n\"You two have been asleep for hours!\" Irillith remarked. \"I was starting to get a bit worried.\"\n\nJohn smiled at her apologetically, and said, \"Sorry about that. We were both wiped out from the fight. How are you doing though? Are you OK?\"\n\nIrillith smiled at him, and said wryly, \"If you're referring to where you spanked my bottom, the mouthfuls of cum Alyssa shared with me healed me up hours ago.\" She glanced at the blonde, giving her a grateful smile, and Alyssa winked at her playfully.\n\nHe chuckled, and said, \"That's good to hear.\" He was about to continue, when his stomach grumbled loudly.\n\n\"I'll go and get you both some food,\" Irillith said with a laugh. Pointing over to an unusual looking device on the wall, she said, \"I'll bring you some wine, but you can get water from there if you're thirsty.\"\n\nJohn pulled her in for a kiss, and she sighed contentedly as their lips came together. When they finally parted, she glided out of the bedroom with a dreamy smile on her face.\n\nAlyssa walked over to John, slipping her hand into his, and asked, \"You were actually asking her how she felt about Edraele, weren't you?\"\n\nHe nodded, and replied, \"Yes, but if she doesn't want to talk about it, that's fine.\"\n\nThey both looked over at the Maliri woman asleep in bed, and spotted that her hair had changed colour, turning white just like Irillith's had done. Alyssa walked over to the Maliri water dispenser, and looked at it curiously for a moment as she tried to figure out how it worked. She closed her eyes for a few seconds, then grinned with satisfaction, and pressed an invisible indentation on the wall which released a large cup. It filled with water, and she picked it up to take a sip, then offered it to John.  \n\n\"Good guess!\" he remarked, as he took the cup, and drank heavily to quench his thirst.\n\nWhen he handed the cup back to Alyssa, she smiled at him, and admitted, \"I cheated. I jus-.\"\n\nEdraele yawned behind them, and Alyssa stopped speaking immediately. She quickly turned her attention back to the dispenser to fill her cup with water, while John walked briskly over to the side of the bed, and looked down at the Maliri Matriarch to check she was alright. Edraele's eyes had opened, revealing orbs that were a slightly darker purple hue than her daughters. She stared directly at the ceiling, staying completely silent, her only movement the occasional blink of her eyelids. John darted a puzzled glance at Alyssa, who shrugged at him, equally bemused by Edraele's lack of reaction to their presence.\n\n\"Edraele, are you alright?\" John asked her cautiously.\n\nShe turned her head towards him, rotating it in a smooth, precise motion, which was eerily disconcerting. \"I am dehydrated, my Lord,\" she intoned to John in a flat, monotonous voice, utterly devoid of any form of emotion.\n\n\"Uh-oh,\" Alyssa said ominously, as she handed over the cup. \n\nHe nodded, looking concerned, and turned his attention back to Edraele as he said, \"Here, sit up and drink some water.\"\n\n\"Yes, my Lord,\" Edraele replied in her neutral voice, complying with his request immediately.\n\nThey watched her drain the entire cup, then sit there blankly, staring off into the distance. \n\n\"What's up with her?\" Alyssa asked, quite bemused, as she leaned over to wave her hand in front of Edraele's face. The blue skinned woman stared straight ahead, not reacting in the slightest.\n\nJohn looked grim as he said, \"Progenitor-John must have done this to her.\" He frowned in confusion as he added, \"But why he'd want to turn her into some kind of blank robot is beyond me.\"\n\nAlyssa felt a strange tugging sensation in her chest, and after recovering from the momentary surprise, she focused herself inwards, drawing out her spirit-form. Edraele was sitting straight backed on the bed in front of her, staring into the distance, and Alyssa climbed on the bed to take a closer look, curious to find out what she was supposed to see. As she concentrated on Edraele, she started to become aware of the Maliri woman's mind before her. \n\nUnlike with John, there was no mental barrier of any kind protecting Edraele, and Alyssa was able to peer directly into her mind. It was fascinating to get her first glimpse into another person's subconscious, and Alyssa looked around eagerly. The Maliri Matriarch's mind held thousands upon thousands of pieces of information, all stored away neatly in a complex structure of memories, but the framework seemed empty somehow. With a shiver of dread, she realised that the emotional context for all these memories had been stripped away, leaving Edraele's mind laid bare. Alyssa shivered as she began to understand what had happened, and she backed away from the deeply unnatural state the poor woman had been left in.\n\nReturning to her own body, Alyssa looked up at John in shock, and gasped, \"He's wiped out her mind! Edraele's entire personality has been totally destroyed!\"\n\nThere was a clatter from behind them, and they turned to see that Irillith had entered the room, and unceremoniously dropped the tray of food on a dresser. She walked over towards them looking pale, and finally stopped as she reached the bed, a series of emotions flickering over her face. \n\nStaring intently at Edraele, Irillith let out a shuddering sigh, and her voice was full of sorrow as she said softly, \"I still loved you, mother, despite everything you've done. Why couldn't you ever love me back?\"\n\nEdraele said nothing as she stared ahead mindlessly, completely oblivious to her daughter's heartfelt plea. Recognising the truth of Alyssa's words in front of her very eyes, Irillith turned, and slowly walked away. John rushed over to comfort her, but she turned to look at him, and smiling bravely, she said, \"I'd like to be alone for a little while, if you don't mind?\"\n\nHe nodded, and leaned in to give her a tender kiss on the cheek. \"Just call if you want us,\" he said, his voice full of sympathy.\n\nShe gave him a sad smile of gratitude, then walked away, her shoulders bowed with grief. John and Alyssa watched her leave, and then shared a sombre look.\n\n*I wish I hadn't said that out loud,* Alyssa thought to him, her voice full of remorse.\n\n*Irillith would have found out either way,* John replied soothingly. He turned back to look at Edraele, and asked, *So what do we do with her now? We can't just leave her like this.*\n\nAlyssa stared into his eyes and let out a sigh. *I think we have two choices. We either put her out of her misery, or blank state, or whatever you want to call that,* she said, gesturing towards the shell of Edraele. Looking thoughtful, she then added, *Alternatively, you could fill in the blanks yourself. Progenitor-John must have mind-wiped her with the intention of giving her a new personality. We must have stopped him before he could do much more than get her to refer to you as 'My Lord'.*\n\nJohn grimaced, and said, \"I wouldn't have the first clue how to do that.\"\n\n\"Are you sure?\" she replied with a smile. \"I thought we'd established that you've had a fair bit of practice with tweaking personalities over the last few months.\"\n\nHe rubbed his chin thoughtfully, then after looking down at Edraele, he nodded decisively. Squatting down by the foot of the bed, directly ahead from where the Maliri Matriarch was staring blankly, he stared into her eyes.\n\n\"Edraele?\" he asked her. \"How would you like to help me do some good around here?\"\n\nShe blinked once, before locking eyes with him as she replied, \"I will do whatever you wish, my Lord.\"\n\n***\n\nThey left Irillith to her grief for a few hours, then John decided to go and check on her, to make sure she was alright. He walked up to her bedroom door, and tapped on it lightly.\n\n\"Come in,\" Irillith called to him through the door.\n\nOpening it, he walked inside, and found her sitting on the bed looking drawn. She gave him a wistful smile, and opened her arms for a cuddle, so he walked over to join her and lay on the bed. Irillith snuggled into his arms, and rested her head on his chest as he encircled her in a comforting embrace. They lay like that for a little while, and he stroked her long lustrous white hair as he held her.\n\nEventually Irillith looked up at him, and asked softly, \"Progenitor-John wanted to do that to me, didn't he?\"\n\nJohn gazed down at her, seeing the sadness in her angular violet eyes, and replied, \"Yes. He planned to turn you into a puppet, then kill your mother, and use you to control House Valaden. Alyssa checked your mother's memories, and he laid out his plans with Edraele before he erased her personality.\"\n\nShe hugged him tightly and said, \"Thank you for saving me from him.\"\n\n\"You're welcome,\" John said, stroking her back soothingly.\n\nWith a sigh, Irillith sat up and looked down at him. She hesitated for a moment, then asked, \"What are you going to do with my mother now?\"\n\nJohn studied her for a while, unsure how she would react, then finally said, \"Although Edraele's mind has been wiped, she's still the Matriarch of House Valaden. She's in a position to make some significant changes to your society.\"\n\nIrillith laughed dryly, shaking her head as she said, \"The paragon of virtue, through and through. I used to think it was some elaborate act, but you really do want to help people, don't you? Instead of exploiting this situation, and ripping off the Maliri for everything you can get your hands on, you're planning to do what? Stop the public floggings? Prevent all the murders?\"\n\nHe smiled at her and replied, \"Yes, amongst other things. I'm starting to really like the person you're turning into, and I'll do whatever I can to prevent any other Maliri girls from suffering the kind of abuse you endured.\" He then looked a bit guilty and said, \"Although, I had hoped to use that shipyard we passed on the way here, and give the Invictus a full refit. We did come through on our end of the deal, so getting Edraele to help with that seemed reasonable. Maybe I'm not that virtuous.\"\n\nShe smiled at him affectionately, and leaned down to give him a tender kiss. She gazed into his eyes as she said, \"Edraele never planned on letting you leave with any weapons. Don't worry though, I'm with you now, and I'll make sure you get everything you need.\"\n\nHe returned her grin, and they both got up off the bed, and headed back to her mother's room to rejoin Alyssa. Edraele was already awake by the time they walked in, and she was sitting upright, smiling contentedly as she stroked her rounded stomach. Irillith quirked an eyebrow at John, and he had the good grace to look guilty.\n\n\"Sorry if it feels weird. It's the only way I can start building her a new personality,\" he apologised, watching her reaction with a wary eye.\n\nIrillith smiled at him, and said, \"It's okay, I understand.\" With a glance over at Edraele she added, \"It does feel strange being in the same room as her, and not having to worry about setting off her temper. I can't even remember the last time I was this relaxed around my mother.\"\n\nAlyssa walked over to the Maliri girl and gave her a quick hug, and Irillith smiled at her appreciatively. \n\n\"So what's the plan now?\" Alyssa asked them both.\n\nIrillith looked thoughtful, and eventually said, \"If you want to give the Invictus a major refit, the Genthalas Shipyard is by far the best place to do it. My distant cousin, Makaela, is in command of the shipyard, and has been running the place for over a decade. With Edraele's assistance, we can demand full cooperation from the Maliri there.\"\n\nJohn glanced at Edraele, and asked, \"Shall we all head back to the Invictus, then travel up to the shipyard in my ship?\"\n\nShaking her head, Irillith said, \"No, Edraele would never normally agree to travel on a non-Maliri vessel. We should take her private shuttle up to the shipyard, then rendezvous with the rest of the girls and the Invictus there.\" Eyeing Edraele's curved tummy, she added, \"If we get my mother to wear one of her more formal gowns, the multiple layers will hide that.\"\n\nHe nodded, then turned to Edraele, and said in a kind voice, \"Edraele, we're going to go and visit Genthalas Shipyard. When Alyssa picks out an outfit for you, would you put it on please.\"\n\nEdraele rose slightly unsteadily off the bed, wavering a little with the unexpected weight around her waist until Alyssa darted over to help her. She smiled at him, and when she replied obediently there was a little more life in her voice, \"I will do so at once, my Lord.\"\n\nIrillith stared askance at her mother for a moment, before turning to face John and saying, \"Seeing her act like that is going to take me a very long time to get used to.\" She looked past him to the corridor, and said, \"We better go and tell Luna, Almari, and Ilyana, that we're leaving. They'll insist on coming along too.\"\n\nShe strode past him, out into the corridor beyond, and he followed after her as she walked back towards the main entranceway. Luna was waiting on the inside of the door, and she turned to stare at them as they approached.\n\n\"My mother has commanded that we visit Genthalas Shipyard,\" Irillith said imperiously. \"We'll be leaving as soon as Edraele is ready.\"\n\nLuna bowed to her politely, and said, \"As you wish Irillith. We will be ready to depart as soon as you say the word.\"\n\nJohn watched the lithe Maliri woman curiously. She had a calm, confident poise to her, and while she appeared to be relaxed, he could see she was taking in everything. She eventually turned to look at him, aware of his scrutiny, and gazed his way with her angular yellow eyes. He was quite startled when her lips twitched into a small, hesitant smile. \n\nEdraele swept out of her room a few minutes later, now dressed in a long flowing purple robe consisting of several layers. Unless you were really looking for it, you would never suspect her tummy was packed full of John's cum, concealed as it was beneath the robes. When he heard the mortified gasp from the Maliri girl standing beside him, and took one look at Luna's face, he realised instantly that all their precautions had been pointless. \n\nThey could have dressed Edraele in a bikini, and Luna still wouldn't have spotted her rounded belly, she was fixated on something far more galling. When the House Valaden Matriarch glided towards them, with her long flowing white hair brushing her shoulders, Luna gaped at her in stunned disbelief. Irillith cleared her throat pointedly, and the assassin stared at her with wide eyes. \n\n\"You know my mother's temper,\" Irillith warned Luna sternly. \"I'd be very careful not to let her see you react that way.\"\n\nLuna gulped, and gave Irillith a grateful nod. She turned towards the doors, and said quietly, \"Almari, Ilyana, we will be leaving for the Matriarch's private shuttle.\" Her voice dropped to a whisper as she walked towards her deadly colleagues, and if not for John's enhanced hearing, he never would have heard her say, \"Irillith's hairstyle seems to be catching on, but don't react to Edraele's appearance. The last woman she caught giving her a look she didn't like, she flayed alive.\"\n\nAlmari, and Ilyana, darted quick glances behind them, and John heard their startled gasps before they got themselves under control. As they turned to face front again, Almari spotted him, and stared curiously before blinking rapidly, and snapping her head around to attention once more. She recovered just in time, as Edraele and Alyssa glided up to join them, and when they breezed past, the assassins fell into step behind them.\n\nIt was only a brief walk from the Matriarch's quarters to the Hangar holding her shuttle, but it felt like it took an eternity to John. All the Maliri women they encountered on the route reacted in the same way; utter dumbfounded astonishment at Edraele's flagrant disregard for all sense of propriety with her radical new hairstyle. They very quickly snapped themselves out of their stupor, and hurried about as they suddenly realised they had pressing business elsewhere, desperate not to be caught staring at the volatile Matriarch. As the Maliri scrambled frantically to get out of their way, the full extent to which Edraele Valaden had terrorised her own people, suddenly became obvious to John. ",
        "For the first time since they'd been dealing with the aftermath of his Progenitor alter-ego's actions, he began to realise that what had happened to Edraele was surely no bad thing, and his guilt began to ease. He just hoped he'd be able to do a thorough enough job of building her a new personality, and make it convincing enough that she might be able to make some changes for the better around here.\n\nHe was drawn from his reverie when their bodyguard of assassins scurried forward to prepare the shuttle for takeoff. Gazing up at it, he was surprised at the scale of the golden ship, and the shuttle was a sleek, elegant looking two-hundred-metre long vessel. Irillith led them over to an airlock on the port side of the ship near the bow, and once they had all stepped inside, the crystal door rotated down quietly behind them. \n\nThe interior of the ship was luxuriously opulent, with plush red carpets and golden scrollwork around the doors and bulkheads. John wasn't sure how practical the thick carpeting was, and it seemed like an unnecessary fire risk to him, especially in a spacecraft, where an outbreak of fire was always a serious hazard. They followed Irillith into the elevator, and it ascended silently up to the second deck. \n\nWhen the crystal door rotated upwards, Irillith said, \"The state rooms are down there. If you want to make yourselves comfortable, I'll check in with Luna, and get us underway.\"\n\n\"Thanks, Irillith, you've been a great help already,\" John said to her gratefully.\n\nHe walked out of the elevator with Alyssa and Edraele following in his wake, and they strolled up to the large audience room beyond. There was a large chair on a raised pedestal, at one end of the room, which was essentially an elaborate throne for the Maliri Matriarch to greet guests aboard her ship. \n\nJohn studied the throne curiously, and then turned to look at Edraele, who was standing quietly at his side. \"Who did you meet with in here?\" he asked her curiously.\n\nShe smiled at him, and then said in a neutral tone, \"I primarily use this ship for meeting with Planetary Governors, on the occasions when I wish to leave the palace for a change of venue. Many decades ago, I used to visit other Houses to make alliances and deals with other Matriarchs. Nearly a century of my scheming, betrayals, and assassinations have soured my relationships with the other Maliri Houses, so I haven't left Valaden territory in many years.\"\n\nAlyssa shook her head, and said, \"Damn, Edraele was a really nasty piece of work.\" She then flushed and reached out to place a hand on Edraele's arm, and said, \"I'm sorry, I didn't mean any offence. I know you're different now.\"\n\n\"None taken, Matriarch Blake,\" Edraele said with a pleasant smile.\n\nThe blonde girl raised an eyebrow at John, and asked playfully, \"Is she hinting at something?\"\n\nJohn chuckled, flushing a little, and asked the Maliri woman, \"Why did you call Alyssa that?\"\n\nEdraele paused, and looked confused as she replied, \"She is your Matriarch isn't she, my Lord? And you do rule the House of Blake.\"\n\nAlyssa rolled her eyes, and said, \"I'm not a fan of all this Matriarch stuff, it makes me sound like an old maid!\" She smiled at Edraele, and said, \"You can just call me Alyssa.\"\n\nEdraele smiled at her, and nodded, saying in her inflectionless voice, \"As you wish, Alyssa.\"\n\nFrowning at John, Alyssa said, \"She doesn't sound right. If we're going to pretend nothing's changed, and try to pass her off as normal, you'll have to work on giving her voice more emotion.\" \n\nJohn nodded, and smiled ruefully as he said, \"I'll try and focus on her voice then, and see if that makes any difference. This is all still new to me though, guiding the changes like this. With Irillith I just focused on healing any mental trauma her mind had suffered. Any other modifications with you girls before were subconscious, and out of my control.\"\n\n\"You'll do great,\" Alyssa told him with a confident grin.\n\nHe looked worried, and said, \"I hope so. There's a lot riding on me getting this right.\"\n\nAlyssa stepped in front of Edraele, and smiled at her reassuringly, then slipped one of her slender hands between the folds of the Maliri Matriarch's layered robes. Edraele smiled back, and watched calmly as Alyssa gently brushed her fingers over Edraele's slim tummy, then nodded with satisfaction. Glancing over at John, she said, \"Edraele's nearly absorbed the last load. You probably better top her up again.\"\n\nJohn walked over to Edraele, and asked, \"Is there anywhere comfortable we can go for this?\"\n\nThe Maliri nodded obediently and said, \"If you would care to follow me, my Lord, there are chambers at the back of this audience room we can use.\"\n\n\"Please lead the way,\" he asked her politely, and they followed her through a door that led into a comfortable looking lounge. \n\nThere were broad windows along the side of the ship, with comfortable chaise-lounge style chairs set in a semi-circle around, so that people seated could appreciate the view. Alyssa bounded over to one of the sofas, and sat on one end, patting the middle for John to sit in. He strolled over to join her, with Edraele following obediently behind, and when he sat down next to Alyssa, Edraele sank to her knees before him. There was a hungry gleam in her eyes as she reached for his trousers, helping unbuckle them. As soon as she had freed his cock, she brushed her long, shiny white hair behind her ears, then leaned forward to smoothly swallow his entire length.\n\n\"Does that feel good?\" Alyssa asked him excitedly, as she watched Edraele sucking on him rhythmically.\n\n\"She's doing a great job,\" he said as he smiled at her appreciatively, and Edraele looked happy as she continued to bob in his lap.\n\n*It's not the same as with you girls though,* John thought to Alyssa regretfully. *I love all of you, which makes sex with you incredible, but I'm just doing this to try and help the Maliri.*\n\nAlyssa gave him a sympathetic smile, and said, *The things you suffer through to do good deeds. My hero.* When he laughed, she gave him an affectionate kiss, grinning at him playfully. She then looked at him quizzically and added, *Did you mean you love Irillith too?*\n\nJohn looked startled for a moment, then shook his head slightly, feeling a bit guilty, *I like the person she's becoming, but I feel like I barely know her yet. I've only spent a few hours with her so far, as it was Progenitor-John that spent all that time with her before. I'm looking forward to getting to know her better though.*\n\nAlyssa nodded, looking thoughtful, and they turned their attention back to Edraele. He gently stroked her long silky hair as she suckled on him, and she stared up at him with her angular, purple eyes. The fiery intensity in those eyes reminded him of Irillith, and he was struck with how strong the family resemblance was. It was astonishing to see how greatly they were influenced by their genes, and just like Calara with her mother, Maria, It was fascinating to see how Irillith would look when she reached Edraele's age, in perhaps a century's time.\n\n*Irillith won't ever age, remember?* Alyssa reminded him gently, as she listened in on his thoughts. *She'll stay that same exotic azure beauty for as long as you choose to keep filling up her tummy.*\n\nJohn thought about the dramatic personality shift in Irillith, and asked, *How's she been coping with the change? Has she been settling in alright with everyone aboard ship?*\n\nAlyssa smiled, and said, *If this is an XO catch up meeting, then we should be in bed, with you skewering my ass.* When he chuckled and rolled his eyes, she added, *She's been great, actually. She's really been trying to fit in, and I'm looking forward to us settling into a normal routine with her included.*\n\nJohn closed his eyes, enjoying the sensual blowjob he was receiving from Edraele. He eventually looked down at her, and seeing no reason to hold back, he asked, \"Are you ready?\"\n\nEdraele began to suck insistently, and Alyssa quickly got off the bed to kneel behind her. She gave him an excited grin, then reached around the Maliri woman to gently stroke her tummy. Seeing both of them looking up at him eagerly tipped him over the edge, and his quad began to flex, pumping his load into Edraele's hungry mouth. She sank his shaft down her throat as she swallowed, giving him a straight shot into her stomach, and he filled her up with one long spurt after another. \n\nWhen the blasts of cum began to ease off, she eased backwards, and just sucked on the head until he was finally spent. He could see she had one last mouthful, and the look on her face was euphoric as she savoured the taste, before swallowing it in a big gulp. Alyssa grinned at him as she tenderly caressed the hugely swollen belly beneath her fingers, while Edraele purred with delight.\n\nJohn smiled at Edraele, and said, \"That was wonderful, thank you. Did you enjoy it too?\"\n\n*It was delicious, my Lord, thank you so much,* she thought to him gratefully, her voice already starting to sound a bit warmer, with more emotion.\n\n\"You're very welcome,\" he said pleasantly, offering both Edraele and Alyssa a hand to stand up.\n\nAlyssa frowned and said, \"She didn't say anything.\"\n\nHis post-orgasmic glow disappeared in an instant, as he looked at Edraele in shock, and gasped, \"You spoke to me telepathically!\"\n\n\"Of course, my Lord,\" she said pleasantly. \"As your Matriarch, I will be able to contact your mind, to keep you updated on the status of the thralls under my command.\"\n\nAlyssa's eyes narrowed dangerously, and she said frostily, \"I'm his Matriarch, not you.\" Her dislike of the title seemed to have disappeared just as quickly as John's post-orgasmic high.\n\nEdraele turned to look at her, and said apologetically, \"I'm sorry, Alyssa, I meant no offense. My Lord offered to heal the tumour in my head, if I agreed to be his Matriarch, serving him as an obedient slave.\"\n\nAlyssa looked up at John in alarm and said, \"I don't think she can lie to you. I think she really is your Matriarch!\" She frowned, then added in confusion, \"Or at least, we both are.\"\n\nJohn rubbed his head as he tried to think, then realised in an instant what must have happened, and he said thoughtfully, \"When Progenitor-John cut you and the rest of the girls off, then he must have been about to set up a new network of girls with Edraele leading them instead. If Progenitors are normally limited to a single Matriarch, we seem to have broken that rule, and enhanced our own connection while we were at it.\" \n\nAlyssa plonked herself down on the seat next to him, and pouted as she muttered, \"I liked being the only one who could hear your thoughts.\"\n\nEdraele sat down on the other side of John, and gave her an apologetic smile as she said kindly, \"I'm sorry if I upset you, it wasn't my intention.\"\n\nAlyssa let out a big sigh, then returned Edraele's smile as she said, \"It's alright, it's not your fault. Welcome to the extended family, I guess.\"\n\nJohn had been thinking about something else, and he said to Alyssa, \"That was the third time I've fed Edraele. Did she make a connection with you the same way the other girls did?\"\n\nThe blonde girl frowned, and said, \"Nope.\" She tapped the side of her head and added, \"I've got all the other girls rattling around in here, but no Edraele.\"\n\nFurther conversation was interrupted as Irillith strode into the room, her face lighting up with relief when she saw them. Her expression changed when she saw Edraele's huge tummy full of cum, and a few conflicting emotions flashed in her eyes before she smiled at them hesitantly. Seeing that Edraele was making Irillith uncomfortable, John turned to the Maliri Matriarch and said, \"I assume there's a bedroom near here. Why don't you go and have a rest?\"\n\nEdraele gave him a grateful smile, and said, \"Thank you, my Lord. Summon me if you should need my assistance.\"\n\nShe rose gracefully despite her heavily rounded abdomen, and then left through a door at the back of the room. John turned to look at Irillith, who was frowning as she watched Edraele leave. She realised he was watching her, then gave him a faint smile, as she said, \"Sorry, I know I've encouraged you with this, but I'm finding it pretty weird.\"\n\nJohn stood up and walked over to the troubled Maliri girl, and then encircled her in his arms. Alyssa came over to join them, and they both hugged Irillith comfortingly. \n\n\"We don't have to proceed with this plan,\" John said to Irillith gently. \"We can just get the schematics, then leave and do the refit somewhere else. I don't want to make this any harder on you than it has to be. I know you and your mother had a difficult relationship, and that's putting it mildly, but this still must be tough for you to deal with.\"\n\nIrillith looked up at him with a grateful smile on her face, and said, \"I used to think that you being nice to the girls was a sign of weakness, but I was wrong.\" She sighed, and added, \"About a lot of things.\"\n\n\"That's all in the past now,\" John said, his deep voice kind and comforting. \"As long as you want to stay with us, Alyssa and I will look after you.\" \n\nAlyssa nodded, murmuring her agreement, and kissed Irillith tenderly on the shoulder.\n\nIrillith looked at them each in turn, and said sincerely, \"Thanks, both of you. I'd love to stay with you as long as you'll have me.\" She paused and with her mind made up, she continued in a firm voice, \"We shouldn't change the plan to use Genthalas Shipyard. The facilities there are the best you'll find in all Maliri Space, and undoubtedly better than anything the Terran Federation has to offer.\" \n\nJohn nodded and said, \"As long as all this isn't too upsetting for you, we'll continue with the plan.\"\n\nShe smiled at him gratefully, then glanced over his shoulder to look out the window, and said, \"We're on our final approach now.\"\n\nThe blue-white glow from Albali, the star in this system, brightly illuminated the colossal shipyard, and it filled the window as they drew closer. The vast wheel-like structure was golden in colour, covered in spires and domes, and it gleamed in the radiance of the sun. They could see all the maintenance gantries, booms and stanchions centred in the axis of the station, but even from here, they could tell that only around a fifth of the shipyard was in use. That section was brightly lit, and buzzing with the activity from inbound and outbound ships, whereas the rest of the shipyard was cold, dark, and still. \n\n\"Why is such a small part of it in use?\" John asked Irillith as they stared out the window at the incredible vista before them.\n\nIrillith let out a sigh and replied, \"Despite all my bravado and condescension towards you when we first met, Maliri society is in decline. It's not common public knowledge, but birth rates are consistently down, year after year, and although the Maliri are long lived, all the violence is taking its toll on the population levels. Genthalas Shipyard is thousands of years old, and used to be a thriving centre of commerce and ship-building.\"\n\n\"I thought something was up when I saw your city,\" Alyssa said quietly. \"It almost seemed deserted in places.\"\n\nJohn nodded as he said, \"Maliri society seems deeply unnatural. Exiling the men to the border stations was bound to have had a dramatic effect on birth rates.\"\n\nIrillith nodded soberly, and said, \"You've seen what Valaden is like, and all rest of the Maliri core worlds are like that. I can't blame the men for leaving really.\"\n\nThey stood quietly together, and watched the station grow larger as the Maliri shuttle began its final approach to the shipyard. Soon the stars beyond the station were blocked from sight, and they were swallowed up in an enormous drydock filled with maintenance gantries. As they settled down to land on the deck of the enormous bay, the glossy white hull of the Invictus came into view, already landed and waiting for them.\n\nJohn grinned happily, and when Alyssa saw his gleeful expression, she exclaimed, \"Yeah, I can't wait to see them too!\"\n\nThey turned towards the door that led out of the state rooms, but John glanced back at the bedroom door and asked, \"Will Edraele be alright here on her own?\"\n\nIrillith nodded and said, \"Luna, Almari, and Ilyana, would defend her to the death. She had them trained as assassins from adolescence, and they're fiercely loyal to her.\"\n\nHe nodded, and they left the room, walking out into the corridor to the elevator. The crystal door lifted a moment later, and Luna stepped out, her eyes widening slightly in surprise when they nearly bumped into her. \n\n\"I was just about to inform Edraele that we had docked,\" Luna said to Irillith, but her eyes wandered to glance at John.\n\n\"My mother's asleep at the moment, but we'll be back to meet with her in a couple of hours. Please make sure she isn't disturbed until then,\" Irillith informed her firmly.\n\nLuna bowed and said, \"I will do as you command, Irillith. We shall await your return.\"\n\nThey left Luna on that level, and then headed down in the elevator to the lowest deck. Once they had reached it and the crystal door had rotated up into the ceiling, John and Alyssa followed Irillith as she led them out through the airlock and into the Drydock beyond. An attractive Maliri woman who looked slightly older than Irillith, was waiting for them, and she just about stifled a gasp when she set eyes on her cousin.\n\n\"Hello, Makaela, it's good to see you,\" Irillith said wryly to the astonished Maliri Shipyard Commander.\n\nMakaela couldn't tear her eyes off Irillith's long flowing white hair, and looked intrigued as she said with amusement, \"That's certainly a bold haircut, Irillith. I never realised you were that way inclined.\"\n\nIrillith set her jaw firmly, and said brazenly, \"What can I say? I finally found myself a man who brought out my wilder side.\"\n\nMakaela's sparkling sapphire eyes darted over to John, and she studied him in fascination. \"You're the brawniest, palest Maliri I've ever seen,\" she joked with a smirk on her face.\n\n\"Please, call me John,\" he said, studying Makaela in turn. Like all the other Maliri they had met in the core worlds, she was a tall, statuesque woman with sky blue skin, and short dark hair. He then turned, and said, \"And this is my second-in-command, Alyssa.\"\n\nMakaela blinked twice when she saw the blonde girl, finally noticing her for the first time. She shot Irillith a furious glance and asked heatedly, \"What are you thinking, bringing a Terran here? And for that matter, why did you order me to let a Terran warship land on Genthalas? Have you completely lost your mind? What the hell are they doing in Maliri Space?!\"\n\nIrillith waited calmly for Makaela's barrage of questions to end before she replied in a brusque manner, \"John is a close ally of House Valaden. We will be refitting his ship with all the highest classified tech we have at our disposal, as well as giving him and his crew unrestricted use of all the facilities Genthalas has to offer.\"\n\nMakaele's blue eyes bulged out of her head as she gawped at Irillith in shock, and blurted, \"You can't possibly be serious, Irillith!\"\n\nIrillith smiled at her dangerously, and replied, \"Oh, but I am Makaela. Edraele is here to personally oversee your work, and she intends to make sure it's done to her satisfaction. We've given you a long leash up here on Genthalas, but you know what will happen if you disappoint our Matriarch.\"\n\nWith a deeply worried frown, Makaela gave a hesitant nod as she said, \"Alright, you'll have my full cooperation.\"\n\n\"Good,\" Irillith said with satisfaction. \"I'll connect to the data network in a few minutes to retrieve the schematics I need, so make sure I'm granted full access. Also, assemble four full work crews, and have them gather outside the ship for Edraele to address in three hours time. We'll need a podium and lectern for her to speak from.\"",
        "Shaken to the core, Makaela was trembling slightly, but she nodded her acquiescence to Irillith's orders. \"I will do as you command, Irillith,\" she said in a subdued voice.\n\nShe turned and hurried away, only glancing back once to steal a quick look at John before she disappeared through a door out of the drydock. When she was gone, Irillith grinned at John and whispered furtively, \"You've no idea how satisfying that was! She bullied me for years when we were children.\"\n\nJohn smiled at her and said, \"You were very impressive. Do you think there's any chance she'll try and betray you, or subvert your orders?\"\n\nIrillith shook her head firmly as she said, \"Makaela is a bully, but she's also a coward. She would never dream of disobeying my mother.\"\n\nHe nodded with satisfaction, then glanced up at the Invictus, and grinned with excitement.\n\n*You're like a kid at Christmas,* Alyssa thought to him with amusement, a loving smile on her face.\n\nHe winked at her and said, *I'm not going to argue, I've missed them!*\n\nShe giggled and said, *Come on, let's go open your presents then!*\n\nThey jogged over to the broad white hull of the Invictus, and the airlock was already opening when they arrived. The girls' excited faces were peering out, and when John bounded over to join them, they squealed with delight to see him. He strode through the airlock door, and the girls flung themselves at him, as they all chattered at once.\n\n\"Group hug first, then we talk,\" he said with a broad grin. \n\nDana and Calara rushed into his arms, and hugged him fiercely, while Jade and Rachel leaned in to hug him from behind. \"God, I've missed you girls,\" he said elatedly. \"It feels like forever since I last saw you.\"\n\nAlyssa piled into the group hug, beckoning Irillith over to join them. The girls welcomed them back with delight, and there was a collective sigh of relief from the whole crew at being reunited. They all felt a tangible feeling of completion at being back together, and glanced around at each other in wonder.\n\nDana was the first to break the spell, and as she gazed up at him, she said fervently, \"I can't tell you how good it feels to have you back. Please don't ever let Progenitor-John take control like that again, I don't think my heart could take it.\"\n\nCalara nodded and said sincerely, \"Welcome back, Commodore. It was awful not having the real you around, I missed you so much.\"\n\nJade nuzzled him from behind, too busy purring with delight to speak, and he tilted his head to rub it against hers affectionately.\n\nRachel leaned in and gave him a tender kiss on the cheek, as she said, \"It felt like part of me's been missing while you've been away.\"\n\nJohn looked around at all of them, and said firmly, \"I'm never going to let anything like that happen again.\" He glanced at Alyssa, before he added, \"We've taken steps to make sure of it.\"\n\nThey relished their group hug for a few moments longer, before Alyssa said, \"Let's catch up in the Debriefing Room.\"\n\nCalara nodded animatedly, as they started walking to the grav-tube and said, \"We've got a lot of important news for you. We all felt that surge when you and Alyssa reconnected, and it gave all of us a bit of a jump start!\"\n\nJohn nodded and said, \"I want to hear everything.\"\n\nThey stepped out onto the Command Deck, then filed through the Bridge to the Debriefing Room. Irillith excused herself, promising to join them in a few minutes once she had retrieved the Maliri weapon schematics. She walked over to the station on the right of the Bridge, while Alyssa darted up the steps to the Command Podium and activated the consoles for her. \n\nJohn paused and said, \"You seem to have adopted that station on the Bridge. How do you fancy being my Intelligence Officer?\"\n\nIrillith smiled at him, then replied, \"I'd love to. I can't think of a role I'd enjoy more.\"\n\n\"Join us in the Briefing Room as soon as you can,\" he said to her, returning her smile.\n\nThey all filed into the room on the right side of the Bridge, leaving Irillith to sit at her station, and rapidly tap away at her console as she established a connection to Genthalas' secure network. John walked over to his seat at the head of the table, and waited for the girls to fan out, taking their chairs. Once they had all sat down, he sank into his chair, and smiled at them all warmly.\n\n\"Alright, who wants to go first?\" he asked, intrigued to hear what they had in store for him.\n\nCalara cleared her throat and said, \"I think I better go first. The other news is fascinating stuff, but what I've found out is deadly serious.\"\n\nJohn nodded and said, \"Go ahead Lieutenant, let's hear it.\"\n\nShe nodded grimly, and without further preamble said, \"Admiral Leonard Norwood is the Dragon March traitor.\"\n\nThe room went silent as they all looked at John, and he looked shocked as he took in her news. Finally recovering enough to speak he said, \"I've heard of Admiral Norwood. He's a highly decorated officer... Are you absolutely certain?\"\n\nCalara nodded with conviction, and said, \"It's definitely him. The orders in the Dragon March are classified, so I went through each of the suspects' Fleet order history. The feints and subterfuge he's used throughout his career give him a distinctive style, and I recognised the same patterns in orders that have led to four catastrophic engagements in the Dragon March.\"\n\nJohn gazed into her deep brown eyes, and said, \"I trust you absolutely on this, Calara. If you say he's the traitor, then we're going to stop him.\"\n\nShe smiled at him gratefully for his vote of confidence, but her smile faltered as she said, \"He's already caused thousands of deaths, and lost the Terran Federation dozens of ships. I think we need to act to stop him straight away. I recommend that we postpone the refit, and return to Terran Federation Space immediately.\"\n\nJohn paused, and studied her for a long moment before he said, \"I understand your concern for the Terran Federation, and we'll head there as soon as we can. Admiral Norwood's men are likely to be loyal to him though, and we don't know if he's managed to convince others to betray the Terran Federation. If we end up in a fight, I want us fully upgraded beforehand.\"\n\nCalara looked ill at the thought of fighting Terran Federation forces, and John got up and knelt next to her so that he could give her a hug. She clung to him fiercely, and her voice quavered with worry when she said, \"Mateo and my father are both serving in the Dragon March...\"\n\n\"We'll get back to Terran Federation space as soon as the refit is complete, I promise,\" John said sincerely. He glanced at his blonde XO and said quietly, \"Alyssa filled all of you in on what happened with Edraele. While the refit's happening, I need to use the time to try and heal her mind. I've got an opportunity to improve the lives of millions of Maliri, and I don't want to squander it.\"\n\nHe looked around the room, and the girls all nodded to him soberly, agreeing with his decision. He finally stopped at Calara, and stared into her eyes, looking for her reaction. \n\n\"You're doing the right thing,\" she agreed reluctantly, gazing back at him.\n\nJohn gave her a tender kiss on the cheek, then sat back in his chair. He looked over at the rest of the girls and said firmly, \"So, we know we're on a tight timeframe. We're going to have to try and get this refit finished as quickly as possible. We've got just under three hours until Edraele addresses the Maliri engineers, so I suggest we work up a full schedule for the refit. Dana will be in charge, and she can hand out supervisory tasks for all of us, so that we can act as her gophers, keeping an eye on the Maliri as they work.\" He turned to his right to look at Dana and asked, \"Is that alright with you?\"\n\nShe gave him a confident grin, and said, \"Absolutely! Although, I can't give you any detailed estimates, until I know exactly what kind of weapon tech we're getting from the Maliri.\"\n\nJohn nodded, and said, \"Alright, we'll come back to you at the end then.\" He glanced at Jade, and said encouragingly, \"Do you want to go next?\"\n\nJade grinned at him, then got out of her chair, and began to walk around the table to the space in front of the Armour equipping frames.\n\n***\n\nIrillith rapidly tapped keystrokes into her console, and smiled with satisfaction as detailed schematics for Maliri weapon technology began the transfer to the Invictus. A slight flickering at the edge of her vision made her sit up straight, and she blinked her eyes a couple of times in surprise. She leaned over the console once the distracting spots had gone, and there it was again, a strange flash on the periphery of her line-of-sight. She frowned and closed her eyes, rubbing the bridge of her nose with her fingers. \n\nHer body clock had been upset with the recent trip to Valaden, and with all the emotional turmoil she'd been dealing with, it made sense that she was getting tired. She sank back in her chair, and listened to Alyssa's soothing voice as she described everything that was happening in the Briefing Room. She was sad to hear Calara getting upset about her family potentially being in danger, and Irillith felt a momentary pang of envy at her close-knit relationships. Her mind drifted to her own utterly dysfunctional family, and she began to feel a deep well of sadness bubbling up in her chest.\n\nA soft chime on the console brought her out of her reverie, and she sat up with relief, then nodded contentedly to see that the schematics had been successfully transferred. She got up, then walked into the briefing room, and her eyes went wide in amazement as she saw Jade suddenly shapeshift into a massive, dark-green Tiger. She had seen Jade in action on the video feeds, but witnessing her transform into a nine-hundred-pound predator first hand, was something else entirely. Watching the Nymph in fascination, she returned the welcoming smiles from John and the girls, then walked past him to the left, to take her new place amongst their ranks. \n\nShe patted Calara's shoulder awkwardly as she passed her, and leaned down to whisper, \"I'll start working with you to find out more about this Dragon March traitor as soon as I can. I should be able to hack this classified data for you, and we'll stop this Admiral Norwood before your family is put in any danger.\"\n\nCalara looked surprised, but touched by her offer, and she said, \"Thank you, Irillith, that means a lot.\"\n\nIrillith smiled at her supportively, then walked past Jade's chair, and sat in the next one along. When she looked up, she saw the rest of the girls smiling at her warmly, and John gave her an appreciative nod. Her heart lifted at his gesture, and seeing the acceptance and gratitude in the eyes of the girls was a novel and uplifting experience for her. \n\nFlushing a little with embarrassment she said, \"Please don't let me interrupt. Jade, you were about to show everyone something?\"\n\nJade gave Irillith a heartfelt, if rather toothy and unsettling feline grin, then raised one of her massive paws. Turning over the heavy verdant limb, she flexed the tendons that would expose her claws, and the six-inch-long sickle shaped implements came into view. She flicked her tail as she concentrated, and the ethereal green claws were suddenly swathed in crackling Eldritch lightning.\n\nRachel got up from her chair, and knelt down beside the cat shaped Nymph, staring at her claws in astonishment. \"How did you do that?\" she asked excitedly. \"I've never seen anything like it!\"\n\n\"I have,\" Irillith said grimly.\n\nAt her sombre tone, everyone in the room turned to look the Maliri girl's way. Alyssa looked intrigued, and she said, \"It looks like some kind of psychic lightning to me. Who did you see do that? Was it your mother?\"\n\nIrillith shook her head, then darted a look at John and said, \"You did it. Or at least your Progenitor alter-ego did.\"\n\n\"I did?!\" John exclaimed in surprise, \"I mean, he did?\" \n\nShe nodded and said, \"It was during the fight against the Fulmanax. You used telekinesis to pull your sword out of the Fulmanax Sentinel's leg, then used pyrokinesis to set the blade on fire. You then proceeded to brutally hack that behemoth apart. I've never seen anything like it.\"\n\nRachel's eyes widened, and she said, \"That explains why all those chunks of the Fulmanax giant were burning!\"\n\nAll eyes turned John's way, and he looked thoughtfully as he said, \"I was able to start building up my supernatural strength after Progenitor-John used it during one of my blackout periods. Maybe this means I'll be able to start using those abilities too.\"\n\nAlyssa smiled at him, and said, \"I think psychic training is going to be high on your list of priorities for a while.\"\n\nJohn nodded thoughtfully, then turned to Jade, and said, \"That was amazing! Thanks for showing us. Was it hard to make your claws do that?\"\n\nJade changed back into her Nymph-shape, and after a green shimmer, she reappeared crouching on the ground. She was nude when she stood up, and she carefully retrieved her discarded dress, slipping it back on, before sliding her feet into her shoes. Jade smiled at John, shaking her head as she walked around the table, heading towards the empty chair between Calara and Irillith.\n\nAs she returned to her vacant seat, she grinned at him as she said, \"No, it was effortless! The first time happened by accident, immediately after you and Alyssa re-bonded. We all felt a surge in power, and since then, I can turn it on and off without any problems.\"\n\n\"I might need to speak to you for some advice then,\" John said to her with a grin.\n\nJade gazed back at him in delight, and said, \"I'd love to help!\"\n\n\"Thank you,\" he said to her gratefully. After a brief pause, he looked around at the rest of the girls and asked, \"Who wants to go next?\"\n\nRachel and Dana both looked eager to share their results, but with an indulgent smile on her face, Dana gestured for Rachel to go first. The tawny haired brunette shared an intimate, grateful glance with her red-headed best friend, before focusing on the rest of the group. Rachel's grey eyes were glinting with excitement as she rose from her chair, and retrieved the remote that controlled the holo-projector. She pressed a few buttons, then linked up with her console in the Engineering Bay, and connected to the relevant data. Suddenly a dozen long strands of genetic code were floating silently above the desk, and everyone turned to look at the brightly coloured helix with interest.\n\n\"I was working on analysing the Trankaran genetic code, and with Faye's help I had a sudden epiphany!\" the tawny haired brunette began eagerly.\n\nJohn looked around as though searching for someone, then asked, \"Where is our tiny AI companion, anyway?\"\n\nDana frowned and admitted, \"I've only rigged up the holo-projectors in the Engineering Bay, the Holo-suite, and the Bridge for Faye at the moment. I'll try and come up with a way of either letting her roam around the ship, or maybe develop some kind of remote projector I can carry around, like the one built into Irillith's vambrace. I've been pretty busy, so I haven't had a chance to spend any time on it yet.\"\n\nHe nodded, then smiled apologetically at Rachel, and said, \"Sorry for interrupting.\"\n\nShe shook her head, and said, \"It's alright, it's just a shame she couldn't be here. She helped start me thinking on the right track.\"\n\nIrillith unclipped the remote holo-projector that she always carried on her belt, and said to Dana, \"Why don't you use this, at least until you can come up with a more permanent solution?\"\n\nThe redhead grinned at her gratefully, and quickly hooked up the projector to a hand-held data analyser, which she pulled from her utility belt. She tapped in a couple of commands on the tiny holographic display, then placed the projector on the table, and switched it on. A couple of seconds later, Faye appeared in all her purple, pint-sized glory.\n\n\"Hey everyone!\" she said perkily, greeting everybody with a cheery wave. Her luminescent eyes settled on Irillith, and she fluttered over to her on her iridescent wings, then planted a big kiss on the started Maliri girl's face. Faye sighed happily and said, \"I love you, my wonderful creator. Thank you for giving me life, I'm enjoying it immensely!\"\n\nIrillith was too shocked to react to the AI sprite's unusual behaviour, and she reached up her hand to her cheek in surprise. She eventually managed to mumble, \"You're welcome, Faye.\"\n\nEveryone else had been watching this interaction with amusement, and they all said hello to Faye once creator and creation had parted. Rachel smiled at the diminutive sylvan creature, and said, \"I was just telling everyone how useful you were, helping me find out something amazing with my research into the Trankaran code.\"\n\nFaye beamed at the compliment, then shuffled her feet a bit nervously, and admitted to everyone, \"I just asked about Progenitor fingerprints, and Rachel got very excited.\"\n\n\"Fingerprints?\" John asked Rachel with curiosity. \"What did you find out?\"\n\nRachel pointed at the genetic strands above their desk, and said, \"I've been studying these for weeks now, and after staring at them so much, I feel like I know some of these genetic enhancements like the back of my hand! Basically, I noticed there's a distinctive pattern in the modifications, which are unique to the Progenitor making the changes.\"\n\n\"Kind of like their own handwriting!\" Faye added chirpily.\n\nRachel smiled at her, and nodded as she said, \"Exactly.\" She turned to look up at the spiralling DNA molecules for Alyssa, Calara, Dana, and herself, then using the remote, highlighted them so they glowed more brightly. \"That's the DNA code for us Terran girls. John's 'handwriting' is all over this code, where he's extensively enhanced us physically and mentally.\"\n\nJohn looked a bit sheepish, and Alyssa grinned at him, saying, \"You did a spectacular job! I enjoy the results on a daily basis.\"\n\nHe chuckled, then looked at Rachel and asked, \"So how is that different from all the rest of the Progenitors?\"\n\nRachel's eyes sparkled with excitement as she said, \"That's just it! There's only two others!\" \n\n\"Wait a minute.\" John said with a frown. \"We've talked before about species being seeded by the Progenitors, and that they've made alterations to them. It was only two of them doing that?!\"\n\nRachel paused a moment and clarified carefully, \"Well just one actually. Whoever he was, his intellect must have been astounding. He possessed a mastery of genetic manipulation that I've only just begun to understand.\" She glanced at John apologetically, and then added, \"His work on us Terrans was much more subtle than yours. So nuanced in fact, that I missed it when I started looking at my unmodified Terran DNA. Do you remember when I took a sample of my DNA before you started feeding me?\"\n\nHe nodded, and said, \"Yes, you wanted to get an unmodified sample as a baseline.\"\n\nShe grinned at him excitedly, and said, \"That's right! It's a good job I did. I noticed very subtle alterations to base Terran DNA, which I'm still convinced is the standard template the Progenitors use for their seed species. I think he was experimenting with genetic mutation on us, which is why there are so many different races amongst humanity.\" She smiled at Irillith and asked her, \"All the Maliri have your same shade of lovely sky-blue skin, don't they?\" \n\nIrillith nodded, replying, \"Yes, unlike Terrans, we share a very similar skin tone.\"\n\nRachel looked more sombre and said, \"The Maliri were tweaked to be used for his armies. Maliri females are stronger, more agile, and resilient than Terran females, with a genetic predisposition to lean athleticism. He would have just had to 'activate' you, and you'd be ready to go. I think the white hair colour change is an indicator that you've been activated for his purposes.\"",
        "Irillith took some strands of her glossy white hair, and held it in front of her eyes in astonishment, and said, \"So this is just like a branding? But to let him know what? That I'm obedient, and ready for fighting or breeding?\"\n\nRachel nodded yes to Irillith's questions, then paused, before saying, \"Our species were created eons ago, so I very much doubt the original Progenitor is still around. He also made the Drakkar, and the Trankarans, but not the Kintark.\"\n\nJohn let out his breath, finding it all a lot to take in, and said, \"OK, so tell me about the Trankarans then. I'm surprised they're a Progenitor creation.\"\n\nShe stared at the Silicon based genetic code, and said thoughtfully, \"They are a much newer species than either the Terrans or the Maliri. I don't know this for certain, but I'm pretty convinced that he custom-built the Trankarans to be specialised miners. Silicon is unwieldy for building genetic structures, and carbon is a much more flexible and adaptable building block. I think the Trankarans might be the culmination of a series of experiments to adapt the standard Progenitor template. \n\nAs I was able to obtain samples from Forgemaster Gilgrem's assistants, I was able to study some unaltered Trankaran genetic code. They both have a similar behaviour modification built into them, which makes them predisposed to look favourably on a Progenitor, as well as his activated creations.\"\n\n\"Hold on a second,\" John said. \"You said you got some 'unaltered Trankaran genetic code', does that mean you've managed to get a sample of altered code?\"\n\nRachel nodded and said grimly, \"Yes. From the head of the Glowing Queen.\"\n\n\"So she was working for another Progenitor!\" Alyssa exclaimed. \"Progenitor-John seemed convinced that Chancellor Niskera would never be able to negotiate with the rebels. Maybe that's why?\"\n\nJohn rubbed his chin thoughtfully and said, \"This other Progenitor must have been using the rebels to try and take control of the Trankaran species.\"\n\n\"That was my theory,\" Rachel agreed. \"The Glowing Queen looked distinctive enough after being 'activated' that the rebel Trankarans must have flocked to her instinctively.\"\n\nIrillith looked fascinated, and she said, \"I assumed all the shocked looks I've been getting from my white hair, was just from moral indignation at having it scandalously long. Are you saying that the Maliri women we've run into since I've grown it longer are responding instinctively and positively to that change?\"\n\nRachel nodded, and said, \"Yes, that's my current working theory. I took a DNA sample from you when you were injured, and the Maliri are definitely pre-programmed to look favourably on Progenitors, and activated Maliri females. I suppose that way, a Progenitor can just pick a Maliri for his Matriarch, and she'd submit to him quite willingly. After that, any more Maliri he brings under his thrall are looked on approvingly by the rest of the species, presumably to make it easier to bring in more recruits for his armies.\"\n\n\"How about us?\" Calara asked curiously. \"Are we going to have the same effect on Terrans?\"\n\nShaking her head, Rachel replied, \"Unfortunately Terrans don't have that genetic modification built into their DNA. They'll treat you as they would any other stunningly beautiful Terran girl.\" She grinned and exclaimed, \"Which has pretty much the same effect anyway, at least with men!\"\n\nJohn smiled and said, \"Well I can testify to how overwhelmingly gorgeous you all are.\"\n\nThe girls all gave him appreciative smiles, grateful for the compliment, while Faye looked up at him hopefully as she asked, \"Does that include me too?\"\n\n\"You are pretty cute,\" he told her with a smile, and she grinned at him in delight. Turning back to Rachel, he asked, \"So does this tell us anything more about the other Progenitor who's started popping up around here recently? I assume he's the same one that was working with the Drakkar against the Ashanath.\"\n\nRachel shook her head sadly, and said, \"No, nothing new I'm afraid. Well, other than the changes made to the Glowing Queen were purely cosmetic. From the analysis I've done on her head, she seems to have just been an ordinary Trankaran female, and the glowing swirls on her skull appeared once she was activated. Other than those, she was no different from the female Trankaran assistant who gave me a genetic sample.\"\n\n\"It does tell us one thing,\" Alyssa said with certainty. All eyes turned to her, and she smiled lovingly at John as she said, \"It lets us know how much you care about us. This other Progenitor just cut the Glowing Queen loose as a disposable tool. You've spent weeks nurturing and enhancing all of us.\"\n\nRachel nodded decisively and locked eyes with John as she said, \"Yes, that's very true. All our DNA has been massively modified by you. Perhaps I used a poor choice of phrase before when I made it sound like your work on us was clumsy, and I'm sorry about that. A better description would be 'thorough and extensive', because I'm starting to suspect that the way we've all bonded and grown is definitely not the normal way Progenitors do things.\"\n\nThere was a chorus of happy sighs, and John saw a similar look of adoration from each of the girls around the table. He smiled back at them all, but then paused as he thought of something.\n\n\"Rachel, you mentioned before that the Drakkar had been created as a rush job. Was that done by this original Progenitor as well?\" he asked the tawny haired girl curiously.\n\n\"Yes, that was his handiwork,\" she confirmed. \"He did a crude hatchet job on the base Drakkar species, and turned them into ideal soldiers on very short notice. They are a younger species than the Trankarans, and I'd guess this happened around ten thousand years ago.\"\n\nJohn was fascinated, and he went on to ask, \"So if the Ashanath were right with their timelines, modifying the Drakkar was probably the last thing this Progenitor did, before he disappeared about ten thousand years ago?\"\n\n\"Yes, that fits,\" Rachel replied with conviction.\n\nHe leaned in and asked, \"So what could have threatened this original Progenitor enough for him to do that? Using the Drakkar doesn't seem like the normal way a Progenitor normally does things. They're mostly male for starters.\"\n\nRachel shrugged helplessly, and said, \"Sorry, I've no idea on that one.\"\n\nCalara had been listening intently, and she said, \"If this Progenitor disappeared, it doesn't look like this gambit worked. Maybe he was killed by whatever threat he was responding to?\" \n\nAlyssa looked grim as she stated what everyone was thinking, \"So what was powerful enough to kill a Progenitor, and where is it now?\"\n\nThe room went quiet as they all thought that over, darting nervous glances at one another.\n\nJohn had been pondering the numerous things that Rachel had discovered, and he eventually looked at her and said, \"Thank you for all the hard work you put into this, you did an astounding job. We're extremely lucky to have you with us.\"\n\nA brilliant smile lit up her beautiful face, and she walked over to him and gave him a loving kiss. \"It was my pleasure,\" she told him sincerely. \"Being able to help you guys feels so wonderful.\"\n\nJohn pulled her on to his lap, and gave her another big kiss that left her panting breathlessly. \"I'll give you a proper reward when I get a chance,\" he promised her with a grateful smile.\n\nRachel's eyes gleamed with anticipation, and she gave him another passionate kiss. She eventually remembered the others were all watching, and gave them a sheepish look, as they smiled at her affectionately. \n\n\"Sorry Dana, I'm holding you up,\" she apologised. John helped her to her feet, and as she was returning to her chair, she threw a furtive glance Alyssa's way.\n\nAlyssa nodded, then thought to John, *She didn't want to mention it in front of all the girls, but when you get a moment, she wants to talk to you about Progenitor-John.*\n\nWhen Rachel sat down again and gazed in his direction, John nodded at her, and she gave him a grateful smile. Dana had started rising from her chair, her beautiful face lit up with excitement, and John raised his hand saying, \"Hold on for one moment, Dana. I just want to ask Irillith something, while we're talking about Progenitors.\"\n\nDana pouted, but sat down again, while Irillith turned to look at him curiously. \"What did you want to ask?\" she inquired politely.\n\nJohn smiled at her, and said, \"Our whole relationship started with the premise that you knew a great deal about the Progenitors and their secrets. While we're discussing them, is there anything else you can think of that might be useful?\"\n\nIrillith flushed in embarrassment, and she looked full of remorse when she eventually met his curious gaze. \"I'm so sorry,\" she admitted in a glum voice. \"I was bluffing. I did recognise you for what you were, and I'd heard lots of stories, but I really can't tell you much more than you know already.\"\n\nHe let out a sigh of disappointment, and said ruefully, \"It was a very convincing bluff. I was sure that you and your mother might know something about the Progenitors.\"\n\nThe Maliri girl shook her head sadly, and a dark shadow crossed her face as she said, \"Everything we knew came from Tashana. She was fascinated by the Progenitors, and spent decades researching your species. She used to tell me stories about them when I was young.\"\n\nJohn frowned and asked, \"Tashana? Who's that?\"\n\nIrillith's eyes filled with tears, and Alyssa could feel self-loathing pouring off her through their empathic bond. She rose from her chair to go and comfort the heartbroken Maliri girl.\n\nIrillith's face crumpled as she sobbed, \"She was my twin sister.\""
    ],
    "authorname": "Tefler",
    "tags": [
        "teenager",
        "swallow",
        "cum inflation",
        "maliri",
        "alien11111",
        "mother",
        "daughter",
        "deepthroat",
        "psychic"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/three-square-meals-ch-54"
}
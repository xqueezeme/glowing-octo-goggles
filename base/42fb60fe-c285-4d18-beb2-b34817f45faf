{
    "title": "A Girl Named Mitch Ch. 03",
    "pages": [
        "Well, here's chapter three. There will be four chapters, and if you haven't read chapters one and two you really should do that first. All characters are over eighteen. Enjoy!\n\n******\n\nA Girl Named Mitch\n\nChapter Three\n\nThe sun was streaming in through the window when I woke up. I could hear birds singing outside. Mitch's arm was draped over me, her hand resting on my bare breast. I could feel her breath in my hair, her modest bust pressed against my back, our legs entwined together under the covers\n\nThere was pure serenity there, and I let it wash over me for a few minutes. I was exactly where I was supposed to be, and everything was right with the world. Except, of course, that it wasn't. My parents were never going to accept this, accept her as my partner. I pushed the thought away. They didn't need to know. I mean, it was just our first night together. No one was picking out rings, right?\n\nMitch stirred behind me, and the delicious feel of her skin against mine sent a warm shudder through my body. Her lips pressed against the back of my head and her voice was soft in my ear.\n\n\"So, regrets?\"\n\nThe sound of her beautiful alto voice banished my melancholy, and I wrapped my arms around hers. \"Let's see. Do I regret having the most incredible night of my life with my best friend, who I've finally admitted to myself I want to be with?\" I turned in her embrace, running my fingers over her back and staring into those stunning blue eyes. \"No, I don't regret that at all.\" And I didn't. Nothing would ever make me want last night back.\n\nMitch pressed her forehead to mine. \"So I did okay, then?\"\n\nI giggled. \"I thought that was my line. I'm the one who didn't know what she was doing.\"\n\n\"Right.\" She kissed my cheek. God, I liked that. \"So all the pressure was on me. It had to be good.\"\n\n\"Sweetheart, good doesn't begin to describe it.\" I let my voice get quiet and serious. \"I didn't know it could be like that.\"\n\n\"Me neither.\"\n\nI nuzzled against her. \"You're lying. Just another day at the office for you.\"\n\n\"Hey.\" She fixed me with her gaze. \"No it wasn't.\"\n\n\"But...\"\n\n\"I've been with other girls, sure, but last night was the first time I'd ever been with someone I loved. I am crazy, out of my mind in love with you, Cindy Spencer. And being with you, last night, and like this, it means everything to me.\"\n\nMy heart was full to bursting, and I couldn't do anything but kiss her, long and deep, morning breath be damned. Geez, why do I think about stuff like that at times like these?\n\nI let her roll me onto my back as I relaxed into the kiss, feeling my skin heat up as she covered me with her body. Unfortunately, it didn't go further as she broke away.\n\nI ran my fingers through her short hair. \"So what happens now?\"\n\n\"Well, if we're going to go meet Carrie to work out, we need to go get a shower. Unless you want to show up smelling like sex. Or we could blow her off and stay in bed all day.\" She ran a hand under my arm and down my side, resting on my bare hip. \"I'd be okay with that.\"\n\nI grinned at her. \"That's not exactly what I meant. But a shower is a good place to start.\"\n\nWe had a lot of fun in the shower. It was still reasonably early on a Saturday, so we were able to get in the big stall on the end, and we spent almost half an hour engrossed in warm, wet kisses while our fingers were deep into warm, wet other places. A thorough washing and two incredibly satisfying orgasms later I got out, cleaner, but considerably shakier in the knees.\n\nI hadn't dropped the ball myself, and I knew I'd gotten Mitch off at least once. I was quickly finding out how much I loved having my fingers inside of my mew girlfriend. It was incredibly intimate and erotic.\n\nWe were running a little late, so we dressed and headed out toward the sports complex. Walking down the sidewalk next to Mitch was bizarre. We'd done it dozens of times before, but, of course, everything was different now. I was so nervous. We kept exchanging shy glances, and eventually her hand brushed against mine.\n\nI wanted to take it, I really did, but I just didn't have the gumption, I guess. I moved slightly farther away, reaching my hand nearest her up to the shoulder strap of my gym bag. I was too ashamed to even look up at her, but even on a Saturday morning there were a lot of people around, and I was scared.\n\nWe were about ten minutes late to the gym, and Carrie was already in the weight room when we entered. She waved to us, and I forced a smile and waved back, heading over to the mat to stretch. When I was done I set up my weights on the bench press and lay down. Mitch was right there to spot, and I was taken back to that first moment we'd talked.\n\n\"One, you okay, Cindy? You said no regrets, but you seem embarrassed. Two.\"\n\n\"Ungh, I'm fine, I'm just, um, not ready to advertise yet.\"\n\n\"Three. Okay, I'll take your lead. Four. But I'll warn you I'm not good at hiding things, especially the way I feel. Five.\"\n\nAt least she was keeping her voice down, and Carrie was over on the leg machines, so I doubted she'd heard anything. Mitch coached me through the rest of my set, and I did the same for her. She insisted on putting thirty more pounds on the bar when she did, of course. Showoff.\n\nBy the time we were finished a few other ladies from the team had joined us, and we didn't talk anymore about us. Mitch purposefully sat a seat away from me at lunch, which renewed my feeling of shame. Mitch hiding things wasn't right. I couldn't even look at her. I mean, I couldn't tell people about me and her. Not yet. And I thought everyone was going to be able to see right through us if I let her close at all.\n\nI went to the library to study that afternoon. The football team had a home game, so the place would be almost empty.\n\nI sat up on the third floor near a window that was cracked open, so I could easily hear the commotion going on over at the stadium. I knew that Mitch was there. She'd gone down early one morning to stand in line for tickets. Well, at least I knew she wasn't thinking about me and our increasingly awkward workout and lunch from earlier. Mitch was nothing if not single minded when the Dawgs were playing.\n\nI, on the other hand, was having a devil of a time focusing on my work. It'd been less than twenty-four hours since I'd initiated this relationship, and I was already screwing it up. Being with Mitch last night had been beyond amazing. It had felt so right, so natural. So why was I so confused?\n\nThe game had just ended when I decided to head back to the room. I stupidly assumed that Mitch would be there, but she wasn't. I looked at my phone, and there was a text from Mitch saying she was headed out for drinks. I had been able to tell from the general exuberance of the crowds on my walk back to the dorm that we'd won, so I wondered how much of a good time Mitch was going to have.\n\nAt ten I decided to run down to the bathrooms and get ready for bed, a concept which had clearly not occurred to anyone else in the dorm, but I wasn't in any kind of mood to hang out with anyone. I was so distracted in the shower that I couldn't remember if I'd washed my body after I finished with my hair.\n\nI did it again, just to be sure. There was almost no noise around the dorm; everyone was already out engaging in their typical Saturday night frivolities. Why was I such a square? I almost never did that stuff. I wonder if Mitch would ever get bored of me. When I got back to the room it was still empty, but I had just enough time to pull on my sleep shorts and a top before the door opened and Mitch came in. I glanced at the clock. It wasn't even eleven yet.\n\n\"Hey.\" My voice sounded small and hurt. \"I didn't expect you home so soon.\"\n\nShe stepped close to me. \"Just realized I didn't want to be there.\"\n\nThere was a tear in my eye. \"How come?\"\n\n\"Because I wanted to be here.\"\n\nI was weepy. I don't know why, I shouldn't have been, I had no reason to be, but I was. Mitch just pulled me into a hug, and I rested against her as she stroked my hair. \"I shouldn't have left you today. I should've given those tickets away. I'm so sorry.\"\n\n\"No, it's okay. I don't want to be like that, someone who'd make you do that. I'm sorry. I'm not very good at this yet. I just...\" My emotions welled up and I pulled her tighter.\n\n\"It's fine, Cindy. We'll talk about it in the morning, okay?\" I looked up at her and her lovely smile and nodded, lifting my chin for a kiss. She didn't hesitate, and the world just fell away.\n\nWhen we finally broke apart I was grinning ear to ear. \"You taste like beer and cherries.\"\n\nMitch looked thoughtful for a second before nodding. \"I had two beers, and a Jell-O shot. I think it was red. Before the party I would have tasted like nachos.\"\n\nThat made me laugh, and I kissed her again. \"It's weird. You should go brush your teeth.\"\n\n\"If I do, do I get more kisses?\"\n\nI pressed my lips right under her ear. \"Probably.\" Her body shuddered before she grabbed her toiletries and headed out the door and down the hall. I needed her to know that last night hadn't been a one-off. I mean, I thought she knew, but I wanted to do something for her. I quickly grabbed a scented candle, which we weren't supposed to have in the dorm, of course, but oh well, and lit it. I turned out the light, cracked the window, and stripped.\n\nWhen Mitch slipped back in I was standing in the middle of the room, completely naked. My arms were clasped behind my back and I was wearing my most innocent expression, slowly rotating my shoulders back and forth.\n\nMitch's eyes went wide, and she quickly set down her bag and locked the door. \"Oh, Cindy.\"\n\nI looked up at her through my lashes, speaking in the most innocent voice I could muster. \"Is it time for bed?\"\n\nJust standing there like that had gotten me heated up, but when Mitch crossed the short distance and took me in her arms, everything jumped to the next level. She kissed me long and deep, my body melting into her. My hands pulled at her clothing, desperate to feel her skin against mine, and she created just enough distance so that could happen.\n\nAs she stepped out of her jeans and boxers I pulled her towards our bed, and she lay me down, covering me with her warm body and warmer kisses. My eyes closed as she feasted on my neck, hovering over my pulse point, which felt beyond exquisite. But as much as I wanted to just give myself over to her, I'd been the problem today, and I wanted to do something to make it right.\n\nI encouraged her back higher, and when she complied, I slid lower, kissing over her neck before taking one of her breasts into my mouth. I was rewarded with a steady stream of sighs and moans and encouraging words, each of which filled me with confidence to continue. I'd seen a lot of different positions in my research, and there was one I wanted to try that I thought would work well on our tiny little twin XL. Looking back I wonder how we ever got anything done on that thing.\n\nAnyway, I reluctantly let her nipple go and kissed my way down her belly, hooking her thighs with my arms and pulling her toward the top of the bed. Mitch got the idea immediately, grinning ear to ear as she straddled my face.\n\n\"Yeah?\"\n\nI nodded, my mouth watering as I took in her aroma. God, she smelled good, and I couldn't believe how badly I wanted to taste her again. Mitch lowered her sex to me as I pulled her thighs down, and I pushed my tongue deep into her folds. My eyes closed and I moaned into her skin as her flavor washed over me.\n\nThis cinched it, I guess. It's funny, really. I'd spent a solid portion of last week wondering if I'd be able to do this for Michelle. I imagined hating it, or it grossing me out to the point I'd get sick. I'd had more than a few panic moments picturing myself gagging while trying to, um, well, you know.\n\nTalk about a lot of wasted worrying. This was awesome. She smelled and tasted amazing, and the sensual feel of my mouth on her silky labia was just heavenly. And I just loved this feeling, her weight on me as she ground against my tongue. Looking up at her strong body towering above me, I just wanted her so badly.\n\nI pulled her clit into my mouth.\n\n\"Oh, god, Cindy, that's sooo good. Keep going, just a little more, oh shit.\" She started to tremble and buck, so I tightened my grip on her legs as her orgasm shook her, holding her against me.\n\n\"Oh, okay, stop, stop. Oh, wow.\" She pulled her pussy away, rising up on her knees.\n\n\"Was that good?\"\n\nMitch reached down and touched my face. \"Oh, baby, that was so good.\"\n\nI made my voice as innocent as I could. \"There's more where that came from, if you want.\"\n\nMitch grinned that wicked little grin of hers, and I went all gooey inside, as if I wasn't already. \"Oh, Cindy, I do want.\" She swung her leg over so she was no longer straddling me, and I made an unhappy little sound.\n\nMitch chuckled. \"Don't worry I'll give it back.\"\n\n\"Yay!\" I sounded like a little girl finding out she was getting an ice cream cone. \"Yummy!\"\n\nThat made her laugh out loud, and she positioned herself astride me again, only this time facing the other direction. I was just happy to have access to her deliciousness again as she bent down over me. In fact, I was so wrapped up in what I was doing it came as a complete shock when her tongue ran over my sex.\n\nI let go this little half moan, half coo thing, my head falling back into my pillow. Mitch looked back at me. \"Hey, don't stop.\" I grinned at her, and we both went back to what we were doing.\n\nWe stayed like that for over half an hour. I don't know how many times I came, or that I made Mitch come. We were just lost in our little world of pleasure. When we were finished, she pulled me close under the covers, like she always did.\n\nThe awkwardness of the day came rushing back. \"Mitch, I, um...\"\n\n\"Hey,\" she stroked my hair and kissed the back of my head, \"we'll talk about it in the morning. Now I just want to hold you.\"\n\n\"Okay.\" I pushed my worries away, not without effort, and just rested in her arms for the night.\n\n***\n\nWhen I woke up, Mitch was running her hands up and down my skin.\n\n\"Morning, sunshine.\"\n\n\"Mmm, morning.\" I leaned back for a kiss, which she gave me. I snuggled back against her.\n\nMitch pressed her lips to my shoulder. \"So, I think we should talk now.\"\n\nI groaned. \"Do we have to?\"\n\n\"Yeah, Cindy we do. What're we doing here?\"\n\n\"Snuggling.\"\n\n\"Cindy,\" she scolded.\n\n\"All right, I'm sorry. How mad at me are you?\"\n\nShe laughed. \"You think I have mind blowing sex like that with people I'm mad at?\"\n\nI turned around so I could see her. \"Mind blowing?\"\n\nShe smiled at me. God, she was beautiful. \"Yeah, you're amazing. Didn't you know that?\"\n\n\"When I was studying for it my goal was 'not terrible,' with aspirations of 'adequate'.\"\n\nMitch's eyes were dancing with mirth. \"You studied? For sex? That is so you.\"\n\nI put on a pouty face. \"I wanted to know what to do. It's not that weird.\"\n\n\"No, I guess not.\" She gave me a quick kiss. \"But you're more than adequate, you know.\"\n\n\"I really like it, I mean, not just the getting part, but the giving, too. I love it. You taste really good.\" My cheeks were burning and I looked down, too embarrassed to meet her eyes, but she gently lifted my chin until I did.\n\n\"You do, too. And you're awesome. I mean, it'd be amazing just because it's you, but really, girl, you got skills.\"\n\nI giggled. \"You're terrible!\"\n\n\"I know. But you love it. And I love you.\"\n\nI swallowed and stared into those stunning blue eyes of hers. \"I love you, too.\"\n\n\"But not out there?\" She glanced toward the door. It wasn't an accusation, just a question. I felt my cheeks burn with shame.\n\n\"I'm sorry.\"\n\n\"I'm just trying to understand, Cindy.\"\n\n\"I love you. I do, I just,\" I looked out the window, \"I'm scared. This, um...\"\n\n\"Cindy, I'm pretty sure I know the answer to this, but, what would your family think? About us, together, I mean.\"\n\nA tear rolled down my cheek and I shook my head.\n\n\"Not good, huh?\"\n\n\"Um, they're not like, 'stone 'em in the streets' hateful, but yeah. I've been taught homosexuality is an abomination since before I knew what either of those words meant.\"\n\nMitch interlaced her fingers with mine. \"That's what you thought when you met me?\"\n\n\"No. Maybe. I thought I was more open minded.\" Mitch gave me a stern look. \"Okay, no I didn't.\" I smiled shyly and snuggled in closer.\n\nMy lover pulled me tight. \"How 'bout now?\"\n\nI looked deep in her eyes. \"Being here, with you, it's the most natural thing in the world. Making love to you, it feels so perfect.\" I knew I was blushing, hard, but I kept my voice steady. \"This can't be wrong.\"\n\n\"Love is never wrong, Cindy. But you still have a choice about how you deal with it. And I know I've said it before, but I'm not good at hiding.\"\n\n\"I know. I'm sorry.\" My voice wavered with emotion when I spoke, and Mitch just pulled me close and kissed the top of my head.\n\nShe didn't push me any more, holding me just as tight as always, but I was still afraid my fear was going to cost me this relationship before it even started.\n\n***\n\nWe spent all of Sunday morning in bed, and my worry that I'd screwed everything up slowly dissipated with each kiss and cuddle. A part of me kept expecting her to shame me for being scared, but it never happened. In fact, I don't think she wanted to let me out of her sight. Eventually I had to shoo her out of the room so I could get some work done, sending her down to the common room to watch the pro football games like I knew she wanted to do.\n\nWhen we were alone it was great. Sunday night, when she came back upstairs, we slipped into each other's arms, and then into bed like we'd been doing it for years. I realized all the tension and worry I'd been feeling around Mitch had been the simple wrongness of not being with her, of there being any boundaries between us.\n\nBut when we went outside, or at least when I went outside, all that fear came back. We'd work out after classes each evening, and Mitch would stay away from me. She rarely talked to me or teased me like she used to, and it made me hurt inside. I knew it was what I'd asked for, but I didn't like it. And I could tell it was wearing on her, too. Closing the door to our room each night felt like stripping off an uncomfortable bra, the irritation from the front we were putting on gone, and we could just be together.\n\n***\n\nIt was the next Monday, after a whole week of this new, amazing relationship, and I was waiting for Carrie at the table we generally met at for lunch. I'd seen her get in line about a dozen people behind me so I knew she'd only be a minute. I took a sip of my cranberry juice as she entered and came over to the table.\n\n\"Hey, Cindy. God, I thought that class would never end.\"\n\n\"Sorry. I just sat through an hour of international banking law, but somehow I didn't mind.\"\n\nCarrie laughed. \"You're weird. So what's new with you?\"\n\n\"I'm having sex with Mitch.\" It just kind of blurted out. I'd actually spent a decent amount of the aforementioned lecture debating whether or not to tell Carrie what was happening. I knew I had to start to come out, and I desperately needed someone other than Mitch to talk to. I'd intended to kind of ease into it, but that's not what happened. Carrie's reaction I could not have predicted.\n\nShe clapped her hands together and pointed at me. \"I knew it! I knew something was going on!\"\n\n\"You knew?\"\n\n\"Well, maybe not 'knew', but something was off with you two. I mean, she was ignoring you way too much.\"\n\nI stared at her. \"How does that lead to 'they're sleeping together'?\"\n\n\"It's you and her. Mitch never ignores you. You are always the most important person in the room to her. You have been since the day we all met. And I haven't seen her talk to you in like a week.\"",
        "I didn't know what to say, so I spluttered out something stupid. \"We still talk.\"\n\nThat made her laugh. \"I'll bet you do. So how is it?\"\n\n\"It's good,\" I blushed and looked down, \"as in amazing. Like, 'I had no idea it could be this good' good.\"\n\n\"Wow. So, I mean, she's really good? What's she like, is she crazy and aggressive?\"\n\n\"Sometimes. But mostly she's really gentle and giving. It's nothing like being with a guy. So much better.\"\n\nCarrie peppered me with a few more questions, and weirdly it made me more comfortable, instead of less, as she did. And the more I answered, the more I realized how amazing being with Michelle really was. And I was just asking myself the question when Carrie verbalized it.\n\n\"So why are you guys hiding?\"\n\n\"Cause I'm scared. I mean, even in the best of circumstances my family is really reserved, especially about romantic stuff. I mean, you'd never catch my parents being affectionate in public. I don't even think I ever saw them hold hands.\"\n\n\"Really? Geez. My parents, they don't, like, make out in public, but they hold hands. And they're always hugging and touching at home.\"\n\n\"Not mine. I mean, the only evidence that they were ever affectionate is the fact they have three children.\"\n\n\"And is that what you want? That isn't going to go over well with Mitch.\"\n\n\"She understands. I mean, she hasn't complained.\"\n\nCarrie shook her head and sat back with a pitying look on her face. \"Cindy, Mitch is a full on 'physical touch' person. It's her primary.\"\n\n\"Her primary?\"\n\n\"Yeah, her love language. From 'The Five Love Languages'. We read the teen version in my youth group.\"\n\nI stared at her, befuddled. What the hell was a love language? It sounded like mushy things you wrote in Valentine's Day cards.\n\n\"You seriously don't know? Go look it up.\"\n\nSo I did, spending the hour and half after lunch and before my next class studying and reading everything online I could find about the five 'love languages,' instead of doing my Diffy-Q problems like I should have been, (that's 'Differential Equations' to the mathematically challenged). I know, I'm studying for my relationship again. Not the sexiest thing in the world, but it was so eye opening.\n\nAfter reading the basic overviews I took the quiz, coming in strongly as a 'quality time' person. That made sense, looking at it. My feelings really blossomed for Mitch when we started hanging out, me tutoring her or binging 'Buffy' in her room, or us spending time together on the road.\n\nAnd Carrie had been totally right. Mitch was a 'Physical Touch' person. She was quick with a hug or a back rub. She was always touching the people she cared about, and not in a creepy way. It was just her.\n\nBut reading more, I realized something that left me fighting tears. Those times when I wouldn't hold her hand in public, when I created artificial distance between us, I wasn't just being careful. I'd been telling her I didn't love her. She may have understood in her head, and it may not have been what I meant, but it's what her heart had been hearing.\n\nI went back to all those arguments I'd had with myself before I'd put what I laughingly thought of as 'the moves' on her last Friday. Could I be what she needs? She needed someone she could touch.\n\nMy heart was beating fast as I headed to the athletic complex for our daily workout. I heard Mitch in a loud, jovial conversation with someone as I entered the locker room. When she saw me I smiled at her, a warm, lover's smile, and her face lit up.\n\nAs soon as we were in the weight room I asked Mitch if she'd spot me on some squats. She nodded, the surprise evident in her face, and then I returned the favor when I was done. I forced myself to touch her, nothing too overt, but just little reminders that I was there. The effects were almost instantaneous; Mitch's eyes were just dancing after ten minutes, and she was her usual jovial self.\n\nI waited for her afterwards as she finished her spirited debate with one of our teammates regarding the Bulldogs chances this year in football. When she finally headed toward the door I joined her, walking by her side down the pavement.\n\nI intentionally made sure my bag was over my outside hip, so my arm nearest Mitch would be free. It only took a few steps before her hand brushed against mine. I took what I hoped was an unnoticed moment to steel myself before I hooked it with my little finger. Mitch looked down at what was happening as our palms pressed together, before turning towards me with that heart-melting smile of hers.\n\nI just grinned innocently at her, like it was no big deal. \"So how was your day?\"\n\nShe spluttered for a second. \"It, um, yeah, it was good. You?\"\n\n\"Good. I didn't get my math done, but still, learned some stuff. Do you remember what the cafeteria has for dinner?\"\n\nMitch shook her head, grinning and making a joke about mystery meat surprise. Happiness was just rolling off my girlfriend in waves, and it made my heart soar. This little contact made so much of a difference for her, and I could hear the music in her voice as she told me about that one guy in her education class who'd gone and put his foot in his mouth again. I just basked in how much my day brightened simply being near the woman I loved. My hand tightened in hers, and we went down the sidewalk together.\n\n***\n\nMy eyes closed as I leaned back against her, feeling my body hum from the string of orgasms Mitch had just given me. The little kisses which were currently feathering my neck were pretty nice, too. She'd been a woman possessed when we'd gotten back to the room. I just let her have at it. I mean, I'm not stupid, and the cloud I was floating on just now, mmm, yummy.\n\nI held her to me. \"That was amazing, Sweetie.\"\n\nShe pressed her lips to the back of my neck. \"I'm glad you approve.\"\n\nI turned in her arms, our legs entwined together under the sheets. \"You know what this means, though.\"\n\nShe smiled at me. \"What?\"\n\n\"I still haven't done my Math.\"\n\nShe giggled. It always amazes me how girlish her giggle is, when she does it. It was adorable. \"You are so weird, Cindy.\"\n\n\"Yeah? Well, you love me. So what does that make you?\"\n\n\"A connoisseur of all things bizarre and interesting.\"\n\nI laughed and kissed her, losing myself for a moment in the way her lips felt on mine. \"I'm not the only one bizarre and interesting in this bed, missy.\"\n\n\"Guilty as charged.\" She said it with such bombastic flair that I laughed again before rolling her over onto her back. I began to kiss down her body, pulling the tip of one of her breasts into my mouth.\n\n\"I thought you, ooh, had math homework. God, Cindy, that's good\"\n\n\"Yeah, I do, but this is more fun. I can do it tomorrow morning, nothing until ten. Nothing but this.\"\n\nI dropped lower, kissing down her belly until I was settled between her thighs. I buried myself in her, revelling in the way she tasted and smelled, musty and sweet, the feel of her lips in mine, the sweet sounds she made at the top of the bed, the way she seized in bliss as I brought her to orgasm.\n\nI climbed back into her arms and kisses. \"See? Better than Math.\"\n\n\"You aren't going to fall behind?\"\n\n\"I'll have time in the morning.\" I ran my finger down her breastbone. \"That is unless you distract me again.\"\n\n\"No can do, babe. I've gotta be down at the ticket office at seven to be in line. Playing Vanderbilt this weekend.\"\n\n\"Football, right? Is that an important game?\"\n\nMitch snorted with laughter. \"We should win easily, but Vandy's a bunch of brainiacs. They can surprise you. I wish you'd let me take you to a game.\"\n\nI wrinkled my nose. \"It's football. The football players at my high school were all jerks. People treated them like gods.\"\n\n\"Did you have a good team?\"\n\n\"For our size school we were decent. Biggest game of the year was always against Daviess County. It was all people could talk about. The whole town would shut down. I thought it was nuts.\"\n\nMitch looked at me with amused incredulity. \"But you're an athlete.\"\n\n\"Yeah, a female athlete in a conservative little bass-ackwards Georgia town. I was tolerated. Not celebrated.\"\n\n\"And that chafed you a bit?\"\n\n\"We won two state titles while I was there, and we barely even got noticed. Our football team never made it past the second round of the playoffs.\"\n\n\"So you have a chip about them, huh?\"\n\n\"Of course not. Except, yeah. We were actually lucky. Our A.D. had two girls who played softball, so the women's programs weren't completely ignored like at some other schools, funding-wise, at least.\"\n\nMitch ran a finger up and down my arm, which calmed me instantly. \"I think we're lucky. Do you know how screwed up people get by being treated like that?\"\n\n\"Yeah, maybe.\"\n\n\"I grew up in Florida. High school football is the shit there, too. Our quarterback raped a girl my senior year. Wanna guess what happened to him?\"\n\n\"You broke his nose?\"\n\nThat made Mitch smile, but her eyes were serious. \"I wish. Should have. Thought about it. But the girl, Molly, she was demonized, tortured for speaking up. And she was just a Sophomore, not even sixteen. Her parents had to take her out of school.\" Mitch just played with my hair, her look haunted as she gazed at me. \"I wouldn't ever want to be like that.. We, you and me, at least, are going to have to be functioning members of society someday, regardless of our athletic laurels. Just a quiet life.\"\n\nI snuggled in. \"I don't think you'll ever live a quiet life, miss thang.\"\n\n\"Well quiet enough. Doesn't sound so bad.\"\n\n\"So if football is so terrible, why do you want to take me to a game?\"\n\n\"Because it can bring out the best in people, too. You see athletes who found charities, serve their communities. There are kids who stay in school just because they can play sports. And the sense of togetherness, ninety thousand people all pulling towards the same goal. It's amazing, and overall, I think there's a lot more good than bad.\"\n\nI made a show of rolling my eyes. \"Okay, fine, one game.\" Mitch responded with a huge smile and a big smacking kiss that made me laugh.\n\nI'd gone to football and basketball games in high school. Everyone did, it was the scene on Friday nights. I never actually watched any of the games, though. It wasn't like I didn't know the rules, or anything. My dad and brother were casual fans, and the fate of local teams was a regular topic of conversation growing up.\n\nOur football games were small town things, a few hundred people at the most with a fifteen to twenty person band, depending on how many students signed up that year. Musical talent not required. One thing was for sure, though, nothing had prepared me for what was in store for me that Saturday. Now, I'll never be the level of psycho fanatic that Mitch is, but the pageantry, the people, the relentless energy, it was nothing like I'd expected. And to think it had all been happening just blocks away from me for the last two years.\n\nBy halftime everyone was having a rollicking good time, seeing as we were up by three touchdowns and the beer people had snuck in was flowing pseudo-freely. Mitch had her arm around me and I was getting closer and closer to not being nervous about it. I really shouldn't have been, as there was rampant hugging, arm around singing, and other random contact happening everywhere.\n\n\"Hey, Kirkpatrick! You get my text?\" We turned around to see Jimmy coming down the concrete steps to our row.\n\n\"Yeah, you know I'm not supposed to be doing that.\"\n\n\"C'mon, we need you.\"\n\n\"Seriously? There are a lot of girls in your dorm. Ask one of them.\"\n\n\"You haven't seen what I have to work with. Besides, you owe me.\"\n\n\"No, I don't.\" Mitch took a deep breath. \"Fine, one time.\"\n\n\"Awesome! Tomorrow at three. Intramural field C.\"\n\nHe took off and Mitch groaned and buried her head into my shoulder. I grinned and looked at her. \"What was that about?\"\n\n\"He wants me to play Ultimate tomorrow for his team.\"\n\n\"And he can't find anyone else?\" We weren't supposed to play intramural sports, even in the offseason. The coaches didn't want us getting ourselves injured playing weekend warrior.\n\n\"It's a Co-ed league, so they have to have three women on the field at all times. I'm the most athletic woman he knows. And Jimmy has a bit of a competitive side. If I play they'll probably win. You could come play.\"\n\n\"Ultimate. That's the one with the Frisbees, right?\"\n\nMitch laughed at me. \"You're adorable. You could come watch, cheer for me.\"\n\n\"Maybe, if you're nice to me.\" I was grinning ear to ear now, staring up into her beautiful blue eyes. She leaned forward, and my eyes fluttered closed as we kissed, literally in front of ninety thousand people. And I didn't care for a second.\n\nI'll always remember that being the day I became a Georgia Bulldogs Football fan. Standing with thousands of my fellow students, one arm around Mitch and the other around some guy I didn't know standing on my other side, swaying together singing the school song after our resounding victory, listening to the Chapel Bell ringing in the distance.\n\nWe went out into the evening singing and cheering. My arm was around Mitch's waist, and hers around my shoulder, my hand up holding hers. \"So what now?\" I asked.\n\n\"Well, the Resource Center is having a mixer, after party thing. If you're up for something like that. There'll be food.\"\n\n\"That's the LGBTQ group right?\"\n\nMitch nodded. \"Yeah.\"\n\nIt was odd. I'd spent the last two weeks with Mitch, I mean, really with her. Having sex every night. That was going to get interesting in a couple of nights, when Aunt Flo arrived for her monthly visit, but yeah. I wonder how lesbians deal with that?\n\nAnyway, I loved Mitch. Not just loved, but I was in love with her, definitely, without question. Even so, I still didn't think of myself as gay. Logically, that made no sense. I mean, clearly I wasn't straight. And the thought of ever being with a man again made me a bit queasy, so that should have told me something, but even so, as we made it to the party, I felt like an outsider.\n\nI clung to Mitch, terrified, as she introduced me around, confidently calling me her girlfriend. Here I was, in the belly of the beast, surrounded by people who could not have been more different than those I grew up with. My pastor would have called them demon possessed, unnatural hedonists given over to their depraved lusts and carnal appetites.\n\nIf that were the case, they were the nicest group of depraved, lust-filled heathens I'd ever met. Every one of them was unwaveringly kind and welcoming, the only mild exception being one pretty redhead who I think was more than a little disappointed Mitch hadn't shown up alone. But still I got hugged and welcomed a dozen times over. A soft drink was pressed into my hand, and I found myself standing with a group of people talking about the game and being teased that it had been my first one. Inside ten minutes I was laughing and holding my own in the conversation.\n\nThere was music, and eventually people were dancing. Most of the couples were same sex, but not all. I watched two young men dancing together, their arms around each other, each gazing into his partner's eyes. They shared a tender kiss, before the shorter one rested his head onto the other's shoulder.\n\nI couldn't take my eyes off them, and eventually Mitch wrapped me in her arms from behind. \"What do you think?\"\n\n\"It's beautiful. They're beautiful.\" My voice was thick with emotion. Man, I wasn't the weepy kind.\n\n\"Not what you expected, huh?\"\n\nI put my arms over hers, lowering my voice to a whisper. \"I was always told it was ugly. Unnatural. Wrong. But it isn't, is it?\"\n\n\"No. Just like you and me.\"\n\nI leaned back against Mitch. \"I love you.\"\n\nShe kissed my temple. \"I know. You wanna dance?\"\n\nI nodded. \"Yes.\"\n\nI turned in Mitch's embrace and wrapped my arms around her neck, resting in her strength as we began to sway to the music. I don't think we stopped touching the rest of the night, right up to the moment Mitch lay me down in our bed, stripping me gently before kissing her way down my body and taking me to heaven. It took a little convincing, but eventually Mitch let me do the same for her. We finished under the covers, my back to her front as I reclined against her so we could kiss as Mitch's talented fingers gently brought me to another orgasm.\n\nAs I fell asleep in her arms I thought about today. It had been wonderful, one of the best days of my life. I'd had a lot of those in the last two weeks, and somehow I knew it was only starting.\n\n***\n\nI snuck out early in the morning. I knew from experience that Mitch would sleep for a while if I let her, and I needed to get some work done if I was going to make it out to Mitch's game. I sent her a text when I finished breakfast, letting her know where I'd gone. Sure enough, she didn't respond until almost eleven.\n\nMitch -- Missed you waking up. I was cold.\n\nMe - Poor thing. I was warm.\n\nMitch -- Brat. Will I see you this afternoon?\n\nMe - I don't know. I have a lot to do. We'll see.\n\nMitch -- Okay. I love you.\n\nMe - Love you, too.\n\nI had every intention of getting to the game, but I didn't want to promise anything in case things went sideways. But, tucked away in my favorite corner of Main Library, I was able to make it through both my Diffy-Q and Econ problems, and even made a go at an outline for my International Banking term paper.\n\nWhen I made it to the intramural fields I saw Mitch immediately. She was huddled up with her teammates, wearing purple, knee-length basketball shorts with a white stripe, along with a loose tank top over a black sports bra, along with a visor and sunglasses. She looked amazing.\n\nI found a shady spot and sat down in the grass near a few other girls who were watching and giggling.\n\nThe one nearest me smiled. \"Hi, you have a boyfriend on one of the teams?\"\n\nI could have just said yeah, or that I was here to see a friend, but I didn't. \"No, girlfriend. In the purple shorts.\"\n\n\"Really? She's something.\"\n\nI giggled. \"You have no idea. How about you?\"\n\nShe scooted closer and pointed to a tall guy in the other huddle wearing green and yellow. \"We're not actually dating yet. We talked at a party Friday and he told me about this, but I had to go before I could give him my number.\" Her face looked worried. \"I hope showing up comes across as interested, instead of stalker-ish.\"\n\nI looked back across the field. \"I don't think it's going to be a problem.\" I nodded toward the object of her desire, who had noticed she was there and was now jogging across the field. I smiled as she jumped to her feet, completely forgetting I existed. That was fine.\n\nMy eyes found Mitch, almost on their own, I think. I was going to be patient, and let her figure out for herself that I was here. That took about five minutes, and I'm not sure which of us had a bigger smile when she finally saw me, but there was definitely an extra bounce in her step as the players ran out onto the field.\n\nBefore today I was vaguely aware that Ultimate was a sport. I could have told you it was that one with the Frisbees, but that would have been about it. To be honest, this afternoon that was an advantage. When I watched Mitch play tennis my brain was always working, analyzing her form, her opponent's tendencies, searching for strategies. But I really couldn't do that now; I barely knew the object of the game. So instead I got to just watch her. The way she moved, decisive, powerful, but with a grace the boys lacked.\n\nShe wasn't the only girl on the field, of course, and I noticed the others too. The way they ran, the way their breasts bounced on their chest. The boys, they were fine looking, but the women seemed to just glow.\n\nUp until that moment I think I still thought of myself as straight, or mostly straight, with an odd attraction to one rather butchy tennis player. But that was a lie. I was drawn to the women. My eyes found them on the field, because they were beautiful in a way the others weren't.",
        "But no one outshone my Michelle. She was a marvel, casually flicking the disc over half the length of the field with almost perfect accuracy. At half-time she stripped off her loose top, playing the rest of the game in just her sports bra. It made my mouth go dry, watching her firm stomach and powerful shoulders glinting with sweat in the Autumn sun. She was beautiful, and I was gay. I let the fact sink into me. I wasn't joking or playing, I wanted her, for as long as she would have me. And I knew that I would never, ever want a man again. I wondered if I ever really had. But I wanted her, so badly I could feel my excitement literally oozing out of me.\n\nThe game ended, and Mitch went with her team to bid 'good game' to their opponents. Jimmy was beaming, since they'd won easily. Once Mitch finished she put her white top back on and jogged over to where I was standing.\n\n\"Hey, you made it! Did you mmph!\"\n\nI cut her off with a kiss as soon as she was close enough, wrapping my arms around her and pressing myself against her body. It only took Mitch an adorable moment to register what was happening and reciprocate, our tongues dancing and caressing each other. After a long moment I traced my lips along her jaw to her where I whispered softly, \"Take me back to our room,\" before giving her earlobe a nibble.\n\nMitch gasped and turned back towards Jimmy. \"Um so, yeah, I've gotta go. Bye!\"\n\n\"I bet you do, Kirkpatrick.\"\n\nI took Mitch's hands and started pulling her away, and she jogged after me, laughing. She fell in beside me, arm around my shoulders, mine around her waist, as I leaned against her.\n\nAs soon as Mitch shut the door to our room I pushed her up against the wall kissing her as deeply as I could. My hands pulled at her tank top, and she lifted it free and tossed it to the floor. My lips moved down her chest, tasting the salt of her sweat.\n\nI turned her around and herded her toward her desk chair, which she fell into with a wide-eyed expression as I dropped to my knees in front of her.\n\nI hooked my fingers into the waistband of her shorts, and she lifted her hips so I could pull them down along with her underwear. I tossed them away and leaned forward, my mouth watering as the musky aroma of her arousal hit me. She actually tasted a little different, the salt from her sweat setting off her other flavors. It was still delicious, and I scooted her hips further to the edge of the chair for a better angle.\n\n\"Oh my god, Cindy, that's so good, so good, ooh, fu-u-uck.\" I loved listening to her sex babble, since it was easy to tell how excited she was. And I knew I had her going. My hand journeyed up over her stomach and caressed her breast, and she quickly stripped off her sports bra to give me better access. I tweaked a nipple, rolling it between my thumb and middle fingers as I sucked her clit deep into my mouth. Mitch had gone incoherent, pushing her hips against my mouth as I worked and only a minute or so later she began spasming deep inside, her head thrown back as she rocked to the rhythm of her orgasm.\n\nAs she came down I gently kissed her thighs, listening to her trying to catch her breath.\n\n\"Holy crap, Cindy. Wow. Where did that come from?\"\n\n\"To the victor go the spoils.\" I let innocent wonder drip from my voice, trying to intimate that I was awed to service such an amazing athlete.\n\nMitch laughed and pulled me up into her lap, me spreading out my sundress so the bare skin of our legs was pressed together as we kissed. After a moment I pecked her nose and forehead.\n\n\"Sweetheart?\"\n\nMitch buzzed into my neck. \"Yes, my love?\"\n\nMy heart skipped a beat hearing her say it, but I continued, touching her nose with my finger. \"You need a shower.\"\n\nMitch grinned up at me. \"Yes, ma'am.\"\n\nA nibble on her ear, \"Want me to wash you?\"\n\n\"God, yes. Oh, shit, Cindy.\"\n\nI stopped running my tongue over her neck and stood up, unzipping my dress and letting it fall to the floor as Mitch's eyes went wide. I walked to my wardrobe, stripping off my bra and panties before pulling on my robe. I turned back toward my stunned girlfriend. \"Just want to walk down like that?\"\n\nMitch shook her head and stood, pulling on a pair of boxers and a top before following me out of the room.\n\nIt wasn't even dinner time on Sunday afternoon, so no one was in the showers, which meant we were able to claim the larger stall at the end. I hung up my robe on a hook, turning on the water and stepping inside, smiling seductively as I emphasized my curves under the spray.\n\nMitch stripped almost clumsily, seemingly unwilling to take her eyes off of me as she did so. She was so sweet. Finally she made it into the shower, taking me into her arms.\n\nI let her hands travel over my body for a few delicious moments before I created some distance and loaded up a cloth with body wash. I took my time, touching and admiring her every joint and swell. She was intoxicating, the perfect mix of strength and softness, angles and curves. I reveled in the intimacy of what I was doing, and by the time she was washed and rinsed my insides were trembling with need.-\n\nI looked up into her blue eyes, and the intensity of her stare left me almost breathless as I whispered, \"All clean.\"\n\nShe ran her fingers over my cheek. \"Thank you, Cindy.\"\n\n\"You're welcome.\" I could hear the quavering timbre of my voice. \"It was my pleasure.\"\n\nA smile tugged at the corners of her mouth. \"Your pleasure. What a wonderful idea.\" I gasped as she pulled me close, turning me so my back was pressed against her. Her left hand touched my right cheek, tilting my head to the side so she could suckle my neck, while her right caressed my breasts before beginning to slide down over my tummy and through the wet hair above my cunny.\n\nMy body turned to Jell-O as her fingers dipped inside me, circling my clit before pushing into my vagina. I floated there, the warm water sluicing over my body as Mitch's soft lips kissed my skin while her fingers brought me higher and higher.\n\nIt didn't take long before I slipped into the turbulent embrace of orgasm, letting Mitch completely support me as I shook against her. When I calmed she turned me, kissing me deeply before fixing me with that gaze again.\n\n\"We're going back to the room now, so I can have you properly. Okay?\"\n\nI jerked a nod, fighting back a joyous tear. God, I wanted her to take me, I needed it as deeply as I needed oxygen to breathe. I'm not sure exactly how we made it back. The next thing I do remember was Mitch laying me down on our tiny little twin XL, and kissing down my body until her mouth closed over my sex, and I floated away into ecstasy.\n\nAlmost ninety minutes later we were cuddling under our big comforter, spooning as my body hummed from our lovemaking while Mitch pressed little kisses into my neck and shoulders.\n\n\"Did you like that?\" Mitch's voice was playful, and her breath tickled my ear, making me giggle and turn in her arms, pressing my cheek into her shoulder.\n\n\"Yeah.\" Our legs entwined under the covers as I looked up into her eyes. \"Two things.\"\n\nShe chuckled, fingers through my hair. \"What's that?\"\n\n\"Well, number one, seeing you play today, I'm pretty sure I'm a lesbian. Like, Ninety-nine point nine nine percent sure.\"\n\nShe smiled. \"So, still some doubt?\"\n\nI traced a fingertip over her collarbone. \"Just a tiny bit. You're welcome to keep trying to convince me all the way though.\"\n\n\"You can count on it, missy. What's number two?\"\n\n\"I'm starving.\"\n\nThat made Mitch laugh out loud. God, I loved listening to her laugh, and watching her smile, and feeling her touch me. I was completely besotted with this woman.\n\n\"Okay, what time is it?\"\n\n\"Like, seven-thirty.\"\n\n\"So the cafeteria's closed. What do you want?\"\n\n\"You could go get us Chinese.\" I smiled big as Mitch rolled her eyes.\n\n\"Alright, this time, for you.\"\n\nMitch punched our usual order into her phone and slipped on some jeans and a T-shirt. \"You better still be naked when I get back, hear me?\"\n\nI stretched out, pulling the comforter away and revealing my body. \"Mmm, deal.\"\n\n\"You aren't making leaving easier.\"\n\n\"You'll just have to hurry back.\"\n\nLess than five minutes after she left the face-time tone sounded on my phone, and I picked it up thinking Mitch was calling just to be sure I hadn't gotten dressed. I count myself very fortunate that I did actually glance at the name on the screen before accepting.\n\nIt was my brother Carl, which made me yelp and jump across the room to my dresser, where I threw on a T-shirt and pair of shorts before accepting the connection.\n\n\"Hey sis!\"\n\n\"Hi, sorry, I was, um, Hi!\" I couldn't come up with anything. I pushed my messy hair behind my head. \"So what's up?\"\n\n\"Well, I just wanted to give you a head's up that I'm going to be bringing someone home for Thanksgiving that I want you and everyone to meet.\"\n\nI smiled. \"Hey, that's great! Congratulations.\"\n\n\"I just wanted to introduce you guys, so maybe there'd be at least one friendly face when we get there.\" Carl took a deep breath and placed his device on some sort of stand, sitting back on his couch. \"So, Cindy, this is Bridget.\" A woman sat down next to him. She was pretty, tanned, with long dark brown hair and deep brown eyes.\n\n\"Hi. So you're dating my brother? I'm so sorry.\"\n\n\"Hey!\" They both laughed.\n\nI continued, asking if she'd met my parents yet, which was answered with an emphatic negative, although they said Mom and Dad were aware of her existence.\n\n\"So, what do you do, Bridget?\"\n\n\"I teach Spanish at Windsor Forest High School.\"\n\n\"Cool. So are you Hispanic?\" Her coloring certainly made that a strong possibility. I'm not sure if that would be an issue with my parents. If she were black it certainly would have been.\n\n\"My mom is Guatemalan. My dad was a youth pastor who led a mission trip to her hometown. He sort of brought back more than anyone expected.\"\n\n\"Wow. I bet they have a story, don't they?\"\n\n\"Oh, yeah.\"\n\nI spent the next twenty minutes getting Carl and Bridget's story. My brother works for NOAA, the National Oceanic and Atmospheric Administration, at Gray's Reef off the coast of Savannah. As a side hustle he leads diving groups on the weekends, which was where they'd met. Apparently she went on three of his diving trips before she worked up the nerve to try to talk to him.\n\n\"So why aren't Mom and Dad going to like her?\"\n\n\"Other than them being racist? She's a couple of years older than me, not nearly as religious as they'd probably like, and she has a gay older brother.\"\n\n\"Oh, wow. Yeah. It's going to be interesting.\"\n\n\"And we're living together.\"\n\n\"Oh, shit.\"\n\n\"Cindy!\" I could hear the playful remonstrance in Carl's voice.\n\n\"What, you're living in sin and you're worried about me using bad language? Perspective, please. Do they know?\"\n\nThat got a sarcastic laugh from my brother. \"Absolutely not.\"\n\nWe all started laughing, and we started speculating on whether or not that information would kill Mom or Dad first, which was when Mitch came back into the room. I'd completely forgotten that was going to happen.\n\n\"Hey, babe, I thought I said no clothes.\"\n\nFear spiked through my body at her mocking remonstrance.\n\n\"Hi, Michelle, it's my brother and his girlfriend!\" I made a desperate face at her, and I saw her eyes go wide as she realized what she'd just done.\n\n\"Who's that?\" Carl's voice sounded confused. God, maybe he hadn't heard.\n\n\"That's my roommate. She went out for Chinese. Michelle, this is my brother Carl and his girlfriend Bridget.\" I was trying not to panic as I held up the phone so they could see each other.\n\n\"Hello!\" She waved at the screen. Mitch's voice was scared, too. Luckily, she had enough sense not to try to explain away what she'd said.\n\n\"Well, my dinner is here, and I'm pretty hungry, so I'll see you in a few weeks?\" God, please just let me hang up.\n\n\"Sure, sis. See you then. Love you.\"\n\n\"Love you, too. Nice to meet you, Bridget!\" She waved 'bye\" and I hit the red disconnect icon.\n\nMitch was grinning at me sheepishly from her desk chair. \"So, how bad was that?\"\n\n\"I don't think he noticed? I mean, I really hope he didn't hear or understand.\" I buried my head in my hands and started laughing. \"He's all worried because he thinks Mom and Dad won't approve of him living with his slightly older, half Guatemalan girlfriend. He's bringing her to Thanksgiving. If he only knew.\"\n\n\"Well, you could come out. It'd take all the pressure off him.\" I stopped laughing, and Mitch's face fell at my pained expression. \"Damn, I'm sorry, Cindy.\"\n\n\"No, it's okay. I just, um,\" my face twisted with emotion, and in a flash Mitch was there and holding me close. I climbed up into her lap, letting the tears come, while my lover and best friend rocked me gently in her arms.\n\n\"Shh, shh, Baby, I've got you, I love you. Oh, Sweetheart.\" I'd never heard so much concern in Mitch's voice, and I took several great gulping breaths, trying to steady myself, to get control, as much for her as myself.\n\n\"I'm sorry, I don't know why I'm crying.\" My voice wasn't steady, but at least I was intelligible.\n\n\"Of course you do, Sweetheart.\"\n\nI took a moment to gather myself. \"I'll never be able to take you home. They may not like Bridget, but they'll accept her eventually. Not us though. Never us.\"\n\nMitch held me close. \"Don't say never. Besides, my parents are going to love you. Actually, they already do.\"\n\nI looked up into her lovely blue eyes. \"You told your parents about me?\"\n\n\"Of course. They can't wait to meet you.\"\n\nI rested back against her. Would I trade my family for this? I couldn't answer that yet. Luckily, I didn't have to make that decision tonight.\n\n***\n\nI slipped out while Mitch was still sleeping in the morning, and I didn't see her again till that afternoon when we were meeting to work out. She smiled at me when I walked into the locker room, and I wondered if she was nervous about where my head was at regarding us.\n\nI wanted to put that to bed, so I smiled back, walked up and kissed her. There were several other girls from the team in the room, including Carrie. Obviously Mitch and my relationship wasn't a secret anymore, and I remembered what Carrie had said. The best way to reassure Mitch that we were okay was to touch her, and to let her touch me. Which I didn't mind at all. The kiss was relatively chaste, but I let her hug me for a good while.\n\nShe wasn't in any hurry to let me go, but when we did separate she asked if I was okay, and I told her I was now, watching her smile light up her eyes.\n\nThanksgiving break finally arrived, and I couldn't remember being so nervous going home. I'd managed to get a ride off the online carpool board, so I didn't have to be worried about one of the parents coming to get me and meeting Mitch. Dad was at work, but Mom seemed to be happy I was home, mostly because I volunteered to go pick up my little sister after school, I think.\n\nThere was this massive disconnect from my last visit. The biggest thing I'd been hiding then was that I was friends with a lesbian. Something that would have gotten looks of disapproval, but nothing more. Now I knew I was a lesbian, which would likely get me thrown out of the house.\n\nLuckily Charlotte, my sister, was her usual bubbly self, amplified with the fact that she'd just started her long weekend. I took her over to the Dairy Queen and we got sundaes and sat and talked. She was eleven now, and I noticed that boys were starting to seep into our conversations. When she asked me about college guys I lied, saying I was taking a break from men, without implying I intended that break to be lifelong.\n\nDad was home when we got back. He acknowledged my presence with a few perfunctory questions, barely looking at me while I answered. He dismissed me by telling me Mom needed help with dinner.\n\n\"So, are you seeing anyone?\"\n\n\"I'm taking a break from guys, Mom. Trying to focus on my studies\"\n\n\"Cindy, college is the largest group of single men you'll find, all with excellent earning potential. You need to take advantage of that. You can't get back together with that nice boy you dated last year?\"\n\n\"No, mom. And that's what I'm supposed to look for in a partner? Earning potential?\"\n\nShe closed her eyes and looked down. \"Sweetheart, I know you're young, and you don't understand. You want the Disney fairytale. It doesn't exist. If you want a good life, you find a good, kind man, who'll support you and give you children.\"\n\n\"Is that what you did?\"\n\n\"Your father has always been good to me, Cindy. I've never wanted for anything. He gave me you, and your brother and sister. I have a good life.\"\n\n\"Do you love him?\"\n\n\"Of course I do. Being in love fades Cindy. Love is something you do. I support him, I run his house, raise his children, and give him a place to come home to. Someone who, well, that's love, Sweetheart.\"\n\n\"Mom, I don't need someone to support me. I'm going to finish college, and I'm going to be able to work and support myself.\"\n\n\"Cindy. Men don't want that. Men don't want women who are better at sports than they are or make more money than them. They want someone they can take care of. A girl who needs them, and, um, gives herself to them.\"\n\n\"Mom!?\" She was blushing hard. We'd never had 'the talk' about sex. She'd walked me through my first period and bought me my first bra, but sex was taboo. Hearing her even mention it in passing was stunning.\n\n\"You're old enough to know. That's part of it. Whether you want it to be or not.\"\n\n\"Well I don't. Not right now.\" I had to make myself add the last bit, and luckily our discussion was cut off by the kitchen timer, and I made sure it didn't start again after dinner.\n\nThat night was bad. It was the first night I'd spent not wrapped up in Mitch's arms since well, you remember. I finally sent her a text a little after eleven.\n\nMe -- I hate not being with you.\n\nMitch -- Me too. You open your suitcase yet?\n\nMe -- No. Why?\n\nMitch -- Just do it.\n\nI slid out of bed and padded over to the wall where it was, laying it down and unzipping it. I pulled the cover up and saw it, one of Mitch's shirts, lying on top of my clothes.\n\nMe -- You rascal. Thank you.\n\nMitch -- I didn't even wash it.\n\nI put it up to my nose and breathed it in. I could smell her, and that made me smile. I climbed back between my sheets, holding her shirt close.\n\nMe -- I love you.\n\nMitch -- I know.\n\nI giggled and shook my head at the Han Solo reference. What is it about rakes that women find so attractive? I guess it isn't the rake; it's the heart of gold underneath. Mitch had a heart of gold. And it was all mine. I snuggled in with her shirt and fell asleep.\n\n***\n\nCarl and Bridget arrived in the morning, which took ninety-nine percent of the focus off of me and my overly progressive ways. Even I could see how nervous Carl was when they walked in the door. Bridget seemed to be playing it cool, though, and I got a big hug from both of them.\n\nTo be honest I don't really want to write down all of the things my parents said over the next few hours. Of course, they didn't just hurl outright insults, but they were condescending and disapproving towards her. Maybe it was when they asked if her mother, who had graduated from Clemson, spoke English, or if she (Bridget) was in the country legally.\n\nIt was eye opening. They had no problem being generous or magnanimous to other races so long as they could look on them as disadvantaged. But seeing one sitting at the dinner table, not just as an equal, but presuming to be worthy of their son, that was something different. It was an ugliness that I'd always been aware of, on some level, at least, but seeing it play out with my brother's heart in the balance was awful.\n\nUnfortunately I wasn't able to ask her the questions I really wanted to, about her older brother and how he got along with her family. Not only would it be suspicious if I were too curious, she hadn't volunteered the information that her brother was gay. I couldn't blame her for that.",
        "What stunned me was how completely unflummoxed Bridget was through the whole ordeal, answering often demeaning questions with grace and poise. It probably helped that she faced gangs of hormonal teenagers on a daily basis, but still. Even through it all she gallantly offered to help clean up, and I think I could see my mom softening towards her at least a little bit. Or maybe it was just my imagination.\n\nWhat wasn't lost on me was the fact that if my situation had been known, Carl's questionable, in their eyes, choice of girlfriend would have been completely forgotten.\n\nThe food, though, had been outstanding, and after assisting Bridget and Mom with cleaning up I retired into the living room where Carl and my dad were watching football. Dad was already in his recliner, nodding off under the effects of too much turkey. I sat next to Carl on the sofa and pulled a blanket from the back of the couch around me, wishing I had my warm girlfriend to lean against.\n\nOn the screen the Cowboys' running back broke free for a long gain.\n\n\"Wow, nice run.\" I was a little surprised I'd even said it out loud, but my Dad and brother both turned towards me like I'd mentioned my broker was E.F. Hutton.\n\nDad's eyes narrowed. \"Since when do you watch football?\"\n\nI shrugged. \"My roommate, Michelle, she's a big fan. She finally talked me into going to a few games with her.\"\n\n\"Wow,\" Carl shook his head, \"She must be persuasive. Same girl you play doubles with, right?\"\n\nThere was something in the tone of his voice that immediately put me on my guard, or maybe I was just being paranoid. \"Yeah.\"\n\n\"I've seen you guys play on YouTube. You're good.\"\n\nCrap. If he'd seen us play, then he'd seen Mitch. It had been stunningly obvious what Mitch was to me the moment I'd met her. How long would it take watching on the computer for Carl to figure it out?\n\nMy dad, though, I could almost guarantee he had never watched me play. \"This girl you're rooming with is a Christian, right?\"\n\nI grimaced inside. We hadn't really talked much about religion. Mitch certainly wasn't a conservative evangelical, which is the only type my parents would have accepted as a Christian, but as far as I knew she wasn't overtly hostile to the concept of God. \"I think so. I mean, she's a very moral person.\"\n\nDad gave me a stern look, and I was afraid he was going to launch into a sermon about being unequally yoked, but the tryptophan from the turkey won over and he settled back into his easy chair with only a stern look. I counted my blessings and leaned back into the couch.\n\nIt wasn't until much later that I really got a chance to talk to Carl. I'd slipped out onto the back porch with a glass of sweet tea. It was, unfortunately, too late in the year for fireflies, but the soft sounds of early evening were still calming.\n\n\"Hey, Sis.\" Carl emerged from the back door, hand in hand with Bridget, and they sat on a bench nearby.\n\n\"Hey. Bridget, I'm so sorry that my parents are such, well, you pick a word.\"\n\nShe held up her hand. \"It's okay. I'd been forewarned.\"\n\nI shook my head. \"No, it's not. Okay, I mean.\" I sighed and looked into the kitchen through the window. \"Is Mom still up?\"\n\nCarl shook his head. \"She just went to bed, and Dad is asleep in his chair. So, mom says you're not dating anyone. She's very disappointed.\"\n\n\"I bet.\" I sipped my tea, slightly bemoaning the fact there was no alcohol of any kind to be had in my parents house. \"I'm doing fine.\"\n\n\"So, your roommate, I have watched you play, you know. Is she gay?\"\n\nMy heart rate suddenly doubled, and I made myself breathe before I answered. \"Yeah, she is. You can't say anything.\"\n\n\"I won't.\" He looked at his girlfriend, who nodded to him. \"We, just, um, couldn't help but hear, um, when she came into the room while we were talking.\"\n\nI felt a block of ice drop into my chest. They'd heard. My mind raced to come up with a believable story, but to be honest I'd been trying to invent one since the incident, without any success I might add.\n\nI wished Mitch were here. She could have come up with something and charmed her way out of this situation. But I wasn't Mitch. In fact, she was the anti-me, just like Tiwana had said.\n\n\"Cindy, it's okay.\" Carl shifted closer to me. \"You can talk to me. You're rooming with a lesbian.\" He said it as a statement of fact, without judgment or distaste. I nodded.\n\n\"You and her, are you more than friends?\"\n\nI thought about her, my brave, gloriously outgoing girlfriend, who was never afraid to be herself to anyone. I think that's what I loved about her most. Could I, one time, summon just a modicum of her courage?\n\nI sucked my lips back between my teeth and stared at the wood of the deck for a second, tears stinging my eyes, a vision of Mitch's bright blue eyes glinting with mischief in my mind as she smiled at me.\n\n\"Yeah, we are. A lot more. I, um, I love her.\"\n\nI felt my brother's hand slide over mine, which were clasped together in my lap. I looked up. Carl's eyes were shining with concern. Bridget's hand was covering her mouth, her expression soft.\n\nI looked at them both, desperation plain on my face. \"You can't tell Mom and Dad, please, oh god, please.\" With that I broke down, tears falling from my eyes, a bone deep terror filling my soul.\n\n\"Cindy.\" Carl's voice was hurt, and he pulled me up into a hug, and I buried my face into his broad shoulder, sniffling as I tried to choke back my emotions. In a moment there was another, smaller hand rubbing my back. I looked at Bridget, who was standing nearby. I smiled at her, and she joined our embrace. I let my family hold me for a moment longer before we sat down, and I told them the story.\n\n\"So that's it.\" I looked back into the house. \"They won't accept it.\"\n\nBridget put her hand on my knee. \"When my brother came out, it shook my parents to their core. I mean, your parents may be conservative, but my dad was a Baptist minister. And he came around, even left his job and denomination rather than lose his son. It wasn't easy, and I wasn't always privy to everything that went on between them, but I know he lost a lot of so-called friends. But God was good, opened doors for him to be able to start his own free church, and it's thriving. Anyone can change, and people can surprise you.\"\n\nCarl rubbed my back. \"And you have me, no matter what. I promise.\"\n\nI tried to thank him, but I couldn't get the words out. They started asking me questions about what Mitch was like, and we talked on the porch until after midnight. I felt loads better by the time I crawled into bed. I was having to share with my little sister, since Mom and Dad wouldn't let Carl and Bridget share a room until wedding rings were exchanged by all parties. Luckily Charlotte doesn't take up much room. I fell asleep listening to her gentle breathing, and dreaming of a day when my whole family would accept me as I am.\n\n***\n\n\"So, how'd it go?\"\n\n\"Mmm.\" I whimpered miserably and nuzzled into Mitch's shoulder.\n\n\"That bad, huh?\"\n\n\"I got to meet Bridget, she's great. But, god, I hated lying to my parents. And I was scared the whole time I was there. It was awful.\"\n\nMitch kissed my forehead. \"I'm sorry.\"\n\n\"It's okay. You're worth it. For now.\"\n\nShe burrowed her hand into my side, making me squeal and jump. I'd caught a ride home with the same carpool as I had heading out, and Mitch had been waiting for me as soon as I'd entered our room.\n\nThat had been almost an hour ago, and now I was completely naked, floating in a post orgasmic haze, my body pressed against my lover's as she held me under our comforter. I was also home.\n\n\"Just for now, huh?\" She rolled me onto my back, and I struggled feebly as she pinned me down. \"You're going to pay for that.\"\n\n\"I'm sorry.\" I made my eyes as big as I could, biting my lip and trying to look as pathetic as possible.\n\n\"That's right.\" She pivoted off me so she could strip off her boxers, the only piece of clothing she was wearing, before straddling me again, knee walking up until her sex was right above my face. \"No complaining. Get to it.\"\n\nI stifled a laugh, like I would ever complain about a chance to eat Mitch out. I wrapped my arms around her thighs and pulled her down to my salivating mouth and buried my tongue in her. I sighed as I let her flavor wash over me. It'd only been a few days, but damn.\n\nMitch's fingers ran through my hair as she looked down. \"Did you miss me?\"\n\nI stared up into her eyes. \"Mm-hmm.\"\n\n\"Ooh, I liked that. Can you do that again?\"\n\nI pulled her clit into my mouth and started to hum.\n\n\"Oh, damn, Cindy, that's, oh sweetie that 's so good, oh, gee-ahh...\" She started to grind herself against me, and I knew what I was doing was going over well. I decreased the intensity a little, wanting to drag it out some. I was having fun, too, after all. But eventually my desire to feel her come won out, and I pushed forward into the rhythm that I know would get the job done.\n\n\"Oh, yes, just like that, just, mm, a little, ooh, more, Cindy, wow.\" Mitch's spine arched, her head lolling back as my tongue swirled over her nub and her body began to pulse.\n\nI held her to me, giving her every moment of stimulation I could before she finally pushed herself away. \"Oh wait, no more, wow.\" I was grinning like the Cheshire Cat as she slid down my body until she could cover my lips with hers. I opened my legs slightly so her thigh would rub against my sex while our tongues twirled together. She did the same, her wetness gliding over my skin as we moved together.\n\nHer mouth moved to my neck, and I ran my nails down her back, making her moan into my skin. I rolled Mitch over, rising up on my knees and changing the angle so our labia were sliding over each other. I rocked back and forth, holding Mitch's leg up to my body. Mitch was staring up at me, wide eyed, and I smiled down at her as we moved together. Slowly my pleasure built, and I began to moan and sigh, my eyes fluttering closed as my orgasm approached, and then it was on me as I spasmed against my lover.\n\nWhen I caught my breath and opened my eyes, Mitch was just staring at me. \"God, girl, that was the sexiest thing I've ever seen.\"\n\nIf I could have blushed through my flushed cheeks I would have as I smiled down at her and rested my cheek against her leg. \"Still think I'm sexy, huh?\"\n\n\"Cindy, you don't have any idea how beautiful you are to me.\" Mitch's voice was heavy with emotion, and her eyes, god, I didn't think anyone would ever look at me like that. My heart broke in my chest, and I was just overwhelmed by how much I loved the woman touching me. I did the only thing that made sense, easing down on top of her until I was wrapped in her embrace, our lips locked in a passionate kiss. Slowly she turned me over, so I could feel her gentle weight on top of me, my legs wrapped around her. We went from kissing to snuggling and back over and over, reveling in our closeness and intimacy.\n\nFinally we settled into our normal positions, me being the little spoon. \"So, I told Carl and Bridget about us.\"\n\n\"You did?\"\n\n\"Yeah. Well, they heard you when you came back into the room last time, so they had questions.\"\n\nMitch groaned and buried her face in my hair. \"Damn, I'm sorry.\"\n\n\"It was fine though, like the only bright spot of the whole weekend.\"\n\n\"That's good.\" She stroked my arm. \"See, maybe it won't go as badly as you think.\"\n\n\"I'm not worried about my sibs, Sweetie. But they did invite me down for a week after spring semester.\" I kissed the inside of her wrist. \"You could come with me.\"\n\n\"An extra week on the beach with you? Deal.\" She whispered in my ear, \"If it means I get to see you in a bikini.\"\n\nI laughed. \"You see me naked every day. I'm naked right now.\"\n\n\"It is not the same thing. I can't wait.\"\n\n\"Really?\" I turned in her arms, putting some sexy purr in my voice. \"Well, luckily it's still early. You don't have to wait.\"\n\nThere was laughter in Mitch's voice. \"Really? Round three?\"\n\nI ran a finger over her breastbone, pouting out my lower lip. \"Unless you don't want to.\"\n\n\"Oh-ho-ho, girl.\" Turns out she did want to. A lot.\n\n***\n\nWe had a repeat separation, and for a good deal longer, at Christmas. We spent most of December trying to contrive something that would let me come visit Mitch and her family for the holiday, but we couldn't come up with anything that would be less than extremely suspicious.\n\nAnd the last thing I wanted was to give Dad or Mom any additional reason to research my roommate and doubles partner. I'd mentioned Michelle's imaginary boyfriend, Jimmy, a couple of times in what I hoped were innocuous ways. But I was still scared every second.\n\nWe talked as often as we could, but it wasn't the same as being in her arms, and I had the hardest time sleeping without her, including several more nightmares. But eventually it passed, and we were back at school. The season was starting, and I fell easily back into the role of student athlete.\n\nLidke wasn't back this year. Not a surprise, as we all could tell how homesick she'd been. But there was a new girl on the team, and poor Mitch had to spend a few nights soothing my anxieties about being able to hang onto my spot. It lasted until I got on the court with this new freshman hotshot and took her apart. I'd been watching her for a week, diagnosing every weakness she had, and there were several, and when we played I was merciless in taking advantage of them, until she was literally screaming in frustration.\n\nIt was awesome. The coaches knew about her issues, of course, but some people won't listen to anyone until they're given a more practical demonstration of their shortcomings, which I was more than happy to provide.\n\nAs we approached our first match I got called into Coach Holiday's office, and to be honest I was a little nervous. Mentally I was trying to resign myself to the fact I may not ever be anything more than an occasional doubles player and unpaid assistant coach.\n\n\"Hey, coach. You wanted to see me?\"\n\n\"Yeah, have a seat. Just wanted to say thank you for working with Barbara.\"\n\n\"No problem. She's got a lot of talent.\"\n\n\"It wasn't just the playing, which was impressive by the way, it was you talking it all through with her after. Not everyone would do that with someone they're competing for a spot on the roster with.\"\n\nMy heart fell a little. \"Whatever's best for the team.\"\n\n\"Yep. And what's best for the team is you playing number six singles next weekend. Congratulations.\"\n\nI felt like all of the air had been sucked out of the room. \"Seriously?\"\n\n\"Cindy, I don't play favorites. If you give us the best chance to win, then you play. And you do. Michelle is playing number five, and Carrie will be on the number three court for now. I'm keeping you and Michelle at number three doubles.\"\n\n\"Um, thank you.\"\n\n\"I told you, it's not a favor. See you at practice.\"\n\nI managed to stumble out of the office, where Mitch was waiting for me at the locker room entrance, a huge smile on her face.\n\nI could tell at first glance that Coach had already let her know, and she was beaming. Emotions roiled up through me, and I felt tears sting my eyes, stumbling forward until I was in her arms.\n\n\"So proud of you, baby. You deserve it.\"\n\nHeather walked past and patted me on the shoulder. \"Congrats, Spencer.\"\n\n\"Thanks.\" I said it without separating from Mitch. Our relationship wasn't a secret from anyone on the team. In fact, according to the rumor mill we weren't the only couple on the team this year.\n\nAfter practice Carrie, Mitch and I all went out to celebrate at the local Chinese buffet. I texted my brother to let him know my news. At least he would be happy for me.\n\nCarl -- Congratulations! When's your first match?\n\nMe -- Next Saturday.\n\nCarl -- You going to tell Mom and Dad?\n\nMe -- They don't care.\n\nCarl - You should tell them anyway.\n\nI let it drop, but Mitch was looking over my shoulder. \"You really aren't going to tell your Mom and Dad?\"\n\nI shook my head, my general good mood rapidly dissipating.\n\n\"Okay. Hey, Cindy, guess what?\"\n\nI looked back at her, where she was staring at me wide eyed and biting her lip like a kid in a candy store. \"What?\"\n\n\"You're playing singles for The University of Georgia.\" She popped her eyebrows at me, and I was only able to hold off a giggle for a second or two.\n\nLater that night, though, as we floated on our post-coital cloud, Mitch asked me again about phoning my parents..\n\nI sighed, \"What do you think I should do?\"\n\n\"I think you should make them make the decision. If they want to be shortsighted, misogynistic jerks then that's on them. Don't do it for them.\"\n\n\"But, what if,\" I couldn't finish the sentence.\n\n\"Then it hurts, but you know you tried.\" She wiped a tear from my cheek and kissed me behind my ear.\n\nI nodded. I knew she was right, and they wouldn't come or even be congratulatory. And of course, if they couldn't get behind something like my athletic achievements, they were never going to accept my choice in a partner. Another tear slipped free, but the woman I loved pulled me close, and there was rest and peace in her arms.\n\n***\n\n\"Yeah, so, um, I'll leave tickets for you at the gate, if you want to come. Okay, call me. Love you both.\" I pressed the disconnect icon on my phone, breathing heavily. I looked around as college life passed by the bench I was sitting on. There were always people moving. I just sat and watched them for a moment, hoping that their lives were less complicated than mine.\n\nIt was Monday, and we were starting our first week of practice leading to a match, and the energy level was exponentially higher. One of the assistant coaches pulled me aside and told me to come into the film room after practice. I just nodded and went back to hitting with Mitch.\n\nI jogged up to the net after a few minutes, where Mitch joined me. \"Film room after?\"\n\nI nodded. \"Yeah.\"\n\n\"That's good, that means they have some tape on who you'll be facing. You love tape.\"\n\nI grinned. \"Yeah, I really do, don't I?\" I looked down for a second. \"I called them.\"\n\n\"Good. And?\"\n\n\"Left a message on the house phone. Told them the news and that I could get them tickets if they wanted to come.\"\n\n\"Okay, ball's in their court. Let's work on your backhand.\"\n\nWe stayed busy the whole week. The coaches gave me six different matches involving my opponent to look at. And I did. It was probably a good thing that it wasn't actual film, because I would have worn right through it. It kept me busy, and from wondering if I was ever going to hear back from Mom or Dad.\n\nI finally did on Thursday, a message from Mom waiting for me after Design got out. It was a cursory congratulations and the statement that they couldn't possibly get away this weekend. She didn't give a reason, but her tone had made it clear she was surprised I'd even asked.\n\nI played the message for Mitch once we were alone in our room, and she held me while I fought away tears. I don't know why I was upset; I knew they wouldn't come. I guess hope springs eternal. Once I'd settled down Mitch opened up my laptop and pulled up the tape of her Saturday opponent.\n\n\"Okay, so how do I beat this girl?\"\n\nThe answer to that question was to show up and hit the ball hard. There was no way the person we were watching could absorb anything like the power Mitch could throw at her. But it was the perfect distraction, and we went through the tape, breaking down her groundstrokes and serve. By the time I fell asleep, with the warmth of my lover nestled behind me, I was dreaming about my big day on Saturday. Mitch would be there, and that was all that really mattered.\n\n***\n\n\"You ready, Spencer?\"\n\n\"Yeah.\" I looked up at Danielle, our team captain. Nodding my head with what I hoped was a confident look.",
        "\"You'll do great. You've got this.\" I bounced up to my feet and shouldered my bag, heading out to the court to warm up. I had my head down as I walked out, trying to find my focus, but it didn't last long.\n\n\"Cindy! Woo-hoo! That's my sister!\"\n\nMy face split into an ear to ear as I heard Carl's voice, and I found them in the stands immediately. They were both wearing red Georgia shirts, Bridget's dark hair pulled back into a ponytail and through a ball cap and Carl's sandy blonde hair in its usual messy mop. I ran to the wall while they came down the steps, reaching up so I could take my brother's hand.\n\n\"You're here?\" My voice was stunned.\n\n\"Of course, we wouldn't miss it. My little sister's big day.\"\n\nI was just overwhelmed, and I just stood there, holding his hand, until I felt a presence beside me. I looked over my shoulder to see Mitch beaming at me.\n\n\"Hey, sweetie, this is my brother, Carl, and his girlfriend, Bridget. Guys, this is my Michelle.\" Mitch tipped her cap as they all said 'hi'.\n\nCarl looked back at me. \"Any chance of dinner after the match? My treat. Both of you. I'd like to get to know the woman who melted my little sister's heart.\"\n\nMitch answered for us. \"Absolutely.\" She turned to me. \"You ready to go get started, partner?\"\n\nI could feel my face harden. \"Oh, yeah.\"\n\nMitch and I only dropped a single game in our doubles set, which was a great way to get warmed up, but I'll admit my nerves returned in full force as the singles started. I began with the serve and promptly double faulted twice before being broken at love. I was down love - two before I could even blink, and I was feeling a little panicked as I prepared to serve in the third game.\n\nMitch had just finished a long first game and was switching sides when she jogged over. \"Hey. Focus. You've been waiting your whole life to play this match. Have fun. You've got this.\" She pumped a fist at me before heading back to her baseline, and I bounced the ball between my racquet and the hardcourt beneath my feet. Okay, no more trying to hit the ball through the wall. A good serve out wide, get ahead in the point, make her run.\n\nI checked that my opponent was ready and tossed the ball into the air, slicing it out wide. She got it back, but her return was short, and I had plenty of court to put it away. I closed my fist as I headed back to the baseline. This time I curved my serve into the body and she couldn't get around it, sending her return wide. I held serve easily, and I was off and running.\n\n***\n\n\"Geez, Mitch, that girl actually started cringing every time you served.\" There was a note of awe in Carl's voice.\n\nMitch sat back in her chair and swallowed the tortilla chip she was chewing. \"It was Cindy's idea. She was a freshman, and we didn't reckon she'd ever seen a serve as big as mine, so we decided that the first game I was going to hit every one as hard as I could right at her. Totally took her out of her game.\"\n\nBridget leaned forward. \"Didn't you hit her once?\"\n\n\"Twice.\" Mitch picked up another chip and dipped it into the bowl of salsa. \"First time was on my second serve of the match. It was awesome.\"\n\nI laughed and shook my head. \"You're terrible.\"\n\nMitch just grinned at me and slid her foot up my calf under the table, which caused me to giggle and pull away. When I looked up Carl was just beaming at me, and my cheeks blazed red, but I couldn't stop smiling.\n\nMy brother shook his head. \"Wow, Mitch, I don't think I've ever seen her like this.\"\n\nBridget looked at him. \"She never had a massive crush on someone as a teenager?\"\n\n\"No. She was always very clinical about her boyfriends. She'd just decide on one, like a pair of shoes.\"\n\n\"No I didn't!\"\n\n\"Uh-huh.\" Carl pointed at me. \"And she could, too, 'cause she was the prettiest girl in school, and she knew it.\"\n\n\"Well, honestly that didn't take much. It was a really small school.\"\n\nMitch was staring at me with amused incredulity. \"So you were the valedictorian and an athletic star. Were you the prom queen, too?\"\n\n\"No, I was not.\"\n\n\"She was the Homecoming queen.\" Carl gave me a wicked grin.\n\nMitch groaned. \"I can't believe I fell for a Homecoming queen.\"\n\n\"You?\" I leaned toward her. \"What about me? Look who I fell for.\"\n\nMitch shrugged. \"Of course you did. Good girls always go for the bad ones. Didn't you ever watch 'The Breakfast Club'?\"\n\nLuckily the waitress arrived with my Arroz con Pollo, which looked amazing. Mitch's dish, on the other hand, \"What is that?\"\n\n\"Camarones a la Diabla. Shrimp in a spicy sauce. See, you take a tortilla, add some shrimp, beans, rice,\" she bit into it, \"yummy.\"\n\n\"You know I'm not letting you kiss me tonight if you have spicy shrimp breath.\"\n\n\"You aren't, huh?\" She leaned toward me, and I giggled like a schoolgirl, raising my shoulder to playfully fend her off. Laughter sounded from the other side of the table and I remembered where I was and who I was with. I looked up, blushing furiously, to see Bridget giggling.\n\n\"You two are adorable.\"\n\n\"Sorry.\"\n\n\"Don't apologize, sis. I think it's great. Honestly I always worried about you.\"\n\n\"Me? Why?\"\n\n\"Because of what I said. Clinical. Love isn't a transaction. It's instinctual, primal. I was afraid you'd never let someone just make you happy.\"\n\nI giggled at him. \"Yeah, 'cause you're such an expert.\"\n\nWe kept digging a bit at each other, but to be honest it meant the world to me that Carl and Bridget were there, that they accepted me, and that they cared. Carl and I had never been super close, especially given our six-year age difference, but he'd always looked out for me. I remembered my second day of Kindergarten. My mom had taken me the first day, but the next morning I was on my own. At least, until Carl, then a manly fifth-grader, had taken my hand and walked me to my room. He'd sat by me on the bus and made sure I got there safely every day for the first two weeks, until I was confident enough to do it myself.\n\nDon't get me wrong, he always complained and whined when I tried to tag after him and his friends, or when mom made him keep an eye on me. But when I really needed him, I guess he'd always been there. And he still was.\n\n***\n\nOur first road match came a few weeks later, and the whole way there Mitch was dropping not so subtle innuendos about getting to spend the night with me in a queen size bed.\n\nI leaned against her and lowered my voice as the team bus rolled down I-20 toward Tuscaloosa. \"You realize we do have a match tomorrow. We'll have to conserve some energy.\"\n\n\"We didn't conserve any energy last Friday night.\" Mitch shot me that wicked little look that made me tingle inside.\n\n\"Yeah we did. I don't know about you, but I could have gone again.\" Mitch laughed and put her arm around me as I continued. \"We made up for it after the match, though.\"\n\n\"Oh, yeah.. You were an animal.\"\n\nI ran my finger up her arm and down her side. \"You have that effect on me. Can't get enough.\"\n\n\"Oh, baby.\" There was a purr in her voice and I leaned back for a kiss. We didn't hold it long, seeing as we were surrounded by our teammates, but I settled into her arms without any embarrassment and let the hum of the road lull me to sleep.\n\nWe hadn't hidden our relationship when official practices had started. In fact, I found out pretty quickly that I was the only person on the team who hadn't realized Mitch was sweet on me by the end of last year. And no one, it seems, was surprised that I had eventually succumbed to her charms. What really shocked them was that Mitch had so easily settled into a relationship, and she endured the requisite ribbing that came her way. Her responses were always her, loud and bombastic, but never dismissive, never hinting that our relationship was anything less than everything she ever wanted.\n\nSo no one batted an eye when we cuddled on the bus. They were more interested in talking about Heather and Justine, the new girl from Europe. Sparks had been flying there that were likely visible from space. Mitch told me they were a firecracker, going to burn bright for a second and then explode. I still didn't understand how she knew these things, but I'd learned to trust her.\n\nWhen we got to the hotel and received our room assignments Mitch and I somehow refrained from running towards the elevator. Once inside our room Mitch closed and locked the door behind us as I looked at the beds. They were huge. I mean, it's not like I hadn't been in hotel rooms before, even hotel rooms with Mitch, but this was different.\n\nI was contemplating exactly how different it was going to be when Mitch wrapped her arms around me. \"What'cha looking at?\" Sex was dripping from her voice, and I had to fight back a shudder.\n\n\"The beds. They're so big.\" I leaned back against her, innocence filling my voice. \"What are we going to do with them?\"\n\nMitch kissed me below my ear and whispered, \"I have a few ideas.\"\n\n\"Yeah?\"\n\nShe scooped me up into her arms. \"Oh, yeah.\"\n\nI was carried to the nearer bed and laid gently down. I scooted back to the middle as Mitch joined me, and she pushed the loose, knee length skirt I was wearing up to my waist.\n\nShe planted kisses on my inner thigh, making me sigh. I lifted my hips so she could push the back of my skirt up under my butt, completely exposing my hips.. \"I love that you're wearing this.\"\n\n\"Did it on purpose. Wanted you to have, mmm, easy access.\"\n\n\"Minx.\" She didn't object, obviously, hooking her middle fingers around my white cotton panties, stripping them off with practiced ease. My legs spread, almost on instinct, as Mitch settled between them, and my head rested on the firm pillows. Her kisses moved up my legs and the tingle of my arousal became a heat. We were lying comfortably, corner to corner on the bed, with plenty of room. My head fell to the side as her lips closed over my sex, and I began to relax into the pleasure my lover was providing when there was a knock on the door. I stifled my moans and Mitch answered.\n\n\"Yeah!?\"\n\nOne of the assistant coaches' voice sounded on the other side. \"Team dinner in fifteen minutes, Conference Room B.\n\nMitch grinned. \"Got it!\"\n\nI looked down between my legs. \"Can you get the job done in fifteen minutes?\"\n\nShe didn't answer, just popping her eyebrows at me and bending back to her work. Turns out she was very good at her job, and I was wearing a dreamy little smile by the time we made our way down to dinner\n\nWe politely declined invitations to cards and movies in one of the other girls' rooms, and they didn't push much, settling for knowing smiles.\n\nIt was an amazing experience, being able to stretch out, really enjoy each other without worrying about sliding off onto the floor. It also somehow felt very adult, like we weren't just kids fooling around, but real partners making love.\n\nWe didn't go for too long, though, what I'd said on the bus was true. But my body still felt like Jell-O as we cuddled in post-coital bliss.\n\nI nuzzled into her neck. \"Think the hotel would notice if we smuggled this bed back to campus?\"\n\n\"Probably, but we could try. Strap it to the top of the bus.\" I giggled and kissed her neck while she ran her fingers through my hair. God that felt amazing. \"Still, there could be options.\"\n\n\"Mmm, like what? You think they have dorm rooms with queens?\"\n\n\"No.\" Mitch's voice was serious, and I knew she wasn't kidding around. \"But they have apartments.\"\n\nI opened some distance so I could turn and look at her. \"Are you serious?\"\n\nShe nodded, rolling onto her side facing me. \"Yeah. It'd give us a real bed, for one, and a kitchen. You have no idea how much I'd like to have my own stove and oven.\"\n\n\"Mitch, I don't have a car.\"\n\n\"I'll drive you. And there're plenty of complexes on campus bus lines. Students do it all the time.\"\n\nI wanted to say yes, so badly, but my practical, economical brain was whirling with all the obstacles. Money was first and foremost. Would an apartment cost more than the dorms? I'm sure the answer to that was yes, but by how much, I didn't know. Some of my scholarships could be used for something like that, but some others I wasn't sure about. And then there were my parents.\n\nMitch saw my hesitancy and misread it. \"If it's too fast...\"\n\n\"No, sweetheart, I'd love to. I really would. I love you. I just have to figure out the details.\"\n\nSome of those details cleared up two weeks later, when Coach Holiday called me into her office.\n\n\"I've pried free a quarter scholarship for you.\"\n\n\"Really? I thought...\"\n\nCoach held up her hand. \"Cindy, you're turning into as much of an assistant coach as you are a player. And I want the new ladies to know you're a scholarship player. It'll help with credibility.\" She gave me a little half smile. \"And it's not any of their business how much of a scholarship you have.\"\n\nI grinned back. \"Got it, coach.\"\n\nShe sat back. \"So, how are you and Kirkpatrick? Looks like you're getting along.\"\n\nI blushed and nodded. \"Yeah. We're great.\"\n\n\"Good. I stay out of my player's relationships unless they're causing problems.\" She glanced toward the locker room, where Heather and Justine had had their first public fight yesterday. \"Just be careful.\"\n\n***\n\n\"We can do it.\"\n\nMitch's face lit up, which made me smile. But it only lasted for a second. \"Good, so what's still wrong?\"\n\n\"Umm...\" I hemmed and hawed for a moment.\n\n\"Your family?\"\n\nI nodded, looking down. \"Look, we can afford a studio, maybe a cheap one bedroom, which has to be furnished. If my parents ever saw that, with only one bed, how would I explain that?\"\n\n\"Yeah, how could you explain it?\" There was disappointment and hurt in her voice, and I knew why. It was easy to explain. All I had to do was come up with the courage to tell my parents that I was in a wonderful relationship with another woman, one I loved dearly and made me sublimely happy, and that I was going to live with her.\n\nBut the revelation to my parents of any of these facts filled me with a bone deep terror. I felt like a coward, and my eyes filled with tears. Mitch closed her eyes and shook her head.\n\n\"Damn, Cindy, I'm sorry.\" I let her pull me into her arms and hold me.\n\n\"No, it's my fault. I should tell them.\"\n\n\"Yeah, but not until you're ready. And I don't think you are yet.\"\n\nI sobbed harder. Mitch just held me and stroked my hair until I stopped. She looked me in the eye. \"Cindy, I don't know what it's like to live in a closet. I never have. And I've got no concept of how scary it would be to lose a parent because of who you are. But I am here, and I love you, and I want to be with you, no matter what.\"\n\n\"I love you, too. I love you so much. I never knew I could be so happy. But...\"\n\n\"But what if?\" I nodded, and Mitch continued. \"Okay, what if? Could your parents order you home? Pull you out of school? Are they paying for any of this?\"\n\nI shook my head 'no'.\" She was right. I was an adult, and my father couldn't stop me from doing what I wished. My father's name was on my savings account, but I could fix that. And I should, soon, just in case. But, other than a place to live during breaks, there wouldn't be anything they could do to punish me, besides them cutting me off, maybe taking me out of the will. Oh, and my insurance and phone. Mitch and I getting our own place would solve the first part. I would just have to decide if I could live with the rest.\n\n***\n\nMitch and I hunted for apartments in our minimal time off, eventually settling on a little one bedroom with a tiny six-foot square bathroom and a bedroom that could barely fit a queen mattress and two dressers, complete with a single, minuscule closet.\n\nBut the little living room could hold a couch and a desk and a small entertainment center for Mitch's TV, which she'd gotten last Christmas. The kitchen was actually decent sized, and it was furnished and within our price range.\n\nIf the landlord had any issues with two women signing the lease together he didn't show it, as long as we had the money. Luckily, Mitch's dad was happy to give us a small loan to cover first and last. The apartment we were actually renting wasn't ready yet, but all leases started in July, so we wouldn't be able to move in 'til then anyway.\n\nThe season continued, and I inked my spot in the roster at number six singles. If you've read Carrie's story on this site you know Justine and Heather's relationship imploded about two thirds of the way through the season, which got us all a talking to by Coach Holiday. I remember lying in bed with Mitch that night.\n\n\"That's never going to happen to us, right?\"\n\nMitch pulled me tight. I fit against her so well. \"No. They were a round peg in a square hole. We, my love, are made for each other. And I'm never letting you go. You're all mine, Cindy Spencer.\"\n\n\"Promise?\"\n\n\"Yes, I promise.\"\n\nGod, she made me feel safe, and adored, but never controlled. She made me a better, happier, more all-around person. I was more in touch with my emotions, and experiencing life with her made everything brighter, because she was larger than life. And by some miracle I made her happy. She'd given me her heart, even before I knew I wanted it.\n\nI hadn't forgotten Mitch's love language was physical touch, and I wanted to reciprocate what she'd just said, so I turned in her arms and rolled her onto her back. My lips found her neck, right in the spot she loved. I spent half an hour worshipping her body, moving slowly down until I had her firm nub between my lips, and she was shaking in orgasm. I did belong to her, and she belonged to me. We'd been together just over half a year, but my life no longer made any sense without her in it.\n\n***\n\nEventually the season ended with another SEC championship, and I'd lost only two matches all year. Mitch and I packed up her truck and headed to Savannah for our week with Bridget and Carl.\n\nWhat Mitch didn't know was that I had a little something in my bag that she'd never seen before. They took us out to Paula Dean's Seafood Restaurant, which was amazing, and the next day, which was a perfect, sunny eighty-five degrees, we headed out to the beach on Tybee Island. I wore a pair of knee length denim shorts and a grey tank top. That wasn't any big deal, it was what I had under it that had my heart racing.\n\nI had never owned a bikini in my life. My mother had absolutely refused the one time I'd asked for one when I was fifteen, and the swimsuit I'd ended up with would have been conservative for a grandmother. The day before we'd left I'd gone to the campus store where they had a selection of items, including bikinis. Of course, they all bore the Georgia logo in some form, and I settled on a black two-piece, with a string top with the 'G' on the left breast, and 'Bulldogs' in script at the waist.\n\nBridget and I spread out our blanket. Mitch was wearing a one piece and athletic shorts that framed her long, powerful body. She looked yummy, and I was pretty sure she was going to like how I looked, too.\n\nMitch looked over at me and nodded toward the shore. \"You wanna go down to the water?\"\n\n\"Sure.\" I striped off my top and shimmied out of my jean shorts, standing in the sun, smiling at my lover while her jaw hit the sand.\n\nShe was speechless, but Carl wasn't. \"Damn, sis, you look good.\"\n\nI smiled at him. \"Thanks.\" I was pretty sure he was right. I weighed about ten pounds more than I had when I'd gotten to school two years ago, and it was all muscle. My shoulders, legs, and butt were all way more defined than they had been. My tummy was flat and firmer than it ever had been. I felt strong.\n\nIn truth though, I'd always known I was attractive. The effect I had on boys made that clear. But now, seeing Mitch look at me with wonder in her eyes, for the first time I felt truly beautiful.\n\nOf course, my brother was no ogre, either, and he got an appreciative coo from his girlfriend when he pulled off his shirt, revealing an impressively muscled torso.",
        "Mitch let out a low whistle. \"Damn, Bridget, we are a lucky couple of girls.\"\n\nCarl looked at her funny. \"I didn't think you'd notice me.\"\n\n\"Why not?\"\n\n\"Well, y'know,\" Carl pointed at himself, \"guy.\"\n\n\"I'm not sexually attracted to cars, either, but I can tell when one looks good.\"\n\nEveryone laughed, and Carl responded, \"Point taken.\"\n\nIt was a wonderful day, swimming, laughing, throwing a Frisbee around. Eventually, though, we'd had enough sun and we decided to head back to Carl and Bridget's condo.\n\nWe stopped at a grocery store on the way and got ingredients for a pasta dish that Mitch promised to prepare for dinner. She and Bridget set to it, which gave Carl and me a chance to talk. I told him about the apartment, and that I had no intention in telling Dad or Mom about it.\n\n\"The real question is how do I get back without letting them know? I mean, if they step foot in the place, well, in the bedroom at least, they'd lose it.\"\n\n\"Okay, so how about this? The weekend before you go back, come down here. We'll make sure you get to school.\"\n\nI jumped across the couch and threw my arms around his neck. \"You are the best big brother ever!\"\n\n\"I know. I love you, sis. Really.\"\n\nI sat back, blushing. I've told you that our family wasn't big on displays of affection, public or otherwise. That was probably the most heartfelt thing Carl had ever said to me, and I was really touched. \"You're getting mushy on me.\"\n\n\"Cindy, do you know why Katie dumped me?\"\n\nI gave him a stare. \"You told me it was mutual.\"\n\n\"Uh-huh. I lied. She dumped me. Know why?\"\n\nI shrugged my shoulders. Katie had been my brother's girlfriend his last few years of college. I'd barely been in high school, and didn't have a clue as to what had actually happened.\n\n\"Because she didn't think I loved her.\"\n\n\"Did you?\"\n\n\"Yeah, I did.\" He sighed and sat back. \"But I didn't know how to show it. With Bridget I'm trying harder and I'm not taking anything for granted. I tell her I love her every day. I don't think we had the best role models regarding that.\"\n\n\"No, we didn't. But you can learn how. I did.\"\n\nWe spent the next fifteen minutes talking about the love languages, which he'd never heard of, and me describing how I'd had to come out of my comfort zone for Mitch.\n\nCarl snapped his fingers, pointing at me. \"Bridget is gifts. She has these little knick-knacks from all the trips her dad took. He'd always bring her something home And she's always buying little things for her friends and family. And me. Damn,\" he looked thoughtful, \"I didn't realize they meant that much to her.\" He grinned at me. \"Look at you, being all wise.\"\n\n\"I have my moments.\" We paused as we heard our girlfriends laugh about something from the kitchen. \"And she's worth it. More than worth it.\"\n\n\"This isn't a passing fad, is it, Cindy?\"\n\n\"I'm gay, Carl. You were right about what you said before, about guys. I'd just pick one. I didn't need them, or even want them. Just felt like I had to have one, 'cause everyone else did, y'know? But her, the way she moves, her smile. I'm so into her I can't even think straight. Being in her arms, it's heaven.\"\n\nCarl laughed and shook its head. \"I'm really happy for you, sis. And you know you've got us, right? We're in your corner?\"\n\nA tear stung my eye just as Mitch poked her head back into the living room. \"You guys going to come get some of this? 'Cause if not, more for me.\"\n\nHow I hadn't noticed the aromas filling the condo is beyond me. I could smell the Cajun spices and parmesan cheese, and I floated into the dining area. Mitch set a plate in front of me with a beautiful presentation of pasta and chicken. I remembered when I'd first known her, she'd told me she could fix me something that would make me weep. Well, I can't say that I shed tears, but damn, it was good. I could get very used to this.\n\nEveryone was impressed, and by the end of the meal Carl was eagerly toasting my taste in partners, if you'll pardon the pun.\n\nI still look back on it as one of the best weeks of my life. Mitch and I went to the beach several times, we went snorkeling, we walked around historic Savannah. The one thing we didn't get to do much was make love, as I was very hesitant to do so just on the other side of a wall from my brother.\n\nUnfortunately the week did pass, but Carl and Bridget had one more gift for us. After taking us out to dinner Saturday night, they surprised us with a night in a local hotel. It wasn't a real expensive room, but it was private, and it was ours.\n\nI couldn't comprehend that this would be my and Mitch's last night together for months. Whenever I thought about it I'd start to panic, so I just put it out of my head as much as possible. And nothing could drive an unpleasant fact away like Mitch's touch.\n\nAs we rode up the elevator to our room on the fourth floor I had this thought that once we got into the room Mitch was just going to take me. I wouldn't have minded in the slightest, in fact I was kinda looking forward to it, but that wasn't what happened.\n\nInstead Mitch went to the nearest dresser and set her phone down. She pressed the screen a few times and a lovely instrumental piece began playing. She turned back toward me, her gorgeous blue eyes shining with emotion while a mischievous smile played on her lips. \"Dance with me?\"\n\nI kicked off my conservative two-inch heels, restoring our natural height difference, which I loved, and went into her arms. My head rested on her shoulder as her hands caressed up my back, and I breathed in the light scent of her cologne as we swayed to the music, our bodies melding together beautifully.\n\nIt was perfect, and I let myself just sink into the embrace of the woman who loved me. After several blissful minutes I felt her lips feather against my temple, and I turned my face to accept her kiss, which was soft and gentle and glorious. My whole body thrummed in pleasure with every beat of my heart, and I wrapped my arms around her neck as our tongues danced and swirled.\n\nHer hand moved to my sides, lowering the zipper on the yellow floral surplice dress I was wearing. She broke our kiss, stepping back as she pulled the cotton material off my shoulders. Her eyes took me in as I shrugged free from the garment, letting it pool at my feet.\n\nI reached up and began undoing the silky black button down Mitch had on. She rested her hand on my hips as I worked, not hurrying me along, letting me enjoy slowly revealing her lean, powerful body to my hungry eyes.\n\nOnce unbuttoned I tugged the material free from her jeans, and she rolled her shoulders to get it off as I ran my hand up her sides, making her shudder. I leaned in and kissed her neck, working my way down her shoulders. Her hands were on me again, and I felt the tension in my bra release, which I shrugged to the floor. Two could play at that game, and I pushed her arms up over her head so I could strip off the black sports bra Mitch was wearing, letting her small, firm B-cups bounce free. I took one into my mouth, swirling my tongue over the hard tip.\n\n\"Oh, Cindy.\" She nuzzled her face into my hair as I continued, softly holding my head to her chest as I suckled one breast, and then the other. After a few lovely minutes Mitch's breast popped free from my mouth as she scooped me up into her arms. I seemingly floated across the short distance to the king sized bed, where Mitch laid me gently down.\n\nI scooted to the middle, eyes wide as Mitch climbed onto the mattress and crawled after me, covering me with her body as her lips found mine. It was so familiar, but so exciting at the same time. My body knew what was in store for it, and it began making itself ready, wetness spreading under my panties as my core rubbed against Mitch's jeans.\n\nMy lover's mouth soon moved to my neck, and began its slow, sensuous journey down my body. I knew this would be the last time I felt like this for months, and I was determined to enjoy every second. Mitch was taking her own sweet time, but I was in no hurry for it to end.\n\nAfter a blessed eternity she reached the waistband of my white cotton panties, and my hips lifted instinctually so she could strip them away. I felt my desire wet against my skin, but Mitch didn't take advantage immediately, instead choosing to softly make love to my legs with her hands and lips, starting at my foot and working down my calf and over my incredibly sensitive inner thighs.\n\nOne, then the other. By the time she finished my sex was screaming for attention, my hips lifting towards her glorious mouth. First there was one kiss on either side of my core before she settled between my legs, arms wrapping around my thighs, and pushed her tongue into me, making my world dissolve into pleasure.\n\nShe was a goddess, and I the mere mortal upon whom she'd chosen to bestow her blessing. Her tongue danced and swirled, my orgasm approaching as she flicked and licked my clit. And as she took the little nub into her mouth, ecstasy wrapped me in its arms and rocked me back and forth, pulsing into my fingers and toes as I came and came.\n\nTwo fingers slipped inside me, expertly caressing that magic spot on the front wall of my vagina as Mitch rolled my pearl between the folds of skin surrounding it. This new and different sensation had me spinning back into the heavens again, and when I came down, her mouth closed around my clit for another, while her fingers pushed deeper, stroking in and out.\n\nIt went on like that for so long, over and over, until I needed her mouth on mine so desperately that I sat up, pushing her away from my sex so I could sit up and kiss her. I could taste myself on her lips, something I'd long since stopped caring about. Still, she tasted so much better than I did, and I wanted my turn.\n\nI pulled her over me, letting her straddle my face. The aroma of her arousal filled me, and my mouth watered in anticipation as she settled in. I buried my tongue as deeply into her as I could, making her moan and throw her head back. I gazed up along her body, long and lean, modest breasts swelling from her chest, all moving gracefully above me.\n\nMy eyes closed as I listened to her sigh, and I concentrated on her incredible taste. I held my tongue out flat and let her just grind against it until she came, shaking and trembling against me as she grasped the piece of wood glued to the wall pretending to be a headboard.\n\nShe slid down, wrapping me in her embrace, and we kissed for a long moment, but I wasn't done. I wanted to explore every inch of her incredible body, and I rolled her onto her back so I could do just that. For the next half hour I just enjoyed her. Her neck, her breasts, her toned abs, the length of her gorgeous, powerful legs, I worshipped every piece of her, committing it to memory.\n\nWhen I finally settled between her legs Mitch let out a contented sigh, visibly relaxing into the bed, giving herself to me. My lover was so high energy, always in motion and vibrant with everyone. I think I was the only person who ever got to see this side of her. I was so humbled that she felt safe to relax into my care, and I desperately wanted to make her happy.\n\nIf the steady moans from the top of the bed were any indication, I was succeeding, and Mitch pushed her body against my mouth as her orgasm claimed her.\n\nI knew she enjoyed looking at me when we made love, so when she stilled I crawled up her body, pulling her left leg up to my chest, draping my right over her hip and pressing my pussy to hers. I was on my knees, rising above her as we found our rhythm, and Mitch's blue eyes were wide, drinking me in. Our fingers intertwined as I moved, and the intense desire for me radiating from my partner's gaze was the most erotic thing I'd ever seen.\n\nSomehow our orgasms arrived together, and I collapsed into her arms as we kissed and held each other as close two people could.\n\nWe made love until after midnight, cuddling and resting in between sessions, but then going again as soon as we recovered our strength. I never wanted it to end, but eventually it did, and for the last time for months I slipped into dreamland safe in Mitch's arms.\n\nEND CHAPTER THREE\n\n*************\n\nThanks for reading, rating and commenting. Your comments mean so much to me. Please feel free to send feedback, as well, I read it all and I try to respond to questions if you include your email.\n\nI've had a couple of people send negative feedback regarding what they perceive as inconsistencies between Cindy here from in 'The Tennis Star', particularly when she states she liked sex 'fine' and that she thought she was 'relatively normal.' The fact is when she arrived at college she did think those things. In high school her sexual experiences hadn't been bad. Nothing really good, but not bad. As she begins her relationship with Ethan, though, her body is beginning to rebel. She's finally met someone she is deeply attracted to, and it certainly isn't Ethan. Her heart's emotional turmoil and her body's refusal to respond to Ethan is their way of telling her that they want someone else.\n\nThey've also said why doesn't Mitch's vaunted Gaydar identify Cindy as a lesbian? The answer to that is it has. But how much easier is it to recognize when someone likes a friend of ours, than when they like us? And no girl has ever captivated Mitch like Cindy does. She's drawn to Cindy in a way she's never experienced before, and the cost being wrong about her new friend is so astronomical that she's not sure of herself, an odd feeling for someone so naturally confident.\n\nAt least that's my take on it."
    ],
    "authorname": "JCMcNeilly",
    "tags": [
        "lesbian",
        "romance",
        "college",
        "tennis"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/a-girl-named-mitch-ch-03"
}
{
    "title": "The Summer of Moira June",
    "pages": [
        "\"Are you sure this is a good idea?\" my mom wondered.\n\n\"It's only for a few months,\" I reminded her, throwing the last of my suitcases into the back of my Jeep and closing the trunk.\n\n\"After everything you've been through this year maybe you should stay close to home.\"\n\n\"I need a change of scenery. Besides, it's not like I'm going to move to Vermont for the rest of my life.\"\n\n\"Promise?\"\n\n\"I promise.\"\n\nIt was the summer of 2000, a time which was an entirely different world in some ways but also can seem like only yesterday. It was a once in a thousand years calendar change that had everyone contemplating whatever it meant even if the answer was nothing at all. For me, however, it would always have only one meaning. It was the summer I met Moira June Hathaway.\n\nIt is funny how the most random events can change your life. It started when my friend Gary got the sudden chance to teach drama for a summer program in Oregon. He took the opportunity, which meant the apartment he'd rented for the summer in Vermont was empty. It also meant the lady he was supposed to work for in her bookstore there was going to be short handed.\n\n\"Why not take the apartment and the job?\" he told me over the phone.\n\n\"I don't know,\" I said.\n\n\"You've got nothing going on. Besides, the apartment is paid for. You can work at the bookstore a few days a week and work on your thesis in peace.\"\n\n\"The job would be mine, just like that?\"\n\n\"She's my mom's cousin. Trust me. I'll talk to her. It'll be fine. Think about it, will ya? After everything you've been through, a change of scenery for a few months will do you good.\"\n\nThat seed he planted in my mind, \"a change of scenery\", grew quickly.\n\nI couldn't stand everything around me. Wherever I looked were too many memories that evoked too much pain. The idea of escape, however fleeting, held a lot of appeal. So two hours later I called him back and said I would do it. Two days after that I was packing up my old Jeep Cherokee for the ride up to New England and promising my mom I wasn't permanently moving to Vermont.\n\nFive and a half hours later I found myself pulling off the interstate and a few miles further on was the town of Glensboro. It was everything you'd expect, looking every bit like a Vermont postcard.\n\nThere was a large lake at one end of the town, deep green mountains in the distance, and a long main street lined with shops and restaurants. Next to the lake was an ancient stone mill that now housed a yoga studio and a coffee place. I also noticed what had once been an august-looking bank was now a pizzeria. It was a nice town, scenic and quaint but lively. A steady but not overwhelming stream of tourists drove the economy, hikers in the summer followed by leaf watchers in the fall and skiing in the winter.\n\nI spotted the sign - \"Hathaway Used Books\" - and pulled around back and parked. It was in an old Victorian house and the first floor was packed with room after room of old books. It was the type of store people wander in not looking for anything in particular and leave with armfulls of treasures. Upstairs it was divided into two apartments, one of which was where I would be staying.\n\nThe front door was propped open, flowerpots on either side overflowing with color. Inside, the front room was packed with books from floor to ceiling, rooms opening up to either side. The front desk was nearby but no one was at it. My eyes scanned the collection of history books.\n\n\"Good afternoon,\" said a woman's voice from a room beyond the front desk. Whoever it was had stepped into the room.\n\nI turned towards her voice and that was the first time I saw Moira. I think I hid my surprise well but she took my breath away.\n\nShe was in her late twenties - twenty-nine, I later learned, six years my senior - and also very much my type.\n\nMoira was a rare beauty. She had long, curly strawberry blonde hair and emerald green eyes that were enhanced by her funky horn rimmed glasses. She was a few inches shorter than me and looked stunning in the simplest of clothes, a pink t-shirt and dark grey yoga pants. Yoga pants were her thing, I soon learned, and they clung to her gorgeous big hips in wondrous fashion. So did her shirt, underneath which one could see were large, full breasts. She was every bit the kind of big beautiful woman I'd always preferred.\n\n\"Hi,\" I managed to say. \"I'm Geno.\"\n\n\"Hi Geno!\" she said, smiling. I enjoyed the way her eyes scrunched up almost into squints when she smiled. \"I'm Moira, Moira Hathaway. We've been expecting you.\"\n\nWe shook hands and I'm sure I was grinning like a goofball. I was never good at hiding what I was feeling but I did my best not to embarrass myself.\n\n\"My mom said you'd be arriving today,\" she said. \"That was who you spoke to on the phone. She's out right now but I can get you settled in. I'm so glad you'll be able to help us out. How was the drive up?\"\n\n\"Good. It was good,\" was all I managed.\n\n\"New Jersey, I think my mom said.\"\n\n\"Yup, New Jersey,\" I said.\n\n\"Well, let me show you around and get you settled,\" she said and led me on a quick tour of the place.\n\nMoira showed me the entire store and introduced me to Jack, an older man who worked in the store a few days a week and lived down the street with his partner Robert. I also met Shakespeare, a large grey cat whose throne was an antique arm chair in the corner from which he slept and kept watch over this kingdom.\n\n\"He's the real boss around here,\" Moira said. \"Not my mom.\"\n\nMoira asked Jack to watch the front desk while she showed me the apartment. It was accessed via the back door and a staircase. Within was a small but nice space, uncluttered and clean. There was a small living room, a tiny kitchen that wasn't really its own room, a bedroom overlooking the main street, and the bathroom. It was furnished simply but was clean and looked comfortable.\n\n\"What do you think?\" Moira asked.\n\n\"It's perfect,\" I said.\n\n\"I'm so glad to hear that,\" Moira said. \"Well, let me give you your space to unpack and settle in. I'll be downstairs for the next few hours if you need anything. I'm sure my mom will come up to say hello when she gets back.\"\n\n\"Thanks,\" I said.\n\n\"Don't mention it. I'm sure we'll be seeing a lot of each other.\"\n\nShe smiled again and left. For a second, I felt a spark of chemistry between us, something about the way she looked at me for a fleeting instance and then it was gone. I watched her go, admiring her ample ass and the way the yoga pants showed it off. I sat down on the couch and took a breath.\n\n\"Damn,\" I muttered.\n\nI took a moment to reflect. Meeting Moira, it was the first time in months I'd felt genuine attraction again. She looked a lot like Dawn, my ex-girlfriend, at least in terms of her physique. I closed my eyes, shaking my head. Whatever else came of this summer, however much I got done on my thesis, working with Moira was going to be interesting.\n\n****\n\nMoira's mom dropped in about an hour after I'd finished unpacking. She was a rather attractive lady in her fifties which told me where Moira got her looks from. She also shared the same sunny demeanor and made me feel welcome.\n\nThe work at the store was easy enough. They had an immense inventory of science fiction paperbacks from the fifties through the seventies which Moira's mom had purchased from an estate sale. It was gigantic, with double and triple copies of thousands of titles. My task was to catalog them and put them on eBay for a wider market. I'd also help out manning the front desk but mostly it was quiet work on my laptop while classic rock played over the radio in the store. The store didn't open until eleven and so I didn't have to get up early and was usually done by six. I wasn't making a fortune but it was the change of scenery I wanted and, besides, I was making slow but steady progress on my thesis.\n\nMy thesis! I had started to wonder what was the point and thought about dropping out of the Master's Program entirely. After what happened with Dawn I was empty inside and stayed that way for six months as my thesis went ignored. At least away from New Jersey I could think about something else for longer stretches at a time. And a lot of those thoughts were about Moira. It was exciting. Was she even single? I had no idea.\n\n\"Hey, Jersey,\" Moira said one afternoon a few days later as she arrived at the store. \"What's up?\"\n\n\"Not much,\" I said, trying to sound nonchalant and hoping I wasn't coming off as phoney. She was wearing a long-sleeved Grateful Dead concert shirt and light grey yoga pants with bright red converse sneakers and looked her usual amazing self. Her hair was in a ponytail.\n\n\"How are you settling in? Do you like it around here?\"\n\n\"I do,\" I said. \"It's a lot different than New Jersey.\"\n\n\"I bet.\"\n\nI started to get to know Moira a little better over the next few days. She'd gone to college in Boston, then came back home to Glensboro. She taught first grade down the road one town over and worked in the bookstore in the summer. She was interested in books, hiking, and had a fondness for old movies. There was no mention of a boyfriend. I thought about asking her but waited. I was afraid that would make things awkward, especially if it came off weird. So I held off and wondered until a few more days had passed.\n\nMoira's mom had left on a trip to an island off the coast of Maine for a few weeks with friends. Jack, too, was busy with family obligations and so it was mostly Moira and I alone at the store. I was fine with that.\n\nWe were going through a large box of books someone had left on the back porch as a donation to the store. People were constantly doing that. They'd clean out their attics or whatever, find a pile of old books, and figure we could use them. Mostly, it was junk but sometimes there was stuff worth putting out on the shelves.\n\n\"So, tell me something, Jersey,\" she said. \"You never talk about yourself. What're you doing up here in Vermont all alone? Don't you have anyone back home that misses you?\"\n\n\"Well, there's my mom. And my little sister, but she's sixteen and going through a phase where she hates everyone. So, just my mom.\"\n\n\"No girlfriend?\"\n\n\"Not right now,\" I said. I risked giving her a glance and saw it returned with a smile.\n\n\"I'm surprised at that,\" she said.\n\nMy mind was racing, This was definitely flirting, there was no question. I tried to formulate something suitably witty to say but my mouth plowed straight ahead without thinking in my typical fashion.\n\n\"What about you?\" I heard myself saying. \"Boyfriend?\"\n\n\"No,\" she said. \"No one right now. It can be tough in a town like this. You know almost everybody and have all your life. How do you even meet someone new when no one is new?\"\n\n\"Well, some people are new,\" I offered.\n\nShe smiled at me and I said no more. I figured I'd gone far enough for one day.\n\nThat evening I had a quick dinner in the apartment and I tried to work on my thesis but couldn't concentrate. Moira kept intruding on my thoughts. I finally closed the laptop and went for a run. Back at the apartment, I took a long shower with the water turned up as hot as I could take. Afterwards, I toweled off and slid into bed naked. I was horny to the point of distraction and there was only one thing to do about it.\n\nI closed my eyes, letting the images flow. My cock grew hard as I began jerking off, slowly at first.\n\nI thought about what it would be like to feel Moira close to me, against me, what it would be like to kiss her. Yeah, to kiss her hard and feel her lips. Her tongue. Her big tits exposed, shoved against my face. Sucking her nipples. Fuck, yeah. And sliding off her yoga pants, feeling the size of her ass in my hands. Damn, that's nice. Now her on top of me, kissing me and moaning. Then bouncing on my cock, up and down. Faster now, breasts bouncing. Even faster and more intense. Her face turns upwards, towards the ceiling, hair spilling over her shoulders. My hands on her breasts, thrusting up into her. Frenzied passion, building, growing, rising...\n\n****\n\nMost of the next day a steady rain fell outside. I remember the patter of it all afternoon on the window. When Moira came in she was bearing a pair of coffees from the place located in the mill. She'd been making this gesture since almost my first day.\n\n\"Here you go, Jersey,\" she said, handing me the drink.\n\n\"Thanks, Moira,\" I said.\n\n\"It's pouring out there,\" she said, taking off her raincoat and hanging it up in the little closet behind the front desk. She was wearing a tie-die Beatles shirt and black yoga pants with sandals. She looked incredible.\n\n\"It's not supposed to clear up, either,\" I said. \"I was hoping to go for a run tonight, but I guess not. I was thinking of trying that pizza place up the street instead.\"\n\n\"La Cassaforte? Oh, I love it there.\"\n\n\"You should come with me,\" I said.\n\nThere it was, out there in the ether. I'd asked her out, without even meaning to when I started talking. Her response was quick, as if she'd been waiting for it.\n\n\"Sure,\" she said. \"That sounds great.\"\n\nThen, without thinking, I said, \"Then it's a date.\"\n\nShe smiled at me, her eyes flashing.\n\n\"I guess so, Jersey.\"\n\nThe rest of the afternoon passed slowly. All I could think about was that evening. It felt good to look forward to something again.\n\nWe closed at six and decided to meet back at the store in an hour so she could go home and change.\n\n\"It's a casual place, but not yoga pants level casual,\" she explained. \"See you in an hour, Jersey.\"\n\nIt was enough time to shower, get dressed, and start watching the clock. I tried to read but couldn't concentrate, going through the same few paragraphs over and over and then looking up to see how much time had passed.\n\nI went downstairs three minutes early as Moira was arriving. She wore an incredible purple dress with a v-neck covered in white polka dots and looked unbelievable.\n\nThe rain had eased up to a light drizzle and we walked together to the restaurant. It was one of those first date things, walking close together but not too close, wishing I could reach out and take her hand but it would be way too forward so resisting the impulse.\n\nLa Cassaforte was lively but not crowded. We got a seat by the window and ordered two beers and a pepperoni pizza. The waitress took our orders and left. I looked around a bit at the decor.\n\n\"This seems like a nice place,\" I observed.\n\nMoira caught my eye and a devilish smirk crossed her face.\n\n\"Okay, Jersey,\" she teased. \"Tell me more about you. You talk about a lot of things, but I want to hear more about you.\"\n\n\"What would you like to know?\" I asked.\n\n\"Let's start with your name, Geno Pantangelo. It sounds like a character from The Godfather but you look like, I don't know, a young Jack Kennedy..\"\n\n\"I'm named after my paternal grandfather,\" I said, smiling. \"He was Italian and married an Irish girl, my grandma Margaret. On my mom's side, they are all Irish. My middle name happens to be Colin, after my maternal grandfather. I am pretty certain I am the only person named Geno Colin Pantangelo on the planet. \"\n\n\"I believe it!\" She laughed. \"Irish, huh? So that must be where you got those blue eyes and boyish, aw-shucks charm.\"\n\nI shrugged, grinning and I suppose projecting that very charm. The waitress brought the beers and left again.\n\n\"What about this thesis you're finishing up? Machiavelli, didn't you say?\" she asked.\n\n\"He was a fascinating guy.\"\n\n\"I remember we had to read him in college,\" she said. \"Let me think. His whole thing was how it is better for a prince to be feared by his people rather than be loved, that he should lie and cheat and do whatever it took to stay in power.\"\n\n\"That's what you were told,\" I said. \"But, here's the thing. What if he was being sarcastic? I mean, the guy was a lifelong advocate for a republic, the opposite of what he wrote about. He campaigned for Florence to train its own citizens in the defense of the city. He even wrote a comedic play and was friends with Da Vinci. What if there was more to him than this, um, this caricature taught to undergraduates?\"\n\nShe smiled that quirky grin of hers again.\n\n\"What?\" I asked playfully.\n\n\"I'm just enjoying hearing you get so passionate about something, especially something intellectual. There's usually this air of, I don't know, sadness around you.\"\n\n\"This is good beer,\" I said, changing the subject.\n\nThe pizza arrived in due course and we talked some more. I told her about growing up in New Jersey and how my parents broke up when I was in high school and how I worked delivering pizzas for a few years. I told her about my friends and how easy it was to hop on a train to New York City and how people in New Jersey call it \"The City\" even though Philadelphia is not accorded the same honor. I told her about my dad having Giants season tickets and about a trip my family took to Ireland when I was in middle school and how cool that was. I started to feel a little self-centered but Moira kept insisting and asking questions.\n\nWe finished off the pizza and ordered another round of beers.\n\n\"So how did you like the pizza?\" she asked. \"I noticed you didn't say a word about it.\"\n\nI took a sip of beer and grinned, hoping my magical Irish charm would distract her. It didn't work.\n\n\"The thing is,\" I explained. \"People in New Jersey - especially North or Central Jersey - we are kinda particular about our pizza.\"\n\n\"So you didn't like it?\" she asked, her tone one of her disappointment for my sake..\n\n\"We have certain standards,\" I said. \"It was fine, though. Really. I'd love to make you pizza sometime, though. The pizza guys where I worked delivering, they taught me some things.\"\n\n\"You're on, Jersey. When?\"\n\n\"I'd say tomorrow, but you wouldn't want pizza two nights in a row.\"\n\n\"Actually, I'm good with tomorrow.\"\n\n\"Agreed.\"\n\n\"Okay, so it's settled. You'll make your pizza. I'll bring wine.\"\n\n\"Sounds great.\"\n\n\"There's just one other thing,\" she mused.\n\n\"What's that?\"\n\n\"You've told me about all sorts of things, but not one mention of any girlfriends. I find it hard to believe a guy that looks as good as you is on your first date with a girl.\"\n\n\"It's a bit of a rough subject.\"\n\n\"You don't have to tell me anything you don't feel comfortable talking about.\"\n\n\"No, it's all right.\" I took a deep breath. \"I should tell you everything. Yeah, there were girlfriends in high school and college. Then I met Dawn and we got really serious for almost two years. Then, out of the blue, she broke up with me. I never found out what really was the problem, but it was ugly.\"\n\n\"That's rough. I've been there.\"\n\n\"Yeah, well, there's more.\"\n\nShe nodded and I paused before beginning again.\n\n\"What happened was two days after the breakup she was driving and a truck ran a red light and, well, she was killed.\"\n\n\"Geno,\" Moira reached out and put her hand on mine. \"I'm so sorry. I can't imagine.\"\n\n\"Thanks. After that, I fell into a bit of a depression. No, that's not really accurate. I grieved, but wasn't depressed so much as, I don't know, empty inside.\"\n\n\"That explains the aura of sadness.\"\n\n\"It's gotten a lot better. I'm sorry for laying this all out on you like this.\"\n\n\"No,\" she said, adding firmly: \"You have no need to apologize whatsoever.\"\n\nWe finished and paid the bill. The rain outside had ended and we walked back to the store in silence.\n\n\"I have to say I hope I didn't put a damper on the evening,\" I finally said.\n\n\"Not at all,\" she said. \"I had fun. I appreciated how you shared that with me.\"\n\nShe reached over and took my hand in hers and we walked the rest of the way back. We reached her car and she turned to me.\n\n\"Tonight was great,\" I said.\n\nMoira pulled close and kissed me. It was a light kiss and I was surprised by how soft her lips were. For a brief moment I felt her body close to mine, her big breasts pressing against my chest.",
        "\"Thanks for everything,\" she said. \"Tomorrow?\"\n\n\"Tomorrow,\" I said.\n\nShe got in her car and I watched her drive away before heading back upstairs. I kicked off my shoes and sat down on the couch. Outside the rain began again and I reflected on how it made me feel. I decided it was a symbol of relief. For the first time in six months, I felt a measure of happiness again.\n\n****\n\n\"The key to pizza sauce is simplicity,\" I said. \"You don't need a million ingredients. So we start with the olive oil. Go ahead, pour it in.\"\n\n\"This much, huh?\" Moira asked. \"A whole quarter cup?\"\n\nI nodded.\n\nMoira shrugged and poured the oil into the Dutch oven.\n\n\"Now give it a minute to heat up,\" I said. \"Then we put in the garlic.\"\n\nMoira took a sip of her wine, then scraped garlic off the cutting board into the oil. We were in the little kitchen in my apartment, making due with the space we had and standing close together. Moira even had to bring over some equipment from her house so we could cook and I had to drive a few towns over to get the ingredients we needed.\n\nI glanced at her again. She looked incredible in a low-cut maroon blouse and dark blue jeans.\n\n\"Now we put in the tomatoes,\" I said, narrating my actions. \"We give it a stir. Then the salt and a punch of red pepper flakes. And that's it. Just let it simmer for, like, twenty-five or thirty minutes. It'll thicken up. Now we do the dough.\"\n\n\"Can I roll it out?\" she asked. \"I've never gotten the hang of that.\"\n\n\"Sure. I can help you.\"\n\nWe cleared out an area on the counter and I spread out some flour, then dumped the dough on top and punched it down into a ball.\n\n\"Ok,\" I said. \"You want to start by stretching it out with your fingers like this.\"\n\nI demonstrated for her and she gave it a try. I put my hands on hers and guided her fingers. We were so close I could breathe in the green apple scent of her body wash. She smiled and looked at me.\n\n\"Just like that,\" I said and stepped behind her. I reached around and took her hands in mine and guided them as I showed her what to do. \"Now you stretch it like this and keep turning it. Let gravity do the work for you.\"\n\nShe leaned back against me, I was sure teasing me on purpose. Her big ass pressed against my midsection and my arousal was immediate. She felt so nice in my arms, her ample softness and sweet smell all I could ever want.\n\nShe got the hang of stretching out the dough and I pulled back my hands and placed them on her shoulders.\n\n\"You've got it,\" I told her.\n\nShe turned towards me and looked up at me with a smile. I leaned forward and kissed her. It was more than a quick peck and she responded. Our lips pressed against each other for long seconds and then it was over, casual and natural and wonderful all at once.\n\nWe went through the rest of the process of making pizza, laughing and brushing against each other. We sipped wine and finally got the final product into the oven. I poured some more and set the table. It was tiny, barely big enough for two.\n\n\"Oh my gosh!\" Moira said, taking her first bite of pizza. \"This is so good. I can't believe we made this. You, sir, are full of surprises.\"\n\n\"I like to cook,\" I mused, sipping my wine. \"It's such a great way to be creative.\"\n\nMoira didn't say anything. She looked at me smiling.\n\n\"What?\" I asked.\n\n\"I'm getting a kick out of how many things you have such feeling for.\" She paused. \"You know, I'm not a woman to beat around the bush. I don't do bullshit.\"\n\n\"Okay.\"\n\n\"Just so you know.\"\n\nWe polished off the pizza along with the rest of the bottle of wine. We were standing by the sink clearing our places when something clicked. I still don't know who initiated it. I put the dishes in the sink and we brushed shoulders and the next moment we were all over each other kissing frantically. My arms were around her and pulling her tight against me as she pulled me closer and our lips joined. It was kissing like I'd never experienced. Intense. Hungry.\n\nAnd the feeling of her against me! There's a reason I've always liked big women. There is something about the size and softness of a girl like Moira pressing against me. The magnitude or her proportions were like an overflowing wave of femininity. I wanted to be overwhelmed by it.\n\nMoira pulled back after I don't know how long. Maybe it was a minute, maybe two. I couldn't say. She placed hands on either side of my face and looked into my eyes. Both of us were breathing heavily, Moira's breasts moving up and down under her blouse.\n\n\"Baby,\" she said. \"I know you've been through a lot. Are you sure you're ready?\"\n\n\"I am,\" I said. \"I want - I want to live again. I'm overdue.\"\n\nShe kissed me again, hard against my lips.\n\n\"Whatever you want, Jersey. Okay, I'm yours. Have at it, baby.\"\n\nI can only imagine the look on my face because she smiled as wide as anyone ever could and let out a little giggle. Then we were back to kissing, lips and tongues dancing ever faster and more frenzied.\n\nWe stumbled away from the kitchen, moving towards the bedroom as we kissed and our hands ran over each other. I put a hand on either side of her ass, savoring its bounteous size and the flaring curve of her hips. She squealed in response and grabbed my butt and pulled it against her.\n\nStill kissing, I worked my hands up to the front of her blouse and started unbuttoning. Then I slid the blouse off her shoulders and let it drop to the floor, still kissing her. She reciprocated, pulling up my shirt over my head. We broke off the fevered kissing, then fell into each other's mouths again.\n\nSomehow we managed to unbutton and unzip each other's jeans even as we were all over each other. I'd never been so turned on before. I wanted to devour her and be devoured by her. I'd never thought I would experience such desire again and now it was more than I could have hoped.\n\nOut of our jeans, I undid her bra and her tits were free. God, they were perfect, big and full and in proportion to the rest of her full figure. Next went her panties and my boxers and we were naked as we pressed against one another, hands roaming freely. My hands were on her breasts, then grabbing her big ass, then back to her tits. Hers ran over my shoulders and back and ass, and also grabbed my cock and helped stroke it to a straining hardness.\n\nShe pushed me backwards gently, until I was on my back on the bed. We kissed, tongues and lips a frenzy of lust.\n\n\"I have condoms in my purse,\" she whispered.\n\n\"I'll do you one better,\" I said, reaching for my backpack by the side of the bed. I grabbed out a condom and ripped it open.\n\n\"Allow me,\" Moira said. She slid it on my cock, leaning forward and kissing me again.\n\n\"God damn, I'm so wet,\" she said. She sat up, reaching down and fingering herself. \"I can't wait to get you inside of me.\"\n\n\"Get that pussy up here,\" I blurted out. I'd thrown all caution to the wind. \"Sit on my face.\"\n\nMoira pushed me flat on my back and slid up until her pussy was just above my mouth. It was a lovely pussy, neatly trimmed. Looking up, I took in her full nakedness: Her fat thighs and wide hips, her big tits and soft belly upon which those magnificent breasts rested upon. And there was her pussy, so enticing mere inches above. I lifted my head and licked it, exploring with my tongue. I soon located her clit and began working it, licking it firmly. She groaned loudly, giant breasts heaving above me. I spent a joyous five minutes or so performing cunnilingus flat on my back, Moira moaning and squealing the whole time. She was a giving lover even in the throes of receiving pleasure, though, reaching back and stroking my hard cock the whole time.\n\nI inserted a finger and then another into her pussy as I kept working on her clit.\n\n\"I can't take it anymore,\" she said. \"I'm ready to come.\"\n\nShe slid back down me and positioned herself over my cock, She reached down and guided it towards her pussy. She lowered herself on me, my dick penetrating for an inch or two before she backed off again. Then she plunged down on me and I slid all the way inside her as we both let out a groan.\n\n\"Oh, fuck,\" she moaned.\n\nMoira began bouncing on my cock, slowly at first but increasing with speed and intensity. I looked up and had never seen anything sexier: Giant breasts and a soft belly bouncing on my cock as my hands ran over her fat thighs and up to her tits.\n\nShe began moaning louder, bouncing harder and harder. I marveled at her strength and endurance, even as the bouncing grew more rapid and the moans became squeals. Squeals became screams.\n\n\"Oh fuck,\" she screamed. \"Oh fuck, oh fuck, oh fuck, oh fuck, oh fuck, oh yes fucking yes! I'm\n\ncumming! I'm cumming!\"\n\nMoira let out a prolonged howl which I'm certain they could hear across the breadth of New England. I felt her pussy clench repeatedly as she came, her wetness oozing over my cock.\n\n\"Oh fucking yes!\" she screamed.\n\nShe fell forward against me, kissing me hard. She'd inadvertently gotten into my favorite sexual position: Woman on top, leaned over against me. Her tits were resting on my chest and her belly against my own. I reached out and put a hand on each side of her ample ass.\n\n\"How bout you, baby?\" she asked. \"What do you want?\"\n\n\"You're perfect the way you are,\" I told her.\n\nI grabbed her ass harder, moving her back and forth on my cock. She understood at once, kissing me hard and leaning on me with her full glorious weight. We went that way until the rising sensation in my cock grew too strong to resist any more.\n\n\"I'm gonna cum,\" I moaned. \"I'm gonna fucking come.\"\n\nA few seconds later my approaching orgasm crossed the point of no return and the wave of pleasure broke against the beach of Moira. My cock throbbed as I thrust my hips against hers and sweet relief billowed over me. It was a strong orgasm, the after-throbs lingering until they finally subsided. We locked eyes and smiled, kissing again. This time the kisses were less maniacal and more tender and loving. She slid off my cock and lay next to me, her head resting on my chest and my arm over her shoulder.\n\nWe said nothing, holding each other in tender contentment.\n\n*****\n\nWe did our best to be coy the next day at the store, but to no avail. She brought me coffee, as usual, but there must have been something in the tone of our voices when we spoke to each other and the way we looked at each other which gave us away.\n\n\"Hold on a moment,\" Jack said, putting down a stack of new donated books he was on his way to shelve. \"What's going on with you two?\"\n\nWe looked at him in pretend befuddlement, as though we had no idea what he could be implying. But we couldn't help glancing at each other.\n\n\"I might've known,\" Jack said, shaking his head in feigned shock. But I noticed he gave Moira a look that expressed his happiness for her. I later learned she'd told him what a crush she'd developed for me.\n\nAfter Jack left, I looked at Moira and smiled.\n\n\"Do you have any plans tonight?\" I asked.\n\n\"I don't have any plans for the entire week. For that matter, I've cleared the entire month.\"\n\nAnd so things went ahead with us. We didn't define whatever it was. We were dating, you could say, but without ever formally saying we were. And we were lovers, from that day on, as well as ever-closer friends.\n\nI was happier than I thought I could be again, right from that first night together. It was about more than sex for me, even though the sex was so good. I enjoyed seeing her during the day at the store and wondering what she would be wearing while I glanced at the clock waiting for her to come in. I enjoyed her silly jokes and our stolen moments together.\n\nMoira read my thesis, too, offering thoughtful suggestions as to style and syntax. She also asked some probing questions which sent me off on new research avenues and made the final product stronger.\n\nIn the evenings we'd make dinner or go out, often watching the old movies Moira so loved. I got to appreciate Jimmy Stewart and Katherine Hepburn.\n\nWe also made love, at least four or five times a week. We were getting to know each other's bodies and what we liked and responded to and the best thing was Moira wasn't afraid to tell me what she wanted. It was refreshing, and a turn on.\n\nAbout a week after our first night together we'd gone for a long walk after dinner. July in Vermont can be the best, with the long days and verdant scenery. We must have walked five miles when an evening rainstorm moved in quickly and took us by surprise. We scurried back to the apartment, laughing and getting soaked. By the time we got up the stairs and through the front door we were drenched. I found a towel and dried my face then went to hand it to Moira.\n\nShe stood there saying nothing, breathing slowly and staring at me. She looked adorable, the lenses on her glasses covered in water droplets and her hair wet. She was wearing a blue v-neck shirt and dark gray yoga pants, all of it soaked through and clinging to her ample curves.\n\nI stepped closer to her, keeping her gaze. A grin crossed her face even as a droplet of water dripped down her cheek. I tossed aside the towel and reached up and placed my hand on her cheek. She closed her eyes, leaning her head against my hand.\n\nI kissed her, slow and deliberate. She responded eagerly, the pace of kissing gradually rising as my arms ran over her shoulders and pulled her closer. She had one hand on my arm and brought the other up to the back of my neck. Soon our mouths were manic in their hunger for each other.\n\nMoira reached down and pulled my shirt up and over my head.\n\n\"There's those muscles,\" she growled.\n\nWe stood there, stripping rapidly and kicking away our wet clothes until we were naked. I moved towards her to kiss her again and we fell into another embrace. Our bare, wet skin rubbed against each other, hands and mouths exploring each other. I kissed her neck and she moaned. She reached down and grabbed my penis, stroking it.\n\nMoira kissed me roughly and then dropped to her knees in front of me. Her hand remained on my cock, stroking it gently. She kissed the tip, gently at first and then again more eagerly. She licked her lips and took the head into her mouth, sucking strongly. Then she twirled her tongue around the head, wetting it with her saliva. I let out an audible moan and she took me into her mouth again, this time swallowing the entire head and part of the shaft. Back and forth her head went, one hand still gently stroking the base in rhythm with her mouth and the other cupping my balls. She began gently massaging them as she continued to suck. I began thrusting in sync with her sucking and it went on like that for glorious minutes. I could have easily cum if she'd continued but she eased up, jerking my soaking cock and looking up at me.\n\n\"You need to get this inside me,\" she said.\n\n\"Yes, ma'am.\"\n\nShe stood and led me by the cock to the bedroom. Then she turned and we kissed again.\n\n\"How do you want it in you,\" I whispered, grabbing a gigantic breast in each hand.\n\n\"Your choice, Jersey,\" she murmured.\n\nOne of my hands moved down to her pussy, even as we kissed and she kept jerking me off. I inserted a finger inside her and she moaned with delight. I moved it in and out and she squealed and closed her eyes as I got her wet.\n\n\"On all fours,\" I said.\n\nShe smiled and winked, backing off and then onto the bed. She turned her ass towards me and I fingered her again with one hand and stroked my cock with the other.\n\n\"Oh, god,\" she moaned. \"Come on, babe. Fuck me.\"\n\nI grabbed a condom, slid it on with one motion, and moved into position behind her. She reached back and guided the tip of my cock towards her pussy. I thrust myself into her, then backed off, then buried my dick all the way into her.\n\nI started thrusting and she responded, squealing and pushing back with her big ass against me. I reached down and ran my hands over her ample ass cheeks, savoring their breadth and substance. I started fucking her harder, my hands at the widest edges of her ass. It went on and she started groaning even louder.\n\n\"Oh, fuck,\" she said. \"Oh, fuck. That's it. Fuck me hard.\"\n\nI obliged her, pounding away at her pussy with abandon. I was thrusting like a jackhammer, almost growling with passion. Her moaning became incoherent, shrieking and squealing. When she suddenly became silent and breathed in, I knew she was cumming. I kept fucking her as fast as I could, her pussy contracting as she came. As if on cue, I felt my own orgasm approaching. It rose gradually and stayed there for long, delirious moments. Even as Moira was breathing out in relief as her own orgasm crested and then faded, mine rose in intensity until there was no turning back. The final rising of intensity arrived and I thrust my cock into her as deep as I could manage, holding it there as it throbbed with relief. As the pulsating pleasure faded, I gave her a few more gentle thrusts.\n\nI kept my hands on her ass for a few moments more, appreciating the experience before pulling out. I lay down on my back and Moira faced me laying on her side. We kissed and she rested her head on my shoulder. I enjoyed the feel of her against me and put an arm around her shoulder and pulled her tight. She wiggled herself against me, half-laying on me. The feel of her tits and belly were as nice a blanket as I could ever have.\n\n\"That was so fucking hot,\" she said a few minutes larer.\n\n\"Yeah.\"\n\n\"Up for another go-round?\" she whispered in my ear, then kissed my neck.\n\n\"Yeah.\"\n\n****\n\nMoira's mom came back from her trip the following week. She didn't act any different towards me, still pleasant and friendly, but Moira let me know she'd told her we'd been seeing each other.\n\n\"What did she say?\"\n\n\"Not much. I mean, she knows we're adults. I did tell her you were a great guy and she said she was happy and hoped it worked out.\"\n\n\"Well, that's good.\"\n\nThe next few weeks were as happy as the previous few. There was work, sure, but it wasn't so hard and, besides, seeing Moira in our daily interactions made the days fly. And there were fun times, on the days the store was closed or after work. We went on a picnic one day, another day visited a brewery. Another time we drove up to Burlington and walked around and got dinner.\n\nAnd, of course, there was tons of lovemaking. Usually it was in my little apartment above the store but sometimes it was in her place which was a more spacious apartment around the corner.\n\nThe first week of August, Moira announced she'd borrowed the keys to her uncle's cabin an hour north. The idea was to do some hiking and get away from everyone for a day. So we drove up after work. The cabin was at the end of a long dirt road and overlooked a beautiful, wide stream of clear water with a few boulders sticking out from it. It was a cute little place, just one floor and not much bigger than my apartment. I was relieved to notice the power lines which went along the dirt which meant the little place had electricity.\n\n\"Why does your uncle have this place?\" I wondered as we got out of the jeep.\n\n\"He's a writer and sometimes needs to work in isolation,\" she explained. \"And this place sure is isolated.\"\n\nWe enjoyed the rest of the evening there, making a simple dinner and sipping wine looking out at the water before going back inside and making love until we collapsed into each other's arms exhausted.\n\nThe next morning we got up early, had breakfast and then hiked the trail up to the top of the nearby mountain. Moira looked as hot as ever, wearing a white tank top, jean shorts, and hiking boots. Her hair was arranged in two long braids and she was wearing a red bandana. I couldn't stop looking at her.\n\n\"What?\" she teased as we got ready, packing lunch and water into our backpacks.\n\n\"You know what.\"\n\nIt was a good day. It took two hours to reach the top of the mountain, an expanse of bald granite affording an incredible view of the valley below and mountains beyond. We sat on the summit, ate sandwiches, and enjoyed the magnificence around us. Then we set off again, taking a different route back to the cabin which ran along the river. By the time we returned it was mid afternoon and surprisingly warm. We drank beer and soaked our bare feet in the cool mountain water as we sat atop a flat boulder.",
        "\"That water feels good,\" I said, \"I should have brought my swim shorts.\"\n\n\"Are you serious?\" she asked, laughing.\n\n\"What do you mean?\"\n\n\"Do you see anyone around?\" She stood. \"Swim shorts, indeed!\"\n\nMoira undid the front of her shorts and slid them down and off. I was delighted to see she hadn't been wearing panties. Then she pulled off her tank top and looked at me as she undid her bra.\n\n\"Well, Jersey, don't just sit there.\"\n\nI took a sip of my beer and put it aside. Then I stripped down and watched Moira slip into the stream. I joined her, enjoying the cool water washing away my sweat. I swam over to Moira and gave her a kiss and hugged her deeply. She wrapped her arms around me and pulled me against her.\n\nWe splashed around for a few minutes and then settled in.. I sat on a submerged flat stone and she sat in front of me, her back leaning against my chest. My hands started on her big thighs, then ran over her delightfully round belly. Then I cupped her breasts, buoyant in the water.\n\nI kissed the back of her neck. I could tell it excited her because of the way her breathing changed.\n\n\"God damn, I love your body,\" I whispered.\n\n\"I know.\" She laughed. \"I can feel your erection.\"\n\n\"Oh, but there's more.\"\n\n\"What's that?\"\n\n\"I don't just love your body.\" I paused, then dived in. \"I also love you. I've fallen in love with you, Moira.\"\n\nShe turned all the way around to face me. Her eyes were moist. She kissed me, hard and intense.\n\n\"I love you, too, Jersey,\" she said.\n\nWe pressed our foreheads together, holding each other as the water flowed over us.\n\nI don't think I'd ever been so happy and yet so full of dread. I was in complete love with this amazing, smart, talented, gorgeous woman. But I worried it was all coming to an end in a few weeks.\n\n\"Holy fuck,\" she said after a few moments. \"That was a big fucking deal! The whole 'I love you' thing. We did it, huh?\"\n\n\"We sure did.\"\n\n\"Come on,\" she said. \"Let's go inside.\n\nWe got out of the water, and went into the cabin holding hands. We towelled each other off, then fell right into a nude embrace, lips and tongues dancing. I playfully shoved her onto the bed and then climbed in above her. I kissed her roughly and then moved on to her neck. I slid down over her breasts, sucking her nipples. I spent long minutes slobbering over them as I reached down and started fingering her. She started moaning. I went back and forth on her nipples, sucking each with verve. She was moaning softly, her hands on my shoulders.\n\nI moved further down along her body as I inserted a second finger in her pussy. I kissed the soft expanse of her exquisite belly and it tickled her a bit, which I knew it would. She let out a little squeal and I moved further down.\n\nI withdrew my hand from her pussy and ran it along her thighs, first one then the other. Then I lowered my face onto her pussy. I gave it a long, slow lick from top to bottom, tasting her moistness and breathing in the aroma of her arousal. She moaned in response and I smiled.\n\n\"Damn, I love your pussy,\" I said.\n\nI began licking her again, finding her clit and. I found it and worked it with my tongue. Moira was moaning and gasping and I inserted my fingers again as I kept flicking her clit with my tongue. She kept groaning, louder now, her breath heavy. I could see the beautiful slope of her belly and beyond were her big breasts as the light from the window fell across them and they were like magnificent mountain peaks in the sun. I plunged in, relishing the opportunity to pleasure her. I wanted nothing more than to bring her to orgasm. So I fingered her faster even though my arm started to hurt, and kept flicking her clit with my tongue.\n\nShe suddenly inhaled deeply and gasped. I kept at it, licking her clit as hard as I could.\n\n\"Cumming, cumming, cumming,\" she squealed.\n\nI kept working her pussy and she started bucking and screaming as I felt her pussy contracting on my fingers. Her orgasm gradually subsided and I slowed down. I pulled back, reaching for my backpack and putting on a condom.\n\n\"Oh god, baby,\" she moaned. \"I am so happy right now. What about you, sweetie? What's going to make you cum?\"\n\nI climbed on top of her, gazing into her eyes. She smiled knowingly and put her hand on the back of my neck. She lifted up her head and kissed me hard. I lowered myself onto her, guiding my penis into her vagina. She gave out a moan as I slid it into her still dripping wet pussy. I started fucking her, nice and slow. She wrapped her arms around me and pulled me close to her and we kissed deeply, enjoying the ride together. I sped up, our mouths still locked.\n\nIt was all so perfect. I was pounding her pussy and her big thighs were wrapped around my waist, her giant tits and fat belly pressed against me. I ran a hand over her gigantic breasts and we were kissing the whole time. I was pounding her with all my energy, trying to fuck her as hard as anyone could be fucked. I buried my head against her neck, kissing it throughout, as she began groaning and then howling.\n\n\"Oh, baby, fuck yeah,\" whe wailed. \"Holy shit. That's it, babe. Fuck me. Fuck me. Fuck me. Harder, baby, harder. That's it. Harder. Fuck me hard. Fuck me hard.\"\n\nI kept pounding away, lost in passion as she kept screaming.\n\n\"Holy fuck,\" she screamed. \"That's it. That's it. Holy fuck, I'm going to come again!\"\n\nAnd she did, screaming and squeezing my hard with her legs and clutching my back with her arms.\n\nIt might have been five minutes later or it might have been twenty minutes for all I knew. I was lost in ecstasy and couldn't distinguish time anymore. I felt my orgasm approach and welcomed its arrival. Moira could tell and kissed me deep. A short moment later I came inside her, cock throbbing hard. Our mouths and tongues danced throughout my orgasm and I looked into her eyes.\n\n\"I love you,\" she said.\n\n\"I love you, too.\"\n\n****\n\nIn the end I broke my promise. I'd assured my mom I wasn't moving to Vermont. I meant it at the time but that's not how things worked out.\n\nWhen September came, Moira and I decided we'd make a go of it. We had too good a thing going not to. We'd do the best we could with the long distance thing until I finished up my degree and then we would go from there.\n\nFor the first year, that's how it was. Any long weekend or holiday, either I would be driving up to Vermont or Moira would head down to New Jersey. I arranged things so I didn't have class on Fridays so I frequently went up on Thursday night and stayed till Sunday evening. Even so, there was a lot of missing each other and loneliness but when we were together we appreciated the time more. Then the year was over. I got my degree and we decided I'd move in with her in Vermont. My mom wasn't happy but got over it.\n\nI didn't have a job lined up beyond working at the bookstore and substitute teaching but a year later I found a teaching position about a half hour from Glensboro. Two years later Moira and I bought a 19th Century farmhouse on four acres five minutes from town and set to massively renovating it. Then, in the summer of 2005, we got married. This guy from New Jersey fell in love with the girl from Vermont and now we live on our small farm with our two kids, four horses, a dog, a cat, and assorted chickens.\n\nMoira and I were sitting on the love seat on our front porch the other day right after dinner. I put my arm around and her and pulled her against me. She sensed my thoughts and smiled.\n\n\"You know, Jersey,\" she said. She'd never given up her original nickname for me. \"My mom still has the kids for a few hours.\"\n\nI pulled her close and kissed her.\n\n\"Let's go.\""
    ],
    "authorname": "Eosphorus",
    "tags": [
        "bbw",
        "romantic",
        "big tits",
        "big ass",
        "big beautiful woman",
        "cunnilingus",
        "oral sex",
        "bbw sex",
        "fat girl",
        "fat admirer"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/the-summer-of-moira-june"
}
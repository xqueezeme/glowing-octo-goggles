{
    "title": "The Chronicles: Three Sisters 11",
    "pages": [
        "THREE SISTERS Chapter 11\n\nThank you very much for your kind comments. For those who haven't seen it yet, there's a map for the Three Sisters at the very bottom of my author page, under 'Illustration Submissions'.\n\n*****\n\nAsphodels was on fire. It was where I had been born, and my three girls likewise. At least four of its houses were burning - and as we watched in disbelief, a fifth caught fire.\n\nWe sat in the boat, out on the lake, less than 200 yards away, and watched our old home burn. It made no sense: why would Bacho burn Asphodels?\n\nThere were folk running about now. We could see them, highlighted by the flames. Then I saw a strange shape. And another.\n\n- \"Horsemen?\" said Yevna.\n\nBacho might have had a few horses. But Uplanders didn't fight on horseback - even the kind of fighting where you burn the houses of defenceless people.\n\nLowlanders might do that. But I doubted it.\n\n- \"Izumyrians?\" asked my daughter.\n\nIzumyrians. Neighbours of Hvad, to the south. Ten times as populous as the Lowland Duchy, and twenty times as rich. According to my father, his grandmother Payl had fought against mounted warriors - Lowlanders who were copying the Izumyrians.\n\nBut why would they be here? We had no wealth to attract them. Nor were we any kind of threat to their conquest of Lowland Hvad.\n\nI began rowing. We had delayed too long. I put my back into it - no one was going to hear any noise we made, in the burning village.\n\nWe rounded the Bend, and passed south of Piran's Point. Yevna and I saw it at the same time.\n\nNadestis - or Southend, as it was now called - was also on fire. Whoever these raiders were, they seemed to be attacking all along the south shore of the lake.\n\nIt was time to get out of there, and back to the others at Twin Points.\n\n***\n\n- \"How many Izumyrians did you see?\" asked Nameless.\n\nYevna was more concerned with the immediate practicalities. \"Do we take both boats?\"\n\nGuenna answered before I had even made up my mind. \"Why not? We can hide them. You never know when they might come in handy.\"\n\nIf we were taking both boats, then Yevna would have to row the second. She was strong, and had some experience on the water, which Giedra and Nameless did not.\n\nGuenna joined me, while the other two went with Yevna. We rowed to the head of the lake as the morning sun grew stronger.\n\n- \"Was it hard for you, to see Asphodels on fire?' asked my youngest.\n\n- \"It's been ten years.\" I said. \"Strange - but it didn't feel like my home was burning.\"\n\nAs I rowed, I thought about her question a little more. \"What about you, pet? Where is home, for you?\"\n\n- \"I was just thinking about that.\" she said. \"It's odd. I spent a third of my life at Asphodels, but I don't remember it well enough. Then six years with Moruith, which I remember well - but it felt like we were guests there. Or just passing through.\"\n\n\"And now these past years on the Hill, which still seem so new.\"\n\n- \"It doesn't feel like home?\"\n\n- \"It will.\" she said. \"You, Yevna and Tan are there. In time, I suspect, it will become home. What's that?\"\n\nIt took me a moment to realize that Guenna had seen something. She drew my attention to it, without pointing.\n\nAt the very top of the lake, on the eastern bank of the river, were four horsemen. Even as I watched, two of them dismounted, and led their horses to the very edge of the riverbank.\n\n- \"None of them have a bow.\" said Guenna.\n\nThey didn't look like Izumyrian cavalry, either. Or, at least, what I imagined Izumyrians would look like. One of them wore a fine chain mail shirt, but what little hair he had left was thin, stringy, and bright white. I wouldn't say that he had one foot in the grave, but he was well advanced into the winter of his years. His bright blue cloak had once been fine, too, but it was worn and travel-stained.\n\nI doubted that the Izumyrians used elderly men as cavalry scouts. And unless they also employed pregnant women, then these weren't Izumyrians at all.\n\nExcept for the pregnant woman, I might have let them be, and just passed by. She had a delicate sort of beauty - alabaster skin, long black hair. She also held her head proudly, chin up, studying me with a mixture of haughtiness and defiance.\n\nThey definitely weren't Uplanders, so that left only one possibility: Lowlanders. Hvadi, on the run, by the look of them. An old man, a pregnant woman, and two troopers, one dressed a little finer than the other.\n\nI rowed the boat closer to the bank, until I was only ten feet from shore.\n\n- \"Are they after you? The Izumyrians?\" I asked.\n\nThe old man frowned. \"Why do you ask?\" he replied, in a gravelly voice.\n\n- \"I was going to row by,\" I said, \"but I noticed that you look travel-worn and tired out. And one of you is pregnant. Meanwhile, horsemen are burning the village I grew up in - along with everything else south of the lake. Four Hvadi, lost in the Uplands. Izumyrian cavalry ... it's a busy day.\"\n\n- \"Who are you?\" demanded the woman. None of the men bristled at her interruption, which told me that they deferred to her.\n\n- \"My name is Veran One-Eye.\" I said.\n\n- \"Do you know where we are?\" asked the old man.\n\n- \"You're on the wrong side of the river.\" I said. \"If you go east, your pursuers will catch up to you. North of you lies a great forest, whose inhabitants are ... inhospitable. They still take heads as trophies. You're unlikely to find help there.\"\n\n- \"How do we cross the river?\" asked WhiteHair. \"Is there a ford?\"\n\n- \"No ford. No crossing. Not on horseback, at any rate.\"\n\nGuenna wasn't saying a word. She sat still, listening and observing - and probably learned more than I did. The old man turned to the pregnant woman, and they exchanged a few whispers.\n\nMy daughter took advantage of that to do her own whispering.\n\n- \"We have to help them.\"\n\n- \"Why?\"\n\n- \"She's pregnant.\"\n\n- \"I can see that.\" I said. \"They're also Lowlanders.\"\n\n- \"Papa - she's pregnant.\"\n\nYevna drew near, with the second boat.\n\n- \"They're all ... women.\" said one of the younger Hvadi. He had an open, honest face. I liked him at first sight.\n\n- \"Are we helping them?\" asked Yevna.\n\n- \"That depends.\" I said, loudly. \"They haven't asked for any help. Nor have they told us who they are. It's hard to say, at the moment.\"\n\nWhiteHair had the grace to flush. He knew that his little party were exhibiting shockingly bad manners.\n\n- \"Your pardon, Veran ... One-Eye. We are ... pursued, as you say. And we were advised to be ... wary, in the Uplands. Not to trust too readily.\"\n\nI understood that. Someone had told them not to trust an Uplander as far as they could throw him. That wasn't necessarily bad advice.\n\n\"We do ask your assistance, though - if you can help us to evade our pursuers.\" he said.\n\n- \"We don't even know who you are.\" said Yevna.\n\nThe black-haired woman held her head even higher. The moment she began to speak, WhiteHair turned to her, waving his hand. Too late: she wasn't about to be shushed.\n\n- \"I am Temara, Duchess of Hvad.\" she declared. \"And the child I carry is Heir to his Father's Duchy.\"\n\n***\n\n\"You're Richwin's widow?\" I said.\n\n- \"Duke Richwin, to you, Uplander.\" said the second man-at-arms. \"And you should address the Duchess as 'Your Grace'.\" He was more richly dressed than his companion. I took an instant dislike to him. It wasn't just the way he spoke to me - it was instinctive. Also, he had long hair, and was unshaven.\n\nHvadi men went about clean-shaven, for the most part. They might have been aping an Izumyrian custom, for all I knew. Maybe their womenfolk liked it. Uplanders wore beards, which was more sensible. Warmer, in the winter, for one thing. We didn't have many razors, either; try shaving with a knife sometime.\n\nBut this in-between state? WhiteHair and the open-faced young man were neatly shaven, so they did have a razor between them. The only reason, then, why this haughty fellow hadn't shaved, was laziness - or affectation - which was even worse.\n\n- \"Are you telling me how to speak, even as you ask for our help?\" I replied.\n\n- \"Iduallon spoke in haste.\" said WhiteHair, quickly. \"We do ask your assistance.\"\n\nI turned to the women.\n\n- \"What d'you think?\" I asked, pitching my voice so that the Hvadi couldn't hear us.\n\n- \"Fuck 'em.\" said Giedra. \"Id-whatever's an asshole, and I don't like the look of the Duchess.\"\n\n- \"She's pregnant.\" whispered Guenna.\n\n- \"She looks like a bitch.\" said the big blonde.\n\nNameless just shrugged her shoulders. \"I don't know.\" she said.\n\n- \"We can't turn them away.\" said Guenna.\n\n- \"Why not?\" said Giedra.\n\nGuenna looked me in the eye. \"Because Moruith and Inisian didn't turn us away.\"\n\n- \"That was ... different.\" I said.\n\n- \"Was it?\"\n\nI had stood up for Moruith and Inisian, and faced down Rymvi SmallFoot and his little gang for them. My daughters and I were being pursued by Bacho and Kestutis - but we never guessed that they would come north of the Three Sisters.\n\nThese Hvadi had done nothing for us - except to offer insults. And they were being pursued by Izumyrians - who were considerably more formidable and more dangerous than my brother-in-law and my nephew, not to mention more numerous by far.\n\nBut it wasn't all that different. Guenna was probably right. Yevna didn't say a word. She looked down, into the bottom of the boat.\n\nI had a bad feeling about this. No choice, mind you - but still, a bad feeling.\n\n- \"We can take you across the river.\" I said. \"And we can hide you for a time. I don't know how long, to tell you the truth. We have our own enemies.\"\n\n\"But you can't bring horses, where we're going.\"\n\nThe Hvadi didn't like that. Iduallon, the unshaven one, didn't like it at all.\n\n- \"We can't afford to trust these savages.\" he said, to his companions. He didn't bother to lower his voice so that we wouldn't hear him.\n\n- \"These people\" said WhiteHair, \"are offering their help. I don't see a better option, Your Grace.\"\n\n- \"We can't give up the horses.\" said Iduallon, through clenched teeth.\n\n- \"The Izumyrians can track us on horseback.\" said the other young man - the clean-shaven one. \"If we cross the river, we may throw them off our trail.\"\n\nThey argued a little more, until the Duchess glanced at me. One brief look from her intense eyes, and she came to a decision. I have no idea what she saw - or thought she saw.\n\n- \"We will accept their assistance.\" she said.\n\nAnd that was that. The Hvadi took what they needed from their horses, while we re-arranged ourselves in the boats.\n\nYevna did her best to obliterate their tracks, or to confuse the issue, to make it look like they had watered their horses here. Then she and Nameless took their mounts, and rode off in the direction of the Eastern Forest.\n\nGuenna took Giedra, in the smaller boat, and rowed upriver, where she would collect her sister and Nameless. I ended up with the four foreigners.\n\n- \"We are in your debt, Master One-Eye.\" said old WhiteHair. He seemed to be the only one among them with halfway decent manners. Why is it that so few of the young people understand elementary courtesy?\n\nI rowed them up the river, and then across, to the base of the Hill. All the way, I felt oppressed by a strange feeling - that somehow, events were running away from me. Or perhaps they were running over me.\n\nThe Duchess had courage, to have come this far, pregnant or not. So did her companions. I had to give them that much. I didn't like them much, so far, but they had my grudging respect.\n\n- \"I wonder,\" I said, \"if you knew my brothers.\" I said their names, slowly.\n\nOld WhiteHair turned to me, slowly, his mouth open. \"They were your brothers?\"\n\n- \"You knew them?\"\n\n- \"They were Duke Richwin's bodyguards. His drinking companions ... and the two stoutest fighters in his retinue.\"\n\n- \"Ha - drinking companions? That must have cost the Duke a pretty penny!\"\n\nWhiteHair smiled. \"It's true ... they were men of ... great appetites.\"\n\n- \"Were?\" I observed. \"So they died - with him?\"\n\nThe old man nodded. \"We believe that they fell, with the Duke. In battle. To my great shame, I was not there myself.\"\n\nI hadn't expected anything else. My brothers were headstrong, and short-sighted. That combination is fairly rare among old men - in the Uplands, at least.\n\n- \"I had the privilege of meeting your brothers, Sir.\" said the clean-shaven young man. \"They were fine warriors, and generous men.\"\n\n- \"That's a fine epitaph.\" I said. \"Thank you ...?\" I didn't know his name.\n\n- \"Gerimir, Sir.\"\n\nPerhaps I was wrong about the younger generation and their manners.\n\nWe drew near to the foot of the Hill.\n\n- \"It's very steep.\" I warned them. \"I'm sorry for the Duchess' condition, but it's the only way up that doesn't require a rope.\"\n\nHer Grace didn't bother to respond.\n\nOur watchers weren't sleeping: Hedyn, Seva, Weyl, and Odma were waiting for us.\n\n- \"Guests.\" I said. \"The others will be back shortly.\"\n\nHedyn still looked concerned.\n\n\"Kestutis is dead.\" I said. \"And eight more of his men.\"\n\n- \"Yes!\" said Weyl. Big Hedyn took me in his arms for a bear-hug.\n\nOur Hvadi refugees seemed slightly miffed, to find us celebrating something they knew absolutely nothing about. Their arrival, they discovered, was hardly the most important event of the day.\n\nOnly Seva paid them any attention. By that, I mean that she gave the two younger men a frank appraisal, weighing their potential. Unless I was wrong, one of them was soon to be introduced to Upland courtship rituals.\n\nThe Duchess made it up the slope, with a little help. Out of breath, she paused to look around her.\n\nThe bodies of Kestutis' men were laid out, side by side. There had been no time to burn them, yet.\n\n- \"The Hill was attacked, yesterday.\" I said, by way of explanation.\n\n- \"These are your dead?\" asked WhiteHair.\n\n- \"No. We lost three. My daughter Yevna's husband, and two more. These were enemies.\"\n\nWhiteHair was surprised. Iduallon looked sceptical.\n\n\"We followed those who escaped - the four women you met on the river, and me.\" I said. \"We put nine more of them in the ground, last night.\"\n\n\"Well, to be truthful, one of them we put in the water.\"\n\n- \"You - you killed nineteen of your foes?\" asked WhiteHair. \"You, and those women?\" He was plainly having difficulty with the concept.\n\n- \"That's a shame.\" said the Duchess. \"We could have used these men.\"\n\n- \"Used?\" I asked, hardly believing what she had just said.\n\nWhiteHair was quick to step in. \"What Her Grace meant was ... that these men could have been of service to us.\"\n\n- \"I see. These killers and rapists should have had the decency to stay alive, so that they could get killed fighting for you.\"\n\n\"Hedyn!\" I called. \"Take our guests to see Mother Nadesti. And Vingoldas.\"\n\nI'd had enough of them. I was already regretting the decision to take them in.\n\n***\n\nTanguiste took charge of our 'guests', bringing them food and drink, while I slipped away. First of all, I went to my wife.\n\nSulcen embraced me, squeezing me tight. She didn't say anything, but I could tell that she had been worrying.\n\n- \"The girls are fine.\" I said, stroking her hair. \"We're all fine. Kestutis is dead. Eight more with him. It's done.\"\n\n- \"Who are these folk you brought back?\"\n\n- \"Different trouble.\" I said.\n\nVingoldas had let the Lowlanders rest and refresh themselves in his house. That gave me an opportunity to tell him, and Guen Nadesti and Tanguiste what had happened last night. I didn't tell them how Kestutis had died - only that he was dead.\n\nTanguiste embraced me, too. She didn't have to say anything; I knew exactly how she felt. Guen Nadesti was pleased, and relieved, but she was also concerned to learn of the burning of her old home.\n\nWe quickly worked out a way to deal with the Lowlanders.\n\n\"Let Mother Nadesti do the talking.\" I suggested to Vingoldas.\n\n- \"I'll handle them, while you two listen, and make up your minds.\" she said.\n\nVingoldas saw the sense in that arrangement. That was all we had time for - it wouldn't do to keep a pregnant Duchess waiting too long while we talked it over.\n\nMother Nadesti sat on a mat, with Tanguiste beside her. The Lowlanders seemed surprised at the informal setting - and by the fact that our headman was a headwoman.\n\nGuen Nadesti was much wiser than Vingoldas or me, when it came to diplomacy. She had a sharper tongue, too, and rarely hesitated to use it. We agreed to let her do the talking. We fetched a chair for the Duchess (one of two on the Hill), and the stools from my house for her men. Vingoldas and I sat on the floor, off to the side. Guenna would have loved to be there - just like everybody else on the Hill - but she had to wait outside.\n\nMother Nadesti seemed to get the measure of our guests early. She let them talk as much as they wanted - which was quite a bit. Meanwhile, she gave very little away. I don't think the Lowlanders understood who they were dealing with. Because Tanguiste smiled, and listened attentively, they directed most of their remarks to her.\n\nDuchess Temara introduced her men: WhiteHair was Captain Prosquetel. The two younger fellows, Iduallon and Gerimir, were lieutenants. She made them sound very important.\n\n- \"You seem to have more officers than soldiers, Lady Temara.\" said Mother Nadesti.\n\nThe Duchess bristled. \"Captain Prosquetel once commanded the Guard. He has trained hundreds of Hvadi fighters.\"\n\n- \"I'm just saying that it would be nice to have some of those hundreds here.\"\n\nWhiteHair - Prosquetel - coughed into his hand. That may have prevented his Duchess from saying something unwise. \"We - we hope to raise more fighting-men.\" he said.\n\n- \"Here?\" said Mother Nadesti.\n\n- \"With your permission, of course.\"\n\nGuen Nadesti smiled, and then had a good laugh. The Lowlanders weren't at all sure what to make of that.\n\n- \"There are only five fighting-men left on the Hill.\" I said. \"We lost three yesterday. The rest of our warriors are women. You met a few of them - on the river.\"\n\nProsquetel didn't know how to answer that. The Duchess didn't look pleased, but she had no reply, either. It was Tanguiste who slipped into the breach.\n\n- \"We know very little of what has been going on in Hvad.\" she said. \"What is the situation there, now?\"\n\n- \"You could start at the beginning.\" said Mother Nadesti.\n\nThe Duchess glanced at Iduallon - the unshaven one. He rose to his feet.\n\n- \"The Izumyrians gave no warning. Their attack was a surprise. They crossed the Grey River in force. Our guards were unable to stop them.\"\n\n\"Duke Richwin raised his troops, and set out to meet the enemy.\" Iduallon lowered his head, as if overcome by emotion. It was complete bullshit - he was enjoying himself.\n\n\"The Duke fell - along with the flower of our youth.\"\n\nIduallon must have seen Mother Nadesti roll her eyes. The Duchess certainly did. She straightened her back and raised her head even higher. As for Lieutenant Iduallon, he began to address his poetry to my daughter, Tanguiste.\n\nI don't know what kind of fighter or leader he was, but the little shit could have been a guslar. He was putting on a show.\n\n- \"We could not defend Hvad town. The Izumyrians rode in, unopposed. They laid siege to the Duke's castle. Her Grace the Duchess refused their demands that we surrender.\"\n\n- \"Good grief.\" muttered Vingoldas, under his breath.\n\n- \"But we could not hold out forever. In the middle of winter, in a blinding snowstorm, the Duchess climbed over the wall, and escaped across the frozen lake.\"\n\nIduallon turned to Temara, and went down on one knee.\n\n\"Your pardon, Your Grace, but I still believe that your act was one of the bravest things I have even seen - or have ever heard of. In your ... condition. With only a handful of devoted followers ...\"",
        "I coughed. I couldn't help it - it was that, or vomit. Tanguiste glared at me.\n\nIduallon sat down again. The Duchess looked a little flushed. She asked Prosquetel to continue the tale.\n\n- \"Since then, we have been pursued and harried.\" said WhiteHair. \"There is scattered resistance, in Yelsa, and Yeseriya. And we have heard that in Stonje, a band of former guardsmen are striking shrewd blows against the invaders.\"\n\n\"Unfortunately, we were not able to turn south, to join them. The enemy have hemmed us in, driving us ... this way.\"\n\nGuen Nadesti spoke up. \"So ... your arrival here was not ... planned. This is not where you intended to be.\"\n\n- \"In a sense, it is.\" said the Duchess. She looked behind her, at the clean-shaven youth, before turning back. \"Lieutenant Gerimir has been of the opinion that we should come to the Uplands ever since we escaped the castle.\"\n\n- \"Oh?\"\n\nThe Duchess waved an imperious hand at her young man. Gerimir rose to his feet, looking uncomfortable.\n\n- \"Why would you suggest coming to the Uplands?\" asked Mother Nadesti.\n\n- \"Because this is where Borna found help.\" said Gerimir. \"When he was nearly alone, and outnumbered, he ventured into the Uplands. And here he found Mutimir LongRider, and Lunach, and Payl, the Shining One ...\" The lad was getting carried away.\n\n\"And with the help of the Uplanders, he regained control of Yeseriya, and eventually united all of Hvad.\"\n\n- \"Master Gerimir.\" said Tanguiste. \"I'm sorry - Lieutenant.\"\n\n- \"Yes?\"\n\nMy daughter pointed at me. \"My father, there - he is Payl's great-grandson. My sisters and I - we are Payl's great-great-granddaughters.\"\n\nGerimir looked at me, and then back to Tanguiste. He looked ready to swoon, overcome by the proximity of history and legend, in the flesh.\n\n- \"All very fascinating, I'm sure.\" said Mother Nadesti. \"But my old bones are getting sore. And I'm sure you can hear my stomach rumbling. Why don't we eat, and talk more afterwards?\"\n\nI took advantage of the break to go outside. I found Guenna and Yevna, and began to relate what had been said. Giedra and her friends came over to listen, too.\n\nAfter a bit, though, I noticed that most of my audience were looking behind me. I turned, to find Gerimir (the clean-shaven one) and Prosquetel WhiteHair.\n\n- \"I apologize for the interruption.\" said the young man. \"I just wanted to ask if I might ... shake your hand.\"\n\n- \"I'm not Payl, you know. I never met her. She died before I was born.\"\n\n- \"Nevertheless.\"\n\n- \"I hope you don't mind, but I have to use my left hand. The fingers of my right hand were mangled some years ago.\"\n\nIt was only polite to warn him. In the Uplands - as in Lowland Hvad - offering someone your left hand is a calculated insult. The reason for that is quite simple. We use our right hand to eat, and our left hand to wipe our arse.\n\nEven if you wash thoroughly, everyone knows where that hand has been. Makes it difficult for those who are born left-handed - especially at mealtime, when they reach into the communal dish.\n\nGerimir flinched for a moment. But extended his hand again. I suppose his fascination with the legend of Payl was greater than his distaste at my left-handed greeting.\n\nI gripped his outstretched hand. Then I introduced both Lowlanders to the women around me.\n\n- \"What a wonderful set of coincidences.\" said WhiteHair. \"Your connection to Payl .... and the fact that your brothers served the Duke.\"\n\n\"I wonder ...\" he said. \"Does that mean that ... we can hope for your support?\"\n\nI stared at the Lowlander, for a moment.\n\n- \"Payl was an adventurer, and a mercenary. I'm neither. And we have our hands full, here. Did you not see the bodies laid out at the edge of the Hill?\"\n\n\"As for my brothers - they were idiots. They went looking for trouble elsewhere, and then trouble came here while they were gone. Horrible things happened to my family ... which might never have occurred had my brothers been here.\"\n\nGuenna laid her hand on my arm.\n\n- \"I'm sorry, Sir.\" she said. \"What my father is trying to say ... is that you shouldn't expect too much from us. Not just now. We'll listen to what you have to say - but you shouldn't raise your hopes too high.\"\n\nThat was pretty much what Guen Nadesti told the Lowlanders when they had gathered in her house once more.\n\n- \"You are welcome to stay, Duchess. You and yours. Certainly until your child is born.\"\n\n\"As for recruiting our fighters for your Lowland war ... I'll have to discuss that with my councillors, to decide if we are able - or willing - to help you further.\"\n\nThe Duchess didn't look entirely happy with that. But it was the best offer she was going to get today.\n\n***\n\nWe gave them our house. Sulcen, Guenna, Nameless and I moved in with Yevna and Dengelle. Tanguiste slept at Mother Nadesti's. Even that wasn't enough for the Lowlanders.\n\n- \"The Duchess requires a house of her own. And female attendants.\" said Iduallon. He just happened to be a few inches taller than me - another reason to dislike him, when he stretched a little so that he could look down on me.\n\n- \"Where did you sleep last night?\" I asked.\n\n- \"I beg your pardon?\"\n\n- \"You can make the same arrangements as you did last night.\" I said. \"Or you can sleep indoors, in the house we've provided. My house.\"\n\nTanguiste appeared beside me. \"Papa, let me, please.\" She proceeded to pour some oil on the waters - and made sure that I didn't end up putting my boot to the arrogant Lieutenant.\n\nI went to meet with Guen Nadesti and Vingoldas, instead. This time, all of our fighters were present. It was their affair as well.\n\n- \"Nice guests you've brought us.\" said the Mother Nadesti.\n\n- \"I know. I'm sorry, Guen. But ... \"\n\n- \"She's pregnant.\" said my daughter Guenna. \"We couldn't turn them away.\"\n\n- \"D'we even know how many Izmians is chasin' them?\" asked Hedyn.\n\n- \"Iz-u-myrians.\" said Seva, with a sneer.\n\n- \"Scores. Perhaps as many as a hundred.\" said Vingoldas.\n\nI looked at him in horror. I hadn't even thought to ask that.\n\n- \"Where'd you get that number?\" asked Guenna.\n\n- \"It's what Gerimir told me. The friendlier one.\"\n\nEveryone was silent for a moment, digesting that.\n\nMy father, as headman at Asphodels, had three sons and four retainers. I, in turn, had five sworn men - two of whom had betrayed me. After turning on me and eliminating the Nadestis, Bacho had gathered an enormous band of men - 35. Granted, they weren't all first-rate fighters, but it was still a staggering number, by Upland standards.\n\nA hundred was just ridiculous, in a land where many people had to take their shoes off to count past ten or eleven.\n\n- \"I'm sorry.\" I said. \"I didn't know.\"\n\n- \"Would it have changed your decision?\" asked Mother Nadesti. She looked around the room. No one dared to suggest that I had been foolish.\n\n\"Then we deal with what we have.\" she said.\n\nSome decisions make themselves, I suppose. There are no other choices, no palatable options. I went back over my meeting with the Lowlanders, in my mind - but I couldn't imagine having acted any other way than I did.\n\nMother Nadesti assigned us duties. Yevna and Nameless were to hunt together, and to share whatever game they could bring down with the Lowlanders.\n\nVingoldas, Weyl and Odma were to make friends with the younger men, to get close to them and find out anything they knew.\n\n- \"Veran, you do the same with Prosquetel.\"\n\n- \"There's a shock.\" I said. I was surprised by myself - by how sour and snarky I sounded. If I wasn't careful, I'd end up like Seva.\n\n- \"If you like, you can switch with Tanguiste.\" said Mother Nadesti. \"She's got the Duchess.\"\n\n- \"I'm fine.\"\n\n***\n\nSeva shagged the unshaven Lieutenant - Iduallon - on the second night they were there. She was reasonably discreet, I suppose, except that Giedra and her friends, Rion and Eliv, had been asked to keep an eye on the Lowlanders, too. It was Giedra herself who discovered them.\n\n- \"The little tart.\" said the big blonde.\n\n- \"A bit jealous, are ya?\" said Odma, with a grin. \"Were ya -\" He never got to finish that sentence, because Giedra decked him. She knocked him flat - and broke his nose in the process.\n\nThe Lowlanders hadn't been with us for more than two days, and we were already come to blows - between ourselves.\n\n- \"They'll calm down.\" said Tanguiste.\n\nIn fact, we did settle into a pattern. We kept an eye on the Hvadi we had been assigned to, while they worked on us, trying to win us over.\n\nProsquetel - or WhiteHair, as I still thought of him - tried his best to be pleasant with me, to change my mind. He obviously believed that if I could be recruited to serve his Duchess, then others would follow.\n\nI didn't dislike the old fellow. He was honest enough about his intentions, and seemed to be trying to overcome his prejudices against Uplanders. He had probably been raised to believe that we were filthy savages.\n\nGiven the history of my family, that wasn't far wrong.\n\nThe young lad, Gerimir, I genuinely liked. He was eager to learn as much as he could. His questions were endless; he reminded me of my daughter Guenna, when she was younger.\n\nGerimir found our ways fascinating - especially the warrior women. He just couldn't understand, though, how Nameless could get along without a name.\n\nUnfortunately, I didn't like the other Lieutenant - at all. And I was none too fond of the Duchess, either - pregnant or not. It just wasn't in my nature, I suppose, to be impressed by someone because of their clothing, or who they had married.\n\nI was the grumpiest person on the Hill. Giedra ran me a close second. Everyone else seemed willing to grant the Lowlanders the benefit of the doubt.\n\n- \"I wasn't their fault they ended up here.\" said Sulcen.\n\n- \"No - it was mine.\"\n\n***\n\nTwo more strangers reached the Hill. They'd come from north of the Three Sisters. They were kinsmen of Lihi and Odma, who'd made up their minds to join us when they heard that their distant cousins had already left. Odma knew them well enough to vouch for them.\n\nThen three women arrived, from the northeast. One carried a babe in her arms. They'd listened to Seva and Weyl, last year, and then made their plans to leave. Unfortunately, they'd had to postpone their departure when they discovered that one of them was with child.\n\nTwo had left abusive husbands, and the other an abusive father. Our female fighters took them in without question.\n\nI ran through training sessions with each of the newcomers: Odma's kin were capable, if not exceptional, and one of the women could handle a bow. The other two were willing to try, at least.\n\nMore potential fighters was nothing to be sneezed at, but it irked me somewhat to see that WhiteHair was even more pleased by the new arrivals than we were.\n\nBut all of that was nothing, compared to the arrival of three more men. Yevna found them, looking for a way up the southern slope of the Hill. She brought them to me. A crowd quickly gathered.\n\nThey didn't look like much. All three were fairly young.\n\n- \"What brings you here?\" I asked.\n\nTwo of them wouldn't meet my eye: a scrawny youth barely started on his first beard, and a dark fellow who carried one shoulder noticeably lower than the other. The third was blonde, with a pushed-up nose. Only he looked at me directly.\n\nHe surprised me by bowing.\n\n- \"We came to offer you our services, Hammerfist.\" he said.\n\nMy hackles rose. The last men to call me that were spies sent by Bacho.\n\n- \"What's your name?\" I said.\n\n- \"Yorun.\"\n\n- \"Where did you come from?\"\n\n- \"Bentwood.\"\n\n- \"Bentwood? You served Bacho - and Kestutis?\"\n\nThere was a growl, at that, from the onlookers. Nearly twenty people now encircled us. It had to be daunting for the three youths. But blondie seemed calm enough.\n\n- \"We did.\" said Yorun. \"But now we wish to serve you.\"\n\n- \"Are you serious? You want to change sides - you want to switch your allegiance - from Bacho to me?\"\n\nYorun looked confused.\n\n- \"We aren't changing sides, Hammerfist.\" he said.\n\n\"Bacho is dead.\"\n\n*****\n\n \n"
    ],
    "authorname": "AspernEssling",
    "tags": [
        "combat",
        "dark ages",
        "fantasy",
        "swords",
        "women warriors"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/the-chronicles-three-sisters-11"
}
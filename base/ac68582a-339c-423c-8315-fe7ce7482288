{
    "title": "Double Exposure",
    "pages": [
        "Brace yourself, this one is long.\n\nChapter 1.0\n\nI now know I have a dirty mind. Sure, I'd like to think it is no more than an average male's imagination, but after recent events, I can say with confidence that even my passing thoughts could make a sailor blush. My perception has shifted, almost like a lens that is changing focus, and if there is one thing that I can speak about with confidence it's that perception is indeed everything. It can change the simplest meanings of the most simple things. Red becomes crimson. Sweat becomes tears. Or sex becomes incest.\n\nMaybe a more accurate term would be filthy mind? It's all just semantics, really. Just one point of view much like that of a photograph, which is appropriate really, for that is indeed my profession. Though it wasn't until recently that this darker side, this id as Freud would call it, started seeping into my work, subconsciously controlling what I shot and how it was viewed. What's really funny is that the origins of this dark journey were so innocent too.\n\nYou see, photography for me was really a hobby that turned into something greater. A camera was a part of our lives growing up for my family. We had more photo albums lying around the house than books. Every single major life event, and even the minor ones, had visual documentation to mark its importance. Everything from my sister's first steps to my graduation, Birthdays, Holidays, and Family Vacations sealed in cellophane in binders on shelves. My Dad was always the one behind the lens, snapping away any chance he got. Sometimes I think he missed the experience of these moments viewing it all through a lens instead of with his own eyes. Don't get me wrong, he was incredibly talented, but it's funny thinking back because most of my childhood memories of my father include the sound of something clicking and flashes of light.\n\nRegardless of what apprehension that may imply, photography was ingrained in my day-to-day and became part of my life. I guess I inherited my father's eye, because the moment I laid hands on a camera, I was a natural. Lighting, framing, everything was all second nature. So much so that when I got my first SLR at the age of 16, I stayed up all night memorizing the manual. ISOs, F-Stops, Shutter Speeds, it all made perfect sense to me. So, naturally, this became my calling. Even when the world turned digital, I evolved right alongside, though my passion stayed with film.\n\nAs the years rolled on, I graduated college with a degree in photography and instantly started selling my services freelance. It wasn't easy at first, but I had a great head start thanks to a couple of my projects in senior year being published in a several local, and one national magazine. And with that, I moved out of my parent's house just outside of San Francisco and moved into the City. Fortune kept rolling my way and I had a great flat large enough to double as a studio and home. So, as you can tell, it appeared I had all my ducks in a row, but of course, every now and again things can throw you off course.\n\nEvery Sunday was Family Dinner night. It was something that we have maintained in my family for years now. The four of us were there, scrambling to set the table and pleasant chit-chat carried from one person to another. I was pouring the wine while joking with Dad about my recent photo shoot when I overheard my mother.\n\n\"Have you told your brother yet?\" she asked Kelly as she set down the pasta.\n\n\"Mm-Mmm.\" Kelly shook her head looking at me.\n\n\"One sec Pops.\" I turned to my sister. \"What's up?\"\n\nShe rolled her eyes as we she took our seats. \"Well, I was going to wait until after dinner so thanks Mom. Kinda' let the cat out of the bag there.\"\n\n\"What's going on?\" I asked again.\n\n\"Your sister had a little bit of an opportunity,\" said my dad as he began to serve himself.\n\n\"Let her tell him, Charles.\" My mother took a sip of her wine as she settled in.\n\nKelly took a big breath and turned to me. \"You know how I have been dabbling in designing clothes? Well, I've been having a great time at it and I've been getting some great feedback. It's kinda like you and photography; I'm a natural. I've got a great eye for style while keeping it flirty and kinda fun; especially for women with bodies like Mom and me.\"\n\n\"Something for girls with curves,\" Pops chuckled as he raised his glass.\n\n\"Charles!\" Mom smacked him with her napkin causing Dad to flinch.\n\nRegardless of how it was taken, Dad's comment was pretty spot on. I hadn't really studied their figures before, at least not on purpose, but both my mother and sister were shapely gals. They were in no way what you would consider thick, thanks to yoga, but both have curves where men like to look. Some credit due to their regimen and some to genes.\n\n\"So anyway, like I was saying, I've been really diving in deep on this, and last week one of my professors passed on a few photos of my work to a contact of hers and they loved it! They asked to see more and I want to really blow them away.\"\n\n\"Holy crap, Kelly! That's awesome!\"\n\n\"I know, right!\" She was ecstatic. Her green eyes sparkled as her grin stretched across her face. \"Right now, they've only seen a couple of my pieces. A summer dress, a couple tops and shorts, and a swim suit. What I want to do next is show off what I can really do and step it up a notch both in style and presentation. Soooo... Jason.\" She started to push her silverware around her plate. \"I was wondering...\"\n\n\"You want me to be your photographer, don't you?\"\n\n\"Don't worry, I'll totally pay you. It would mean a lot to me and you are the best photographer I know.\"\n\n\"Sis, don't worry about it. We're family; I got your back.\" I laughed. \"So what you thinking? Day shoot, night shoot, studio?\"\n\n\"You know I was thinking something like at the beach. I figured it'd be the best way to show off a spring and summer look. It's just an idea.\"\n\n\"No, I like it.\" I smiled. \"Have you thought about models yet?\"\n\nHer eyes went wide. \"Oh shit, no I forgot.\" Her eyes went wider as she covered her mouth. \"Sorry Mom! I keep swearing around you.\"\n\nMom waved it off. \"Honey, I keep telling you; you're twenty-one. You're an adult.\"\n\n\"I know. It's still weird.\"\n\n\"When did you want to do it?\" I asked, straining to get back to the topic.\n\n\"What?\" Kelly turned to me. \"Oh, I was hoping by the end of next week. I don't want the offer to grow too cold, you know?\"\n\n\"Gotcha,\" I said, deep in thought. \"I don't know who I can grab with that kind of notice. How many girls do you need?\"\n\n\"Just one. I want to keep it simple.\"\n\n\"What about you?\" Dad asked Kelly. \"It's your line. You're a pretty girl. Couldn't you do it?\"\n\n\"Personally I don't have any issue doing it. Hell I wear the clothes anyway but isn't that a little tacky to showcase your own line like that?\" asked Kelly.\n\nI shook my head. \"I wouldn't recommend it. You want it to appear like your line is for anyone and everyone. That message might not come across if all they see is you in your clothes.\"\n\n\"Hell, then use your mom.\"\n\n\"Charles!\" She smacked him again.\n\n\"What? Why not?\"\n\nMy eyes quickly darted up to our mother. I never really looked at her in detail either, but she is where Kelly gets most of her charms. She possessed many of the fair traits of both her Irish and Japanese lineage. Deep and dark red hair she kept cut just below her shoulders. Green, almond shaped eyes with a fair complexion and rosy cheeks, though that may have been the wine. To be honest, she'd be perfect.\n\n\"Oh that would be so awesome Mom! Please! It's just a couple dresses and swimsuits!\" Kelly pleaded.\n\n\"Swimsuits, nice!\" I joked.\n\n\"Jason!\" Mom glared at me.\n\n\"Hey, don't mind me. I'm just the photographer.\" I laughed. \"I'm sure they're not bad anyway, Mom. It's not like your daughter's been spending hours on end crafting bikinis.\"\n\nKelly appeared to shrink in her chair as silence filled the air.\n\n\"They're bikinis, aren't they?\" Mom asked.\n\nKelly replied with a sheepish nod.\n\nI looked from Kelly to my mother. I could sense glimmer of apprehension. \"Well Mom,\" I said with a shrug, \"I'm down if you are. It's always exciting working with a new model. You game?\"\n\nShe glanced my way, giving me just a moment to see a sparkle in her eye. With a smile, Mom shrugged her shoulders. \"The things I do for my kids,\" she drained her glass in one gulp and nodded.\n\nAn hour later, glasses refilled and bellies full, Kelly and I were down in her workspace; our former basement. The walls were newly painted and now holding clippings from various fashion magazines. Several sizing mannequins and sewing machines were residing now where my first dark room used to be. Oh well, C'est la vie.\n\n\"They're right over here,\" she said as she grabbed a rolling garment rack and flipped through the hangers mumbling yes's and no's as she selected her line-up. Finally with a handful, she laid them out on her work station.\n\n\"Alright,\" she sighed. \"What do you think?\"\n\n\"You did all this?\" I asked picking up a red summer dress.\n\n\"Yup.\" She fidgeted and sipped her wine. \"That's one of my favorites.\"\n\nI set it down and picked up another. \"This is incredible, Kelly.\"\n\n\"Really?\"\n\n\"Yeah. Absolutely. I'm impressed, seriously. Are you sure you have enough time to size them all to Mom?\" I asked.\n\nShe smiled. \"They shouldn't be too far off as it is. You see that dress form?\" she asked pointing to a mannequin embedded with sizing dials. \"I call her Lucy.\"\n\nI raised an eyebrow. \"A dummy named after Mom, huh. Let me guess, Mom was your first model.\"\n\nKelly smiled proudly. \"Yes indeed. Sized it right to her: Course that was a little while back though. I tend to use myself for most of my work now but we aren't too far off from each other,\" she said as she examined herself in the mirror.\n\nI raised an eyebrow as I held up one of her bikinis. \"That's convenient, because you don't really have much room to work with on some of these.\" She looked up at my reflection as I examined the piece of garb.\n\n\"Not ashamed of showing off a little skin, I see.\" I said.\n\nShe smiled. \"Hey, you know me. If you got it, flaunt it.\"\n\n\"Well, Mom's gonna' be the one flaunting it so I hope you're okay with that.\"\n\nShe shrugged. \"If it sells my goods, I have no problem with her showing hers,\" she giggled\n\nI couldn't help but roll my eyes as she laughed.\n\nHer eyes softened as she looked at me in the reflection.\n\n\"Thank you for doing this, Jason. It means a lot to me,\" she said. \"And, even though she won't say it, it really means a lot to Mom too.\"\n\n\"You're welcome,\" I said as I hung the clothes back, and then stopped. Something she said was off. \"Wait, why do you think it meant a lot to Mom? Isn't she-\"\n\nShe shook her head, scolding herself as she turned to face me.\n\n\"It's nothing,\" she said. \"Forget I said anything.\"\n\n\"Wait a minute Kelly. Come on. What's going on?\"\n\nShe took a deep breath. \"I don't know. It's weird,\" she said. \"It's like... She's just happier when you're around.\"\n\n\"Mom? But she's always happy.\"\n\nKelly shrugged. \"Honestly, Jason, I'm not sure. I mean she appears to be more so around you, but you're not here most of the time and Dad's here just a little more than that. I think there's something going on between the two of them.\"\n\nI set down my glass. \"You think they're fighting?\"\n\nShe shook her head. \"I don't know... Actually that's not true, I know they are because I can hear the mumbles through the walls, but they never do it in front of me.\"\n\n\"They seemed fine at dinner. I mean, they were acting like they always do.\"\n\nShe looked me in the eye. \"Even though they say we are adults, they still try to keep things from us. They want to appear composed, I guess. I don't know what's going on, but I can always feel this tension in the air. Mainly from Dad, to be honest. He comes home late from work, then goes out, then comes home late again. He always spends the night here, but... I don't know what it is. I never see them spend any time together anymore unless you're around.\" She shook her head in disbelief. \"Seriously, it's gotta be frustrating for her. I don't even think they're having sex anymore. They were noisy as hell after you moved out for college, but nothing for the last year.\"\n\n\"Thank you, Kelly. I wasn't expecting to hear about our parents bedside manners, but now I can sleep good tonight.\"\n\nShe smacked my arm. \"Jason, I'm serious. I'm concerned for her.\"\n\n\"And not for Dad?\" I asked.\n\nShe remained silent for a moment, tapping the side of her glass. \"Not really.\" She looked up at me. \"I know it's kinda' fucked up to say that, but I feel like he's leaving her high and dry here.\"\n\nI sighed. \"It's an awful lot of speculation.\"\n\nShe shrugged. \"You're right, it is.\" Kelly said. \"But I can't explain it any other way. Mom's always the happy-go-lucky one and I wouldn't be surprised if she's the only reason they haven't gotten divorced. She'd want us to stay together as a family.\"\n\n\"You might be right.\"\n\n\"I think I am,\" she said staring in my eyes. I was surprised not to see any tears. \"That's why I think it's good that she's doing this.\" Kelly stirred her glass. \"You realize she wouldn't have said yes if you didn't agree to as well.\"\n\n\"What makes you say that?\"\n\nKelly shrugged. \"She just... You're her boy.\" She took a large swig of her wine.\n\nI smiled, \"Thanks Kelly. I'm going to try and not put too much thought into the fact you said our undersexed mother has a thing for me.\"\n\n\"Argh!\" Kelly groaned in annoyance. \"That's not-\"\n\n\"No, it's fine. Like water off a duck's back,\" I said to which she smacked me again.\n\n\"You always joke.\"\n\n\"Hey, I can't help it! It's just my thing.\"\n\nShe rolled her eyes then downed the rest of her drink. \"Fuck it. Thanks for saying yes,\" she said as she headed back up the stairs.\n\nI followed suit, but joking aside, the conversation stuck deep in my gut.\n\nChapter 2.0\n\nBetween the three of us, we worked out the details for the shoot. Kelly used to style hair and makeup before finding her calling with fashion so we had that covered. For the location, we settled on heading up to a cove north of the city where we'd be able to get some great shots of the waves breaking against the rocks. We went there years ago for a family camping trip so the area was somewhat familiar.\n\nA week passed and the day of the shoot was here. I had a quick gig in Oakland early that morning so I got to the house just before we needed to head out. Our goal was to get both bright sunlight and sunset shots before we called it a day. So far, everything was looking peachy.\n\n\"Hellooooo!\" I bellowed as I entered the house.\n\n\"We're back here,\" I heard Kelly call.\n\nI found them in the master bath, both sitting on stools facing each other. Mom in a white robe and Kelly in black yoga pants and a pink tank top, focused on applying Mom's mascara.\n\n\"Hey Bro. You get my message,\" she asked focusing on her task.\n\n\"No, what's up?\"\n\n\"Your dad can't make it,\" Mom said. \"His client is having a... I don't really remember. He won't be there.\"\n\n\"Oh well, sucks for him.\" I checked my watch. \"How we doing here?\"\n\n\"Just finished her hair and I'm just touching up her makeup.\" Kelly tilted Mom's chin up.\n\n\"How's it look?\"\n\nI knelt beside them. \"Not bad,\" I said.\n\n\"What a charmer,\" Mom smirked.\n\nI chuckled. \"No seriously, you're stunning Mom, you know that. What we need to do now is accentuate her best features. Really make it pop, you know?\"\n\nMom looked up to me. \"And what are my best features?\"\n\nI gave her a once over, though I really didn't need to. \"I'd say... your eyes and lips are the first things that stand out. They're captivating, alluring. Even a natural pout.\"\n\n\"And what about beyond my face?\" she asked raising an eyebrow.\n\nI winked. \"I'll leave that one to our fashionista here.\"\n\nKelly studied Mom's face. \"Okay, so focus on the eyes and lips.\"\n\n\"Let me try something,\" Mom said. She stood up and grabbed her a couple items from her kit. With some quick flicks and gestures, she turned back to us. \"Better?\"\n\nI studied her one last time. She looked flawless.\n\n\"Gorgeous.\"\n\nShe smiled and blew a kiss at me.\n\n\"All right, let's pack it up.\"\n\nFive minutes later, we were in the car.\n\nWe couldn't have picked a better day. The sky was partly cloudy with bright pillars of light piercing through any opening it could find. The three of us, in the mean time, were huddled together in my SUV for the hour long drive; me, your friendly driver, Kelly in the back seat flipping through my portfolio, and Mom was in the passenger seat staring out the window as we traveled along the winding coastal highway.\n\n\"Damn, Jason you really got a range here,\" Kelly said.\n\n\"What are you talking about?\" I replied, glancing at her in the rearview mirror.\n\n\"All these crazy photos you've done. Models, Foods, Nature... Is this a riot? Where was there a riot?\" She looked up at me.\n\n\"It wasn't a riot. It was a protest. I took that one last year when I went to Madrid with Garry and Elliot. I got you that statue, remember?\"\n\n\"Oh yeah.\" She looked back to the photos. \"It's on my dresser... Holy shit I've seen this one before! You didn't take this!\"\n\nLooking back, \"Which one?\"\n\n\"This Lady Gaga one.\"\n\nI couldn't help but chuckle. \"No that's me. They got published and I think that's how you saw it.\"\n\n\"Bull,\" she said.\n\n\"It is! I was friends with an aide and she passed on the recommendation. Kinda like you and your gig. It's all in who you know.\"\n\nI could see Mom smile from the corner of my eye.\n\n\"Wow you must be blowing up then. How many shoots do you do a week now?\" Kelly asked.\n\n\"It varies. On a busy week, anywhere from five to six. Slow week, one if any. Keep in mind I tend to book things further out than just a week.\"\n\n\"That's it?\"\n\n\"Well, yeah. That's a lot. There's a lot of work between shoots. Setting up and planning prior, not to mention the time it takes to edit afterward.\"\n\nKelly closed the portfolio and bounced in her seat. \"So what's the craziest shoot you ever did?\"\n\nI looked back to her. \"Craziest? What do you mean?\"\n\n\"I don't know. Whatever,\" she smirked.\n\n\"Craziest...\" I had to think. I could see Mom shift in the seat beside me, gaining interest it would seem. \"You know, probably that Lady Gaga one.\"\n\n\"Really? That's it? Nothing spicier or anything like that?\" I appeared to have disappointed my sister.\n\n\"Spicy? Well,\" I had to think. \"I've done a couple swimsuit ones before.\"\n\n\"So swimsuits are considered spicy then?\" Mom asked.\n\n\"No, not really, but sometimes... I mean...\" I looked back at Kelly. \"Wait. What do you mean?\"\n\n\"You know, like lingerie or... no lingerie.\" She giggled.\n\n\"What you mean like boudoir?\" I asked.\n\n\"Yeah. Ever done it?\"\n\nI glanced an eye to our mother who chuckled to herself.\n\n\"You know I can't say that I have. Never really crossed my mind to be honest with you.\"\n\n\"Bullshit! You totally thought about it.\"\n\n\"Need I remind you that our mother is in the car.\"\n\n\"She said I could cuss.\"\n\n\"That's not what I was getting at.\" I fidgeted. \"I don't think we should talk about this with her here.\"\n\n\"Don't use me to get out of the questions.\" Mom seemed to be enjoying my discomfort.\n\nKelly beamed. \"See? Mom wants to know!\"\n\n\"Jeez, what's with you two? Okay so, yes, maybe I have thought about it. Okay. It's just not high on my to-do list. Happy?\"\n\nKelly's brow furrowed. \"Why not? If some chick was willing to pay you to take photos of her in the buff, you're telling me you're not interested?\"\n\nI looked at her through the mirror. \"You know what; I don't feel too comfortable having this conversation right now. Let's change the subject.\"\n\nShe sank in the seat. \"Fine, but don't think that I'm going to forget about this.\"",
        "\"I know you won't,\" I sighed returning my attention to the road. It was a good thing too, as a sharp turn was just ahead. I applied pressure to the brake, though not nearly enough. As we rounded the turn, it felt like gravity pulled at our sides.\n\n\"Easy there, Captain,\" Mom said as she gripped the armrest tightly.\n\nSuddenly, a loud CLANG burst from the back as my equipment banged together followed by the sound of metal rolling around. Something came loose.\n\n\"Shit!\" I chastised myself. \"Kelly can you check to see what that was?\"\n\nKelly rolled her eyes and unclasped her seatbelt.\n\n\"Fine,\" she said. \"But try not to stare at my ass.\"\n\n\"No promises,\" I joked at first but then the rearview mirror earned its name.\n\nThere, in the back seat was the surprisingly perfect ass of my sister, framed by her black yoga pants. The bumps in the road spoke to the firmness as she reached for an unknown object. The fabric stretched tightly across her skin, hugging the curve of her buttocks which left me to wonder why there was no panty line.\n\nAs if sensing my eyes, she peered back over her shoulder and spotted me in the mirror. She rolled her eyes, and then wiggled her ass. What a little tease.\n\n\"Jason,\" I heard from my right. \"If it's not too much trouble, do you mind keeping your eyes on the road.\"\n\n\"Sorry Mom,\" I said. \"But she's-\"\n\n\"And Kelly, stop teasing a brother.\"\n\nKelly returned to her seat. \"Okay Mom,\" she mumbled. Looking back up to the mirror, she stuck out her tongue.\n\n\"Everything okay in the back?\" I asked.\n\n\"Yeah,\" she said. \"I think it was your tripod that fell over. A knob thing came off and was rolling around,\" she said while holding up the part. \"I'll fix it when we get there.\"\n\n\"How much longer is that?\" Mom asked.\n\n\"Actually, here we are.\" I said as we pulled off the highway onto a tiny road leading down to the beach.\n\nThe beach was spectacular. Large rocks carved into bulbous and jagged shapes defied the waves that beat against them. The surf was choppy, topped with a mist that a strong breeze blew off the tops of the waves before they crashed. Salt lay heavy in the air, fresh and clean and the temperature was just below what would be considered hot. It looked to be a perfect day.\n\nWe unpacked quickly, trying to save as much light as we could. I carried the bulk of the equipment; which was primarily the dressing room kit, two large duffle bags, and both my digital and film SLRs. Kelly carried the clothes and Mom just carried a makeup kit for touchups. Had there been anyone to see us, I'm sure we would have been quite the troop as we marched our way along the sand.\n\n\"Oh wow, Jason,\" Kelly said in awe. \"This is so beautiful.\"\n\nI smiled. \"Thanks, Sis.\" I pointed up the hill back towards the car. \"The campsite we used to stay at was up over there.\" I turned to Mom. \"Damn, that must have been, what, twelve years ago?\"\n\n\"Fifteen,\" she said without looking up. \"I almost forgot about it.\" Mom seemed to laugh as if lost in a memory as she watched the thundering waves.\n\n\"Man, that was like a whole other lifetime ago,\" Kelly said, trudging along ahead, leaving Mom and me behind.\n\nThe wind billowed through the air, forcefully pushing against us. I couldn't help but chuckle hoping they didn't spend too much time working on Mom's hair. I turned to ask her when I noticed she was lost in thought.\n\n\"Hey Mom,\" I began. \"Doing alright?\"\n\n\"Hmm?\" she said turning back to me, her hair flittering in the breeze. \"Sorry. Just thinking.\"\n\nI smiled. \"No worries. How you feeling?\"\n\nShe scrunched her nose. \"A bit nervous, actually. I hope they turn out good.\"\n\n\"Hey, between her clothes, my skills, and your looks; we're gonna blow it away. Don't even stress.\"\n\n\"I know,\" she said looking down. \"It's just... never mind.\" She shivered, snapping herself out of her train of thought. \"So... any pointers?\"\n\n\"About what? Modeling?\"\n\n\"No, I was thinking of investing in a tech company and wanted your advice,\" she said. I remembered now who I got my sarcasm from.\n\n\"Oh, okay. Fuck off then,\" I joked watching her eyes and smile grow big in shock.\n\n\"Watch your mouth, young man!\" she said laughing as she smacked me in the arm.\n\n\"What? Didn't you just say last night it's okay if we swear?\" I said.\n\n\"No, I said it's okay for your sister. Never said it was okay for you, Buster,\" she teased. \"Now come on now, be serious for a moment. I've never really done this before so what do you suggest I do?\"\n\nI shrugged. \"Honestly, nothing too far outside of the norm. We aren't going for posh, or glamour; that's not this style. We are going for fun, sassy, with a little bit of sexy.\" I said showing an inch between my fingers. \"I've actually been thinking about it and I think you've the perfect personality to showcase with this line up so basically, just be yourself.\"\n\nShe raised an eyebrow. \"Easy to say. So what, no poses or anything?\"\n\nI laughed. \"Oh we will be doing poses. Just do what you feel inclined to do. Go with your impulse first. If need be, I'll guide you.\"\n\nShe stared into my eyes and sighed. \"Okay Mr. Director. I'm all yours,\" and she smiled.\n\nKelly turned around as if sensing a lull in the conversation. \"So where are we going to do this?\"\n\n\"Just up ahead. There's this really nice cove around that bend I think would work well.\"\n\nAs we made the turn, the wind almost died as we came upon an incredibly secluded section to an incredibly secluded beach, framed by a large rocky cliff holding the mountain back from the ocean. Large, shimmering boulders lay in the wake firing off immense pillars of water as the waves crashed.\n\n\"Oh my God! This is perfect!\" chimed my sister, her eyes sparkling.\n\nI smiled back. \"Glad you like it. Let's get set up. We got a lot to do with little daylight left.\"\n\nIt didn't take us that long to get all squared away. We set up the dressing room which was quick and easy, and even went as far as to weigh it down with some loose rocks. The wind had picked up and the last thing we wanted was to go chasing into the ocean to grab some shower curtains. Kelly set up her temporary garment rack right next to the room, making sure that all of the dresses and suits were not wrinkled and were ready to wear.\n\n\"Okay Mom, here's your first look,\" Kelly said as she handed her a red polka dot summer dress. \"Figure we'd start with a cute one.\"\n\nMom smiled and went into the changing room. As she got ready, I inspected my equipment.\n\n\"Damnit. Looks like the tripod's busted after all,\" I said in as I tossed the unit on the sand.\n\n\"Is that going to be a problem?\" Kelly asked.\n\nI shook my head. \"Not really. Probably really wasn't needed anyway, but I always like to have my options. I can fix it back at the studio.\" I grabbed my Digital. \"Almost ready?\"\n\nAs if on cue, Mom emerged from the dressing room with a \"Ta-da!\"\n\nI couldn't help but whistle. The dress was adorable, sleeveless and with the skirt falling just below the knee and an almost too deep V for the neck line. At first glance, it seemed a little conservative, and yet, somehow, it crossed the line into flirty. She almost appeared to be painted on a B52.\n\n\"So,\" she said while walking up. \"How do you want me?\"\n\n\"You just do your thing,\" I said. \"You're at the beach. Go play.\"\n\nWith a tilt of her head, she smiled, winked, and then took off running through the shallows, leaving trails of sand and water flying in her wake.\n\n\"Oh shit,\" I said running after her furiously clicking away while Kelly laughed and prepared the next look.\n\nIt was one of the best times I've ever had on a shoot. She was an absolute natural with an uncanny ability to switch from pose to pose with ease. We got action shots and power poses and sultry seduction. She'd lay in the sand or jump in the air. Distant shots of her standing on the cliff's edge, or close-ups of her biting her lip while staring at the camera. We went from one dress to another to another and more still. Blouses, skirts, boy and Bermuda shorts. We were like a machine, power changing and clicking away. It was without a doubt the best time I ever had on that beach.\n\n\"Good news Big Brother, first looks are done!\" Kelly exclaimed as she walked up to me as I reviewed the pictures on the camera.\n\n\"That's awesome!\" I said looking up. \"We got some really solid ones I think you're gonna love.\" I examined my watch. \"Looks like we have about an hour and a half until sunset. I might need you to hold the reflector for me so we can reflect some light if it gets too dark.\"\n\n\"Sure thing,\" she said. Something was on her mind.\n\n\"She changing?\" I asked.\n\nKelly nodded. \"Yes sir. She's trying on the first Swimsuit. And actually, about that...\"\n\nI powered the camera off. \"What's wrong? It doesn't fit?\"\n\n\"It fits fine. It's just something we really didn't plan for.\"\n\n\"Then what is it? It's too skimpy for mom?\"\n\n\"Well, no. I mean yes it's pretty revealing, but she doesn't seem to have an issue with wearing it. It's just... She didn't shave down there.\" Kelly waved her hand in front of her lady parts.\n\nI blinked. \"Come again?\"\n\n\"Look, she's a little embarrassed about it. I told her you can probably fix it when you edit the photos.\"\n\n\"How bad is it?\"\n\nShe tapped her foot. \"I don't think she's ever done it, to be honest. I mean, it's nicely trimmed, but it's still puffing the fabric and... Do you want to see? It's kinda weird with me describing it.\"\n\n\"You think me studying Mom's crotch is less weird?\"\n\nShe shrugged and laughed. \"I really don't know.\" She looked at me. \"Tell you what; she can probably hear us anyway so let me ask her if she's comfortable with you taking a look.\" She turned and began walking away.\n\n\"Whoa! Wait a second!\" I said chasing after her but she was already there.\n\n\"Mom it's me. Jason's here and I told him about the situation.\" Kelly said looking at me.\n\n\"Oh great,\" Mom said through the curtain.\n\nKelly indicated I should speak.\n\nI looked at my sister and shook my head. \"Hey mom, it's Jason.\" I couldn't help but roll my eyes. \"Kelly's saying you're concerned about... Look, we're adults, at least you and I are.\" Kelly scoffed at my remark. I continued, \"Do you want me to take a quick look.\"\n\nShe hesitated. \"I don't know.\"\n\nI shrugged, looking at Kelly. \"You know, we got a lot of shots today, and I think some really solid ones. Let's call it a wrap and finish the rest next week.\"\n\n\"No-no-no-no-no!\" Kelly stammered. \"I can't do that, these need to be in by Tuesday.\"\n\n\"Sorry Kiddo,\" I said to Kelly.\n\nWe heard Mom sigh. \"Honey, it's fine. I'll just take care of it in here. Do you have any scissors or something?\"\n\n\"Yeah, I have-\" Kelly's eyes went wide. \"Shit,\" she said scurrying to her kit. \"God damn it!\" She began to rip through her tiny pink bag.\n\n\"Kelly, what's wrong?\" I asked.\n\n\"I'm an idiot, that's what,\" she said. She stopped and looked up at me. \"I fucking left them on the counter.\"\n\n\"Are you sure?\" I asked.\n\nHer lips tightened. \"Yup,\" she nodded. \"I remember setting them down after final touch ups.\" She laughed at herself. \"I even made a mental note to put them in the bag. Fucking rookie.\"\n\nMom's voice carried over to us again. \"Look, it's not a big deal. I can just tuck it in or something.\" I had to shake my head. Never thought the three of us would be having a critical conversation about Mom's pubic hair.\n\nNow, don't ask me how, but for some reason that sparked an idea.\n\n\"Oh shit,\" I said softly. \"I think I got something.\"\n\nKelly looked up, deflated.\n\n\"What?\"\n\n\"I got a bag in my car.\"\n\n\"You carry scissors with you?\"\n\n\"No,\" I said. \"But it is an emergency kit, so to speak.\"\n\nKelly raised an eyebrow. \"Come again?\"\n\n\"Sorry. That's what my college buddies called it.\" I shook my head. \"I got an overnight bag with a shaving kit. It might be a little closer than what you prefer Mom, but I think it will take care of our little problem.\"\n\nKelly's eyes sparkled. \"Seriously?\"\n\n\"Yeah,\" I turned to the changing room. \"Would you be okay with that Mom?\"\n\nIt was somewhat odd asking your mother if she would have any qualms with an impromptu pussy shave. What an interesting day.\n\nI could hear her sigh, then \"I guess we don't really have a choice.\"\n\nKelly's smile lit up her face. \"Mom, you are the freakin' best!\" she chimed. \"I'm gonna go grab the kit,\" she said as she turned.\n\nA sudden flash of realization hit me. I kept more in that bag than a shaving kit.\n\n\"Kelly,\" I started, \"Why don't you let me-\"\n\n\"I got it, Jason,\" she said. \"I should take some stuff up to the car anyway. I'll be back in a jiffy.\" She grabbed a bundle of clothes and started trotting up to the car.\n\n\"Kelly!\" I said as I attempted to catch up with her. \"That's not the only thing I keep in the bag. It's an overnight kit.\"\n\nShe stopped and turned back smirking. \"Really now?\"\n\nI rolled my eyes. \"Let me just-\"\n\n\"Oh no,\" she said. \"I got it. You stay with Mom and make sure you get the settings ready.\"\n\nThough I had nothing but time to kill and the settings were locked, I knew I couldn't talk her out of it.\n\nI shook my head as I handed her the keys. \"Should be under the passenger seat. Little black bag.\"\n\n\"Nice,\" she beamed. \"Be right back.\"\n\nIn less than five minutes, she was back, running up like she was clearing home plate after a grand slam.\n\n\"She still in there?\" she asked.\n\n\"No Honey,\" Mom said as she stepped out, wrapped in a towel. \"Getting a little claustrophobic.\"\n\n\"No worries, Mom.\" She held up the kit, a small black bag half the size of a shoebox. \"Guess what I got?\"\n\nMom eyed the bag with her hands on her hips. \"Fan-tastic,\" she said rich with sarcasm. \"So now the awkward part...\" Her fingers drummed against her hips. \"... I've never really shaved myself before.\"\n\nKelly and I tilted our heads. To be honest, I had no response. It never even occurred to me in this situation to ask her experience level.\n\n\"Really?\" Kelly asked. \"Not even in college?\"\n\nMom shook her head. \"I just keep it, you know, trimmed.\" She waved her hand over her privates. I chuckled knowing now where Kelly gets these gestures.\n\n\"Wow, Mom,\" Kelly said. \"You're a little more reserved than I thought. Not even a wax?\"\n\n\"No, I've done that, but it's not an option right now is it?\" she said.\n\n\"I guess not,\" Kelly sighed. \"So do you want me to do it?\"\n\nMy face had to look dumbstruck. What in God's name is going on here?\n\n\"Oh no, Kelly. That's quite alright. I just need to know... you know what? Forget I said anything. Gimme the kit.\" Mom reached out.\n\n\"Mom, it's okay. I don't mind. I mean I'd rather do it for you than have you accidentally cut yourself out here.\"\n\n\"Kelly...\" Mom started.\n\nMy sister tucked the kit under her arm. \"Tell you what; let's just go over behind those big rocks there near the water. We will have some nice privacy and Jason will stay way the hell away. You can do most of it, but I will be there to help for the tough spots.\"\n\nMom looked to me.\n\nI shrugged and waved them away. \"Hey, you girls do your thing. I'm just here to take pictures.\"\n\nMom looked down and shook her head.\n\n\"Oh fuck it,\" she said. \"Not a word of this gets back to your father, you two.\" She pointed a stern finger at my sister and I as she walked behind the rocks.\n\n\"Scouts honor,\" I called out watching my sister skip off behind her.\n\nI tried to busy myself checking and double checking cameras and settings. The lenses were ready and clear. The ISO was perfect. Plenty of room left my memory card. It had now become blatantly obvious that all I have now been doing was killing time. Problem is, that's what I needed to do. I needed to kill time, toll away moments, because any time I stop for a second, my mind instantly went to what was happening on the other side of those rocks. And with the way the day had turned out, dark thoughts corrupted my imagination.\n\nMy mother, more than likely laying down in the sand, or perhaps sitting on a large rock, her legs spread and bathing suit bottoms removed. Her eyes fixed on my sister between her thighs. Kelly's fingers holding tight the sensitive skin of Moms loins. I imagine her face close enough to smell the woman that she is. A razor gently sliding through the foam on her soft skin in hushed scrapes.\n\nThey say nothing. Eyes fixed on the task. Their breaths become deep. Long. Kelly's face is so close. Her mother's vagina a handful of inches away. She can see the glimmer of moistness shine across her lips as they begin to slowly part with each heartbeat. It's as if it is calling to her, welcoming her inside.\n\nKelly stares transfixed, inching closer and closer. Mom's scent washes over her, growing stronger with each passing moment. Kelly's mouth grows dry as her breath grows hotter, billowing across our mother's most private skin, funneling up to her moist, sensitive vagina and blowing across her shimmering clitoris. Deep and dark waves of pleasure bring goosebumps to their skin.\n\nSlowly, Kelly's tongue snakes out from between her dry lips and pushes forward, begging to taste the salty flesh...\n\n\"Hey Jason! Are you asleep?\" Kelly called out.\n\nMy mind suddenly flashed back to the present. What the hell was that?\n\n\"Shit! Sorry,\" I said shaking my head. \"All done?\"\n\nKelly was walking up to me with Mom's towel draped over her arm.\n\n\"Yes Sir!\" she chimed with a wide grin. Her cheeks and skin were bright red. \"That was so wild. I've never studied a vagina that close for so long. Got to say, Moms got a nice little cunt.\"\n\nIf I were drinking anything, I would have choked.\n\n\"Jesus, Kelly!\" I exclaimed.\n\n\"What? She does.\"\n\n\"I'm gonna add that to the list of weird shit I didn't expect to hear today.\"\n\nKelly shook off the towel, obviously proud of herself. \"I'm just saying, I'm impressed.\" With a big flick, she let it catch the breeze and gently laid it on the sand. \"I don't think it's a big deal but I didn't give her a complete clean-cut. I left a little race track right here because I think that's a little hotter.\" She traced her finger up and down her pelvis.\n\n\"How'd you do that without scissors... you know what? Never mind. I don't want to know.\"\n\nKelly chuckled taking great enjoyment out of my discomfort as she laid herself down on the towel.\n\nI slung the camera around my neck. \"Where is she now?\"\n\nShe lifted her hand gesturing to the rocks. \"Moisturizing her lady bits.\" She tilted her head to look. \"And... there she is.\"\n\nI turned to see our Mother walking up in a tight dark red suit. If she had gone for joyful radiance before, she looked mischievously tantalizing now. She looked firm; her skin had a slight tan from the day's actions. Her hair now tied up in a bun with a few loose strands falling free elongating her neck and enhancing her collar. Her breasts pressed tight against her body appearing larger than I recalled. They were held firm in two half cups suspended by a thick strap wrapped up and around her long neck. Her arms brushed against her sides with each step of her long, sultry legs. I could see her hips swing ever so slightly as she tried to maintain her better balance as she walked barefoot through the sand.\n\nI could feel my mouth going dry as I stared.\n\nShe walked right up to me, halting with a tiny jump as if coming to attention; her back straight and chest sticking out proudly. She knew she looked good.\n\n\"Awaiting orders, Sir,\" she said with a mini salute of her hand.\n\nI raised an eyebrow and took her in.\n\n\"Dear God, you look absolutely stunning!\" I said.\n\nI could see her blush ever so slightly.\n\n\"What a charmer.\"\n\nMy mind suddenly flashed back to the daydream from only moments before. I had to shake my head, clearing my thoughts.\n\n\"So, how you feeling? All set and ready?\"\n\nShe nodded as she fidgeted with her bikini bottoms. Her hand reached down as she rubbed her crotch in the most nonchalant manner. It didn't stop the knot from forming in my stomach or stop my blood from heating up.",
        "She scrunched her nose. \"Sorry, this feels kinda weird. I'm a little tingly.\"\n\nI tried to clear my throat. \"Rest assured the feeling is mutual. Shall we?\"\n\n\"Put me where you want me,\" she said with a shrug of her shoulders.\n\nI nodded, attempting to chase away taboo thoughts.\n\n\"Kelly, I'm gonna need your help.\" I said. \"You see that silver thing over there,\" I pointed to my duffle bag. \"I need you to grab it for me. You're gonna be my Bounce for these photos.\"\n\nShe got up, dusting the sand from her arms. \"Okay.... What does that mean?\" she asked as she picked up the object, a folded up disc.\n\n\"You'll see. Hold one side and give it a firm shake.\" I said and watched as she did exactly that.\n\nInstantly the tension released and it unfolded creating a large, flat disc one yard in diameter. One side was a soft white fabric, the other a highly reflective crumbled aluminum.\n\nI continued. \"Your job will be to use the sun to bounce light back into our models face. Kinda like a soft spot light.\"\n\nKelly flipped the disc around in her hands with a smile. \"This is pretty cool.\"\n\nI chuckled. \"Glad you like.\"\n\nI surveyed the area. \"Alright, so...\" looking around. \"Mom, let's start with you in standing in the surf. Kelly, I'll need you behind me, crouching low over here. Sound good?\"\n\nThey both nodded and assumed their positions. Mom, shifting her weight between one foot and the other as waves washed up behind her. Kelly, squatting down, the reflector in front of her illuminating our mother. The sun was my last fear, as it had just begun to set.\n\n\"Okay, we are going to have to do these real fast with quick changes. We have about an hour light left.\" I said.\n\nThey both nodded.\n\n\"Alright, Mom, look right here. Remember how we made the last looks more fun and flirty? Well these need to be more flirty than fun. You good with that?\"\n\nShe smirked, placed one hand on the small of her arched back, pushed her ass and chest out as she leaned forward.\n\n\"Like that?\" she asked.\n\nI could hear Kelly giggling behind me. \"Our Mom's the best.\"\n\nI shook my head in disbelief. \"Perfect,\" I said and started snapping away.\n\nThe hour blew by in a heartbeat, though I had begged for each second to remain longer. I couldn't determine what was more enthralling; watching our mother through my view finder, or catching her between shots with my own eyes. She was like a different person, as if something she had caged up had been released.\n\nShe began to sway in place, rocking her hips to songs that only she could hear. Her eyes fixed to the lens, beckoning for the viewer to come closer. Her lips would purse, or part to allow a deep breath, or even feel the momentary caress of her tongue if she felt inclined. She toyed with the camera, toyed with me, even Kelly who never said a word except during changes which were not that frequent. But, true to their promises, were quick and expedited. Perhaps due to the sparsity of covering, but it felt like only a second would pass from when she went in to when she came out wearing another suit always slightly more suggestive then the previous.\n\nShe had been wearing the last suit, a light blue string bikini when we moved to the boulders. She leaned against a rock, looking at us over her shoulder. The fabric framed her ass perfectly. Tight, and curvaceous. A string from the tie hung low and brushed against the shelf of her buttocks as it blew in the breeze. I couldn't help but grow jealous.\n\nCLICK\n\n\"Beautiful,\" I said rotating to portrait.\n\nCLICK\n\n\"Lift your chin up a little.\"\n\nCLICK\n\n\"Nice. Hold it.\"\n\nCLICK\n\n\"Now shift your weight and lower your right arm a little.\"\n\nCLICK\n\n\"Good. Now a little more.\"\n\nCLICK\n\n\"There you go. Perfect\"\n\nCLICK\n\nCLICK\n\nCLICK\n\n\"Perfect,\" I whispered.\n\nCLICK\n\nShe was certainly a sight to behold. Tempting. Alluring. Captivating and so much more, yet at the same time, in the back of my head, I kept having to remind myself that this was our mother. The woman who birthed us, raised us, and supported us all our lives. I had to keep reminding myself over and over because it was in those moments when I stopped, that my mind began to wonder what her skin tasted like. How it would feel to run my fingers through her hair. To nibble on her neck or feel the weight of her ass cheek in my palm.\n\nCLICK\n\nCLICK\n\nCLICK\n\nKelly's voice suddenly broke the sounds of the shutter.\n\n\"Mom, can we try something?\" she asked.\n\nCLICK\n\n\"What is it baby?\"\n\nCLICK\n\nKelly shifted her weight, keeping the remaining light from the setting sun upon our mother.\n\n\"While you face that rock, could you maybe reach back and untie the top?\"\n\nShit Kelly, you are not helping my situation.\n\nCLICK\n\nShe continued, \"Don't worry, we won't see anything.\"\n\nCLICK\n\nI couldn't believe my sister would ask that, but I was even more shocked to see Mom's fingers slowly sneak back and latch on to a strand, and then gently, slowly, pull it free. With a soft snap, the knot came undone leaving Mom's bare back exposed.\n\n\"How's that?\" she asked her daughter while looking at me.\n\n\"That's hot, Mom. Very sexy,\" Kelly said.\n\nI couldn't help but take in her form. Though she was not completely topless, save only a strand wrapped around her neck, her open back was incredibly sexy. I feared I was losing a battle within myself. I almost forgot to continue.\n\nCLICK\n\nCLICK\n\nI heard Kelly's voice again. \"Now take a step back, Mom.\"\n\nShe did.\n\n\"Now one more.\"\n\nShe did again.\n\nCLICK\n\n\"Now lean forward, keeping your legs straight.\"\n\nOur mother reached her hands out and slowly walked her palms down the boulder, pushing her ass out to us. The fabric tightened around her waist pressing deep into her crotch. It clung so tight, so snug against her that I could just begin to make out the shape of her woman hood. The edges of the fabric shimmered, more so on the moisturized skin deep within her inner thigh. The logical part of me blamed the mist of the waves that hammered the rocks, or even the lotion she had applied earlier. But then again, I couldn't help but wonder if this glimmering skin, this moisture was dripping from excited lips beneath the bottoms.\n\nA soft breeze brought something new to my attention. Her top swung low leaving her chest hidden in the shadows. Her breasts were hanging free, the undersides softly illuminated by Kelly's light. My eyes strained, searching deep in the dark for the rest of her. Perhaps it was that desire, that carnal and taboo lust that convinced me, but for the briefest of moments, that I saw her nipples, hard and dark and prickled with the same goosebumps that rippled across her skin.\n\nCLICK\n\nCLICK\n\nCLICK\n\nCLICK\n\nCLICK\n\nSlowly, to the beat of the crashing waves, she stood back up, her top falling into place covering her chest. She rotated, facing us and retreated to the rock, arching her back against the surface.\n\nHer hips rocked back and forth as her hands rubbed against her skin.\n\n\"How am I doing, Jason?\" she asked.\n\nCLICK\n\nMy blood pumped as I watched her hips sway.\n\n\"Perfect.\"\n\nCLICK\n\nHer hand snaked up across her stomach, fingers trailing across her skin.\n\nCLICK\n\n\"Raise your hands higher,\" I said.\n\nSlowly they rose.\n\nCLICK\n\n\"Cup your breasts,\" I said.\n\nHer hands went over the top.\n\n\"No,\" I said. \"Go under.\"\n\nCLICK\n\nHer eyes fixed on mine as if seeing me through the lens. Slowly she snaked her hands beneath the top, caressing each tit with her hands. She squeezed, and began breathing harder.\n\nCLICK\n\nShe raised an eyebrow. \"Still think I'm reserved?\"\n\nCLICK\n\n\"Fuck no,\" I breathed, perhaps a bit too loud.\n\nCLICK\n\nHer breath caught short, as if she had tweaked her own nipples. I paused and looked at her over the camera. She winked at me.\n\n\"Anything else?\"\n\nCLICK\n\nMy mind went a mile a minute as I began to feel my stomach tighten again.\n\n\"Bring your hands to your hips,\" I said, and she did.\n\nCLICK\n\n\"Hook your thumbs into the straps on each hip.\"\n\nShe slipped her right thumb into the waistband.\n\nCLICK\n\n\"Both hands.\"\n\nShe hooked the left side.\n\nCLICK\n\n\"Good. Now pull them out just tad.\"\n\nShe did, lifting the waistband away from the skin.\n\nCLICK\n\n\"Perfect. You're such a natural, Mom,\" I said.\n\n\"Same to you,\" she replied.\n\nCLICK\n\n\"Now, without going too far, pull them down just half an inch. Make it look like you were taking them off.\" I said as I squatted down.\n\nMom hesitated for a moment, and then peeled back the waist just one tantalizing inch, revealing an extra strip of skin I had never seen before. The band had resealed just below her hip, showcasing the slope of her pelvis before it disappeared under the covering.\n\n\"How's that?\" she breathed.\n\nCLICK\n\n\"Perfect. Absolutely perfect.\"\n\nCLICK\n\n\"Now,\" I smiled, \"Go ahead and pull them off,\" I joked.\n\nMom stopped, looked at me a moment. Then, before I could apologize, her hands moved lower, taking the bathing suit with it.\n\nKelly's breath caught in her throat as we both stood transfixed, watching our gorgeous mother slipping her panties off. I began snapping away, photo after photo; I didn't want to miss a fraction of a second. It was intoxicating, watching the fabric peel off her skin, rolling backwards like peeled fruit, which in many ways it was.\n\nLower and lower she went until suddenly a thin line of hair appeared; Kelly's masterpiece. It was almost like a beacon lining up my vision and letting me know what was to come, and based on the sudden throbbing in my shorts, my cock was begging to know as well. And there it was, the final moment where I knew in one second's time, I would be seeing the loins from whence I came, and the most anticipated region I had ever wished to see. Just one second more.\n\nIt was then that she stopped, and in one fluid motion, pulled the suit back up in place.\n\n\"There you go,\" she said with a wicked smile. \"All done.\"\n\nI sat there dumbfounded. This must be the visual equivalent to blue balls.\n\n\"You're such a tease, Mom,\" Kelly laughed behind me. I had honestly forgotten she was there.\n\nMom walked toward us, retying her suit behind her back. She was so very proud of herself. She stood over me with the biggest shit eating grin, leaned down and kissed my head.\n\n\"That was so much fun,\" she said. \"Thanks for talking me into this.\" She rubbed my head, the same way she would when I was five.\n\nI chuckled to myself, shaking my head as I stood. \"Hey, it's what I do.\"\n\n\"And you do it well.\" She stood up straight, hand on hips. \"Now, who's hungry?\"\n\nChapter 3.0\n\nOver an hour later we found ourselves at a crowded bar... or perhaps it was more of a pub? Regardless, it was much closer to home. The walls were paneled in what appeared to be a deep cherry wood dimly lit by small rectangular wall sconces. There were no booths, only tables of thick oak, where not a one had gone unscathed by carved vandalism.\n\nWe sat at one of these tables along the wall, each with hamburger, a full pint and a single pitcher of ale in the middle.\n\nI raised my glass. \"Here's to your first shoot as a designer, and yours as a model!\" I cheered over the ever constant murmur of the crowd.\n\nThey both smiled wide, holding up their glasses as we clinked them together and took a deep swig.\n\n\"Wow!\" Mom exclaimed, \"That's strong! What is it?\" She indicated to the beer.\n\n\"It's an IPA, Mom,\" Kelly stated wiping her lips of suds. \"It's a strong beer so go easy.\"\n\nMom seemed to scoff. \"Oh please, I've been drinking since before you were born.\"\n\n\"Okay... Just warning you,\" Kelly backed down.\n\nWe turned our eyes back to the bar. Though it was Friday, it seemed pretty active for this early in the evening. The other two must have been having the same thought.\n\n\"It seems a bit packed for a dive bar to you?\" Kelly asked.\n\nMom looked around, holding with two hands a monster sized hamburger. \"I'm not sure. Never been here before,\" she said before taking a monster sized bite.\n\nI was about to say the same when I spotted a slightly overweight bearded man in a plaid shirt grab a microphone. He held in his other hand a well used notebook, corners bent and darkened.\n\n\"Ladies and Gentlemen it is that time of the week!\" The announcer's voice reverberated throughout the pub to scattered hoots, hollers and applauds.\n\n\"Oh shit, is it karaoke?\" Kelly groaned.\n\nI shook my head. \"I don't think so...\"\n\nMom and Kelly looked at me quizzically.\n\n\"Trivia Night.\" I said as I pulled out a pen and pad of paper from our condiment stand.\n\n\"It's Friday night Trivia!\" our bearded friend confirmed. He sounded like he was announcing a boxing match. \"Make sure each team has a pen and paper. Four members per team. No cell phones, tablets, laptops, or any item that takes batteries. Twenty questions in all. Tie breaker goes to the best team name by applause.\"\n\n\"We doing this?\" Kelly asked as I flipped to a blank page.\n\n\"Sure,\" I said. \"Why not? It'll be fun. You down, Mom?\"\n\n\"Mm-hmmm\" she said while finishing off her meaty sandwich.\n\n\"Jesus, Mom!\" Kelly exclaimed in disbelief. \"You destroyed that thing.\"\n\n\"Momma was hungry,\" she said licking the sauce off her fingers.\n\n\"You don't say...\" I mumbled in slight disbelief.\n\n\"Question number one,\" he bellowed. \"What famous...\"\n\nI'd like to say we decimated the competition, but to be honest with you, I have yet to go to a trivia night at any bar and say \"Wow, that was easy.\" Luckily, between the three of us, we at least played to our strengths. We felt pretty solid on thirteen out of twenty, and were shooting for the moon on the rest.\n\n\"So we feel good on this?\" I asked handing the sheet to Kelly for her review. She glanced over the answers.\n\n\"As good as we'll ever be. Mom?\" She handed it to her.\n\nShe just smiled and held up her hand signaling 'okay'.\n\n\"Okay then... Shit! We need a team name!\" I exclaimed.\n\n\"Just put 'Team Awesome' or something,\" said Kelly.\n\n\"Wow, seriously?\" I looked at her. \"I'm trying not to be an asshole and all here but that is probably the lamest team name I've ever heard.\"\n\n\"What's it supposed to be then?\" she asked.\n\n\"Anything. Best ones are witty in some way. It's a bar, play to the audience.\"\n\n\"Something dirty then,\" Mom chimed in.\n\nKelly and I shared another look.\n\n\"Well this can get awkward real fast,\" I said.\n\n\"Quit being so uptight,\" Mom said with a slap. \"How about.... Friday Night Threesome.\"\n\nWe shrugged. \"It's okay. Miles closer than 'Team Awesome',\" I joked. Kelly retaliated by throwing a french fry at me.\n\nI tapped the pencil against the table. \"Hmmm... Periodic Table Dancers?\"\n\nThey chuckled and shook their heads.\n\n\"Ass is the New Vag?\" Kelly threw in. Mom raised an eyebrow.\n\n\"I like it, but...\" I said to which both Mom and Kelly laughed.\n\n\"Cunning Linguists?\" Mom threw out.\n\nI laughed out loud.\n\n\"I missed something here,\" Kelly said.\n\n\"It sounds like cunnilingus,\" I informed my sister. Her furrowed brow remained.\n\nMom sighed. \"When a guy eats you out, honey.\"\n\n\"Mom!\" Kelly said, cheeks blushing.\n\nMom just shrugged. \"You're the one who likes the ass.\"\n\nOur announcer was rounding the tables collecting the answers. He was one away from ours.\n\n\"He's almost here, just give me something.\"\n\nKelly shrugged. \"I don't know, 'Fuck Condoms'. Just put that.\"\n\n\"I am learning so much today about you two,\" Mom joked.\n\n\"Here he comes,\" I said as he approached.\n\n\"Fuck it. Just do the ass,\" Mom said.\n\n\"I really wish I heard the beginning of this conversation,\" the announcer stated as he approached our table. I wrote down our team name and handed him the pad. He read it over, chuckled and couldn't help but eye my two companions. He walked away with an approving nod to me.\n\n\"What'd you put down?\" Kelly asked.\n\n\"I went with yours. 'Ass is the New Vag'.\"\n\nMom seamed to sulk as she poured another glass. \"I really liked Cunning Linguist.\"\n\n\"I feel like we are learning so much about you two,\" I said. Seriously, oddest day of my life.\n\n\"Mom,\" Kelly said, \"Your phone.\"\n\nMom's arm was illuminated by a soft glow coming from the screen of her smartphone.\n\n\"Oh shit. It's a voicemail. I didn't even hear it ring.\" She grabbed her device and left the table.\n\nKelly and I were left alone.\n\n\"Well Sis. It's been a long day. I hope it turned out the way you wanted.\"\n\nShe shrugged, holding her beer with two hands. \"We shall see. It was a lot of fun though.\" She smiled. \"How long until the photos are ready?\"\n\n\"I was hoping to do some tomorrow and the next day if need be. I don't really have anything else on my plate that's as time sensitive.\" I poured myself another pint. \"Actually, with the way the night's going, I might as well stay at the house. I left my computer there so I can stick around.\" I leaned back in my chair.\n\n\"That would be awesome!\" Her eyes shimmered brightly. \"Thanks again,\" she said, \"I mean it; you are a life savor. I would be so screwed without you. And, it was soooo much fun.\" She raised her glass. \"Here's to a wonderful day.\"\n\n\"My pleasure,\" I said as I clinked my glass to hers.\n\nHer fingers drew shapes in the condensation of the glass.\n\n\"Jason, can I ask you a question?\"\n\nI nodded.\n\n\"You're not dating anyone, are you?\" she asked, though it felt like more of a statement.\n\nI took a deep breath. \"Not really. I tend to stay really busy. Especially as of late.\" Unfortunately, it was true. \"Why do you ask?\"\n\nShe shrugged. \"I don't know. Curiosity, I guess... I found your condoms in your overnight bag. Did you know they have an expiration date?\"\n\n\"I did, but I don't think-\"\n\n\"They expired last November.\"\n\nI raised an eyebrow. \"No shit?\" Well that's embarrassing.\n\nShe nodded, smirking. \"So I take that to mean Big Brother hasn't been getting any?\"\n\nI rolled my eyes, sighing, \"Nope.\"\n\n\"Not even from the models?\"\n\n\"Mm-mm,\" I replied. \"I mean don't get me wrong, I've tried, but I don't know what it is. Kinda in a slump but at least my work keeps me distracted.\"\n\nKelly nodded. \"I hear ya there.\"\n\n\"Really?\"\n\n\"Yup,\" she said. \"Been focusing on school so much that I haven't had the chance to go out and meet some boys.\" She chuckled, \"It's funny, because sometimes I'll watch a movie or read a story or stumble upon something dirty online and I'm like BAM, instantly horny. So I'll either go downstairs and work, or work on my downstairs,\" she said with a wink. \"Some of the stuff mom wore today was created in a fiery urge to fuck.\"\n\nIf I had been drinking something, I would have spit it out right then and there... for the second time today. Kelly didn't seem fazed.\n\n\"I'm surprised Dad hasn't wondered why we go through so many batteries these days.\" Her eyes focused on nothing as she picked up her dill pickle and took a crisp bite. \"So Big Bro, how long has it been?\" she said, turning her attention to me.\n\nI tilted my head. \"Since my last...\"\n\n\"Bonin',\" she smiled.\n\nI took a deep breath, eyes looking to the ceiling as I traced back my memory. \"Probably over a year.\" I brought my gaze back to her. \"You?\"\n\n\"Close to the same, give or take a week. I stopped counting after six months.\"\n\nI laughed. \"What a sad bunch we both are.\"\n\n\"I know, right?\" she responded. \"I guess it's good that you don't shoot nudes or you'd probably have a heart attack. Been a while since you saw a vah-jay-jay,\" she teased.\n\nThen her eyes narrowed as she scrunched her nose and smiled.\n\n\"It's too bad.\"\n\n\"What?\"\n\nA mischievous sparkle twinkled in her eye. \"It's too bad you didn't get to see my handy work with Mom. Would have fixed that problem right away.\"",
        "I set my glass down. \"Man, Kelly, what is your obsession with getting me to see Mom's... business?\"\n\n\"I'm not obsessed!\" she said. \"I've barely even brought it up.\"\n\n\"The fact that you've brought it up is bizarre enough on its own.\" I laughed. \"And, you've brought it up twice now.\" I said raising two fingers.\n\n\"Have I?\" She leaned back in her chair. \"You're probably right. I don't know why it's on my mind still,\" she said with a shrug. \"It was just so cool. I've never studied another vagina besides my own before. I mean it was different, but also very similar to my own.\" Her hand unconsciously traveled to her crotch, giving it a light squeeze. \"Oh my gosh it sounds so dirty!\" she giggled, \"I'm so bad.\"\n\nI raised an eyebrow. \"Sounds to me like you are thinking of pitching for the other team.\"\n\n\"Fuck no, I love the cock,\" she blurted out, and I rolled my eyes. \"But, can you keep a secret?\"\n\nI looked in her eyes; a fire seemed to be slowly burning. I nodded.\n\nShe took a final swig of her drink. \"I touched her pussy.\"\n\n\"What?\" I asked, leaning in.\n\nShe did the same. \"I did! I touched her pussy when I was shaving her. It was so wild. I never thought I'd be in that position, but there I was, kneeling between Mom's spread legs with my face inches from her cunt.\" She put emphasis on the final word, as if enjoying the feel of it as it came of her mouth.\n\nMy heart began pounding as visions of my day dream came sweeping back.\n\nShe continued. \"She didn't seem to be too concerned about how close I was, or maybe she was, I don't know. She just joked about how maybe she should get me some glasses. I laughed, but to be honest with you, I was captivated by the moment and it felt kinda like instinct or something that brought me so close.\"\n\n\"Oh Jason, I could smell her,\" Kelly said in a deep voice, her hands gripping the edges of the table. \"It had that deep and heavy and sweet scent all at once. Kinda like sweat and honey, it's tough to explain. I don't know why, I felt my mouth water.\"\n\nThis was getting deep. I could feel my neck pulse, with each beat of my heart as I leaned against the table with crossed arms.\n\n\"And you touched her?\" I asked.\n\nKelly blinked slowly and nodded. \"It wasn't really intentional. I mean I didn't mean to but it was the final pass, and I was swiping the blade over the hump of her mound. I was using my other hand to hold her tight so that it was as close a shave as possible. When I let go, my hand slipped down, right between her thighs and my fingertips slipped across her lips.\"\n\nKelly's chest was heaving.\n\n\"Mom's breath caught in her mouth, as did mine. Her lips had parted for me; my middle finger had actually been inside her! It was only for a second, maybe even half of that, but it was enough time for both of us to know.\"\n\nMy mouth felt dry. \"So what did you do?\" I asked.\n\nShe laughed. \"Nothing. We both started mumbling, she said 'Thank you', I think, and I let her finish up the rest. I mean, part of me wasn't really sure that it really happened. It wasn't until I was walking away that I notices a tiny little strand of liquid clinging to my middle finger.\"\n\nShe was looking at me now. Waiting for me to ask the next question.\n\n\"So, did you... what did you do?\"\n\nShe smiled, eyes fixed on my own. \"Are you asking if I licked it?\"\n\nI nodded.\n\nShe shook her head. \"Mm-mm.\" she said, and then her eyes sparkled with a mischievous twinkle. \"It was pussy juice,\" she said in a whisper. \"I put it in my pussy.\"\n\nI stared at her, speechless, dumbfounded.\n\nKelly started laughing.\n\nI shook my head. \"You little...\"\n\n\"God you are so easy sometimes,\" she chuckled. I couldn't recall the last time I had seen her so pleased with herself. She managed to compose herself. \"That was fun,\" she said, then shivered and started fanning herself with her hand. \"Kinda got myself worked up there too. I mean look!\" she said raising her arm, showing me the tiny bumps that prickled their way up and down her arm. She made no mention of the two little bumps now protruding from her breasts.\n\n\"You kids behaving yourselves?\" Mom asked, startling the both of us as she took a seat.\n\n\"Welcome back, Mom.\" Kelly said as she munched on her fries. She began wiggling in her seat. \"We were just talking about y-\"\n\n\"Everything okay?\" I interrupted.\n\nMom looked up to me and put on her smile. \"Yeah. It was just your father.\"\n\n\"You were gone a while.\"\n\n\"I know. We were trying to work something out.\" It was tough to tell in the low light, but her cheeks appeared a little flushed. \"His meeting went well and they are out celebrating.\"\n\n\"Well that's great, right?\" I said.\n\n\"Mm-hmm,\" she nodded and finished off her beer. She seemed somewhat distracted. Then, suddenly, she sat up straight. \"So have they announced the results?\"\n\nI blinked.\n\n\"Not yet,\" Kelly replied looking around the room. \"I don't see the guy anymore. Maybe there's a couple more tables somewhere.\"\n\n\"Goodie,\" Mom said as she poured the last of the pitcher in the glass. \"So what were you kids talking about while I was gone?\"\n\n\"Not much,\" I said with a shrug.\n\n\"Yeah,\" Kelly said. \"Oh, except I was just telling Jason about how I helped sh-\"\n\n\"Ladies and Gentlemen, the results are in,\" the announcers' voice bellowed across the tiny pub.\n\nHe read off the answers, and we followed along to the best of our ability. Our responses were pretty much what we expected, though we were pleased with a two impulse answers that much to our surprise turned out correct. In the end, we were sitting pretty with fourteen correct.\n\n\"And now, the winners!\" he called out.\n\nOne by one he listed the teams and announced their scores. I was a little surprised to hear the points start off so low. The teams were pretty amazing and ranged in creativity. There was 'The Trivia Trollops', 'Kings of Kegels', 'Win or Lose, We Still Booze', and many more, some being rowdier than others. Yet as he announced, we were getting more and more excited because our team name had yet to be called. And then he said it.\n\n\"And with fourteen points, we have a three-way tie for second place!\" he called, leading to murmurs in the crowd. \"When I call your team name, please stand up.\"\n\nMom, Kelly and I all shared a look. It may have to be read to others like 'Oh shit.'\n\n\"First up; My Couch Pulls out, but I don't!\" He called, leading a group of four large frat boys to stand up and cheer. I kinda liked their name.\n\n\"Next; Save a Tree, Eat a Beaver!\" the crowd burst out laughing as a mixed group of four stood, clapping and throwing each other high fives.\n\n\"Finally; Ass is the New Vag!\" he said as the room erupted in laughter and cheers.\n\nWe looked at each other with wide, shocked grins and slowly stood. I could feel the eyes of the crowd turn to face us. What a sight it must have been to see me beside my sister and mother, though I had a sneaking suspicion, no one knew our relations. As a matter of fact, we should be proud! I mean why not for there I stood, a young man with two incredibly gorgeous women who, according to our team name, like to keep it adventurous.\n\nWe looked at each other, cheeks flushed and border-lining embarrassed when it seemed that all at once, we shared the same thought. 'You know what... Fuck it!'. We turned around, facing our audience and stood there, filled with pride and righteousness. It was our decision, and we're gonna own it. Kelly had her fist in the air, nodding sternly as if to say, 'Fuck yeah! Ass IS the new vag, bitches!' Even our mother got behind it yelling out 'Damn right!' It was a sight to see.\n\n\"Alright everyone, by a show of applause, who takes home second?\" Our announcer spoke. \"Let's hear it for 'My Couch Pulls out but I don't!'\"\n\nThe crowd cheered, jeered and yelled. We too applauded, though softly.\n\n\"How about 'Save a Tree, Eat a Beaver!'\"\n\nThe sound of clapping grew the cheers intensifying.\n\nOur announcer chuckled, turning his hand to us.\n\n\"And last, 'Ass is the New Vag!'\" he said, but was cut off abruptly by the roar crowd. A dozen or so were on their feet, including the party of Frat Boys who cheered louder than the rest.\n\n\"There you have it! The tie and second place go to 'Ass is the New Vag!'\" He cheered causing us to laugh and high five each other.\n\nOur emotions were high, adrenaline kicked in.\n\n\"That was fucking awesome!\" Kelly shouted leaning across the table as the crowd still applauded. Mom and I were nothing but smiles.\n\n\"And finally, in first place; 'What's Trivia Night?'\" He called out turning his hand to a seated group of wide-eyed elderly individuals, mouths agape and staring at the bar in disgust, shock, and disbelief.\n\nThe announcer brought over a fresh pitcher of beer, the rewards for second place, then walked away laughing, though not before giving me a knowing slap on the back. We were only able to finish half of it, before we decided to call it quits for the night. We paid our tab, filed into the car with Kelly getting behind the wheel. Mom and I fell into the back, me on the far right and her in the middle. She brought her feet up to rest on the seat as she leaned into me, closing her eyes and thanking me for a wonderful day\n\nI leaned against the door and wrapped an arm around her waist, holding her close. I could feel Kelly's eyes from the rear view mirror staring back at us for a moment before I caught her gaze. She smiled, winked, and pulled out of the parking lot.\n\nAs we drove down the road, my eyes couldn't help but travel down our mother's body. Her dress had ridden up her thighs, and though I had seen more of her only a few hours ago, I found my vision fixed to the pale orange beams from the street lights as they traveled up her exposed flesh. I closed my eyes, feeling her weight as she snuggled closer, the scent of sea salt lightly drifting from her hair. This day was over, our first photo shoot done. And though my thoughts turned to hungered anticipation for my day of editing, I would later find out my scheming sister had already been planning our next shoot.\n\nChapter 4.0\n\nI awoke to a quiet house with a pounding headache and the feeling like all the water that was in my body had been sucked out in the middle of the night. My tongue felt thick, my skin dry, and my thoughts felt like they had to wade through a dense fog to become actions. Somehow, I was at least able to sit up and put my feet on the floor.\n\nI was in my room, well what used to be my room at least. It had been converted to a guest room or sorts. All the furniture had remained the same; the bed, dresser, shelves, all those had been mine all through high school. Everything else in the room that had given it personality was gone. No posters or photos; all had been replaced with generic books and oddities you might find at a Home &amp; Garden store. Though it looked different now, it still had the same feel I remembered. Perhaps that's why I was able to navigate it so well in my drunken stupor last night. But, who knows?\n\nMy eyes continued around the room, settling on my nightstand. A full glass of water sat beside my charging phone. Well, that settles it; I at least had help. I was in no state to plan ahead with any sort of morning hydration, let alone charge my phone. I grabbed the glass and downed the contents.\n\nIt was absolute bliss. Hands down, the best water in the world. So refreshing and thick and blessed by every god that was ever conceived. It tasted pure, fresh, and heavenly, like liquid ambrosia. I felt like a sponge made wet, finally become useful as my senses slowly started to return.\n\nThough I may have had help up into the room, I definitely did not have help changing. I sat there still in my jeans, shoes beside the bed. My shirt for the most part was off; only one sleeve still remained on. So, for a brief moment I felt like an idiot. How drunk was I that I couldn't successfully remove my own shirt? I put it back on and meandered straight to the restroom.\n\nIt was only 8am but I was already wide awake and there was no going back. Kelly and Mom were still out like a light, my sister proving this by slow heavy breathing accompanied by the occasional snore as I passed her cracked door, silent and barefoot. Mom's door on the other hand, was wide open.\n\nShe had been just a tad more successful in prepping for bed for she had been laying face down on the covers, resting on her arms in nothing but her panties. For the second time in two days, her naked back was presented to me, but this time, it felt different, more intimate. Her head was turned away from me, and perhaps that was why I lingered in her doorway allowing my eyes to travel up and down her body without fear of reprimand.\n\nHer legs were so smooth, now with a slight tan thanks to our time in the sun. Toned, and shapely. My pulse quickened as I gazed higher up, falling into the tiny shadows of her inner thighs. Her panties were black briefs that seemed to be pulled up a little tighter than they should be. They framed her cheeks perfectly, showcasing the perfect round globes of her buttocks. The curve of each cheek running out and around; forcing the eye to travel inwards to her loins.\n\nHer breath suddenly caught in her throat, shaking me from my lecherous stare. She stirred, mumbled something inaudible to herself and readjusted her arms. A moment later, her heavy, even breathing continued once more as she drifted back into a deep sleep.\n\nI backed away from the doorway, my senses suddenly on high alert. What the hell was wrong with me? I was just checking out my mother... again! I shook my head, and immediately regretted doing so as the hallway spun. Bracing myself on a wall, I slowly made my way downstairs, being ever so thankful for the coffee I knew awaited me.\n\nWithin ten minutes, I was pouring a cup when I heard the sounds of footsteps coming downstairs.\n\n\"Hey, look who's up,\" chimed the voice of my sister behind me. \"I would love a cup, thank you.\"\n\nI turned my head and smiled. \"Good morning to you too,\" I said, seeing her there in a pink tank top and polkadot pajama pants that hung low, hugging her hips. Her hair was as disheveled as my own. I grabbed a second mug from the drying rack. Filling it up, I handed the steaming liquid to my sister.\n\nShe grabbed the mug with two hands smiling through heavy eyelids. She pursed her lips and blew across the surface. \"Thanks,\" she said and took a loud sip. \"Oh my God that's amazing... How'd you sleep?\"\n\nI took a seat at the counter of the island in our kitchen. \"I was out like a light. I don't even remember getting in the room.\"\n\nShe laughed and sat down opposite me. \"I'm not surprised; you were a pain in the ass to get up there anyway.\"\n\n\"So it was you.\"\n\nShe nodded. \"Yep. Both you and mom passed out in the backseat, all snuggled up like prom dates.\"\n\nI raised an eyebrow. \"Prom dates, huh? Is that a thing?\"\n\n\"It is now.\"\n\n\"Well thanks for the help,\" I said as I stretched my back. I could hear vertebrae crack. \"You help Mom too?\"\n\n\"Yes sir. She was easier but was much further gone than you.\" She stretched her arms up, arching her back as well. Her breasts pressed hard against the tank top, threatening to rip their way out.\n\nI diverted my gaze back to my mug. \"You might want to close the door next time when you leave,\" I said.\n\n\"Awe now, why would I do that?\" she said, settling back down. \"I wanted to make sure you had something nice to see when you woke up.\"\n\nI looked up to find her smirking. \"First off, gross,\" I said. \"Second, there's nothing to see that I didn't see yesterday.\"\n\nKelly squinted. \"She didn't go completely topless at the beach.\"\n\n\"Well she was facedown when I walked by.\" I said with one final sip of coffee.\n\nShe smiled broadly. \"Ah ha! So you did look!\"\n\n\"I never said I didn't look, I'm just saying you should close the door!\" I said as I rose from the counter. \"What's with you trying to get me to see mom naked anyway? It's kind of weird.\"\n\nKelly looked at her coffee, lost in the steam that curled from the dark roast. She shrugged. \"I don't know. I mean, I myself love to look. You got to be honest, in the last couple days she's looked fucking hot. Like, not just model hot, but naturally. It's probably always been there, but maybe I'm just noticing it now. I don't know what it is but maybe seeing her open up is kind of making me open up too.\" She took a deep breath, eyes now focusing on me. \"I mean remember? Right there at the end of the shoot, I mean holy shit it was crazy. She almost took off her panties in front of us both! It was so crazy! Not to mention getting to actually shave her down there.\" She shook her head, her voice growing husky. \"I never knew mom could be such a tease.\"\n\nI nodded, noting her nipples hardening. \"Yeah, that caught me a little off guard too.\"\n\nShe took a sip of her coffee, returning to the present. \"And so,\" she continued, \"After last night, and seeing moms amazing tits up close, I kinda had another wild idea. I figured the least I could do was give you a chance to see them too. Kinda like a 'Thank you' of sorts.\" She smiled up at me.\n\nI tilted my head. \"So as a way to say thank you for yesterday, you were going to have me see somebody else's tits?\" I immediately knew the folly of my question the moment I asked.\n\nShe squinted, leaning back in her stool. \"Are you saying you want me to show you my tits?\" she asked. Shit.\n\n\"No-no-no-no-no! That's... That's not what I mean.\" I stammered.\n\nHer smile widened. \"Are you sure, cause it just sounds like you wanted to see my tits.\"\n\n\"No Kelly, Seriously, I don't want to see your breasts.\"\n\n\"Don't call them breasts, call them tits. It sounds dirtier.\"\n\n\"Fuck no; I'm not calling them anything. Just keep those...\" I said pointing \"...to yourself.\" I turned, rinsing my mug in the sink, trying to find a distraction to get out of this conversation. \"Jesus, this whole weekend's been so fucking weird.\"\n\nCreeping up behind me, Kelly continued. \"Well, I guess if you want to see them, then yes, I should show them to you.\"\n\nOh shit. I put the cup in the dishwasher and turned to my sister. \"Kelly, no means no. I don't want to see your tits. I don't want to see Mom's tits. You're my sister and she's our mother. And this... this is way outside of the norm.\"\n\nHer eyes shined with mischief. \"Who gives a fuck about the norm? This is more fun.\" Her wicked grin faded to soft pouting lips with soft eyes. \"You know what that Big Brother? This top feels a little loose. These straps for some reason just keep falling down.\" Her hands played at the thin straps.\n\nI pointed my finger at her.\n\n\"Nope! Kelly, stop that!\"\n\nShe blinked her big, puppy dog eyes at me. \"Stop what?\" she asked letting one strap fall off her shoulder. \"Oh there, you see? They're doing it again.\"\n\n\"Kelly...\"\n\nShe continued. \"I guess it's kind of good that it is it's getting really warm in here. Do you feel a little warm?\" She let the second strand fall, leaving her shoulders bare. The fabric clung to her top as she gripped the seat of the stool between her legs, pushing her breasts together.\n\n\"You know what, Kelly, I'm gonna' go to the other room.\" I said gesturing, \"You do whatever you want with your breasts, tits, melons, whatever... I don't give a shit. I'll just be in there and you stay here.\"\n\nHer smile returned as she leaned back and grabbed her chest. \"Really? You think they're like melons?\" She hoisted them up, one in each hand.\n\nI rolled my eyes. \"Fuck it. Have fun!\"\n\nShe winked, \"I will.\" But before I could leave, her eyes quickly flew to my crotch, suddenly growing wide. \"Oh why hey there little guy!\" she said, \"Are you trying to come out to play? I have a couple friends you may enjoy.\" She jiggled her breasts.\n\nI looked down, instantly shocked and embarrassed to find my jeans tenting out in front of me. Though my mind had been in discomfort, my cock was crying for joy at the prospect my sister was offering. Few things are worse than your body betraying you to your family.",
        "\"God damnit Kelly!\" I exclaimed as I left the kitchen, face flushed red and dignity long gone. \"I don't have time for this. I got your project to work on.\"\n\n\"Oh shit!\" she said quickly changing demeanor as she chased after me, fixing her straps as she ran. \"Please let me help!\"\n\n\"No, you got your boobs to worry about.\" I said as I picked up my computer bag and camera. My cock still cried out to me, begging to bury itself between what I'm sure were her spectacular tits.\n\n\"I'm sorry Jason, I was just teasing. I really want to see them!\"\n\nI turned to her, seeing honesty in her pleading eyes. \"Alright,\" I said, and then pointed at her chest, \"but those say inside.\"\n\n\"No promises,\" she said. \"I'm kidding! I'm kidding!\"\n\nShaking my head, I set the laptop up on the dining table. It took a few minutes to plug everything in and boot up the machine, and longer still for all of the photos to transfer over. Finally, we were ready to go. The photos were imported and the application was live.\n\nWe scooted our chairs in tight working side-by-side, the lights in the room dimmed so as not to cast a glare on our screen.\n\n\"Here we go,\" I said more to myself. \"Okay, there are... just over 2,500 photos in total so this may take some time.\"\n\nKelly whistled. \"Wow, that many?\"\n\nI nodded, my focus locked on the screen. \"Yup. You had a lot of looks.\" I scrolled up to the first. \"What I normally do is quickly scan through the images and flag those that look promising. That way we can thin out what we want to work with. Sound good?\" I looked at her. The side of her face was illuminated with a soft pale glow, enhancing her soft pale skin. She looked to me, biting her lower lip with excitement and nodded.\n\n\"All-righty then... here we go.\"\n\nWe scoured through the photos, reading one after the other with the most incredible scrutiny. Kelly blew me away, tackling the project with intense professionalism. She was proud of her work, and it showed. We worked like a team devouring each and every one. Approving one out of every ten. It wasn't that the other nine were horrible, even though some of them mom would find infinitely embarrassing, it's just that the other ones were nowhere near as good as those that we kept, the ones that looked like they had fallen right off a magazine page. And though the clothing was the event, the main attraction was without a doubt, our model.\n\nShe looked so natural, so playful, provocative and alluring. Never would I have guessed this was her first go around. She looked like a puppet freed from strings, opening up in ways I hadn't seen since childhood, if ever at all.\n\nWe landed on a picture of her standing in the surf sporting a yellow sun dress with the skirt cut just below mid thigh. It was flapper inspired with a low cut in the back, but that was hidden from camera. A breeze had kicked up and she had bent to stop the dress from blowing up. Eyes sparkling like the water behind her, with a large smile as she laughed.\n\n\"She wears those clothes well.\" I thought, and then suddenly realized I had said it out loud.\n\n\"Yes she does,\" Kelly almost whispered. Her mind seemed to be taking her elsewhere, just like my own. \"To be honest with you, most of those are made with her in mind.\"\n\n\"I can tell.\" I flagged it and moved on. \"Alright, first batch done. Now, onto the swimsuits.\"\n\n\"About damn time,\" Kelly said. I couldn't help but look at her. \"...What?\" she asked.\n\nShaking my head, I clicked the next photo.\n\nFor the most part, the emotions these shots elicited remained the same as those previous. However, there was a slight and subtle shift in the atmosphere. Her smiles were still there, yet it was almost as if their meaning had methodically changed. From joy to seduction. I had not been aware of the time how well she was obeying my suggestions, for though there was still the element of flirtatiousness, what first appeared to be someone out at the beach, turn now to the feeling of prey who lures you in.\n\nI'd like to say we were more forgiving on these photos, but that's not the case. If anything our intent was to be more scrupulous, straining and searching for flaws. But the further in we got, the more distracted we became. After a short period time, we were so enthralled by the images; we forgot to flag them and continued clicking from one to another. Before we knew it, we stumbled across her leaning over in the light blue bikini for our hungry eyes.\n\nOur eyes lingered on the screen, held captive by the sultry nature of the image. Her ass was presented to us in glorious detail, separated only by a thin blue sheet of fabric that did little to hide the shape of her sex. My breathing had deepened as I took her in, stared into her eyes that stared back at me. I felt like I had been wrapped in a blanket of lust. My pulse quickened and senses peaked as I felt a rush of blood travel to my groin.\n\n\"Jason are you sure you've never done boudoir before?\" Kelly asked her voice heavy.\n\nI nodded slowly. \"Yes, I'm absolutely positive.\"\n\nShe swallowed. \"I think you need to give it a shot.\" I could feel her breath as she leaned in closer. \"Jesus, just look at her,\" she whispered. \"If I was a dude, I'd be all over that.\"\n\n\"She would still be your mother.\"\n\n\"I don't know if that would stop me,\" she replied.\n\nI shook my head, trying to snap out of this arousal that had taken over me. I prayed that Kelly's focus would remain fixed to the screen so she would not grow aware of the twitching in my pants. Each breath felt more labored as my muscles tightened. My cock strained against the confines of my jeans begging for attention.\n\nKelly laughed. \"She's such a tease.\"\n\n\"Am I now?\" Mom's voice suddenly echoed behind us.\n\nWe both jumped, startled by the sudden intrusion. She stood behind us with her arms crossed leaning against the entryway in a white cotton bathrobe. Her hair shimmered as if slightly wet while her skin had that glow like she just emerged from the shower. Her eyes were fixed to the computer where there, in full screen, she saw herself being lewd and mischievous.\n\n\"So that's them, huh?\" she asked, never taking her eyes from the photo. \"I think I look fat.\"\n\nI almost fell out of my chair while Kelly burst out laughing.\n\n\"You look fine, Mom,\" I said. What the hell is wrong with my family?\n\nShe shrugged and walked over behind us, placing a hand on my chair and one on the table, leaning in to see the image better. Instantly, her scent washed over me. It was like vanilla and lavender, mixed into one. I strained to keep my eyes focused, but I didn't know where I could safely look. In front of me our mother appeared to be moments away from exposing her privates, while directly beside me, I could see the fold of her robe opening causing the swell of her cleavage to spill into view. A tiny droplet of water ran from a wet strand of hair, tracing the curve of her collar bone before plummeting between the valley of her breasts.\n\n\"May I?\" she asked looking down at me.\n\nI jumped in my seat, startled again from my sinful surroundings. \"W-what?\" I stammered. She smiled, pointed to the trackpad I was using. \"Oh, it's all yours,\" I said standing up to allow her a seat.\n\nShe said her thanks as she sat. I stood now directly above her, hand on her chair and trying not to stare down her chest; it was one of the greatest challenges of my life.\n\n\"I'm surprised you two didn't wait for me,\" she said as she zoomed into the photo, focusing on the small of her back.\n\n\"I would have, but I had intended on doing a grand showing after they were all edited. Some of them aren't too flattering.\"\n\n\"Really?\" Mom said as she panned around the image. \"What about this one? Do you think this one is?\" She turned around, raising an eyebrow to me.\n\n\"You're kidding right?\" Kelly asked. \"Mom, look at you. You're friggin' hot!\"\n\nShe turned to Kelly, smiled, then back to me. \"You think so too?\"\n\nI turned back to the image, but I didn't need to. \"Absolutely.\"\n\nMom's smile widened and she turned back to the computer, clicking to the next image. \"What can I say? You are a great photographer.\"\n\nI shook my head. \"I wasn't the one who made you look good. That was all you. I just capture the moment.\"\n\n\"You do that well,\" she said as four more photos flashed by on the screen, slowly growing more and more sensual. \"I can't believe I did some of these,\" she said, covering her mouth. \"What kind of mother am I?\"\n\n\"The best as far as I'm concerned, Mom,\" Kelly said.\n\n\"I don't think I can say I'm the best. Certainly not after this one,\" she said clicking on the photo of her untying her top \"I'd think they'd take my 'Mother of the Year' title away for that.\"\n\n\"I'm sure some people would actually offer it to you,\" I joked, though I have no idea where it came from. \"Besides, we are the only ones who know you are our mother. No one else knows.\"\n\nThat seemed to take a weight off her shoulders.\n\n\"You do have a point,\" she continued to click. \"Kinda makes you wonder though, doesn't it?\"\n\nKelly and I shared a look. \"What's that?\" my sister asked.\n\nMom continued. \"Makes you wonder if we've ever seen photos like ours.\"\n\n\"You mean like a mom modeling?\" I asked.\n\n\"Maybe,\" she continued clicking through. \"Maybe the photographer's the model's son, or daughter, or father, or mother. Maybe the subjects in the photo are related and nobody knows. It sure would change the context though, wouldn't it?\" Her eyes were glued to the screen, fixed on the final image I had taken. There she was with her thumbs hooked to the bikini bottoms, slipping them down over her hips. A light sheen glowed across her skin, catching the light that trailed down her body. But our eyes stayed focused on her thin strip of hair teasing us to what lay below. The photo oozed of pure unadulterated lust.\n\nMom suddenly shook as if rippled by goosebumps. Her eyes went wide and she covered her mouth. \"What am I saying? Sorry, that sounded really bad. I don't know what's come over me.\"\n\n\"It's fine, Mom,\" I said as I placed a hand on her shoulder and my finger touched the bare skin of her neck. It felt like electricity. \"We're not judging\".\n\nShe smiled, shook her head and looked at us. \"Thanks.\"\n\nKelly beamed her playful smile. \"Aren't they cool?\" she pointed to the photos.\n\nMom nodded. \"I'm blown away.\"\n\n\"Me too!\" Kelly replied. \"When do you think you'll be done?\" she asked me.\n\nI looked at the time; it was almost noon. \"Let me take another look through to see which are keepers, but... I'll probably have the best done by the end of today.\"\n\n\"Good, then you're staying for dinner,\" Mom stated.\n\n\"Um, I'm not sure-\"\n\n\"It's lasagna.\"\n\n\"I'm staying.\" This should require no explanation other than she makes it from scratch.\n\nKelly stood up, stretching once more beside me. \"Dad gonna be here?\"\n\nMom shrugged lips tight. \"We'll see.\" She headed off to the kitchen. \"I'm gonna make lunch in the mean time.\"\n\nKelly shook her head as she watched Mom leave.\n\n\"Hey Bro,\" she whispered, \"After they're all done, can I still get copies of all of them?\"\n\nI shrugged. \"I don't see why not. I'll put them in two separate folders for you.\"\n\n\"Me too,\" Mom called from the kitchen. I swear her hearing only got better over time.\n\n\"You got it,\" I called back taking a seat in front of the computer. It was gonna be a long day.\n\nChapter 5.0\n\nOver a week had passed and I was once again between gigs. A new sushi bar was opening and needed a photographer for promo shots and menu items. I had done a few before, but I always tend to forget how sometimes, you don't really want to see the sausage being made, so to speak. But hey, the waitresses were cute and since my 'Day at the Beach', my shots have started to lean a bit more toward provocative. It was slightly strange to find yourself inspired by your mother's lewd actions and then ask the same from others. There were no underwear shots, mind you, but somehow I was able to coax the impression of desire, all with innocent smiles.\n\nThe shoot went well and the owner was ecstatic all throughout, loving my ideas and giving me free reign. The girls were great too; one in particular caught my eye. Perhaps it was how she teasingly batted her eyes, or her quirky banter, I wasn't sure. What I do know is that for the last week, I have been hungrier than ever and felt like I had been in a constant state of desire. Had I been working myself too much? I hadn't dated, let alone messed around with a woman for over a year. My hormones seemed to have suddenly kicked back into gear as if I had been reliving puberty. My cock would spring to attention at the slightest hint of sexual nature, leading me to jerk off two, sometimes three times a day. I needed to get back out there. I needed to find a girl, figure out a way to make it work or at the very least, sow some oats by plowing her field. And this little dark haired beauty; my new playful model, oh how I'd love for it to be you.\n\nIt was the perfect motivation, and it looked like I already had an in. She was laughing at my jokes, and smiling when I caught her eye. This should be a cake walk, right? Well the problem is, I don't know why, but at the end of the shoot, as soon as I turned the camera off, it's like my confidence went right out the fucking window. All the words, all the sayings I practiced in my head just minutes before, vanished. I mean I had imagined the best lines in the world, perfect scenarios that all I had to do was walk right up and say them and she'd instantly beg me to fuck her right there on the counter, regardless of who was watching. Of course I didn't really expect that to happen, but there seemed to be a part of me that felt it was within the realm of possibility.\n\nSo there I stood; my face as blank as my mind before her, and this lovely goddess is waiting for me to speak. You want to talk about awkward; this could be a case study. Nothing was said; she just smiled, waiting as I struggled to even think of what her name was. It's embarrassing but I still can't recall. And so, to save myself, I thanked her, grabbed my gear and took off.\n\nAs soon as I was in my car and done yelling at myself in the rearview mirror, I heard my phone chime with a new text. It was from Kelly.\n\nK: Hey Big B. I submitted my portfolio and they LOVED the photos! I can't thank you enough! Thank you thank you thank you!\n\nWell that at least brought a smile to my face. I typed out my response.\n\nME: No prob sis. Glad you liked.\n\nI tapped on 'Send' and couldn't even put the phone away before she responded.\n\nK: I didn't like them... I LOVED them. Everyone was impressed.\n\nK: Can't wait til we do it again!\n\nI chuckled. We'd never talked about another shoot, but why the hell not?\n\nME: Sure thing. Let me know when you got more to show. It was fun.\n\nI was about to put the phone away when she replied back.\n\nK: Will do.\n\nThen...\n\nK: I'm bored. What you doin?\n\nME: Just got in my car. Had a session at that new place on Pine St.\n\nK: What new place?\n\nME: Its a sushi bar. The food's good.\n\nK: That's cool. How'd it go?\n\nME: Fine.\n\nME: Actually better than fine. It went great but I'm a little out of it.\n\nK: What's up?\n\nI stared at the screen in the muted silence of my car. Fuck it.\n\nME: Nothing really. I just choked in front of this girl.\n\nK: Like on the sushi?\n\nME: No not on the sushi.\n\nME: I wanted to ask her out and couldn't for some reason. I think I panicked.\n\nK: LOL!!!!!!\n\nK: You're kidding!\n\nK: Oh man shouldn't you have that down at your age?\n\nMy eyes were spitting darts at the screen.\n\nME: Wow. Thank you for your support.\n\nK: awwwwwwwwwwe come on. I'm just joking.\n\nK: Was she cute?\n\nME: Yeah. She was one of the main girls I worked with.\n\nK: one of the models huh? look at you mr photographer.\n\nME: You're forgetting I bombed miserably.\n\nK: Yeah, but you were trying for it. What was she like? Why her?\n\nI shrugged to myself then typed my response.\n\nME: She was cute and fun. Took a little bit for her to open up to the camera though.\n\nK: Go on.\n\nME: I don't know. She was funny and kinda sassy. She kinda teased me at times which I thought was a good sign.\n\nME: Pretty eyes. It was like she'd look straight at me through the lens.\n\nK: Kinda like Mom did?\n\nME: I don't know, maybe. She wasn't as crazy as Mom, that's for sure.\n\nK: So why now? I thought you didn't have time for the ladies? ;)\n\nME: Not sure really. It's just been a crazy week.\n\nK: ...\n\nK: Been thinking about the photo shoot with Mom, huh?\n\nME: ... yeah, sure. A little bit. Why?\n\nK: Nothin. I've kinda been a bit worked up this whole week myself.\n\nK: Mom too, I think.\n\nME: why do you say that?\n\nK: ... promise not to freak out?\n\nME: No, but tell me anyway.\n\nThere was a pause... and then:\n\nK: I caught her getting herself off.\n\nMy eyes went wide and I brought the phone to my chest, suddenly concerned for prying eyes in the solitude of my car. I chided myself and responded.\n\nME: What? When?!\n\nK: yesterday morning. I got up early and went downstairs and she was on the computer with her back to me.\n\nK: I thought she was just shopping or something but she suddenly let out this MOOOOOAAAAN.\n\nME: She was looking at porn?!?\n\nK: Yup!\n\nME: LOL Holy shit!\n\nThe image suddenly filed my head of me standing in Kelly's shoes, creeping around the corner to find that sight. Just the idea brought with it the familiar sensation of my cock beginning to stiffen.\n\nME: What did you do?\n\nK: Nothing. I just stood there. It looked like she had one hand feeling her tit she used the other to click her mouse ;).\n\nK: She had her legs spread wide. It was so hot!\n\nMy cock was crying from my pants, begging to be released.\n\nME: You're so bad. Getting turned on by Mom.\n\nK: I know! It's so nasty! But god it got me wet. Shit I still am just thinking about it!\n\nMy blood began to burn through my body as if it were pure fire.\n\nME: whoa there TMI.\n\nI said, though only half meant it.\n\nK: oh come on. You can't tell me that it's not a sexy image. You'd have been hard as a fucking flag pole if you saw her.\n\nK: I bet you're hard right now. Are you?\n\nME: That's a little personal.\n\nK: Why? you already know I'm wet.\n\nK: Just tell me about your cock. It's hard, isn't it.\n\nK: Come on Big Brother ;). Don't be shy now.\n\nThis was insane. My fingers trembled as I typed my one word response.\n\nME: ... maybe.\n\nK: I FUCKING KNEW IT!\n\nK: Is it wrong that this is turning me on more?\n\nME: YES!\n\nK: Too bad. You're still in the car huh?\n\nME: yeah. Why?\n\nK: I was just thinking that it's too bad. I'm at home so I can at least take care of my business.\n\nK: you get to sit there in public with a boner and do nothing about it.\n\nME: first off, TMI. Second, that's mean.\n\nK: What? I'm just saying it kinda sucks for you.\n\nK: Me, I get to play with my kitty right away.\n\nK: Its so nice.\n\nME: Please tell me you're not doing it right now.\n\nK: ... maybe.\n\nK: ;)\n\nME: Okay, this is getting too to be a bit too much.\n\nK: Awe come on and play a little.\n\nME: No, I need to go anyway. Don't get me wrong, the thought of texting with my little sister while she fingers herself is tough to pass up.",
        "ME: that was sarcasm by the way.\n\nK: I don't think it was.\n\nK: But fine.\n\nK: Oh, were you coming by for family dinner this weekend?\n\nME: I'll be there.\n\nK: Good.\n\nK: See you then!\n\nME: Take care sis.\n\nK: Will do. I got a kitty to feed. Go easy on your trouser snake!\n\nI rolled my eyes as I tossed my phone in the passenger seat. My cock was hard as a rock and throbbing so hard I almost thought my heart had relocated.\n\nThe car was started and in a flash, I was home, pants around my ankles and cock in hand. And as I squeezed my flesh, coaxing out my sweet release, I kept telling myself to imagine the waitress; stripping off her clothes with pouting lips and begging for my cum. Yet no matter how hard I tried, each time I closed my eyes my imagination was corrupted with thoughts of my sister's wet and hungry pussy, and the more it happened, the crippling sense of shame slowly began to fade.\n\nChapter 6.0\n\nThe next two days stumbled by on my calendar, drawing me closer and closer to our Family Dinner night. The time itself passing felt like an eternity. My senses were dulled, yet heightened at the same time. It was like I had been stumbling around my flat like a zombie in puberty. My libido had never felt like this, not even in high school. All thoughts had continually drifted to the opposite sex and two of these members in particular; as my conscience stayed with its losing battle to keep me cool like the last iceberg in heated waters; slowly but surely melting away until there was nothing.\n\nWhat was I going to say when I faced them? How can I look my own mother and sister in the eye when they had been the root of my carnal fantasies for the last few days? What could I do, or should I do for that matter? This is my blood, relations, relatives. There are laws both written and moral that state that acting on these desires is the most forbidden of acts. And yet, the more my mind pondered the morality of these unions, the more I found myself craving to know what it would feel like. Imagine how intense it would be to experience the darker side of love making for that's exactly what it was; making love, but in such a way that it instantly became my deepest and darkest fantasy.\n\nSo where then is the transition from fantasy to reality? What would it take and would I dare take the risk? Any action would require reciprocation from either party, and what if it was not met in likeness? I would expose myself then and be completely vulnerable. I would be humiliated, possibly shunned, and if made public, well, that would be the end of everything. Though that is the extreme, and I doubt very much it would lead in that direction. As a matter of fact, there was an ever growing possibility that we may all be in the same boat. But if that were the case, and this ever growing powder keg were to finally blow, we would need some sort of catalyst to be the final touch... And leave it to my father to provide.\n\n\"Check out my new gadget!\" he said as I walked in the house that Sunday night. He stood over the dining room table with piles of cardboard and plastic while cradling a new Digital SLR. His fingers adjusted the dials with giddy excitement.\n\n\"Wow, Pops! That's awesome!\" I said as I eyed the familiar device. \"I didn't know you needed a new one.\"\n\n\"Neither did I, but your mother picked it up for me. I think it is the same model as yours.\"\n\nIt was.\n\n\"Timing couldn't be better,\" he continued as he squinted his eyes and looked through the viewfinder.\n\n\"Why's that?\"\n\n\"Got an early flight to China tomorrow morning. I have to audit one of the manufacturing facilities.\" He powered off the camera and placed it in a red camera bag. At no point in time did he make eye contact with me. \"Last minute notice.\"\n\n\"Yeah, I'd say so. How long you gonna be gone?\"\n\n\"Just the week. Be back on Saturday, jet-lagged as all hell, I'm sure.\"\n\n\"Probably,\" I said. \"Where is Mom anyway?\"\n\nHe nodded over to the kitchen. \"She just picked up Chinese and is in there with Kelly.\"\n\n\"Chinese food before China?\" I asked, noting the irony.\n\n\"Yup.\" His tone lacked any sense of enthusiasm, and then in a hushed voice, \"She's kinda' in a mood.\"\n\n\"Thanks for the heads up,\" I said as I turned to leave, and then stopped in the doorway. \"Are you not coming?\"\n\nHe shook his head. \"I've got to finish packing up then hit the sack. We'll chat next week, I promise.\" I turned to leave again but he stopped me this time.\n\n\"Oh, and can you tell your mom I'll be sleeping downstairs on the futon in Kelly's workspace.\" He could sense my confusion. \"She's such a light sleeper that I don't want to wake her when I leave. You know how it is.\"\n\nWith that, he went back to his work with his back to me leaving me with nothing to do but finally leave the room. As I entered the kitchen I found Kelly and Mom sitting at the kitchen counter eating Chinese food out of To-Go boxes. Both girls dressed casually, Kelly in a green spaghetti-strap tank top and black yoga pants and Mom in a cute gray summer dress.\n\n\"If it isn't my two favorite ladies,\" I said as I approached from behind.\n\nThey both turned and smiled up at me, Kelly while slurping up a long noodle.\n\n\"Hi Baby,\" Mom said standing up and kissing me on the cheek. Kelly remained seated as she stretched her arms high asking for a hug with chow mein and chopsticks still in hand. I reached down and squeezed her tight.\n\nMom motioned to the surplus of white boxes. \"Help yourself. I think Beef with Broccoli is that one over there,\" she said pointing to a box. \"I may have splurged a bit too much.\"\n\n\"Mom, you always get too much,\" said Kelly.\n\n\"I second that,\" I said as I picked up some food and a box of my own.\n\n\"At least you kids never went hungry.\"\n\nI smiled. \"You got us there,\" I said as I took a large bite. \"So Dad's going to Ch...\" I started to say between chews but stopped the moment I saw Kelly's eyes go wide and she shook her head.\n\nMom sighed. \"Yes, flights tomorrow at 5AM\" she said as she moved the contents of her box around without reason. \"He's packing up now.\"\n\n\"Sorry,\" I said. \"Is this a thing right now?\" A tension seemed to fill the air.\n\nShe relaxed a bit. \"No, it's fine. It is what it is.\" She shrugged as she set her food down before taking a deep sip of her wine.\n\n\"The camera was nice. What's the occasion?\"\n\nThis time she shook her head. \"No occasion,\" she said looking at me. \"Just wanted to do something nice.\" She smiled, though I couldn't tell if it was sincere. Regardless, I returned the grin.\n\n\"Well it was,\" I said then felt the immediate need to change the subject. \"Kelly tell you the good new yet?\"\n\nMom laughed then rolled her eyes; this was genuine. \"About the shoot? That's all I've been hearing about for the last week.\"\n\n\"Uh-uh. We've talked about other things,\" Kelly defended, though she began to grow uncertain. \"I'm sure we have. We've talked about Jason a bunch.\"\n\n\"What?\" I asked, mouth full of food once more. \"What about me?\"\n\nKelly deflated a bit. \"I told her about your cold feet at the sushi place.\"\n\n\"You did what?\" My eyes were wide. \"Why would you-\"\n\n\"It's not her fault, Jason,\" Mom said calmly. \"I might have coaxed it out of her.\"\n\n\"I don't... Why did...\" I stammered, too many questions coming at me at once.\n\n\"It doesn't matter,\" Mom said. \"To be honest with you, we were more confused than anything else. I mean two weeks ago, at the shoot, you were so confident and driven. Very...\" Her eyes were without focus as she searched for words. \"... very masculine. Basically I did almost everything you asked. You were totally in charge. You knew what you wanted and what you needed and you took it. You were in your element. So, naturally, we were confused because it didn't seem like you.\"\n\nMy eyes went back and forth from my mother and sister. \"Thank you ladies. Now I'm thoroughly embarrassed.\"\n\n\"Oh hush, you're fine,\" Mom said as she threw a napkin at me. Kelly just giggled as she slipped a glistening mushroom into her mouth and winked.\n\n\"Well that's nice.\" I said, setting down a now empty box. \"It's good to know that my dating life or lack thereof, is a great conversation topic for my family. Really reassuring.\"\n\nMom raised an eyebrow. \"I sense sarcasm,\" she said sarcastically. Kelly started giggling again. I then noticed the near empty bottle of red beside them.\n\n\"Jason, it's cool. If you can't talk about it with us, then who with?\" my dear sister asked. \"I've already told you all of my... most of my secrets.\" Her eyes had that same glimmer than I had started to become familiar with over the last few weeks.\n\nReluctantly, I said \"Okay, fine. Suggestions?\"\n\nThey shared a look, and then Mom spoke. \"We just think you should start in your comfort zone. From what I hear, you were not shy behind the camera. It was when you stepped in front of it that you lost your nerve. You want something from a girl; ask her when you feel in control.\"\n\nKelly nodded. \"I'm with Mom on that.\"\n\nI looked between these two ladies once more and shrugged my shoulders. \"Alright,\" I said. \"I'll give it a shot sometime.\"\n\nSmiles crossed their faces and for a moment, they looked like twins.\n\n\"Good,\" our mother said as her eyes darted to the microwave clock. \"Now, the night is young and we don't have to be up at the butt crack of dawn so you guys up for a movie?\"\n\n\"Sounds like fun,\" Kelly said.\n\n\"I'm down,\" I replied in turn.\n\n\"Great! I'll just clean all this up real quick while you kids go choose one from the cabinet.\" She began to rise, but I stopped her.\n\n\"I got this, Mom. You and Kelly pick something out and I'll join you in a second.\"\n\n\"You don't have to-\"\n\n\"I know, but I insist.\" I held my ground. \"Go, and grab and open the bottle I brought. You two galls killed the last one, I see.\"\n\nHer eyes looked up at me, sparkling and bright.\n\n\"Thank you, Jason.\" She leaned in and kissed my cheek again. I could still feel the warmth of her lips as she pulled away.\n\nThe girls left the kitchen, leaving me to my duties. It wasn't too bad. Just like we said, there was more left over than eaten, so most went in the fridge. I quickly cleared the counter, wiped the surface and brought the empty containers and trash over to the can. I opened the lid then stopped, my eyes settling on something within.\n\nResting on a crushed, empty cereal box was a small pink shopping bag with letters printed with glitter. It too was crushed and empty, but a small piece of paper was sticking out the top. Curiosity got the best of me as I reached into the bin and withdrew the paper.\n\nI held in my hands a receipt, barely faded but printed with today's date. It was from a lingerie boutique found in our mall. My eyes scanned the receipt made to a Lucy Jones, my mother, and on it she had purchased a black garter belt set with bra and panties. Instantly my imagination took over as I pictured my mother in a wide of poses all equally undressed, sporting her new night wear in all her glory. My dark and forbidden desire was coming back as my pulse began to quicken just picturing it. And then, a realization hit me.\n\nThe day after the photo shoot, mom requested a copy of the photos. Not just the photos that would be used for the portfolio, but all of them, knowing very well that it would include the more sultry moments of our shoot.\n\nAccording to Kelly, Mom has been acting different for the last week, so sexually wound up that she was caught masturbating to online pornography with Kelly in the house.\n\nDad just received a new digital camera, the exact same model as mine and mom just purchased a seductive set of lingerie.\n\nLooks like none of us walked away from that photo shoot unscarred. Mom was so turned on by being the focus of the attention that she is trying to re-live the experience through a more provocative means. And based on Dad's response to the camera, Mom probably didn't even get the chance to tell him about the lingerie before he dropped the China bomb on her.\n\nAnd just like that, the solution for our puzzle started to come together. They want me to be more assertive, and I can't argue with that. Mom needs to be the center of attention, yet directed into action. But what about Kelly? My shadow during the shoot. The one who has been getting off on taunting and teasing me for the past week. My sister who soaked her panties by watching our mother pleasure herself. I had a suspicion, but needed to test the waters.\n\nI discarded the trash into the bin, throwing with it the receipt that I had been holding and closed the lid. I washed my hands, catching my own darkened reflection in our window over the sink. It was like looking at a shady version of myself, but still an image of what I was, or was becoming. I stood straighter and my focus was determined. It was like staring into my subconscious and witnessing the beginning of a new path being trekked. This was going to be something new and I now felt ready.\n\nOur father was nowhere to be seen when I joined the girls in the living room. Kelly was sprawled across the love seat clicking through our movie channels while mom relaxed beside her on the sofa. Three glasses of wine were waiting on the coffee table, only one of them was still full.\n\n\"We were wondering when you were gonna show up,\" Kelly exclaimed as she continued her search.\n\n\"Sorry,\" I replied, taking a seat on the floor, \"Kinda got caught up in something. Anything yet?\"\n\n\"Nooo,\" her voice was filled with disappointment. \"Nothing to get too excited over.\"\n\nI reached down and grabbed my glass, eyeing Dad's red camera bag sitting all by itself on the table in the adjacent room. I took a big sip, feeling my concerns and hesitations begin to melt away.\n\nI took a deep breath. \"So Mom, I never heard what you thought of Kelly's photos. You got your copies, right?\"\n\n\"Oh absolutely,\" she began. \"Kelly gave them to me last Monday. They were so amazing. I am so proud of you.\" Her smile lit up the room, as she settled into the couch with her legs crossed tightly and holding her glass with two hands.\n\nI beamed in response, my own cheeks reddening. \"Thanks, it really means a lot to me. I had probably the best model ever.\" I took a seat on the other end of her couch, leaning back into the corner.\n\n\"Oh stop it.\" This time her cheeks blushed. \"I was just having fun.\"\n\n\"We could tell,\" Kelly chimed in, leaving the television on some late night comedy channel which was ignored by us all.\n\n\"It was fun, wasn't it?\" I said taking another sip. \"Actually, I'm kinda' curious... Would you be interested in doing another shoot sometime? I feel like it's great practice for me.\"\n\nShe smiled and shifted in her seat. \"Of course I would. Any way I could support you I will.\"\n\nKelly tilted her head. \"I don't have anything that is ready right now though. I put all my work into the one we just did.\"\n\nI nodded. \"That's true, but I was thinking it didn't have to be a fashion shoot but maybe something different. Something that might be new and fun and would help me out a little.\"\n\nMy sister's eyes narrowed as Mom asked the question.\n\n\"What were you thinking?\"\n\n\"So, both of you were just talking about how I am very comfortable behind the camera, like, that's my zone. And when it comes to relationships, there needs to be away that I can merge the two together. To somehow bring more intimacy into my photography.\" I swallowed and continued. \"And so, because I trust you both implicitly, I figured you would be an incredible resource for me to stretch my legs and try something more... provocative.\"\n\nMom took sip as Kelly now asked her question.\n\n\"More provocative? Like what?\"\n\n\"I would say kinda like what you asked in the car a while back. I think I should start dabbling in boudoir.\"\n\n\"Seriously?\" Kelly's eyes narrowed.\n\nI nodded.\n\nSilence filled the room as the two leaned back, their faces reflected no emotion.\n\n\"So you want our input?\" Mom asked.\n\n\"I was actually hoping for your participation... as my model.\"\n\nShe took a deep breath, leaning back as she recrossed her legs.\n\n\"Jason, I don't think-\"\n\n\"Before you say anything,\" I interrupted, \"Let at least tell you why.\"\n\n\"... Okay,\" she said slowly nodding. \"Go ahead.\"\n\n\"Thanks Mom,\" I said as I leaned forward. \"For the past couple weeks, I've been continually reflecting on our shoot. I know we all had a great time, because it was just that: a great time! We trusted each other, it was fun, and we got great shots out of it too.\" Their eyes were fixed to me listening to each word with intense fixation.\n\n\"Now I know we are all aware it started taking an interesting turn in the end, but the more I have thought about it, I feel I was starting to tap into something else, something that's obviously a bit more risky. I mean...\" I was struggling to find the right words. \"What I'm trying to say is that I want to explore a different avenue or direction here. Something that can elicit new emotions, cause hey, that's what photos do. So I know this sounds weird, and probably inappropriate, but the way I see it, it isn't that different from the photo shoot we just did. It just has different... subtext, so to speak. And to do that, well, I need a model and an assistant and I can't imagine anyone better than the two of you.\"\n\nThe air was thick with tense silence as they pondered the words. Kelly's eyes turned back and forth from Mom to me, eager to hear her thoughts.\n\nOur mother swirled her glass and took a deep sip. \"Before I say yes or no... What did you have in mind?\" She settled her eyes on me as she leaned back into the couch.\n\nI could feel my cheeks flush. \"Something simple. Something that would appear intimate.\"\n\n\"You're being awfully vague,\" she said, \"I know you have a specific idea of what you want.\"\n\nShe knows me well. I felt a sheepish grin cross my face.\n\n\"I do. I was thinking underwear or lingerie.\"\n\n\"Lingerie? That could be pretty bold.\" Her eyebrow raised but her even tone remained the same.\n\n\"I guess. It really depends on the kind.\"\n\nShe looked back to her glass deep in thought watching the wine spinning around the crystal bowl. Her cheeks still red and growing deeper in color.\n\nHer chest rose as she took a breath. \"I don't know... I don't think it would be appropriate.\"\n\n\"I know, it sounds weird and I totally understand how you feel. Thing is, it's not like you are going to be exposing yourself or anything. I'm not looking for nudie pics. Just... it'd be kinda like the bikini shots. Same thing; just different story.\"\n\nShe didn't look up. Her face was unreadable.\n\n\"It would mean a lot to me, Mom,\" I continued. \"I can't think of anyone better who I trust and who could capture what I'm looking for. I need your free spirit. I need your expressions along with your willingness to experiment, your drive, your understanding, and your patience. You're my perfect model. I need you, Mom.\" This was my last leg, and I still wasn't sure what I was doing.\n\nThe tension in the air was thick, hanging heavy like a curtain as Kelly and I looked at our mother with rich anticipation. She shook her head then finished the remainder of her glass.\n\n\"Fuck it,\" She shrugged. \"I better get Mother of the year for this.\" She leaned forward, setting her glass on the coffee table. Her breasts threatened to spill out of the top of her dress. \"So when and where, stud?\"\n\nKelly's smile was bigger than I had ever seen it as I felt like a weight had been lifted off my shoulders.\n\n\"Honestly, I was thinking it would be best if it was in a bedroom; perhaps a large one with a kingsize bed and a large vanity mirror.\"\n\nIt only took a moment to realize what I was describing. \"My room?\"\n\nI nodded.\n\n\"I guess saying it might be a bit too personal would be out... When?\"\n\nAnother deep breath and stood up. \"How about now?\""
    ],
    "authorname": "scribbleskillz",
    "tags": [
        "mom son",
        "bro sis",
        "photography",
        "model",
        "orgy",
        "anal",
        "dirty talk",
        "cuckold",
        "lingerie",
        "camera"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/double-exposure"
}
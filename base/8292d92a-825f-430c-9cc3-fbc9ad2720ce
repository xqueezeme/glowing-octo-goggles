{
    "title": "It Only Took Twenty Years Pt. 06",
    "pages": [
        "PART SIX\n\nChapter 20: Saturday, October 21, 2016 (Morning)\n\nDawn stared at me, watching my expression. I had no idea what she saw because I had no idea what I was feeling at that moment.\n\n\"A few months before the party, I had a miscarriage, Will.\"\n\nI put a hand on her knee. I hadn't the foggiest notion of what to say. I sat up and crossed my legs. Our knees were barely inches from each other. Dawn was still gauging my body language, and I hers. She looked extraordinarily tense. She was acting very guarded.\n\n\"What, Will, no witty barb?\"\n\nThere was ice in her voice. I suddenly felt like a hare being stared at by a coyote. I watched her eyes. They conveyed anger and I didn't know why. I felt my defenses rising, but swallowed them down.\n\n\"No,\" I said as calmly as I could.\n\nShe stared coldly at me for several moments then broke. She burst into tears. She buried her face in her hands and sobbed with racking breath. I reached out and brushed her shoulders with my hands.\n\n\"Come here, Devo.\"\n\nShe crawled forward across my lap and into my arms. I held her close to me. I simply held her and stroked her back. I felt her tears on my neck and shoulder. Her chest shuddered as she tried to mute her cries. She was unable. She curled into a ball and sobbed.\n\n\"Jeez, Sweetheart. I am so sorry,\" I whispered to her.\n\nThere was nothing I could do but hold her close and support her body as she released what seemed like years of anxiety in streams of tears. I felt like I'd somehow stabbed my love between her shoulder blades. If I could have turned back time five minutes, I would have given my life to do so.\n\n\"Dawn, I didn't mean to push you. Please forgive me, Love. I'm so very sorry.\"\n\nI was trying to understand. I had absolutely no idea that she'd gone through that. I didn't know she'd been pregnant. I didn't know she'd lost a baby. I had no common ground on which to stand. I had absolutely nothing to offer her. She said it'd been ages ago, but a bizarre pang of jealousy struck me. It took me several minutes to dismiss it, but I held her as she wept.\n\n\"God, Dawn. I don't know what to say.\"\n\n\"Don't say anything. Just hold me. I love you. I'm not angry with you. I'm sorry for snapping at you.\"\n\nHer emotions poured for several more minutes. I remained quiet, just stroking her hair. When she was close to exhaustion, her crying eased. I held her body to mine, listening to her breathing begin to steady.\n\n\"Jeez, Will. I don't know where that came from.\"\n\n\"Something tells me that, as painful as that was, you needed to let that out.\"\n\n\"Yeah. I guess I've been holding that in for a long time and you just happened to pull the pin. Only three other people in the world know what I just told you. I never even told my aunt or uncle. You're the first person I've told in more than fifteen years. The only people who ever knew were my friend, her doctor, and a bastard-ass, fuck-wad, cock-hat, heart-raping, chicken-shit, cum-stain of an asshole.\"\n\nI didn't intend to, but I couldn't help but chortle at her expletive-ridden description of a certain someone. My reaction must have eased a little more of her tension because she chuckled. She uncurled herself and sat facing me in my lap, wrapping her legs around my lower back and her arms under mine. She rested her chin on my shoulder.\n\nShe sniffled loudly. I pulled away to get the box of tissues from the nightstand. I saw her face was quite the mess. I folded a pair of tissues and wiped the drips from her nose and upper lip, and used another to blot the tears from her eyelashes and cheeks. I gave her the box before drawing her close to me again. She was quiet for a few moments.\n\nAfter a few minutes, she uncurled herself and sat back on the bed with her knees touching mine. She blew her nose.\n\n\"Yeah. So I got pregnant the August before Y2K. A guy I'd been dating for a few months, who I won't dignify by ever speaking his name, managed to woo his way into my bed because he told me almost the exact same thing you said that night at the party.\"\n\n\"Dawn, I honestly don't remember talking to you that night.\"\n\n\"I know. Let me finish. When I missed my period, I peed on a stick and it was positive. That day is way too easy to remember. I was watching the clock waiting for five minutes to go by. It was 6:18am on September 8, 1999 when I saw the blue plus sign.\"\n\nShe paused. \"Is a positive pregnancy test a pass or a fail? It depends on one's state of mind, right?\n\n\"After what he'd told me, my state of mind was that I'd passed. I was actually happy. The happiness outweighed the surprise. That night, I told him I was pregnant. He wasn't \u00fcber-excited, but he seemed all happy-happy, joy-joy, too.\n\n\"We never talked about getting hitched. I guess I'd just assumed he... well... I was stupid and naive.\n\n\"Anyway, about two months later, I started cramping really bad during one of those boring peer review meetings we used to have. I went to the restroom and saw I was bleeding. I went home without saying a word to anyone.\n\n\"I had no idea what was going on. I called my former roommate and best friend, who was a nurse at an OB-GYN practice. It turned out she had actually experienced the same thing the year before with her new husband. Do you remember Sophie Evans?\"\n\n\"Yeah. I think you asked me to be your plus one at their wedding, but I couldn't because I was scheduled to be in Tokyo.\"\n\n\"Oh, yeah. That's right. I'd forgotten that.\n\n\"Anyway, my own gynecologist couldn't get me in, but Sophie finagled a favor and got me in to her office that evening. I would have been almost three months along, so when the doctor couldn't find a heartbeat, she told me I was miscarrying.\n\n\"Well, I called dip-shit that night. When I told him what was happening, he hung up on me and completely disappeared. I never saw or heard from him again. Obviously all his apparent happiness was fucking fakery. I spent the next four days at home trying to find him while in the worst emotional and physical pain I've ever experienced. The man I'd shared my bed with had just up and disappeared. That shithead just simply evaporated into the wind. His roommate told me two days later that the jerk had packed and stuck him with the rent.\n\n\"I slept on the couch starting that night. I couldn't stand being in my own bed anymore. That was just a few months before I bought this house. I needed to start over. So, yeah. Those were, by far, the worst months of my life.\"\n\n\"I definitely remember that you weren't yourself back then. I had no clue about any of that. I can't even begin to imagine what you went through.\"\n\n\"Yeah. It was pretty rough emotionally. But my objective half knew it wasn't uncommon. Didn't make it easier, though. The doctor was really compassionate. She probably thought it'd make me feel better when she told me I was young and perfectly healthy and could try to get pregnant again any time. She didn't know that the pregnancy was unplanned in the first place. I remember thinking, 'Yeah, right.' As if I'd ever again trust a man to use a condom properly.\n\n\"Did you know that miscarriages can cause postpartum depression?\"\n\n\"No, but I suppose it makes sense,\" I answered.\n\n\"Sophie was so reassuring and comforting because she had gone through it. She let me cry on her shoulder for weeks. I have no freaking clue how I'd have managed if she wasn't there for me.\n\n\"Will, do you remember when we spent our first night together in Kentucky and I told you about an experience that left me with an emotional scar? Well, he was the first guy I let... um... do that. After what he did to me three months later, I couldn't even stomach the thought ever again.\"\n\nI nodded as the light came on in my brain. I understood that the man that abandoned her was douche-bag number one, and douche-bag number two was someone who didn't seek her consent. He was not at all a man and deserved her retribution.\n\nDawn continued. \"William, I cannot describe the sheer hatred I felt for that man. All men, really. Any human with a Y chromosome was dead to me. And that's where you come in because at the party, you said something that just made me sick to my stomach. I actually hated you for saying it.\n\n\"Listen to me, Will. I hope you know those feelings are long gone. Do you understand me? Do you believe me?\"\n\n\"I do. I remember you started coming back out of your shell that next year. It all kind of makes sense now,\" I said.\n\n\"Good. I overheard you talking about me to a couple of your friends. You didn't say it to me, you said it to them, but I overheard you. It sounded almost exactly like what that idiot said which... well.\"\n\n\"What did I say?\"\n\n\"You said, 'Dawn Vo is the kind of person I'd like to marry.'\"\n\nThe memory flashed into my head. I suddenly remembered everything.\n\n\"You obviously had no idea I was nearby. When I heard what you said, it made me sick to my stomach. I was so nauseated that I ran to the bathroom and puked because, all of the sudden, the taste of that ass-hat was in my mouth. The experiences a few months earlier came back as if they'd just happened.\n\n\"Will, I wasn't drunk that night. I hadn't been drinking at all. But when you asked me if I was okay, I just lost control of myself. If it had been any other man asking, I might have just walked away. But it was you. I was confused. I was so messed up that a part of me felt like I'd betrayed you. My defenses just went nuts.\"\n\nI only wanted to hold my love tighter. I pulled her back into my lap where she'd been. \"Dawn, please forgive me for hurting you.\"\n\n\"Shit, Will! You just don't get it, do you?\"\n\n\"I guess not,\" I smiled.\n\n\"I think I needed this cry, but I need you to forgive me! You have always been one of my closest friends. You've never been anything but my ally! I'm so sorry for how I treated you. Even though I pushed you away back then, you stayed... near. You've always remained and have always been right next to me.\"\n\nMy mind clicked. Months of deliberation concluded as my brain reached the decision my heart already had. I eased my grip and softly stroked Dawn's bare bottom. I debated for a number of minutes in my mind whether to speak up or wait, considering the heft of emotions in the room. Even though I wasn't properly prepared, I acted.\n\n\"Devo, before this turns into an apology war, I will just tell you that I forgive you totally, completely and irrevocably. And I promise you this. I will never say what I said again. Ever.\"\n\n\"Will, no! Don't be be upset with me,\" she said, stroking my face tenderly.\n\nI nudged her off of my lap, then stood and walked to the side of the bed beside her. She turned to face me, watching me with visible concern in her eyes.\n\n\"Listen to me, Devo. I'm not upset with you at all. I will never say you're the kind of person I want to marry.\" I watched her intently.\n\nI lowered myself to the floor and knelt to my knees. I extended my hands and took hers into them. Her expression changed to one of confusion.\n\n\"I won't say it, Dawn, because you are not just the kind of woman I want to marry. You are the woman I want to marry. Baby, you are, beyond compare, the love of my life. We've spent our entire adult lives near each other, and I want to spend the rest of mine with you no matter what.\n\n\"Vo Vinh Nhung, will you please, for the love of god, marry me?\"\n\nHer reaction was so physical and abrupt it startled me. She snapped her body upright and erect, quickly standing on the bed, her momentum causing her to bounce momentarily on the mattress. She stared down at me with wide eyes and screamed something in Vietnamese before punching the air over her head. Thankfully, her ceiling fan wasn't turned on. She kicked her legs outward and dropped to her butt on the bed with her legs astride my torso and pulled me into a tight embrace with all four of her limbs. I felt her start to cry again.\n\n\"Yes, Will! Yes!\" She kissed me hard. I could taste her earlier tears and other stuff on her lips.\n\n\"William Aaron Richards, you are the man created for me, my soul-mate, my best friend, my lover, my life! Yes, I'll absolutely marry you!\n\n\"And don't you think for one effing second that my outburst a few minutes ago has clouded my judgment. I was created for you. I've fantasized about hearing those words come out of your stubborn head for a long time!\n\n\"Yes, Baby, yes. Yes! Holy crap yes!\"\n\nShe squeezed me so hard with her entire body I felt both of my shoulders pop as the air was forced out of my lungs. My fianc\u00e9e and I made slow love for over an hour before we exploded in gleeful, engaged bliss.<hr>\n\nChapter 21: October 21, 2016 (Late Morning)\n\n\"Best. Morning. Ever!\" she panted into my chest.\n\n\"Meh,\" I joked, which earned me a smack on my shoulder. I laughed which caused her body to bounce on mine a little, so I held her tighter. \"So. What do we do now?\"\n\n\"It's still early. Let's get on the next flight to Vegas,\" she said with a chuckle.\n\n\"I don't think our friends would appreciate it if we eloped. My parents would disown me. Especially my mom.\"\n\n\"Oh,\" was her brief reply.\n\n\"Oh?\"\n\n\"Sorry, I don't want to poke the bear.\" She lifted her head and kissed my chest.\n\n\"What are you talking about?\"\n\n\"A while back I asked you why you'd never married, and the question irked you a little.\"\n\n\"Oh, yeah. I forgot about that. It's because what you said reminded me of my mother. Don't get me wrong. I love my mom to death. but she nags me constantly asking why I'm not married. She is relentless. She never lets it go, and it just gets under my skin. I would almost bet she thinks I'm a eunuch or in the closet or something.\"\n\n\"Count yourself lucky that you still have your parents. I never knew my father, and have only the vaguest memories of my mom. My aunt and uncle are all I have, and they're getting up there in years.\"\n\nIt suddenly hit me. \"Oh, crap.\"\n\n\"What, Baby?\"\n\n\"You told me that you've always thought of your uncle like a father, right?\"\n\n\"Absolutely. Why?\"\n\n\"Should I have asked his blessing before I did what I just did?\"\n\n\"What, screw my brains out? Absolutely not! It'd probably kill him!\"\n\n\"No!\" I laughed, \"before I asked you to marry me.\"\n\n\"Jeez, Will, you are the most chivalrous gentleman I've ever known. I'm as American as apple pie. He's not. He's my former culture. Asking the father his blessing is a totally American thing and he'd be clueless if you asked. It's not his decision, anyway. When I tell him I've found my soulmate and we're going to marry, it's up to him whether he accepts you or not. I hope he's happy, but frankly, it doesn't matter. You are going to be my husband. You're my choice. What about your parents?\"\n\n\"I can't wait to introduce you to them.\"\n\n\"What will they think of their only son marrying an Asian woman?\"\n\nI turned to my side so I could raise myself up and look in her eyes. \"I hope I've never given you a reason to worry about such a thing. Believe me. My sister Tracy's husband is a big brown dude and we all love him to death. Your origin won't matter one bit to any of them. All they'll care about is whether or not we are good for and cherish each other, and I think they'll see both when they meet you.\"\n\n\"So, what are you going to do?\" she asked.\n\nI thought for several minutes. \"Do you have any plans this weekend you can't break?\"\n\n\"No, why?\"\n\n\"Let's get on the first flight we can find to Saint Louis. I want the first time they even hear about you to be in person, and I kind of want to do it right now.\"\n\n\"You can not be serious, Will. Are you suggesting we hop on a plane and pop in on your family so you can introduce to them, as your future wife, a woman you've only been dating for a few months? Just like that?\"\n\nI burst out in laughter because she didn't see it.\n\n\"What's so funny?\" she demanded.\n\n\"Dawn, think about it. Yeah, we've been physical for a few months. But we've been dating for twenty years!\"\n\nShe continued staring at me for a few moments then fell over sideways and started laughing with me.\n\n\"Oh, my god! You're so right!\"\n\nShe embraced me in a kiss \"So, you're serious?\"\n\n\"Why not?\" I excitedly asked.\n\nShe sat, watching my face. I wagged my eyebrows.\n\n\"It kinda scares the crap out of me, but, sure. Let's go,\" she smiled broadly at me.\n\n\"Yay! See if you can find us a flight. We'll need to come back tomorrow evening. I need to make a call.\"\n\nI scurried into my clothes and Dawn put on her robe. I grabbed my phone and dialed my parents' home phone. My mother answered.\n\n\"Hello?\"\n\n\"Heya, Mom, it's me.\"\n\n\"Hi, kiddo! What's new?\"\n\n\"Are you and Dad busy this weekend?\"\n\n\"We have nothing planned, why?\"\n\n\"I thought I might fly up there tonight and see everyone, if that's okay with you. I haven't seen y'all in almost two years.\"\n\n\"We'd love to see you, Son, but... is there something wrong? It's not like you to be impulsive.\"\n\n\"No, quite the contrary. Life is beyond fantastic right now. That's part of the reason I'd like to come see y'all.\" I thought for a moment, then asked, \"What's Dad doing right now?\"\n\n\"He's out on the back porch smoking a cigar and cataloging birds. You want to talk to him?\"\n\nI chuckled at my dad's odd choice of retirement hobbies. \"Yeah, that'd be great. I've got something I want to ask him.\"\n\nIt took her just a few seconds to give him the phone. I heard her say in the background, \"Ted, it's Will.\"\n\n\"Hey, Son, what's the good word?\"\n\n\"Dad, don't panic, but I need you to listen to me very carefully. Do not let Mom overhear, do not react, and do not spill what I'm about to say. You are absolutely the first person in the world to hear this news, and if you ruin it, Dad, I'm going to key your truck and slash its tires. Spare, too. Are you understanding me?\"\n\nMy father was the ultimate in trustworthy, and he could pull off a ruse better than anyone I knew. I simply wanted to reinforce as quickly as I could the nature of the plan I needed him to foment.\n\n\"Yes, I think I kept a copy of it. Hold on, let me go to the truck to see if it's still in the glove box.\"\n\n\"What's he needing?\" I heard Mom ask him.\n\n\"He wants some information from the sticker of my truck. I think he's shopping for an SUV,\" Dad answered her.\n\nI heard the garage door opener doing its thing, the car door opening, then closing. He started the engine. I heard the seat-belt warning chiming.\n\n\"I'm sitting in my truck staring at the window sticker. What's going on? Your mother is staring at me from the door.\"\n\n\"I've got some news,\" I said.\n\nDawn tapped me on the shoulder and gave me two quick thumbs up. She'd found some flights.\n\n\"I'm going to be flying up there tonight to see y'all.\"\n\n\"That's your news? That's great to hear, but you got me squirreled away in a running vehicle to keep your mom from hearing that?\" he asked calmly.\n\n\"No, Dad. She already knows that.\"\n\n\"Then what is it, Son?\"\n\n\"She doesn't know I'm bringing my fianc\u00e9e to meet y'all.\"\n\nThe line was silent for quite a few moments.\n\n\"You're kidding, right? That kind of news is going to knock her over, and you're killing me not letting me react.\"\n\nDawn tapped me again.\n\n\"Be strong, Dad. Hold on just a sec.\"\n\nI muted my phone and gave Dawn my attention.\n\n\"We have to hurry,\" she said energetically. \"I mean hurry. There's a Southwest flight which leaves in three hours. We'll land at Lambert at 5:30.\"\n\n\"Perfect! Book it.\"\n\nI unmuted. \"Dad, no, I'm not kidding. We just decided spur-of-the-moment to come up there so I can introduce her. I don't have a lot of time. We will be at Lambert at 5:30 this evening. I want to take the whole family to a nice dinner to share the news. Sara, Tracy, and Mark, too. Get us a seven o'clock reservation wherever you want.\"",
        "\"Okay, I can do that. Any particular thing in mind?\"\n\n\"No, it's up to you. But remember, it's a special occasion, Dad. It's my treat, so don't be cheap. Just nowhere formal. Sunday clothes sort of thing, okay?\"\n\nI heard the engine shut off and the previous procedure done in reverse.\n\n\"Okay, just remember that my SUV was totally redesigned last year, so it might not be the best comparison.\"\n\n\"Boys and their toys,\" I heard my mother say the background.\n\nMy father said, \"Hey. Here's an idea. How about we get your sisters together and we can all go out to dinner when you get here.\"\n\nI knew my father's repetition was for mom's benefit. \"Alright, your mother and I will need to make some phone calls.\"\n\n\"Love you, Dad. Give Mom a hug for me. I'll see you tonight.\"\n\n\"Love you, too, Son. Looking forward to it.\"\n\nHe hung up.\n\n\"We need to move fast,\" I spoke before I noticed I was in an empty room. \"Dawn? Where'd you go?\"\n\n\"I'm in the other closet packing,\" I heard from the hallway. I found her standing in the closet in an adjacent room. Talk about efficient, she'd already half-filled her travel bag with clothes and was adding more.\n\n\"How do you do that?\" I asked.\n\n\"I've always kept a bag mostly packed that has all the basics. It's a thing from being called out of town for work on a moment's notice. The only things I add are my toiletry bag and whatever specific clothes I need. What should I wear on the plane?\"\n\n\"We're going to dinner straight from the airport. I'm going to wear my charcoal suit and that blue striped tie you like.\"\n\n\"Dressed up on a plane? Oh, joy!\" she said with sarcasm in her voice.\n\nShe pulled a hung dress from a rod. \"How's this?\"\n\n\"A bit too much. How 'bout that one?\"\n\n\"Okay, that'll work.\"\n\nShe hung the black dress I'd suggested from a hook on the closet door.\n\n\"I still need to shower and get pretty. Go back to your place and get your stuff together, and I'll pick you up for the airport from there.\"\n\n\"Perfect. See you in a bit.\"\n\nI gave her a kiss and left.\n\n\"I can't believe I'm following you on this crazy stunt!\" I heard her call out as I went through her door.\n\nTraffic sucked, which made me a little nervous, but I managed to get back to my apartment where I showered, shaved, and dressed in less than forty-five minutes. Dawn texted to tell me she was on her way as I started packing my travel bag. She arrived in the parking as I finished. I made sure everything in the apartment was secured before I headed out the door.\n\nThankfully, traffic on the tollway was light, and we managed to get to Love Field in about thirty minutes. Security was a little bogged down, so we had barely ten minutes remaining before we boarded the flight.\n\nAt 5:37pm, the plane parked at its gate in St. Louis, one hour and forty-five minutes after it'd been pushed back from its gate in Dallas. As soon as the wheels were on the ground, I turned off airplane mode and a text from my father popped in.\n\n7:15pm at Reynaldo's Steakhouse in Chesterfield. It'll just be us and your sisters. Mark is out of town, but Tracy and Sara are coming with your mom and me to the restaurant.\n\nMark was Tracy's husband of nineteen years. Sara had married twice, but neither lasted more than a few years.\n\nOkay. We're just pulling up to the gate. Should have no problem getting there on time as long as highway 40 is cooperating. See you soon! I replied\n\nFifteen minutes after Dawn and I deplaned, we arrived at the rental car lot, and another teen elapsed before we were on the highway.\n\nAs soon as we settled into the traffic, I said, \"Have I told you lately how stunning you look?\"\n\n\"Not in the last hour. I was beginning to worry,\" she laughed.\n\nShe did look fantastic, and I realized she'd been holding out on me for a very, very long time. My future bride was wearing a simple black figure-fitting dress. Her hair was loosely braided over her right shoulder. A simple silver chain and bracelet matched her earrings. It was her makeup which set the picture and surprised the hell out of me. She'd always looked naturally beautiful without makeup, even greater with lip color and some basic cosmetics, but looked stunning with her eyes done like a fashion magazine cover model's. She looked, quite simply, magnificent. My fianc\u00e9e. I loved even thinking that word.\n\n\"I'm nervous as all hell, Will,\" she said.\n\n\"I know, Baby. And also know it doesn't help when I say you've nothing to be worried about. But... you've nothing to worry about. That is, unless my dad has too much to drink and starts singing to us in his Frank Sinatra impersonation. If he does, take it as a compliment.\"\n\nIt was 7:08 when we pulled into the parking lot. I saw my father's SUV in a parking spot and decided to use the valet service since we were a bit late.\n\n\"Here we go. They're already here,\" I said.\n\nMy heart was pounding. I could only imagine what Dawn was feeling. A valet opened Dawn's door and helped her from the car. I removed my suit's coat from the hook in the back seat and joined Dawn. I handed my keys to the valet and took the offered stub.\n\n\"You ready for this, Devo?\"\n\n\"Barely. How do I look?\"\n\nI kissed her hand. \"Like a supermodel. This sounds selfish because it is, but I can't wait to show you off.\"\n\nI held the door open for her as we walked into the building. I saw my father standing across the wide expanse of the foyer with my sisters. He had a glass of something in his hand, and my sisters each held a glass of wine. My siblings noticed my entrance and waved, but paid no attention to Dawn. Perhaps they assumed I was simply holding the door for some random woman who happened to be walking in at the same time. But when I put my hand on her shoulder and guided her toward the group, my father's jaw went slack. I smiled and gave him a wink.\n\n\"Billy! Oh, my god!\" Tracy, my eldest sister by six years ran to me and gave me a hug. She knew I hated that nickname but used it anyway. \"Jeez, Bro, you're looking good! All CEO like and everything.\"\n\n\"Hey, Trace, where's Mom and Mark?\"\n\n\"He had to go to DC this morning. Government business,\" she said. \"Mom went to the ladies' room just before you walked in.\"\n\n\"Heya, Sara! Howsa you?\" I said in a fake Jersey accent we'd practiced since childhood when we were goofing around. I gave her a hug. \"Missed you last Christmas.\"\n\n\"Yeah, yeah, yeah, and I nevah cawall, right?\" she smiled, bringing forth a laugh from me.\n\n\"Christmas in Cancun was horrible, by the way. Just horrible!\" she laughed sarcastically in response before her eyes moved to Dawn standing a short distance away.\n\nI stepped to my fianc\u00e9e and drew her into the group.\n\n\"Dad, Sara, Tracy, please allow me to introduce Dawn Vo.\" I made the introduction deliberately brief.\n\nSara was the first to shake hands with her.\n\n\"And...?\" she prompted, not letting go of Dawn's hand.\n\nDawn answered, \"Will and I met on the high school alumni Facebook group. Did you two go to the same high school as him? We've been getting to know each other over the last year or so. I told him if he was ever in town, he should let me know so we could meet up. He called me this afternoon and here I am!\"\n\nDawn looked at me and gave me that smile. My sisters looked rather wary. Dad looked at me with a curious expression.\n\n\"Would you girls mind keeping this young lady company for a few minutes? Will needs to go to the bar,\" he requested.\n\nMy father tugged at the elbow of my suit coat, so I followed him to the bar where I ordered two Gentleman Jack's on the rocks.\n\n\"Alright, what was all of that about?\" he asked.\n\n\"That's not how we met. I guess she's just buying me some time,\" I answered.\n\n\"I'm not calling you a cradle-robber, but isn't she quite a bit on the young side?\"\n\n\"You're not going to believe me, Dad, but she and I are the same age. She's actually three days older than me.\"\n\n\"Holy cow. You're a liar,\" he said, visibly stunned, studying Dawn anew.\n\n\"Easy there, Dad,\" I chastised with a chuckle.\n\n\"It's a good sign that they seem to be getting along well,\" he said, pointing toward the trio who were chatting and smiling.\n\nI was amazed how Dawn, as nervous as she said she'd said she was, appeared so completely comfortable amid total strangers. She was smiling naturally, had comfortable body language, and had my sisters listening intently to whatever she was telling them. I caught her eye and smiled at her. She winked back.\n\nMy mother arrived just then. She pinched my arm and pulled me down for a hug.\n\n\"Hi, Mom,\" I greeted her.\n\n\"It's so good to see you, Son! You always look so handsome dressed up like this,\" she said, flattening the lapels of my suit coat with her palms.\n\n\"Oh, this old thing?\" I vogued for comic effect.\n\nMom laughed at my display then looked over at Tracy and Sara.\n\n\"Who is that little girl your sisters are talking to?\" she asked.\n\nLittle girl? I had to swallow the laugh. \"Let's go find out,\" I said.\n\nDad laughed at my response and patted me firmly on my back.\n\nI faced the three ladies I'd held dear for decades as I prepared to deliver the reveal. Unfortunately, the moment was interrupted when the hostess approached my father and told him his table was ready. My mother was visibly confused and concerned when I handed \"that little girl\" an obviously potent drink, put my hand to the small of her back and escorted her with us.\n\nAgita was plastered on my mom's face as we all took our seats. I saw her whisper into my father's ear. He shrugged then grinned at me, even though his wife's discomfort was as apparent as thick fog.\n\n\"Will,\" he said, \"your sisters and I have already met her, but your mother hasn't. Please introduce this young woman before your mom becomes unhinged.\"\n\n\"This is Dawn Vo.\" I said.\n\nMy female family members stared blankly, and my father leaned back in his chair with a grin on his face, watching Mom, and preparing for the show.\n\n\"Dawn told Tracy and Sara quite a whopper. We didn't go to the same high school. She went to school in Florida, and we didn't meet online. I've known Dawn since I graduated college. We've worked together at Extecha for twenty years.\"\n\nI noticed disbelief in several sets of eyes.\n\n\"Yes, you heard me. And before you ask, she and I are the same age. She is my closest friend. She is my world. I adore her beyond my ability to describe. I love her so deeply it comes out of my pores. I'm pretty damned sure she feels the same way about me because she said 'Yes.'\n\n\"This beautiful woman is my fianc\u00e9e,\" I said, looking into Dawn's eyes.\n\nAll three of the other ladies shrieked simultaneously and Dad slapped the table and started laughing, probably relieved that his difficult task for the day was successfully completed. Numerous sets of curious eyes in the dining room shifted our direction at the ado.\n\n\"Get out!\" Sara yelped with wide eyes staring at Devo with a huge smile on her face. \"You, girl, are a phenomenal liar!\" She laughed and looked at me.\n\n\"And you, you twerp, are a jerk for not telling us sooner! She told us a hell of a tale while you and Dad were at the bar. She had us convinced that you'd graduated before she started high school and you'd never met in person until tonight! I even thought I remembered seeing her on that alumni group!\"\n\n\"I'm sorry!\" Dawn said meekly with a sincere look of concession on her face.\n\n\"Let me see the ring!\" Sara demanded.\n\nOh, shit!\n\nDawn raised her left hand and showed the table her ringless finger.\n\n\"William, why is there no diamond?\" Tracy whispered loudly.\n\n\"That's a story for another day,\" I offered.\n\nMom was the first to leave her seat. Dawn stood and Mom gave her a hug, held her at arms-length, and looked her up and down.\n\n\"You are just positively adorable! Will, she's beautiful! Isn't she just beautiful?\"\n\n\"I noticed that quite a long time ago,\" I laughed.\n\nI had risen when Dawn had, and Mom hugged me tight. Dad and each of my sisters followed suit in giving each of us a congratulatory hug. Dad ordered a bottle of champagne.\n\nAfter we returned to our seats, Dawn was suddenly the center of attention. The conversation was bright and lively. My sisters spent a good while grilling Dawn with questions, mostly around the manner in which I proposed. She managed to answer them all honestly while still preserving our modesty. Questions about the \"When and Where\" of the impending nuptials were waved off as unknowns. Sara asked to see Dawn's driver's license to prove her age. I was surprised that she complied with her request.\n\nThe ladies were suddenly quite interested in Dawn's appearance. Compliments gushed.\n\n\"You look half your age! You're so tiny! Do you work out? Where'd you get that dress? Can I find those shoes on Zappos? How much time does it take you to do your hair like that? How long is it when it's not braided?\"\n\nI loved every second of it. My sisters acted like they'd adopted a new sibling just like that. Dad pulled me into a sidebar discussion.\n\n\"Son, be honest with me. Where'd you find that woman?\"\n\n\"Really, Dad. I've worked with her for twenty years. Remember me telling you how Extecha policy prohibits any kind of romantic relationships with coworkers in the same business unit? That kept us at bay, and we never realized how close we had become.\n\n\"She decided back in June to go work for the company Extecha spun off so the policy didn't matter anymore, so we finally just... clicked. It didn't take us long to realize that ours was far more than a close friendship. When we could finally talk about it, we realized we were deeply connected with each other, and had been for a long time. There had just been no way to express it and still keep our jobs.\n\n\"When she resigned, we were freed. Just between us for now, I asked her to marry me this morning. That's why she doesn't have a ring.\"\n\n\"Look at your mother. She's impressed. I can tell. So am I. You done good, kiddo.\"\n\n\"Yeah. I did. It only took twenty years for me to figure it out.\"\n\nThroughout the evening, we enjoyed sumptuous steak with a variety of shareable sides. We enjoyed several bottles of a really fine red wine suggested by the sommelier. The food and drink certainly added lubricity, and I enjoyed watching how quickly my family accepted the idea of their seemingly permanent bachelor son or brother settling down with the woman sitting beside me.\n\nAs the night went on, we said our farewells and headed to the hotel, despite my mother's insistence that we stay at the house. I accepted the invitation to come the next morning and spend some time there before we headed back to the airport that afternoon.\n\nWhen we arrived, I gave Dawn the nickel tour of the house. Mom, of course, dragged out the photo albums, forcing me to endure the laughter of a very entertained fianc\u00e9e when certain embarrassing pictures were shown such as my naked four-year-old self in a bubble bath, or my skinny-ass nerd picture from the computer club yearbook page. It was torturous for me, but Dawn seemed quite content to listen to the countless tales my mother told of my upbringing.\n\nDad took pity on me and invited me to sit on the porch to enjoy a cigar and chat about my future life. It'd been years since I'd had one. One question caught me by surprise because I hadn't realized I'd said the name in public.\n\n\"Why do you call her Devo?\"\n\n\"Email addresses for most employees at Extecha are first initial, last name. Like mine is double-u richards. Hers is, well, was dee vo. Devo. I probably called her that a few times when we first started working together, and it sort of stuck. I never thought about it before... she didn't seem to mind when I addressed her by that nickname, but she'd give a ration to anyone else who tried, so I stopped saying it around other people a long time ago, or so I thought. When did you hear it?\"\n\nDad smiled. \"You said it when you told her you love her when you were waiting at the valet stand when we left the restaurant last night.\"\n\nI looked at my fianc\u00e9e through the window. She was chatting with Mom.\n\n\"Oh. Well, don't call her that. She might not like it,\" I smiled back at him.\n\nWhen Dawn came to the patio to fetch me to leave for the airport, I approached her for a quick kiss and she pushed me back.\n\n\"Huh-uh, buddy, I'm not kissing you until you brush your teeth and change that shirt!\" She fanned her hands at me.\n\nMy mother laughed hard at her directness. I went and changed into my spare t-shirt and brushed my teeth.\n\nAll in all, as fast as the impromptu journey was, it was still very fulfilling. We said our goodbyes and left for the airport.<hr>\n\nChapter 22: November 2016&ndash;November 2017\n\nDawn and I deliberated for several weeks about an appropriate engagement ring. I particularly favored a three carat solitaire, but she insisted on something more understated. I felt I'd cheated her that it was appraised at less than $5,000, but she was thrilled with my choice. I realized that my preference was similar to hers; I wanted her to give me a simple gold band on our wedding day. Nothing fancy.\n\nA month after our visit to Missouri, we made a similar pilgrimage to Miami where I was introduced to Dawn's aunt and uncle. Though Dawn had informed them by phone much earlier than our trip, I thanked my lucky stars that they, at least outwardly, appeared happy with the news of their surrogate daughter's impending nuptials.\n\nI was equally entertained when her aunt produced photo albums. One album contained a photo that amazed me. It was a photo of the three of them at her high school graduation. Dawn had short hair! I knew for a fact that I would have had a major crush on that girl if we, indeed, had gone to school together. But then I felt uncomfortable thinking those thoughts when I remembered she'd graduated high school at only sixteen. Her hair was the only indication in my mind that time did, indeed, pass for her. It made me wonder if my love had somehow encountered the fountain of youth at some point early in her life.\n\nHer aunt flipped through several more pages of the album. \"This is Vinh Nhung when she was just a few months old,\" she said in heavily-accented but quite passable English.\n\nI was stunned motionless as I stared at the picture. Surely Dawn's aunt was mistaken because I was looking at a picture of Dawn holding an infant.\n\nHer aunt must have seen my stunned expression. \"That is her mother holding her. Nhung was my sister's miracle child. She was told by many doctors she was...\" she paused for a moment then spoke to Dawn in Vietnamese.\n\n\"Infertile. Barren,\" Dawn offered.\n\n\"Her mother is forty-six years old in that picture,\" her aunt added.\n\nI couldn't believe what I was being told. I looked up at Dawn.\n\nShe nodded at me with moist eyes. \"My father died in a construction accident before he knew my mother was pregnant. My mother was struck and killed by a careless motorcycle driver when she was walking across the road to my school. That's why I came to live here.\"\n\nThe woman in the picture was ageless. Just like Dawn. Her uncle must have noticed my eyes alternating back and forth from Dawn to the picture. I was comparing eyes, cheekbones, ears, and other features.\n\nHe said, \"They look the same, yes?\"\n\n\"No,\" both ladies said in unison. Dawn's uncle chuckled and shook his head at their disbelief.\n\nMy word, did they ever. The fountain of youth was astounding genes.\n\n\"She was a beautiful woman, Dawn. Just beautiful. I am a very lucky man to have been blessed by her giving life to you.\"\n\nDawn squeezed my hand as she wiped a tear out of her eye.\n\nI was offered another tea, but refused because the day was running long and I was afraid further reminiscing might make us all maudlin. Dawn was the one to suggest we make our departure, and I followed her lead.",
        "As we drove back to the hotel, I asked Dawn, \"Well? What do they think?\"\n\n\"They're a bit uneasy,\" she answered.\n\n\"Really? That surprises me. I thought we got along fine.\"\n\n\"They think you're the bee's knees. The cat's meow. The icing on the cake.\"\n\n\"Are you deliberately trying to confuse me?\"\n\n\"Yeah,\" she smiled at me. \"Seriously. They think you're great, and they're very, very happy that I'm very, very happy.\"\n\n\"Dawn, stop messing around. Why are they uneasy about me?\"\n\n\"They're not uneasy about you. They're uneasy that I'll be taking your name.\"\n\n\"Whoa! We haven't talked about that, have we? I guess I assumed you would, but that's your decision.\"\n\n\"I have decided, Honey. Back when I assumed that Shit-for-brains would, at some point, pop the question, I never could decide whether I'd take his name, or hyphenate, or just keep mine. I never made a decision and then the problem went away. But you? No. It's an easy decision. There isn't any doubt. I want to take your name, Will. You and I are to be joined together as one.\"\n\n\"I'm glad you think that way. I am giving myself to you, and you are giving yourself to me. You know, I am all for pay equity and all that&mdash;\"\n\n\"I never took you for a closet feminist,\" Dawn interrupted me and chuckled.\n\n\"You know what I mean. You and I are equals and I'll always treat you like it, but I will tell you I don't get behind the ultra-feminist ideology that wives are completely independent of their husbands. That's bullshit. It's bullshit in both directions.\"\n\nI paused, waiting for rebuttal.\n\n\"You're not going to get any argument from me. I want someone I can completely depend on, and I need to be someone you can always depend on. You are, and I am. It's not possible to be truly dependable and independent. Those two things are antithetical.\"\n\n\"Absolutely. I agree.\" I truly did. I clutched Dawn's hand and she squeezed it back.\n\n\"Where was I? Oh, yeah. So, in a lot of Asian cultures, women keep their father's name. I never knew mine. Though I do honor him for giving me life, I'm still apple pie. Like I just said. When you asked me to marry you, I knew I wanted to be known, by name, as your wife. I want your name. Even though all the paperwork for a new passport and driver's license and social security and all that crap is going to be a huge pain in the ass, I can't wait to introduce myself to others as Dawn Richards.\"\n\n\"Then you won't be Devo. You'll be Drichards.\" I chuckled.\n\n\"If you ever call me that, I'll smack the whiskers off your face,\" she laughed. \"I'll always be your Devo.\"\n\nAfter a week or two, we began to focus on wedding plans. We decided on a date (February 11, 2017, to be precise). Dawn had always been a practical woman and eschewed the entire idea of a fantastical storybook wedding, so we booked a ballroom at the Hilton Anitole and employed their planner to arrange it. All we did was pick color palettes and select a dinner menu to be offered our guests. And, of course, an open bar and a jazz ensemble.\n\nBetween the two of us, our guest list topped out at just over one hundred forty plus their \"plus ones.\" We made arrangements to live-stream it should our more remote friends choose to join from afar. Several dozen took advantage of it.\n\nDuring the post-ceremony dinner, an A/V specialist who'd collected Skype recordings of remote friends that sent well-wishes via internet would occasionally break between the ensemble's sets and play them on the projection screen. The boss had to be in Singapore, but his was one of the first ones shown. He told a two minute roast-like story about Dawn and me that had the room in stitches. My sisters double-teamed me and made me blush a few times. Mom, Dad, Mark, and Dawn thought it was funny. I disagreed.\n\nDawn's dress was simply perfect. She made simplicity of style look so elegant. She'd chosen a silk gown with not a hint of lace or frills. It was a beautiful dress with broad horizontal pleats that highlighted her gorgeous figure and contrasted so wonderfully against her jet black hair which she had to have spent a fortune having sculpted into courses of ribbon-like curls.\n\nIt was an incredible night. We stayed in the ballroom until the organizers kicked us and a few stragglers out so they could begin dismantling the decorations. We'd both had our share of drinks, but that didn't stop us from official newlywed lovemaking as soon as we returned to our huge suite on the twenty-fifth floor.\n\nWe weren't able to honeymoon immediately after the event because our work responsibilities were just too hectic and compressed to allow for it. We did, though, finally get away for a week on our first anniversary to an all-inclusive resort on the island of Barbados. Dawn's body looked so definitively feminine in rather dainty swimwear, and I loved watching her flaunt her curves to careless stares.\n\nYou haven't lived until you've made love amid the sound of ocean waves and tree frogs under a moonlit sky while soaking in a hot tub on the balcony of an isolated bungalow with a single candle providing the only source of light other than the moon and stars.\n\nA month before the wedding, I canceled the lease on my apartment and donated the majority of my furnishings to charity. I moved the rest of them to storage, only taking what I needed to live at Dawn's house. She almost immediately decided that it was time to upgrade. Dawn had lived in her house for seventeen years and it always had felt \"cozy\" to her, but she felt it was too dated and cramped. It was in great shape and would make a comfortable starter home for a young couple on a smaller budget.\n\nAfter we'd merged our bank accounts, we met with a financial adviser. Under his advice, we determined we could easily afford to build a new house instead of trying to shop and compromise on something preowned.\n\nA bit of sage advice that Dawn had given me years and years earlier helped make it all possible. She once told me, \"Spend each dollar as if it might be your last. Invest as if willing to lose it all.\"\n\nIn other words, save every dollar possible and invest it carefully but aggressively. She'd also told me that every time she earned a raise or merit bonus, she'd save two-thirds. My father had given me similar advise when I graduated college. By moderating the speed at which we'd increased our standards of living, those strategies allowed our combined net worth to climb well into the low eight figures during the prior two decades.\n\nWe decided that, if we exercised a portion of my stock options and sold some of our portfolio, we could afford to build a really nice home without putting any debt over our heads.\n\nWe bought a two-acre lot within a gated community in Royce City and started work with an architect. A guy with twenty-eight years of residential design experience guided us through the whole process until he'd drawn up rough plans for a five bedroom, four bathroom house. Dawn intended to move her aunt and uncle to live with us at some point, so we also designed a separate small guest house for them.\n\nThe main house, totaling 3,820 square feet (4,710 under roof), would feature an enormous kitchen with lots of workspace and light and appliances to fit Dawn's wants. We both spent more time with the nuances of the master suite than almost any other part of the house. The master suite would be larger by itself than my apartment at almost 900 square feet. The bathroom alone would be far larger than the master suite of Dawn's house.\n\nWe wanted a shower to end all showers. Basically, the shower area was a wet room. A sliding top-mounted glass door could be closed and the interior would be sealed off from the rest of the room. Nothing going on in that space would get the floor of the rest of the bathroom wet. No thresholds to stub toes. It would contain a built-in, eight-foot long heated tile bench, multiple overhead rain showers, adjustable heads and wands at each end, a steam generator, ventilation and lighting. It'd be very much like the master bathroom in my condo in Lexington, only better. Dawn wanted a bidet, so it was added to the plan. Like the media room, the master suite was separated from the rest of the structure with acoustic barriers.\n\nThe media room, office, and exterior materials were the last things detailed. We chose a combination of stucco and natural rock facades for the exterior walls and a roof of slate tile, with standing seam metal over specific locations. The roof was expensive as all hell, but was engineered to be impervious to all but Texas's fiercest hailstorms.\n\nFinal plans were drawn up as we hired a general contractor to have it built at an expedited pace. Ten months from the idea and $779,120 later, it was move-in ready. The pool with a hidden grotto, spa, and rock waterfalls would be completed the following spring.\n\nThree months prior to closing on the house, we hired an interior stylist and designer to make recommendations for all the new furnishings. Neither Dawn nor I thought any of our existing stuff fit the style, so we donated another truckload of furnishings to charity.\n\nWe'd built a sanctuary, a paradise. We created our own Eden. We concretized the crap out of our dreams, the place where we planned to spend a huge chunk of the rest of our lives, and it hardly broke the bank to do it.\n\nWe moved into our new house three weeks before Thanksgiving of 2017. We played \"Adam and Eve\" the entire weekend, inaugurating almost every room in the house and putting all the new furniture (and a few floors and cabinets) to the test.\n\nWe invited both families to a traditional turkey feast on Thanksgiving. After a tour of the house, the always outspoken one with no filter, Sara, elbowed me in the ribs and said, \"You two must really enjoy showers.\"\n\nI deep-fried a twenty pound bird, but Dawn knocked the dinner out of the ballpark with an incredible array of side dishes plus a few of her masterful Asian Fusion specialties that impressed both sides of the family thoroughly.\n\nIt turned out that my father and father-in-law (I decided it was easier to refer to him that way) both enjoyed cigars. Mark got a scolding when he joined us for one outside at the fire. I didn't.\n\nOur families returned to their homes that Saturday.\n\nOn Sunday afternoon, we held a housewarming party attended by at least two dozen friends and co-workers and their significant others. A constantly recurring theme of conversation was the lack of home automation we'd designed into our estate. Given our high-tech backgrounds, it surprised many of them.\n\nDawn and I completely agreed we didn't want to have to relive our days of basically being technical support just to maintain systems that turn lights on and off, and be constantly battling obsolescence and upgrades, let alone security concerns. A good old everyday light switch is just fine, thank you very much. The complicated pool and spa controls, however, did benefit from automation, so we weren't total Luddites.\n\nThat evening, a serious strain was put on my stash of Single Barrel. Several bottles were dispatched, and I gave one as a party favor to anyone who asked, but Dawn and I abstained in order to keep things from getting out of hand. Uber and Lyft had an unusually high number of dispatches to our place that night. After we'd seen everyone safely out the door, Dawn and I began the task of cleaning up the kitchen and dining areas. Earlier that morning, Dawn had made dozens upon dozens of beef, duck, and seared ahi tuna canapes and lots of other finger-foods. She paused while cleaning off the planks on which they'd been presented.\n\n\"You know, I think I might have overdone it a little this weekend. I've chopped and prepped so much food that my arms are sore. Even my boobs hurt.\"\n\nI took her in my arms and hugged her. \"Yeah, the food was fantastic, Babe. Let's leave the rest of this for tomorrow. Let's go to bed. I'm hungry for something else.\"\n\nThen came Christmas.\n\nDawn and I chose to experience our first Christmas holidays as husband and wife together at home by ourselves. On Christmas Eve (Dawn insisted we not wait until morning), we sat together on the floor in the living room next to the lit fir Christmas tree and unwrapped each other's gifts. I'd bought Dawn several pieces of jewelry, a couple of books from authors she enjoys, and a set of ceramic cutlery to which she'd shown a particular interest. She particularly loved the platinum earrings I'd selected. The first few things I opened were all Blu-Ray movie collections.\n\nJudging by the shape of the box she gave me last, I predicted the newest iPhone was hidden inside. Dawn acted a bit shifty and anxious as I began to unwrap the paper. It wasn't a phone. I couldn't tell what was inside the black plastic trick-puzzle case until I figured out which latches to press simultaneously to allow the two halves to separate. When I finally got the case open, it took my brain four seconds to process what I was seeing.\n\nI felt my heart skip those beats.\n\nI looked at my wife. She had her hands clasped in front of her mouth, watching me very intently.\n\n\"Really?\" I asked, tears welling in my eyes.\n\n\"Yes,\" she whispered softly, smiling broadly in apparent relief when she saw my expression. I crawled over to her and she pulled me into her arms. I started crying. My tears of joy unleashed hers. What she'd given me cost less than the packaging in which it was wrapped, but its significance was more valuable than anything I owned.\n\nShe'd given me a pacifier.\n\nDawn was pregnant. My beautiful wife was pregnant!\n\nShe pulled the test she'd taken that morning from her pocket and showed me the blue lines. I was so overjoyed that my manners left me. I scooped Dawn off the floor and started toward our bedroom.\n\n\"Are you okay? Do you feel okay? Do you think you're up to... can we... are you able... um, you wanna fool around?\"\n\n\"Yes, please! Merry Christmas!\" she laughed then kissed me as I carried her all the way down the hall and into our bed.\n\nIt was an incredibly passionate week away from work.\n\nShe was three months pregnant when we went on our delayed honeymoon, and as I mentioned, her feminine form had grown even more feminine by then. The beginning of a delightfully convex tummy was on display as she pranced around the resort in that hot orange bikini I liked so much. Her top half hadn't changed much yet, so the bikini still fit her perfectly.\n\nOne afternoon while we were waiting on iced tea at one of the bars, a woman probably half Dawn's age walked by and said, \"Way to rock that bump, girl!\"\n\nDawn smiled at comments like that. Hell, I even noticed plenty of young grooms taking note, possibly wondering if the sight of their new wives looking like that would be so attractive.\n\nI guess the opposite happened occasionally, too, when retirement-aged women would look at Dawn with obvious disdain, probably thinking her barely-bumped body should be draped in a mumu, but we didn't give a shit. My wife literally grew more gorgeous every day, and I made damn sure to tell her that often.\n\nThe first time my love's nipples started leaking during sex was a surprise to us both. It embarrassed her at first, but when I showed my delight, it eased her concerns. I tended to leave her breasts alone, though, because I didn't want her to have to deal with the mental gymnastics of their sexual nature to me versus a source of nourishment for our developing child. I'd read that could be a source of anxiety for many mothers (and fathers) and I just didn't want that to happen.\n\nGiven Dawn's age, her pregnancy was considered high risk and was watched very carefully. Her OB had explained that the probability of pregnancy at her age was less than ten percent, and was frankly astounded she'd conceived so quickly after going off birth control, but when Dawn explained how she was conceived when her mother was at an even more \"advanced\" age, her doctor was cautiously optimistic. Still, every test she undertook made us nervous to the core, especially when Dawn began to exhibit slightly elevated blood pressure in her last trimester.\n\nMy handsome baby boy, Aaron Vinh Richards was born at 3:17pm on July 27, 2018. He arrived at a healthy seven pounds eleven ounces with a head full of jet-black hair. We both said prayers of thanks when all of the neonatal genetic tests showed no reason for any concern. The fact that Dawn was so physically fit allowed a quick recovery from the c-section. She was up on her feet and walking around, though gingerly, the day after Aaron was brought into the world.\n\nReassured that he's a healthy baby, my biggest worry now is that I'll be that weird old fart in his late fifties looking like the kid's granddad at his graduation. I'm convinced his mother won't have that same worry.<hr>\n\nChapter 23: Spring 2019\n\nSo it's now April of 2019. Dawn and I have been married just over two years and Aaron will have his first birthday in July. Ben Hodges announced his retirement the year after our wedding, and I was selected by the CEO and approved by the board to take his chair as CIO coupled with the title of Senior Vice President. I took over on January 2.\n\nDawn and I have grown so much closer in these two years. When we get alone time, we still play around like teenagers. I think we've both done a great job of tending to the kiddo while also making sure we have time to ourselves.\n\nShe's outdone herself ensuring that she doesn't \"monopolize\" time with our son. She came up with the idea within the first month after he was born to ensure Aaron would fall asleep with me holding him on my chest right after she'd breastfed him. She insisted on skin-to-skin contact, so there were times when he spit up all over me, but hey! That's my boy! After a handful of fits and starts, Aaron is now just as content falling asleep in my arms as hers, but I can't sing lullabies as well as she can.\n\nWe are bound and determined to avoid letting the stress of early parenting get between us or create distance. Nanny services are a key component for ensuring quiet time and date nights.\n\nIn fact, last month, Dawn gave me a quite a night to remember. She'd had a particularly satisfying day at work and made a rather creative and yummy meal for us to share. After we enjoyed dinner, she fed Aaron and I put him to bed in a post-meal stupor. He'd reached the age where he would sleep through the night.\n\nCarlie, our occasional nanny, was a senior pre-med student at UT Southwestern. She worked on her studies in the office where she could watch and listen in on Aaron via an audio/video channel tunable on any display in the house. She knew how to summon us if it became necessary, but in the prior six months, Carlie was usually able to keep an eye on Aaron just fine by herself. I'm pretty sure she knew what was going on when we'd hire her service even when we didn't go out for the night, but it weirded me out if I thought about it too much. It'll probably feel even weirder when Dawns aunt and uncle sit him for us.\n\nDawn settled into the chaise lounge in the living room. She was wearing yoga pants and a tank-top, reading something on her Kindle. I could tell she was feeling particularly randy because, after she'd been reading for about forty-five minutes, she looked over at me and caught my eye.\n\nShe parted her legs, letting my eyes wander her \"kryptonite.\" That particular maneuver was one of the stronger non-verbal cues she'd taken to using to express interest in intimacy. Sometimes I would \"ignore\" the lesser signals for a little while to see if she would escalate her approach. There was no need for that this time because she led with a fastball through the strike zone when she began slowly stroking alongside the plumpness of her vulva with a vee of fingers while looking in my eyes.\n\n\"Will,\" she said, setting her Kindle on the side table. \"I want to take a shower. Come join me.\"",
        "\"Yeah?\" I asked.\n\n\"Yeah.\" She came to me and took my hand. She led me toward the master suite, closing and locking both sets of hallway doors along the way in. \"I want to try something.\"\n\n\"Yeah?\" I repeated.\n\n\"Yeah. Something I just read in a book.\"\n\nWe walked into the bathroom and disrobed. Dawn's figure was still stunning. her flat abs were in beautiful form as she'd gotten back into working out at the gym. Sometimes she'd do her CrossFit workouts with Aaron in his car seat right next to her getting lots of coos from ladies who'd pass by.\n\nEven the four-inch scar across her lower abdomen doesn't detract from her appeal look. Even though it sometimes causes her a little discomfort due to nerves being transected during the procedure, she likes it when I kiss it. She sports it like a badge of honor.\n\nWe stepped into the wet-room and Dawn placed a couple of folded towels on the bench. \"Can I ask you a question, Sweetie?\" she asked as she adjusted various settings on the showers and steam generator.\n\n\"Sure.\"\n\nShe stood inches away from me, face-to-face, and pulled me down to a deep, delicious, tender kiss.\n\n\"Do you not like my breasts anymore?\"\n\n\"Of course I do! You've got great boobs,\" I answered her honestly. Heck. I loved the A cups, and I love the B cups.\n\n\"Then why don't you like to play with them like you used to?\" She took my hands and pressed them into her breasts.\n\nI withdrew them and explained my reasons.\n\n\"You're such a sweetheart, Baby, but I miss it. I give you permission. It's okay.\"\n\n\"But...\" I hesitated a little.\n\n\"What, this?\"\n\nShe pressed into her left breast with her fingers and milk dribbled out of the nipple.\n\n\"I didn't think that bothered you. Especially the way you react when it starts spraying out of me sometimes when I get close to an orgasm.\"\n\n\"It doesn't bother me at all. But it belongs to him,\" I gestured in the direction of his room.\n\n\"No, my love, it belongs to me. Yes, he gets first dibs, but I fed him an hour ago and he's out like a light. I'm just saying.\"\n\nShe encouraged more liquid from both nipples. Watching the display made me hard.\n\nI considered her words carefully. I guess she'd been thinking about it for quite some time, because I'd pretty much left her breasts out of our play for the last year or so. I'd tried to avoid confusion, but it appeared I'd created some, and I decided to follow her lead.\n\n\"Can you show me how you do that?\" I asked.\n\nShe took my hands and positioned my fingers above and below her nipple and pressed them into her then drew them together. Her nipple dribbled.\n\n\"You are so beautiful, Devo. And I don't mean that just to mean sexy, which you are, but the complexity and wonder of your body amazes me.\" I was mesmerized how the movement of my fingers encouraged her milk to flow.\n\n\"Come here. Let's get you cleaned up. I want to watch you cum tonight.\"\n\n\"Huh? You've seen it hundreds of times.\"\n\n\"No, I've watched your face when you cum. I've seen your stuff come out of me. I've felt it inside me, but I've never seen it actually come out of you,\" she said as she stroked my penis.\n\nMy mind sifted through memories. Could that be true?\n\n\"But at the hotel in Lexington?\" I asked.\n\n\"No, I had you covered with my hand. I want to see it come out of your dick. Can I?\" She squeezed up against me and rubbed my member with her firm tummy.\n\n\"Who am I to say no to a request like that?\" I grinned.\n\n\"I was reading something that tells me how to make it a great show. I want to try it.\"\n\n\"Okay, what do I need to do?\"\n\n\"Nothing. Just trust me, okay?\"\n\n\"Always,\" I said.\n\n\"Let's get cleaned up first,\" she said as she began to lather my body with the almond soap we liked to use.\n\nWhen I reached for her, she said, \"No, tonight's about you. I've denied you too long. All I want tonight is to give you pleasure and watch the result.\"\n\n\"If you say so, Devo,\" I said. \"But you're wrong. You've never denied me anything, but I'm going to go along with your story,\" I chuckled.\n\n\"Honey, in your mind, I've denied you my breasts for more than a year. They're yours tonight, and I'm hoping I can make you orgasm more forcefully than you ever have.\"\n\n\"What do you have in mind?\" I asked.\n\n\"Lay down on those towels and lift your feet. I'm going to cleanse you a bit deeper than before, so please tell me if it's uncomfortable or you want me to stop, okay? I know you trust me, but this is going to be something new.\"\n\n\"Okay,\" was my simple response right before she pushed her finger into me. She wasn't kidding. She went in further than she ever had before. \"What exactly are planning?\" I asked between soft moans.\n\n\"I'm going to find your p-spot,\" was her simple reply.\n\n\"Oh?\" I had never heard the term.\n\n\"Yeah.\"\n\n\"Uh, okay.\"\n\nShe washed my backside thoroughly. When I asked if I could return the favor, she \"forced\" me to watch as she tidied herself, complete with a pee. Both thoroughly aroused me considering I'd never seen her finger her own butt before. It'd also been a while since she emptied her bladder all over me. She held my dick and directed my pee as I emptied my own.\n\nWe thoroughly washed our bodies then towel-dried each other. Dawn brought several warmed towels and spread them in strategic locations atop the bedding and brought a blanket along in case we were chilled.\n\n\"I'm going to be inside you for a while,\" she said with that particular and deliciously sweet smile. \"You tell me to stop and I'll stop, okay?\"\n\n\"Okay.\"\n\nShe put a few drops of silicone lube onto the index finger of her right hand and massaged it into my hole. She applied another dose to her middle finger then pushed it into my body rather deeply.\n\nAfter I was relaxed, she introduced her forefinger alongside her middle finger and entered me with both.\n\nShe explored my insides for a while. I felt urges and sensations I'd never experienced.\n\n\"Does that feel good?\" she asked.\n\n\"It's very different. But what you're doing doesn't feel bad.\"\n\n\"Let's see what happens,\" she said as she continued to massage inside me.\n\nI relaxed quietly for quite a while. I was certain she'd never been inside me nearly as long as she was then.\n\n\"Yeah, that's a good sign,\" she said when I started moaning. \"Just relax into it, Baby. Don't fight it. Let it come. You might feel like you need to pee. Don't fight that, either. You're empty, remember?\"\n\nMy dick was drooling pre-cum and I was becoming delirious. I was having a difficult time holding still. Any time I reached down to stroke myself, Devo would push my hand away.\n\nI felt things I'd not experienced before. I wasn't cold, but my body began to tremble. My cock had been untouched for over a half hour. It was lying limp yet the pleasure I was feeling was telling my brain I was cumming over and over. She held me in that state for quite a while. It was like riding a roller coaster up and down deep then shallow hills and valleys.\n\n\"Are you ready?\" Dawn asked in a whisper.\n\nI only nodded slowly, but I had no idea where she was going to take me.\n\nShe began to suck my cock and and massage it with her free hand while she continued to massage my insides with the other. I felt every tastebud on her tongue rasp on loose skin as I became erect. I felt her swallow and my glans slipped beyond the back of her tongue and into her throat. She held me in her gullet for several seconds as she massaged my base with her tongue, then swallowed again.\n\nDelirious was a mile behind me. I was in utter ecstasy as she deep-throated me. I had no clue how she managed.\n\nI babbled nonsense as my orgasm approached. She withdrew me from her mouth and began to stroke me firmly with the heel of her palm on my sensitive spots. I yelled out her name as I climaxed. The universe went blue in my brain as spasms took over. I made sounds that almost startled me. I heard the echo of Devo's surprised gasps as my engorged prostate emptied itself in rapid, heavy bursts.\n\n\"Holy shit!\" she cried out when the first volley left my body. \"Oh, Baby! Let it all out!\"\n\nShe stroked me firmly while still probing my backside. I felt a shot of my semen land across my forehead.\n\n\"Wow, that's so incredible,\" she hissed. \"So much cum!\"\n\nWhen I had finished emptying myself, I felt her slowly remove her fingers.\n\n\"Look at me,\" she said.\n\nI slowly opened my eyes and watched my lover come back into focus.\n\n\"You shot yourself in the head,\" she giggled. I could see my cum dripping from her cheek and ear. \"You got me, too!\" she said with another chuckle.\n\nI never understood the \"score\" of ejaculating on a woman's face. I always thought it to be degrading. It was something I never wanted to do. \"I'm sorry, Baby. I didn't intend to do that,\" I sighed in near exhaustion.\n\n\"Don't be sorry. You didn't do anything wrong. That was freaking incredible! I had no idea how much force your orgasms have! I hope that felt good?\"\n\n\"Fuck yeah.\"\n\nShe started laughing when she saw something over my head.\n\n\"What's so funny?\" I asked.\n\n\"Look,\" she said, pointing to the wall where a dribble was slowly heading downward to almost behind the headboard of the bed.\n\n\"That's never happened before,\" I chuckled, too.\n\nShe removed the distance winners with the corner of a towel then toweled off my splattered torso and her face and neck. Only then did I realize just how much stuff had gone everywhere. It was on the pillows, all over me, all over Dawn. She had caused me to make quite a mess, and it left me with weakened legs.\n\nWhen my strength had barely returned, we stripped the dirtied linens then hit the showers again to wash off. After putting on clean sheets, Dawn put her pajamas on and went to the office to tell Carlie that she could head home. A hundred fifty dollar paycheck for four or five hours of doing homework while watching over a sleeping tot wasn't a bad way to earn cash.\n\nWhen Dawn returned to the room, she turned on the bedside nursery monitor, took off her clothes, and crawled into bed with me. She pulled me close to her body, then shuffled upward. Her nipple grazed my nose as I moved to cuddle into her arms.\n\n\"I'd really like it if you would suck my titties like before. I miss it. I'm just saying. And if you don't like it, that's okay. Just talk to me,\" she whispered sweetly, running her fingertips down my arm.\n\nI needed no further prompting. I nuzzled into her breast and took her nipple into my mouth and suckled. I tasted her milk for the first time. It tasted like warm, sweetened half-and-half with a little watermelon or cucumber. She was delicious. I was so amazed at what my wife's body was capable of. It was comfortably calming to consume her gift as she stroked my hair and my ears, and listening to her sighs of pleasure as her firm nipple met my desire.\n\n\"You don't confuse me, Will. You arouse me. That is from you and you alone.\"\n\nShe stroked my skin and settled herself more comfortably into her nest of pillows and bedding. I held her naked pussy in my hand and coaxed her into a gentle orgasm with one fingertip massaging her anus and the heel of my palm at her clit while I drank from her body. It was an incredibly intimate experience, one which I now feel comfortable asking for but only when the mood is just right.\n\nIt only took twenty years, but my life is more complete now than it's ever been. And it only gets better every single day. I am delighted that I'll be growing old with the woman of my dreams.<hr>\n\nSo I've spent the last eighty-five thousand words describing how a twenty year relationship can spin on its head and change directions in a heartbeat.\n\nNow, don't get me wrong. My wife and I aren't perfect.\n\nDo we ever fight? Not often, but yes. We've fought over some of the stupidest things.\n\nAre we always \"playing?\"\n\nOf course not. Much more often than not, we fall asleep watching TV or reading. Our early months were certainly like a wild game rutting season. I think we both felt like we wanted to catch up on twenty years of lost opportunities, and it was exhilarating. We do still enjoy when the stars line up and we go at it like animals, though.\n\nIs it always peaches and cream? Not at all.\n\nI didn't write about the time when Dawn was in a multi-vehicle accident on the PGBT when a semi overturned in high wind and spent two days in the hospital. I don't like recalling that.\n\nI didn't write about the time I got food poisoning and wanted to die, and that Dawn cleaned up after me when I couldn't make it to the toilet before puking, or the time she had a stomach bug and I cleaned up after her.\n\nI didn't write about when I misjudged the distance out of the garage and knocked the passenger-side mirror off her brand new Audi. Or the time when I was being a little too adventurous in bed and accidentally knocked the wind out of her with an elbow to her solar plexus.\n\nYeah, that was a mood enhancer.\n\nI didn't mention the time she accidentally kneed me in the balls during a cuddle. Another mood enhancer, right?\n\nWould I change anything?\n\nAbsolutely, without a doubt, no!\n\nI've been in a relationship with Dawn for over twenty years. There's nothing I would change to upset the balance which brought us together and allowed us to create the beautiful child we adore to the roots of our souls.\n\nI'll tell you that marriage is sometimes difficult. I'll tell you also that there's no woman on Earth with whom I'd rather undergo the challenge. I know she has my back, and I have hers.\n\nAnyway, I hope you've enjoyed reading this. Dawn finished reading it a few days ago and thinks that couples should read it together, or even to each other.\n\nShe's thinking about writing her own version of our life; she thinks her perspective will be very different than mine.\n\nKeep an eye out for it.\n\nFarewell!<hr>\n\nIf you enjoyed this story, check out WillDevo's biography page to see more stories featuring the same characters, as well as the best order to read them.\n\nMake sure to follow us so you'll get updated when we post something new."
    ],
    "authorname": "WillDevo",
    "tags": [
        "hea",
        "happily ever after",
        "romance novella",
        "male pov",
        "male pov romance",
        "love story",
        "drama"
    ],
    "category": "Romance",
    "url": "https://www.literotica.com/s/it-only-took-twenty-years-pt-06"
}